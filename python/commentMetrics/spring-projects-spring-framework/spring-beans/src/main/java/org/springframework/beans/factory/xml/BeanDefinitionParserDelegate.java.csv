# id;timestamp;commentText;codeText;commentWords;codeWords
BeanDefinitionParserDelegate -> public BeanDefinitionDefaults getBeanDefinitionDefaults();1328020251;Return the default settings for bean definitions as indicated within_the attributes of the top-level <code>&lt_beans/&gt_</code> element.;public BeanDefinitionDefaults getBeanDefinitionDefaults() {_		BeanDefinitionDefaults bdd = new BeanDefinitionDefaults()__		bdd.setLazyInit("TRUE".equalsIgnoreCase(this.defaults.getLazyInit()))__		bdd.setDependencyCheck(this.getDependencyCheck(DEFAULT_VALUE))__		bdd.setAutowireMode(this.getAutowireMode(DEFAULT_VALUE))__		bdd.setInitMethodName(this.defaults.getInitMethod())__		bdd.setDestroyMethodName(this.defaults.getDestroyMethod())__		return bdd__	};return,the,default,settings,for,bean,definitions,as,indicated,within,the,attributes,of,the,top,level,code,lt,beans,gt,code,element;public,bean,definition,defaults,get,bean,definition,defaults,bean,definition,defaults,bdd,new,bean,definition,defaults,bdd,set,lazy,init,true,equals,ignore,case,this,defaults,get,lazy,init,bdd,set,dependency,check,this,get,dependency,check,bdd,set,autowire,mode,this,get,autowire,mode,bdd,set,init,method,name,this,defaults,get,init,method,bdd,set,destroy,method,name,this,defaults,get,destroy,method,return,bdd
BeanDefinitionParserDelegate -> public BeanDefinitionDefaults getBeanDefinitionDefaults();1335774711;Return the default settings for bean definitions as indicated within_the attributes of the top-level <code>&lt_beans/&gt_</code> element.;public BeanDefinitionDefaults getBeanDefinitionDefaults() {_		BeanDefinitionDefaults bdd = new BeanDefinitionDefaults()__		bdd.setLazyInit("TRUE".equalsIgnoreCase(this.defaults.getLazyInit()))__		bdd.setDependencyCheck(this.getDependencyCheck(DEFAULT_VALUE))__		bdd.setAutowireMode(this.getAutowireMode(DEFAULT_VALUE))__		bdd.setInitMethodName(this.defaults.getInitMethod())__		bdd.setDestroyMethodName(this.defaults.getDestroyMethod())__		return bdd__	};return,the,default,settings,for,bean,definitions,as,indicated,within,the,attributes,of,the,top,level,code,lt,beans,gt,code,element;public,bean,definition,defaults,get,bean,definition,defaults,bean,definition,defaults,bdd,new,bean,definition,defaults,bdd,set,lazy,init,true,equals,ignore,case,this,defaults,get,lazy,init,bdd,set,dependency,check,this,get,dependency,check,bdd,set,autowire,mode,this,get,autowire,mode,bdd,set,init,method,name,this,defaults,get,init,method,bdd,set,destroy,method,name,this,defaults,get,destroy,method,return,bdd
BeanDefinitionParserDelegate -> public BeanDefinitionDefaults getBeanDefinitionDefaults();1337341719;Return the default settings for bean definitions as indicated within_the attributes of the top-level <code>&lt_beans/&gt_</code> element.;public BeanDefinitionDefaults getBeanDefinitionDefaults() {_		BeanDefinitionDefaults bdd = new BeanDefinitionDefaults()__		bdd.setLazyInit("TRUE".equalsIgnoreCase(this.defaults.getLazyInit()))__		bdd.setDependencyCheck(this.getDependencyCheck(DEFAULT_VALUE))__		bdd.setAutowireMode(this.getAutowireMode(DEFAULT_VALUE))__		bdd.setInitMethodName(this.defaults.getInitMethod())__		bdd.setDestroyMethodName(this.defaults.getDestroyMethod())__		return bdd__	};return,the,default,settings,for,bean,definitions,as,indicated,within,the,attributes,of,the,top,level,code,lt,beans,gt,code,element;public,bean,definition,defaults,get,bean,definition,defaults,bean,definition,defaults,bdd,new,bean,definition,defaults,bdd,set,lazy,init,true,equals,ignore,case,this,defaults,get,lazy,init,bdd,set,dependency,check,this,get,dependency,check,bdd,set,autowire,mode,this,get,autowire,mode,bdd,set,init,method,name,this,defaults,get,init,method,bdd,set,destroy,method,name,this,defaults,get,destroy,method,return,bdd
BeanDefinitionParserDelegate -> public BeanDefinitionDefaults getBeanDefinitionDefaults();1351392612;Return the default settings for bean definitions as indicated within_the attributes of the top-level <code>&lt_beans/&gt_</code> element.;public BeanDefinitionDefaults getBeanDefinitionDefaults() {_		BeanDefinitionDefaults bdd = new BeanDefinitionDefaults()__		bdd.setLazyInit("TRUE".equalsIgnoreCase(this.defaults.getLazyInit()))__		bdd.setDependencyCheck(this.getDependencyCheck(DEFAULT_VALUE))__		bdd.setAutowireMode(this.getAutowireMode(DEFAULT_VALUE))__		bdd.setInitMethodName(this.defaults.getInitMethod())__		bdd.setDestroyMethodName(this.defaults.getDestroyMethod())__		return bdd__	};return,the,default,settings,for,bean,definitions,as,indicated,within,the,attributes,of,the,top,level,code,lt,beans,gt,code,element;public,bean,definition,defaults,get,bean,definition,defaults,bean,definition,defaults,bdd,new,bean,definition,defaults,bdd,set,lazy,init,true,equals,ignore,case,this,defaults,get,lazy,init,bdd,set,dependency,check,this,get,dependency,check,bdd,set,autowire,mode,this,get,autowire,mode,bdd,set,init,method,name,this,defaults,get,init,method,bdd,set,destroy,method,name,this,defaults,get,destroy,method,return,bdd
BeanDefinitionParserDelegate -> public BeanDefinitionDefaults getBeanDefinitionDefaults();1351696936;Return the default settings for bean definitions as indicated within_the attributes of the top-level <code>&lt_beans/&gt_</code> element.;public BeanDefinitionDefaults getBeanDefinitionDefaults() {_		BeanDefinitionDefaults bdd = new BeanDefinitionDefaults()__		bdd.setLazyInit("TRUE".equalsIgnoreCase(this.defaults.getLazyInit()))__		bdd.setDependencyCheck(this.getDependencyCheck(DEFAULT_VALUE))__		bdd.setAutowireMode(this.getAutowireMode(DEFAULT_VALUE))__		bdd.setInitMethodName(this.defaults.getInitMethod())__		bdd.setDestroyMethodName(this.defaults.getDestroyMethod())__		return bdd__	};return,the,default,settings,for,bean,definitions,as,indicated,within,the,attributes,of,the,top,level,code,lt,beans,gt,code,element;public,bean,definition,defaults,get,bean,definition,defaults,bean,definition,defaults,bdd,new,bean,definition,defaults,bdd,set,lazy,init,true,equals,ignore,case,this,defaults,get,lazy,init,bdd,set,dependency,check,this,get,dependency,check,bdd,set,autowire,mode,this,get,autowire,mode,bdd,set,init,method,name,this,defaults,get,init,method,bdd,set,destroy,method,name,this,defaults,get,destroy,method,return,bdd
BeanDefinitionParserDelegate -> public BeanDefinitionDefaults getBeanDefinitionDefaults();1356735495;Return the default settings for bean definitions as indicated within_the attributes of the top-level {@code &lt_beans/&gt_} element.;public BeanDefinitionDefaults getBeanDefinitionDefaults() {_		BeanDefinitionDefaults bdd = new BeanDefinitionDefaults()__		bdd.setLazyInit("TRUE".equalsIgnoreCase(this.defaults.getLazyInit()))__		bdd.setDependencyCheck(this.getDependencyCheck(DEFAULT_VALUE))__		bdd.setAutowireMode(this.getAutowireMode(DEFAULT_VALUE))__		bdd.setInitMethodName(this.defaults.getInitMethod())__		bdd.setDestroyMethodName(this.defaults.getDestroyMethod())__		return bdd__	};return,the,default,settings,for,bean,definitions,as,indicated,within,the,attributes,of,the,top,level,code,lt,beans,gt,element;public,bean,definition,defaults,get,bean,definition,defaults,bean,definition,defaults,bdd,new,bean,definition,defaults,bdd,set,lazy,init,true,equals,ignore,case,this,defaults,get,lazy,init,bdd,set,dependency,check,this,get,dependency,check,bdd,set,autowire,mode,this,get,autowire,mode,bdd,set,init,method,name,this,defaults,get,init,method,bdd,set,destroy,method,name,this,defaults,get,destroy,method,return,bdd
BeanDefinitionParserDelegate -> public BeanDefinitionDefaults getBeanDefinitionDefaults();1357119417;Return the default settings for bean definitions as indicated within_the attributes of the top-level {@code &lt_beans/&gt_} element.;public BeanDefinitionDefaults getBeanDefinitionDefaults() {_		BeanDefinitionDefaults bdd = new BeanDefinitionDefaults()__		bdd.setLazyInit("TRUE".equalsIgnoreCase(this.defaults.getLazyInit()))__		bdd.setDependencyCheck(this.getDependencyCheck(DEFAULT_VALUE))__		bdd.setAutowireMode(this.getAutowireMode(DEFAULT_VALUE))__		bdd.setInitMethodName(this.defaults.getInitMethod())__		bdd.setDestroyMethodName(this.defaults.getDestroyMethod())__		return bdd__	};return,the,default,settings,for,bean,definitions,as,indicated,within,the,attributes,of,the,top,level,code,lt,beans,gt,element;public,bean,definition,defaults,get,bean,definition,defaults,bean,definition,defaults,bdd,new,bean,definition,defaults,bdd,set,lazy,init,true,equals,ignore,case,this,defaults,get,lazy,init,bdd,set,dependency,check,this,get,dependency,check,bdd,set,autowire,mode,this,get,autowire,mode,bdd,set,init,method,name,this,defaults,get,init,method,bdd,set,destroy,method,name,this,defaults,get,destroy,method,return,bdd
BeanDefinitionParserDelegate -> public BeanDefinitionDefaults getBeanDefinitionDefaults();1367943112;Return the default settings for bean definitions as indicated within_the attributes of the top-level {@code &lt_beans/&gt_} element.;public BeanDefinitionDefaults getBeanDefinitionDefaults() {_		BeanDefinitionDefaults bdd = new BeanDefinitionDefaults()__		bdd.setLazyInit("TRUE".equalsIgnoreCase(this.defaults.getLazyInit()))__		bdd.setDependencyCheck(this.getDependencyCheck(DEFAULT_VALUE))__		bdd.setAutowireMode(this.getAutowireMode(DEFAULT_VALUE))__		bdd.setInitMethodName(this.defaults.getInitMethod())__		bdd.setDestroyMethodName(this.defaults.getDestroyMethod())__		return bdd__	};return,the,default,settings,for,bean,definitions,as,indicated,within,the,attributes,of,the,top,level,code,lt,beans,gt,element;public,bean,definition,defaults,get,bean,definition,defaults,bean,definition,defaults,bdd,new,bean,definition,defaults,bdd,set,lazy,init,true,equals,ignore,case,this,defaults,get,lazy,init,bdd,set,dependency,check,this,get,dependency,check,bdd,set,autowire,mode,this,get,autowire,mode,bdd,set,init,method,name,this,defaults,get,init,method,bdd,set,destroy,method,name,this,defaults,get,destroy,method,return,bdd
BeanDefinitionParserDelegate -> public BeanDefinitionDefaults getBeanDefinitionDefaults();1382030648;Return the default settings for bean definitions as indicated within_the attributes of the top-level {@code &lt_beans/&gt_} element.;public BeanDefinitionDefaults getBeanDefinitionDefaults() {_		BeanDefinitionDefaults bdd = new BeanDefinitionDefaults()__		bdd.setLazyInit("TRUE".equalsIgnoreCase(this.defaults.getLazyInit()))__		bdd.setDependencyCheck(this.getDependencyCheck(DEFAULT_VALUE))__		bdd.setAutowireMode(this.getAutowireMode(DEFAULT_VALUE))__		bdd.setInitMethodName(this.defaults.getInitMethod())__		bdd.setDestroyMethodName(this.defaults.getDestroyMethod())__		return bdd__	};return,the,default,settings,for,bean,definitions,as,indicated,within,the,attributes,of,the,top,level,code,lt,beans,gt,element;public,bean,definition,defaults,get,bean,definition,defaults,bean,definition,defaults,bdd,new,bean,definition,defaults,bdd,set,lazy,init,true,equals,ignore,case,this,defaults,get,lazy,init,bdd,set,dependency,check,this,get,dependency,check,bdd,set,autowire,mode,this,get,autowire,mode,bdd,set,init,method,name,this,defaults,get,init,method,bdd,set,destroy,method,name,this,defaults,get,destroy,method,return,bdd
BeanDefinitionParserDelegate -> public BeanDefinitionDefaults getBeanDefinitionDefaults();1385412762;Return the default settings for bean definitions as indicated within_the attributes of the top-level {@code &lt_beans/&gt_} element.;public BeanDefinitionDefaults getBeanDefinitionDefaults() {_		BeanDefinitionDefaults bdd = new BeanDefinitionDefaults()__		bdd.setLazyInit("TRUE".equalsIgnoreCase(this.defaults.getLazyInit()))__		bdd.setDependencyCheck(this.getDependencyCheck(DEFAULT_VALUE))__		bdd.setAutowireMode(this.getAutowireMode(DEFAULT_VALUE))__		bdd.setInitMethodName(this.defaults.getInitMethod())__		bdd.setDestroyMethodName(this.defaults.getDestroyMethod())__		return bdd__	};return,the,default,settings,for,bean,definitions,as,indicated,within,the,attributes,of,the,top,level,code,lt,beans,gt,element;public,bean,definition,defaults,get,bean,definition,defaults,bean,definition,defaults,bdd,new,bean,definition,defaults,bdd,set,lazy,init,true,equals,ignore,case,this,defaults,get,lazy,init,bdd,set,dependency,check,this,get,dependency,check,bdd,set,autowire,mode,this,get,autowire,mode,bdd,set,init,method,name,this,defaults,get,init,method,bdd,set,destroy,method,name,this,defaults,get,destroy,method,return,bdd
BeanDefinitionParserDelegate -> public BeanDefinitionDefaults getBeanDefinitionDefaults();1410953197;Return the default settings for bean definitions as indicated within_the attributes of the top-level {@code &lt_beans/&gt_} element.;public BeanDefinitionDefaults getBeanDefinitionDefaults() {_		BeanDefinitionDefaults bdd = new BeanDefinitionDefaults()__		bdd.setLazyInit("TRUE".equalsIgnoreCase(this.defaults.getLazyInit()))__		bdd.setDependencyCheck(this.getDependencyCheck(DEFAULT_VALUE))__		bdd.setAutowireMode(this.getAutowireMode(DEFAULT_VALUE))__		bdd.setInitMethodName(this.defaults.getInitMethod())__		bdd.setDestroyMethodName(this.defaults.getDestroyMethod())__		return bdd__	};return,the,default,settings,for,bean,definitions,as,indicated,within,the,attributes,of,the,top,level,code,lt,beans,gt,element;public,bean,definition,defaults,get,bean,definition,defaults,bean,definition,defaults,bdd,new,bean,definition,defaults,bdd,set,lazy,init,true,equals,ignore,case,this,defaults,get,lazy,init,bdd,set,dependency,check,this,get,dependency,check,bdd,set,autowire,mode,this,get,autowire,mode,bdd,set,init,method,name,this,defaults,get,init,method,bdd,set,destroy,method,name,this,defaults,get,destroy,method,return,bdd
BeanDefinitionParserDelegate -> public BeanDefinitionDefaults getBeanDefinitionDefaults();1411599760;Return the default settings for bean definitions as indicated within_the attributes of the top-level {@code &lt_beans/&gt_} element.;public BeanDefinitionDefaults getBeanDefinitionDefaults() {_		BeanDefinitionDefaults bdd = new BeanDefinitionDefaults()__		bdd.setLazyInit("TRUE".equalsIgnoreCase(this.defaults.getLazyInit()))__		bdd.setDependencyCheck(this.getDependencyCheck(DEFAULT_VALUE))__		bdd.setAutowireMode(this.getAutowireMode(DEFAULT_VALUE))__		bdd.setInitMethodName(this.defaults.getInitMethod())__		bdd.setDestroyMethodName(this.defaults.getDestroyMethod())__		return bdd__	};return,the,default,settings,for,bean,definitions,as,indicated,within,the,attributes,of,the,top,level,code,lt,beans,gt,element;public,bean,definition,defaults,get,bean,definition,defaults,bean,definition,defaults,bdd,new,bean,definition,defaults,bdd,set,lazy,init,true,equals,ignore,case,this,defaults,get,lazy,init,bdd,set,dependency,check,this,get,dependency,check,bdd,set,autowire,mode,this,get,autowire,mode,bdd,set,init,method,name,this,defaults,get,init,method,bdd,set,destroy,method,name,this,defaults,get,destroy,method,return,bdd
BeanDefinitionParserDelegate -> public BeanDefinitionDefaults getBeanDefinitionDefaults();1419966315;Return the default settings for bean definitions as indicated within_the attributes of the top-level {@code &lt_beans/&gt_} element.;public BeanDefinitionDefaults getBeanDefinitionDefaults() {_		BeanDefinitionDefaults bdd = new BeanDefinitionDefaults()__		bdd.setLazyInit("TRUE".equalsIgnoreCase(this.defaults.getLazyInit()))__		bdd.setDependencyCheck(this.getDependencyCheck(DEFAULT_VALUE))__		bdd.setAutowireMode(this.getAutowireMode(DEFAULT_VALUE))__		bdd.setInitMethodName(this.defaults.getInitMethod())__		bdd.setDestroyMethodName(this.defaults.getDestroyMethod())__		return bdd__	};return,the,default,settings,for,bean,definitions,as,indicated,within,the,attributes,of,the,top,level,code,lt,beans,gt,element;public,bean,definition,defaults,get,bean,definition,defaults,bean,definition,defaults,bdd,new,bean,definition,defaults,bdd,set,lazy,init,true,equals,ignore,case,this,defaults,get,lazy,init,bdd,set,dependency,check,this,get,dependency,check,bdd,set,autowire,mode,this,get,autowire,mode,bdd,set,init,method,name,this,defaults,get,init,method,bdd,set,destroy,method,name,this,defaults,get,destroy,method,return,bdd
BeanDefinitionParserDelegate -> public BeanDefinitionDefaults getBeanDefinitionDefaults();1431958785;Return the default settings for bean definitions as indicated within_the attributes of the top-level {@code &lt_beans/&gt_} element.;public BeanDefinitionDefaults getBeanDefinitionDefaults() {_		BeanDefinitionDefaults bdd = new BeanDefinitionDefaults()__		bdd.setLazyInit("TRUE".equalsIgnoreCase(this.defaults.getLazyInit()))__		bdd.setDependencyCheck(this.getDependencyCheck(DEFAULT_VALUE))__		bdd.setAutowireMode(this.getAutowireMode(DEFAULT_VALUE))__		bdd.setInitMethodName(this.defaults.getInitMethod())__		bdd.setDestroyMethodName(this.defaults.getDestroyMethod())__		return bdd__	};return,the,default,settings,for,bean,definitions,as,indicated,within,the,attributes,of,the,top,level,code,lt,beans,gt,element;public,bean,definition,defaults,get,bean,definition,defaults,bean,definition,defaults,bdd,new,bean,definition,defaults,bdd,set,lazy,init,true,equals,ignore,case,this,defaults,get,lazy,init,bdd,set,dependency,check,this,get,dependency,check,bdd,set,autowire,mode,this,get,autowire,mode,bdd,set,init,method,name,this,defaults,get,init,method,bdd,set,destroy,method,name,this,defaults,get,destroy,method,return,bdd
BeanDefinitionParserDelegate -> public BeanDefinitionDefaults getBeanDefinitionDefaults();1432135182;Return the default settings for bean definitions as indicated within_the attributes of the top-level {@code &lt_beans/&gt_} element.;public BeanDefinitionDefaults getBeanDefinitionDefaults() {_		BeanDefinitionDefaults bdd = new BeanDefinitionDefaults()__		bdd.setLazyInit("TRUE".equalsIgnoreCase(this.defaults.getLazyInit()))__		bdd.setDependencyCheck(this.getDependencyCheck(DEFAULT_VALUE))__		bdd.setAutowireMode(this.getAutowireMode(DEFAULT_VALUE))__		bdd.setInitMethodName(this.defaults.getInitMethod())__		bdd.setDestroyMethodName(this.defaults.getDestroyMethod())__		return bdd__	};return,the,default,settings,for,bean,definitions,as,indicated,within,the,attributes,of,the,top,level,code,lt,beans,gt,element;public,bean,definition,defaults,get,bean,definition,defaults,bean,definition,defaults,bdd,new,bean,definition,defaults,bdd,set,lazy,init,true,equals,ignore,case,this,defaults,get,lazy,init,bdd,set,dependency,check,this,get,dependency,check,bdd,set,autowire,mode,this,get,autowire,mode,bdd,set,init,method,name,this,defaults,get,init,method,bdd,set,destroy,method,name,this,defaults,get,destroy,method,return,bdd
BeanDefinitionParserDelegate -> public BeanDefinitionDefaults getBeanDefinitionDefaults();1447323728;Return the default settings for bean definitions as indicated within_the attributes of the top-level {@code <beans/>} element.;public BeanDefinitionDefaults getBeanDefinitionDefaults() {_		BeanDefinitionDefaults bdd = new BeanDefinitionDefaults()__		bdd.setLazyInit("TRUE".equalsIgnoreCase(this.defaults.getLazyInit()))__		bdd.setDependencyCheck(this.getDependencyCheck(DEFAULT_VALUE))__		bdd.setAutowireMode(this.getAutowireMode(DEFAULT_VALUE))__		bdd.setInitMethodName(this.defaults.getInitMethod())__		bdd.setDestroyMethodName(this.defaults.getDestroyMethod())__		return bdd__	};return,the,default,settings,for,bean,definitions,as,indicated,within,the,attributes,of,the,top,level,code,beans,element;public,bean,definition,defaults,get,bean,definition,defaults,bean,definition,defaults,bdd,new,bean,definition,defaults,bdd,set,lazy,init,true,equals,ignore,case,this,defaults,get,lazy,init,bdd,set,dependency,check,this,get,dependency,check,bdd,set,autowire,mode,this,get,autowire,mode,bdd,set,init,method,name,this,defaults,get,init,method,bdd,set,destroy,method,name,this,defaults,get,destroy,method,return,bdd
BeanDefinitionParserDelegate -> public BeanDefinitionDefaults getBeanDefinitionDefaults();1467726769;Return the default settings for bean definitions as indicated within_the attributes of the top-level {@code <beans/>} element.;public BeanDefinitionDefaults getBeanDefinitionDefaults() {_		BeanDefinitionDefaults bdd = new BeanDefinitionDefaults()__		bdd.setLazyInit("TRUE".equalsIgnoreCase(this.defaults.getLazyInit()))__		bdd.setDependencyCheck(this.getDependencyCheck(DEFAULT_VALUE))__		bdd.setAutowireMode(this.getAutowireMode(DEFAULT_VALUE))__		bdd.setInitMethodName(this.defaults.getInitMethod())__		bdd.setDestroyMethodName(this.defaults.getDestroyMethod())__		return bdd__	};return,the,default,settings,for,bean,definitions,as,indicated,within,the,attributes,of,the,top,level,code,beans,element;public,bean,definition,defaults,get,bean,definition,defaults,bean,definition,defaults,bdd,new,bean,definition,defaults,bdd,set,lazy,init,true,equals,ignore,case,this,defaults,get,lazy,init,bdd,set,dependency,check,this,get,dependency,check,bdd,set,autowire,mode,this,get,autowire,mode,bdd,set,init,method,name,this,defaults,get,init,method,bdd,set,destroy,method,name,this,defaults,get,destroy,method,return,bdd
BeanDefinitionParserDelegate -> public BeanDefinitionDefaults getBeanDefinitionDefaults();1467730834;Return the default settings for bean definitions as indicated within_the attributes of the top-level {@code <beans/>} element.;public BeanDefinitionDefaults getBeanDefinitionDefaults() {_		BeanDefinitionDefaults bdd = new BeanDefinitionDefaults()__		bdd.setLazyInit("TRUE".equalsIgnoreCase(this.defaults.getLazyInit()))__		bdd.setDependencyCheck(this.getDependencyCheck(DEFAULT_VALUE))__		bdd.setAutowireMode(this.getAutowireMode(DEFAULT_VALUE))__		bdd.setInitMethodName(this.defaults.getInitMethod())__		bdd.setDestroyMethodName(this.defaults.getDestroyMethod())__		return bdd__	};return,the,default,settings,for,bean,definitions,as,indicated,within,the,attributes,of,the,top,level,code,beans,element;public,bean,definition,defaults,get,bean,definition,defaults,bean,definition,defaults,bdd,new,bean,definition,defaults,bdd,set,lazy,init,true,equals,ignore,case,this,defaults,get,lazy,init,bdd,set,dependency,check,this,get,dependency,check,bdd,set,autowire,mode,this,get,autowire,mode,bdd,set,init,method,name,this,defaults,get,init,method,bdd,set,destroy,method,name,this,defaults,get,destroy,method,return,bdd
BeanDefinitionParserDelegate -> public BeanDefinitionDefaults getBeanDefinitionDefaults();1467744603;Return the default settings for bean definitions as indicated within_the attributes of the top-level {@code <beans/>} element.;public BeanDefinitionDefaults getBeanDefinitionDefaults() {_		BeanDefinitionDefaults bdd = new BeanDefinitionDefaults()__		bdd.setLazyInit("TRUE".equalsIgnoreCase(this.defaults.getLazyInit()))__		bdd.setAutowireMode(this.getAutowireMode(DEFAULT_VALUE))__		bdd.setInitMethodName(this.defaults.getInitMethod())__		bdd.setDestroyMethodName(this.defaults.getDestroyMethod())__		return bdd__	};return,the,default,settings,for,bean,definitions,as,indicated,within,the,attributes,of,the,top,level,code,beans,element;public,bean,definition,defaults,get,bean,definition,defaults,bean,definition,defaults,bdd,new,bean,definition,defaults,bdd,set,lazy,init,true,equals,ignore,case,this,defaults,get,lazy,init,bdd,set,autowire,mode,this,get,autowire,mode,bdd,set,init,method,name,this,defaults,get,init,method,bdd,set,destroy,method,name,this,defaults,get,destroy,method,return,bdd
BeanDefinitionParserDelegate -> public BeanDefinitionDefaults getBeanDefinitionDefaults();1487245676;Return the default settings for bean definitions as indicated within_the attributes of the top-level {@code <beans/>} element.;public BeanDefinitionDefaults getBeanDefinitionDefaults() {_		BeanDefinitionDefaults bdd = new BeanDefinitionDefaults()__		bdd.setLazyInit("TRUE".equalsIgnoreCase(this.defaults.getLazyInit()))__		bdd.setAutowireMode(this.getAutowireMode(DEFAULT_VALUE))__		bdd.setInitMethodName(this.defaults.getInitMethod())__		bdd.setDestroyMethodName(this.defaults.getDestroyMethod())__		return bdd__	};return,the,default,settings,for,bean,definitions,as,indicated,within,the,attributes,of,the,top,level,code,beans,element;public,bean,definition,defaults,get,bean,definition,defaults,bean,definition,defaults,bdd,new,bean,definition,defaults,bdd,set,lazy,init,true,equals,ignore,case,this,defaults,get,lazy,init,bdd,set,autowire,mode,this,get,autowire,mode,bdd,set,init,method,name,this,defaults,get,init,method,bdd,set,destroy,method,name,this,defaults,get,destroy,method,return,bdd
BeanDefinitionParserDelegate -> public BeanDefinitionDefaults getBeanDefinitionDefaults();1487255851;Return the default settings for bean definitions as indicated within_the attributes of the top-level {@code <beans/>} element.;public BeanDefinitionDefaults getBeanDefinitionDefaults() {_		BeanDefinitionDefaults bdd = new BeanDefinitionDefaults()__		bdd.setLazyInit("TRUE".equalsIgnoreCase(this.defaults.getLazyInit()))__		bdd.setAutowireMode(this.getAutowireMode(DEFAULT_VALUE))__		bdd.setInitMethodName(this.defaults.getInitMethod())__		bdd.setDestroyMethodName(this.defaults.getDestroyMethod())__		return bdd__	};return,the,default,settings,for,bean,definitions,as,indicated,within,the,attributes,of,the,top,level,code,beans,element;public,bean,definition,defaults,get,bean,definition,defaults,bean,definition,defaults,bdd,new,bean,definition,defaults,bdd,set,lazy,init,true,equals,ignore,case,this,defaults,get,lazy,init,bdd,set,autowire,mode,this,get,autowire,mode,bdd,set,init,method,name,this,defaults,get,init,method,bdd,set,destroy,method,name,this,defaults,get,destroy,method,return,bdd
BeanDefinitionParserDelegate -> public BeanDefinitionDefaults getBeanDefinitionDefaults();1494586217;Return the default settings for bean definitions as indicated within_the attributes of the top-level {@code <beans/>} element.;public BeanDefinitionDefaults getBeanDefinitionDefaults() {_		BeanDefinitionDefaults bdd = new BeanDefinitionDefaults()__		bdd.setLazyInit("TRUE".equalsIgnoreCase(this.defaults.getLazyInit()))__		bdd.setAutowireMode(getAutowireMode(DEFAULT_VALUE))__		bdd.setInitMethodName(this.defaults.getInitMethod())__		bdd.setDestroyMethodName(this.defaults.getDestroyMethod())__		return bdd__	};return,the,default,settings,for,bean,definitions,as,indicated,within,the,attributes,of,the,top,level,code,beans,element;public,bean,definition,defaults,get,bean,definition,defaults,bean,definition,defaults,bdd,new,bean,definition,defaults,bdd,set,lazy,init,true,equals,ignore,case,this,defaults,get,lazy,init,bdd,set,autowire,mode,get,autowire,mode,bdd,set,init,method,name,this,defaults,get,init,method,bdd,set,destroy,method,name,this,defaults,get,destroy,method,return,bdd
BeanDefinitionParserDelegate -> public BeanDefinitionDefaults getBeanDefinitionDefaults();1495868221;Return the default settings for bean definitions as indicated within_the attributes of the top-level {@code <beans/>} element.;public BeanDefinitionDefaults getBeanDefinitionDefaults() {_		BeanDefinitionDefaults bdd = new BeanDefinitionDefaults()__		bdd.setLazyInit("TRUE".equalsIgnoreCase(this.defaults.getLazyInit()))__		bdd.setAutowireMode(getAutowireMode(DEFAULT_VALUE))__		bdd.setInitMethodName(this.defaults.getInitMethod())__		bdd.setDestroyMethodName(this.defaults.getDestroyMethod())__		return bdd__	};return,the,default,settings,for,bean,definitions,as,indicated,within,the,attributes,of,the,top,level,code,beans,element;public,bean,definition,defaults,get,bean,definition,defaults,bean,definition,defaults,bdd,new,bean,definition,defaults,bdd,set,lazy,init,true,equals,ignore,case,this,defaults,get,lazy,init,bdd,set,autowire,mode,get,autowire,mode,bdd,set,init,method,name,this,defaults,get,init,method,bdd,set,destroy,method,name,this,defaults,get,destroy,method,return,bdd
BeanDefinitionParserDelegate -> public BeanDefinitionDefaults getBeanDefinitionDefaults();1496259743;Return the default settings for bean definitions as indicated within_the attributes of the top-level {@code <beans/>} element.;public BeanDefinitionDefaults getBeanDefinitionDefaults() {_		BeanDefinitionDefaults bdd = new BeanDefinitionDefaults()__		bdd.setLazyInit("TRUE".equalsIgnoreCase(this.defaults.getLazyInit()))__		bdd.setAutowireMode(getAutowireMode(DEFAULT_VALUE))__		bdd.setInitMethodName(this.defaults.getInitMethod())__		bdd.setDestroyMethodName(this.defaults.getDestroyMethod())__		return bdd__	};return,the,default,settings,for,bean,definitions,as,indicated,within,the,attributes,of,the,top,level,code,beans,element;public,bean,definition,defaults,get,bean,definition,defaults,bean,definition,defaults,bdd,new,bean,definition,defaults,bdd,set,lazy,init,true,equals,ignore,case,this,defaults,get,lazy,init,bdd,set,autowire,mode,get,autowire,mode,bdd,set,init,method,name,this,defaults,get,init,method,bdd,set,destroy,method,name,this,defaults,get,destroy,method,return,bdd
BeanDefinitionParserDelegate -> public BeanDefinitionDefaults getBeanDefinitionDefaults();1496837955;Return the default settings for bean definitions as indicated within_the attributes of the top-level {@code <beans/>} element.;public BeanDefinitionDefaults getBeanDefinitionDefaults() {_		BeanDefinitionDefaults bdd = new BeanDefinitionDefaults()__		bdd.setLazyInit("TRUE".equalsIgnoreCase(this.defaults.getLazyInit()))__		bdd.setAutowireMode(getAutowireMode(DEFAULT_VALUE))__		bdd.setInitMethodName(this.defaults.getInitMethod())__		bdd.setDestroyMethodName(this.defaults.getDestroyMethod())__		return bdd__	};return,the,default,settings,for,bean,definitions,as,indicated,within,the,attributes,of,the,top,level,code,beans,element;public,bean,definition,defaults,get,bean,definition,defaults,bean,definition,defaults,bdd,new,bean,definition,defaults,bdd,set,lazy,init,true,equals,ignore,case,this,defaults,get,lazy,init,bdd,set,autowire,mode,get,autowire,mode,bdd,set,init,method,name,this,defaults,get,init,method,bdd,set,destroy,method,name,this,defaults,get,destroy,method,return,bdd
BeanDefinitionParserDelegate -> public BeanDefinitionDefaults getBeanDefinitionDefaults();1503008029;Return the default settings for bean definitions as indicated within_the attributes of the top-level {@code <beans/>} element.;public BeanDefinitionDefaults getBeanDefinitionDefaults() {_		BeanDefinitionDefaults bdd = new BeanDefinitionDefaults()__		bdd.setLazyInit("TRUE".equalsIgnoreCase(this.defaults.getLazyInit()))__		bdd.setAutowireMode(getAutowireMode(DEFAULT_VALUE))__		bdd.setInitMethodName(this.defaults.getInitMethod())__		bdd.setDestroyMethodName(this.defaults.getDestroyMethod())__		return bdd__	};return,the,default,settings,for,bean,definitions,as,indicated,within,the,attributes,of,the,top,level,code,beans,element;public,bean,definition,defaults,get,bean,definition,defaults,bean,definition,defaults,bdd,new,bean,definition,defaults,bdd,set,lazy,init,true,equals,ignore,case,this,defaults,get,lazy,init,bdd,set,autowire,mode,get,autowire,mode,bdd,set,init,method,name,this,defaults,get,init,method,bdd,set,destroy,method,name,this,defaults,get,destroy,method,return,bdd
BeanDefinitionParserDelegate -> public BeanDefinitionDefaults getBeanDefinitionDefaults();1519513303;Return the default settings for bean definitions as indicated within_the attributes of the top-level {@code <beans/>} element.;public BeanDefinitionDefaults getBeanDefinitionDefaults() {_		BeanDefinitionDefaults bdd = new BeanDefinitionDefaults()__		bdd.setLazyInit("TRUE".equalsIgnoreCase(this.defaults.getLazyInit()))__		bdd.setAutowireMode(getAutowireMode(DEFAULT_VALUE))__		bdd.setInitMethodName(this.defaults.getInitMethod())__		bdd.setDestroyMethodName(this.defaults.getDestroyMethod())__		return bdd__	};return,the,default,settings,for,bean,definitions,as,indicated,within,the,attributes,of,the,top,level,code,beans,element;public,bean,definition,defaults,get,bean,definition,defaults,bean,definition,defaults,bdd,new,bean,definition,defaults,bdd,set,lazy,init,true,equals,ignore,case,this,defaults,get,lazy,init,bdd,set,autowire,mode,get,autowire,mode,bdd,set,init,method,name,this,defaults,get,init,method,bdd,set,destroy,method,name,this,defaults,get,destroy,method,return,bdd
BeanDefinitionParserDelegate -> public BeanDefinitionDefaults getBeanDefinitionDefaults();1530174524;Return the default settings for bean definitions as indicated within_the attributes of the top-level {@code <beans/>} element.;public BeanDefinitionDefaults getBeanDefinitionDefaults() {_		BeanDefinitionDefaults bdd = new BeanDefinitionDefaults()__		bdd.setLazyInit("TRUE".equalsIgnoreCase(this.defaults.getLazyInit()))__		bdd.setAutowireMode(getAutowireMode(DEFAULT_VALUE))__		bdd.setInitMethodName(this.defaults.getInitMethod())__		bdd.setDestroyMethodName(this.defaults.getDestroyMethod())__		return bdd__	};return,the,default,settings,for,bean,definitions,as,indicated,within,the,attributes,of,the,top,level,code,beans,element;public,bean,definition,defaults,get,bean,definition,defaults,bean,definition,defaults,bdd,new,bean,definition,defaults,bdd,set,lazy,init,true,equals,ignore,case,this,defaults,get,lazy,init,bdd,set,autowire,mode,get,autowire,mode,bdd,set,init,method,name,this,defaults,get,init,method,bdd,set,destroy,method,name,this,defaults,get,destroy,method,return,bdd
BeanDefinitionParserDelegate -> public BeanDefinitionDefaults getBeanDefinitionDefaults();1530190293;Return the default settings for bean definitions as indicated within_the attributes of the top-level {@code <beans/>} element.;public BeanDefinitionDefaults getBeanDefinitionDefaults() {_		BeanDefinitionDefaults bdd = new BeanDefinitionDefaults()__		bdd.setLazyInit("TRUE".equalsIgnoreCase(this.defaults.getLazyInit()))__		bdd.setAutowireMode(getAutowireMode(DEFAULT_VALUE))__		bdd.setInitMethodName(this.defaults.getInitMethod())__		bdd.setDestroyMethodName(this.defaults.getDestroyMethod())__		return bdd__	};return,the,default,settings,for,bean,definitions,as,indicated,within,the,attributes,of,the,top,level,code,beans,element;public,bean,definition,defaults,get,bean,definition,defaults,bean,definition,defaults,bdd,new,bean,definition,defaults,bdd,set,lazy,init,true,equals,ignore,case,this,defaults,get,lazy,init,bdd,set,autowire,mode,get,autowire,mode,bdd,set,init,method,name,this,defaults,get,init,method,bdd,set,destroy,method,name,this,defaults,get,destroy,method,return,bdd
BeanDefinitionParserDelegate -> public BeanDefinitionDefaults getBeanDefinitionDefaults();1532706365;Return the default settings for bean definitions as indicated within_the attributes of the top-level {@code <beans/>} element.;public BeanDefinitionDefaults getBeanDefinitionDefaults() {_		BeanDefinitionDefaults bdd = new BeanDefinitionDefaults()__		bdd.setLazyInit("TRUE".equalsIgnoreCase(this.defaults.getLazyInit()))__		bdd.setAutowireMode(getAutowireMode(DEFAULT_VALUE))__		bdd.setInitMethodName(this.defaults.getInitMethod())__		bdd.setDestroyMethodName(this.defaults.getDestroyMethod())__		return bdd__	};return,the,default,settings,for,bean,definitions,as,indicated,within,the,attributes,of,the,top,level,code,beans,element;public,bean,definition,defaults,get,bean,definition,defaults,bean,definition,defaults,bdd,new,bean,definition,defaults,bdd,set,lazy,init,true,equals,ignore,case,this,defaults,get,lazy,init,bdd,set,autowire,mode,get,autowire,mode,bdd,set,init,method,name,this,defaults,get,init,method,bdd,set,destroy,method,name,this,defaults,get,destroy,method,return,bdd
BeanDefinitionParserDelegate -> public BeanDefinitionDefaults getBeanDefinitionDefaults();1546958161;Return the default settings for bean definitions as indicated within_the attributes of the top-level {@code <beans/>} element.;public BeanDefinitionDefaults getBeanDefinitionDefaults() {_		BeanDefinitionDefaults bdd = new BeanDefinitionDefaults()__		bdd.setLazyInit("TRUE".equalsIgnoreCase(this.defaults.getLazyInit()))__		bdd.setAutowireMode(getAutowireMode(DEFAULT_VALUE))__		bdd.setInitMethodName(this.defaults.getInitMethod())__		bdd.setDestroyMethodName(this.defaults.getDestroyMethod())__		return bdd__	};return,the,default,settings,for,bean,definitions,as,indicated,within,the,attributes,of,the,top,level,code,beans,element;public,bean,definition,defaults,get,bean,definition,defaults,bean,definition,defaults,bdd,new,bean,definition,defaults,bdd,set,lazy,init,true,equals,ignore,case,this,defaults,get,lazy,init,bdd,set,autowire,mode,get,autowire,mode,bdd,set,init,method,name,this,defaults,get,init,method,bdd,set,destroy,method,name,this,defaults,get,destroy,method,return,bdd
BeanDefinitionParserDelegate -> public final XmlReaderContext getReaderContext();1328020251;Get the {@link XmlReaderContext} associated with this helper instance.;public final XmlReaderContext getReaderContext() {_		return this.readerContext__	};get,the,link,xml,reader,context,associated,with,this,helper,instance;public,final,xml,reader,context,get,reader,context,return,this,reader,context
BeanDefinitionParserDelegate -> public final XmlReaderContext getReaderContext();1335774711;Get the {@link XmlReaderContext} associated with this helper instance.;public final XmlReaderContext getReaderContext() {_		return this.readerContext__	};get,the,link,xml,reader,context,associated,with,this,helper,instance;public,final,xml,reader,context,get,reader,context,return,this,reader,context
BeanDefinitionParserDelegate -> public final XmlReaderContext getReaderContext();1337341719;Get the {@link XmlReaderContext} associated with this helper instance.;public final XmlReaderContext getReaderContext() {_		return this.readerContext__	};get,the,link,xml,reader,context,associated,with,this,helper,instance;public,final,xml,reader,context,get,reader,context,return,this,reader,context
BeanDefinitionParserDelegate -> public final XmlReaderContext getReaderContext();1351392612;Get the {@link XmlReaderContext} associated with this helper instance.;public final XmlReaderContext getReaderContext() {_		return this.readerContext__	};get,the,link,xml,reader,context,associated,with,this,helper,instance;public,final,xml,reader,context,get,reader,context,return,this,reader,context
BeanDefinitionParserDelegate -> public final XmlReaderContext getReaderContext();1351696936;Get the {@link XmlReaderContext} associated with this helper instance.;public final XmlReaderContext getReaderContext() {_		return this.readerContext__	};get,the,link,xml,reader,context,associated,with,this,helper,instance;public,final,xml,reader,context,get,reader,context,return,this,reader,context
BeanDefinitionParserDelegate -> public final XmlReaderContext getReaderContext();1356735495;Get the {@link XmlReaderContext} associated with this helper instance.;public final XmlReaderContext getReaderContext() {_		return this.readerContext__	};get,the,link,xml,reader,context,associated,with,this,helper,instance;public,final,xml,reader,context,get,reader,context,return,this,reader,context
BeanDefinitionParserDelegate -> public final XmlReaderContext getReaderContext();1357119417;Get the {@link XmlReaderContext} associated with this helper instance.;public final XmlReaderContext getReaderContext() {_		return this.readerContext__	};get,the,link,xml,reader,context,associated,with,this,helper,instance;public,final,xml,reader,context,get,reader,context,return,this,reader,context
BeanDefinitionParserDelegate -> public final XmlReaderContext getReaderContext();1367943112;Get the {@link XmlReaderContext} associated with this helper instance.;public final XmlReaderContext getReaderContext() {_		return this.readerContext__	};get,the,link,xml,reader,context,associated,with,this,helper,instance;public,final,xml,reader,context,get,reader,context,return,this,reader,context
BeanDefinitionParserDelegate -> public final XmlReaderContext getReaderContext();1382030648;Get the {@link XmlReaderContext} associated with this helper instance.;public final XmlReaderContext getReaderContext() {_		return this.readerContext__	};get,the,link,xml,reader,context,associated,with,this,helper,instance;public,final,xml,reader,context,get,reader,context,return,this,reader,context
BeanDefinitionParserDelegate -> public final XmlReaderContext getReaderContext();1385412762;Get the {@link XmlReaderContext} associated with this helper instance.;public final XmlReaderContext getReaderContext() {_		return this.readerContext__	};get,the,link,xml,reader,context,associated,with,this,helper,instance;public,final,xml,reader,context,get,reader,context,return,this,reader,context
BeanDefinitionParserDelegate -> public final XmlReaderContext getReaderContext();1410953197;Get the {@link XmlReaderContext} associated with this helper instance.;public final XmlReaderContext getReaderContext() {_		return this.readerContext__	};get,the,link,xml,reader,context,associated,with,this,helper,instance;public,final,xml,reader,context,get,reader,context,return,this,reader,context
BeanDefinitionParserDelegate -> public final XmlReaderContext getReaderContext();1411599760;Get the {@link XmlReaderContext} associated with this helper instance.;public final XmlReaderContext getReaderContext() {_		return this.readerContext__	};get,the,link,xml,reader,context,associated,with,this,helper,instance;public,final,xml,reader,context,get,reader,context,return,this,reader,context
BeanDefinitionParserDelegate -> public final XmlReaderContext getReaderContext();1419966315;Get the {@link XmlReaderContext} associated with this helper instance.;public final XmlReaderContext getReaderContext() {_		return this.readerContext__	};get,the,link,xml,reader,context,associated,with,this,helper,instance;public,final,xml,reader,context,get,reader,context,return,this,reader,context
BeanDefinitionParserDelegate -> public final XmlReaderContext getReaderContext();1431958785;Get the {@link XmlReaderContext} associated with this helper instance.;public final XmlReaderContext getReaderContext() {_		return this.readerContext__	};get,the,link,xml,reader,context,associated,with,this,helper,instance;public,final,xml,reader,context,get,reader,context,return,this,reader,context
BeanDefinitionParserDelegate -> public final XmlReaderContext getReaderContext();1432135182;Get the {@link XmlReaderContext} associated with this helper instance.;public final XmlReaderContext getReaderContext() {_		return this.readerContext__	};get,the,link,xml,reader,context,associated,with,this,helper,instance;public,final,xml,reader,context,get,reader,context,return,this,reader,context
BeanDefinitionParserDelegate -> public final XmlReaderContext getReaderContext();1447323728;Get the {@link XmlReaderContext} associated with this helper instance.;public final XmlReaderContext getReaderContext() {_		return this.readerContext__	};get,the,link,xml,reader,context,associated,with,this,helper,instance;public,final,xml,reader,context,get,reader,context,return,this,reader,context
BeanDefinitionParserDelegate -> public final XmlReaderContext getReaderContext();1467726769;Get the {@link XmlReaderContext} associated with this helper instance.;public final XmlReaderContext getReaderContext() {_		return this.readerContext__	};get,the,link,xml,reader,context,associated,with,this,helper,instance;public,final,xml,reader,context,get,reader,context,return,this,reader,context
BeanDefinitionParserDelegate -> public final XmlReaderContext getReaderContext();1467730834;Get the {@link XmlReaderContext} associated with this helper instance.;public final XmlReaderContext getReaderContext() {_		return this.readerContext__	};get,the,link,xml,reader,context,associated,with,this,helper,instance;public,final,xml,reader,context,get,reader,context,return,this,reader,context
BeanDefinitionParserDelegate -> public final XmlReaderContext getReaderContext();1467744603;Get the {@link XmlReaderContext} associated with this helper instance.;public final XmlReaderContext getReaderContext() {_		return this.readerContext__	};get,the,link,xml,reader,context,associated,with,this,helper,instance;public,final,xml,reader,context,get,reader,context,return,this,reader,context
BeanDefinitionParserDelegate -> public final XmlReaderContext getReaderContext();1487245676;Get the {@link XmlReaderContext} associated with this helper instance.;public final XmlReaderContext getReaderContext() {_		return this.readerContext__	};get,the,link,xml,reader,context,associated,with,this,helper,instance;public,final,xml,reader,context,get,reader,context,return,this,reader,context
BeanDefinitionParserDelegate -> public final XmlReaderContext getReaderContext();1487255851;Get the {@link XmlReaderContext} associated with this helper instance.;public final XmlReaderContext getReaderContext() {_		return this.readerContext__	};get,the,link,xml,reader,context,associated,with,this,helper,instance;public,final,xml,reader,context,get,reader,context,return,this,reader,context
BeanDefinitionParserDelegate -> public final XmlReaderContext getReaderContext();1494586217;Get the {@link XmlReaderContext} associated with this helper instance.;public final XmlReaderContext getReaderContext() {_		return this.readerContext__	};get,the,link,xml,reader,context,associated,with,this,helper,instance;public,final,xml,reader,context,get,reader,context,return,this,reader,context
BeanDefinitionParserDelegate -> public final XmlReaderContext getReaderContext();1495868221;Get the {@link XmlReaderContext} associated with this helper instance.;public final XmlReaderContext getReaderContext() {_		return this.readerContext__	};get,the,link,xml,reader,context,associated,with,this,helper,instance;public,final,xml,reader,context,get,reader,context,return,this,reader,context
BeanDefinitionParserDelegate -> public final XmlReaderContext getReaderContext();1496259743;Get the {@link XmlReaderContext} associated with this helper instance.;public final XmlReaderContext getReaderContext() {_		return this.readerContext__	};get,the,link,xml,reader,context,associated,with,this,helper,instance;public,final,xml,reader,context,get,reader,context,return,this,reader,context
BeanDefinitionParserDelegate -> public final XmlReaderContext getReaderContext();1496837955;Get the {@link XmlReaderContext} associated with this helper instance.;public final XmlReaderContext getReaderContext() {_		return this.readerContext__	};get,the,link,xml,reader,context,associated,with,this,helper,instance;public,final,xml,reader,context,get,reader,context,return,this,reader,context
BeanDefinitionParserDelegate -> public final XmlReaderContext getReaderContext();1503008029;Get the {@link XmlReaderContext} associated with this helper instance.;public final XmlReaderContext getReaderContext() {_		return this.readerContext__	};get,the,link,xml,reader,context,associated,with,this,helper,instance;public,final,xml,reader,context,get,reader,context,return,this,reader,context
BeanDefinitionParserDelegate -> public final XmlReaderContext getReaderContext();1519513303;Get the {@link XmlReaderContext} associated with this helper instance.;public final XmlReaderContext getReaderContext() {_		return this.readerContext__	};get,the,link,xml,reader,context,associated,with,this,helper,instance;public,final,xml,reader,context,get,reader,context,return,this,reader,context
BeanDefinitionParserDelegate -> public final XmlReaderContext getReaderContext();1530174524;Get the {@link XmlReaderContext} associated with this helper instance.;public final XmlReaderContext getReaderContext() {_		return this.readerContext__	};get,the,link,xml,reader,context,associated,with,this,helper,instance;public,final,xml,reader,context,get,reader,context,return,this,reader,context
BeanDefinitionParserDelegate -> public final XmlReaderContext getReaderContext();1530190293;Get the {@link XmlReaderContext} associated with this helper instance.;public final XmlReaderContext getReaderContext() {_		return this.readerContext__	};get,the,link,xml,reader,context,associated,with,this,helper,instance;public,final,xml,reader,context,get,reader,context,return,this,reader,context
BeanDefinitionParserDelegate -> public final XmlReaderContext getReaderContext();1532706365;Get the {@link XmlReaderContext} associated with this helper instance.;public final XmlReaderContext getReaderContext() {_		return this.readerContext__	};get,the,link,xml,reader,context,associated,with,this,helper,instance;public,final,xml,reader,context,get,reader,context,return,this,reader,context
BeanDefinitionParserDelegate -> public final XmlReaderContext getReaderContext();1546958161;Get the {@link XmlReaderContext} associated with this helper instance.;public final XmlReaderContext getReaderContext() {_		return this.readerContext__	};get,the,link,xml,reader,context,associated,with,this,helper,instance;public,final,xml,reader,context,get,reader,context,return,this,reader,context
BeanDefinitionParserDelegate -> public void parseConstructorArgElement(Element ele, BeanDefinition bd);1328020251;Parse a constructor-arg element.;public void parseConstructorArgElement(Element ele, BeanDefinition bd) {_		String indexAttr = ele.getAttribute(INDEX_ATTRIBUTE)__		String typeAttr = ele.getAttribute(TYPE_ATTRIBUTE)__		String nameAttr = ele.getAttribute(NAME_ATTRIBUTE)__		if (StringUtils.hasLength(indexAttr)) {_			try {_				int index = Integer.parseInt(indexAttr)__				if (index < 0) {_					error("'index' cannot be lower than 0", ele)__				}_				else {_					try {_						this.parseState.push(new ConstructorArgumentEntry(index))__						Object value = parsePropertyValue(ele, bd, null)__						ConstructorArgumentValues.ValueHolder valueHolder = new ConstructorArgumentValues.ValueHolder(value)__						if (StringUtils.hasLength(typeAttr)) {_							valueHolder.setType(typeAttr)__						}_						if (StringUtils.hasLength(nameAttr)) {_							valueHolder.setName(nameAttr)__						}_						valueHolder.setSource(extractSource(ele))__						if (bd.getConstructorArgumentValues().hasIndexedArgumentValue(index)) {_							error("Ambiguous constructor-arg entries for index " + index, ele)__						}_						else {_							bd.getConstructorArgumentValues().addIndexedArgumentValue(index, valueHolder)__						}_					}_					finally {_						this.parseState.pop()__					}_				}_			}_			catch (NumberFormatException ex) {_				error("Attribute 'index' of tag 'constructor-arg' must be an integer", ele)__			}_		}_		else {_			try {_				this.parseState.push(new ConstructorArgumentEntry())__				Object value = parsePropertyValue(ele, bd, null)__				ConstructorArgumentValues.ValueHolder valueHolder = new ConstructorArgumentValues.ValueHolder(value)__				if (StringUtils.hasLength(typeAttr)) {_					valueHolder.setType(typeAttr)__				}_				if (StringUtils.hasLength(nameAttr)) {_					valueHolder.setName(nameAttr)__				}_				valueHolder.setSource(extractSource(ele))__				bd.getConstructorArgumentValues().addGenericArgumentValue(valueHolder)__			}_			finally {_				this.parseState.pop()__			}_		}_	};parse,a,constructor,arg,element;public,void,parse,constructor,arg,element,element,ele,bean,definition,bd,string,index,attr,ele,get,attribute,string,type,attr,ele,get,attribute,string,name,attr,ele,get,attribute,if,string,utils,has,length,index,attr,try,int,index,integer,parse,int,index,attr,if,index,0,error,index,cannot,be,lower,than,0,ele,else,try,this,parse,state,push,new,constructor,argument,entry,index,object,value,parse,property,value,ele,bd,null,constructor,argument,values,value,holder,value,holder,new,constructor,argument,values,value,holder,value,if,string,utils,has,length,type,attr,value,holder,set,type,type,attr,if,string,utils,has,length,name,attr,value,holder,set,name,name,attr,value,holder,set,source,extract,source,ele,if,bd,get,constructor,argument,values,has,indexed,argument,value,index,error,ambiguous,constructor,arg,entries,for,index,index,ele,else,bd,get,constructor,argument,values,add,indexed,argument,value,index,value,holder,finally,this,parse,state,pop,catch,number,format,exception,ex,error,attribute,index,of,tag,constructor,arg,must,be,an,integer,ele,else,try,this,parse,state,push,new,constructor,argument,entry,object,value,parse,property,value,ele,bd,null,constructor,argument,values,value,holder,value,holder,new,constructor,argument,values,value,holder,value,if,string,utils,has,length,type,attr,value,holder,set,type,type,attr,if,string,utils,has,length,name,attr,value,holder,set,name,name,attr,value,holder,set,source,extract,source,ele,bd,get,constructor,argument,values,add,generic,argument,value,value,holder,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parseConstructorArgElement(Element ele, BeanDefinition bd);1335774711;Parse a constructor-arg element.;public void parseConstructorArgElement(Element ele, BeanDefinition bd) {_		String indexAttr = ele.getAttribute(INDEX_ATTRIBUTE)__		String typeAttr = ele.getAttribute(TYPE_ATTRIBUTE)__		String nameAttr = ele.getAttribute(NAME_ATTRIBUTE)__		if (StringUtils.hasLength(indexAttr)) {_			try {_				int index = Integer.parseInt(indexAttr)__				if (index < 0) {_					error("'index' cannot be lower than 0", ele)__				}_				else {_					try {_						this.parseState.push(new ConstructorArgumentEntry(index))__						Object value = parsePropertyValue(ele, bd, null)__						ConstructorArgumentValues.ValueHolder valueHolder = new ConstructorArgumentValues.ValueHolder(value)__						if (StringUtils.hasLength(typeAttr)) {_							valueHolder.setType(typeAttr)__						}_						if (StringUtils.hasLength(nameAttr)) {_							valueHolder.setName(nameAttr)__						}_						valueHolder.setSource(extractSource(ele))__						if (bd.getConstructorArgumentValues().hasIndexedArgumentValue(index)) {_							error("Ambiguous constructor-arg entries for index " + index, ele)__						}_						else {_							bd.getConstructorArgumentValues().addIndexedArgumentValue(index, valueHolder)__						}_					}_					finally {_						this.parseState.pop()__					}_				}_			}_			catch (NumberFormatException ex) {_				error("Attribute 'index' of tag 'constructor-arg' must be an integer", ele)__			}_		}_		else {_			try {_				this.parseState.push(new ConstructorArgumentEntry())__				Object value = parsePropertyValue(ele, bd, null)__				ConstructorArgumentValues.ValueHolder valueHolder = new ConstructorArgumentValues.ValueHolder(value)__				if (StringUtils.hasLength(typeAttr)) {_					valueHolder.setType(typeAttr)__				}_				if (StringUtils.hasLength(nameAttr)) {_					valueHolder.setName(nameAttr)__				}_				valueHolder.setSource(extractSource(ele))__				bd.getConstructorArgumentValues().addGenericArgumentValue(valueHolder)__			}_			finally {_				this.parseState.pop()__			}_		}_	};parse,a,constructor,arg,element;public,void,parse,constructor,arg,element,element,ele,bean,definition,bd,string,index,attr,ele,get,attribute,string,type,attr,ele,get,attribute,string,name,attr,ele,get,attribute,if,string,utils,has,length,index,attr,try,int,index,integer,parse,int,index,attr,if,index,0,error,index,cannot,be,lower,than,0,ele,else,try,this,parse,state,push,new,constructor,argument,entry,index,object,value,parse,property,value,ele,bd,null,constructor,argument,values,value,holder,value,holder,new,constructor,argument,values,value,holder,value,if,string,utils,has,length,type,attr,value,holder,set,type,type,attr,if,string,utils,has,length,name,attr,value,holder,set,name,name,attr,value,holder,set,source,extract,source,ele,if,bd,get,constructor,argument,values,has,indexed,argument,value,index,error,ambiguous,constructor,arg,entries,for,index,index,ele,else,bd,get,constructor,argument,values,add,indexed,argument,value,index,value,holder,finally,this,parse,state,pop,catch,number,format,exception,ex,error,attribute,index,of,tag,constructor,arg,must,be,an,integer,ele,else,try,this,parse,state,push,new,constructor,argument,entry,object,value,parse,property,value,ele,bd,null,constructor,argument,values,value,holder,value,holder,new,constructor,argument,values,value,holder,value,if,string,utils,has,length,type,attr,value,holder,set,type,type,attr,if,string,utils,has,length,name,attr,value,holder,set,name,name,attr,value,holder,set,source,extract,source,ele,bd,get,constructor,argument,values,add,generic,argument,value,value,holder,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parseConstructorArgElement(Element ele, BeanDefinition bd);1337341719;Parse a constructor-arg element.;public void parseConstructorArgElement(Element ele, BeanDefinition bd) {_		String indexAttr = ele.getAttribute(INDEX_ATTRIBUTE)__		String typeAttr = ele.getAttribute(TYPE_ATTRIBUTE)__		String nameAttr = ele.getAttribute(NAME_ATTRIBUTE)__		if (StringUtils.hasLength(indexAttr)) {_			try {_				int index = Integer.parseInt(indexAttr)__				if (index < 0) {_					error("'index' cannot be lower than 0", ele)__				}_				else {_					try {_						this.parseState.push(new ConstructorArgumentEntry(index))__						Object value = parsePropertyValue(ele, bd, null)__						ConstructorArgumentValues.ValueHolder valueHolder = new ConstructorArgumentValues.ValueHolder(value)__						if (StringUtils.hasLength(typeAttr)) {_							valueHolder.setType(typeAttr)__						}_						if (StringUtils.hasLength(nameAttr)) {_							valueHolder.setName(nameAttr)__						}_						valueHolder.setSource(extractSource(ele))__						if (bd.getConstructorArgumentValues().hasIndexedArgumentValue(index)) {_							error("Ambiguous constructor-arg entries for index " + index, ele)__						}_						else {_							bd.getConstructorArgumentValues().addIndexedArgumentValue(index, valueHolder)__						}_					}_					finally {_						this.parseState.pop()__					}_				}_			}_			catch (NumberFormatException ex) {_				error("Attribute 'index' of tag 'constructor-arg' must be an integer", ele)__			}_		}_		else {_			try {_				this.parseState.push(new ConstructorArgumentEntry())__				Object value = parsePropertyValue(ele, bd, null)__				ConstructorArgumentValues.ValueHolder valueHolder = new ConstructorArgumentValues.ValueHolder(value)__				if (StringUtils.hasLength(typeAttr)) {_					valueHolder.setType(typeAttr)__				}_				if (StringUtils.hasLength(nameAttr)) {_					valueHolder.setName(nameAttr)__				}_				valueHolder.setSource(extractSource(ele))__				bd.getConstructorArgumentValues().addGenericArgumentValue(valueHolder)__			}_			finally {_				this.parseState.pop()__			}_		}_	};parse,a,constructor,arg,element;public,void,parse,constructor,arg,element,element,ele,bean,definition,bd,string,index,attr,ele,get,attribute,string,type,attr,ele,get,attribute,string,name,attr,ele,get,attribute,if,string,utils,has,length,index,attr,try,int,index,integer,parse,int,index,attr,if,index,0,error,index,cannot,be,lower,than,0,ele,else,try,this,parse,state,push,new,constructor,argument,entry,index,object,value,parse,property,value,ele,bd,null,constructor,argument,values,value,holder,value,holder,new,constructor,argument,values,value,holder,value,if,string,utils,has,length,type,attr,value,holder,set,type,type,attr,if,string,utils,has,length,name,attr,value,holder,set,name,name,attr,value,holder,set,source,extract,source,ele,if,bd,get,constructor,argument,values,has,indexed,argument,value,index,error,ambiguous,constructor,arg,entries,for,index,index,ele,else,bd,get,constructor,argument,values,add,indexed,argument,value,index,value,holder,finally,this,parse,state,pop,catch,number,format,exception,ex,error,attribute,index,of,tag,constructor,arg,must,be,an,integer,ele,else,try,this,parse,state,push,new,constructor,argument,entry,object,value,parse,property,value,ele,bd,null,constructor,argument,values,value,holder,value,holder,new,constructor,argument,values,value,holder,value,if,string,utils,has,length,type,attr,value,holder,set,type,type,attr,if,string,utils,has,length,name,attr,value,holder,set,name,name,attr,value,holder,set,source,extract,source,ele,bd,get,constructor,argument,values,add,generic,argument,value,value,holder,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parseConstructorArgElement(Element ele, BeanDefinition bd);1351392612;Parse a constructor-arg element.;public void parseConstructorArgElement(Element ele, BeanDefinition bd) {_		String indexAttr = ele.getAttribute(INDEX_ATTRIBUTE)__		String typeAttr = ele.getAttribute(TYPE_ATTRIBUTE)__		String nameAttr = ele.getAttribute(NAME_ATTRIBUTE)__		if (StringUtils.hasLength(indexAttr)) {_			try {_				int index = Integer.parseInt(indexAttr)__				if (index < 0) {_					error("'index' cannot be lower than 0", ele)__				}_				else {_					try {_						this.parseState.push(new ConstructorArgumentEntry(index))__						Object value = parsePropertyValue(ele, bd, null)__						ConstructorArgumentValues.ValueHolder valueHolder = new ConstructorArgumentValues.ValueHolder(value)__						if (StringUtils.hasLength(typeAttr)) {_							valueHolder.setType(typeAttr)__						}_						if (StringUtils.hasLength(nameAttr)) {_							valueHolder.setName(nameAttr)__						}_						valueHolder.setSource(extractSource(ele))__						if (bd.getConstructorArgumentValues().hasIndexedArgumentValue(index)) {_							error("Ambiguous constructor-arg entries for index " + index, ele)__						}_						else {_							bd.getConstructorArgumentValues().addIndexedArgumentValue(index, valueHolder)__						}_					}_					finally {_						this.parseState.pop()__					}_				}_			}_			catch (NumberFormatException ex) {_				error("Attribute 'index' of tag 'constructor-arg' must be an integer", ele)__			}_		}_		else {_			try {_				this.parseState.push(new ConstructorArgumentEntry())__				Object value = parsePropertyValue(ele, bd, null)__				ConstructorArgumentValues.ValueHolder valueHolder = new ConstructorArgumentValues.ValueHolder(value)__				if (StringUtils.hasLength(typeAttr)) {_					valueHolder.setType(typeAttr)__				}_				if (StringUtils.hasLength(nameAttr)) {_					valueHolder.setName(nameAttr)__				}_				valueHolder.setSource(extractSource(ele))__				bd.getConstructorArgumentValues().addGenericArgumentValue(valueHolder)__			}_			finally {_				this.parseState.pop()__			}_		}_	};parse,a,constructor,arg,element;public,void,parse,constructor,arg,element,element,ele,bean,definition,bd,string,index,attr,ele,get,attribute,string,type,attr,ele,get,attribute,string,name,attr,ele,get,attribute,if,string,utils,has,length,index,attr,try,int,index,integer,parse,int,index,attr,if,index,0,error,index,cannot,be,lower,than,0,ele,else,try,this,parse,state,push,new,constructor,argument,entry,index,object,value,parse,property,value,ele,bd,null,constructor,argument,values,value,holder,value,holder,new,constructor,argument,values,value,holder,value,if,string,utils,has,length,type,attr,value,holder,set,type,type,attr,if,string,utils,has,length,name,attr,value,holder,set,name,name,attr,value,holder,set,source,extract,source,ele,if,bd,get,constructor,argument,values,has,indexed,argument,value,index,error,ambiguous,constructor,arg,entries,for,index,index,ele,else,bd,get,constructor,argument,values,add,indexed,argument,value,index,value,holder,finally,this,parse,state,pop,catch,number,format,exception,ex,error,attribute,index,of,tag,constructor,arg,must,be,an,integer,ele,else,try,this,parse,state,push,new,constructor,argument,entry,object,value,parse,property,value,ele,bd,null,constructor,argument,values,value,holder,value,holder,new,constructor,argument,values,value,holder,value,if,string,utils,has,length,type,attr,value,holder,set,type,type,attr,if,string,utils,has,length,name,attr,value,holder,set,name,name,attr,value,holder,set,source,extract,source,ele,bd,get,constructor,argument,values,add,generic,argument,value,value,holder,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parseConstructorArgElement(Element ele, BeanDefinition bd);1351696936;Parse a constructor-arg element.;public void parseConstructorArgElement(Element ele, BeanDefinition bd) {_		String indexAttr = ele.getAttribute(INDEX_ATTRIBUTE)__		String typeAttr = ele.getAttribute(TYPE_ATTRIBUTE)__		String nameAttr = ele.getAttribute(NAME_ATTRIBUTE)__		if (StringUtils.hasLength(indexAttr)) {_			try {_				int index = Integer.parseInt(indexAttr)__				if (index < 0) {_					error("'index' cannot be lower than 0", ele)__				}_				else {_					try {_						this.parseState.push(new ConstructorArgumentEntry(index))__						Object value = parsePropertyValue(ele, bd, null)__						ConstructorArgumentValues.ValueHolder valueHolder = new ConstructorArgumentValues.ValueHolder(value)__						if (StringUtils.hasLength(typeAttr)) {_							valueHolder.setType(typeAttr)__						}_						if (StringUtils.hasLength(nameAttr)) {_							valueHolder.setName(nameAttr)__						}_						valueHolder.setSource(extractSource(ele))__						if (bd.getConstructorArgumentValues().hasIndexedArgumentValue(index)) {_							error("Ambiguous constructor-arg entries for index " + index, ele)__						}_						else {_							bd.getConstructorArgumentValues().addIndexedArgumentValue(index, valueHolder)__						}_					}_					finally {_						this.parseState.pop()__					}_				}_			}_			catch (NumberFormatException ex) {_				error("Attribute 'index' of tag 'constructor-arg' must be an integer", ele)__			}_		}_		else {_			try {_				this.parseState.push(new ConstructorArgumentEntry())__				Object value = parsePropertyValue(ele, bd, null)__				ConstructorArgumentValues.ValueHolder valueHolder = new ConstructorArgumentValues.ValueHolder(value)__				if (StringUtils.hasLength(typeAttr)) {_					valueHolder.setType(typeAttr)__				}_				if (StringUtils.hasLength(nameAttr)) {_					valueHolder.setName(nameAttr)__				}_				valueHolder.setSource(extractSource(ele))__				bd.getConstructorArgumentValues().addGenericArgumentValue(valueHolder)__			}_			finally {_				this.parseState.pop()__			}_		}_	};parse,a,constructor,arg,element;public,void,parse,constructor,arg,element,element,ele,bean,definition,bd,string,index,attr,ele,get,attribute,string,type,attr,ele,get,attribute,string,name,attr,ele,get,attribute,if,string,utils,has,length,index,attr,try,int,index,integer,parse,int,index,attr,if,index,0,error,index,cannot,be,lower,than,0,ele,else,try,this,parse,state,push,new,constructor,argument,entry,index,object,value,parse,property,value,ele,bd,null,constructor,argument,values,value,holder,value,holder,new,constructor,argument,values,value,holder,value,if,string,utils,has,length,type,attr,value,holder,set,type,type,attr,if,string,utils,has,length,name,attr,value,holder,set,name,name,attr,value,holder,set,source,extract,source,ele,if,bd,get,constructor,argument,values,has,indexed,argument,value,index,error,ambiguous,constructor,arg,entries,for,index,index,ele,else,bd,get,constructor,argument,values,add,indexed,argument,value,index,value,holder,finally,this,parse,state,pop,catch,number,format,exception,ex,error,attribute,index,of,tag,constructor,arg,must,be,an,integer,ele,else,try,this,parse,state,push,new,constructor,argument,entry,object,value,parse,property,value,ele,bd,null,constructor,argument,values,value,holder,value,holder,new,constructor,argument,values,value,holder,value,if,string,utils,has,length,type,attr,value,holder,set,type,type,attr,if,string,utils,has,length,name,attr,value,holder,set,name,name,attr,value,holder,set,source,extract,source,ele,bd,get,constructor,argument,values,add,generic,argument,value,value,holder,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parseConstructorArgElement(Element ele, BeanDefinition bd);1356735495;Parse a constructor-arg element.;public void parseConstructorArgElement(Element ele, BeanDefinition bd) {_		String indexAttr = ele.getAttribute(INDEX_ATTRIBUTE)__		String typeAttr = ele.getAttribute(TYPE_ATTRIBUTE)__		String nameAttr = ele.getAttribute(NAME_ATTRIBUTE)__		if (StringUtils.hasLength(indexAttr)) {_			try {_				int index = Integer.parseInt(indexAttr)__				if (index < 0) {_					error("'index' cannot be lower than 0", ele)__				}_				else {_					try {_						this.parseState.push(new ConstructorArgumentEntry(index))__						Object value = parsePropertyValue(ele, bd, null)__						ConstructorArgumentValues.ValueHolder valueHolder = new ConstructorArgumentValues.ValueHolder(value)__						if (StringUtils.hasLength(typeAttr)) {_							valueHolder.setType(typeAttr)__						}_						if (StringUtils.hasLength(nameAttr)) {_							valueHolder.setName(nameAttr)__						}_						valueHolder.setSource(extractSource(ele))__						if (bd.getConstructorArgumentValues().hasIndexedArgumentValue(index)) {_							error("Ambiguous constructor-arg entries for index " + index, ele)__						}_						else {_							bd.getConstructorArgumentValues().addIndexedArgumentValue(index, valueHolder)__						}_					}_					finally {_						this.parseState.pop()__					}_				}_			}_			catch (NumberFormatException ex) {_				error("Attribute 'index' of tag 'constructor-arg' must be an integer", ele)__			}_		}_		else {_			try {_				this.parseState.push(new ConstructorArgumentEntry())__				Object value = parsePropertyValue(ele, bd, null)__				ConstructorArgumentValues.ValueHolder valueHolder = new ConstructorArgumentValues.ValueHolder(value)__				if (StringUtils.hasLength(typeAttr)) {_					valueHolder.setType(typeAttr)__				}_				if (StringUtils.hasLength(nameAttr)) {_					valueHolder.setName(nameAttr)__				}_				valueHolder.setSource(extractSource(ele))__				bd.getConstructorArgumentValues().addGenericArgumentValue(valueHolder)__			}_			finally {_				this.parseState.pop()__			}_		}_	};parse,a,constructor,arg,element;public,void,parse,constructor,arg,element,element,ele,bean,definition,bd,string,index,attr,ele,get,attribute,string,type,attr,ele,get,attribute,string,name,attr,ele,get,attribute,if,string,utils,has,length,index,attr,try,int,index,integer,parse,int,index,attr,if,index,0,error,index,cannot,be,lower,than,0,ele,else,try,this,parse,state,push,new,constructor,argument,entry,index,object,value,parse,property,value,ele,bd,null,constructor,argument,values,value,holder,value,holder,new,constructor,argument,values,value,holder,value,if,string,utils,has,length,type,attr,value,holder,set,type,type,attr,if,string,utils,has,length,name,attr,value,holder,set,name,name,attr,value,holder,set,source,extract,source,ele,if,bd,get,constructor,argument,values,has,indexed,argument,value,index,error,ambiguous,constructor,arg,entries,for,index,index,ele,else,bd,get,constructor,argument,values,add,indexed,argument,value,index,value,holder,finally,this,parse,state,pop,catch,number,format,exception,ex,error,attribute,index,of,tag,constructor,arg,must,be,an,integer,ele,else,try,this,parse,state,push,new,constructor,argument,entry,object,value,parse,property,value,ele,bd,null,constructor,argument,values,value,holder,value,holder,new,constructor,argument,values,value,holder,value,if,string,utils,has,length,type,attr,value,holder,set,type,type,attr,if,string,utils,has,length,name,attr,value,holder,set,name,name,attr,value,holder,set,source,extract,source,ele,bd,get,constructor,argument,values,add,generic,argument,value,value,holder,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parseConstructorArgElement(Element ele, BeanDefinition bd);1357119417;Parse a constructor-arg element.;public void parseConstructorArgElement(Element ele, BeanDefinition bd) {_		String indexAttr = ele.getAttribute(INDEX_ATTRIBUTE)__		String typeAttr = ele.getAttribute(TYPE_ATTRIBUTE)__		String nameAttr = ele.getAttribute(NAME_ATTRIBUTE)__		if (StringUtils.hasLength(indexAttr)) {_			try {_				int index = Integer.parseInt(indexAttr)__				if (index < 0) {_					error("'index' cannot be lower than 0", ele)__				}_				else {_					try {_						this.parseState.push(new ConstructorArgumentEntry(index))__						Object value = parsePropertyValue(ele, bd, null)__						ConstructorArgumentValues.ValueHolder valueHolder = new ConstructorArgumentValues.ValueHolder(value)__						if (StringUtils.hasLength(typeAttr)) {_							valueHolder.setType(typeAttr)__						}_						if (StringUtils.hasLength(nameAttr)) {_							valueHolder.setName(nameAttr)__						}_						valueHolder.setSource(extractSource(ele))__						if (bd.getConstructorArgumentValues().hasIndexedArgumentValue(index)) {_							error("Ambiguous constructor-arg entries for index " + index, ele)__						}_						else {_							bd.getConstructorArgumentValues().addIndexedArgumentValue(index, valueHolder)__						}_					}_					finally {_						this.parseState.pop()__					}_				}_			}_			catch (NumberFormatException ex) {_				error("Attribute 'index' of tag 'constructor-arg' must be an integer", ele)__			}_		}_		else {_			try {_				this.parseState.push(new ConstructorArgumentEntry())__				Object value = parsePropertyValue(ele, bd, null)__				ConstructorArgumentValues.ValueHolder valueHolder = new ConstructorArgumentValues.ValueHolder(value)__				if (StringUtils.hasLength(typeAttr)) {_					valueHolder.setType(typeAttr)__				}_				if (StringUtils.hasLength(nameAttr)) {_					valueHolder.setName(nameAttr)__				}_				valueHolder.setSource(extractSource(ele))__				bd.getConstructorArgumentValues().addGenericArgumentValue(valueHolder)__			}_			finally {_				this.parseState.pop()__			}_		}_	};parse,a,constructor,arg,element;public,void,parse,constructor,arg,element,element,ele,bean,definition,bd,string,index,attr,ele,get,attribute,string,type,attr,ele,get,attribute,string,name,attr,ele,get,attribute,if,string,utils,has,length,index,attr,try,int,index,integer,parse,int,index,attr,if,index,0,error,index,cannot,be,lower,than,0,ele,else,try,this,parse,state,push,new,constructor,argument,entry,index,object,value,parse,property,value,ele,bd,null,constructor,argument,values,value,holder,value,holder,new,constructor,argument,values,value,holder,value,if,string,utils,has,length,type,attr,value,holder,set,type,type,attr,if,string,utils,has,length,name,attr,value,holder,set,name,name,attr,value,holder,set,source,extract,source,ele,if,bd,get,constructor,argument,values,has,indexed,argument,value,index,error,ambiguous,constructor,arg,entries,for,index,index,ele,else,bd,get,constructor,argument,values,add,indexed,argument,value,index,value,holder,finally,this,parse,state,pop,catch,number,format,exception,ex,error,attribute,index,of,tag,constructor,arg,must,be,an,integer,ele,else,try,this,parse,state,push,new,constructor,argument,entry,object,value,parse,property,value,ele,bd,null,constructor,argument,values,value,holder,value,holder,new,constructor,argument,values,value,holder,value,if,string,utils,has,length,type,attr,value,holder,set,type,type,attr,if,string,utils,has,length,name,attr,value,holder,set,name,name,attr,value,holder,set,source,extract,source,ele,bd,get,constructor,argument,values,add,generic,argument,value,value,holder,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parseConstructorArgElement(Element ele, BeanDefinition bd);1367943112;Parse a constructor-arg element.;public void parseConstructorArgElement(Element ele, BeanDefinition bd) {_		String indexAttr = ele.getAttribute(INDEX_ATTRIBUTE)__		String typeAttr = ele.getAttribute(TYPE_ATTRIBUTE)__		String nameAttr = ele.getAttribute(NAME_ATTRIBUTE)__		if (StringUtils.hasLength(indexAttr)) {_			try {_				int index = Integer.parseInt(indexAttr)__				if (index < 0) {_					error("'index' cannot be lower than 0", ele)__				}_				else {_					try {_						this.parseState.push(new ConstructorArgumentEntry(index))__						Object value = parsePropertyValue(ele, bd, null)__						ConstructorArgumentValues.ValueHolder valueHolder = new ConstructorArgumentValues.ValueHolder(value)__						if (StringUtils.hasLength(typeAttr)) {_							valueHolder.setType(typeAttr)__						}_						if (StringUtils.hasLength(nameAttr)) {_							valueHolder.setName(nameAttr)__						}_						valueHolder.setSource(extractSource(ele))__						if (bd.getConstructorArgumentValues().hasIndexedArgumentValue(index)) {_							error("Ambiguous constructor-arg entries for index " + index, ele)__						}_						else {_							bd.getConstructorArgumentValues().addIndexedArgumentValue(index, valueHolder)__						}_					}_					finally {_						this.parseState.pop()__					}_				}_			}_			catch (NumberFormatException ex) {_				error("Attribute 'index' of tag 'constructor-arg' must be an integer", ele)__			}_		}_		else {_			try {_				this.parseState.push(new ConstructorArgumentEntry())__				Object value = parsePropertyValue(ele, bd, null)__				ConstructorArgumentValues.ValueHolder valueHolder = new ConstructorArgumentValues.ValueHolder(value)__				if (StringUtils.hasLength(typeAttr)) {_					valueHolder.setType(typeAttr)__				}_				if (StringUtils.hasLength(nameAttr)) {_					valueHolder.setName(nameAttr)__				}_				valueHolder.setSource(extractSource(ele))__				bd.getConstructorArgumentValues().addGenericArgumentValue(valueHolder)__			}_			finally {_				this.parseState.pop()__			}_		}_	};parse,a,constructor,arg,element;public,void,parse,constructor,arg,element,element,ele,bean,definition,bd,string,index,attr,ele,get,attribute,string,type,attr,ele,get,attribute,string,name,attr,ele,get,attribute,if,string,utils,has,length,index,attr,try,int,index,integer,parse,int,index,attr,if,index,0,error,index,cannot,be,lower,than,0,ele,else,try,this,parse,state,push,new,constructor,argument,entry,index,object,value,parse,property,value,ele,bd,null,constructor,argument,values,value,holder,value,holder,new,constructor,argument,values,value,holder,value,if,string,utils,has,length,type,attr,value,holder,set,type,type,attr,if,string,utils,has,length,name,attr,value,holder,set,name,name,attr,value,holder,set,source,extract,source,ele,if,bd,get,constructor,argument,values,has,indexed,argument,value,index,error,ambiguous,constructor,arg,entries,for,index,index,ele,else,bd,get,constructor,argument,values,add,indexed,argument,value,index,value,holder,finally,this,parse,state,pop,catch,number,format,exception,ex,error,attribute,index,of,tag,constructor,arg,must,be,an,integer,ele,else,try,this,parse,state,push,new,constructor,argument,entry,object,value,parse,property,value,ele,bd,null,constructor,argument,values,value,holder,value,holder,new,constructor,argument,values,value,holder,value,if,string,utils,has,length,type,attr,value,holder,set,type,type,attr,if,string,utils,has,length,name,attr,value,holder,set,name,name,attr,value,holder,set,source,extract,source,ele,bd,get,constructor,argument,values,add,generic,argument,value,value,holder,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parseConstructorArgElement(Element ele, BeanDefinition bd);1382030648;Parse a constructor-arg element.;public void parseConstructorArgElement(Element ele, BeanDefinition bd) {_		String indexAttr = ele.getAttribute(INDEX_ATTRIBUTE)__		String typeAttr = ele.getAttribute(TYPE_ATTRIBUTE)__		String nameAttr = ele.getAttribute(NAME_ATTRIBUTE)__		if (StringUtils.hasLength(indexAttr)) {_			try {_				int index = Integer.parseInt(indexAttr)__				if (index < 0) {_					error("'index' cannot be lower than 0", ele)__				}_				else {_					try {_						this.parseState.push(new ConstructorArgumentEntry(index))__						Object value = parsePropertyValue(ele, bd, null)__						ConstructorArgumentValues.ValueHolder valueHolder = new ConstructorArgumentValues.ValueHolder(value)__						if (StringUtils.hasLength(typeAttr)) {_							valueHolder.setType(typeAttr)__						}_						if (StringUtils.hasLength(nameAttr)) {_							valueHolder.setName(nameAttr)__						}_						valueHolder.setSource(extractSource(ele))__						if (bd.getConstructorArgumentValues().hasIndexedArgumentValue(index)) {_							error("Ambiguous constructor-arg entries for index " + index, ele)__						}_						else {_							bd.getConstructorArgumentValues().addIndexedArgumentValue(index, valueHolder)__						}_					}_					finally {_						this.parseState.pop()__					}_				}_			}_			catch (NumberFormatException ex) {_				error("Attribute 'index' of tag 'constructor-arg' must be an integer", ele)__			}_		}_		else {_			try {_				this.parseState.push(new ConstructorArgumentEntry())__				Object value = parsePropertyValue(ele, bd, null)__				ConstructorArgumentValues.ValueHolder valueHolder = new ConstructorArgumentValues.ValueHolder(value)__				if (StringUtils.hasLength(typeAttr)) {_					valueHolder.setType(typeAttr)__				}_				if (StringUtils.hasLength(nameAttr)) {_					valueHolder.setName(nameAttr)__				}_				valueHolder.setSource(extractSource(ele))__				bd.getConstructorArgumentValues().addGenericArgumentValue(valueHolder)__			}_			finally {_				this.parseState.pop()__			}_		}_	};parse,a,constructor,arg,element;public,void,parse,constructor,arg,element,element,ele,bean,definition,bd,string,index,attr,ele,get,attribute,string,type,attr,ele,get,attribute,string,name,attr,ele,get,attribute,if,string,utils,has,length,index,attr,try,int,index,integer,parse,int,index,attr,if,index,0,error,index,cannot,be,lower,than,0,ele,else,try,this,parse,state,push,new,constructor,argument,entry,index,object,value,parse,property,value,ele,bd,null,constructor,argument,values,value,holder,value,holder,new,constructor,argument,values,value,holder,value,if,string,utils,has,length,type,attr,value,holder,set,type,type,attr,if,string,utils,has,length,name,attr,value,holder,set,name,name,attr,value,holder,set,source,extract,source,ele,if,bd,get,constructor,argument,values,has,indexed,argument,value,index,error,ambiguous,constructor,arg,entries,for,index,index,ele,else,bd,get,constructor,argument,values,add,indexed,argument,value,index,value,holder,finally,this,parse,state,pop,catch,number,format,exception,ex,error,attribute,index,of,tag,constructor,arg,must,be,an,integer,ele,else,try,this,parse,state,push,new,constructor,argument,entry,object,value,parse,property,value,ele,bd,null,constructor,argument,values,value,holder,value,holder,new,constructor,argument,values,value,holder,value,if,string,utils,has,length,type,attr,value,holder,set,type,type,attr,if,string,utils,has,length,name,attr,value,holder,set,name,name,attr,value,holder,set,source,extract,source,ele,bd,get,constructor,argument,values,add,generic,argument,value,value,holder,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parseConstructorArgElement(Element ele, BeanDefinition bd);1385412762;Parse a constructor-arg element.;public void parseConstructorArgElement(Element ele, BeanDefinition bd) {_		String indexAttr = ele.getAttribute(INDEX_ATTRIBUTE)__		String typeAttr = ele.getAttribute(TYPE_ATTRIBUTE)__		String nameAttr = ele.getAttribute(NAME_ATTRIBUTE)__		if (StringUtils.hasLength(indexAttr)) {_			try {_				int index = Integer.parseInt(indexAttr)__				if (index < 0) {_					error("'index' cannot be lower than 0", ele)__				}_				else {_					try {_						this.parseState.push(new ConstructorArgumentEntry(index))__						Object value = parsePropertyValue(ele, bd, null)__						ConstructorArgumentValues.ValueHolder valueHolder = new ConstructorArgumentValues.ValueHolder(value)__						if (StringUtils.hasLength(typeAttr)) {_							valueHolder.setType(typeAttr)__						}_						if (StringUtils.hasLength(nameAttr)) {_							valueHolder.setName(nameAttr)__						}_						valueHolder.setSource(extractSource(ele))__						if (bd.getConstructorArgumentValues().hasIndexedArgumentValue(index)) {_							error("Ambiguous constructor-arg entries for index " + index, ele)__						}_						else {_							bd.getConstructorArgumentValues().addIndexedArgumentValue(index, valueHolder)__						}_					}_					finally {_						this.parseState.pop()__					}_				}_			}_			catch (NumberFormatException ex) {_				error("Attribute 'index' of tag 'constructor-arg' must be an integer", ele)__			}_		}_		else {_			try {_				this.parseState.push(new ConstructorArgumentEntry())__				Object value = parsePropertyValue(ele, bd, null)__				ConstructorArgumentValues.ValueHolder valueHolder = new ConstructorArgumentValues.ValueHolder(value)__				if (StringUtils.hasLength(typeAttr)) {_					valueHolder.setType(typeAttr)__				}_				if (StringUtils.hasLength(nameAttr)) {_					valueHolder.setName(nameAttr)__				}_				valueHolder.setSource(extractSource(ele))__				bd.getConstructorArgumentValues().addGenericArgumentValue(valueHolder)__			}_			finally {_				this.parseState.pop()__			}_		}_	};parse,a,constructor,arg,element;public,void,parse,constructor,arg,element,element,ele,bean,definition,bd,string,index,attr,ele,get,attribute,string,type,attr,ele,get,attribute,string,name,attr,ele,get,attribute,if,string,utils,has,length,index,attr,try,int,index,integer,parse,int,index,attr,if,index,0,error,index,cannot,be,lower,than,0,ele,else,try,this,parse,state,push,new,constructor,argument,entry,index,object,value,parse,property,value,ele,bd,null,constructor,argument,values,value,holder,value,holder,new,constructor,argument,values,value,holder,value,if,string,utils,has,length,type,attr,value,holder,set,type,type,attr,if,string,utils,has,length,name,attr,value,holder,set,name,name,attr,value,holder,set,source,extract,source,ele,if,bd,get,constructor,argument,values,has,indexed,argument,value,index,error,ambiguous,constructor,arg,entries,for,index,index,ele,else,bd,get,constructor,argument,values,add,indexed,argument,value,index,value,holder,finally,this,parse,state,pop,catch,number,format,exception,ex,error,attribute,index,of,tag,constructor,arg,must,be,an,integer,ele,else,try,this,parse,state,push,new,constructor,argument,entry,object,value,parse,property,value,ele,bd,null,constructor,argument,values,value,holder,value,holder,new,constructor,argument,values,value,holder,value,if,string,utils,has,length,type,attr,value,holder,set,type,type,attr,if,string,utils,has,length,name,attr,value,holder,set,name,name,attr,value,holder,set,source,extract,source,ele,bd,get,constructor,argument,values,add,generic,argument,value,value,holder,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parseConstructorArgElement(Element ele, BeanDefinition bd);1410953197;Parse a constructor-arg element.;public void parseConstructorArgElement(Element ele, BeanDefinition bd) {_		String indexAttr = ele.getAttribute(INDEX_ATTRIBUTE)__		String typeAttr = ele.getAttribute(TYPE_ATTRIBUTE)__		String nameAttr = ele.getAttribute(NAME_ATTRIBUTE)__		if (StringUtils.hasLength(indexAttr)) {_			try {_				int index = Integer.parseInt(indexAttr)__				if (index < 0) {_					error("'index' cannot be lower than 0", ele)__				}_				else {_					try {_						this.parseState.push(new ConstructorArgumentEntry(index))__						Object value = parsePropertyValue(ele, bd, null)__						ConstructorArgumentValues.ValueHolder valueHolder = new ConstructorArgumentValues.ValueHolder(value)__						if (StringUtils.hasLength(typeAttr)) {_							valueHolder.setType(typeAttr)__						}_						if (StringUtils.hasLength(nameAttr)) {_							valueHolder.setName(nameAttr)__						}_						valueHolder.setSource(extractSource(ele))__						if (bd.getConstructorArgumentValues().hasIndexedArgumentValue(index)) {_							error("Ambiguous constructor-arg entries for index " + index, ele)__						}_						else {_							bd.getConstructorArgumentValues().addIndexedArgumentValue(index, valueHolder)__						}_					}_					finally {_						this.parseState.pop()__					}_				}_			}_			catch (NumberFormatException ex) {_				error("Attribute 'index' of tag 'constructor-arg' must be an integer", ele)__			}_		}_		else {_			try {_				this.parseState.push(new ConstructorArgumentEntry())__				Object value = parsePropertyValue(ele, bd, null)__				ConstructorArgumentValues.ValueHolder valueHolder = new ConstructorArgumentValues.ValueHolder(value)__				if (StringUtils.hasLength(typeAttr)) {_					valueHolder.setType(typeAttr)__				}_				if (StringUtils.hasLength(nameAttr)) {_					valueHolder.setName(nameAttr)__				}_				valueHolder.setSource(extractSource(ele))__				bd.getConstructorArgumentValues().addGenericArgumentValue(valueHolder)__			}_			finally {_				this.parseState.pop()__			}_		}_	};parse,a,constructor,arg,element;public,void,parse,constructor,arg,element,element,ele,bean,definition,bd,string,index,attr,ele,get,attribute,string,type,attr,ele,get,attribute,string,name,attr,ele,get,attribute,if,string,utils,has,length,index,attr,try,int,index,integer,parse,int,index,attr,if,index,0,error,index,cannot,be,lower,than,0,ele,else,try,this,parse,state,push,new,constructor,argument,entry,index,object,value,parse,property,value,ele,bd,null,constructor,argument,values,value,holder,value,holder,new,constructor,argument,values,value,holder,value,if,string,utils,has,length,type,attr,value,holder,set,type,type,attr,if,string,utils,has,length,name,attr,value,holder,set,name,name,attr,value,holder,set,source,extract,source,ele,if,bd,get,constructor,argument,values,has,indexed,argument,value,index,error,ambiguous,constructor,arg,entries,for,index,index,ele,else,bd,get,constructor,argument,values,add,indexed,argument,value,index,value,holder,finally,this,parse,state,pop,catch,number,format,exception,ex,error,attribute,index,of,tag,constructor,arg,must,be,an,integer,ele,else,try,this,parse,state,push,new,constructor,argument,entry,object,value,parse,property,value,ele,bd,null,constructor,argument,values,value,holder,value,holder,new,constructor,argument,values,value,holder,value,if,string,utils,has,length,type,attr,value,holder,set,type,type,attr,if,string,utils,has,length,name,attr,value,holder,set,name,name,attr,value,holder,set,source,extract,source,ele,bd,get,constructor,argument,values,add,generic,argument,value,value,holder,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parseConstructorArgElement(Element ele, BeanDefinition bd);1411599760;Parse a constructor-arg element.;public void parseConstructorArgElement(Element ele, BeanDefinition bd) {_		String indexAttr = ele.getAttribute(INDEX_ATTRIBUTE)__		String typeAttr = ele.getAttribute(TYPE_ATTRIBUTE)__		String nameAttr = ele.getAttribute(NAME_ATTRIBUTE)__		if (StringUtils.hasLength(indexAttr)) {_			try {_				int index = Integer.parseInt(indexAttr)__				if (index < 0) {_					error("'index' cannot be lower than 0", ele)__				}_				else {_					try {_						this.parseState.push(new ConstructorArgumentEntry(index))__						Object value = parsePropertyValue(ele, bd, null)__						ConstructorArgumentValues.ValueHolder valueHolder = new ConstructorArgumentValues.ValueHolder(value)__						if (StringUtils.hasLength(typeAttr)) {_							valueHolder.setType(typeAttr)__						}_						if (StringUtils.hasLength(nameAttr)) {_							valueHolder.setName(nameAttr)__						}_						valueHolder.setSource(extractSource(ele))__						if (bd.getConstructorArgumentValues().hasIndexedArgumentValue(index)) {_							error("Ambiguous constructor-arg entries for index " + index, ele)__						}_						else {_							bd.getConstructorArgumentValues().addIndexedArgumentValue(index, valueHolder)__						}_					}_					finally {_						this.parseState.pop()__					}_				}_			}_			catch (NumberFormatException ex) {_				error("Attribute 'index' of tag 'constructor-arg' must be an integer", ele)__			}_		}_		else {_			try {_				this.parseState.push(new ConstructorArgumentEntry())__				Object value = parsePropertyValue(ele, bd, null)__				ConstructorArgumentValues.ValueHolder valueHolder = new ConstructorArgumentValues.ValueHolder(value)__				if (StringUtils.hasLength(typeAttr)) {_					valueHolder.setType(typeAttr)__				}_				if (StringUtils.hasLength(nameAttr)) {_					valueHolder.setName(nameAttr)__				}_				valueHolder.setSource(extractSource(ele))__				bd.getConstructorArgumentValues().addGenericArgumentValue(valueHolder)__			}_			finally {_				this.parseState.pop()__			}_		}_	};parse,a,constructor,arg,element;public,void,parse,constructor,arg,element,element,ele,bean,definition,bd,string,index,attr,ele,get,attribute,string,type,attr,ele,get,attribute,string,name,attr,ele,get,attribute,if,string,utils,has,length,index,attr,try,int,index,integer,parse,int,index,attr,if,index,0,error,index,cannot,be,lower,than,0,ele,else,try,this,parse,state,push,new,constructor,argument,entry,index,object,value,parse,property,value,ele,bd,null,constructor,argument,values,value,holder,value,holder,new,constructor,argument,values,value,holder,value,if,string,utils,has,length,type,attr,value,holder,set,type,type,attr,if,string,utils,has,length,name,attr,value,holder,set,name,name,attr,value,holder,set,source,extract,source,ele,if,bd,get,constructor,argument,values,has,indexed,argument,value,index,error,ambiguous,constructor,arg,entries,for,index,index,ele,else,bd,get,constructor,argument,values,add,indexed,argument,value,index,value,holder,finally,this,parse,state,pop,catch,number,format,exception,ex,error,attribute,index,of,tag,constructor,arg,must,be,an,integer,ele,else,try,this,parse,state,push,new,constructor,argument,entry,object,value,parse,property,value,ele,bd,null,constructor,argument,values,value,holder,value,holder,new,constructor,argument,values,value,holder,value,if,string,utils,has,length,type,attr,value,holder,set,type,type,attr,if,string,utils,has,length,name,attr,value,holder,set,name,name,attr,value,holder,set,source,extract,source,ele,bd,get,constructor,argument,values,add,generic,argument,value,value,holder,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parseConstructorArgElement(Element ele, BeanDefinition bd);1419966315;Parse a constructor-arg element.;public void parseConstructorArgElement(Element ele, BeanDefinition bd) {_		String indexAttr = ele.getAttribute(INDEX_ATTRIBUTE)__		String typeAttr = ele.getAttribute(TYPE_ATTRIBUTE)__		String nameAttr = ele.getAttribute(NAME_ATTRIBUTE)__		if (StringUtils.hasLength(indexAttr)) {_			try {_				int index = Integer.parseInt(indexAttr)__				if (index < 0) {_					error("'index' cannot be lower than 0", ele)__				}_				else {_					try {_						this.parseState.push(new ConstructorArgumentEntry(index))__						Object value = parsePropertyValue(ele, bd, null)__						ConstructorArgumentValues.ValueHolder valueHolder = new ConstructorArgumentValues.ValueHolder(value)__						if (StringUtils.hasLength(typeAttr)) {_							valueHolder.setType(typeAttr)__						}_						if (StringUtils.hasLength(nameAttr)) {_							valueHolder.setName(nameAttr)__						}_						valueHolder.setSource(extractSource(ele))__						if (bd.getConstructorArgumentValues().hasIndexedArgumentValue(index)) {_							error("Ambiguous constructor-arg entries for index " + index, ele)__						}_						else {_							bd.getConstructorArgumentValues().addIndexedArgumentValue(index, valueHolder)__						}_					}_					finally {_						this.parseState.pop()__					}_				}_			}_			catch (NumberFormatException ex) {_				error("Attribute 'index' of tag 'constructor-arg' must be an integer", ele)__			}_		}_		else {_			try {_				this.parseState.push(new ConstructorArgumentEntry())__				Object value = parsePropertyValue(ele, bd, null)__				ConstructorArgumentValues.ValueHolder valueHolder = new ConstructorArgumentValues.ValueHolder(value)__				if (StringUtils.hasLength(typeAttr)) {_					valueHolder.setType(typeAttr)__				}_				if (StringUtils.hasLength(nameAttr)) {_					valueHolder.setName(nameAttr)__				}_				valueHolder.setSource(extractSource(ele))__				bd.getConstructorArgumentValues().addGenericArgumentValue(valueHolder)__			}_			finally {_				this.parseState.pop()__			}_		}_	};parse,a,constructor,arg,element;public,void,parse,constructor,arg,element,element,ele,bean,definition,bd,string,index,attr,ele,get,attribute,string,type,attr,ele,get,attribute,string,name,attr,ele,get,attribute,if,string,utils,has,length,index,attr,try,int,index,integer,parse,int,index,attr,if,index,0,error,index,cannot,be,lower,than,0,ele,else,try,this,parse,state,push,new,constructor,argument,entry,index,object,value,parse,property,value,ele,bd,null,constructor,argument,values,value,holder,value,holder,new,constructor,argument,values,value,holder,value,if,string,utils,has,length,type,attr,value,holder,set,type,type,attr,if,string,utils,has,length,name,attr,value,holder,set,name,name,attr,value,holder,set,source,extract,source,ele,if,bd,get,constructor,argument,values,has,indexed,argument,value,index,error,ambiguous,constructor,arg,entries,for,index,index,ele,else,bd,get,constructor,argument,values,add,indexed,argument,value,index,value,holder,finally,this,parse,state,pop,catch,number,format,exception,ex,error,attribute,index,of,tag,constructor,arg,must,be,an,integer,ele,else,try,this,parse,state,push,new,constructor,argument,entry,object,value,parse,property,value,ele,bd,null,constructor,argument,values,value,holder,value,holder,new,constructor,argument,values,value,holder,value,if,string,utils,has,length,type,attr,value,holder,set,type,type,attr,if,string,utils,has,length,name,attr,value,holder,set,name,name,attr,value,holder,set,source,extract,source,ele,bd,get,constructor,argument,values,add,generic,argument,value,value,holder,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parseConstructorArgElement(Element ele, BeanDefinition bd);1431958785;Parse a constructor-arg element.;public void parseConstructorArgElement(Element ele, BeanDefinition bd) {_		String indexAttr = ele.getAttribute(INDEX_ATTRIBUTE)__		String typeAttr = ele.getAttribute(TYPE_ATTRIBUTE)__		String nameAttr = ele.getAttribute(NAME_ATTRIBUTE)__		if (StringUtils.hasLength(indexAttr)) {_			try {_				int index = Integer.parseInt(indexAttr)__				if (index < 0) {_					error("'index' cannot be lower than 0", ele)__				}_				else {_					try {_						this.parseState.push(new ConstructorArgumentEntry(index))__						Object value = parsePropertyValue(ele, bd, null)__						ConstructorArgumentValues.ValueHolder valueHolder = new ConstructorArgumentValues.ValueHolder(value)__						if (StringUtils.hasLength(typeAttr)) {_							valueHolder.setType(typeAttr)__						}_						if (StringUtils.hasLength(nameAttr)) {_							valueHolder.setName(nameAttr)__						}_						valueHolder.setSource(extractSource(ele))__						if (bd.getConstructorArgumentValues().hasIndexedArgumentValue(index)) {_							error("Ambiguous constructor-arg entries for index " + index, ele)__						}_						else {_							bd.getConstructorArgumentValues().addIndexedArgumentValue(index, valueHolder)__						}_					}_					finally {_						this.parseState.pop()__					}_				}_			}_			catch (NumberFormatException ex) {_				error("Attribute 'index' of tag 'constructor-arg' must be an integer", ele)__			}_		}_		else {_			try {_				this.parseState.push(new ConstructorArgumentEntry())__				Object value = parsePropertyValue(ele, bd, null)__				ConstructorArgumentValues.ValueHolder valueHolder = new ConstructorArgumentValues.ValueHolder(value)__				if (StringUtils.hasLength(typeAttr)) {_					valueHolder.setType(typeAttr)__				}_				if (StringUtils.hasLength(nameAttr)) {_					valueHolder.setName(nameAttr)__				}_				valueHolder.setSource(extractSource(ele))__				bd.getConstructorArgumentValues().addGenericArgumentValue(valueHolder)__			}_			finally {_				this.parseState.pop()__			}_		}_	};parse,a,constructor,arg,element;public,void,parse,constructor,arg,element,element,ele,bean,definition,bd,string,index,attr,ele,get,attribute,string,type,attr,ele,get,attribute,string,name,attr,ele,get,attribute,if,string,utils,has,length,index,attr,try,int,index,integer,parse,int,index,attr,if,index,0,error,index,cannot,be,lower,than,0,ele,else,try,this,parse,state,push,new,constructor,argument,entry,index,object,value,parse,property,value,ele,bd,null,constructor,argument,values,value,holder,value,holder,new,constructor,argument,values,value,holder,value,if,string,utils,has,length,type,attr,value,holder,set,type,type,attr,if,string,utils,has,length,name,attr,value,holder,set,name,name,attr,value,holder,set,source,extract,source,ele,if,bd,get,constructor,argument,values,has,indexed,argument,value,index,error,ambiguous,constructor,arg,entries,for,index,index,ele,else,bd,get,constructor,argument,values,add,indexed,argument,value,index,value,holder,finally,this,parse,state,pop,catch,number,format,exception,ex,error,attribute,index,of,tag,constructor,arg,must,be,an,integer,ele,else,try,this,parse,state,push,new,constructor,argument,entry,object,value,parse,property,value,ele,bd,null,constructor,argument,values,value,holder,value,holder,new,constructor,argument,values,value,holder,value,if,string,utils,has,length,type,attr,value,holder,set,type,type,attr,if,string,utils,has,length,name,attr,value,holder,set,name,name,attr,value,holder,set,source,extract,source,ele,bd,get,constructor,argument,values,add,generic,argument,value,value,holder,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parseConstructorArgElement(Element ele, BeanDefinition bd);1432135182;Parse a constructor-arg element.;public void parseConstructorArgElement(Element ele, BeanDefinition bd) {_		String indexAttr = ele.getAttribute(INDEX_ATTRIBUTE)__		String typeAttr = ele.getAttribute(TYPE_ATTRIBUTE)__		String nameAttr = ele.getAttribute(NAME_ATTRIBUTE)__		if (StringUtils.hasLength(indexAttr)) {_			try {_				int index = Integer.parseInt(indexAttr)__				if (index < 0) {_					error("'index' cannot be lower than 0", ele)__				}_				else {_					try {_						this.parseState.push(new ConstructorArgumentEntry(index))__						Object value = parsePropertyValue(ele, bd, null)__						ConstructorArgumentValues.ValueHolder valueHolder = new ConstructorArgumentValues.ValueHolder(value)__						if (StringUtils.hasLength(typeAttr)) {_							valueHolder.setType(typeAttr)__						}_						if (StringUtils.hasLength(nameAttr)) {_							valueHolder.setName(nameAttr)__						}_						valueHolder.setSource(extractSource(ele))__						if (bd.getConstructorArgumentValues().hasIndexedArgumentValue(index)) {_							error("Ambiguous constructor-arg entries for index " + index, ele)__						}_						else {_							bd.getConstructorArgumentValues().addIndexedArgumentValue(index, valueHolder)__						}_					}_					finally {_						this.parseState.pop()__					}_				}_			}_			catch (NumberFormatException ex) {_				error("Attribute 'index' of tag 'constructor-arg' must be an integer", ele)__			}_		}_		else {_			try {_				this.parseState.push(new ConstructorArgumentEntry())__				Object value = parsePropertyValue(ele, bd, null)__				ConstructorArgumentValues.ValueHolder valueHolder = new ConstructorArgumentValues.ValueHolder(value)__				if (StringUtils.hasLength(typeAttr)) {_					valueHolder.setType(typeAttr)__				}_				if (StringUtils.hasLength(nameAttr)) {_					valueHolder.setName(nameAttr)__				}_				valueHolder.setSource(extractSource(ele))__				bd.getConstructorArgumentValues().addGenericArgumentValue(valueHolder)__			}_			finally {_				this.parseState.pop()__			}_		}_	};parse,a,constructor,arg,element;public,void,parse,constructor,arg,element,element,ele,bean,definition,bd,string,index,attr,ele,get,attribute,string,type,attr,ele,get,attribute,string,name,attr,ele,get,attribute,if,string,utils,has,length,index,attr,try,int,index,integer,parse,int,index,attr,if,index,0,error,index,cannot,be,lower,than,0,ele,else,try,this,parse,state,push,new,constructor,argument,entry,index,object,value,parse,property,value,ele,bd,null,constructor,argument,values,value,holder,value,holder,new,constructor,argument,values,value,holder,value,if,string,utils,has,length,type,attr,value,holder,set,type,type,attr,if,string,utils,has,length,name,attr,value,holder,set,name,name,attr,value,holder,set,source,extract,source,ele,if,bd,get,constructor,argument,values,has,indexed,argument,value,index,error,ambiguous,constructor,arg,entries,for,index,index,ele,else,bd,get,constructor,argument,values,add,indexed,argument,value,index,value,holder,finally,this,parse,state,pop,catch,number,format,exception,ex,error,attribute,index,of,tag,constructor,arg,must,be,an,integer,ele,else,try,this,parse,state,push,new,constructor,argument,entry,object,value,parse,property,value,ele,bd,null,constructor,argument,values,value,holder,value,holder,new,constructor,argument,values,value,holder,value,if,string,utils,has,length,type,attr,value,holder,set,type,type,attr,if,string,utils,has,length,name,attr,value,holder,set,name,name,attr,value,holder,set,source,extract,source,ele,bd,get,constructor,argument,values,add,generic,argument,value,value,holder,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parseConstructorArgElement(Element ele, BeanDefinition bd);1447323728;Parse a constructor-arg element.;public void parseConstructorArgElement(Element ele, BeanDefinition bd) {_		String indexAttr = ele.getAttribute(INDEX_ATTRIBUTE)__		String typeAttr = ele.getAttribute(TYPE_ATTRIBUTE)__		String nameAttr = ele.getAttribute(NAME_ATTRIBUTE)__		if (StringUtils.hasLength(indexAttr)) {_			try {_				int index = Integer.parseInt(indexAttr)__				if (index < 0) {_					error("'index' cannot be lower than 0", ele)__				}_				else {_					try {_						this.parseState.push(new ConstructorArgumentEntry(index))__						Object value = parsePropertyValue(ele, bd, null)__						ConstructorArgumentValues.ValueHolder valueHolder = new ConstructorArgumentValues.ValueHolder(value)__						if (StringUtils.hasLength(typeAttr)) {_							valueHolder.setType(typeAttr)__						}_						if (StringUtils.hasLength(nameAttr)) {_							valueHolder.setName(nameAttr)__						}_						valueHolder.setSource(extractSource(ele))__						if (bd.getConstructorArgumentValues().hasIndexedArgumentValue(index)) {_							error("Ambiguous constructor-arg entries for index " + index, ele)__						}_						else {_							bd.getConstructorArgumentValues().addIndexedArgumentValue(index, valueHolder)__						}_					}_					finally {_						this.parseState.pop()__					}_				}_			}_			catch (NumberFormatException ex) {_				error("Attribute 'index' of tag 'constructor-arg' must be an integer", ele)__			}_		}_		else {_			try {_				this.parseState.push(new ConstructorArgumentEntry())__				Object value = parsePropertyValue(ele, bd, null)__				ConstructorArgumentValues.ValueHolder valueHolder = new ConstructorArgumentValues.ValueHolder(value)__				if (StringUtils.hasLength(typeAttr)) {_					valueHolder.setType(typeAttr)__				}_				if (StringUtils.hasLength(nameAttr)) {_					valueHolder.setName(nameAttr)__				}_				valueHolder.setSource(extractSource(ele))__				bd.getConstructorArgumentValues().addGenericArgumentValue(valueHolder)__			}_			finally {_				this.parseState.pop()__			}_		}_	};parse,a,constructor,arg,element;public,void,parse,constructor,arg,element,element,ele,bean,definition,bd,string,index,attr,ele,get,attribute,string,type,attr,ele,get,attribute,string,name,attr,ele,get,attribute,if,string,utils,has,length,index,attr,try,int,index,integer,parse,int,index,attr,if,index,0,error,index,cannot,be,lower,than,0,ele,else,try,this,parse,state,push,new,constructor,argument,entry,index,object,value,parse,property,value,ele,bd,null,constructor,argument,values,value,holder,value,holder,new,constructor,argument,values,value,holder,value,if,string,utils,has,length,type,attr,value,holder,set,type,type,attr,if,string,utils,has,length,name,attr,value,holder,set,name,name,attr,value,holder,set,source,extract,source,ele,if,bd,get,constructor,argument,values,has,indexed,argument,value,index,error,ambiguous,constructor,arg,entries,for,index,index,ele,else,bd,get,constructor,argument,values,add,indexed,argument,value,index,value,holder,finally,this,parse,state,pop,catch,number,format,exception,ex,error,attribute,index,of,tag,constructor,arg,must,be,an,integer,ele,else,try,this,parse,state,push,new,constructor,argument,entry,object,value,parse,property,value,ele,bd,null,constructor,argument,values,value,holder,value,holder,new,constructor,argument,values,value,holder,value,if,string,utils,has,length,type,attr,value,holder,set,type,type,attr,if,string,utils,has,length,name,attr,value,holder,set,name,name,attr,value,holder,set,source,extract,source,ele,bd,get,constructor,argument,values,add,generic,argument,value,value,holder,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parseConstructorArgElement(Element ele, BeanDefinition bd);1467726769;Parse a constructor-arg element.;public void parseConstructorArgElement(Element ele, BeanDefinition bd) {_		String indexAttr = ele.getAttribute(INDEX_ATTRIBUTE)__		String typeAttr = ele.getAttribute(TYPE_ATTRIBUTE)__		String nameAttr = ele.getAttribute(NAME_ATTRIBUTE)__		if (StringUtils.hasLength(indexAttr)) {_			try {_				int index = Integer.parseInt(indexAttr)__				if (index < 0) {_					error("'index' cannot be lower than 0", ele)__				}_				else {_					try {_						this.parseState.push(new ConstructorArgumentEntry(index))__						Object value = parsePropertyValue(ele, bd, null)__						ConstructorArgumentValues.ValueHolder valueHolder = new ConstructorArgumentValues.ValueHolder(value)__						if (StringUtils.hasLength(typeAttr)) {_							valueHolder.setType(typeAttr)__						}_						if (StringUtils.hasLength(nameAttr)) {_							valueHolder.setName(nameAttr)__						}_						valueHolder.setSource(extractSource(ele))__						if (bd.getConstructorArgumentValues().hasIndexedArgumentValue(index)) {_							error("Ambiguous constructor-arg entries for index " + index, ele)__						}_						else {_							bd.getConstructorArgumentValues().addIndexedArgumentValue(index, valueHolder)__						}_					}_					finally {_						this.parseState.pop()__					}_				}_			}_			catch (NumberFormatException ex) {_				error("Attribute 'index' of tag 'constructor-arg' must be an integer", ele)__			}_		}_		else {_			try {_				this.parseState.push(new ConstructorArgumentEntry())__				Object value = parsePropertyValue(ele, bd, null)__				ConstructorArgumentValues.ValueHolder valueHolder = new ConstructorArgumentValues.ValueHolder(value)__				if (StringUtils.hasLength(typeAttr)) {_					valueHolder.setType(typeAttr)__				}_				if (StringUtils.hasLength(nameAttr)) {_					valueHolder.setName(nameAttr)__				}_				valueHolder.setSource(extractSource(ele))__				bd.getConstructorArgumentValues().addGenericArgumentValue(valueHolder)__			}_			finally {_				this.parseState.pop()__			}_		}_	};parse,a,constructor,arg,element;public,void,parse,constructor,arg,element,element,ele,bean,definition,bd,string,index,attr,ele,get,attribute,string,type,attr,ele,get,attribute,string,name,attr,ele,get,attribute,if,string,utils,has,length,index,attr,try,int,index,integer,parse,int,index,attr,if,index,0,error,index,cannot,be,lower,than,0,ele,else,try,this,parse,state,push,new,constructor,argument,entry,index,object,value,parse,property,value,ele,bd,null,constructor,argument,values,value,holder,value,holder,new,constructor,argument,values,value,holder,value,if,string,utils,has,length,type,attr,value,holder,set,type,type,attr,if,string,utils,has,length,name,attr,value,holder,set,name,name,attr,value,holder,set,source,extract,source,ele,if,bd,get,constructor,argument,values,has,indexed,argument,value,index,error,ambiguous,constructor,arg,entries,for,index,index,ele,else,bd,get,constructor,argument,values,add,indexed,argument,value,index,value,holder,finally,this,parse,state,pop,catch,number,format,exception,ex,error,attribute,index,of,tag,constructor,arg,must,be,an,integer,ele,else,try,this,parse,state,push,new,constructor,argument,entry,object,value,parse,property,value,ele,bd,null,constructor,argument,values,value,holder,value,holder,new,constructor,argument,values,value,holder,value,if,string,utils,has,length,type,attr,value,holder,set,type,type,attr,if,string,utils,has,length,name,attr,value,holder,set,name,name,attr,value,holder,set,source,extract,source,ele,bd,get,constructor,argument,values,add,generic,argument,value,value,holder,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parseConstructorArgElement(Element ele, BeanDefinition bd);1467730834;Parse a constructor-arg element.;public void parseConstructorArgElement(Element ele, BeanDefinition bd) {_		String indexAttr = ele.getAttribute(INDEX_ATTRIBUTE)__		String typeAttr = ele.getAttribute(TYPE_ATTRIBUTE)__		String nameAttr = ele.getAttribute(NAME_ATTRIBUTE)__		if (StringUtils.hasLength(indexAttr)) {_			try {_				int index = Integer.parseInt(indexAttr)__				if (index < 0) {_					error("'index' cannot be lower than 0", ele)__				}_				else {_					try {_						this.parseState.push(new ConstructorArgumentEntry(index))__						Object value = parsePropertyValue(ele, bd, null)__						ConstructorArgumentValues.ValueHolder valueHolder = new ConstructorArgumentValues.ValueHolder(value)__						if (StringUtils.hasLength(typeAttr)) {_							valueHolder.setType(typeAttr)__						}_						if (StringUtils.hasLength(nameAttr)) {_							valueHolder.setName(nameAttr)__						}_						valueHolder.setSource(extractSource(ele))__						if (bd.getConstructorArgumentValues().hasIndexedArgumentValue(index)) {_							error("Ambiguous constructor-arg entries for index " + index, ele)__						}_						else {_							bd.getConstructorArgumentValues().addIndexedArgumentValue(index, valueHolder)__						}_					}_					finally {_						this.parseState.pop()__					}_				}_			}_			catch (NumberFormatException ex) {_				error("Attribute 'index' of tag 'constructor-arg' must be an integer", ele)__			}_		}_		else {_			try {_				this.parseState.push(new ConstructorArgumentEntry())__				Object value = parsePropertyValue(ele, bd, null)__				ConstructorArgumentValues.ValueHolder valueHolder = new ConstructorArgumentValues.ValueHolder(value)__				if (StringUtils.hasLength(typeAttr)) {_					valueHolder.setType(typeAttr)__				}_				if (StringUtils.hasLength(nameAttr)) {_					valueHolder.setName(nameAttr)__				}_				valueHolder.setSource(extractSource(ele))__				bd.getConstructorArgumentValues().addGenericArgumentValue(valueHolder)__			}_			finally {_				this.parseState.pop()__			}_		}_	};parse,a,constructor,arg,element;public,void,parse,constructor,arg,element,element,ele,bean,definition,bd,string,index,attr,ele,get,attribute,string,type,attr,ele,get,attribute,string,name,attr,ele,get,attribute,if,string,utils,has,length,index,attr,try,int,index,integer,parse,int,index,attr,if,index,0,error,index,cannot,be,lower,than,0,ele,else,try,this,parse,state,push,new,constructor,argument,entry,index,object,value,parse,property,value,ele,bd,null,constructor,argument,values,value,holder,value,holder,new,constructor,argument,values,value,holder,value,if,string,utils,has,length,type,attr,value,holder,set,type,type,attr,if,string,utils,has,length,name,attr,value,holder,set,name,name,attr,value,holder,set,source,extract,source,ele,if,bd,get,constructor,argument,values,has,indexed,argument,value,index,error,ambiguous,constructor,arg,entries,for,index,index,ele,else,bd,get,constructor,argument,values,add,indexed,argument,value,index,value,holder,finally,this,parse,state,pop,catch,number,format,exception,ex,error,attribute,index,of,tag,constructor,arg,must,be,an,integer,ele,else,try,this,parse,state,push,new,constructor,argument,entry,object,value,parse,property,value,ele,bd,null,constructor,argument,values,value,holder,value,holder,new,constructor,argument,values,value,holder,value,if,string,utils,has,length,type,attr,value,holder,set,type,type,attr,if,string,utils,has,length,name,attr,value,holder,set,name,name,attr,value,holder,set,source,extract,source,ele,bd,get,constructor,argument,values,add,generic,argument,value,value,holder,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parseConstructorArgElement(Element ele, BeanDefinition bd);1467744603;Parse a constructor-arg element.;public void parseConstructorArgElement(Element ele, BeanDefinition bd) {_		String indexAttr = ele.getAttribute(INDEX_ATTRIBUTE)__		String typeAttr = ele.getAttribute(TYPE_ATTRIBUTE)__		String nameAttr = ele.getAttribute(NAME_ATTRIBUTE)__		if (StringUtils.hasLength(indexAttr)) {_			try {_				int index = Integer.parseInt(indexAttr)__				if (index < 0) {_					error("'index' cannot be lower than 0", ele)__				}_				else {_					try {_						this.parseState.push(new ConstructorArgumentEntry(index))__						Object value = parsePropertyValue(ele, bd, null)__						ConstructorArgumentValues.ValueHolder valueHolder = new ConstructorArgumentValues.ValueHolder(value)__						if (StringUtils.hasLength(typeAttr)) {_							valueHolder.setType(typeAttr)__						}_						if (StringUtils.hasLength(nameAttr)) {_							valueHolder.setName(nameAttr)__						}_						valueHolder.setSource(extractSource(ele))__						if (bd.getConstructorArgumentValues().hasIndexedArgumentValue(index)) {_							error("Ambiguous constructor-arg entries for index " + index, ele)__						}_						else {_							bd.getConstructorArgumentValues().addIndexedArgumentValue(index, valueHolder)__						}_					}_					finally {_						this.parseState.pop()__					}_				}_			}_			catch (NumberFormatException ex) {_				error("Attribute 'index' of tag 'constructor-arg' must be an integer", ele)__			}_		}_		else {_			try {_				this.parseState.push(new ConstructorArgumentEntry())__				Object value = parsePropertyValue(ele, bd, null)__				ConstructorArgumentValues.ValueHolder valueHolder = new ConstructorArgumentValues.ValueHolder(value)__				if (StringUtils.hasLength(typeAttr)) {_					valueHolder.setType(typeAttr)__				}_				if (StringUtils.hasLength(nameAttr)) {_					valueHolder.setName(nameAttr)__				}_				valueHolder.setSource(extractSource(ele))__				bd.getConstructorArgumentValues().addGenericArgumentValue(valueHolder)__			}_			finally {_				this.parseState.pop()__			}_		}_	};parse,a,constructor,arg,element;public,void,parse,constructor,arg,element,element,ele,bean,definition,bd,string,index,attr,ele,get,attribute,string,type,attr,ele,get,attribute,string,name,attr,ele,get,attribute,if,string,utils,has,length,index,attr,try,int,index,integer,parse,int,index,attr,if,index,0,error,index,cannot,be,lower,than,0,ele,else,try,this,parse,state,push,new,constructor,argument,entry,index,object,value,parse,property,value,ele,bd,null,constructor,argument,values,value,holder,value,holder,new,constructor,argument,values,value,holder,value,if,string,utils,has,length,type,attr,value,holder,set,type,type,attr,if,string,utils,has,length,name,attr,value,holder,set,name,name,attr,value,holder,set,source,extract,source,ele,if,bd,get,constructor,argument,values,has,indexed,argument,value,index,error,ambiguous,constructor,arg,entries,for,index,index,ele,else,bd,get,constructor,argument,values,add,indexed,argument,value,index,value,holder,finally,this,parse,state,pop,catch,number,format,exception,ex,error,attribute,index,of,tag,constructor,arg,must,be,an,integer,ele,else,try,this,parse,state,push,new,constructor,argument,entry,object,value,parse,property,value,ele,bd,null,constructor,argument,values,value,holder,value,holder,new,constructor,argument,values,value,holder,value,if,string,utils,has,length,type,attr,value,holder,set,type,type,attr,if,string,utils,has,length,name,attr,value,holder,set,name,name,attr,value,holder,set,source,extract,source,ele,bd,get,constructor,argument,values,add,generic,argument,value,value,holder,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parseConstructorArgElement(Element ele, BeanDefinition bd);1487245676;Parse a constructor-arg element.;public void parseConstructorArgElement(Element ele, BeanDefinition bd) {_		String indexAttr = ele.getAttribute(INDEX_ATTRIBUTE)__		String typeAttr = ele.getAttribute(TYPE_ATTRIBUTE)__		String nameAttr = ele.getAttribute(NAME_ATTRIBUTE)__		if (StringUtils.hasLength(indexAttr)) {_			try {_				int index = Integer.parseInt(indexAttr)__				if (index < 0) {_					error("'index' cannot be lower than 0", ele)__				}_				else {_					try {_						this.parseState.push(new ConstructorArgumentEntry(index))__						Object value = parsePropertyValue(ele, bd, null)__						ConstructorArgumentValues.ValueHolder valueHolder = new ConstructorArgumentValues.ValueHolder(value)__						if (StringUtils.hasLength(typeAttr)) {_							valueHolder.setType(typeAttr)__						}_						if (StringUtils.hasLength(nameAttr)) {_							valueHolder.setName(nameAttr)__						}_						valueHolder.setSource(extractSource(ele))__						if (bd.getConstructorArgumentValues().hasIndexedArgumentValue(index)) {_							error("Ambiguous constructor-arg entries for index " + index, ele)__						}_						else {_							bd.getConstructorArgumentValues().addIndexedArgumentValue(index, valueHolder)__						}_					}_					finally {_						this.parseState.pop()__					}_				}_			}_			catch (NumberFormatException ex) {_				error("Attribute 'index' of tag 'constructor-arg' must be an integer", ele)__			}_		}_		else {_			try {_				this.parseState.push(new ConstructorArgumentEntry())__				Object value = parsePropertyValue(ele, bd, null)__				ConstructorArgumentValues.ValueHolder valueHolder = new ConstructorArgumentValues.ValueHolder(value)__				if (StringUtils.hasLength(typeAttr)) {_					valueHolder.setType(typeAttr)__				}_				if (StringUtils.hasLength(nameAttr)) {_					valueHolder.setName(nameAttr)__				}_				valueHolder.setSource(extractSource(ele))__				bd.getConstructorArgumentValues().addGenericArgumentValue(valueHolder)__			}_			finally {_				this.parseState.pop()__			}_		}_	};parse,a,constructor,arg,element;public,void,parse,constructor,arg,element,element,ele,bean,definition,bd,string,index,attr,ele,get,attribute,string,type,attr,ele,get,attribute,string,name,attr,ele,get,attribute,if,string,utils,has,length,index,attr,try,int,index,integer,parse,int,index,attr,if,index,0,error,index,cannot,be,lower,than,0,ele,else,try,this,parse,state,push,new,constructor,argument,entry,index,object,value,parse,property,value,ele,bd,null,constructor,argument,values,value,holder,value,holder,new,constructor,argument,values,value,holder,value,if,string,utils,has,length,type,attr,value,holder,set,type,type,attr,if,string,utils,has,length,name,attr,value,holder,set,name,name,attr,value,holder,set,source,extract,source,ele,if,bd,get,constructor,argument,values,has,indexed,argument,value,index,error,ambiguous,constructor,arg,entries,for,index,index,ele,else,bd,get,constructor,argument,values,add,indexed,argument,value,index,value,holder,finally,this,parse,state,pop,catch,number,format,exception,ex,error,attribute,index,of,tag,constructor,arg,must,be,an,integer,ele,else,try,this,parse,state,push,new,constructor,argument,entry,object,value,parse,property,value,ele,bd,null,constructor,argument,values,value,holder,value,holder,new,constructor,argument,values,value,holder,value,if,string,utils,has,length,type,attr,value,holder,set,type,type,attr,if,string,utils,has,length,name,attr,value,holder,set,name,name,attr,value,holder,set,source,extract,source,ele,bd,get,constructor,argument,values,add,generic,argument,value,value,holder,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parseConstructorArgElement(Element ele, BeanDefinition bd);1487255851;Parse a constructor-arg element.;public void parseConstructorArgElement(Element ele, BeanDefinition bd) {_		String indexAttr = ele.getAttribute(INDEX_ATTRIBUTE)__		String typeAttr = ele.getAttribute(TYPE_ATTRIBUTE)__		String nameAttr = ele.getAttribute(NAME_ATTRIBUTE)__		if (StringUtils.hasLength(indexAttr)) {_			try {_				int index = Integer.parseInt(indexAttr)__				if (index < 0) {_					error("'index' cannot be lower than 0", ele)__				}_				else {_					try {_						this.parseState.push(new ConstructorArgumentEntry(index))__						Object value = parsePropertyValue(ele, bd, null)__						ConstructorArgumentValues.ValueHolder valueHolder = new ConstructorArgumentValues.ValueHolder(value)__						if (StringUtils.hasLength(typeAttr)) {_							valueHolder.setType(typeAttr)__						}_						if (StringUtils.hasLength(nameAttr)) {_							valueHolder.setName(nameAttr)__						}_						valueHolder.setSource(extractSource(ele))__						if (bd.getConstructorArgumentValues().hasIndexedArgumentValue(index)) {_							error("Ambiguous constructor-arg entries for index " + index, ele)__						}_						else {_							bd.getConstructorArgumentValues().addIndexedArgumentValue(index, valueHolder)__						}_					}_					finally {_						this.parseState.pop()__					}_				}_			}_			catch (NumberFormatException ex) {_				error("Attribute 'index' of tag 'constructor-arg' must be an integer", ele)__			}_		}_		else {_			try {_				this.parseState.push(new ConstructorArgumentEntry())__				Object value = parsePropertyValue(ele, bd, null)__				ConstructorArgumentValues.ValueHolder valueHolder = new ConstructorArgumentValues.ValueHolder(value)__				if (StringUtils.hasLength(typeAttr)) {_					valueHolder.setType(typeAttr)__				}_				if (StringUtils.hasLength(nameAttr)) {_					valueHolder.setName(nameAttr)__				}_				valueHolder.setSource(extractSource(ele))__				bd.getConstructorArgumentValues().addGenericArgumentValue(valueHolder)__			}_			finally {_				this.parseState.pop()__			}_		}_	};parse,a,constructor,arg,element;public,void,parse,constructor,arg,element,element,ele,bean,definition,bd,string,index,attr,ele,get,attribute,string,type,attr,ele,get,attribute,string,name,attr,ele,get,attribute,if,string,utils,has,length,index,attr,try,int,index,integer,parse,int,index,attr,if,index,0,error,index,cannot,be,lower,than,0,ele,else,try,this,parse,state,push,new,constructor,argument,entry,index,object,value,parse,property,value,ele,bd,null,constructor,argument,values,value,holder,value,holder,new,constructor,argument,values,value,holder,value,if,string,utils,has,length,type,attr,value,holder,set,type,type,attr,if,string,utils,has,length,name,attr,value,holder,set,name,name,attr,value,holder,set,source,extract,source,ele,if,bd,get,constructor,argument,values,has,indexed,argument,value,index,error,ambiguous,constructor,arg,entries,for,index,index,ele,else,bd,get,constructor,argument,values,add,indexed,argument,value,index,value,holder,finally,this,parse,state,pop,catch,number,format,exception,ex,error,attribute,index,of,tag,constructor,arg,must,be,an,integer,ele,else,try,this,parse,state,push,new,constructor,argument,entry,object,value,parse,property,value,ele,bd,null,constructor,argument,values,value,holder,value,holder,new,constructor,argument,values,value,holder,value,if,string,utils,has,length,type,attr,value,holder,set,type,type,attr,if,string,utils,has,length,name,attr,value,holder,set,name,name,attr,value,holder,set,source,extract,source,ele,bd,get,constructor,argument,values,add,generic,argument,value,value,holder,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parseConstructorArgElement(Element ele, BeanDefinition bd);1494586217;Parse a constructor-arg element.;public void parseConstructorArgElement(Element ele, BeanDefinition bd) {_		String indexAttr = ele.getAttribute(INDEX_ATTRIBUTE)__		String typeAttr = ele.getAttribute(TYPE_ATTRIBUTE)__		String nameAttr = ele.getAttribute(NAME_ATTRIBUTE)__		if (StringUtils.hasLength(indexAttr)) {_			try {_				int index = Integer.parseInt(indexAttr)__				if (index < 0) {_					error("'index' cannot be lower than 0", ele)__				}_				else {_					try {_						this.parseState.push(new ConstructorArgumentEntry(index))__						Object value = parsePropertyValue(ele, bd, null)__						ConstructorArgumentValues.ValueHolder valueHolder = new ConstructorArgumentValues.ValueHolder(value)__						if (StringUtils.hasLength(typeAttr)) {_							valueHolder.setType(typeAttr)__						}_						if (StringUtils.hasLength(nameAttr)) {_							valueHolder.setName(nameAttr)__						}_						valueHolder.setSource(extractSource(ele))__						if (bd.getConstructorArgumentValues().hasIndexedArgumentValue(index)) {_							error("Ambiguous constructor-arg entries for index " + index, ele)__						}_						else {_							bd.getConstructorArgumentValues().addIndexedArgumentValue(index, valueHolder)__						}_					}_					finally {_						this.parseState.pop()__					}_				}_			}_			catch (NumberFormatException ex) {_				error("Attribute 'index' of tag 'constructor-arg' must be an integer", ele)__			}_		}_		else {_			try {_				this.parseState.push(new ConstructorArgumentEntry())__				Object value = parsePropertyValue(ele, bd, null)__				ConstructorArgumentValues.ValueHolder valueHolder = new ConstructorArgumentValues.ValueHolder(value)__				if (StringUtils.hasLength(typeAttr)) {_					valueHolder.setType(typeAttr)__				}_				if (StringUtils.hasLength(nameAttr)) {_					valueHolder.setName(nameAttr)__				}_				valueHolder.setSource(extractSource(ele))__				bd.getConstructorArgumentValues().addGenericArgumentValue(valueHolder)__			}_			finally {_				this.parseState.pop()__			}_		}_	};parse,a,constructor,arg,element;public,void,parse,constructor,arg,element,element,ele,bean,definition,bd,string,index,attr,ele,get,attribute,string,type,attr,ele,get,attribute,string,name,attr,ele,get,attribute,if,string,utils,has,length,index,attr,try,int,index,integer,parse,int,index,attr,if,index,0,error,index,cannot,be,lower,than,0,ele,else,try,this,parse,state,push,new,constructor,argument,entry,index,object,value,parse,property,value,ele,bd,null,constructor,argument,values,value,holder,value,holder,new,constructor,argument,values,value,holder,value,if,string,utils,has,length,type,attr,value,holder,set,type,type,attr,if,string,utils,has,length,name,attr,value,holder,set,name,name,attr,value,holder,set,source,extract,source,ele,if,bd,get,constructor,argument,values,has,indexed,argument,value,index,error,ambiguous,constructor,arg,entries,for,index,index,ele,else,bd,get,constructor,argument,values,add,indexed,argument,value,index,value,holder,finally,this,parse,state,pop,catch,number,format,exception,ex,error,attribute,index,of,tag,constructor,arg,must,be,an,integer,ele,else,try,this,parse,state,push,new,constructor,argument,entry,object,value,parse,property,value,ele,bd,null,constructor,argument,values,value,holder,value,holder,new,constructor,argument,values,value,holder,value,if,string,utils,has,length,type,attr,value,holder,set,type,type,attr,if,string,utils,has,length,name,attr,value,holder,set,name,name,attr,value,holder,set,source,extract,source,ele,bd,get,constructor,argument,values,add,generic,argument,value,value,holder,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parseConstructorArgElement(Element ele, BeanDefinition bd);1495868221;Parse a constructor-arg element.;public void parseConstructorArgElement(Element ele, BeanDefinition bd) {_		String indexAttr = ele.getAttribute(INDEX_ATTRIBUTE)__		String typeAttr = ele.getAttribute(TYPE_ATTRIBUTE)__		String nameAttr = ele.getAttribute(NAME_ATTRIBUTE)__		if (StringUtils.hasLength(indexAttr)) {_			try {_				int index = Integer.parseInt(indexAttr)__				if (index < 0) {_					error("'index' cannot be lower than 0", ele)__				}_				else {_					try {_						this.parseState.push(new ConstructorArgumentEntry(index))__						Object value = parsePropertyValue(ele, bd, null)__						ConstructorArgumentValues.ValueHolder valueHolder = new ConstructorArgumentValues.ValueHolder(value)__						if (StringUtils.hasLength(typeAttr)) {_							valueHolder.setType(typeAttr)__						}_						if (StringUtils.hasLength(nameAttr)) {_							valueHolder.setName(nameAttr)__						}_						valueHolder.setSource(extractSource(ele))__						if (bd.getConstructorArgumentValues().hasIndexedArgumentValue(index)) {_							error("Ambiguous constructor-arg entries for index " + index, ele)__						}_						else {_							bd.getConstructorArgumentValues().addIndexedArgumentValue(index, valueHolder)__						}_					}_					finally {_						this.parseState.pop()__					}_				}_			}_			catch (NumberFormatException ex) {_				error("Attribute 'index' of tag 'constructor-arg' must be an integer", ele)__			}_		}_		else {_			try {_				this.parseState.push(new ConstructorArgumentEntry())__				Object value = parsePropertyValue(ele, bd, null)__				ConstructorArgumentValues.ValueHolder valueHolder = new ConstructorArgumentValues.ValueHolder(value)__				if (StringUtils.hasLength(typeAttr)) {_					valueHolder.setType(typeAttr)__				}_				if (StringUtils.hasLength(nameAttr)) {_					valueHolder.setName(nameAttr)__				}_				valueHolder.setSource(extractSource(ele))__				bd.getConstructorArgumentValues().addGenericArgumentValue(valueHolder)__			}_			finally {_				this.parseState.pop()__			}_		}_	};parse,a,constructor,arg,element;public,void,parse,constructor,arg,element,element,ele,bean,definition,bd,string,index,attr,ele,get,attribute,string,type,attr,ele,get,attribute,string,name,attr,ele,get,attribute,if,string,utils,has,length,index,attr,try,int,index,integer,parse,int,index,attr,if,index,0,error,index,cannot,be,lower,than,0,ele,else,try,this,parse,state,push,new,constructor,argument,entry,index,object,value,parse,property,value,ele,bd,null,constructor,argument,values,value,holder,value,holder,new,constructor,argument,values,value,holder,value,if,string,utils,has,length,type,attr,value,holder,set,type,type,attr,if,string,utils,has,length,name,attr,value,holder,set,name,name,attr,value,holder,set,source,extract,source,ele,if,bd,get,constructor,argument,values,has,indexed,argument,value,index,error,ambiguous,constructor,arg,entries,for,index,index,ele,else,bd,get,constructor,argument,values,add,indexed,argument,value,index,value,holder,finally,this,parse,state,pop,catch,number,format,exception,ex,error,attribute,index,of,tag,constructor,arg,must,be,an,integer,ele,else,try,this,parse,state,push,new,constructor,argument,entry,object,value,parse,property,value,ele,bd,null,constructor,argument,values,value,holder,value,holder,new,constructor,argument,values,value,holder,value,if,string,utils,has,length,type,attr,value,holder,set,type,type,attr,if,string,utils,has,length,name,attr,value,holder,set,name,name,attr,value,holder,set,source,extract,source,ele,bd,get,constructor,argument,values,add,generic,argument,value,value,holder,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parseConstructorArgElement(Element ele, BeanDefinition bd);1496259743;Parse a constructor-arg element.;public void parseConstructorArgElement(Element ele, BeanDefinition bd) {_		String indexAttr = ele.getAttribute(INDEX_ATTRIBUTE)__		String typeAttr = ele.getAttribute(TYPE_ATTRIBUTE)__		String nameAttr = ele.getAttribute(NAME_ATTRIBUTE)__		if (StringUtils.hasLength(indexAttr)) {_			try {_				int index = Integer.parseInt(indexAttr)__				if (index < 0) {_					error("'index' cannot be lower than 0", ele)__				}_				else {_					try {_						this.parseState.push(new ConstructorArgumentEntry(index))__						Object value = parsePropertyValue(ele, bd, null)__						ConstructorArgumentValues.ValueHolder valueHolder = new ConstructorArgumentValues.ValueHolder(value)__						if (StringUtils.hasLength(typeAttr)) {_							valueHolder.setType(typeAttr)__						}_						if (StringUtils.hasLength(nameAttr)) {_							valueHolder.setName(nameAttr)__						}_						valueHolder.setSource(extractSource(ele))__						if (bd.getConstructorArgumentValues().hasIndexedArgumentValue(index)) {_							error("Ambiguous constructor-arg entries for index " + index, ele)__						}_						else {_							bd.getConstructorArgumentValues().addIndexedArgumentValue(index, valueHolder)__						}_					}_					finally {_						this.parseState.pop()__					}_				}_			}_			catch (NumberFormatException ex) {_				error("Attribute 'index' of tag 'constructor-arg' must be an integer", ele)__			}_		}_		else {_			try {_				this.parseState.push(new ConstructorArgumentEntry())__				Object value = parsePropertyValue(ele, bd, null)__				ConstructorArgumentValues.ValueHolder valueHolder = new ConstructorArgumentValues.ValueHolder(value)__				if (StringUtils.hasLength(typeAttr)) {_					valueHolder.setType(typeAttr)__				}_				if (StringUtils.hasLength(nameAttr)) {_					valueHolder.setName(nameAttr)__				}_				valueHolder.setSource(extractSource(ele))__				bd.getConstructorArgumentValues().addGenericArgumentValue(valueHolder)__			}_			finally {_				this.parseState.pop()__			}_		}_	};parse,a,constructor,arg,element;public,void,parse,constructor,arg,element,element,ele,bean,definition,bd,string,index,attr,ele,get,attribute,string,type,attr,ele,get,attribute,string,name,attr,ele,get,attribute,if,string,utils,has,length,index,attr,try,int,index,integer,parse,int,index,attr,if,index,0,error,index,cannot,be,lower,than,0,ele,else,try,this,parse,state,push,new,constructor,argument,entry,index,object,value,parse,property,value,ele,bd,null,constructor,argument,values,value,holder,value,holder,new,constructor,argument,values,value,holder,value,if,string,utils,has,length,type,attr,value,holder,set,type,type,attr,if,string,utils,has,length,name,attr,value,holder,set,name,name,attr,value,holder,set,source,extract,source,ele,if,bd,get,constructor,argument,values,has,indexed,argument,value,index,error,ambiguous,constructor,arg,entries,for,index,index,ele,else,bd,get,constructor,argument,values,add,indexed,argument,value,index,value,holder,finally,this,parse,state,pop,catch,number,format,exception,ex,error,attribute,index,of,tag,constructor,arg,must,be,an,integer,ele,else,try,this,parse,state,push,new,constructor,argument,entry,object,value,parse,property,value,ele,bd,null,constructor,argument,values,value,holder,value,holder,new,constructor,argument,values,value,holder,value,if,string,utils,has,length,type,attr,value,holder,set,type,type,attr,if,string,utils,has,length,name,attr,value,holder,set,name,name,attr,value,holder,set,source,extract,source,ele,bd,get,constructor,argument,values,add,generic,argument,value,value,holder,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parseConstructorArgElement(Element ele, BeanDefinition bd);1496837955;Parse a constructor-arg element.;public void parseConstructorArgElement(Element ele, BeanDefinition bd) {_		String indexAttr = ele.getAttribute(INDEX_ATTRIBUTE)__		String typeAttr = ele.getAttribute(TYPE_ATTRIBUTE)__		String nameAttr = ele.getAttribute(NAME_ATTRIBUTE)__		if (StringUtils.hasLength(indexAttr)) {_			try {_				int index = Integer.parseInt(indexAttr)__				if (index < 0) {_					error("'index' cannot be lower than 0", ele)__				}_				else {_					try {_						this.parseState.push(new ConstructorArgumentEntry(index))__						Object value = parsePropertyValue(ele, bd, null)__						ConstructorArgumentValues.ValueHolder valueHolder = new ConstructorArgumentValues.ValueHolder(value)__						if (StringUtils.hasLength(typeAttr)) {_							valueHolder.setType(typeAttr)__						}_						if (StringUtils.hasLength(nameAttr)) {_							valueHolder.setName(nameAttr)__						}_						valueHolder.setSource(extractSource(ele))__						if (bd.getConstructorArgumentValues().hasIndexedArgumentValue(index)) {_							error("Ambiguous constructor-arg entries for index " + index, ele)__						}_						else {_							bd.getConstructorArgumentValues().addIndexedArgumentValue(index, valueHolder)__						}_					}_					finally {_						this.parseState.pop()__					}_				}_			}_			catch (NumberFormatException ex) {_				error("Attribute 'index' of tag 'constructor-arg' must be an integer", ele)__			}_		}_		else {_			try {_				this.parseState.push(new ConstructorArgumentEntry())__				Object value = parsePropertyValue(ele, bd, null)__				ConstructorArgumentValues.ValueHolder valueHolder = new ConstructorArgumentValues.ValueHolder(value)__				if (StringUtils.hasLength(typeAttr)) {_					valueHolder.setType(typeAttr)__				}_				if (StringUtils.hasLength(nameAttr)) {_					valueHolder.setName(nameAttr)__				}_				valueHolder.setSource(extractSource(ele))__				bd.getConstructorArgumentValues().addGenericArgumentValue(valueHolder)__			}_			finally {_				this.parseState.pop()__			}_		}_	};parse,a,constructor,arg,element;public,void,parse,constructor,arg,element,element,ele,bean,definition,bd,string,index,attr,ele,get,attribute,string,type,attr,ele,get,attribute,string,name,attr,ele,get,attribute,if,string,utils,has,length,index,attr,try,int,index,integer,parse,int,index,attr,if,index,0,error,index,cannot,be,lower,than,0,ele,else,try,this,parse,state,push,new,constructor,argument,entry,index,object,value,parse,property,value,ele,bd,null,constructor,argument,values,value,holder,value,holder,new,constructor,argument,values,value,holder,value,if,string,utils,has,length,type,attr,value,holder,set,type,type,attr,if,string,utils,has,length,name,attr,value,holder,set,name,name,attr,value,holder,set,source,extract,source,ele,if,bd,get,constructor,argument,values,has,indexed,argument,value,index,error,ambiguous,constructor,arg,entries,for,index,index,ele,else,bd,get,constructor,argument,values,add,indexed,argument,value,index,value,holder,finally,this,parse,state,pop,catch,number,format,exception,ex,error,attribute,index,of,tag,constructor,arg,must,be,an,integer,ele,else,try,this,parse,state,push,new,constructor,argument,entry,object,value,parse,property,value,ele,bd,null,constructor,argument,values,value,holder,value,holder,new,constructor,argument,values,value,holder,value,if,string,utils,has,length,type,attr,value,holder,set,type,type,attr,if,string,utils,has,length,name,attr,value,holder,set,name,name,attr,value,holder,set,source,extract,source,ele,bd,get,constructor,argument,values,add,generic,argument,value,value,holder,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parseConstructorArgElement(Element ele, BeanDefinition bd);1503008029;Parse a constructor-arg element.;public void parseConstructorArgElement(Element ele, BeanDefinition bd) {_		String indexAttr = ele.getAttribute(INDEX_ATTRIBUTE)__		String typeAttr = ele.getAttribute(TYPE_ATTRIBUTE)__		String nameAttr = ele.getAttribute(NAME_ATTRIBUTE)__		if (StringUtils.hasLength(indexAttr)) {_			try {_				int index = Integer.parseInt(indexAttr)__				if (index < 0) {_					error("'index' cannot be lower than 0", ele)__				}_				else {_					try {_						this.parseState.push(new ConstructorArgumentEntry(index))__						Object value = parsePropertyValue(ele, bd, null)__						ConstructorArgumentValues.ValueHolder valueHolder = new ConstructorArgumentValues.ValueHolder(value)__						if (StringUtils.hasLength(typeAttr)) {_							valueHolder.setType(typeAttr)__						}_						if (StringUtils.hasLength(nameAttr)) {_							valueHolder.setName(nameAttr)__						}_						valueHolder.setSource(extractSource(ele))__						if (bd.getConstructorArgumentValues().hasIndexedArgumentValue(index)) {_							error("Ambiguous constructor-arg entries for index " + index, ele)__						}_						else {_							bd.getConstructorArgumentValues().addIndexedArgumentValue(index, valueHolder)__						}_					}_					finally {_						this.parseState.pop()__					}_				}_			}_			catch (NumberFormatException ex) {_				error("Attribute 'index' of tag 'constructor-arg' must be an integer", ele)__			}_		}_		else {_			try {_				this.parseState.push(new ConstructorArgumentEntry())__				Object value = parsePropertyValue(ele, bd, null)__				ConstructorArgumentValues.ValueHolder valueHolder = new ConstructorArgumentValues.ValueHolder(value)__				if (StringUtils.hasLength(typeAttr)) {_					valueHolder.setType(typeAttr)__				}_				if (StringUtils.hasLength(nameAttr)) {_					valueHolder.setName(nameAttr)__				}_				valueHolder.setSource(extractSource(ele))__				bd.getConstructorArgumentValues().addGenericArgumentValue(valueHolder)__			}_			finally {_				this.parseState.pop()__			}_		}_	};parse,a,constructor,arg,element;public,void,parse,constructor,arg,element,element,ele,bean,definition,bd,string,index,attr,ele,get,attribute,string,type,attr,ele,get,attribute,string,name,attr,ele,get,attribute,if,string,utils,has,length,index,attr,try,int,index,integer,parse,int,index,attr,if,index,0,error,index,cannot,be,lower,than,0,ele,else,try,this,parse,state,push,new,constructor,argument,entry,index,object,value,parse,property,value,ele,bd,null,constructor,argument,values,value,holder,value,holder,new,constructor,argument,values,value,holder,value,if,string,utils,has,length,type,attr,value,holder,set,type,type,attr,if,string,utils,has,length,name,attr,value,holder,set,name,name,attr,value,holder,set,source,extract,source,ele,if,bd,get,constructor,argument,values,has,indexed,argument,value,index,error,ambiguous,constructor,arg,entries,for,index,index,ele,else,bd,get,constructor,argument,values,add,indexed,argument,value,index,value,holder,finally,this,parse,state,pop,catch,number,format,exception,ex,error,attribute,index,of,tag,constructor,arg,must,be,an,integer,ele,else,try,this,parse,state,push,new,constructor,argument,entry,object,value,parse,property,value,ele,bd,null,constructor,argument,values,value,holder,value,holder,new,constructor,argument,values,value,holder,value,if,string,utils,has,length,type,attr,value,holder,set,type,type,attr,if,string,utils,has,length,name,attr,value,holder,set,name,name,attr,value,holder,set,source,extract,source,ele,bd,get,constructor,argument,values,add,generic,argument,value,value,holder,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parseConstructorArgElement(Element ele, BeanDefinition bd);1519513303;Parse a constructor-arg element.;public void parseConstructorArgElement(Element ele, BeanDefinition bd) {_		String indexAttr = ele.getAttribute(INDEX_ATTRIBUTE)__		String typeAttr = ele.getAttribute(TYPE_ATTRIBUTE)__		String nameAttr = ele.getAttribute(NAME_ATTRIBUTE)__		if (StringUtils.hasLength(indexAttr)) {_			try {_				int index = Integer.parseInt(indexAttr)__				if (index < 0) {_					error("'index' cannot be lower than 0", ele)__				}_				else {_					try {_						this.parseState.push(new ConstructorArgumentEntry(index))__						Object value = parsePropertyValue(ele, bd, null)__						ConstructorArgumentValues.ValueHolder valueHolder = new ConstructorArgumentValues.ValueHolder(value)__						if (StringUtils.hasLength(typeAttr)) {_							valueHolder.setType(typeAttr)__						}_						if (StringUtils.hasLength(nameAttr)) {_							valueHolder.setName(nameAttr)__						}_						valueHolder.setSource(extractSource(ele))__						if (bd.getConstructorArgumentValues().hasIndexedArgumentValue(index)) {_							error("Ambiguous constructor-arg entries for index " + index, ele)__						}_						else {_							bd.getConstructorArgumentValues().addIndexedArgumentValue(index, valueHolder)__						}_					}_					finally {_						this.parseState.pop()__					}_				}_			}_			catch (NumberFormatException ex) {_				error("Attribute 'index' of tag 'constructor-arg' must be an integer", ele)__			}_		}_		else {_			try {_				this.parseState.push(new ConstructorArgumentEntry())__				Object value = parsePropertyValue(ele, bd, null)__				ConstructorArgumentValues.ValueHolder valueHolder = new ConstructorArgumentValues.ValueHolder(value)__				if (StringUtils.hasLength(typeAttr)) {_					valueHolder.setType(typeAttr)__				}_				if (StringUtils.hasLength(nameAttr)) {_					valueHolder.setName(nameAttr)__				}_				valueHolder.setSource(extractSource(ele))__				bd.getConstructorArgumentValues().addGenericArgumentValue(valueHolder)__			}_			finally {_				this.parseState.pop()__			}_		}_	};parse,a,constructor,arg,element;public,void,parse,constructor,arg,element,element,ele,bean,definition,bd,string,index,attr,ele,get,attribute,string,type,attr,ele,get,attribute,string,name,attr,ele,get,attribute,if,string,utils,has,length,index,attr,try,int,index,integer,parse,int,index,attr,if,index,0,error,index,cannot,be,lower,than,0,ele,else,try,this,parse,state,push,new,constructor,argument,entry,index,object,value,parse,property,value,ele,bd,null,constructor,argument,values,value,holder,value,holder,new,constructor,argument,values,value,holder,value,if,string,utils,has,length,type,attr,value,holder,set,type,type,attr,if,string,utils,has,length,name,attr,value,holder,set,name,name,attr,value,holder,set,source,extract,source,ele,if,bd,get,constructor,argument,values,has,indexed,argument,value,index,error,ambiguous,constructor,arg,entries,for,index,index,ele,else,bd,get,constructor,argument,values,add,indexed,argument,value,index,value,holder,finally,this,parse,state,pop,catch,number,format,exception,ex,error,attribute,index,of,tag,constructor,arg,must,be,an,integer,ele,else,try,this,parse,state,push,new,constructor,argument,entry,object,value,parse,property,value,ele,bd,null,constructor,argument,values,value,holder,value,holder,new,constructor,argument,values,value,holder,value,if,string,utils,has,length,type,attr,value,holder,set,type,type,attr,if,string,utils,has,length,name,attr,value,holder,set,name,name,attr,value,holder,set,source,extract,source,ele,bd,get,constructor,argument,values,add,generic,argument,value,value,holder,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parseConstructorArgElement(Element ele, BeanDefinition bd);1530174524;Parse a constructor-arg element.;public void parseConstructorArgElement(Element ele, BeanDefinition bd) {_		String indexAttr = ele.getAttribute(INDEX_ATTRIBUTE)__		String typeAttr = ele.getAttribute(TYPE_ATTRIBUTE)__		String nameAttr = ele.getAttribute(NAME_ATTRIBUTE)__		if (StringUtils.hasLength(indexAttr)) {_			try {_				int index = Integer.parseInt(indexAttr)__				if (index < 0) {_					error("'index' cannot be lower than 0", ele)__				}_				else {_					try {_						this.parseState.push(new ConstructorArgumentEntry(index))__						Object value = parsePropertyValue(ele, bd, null)__						ConstructorArgumentValues.ValueHolder valueHolder = new ConstructorArgumentValues.ValueHolder(value)__						if (StringUtils.hasLength(typeAttr)) {_							valueHolder.setType(typeAttr)__						}_						if (StringUtils.hasLength(nameAttr)) {_							valueHolder.setName(nameAttr)__						}_						valueHolder.setSource(extractSource(ele))__						if (bd.getConstructorArgumentValues().hasIndexedArgumentValue(index)) {_							error("Ambiguous constructor-arg entries for index " + index, ele)__						}_						else {_							bd.getConstructorArgumentValues().addIndexedArgumentValue(index, valueHolder)__						}_					}_					finally {_						this.parseState.pop()__					}_				}_			}_			catch (NumberFormatException ex) {_				error("Attribute 'index' of tag 'constructor-arg' must be an integer", ele)__			}_		}_		else {_			try {_				this.parseState.push(new ConstructorArgumentEntry())__				Object value = parsePropertyValue(ele, bd, null)__				ConstructorArgumentValues.ValueHolder valueHolder = new ConstructorArgumentValues.ValueHolder(value)__				if (StringUtils.hasLength(typeAttr)) {_					valueHolder.setType(typeAttr)__				}_				if (StringUtils.hasLength(nameAttr)) {_					valueHolder.setName(nameAttr)__				}_				valueHolder.setSource(extractSource(ele))__				bd.getConstructorArgumentValues().addGenericArgumentValue(valueHolder)__			}_			finally {_				this.parseState.pop()__			}_		}_	};parse,a,constructor,arg,element;public,void,parse,constructor,arg,element,element,ele,bean,definition,bd,string,index,attr,ele,get,attribute,string,type,attr,ele,get,attribute,string,name,attr,ele,get,attribute,if,string,utils,has,length,index,attr,try,int,index,integer,parse,int,index,attr,if,index,0,error,index,cannot,be,lower,than,0,ele,else,try,this,parse,state,push,new,constructor,argument,entry,index,object,value,parse,property,value,ele,bd,null,constructor,argument,values,value,holder,value,holder,new,constructor,argument,values,value,holder,value,if,string,utils,has,length,type,attr,value,holder,set,type,type,attr,if,string,utils,has,length,name,attr,value,holder,set,name,name,attr,value,holder,set,source,extract,source,ele,if,bd,get,constructor,argument,values,has,indexed,argument,value,index,error,ambiguous,constructor,arg,entries,for,index,index,ele,else,bd,get,constructor,argument,values,add,indexed,argument,value,index,value,holder,finally,this,parse,state,pop,catch,number,format,exception,ex,error,attribute,index,of,tag,constructor,arg,must,be,an,integer,ele,else,try,this,parse,state,push,new,constructor,argument,entry,object,value,parse,property,value,ele,bd,null,constructor,argument,values,value,holder,value,holder,new,constructor,argument,values,value,holder,value,if,string,utils,has,length,type,attr,value,holder,set,type,type,attr,if,string,utils,has,length,name,attr,value,holder,set,name,name,attr,value,holder,set,source,extract,source,ele,bd,get,constructor,argument,values,add,generic,argument,value,value,holder,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parseConstructorArgElement(Element ele, BeanDefinition bd);1530190293;Parse a constructor-arg element.;public void parseConstructorArgElement(Element ele, BeanDefinition bd) {_		String indexAttr = ele.getAttribute(INDEX_ATTRIBUTE)__		String typeAttr = ele.getAttribute(TYPE_ATTRIBUTE)__		String nameAttr = ele.getAttribute(NAME_ATTRIBUTE)__		if (StringUtils.hasLength(indexAttr)) {_			try {_				int index = Integer.parseInt(indexAttr)__				if (index < 0) {_					error("'index' cannot be lower than 0", ele)__				}_				else {_					try {_						this.parseState.push(new ConstructorArgumentEntry(index))__						Object value = parsePropertyValue(ele, bd, null)__						ConstructorArgumentValues.ValueHolder valueHolder = new ConstructorArgumentValues.ValueHolder(value)__						if (StringUtils.hasLength(typeAttr)) {_							valueHolder.setType(typeAttr)__						}_						if (StringUtils.hasLength(nameAttr)) {_							valueHolder.setName(nameAttr)__						}_						valueHolder.setSource(extractSource(ele))__						if (bd.getConstructorArgumentValues().hasIndexedArgumentValue(index)) {_							error("Ambiguous constructor-arg entries for index " + index, ele)__						}_						else {_							bd.getConstructorArgumentValues().addIndexedArgumentValue(index, valueHolder)__						}_					}_					finally {_						this.parseState.pop()__					}_				}_			}_			catch (NumberFormatException ex) {_				error("Attribute 'index' of tag 'constructor-arg' must be an integer", ele)__			}_		}_		else {_			try {_				this.parseState.push(new ConstructorArgumentEntry())__				Object value = parsePropertyValue(ele, bd, null)__				ConstructorArgumentValues.ValueHolder valueHolder = new ConstructorArgumentValues.ValueHolder(value)__				if (StringUtils.hasLength(typeAttr)) {_					valueHolder.setType(typeAttr)__				}_				if (StringUtils.hasLength(nameAttr)) {_					valueHolder.setName(nameAttr)__				}_				valueHolder.setSource(extractSource(ele))__				bd.getConstructorArgumentValues().addGenericArgumentValue(valueHolder)__			}_			finally {_				this.parseState.pop()__			}_		}_	};parse,a,constructor,arg,element;public,void,parse,constructor,arg,element,element,ele,bean,definition,bd,string,index,attr,ele,get,attribute,string,type,attr,ele,get,attribute,string,name,attr,ele,get,attribute,if,string,utils,has,length,index,attr,try,int,index,integer,parse,int,index,attr,if,index,0,error,index,cannot,be,lower,than,0,ele,else,try,this,parse,state,push,new,constructor,argument,entry,index,object,value,parse,property,value,ele,bd,null,constructor,argument,values,value,holder,value,holder,new,constructor,argument,values,value,holder,value,if,string,utils,has,length,type,attr,value,holder,set,type,type,attr,if,string,utils,has,length,name,attr,value,holder,set,name,name,attr,value,holder,set,source,extract,source,ele,if,bd,get,constructor,argument,values,has,indexed,argument,value,index,error,ambiguous,constructor,arg,entries,for,index,index,ele,else,bd,get,constructor,argument,values,add,indexed,argument,value,index,value,holder,finally,this,parse,state,pop,catch,number,format,exception,ex,error,attribute,index,of,tag,constructor,arg,must,be,an,integer,ele,else,try,this,parse,state,push,new,constructor,argument,entry,object,value,parse,property,value,ele,bd,null,constructor,argument,values,value,holder,value,holder,new,constructor,argument,values,value,holder,value,if,string,utils,has,length,type,attr,value,holder,set,type,type,attr,if,string,utils,has,length,name,attr,value,holder,set,name,name,attr,value,holder,set,source,extract,source,ele,bd,get,constructor,argument,values,add,generic,argument,value,value,holder,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parseConstructorArgElement(Element ele, BeanDefinition bd);1532706365;Parse a constructor-arg element.;public void parseConstructorArgElement(Element ele, BeanDefinition bd) {_		String indexAttr = ele.getAttribute(INDEX_ATTRIBUTE)__		String typeAttr = ele.getAttribute(TYPE_ATTRIBUTE)__		String nameAttr = ele.getAttribute(NAME_ATTRIBUTE)__		if (StringUtils.hasLength(indexAttr)) {_			try {_				int index = Integer.parseInt(indexAttr)__				if (index < 0) {_					error("'index' cannot be lower than 0", ele)__				}_				else {_					try {_						this.parseState.push(new ConstructorArgumentEntry(index))__						Object value = parsePropertyValue(ele, bd, null)__						ConstructorArgumentValues.ValueHolder valueHolder = new ConstructorArgumentValues.ValueHolder(value)__						if (StringUtils.hasLength(typeAttr)) {_							valueHolder.setType(typeAttr)__						}_						if (StringUtils.hasLength(nameAttr)) {_							valueHolder.setName(nameAttr)__						}_						valueHolder.setSource(extractSource(ele))__						if (bd.getConstructorArgumentValues().hasIndexedArgumentValue(index)) {_							error("Ambiguous constructor-arg entries for index " + index, ele)__						}_						else {_							bd.getConstructorArgumentValues().addIndexedArgumentValue(index, valueHolder)__						}_					}_					finally {_						this.parseState.pop()__					}_				}_			}_			catch (NumberFormatException ex) {_				error("Attribute 'index' of tag 'constructor-arg' must be an integer", ele)__			}_		}_		else {_			try {_				this.parseState.push(new ConstructorArgumentEntry())__				Object value = parsePropertyValue(ele, bd, null)__				ConstructorArgumentValues.ValueHolder valueHolder = new ConstructorArgumentValues.ValueHolder(value)__				if (StringUtils.hasLength(typeAttr)) {_					valueHolder.setType(typeAttr)__				}_				if (StringUtils.hasLength(nameAttr)) {_					valueHolder.setName(nameAttr)__				}_				valueHolder.setSource(extractSource(ele))__				bd.getConstructorArgumentValues().addGenericArgumentValue(valueHolder)__			}_			finally {_				this.parseState.pop()__			}_		}_	};parse,a,constructor,arg,element;public,void,parse,constructor,arg,element,element,ele,bean,definition,bd,string,index,attr,ele,get,attribute,string,type,attr,ele,get,attribute,string,name,attr,ele,get,attribute,if,string,utils,has,length,index,attr,try,int,index,integer,parse,int,index,attr,if,index,0,error,index,cannot,be,lower,than,0,ele,else,try,this,parse,state,push,new,constructor,argument,entry,index,object,value,parse,property,value,ele,bd,null,constructor,argument,values,value,holder,value,holder,new,constructor,argument,values,value,holder,value,if,string,utils,has,length,type,attr,value,holder,set,type,type,attr,if,string,utils,has,length,name,attr,value,holder,set,name,name,attr,value,holder,set,source,extract,source,ele,if,bd,get,constructor,argument,values,has,indexed,argument,value,index,error,ambiguous,constructor,arg,entries,for,index,index,ele,else,bd,get,constructor,argument,values,add,indexed,argument,value,index,value,holder,finally,this,parse,state,pop,catch,number,format,exception,ex,error,attribute,index,of,tag,constructor,arg,must,be,an,integer,ele,else,try,this,parse,state,push,new,constructor,argument,entry,object,value,parse,property,value,ele,bd,null,constructor,argument,values,value,holder,value,holder,new,constructor,argument,values,value,holder,value,if,string,utils,has,length,type,attr,value,holder,set,type,type,attr,if,string,utils,has,length,name,attr,value,holder,set,name,name,attr,value,holder,set,source,extract,source,ele,bd,get,constructor,argument,values,add,generic,argument,value,value,holder,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parseConstructorArgElement(Element ele, BeanDefinition bd);1546958161;Parse a constructor-arg element.;public void parseConstructorArgElement(Element ele, BeanDefinition bd) {_		String indexAttr = ele.getAttribute(INDEX_ATTRIBUTE)__		String typeAttr = ele.getAttribute(TYPE_ATTRIBUTE)__		String nameAttr = ele.getAttribute(NAME_ATTRIBUTE)__		if (StringUtils.hasLength(indexAttr)) {_			try {_				int index = Integer.parseInt(indexAttr)__				if (index < 0) {_					error("'index' cannot be lower than 0", ele)__				}_				else {_					try {_						this.parseState.push(new ConstructorArgumentEntry(index))__						Object value = parsePropertyValue(ele, bd, null)__						ConstructorArgumentValues.ValueHolder valueHolder = new ConstructorArgumentValues.ValueHolder(value)__						if (StringUtils.hasLength(typeAttr)) {_							valueHolder.setType(typeAttr)__						}_						if (StringUtils.hasLength(nameAttr)) {_							valueHolder.setName(nameAttr)__						}_						valueHolder.setSource(extractSource(ele))__						if (bd.getConstructorArgumentValues().hasIndexedArgumentValue(index)) {_							error("Ambiguous constructor-arg entries for index " + index, ele)__						}_						else {_							bd.getConstructorArgumentValues().addIndexedArgumentValue(index, valueHolder)__						}_					}_					finally {_						this.parseState.pop()__					}_				}_			}_			catch (NumberFormatException ex) {_				error("Attribute 'index' of tag 'constructor-arg' must be an integer", ele)__			}_		}_		else {_			try {_				this.parseState.push(new ConstructorArgumentEntry())__				Object value = parsePropertyValue(ele, bd, null)__				ConstructorArgumentValues.ValueHolder valueHolder = new ConstructorArgumentValues.ValueHolder(value)__				if (StringUtils.hasLength(typeAttr)) {_					valueHolder.setType(typeAttr)__				}_				if (StringUtils.hasLength(nameAttr)) {_					valueHolder.setName(nameAttr)__				}_				valueHolder.setSource(extractSource(ele))__				bd.getConstructorArgumentValues().addGenericArgumentValue(valueHolder)__			}_			finally {_				this.parseState.pop()__			}_		}_	};parse,a,constructor,arg,element;public,void,parse,constructor,arg,element,element,ele,bean,definition,bd,string,index,attr,ele,get,attribute,string,type,attr,ele,get,attribute,string,name,attr,ele,get,attribute,if,string,utils,has,length,index,attr,try,int,index,integer,parse,int,index,attr,if,index,0,error,index,cannot,be,lower,than,0,ele,else,try,this,parse,state,push,new,constructor,argument,entry,index,object,value,parse,property,value,ele,bd,null,constructor,argument,values,value,holder,value,holder,new,constructor,argument,values,value,holder,value,if,string,utils,has,length,type,attr,value,holder,set,type,type,attr,if,string,utils,has,length,name,attr,value,holder,set,name,name,attr,value,holder,set,source,extract,source,ele,if,bd,get,constructor,argument,values,has,indexed,argument,value,index,error,ambiguous,constructor,arg,entries,for,index,index,ele,else,bd,get,constructor,argument,values,add,indexed,argument,value,index,value,holder,finally,this,parse,state,pop,catch,number,format,exception,ex,error,attribute,index,of,tag,constructor,arg,must,be,an,integer,ele,else,try,this,parse,state,push,new,constructor,argument,entry,object,value,parse,property,value,ele,bd,null,constructor,argument,values,value,holder,value,holder,new,constructor,argument,values,value,holder,value,if,string,utils,has,length,type,attr,value,holder,set,type,type,attr,if,string,utils,has,length,name,attr,value,holder,set,name,name,attr,value,holder,set,source,extract,source,ele,bd,get,constructor,argument,values,add,generic,argument,value,value,holder,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public String getNamespaceURI(Node node);1328020251;Get the namespace URI for the supplied node. The default implementation uses {@link Node#getNamespaceURI}._Subclasses may override the default implementation to provide a different namespace identification mechanism._@param node the node;public String getNamespaceURI(Node node) {_		return node.getNamespaceURI()__	};get,the,namespace,uri,for,the,supplied,node,the,default,implementation,uses,link,node,get,namespace,uri,subclasses,may,override,the,default,implementation,to,provide,a,different,namespace,identification,mechanism,param,node,the,node;public,string,get,namespace,uri,node,node,return,node,get,namespace,uri
BeanDefinitionParserDelegate -> public String getNamespaceURI(Node node);1335774711;Get the namespace URI for the supplied node. The default implementation uses {@link Node#getNamespaceURI}._Subclasses may override the default implementation to provide a different namespace identification mechanism._@param node the node;public String getNamespaceURI(Node node) {_		return node.getNamespaceURI()__	};get,the,namespace,uri,for,the,supplied,node,the,default,implementation,uses,link,node,get,namespace,uri,subclasses,may,override,the,default,implementation,to,provide,a,different,namespace,identification,mechanism,param,node,the,node;public,string,get,namespace,uri,node,node,return,node,get,namespace,uri
BeanDefinitionParserDelegate -> public String getNamespaceURI(Node node);1337341719;Get the namespace URI for the supplied node. The default implementation uses {@link Node#getNamespaceURI}._Subclasses may override the default implementation to provide a different namespace identification mechanism._@param node the node;public String getNamespaceURI(Node node) {_		return node.getNamespaceURI()__	};get,the,namespace,uri,for,the,supplied,node,the,default,implementation,uses,link,node,get,namespace,uri,subclasses,may,override,the,default,implementation,to,provide,a,different,namespace,identification,mechanism,param,node,the,node;public,string,get,namespace,uri,node,node,return,node,get,namespace,uri
BeanDefinitionParserDelegate -> public String getNamespaceURI(Node node);1351392612;Get the namespace URI for the supplied node. The default implementation uses {@link Node#getNamespaceURI}._Subclasses may override the default implementation to provide a different namespace identification mechanism._@param node the node;public String getNamespaceURI(Node node) {_		return node.getNamespaceURI()__	};get,the,namespace,uri,for,the,supplied,node,the,default,implementation,uses,link,node,get,namespace,uri,subclasses,may,override,the,default,implementation,to,provide,a,different,namespace,identification,mechanism,param,node,the,node;public,string,get,namespace,uri,node,node,return,node,get,namespace,uri
BeanDefinitionParserDelegate -> public String getNamespaceURI(Node node);1351696936;Get the namespace URI for the supplied node. The default implementation uses {@link Node#getNamespaceURI}._Subclasses may override the default implementation to provide a different namespace identification mechanism._@param node the node;public String getNamespaceURI(Node node) {_		return node.getNamespaceURI()__	};get,the,namespace,uri,for,the,supplied,node,the,default,implementation,uses,link,node,get,namespace,uri,subclasses,may,override,the,default,implementation,to,provide,a,different,namespace,identification,mechanism,param,node,the,node;public,string,get,namespace,uri,node,node,return,node,get,namespace,uri
BeanDefinitionParserDelegate -> public String getNamespaceURI(Node node);1356735495;Get the namespace URI for the supplied node. The default implementation uses {@link Node#getNamespaceURI}._Subclasses may override the default implementation to provide a different namespace identification mechanism._@param node the node;public String getNamespaceURI(Node node) {_		return node.getNamespaceURI()__	};get,the,namespace,uri,for,the,supplied,node,the,default,implementation,uses,link,node,get,namespace,uri,subclasses,may,override,the,default,implementation,to,provide,a,different,namespace,identification,mechanism,param,node,the,node;public,string,get,namespace,uri,node,node,return,node,get,namespace,uri
BeanDefinitionParserDelegate -> public String getNamespaceURI(Node node);1357119417;Get the namespace URI for the supplied node. The default implementation uses {@link Node#getNamespaceURI}._Subclasses may override the default implementation to provide a different namespace identification mechanism._@param node the node;public String getNamespaceURI(Node node) {_		return node.getNamespaceURI()__	};get,the,namespace,uri,for,the,supplied,node,the,default,implementation,uses,link,node,get,namespace,uri,subclasses,may,override,the,default,implementation,to,provide,a,different,namespace,identification,mechanism,param,node,the,node;public,string,get,namespace,uri,node,node,return,node,get,namespace,uri
BeanDefinitionParserDelegate -> public String getNamespaceURI(Node node);1367943112;Get the namespace URI for the supplied node. The default implementation uses {@link Node#getNamespaceURI}._Subclasses may override the default implementation to provide a different namespace identification mechanism._@param node the node;public String getNamespaceURI(Node node) {_		return node.getNamespaceURI()__	};get,the,namespace,uri,for,the,supplied,node,the,default,implementation,uses,link,node,get,namespace,uri,subclasses,may,override,the,default,implementation,to,provide,a,different,namespace,identification,mechanism,param,node,the,node;public,string,get,namespace,uri,node,node,return,node,get,namespace,uri
BeanDefinitionParserDelegate -> public String getNamespaceURI(Node node);1382030648;Get the namespace URI for the supplied node. The default implementation uses {@link Node#getNamespaceURI}._Subclasses may override the default implementation to provide a different namespace identification mechanism._@param node the node;public String getNamespaceURI(Node node) {_		return node.getNamespaceURI()__	};get,the,namespace,uri,for,the,supplied,node,the,default,implementation,uses,link,node,get,namespace,uri,subclasses,may,override,the,default,implementation,to,provide,a,different,namespace,identification,mechanism,param,node,the,node;public,string,get,namespace,uri,node,node,return,node,get,namespace,uri
BeanDefinitionParserDelegate -> public String getNamespaceURI(Node node);1385412762;Get the namespace URI for the supplied node. The default implementation uses {@link Node#getNamespaceURI}._Subclasses may override the default implementation to provide a different namespace identification mechanism._@param node the node;public String getNamespaceURI(Node node) {_		return node.getNamespaceURI()__	};get,the,namespace,uri,for,the,supplied,node,the,default,implementation,uses,link,node,get,namespace,uri,subclasses,may,override,the,default,implementation,to,provide,a,different,namespace,identification,mechanism,param,node,the,node;public,string,get,namespace,uri,node,node,return,node,get,namespace,uri
BeanDefinitionParserDelegate -> public String getNamespaceURI(Node node);1410953197;Get the namespace URI for the supplied node. The default implementation uses {@link Node#getNamespaceURI}._Subclasses may override the default implementation to provide a different namespace identification mechanism._@param node the node;public String getNamespaceURI(Node node) {_		return node.getNamespaceURI()__	};get,the,namespace,uri,for,the,supplied,node,the,default,implementation,uses,link,node,get,namespace,uri,subclasses,may,override,the,default,implementation,to,provide,a,different,namespace,identification,mechanism,param,node,the,node;public,string,get,namespace,uri,node,node,return,node,get,namespace,uri
BeanDefinitionParserDelegate -> public String getNamespaceURI(Node node);1411599760;Get the namespace URI for the supplied node. The default implementation uses {@link Node#getNamespaceURI}._Subclasses may override the default implementation to provide a different namespace identification mechanism._@param node the node;public String getNamespaceURI(Node node) {_		return node.getNamespaceURI()__	};get,the,namespace,uri,for,the,supplied,node,the,default,implementation,uses,link,node,get,namespace,uri,subclasses,may,override,the,default,implementation,to,provide,a,different,namespace,identification,mechanism,param,node,the,node;public,string,get,namespace,uri,node,node,return,node,get,namespace,uri
BeanDefinitionParserDelegate -> public String getNamespaceURI(Node node);1419966315;Get the namespace URI for the supplied node. The default implementation uses {@link Node#getNamespaceURI}._Subclasses may override the default implementation to provide a different namespace identification mechanism._@param node the node;public String getNamespaceURI(Node node) {_		return node.getNamespaceURI()__	};get,the,namespace,uri,for,the,supplied,node,the,default,implementation,uses,link,node,get,namespace,uri,subclasses,may,override,the,default,implementation,to,provide,a,different,namespace,identification,mechanism,param,node,the,node;public,string,get,namespace,uri,node,node,return,node,get,namespace,uri
BeanDefinitionParserDelegate -> public String getNamespaceURI(Node node);1431958785;Get the namespace URI for the supplied node. The default implementation uses {@link Node#getNamespaceURI}._Subclasses may override the default implementation to provide a different namespace identification mechanism._@param node the node;public String getNamespaceURI(Node node) {_		return node.getNamespaceURI()__	};get,the,namespace,uri,for,the,supplied,node,the,default,implementation,uses,link,node,get,namespace,uri,subclasses,may,override,the,default,implementation,to,provide,a,different,namespace,identification,mechanism,param,node,the,node;public,string,get,namespace,uri,node,node,return,node,get,namespace,uri
BeanDefinitionParserDelegate -> public String getNamespaceURI(Node node);1432135182;Get the namespace URI for the supplied node. The default implementation uses {@link Node#getNamespaceURI}._Subclasses may override the default implementation to provide a different namespace identification mechanism._@param node the node;public String getNamespaceURI(Node node) {_		return node.getNamespaceURI()__	};get,the,namespace,uri,for,the,supplied,node,the,default,implementation,uses,link,node,get,namespace,uri,subclasses,may,override,the,default,implementation,to,provide,a,different,namespace,identification,mechanism,param,node,the,node;public,string,get,namespace,uri,node,node,return,node,get,namespace,uri
BeanDefinitionParserDelegate -> public String getNamespaceURI(Node node);1447323728;Get the namespace URI for the supplied node. The default implementation uses {@link Node#getNamespaceURI}._Subclasses may override the default implementation to provide a different namespace identification mechanism._@param node the node;public String getNamespaceURI(Node node) {_		return node.getNamespaceURI()__	};get,the,namespace,uri,for,the,supplied,node,the,default,implementation,uses,link,node,get,namespace,uri,subclasses,may,override,the,default,implementation,to,provide,a,different,namespace,identification,mechanism,param,node,the,node;public,string,get,namespace,uri,node,node,return,node,get,namespace,uri
BeanDefinitionParserDelegate -> public String getNamespaceURI(Node node);1467726769;Get the namespace URI for the supplied node. The default implementation uses {@link Node#getNamespaceURI}._Subclasses may override the default implementation to provide a different namespace identification mechanism._@param node the node;public String getNamespaceURI(Node node) {_		return node.getNamespaceURI()__	};get,the,namespace,uri,for,the,supplied,node,the,default,implementation,uses,link,node,get,namespace,uri,subclasses,may,override,the,default,implementation,to,provide,a,different,namespace,identification,mechanism,param,node,the,node;public,string,get,namespace,uri,node,node,return,node,get,namespace,uri
BeanDefinitionParserDelegate -> public String getNamespaceURI(Node node);1467730834;Get the namespace URI for the supplied node. The default implementation uses {@link Node#getNamespaceURI}._Subclasses may override the default implementation to provide a different namespace identification mechanism._@param node the node;public String getNamespaceURI(Node node) {_		return node.getNamespaceURI()__	};get,the,namespace,uri,for,the,supplied,node,the,default,implementation,uses,link,node,get,namespace,uri,subclasses,may,override,the,default,implementation,to,provide,a,different,namespace,identification,mechanism,param,node,the,node;public,string,get,namespace,uri,node,node,return,node,get,namespace,uri
BeanDefinitionParserDelegate -> public String getNamespaceURI(Node node);1467744603;Get the namespace URI for the supplied node._<p>The default implementation uses {@link Node#getNamespaceURI}._Subclasses may override the default implementation to provide a_different namespace identification mechanism._@param node the node;public String getNamespaceURI(Node node) {_		return node.getNamespaceURI()__	};get,the,namespace,uri,for,the,supplied,node,p,the,default,implementation,uses,link,node,get,namespace,uri,subclasses,may,override,the,default,implementation,to,provide,a,different,namespace,identification,mechanism,param,node,the,node;public,string,get,namespace,uri,node,node,return,node,get,namespace,uri
BeanDefinitionParserDelegate -> public String getNamespaceURI(Node node);1487245676;Get the namespace URI for the supplied node._<p>The default implementation uses {@link Node#getNamespaceURI}._Subclasses may override the default implementation to provide a_different namespace identification mechanism._@param node the node;public String getNamespaceURI(Node node) {_		return node.getNamespaceURI()__	};get,the,namespace,uri,for,the,supplied,node,p,the,default,implementation,uses,link,node,get,namespace,uri,subclasses,may,override,the,default,implementation,to,provide,a,different,namespace,identification,mechanism,param,node,the,node;public,string,get,namespace,uri,node,node,return,node,get,namespace,uri
BeanDefinitionParserDelegate -> public String getNamespaceURI(Node node);1487255851;Get the namespace URI for the supplied node._<p>The default implementation uses {@link Node#getNamespaceURI}._Subclasses may override the default implementation to provide a_different namespace identification mechanism._@param node the node;public String getNamespaceURI(Node node) {_		return node.getNamespaceURI()__	};get,the,namespace,uri,for,the,supplied,node,p,the,default,implementation,uses,link,node,get,namespace,uri,subclasses,may,override,the,default,implementation,to,provide,a,different,namespace,identification,mechanism,param,node,the,node;public,string,get,namespace,uri,node,node,return,node,get,namespace,uri
BeanDefinitionParserDelegate -> public String getNamespaceURI(Node node);1494586217;Get the namespace URI for the supplied node._<p>The default implementation uses {@link Node#getNamespaceURI}._Subclasses may override the default implementation to provide a_different namespace identification mechanism._@param node the node;public String getNamespaceURI(Node node) {_		return node.getNamespaceURI()__	};get,the,namespace,uri,for,the,supplied,node,p,the,default,implementation,uses,link,node,get,namespace,uri,subclasses,may,override,the,default,implementation,to,provide,a,different,namespace,identification,mechanism,param,node,the,node;public,string,get,namespace,uri,node,node,return,node,get,namespace,uri
BeanDefinitionParserDelegate -> public String getNamespaceURI(Node node);1495868221;Get the namespace URI for the supplied node._<p>The default implementation uses {@link Node#getNamespaceURI}._Subclasses may override the default implementation to provide a_different namespace identification mechanism._@param node the node;public String getNamespaceURI(Node node) {_		return node.getNamespaceURI()__	};get,the,namespace,uri,for,the,supplied,node,p,the,default,implementation,uses,link,node,get,namespace,uri,subclasses,may,override,the,default,implementation,to,provide,a,different,namespace,identification,mechanism,param,node,the,node;public,string,get,namespace,uri,node,node,return,node,get,namespace,uri
BeanDefinitionParserDelegate -> public String getNamespaceURI(Node node);1496259743;Get the namespace URI for the supplied node._<p>The default implementation uses {@link Node#getNamespaceURI}._Subclasses may override the default implementation to provide a_different namespace identification mechanism._@param node the node;public String getNamespaceURI(Node node) {_		return node.getNamespaceURI()__	};get,the,namespace,uri,for,the,supplied,node,p,the,default,implementation,uses,link,node,get,namespace,uri,subclasses,may,override,the,default,implementation,to,provide,a,different,namespace,identification,mechanism,param,node,the,node;public,string,get,namespace,uri,node,node,return,node,get,namespace,uri
BeanDefinitionParserDelegate -> public DocumentDefaultsDefinition getDefaults();1328020251;Return the defaults definition object, or <code>null</code> if the_defaults have been initialized yet.;public DocumentDefaultsDefinition getDefaults() {_		return this.defaults__	};return,the,defaults,definition,object,or,code,null,code,if,the,defaults,have,been,initialized,yet;public,document,defaults,definition,get,defaults,return,this,defaults
BeanDefinitionParserDelegate -> public DocumentDefaultsDefinition getDefaults();1335774711;Return the defaults definition object, or <code>null</code> if the_defaults have been initialized yet.;public DocumentDefaultsDefinition getDefaults() {_		return this.defaults__	};return,the,defaults,definition,object,or,code,null,code,if,the,defaults,have,been,initialized,yet;public,document,defaults,definition,get,defaults,return,this,defaults
BeanDefinitionParserDelegate -> public DocumentDefaultsDefinition getDefaults();1337341719;Return the defaults definition object, or <code>null</code> if the_defaults have been initialized yet.;public DocumentDefaultsDefinition getDefaults() {_		return this.defaults__	};return,the,defaults,definition,object,or,code,null,code,if,the,defaults,have,been,initialized,yet;public,document,defaults,definition,get,defaults,return,this,defaults
BeanDefinitionParserDelegate -> public DocumentDefaultsDefinition getDefaults();1351392612;Return the defaults definition object, or <code>null</code> if the_defaults have been initialized yet.;public DocumentDefaultsDefinition getDefaults() {_		return this.defaults__	};return,the,defaults,definition,object,or,code,null,code,if,the,defaults,have,been,initialized,yet;public,document,defaults,definition,get,defaults,return,this,defaults
BeanDefinitionParserDelegate -> public DocumentDefaultsDefinition getDefaults();1351696936;Return the defaults definition object, or <code>null</code> if the_defaults have been initialized yet.;public DocumentDefaultsDefinition getDefaults() {_		return this.defaults__	};return,the,defaults,definition,object,or,code,null,code,if,the,defaults,have,been,initialized,yet;public,document,defaults,definition,get,defaults,return,this,defaults
BeanDefinitionParserDelegate -> public DocumentDefaultsDefinition getDefaults();1356735495;Return the defaults definition object, or {@code null} if the_defaults have been initialized yet.;public DocumentDefaultsDefinition getDefaults() {_		return this.defaults__	};return,the,defaults,definition,object,or,code,null,if,the,defaults,have,been,initialized,yet;public,document,defaults,definition,get,defaults,return,this,defaults
BeanDefinitionParserDelegate -> public DocumentDefaultsDefinition getDefaults();1357119417;Return the defaults definition object, or {@code null} if the_defaults have been initialized yet.;public DocumentDefaultsDefinition getDefaults() {_		return this.defaults__	};return,the,defaults,definition,object,or,code,null,if,the,defaults,have,been,initialized,yet;public,document,defaults,definition,get,defaults,return,this,defaults
BeanDefinitionParserDelegate -> public DocumentDefaultsDefinition getDefaults();1367943112;Return the defaults definition object, or {@code null} if the_defaults have been initialized yet.;public DocumentDefaultsDefinition getDefaults() {_		return this.defaults__	};return,the,defaults,definition,object,or,code,null,if,the,defaults,have,been,initialized,yet;public,document,defaults,definition,get,defaults,return,this,defaults
BeanDefinitionParserDelegate -> public DocumentDefaultsDefinition getDefaults();1382030648;Return the defaults definition object, or {@code null} if the_defaults have been initialized yet.;public DocumentDefaultsDefinition getDefaults() {_		return this.defaults__	};return,the,defaults,definition,object,or,code,null,if,the,defaults,have,been,initialized,yet;public,document,defaults,definition,get,defaults,return,this,defaults
BeanDefinitionParserDelegate -> public DocumentDefaultsDefinition getDefaults();1385412762;Return the defaults definition object, or {@code null} if the_defaults have been initialized yet.;public DocumentDefaultsDefinition getDefaults() {_		return this.defaults__	};return,the,defaults,definition,object,or,code,null,if,the,defaults,have,been,initialized,yet;public,document,defaults,definition,get,defaults,return,this,defaults
BeanDefinitionParserDelegate -> public DocumentDefaultsDefinition getDefaults();1410953197;Return the defaults definition object, or {@code null} if the_defaults have been initialized yet.;public DocumentDefaultsDefinition getDefaults() {_		return this.defaults__	};return,the,defaults,definition,object,or,code,null,if,the,defaults,have,been,initialized,yet;public,document,defaults,definition,get,defaults,return,this,defaults
BeanDefinitionParserDelegate -> public DocumentDefaultsDefinition getDefaults();1411599760;Return the defaults definition object, or {@code null} if the_defaults have been initialized yet.;public DocumentDefaultsDefinition getDefaults() {_		return this.defaults__	};return,the,defaults,definition,object,or,code,null,if,the,defaults,have,been,initialized,yet;public,document,defaults,definition,get,defaults,return,this,defaults
BeanDefinitionParserDelegate -> public DocumentDefaultsDefinition getDefaults();1419966315;Return the defaults definition object, or {@code null} if the_defaults have been initialized yet.;public DocumentDefaultsDefinition getDefaults() {_		return this.defaults__	};return,the,defaults,definition,object,or,code,null,if,the,defaults,have,been,initialized,yet;public,document,defaults,definition,get,defaults,return,this,defaults
BeanDefinitionParserDelegate -> public DocumentDefaultsDefinition getDefaults();1431958785;Return the defaults definition object, or {@code null} if the_defaults have been initialized yet.;public DocumentDefaultsDefinition getDefaults() {_		return this.defaults__	};return,the,defaults,definition,object,or,code,null,if,the,defaults,have,been,initialized,yet;public,document,defaults,definition,get,defaults,return,this,defaults
BeanDefinitionParserDelegate -> public DocumentDefaultsDefinition getDefaults();1432135182;Return the defaults definition object, or {@code null} if the_defaults have been initialized yet.;public DocumentDefaultsDefinition getDefaults() {_		return this.defaults__	};return,the,defaults,definition,object,or,code,null,if,the,defaults,have,been,initialized,yet;public,document,defaults,definition,get,defaults,return,this,defaults
BeanDefinitionParserDelegate -> public DocumentDefaultsDefinition getDefaults();1447323728;Return the defaults definition object, or {@code null} if the_defaults have been initialized yet.;public DocumentDefaultsDefinition getDefaults() {_		return this.defaults__	};return,the,defaults,definition,object,or,code,null,if,the,defaults,have,been,initialized,yet;public,document,defaults,definition,get,defaults,return,this,defaults
BeanDefinitionParserDelegate -> public DocumentDefaultsDefinition getDefaults();1467726769;Return the defaults definition object, or {@code null} if the_defaults have been initialized yet.;public DocumentDefaultsDefinition getDefaults() {_		return this.defaults__	};return,the,defaults,definition,object,or,code,null,if,the,defaults,have,been,initialized,yet;public,document,defaults,definition,get,defaults,return,this,defaults
BeanDefinitionParserDelegate -> public DocumentDefaultsDefinition getDefaults();1467730834;Return the defaults definition object, or {@code null} if the_defaults have been initialized yet.;public DocumentDefaultsDefinition getDefaults() {_		return this.defaults__	};return,the,defaults,definition,object,or,code,null,if,the,defaults,have,been,initialized,yet;public,document,defaults,definition,get,defaults,return,this,defaults
BeanDefinitionParserDelegate -> public DocumentDefaultsDefinition getDefaults();1467744603;Return the defaults definition object, or {@code null} if the_defaults have been initialized yet.;public DocumentDefaultsDefinition getDefaults() {_		return this.defaults__	};return,the,defaults,definition,object,or,code,null,if,the,defaults,have,been,initialized,yet;public,document,defaults,definition,get,defaults,return,this,defaults
BeanDefinitionParserDelegate -> public DocumentDefaultsDefinition getDefaults();1487245676;Return the defaults definition object, or {@code null} if the_defaults have been initialized yet.;public DocumentDefaultsDefinition getDefaults() {_		return this.defaults__	};return,the,defaults,definition,object,or,code,null,if,the,defaults,have,been,initialized,yet;public,document,defaults,definition,get,defaults,return,this,defaults
BeanDefinitionParserDelegate -> public DocumentDefaultsDefinition getDefaults();1487255851;Return the defaults definition object, or {@code null} if the_defaults have been initialized yet.;public DocumentDefaultsDefinition getDefaults() {_		return this.defaults__	};return,the,defaults,definition,object,or,code,null,if,the,defaults,have,been,initialized,yet;public,document,defaults,definition,get,defaults,return,this,defaults
BeanDefinitionParserDelegate -> public DocumentDefaultsDefinition getDefaults();1494586217;Return the defaults definition object, or {@code null} if the_defaults have been initialized yet.;public DocumentDefaultsDefinition getDefaults() {_		return this.defaults__	};return,the,defaults,definition,object,or,code,null,if,the,defaults,have,been,initialized,yet;public,document,defaults,definition,get,defaults,return,this,defaults
BeanDefinitionParserDelegate -> public DocumentDefaultsDefinition getDefaults();1496837955;Return the defaults definition object.;public DocumentDefaultsDefinition getDefaults() {_		return this.defaults__	};return,the,defaults,definition,object;public,document,defaults,definition,get,defaults,return,this,defaults
BeanDefinitionParserDelegate -> public DocumentDefaultsDefinition getDefaults();1503008029;Return the defaults definition object.;public DocumentDefaultsDefinition getDefaults() {_		return this.defaults__	};return,the,defaults,definition,object;public,document,defaults,definition,get,defaults,return,this,defaults
BeanDefinitionParserDelegate -> public DocumentDefaultsDefinition getDefaults();1519513303;Return the defaults definition object.;public DocumentDefaultsDefinition getDefaults() {_		return this.defaults__	};return,the,defaults,definition,object;public,document,defaults,definition,get,defaults,return,this,defaults
BeanDefinitionParserDelegate -> public DocumentDefaultsDefinition getDefaults();1530174524;Return the defaults definition object.;public DocumentDefaultsDefinition getDefaults() {_		return this.defaults__	};return,the,defaults,definition,object;public,document,defaults,definition,get,defaults,return,this,defaults
BeanDefinitionParserDelegate -> public DocumentDefaultsDefinition getDefaults();1530190293;Return the defaults definition object.;public DocumentDefaultsDefinition getDefaults() {_		return this.defaults__	};return,the,defaults,definition,object;public,document,defaults,definition,get,defaults,return,this,defaults
BeanDefinitionParserDelegate -> public DocumentDefaultsDefinition getDefaults();1532706365;Return the defaults definition object.;public DocumentDefaultsDefinition getDefaults() {_		return this.defaults__	};return,the,defaults,definition,object;public,document,defaults,definition,get,defaults,return,this,defaults
BeanDefinitionParserDelegate -> public DocumentDefaultsDefinition getDefaults();1546958161;Return the defaults definition object.;public DocumentDefaultsDefinition getDefaults() {_		return this.defaults__	};return,the,defaults,definition,object;public,document,defaults,definition,get,defaults,return,this,defaults
BeanDefinitionParserDelegate -> public void parseQualifierElement(Element ele, AbstractBeanDefinition bd);1328020251;Parse a qualifier element.;public void parseQualifierElement(Element ele, AbstractBeanDefinition bd) {_		String typeName = ele.getAttribute(TYPE_ATTRIBUTE)__		if (!StringUtils.hasLength(typeName)) {_			error("Tag 'qualifier' must have a 'type' attribute", ele)__			return__		}_		this.parseState.push(new QualifierEntry(typeName))__		try {_			AutowireCandidateQualifier qualifier = new AutowireCandidateQualifier(typeName)__			qualifier.setSource(extractSource(ele))__			String value = ele.getAttribute(VALUE_ATTRIBUTE)__			if (StringUtils.hasLength(value)) {_				qualifier.setAttribute(AutowireCandidateQualifier.VALUE_KEY, value)__			}_			NodeList nl = ele.getChildNodes()__			for (int i = 0_ i < nl.getLength()_ i++) {_				Node node = nl.item(i)__				if (isCandidateElement(node) && nodeNameEquals(node, QUALIFIER_ATTRIBUTE_ELEMENT)) {_					Element attributeEle = (Element) node__					String attributeName = attributeEle.getAttribute(KEY_ATTRIBUTE)__					String attributeValue = attributeEle.getAttribute(VALUE_ATTRIBUTE)__					if (StringUtils.hasLength(attributeName) && StringUtils.hasLength(attributeValue)) {_						BeanMetadataAttribute attribute = new BeanMetadataAttribute(attributeName, attributeValue)__						attribute.setSource(extractSource(attributeEle))__						qualifier.addMetadataAttribute(attribute)__					}_					else {_						error("Qualifier 'attribute' tag must have a 'name' and 'value'", attributeEle)__						return__					}_				}_			}_			bd.addQualifier(qualifier)__		}_		finally {_			this.parseState.pop()__		}_	};parse,a,qualifier,element;public,void,parse,qualifier,element,element,ele,abstract,bean,definition,bd,string,type,name,ele,get,attribute,if,string,utils,has,length,type,name,error,tag,qualifier,must,have,a,type,attribute,ele,return,this,parse,state,push,new,qualifier,entry,type,name,try,autowire,candidate,qualifier,qualifier,new,autowire,candidate,qualifier,type,name,qualifier,set,source,extract,source,ele,string,value,ele,get,attribute,if,string,utils,has,length,value,qualifier,set,attribute,autowire,candidate,qualifier,value,node,list,nl,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,attribute,ele,element,node,string,attribute,name,attribute,ele,get,attribute,string,attribute,value,attribute,ele,get,attribute,if,string,utils,has,length,attribute,name,string,utils,has,length,attribute,value,bean,metadata,attribute,attribute,new,bean,metadata,attribute,attribute,name,attribute,value,attribute,set,source,extract,source,attribute,ele,qualifier,add,metadata,attribute,attribute,else,error,qualifier,attribute,tag,must,have,a,name,and,value,attribute,ele,return,bd,add,qualifier,qualifier,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parseQualifierElement(Element ele, AbstractBeanDefinition bd);1335774711;Parse a qualifier element.;public void parseQualifierElement(Element ele, AbstractBeanDefinition bd) {_		String typeName = ele.getAttribute(TYPE_ATTRIBUTE)__		if (!StringUtils.hasLength(typeName)) {_			error("Tag 'qualifier' must have a 'type' attribute", ele)__			return__		}_		this.parseState.push(new QualifierEntry(typeName))__		try {_			AutowireCandidateQualifier qualifier = new AutowireCandidateQualifier(typeName)__			qualifier.setSource(extractSource(ele))__			String value = ele.getAttribute(VALUE_ATTRIBUTE)__			if (StringUtils.hasLength(value)) {_				qualifier.setAttribute(AutowireCandidateQualifier.VALUE_KEY, value)__			}_			NodeList nl = ele.getChildNodes()__			for (int i = 0_ i < nl.getLength()_ i++) {_				Node node = nl.item(i)__				if (isCandidateElement(node) && nodeNameEquals(node, QUALIFIER_ATTRIBUTE_ELEMENT)) {_					Element attributeEle = (Element) node__					String attributeName = attributeEle.getAttribute(KEY_ATTRIBUTE)__					String attributeValue = attributeEle.getAttribute(VALUE_ATTRIBUTE)__					if (StringUtils.hasLength(attributeName) && StringUtils.hasLength(attributeValue)) {_						BeanMetadataAttribute attribute = new BeanMetadataAttribute(attributeName, attributeValue)__						attribute.setSource(extractSource(attributeEle))__						qualifier.addMetadataAttribute(attribute)__					}_					else {_						error("Qualifier 'attribute' tag must have a 'name' and 'value'", attributeEle)__						return__					}_				}_			}_			bd.addQualifier(qualifier)__		}_		finally {_			this.parseState.pop()__		}_	};parse,a,qualifier,element;public,void,parse,qualifier,element,element,ele,abstract,bean,definition,bd,string,type,name,ele,get,attribute,if,string,utils,has,length,type,name,error,tag,qualifier,must,have,a,type,attribute,ele,return,this,parse,state,push,new,qualifier,entry,type,name,try,autowire,candidate,qualifier,qualifier,new,autowire,candidate,qualifier,type,name,qualifier,set,source,extract,source,ele,string,value,ele,get,attribute,if,string,utils,has,length,value,qualifier,set,attribute,autowire,candidate,qualifier,value,node,list,nl,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,attribute,ele,element,node,string,attribute,name,attribute,ele,get,attribute,string,attribute,value,attribute,ele,get,attribute,if,string,utils,has,length,attribute,name,string,utils,has,length,attribute,value,bean,metadata,attribute,attribute,new,bean,metadata,attribute,attribute,name,attribute,value,attribute,set,source,extract,source,attribute,ele,qualifier,add,metadata,attribute,attribute,else,error,qualifier,attribute,tag,must,have,a,name,and,value,attribute,ele,return,bd,add,qualifier,qualifier,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parseQualifierElement(Element ele, AbstractBeanDefinition bd);1337341719;Parse a qualifier element.;public void parseQualifierElement(Element ele, AbstractBeanDefinition bd) {_		String typeName = ele.getAttribute(TYPE_ATTRIBUTE)__		if (!StringUtils.hasLength(typeName)) {_			error("Tag 'qualifier' must have a 'type' attribute", ele)__			return__		}_		this.parseState.push(new QualifierEntry(typeName))__		try {_			AutowireCandidateQualifier qualifier = new AutowireCandidateQualifier(typeName)__			qualifier.setSource(extractSource(ele))__			String value = ele.getAttribute(VALUE_ATTRIBUTE)__			if (StringUtils.hasLength(value)) {_				qualifier.setAttribute(AutowireCandidateQualifier.VALUE_KEY, value)__			}_			NodeList nl = ele.getChildNodes()__			for (int i = 0_ i < nl.getLength()_ i++) {_				Node node = nl.item(i)__				if (isCandidateElement(node) && nodeNameEquals(node, QUALIFIER_ATTRIBUTE_ELEMENT)) {_					Element attributeEle = (Element) node__					String attributeName = attributeEle.getAttribute(KEY_ATTRIBUTE)__					String attributeValue = attributeEle.getAttribute(VALUE_ATTRIBUTE)__					if (StringUtils.hasLength(attributeName) && StringUtils.hasLength(attributeValue)) {_						BeanMetadataAttribute attribute = new BeanMetadataAttribute(attributeName, attributeValue)__						attribute.setSource(extractSource(attributeEle))__						qualifier.addMetadataAttribute(attribute)__					}_					else {_						error("Qualifier 'attribute' tag must have a 'name' and 'value'", attributeEle)__						return__					}_				}_			}_			bd.addQualifier(qualifier)__		}_		finally {_			this.parseState.pop()__		}_	};parse,a,qualifier,element;public,void,parse,qualifier,element,element,ele,abstract,bean,definition,bd,string,type,name,ele,get,attribute,if,string,utils,has,length,type,name,error,tag,qualifier,must,have,a,type,attribute,ele,return,this,parse,state,push,new,qualifier,entry,type,name,try,autowire,candidate,qualifier,qualifier,new,autowire,candidate,qualifier,type,name,qualifier,set,source,extract,source,ele,string,value,ele,get,attribute,if,string,utils,has,length,value,qualifier,set,attribute,autowire,candidate,qualifier,value,node,list,nl,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,attribute,ele,element,node,string,attribute,name,attribute,ele,get,attribute,string,attribute,value,attribute,ele,get,attribute,if,string,utils,has,length,attribute,name,string,utils,has,length,attribute,value,bean,metadata,attribute,attribute,new,bean,metadata,attribute,attribute,name,attribute,value,attribute,set,source,extract,source,attribute,ele,qualifier,add,metadata,attribute,attribute,else,error,qualifier,attribute,tag,must,have,a,name,and,value,attribute,ele,return,bd,add,qualifier,qualifier,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parseQualifierElement(Element ele, AbstractBeanDefinition bd);1351392612;Parse a qualifier element.;public void parseQualifierElement(Element ele, AbstractBeanDefinition bd) {_		String typeName = ele.getAttribute(TYPE_ATTRIBUTE)__		if (!StringUtils.hasLength(typeName)) {_			error("Tag 'qualifier' must have a 'type' attribute", ele)__			return__		}_		this.parseState.push(new QualifierEntry(typeName))__		try {_			AutowireCandidateQualifier qualifier = new AutowireCandidateQualifier(typeName)__			qualifier.setSource(extractSource(ele))__			String value = ele.getAttribute(VALUE_ATTRIBUTE)__			if (StringUtils.hasLength(value)) {_				qualifier.setAttribute(AutowireCandidateQualifier.VALUE_KEY, value)__			}_			NodeList nl = ele.getChildNodes()__			for (int i = 0_ i < nl.getLength()_ i++) {_				Node node = nl.item(i)__				if (isCandidateElement(node) && nodeNameEquals(node, QUALIFIER_ATTRIBUTE_ELEMENT)) {_					Element attributeEle = (Element) node__					String attributeName = attributeEle.getAttribute(KEY_ATTRIBUTE)__					String attributeValue = attributeEle.getAttribute(VALUE_ATTRIBUTE)__					if (StringUtils.hasLength(attributeName) && StringUtils.hasLength(attributeValue)) {_						BeanMetadataAttribute attribute = new BeanMetadataAttribute(attributeName, attributeValue)__						attribute.setSource(extractSource(attributeEle))__						qualifier.addMetadataAttribute(attribute)__					}_					else {_						error("Qualifier 'attribute' tag must have a 'name' and 'value'", attributeEle)__						return__					}_				}_			}_			bd.addQualifier(qualifier)__		}_		finally {_			this.parseState.pop()__		}_	};parse,a,qualifier,element;public,void,parse,qualifier,element,element,ele,abstract,bean,definition,bd,string,type,name,ele,get,attribute,if,string,utils,has,length,type,name,error,tag,qualifier,must,have,a,type,attribute,ele,return,this,parse,state,push,new,qualifier,entry,type,name,try,autowire,candidate,qualifier,qualifier,new,autowire,candidate,qualifier,type,name,qualifier,set,source,extract,source,ele,string,value,ele,get,attribute,if,string,utils,has,length,value,qualifier,set,attribute,autowire,candidate,qualifier,value,node,list,nl,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,attribute,ele,element,node,string,attribute,name,attribute,ele,get,attribute,string,attribute,value,attribute,ele,get,attribute,if,string,utils,has,length,attribute,name,string,utils,has,length,attribute,value,bean,metadata,attribute,attribute,new,bean,metadata,attribute,attribute,name,attribute,value,attribute,set,source,extract,source,attribute,ele,qualifier,add,metadata,attribute,attribute,else,error,qualifier,attribute,tag,must,have,a,name,and,value,attribute,ele,return,bd,add,qualifier,qualifier,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parseQualifierElement(Element ele, AbstractBeanDefinition bd);1351696936;Parse a qualifier element.;public void parseQualifierElement(Element ele, AbstractBeanDefinition bd) {_		String typeName = ele.getAttribute(TYPE_ATTRIBUTE)__		if (!StringUtils.hasLength(typeName)) {_			error("Tag 'qualifier' must have a 'type' attribute", ele)__			return__		}_		this.parseState.push(new QualifierEntry(typeName))__		try {_			AutowireCandidateQualifier qualifier = new AutowireCandidateQualifier(typeName)__			qualifier.setSource(extractSource(ele))__			String value = ele.getAttribute(VALUE_ATTRIBUTE)__			if (StringUtils.hasLength(value)) {_				qualifier.setAttribute(AutowireCandidateQualifier.VALUE_KEY, value)__			}_			NodeList nl = ele.getChildNodes()__			for (int i = 0_ i < nl.getLength()_ i++) {_				Node node = nl.item(i)__				if (isCandidateElement(node) && nodeNameEquals(node, QUALIFIER_ATTRIBUTE_ELEMENT)) {_					Element attributeEle = (Element) node__					String attributeName = attributeEle.getAttribute(KEY_ATTRIBUTE)__					String attributeValue = attributeEle.getAttribute(VALUE_ATTRIBUTE)__					if (StringUtils.hasLength(attributeName) && StringUtils.hasLength(attributeValue)) {_						BeanMetadataAttribute attribute = new BeanMetadataAttribute(attributeName, attributeValue)__						attribute.setSource(extractSource(attributeEle))__						qualifier.addMetadataAttribute(attribute)__					}_					else {_						error("Qualifier 'attribute' tag must have a 'name' and 'value'", attributeEle)__						return__					}_				}_			}_			bd.addQualifier(qualifier)__		}_		finally {_			this.parseState.pop()__		}_	};parse,a,qualifier,element;public,void,parse,qualifier,element,element,ele,abstract,bean,definition,bd,string,type,name,ele,get,attribute,if,string,utils,has,length,type,name,error,tag,qualifier,must,have,a,type,attribute,ele,return,this,parse,state,push,new,qualifier,entry,type,name,try,autowire,candidate,qualifier,qualifier,new,autowire,candidate,qualifier,type,name,qualifier,set,source,extract,source,ele,string,value,ele,get,attribute,if,string,utils,has,length,value,qualifier,set,attribute,autowire,candidate,qualifier,value,node,list,nl,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,attribute,ele,element,node,string,attribute,name,attribute,ele,get,attribute,string,attribute,value,attribute,ele,get,attribute,if,string,utils,has,length,attribute,name,string,utils,has,length,attribute,value,bean,metadata,attribute,attribute,new,bean,metadata,attribute,attribute,name,attribute,value,attribute,set,source,extract,source,attribute,ele,qualifier,add,metadata,attribute,attribute,else,error,qualifier,attribute,tag,must,have,a,name,and,value,attribute,ele,return,bd,add,qualifier,qualifier,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parseQualifierElement(Element ele, AbstractBeanDefinition bd);1356735495;Parse a qualifier element.;public void parseQualifierElement(Element ele, AbstractBeanDefinition bd) {_		String typeName = ele.getAttribute(TYPE_ATTRIBUTE)__		if (!StringUtils.hasLength(typeName)) {_			error("Tag 'qualifier' must have a 'type' attribute", ele)__			return__		}_		this.parseState.push(new QualifierEntry(typeName))__		try {_			AutowireCandidateQualifier qualifier = new AutowireCandidateQualifier(typeName)__			qualifier.setSource(extractSource(ele))__			String value = ele.getAttribute(VALUE_ATTRIBUTE)__			if (StringUtils.hasLength(value)) {_				qualifier.setAttribute(AutowireCandidateQualifier.VALUE_KEY, value)__			}_			NodeList nl = ele.getChildNodes()__			for (int i = 0_ i < nl.getLength()_ i++) {_				Node node = nl.item(i)__				if (isCandidateElement(node) && nodeNameEquals(node, QUALIFIER_ATTRIBUTE_ELEMENT)) {_					Element attributeEle = (Element) node__					String attributeName = attributeEle.getAttribute(KEY_ATTRIBUTE)__					String attributeValue = attributeEle.getAttribute(VALUE_ATTRIBUTE)__					if (StringUtils.hasLength(attributeName) && StringUtils.hasLength(attributeValue)) {_						BeanMetadataAttribute attribute = new BeanMetadataAttribute(attributeName, attributeValue)__						attribute.setSource(extractSource(attributeEle))__						qualifier.addMetadataAttribute(attribute)__					}_					else {_						error("Qualifier 'attribute' tag must have a 'name' and 'value'", attributeEle)__						return__					}_				}_			}_			bd.addQualifier(qualifier)__		}_		finally {_			this.parseState.pop()__		}_	};parse,a,qualifier,element;public,void,parse,qualifier,element,element,ele,abstract,bean,definition,bd,string,type,name,ele,get,attribute,if,string,utils,has,length,type,name,error,tag,qualifier,must,have,a,type,attribute,ele,return,this,parse,state,push,new,qualifier,entry,type,name,try,autowire,candidate,qualifier,qualifier,new,autowire,candidate,qualifier,type,name,qualifier,set,source,extract,source,ele,string,value,ele,get,attribute,if,string,utils,has,length,value,qualifier,set,attribute,autowire,candidate,qualifier,value,node,list,nl,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,attribute,ele,element,node,string,attribute,name,attribute,ele,get,attribute,string,attribute,value,attribute,ele,get,attribute,if,string,utils,has,length,attribute,name,string,utils,has,length,attribute,value,bean,metadata,attribute,attribute,new,bean,metadata,attribute,attribute,name,attribute,value,attribute,set,source,extract,source,attribute,ele,qualifier,add,metadata,attribute,attribute,else,error,qualifier,attribute,tag,must,have,a,name,and,value,attribute,ele,return,bd,add,qualifier,qualifier,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parseQualifierElement(Element ele, AbstractBeanDefinition bd);1357119417;Parse a qualifier element.;public void parseQualifierElement(Element ele, AbstractBeanDefinition bd) {_		String typeName = ele.getAttribute(TYPE_ATTRIBUTE)__		if (!StringUtils.hasLength(typeName)) {_			error("Tag 'qualifier' must have a 'type' attribute", ele)__			return__		}_		this.parseState.push(new QualifierEntry(typeName))__		try {_			AutowireCandidateQualifier qualifier = new AutowireCandidateQualifier(typeName)__			qualifier.setSource(extractSource(ele))__			String value = ele.getAttribute(VALUE_ATTRIBUTE)__			if (StringUtils.hasLength(value)) {_				qualifier.setAttribute(AutowireCandidateQualifier.VALUE_KEY, value)__			}_			NodeList nl = ele.getChildNodes()__			for (int i = 0_ i < nl.getLength()_ i++) {_				Node node = nl.item(i)__				if (isCandidateElement(node) && nodeNameEquals(node, QUALIFIER_ATTRIBUTE_ELEMENT)) {_					Element attributeEle = (Element) node__					String attributeName = attributeEle.getAttribute(KEY_ATTRIBUTE)__					String attributeValue = attributeEle.getAttribute(VALUE_ATTRIBUTE)__					if (StringUtils.hasLength(attributeName) && StringUtils.hasLength(attributeValue)) {_						BeanMetadataAttribute attribute = new BeanMetadataAttribute(attributeName, attributeValue)__						attribute.setSource(extractSource(attributeEle))__						qualifier.addMetadataAttribute(attribute)__					}_					else {_						error("Qualifier 'attribute' tag must have a 'name' and 'value'", attributeEle)__						return__					}_				}_			}_			bd.addQualifier(qualifier)__		}_		finally {_			this.parseState.pop()__		}_	};parse,a,qualifier,element;public,void,parse,qualifier,element,element,ele,abstract,bean,definition,bd,string,type,name,ele,get,attribute,if,string,utils,has,length,type,name,error,tag,qualifier,must,have,a,type,attribute,ele,return,this,parse,state,push,new,qualifier,entry,type,name,try,autowire,candidate,qualifier,qualifier,new,autowire,candidate,qualifier,type,name,qualifier,set,source,extract,source,ele,string,value,ele,get,attribute,if,string,utils,has,length,value,qualifier,set,attribute,autowire,candidate,qualifier,value,node,list,nl,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,attribute,ele,element,node,string,attribute,name,attribute,ele,get,attribute,string,attribute,value,attribute,ele,get,attribute,if,string,utils,has,length,attribute,name,string,utils,has,length,attribute,value,bean,metadata,attribute,attribute,new,bean,metadata,attribute,attribute,name,attribute,value,attribute,set,source,extract,source,attribute,ele,qualifier,add,metadata,attribute,attribute,else,error,qualifier,attribute,tag,must,have,a,name,and,value,attribute,ele,return,bd,add,qualifier,qualifier,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parseQualifierElement(Element ele, AbstractBeanDefinition bd);1367943112;Parse a qualifier element.;public void parseQualifierElement(Element ele, AbstractBeanDefinition bd) {_		String typeName = ele.getAttribute(TYPE_ATTRIBUTE)__		if (!StringUtils.hasLength(typeName)) {_			error("Tag 'qualifier' must have a 'type' attribute", ele)__			return__		}_		this.parseState.push(new QualifierEntry(typeName))__		try {_			AutowireCandidateQualifier qualifier = new AutowireCandidateQualifier(typeName)__			qualifier.setSource(extractSource(ele))__			String value = ele.getAttribute(VALUE_ATTRIBUTE)__			if (StringUtils.hasLength(value)) {_				qualifier.setAttribute(AutowireCandidateQualifier.VALUE_KEY, value)__			}_			NodeList nl = ele.getChildNodes()__			for (int i = 0_ i < nl.getLength()_ i++) {_				Node node = nl.item(i)__				if (isCandidateElement(node) && nodeNameEquals(node, QUALIFIER_ATTRIBUTE_ELEMENT)) {_					Element attributeEle = (Element) node__					String attributeName = attributeEle.getAttribute(KEY_ATTRIBUTE)__					String attributeValue = attributeEle.getAttribute(VALUE_ATTRIBUTE)__					if (StringUtils.hasLength(attributeName) && StringUtils.hasLength(attributeValue)) {_						BeanMetadataAttribute attribute = new BeanMetadataAttribute(attributeName, attributeValue)__						attribute.setSource(extractSource(attributeEle))__						qualifier.addMetadataAttribute(attribute)__					}_					else {_						error("Qualifier 'attribute' tag must have a 'name' and 'value'", attributeEle)__						return__					}_				}_			}_			bd.addQualifier(qualifier)__		}_		finally {_			this.parseState.pop()__		}_	};parse,a,qualifier,element;public,void,parse,qualifier,element,element,ele,abstract,bean,definition,bd,string,type,name,ele,get,attribute,if,string,utils,has,length,type,name,error,tag,qualifier,must,have,a,type,attribute,ele,return,this,parse,state,push,new,qualifier,entry,type,name,try,autowire,candidate,qualifier,qualifier,new,autowire,candidate,qualifier,type,name,qualifier,set,source,extract,source,ele,string,value,ele,get,attribute,if,string,utils,has,length,value,qualifier,set,attribute,autowire,candidate,qualifier,value,node,list,nl,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,attribute,ele,element,node,string,attribute,name,attribute,ele,get,attribute,string,attribute,value,attribute,ele,get,attribute,if,string,utils,has,length,attribute,name,string,utils,has,length,attribute,value,bean,metadata,attribute,attribute,new,bean,metadata,attribute,attribute,name,attribute,value,attribute,set,source,extract,source,attribute,ele,qualifier,add,metadata,attribute,attribute,else,error,qualifier,attribute,tag,must,have,a,name,and,value,attribute,ele,return,bd,add,qualifier,qualifier,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parseQualifierElement(Element ele, AbstractBeanDefinition bd);1382030648;Parse a qualifier element.;public void parseQualifierElement(Element ele, AbstractBeanDefinition bd) {_		String typeName = ele.getAttribute(TYPE_ATTRIBUTE)__		if (!StringUtils.hasLength(typeName)) {_			error("Tag 'qualifier' must have a 'type' attribute", ele)__			return__		}_		this.parseState.push(new QualifierEntry(typeName))__		try {_			AutowireCandidateQualifier qualifier = new AutowireCandidateQualifier(typeName)__			qualifier.setSource(extractSource(ele))__			String value = ele.getAttribute(VALUE_ATTRIBUTE)__			if (StringUtils.hasLength(value)) {_				qualifier.setAttribute(AutowireCandidateQualifier.VALUE_KEY, value)__			}_			NodeList nl = ele.getChildNodes()__			for (int i = 0_ i < nl.getLength()_ i++) {_				Node node = nl.item(i)__				if (isCandidateElement(node) && nodeNameEquals(node, QUALIFIER_ATTRIBUTE_ELEMENT)) {_					Element attributeEle = (Element) node__					String attributeName = attributeEle.getAttribute(KEY_ATTRIBUTE)__					String attributeValue = attributeEle.getAttribute(VALUE_ATTRIBUTE)__					if (StringUtils.hasLength(attributeName) && StringUtils.hasLength(attributeValue)) {_						BeanMetadataAttribute attribute = new BeanMetadataAttribute(attributeName, attributeValue)__						attribute.setSource(extractSource(attributeEle))__						qualifier.addMetadataAttribute(attribute)__					}_					else {_						error("Qualifier 'attribute' tag must have a 'name' and 'value'", attributeEle)__						return__					}_				}_			}_			bd.addQualifier(qualifier)__		}_		finally {_			this.parseState.pop()__		}_	};parse,a,qualifier,element;public,void,parse,qualifier,element,element,ele,abstract,bean,definition,bd,string,type,name,ele,get,attribute,if,string,utils,has,length,type,name,error,tag,qualifier,must,have,a,type,attribute,ele,return,this,parse,state,push,new,qualifier,entry,type,name,try,autowire,candidate,qualifier,qualifier,new,autowire,candidate,qualifier,type,name,qualifier,set,source,extract,source,ele,string,value,ele,get,attribute,if,string,utils,has,length,value,qualifier,set,attribute,autowire,candidate,qualifier,value,node,list,nl,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,attribute,ele,element,node,string,attribute,name,attribute,ele,get,attribute,string,attribute,value,attribute,ele,get,attribute,if,string,utils,has,length,attribute,name,string,utils,has,length,attribute,value,bean,metadata,attribute,attribute,new,bean,metadata,attribute,attribute,name,attribute,value,attribute,set,source,extract,source,attribute,ele,qualifier,add,metadata,attribute,attribute,else,error,qualifier,attribute,tag,must,have,a,name,and,value,attribute,ele,return,bd,add,qualifier,qualifier,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parseQualifierElement(Element ele, AbstractBeanDefinition bd);1385412762;Parse a qualifier element.;public void parseQualifierElement(Element ele, AbstractBeanDefinition bd) {_		String typeName = ele.getAttribute(TYPE_ATTRIBUTE)__		if (!StringUtils.hasLength(typeName)) {_			error("Tag 'qualifier' must have a 'type' attribute", ele)__			return__		}_		this.parseState.push(new QualifierEntry(typeName))__		try {_			AutowireCandidateQualifier qualifier = new AutowireCandidateQualifier(typeName)__			qualifier.setSource(extractSource(ele))__			String value = ele.getAttribute(VALUE_ATTRIBUTE)__			if (StringUtils.hasLength(value)) {_				qualifier.setAttribute(AutowireCandidateQualifier.VALUE_KEY, value)__			}_			NodeList nl = ele.getChildNodes()__			for (int i = 0_ i < nl.getLength()_ i++) {_				Node node = nl.item(i)__				if (isCandidateElement(node) && nodeNameEquals(node, QUALIFIER_ATTRIBUTE_ELEMENT)) {_					Element attributeEle = (Element) node__					String attributeName = attributeEle.getAttribute(KEY_ATTRIBUTE)__					String attributeValue = attributeEle.getAttribute(VALUE_ATTRIBUTE)__					if (StringUtils.hasLength(attributeName) && StringUtils.hasLength(attributeValue)) {_						BeanMetadataAttribute attribute = new BeanMetadataAttribute(attributeName, attributeValue)__						attribute.setSource(extractSource(attributeEle))__						qualifier.addMetadataAttribute(attribute)__					}_					else {_						error("Qualifier 'attribute' tag must have a 'name' and 'value'", attributeEle)__						return__					}_				}_			}_			bd.addQualifier(qualifier)__		}_		finally {_			this.parseState.pop()__		}_	};parse,a,qualifier,element;public,void,parse,qualifier,element,element,ele,abstract,bean,definition,bd,string,type,name,ele,get,attribute,if,string,utils,has,length,type,name,error,tag,qualifier,must,have,a,type,attribute,ele,return,this,parse,state,push,new,qualifier,entry,type,name,try,autowire,candidate,qualifier,qualifier,new,autowire,candidate,qualifier,type,name,qualifier,set,source,extract,source,ele,string,value,ele,get,attribute,if,string,utils,has,length,value,qualifier,set,attribute,autowire,candidate,qualifier,value,node,list,nl,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,attribute,ele,element,node,string,attribute,name,attribute,ele,get,attribute,string,attribute,value,attribute,ele,get,attribute,if,string,utils,has,length,attribute,name,string,utils,has,length,attribute,value,bean,metadata,attribute,attribute,new,bean,metadata,attribute,attribute,name,attribute,value,attribute,set,source,extract,source,attribute,ele,qualifier,add,metadata,attribute,attribute,else,error,qualifier,attribute,tag,must,have,a,name,and,value,attribute,ele,return,bd,add,qualifier,qualifier,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parseQualifierElement(Element ele, AbstractBeanDefinition bd);1410953197;Parse a qualifier element.;public void parseQualifierElement(Element ele, AbstractBeanDefinition bd) {_		String typeName = ele.getAttribute(TYPE_ATTRIBUTE)__		if (!StringUtils.hasLength(typeName)) {_			error("Tag 'qualifier' must have a 'type' attribute", ele)__			return__		}_		this.parseState.push(new QualifierEntry(typeName))__		try {_			AutowireCandidateQualifier qualifier = new AutowireCandidateQualifier(typeName)__			qualifier.setSource(extractSource(ele))__			String value = ele.getAttribute(VALUE_ATTRIBUTE)__			if (StringUtils.hasLength(value)) {_				qualifier.setAttribute(AutowireCandidateQualifier.VALUE_KEY, value)__			}_			NodeList nl = ele.getChildNodes()__			for (int i = 0_ i < nl.getLength()_ i++) {_				Node node = nl.item(i)__				if (isCandidateElement(node) && nodeNameEquals(node, QUALIFIER_ATTRIBUTE_ELEMENT)) {_					Element attributeEle = (Element) node__					String attributeName = attributeEle.getAttribute(KEY_ATTRIBUTE)__					String attributeValue = attributeEle.getAttribute(VALUE_ATTRIBUTE)__					if (StringUtils.hasLength(attributeName) && StringUtils.hasLength(attributeValue)) {_						BeanMetadataAttribute attribute = new BeanMetadataAttribute(attributeName, attributeValue)__						attribute.setSource(extractSource(attributeEle))__						qualifier.addMetadataAttribute(attribute)__					}_					else {_						error("Qualifier 'attribute' tag must have a 'name' and 'value'", attributeEle)__						return__					}_				}_			}_			bd.addQualifier(qualifier)__		}_		finally {_			this.parseState.pop()__		}_	};parse,a,qualifier,element;public,void,parse,qualifier,element,element,ele,abstract,bean,definition,bd,string,type,name,ele,get,attribute,if,string,utils,has,length,type,name,error,tag,qualifier,must,have,a,type,attribute,ele,return,this,parse,state,push,new,qualifier,entry,type,name,try,autowire,candidate,qualifier,qualifier,new,autowire,candidate,qualifier,type,name,qualifier,set,source,extract,source,ele,string,value,ele,get,attribute,if,string,utils,has,length,value,qualifier,set,attribute,autowire,candidate,qualifier,value,node,list,nl,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,attribute,ele,element,node,string,attribute,name,attribute,ele,get,attribute,string,attribute,value,attribute,ele,get,attribute,if,string,utils,has,length,attribute,name,string,utils,has,length,attribute,value,bean,metadata,attribute,attribute,new,bean,metadata,attribute,attribute,name,attribute,value,attribute,set,source,extract,source,attribute,ele,qualifier,add,metadata,attribute,attribute,else,error,qualifier,attribute,tag,must,have,a,name,and,value,attribute,ele,return,bd,add,qualifier,qualifier,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parseQualifierElement(Element ele, AbstractBeanDefinition bd);1411599760;Parse a qualifier element.;public void parseQualifierElement(Element ele, AbstractBeanDefinition bd) {_		String typeName = ele.getAttribute(TYPE_ATTRIBUTE)__		if (!StringUtils.hasLength(typeName)) {_			error("Tag 'qualifier' must have a 'type' attribute", ele)__			return__		}_		this.parseState.push(new QualifierEntry(typeName))__		try {_			AutowireCandidateQualifier qualifier = new AutowireCandidateQualifier(typeName)__			qualifier.setSource(extractSource(ele))__			String value = ele.getAttribute(VALUE_ATTRIBUTE)__			if (StringUtils.hasLength(value)) {_				qualifier.setAttribute(AutowireCandidateQualifier.VALUE_KEY, value)__			}_			NodeList nl = ele.getChildNodes()__			for (int i = 0_ i < nl.getLength()_ i++) {_				Node node = nl.item(i)__				if (isCandidateElement(node) && nodeNameEquals(node, QUALIFIER_ATTRIBUTE_ELEMENT)) {_					Element attributeEle = (Element) node__					String attributeName = attributeEle.getAttribute(KEY_ATTRIBUTE)__					String attributeValue = attributeEle.getAttribute(VALUE_ATTRIBUTE)__					if (StringUtils.hasLength(attributeName) && StringUtils.hasLength(attributeValue)) {_						BeanMetadataAttribute attribute = new BeanMetadataAttribute(attributeName, attributeValue)__						attribute.setSource(extractSource(attributeEle))__						qualifier.addMetadataAttribute(attribute)__					}_					else {_						error("Qualifier 'attribute' tag must have a 'name' and 'value'", attributeEle)__						return__					}_				}_			}_			bd.addQualifier(qualifier)__		}_		finally {_			this.parseState.pop()__		}_	};parse,a,qualifier,element;public,void,parse,qualifier,element,element,ele,abstract,bean,definition,bd,string,type,name,ele,get,attribute,if,string,utils,has,length,type,name,error,tag,qualifier,must,have,a,type,attribute,ele,return,this,parse,state,push,new,qualifier,entry,type,name,try,autowire,candidate,qualifier,qualifier,new,autowire,candidate,qualifier,type,name,qualifier,set,source,extract,source,ele,string,value,ele,get,attribute,if,string,utils,has,length,value,qualifier,set,attribute,autowire,candidate,qualifier,value,node,list,nl,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,attribute,ele,element,node,string,attribute,name,attribute,ele,get,attribute,string,attribute,value,attribute,ele,get,attribute,if,string,utils,has,length,attribute,name,string,utils,has,length,attribute,value,bean,metadata,attribute,attribute,new,bean,metadata,attribute,attribute,name,attribute,value,attribute,set,source,extract,source,attribute,ele,qualifier,add,metadata,attribute,attribute,else,error,qualifier,attribute,tag,must,have,a,name,and,value,attribute,ele,return,bd,add,qualifier,qualifier,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parseQualifierElement(Element ele, AbstractBeanDefinition bd);1419966315;Parse a qualifier element.;public void parseQualifierElement(Element ele, AbstractBeanDefinition bd) {_		String typeName = ele.getAttribute(TYPE_ATTRIBUTE)__		if (!StringUtils.hasLength(typeName)) {_			error("Tag 'qualifier' must have a 'type' attribute", ele)__			return__		}_		this.parseState.push(new QualifierEntry(typeName))__		try {_			AutowireCandidateQualifier qualifier = new AutowireCandidateQualifier(typeName)__			qualifier.setSource(extractSource(ele))__			String value = ele.getAttribute(VALUE_ATTRIBUTE)__			if (StringUtils.hasLength(value)) {_				qualifier.setAttribute(AutowireCandidateQualifier.VALUE_KEY, value)__			}_			NodeList nl = ele.getChildNodes()__			for (int i = 0_ i < nl.getLength()_ i++) {_				Node node = nl.item(i)__				if (isCandidateElement(node) && nodeNameEquals(node, QUALIFIER_ATTRIBUTE_ELEMENT)) {_					Element attributeEle = (Element) node__					String attributeName = attributeEle.getAttribute(KEY_ATTRIBUTE)__					String attributeValue = attributeEle.getAttribute(VALUE_ATTRIBUTE)__					if (StringUtils.hasLength(attributeName) && StringUtils.hasLength(attributeValue)) {_						BeanMetadataAttribute attribute = new BeanMetadataAttribute(attributeName, attributeValue)__						attribute.setSource(extractSource(attributeEle))__						qualifier.addMetadataAttribute(attribute)__					}_					else {_						error("Qualifier 'attribute' tag must have a 'name' and 'value'", attributeEle)__						return__					}_				}_			}_			bd.addQualifier(qualifier)__		}_		finally {_			this.parseState.pop()__		}_	};parse,a,qualifier,element;public,void,parse,qualifier,element,element,ele,abstract,bean,definition,bd,string,type,name,ele,get,attribute,if,string,utils,has,length,type,name,error,tag,qualifier,must,have,a,type,attribute,ele,return,this,parse,state,push,new,qualifier,entry,type,name,try,autowire,candidate,qualifier,qualifier,new,autowire,candidate,qualifier,type,name,qualifier,set,source,extract,source,ele,string,value,ele,get,attribute,if,string,utils,has,length,value,qualifier,set,attribute,autowire,candidate,qualifier,value,node,list,nl,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,attribute,ele,element,node,string,attribute,name,attribute,ele,get,attribute,string,attribute,value,attribute,ele,get,attribute,if,string,utils,has,length,attribute,name,string,utils,has,length,attribute,value,bean,metadata,attribute,attribute,new,bean,metadata,attribute,attribute,name,attribute,value,attribute,set,source,extract,source,attribute,ele,qualifier,add,metadata,attribute,attribute,else,error,qualifier,attribute,tag,must,have,a,name,and,value,attribute,ele,return,bd,add,qualifier,qualifier,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parseQualifierElement(Element ele, AbstractBeanDefinition bd);1431958785;Parse a qualifier element.;public void parseQualifierElement(Element ele, AbstractBeanDefinition bd) {_		String typeName = ele.getAttribute(TYPE_ATTRIBUTE)__		if (!StringUtils.hasLength(typeName)) {_			error("Tag 'qualifier' must have a 'type' attribute", ele)__			return__		}_		this.parseState.push(new QualifierEntry(typeName))__		try {_			AutowireCandidateQualifier qualifier = new AutowireCandidateQualifier(typeName)__			qualifier.setSource(extractSource(ele))__			String value = ele.getAttribute(VALUE_ATTRIBUTE)__			if (StringUtils.hasLength(value)) {_				qualifier.setAttribute(AutowireCandidateQualifier.VALUE_KEY, value)__			}_			NodeList nl = ele.getChildNodes()__			for (int i = 0_ i < nl.getLength()_ i++) {_				Node node = nl.item(i)__				if (isCandidateElement(node) && nodeNameEquals(node, QUALIFIER_ATTRIBUTE_ELEMENT)) {_					Element attributeEle = (Element) node__					String attributeName = attributeEle.getAttribute(KEY_ATTRIBUTE)__					String attributeValue = attributeEle.getAttribute(VALUE_ATTRIBUTE)__					if (StringUtils.hasLength(attributeName) && StringUtils.hasLength(attributeValue)) {_						BeanMetadataAttribute attribute = new BeanMetadataAttribute(attributeName, attributeValue)__						attribute.setSource(extractSource(attributeEle))__						qualifier.addMetadataAttribute(attribute)__					}_					else {_						error("Qualifier 'attribute' tag must have a 'name' and 'value'", attributeEle)__						return__					}_				}_			}_			bd.addQualifier(qualifier)__		}_		finally {_			this.parseState.pop()__		}_	};parse,a,qualifier,element;public,void,parse,qualifier,element,element,ele,abstract,bean,definition,bd,string,type,name,ele,get,attribute,if,string,utils,has,length,type,name,error,tag,qualifier,must,have,a,type,attribute,ele,return,this,parse,state,push,new,qualifier,entry,type,name,try,autowire,candidate,qualifier,qualifier,new,autowire,candidate,qualifier,type,name,qualifier,set,source,extract,source,ele,string,value,ele,get,attribute,if,string,utils,has,length,value,qualifier,set,attribute,autowire,candidate,qualifier,value,node,list,nl,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,attribute,ele,element,node,string,attribute,name,attribute,ele,get,attribute,string,attribute,value,attribute,ele,get,attribute,if,string,utils,has,length,attribute,name,string,utils,has,length,attribute,value,bean,metadata,attribute,attribute,new,bean,metadata,attribute,attribute,name,attribute,value,attribute,set,source,extract,source,attribute,ele,qualifier,add,metadata,attribute,attribute,else,error,qualifier,attribute,tag,must,have,a,name,and,value,attribute,ele,return,bd,add,qualifier,qualifier,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parseQualifierElement(Element ele, AbstractBeanDefinition bd);1432135182;Parse a qualifier element.;public void parseQualifierElement(Element ele, AbstractBeanDefinition bd) {_		String typeName = ele.getAttribute(TYPE_ATTRIBUTE)__		if (!StringUtils.hasLength(typeName)) {_			error("Tag 'qualifier' must have a 'type' attribute", ele)__			return__		}_		this.parseState.push(new QualifierEntry(typeName))__		try {_			AutowireCandidateQualifier qualifier = new AutowireCandidateQualifier(typeName)__			qualifier.setSource(extractSource(ele))__			String value = ele.getAttribute(VALUE_ATTRIBUTE)__			if (StringUtils.hasLength(value)) {_				qualifier.setAttribute(AutowireCandidateQualifier.VALUE_KEY, value)__			}_			NodeList nl = ele.getChildNodes()__			for (int i = 0_ i < nl.getLength()_ i++) {_				Node node = nl.item(i)__				if (isCandidateElement(node) && nodeNameEquals(node, QUALIFIER_ATTRIBUTE_ELEMENT)) {_					Element attributeEle = (Element) node__					String attributeName = attributeEle.getAttribute(KEY_ATTRIBUTE)__					String attributeValue = attributeEle.getAttribute(VALUE_ATTRIBUTE)__					if (StringUtils.hasLength(attributeName) && StringUtils.hasLength(attributeValue)) {_						BeanMetadataAttribute attribute = new BeanMetadataAttribute(attributeName, attributeValue)__						attribute.setSource(extractSource(attributeEle))__						qualifier.addMetadataAttribute(attribute)__					}_					else {_						error("Qualifier 'attribute' tag must have a 'name' and 'value'", attributeEle)__						return__					}_				}_			}_			bd.addQualifier(qualifier)__		}_		finally {_			this.parseState.pop()__		}_	};parse,a,qualifier,element;public,void,parse,qualifier,element,element,ele,abstract,bean,definition,bd,string,type,name,ele,get,attribute,if,string,utils,has,length,type,name,error,tag,qualifier,must,have,a,type,attribute,ele,return,this,parse,state,push,new,qualifier,entry,type,name,try,autowire,candidate,qualifier,qualifier,new,autowire,candidate,qualifier,type,name,qualifier,set,source,extract,source,ele,string,value,ele,get,attribute,if,string,utils,has,length,value,qualifier,set,attribute,autowire,candidate,qualifier,value,node,list,nl,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,attribute,ele,element,node,string,attribute,name,attribute,ele,get,attribute,string,attribute,value,attribute,ele,get,attribute,if,string,utils,has,length,attribute,name,string,utils,has,length,attribute,value,bean,metadata,attribute,attribute,new,bean,metadata,attribute,attribute,name,attribute,value,attribute,set,source,extract,source,attribute,ele,qualifier,add,metadata,attribute,attribute,else,error,qualifier,attribute,tag,must,have,a,name,and,value,attribute,ele,return,bd,add,qualifier,qualifier,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parseQualifierElement(Element ele, AbstractBeanDefinition bd);1447323728;Parse a qualifier element.;public void parseQualifierElement(Element ele, AbstractBeanDefinition bd) {_		String typeName = ele.getAttribute(TYPE_ATTRIBUTE)__		if (!StringUtils.hasLength(typeName)) {_			error("Tag 'qualifier' must have a 'type' attribute", ele)__			return__		}_		this.parseState.push(new QualifierEntry(typeName))__		try {_			AutowireCandidateQualifier qualifier = new AutowireCandidateQualifier(typeName)__			qualifier.setSource(extractSource(ele))__			String value = ele.getAttribute(VALUE_ATTRIBUTE)__			if (StringUtils.hasLength(value)) {_				qualifier.setAttribute(AutowireCandidateQualifier.VALUE_KEY, value)__			}_			NodeList nl = ele.getChildNodes()__			for (int i = 0_ i < nl.getLength()_ i++) {_				Node node = nl.item(i)__				if (isCandidateElement(node) && nodeNameEquals(node, QUALIFIER_ATTRIBUTE_ELEMENT)) {_					Element attributeEle = (Element) node__					String attributeName = attributeEle.getAttribute(KEY_ATTRIBUTE)__					String attributeValue = attributeEle.getAttribute(VALUE_ATTRIBUTE)__					if (StringUtils.hasLength(attributeName) && StringUtils.hasLength(attributeValue)) {_						BeanMetadataAttribute attribute = new BeanMetadataAttribute(attributeName, attributeValue)__						attribute.setSource(extractSource(attributeEle))__						qualifier.addMetadataAttribute(attribute)__					}_					else {_						error("Qualifier 'attribute' tag must have a 'name' and 'value'", attributeEle)__						return__					}_				}_			}_			bd.addQualifier(qualifier)__		}_		finally {_			this.parseState.pop()__		}_	};parse,a,qualifier,element;public,void,parse,qualifier,element,element,ele,abstract,bean,definition,bd,string,type,name,ele,get,attribute,if,string,utils,has,length,type,name,error,tag,qualifier,must,have,a,type,attribute,ele,return,this,parse,state,push,new,qualifier,entry,type,name,try,autowire,candidate,qualifier,qualifier,new,autowire,candidate,qualifier,type,name,qualifier,set,source,extract,source,ele,string,value,ele,get,attribute,if,string,utils,has,length,value,qualifier,set,attribute,autowire,candidate,qualifier,value,node,list,nl,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,attribute,ele,element,node,string,attribute,name,attribute,ele,get,attribute,string,attribute,value,attribute,ele,get,attribute,if,string,utils,has,length,attribute,name,string,utils,has,length,attribute,value,bean,metadata,attribute,attribute,new,bean,metadata,attribute,attribute,name,attribute,value,attribute,set,source,extract,source,attribute,ele,qualifier,add,metadata,attribute,attribute,else,error,qualifier,attribute,tag,must,have,a,name,and,value,attribute,ele,return,bd,add,qualifier,qualifier,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parseQualifierElement(Element ele, AbstractBeanDefinition bd);1467726769;Parse a qualifier element.;public void parseQualifierElement(Element ele, AbstractBeanDefinition bd) {_		String typeName = ele.getAttribute(TYPE_ATTRIBUTE)__		if (!StringUtils.hasLength(typeName)) {_			error("Tag 'qualifier' must have a 'type' attribute", ele)__			return__		}_		this.parseState.push(new QualifierEntry(typeName))__		try {_			AutowireCandidateQualifier qualifier = new AutowireCandidateQualifier(typeName)__			qualifier.setSource(extractSource(ele))__			String value = ele.getAttribute(VALUE_ATTRIBUTE)__			if (StringUtils.hasLength(value)) {_				qualifier.setAttribute(AutowireCandidateQualifier.VALUE_KEY, value)__			}_			NodeList nl = ele.getChildNodes()__			for (int i = 0_ i < nl.getLength()_ i++) {_				Node node = nl.item(i)__				if (isCandidateElement(node) && nodeNameEquals(node, QUALIFIER_ATTRIBUTE_ELEMENT)) {_					Element attributeEle = (Element) node__					String attributeName = attributeEle.getAttribute(KEY_ATTRIBUTE)__					String attributeValue = attributeEle.getAttribute(VALUE_ATTRIBUTE)__					if (StringUtils.hasLength(attributeName) && StringUtils.hasLength(attributeValue)) {_						BeanMetadataAttribute attribute = new BeanMetadataAttribute(attributeName, attributeValue)__						attribute.setSource(extractSource(attributeEle))__						qualifier.addMetadataAttribute(attribute)__					}_					else {_						error("Qualifier 'attribute' tag must have a 'name' and 'value'", attributeEle)__						return__					}_				}_			}_			bd.addQualifier(qualifier)__		}_		finally {_			this.parseState.pop()__		}_	};parse,a,qualifier,element;public,void,parse,qualifier,element,element,ele,abstract,bean,definition,bd,string,type,name,ele,get,attribute,if,string,utils,has,length,type,name,error,tag,qualifier,must,have,a,type,attribute,ele,return,this,parse,state,push,new,qualifier,entry,type,name,try,autowire,candidate,qualifier,qualifier,new,autowire,candidate,qualifier,type,name,qualifier,set,source,extract,source,ele,string,value,ele,get,attribute,if,string,utils,has,length,value,qualifier,set,attribute,autowire,candidate,qualifier,value,node,list,nl,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,attribute,ele,element,node,string,attribute,name,attribute,ele,get,attribute,string,attribute,value,attribute,ele,get,attribute,if,string,utils,has,length,attribute,name,string,utils,has,length,attribute,value,bean,metadata,attribute,attribute,new,bean,metadata,attribute,attribute,name,attribute,value,attribute,set,source,extract,source,attribute,ele,qualifier,add,metadata,attribute,attribute,else,error,qualifier,attribute,tag,must,have,a,name,and,value,attribute,ele,return,bd,add,qualifier,qualifier,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parseQualifierElement(Element ele, AbstractBeanDefinition bd);1467730834;Parse a qualifier element.;public void parseQualifierElement(Element ele, AbstractBeanDefinition bd) {_		String typeName = ele.getAttribute(TYPE_ATTRIBUTE)__		if (!StringUtils.hasLength(typeName)) {_			error("Tag 'qualifier' must have a 'type' attribute", ele)__			return__		}_		this.parseState.push(new QualifierEntry(typeName))__		try {_			AutowireCandidateQualifier qualifier = new AutowireCandidateQualifier(typeName)__			qualifier.setSource(extractSource(ele))__			String value = ele.getAttribute(VALUE_ATTRIBUTE)__			if (StringUtils.hasLength(value)) {_				qualifier.setAttribute(AutowireCandidateQualifier.VALUE_KEY, value)__			}_			NodeList nl = ele.getChildNodes()__			for (int i = 0_ i < nl.getLength()_ i++) {_				Node node = nl.item(i)__				if (isCandidateElement(node) && nodeNameEquals(node, QUALIFIER_ATTRIBUTE_ELEMENT)) {_					Element attributeEle = (Element) node__					String attributeName = attributeEle.getAttribute(KEY_ATTRIBUTE)__					String attributeValue = attributeEle.getAttribute(VALUE_ATTRIBUTE)__					if (StringUtils.hasLength(attributeName) && StringUtils.hasLength(attributeValue)) {_						BeanMetadataAttribute attribute = new BeanMetadataAttribute(attributeName, attributeValue)__						attribute.setSource(extractSource(attributeEle))__						qualifier.addMetadataAttribute(attribute)__					}_					else {_						error("Qualifier 'attribute' tag must have a 'name' and 'value'", attributeEle)__						return__					}_				}_			}_			bd.addQualifier(qualifier)__		}_		finally {_			this.parseState.pop()__		}_	};parse,a,qualifier,element;public,void,parse,qualifier,element,element,ele,abstract,bean,definition,bd,string,type,name,ele,get,attribute,if,string,utils,has,length,type,name,error,tag,qualifier,must,have,a,type,attribute,ele,return,this,parse,state,push,new,qualifier,entry,type,name,try,autowire,candidate,qualifier,qualifier,new,autowire,candidate,qualifier,type,name,qualifier,set,source,extract,source,ele,string,value,ele,get,attribute,if,string,utils,has,length,value,qualifier,set,attribute,autowire,candidate,qualifier,value,node,list,nl,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,attribute,ele,element,node,string,attribute,name,attribute,ele,get,attribute,string,attribute,value,attribute,ele,get,attribute,if,string,utils,has,length,attribute,name,string,utils,has,length,attribute,value,bean,metadata,attribute,attribute,new,bean,metadata,attribute,attribute,name,attribute,value,attribute,set,source,extract,source,attribute,ele,qualifier,add,metadata,attribute,attribute,else,error,qualifier,attribute,tag,must,have,a,name,and,value,attribute,ele,return,bd,add,qualifier,qualifier,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parseQualifierElement(Element ele, AbstractBeanDefinition bd);1467744603;Parse a qualifier element.;public void parseQualifierElement(Element ele, AbstractBeanDefinition bd) {_		String typeName = ele.getAttribute(TYPE_ATTRIBUTE)__		if (!StringUtils.hasLength(typeName)) {_			error("Tag 'qualifier' must have a 'type' attribute", ele)__			return__		}_		this.parseState.push(new QualifierEntry(typeName))__		try {_			AutowireCandidateQualifier qualifier = new AutowireCandidateQualifier(typeName)__			qualifier.setSource(extractSource(ele))__			String value = ele.getAttribute(VALUE_ATTRIBUTE)__			if (StringUtils.hasLength(value)) {_				qualifier.setAttribute(AutowireCandidateQualifier.VALUE_KEY, value)__			}_			NodeList nl = ele.getChildNodes()__			for (int i = 0_ i < nl.getLength()_ i++) {_				Node node = nl.item(i)__				if (isCandidateElement(node) && nodeNameEquals(node, QUALIFIER_ATTRIBUTE_ELEMENT)) {_					Element attributeEle = (Element) node__					String attributeName = attributeEle.getAttribute(KEY_ATTRIBUTE)__					String attributeValue = attributeEle.getAttribute(VALUE_ATTRIBUTE)__					if (StringUtils.hasLength(attributeName) && StringUtils.hasLength(attributeValue)) {_						BeanMetadataAttribute attribute = new BeanMetadataAttribute(attributeName, attributeValue)__						attribute.setSource(extractSource(attributeEle))__						qualifier.addMetadataAttribute(attribute)__					}_					else {_						error("Qualifier 'attribute' tag must have a 'name' and 'value'", attributeEle)__						return__					}_				}_			}_			bd.addQualifier(qualifier)__		}_		finally {_			this.parseState.pop()__		}_	};parse,a,qualifier,element;public,void,parse,qualifier,element,element,ele,abstract,bean,definition,bd,string,type,name,ele,get,attribute,if,string,utils,has,length,type,name,error,tag,qualifier,must,have,a,type,attribute,ele,return,this,parse,state,push,new,qualifier,entry,type,name,try,autowire,candidate,qualifier,qualifier,new,autowire,candidate,qualifier,type,name,qualifier,set,source,extract,source,ele,string,value,ele,get,attribute,if,string,utils,has,length,value,qualifier,set,attribute,autowire,candidate,qualifier,value,node,list,nl,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,attribute,ele,element,node,string,attribute,name,attribute,ele,get,attribute,string,attribute,value,attribute,ele,get,attribute,if,string,utils,has,length,attribute,name,string,utils,has,length,attribute,value,bean,metadata,attribute,attribute,new,bean,metadata,attribute,attribute,name,attribute,value,attribute,set,source,extract,source,attribute,ele,qualifier,add,metadata,attribute,attribute,else,error,qualifier,attribute,tag,must,have,a,name,and,value,attribute,ele,return,bd,add,qualifier,qualifier,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parseQualifierElement(Element ele, AbstractBeanDefinition bd);1487245676;Parse a qualifier element.;public void parseQualifierElement(Element ele, AbstractBeanDefinition bd) {_		String typeName = ele.getAttribute(TYPE_ATTRIBUTE)__		if (!StringUtils.hasLength(typeName)) {_			error("Tag 'qualifier' must have a 'type' attribute", ele)__			return__		}_		this.parseState.push(new QualifierEntry(typeName))__		try {_			AutowireCandidateQualifier qualifier = new AutowireCandidateQualifier(typeName)__			qualifier.setSource(extractSource(ele))__			String value = ele.getAttribute(VALUE_ATTRIBUTE)__			if (StringUtils.hasLength(value)) {_				qualifier.setAttribute(AutowireCandidateQualifier.VALUE_KEY, value)__			}_			NodeList nl = ele.getChildNodes()__			for (int i = 0_ i < nl.getLength()_ i++) {_				Node node = nl.item(i)__				if (isCandidateElement(node) && nodeNameEquals(node, QUALIFIER_ATTRIBUTE_ELEMENT)) {_					Element attributeEle = (Element) node__					String attributeName = attributeEle.getAttribute(KEY_ATTRIBUTE)__					String attributeValue = attributeEle.getAttribute(VALUE_ATTRIBUTE)__					if (StringUtils.hasLength(attributeName) && StringUtils.hasLength(attributeValue)) {_						BeanMetadataAttribute attribute = new BeanMetadataAttribute(attributeName, attributeValue)__						attribute.setSource(extractSource(attributeEle))__						qualifier.addMetadataAttribute(attribute)__					}_					else {_						error("Qualifier 'attribute' tag must have a 'name' and 'value'", attributeEle)__						return__					}_				}_			}_			bd.addQualifier(qualifier)__		}_		finally {_			this.parseState.pop()__		}_	};parse,a,qualifier,element;public,void,parse,qualifier,element,element,ele,abstract,bean,definition,bd,string,type,name,ele,get,attribute,if,string,utils,has,length,type,name,error,tag,qualifier,must,have,a,type,attribute,ele,return,this,parse,state,push,new,qualifier,entry,type,name,try,autowire,candidate,qualifier,qualifier,new,autowire,candidate,qualifier,type,name,qualifier,set,source,extract,source,ele,string,value,ele,get,attribute,if,string,utils,has,length,value,qualifier,set,attribute,autowire,candidate,qualifier,value,node,list,nl,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,attribute,ele,element,node,string,attribute,name,attribute,ele,get,attribute,string,attribute,value,attribute,ele,get,attribute,if,string,utils,has,length,attribute,name,string,utils,has,length,attribute,value,bean,metadata,attribute,attribute,new,bean,metadata,attribute,attribute,name,attribute,value,attribute,set,source,extract,source,attribute,ele,qualifier,add,metadata,attribute,attribute,else,error,qualifier,attribute,tag,must,have,a,name,and,value,attribute,ele,return,bd,add,qualifier,qualifier,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parseQualifierElement(Element ele, AbstractBeanDefinition bd);1487255851;Parse a qualifier element.;public void parseQualifierElement(Element ele, AbstractBeanDefinition bd) {_		String typeName = ele.getAttribute(TYPE_ATTRIBUTE)__		if (!StringUtils.hasLength(typeName)) {_			error("Tag 'qualifier' must have a 'type' attribute", ele)__			return__		}_		this.parseState.push(new QualifierEntry(typeName))__		try {_			AutowireCandidateQualifier qualifier = new AutowireCandidateQualifier(typeName)__			qualifier.setSource(extractSource(ele))__			String value = ele.getAttribute(VALUE_ATTRIBUTE)__			if (StringUtils.hasLength(value)) {_				qualifier.setAttribute(AutowireCandidateQualifier.VALUE_KEY, value)__			}_			NodeList nl = ele.getChildNodes()__			for (int i = 0_ i < nl.getLength()_ i++) {_				Node node = nl.item(i)__				if (isCandidateElement(node) && nodeNameEquals(node, QUALIFIER_ATTRIBUTE_ELEMENT)) {_					Element attributeEle = (Element) node__					String attributeName = attributeEle.getAttribute(KEY_ATTRIBUTE)__					String attributeValue = attributeEle.getAttribute(VALUE_ATTRIBUTE)__					if (StringUtils.hasLength(attributeName) && StringUtils.hasLength(attributeValue)) {_						BeanMetadataAttribute attribute = new BeanMetadataAttribute(attributeName, attributeValue)__						attribute.setSource(extractSource(attributeEle))__						qualifier.addMetadataAttribute(attribute)__					}_					else {_						error("Qualifier 'attribute' tag must have a 'name' and 'value'", attributeEle)__						return__					}_				}_			}_			bd.addQualifier(qualifier)__		}_		finally {_			this.parseState.pop()__		}_	};parse,a,qualifier,element;public,void,parse,qualifier,element,element,ele,abstract,bean,definition,bd,string,type,name,ele,get,attribute,if,string,utils,has,length,type,name,error,tag,qualifier,must,have,a,type,attribute,ele,return,this,parse,state,push,new,qualifier,entry,type,name,try,autowire,candidate,qualifier,qualifier,new,autowire,candidate,qualifier,type,name,qualifier,set,source,extract,source,ele,string,value,ele,get,attribute,if,string,utils,has,length,value,qualifier,set,attribute,autowire,candidate,qualifier,value,node,list,nl,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,attribute,ele,element,node,string,attribute,name,attribute,ele,get,attribute,string,attribute,value,attribute,ele,get,attribute,if,string,utils,has,length,attribute,name,string,utils,has,length,attribute,value,bean,metadata,attribute,attribute,new,bean,metadata,attribute,attribute,name,attribute,value,attribute,set,source,extract,source,attribute,ele,qualifier,add,metadata,attribute,attribute,else,error,qualifier,attribute,tag,must,have,a,name,and,value,attribute,ele,return,bd,add,qualifier,qualifier,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parseQualifierElement(Element ele, AbstractBeanDefinition bd);1494586217;Parse a qualifier element.;public void parseQualifierElement(Element ele, AbstractBeanDefinition bd) {_		String typeName = ele.getAttribute(TYPE_ATTRIBUTE)__		if (!StringUtils.hasLength(typeName)) {_			error("Tag 'qualifier' must have a 'type' attribute", ele)__			return__		}_		this.parseState.push(new QualifierEntry(typeName))__		try {_			AutowireCandidateQualifier qualifier = new AutowireCandidateQualifier(typeName)__			qualifier.setSource(extractSource(ele))__			String value = ele.getAttribute(VALUE_ATTRIBUTE)__			if (StringUtils.hasLength(value)) {_				qualifier.setAttribute(AutowireCandidateQualifier.VALUE_KEY, value)__			}_			NodeList nl = ele.getChildNodes()__			for (int i = 0_ i < nl.getLength()_ i++) {_				Node node = nl.item(i)__				if (isCandidateElement(node) && nodeNameEquals(node, QUALIFIER_ATTRIBUTE_ELEMENT)) {_					Element attributeEle = (Element) node__					String attributeName = attributeEle.getAttribute(KEY_ATTRIBUTE)__					String attributeValue = attributeEle.getAttribute(VALUE_ATTRIBUTE)__					if (StringUtils.hasLength(attributeName) && StringUtils.hasLength(attributeValue)) {_						BeanMetadataAttribute attribute = new BeanMetadataAttribute(attributeName, attributeValue)__						attribute.setSource(extractSource(attributeEle))__						qualifier.addMetadataAttribute(attribute)__					}_					else {_						error("Qualifier 'attribute' tag must have a 'name' and 'value'", attributeEle)__						return__					}_				}_			}_			bd.addQualifier(qualifier)__		}_		finally {_			this.parseState.pop()__		}_	};parse,a,qualifier,element;public,void,parse,qualifier,element,element,ele,abstract,bean,definition,bd,string,type,name,ele,get,attribute,if,string,utils,has,length,type,name,error,tag,qualifier,must,have,a,type,attribute,ele,return,this,parse,state,push,new,qualifier,entry,type,name,try,autowire,candidate,qualifier,qualifier,new,autowire,candidate,qualifier,type,name,qualifier,set,source,extract,source,ele,string,value,ele,get,attribute,if,string,utils,has,length,value,qualifier,set,attribute,autowire,candidate,qualifier,value,node,list,nl,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,attribute,ele,element,node,string,attribute,name,attribute,ele,get,attribute,string,attribute,value,attribute,ele,get,attribute,if,string,utils,has,length,attribute,name,string,utils,has,length,attribute,value,bean,metadata,attribute,attribute,new,bean,metadata,attribute,attribute,name,attribute,value,attribute,set,source,extract,source,attribute,ele,qualifier,add,metadata,attribute,attribute,else,error,qualifier,attribute,tag,must,have,a,name,and,value,attribute,ele,return,bd,add,qualifier,qualifier,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parseQualifierElement(Element ele, AbstractBeanDefinition bd);1495868221;Parse a qualifier element.;public void parseQualifierElement(Element ele, AbstractBeanDefinition bd) {_		String typeName = ele.getAttribute(TYPE_ATTRIBUTE)__		if (!StringUtils.hasLength(typeName)) {_			error("Tag 'qualifier' must have a 'type' attribute", ele)__			return__		}_		this.parseState.push(new QualifierEntry(typeName))__		try {_			AutowireCandidateQualifier qualifier = new AutowireCandidateQualifier(typeName)__			qualifier.setSource(extractSource(ele))__			String value = ele.getAttribute(VALUE_ATTRIBUTE)__			if (StringUtils.hasLength(value)) {_				qualifier.setAttribute(AutowireCandidateQualifier.VALUE_KEY, value)__			}_			NodeList nl = ele.getChildNodes()__			for (int i = 0_ i < nl.getLength()_ i++) {_				Node node = nl.item(i)__				if (isCandidateElement(node) && nodeNameEquals(node, QUALIFIER_ATTRIBUTE_ELEMENT)) {_					Element attributeEle = (Element) node__					String attributeName = attributeEle.getAttribute(KEY_ATTRIBUTE)__					String attributeValue = attributeEle.getAttribute(VALUE_ATTRIBUTE)__					if (StringUtils.hasLength(attributeName) && StringUtils.hasLength(attributeValue)) {_						BeanMetadataAttribute attribute = new BeanMetadataAttribute(attributeName, attributeValue)__						attribute.setSource(extractSource(attributeEle))__						qualifier.addMetadataAttribute(attribute)__					}_					else {_						error("Qualifier 'attribute' tag must have a 'name' and 'value'", attributeEle)__						return__					}_				}_			}_			bd.addQualifier(qualifier)__		}_		finally {_			this.parseState.pop()__		}_	};parse,a,qualifier,element;public,void,parse,qualifier,element,element,ele,abstract,bean,definition,bd,string,type,name,ele,get,attribute,if,string,utils,has,length,type,name,error,tag,qualifier,must,have,a,type,attribute,ele,return,this,parse,state,push,new,qualifier,entry,type,name,try,autowire,candidate,qualifier,qualifier,new,autowire,candidate,qualifier,type,name,qualifier,set,source,extract,source,ele,string,value,ele,get,attribute,if,string,utils,has,length,value,qualifier,set,attribute,autowire,candidate,qualifier,value,node,list,nl,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,attribute,ele,element,node,string,attribute,name,attribute,ele,get,attribute,string,attribute,value,attribute,ele,get,attribute,if,string,utils,has,length,attribute,name,string,utils,has,length,attribute,value,bean,metadata,attribute,attribute,new,bean,metadata,attribute,attribute,name,attribute,value,attribute,set,source,extract,source,attribute,ele,qualifier,add,metadata,attribute,attribute,else,error,qualifier,attribute,tag,must,have,a,name,and,value,attribute,ele,return,bd,add,qualifier,qualifier,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parseQualifierElement(Element ele, AbstractBeanDefinition bd);1496259743;Parse a qualifier element.;public void parseQualifierElement(Element ele, AbstractBeanDefinition bd) {_		String typeName = ele.getAttribute(TYPE_ATTRIBUTE)__		if (!StringUtils.hasLength(typeName)) {_			error("Tag 'qualifier' must have a 'type' attribute", ele)__			return__		}_		this.parseState.push(new QualifierEntry(typeName))__		try {_			AutowireCandidateQualifier qualifier = new AutowireCandidateQualifier(typeName)__			qualifier.setSource(extractSource(ele))__			String value = ele.getAttribute(VALUE_ATTRIBUTE)__			if (StringUtils.hasLength(value)) {_				qualifier.setAttribute(AutowireCandidateQualifier.VALUE_KEY, value)__			}_			NodeList nl = ele.getChildNodes()__			for (int i = 0_ i < nl.getLength()_ i++) {_				Node node = nl.item(i)__				if (isCandidateElement(node) && nodeNameEquals(node, QUALIFIER_ATTRIBUTE_ELEMENT)) {_					Element attributeEle = (Element) node__					String attributeName = attributeEle.getAttribute(KEY_ATTRIBUTE)__					String attributeValue = attributeEle.getAttribute(VALUE_ATTRIBUTE)__					if (StringUtils.hasLength(attributeName) && StringUtils.hasLength(attributeValue)) {_						BeanMetadataAttribute attribute = new BeanMetadataAttribute(attributeName, attributeValue)__						attribute.setSource(extractSource(attributeEle))__						qualifier.addMetadataAttribute(attribute)__					}_					else {_						error("Qualifier 'attribute' tag must have a 'name' and 'value'", attributeEle)__						return__					}_				}_			}_			bd.addQualifier(qualifier)__		}_		finally {_			this.parseState.pop()__		}_	};parse,a,qualifier,element;public,void,parse,qualifier,element,element,ele,abstract,bean,definition,bd,string,type,name,ele,get,attribute,if,string,utils,has,length,type,name,error,tag,qualifier,must,have,a,type,attribute,ele,return,this,parse,state,push,new,qualifier,entry,type,name,try,autowire,candidate,qualifier,qualifier,new,autowire,candidate,qualifier,type,name,qualifier,set,source,extract,source,ele,string,value,ele,get,attribute,if,string,utils,has,length,value,qualifier,set,attribute,autowire,candidate,qualifier,value,node,list,nl,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,attribute,ele,element,node,string,attribute,name,attribute,ele,get,attribute,string,attribute,value,attribute,ele,get,attribute,if,string,utils,has,length,attribute,name,string,utils,has,length,attribute,value,bean,metadata,attribute,attribute,new,bean,metadata,attribute,attribute,name,attribute,value,attribute,set,source,extract,source,attribute,ele,qualifier,add,metadata,attribute,attribute,else,error,qualifier,attribute,tag,must,have,a,name,and,value,attribute,ele,return,bd,add,qualifier,qualifier,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parseQualifierElement(Element ele, AbstractBeanDefinition bd);1496837955;Parse a qualifier element.;public void parseQualifierElement(Element ele, AbstractBeanDefinition bd) {_		String typeName = ele.getAttribute(TYPE_ATTRIBUTE)__		if (!StringUtils.hasLength(typeName)) {_			error("Tag 'qualifier' must have a 'type' attribute", ele)__			return__		}_		this.parseState.push(new QualifierEntry(typeName))__		try {_			AutowireCandidateQualifier qualifier = new AutowireCandidateQualifier(typeName)__			qualifier.setSource(extractSource(ele))__			String value = ele.getAttribute(VALUE_ATTRIBUTE)__			if (StringUtils.hasLength(value)) {_				qualifier.setAttribute(AutowireCandidateQualifier.VALUE_KEY, value)__			}_			NodeList nl = ele.getChildNodes()__			for (int i = 0_ i < nl.getLength()_ i++) {_				Node node = nl.item(i)__				if (isCandidateElement(node) && nodeNameEquals(node, QUALIFIER_ATTRIBUTE_ELEMENT)) {_					Element attributeEle = (Element) node__					String attributeName = attributeEle.getAttribute(KEY_ATTRIBUTE)__					String attributeValue = attributeEle.getAttribute(VALUE_ATTRIBUTE)__					if (StringUtils.hasLength(attributeName) && StringUtils.hasLength(attributeValue)) {_						BeanMetadataAttribute attribute = new BeanMetadataAttribute(attributeName, attributeValue)__						attribute.setSource(extractSource(attributeEle))__						qualifier.addMetadataAttribute(attribute)__					}_					else {_						error("Qualifier 'attribute' tag must have a 'name' and 'value'", attributeEle)__						return__					}_				}_			}_			bd.addQualifier(qualifier)__		}_		finally {_			this.parseState.pop()__		}_	};parse,a,qualifier,element;public,void,parse,qualifier,element,element,ele,abstract,bean,definition,bd,string,type,name,ele,get,attribute,if,string,utils,has,length,type,name,error,tag,qualifier,must,have,a,type,attribute,ele,return,this,parse,state,push,new,qualifier,entry,type,name,try,autowire,candidate,qualifier,qualifier,new,autowire,candidate,qualifier,type,name,qualifier,set,source,extract,source,ele,string,value,ele,get,attribute,if,string,utils,has,length,value,qualifier,set,attribute,autowire,candidate,qualifier,value,node,list,nl,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,attribute,ele,element,node,string,attribute,name,attribute,ele,get,attribute,string,attribute,value,attribute,ele,get,attribute,if,string,utils,has,length,attribute,name,string,utils,has,length,attribute,value,bean,metadata,attribute,attribute,new,bean,metadata,attribute,attribute,name,attribute,value,attribute,set,source,extract,source,attribute,ele,qualifier,add,metadata,attribute,attribute,else,error,qualifier,attribute,tag,must,have,a,name,and,value,attribute,ele,return,bd,add,qualifier,qualifier,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parseQualifierElement(Element ele, AbstractBeanDefinition bd);1503008029;Parse a qualifier element.;public void parseQualifierElement(Element ele, AbstractBeanDefinition bd) {_		String typeName = ele.getAttribute(TYPE_ATTRIBUTE)__		if (!StringUtils.hasLength(typeName)) {_			error("Tag 'qualifier' must have a 'type' attribute", ele)__			return__		}_		this.parseState.push(new QualifierEntry(typeName))__		try {_			AutowireCandidateQualifier qualifier = new AutowireCandidateQualifier(typeName)__			qualifier.setSource(extractSource(ele))__			String value = ele.getAttribute(VALUE_ATTRIBUTE)__			if (StringUtils.hasLength(value)) {_				qualifier.setAttribute(AutowireCandidateQualifier.VALUE_KEY, value)__			}_			NodeList nl = ele.getChildNodes()__			for (int i = 0_ i < nl.getLength()_ i++) {_				Node node = nl.item(i)__				if (isCandidateElement(node) && nodeNameEquals(node, QUALIFIER_ATTRIBUTE_ELEMENT)) {_					Element attributeEle = (Element) node__					String attributeName = attributeEle.getAttribute(KEY_ATTRIBUTE)__					String attributeValue = attributeEle.getAttribute(VALUE_ATTRIBUTE)__					if (StringUtils.hasLength(attributeName) && StringUtils.hasLength(attributeValue)) {_						BeanMetadataAttribute attribute = new BeanMetadataAttribute(attributeName, attributeValue)__						attribute.setSource(extractSource(attributeEle))__						qualifier.addMetadataAttribute(attribute)__					}_					else {_						error("Qualifier 'attribute' tag must have a 'name' and 'value'", attributeEle)__						return__					}_				}_			}_			bd.addQualifier(qualifier)__		}_		finally {_			this.parseState.pop()__		}_	};parse,a,qualifier,element;public,void,parse,qualifier,element,element,ele,abstract,bean,definition,bd,string,type,name,ele,get,attribute,if,string,utils,has,length,type,name,error,tag,qualifier,must,have,a,type,attribute,ele,return,this,parse,state,push,new,qualifier,entry,type,name,try,autowire,candidate,qualifier,qualifier,new,autowire,candidate,qualifier,type,name,qualifier,set,source,extract,source,ele,string,value,ele,get,attribute,if,string,utils,has,length,value,qualifier,set,attribute,autowire,candidate,qualifier,value,node,list,nl,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,attribute,ele,element,node,string,attribute,name,attribute,ele,get,attribute,string,attribute,value,attribute,ele,get,attribute,if,string,utils,has,length,attribute,name,string,utils,has,length,attribute,value,bean,metadata,attribute,attribute,new,bean,metadata,attribute,attribute,name,attribute,value,attribute,set,source,extract,source,attribute,ele,qualifier,add,metadata,attribute,attribute,else,error,qualifier,attribute,tag,must,have,a,name,and,value,attribute,ele,return,bd,add,qualifier,qualifier,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parseQualifierElement(Element ele, AbstractBeanDefinition bd);1519513303;Parse a qualifier element.;public void parseQualifierElement(Element ele, AbstractBeanDefinition bd) {_		String typeName = ele.getAttribute(TYPE_ATTRIBUTE)__		if (!StringUtils.hasLength(typeName)) {_			error("Tag 'qualifier' must have a 'type' attribute", ele)__			return__		}_		this.parseState.push(new QualifierEntry(typeName))__		try {_			AutowireCandidateQualifier qualifier = new AutowireCandidateQualifier(typeName)__			qualifier.setSource(extractSource(ele))__			String value = ele.getAttribute(VALUE_ATTRIBUTE)__			if (StringUtils.hasLength(value)) {_				qualifier.setAttribute(AutowireCandidateQualifier.VALUE_KEY, value)__			}_			NodeList nl = ele.getChildNodes()__			for (int i = 0_ i < nl.getLength()_ i++) {_				Node node = nl.item(i)__				if (isCandidateElement(node) && nodeNameEquals(node, QUALIFIER_ATTRIBUTE_ELEMENT)) {_					Element attributeEle = (Element) node__					String attributeName = attributeEle.getAttribute(KEY_ATTRIBUTE)__					String attributeValue = attributeEle.getAttribute(VALUE_ATTRIBUTE)__					if (StringUtils.hasLength(attributeName) && StringUtils.hasLength(attributeValue)) {_						BeanMetadataAttribute attribute = new BeanMetadataAttribute(attributeName, attributeValue)__						attribute.setSource(extractSource(attributeEle))__						qualifier.addMetadataAttribute(attribute)__					}_					else {_						error("Qualifier 'attribute' tag must have a 'name' and 'value'", attributeEle)__						return__					}_				}_			}_			bd.addQualifier(qualifier)__		}_		finally {_			this.parseState.pop()__		}_	};parse,a,qualifier,element;public,void,parse,qualifier,element,element,ele,abstract,bean,definition,bd,string,type,name,ele,get,attribute,if,string,utils,has,length,type,name,error,tag,qualifier,must,have,a,type,attribute,ele,return,this,parse,state,push,new,qualifier,entry,type,name,try,autowire,candidate,qualifier,qualifier,new,autowire,candidate,qualifier,type,name,qualifier,set,source,extract,source,ele,string,value,ele,get,attribute,if,string,utils,has,length,value,qualifier,set,attribute,autowire,candidate,qualifier,value,node,list,nl,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,attribute,ele,element,node,string,attribute,name,attribute,ele,get,attribute,string,attribute,value,attribute,ele,get,attribute,if,string,utils,has,length,attribute,name,string,utils,has,length,attribute,value,bean,metadata,attribute,attribute,new,bean,metadata,attribute,attribute,name,attribute,value,attribute,set,source,extract,source,attribute,ele,qualifier,add,metadata,attribute,attribute,else,error,qualifier,attribute,tag,must,have,a,name,and,value,attribute,ele,return,bd,add,qualifier,qualifier,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parseQualifierElement(Element ele, AbstractBeanDefinition bd);1530174524;Parse a qualifier element.;public void parseQualifierElement(Element ele, AbstractBeanDefinition bd) {_		String typeName = ele.getAttribute(TYPE_ATTRIBUTE)__		if (!StringUtils.hasLength(typeName)) {_			error("Tag 'qualifier' must have a 'type' attribute", ele)__			return__		}_		this.parseState.push(new QualifierEntry(typeName))__		try {_			AutowireCandidateQualifier qualifier = new AutowireCandidateQualifier(typeName)__			qualifier.setSource(extractSource(ele))__			String value = ele.getAttribute(VALUE_ATTRIBUTE)__			if (StringUtils.hasLength(value)) {_				qualifier.setAttribute(AutowireCandidateQualifier.VALUE_KEY, value)__			}_			NodeList nl = ele.getChildNodes()__			for (int i = 0_ i < nl.getLength()_ i++) {_				Node node = nl.item(i)__				if (isCandidateElement(node) && nodeNameEquals(node, QUALIFIER_ATTRIBUTE_ELEMENT)) {_					Element attributeEle = (Element) node__					String attributeName = attributeEle.getAttribute(KEY_ATTRIBUTE)__					String attributeValue = attributeEle.getAttribute(VALUE_ATTRIBUTE)__					if (StringUtils.hasLength(attributeName) && StringUtils.hasLength(attributeValue)) {_						BeanMetadataAttribute attribute = new BeanMetadataAttribute(attributeName, attributeValue)__						attribute.setSource(extractSource(attributeEle))__						qualifier.addMetadataAttribute(attribute)__					}_					else {_						error("Qualifier 'attribute' tag must have a 'name' and 'value'", attributeEle)__						return__					}_				}_			}_			bd.addQualifier(qualifier)__		}_		finally {_			this.parseState.pop()__		}_	};parse,a,qualifier,element;public,void,parse,qualifier,element,element,ele,abstract,bean,definition,bd,string,type,name,ele,get,attribute,if,string,utils,has,length,type,name,error,tag,qualifier,must,have,a,type,attribute,ele,return,this,parse,state,push,new,qualifier,entry,type,name,try,autowire,candidate,qualifier,qualifier,new,autowire,candidate,qualifier,type,name,qualifier,set,source,extract,source,ele,string,value,ele,get,attribute,if,string,utils,has,length,value,qualifier,set,attribute,autowire,candidate,qualifier,value,node,list,nl,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,attribute,ele,element,node,string,attribute,name,attribute,ele,get,attribute,string,attribute,value,attribute,ele,get,attribute,if,string,utils,has,length,attribute,name,string,utils,has,length,attribute,value,bean,metadata,attribute,attribute,new,bean,metadata,attribute,attribute,name,attribute,value,attribute,set,source,extract,source,attribute,ele,qualifier,add,metadata,attribute,attribute,else,error,qualifier,attribute,tag,must,have,a,name,and,value,attribute,ele,return,bd,add,qualifier,qualifier,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parseQualifierElement(Element ele, AbstractBeanDefinition bd);1530190293;Parse a qualifier element.;public void parseQualifierElement(Element ele, AbstractBeanDefinition bd) {_		String typeName = ele.getAttribute(TYPE_ATTRIBUTE)__		if (!StringUtils.hasLength(typeName)) {_			error("Tag 'qualifier' must have a 'type' attribute", ele)__			return__		}_		this.parseState.push(new QualifierEntry(typeName))__		try {_			AutowireCandidateQualifier qualifier = new AutowireCandidateQualifier(typeName)__			qualifier.setSource(extractSource(ele))__			String value = ele.getAttribute(VALUE_ATTRIBUTE)__			if (StringUtils.hasLength(value)) {_				qualifier.setAttribute(AutowireCandidateQualifier.VALUE_KEY, value)__			}_			NodeList nl = ele.getChildNodes()__			for (int i = 0_ i < nl.getLength()_ i++) {_				Node node = nl.item(i)__				if (isCandidateElement(node) && nodeNameEquals(node, QUALIFIER_ATTRIBUTE_ELEMENT)) {_					Element attributeEle = (Element) node__					String attributeName = attributeEle.getAttribute(KEY_ATTRIBUTE)__					String attributeValue = attributeEle.getAttribute(VALUE_ATTRIBUTE)__					if (StringUtils.hasLength(attributeName) && StringUtils.hasLength(attributeValue)) {_						BeanMetadataAttribute attribute = new BeanMetadataAttribute(attributeName, attributeValue)__						attribute.setSource(extractSource(attributeEle))__						qualifier.addMetadataAttribute(attribute)__					}_					else {_						error("Qualifier 'attribute' tag must have a 'name' and 'value'", attributeEle)__						return__					}_				}_			}_			bd.addQualifier(qualifier)__		}_		finally {_			this.parseState.pop()__		}_	};parse,a,qualifier,element;public,void,parse,qualifier,element,element,ele,abstract,bean,definition,bd,string,type,name,ele,get,attribute,if,string,utils,has,length,type,name,error,tag,qualifier,must,have,a,type,attribute,ele,return,this,parse,state,push,new,qualifier,entry,type,name,try,autowire,candidate,qualifier,qualifier,new,autowire,candidate,qualifier,type,name,qualifier,set,source,extract,source,ele,string,value,ele,get,attribute,if,string,utils,has,length,value,qualifier,set,attribute,autowire,candidate,qualifier,value,node,list,nl,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,attribute,ele,element,node,string,attribute,name,attribute,ele,get,attribute,string,attribute,value,attribute,ele,get,attribute,if,string,utils,has,length,attribute,name,string,utils,has,length,attribute,value,bean,metadata,attribute,attribute,new,bean,metadata,attribute,attribute,name,attribute,value,attribute,set,source,extract,source,attribute,ele,qualifier,add,metadata,attribute,attribute,else,error,qualifier,attribute,tag,must,have,a,name,and,value,attribute,ele,return,bd,add,qualifier,qualifier,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parseQualifierElement(Element ele, AbstractBeanDefinition bd);1532706365;Parse a qualifier element.;public void parseQualifierElement(Element ele, AbstractBeanDefinition bd) {_		String typeName = ele.getAttribute(TYPE_ATTRIBUTE)__		if (!StringUtils.hasLength(typeName)) {_			error("Tag 'qualifier' must have a 'type' attribute", ele)__			return__		}_		this.parseState.push(new QualifierEntry(typeName))__		try {_			AutowireCandidateQualifier qualifier = new AutowireCandidateQualifier(typeName)__			qualifier.setSource(extractSource(ele))__			String value = ele.getAttribute(VALUE_ATTRIBUTE)__			if (StringUtils.hasLength(value)) {_				qualifier.setAttribute(AutowireCandidateQualifier.VALUE_KEY, value)__			}_			NodeList nl = ele.getChildNodes()__			for (int i = 0_ i < nl.getLength()_ i++) {_				Node node = nl.item(i)__				if (isCandidateElement(node) && nodeNameEquals(node, QUALIFIER_ATTRIBUTE_ELEMENT)) {_					Element attributeEle = (Element) node__					String attributeName = attributeEle.getAttribute(KEY_ATTRIBUTE)__					String attributeValue = attributeEle.getAttribute(VALUE_ATTRIBUTE)__					if (StringUtils.hasLength(attributeName) && StringUtils.hasLength(attributeValue)) {_						BeanMetadataAttribute attribute = new BeanMetadataAttribute(attributeName, attributeValue)__						attribute.setSource(extractSource(attributeEle))__						qualifier.addMetadataAttribute(attribute)__					}_					else {_						error("Qualifier 'attribute' tag must have a 'name' and 'value'", attributeEle)__						return__					}_				}_			}_			bd.addQualifier(qualifier)__		}_		finally {_			this.parseState.pop()__		}_	};parse,a,qualifier,element;public,void,parse,qualifier,element,element,ele,abstract,bean,definition,bd,string,type,name,ele,get,attribute,if,string,utils,has,length,type,name,error,tag,qualifier,must,have,a,type,attribute,ele,return,this,parse,state,push,new,qualifier,entry,type,name,try,autowire,candidate,qualifier,qualifier,new,autowire,candidate,qualifier,type,name,qualifier,set,source,extract,source,ele,string,value,ele,get,attribute,if,string,utils,has,length,value,qualifier,set,attribute,autowire,candidate,qualifier,value,node,list,nl,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,attribute,ele,element,node,string,attribute,name,attribute,ele,get,attribute,string,attribute,value,attribute,ele,get,attribute,if,string,utils,has,length,attribute,name,string,utils,has,length,attribute,value,bean,metadata,attribute,attribute,new,bean,metadata,attribute,attribute,name,attribute,value,attribute,set,source,extract,source,attribute,ele,qualifier,add,metadata,attribute,attribute,else,error,qualifier,attribute,tag,must,have,a,name,and,value,attribute,ele,return,bd,add,qualifier,qualifier,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parseQualifierElement(Element ele, AbstractBeanDefinition bd);1546958161;Parse a qualifier element.;public void parseQualifierElement(Element ele, AbstractBeanDefinition bd) {_		String typeName = ele.getAttribute(TYPE_ATTRIBUTE)__		if (!StringUtils.hasLength(typeName)) {_			error("Tag 'qualifier' must have a 'type' attribute", ele)__			return__		}_		this.parseState.push(new QualifierEntry(typeName))__		try {_			AutowireCandidateQualifier qualifier = new AutowireCandidateQualifier(typeName)__			qualifier.setSource(extractSource(ele))__			String value = ele.getAttribute(VALUE_ATTRIBUTE)__			if (StringUtils.hasLength(value)) {_				qualifier.setAttribute(AutowireCandidateQualifier.VALUE_KEY, value)__			}_			NodeList nl = ele.getChildNodes()__			for (int i = 0_ i < nl.getLength()_ i++) {_				Node node = nl.item(i)__				if (isCandidateElement(node) && nodeNameEquals(node, QUALIFIER_ATTRIBUTE_ELEMENT)) {_					Element attributeEle = (Element) node__					String attributeName = attributeEle.getAttribute(KEY_ATTRIBUTE)__					String attributeValue = attributeEle.getAttribute(VALUE_ATTRIBUTE)__					if (StringUtils.hasLength(attributeName) && StringUtils.hasLength(attributeValue)) {_						BeanMetadataAttribute attribute = new BeanMetadataAttribute(attributeName, attributeValue)__						attribute.setSource(extractSource(attributeEle))__						qualifier.addMetadataAttribute(attribute)__					}_					else {_						error("Qualifier 'attribute' tag must have a 'name' and 'value'", attributeEle)__						return__					}_				}_			}_			bd.addQualifier(qualifier)__		}_		finally {_			this.parseState.pop()__		}_	};parse,a,qualifier,element;public,void,parse,qualifier,element,element,ele,abstract,bean,definition,bd,string,type,name,ele,get,attribute,if,string,utils,has,length,type,name,error,tag,qualifier,must,have,a,type,attribute,ele,return,this,parse,state,push,new,qualifier,entry,type,name,try,autowire,candidate,qualifier,qualifier,new,autowire,candidate,qualifier,type,name,qualifier,set,source,extract,source,ele,string,value,ele,get,attribute,if,string,utils,has,length,value,qualifier,set,attribute,autowire,candidate,qualifier,value,node,list,nl,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,attribute,ele,element,node,string,attribute,name,attribute,ele,get,attribute,string,attribute,value,attribute,ele,get,attribute,if,string,utils,has,length,attribute,name,string,utils,has,length,attribute,value,bean,metadata,attribute,attribute,new,bean,metadata,attribute,attribute,name,attribute,value,attribute,set,source,extract,source,attribute,ele,qualifier,add,metadata,attribute,attribute,else,error,qualifier,attribute,tag,must,have,a,name,and,value,attribute,ele,return,bd,add,qualifier,qualifier,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public Set<Object> parseSetElement(Element collectionEle, BeanDefinition bd);1385412762;Parse a set element.;public Set<Object> parseSetElement(Element collectionEle, BeanDefinition bd) {_		String defaultElementType = collectionEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = collectionEle.getChildNodes()__		ManagedSet<Object> target = new ManagedSet<Object>(nl.getLength())__		target.setSource(extractSource(collectionEle))__		target.setElementTypeName(defaultElementType)__		target.setMergeEnabled(parseMergeAttribute(collectionEle))__		parseCollectionElements(nl, target, bd, defaultElementType)__		return target__	};parse,a,set,element;public,set,object,parse,set,element,element,collection,ele,bean,definition,bd,string,default,element,type,collection,ele,get,attribute,node,list,nl,collection,ele,get,child,nodes,managed,set,object,target,new,managed,set,object,nl,get,length,target,set,source,extract,source,collection,ele,target,set,element,type,name,default,element,type,target,set,merge,enabled,parse,merge,attribute,collection,ele,parse,collection,elements,nl,target,bd,default,element,type,return,target
BeanDefinitionParserDelegate -> public Set<Object> parseSetElement(Element collectionEle, BeanDefinition bd);1410953197;Parse a set element.;public Set<Object> parseSetElement(Element collectionEle, BeanDefinition bd) {_		String defaultElementType = collectionEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = collectionEle.getChildNodes()__		ManagedSet<Object> target = new ManagedSet<Object>(nl.getLength())__		target.setSource(extractSource(collectionEle))__		target.setElementTypeName(defaultElementType)__		target.setMergeEnabled(parseMergeAttribute(collectionEle))__		parseCollectionElements(nl, target, bd, defaultElementType)__		return target__	};parse,a,set,element;public,set,object,parse,set,element,element,collection,ele,bean,definition,bd,string,default,element,type,collection,ele,get,attribute,node,list,nl,collection,ele,get,child,nodes,managed,set,object,target,new,managed,set,object,nl,get,length,target,set,source,extract,source,collection,ele,target,set,element,type,name,default,element,type,target,set,merge,enabled,parse,merge,attribute,collection,ele,parse,collection,elements,nl,target,bd,default,element,type,return,target
BeanDefinitionParserDelegate -> public Set<Object> parseSetElement(Element collectionEle, BeanDefinition bd);1411599760;Parse a set element.;public Set<Object> parseSetElement(Element collectionEle, BeanDefinition bd) {_		String defaultElementType = collectionEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = collectionEle.getChildNodes()__		ManagedSet<Object> target = new ManagedSet<Object>(nl.getLength())__		target.setSource(extractSource(collectionEle))__		target.setElementTypeName(defaultElementType)__		target.setMergeEnabled(parseMergeAttribute(collectionEle))__		parseCollectionElements(nl, target, bd, defaultElementType)__		return target__	};parse,a,set,element;public,set,object,parse,set,element,element,collection,ele,bean,definition,bd,string,default,element,type,collection,ele,get,attribute,node,list,nl,collection,ele,get,child,nodes,managed,set,object,target,new,managed,set,object,nl,get,length,target,set,source,extract,source,collection,ele,target,set,element,type,name,default,element,type,target,set,merge,enabled,parse,merge,attribute,collection,ele,parse,collection,elements,nl,target,bd,default,element,type,return,target
BeanDefinitionParserDelegate -> public Set<Object> parseSetElement(Element collectionEle, BeanDefinition bd);1419966315;Parse a set element.;public Set<Object> parseSetElement(Element collectionEle, BeanDefinition bd) {_		String defaultElementType = collectionEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = collectionEle.getChildNodes()__		ManagedSet<Object> target = new ManagedSet<Object>(nl.getLength())__		target.setSource(extractSource(collectionEle))__		target.setElementTypeName(defaultElementType)__		target.setMergeEnabled(parseMergeAttribute(collectionEle))__		parseCollectionElements(nl, target, bd, defaultElementType)__		return target__	};parse,a,set,element;public,set,object,parse,set,element,element,collection,ele,bean,definition,bd,string,default,element,type,collection,ele,get,attribute,node,list,nl,collection,ele,get,child,nodes,managed,set,object,target,new,managed,set,object,nl,get,length,target,set,source,extract,source,collection,ele,target,set,element,type,name,default,element,type,target,set,merge,enabled,parse,merge,attribute,collection,ele,parse,collection,elements,nl,target,bd,default,element,type,return,target
BeanDefinitionParserDelegate -> public Set<Object> parseSetElement(Element collectionEle, BeanDefinition bd);1431958785;Parse a set element.;public Set<Object> parseSetElement(Element collectionEle, BeanDefinition bd) {_		String defaultElementType = collectionEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = collectionEle.getChildNodes()__		ManagedSet<Object> target = new ManagedSet<Object>(nl.getLength())__		target.setSource(extractSource(collectionEle))__		target.setElementTypeName(defaultElementType)__		target.setMergeEnabled(parseMergeAttribute(collectionEle))__		parseCollectionElements(nl, target, bd, defaultElementType)__		return target__	};parse,a,set,element;public,set,object,parse,set,element,element,collection,ele,bean,definition,bd,string,default,element,type,collection,ele,get,attribute,node,list,nl,collection,ele,get,child,nodes,managed,set,object,target,new,managed,set,object,nl,get,length,target,set,source,extract,source,collection,ele,target,set,element,type,name,default,element,type,target,set,merge,enabled,parse,merge,attribute,collection,ele,parse,collection,elements,nl,target,bd,default,element,type,return,target
BeanDefinitionParserDelegate -> public Set<Object> parseSetElement(Element collectionEle, BeanDefinition bd);1432135182;Parse a set element.;public Set<Object> parseSetElement(Element collectionEle, BeanDefinition bd) {_		String defaultElementType = collectionEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = collectionEle.getChildNodes()__		ManagedSet<Object> target = new ManagedSet<Object>(nl.getLength())__		target.setSource(extractSource(collectionEle))__		target.setElementTypeName(defaultElementType)__		target.setMergeEnabled(parseMergeAttribute(collectionEle))__		parseCollectionElements(nl, target, bd, defaultElementType)__		return target__	};parse,a,set,element;public,set,object,parse,set,element,element,collection,ele,bean,definition,bd,string,default,element,type,collection,ele,get,attribute,node,list,nl,collection,ele,get,child,nodes,managed,set,object,target,new,managed,set,object,nl,get,length,target,set,source,extract,source,collection,ele,target,set,element,type,name,default,element,type,target,set,merge,enabled,parse,merge,attribute,collection,ele,parse,collection,elements,nl,target,bd,default,element,type,return,target
BeanDefinitionParserDelegate -> public Set<Object> parseSetElement(Element collectionEle, BeanDefinition bd);1447323728;Parse a set element.;public Set<Object> parseSetElement(Element collectionEle, BeanDefinition bd) {_		String defaultElementType = collectionEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = collectionEle.getChildNodes()__		ManagedSet<Object> target = new ManagedSet<Object>(nl.getLength())__		target.setSource(extractSource(collectionEle))__		target.setElementTypeName(defaultElementType)__		target.setMergeEnabled(parseMergeAttribute(collectionEle))__		parseCollectionElements(nl, target, bd, defaultElementType)__		return target__	};parse,a,set,element;public,set,object,parse,set,element,element,collection,ele,bean,definition,bd,string,default,element,type,collection,ele,get,attribute,node,list,nl,collection,ele,get,child,nodes,managed,set,object,target,new,managed,set,object,nl,get,length,target,set,source,extract,source,collection,ele,target,set,element,type,name,default,element,type,target,set,merge,enabled,parse,merge,attribute,collection,ele,parse,collection,elements,nl,target,bd,default,element,type,return,target
BeanDefinitionParserDelegate -> public Set<Object> parseSetElement(Element collectionEle, BeanDefinition bd);1467726769;Parse a set element.;public Set<Object> parseSetElement(Element collectionEle, BeanDefinition bd) {_		String defaultElementType = collectionEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = collectionEle.getChildNodes()__		ManagedSet<Object> target = new ManagedSet<Object>(nl.getLength())__		target.setSource(extractSource(collectionEle))__		target.setElementTypeName(defaultElementType)__		target.setMergeEnabled(parseMergeAttribute(collectionEle))__		parseCollectionElements(nl, target, bd, defaultElementType)__		return target__	};parse,a,set,element;public,set,object,parse,set,element,element,collection,ele,bean,definition,bd,string,default,element,type,collection,ele,get,attribute,node,list,nl,collection,ele,get,child,nodes,managed,set,object,target,new,managed,set,object,nl,get,length,target,set,source,extract,source,collection,ele,target,set,element,type,name,default,element,type,target,set,merge,enabled,parse,merge,attribute,collection,ele,parse,collection,elements,nl,target,bd,default,element,type,return,target
BeanDefinitionParserDelegate -> public Set<Object> parseSetElement(Element collectionEle, BeanDefinition bd);1467730834;Parse a set element.;public Set<Object> parseSetElement(Element collectionEle, BeanDefinition bd) {_		String defaultElementType = collectionEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = collectionEle.getChildNodes()__		ManagedSet<Object> target = new ManagedSet<>(nl.getLength())__		target.setSource(extractSource(collectionEle))__		target.setElementTypeName(defaultElementType)__		target.setMergeEnabled(parseMergeAttribute(collectionEle))__		parseCollectionElements(nl, target, bd, defaultElementType)__		return target__	};parse,a,set,element;public,set,object,parse,set,element,element,collection,ele,bean,definition,bd,string,default,element,type,collection,ele,get,attribute,node,list,nl,collection,ele,get,child,nodes,managed,set,object,target,new,managed,set,nl,get,length,target,set,source,extract,source,collection,ele,target,set,element,type,name,default,element,type,target,set,merge,enabled,parse,merge,attribute,collection,ele,parse,collection,elements,nl,target,bd,default,element,type,return,target
BeanDefinitionParserDelegate -> public Set<Object> parseSetElement(Element collectionEle, BeanDefinition bd);1467744603;Parse a set element.;public Set<Object> parseSetElement(Element collectionEle, BeanDefinition bd) {_		String defaultElementType = collectionEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = collectionEle.getChildNodes()__		ManagedSet<Object> target = new ManagedSet<>(nl.getLength())__		target.setSource(extractSource(collectionEle))__		target.setElementTypeName(defaultElementType)__		target.setMergeEnabled(parseMergeAttribute(collectionEle))__		parseCollectionElements(nl, target, bd, defaultElementType)__		return target__	};parse,a,set,element;public,set,object,parse,set,element,element,collection,ele,bean,definition,bd,string,default,element,type,collection,ele,get,attribute,node,list,nl,collection,ele,get,child,nodes,managed,set,object,target,new,managed,set,nl,get,length,target,set,source,extract,source,collection,ele,target,set,element,type,name,default,element,type,target,set,merge,enabled,parse,merge,attribute,collection,ele,parse,collection,elements,nl,target,bd,default,element,type,return,target
BeanDefinitionParserDelegate -> public Set<Object> parseSetElement(Element collectionEle, BeanDefinition bd);1487245676;Parse a set element.;public Set<Object> parseSetElement(Element collectionEle, BeanDefinition bd) {_		String defaultElementType = collectionEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = collectionEle.getChildNodes()__		ManagedSet<Object> target = new ManagedSet<>(nl.getLength())__		target.setSource(extractSource(collectionEle))__		target.setElementTypeName(defaultElementType)__		target.setMergeEnabled(parseMergeAttribute(collectionEle))__		parseCollectionElements(nl, target, bd, defaultElementType)__		return target__	};parse,a,set,element;public,set,object,parse,set,element,element,collection,ele,bean,definition,bd,string,default,element,type,collection,ele,get,attribute,node,list,nl,collection,ele,get,child,nodes,managed,set,object,target,new,managed,set,nl,get,length,target,set,source,extract,source,collection,ele,target,set,element,type,name,default,element,type,target,set,merge,enabled,parse,merge,attribute,collection,ele,parse,collection,elements,nl,target,bd,default,element,type,return,target
BeanDefinitionParserDelegate -> public Set<Object> parseSetElement(Element collectionEle, BeanDefinition bd);1487255851;Parse a set element.;public Set<Object> parseSetElement(Element collectionEle, BeanDefinition bd) {_		String defaultElementType = collectionEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = collectionEle.getChildNodes()__		ManagedSet<Object> target = new ManagedSet<>(nl.getLength())__		target.setSource(extractSource(collectionEle))__		target.setElementTypeName(defaultElementType)__		target.setMergeEnabled(parseMergeAttribute(collectionEle))__		parseCollectionElements(nl, target, bd, defaultElementType)__		return target__	};parse,a,set,element;public,set,object,parse,set,element,element,collection,ele,bean,definition,bd,string,default,element,type,collection,ele,get,attribute,node,list,nl,collection,ele,get,child,nodes,managed,set,object,target,new,managed,set,nl,get,length,target,set,source,extract,source,collection,ele,target,set,element,type,name,default,element,type,target,set,merge,enabled,parse,merge,attribute,collection,ele,parse,collection,elements,nl,target,bd,default,element,type,return,target
BeanDefinitionParserDelegate -> public Set<Object> parseSetElement(Element collectionEle, BeanDefinition bd);1494586217;Parse a set element.;public Set<Object> parseSetElement(Element collectionEle, BeanDefinition bd) {_		String defaultElementType = collectionEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = collectionEle.getChildNodes()__		ManagedSet<Object> target = new ManagedSet<>(nl.getLength())__		target.setSource(extractSource(collectionEle))__		target.setElementTypeName(defaultElementType)__		target.setMergeEnabled(parseMergeAttribute(collectionEle))__		parseCollectionElements(nl, target, bd, defaultElementType)__		return target__	};parse,a,set,element;public,set,object,parse,set,element,element,collection,ele,bean,definition,bd,string,default,element,type,collection,ele,get,attribute,node,list,nl,collection,ele,get,child,nodes,managed,set,object,target,new,managed,set,nl,get,length,target,set,source,extract,source,collection,ele,target,set,element,type,name,default,element,type,target,set,merge,enabled,parse,merge,attribute,collection,ele,parse,collection,elements,nl,target,bd,default,element,type,return,target
BeanDefinitionParserDelegate -> public Set<Object> parseSetElement(Element collectionEle, BeanDefinition bd);1495868221;Parse a set element.;public Set<Object> parseSetElement(Element collectionEle, BeanDefinition bd) {_		String defaultElementType = collectionEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = collectionEle.getChildNodes()__		ManagedSet<Object> target = new ManagedSet<>(nl.getLength())__		target.setSource(extractSource(collectionEle))__		target.setElementTypeName(defaultElementType)__		target.setMergeEnabled(parseMergeAttribute(collectionEle))__		parseCollectionElements(nl, target, bd, defaultElementType)__		return target__	};parse,a,set,element;public,set,object,parse,set,element,element,collection,ele,bean,definition,bd,string,default,element,type,collection,ele,get,attribute,node,list,nl,collection,ele,get,child,nodes,managed,set,object,target,new,managed,set,nl,get,length,target,set,source,extract,source,collection,ele,target,set,element,type,name,default,element,type,target,set,merge,enabled,parse,merge,attribute,collection,ele,parse,collection,elements,nl,target,bd,default,element,type,return,target
BeanDefinitionParserDelegate -> public Set<Object> parseSetElement(Element collectionEle, BeanDefinition bd);1496259743;Parse a set element.;public Set<Object> parseSetElement(Element collectionEle, BeanDefinition bd) {_		String defaultElementType = collectionEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = collectionEle.getChildNodes()__		ManagedSet<Object> target = new ManagedSet<>(nl.getLength())__		target.setSource(extractSource(collectionEle))__		target.setElementTypeName(defaultElementType)__		target.setMergeEnabled(parseMergeAttribute(collectionEle))__		parseCollectionElements(nl, target, bd, defaultElementType)__		return target__	};parse,a,set,element;public,set,object,parse,set,element,element,collection,ele,bean,definition,bd,string,default,element,type,collection,ele,get,attribute,node,list,nl,collection,ele,get,child,nodes,managed,set,object,target,new,managed,set,nl,get,length,target,set,source,extract,source,collection,ele,target,set,element,type,name,default,element,type,target,set,merge,enabled,parse,merge,attribute,collection,ele,parse,collection,elements,nl,target,bd,default,element,type,return,target
BeanDefinitionParserDelegate -> public AbstractBeanDefinition parseBeanDefinitionAttributes(Element ele, String beanName, 			@Nullable BeanDefinition containingBean, AbstractBeanDefinition bd);1496837955;Apply the attributes of the given bean element to the given bean * definition._@param ele bean declaration element_@param beanName bean name_@param containingBean containing bean definition_@return a bean definition initialized according to the bean element attributes;public AbstractBeanDefinition parseBeanDefinitionAttributes(Element ele, String beanName,_			@Nullable BeanDefinition containingBean, AbstractBeanDefinition bd) {__		if (ele.hasAttribute(SINGLETON_ATTRIBUTE)) {_			error("Old 1.x 'singleton' attribute in use - upgrade to 'scope' declaration", ele)__		}_		else if (ele.hasAttribute(SCOPE_ATTRIBUTE)) {_			bd.setScope(ele.getAttribute(SCOPE_ATTRIBUTE))__		}_		else if (containingBean != null) {_			_			bd.setScope(containingBean.getScope())__		}__		if (ele.hasAttribute(ABSTRACT_ATTRIBUTE)) {_			bd.setAbstract(TRUE_VALUE.equals(ele.getAttribute(ABSTRACT_ATTRIBUTE)))__		}__		String lazyInit = ele.getAttribute(LAZY_INIT_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(lazyInit)) {_			lazyInit = this.defaults.getLazyInit()__		}_		bd.setLazyInit(TRUE_VALUE.equals(lazyInit))___		String autowire = ele.getAttribute(AUTOWIRE_ATTRIBUTE)__		bd.setAutowireMode(getAutowireMode(autowire))___		if (ele.hasAttribute(DEPENDS_ON_ATTRIBUTE)) {_			String dependsOn = ele.getAttribute(DEPENDS_ON_ATTRIBUTE)__			bd.setDependsOn(StringUtils.tokenizeToStringArray(dependsOn, MULTI_VALUE_ATTRIBUTE_DELIMITERS))__		}__		String autowireCandidate = ele.getAttribute(AUTOWIRE_CANDIDATE_ATTRIBUTE)__		if ("".equals(autowireCandidate) || DEFAULT_VALUE.equals(autowireCandidate)) {_			String candidatePattern = this.defaults.getAutowireCandidates()__			if (candidatePattern != null) {_				String[] patterns = StringUtils.commaDelimitedListToStringArray(candidatePattern)__				bd.setAutowireCandidate(PatternMatchUtils.simpleMatch(patterns, beanName))__			}_		}_		else {_			bd.setAutowireCandidate(TRUE_VALUE.equals(autowireCandidate))__		}__		if (ele.hasAttribute(PRIMARY_ATTRIBUTE)) {_			bd.setPrimary(TRUE_VALUE.equals(ele.getAttribute(PRIMARY_ATTRIBUTE)))__		}__		if (ele.hasAttribute(INIT_METHOD_ATTRIBUTE)) {_			String initMethodName = ele.getAttribute(INIT_METHOD_ATTRIBUTE)__			if (!"".equals(initMethodName)) {_				bd.setInitMethodName(initMethodName)__			}_		}_		else if (this.defaults.getInitMethod() != null) {_			bd.setInitMethodName(this.defaults.getInitMethod())__			bd.setEnforceInitMethod(false)__		}__		if (ele.hasAttribute(DESTROY_METHOD_ATTRIBUTE)) {_			String destroyMethodName = ele.getAttribute(DESTROY_METHOD_ATTRIBUTE)__			bd.setDestroyMethodName(destroyMethodName)__		}_		else if (this.defaults.getDestroyMethod() != null) {_			bd.setDestroyMethodName(this.defaults.getDestroyMethod())__			bd.setEnforceDestroyMethod(false)__		}__		if (ele.hasAttribute(FACTORY_METHOD_ATTRIBUTE)) {_			bd.setFactoryMethodName(ele.getAttribute(FACTORY_METHOD_ATTRIBUTE))__		}_		if (ele.hasAttribute(FACTORY_BEAN_ATTRIBUTE)) {_			bd.setFactoryBeanName(ele.getAttribute(FACTORY_BEAN_ATTRIBUTE))__		}__		return bd__	};apply,the,attributes,of,the,given,bean,element,to,the,given,bean,definition,param,ele,bean,declaration,element,param,bean,name,bean,name,param,containing,bean,containing,bean,definition,return,a,bean,definition,initialized,according,to,the,bean,element,attributes;public,abstract,bean,definition,parse,bean,definition,attributes,element,ele,string,bean,name,nullable,bean,definition,containing,bean,abstract,bean,definition,bd,if,ele,has,attribute,error,old,1,x,singleton,attribute,in,use,upgrade,to,scope,declaration,ele,else,if,ele,has,attribute,bd,set,scope,ele,get,attribute,else,if,containing,bean,null,bd,set,scope,containing,bean,get,scope,if,ele,has,attribute,bd,set,abstract,equals,ele,get,attribute,string,lazy,init,ele,get,attribute,if,equals,lazy,init,lazy,init,this,defaults,get,lazy,init,bd,set,lazy,init,equals,lazy,init,string,autowire,ele,get,attribute,bd,set,autowire,mode,get,autowire,mode,autowire,if,ele,has,attribute,string,depends,on,ele,get,attribute,bd,set,depends,on,string,utils,tokenize,to,string,array,depends,on,string,autowire,candidate,ele,get,attribute,if,equals,autowire,candidate,equals,autowire,candidate,string,candidate,pattern,this,defaults,get,autowire,candidates,if,candidate,pattern,null,string,patterns,string,utils,comma,delimited,list,to,string,array,candidate,pattern,bd,set,autowire,candidate,pattern,match,utils,simple,match,patterns,bean,name,else,bd,set,autowire,candidate,equals,autowire,candidate,if,ele,has,attribute,bd,set,primary,equals,ele,get,attribute,if,ele,has,attribute,string,init,method,name,ele,get,attribute,if,equals,init,method,name,bd,set,init,method,name,init,method,name,else,if,this,defaults,get,init,method,null,bd,set,init,method,name,this,defaults,get,init,method,bd,set,enforce,init,method,false,if,ele,has,attribute,string,destroy,method,name,ele,get,attribute,bd,set,destroy,method,name,destroy,method,name,else,if,this,defaults,get,destroy,method,null,bd,set,destroy,method,name,this,defaults,get,destroy,method,bd,set,enforce,destroy,method,false,if,ele,has,attribute,bd,set,factory,method,name,ele,get,attribute,if,ele,has,attribute,bd,set,factory,bean,name,ele,get,attribute,return,bd
BeanDefinitionParserDelegate -> public AbstractBeanDefinition parseBeanDefinitionAttributes(Element ele, String beanName, 			@Nullable BeanDefinition containingBean, AbstractBeanDefinition bd);1503008029;Apply the attributes of the given bean element to the given bean * definition._@param ele bean declaration element_@param beanName bean name_@param containingBean containing bean definition_@return a bean definition initialized according to the bean element attributes;public AbstractBeanDefinition parseBeanDefinitionAttributes(Element ele, String beanName,_			@Nullable BeanDefinition containingBean, AbstractBeanDefinition bd) {__		if (ele.hasAttribute(SINGLETON_ATTRIBUTE)) {_			error("Old 1.x 'singleton' attribute in use - upgrade to 'scope' declaration", ele)__		}_		else if (ele.hasAttribute(SCOPE_ATTRIBUTE)) {_			bd.setScope(ele.getAttribute(SCOPE_ATTRIBUTE))__		}_		else if (containingBean != null) {_			_			bd.setScope(containingBean.getScope())__		}__		if (ele.hasAttribute(ABSTRACT_ATTRIBUTE)) {_			bd.setAbstract(TRUE_VALUE.equals(ele.getAttribute(ABSTRACT_ATTRIBUTE)))__		}__		String lazyInit = ele.getAttribute(LAZY_INIT_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(lazyInit)) {_			lazyInit = this.defaults.getLazyInit()__		}_		bd.setLazyInit(TRUE_VALUE.equals(lazyInit))___		String autowire = ele.getAttribute(AUTOWIRE_ATTRIBUTE)__		bd.setAutowireMode(getAutowireMode(autowire))___		if (ele.hasAttribute(DEPENDS_ON_ATTRIBUTE)) {_			String dependsOn = ele.getAttribute(DEPENDS_ON_ATTRIBUTE)__			bd.setDependsOn(StringUtils.tokenizeToStringArray(dependsOn, MULTI_VALUE_ATTRIBUTE_DELIMITERS))__		}__		String autowireCandidate = ele.getAttribute(AUTOWIRE_CANDIDATE_ATTRIBUTE)__		if ("".equals(autowireCandidate) || DEFAULT_VALUE.equals(autowireCandidate)) {_			String candidatePattern = this.defaults.getAutowireCandidates()__			if (candidatePattern != null) {_				String[] patterns = StringUtils.commaDelimitedListToStringArray(candidatePattern)__				bd.setAutowireCandidate(PatternMatchUtils.simpleMatch(patterns, beanName))__			}_		}_		else {_			bd.setAutowireCandidate(TRUE_VALUE.equals(autowireCandidate))__		}__		if (ele.hasAttribute(PRIMARY_ATTRIBUTE)) {_			bd.setPrimary(TRUE_VALUE.equals(ele.getAttribute(PRIMARY_ATTRIBUTE)))__		}__		if (ele.hasAttribute(INIT_METHOD_ATTRIBUTE)) {_			String initMethodName = ele.getAttribute(INIT_METHOD_ATTRIBUTE)__			bd.setInitMethodName(initMethodName)__		}_		else if (this.defaults.getInitMethod() != null) {_			bd.setInitMethodName(this.defaults.getInitMethod())__			bd.setEnforceInitMethod(false)__		}__		if (ele.hasAttribute(DESTROY_METHOD_ATTRIBUTE)) {_			String destroyMethodName = ele.getAttribute(DESTROY_METHOD_ATTRIBUTE)__			bd.setDestroyMethodName(destroyMethodName)__		}_		else if (this.defaults.getDestroyMethod() != null) {_			bd.setDestroyMethodName(this.defaults.getDestroyMethod())__			bd.setEnforceDestroyMethod(false)__		}__		if (ele.hasAttribute(FACTORY_METHOD_ATTRIBUTE)) {_			bd.setFactoryMethodName(ele.getAttribute(FACTORY_METHOD_ATTRIBUTE))__		}_		if (ele.hasAttribute(FACTORY_BEAN_ATTRIBUTE)) {_			bd.setFactoryBeanName(ele.getAttribute(FACTORY_BEAN_ATTRIBUTE))__		}__		return bd__	};apply,the,attributes,of,the,given,bean,element,to,the,given,bean,definition,param,ele,bean,declaration,element,param,bean,name,bean,name,param,containing,bean,containing,bean,definition,return,a,bean,definition,initialized,according,to,the,bean,element,attributes;public,abstract,bean,definition,parse,bean,definition,attributes,element,ele,string,bean,name,nullable,bean,definition,containing,bean,abstract,bean,definition,bd,if,ele,has,attribute,error,old,1,x,singleton,attribute,in,use,upgrade,to,scope,declaration,ele,else,if,ele,has,attribute,bd,set,scope,ele,get,attribute,else,if,containing,bean,null,bd,set,scope,containing,bean,get,scope,if,ele,has,attribute,bd,set,abstract,equals,ele,get,attribute,string,lazy,init,ele,get,attribute,if,equals,lazy,init,lazy,init,this,defaults,get,lazy,init,bd,set,lazy,init,equals,lazy,init,string,autowire,ele,get,attribute,bd,set,autowire,mode,get,autowire,mode,autowire,if,ele,has,attribute,string,depends,on,ele,get,attribute,bd,set,depends,on,string,utils,tokenize,to,string,array,depends,on,string,autowire,candidate,ele,get,attribute,if,equals,autowire,candidate,equals,autowire,candidate,string,candidate,pattern,this,defaults,get,autowire,candidates,if,candidate,pattern,null,string,patterns,string,utils,comma,delimited,list,to,string,array,candidate,pattern,bd,set,autowire,candidate,pattern,match,utils,simple,match,patterns,bean,name,else,bd,set,autowire,candidate,equals,autowire,candidate,if,ele,has,attribute,bd,set,primary,equals,ele,get,attribute,if,ele,has,attribute,string,init,method,name,ele,get,attribute,bd,set,init,method,name,init,method,name,else,if,this,defaults,get,init,method,null,bd,set,init,method,name,this,defaults,get,init,method,bd,set,enforce,init,method,false,if,ele,has,attribute,string,destroy,method,name,ele,get,attribute,bd,set,destroy,method,name,destroy,method,name,else,if,this,defaults,get,destroy,method,null,bd,set,destroy,method,name,this,defaults,get,destroy,method,bd,set,enforce,destroy,method,false,if,ele,has,attribute,bd,set,factory,method,name,ele,get,attribute,if,ele,has,attribute,bd,set,factory,bean,name,ele,get,attribute,return,bd
BeanDefinitionParserDelegate -> public AbstractBeanDefinition parseBeanDefinitionAttributes(Element ele, String beanName, 			@Nullable BeanDefinition containingBean, AbstractBeanDefinition bd);1519513303;Apply the attributes of the given bean element to the given bean * definition._@param ele bean declaration element_@param beanName bean name_@param containingBean containing bean definition_@return a bean definition initialized according to the bean element attributes;public AbstractBeanDefinition parseBeanDefinitionAttributes(Element ele, String beanName,_			@Nullable BeanDefinition containingBean, AbstractBeanDefinition bd) {__		if (ele.hasAttribute(SINGLETON_ATTRIBUTE)) {_			error("Old 1.x 'singleton' attribute in use - upgrade to 'scope' declaration", ele)__		}_		else if (ele.hasAttribute(SCOPE_ATTRIBUTE)) {_			bd.setScope(ele.getAttribute(SCOPE_ATTRIBUTE))__		}_		else if (containingBean != null) {_			_			bd.setScope(containingBean.getScope())__		}__		if (ele.hasAttribute(ABSTRACT_ATTRIBUTE)) {_			bd.setAbstract(TRUE_VALUE.equals(ele.getAttribute(ABSTRACT_ATTRIBUTE)))__		}__		String lazyInit = ele.getAttribute(LAZY_INIT_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(lazyInit)) {_			lazyInit = this.defaults.getLazyInit()__		}_		bd.setLazyInit(TRUE_VALUE.equals(lazyInit))___		String autowire = ele.getAttribute(AUTOWIRE_ATTRIBUTE)__		bd.setAutowireMode(getAutowireMode(autowire))___		if (ele.hasAttribute(DEPENDS_ON_ATTRIBUTE)) {_			String dependsOn = ele.getAttribute(DEPENDS_ON_ATTRIBUTE)__			bd.setDependsOn(StringUtils.tokenizeToStringArray(dependsOn, MULTI_VALUE_ATTRIBUTE_DELIMITERS))__		}__		String autowireCandidate = ele.getAttribute(AUTOWIRE_CANDIDATE_ATTRIBUTE)__		if ("".equals(autowireCandidate) || DEFAULT_VALUE.equals(autowireCandidate)) {_			String candidatePattern = this.defaults.getAutowireCandidates()__			if (candidatePattern != null) {_				String[] patterns = StringUtils.commaDelimitedListToStringArray(candidatePattern)__				bd.setAutowireCandidate(PatternMatchUtils.simpleMatch(patterns, beanName))__			}_		}_		else {_			bd.setAutowireCandidate(TRUE_VALUE.equals(autowireCandidate))__		}__		if (ele.hasAttribute(PRIMARY_ATTRIBUTE)) {_			bd.setPrimary(TRUE_VALUE.equals(ele.getAttribute(PRIMARY_ATTRIBUTE)))__		}__		if (ele.hasAttribute(INIT_METHOD_ATTRIBUTE)) {_			String initMethodName = ele.getAttribute(INIT_METHOD_ATTRIBUTE)__			bd.setInitMethodName(initMethodName)__		}_		else if (this.defaults.getInitMethod() != null) {_			bd.setInitMethodName(this.defaults.getInitMethod())__			bd.setEnforceInitMethod(false)__		}__		if (ele.hasAttribute(DESTROY_METHOD_ATTRIBUTE)) {_			String destroyMethodName = ele.getAttribute(DESTROY_METHOD_ATTRIBUTE)__			bd.setDestroyMethodName(destroyMethodName)__		}_		else if (this.defaults.getDestroyMethod() != null) {_			bd.setDestroyMethodName(this.defaults.getDestroyMethod())__			bd.setEnforceDestroyMethod(false)__		}__		if (ele.hasAttribute(FACTORY_METHOD_ATTRIBUTE)) {_			bd.setFactoryMethodName(ele.getAttribute(FACTORY_METHOD_ATTRIBUTE))__		}_		if (ele.hasAttribute(FACTORY_BEAN_ATTRIBUTE)) {_			bd.setFactoryBeanName(ele.getAttribute(FACTORY_BEAN_ATTRIBUTE))__		}__		return bd__	};apply,the,attributes,of,the,given,bean,element,to,the,given,bean,definition,param,ele,bean,declaration,element,param,bean,name,bean,name,param,containing,bean,containing,bean,definition,return,a,bean,definition,initialized,according,to,the,bean,element,attributes;public,abstract,bean,definition,parse,bean,definition,attributes,element,ele,string,bean,name,nullable,bean,definition,containing,bean,abstract,bean,definition,bd,if,ele,has,attribute,error,old,1,x,singleton,attribute,in,use,upgrade,to,scope,declaration,ele,else,if,ele,has,attribute,bd,set,scope,ele,get,attribute,else,if,containing,bean,null,bd,set,scope,containing,bean,get,scope,if,ele,has,attribute,bd,set,abstract,equals,ele,get,attribute,string,lazy,init,ele,get,attribute,if,equals,lazy,init,lazy,init,this,defaults,get,lazy,init,bd,set,lazy,init,equals,lazy,init,string,autowire,ele,get,attribute,bd,set,autowire,mode,get,autowire,mode,autowire,if,ele,has,attribute,string,depends,on,ele,get,attribute,bd,set,depends,on,string,utils,tokenize,to,string,array,depends,on,string,autowire,candidate,ele,get,attribute,if,equals,autowire,candidate,equals,autowire,candidate,string,candidate,pattern,this,defaults,get,autowire,candidates,if,candidate,pattern,null,string,patterns,string,utils,comma,delimited,list,to,string,array,candidate,pattern,bd,set,autowire,candidate,pattern,match,utils,simple,match,patterns,bean,name,else,bd,set,autowire,candidate,equals,autowire,candidate,if,ele,has,attribute,bd,set,primary,equals,ele,get,attribute,if,ele,has,attribute,string,init,method,name,ele,get,attribute,bd,set,init,method,name,init,method,name,else,if,this,defaults,get,init,method,null,bd,set,init,method,name,this,defaults,get,init,method,bd,set,enforce,init,method,false,if,ele,has,attribute,string,destroy,method,name,ele,get,attribute,bd,set,destroy,method,name,destroy,method,name,else,if,this,defaults,get,destroy,method,null,bd,set,destroy,method,name,this,defaults,get,destroy,method,bd,set,enforce,destroy,method,false,if,ele,has,attribute,bd,set,factory,method,name,ele,get,attribute,if,ele,has,attribute,bd,set,factory,bean,name,ele,get,attribute,return,bd
BeanDefinitionParserDelegate -> public AbstractBeanDefinition parseBeanDefinitionAttributes(Element ele, String beanName, 			@Nullable BeanDefinition containingBean, AbstractBeanDefinition bd);1530174524;Apply the attributes of the given bean element to the given bean * definition._@param ele bean declaration element_@param beanName bean name_@param containingBean containing bean definition_@return a bean definition initialized according to the bean element attributes;public AbstractBeanDefinition parseBeanDefinitionAttributes(Element ele, String beanName,_			@Nullable BeanDefinition containingBean, AbstractBeanDefinition bd) {__		if (ele.hasAttribute(SINGLETON_ATTRIBUTE)) {_			error("Old 1.x 'singleton' attribute in use - upgrade to 'scope' declaration", ele)__		}_		else if (ele.hasAttribute(SCOPE_ATTRIBUTE)) {_			bd.setScope(ele.getAttribute(SCOPE_ATTRIBUTE))__		}_		else if (containingBean != null) {_			_			bd.setScope(containingBean.getScope())__		}__		if (ele.hasAttribute(ABSTRACT_ATTRIBUTE)) {_			bd.setAbstract(TRUE_VALUE.equals(ele.getAttribute(ABSTRACT_ATTRIBUTE)))__		}__		String lazyInit = ele.getAttribute(LAZY_INIT_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(lazyInit)) {_			lazyInit = this.defaults.getLazyInit()__		}_		bd.setLazyInit(TRUE_VALUE.equals(lazyInit))___		String autowire = ele.getAttribute(AUTOWIRE_ATTRIBUTE)__		bd.setAutowireMode(getAutowireMode(autowire))___		if (ele.hasAttribute(DEPENDS_ON_ATTRIBUTE)) {_			String dependsOn = ele.getAttribute(DEPENDS_ON_ATTRIBUTE)__			bd.setDependsOn(StringUtils.tokenizeToStringArray(dependsOn, MULTI_VALUE_ATTRIBUTE_DELIMITERS))__		}__		String autowireCandidate = ele.getAttribute(AUTOWIRE_CANDIDATE_ATTRIBUTE)__		if ("".equals(autowireCandidate) || DEFAULT_VALUE.equals(autowireCandidate)) {_			String candidatePattern = this.defaults.getAutowireCandidates()__			if (candidatePattern != null) {_				String[] patterns = StringUtils.commaDelimitedListToStringArray(candidatePattern)__				bd.setAutowireCandidate(PatternMatchUtils.simpleMatch(patterns, beanName))__			}_		}_		else {_			bd.setAutowireCandidate(TRUE_VALUE.equals(autowireCandidate))__		}__		if (ele.hasAttribute(PRIMARY_ATTRIBUTE)) {_			bd.setPrimary(TRUE_VALUE.equals(ele.getAttribute(PRIMARY_ATTRIBUTE)))__		}__		if (ele.hasAttribute(INIT_METHOD_ATTRIBUTE)) {_			String initMethodName = ele.getAttribute(INIT_METHOD_ATTRIBUTE)__			bd.setInitMethodName(initMethodName)__		}_		else if (this.defaults.getInitMethod() != null) {_			bd.setInitMethodName(this.defaults.getInitMethod())__			bd.setEnforceInitMethod(false)__		}__		if (ele.hasAttribute(DESTROY_METHOD_ATTRIBUTE)) {_			String destroyMethodName = ele.getAttribute(DESTROY_METHOD_ATTRIBUTE)__			bd.setDestroyMethodName(destroyMethodName)__		}_		else if (this.defaults.getDestroyMethod() != null) {_			bd.setDestroyMethodName(this.defaults.getDestroyMethod())__			bd.setEnforceDestroyMethod(false)__		}__		if (ele.hasAttribute(FACTORY_METHOD_ATTRIBUTE)) {_			bd.setFactoryMethodName(ele.getAttribute(FACTORY_METHOD_ATTRIBUTE))__		}_		if (ele.hasAttribute(FACTORY_BEAN_ATTRIBUTE)) {_			bd.setFactoryBeanName(ele.getAttribute(FACTORY_BEAN_ATTRIBUTE))__		}__		return bd__	};apply,the,attributes,of,the,given,bean,element,to,the,given,bean,definition,param,ele,bean,declaration,element,param,bean,name,bean,name,param,containing,bean,containing,bean,definition,return,a,bean,definition,initialized,according,to,the,bean,element,attributes;public,abstract,bean,definition,parse,bean,definition,attributes,element,ele,string,bean,name,nullable,bean,definition,containing,bean,abstract,bean,definition,bd,if,ele,has,attribute,error,old,1,x,singleton,attribute,in,use,upgrade,to,scope,declaration,ele,else,if,ele,has,attribute,bd,set,scope,ele,get,attribute,else,if,containing,bean,null,bd,set,scope,containing,bean,get,scope,if,ele,has,attribute,bd,set,abstract,equals,ele,get,attribute,string,lazy,init,ele,get,attribute,if,equals,lazy,init,lazy,init,this,defaults,get,lazy,init,bd,set,lazy,init,equals,lazy,init,string,autowire,ele,get,attribute,bd,set,autowire,mode,get,autowire,mode,autowire,if,ele,has,attribute,string,depends,on,ele,get,attribute,bd,set,depends,on,string,utils,tokenize,to,string,array,depends,on,string,autowire,candidate,ele,get,attribute,if,equals,autowire,candidate,equals,autowire,candidate,string,candidate,pattern,this,defaults,get,autowire,candidates,if,candidate,pattern,null,string,patterns,string,utils,comma,delimited,list,to,string,array,candidate,pattern,bd,set,autowire,candidate,pattern,match,utils,simple,match,patterns,bean,name,else,bd,set,autowire,candidate,equals,autowire,candidate,if,ele,has,attribute,bd,set,primary,equals,ele,get,attribute,if,ele,has,attribute,string,init,method,name,ele,get,attribute,bd,set,init,method,name,init,method,name,else,if,this,defaults,get,init,method,null,bd,set,init,method,name,this,defaults,get,init,method,bd,set,enforce,init,method,false,if,ele,has,attribute,string,destroy,method,name,ele,get,attribute,bd,set,destroy,method,name,destroy,method,name,else,if,this,defaults,get,destroy,method,null,bd,set,destroy,method,name,this,defaults,get,destroy,method,bd,set,enforce,destroy,method,false,if,ele,has,attribute,bd,set,factory,method,name,ele,get,attribute,if,ele,has,attribute,bd,set,factory,bean,name,ele,get,attribute,return,bd
BeanDefinitionParserDelegate -> public AbstractBeanDefinition parseBeanDefinitionAttributes(Element ele, String beanName, 			@Nullable BeanDefinition containingBean, AbstractBeanDefinition bd);1530190293;Apply the attributes of the given bean element to the given bean * definition._@param ele bean declaration element_@param beanName bean name_@param containingBean containing bean definition_@return a bean definition initialized according to the bean element attributes;public AbstractBeanDefinition parseBeanDefinitionAttributes(Element ele, String beanName,_			@Nullable BeanDefinition containingBean, AbstractBeanDefinition bd) {__		if (ele.hasAttribute(SINGLETON_ATTRIBUTE)) {_			error("Old 1.x 'singleton' attribute in use - upgrade to 'scope' declaration", ele)__		}_		else if (ele.hasAttribute(SCOPE_ATTRIBUTE)) {_			bd.setScope(ele.getAttribute(SCOPE_ATTRIBUTE))__		}_		else if (containingBean != null) {_			_			bd.setScope(containingBean.getScope())__		}__		if (ele.hasAttribute(ABSTRACT_ATTRIBUTE)) {_			bd.setAbstract(TRUE_VALUE.equals(ele.getAttribute(ABSTRACT_ATTRIBUTE)))__		}__		String lazyInit = ele.getAttribute(LAZY_INIT_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(lazyInit)) {_			lazyInit = this.defaults.getLazyInit()__		}_		bd.setLazyInit(TRUE_VALUE.equals(lazyInit))___		String autowire = ele.getAttribute(AUTOWIRE_ATTRIBUTE)__		bd.setAutowireMode(getAutowireMode(autowire))___		if (ele.hasAttribute(DEPENDS_ON_ATTRIBUTE)) {_			String dependsOn = ele.getAttribute(DEPENDS_ON_ATTRIBUTE)__			bd.setDependsOn(StringUtils.tokenizeToStringArray(dependsOn, MULTI_VALUE_ATTRIBUTE_DELIMITERS))__		}__		String autowireCandidate = ele.getAttribute(AUTOWIRE_CANDIDATE_ATTRIBUTE)__		if ("".equals(autowireCandidate) || DEFAULT_VALUE.equals(autowireCandidate)) {_			String candidatePattern = this.defaults.getAutowireCandidates()__			if (candidatePattern != null) {_				String[] patterns = StringUtils.commaDelimitedListToStringArray(candidatePattern)__				bd.setAutowireCandidate(PatternMatchUtils.simpleMatch(patterns, beanName))__			}_		}_		else {_			bd.setAutowireCandidate(TRUE_VALUE.equals(autowireCandidate))__		}__		if (ele.hasAttribute(PRIMARY_ATTRIBUTE)) {_			bd.setPrimary(TRUE_VALUE.equals(ele.getAttribute(PRIMARY_ATTRIBUTE)))__		}__		if (ele.hasAttribute(INIT_METHOD_ATTRIBUTE)) {_			String initMethodName = ele.getAttribute(INIT_METHOD_ATTRIBUTE)__			bd.setInitMethodName(initMethodName)__		}_		else if (this.defaults.getInitMethod() != null) {_			bd.setInitMethodName(this.defaults.getInitMethod())__			bd.setEnforceInitMethod(false)__		}__		if (ele.hasAttribute(DESTROY_METHOD_ATTRIBUTE)) {_			String destroyMethodName = ele.getAttribute(DESTROY_METHOD_ATTRIBUTE)__			bd.setDestroyMethodName(destroyMethodName)__		}_		else if (this.defaults.getDestroyMethod() != null) {_			bd.setDestroyMethodName(this.defaults.getDestroyMethod())__			bd.setEnforceDestroyMethod(false)__		}__		if (ele.hasAttribute(FACTORY_METHOD_ATTRIBUTE)) {_			bd.setFactoryMethodName(ele.getAttribute(FACTORY_METHOD_ATTRIBUTE))__		}_		if (ele.hasAttribute(FACTORY_BEAN_ATTRIBUTE)) {_			bd.setFactoryBeanName(ele.getAttribute(FACTORY_BEAN_ATTRIBUTE))__		}__		return bd__	};apply,the,attributes,of,the,given,bean,element,to,the,given,bean,definition,param,ele,bean,declaration,element,param,bean,name,bean,name,param,containing,bean,containing,bean,definition,return,a,bean,definition,initialized,according,to,the,bean,element,attributes;public,abstract,bean,definition,parse,bean,definition,attributes,element,ele,string,bean,name,nullable,bean,definition,containing,bean,abstract,bean,definition,bd,if,ele,has,attribute,error,old,1,x,singleton,attribute,in,use,upgrade,to,scope,declaration,ele,else,if,ele,has,attribute,bd,set,scope,ele,get,attribute,else,if,containing,bean,null,bd,set,scope,containing,bean,get,scope,if,ele,has,attribute,bd,set,abstract,equals,ele,get,attribute,string,lazy,init,ele,get,attribute,if,equals,lazy,init,lazy,init,this,defaults,get,lazy,init,bd,set,lazy,init,equals,lazy,init,string,autowire,ele,get,attribute,bd,set,autowire,mode,get,autowire,mode,autowire,if,ele,has,attribute,string,depends,on,ele,get,attribute,bd,set,depends,on,string,utils,tokenize,to,string,array,depends,on,string,autowire,candidate,ele,get,attribute,if,equals,autowire,candidate,equals,autowire,candidate,string,candidate,pattern,this,defaults,get,autowire,candidates,if,candidate,pattern,null,string,patterns,string,utils,comma,delimited,list,to,string,array,candidate,pattern,bd,set,autowire,candidate,pattern,match,utils,simple,match,patterns,bean,name,else,bd,set,autowire,candidate,equals,autowire,candidate,if,ele,has,attribute,bd,set,primary,equals,ele,get,attribute,if,ele,has,attribute,string,init,method,name,ele,get,attribute,bd,set,init,method,name,init,method,name,else,if,this,defaults,get,init,method,null,bd,set,init,method,name,this,defaults,get,init,method,bd,set,enforce,init,method,false,if,ele,has,attribute,string,destroy,method,name,ele,get,attribute,bd,set,destroy,method,name,destroy,method,name,else,if,this,defaults,get,destroy,method,null,bd,set,destroy,method,name,this,defaults,get,destroy,method,bd,set,enforce,destroy,method,false,if,ele,has,attribute,bd,set,factory,method,name,ele,get,attribute,if,ele,has,attribute,bd,set,factory,bean,name,ele,get,attribute,return,bd
BeanDefinitionParserDelegate -> public AbstractBeanDefinition parseBeanDefinitionAttributes(Element ele, String beanName, 			@Nullable BeanDefinition containingBean, AbstractBeanDefinition bd);1532706365;Apply the attributes of the given bean element to the given bean * definition._@param ele bean declaration element_@param beanName bean name_@param containingBean containing bean definition_@return a bean definition initialized according to the bean element attributes;public AbstractBeanDefinition parseBeanDefinitionAttributes(Element ele, String beanName,_			@Nullable BeanDefinition containingBean, AbstractBeanDefinition bd) {__		if (ele.hasAttribute(SINGLETON_ATTRIBUTE)) {_			error("Old 1.x 'singleton' attribute in use - upgrade to 'scope' declaration", ele)__		}_		else if (ele.hasAttribute(SCOPE_ATTRIBUTE)) {_			bd.setScope(ele.getAttribute(SCOPE_ATTRIBUTE))__		}_		else if (containingBean != null) {_			_			bd.setScope(containingBean.getScope())__		}__		if (ele.hasAttribute(ABSTRACT_ATTRIBUTE)) {_			bd.setAbstract(TRUE_VALUE.equals(ele.getAttribute(ABSTRACT_ATTRIBUTE)))__		}__		String lazyInit = ele.getAttribute(LAZY_INIT_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(lazyInit)) {_			lazyInit = this.defaults.getLazyInit()__		}_		bd.setLazyInit(TRUE_VALUE.equals(lazyInit))___		String autowire = ele.getAttribute(AUTOWIRE_ATTRIBUTE)__		bd.setAutowireMode(getAutowireMode(autowire))___		if (ele.hasAttribute(DEPENDS_ON_ATTRIBUTE)) {_			String dependsOn = ele.getAttribute(DEPENDS_ON_ATTRIBUTE)__			bd.setDependsOn(StringUtils.tokenizeToStringArray(dependsOn, MULTI_VALUE_ATTRIBUTE_DELIMITERS))__		}__		String autowireCandidate = ele.getAttribute(AUTOWIRE_CANDIDATE_ATTRIBUTE)__		if ("".equals(autowireCandidate) || DEFAULT_VALUE.equals(autowireCandidate)) {_			String candidatePattern = this.defaults.getAutowireCandidates()__			if (candidatePattern != null) {_				String[] patterns = StringUtils.commaDelimitedListToStringArray(candidatePattern)__				bd.setAutowireCandidate(PatternMatchUtils.simpleMatch(patterns, beanName))__			}_		}_		else {_			bd.setAutowireCandidate(TRUE_VALUE.equals(autowireCandidate))__		}__		if (ele.hasAttribute(PRIMARY_ATTRIBUTE)) {_			bd.setPrimary(TRUE_VALUE.equals(ele.getAttribute(PRIMARY_ATTRIBUTE)))__		}__		if (ele.hasAttribute(INIT_METHOD_ATTRIBUTE)) {_			String initMethodName = ele.getAttribute(INIT_METHOD_ATTRIBUTE)__			bd.setInitMethodName(initMethodName)__		}_		else if (this.defaults.getInitMethod() != null) {_			bd.setInitMethodName(this.defaults.getInitMethod())__			bd.setEnforceInitMethod(false)__		}__		if (ele.hasAttribute(DESTROY_METHOD_ATTRIBUTE)) {_			String destroyMethodName = ele.getAttribute(DESTROY_METHOD_ATTRIBUTE)__			bd.setDestroyMethodName(destroyMethodName)__		}_		else if (this.defaults.getDestroyMethod() != null) {_			bd.setDestroyMethodName(this.defaults.getDestroyMethod())__			bd.setEnforceDestroyMethod(false)__		}__		if (ele.hasAttribute(FACTORY_METHOD_ATTRIBUTE)) {_			bd.setFactoryMethodName(ele.getAttribute(FACTORY_METHOD_ATTRIBUTE))__		}_		if (ele.hasAttribute(FACTORY_BEAN_ATTRIBUTE)) {_			bd.setFactoryBeanName(ele.getAttribute(FACTORY_BEAN_ATTRIBUTE))__		}__		return bd__	};apply,the,attributes,of,the,given,bean,element,to,the,given,bean,definition,param,ele,bean,declaration,element,param,bean,name,bean,name,param,containing,bean,containing,bean,definition,return,a,bean,definition,initialized,according,to,the,bean,element,attributes;public,abstract,bean,definition,parse,bean,definition,attributes,element,ele,string,bean,name,nullable,bean,definition,containing,bean,abstract,bean,definition,bd,if,ele,has,attribute,error,old,1,x,singleton,attribute,in,use,upgrade,to,scope,declaration,ele,else,if,ele,has,attribute,bd,set,scope,ele,get,attribute,else,if,containing,bean,null,bd,set,scope,containing,bean,get,scope,if,ele,has,attribute,bd,set,abstract,equals,ele,get,attribute,string,lazy,init,ele,get,attribute,if,equals,lazy,init,lazy,init,this,defaults,get,lazy,init,bd,set,lazy,init,equals,lazy,init,string,autowire,ele,get,attribute,bd,set,autowire,mode,get,autowire,mode,autowire,if,ele,has,attribute,string,depends,on,ele,get,attribute,bd,set,depends,on,string,utils,tokenize,to,string,array,depends,on,string,autowire,candidate,ele,get,attribute,if,equals,autowire,candidate,equals,autowire,candidate,string,candidate,pattern,this,defaults,get,autowire,candidates,if,candidate,pattern,null,string,patterns,string,utils,comma,delimited,list,to,string,array,candidate,pattern,bd,set,autowire,candidate,pattern,match,utils,simple,match,patterns,bean,name,else,bd,set,autowire,candidate,equals,autowire,candidate,if,ele,has,attribute,bd,set,primary,equals,ele,get,attribute,if,ele,has,attribute,string,init,method,name,ele,get,attribute,bd,set,init,method,name,init,method,name,else,if,this,defaults,get,init,method,null,bd,set,init,method,name,this,defaults,get,init,method,bd,set,enforce,init,method,false,if,ele,has,attribute,string,destroy,method,name,ele,get,attribute,bd,set,destroy,method,name,destroy,method,name,else,if,this,defaults,get,destroy,method,null,bd,set,destroy,method,name,this,defaults,get,destroy,method,bd,set,enforce,destroy,method,false,if,ele,has,attribute,bd,set,factory,method,name,ele,get,attribute,if,ele,has,attribute,bd,set,factory,bean,name,ele,get,attribute,return,bd
BeanDefinitionParserDelegate -> public AbstractBeanDefinition parseBeanDefinitionAttributes(Element ele, String beanName, 			@Nullable BeanDefinition containingBean, AbstractBeanDefinition bd);1546958161;Apply the attributes of the given bean element to the given bean * definition._@param ele bean declaration element_@param beanName bean name_@param containingBean containing bean definition_@return a bean definition initialized according to the bean element attributes;public AbstractBeanDefinition parseBeanDefinitionAttributes(Element ele, String beanName,_			@Nullable BeanDefinition containingBean, AbstractBeanDefinition bd) {__		if (ele.hasAttribute(SINGLETON_ATTRIBUTE)) {_			error("Old 1.x 'singleton' attribute in use - upgrade to 'scope' declaration", ele)__		}_		else if (ele.hasAttribute(SCOPE_ATTRIBUTE)) {_			bd.setScope(ele.getAttribute(SCOPE_ATTRIBUTE))__		}_		else if (containingBean != null) {_			_			bd.setScope(containingBean.getScope())__		}__		if (ele.hasAttribute(ABSTRACT_ATTRIBUTE)) {_			bd.setAbstract(TRUE_VALUE.equals(ele.getAttribute(ABSTRACT_ATTRIBUTE)))__		}__		String lazyInit = ele.getAttribute(LAZY_INIT_ATTRIBUTE)__		if (isDefaultValue(lazyInit)) {_			lazyInit = this.defaults.getLazyInit()__		}_		bd.setLazyInit(TRUE_VALUE.equals(lazyInit))___		String autowire = ele.getAttribute(AUTOWIRE_ATTRIBUTE)__		bd.setAutowireMode(getAutowireMode(autowire))___		if (ele.hasAttribute(DEPENDS_ON_ATTRIBUTE)) {_			String dependsOn = ele.getAttribute(DEPENDS_ON_ATTRIBUTE)__			bd.setDependsOn(StringUtils.tokenizeToStringArray(dependsOn, MULTI_VALUE_ATTRIBUTE_DELIMITERS))__		}__		String autowireCandidate = ele.getAttribute(AUTOWIRE_CANDIDATE_ATTRIBUTE)__		if (isDefaultValue(autowireCandidate)) {_			String candidatePattern = this.defaults.getAutowireCandidates()__			if (candidatePattern != null) {_				String[] patterns = StringUtils.commaDelimitedListToStringArray(candidatePattern)__				bd.setAutowireCandidate(PatternMatchUtils.simpleMatch(patterns, beanName))__			}_		}_		else {_			bd.setAutowireCandidate(TRUE_VALUE.equals(autowireCandidate))__		}__		if (ele.hasAttribute(PRIMARY_ATTRIBUTE)) {_			bd.setPrimary(TRUE_VALUE.equals(ele.getAttribute(PRIMARY_ATTRIBUTE)))__		}__		if (ele.hasAttribute(INIT_METHOD_ATTRIBUTE)) {_			String initMethodName = ele.getAttribute(INIT_METHOD_ATTRIBUTE)__			bd.setInitMethodName(initMethodName)__		}_		else if (this.defaults.getInitMethod() != null) {_			bd.setInitMethodName(this.defaults.getInitMethod())__			bd.setEnforceInitMethod(false)__		}__		if (ele.hasAttribute(DESTROY_METHOD_ATTRIBUTE)) {_			String destroyMethodName = ele.getAttribute(DESTROY_METHOD_ATTRIBUTE)__			bd.setDestroyMethodName(destroyMethodName)__		}_		else if (this.defaults.getDestroyMethod() != null) {_			bd.setDestroyMethodName(this.defaults.getDestroyMethod())__			bd.setEnforceDestroyMethod(false)__		}__		if (ele.hasAttribute(FACTORY_METHOD_ATTRIBUTE)) {_			bd.setFactoryMethodName(ele.getAttribute(FACTORY_METHOD_ATTRIBUTE))__		}_		if (ele.hasAttribute(FACTORY_BEAN_ATTRIBUTE)) {_			bd.setFactoryBeanName(ele.getAttribute(FACTORY_BEAN_ATTRIBUTE))__		}__		return bd__	};apply,the,attributes,of,the,given,bean,element,to,the,given,bean,definition,param,ele,bean,declaration,element,param,bean,name,bean,name,param,containing,bean,containing,bean,definition,return,a,bean,definition,initialized,according,to,the,bean,element,attributes;public,abstract,bean,definition,parse,bean,definition,attributes,element,ele,string,bean,name,nullable,bean,definition,containing,bean,abstract,bean,definition,bd,if,ele,has,attribute,error,old,1,x,singleton,attribute,in,use,upgrade,to,scope,declaration,ele,else,if,ele,has,attribute,bd,set,scope,ele,get,attribute,else,if,containing,bean,null,bd,set,scope,containing,bean,get,scope,if,ele,has,attribute,bd,set,abstract,equals,ele,get,attribute,string,lazy,init,ele,get,attribute,if,is,default,value,lazy,init,lazy,init,this,defaults,get,lazy,init,bd,set,lazy,init,equals,lazy,init,string,autowire,ele,get,attribute,bd,set,autowire,mode,get,autowire,mode,autowire,if,ele,has,attribute,string,depends,on,ele,get,attribute,bd,set,depends,on,string,utils,tokenize,to,string,array,depends,on,string,autowire,candidate,ele,get,attribute,if,is,default,value,autowire,candidate,string,candidate,pattern,this,defaults,get,autowire,candidates,if,candidate,pattern,null,string,patterns,string,utils,comma,delimited,list,to,string,array,candidate,pattern,bd,set,autowire,candidate,pattern,match,utils,simple,match,patterns,bean,name,else,bd,set,autowire,candidate,equals,autowire,candidate,if,ele,has,attribute,bd,set,primary,equals,ele,get,attribute,if,ele,has,attribute,string,init,method,name,ele,get,attribute,bd,set,init,method,name,init,method,name,else,if,this,defaults,get,init,method,null,bd,set,init,method,name,this,defaults,get,init,method,bd,set,enforce,init,method,false,if,ele,has,attribute,string,destroy,method,name,ele,get,attribute,bd,set,destroy,method,name,destroy,method,name,else,if,this,defaults,get,destroy,method,null,bd,set,destroy,method,name,this,defaults,get,destroy,method,bd,set,enforce,destroy,method,false,if,ele,has,attribute,bd,set,factory,method,name,ele,get,attribute,if,ele,has,attribute,bd,set,factory,bean,name,ele,get,attribute,return,bd
BeanDefinitionParserDelegate -> public void parsePropertyElement(Element ele, BeanDefinition bd);1328020251;Parse a property element.;public void parsePropertyElement(Element ele, BeanDefinition bd) {_		String propertyName = ele.getAttribute(NAME_ATTRIBUTE)__		if (!StringUtils.hasLength(propertyName)) {_			error("Tag 'property' must have a 'name' attribute", ele)__			return__		}_		this.parseState.push(new PropertyEntry(propertyName))__		try {_			if (bd.getPropertyValues().contains(propertyName)) {_				error("Multiple 'property' definitions for property '" + propertyName + "'", ele)__				return__			}_			Object val = parsePropertyValue(ele, bd, propertyName)__			PropertyValue pv = new PropertyValue(propertyName, val)__			parseMetaElements(ele, pv)__			pv.setSource(extractSource(ele))__			bd.getPropertyValues().addPropertyValue(pv)__		}_		finally {_			this.parseState.pop()__		}_	};parse,a,property,element;public,void,parse,property,element,element,ele,bean,definition,bd,string,property,name,ele,get,attribute,if,string,utils,has,length,property,name,error,tag,property,must,have,a,name,attribute,ele,return,this,parse,state,push,new,property,entry,property,name,try,if,bd,get,property,values,contains,property,name,error,multiple,property,definitions,for,property,property,name,ele,return,object,val,parse,property,value,ele,bd,property,name,property,value,pv,new,property,value,property,name,val,parse,meta,elements,ele,pv,pv,set,source,extract,source,ele,bd,get,property,values,add,property,value,pv,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parsePropertyElement(Element ele, BeanDefinition bd);1335774711;Parse a property element.;public void parsePropertyElement(Element ele, BeanDefinition bd) {_		String propertyName = ele.getAttribute(NAME_ATTRIBUTE)__		if (!StringUtils.hasLength(propertyName)) {_			error("Tag 'property' must have a 'name' attribute", ele)__			return__		}_		this.parseState.push(new PropertyEntry(propertyName))__		try {_			if (bd.getPropertyValues().contains(propertyName)) {_				error("Multiple 'property' definitions for property '" + propertyName + "'", ele)__				return__			}_			Object val = parsePropertyValue(ele, bd, propertyName)__			PropertyValue pv = new PropertyValue(propertyName, val)__			parseMetaElements(ele, pv)__			pv.setSource(extractSource(ele))__			bd.getPropertyValues().addPropertyValue(pv)__		}_		finally {_			this.parseState.pop()__		}_	};parse,a,property,element;public,void,parse,property,element,element,ele,bean,definition,bd,string,property,name,ele,get,attribute,if,string,utils,has,length,property,name,error,tag,property,must,have,a,name,attribute,ele,return,this,parse,state,push,new,property,entry,property,name,try,if,bd,get,property,values,contains,property,name,error,multiple,property,definitions,for,property,property,name,ele,return,object,val,parse,property,value,ele,bd,property,name,property,value,pv,new,property,value,property,name,val,parse,meta,elements,ele,pv,pv,set,source,extract,source,ele,bd,get,property,values,add,property,value,pv,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parsePropertyElement(Element ele, BeanDefinition bd);1337341719;Parse a property element.;public void parsePropertyElement(Element ele, BeanDefinition bd) {_		String propertyName = ele.getAttribute(NAME_ATTRIBUTE)__		if (!StringUtils.hasLength(propertyName)) {_			error("Tag 'property' must have a 'name' attribute", ele)__			return__		}_		this.parseState.push(new PropertyEntry(propertyName))__		try {_			if (bd.getPropertyValues().contains(propertyName)) {_				error("Multiple 'property' definitions for property '" + propertyName + "'", ele)__				return__			}_			Object val = parsePropertyValue(ele, bd, propertyName)__			PropertyValue pv = new PropertyValue(propertyName, val)__			parseMetaElements(ele, pv)__			pv.setSource(extractSource(ele))__			bd.getPropertyValues().addPropertyValue(pv)__		}_		finally {_			this.parseState.pop()__		}_	};parse,a,property,element;public,void,parse,property,element,element,ele,bean,definition,bd,string,property,name,ele,get,attribute,if,string,utils,has,length,property,name,error,tag,property,must,have,a,name,attribute,ele,return,this,parse,state,push,new,property,entry,property,name,try,if,bd,get,property,values,contains,property,name,error,multiple,property,definitions,for,property,property,name,ele,return,object,val,parse,property,value,ele,bd,property,name,property,value,pv,new,property,value,property,name,val,parse,meta,elements,ele,pv,pv,set,source,extract,source,ele,bd,get,property,values,add,property,value,pv,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parsePropertyElement(Element ele, BeanDefinition bd);1351392612;Parse a property element.;public void parsePropertyElement(Element ele, BeanDefinition bd) {_		String propertyName = ele.getAttribute(NAME_ATTRIBUTE)__		if (!StringUtils.hasLength(propertyName)) {_			error("Tag 'property' must have a 'name' attribute", ele)__			return__		}_		this.parseState.push(new PropertyEntry(propertyName))__		try {_			if (bd.getPropertyValues().contains(propertyName)) {_				error("Multiple 'property' definitions for property '" + propertyName + "'", ele)__				return__			}_			Object val = parsePropertyValue(ele, bd, propertyName)__			PropertyValue pv = new PropertyValue(propertyName, val)__			parseMetaElements(ele, pv)__			pv.setSource(extractSource(ele))__			bd.getPropertyValues().addPropertyValue(pv)__		}_		finally {_			this.parseState.pop()__		}_	};parse,a,property,element;public,void,parse,property,element,element,ele,bean,definition,bd,string,property,name,ele,get,attribute,if,string,utils,has,length,property,name,error,tag,property,must,have,a,name,attribute,ele,return,this,parse,state,push,new,property,entry,property,name,try,if,bd,get,property,values,contains,property,name,error,multiple,property,definitions,for,property,property,name,ele,return,object,val,parse,property,value,ele,bd,property,name,property,value,pv,new,property,value,property,name,val,parse,meta,elements,ele,pv,pv,set,source,extract,source,ele,bd,get,property,values,add,property,value,pv,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parsePropertyElement(Element ele, BeanDefinition bd);1351696936;Parse a property element.;public void parsePropertyElement(Element ele, BeanDefinition bd) {_		String propertyName = ele.getAttribute(NAME_ATTRIBUTE)__		if (!StringUtils.hasLength(propertyName)) {_			error("Tag 'property' must have a 'name' attribute", ele)__			return__		}_		this.parseState.push(new PropertyEntry(propertyName))__		try {_			if (bd.getPropertyValues().contains(propertyName)) {_				error("Multiple 'property' definitions for property '" + propertyName + "'", ele)__				return__			}_			Object val = parsePropertyValue(ele, bd, propertyName)__			PropertyValue pv = new PropertyValue(propertyName, val)__			parseMetaElements(ele, pv)__			pv.setSource(extractSource(ele))__			bd.getPropertyValues().addPropertyValue(pv)__		}_		finally {_			this.parseState.pop()__		}_	};parse,a,property,element;public,void,parse,property,element,element,ele,bean,definition,bd,string,property,name,ele,get,attribute,if,string,utils,has,length,property,name,error,tag,property,must,have,a,name,attribute,ele,return,this,parse,state,push,new,property,entry,property,name,try,if,bd,get,property,values,contains,property,name,error,multiple,property,definitions,for,property,property,name,ele,return,object,val,parse,property,value,ele,bd,property,name,property,value,pv,new,property,value,property,name,val,parse,meta,elements,ele,pv,pv,set,source,extract,source,ele,bd,get,property,values,add,property,value,pv,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parsePropertyElement(Element ele, BeanDefinition bd);1356735495;Parse a property element.;public void parsePropertyElement(Element ele, BeanDefinition bd) {_		String propertyName = ele.getAttribute(NAME_ATTRIBUTE)__		if (!StringUtils.hasLength(propertyName)) {_			error("Tag 'property' must have a 'name' attribute", ele)__			return__		}_		this.parseState.push(new PropertyEntry(propertyName))__		try {_			if (bd.getPropertyValues().contains(propertyName)) {_				error("Multiple 'property' definitions for property '" + propertyName + "'", ele)__				return__			}_			Object val = parsePropertyValue(ele, bd, propertyName)__			PropertyValue pv = new PropertyValue(propertyName, val)__			parseMetaElements(ele, pv)__			pv.setSource(extractSource(ele))__			bd.getPropertyValues().addPropertyValue(pv)__		}_		finally {_			this.parseState.pop()__		}_	};parse,a,property,element;public,void,parse,property,element,element,ele,bean,definition,bd,string,property,name,ele,get,attribute,if,string,utils,has,length,property,name,error,tag,property,must,have,a,name,attribute,ele,return,this,parse,state,push,new,property,entry,property,name,try,if,bd,get,property,values,contains,property,name,error,multiple,property,definitions,for,property,property,name,ele,return,object,val,parse,property,value,ele,bd,property,name,property,value,pv,new,property,value,property,name,val,parse,meta,elements,ele,pv,pv,set,source,extract,source,ele,bd,get,property,values,add,property,value,pv,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parsePropertyElement(Element ele, BeanDefinition bd);1357119417;Parse a property element.;public void parsePropertyElement(Element ele, BeanDefinition bd) {_		String propertyName = ele.getAttribute(NAME_ATTRIBUTE)__		if (!StringUtils.hasLength(propertyName)) {_			error("Tag 'property' must have a 'name' attribute", ele)__			return__		}_		this.parseState.push(new PropertyEntry(propertyName))__		try {_			if (bd.getPropertyValues().contains(propertyName)) {_				error("Multiple 'property' definitions for property '" + propertyName + "'", ele)__				return__			}_			Object val = parsePropertyValue(ele, bd, propertyName)__			PropertyValue pv = new PropertyValue(propertyName, val)__			parseMetaElements(ele, pv)__			pv.setSource(extractSource(ele))__			bd.getPropertyValues().addPropertyValue(pv)__		}_		finally {_			this.parseState.pop()__		}_	};parse,a,property,element;public,void,parse,property,element,element,ele,bean,definition,bd,string,property,name,ele,get,attribute,if,string,utils,has,length,property,name,error,tag,property,must,have,a,name,attribute,ele,return,this,parse,state,push,new,property,entry,property,name,try,if,bd,get,property,values,contains,property,name,error,multiple,property,definitions,for,property,property,name,ele,return,object,val,parse,property,value,ele,bd,property,name,property,value,pv,new,property,value,property,name,val,parse,meta,elements,ele,pv,pv,set,source,extract,source,ele,bd,get,property,values,add,property,value,pv,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parsePropertyElement(Element ele, BeanDefinition bd);1367943112;Parse a property element.;public void parsePropertyElement(Element ele, BeanDefinition bd) {_		String propertyName = ele.getAttribute(NAME_ATTRIBUTE)__		if (!StringUtils.hasLength(propertyName)) {_			error("Tag 'property' must have a 'name' attribute", ele)__			return__		}_		this.parseState.push(new PropertyEntry(propertyName))__		try {_			if (bd.getPropertyValues().contains(propertyName)) {_				error("Multiple 'property' definitions for property '" + propertyName + "'", ele)__				return__			}_			Object val = parsePropertyValue(ele, bd, propertyName)__			PropertyValue pv = new PropertyValue(propertyName, val)__			parseMetaElements(ele, pv)__			pv.setSource(extractSource(ele))__			bd.getPropertyValues().addPropertyValue(pv)__		}_		finally {_			this.parseState.pop()__		}_	};parse,a,property,element;public,void,parse,property,element,element,ele,bean,definition,bd,string,property,name,ele,get,attribute,if,string,utils,has,length,property,name,error,tag,property,must,have,a,name,attribute,ele,return,this,parse,state,push,new,property,entry,property,name,try,if,bd,get,property,values,contains,property,name,error,multiple,property,definitions,for,property,property,name,ele,return,object,val,parse,property,value,ele,bd,property,name,property,value,pv,new,property,value,property,name,val,parse,meta,elements,ele,pv,pv,set,source,extract,source,ele,bd,get,property,values,add,property,value,pv,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parsePropertyElement(Element ele, BeanDefinition bd);1382030648;Parse a property element.;public void parsePropertyElement(Element ele, BeanDefinition bd) {_		String propertyName = ele.getAttribute(NAME_ATTRIBUTE)__		if (!StringUtils.hasLength(propertyName)) {_			error("Tag 'property' must have a 'name' attribute", ele)__			return__		}_		this.parseState.push(new PropertyEntry(propertyName))__		try {_			if (bd.getPropertyValues().contains(propertyName)) {_				error("Multiple 'property' definitions for property '" + propertyName + "'", ele)__				return__			}_			Object val = parsePropertyValue(ele, bd, propertyName)__			PropertyValue pv = new PropertyValue(propertyName, val)__			parseMetaElements(ele, pv)__			pv.setSource(extractSource(ele))__			bd.getPropertyValues().addPropertyValue(pv)__		}_		finally {_			this.parseState.pop()__		}_	};parse,a,property,element;public,void,parse,property,element,element,ele,bean,definition,bd,string,property,name,ele,get,attribute,if,string,utils,has,length,property,name,error,tag,property,must,have,a,name,attribute,ele,return,this,parse,state,push,new,property,entry,property,name,try,if,bd,get,property,values,contains,property,name,error,multiple,property,definitions,for,property,property,name,ele,return,object,val,parse,property,value,ele,bd,property,name,property,value,pv,new,property,value,property,name,val,parse,meta,elements,ele,pv,pv,set,source,extract,source,ele,bd,get,property,values,add,property,value,pv,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parsePropertyElement(Element ele, BeanDefinition bd);1385412762;Parse a property element.;public void parsePropertyElement(Element ele, BeanDefinition bd) {_		String propertyName = ele.getAttribute(NAME_ATTRIBUTE)__		if (!StringUtils.hasLength(propertyName)) {_			error("Tag 'property' must have a 'name' attribute", ele)__			return__		}_		this.parseState.push(new PropertyEntry(propertyName))__		try {_			if (bd.getPropertyValues().contains(propertyName)) {_				error("Multiple 'property' definitions for property '" + propertyName + "'", ele)__				return__			}_			Object val = parsePropertyValue(ele, bd, propertyName)__			PropertyValue pv = new PropertyValue(propertyName, val)__			parseMetaElements(ele, pv)__			pv.setSource(extractSource(ele))__			bd.getPropertyValues().addPropertyValue(pv)__		}_		finally {_			this.parseState.pop()__		}_	};parse,a,property,element;public,void,parse,property,element,element,ele,bean,definition,bd,string,property,name,ele,get,attribute,if,string,utils,has,length,property,name,error,tag,property,must,have,a,name,attribute,ele,return,this,parse,state,push,new,property,entry,property,name,try,if,bd,get,property,values,contains,property,name,error,multiple,property,definitions,for,property,property,name,ele,return,object,val,parse,property,value,ele,bd,property,name,property,value,pv,new,property,value,property,name,val,parse,meta,elements,ele,pv,pv,set,source,extract,source,ele,bd,get,property,values,add,property,value,pv,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parsePropertyElement(Element ele, BeanDefinition bd);1410953197;Parse a property element.;public void parsePropertyElement(Element ele, BeanDefinition bd) {_		String propertyName = ele.getAttribute(NAME_ATTRIBUTE)__		if (!StringUtils.hasLength(propertyName)) {_			error("Tag 'property' must have a 'name' attribute", ele)__			return__		}_		this.parseState.push(new PropertyEntry(propertyName))__		try {_			if (bd.getPropertyValues().contains(propertyName)) {_				error("Multiple 'property' definitions for property '" + propertyName + "'", ele)__				return__			}_			Object val = parsePropertyValue(ele, bd, propertyName)__			PropertyValue pv = new PropertyValue(propertyName, val)__			parseMetaElements(ele, pv)__			pv.setSource(extractSource(ele))__			bd.getPropertyValues().addPropertyValue(pv)__		}_		finally {_			this.parseState.pop()__		}_	};parse,a,property,element;public,void,parse,property,element,element,ele,bean,definition,bd,string,property,name,ele,get,attribute,if,string,utils,has,length,property,name,error,tag,property,must,have,a,name,attribute,ele,return,this,parse,state,push,new,property,entry,property,name,try,if,bd,get,property,values,contains,property,name,error,multiple,property,definitions,for,property,property,name,ele,return,object,val,parse,property,value,ele,bd,property,name,property,value,pv,new,property,value,property,name,val,parse,meta,elements,ele,pv,pv,set,source,extract,source,ele,bd,get,property,values,add,property,value,pv,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parsePropertyElement(Element ele, BeanDefinition bd);1411599760;Parse a property element.;public void parsePropertyElement(Element ele, BeanDefinition bd) {_		String propertyName = ele.getAttribute(NAME_ATTRIBUTE)__		if (!StringUtils.hasLength(propertyName)) {_			error("Tag 'property' must have a 'name' attribute", ele)__			return__		}_		this.parseState.push(new PropertyEntry(propertyName))__		try {_			if (bd.getPropertyValues().contains(propertyName)) {_				error("Multiple 'property' definitions for property '" + propertyName + "'", ele)__				return__			}_			Object val = parsePropertyValue(ele, bd, propertyName)__			PropertyValue pv = new PropertyValue(propertyName, val)__			parseMetaElements(ele, pv)__			pv.setSource(extractSource(ele))__			bd.getPropertyValues().addPropertyValue(pv)__		}_		finally {_			this.parseState.pop()__		}_	};parse,a,property,element;public,void,parse,property,element,element,ele,bean,definition,bd,string,property,name,ele,get,attribute,if,string,utils,has,length,property,name,error,tag,property,must,have,a,name,attribute,ele,return,this,parse,state,push,new,property,entry,property,name,try,if,bd,get,property,values,contains,property,name,error,multiple,property,definitions,for,property,property,name,ele,return,object,val,parse,property,value,ele,bd,property,name,property,value,pv,new,property,value,property,name,val,parse,meta,elements,ele,pv,pv,set,source,extract,source,ele,bd,get,property,values,add,property,value,pv,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parsePropertyElement(Element ele, BeanDefinition bd);1419966315;Parse a property element.;public void parsePropertyElement(Element ele, BeanDefinition bd) {_		String propertyName = ele.getAttribute(NAME_ATTRIBUTE)__		if (!StringUtils.hasLength(propertyName)) {_			error("Tag 'property' must have a 'name' attribute", ele)__			return__		}_		this.parseState.push(new PropertyEntry(propertyName))__		try {_			if (bd.getPropertyValues().contains(propertyName)) {_				error("Multiple 'property' definitions for property '" + propertyName + "'", ele)__				return__			}_			Object val = parsePropertyValue(ele, bd, propertyName)__			PropertyValue pv = new PropertyValue(propertyName, val)__			parseMetaElements(ele, pv)__			pv.setSource(extractSource(ele))__			bd.getPropertyValues().addPropertyValue(pv)__		}_		finally {_			this.parseState.pop()__		}_	};parse,a,property,element;public,void,parse,property,element,element,ele,bean,definition,bd,string,property,name,ele,get,attribute,if,string,utils,has,length,property,name,error,tag,property,must,have,a,name,attribute,ele,return,this,parse,state,push,new,property,entry,property,name,try,if,bd,get,property,values,contains,property,name,error,multiple,property,definitions,for,property,property,name,ele,return,object,val,parse,property,value,ele,bd,property,name,property,value,pv,new,property,value,property,name,val,parse,meta,elements,ele,pv,pv,set,source,extract,source,ele,bd,get,property,values,add,property,value,pv,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parsePropertyElement(Element ele, BeanDefinition bd);1431958785;Parse a property element.;public void parsePropertyElement(Element ele, BeanDefinition bd) {_		String propertyName = ele.getAttribute(NAME_ATTRIBUTE)__		if (!StringUtils.hasLength(propertyName)) {_			error("Tag 'property' must have a 'name' attribute", ele)__			return__		}_		this.parseState.push(new PropertyEntry(propertyName))__		try {_			if (bd.getPropertyValues().contains(propertyName)) {_				error("Multiple 'property' definitions for property '" + propertyName + "'", ele)__				return__			}_			Object val = parsePropertyValue(ele, bd, propertyName)__			PropertyValue pv = new PropertyValue(propertyName, val)__			parseMetaElements(ele, pv)__			pv.setSource(extractSource(ele))__			bd.getPropertyValues().addPropertyValue(pv)__		}_		finally {_			this.parseState.pop()__		}_	};parse,a,property,element;public,void,parse,property,element,element,ele,bean,definition,bd,string,property,name,ele,get,attribute,if,string,utils,has,length,property,name,error,tag,property,must,have,a,name,attribute,ele,return,this,parse,state,push,new,property,entry,property,name,try,if,bd,get,property,values,contains,property,name,error,multiple,property,definitions,for,property,property,name,ele,return,object,val,parse,property,value,ele,bd,property,name,property,value,pv,new,property,value,property,name,val,parse,meta,elements,ele,pv,pv,set,source,extract,source,ele,bd,get,property,values,add,property,value,pv,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parsePropertyElement(Element ele, BeanDefinition bd);1432135182;Parse a property element.;public void parsePropertyElement(Element ele, BeanDefinition bd) {_		String propertyName = ele.getAttribute(NAME_ATTRIBUTE)__		if (!StringUtils.hasLength(propertyName)) {_			error("Tag 'property' must have a 'name' attribute", ele)__			return__		}_		this.parseState.push(new PropertyEntry(propertyName))__		try {_			if (bd.getPropertyValues().contains(propertyName)) {_				error("Multiple 'property' definitions for property '" + propertyName + "'", ele)__				return__			}_			Object val = parsePropertyValue(ele, bd, propertyName)__			PropertyValue pv = new PropertyValue(propertyName, val)__			parseMetaElements(ele, pv)__			pv.setSource(extractSource(ele))__			bd.getPropertyValues().addPropertyValue(pv)__		}_		finally {_			this.parseState.pop()__		}_	};parse,a,property,element;public,void,parse,property,element,element,ele,bean,definition,bd,string,property,name,ele,get,attribute,if,string,utils,has,length,property,name,error,tag,property,must,have,a,name,attribute,ele,return,this,parse,state,push,new,property,entry,property,name,try,if,bd,get,property,values,contains,property,name,error,multiple,property,definitions,for,property,property,name,ele,return,object,val,parse,property,value,ele,bd,property,name,property,value,pv,new,property,value,property,name,val,parse,meta,elements,ele,pv,pv,set,source,extract,source,ele,bd,get,property,values,add,property,value,pv,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parsePropertyElement(Element ele, BeanDefinition bd);1447323728;Parse a property element.;public void parsePropertyElement(Element ele, BeanDefinition bd) {_		String propertyName = ele.getAttribute(NAME_ATTRIBUTE)__		if (!StringUtils.hasLength(propertyName)) {_			error("Tag 'property' must have a 'name' attribute", ele)__			return__		}_		this.parseState.push(new PropertyEntry(propertyName))__		try {_			if (bd.getPropertyValues().contains(propertyName)) {_				error("Multiple 'property' definitions for property '" + propertyName + "'", ele)__				return__			}_			Object val = parsePropertyValue(ele, bd, propertyName)__			PropertyValue pv = new PropertyValue(propertyName, val)__			parseMetaElements(ele, pv)__			pv.setSource(extractSource(ele))__			bd.getPropertyValues().addPropertyValue(pv)__		}_		finally {_			this.parseState.pop()__		}_	};parse,a,property,element;public,void,parse,property,element,element,ele,bean,definition,bd,string,property,name,ele,get,attribute,if,string,utils,has,length,property,name,error,tag,property,must,have,a,name,attribute,ele,return,this,parse,state,push,new,property,entry,property,name,try,if,bd,get,property,values,contains,property,name,error,multiple,property,definitions,for,property,property,name,ele,return,object,val,parse,property,value,ele,bd,property,name,property,value,pv,new,property,value,property,name,val,parse,meta,elements,ele,pv,pv,set,source,extract,source,ele,bd,get,property,values,add,property,value,pv,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parsePropertyElement(Element ele, BeanDefinition bd);1467726769;Parse a property element.;public void parsePropertyElement(Element ele, BeanDefinition bd) {_		String propertyName = ele.getAttribute(NAME_ATTRIBUTE)__		if (!StringUtils.hasLength(propertyName)) {_			error("Tag 'property' must have a 'name' attribute", ele)__			return__		}_		this.parseState.push(new PropertyEntry(propertyName))__		try {_			if (bd.getPropertyValues().contains(propertyName)) {_				error("Multiple 'property' definitions for property '" + propertyName + "'", ele)__				return__			}_			Object val = parsePropertyValue(ele, bd, propertyName)__			PropertyValue pv = new PropertyValue(propertyName, val)__			parseMetaElements(ele, pv)__			pv.setSource(extractSource(ele))__			bd.getPropertyValues().addPropertyValue(pv)__		}_		finally {_			this.parseState.pop()__		}_	};parse,a,property,element;public,void,parse,property,element,element,ele,bean,definition,bd,string,property,name,ele,get,attribute,if,string,utils,has,length,property,name,error,tag,property,must,have,a,name,attribute,ele,return,this,parse,state,push,new,property,entry,property,name,try,if,bd,get,property,values,contains,property,name,error,multiple,property,definitions,for,property,property,name,ele,return,object,val,parse,property,value,ele,bd,property,name,property,value,pv,new,property,value,property,name,val,parse,meta,elements,ele,pv,pv,set,source,extract,source,ele,bd,get,property,values,add,property,value,pv,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parsePropertyElement(Element ele, BeanDefinition bd);1467730834;Parse a property element.;public void parsePropertyElement(Element ele, BeanDefinition bd) {_		String propertyName = ele.getAttribute(NAME_ATTRIBUTE)__		if (!StringUtils.hasLength(propertyName)) {_			error("Tag 'property' must have a 'name' attribute", ele)__			return__		}_		this.parseState.push(new PropertyEntry(propertyName))__		try {_			if (bd.getPropertyValues().contains(propertyName)) {_				error("Multiple 'property' definitions for property '" + propertyName + "'", ele)__				return__			}_			Object val = parsePropertyValue(ele, bd, propertyName)__			PropertyValue pv = new PropertyValue(propertyName, val)__			parseMetaElements(ele, pv)__			pv.setSource(extractSource(ele))__			bd.getPropertyValues().addPropertyValue(pv)__		}_		finally {_			this.parseState.pop()__		}_	};parse,a,property,element;public,void,parse,property,element,element,ele,bean,definition,bd,string,property,name,ele,get,attribute,if,string,utils,has,length,property,name,error,tag,property,must,have,a,name,attribute,ele,return,this,parse,state,push,new,property,entry,property,name,try,if,bd,get,property,values,contains,property,name,error,multiple,property,definitions,for,property,property,name,ele,return,object,val,parse,property,value,ele,bd,property,name,property,value,pv,new,property,value,property,name,val,parse,meta,elements,ele,pv,pv,set,source,extract,source,ele,bd,get,property,values,add,property,value,pv,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parsePropertyElement(Element ele, BeanDefinition bd);1467744603;Parse a property element.;public void parsePropertyElement(Element ele, BeanDefinition bd) {_		String propertyName = ele.getAttribute(NAME_ATTRIBUTE)__		if (!StringUtils.hasLength(propertyName)) {_			error("Tag 'property' must have a 'name' attribute", ele)__			return__		}_		this.parseState.push(new PropertyEntry(propertyName))__		try {_			if (bd.getPropertyValues().contains(propertyName)) {_				error("Multiple 'property' definitions for property '" + propertyName + "'", ele)__				return__			}_			Object val = parsePropertyValue(ele, bd, propertyName)__			PropertyValue pv = new PropertyValue(propertyName, val)__			parseMetaElements(ele, pv)__			pv.setSource(extractSource(ele))__			bd.getPropertyValues().addPropertyValue(pv)__		}_		finally {_			this.parseState.pop()__		}_	};parse,a,property,element;public,void,parse,property,element,element,ele,bean,definition,bd,string,property,name,ele,get,attribute,if,string,utils,has,length,property,name,error,tag,property,must,have,a,name,attribute,ele,return,this,parse,state,push,new,property,entry,property,name,try,if,bd,get,property,values,contains,property,name,error,multiple,property,definitions,for,property,property,name,ele,return,object,val,parse,property,value,ele,bd,property,name,property,value,pv,new,property,value,property,name,val,parse,meta,elements,ele,pv,pv,set,source,extract,source,ele,bd,get,property,values,add,property,value,pv,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parsePropertyElement(Element ele, BeanDefinition bd);1487245676;Parse a property element.;public void parsePropertyElement(Element ele, BeanDefinition bd) {_		String propertyName = ele.getAttribute(NAME_ATTRIBUTE)__		if (!StringUtils.hasLength(propertyName)) {_			error("Tag 'property' must have a 'name' attribute", ele)__			return__		}_		this.parseState.push(new PropertyEntry(propertyName))__		try {_			if (bd.getPropertyValues().contains(propertyName)) {_				error("Multiple 'property' definitions for property '" + propertyName + "'", ele)__				return__			}_			Object val = parsePropertyValue(ele, bd, propertyName)__			PropertyValue pv = new PropertyValue(propertyName, val)__			parseMetaElements(ele, pv)__			pv.setSource(extractSource(ele))__			bd.getPropertyValues().addPropertyValue(pv)__		}_		finally {_			this.parseState.pop()__		}_	};parse,a,property,element;public,void,parse,property,element,element,ele,bean,definition,bd,string,property,name,ele,get,attribute,if,string,utils,has,length,property,name,error,tag,property,must,have,a,name,attribute,ele,return,this,parse,state,push,new,property,entry,property,name,try,if,bd,get,property,values,contains,property,name,error,multiple,property,definitions,for,property,property,name,ele,return,object,val,parse,property,value,ele,bd,property,name,property,value,pv,new,property,value,property,name,val,parse,meta,elements,ele,pv,pv,set,source,extract,source,ele,bd,get,property,values,add,property,value,pv,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parsePropertyElement(Element ele, BeanDefinition bd);1487255851;Parse a property element.;public void parsePropertyElement(Element ele, BeanDefinition bd) {_		String propertyName = ele.getAttribute(NAME_ATTRIBUTE)__		if (!StringUtils.hasLength(propertyName)) {_			error("Tag 'property' must have a 'name' attribute", ele)__			return__		}_		this.parseState.push(new PropertyEntry(propertyName))__		try {_			if (bd.getPropertyValues().contains(propertyName)) {_				error("Multiple 'property' definitions for property '" + propertyName + "'", ele)__				return__			}_			Object val = parsePropertyValue(ele, bd, propertyName)__			PropertyValue pv = new PropertyValue(propertyName, val)__			parseMetaElements(ele, pv)__			pv.setSource(extractSource(ele))__			bd.getPropertyValues().addPropertyValue(pv)__		}_		finally {_			this.parseState.pop()__		}_	};parse,a,property,element;public,void,parse,property,element,element,ele,bean,definition,bd,string,property,name,ele,get,attribute,if,string,utils,has,length,property,name,error,tag,property,must,have,a,name,attribute,ele,return,this,parse,state,push,new,property,entry,property,name,try,if,bd,get,property,values,contains,property,name,error,multiple,property,definitions,for,property,property,name,ele,return,object,val,parse,property,value,ele,bd,property,name,property,value,pv,new,property,value,property,name,val,parse,meta,elements,ele,pv,pv,set,source,extract,source,ele,bd,get,property,values,add,property,value,pv,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parsePropertyElement(Element ele, BeanDefinition bd);1494586217;Parse a property element.;public void parsePropertyElement(Element ele, BeanDefinition bd) {_		String propertyName = ele.getAttribute(NAME_ATTRIBUTE)__		if (!StringUtils.hasLength(propertyName)) {_			error("Tag 'property' must have a 'name' attribute", ele)__			return__		}_		this.parseState.push(new PropertyEntry(propertyName))__		try {_			if (bd.getPropertyValues().contains(propertyName)) {_				error("Multiple 'property' definitions for property '" + propertyName + "'", ele)__				return__			}_			Object val = parsePropertyValue(ele, bd, propertyName)__			PropertyValue pv = new PropertyValue(propertyName, val)__			parseMetaElements(ele, pv)__			pv.setSource(extractSource(ele))__			bd.getPropertyValues().addPropertyValue(pv)__		}_		finally {_			this.parseState.pop()__		}_	};parse,a,property,element;public,void,parse,property,element,element,ele,bean,definition,bd,string,property,name,ele,get,attribute,if,string,utils,has,length,property,name,error,tag,property,must,have,a,name,attribute,ele,return,this,parse,state,push,new,property,entry,property,name,try,if,bd,get,property,values,contains,property,name,error,multiple,property,definitions,for,property,property,name,ele,return,object,val,parse,property,value,ele,bd,property,name,property,value,pv,new,property,value,property,name,val,parse,meta,elements,ele,pv,pv,set,source,extract,source,ele,bd,get,property,values,add,property,value,pv,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parsePropertyElement(Element ele, BeanDefinition bd);1495868221;Parse a property element.;public void parsePropertyElement(Element ele, BeanDefinition bd) {_		String propertyName = ele.getAttribute(NAME_ATTRIBUTE)__		if (!StringUtils.hasLength(propertyName)) {_			error("Tag 'property' must have a 'name' attribute", ele)__			return__		}_		this.parseState.push(new PropertyEntry(propertyName))__		try {_			if (bd.getPropertyValues().contains(propertyName)) {_				error("Multiple 'property' definitions for property '" + propertyName + "'", ele)__				return__			}_			Object val = parsePropertyValue(ele, bd, propertyName)__			PropertyValue pv = new PropertyValue(propertyName, val)__			parseMetaElements(ele, pv)__			pv.setSource(extractSource(ele))__			bd.getPropertyValues().addPropertyValue(pv)__		}_		finally {_			this.parseState.pop()__		}_	};parse,a,property,element;public,void,parse,property,element,element,ele,bean,definition,bd,string,property,name,ele,get,attribute,if,string,utils,has,length,property,name,error,tag,property,must,have,a,name,attribute,ele,return,this,parse,state,push,new,property,entry,property,name,try,if,bd,get,property,values,contains,property,name,error,multiple,property,definitions,for,property,property,name,ele,return,object,val,parse,property,value,ele,bd,property,name,property,value,pv,new,property,value,property,name,val,parse,meta,elements,ele,pv,pv,set,source,extract,source,ele,bd,get,property,values,add,property,value,pv,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parsePropertyElement(Element ele, BeanDefinition bd);1496259743;Parse a property element.;public void parsePropertyElement(Element ele, BeanDefinition bd) {_		String propertyName = ele.getAttribute(NAME_ATTRIBUTE)__		if (!StringUtils.hasLength(propertyName)) {_			error("Tag 'property' must have a 'name' attribute", ele)__			return__		}_		this.parseState.push(new PropertyEntry(propertyName))__		try {_			if (bd.getPropertyValues().contains(propertyName)) {_				error("Multiple 'property' definitions for property '" + propertyName + "'", ele)__				return__			}_			Object val = parsePropertyValue(ele, bd, propertyName)__			PropertyValue pv = new PropertyValue(propertyName, val)__			parseMetaElements(ele, pv)__			pv.setSource(extractSource(ele))__			bd.getPropertyValues().addPropertyValue(pv)__		}_		finally {_			this.parseState.pop()__		}_	};parse,a,property,element;public,void,parse,property,element,element,ele,bean,definition,bd,string,property,name,ele,get,attribute,if,string,utils,has,length,property,name,error,tag,property,must,have,a,name,attribute,ele,return,this,parse,state,push,new,property,entry,property,name,try,if,bd,get,property,values,contains,property,name,error,multiple,property,definitions,for,property,property,name,ele,return,object,val,parse,property,value,ele,bd,property,name,property,value,pv,new,property,value,property,name,val,parse,meta,elements,ele,pv,pv,set,source,extract,source,ele,bd,get,property,values,add,property,value,pv,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parsePropertyElement(Element ele, BeanDefinition bd);1496837955;Parse a property element.;public void parsePropertyElement(Element ele, BeanDefinition bd) {_		String propertyName = ele.getAttribute(NAME_ATTRIBUTE)__		if (!StringUtils.hasLength(propertyName)) {_			error("Tag 'property' must have a 'name' attribute", ele)__			return__		}_		this.parseState.push(new PropertyEntry(propertyName))__		try {_			if (bd.getPropertyValues().contains(propertyName)) {_				error("Multiple 'property' definitions for property '" + propertyName + "'", ele)__				return__			}_			Object val = parsePropertyValue(ele, bd, propertyName)__			PropertyValue pv = new PropertyValue(propertyName, val)__			parseMetaElements(ele, pv)__			pv.setSource(extractSource(ele))__			bd.getPropertyValues().addPropertyValue(pv)__		}_		finally {_			this.parseState.pop()__		}_	};parse,a,property,element;public,void,parse,property,element,element,ele,bean,definition,bd,string,property,name,ele,get,attribute,if,string,utils,has,length,property,name,error,tag,property,must,have,a,name,attribute,ele,return,this,parse,state,push,new,property,entry,property,name,try,if,bd,get,property,values,contains,property,name,error,multiple,property,definitions,for,property,property,name,ele,return,object,val,parse,property,value,ele,bd,property,name,property,value,pv,new,property,value,property,name,val,parse,meta,elements,ele,pv,pv,set,source,extract,source,ele,bd,get,property,values,add,property,value,pv,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parsePropertyElement(Element ele, BeanDefinition bd);1503008029;Parse a property element.;public void parsePropertyElement(Element ele, BeanDefinition bd) {_		String propertyName = ele.getAttribute(NAME_ATTRIBUTE)__		if (!StringUtils.hasLength(propertyName)) {_			error("Tag 'property' must have a 'name' attribute", ele)__			return__		}_		this.parseState.push(new PropertyEntry(propertyName))__		try {_			if (bd.getPropertyValues().contains(propertyName)) {_				error("Multiple 'property' definitions for property '" + propertyName + "'", ele)__				return__			}_			Object val = parsePropertyValue(ele, bd, propertyName)__			PropertyValue pv = new PropertyValue(propertyName, val)__			parseMetaElements(ele, pv)__			pv.setSource(extractSource(ele))__			bd.getPropertyValues().addPropertyValue(pv)__		}_		finally {_			this.parseState.pop()__		}_	};parse,a,property,element;public,void,parse,property,element,element,ele,bean,definition,bd,string,property,name,ele,get,attribute,if,string,utils,has,length,property,name,error,tag,property,must,have,a,name,attribute,ele,return,this,parse,state,push,new,property,entry,property,name,try,if,bd,get,property,values,contains,property,name,error,multiple,property,definitions,for,property,property,name,ele,return,object,val,parse,property,value,ele,bd,property,name,property,value,pv,new,property,value,property,name,val,parse,meta,elements,ele,pv,pv,set,source,extract,source,ele,bd,get,property,values,add,property,value,pv,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parsePropertyElement(Element ele, BeanDefinition bd);1519513303;Parse a property element.;public void parsePropertyElement(Element ele, BeanDefinition bd) {_		String propertyName = ele.getAttribute(NAME_ATTRIBUTE)__		if (!StringUtils.hasLength(propertyName)) {_			error("Tag 'property' must have a 'name' attribute", ele)__			return__		}_		this.parseState.push(new PropertyEntry(propertyName))__		try {_			if (bd.getPropertyValues().contains(propertyName)) {_				error("Multiple 'property' definitions for property '" + propertyName + "'", ele)__				return__			}_			Object val = parsePropertyValue(ele, bd, propertyName)__			PropertyValue pv = new PropertyValue(propertyName, val)__			parseMetaElements(ele, pv)__			pv.setSource(extractSource(ele))__			bd.getPropertyValues().addPropertyValue(pv)__		}_		finally {_			this.parseState.pop()__		}_	};parse,a,property,element;public,void,parse,property,element,element,ele,bean,definition,bd,string,property,name,ele,get,attribute,if,string,utils,has,length,property,name,error,tag,property,must,have,a,name,attribute,ele,return,this,parse,state,push,new,property,entry,property,name,try,if,bd,get,property,values,contains,property,name,error,multiple,property,definitions,for,property,property,name,ele,return,object,val,parse,property,value,ele,bd,property,name,property,value,pv,new,property,value,property,name,val,parse,meta,elements,ele,pv,pv,set,source,extract,source,ele,bd,get,property,values,add,property,value,pv,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parsePropertyElement(Element ele, BeanDefinition bd);1530174524;Parse a property element.;public void parsePropertyElement(Element ele, BeanDefinition bd) {_		String propertyName = ele.getAttribute(NAME_ATTRIBUTE)__		if (!StringUtils.hasLength(propertyName)) {_			error("Tag 'property' must have a 'name' attribute", ele)__			return__		}_		this.parseState.push(new PropertyEntry(propertyName))__		try {_			if (bd.getPropertyValues().contains(propertyName)) {_				error("Multiple 'property' definitions for property '" + propertyName + "'", ele)__				return__			}_			Object val = parsePropertyValue(ele, bd, propertyName)__			PropertyValue pv = new PropertyValue(propertyName, val)__			parseMetaElements(ele, pv)__			pv.setSource(extractSource(ele))__			bd.getPropertyValues().addPropertyValue(pv)__		}_		finally {_			this.parseState.pop()__		}_	};parse,a,property,element;public,void,parse,property,element,element,ele,bean,definition,bd,string,property,name,ele,get,attribute,if,string,utils,has,length,property,name,error,tag,property,must,have,a,name,attribute,ele,return,this,parse,state,push,new,property,entry,property,name,try,if,bd,get,property,values,contains,property,name,error,multiple,property,definitions,for,property,property,name,ele,return,object,val,parse,property,value,ele,bd,property,name,property,value,pv,new,property,value,property,name,val,parse,meta,elements,ele,pv,pv,set,source,extract,source,ele,bd,get,property,values,add,property,value,pv,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parsePropertyElement(Element ele, BeanDefinition bd);1530190293;Parse a property element.;public void parsePropertyElement(Element ele, BeanDefinition bd) {_		String propertyName = ele.getAttribute(NAME_ATTRIBUTE)__		if (!StringUtils.hasLength(propertyName)) {_			error("Tag 'property' must have a 'name' attribute", ele)__			return__		}_		this.parseState.push(new PropertyEntry(propertyName))__		try {_			if (bd.getPropertyValues().contains(propertyName)) {_				error("Multiple 'property' definitions for property '" + propertyName + "'", ele)__				return__			}_			Object val = parsePropertyValue(ele, bd, propertyName)__			PropertyValue pv = new PropertyValue(propertyName, val)__			parseMetaElements(ele, pv)__			pv.setSource(extractSource(ele))__			bd.getPropertyValues().addPropertyValue(pv)__		}_		finally {_			this.parseState.pop()__		}_	};parse,a,property,element;public,void,parse,property,element,element,ele,bean,definition,bd,string,property,name,ele,get,attribute,if,string,utils,has,length,property,name,error,tag,property,must,have,a,name,attribute,ele,return,this,parse,state,push,new,property,entry,property,name,try,if,bd,get,property,values,contains,property,name,error,multiple,property,definitions,for,property,property,name,ele,return,object,val,parse,property,value,ele,bd,property,name,property,value,pv,new,property,value,property,name,val,parse,meta,elements,ele,pv,pv,set,source,extract,source,ele,bd,get,property,values,add,property,value,pv,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parsePropertyElement(Element ele, BeanDefinition bd);1532706365;Parse a property element.;public void parsePropertyElement(Element ele, BeanDefinition bd) {_		String propertyName = ele.getAttribute(NAME_ATTRIBUTE)__		if (!StringUtils.hasLength(propertyName)) {_			error("Tag 'property' must have a 'name' attribute", ele)__			return__		}_		this.parseState.push(new PropertyEntry(propertyName))__		try {_			if (bd.getPropertyValues().contains(propertyName)) {_				error("Multiple 'property' definitions for property '" + propertyName + "'", ele)__				return__			}_			Object val = parsePropertyValue(ele, bd, propertyName)__			PropertyValue pv = new PropertyValue(propertyName, val)__			parseMetaElements(ele, pv)__			pv.setSource(extractSource(ele))__			bd.getPropertyValues().addPropertyValue(pv)__		}_		finally {_			this.parseState.pop()__		}_	};parse,a,property,element;public,void,parse,property,element,element,ele,bean,definition,bd,string,property,name,ele,get,attribute,if,string,utils,has,length,property,name,error,tag,property,must,have,a,name,attribute,ele,return,this,parse,state,push,new,property,entry,property,name,try,if,bd,get,property,values,contains,property,name,error,multiple,property,definitions,for,property,property,name,ele,return,object,val,parse,property,value,ele,bd,property,name,property,value,pv,new,property,value,property,name,val,parse,meta,elements,ele,pv,pv,set,source,extract,source,ele,bd,get,property,values,add,property,value,pv,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public void parsePropertyElement(Element ele, BeanDefinition bd);1546958161;Parse a property element.;public void parsePropertyElement(Element ele, BeanDefinition bd) {_		String propertyName = ele.getAttribute(NAME_ATTRIBUTE)__		if (!StringUtils.hasLength(propertyName)) {_			error("Tag 'property' must have a 'name' attribute", ele)__			return__		}_		this.parseState.push(new PropertyEntry(propertyName))__		try {_			if (bd.getPropertyValues().contains(propertyName)) {_				error("Multiple 'property' definitions for property '" + propertyName + "'", ele)__				return__			}_			Object val = parsePropertyValue(ele, bd, propertyName)__			PropertyValue pv = new PropertyValue(propertyName, val)__			parseMetaElements(ele, pv)__			pv.setSource(extractSource(ele))__			bd.getPropertyValues().addPropertyValue(pv)__		}_		finally {_			this.parseState.pop()__		}_	};parse,a,property,element;public,void,parse,property,element,element,ele,bean,definition,bd,string,property,name,ele,get,attribute,if,string,utils,has,length,property,name,error,tag,property,must,have,a,name,attribute,ele,return,this,parse,state,push,new,property,entry,property,name,try,if,bd,get,property,values,contains,property,name,error,multiple,property,definitions,for,property,property,name,ele,return,object,val,parse,property,value,ele,bd,property,name,property,value,pv,new,property,value,property,name,val,parse,meta,elements,ele,pv,pv,set,source,extract,source,ele,bd,get,property,values,add,property,value,pv,finally,this,parse,state,pop
BeanDefinitionParserDelegate -> public String getLocalName(Node node);1328020251;Ges the local name for the supplied {@link Node}. The default implementation calls {@link Node#getLocalName}._Subclasses may override the default implementation to provide a different mechanism for getting the local name._@param node the <code>Node</code>;public String getLocalName(Node node) {_		return node.getLocalName()__	};ges,the,local,name,for,the,supplied,link,node,the,default,implementation,calls,link,node,get,local,name,subclasses,may,override,the,default,implementation,to,provide,a,different,mechanism,for,getting,the,local,name,param,node,the,code,node,code;public,string,get,local,name,node,node,return,node,get,local,name
BeanDefinitionParserDelegate -> public String getLocalName(Node node);1335774711;Ges the local name for the supplied {@link Node}. The default implementation calls {@link Node#getLocalName}._Subclasses may override the default implementation to provide a different mechanism for getting the local name._@param node the <code>Node</code>;public String getLocalName(Node node) {_		return node.getLocalName()__	};ges,the,local,name,for,the,supplied,link,node,the,default,implementation,calls,link,node,get,local,name,subclasses,may,override,the,default,implementation,to,provide,a,different,mechanism,for,getting,the,local,name,param,node,the,code,node,code;public,string,get,local,name,node,node,return,node,get,local,name
BeanDefinitionParserDelegate -> public String getLocalName(Node node);1337341719;Ges the local name for the supplied {@link Node}. The default implementation calls {@link Node#getLocalName}._Subclasses may override the default implementation to provide a different mechanism for getting the local name._@param node the <code>Node</code>;public String getLocalName(Node node) {_		return node.getLocalName()__	};ges,the,local,name,for,the,supplied,link,node,the,default,implementation,calls,link,node,get,local,name,subclasses,may,override,the,default,implementation,to,provide,a,different,mechanism,for,getting,the,local,name,param,node,the,code,node,code;public,string,get,local,name,node,node,return,node,get,local,name
BeanDefinitionParserDelegate -> public String getLocalName(Node node);1351392612;Ges the local name for the supplied {@link Node}. The default implementation calls {@link Node#getLocalName}._Subclasses may override the default implementation to provide a different mechanism for getting the local name._@param node the <code>Node</code>;public String getLocalName(Node node) {_		return node.getLocalName()__	};ges,the,local,name,for,the,supplied,link,node,the,default,implementation,calls,link,node,get,local,name,subclasses,may,override,the,default,implementation,to,provide,a,different,mechanism,for,getting,the,local,name,param,node,the,code,node,code;public,string,get,local,name,node,node,return,node,get,local,name
BeanDefinitionParserDelegate -> public String getLocalName(Node node);1351696936;Ges the local name for the supplied {@link Node}. The default implementation calls {@link Node#getLocalName}._Subclasses may override the default implementation to provide a different mechanism for getting the local name._@param node the <code>Node</code>;public String getLocalName(Node node) {_		return node.getLocalName()__	};ges,the,local,name,for,the,supplied,link,node,the,default,implementation,calls,link,node,get,local,name,subclasses,may,override,the,default,implementation,to,provide,a,different,mechanism,for,getting,the,local,name,param,node,the,code,node,code;public,string,get,local,name,node,node,return,node,get,local,name
BeanDefinitionParserDelegate -> public String getLocalName(Node node);1356735495;Ges the local name for the supplied {@link Node}. The default implementation calls {@link Node#getLocalName}._Subclasses may override the default implementation to provide a different mechanism for getting the local name._@param node the {@code Node};public String getLocalName(Node node) {_		return node.getLocalName()__	};ges,the,local,name,for,the,supplied,link,node,the,default,implementation,calls,link,node,get,local,name,subclasses,may,override,the,default,implementation,to,provide,a,different,mechanism,for,getting,the,local,name,param,node,the,code,node;public,string,get,local,name,node,node,return,node,get,local,name
BeanDefinitionParserDelegate -> public String getLocalName(Node node);1357119417;Ges the local name for the supplied {@link Node}. The default implementation calls {@link Node#getLocalName}._Subclasses may override the default implementation to provide a different mechanism for getting the local name._@param node the {@code Node};public String getLocalName(Node node) {_		return node.getLocalName()__	};ges,the,local,name,for,the,supplied,link,node,the,default,implementation,calls,link,node,get,local,name,subclasses,may,override,the,default,implementation,to,provide,a,different,mechanism,for,getting,the,local,name,param,node,the,code,node;public,string,get,local,name,node,node,return,node,get,local,name
BeanDefinitionParserDelegate -> public String getLocalName(Node node);1367943112;Ges the local name for the supplied {@link Node}. The default implementation calls {@link Node#getLocalName}._Subclasses may override the default implementation to provide a different mechanism for getting the local name._@param node the {@code Node};public String getLocalName(Node node) {_		return node.getLocalName()__	};ges,the,local,name,for,the,supplied,link,node,the,default,implementation,calls,link,node,get,local,name,subclasses,may,override,the,default,implementation,to,provide,a,different,mechanism,for,getting,the,local,name,param,node,the,code,node;public,string,get,local,name,node,node,return,node,get,local,name
BeanDefinitionParserDelegate -> public String getLocalName(Node node);1382030648;Ges the local name for the supplied {@link Node}. The default implementation calls {@link Node#getLocalName}._Subclasses may override the default implementation to provide a different mechanism for getting the local name._@param node the {@code Node};public String getLocalName(Node node) {_		return node.getLocalName()__	};ges,the,local,name,for,the,supplied,link,node,the,default,implementation,calls,link,node,get,local,name,subclasses,may,override,the,default,implementation,to,provide,a,different,mechanism,for,getting,the,local,name,param,node,the,code,node;public,string,get,local,name,node,node,return,node,get,local,name
BeanDefinitionParserDelegate -> public String getLocalName(Node node);1385412762;Ges the local name for the supplied {@link Node}. The default implementation calls {@link Node#getLocalName}._Subclasses may override the default implementation to provide a different mechanism for getting the local name._@param node the {@code Node};public String getLocalName(Node node) {_		return node.getLocalName()__	};ges,the,local,name,for,the,supplied,link,node,the,default,implementation,calls,link,node,get,local,name,subclasses,may,override,the,default,implementation,to,provide,a,different,mechanism,for,getting,the,local,name,param,node,the,code,node;public,string,get,local,name,node,node,return,node,get,local,name
BeanDefinitionParserDelegate -> public String getLocalName(Node node);1410953197;Ges the local name for the supplied {@link Node}. The default implementation calls {@link Node#getLocalName}._Subclasses may override the default implementation to provide a different mechanism for getting the local name._@param node the {@code Node};public String getLocalName(Node node) {_		return node.getLocalName()__	};ges,the,local,name,for,the,supplied,link,node,the,default,implementation,calls,link,node,get,local,name,subclasses,may,override,the,default,implementation,to,provide,a,different,mechanism,for,getting,the,local,name,param,node,the,code,node;public,string,get,local,name,node,node,return,node,get,local,name
BeanDefinitionParserDelegate -> public String getLocalName(Node node);1411599760;Ges the local name for the supplied {@link Node}. The default implementation calls {@link Node#getLocalName}._Subclasses may override the default implementation to provide a different mechanism for getting the local name._@param node the {@code Node};public String getLocalName(Node node) {_		return node.getLocalName()__	};ges,the,local,name,for,the,supplied,link,node,the,default,implementation,calls,link,node,get,local,name,subclasses,may,override,the,default,implementation,to,provide,a,different,mechanism,for,getting,the,local,name,param,node,the,code,node;public,string,get,local,name,node,node,return,node,get,local,name
BeanDefinitionParserDelegate -> public String getLocalName(Node node);1419966315;Ges the local name for the supplied {@link Node}. The default implementation calls {@link Node#getLocalName}._Subclasses may override the default implementation to provide a different mechanism for getting the local name._@param node the {@code Node};public String getLocalName(Node node) {_		return node.getLocalName()__	};ges,the,local,name,for,the,supplied,link,node,the,default,implementation,calls,link,node,get,local,name,subclasses,may,override,the,default,implementation,to,provide,a,different,mechanism,for,getting,the,local,name,param,node,the,code,node;public,string,get,local,name,node,node,return,node,get,local,name
BeanDefinitionParserDelegate -> public String getLocalName(Node node);1431958785;Ges the local name for the supplied {@link Node}. The default implementation calls {@link Node#getLocalName}._Subclasses may override the default implementation to provide a different mechanism for getting the local name._@param node the {@code Node};public String getLocalName(Node node) {_		return node.getLocalName()__	};ges,the,local,name,for,the,supplied,link,node,the,default,implementation,calls,link,node,get,local,name,subclasses,may,override,the,default,implementation,to,provide,a,different,mechanism,for,getting,the,local,name,param,node,the,code,node;public,string,get,local,name,node,node,return,node,get,local,name
BeanDefinitionParserDelegate -> public String getLocalName(Node node);1432135182;Ges the local name for the supplied {@link Node}. The default implementation calls {@link Node#getLocalName}._Subclasses may override the default implementation to provide a different mechanism for getting the local name._@param node the {@code Node};public String getLocalName(Node node) {_		return node.getLocalName()__	};ges,the,local,name,for,the,supplied,link,node,the,default,implementation,calls,link,node,get,local,name,subclasses,may,override,the,default,implementation,to,provide,a,different,mechanism,for,getting,the,local,name,param,node,the,code,node;public,string,get,local,name,node,node,return,node,get,local,name
BeanDefinitionParserDelegate -> public String getLocalName(Node node);1447323728;Ges the local name for the supplied {@link Node}. The default implementation calls {@link Node#getLocalName}._Subclasses may override the default implementation to provide a different mechanism for getting the local name._@param node the {@code Node};public String getLocalName(Node node) {_		return node.getLocalName()__	};ges,the,local,name,for,the,supplied,link,node,the,default,implementation,calls,link,node,get,local,name,subclasses,may,override,the,default,implementation,to,provide,a,different,mechanism,for,getting,the,local,name,param,node,the,code,node;public,string,get,local,name,node,node,return,node,get,local,name
BeanDefinitionParserDelegate -> public String getLocalName(Node node);1467726769;Ges the local name for the supplied {@link Node}. The default implementation calls {@link Node#getLocalName}._Subclasses may override the default implementation to provide a different mechanism for getting the local name._@param node the {@code Node};public String getLocalName(Node node) {_		return node.getLocalName()__	};ges,the,local,name,for,the,supplied,link,node,the,default,implementation,calls,link,node,get,local,name,subclasses,may,override,the,default,implementation,to,provide,a,different,mechanism,for,getting,the,local,name,param,node,the,code,node;public,string,get,local,name,node,node,return,node,get,local,name
BeanDefinitionParserDelegate -> public String getLocalName(Node node);1467730834;Ges the local name for the supplied {@link Node}. The default implementation calls {@link Node#getLocalName}._Subclasses may override the default implementation to provide a different mechanism for getting the local name._@param node the {@code Node};public String getLocalName(Node node) {_		return node.getLocalName()__	};ges,the,local,name,for,the,supplied,link,node,the,default,implementation,calls,link,node,get,local,name,subclasses,may,override,the,default,implementation,to,provide,a,different,mechanism,for,getting,the,local,name,param,node,the,code,node;public,string,get,local,name,node,node,return,node,get,local,name
BeanDefinitionParserDelegate -> public String getLocalName(Node node);1467744603;Ges the local name for the supplied {@link Node}._<p>The default implementation calls {@link Node#getLocalName}._Subclasses may override the default implementation to provide a_different mechanism for getting the local name._@param node the {@code Node};public String getLocalName(Node node) {_		return node.getLocalName()__	};ges,the,local,name,for,the,supplied,link,node,p,the,default,implementation,calls,link,node,get,local,name,subclasses,may,override,the,default,implementation,to,provide,a,different,mechanism,for,getting,the,local,name,param,node,the,code,node;public,string,get,local,name,node,node,return,node,get,local,name
BeanDefinitionParserDelegate -> public String getLocalName(Node node);1487245676;Get the local name for the supplied {@link Node}._<p>The default implementation calls {@link Node#getLocalName}._Subclasses may override the default implementation to provide a_different mechanism for getting the local name._@param node the {@code Node};public String getLocalName(Node node) {_		return node.getLocalName()__	};get,the,local,name,for,the,supplied,link,node,p,the,default,implementation,calls,link,node,get,local,name,subclasses,may,override,the,default,implementation,to,provide,a,different,mechanism,for,getting,the,local,name,param,node,the,code,node;public,string,get,local,name,node,node,return,node,get,local,name
BeanDefinitionParserDelegate -> public String getLocalName(Node node);1487255851;Get the local name for the supplied {@link Node}._<p>The default implementation calls {@link Node#getLocalName}._Subclasses may override the default implementation to provide a_different mechanism for getting the local name._@param node the {@code Node};public String getLocalName(Node node) {_		return node.getLocalName()__	};get,the,local,name,for,the,supplied,link,node,p,the,default,implementation,calls,link,node,get,local,name,subclasses,may,override,the,default,implementation,to,provide,a,different,mechanism,for,getting,the,local,name,param,node,the,code,node;public,string,get,local,name,node,node,return,node,get,local,name
BeanDefinitionParserDelegate -> public String getLocalName(Node node);1494586217;Get the local name for the supplied {@link Node}._<p>The default implementation calls {@link Node#getLocalName}._Subclasses may override the default implementation to provide a_different mechanism for getting the local name._@param node the {@code Node};public String getLocalName(Node node) {_		return node.getLocalName()__	};get,the,local,name,for,the,supplied,link,node,p,the,default,implementation,calls,link,node,get,local,name,subclasses,may,override,the,default,implementation,to,provide,a,different,mechanism,for,getting,the,local,name,param,node,the,code,node;public,string,get,local,name,node,node,return,node,get,local,name
BeanDefinitionParserDelegate -> public String getLocalName(Node node);1495868221;Get the local name for the supplied {@link Node}._<p>The default implementation calls {@link Node#getLocalName}._Subclasses may override the default implementation to provide a_different mechanism for getting the local name._@param node the {@code Node};public String getLocalName(Node node) {_		return node.getLocalName()__	};get,the,local,name,for,the,supplied,link,node,p,the,default,implementation,calls,link,node,get,local,name,subclasses,may,override,the,default,implementation,to,provide,a,different,mechanism,for,getting,the,local,name,param,node,the,code,node;public,string,get,local,name,node,node,return,node,get,local,name
BeanDefinitionParserDelegate -> public String getLocalName(Node node);1496259743;Get the local name for the supplied {@link Node}._<p>The default implementation calls {@link Node#getLocalName}._Subclasses may override the default implementation to provide a_different mechanism for getting the local name._@param node the {@code Node};public String getLocalName(Node node) {_		return node.getLocalName()__	};get,the,local,name,for,the,supplied,link,node,p,the,default,implementation,calls,link,node,get,local,name,subclasses,may,override,the,default,implementation,to,provide,a,different,mechanism,for,getting,the,local,name,param,node,the,code,node;public,string,get,local,name,node,node,return,node,get,local,name
BeanDefinitionParserDelegate -> public String getLocalName(Node node);1496837955;Get the local name for the supplied {@link Node}._<p>The default implementation calls {@link Node#getLocalName}._Subclasses may override the default implementation to provide a_different mechanism for getting the local name._@param node the {@code Node};public String getLocalName(Node node) {_		return node.getLocalName()__	};get,the,local,name,for,the,supplied,link,node,p,the,default,implementation,calls,link,node,get,local,name,subclasses,may,override,the,default,implementation,to,provide,a,different,mechanism,for,getting,the,local,name,param,node,the,code,node;public,string,get,local,name,node,node,return,node,get,local,name
BeanDefinitionParserDelegate -> public String getLocalName(Node node);1503008029;Get the local name for the supplied {@link Node}._<p>The default implementation calls {@link Node#getLocalName}._Subclasses may override the default implementation to provide a_different mechanism for getting the local name._@param node the {@code Node};public String getLocalName(Node node) {_		return node.getLocalName()__	};get,the,local,name,for,the,supplied,link,node,p,the,default,implementation,calls,link,node,get,local,name,subclasses,may,override,the,default,implementation,to,provide,a,different,mechanism,for,getting,the,local,name,param,node,the,code,node;public,string,get,local,name,node,node,return,node,get,local,name
BeanDefinitionParserDelegate -> public String getLocalName(Node node);1519513303;Get the local name for the supplied {@link Node}._<p>The default implementation calls {@link Node#getLocalName}._Subclasses may override the default implementation to provide a_different mechanism for getting the local name._@param node the {@code Node};public String getLocalName(Node node) {_		return node.getLocalName()__	};get,the,local,name,for,the,supplied,link,node,p,the,default,implementation,calls,link,node,get,local,name,subclasses,may,override,the,default,implementation,to,provide,a,different,mechanism,for,getting,the,local,name,param,node,the,code,node;public,string,get,local,name,node,node,return,node,get,local,name
BeanDefinitionParserDelegate -> public String getLocalName(Node node);1530174524;Get the local name for the supplied {@link Node}._<p>The default implementation calls {@link Node#getLocalName}._Subclasses may override the default implementation to provide a_different mechanism for getting the local name._@param node the {@code Node};public String getLocalName(Node node) {_		return node.getLocalName()__	};get,the,local,name,for,the,supplied,link,node,p,the,default,implementation,calls,link,node,get,local,name,subclasses,may,override,the,default,implementation,to,provide,a,different,mechanism,for,getting,the,local,name,param,node,the,code,node;public,string,get,local,name,node,node,return,node,get,local,name
BeanDefinitionParserDelegate -> public String getLocalName(Node node);1530190293;Get the local name for the supplied {@link Node}._<p>The default implementation calls {@link Node#getLocalName}._Subclasses may override the default implementation to provide a_different mechanism for getting the local name._@param node the {@code Node};public String getLocalName(Node node) {_		return node.getLocalName()__	};get,the,local,name,for,the,supplied,link,node,p,the,default,implementation,calls,link,node,get,local,name,subclasses,may,override,the,default,implementation,to,provide,a,different,mechanism,for,getting,the,local,name,param,node,the,code,node;public,string,get,local,name,node,node,return,node,get,local,name
BeanDefinitionParserDelegate -> public String getLocalName(Node node);1532706365;Get the local name for the supplied {@link Node}._<p>The default implementation calls {@link Node#getLocalName}._Subclasses may override the default implementation to provide a_different mechanism for getting the local name._@param node the {@code Node};public String getLocalName(Node node) {_		return node.getLocalName()__	};get,the,local,name,for,the,supplied,link,node,p,the,default,implementation,calls,link,node,get,local,name,subclasses,may,override,the,default,implementation,to,provide,a,different,mechanism,for,getting,the,local,name,param,node,the,code,node;public,string,get,local,name,node,node,return,node,get,local,name
BeanDefinitionParserDelegate -> public String getLocalName(Node node);1546958161;Get the local name for the supplied {@link Node}._<p>The default implementation calls {@link Node#getLocalName}._Subclasses may override the default implementation to provide a_different mechanism for getting the local name._@param node the {@code Node};public String getLocalName(Node node) {_		return node.getLocalName()__	};get,the,local,name,for,the,supplied,link,node,p,the,default,implementation,calls,link,node,get,local,name,subclasses,may,override,the,default,implementation,to,provide,a,different,mechanism,for,getting,the,local,name,param,node,the,code,node;public,string,get,local,name,node,node,return,node,get,local,name
BeanDefinitionParserDelegate -> public List<Object> parseListElement(Element collectionEle, @Nullable BeanDefinition bd);1496837955;Parse a list element.;public List<Object> parseListElement(Element collectionEle, @Nullable BeanDefinition bd) {_		String defaultElementType = collectionEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = collectionEle.getChildNodes()__		ManagedList<Object> target = new ManagedList<>(nl.getLength())__		target.setSource(extractSource(collectionEle))__		target.setElementTypeName(defaultElementType)__		target.setMergeEnabled(parseMergeAttribute(collectionEle))__		parseCollectionElements(nl, target, bd, defaultElementType)__		return target__	};parse,a,list,element;public,list,object,parse,list,element,element,collection,ele,nullable,bean,definition,bd,string,default,element,type,collection,ele,get,attribute,node,list,nl,collection,ele,get,child,nodes,managed,list,object,target,new,managed,list,nl,get,length,target,set,source,extract,source,collection,ele,target,set,element,type,name,default,element,type,target,set,merge,enabled,parse,merge,attribute,collection,ele,parse,collection,elements,nl,target,bd,default,element,type,return,target
BeanDefinitionParserDelegate -> public List<Object> parseListElement(Element collectionEle, @Nullable BeanDefinition bd);1503008029;Parse a list element.;public List<Object> parseListElement(Element collectionEle, @Nullable BeanDefinition bd) {_		String defaultElementType = collectionEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = collectionEle.getChildNodes()__		ManagedList<Object> target = new ManagedList<>(nl.getLength())__		target.setSource(extractSource(collectionEle))__		target.setElementTypeName(defaultElementType)__		target.setMergeEnabled(parseMergeAttribute(collectionEle))__		parseCollectionElements(nl, target, bd, defaultElementType)__		return target__	};parse,a,list,element;public,list,object,parse,list,element,element,collection,ele,nullable,bean,definition,bd,string,default,element,type,collection,ele,get,attribute,node,list,nl,collection,ele,get,child,nodes,managed,list,object,target,new,managed,list,nl,get,length,target,set,source,extract,source,collection,ele,target,set,element,type,name,default,element,type,target,set,merge,enabled,parse,merge,attribute,collection,ele,parse,collection,elements,nl,target,bd,default,element,type,return,target
BeanDefinitionParserDelegate -> public List<Object> parseListElement(Element collectionEle, @Nullable BeanDefinition bd);1519513303;Parse a list element.;public List<Object> parseListElement(Element collectionEle, @Nullable BeanDefinition bd) {_		String defaultElementType = collectionEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = collectionEle.getChildNodes()__		ManagedList<Object> target = new ManagedList<>(nl.getLength())__		target.setSource(extractSource(collectionEle))__		target.setElementTypeName(defaultElementType)__		target.setMergeEnabled(parseMergeAttribute(collectionEle))__		parseCollectionElements(nl, target, bd, defaultElementType)__		return target__	};parse,a,list,element;public,list,object,parse,list,element,element,collection,ele,nullable,bean,definition,bd,string,default,element,type,collection,ele,get,attribute,node,list,nl,collection,ele,get,child,nodes,managed,list,object,target,new,managed,list,nl,get,length,target,set,source,extract,source,collection,ele,target,set,element,type,name,default,element,type,target,set,merge,enabled,parse,merge,attribute,collection,ele,parse,collection,elements,nl,target,bd,default,element,type,return,target
BeanDefinitionParserDelegate -> public List<Object> parseListElement(Element collectionEle, @Nullable BeanDefinition bd);1530174524;Parse a list element.;public List<Object> parseListElement(Element collectionEle, @Nullable BeanDefinition bd) {_		String defaultElementType = collectionEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = collectionEle.getChildNodes()__		ManagedList<Object> target = new ManagedList<>(nl.getLength())__		target.setSource(extractSource(collectionEle))__		target.setElementTypeName(defaultElementType)__		target.setMergeEnabled(parseMergeAttribute(collectionEle))__		parseCollectionElements(nl, target, bd, defaultElementType)__		return target__	};parse,a,list,element;public,list,object,parse,list,element,element,collection,ele,nullable,bean,definition,bd,string,default,element,type,collection,ele,get,attribute,node,list,nl,collection,ele,get,child,nodes,managed,list,object,target,new,managed,list,nl,get,length,target,set,source,extract,source,collection,ele,target,set,element,type,name,default,element,type,target,set,merge,enabled,parse,merge,attribute,collection,ele,parse,collection,elements,nl,target,bd,default,element,type,return,target
BeanDefinitionParserDelegate -> public List<Object> parseListElement(Element collectionEle, @Nullable BeanDefinition bd);1530190293;Parse a list element.;public List<Object> parseListElement(Element collectionEle, @Nullable BeanDefinition bd) {_		String defaultElementType = collectionEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = collectionEle.getChildNodes()__		ManagedList<Object> target = new ManagedList<>(nl.getLength())__		target.setSource(extractSource(collectionEle))__		target.setElementTypeName(defaultElementType)__		target.setMergeEnabled(parseMergeAttribute(collectionEle))__		parseCollectionElements(nl, target, bd, defaultElementType)__		return target__	};parse,a,list,element;public,list,object,parse,list,element,element,collection,ele,nullable,bean,definition,bd,string,default,element,type,collection,ele,get,attribute,node,list,nl,collection,ele,get,child,nodes,managed,list,object,target,new,managed,list,nl,get,length,target,set,source,extract,source,collection,ele,target,set,element,type,name,default,element,type,target,set,merge,enabled,parse,merge,attribute,collection,ele,parse,collection,elements,nl,target,bd,default,element,type,return,target
BeanDefinitionParserDelegate -> public List<Object> parseListElement(Element collectionEle, @Nullable BeanDefinition bd);1532706365;Parse a list element.;public List<Object> parseListElement(Element collectionEle, @Nullable BeanDefinition bd) {_		String defaultElementType = collectionEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = collectionEle.getChildNodes()__		ManagedList<Object> target = new ManagedList<>(nl.getLength())__		target.setSource(extractSource(collectionEle))__		target.setElementTypeName(defaultElementType)__		target.setMergeEnabled(parseMergeAttribute(collectionEle))__		parseCollectionElements(nl, target, bd, defaultElementType)__		return target__	};parse,a,list,element;public,list,object,parse,list,element,element,collection,ele,nullable,bean,definition,bd,string,default,element,type,collection,ele,get,attribute,node,list,nl,collection,ele,get,child,nodes,managed,list,object,target,new,managed,list,nl,get,length,target,set,source,extract,source,collection,ele,target,set,element,type,name,default,element,type,target,set,merge,enabled,parse,merge,attribute,collection,ele,parse,collection,elements,nl,target,bd,default,element,type,return,target
BeanDefinitionParserDelegate -> public List<Object> parseListElement(Element collectionEle, @Nullable BeanDefinition bd);1546958161;Parse a list element.;public List<Object> parseListElement(Element collectionEle, @Nullable BeanDefinition bd) {_		String defaultElementType = collectionEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = collectionEle.getChildNodes()__		ManagedList<Object> target = new ManagedList<>(nl.getLength())__		target.setSource(extractSource(collectionEle))__		target.setElementTypeName(defaultElementType)__		target.setMergeEnabled(parseMergeAttribute(collectionEle))__		parseCollectionElements(nl, target, bd, defaultElementType)__		return target__	};parse,a,list,element;public,list,object,parse,list,element,element,collection,ele,nullable,bean,definition,bd,string,default,element,type,collection,ele,get,attribute,node,list,nl,collection,ele,get,child,nodes,managed,list,object,target,new,managed,list,nl,get,length,target,set,source,extract,source,collection,ele,target,set,element,type,name,default,element,type,target,set,merge,enabled,parse,merge,attribute,collection,ele,parse,collection,elements,nl,target,bd,default,element,type,return,target
BeanDefinitionParserDelegate -> public BeanDefinitionHolder parseBeanDefinitionElement(Element ele);1328020251;Parses the supplied <code>&lt_bean&gt_</code> element. May return <code>null</code>_if there were errors during parse. Errors are reported to the_{@link org.springframework.beans.factory.parsing.ProblemReporter}.;public BeanDefinitionHolder parseBeanDefinitionElement(Element ele) {_		return parseBeanDefinitionElement(ele, null)__	};parses,the,supplied,code,lt,bean,gt,code,element,may,return,code,null,code,if,there,were,errors,during,parse,errors,are,reported,to,the,link,org,springframework,beans,factory,parsing,problem,reporter;public,bean,definition,holder,parse,bean,definition,element,element,ele,return,parse,bean,definition,element,ele,null
BeanDefinitionParserDelegate -> public BeanDefinitionHolder parseBeanDefinitionElement(Element ele);1335774711;Parses the supplied <code>&lt_bean&gt_</code> element. May return <code>null</code>_if there were errors during parse. Errors are reported to the_{@link org.springframework.beans.factory.parsing.ProblemReporter}.;public BeanDefinitionHolder parseBeanDefinitionElement(Element ele) {_		return parseBeanDefinitionElement(ele, null)__	};parses,the,supplied,code,lt,bean,gt,code,element,may,return,code,null,code,if,there,were,errors,during,parse,errors,are,reported,to,the,link,org,springframework,beans,factory,parsing,problem,reporter;public,bean,definition,holder,parse,bean,definition,element,element,ele,return,parse,bean,definition,element,ele,null
BeanDefinitionParserDelegate -> public BeanDefinitionHolder parseBeanDefinitionElement(Element ele);1337341719;Parses the supplied <code>&lt_bean&gt_</code> element. May return <code>null</code>_if there were errors during parse. Errors are reported to the_{@link org.springframework.beans.factory.parsing.ProblemReporter}.;public BeanDefinitionHolder parseBeanDefinitionElement(Element ele) {_		return parseBeanDefinitionElement(ele, null)__	};parses,the,supplied,code,lt,bean,gt,code,element,may,return,code,null,code,if,there,were,errors,during,parse,errors,are,reported,to,the,link,org,springframework,beans,factory,parsing,problem,reporter;public,bean,definition,holder,parse,bean,definition,element,element,ele,return,parse,bean,definition,element,ele,null
BeanDefinitionParserDelegate -> public BeanDefinitionHolder parseBeanDefinitionElement(Element ele);1351392612;Parses the supplied <code>&lt_bean&gt_</code> element. May return <code>null</code>_if there were errors during parse. Errors are reported to the_{@link org.springframework.beans.factory.parsing.ProblemReporter}.;public BeanDefinitionHolder parseBeanDefinitionElement(Element ele) {_		return parseBeanDefinitionElement(ele, null)__	};parses,the,supplied,code,lt,bean,gt,code,element,may,return,code,null,code,if,there,were,errors,during,parse,errors,are,reported,to,the,link,org,springframework,beans,factory,parsing,problem,reporter;public,bean,definition,holder,parse,bean,definition,element,element,ele,return,parse,bean,definition,element,ele,null
BeanDefinitionParserDelegate -> public BeanDefinitionHolder parseBeanDefinitionElement(Element ele);1351696936;Parses the supplied <code>&lt_bean&gt_</code> element. May return <code>null</code>_if there were errors during parse. Errors are reported to the_{@link org.springframework.beans.factory.parsing.ProblemReporter}.;public BeanDefinitionHolder parseBeanDefinitionElement(Element ele) {_		return parseBeanDefinitionElement(ele, null)__	};parses,the,supplied,code,lt,bean,gt,code,element,may,return,code,null,code,if,there,were,errors,during,parse,errors,are,reported,to,the,link,org,springframework,beans,factory,parsing,problem,reporter;public,bean,definition,holder,parse,bean,definition,element,element,ele,return,parse,bean,definition,element,ele,null
BeanDefinitionParserDelegate -> public BeanDefinitionHolder parseBeanDefinitionElement(Element ele);1356735495;Parses the supplied {@code &lt_bean&gt_} element. May return {@code null}_if there were errors during parse. Errors are reported to the_{@link org.springframework.beans.factory.parsing.ProblemReporter}.;public BeanDefinitionHolder parseBeanDefinitionElement(Element ele) {_		return parseBeanDefinitionElement(ele, null)__	};parses,the,supplied,code,lt,bean,gt,element,may,return,code,null,if,there,were,errors,during,parse,errors,are,reported,to,the,link,org,springframework,beans,factory,parsing,problem,reporter;public,bean,definition,holder,parse,bean,definition,element,element,ele,return,parse,bean,definition,element,ele,null
BeanDefinitionParserDelegate -> public BeanDefinitionHolder parseBeanDefinitionElement(Element ele);1357119417;Parses the supplied {@code &lt_bean&gt_} element. May return {@code null}_if there were errors during parse. Errors are reported to the_{@link org.springframework.beans.factory.parsing.ProblemReporter}.;public BeanDefinitionHolder parseBeanDefinitionElement(Element ele) {_		return parseBeanDefinitionElement(ele, null)__	};parses,the,supplied,code,lt,bean,gt,element,may,return,code,null,if,there,were,errors,during,parse,errors,are,reported,to,the,link,org,springframework,beans,factory,parsing,problem,reporter;public,bean,definition,holder,parse,bean,definition,element,element,ele,return,parse,bean,definition,element,ele,null
BeanDefinitionParserDelegate -> public BeanDefinitionHolder parseBeanDefinitionElement(Element ele);1367943112;Parses the supplied {@code &lt_bean&gt_} element. May return {@code null}_if there were errors during parse. Errors are reported to the_{@link org.springframework.beans.factory.parsing.ProblemReporter}.;public BeanDefinitionHolder parseBeanDefinitionElement(Element ele) {_		return parseBeanDefinitionElement(ele, null)__	};parses,the,supplied,code,lt,bean,gt,element,may,return,code,null,if,there,were,errors,during,parse,errors,are,reported,to,the,link,org,springframework,beans,factory,parsing,problem,reporter;public,bean,definition,holder,parse,bean,definition,element,element,ele,return,parse,bean,definition,element,ele,null
BeanDefinitionParserDelegate -> public BeanDefinitionHolder parseBeanDefinitionElement(Element ele);1382030648;Parses the supplied {@code &lt_bean&gt_} element. May return {@code null}_if there were errors during parse. Errors are reported to the_{@link org.springframework.beans.factory.parsing.ProblemReporter}.;public BeanDefinitionHolder parseBeanDefinitionElement(Element ele) {_		return parseBeanDefinitionElement(ele, null)__	};parses,the,supplied,code,lt,bean,gt,element,may,return,code,null,if,there,were,errors,during,parse,errors,are,reported,to,the,link,org,springframework,beans,factory,parsing,problem,reporter;public,bean,definition,holder,parse,bean,definition,element,element,ele,return,parse,bean,definition,element,ele,null
BeanDefinitionParserDelegate -> public BeanDefinitionHolder parseBeanDefinitionElement(Element ele);1385412762;Parses the supplied {@code &lt_bean&gt_} element. May return {@code null}_if there were errors during parse. Errors are reported to the_{@link org.springframework.beans.factory.parsing.ProblemReporter}.;public BeanDefinitionHolder parseBeanDefinitionElement(Element ele) {_		return parseBeanDefinitionElement(ele, null)__	};parses,the,supplied,code,lt,bean,gt,element,may,return,code,null,if,there,were,errors,during,parse,errors,are,reported,to,the,link,org,springframework,beans,factory,parsing,problem,reporter;public,bean,definition,holder,parse,bean,definition,element,element,ele,return,parse,bean,definition,element,ele,null
BeanDefinitionParserDelegate -> public BeanDefinitionHolder parseBeanDefinitionElement(Element ele);1410953197;Parses the supplied {@code &lt_bean&gt_} element. May return {@code null}_if there were errors during parse. Errors are reported to the_{@link org.springframework.beans.factory.parsing.ProblemReporter}.;public BeanDefinitionHolder parseBeanDefinitionElement(Element ele) {_		return parseBeanDefinitionElement(ele, null)__	};parses,the,supplied,code,lt,bean,gt,element,may,return,code,null,if,there,were,errors,during,parse,errors,are,reported,to,the,link,org,springframework,beans,factory,parsing,problem,reporter;public,bean,definition,holder,parse,bean,definition,element,element,ele,return,parse,bean,definition,element,ele,null
BeanDefinitionParserDelegate -> public BeanDefinitionHolder parseBeanDefinitionElement(Element ele);1411599760;Parses the supplied {@code &lt_bean&gt_} element. May return {@code null}_if there were errors during parse. Errors are reported to the_{@link org.springframework.beans.factory.parsing.ProblemReporter}.;public BeanDefinitionHolder parseBeanDefinitionElement(Element ele) {_		return parseBeanDefinitionElement(ele, null)__	};parses,the,supplied,code,lt,bean,gt,element,may,return,code,null,if,there,were,errors,during,parse,errors,are,reported,to,the,link,org,springframework,beans,factory,parsing,problem,reporter;public,bean,definition,holder,parse,bean,definition,element,element,ele,return,parse,bean,definition,element,ele,null
BeanDefinitionParserDelegate -> public BeanDefinitionHolder parseBeanDefinitionElement(Element ele);1419966315;Parses the supplied {@code &lt_bean&gt_} element. May return {@code null}_if there were errors during parse. Errors are reported to the_{@link org.springframework.beans.factory.parsing.ProblemReporter}.;public BeanDefinitionHolder parseBeanDefinitionElement(Element ele) {_		return parseBeanDefinitionElement(ele, null)__	};parses,the,supplied,code,lt,bean,gt,element,may,return,code,null,if,there,were,errors,during,parse,errors,are,reported,to,the,link,org,springframework,beans,factory,parsing,problem,reporter;public,bean,definition,holder,parse,bean,definition,element,element,ele,return,parse,bean,definition,element,ele,null
BeanDefinitionParserDelegate -> public BeanDefinitionHolder parseBeanDefinitionElement(Element ele);1431958785;Parses the supplied {@code &lt_bean&gt_} element. May return {@code null}_if there were errors during parse. Errors are reported to the_{@link org.springframework.beans.factory.parsing.ProblemReporter}.;public BeanDefinitionHolder parseBeanDefinitionElement(Element ele) {_		return parseBeanDefinitionElement(ele, null)__	};parses,the,supplied,code,lt,bean,gt,element,may,return,code,null,if,there,were,errors,during,parse,errors,are,reported,to,the,link,org,springframework,beans,factory,parsing,problem,reporter;public,bean,definition,holder,parse,bean,definition,element,element,ele,return,parse,bean,definition,element,ele,null
BeanDefinitionParserDelegate -> public BeanDefinitionHolder parseBeanDefinitionElement(Element ele);1432135182;Parses the supplied {@code &lt_bean&gt_} element. May return {@code null}_if there were errors during parse. Errors are reported to the_{@link org.springframework.beans.factory.parsing.ProblemReporter}.;public BeanDefinitionHolder parseBeanDefinitionElement(Element ele) {_		return parseBeanDefinitionElement(ele, null)__	};parses,the,supplied,code,lt,bean,gt,element,may,return,code,null,if,there,were,errors,during,parse,errors,are,reported,to,the,link,org,springframework,beans,factory,parsing,problem,reporter;public,bean,definition,holder,parse,bean,definition,element,element,ele,return,parse,bean,definition,element,ele,null
BeanDefinitionParserDelegate -> public BeanDefinitionHolder parseBeanDefinitionElement(Element ele);1447323728;Parses the supplied {@code <bean>} element. May return {@code null}_if there were errors during parse. Errors are reported to the_{@link org.springframework.beans.factory.parsing.ProblemReporter}.;public BeanDefinitionHolder parseBeanDefinitionElement(Element ele) {_		return parseBeanDefinitionElement(ele, null)__	};parses,the,supplied,code,bean,element,may,return,code,null,if,there,were,errors,during,parse,errors,are,reported,to,the,link,org,springframework,beans,factory,parsing,problem,reporter;public,bean,definition,holder,parse,bean,definition,element,element,ele,return,parse,bean,definition,element,ele,null
BeanDefinitionParserDelegate -> public BeanDefinitionHolder parseBeanDefinitionElement(Element ele);1467726769;Parses the supplied {@code <bean>} element. May return {@code null}_if there were errors during parse. Errors are reported to the_{@link org.springframework.beans.factory.parsing.ProblemReporter}.;public BeanDefinitionHolder parseBeanDefinitionElement(Element ele) {_		return parseBeanDefinitionElement(ele, null)__	};parses,the,supplied,code,bean,element,may,return,code,null,if,there,were,errors,during,parse,errors,are,reported,to,the,link,org,springframework,beans,factory,parsing,problem,reporter;public,bean,definition,holder,parse,bean,definition,element,element,ele,return,parse,bean,definition,element,ele,null
BeanDefinitionParserDelegate -> public BeanDefinitionHolder parseBeanDefinitionElement(Element ele);1467730834;Parses the supplied {@code <bean>} element. May return {@code null}_if there were errors during parse. Errors are reported to the_{@link org.springframework.beans.factory.parsing.ProblemReporter}.;public BeanDefinitionHolder parseBeanDefinitionElement(Element ele) {_		return parseBeanDefinitionElement(ele, null)__	};parses,the,supplied,code,bean,element,may,return,code,null,if,there,were,errors,during,parse,errors,are,reported,to,the,link,org,springframework,beans,factory,parsing,problem,reporter;public,bean,definition,holder,parse,bean,definition,element,element,ele,return,parse,bean,definition,element,ele,null
BeanDefinitionParserDelegate -> public BeanDefinitionHolder parseBeanDefinitionElement(Element ele);1467744603;Parses the supplied {@code <bean>} element. May return {@code null}_if there were errors during parse. Errors are reported to the_{@link org.springframework.beans.factory.parsing.ProblemReporter}.;public BeanDefinitionHolder parseBeanDefinitionElement(Element ele) {_		return parseBeanDefinitionElement(ele, null)__	};parses,the,supplied,code,bean,element,may,return,code,null,if,there,were,errors,during,parse,errors,are,reported,to,the,link,org,springframework,beans,factory,parsing,problem,reporter;public,bean,definition,holder,parse,bean,definition,element,element,ele,return,parse,bean,definition,element,ele,null
BeanDefinitionParserDelegate -> public BeanDefinitionHolder parseBeanDefinitionElement(Element ele);1487245676;Parses the supplied {@code <bean>} element. May return {@code null}_if there were errors during parse. Errors are reported to the_{@link org.springframework.beans.factory.parsing.ProblemReporter}.;public BeanDefinitionHolder parseBeanDefinitionElement(Element ele) {_		return parseBeanDefinitionElement(ele, null)__	};parses,the,supplied,code,bean,element,may,return,code,null,if,there,were,errors,during,parse,errors,are,reported,to,the,link,org,springframework,beans,factory,parsing,problem,reporter;public,bean,definition,holder,parse,bean,definition,element,element,ele,return,parse,bean,definition,element,ele,null
BeanDefinitionParserDelegate -> public BeanDefinitionHolder parseBeanDefinitionElement(Element ele);1487255851;Parses the supplied {@code <bean>} element. May return {@code null}_if there were errors during parse. Errors are reported to the_{@link org.springframework.beans.factory.parsing.ProblemReporter}.;public BeanDefinitionHolder parseBeanDefinitionElement(Element ele) {_		return parseBeanDefinitionElement(ele, null)__	};parses,the,supplied,code,bean,element,may,return,code,null,if,there,were,errors,during,parse,errors,are,reported,to,the,link,org,springframework,beans,factory,parsing,problem,reporter;public,bean,definition,holder,parse,bean,definition,element,element,ele,return,parse,bean,definition,element,ele,null
BeanDefinitionParserDelegate -> public BeanDefinitionHolder parseBeanDefinitionElement(Element ele);1494586217;Parses the supplied {@code <bean>} element. May return {@code null}_if there were errors during parse. Errors are reported to the_{@link org.springframework.beans.factory.parsing.ProblemReporter}.;public BeanDefinitionHolder parseBeanDefinitionElement(Element ele) {_		return parseBeanDefinitionElement(ele, null)__	};parses,the,supplied,code,bean,element,may,return,code,null,if,there,were,errors,during,parse,errors,are,reported,to,the,link,org,springframework,beans,factory,parsing,problem,reporter;public,bean,definition,holder,parse,bean,definition,element,element,ele,return,parse,bean,definition,element,ele,null
BeanDefinitionParserDelegate -> public Map<Object, Object> parseMapElement(Element mapEle, BeanDefinition bd);1385412762;Parse a map element.;public Map<Object, Object> parseMapElement(Element mapEle, BeanDefinition bd) {_		String defaultKeyType = mapEle.getAttribute(KEY_TYPE_ATTRIBUTE)__		String defaultValueType = mapEle.getAttribute(VALUE_TYPE_ATTRIBUTE)___		List<Element> entryEles = DomUtils.getChildElementsByTagName(mapEle, ENTRY_ELEMENT)__		ManagedMap<Object, Object> map = new ManagedMap<Object, Object>(entryEles.size())__		map.setSource(extractSource(mapEle))__		map.setKeyTypeName(defaultKeyType)__		map.setValueTypeName(defaultValueType)__		map.setMergeEnabled(parseMergeAttribute(mapEle))___		for (Element entryEle : entryEles) {_			_			_			NodeList entrySubNodes = entryEle.getChildNodes()__			Element keyEle = null__			Element valueEle = null__			for (int j = 0_ j < entrySubNodes.getLength()_ j++) {_				Node node = entrySubNodes.item(j)__				if (node instanceof Element) {_					Element candidateEle = (Element) node__					if (nodeNameEquals(candidateEle, KEY_ELEMENT)) {_						if (keyEle != null) {_							error("<entry> element is only allowed to contain one <key> sub-element", entryEle)__						}_						else {_							keyEle = candidateEle__						}_					}_					else {_						_						if (nodeNameEquals(candidateEle, DESCRIPTION_ELEMENT)) {_							_						}_						else if (valueEle != null) {_							error("<entry> element must not contain more than one value sub-element", entryEle)__						}_						else {_							valueEle = candidateEle__						}_					}_				}_			}__			_			Object key = null__			boolean hasKeyAttribute = entryEle.hasAttribute(KEY_ATTRIBUTE)__			boolean hasKeyRefAttribute = entryEle.hasAttribute(KEY_REF_ATTRIBUTE)__			if ((hasKeyAttribute && hasKeyRefAttribute) ||_					((hasKeyAttribute || hasKeyRefAttribute)) && keyEle != null) {_				error("<entry> element is only allowed to contain either " +_						"a 'key' attribute OR a 'key-ref' attribute OR a <key> sub-element", entryEle)__			}_			if (hasKeyAttribute) {_				key = buildTypedStringValueForMap(entryEle.getAttribute(KEY_ATTRIBUTE), defaultKeyType, entryEle)__			}_			else if (hasKeyRefAttribute) {_				String refName = entryEle.getAttribute(KEY_REF_ATTRIBUTE)__				if (!StringUtils.hasText(refName)) {_					error("<entry> element contains empty 'key-ref' attribute", entryEle)__				}_				RuntimeBeanReference ref = new RuntimeBeanReference(refName)__				ref.setSource(extractSource(entryEle))__				key = ref__			}_			else if (keyEle != null) {_				key = parseKeyElement(keyEle, bd, defaultKeyType)__			}_			else {_				error("<entry> element must specify a key", entryEle)__			}__			_			Object value = null__			boolean hasValueAttribute = entryEle.hasAttribute(VALUE_ATTRIBUTE)__			boolean hasValueRefAttribute = entryEle.hasAttribute(VALUE_REF_ATTRIBUTE)__			boolean hasValueTypeAttribute = entryEle.hasAttribute(VALUE_TYPE_ATTRIBUTE)__			if ((hasValueAttribute && hasValueRefAttribute) ||_					((hasValueAttribute || hasValueRefAttribute)) && valueEle != null) {_				error("<entry> element is only allowed to contain either " +_						"'value' attribute OR 'value-ref' attribute OR <value> sub-element", entryEle)__			}_			if ((hasValueTypeAttribute && hasValueRefAttribute) ||_				(hasValueTypeAttribute && !hasValueAttribute) ||_					(hasValueTypeAttribute && valueEle != null)) {_				error("<entry> element is only allowed to contain a 'value-type' " +_						"attribute when it has a 'value' attribute", entryEle)__			}_			if (hasValueAttribute) {_				String valueType = entryEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__				if (!StringUtils.hasText(valueType)) {_					valueType = defaultValueType__				}_				value = buildTypedStringValueForMap(entryEle.getAttribute(VALUE_ATTRIBUTE), valueType, entryEle)__			}_			else if (hasValueRefAttribute) {_				String refName = entryEle.getAttribute(VALUE_REF_ATTRIBUTE)__				if (!StringUtils.hasText(refName)) {_					error("<entry> element contains empty 'value-ref' attribute", entryEle)__				}_				RuntimeBeanReference ref = new RuntimeBeanReference(refName)__				ref.setSource(extractSource(entryEle))__				value = ref__			}_			else if (valueEle != null) {_				value = parsePropertySubElement(valueEle, bd, defaultValueType)__			}_			else {_				error("<entry> element must specify a value", entryEle)__			}__			_			map.put(key, value)__		}__		return map__	};parse,a,map,element;public,map,object,object,parse,map,element,element,map,ele,bean,definition,bd,string,default,key,type,map,ele,get,attribute,string,default,value,type,map,ele,get,attribute,list,element,entry,eles,dom,utils,get,child,elements,by,tag,name,map,ele,managed,map,object,object,map,new,managed,map,object,object,entry,eles,size,map,set,source,extract,source,map,ele,map,set,key,type,name,default,key,type,map,set,value,type,name,default,value,type,map,set,merge,enabled,parse,merge,attribute,map,ele,for,element,entry,ele,entry,eles,node,list,entry,sub,nodes,entry,ele,get,child,nodes,element,key,ele,null,element,value,ele,null,for,int,j,0,j,entry,sub,nodes,get,length,j,node,node,entry,sub,nodes,item,j,if,node,instanceof,element,element,candidate,ele,element,node,if,node,name,equals,candidate,ele,if,key,ele,null,error,entry,element,is,only,allowed,to,contain,one,key,sub,element,entry,ele,else,key,ele,candidate,ele,else,if,node,name,equals,candidate,ele,else,if,value,ele,null,error,entry,element,must,not,contain,more,than,one,value,sub,element,entry,ele,else,value,ele,candidate,ele,object,key,null,boolean,has,key,attribute,entry,ele,has,attribute,boolean,has,key,ref,attribute,entry,ele,has,attribute,if,has,key,attribute,has,key,ref,attribute,has,key,attribute,has,key,ref,attribute,key,ele,null,error,entry,element,is,only,allowed,to,contain,either,a,key,attribute,or,a,key,ref,attribute,or,a,key,sub,element,entry,ele,if,has,key,attribute,key,build,typed,string,value,for,map,entry,ele,get,attribute,default,key,type,entry,ele,else,if,has,key,ref,attribute,string,ref,name,entry,ele,get,attribute,if,string,utils,has,text,ref,name,error,entry,element,contains,empty,key,ref,attribute,entry,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,entry,ele,key,ref,else,if,key,ele,null,key,parse,key,element,key,ele,bd,default,key,type,else,error,entry,element,must,specify,a,key,entry,ele,object,value,null,boolean,has,value,attribute,entry,ele,has,attribute,boolean,has,value,ref,attribute,entry,ele,has,attribute,boolean,has,value,type,attribute,entry,ele,has,attribute,if,has,value,attribute,has,value,ref,attribute,has,value,attribute,has,value,ref,attribute,value,ele,null,error,entry,element,is,only,allowed,to,contain,either,value,attribute,or,value,ref,attribute,or,value,sub,element,entry,ele,if,has,value,type,attribute,has,value,ref,attribute,has,value,type,attribute,has,value,attribute,has,value,type,attribute,value,ele,null,error,entry,element,is,only,allowed,to,contain,a,value,type,attribute,when,it,has,a,value,attribute,entry,ele,if,has,value,attribute,string,value,type,entry,ele,get,attribute,if,string,utils,has,text,value,type,value,type,default,value,type,value,build,typed,string,value,for,map,entry,ele,get,attribute,value,type,entry,ele,else,if,has,value,ref,attribute,string,ref,name,entry,ele,get,attribute,if,string,utils,has,text,ref,name,error,entry,element,contains,empty,value,ref,attribute,entry,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,entry,ele,value,ref,else,if,value,ele,null,value,parse,property,sub,element,value,ele,bd,default,value,type,else,error,entry,element,must,specify,a,value,entry,ele,map,put,key,value,return,map
BeanDefinitionParserDelegate -> public Map<Object, Object> parseMapElement(Element mapEle, BeanDefinition bd);1410953197;Parse a map element.;public Map<Object, Object> parseMapElement(Element mapEle, BeanDefinition bd) {_		String defaultKeyType = mapEle.getAttribute(KEY_TYPE_ATTRIBUTE)__		String defaultValueType = mapEle.getAttribute(VALUE_TYPE_ATTRIBUTE)___		List<Element> entryEles = DomUtils.getChildElementsByTagName(mapEle, ENTRY_ELEMENT)__		ManagedMap<Object, Object> map = new ManagedMap<Object, Object>(entryEles.size())__		map.setSource(extractSource(mapEle))__		map.setKeyTypeName(defaultKeyType)__		map.setValueTypeName(defaultValueType)__		map.setMergeEnabled(parseMergeAttribute(mapEle))___		for (Element entryEle : entryEles) {_			_			_			NodeList entrySubNodes = entryEle.getChildNodes()__			Element keyEle = null__			Element valueEle = null__			for (int j = 0_ j < entrySubNodes.getLength()_ j++) {_				Node node = entrySubNodes.item(j)__				if (node instanceof Element) {_					Element candidateEle = (Element) node__					if (nodeNameEquals(candidateEle, KEY_ELEMENT)) {_						if (keyEle != null) {_							error("<entry> element is only allowed to contain one <key> sub-element", entryEle)__						}_						else {_							keyEle = candidateEle__						}_					}_					else {_						_						if (nodeNameEquals(candidateEle, DESCRIPTION_ELEMENT)) {_							_						}_						else if (valueEle != null) {_							error("<entry> element must not contain more than one value sub-element", entryEle)__						}_						else {_							valueEle = candidateEle__						}_					}_				}_			}__			_			Object key = null__			boolean hasKeyAttribute = entryEle.hasAttribute(KEY_ATTRIBUTE)__			boolean hasKeyRefAttribute = entryEle.hasAttribute(KEY_REF_ATTRIBUTE)__			if ((hasKeyAttribute && hasKeyRefAttribute) ||_					((hasKeyAttribute || hasKeyRefAttribute)) && keyEle != null) {_				error("<entry> element is only allowed to contain either " +_						"a 'key' attribute OR a 'key-ref' attribute OR a <key> sub-element", entryEle)__			}_			if (hasKeyAttribute) {_				key = buildTypedStringValueForMap(entryEle.getAttribute(KEY_ATTRIBUTE), defaultKeyType, entryEle)__			}_			else if (hasKeyRefAttribute) {_				String refName = entryEle.getAttribute(KEY_REF_ATTRIBUTE)__				if (!StringUtils.hasText(refName)) {_					error("<entry> element contains empty 'key-ref' attribute", entryEle)__				}_				RuntimeBeanReference ref = new RuntimeBeanReference(refName)__				ref.setSource(extractSource(entryEle))__				key = ref__			}_			else if (keyEle != null) {_				key = parseKeyElement(keyEle, bd, defaultKeyType)__			}_			else {_				error("<entry> element must specify a key", entryEle)__			}__			_			Object value = null__			boolean hasValueAttribute = entryEle.hasAttribute(VALUE_ATTRIBUTE)__			boolean hasValueRefAttribute = entryEle.hasAttribute(VALUE_REF_ATTRIBUTE)__			boolean hasValueTypeAttribute = entryEle.hasAttribute(VALUE_TYPE_ATTRIBUTE)__			if ((hasValueAttribute && hasValueRefAttribute) ||_					((hasValueAttribute || hasValueRefAttribute)) && valueEle != null) {_				error("<entry> element is only allowed to contain either " +_						"'value' attribute OR 'value-ref' attribute OR <value> sub-element", entryEle)__			}_			if ((hasValueTypeAttribute && hasValueRefAttribute) ||_				(hasValueTypeAttribute && !hasValueAttribute) ||_					(hasValueTypeAttribute && valueEle != null)) {_				error("<entry> element is only allowed to contain a 'value-type' " +_						"attribute when it has a 'value' attribute", entryEle)__			}_			if (hasValueAttribute) {_				String valueType = entryEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__				if (!StringUtils.hasText(valueType)) {_					valueType = defaultValueType__				}_				value = buildTypedStringValueForMap(entryEle.getAttribute(VALUE_ATTRIBUTE), valueType, entryEle)__			}_			else if (hasValueRefAttribute) {_				String refName = entryEle.getAttribute(VALUE_REF_ATTRIBUTE)__				if (!StringUtils.hasText(refName)) {_					error("<entry> element contains empty 'value-ref' attribute", entryEle)__				}_				RuntimeBeanReference ref = new RuntimeBeanReference(refName)__				ref.setSource(extractSource(entryEle))__				value = ref__			}_			else if (valueEle != null) {_				value = parsePropertySubElement(valueEle, bd, defaultValueType)__			}_			else {_				error("<entry> element must specify a value", entryEle)__			}__			_			map.put(key, value)__		}__		return map__	};parse,a,map,element;public,map,object,object,parse,map,element,element,map,ele,bean,definition,bd,string,default,key,type,map,ele,get,attribute,string,default,value,type,map,ele,get,attribute,list,element,entry,eles,dom,utils,get,child,elements,by,tag,name,map,ele,managed,map,object,object,map,new,managed,map,object,object,entry,eles,size,map,set,source,extract,source,map,ele,map,set,key,type,name,default,key,type,map,set,value,type,name,default,value,type,map,set,merge,enabled,parse,merge,attribute,map,ele,for,element,entry,ele,entry,eles,node,list,entry,sub,nodes,entry,ele,get,child,nodes,element,key,ele,null,element,value,ele,null,for,int,j,0,j,entry,sub,nodes,get,length,j,node,node,entry,sub,nodes,item,j,if,node,instanceof,element,element,candidate,ele,element,node,if,node,name,equals,candidate,ele,if,key,ele,null,error,entry,element,is,only,allowed,to,contain,one,key,sub,element,entry,ele,else,key,ele,candidate,ele,else,if,node,name,equals,candidate,ele,else,if,value,ele,null,error,entry,element,must,not,contain,more,than,one,value,sub,element,entry,ele,else,value,ele,candidate,ele,object,key,null,boolean,has,key,attribute,entry,ele,has,attribute,boolean,has,key,ref,attribute,entry,ele,has,attribute,if,has,key,attribute,has,key,ref,attribute,has,key,attribute,has,key,ref,attribute,key,ele,null,error,entry,element,is,only,allowed,to,contain,either,a,key,attribute,or,a,key,ref,attribute,or,a,key,sub,element,entry,ele,if,has,key,attribute,key,build,typed,string,value,for,map,entry,ele,get,attribute,default,key,type,entry,ele,else,if,has,key,ref,attribute,string,ref,name,entry,ele,get,attribute,if,string,utils,has,text,ref,name,error,entry,element,contains,empty,key,ref,attribute,entry,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,entry,ele,key,ref,else,if,key,ele,null,key,parse,key,element,key,ele,bd,default,key,type,else,error,entry,element,must,specify,a,key,entry,ele,object,value,null,boolean,has,value,attribute,entry,ele,has,attribute,boolean,has,value,ref,attribute,entry,ele,has,attribute,boolean,has,value,type,attribute,entry,ele,has,attribute,if,has,value,attribute,has,value,ref,attribute,has,value,attribute,has,value,ref,attribute,value,ele,null,error,entry,element,is,only,allowed,to,contain,either,value,attribute,or,value,ref,attribute,or,value,sub,element,entry,ele,if,has,value,type,attribute,has,value,ref,attribute,has,value,type,attribute,has,value,attribute,has,value,type,attribute,value,ele,null,error,entry,element,is,only,allowed,to,contain,a,value,type,attribute,when,it,has,a,value,attribute,entry,ele,if,has,value,attribute,string,value,type,entry,ele,get,attribute,if,string,utils,has,text,value,type,value,type,default,value,type,value,build,typed,string,value,for,map,entry,ele,get,attribute,value,type,entry,ele,else,if,has,value,ref,attribute,string,ref,name,entry,ele,get,attribute,if,string,utils,has,text,ref,name,error,entry,element,contains,empty,value,ref,attribute,entry,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,entry,ele,value,ref,else,if,value,ele,null,value,parse,property,sub,element,value,ele,bd,default,value,type,else,error,entry,element,must,specify,a,value,entry,ele,map,put,key,value,return,map
BeanDefinitionParserDelegate -> public Map<Object, Object> parseMapElement(Element mapEle, BeanDefinition bd);1411599760;Parse a map element.;public Map<Object, Object> parseMapElement(Element mapEle, BeanDefinition bd) {_		String defaultKeyType = mapEle.getAttribute(KEY_TYPE_ATTRIBUTE)__		String defaultValueType = mapEle.getAttribute(VALUE_TYPE_ATTRIBUTE)___		List<Element> entryEles = DomUtils.getChildElementsByTagName(mapEle, ENTRY_ELEMENT)__		ManagedMap<Object, Object> map = new ManagedMap<Object, Object>(entryEles.size())__		map.setSource(extractSource(mapEle))__		map.setKeyTypeName(defaultKeyType)__		map.setValueTypeName(defaultValueType)__		map.setMergeEnabled(parseMergeAttribute(mapEle))___		for (Element entryEle : entryEles) {_			_			_			NodeList entrySubNodes = entryEle.getChildNodes()__			Element keyEle = null__			Element valueEle = null__			for (int j = 0_ j < entrySubNodes.getLength()_ j++) {_				Node node = entrySubNodes.item(j)__				if (node instanceof Element) {_					Element candidateEle = (Element) node__					if (nodeNameEquals(candidateEle, KEY_ELEMENT)) {_						if (keyEle != null) {_							error("<entry> element is only allowed to contain one <key> sub-element", entryEle)__						}_						else {_							keyEle = candidateEle__						}_					}_					else {_						_						if (nodeNameEquals(candidateEle, DESCRIPTION_ELEMENT)) {_							_						}_						else if (valueEle != null) {_							error("<entry> element must not contain more than one value sub-element", entryEle)__						}_						else {_							valueEle = candidateEle__						}_					}_				}_			}__			_			Object key = null__			boolean hasKeyAttribute = entryEle.hasAttribute(KEY_ATTRIBUTE)__			boolean hasKeyRefAttribute = entryEle.hasAttribute(KEY_REF_ATTRIBUTE)__			if ((hasKeyAttribute && hasKeyRefAttribute) ||_					((hasKeyAttribute || hasKeyRefAttribute)) && keyEle != null) {_				error("<entry> element is only allowed to contain either " +_						"a 'key' attribute OR a 'key-ref' attribute OR a <key> sub-element", entryEle)__			}_			if (hasKeyAttribute) {_				key = buildTypedStringValueForMap(entryEle.getAttribute(KEY_ATTRIBUTE), defaultKeyType, entryEle)__			}_			else if (hasKeyRefAttribute) {_				String refName = entryEle.getAttribute(KEY_REF_ATTRIBUTE)__				if (!StringUtils.hasText(refName)) {_					error("<entry> element contains empty 'key-ref' attribute", entryEle)__				}_				RuntimeBeanReference ref = new RuntimeBeanReference(refName)__				ref.setSource(extractSource(entryEle))__				key = ref__			}_			else if (keyEle != null) {_				key = parseKeyElement(keyEle, bd, defaultKeyType)__			}_			else {_				error("<entry> element must specify a key", entryEle)__			}__			_			Object value = null__			boolean hasValueAttribute = entryEle.hasAttribute(VALUE_ATTRIBUTE)__			boolean hasValueRefAttribute = entryEle.hasAttribute(VALUE_REF_ATTRIBUTE)__			boolean hasValueTypeAttribute = entryEle.hasAttribute(VALUE_TYPE_ATTRIBUTE)__			if ((hasValueAttribute && hasValueRefAttribute) ||_					((hasValueAttribute || hasValueRefAttribute)) && valueEle != null) {_				error("<entry> element is only allowed to contain either " +_						"'value' attribute OR 'value-ref' attribute OR <value> sub-element", entryEle)__			}_			if ((hasValueTypeAttribute && hasValueRefAttribute) ||_				(hasValueTypeAttribute && !hasValueAttribute) ||_					(hasValueTypeAttribute && valueEle != null)) {_				error("<entry> element is only allowed to contain a 'value-type' " +_						"attribute when it has a 'value' attribute", entryEle)__			}_			if (hasValueAttribute) {_				String valueType = entryEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__				if (!StringUtils.hasText(valueType)) {_					valueType = defaultValueType__				}_				value = buildTypedStringValueForMap(entryEle.getAttribute(VALUE_ATTRIBUTE), valueType, entryEle)__			}_			else if (hasValueRefAttribute) {_				String refName = entryEle.getAttribute(VALUE_REF_ATTRIBUTE)__				if (!StringUtils.hasText(refName)) {_					error("<entry> element contains empty 'value-ref' attribute", entryEle)__				}_				RuntimeBeanReference ref = new RuntimeBeanReference(refName)__				ref.setSource(extractSource(entryEle))__				value = ref__			}_			else if (valueEle != null) {_				value = parsePropertySubElement(valueEle, bd, defaultValueType)__			}_			else {_				error("<entry> element must specify a value", entryEle)__			}__			_			map.put(key, value)__		}__		return map__	};parse,a,map,element;public,map,object,object,parse,map,element,element,map,ele,bean,definition,bd,string,default,key,type,map,ele,get,attribute,string,default,value,type,map,ele,get,attribute,list,element,entry,eles,dom,utils,get,child,elements,by,tag,name,map,ele,managed,map,object,object,map,new,managed,map,object,object,entry,eles,size,map,set,source,extract,source,map,ele,map,set,key,type,name,default,key,type,map,set,value,type,name,default,value,type,map,set,merge,enabled,parse,merge,attribute,map,ele,for,element,entry,ele,entry,eles,node,list,entry,sub,nodes,entry,ele,get,child,nodes,element,key,ele,null,element,value,ele,null,for,int,j,0,j,entry,sub,nodes,get,length,j,node,node,entry,sub,nodes,item,j,if,node,instanceof,element,element,candidate,ele,element,node,if,node,name,equals,candidate,ele,if,key,ele,null,error,entry,element,is,only,allowed,to,contain,one,key,sub,element,entry,ele,else,key,ele,candidate,ele,else,if,node,name,equals,candidate,ele,else,if,value,ele,null,error,entry,element,must,not,contain,more,than,one,value,sub,element,entry,ele,else,value,ele,candidate,ele,object,key,null,boolean,has,key,attribute,entry,ele,has,attribute,boolean,has,key,ref,attribute,entry,ele,has,attribute,if,has,key,attribute,has,key,ref,attribute,has,key,attribute,has,key,ref,attribute,key,ele,null,error,entry,element,is,only,allowed,to,contain,either,a,key,attribute,or,a,key,ref,attribute,or,a,key,sub,element,entry,ele,if,has,key,attribute,key,build,typed,string,value,for,map,entry,ele,get,attribute,default,key,type,entry,ele,else,if,has,key,ref,attribute,string,ref,name,entry,ele,get,attribute,if,string,utils,has,text,ref,name,error,entry,element,contains,empty,key,ref,attribute,entry,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,entry,ele,key,ref,else,if,key,ele,null,key,parse,key,element,key,ele,bd,default,key,type,else,error,entry,element,must,specify,a,key,entry,ele,object,value,null,boolean,has,value,attribute,entry,ele,has,attribute,boolean,has,value,ref,attribute,entry,ele,has,attribute,boolean,has,value,type,attribute,entry,ele,has,attribute,if,has,value,attribute,has,value,ref,attribute,has,value,attribute,has,value,ref,attribute,value,ele,null,error,entry,element,is,only,allowed,to,contain,either,value,attribute,or,value,ref,attribute,or,value,sub,element,entry,ele,if,has,value,type,attribute,has,value,ref,attribute,has,value,type,attribute,has,value,attribute,has,value,type,attribute,value,ele,null,error,entry,element,is,only,allowed,to,contain,a,value,type,attribute,when,it,has,a,value,attribute,entry,ele,if,has,value,attribute,string,value,type,entry,ele,get,attribute,if,string,utils,has,text,value,type,value,type,default,value,type,value,build,typed,string,value,for,map,entry,ele,get,attribute,value,type,entry,ele,else,if,has,value,ref,attribute,string,ref,name,entry,ele,get,attribute,if,string,utils,has,text,ref,name,error,entry,element,contains,empty,value,ref,attribute,entry,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,entry,ele,value,ref,else,if,value,ele,null,value,parse,property,sub,element,value,ele,bd,default,value,type,else,error,entry,element,must,specify,a,value,entry,ele,map,put,key,value,return,map
BeanDefinitionParserDelegate -> public Map<Object, Object> parseMapElement(Element mapEle, BeanDefinition bd);1419966315;Parse a map element.;public Map<Object, Object> parseMapElement(Element mapEle, BeanDefinition bd) {_		String defaultKeyType = mapEle.getAttribute(KEY_TYPE_ATTRIBUTE)__		String defaultValueType = mapEle.getAttribute(VALUE_TYPE_ATTRIBUTE)___		List<Element> entryEles = DomUtils.getChildElementsByTagName(mapEle, ENTRY_ELEMENT)__		ManagedMap<Object, Object> map = new ManagedMap<Object, Object>(entryEles.size())__		map.setSource(extractSource(mapEle))__		map.setKeyTypeName(defaultKeyType)__		map.setValueTypeName(defaultValueType)__		map.setMergeEnabled(parseMergeAttribute(mapEle))___		for (Element entryEle : entryEles) {_			_			_			NodeList entrySubNodes = entryEle.getChildNodes()__			Element keyEle = null__			Element valueEle = null__			for (int j = 0_ j < entrySubNodes.getLength()_ j++) {_				Node node = entrySubNodes.item(j)__				if (node instanceof Element) {_					Element candidateEle = (Element) node__					if (nodeNameEquals(candidateEle, KEY_ELEMENT)) {_						if (keyEle != null) {_							error("<entry> element is only allowed to contain one <key> sub-element", entryEle)__						}_						else {_							keyEle = candidateEle__						}_					}_					else {_						_						if (nodeNameEquals(candidateEle, DESCRIPTION_ELEMENT)) {_							_						}_						else if (valueEle != null) {_							error("<entry> element must not contain more than one value sub-element", entryEle)__						}_						else {_							valueEle = candidateEle__						}_					}_				}_			}__			_			Object key = null__			boolean hasKeyAttribute = entryEle.hasAttribute(KEY_ATTRIBUTE)__			boolean hasKeyRefAttribute = entryEle.hasAttribute(KEY_REF_ATTRIBUTE)__			if ((hasKeyAttribute && hasKeyRefAttribute) ||_					((hasKeyAttribute || hasKeyRefAttribute)) && keyEle != null) {_				error("<entry> element is only allowed to contain either " +_						"a 'key' attribute OR a 'key-ref' attribute OR a <key> sub-element", entryEle)__			}_			if (hasKeyAttribute) {_				key = buildTypedStringValueForMap(entryEle.getAttribute(KEY_ATTRIBUTE), defaultKeyType, entryEle)__			}_			else if (hasKeyRefAttribute) {_				String refName = entryEle.getAttribute(KEY_REF_ATTRIBUTE)__				if (!StringUtils.hasText(refName)) {_					error("<entry> element contains empty 'key-ref' attribute", entryEle)__				}_				RuntimeBeanReference ref = new RuntimeBeanReference(refName)__				ref.setSource(extractSource(entryEle))__				key = ref__			}_			else if (keyEle != null) {_				key = parseKeyElement(keyEle, bd, defaultKeyType)__			}_			else {_				error("<entry> element must specify a key", entryEle)__			}__			_			Object value = null__			boolean hasValueAttribute = entryEle.hasAttribute(VALUE_ATTRIBUTE)__			boolean hasValueRefAttribute = entryEle.hasAttribute(VALUE_REF_ATTRIBUTE)__			boolean hasValueTypeAttribute = entryEle.hasAttribute(VALUE_TYPE_ATTRIBUTE)__			if ((hasValueAttribute && hasValueRefAttribute) ||_					((hasValueAttribute || hasValueRefAttribute)) && valueEle != null) {_				error("<entry> element is only allowed to contain either " +_						"'value' attribute OR 'value-ref' attribute OR <value> sub-element", entryEle)__			}_			if ((hasValueTypeAttribute && hasValueRefAttribute) ||_				(hasValueTypeAttribute && !hasValueAttribute) ||_					(hasValueTypeAttribute && valueEle != null)) {_				error("<entry> element is only allowed to contain a 'value-type' " +_						"attribute when it has a 'value' attribute", entryEle)__			}_			if (hasValueAttribute) {_				String valueType = entryEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__				if (!StringUtils.hasText(valueType)) {_					valueType = defaultValueType__				}_				value = buildTypedStringValueForMap(entryEle.getAttribute(VALUE_ATTRIBUTE), valueType, entryEle)__			}_			else if (hasValueRefAttribute) {_				String refName = entryEle.getAttribute(VALUE_REF_ATTRIBUTE)__				if (!StringUtils.hasText(refName)) {_					error("<entry> element contains empty 'value-ref' attribute", entryEle)__				}_				RuntimeBeanReference ref = new RuntimeBeanReference(refName)__				ref.setSource(extractSource(entryEle))__				value = ref__			}_			else if (valueEle != null) {_				value = parsePropertySubElement(valueEle, bd, defaultValueType)__			}_			else {_				error("<entry> element must specify a value", entryEle)__			}__			_			map.put(key, value)__		}__		return map__	};parse,a,map,element;public,map,object,object,parse,map,element,element,map,ele,bean,definition,bd,string,default,key,type,map,ele,get,attribute,string,default,value,type,map,ele,get,attribute,list,element,entry,eles,dom,utils,get,child,elements,by,tag,name,map,ele,managed,map,object,object,map,new,managed,map,object,object,entry,eles,size,map,set,source,extract,source,map,ele,map,set,key,type,name,default,key,type,map,set,value,type,name,default,value,type,map,set,merge,enabled,parse,merge,attribute,map,ele,for,element,entry,ele,entry,eles,node,list,entry,sub,nodes,entry,ele,get,child,nodes,element,key,ele,null,element,value,ele,null,for,int,j,0,j,entry,sub,nodes,get,length,j,node,node,entry,sub,nodes,item,j,if,node,instanceof,element,element,candidate,ele,element,node,if,node,name,equals,candidate,ele,if,key,ele,null,error,entry,element,is,only,allowed,to,contain,one,key,sub,element,entry,ele,else,key,ele,candidate,ele,else,if,node,name,equals,candidate,ele,else,if,value,ele,null,error,entry,element,must,not,contain,more,than,one,value,sub,element,entry,ele,else,value,ele,candidate,ele,object,key,null,boolean,has,key,attribute,entry,ele,has,attribute,boolean,has,key,ref,attribute,entry,ele,has,attribute,if,has,key,attribute,has,key,ref,attribute,has,key,attribute,has,key,ref,attribute,key,ele,null,error,entry,element,is,only,allowed,to,contain,either,a,key,attribute,or,a,key,ref,attribute,or,a,key,sub,element,entry,ele,if,has,key,attribute,key,build,typed,string,value,for,map,entry,ele,get,attribute,default,key,type,entry,ele,else,if,has,key,ref,attribute,string,ref,name,entry,ele,get,attribute,if,string,utils,has,text,ref,name,error,entry,element,contains,empty,key,ref,attribute,entry,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,entry,ele,key,ref,else,if,key,ele,null,key,parse,key,element,key,ele,bd,default,key,type,else,error,entry,element,must,specify,a,key,entry,ele,object,value,null,boolean,has,value,attribute,entry,ele,has,attribute,boolean,has,value,ref,attribute,entry,ele,has,attribute,boolean,has,value,type,attribute,entry,ele,has,attribute,if,has,value,attribute,has,value,ref,attribute,has,value,attribute,has,value,ref,attribute,value,ele,null,error,entry,element,is,only,allowed,to,contain,either,value,attribute,or,value,ref,attribute,or,value,sub,element,entry,ele,if,has,value,type,attribute,has,value,ref,attribute,has,value,type,attribute,has,value,attribute,has,value,type,attribute,value,ele,null,error,entry,element,is,only,allowed,to,contain,a,value,type,attribute,when,it,has,a,value,attribute,entry,ele,if,has,value,attribute,string,value,type,entry,ele,get,attribute,if,string,utils,has,text,value,type,value,type,default,value,type,value,build,typed,string,value,for,map,entry,ele,get,attribute,value,type,entry,ele,else,if,has,value,ref,attribute,string,ref,name,entry,ele,get,attribute,if,string,utils,has,text,ref,name,error,entry,element,contains,empty,value,ref,attribute,entry,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,entry,ele,value,ref,else,if,value,ele,null,value,parse,property,sub,element,value,ele,bd,default,value,type,else,error,entry,element,must,specify,a,value,entry,ele,map,put,key,value,return,map
BeanDefinitionParserDelegate -> public Map<Object, Object> parseMapElement(Element mapEle, BeanDefinition bd);1431958785;Parse a map element.;public Map<Object, Object> parseMapElement(Element mapEle, BeanDefinition bd) {_		String defaultKeyType = mapEle.getAttribute(KEY_TYPE_ATTRIBUTE)__		String defaultValueType = mapEle.getAttribute(VALUE_TYPE_ATTRIBUTE)___		List<Element> entryEles = DomUtils.getChildElementsByTagName(mapEle, ENTRY_ELEMENT)__		ManagedMap<Object, Object> map = new ManagedMap<Object, Object>(entryEles.size())__		map.setSource(extractSource(mapEle))__		map.setKeyTypeName(defaultKeyType)__		map.setValueTypeName(defaultValueType)__		map.setMergeEnabled(parseMergeAttribute(mapEle))___		for (Element entryEle : entryEles) {_			_			_			NodeList entrySubNodes = entryEle.getChildNodes()__			Element keyEle = null__			Element valueEle = null__			for (int j = 0_ j < entrySubNodes.getLength()_ j++) {_				Node node = entrySubNodes.item(j)__				if (node instanceof Element) {_					Element candidateEle = (Element) node__					if (nodeNameEquals(candidateEle, KEY_ELEMENT)) {_						if (keyEle != null) {_							error("<entry> element is only allowed to contain one <key> sub-element", entryEle)__						}_						else {_							keyEle = candidateEle__						}_					}_					else {_						_						if (nodeNameEquals(candidateEle, DESCRIPTION_ELEMENT)) {_							_						}_						else if (valueEle != null) {_							error("<entry> element must not contain more than one value sub-element", entryEle)__						}_						else {_							valueEle = candidateEle__						}_					}_				}_			}__			_			Object key = null__			boolean hasKeyAttribute = entryEle.hasAttribute(KEY_ATTRIBUTE)__			boolean hasKeyRefAttribute = entryEle.hasAttribute(KEY_REF_ATTRIBUTE)__			if ((hasKeyAttribute && hasKeyRefAttribute) ||_					((hasKeyAttribute || hasKeyRefAttribute)) && keyEle != null) {_				error("<entry> element is only allowed to contain either " +_						"a 'key' attribute OR a 'key-ref' attribute OR a <key> sub-element", entryEle)__			}_			if (hasKeyAttribute) {_				key = buildTypedStringValueForMap(entryEle.getAttribute(KEY_ATTRIBUTE), defaultKeyType, entryEle)__			}_			else if (hasKeyRefAttribute) {_				String refName = entryEle.getAttribute(KEY_REF_ATTRIBUTE)__				if (!StringUtils.hasText(refName)) {_					error("<entry> element contains empty 'key-ref' attribute", entryEle)__				}_				RuntimeBeanReference ref = new RuntimeBeanReference(refName)__				ref.setSource(extractSource(entryEle))__				key = ref__			}_			else if (keyEle != null) {_				key = parseKeyElement(keyEle, bd, defaultKeyType)__			}_			else {_				error("<entry> element must specify a key", entryEle)__			}__			_			Object value = null__			boolean hasValueAttribute = entryEle.hasAttribute(VALUE_ATTRIBUTE)__			boolean hasValueRefAttribute = entryEle.hasAttribute(VALUE_REF_ATTRIBUTE)__			boolean hasValueTypeAttribute = entryEle.hasAttribute(VALUE_TYPE_ATTRIBUTE)__			if ((hasValueAttribute && hasValueRefAttribute) ||_					((hasValueAttribute || hasValueRefAttribute)) && valueEle != null) {_				error("<entry> element is only allowed to contain either " +_						"'value' attribute OR 'value-ref' attribute OR <value> sub-element", entryEle)__			}_			if ((hasValueTypeAttribute && hasValueRefAttribute) ||_				(hasValueTypeAttribute && !hasValueAttribute) ||_					(hasValueTypeAttribute && valueEle != null)) {_				error("<entry> element is only allowed to contain a 'value-type' " +_						"attribute when it has a 'value' attribute", entryEle)__			}_			if (hasValueAttribute) {_				String valueType = entryEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__				if (!StringUtils.hasText(valueType)) {_					valueType = defaultValueType__				}_				value = buildTypedStringValueForMap(entryEle.getAttribute(VALUE_ATTRIBUTE), valueType, entryEle)__			}_			else if (hasValueRefAttribute) {_				String refName = entryEle.getAttribute(VALUE_REF_ATTRIBUTE)__				if (!StringUtils.hasText(refName)) {_					error("<entry> element contains empty 'value-ref' attribute", entryEle)__				}_				RuntimeBeanReference ref = new RuntimeBeanReference(refName)__				ref.setSource(extractSource(entryEle))__				value = ref__			}_			else if (valueEle != null) {_				value = parsePropertySubElement(valueEle, bd, defaultValueType)__			}_			else {_				error("<entry> element must specify a value", entryEle)__			}__			_			map.put(key, value)__		}__		return map__	};parse,a,map,element;public,map,object,object,parse,map,element,element,map,ele,bean,definition,bd,string,default,key,type,map,ele,get,attribute,string,default,value,type,map,ele,get,attribute,list,element,entry,eles,dom,utils,get,child,elements,by,tag,name,map,ele,managed,map,object,object,map,new,managed,map,object,object,entry,eles,size,map,set,source,extract,source,map,ele,map,set,key,type,name,default,key,type,map,set,value,type,name,default,value,type,map,set,merge,enabled,parse,merge,attribute,map,ele,for,element,entry,ele,entry,eles,node,list,entry,sub,nodes,entry,ele,get,child,nodes,element,key,ele,null,element,value,ele,null,for,int,j,0,j,entry,sub,nodes,get,length,j,node,node,entry,sub,nodes,item,j,if,node,instanceof,element,element,candidate,ele,element,node,if,node,name,equals,candidate,ele,if,key,ele,null,error,entry,element,is,only,allowed,to,contain,one,key,sub,element,entry,ele,else,key,ele,candidate,ele,else,if,node,name,equals,candidate,ele,else,if,value,ele,null,error,entry,element,must,not,contain,more,than,one,value,sub,element,entry,ele,else,value,ele,candidate,ele,object,key,null,boolean,has,key,attribute,entry,ele,has,attribute,boolean,has,key,ref,attribute,entry,ele,has,attribute,if,has,key,attribute,has,key,ref,attribute,has,key,attribute,has,key,ref,attribute,key,ele,null,error,entry,element,is,only,allowed,to,contain,either,a,key,attribute,or,a,key,ref,attribute,or,a,key,sub,element,entry,ele,if,has,key,attribute,key,build,typed,string,value,for,map,entry,ele,get,attribute,default,key,type,entry,ele,else,if,has,key,ref,attribute,string,ref,name,entry,ele,get,attribute,if,string,utils,has,text,ref,name,error,entry,element,contains,empty,key,ref,attribute,entry,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,entry,ele,key,ref,else,if,key,ele,null,key,parse,key,element,key,ele,bd,default,key,type,else,error,entry,element,must,specify,a,key,entry,ele,object,value,null,boolean,has,value,attribute,entry,ele,has,attribute,boolean,has,value,ref,attribute,entry,ele,has,attribute,boolean,has,value,type,attribute,entry,ele,has,attribute,if,has,value,attribute,has,value,ref,attribute,has,value,attribute,has,value,ref,attribute,value,ele,null,error,entry,element,is,only,allowed,to,contain,either,value,attribute,or,value,ref,attribute,or,value,sub,element,entry,ele,if,has,value,type,attribute,has,value,ref,attribute,has,value,type,attribute,has,value,attribute,has,value,type,attribute,value,ele,null,error,entry,element,is,only,allowed,to,contain,a,value,type,attribute,when,it,has,a,value,attribute,entry,ele,if,has,value,attribute,string,value,type,entry,ele,get,attribute,if,string,utils,has,text,value,type,value,type,default,value,type,value,build,typed,string,value,for,map,entry,ele,get,attribute,value,type,entry,ele,else,if,has,value,ref,attribute,string,ref,name,entry,ele,get,attribute,if,string,utils,has,text,ref,name,error,entry,element,contains,empty,value,ref,attribute,entry,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,entry,ele,value,ref,else,if,value,ele,null,value,parse,property,sub,element,value,ele,bd,default,value,type,else,error,entry,element,must,specify,a,value,entry,ele,map,put,key,value,return,map
BeanDefinitionParserDelegate -> public Map<Object, Object> parseMapElement(Element mapEle, BeanDefinition bd);1432135182;Parse a map element.;public Map<Object, Object> parseMapElement(Element mapEle, BeanDefinition bd) {_		String defaultKeyType = mapEle.getAttribute(KEY_TYPE_ATTRIBUTE)__		String defaultValueType = mapEle.getAttribute(VALUE_TYPE_ATTRIBUTE)___		List<Element> entryEles = DomUtils.getChildElementsByTagName(mapEle, ENTRY_ELEMENT)__		ManagedMap<Object, Object> map = new ManagedMap<Object, Object>(entryEles.size())__		map.setSource(extractSource(mapEle))__		map.setKeyTypeName(defaultKeyType)__		map.setValueTypeName(defaultValueType)__		map.setMergeEnabled(parseMergeAttribute(mapEle))___		for (Element entryEle : entryEles) {_			_			_			NodeList entrySubNodes = entryEle.getChildNodes()__			Element keyEle = null__			Element valueEle = null__			for (int j = 0_ j < entrySubNodes.getLength()_ j++) {_				Node node = entrySubNodes.item(j)__				if (node instanceof Element) {_					Element candidateEle = (Element) node__					if (nodeNameEquals(candidateEle, KEY_ELEMENT)) {_						if (keyEle != null) {_							error("<entry> element is only allowed to contain one <key> sub-element", entryEle)__						}_						else {_							keyEle = candidateEle__						}_					}_					else {_						_						if (nodeNameEquals(candidateEle, DESCRIPTION_ELEMENT)) {_							_						}_						else if (valueEle != null) {_							error("<entry> element must not contain more than one value sub-element", entryEle)__						}_						else {_							valueEle = candidateEle__						}_					}_				}_			}__			_			Object key = null__			boolean hasKeyAttribute = entryEle.hasAttribute(KEY_ATTRIBUTE)__			boolean hasKeyRefAttribute = entryEle.hasAttribute(KEY_REF_ATTRIBUTE)__			if ((hasKeyAttribute && hasKeyRefAttribute) ||_					((hasKeyAttribute || hasKeyRefAttribute)) && keyEle != null) {_				error("<entry> element is only allowed to contain either " +_						"a 'key' attribute OR a 'key-ref' attribute OR a <key> sub-element", entryEle)__			}_			if (hasKeyAttribute) {_				key = buildTypedStringValueForMap(entryEle.getAttribute(KEY_ATTRIBUTE), defaultKeyType, entryEle)__			}_			else if (hasKeyRefAttribute) {_				String refName = entryEle.getAttribute(KEY_REF_ATTRIBUTE)__				if (!StringUtils.hasText(refName)) {_					error("<entry> element contains empty 'key-ref' attribute", entryEle)__				}_				RuntimeBeanReference ref = new RuntimeBeanReference(refName)__				ref.setSource(extractSource(entryEle))__				key = ref__			}_			else if (keyEle != null) {_				key = parseKeyElement(keyEle, bd, defaultKeyType)__			}_			else {_				error("<entry> element must specify a key", entryEle)__			}__			_			Object value = null__			boolean hasValueAttribute = entryEle.hasAttribute(VALUE_ATTRIBUTE)__			boolean hasValueRefAttribute = entryEle.hasAttribute(VALUE_REF_ATTRIBUTE)__			boolean hasValueTypeAttribute = entryEle.hasAttribute(VALUE_TYPE_ATTRIBUTE)__			if ((hasValueAttribute && hasValueRefAttribute) ||_					((hasValueAttribute || hasValueRefAttribute)) && valueEle != null) {_				error("<entry> element is only allowed to contain either " +_						"'value' attribute OR 'value-ref' attribute OR <value> sub-element", entryEle)__			}_			if ((hasValueTypeAttribute && hasValueRefAttribute) ||_				(hasValueTypeAttribute && !hasValueAttribute) ||_					(hasValueTypeAttribute && valueEle != null)) {_				error("<entry> element is only allowed to contain a 'value-type' " +_						"attribute when it has a 'value' attribute", entryEle)__			}_			if (hasValueAttribute) {_				String valueType = entryEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__				if (!StringUtils.hasText(valueType)) {_					valueType = defaultValueType__				}_				value = buildTypedStringValueForMap(entryEle.getAttribute(VALUE_ATTRIBUTE), valueType, entryEle)__			}_			else if (hasValueRefAttribute) {_				String refName = entryEle.getAttribute(VALUE_REF_ATTRIBUTE)__				if (!StringUtils.hasText(refName)) {_					error("<entry> element contains empty 'value-ref' attribute", entryEle)__				}_				RuntimeBeanReference ref = new RuntimeBeanReference(refName)__				ref.setSource(extractSource(entryEle))__				value = ref__			}_			else if (valueEle != null) {_				value = parsePropertySubElement(valueEle, bd, defaultValueType)__			}_			else {_				error("<entry> element must specify a value", entryEle)__			}__			_			map.put(key, value)__		}__		return map__	};parse,a,map,element;public,map,object,object,parse,map,element,element,map,ele,bean,definition,bd,string,default,key,type,map,ele,get,attribute,string,default,value,type,map,ele,get,attribute,list,element,entry,eles,dom,utils,get,child,elements,by,tag,name,map,ele,managed,map,object,object,map,new,managed,map,object,object,entry,eles,size,map,set,source,extract,source,map,ele,map,set,key,type,name,default,key,type,map,set,value,type,name,default,value,type,map,set,merge,enabled,parse,merge,attribute,map,ele,for,element,entry,ele,entry,eles,node,list,entry,sub,nodes,entry,ele,get,child,nodes,element,key,ele,null,element,value,ele,null,for,int,j,0,j,entry,sub,nodes,get,length,j,node,node,entry,sub,nodes,item,j,if,node,instanceof,element,element,candidate,ele,element,node,if,node,name,equals,candidate,ele,if,key,ele,null,error,entry,element,is,only,allowed,to,contain,one,key,sub,element,entry,ele,else,key,ele,candidate,ele,else,if,node,name,equals,candidate,ele,else,if,value,ele,null,error,entry,element,must,not,contain,more,than,one,value,sub,element,entry,ele,else,value,ele,candidate,ele,object,key,null,boolean,has,key,attribute,entry,ele,has,attribute,boolean,has,key,ref,attribute,entry,ele,has,attribute,if,has,key,attribute,has,key,ref,attribute,has,key,attribute,has,key,ref,attribute,key,ele,null,error,entry,element,is,only,allowed,to,contain,either,a,key,attribute,or,a,key,ref,attribute,or,a,key,sub,element,entry,ele,if,has,key,attribute,key,build,typed,string,value,for,map,entry,ele,get,attribute,default,key,type,entry,ele,else,if,has,key,ref,attribute,string,ref,name,entry,ele,get,attribute,if,string,utils,has,text,ref,name,error,entry,element,contains,empty,key,ref,attribute,entry,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,entry,ele,key,ref,else,if,key,ele,null,key,parse,key,element,key,ele,bd,default,key,type,else,error,entry,element,must,specify,a,key,entry,ele,object,value,null,boolean,has,value,attribute,entry,ele,has,attribute,boolean,has,value,ref,attribute,entry,ele,has,attribute,boolean,has,value,type,attribute,entry,ele,has,attribute,if,has,value,attribute,has,value,ref,attribute,has,value,attribute,has,value,ref,attribute,value,ele,null,error,entry,element,is,only,allowed,to,contain,either,value,attribute,or,value,ref,attribute,or,value,sub,element,entry,ele,if,has,value,type,attribute,has,value,ref,attribute,has,value,type,attribute,has,value,attribute,has,value,type,attribute,value,ele,null,error,entry,element,is,only,allowed,to,contain,a,value,type,attribute,when,it,has,a,value,attribute,entry,ele,if,has,value,attribute,string,value,type,entry,ele,get,attribute,if,string,utils,has,text,value,type,value,type,default,value,type,value,build,typed,string,value,for,map,entry,ele,get,attribute,value,type,entry,ele,else,if,has,value,ref,attribute,string,ref,name,entry,ele,get,attribute,if,string,utils,has,text,ref,name,error,entry,element,contains,empty,value,ref,attribute,entry,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,entry,ele,value,ref,else,if,value,ele,null,value,parse,property,sub,element,value,ele,bd,default,value,type,else,error,entry,element,must,specify,a,value,entry,ele,map,put,key,value,return,map
BeanDefinitionParserDelegate -> public Map<Object, Object> parseMapElement(Element mapEle, BeanDefinition bd);1447323728;Parse a map element.;public Map<Object, Object> parseMapElement(Element mapEle, BeanDefinition bd) {_		String defaultKeyType = mapEle.getAttribute(KEY_TYPE_ATTRIBUTE)__		String defaultValueType = mapEle.getAttribute(VALUE_TYPE_ATTRIBUTE)___		List<Element> entryEles = DomUtils.getChildElementsByTagName(mapEle, ENTRY_ELEMENT)__		ManagedMap<Object, Object> map = new ManagedMap<Object, Object>(entryEles.size())__		map.setSource(extractSource(mapEle))__		map.setKeyTypeName(defaultKeyType)__		map.setValueTypeName(defaultValueType)__		map.setMergeEnabled(parseMergeAttribute(mapEle))___		for (Element entryEle : entryEles) {_			_			_			NodeList entrySubNodes = entryEle.getChildNodes()__			Element keyEle = null__			Element valueEle = null__			for (int j = 0_ j < entrySubNodes.getLength()_ j++) {_				Node node = entrySubNodes.item(j)__				if (node instanceof Element) {_					Element candidateEle = (Element) node__					if (nodeNameEquals(candidateEle, KEY_ELEMENT)) {_						if (keyEle != null) {_							error("<entry> element is only allowed to contain one <key> sub-element", entryEle)__						}_						else {_							keyEle = candidateEle__						}_					}_					else {_						_						if (nodeNameEquals(candidateEle, DESCRIPTION_ELEMENT)) {_							_						}_						else if (valueEle != null) {_							error("<entry> element must not contain more than one value sub-element", entryEle)__						}_						else {_							valueEle = candidateEle__						}_					}_				}_			}__			_			Object key = null__			boolean hasKeyAttribute = entryEle.hasAttribute(KEY_ATTRIBUTE)__			boolean hasKeyRefAttribute = entryEle.hasAttribute(KEY_REF_ATTRIBUTE)__			if ((hasKeyAttribute && hasKeyRefAttribute) ||_					((hasKeyAttribute || hasKeyRefAttribute)) && keyEle != null) {_				error("<entry> element is only allowed to contain either " +_						"a 'key' attribute OR a 'key-ref' attribute OR a <key> sub-element", entryEle)__			}_			if (hasKeyAttribute) {_				key = buildTypedStringValueForMap(entryEle.getAttribute(KEY_ATTRIBUTE), defaultKeyType, entryEle)__			}_			else if (hasKeyRefAttribute) {_				String refName = entryEle.getAttribute(KEY_REF_ATTRIBUTE)__				if (!StringUtils.hasText(refName)) {_					error("<entry> element contains empty 'key-ref' attribute", entryEle)__				}_				RuntimeBeanReference ref = new RuntimeBeanReference(refName)__				ref.setSource(extractSource(entryEle))__				key = ref__			}_			else if (keyEle != null) {_				key = parseKeyElement(keyEle, bd, defaultKeyType)__			}_			else {_				error("<entry> element must specify a key", entryEle)__			}__			_			Object value = null__			boolean hasValueAttribute = entryEle.hasAttribute(VALUE_ATTRIBUTE)__			boolean hasValueRefAttribute = entryEle.hasAttribute(VALUE_REF_ATTRIBUTE)__			boolean hasValueTypeAttribute = entryEle.hasAttribute(VALUE_TYPE_ATTRIBUTE)__			if ((hasValueAttribute && hasValueRefAttribute) ||_					((hasValueAttribute || hasValueRefAttribute)) && valueEle != null) {_				error("<entry> element is only allowed to contain either " +_						"'value' attribute OR 'value-ref' attribute OR <value> sub-element", entryEle)__			}_			if ((hasValueTypeAttribute && hasValueRefAttribute) ||_				(hasValueTypeAttribute && !hasValueAttribute) ||_					(hasValueTypeAttribute && valueEle != null)) {_				error("<entry> element is only allowed to contain a 'value-type' " +_						"attribute when it has a 'value' attribute", entryEle)__			}_			if (hasValueAttribute) {_				String valueType = entryEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__				if (!StringUtils.hasText(valueType)) {_					valueType = defaultValueType__				}_				value = buildTypedStringValueForMap(entryEle.getAttribute(VALUE_ATTRIBUTE), valueType, entryEle)__			}_			else if (hasValueRefAttribute) {_				String refName = entryEle.getAttribute(VALUE_REF_ATTRIBUTE)__				if (!StringUtils.hasText(refName)) {_					error("<entry> element contains empty 'value-ref' attribute", entryEle)__				}_				RuntimeBeanReference ref = new RuntimeBeanReference(refName)__				ref.setSource(extractSource(entryEle))__				value = ref__			}_			else if (valueEle != null) {_				value = parsePropertySubElement(valueEle, bd, defaultValueType)__			}_			else {_				error("<entry> element must specify a value", entryEle)__			}__			_			map.put(key, value)__		}__		return map__	};parse,a,map,element;public,map,object,object,parse,map,element,element,map,ele,bean,definition,bd,string,default,key,type,map,ele,get,attribute,string,default,value,type,map,ele,get,attribute,list,element,entry,eles,dom,utils,get,child,elements,by,tag,name,map,ele,managed,map,object,object,map,new,managed,map,object,object,entry,eles,size,map,set,source,extract,source,map,ele,map,set,key,type,name,default,key,type,map,set,value,type,name,default,value,type,map,set,merge,enabled,parse,merge,attribute,map,ele,for,element,entry,ele,entry,eles,node,list,entry,sub,nodes,entry,ele,get,child,nodes,element,key,ele,null,element,value,ele,null,for,int,j,0,j,entry,sub,nodes,get,length,j,node,node,entry,sub,nodes,item,j,if,node,instanceof,element,element,candidate,ele,element,node,if,node,name,equals,candidate,ele,if,key,ele,null,error,entry,element,is,only,allowed,to,contain,one,key,sub,element,entry,ele,else,key,ele,candidate,ele,else,if,node,name,equals,candidate,ele,else,if,value,ele,null,error,entry,element,must,not,contain,more,than,one,value,sub,element,entry,ele,else,value,ele,candidate,ele,object,key,null,boolean,has,key,attribute,entry,ele,has,attribute,boolean,has,key,ref,attribute,entry,ele,has,attribute,if,has,key,attribute,has,key,ref,attribute,has,key,attribute,has,key,ref,attribute,key,ele,null,error,entry,element,is,only,allowed,to,contain,either,a,key,attribute,or,a,key,ref,attribute,or,a,key,sub,element,entry,ele,if,has,key,attribute,key,build,typed,string,value,for,map,entry,ele,get,attribute,default,key,type,entry,ele,else,if,has,key,ref,attribute,string,ref,name,entry,ele,get,attribute,if,string,utils,has,text,ref,name,error,entry,element,contains,empty,key,ref,attribute,entry,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,entry,ele,key,ref,else,if,key,ele,null,key,parse,key,element,key,ele,bd,default,key,type,else,error,entry,element,must,specify,a,key,entry,ele,object,value,null,boolean,has,value,attribute,entry,ele,has,attribute,boolean,has,value,ref,attribute,entry,ele,has,attribute,boolean,has,value,type,attribute,entry,ele,has,attribute,if,has,value,attribute,has,value,ref,attribute,has,value,attribute,has,value,ref,attribute,value,ele,null,error,entry,element,is,only,allowed,to,contain,either,value,attribute,or,value,ref,attribute,or,value,sub,element,entry,ele,if,has,value,type,attribute,has,value,ref,attribute,has,value,type,attribute,has,value,attribute,has,value,type,attribute,value,ele,null,error,entry,element,is,only,allowed,to,contain,a,value,type,attribute,when,it,has,a,value,attribute,entry,ele,if,has,value,attribute,string,value,type,entry,ele,get,attribute,if,string,utils,has,text,value,type,value,type,default,value,type,value,build,typed,string,value,for,map,entry,ele,get,attribute,value,type,entry,ele,else,if,has,value,ref,attribute,string,ref,name,entry,ele,get,attribute,if,string,utils,has,text,ref,name,error,entry,element,contains,empty,value,ref,attribute,entry,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,entry,ele,value,ref,else,if,value,ele,null,value,parse,property,sub,element,value,ele,bd,default,value,type,else,error,entry,element,must,specify,a,value,entry,ele,map,put,key,value,return,map
BeanDefinitionParserDelegate -> public Map<Object, Object> parseMapElement(Element mapEle, BeanDefinition bd);1467726769;Parse a map element.;public Map<Object, Object> parseMapElement(Element mapEle, BeanDefinition bd) {_		String defaultKeyType = mapEle.getAttribute(KEY_TYPE_ATTRIBUTE)__		String defaultValueType = mapEle.getAttribute(VALUE_TYPE_ATTRIBUTE)___		List<Element> entryEles = DomUtils.getChildElementsByTagName(mapEle, ENTRY_ELEMENT)__		ManagedMap<Object, Object> map = new ManagedMap<Object, Object>(entryEles.size())__		map.setSource(extractSource(mapEle))__		map.setKeyTypeName(defaultKeyType)__		map.setValueTypeName(defaultValueType)__		map.setMergeEnabled(parseMergeAttribute(mapEle))___		for (Element entryEle : entryEles) {_			_			_			NodeList entrySubNodes = entryEle.getChildNodes()__			Element keyEle = null__			Element valueEle = null__			for (int j = 0_ j < entrySubNodes.getLength()_ j++) {_				Node node = entrySubNodes.item(j)__				if (node instanceof Element) {_					Element candidateEle = (Element) node__					if (nodeNameEquals(candidateEle, KEY_ELEMENT)) {_						if (keyEle != null) {_							error("<entry> element is only allowed to contain one <key> sub-element", entryEle)__						}_						else {_							keyEle = candidateEle__						}_					}_					else {_						_						if (nodeNameEquals(candidateEle, DESCRIPTION_ELEMENT)) {_							_						}_						else if (valueEle != null) {_							error("<entry> element must not contain more than one value sub-element", entryEle)__						}_						else {_							valueEle = candidateEle__						}_					}_				}_			}__			_			Object key = null__			boolean hasKeyAttribute = entryEle.hasAttribute(KEY_ATTRIBUTE)__			boolean hasKeyRefAttribute = entryEle.hasAttribute(KEY_REF_ATTRIBUTE)__			if ((hasKeyAttribute && hasKeyRefAttribute) ||_					((hasKeyAttribute || hasKeyRefAttribute)) && keyEle != null) {_				error("<entry> element is only allowed to contain either " +_						"a 'key' attribute OR a 'key-ref' attribute OR a <key> sub-element", entryEle)__			}_			if (hasKeyAttribute) {_				key = buildTypedStringValueForMap(entryEle.getAttribute(KEY_ATTRIBUTE), defaultKeyType, entryEle)__			}_			else if (hasKeyRefAttribute) {_				String refName = entryEle.getAttribute(KEY_REF_ATTRIBUTE)__				if (!StringUtils.hasText(refName)) {_					error("<entry> element contains empty 'key-ref' attribute", entryEle)__				}_				RuntimeBeanReference ref = new RuntimeBeanReference(refName)__				ref.setSource(extractSource(entryEle))__				key = ref__			}_			else if (keyEle != null) {_				key = parseKeyElement(keyEle, bd, defaultKeyType)__			}_			else {_				error("<entry> element must specify a key", entryEle)__			}__			_			Object value = null__			boolean hasValueAttribute = entryEle.hasAttribute(VALUE_ATTRIBUTE)__			boolean hasValueRefAttribute = entryEle.hasAttribute(VALUE_REF_ATTRIBUTE)__			boolean hasValueTypeAttribute = entryEle.hasAttribute(VALUE_TYPE_ATTRIBUTE)__			if ((hasValueAttribute && hasValueRefAttribute) ||_					((hasValueAttribute || hasValueRefAttribute)) && valueEle != null) {_				error("<entry> element is only allowed to contain either " +_						"'value' attribute OR 'value-ref' attribute OR <value> sub-element", entryEle)__			}_			if ((hasValueTypeAttribute && hasValueRefAttribute) ||_				(hasValueTypeAttribute && !hasValueAttribute) ||_					(hasValueTypeAttribute && valueEle != null)) {_				error("<entry> element is only allowed to contain a 'value-type' " +_						"attribute when it has a 'value' attribute", entryEle)__			}_			if (hasValueAttribute) {_				String valueType = entryEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__				if (!StringUtils.hasText(valueType)) {_					valueType = defaultValueType__				}_				value = buildTypedStringValueForMap(entryEle.getAttribute(VALUE_ATTRIBUTE), valueType, entryEle)__			}_			else if (hasValueRefAttribute) {_				String refName = entryEle.getAttribute(VALUE_REF_ATTRIBUTE)__				if (!StringUtils.hasText(refName)) {_					error("<entry> element contains empty 'value-ref' attribute", entryEle)__				}_				RuntimeBeanReference ref = new RuntimeBeanReference(refName)__				ref.setSource(extractSource(entryEle))__				value = ref__			}_			else if (valueEle != null) {_				value = parsePropertySubElement(valueEle, bd, defaultValueType)__			}_			else {_				error("<entry> element must specify a value", entryEle)__			}__			_			map.put(key, value)__		}__		return map__	};parse,a,map,element;public,map,object,object,parse,map,element,element,map,ele,bean,definition,bd,string,default,key,type,map,ele,get,attribute,string,default,value,type,map,ele,get,attribute,list,element,entry,eles,dom,utils,get,child,elements,by,tag,name,map,ele,managed,map,object,object,map,new,managed,map,object,object,entry,eles,size,map,set,source,extract,source,map,ele,map,set,key,type,name,default,key,type,map,set,value,type,name,default,value,type,map,set,merge,enabled,parse,merge,attribute,map,ele,for,element,entry,ele,entry,eles,node,list,entry,sub,nodes,entry,ele,get,child,nodes,element,key,ele,null,element,value,ele,null,for,int,j,0,j,entry,sub,nodes,get,length,j,node,node,entry,sub,nodes,item,j,if,node,instanceof,element,element,candidate,ele,element,node,if,node,name,equals,candidate,ele,if,key,ele,null,error,entry,element,is,only,allowed,to,contain,one,key,sub,element,entry,ele,else,key,ele,candidate,ele,else,if,node,name,equals,candidate,ele,else,if,value,ele,null,error,entry,element,must,not,contain,more,than,one,value,sub,element,entry,ele,else,value,ele,candidate,ele,object,key,null,boolean,has,key,attribute,entry,ele,has,attribute,boolean,has,key,ref,attribute,entry,ele,has,attribute,if,has,key,attribute,has,key,ref,attribute,has,key,attribute,has,key,ref,attribute,key,ele,null,error,entry,element,is,only,allowed,to,contain,either,a,key,attribute,or,a,key,ref,attribute,or,a,key,sub,element,entry,ele,if,has,key,attribute,key,build,typed,string,value,for,map,entry,ele,get,attribute,default,key,type,entry,ele,else,if,has,key,ref,attribute,string,ref,name,entry,ele,get,attribute,if,string,utils,has,text,ref,name,error,entry,element,contains,empty,key,ref,attribute,entry,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,entry,ele,key,ref,else,if,key,ele,null,key,parse,key,element,key,ele,bd,default,key,type,else,error,entry,element,must,specify,a,key,entry,ele,object,value,null,boolean,has,value,attribute,entry,ele,has,attribute,boolean,has,value,ref,attribute,entry,ele,has,attribute,boolean,has,value,type,attribute,entry,ele,has,attribute,if,has,value,attribute,has,value,ref,attribute,has,value,attribute,has,value,ref,attribute,value,ele,null,error,entry,element,is,only,allowed,to,contain,either,value,attribute,or,value,ref,attribute,or,value,sub,element,entry,ele,if,has,value,type,attribute,has,value,ref,attribute,has,value,type,attribute,has,value,attribute,has,value,type,attribute,value,ele,null,error,entry,element,is,only,allowed,to,contain,a,value,type,attribute,when,it,has,a,value,attribute,entry,ele,if,has,value,attribute,string,value,type,entry,ele,get,attribute,if,string,utils,has,text,value,type,value,type,default,value,type,value,build,typed,string,value,for,map,entry,ele,get,attribute,value,type,entry,ele,else,if,has,value,ref,attribute,string,ref,name,entry,ele,get,attribute,if,string,utils,has,text,ref,name,error,entry,element,contains,empty,value,ref,attribute,entry,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,entry,ele,value,ref,else,if,value,ele,null,value,parse,property,sub,element,value,ele,bd,default,value,type,else,error,entry,element,must,specify,a,value,entry,ele,map,put,key,value,return,map
BeanDefinitionParserDelegate -> public Map<Object, Object> parseMapElement(Element mapEle, BeanDefinition bd);1467730834;Parse a map element.;public Map<Object, Object> parseMapElement(Element mapEle, BeanDefinition bd) {_		String defaultKeyType = mapEle.getAttribute(KEY_TYPE_ATTRIBUTE)__		String defaultValueType = mapEle.getAttribute(VALUE_TYPE_ATTRIBUTE)___		List<Element> entryEles = DomUtils.getChildElementsByTagName(mapEle, ENTRY_ELEMENT)__		ManagedMap<Object, Object> map = new ManagedMap<>(entryEles.size())__		map.setSource(extractSource(mapEle))__		map.setKeyTypeName(defaultKeyType)__		map.setValueTypeName(defaultValueType)__		map.setMergeEnabled(parseMergeAttribute(mapEle))___		for (Element entryEle : entryEles) {_			_			_			NodeList entrySubNodes = entryEle.getChildNodes()__			Element keyEle = null__			Element valueEle = null__			for (int j = 0_ j < entrySubNodes.getLength()_ j++) {_				Node node = entrySubNodes.item(j)__				if (node instanceof Element) {_					Element candidateEle = (Element) node__					if (nodeNameEquals(candidateEle, KEY_ELEMENT)) {_						if (keyEle != null) {_							error("<entry> element is only allowed to contain one <key> sub-element", entryEle)__						}_						else {_							keyEle = candidateEle__						}_					}_					else {_						_						if (nodeNameEquals(candidateEle, DESCRIPTION_ELEMENT)) {_							_						}_						else if (valueEle != null) {_							error("<entry> element must not contain more than one value sub-element", entryEle)__						}_						else {_							valueEle = candidateEle__						}_					}_				}_			}__			_			Object key = null__			boolean hasKeyAttribute = entryEle.hasAttribute(KEY_ATTRIBUTE)__			boolean hasKeyRefAttribute = entryEle.hasAttribute(KEY_REF_ATTRIBUTE)__			if ((hasKeyAttribute && hasKeyRefAttribute) ||_					((hasKeyAttribute || hasKeyRefAttribute)) && keyEle != null) {_				error("<entry> element is only allowed to contain either " +_						"a 'key' attribute OR a 'key-ref' attribute OR a <key> sub-element", entryEle)__			}_			if (hasKeyAttribute) {_				key = buildTypedStringValueForMap(entryEle.getAttribute(KEY_ATTRIBUTE), defaultKeyType, entryEle)__			}_			else if (hasKeyRefAttribute) {_				String refName = entryEle.getAttribute(KEY_REF_ATTRIBUTE)__				if (!StringUtils.hasText(refName)) {_					error("<entry> element contains empty 'key-ref' attribute", entryEle)__				}_				RuntimeBeanReference ref = new RuntimeBeanReference(refName)__				ref.setSource(extractSource(entryEle))__				key = ref__			}_			else if (keyEle != null) {_				key = parseKeyElement(keyEle, bd, defaultKeyType)__			}_			else {_				error("<entry> element must specify a key", entryEle)__			}__			_			Object value = null__			boolean hasValueAttribute = entryEle.hasAttribute(VALUE_ATTRIBUTE)__			boolean hasValueRefAttribute = entryEle.hasAttribute(VALUE_REF_ATTRIBUTE)__			boolean hasValueTypeAttribute = entryEle.hasAttribute(VALUE_TYPE_ATTRIBUTE)__			if ((hasValueAttribute && hasValueRefAttribute) ||_					((hasValueAttribute || hasValueRefAttribute)) && valueEle != null) {_				error("<entry> element is only allowed to contain either " +_						"'value' attribute OR 'value-ref' attribute OR <value> sub-element", entryEle)__			}_			if ((hasValueTypeAttribute && hasValueRefAttribute) ||_				(hasValueTypeAttribute && !hasValueAttribute) ||_					(hasValueTypeAttribute && valueEle != null)) {_				error("<entry> element is only allowed to contain a 'value-type' " +_						"attribute when it has a 'value' attribute", entryEle)__			}_			if (hasValueAttribute) {_				String valueType = entryEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__				if (!StringUtils.hasText(valueType)) {_					valueType = defaultValueType__				}_				value = buildTypedStringValueForMap(entryEle.getAttribute(VALUE_ATTRIBUTE), valueType, entryEle)__			}_			else if (hasValueRefAttribute) {_				String refName = entryEle.getAttribute(VALUE_REF_ATTRIBUTE)__				if (!StringUtils.hasText(refName)) {_					error("<entry> element contains empty 'value-ref' attribute", entryEle)__				}_				RuntimeBeanReference ref = new RuntimeBeanReference(refName)__				ref.setSource(extractSource(entryEle))__				value = ref__			}_			else if (valueEle != null) {_				value = parsePropertySubElement(valueEle, bd, defaultValueType)__			}_			else {_				error("<entry> element must specify a value", entryEle)__			}__			_			map.put(key, value)__		}__		return map__	};parse,a,map,element;public,map,object,object,parse,map,element,element,map,ele,bean,definition,bd,string,default,key,type,map,ele,get,attribute,string,default,value,type,map,ele,get,attribute,list,element,entry,eles,dom,utils,get,child,elements,by,tag,name,map,ele,managed,map,object,object,map,new,managed,map,entry,eles,size,map,set,source,extract,source,map,ele,map,set,key,type,name,default,key,type,map,set,value,type,name,default,value,type,map,set,merge,enabled,parse,merge,attribute,map,ele,for,element,entry,ele,entry,eles,node,list,entry,sub,nodes,entry,ele,get,child,nodes,element,key,ele,null,element,value,ele,null,for,int,j,0,j,entry,sub,nodes,get,length,j,node,node,entry,sub,nodes,item,j,if,node,instanceof,element,element,candidate,ele,element,node,if,node,name,equals,candidate,ele,if,key,ele,null,error,entry,element,is,only,allowed,to,contain,one,key,sub,element,entry,ele,else,key,ele,candidate,ele,else,if,node,name,equals,candidate,ele,else,if,value,ele,null,error,entry,element,must,not,contain,more,than,one,value,sub,element,entry,ele,else,value,ele,candidate,ele,object,key,null,boolean,has,key,attribute,entry,ele,has,attribute,boolean,has,key,ref,attribute,entry,ele,has,attribute,if,has,key,attribute,has,key,ref,attribute,has,key,attribute,has,key,ref,attribute,key,ele,null,error,entry,element,is,only,allowed,to,contain,either,a,key,attribute,or,a,key,ref,attribute,or,a,key,sub,element,entry,ele,if,has,key,attribute,key,build,typed,string,value,for,map,entry,ele,get,attribute,default,key,type,entry,ele,else,if,has,key,ref,attribute,string,ref,name,entry,ele,get,attribute,if,string,utils,has,text,ref,name,error,entry,element,contains,empty,key,ref,attribute,entry,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,entry,ele,key,ref,else,if,key,ele,null,key,parse,key,element,key,ele,bd,default,key,type,else,error,entry,element,must,specify,a,key,entry,ele,object,value,null,boolean,has,value,attribute,entry,ele,has,attribute,boolean,has,value,ref,attribute,entry,ele,has,attribute,boolean,has,value,type,attribute,entry,ele,has,attribute,if,has,value,attribute,has,value,ref,attribute,has,value,attribute,has,value,ref,attribute,value,ele,null,error,entry,element,is,only,allowed,to,contain,either,value,attribute,or,value,ref,attribute,or,value,sub,element,entry,ele,if,has,value,type,attribute,has,value,ref,attribute,has,value,type,attribute,has,value,attribute,has,value,type,attribute,value,ele,null,error,entry,element,is,only,allowed,to,contain,a,value,type,attribute,when,it,has,a,value,attribute,entry,ele,if,has,value,attribute,string,value,type,entry,ele,get,attribute,if,string,utils,has,text,value,type,value,type,default,value,type,value,build,typed,string,value,for,map,entry,ele,get,attribute,value,type,entry,ele,else,if,has,value,ref,attribute,string,ref,name,entry,ele,get,attribute,if,string,utils,has,text,ref,name,error,entry,element,contains,empty,value,ref,attribute,entry,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,entry,ele,value,ref,else,if,value,ele,null,value,parse,property,sub,element,value,ele,bd,default,value,type,else,error,entry,element,must,specify,a,value,entry,ele,map,put,key,value,return,map
BeanDefinitionParserDelegate -> public Map<Object, Object> parseMapElement(Element mapEle, BeanDefinition bd);1467744603;Parse a map element.;public Map<Object, Object> parseMapElement(Element mapEle, BeanDefinition bd) {_		String defaultKeyType = mapEle.getAttribute(KEY_TYPE_ATTRIBUTE)__		String defaultValueType = mapEle.getAttribute(VALUE_TYPE_ATTRIBUTE)___		List<Element> entryEles = DomUtils.getChildElementsByTagName(mapEle, ENTRY_ELEMENT)__		ManagedMap<Object, Object> map = new ManagedMap<>(entryEles.size())__		map.setSource(extractSource(mapEle))__		map.setKeyTypeName(defaultKeyType)__		map.setValueTypeName(defaultValueType)__		map.setMergeEnabled(parseMergeAttribute(mapEle))___		for (Element entryEle : entryEles) {_			_			_			NodeList entrySubNodes = entryEle.getChildNodes()__			Element keyEle = null__			Element valueEle = null__			for (int j = 0_ j < entrySubNodes.getLength()_ j++) {_				Node node = entrySubNodes.item(j)__				if (node instanceof Element) {_					Element candidateEle = (Element) node__					if (nodeNameEquals(candidateEle, KEY_ELEMENT)) {_						if (keyEle != null) {_							error("<entry> element is only allowed to contain one <key> sub-element", entryEle)__						}_						else {_							keyEle = candidateEle__						}_					}_					else {_						_						if (nodeNameEquals(candidateEle, DESCRIPTION_ELEMENT)) {_							_						}_						else if (valueEle != null) {_							error("<entry> element must not contain more than one value sub-element", entryEle)__						}_						else {_							valueEle = candidateEle__						}_					}_				}_			}__			_			Object key = null__			boolean hasKeyAttribute = entryEle.hasAttribute(KEY_ATTRIBUTE)__			boolean hasKeyRefAttribute = entryEle.hasAttribute(KEY_REF_ATTRIBUTE)__			if ((hasKeyAttribute && hasKeyRefAttribute) ||_					((hasKeyAttribute || hasKeyRefAttribute)) && keyEle != null) {_				error("<entry> element is only allowed to contain either " +_						"a 'key' attribute OR a 'key-ref' attribute OR a <key> sub-element", entryEle)__			}_			if (hasKeyAttribute) {_				key = buildTypedStringValueForMap(entryEle.getAttribute(KEY_ATTRIBUTE), defaultKeyType, entryEle)__			}_			else if (hasKeyRefAttribute) {_				String refName = entryEle.getAttribute(KEY_REF_ATTRIBUTE)__				if (!StringUtils.hasText(refName)) {_					error("<entry> element contains empty 'key-ref' attribute", entryEle)__				}_				RuntimeBeanReference ref = new RuntimeBeanReference(refName)__				ref.setSource(extractSource(entryEle))__				key = ref__			}_			else if (keyEle != null) {_				key = parseKeyElement(keyEle, bd, defaultKeyType)__			}_			else {_				error("<entry> element must specify a key", entryEle)__			}__			_			Object value = null__			boolean hasValueAttribute = entryEle.hasAttribute(VALUE_ATTRIBUTE)__			boolean hasValueRefAttribute = entryEle.hasAttribute(VALUE_REF_ATTRIBUTE)__			boolean hasValueTypeAttribute = entryEle.hasAttribute(VALUE_TYPE_ATTRIBUTE)__			if ((hasValueAttribute && hasValueRefAttribute) ||_					((hasValueAttribute || hasValueRefAttribute)) && valueEle != null) {_				error("<entry> element is only allowed to contain either " +_						"'value' attribute OR 'value-ref' attribute OR <value> sub-element", entryEle)__			}_			if ((hasValueTypeAttribute && hasValueRefAttribute) ||_				(hasValueTypeAttribute && !hasValueAttribute) ||_					(hasValueTypeAttribute && valueEle != null)) {_				error("<entry> element is only allowed to contain a 'value-type' " +_						"attribute when it has a 'value' attribute", entryEle)__			}_			if (hasValueAttribute) {_				String valueType = entryEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__				if (!StringUtils.hasText(valueType)) {_					valueType = defaultValueType__				}_				value = buildTypedStringValueForMap(entryEle.getAttribute(VALUE_ATTRIBUTE), valueType, entryEle)__			}_			else if (hasValueRefAttribute) {_				String refName = entryEle.getAttribute(VALUE_REF_ATTRIBUTE)__				if (!StringUtils.hasText(refName)) {_					error("<entry> element contains empty 'value-ref' attribute", entryEle)__				}_				RuntimeBeanReference ref = new RuntimeBeanReference(refName)__				ref.setSource(extractSource(entryEle))__				value = ref__			}_			else if (valueEle != null) {_				value = parsePropertySubElement(valueEle, bd, defaultValueType)__			}_			else {_				error("<entry> element must specify a value", entryEle)__			}__			_			map.put(key, value)__		}__		return map__	};parse,a,map,element;public,map,object,object,parse,map,element,element,map,ele,bean,definition,bd,string,default,key,type,map,ele,get,attribute,string,default,value,type,map,ele,get,attribute,list,element,entry,eles,dom,utils,get,child,elements,by,tag,name,map,ele,managed,map,object,object,map,new,managed,map,entry,eles,size,map,set,source,extract,source,map,ele,map,set,key,type,name,default,key,type,map,set,value,type,name,default,value,type,map,set,merge,enabled,parse,merge,attribute,map,ele,for,element,entry,ele,entry,eles,node,list,entry,sub,nodes,entry,ele,get,child,nodes,element,key,ele,null,element,value,ele,null,for,int,j,0,j,entry,sub,nodes,get,length,j,node,node,entry,sub,nodes,item,j,if,node,instanceof,element,element,candidate,ele,element,node,if,node,name,equals,candidate,ele,if,key,ele,null,error,entry,element,is,only,allowed,to,contain,one,key,sub,element,entry,ele,else,key,ele,candidate,ele,else,if,node,name,equals,candidate,ele,else,if,value,ele,null,error,entry,element,must,not,contain,more,than,one,value,sub,element,entry,ele,else,value,ele,candidate,ele,object,key,null,boolean,has,key,attribute,entry,ele,has,attribute,boolean,has,key,ref,attribute,entry,ele,has,attribute,if,has,key,attribute,has,key,ref,attribute,has,key,attribute,has,key,ref,attribute,key,ele,null,error,entry,element,is,only,allowed,to,contain,either,a,key,attribute,or,a,key,ref,attribute,or,a,key,sub,element,entry,ele,if,has,key,attribute,key,build,typed,string,value,for,map,entry,ele,get,attribute,default,key,type,entry,ele,else,if,has,key,ref,attribute,string,ref,name,entry,ele,get,attribute,if,string,utils,has,text,ref,name,error,entry,element,contains,empty,key,ref,attribute,entry,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,entry,ele,key,ref,else,if,key,ele,null,key,parse,key,element,key,ele,bd,default,key,type,else,error,entry,element,must,specify,a,key,entry,ele,object,value,null,boolean,has,value,attribute,entry,ele,has,attribute,boolean,has,value,ref,attribute,entry,ele,has,attribute,boolean,has,value,type,attribute,entry,ele,has,attribute,if,has,value,attribute,has,value,ref,attribute,has,value,attribute,has,value,ref,attribute,value,ele,null,error,entry,element,is,only,allowed,to,contain,either,value,attribute,or,value,ref,attribute,or,value,sub,element,entry,ele,if,has,value,type,attribute,has,value,ref,attribute,has,value,type,attribute,has,value,attribute,has,value,type,attribute,value,ele,null,error,entry,element,is,only,allowed,to,contain,a,value,type,attribute,when,it,has,a,value,attribute,entry,ele,if,has,value,attribute,string,value,type,entry,ele,get,attribute,if,string,utils,has,text,value,type,value,type,default,value,type,value,build,typed,string,value,for,map,entry,ele,get,attribute,value,type,entry,ele,else,if,has,value,ref,attribute,string,ref,name,entry,ele,get,attribute,if,string,utils,has,text,ref,name,error,entry,element,contains,empty,value,ref,attribute,entry,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,entry,ele,value,ref,else,if,value,ele,null,value,parse,property,sub,element,value,ele,bd,default,value,type,else,error,entry,element,must,specify,a,value,entry,ele,map,put,key,value,return,map
BeanDefinitionParserDelegate -> public Map<Object, Object> parseMapElement(Element mapEle, BeanDefinition bd);1487245676;Parse a map element.;public Map<Object, Object> parseMapElement(Element mapEle, BeanDefinition bd) {_		String defaultKeyType = mapEle.getAttribute(KEY_TYPE_ATTRIBUTE)__		String defaultValueType = mapEle.getAttribute(VALUE_TYPE_ATTRIBUTE)___		List<Element> entryEles = DomUtils.getChildElementsByTagName(mapEle, ENTRY_ELEMENT)__		ManagedMap<Object, Object> map = new ManagedMap<>(entryEles.size())__		map.setSource(extractSource(mapEle))__		map.setKeyTypeName(defaultKeyType)__		map.setValueTypeName(defaultValueType)__		map.setMergeEnabled(parseMergeAttribute(mapEle))___		for (Element entryEle : entryEles) {_			_			_			NodeList entrySubNodes = entryEle.getChildNodes()__			Element keyEle = null__			Element valueEle = null__			for (int j = 0_ j < entrySubNodes.getLength()_ j++) {_				Node node = entrySubNodes.item(j)__				if (node instanceof Element) {_					Element candidateEle = (Element) node__					if (nodeNameEquals(candidateEle, KEY_ELEMENT)) {_						if (keyEle != null) {_							error("<entry> element is only allowed to contain one <key> sub-element", entryEle)__						}_						else {_							keyEle = candidateEle__						}_					}_					else {_						_						if (nodeNameEquals(candidateEle, DESCRIPTION_ELEMENT)) {_							_						}_						else if (valueEle != null) {_							error("<entry> element must not contain more than one value sub-element", entryEle)__						}_						else {_							valueEle = candidateEle__						}_					}_				}_			}__			_			Object key = null__			boolean hasKeyAttribute = entryEle.hasAttribute(KEY_ATTRIBUTE)__			boolean hasKeyRefAttribute = entryEle.hasAttribute(KEY_REF_ATTRIBUTE)__			if ((hasKeyAttribute && hasKeyRefAttribute) ||_					((hasKeyAttribute || hasKeyRefAttribute)) && keyEle != null) {_				error("<entry> element is only allowed to contain either " +_						"a 'key' attribute OR a 'key-ref' attribute OR a <key> sub-element", entryEle)__			}_			if (hasKeyAttribute) {_				key = buildTypedStringValueForMap(entryEle.getAttribute(KEY_ATTRIBUTE), defaultKeyType, entryEle)__			}_			else if (hasKeyRefAttribute) {_				String refName = entryEle.getAttribute(KEY_REF_ATTRIBUTE)__				if (!StringUtils.hasText(refName)) {_					error("<entry> element contains empty 'key-ref' attribute", entryEle)__				}_				RuntimeBeanReference ref = new RuntimeBeanReference(refName)__				ref.setSource(extractSource(entryEle))__				key = ref__			}_			else if (keyEle != null) {_				key = parseKeyElement(keyEle, bd, defaultKeyType)__			}_			else {_				error("<entry> element must specify a key", entryEle)__			}__			_			Object value = null__			boolean hasValueAttribute = entryEle.hasAttribute(VALUE_ATTRIBUTE)__			boolean hasValueRefAttribute = entryEle.hasAttribute(VALUE_REF_ATTRIBUTE)__			boolean hasValueTypeAttribute = entryEle.hasAttribute(VALUE_TYPE_ATTRIBUTE)__			if ((hasValueAttribute && hasValueRefAttribute) ||_					((hasValueAttribute || hasValueRefAttribute)) && valueEle != null) {_				error("<entry> element is only allowed to contain either " +_						"'value' attribute OR 'value-ref' attribute OR <value> sub-element", entryEle)__			}_			if ((hasValueTypeAttribute && hasValueRefAttribute) ||_				(hasValueTypeAttribute && !hasValueAttribute) ||_					(hasValueTypeAttribute && valueEle != null)) {_				error("<entry> element is only allowed to contain a 'value-type' " +_						"attribute when it has a 'value' attribute", entryEle)__			}_			if (hasValueAttribute) {_				String valueType = entryEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__				if (!StringUtils.hasText(valueType)) {_					valueType = defaultValueType__				}_				value = buildTypedStringValueForMap(entryEle.getAttribute(VALUE_ATTRIBUTE), valueType, entryEle)__			}_			else if (hasValueRefAttribute) {_				String refName = entryEle.getAttribute(VALUE_REF_ATTRIBUTE)__				if (!StringUtils.hasText(refName)) {_					error("<entry> element contains empty 'value-ref' attribute", entryEle)__				}_				RuntimeBeanReference ref = new RuntimeBeanReference(refName)__				ref.setSource(extractSource(entryEle))__				value = ref__			}_			else if (valueEle != null) {_				value = parsePropertySubElement(valueEle, bd, defaultValueType)__			}_			else {_				error("<entry> element must specify a value", entryEle)__			}__			_			map.put(key, value)__		}__		return map__	};parse,a,map,element;public,map,object,object,parse,map,element,element,map,ele,bean,definition,bd,string,default,key,type,map,ele,get,attribute,string,default,value,type,map,ele,get,attribute,list,element,entry,eles,dom,utils,get,child,elements,by,tag,name,map,ele,managed,map,object,object,map,new,managed,map,entry,eles,size,map,set,source,extract,source,map,ele,map,set,key,type,name,default,key,type,map,set,value,type,name,default,value,type,map,set,merge,enabled,parse,merge,attribute,map,ele,for,element,entry,ele,entry,eles,node,list,entry,sub,nodes,entry,ele,get,child,nodes,element,key,ele,null,element,value,ele,null,for,int,j,0,j,entry,sub,nodes,get,length,j,node,node,entry,sub,nodes,item,j,if,node,instanceof,element,element,candidate,ele,element,node,if,node,name,equals,candidate,ele,if,key,ele,null,error,entry,element,is,only,allowed,to,contain,one,key,sub,element,entry,ele,else,key,ele,candidate,ele,else,if,node,name,equals,candidate,ele,else,if,value,ele,null,error,entry,element,must,not,contain,more,than,one,value,sub,element,entry,ele,else,value,ele,candidate,ele,object,key,null,boolean,has,key,attribute,entry,ele,has,attribute,boolean,has,key,ref,attribute,entry,ele,has,attribute,if,has,key,attribute,has,key,ref,attribute,has,key,attribute,has,key,ref,attribute,key,ele,null,error,entry,element,is,only,allowed,to,contain,either,a,key,attribute,or,a,key,ref,attribute,or,a,key,sub,element,entry,ele,if,has,key,attribute,key,build,typed,string,value,for,map,entry,ele,get,attribute,default,key,type,entry,ele,else,if,has,key,ref,attribute,string,ref,name,entry,ele,get,attribute,if,string,utils,has,text,ref,name,error,entry,element,contains,empty,key,ref,attribute,entry,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,entry,ele,key,ref,else,if,key,ele,null,key,parse,key,element,key,ele,bd,default,key,type,else,error,entry,element,must,specify,a,key,entry,ele,object,value,null,boolean,has,value,attribute,entry,ele,has,attribute,boolean,has,value,ref,attribute,entry,ele,has,attribute,boolean,has,value,type,attribute,entry,ele,has,attribute,if,has,value,attribute,has,value,ref,attribute,has,value,attribute,has,value,ref,attribute,value,ele,null,error,entry,element,is,only,allowed,to,contain,either,value,attribute,or,value,ref,attribute,or,value,sub,element,entry,ele,if,has,value,type,attribute,has,value,ref,attribute,has,value,type,attribute,has,value,attribute,has,value,type,attribute,value,ele,null,error,entry,element,is,only,allowed,to,contain,a,value,type,attribute,when,it,has,a,value,attribute,entry,ele,if,has,value,attribute,string,value,type,entry,ele,get,attribute,if,string,utils,has,text,value,type,value,type,default,value,type,value,build,typed,string,value,for,map,entry,ele,get,attribute,value,type,entry,ele,else,if,has,value,ref,attribute,string,ref,name,entry,ele,get,attribute,if,string,utils,has,text,ref,name,error,entry,element,contains,empty,value,ref,attribute,entry,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,entry,ele,value,ref,else,if,value,ele,null,value,parse,property,sub,element,value,ele,bd,default,value,type,else,error,entry,element,must,specify,a,value,entry,ele,map,put,key,value,return,map
BeanDefinitionParserDelegate -> public Map<Object, Object> parseMapElement(Element mapEle, BeanDefinition bd);1487255851;Parse a map element.;public Map<Object, Object> parseMapElement(Element mapEle, BeanDefinition bd) {_		String defaultKeyType = mapEle.getAttribute(KEY_TYPE_ATTRIBUTE)__		String defaultValueType = mapEle.getAttribute(VALUE_TYPE_ATTRIBUTE)___		List<Element> entryEles = DomUtils.getChildElementsByTagName(mapEle, ENTRY_ELEMENT)__		ManagedMap<Object, Object> map = new ManagedMap<>(entryEles.size())__		map.setSource(extractSource(mapEle))__		map.setKeyTypeName(defaultKeyType)__		map.setValueTypeName(defaultValueType)__		map.setMergeEnabled(parseMergeAttribute(mapEle))___		for (Element entryEle : entryEles) {_			_			_			NodeList entrySubNodes = entryEle.getChildNodes()__			Element keyEle = null__			Element valueEle = null__			for (int j = 0_ j < entrySubNodes.getLength()_ j++) {_				Node node = entrySubNodes.item(j)__				if (node instanceof Element) {_					Element candidateEle = (Element) node__					if (nodeNameEquals(candidateEle, KEY_ELEMENT)) {_						if (keyEle != null) {_							error("<entry> element is only allowed to contain one <key> sub-element", entryEle)__						}_						else {_							keyEle = candidateEle__						}_					}_					else {_						_						if (nodeNameEquals(candidateEle, DESCRIPTION_ELEMENT)) {_							_						}_						else if (valueEle != null) {_							error("<entry> element must not contain more than one value sub-element", entryEle)__						}_						else {_							valueEle = candidateEle__						}_					}_				}_			}__			_			Object key = null__			boolean hasKeyAttribute = entryEle.hasAttribute(KEY_ATTRIBUTE)__			boolean hasKeyRefAttribute = entryEle.hasAttribute(KEY_REF_ATTRIBUTE)__			if ((hasKeyAttribute && hasKeyRefAttribute) ||_					((hasKeyAttribute || hasKeyRefAttribute)) && keyEle != null) {_				error("<entry> element is only allowed to contain either " +_						"a 'key' attribute OR a 'key-ref' attribute OR a <key> sub-element", entryEle)__			}_			if (hasKeyAttribute) {_				key = buildTypedStringValueForMap(entryEle.getAttribute(KEY_ATTRIBUTE), defaultKeyType, entryEle)__			}_			else if (hasKeyRefAttribute) {_				String refName = entryEle.getAttribute(KEY_REF_ATTRIBUTE)__				if (!StringUtils.hasText(refName)) {_					error("<entry> element contains empty 'key-ref' attribute", entryEle)__				}_				RuntimeBeanReference ref = new RuntimeBeanReference(refName)__				ref.setSource(extractSource(entryEle))__				key = ref__			}_			else if (keyEle != null) {_				key = parseKeyElement(keyEle, bd, defaultKeyType)__			}_			else {_				error("<entry> element must specify a key", entryEle)__			}__			_			Object value = null__			boolean hasValueAttribute = entryEle.hasAttribute(VALUE_ATTRIBUTE)__			boolean hasValueRefAttribute = entryEle.hasAttribute(VALUE_REF_ATTRIBUTE)__			boolean hasValueTypeAttribute = entryEle.hasAttribute(VALUE_TYPE_ATTRIBUTE)__			if ((hasValueAttribute && hasValueRefAttribute) ||_					((hasValueAttribute || hasValueRefAttribute)) && valueEle != null) {_				error("<entry> element is only allowed to contain either " +_						"'value' attribute OR 'value-ref' attribute OR <value> sub-element", entryEle)__			}_			if ((hasValueTypeAttribute && hasValueRefAttribute) ||_				(hasValueTypeAttribute && !hasValueAttribute) ||_					(hasValueTypeAttribute && valueEle != null)) {_				error("<entry> element is only allowed to contain a 'value-type' " +_						"attribute when it has a 'value' attribute", entryEle)__			}_			if (hasValueAttribute) {_				String valueType = entryEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__				if (!StringUtils.hasText(valueType)) {_					valueType = defaultValueType__				}_				value = buildTypedStringValueForMap(entryEle.getAttribute(VALUE_ATTRIBUTE), valueType, entryEle)__			}_			else if (hasValueRefAttribute) {_				String refName = entryEle.getAttribute(VALUE_REF_ATTRIBUTE)__				if (!StringUtils.hasText(refName)) {_					error("<entry> element contains empty 'value-ref' attribute", entryEle)__				}_				RuntimeBeanReference ref = new RuntimeBeanReference(refName)__				ref.setSource(extractSource(entryEle))__				value = ref__			}_			else if (valueEle != null) {_				value = parsePropertySubElement(valueEle, bd, defaultValueType)__			}_			else {_				error("<entry> element must specify a value", entryEle)__			}__			_			map.put(key, value)__		}__		return map__	};parse,a,map,element;public,map,object,object,parse,map,element,element,map,ele,bean,definition,bd,string,default,key,type,map,ele,get,attribute,string,default,value,type,map,ele,get,attribute,list,element,entry,eles,dom,utils,get,child,elements,by,tag,name,map,ele,managed,map,object,object,map,new,managed,map,entry,eles,size,map,set,source,extract,source,map,ele,map,set,key,type,name,default,key,type,map,set,value,type,name,default,value,type,map,set,merge,enabled,parse,merge,attribute,map,ele,for,element,entry,ele,entry,eles,node,list,entry,sub,nodes,entry,ele,get,child,nodes,element,key,ele,null,element,value,ele,null,for,int,j,0,j,entry,sub,nodes,get,length,j,node,node,entry,sub,nodes,item,j,if,node,instanceof,element,element,candidate,ele,element,node,if,node,name,equals,candidate,ele,if,key,ele,null,error,entry,element,is,only,allowed,to,contain,one,key,sub,element,entry,ele,else,key,ele,candidate,ele,else,if,node,name,equals,candidate,ele,else,if,value,ele,null,error,entry,element,must,not,contain,more,than,one,value,sub,element,entry,ele,else,value,ele,candidate,ele,object,key,null,boolean,has,key,attribute,entry,ele,has,attribute,boolean,has,key,ref,attribute,entry,ele,has,attribute,if,has,key,attribute,has,key,ref,attribute,has,key,attribute,has,key,ref,attribute,key,ele,null,error,entry,element,is,only,allowed,to,contain,either,a,key,attribute,or,a,key,ref,attribute,or,a,key,sub,element,entry,ele,if,has,key,attribute,key,build,typed,string,value,for,map,entry,ele,get,attribute,default,key,type,entry,ele,else,if,has,key,ref,attribute,string,ref,name,entry,ele,get,attribute,if,string,utils,has,text,ref,name,error,entry,element,contains,empty,key,ref,attribute,entry,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,entry,ele,key,ref,else,if,key,ele,null,key,parse,key,element,key,ele,bd,default,key,type,else,error,entry,element,must,specify,a,key,entry,ele,object,value,null,boolean,has,value,attribute,entry,ele,has,attribute,boolean,has,value,ref,attribute,entry,ele,has,attribute,boolean,has,value,type,attribute,entry,ele,has,attribute,if,has,value,attribute,has,value,ref,attribute,has,value,attribute,has,value,ref,attribute,value,ele,null,error,entry,element,is,only,allowed,to,contain,either,value,attribute,or,value,ref,attribute,or,value,sub,element,entry,ele,if,has,value,type,attribute,has,value,ref,attribute,has,value,type,attribute,has,value,attribute,has,value,type,attribute,value,ele,null,error,entry,element,is,only,allowed,to,contain,a,value,type,attribute,when,it,has,a,value,attribute,entry,ele,if,has,value,attribute,string,value,type,entry,ele,get,attribute,if,string,utils,has,text,value,type,value,type,default,value,type,value,build,typed,string,value,for,map,entry,ele,get,attribute,value,type,entry,ele,else,if,has,value,ref,attribute,string,ref,name,entry,ele,get,attribute,if,string,utils,has,text,ref,name,error,entry,element,contains,empty,value,ref,attribute,entry,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,entry,ele,value,ref,else,if,value,ele,null,value,parse,property,sub,element,value,ele,bd,default,value,type,else,error,entry,element,must,specify,a,value,entry,ele,map,put,key,value,return,map
BeanDefinitionParserDelegate -> public Map<Object, Object> parseMapElement(Element mapEle, BeanDefinition bd);1494586217;Parse a map element.;public Map<Object, Object> parseMapElement(Element mapEle, BeanDefinition bd) {_		String defaultKeyType = mapEle.getAttribute(KEY_TYPE_ATTRIBUTE)__		String defaultValueType = mapEle.getAttribute(VALUE_TYPE_ATTRIBUTE)___		List<Element> entryEles = DomUtils.getChildElementsByTagName(mapEle, ENTRY_ELEMENT)__		ManagedMap<Object, Object> map = new ManagedMap<>(entryEles.size())__		map.setSource(extractSource(mapEle))__		map.setKeyTypeName(defaultKeyType)__		map.setValueTypeName(defaultValueType)__		map.setMergeEnabled(parseMergeAttribute(mapEle))___		for (Element entryEle : entryEles) {_			_			_			NodeList entrySubNodes = entryEle.getChildNodes()__			Element keyEle = null__			Element valueEle = null__			for (int j = 0_ j < entrySubNodes.getLength()_ j++) {_				Node node = entrySubNodes.item(j)__				if (node instanceof Element) {_					Element candidateEle = (Element) node__					if (nodeNameEquals(candidateEle, KEY_ELEMENT)) {_						if (keyEle != null) {_							error("<entry> element is only allowed to contain one <key> sub-element", entryEle)__						}_						else {_							keyEle = candidateEle__						}_					}_					else {_						_						if (nodeNameEquals(candidateEle, DESCRIPTION_ELEMENT)) {_							_						}_						else if (valueEle != null) {_							error("<entry> element must not contain more than one value sub-element", entryEle)__						}_						else {_							valueEle = candidateEle__						}_					}_				}_			}__			_			Object key = null__			boolean hasKeyAttribute = entryEle.hasAttribute(KEY_ATTRIBUTE)__			boolean hasKeyRefAttribute = entryEle.hasAttribute(KEY_REF_ATTRIBUTE)__			if ((hasKeyAttribute && hasKeyRefAttribute) ||_					((hasKeyAttribute || hasKeyRefAttribute)) && keyEle != null) {_				error("<entry> element is only allowed to contain either " +_						"a 'key' attribute OR a 'key-ref' attribute OR a <key> sub-element", entryEle)__			}_			if (hasKeyAttribute) {_				key = buildTypedStringValueForMap(entryEle.getAttribute(KEY_ATTRIBUTE), defaultKeyType, entryEle)__			}_			else if (hasKeyRefAttribute) {_				String refName = entryEle.getAttribute(KEY_REF_ATTRIBUTE)__				if (!StringUtils.hasText(refName)) {_					error("<entry> element contains empty 'key-ref' attribute", entryEle)__				}_				RuntimeBeanReference ref = new RuntimeBeanReference(refName)__				ref.setSource(extractSource(entryEle))__				key = ref__			}_			else if (keyEle != null) {_				key = parseKeyElement(keyEle, bd, defaultKeyType)__			}_			else {_				error("<entry> element must specify a key", entryEle)__			}__			_			Object value = null__			boolean hasValueAttribute = entryEle.hasAttribute(VALUE_ATTRIBUTE)__			boolean hasValueRefAttribute = entryEle.hasAttribute(VALUE_REF_ATTRIBUTE)__			boolean hasValueTypeAttribute = entryEle.hasAttribute(VALUE_TYPE_ATTRIBUTE)__			if ((hasValueAttribute && hasValueRefAttribute) ||_					((hasValueAttribute || hasValueRefAttribute)) && valueEle != null) {_				error("<entry> element is only allowed to contain either " +_						"'value' attribute OR 'value-ref' attribute OR <value> sub-element", entryEle)__			}_			if ((hasValueTypeAttribute && hasValueRefAttribute) ||_				(hasValueTypeAttribute && !hasValueAttribute) ||_					(hasValueTypeAttribute && valueEle != null)) {_				error("<entry> element is only allowed to contain a 'value-type' " +_						"attribute when it has a 'value' attribute", entryEle)__			}_			if (hasValueAttribute) {_				String valueType = entryEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__				if (!StringUtils.hasText(valueType)) {_					valueType = defaultValueType__				}_				value = buildTypedStringValueForMap(entryEle.getAttribute(VALUE_ATTRIBUTE), valueType, entryEle)__			}_			else if (hasValueRefAttribute) {_				String refName = entryEle.getAttribute(VALUE_REF_ATTRIBUTE)__				if (!StringUtils.hasText(refName)) {_					error("<entry> element contains empty 'value-ref' attribute", entryEle)__				}_				RuntimeBeanReference ref = new RuntimeBeanReference(refName)__				ref.setSource(extractSource(entryEle))__				value = ref__			}_			else if (valueEle != null) {_				value = parsePropertySubElement(valueEle, bd, defaultValueType)__			}_			else {_				error("<entry> element must specify a value", entryEle)__			}__			_			map.put(key, value)__		}__		return map__	};parse,a,map,element;public,map,object,object,parse,map,element,element,map,ele,bean,definition,bd,string,default,key,type,map,ele,get,attribute,string,default,value,type,map,ele,get,attribute,list,element,entry,eles,dom,utils,get,child,elements,by,tag,name,map,ele,managed,map,object,object,map,new,managed,map,entry,eles,size,map,set,source,extract,source,map,ele,map,set,key,type,name,default,key,type,map,set,value,type,name,default,value,type,map,set,merge,enabled,parse,merge,attribute,map,ele,for,element,entry,ele,entry,eles,node,list,entry,sub,nodes,entry,ele,get,child,nodes,element,key,ele,null,element,value,ele,null,for,int,j,0,j,entry,sub,nodes,get,length,j,node,node,entry,sub,nodes,item,j,if,node,instanceof,element,element,candidate,ele,element,node,if,node,name,equals,candidate,ele,if,key,ele,null,error,entry,element,is,only,allowed,to,contain,one,key,sub,element,entry,ele,else,key,ele,candidate,ele,else,if,node,name,equals,candidate,ele,else,if,value,ele,null,error,entry,element,must,not,contain,more,than,one,value,sub,element,entry,ele,else,value,ele,candidate,ele,object,key,null,boolean,has,key,attribute,entry,ele,has,attribute,boolean,has,key,ref,attribute,entry,ele,has,attribute,if,has,key,attribute,has,key,ref,attribute,has,key,attribute,has,key,ref,attribute,key,ele,null,error,entry,element,is,only,allowed,to,contain,either,a,key,attribute,or,a,key,ref,attribute,or,a,key,sub,element,entry,ele,if,has,key,attribute,key,build,typed,string,value,for,map,entry,ele,get,attribute,default,key,type,entry,ele,else,if,has,key,ref,attribute,string,ref,name,entry,ele,get,attribute,if,string,utils,has,text,ref,name,error,entry,element,contains,empty,key,ref,attribute,entry,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,entry,ele,key,ref,else,if,key,ele,null,key,parse,key,element,key,ele,bd,default,key,type,else,error,entry,element,must,specify,a,key,entry,ele,object,value,null,boolean,has,value,attribute,entry,ele,has,attribute,boolean,has,value,ref,attribute,entry,ele,has,attribute,boolean,has,value,type,attribute,entry,ele,has,attribute,if,has,value,attribute,has,value,ref,attribute,has,value,attribute,has,value,ref,attribute,value,ele,null,error,entry,element,is,only,allowed,to,contain,either,value,attribute,or,value,ref,attribute,or,value,sub,element,entry,ele,if,has,value,type,attribute,has,value,ref,attribute,has,value,type,attribute,has,value,attribute,has,value,type,attribute,value,ele,null,error,entry,element,is,only,allowed,to,contain,a,value,type,attribute,when,it,has,a,value,attribute,entry,ele,if,has,value,attribute,string,value,type,entry,ele,get,attribute,if,string,utils,has,text,value,type,value,type,default,value,type,value,build,typed,string,value,for,map,entry,ele,get,attribute,value,type,entry,ele,else,if,has,value,ref,attribute,string,ref,name,entry,ele,get,attribute,if,string,utils,has,text,ref,name,error,entry,element,contains,empty,value,ref,attribute,entry,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,entry,ele,value,ref,else,if,value,ele,null,value,parse,property,sub,element,value,ele,bd,default,value,type,else,error,entry,element,must,specify,a,value,entry,ele,map,put,key,value,return,map
BeanDefinitionParserDelegate -> public Map<Object, Object> parseMapElement(Element mapEle, BeanDefinition bd);1495868221;Parse a map element.;public Map<Object, Object> parseMapElement(Element mapEle, BeanDefinition bd) {_		String defaultKeyType = mapEle.getAttribute(KEY_TYPE_ATTRIBUTE)__		String defaultValueType = mapEle.getAttribute(VALUE_TYPE_ATTRIBUTE)___		List<Element> entryEles = DomUtils.getChildElementsByTagName(mapEle, ENTRY_ELEMENT)__		ManagedMap<Object, Object> map = new ManagedMap<>(entryEles.size())__		map.setSource(extractSource(mapEle))__		map.setKeyTypeName(defaultKeyType)__		map.setValueTypeName(defaultValueType)__		map.setMergeEnabled(parseMergeAttribute(mapEle))___		for (Element entryEle : entryEles) {_			_			_			NodeList entrySubNodes = entryEle.getChildNodes()__			Element keyEle = null__			Element valueEle = null__			for (int j = 0_ j < entrySubNodes.getLength()_ j++) {_				Node node = entrySubNodes.item(j)__				if (node instanceof Element) {_					Element candidateEle = (Element) node__					if (nodeNameEquals(candidateEle, KEY_ELEMENT)) {_						if (keyEle != null) {_							error("<entry> element is only allowed to contain one <key> sub-element", entryEle)__						}_						else {_							keyEle = candidateEle__						}_					}_					else {_						_						if (nodeNameEquals(candidateEle, DESCRIPTION_ELEMENT)) {_							_						}_						else if (valueEle != null) {_							error("<entry> element must not contain more than one value sub-element", entryEle)__						}_						else {_							valueEle = candidateEle__						}_					}_				}_			}__			_			Object key = null__			boolean hasKeyAttribute = entryEle.hasAttribute(KEY_ATTRIBUTE)__			boolean hasKeyRefAttribute = entryEle.hasAttribute(KEY_REF_ATTRIBUTE)__			if ((hasKeyAttribute && hasKeyRefAttribute) ||_					((hasKeyAttribute || hasKeyRefAttribute)) && keyEle != null) {_				error("<entry> element is only allowed to contain either " +_						"a 'key' attribute OR a 'key-ref' attribute OR a <key> sub-element", entryEle)__			}_			if (hasKeyAttribute) {_				key = buildTypedStringValueForMap(entryEle.getAttribute(KEY_ATTRIBUTE), defaultKeyType, entryEle)__			}_			else if (hasKeyRefAttribute) {_				String refName = entryEle.getAttribute(KEY_REF_ATTRIBUTE)__				if (!StringUtils.hasText(refName)) {_					error("<entry> element contains empty 'key-ref' attribute", entryEle)__				}_				RuntimeBeanReference ref = new RuntimeBeanReference(refName)__				ref.setSource(extractSource(entryEle))__				key = ref__			}_			else if (keyEle != null) {_				key = parseKeyElement(keyEle, bd, defaultKeyType)__			}_			else {_				error("<entry> element must specify a key", entryEle)__			}__			_			Object value = null__			boolean hasValueAttribute = entryEle.hasAttribute(VALUE_ATTRIBUTE)__			boolean hasValueRefAttribute = entryEle.hasAttribute(VALUE_REF_ATTRIBUTE)__			boolean hasValueTypeAttribute = entryEle.hasAttribute(VALUE_TYPE_ATTRIBUTE)__			if ((hasValueAttribute && hasValueRefAttribute) ||_					((hasValueAttribute || hasValueRefAttribute)) && valueEle != null) {_				error("<entry> element is only allowed to contain either " +_						"'value' attribute OR 'value-ref' attribute OR <value> sub-element", entryEle)__			}_			if ((hasValueTypeAttribute && hasValueRefAttribute) ||_				(hasValueTypeAttribute && !hasValueAttribute) ||_					(hasValueTypeAttribute && valueEle != null)) {_				error("<entry> element is only allowed to contain a 'value-type' " +_						"attribute when it has a 'value' attribute", entryEle)__			}_			if (hasValueAttribute) {_				String valueType = entryEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__				if (!StringUtils.hasText(valueType)) {_					valueType = defaultValueType__				}_				value = buildTypedStringValueForMap(entryEle.getAttribute(VALUE_ATTRIBUTE), valueType, entryEle)__			}_			else if (hasValueRefAttribute) {_				String refName = entryEle.getAttribute(VALUE_REF_ATTRIBUTE)__				if (!StringUtils.hasText(refName)) {_					error("<entry> element contains empty 'value-ref' attribute", entryEle)__				}_				RuntimeBeanReference ref = new RuntimeBeanReference(refName)__				ref.setSource(extractSource(entryEle))__				value = ref__			}_			else if (valueEle != null) {_				value = parsePropertySubElement(valueEle, bd, defaultValueType)__			}_			else {_				error("<entry> element must specify a value", entryEle)__			}__			_			map.put(key, value)__		}__		return map__	};parse,a,map,element;public,map,object,object,parse,map,element,element,map,ele,bean,definition,bd,string,default,key,type,map,ele,get,attribute,string,default,value,type,map,ele,get,attribute,list,element,entry,eles,dom,utils,get,child,elements,by,tag,name,map,ele,managed,map,object,object,map,new,managed,map,entry,eles,size,map,set,source,extract,source,map,ele,map,set,key,type,name,default,key,type,map,set,value,type,name,default,value,type,map,set,merge,enabled,parse,merge,attribute,map,ele,for,element,entry,ele,entry,eles,node,list,entry,sub,nodes,entry,ele,get,child,nodes,element,key,ele,null,element,value,ele,null,for,int,j,0,j,entry,sub,nodes,get,length,j,node,node,entry,sub,nodes,item,j,if,node,instanceof,element,element,candidate,ele,element,node,if,node,name,equals,candidate,ele,if,key,ele,null,error,entry,element,is,only,allowed,to,contain,one,key,sub,element,entry,ele,else,key,ele,candidate,ele,else,if,node,name,equals,candidate,ele,else,if,value,ele,null,error,entry,element,must,not,contain,more,than,one,value,sub,element,entry,ele,else,value,ele,candidate,ele,object,key,null,boolean,has,key,attribute,entry,ele,has,attribute,boolean,has,key,ref,attribute,entry,ele,has,attribute,if,has,key,attribute,has,key,ref,attribute,has,key,attribute,has,key,ref,attribute,key,ele,null,error,entry,element,is,only,allowed,to,contain,either,a,key,attribute,or,a,key,ref,attribute,or,a,key,sub,element,entry,ele,if,has,key,attribute,key,build,typed,string,value,for,map,entry,ele,get,attribute,default,key,type,entry,ele,else,if,has,key,ref,attribute,string,ref,name,entry,ele,get,attribute,if,string,utils,has,text,ref,name,error,entry,element,contains,empty,key,ref,attribute,entry,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,entry,ele,key,ref,else,if,key,ele,null,key,parse,key,element,key,ele,bd,default,key,type,else,error,entry,element,must,specify,a,key,entry,ele,object,value,null,boolean,has,value,attribute,entry,ele,has,attribute,boolean,has,value,ref,attribute,entry,ele,has,attribute,boolean,has,value,type,attribute,entry,ele,has,attribute,if,has,value,attribute,has,value,ref,attribute,has,value,attribute,has,value,ref,attribute,value,ele,null,error,entry,element,is,only,allowed,to,contain,either,value,attribute,or,value,ref,attribute,or,value,sub,element,entry,ele,if,has,value,type,attribute,has,value,ref,attribute,has,value,type,attribute,has,value,attribute,has,value,type,attribute,value,ele,null,error,entry,element,is,only,allowed,to,contain,a,value,type,attribute,when,it,has,a,value,attribute,entry,ele,if,has,value,attribute,string,value,type,entry,ele,get,attribute,if,string,utils,has,text,value,type,value,type,default,value,type,value,build,typed,string,value,for,map,entry,ele,get,attribute,value,type,entry,ele,else,if,has,value,ref,attribute,string,ref,name,entry,ele,get,attribute,if,string,utils,has,text,ref,name,error,entry,element,contains,empty,value,ref,attribute,entry,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,entry,ele,value,ref,else,if,value,ele,null,value,parse,property,sub,element,value,ele,bd,default,value,type,else,error,entry,element,must,specify,a,value,entry,ele,map,put,key,value,return,map
BeanDefinitionParserDelegate -> public Map<Object, Object> parseMapElement(Element mapEle, BeanDefinition bd);1496259743;Parse a map element.;public Map<Object, Object> parseMapElement(Element mapEle, BeanDefinition bd) {_		String defaultKeyType = mapEle.getAttribute(KEY_TYPE_ATTRIBUTE)__		String defaultValueType = mapEle.getAttribute(VALUE_TYPE_ATTRIBUTE)___		List<Element> entryEles = DomUtils.getChildElementsByTagName(mapEle, ENTRY_ELEMENT)__		ManagedMap<Object, Object> map = new ManagedMap<>(entryEles.size())__		map.setSource(extractSource(mapEle))__		map.setKeyTypeName(defaultKeyType)__		map.setValueTypeName(defaultValueType)__		map.setMergeEnabled(parseMergeAttribute(mapEle))___		for (Element entryEle : entryEles) {_			_			_			NodeList entrySubNodes = entryEle.getChildNodes()__			Element keyEle = null__			Element valueEle = null__			for (int j = 0_ j < entrySubNodes.getLength()_ j++) {_				Node node = entrySubNodes.item(j)__				if (node instanceof Element) {_					Element candidateEle = (Element) node__					if (nodeNameEquals(candidateEle, KEY_ELEMENT)) {_						if (keyEle != null) {_							error("<entry> element is only allowed to contain one <key> sub-element", entryEle)__						}_						else {_							keyEle = candidateEle__						}_					}_					else {_						_						if (nodeNameEquals(candidateEle, DESCRIPTION_ELEMENT)) {_							_						}_						else if (valueEle != null) {_							error("<entry> element must not contain more than one value sub-element", entryEle)__						}_						else {_							valueEle = candidateEle__						}_					}_				}_			}__			_			Object key = null__			boolean hasKeyAttribute = entryEle.hasAttribute(KEY_ATTRIBUTE)__			boolean hasKeyRefAttribute = entryEle.hasAttribute(KEY_REF_ATTRIBUTE)__			if ((hasKeyAttribute && hasKeyRefAttribute) ||_					((hasKeyAttribute || hasKeyRefAttribute)) && keyEle != null) {_				error("<entry> element is only allowed to contain either " +_						"a 'key' attribute OR a 'key-ref' attribute OR a <key> sub-element", entryEle)__			}_			if (hasKeyAttribute) {_				key = buildTypedStringValueForMap(entryEle.getAttribute(KEY_ATTRIBUTE), defaultKeyType, entryEle)__			}_			else if (hasKeyRefAttribute) {_				String refName = entryEle.getAttribute(KEY_REF_ATTRIBUTE)__				if (!StringUtils.hasText(refName)) {_					error("<entry> element contains empty 'key-ref' attribute", entryEle)__				}_				RuntimeBeanReference ref = new RuntimeBeanReference(refName)__				ref.setSource(extractSource(entryEle))__				key = ref__			}_			else if (keyEle != null) {_				key = parseKeyElement(keyEle, bd, defaultKeyType)__			}_			else {_				error("<entry> element must specify a key", entryEle)__			}__			_			Object value = null__			boolean hasValueAttribute = entryEle.hasAttribute(VALUE_ATTRIBUTE)__			boolean hasValueRefAttribute = entryEle.hasAttribute(VALUE_REF_ATTRIBUTE)__			boolean hasValueTypeAttribute = entryEle.hasAttribute(VALUE_TYPE_ATTRIBUTE)__			if ((hasValueAttribute && hasValueRefAttribute) ||_					((hasValueAttribute || hasValueRefAttribute)) && valueEle != null) {_				error("<entry> element is only allowed to contain either " +_						"'value' attribute OR 'value-ref' attribute OR <value> sub-element", entryEle)__			}_			if ((hasValueTypeAttribute && hasValueRefAttribute) ||_				(hasValueTypeAttribute && !hasValueAttribute) ||_					(hasValueTypeAttribute && valueEle != null)) {_				error("<entry> element is only allowed to contain a 'value-type' " +_						"attribute when it has a 'value' attribute", entryEle)__			}_			if (hasValueAttribute) {_				String valueType = entryEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__				if (!StringUtils.hasText(valueType)) {_					valueType = defaultValueType__				}_				value = buildTypedStringValueForMap(entryEle.getAttribute(VALUE_ATTRIBUTE), valueType, entryEle)__			}_			else if (hasValueRefAttribute) {_				String refName = entryEle.getAttribute(VALUE_REF_ATTRIBUTE)__				if (!StringUtils.hasText(refName)) {_					error("<entry> element contains empty 'value-ref' attribute", entryEle)__				}_				RuntimeBeanReference ref = new RuntimeBeanReference(refName)__				ref.setSource(extractSource(entryEle))__				value = ref__			}_			else if (valueEle != null) {_				value = parsePropertySubElement(valueEle, bd, defaultValueType)__			}_			else {_				error("<entry> element must specify a value", entryEle)__			}__			_			map.put(key, value)__		}__		return map__	};parse,a,map,element;public,map,object,object,parse,map,element,element,map,ele,bean,definition,bd,string,default,key,type,map,ele,get,attribute,string,default,value,type,map,ele,get,attribute,list,element,entry,eles,dom,utils,get,child,elements,by,tag,name,map,ele,managed,map,object,object,map,new,managed,map,entry,eles,size,map,set,source,extract,source,map,ele,map,set,key,type,name,default,key,type,map,set,value,type,name,default,value,type,map,set,merge,enabled,parse,merge,attribute,map,ele,for,element,entry,ele,entry,eles,node,list,entry,sub,nodes,entry,ele,get,child,nodes,element,key,ele,null,element,value,ele,null,for,int,j,0,j,entry,sub,nodes,get,length,j,node,node,entry,sub,nodes,item,j,if,node,instanceof,element,element,candidate,ele,element,node,if,node,name,equals,candidate,ele,if,key,ele,null,error,entry,element,is,only,allowed,to,contain,one,key,sub,element,entry,ele,else,key,ele,candidate,ele,else,if,node,name,equals,candidate,ele,else,if,value,ele,null,error,entry,element,must,not,contain,more,than,one,value,sub,element,entry,ele,else,value,ele,candidate,ele,object,key,null,boolean,has,key,attribute,entry,ele,has,attribute,boolean,has,key,ref,attribute,entry,ele,has,attribute,if,has,key,attribute,has,key,ref,attribute,has,key,attribute,has,key,ref,attribute,key,ele,null,error,entry,element,is,only,allowed,to,contain,either,a,key,attribute,or,a,key,ref,attribute,or,a,key,sub,element,entry,ele,if,has,key,attribute,key,build,typed,string,value,for,map,entry,ele,get,attribute,default,key,type,entry,ele,else,if,has,key,ref,attribute,string,ref,name,entry,ele,get,attribute,if,string,utils,has,text,ref,name,error,entry,element,contains,empty,key,ref,attribute,entry,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,entry,ele,key,ref,else,if,key,ele,null,key,parse,key,element,key,ele,bd,default,key,type,else,error,entry,element,must,specify,a,key,entry,ele,object,value,null,boolean,has,value,attribute,entry,ele,has,attribute,boolean,has,value,ref,attribute,entry,ele,has,attribute,boolean,has,value,type,attribute,entry,ele,has,attribute,if,has,value,attribute,has,value,ref,attribute,has,value,attribute,has,value,ref,attribute,value,ele,null,error,entry,element,is,only,allowed,to,contain,either,value,attribute,or,value,ref,attribute,or,value,sub,element,entry,ele,if,has,value,type,attribute,has,value,ref,attribute,has,value,type,attribute,has,value,attribute,has,value,type,attribute,value,ele,null,error,entry,element,is,only,allowed,to,contain,a,value,type,attribute,when,it,has,a,value,attribute,entry,ele,if,has,value,attribute,string,value,type,entry,ele,get,attribute,if,string,utils,has,text,value,type,value,type,default,value,type,value,build,typed,string,value,for,map,entry,ele,get,attribute,value,type,entry,ele,else,if,has,value,ref,attribute,string,ref,name,entry,ele,get,attribute,if,string,utils,has,text,ref,name,error,entry,element,contains,empty,value,ref,attribute,entry,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,entry,ele,value,ref,else,if,value,ele,null,value,parse,property,sub,element,value,ele,bd,default,value,type,else,error,entry,element,must,specify,a,value,entry,ele,map,put,key,value,return,map
BeanDefinitionParserDelegate -> @Nullable 	public AbstractBeanDefinition parseBeanDefinitionElement( 			Element ele, String beanName, BeanDefinition containingBean);1495868221;Parse the bean definition itself, without regard to name or aliases. May return_{@code null} if problems occurred during the parsing of the bean definition.;@Nullable_	public AbstractBeanDefinition parseBeanDefinitionElement(_			Element ele, String beanName, BeanDefinition containingBean) {__		this.parseState.push(new BeanEntry(beanName))___		String className = null__		if (ele.hasAttribute(CLASS_ATTRIBUTE)) {_			className = ele.getAttribute(CLASS_ATTRIBUTE).trim()__		}__		try {_			String parent = null__			if (ele.hasAttribute(PARENT_ATTRIBUTE)) {_				parent = ele.getAttribute(PARENT_ATTRIBUTE)__			}_			AbstractBeanDefinition bd = createBeanDefinition(className, parent)___			parseBeanDefinitionAttributes(ele, beanName, containingBean, bd)__			bd.setDescription(DomUtils.getChildElementValueByTagName(ele, DESCRIPTION_ELEMENT))___			parseMetaElements(ele, bd)__			parseLookupOverrideSubElements(ele, bd.getMethodOverrides())__			parseReplacedMethodSubElements(ele, bd.getMethodOverrides())___			parseConstructorArgElements(ele, bd)__			parsePropertyElements(ele, bd)__			parseQualifierElements(ele, bd)___			bd.setResource(this.readerContext.getResource())__			bd.setSource(extractSource(ele))___			return bd__		}_		catch (ClassNotFoundException ex) {_			error("Bean class [" + className + "] not found", ele, ex)__		}_		catch (NoClassDefFoundError err) {_			error("Class that bean class [" + className + "] depends on not found", ele, err)__		}_		catch (Throwable ex) {_			error("Unexpected failure during bean definition parsing", ele, ex)__		}_		finally {_			this.parseState.pop()__		}__		return null__	};parse,the,bean,definition,itself,without,regard,to,name,or,aliases,may,return,code,null,if,problems,occurred,during,the,parsing,of,the,bean,definition;nullable,public,abstract,bean,definition,parse,bean,definition,element,element,ele,string,bean,name,bean,definition,containing,bean,this,parse,state,push,new,bean,entry,bean,name,string,class,name,null,if,ele,has,attribute,class,name,ele,get,attribute,trim,try,string,parent,null,if,ele,has,attribute,parent,ele,get,attribute,abstract,bean,definition,bd,create,bean,definition,class,name,parent,parse,bean,definition,attributes,ele,bean,name,containing,bean,bd,bd,set,description,dom,utils,get,child,element,value,by,tag,name,ele,parse,meta,elements,ele,bd,parse,lookup,override,sub,elements,ele,bd,get,method,overrides,parse,replaced,method,sub,elements,ele,bd,get,method,overrides,parse,constructor,arg,elements,ele,bd,parse,property,elements,ele,bd,parse,qualifier,elements,ele,bd,bd,set,resource,this,reader,context,get,resource,bd,set,source,extract,source,ele,return,bd,catch,class,not,found,exception,ex,error,bean,class,class,name,not,found,ele,ex,catch,no,class,def,found,error,err,error,class,that,bean,class,class,name,depends,on,not,found,ele,err,catch,throwable,ex,error,unexpected,failure,during,bean,definition,parsing,ele,ex,finally,this,parse,state,pop,return,null
BeanDefinitionParserDelegate -> @Nullable 	public AbstractBeanDefinition parseBeanDefinitionElement( 			Element ele, String beanName, BeanDefinition containingBean);1496259743;Parse the bean definition itself, without regard to name or aliases. May return_{@code null} if problems occurred during the parsing of the bean definition.;@Nullable_	public AbstractBeanDefinition parseBeanDefinitionElement(_			Element ele, String beanName, BeanDefinition containingBean) {__		this.parseState.push(new BeanEntry(beanName))___		String className = null__		if (ele.hasAttribute(CLASS_ATTRIBUTE)) {_			className = ele.getAttribute(CLASS_ATTRIBUTE).trim()__		}__		try {_			String parent = null__			if (ele.hasAttribute(PARENT_ATTRIBUTE)) {_				parent = ele.getAttribute(PARENT_ATTRIBUTE)__			}_			AbstractBeanDefinition bd = createBeanDefinition(className, parent)___			parseBeanDefinitionAttributes(ele, beanName, containingBean, bd)__			bd.setDescription(DomUtils.getChildElementValueByTagName(ele, DESCRIPTION_ELEMENT))___			parseMetaElements(ele, bd)__			parseLookupOverrideSubElements(ele, bd.getMethodOverrides())__			parseReplacedMethodSubElements(ele, bd.getMethodOverrides())___			parseConstructorArgElements(ele, bd)__			parsePropertyElements(ele, bd)__			parseQualifierElements(ele, bd)___			bd.setResource(this.readerContext.getResource())__			bd.setSource(extractSource(ele))___			return bd__		}_		catch (ClassNotFoundException ex) {_			error("Bean class [" + className + "] not found", ele, ex)__		}_		catch (NoClassDefFoundError err) {_			error("Class that bean class [" + className + "] depends on not found", ele, err)__		}_		catch (Throwable ex) {_			error("Unexpected failure during bean definition parsing", ele, ex)__		}_		finally {_			this.parseState.pop()__		}__		return null__	};parse,the,bean,definition,itself,without,regard,to,name,or,aliases,may,return,code,null,if,problems,occurred,during,the,parsing,of,the,bean,definition;nullable,public,abstract,bean,definition,parse,bean,definition,element,element,ele,string,bean,name,bean,definition,containing,bean,this,parse,state,push,new,bean,entry,bean,name,string,class,name,null,if,ele,has,attribute,class,name,ele,get,attribute,trim,try,string,parent,null,if,ele,has,attribute,parent,ele,get,attribute,abstract,bean,definition,bd,create,bean,definition,class,name,parent,parse,bean,definition,attributes,ele,bean,name,containing,bean,bd,bd,set,description,dom,utils,get,child,element,value,by,tag,name,ele,parse,meta,elements,ele,bd,parse,lookup,override,sub,elements,ele,bd,get,method,overrides,parse,replaced,method,sub,elements,ele,bd,get,method,overrides,parse,constructor,arg,elements,ele,bd,parse,property,elements,ele,bd,parse,qualifier,elements,ele,bd,bd,set,resource,this,reader,context,get,resource,bd,set,source,extract,source,ele,return,bd,catch,class,not,found,exception,ex,error,bean,class,class,name,not,found,ele,ex,catch,no,class,def,found,error,err,error,class,that,bean,class,class,name,depends,on,not,found,ele,err,catch,throwable,ex,error,unexpected,failure,during,bean,definition,parsing,ele,ex,finally,this,parse,state,pop,return,null
BeanDefinitionParserDelegate -> protected AbstractBeanDefinition createBeanDefinition(@Nullable String className, @Nullable String parentName) 			throws ClassNotFoundException;1496837955;Create a bean definition for the given class name and parent name._@param className the name of the bean class_@param parentName the name of the bean's parent bean_@return the newly created bean definition_@throws ClassNotFoundException if bean class resolution was attempted but failed;protected AbstractBeanDefinition createBeanDefinition(@Nullable String className, @Nullable String parentName)_			throws ClassNotFoundException {__		return BeanDefinitionReaderUtils.createBeanDefinition(_				parentName, className, this.readerContext.getBeanClassLoader())__	};create,a,bean,definition,for,the,given,class,name,and,parent,name,param,class,name,the,name,of,the,bean,class,param,parent,name,the,name,of,the,bean,s,parent,bean,return,the,newly,created,bean,definition,throws,class,not,found,exception,if,bean,class,resolution,was,attempted,but,failed;protected,abstract,bean,definition,create,bean,definition,nullable,string,class,name,nullable,string,parent,name,throws,class,not,found,exception,return,bean,definition,reader,utils,create,bean,definition,parent,name,class,name,this,reader,context,get,bean,class,loader
BeanDefinitionParserDelegate -> protected AbstractBeanDefinition createBeanDefinition(@Nullable String className, @Nullable String parentName) 			throws ClassNotFoundException;1503008029;Create a bean definition for the given class name and parent name._@param className the name of the bean class_@param parentName the name of the bean's parent bean_@return the newly created bean definition_@throws ClassNotFoundException if bean class resolution was attempted but failed;protected AbstractBeanDefinition createBeanDefinition(@Nullable String className, @Nullable String parentName)_			throws ClassNotFoundException {__		return BeanDefinitionReaderUtils.createBeanDefinition(_				parentName, className, this.readerContext.getBeanClassLoader())__	};create,a,bean,definition,for,the,given,class,name,and,parent,name,param,class,name,the,name,of,the,bean,class,param,parent,name,the,name,of,the,bean,s,parent,bean,return,the,newly,created,bean,definition,throws,class,not,found,exception,if,bean,class,resolution,was,attempted,but,failed;protected,abstract,bean,definition,create,bean,definition,nullable,string,class,name,nullable,string,parent,name,throws,class,not,found,exception,return,bean,definition,reader,utils,create,bean,definition,parent,name,class,name,this,reader,context,get,bean,class,loader
BeanDefinitionParserDelegate -> protected AbstractBeanDefinition createBeanDefinition(@Nullable String className, @Nullable String parentName) 			throws ClassNotFoundException;1519513303;Create a bean definition for the given class name and parent name._@param className the name of the bean class_@param parentName the name of the bean's parent bean_@return the newly created bean definition_@throws ClassNotFoundException if bean class resolution was attempted but failed;protected AbstractBeanDefinition createBeanDefinition(@Nullable String className, @Nullable String parentName)_			throws ClassNotFoundException {__		return BeanDefinitionReaderUtils.createBeanDefinition(_				parentName, className, this.readerContext.getBeanClassLoader())__	};create,a,bean,definition,for,the,given,class,name,and,parent,name,param,class,name,the,name,of,the,bean,class,param,parent,name,the,name,of,the,bean,s,parent,bean,return,the,newly,created,bean,definition,throws,class,not,found,exception,if,bean,class,resolution,was,attempted,but,failed;protected,abstract,bean,definition,create,bean,definition,nullable,string,class,name,nullable,string,parent,name,throws,class,not,found,exception,return,bean,definition,reader,utils,create,bean,definition,parent,name,class,name,this,reader,context,get,bean,class,loader
BeanDefinitionParserDelegate -> protected AbstractBeanDefinition createBeanDefinition(@Nullable String className, @Nullable String parentName) 			throws ClassNotFoundException;1530174524;Create a bean definition for the given class name and parent name._@param className the name of the bean class_@param parentName the name of the bean's parent bean_@return the newly created bean definition_@throws ClassNotFoundException if bean class resolution was attempted but failed;protected AbstractBeanDefinition createBeanDefinition(@Nullable String className, @Nullable String parentName)_			throws ClassNotFoundException {__		return BeanDefinitionReaderUtils.createBeanDefinition(_				parentName, className, this.readerContext.getBeanClassLoader())__	};create,a,bean,definition,for,the,given,class,name,and,parent,name,param,class,name,the,name,of,the,bean,class,param,parent,name,the,name,of,the,bean,s,parent,bean,return,the,newly,created,bean,definition,throws,class,not,found,exception,if,bean,class,resolution,was,attempted,but,failed;protected,abstract,bean,definition,create,bean,definition,nullable,string,class,name,nullable,string,parent,name,throws,class,not,found,exception,return,bean,definition,reader,utils,create,bean,definition,parent,name,class,name,this,reader,context,get,bean,class,loader
BeanDefinitionParserDelegate -> protected AbstractBeanDefinition createBeanDefinition(@Nullable String className, @Nullable String parentName) 			throws ClassNotFoundException;1530190293;Create a bean definition for the given class name and parent name._@param className the name of the bean class_@param parentName the name of the bean's parent bean_@return the newly created bean definition_@throws ClassNotFoundException if bean class resolution was attempted but failed;protected AbstractBeanDefinition createBeanDefinition(@Nullable String className, @Nullable String parentName)_			throws ClassNotFoundException {__		return BeanDefinitionReaderUtils.createBeanDefinition(_				parentName, className, this.readerContext.getBeanClassLoader())__	};create,a,bean,definition,for,the,given,class,name,and,parent,name,param,class,name,the,name,of,the,bean,class,param,parent,name,the,name,of,the,bean,s,parent,bean,return,the,newly,created,bean,definition,throws,class,not,found,exception,if,bean,class,resolution,was,attempted,but,failed;protected,abstract,bean,definition,create,bean,definition,nullable,string,class,name,nullable,string,parent,name,throws,class,not,found,exception,return,bean,definition,reader,utils,create,bean,definition,parent,name,class,name,this,reader,context,get,bean,class,loader
BeanDefinitionParserDelegate -> protected AbstractBeanDefinition createBeanDefinition(@Nullable String className, @Nullable String parentName) 			throws ClassNotFoundException;1532706365;Create a bean definition for the given class name and parent name._@param className the name of the bean class_@param parentName the name of the bean's parent bean_@return the newly created bean definition_@throws ClassNotFoundException if bean class resolution was attempted but failed;protected AbstractBeanDefinition createBeanDefinition(@Nullable String className, @Nullable String parentName)_			throws ClassNotFoundException {__		return BeanDefinitionReaderUtils.createBeanDefinition(_				parentName, className, this.readerContext.getBeanClassLoader())__	};create,a,bean,definition,for,the,given,class,name,and,parent,name,param,class,name,the,name,of,the,bean,class,param,parent,name,the,name,of,the,bean,s,parent,bean,return,the,newly,created,bean,definition,throws,class,not,found,exception,if,bean,class,resolution,was,attempted,but,failed;protected,abstract,bean,definition,create,bean,definition,nullable,string,class,name,nullable,string,parent,name,throws,class,not,found,exception,return,bean,definition,reader,utils,create,bean,definition,parent,name,class,name,this,reader,context,get,bean,class,loader
BeanDefinitionParserDelegate -> protected AbstractBeanDefinition createBeanDefinition(@Nullable String className, @Nullable String parentName) 			throws ClassNotFoundException;1546958161;Create a bean definition for the given class name and parent name._@param className the name of the bean class_@param parentName the name of the bean's parent bean_@return the newly created bean definition_@throws ClassNotFoundException if bean class resolution was attempted but failed;protected AbstractBeanDefinition createBeanDefinition(@Nullable String className, @Nullable String parentName)_			throws ClassNotFoundException {__		return BeanDefinitionReaderUtils.createBeanDefinition(_				parentName, className, this.readerContext.getBeanClassLoader())__	};create,a,bean,definition,for,the,given,class,name,and,parent,name,param,class,name,the,name,of,the,bean,class,param,parent,name,the,name,of,the,bean,s,parent,bean,return,the,newly,created,bean,definition,throws,class,not,found,exception,if,bean,class,resolution,was,attempted,but,failed;protected,abstract,bean,definition,create,bean,definition,nullable,string,class,name,nullable,string,parent,name,throws,class,not,found,exception,return,bean,definition,reader,utils,create,bean,definition,parent,name,class,name,this,reader,context,get,bean,class,loader
BeanDefinitionParserDelegate -> protected void populateDefaults(DocumentDefaultsDefinition defaults, @Nullable DocumentDefaultsDefinition parentDefaults, Element root);1495868221;Populate the given DocumentDefaultsDefinition instance with the default lazy-init,_autowire, dependency check settings, init-method, destroy-method and merge settings._Support nested 'beans' element use cases by falling back to <literal>parentDefaults</literal>_in case the defaults are not explicitly set locally._@param defaults the defaults to populate_@param parentDefaults the parent BeanDefinitionParserDelegate (if any) defaults to fall back to_@param root the root element of the current bean definition document (or nested beans element);protected void populateDefaults(DocumentDefaultsDefinition defaults, @Nullable DocumentDefaultsDefinition parentDefaults, Element root) {_		String lazyInit = root.getAttribute(DEFAULT_LAZY_INIT_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(lazyInit)) {_			_			lazyInit = (parentDefaults != null ? parentDefaults.getLazyInit() : FALSE_VALUE)__		}_		defaults.setLazyInit(lazyInit)___		String merge = root.getAttribute(DEFAULT_MERGE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(merge)) {_			_			merge = (parentDefaults != null ? parentDefaults.getMerge() : FALSE_VALUE)__		}_		defaults.setMerge(merge)___		String autowire = root.getAttribute(DEFAULT_AUTOWIRE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(autowire)) {_			_			autowire = (parentDefaults != null ? parentDefaults.getAutowire() : AUTOWIRE_NO_VALUE)__		}_		defaults.setAutowire(autowire)___		if (root.hasAttribute(DEFAULT_AUTOWIRE_CANDIDATES_ATTRIBUTE)) {_			defaults.setAutowireCandidates(root.getAttribute(DEFAULT_AUTOWIRE_CANDIDATES_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setAutowireCandidates(parentDefaults.getAutowireCandidates())__		}__		if (root.hasAttribute(DEFAULT_INIT_METHOD_ATTRIBUTE)) {_			defaults.setInitMethod(root.getAttribute(DEFAULT_INIT_METHOD_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setInitMethod(parentDefaults.getInitMethod())__		}__		if (root.hasAttribute(DEFAULT_DESTROY_METHOD_ATTRIBUTE)) {_			defaults.setDestroyMethod(root.getAttribute(DEFAULT_DESTROY_METHOD_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setDestroyMethod(parentDefaults.getDestroyMethod())__		}__		defaults.setSource(this.readerContext.extractSource(root))__	};populate,the,given,document,defaults,definition,instance,with,the,default,lazy,init,autowire,dependency,check,settings,init,method,destroy,method,and,merge,settings,support,nested,beans,element,use,cases,by,falling,back,to,literal,parent,defaults,literal,in,case,the,defaults,are,not,explicitly,set,locally,param,defaults,the,defaults,to,populate,param,parent,defaults,the,parent,bean,definition,parser,delegate,if,any,defaults,to,fall,back,to,param,root,the,root,element,of,the,current,bean,definition,document,or,nested,beans,element;protected,void,populate,defaults,document,defaults,definition,defaults,nullable,document,defaults,definition,parent,defaults,element,root,string,lazy,init,root,get,attribute,if,equals,lazy,init,lazy,init,parent,defaults,null,parent,defaults,get,lazy,init,defaults,set,lazy,init,lazy,init,string,merge,root,get,attribute,if,equals,merge,merge,parent,defaults,null,parent,defaults,get,merge,defaults,set,merge,merge,string,autowire,root,get,attribute,if,equals,autowire,autowire,parent,defaults,null,parent,defaults,get,autowire,defaults,set,autowire,autowire,if,root,has,attribute,defaults,set,autowire,candidates,root,get,attribute,else,if,parent,defaults,null,defaults,set,autowire,candidates,parent,defaults,get,autowire,candidates,if,root,has,attribute,defaults,set,init,method,root,get,attribute,else,if,parent,defaults,null,defaults,set,init,method,parent,defaults,get,init,method,if,root,has,attribute,defaults,set,destroy,method,root,get,attribute,else,if,parent,defaults,null,defaults,set,destroy,method,parent,defaults,get,destroy,method,defaults,set,source,this,reader,context,extract,source,root
BeanDefinitionParserDelegate -> protected void populateDefaults(DocumentDefaultsDefinition defaults, @Nullable DocumentDefaultsDefinition parentDefaults, Element root);1496259743;Populate the given DocumentDefaultsDefinition instance with the default lazy-init,_autowire, dependency check settings, init-method, destroy-method and merge settings._Support nested 'beans' element use cases by falling back to <literal>parentDefaults</literal>_in case the defaults are not explicitly set locally._@param defaults the defaults to populate_@param parentDefaults the parent BeanDefinitionParserDelegate (if any) defaults to fall back to_@param root the root element of the current bean definition document (or nested beans element);protected void populateDefaults(DocumentDefaultsDefinition defaults, @Nullable DocumentDefaultsDefinition parentDefaults, Element root) {_		String lazyInit = root.getAttribute(DEFAULT_LAZY_INIT_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(lazyInit)) {_			_			lazyInit = (parentDefaults != null ? parentDefaults.getLazyInit() : FALSE_VALUE)__		}_		defaults.setLazyInit(lazyInit)___		String merge = root.getAttribute(DEFAULT_MERGE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(merge)) {_			_			merge = (parentDefaults != null ? parentDefaults.getMerge() : FALSE_VALUE)__		}_		defaults.setMerge(merge)___		String autowire = root.getAttribute(DEFAULT_AUTOWIRE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(autowire)) {_			_			autowire = (parentDefaults != null ? parentDefaults.getAutowire() : AUTOWIRE_NO_VALUE)__		}_		defaults.setAutowire(autowire)___		if (root.hasAttribute(DEFAULT_AUTOWIRE_CANDIDATES_ATTRIBUTE)) {_			defaults.setAutowireCandidates(root.getAttribute(DEFAULT_AUTOWIRE_CANDIDATES_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setAutowireCandidates(parentDefaults.getAutowireCandidates())__		}__		if (root.hasAttribute(DEFAULT_INIT_METHOD_ATTRIBUTE)) {_			defaults.setInitMethod(root.getAttribute(DEFAULT_INIT_METHOD_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setInitMethod(parentDefaults.getInitMethod())__		}__		if (root.hasAttribute(DEFAULT_DESTROY_METHOD_ATTRIBUTE)) {_			defaults.setDestroyMethod(root.getAttribute(DEFAULT_DESTROY_METHOD_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setDestroyMethod(parentDefaults.getDestroyMethod())__		}__		defaults.setSource(this.readerContext.extractSource(root))__	};populate,the,given,document,defaults,definition,instance,with,the,default,lazy,init,autowire,dependency,check,settings,init,method,destroy,method,and,merge,settings,support,nested,beans,element,use,cases,by,falling,back,to,literal,parent,defaults,literal,in,case,the,defaults,are,not,explicitly,set,locally,param,defaults,the,defaults,to,populate,param,parent,defaults,the,parent,bean,definition,parser,delegate,if,any,defaults,to,fall,back,to,param,root,the,root,element,of,the,current,bean,definition,document,or,nested,beans,element;protected,void,populate,defaults,document,defaults,definition,defaults,nullable,document,defaults,definition,parent,defaults,element,root,string,lazy,init,root,get,attribute,if,equals,lazy,init,lazy,init,parent,defaults,null,parent,defaults,get,lazy,init,defaults,set,lazy,init,lazy,init,string,merge,root,get,attribute,if,equals,merge,merge,parent,defaults,null,parent,defaults,get,merge,defaults,set,merge,merge,string,autowire,root,get,attribute,if,equals,autowire,autowire,parent,defaults,null,parent,defaults,get,autowire,defaults,set,autowire,autowire,if,root,has,attribute,defaults,set,autowire,candidates,root,get,attribute,else,if,parent,defaults,null,defaults,set,autowire,candidates,parent,defaults,get,autowire,candidates,if,root,has,attribute,defaults,set,init,method,root,get,attribute,else,if,parent,defaults,null,defaults,set,init,method,parent,defaults,get,init,method,if,root,has,attribute,defaults,set,destroy,method,root,get,attribute,else,if,parent,defaults,null,defaults,set,destroy,method,parent,defaults,get,destroy,method,defaults,set,source,this,reader,context,extract,source,root
BeanDefinitionParserDelegate -> protected void populateDefaults(DocumentDefaultsDefinition defaults, @Nullable DocumentDefaultsDefinition parentDefaults, Element root);1496837955;Populate the given DocumentDefaultsDefinition instance with the default lazy-init,_autowire, dependency check settings, init-method, destroy-method and merge settings._Support nested 'beans' element use cases by falling back to <literal>parentDefaults</literal>_in case the defaults are not explicitly set locally._@param defaults the defaults to populate_@param parentDefaults the parent BeanDefinitionParserDelegate (if any) defaults to fall back to_@param root the root element of the current bean definition document (or nested beans element);protected void populateDefaults(DocumentDefaultsDefinition defaults, @Nullable DocumentDefaultsDefinition parentDefaults, Element root) {_		String lazyInit = root.getAttribute(DEFAULT_LAZY_INIT_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(lazyInit)) {_			_			lazyInit = (parentDefaults != null ? parentDefaults.getLazyInit() : FALSE_VALUE)__		}_		defaults.setLazyInit(lazyInit)___		String merge = root.getAttribute(DEFAULT_MERGE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(merge)) {_			_			merge = (parentDefaults != null ? parentDefaults.getMerge() : FALSE_VALUE)__		}_		defaults.setMerge(merge)___		String autowire = root.getAttribute(DEFAULT_AUTOWIRE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(autowire)) {_			_			autowire = (parentDefaults != null ? parentDefaults.getAutowire() : AUTOWIRE_NO_VALUE)__		}_		defaults.setAutowire(autowire)___		if (root.hasAttribute(DEFAULT_AUTOWIRE_CANDIDATES_ATTRIBUTE)) {_			defaults.setAutowireCandidates(root.getAttribute(DEFAULT_AUTOWIRE_CANDIDATES_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setAutowireCandidates(parentDefaults.getAutowireCandidates())__		}__		if (root.hasAttribute(DEFAULT_INIT_METHOD_ATTRIBUTE)) {_			defaults.setInitMethod(root.getAttribute(DEFAULT_INIT_METHOD_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setInitMethod(parentDefaults.getInitMethod())__		}__		if (root.hasAttribute(DEFAULT_DESTROY_METHOD_ATTRIBUTE)) {_			defaults.setDestroyMethod(root.getAttribute(DEFAULT_DESTROY_METHOD_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setDestroyMethod(parentDefaults.getDestroyMethod())__		}__		defaults.setSource(this.readerContext.extractSource(root))__	};populate,the,given,document,defaults,definition,instance,with,the,default,lazy,init,autowire,dependency,check,settings,init,method,destroy,method,and,merge,settings,support,nested,beans,element,use,cases,by,falling,back,to,literal,parent,defaults,literal,in,case,the,defaults,are,not,explicitly,set,locally,param,defaults,the,defaults,to,populate,param,parent,defaults,the,parent,bean,definition,parser,delegate,if,any,defaults,to,fall,back,to,param,root,the,root,element,of,the,current,bean,definition,document,or,nested,beans,element;protected,void,populate,defaults,document,defaults,definition,defaults,nullable,document,defaults,definition,parent,defaults,element,root,string,lazy,init,root,get,attribute,if,equals,lazy,init,lazy,init,parent,defaults,null,parent,defaults,get,lazy,init,defaults,set,lazy,init,lazy,init,string,merge,root,get,attribute,if,equals,merge,merge,parent,defaults,null,parent,defaults,get,merge,defaults,set,merge,merge,string,autowire,root,get,attribute,if,equals,autowire,autowire,parent,defaults,null,parent,defaults,get,autowire,defaults,set,autowire,autowire,if,root,has,attribute,defaults,set,autowire,candidates,root,get,attribute,else,if,parent,defaults,null,defaults,set,autowire,candidates,parent,defaults,get,autowire,candidates,if,root,has,attribute,defaults,set,init,method,root,get,attribute,else,if,parent,defaults,null,defaults,set,init,method,parent,defaults,get,init,method,if,root,has,attribute,defaults,set,destroy,method,root,get,attribute,else,if,parent,defaults,null,defaults,set,destroy,method,parent,defaults,get,destroy,method,defaults,set,source,this,reader,context,extract,source,root
BeanDefinitionParserDelegate -> protected void populateDefaults(DocumentDefaultsDefinition defaults, @Nullable DocumentDefaultsDefinition parentDefaults, Element root);1503008029;Populate the given DocumentDefaultsDefinition instance with the default lazy-init,_autowire, dependency check settings, init-method, destroy-method and merge settings._Support nested 'beans' element use cases by falling back to <literal>parentDefaults</literal>_in case the defaults are not explicitly set locally._@param defaults the defaults to populate_@param parentDefaults the parent BeanDefinitionParserDelegate (if any) defaults to fall back to_@param root the root element of the current bean definition document (or nested beans element);protected void populateDefaults(DocumentDefaultsDefinition defaults, @Nullable DocumentDefaultsDefinition parentDefaults, Element root) {_		String lazyInit = root.getAttribute(DEFAULT_LAZY_INIT_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(lazyInit)) {_			_			lazyInit = (parentDefaults != null ? parentDefaults.getLazyInit() : FALSE_VALUE)__		}_		defaults.setLazyInit(lazyInit)___		String merge = root.getAttribute(DEFAULT_MERGE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(merge)) {_			_			merge = (parentDefaults != null ? parentDefaults.getMerge() : FALSE_VALUE)__		}_		defaults.setMerge(merge)___		String autowire = root.getAttribute(DEFAULT_AUTOWIRE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(autowire)) {_			_			autowire = (parentDefaults != null ? parentDefaults.getAutowire() : AUTOWIRE_NO_VALUE)__		}_		defaults.setAutowire(autowire)___		if (root.hasAttribute(DEFAULT_AUTOWIRE_CANDIDATES_ATTRIBUTE)) {_			defaults.setAutowireCandidates(root.getAttribute(DEFAULT_AUTOWIRE_CANDIDATES_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setAutowireCandidates(parentDefaults.getAutowireCandidates())__		}__		if (root.hasAttribute(DEFAULT_INIT_METHOD_ATTRIBUTE)) {_			defaults.setInitMethod(root.getAttribute(DEFAULT_INIT_METHOD_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setInitMethod(parentDefaults.getInitMethod())__		}__		if (root.hasAttribute(DEFAULT_DESTROY_METHOD_ATTRIBUTE)) {_			defaults.setDestroyMethod(root.getAttribute(DEFAULT_DESTROY_METHOD_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setDestroyMethod(parentDefaults.getDestroyMethod())__		}__		defaults.setSource(this.readerContext.extractSource(root))__	};populate,the,given,document,defaults,definition,instance,with,the,default,lazy,init,autowire,dependency,check,settings,init,method,destroy,method,and,merge,settings,support,nested,beans,element,use,cases,by,falling,back,to,literal,parent,defaults,literal,in,case,the,defaults,are,not,explicitly,set,locally,param,defaults,the,defaults,to,populate,param,parent,defaults,the,parent,bean,definition,parser,delegate,if,any,defaults,to,fall,back,to,param,root,the,root,element,of,the,current,bean,definition,document,or,nested,beans,element;protected,void,populate,defaults,document,defaults,definition,defaults,nullable,document,defaults,definition,parent,defaults,element,root,string,lazy,init,root,get,attribute,if,equals,lazy,init,lazy,init,parent,defaults,null,parent,defaults,get,lazy,init,defaults,set,lazy,init,lazy,init,string,merge,root,get,attribute,if,equals,merge,merge,parent,defaults,null,parent,defaults,get,merge,defaults,set,merge,merge,string,autowire,root,get,attribute,if,equals,autowire,autowire,parent,defaults,null,parent,defaults,get,autowire,defaults,set,autowire,autowire,if,root,has,attribute,defaults,set,autowire,candidates,root,get,attribute,else,if,parent,defaults,null,defaults,set,autowire,candidates,parent,defaults,get,autowire,candidates,if,root,has,attribute,defaults,set,init,method,root,get,attribute,else,if,parent,defaults,null,defaults,set,init,method,parent,defaults,get,init,method,if,root,has,attribute,defaults,set,destroy,method,root,get,attribute,else,if,parent,defaults,null,defaults,set,destroy,method,parent,defaults,get,destroy,method,defaults,set,source,this,reader,context,extract,source,root
BeanDefinitionParserDelegate -> protected void populateDefaults(DocumentDefaultsDefinition defaults, @Nullable DocumentDefaultsDefinition parentDefaults, Element root);1519513303;Populate the given DocumentDefaultsDefinition instance with the default lazy-init,_autowire, dependency check settings, init-method, destroy-method and merge settings._Support nested 'beans' element use cases by falling back to <literal>parentDefaults</literal>_in case the defaults are not explicitly set locally._@param defaults the defaults to populate_@param parentDefaults the parent BeanDefinitionParserDelegate (if any) defaults to fall back to_@param root the root element of the current bean definition document (or nested beans element);protected void populateDefaults(DocumentDefaultsDefinition defaults, @Nullable DocumentDefaultsDefinition parentDefaults, Element root) {_		String lazyInit = root.getAttribute(DEFAULT_LAZY_INIT_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(lazyInit)) {_			_			lazyInit = (parentDefaults != null ? parentDefaults.getLazyInit() : FALSE_VALUE)__		}_		defaults.setLazyInit(lazyInit)___		String merge = root.getAttribute(DEFAULT_MERGE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(merge)) {_			_			merge = (parentDefaults != null ? parentDefaults.getMerge() : FALSE_VALUE)__		}_		defaults.setMerge(merge)___		String autowire = root.getAttribute(DEFAULT_AUTOWIRE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(autowire)) {_			_			autowire = (parentDefaults != null ? parentDefaults.getAutowire() : AUTOWIRE_NO_VALUE)__		}_		defaults.setAutowire(autowire)___		if (root.hasAttribute(DEFAULT_AUTOWIRE_CANDIDATES_ATTRIBUTE)) {_			defaults.setAutowireCandidates(root.getAttribute(DEFAULT_AUTOWIRE_CANDIDATES_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setAutowireCandidates(parentDefaults.getAutowireCandidates())__		}__		if (root.hasAttribute(DEFAULT_INIT_METHOD_ATTRIBUTE)) {_			defaults.setInitMethod(root.getAttribute(DEFAULT_INIT_METHOD_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setInitMethod(parentDefaults.getInitMethod())__		}__		if (root.hasAttribute(DEFAULT_DESTROY_METHOD_ATTRIBUTE)) {_			defaults.setDestroyMethod(root.getAttribute(DEFAULT_DESTROY_METHOD_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setDestroyMethod(parentDefaults.getDestroyMethod())__		}__		defaults.setSource(this.readerContext.extractSource(root))__	};populate,the,given,document,defaults,definition,instance,with,the,default,lazy,init,autowire,dependency,check,settings,init,method,destroy,method,and,merge,settings,support,nested,beans,element,use,cases,by,falling,back,to,literal,parent,defaults,literal,in,case,the,defaults,are,not,explicitly,set,locally,param,defaults,the,defaults,to,populate,param,parent,defaults,the,parent,bean,definition,parser,delegate,if,any,defaults,to,fall,back,to,param,root,the,root,element,of,the,current,bean,definition,document,or,nested,beans,element;protected,void,populate,defaults,document,defaults,definition,defaults,nullable,document,defaults,definition,parent,defaults,element,root,string,lazy,init,root,get,attribute,if,equals,lazy,init,lazy,init,parent,defaults,null,parent,defaults,get,lazy,init,defaults,set,lazy,init,lazy,init,string,merge,root,get,attribute,if,equals,merge,merge,parent,defaults,null,parent,defaults,get,merge,defaults,set,merge,merge,string,autowire,root,get,attribute,if,equals,autowire,autowire,parent,defaults,null,parent,defaults,get,autowire,defaults,set,autowire,autowire,if,root,has,attribute,defaults,set,autowire,candidates,root,get,attribute,else,if,parent,defaults,null,defaults,set,autowire,candidates,parent,defaults,get,autowire,candidates,if,root,has,attribute,defaults,set,init,method,root,get,attribute,else,if,parent,defaults,null,defaults,set,init,method,parent,defaults,get,init,method,if,root,has,attribute,defaults,set,destroy,method,root,get,attribute,else,if,parent,defaults,null,defaults,set,destroy,method,parent,defaults,get,destroy,method,defaults,set,source,this,reader,context,extract,source,root
BeanDefinitionParserDelegate -> protected void populateDefaults(DocumentDefaultsDefinition defaults, @Nullable DocumentDefaultsDefinition parentDefaults, Element root);1530174524;Populate the given DocumentDefaultsDefinition instance with the default lazy-init,_autowire, dependency check settings, init-method, destroy-method and merge settings._Support nested 'beans' element use cases by falling back to {@code parentDefaults}_in case the defaults are not explicitly set locally._@param defaults the defaults to populate_@param parentDefaults the parent BeanDefinitionParserDelegate (if any) defaults to fall back to_@param root the root element of the current bean definition document (or nested beans element);protected void populateDefaults(DocumentDefaultsDefinition defaults, @Nullable DocumentDefaultsDefinition parentDefaults, Element root) {_		String lazyInit = root.getAttribute(DEFAULT_LAZY_INIT_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(lazyInit)) {_			_			lazyInit = (parentDefaults != null ? parentDefaults.getLazyInit() : FALSE_VALUE)__		}_		defaults.setLazyInit(lazyInit)___		String merge = root.getAttribute(DEFAULT_MERGE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(merge)) {_			_			merge = (parentDefaults != null ? parentDefaults.getMerge() : FALSE_VALUE)__		}_		defaults.setMerge(merge)___		String autowire = root.getAttribute(DEFAULT_AUTOWIRE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(autowire)) {_			_			autowire = (parentDefaults != null ? parentDefaults.getAutowire() : AUTOWIRE_NO_VALUE)__		}_		defaults.setAutowire(autowire)___		if (root.hasAttribute(DEFAULT_AUTOWIRE_CANDIDATES_ATTRIBUTE)) {_			defaults.setAutowireCandidates(root.getAttribute(DEFAULT_AUTOWIRE_CANDIDATES_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setAutowireCandidates(parentDefaults.getAutowireCandidates())__		}__		if (root.hasAttribute(DEFAULT_INIT_METHOD_ATTRIBUTE)) {_			defaults.setInitMethod(root.getAttribute(DEFAULT_INIT_METHOD_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setInitMethod(parentDefaults.getInitMethod())__		}__		if (root.hasAttribute(DEFAULT_DESTROY_METHOD_ATTRIBUTE)) {_			defaults.setDestroyMethod(root.getAttribute(DEFAULT_DESTROY_METHOD_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setDestroyMethod(parentDefaults.getDestroyMethod())__		}__		defaults.setSource(this.readerContext.extractSource(root))__	};populate,the,given,document,defaults,definition,instance,with,the,default,lazy,init,autowire,dependency,check,settings,init,method,destroy,method,and,merge,settings,support,nested,beans,element,use,cases,by,falling,back,to,code,parent,defaults,in,case,the,defaults,are,not,explicitly,set,locally,param,defaults,the,defaults,to,populate,param,parent,defaults,the,parent,bean,definition,parser,delegate,if,any,defaults,to,fall,back,to,param,root,the,root,element,of,the,current,bean,definition,document,or,nested,beans,element;protected,void,populate,defaults,document,defaults,definition,defaults,nullable,document,defaults,definition,parent,defaults,element,root,string,lazy,init,root,get,attribute,if,equals,lazy,init,lazy,init,parent,defaults,null,parent,defaults,get,lazy,init,defaults,set,lazy,init,lazy,init,string,merge,root,get,attribute,if,equals,merge,merge,parent,defaults,null,parent,defaults,get,merge,defaults,set,merge,merge,string,autowire,root,get,attribute,if,equals,autowire,autowire,parent,defaults,null,parent,defaults,get,autowire,defaults,set,autowire,autowire,if,root,has,attribute,defaults,set,autowire,candidates,root,get,attribute,else,if,parent,defaults,null,defaults,set,autowire,candidates,parent,defaults,get,autowire,candidates,if,root,has,attribute,defaults,set,init,method,root,get,attribute,else,if,parent,defaults,null,defaults,set,init,method,parent,defaults,get,init,method,if,root,has,attribute,defaults,set,destroy,method,root,get,attribute,else,if,parent,defaults,null,defaults,set,destroy,method,parent,defaults,get,destroy,method,defaults,set,source,this,reader,context,extract,source,root
BeanDefinitionParserDelegate -> protected void populateDefaults(DocumentDefaultsDefinition defaults, @Nullable DocumentDefaultsDefinition parentDefaults, Element root);1530190293;Populate the given DocumentDefaultsDefinition instance with the default lazy-init,_autowire, dependency check settings, init-method, destroy-method and merge settings._Support nested 'beans' element use cases by falling back to {@code parentDefaults}_in case the defaults are not explicitly set locally._@param defaults the defaults to populate_@param parentDefaults the parent BeanDefinitionParserDelegate (if any) defaults to fall back to_@param root the root element of the current bean definition document (or nested beans element);protected void populateDefaults(DocumentDefaultsDefinition defaults, @Nullable DocumentDefaultsDefinition parentDefaults, Element root) {_		String lazyInit = root.getAttribute(DEFAULT_LAZY_INIT_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(lazyInit)) {_			_			lazyInit = (parentDefaults != null ? parentDefaults.getLazyInit() : FALSE_VALUE)__		}_		defaults.setLazyInit(lazyInit)___		String merge = root.getAttribute(DEFAULT_MERGE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(merge)) {_			_			merge = (parentDefaults != null ? parentDefaults.getMerge() : FALSE_VALUE)__		}_		defaults.setMerge(merge)___		String autowire = root.getAttribute(DEFAULT_AUTOWIRE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(autowire)) {_			_			autowire = (parentDefaults != null ? parentDefaults.getAutowire() : AUTOWIRE_NO_VALUE)__		}_		defaults.setAutowire(autowire)___		if (root.hasAttribute(DEFAULT_AUTOWIRE_CANDIDATES_ATTRIBUTE)) {_			defaults.setAutowireCandidates(root.getAttribute(DEFAULT_AUTOWIRE_CANDIDATES_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setAutowireCandidates(parentDefaults.getAutowireCandidates())__		}__		if (root.hasAttribute(DEFAULT_INIT_METHOD_ATTRIBUTE)) {_			defaults.setInitMethod(root.getAttribute(DEFAULT_INIT_METHOD_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setInitMethod(parentDefaults.getInitMethod())__		}__		if (root.hasAttribute(DEFAULT_DESTROY_METHOD_ATTRIBUTE)) {_			defaults.setDestroyMethod(root.getAttribute(DEFAULT_DESTROY_METHOD_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setDestroyMethod(parentDefaults.getDestroyMethod())__		}__		defaults.setSource(this.readerContext.extractSource(root))__	};populate,the,given,document,defaults,definition,instance,with,the,default,lazy,init,autowire,dependency,check,settings,init,method,destroy,method,and,merge,settings,support,nested,beans,element,use,cases,by,falling,back,to,code,parent,defaults,in,case,the,defaults,are,not,explicitly,set,locally,param,defaults,the,defaults,to,populate,param,parent,defaults,the,parent,bean,definition,parser,delegate,if,any,defaults,to,fall,back,to,param,root,the,root,element,of,the,current,bean,definition,document,or,nested,beans,element;protected,void,populate,defaults,document,defaults,definition,defaults,nullable,document,defaults,definition,parent,defaults,element,root,string,lazy,init,root,get,attribute,if,equals,lazy,init,lazy,init,parent,defaults,null,parent,defaults,get,lazy,init,defaults,set,lazy,init,lazy,init,string,merge,root,get,attribute,if,equals,merge,merge,parent,defaults,null,parent,defaults,get,merge,defaults,set,merge,merge,string,autowire,root,get,attribute,if,equals,autowire,autowire,parent,defaults,null,parent,defaults,get,autowire,defaults,set,autowire,autowire,if,root,has,attribute,defaults,set,autowire,candidates,root,get,attribute,else,if,parent,defaults,null,defaults,set,autowire,candidates,parent,defaults,get,autowire,candidates,if,root,has,attribute,defaults,set,init,method,root,get,attribute,else,if,parent,defaults,null,defaults,set,init,method,parent,defaults,get,init,method,if,root,has,attribute,defaults,set,destroy,method,root,get,attribute,else,if,parent,defaults,null,defaults,set,destroy,method,parent,defaults,get,destroy,method,defaults,set,source,this,reader,context,extract,source,root
BeanDefinitionParserDelegate -> protected void populateDefaults(DocumentDefaultsDefinition defaults, @Nullable DocumentDefaultsDefinition parentDefaults, Element root);1532706365;Populate the given DocumentDefaultsDefinition instance with the default lazy-init,_autowire, dependency check settings, init-method, destroy-method and merge settings._Support nested 'beans' element use cases by falling back to {@code parentDefaults}_in case the defaults are not explicitly set locally._@param defaults the defaults to populate_@param parentDefaults the parent BeanDefinitionParserDelegate (if any) defaults to fall back to_@param root the root element of the current bean definition document (or nested beans element);protected void populateDefaults(DocumentDefaultsDefinition defaults, @Nullable DocumentDefaultsDefinition parentDefaults, Element root) {_		String lazyInit = root.getAttribute(DEFAULT_LAZY_INIT_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(lazyInit)) {_			_			lazyInit = (parentDefaults != null ? parentDefaults.getLazyInit() : FALSE_VALUE)__		}_		defaults.setLazyInit(lazyInit)___		String merge = root.getAttribute(DEFAULT_MERGE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(merge)) {_			_			merge = (parentDefaults != null ? parentDefaults.getMerge() : FALSE_VALUE)__		}_		defaults.setMerge(merge)___		String autowire = root.getAttribute(DEFAULT_AUTOWIRE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(autowire)) {_			_			autowire = (parentDefaults != null ? parentDefaults.getAutowire() : AUTOWIRE_NO_VALUE)__		}_		defaults.setAutowire(autowire)___		if (root.hasAttribute(DEFAULT_AUTOWIRE_CANDIDATES_ATTRIBUTE)) {_			defaults.setAutowireCandidates(root.getAttribute(DEFAULT_AUTOWIRE_CANDIDATES_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setAutowireCandidates(parentDefaults.getAutowireCandidates())__		}__		if (root.hasAttribute(DEFAULT_INIT_METHOD_ATTRIBUTE)) {_			defaults.setInitMethod(root.getAttribute(DEFAULT_INIT_METHOD_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setInitMethod(parentDefaults.getInitMethod())__		}__		if (root.hasAttribute(DEFAULT_DESTROY_METHOD_ATTRIBUTE)) {_			defaults.setDestroyMethod(root.getAttribute(DEFAULT_DESTROY_METHOD_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setDestroyMethod(parentDefaults.getDestroyMethod())__		}__		defaults.setSource(this.readerContext.extractSource(root))__	};populate,the,given,document,defaults,definition,instance,with,the,default,lazy,init,autowire,dependency,check,settings,init,method,destroy,method,and,merge,settings,support,nested,beans,element,use,cases,by,falling,back,to,code,parent,defaults,in,case,the,defaults,are,not,explicitly,set,locally,param,defaults,the,defaults,to,populate,param,parent,defaults,the,parent,bean,definition,parser,delegate,if,any,defaults,to,fall,back,to,param,root,the,root,element,of,the,current,bean,definition,document,or,nested,beans,element;protected,void,populate,defaults,document,defaults,definition,defaults,nullable,document,defaults,definition,parent,defaults,element,root,string,lazy,init,root,get,attribute,if,equals,lazy,init,lazy,init,parent,defaults,null,parent,defaults,get,lazy,init,defaults,set,lazy,init,lazy,init,string,merge,root,get,attribute,if,equals,merge,merge,parent,defaults,null,parent,defaults,get,merge,defaults,set,merge,merge,string,autowire,root,get,attribute,if,equals,autowire,autowire,parent,defaults,null,parent,defaults,get,autowire,defaults,set,autowire,autowire,if,root,has,attribute,defaults,set,autowire,candidates,root,get,attribute,else,if,parent,defaults,null,defaults,set,autowire,candidates,parent,defaults,get,autowire,candidates,if,root,has,attribute,defaults,set,init,method,root,get,attribute,else,if,parent,defaults,null,defaults,set,init,method,parent,defaults,get,init,method,if,root,has,attribute,defaults,set,destroy,method,root,get,attribute,else,if,parent,defaults,null,defaults,set,destroy,method,parent,defaults,get,destroy,method,defaults,set,source,this,reader,context,extract,source,root
BeanDefinitionParserDelegate -> protected void populateDefaults(DocumentDefaultsDefinition defaults, @Nullable DocumentDefaultsDefinition parentDefaults, Element root);1546958161;Populate the given DocumentDefaultsDefinition instance with the default lazy-init,_autowire, dependency check settings, init-method, destroy-method and merge settings._Support nested 'beans' element use cases by falling back to {@code parentDefaults}_in case the defaults are not explicitly set locally._@param defaults the defaults to populate_@param parentDefaults the parent BeanDefinitionParserDelegate (if any) defaults to fall back to_@param root the root element of the current bean definition document (or nested beans element);protected void populateDefaults(DocumentDefaultsDefinition defaults, @Nullable DocumentDefaultsDefinition parentDefaults, Element root) {_		String lazyInit = root.getAttribute(DEFAULT_LAZY_INIT_ATTRIBUTE)__		if (isDefaultValue(lazyInit)) {_			_			lazyInit = (parentDefaults != null ? parentDefaults.getLazyInit() : FALSE_VALUE)__		}_		defaults.setLazyInit(lazyInit)___		String merge = root.getAttribute(DEFAULT_MERGE_ATTRIBUTE)__		if (isDefaultValue(merge)) {_			_			merge = (parentDefaults != null ? parentDefaults.getMerge() : FALSE_VALUE)__		}_		defaults.setMerge(merge)___		String autowire = root.getAttribute(DEFAULT_AUTOWIRE_ATTRIBUTE)__		if (isDefaultValue(autowire)) {_			_			autowire = (parentDefaults != null ? parentDefaults.getAutowire() : AUTOWIRE_NO_VALUE)__		}_		defaults.setAutowire(autowire)___		if (root.hasAttribute(DEFAULT_AUTOWIRE_CANDIDATES_ATTRIBUTE)) {_			defaults.setAutowireCandidates(root.getAttribute(DEFAULT_AUTOWIRE_CANDIDATES_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setAutowireCandidates(parentDefaults.getAutowireCandidates())__		}__		if (root.hasAttribute(DEFAULT_INIT_METHOD_ATTRIBUTE)) {_			defaults.setInitMethod(root.getAttribute(DEFAULT_INIT_METHOD_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setInitMethod(parentDefaults.getInitMethod())__		}__		if (root.hasAttribute(DEFAULT_DESTROY_METHOD_ATTRIBUTE)) {_			defaults.setDestroyMethod(root.getAttribute(DEFAULT_DESTROY_METHOD_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setDestroyMethod(parentDefaults.getDestroyMethod())__		}__		defaults.setSource(this.readerContext.extractSource(root))__	};populate,the,given,document,defaults,definition,instance,with,the,default,lazy,init,autowire,dependency,check,settings,init,method,destroy,method,and,merge,settings,support,nested,beans,element,use,cases,by,falling,back,to,code,parent,defaults,in,case,the,defaults,are,not,explicitly,set,locally,param,defaults,the,defaults,to,populate,param,parent,defaults,the,parent,bean,definition,parser,delegate,if,any,defaults,to,fall,back,to,param,root,the,root,element,of,the,current,bean,definition,document,or,nested,beans,element;protected,void,populate,defaults,document,defaults,definition,defaults,nullable,document,defaults,definition,parent,defaults,element,root,string,lazy,init,root,get,attribute,if,is,default,value,lazy,init,lazy,init,parent,defaults,null,parent,defaults,get,lazy,init,defaults,set,lazy,init,lazy,init,string,merge,root,get,attribute,if,is,default,value,merge,merge,parent,defaults,null,parent,defaults,get,merge,defaults,set,merge,merge,string,autowire,root,get,attribute,if,is,default,value,autowire,autowire,parent,defaults,null,parent,defaults,get,autowire,defaults,set,autowire,autowire,if,root,has,attribute,defaults,set,autowire,candidates,root,get,attribute,else,if,parent,defaults,null,defaults,set,autowire,candidates,parent,defaults,get,autowire,candidates,if,root,has,attribute,defaults,set,init,method,root,get,attribute,else,if,parent,defaults,null,defaults,set,init,method,parent,defaults,get,init,method,if,root,has,attribute,defaults,set,destroy,method,root,get,attribute,else,if,parent,defaults,null,defaults,set,destroy,method,parent,defaults,get,destroy,method,defaults,set,source,this,reader,context,extract,source,root
BeanDefinitionParserDelegate -> @Nullable 	protected Object extractSource(Element ele);1496837955;Invoke the {@link org.springframework.beans.factory.parsing.SourceExtractor}_to pull the source metadata from the supplied {@link Element}.;@Nullable_	protected Object extractSource(Element ele) {_		return this.readerContext.extractSource(ele)__	};invoke,the,link,org,springframework,beans,factory,parsing,source,extractor,to,pull,the,source,metadata,from,the,supplied,link,element;nullable,protected,object,extract,source,element,ele,return,this,reader,context,extract,source,ele
BeanDefinitionParserDelegate -> @Nullable 	protected Object extractSource(Element ele);1503008029;Invoke the {@link org.springframework.beans.factory.parsing.SourceExtractor}_to pull the source metadata from the supplied {@link Element}.;@Nullable_	protected Object extractSource(Element ele) {_		return this.readerContext.extractSource(ele)__	};invoke,the,link,org,springframework,beans,factory,parsing,source,extractor,to,pull,the,source,metadata,from,the,supplied,link,element;nullable,protected,object,extract,source,element,ele,return,this,reader,context,extract,source,ele
BeanDefinitionParserDelegate -> @Nullable 	protected Object extractSource(Element ele);1519513303;Invoke the {@link org.springframework.beans.factory.parsing.SourceExtractor}_to pull the source metadata from the supplied {@link Element}.;@Nullable_	protected Object extractSource(Element ele) {_		return this.readerContext.extractSource(ele)__	};invoke,the,link,org,springframework,beans,factory,parsing,source,extractor,to,pull,the,source,metadata,from,the,supplied,link,element;nullable,protected,object,extract,source,element,ele,return,this,reader,context,extract,source,ele
BeanDefinitionParserDelegate -> @Nullable 	protected Object extractSource(Element ele);1530174524;Invoke the {@link org.springframework.beans.factory.parsing.SourceExtractor}_to pull the source metadata from the supplied {@link Element}.;@Nullable_	protected Object extractSource(Element ele) {_		return this.readerContext.extractSource(ele)__	};invoke,the,link,org,springframework,beans,factory,parsing,source,extractor,to,pull,the,source,metadata,from,the,supplied,link,element;nullable,protected,object,extract,source,element,ele,return,this,reader,context,extract,source,ele
BeanDefinitionParserDelegate -> @Nullable 	protected Object extractSource(Element ele);1530190293;Invoke the {@link org.springframework.beans.factory.parsing.SourceExtractor}_to pull the source metadata from the supplied {@link Element}.;@Nullable_	protected Object extractSource(Element ele) {_		return this.readerContext.extractSource(ele)__	};invoke,the,link,org,springframework,beans,factory,parsing,source,extractor,to,pull,the,source,metadata,from,the,supplied,link,element;nullable,protected,object,extract,source,element,ele,return,this,reader,context,extract,source,ele
BeanDefinitionParserDelegate -> @Nullable 	protected Object extractSource(Element ele);1532706365;Invoke the {@link org.springframework.beans.factory.parsing.SourceExtractor}_to pull the source metadata from the supplied {@link Element}.;@Nullable_	protected Object extractSource(Element ele) {_		return this.readerContext.extractSource(ele)__	};invoke,the,link,org,springframework,beans,factory,parsing,source,extractor,to,pull,the,source,metadata,from,the,supplied,link,element;nullable,protected,object,extract,source,element,ele,return,this,reader,context,extract,source,ele
BeanDefinitionParserDelegate -> @Nullable 	protected Object extractSource(Element ele);1546958161;Invoke the {@link org.springframework.beans.factory.parsing.SourceExtractor}_to pull the source metadata from the supplied {@link Element}.;@Nullable_	protected Object extractSource(Element ele) {_		return this.readerContext.extractSource(ele)__	};invoke,the,link,org,springframework,beans,factory,parsing,source,extractor,to,pull,the,source,metadata,from,the,supplied,link,element;nullable,protected,object,extract,source,element,ele,return,this,reader,context,extract,source,ele
BeanDefinitionParserDelegate -> public Object parseValueElement(Element ele, String defaultTypeName);1328020251;Return a typed String value Object for the given value element.;public Object parseValueElement(Element ele, String defaultTypeName) {_		_		String value = DomUtils.getTextValue(ele)__		String specifiedTypeName = ele.getAttribute(TYPE_ATTRIBUTE)__		String typeName = specifiedTypeName__		if (!StringUtils.hasText(typeName)) {_			typeName = defaultTypeName__		}_		try {_			TypedStringValue typedValue = buildTypedStringValue(value, typeName)__			typedValue.setSource(extractSource(ele))__			typedValue.setSpecifiedTypeName(specifiedTypeName)__			return typedValue__		}_		catch (ClassNotFoundException ex) {_			error("Type class [" + typeName + "] not found for <value> element", ele, ex)__			return value__		}_	};return,a,typed,string,value,object,for,the,given,value,element;public,object,parse,value,element,element,ele,string,default,type,name,string,value,dom,utils,get,text,value,ele,string,specified,type,name,ele,get,attribute,string,type,name,specified,type,name,if,string,utils,has,text,type,name,type,name,default,type,name,try,typed,string,value,typed,value,build,typed,string,value,value,type,name,typed,value,set,source,extract,source,ele,typed,value,set,specified,type,name,specified,type,name,return,typed,value,catch,class,not,found,exception,ex,error,type,class,type,name,not,found,for,value,element,ele,ex,return,value
BeanDefinitionParserDelegate -> public Object parseValueElement(Element ele, String defaultTypeName);1335774711;Return a typed String value Object for the given value element.;public Object parseValueElement(Element ele, String defaultTypeName) {_		_		String value = DomUtils.getTextValue(ele)__		String specifiedTypeName = ele.getAttribute(TYPE_ATTRIBUTE)__		String typeName = specifiedTypeName__		if (!StringUtils.hasText(typeName)) {_			typeName = defaultTypeName__		}_		try {_			TypedStringValue typedValue = buildTypedStringValue(value, typeName)__			typedValue.setSource(extractSource(ele))__			typedValue.setSpecifiedTypeName(specifiedTypeName)__			return typedValue__		}_		catch (ClassNotFoundException ex) {_			error("Type class [" + typeName + "] not found for <value> element", ele, ex)__			return value__		}_	};return,a,typed,string,value,object,for,the,given,value,element;public,object,parse,value,element,element,ele,string,default,type,name,string,value,dom,utils,get,text,value,ele,string,specified,type,name,ele,get,attribute,string,type,name,specified,type,name,if,string,utils,has,text,type,name,type,name,default,type,name,try,typed,string,value,typed,value,build,typed,string,value,value,type,name,typed,value,set,source,extract,source,ele,typed,value,set,specified,type,name,specified,type,name,return,typed,value,catch,class,not,found,exception,ex,error,type,class,type,name,not,found,for,value,element,ele,ex,return,value
BeanDefinitionParserDelegate -> public Object parseValueElement(Element ele, String defaultTypeName);1337341719;Return a typed String value Object for the given value element.;public Object parseValueElement(Element ele, String defaultTypeName) {_		_		String value = DomUtils.getTextValue(ele)__		String specifiedTypeName = ele.getAttribute(TYPE_ATTRIBUTE)__		String typeName = specifiedTypeName__		if (!StringUtils.hasText(typeName)) {_			typeName = defaultTypeName__		}_		try {_			TypedStringValue typedValue = buildTypedStringValue(value, typeName)__			typedValue.setSource(extractSource(ele))__			typedValue.setSpecifiedTypeName(specifiedTypeName)__			return typedValue__		}_		catch (ClassNotFoundException ex) {_			error("Type class [" + typeName + "] not found for <value> element", ele, ex)__			return value__		}_	};return,a,typed,string,value,object,for,the,given,value,element;public,object,parse,value,element,element,ele,string,default,type,name,string,value,dom,utils,get,text,value,ele,string,specified,type,name,ele,get,attribute,string,type,name,specified,type,name,if,string,utils,has,text,type,name,type,name,default,type,name,try,typed,string,value,typed,value,build,typed,string,value,value,type,name,typed,value,set,source,extract,source,ele,typed,value,set,specified,type,name,specified,type,name,return,typed,value,catch,class,not,found,exception,ex,error,type,class,type,name,not,found,for,value,element,ele,ex,return,value
BeanDefinitionParserDelegate -> public Object parseValueElement(Element ele, String defaultTypeName);1351392612;Return a typed String value Object for the given value element.;public Object parseValueElement(Element ele, String defaultTypeName) {_		_		String value = DomUtils.getTextValue(ele)__		String specifiedTypeName = ele.getAttribute(TYPE_ATTRIBUTE)__		String typeName = specifiedTypeName__		if (!StringUtils.hasText(typeName)) {_			typeName = defaultTypeName__		}_		try {_			TypedStringValue typedValue = buildTypedStringValue(value, typeName)__			typedValue.setSource(extractSource(ele))__			typedValue.setSpecifiedTypeName(specifiedTypeName)__			return typedValue__		}_		catch (ClassNotFoundException ex) {_			error("Type class [" + typeName + "] not found for <value> element", ele, ex)__			return value__		}_	};return,a,typed,string,value,object,for,the,given,value,element;public,object,parse,value,element,element,ele,string,default,type,name,string,value,dom,utils,get,text,value,ele,string,specified,type,name,ele,get,attribute,string,type,name,specified,type,name,if,string,utils,has,text,type,name,type,name,default,type,name,try,typed,string,value,typed,value,build,typed,string,value,value,type,name,typed,value,set,source,extract,source,ele,typed,value,set,specified,type,name,specified,type,name,return,typed,value,catch,class,not,found,exception,ex,error,type,class,type,name,not,found,for,value,element,ele,ex,return,value
BeanDefinitionParserDelegate -> public Object parseValueElement(Element ele, String defaultTypeName);1351696936;Return a typed String value Object for the given value element.;public Object parseValueElement(Element ele, String defaultTypeName) {_		_		String value = DomUtils.getTextValue(ele)__		String specifiedTypeName = ele.getAttribute(TYPE_ATTRIBUTE)__		String typeName = specifiedTypeName__		if (!StringUtils.hasText(typeName)) {_			typeName = defaultTypeName__		}_		try {_			TypedStringValue typedValue = buildTypedStringValue(value, typeName)__			typedValue.setSource(extractSource(ele))__			typedValue.setSpecifiedTypeName(specifiedTypeName)__			return typedValue__		}_		catch (ClassNotFoundException ex) {_			error("Type class [" + typeName + "] not found for <value> element", ele, ex)__			return value__		}_	};return,a,typed,string,value,object,for,the,given,value,element;public,object,parse,value,element,element,ele,string,default,type,name,string,value,dom,utils,get,text,value,ele,string,specified,type,name,ele,get,attribute,string,type,name,specified,type,name,if,string,utils,has,text,type,name,type,name,default,type,name,try,typed,string,value,typed,value,build,typed,string,value,value,type,name,typed,value,set,source,extract,source,ele,typed,value,set,specified,type,name,specified,type,name,return,typed,value,catch,class,not,found,exception,ex,error,type,class,type,name,not,found,for,value,element,ele,ex,return,value
BeanDefinitionParserDelegate -> public Object parseValueElement(Element ele, String defaultTypeName);1356735495;Return a typed String value Object for the given value element.;public Object parseValueElement(Element ele, String defaultTypeName) {_		_		String value = DomUtils.getTextValue(ele)__		String specifiedTypeName = ele.getAttribute(TYPE_ATTRIBUTE)__		String typeName = specifiedTypeName__		if (!StringUtils.hasText(typeName)) {_			typeName = defaultTypeName__		}_		try {_			TypedStringValue typedValue = buildTypedStringValue(value, typeName)__			typedValue.setSource(extractSource(ele))__			typedValue.setSpecifiedTypeName(specifiedTypeName)__			return typedValue__		}_		catch (ClassNotFoundException ex) {_			error("Type class [" + typeName + "] not found for <value> element", ele, ex)__			return value__		}_	};return,a,typed,string,value,object,for,the,given,value,element;public,object,parse,value,element,element,ele,string,default,type,name,string,value,dom,utils,get,text,value,ele,string,specified,type,name,ele,get,attribute,string,type,name,specified,type,name,if,string,utils,has,text,type,name,type,name,default,type,name,try,typed,string,value,typed,value,build,typed,string,value,value,type,name,typed,value,set,source,extract,source,ele,typed,value,set,specified,type,name,specified,type,name,return,typed,value,catch,class,not,found,exception,ex,error,type,class,type,name,not,found,for,value,element,ele,ex,return,value
BeanDefinitionParserDelegate -> public Object parseValueElement(Element ele, String defaultTypeName);1357119417;Return a typed String value Object for the given value element.;public Object parseValueElement(Element ele, String defaultTypeName) {_		_		String value = DomUtils.getTextValue(ele)__		String specifiedTypeName = ele.getAttribute(TYPE_ATTRIBUTE)__		String typeName = specifiedTypeName__		if (!StringUtils.hasText(typeName)) {_			typeName = defaultTypeName__		}_		try {_			TypedStringValue typedValue = buildTypedStringValue(value, typeName)__			typedValue.setSource(extractSource(ele))__			typedValue.setSpecifiedTypeName(specifiedTypeName)__			return typedValue__		}_		catch (ClassNotFoundException ex) {_			error("Type class [" + typeName + "] not found for <value> element", ele, ex)__			return value__		}_	};return,a,typed,string,value,object,for,the,given,value,element;public,object,parse,value,element,element,ele,string,default,type,name,string,value,dom,utils,get,text,value,ele,string,specified,type,name,ele,get,attribute,string,type,name,specified,type,name,if,string,utils,has,text,type,name,type,name,default,type,name,try,typed,string,value,typed,value,build,typed,string,value,value,type,name,typed,value,set,source,extract,source,ele,typed,value,set,specified,type,name,specified,type,name,return,typed,value,catch,class,not,found,exception,ex,error,type,class,type,name,not,found,for,value,element,ele,ex,return,value
BeanDefinitionParserDelegate -> public Object parseValueElement(Element ele, String defaultTypeName);1367943112;Return a typed String value Object for the given value element.;public Object parseValueElement(Element ele, String defaultTypeName) {_		_		String value = DomUtils.getTextValue(ele)__		String specifiedTypeName = ele.getAttribute(TYPE_ATTRIBUTE)__		String typeName = specifiedTypeName__		if (!StringUtils.hasText(typeName)) {_			typeName = defaultTypeName__		}_		try {_			TypedStringValue typedValue = buildTypedStringValue(value, typeName)__			typedValue.setSource(extractSource(ele))__			typedValue.setSpecifiedTypeName(specifiedTypeName)__			return typedValue__		}_		catch (ClassNotFoundException ex) {_			error("Type class [" + typeName + "] not found for <value> element", ele, ex)__			return value__		}_	};return,a,typed,string,value,object,for,the,given,value,element;public,object,parse,value,element,element,ele,string,default,type,name,string,value,dom,utils,get,text,value,ele,string,specified,type,name,ele,get,attribute,string,type,name,specified,type,name,if,string,utils,has,text,type,name,type,name,default,type,name,try,typed,string,value,typed,value,build,typed,string,value,value,type,name,typed,value,set,source,extract,source,ele,typed,value,set,specified,type,name,specified,type,name,return,typed,value,catch,class,not,found,exception,ex,error,type,class,type,name,not,found,for,value,element,ele,ex,return,value
BeanDefinitionParserDelegate -> public Object parseValueElement(Element ele, String defaultTypeName);1382030648;Return a typed String value Object for the given value element.;public Object parseValueElement(Element ele, String defaultTypeName) {_		_		String value = DomUtils.getTextValue(ele)__		String specifiedTypeName = ele.getAttribute(TYPE_ATTRIBUTE)__		String typeName = specifiedTypeName__		if (!StringUtils.hasText(typeName)) {_			typeName = defaultTypeName__		}_		try {_			TypedStringValue typedValue = buildTypedStringValue(value, typeName)__			typedValue.setSource(extractSource(ele))__			typedValue.setSpecifiedTypeName(specifiedTypeName)__			return typedValue__		}_		catch (ClassNotFoundException ex) {_			error("Type class [" + typeName + "] not found for <value> element", ele, ex)__			return value__		}_	};return,a,typed,string,value,object,for,the,given,value,element;public,object,parse,value,element,element,ele,string,default,type,name,string,value,dom,utils,get,text,value,ele,string,specified,type,name,ele,get,attribute,string,type,name,specified,type,name,if,string,utils,has,text,type,name,type,name,default,type,name,try,typed,string,value,typed,value,build,typed,string,value,value,type,name,typed,value,set,source,extract,source,ele,typed,value,set,specified,type,name,specified,type,name,return,typed,value,catch,class,not,found,exception,ex,error,type,class,type,name,not,found,for,value,element,ele,ex,return,value
BeanDefinitionParserDelegate -> public Object parseValueElement(Element ele, String defaultTypeName);1385412762;Return a typed String value Object for the given value element.;public Object parseValueElement(Element ele, String defaultTypeName) {_		_		String value = DomUtils.getTextValue(ele)__		String specifiedTypeName = ele.getAttribute(TYPE_ATTRIBUTE)__		String typeName = specifiedTypeName__		if (!StringUtils.hasText(typeName)) {_			typeName = defaultTypeName__		}_		try {_			TypedStringValue typedValue = buildTypedStringValue(value, typeName)__			typedValue.setSource(extractSource(ele))__			typedValue.setSpecifiedTypeName(specifiedTypeName)__			return typedValue__		}_		catch (ClassNotFoundException ex) {_			error("Type class [" + typeName + "] not found for <value> element", ele, ex)__			return value__		}_	};return,a,typed,string,value,object,for,the,given,value,element;public,object,parse,value,element,element,ele,string,default,type,name,string,value,dom,utils,get,text,value,ele,string,specified,type,name,ele,get,attribute,string,type,name,specified,type,name,if,string,utils,has,text,type,name,type,name,default,type,name,try,typed,string,value,typed,value,build,typed,string,value,value,type,name,typed,value,set,source,extract,source,ele,typed,value,set,specified,type,name,specified,type,name,return,typed,value,catch,class,not,found,exception,ex,error,type,class,type,name,not,found,for,value,element,ele,ex,return,value
BeanDefinitionParserDelegate -> public Object parseValueElement(Element ele, String defaultTypeName);1410953197;Return a typed String value Object for the given value element.;public Object parseValueElement(Element ele, String defaultTypeName) {_		_		String value = DomUtils.getTextValue(ele)__		String specifiedTypeName = ele.getAttribute(TYPE_ATTRIBUTE)__		String typeName = specifiedTypeName__		if (!StringUtils.hasText(typeName)) {_			typeName = defaultTypeName__		}_		try {_			TypedStringValue typedValue = buildTypedStringValue(value, typeName)__			typedValue.setSource(extractSource(ele))__			typedValue.setSpecifiedTypeName(specifiedTypeName)__			return typedValue__		}_		catch (ClassNotFoundException ex) {_			error("Type class [" + typeName + "] not found for <value> element", ele, ex)__			return value__		}_	};return,a,typed,string,value,object,for,the,given,value,element;public,object,parse,value,element,element,ele,string,default,type,name,string,value,dom,utils,get,text,value,ele,string,specified,type,name,ele,get,attribute,string,type,name,specified,type,name,if,string,utils,has,text,type,name,type,name,default,type,name,try,typed,string,value,typed,value,build,typed,string,value,value,type,name,typed,value,set,source,extract,source,ele,typed,value,set,specified,type,name,specified,type,name,return,typed,value,catch,class,not,found,exception,ex,error,type,class,type,name,not,found,for,value,element,ele,ex,return,value
BeanDefinitionParserDelegate -> public Object parseValueElement(Element ele, String defaultTypeName);1411599760;Return a typed String value Object for the given value element.;public Object parseValueElement(Element ele, String defaultTypeName) {_		_		String value = DomUtils.getTextValue(ele)__		String specifiedTypeName = ele.getAttribute(TYPE_ATTRIBUTE)__		String typeName = specifiedTypeName__		if (!StringUtils.hasText(typeName)) {_			typeName = defaultTypeName__		}_		try {_			TypedStringValue typedValue = buildTypedStringValue(value, typeName)__			typedValue.setSource(extractSource(ele))__			typedValue.setSpecifiedTypeName(specifiedTypeName)__			return typedValue__		}_		catch (ClassNotFoundException ex) {_			error("Type class [" + typeName + "] not found for <value> element", ele, ex)__			return value__		}_	};return,a,typed,string,value,object,for,the,given,value,element;public,object,parse,value,element,element,ele,string,default,type,name,string,value,dom,utils,get,text,value,ele,string,specified,type,name,ele,get,attribute,string,type,name,specified,type,name,if,string,utils,has,text,type,name,type,name,default,type,name,try,typed,string,value,typed,value,build,typed,string,value,value,type,name,typed,value,set,source,extract,source,ele,typed,value,set,specified,type,name,specified,type,name,return,typed,value,catch,class,not,found,exception,ex,error,type,class,type,name,not,found,for,value,element,ele,ex,return,value
BeanDefinitionParserDelegate -> public Object parseValueElement(Element ele, String defaultTypeName);1419966315;Return a typed String value Object for the given value element.;public Object parseValueElement(Element ele, String defaultTypeName) {_		_		String value = DomUtils.getTextValue(ele)__		String specifiedTypeName = ele.getAttribute(TYPE_ATTRIBUTE)__		String typeName = specifiedTypeName__		if (!StringUtils.hasText(typeName)) {_			typeName = defaultTypeName__		}_		try {_			TypedStringValue typedValue = buildTypedStringValue(value, typeName)__			typedValue.setSource(extractSource(ele))__			typedValue.setSpecifiedTypeName(specifiedTypeName)__			return typedValue__		}_		catch (ClassNotFoundException ex) {_			error("Type class [" + typeName + "] not found for <value> element", ele, ex)__			return value__		}_	};return,a,typed,string,value,object,for,the,given,value,element;public,object,parse,value,element,element,ele,string,default,type,name,string,value,dom,utils,get,text,value,ele,string,specified,type,name,ele,get,attribute,string,type,name,specified,type,name,if,string,utils,has,text,type,name,type,name,default,type,name,try,typed,string,value,typed,value,build,typed,string,value,value,type,name,typed,value,set,source,extract,source,ele,typed,value,set,specified,type,name,specified,type,name,return,typed,value,catch,class,not,found,exception,ex,error,type,class,type,name,not,found,for,value,element,ele,ex,return,value
BeanDefinitionParserDelegate -> public Object parseValueElement(Element ele, String defaultTypeName);1431958785;Return a typed String value Object for the given value element.;public Object parseValueElement(Element ele, String defaultTypeName) {_		_		String value = DomUtils.getTextValue(ele)__		String specifiedTypeName = ele.getAttribute(TYPE_ATTRIBUTE)__		String typeName = specifiedTypeName__		if (!StringUtils.hasText(typeName)) {_			typeName = defaultTypeName__		}_		try {_			TypedStringValue typedValue = buildTypedStringValue(value, typeName)__			typedValue.setSource(extractSource(ele))__			typedValue.setSpecifiedTypeName(specifiedTypeName)__			return typedValue__		}_		catch (ClassNotFoundException ex) {_			error("Type class [" + typeName + "] not found for <value> element", ele, ex)__			return value__		}_	};return,a,typed,string,value,object,for,the,given,value,element;public,object,parse,value,element,element,ele,string,default,type,name,string,value,dom,utils,get,text,value,ele,string,specified,type,name,ele,get,attribute,string,type,name,specified,type,name,if,string,utils,has,text,type,name,type,name,default,type,name,try,typed,string,value,typed,value,build,typed,string,value,value,type,name,typed,value,set,source,extract,source,ele,typed,value,set,specified,type,name,specified,type,name,return,typed,value,catch,class,not,found,exception,ex,error,type,class,type,name,not,found,for,value,element,ele,ex,return,value
BeanDefinitionParserDelegate -> public Object parseValueElement(Element ele, String defaultTypeName);1432135182;Return a typed String value Object for the given value element.;public Object parseValueElement(Element ele, String defaultTypeName) {_		_		String value = DomUtils.getTextValue(ele)__		String specifiedTypeName = ele.getAttribute(TYPE_ATTRIBUTE)__		String typeName = specifiedTypeName__		if (!StringUtils.hasText(typeName)) {_			typeName = defaultTypeName__		}_		try {_			TypedStringValue typedValue = buildTypedStringValue(value, typeName)__			typedValue.setSource(extractSource(ele))__			typedValue.setSpecifiedTypeName(specifiedTypeName)__			return typedValue__		}_		catch (ClassNotFoundException ex) {_			error("Type class [" + typeName + "] not found for <value> element", ele, ex)__			return value__		}_	};return,a,typed,string,value,object,for,the,given,value,element;public,object,parse,value,element,element,ele,string,default,type,name,string,value,dom,utils,get,text,value,ele,string,specified,type,name,ele,get,attribute,string,type,name,specified,type,name,if,string,utils,has,text,type,name,type,name,default,type,name,try,typed,string,value,typed,value,build,typed,string,value,value,type,name,typed,value,set,source,extract,source,ele,typed,value,set,specified,type,name,specified,type,name,return,typed,value,catch,class,not,found,exception,ex,error,type,class,type,name,not,found,for,value,element,ele,ex,return,value
BeanDefinitionParserDelegate -> public Object parseValueElement(Element ele, String defaultTypeName);1447323728;Return a typed String value Object for the given value element.;public Object parseValueElement(Element ele, String defaultTypeName) {_		_		String value = DomUtils.getTextValue(ele)__		String specifiedTypeName = ele.getAttribute(TYPE_ATTRIBUTE)__		String typeName = specifiedTypeName__		if (!StringUtils.hasText(typeName)) {_			typeName = defaultTypeName__		}_		try {_			TypedStringValue typedValue = buildTypedStringValue(value, typeName)__			typedValue.setSource(extractSource(ele))__			typedValue.setSpecifiedTypeName(specifiedTypeName)__			return typedValue__		}_		catch (ClassNotFoundException ex) {_			error("Type class [" + typeName + "] not found for <value> element", ele, ex)__			return value__		}_	};return,a,typed,string,value,object,for,the,given,value,element;public,object,parse,value,element,element,ele,string,default,type,name,string,value,dom,utils,get,text,value,ele,string,specified,type,name,ele,get,attribute,string,type,name,specified,type,name,if,string,utils,has,text,type,name,type,name,default,type,name,try,typed,string,value,typed,value,build,typed,string,value,value,type,name,typed,value,set,source,extract,source,ele,typed,value,set,specified,type,name,specified,type,name,return,typed,value,catch,class,not,found,exception,ex,error,type,class,type,name,not,found,for,value,element,ele,ex,return,value
BeanDefinitionParserDelegate -> public Object parseValueElement(Element ele, String defaultTypeName);1467726769;Return a typed String value Object for the given value element.;public Object parseValueElement(Element ele, String defaultTypeName) {_		_		String value = DomUtils.getTextValue(ele)__		String specifiedTypeName = ele.getAttribute(TYPE_ATTRIBUTE)__		String typeName = specifiedTypeName__		if (!StringUtils.hasText(typeName)) {_			typeName = defaultTypeName__		}_		try {_			TypedStringValue typedValue = buildTypedStringValue(value, typeName)__			typedValue.setSource(extractSource(ele))__			typedValue.setSpecifiedTypeName(specifiedTypeName)__			return typedValue__		}_		catch (ClassNotFoundException ex) {_			error("Type class [" + typeName + "] not found for <value> element", ele, ex)__			return value__		}_	};return,a,typed,string,value,object,for,the,given,value,element;public,object,parse,value,element,element,ele,string,default,type,name,string,value,dom,utils,get,text,value,ele,string,specified,type,name,ele,get,attribute,string,type,name,specified,type,name,if,string,utils,has,text,type,name,type,name,default,type,name,try,typed,string,value,typed,value,build,typed,string,value,value,type,name,typed,value,set,source,extract,source,ele,typed,value,set,specified,type,name,specified,type,name,return,typed,value,catch,class,not,found,exception,ex,error,type,class,type,name,not,found,for,value,element,ele,ex,return,value
BeanDefinitionParserDelegate -> public Object parseValueElement(Element ele, String defaultTypeName);1467730834;Return a typed String value Object for the given value element.;public Object parseValueElement(Element ele, String defaultTypeName) {_		_		String value = DomUtils.getTextValue(ele)__		String specifiedTypeName = ele.getAttribute(TYPE_ATTRIBUTE)__		String typeName = specifiedTypeName__		if (!StringUtils.hasText(typeName)) {_			typeName = defaultTypeName__		}_		try {_			TypedStringValue typedValue = buildTypedStringValue(value, typeName)__			typedValue.setSource(extractSource(ele))__			typedValue.setSpecifiedTypeName(specifiedTypeName)__			return typedValue__		}_		catch (ClassNotFoundException ex) {_			error("Type class [" + typeName + "] not found for <value> element", ele, ex)__			return value__		}_	};return,a,typed,string,value,object,for,the,given,value,element;public,object,parse,value,element,element,ele,string,default,type,name,string,value,dom,utils,get,text,value,ele,string,specified,type,name,ele,get,attribute,string,type,name,specified,type,name,if,string,utils,has,text,type,name,type,name,default,type,name,try,typed,string,value,typed,value,build,typed,string,value,value,type,name,typed,value,set,source,extract,source,ele,typed,value,set,specified,type,name,specified,type,name,return,typed,value,catch,class,not,found,exception,ex,error,type,class,type,name,not,found,for,value,element,ele,ex,return,value
BeanDefinitionParserDelegate -> public Object parseValueElement(Element ele, String defaultTypeName);1467744603;Return a typed String value Object for the given value element.;public Object parseValueElement(Element ele, String defaultTypeName) {_		_		String value = DomUtils.getTextValue(ele)__		String specifiedTypeName = ele.getAttribute(TYPE_ATTRIBUTE)__		String typeName = specifiedTypeName__		if (!StringUtils.hasText(typeName)) {_			typeName = defaultTypeName__		}_		try {_			TypedStringValue typedValue = buildTypedStringValue(value, typeName)__			typedValue.setSource(extractSource(ele))__			typedValue.setSpecifiedTypeName(specifiedTypeName)__			return typedValue__		}_		catch (ClassNotFoundException ex) {_			error("Type class [" + typeName + "] not found for <value> element", ele, ex)__			return value__		}_	};return,a,typed,string,value,object,for,the,given,value,element;public,object,parse,value,element,element,ele,string,default,type,name,string,value,dom,utils,get,text,value,ele,string,specified,type,name,ele,get,attribute,string,type,name,specified,type,name,if,string,utils,has,text,type,name,type,name,default,type,name,try,typed,string,value,typed,value,build,typed,string,value,value,type,name,typed,value,set,source,extract,source,ele,typed,value,set,specified,type,name,specified,type,name,return,typed,value,catch,class,not,found,exception,ex,error,type,class,type,name,not,found,for,value,element,ele,ex,return,value
BeanDefinitionParserDelegate -> public Object parseValueElement(Element ele, String defaultTypeName);1487245676;Return a typed String value Object for the given value element.;public Object parseValueElement(Element ele, String defaultTypeName) {_		_		String value = DomUtils.getTextValue(ele)__		String specifiedTypeName = ele.getAttribute(TYPE_ATTRIBUTE)__		String typeName = specifiedTypeName__		if (!StringUtils.hasText(typeName)) {_			typeName = defaultTypeName__		}_		try {_			TypedStringValue typedValue = buildTypedStringValue(value, typeName)__			typedValue.setSource(extractSource(ele))__			typedValue.setSpecifiedTypeName(specifiedTypeName)__			return typedValue__		}_		catch (ClassNotFoundException ex) {_			error("Type class [" + typeName + "] not found for <value> element", ele, ex)__			return value__		}_	};return,a,typed,string,value,object,for,the,given,value,element;public,object,parse,value,element,element,ele,string,default,type,name,string,value,dom,utils,get,text,value,ele,string,specified,type,name,ele,get,attribute,string,type,name,specified,type,name,if,string,utils,has,text,type,name,type,name,default,type,name,try,typed,string,value,typed,value,build,typed,string,value,value,type,name,typed,value,set,source,extract,source,ele,typed,value,set,specified,type,name,specified,type,name,return,typed,value,catch,class,not,found,exception,ex,error,type,class,type,name,not,found,for,value,element,ele,ex,return,value
BeanDefinitionParserDelegate -> public Object parseValueElement(Element ele, String defaultTypeName);1487255851;Return a typed String value Object for the given value element.;public Object parseValueElement(Element ele, String defaultTypeName) {_		_		String value = DomUtils.getTextValue(ele)__		String specifiedTypeName = ele.getAttribute(TYPE_ATTRIBUTE)__		String typeName = specifiedTypeName__		if (!StringUtils.hasText(typeName)) {_			typeName = defaultTypeName__		}_		try {_			TypedStringValue typedValue = buildTypedStringValue(value, typeName)__			typedValue.setSource(extractSource(ele))__			typedValue.setSpecifiedTypeName(specifiedTypeName)__			return typedValue__		}_		catch (ClassNotFoundException ex) {_			error("Type class [" + typeName + "] not found for <value> element", ele, ex)__			return value__		}_	};return,a,typed,string,value,object,for,the,given,value,element;public,object,parse,value,element,element,ele,string,default,type,name,string,value,dom,utils,get,text,value,ele,string,specified,type,name,ele,get,attribute,string,type,name,specified,type,name,if,string,utils,has,text,type,name,type,name,default,type,name,try,typed,string,value,typed,value,build,typed,string,value,value,type,name,typed,value,set,source,extract,source,ele,typed,value,set,specified,type,name,specified,type,name,return,typed,value,catch,class,not,found,exception,ex,error,type,class,type,name,not,found,for,value,element,ele,ex,return,value
BeanDefinitionParserDelegate -> public Object parseValueElement(Element ele, String defaultTypeName);1494586217;Return a typed String value Object for the given value element.;public Object parseValueElement(Element ele, String defaultTypeName) {_		_		String value = DomUtils.getTextValue(ele)__		String specifiedTypeName = ele.getAttribute(TYPE_ATTRIBUTE)__		String typeName = specifiedTypeName__		if (!StringUtils.hasText(typeName)) {_			typeName = defaultTypeName__		}_		try {_			TypedStringValue typedValue = buildTypedStringValue(value, typeName)__			typedValue.setSource(extractSource(ele))__			typedValue.setSpecifiedTypeName(specifiedTypeName)__			return typedValue__		}_		catch (ClassNotFoundException ex) {_			error("Type class [" + typeName + "] not found for <value> element", ele, ex)__			return value__		}_	};return,a,typed,string,value,object,for,the,given,value,element;public,object,parse,value,element,element,ele,string,default,type,name,string,value,dom,utils,get,text,value,ele,string,specified,type,name,ele,get,attribute,string,type,name,specified,type,name,if,string,utils,has,text,type,name,type,name,default,type,name,try,typed,string,value,typed,value,build,typed,string,value,value,type,name,typed,value,set,source,extract,source,ele,typed,value,set,specified,type,name,specified,type,name,return,typed,value,catch,class,not,found,exception,ex,error,type,class,type,name,not,found,for,value,element,ele,ex,return,value
BeanDefinitionParserDelegate -> public Object parseValueElement(Element ele, String defaultTypeName);1495868221;Return a typed String value Object for the given value element.;public Object parseValueElement(Element ele, String defaultTypeName) {_		_		String value = DomUtils.getTextValue(ele)__		String specifiedTypeName = ele.getAttribute(TYPE_ATTRIBUTE)__		String typeName = specifiedTypeName__		if (!StringUtils.hasText(typeName)) {_			typeName = defaultTypeName__		}_		try {_			TypedStringValue typedValue = buildTypedStringValue(value, typeName)__			typedValue.setSource(extractSource(ele))__			typedValue.setSpecifiedTypeName(specifiedTypeName)__			return typedValue__		}_		catch (ClassNotFoundException ex) {_			error("Type class [" + typeName + "] not found for <value> element", ele, ex)__			return value__		}_	};return,a,typed,string,value,object,for,the,given,value,element;public,object,parse,value,element,element,ele,string,default,type,name,string,value,dom,utils,get,text,value,ele,string,specified,type,name,ele,get,attribute,string,type,name,specified,type,name,if,string,utils,has,text,type,name,type,name,default,type,name,try,typed,string,value,typed,value,build,typed,string,value,value,type,name,typed,value,set,source,extract,source,ele,typed,value,set,specified,type,name,specified,type,name,return,typed,value,catch,class,not,found,exception,ex,error,type,class,type,name,not,found,for,value,element,ele,ex,return,value
BeanDefinitionParserDelegate -> public Object parseValueElement(Element ele, String defaultTypeName);1496259743;Return a typed String value Object for the given value element.;public Object parseValueElement(Element ele, String defaultTypeName) {_		_		String value = DomUtils.getTextValue(ele)__		String specifiedTypeName = ele.getAttribute(TYPE_ATTRIBUTE)__		String typeName = specifiedTypeName__		if (!StringUtils.hasText(typeName)) {_			typeName = defaultTypeName__		}_		try {_			TypedStringValue typedValue = buildTypedStringValue(value, typeName)__			typedValue.setSource(extractSource(ele))__			typedValue.setSpecifiedTypeName(specifiedTypeName)__			return typedValue__		}_		catch (ClassNotFoundException ex) {_			error("Type class [" + typeName + "] not found for <value> element", ele, ex)__			return value__		}_	};return,a,typed,string,value,object,for,the,given,value,element;public,object,parse,value,element,element,ele,string,default,type,name,string,value,dom,utils,get,text,value,ele,string,specified,type,name,ele,get,attribute,string,type,name,specified,type,name,if,string,utils,has,text,type,name,type,name,default,type,name,try,typed,string,value,typed,value,build,typed,string,value,value,type,name,typed,value,set,source,extract,source,ele,typed,value,set,specified,type,name,specified,type,name,return,typed,value,catch,class,not,found,exception,ex,error,type,class,type,name,not,found,for,value,element,ele,ex,return,value
BeanDefinitionParserDelegate -> protected AbstractBeanDefinition createBeanDefinition(String className, String parentName) 			throws ClassNotFoundException;1328020251;Create a bean definition for the given class name and parent name._@param className the name of the bean class_@param parentName the name of the bean's parent bean_@return the newly created bean definition_@throws ClassNotFoundException if bean class resolution was attempted but failed;protected AbstractBeanDefinition createBeanDefinition(String className, String parentName)_			throws ClassNotFoundException {__		return BeanDefinitionReaderUtils.createBeanDefinition(_				parentName, className, this.readerContext.getBeanClassLoader())__	};create,a,bean,definition,for,the,given,class,name,and,parent,name,param,class,name,the,name,of,the,bean,class,param,parent,name,the,name,of,the,bean,s,parent,bean,return,the,newly,created,bean,definition,throws,class,not,found,exception,if,bean,class,resolution,was,attempted,but,failed;protected,abstract,bean,definition,create,bean,definition,string,class,name,string,parent,name,throws,class,not,found,exception,return,bean,definition,reader,utils,create,bean,definition,parent,name,class,name,this,reader,context,get,bean,class,loader
BeanDefinitionParserDelegate -> protected AbstractBeanDefinition createBeanDefinition(String className, String parentName) 			throws ClassNotFoundException;1335774711;Create a bean definition for the given class name and parent name._@param className the name of the bean class_@param parentName the name of the bean's parent bean_@return the newly created bean definition_@throws ClassNotFoundException if bean class resolution was attempted but failed;protected AbstractBeanDefinition createBeanDefinition(String className, String parentName)_			throws ClassNotFoundException {__		return BeanDefinitionReaderUtils.createBeanDefinition(_				parentName, className, this.readerContext.getBeanClassLoader())__	};create,a,bean,definition,for,the,given,class,name,and,parent,name,param,class,name,the,name,of,the,bean,class,param,parent,name,the,name,of,the,bean,s,parent,bean,return,the,newly,created,bean,definition,throws,class,not,found,exception,if,bean,class,resolution,was,attempted,but,failed;protected,abstract,bean,definition,create,bean,definition,string,class,name,string,parent,name,throws,class,not,found,exception,return,bean,definition,reader,utils,create,bean,definition,parent,name,class,name,this,reader,context,get,bean,class,loader
BeanDefinitionParserDelegate -> protected AbstractBeanDefinition createBeanDefinition(String className, String parentName) 			throws ClassNotFoundException;1337341719;Create a bean definition for the given class name and parent name._@param className the name of the bean class_@param parentName the name of the bean's parent bean_@return the newly created bean definition_@throws ClassNotFoundException if bean class resolution was attempted but failed;protected AbstractBeanDefinition createBeanDefinition(String className, String parentName)_			throws ClassNotFoundException {__		return BeanDefinitionReaderUtils.createBeanDefinition(_				parentName, className, this.readerContext.getBeanClassLoader())__	};create,a,bean,definition,for,the,given,class,name,and,parent,name,param,class,name,the,name,of,the,bean,class,param,parent,name,the,name,of,the,bean,s,parent,bean,return,the,newly,created,bean,definition,throws,class,not,found,exception,if,bean,class,resolution,was,attempted,but,failed;protected,abstract,bean,definition,create,bean,definition,string,class,name,string,parent,name,throws,class,not,found,exception,return,bean,definition,reader,utils,create,bean,definition,parent,name,class,name,this,reader,context,get,bean,class,loader
BeanDefinitionParserDelegate -> protected AbstractBeanDefinition createBeanDefinition(String className, String parentName) 			throws ClassNotFoundException;1351392612;Create a bean definition for the given class name and parent name._@param className the name of the bean class_@param parentName the name of the bean's parent bean_@return the newly created bean definition_@throws ClassNotFoundException if bean class resolution was attempted but failed;protected AbstractBeanDefinition createBeanDefinition(String className, String parentName)_			throws ClassNotFoundException {__		return BeanDefinitionReaderUtils.createBeanDefinition(_				parentName, className, this.readerContext.getBeanClassLoader())__	};create,a,bean,definition,for,the,given,class,name,and,parent,name,param,class,name,the,name,of,the,bean,class,param,parent,name,the,name,of,the,bean,s,parent,bean,return,the,newly,created,bean,definition,throws,class,not,found,exception,if,bean,class,resolution,was,attempted,but,failed;protected,abstract,bean,definition,create,bean,definition,string,class,name,string,parent,name,throws,class,not,found,exception,return,bean,definition,reader,utils,create,bean,definition,parent,name,class,name,this,reader,context,get,bean,class,loader
BeanDefinitionParserDelegate -> protected AbstractBeanDefinition createBeanDefinition(String className, String parentName) 			throws ClassNotFoundException;1351696936;Create a bean definition for the given class name and parent name._@param className the name of the bean class_@param parentName the name of the bean's parent bean_@return the newly created bean definition_@throws ClassNotFoundException if bean class resolution was attempted but failed;protected AbstractBeanDefinition createBeanDefinition(String className, String parentName)_			throws ClassNotFoundException {__		return BeanDefinitionReaderUtils.createBeanDefinition(_				parentName, className, this.readerContext.getBeanClassLoader())__	};create,a,bean,definition,for,the,given,class,name,and,parent,name,param,class,name,the,name,of,the,bean,class,param,parent,name,the,name,of,the,bean,s,parent,bean,return,the,newly,created,bean,definition,throws,class,not,found,exception,if,bean,class,resolution,was,attempted,but,failed;protected,abstract,bean,definition,create,bean,definition,string,class,name,string,parent,name,throws,class,not,found,exception,return,bean,definition,reader,utils,create,bean,definition,parent,name,class,name,this,reader,context,get,bean,class,loader
BeanDefinitionParserDelegate -> protected AbstractBeanDefinition createBeanDefinition(String className, String parentName) 			throws ClassNotFoundException;1356735495;Create a bean definition for the given class name and parent name._@param className the name of the bean class_@param parentName the name of the bean's parent bean_@return the newly created bean definition_@throws ClassNotFoundException if bean class resolution was attempted but failed;protected AbstractBeanDefinition createBeanDefinition(String className, String parentName)_			throws ClassNotFoundException {__		return BeanDefinitionReaderUtils.createBeanDefinition(_				parentName, className, this.readerContext.getBeanClassLoader())__	};create,a,bean,definition,for,the,given,class,name,and,parent,name,param,class,name,the,name,of,the,bean,class,param,parent,name,the,name,of,the,bean,s,parent,bean,return,the,newly,created,bean,definition,throws,class,not,found,exception,if,bean,class,resolution,was,attempted,but,failed;protected,abstract,bean,definition,create,bean,definition,string,class,name,string,parent,name,throws,class,not,found,exception,return,bean,definition,reader,utils,create,bean,definition,parent,name,class,name,this,reader,context,get,bean,class,loader
BeanDefinitionParserDelegate -> protected AbstractBeanDefinition createBeanDefinition(String className, String parentName) 			throws ClassNotFoundException;1357119417;Create a bean definition for the given class name and parent name._@param className the name of the bean class_@param parentName the name of the bean's parent bean_@return the newly created bean definition_@throws ClassNotFoundException if bean class resolution was attempted but failed;protected AbstractBeanDefinition createBeanDefinition(String className, String parentName)_			throws ClassNotFoundException {__		return BeanDefinitionReaderUtils.createBeanDefinition(_				parentName, className, this.readerContext.getBeanClassLoader())__	};create,a,bean,definition,for,the,given,class,name,and,parent,name,param,class,name,the,name,of,the,bean,class,param,parent,name,the,name,of,the,bean,s,parent,bean,return,the,newly,created,bean,definition,throws,class,not,found,exception,if,bean,class,resolution,was,attempted,but,failed;protected,abstract,bean,definition,create,bean,definition,string,class,name,string,parent,name,throws,class,not,found,exception,return,bean,definition,reader,utils,create,bean,definition,parent,name,class,name,this,reader,context,get,bean,class,loader
BeanDefinitionParserDelegate -> protected AbstractBeanDefinition createBeanDefinition(String className, String parentName) 			throws ClassNotFoundException;1367943112;Create a bean definition for the given class name and parent name._@param className the name of the bean class_@param parentName the name of the bean's parent bean_@return the newly created bean definition_@throws ClassNotFoundException if bean class resolution was attempted but failed;protected AbstractBeanDefinition createBeanDefinition(String className, String parentName)_			throws ClassNotFoundException {__		return BeanDefinitionReaderUtils.createBeanDefinition(_				parentName, className, this.readerContext.getBeanClassLoader())__	};create,a,bean,definition,for,the,given,class,name,and,parent,name,param,class,name,the,name,of,the,bean,class,param,parent,name,the,name,of,the,bean,s,parent,bean,return,the,newly,created,bean,definition,throws,class,not,found,exception,if,bean,class,resolution,was,attempted,but,failed;protected,abstract,bean,definition,create,bean,definition,string,class,name,string,parent,name,throws,class,not,found,exception,return,bean,definition,reader,utils,create,bean,definition,parent,name,class,name,this,reader,context,get,bean,class,loader
BeanDefinitionParserDelegate -> protected AbstractBeanDefinition createBeanDefinition(String className, String parentName) 			throws ClassNotFoundException;1382030648;Create a bean definition for the given class name and parent name._@param className the name of the bean class_@param parentName the name of the bean's parent bean_@return the newly created bean definition_@throws ClassNotFoundException if bean class resolution was attempted but failed;protected AbstractBeanDefinition createBeanDefinition(String className, String parentName)_			throws ClassNotFoundException {__		return BeanDefinitionReaderUtils.createBeanDefinition(_				parentName, className, this.readerContext.getBeanClassLoader())__	};create,a,bean,definition,for,the,given,class,name,and,parent,name,param,class,name,the,name,of,the,bean,class,param,parent,name,the,name,of,the,bean,s,parent,bean,return,the,newly,created,bean,definition,throws,class,not,found,exception,if,bean,class,resolution,was,attempted,but,failed;protected,abstract,bean,definition,create,bean,definition,string,class,name,string,parent,name,throws,class,not,found,exception,return,bean,definition,reader,utils,create,bean,definition,parent,name,class,name,this,reader,context,get,bean,class,loader
BeanDefinitionParserDelegate -> protected AbstractBeanDefinition createBeanDefinition(String className, String parentName) 			throws ClassNotFoundException;1385412762;Create a bean definition for the given class name and parent name._@param className the name of the bean class_@param parentName the name of the bean's parent bean_@return the newly created bean definition_@throws ClassNotFoundException if bean class resolution was attempted but failed;protected AbstractBeanDefinition createBeanDefinition(String className, String parentName)_			throws ClassNotFoundException {__		return BeanDefinitionReaderUtils.createBeanDefinition(_				parentName, className, this.readerContext.getBeanClassLoader())__	};create,a,bean,definition,for,the,given,class,name,and,parent,name,param,class,name,the,name,of,the,bean,class,param,parent,name,the,name,of,the,bean,s,parent,bean,return,the,newly,created,bean,definition,throws,class,not,found,exception,if,bean,class,resolution,was,attempted,but,failed;protected,abstract,bean,definition,create,bean,definition,string,class,name,string,parent,name,throws,class,not,found,exception,return,bean,definition,reader,utils,create,bean,definition,parent,name,class,name,this,reader,context,get,bean,class,loader
BeanDefinitionParserDelegate -> protected AbstractBeanDefinition createBeanDefinition(String className, String parentName) 			throws ClassNotFoundException;1410953197;Create a bean definition for the given class name and parent name._@param className the name of the bean class_@param parentName the name of the bean's parent bean_@return the newly created bean definition_@throws ClassNotFoundException if bean class resolution was attempted but failed;protected AbstractBeanDefinition createBeanDefinition(String className, String parentName)_			throws ClassNotFoundException {__		return BeanDefinitionReaderUtils.createBeanDefinition(_				parentName, className, this.readerContext.getBeanClassLoader())__	};create,a,bean,definition,for,the,given,class,name,and,parent,name,param,class,name,the,name,of,the,bean,class,param,parent,name,the,name,of,the,bean,s,parent,bean,return,the,newly,created,bean,definition,throws,class,not,found,exception,if,bean,class,resolution,was,attempted,but,failed;protected,abstract,bean,definition,create,bean,definition,string,class,name,string,parent,name,throws,class,not,found,exception,return,bean,definition,reader,utils,create,bean,definition,parent,name,class,name,this,reader,context,get,bean,class,loader
BeanDefinitionParserDelegate -> protected AbstractBeanDefinition createBeanDefinition(String className, String parentName) 			throws ClassNotFoundException;1411599760;Create a bean definition for the given class name and parent name._@param className the name of the bean class_@param parentName the name of the bean's parent bean_@return the newly created bean definition_@throws ClassNotFoundException if bean class resolution was attempted but failed;protected AbstractBeanDefinition createBeanDefinition(String className, String parentName)_			throws ClassNotFoundException {__		return BeanDefinitionReaderUtils.createBeanDefinition(_				parentName, className, this.readerContext.getBeanClassLoader())__	};create,a,bean,definition,for,the,given,class,name,and,parent,name,param,class,name,the,name,of,the,bean,class,param,parent,name,the,name,of,the,bean,s,parent,bean,return,the,newly,created,bean,definition,throws,class,not,found,exception,if,bean,class,resolution,was,attempted,but,failed;protected,abstract,bean,definition,create,bean,definition,string,class,name,string,parent,name,throws,class,not,found,exception,return,bean,definition,reader,utils,create,bean,definition,parent,name,class,name,this,reader,context,get,bean,class,loader
BeanDefinitionParserDelegate -> protected AbstractBeanDefinition createBeanDefinition(String className, String parentName) 			throws ClassNotFoundException;1419966315;Create a bean definition for the given class name and parent name._@param className the name of the bean class_@param parentName the name of the bean's parent bean_@return the newly created bean definition_@throws ClassNotFoundException if bean class resolution was attempted but failed;protected AbstractBeanDefinition createBeanDefinition(String className, String parentName)_			throws ClassNotFoundException {__		return BeanDefinitionReaderUtils.createBeanDefinition(_				parentName, className, this.readerContext.getBeanClassLoader())__	};create,a,bean,definition,for,the,given,class,name,and,parent,name,param,class,name,the,name,of,the,bean,class,param,parent,name,the,name,of,the,bean,s,parent,bean,return,the,newly,created,bean,definition,throws,class,not,found,exception,if,bean,class,resolution,was,attempted,but,failed;protected,abstract,bean,definition,create,bean,definition,string,class,name,string,parent,name,throws,class,not,found,exception,return,bean,definition,reader,utils,create,bean,definition,parent,name,class,name,this,reader,context,get,bean,class,loader
BeanDefinitionParserDelegate -> protected AbstractBeanDefinition createBeanDefinition(String className, String parentName) 			throws ClassNotFoundException;1431958785;Create a bean definition for the given class name and parent name._@param className the name of the bean class_@param parentName the name of the bean's parent bean_@return the newly created bean definition_@throws ClassNotFoundException if bean class resolution was attempted but failed;protected AbstractBeanDefinition createBeanDefinition(String className, String parentName)_			throws ClassNotFoundException {__		return BeanDefinitionReaderUtils.createBeanDefinition(_				parentName, className, this.readerContext.getBeanClassLoader())__	};create,a,bean,definition,for,the,given,class,name,and,parent,name,param,class,name,the,name,of,the,bean,class,param,parent,name,the,name,of,the,bean,s,parent,bean,return,the,newly,created,bean,definition,throws,class,not,found,exception,if,bean,class,resolution,was,attempted,but,failed;protected,abstract,bean,definition,create,bean,definition,string,class,name,string,parent,name,throws,class,not,found,exception,return,bean,definition,reader,utils,create,bean,definition,parent,name,class,name,this,reader,context,get,bean,class,loader
BeanDefinitionParserDelegate -> protected AbstractBeanDefinition createBeanDefinition(String className, String parentName) 			throws ClassNotFoundException;1432135182;Create a bean definition for the given class name and parent name._@param className the name of the bean class_@param parentName the name of the bean's parent bean_@return the newly created bean definition_@throws ClassNotFoundException if bean class resolution was attempted but failed;protected AbstractBeanDefinition createBeanDefinition(String className, String parentName)_			throws ClassNotFoundException {__		return BeanDefinitionReaderUtils.createBeanDefinition(_				parentName, className, this.readerContext.getBeanClassLoader())__	};create,a,bean,definition,for,the,given,class,name,and,parent,name,param,class,name,the,name,of,the,bean,class,param,parent,name,the,name,of,the,bean,s,parent,bean,return,the,newly,created,bean,definition,throws,class,not,found,exception,if,bean,class,resolution,was,attempted,but,failed;protected,abstract,bean,definition,create,bean,definition,string,class,name,string,parent,name,throws,class,not,found,exception,return,bean,definition,reader,utils,create,bean,definition,parent,name,class,name,this,reader,context,get,bean,class,loader
BeanDefinitionParserDelegate -> protected AbstractBeanDefinition createBeanDefinition(String className, String parentName) 			throws ClassNotFoundException;1447323728;Create a bean definition for the given class name and parent name._@param className the name of the bean class_@param parentName the name of the bean's parent bean_@return the newly created bean definition_@throws ClassNotFoundException if bean class resolution was attempted but failed;protected AbstractBeanDefinition createBeanDefinition(String className, String parentName)_			throws ClassNotFoundException {__		return BeanDefinitionReaderUtils.createBeanDefinition(_				parentName, className, this.readerContext.getBeanClassLoader())__	};create,a,bean,definition,for,the,given,class,name,and,parent,name,param,class,name,the,name,of,the,bean,class,param,parent,name,the,name,of,the,bean,s,parent,bean,return,the,newly,created,bean,definition,throws,class,not,found,exception,if,bean,class,resolution,was,attempted,but,failed;protected,abstract,bean,definition,create,bean,definition,string,class,name,string,parent,name,throws,class,not,found,exception,return,bean,definition,reader,utils,create,bean,definition,parent,name,class,name,this,reader,context,get,bean,class,loader
BeanDefinitionParserDelegate -> protected AbstractBeanDefinition createBeanDefinition(String className, String parentName) 			throws ClassNotFoundException;1467726769;Create a bean definition for the given class name and parent name._@param className the name of the bean class_@param parentName the name of the bean's parent bean_@return the newly created bean definition_@throws ClassNotFoundException if bean class resolution was attempted but failed;protected AbstractBeanDefinition createBeanDefinition(String className, String parentName)_			throws ClassNotFoundException {__		return BeanDefinitionReaderUtils.createBeanDefinition(_				parentName, className, this.readerContext.getBeanClassLoader())__	};create,a,bean,definition,for,the,given,class,name,and,parent,name,param,class,name,the,name,of,the,bean,class,param,parent,name,the,name,of,the,bean,s,parent,bean,return,the,newly,created,bean,definition,throws,class,not,found,exception,if,bean,class,resolution,was,attempted,but,failed;protected,abstract,bean,definition,create,bean,definition,string,class,name,string,parent,name,throws,class,not,found,exception,return,bean,definition,reader,utils,create,bean,definition,parent,name,class,name,this,reader,context,get,bean,class,loader
BeanDefinitionParserDelegate -> protected AbstractBeanDefinition createBeanDefinition(String className, String parentName) 			throws ClassNotFoundException;1467730834;Create a bean definition for the given class name and parent name._@param className the name of the bean class_@param parentName the name of the bean's parent bean_@return the newly created bean definition_@throws ClassNotFoundException if bean class resolution was attempted but failed;protected AbstractBeanDefinition createBeanDefinition(String className, String parentName)_			throws ClassNotFoundException {__		return BeanDefinitionReaderUtils.createBeanDefinition(_				parentName, className, this.readerContext.getBeanClassLoader())__	};create,a,bean,definition,for,the,given,class,name,and,parent,name,param,class,name,the,name,of,the,bean,class,param,parent,name,the,name,of,the,bean,s,parent,bean,return,the,newly,created,bean,definition,throws,class,not,found,exception,if,bean,class,resolution,was,attempted,but,failed;protected,abstract,bean,definition,create,bean,definition,string,class,name,string,parent,name,throws,class,not,found,exception,return,bean,definition,reader,utils,create,bean,definition,parent,name,class,name,this,reader,context,get,bean,class,loader
BeanDefinitionParserDelegate -> protected AbstractBeanDefinition createBeanDefinition(String className, String parentName) 			throws ClassNotFoundException;1467744603;Create a bean definition for the given class name and parent name._@param className the name of the bean class_@param parentName the name of the bean's parent bean_@return the newly created bean definition_@throws ClassNotFoundException if bean class resolution was attempted but failed;protected AbstractBeanDefinition createBeanDefinition(String className, String parentName)_			throws ClassNotFoundException {__		return BeanDefinitionReaderUtils.createBeanDefinition(_				parentName, className, this.readerContext.getBeanClassLoader())__	};create,a,bean,definition,for,the,given,class,name,and,parent,name,param,class,name,the,name,of,the,bean,class,param,parent,name,the,name,of,the,bean,s,parent,bean,return,the,newly,created,bean,definition,throws,class,not,found,exception,if,bean,class,resolution,was,attempted,but,failed;protected,abstract,bean,definition,create,bean,definition,string,class,name,string,parent,name,throws,class,not,found,exception,return,bean,definition,reader,utils,create,bean,definition,parent,name,class,name,this,reader,context,get,bean,class,loader
BeanDefinitionParserDelegate -> protected AbstractBeanDefinition createBeanDefinition(String className, String parentName) 			throws ClassNotFoundException;1487245676;Create a bean definition for the given class name and parent name._@param className the name of the bean class_@param parentName the name of the bean's parent bean_@return the newly created bean definition_@throws ClassNotFoundException if bean class resolution was attempted but failed;protected AbstractBeanDefinition createBeanDefinition(String className, String parentName)_			throws ClassNotFoundException {__		return BeanDefinitionReaderUtils.createBeanDefinition(_				parentName, className, this.readerContext.getBeanClassLoader())__	};create,a,bean,definition,for,the,given,class,name,and,parent,name,param,class,name,the,name,of,the,bean,class,param,parent,name,the,name,of,the,bean,s,parent,bean,return,the,newly,created,bean,definition,throws,class,not,found,exception,if,bean,class,resolution,was,attempted,but,failed;protected,abstract,bean,definition,create,bean,definition,string,class,name,string,parent,name,throws,class,not,found,exception,return,bean,definition,reader,utils,create,bean,definition,parent,name,class,name,this,reader,context,get,bean,class,loader
BeanDefinitionParserDelegate -> protected AbstractBeanDefinition createBeanDefinition(String className, String parentName) 			throws ClassNotFoundException;1487255851;Create a bean definition for the given class name and parent name._@param className the name of the bean class_@param parentName the name of the bean's parent bean_@return the newly created bean definition_@throws ClassNotFoundException if bean class resolution was attempted but failed;protected AbstractBeanDefinition createBeanDefinition(String className, String parentName)_			throws ClassNotFoundException {__		return BeanDefinitionReaderUtils.createBeanDefinition(_				parentName, className, this.readerContext.getBeanClassLoader())__	};create,a,bean,definition,for,the,given,class,name,and,parent,name,param,class,name,the,name,of,the,bean,class,param,parent,name,the,name,of,the,bean,s,parent,bean,return,the,newly,created,bean,definition,throws,class,not,found,exception,if,bean,class,resolution,was,attempted,but,failed;protected,abstract,bean,definition,create,bean,definition,string,class,name,string,parent,name,throws,class,not,found,exception,return,bean,definition,reader,utils,create,bean,definition,parent,name,class,name,this,reader,context,get,bean,class,loader
BeanDefinitionParserDelegate -> protected AbstractBeanDefinition createBeanDefinition(String className, String parentName) 			throws ClassNotFoundException;1494586217;Create a bean definition for the given class name and parent name._@param className the name of the bean class_@param parentName the name of the bean's parent bean_@return the newly created bean definition_@throws ClassNotFoundException if bean class resolution was attempted but failed;protected AbstractBeanDefinition createBeanDefinition(String className, String parentName)_			throws ClassNotFoundException {__		return BeanDefinitionReaderUtils.createBeanDefinition(_				parentName, className, this.readerContext.getBeanClassLoader())__	};create,a,bean,definition,for,the,given,class,name,and,parent,name,param,class,name,the,name,of,the,bean,class,param,parent,name,the,name,of,the,bean,s,parent,bean,return,the,newly,created,bean,definition,throws,class,not,found,exception,if,bean,class,resolution,was,attempted,but,failed;protected,abstract,bean,definition,create,bean,definition,string,class,name,string,parent,name,throws,class,not,found,exception,return,bean,definition,reader,utils,create,bean,definition,parent,name,class,name,this,reader,context,get,bean,class,loader
BeanDefinitionParserDelegate -> protected AbstractBeanDefinition createBeanDefinition(String className, String parentName) 			throws ClassNotFoundException;1495868221;Create a bean definition for the given class name and parent name._@param className the name of the bean class_@param parentName the name of the bean's parent bean_@return the newly created bean definition_@throws ClassNotFoundException if bean class resolution was attempted but failed;protected AbstractBeanDefinition createBeanDefinition(String className, String parentName)_			throws ClassNotFoundException {__		return BeanDefinitionReaderUtils.createBeanDefinition(_				parentName, className, this.readerContext.getBeanClassLoader())__	};create,a,bean,definition,for,the,given,class,name,and,parent,name,param,class,name,the,name,of,the,bean,class,param,parent,name,the,name,of,the,bean,s,parent,bean,return,the,newly,created,bean,definition,throws,class,not,found,exception,if,bean,class,resolution,was,attempted,but,failed;protected,abstract,bean,definition,create,bean,definition,string,class,name,string,parent,name,throws,class,not,found,exception,return,bean,definition,reader,utils,create,bean,definition,parent,name,class,name,this,reader,context,get,bean,class,loader
BeanDefinitionParserDelegate -> protected AbstractBeanDefinition createBeanDefinition(String className, String parentName) 			throws ClassNotFoundException;1496259743;Create a bean definition for the given class name and parent name._@param className the name of the bean class_@param parentName the name of the bean's parent bean_@return the newly created bean definition_@throws ClassNotFoundException if bean class resolution was attempted but failed;protected AbstractBeanDefinition createBeanDefinition(String className, String parentName)_			throws ClassNotFoundException {__		return BeanDefinitionReaderUtils.createBeanDefinition(_				parentName, className, this.readerContext.getBeanClassLoader())__	};create,a,bean,definition,for,the,given,class,name,and,parent,name,param,class,name,the,name,of,the,bean,class,param,parent,name,the,name,of,the,bean,s,parent,bean,return,the,newly,created,bean,definition,throws,class,not,found,exception,if,bean,class,resolution,was,attempted,but,failed;protected,abstract,bean,definition,create,bean,definition,string,class,name,string,parent,name,throws,class,not,found,exception,return,bean,definition,reader,utils,create,bean,definition,parent,name,class,name,this,reader,context,get,bean,class,loader
BeanDefinitionParserDelegate -> protected void checkNameUniqueness(String beanName, List<String> aliases, Element beanElement);1328020251;Validate that the specified bean name and aliases have not been used already_within the current level of beans element nesting.;protected void checkNameUniqueness(String beanName, List<String> aliases, Element beanElement) {_		String foundName = null___		if (StringUtils.hasText(beanName) && this.usedNames.contains(beanName)) {_			foundName = beanName__		}_		if (foundName == null) {_			foundName = (String) CollectionUtils.findFirstMatch(this.usedNames, aliases)__		}_		if (foundName != null) {_			error("Bean name '" + foundName + "' is already used in this <beans> element", beanElement)__		}__		this.usedNames.add(beanName)__		this.usedNames.addAll(aliases)__	};validate,that,the,specified,bean,name,and,aliases,have,not,been,used,already,within,the,current,level,of,beans,element,nesting;protected,void,check,name,uniqueness,string,bean,name,list,string,aliases,element,bean,element,string,found,name,null,if,string,utils,has,text,bean,name,this,used,names,contains,bean,name,found,name,bean,name,if,found,name,null,found,name,string,collection,utils,find,first,match,this,used,names,aliases,if,found,name,null,error,bean,name,found,name,is,already,used,in,this,beans,element,bean,element,this,used,names,add,bean,name,this,used,names,add,all,aliases
BeanDefinitionParserDelegate -> protected void checkNameUniqueness(String beanName, List<String> aliases, Element beanElement);1335774711;Validate that the specified bean name and aliases have not been used already_within the current level of beans element nesting.;protected void checkNameUniqueness(String beanName, List<String> aliases, Element beanElement) {_		String foundName = null___		if (StringUtils.hasText(beanName) && this.usedNames.contains(beanName)) {_			foundName = beanName__		}_		if (foundName == null) {_			foundName = (String) CollectionUtils.findFirstMatch(this.usedNames, aliases)__		}_		if (foundName != null) {_			error("Bean name '" + foundName + "' is already used in this <beans> element", beanElement)__		}__		this.usedNames.add(beanName)__		this.usedNames.addAll(aliases)__	};validate,that,the,specified,bean,name,and,aliases,have,not,been,used,already,within,the,current,level,of,beans,element,nesting;protected,void,check,name,uniqueness,string,bean,name,list,string,aliases,element,bean,element,string,found,name,null,if,string,utils,has,text,bean,name,this,used,names,contains,bean,name,found,name,bean,name,if,found,name,null,found,name,string,collection,utils,find,first,match,this,used,names,aliases,if,found,name,null,error,bean,name,found,name,is,already,used,in,this,beans,element,bean,element,this,used,names,add,bean,name,this,used,names,add,all,aliases
BeanDefinitionParserDelegate -> protected void checkNameUniqueness(String beanName, List<String> aliases, Element beanElement);1337341719;Validate that the specified bean name and aliases have not been used already_within the current level of beans element nesting.;protected void checkNameUniqueness(String beanName, List<String> aliases, Element beanElement) {_		String foundName = null___		if (StringUtils.hasText(beanName) && this.usedNames.contains(beanName)) {_			foundName = beanName__		}_		if (foundName == null) {_			foundName = (String) CollectionUtils.findFirstMatch(this.usedNames, aliases)__		}_		if (foundName != null) {_			error("Bean name '" + foundName + "' is already used in this <beans> element", beanElement)__		}__		this.usedNames.add(beanName)__		this.usedNames.addAll(aliases)__	};validate,that,the,specified,bean,name,and,aliases,have,not,been,used,already,within,the,current,level,of,beans,element,nesting;protected,void,check,name,uniqueness,string,bean,name,list,string,aliases,element,bean,element,string,found,name,null,if,string,utils,has,text,bean,name,this,used,names,contains,bean,name,found,name,bean,name,if,found,name,null,found,name,string,collection,utils,find,first,match,this,used,names,aliases,if,found,name,null,error,bean,name,found,name,is,already,used,in,this,beans,element,bean,element,this,used,names,add,bean,name,this,used,names,add,all,aliases
BeanDefinitionParserDelegate -> protected void checkNameUniqueness(String beanName, List<String> aliases, Element beanElement);1351392612;Validate that the specified bean name and aliases have not been used already_within the current level of beans element nesting.;protected void checkNameUniqueness(String beanName, List<String> aliases, Element beanElement) {_		String foundName = null___		if (StringUtils.hasText(beanName) && this.usedNames.contains(beanName)) {_			foundName = beanName__		}_		if (foundName == null) {_			foundName = (String) CollectionUtils.findFirstMatch(this.usedNames, aliases)__		}_		if (foundName != null) {_			error("Bean name '" + foundName + "' is already used in this <beans> element", beanElement)__		}__		this.usedNames.add(beanName)__		this.usedNames.addAll(aliases)__	};validate,that,the,specified,bean,name,and,aliases,have,not,been,used,already,within,the,current,level,of,beans,element,nesting;protected,void,check,name,uniqueness,string,bean,name,list,string,aliases,element,bean,element,string,found,name,null,if,string,utils,has,text,bean,name,this,used,names,contains,bean,name,found,name,bean,name,if,found,name,null,found,name,string,collection,utils,find,first,match,this,used,names,aliases,if,found,name,null,error,bean,name,found,name,is,already,used,in,this,beans,element,bean,element,this,used,names,add,bean,name,this,used,names,add,all,aliases
BeanDefinitionParserDelegate -> protected void checkNameUniqueness(String beanName, List<String> aliases, Element beanElement);1351696936;Validate that the specified bean name and aliases have not been used already_within the current level of beans element nesting.;protected void checkNameUniqueness(String beanName, List<String> aliases, Element beanElement) {_		String foundName = null___		if (StringUtils.hasText(beanName) && this.usedNames.contains(beanName)) {_			foundName = beanName__		}_		if (foundName == null) {_			foundName = (String) CollectionUtils.findFirstMatch(this.usedNames, aliases)__		}_		if (foundName != null) {_			error("Bean name '" + foundName + "' is already used in this <beans> element", beanElement)__		}__		this.usedNames.add(beanName)__		this.usedNames.addAll(aliases)__	};validate,that,the,specified,bean,name,and,aliases,have,not,been,used,already,within,the,current,level,of,beans,element,nesting;protected,void,check,name,uniqueness,string,bean,name,list,string,aliases,element,bean,element,string,found,name,null,if,string,utils,has,text,bean,name,this,used,names,contains,bean,name,found,name,bean,name,if,found,name,null,found,name,string,collection,utils,find,first,match,this,used,names,aliases,if,found,name,null,error,bean,name,found,name,is,already,used,in,this,beans,element,bean,element,this,used,names,add,bean,name,this,used,names,add,all,aliases
BeanDefinitionParserDelegate -> protected void checkNameUniqueness(String beanName, List<String> aliases, Element beanElement);1356735495;Validate that the specified bean name and aliases have not been used already_within the current level of beans element nesting.;protected void checkNameUniqueness(String beanName, List<String> aliases, Element beanElement) {_		String foundName = null___		if (StringUtils.hasText(beanName) && this.usedNames.contains(beanName)) {_			foundName = beanName__		}_		if (foundName == null) {_			foundName = (String) CollectionUtils.findFirstMatch(this.usedNames, aliases)__		}_		if (foundName != null) {_			error("Bean name '" + foundName + "' is already used in this <beans> element", beanElement)__		}__		this.usedNames.add(beanName)__		this.usedNames.addAll(aliases)__	};validate,that,the,specified,bean,name,and,aliases,have,not,been,used,already,within,the,current,level,of,beans,element,nesting;protected,void,check,name,uniqueness,string,bean,name,list,string,aliases,element,bean,element,string,found,name,null,if,string,utils,has,text,bean,name,this,used,names,contains,bean,name,found,name,bean,name,if,found,name,null,found,name,string,collection,utils,find,first,match,this,used,names,aliases,if,found,name,null,error,bean,name,found,name,is,already,used,in,this,beans,element,bean,element,this,used,names,add,bean,name,this,used,names,add,all,aliases
BeanDefinitionParserDelegate -> protected void checkNameUniqueness(String beanName, List<String> aliases, Element beanElement);1357119417;Validate that the specified bean name and aliases have not been used already_within the current level of beans element nesting.;protected void checkNameUniqueness(String beanName, List<String> aliases, Element beanElement) {_		String foundName = null___		if (StringUtils.hasText(beanName) && this.usedNames.contains(beanName)) {_			foundName = beanName__		}_		if (foundName == null) {_			foundName = (String) CollectionUtils.findFirstMatch(this.usedNames, aliases)__		}_		if (foundName != null) {_			error("Bean name '" + foundName + "' is already used in this <beans> element", beanElement)__		}__		this.usedNames.add(beanName)__		this.usedNames.addAll(aliases)__	};validate,that,the,specified,bean,name,and,aliases,have,not,been,used,already,within,the,current,level,of,beans,element,nesting;protected,void,check,name,uniqueness,string,bean,name,list,string,aliases,element,bean,element,string,found,name,null,if,string,utils,has,text,bean,name,this,used,names,contains,bean,name,found,name,bean,name,if,found,name,null,found,name,string,collection,utils,find,first,match,this,used,names,aliases,if,found,name,null,error,bean,name,found,name,is,already,used,in,this,beans,element,bean,element,this,used,names,add,bean,name,this,used,names,add,all,aliases
BeanDefinitionParserDelegate -> protected void checkNameUniqueness(String beanName, List<String> aliases, Element beanElement);1367943112;Validate that the specified bean name and aliases have not been used already_within the current level of beans element nesting.;protected void checkNameUniqueness(String beanName, List<String> aliases, Element beanElement) {_		String foundName = null___		if (StringUtils.hasText(beanName) && this.usedNames.contains(beanName)) {_			foundName = beanName__		}_		if (foundName == null) {_			foundName = (String) CollectionUtils.findFirstMatch(this.usedNames, aliases)__		}_		if (foundName != null) {_			error("Bean name '" + foundName + "' is already used in this <beans> element", beanElement)__		}__		this.usedNames.add(beanName)__		this.usedNames.addAll(aliases)__	};validate,that,the,specified,bean,name,and,aliases,have,not,been,used,already,within,the,current,level,of,beans,element,nesting;protected,void,check,name,uniqueness,string,bean,name,list,string,aliases,element,bean,element,string,found,name,null,if,string,utils,has,text,bean,name,this,used,names,contains,bean,name,found,name,bean,name,if,found,name,null,found,name,string,collection,utils,find,first,match,this,used,names,aliases,if,found,name,null,error,bean,name,found,name,is,already,used,in,this,beans,element,bean,element,this,used,names,add,bean,name,this,used,names,add,all,aliases
BeanDefinitionParserDelegate -> protected void checkNameUniqueness(String beanName, List<String> aliases, Element beanElement);1382030648;Validate that the specified bean name and aliases have not been used already_within the current level of beans element nesting.;protected void checkNameUniqueness(String beanName, List<String> aliases, Element beanElement) {_		String foundName = null___		if (StringUtils.hasText(beanName) && this.usedNames.contains(beanName)) {_			foundName = beanName__		}_		if (foundName == null) {_			foundName = (String) CollectionUtils.findFirstMatch(this.usedNames, aliases)__		}_		if (foundName != null) {_			error("Bean name '" + foundName + "' is already used in this <beans> element", beanElement)__		}__		this.usedNames.add(beanName)__		this.usedNames.addAll(aliases)__	};validate,that,the,specified,bean,name,and,aliases,have,not,been,used,already,within,the,current,level,of,beans,element,nesting;protected,void,check,name,uniqueness,string,bean,name,list,string,aliases,element,bean,element,string,found,name,null,if,string,utils,has,text,bean,name,this,used,names,contains,bean,name,found,name,bean,name,if,found,name,null,found,name,string,collection,utils,find,first,match,this,used,names,aliases,if,found,name,null,error,bean,name,found,name,is,already,used,in,this,beans,element,bean,element,this,used,names,add,bean,name,this,used,names,add,all,aliases
BeanDefinitionParserDelegate -> protected void checkNameUniqueness(String beanName, List<String> aliases, Element beanElement);1385412762;Validate that the specified bean name and aliases have not been used already_within the current level of beans element nesting.;protected void checkNameUniqueness(String beanName, List<String> aliases, Element beanElement) {_		String foundName = null___		if (StringUtils.hasText(beanName) && this.usedNames.contains(beanName)) {_			foundName = beanName__		}_		if (foundName == null) {_			foundName = CollectionUtils.findFirstMatch(this.usedNames, aliases)__		}_		if (foundName != null) {_			error("Bean name '" + foundName + "' is already used in this <beans> element", beanElement)__		}__		this.usedNames.add(beanName)__		this.usedNames.addAll(aliases)__	};validate,that,the,specified,bean,name,and,aliases,have,not,been,used,already,within,the,current,level,of,beans,element,nesting;protected,void,check,name,uniqueness,string,bean,name,list,string,aliases,element,bean,element,string,found,name,null,if,string,utils,has,text,bean,name,this,used,names,contains,bean,name,found,name,bean,name,if,found,name,null,found,name,collection,utils,find,first,match,this,used,names,aliases,if,found,name,null,error,bean,name,found,name,is,already,used,in,this,beans,element,bean,element,this,used,names,add,bean,name,this,used,names,add,all,aliases
BeanDefinitionParserDelegate -> protected void checkNameUniqueness(String beanName, List<String> aliases, Element beanElement);1410953197;Validate that the specified bean name and aliases have not been used already_within the current level of beans element nesting.;protected void checkNameUniqueness(String beanName, List<String> aliases, Element beanElement) {_		String foundName = null___		if (StringUtils.hasText(beanName) && this.usedNames.contains(beanName)) {_			foundName = beanName__		}_		if (foundName == null) {_			foundName = CollectionUtils.findFirstMatch(this.usedNames, aliases)__		}_		if (foundName != null) {_			error("Bean name '" + foundName + "' is already used in this <beans> element", beanElement)__		}__		this.usedNames.add(beanName)__		this.usedNames.addAll(aliases)__	};validate,that,the,specified,bean,name,and,aliases,have,not,been,used,already,within,the,current,level,of,beans,element,nesting;protected,void,check,name,uniqueness,string,bean,name,list,string,aliases,element,bean,element,string,found,name,null,if,string,utils,has,text,bean,name,this,used,names,contains,bean,name,found,name,bean,name,if,found,name,null,found,name,collection,utils,find,first,match,this,used,names,aliases,if,found,name,null,error,bean,name,found,name,is,already,used,in,this,beans,element,bean,element,this,used,names,add,bean,name,this,used,names,add,all,aliases
BeanDefinitionParserDelegate -> protected void checkNameUniqueness(String beanName, List<String> aliases, Element beanElement);1411599760;Validate that the specified bean name and aliases have not been used already_within the current level of beans element nesting.;protected void checkNameUniqueness(String beanName, List<String> aliases, Element beanElement) {_		String foundName = null___		if (StringUtils.hasText(beanName) && this.usedNames.contains(beanName)) {_			foundName = beanName__		}_		if (foundName == null) {_			foundName = CollectionUtils.findFirstMatch(this.usedNames, aliases)__		}_		if (foundName != null) {_			error("Bean name '" + foundName + "' is already used in this <beans> element", beanElement)__		}__		this.usedNames.add(beanName)__		this.usedNames.addAll(aliases)__	};validate,that,the,specified,bean,name,and,aliases,have,not,been,used,already,within,the,current,level,of,beans,element,nesting;protected,void,check,name,uniqueness,string,bean,name,list,string,aliases,element,bean,element,string,found,name,null,if,string,utils,has,text,bean,name,this,used,names,contains,bean,name,found,name,bean,name,if,found,name,null,found,name,collection,utils,find,first,match,this,used,names,aliases,if,found,name,null,error,bean,name,found,name,is,already,used,in,this,beans,element,bean,element,this,used,names,add,bean,name,this,used,names,add,all,aliases
BeanDefinitionParserDelegate -> protected void checkNameUniqueness(String beanName, List<String> aliases, Element beanElement);1419966315;Validate that the specified bean name and aliases have not been used already_within the current level of beans element nesting.;protected void checkNameUniqueness(String beanName, List<String> aliases, Element beanElement) {_		String foundName = null___		if (StringUtils.hasText(beanName) && this.usedNames.contains(beanName)) {_			foundName = beanName__		}_		if (foundName == null) {_			foundName = CollectionUtils.findFirstMatch(this.usedNames, aliases)__		}_		if (foundName != null) {_			error("Bean name '" + foundName + "' is already used in this <beans> element", beanElement)__		}__		this.usedNames.add(beanName)__		this.usedNames.addAll(aliases)__	};validate,that,the,specified,bean,name,and,aliases,have,not,been,used,already,within,the,current,level,of,beans,element,nesting;protected,void,check,name,uniqueness,string,bean,name,list,string,aliases,element,bean,element,string,found,name,null,if,string,utils,has,text,bean,name,this,used,names,contains,bean,name,found,name,bean,name,if,found,name,null,found,name,collection,utils,find,first,match,this,used,names,aliases,if,found,name,null,error,bean,name,found,name,is,already,used,in,this,beans,element,bean,element,this,used,names,add,bean,name,this,used,names,add,all,aliases
BeanDefinitionParserDelegate -> protected void checkNameUniqueness(String beanName, List<String> aliases, Element beanElement);1431958785;Validate that the specified bean name and aliases have not been used already_within the current level of beans element nesting.;protected void checkNameUniqueness(String beanName, List<String> aliases, Element beanElement) {_		String foundName = null___		if (StringUtils.hasText(beanName) && this.usedNames.contains(beanName)) {_			foundName = beanName__		}_		if (foundName == null) {_			foundName = CollectionUtils.findFirstMatch(this.usedNames, aliases)__		}_		if (foundName != null) {_			error("Bean name '" + foundName + "' is already used in this <beans> element", beanElement)__		}__		this.usedNames.add(beanName)__		this.usedNames.addAll(aliases)__	};validate,that,the,specified,bean,name,and,aliases,have,not,been,used,already,within,the,current,level,of,beans,element,nesting;protected,void,check,name,uniqueness,string,bean,name,list,string,aliases,element,bean,element,string,found,name,null,if,string,utils,has,text,bean,name,this,used,names,contains,bean,name,found,name,bean,name,if,found,name,null,found,name,collection,utils,find,first,match,this,used,names,aliases,if,found,name,null,error,bean,name,found,name,is,already,used,in,this,beans,element,bean,element,this,used,names,add,bean,name,this,used,names,add,all,aliases
BeanDefinitionParserDelegate -> protected void checkNameUniqueness(String beanName, List<String> aliases, Element beanElement);1432135182;Validate that the specified bean name and aliases have not been used already_within the current level of beans element nesting.;protected void checkNameUniqueness(String beanName, List<String> aliases, Element beanElement) {_		String foundName = null___		if (StringUtils.hasText(beanName) && this.usedNames.contains(beanName)) {_			foundName = beanName__		}_		if (foundName == null) {_			foundName = CollectionUtils.findFirstMatch(this.usedNames, aliases)__		}_		if (foundName != null) {_			error("Bean name '" + foundName + "' is already used in this <beans> element", beanElement)__		}__		this.usedNames.add(beanName)__		this.usedNames.addAll(aliases)__	};validate,that,the,specified,bean,name,and,aliases,have,not,been,used,already,within,the,current,level,of,beans,element,nesting;protected,void,check,name,uniqueness,string,bean,name,list,string,aliases,element,bean,element,string,found,name,null,if,string,utils,has,text,bean,name,this,used,names,contains,bean,name,found,name,bean,name,if,found,name,null,found,name,collection,utils,find,first,match,this,used,names,aliases,if,found,name,null,error,bean,name,found,name,is,already,used,in,this,beans,element,bean,element,this,used,names,add,bean,name,this,used,names,add,all,aliases
BeanDefinitionParserDelegate -> protected void checkNameUniqueness(String beanName, List<String> aliases, Element beanElement);1447323728;Validate that the specified bean name and aliases have not been used already_within the current level of beans element nesting.;protected void checkNameUniqueness(String beanName, List<String> aliases, Element beanElement) {_		String foundName = null___		if (StringUtils.hasText(beanName) && this.usedNames.contains(beanName)) {_			foundName = beanName__		}_		if (foundName == null) {_			foundName = CollectionUtils.findFirstMatch(this.usedNames, aliases)__		}_		if (foundName != null) {_			error("Bean name '" + foundName + "' is already used in this <beans> element", beanElement)__		}__		this.usedNames.add(beanName)__		this.usedNames.addAll(aliases)__	};validate,that,the,specified,bean,name,and,aliases,have,not,been,used,already,within,the,current,level,of,beans,element,nesting;protected,void,check,name,uniqueness,string,bean,name,list,string,aliases,element,bean,element,string,found,name,null,if,string,utils,has,text,bean,name,this,used,names,contains,bean,name,found,name,bean,name,if,found,name,null,found,name,collection,utils,find,first,match,this,used,names,aliases,if,found,name,null,error,bean,name,found,name,is,already,used,in,this,beans,element,bean,element,this,used,names,add,bean,name,this,used,names,add,all,aliases
BeanDefinitionParserDelegate -> protected void checkNameUniqueness(String beanName, List<String> aliases, Element beanElement);1467726769;Validate that the specified bean name and aliases have not been used already_within the current level of beans element nesting.;protected void checkNameUniqueness(String beanName, List<String> aliases, Element beanElement) {_		String foundName = null___		if (StringUtils.hasText(beanName) && this.usedNames.contains(beanName)) {_			foundName = beanName__		}_		if (foundName == null) {_			foundName = CollectionUtils.findFirstMatch(this.usedNames, aliases)__		}_		if (foundName != null) {_			error("Bean name '" + foundName + "' is already used in this <beans> element", beanElement)__		}__		this.usedNames.add(beanName)__		this.usedNames.addAll(aliases)__	};validate,that,the,specified,bean,name,and,aliases,have,not,been,used,already,within,the,current,level,of,beans,element,nesting;protected,void,check,name,uniqueness,string,bean,name,list,string,aliases,element,bean,element,string,found,name,null,if,string,utils,has,text,bean,name,this,used,names,contains,bean,name,found,name,bean,name,if,found,name,null,found,name,collection,utils,find,first,match,this,used,names,aliases,if,found,name,null,error,bean,name,found,name,is,already,used,in,this,beans,element,bean,element,this,used,names,add,bean,name,this,used,names,add,all,aliases
BeanDefinitionParserDelegate -> protected void checkNameUniqueness(String beanName, List<String> aliases, Element beanElement);1467730834;Validate that the specified bean name and aliases have not been used already_within the current level of beans element nesting.;protected void checkNameUniqueness(String beanName, List<String> aliases, Element beanElement) {_		String foundName = null___		if (StringUtils.hasText(beanName) && this.usedNames.contains(beanName)) {_			foundName = beanName__		}_		if (foundName == null) {_			foundName = CollectionUtils.findFirstMatch(this.usedNames, aliases)__		}_		if (foundName != null) {_			error("Bean name '" + foundName + "' is already used in this <beans> element", beanElement)__		}__		this.usedNames.add(beanName)__		this.usedNames.addAll(aliases)__	};validate,that,the,specified,bean,name,and,aliases,have,not,been,used,already,within,the,current,level,of,beans,element,nesting;protected,void,check,name,uniqueness,string,bean,name,list,string,aliases,element,bean,element,string,found,name,null,if,string,utils,has,text,bean,name,this,used,names,contains,bean,name,found,name,bean,name,if,found,name,null,found,name,collection,utils,find,first,match,this,used,names,aliases,if,found,name,null,error,bean,name,found,name,is,already,used,in,this,beans,element,bean,element,this,used,names,add,bean,name,this,used,names,add,all,aliases
BeanDefinitionParserDelegate -> protected void checkNameUniqueness(String beanName, List<String> aliases, Element beanElement);1467744603;Validate that the specified bean name and aliases have not been used already_within the current level of beans element nesting.;protected void checkNameUniqueness(String beanName, List<String> aliases, Element beanElement) {_		String foundName = null___		if (StringUtils.hasText(beanName) && this.usedNames.contains(beanName)) {_			foundName = beanName__		}_		if (foundName == null) {_			foundName = CollectionUtils.findFirstMatch(this.usedNames, aliases)__		}_		if (foundName != null) {_			error("Bean name '" + foundName + "' is already used in this <beans> element", beanElement)__		}__		this.usedNames.add(beanName)__		this.usedNames.addAll(aliases)__	};validate,that,the,specified,bean,name,and,aliases,have,not,been,used,already,within,the,current,level,of,beans,element,nesting;protected,void,check,name,uniqueness,string,bean,name,list,string,aliases,element,bean,element,string,found,name,null,if,string,utils,has,text,bean,name,this,used,names,contains,bean,name,found,name,bean,name,if,found,name,null,found,name,collection,utils,find,first,match,this,used,names,aliases,if,found,name,null,error,bean,name,found,name,is,already,used,in,this,beans,element,bean,element,this,used,names,add,bean,name,this,used,names,add,all,aliases
BeanDefinitionParserDelegate -> protected void checkNameUniqueness(String beanName, List<String> aliases, Element beanElement);1487245676;Validate that the specified bean name and aliases have not been used already_within the current level of beans element nesting.;protected void checkNameUniqueness(String beanName, List<String> aliases, Element beanElement) {_		String foundName = null___		if (StringUtils.hasText(beanName) && this.usedNames.contains(beanName)) {_			foundName = beanName__		}_		if (foundName == null) {_			foundName = CollectionUtils.findFirstMatch(this.usedNames, aliases)__		}_		if (foundName != null) {_			error("Bean name '" + foundName + "' is already used in this <beans> element", beanElement)__		}__		this.usedNames.add(beanName)__		this.usedNames.addAll(aliases)__	};validate,that,the,specified,bean,name,and,aliases,have,not,been,used,already,within,the,current,level,of,beans,element,nesting;protected,void,check,name,uniqueness,string,bean,name,list,string,aliases,element,bean,element,string,found,name,null,if,string,utils,has,text,bean,name,this,used,names,contains,bean,name,found,name,bean,name,if,found,name,null,found,name,collection,utils,find,first,match,this,used,names,aliases,if,found,name,null,error,bean,name,found,name,is,already,used,in,this,beans,element,bean,element,this,used,names,add,bean,name,this,used,names,add,all,aliases
BeanDefinitionParserDelegate -> protected void checkNameUniqueness(String beanName, List<String> aliases, Element beanElement);1487255851;Validate that the specified bean name and aliases have not been used already_within the current level of beans element nesting.;protected void checkNameUniqueness(String beanName, List<String> aliases, Element beanElement) {_		String foundName = null___		if (StringUtils.hasText(beanName) && this.usedNames.contains(beanName)) {_			foundName = beanName__		}_		if (foundName == null) {_			foundName = CollectionUtils.findFirstMatch(this.usedNames, aliases)__		}_		if (foundName != null) {_			error("Bean name '" + foundName + "' is already used in this <beans> element", beanElement)__		}__		this.usedNames.add(beanName)__		this.usedNames.addAll(aliases)__	};validate,that,the,specified,bean,name,and,aliases,have,not,been,used,already,within,the,current,level,of,beans,element,nesting;protected,void,check,name,uniqueness,string,bean,name,list,string,aliases,element,bean,element,string,found,name,null,if,string,utils,has,text,bean,name,this,used,names,contains,bean,name,found,name,bean,name,if,found,name,null,found,name,collection,utils,find,first,match,this,used,names,aliases,if,found,name,null,error,bean,name,found,name,is,already,used,in,this,beans,element,bean,element,this,used,names,add,bean,name,this,used,names,add,all,aliases
BeanDefinitionParserDelegate -> protected void checkNameUniqueness(String beanName, List<String> aliases, Element beanElement);1494586217;Validate that the specified bean name and aliases have not been used already_within the current level of beans element nesting.;protected void checkNameUniqueness(String beanName, List<String> aliases, Element beanElement) {_		String foundName = null___		if (StringUtils.hasText(beanName) && this.usedNames.contains(beanName)) {_			foundName = beanName__		}_		if (foundName == null) {_			foundName = CollectionUtils.findFirstMatch(this.usedNames, aliases)__		}_		if (foundName != null) {_			error("Bean name '" + foundName + "' is already used in this <beans> element", beanElement)__		}__		this.usedNames.add(beanName)__		this.usedNames.addAll(aliases)__	};validate,that,the,specified,bean,name,and,aliases,have,not,been,used,already,within,the,current,level,of,beans,element,nesting;protected,void,check,name,uniqueness,string,bean,name,list,string,aliases,element,bean,element,string,found,name,null,if,string,utils,has,text,bean,name,this,used,names,contains,bean,name,found,name,bean,name,if,found,name,null,found,name,collection,utils,find,first,match,this,used,names,aliases,if,found,name,null,error,bean,name,found,name,is,already,used,in,this,beans,element,bean,element,this,used,names,add,bean,name,this,used,names,add,all,aliases
BeanDefinitionParserDelegate -> protected void checkNameUniqueness(String beanName, List<String> aliases, Element beanElement);1495868221;Validate that the specified bean name and aliases have not been used already_within the current level of beans element nesting.;protected void checkNameUniqueness(String beanName, List<String> aliases, Element beanElement) {_		String foundName = null___		if (StringUtils.hasText(beanName) && this.usedNames.contains(beanName)) {_			foundName = beanName__		}_		if (foundName == null) {_			foundName = CollectionUtils.findFirstMatch(this.usedNames, aliases)__		}_		if (foundName != null) {_			error("Bean name '" + foundName + "' is already used in this <beans> element", beanElement)__		}__		this.usedNames.add(beanName)__		this.usedNames.addAll(aliases)__	};validate,that,the,specified,bean,name,and,aliases,have,not,been,used,already,within,the,current,level,of,beans,element,nesting;protected,void,check,name,uniqueness,string,bean,name,list,string,aliases,element,bean,element,string,found,name,null,if,string,utils,has,text,bean,name,this,used,names,contains,bean,name,found,name,bean,name,if,found,name,null,found,name,collection,utils,find,first,match,this,used,names,aliases,if,found,name,null,error,bean,name,found,name,is,already,used,in,this,beans,element,bean,element,this,used,names,add,bean,name,this,used,names,add,all,aliases
BeanDefinitionParserDelegate -> protected void checkNameUniqueness(String beanName, List<String> aliases, Element beanElement);1496259743;Validate that the specified bean name and aliases have not been used already_within the current level of beans element nesting.;protected void checkNameUniqueness(String beanName, List<String> aliases, Element beanElement) {_		String foundName = null___		if (StringUtils.hasText(beanName) && this.usedNames.contains(beanName)) {_			foundName = beanName__		}_		if (foundName == null) {_			foundName = CollectionUtils.findFirstMatch(this.usedNames, aliases)__		}_		if (foundName != null) {_			error("Bean name '" + foundName + "' is already used in this <beans> element", beanElement)__		}__		this.usedNames.add(beanName)__		this.usedNames.addAll(aliases)__	};validate,that,the,specified,bean,name,and,aliases,have,not,been,used,already,within,the,current,level,of,beans,element,nesting;protected,void,check,name,uniqueness,string,bean,name,list,string,aliases,element,bean,element,string,found,name,null,if,string,utils,has,text,bean,name,this,used,names,contains,bean,name,found,name,bean,name,if,found,name,null,found,name,collection,utils,find,first,match,this,used,names,aliases,if,found,name,null,error,bean,name,found,name,is,already,used,in,this,beans,element,bean,element,this,used,names,add,bean,name,this,used,names,add,all,aliases
BeanDefinitionParserDelegate -> protected void checkNameUniqueness(String beanName, List<String> aliases, Element beanElement);1496837955;Validate that the specified bean name and aliases have not been used already_within the current level of beans element nesting.;protected void checkNameUniqueness(String beanName, List<String> aliases, Element beanElement) {_		String foundName = null___		if (StringUtils.hasText(beanName) && this.usedNames.contains(beanName)) {_			foundName = beanName__		}_		if (foundName == null) {_			foundName = CollectionUtils.findFirstMatch(this.usedNames, aliases)__		}_		if (foundName != null) {_			error("Bean name '" + foundName + "' is already used in this <beans> element", beanElement)__		}__		this.usedNames.add(beanName)__		this.usedNames.addAll(aliases)__	};validate,that,the,specified,bean,name,and,aliases,have,not,been,used,already,within,the,current,level,of,beans,element,nesting;protected,void,check,name,uniqueness,string,bean,name,list,string,aliases,element,bean,element,string,found,name,null,if,string,utils,has,text,bean,name,this,used,names,contains,bean,name,found,name,bean,name,if,found,name,null,found,name,collection,utils,find,first,match,this,used,names,aliases,if,found,name,null,error,bean,name,found,name,is,already,used,in,this,beans,element,bean,element,this,used,names,add,bean,name,this,used,names,add,all,aliases
BeanDefinitionParserDelegate -> protected void checkNameUniqueness(String beanName, List<String> aliases, Element beanElement);1503008029;Validate that the specified bean name and aliases have not been used already_within the current level of beans element nesting.;protected void checkNameUniqueness(String beanName, List<String> aliases, Element beanElement) {_		String foundName = null___		if (StringUtils.hasText(beanName) && this.usedNames.contains(beanName)) {_			foundName = beanName__		}_		if (foundName == null) {_			foundName = CollectionUtils.findFirstMatch(this.usedNames, aliases)__		}_		if (foundName != null) {_			error("Bean name '" + foundName + "' is already used in this <beans> element", beanElement)__		}__		this.usedNames.add(beanName)__		this.usedNames.addAll(aliases)__	};validate,that,the,specified,bean,name,and,aliases,have,not,been,used,already,within,the,current,level,of,beans,element,nesting;protected,void,check,name,uniqueness,string,bean,name,list,string,aliases,element,bean,element,string,found,name,null,if,string,utils,has,text,bean,name,this,used,names,contains,bean,name,found,name,bean,name,if,found,name,null,found,name,collection,utils,find,first,match,this,used,names,aliases,if,found,name,null,error,bean,name,found,name,is,already,used,in,this,beans,element,bean,element,this,used,names,add,bean,name,this,used,names,add,all,aliases
BeanDefinitionParserDelegate -> protected void checkNameUniqueness(String beanName, List<String> aliases, Element beanElement);1519513303;Validate that the specified bean name and aliases have not been used already_within the current level of beans element nesting.;protected void checkNameUniqueness(String beanName, List<String> aliases, Element beanElement) {_		String foundName = null___		if (StringUtils.hasText(beanName) && this.usedNames.contains(beanName)) {_			foundName = beanName__		}_		if (foundName == null) {_			foundName = CollectionUtils.findFirstMatch(this.usedNames, aliases)__		}_		if (foundName != null) {_			error("Bean name '" + foundName + "' is already used in this <beans> element", beanElement)__		}__		this.usedNames.add(beanName)__		this.usedNames.addAll(aliases)__	};validate,that,the,specified,bean,name,and,aliases,have,not,been,used,already,within,the,current,level,of,beans,element,nesting;protected,void,check,name,uniqueness,string,bean,name,list,string,aliases,element,bean,element,string,found,name,null,if,string,utils,has,text,bean,name,this,used,names,contains,bean,name,found,name,bean,name,if,found,name,null,found,name,collection,utils,find,first,match,this,used,names,aliases,if,found,name,null,error,bean,name,found,name,is,already,used,in,this,beans,element,bean,element,this,used,names,add,bean,name,this,used,names,add,all,aliases
BeanDefinitionParserDelegate -> protected void checkNameUniqueness(String beanName, List<String> aliases, Element beanElement);1530174524;Validate that the specified bean name and aliases have not been used already_within the current level of beans element nesting.;protected void checkNameUniqueness(String beanName, List<String> aliases, Element beanElement) {_		String foundName = null___		if (StringUtils.hasText(beanName) && this.usedNames.contains(beanName)) {_			foundName = beanName__		}_		if (foundName == null) {_			foundName = CollectionUtils.findFirstMatch(this.usedNames, aliases)__		}_		if (foundName != null) {_			error("Bean name '" + foundName + "' is already used in this <beans> element", beanElement)__		}__		this.usedNames.add(beanName)__		this.usedNames.addAll(aliases)__	};validate,that,the,specified,bean,name,and,aliases,have,not,been,used,already,within,the,current,level,of,beans,element,nesting;protected,void,check,name,uniqueness,string,bean,name,list,string,aliases,element,bean,element,string,found,name,null,if,string,utils,has,text,bean,name,this,used,names,contains,bean,name,found,name,bean,name,if,found,name,null,found,name,collection,utils,find,first,match,this,used,names,aliases,if,found,name,null,error,bean,name,found,name,is,already,used,in,this,beans,element,bean,element,this,used,names,add,bean,name,this,used,names,add,all,aliases
BeanDefinitionParserDelegate -> protected void checkNameUniqueness(String beanName, List<String> aliases, Element beanElement);1530190293;Validate that the specified bean name and aliases have not been used already_within the current level of beans element nesting.;protected void checkNameUniqueness(String beanName, List<String> aliases, Element beanElement) {_		String foundName = null___		if (StringUtils.hasText(beanName) && this.usedNames.contains(beanName)) {_			foundName = beanName__		}_		if (foundName == null) {_			foundName = CollectionUtils.findFirstMatch(this.usedNames, aliases)__		}_		if (foundName != null) {_			error("Bean name '" + foundName + "' is already used in this <beans> element", beanElement)__		}__		this.usedNames.add(beanName)__		this.usedNames.addAll(aliases)__	};validate,that,the,specified,bean,name,and,aliases,have,not,been,used,already,within,the,current,level,of,beans,element,nesting;protected,void,check,name,uniqueness,string,bean,name,list,string,aliases,element,bean,element,string,found,name,null,if,string,utils,has,text,bean,name,this,used,names,contains,bean,name,found,name,bean,name,if,found,name,null,found,name,collection,utils,find,first,match,this,used,names,aliases,if,found,name,null,error,bean,name,found,name,is,already,used,in,this,beans,element,bean,element,this,used,names,add,bean,name,this,used,names,add,all,aliases
BeanDefinitionParserDelegate -> protected void checkNameUniqueness(String beanName, List<String> aliases, Element beanElement);1532706365;Validate that the specified bean name and aliases have not been used already_within the current level of beans element nesting.;protected void checkNameUniqueness(String beanName, List<String> aliases, Element beanElement) {_		String foundName = null___		if (StringUtils.hasText(beanName) && this.usedNames.contains(beanName)) {_			foundName = beanName__		}_		if (foundName == null) {_			foundName = CollectionUtils.findFirstMatch(this.usedNames, aliases)__		}_		if (foundName != null) {_			error("Bean name '" + foundName + "' is already used in this <beans> element", beanElement)__		}__		this.usedNames.add(beanName)__		this.usedNames.addAll(aliases)__	};validate,that,the,specified,bean,name,and,aliases,have,not,been,used,already,within,the,current,level,of,beans,element,nesting;protected,void,check,name,uniqueness,string,bean,name,list,string,aliases,element,bean,element,string,found,name,null,if,string,utils,has,text,bean,name,this,used,names,contains,bean,name,found,name,bean,name,if,found,name,null,found,name,collection,utils,find,first,match,this,used,names,aliases,if,found,name,null,error,bean,name,found,name,is,already,used,in,this,beans,element,bean,element,this,used,names,add,bean,name,this,used,names,add,all,aliases
BeanDefinitionParserDelegate -> protected void checkNameUniqueness(String beanName, List<String> aliases, Element beanElement);1546958161;Validate that the specified bean name and aliases have not been used already_within the current level of beans element nesting.;protected void checkNameUniqueness(String beanName, List<String> aliases, Element beanElement) {_		String foundName = null___		if (StringUtils.hasText(beanName) && this.usedNames.contains(beanName)) {_			foundName = beanName__		}_		if (foundName == null) {_			foundName = CollectionUtils.findFirstMatch(this.usedNames, aliases)__		}_		if (foundName != null) {_			error("Bean name '" + foundName + "' is already used in this <beans> element", beanElement)__		}__		this.usedNames.add(beanName)__		this.usedNames.addAll(aliases)__	};validate,that,the,specified,bean,name,and,aliases,have,not,been,used,already,within,the,current,level,of,beans,element,nesting;protected,void,check,name,uniqueness,string,bean,name,list,string,aliases,element,bean,element,string,found,name,null,if,string,utils,has,text,bean,name,this,used,names,contains,bean,name,found,name,bean,name,if,found,name,null,found,name,collection,utils,find,first,match,this,used,names,aliases,if,found,name,null,error,bean,name,found,name,is,already,used,in,this,beans,element,bean,element,this,used,names,add,bean,name,this,used,names,add,all,aliases
BeanDefinitionParserDelegate -> protected final Object buildTypedStringValueForMap(String value, String defaultTypeName, Element entryEle);1328020251;Build a typed String value Object for the given raw value._@see org.springframework.beans.factory.config.TypedStringValue;protected final Object buildTypedStringValueForMap(String value, String defaultTypeName, Element entryEle) {_		try {_			TypedStringValue typedValue = buildTypedStringValue(value, defaultTypeName)__			typedValue.setSource(extractSource(entryEle))__			return typedValue__		}_		catch (ClassNotFoundException ex) {_			error("Type class [" + defaultTypeName + "] not found for Map key/value type", entryEle, ex)__			return value__		}_	};build,a,typed,string,value,object,for,the,given,raw,value,see,org,springframework,beans,factory,config,typed,string,value;protected,final,object,build,typed,string,value,for,map,string,value,string,default,type,name,element,entry,ele,try,typed,string,value,typed,value,build,typed,string,value,value,default,type,name,typed,value,set,source,extract,source,entry,ele,return,typed,value,catch,class,not,found,exception,ex,error,type,class,default,type,name,not,found,for,map,key,value,type,entry,ele,ex,return,value
BeanDefinitionParserDelegate -> protected final Object buildTypedStringValueForMap(String value, String defaultTypeName, Element entryEle);1335774711;Build a typed String value Object for the given raw value._@see org.springframework.beans.factory.config.TypedStringValue;protected final Object buildTypedStringValueForMap(String value, String defaultTypeName, Element entryEle) {_		try {_			TypedStringValue typedValue = buildTypedStringValue(value, defaultTypeName)__			typedValue.setSource(extractSource(entryEle))__			return typedValue__		}_		catch (ClassNotFoundException ex) {_			error("Type class [" + defaultTypeName + "] not found for Map key/value type", entryEle, ex)__			return value__		}_	};build,a,typed,string,value,object,for,the,given,raw,value,see,org,springframework,beans,factory,config,typed,string,value;protected,final,object,build,typed,string,value,for,map,string,value,string,default,type,name,element,entry,ele,try,typed,string,value,typed,value,build,typed,string,value,value,default,type,name,typed,value,set,source,extract,source,entry,ele,return,typed,value,catch,class,not,found,exception,ex,error,type,class,default,type,name,not,found,for,map,key,value,type,entry,ele,ex,return,value
BeanDefinitionParserDelegate -> protected final Object buildTypedStringValueForMap(String value, String defaultTypeName, Element entryEle);1337341719;Build a typed String value Object for the given raw value._@see org.springframework.beans.factory.config.TypedStringValue;protected final Object buildTypedStringValueForMap(String value, String defaultTypeName, Element entryEle) {_		try {_			TypedStringValue typedValue = buildTypedStringValue(value, defaultTypeName)__			typedValue.setSource(extractSource(entryEle))__			return typedValue__		}_		catch (ClassNotFoundException ex) {_			error("Type class [" + defaultTypeName + "] not found for Map key/value type", entryEle, ex)__			return value__		}_	};build,a,typed,string,value,object,for,the,given,raw,value,see,org,springframework,beans,factory,config,typed,string,value;protected,final,object,build,typed,string,value,for,map,string,value,string,default,type,name,element,entry,ele,try,typed,string,value,typed,value,build,typed,string,value,value,default,type,name,typed,value,set,source,extract,source,entry,ele,return,typed,value,catch,class,not,found,exception,ex,error,type,class,default,type,name,not,found,for,map,key,value,type,entry,ele,ex,return,value
BeanDefinitionParserDelegate -> protected final Object buildTypedStringValueForMap(String value, String defaultTypeName, Element entryEle);1351392612;Build a typed String value Object for the given raw value._@see org.springframework.beans.factory.config.TypedStringValue;protected final Object buildTypedStringValueForMap(String value, String defaultTypeName, Element entryEle) {_		try {_			TypedStringValue typedValue = buildTypedStringValue(value, defaultTypeName)__			typedValue.setSource(extractSource(entryEle))__			return typedValue__		}_		catch (ClassNotFoundException ex) {_			error("Type class [" + defaultTypeName + "] not found for Map key/value type", entryEle, ex)__			return value__		}_	};build,a,typed,string,value,object,for,the,given,raw,value,see,org,springframework,beans,factory,config,typed,string,value;protected,final,object,build,typed,string,value,for,map,string,value,string,default,type,name,element,entry,ele,try,typed,string,value,typed,value,build,typed,string,value,value,default,type,name,typed,value,set,source,extract,source,entry,ele,return,typed,value,catch,class,not,found,exception,ex,error,type,class,default,type,name,not,found,for,map,key,value,type,entry,ele,ex,return,value
BeanDefinitionParserDelegate -> protected final Object buildTypedStringValueForMap(String value, String defaultTypeName, Element entryEle);1351696936;Build a typed String value Object for the given raw value._@see org.springframework.beans.factory.config.TypedStringValue;protected final Object buildTypedStringValueForMap(String value, String defaultTypeName, Element entryEle) {_		try {_			TypedStringValue typedValue = buildTypedStringValue(value, defaultTypeName)__			typedValue.setSource(extractSource(entryEle))__			return typedValue__		}_		catch (ClassNotFoundException ex) {_			error("Type class [" + defaultTypeName + "] not found for Map key/value type", entryEle, ex)__			return value__		}_	};build,a,typed,string,value,object,for,the,given,raw,value,see,org,springframework,beans,factory,config,typed,string,value;protected,final,object,build,typed,string,value,for,map,string,value,string,default,type,name,element,entry,ele,try,typed,string,value,typed,value,build,typed,string,value,value,default,type,name,typed,value,set,source,extract,source,entry,ele,return,typed,value,catch,class,not,found,exception,ex,error,type,class,default,type,name,not,found,for,map,key,value,type,entry,ele,ex,return,value
BeanDefinitionParserDelegate -> protected final Object buildTypedStringValueForMap(String value, String defaultTypeName, Element entryEle);1356735495;Build a typed String value Object for the given raw value._@see org.springframework.beans.factory.config.TypedStringValue;protected final Object buildTypedStringValueForMap(String value, String defaultTypeName, Element entryEle) {_		try {_			TypedStringValue typedValue = buildTypedStringValue(value, defaultTypeName)__			typedValue.setSource(extractSource(entryEle))__			return typedValue__		}_		catch (ClassNotFoundException ex) {_			error("Type class [" + defaultTypeName + "] not found for Map key/value type", entryEle, ex)__			return value__		}_	};build,a,typed,string,value,object,for,the,given,raw,value,see,org,springframework,beans,factory,config,typed,string,value;protected,final,object,build,typed,string,value,for,map,string,value,string,default,type,name,element,entry,ele,try,typed,string,value,typed,value,build,typed,string,value,value,default,type,name,typed,value,set,source,extract,source,entry,ele,return,typed,value,catch,class,not,found,exception,ex,error,type,class,default,type,name,not,found,for,map,key,value,type,entry,ele,ex,return,value
BeanDefinitionParserDelegate -> protected final Object buildTypedStringValueForMap(String value, String defaultTypeName, Element entryEle);1357119417;Build a typed String value Object for the given raw value._@see org.springframework.beans.factory.config.TypedStringValue;protected final Object buildTypedStringValueForMap(String value, String defaultTypeName, Element entryEle) {_		try {_			TypedStringValue typedValue = buildTypedStringValue(value, defaultTypeName)__			typedValue.setSource(extractSource(entryEle))__			return typedValue__		}_		catch (ClassNotFoundException ex) {_			error("Type class [" + defaultTypeName + "] not found for Map key/value type", entryEle, ex)__			return value__		}_	};build,a,typed,string,value,object,for,the,given,raw,value,see,org,springframework,beans,factory,config,typed,string,value;protected,final,object,build,typed,string,value,for,map,string,value,string,default,type,name,element,entry,ele,try,typed,string,value,typed,value,build,typed,string,value,value,default,type,name,typed,value,set,source,extract,source,entry,ele,return,typed,value,catch,class,not,found,exception,ex,error,type,class,default,type,name,not,found,for,map,key,value,type,entry,ele,ex,return,value
BeanDefinitionParserDelegate -> protected final Object buildTypedStringValueForMap(String value, String defaultTypeName, Element entryEle);1367943112;Build a typed String value Object for the given raw value._@see org.springframework.beans.factory.config.TypedStringValue;protected final Object buildTypedStringValueForMap(String value, String defaultTypeName, Element entryEle) {_		try {_			TypedStringValue typedValue = buildTypedStringValue(value, defaultTypeName)__			typedValue.setSource(extractSource(entryEle))__			return typedValue__		}_		catch (ClassNotFoundException ex) {_			error("Type class [" + defaultTypeName + "] not found for Map key/value type", entryEle, ex)__			return value__		}_	};build,a,typed,string,value,object,for,the,given,raw,value,see,org,springframework,beans,factory,config,typed,string,value;protected,final,object,build,typed,string,value,for,map,string,value,string,default,type,name,element,entry,ele,try,typed,string,value,typed,value,build,typed,string,value,value,default,type,name,typed,value,set,source,extract,source,entry,ele,return,typed,value,catch,class,not,found,exception,ex,error,type,class,default,type,name,not,found,for,map,key,value,type,entry,ele,ex,return,value
BeanDefinitionParserDelegate -> protected final Object buildTypedStringValueForMap(String value, String defaultTypeName, Element entryEle);1382030648;Build a typed String value Object for the given raw value._@see org.springframework.beans.factory.config.TypedStringValue;protected final Object buildTypedStringValueForMap(String value, String defaultTypeName, Element entryEle) {_		try {_			TypedStringValue typedValue = buildTypedStringValue(value, defaultTypeName)__			typedValue.setSource(extractSource(entryEle))__			return typedValue__		}_		catch (ClassNotFoundException ex) {_			error("Type class [" + defaultTypeName + "] not found for Map key/value type", entryEle, ex)__			return value__		}_	};build,a,typed,string,value,object,for,the,given,raw,value,see,org,springframework,beans,factory,config,typed,string,value;protected,final,object,build,typed,string,value,for,map,string,value,string,default,type,name,element,entry,ele,try,typed,string,value,typed,value,build,typed,string,value,value,default,type,name,typed,value,set,source,extract,source,entry,ele,return,typed,value,catch,class,not,found,exception,ex,error,type,class,default,type,name,not,found,for,map,key,value,type,entry,ele,ex,return,value
BeanDefinitionParserDelegate -> protected final Object buildTypedStringValueForMap(String value, String defaultTypeName, Element entryEle);1385412762;Build a typed String value Object for the given raw value._@see org.springframework.beans.factory.config.TypedStringValue;protected final Object buildTypedStringValueForMap(String value, String defaultTypeName, Element entryEle) {_		try {_			TypedStringValue typedValue = buildTypedStringValue(value, defaultTypeName)__			typedValue.setSource(extractSource(entryEle))__			return typedValue__		}_		catch (ClassNotFoundException ex) {_			error("Type class [" + defaultTypeName + "] not found for Map key/value type", entryEle, ex)__			return value__		}_	};build,a,typed,string,value,object,for,the,given,raw,value,see,org,springframework,beans,factory,config,typed,string,value;protected,final,object,build,typed,string,value,for,map,string,value,string,default,type,name,element,entry,ele,try,typed,string,value,typed,value,build,typed,string,value,value,default,type,name,typed,value,set,source,extract,source,entry,ele,return,typed,value,catch,class,not,found,exception,ex,error,type,class,default,type,name,not,found,for,map,key,value,type,entry,ele,ex,return,value
BeanDefinitionParserDelegate -> protected final Object buildTypedStringValueForMap(String value, String defaultTypeName, Element entryEle);1410953197;Build a typed String value Object for the given raw value._@see org.springframework.beans.factory.config.TypedStringValue;protected final Object buildTypedStringValueForMap(String value, String defaultTypeName, Element entryEle) {_		try {_			TypedStringValue typedValue = buildTypedStringValue(value, defaultTypeName)__			typedValue.setSource(extractSource(entryEle))__			return typedValue__		}_		catch (ClassNotFoundException ex) {_			error("Type class [" + defaultTypeName + "] not found for Map key/value type", entryEle, ex)__			return value__		}_	};build,a,typed,string,value,object,for,the,given,raw,value,see,org,springframework,beans,factory,config,typed,string,value;protected,final,object,build,typed,string,value,for,map,string,value,string,default,type,name,element,entry,ele,try,typed,string,value,typed,value,build,typed,string,value,value,default,type,name,typed,value,set,source,extract,source,entry,ele,return,typed,value,catch,class,not,found,exception,ex,error,type,class,default,type,name,not,found,for,map,key,value,type,entry,ele,ex,return,value
BeanDefinitionParserDelegate -> protected final Object buildTypedStringValueForMap(String value, String defaultTypeName, Element entryEle);1411599760;Build a typed String value Object for the given raw value._@see org.springframework.beans.factory.config.TypedStringValue;protected final Object buildTypedStringValueForMap(String value, String defaultTypeName, Element entryEle) {_		try {_			TypedStringValue typedValue = buildTypedStringValue(value, defaultTypeName)__			typedValue.setSource(extractSource(entryEle))__			return typedValue__		}_		catch (ClassNotFoundException ex) {_			error("Type class [" + defaultTypeName + "] not found for Map key/value type", entryEle, ex)__			return value__		}_	};build,a,typed,string,value,object,for,the,given,raw,value,see,org,springframework,beans,factory,config,typed,string,value;protected,final,object,build,typed,string,value,for,map,string,value,string,default,type,name,element,entry,ele,try,typed,string,value,typed,value,build,typed,string,value,value,default,type,name,typed,value,set,source,extract,source,entry,ele,return,typed,value,catch,class,not,found,exception,ex,error,type,class,default,type,name,not,found,for,map,key,value,type,entry,ele,ex,return,value
BeanDefinitionParserDelegate -> protected final Object buildTypedStringValueForMap(String value, String defaultTypeName, Element entryEle);1419966315;Build a typed String value Object for the given raw value._@see org.springframework.beans.factory.config.TypedStringValue;protected final Object buildTypedStringValueForMap(String value, String defaultTypeName, Element entryEle) {_		try {_			TypedStringValue typedValue = buildTypedStringValue(value, defaultTypeName)__			typedValue.setSource(extractSource(entryEle))__			return typedValue__		}_		catch (ClassNotFoundException ex) {_			error("Type class [" + defaultTypeName + "] not found for Map key/value type", entryEle, ex)__			return value__		}_	};build,a,typed,string,value,object,for,the,given,raw,value,see,org,springframework,beans,factory,config,typed,string,value;protected,final,object,build,typed,string,value,for,map,string,value,string,default,type,name,element,entry,ele,try,typed,string,value,typed,value,build,typed,string,value,value,default,type,name,typed,value,set,source,extract,source,entry,ele,return,typed,value,catch,class,not,found,exception,ex,error,type,class,default,type,name,not,found,for,map,key,value,type,entry,ele,ex,return,value
BeanDefinitionParserDelegate -> protected final Object buildTypedStringValueForMap(String value, String defaultTypeName, Element entryEle);1431958785;Build a typed String value Object for the given raw value._@see org.springframework.beans.factory.config.TypedStringValue;protected final Object buildTypedStringValueForMap(String value, String defaultTypeName, Element entryEle) {_		try {_			TypedStringValue typedValue = buildTypedStringValue(value, defaultTypeName)__			typedValue.setSource(extractSource(entryEle))__			return typedValue__		}_		catch (ClassNotFoundException ex) {_			error("Type class [" + defaultTypeName + "] not found for Map key/value type", entryEle, ex)__			return value__		}_	};build,a,typed,string,value,object,for,the,given,raw,value,see,org,springframework,beans,factory,config,typed,string,value;protected,final,object,build,typed,string,value,for,map,string,value,string,default,type,name,element,entry,ele,try,typed,string,value,typed,value,build,typed,string,value,value,default,type,name,typed,value,set,source,extract,source,entry,ele,return,typed,value,catch,class,not,found,exception,ex,error,type,class,default,type,name,not,found,for,map,key,value,type,entry,ele,ex,return,value
BeanDefinitionParserDelegate -> protected final Object buildTypedStringValueForMap(String value, String defaultTypeName, Element entryEle);1432135182;Build a typed String value Object for the given raw value._@see org.springframework.beans.factory.config.TypedStringValue;protected final Object buildTypedStringValueForMap(String value, String defaultTypeName, Element entryEle) {_		try {_			TypedStringValue typedValue = buildTypedStringValue(value, defaultTypeName)__			typedValue.setSource(extractSource(entryEle))__			return typedValue__		}_		catch (ClassNotFoundException ex) {_			error("Type class [" + defaultTypeName + "] not found for Map key/value type", entryEle, ex)__			return value__		}_	};build,a,typed,string,value,object,for,the,given,raw,value,see,org,springframework,beans,factory,config,typed,string,value;protected,final,object,build,typed,string,value,for,map,string,value,string,default,type,name,element,entry,ele,try,typed,string,value,typed,value,build,typed,string,value,value,default,type,name,typed,value,set,source,extract,source,entry,ele,return,typed,value,catch,class,not,found,exception,ex,error,type,class,default,type,name,not,found,for,map,key,value,type,entry,ele,ex,return,value
BeanDefinitionParserDelegate -> protected final Object buildTypedStringValueForMap(String value, String defaultTypeName, Element entryEle);1447323728;Build a typed String value Object for the given raw value._@see org.springframework.beans.factory.config.TypedStringValue;protected final Object buildTypedStringValueForMap(String value, String defaultTypeName, Element entryEle) {_		try {_			TypedStringValue typedValue = buildTypedStringValue(value, defaultTypeName)__			typedValue.setSource(extractSource(entryEle))__			return typedValue__		}_		catch (ClassNotFoundException ex) {_			error("Type class [" + defaultTypeName + "] not found for Map key/value type", entryEle, ex)__			return value__		}_	};build,a,typed,string,value,object,for,the,given,raw,value,see,org,springframework,beans,factory,config,typed,string,value;protected,final,object,build,typed,string,value,for,map,string,value,string,default,type,name,element,entry,ele,try,typed,string,value,typed,value,build,typed,string,value,value,default,type,name,typed,value,set,source,extract,source,entry,ele,return,typed,value,catch,class,not,found,exception,ex,error,type,class,default,type,name,not,found,for,map,key,value,type,entry,ele,ex,return,value
BeanDefinitionParserDelegate -> protected final Object buildTypedStringValueForMap(String value, String defaultTypeName, Element entryEle);1467726769;Build a typed String value Object for the given raw value._@see org.springframework.beans.factory.config.TypedStringValue;protected final Object buildTypedStringValueForMap(String value, String defaultTypeName, Element entryEle) {_		try {_			TypedStringValue typedValue = buildTypedStringValue(value, defaultTypeName)__			typedValue.setSource(extractSource(entryEle))__			return typedValue__		}_		catch (ClassNotFoundException ex) {_			error("Type class [" + defaultTypeName + "] not found for Map key/value type", entryEle, ex)__			return value__		}_	};build,a,typed,string,value,object,for,the,given,raw,value,see,org,springframework,beans,factory,config,typed,string,value;protected,final,object,build,typed,string,value,for,map,string,value,string,default,type,name,element,entry,ele,try,typed,string,value,typed,value,build,typed,string,value,value,default,type,name,typed,value,set,source,extract,source,entry,ele,return,typed,value,catch,class,not,found,exception,ex,error,type,class,default,type,name,not,found,for,map,key,value,type,entry,ele,ex,return,value
BeanDefinitionParserDelegate -> protected final Object buildTypedStringValueForMap(String value, String defaultTypeName, Element entryEle);1467730834;Build a typed String value Object for the given raw value._@see org.springframework.beans.factory.config.TypedStringValue;protected final Object buildTypedStringValueForMap(String value, String defaultTypeName, Element entryEle) {_		try {_			TypedStringValue typedValue = buildTypedStringValue(value, defaultTypeName)__			typedValue.setSource(extractSource(entryEle))__			return typedValue__		}_		catch (ClassNotFoundException ex) {_			error("Type class [" + defaultTypeName + "] not found for Map key/value type", entryEle, ex)__			return value__		}_	};build,a,typed,string,value,object,for,the,given,raw,value,see,org,springframework,beans,factory,config,typed,string,value;protected,final,object,build,typed,string,value,for,map,string,value,string,default,type,name,element,entry,ele,try,typed,string,value,typed,value,build,typed,string,value,value,default,type,name,typed,value,set,source,extract,source,entry,ele,return,typed,value,catch,class,not,found,exception,ex,error,type,class,default,type,name,not,found,for,map,key,value,type,entry,ele,ex,return,value
BeanDefinitionParserDelegate -> protected final Object buildTypedStringValueForMap(String value, String defaultTypeName, Element entryEle);1467744603;Build a typed String value Object for the given raw value._@see org.springframework.beans.factory.config.TypedStringValue;protected final Object buildTypedStringValueForMap(String value, String defaultTypeName, Element entryEle) {_		try {_			TypedStringValue typedValue = buildTypedStringValue(value, defaultTypeName)__			typedValue.setSource(extractSource(entryEle))__			return typedValue__		}_		catch (ClassNotFoundException ex) {_			error("Type class [" + defaultTypeName + "] not found for Map key/value type", entryEle, ex)__			return value__		}_	};build,a,typed,string,value,object,for,the,given,raw,value,see,org,springframework,beans,factory,config,typed,string,value;protected,final,object,build,typed,string,value,for,map,string,value,string,default,type,name,element,entry,ele,try,typed,string,value,typed,value,build,typed,string,value,value,default,type,name,typed,value,set,source,extract,source,entry,ele,return,typed,value,catch,class,not,found,exception,ex,error,type,class,default,type,name,not,found,for,map,key,value,type,entry,ele,ex,return,value
BeanDefinitionParserDelegate -> protected final Object buildTypedStringValueForMap(String value, String defaultTypeName, Element entryEle);1487245676;Build a typed String value Object for the given raw value._@see org.springframework.beans.factory.config.TypedStringValue;protected final Object buildTypedStringValueForMap(String value, String defaultTypeName, Element entryEle) {_		try {_			TypedStringValue typedValue = buildTypedStringValue(value, defaultTypeName)__			typedValue.setSource(extractSource(entryEle))__			return typedValue__		}_		catch (ClassNotFoundException ex) {_			error("Type class [" + defaultTypeName + "] not found for Map key/value type", entryEle, ex)__			return value__		}_	};build,a,typed,string,value,object,for,the,given,raw,value,see,org,springframework,beans,factory,config,typed,string,value;protected,final,object,build,typed,string,value,for,map,string,value,string,default,type,name,element,entry,ele,try,typed,string,value,typed,value,build,typed,string,value,value,default,type,name,typed,value,set,source,extract,source,entry,ele,return,typed,value,catch,class,not,found,exception,ex,error,type,class,default,type,name,not,found,for,map,key,value,type,entry,ele,ex,return,value
BeanDefinitionParserDelegate -> protected final Object buildTypedStringValueForMap(String value, String defaultTypeName, Element entryEle);1487255851;Build a typed String value Object for the given raw value._@see org.springframework.beans.factory.config.TypedStringValue;protected final Object buildTypedStringValueForMap(String value, String defaultTypeName, Element entryEle) {_		try {_			TypedStringValue typedValue = buildTypedStringValue(value, defaultTypeName)__			typedValue.setSource(extractSource(entryEle))__			return typedValue__		}_		catch (ClassNotFoundException ex) {_			error("Type class [" + defaultTypeName + "] not found for Map key/value type", entryEle, ex)__			return value__		}_	};build,a,typed,string,value,object,for,the,given,raw,value,see,org,springframework,beans,factory,config,typed,string,value;protected,final,object,build,typed,string,value,for,map,string,value,string,default,type,name,element,entry,ele,try,typed,string,value,typed,value,build,typed,string,value,value,default,type,name,typed,value,set,source,extract,source,entry,ele,return,typed,value,catch,class,not,found,exception,ex,error,type,class,default,type,name,not,found,for,map,key,value,type,entry,ele,ex,return,value
BeanDefinitionParserDelegate -> protected final Object buildTypedStringValueForMap(String value, String defaultTypeName, Element entryEle);1494586217;Build a typed String value Object for the given raw value._@see org.springframework.beans.factory.config.TypedStringValue;protected final Object buildTypedStringValueForMap(String value, String defaultTypeName, Element entryEle) {_		try {_			TypedStringValue typedValue = buildTypedStringValue(value, defaultTypeName)__			typedValue.setSource(extractSource(entryEle))__			return typedValue__		}_		catch (ClassNotFoundException ex) {_			error("Type class [" + defaultTypeName + "] not found for Map key/value type", entryEle, ex)__			return value__		}_	};build,a,typed,string,value,object,for,the,given,raw,value,see,org,springframework,beans,factory,config,typed,string,value;protected,final,object,build,typed,string,value,for,map,string,value,string,default,type,name,element,entry,ele,try,typed,string,value,typed,value,build,typed,string,value,value,default,type,name,typed,value,set,source,extract,source,entry,ele,return,typed,value,catch,class,not,found,exception,ex,error,type,class,default,type,name,not,found,for,map,key,value,type,entry,ele,ex,return,value
BeanDefinitionParserDelegate -> protected final Object buildTypedStringValueForMap(String value, String defaultTypeName, Element entryEle);1495868221;Build a typed String value Object for the given raw value._@see org.springframework.beans.factory.config.TypedStringValue;protected final Object buildTypedStringValueForMap(String value, String defaultTypeName, Element entryEle) {_		try {_			TypedStringValue typedValue = buildTypedStringValue(value, defaultTypeName)__			typedValue.setSource(extractSource(entryEle))__			return typedValue__		}_		catch (ClassNotFoundException ex) {_			error("Type class [" + defaultTypeName + "] not found for Map key/value type", entryEle, ex)__			return value__		}_	};build,a,typed,string,value,object,for,the,given,raw,value,see,org,springframework,beans,factory,config,typed,string,value;protected,final,object,build,typed,string,value,for,map,string,value,string,default,type,name,element,entry,ele,try,typed,string,value,typed,value,build,typed,string,value,value,default,type,name,typed,value,set,source,extract,source,entry,ele,return,typed,value,catch,class,not,found,exception,ex,error,type,class,default,type,name,not,found,for,map,key,value,type,entry,ele,ex,return,value
BeanDefinitionParserDelegate -> protected final Object buildTypedStringValueForMap(String value, String defaultTypeName, Element entryEle);1496259743;Build a typed String value Object for the given raw value._@see org.springframework.beans.factory.config.TypedStringValue;protected final Object buildTypedStringValueForMap(String value, String defaultTypeName, Element entryEle) {_		try {_			TypedStringValue typedValue = buildTypedStringValue(value, defaultTypeName)__			typedValue.setSource(extractSource(entryEle))__			return typedValue__		}_		catch (ClassNotFoundException ex) {_			error("Type class [" + defaultTypeName + "] not found for Map key/value type", entryEle, ex)__			return value__		}_	};build,a,typed,string,value,object,for,the,given,raw,value,see,org,springframework,beans,factory,config,typed,string,value;protected,final,object,build,typed,string,value,for,map,string,value,string,default,type,name,element,entry,ele,try,typed,string,value,typed,value,build,typed,string,value,value,default,type,name,typed,value,set,source,extract,source,entry,ele,return,typed,value,catch,class,not,found,exception,ex,error,type,class,default,type,name,not,found,for,map,key,value,type,entry,ele,ex,return,value
BeanDefinitionParserDelegate -> protected final Object buildTypedStringValueForMap(String value, String defaultTypeName, Element entryEle);1496837955;Build a typed String value Object for the given raw value._@see org.springframework.beans.factory.config.TypedStringValue;protected final Object buildTypedStringValueForMap(String value, String defaultTypeName, Element entryEle) {_		try {_			TypedStringValue typedValue = buildTypedStringValue(value, defaultTypeName)__			typedValue.setSource(extractSource(entryEle))__			return typedValue__		}_		catch (ClassNotFoundException ex) {_			error("Type class [" + defaultTypeName + "] not found for Map key/value type", entryEle, ex)__			return value__		}_	};build,a,typed,string,value,object,for,the,given,raw,value,see,org,springframework,beans,factory,config,typed,string,value;protected,final,object,build,typed,string,value,for,map,string,value,string,default,type,name,element,entry,ele,try,typed,string,value,typed,value,build,typed,string,value,value,default,type,name,typed,value,set,source,extract,source,entry,ele,return,typed,value,catch,class,not,found,exception,ex,error,type,class,default,type,name,not,found,for,map,key,value,type,entry,ele,ex,return,value
BeanDefinitionParserDelegate -> protected final Object buildTypedStringValueForMap(String value, String defaultTypeName, Element entryEle);1503008029;Build a typed String value Object for the given raw value._@see org.springframework.beans.factory.config.TypedStringValue;protected final Object buildTypedStringValueForMap(String value, String defaultTypeName, Element entryEle) {_		try {_			TypedStringValue typedValue = buildTypedStringValue(value, defaultTypeName)__			typedValue.setSource(extractSource(entryEle))__			return typedValue__		}_		catch (ClassNotFoundException ex) {_			error("Type class [" + defaultTypeName + "] not found for Map key/value type", entryEle, ex)__			return value__		}_	};build,a,typed,string,value,object,for,the,given,raw,value,see,org,springframework,beans,factory,config,typed,string,value;protected,final,object,build,typed,string,value,for,map,string,value,string,default,type,name,element,entry,ele,try,typed,string,value,typed,value,build,typed,string,value,value,default,type,name,typed,value,set,source,extract,source,entry,ele,return,typed,value,catch,class,not,found,exception,ex,error,type,class,default,type,name,not,found,for,map,key,value,type,entry,ele,ex,return,value
BeanDefinitionParserDelegate -> protected final Object buildTypedStringValueForMap(String value, String defaultTypeName, Element entryEle);1519513303;Build a typed String value Object for the given raw value._@see org.springframework.beans.factory.config.TypedStringValue;protected final Object buildTypedStringValueForMap(String value, String defaultTypeName, Element entryEle) {_		try {_			TypedStringValue typedValue = buildTypedStringValue(value, defaultTypeName)__			typedValue.setSource(extractSource(entryEle))__			return typedValue__		}_		catch (ClassNotFoundException ex) {_			error("Type class [" + defaultTypeName + "] not found for Map key/value type", entryEle, ex)__			return value__		}_	};build,a,typed,string,value,object,for,the,given,raw,value,see,org,springframework,beans,factory,config,typed,string,value;protected,final,object,build,typed,string,value,for,map,string,value,string,default,type,name,element,entry,ele,try,typed,string,value,typed,value,build,typed,string,value,value,default,type,name,typed,value,set,source,extract,source,entry,ele,return,typed,value,catch,class,not,found,exception,ex,error,type,class,default,type,name,not,found,for,map,key,value,type,entry,ele,ex,return,value
BeanDefinitionParserDelegate -> protected final Object buildTypedStringValueForMap(String value, String defaultTypeName, Element entryEle);1530174524;Build a typed String value Object for the given raw value._@see org.springframework.beans.factory.config.TypedStringValue;protected final Object buildTypedStringValueForMap(String value, String defaultTypeName, Element entryEle) {_		try {_			TypedStringValue typedValue = buildTypedStringValue(value, defaultTypeName)__			typedValue.setSource(extractSource(entryEle))__			return typedValue__		}_		catch (ClassNotFoundException ex) {_			error("Type class [" + defaultTypeName + "] not found for Map key/value type", entryEle, ex)__			return value__		}_	};build,a,typed,string,value,object,for,the,given,raw,value,see,org,springframework,beans,factory,config,typed,string,value;protected,final,object,build,typed,string,value,for,map,string,value,string,default,type,name,element,entry,ele,try,typed,string,value,typed,value,build,typed,string,value,value,default,type,name,typed,value,set,source,extract,source,entry,ele,return,typed,value,catch,class,not,found,exception,ex,error,type,class,default,type,name,not,found,for,map,key,value,type,entry,ele,ex,return,value
BeanDefinitionParserDelegate -> protected final Object buildTypedStringValueForMap(String value, String defaultTypeName, Element entryEle);1530190293;Build a typed String value Object for the given raw value._@see org.springframework.beans.factory.config.TypedStringValue;protected final Object buildTypedStringValueForMap(String value, String defaultTypeName, Element entryEle) {_		try {_			TypedStringValue typedValue = buildTypedStringValue(value, defaultTypeName)__			typedValue.setSource(extractSource(entryEle))__			return typedValue__		}_		catch (ClassNotFoundException ex) {_			error("Type class [" + defaultTypeName + "] not found for Map key/value type", entryEle, ex)__			return value__		}_	};build,a,typed,string,value,object,for,the,given,raw,value,see,org,springframework,beans,factory,config,typed,string,value;protected,final,object,build,typed,string,value,for,map,string,value,string,default,type,name,element,entry,ele,try,typed,string,value,typed,value,build,typed,string,value,value,default,type,name,typed,value,set,source,extract,source,entry,ele,return,typed,value,catch,class,not,found,exception,ex,error,type,class,default,type,name,not,found,for,map,key,value,type,entry,ele,ex,return,value
BeanDefinitionParserDelegate -> protected final Object buildTypedStringValueForMap(String value, String defaultTypeName, Element entryEle);1532706365;Build a typed String value Object for the given raw value._@see org.springframework.beans.factory.config.TypedStringValue;protected final Object buildTypedStringValueForMap(String value, String defaultTypeName, Element entryEle) {_		try {_			TypedStringValue typedValue = buildTypedStringValue(value, defaultTypeName)__			typedValue.setSource(extractSource(entryEle))__			return typedValue__		}_		catch (ClassNotFoundException ex) {_			error("Type class [" + defaultTypeName + "] not found for Map key/value type", entryEle, ex)__			return value__		}_	};build,a,typed,string,value,object,for,the,given,raw,value,see,org,springframework,beans,factory,config,typed,string,value;protected,final,object,build,typed,string,value,for,map,string,value,string,default,type,name,element,entry,ele,try,typed,string,value,typed,value,build,typed,string,value,value,default,type,name,typed,value,set,source,extract,source,entry,ele,return,typed,value,catch,class,not,found,exception,ex,error,type,class,default,type,name,not,found,for,map,key,value,type,entry,ele,ex,return,value
BeanDefinitionParserDelegate -> protected final Object buildTypedStringValueForMap(String value, String defaultTypeName, Element entryEle);1546958161;Build a typed String value Object for the given raw value._@see org.springframework.beans.factory.config.TypedStringValue;protected final Object buildTypedStringValueForMap(String value, String defaultTypeName, Element entryEle) {_		try {_			TypedStringValue typedValue = buildTypedStringValue(value, defaultTypeName)__			typedValue.setSource(extractSource(entryEle))__			return typedValue__		}_		catch (ClassNotFoundException ex) {_			error("Type class [" + defaultTypeName + "] not found for Map key/value type", entryEle, ex)__			return value__		}_	};build,a,typed,string,value,object,for,the,given,raw,value,see,org,springframework,beans,factory,config,typed,string,value;protected,final,object,build,typed,string,value,for,map,string,value,string,default,type,name,element,entry,ele,try,typed,string,value,typed,value,build,typed,string,value,value,default,type,name,typed,value,set,source,extract,source,entry,ele,return,typed,value,catch,class,not,found,exception,ex,error,type,class,default,type,name,not,found,for,map,key,value,type,entry,ele,ex,return,value
BeanDefinitionParserDelegate -> @Nullable 	public AbstractBeanDefinition parseBeanDefinitionElement( 			Element ele, String beanName, @Nullable BeanDefinition containingBean);1496837955;Parse the bean definition itself, without regard to name or aliases. May return_{@code null} if problems occurred during the parsing of the bean definition.;@Nullable_	public AbstractBeanDefinition parseBeanDefinitionElement(_			Element ele, String beanName, @Nullable BeanDefinition containingBean) {__		this.parseState.push(new BeanEntry(beanName))___		String className = null__		if (ele.hasAttribute(CLASS_ATTRIBUTE)) {_			className = ele.getAttribute(CLASS_ATTRIBUTE).trim()__		}_		String parent = null__		if (ele.hasAttribute(PARENT_ATTRIBUTE)) {_			parent = ele.getAttribute(PARENT_ATTRIBUTE)__		}__		try {_			AbstractBeanDefinition bd = createBeanDefinition(className, parent)___			parseBeanDefinitionAttributes(ele, beanName, containingBean, bd)__			bd.setDescription(DomUtils.getChildElementValueByTagName(ele, DESCRIPTION_ELEMENT))___			parseMetaElements(ele, bd)__			parseLookupOverrideSubElements(ele, bd.getMethodOverrides())__			parseReplacedMethodSubElements(ele, bd.getMethodOverrides())___			parseConstructorArgElements(ele, bd)__			parsePropertyElements(ele, bd)__			parseQualifierElements(ele, bd)___			bd.setResource(this.readerContext.getResource())__			bd.setSource(extractSource(ele))___			return bd__		}_		catch (ClassNotFoundException ex) {_			error("Bean class [" + className + "] not found", ele, ex)__		}_		catch (NoClassDefFoundError err) {_			error("Class that bean class [" + className + "] depends on not found", ele, err)__		}_		catch (Throwable ex) {_			error("Unexpected failure during bean definition parsing", ele, ex)__		}_		finally {_			this.parseState.pop()__		}__		return null__	};parse,the,bean,definition,itself,without,regard,to,name,or,aliases,may,return,code,null,if,problems,occurred,during,the,parsing,of,the,bean,definition;nullable,public,abstract,bean,definition,parse,bean,definition,element,element,ele,string,bean,name,nullable,bean,definition,containing,bean,this,parse,state,push,new,bean,entry,bean,name,string,class,name,null,if,ele,has,attribute,class,name,ele,get,attribute,trim,string,parent,null,if,ele,has,attribute,parent,ele,get,attribute,try,abstract,bean,definition,bd,create,bean,definition,class,name,parent,parse,bean,definition,attributes,ele,bean,name,containing,bean,bd,bd,set,description,dom,utils,get,child,element,value,by,tag,name,ele,parse,meta,elements,ele,bd,parse,lookup,override,sub,elements,ele,bd,get,method,overrides,parse,replaced,method,sub,elements,ele,bd,get,method,overrides,parse,constructor,arg,elements,ele,bd,parse,property,elements,ele,bd,parse,qualifier,elements,ele,bd,bd,set,resource,this,reader,context,get,resource,bd,set,source,extract,source,ele,return,bd,catch,class,not,found,exception,ex,error,bean,class,class,name,not,found,ele,ex,catch,no,class,def,found,error,err,error,class,that,bean,class,class,name,depends,on,not,found,ele,err,catch,throwable,ex,error,unexpected,failure,during,bean,definition,parsing,ele,ex,finally,this,parse,state,pop,return,null
BeanDefinitionParserDelegate -> @Nullable 	public AbstractBeanDefinition parseBeanDefinitionElement( 			Element ele, String beanName, @Nullable BeanDefinition containingBean);1503008029;Parse the bean definition itself, without regard to name or aliases. May return_{@code null} if problems occurred during the parsing of the bean definition.;@Nullable_	public AbstractBeanDefinition parseBeanDefinitionElement(_			Element ele, String beanName, @Nullable BeanDefinition containingBean) {__		this.parseState.push(new BeanEntry(beanName))___		String className = null__		if (ele.hasAttribute(CLASS_ATTRIBUTE)) {_			className = ele.getAttribute(CLASS_ATTRIBUTE).trim()__		}_		String parent = null__		if (ele.hasAttribute(PARENT_ATTRIBUTE)) {_			parent = ele.getAttribute(PARENT_ATTRIBUTE)__		}__		try {_			AbstractBeanDefinition bd = createBeanDefinition(className, parent)___			parseBeanDefinitionAttributes(ele, beanName, containingBean, bd)__			bd.setDescription(DomUtils.getChildElementValueByTagName(ele, DESCRIPTION_ELEMENT))___			parseMetaElements(ele, bd)__			parseLookupOverrideSubElements(ele, bd.getMethodOverrides())__			parseReplacedMethodSubElements(ele, bd.getMethodOverrides())___			parseConstructorArgElements(ele, bd)__			parsePropertyElements(ele, bd)__			parseQualifierElements(ele, bd)___			bd.setResource(this.readerContext.getResource())__			bd.setSource(extractSource(ele))___			return bd__		}_		catch (ClassNotFoundException ex) {_			error("Bean class [" + className + "] not found", ele, ex)__		}_		catch (NoClassDefFoundError err) {_			error("Class that bean class [" + className + "] depends on not found", ele, err)__		}_		catch (Throwable ex) {_			error("Unexpected failure during bean definition parsing", ele, ex)__		}_		finally {_			this.parseState.pop()__		}__		return null__	};parse,the,bean,definition,itself,without,regard,to,name,or,aliases,may,return,code,null,if,problems,occurred,during,the,parsing,of,the,bean,definition;nullable,public,abstract,bean,definition,parse,bean,definition,element,element,ele,string,bean,name,nullable,bean,definition,containing,bean,this,parse,state,push,new,bean,entry,bean,name,string,class,name,null,if,ele,has,attribute,class,name,ele,get,attribute,trim,string,parent,null,if,ele,has,attribute,parent,ele,get,attribute,try,abstract,bean,definition,bd,create,bean,definition,class,name,parent,parse,bean,definition,attributes,ele,bean,name,containing,bean,bd,bd,set,description,dom,utils,get,child,element,value,by,tag,name,ele,parse,meta,elements,ele,bd,parse,lookup,override,sub,elements,ele,bd,get,method,overrides,parse,replaced,method,sub,elements,ele,bd,get,method,overrides,parse,constructor,arg,elements,ele,bd,parse,property,elements,ele,bd,parse,qualifier,elements,ele,bd,bd,set,resource,this,reader,context,get,resource,bd,set,source,extract,source,ele,return,bd,catch,class,not,found,exception,ex,error,bean,class,class,name,not,found,ele,ex,catch,no,class,def,found,error,err,error,class,that,bean,class,class,name,depends,on,not,found,ele,err,catch,throwable,ex,error,unexpected,failure,during,bean,definition,parsing,ele,ex,finally,this,parse,state,pop,return,null
BeanDefinitionParserDelegate -> @Nullable 	public AbstractBeanDefinition parseBeanDefinitionElement( 			Element ele, String beanName, @Nullable BeanDefinition containingBean);1519513303;Parse the bean definition itself, without regard to name or aliases. May return_{@code null} if problems occurred during the parsing of the bean definition.;@Nullable_	public AbstractBeanDefinition parseBeanDefinitionElement(_			Element ele, String beanName, @Nullable BeanDefinition containingBean) {__		this.parseState.push(new BeanEntry(beanName))___		String className = null__		if (ele.hasAttribute(CLASS_ATTRIBUTE)) {_			className = ele.getAttribute(CLASS_ATTRIBUTE).trim()__		}_		String parent = null__		if (ele.hasAttribute(PARENT_ATTRIBUTE)) {_			parent = ele.getAttribute(PARENT_ATTRIBUTE)__		}__		try {_			AbstractBeanDefinition bd = createBeanDefinition(className, parent)___			parseBeanDefinitionAttributes(ele, beanName, containingBean, bd)__			bd.setDescription(DomUtils.getChildElementValueByTagName(ele, DESCRIPTION_ELEMENT))___			parseMetaElements(ele, bd)__			parseLookupOverrideSubElements(ele, bd.getMethodOverrides())__			parseReplacedMethodSubElements(ele, bd.getMethodOverrides())___			parseConstructorArgElements(ele, bd)__			parsePropertyElements(ele, bd)__			parseQualifierElements(ele, bd)___			bd.setResource(this.readerContext.getResource())__			bd.setSource(extractSource(ele))___			return bd__		}_		catch (ClassNotFoundException ex) {_			error("Bean class [" + className + "] not found", ele, ex)__		}_		catch (NoClassDefFoundError err) {_			error("Class that bean class [" + className + "] depends on not found", ele, err)__		}_		catch (Throwable ex) {_			error("Unexpected failure during bean definition parsing", ele, ex)__		}_		finally {_			this.parseState.pop()__		}__		return null__	};parse,the,bean,definition,itself,without,regard,to,name,or,aliases,may,return,code,null,if,problems,occurred,during,the,parsing,of,the,bean,definition;nullable,public,abstract,bean,definition,parse,bean,definition,element,element,ele,string,bean,name,nullable,bean,definition,containing,bean,this,parse,state,push,new,bean,entry,bean,name,string,class,name,null,if,ele,has,attribute,class,name,ele,get,attribute,trim,string,parent,null,if,ele,has,attribute,parent,ele,get,attribute,try,abstract,bean,definition,bd,create,bean,definition,class,name,parent,parse,bean,definition,attributes,ele,bean,name,containing,bean,bd,bd,set,description,dom,utils,get,child,element,value,by,tag,name,ele,parse,meta,elements,ele,bd,parse,lookup,override,sub,elements,ele,bd,get,method,overrides,parse,replaced,method,sub,elements,ele,bd,get,method,overrides,parse,constructor,arg,elements,ele,bd,parse,property,elements,ele,bd,parse,qualifier,elements,ele,bd,bd,set,resource,this,reader,context,get,resource,bd,set,source,extract,source,ele,return,bd,catch,class,not,found,exception,ex,error,bean,class,class,name,not,found,ele,ex,catch,no,class,def,found,error,err,error,class,that,bean,class,class,name,depends,on,not,found,ele,err,catch,throwable,ex,error,unexpected,failure,during,bean,definition,parsing,ele,ex,finally,this,parse,state,pop,return,null
BeanDefinitionParserDelegate -> @Nullable 	public AbstractBeanDefinition parseBeanDefinitionElement( 			Element ele, String beanName, @Nullable BeanDefinition containingBean);1530174524;Parse the bean definition itself, without regard to name or aliases. May return_{@code null} if problems occurred during the parsing of the bean definition.;@Nullable_	public AbstractBeanDefinition parseBeanDefinitionElement(_			Element ele, String beanName, @Nullable BeanDefinition containingBean) {__		this.parseState.push(new BeanEntry(beanName))___		String className = null__		if (ele.hasAttribute(CLASS_ATTRIBUTE)) {_			className = ele.getAttribute(CLASS_ATTRIBUTE).trim()__		}_		String parent = null__		if (ele.hasAttribute(PARENT_ATTRIBUTE)) {_			parent = ele.getAttribute(PARENT_ATTRIBUTE)__		}__		try {_			AbstractBeanDefinition bd = createBeanDefinition(className, parent)___			parseBeanDefinitionAttributes(ele, beanName, containingBean, bd)__			bd.setDescription(DomUtils.getChildElementValueByTagName(ele, DESCRIPTION_ELEMENT))___			parseMetaElements(ele, bd)__			parseLookupOverrideSubElements(ele, bd.getMethodOverrides())__			parseReplacedMethodSubElements(ele, bd.getMethodOverrides())___			parseConstructorArgElements(ele, bd)__			parsePropertyElements(ele, bd)__			parseQualifierElements(ele, bd)___			bd.setResource(this.readerContext.getResource())__			bd.setSource(extractSource(ele))___			return bd__		}_		catch (ClassNotFoundException ex) {_			error("Bean class [" + className + "] not found", ele, ex)__		}_		catch (NoClassDefFoundError err) {_			error("Class that bean class [" + className + "] depends on not found", ele, err)__		}_		catch (Throwable ex) {_			error("Unexpected failure during bean definition parsing", ele, ex)__		}_		finally {_			this.parseState.pop()__		}__		return null__	};parse,the,bean,definition,itself,without,regard,to,name,or,aliases,may,return,code,null,if,problems,occurred,during,the,parsing,of,the,bean,definition;nullable,public,abstract,bean,definition,parse,bean,definition,element,element,ele,string,bean,name,nullable,bean,definition,containing,bean,this,parse,state,push,new,bean,entry,bean,name,string,class,name,null,if,ele,has,attribute,class,name,ele,get,attribute,trim,string,parent,null,if,ele,has,attribute,parent,ele,get,attribute,try,abstract,bean,definition,bd,create,bean,definition,class,name,parent,parse,bean,definition,attributes,ele,bean,name,containing,bean,bd,bd,set,description,dom,utils,get,child,element,value,by,tag,name,ele,parse,meta,elements,ele,bd,parse,lookup,override,sub,elements,ele,bd,get,method,overrides,parse,replaced,method,sub,elements,ele,bd,get,method,overrides,parse,constructor,arg,elements,ele,bd,parse,property,elements,ele,bd,parse,qualifier,elements,ele,bd,bd,set,resource,this,reader,context,get,resource,bd,set,source,extract,source,ele,return,bd,catch,class,not,found,exception,ex,error,bean,class,class,name,not,found,ele,ex,catch,no,class,def,found,error,err,error,class,that,bean,class,class,name,depends,on,not,found,ele,err,catch,throwable,ex,error,unexpected,failure,during,bean,definition,parsing,ele,ex,finally,this,parse,state,pop,return,null
BeanDefinitionParserDelegate -> @Nullable 	public AbstractBeanDefinition parseBeanDefinitionElement( 			Element ele, String beanName, @Nullable BeanDefinition containingBean);1530190293;Parse the bean definition itself, without regard to name or aliases. May return_{@code null} if problems occurred during the parsing of the bean definition.;@Nullable_	public AbstractBeanDefinition parseBeanDefinitionElement(_			Element ele, String beanName, @Nullable BeanDefinition containingBean) {__		this.parseState.push(new BeanEntry(beanName))___		String className = null__		if (ele.hasAttribute(CLASS_ATTRIBUTE)) {_			className = ele.getAttribute(CLASS_ATTRIBUTE).trim()__		}_		String parent = null__		if (ele.hasAttribute(PARENT_ATTRIBUTE)) {_			parent = ele.getAttribute(PARENT_ATTRIBUTE)__		}__		try {_			AbstractBeanDefinition bd = createBeanDefinition(className, parent)___			parseBeanDefinitionAttributes(ele, beanName, containingBean, bd)__			bd.setDescription(DomUtils.getChildElementValueByTagName(ele, DESCRIPTION_ELEMENT))___			parseMetaElements(ele, bd)__			parseLookupOverrideSubElements(ele, bd.getMethodOverrides())__			parseReplacedMethodSubElements(ele, bd.getMethodOverrides())___			parseConstructorArgElements(ele, bd)__			parsePropertyElements(ele, bd)__			parseQualifierElements(ele, bd)___			bd.setResource(this.readerContext.getResource())__			bd.setSource(extractSource(ele))___			return bd__		}_		catch (ClassNotFoundException ex) {_			error("Bean class [" + className + "] not found", ele, ex)__		}_		catch (NoClassDefFoundError err) {_			error("Class that bean class [" + className + "] depends on not found", ele, err)__		}_		catch (Throwable ex) {_			error("Unexpected failure during bean definition parsing", ele, ex)__		}_		finally {_			this.parseState.pop()__		}__		return null__	};parse,the,bean,definition,itself,without,regard,to,name,or,aliases,may,return,code,null,if,problems,occurred,during,the,parsing,of,the,bean,definition;nullable,public,abstract,bean,definition,parse,bean,definition,element,element,ele,string,bean,name,nullable,bean,definition,containing,bean,this,parse,state,push,new,bean,entry,bean,name,string,class,name,null,if,ele,has,attribute,class,name,ele,get,attribute,trim,string,parent,null,if,ele,has,attribute,parent,ele,get,attribute,try,abstract,bean,definition,bd,create,bean,definition,class,name,parent,parse,bean,definition,attributes,ele,bean,name,containing,bean,bd,bd,set,description,dom,utils,get,child,element,value,by,tag,name,ele,parse,meta,elements,ele,bd,parse,lookup,override,sub,elements,ele,bd,get,method,overrides,parse,replaced,method,sub,elements,ele,bd,get,method,overrides,parse,constructor,arg,elements,ele,bd,parse,property,elements,ele,bd,parse,qualifier,elements,ele,bd,bd,set,resource,this,reader,context,get,resource,bd,set,source,extract,source,ele,return,bd,catch,class,not,found,exception,ex,error,bean,class,class,name,not,found,ele,ex,catch,no,class,def,found,error,err,error,class,that,bean,class,class,name,depends,on,not,found,ele,err,catch,throwable,ex,error,unexpected,failure,during,bean,definition,parsing,ele,ex,finally,this,parse,state,pop,return,null
BeanDefinitionParserDelegate -> @Nullable 	public AbstractBeanDefinition parseBeanDefinitionElement( 			Element ele, String beanName, @Nullable BeanDefinition containingBean);1532706365;Parse the bean definition itself, without regard to name or aliases. May return_{@code null} if problems occurred during the parsing of the bean definition.;@Nullable_	public AbstractBeanDefinition parseBeanDefinitionElement(_			Element ele, String beanName, @Nullable BeanDefinition containingBean) {__		this.parseState.push(new BeanEntry(beanName))___		String className = null__		if (ele.hasAttribute(CLASS_ATTRIBUTE)) {_			className = ele.getAttribute(CLASS_ATTRIBUTE).trim()__		}_		String parent = null__		if (ele.hasAttribute(PARENT_ATTRIBUTE)) {_			parent = ele.getAttribute(PARENT_ATTRIBUTE)__		}__		try {_			AbstractBeanDefinition bd = createBeanDefinition(className, parent)___			parseBeanDefinitionAttributes(ele, beanName, containingBean, bd)__			bd.setDescription(DomUtils.getChildElementValueByTagName(ele, DESCRIPTION_ELEMENT))___			parseMetaElements(ele, bd)__			parseLookupOverrideSubElements(ele, bd.getMethodOverrides())__			parseReplacedMethodSubElements(ele, bd.getMethodOverrides())___			parseConstructorArgElements(ele, bd)__			parsePropertyElements(ele, bd)__			parseQualifierElements(ele, bd)___			bd.setResource(this.readerContext.getResource())__			bd.setSource(extractSource(ele))___			return bd__		}_		catch (ClassNotFoundException ex) {_			error("Bean class [" + className + "] not found", ele, ex)__		}_		catch (NoClassDefFoundError err) {_			error("Class that bean class [" + className + "] depends on not found", ele, err)__		}_		catch (Throwable ex) {_			error("Unexpected failure during bean definition parsing", ele, ex)__		}_		finally {_			this.parseState.pop()__		}__		return null__	};parse,the,bean,definition,itself,without,regard,to,name,or,aliases,may,return,code,null,if,problems,occurred,during,the,parsing,of,the,bean,definition;nullable,public,abstract,bean,definition,parse,bean,definition,element,element,ele,string,bean,name,nullable,bean,definition,containing,bean,this,parse,state,push,new,bean,entry,bean,name,string,class,name,null,if,ele,has,attribute,class,name,ele,get,attribute,trim,string,parent,null,if,ele,has,attribute,parent,ele,get,attribute,try,abstract,bean,definition,bd,create,bean,definition,class,name,parent,parse,bean,definition,attributes,ele,bean,name,containing,bean,bd,bd,set,description,dom,utils,get,child,element,value,by,tag,name,ele,parse,meta,elements,ele,bd,parse,lookup,override,sub,elements,ele,bd,get,method,overrides,parse,replaced,method,sub,elements,ele,bd,get,method,overrides,parse,constructor,arg,elements,ele,bd,parse,property,elements,ele,bd,parse,qualifier,elements,ele,bd,bd,set,resource,this,reader,context,get,resource,bd,set,source,extract,source,ele,return,bd,catch,class,not,found,exception,ex,error,bean,class,class,name,not,found,ele,ex,catch,no,class,def,found,error,err,error,class,that,bean,class,class,name,depends,on,not,found,ele,err,catch,throwable,ex,error,unexpected,failure,during,bean,definition,parsing,ele,ex,finally,this,parse,state,pop,return,null
BeanDefinitionParserDelegate -> @Nullable 	public AbstractBeanDefinition parseBeanDefinitionElement( 			Element ele, String beanName, @Nullable BeanDefinition containingBean);1546958161;Parse the bean definition itself, without regard to name or aliases. May return_{@code null} if problems occurred during the parsing of the bean definition.;@Nullable_	public AbstractBeanDefinition parseBeanDefinitionElement(_			Element ele, String beanName, @Nullable BeanDefinition containingBean) {__		this.parseState.push(new BeanEntry(beanName))___		String className = null__		if (ele.hasAttribute(CLASS_ATTRIBUTE)) {_			className = ele.getAttribute(CLASS_ATTRIBUTE).trim()__		}_		String parent = null__		if (ele.hasAttribute(PARENT_ATTRIBUTE)) {_			parent = ele.getAttribute(PARENT_ATTRIBUTE)__		}__		try {_			AbstractBeanDefinition bd = createBeanDefinition(className, parent)___			parseBeanDefinitionAttributes(ele, beanName, containingBean, bd)__			bd.setDescription(DomUtils.getChildElementValueByTagName(ele, DESCRIPTION_ELEMENT))___			parseMetaElements(ele, bd)__			parseLookupOverrideSubElements(ele, bd.getMethodOverrides())__			parseReplacedMethodSubElements(ele, bd.getMethodOverrides())___			parseConstructorArgElements(ele, bd)__			parsePropertyElements(ele, bd)__			parseQualifierElements(ele, bd)___			bd.setResource(this.readerContext.getResource())__			bd.setSource(extractSource(ele))___			return bd__		}_		catch (ClassNotFoundException ex) {_			error("Bean class [" + className + "] not found", ele, ex)__		}_		catch (NoClassDefFoundError err) {_			error("Class that bean class [" + className + "] depends on not found", ele, err)__		}_		catch (Throwable ex) {_			error("Unexpected failure during bean definition parsing", ele, ex)__		}_		finally {_			this.parseState.pop()__		}__		return null__	};parse,the,bean,definition,itself,without,regard,to,name,or,aliases,may,return,code,null,if,problems,occurred,during,the,parsing,of,the,bean,definition;nullable,public,abstract,bean,definition,parse,bean,definition,element,element,ele,string,bean,name,nullable,bean,definition,containing,bean,this,parse,state,push,new,bean,entry,bean,name,string,class,name,null,if,ele,has,attribute,class,name,ele,get,attribute,trim,string,parent,null,if,ele,has,attribute,parent,ele,get,attribute,try,abstract,bean,definition,bd,create,bean,definition,class,name,parent,parse,bean,definition,attributes,ele,bean,name,containing,bean,bd,bd,set,description,dom,utils,get,child,element,value,by,tag,name,ele,parse,meta,elements,ele,bd,parse,lookup,override,sub,elements,ele,bd,get,method,overrides,parse,replaced,method,sub,elements,ele,bd,get,method,overrides,parse,constructor,arg,elements,ele,bd,parse,property,elements,ele,bd,parse,qualifier,elements,ele,bd,bd,set,resource,this,reader,context,get,resource,bd,set,source,extract,source,ele,return,bd,catch,class,not,found,exception,ex,error,bean,class,class,name,not,found,ele,ex,catch,no,class,def,found,error,err,error,class,that,bean,class,class,name,depends,on,not,found,ele,err,catch,throwable,ex,error,unexpected,failure,during,bean,definition,parsing,ele,ex,finally,this,parse,state,pop,return,null
BeanDefinitionParserDelegate -> public Map parseMapElement(Element mapEle, BeanDefinition bd);1328020251;Parse a map element.;public Map parseMapElement(Element mapEle, BeanDefinition bd) {_		String defaultKeyType = mapEle.getAttribute(KEY_TYPE_ATTRIBUTE)__		String defaultValueType = mapEle.getAttribute(VALUE_TYPE_ATTRIBUTE)___		List<Element> entryEles = DomUtils.getChildElementsByTagName(mapEle, ENTRY_ELEMENT)__		ManagedMap<Object, Object> map = new ManagedMap<Object, Object>(entryEles.size())__		map.setSource(extractSource(mapEle))__		map.setKeyTypeName(defaultKeyType)__		map.setValueTypeName(defaultValueType)__		map.setMergeEnabled(parseMergeAttribute(mapEle))___		for (Element entryEle : entryEles) {_			_			_			NodeList entrySubNodes = entryEle.getChildNodes()__			Element keyEle = null__			Element valueEle = null__			for (int j = 0_ j < entrySubNodes.getLength()_ j++) {_				Node node = entrySubNodes.item(j)__				if (node instanceof Element) {_					Element candidateEle = (Element) node__					if (nodeNameEquals(candidateEle, KEY_ELEMENT)) {_						if (keyEle != null) {_							error("<entry> element is only allowed to contain one <key> sub-element", entryEle)__						}_						else {_							keyEle = candidateEle__						}_					}_					else {_						_						if (nodeNameEquals(candidateEle, DESCRIPTION_ELEMENT)) {_							_						}_						else if (valueEle != null) {_							error("<entry> element must not contain more than one value sub-element", entryEle)__						}_						else {_							valueEle = candidateEle__						}_					}_				}_			}__			_			Object key = null__			boolean hasKeyAttribute = entryEle.hasAttribute(KEY_ATTRIBUTE)__			boolean hasKeyRefAttribute = entryEle.hasAttribute(KEY_REF_ATTRIBUTE)__			if ((hasKeyAttribute && hasKeyRefAttribute) ||_					((hasKeyAttribute || hasKeyRefAttribute)) && keyEle != null) {_				error("<entry> element is only allowed to contain either " +_						"a 'key' attribute OR a 'key-ref' attribute OR a <key> sub-element", entryEle)__			}_			if (hasKeyAttribute) {_				key = buildTypedStringValueForMap(entryEle.getAttribute(KEY_ATTRIBUTE), defaultKeyType, entryEle)__			}_			else if (hasKeyRefAttribute) {_				String refName = entryEle.getAttribute(KEY_REF_ATTRIBUTE)__				if (!StringUtils.hasText(refName)) {_					error("<entry> element contains empty 'key-ref' attribute", entryEle)__				}_				RuntimeBeanReference ref = new RuntimeBeanReference(refName)__				ref.setSource(extractSource(entryEle))__				key = ref__			}_			else if (keyEle != null) {_				key = parseKeyElement(keyEle, bd, defaultKeyType)__			}_			else {_				error("<entry> element must specify a key", entryEle)__			}__			_			Object value = null__			boolean hasValueAttribute = entryEle.hasAttribute(VALUE_ATTRIBUTE)__			boolean hasValueRefAttribute = entryEle.hasAttribute(VALUE_REF_ATTRIBUTE)__			if ((hasValueAttribute && hasValueRefAttribute) ||_					((hasValueAttribute || hasValueRefAttribute)) && valueEle != null) {_				error("<entry> element is only allowed to contain either " +_						"'value' attribute OR 'value-ref' attribute OR <value> sub-element", entryEle)__			}_			if (hasValueAttribute) {_				value = buildTypedStringValueForMap(entryEle.getAttribute(VALUE_ATTRIBUTE), defaultValueType, entryEle)__			}_			else if (hasValueRefAttribute) {_				String refName = entryEle.getAttribute(VALUE_REF_ATTRIBUTE)__				if (!StringUtils.hasText(refName)) {_					error("<entry> element contains empty 'value-ref' attribute", entryEle)__				}_				RuntimeBeanReference ref = new RuntimeBeanReference(refName)__				ref.setSource(extractSource(entryEle))__				value = ref__			}_			else if (valueEle != null) {_				value = parsePropertySubElement(valueEle, bd, defaultValueType)__			}_			else {_				error("<entry> element must specify a value", entryEle)__			}__			_			map.put(key, value)__		}__		return map__	};parse,a,map,element;public,map,parse,map,element,element,map,ele,bean,definition,bd,string,default,key,type,map,ele,get,attribute,string,default,value,type,map,ele,get,attribute,list,element,entry,eles,dom,utils,get,child,elements,by,tag,name,map,ele,managed,map,object,object,map,new,managed,map,object,object,entry,eles,size,map,set,source,extract,source,map,ele,map,set,key,type,name,default,key,type,map,set,value,type,name,default,value,type,map,set,merge,enabled,parse,merge,attribute,map,ele,for,element,entry,ele,entry,eles,node,list,entry,sub,nodes,entry,ele,get,child,nodes,element,key,ele,null,element,value,ele,null,for,int,j,0,j,entry,sub,nodes,get,length,j,node,node,entry,sub,nodes,item,j,if,node,instanceof,element,element,candidate,ele,element,node,if,node,name,equals,candidate,ele,if,key,ele,null,error,entry,element,is,only,allowed,to,contain,one,key,sub,element,entry,ele,else,key,ele,candidate,ele,else,if,node,name,equals,candidate,ele,else,if,value,ele,null,error,entry,element,must,not,contain,more,than,one,value,sub,element,entry,ele,else,value,ele,candidate,ele,object,key,null,boolean,has,key,attribute,entry,ele,has,attribute,boolean,has,key,ref,attribute,entry,ele,has,attribute,if,has,key,attribute,has,key,ref,attribute,has,key,attribute,has,key,ref,attribute,key,ele,null,error,entry,element,is,only,allowed,to,contain,either,a,key,attribute,or,a,key,ref,attribute,or,a,key,sub,element,entry,ele,if,has,key,attribute,key,build,typed,string,value,for,map,entry,ele,get,attribute,default,key,type,entry,ele,else,if,has,key,ref,attribute,string,ref,name,entry,ele,get,attribute,if,string,utils,has,text,ref,name,error,entry,element,contains,empty,key,ref,attribute,entry,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,entry,ele,key,ref,else,if,key,ele,null,key,parse,key,element,key,ele,bd,default,key,type,else,error,entry,element,must,specify,a,key,entry,ele,object,value,null,boolean,has,value,attribute,entry,ele,has,attribute,boolean,has,value,ref,attribute,entry,ele,has,attribute,if,has,value,attribute,has,value,ref,attribute,has,value,attribute,has,value,ref,attribute,value,ele,null,error,entry,element,is,only,allowed,to,contain,either,value,attribute,or,value,ref,attribute,or,value,sub,element,entry,ele,if,has,value,attribute,value,build,typed,string,value,for,map,entry,ele,get,attribute,default,value,type,entry,ele,else,if,has,value,ref,attribute,string,ref,name,entry,ele,get,attribute,if,string,utils,has,text,ref,name,error,entry,element,contains,empty,value,ref,attribute,entry,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,entry,ele,value,ref,else,if,value,ele,null,value,parse,property,sub,element,value,ele,bd,default,value,type,else,error,entry,element,must,specify,a,value,entry,ele,map,put,key,value,return,map
BeanDefinitionParserDelegate -> public Map parseMapElement(Element mapEle, BeanDefinition bd);1335774711;Parse a map element.;public Map parseMapElement(Element mapEle, BeanDefinition bd) {_		String defaultKeyType = mapEle.getAttribute(KEY_TYPE_ATTRIBUTE)__		String defaultValueType = mapEle.getAttribute(VALUE_TYPE_ATTRIBUTE)___		List<Element> entryEles = DomUtils.getChildElementsByTagName(mapEle, ENTRY_ELEMENT)__		ManagedMap<Object, Object> map = new ManagedMap<Object, Object>(entryEles.size())__		map.setSource(extractSource(mapEle))__		map.setKeyTypeName(defaultKeyType)__		map.setValueTypeName(defaultValueType)__		map.setMergeEnabled(parseMergeAttribute(mapEle))___		for (Element entryEle : entryEles) {_			_			_			NodeList entrySubNodes = entryEle.getChildNodes()__			Element keyEle = null__			Element valueEle = null__			for (int j = 0_ j < entrySubNodes.getLength()_ j++) {_				Node node = entrySubNodes.item(j)__				if (node instanceof Element) {_					Element candidateEle = (Element) node__					if (nodeNameEquals(candidateEle, KEY_ELEMENT)) {_						if (keyEle != null) {_							error("<entry> element is only allowed to contain one <key> sub-element", entryEle)__						}_						else {_							keyEle = candidateEle__						}_					}_					else {_						_						if (nodeNameEquals(candidateEle, DESCRIPTION_ELEMENT)) {_							_						}_						else if (valueEle != null) {_							error("<entry> element must not contain more than one value sub-element", entryEle)__						}_						else {_							valueEle = candidateEle__						}_					}_				}_			}__			_			Object key = null__			boolean hasKeyAttribute = entryEle.hasAttribute(KEY_ATTRIBUTE)__			boolean hasKeyRefAttribute = entryEle.hasAttribute(KEY_REF_ATTRIBUTE)__			if ((hasKeyAttribute && hasKeyRefAttribute) ||_					((hasKeyAttribute || hasKeyRefAttribute)) && keyEle != null) {_				error("<entry> element is only allowed to contain either " +_						"a 'key' attribute OR a 'key-ref' attribute OR a <key> sub-element", entryEle)__			}_			if (hasKeyAttribute) {_				key = buildTypedStringValueForMap(entryEle.getAttribute(KEY_ATTRIBUTE), defaultKeyType, entryEle)__			}_			else if (hasKeyRefAttribute) {_				String refName = entryEle.getAttribute(KEY_REF_ATTRIBUTE)__				if (!StringUtils.hasText(refName)) {_					error("<entry> element contains empty 'key-ref' attribute", entryEle)__				}_				RuntimeBeanReference ref = new RuntimeBeanReference(refName)__				ref.setSource(extractSource(entryEle))__				key = ref__			}_			else if (keyEle != null) {_				key = parseKeyElement(keyEle, bd, defaultKeyType)__			}_			else {_				error("<entry> element must specify a key", entryEle)__			}__			_			Object value = null__			boolean hasValueAttribute = entryEle.hasAttribute(VALUE_ATTRIBUTE)__			boolean hasValueRefAttribute = entryEle.hasAttribute(VALUE_REF_ATTRIBUTE)__			if ((hasValueAttribute && hasValueRefAttribute) ||_					((hasValueAttribute || hasValueRefAttribute)) && valueEle != null) {_				error("<entry> element is only allowed to contain either " +_						"'value' attribute OR 'value-ref' attribute OR <value> sub-element", entryEle)__			}_			if (hasValueAttribute) {_				value = buildTypedStringValueForMap(entryEle.getAttribute(VALUE_ATTRIBUTE), defaultValueType, entryEle)__			}_			else if (hasValueRefAttribute) {_				String refName = entryEle.getAttribute(VALUE_REF_ATTRIBUTE)__				if (!StringUtils.hasText(refName)) {_					error("<entry> element contains empty 'value-ref' attribute", entryEle)__				}_				RuntimeBeanReference ref = new RuntimeBeanReference(refName)__				ref.setSource(extractSource(entryEle))__				value = ref__			}_			else if (valueEle != null) {_				value = parsePropertySubElement(valueEle, bd, defaultValueType)__			}_			else {_				error("<entry> element must specify a value", entryEle)__			}__			_			map.put(key, value)__		}__		return map__	};parse,a,map,element;public,map,parse,map,element,element,map,ele,bean,definition,bd,string,default,key,type,map,ele,get,attribute,string,default,value,type,map,ele,get,attribute,list,element,entry,eles,dom,utils,get,child,elements,by,tag,name,map,ele,managed,map,object,object,map,new,managed,map,object,object,entry,eles,size,map,set,source,extract,source,map,ele,map,set,key,type,name,default,key,type,map,set,value,type,name,default,value,type,map,set,merge,enabled,parse,merge,attribute,map,ele,for,element,entry,ele,entry,eles,node,list,entry,sub,nodes,entry,ele,get,child,nodes,element,key,ele,null,element,value,ele,null,for,int,j,0,j,entry,sub,nodes,get,length,j,node,node,entry,sub,nodes,item,j,if,node,instanceof,element,element,candidate,ele,element,node,if,node,name,equals,candidate,ele,if,key,ele,null,error,entry,element,is,only,allowed,to,contain,one,key,sub,element,entry,ele,else,key,ele,candidate,ele,else,if,node,name,equals,candidate,ele,else,if,value,ele,null,error,entry,element,must,not,contain,more,than,one,value,sub,element,entry,ele,else,value,ele,candidate,ele,object,key,null,boolean,has,key,attribute,entry,ele,has,attribute,boolean,has,key,ref,attribute,entry,ele,has,attribute,if,has,key,attribute,has,key,ref,attribute,has,key,attribute,has,key,ref,attribute,key,ele,null,error,entry,element,is,only,allowed,to,contain,either,a,key,attribute,or,a,key,ref,attribute,or,a,key,sub,element,entry,ele,if,has,key,attribute,key,build,typed,string,value,for,map,entry,ele,get,attribute,default,key,type,entry,ele,else,if,has,key,ref,attribute,string,ref,name,entry,ele,get,attribute,if,string,utils,has,text,ref,name,error,entry,element,contains,empty,key,ref,attribute,entry,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,entry,ele,key,ref,else,if,key,ele,null,key,parse,key,element,key,ele,bd,default,key,type,else,error,entry,element,must,specify,a,key,entry,ele,object,value,null,boolean,has,value,attribute,entry,ele,has,attribute,boolean,has,value,ref,attribute,entry,ele,has,attribute,if,has,value,attribute,has,value,ref,attribute,has,value,attribute,has,value,ref,attribute,value,ele,null,error,entry,element,is,only,allowed,to,contain,either,value,attribute,or,value,ref,attribute,or,value,sub,element,entry,ele,if,has,value,attribute,value,build,typed,string,value,for,map,entry,ele,get,attribute,default,value,type,entry,ele,else,if,has,value,ref,attribute,string,ref,name,entry,ele,get,attribute,if,string,utils,has,text,ref,name,error,entry,element,contains,empty,value,ref,attribute,entry,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,entry,ele,value,ref,else,if,value,ele,null,value,parse,property,sub,element,value,ele,bd,default,value,type,else,error,entry,element,must,specify,a,value,entry,ele,map,put,key,value,return,map
BeanDefinitionParserDelegate -> public Map parseMapElement(Element mapEle, BeanDefinition bd);1337341719;Parse a map element.;public Map parseMapElement(Element mapEle, BeanDefinition bd) {_		String defaultKeyType = mapEle.getAttribute(KEY_TYPE_ATTRIBUTE)__		String defaultValueType = mapEle.getAttribute(VALUE_TYPE_ATTRIBUTE)___		List<Element> entryEles = DomUtils.getChildElementsByTagName(mapEle, ENTRY_ELEMENT)__		ManagedMap<Object, Object> map = new ManagedMap<Object, Object>(entryEles.size())__		map.setSource(extractSource(mapEle))__		map.setKeyTypeName(defaultKeyType)__		map.setValueTypeName(defaultValueType)__		map.setMergeEnabled(parseMergeAttribute(mapEle))___		for (Element entryEle : entryEles) {_			_			_			NodeList entrySubNodes = entryEle.getChildNodes()__			Element keyEle = null__			Element valueEle = null__			for (int j = 0_ j < entrySubNodes.getLength()_ j++) {_				Node node = entrySubNodes.item(j)__				if (node instanceof Element) {_					Element candidateEle = (Element) node__					if (nodeNameEquals(candidateEle, KEY_ELEMENT)) {_						if (keyEle != null) {_							error("<entry> element is only allowed to contain one <key> sub-element", entryEle)__						}_						else {_							keyEle = candidateEle__						}_					}_					else {_						_						if (nodeNameEquals(candidateEle, DESCRIPTION_ELEMENT)) {_							_						}_						else if (valueEle != null) {_							error("<entry> element must not contain more than one value sub-element", entryEle)__						}_						else {_							valueEle = candidateEle__						}_					}_				}_			}__			_			Object key = null__			boolean hasKeyAttribute = entryEle.hasAttribute(KEY_ATTRIBUTE)__			boolean hasKeyRefAttribute = entryEle.hasAttribute(KEY_REF_ATTRIBUTE)__			if ((hasKeyAttribute && hasKeyRefAttribute) ||_					((hasKeyAttribute || hasKeyRefAttribute)) && keyEle != null) {_				error("<entry> element is only allowed to contain either " +_						"a 'key' attribute OR a 'key-ref' attribute OR a <key> sub-element", entryEle)__			}_			if (hasKeyAttribute) {_				key = buildTypedStringValueForMap(entryEle.getAttribute(KEY_ATTRIBUTE), defaultKeyType, entryEle)__			}_			else if (hasKeyRefAttribute) {_				String refName = entryEle.getAttribute(KEY_REF_ATTRIBUTE)__				if (!StringUtils.hasText(refName)) {_					error("<entry> element contains empty 'key-ref' attribute", entryEle)__				}_				RuntimeBeanReference ref = new RuntimeBeanReference(refName)__				ref.setSource(extractSource(entryEle))__				key = ref__			}_			else if (keyEle != null) {_				key = parseKeyElement(keyEle, bd, defaultKeyType)__			}_			else {_				error("<entry> element must specify a key", entryEle)__			}__			_			Object value = null__			boolean hasValueAttribute = entryEle.hasAttribute(VALUE_ATTRIBUTE)__			boolean hasValueRefAttribute = entryEle.hasAttribute(VALUE_REF_ATTRIBUTE)__			boolean hasValueTypeAttribute = entryEle.hasAttribute(VALUE_TYPE_ATTRIBUTE)__			if ((hasValueAttribute && hasValueRefAttribute) ||_					((hasValueAttribute || hasValueRefAttribute)) && valueEle != null) {_				error("<entry> element is only allowed to contain either " +_						"'value' attribute OR 'value-ref' attribute OR <value> sub-element", entryEle)__			}_			if ((hasValueTypeAttribute && hasValueRefAttribute) ||_				(hasValueTypeAttribute && !hasValueAttribute) ||_					(hasValueTypeAttribute && valueEle != null)) {_				error("<entry> element is only allowed to contain a 'value-type' " +_						"attribute when it has a 'value' attribute", entryEle)__			}_			if (hasValueAttribute) {_				String valueType = entryEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__				if (!StringUtils.hasText(valueType)) {_					valueType = defaultValueType__				}_				value = buildTypedStringValueForMap(entryEle.getAttribute(VALUE_ATTRIBUTE), valueType, entryEle)__			}_			else if (hasValueRefAttribute) {_				String refName = entryEle.getAttribute(VALUE_REF_ATTRIBUTE)__				if (!StringUtils.hasText(refName)) {_					error("<entry> element contains empty 'value-ref' attribute", entryEle)__				}_				RuntimeBeanReference ref = new RuntimeBeanReference(refName)__				ref.setSource(extractSource(entryEle))__				value = ref__			}_			else if (valueEle != null) {_				value = parsePropertySubElement(valueEle, bd, defaultValueType)__			}_			else {_				error("<entry> element must specify a value", entryEle)__			}__			_			map.put(key, value)__		}__		return map__	};parse,a,map,element;public,map,parse,map,element,element,map,ele,bean,definition,bd,string,default,key,type,map,ele,get,attribute,string,default,value,type,map,ele,get,attribute,list,element,entry,eles,dom,utils,get,child,elements,by,tag,name,map,ele,managed,map,object,object,map,new,managed,map,object,object,entry,eles,size,map,set,source,extract,source,map,ele,map,set,key,type,name,default,key,type,map,set,value,type,name,default,value,type,map,set,merge,enabled,parse,merge,attribute,map,ele,for,element,entry,ele,entry,eles,node,list,entry,sub,nodes,entry,ele,get,child,nodes,element,key,ele,null,element,value,ele,null,for,int,j,0,j,entry,sub,nodes,get,length,j,node,node,entry,sub,nodes,item,j,if,node,instanceof,element,element,candidate,ele,element,node,if,node,name,equals,candidate,ele,if,key,ele,null,error,entry,element,is,only,allowed,to,contain,one,key,sub,element,entry,ele,else,key,ele,candidate,ele,else,if,node,name,equals,candidate,ele,else,if,value,ele,null,error,entry,element,must,not,contain,more,than,one,value,sub,element,entry,ele,else,value,ele,candidate,ele,object,key,null,boolean,has,key,attribute,entry,ele,has,attribute,boolean,has,key,ref,attribute,entry,ele,has,attribute,if,has,key,attribute,has,key,ref,attribute,has,key,attribute,has,key,ref,attribute,key,ele,null,error,entry,element,is,only,allowed,to,contain,either,a,key,attribute,or,a,key,ref,attribute,or,a,key,sub,element,entry,ele,if,has,key,attribute,key,build,typed,string,value,for,map,entry,ele,get,attribute,default,key,type,entry,ele,else,if,has,key,ref,attribute,string,ref,name,entry,ele,get,attribute,if,string,utils,has,text,ref,name,error,entry,element,contains,empty,key,ref,attribute,entry,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,entry,ele,key,ref,else,if,key,ele,null,key,parse,key,element,key,ele,bd,default,key,type,else,error,entry,element,must,specify,a,key,entry,ele,object,value,null,boolean,has,value,attribute,entry,ele,has,attribute,boolean,has,value,ref,attribute,entry,ele,has,attribute,boolean,has,value,type,attribute,entry,ele,has,attribute,if,has,value,attribute,has,value,ref,attribute,has,value,attribute,has,value,ref,attribute,value,ele,null,error,entry,element,is,only,allowed,to,contain,either,value,attribute,or,value,ref,attribute,or,value,sub,element,entry,ele,if,has,value,type,attribute,has,value,ref,attribute,has,value,type,attribute,has,value,attribute,has,value,type,attribute,value,ele,null,error,entry,element,is,only,allowed,to,contain,a,value,type,attribute,when,it,has,a,value,attribute,entry,ele,if,has,value,attribute,string,value,type,entry,ele,get,attribute,if,string,utils,has,text,value,type,value,type,default,value,type,value,build,typed,string,value,for,map,entry,ele,get,attribute,value,type,entry,ele,else,if,has,value,ref,attribute,string,ref,name,entry,ele,get,attribute,if,string,utils,has,text,ref,name,error,entry,element,contains,empty,value,ref,attribute,entry,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,entry,ele,value,ref,else,if,value,ele,null,value,parse,property,sub,element,value,ele,bd,default,value,type,else,error,entry,element,must,specify,a,value,entry,ele,map,put,key,value,return,map
BeanDefinitionParserDelegate -> public Map parseMapElement(Element mapEle, BeanDefinition bd);1351392612;Parse a map element.;public Map parseMapElement(Element mapEle, BeanDefinition bd) {_		String defaultKeyType = mapEle.getAttribute(KEY_TYPE_ATTRIBUTE)__		String defaultValueType = mapEle.getAttribute(VALUE_TYPE_ATTRIBUTE)___		List<Element> entryEles = DomUtils.getChildElementsByTagName(mapEle, ENTRY_ELEMENT)__		ManagedMap<Object, Object> map = new ManagedMap<Object, Object>(entryEles.size())__		map.setSource(extractSource(mapEle))__		map.setKeyTypeName(defaultKeyType)__		map.setValueTypeName(defaultValueType)__		map.setMergeEnabled(parseMergeAttribute(mapEle))___		for (Element entryEle : entryEles) {_			_			_			NodeList entrySubNodes = entryEle.getChildNodes()__			Element keyEle = null__			Element valueEle = null__			for (int j = 0_ j < entrySubNodes.getLength()_ j++) {_				Node node = entrySubNodes.item(j)__				if (node instanceof Element) {_					Element candidateEle = (Element) node__					if (nodeNameEquals(candidateEle, KEY_ELEMENT)) {_						if (keyEle != null) {_							error("<entry> element is only allowed to contain one <key> sub-element", entryEle)__						}_						else {_							keyEle = candidateEle__						}_					}_					else {_						_						if (nodeNameEquals(candidateEle, DESCRIPTION_ELEMENT)) {_							_						}_						else if (valueEle != null) {_							error("<entry> element must not contain more than one value sub-element", entryEle)__						}_						else {_							valueEle = candidateEle__						}_					}_				}_			}__			_			Object key = null__			boolean hasKeyAttribute = entryEle.hasAttribute(KEY_ATTRIBUTE)__			boolean hasKeyRefAttribute = entryEle.hasAttribute(KEY_REF_ATTRIBUTE)__			if ((hasKeyAttribute && hasKeyRefAttribute) ||_					((hasKeyAttribute || hasKeyRefAttribute)) && keyEle != null) {_				error("<entry> element is only allowed to contain either " +_						"a 'key' attribute OR a 'key-ref' attribute OR a <key> sub-element", entryEle)__			}_			if (hasKeyAttribute) {_				key = buildTypedStringValueForMap(entryEle.getAttribute(KEY_ATTRIBUTE), defaultKeyType, entryEle)__			}_			else if (hasKeyRefAttribute) {_				String refName = entryEle.getAttribute(KEY_REF_ATTRIBUTE)__				if (!StringUtils.hasText(refName)) {_					error("<entry> element contains empty 'key-ref' attribute", entryEle)__				}_				RuntimeBeanReference ref = new RuntimeBeanReference(refName)__				ref.setSource(extractSource(entryEle))__				key = ref__			}_			else if (keyEle != null) {_				key = parseKeyElement(keyEle, bd, defaultKeyType)__			}_			else {_				error("<entry> element must specify a key", entryEle)__			}__			_			Object value = null__			boolean hasValueAttribute = entryEle.hasAttribute(VALUE_ATTRIBUTE)__			boolean hasValueRefAttribute = entryEle.hasAttribute(VALUE_REF_ATTRIBUTE)__			boolean hasValueTypeAttribute = entryEle.hasAttribute(VALUE_TYPE_ATTRIBUTE)__			if ((hasValueAttribute && hasValueRefAttribute) ||_					((hasValueAttribute || hasValueRefAttribute)) && valueEle != null) {_				error("<entry> element is only allowed to contain either " +_						"'value' attribute OR 'value-ref' attribute OR <value> sub-element", entryEle)__			}_			if ((hasValueTypeAttribute && hasValueRefAttribute) ||_				(hasValueTypeAttribute && !hasValueAttribute) ||_					(hasValueTypeAttribute && valueEle != null)) {_				error("<entry> element is only allowed to contain a 'value-type' " +_						"attribute when it has a 'value' attribute", entryEle)__			}_			if (hasValueAttribute) {_				String valueType = entryEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__				if (!StringUtils.hasText(valueType)) {_					valueType = defaultValueType__				}_				value = buildTypedStringValueForMap(entryEle.getAttribute(VALUE_ATTRIBUTE), valueType, entryEle)__			}_			else if (hasValueRefAttribute) {_				String refName = entryEle.getAttribute(VALUE_REF_ATTRIBUTE)__				if (!StringUtils.hasText(refName)) {_					error("<entry> element contains empty 'value-ref' attribute", entryEle)__				}_				RuntimeBeanReference ref = new RuntimeBeanReference(refName)__				ref.setSource(extractSource(entryEle))__				value = ref__			}_			else if (valueEle != null) {_				value = parsePropertySubElement(valueEle, bd, defaultValueType)__			}_			else {_				error("<entry> element must specify a value", entryEle)__			}__			_			map.put(key, value)__		}__		return map__	};parse,a,map,element;public,map,parse,map,element,element,map,ele,bean,definition,bd,string,default,key,type,map,ele,get,attribute,string,default,value,type,map,ele,get,attribute,list,element,entry,eles,dom,utils,get,child,elements,by,tag,name,map,ele,managed,map,object,object,map,new,managed,map,object,object,entry,eles,size,map,set,source,extract,source,map,ele,map,set,key,type,name,default,key,type,map,set,value,type,name,default,value,type,map,set,merge,enabled,parse,merge,attribute,map,ele,for,element,entry,ele,entry,eles,node,list,entry,sub,nodes,entry,ele,get,child,nodes,element,key,ele,null,element,value,ele,null,for,int,j,0,j,entry,sub,nodes,get,length,j,node,node,entry,sub,nodes,item,j,if,node,instanceof,element,element,candidate,ele,element,node,if,node,name,equals,candidate,ele,if,key,ele,null,error,entry,element,is,only,allowed,to,contain,one,key,sub,element,entry,ele,else,key,ele,candidate,ele,else,if,node,name,equals,candidate,ele,else,if,value,ele,null,error,entry,element,must,not,contain,more,than,one,value,sub,element,entry,ele,else,value,ele,candidate,ele,object,key,null,boolean,has,key,attribute,entry,ele,has,attribute,boolean,has,key,ref,attribute,entry,ele,has,attribute,if,has,key,attribute,has,key,ref,attribute,has,key,attribute,has,key,ref,attribute,key,ele,null,error,entry,element,is,only,allowed,to,contain,either,a,key,attribute,or,a,key,ref,attribute,or,a,key,sub,element,entry,ele,if,has,key,attribute,key,build,typed,string,value,for,map,entry,ele,get,attribute,default,key,type,entry,ele,else,if,has,key,ref,attribute,string,ref,name,entry,ele,get,attribute,if,string,utils,has,text,ref,name,error,entry,element,contains,empty,key,ref,attribute,entry,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,entry,ele,key,ref,else,if,key,ele,null,key,parse,key,element,key,ele,bd,default,key,type,else,error,entry,element,must,specify,a,key,entry,ele,object,value,null,boolean,has,value,attribute,entry,ele,has,attribute,boolean,has,value,ref,attribute,entry,ele,has,attribute,boolean,has,value,type,attribute,entry,ele,has,attribute,if,has,value,attribute,has,value,ref,attribute,has,value,attribute,has,value,ref,attribute,value,ele,null,error,entry,element,is,only,allowed,to,contain,either,value,attribute,or,value,ref,attribute,or,value,sub,element,entry,ele,if,has,value,type,attribute,has,value,ref,attribute,has,value,type,attribute,has,value,attribute,has,value,type,attribute,value,ele,null,error,entry,element,is,only,allowed,to,contain,a,value,type,attribute,when,it,has,a,value,attribute,entry,ele,if,has,value,attribute,string,value,type,entry,ele,get,attribute,if,string,utils,has,text,value,type,value,type,default,value,type,value,build,typed,string,value,for,map,entry,ele,get,attribute,value,type,entry,ele,else,if,has,value,ref,attribute,string,ref,name,entry,ele,get,attribute,if,string,utils,has,text,ref,name,error,entry,element,contains,empty,value,ref,attribute,entry,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,entry,ele,value,ref,else,if,value,ele,null,value,parse,property,sub,element,value,ele,bd,default,value,type,else,error,entry,element,must,specify,a,value,entry,ele,map,put,key,value,return,map
BeanDefinitionParserDelegate -> public Map parseMapElement(Element mapEle, BeanDefinition bd);1351696936;Parse a map element.;public Map parseMapElement(Element mapEle, BeanDefinition bd) {_		String defaultKeyType = mapEle.getAttribute(KEY_TYPE_ATTRIBUTE)__		String defaultValueType = mapEle.getAttribute(VALUE_TYPE_ATTRIBUTE)___		List<Element> entryEles = DomUtils.getChildElementsByTagName(mapEle, ENTRY_ELEMENT)__		ManagedMap<Object, Object> map = new ManagedMap<Object, Object>(entryEles.size())__		map.setSource(extractSource(mapEle))__		map.setKeyTypeName(defaultKeyType)__		map.setValueTypeName(defaultValueType)__		map.setMergeEnabled(parseMergeAttribute(mapEle))___		for (Element entryEle : entryEles) {_			_			_			NodeList entrySubNodes = entryEle.getChildNodes()__			Element keyEle = null__			Element valueEle = null__			for (int j = 0_ j < entrySubNodes.getLength()_ j++) {_				Node node = entrySubNodes.item(j)__				if (node instanceof Element) {_					Element candidateEle = (Element) node__					if (nodeNameEquals(candidateEle, KEY_ELEMENT)) {_						if (keyEle != null) {_							error("<entry> element is only allowed to contain one <key> sub-element", entryEle)__						}_						else {_							keyEle = candidateEle__						}_					}_					else {_						_						if (nodeNameEquals(candidateEle, DESCRIPTION_ELEMENT)) {_							_						}_						else if (valueEle != null) {_							error("<entry> element must not contain more than one value sub-element", entryEle)__						}_						else {_							valueEle = candidateEle__						}_					}_				}_			}__			_			Object key = null__			boolean hasKeyAttribute = entryEle.hasAttribute(KEY_ATTRIBUTE)__			boolean hasKeyRefAttribute = entryEle.hasAttribute(KEY_REF_ATTRIBUTE)__			if ((hasKeyAttribute && hasKeyRefAttribute) ||_					((hasKeyAttribute || hasKeyRefAttribute)) && keyEle != null) {_				error("<entry> element is only allowed to contain either " +_						"a 'key' attribute OR a 'key-ref' attribute OR a <key> sub-element", entryEle)__			}_			if (hasKeyAttribute) {_				key = buildTypedStringValueForMap(entryEle.getAttribute(KEY_ATTRIBUTE), defaultKeyType, entryEle)__			}_			else if (hasKeyRefAttribute) {_				String refName = entryEle.getAttribute(KEY_REF_ATTRIBUTE)__				if (!StringUtils.hasText(refName)) {_					error("<entry> element contains empty 'key-ref' attribute", entryEle)__				}_				RuntimeBeanReference ref = new RuntimeBeanReference(refName)__				ref.setSource(extractSource(entryEle))__				key = ref__			}_			else if (keyEle != null) {_				key = parseKeyElement(keyEle, bd, defaultKeyType)__			}_			else {_				error("<entry> element must specify a key", entryEle)__			}__			_			Object value = null__			boolean hasValueAttribute = entryEle.hasAttribute(VALUE_ATTRIBUTE)__			boolean hasValueRefAttribute = entryEle.hasAttribute(VALUE_REF_ATTRIBUTE)__			boolean hasValueTypeAttribute = entryEle.hasAttribute(VALUE_TYPE_ATTRIBUTE)__			if ((hasValueAttribute && hasValueRefAttribute) ||_					((hasValueAttribute || hasValueRefAttribute)) && valueEle != null) {_				error("<entry> element is only allowed to contain either " +_						"'value' attribute OR 'value-ref' attribute OR <value> sub-element", entryEle)__			}_			if ((hasValueTypeAttribute && hasValueRefAttribute) ||_				(hasValueTypeAttribute && !hasValueAttribute) ||_					(hasValueTypeAttribute && valueEle != null)) {_				error("<entry> element is only allowed to contain a 'value-type' " +_						"attribute when it has a 'value' attribute", entryEle)__			}_			if (hasValueAttribute) {_				String valueType = entryEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__				if (!StringUtils.hasText(valueType)) {_					valueType = defaultValueType__				}_				value = buildTypedStringValueForMap(entryEle.getAttribute(VALUE_ATTRIBUTE), valueType, entryEle)__			}_			else if (hasValueRefAttribute) {_				String refName = entryEle.getAttribute(VALUE_REF_ATTRIBUTE)__				if (!StringUtils.hasText(refName)) {_					error("<entry> element contains empty 'value-ref' attribute", entryEle)__				}_				RuntimeBeanReference ref = new RuntimeBeanReference(refName)__				ref.setSource(extractSource(entryEle))__				value = ref__			}_			else if (valueEle != null) {_				value = parsePropertySubElement(valueEle, bd, defaultValueType)__			}_			else {_				error("<entry> element must specify a value", entryEle)__			}__			_			map.put(key, value)__		}__		return map__	};parse,a,map,element;public,map,parse,map,element,element,map,ele,bean,definition,bd,string,default,key,type,map,ele,get,attribute,string,default,value,type,map,ele,get,attribute,list,element,entry,eles,dom,utils,get,child,elements,by,tag,name,map,ele,managed,map,object,object,map,new,managed,map,object,object,entry,eles,size,map,set,source,extract,source,map,ele,map,set,key,type,name,default,key,type,map,set,value,type,name,default,value,type,map,set,merge,enabled,parse,merge,attribute,map,ele,for,element,entry,ele,entry,eles,node,list,entry,sub,nodes,entry,ele,get,child,nodes,element,key,ele,null,element,value,ele,null,for,int,j,0,j,entry,sub,nodes,get,length,j,node,node,entry,sub,nodes,item,j,if,node,instanceof,element,element,candidate,ele,element,node,if,node,name,equals,candidate,ele,if,key,ele,null,error,entry,element,is,only,allowed,to,contain,one,key,sub,element,entry,ele,else,key,ele,candidate,ele,else,if,node,name,equals,candidate,ele,else,if,value,ele,null,error,entry,element,must,not,contain,more,than,one,value,sub,element,entry,ele,else,value,ele,candidate,ele,object,key,null,boolean,has,key,attribute,entry,ele,has,attribute,boolean,has,key,ref,attribute,entry,ele,has,attribute,if,has,key,attribute,has,key,ref,attribute,has,key,attribute,has,key,ref,attribute,key,ele,null,error,entry,element,is,only,allowed,to,contain,either,a,key,attribute,or,a,key,ref,attribute,or,a,key,sub,element,entry,ele,if,has,key,attribute,key,build,typed,string,value,for,map,entry,ele,get,attribute,default,key,type,entry,ele,else,if,has,key,ref,attribute,string,ref,name,entry,ele,get,attribute,if,string,utils,has,text,ref,name,error,entry,element,contains,empty,key,ref,attribute,entry,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,entry,ele,key,ref,else,if,key,ele,null,key,parse,key,element,key,ele,bd,default,key,type,else,error,entry,element,must,specify,a,key,entry,ele,object,value,null,boolean,has,value,attribute,entry,ele,has,attribute,boolean,has,value,ref,attribute,entry,ele,has,attribute,boolean,has,value,type,attribute,entry,ele,has,attribute,if,has,value,attribute,has,value,ref,attribute,has,value,attribute,has,value,ref,attribute,value,ele,null,error,entry,element,is,only,allowed,to,contain,either,value,attribute,or,value,ref,attribute,or,value,sub,element,entry,ele,if,has,value,type,attribute,has,value,ref,attribute,has,value,type,attribute,has,value,attribute,has,value,type,attribute,value,ele,null,error,entry,element,is,only,allowed,to,contain,a,value,type,attribute,when,it,has,a,value,attribute,entry,ele,if,has,value,attribute,string,value,type,entry,ele,get,attribute,if,string,utils,has,text,value,type,value,type,default,value,type,value,build,typed,string,value,for,map,entry,ele,get,attribute,value,type,entry,ele,else,if,has,value,ref,attribute,string,ref,name,entry,ele,get,attribute,if,string,utils,has,text,ref,name,error,entry,element,contains,empty,value,ref,attribute,entry,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,entry,ele,value,ref,else,if,value,ele,null,value,parse,property,sub,element,value,ele,bd,default,value,type,else,error,entry,element,must,specify,a,value,entry,ele,map,put,key,value,return,map
BeanDefinitionParserDelegate -> public Map parseMapElement(Element mapEle, BeanDefinition bd);1356735495;Parse a map element.;public Map parseMapElement(Element mapEle, BeanDefinition bd) {_		String defaultKeyType = mapEle.getAttribute(KEY_TYPE_ATTRIBUTE)__		String defaultValueType = mapEle.getAttribute(VALUE_TYPE_ATTRIBUTE)___		List<Element> entryEles = DomUtils.getChildElementsByTagName(mapEle, ENTRY_ELEMENT)__		ManagedMap<Object, Object> map = new ManagedMap<Object, Object>(entryEles.size())__		map.setSource(extractSource(mapEle))__		map.setKeyTypeName(defaultKeyType)__		map.setValueTypeName(defaultValueType)__		map.setMergeEnabled(parseMergeAttribute(mapEle))___		for (Element entryEle : entryEles) {_			_			_			NodeList entrySubNodes = entryEle.getChildNodes()__			Element keyEle = null__			Element valueEle = null__			for (int j = 0_ j < entrySubNodes.getLength()_ j++) {_				Node node = entrySubNodes.item(j)__				if (node instanceof Element) {_					Element candidateEle = (Element) node__					if (nodeNameEquals(candidateEle, KEY_ELEMENT)) {_						if (keyEle != null) {_							error("<entry> element is only allowed to contain one <key> sub-element", entryEle)__						}_						else {_							keyEle = candidateEle__						}_					}_					else {_						_						if (nodeNameEquals(candidateEle, DESCRIPTION_ELEMENT)) {_							_						}_						else if (valueEle != null) {_							error("<entry> element must not contain more than one value sub-element", entryEle)__						}_						else {_							valueEle = candidateEle__						}_					}_				}_			}__			_			Object key = null__			boolean hasKeyAttribute = entryEle.hasAttribute(KEY_ATTRIBUTE)__			boolean hasKeyRefAttribute = entryEle.hasAttribute(KEY_REF_ATTRIBUTE)__			if ((hasKeyAttribute && hasKeyRefAttribute) ||_					((hasKeyAttribute || hasKeyRefAttribute)) && keyEle != null) {_				error("<entry> element is only allowed to contain either " +_						"a 'key' attribute OR a 'key-ref' attribute OR a <key> sub-element", entryEle)__			}_			if (hasKeyAttribute) {_				key = buildTypedStringValueForMap(entryEle.getAttribute(KEY_ATTRIBUTE), defaultKeyType, entryEle)__			}_			else if (hasKeyRefAttribute) {_				String refName = entryEle.getAttribute(KEY_REF_ATTRIBUTE)__				if (!StringUtils.hasText(refName)) {_					error("<entry> element contains empty 'key-ref' attribute", entryEle)__				}_				RuntimeBeanReference ref = new RuntimeBeanReference(refName)__				ref.setSource(extractSource(entryEle))__				key = ref__			}_			else if (keyEle != null) {_				key = parseKeyElement(keyEle, bd, defaultKeyType)__			}_			else {_				error("<entry> element must specify a key", entryEle)__			}__			_			Object value = null__			boolean hasValueAttribute = entryEle.hasAttribute(VALUE_ATTRIBUTE)__			boolean hasValueRefAttribute = entryEle.hasAttribute(VALUE_REF_ATTRIBUTE)__			boolean hasValueTypeAttribute = entryEle.hasAttribute(VALUE_TYPE_ATTRIBUTE)__			if ((hasValueAttribute && hasValueRefAttribute) ||_					((hasValueAttribute || hasValueRefAttribute)) && valueEle != null) {_				error("<entry> element is only allowed to contain either " +_						"'value' attribute OR 'value-ref' attribute OR <value> sub-element", entryEle)__			}_			if ((hasValueTypeAttribute && hasValueRefAttribute) ||_				(hasValueTypeAttribute && !hasValueAttribute) ||_					(hasValueTypeAttribute && valueEle != null)) {_				error("<entry> element is only allowed to contain a 'value-type' " +_						"attribute when it has a 'value' attribute", entryEle)__			}_			if (hasValueAttribute) {_				String valueType = entryEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__				if (!StringUtils.hasText(valueType)) {_					valueType = defaultValueType__				}_				value = buildTypedStringValueForMap(entryEle.getAttribute(VALUE_ATTRIBUTE), valueType, entryEle)__			}_			else if (hasValueRefAttribute) {_				String refName = entryEle.getAttribute(VALUE_REF_ATTRIBUTE)__				if (!StringUtils.hasText(refName)) {_					error("<entry> element contains empty 'value-ref' attribute", entryEle)__				}_				RuntimeBeanReference ref = new RuntimeBeanReference(refName)__				ref.setSource(extractSource(entryEle))__				value = ref__			}_			else if (valueEle != null) {_				value = parsePropertySubElement(valueEle, bd, defaultValueType)__			}_			else {_				error("<entry> element must specify a value", entryEle)__			}__			_			map.put(key, value)__		}__		return map__	};parse,a,map,element;public,map,parse,map,element,element,map,ele,bean,definition,bd,string,default,key,type,map,ele,get,attribute,string,default,value,type,map,ele,get,attribute,list,element,entry,eles,dom,utils,get,child,elements,by,tag,name,map,ele,managed,map,object,object,map,new,managed,map,object,object,entry,eles,size,map,set,source,extract,source,map,ele,map,set,key,type,name,default,key,type,map,set,value,type,name,default,value,type,map,set,merge,enabled,parse,merge,attribute,map,ele,for,element,entry,ele,entry,eles,node,list,entry,sub,nodes,entry,ele,get,child,nodes,element,key,ele,null,element,value,ele,null,for,int,j,0,j,entry,sub,nodes,get,length,j,node,node,entry,sub,nodes,item,j,if,node,instanceof,element,element,candidate,ele,element,node,if,node,name,equals,candidate,ele,if,key,ele,null,error,entry,element,is,only,allowed,to,contain,one,key,sub,element,entry,ele,else,key,ele,candidate,ele,else,if,node,name,equals,candidate,ele,else,if,value,ele,null,error,entry,element,must,not,contain,more,than,one,value,sub,element,entry,ele,else,value,ele,candidate,ele,object,key,null,boolean,has,key,attribute,entry,ele,has,attribute,boolean,has,key,ref,attribute,entry,ele,has,attribute,if,has,key,attribute,has,key,ref,attribute,has,key,attribute,has,key,ref,attribute,key,ele,null,error,entry,element,is,only,allowed,to,contain,either,a,key,attribute,or,a,key,ref,attribute,or,a,key,sub,element,entry,ele,if,has,key,attribute,key,build,typed,string,value,for,map,entry,ele,get,attribute,default,key,type,entry,ele,else,if,has,key,ref,attribute,string,ref,name,entry,ele,get,attribute,if,string,utils,has,text,ref,name,error,entry,element,contains,empty,key,ref,attribute,entry,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,entry,ele,key,ref,else,if,key,ele,null,key,parse,key,element,key,ele,bd,default,key,type,else,error,entry,element,must,specify,a,key,entry,ele,object,value,null,boolean,has,value,attribute,entry,ele,has,attribute,boolean,has,value,ref,attribute,entry,ele,has,attribute,boolean,has,value,type,attribute,entry,ele,has,attribute,if,has,value,attribute,has,value,ref,attribute,has,value,attribute,has,value,ref,attribute,value,ele,null,error,entry,element,is,only,allowed,to,contain,either,value,attribute,or,value,ref,attribute,or,value,sub,element,entry,ele,if,has,value,type,attribute,has,value,ref,attribute,has,value,type,attribute,has,value,attribute,has,value,type,attribute,value,ele,null,error,entry,element,is,only,allowed,to,contain,a,value,type,attribute,when,it,has,a,value,attribute,entry,ele,if,has,value,attribute,string,value,type,entry,ele,get,attribute,if,string,utils,has,text,value,type,value,type,default,value,type,value,build,typed,string,value,for,map,entry,ele,get,attribute,value,type,entry,ele,else,if,has,value,ref,attribute,string,ref,name,entry,ele,get,attribute,if,string,utils,has,text,ref,name,error,entry,element,contains,empty,value,ref,attribute,entry,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,entry,ele,value,ref,else,if,value,ele,null,value,parse,property,sub,element,value,ele,bd,default,value,type,else,error,entry,element,must,specify,a,value,entry,ele,map,put,key,value,return,map
BeanDefinitionParserDelegate -> public Map parseMapElement(Element mapEle, BeanDefinition bd);1357119417;Parse a map element.;public Map parseMapElement(Element mapEle, BeanDefinition bd) {_		String defaultKeyType = mapEle.getAttribute(KEY_TYPE_ATTRIBUTE)__		String defaultValueType = mapEle.getAttribute(VALUE_TYPE_ATTRIBUTE)___		List<Element> entryEles = DomUtils.getChildElementsByTagName(mapEle, ENTRY_ELEMENT)__		ManagedMap<Object, Object> map = new ManagedMap<Object, Object>(entryEles.size())__		map.setSource(extractSource(mapEle))__		map.setKeyTypeName(defaultKeyType)__		map.setValueTypeName(defaultValueType)__		map.setMergeEnabled(parseMergeAttribute(mapEle))___		for (Element entryEle : entryEles) {_			_			_			NodeList entrySubNodes = entryEle.getChildNodes()__			Element keyEle = null__			Element valueEle = null__			for (int j = 0_ j < entrySubNodes.getLength()_ j++) {_				Node node = entrySubNodes.item(j)__				if (node instanceof Element) {_					Element candidateEle = (Element) node__					if (nodeNameEquals(candidateEle, KEY_ELEMENT)) {_						if (keyEle != null) {_							error("<entry> element is only allowed to contain one <key> sub-element", entryEle)__						}_						else {_							keyEle = candidateEle__						}_					}_					else {_						_						if (nodeNameEquals(candidateEle, DESCRIPTION_ELEMENT)) {_							_						}_						else if (valueEle != null) {_							error("<entry> element must not contain more than one value sub-element", entryEle)__						}_						else {_							valueEle = candidateEle__						}_					}_				}_			}__			_			Object key = null__			boolean hasKeyAttribute = entryEle.hasAttribute(KEY_ATTRIBUTE)__			boolean hasKeyRefAttribute = entryEle.hasAttribute(KEY_REF_ATTRIBUTE)__			if ((hasKeyAttribute && hasKeyRefAttribute) ||_					((hasKeyAttribute || hasKeyRefAttribute)) && keyEle != null) {_				error("<entry> element is only allowed to contain either " +_						"a 'key' attribute OR a 'key-ref' attribute OR a <key> sub-element", entryEle)__			}_			if (hasKeyAttribute) {_				key = buildTypedStringValueForMap(entryEle.getAttribute(KEY_ATTRIBUTE), defaultKeyType, entryEle)__			}_			else if (hasKeyRefAttribute) {_				String refName = entryEle.getAttribute(KEY_REF_ATTRIBUTE)__				if (!StringUtils.hasText(refName)) {_					error("<entry> element contains empty 'key-ref' attribute", entryEle)__				}_				RuntimeBeanReference ref = new RuntimeBeanReference(refName)__				ref.setSource(extractSource(entryEle))__				key = ref__			}_			else if (keyEle != null) {_				key = parseKeyElement(keyEle, bd, defaultKeyType)__			}_			else {_				error("<entry> element must specify a key", entryEle)__			}__			_			Object value = null__			boolean hasValueAttribute = entryEle.hasAttribute(VALUE_ATTRIBUTE)__			boolean hasValueRefAttribute = entryEle.hasAttribute(VALUE_REF_ATTRIBUTE)__			boolean hasValueTypeAttribute = entryEle.hasAttribute(VALUE_TYPE_ATTRIBUTE)__			if ((hasValueAttribute && hasValueRefAttribute) ||_					((hasValueAttribute || hasValueRefAttribute)) && valueEle != null) {_				error("<entry> element is only allowed to contain either " +_						"'value' attribute OR 'value-ref' attribute OR <value> sub-element", entryEle)__			}_			if ((hasValueTypeAttribute && hasValueRefAttribute) ||_				(hasValueTypeAttribute && !hasValueAttribute) ||_					(hasValueTypeAttribute && valueEle != null)) {_				error("<entry> element is only allowed to contain a 'value-type' " +_						"attribute when it has a 'value' attribute", entryEle)__			}_			if (hasValueAttribute) {_				String valueType = entryEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__				if (!StringUtils.hasText(valueType)) {_					valueType = defaultValueType__				}_				value = buildTypedStringValueForMap(entryEle.getAttribute(VALUE_ATTRIBUTE), valueType, entryEle)__			}_			else if (hasValueRefAttribute) {_				String refName = entryEle.getAttribute(VALUE_REF_ATTRIBUTE)__				if (!StringUtils.hasText(refName)) {_					error("<entry> element contains empty 'value-ref' attribute", entryEle)__				}_				RuntimeBeanReference ref = new RuntimeBeanReference(refName)__				ref.setSource(extractSource(entryEle))__				value = ref__			}_			else if (valueEle != null) {_				value = parsePropertySubElement(valueEle, bd, defaultValueType)__			}_			else {_				error("<entry> element must specify a value", entryEle)__			}__			_			map.put(key, value)__		}__		return map__	};parse,a,map,element;public,map,parse,map,element,element,map,ele,bean,definition,bd,string,default,key,type,map,ele,get,attribute,string,default,value,type,map,ele,get,attribute,list,element,entry,eles,dom,utils,get,child,elements,by,tag,name,map,ele,managed,map,object,object,map,new,managed,map,object,object,entry,eles,size,map,set,source,extract,source,map,ele,map,set,key,type,name,default,key,type,map,set,value,type,name,default,value,type,map,set,merge,enabled,parse,merge,attribute,map,ele,for,element,entry,ele,entry,eles,node,list,entry,sub,nodes,entry,ele,get,child,nodes,element,key,ele,null,element,value,ele,null,for,int,j,0,j,entry,sub,nodes,get,length,j,node,node,entry,sub,nodes,item,j,if,node,instanceof,element,element,candidate,ele,element,node,if,node,name,equals,candidate,ele,if,key,ele,null,error,entry,element,is,only,allowed,to,contain,one,key,sub,element,entry,ele,else,key,ele,candidate,ele,else,if,node,name,equals,candidate,ele,else,if,value,ele,null,error,entry,element,must,not,contain,more,than,one,value,sub,element,entry,ele,else,value,ele,candidate,ele,object,key,null,boolean,has,key,attribute,entry,ele,has,attribute,boolean,has,key,ref,attribute,entry,ele,has,attribute,if,has,key,attribute,has,key,ref,attribute,has,key,attribute,has,key,ref,attribute,key,ele,null,error,entry,element,is,only,allowed,to,contain,either,a,key,attribute,or,a,key,ref,attribute,or,a,key,sub,element,entry,ele,if,has,key,attribute,key,build,typed,string,value,for,map,entry,ele,get,attribute,default,key,type,entry,ele,else,if,has,key,ref,attribute,string,ref,name,entry,ele,get,attribute,if,string,utils,has,text,ref,name,error,entry,element,contains,empty,key,ref,attribute,entry,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,entry,ele,key,ref,else,if,key,ele,null,key,parse,key,element,key,ele,bd,default,key,type,else,error,entry,element,must,specify,a,key,entry,ele,object,value,null,boolean,has,value,attribute,entry,ele,has,attribute,boolean,has,value,ref,attribute,entry,ele,has,attribute,boolean,has,value,type,attribute,entry,ele,has,attribute,if,has,value,attribute,has,value,ref,attribute,has,value,attribute,has,value,ref,attribute,value,ele,null,error,entry,element,is,only,allowed,to,contain,either,value,attribute,or,value,ref,attribute,or,value,sub,element,entry,ele,if,has,value,type,attribute,has,value,ref,attribute,has,value,type,attribute,has,value,attribute,has,value,type,attribute,value,ele,null,error,entry,element,is,only,allowed,to,contain,a,value,type,attribute,when,it,has,a,value,attribute,entry,ele,if,has,value,attribute,string,value,type,entry,ele,get,attribute,if,string,utils,has,text,value,type,value,type,default,value,type,value,build,typed,string,value,for,map,entry,ele,get,attribute,value,type,entry,ele,else,if,has,value,ref,attribute,string,ref,name,entry,ele,get,attribute,if,string,utils,has,text,ref,name,error,entry,element,contains,empty,value,ref,attribute,entry,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,entry,ele,value,ref,else,if,value,ele,null,value,parse,property,sub,element,value,ele,bd,default,value,type,else,error,entry,element,must,specify,a,value,entry,ele,map,put,key,value,return,map
BeanDefinitionParserDelegate -> public Map parseMapElement(Element mapEle, BeanDefinition bd);1367943112;Parse a map element.;public Map parseMapElement(Element mapEle, BeanDefinition bd) {_		String defaultKeyType = mapEle.getAttribute(KEY_TYPE_ATTRIBUTE)__		String defaultValueType = mapEle.getAttribute(VALUE_TYPE_ATTRIBUTE)___		List<Element> entryEles = DomUtils.getChildElementsByTagName(mapEle, ENTRY_ELEMENT)__		ManagedMap<Object, Object> map = new ManagedMap<Object, Object>(entryEles.size())__		map.setSource(extractSource(mapEle))__		map.setKeyTypeName(defaultKeyType)__		map.setValueTypeName(defaultValueType)__		map.setMergeEnabled(parseMergeAttribute(mapEle))___		for (Element entryEle : entryEles) {_			_			_			NodeList entrySubNodes = entryEle.getChildNodes()__			Element keyEle = null__			Element valueEle = null__			for (int j = 0_ j < entrySubNodes.getLength()_ j++) {_				Node node = entrySubNodes.item(j)__				if (node instanceof Element) {_					Element candidateEle = (Element) node__					if (nodeNameEquals(candidateEle, KEY_ELEMENT)) {_						if (keyEle != null) {_							error("<entry> element is only allowed to contain one <key> sub-element", entryEle)__						}_						else {_							keyEle = candidateEle__						}_					}_					else {_						_						if (nodeNameEquals(candidateEle, DESCRIPTION_ELEMENT)) {_							_						}_						else if (valueEle != null) {_							error("<entry> element must not contain more than one value sub-element", entryEle)__						}_						else {_							valueEle = candidateEle__						}_					}_				}_			}__			_			Object key = null__			boolean hasKeyAttribute = entryEle.hasAttribute(KEY_ATTRIBUTE)__			boolean hasKeyRefAttribute = entryEle.hasAttribute(KEY_REF_ATTRIBUTE)__			if ((hasKeyAttribute && hasKeyRefAttribute) ||_					((hasKeyAttribute || hasKeyRefAttribute)) && keyEle != null) {_				error("<entry> element is only allowed to contain either " +_						"a 'key' attribute OR a 'key-ref' attribute OR a <key> sub-element", entryEle)__			}_			if (hasKeyAttribute) {_				key = buildTypedStringValueForMap(entryEle.getAttribute(KEY_ATTRIBUTE), defaultKeyType, entryEle)__			}_			else if (hasKeyRefAttribute) {_				String refName = entryEle.getAttribute(KEY_REF_ATTRIBUTE)__				if (!StringUtils.hasText(refName)) {_					error("<entry> element contains empty 'key-ref' attribute", entryEle)__				}_				RuntimeBeanReference ref = new RuntimeBeanReference(refName)__				ref.setSource(extractSource(entryEle))__				key = ref__			}_			else if (keyEle != null) {_				key = parseKeyElement(keyEle, bd, defaultKeyType)__			}_			else {_				error("<entry> element must specify a key", entryEle)__			}__			_			Object value = null__			boolean hasValueAttribute = entryEle.hasAttribute(VALUE_ATTRIBUTE)__			boolean hasValueRefAttribute = entryEle.hasAttribute(VALUE_REF_ATTRIBUTE)__			boolean hasValueTypeAttribute = entryEle.hasAttribute(VALUE_TYPE_ATTRIBUTE)__			if ((hasValueAttribute && hasValueRefAttribute) ||_					((hasValueAttribute || hasValueRefAttribute)) && valueEle != null) {_				error("<entry> element is only allowed to contain either " +_						"'value' attribute OR 'value-ref' attribute OR <value> sub-element", entryEle)__			}_			if ((hasValueTypeAttribute && hasValueRefAttribute) ||_				(hasValueTypeAttribute && !hasValueAttribute) ||_					(hasValueTypeAttribute && valueEle != null)) {_				error("<entry> element is only allowed to contain a 'value-type' " +_						"attribute when it has a 'value' attribute", entryEle)__			}_			if (hasValueAttribute) {_				String valueType = entryEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__				if (!StringUtils.hasText(valueType)) {_					valueType = defaultValueType__				}_				value = buildTypedStringValueForMap(entryEle.getAttribute(VALUE_ATTRIBUTE), valueType, entryEle)__			}_			else if (hasValueRefAttribute) {_				String refName = entryEle.getAttribute(VALUE_REF_ATTRIBUTE)__				if (!StringUtils.hasText(refName)) {_					error("<entry> element contains empty 'value-ref' attribute", entryEle)__				}_				RuntimeBeanReference ref = new RuntimeBeanReference(refName)__				ref.setSource(extractSource(entryEle))__				value = ref__			}_			else if (valueEle != null) {_				value = parsePropertySubElement(valueEle, bd, defaultValueType)__			}_			else {_				error("<entry> element must specify a value", entryEle)__			}__			_			map.put(key, value)__		}__		return map__	};parse,a,map,element;public,map,parse,map,element,element,map,ele,bean,definition,bd,string,default,key,type,map,ele,get,attribute,string,default,value,type,map,ele,get,attribute,list,element,entry,eles,dom,utils,get,child,elements,by,tag,name,map,ele,managed,map,object,object,map,new,managed,map,object,object,entry,eles,size,map,set,source,extract,source,map,ele,map,set,key,type,name,default,key,type,map,set,value,type,name,default,value,type,map,set,merge,enabled,parse,merge,attribute,map,ele,for,element,entry,ele,entry,eles,node,list,entry,sub,nodes,entry,ele,get,child,nodes,element,key,ele,null,element,value,ele,null,for,int,j,0,j,entry,sub,nodes,get,length,j,node,node,entry,sub,nodes,item,j,if,node,instanceof,element,element,candidate,ele,element,node,if,node,name,equals,candidate,ele,if,key,ele,null,error,entry,element,is,only,allowed,to,contain,one,key,sub,element,entry,ele,else,key,ele,candidate,ele,else,if,node,name,equals,candidate,ele,else,if,value,ele,null,error,entry,element,must,not,contain,more,than,one,value,sub,element,entry,ele,else,value,ele,candidate,ele,object,key,null,boolean,has,key,attribute,entry,ele,has,attribute,boolean,has,key,ref,attribute,entry,ele,has,attribute,if,has,key,attribute,has,key,ref,attribute,has,key,attribute,has,key,ref,attribute,key,ele,null,error,entry,element,is,only,allowed,to,contain,either,a,key,attribute,or,a,key,ref,attribute,or,a,key,sub,element,entry,ele,if,has,key,attribute,key,build,typed,string,value,for,map,entry,ele,get,attribute,default,key,type,entry,ele,else,if,has,key,ref,attribute,string,ref,name,entry,ele,get,attribute,if,string,utils,has,text,ref,name,error,entry,element,contains,empty,key,ref,attribute,entry,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,entry,ele,key,ref,else,if,key,ele,null,key,parse,key,element,key,ele,bd,default,key,type,else,error,entry,element,must,specify,a,key,entry,ele,object,value,null,boolean,has,value,attribute,entry,ele,has,attribute,boolean,has,value,ref,attribute,entry,ele,has,attribute,boolean,has,value,type,attribute,entry,ele,has,attribute,if,has,value,attribute,has,value,ref,attribute,has,value,attribute,has,value,ref,attribute,value,ele,null,error,entry,element,is,only,allowed,to,contain,either,value,attribute,or,value,ref,attribute,or,value,sub,element,entry,ele,if,has,value,type,attribute,has,value,ref,attribute,has,value,type,attribute,has,value,attribute,has,value,type,attribute,value,ele,null,error,entry,element,is,only,allowed,to,contain,a,value,type,attribute,when,it,has,a,value,attribute,entry,ele,if,has,value,attribute,string,value,type,entry,ele,get,attribute,if,string,utils,has,text,value,type,value,type,default,value,type,value,build,typed,string,value,for,map,entry,ele,get,attribute,value,type,entry,ele,else,if,has,value,ref,attribute,string,ref,name,entry,ele,get,attribute,if,string,utils,has,text,ref,name,error,entry,element,contains,empty,value,ref,attribute,entry,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,entry,ele,value,ref,else,if,value,ele,null,value,parse,property,sub,element,value,ele,bd,default,value,type,else,error,entry,element,must,specify,a,value,entry,ele,map,put,key,value,return,map
BeanDefinitionParserDelegate -> public Map parseMapElement(Element mapEle, BeanDefinition bd);1382030648;Parse a map element.;public Map parseMapElement(Element mapEle, BeanDefinition bd) {_		String defaultKeyType = mapEle.getAttribute(KEY_TYPE_ATTRIBUTE)__		String defaultValueType = mapEle.getAttribute(VALUE_TYPE_ATTRIBUTE)___		List<Element> entryEles = DomUtils.getChildElementsByTagName(mapEle, ENTRY_ELEMENT)__		ManagedMap<Object, Object> map = new ManagedMap<Object, Object>(entryEles.size())__		map.setSource(extractSource(mapEle))__		map.setKeyTypeName(defaultKeyType)__		map.setValueTypeName(defaultValueType)__		map.setMergeEnabled(parseMergeAttribute(mapEle))___		for (Element entryEle : entryEles) {_			_			_			NodeList entrySubNodes = entryEle.getChildNodes()__			Element keyEle = null__			Element valueEle = null__			for (int j = 0_ j < entrySubNodes.getLength()_ j++) {_				Node node = entrySubNodes.item(j)__				if (node instanceof Element) {_					Element candidateEle = (Element) node__					if (nodeNameEquals(candidateEle, KEY_ELEMENT)) {_						if (keyEle != null) {_							error("<entry> element is only allowed to contain one <key> sub-element", entryEle)__						}_						else {_							keyEle = candidateEle__						}_					}_					else {_						_						if (nodeNameEquals(candidateEle, DESCRIPTION_ELEMENT)) {_							_						}_						else if (valueEle != null) {_							error("<entry> element must not contain more than one value sub-element", entryEle)__						}_						else {_							valueEle = candidateEle__						}_					}_				}_			}__			_			Object key = null__			boolean hasKeyAttribute = entryEle.hasAttribute(KEY_ATTRIBUTE)__			boolean hasKeyRefAttribute = entryEle.hasAttribute(KEY_REF_ATTRIBUTE)__			if ((hasKeyAttribute && hasKeyRefAttribute) ||_					((hasKeyAttribute || hasKeyRefAttribute)) && keyEle != null) {_				error("<entry> element is only allowed to contain either " +_						"a 'key' attribute OR a 'key-ref' attribute OR a <key> sub-element", entryEle)__			}_			if (hasKeyAttribute) {_				key = buildTypedStringValueForMap(entryEle.getAttribute(KEY_ATTRIBUTE), defaultKeyType, entryEle)__			}_			else if (hasKeyRefAttribute) {_				String refName = entryEle.getAttribute(KEY_REF_ATTRIBUTE)__				if (!StringUtils.hasText(refName)) {_					error("<entry> element contains empty 'key-ref' attribute", entryEle)__				}_				RuntimeBeanReference ref = new RuntimeBeanReference(refName)__				ref.setSource(extractSource(entryEle))__				key = ref__			}_			else if (keyEle != null) {_				key = parseKeyElement(keyEle, bd, defaultKeyType)__			}_			else {_				error("<entry> element must specify a key", entryEle)__			}__			_			Object value = null__			boolean hasValueAttribute = entryEle.hasAttribute(VALUE_ATTRIBUTE)__			boolean hasValueRefAttribute = entryEle.hasAttribute(VALUE_REF_ATTRIBUTE)__			boolean hasValueTypeAttribute = entryEle.hasAttribute(VALUE_TYPE_ATTRIBUTE)__			if ((hasValueAttribute && hasValueRefAttribute) ||_					((hasValueAttribute || hasValueRefAttribute)) && valueEle != null) {_				error("<entry> element is only allowed to contain either " +_						"'value' attribute OR 'value-ref' attribute OR <value> sub-element", entryEle)__			}_			if ((hasValueTypeAttribute && hasValueRefAttribute) ||_				(hasValueTypeAttribute && !hasValueAttribute) ||_					(hasValueTypeAttribute && valueEle != null)) {_				error("<entry> element is only allowed to contain a 'value-type' " +_						"attribute when it has a 'value' attribute", entryEle)__			}_			if (hasValueAttribute) {_				String valueType = entryEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__				if (!StringUtils.hasText(valueType)) {_					valueType = defaultValueType__				}_				value = buildTypedStringValueForMap(entryEle.getAttribute(VALUE_ATTRIBUTE), valueType, entryEle)__			}_			else if (hasValueRefAttribute) {_				String refName = entryEle.getAttribute(VALUE_REF_ATTRIBUTE)__				if (!StringUtils.hasText(refName)) {_					error("<entry> element contains empty 'value-ref' attribute", entryEle)__				}_				RuntimeBeanReference ref = new RuntimeBeanReference(refName)__				ref.setSource(extractSource(entryEle))__				value = ref__			}_			else if (valueEle != null) {_				value = parsePropertySubElement(valueEle, bd, defaultValueType)__			}_			else {_				error("<entry> element must specify a value", entryEle)__			}__			_			map.put(key, value)__		}__		return map__	};parse,a,map,element;public,map,parse,map,element,element,map,ele,bean,definition,bd,string,default,key,type,map,ele,get,attribute,string,default,value,type,map,ele,get,attribute,list,element,entry,eles,dom,utils,get,child,elements,by,tag,name,map,ele,managed,map,object,object,map,new,managed,map,object,object,entry,eles,size,map,set,source,extract,source,map,ele,map,set,key,type,name,default,key,type,map,set,value,type,name,default,value,type,map,set,merge,enabled,parse,merge,attribute,map,ele,for,element,entry,ele,entry,eles,node,list,entry,sub,nodes,entry,ele,get,child,nodes,element,key,ele,null,element,value,ele,null,for,int,j,0,j,entry,sub,nodes,get,length,j,node,node,entry,sub,nodes,item,j,if,node,instanceof,element,element,candidate,ele,element,node,if,node,name,equals,candidate,ele,if,key,ele,null,error,entry,element,is,only,allowed,to,contain,one,key,sub,element,entry,ele,else,key,ele,candidate,ele,else,if,node,name,equals,candidate,ele,else,if,value,ele,null,error,entry,element,must,not,contain,more,than,one,value,sub,element,entry,ele,else,value,ele,candidate,ele,object,key,null,boolean,has,key,attribute,entry,ele,has,attribute,boolean,has,key,ref,attribute,entry,ele,has,attribute,if,has,key,attribute,has,key,ref,attribute,has,key,attribute,has,key,ref,attribute,key,ele,null,error,entry,element,is,only,allowed,to,contain,either,a,key,attribute,or,a,key,ref,attribute,or,a,key,sub,element,entry,ele,if,has,key,attribute,key,build,typed,string,value,for,map,entry,ele,get,attribute,default,key,type,entry,ele,else,if,has,key,ref,attribute,string,ref,name,entry,ele,get,attribute,if,string,utils,has,text,ref,name,error,entry,element,contains,empty,key,ref,attribute,entry,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,entry,ele,key,ref,else,if,key,ele,null,key,parse,key,element,key,ele,bd,default,key,type,else,error,entry,element,must,specify,a,key,entry,ele,object,value,null,boolean,has,value,attribute,entry,ele,has,attribute,boolean,has,value,ref,attribute,entry,ele,has,attribute,boolean,has,value,type,attribute,entry,ele,has,attribute,if,has,value,attribute,has,value,ref,attribute,has,value,attribute,has,value,ref,attribute,value,ele,null,error,entry,element,is,only,allowed,to,contain,either,value,attribute,or,value,ref,attribute,or,value,sub,element,entry,ele,if,has,value,type,attribute,has,value,ref,attribute,has,value,type,attribute,has,value,attribute,has,value,type,attribute,value,ele,null,error,entry,element,is,only,allowed,to,contain,a,value,type,attribute,when,it,has,a,value,attribute,entry,ele,if,has,value,attribute,string,value,type,entry,ele,get,attribute,if,string,utils,has,text,value,type,value,type,default,value,type,value,build,typed,string,value,for,map,entry,ele,get,attribute,value,type,entry,ele,else,if,has,value,ref,attribute,string,ref,name,entry,ele,get,attribute,if,string,utils,has,text,ref,name,error,entry,element,contains,empty,value,ref,attribute,entry,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,entry,ele,value,ref,else,if,value,ele,null,value,parse,property,sub,element,value,ele,bd,default,value,type,else,error,entry,element,must,specify,a,value,entry,ele,map,put,key,value,return,map
BeanDefinitionParserDelegate -> @Deprecated 	public final Environment getEnvironment();1411599760;Get the {@link Environment} associated with this helper instance._@deprecated in favor of {@link XmlReaderContext#getEnvironment()};@Deprecated_	public final Environment getEnvironment() {_		return this.readerContext.getEnvironment()__	};get,the,link,environment,associated,with,this,helper,instance,deprecated,in,favor,of,link,xml,reader,context,get,environment;deprecated,public,final,environment,get,environment,return,this,reader,context,get,environment
BeanDefinitionParserDelegate -> @Deprecated 	public final Environment getEnvironment();1419966315;Get the {@link Environment} associated with this helper instance._@deprecated in favor of {@link XmlReaderContext#getEnvironment()};@Deprecated_	public final Environment getEnvironment() {_		return this.readerContext.getEnvironment()__	};get,the,link,environment,associated,with,this,helper,instance,deprecated,in,favor,of,link,xml,reader,context,get,environment;deprecated,public,final,environment,get,environment,return,this,reader,context,get,environment
BeanDefinitionParserDelegate -> @Deprecated 	public final Environment getEnvironment();1431958785;Get the {@link Environment} associated with this helper instance._@deprecated in favor of {@link XmlReaderContext#getEnvironment()};@Deprecated_	public final Environment getEnvironment() {_		return this.readerContext.getEnvironment()__	};get,the,link,environment,associated,with,this,helper,instance,deprecated,in,favor,of,link,xml,reader,context,get,environment;deprecated,public,final,environment,get,environment,return,this,reader,context,get,environment
BeanDefinitionParserDelegate -> @Deprecated 	public final Environment getEnvironment();1432135182;Get the {@link Environment} associated with this helper instance._@deprecated in favor of {@link XmlReaderContext#getEnvironment()};@Deprecated_	public final Environment getEnvironment() {_		return this.readerContext.getEnvironment()__	};get,the,link,environment,associated,with,this,helper,instance,deprecated,in,favor,of,link,xml,reader,context,get,environment;deprecated,public,final,environment,get,environment,return,this,reader,context,get,environment
BeanDefinitionParserDelegate -> @Deprecated 	public final Environment getEnvironment();1447323728;Get the {@link Environment} associated with this helper instance._@deprecated in favor of {@link XmlReaderContext#getEnvironment()};@Deprecated_	public final Environment getEnvironment() {_		return this.readerContext.getEnvironment()__	};get,the,link,environment,associated,with,this,helper,instance,deprecated,in,favor,of,link,xml,reader,context,get,environment;deprecated,public,final,environment,get,environment,return,this,reader,context,get,environment
BeanDefinitionParserDelegate -> public List<Object> parseListElement(Element collectionEle, BeanDefinition bd);1385412762;Parse a list element.;public List<Object> parseListElement(Element collectionEle, BeanDefinition bd) {_		String defaultElementType = collectionEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = collectionEle.getChildNodes()__		ManagedList<Object> target = new ManagedList<Object>(nl.getLength())__		target.setSource(extractSource(collectionEle))__		target.setElementTypeName(defaultElementType)__		target.setMergeEnabled(parseMergeAttribute(collectionEle))__		parseCollectionElements(nl, target, bd, defaultElementType)__		return target__	};parse,a,list,element;public,list,object,parse,list,element,element,collection,ele,bean,definition,bd,string,default,element,type,collection,ele,get,attribute,node,list,nl,collection,ele,get,child,nodes,managed,list,object,target,new,managed,list,object,nl,get,length,target,set,source,extract,source,collection,ele,target,set,element,type,name,default,element,type,target,set,merge,enabled,parse,merge,attribute,collection,ele,parse,collection,elements,nl,target,bd,default,element,type,return,target
BeanDefinitionParserDelegate -> public List<Object> parseListElement(Element collectionEle, BeanDefinition bd);1410953197;Parse a list element.;public List<Object> parseListElement(Element collectionEle, BeanDefinition bd) {_		String defaultElementType = collectionEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = collectionEle.getChildNodes()__		ManagedList<Object> target = new ManagedList<Object>(nl.getLength())__		target.setSource(extractSource(collectionEle))__		target.setElementTypeName(defaultElementType)__		target.setMergeEnabled(parseMergeAttribute(collectionEle))__		parseCollectionElements(nl, target, bd, defaultElementType)__		return target__	};parse,a,list,element;public,list,object,parse,list,element,element,collection,ele,bean,definition,bd,string,default,element,type,collection,ele,get,attribute,node,list,nl,collection,ele,get,child,nodes,managed,list,object,target,new,managed,list,object,nl,get,length,target,set,source,extract,source,collection,ele,target,set,element,type,name,default,element,type,target,set,merge,enabled,parse,merge,attribute,collection,ele,parse,collection,elements,nl,target,bd,default,element,type,return,target
BeanDefinitionParserDelegate -> public List<Object> parseListElement(Element collectionEle, BeanDefinition bd);1411599760;Parse a list element.;public List<Object> parseListElement(Element collectionEle, BeanDefinition bd) {_		String defaultElementType = collectionEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = collectionEle.getChildNodes()__		ManagedList<Object> target = new ManagedList<Object>(nl.getLength())__		target.setSource(extractSource(collectionEle))__		target.setElementTypeName(defaultElementType)__		target.setMergeEnabled(parseMergeAttribute(collectionEle))__		parseCollectionElements(nl, target, bd, defaultElementType)__		return target__	};parse,a,list,element;public,list,object,parse,list,element,element,collection,ele,bean,definition,bd,string,default,element,type,collection,ele,get,attribute,node,list,nl,collection,ele,get,child,nodes,managed,list,object,target,new,managed,list,object,nl,get,length,target,set,source,extract,source,collection,ele,target,set,element,type,name,default,element,type,target,set,merge,enabled,parse,merge,attribute,collection,ele,parse,collection,elements,nl,target,bd,default,element,type,return,target
BeanDefinitionParserDelegate -> public List<Object> parseListElement(Element collectionEle, BeanDefinition bd);1419966315;Parse a list element.;public List<Object> parseListElement(Element collectionEle, BeanDefinition bd) {_		String defaultElementType = collectionEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = collectionEle.getChildNodes()__		ManagedList<Object> target = new ManagedList<Object>(nl.getLength())__		target.setSource(extractSource(collectionEle))__		target.setElementTypeName(defaultElementType)__		target.setMergeEnabled(parseMergeAttribute(collectionEle))__		parseCollectionElements(nl, target, bd, defaultElementType)__		return target__	};parse,a,list,element;public,list,object,parse,list,element,element,collection,ele,bean,definition,bd,string,default,element,type,collection,ele,get,attribute,node,list,nl,collection,ele,get,child,nodes,managed,list,object,target,new,managed,list,object,nl,get,length,target,set,source,extract,source,collection,ele,target,set,element,type,name,default,element,type,target,set,merge,enabled,parse,merge,attribute,collection,ele,parse,collection,elements,nl,target,bd,default,element,type,return,target
BeanDefinitionParserDelegate -> public List<Object> parseListElement(Element collectionEle, BeanDefinition bd);1431958785;Parse a list element.;public List<Object> parseListElement(Element collectionEle, BeanDefinition bd) {_		String defaultElementType = collectionEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = collectionEle.getChildNodes()__		ManagedList<Object> target = new ManagedList<Object>(nl.getLength())__		target.setSource(extractSource(collectionEle))__		target.setElementTypeName(defaultElementType)__		target.setMergeEnabled(parseMergeAttribute(collectionEle))__		parseCollectionElements(nl, target, bd, defaultElementType)__		return target__	};parse,a,list,element;public,list,object,parse,list,element,element,collection,ele,bean,definition,bd,string,default,element,type,collection,ele,get,attribute,node,list,nl,collection,ele,get,child,nodes,managed,list,object,target,new,managed,list,object,nl,get,length,target,set,source,extract,source,collection,ele,target,set,element,type,name,default,element,type,target,set,merge,enabled,parse,merge,attribute,collection,ele,parse,collection,elements,nl,target,bd,default,element,type,return,target
BeanDefinitionParserDelegate -> public List<Object> parseListElement(Element collectionEle, BeanDefinition bd);1432135182;Parse a list element.;public List<Object> parseListElement(Element collectionEle, BeanDefinition bd) {_		String defaultElementType = collectionEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = collectionEle.getChildNodes()__		ManagedList<Object> target = new ManagedList<Object>(nl.getLength())__		target.setSource(extractSource(collectionEle))__		target.setElementTypeName(defaultElementType)__		target.setMergeEnabled(parseMergeAttribute(collectionEle))__		parseCollectionElements(nl, target, bd, defaultElementType)__		return target__	};parse,a,list,element;public,list,object,parse,list,element,element,collection,ele,bean,definition,bd,string,default,element,type,collection,ele,get,attribute,node,list,nl,collection,ele,get,child,nodes,managed,list,object,target,new,managed,list,object,nl,get,length,target,set,source,extract,source,collection,ele,target,set,element,type,name,default,element,type,target,set,merge,enabled,parse,merge,attribute,collection,ele,parse,collection,elements,nl,target,bd,default,element,type,return,target
BeanDefinitionParserDelegate -> public List<Object> parseListElement(Element collectionEle, BeanDefinition bd);1447323728;Parse a list element.;public List<Object> parseListElement(Element collectionEle, BeanDefinition bd) {_		String defaultElementType = collectionEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = collectionEle.getChildNodes()__		ManagedList<Object> target = new ManagedList<Object>(nl.getLength())__		target.setSource(extractSource(collectionEle))__		target.setElementTypeName(defaultElementType)__		target.setMergeEnabled(parseMergeAttribute(collectionEle))__		parseCollectionElements(nl, target, bd, defaultElementType)__		return target__	};parse,a,list,element;public,list,object,parse,list,element,element,collection,ele,bean,definition,bd,string,default,element,type,collection,ele,get,attribute,node,list,nl,collection,ele,get,child,nodes,managed,list,object,target,new,managed,list,object,nl,get,length,target,set,source,extract,source,collection,ele,target,set,element,type,name,default,element,type,target,set,merge,enabled,parse,merge,attribute,collection,ele,parse,collection,elements,nl,target,bd,default,element,type,return,target
BeanDefinitionParserDelegate -> public List<Object> parseListElement(Element collectionEle, BeanDefinition bd);1467726769;Parse a list element.;public List<Object> parseListElement(Element collectionEle, BeanDefinition bd) {_		String defaultElementType = collectionEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = collectionEle.getChildNodes()__		ManagedList<Object> target = new ManagedList<Object>(nl.getLength())__		target.setSource(extractSource(collectionEle))__		target.setElementTypeName(defaultElementType)__		target.setMergeEnabled(parseMergeAttribute(collectionEle))__		parseCollectionElements(nl, target, bd, defaultElementType)__		return target__	};parse,a,list,element;public,list,object,parse,list,element,element,collection,ele,bean,definition,bd,string,default,element,type,collection,ele,get,attribute,node,list,nl,collection,ele,get,child,nodes,managed,list,object,target,new,managed,list,object,nl,get,length,target,set,source,extract,source,collection,ele,target,set,element,type,name,default,element,type,target,set,merge,enabled,parse,merge,attribute,collection,ele,parse,collection,elements,nl,target,bd,default,element,type,return,target
BeanDefinitionParserDelegate -> public List<Object> parseListElement(Element collectionEle, BeanDefinition bd);1467730834;Parse a list element.;public List<Object> parseListElement(Element collectionEle, BeanDefinition bd) {_		String defaultElementType = collectionEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = collectionEle.getChildNodes()__		ManagedList<Object> target = new ManagedList<>(nl.getLength())__		target.setSource(extractSource(collectionEle))__		target.setElementTypeName(defaultElementType)__		target.setMergeEnabled(parseMergeAttribute(collectionEle))__		parseCollectionElements(nl, target, bd, defaultElementType)__		return target__	};parse,a,list,element;public,list,object,parse,list,element,element,collection,ele,bean,definition,bd,string,default,element,type,collection,ele,get,attribute,node,list,nl,collection,ele,get,child,nodes,managed,list,object,target,new,managed,list,nl,get,length,target,set,source,extract,source,collection,ele,target,set,element,type,name,default,element,type,target,set,merge,enabled,parse,merge,attribute,collection,ele,parse,collection,elements,nl,target,bd,default,element,type,return,target
BeanDefinitionParserDelegate -> public List<Object> parseListElement(Element collectionEle, BeanDefinition bd);1467744603;Parse a list element.;public List<Object> parseListElement(Element collectionEle, BeanDefinition bd) {_		String defaultElementType = collectionEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = collectionEle.getChildNodes()__		ManagedList<Object> target = new ManagedList<>(nl.getLength())__		target.setSource(extractSource(collectionEle))__		target.setElementTypeName(defaultElementType)__		target.setMergeEnabled(parseMergeAttribute(collectionEle))__		parseCollectionElements(nl, target, bd, defaultElementType)__		return target__	};parse,a,list,element;public,list,object,parse,list,element,element,collection,ele,bean,definition,bd,string,default,element,type,collection,ele,get,attribute,node,list,nl,collection,ele,get,child,nodes,managed,list,object,target,new,managed,list,nl,get,length,target,set,source,extract,source,collection,ele,target,set,element,type,name,default,element,type,target,set,merge,enabled,parse,merge,attribute,collection,ele,parse,collection,elements,nl,target,bd,default,element,type,return,target
BeanDefinitionParserDelegate -> public List<Object> parseListElement(Element collectionEle, BeanDefinition bd);1487245676;Parse a list element.;public List<Object> parseListElement(Element collectionEle, BeanDefinition bd) {_		String defaultElementType = collectionEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = collectionEle.getChildNodes()__		ManagedList<Object> target = new ManagedList<>(nl.getLength())__		target.setSource(extractSource(collectionEle))__		target.setElementTypeName(defaultElementType)__		target.setMergeEnabled(parseMergeAttribute(collectionEle))__		parseCollectionElements(nl, target, bd, defaultElementType)__		return target__	};parse,a,list,element;public,list,object,parse,list,element,element,collection,ele,bean,definition,bd,string,default,element,type,collection,ele,get,attribute,node,list,nl,collection,ele,get,child,nodes,managed,list,object,target,new,managed,list,nl,get,length,target,set,source,extract,source,collection,ele,target,set,element,type,name,default,element,type,target,set,merge,enabled,parse,merge,attribute,collection,ele,parse,collection,elements,nl,target,bd,default,element,type,return,target
BeanDefinitionParserDelegate -> public List<Object> parseListElement(Element collectionEle, BeanDefinition bd);1487255851;Parse a list element.;public List<Object> parseListElement(Element collectionEle, BeanDefinition bd) {_		String defaultElementType = collectionEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = collectionEle.getChildNodes()__		ManagedList<Object> target = new ManagedList<>(nl.getLength())__		target.setSource(extractSource(collectionEle))__		target.setElementTypeName(defaultElementType)__		target.setMergeEnabled(parseMergeAttribute(collectionEle))__		parseCollectionElements(nl, target, bd, defaultElementType)__		return target__	};parse,a,list,element;public,list,object,parse,list,element,element,collection,ele,bean,definition,bd,string,default,element,type,collection,ele,get,attribute,node,list,nl,collection,ele,get,child,nodes,managed,list,object,target,new,managed,list,nl,get,length,target,set,source,extract,source,collection,ele,target,set,element,type,name,default,element,type,target,set,merge,enabled,parse,merge,attribute,collection,ele,parse,collection,elements,nl,target,bd,default,element,type,return,target
BeanDefinitionParserDelegate -> public List<Object> parseListElement(Element collectionEle, BeanDefinition bd);1494586217;Parse a list element.;public List<Object> parseListElement(Element collectionEle, BeanDefinition bd) {_		String defaultElementType = collectionEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = collectionEle.getChildNodes()__		ManagedList<Object> target = new ManagedList<>(nl.getLength())__		target.setSource(extractSource(collectionEle))__		target.setElementTypeName(defaultElementType)__		target.setMergeEnabled(parseMergeAttribute(collectionEle))__		parseCollectionElements(nl, target, bd, defaultElementType)__		return target__	};parse,a,list,element;public,list,object,parse,list,element,element,collection,ele,bean,definition,bd,string,default,element,type,collection,ele,get,attribute,node,list,nl,collection,ele,get,child,nodes,managed,list,object,target,new,managed,list,nl,get,length,target,set,source,extract,source,collection,ele,target,set,element,type,name,default,element,type,target,set,merge,enabled,parse,merge,attribute,collection,ele,parse,collection,elements,nl,target,bd,default,element,type,return,target
BeanDefinitionParserDelegate -> public List<Object> parseListElement(Element collectionEle, BeanDefinition bd);1495868221;Parse a list element.;public List<Object> parseListElement(Element collectionEle, BeanDefinition bd) {_		String defaultElementType = collectionEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = collectionEle.getChildNodes()__		ManagedList<Object> target = new ManagedList<>(nl.getLength())__		target.setSource(extractSource(collectionEle))__		target.setElementTypeName(defaultElementType)__		target.setMergeEnabled(parseMergeAttribute(collectionEle))__		parseCollectionElements(nl, target, bd, defaultElementType)__		return target__	};parse,a,list,element;public,list,object,parse,list,element,element,collection,ele,bean,definition,bd,string,default,element,type,collection,ele,get,attribute,node,list,nl,collection,ele,get,child,nodes,managed,list,object,target,new,managed,list,nl,get,length,target,set,source,extract,source,collection,ele,target,set,element,type,name,default,element,type,target,set,merge,enabled,parse,merge,attribute,collection,ele,parse,collection,elements,nl,target,bd,default,element,type,return,target
BeanDefinitionParserDelegate -> public List<Object> parseListElement(Element collectionEle, BeanDefinition bd);1496259743;Parse a list element.;public List<Object> parseListElement(Element collectionEle, BeanDefinition bd) {_		String defaultElementType = collectionEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = collectionEle.getChildNodes()__		ManagedList<Object> target = new ManagedList<>(nl.getLength())__		target.setSource(extractSource(collectionEle))__		target.setElementTypeName(defaultElementType)__		target.setMergeEnabled(parseMergeAttribute(collectionEle))__		parseCollectionElements(nl, target, bd, defaultElementType)__		return target__	};parse,a,list,element;public,list,object,parse,list,element,element,collection,ele,bean,definition,bd,string,default,element,type,collection,ele,get,attribute,node,list,nl,collection,ele,get,child,nodes,managed,list,object,target,new,managed,list,nl,get,length,target,set,source,extract,source,collection,ele,target,set,element,type,name,default,element,type,target,set,merge,enabled,parse,merge,attribute,collection,ele,parse,collection,elements,nl,target,bd,default,element,type,return,target
BeanDefinitionParserDelegate -> public void parsePropertyElements(Element beanEle, BeanDefinition bd);1328020251;Parse property sub-elements of the given bean element.;public void parsePropertyElements(Element beanEle, BeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, PROPERTY_ELEMENT)) {_				parsePropertyElement((Element) node, bd)__			}_		}_	};parse,property,sub,elements,of,the,given,bean,element;public,void,parse,property,elements,element,bean,ele,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,property,element,element,node,bd
BeanDefinitionParserDelegate -> public void parsePropertyElements(Element beanEle, BeanDefinition bd);1335774711;Parse property sub-elements of the given bean element.;public void parsePropertyElements(Element beanEle, BeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, PROPERTY_ELEMENT)) {_				parsePropertyElement((Element) node, bd)__			}_		}_	};parse,property,sub,elements,of,the,given,bean,element;public,void,parse,property,elements,element,bean,ele,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,property,element,element,node,bd
BeanDefinitionParserDelegate -> public void parsePropertyElements(Element beanEle, BeanDefinition bd);1337341719;Parse property sub-elements of the given bean element.;public void parsePropertyElements(Element beanEle, BeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, PROPERTY_ELEMENT)) {_				parsePropertyElement((Element) node, bd)__			}_		}_	};parse,property,sub,elements,of,the,given,bean,element;public,void,parse,property,elements,element,bean,ele,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,property,element,element,node,bd
BeanDefinitionParserDelegate -> public void parsePropertyElements(Element beanEle, BeanDefinition bd);1351392612;Parse property sub-elements of the given bean element.;public void parsePropertyElements(Element beanEle, BeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, PROPERTY_ELEMENT)) {_				parsePropertyElement((Element) node, bd)__			}_		}_	};parse,property,sub,elements,of,the,given,bean,element;public,void,parse,property,elements,element,bean,ele,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,property,element,element,node,bd
BeanDefinitionParserDelegate -> public void parsePropertyElements(Element beanEle, BeanDefinition bd);1351696936;Parse property sub-elements of the given bean element.;public void parsePropertyElements(Element beanEle, BeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, PROPERTY_ELEMENT)) {_				parsePropertyElement((Element) node, bd)__			}_		}_	};parse,property,sub,elements,of,the,given,bean,element;public,void,parse,property,elements,element,bean,ele,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,property,element,element,node,bd
BeanDefinitionParserDelegate -> public void parsePropertyElements(Element beanEle, BeanDefinition bd);1356735495;Parse property sub-elements of the given bean element.;public void parsePropertyElements(Element beanEle, BeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, PROPERTY_ELEMENT)) {_				parsePropertyElement((Element) node, bd)__			}_		}_	};parse,property,sub,elements,of,the,given,bean,element;public,void,parse,property,elements,element,bean,ele,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,property,element,element,node,bd
BeanDefinitionParserDelegate -> public void parsePropertyElements(Element beanEle, BeanDefinition bd);1357119417;Parse property sub-elements of the given bean element.;public void parsePropertyElements(Element beanEle, BeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, PROPERTY_ELEMENT)) {_				parsePropertyElement((Element) node, bd)__			}_		}_	};parse,property,sub,elements,of,the,given,bean,element;public,void,parse,property,elements,element,bean,ele,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,property,element,element,node,bd
BeanDefinitionParserDelegate -> public void parsePropertyElements(Element beanEle, BeanDefinition bd);1367943112;Parse property sub-elements of the given bean element.;public void parsePropertyElements(Element beanEle, BeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, PROPERTY_ELEMENT)) {_				parsePropertyElement((Element) node, bd)__			}_		}_	};parse,property,sub,elements,of,the,given,bean,element;public,void,parse,property,elements,element,bean,ele,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,property,element,element,node,bd
BeanDefinitionParserDelegate -> public void parsePropertyElements(Element beanEle, BeanDefinition bd);1382030648;Parse property sub-elements of the given bean element.;public void parsePropertyElements(Element beanEle, BeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, PROPERTY_ELEMENT)) {_				parsePropertyElement((Element) node, bd)__			}_		}_	};parse,property,sub,elements,of,the,given,bean,element;public,void,parse,property,elements,element,bean,ele,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,property,element,element,node,bd
BeanDefinitionParserDelegate -> public void parsePropertyElements(Element beanEle, BeanDefinition bd);1385412762;Parse property sub-elements of the given bean element.;public void parsePropertyElements(Element beanEle, BeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, PROPERTY_ELEMENT)) {_				parsePropertyElement((Element) node, bd)__			}_		}_	};parse,property,sub,elements,of,the,given,bean,element;public,void,parse,property,elements,element,bean,ele,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,property,element,element,node,bd
BeanDefinitionParserDelegate -> public void parsePropertyElements(Element beanEle, BeanDefinition bd);1410953197;Parse property sub-elements of the given bean element.;public void parsePropertyElements(Element beanEle, BeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, PROPERTY_ELEMENT)) {_				parsePropertyElement((Element) node, bd)__			}_		}_	};parse,property,sub,elements,of,the,given,bean,element;public,void,parse,property,elements,element,bean,ele,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,property,element,element,node,bd
BeanDefinitionParserDelegate -> public void parsePropertyElements(Element beanEle, BeanDefinition bd);1411599760;Parse property sub-elements of the given bean element.;public void parsePropertyElements(Element beanEle, BeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, PROPERTY_ELEMENT)) {_				parsePropertyElement((Element) node, bd)__			}_		}_	};parse,property,sub,elements,of,the,given,bean,element;public,void,parse,property,elements,element,bean,ele,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,property,element,element,node,bd
BeanDefinitionParserDelegate -> public void parsePropertyElements(Element beanEle, BeanDefinition bd);1419966315;Parse property sub-elements of the given bean element.;public void parsePropertyElements(Element beanEle, BeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, PROPERTY_ELEMENT)) {_				parsePropertyElement((Element) node, bd)__			}_		}_	};parse,property,sub,elements,of,the,given,bean,element;public,void,parse,property,elements,element,bean,ele,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,property,element,element,node,bd
BeanDefinitionParserDelegate -> public void parsePropertyElements(Element beanEle, BeanDefinition bd);1431958785;Parse property sub-elements of the given bean element.;public void parsePropertyElements(Element beanEle, BeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, PROPERTY_ELEMENT)) {_				parsePropertyElement((Element) node, bd)__			}_		}_	};parse,property,sub,elements,of,the,given,bean,element;public,void,parse,property,elements,element,bean,ele,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,property,element,element,node,bd
BeanDefinitionParserDelegate -> public void parsePropertyElements(Element beanEle, BeanDefinition bd);1432135182;Parse property sub-elements of the given bean element.;public void parsePropertyElements(Element beanEle, BeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, PROPERTY_ELEMENT)) {_				parsePropertyElement((Element) node, bd)__			}_		}_	};parse,property,sub,elements,of,the,given,bean,element;public,void,parse,property,elements,element,bean,ele,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,property,element,element,node,bd
BeanDefinitionParserDelegate -> public void parsePropertyElements(Element beanEle, BeanDefinition bd);1447323728;Parse property sub-elements of the given bean element.;public void parsePropertyElements(Element beanEle, BeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, PROPERTY_ELEMENT)) {_				parsePropertyElement((Element) node, bd)__			}_		}_	};parse,property,sub,elements,of,the,given,bean,element;public,void,parse,property,elements,element,bean,ele,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,property,element,element,node,bd
BeanDefinitionParserDelegate -> public void parsePropertyElements(Element beanEle, BeanDefinition bd);1467726769;Parse property sub-elements of the given bean element.;public void parsePropertyElements(Element beanEle, BeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, PROPERTY_ELEMENT)) {_				parsePropertyElement((Element) node, bd)__			}_		}_	};parse,property,sub,elements,of,the,given,bean,element;public,void,parse,property,elements,element,bean,ele,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,property,element,element,node,bd
BeanDefinitionParserDelegate -> public void parsePropertyElements(Element beanEle, BeanDefinition bd);1467730834;Parse property sub-elements of the given bean element.;public void parsePropertyElements(Element beanEle, BeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, PROPERTY_ELEMENT)) {_				parsePropertyElement((Element) node, bd)__			}_		}_	};parse,property,sub,elements,of,the,given,bean,element;public,void,parse,property,elements,element,bean,ele,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,property,element,element,node,bd
BeanDefinitionParserDelegate -> public void parsePropertyElements(Element beanEle, BeanDefinition bd);1467744603;Parse property sub-elements of the given bean element.;public void parsePropertyElements(Element beanEle, BeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, PROPERTY_ELEMENT)) {_				parsePropertyElement((Element) node, bd)__			}_		}_	};parse,property,sub,elements,of,the,given,bean,element;public,void,parse,property,elements,element,bean,ele,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,property,element,element,node,bd
BeanDefinitionParserDelegate -> public void parsePropertyElements(Element beanEle, BeanDefinition bd);1487245676;Parse property sub-elements of the given bean element.;public void parsePropertyElements(Element beanEle, BeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, PROPERTY_ELEMENT)) {_				parsePropertyElement((Element) node, bd)__			}_		}_	};parse,property,sub,elements,of,the,given,bean,element;public,void,parse,property,elements,element,bean,ele,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,property,element,element,node,bd
BeanDefinitionParserDelegate -> public void parsePropertyElements(Element beanEle, BeanDefinition bd);1487255851;Parse property sub-elements of the given bean element.;public void parsePropertyElements(Element beanEle, BeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, PROPERTY_ELEMENT)) {_				parsePropertyElement((Element) node, bd)__			}_		}_	};parse,property,sub,elements,of,the,given,bean,element;public,void,parse,property,elements,element,bean,ele,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,property,element,element,node,bd
BeanDefinitionParserDelegate -> public void parsePropertyElements(Element beanEle, BeanDefinition bd);1494586217;Parse property sub-elements of the given bean element.;public void parsePropertyElements(Element beanEle, BeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, PROPERTY_ELEMENT)) {_				parsePropertyElement((Element) node, bd)__			}_		}_	};parse,property,sub,elements,of,the,given,bean,element;public,void,parse,property,elements,element,bean,ele,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,property,element,element,node,bd
BeanDefinitionParserDelegate -> public void parsePropertyElements(Element beanEle, BeanDefinition bd);1495868221;Parse property sub-elements of the given bean element.;public void parsePropertyElements(Element beanEle, BeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, PROPERTY_ELEMENT)) {_				parsePropertyElement((Element) node, bd)__			}_		}_	};parse,property,sub,elements,of,the,given,bean,element;public,void,parse,property,elements,element,bean,ele,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,property,element,element,node,bd
BeanDefinitionParserDelegate -> public void parsePropertyElements(Element beanEle, BeanDefinition bd);1496259743;Parse property sub-elements of the given bean element.;public void parsePropertyElements(Element beanEle, BeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, PROPERTY_ELEMENT)) {_				parsePropertyElement((Element) node, bd)__			}_		}_	};parse,property,sub,elements,of,the,given,bean,element;public,void,parse,property,elements,element,bean,ele,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,property,element,element,node,bd
BeanDefinitionParserDelegate -> public void parsePropertyElements(Element beanEle, BeanDefinition bd);1496837955;Parse property sub-elements of the given bean element.;public void parsePropertyElements(Element beanEle, BeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, PROPERTY_ELEMENT)) {_				parsePropertyElement((Element) node, bd)__			}_		}_	};parse,property,sub,elements,of,the,given,bean,element;public,void,parse,property,elements,element,bean,ele,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,property,element,element,node,bd
BeanDefinitionParserDelegate -> public void parsePropertyElements(Element beanEle, BeanDefinition bd);1503008029;Parse property sub-elements of the given bean element.;public void parsePropertyElements(Element beanEle, BeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, PROPERTY_ELEMENT)) {_				parsePropertyElement((Element) node, bd)__			}_		}_	};parse,property,sub,elements,of,the,given,bean,element;public,void,parse,property,elements,element,bean,ele,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,property,element,element,node,bd
BeanDefinitionParserDelegate -> public void parsePropertyElements(Element beanEle, BeanDefinition bd);1519513303;Parse property sub-elements of the given bean element.;public void parsePropertyElements(Element beanEle, BeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, PROPERTY_ELEMENT)) {_				parsePropertyElement((Element) node, bd)__			}_		}_	};parse,property,sub,elements,of,the,given,bean,element;public,void,parse,property,elements,element,bean,ele,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,property,element,element,node,bd
BeanDefinitionParserDelegate -> public void parsePropertyElements(Element beanEle, BeanDefinition bd);1530174524;Parse property sub-elements of the given bean element.;public void parsePropertyElements(Element beanEle, BeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, PROPERTY_ELEMENT)) {_				parsePropertyElement((Element) node, bd)__			}_		}_	};parse,property,sub,elements,of,the,given,bean,element;public,void,parse,property,elements,element,bean,ele,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,property,element,element,node,bd
BeanDefinitionParserDelegate -> public void parsePropertyElements(Element beanEle, BeanDefinition bd);1530190293;Parse property sub-elements of the given bean element.;public void parsePropertyElements(Element beanEle, BeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, PROPERTY_ELEMENT)) {_				parsePropertyElement((Element) node, bd)__			}_		}_	};parse,property,sub,elements,of,the,given,bean,element;public,void,parse,property,elements,element,bean,ele,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,property,element,element,node,bd
BeanDefinitionParserDelegate -> public void parsePropertyElements(Element beanEle, BeanDefinition bd);1532706365;Parse property sub-elements of the given bean element.;public void parsePropertyElements(Element beanEle, BeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, PROPERTY_ELEMENT)) {_				parsePropertyElement((Element) node, bd)__			}_		}_	};parse,property,sub,elements,of,the,given,bean,element;public,void,parse,property,elements,element,bean,ele,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,property,element,element,node,bd
BeanDefinitionParserDelegate -> public void parsePropertyElements(Element beanEle, BeanDefinition bd);1546958161;Parse property sub-elements of the given bean element.;public void parsePropertyElements(Element beanEle, BeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, PROPERTY_ELEMENT)) {_				parsePropertyElement((Element) node, bd)__			}_		}_	};parse,property,sub,elements,of,the,given,bean,element;public,void,parse,property,elements,element,bean,ele,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,property,element,element,node,bd
BeanDefinitionParserDelegate -> @Nullable 	public Object parseIdRefElement(Element ele);1495868221;Return a typed String value Object for the given 'idref' element.;@Nullable_	public Object parseIdRefElement(Element ele) {_		_		String refName = ele.getAttribute(BEAN_REF_ATTRIBUTE)__		if (!StringUtils.hasLength(refName)) {_			error("'bean' is required for <idref> element", ele)__			return null__		}_		if (!StringUtils.hasText(refName)) {_			error("<idref> element contains empty target attribute", ele)__			return null__		}_		RuntimeBeanNameReference ref = new RuntimeBeanNameReference(refName)__		ref.setSource(extractSource(ele))__		return ref__	};return,a,typed,string,value,object,for,the,given,idref,element;nullable,public,object,parse,id,ref,element,element,ele,string,ref,name,ele,get,attribute,if,string,utils,has,length,ref,name,error,bean,is,required,for,idref,element,ele,return,null,if,string,utils,has,text,ref,name,error,idref,element,contains,empty,target,attribute,ele,return,null,runtime,bean,name,reference,ref,new,runtime,bean,name,reference,ref,name,ref,set,source,extract,source,ele,return,ref
BeanDefinitionParserDelegate -> @Nullable 	public Object parseIdRefElement(Element ele);1496259743;Return a typed String value Object for the given 'idref' element.;@Nullable_	public Object parseIdRefElement(Element ele) {_		_		String refName = ele.getAttribute(BEAN_REF_ATTRIBUTE)__		if (!StringUtils.hasLength(refName)) {_			error("'bean' is required for <idref> element", ele)__			return null__		}_		if (!StringUtils.hasText(refName)) {_			error("<idref> element contains empty target attribute", ele)__			return null__		}_		RuntimeBeanNameReference ref = new RuntimeBeanNameReference(refName)__		ref.setSource(extractSource(ele))__		return ref__	};return,a,typed,string,value,object,for,the,given,idref,element;nullable,public,object,parse,id,ref,element,element,ele,string,ref,name,ele,get,attribute,if,string,utils,has,length,ref,name,error,bean,is,required,for,idref,element,ele,return,null,if,string,utils,has,text,ref,name,error,idref,element,contains,empty,target,attribute,ele,return,null,runtime,bean,name,reference,ref,new,runtime,bean,name,reference,ref,name,ref,set,source,extract,source,ele,return,ref
BeanDefinitionParserDelegate -> @Nullable 	public Object parseIdRefElement(Element ele);1496837955;Return a typed String value Object for the given 'idref' element.;@Nullable_	public Object parseIdRefElement(Element ele) {_		_		String refName = ele.getAttribute(BEAN_REF_ATTRIBUTE)__		if (!StringUtils.hasLength(refName)) {_			error("'bean' is required for <idref> element", ele)__			return null__		}_		if (!StringUtils.hasText(refName)) {_			error("<idref> element contains empty target attribute", ele)__			return null__		}_		RuntimeBeanNameReference ref = new RuntimeBeanNameReference(refName)__		ref.setSource(extractSource(ele))__		return ref__	};return,a,typed,string,value,object,for,the,given,idref,element;nullable,public,object,parse,id,ref,element,element,ele,string,ref,name,ele,get,attribute,if,string,utils,has,length,ref,name,error,bean,is,required,for,idref,element,ele,return,null,if,string,utils,has,text,ref,name,error,idref,element,contains,empty,target,attribute,ele,return,null,runtime,bean,name,reference,ref,new,runtime,bean,name,reference,ref,name,ref,set,source,extract,source,ele,return,ref
BeanDefinitionParserDelegate -> @Nullable 	public Object parseIdRefElement(Element ele);1503008029;Return a typed String value Object for the given 'idref' element.;@Nullable_	public Object parseIdRefElement(Element ele) {_		_		String refName = ele.getAttribute(BEAN_REF_ATTRIBUTE)__		if (!StringUtils.hasLength(refName)) {_			error("'bean' is required for <idref> element", ele)__			return null__		}_		if (!StringUtils.hasText(refName)) {_			error("<idref> element contains empty target attribute", ele)__			return null__		}_		RuntimeBeanNameReference ref = new RuntimeBeanNameReference(refName)__		ref.setSource(extractSource(ele))__		return ref__	};return,a,typed,string,value,object,for,the,given,idref,element;nullable,public,object,parse,id,ref,element,element,ele,string,ref,name,ele,get,attribute,if,string,utils,has,length,ref,name,error,bean,is,required,for,idref,element,ele,return,null,if,string,utils,has,text,ref,name,error,idref,element,contains,empty,target,attribute,ele,return,null,runtime,bean,name,reference,ref,new,runtime,bean,name,reference,ref,name,ref,set,source,extract,source,ele,return,ref
BeanDefinitionParserDelegate -> @Nullable 	public Object parseIdRefElement(Element ele);1519513303;Return a typed String value Object for the given 'idref' element.;@Nullable_	public Object parseIdRefElement(Element ele) {_		_		String refName = ele.getAttribute(BEAN_REF_ATTRIBUTE)__		if (!StringUtils.hasLength(refName)) {_			error("'bean' is required for <idref> element", ele)__			return null__		}_		if (!StringUtils.hasText(refName)) {_			error("<idref> element contains empty target attribute", ele)__			return null__		}_		RuntimeBeanNameReference ref = new RuntimeBeanNameReference(refName)__		ref.setSource(extractSource(ele))__		return ref__	};return,a,typed,string,value,object,for,the,given,idref,element;nullable,public,object,parse,id,ref,element,element,ele,string,ref,name,ele,get,attribute,if,string,utils,has,length,ref,name,error,bean,is,required,for,idref,element,ele,return,null,if,string,utils,has,text,ref,name,error,idref,element,contains,empty,target,attribute,ele,return,null,runtime,bean,name,reference,ref,new,runtime,bean,name,reference,ref,name,ref,set,source,extract,source,ele,return,ref
BeanDefinitionParserDelegate -> @Nullable 	public Object parseIdRefElement(Element ele);1530174524;Return a typed String value Object for the given 'idref' element.;@Nullable_	public Object parseIdRefElement(Element ele) {_		_		String refName = ele.getAttribute(BEAN_REF_ATTRIBUTE)__		if (!StringUtils.hasLength(refName)) {_			error("'bean' is required for <idref> element", ele)__			return null__		}_		if (!StringUtils.hasText(refName)) {_			error("<idref> element contains empty target attribute", ele)__			return null__		}_		RuntimeBeanNameReference ref = new RuntimeBeanNameReference(refName)__		ref.setSource(extractSource(ele))__		return ref__	};return,a,typed,string,value,object,for,the,given,idref,element;nullable,public,object,parse,id,ref,element,element,ele,string,ref,name,ele,get,attribute,if,string,utils,has,length,ref,name,error,bean,is,required,for,idref,element,ele,return,null,if,string,utils,has,text,ref,name,error,idref,element,contains,empty,target,attribute,ele,return,null,runtime,bean,name,reference,ref,new,runtime,bean,name,reference,ref,name,ref,set,source,extract,source,ele,return,ref
BeanDefinitionParserDelegate -> @Nullable 	public Object parseIdRefElement(Element ele);1530190293;Return a typed String value Object for the given 'idref' element.;@Nullable_	public Object parseIdRefElement(Element ele) {_		_		String refName = ele.getAttribute(BEAN_REF_ATTRIBUTE)__		if (!StringUtils.hasLength(refName)) {_			error("'bean' is required for <idref> element", ele)__			return null__		}_		if (!StringUtils.hasText(refName)) {_			error("<idref> element contains empty target attribute", ele)__			return null__		}_		RuntimeBeanNameReference ref = new RuntimeBeanNameReference(refName)__		ref.setSource(extractSource(ele))__		return ref__	};return,a,typed,string,value,object,for,the,given,idref,element;nullable,public,object,parse,id,ref,element,element,ele,string,ref,name,ele,get,attribute,if,string,utils,has,length,ref,name,error,bean,is,required,for,idref,element,ele,return,null,if,string,utils,has,text,ref,name,error,idref,element,contains,empty,target,attribute,ele,return,null,runtime,bean,name,reference,ref,new,runtime,bean,name,reference,ref,name,ref,set,source,extract,source,ele,return,ref
BeanDefinitionParserDelegate -> @Nullable 	public Object parseIdRefElement(Element ele);1532706365;Return a typed String value Object for the given 'idref' element.;@Nullable_	public Object parseIdRefElement(Element ele) {_		_		String refName = ele.getAttribute(BEAN_REF_ATTRIBUTE)__		if (!StringUtils.hasLength(refName)) {_			error("'bean' is required for <idref> element", ele)__			return null__		}_		if (!StringUtils.hasText(refName)) {_			error("<idref> element contains empty target attribute", ele)__			return null__		}_		RuntimeBeanNameReference ref = new RuntimeBeanNameReference(refName)__		ref.setSource(extractSource(ele))__		return ref__	};return,a,typed,string,value,object,for,the,given,idref,element;nullable,public,object,parse,id,ref,element,element,ele,string,ref,name,ele,get,attribute,if,string,utils,has,length,ref,name,error,bean,is,required,for,idref,element,ele,return,null,if,string,utils,has,text,ref,name,error,idref,element,contains,empty,target,attribute,ele,return,null,runtime,bean,name,reference,ref,new,runtime,bean,name,reference,ref,name,ref,set,source,extract,source,ele,return,ref
BeanDefinitionParserDelegate -> @Nullable 	public Object parseIdRefElement(Element ele);1546958161;Return a typed String value Object for the given 'idref' element.;@Nullable_	public Object parseIdRefElement(Element ele) {_		_		String refName = ele.getAttribute(BEAN_REF_ATTRIBUTE)__		if (!StringUtils.hasLength(refName)) {_			error("'bean' is required for <idref> element", ele)__			return null__		}_		if (!StringUtils.hasText(refName)) {_			error("<idref> element contains empty target attribute", ele)__			return null__		}_		RuntimeBeanNameReference ref = new RuntimeBeanNameReference(refName)__		ref.setSource(extractSource(ele))__		return ref__	};return,a,typed,string,value,object,for,the,given,idref,element;nullable,public,object,parse,id,ref,element,element,ele,string,ref,name,ele,get,attribute,if,string,utils,has,length,ref,name,error,bean,is,required,for,idref,element,ele,return,null,if,string,utils,has,text,ref,name,error,idref,element,contains,empty,target,attribute,ele,return,null,runtime,bean,name,reference,ref,new,runtime,bean,name,reference,ref,name,ref,set,source,extract,source,ele,return,ref
BeanDefinitionParserDelegate -> protected TypedStringValue buildTypedStringValue(String value, @Nullable String targetTypeName) 			throws ClassNotFoundException;1496837955;Build a typed String value Object for the given raw value._@see org.springframework.beans.factory.config.TypedStringValue;protected TypedStringValue buildTypedStringValue(String value, @Nullable String targetTypeName)_			throws ClassNotFoundException {__		ClassLoader classLoader = this.readerContext.getBeanClassLoader()__		TypedStringValue typedValue__		if (!StringUtils.hasText(targetTypeName)) {_			typedValue = new TypedStringValue(value)__		}_		else if (classLoader != null) {_			Class<?> targetType = ClassUtils.forName(targetTypeName, classLoader)__			typedValue = new TypedStringValue(value, targetType)__		}_		else {_			typedValue = new TypedStringValue(value, targetTypeName)__		}_		return typedValue__	};build,a,typed,string,value,object,for,the,given,raw,value,see,org,springframework,beans,factory,config,typed,string,value;protected,typed,string,value,build,typed,string,value,string,value,nullable,string,target,type,name,throws,class,not,found,exception,class,loader,class,loader,this,reader,context,get,bean,class,loader,typed,string,value,typed,value,if,string,utils,has,text,target,type,name,typed,value,new,typed,string,value,value,else,if,class,loader,null,class,target,type,class,utils,for,name,target,type,name,class,loader,typed,value,new,typed,string,value,value,target,type,else,typed,value,new,typed,string,value,value,target,type,name,return,typed,value
BeanDefinitionParserDelegate -> protected TypedStringValue buildTypedStringValue(String value, @Nullable String targetTypeName) 			throws ClassNotFoundException;1503008029;Build a typed String value Object for the given raw value._@see org.springframework.beans.factory.config.TypedStringValue;protected TypedStringValue buildTypedStringValue(String value, @Nullable String targetTypeName)_			throws ClassNotFoundException {__		ClassLoader classLoader = this.readerContext.getBeanClassLoader()__		TypedStringValue typedValue__		if (!StringUtils.hasText(targetTypeName)) {_			typedValue = new TypedStringValue(value)__		}_		else if (classLoader != null) {_			Class<?> targetType = ClassUtils.forName(targetTypeName, classLoader)__			typedValue = new TypedStringValue(value, targetType)__		}_		else {_			typedValue = new TypedStringValue(value, targetTypeName)__		}_		return typedValue__	};build,a,typed,string,value,object,for,the,given,raw,value,see,org,springframework,beans,factory,config,typed,string,value;protected,typed,string,value,build,typed,string,value,string,value,nullable,string,target,type,name,throws,class,not,found,exception,class,loader,class,loader,this,reader,context,get,bean,class,loader,typed,string,value,typed,value,if,string,utils,has,text,target,type,name,typed,value,new,typed,string,value,value,else,if,class,loader,null,class,target,type,class,utils,for,name,target,type,name,class,loader,typed,value,new,typed,string,value,value,target,type,else,typed,value,new,typed,string,value,value,target,type,name,return,typed,value
BeanDefinitionParserDelegate -> protected TypedStringValue buildTypedStringValue(String value, @Nullable String targetTypeName) 			throws ClassNotFoundException;1519513303;Build a typed String value Object for the given raw value._@see org.springframework.beans.factory.config.TypedStringValue;protected TypedStringValue buildTypedStringValue(String value, @Nullable String targetTypeName)_			throws ClassNotFoundException {__		ClassLoader classLoader = this.readerContext.getBeanClassLoader()__		TypedStringValue typedValue__		if (!StringUtils.hasText(targetTypeName)) {_			typedValue = new TypedStringValue(value)__		}_		else if (classLoader != null) {_			Class<?> targetType = ClassUtils.forName(targetTypeName, classLoader)__			typedValue = new TypedStringValue(value, targetType)__		}_		else {_			typedValue = new TypedStringValue(value, targetTypeName)__		}_		return typedValue__	};build,a,typed,string,value,object,for,the,given,raw,value,see,org,springframework,beans,factory,config,typed,string,value;protected,typed,string,value,build,typed,string,value,string,value,nullable,string,target,type,name,throws,class,not,found,exception,class,loader,class,loader,this,reader,context,get,bean,class,loader,typed,string,value,typed,value,if,string,utils,has,text,target,type,name,typed,value,new,typed,string,value,value,else,if,class,loader,null,class,target,type,class,utils,for,name,target,type,name,class,loader,typed,value,new,typed,string,value,value,target,type,else,typed,value,new,typed,string,value,value,target,type,name,return,typed,value
BeanDefinitionParserDelegate -> protected TypedStringValue buildTypedStringValue(String value, @Nullable String targetTypeName) 			throws ClassNotFoundException;1530174524;Build a typed String value Object for the given raw value._@see org.springframework.beans.factory.config.TypedStringValue;protected TypedStringValue buildTypedStringValue(String value, @Nullable String targetTypeName)_			throws ClassNotFoundException {__		ClassLoader classLoader = this.readerContext.getBeanClassLoader()__		TypedStringValue typedValue__		if (!StringUtils.hasText(targetTypeName)) {_			typedValue = new TypedStringValue(value)__		}_		else if (classLoader != null) {_			Class<?> targetType = ClassUtils.forName(targetTypeName, classLoader)__			typedValue = new TypedStringValue(value, targetType)__		}_		else {_			typedValue = new TypedStringValue(value, targetTypeName)__		}_		return typedValue__	};build,a,typed,string,value,object,for,the,given,raw,value,see,org,springframework,beans,factory,config,typed,string,value;protected,typed,string,value,build,typed,string,value,string,value,nullable,string,target,type,name,throws,class,not,found,exception,class,loader,class,loader,this,reader,context,get,bean,class,loader,typed,string,value,typed,value,if,string,utils,has,text,target,type,name,typed,value,new,typed,string,value,value,else,if,class,loader,null,class,target,type,class,utils,for,name,target,type,name,class,loader,typed,value,new,typed,string,value,value,target,type,else,typed,value,new,typed,string,value,value,target,type,name,return,typed,value
BeanDefinitionParserDelegate -> protected TypedStringValue buildTypedStringValue(String value, @Nullable String targetTypeName) 			throws ClassNotFoundException;1530190293;Build a typed String value Object for the given raw value._@see org.springframework.beans.factory.config.TypedStringValue;protected TypedStringValue buildTypedStringValue(String value, @Nullable String targetTypeName)_			throws ClassNotFoundException {__		ClassLoader classLoader = this.readerContext.getBeanClassLoader()__		TypedStringValue typedValue__		if (!StringUtils.hasText(targetTypeName)) {_			typedValue = new TypedStringValue(value)__		}_		else if (classLoader != null) {_			Class<?> targetType = ClassUtils.forName(targetTypeName, classLoader)__			typedValue = new TypedStringValue(value, targetType)__		}_		else {_			typedValue = new TypedStringValue(value, targetTypeName)__		}_		return typedValue__	};build,a,typed,string,value,object,for,the,given,raw,value,see,org,springframework,beans,factory,config,typed,string,value;protected,typed,string,value,build,typed,string,value,string,value,nullable,string,target,type,name,throws,class,not,found,exception,class,loader,class,loader,this,reader,context,get,bean,class,loader,typed,string,value,typed,value,if,string,utils,has,text,target,type,name,typed,value,new,typed,string,value,value,else,if,class,loader,null,class,target,type,class,utils,for,name,target,type,name,class,loader,typed,value,new,typed,string,value,value,target,type,else,typed,value,new,typed,string,value,value,target,type,name,return,typed,value
BeanDefinitionParserDelegate -> protected TypedStringValue buildTypedStringValue(String value, @Nullable String targetTypeName) 			throws ClassNotFoundException;1532706365;Build a typed String value Object for the given raw value._@see org.springframework.beans.factory.config.TypedStringValue;protected TypedStringValue buildTypedStringValue(String value, @Nullable String targetTypeName)_			throws ClassNotFoundException {__		ClassLoader classLoader = this.readerContext.getBeanClassLoader()__		TypedStringValue typedValue__		if (!StringUtils.hasText(targetTypeName)) {_			typedValue = new TypedStringValue(value)__		}_		else if (classLoader != null) {_			Class<?> targetType = ClassUtils.forName(targetTypeName, classLoader)__			typedValue = new TypedStringValue(value, targetType)__		}_		else {_			typedValue = new TypedStringValue(value, targetTypeName)__		}_		return typedValue__	};build,a,typed,string,value,object,for,the,given,raw,value,see,org,springframework,beans,factory,config,typed,string,value;protected,typed,string,value,build,typed,string,value,string,value,nullable,string,target,type,name,throws,class,not,found,exception,class,loader,class,loader,this,reader,context,get,bean,class,loader,typed,string,value,typed,value,if,string,utils,has,text,target,type,name,typed,value,new,typed,string,value,value,else,if,class,loader,null,class,target,type,class,utils,for,name,target,type,name,class,loader,typed,value,new,typed,string,value,value,target,type,else,typed,value,new,typed,string,value,value,target,type,name,return,typed,value
BeanDefinitionParserDelegate -> protected TypedStringValue buildTypedStringValue(String value, @Nullable String targetTypeName) 			throws ClassNotFoundException;1546958161;Build a typed String value Object for the given raw value._@see org.springframework.beans.factory.config.TypedStringValue;protected TypedStringValue buildTypedStringValue(String value, @Nullable String targetTypeName)_			throws ClassNotFoundException {__		ClassLoader classLoader = this.readerContext.getBeanClassLoader()__		TypedStringValue typedValue__		if (!StringUtils.hasText(targetTypeName)) {_			typedValue = new TypedStringValue(value)__		}_		else if (classLoader != null) {_			Class<?> targetType = ClassUtils.forName(targetTypeName, classLoader)__			typedValue = new TypedStringValue(value, targetType)__		}_		else {_			typedValue = new TypedStringValue(value, targetTypeName)__		}_		return typedValue__	};build,a,typed,string,value,object,for,the,given,raw,value,see,org,springframework,beans,factory,config,typed,string,value;protected,typed,string,value,build,typed,string,value,string,value,nullable,string,target,type,name,throws,class,not,found,exception,class,loader,class,loader,this,reader,context,get,bean,class,loader,typed,string,value,typed,value,if,string,utils,has,text,target,type,name,typed,value,new,typed,string,value,value,else,if,class,loader,null,class,target,type,class,utils,for,name,target,type,name,class,loader,typed,value,new,typed,string,value,value,target,type,else,typed,value,new,typed,string,value,value,target,type,name,return,typed,value
BeanDefinitionParserDelegate -> public Set<Object> parseSetElement(Element collectionEle, @Nullable BeanDefinition bd);1496837955;Parse a set element.;public Set<Object> parseSetElement(Element collectionEle, @Nullable BeanDefinition bd) {_		String defaultElementType = collectionEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = collectionEle.getChildNodes()__		ManagedSet<Object> target = new ManagedSet<>(nl.getLength())__		target.setSource(extractSource(collectionEle))__		target.setElementTypeName(defaultElementType)__		target.setMergeEnabled(parseMergeAttribute(collectionEle))__		parseCollectionElements(nl, target, bd, defaultElementType)__		return target__	};parse,a,set,element;public,set,object,parse,set,element,element,collection,ele,nullable,bean,definition,bd,string,default,element,type,collection,ele,get,attribute,node,list,nl,collection,ele,get,child,nodes,managed,set,object,target,new,managed,set,nl,get,length,target,set,source,extract,source,collection,ele,target,set,element,type,name,default,element,type,target,set,merge,enabled,parse,merge,attribute,collection,ele,parse,collection,elements,nl,target,bd,default,element,type,return,target
BeanDefinitionParserDelegate -> public Set<Object> parseSetElement(Element collectionEle, @Nullable BeanDefinition bd);1503008029;Parse a set element.;public Set<Object> parseSetElement(Element collectionEle, @Nullable BeanDefinition bd) {_		String defaultElementType = collectionEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = collectionEle.getChildNodes()__		ManagedSet<Object> target = new ManagedSet<>(nl.getLength())__		target.setSource(extractSource(collectionEle))__		target.setElementTypeName(defaultElementType)__		target.setMergeEnabled(parseMergeAttribute(collectionEle))__		parseCollectionElements(nl, target, bd, defaultElementType)__		return target__	};parse,a,set,element;public,set,object,parse,set,element,element,collection,ele,nullable,bean,definition,bd,string,default,element,type,collection,ele,get,attribute,node,list,nl,collection,ele,get,child,nodes,managed,set,object,target,new,managed,set,nl,get,length,target,set,source,extract,source,collection,ele,target,set,element,type,name,default,element,type,target,set,merge,enabled,parse,merge,attribute,collection,ele,parse,collection,elements,nl,target,bd,default,element,type,return,target
BeanDefinitionParserDelegate -> public Set<Object> parseSetElement(Element collectionEle, @Nullable BeanDefinition bd);1519513303;Parse a set element.;public Set<Object> parseSetElement(Element collectionEle, @Nullable BeanDefinition bd) {_		String defaultElementType = collectionEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = collectionEle.getChildNodes()__		ManagedSet<Object> target = new ManagedSet<>(nl.getLength())__		target.setSource(extractSource(collectionEle))__		target.setElementTypeName(defaultElementType)__		target.setMergeEnabled(parseMergeAttribute(collectionEle))__		parseCollectionElements(nl, target, bd, defaultElementType)__		return target__	};parse,a,set,element;public,set,object,parse,set,element,element,collection,ele,nullable,bean,definition,bd,string,default,element,type,collection,ele,get,attribute,node,list,nl,collection,ele,get,child,nodes,managed,set,object,target,new,managed,set,nl,get,length,target,set,source,extract,source,collection,ele,target,set,element,type,name,default,element,type,target,set,merge,enabled,parse,merge,attribute,collection,ele,parse,collection,elements,nl,target,bd,default,element,type,return,target
BeanDefinitionParserDelegate -> public Set<Object> parseSetElement(Element collectionEle, @Nullable BeanDefinition bd);1530174524;Parse a set element.;public Set<Object> parseSetElement(Element collectionEle, @Nullable BeanDefinition bd) {_		String defaultElementType = collectionEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = collectionEle.getChildNodes()__		ManagedSet<Object> target = new ManagedSet<>(nl.getLength())__		target.setSource(extractSource(collectionEle))__		target.setElementTypeName(defaultElementType)__		target.setMergeEnabled(parseMergeAttribute(collectionEle))__		parseCollectionElements(nl, target, bd, defaultElementType)__		return target__	};parse,a,set,element;public,set,object,parse,set,element,element,collection,ele,nullable,bean,definition,bd,string,default,element,type,collection,ele,get,attribute,node,list,nl,collection,ele,get,child,nodes,managed,set,object,target,new,managed,set,nl,get,length,target,set,source,extract,source,collection,ele,target,set,element,type,name,default,element,type,target,set,merge,enabled,parse,merge,attribute,collection,ele,parse,collection,elements,nl,target,bd,default,element,type,return,target
BeanDefinitionParserDelegate -> public Set<Object> parseSetElement(Element collectionEle, @Nullable BeanDefinition bd);1530190293;Parse a set element.;public Set<Object> parseSetElement(Element collectionEle, @Nullable BeanDefinition bd) {_		String defaultElementType = collectionEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = collectionEle.getChildNodes()__		ManagedSet<Object> target = new ManagedSet<>(nl.getLength())__		target.setSource(extractSource(collectionEle))__		target.setElementTypeName(defaultElementType)__		target.setMergeEnabled(parseMergeAttribute(collectionEle))__		parseCollectionElements(nl, target, bd, defaultElementType)__		return target__	};parse,a,set,element;public,set,object,parse,set,element,element,collection,ele,nullable,bean,definition,bd,string,default,element,type,collection,ele,get,attribute,node,list,nl,collection,ele,get,child,nodes,managed,set,object,target,new,managed,set,nl,get,length,target,set,source,extract,source,collection,ele,target,set,element,type,name,default,element,type,target,set,merge,enabled,parse,merge,attribute,collection,ele,parse,collection,elements,nl,target,bd,default,element,type,return,target
BeanDefinitionParserDelegate -> public Set<Object> parseSetElement(Element collectionEle, @Nullable BeanDefinition bd);1532706365;Parse a set element.;public Set<Object> parseSetElement(Element collectionEle, @Nullable BeanDefinition bd) {_		String defaultElementType = collectionEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = collectionEle.getChildNodes()__		ManagedSet<Object> target = new ManagedSet<>(nl.getLength())__		target.setSource(extractSource(collectionEle))__		target.setElementTypeName(defaultElementType)__		target.setMergeEnabled(parseMergeAttribute(collectionEle))__		parseCollectionElements(nl, target, bd, defaultElementType)__		return target__	};parse,a,set,element;public,set,object,parse,set,element,element,collection,ele,nullable,bean,definition,bd,string,default,element,type,collection,ele,get,attribute,node,list,nl,collection,ele,get,child,nodes,managed,set,object,target,new,managed,set,nl,get,length,target,set,source,extract,source,collection,ele,target,set,element,type,name,default,element,type,target,set,merge,enabled,parse,merge,attribute,collection,ele,parse,collection,elements,nl,target,bd,default,element,type,return,target
BeanDefinitionParserDelegate -> public Set<Object> parseSetElement(Element collectionEle, @Nullable BeanDefinition bd);1546958161;Parse a set element.;public Set<Object> parseSetElement(Element collectionEle, @Nullable BeanDefinition bd) {_		String defaultElementType = collectionEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = collectionEle.getChildNodes()__		ManagedSet<Object> target = new ManagedSet<>(nl.getLength())__		target.setSource(extractSource(collectionEle))__		target.setElementTypeName(defaultElementType)__		target.setMergeEnabled(parseMergeAttribute(collectionEle))__		parseCollectionElements(nl, target, bd, defaultElementType)__		return target__	};parse,a,set,element;public,set,object,parse,set,element,element,collection,ele,nullable,bean,definition,bd,string,default,element,type,collection,ele,get,attribute,node,list,nl,collection,ele,get,child,nodes,managed,set,object,target,new,managed,set,nl,get,length,target,set,source,extract,source,collection,ele,target,set,element,type,name,default,element,type,target,set,merge,enabled,parse,merge,attribute,collection,ele,parse,collection,elements,nl,target,bd,default,element,type,return,target
BeanDefinitionParserDelegate -> @Deprecated 	public BeanDefinitionParserDelegate(XmlReaderContext readerContext);1328020251;Create a new BeanDefinitionParserDelegate associated with the_supplied {@link XmlReaderContext} and a new {@link StandardEnvironment}._@deprecated since Spring 3.1 in favor of_{@link #BeanDefinitionParserDelegate(XmlReaderContext, Environment)};@Deprecated_	public BeanDefinitionParserDelegate(XmlReaderContext readerContext) {_		this(readerContext, new StandardEnvironment())__	};create,a,new,bean,definition,parser,delegate,associated,with,the,supplied,link,xml,reader,context,and,a,new,link,standard,environment,deprecated,since,spring,3,1,in,favor,of,link,bean,definition,parser,delegate,xml,reader,context,environment;deprecated,public,bean,definition,parser,delegate,xml,reader,context,reader,context,this,reader,context,new,standard,environment
BeanDefinitionParserDelegate -> @Deprecated 	public BeanDefinitionParserDelegate(XmlReaderContext readerContext);1335774711;Create a new BeanDefinitionParserDelegate associated with the_supplied {@link XmlReaderContext} and a new {@link StandardEnvironment}._@deprecated since Spring 3.1 in favor of_{@link #BeanDefinitionParserDelegate(XmlReaderContext, Environment)};@Deprecated_	public BeanDefinitionParserDelegate(XmlReaderContext readerContext) {_		this(readerContext, new StandardEnvironment())__	};create,a,new,bean,definition,parser,delegate,associated,with,the,supplied,link,xml,reader,context,and,a,new,link,standard,environment,deprecated,since,spring,3,1,in,favor,of,link,bean,definition,parser,delegate,xml,reader,context,environment;deprecated,public,bean,definition,parser,delegate,xml,reader,context,reader,context,this,reader,context,new,standard,environment
BeanDefinitionParserDelegate -> @Deprecated 	public BeanDefinitionParserDelegate(XmlReaderContext readerContext);1337341719;Create a new BeanDefinitionParserDelegate associated with the_supplied {@link XmlReaderContext} and a new {@link StandardEnvironment}._@deprecated since Spring 3.1 in favor of_{@link #BeanDefinitionParserDelegate(XmlReaderContext, Environment)};@Deprecated_	public BeanDefinitionParserDelegate(XmlReaderContext readerContext) {_		this(readerContext, new StandardEnvironment())__	};create,a,new,bean,definition,parser,delegate,associated,with,the,supplied,link,xml,reader,context,and,a,new,link,standard,environment,deprecated,since,spring,3,1,in,favor,of,link,bean,definition,parser,delegate,xml,reader,context,environment;deprecated,public,bean,definition,parser,delegate,xml,reader,context,reader,context,this,reader,context,new,standard,environment
BeanDefinitionParserDelegate -> @Deprecated 	public BeanDefinitionParserDelegate(XmlReaderContext readerContext);1351392612;Create a new BeanDefinitionParserDelegate associated with the_supplied {@link XmlReaderContext} and a new {@link StandardEnvironment}._@deprecated since Spring 3.1 in favor of_{@link #BeanDefinitionParserDelegate(XmlReaderContext, Environment)};@Deprecated_	public BeanDefinitionParserDelegate(XmlReaderContext readerContext) {_		this(readerContext, new StandardEnvironment())__	};create,a,new,bean,definition,parser,delegate,associated,with,the,supplied,link,xml,reader,context,and,a,new,link,standard,environment,deprecated,since,spring,3,1,in,favor,of,link,bean,definition,parser,delegate,xml,reader,context,environment;deprecated,public,bean,definition,parser,delegate,xml,reader,context,reader,context,this,reader,context,new,standard,environment
BeanDefinitionParserDelegate -> @Deprecated 	public BeanDefinitionParserDelegate(XmlReaderContext readerContext);1351696936;Create a new BeanDefinitionParserDelegate associated with the_supplied {@link XmlReaderContext} and a new {@link StandardEnvironment}._@deprecated since Spring 3.1 in favor of_{@link #BeanDefinitionParserDelegate(XmlReaderContext, Environment)};@Deprecated_	public BeanDefinitionParserDelegate(XmlReaderContext readerContext) {_		this(readerContext, new StandardEnvironment())__	};create,a,new,bean,definition,parser,delegate,associated,with,the,supplied,link,xml,reader,context,and,a,new,link,standard,environment,deprecated,since,spring,3,1,in,favor,of,link,bean,definition,parser,delegate,xml,reader,context,environment;deprecated,public,bean,definition,parser,delegate,xml,reader,context,reader,context,this,reader,context,new,standard,environment
BeanDefinitionParserDelegate -> @Deprecated 	public BeanDefinitionParserDelegate(XmlReaderContext readerContext);1356735495;Create a new BeanDefinitionParserDelegate associated with the_supplied {@link XmlReaderContext} and a new {@link StandardEnvironment}._@deprecated since Spring 3.1 in favor of_{@link #BeanDefinitionParserDelegate(XmlReaderContext, Environment)};@Deprecated_	public BeanDefinitionParserDelegate(XmlReaderContext readerContext) {_		this(readerContext, new StandardEnvironment())__	};create,a,new,bean,definition,parser,delegate,associated,with,the,supplied,link,xml,reader,context,and,a,new,link,standard,environment,deprecated,since,spring,3,1,in,favor,of,link,bean,definition,parser,delegate,xml,reader,context,environment;deprecated,public,bean,definition,parser,delegate,xml,reader,context,reader,context,this,reader,context,new,standard,environment
BeanDefinitionParserDelegate -> @Deprecated 	public BeanDefinitionParserDelegate(XmlReaderContext readerContext);1357119417;Create a new BeanDefinitionParserDelegate associated with the_supplied {@link XmlReaderContext} and a new {@link StandardEnvironment}._@deprecated since Spring 3.1 in favor of_{@link #BeanDefinitionParserDelegate(XmlReaderContext, Environment)};@Deprecated_	public BeanDefinitionParserDelegate(XmlReaderContext readerContext) {_		this(readerContext, new StandardEnvironment())__	};create,a,new,bean,definition,parser,delegate,associated,with,the,supplied,link,xml,reader,context,and,a,new,link,standard,environment,deprecated,since,spring,3,1,in,favor,of,link,bean,definition,parser,delegate,xml,reader,context,environment;deprecated,public,bean,definition,parser,delegate,xml,reader,context,reader,context,this,reader,context,new,standard,environment
BeanDefinitionParserDelegate -> @Deprecated 	public BeanDefinitionParserDelegate(XmlReaderContext readerContext);1367943112;Create a new BeanDefinitionParserDelegate associated with the_supplied {@link XmlReaderContext} and a new {@link StandardEnvironment}._@deprecated since Spring 3.1 in favor of_{@link #BeanDefinitionParserDelegate(XmlReaderContext, Environment)};@Deprecated_	public BeanDefinitionParserDelegate(XmlReaderContext readerContext) {_		this(readerContext, new StandardEnvironment())__	};create,a,new,bean,definition,parser,delegate,associated,with,the,supplied,link,xml,reader,context,and,a,new,link,standard,environment,deprecated,since,spring,3,1,in,favor,of,link,bean,definition,parser,delegate,xml,reader,context,environment;deprecated,public,bean,definition,parser,delegate,xml,reader,context,reader,context,this,reader,context,new,standard,environment
BeanDefinitionParserDelegate -> @Deprecated 	public BeanDefinitionParserDelegate(XmlReaderContext readerContext);1382030648;Create a new BeanDefinitionParserDelegate associated with the_supplied {@link XmlReaderContext} and a new {@link StandardEnvironment}._@deprecated since Spring 3.1 in favor of_{@link #BeanDefinitionParserDelegate(XmlReaderContext, Environment)};@Deprecated_	public BeanDefinitionParserDelegate(XmlReaderContext readerContext) {_		this(readerContext, new StandardEnvironment())__	};create,a,new,bean,definition,parser,delegate,associated,with,the,supplied,link,xml,reader,context,and,a,new,link,standard,environment,deprecated,since,spring,3,1,in,favor,of,link,bean,definition,parser,delegate,xml,reader,context,environment;deprecated,public,bean,definition,parser,delegate,xml,reader,context,reader,context,this,reader,context,new,standard,environment
BeanDefinitionParserDelegate -> @Deprecated 	public BeanDefinitionParserDelegate(XmlReaderContext readerContext);1385412762;Create a new BeanDefinitionParserDelegate associated with the_supplied {@link XmlReaderContext} and a new {@link StandardEnvironment}._@deprecated since Spring 3.1 in favor of_{@link #BeanDefinitionParserDelegate(XmlReaderContext, Environment)};@Deprecated_	public BeanDefinitionParserDelegate(XmlReaderContext readerContext) {_		this(readerContext, new StandardEnvironment())__	};create,a,new,bean,definition,parser,delegate,associated,with,the,supplied,link,xml,reader,context,and,a,new,link,standard,environment,deprecated,since,spring,3,1,in,favor,of,link,bean,definition,parser,delegate,xml,reader,context,environment;deprecated,public,bean,definition,parser,delegate,xml,reader,context,reader,context,this,reader,context,new,standard,environment
BeanDefinitionParserDelegate -> @Deprecated 	public BeanDefinitionParserDelegate(XmlReaderContext readerContext);1410953197;Create a new BeanDefinitionParserDelegate associated with the_supplied {@link XmlReaderContext} and a new {@link StandardEnvironment}._@deprecated since Spring 3.1 in favor of_{@link #BeanDefinitionParserDelegate(XmlReaderContext, Environment)};@Deprecated_	public BeanDefinitionParserDelegate(XmlReaderContext readerContext) {_		this(readerContext, new StandardEnvironment())__	};create,a,new,bean,definition,parser,delegate,associated,with,the,supplied,link,xml,reader,context,and,a,new,link,standard,environment,deprecated,since,spring,3,1,in,favor,of,link,bean,definition,parser,delegate,xml,reader,context,environment;deprecated,public,bean,definition,parser,delegate,xml,reader,context,reader,context,this,reader,context,new,standard,environment
BeanDefinitionParserDelegate -> @Nullable 	public String[] getAutowireCandidatePatterns();1496837955;Return any patterns provided in the 'default-autowire-candidates'_attribute of the top-level {@code <beans/>} element.;@Nullable_	public String[] getAutowireCandidatePatterns() {_		String candidatePattern = this.defaults.getAutowireCandidates()__		return (candidatePattern != null ? StringUtils.commaDelimitedListToStringArray(candidatePattern) : null)__	};return,any,patterns,provided,in,the,default,autowire,candidates,attribute,of,the,top,level,code,beans,element;nullable,public,string,get,autowire,candidate,patterns,string,candidate,pattern,this,defaults,get,autowire,candidates,return,candidate,pattern,null,string,utils,comma,delimited,list,to,string,array,candidate,pattern,null
BeanDefinitionParserDelegate -> @Nullable 	public String[] getAutowireCandidatePatterns();1503008029;Return any patterns provided in the 'default-autowire-candidates'_attribute of the top-level {@code <beans/>} element.;@Nullable_	public String[] getAutowireCandidatePatterns() {_		String candidatePattern = this.defaults.getAutowireCandidates()__		return (candidatePattern != null ? StringUtils.commaDelimitedListToStringArray(candidatePattern) : null)__	};return,any,patterns,provided,in,the,default,autowire,candidates,attribute,of,the,top,level,code,beans,element;nullable,public,string,get,autowire,candidate,patterns,string,candidate,pattern,this,defaults,get,autowire,candidates,return,candidate,pattern,null,string,utils,comma,delimited,list,to,string,array,candidate,pattern,null
BeanDefinitionParserDelegate -> @Nullable 	public String[] getAutowireCandidatePatterns();1519513303;Return any patterns provided in the 'default-autowire-candidates'_attribute of the top-level {@code <beans/>} element.;@Nullable_	public String[] getAutowireCandidatePatterns() {_		String candidatePattern = this.defaults.getAutowireCandidates()__		return (candidatePattern != null ? StringUtils.commaDelimitedListToStringArray(candidatePattern) : null)__	};return,any,patterns,provided,in,the,default,autowire,candidates,attribute,of,the,top,level,code,beans,element;nullable,public,string,get,autowire,candidate,patterns,string,candidate,pattern,this,defaults,get,autowire,candidates,return,candidate,pattern,null,string,utils,comma,delimited,list,to,string,array,candidate,pattern,null
BeanDefinitionParserDelegate -> @Nullable 	public String[] getAutowireCandidatePatterns();1530174524;Return any patterns provided in the 'default-autowire-candidates'_attribute of the top-level {@code <beans/>} element.;@Nullable_	public String[] getAutowireCandidatePatterns() {_		String candidatePattern = this.defaults.getAutowireCandidates()__		return (candidatePattern != null ? StringUtils.commaDelimitedListToStringArray(candidatePattern) : null)__	};return,any,patterns,provided,in,the,default,autowire,candidates,attribute,of,the,top,level,code,beans,element;nullable,public,string,get,autowire,candidate,patterns,string,candidate,pattern,this,defaults,get,autowire,candidates,return,candidate,pattern,null,string,utils,comma,delimited,list,to,string,array,candidate,pattern,null
BeanDefinitionParserDelegate -> @Nullable 	public String[] getAutowireCandidatePatterns();1530190293;Return any patterns provided in the 'default-autowire-candidates'_attribute of the top-level {@code <beans/>} element.;@Nullable_	public String[] getAutowireCandidatePatterns() {_		String candidatePattern = this.defaults.getAutowireCandidates()__		return (candidatePattern != null ? StringUtils.commaDelimitedListToStringArray(candidatePattern) : null)__	};return,any,patterns,provided,in,the,default,autowire,candidates,attribute,of,the,top,level,code,beans,element;nullable,public,string,get,autowire,candidate,patterns,string,candidate,pattern,this,defaults,get,autowire,candidates,return,candidate,pattern,null,string,utils,comma,delimited,list,to,string,array,candidate,pattern,null
BeanDefinitionParserDelegate -> @Nullable 	public String[] getAutowireCandidatePatterns();1532706365;Return any patterns provided in the 'default-autowire-candidates'_attribute of the top-level {@code <beans/>} element.;@Nullable_	public String[] getAutowireCandidatePatterns() {_		String candidatePattern = this.defaults.getAutowireCandidates()__		return (candidatePattern != null ? StringUtils.commaDelimitedListToStringArray(candidatePattern) : null)__	};return,any,patterns,provided,in,the,default,autowire,candidates,attribute,of,the,top,level,code,beans,element;nullable,public,string,get,autowire,candidate,patterns,string,candidate,pattern,this,defaults,get,autowire,candidates,return,candidate,pattern,null,string,utils,comma,delimited,list,to,string,array,candidate,pattern,null
BeanDefinitionParserDelegate -> @Nullable 	public String[] getAutowireCandidatePatterns();1546958161;Return any patterns provided in the 'default-autowire-candidates'_attribute of the top-level {@code <beans/>} element.;@Nullable_	public String[] getAutowireCandidatePatterns() {_		String candidatePattern = this.defaults.getAutowireCandidates()__		return (candidatePattern != null ? StringUtils.commaDelimitedListToStringArray(candidatePattern) : null)__	};return,any,patterns,provided,in,the,default,autowire,candidates,attribute,of,the,top,level,code,beans,element;nullable,public,string,get,autowire,candidate,patterns,string,candidate,pattern,this,defaults,get,autowire,candidates,return,candidate,pattern,null,string,utils,comma,delimited,list,to,string,array,candidate,pattern,null
BeanDefinitionParserDelegate -> public Object parsePropertySubElement(Element ele, BeanDefinition bd, String defaultValueType);1328020251;Parse a value, ref or collection sub-element of a property or_constructor-arg element._@param ele subelement of property element_ we don't know which yet_@param defaultValueType the default type (class name) for any_<code>&lt_value&gt_</code> tag that might be created;public Object parsePropertySubElement(Element ele, BeanDefinition bd, String defaultValueType) {_		if (!isDefaultNamespace(ele)) {_			return parseNestedCustomElement(ele, bd)__		}_		else if (nodeNameEquals(ele, BEAN_ELEMENT)) {_			BeanDefinitionHolder nestedBd = parseBeanDefinitionElement(ele, bd)__			if (nestedBd != null) {_				nestedBd = decorateBeanDefinitionIfRequired(ele, nestedBd, bd)__			}_			return nestedBd__		}_		else if (nodeNameEquals(ele, REF_ELEMENT)) {_			_			String refName = ele.getAttribute(BEAN_REF_ATTRIBUTE)__			boolean toParent = false__			if (!StringUtils.hasLength(refName)) {_				_				refName = ele.getAttribute(LOCAL_REF_ATTRIBUTE)__				if (!StringUtils.hasLength(refName)) {_					_					refName = ele.getAttribute(PARENT_REF_ATTRIBUTE)__					toParent = true__					if (!StringUtils.hasLength(refName)) {_						error("'bean', 'local' or 'parent' is required for <ref> element", ele)__						return null__					}_				}_			}_			if (!StringUtils.hasText(refName)) {_				error("<ref> element contains empty target attribute", ele)__				return null__			}_			RuntimeBeanReference ref = new RuntimeBeanReference(refName, toParent)__			ref.setSource(extractSource(ele))__			return ref__		}_		else if (nodeNameEquals(ele, IDREF_ELEMENT)) {_			return parseIdRefElement(ele)__		}_		else if (nodeNameEquals(ele, VALUE_ELEMENT)) {_			return parseValueElement(ele, defaultValueType)__		}_		else if (nodeNameEquals(ele, NULL_ELEMENT)) {_			_			_			TypedStringValue nullHolder = new TypedStringValue(null)__			nullHolder.setSource(extractSource(ele))__			return nullHolder__		}_		else if (nodeNameEquals(ele, ARRAY_ELEMENT)) {_			return parseArrayElement(ele, bd)__		}_		else if (nodeNameEquals(ele, LIST_ELEMENT)) {_			return parseListElement(ele, bd)__		}_		else if (nodeNameEquals(ele, SET_ELEMENT)) {_			return parseSetElement(ele, bd)__		}_		else if (nodeNameEquals(ele, MAP_ELEMENT)) {_			return parseMapElement(ele, bd)__		}_		else if (nodeNameEquals(ele, PROPS_ELEMENT)) {_			return parsePropsElement(ele)__		}_		else {_			error("Unknown property sub-element: [" + ele.getNodeName() + "]", ele)__			return null__		}_	};parse,a,value,ref,or,collection,sub,element,of,a,property,or,constructor,arg,element,param,ele,subelement,of,property,element,we,don,t,know,which,yet,param,default,value,type,the,default,type,class,name,for,any,code,lt,value,gt,code,tag,that,might,be,created;public,object,parse,property,sub,element,element,ele,bean,definition,bd,string,default,value,type,if,is,default,namespace,ele,return,parse,nested,custom,element,ele,bd,else,if,node,name,equals,ele,bean,definition,holder,nested,bd,parse,bean,definition,element,ele,bd,if,nested,bd,null,nested,bd,decorate,bean,definition,if,required,ele,nested,bd,bd,return,nested,bd,else,if,node,name,equals,ele,string,ref,name,ele,get,attribute,boolean,to,parent,false,if,string,utils,has,length,ref,name,ref,name,ele,get,attribute,if,string,utils,has,length,ref,name,ref,name,ele,get,attribute,to,parent,true,if,string,utils,has,length,ref,name,error,bean,local,or,parent,is,required,for,ref,element,ele,return,null,if,string,utils,has,text,ref,name,error,ref,element,contains,empty,target,attribute,ele,return,null,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,to,parent,ref,set,source,extract,source,ele,return,ref,else,if,node,name,equals,ele,return,parse,id,ref,element,ele,else,if,node,name,equals,ele,return,parse,value,element,ele,default,value,type,else,if,node,name,equals,ele,typed,string,value,null,holder,new,typed,string,value,null,null,holder,set,source,extract,source,ele,return,null,holder,else,if,node,name,equals,ele,return,parse,array,element,ele,bd,else,if,node,name,equals,ele,return,parse,list,element,ele,bd,else,if,node,name,equals,ele,return,parse,set,element,ele,bd,else,if,node,name,equals,ele,return,parse,map,element,ele,bd,else,if,node,name,equals,ele,return,parse,props,element,ele,else,error,unknown,property,sub,element,ele,get,node,name,ele,return,null
BeanDefinitionParserDelegate -> public Object parsePropertySubElement(Element ele, BeanDefinition bd, String defaultValueType);1335774711;Parse a value, ref or collection sub-element of a property or_constructor-arg element._@param ele subelement of property element_ we don't know which yet_@param defaultValueType the default type (class name) for any_<code>&lt_value&gt_</code> tag that might be created;public Object parsePropertySubElement(Element ele, BeanDefinition bd, String defaultValueType) {_		if (!isDefaultNamespace(ele)) {_			return parseNestedCustomElement(ele, bd)__		}_		else if (nodeNameEquals(ele, BEAN_ELEMENT)) {_			BeanDefinitionHolder nestedBd = parseBeanDefinitionElement(ele, bd)__			if (nestedBd != null) {_				nestedBd = decorateBeanDefinitionIfRequired(ele, nestedBd, bd)__			}_			return nestedBd__		}_		else if (nodeNameEquals(ele, REF_ELEMENT)) {_			_			String refName = ele.getAttribute(BEAN_REF_ATTRIBUTE)__			boolean toParent = false__			if (!StringUtils.hasLength(refName)) {_				_				refName = ele.getAttribute(LOCAL_REF_ATTRIBUTE)__				if (!StringUtils.hasLength(refName)) {_					_					refName = ele.getAttribute(PARENT_REF_ATTRIBUTE)__					toParent = true__					if (!StringUtils.hasLength(refName)) {_						error("'bean', 'local' or 'parent' is required for <ref> element", ele)__						return null__					}_				}_			}_			if (!StringUtils.hasText(refName)) {_				error("<ref> element contains empty target attribute", ele)__				return null__			}_			RuntimeBeanReference ref = new RuntimeBeanReference(refName, toParent)__			ref.setSource(extractSource(ele))__			return ref__		}_		else if (nodeNameEquals(ele, IDREF_ELEMENT)) {_			return parseIdRefElement(ele)__		}_		else if (nodeNameEquals(ele, VALUE_ELEMENT)) {_			return parseValueElement(ele, defaultValueType)__		}_		else if (nodeNameEquals(ele, NULL_ELEMENT)) {_			_			_			TypedStringValue nullHolder = new TypedStringValue(null)__			nullHolder.setSource(extractSource(ele))__			return nullHolder__		}_		else if (nodeNameEquals(ele, ARRAY_ELEMENT)) {_			return parseArrayElement(ele, bd)__		}_		else if (nodeNameEquals(ele, LIST_ELEMENT)) {_			return parseListElement(ele, bd)__		}_		else if (nodeNameEquals(ele, SET_ELEMENT)) {_			return parseSetElement(ele, bd)__		}_		else if (nodeNameEquals(ele, MAP_ELEMENT)) {_			return parseMapElement(ele, bd)__		}_		else if (nodeNameEquals(ele, PROPS_ELEMENT)) {_			return parsePropsElement(ele)__		}_		else {_			error("Unknown property sub-element: [" + ele.getNodeName() + "]", ele)__			return null__		}_	};parse,a,value,ref,or,collection,sub,element,of,a,property,or,constructor,arg,element,param,ele,subelement,of,property,element,we,don,t,know,which,yet,param,default,value,type,the,default,type,class,name,for,any,code,lt,value,gt,code,tag,that,might,be,created;public,object,parse,property,sub,element,element,ele,bean,definition,bd,string,default,value,type,if,is,default,namespace,ele,return,parse,nested,custom,element,ele,bd,else,if,node,name,equals,ele,bean,definition,holder,nested,bd,parse,bean,definition,element,ele,bd,if,nested,bd,null,nested,bd,decorate,bean,definition,if,required,ele,nested,bd,bd,return,nested,bd,else,if,node,name,equals,ele,string,ref,name,ele,get,attribute,boolean,to,parent,false,if,string,utils,has,length,ref,name,ref,name,ele,get,attribute,if,string,utils,has,length,ref,name,ref,name,ele,get,attribute,to,parent,true,if,string,utils,has,length,ref,name,error,bean,local,or,parent,is,required,for,ref,element,ele,return,null,if,string,utils,has,text,ref,name,error,ref,element,contains,empty,target,attribute,ele,return,null,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,to,parent,ref,set,source,extract,source,ele,return,ref,else,if,node,name,equals,ele,return,parse,id,ref,element,ele,else,if,node,name,equals,ele,return,parse,value,element,ele,default,value,type,else,if,node,name,equals,ele,typed,string,value,null,holder,new,typed,string,value,null,null,holder,set,source,extract,source,ele,return,null,holder,else,if,node,name,equals,ele,return,parse,array,element,ele,bd,else,if,node,name,equals,ele,return,parse,list,element,ele,bd,else,if,node,name,equals,ele,return,parse,set,element,ele,bd,else,if,node,name,equals,ele,return,parse,map,element,ele,bd,else,if,node,name,equals,ele,return,parse,props,element,ele,else,error,unknown,property,sub,element,ele,get,node,name,ele,return,null
BeanDefinitionParserDelegate -> public Object parsePropertySubElement(Element ele, BeanDefinition bd, String defaultValueType);1337341719;Parse a value, ref or collection sub-element of a property or_constructor-arg element._@param ele subelement of property element_ we don't know which yet_@param defaultValueType the default type (class name) for any_<code>&lt_value&gt_</code> tag that might be created;public Object parsePropertySubElement(Element ele, BeanDefinition bd, String defaultValueType) {_		if (!isDefaultNamespace(ele)) {_			return parseNestedCustomElement(ele, bd)__		}_		else if (nodeNameEquals(ele, BEAN_ELEMENT)) {_			BeanDefinitionHolder nestedBd = parseBeanDefinitionElement(ele, bd)__			if (nestedBd != null) {_				nestedBd = decorateBeanDefinitionIfRequired(ele, nestedBd, bd)__			}_			return nestedBd__		}_		else if (nodeNameEquals(ele, REF_ELEMENT)) {_			_			String refName = ele.getAttribute(BEAN_REF_ATTRIBUTE)__			boolean toParent = false__			if (!StringUtils.hasLength(refName)) {_				_				refName = ele.getAttribute(LOCAL_REF_ATTRIBUTE)__				if (!StringUtils.hasLength(refName)) {_					_					refName = ele.getAttribute(PARENT_REF_ATTRIBUTE)__					toParent = true__					if (!StringUtils.hasLength(refName)) {_						error("'bean', 'local' or 'parent' is required for <ref> element", ele)__						return null__					}_				}_			}_			if (!StringUtils.hasText(refName)) {_				error("<ref> element contains empty target attribute", ele)__				return null__			}_			RuntimeBeanReference ref = new RuntimeBeanReference(refName, toParent)__			ref.setSource(extractSource(ele))__			return ref__		}_		else if (nodeNameEquals(ele, IDREF_ELEMENT)) {_			return parseIdRefElement(ele)__		}_		else if (nodeNameEquals(ele, VALUE_ELEMENT)) {_			return parseValueElement(ele, defaultValueType)__		}_		else if (nodeNameEquals(ele, NULL_ELEMENT)) {_			_			_			TypedStringValue nullHolder = new TypedStringValue(null)__			nullHolder.setSource(extractSource(ele))__			return nullHolder__		}_		else if (nodeNameEquals(ele, ARRAY_ELEMENT)) {_			return parseArrayElement(ele, bd)__		}_		else if (nodeNameEquals(ele, LIST_ELEMENT)) {_			return parseListElement(ele, bd)__		}_		else if (nodeNameEquals(ele, SET_ELEMENT)) {_			return parseSetElement(ele, bd)__		}_		else if (nodeNameEquals(ele, MAP_ELEMENT)) {_			return parseMapElement(ele, bd)__		}_		else if (nodeNameEquals(ele, PROPS_ELEMENT)) {_			return parsePropsElement(ele)__		}_		else {_			error("Unknown property sub-element: [" + ele.getNodeName() + "]", ele)__			return null__		}_	};parse,a,value,ref,or,collection,sub,element,of,a,property,or,constructor,arg,element,param,ele,subelement,of,property,element,we,don,t,know,which,yet,param,default,value,type,the,default,type,class,name,for,any,code,lt,value,gt,code,tag,that,might,be,created;public,object,parse,property,sub,element,element,ele,bean,definition,bd,string,default,value,type,if,is,default,namespace,ele,return,parse,nested,custom,element,ele,bd,else,if,node,name,equals,ele,bean,definition,holder,nested,bd,parse,bean,definition,element,ele,bd,if,nested,bd,null,nested,bd,decorate,bean,definition,if,required,ele,nested,bd,bd,return,nested,bd,else,if,node,name,equals,ele,string,ref,name,ele,get,attribute,boolean,to,parent,false,if,string,utils,has,length,ref,name,ref,name,ele,get,attribute,if,string,utils,has,length,ref,name,ref,name,ele,get,attribute,to,parent,true,if,string,utils,has,length,ref,name,error,bean,local,or,parent,is,required,for,ref,element,ele,return,null,if,string,utils,has,text,ref,name,error,ref,element,contains,empty,target,attribute,ele,return,null,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,to,parent,ref,set,source,extract,source,ele,return,ref,else,if,node,name,equals,ele,return,parse,id,ref,element,ele,else,if,node,name,equals,ele,return,parse,value,element,ele,default,value,type,else,if,node,name,equals,ele,typed,string,value,null,holder,new,typed,string,value,null,null,holder,set,source,extract,source,ele,return,null,holder,else,if,node,name,equals,ele,return,parse,array,element,ele,bd,else,if,node,name,equals,ele,return,parse,list,element,ele,bd,else,if,node,name,equals,ele,return,parse,set,element,ele,bd,else,if,node,name,equals,ele,return,parse,map,element,ele,bd,else,if,node,name,equals,ele,return,parse,props,element,ele,else,error,unknown,property,sub,element,ele,get,node,name,ele,return,null
BeanDefinitionParserDelegate -> public Object parsePropertySubElement(Element ele, BeanDefinition bd, String defaultValueType);1351392612;Parse a value, ref or collection sub-element of a property or_constructor-arg element._@param ele subelement of property element_ we don't know which yet_@param defaultValueType the default type (class name) for any_<code>&lt_value&gt_</code> tag that might be created;public Object parsePropertySubElement(Element ele, BeanDefinition bd, String defaultValueType) {_		if (!isDefaultNamespace(ele)) {_			return parseNestedCustomElement(ele, bd)__		}_		else if (nodeNameEquals(ele, BEAN_ELEMENT)) {_			BeanDefinitionHolder nestedBd = parseBeanDefinitionElement(ele, bd)__			if (nestedBd != null) {_				nestedBd = decorateBeanDefinitionIfRequired(ele, nestedBd, bd)__			}_			return nestedBd__		}_		else if (nodeNameEquals(ele, REF_ELEMENT)) {_			_			String refName = ele.getAttribute(BEAN_REF_ATTRIBUTE)__			boolean toParent = false__			if (!StringUtils.hasLength(refName)) {_				_				refName = ele.getAttribute(LOCAL_REF_ATTRIBUTE)__				if (!StringUtils.hasLength(refName)) {_					_					refName = ele.getAttribute(PARENT_REF_ATTRIBUTE)__					toParent = true__					if (!StringUtils.hasLength(refName)) {_						error("'bean', 'local' or 'parent' is required for <ref> element", ele)__						return null__					}_				}_			}_			if (!StringUtils.hasText(refName)) {_				error("<ref> element contains empty target attribute", ele)__				return null__			}_			RuntimeBeanReference ref = new RuntimeBeanReference(refName, toParent)__			ref.setSource(extractSource(ele))__			return ref__		}_		else if (nodeNameEquals(ele, IDREF_ELEMENT)) {_			return parseIdRefElement(ele)__		}_		else if (nodeNameEquals(ele, VALUE_ELEMENT)) {_			return parseValueElement(ele, defaultValueType)__		}_		else if (nodeNameEquals(ele, NULL_ELEMENT)) {_			_			_			TypedStringValue nullHolder = new TypedStringValue(null)__			nullHolder.setSource(extractSource(ele))__			return nullHolder__		}_		else if (nodeNameEquals(ele, ARRAY_ELEMENT)) {_			return parseArrayElement(ele, bd)__		}_		else if (nodeNameEquals(ele, LIST_ELEMENT)) {_			return parseListElement(ele, bd)__		}_		else if (nodeNameEquals(ele, SET_ELEMENT)) {_			return parseSetElement(ele, bd)__		}_		else if (nodeNameEquals(ele, MAP_ELEMENT)) {_			return parseMapElement(ele, bd)__		}_		else if (nodeNameEquals(ele, PROPS_ELEMENT)) {_			return parsePropsElement(ele)__		}_		else {_			error("Unknown property sub-element: [" + ele.getNodeName() + "]", ele)__			return null__		}_	};parse,a,value,ref,or,collection,sub,element,of,a,property,or,constructor,arg,element,param,ele,subelement,of,property,element,we,don,t,know,which,yet,param,default,value,type,the,default,type,class,name,for,any,code,lt,value,gt,code,tag,that,might,be,created;public,object,parse,property,sub,element,element,ele,bean,definition,bd,string,default,value,type,if,is,default,namespace,ele,return,parse,nested,custom,element,ele,bd,else,if,node,name,equals,ele,bean,definition,holder,nested,bd,parse,bean,definition,element,ele,bd,if,nested,bd,null,nested,bd,decorate,bean,definition,if,required,ele,nested,bd,bd,return,nested,bd,else,if,node,name,equals,ele,string,ref,name,ele,get,attribute,boolean,to,parent,false,if,string,utils,has,length,ref,name,ref,name,ele,get,attribute,if,string,utils,has,length,ref,name,ref,name,ele,get,attribute,to,parent,true,if,string,utils,has,length,ref,name,error,bean,local,or,parent,is,required,for,ref,element,ele,return,null,if,string,utils,has,text,ref,name,error,ref,element,contains,empty,target,attribute,ele,return,null,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,to,parent,ref,set,source,extract,source,ele,return,ref,else,if,node,name,equals,ele,return,parse,id,ref,element,ele,else,if,node,name,equals,ele,return,parse,value,element,ele,default,value,type,else,if,node,name,equals,ele,typed,string,value,null,holder,new,typed,string,value,null,null,holder,set,source,extract,source,ele,return,null,holder,else,if,node,name,equals,ele,return,parse,array,element,ele,bd,else,if,node,name,equals,ele,return,parse,list,element,ele,bd,else,if,node,name,equals,ele,return,parse,set,element,ele,bd,else,if,node,name,equals,ele,return,parse,map,element,ele,bd,else,if,node,name,equals,ele,return,parse,props,element,ele,else,error,unknown,property,sub,element,ele,get,node,name,ele,return,null
BeanDefinitionParserDelegate -> public Object parsePropertySubElement(Element ele, BeanDefinition bd, String defaultValueType);1351696936;Parse a value, ref or collection sub-element of a property or_constructor-arg element._@param ele subelement of property element_ we don't know which yet_@param defaultValueType the default type (class name) for any_<code>&lt_value&gt_</code> tag that might be created;public Object parsePropertySubElement(Element ele, BeanDefinition bd, String defaultValueType) {_		if (!isDefaultNamespace(ele)) {_			return parseNestedCustomElement(ele, bd)__		}_		else if (nodeNameEquals(ele, BEAN_ELEMENT)) {_			BeanDefinitionHolder nestedBd = parseBeanDefinitionElement(ele, bd)__			if (nestedBd != null) {_				nestedBd = decorateBeanDefinitionIfRequired(ele, nestedBd, bd)__			}_			return nestedBd__		}_		else if (nodeNameEquals(ele, REF_ELEMENT)) {_			_			String refName = ele.getAttribute(BEAN_REF_ATTRIBUTE)__			boolean toParent = false__			if (!StringUtils.hasLength(refName)) {_				_				refName = ele.getAttribute(LOCAL_REF_ATTRIBUTE)__				if (!StringUtils.hasLength(refName)) {_					_					refName = ele.getAttribute(PARENT_REF_ATTRIBUTE)__					toParent = true__					if (!StringUtils.hasLength(refName)) {_						error("'bean', 'local' or 'parent' is required for <ref> element", ele)__						return null__					}_				}_			}_			if (!StringUtils.hasText(refName)) {_				error("<ref> element contains empty target attribute", ele)__				return null__			}_			RuntimeBeanReference ref = new RuntimeBeanReference(refName, toParent)__			ref.setSource(extractSource(ele))__			return ref__		}_		else if (nodeNameEquals(ele, IDREF_ELEMENT)) {_			return parseIdRefElement(ele)__		}_		else if (nodeNameEquals(ele, VALUE_ELEMENT)) {_			return parseValueElement(ele, defaultValueType)__		}_		else if (nodeNameEquals(ele, NULL_ELEMENT)) {_			_			_			TypedStringValue nullHolder = new TypedStringValue(null)__			nullHolder.setSource(extractSource(ele))__			return nullHolder__		}_		else if (nodeNameEquals(ele, ARRAY_ELEMENT)) {_			return parseArrayElement(ele, bd)__		}_		else if (nodeNameEquals(ele, LIST_ELEMENT)) {_			return parseListElement(ele, bd)__		}_		else if (nodeNameEquals(ele, SET_ELEMENT)) {_			return parseSetElement(ele, bd)__		}_		else if (nodeNameEquals(ele, MAP_ELEMENT)) {_			return parseMapElement(ele, bd)__		}_		else if (nodeNameEquals(ele, PROPS_ELEMENT)) {_			return parsePropsElement(ele)__		}_		else {_			error("Unknown property sub-element: [" + ele.getNodeName() + "]", ele)__			return null__		}_	};parse,a,value,ref,or,collection,sub,element,of,a,property,or,constructor,arg,element,param,ele,subelement,of,property,element,we,don,t,know,which,yet,param,default,value,type,the,default,type,class,name,for,any,code,lt,value,gt,code,tag,that,might,be,created;public,object,parse,property,sub,element,element,ele,bean,definition,bd,string,default,value,type,if,is,default,namespace,ele,return,parse,nested,custom,element,ele,bd,else,if,node,name,equals,ele,bean,definition,holder,nested,bd,parse,bean,definition,element,ele,bd,if,nested,bd,null,nested,bd,decorate,bean,definition,if,required,ele,nested,bd,bd,return,nested,bd,else,if,node,name,equals,ele,string,ref,name,ele,get,attribute,boolean,to,parent,false,if,string,utils,has,length,ref,name,ref,name,ele,get,attribute,if,string,utils,has,length,ref,name,ref,name,ele,get,attribute,to,parent,true,if,string,utils,has,length,ref,name,error,bean,local,or,parent,is,required,for,ref,element,ele,return,null,if,string,utils,has,text,ref,name,error,ref,element,contains,empty,target,attribute,ele,return,null,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,to,parent,ref,set,source,extract,source,ele,return,ref,else,if,node,name,equals,ele,return,parse,id,ref,element,ele,else,if,node,name,equals,ele,return,parse,value,element,ele,default,value,type,else,if,node,name,equals,ele,typed,string,value,null,holder,new,typed,string,value,null,null,holder,set,source,extract,source,ele,return,null,holder,else,if,node,name,equals,ele,return,parse,array,element,ele,bd,else,if,node,name,equals,ele,return,parse,list,element,ele,bd,else,if,node,name,equals,ele,return,parse,set,element,ele,bd,else,if,node,name,equals,ele,return,parse,map,element,ele,bd,else,if,node,name,equals,ele,return,parse,props,element,ele,else,error,unknown,property,sub,element,ele,get,node,name,ele,return,null
BeanDefinitionParserDelegate -> public Object parsePropertySubElement(Element ele, BeanDefinition bd, String defaultValueType);1356735495;Parse a value, ref or collection sub-element of a property or_constructor-arg element._@param ele subelement of property element_ we don't know which yet_@param defaultValueType the default type (class name) for any_{@code &lt_value&gt_} tag that might be created;public Object parsePropertySubElement(Element ele, BeanDefinition bd, String defaultValueType) {_		if (!isDefaultNamespace(ele)) {_			return parseNestedCustomElement(ele, bd)__		}_		else if (nodeNameEquals(ele, BEAN_ELEMENT)) {_			BeanDefinitionHolder nestedBd = parseBeanDefinitionElement(ele, bd)__			if (nestedBd != null) {_				nestedBd = decorateBeanDefinitionIfRequired(ele, nestedBd, bd)__			}_			return nestedBd__		}_		else if (nodeNameEquals(ele, REF_ELEMENT)) {_			_			String refName = ele.getAttribute(BEAN_REF_ATTRIBUTE)__			boolean toParent = false__			if (!StringUtils.hasLength(refName)) {_				_				refName = ele.getAttribute(LOCAL_REF_ATTRIBUTE)__				if (!StringUtils.hasLength(refName)) {_					_					refName = ele.getAttribute(PARENT_REF_ATTRIBUTE)__					toParent = true__					if (!StringUtils.hasLength(refName)) {_						error("'bean', 'local' or 'parent' is required for <ref> element", ele)__						return null__					}_				}_			}_			if (!StringUtils.hasText(refName)) {_				error("<ref> element contains empty target attribute", ele)__				return null__			}_			RuntimeBeanReference ref = new RuntimeBeanReference(refName, toParent)__			ref.setSource(extractSource(ele))__			return ref__		}_		else if (nodeNameEquals(ele, IDREF_ELEMENT)) {_			return parseIdRefElement(ele)__		}_		else if (nodeNameEquals(ele, VALUE_ELEMENT)) {_			return parseValueElement(ele, defaultValueType)__		}_		else if (nodeNameEquals(ele, NULL_ELEMENT)) {_			_			_			TypedStringValue nullHolder = new TypedStringValue(null)__			nullHolder.setSource(extractSource(ele))__			return nullHolder__		}_		else if (nodeNameEquals(ele, ARRAY_ELEMENT)) {_			return parseArrayElement(ele, bd)__		}_		else if (nodeNameEquals(ele, LIST_ELEMENT)) {_			return parseListElement(ele, bd)__		}_		else if (nodeNameEquals(ele, SET_ELEMENT)) {_			return parseSetElement(ele, bd)__		}_		else if (nodeNameEquals(ele, MAP_ELEMENT)) {_			return parseMapElement(ele, bd)__		}_		else if (nodeNameEquals(ele, PROPS_ELEMENT)) {_			return parsePropsElement(ele)__		}_		else {_			error("Unknown property sub-element: [" + ele.getNodeName() + "]", ele)__			return null__		}_	};parse,a,value,ref,or,collection,sub,element,of,a,property,or,constructor,arg,element,param,ele,subelement,of,property,element,we,don,t,know,which,yet,param,default,value,type,the,default,type,class,name,for,any,code,lt,value,gt,tag,that,might,be,created;public,object,parse,property,sub,element,element,ele,bean,definition,bd,string,default,value,type,if,is,default,namespace,ele,return,parse,nested,custom,element,ele,bd,else,if,node,name,equals,ele,bean,definition,holder,nested,bd,parse,bean,definition,element,ele,bd,if,nested,bd,null,nested,bd,decorate,bean,definition,if,required,ele,nested,bd,bd,return,nested,bd,else,if,node,name,equals,ele,string,ref,name,ele,get,attribute,boolean,to,parent,false,if,string,utils,has,length,ref,name,ref,name,ele,get,attribute,if,string,utils,has,length,ref,name,ref,name,ele,get,attribute,to,parent,true,if,string,utils,has,length,ref,name,error,bean,local,or,parent,is,required,for,ref,element,ele,return,null,if,string,utils,has,text,ref,name,error,ref,element,contains,empty,target,attribute,ele,return,null,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,to,parent,ref,set,source,extract,source,ele,return,ref,else,if,node,name,equals,ele,return,parse,id,ref,element,ele,else,if,node,name,equals,ele,return,parse,value,element,ele,default,value,type,else,if,node,name,equals,ele,typed,string,value,null,holder,new,typed,string,value,null,null,holder,set,source,extract,source,ele,return,null,holder,else,if,node,name,equals,ele,return,parse,array,element,ele,bd,else,if,node,name,equals,ele,return,parse,list,element,ele,bd,else,if,node,name,equals,ele,return,parse,set,element,ele,bd,else,if,node,name,equals,ele,return,parse,map,element,ele,bd,else,if,node,name,equals,ele,return,parse,props,element,ele,else,error,unknown,property,sub,element,ele,get,node,name,ele,return,null
BeanDefinitionParserDelegate -> public Object parsePropertySubElement(Element ele, BeanDefinition bd, String defaultValueType);1357119417;Parse a value, ref or collection sub-element of a property or_constructor-arg element._@param ele subelement of property element_ we don't know which yet_@param defaultValueType the default type (class name) for any_{@code &lt_value&gt_} tag that might be created;public Object parsePropertySubElement(Element ele, BeanDefinition bd, String defaultValueType) {_		if (!isDefaultNamespace(ele)) {_			return parseNestedCustomElement(ele, bd)__		}_		else if (nodeNameEquals(ele, BEAN_ELEMENT)) {_			BeanDefinitionHolder nestedBd = parseBeanDefinitionElement(ele, bd)__			if (nestedBd != null) {_				nestedBd = decorateBeanDefinitionIfRequired(ele, nestedBd, bd)__			}_			return nestedBd__		}_		else if (nodeNameEquals(ele, REF_ELEMENT)) {_			_			String refName = ele.getAttribute(BEAN_REF_ATTRIBUTE)__			boolean toParent = false__			if (!StringUtils.hasLength(refName)) {_				_				refName = ele.getAttribute(LOCAL_REF_ATTRIBUTE)__				if (!StringUtils.hasLength(refName)) {_					_					refName = ele.getAttribute(PARENT_REF_ATTRIBUTE)__					toParent = true__					if (!StringUtils.hasLength(refName)) {_						error("'bean', 'local' or 'parent' is required for <ref> element", ele)__						return null__					}_				}_			}_			if (!StringUtils.hasText(refName)) {_				error("<ref> element contains empty target attribute", ele)__				return null__			}_			RuntimeBeanReference ref = new RuntimeBeanReference(refName, toParent)__			ref.setSource(extractSource(ele))__			return ref__		}_		else if (nodeNameEquals(ele, IDREF_ELEMENT)) {_			return parseIdRefElement(ele)__		}_		else if (nodeNameEquals(ele, VALUE_ELEMENT)) {_			return parseValueElement(ele, defaultValueType)__		}_		else if (nodeNameEquals(ele, NULL_ELEMENT)) {_			_			_			TypedStringValue nullHolder = new TypedStringValue(null)__			nullHolder.setSource(extractSource(ele))__			return nullHolder__		}_		else if (nodeNameEquals(ele, ARRAY_ELEMENT)) {_			return parseArrayElement(ele, bd)__		}_		else if (nodeNameEquals(ele, LIST_ELEMENT)) {_			return parseListElement(ele, bd)__		}_		else if (nodeNameEquals(ele, SET_ELEMENT)) {_			return parseSetElement(ele, bd)__		}_		else if (nodeNameEquals(ele, MAP_ELEMENT)) {_			return parseMapElement(ele, bd)__		}_		else if (nodeNameEquals(ele, PROPS_ELEMENT)) {_			return parsePropsElement(ele)__		}_		else {_			error("Unknown property sub-element: [" + ele.getNodeName() + "]", ele)__			return null__		}_	};parse,a,value,ref,or,collection,sub,element,of,a,property,or,constructor,arg,element,param,ele,subelement,of,property,element,we,don,t,know,which,yet,param,default,value,type,the,default,type,class,name,for,any,code,lt,value,gt,tag,that,might,be,created;public,object,parse,property,sub,element,element,ele,bean,definition,bd,string,default,value,type,if,is,default,namespace,ele,return,parse,nested,custom,element,ele,bd,else,if,node,name,equals,ele,bean,definition,holder,nested,bd,parse,bean,definition,element,ele,bd,if,nested,bd,null,nested,bd,decorate,bean,definition,if,required,ele,nested,bd,bd,return,nested,bd,else,if,node,name,equals,ele,string,ref,name,ele,get,attribute,boolean,to,parent,false,if,string,utils,has,length,ref,name,ref,name,ele,get,attribute,if,string,utils,has,length,ref,name,ref,name,ele,get,attribute,to,parent,true,if,string,utils,has,length,ref,name,error,bean,local,or,parent,is,required,for,ref,element,ele,return,null,if,string,utils,has,text,ref,name,error,ref,element,contains,empty,target,attribute,ele,return,null,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,to,parent,ref,set,source,extract,source,ele,return,ref,else,if,node,name,equals,ele,return,parse,id,ref,element,ele,else,if,node,name,equals,ele,return,parse,value,element,ele,default,value,type,else,if,node,name,equals,ele,typed,string,value,null,holder,new,typed,string,value,null,null,holder,set,source,extract,source,ele,return,null,holder,else,if,node,name,equals,ele,return,parse,array,element,ele,bd,else,if,node,name,equals,ele,return,parse,list,element,ele,bd,else,if,node,name,equals,ele,return,parse,set,element,ele,bd,else,if,node,name,equals,ele,return,parse,map,element,ele,bd,else,if,node,name,equals,ele,return,parse,props,element,ele,else,error,unknown,property,sub,element,ele,get,node,name,ele,return,null
BeanDefinitionParserDelegate -> public Object parsePropertySubElement(Element ele, BeanDefinition bd, String defaultValueType);1367943112;Parse a value, ref or collection sub-element of a property or_constructor-arg element._@param ele subelement of property element_ we don't know which yet_@param defaultValueType the default type (class name) for any_{@code &lt_value&gt_} tag that might be created;public Object parsePropertySubElement(Element ele, BeanDefinition bd, String defaultValueType) {_		if (!isDefaultNamespace(ele)) {_			return parseNestedCustomElement(ele, bd)__		}_		else if (nodeNameEquals(ele, BEAN_ELEMENT)) {_			BeanDefinitionHolder nestedBd = parseBeanDefinitionElement(ele, bd)__			if (nestedBd != null) {_				nestedBd = decorateBeanDefinitionIfRequired(ele, nestedBd, bd)__			}_			return nestedBd__		}_		else if (nodeNameEquals(ele, REF_ELEMENT)) {_			_			String refName = ele.getAttribute(BEAN_REF_ATTRIBUTE)__			boolean toParent = false__			if (!StringUtils.hasLength(refName)) {_				_				refName = ele.getAttribute(LOCAL_REF_ATTRIBUTE)__				if (!StringUtils.hasLength(refName)) {_					_					refName = ele.getAttribute(PARENT_REF_ATTRIBUTE)__					toParent = true__					if (!StringUtils.hasLength(refName)) {_						error("'bean', 'local' or 'parent' is required for <ref> element", ele)__						return null__					}_				}_			}_			if (!StringUtils.hasText(refName)) {_				error("<ref> element contains empty target attribute", ele)__				return null__			}_			RuntimeBeanReference ref = new RuntimeBeanReference(refName, toParent)__			ref.setSource(extractSource(ele))__			return ref__		}_		else if (nodeNameEquals(ele, IDREF_ELEMENT)) {_			return parseIdRefElement(ele)__		}_		else if (nodeNameEquals(ele, VALUE_ELEMENT)) {_			return parseValueElement(ele, defaultValueType)__		}_		else if (nodeNameEquals(ele, NULL_ELEMENT)) {_			_			_			TypedStringValue nullHolder = new TypedStringValue(null)__			nullHolder.setSource(extractSource(ele))__			return nullHolder__		}_		else if (nodeNameEquals(ele, ARRAY_ELEMENT)) {_			return parseArrayElement(ele, bd)__		}_		else if (nodeNameEquals(ele, LIST_ELEMENT)) {_			return parseListElement(ele, bd)__		}_		else if (nodeNameEquals(ele, SET_ELEMENT)) {_			return parseSetElement(ele, bd)__		}_		else if (nodeNameEquals(ele, MAP_ELEMENT)) {_			return parseMapElement(ele, bd)__		}_		else if (nodeNameEquals(ele, PROPS_ELEMENT)) {_			return parsePropsElement(ele)__		}_		else {_			error("Unknown property sub-element: [" + ele.getNodeName() + "]", ele)__			return null__		}_	};parse,a,value,ref,or,collection,sub,element,of,a,property,or,constructor,arg,element,param,ele,subelement,of,property,element,we,don,t,know,which,yet,param,default,value,type,the,default,type,class,name,for,any,code,lt,value,gt,tag,that,might,be,created;public,object,parse,property,sub,element,element,ele,bean,definition,bd,string,default,value,type,if,is,default,namespace,ele,return,parse,nested,custom,element,ele,bd,else,if,node,name,equals,ele,bean,definition,holder,nested,bd,parse,bean,definition,element,ele,bd,if,nested,bd,null,nested,bd,decorate,bean,definition,if,required,ele,nested,bd,bd,return,nested,bd,else,if,node,name,equals,ele,string,ref,name,ele,get,attribute,boolean,to,parent,false,if,string,utils,has,length,ref,name,ref,name,ele,get,attribute,if,string,utils,has,length,ref,name,ref,name,ele,get,attribute,to,parent,true,if,string,utils,has,length,ref,name,error,bean,local,or,parent,is,required,for,ref,element,ele,return,null,if,string,utils,has,text,ref,name,error,ref,element,contains,empty,target,attribute,ele,return,null,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,to,parent,ref,set,source,extract,source,ele,return,ref,else,if,node,name,equals,ele,return,parse,id,ref,element,ele,else,if,node,name,equals,ele,return,parse,value,element,ele,default,value,type,else,if,node,name,equals,ele,typed,string,value,null,holder,new,typed,string,value,null,null,holder,set,source,extract,source,ele,return,null,holder,else,if,node,name,equals,ele,return,parse,array,element,ele,bd,else,if,node,name,equals,ele,return,parse,list,element,ele,bd,else,if,node,name,equals,ele,return,parse,set,element,ele,bd,else,if,node,name,equals,ele,return,parse,map,element,ele,bd,else,if,node,name,equals,ele,return,parse,props,element,ele,else,error,unknown,property,sub,element,ele,get,node,name,ele,return,null
BeanDefinitionParserDelegate -> public Object parsePropertySubElement(Element ele, BeanDefinition bd, String defaultValueType);1382030648;Parse a value, ref or collection sub-element of a property or_constructor-arg element._@param ele subelement of property element_ we don't know which yet_@param defaultValueType the default type (class name) for any_{@code &lt_value&gt_} tag that might be created;public Object parsePropertySubElement(Element ele, BeanDefinition bd, String defaultValueType) {_		if (!isDefaultNamespace(ele)) {_			return parseNestedCustomElement(ele, bd)__		}_		else if (nodeNameEquals(ele, BEAN_ELEMENT)) {_			BeanDefinitionHolder nestedBd = parseBeanDefinitionElement(ele, bd)__			if (nestedBd != null) {_				nestedBd = decorateBeanDefinitionIfRequired(ele, nestedBd, bd)__			}_			return nestedBd__		}_		else if (nodeNameEquals(ele, REF_ELEMENT)) {_			_			String refName = ele.getAttribute(BEAN_REF_ATTRIBUTE)__			boolean toParent = false__			if (!StringUtils.hasLength(refName)) {_				_				refName = ele.getAttribute(LOCAL_REF_ATTRIBUTE)__				if (!StringUtils.hasLength(refName)) {_					_					refName = ele.getAttribute(PARENT_REF_ATTRIBUTE)__					toParent = true__					if (!StringUtils.hasLength(refName)) {_						error("'bean', 'local' or 'parent' is required for <ref> element", ele)__						return null__					}_				}_			}_			if (!StringUtils.hasText(refName)) {_				error("<ref> element contains empty target attribute", ele)__				return null__			}_			RuntimeBeanReference ref = new RuntimeBeanReference(refName, toParent)__			ref.setSource(extractSource(ele))__			return ref__		}_		else if (nodeNameEquals(ele, IDREF_ELEMENT)) {_			return parseIdRefElement(ele)__		}_		else if (nodeNameEquals(ele, VALUE_ELEMENT)) {_			return parseValueElement(ele, defaultValueType)__		}_		else if (nodeNameEquals(ele, NULL_ELEMENT)) {_			_			_			TypedStringValue nullHolder = new TypedStringValue(null)__			nullHolder.setSource(extractSource(ele))__			return nullHolder__		}_		else if (nodeNameEquals(ele, ARRAY_ELEMENT)) {_			return parseArrayElement(ele, bd)__		}_		else if (nodeNameEquals(ele, LIST_ELEMENT)) {_			return parseListElement(ele, bd)__		}_		else if (nodeNameEquals(ele, SET_ELEMENT)) {_			return parseSetElement(ele, bd)__		}_		else if (nodeNameEquals(ele, MAP_ELEMENT)) {_			return parseMapElement(ele, bd)__		}_		else if (nodeNameEquals(ele, PROPS_ELEMENT)) {_			return parsePropsElement(ele)__		}_		else {_			error("Unknown property sub-element: [" + ele.getNodeName() + "]", ele)__			return null__		}_	};parse,a,value,ref,or,collection,sub,element,of,a,property,or,constructor,arg,element,param,ele,subelement,of,property,element,we,don,t,know,which,yet,param,default,value,type,the,default,type,class,name,for,any,code,lt,value,gt,tag,that,might,be,created;public,object,parse,property,sub,element,element,ele,bean,definition,bd,string,default,value,type,if,is,default,namespace,ele,return,parse,nested,custom,element,ele,bd,else,if,node,name,equals,ele,bean,definition,holder,nested,bd,parse,bean,definition,element,ele,bd,if,nested,bd,null,nested,bd,decorate,bean,definition,if,required,ele,nested,bd,bd,return,nested,bd,else,if,node,name,equals,ele,string,ref,name,ele,get,attribute,boolean,to,parent,false,if,string,utils,has,length,ref,name,ref,name,ele,get,attribute,if,string,utils,has,length,ref,name,ref,name,ele,get,attribute,to,parent,true,if,string,utils,has,length,ref,name,error,bean,local,or,parent,is,required,for,ref,element,ele,return,null,if,string,utils,has,text,ref,name,error,ref,element,contains,empty,target,attribute,ele,return,null,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,to,parent,ref,set,source,extract,source,ele,return,ref,else,if,node,name,equals,ele,return,parse,id,ref,element,ele,else,if,node,name,equals,ele,return,parse,value,element,ele,default,value,type,else,if,node,name,equals,ele,typed,string,value,null,holder,new,typed,string,value,null,null,holder,set,source,extract,source,ele,return,null,holder,else,if,node,name,equals,ele,return,parse,array,element,ele,bd,else,if,node,name,equals,ele,return,parse,list,element,ele,bd,else,if,node,name,equals,ele,return,parse,set,element,ele,bd,else,if,node,name,equals,ele,return,parse,map,element,ele,bd,else,if,node,name,equals,ele,return,parse,props,element,ele,else,error,unknown,property,sub,element,ele,get,node,name,ele,return,null
BeanDefinitionParserDelegate -> public Object parsePropertySubElement(Element ele, BeanDefinition bd, String defaultValueType);1385412762;Parse a value, ref or collection sub-element of a property or_constructor-arg element._@param ele subelement of property element_ we don't know which yet_@param defaultValueType the default type (class name) for any_{@code &lt_value&gt_} tag that might be created;public Object parsePropertySubElement(Element ele, BeanDefinition bd, String defaultValueType) {_		if (!isDefaultNamespace(ele)) {_			return parseNestedCustomElement(ele, bd)__		}_		else if (nodeNameEquals(ele, BEAN_ELEMENT)) {_			BeanDefinitionHolder nestedBd = parseBeanDefinitionElement(ele, bd)__			if (nestedBd != null) {_				nestedBd = decorateBeanDefinitionIfRequired(ele, nestedBd, bd)__			}_			return nestedBd__		}_		else if (nodeNameEquals(ele, REF_ELEMENT)) {_			_			String refName = ele.getAttribute(BEAN_REF_ATTRIBUTE)__			boolean toParent = false__			if (!StringUtils.hasLength(refName)) {_				_				refName = ele.getAttribute(LOCAL_REF_ATTRIBUTE)__				if (!StringUtils.hasLength(refName)) {_					_					refName = ele.getAttribute(PARENT_REF_ATTRIBUTE)__					toParent = true__					if (!StringUtils.hasLength(refName)) {_						error("'bean', 'local' or 'parent' is required for <ref> element", ele)__						return null__					}_				}_			}_			if (!StringUtils.hasText(refName)) {_				error("<ref> element contains empty target attribute", ele)__				return null__			}_			RuntimeBeanReference ref = new RuntimeBeanReference(refName, toParent)__			ref.setSource(extractSource(ele))__			return ref__		}_		else if (nodeNameEquals(ele, IDREF_ELEMENT)) {_			return parseIdRefElement(ele)__		}_		else if (nodeNameEquals(ele, VALUE_ELEMENT)) {_			return parseValueElement(ele, defaultValueType)__		}_		else if (nodeNameEquals(ele, NULL_ELEMENT)) {_			_			_			TypedStringValue nullHolder = new TypedStringValue(null)__			nullHolder.setSource(extractSource(ele))__			return nullHolder__		}_		else if (nodeNameEquals(ele, ARRAY_ELEMENT)) {_			return parseArrayElement(ele, bd)__		}_		else if (nodeNameEquals(ele, LIST_ELEMENT)) {_			return parseListElement(ele, bd)__		}_		else if (nodeNameEquals(ele, SET_ELEMENT)) {_			return parseSetElement(ele, bd)__		}_		else if (nodeNameEquals(ele, MAP_ELEMENT)) {_			return parseMapElement(ele, bd)__		}_		else if (nodeNameEquals(ele, PROPS_ELEMENT)) {_			return parsePropsElement(ele)__		}_		else {_			error("Unknown property sub-element: [" + ele.getNodeName() + "]", ele)__			return null__		}_	};parse,a,value,ref,or,collection,sub,element,of,a,property,or,constructor,arg,element,param,ele,subelement,of,property,element,we,don,t,know,which,yet,param,default,value,type,the,default,type,class,name,for,any,code,lt,value,gt,tag,that,might,be,created;public,object,parse,property,sub,element,element,ele,bean,definition,bd,string,default,value,type,if,is,default,namespace,ele,return,parse,nested,custom,element,ele,bd,else,if,node,name,equals,ele,bean,definition,holder,nested,bd,parse,bean,definition,element,ele,bd,if,nested,bd,null,nested,bd,decorate,bean,definition,if,required,ele,nested,bd,bd,return,nested,bd,else,if,node,name,equals,ele,string,ref,name,ele,get,attribute,boolean,to,parent,false,if,string,utils,has,length,ref,name,ref,name,ele,get,attribute,if,string,utils,has,length,ref,name,ref,name,ele,get,attribute,to,parent,true,if,string,utils,has,length,ref,name,error,bean,local,or,parent,is,required,for,ref,element,ele,return,null,if,string,utils,has,text,ref,name,error,ref,element,contains,empty,target,attribute,ele,return,null,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,to,parent,ref,set,source,extract,source,ele,return,ref,else,if,node,name,equals,ele,return,parse,id,ref,element,ele,else,if,node,name,equals,ele,return,parse,value,element,ele,default,value,type,else,if,node,name,equals,ele,typed,string,value,null,holder,new,typed,string,value,null,null,holder,set,source,extract,source,ele,return,null,holder,else,if,node,name,equals,ele,return,parse,array,element,ele,bd,else,if,node,name,equals,ele,return,parse,list,element,ele,bd,else,if,node,name,equals,ele,return,parse,set,element,ele,bd,else,if,node,name,equals,ele,return,parse,map,element,ele,bd,else,if,node,name,equals,ele,return,parse,props,element,ele,else,error,unknown,property,sub,element,ele,get,node,name,ele,return,null
BeanDefinitionParserDelegate -> public Object parsePropertySubElement(Element ele, BeanDefinition bd, String defaultValueType);1410953197;Parse a value, ref or collection sub-element of a property or_constructor-arg element._@param ele subelement of property element_ we don't know which yet_@param defaultValueType the default type (class name) for any_{@code &lt_value&gt_} tag that might be created;public Object parsePropertySubElement(Element ele, BeanDefinition bd, String defaultValueType) {_		if (!isDefaultNamespace(ele)) {_			return parseNestedCustomElement(ele, bd)__		}_		else if (nodeNameEquals(ele, BEAN_ELEMENT)) {_			BeanDefinitionHolder nestedBd = parseBeanDefinitionElement(ele, bd)__			if (nestedBd != null) {_				nestedBd = decorateBeanDefinitionIfRequired(ele, nestedBd, bd)__			}_			return nestedBd__		}_		else if (nodeNameEquals(ele, REF_ELEMENT)) {_			_			String refName = ele.getAttribute(BEAN_REF_ATTRIBUTE)__			boolean toParent = false__			if (!StringUtils.hasLength(refName)) {_				_				refName = ele.getAttribute(LOCAL_REF_ATTRIBUTE)__				if (!StringUtils.hasLength(refName)) {_					_					refName = ele.getAttribute(PARENT_REF_ATTRIBUTE)__					toParent = true__					if (!StringUtils.hasLength(refName)) {_						error("'bean', 'local' or 'parent' is required for <ref> element", ele)__						return null__					}_				}_			}_			if (!StringUtils.hasText(refName)) {_				error("<ref> element contains empty target attribute", ele)__				return null__			}_			RuntimeBeanReference ref = new RuntimeBeanReference(refName, toParent)__			ref.setSource(extractSource(ele))__			return ref__		}_		else if (nodeNameEquals(ele, IDREF_ELEMENT)) {_			return parseIdRefElement(ele)__		}_		else if (nodeNameEquals(ele, VALUE_ELEMENT)) {_			return parseValueElement(ele, defaultValueType)__		}_		else if (nodeNameEquals(ele, NULL_ELEMENT)) {_			_			_			TypedStringValue nullHolder = new TypedStringValue(null)__			nullHolder.setSource(extractSource(ele))__			return nullHolder__		}_		else if (nodeNameEquals(ele, ARRAY_ELEMENT)) {_			return parseArrayElement(ele, bd)__		}_		else if (nodeNameEquals(ele, LIST_ELEMENT)) {_			return parseListElement(ele, bd)__		}_		else if (nodeNameEquals(ele, SET_ELEMENT)) {_			return parseSetElement(ele, bd)__		}_		else if (nodeNameEquals(ele, MAP_ELEMENT)) {_			return parseMapElement(ele, bd)__		}_		else if (nodeNameEquals(ele, PROPS_ELEMENT)) {_			return parsePropsElement(ele)__		}_		else {_			error("Unknown property sub-element: [" + ele.getNodeName() + "]", ele)__			return null__		}_	};parse,a,value,ref,or,collection,sub,element,of,a,property,or,constructor,arg,element,param,ele,subelement,of,property,element,we,don,t,know,which,yet,param,default,value,type,the,default,type,class,name,for,any,code,lt,value,gt,tag,that,might,be,created;public,object,parse,property,sub,element,element,ele,bean,definition,bd,string,default,value,type,if,is,default,namespace,ele,return,parse,nested,custom,element,ele,bd,else,if,node,name,equals,ele,bean,definition,holder,nested,bd,parse,bean,definition,element,ele,bd,if,nested,bd,null,nested,bd,decorate,bean,definition,if,required,ele,nested,bd,bd,return,nested,bd,else,if,node,name,equals,ele,string,ref,name,ele,get,attribute,boolean,to,parent,false,if,string,utils,has,length,ref,name,ref,name,ele,get,attribute,if,string,utils,has,length,ref,name,ref,name,ele,get,attribute,to,parent,true,if,string,utils,has,length,ref,name,error,bean,local,or,parent,is,required,for,ref,element,ele,return,null,if,string,utils,has,text,ref,name,error,ref,element,contains,empty,target,attribute,ele,return,null,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,to,parent,ref,set,source,extract,source,ele,return,ref,else,if,node,name,equals,ele,return,parse,id,ref,element,ele,else,if,node,name,equals,ele,return,parse,value,element,ele,default,value,type,else,if,node,name,equals,ele,typed,string,value,null,holder,new,typed,string,value,null,null,holder,set,source,extract,source,ele,return,null,holder,else,if,node,name,equals,ele,return,parse,array,element,ele,bd,else,if,node,name,equals,ele,return,parse,list,element,ele,bd,else,if,node,name,equals,ele,return,parse,set,element,ele,bd,else,if,node,name,equals,ele,return,parse,map,element,ele,bd,else,if,node,name,equals,ele,return,parse,props,element,ele,else,error,unknown,property,sub,element,ele,get,node,name,ele,return,null
BeanDefinitionParserDelegate -> public Object parsePropertySubElement(Element ele, BeanDefinition bd, String defaultValueType);1411599760;Parse a value, ref or collection sub-element of a property or_constructor-arg element._@param ele subelement of property element_ we don't know which yet_@param defaultValueType the default type (class name) for any_{@code &lt_value&gt_} tag that might be created;public Object parsePropertySubElement(Element ele, BeanDefinition bd, String defaultValueType) {_		if (!isDefaultNamespace(ele)) {_			return parseNestedCustomElement(ele, bd)__		}_		else if (nodeNameEquals(ele, BEAN_ELEMENT)) {_			BeanDefinitionHolder nestedBd = parseBeanDefinitionElement(ele, bd)__			if (nestedBd != null) {_				nestedBd = decorateBeanDefinitionIfRequired(ele, nestedBd, bd)__			}_			return nestedBd__		}_		else if (nodeNameEquals(ele, REF_ELEMENT)) {_			_			String refName = ele.getAttribute(BEAN_REF_ATTRIBUTE)__			boolean toParent = false__			if (!StringUtils.hasLength(refName)) {_				_				refName = ele.getAttribute(LOCAL_REF_ATTRIBUTE)__				if (!StringUtils.hasLength(refName)) {_					_					refName = ele.getAttribute(PARENT_REF_ATTRIBUTE)__					toParent = true__					if (!StringUtils.hasLength(refName)) {_						error("'bean', 'local' or 'parent' is required for <ref> element", ele)__						return null__					}_				}_			}_			if (!StringUtils.hasText(refName)) {_				error("<ref> element contains empty target attribute", ele)__				return null__			}_			RuntimeBeanReference ref = new RuntimeBeanReference(refName, toParent)__			ref.setSource(extractSource(ele))__			return ref__		}_		else if (nodeNameEquals(ele, IDREF_ELEMENT)) {_			return parseIdRefElement(ele)__		}_		else if (nodeNameEquals(ele, VALUE_ELEMENT)) {_			return parseValueElement(ele, defaultValueType)__		}_		else if (nodeNameEquals(ele, NULL_ELEMENT)) {_			_			_			TypedStringValue nullHolder = new TypedStringValue(null)__			nullHolder.setSource(extractSource(ele))__			return nullHolder__		}_		else if (nodeNameEquals(ele, ARRAY_ELEMENT)) {_			return parseArrayElement(ele, bd)__		}_		else if (nodeNameEquals(ele, LIST_ELEMENT)) {_			return parseListElement(ele, bd)__		}_		else if (nodeNameEquals(ele, SET_ELEMENT)) {_			return parseSetElement(ele, bd)__		}_		else if (nodeNameEquals(ele, MAP_ELEMENT)) {_			return parseMapElement(ele, bd)__		}_		else if (nodeNameEquals(ele, PROPS_ELEMENT)) {_			return parsePropsElement(ele)__		}_		else {_			error("Unknown property sub-element: [" + ele.getNodeName() + "]", ele)__			return null__		}_	};parse,a,value,ref,or,collection,sub,element,of,a,property,or,constructor,arg,element,param,ele,subelement,of,property,element,we,don,t,know,which,yet,param,default,value,type,the,default,type,class,name,for,any,code,lt,value,gt,tag,that,might,be,created;public,object,parse,property,sub,element,element,ele,bean,definition,bd,string,default,value,type,if,is,default,namespace,ele,return,parse,nested,custom,element,ele,bd,else,if,node,name,equals,ele,bean,definition,holder,nested,bd,parse,bean,definition,element,ele,bd,if,nested,bd,null,nested,bd,decorate,bean,definition,if,required,ele,nested,bd,bd,return,nested,bd,else,if,node,name,equals,ele,string,ref,name,ele,get,attribute,boolean,to,parent,false,if,string,utils,has,length,ref,name,ref,name,ele,get,attribute,if,string,utils,has,length,ref,name,ref,name,ele,get,attribute,to,parent,true,if,string,utils,has,length,ref,name,error,bean,local,or,parent,is,required,for,ref,element,ele,return,null,if,string,utils,has,text,ref,name,error,ref,element,contains,empty,target,attribute,ele,return,null,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,to,parent,ref,set,source,extract,source,ele,return,ref,else,if,node,name,equals,ele,return,parse,id,ref,element,ele,else,if,node,name,equals,ele,return,parse,value,element,ele,default,value,type,else,if,node,name,equals,ele,typed,string,value,null,holder,new,typed,string,value,null,null,holder,set,source,extract,source,ele,return,null,holder,else,if,node,name,equals,ele,return,parse,array,element,ele,bd,else,if,node,name,equals,ele,return,parse,list,element,ele,bd,else,if,node,name,equals,ele,return,parse,set,element,ele,bd,else,if,node,name,equals,ele,return,parse,map,element,ele,bd,else,if,node,name,equals,ele,return,parse,props,element,ele,else,error,unknown,property,sub,element,ele,get,node,name,ele,return,null
BeanDefinitionParserDelegate -> public Object parsePropertySubElement(Element ele, BeanDefinition bd, String defaultValueType);1419966315;Parse a value, ref or collection sub-element of a property or_constructor-arg element._@param ele subelement of property element_ we don't know which yet_@param defaultValueType the default type (class name) for any_{@code &lt_value&gt_} tag that might be created;public Object parsePropertySubElement(Element ele, BeanDefinition bd, String defaultValueType) {_		if (!isDefaultNamespace(ele)) {_			return parseNestedCustomElement(ele, bd)__		}_		else if (nodeNameEquals(ele, BEAN_ELEMENT)) {_			BeanDefinitionHolder nestedBd = parseBeanDefinitionElement(ele, bd)__			if (nestedBd != null) {_				nestedBd = decorateBeanDefinitionIfRequired(ele, nestedBd, bd)__			}_			return nestedBd__		}_		else if (nodeNameEquals(ele, REF_ELEMENT)) {_			_			String refName = ele.getAttribute(BEAN_REF_ATTRIBUTE)__			boolean toParent = false__			if (!StringUtils.hasLength(refName)) {_				_				refName = ele.getAttribute(LOCAL_REF_ATTRIBUTE)__				if (!StringUtils.hasLength(refName)) {_					_					refName = ele.getAttribute(PARENT_REF_ATTRIBUTE)__					toParent = true__					if (!StringUtils.hasLength(refName)) {_						error("'bean', 'local' or 'parent' is required for <ref> element", ele)__						return null__					}_				}_			}_			if (!StringUtils.hasText(refName)) {_				error("<ref> element contains empty target attribute", ele)__				return null__			}_			RuntimeBeanReference ref = new RuntimeBeanReference(refName, toParent)__			ref.setSource(extractSource(ele))__			return ref__		}_		else if (nodeNameEquals(ele, IDREF_ELEMENT)) {_			return parseIdRefElement(ele)__		}_		else if (nodeNameEquals(ele, VALUE_ELEMENT)) {_			return parseValueElement(ele, defaultValueType)__		}_		else if (nodeNameEquals(ele, NULL_ELEMENT)) {_			_			_			TypedStringValue nullHolder = new TypedStringValue(null)__			nullHolder.setSource(extractSource(ele))__			return nullHolder__		}_		else if (nodeNameEquals(ele, ARRAY_ELEMENT)) {_			return parseArrayElement(ele, bd)__		}_		else if (nodeNameEquals(ele, LIST_ELEMENT)) {_			return parseListElement(ele, bd)__		}_		else if (nodeNameEquals(ele, SET_ELEMENT)) {_			return parseSetElement(ele, bd)__		}_		else if (nodeNameEquals(ele, MAP_ELEMENT)) {_			return parseMapElement(ele, bd)__		}_		else if (nodeNameEquals(ele, PROPS_ELEMENT)) {_			return parsePropsElement(ele)__		}_		else {_			error("Unknown property sub-element: [" + ele.getNodeName() + "]", ele)__			return null__		}_	};parse,a,value,ref,or,collection,sub,element,of,a,property,or,constructor,arg,element,param,ele,subelement,of,property,element,we,don,t,know,which,yet,param,default,value,type,the,default,type,class,name,for,any,code,lt,value,gt,tag,that,might,be,created;public,object,parse,property,sub,element,element,ele,bean,definition,bd,string,default,value,type,if,is,default,namespace,ele,return,parse,nested,custom,element,ele,bd,else,if,node,name,equals,ele,bean,definition,holder,nested,bd,parse,bean,definition,element,ele,bd,if,nested,bd,null,nested,bd,decorate,bean,definition,if,required,ele,nested,bd,bd,return,nested,bd,else,if,node,name,equals,ele,string,ref,name,ele,get,attribute,boolean,to,parent,false,if,string,utils,has,length,ref,name,ref,name,ele,get,attribute,if,string,utils,has,length,ref,name,ref,name,ele,get,attribute,to,parent,true,if,string,utils,has,length,ref,name,error,bean,local,or,parent,is,required,for,ref,element,ele,return,null,if,string,utils,has,text,ref,name,error,ref,element,contains,empty,target,attribute,ele,return,null,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,to,parent,ref,set,source,extract,source,ele,return,ref,else,if,node,name,equals,ele,return,parse,id,ref,element,ele,else,if,node,name,equals,ele,return,parse,value,element,ele,default,value,type,else,if,node,name,equals,ele,typed,string,value,null,holder,new,typed,string,value,null,null,holder,set,source,extract,source,ele,return,null,holder,else,if,node,name,equals,ele,return,parse,array,element,ele,bd,else,if,node,name,equals,ele,return,parse,list,element,ele,bd,else,if,node,name,equals,ele,return,parse,set,element,ele,bd,else,if,node,name,equals,ele,return,parse,map,element,ele,bd,else,if,node,name,equals,ele,return,parse,props,element,ele,else,error,unknown,property,sub,element,ele,get,node,name,ele,return,null
BeanDefinitionParserDelegate -> public Object parsePropertySubElement(Element ele, BeanDefinition bd, String defaultValueType);1431958785;Parse a value, ref or collection sub-element of a property or_constructor-arg element._@param ele subelement of property element_ we don't know which yet_@param defaultValueType the default type (class name) for any_{@code &lt_value&gt_} tag that might be created;public Object parsePropertySubElement(Element ele, BeanDefinition bd, String defaultValueType) {_		if (!isDefaultNamespace(ele)) {_			return parseNestedCustomElement(ele, bd)__		}_		else if (nodeNameEquals(ele, BEAN_ELEMENT)) {_			BeanDefinitionHolder nestedBd = parseBeanDefinitionElement(ele, bd)__			if (nestedBd != null) {_				nestedBd = decorateBeanDefinitionIfRequired(ele, nestedBd, bd)__			}_			return nestedBd__		}_		else if (nodeNameEquals(ele, REF_ELEMENT)) {_			_			String refName = ele.getAttribute(BEAN_REF_ATTRIBUTE)__			boolean toParent = false__			if (!StringUtils.hasLength(refName)) {_				_				refName = ele.getAttribute(LOCAL_REF_ATTRIBUTE)__				if (!StringUtils.hasLength(refName)) {_					_					refName = ele.getAttribute(PARENT_REF_ATTRIBUTE)__					toParent = true__					if (!StringUtils.hasLength(refName)) {_						error("'bean', 'local' or 'parent' is required for <ref> element", ele)__						return null__					}_				}_			}_			if (!StringUtils.hasText(refName)) {_				error("<ref> element contains empty target attribute", ele)__				return null__			}_			RuntimeBeanReference ref = new RuntimeBeanReference(refName, toParent)__			ref.setSource(extractSource(ele))__			return ref__		}_		else if (nodeNameEquals(ele, IDREF_ELEMENT)) {_			return parseIdRefElement(ele)__		}_		else if (nodeNameEquals(ele, VALUE_ELEMENT)) {_			return parseValueElement(ele, defaultValueType)__		}_		else if (nodeNameEquals(ele, NULL_ELEMENT)) {_			_			_			TypedStringValue nullHolder = new TypedStringValue(null)__			nullHolder.setSource(extractSource(ele))__			return nullHolder__		}_		else if (nodeNameEquals(ele, ARRAY_ELEMENT)) {_			return parseArrayElement(ele, bd)__		}_		else if (nodeNameEquals(ele, LIST_ELEMENT)) {_			return parseListElement(ele, bd)__		}_		else if (nodeNameEquals(ele, SET_ELEMENT)) {_			return parseSetElement(ele, bd)__		}_		else if (nodeNameEquals(ele, MAP_ELEMENT)) {_			return parseMapElement(ele, bd)__		}_		else if (nodeNameEquals(ele, PROPS_ELEMENT)) {_			return parsePropsElement(ele)__		}_		else {_			error("Unknown property sub-element: [" + ele.getNodeName() + "]", ele)__			return null__		}_	};parse,a,value,ref,or,collection,sub,element,of,a,property,or,constructor,arg,element,param,ele,subelement,of,property,element,we,don,t,know,which,yet,param,default,value,type,the,default,type,class,name,for,any,code,lt,value,gt,tag,that,might,be,created;public,object,parse,property,sub,element,element,ele,bean,definition,bd,string,default,value,type,if,is,default,namespace,ele,return,parse,nested,custom,element,ele,bd,else,if,node,name,equals,ele,bean,definition,holder,nested,bd,parse,bean,definition,element,ele,bd,if,nested,bd,null,nested,bd,decorate,bean,definition,if,required,ele,nested,bd,bd,return,nested,bd,else,if,node,name,equals,ele,string,ref,name,ele,get,attribute,boolean,to,parent,false,if,string,utils,has,length,ref,name,ref,name,ele,get,attribute,if,string,utils,has,length,ref,name,ref,name,ele,get,attribute,to,parent,true,if,string,utils,has,length,ref,name,error,bean,local,or,parent,is,required,for,ref,element,ele,return,null,if,string,utils,has,text,ref,name,error,ref,element,contains,empty,target,attribute,ele,return,null,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,to,parent,ref,set,source,extract,source,ele,return,ref,else,if,node,name,equals,ele,return,parse,id,ref,element,ele,else,if,node,name,equals,ele,return,parse,value,element,ele,default,value,type,else,if,node,name,equals,ele,typed,string,value,null,holder,new,typed,string,value,null,null,holder,set,source,extract,source,ele,return,null,holder,else,if,node,name,equals,ele,return,parse,array,element,ele,bd,else,if,node,name,equals,ele,return,parse,list,element,ele,bd,else,if,node,name,equals,ele,return,parse,set,element,ele,bd,else,if,node,name,equals,ele,return,parse,map,element,ele,bd,else,if,node,name,equals,ele,return,parse,props,element,ele,else,error,unknown,property,sub,element,ele,get,node,name,ele,return,null
BeanDefinitionParserDelegate -> public Object parsePropertySubElement(Element ele, BeanDefinition bd, String defaultValueType);1432135182;Parse a value, ref or collection sub-element of a property or_constructor-arg element._@param ele subelement of property element_ we don't know which yet_@param defaultValueType the default type (class name) for any_{@code &lt_value&gt_} tag that might be created;public Object parsePropertySubElement(Element ele, BeanDefinition bd, String defaultValueType) {_		if (!isDefaultNamespace(ele)) {_			return parseNestedCustomElement(ele, bd)__		}_		else if (nodeNameEquals(ele, BEAN_ELEMENT)) {_			BeanDefinitionHolder nestedBd = parseBeanDefinitionElement(ele, bd)__			if (nestedBd != null) {_				nestedBd = decorateBeanDefinitionIfRequired(ele, nestedBd, bd)__			}_			return nestedBd__		}_		else if (nodeNameEquals(ele, REF_ELEMENT)) {_			_			String refName = ele.getAttribute(BEAN_REF_ATTRIBUTE)__			boolean toParent = false__			if (!StringUtils.hasLength(refName)) {_				_				refName = ele.getAttribute(LOCAL_REF_ATTRIBUTE)__				if (!StringUtils.hasLength(refName)) {_					_					refName = ele.getAttribute(PARENT_REF_ATTRIBUTE)__					toParent = true__					if (!StringUtils.hasLength(refName)) {_						error("'bean', 'local' or 'parent' is required for <ref> element", ele)__						return null__					}_				}_			}_			if (!StringUtils.hasText(refName)) {_				error("<ref> element contains empty target attribute", ele)__				return null__			}_			RuntimeBeanReference ref = new RuntimeBeanReference(refName, toParent)__			ref.setSource(extractSource(ele))__			return ref__		}_		else if (nodeNameEquals(ele, IDREF_ELEMENT)) {_			return parseIdRefElement(ele)__		}_		else if (nodeNameEquals(ele, VALUE_ELEMENT)) {_			return parseValueElement(ele, defaultValueType)__		}_		else if (nodeNameEquals(ele, NULL_ELEMENT)) {_			_			_			TypedStringValue nullHolder = new TypedStringValue(null)__			nullHolder.setSource(extractSource(ele))__			return nullHolder__		}_		else if (nodeNameEquals(ele, ARRAY_ELEMENT)) {_			return parseArrayElement(ele, bd)__		}_		else if (nodeNameEquals(ele, LIST_ELEMENT)) {_			return parseListElement(ele, bd)__		}_		else if (nodeNameEquals(ele, SET_ELEMENT)) {_			return parseSetElement(ele, bd)__		}_		else if (nodeNameEquals(ele, MAP_ELEMENT)) {_			return parseMapElement(ele, bd)__		}_		else if (nodeNameEquals(ele, PROPS_ELEMENT)) {_			return parsePropsElement(ele)__		}_		else {_			error("Unknown property sub-element: [" + ele.getNodeName() + "]", ele)__			return null__		}_	};parse,a,value,ref,or,collection,sub,element,of,a,property,or,constructor,arg,element,param,ele,subelement,of,property,element,we,don,t,know,which,yet,param,default,value,type,the,default,type,class,name,for,any,code,lt,value,gt,tag,that,might,be,created;public,object,parse,property,sub,element,element,ele,bean,definition,bd,string,default,value,type,if,is,default,namespace,ele,return,parse,nested,custom,element,ele,bd,else,if,node,name,equals,ele,bean,definition,holder,nested,bd,parse,bean,definition,element,ele,bd,if,nested,bd,null,nested,bd,decorate,bean,definition,if,required,ele,nested,bd,bd,return,nested,bd,else,if,node,name,equals,ele,string,ref,name,ele,get,attribute,boolean,to,parent,false,if,string,utils,has,length,ref,name,ref,name,ele,get,attribute,if,string,utils,has,length,ref,name,ref,name,ele,get,attribute,to,parent,true,if,string,utils,has,length,ref,name,error,bean,local,or,parent,is,required,for,ref,element,ele,return,null,if,string,utils,has,text,ref,name,error,ref,element,contains,empty,target,attribute,ele,return,null,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,to,parent,ref,set,source,extract,source,ele,return,ref,else,if,node,name,equals,ele,return,parse,id,ref,element,ele,else,if,node,name,equals,ele,return,parse,value,element,ele,default,value,type,else,if,node,name,equals,ele,typed,string,value,null,holder,new,typed,string,value,null,null,holder,set,source,extract,source,ele,return,null,holder,else,if,node,name,equals,ele,return,parse,array,element,ele,bd,else,if,node,name,equals,ele,return,parse,list,element,ele,bd,else,if,node,name,equals,ele,return,parse,set,element,ele,bd,else,if,node,name,equals,ele,return,parse,map,element,ele,bd,else,if,node,name,equals,ele,return,parse,props,element,ele,else,error,unknown,property,sub,element,ele,get,node,name,ele,return,null
BeanDefinitionParserDelegate -> public Object parsePropertySubElement(Element ele, BeanDefinition bd, String defaultValueType);1447323728;Parse a value, ref or collection sub-element of a property or_constructor-arg element._@param ele subelement of property element_ we don't know which yet_@param defaultValueType the default type (class name) for any_{@code <value>} tag that might be created;public Object parsePropertySubElement(Element ele, BeanDefinition bd, String defaultValueType) {_		if (!isDefaultNamespace(ele)) {_			return parseNestedCustomElement(ele, bd)__		}_		else if (nodeNameEquals(ele, BEAN_ELEMENT)) {_			BeanDefinitionHolder nestedBd = parseBeanDefinitionElement(ele, bd)__			if (nestedBd != null) {_				nestedBd = decorateBeanDefinitionIfRequired(ele, nestedBd, bd)__			}_			return nestedBd__		}_		else if (nodeNameEquals(ele, REF_ELEMENT)) {_			_			String refName = ele.getAttribute(BEAN_REF_ATTRIBUTE)__			boolean toParent = false__			if (!StringUtils.hasLength(refName)) {_				_				refName = ele.getAttribute(LOCAL_REF_ATTRIBUTE)__				if (!StringUtils.hasLength(refName)) {_					_					refName = ele.getAttribute(PARENT_REF_ATTRIBUTE)__					toParent = true__					if (!StringUtils.hasLength(refName)) {_						error("'bean', 'local' or 'parent' is required for <ref> element", ele)__						return null__					}_				}_			}_			if (!StringUtils.hasText(refName)) {_				error("<ref> element contains empty target attribute", ele)__				return null__			}_			RuntimeBeanReference ref = new RuntimeBeanReference(refName, toParent)__			ref.setSource(extractSource(ele))__			return ref__		}_		else if (nodeNameEquals(ele, IDREF_ELEMENT)) {_			return parseIdRefElement(ele)__		}_		else if (nodeNameEquals(ele, VALUE_ELEMENT)) {_			return parseValueElement(ele, defaultValueType)__		}_		else if (nodeNameEquals(ele, NULL_ELEMENT)) {_			_			_			TypedStringValue nullHolder = new TypedStringValue(null)__			nullHolder.setSource(extractSource(ele))__			return nullHolder__		}_		else if (nodeNameEquals(ele, ARRAY_ELEMENT)) {_			return parseArrayElement(ele, bd)__		}_		else if (nodeNameEquals(ele, LIST_ELEMENT)) {_			return parseListElement(ele, bd)__		}_		else if (nodeNameEquals(ele, SET_ELEMENT)) {_			return parseSetElement(ele, bd)__		}_		else if (nodeNameEquals(ele, MAP_ELEMENT)) {_			return parseMapElement(ele, bd)__		}_		else if (nodeNameEquals(ele, PROPS_ELEMENT)) {_			return parsePropsElement(ele)__		}_		else {_			error("Unknown property sub-element: [" + ele.getNodeName() + "]", ele)__			return null__		}_	};parse,a,value,ref,or,collection,sub,element,of,a,property,or,constructor,arg,element,param,ele,subelement,of,property,element,we,don,t,know,which,yet,param,default,value,type,the,default,type,class,name,for,any,code,value,tag,that,might,be,created;public,object,parse,property,sub,element,element,ele,bean,definition,bd,string,default,value,type,if,is,default,namespace,ele,return,parse,nested,custom,element,ele,bd,else,if,node,name,equals,ele,bean,definition,holder,nested,bd,parse,bean,definition,element,ele,bd,if,nested,bd,null,nested,bd,decorate,bean,definition,if,required,ele,nested,bd,bd,return,nested,bd,else,if,node,name,equals,ele,string,ref,name,ele,get,attribute,boolean,to,parent,false,if,string,utils,has,length,ref,name,ref,name,ele,get,attribute,if,string,utils,has,length,ref,name,ref,name,ele,get,attribute,to,parent,true,if,string,utils,has,length,ref,name,error,bean,local,or,parent,is,required,for,ref,element,ele,return,null,if,string,utils,has,text,ref,name,error,ref,element,contains,empty,target,attribute,ele,return,null,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,to,parent,ref,set,source,extract,source,ele,return,ref,else,if,node,name,equals,ele,return,parse,id,ref,element,ele,else,if,node,name,equals,ele,return,parse,value,element,ele,default,value,type,else,if,node,name,equals,ele,typed,string,value,null,holder,new,typed,string,value,null,null,holder,set,source,extract,source,ele,return,null,holder,else,if,node,name,equals,ele,return,parse,array,element,ele,bd,else,if,node,name,equals,ele,return,parse,list,element,ele,bd,else,if,node,name,equals,ele,return,parse,set,element,ele,bd,else,if,node,name,equals,ele,return,parse,map,element,ele,bd,else,if,node,name,equals,ele,return,parse,props,element,ele,else,error,unknown,property,sub,element,ele,get,node,name,ele,return,null
BeanDefinitionParserDelegate -> public Object parsePropertySubElement(Element ele, BeanDefinition bd, String defaultValueType);1467726769;Parse a value, ref or collection sub-element of a property or_constructor-arg element._@param ele subelement of property element_ we don't know which yet_@param defaultValueType the default type (class name) for any_{@code <value>} tag that might be created;public Object parsePropertySubElement(Element ele, BeanDefinition bd, String defaultValueType) {_		if (!isDefaultNamespace(ele)) {_			return parseNestedCustomElement(ele, bd)__		}_		else if (nodeNameEquals(ele, BEAN_ELEMENT)) {_			BeanDefinitionHolder nestedBd = parseBeanDefinitionElement(ele, bd)__			if (nestedBd != null) {_				nestedBd = decorateBeanDefinitionIfRequired(ele, nestedBd, bd)__			}_			return nestedBd__		}_		else if (nodeNameEquals(ele, REF_ELEMENT)) {_			_			String refName = ele.getAttribute(BEAN_REF_ATTRIBUTE)__			boolean toParent = false__			if (!StringUtils.hasLength(refName)) {_				_				refName = ele.getAttribute(LOCAL_REF_ATTRIBUTE)__				if (!StringUtils.hasLength(refName)) {_					_					refName = ele.getAttribute(PARENT_REF_ATTRIBUTE)__					toParent = true__					if (!StringUtils.hasLength(refName)) {_						error("'bean', 'local' or 'parent' is required for <ref> element", ele)__						return null__					}_				}_			}_			if (!StringUtils.hasText(refName)) {_				error("<ref> element contains empty target attribute", ele)__				return null__			}_			RuntimeBeanReference ref = new RuntimeBeanReference(refName, toParent)__			ref.setSource(extractSource(ele))__			return ref__		}_		else if (nodeNameEquals(ele, IDREF_ELEMENT)) {_			return parseIdRefElement(ele)__		}_		else if (nodeNameEquals(ele, VALUE_ELEMENT)) {_			return parseValueElement(ele, defaultValueType)__		}_		else if (nodeNameEquals(ele, NULL_ELEMENT)) {_			_			_			TypedStringValue nullHolder = new TypedStringValue(null)__			nullHolder.setSource(extractSource(ele))__			return nullHolder__		}_		else if (nodeNameEquals(ele, ARRAY_ELEMENT)) {_			return parseArrayElement(ele, bd)__		}_		else if (nodeNameEquals(ele, LIST_ELEMENT)) {_			return parseListElement(ele, bd)__		}_		else if (nodeNameEquals(ele, SET_ELEMENT)) {_			return parseSetElement(ele, bd)__		}_		else if (nodeNameEquals(ele, MAP_ELEMENT)) {_			return parseMapElement(ele, bd)__		}_		else if (nodeNameEquals(ele, PROPS_ELEMENT)) {_			return parsePropsElement(ele)__		}_		else {_			error("Unknown property sub-element: [" + ele.getNodeName() + "]", ele)__			return null__		}_	};parse,a,value,ref,or,collection,sub,element,of,a,property,or,constructor,arg,element,param,ele,subelement,of,property,element,we,don,t,know,which,yet,param,default,value,type,the,default,type,class,name,for,any,code,value,tag,that,might,be,created;public,object,parse,property,sub,element,element,ele,bean,definition,bd,string,default,value,type,if,is,default,namespace,ele,return,parse,nested,custom,element,ele,bd,else,if,node,name,equals,ele,bean,definition,holder,nested,bd,parse,bean,definition,element,ele,bd,if,nested,bd,null,nested,bd,decorate,bean,definition,if,required,ele,nested,bd,bd,return,nested,bd,else,if,node,name,equals,ele,string,ref,name,ele,get,attribute,boolean,to,parent,false,if,string,utils,has,length,ref,name,ref,name,ele,get,attribute,if,string,utils,has,length,ref,name,ref,name,ele,get,attribute,to,parent,true,if,string,utils,has,length,ref,name,error,bean,local,or,parent,is,required,for,ref,element,ele,return,null,if,string,utils,has,text,ref,name,error,ref,element,contains,empty,target,attribute,ele,return,null,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,to,parent,ref,set,source,extract,source,ele,return,ref,else,if,node,name,equals,ele,return,parse,id,ref,element,ele,else,if,node,name,equals,ele,return,parse,value,element,ele,default,value,type,else,if,node,name,equals,ele,typed,string,value,null,holder,new,typed,string,value,null,null,holder,set,source,extract,source,ele,return,null,holder,else,if,node,name,equals,ele,return,parse,array,element,ele,bd,else,if,node,name,equals,ele,return,parse,list,element,ele,bd,else,if,node,name,equals,ele,return,parse,set,element,ele,bd,else,if,node,name,equals,ele,return,parse,map,element,ele,bd,else,if,node,name,equals,ele,return,parse,props,element,ele,else,error,unknown,property,sub,element,ele,get,node,name,ele,return,null
BeanDefinitionParserDelegate -> public Object parsePropertySubElement(Element ele, BeanDefinition bd, String defaultValueType);1467730834;Parse a value, ref or collection sub-element of a property or_constructor-arg element._@param ele subelement of property element_ we don't know which yet_@param defaultValueType the default type (class name) for any_{@code <value>} tag that might be created;public Object parsePropertySubElement(Element ele, BeanDefinition bd, String defaultValueType) {_		if (!isDefaultNamespace(ele)) {_			return parseNestedCustomElement(ele, bd)__		}_		else if (nodeNameEquals(ele, BEAN_ELEMENT)) {_			BeanDefinitionHolder nestedBd = parseBeanDefinitionElement(ele, bd)__			if (nestedBd != null) {_				nestedBd = decorateBeanDefinitionIfRequired(ele, nestedBd, bd)__			}_			return nestedBd__		}_		else if (nodeNameEquals(ele, REF_ELEMENT)) {_			_			String refName = ele.getAttribute(BEAN_REF_ATTRIBUTE)__			boolean toParent = false__			if (!StringUtils.hasLength(refName)) {_				_				refName = ele.getAttribute(LOCAL_REF_ATTRIBUTE)__				if (!StringUtils.hasLength(refName)) {_					_					refName = ele.getAttribute(PARENT_REF_ATTRIBUTE)__					toParent = true__					if (!StringUtils.hasLength(refName)) {_						error("'bean', 'local' or 'parent' is required for <ref> element", ele)__						return null__					}_				}_			}_			if (!StringUtils.hasText(refName)) {_				error("<ref> element contains empty target attribute", ele)__				return null__			}_			RuntimeBeanReference ref = new RuntimeBeanReference(refName, toParent)__			ref.setSource(extractSource(ele))__			return ref__		}_		else if (nodeNameEquals(ele, IDREF_ELEMENT)) {_			return parseIdRefElement(ele)__		}_		else if (nodeNameEquals(ele, VALUE_ELEMENT)) {_			return parseValueElement(ele, defaultValueType)__		}_		else if (nodeNameEquals(ele, NULL_ELEMENT)) {_			_			_			TypedStringValue nullHolder = new TypedStringValue(null)__			nullHolder.setSource(extractSource(ele))__			return nullHolder__		}_		else if (nodeNameEquals(ele, ARRAY_ELEMENT)) {_			return parseArrayElement(ele, bd)__		}_		else if (nodeNameEquals(ele, LIST_ELEMENT)) {_			return parseListElement(ele, bd)__		}_		else if (nodeNameEquals(ele, SET_ELEMENT)) {_			return parseSetElement(ele, bd)__		}_		else if (nodeNameEquals(ele, MAP_ELEMENT)) {_			return parseMapElement(ele, bd)__		}_		else if (nodeNameEquals(ele, PROPS_ELEMENT)) {_			return parsePropsElement(ele)__		}_		else {_			error("Unknown property sub-element: [" + ele.getNodeName() + "]", ele)__			return null__		}_	};parse,a,value,ref,or,collection,sub,element,of,a,property,or,constructor,arg,element,param,ele,subelement,of,property,element,we,don,t,know,which,yet,param,default,value,type,the,default,type,class,name,for,any,code,value,tag,that,might,be,created;public,object,parse,property,sub,element,element,ele,bean,definition,bd,string,default,value,type,if,is,default,namespace,ele,return,parse,nested,custom,element,ele,bd,else,if,node,name,equals,ele,bean,definition,holder,nested,bd,parse,bean,definition,element,ele,bd,if,nested,bd,null,nested,bd,decorate,bean,definition,if,required,ele,nested,bd,bd,return,nested,bd,else,if,node,name,equals,ele,string,ref,name,ele,get,attribute,boolean,to,parent,false,if,string,utils,has,length,ref,name,ref,name,ele,get,attribute,if,string,utils,has,length,ref,name,ref,name,ele,get,attribute,to,parent,true,if,string,utils,has,length,ref,name,error,bean,local,or,parent,is,required,for,ref,element,ele,return,null,if,string,utils,has,text,ref,name,error,ref,element,contains,empty,target,attribute,ele,return,null,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,to,parent,ref,set,source,extract,source,ele,return,ref,else,if,node,name,equals,ele,return,parse,id,ref,element,ele,else,if,node,name,equals,ele,return,parse,value,element,ele,default,value,type,else,if,node,name,equals,ele,typed,string,value,null,holder,new,typed,string,value,null,null,holder,set,source,extract,source,ele,return,null,holder,else,if,node,name,equals,ele,return,parse,array,element,ele,bd,else,if,node,name,equals,ele,return,parse,list,element,ele,bd,else,if,node,name,equals,ele,return,parse,set,element,ele,bd,else,if,node,name,equals,ele,return,parse,map,element,ele,bd,else,if,node,name,equals,ele,return,parse,props,element,ele,else,error,unknown,property,sub,element,ele,get,node,name,ele,return,null
BeanDefinitionParserDelegate -> public Object parsePropertySubElement(Element ele, BeanDefinition bd, String defaultValueType);1467744603;Parse a value, ref or collection sub-element of a property or_constructor-arg element._@param ele subelement of property element_ we don't know which yet_@param defaultValueType the default type (class name) for any_{@code <value>} tag that might be created;public Object parsePropertySubElement(Element ele, BeanDefinition bd, String defaultValueType) {_		if (!isDefaultNamespace(ele)) {_			return parseNestedCustomElement(ele, bd)__		}_		else if (nodeNameEquals(ele, BEAN_ELEMENT)) {_			BeanDefinitionHolder nestedBd = parseBeanDefinitionElement(ele, bd)__			if (nestedBd != null) {_				nestedBd = decorateBeanDefinitionIfRequired(ele, nestedBd, bd)__			}_			return nestedBd__		}_		else if (nodeNameEquals(ele, REF_ELEMENT)) {_			_			String refName = ele.getAttribute(BEAN_REF_ATTRIBUTE)__			boolean toParent = false__			if (!StringUtils.hasLength(refName)) {_				_				refName = ele.getAttribute(PARENT_REF_ATTRIBUTE)__				toParent = true__				if (!StringUtils.hasLength(refName)) {_					error("'bean' or 'parent' is required for <ref> element", ele)__					return null__				}_			}_			if (!StringUtils.hasText(refName)) {_				error("<ref> element contains empty target attribute", ele)__				return null__			}_			RuntimeBeanReference ref = new RuntimeBeanReference(refName, toParent)__			ref.setSource(extractSource(ele))__			return ref__		}_		else if (nodeNameEquals(ele, IDREF_ELEMENT)) {_			return parseIdRefElement(ele)__		}_		else if (nodeNameEquals(ele, VALUE_ELEMENT)) {_			return parseValueElement(ele, defaultValueType)__		}_		else if (nodeNameEquals(ele, NULL_ELEMENT)) {_			_			_			TypedStringValue nullHolder = new TypedStringValue(null)__			nullHolder.setSource(extractSource(ele))__			return nullHolder__		}_		else if (nodeNameEquals(ele, ARRAY_ELEMENT)) {_			return parseArrayElement(ele, bd)__		}_		else if (nodeNameEquals(ele, LIST_ELEMENT)) {_			return parseListElement(ele, bd)__		}_		else if (nodeNameEquals(ele, SET_ELEMENT)) {_			return parseSetElement(ele, bd)__		}_		else if (nodeNameEquals(ele, MAP_ELEMENT)) {_			return parseMapElement(ele, bd)__		}_		else if (nodeNameEquals(ele, PROPS_ELEMENT)) {_			return parsePropsElement(ele)__		}_		else {_			error("Unknown property sub-element: [" + ele.getNodeName() + "]", ele)__			return null__		}_	};parse,a,value,ref,or,collection,sub,element,of,a,property,or,constructor,arg,element,param,ele,subelement,of,property,element,we,don,t,know,which,yet,param,default,value,type,the,default,type,class,name,for,any,code,value,tag,that,might,be,created;public,object,parse,property,sub,element,element,ele,bean,definition,bd,string,default,value,type,if,is,default,namespace,ele,return,parse,nested,custom,element,ele,bd,else,if,node,name,equals,ele,bean,definition,holder,nested,bd,parse,bean,definition,element,ele,bd,if,nested,bd,null,nested,bd,decorate,bean,definition,if,required,ele,nested,bd,bd,return,nested,bd,else,if,node,name,equals,ele,string,ref,name,ele,get,attribute,boolean,to,parent,false,if,string,utils,has,length,ref,name,ref,name,ele,get,attribute,to,parent,true,if,string,utils,has,length,ref,name,error,bean,or,parent,is,required,for,ref,element,ele,return,null,if,string,utils,has,text,ref,name,error,ref,element,contains,empty,target,attribute,ele,return,null,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,to,parent,ref,set,source,extract,source,ele,return,ref,else,if,node,name,equals,ele,return,parse,id,ref,element,ele,else,if,node,name,equals,ele,return,parse,value,element,ele,default,value,type,else,if,node,name,equals,ele,typed,string,value,null,holder,new,typed,string,value,null,null,holder,set,source,extract,source,ele,return,null,holder,else,if,node,name,equals,ele,return,parse,array,element,ele,bd,else,if,node,name,equals,ele,return,parse,list,element,ele,bd,else,if,node,name,equals,ele,return,parse,set,element,ele,bd,else,if,node,name,equals,ele,return,parse,map,element,ele,bd,else,if,node,name,equals,ele,return,parse,props,element,ele,else,error,unknown,property,sub,element,ele,get,node,name,ele,return,null
BeanDefinitionParserDelegate -> public Object parsePropertySubElement(Element ele, BeanDefinition bd, String defaultValueType);1487245676;Parse a value, ref or collection sub-element of a property or_constructor-arg element._@param ele subelement of property element_ we don't know which yet_@param defaultValueType the default type (class name) for any_{@code <value>} tag that might be created;public Object parsePropertySubElement(Element ele, BeanDefinition bd, String defaultValueType) {_		if (!isDefaultNamespace(ele)) {_			return parseNestedCustomElement(ele, bd)__		}_		else if (nodeNameEquals(ele, BEAN_ELEMENT)) {_			BeanDefinitionHolder nestedBd = parseBeanDefinitionElement(ele, bd)__			if (nestedBd != null) {_				nestedBd = decorateBeanDefinitionIfRequired(ele, nestedBd, bd)__			}_			return nestedBd__		}_		else if (nodeNameEquals(ele, REF_ELEMENT)) {_			_			String refName = ele.getAttribute(BEAN_REF_ATTRIBUTE)__			boolean toParent = false__			if (!StringUtils.hasLength(refName)) {_				_				refName = ele.getAttribute(PARENT_REF_ATTRIBUTE)__				toParent = true__				if (!StringUtils.hasLength(refName)) {_					error("'bean' or 'parent' is required for <ref> element", ele)__					return null__				}_			}_			if (!StringUtils.hasText(refName)) {_				error("<ref> element contains empty target attribute", ele)__				return null__			}_			RuntimeBeanReference ref = new RuntimeBeanReference(refName, toParent)__			ref.setSource(extractSource(ele))__			return ref__		}_		else if (nodeNameEquals(ele, IDREF_ELEMENT)) {_			return parseIdRefElement(ele)__		}_		else if (nodeNameEquals(ele, VALUE_ELEMENT)) {_			return parseValueElement(ele, defaultValueType)__		}_		else if (nodeNameEquals(ele, NULL_ELEMENT)) {_			_			_			TypedStringValue nullHolder = new TypedStringValue(null)__			nullHolder.setSource(extractSource(ele))__			return nullHolder__		}_		else if (nodeNameEquals(ele, ARRAY_ELEMENT)) {_			return parseArrayElement(ele, bd)__		}_		else if (nodeNameEquals(ele, LIST_ELEMENT)) {_			return parseListElement(ele, bd)__		}_		else if (nodeNameEquals(ele, SET_ELEMENT)) {_			return parseSetElement(ele, bd)__		}_		else if (nodeNameEquals(ele, MAP_ELEMENT)) {_			return parseMapElement(ele, bd)__		}_		else if (nodeNameEquals(ele, PROPS_ELEMENT)) {_			return parsePropsElement(ele)__		}_		else {_			error("Unknown property sub-element: [" + ele.getNodeName() + "]", ele)__			return null__		}_	};parse,a,value,ref,or,collection,sub,element,of,a,property,or,constructor,arg,element,param,ele,subelement,of,property,element,we,don,t,know,which,yet,param,default,value,type,the,default,type,class,name,for,any,code,value,tag,that,might,be,created;public,object,parse,property,sub,element,element,ele,bean,definition,bd,string,default,value,type,if,is,default,namespace,ele,return,parse,nested,custom,element,ele,bd,else,if,node,name,equals,ele,bean,definition,holder,nested,bd,parse,bean,definition,element,ele,bd,if,nested,bd,null,nested,bd,decorate,bean,definition,if,required,ele,nested,bd,bd,return,nested,bd,else,if,node,name,equals,ele,string,ref,name,ele,get,attribute,boolean,to,parent,false,if,string,utils,has,length,ref,name,ref,name,ele,get,attribute,to,parent,true,if,string,utils,has,length,ref,name,error,bean,or,parent,is,required,for,ref,element,ele,return,null,if,string,utils,has,text,ref,name,error,ref,element,contains,empty,target,attribute,ele,return,null,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,to,parent,ref,set,source,extract,source,ele,return,ref,else,if,node,name,equals,ele,return,parse,id,ref,element,ele,else,if,node,name,equals,ele,return,parse,value,element,ele,default,value,type,else,if,node,name,equals,ele,typed,string,value,null,holder,new,typed,string,value,null,null,holder,set,source,extract,source,ele,return,null,holder,else,if,node,name,equals,ele,return,parse,array,element,ele,bd,else,if,node,name,equals,ele,return,parse,list,element,ele,bd,else,if,node,name,equals,ele,return,parse,set,element,ele,bd,else,if,node,name,equals,ele,return,parse,map,element,ele,bd,else,if,node,name,equals,ele,return,parse,props,element,ele,else,error,unknown,property,sub,element,ele,get,node,name,ele,return,null
BeanDefinitionParserDelegate -> public Object parsePropertySubElement(Element ele, BeanDefinition bd, String defaultValueType);1487255851;Parse a value, ref or collection sub-element of a property or_constructor-arg element._@param ele subelement of property element_ we don't know which yet_@param defaultValueType the default type (class name) for any_{@code <value>} tag that might be created;public Object parsePropertySubElement(Element ele, BeanDefinition bd, String defaultValueType) {_		if (!isDefaultNamespace(ele)) {_			return parseNestedCustomElement(ele, bd)__		}_		else if (nodeNameEquals(ele, BEAN_ELEMENT)) {_			BeanDefinitionHolder nestedBd = parseBeanDefinitionElement(ele, bd)__			if (nestedBd != null) {_				nestedBd = decorateBeanDefinitionIfRequired(ele, nestedBd, bd)__			}_			return nestedBd__		}_		else if (nodeNameEquals(ele, REF_ELEMENT)) {_			_			String refName = ele.getAttribute(BEAN_REF_ATTRIBUTE)__			boolean toParent = false__			if (!StringUtils.hasLength(refName)) {_				_				refName = ele.getAttribute(PARENT_REF_ATTRIBUTE)__				toParent = true__				if (!StringUtils.hasLength(refName)) {_					error("'bean' or 'parent' is required for <ref> element", ele)__					return null__				}_			}_			if (!StringUtils.hasText(refName)) {_				error("<ref> element contains empty target attribute", ele)__				return null__			}_			RuntimeBeanReference ref = new RuntimeBeanReference(refName, toParent)__			ref.setSource(extractSource(ele))__			return ref__		}_		else if (nodeNameEquals(ele, IDREF_ELEMENT)) {_			return parseIdRefElement(ele)__		}_		else if (nodeNameEquals(ele, VALUE_ELEMENT)) {_			return parseValueElement(ele, defaultValueType)__		}_		else if (nodeNameEquals(ele, NULL_ELEMENT)) {_			_			_			TypedStringValue nullHolder = new TypedStringValue(null)__			nullHolder.setSource(extractSource(ele))__			return nullHolder__		}_		else if (nodeNameEquals(ele, ARRAY_ELEMENT)) {_			return parseArrayElement(ele, bd)__		}_		else if (nodeNameEquals(ele, LIST_ELEMENT)) {_			return parseListElement(ele, bd)__		}_		else if (nodeNameEquals(ele, SET_ELEMENT)) {_			return parseSetElement(ele, bd)__		}_		else if (nodeNameEquals(ele, MAP_ELEMENT)) {_			return parseMapElement(ele, bd)__		}_		else if (nodeNameEquals(ele, PROPS_ELEMENT)) {_			return parsePropsElement(ele)__		}_		else {_			error("Unknown property sub-element: [" + ele.getNodeName() + "]", ele)__			return null__		}_	};parse,a,value,ref,or,collection,sub,element,of,a,property,or,constructor,arg,element,param,ele,subelement,of,property,element,we,don,t,know,which,yet,param,default,value,type,the,default,type,class,name,for,any,code,value,tag,that,might,be,created;public,object,parse,property,sub,element,element,ele,bean,definition,bd,string,default,value,type,if,is,default,namespace,ele,return,parse,nested,custom,element,ele,bd,else,if,node,name,equals,ele,bean,definition,holder,nested,bd,parse,bean,definition,element,ele,bd,if,nested,bd,null,nested,bd,decorate,bean,definition,if,required,ele,nested,bd,bd,return,nested,bd,else,if,node,name,equals,ele,string,ref,name,ele,get,attribute,boolean,to,parent,false,if,string,utils,has,length,ref,name,ref,name,ele,get,attribute,to,parent,true,if,string,utils,has,length,ref,name,error,bean,or,parent,is,required,for,ref,element,ele,return,null,if,string,utils,has,text,ref,name,error,ref,element,contains,empty,target,attribute,ele,return,null,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,to,parent,ref,set,source,extract,source,ele,return,ref,else,if,node,name,equals,ele,return,parse,id,ref,element,ele,else,if,node,name,equals,ele,return,parse,value,element,ele,default,value,type,else,if,node,name,equals,ele,typed,string,value,null,holder,new,typed,string,value,null,null,holder,set,source,extract,source,ele,return,null,holder,else,if,node,name,equals,ele,return,parse,array,element,ele,bd,else,if,node,name,equals,ele,return,parse,list,element,ele,bd,else,if,node,name,equals,ele,return,parse,set,element,ele,bd,else,if,node,name,equals,ele,return,parse,map,element,ele,bd,else,if,node,name,equals,ele,return,parse,props,element,ele,else,error,unknown,property,sub,element,ele,get,node,name,ele,return,null
BeanDefinitionParserDelegate -> public Object parsePropertySubElement(Element ele, BeanDefinition bd, String defaultValueType);1494586217;Parse a value, ref or collection sub-element of a property or_constructor-arg element._@param ele subelement of property element_ we don't know which yet_@param defaultValueType the default type (class name) for any_{@code <value>} tag that might be created;public Object parsePropertySubElement(Element ele, BeanDefinition bd, String defaultValueType) {_		if (!isDefaultNamespace(ele)) {_			return parseNestedCustomElement(ele, bd)__		}_		else if (nodeNameEquals(ele, BEAN_ELEMENT)) {_			BeanDefinitionHolder nestedBd = parseBeanDefinitionElement(ele, bd)__			if (nestedBd != null) {_				nestedBd = decorateBeanDefinitionIfRequired(ele, nestedBd, bd)__			}_			return nestedBd__		}_		else if (nodeNameEquals(ele, REF_ELEMENT)) {_			_			String refName = ele.getAttribute(BEAN_REF_ATTRIBUTE)__			boolean toParent = false__			if (!StringUtils.hasLength(refName)) {_				_				refName = ele.getAttribute(PARENT_REF_ATTRIBUTE)__				toParent = true__				if (!StringUtils.hasLength(refName)) {_					error("'bean' or 'parent' is required for <ref> element", ele)__					return null__				}_			}_			if (!StringUtils.hasText(refName)) {_				error("<ref> element contains empty target attribute", ele)__				return null__			}_			RuntimeBeanReference ref = new RuntimeBeanReference(refName, toParent)__			ref.setSource(extractSource(ele))__			return ref__		}_		else if (nodeNameEquals(ele, IDREF_ELEMENT)) {_			return parseIdRefElement(ele)__		}_		else if (nodeNameEquals(ele, VALUE_ELEMENT)) {_			return parseValueElement(ele, defaultValueType)__		}_		else if (nodeNameEquals(ele, NULL_ELEMENT)) {_			_			_			TypedStringValue nullHolder = new TypedStringValue(null)__			nullHolder.setSource(extractSource(ele))__			return nullHolder__		}_		else if (nodeNameEquals(ele, ARRAY_ELEMENT)) {_			return parseArrayElement(ele, bd)__		}_		else if (nodeNameEquals(ele, LIST_ELEMENT)) {_			return parseListElement(ele, bd)__		}_		else if (nodeNameEquals(ele, SET_ELEMENT)) {_			return parseSetElement(ele, bd)__		}_		else if (nodeNameEquals(ele, MAP_ELEMENT)) {_			return parseMapElement(ele, bd)__		}_		else if (nodeNameEquals(ele, PROPS_ELEMENT)) {_			return parsePropsElement(ele)__		}_		else {_			error("Unknown property sub-element: [" + ele.getNodeName() + "]", ele)__			return null__		}_	};parse,a,value,ref,or,collection,sub,element,of,a,property,or,constructor,arg,element,param,ele,subelement,of,property,element,we,don,t,know,which,yet,param,default,value,type,the,default,type,class,name,for,any,code,value,tag,that,might,be,created;public,object,parse,property,sub,element,element,ele,bean,definition,bd,string,default,value,type,if,is,default,namespace,ele,return,parse,nested,custom,element,ele,bd,else,if,node,name,equals,ele,bean,definition,holder,nested,bd,parse,bean,definition,element,ele,bd,if,nested,bd,null,nested,bd,decorate,bean,definition,if,required,ele,nested,bd,bd,return,nested,bd,else,if,node,name,equals,ele,string,ref,name,ele,get,attribute,boolean,to,parent,false,if,string,utils,has,length,ref,name,ref,name,ele,get,attribute,to,parent,true,if,string,utils,has,length,ref,name,error,bean,or,parent,is,required,for,ref,element,ele,return,null,if,string,utils,has,text,ref,name,error,ref,element,contains,empty,target,attribute,ele,return,null,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,to,parent,ref,set,source,extract,source,ele,return,ref,else,if,node,name,equals,ele,return,parse,id,ref,element,ele,else,if,node,name,equals,ele,return,parse,value,element,ele,default,value,type,else,if,node,name,equals,ele,typed,string,value,null,holder,new,typed,string,value,null,null,holder,set,source,extract,source,ele,return,null,holder,else,if,node,name,equals,ele,return,parse,array,element,ele,bd,else,if,node,name,equals,ele,return,parse,list,element,ele,bd,else,if,node,name,equals,ele,return,parse,set,element,ele,bd,else,if,node,name,equals,ele,return,parse,map,element,ele,bd,else,if,node,name,equals,ele,return,parse,props,element,ele,else,error,unknown,property,sub,element,ele,get,node,name,ele,return,null
BeanDefinitionParserDelegate -> protected void error(String message, Element source, Throwable cause);1328020251;Report an error with the given message for the given source element.;protected void error(String message, Element source, Throwable cause) {_		this.readerContext.error(message, source, this.parseState.snapshot(), cause)__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,element,source,throwable,cause,this,reader,context,error,message,source,this,parse,state,snapshot,cause
BeanDefinitionParserDelegate -> protected void error(String message, Element source, Throwable cause);1335774711;Report an error with the given message for the given source element.;protected void error(String message, Element source, Throwable cause) {_		this.readerContext.error(message, source, this.parseState.snapshot(), cause)__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,element,source,throwable,cause,this,reader,context,error,message,source,this,parse,state,snapshot,cause
BeanDefinitionParserDelegate -> protected void error(String message, Element source, Throwable cause);1337341719;Report an error with the given message for the given source element.;protected void error(String message, Element source, Throwable cause) {_		this.readerContext.error(message, source, this.parseState.snapshot(), cause)__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,element,source,throwable,cause,this,reader,context,error,message,source,this,parse,state,snapshot,cause
BeanDefinitionParserDelegate -> protected void error(String message, Element source, Throwable cause);1351392612;Report an error with the given message for the given source element.;protected void error(String message, Element source, Throwable cause) {_		this.readerContext.error(message, source, this.parseState.snapshot(), cause)__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,element,source,throwable,cause,this,reader,context,error,message,source,this,parse,state,snapshot,cause
BeanDefinitionParserDelegate -> protected void error(String message, Element source, Throwable cause);1351696936;Report an error with the given message for the given source element.;protected void error(String message, Element source, Throwable cause) {_		this.readerContext.error(message, source, this.parseState.snapshot(), cause)__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,element,source,throwable,cause,this,reader,context,error,message,source,this,parse,state,snapshot,cause
BeanDefinitionParserDelegate -> protected void error(String message, Element source, Throwable cause);1356735495;Report an error with the given message for the given source element.;protected void error(String message, Element source, Throwable cause) {_		this.readerContext.error(message, source, this.parseState.snapshot(), cause)__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,element,source,throwable,cause,this,reader,context,error,message,source,this,parse,state,snapshot,cause
BeanDefinitionParserDelegate -> protected void error(String message, Element source, Throwable cause);1357119417;Report an error with the given message for the given source element.;protected void error(String message, Element source, Throwable cause) {_		this.readerContext.error(message, source, this.parseState.snapshot(), cause)__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,element,source,throwable,cause,this,reader,context,error,message,source,this,parse,state,snapshot,cause
BeanDefinitionParserDelegate -> protected void error(String message, Element source, Throwable cause);1367943112;Report an error with the given message for the given source element.;protected void error(String message, Element source, Throwable cause) {_		this.readerContext.error(message, source, this.parseState.snapshot(), cause)__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,element,source,throwable,cause,this,reader,context,error,message,source,this,parse,state,snapshot,cause
BeanDefinitionParserDelegate -> protected void error(String message, Element source, Throwable cause);1382030648;Report an error with the given message for the given source element.;protected void error(String message, Element source, Throwable cause) {_		this.readerContext.error(message, source, this.parseState.snapshot(), cause)__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,element,source,throwable,cause,this,reader,context,error,message,source,this,parse,state,snapshot,cause
BeanDefinitionParserDelegate -> protected void error(String message, Element source, Throwable cause);1385412762;Report an error with the given message for the given source element.;protected void error(String message, Element source, Throwable cause) {_		this.readerContext.error(message, source, this.parseState.snapshot(), cause)__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,element,source,throwable,cause,this,reader,context,error,message,source,this,parse,state,snapshot,cause
BeanDefinitionParserDelegate -> protected void error(String message, Element source, Throwable cause);1410953197;Report an error with the given message for the given source element.;protected void error(String message, Element source, Throwable cause) {_		this.readerContext.error(message, source, this.parseState.snapshot(), cause)__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,element,source,throwable,cause,this,reader,context,error,message,source,this,parse,state,snapshot,cause
BeanDefinitionParserDelegate -> protected void error(String message, Element source, Throwable cause);1411599760;Report an error with the given message for the given source element.;protected void error(String message, Element source, Throwable cause) {_		this.readerContext.error(message, source, this.parseState.snapshot(), cause)__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,element,source,throwable,cause,this,reader,context,error,message,source,this,parse,state,snapshot,cause
BeanDefinitionParserDelegate -> protected void error(String message, Element source, Throwable cause);1419966315;Report an error with the given message for the given source element.;protected void error(String message, Element source, Throwable cause) {_		this.readerContext.error(message, source, this.parseState.snapshot(), cause)__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,element,source,throwable,cause,this,reader,context,error,message,source,this,parse,state,snapshot,cause
BeanDefinitionParserDelegate -> protected void error(String message, Element source, Throwable cause);1431958785;Report an error with the given message for the given source element.;protected void error(String message, Element source, Throwable cause) {_		this.readerContext.error(message, source, this.parseState.snapshot(), cause)__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,element,source,throwable,cause,this,reader,context,error,message,source,this,parse,state,snapshot,cause
BeanDefinitionParserDelegate -> protected void error(String message, Element source, Throwable cause);1432135182;Report an error with the given message for the given source element.;protected void error(String message, Element source, Throwable cause) {_		this.readerContext.error(message, source, this.parseState.snapshot(), cause)__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,element,source,throwable,cause,this,reader,context,error,message,source,this,parse,state,snapshot,cause
BeanDefinitionParserDelegate -> protected void error(String message, Element source, Throwable cause);1447323728;Report an error with the given message for the given source element.;protected void error(String message, Element source, Throwable cause) {_		this.readerContext.error(message, source, this.parseState.snapshot(), cause)__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,element,source,throwable,cause,this,reader,context,error,message,source,this,parse,state,snapshot,cause
BeanDefinitionParserDelegate -> protected void error(String message, Element source, Throwable cause);1467726769;Report an error with the given message for the given source element.;protected void error(String message, Element source, Throwable cause) {_		this.readerContext.error(message, source, this.parseState.snapshot(), cause)__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,element,source,throwable,cause,this,reader,context,error,message,source,this,parse,state,snapshot,cause
BeanDefinitionParserDelegate -> protected void error(String message, Element source, Throwable cause);1467730834;Report an error with the given message for the given source element.;protected void error(String message, Element source, Throwable cause) {_		this.readerContext.error(message, source, this.parseState.snapshot(), cause)__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,element,source,throwable,cause,this,reader,context,error,message,source,this,parse,state,snapshot,cause
BeanDefinitionParserDelegate -> protected void error(String message, Element source, Throwable cause);1467744603;Report an error with the given message for the given source element.;protected void error(String message, Element source, Throwable cause) {_		this.readerContext.error(message, source, this.parseState.snapshot(), cause)__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,element,source,throwable,cause,this,reader,context,error,message,source,this,parse,state,snapshot,cause
BeanDefinitionParserDelegate -> protected void error(String message, Element source, Throwable cause);1487245676;Report an error with the given message for the given source element.;protected void error(String message, Element source, Throwable cause) {_		this.readerContext.error(message, source, this.parseState.snapshot(), cause)__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,element,source,throwable,cause,this,reader,context,error,message,source,this,parse,state,snapshot,cause
BeanDefinitionParserDelegate -> protected void error(String message, Element source, Throwable cause);1487255851;Report an error with the given message for the given source element.;protected void error(String message, Element source, Throwable cause) {_		this.readerContext.error(message, source, this.parseState.snapshot(), cause)__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,element,source,throwable,cause,this,reader,context,error,message,source,this,parse,state,snapshot,cause
BeanDefinitionParserDelegate -> protected void error(String message, Element source, Throwable cause);1494586217;Report an error with the given message for the given source element.;protected void error(String message, Element source, Throwable cause) {_		this.readerContext.error(message, source, this.parseState.snapshot(), cause)__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,element,source,throwable,cause,this,reader,context,error,message,source,this,parse,state,snapshot,cause
BeanDefinitionParserDelegate -> protected void error(String message, Element source, Throwable cause);1495868221;Report an error with the given message for the given source element.;protected void error(String message, Element source, Throwable cause) {_		this.readerContext.error(message, source, this.parseState.snapshot(), cause)__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,element,source,throwable,cause,this,reader,context,error,message,source,this,parse,state,snapshot,cause
BeanDefinitionParserDelegate -> protected void error(String message, Element source, Throwable cause);1496259743;Report an error with the given message for the given source element.;protected void error(String message, Element source, Throwable cause) {_		this.readerContext.error(message, source, this.parseState.snapshot(), cause)__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,element,source,throwable,cause,this,reader,context,error,message,source,this,parse,state,snapshot,cause
BeanDefinitionParserDelegate -> protected void error(String message, Element source, Throwable cause);1496837955;Report an error with the given message for the given source element.;protected void error(String message, Element source, Throwable cause) {_		this.readerContext.error(message, source, this.parseState.snapshot(), cause)__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,element,source,throwable,cause,this,reader,context,error,message,source,this,parse,state,snapshot,cause
BeanDefinitionParserDelegate -> protected void error(String message, Element source, Throwable cause);1503008029;Report an error with the given message for the given source element.;protected void error(String message, Element source, Throwable cause) {_		this.readerContext.error(message, source, this.parseState.snapshot(), cause)__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,element,source,throwable,cause,this,reader,context,error,message,source,this,parse,state,snapshot,cause
BeanDefinitionParserDelegate -> protected void error(String message, Element source, Throwable cause);1519513303;Report an error with the given message for the given source element.;protected void error(String message, Element source, Throwable cause) {_		this.readerContext.error(message, source, this.parseState.snapshot(), cause)__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,element,source,throwable,cause,this,reader,context,error,message,source,this,parse,state,snapshot,cause
BeanDefinitionParserDelegate -> protected void error(String message, Element source, Throwable cause);1530174524;Report an error with the given message for the given source element.;protected void error(String message, Element source, Throwable cause) {_		this.readerContext.error(message, source, this.parseState.snapshot(), cause)__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,element,source,throwable,cause,this,reader,context,error,message,source,this,parse,state,snapshot,cause
BeanDefinitionParserDelegate -> protected void error(String message, Element source, Throwable cause);1530190293;Report an error with the given message for the given source element.;protected void error(String message, Element source, Throwable cause) {_		this.readerContext.error(message, source, this.parseState.snapshot(), cause)__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,element,source,throwable,cause,this,reader,context,error,message,source,this,parse,state,snapshot,cause
BeanDefinitionParserDelegate -> protected void error(String message, Element source, Throwable cause);1532706365;Report an error with the given message for the given source element.;protected void error(String message, Element source, Throwable cause) {_		this.readerContext.error(message, source, this.parseState.snapshot(), cause)__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,element,source,throwable,cause,this,reader,context,error,message,source,this,parse,state,snapshot,cause
BeanDefinitionParserDelegate -> protected void error(String message, Element source, Throwable cause);1546958161;Report an error with the given message for the given source element.;protected void error(String message, Element source, Throwable cause) {_		this.readerContext.error(message, source, this.parseState.snapshot(), cause)__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,element,source,throwable,cause,this,reader,context,error,message,source,this,parse,state,snapshot,cause
BeanDefinitionParserDelegate -> public BeanDefinitionHolder parseBeanDefinitionElement(Element ele, BeanDefinition containingBean);1328020251;Parses the supplied <code>&lt_bean&gt_</code> element. May return <code>null</code>_if there were errors during parse. Errors are reported to the_{@link org.springframework.beans.factory.parsing.ProblemReporter}.;public BeanDefinitionHolder parseBeanDefinitionElement(Element ele, BeanDefinition containingBean) {_		String id = ele.getAttribute(ID_ATTRIBUTE)__		String nameAttr = ele.getAttribute(NAME_ATTRIBUTE)___		List<String> aliases = new ArrayList<String>()__		if (StringUtils.hasLength(nameAttr)) {_			String[] nameArr = StringUtils.tokenizeToStringArray(nameAttr, MULTI_VALUE_ATTRIBUTE_DELIMITERS)__			aliases.addAll(Arrays.asList(nameArr))__		}__		String beanName = id__		if (!StringUtils.hasText(beanName) && !aliases.isEmpty()) {_			beanName = aliases.remove(0)__			if (logger.isDebugEnabled()) {_				logger.debug("No XML 'id' specified - using '" + beanName +_						"' as bean name and " + aliases + " as aliases")__			}_		}__		if (containingBean == null) {_			checkNameUniqueness(beanName, aliases, ele)__		}__		AbstractBeanDefinition beanDefinition = parseBeanDefinitionElement(ele, beanName, containingBean)__		if (beanDefinition != null) {_			if (!StringUtils.hasText(beanName)) {_				try {_					if (containingBean != null) {_						beanName = BeanDefinitionReaderUtils.generateBeanName(_								beanDefinition, this.readerContext.getRegistry(), true)__					}_					else {_						beanName = this.readerContext.generateBeanName(beanDefinition)__						_						_						_						String beanClassName = beanDefinition.getBeanClassName()__						if (beanClassName != null &&_								beanName.startsWith(beanClassName) && beanName.length() > beanClassName.length() &&_								!this.readerContext.getRegistry().isBeanNameInUse(beanClassName)) {_							aliases.add(beanClassName)__						}_					}_					if (logger.isDebugEnabled()) {_						logger.debug("Neither XML 'id' nor 'name' specified - " +_								"using generated bean name [" + beanName + "]")__					}_				}_				catch (Exception ex) {_					error(ex.getMessage(), ele)__					return null__				}_			}_			String[] aliasesArray = StringUtils.toStringArray(aliases)__			return new BeanDefinitionHolder(beanDefinition, beanName, aliasesArray)__		}__		return null__	};parses,the,supplied,code,lt,bean,gt,code,element,may,return,code,null,code,if,there,were,errors,during,parse,errors,are,reported,to,the,link,org,springframework,beans,factory,parsing,problem,reporter;public,bean,definition,holder,parse,bean,definition,element,element,ele,bean,definition,containing,bean,string,id,ele,get,attribute,string,name,attr,ele,get,attribute,list,string,aliases,new,array,list,string,if,string,utils,has,length,name,attr,string,name,arr,string,utils,tokenize,to,string,array,name,attr,aliases,add,all,arrays,as,list,name,arr,string,bean,name,id,if,string,utils,has,text,bean,name,aliases,is,empty,bean,name,aliases,remove,0,if,logger,is,debug,enabled,logger,debug,no,xml,id,specified,using,bean,name,as,bean,name,and,aliases,as,aliases,if,containing,bean,null,check,name,uniqueness,bean,name,aliases,ele,abstract,bean,definition,bean,definition,parse,bean,definition,element,ele,bean,name,containing,bean,if,bean,definition,null,if,string,utils,has,text,bean,name,try,if,containing,bean,null,bean,name,bean,definition,reader,utils,generate,bean,name,bean,definition,this,reader,context,get,registry,true,else,bean,name,this,reader,context,generate,bean,name,bean,definition,string,bean,class,name,bean,definition,get,bean,class,name,if,bean,class,name,null,bean,name,starts,with,bean,class,name,bean,name,length,bean,class,name,length,this,reader,context,get,registry,is,bean,name,in,use,bean,class,name,aliases,add,bean,class,name,if,logger,is,debug,enabled,logger,debug,neither,xml,id,nor,name,specified,using,generated,bean,name,bean,name,catch,exception,ex,error,ex,get,message,ele,return,null,string,aliases,array,string,utils,to,string,array,aliases,return,new,bean,definition,holder,bean,definition,bean,name,aliases,array,return,null
BeanDefinitionParserDelegate -> public BeanDefinitionHolder parseBeanDefinitionElement(Element ele, BeanDefinition containingBean);1335774711;Parses the supplied <code>&lt_bean&gt_</code> element. May return <code>null</code>_if there were errors during parse. Errors are reported to the_{@link org.springframework.beans.factory.parsing.ProblemReporter}.;public BeanDefinitionHolder parseBeanDefinitionElement(Element ele, BeanDefinition containingBean) {_		String id = ele.getAttribute(ID_ATTRIBUTE)__		String nameAttr = ele.getAttribute(NAME_ATTRIBUTE)___		List<String> aliases = new ArrayList<String>()__		if (StringUtils.hasLength(nameAttr)) {_			String[] nameArr = StringUtils.tokenizeToStringArray(nameAttr, MULTI_VALUE_ATTRIBUTE_DELIMITERS)__			aliases.addAll(Arrays.asList(nameArr))__		}__		String beanName = id__		if (!StringUtils.hasText(beanName) && !aliases.isEmpty()) {_			beanName = aliases.remove(0)__			if (logger.isDebugEnabled()) {_				logger.debug("No XML 'id' specified - using '" + beanName +_						"' as bean name and " + aliases + " as aliases")__			}_		}__		if (containingBean == null) {_			checkNameUniqueness(beanName, aliases, ele)__		}__		AbstractBeanDefinition beanDefinition = parseBeanDefinitionElement(ele, beanName, containingBean)__		if (beanDefinition != null) {_			if (!StringUtils.hasText(beanName)) {_				try {_					if (containingBean != null) {_						beanName = BeanDefinitionReaderUtils.generateBeanName(_								beanDefinition, this.readerContext.getRegistry(), true)__					}_					else {_						beanName = this.readerContext.generateBeanName(beanDefinition)__						_						_						_						String beanClassName = beanDefinition.getBeanClassName()__						if (beanClassName != null &&_								beanName.startsWith(beanClassName) && beanName.length() > beanClassName.length() &&_								!this.readerContext.getRegistry().isBeanNameInUse(beanClassName)) {_							aliases.add(beanClassName)__						}_					}_					if (logger.isDebugEnabled()) {_						logger.debug("Neither XML 'id' nor 'name' specified - " +_								"using generated bean name [" + beanName + "]")__					}_				}_				catch (Exception ex) {_					error(ex.getMessage(), ele)__					return null__				}_			}_			String[] aliasesArray = StringUtils.toStringArray(aliases)__			return new BeanDefinitionHolder(beanDefinition, beanName, aliasesArray)__		}__		return null__	};parses,the,supplied,code,lt,bean,gt,code,element,may,return,code,null,code,if,there,were,errors,during,parse,errors,are,reported,to,the,link,org,springframework,beans,factory,parsing,problem,reporter;public,bean,definition,holder,parse,bean,definition,element,element,ele,bean,definition,containing,bean,string,id,ele,get,attribute,string,name,attr,ele,get,attribute,list,string,aliases,new,array,list,string,if,string,utils,has,length,name,attr,string,name,arr,string,utils,tokenize,to,string,array,name,attr,aliases,add,all,arrays,as,list,name,arr,string,bean,name,id,if,string,utils,has,text,bean,name,aliases,is,empty,bean,name,aliases,remove,0,if,logger,is,debug,enabled,logger,debug,no,xml,id,specified,using,bean,name,as,bean,name,and,aliases,as,aliases,if,containing,bean,null,check,name,uniqueness,bean,name,aliases,ele,abstract,bean,definition,bean,definition,parse,bean,definition,element,ele,bean,name,containing,bean,if,bean,definition,null,if,string,utils,has,text,bean,name,try,if,containing,bean,null,bean,name,bean,definition,reader,utils,generate,bean,name,bean,definition,this,reader,context,get,registry,true,else,bean,name,this,reader,context,generate,bean,name,bean,definition,string,bean,class,name,bean,definition,get,bean,class,name,if,bean,class,name,null,bean,name,starts,with,bean,class,name,bean,name,length,bean,class,name,length,this,reader,context,get,registry,is,bean,name,in,use,bean,class,name,aliases,add,bean,class,name,if,logger,is,debug,enabled,logger,debug,neither,xml,id,nor,name,specified,using,generated,bean,name,bean,name,catch,exception,ex,error,ex,get,message,ele,return,null,string,aliases,array,string,utils,to,string,array,aliases,return,new,bean,definition,holder,bean,definition,bean,name,aliases,array,return,null
BeanDefinitionParserDelegate -> public BeanDefinitionHolder parseBeanDefinitionElement(Element ele, BeanDefinition containingBean);1337341719;Parses the supplied <code>&lt_bean&gt_</code> element. May return <code>null</code>_if there were errors during parse. Errors are reported to the_{@link org.springframework.beans.factory.parsing.ProblemReporter}.;public BeanDefinitionHolder parseBeanDefinitionElement(Element ele, BeanDefinition containingBean) {_		String id = ele.getAttribute(ID_ATTRIBUTE)__		String nameAttr = ele.getAttribute(NAME_ATTRIBUTE)___		List<String> aliases = new ArrayList<String>()__		if (StringUtils.hasLength(nameAttr)) {_			String[] nameArr = StringUtils.tokenizeToStringArray(nameAttr, MULTI_VALUE_ATTRIBUTE_DELIMITERS)__			aliases.addAll(Arrays.asList(nameArr))__		}__		String beanName = id__		if (!StringUtils.hasText(beanName) && !aliases.isEmpty()) {_			beanName = aliases.remove(0)__			if (logger.isDebugEnabled()) {_				logger.debug("No XML 'id' specified - using '" + beanName +_						"' as bean name and " + aliases + " as aliases")__			}_		}__		if (containingBean == null) {_			checkNameUniqueness(beanName, aliases, ele)__		}__		AbstractBeanDefinition beanDefinition = parseBeanDefinitionElement(ele, beanName, containingBean)__		if (beanDefinition != null) {_			if (!StringUtils.hasText(beanName)) {_				try {_					if (containingBean != null) {_						beanName = BeanDefinitionReaderUtils.generateBeanName(_								beanDefinition, this.readerContext.getRegistry(), true)__					}_					else {_						beanName = this.readerContext.generateBeanName(beanDefinition)__						_						_						_						String beanClassName = beanDefinition.getBeanClassName()__						if (beanClassName != null &&_								beanName.startsWith(beanClassName) && beanName.length() > beanClassName.length() &&_								!this.readerContext.getRegistry().isBeanNameInUse(beanClassName)) {_							aliases.add(beanClassName)__						}_					}_					if (logger.isDebugEnabled()) {_						logger.debug("Neither XML 'id' nor 'name' specified - " +_								"using generated bean name [" + beanName + "]")__					}_				}_				catch (Exception ex) {_					error(ex.getMessage(), ele)__					return null__				}_			}_			String[] aliasesArray = StringUtils.toStringArray(aliases)__			return new BeanDefinitionHolder(beanDefinition, beanName, aliasesArray)__		}__		return null__	};parses,the,supplied,code,lt,bean,gt,code,element,may,return,code,null,code,if,there,were,errors,during,parse,errors,are,reported,to,the,link,org,springframework,beans,factory,parsing,problem,reporter;public,bean,definition,holder,parse,bean,definition,element,element,ele,bean,definition,containing,bean,string,id,ele,get,attribute,string,name,attr,ele,get,attribute,list,string,aliases,new,array,list,string,if,string,utils,has,length,name,attr,string,name,arr,string,utils,tokenize,to,string,array,name,attr,aliases,add,all,arrays,as,list,name,arr,string,bean,name,id,if,string,utils,has,text,bean,name,aliases,is,empty,bean,name,aliases,remove,0,if,logger,is,debug,enabled,logger,debug,no,xml,id,specified,using,bean,name,as,bean,name,and,aliases,as,aliases,if,containing,bean,null,check,name,uniqueness,bean,name,aliases,ele,abstract,bean,definition,bean,definition,parse,bean,definition,element,ele,bean,name,containing,bean,if,bean,definition,null,if,string,utils,has,text,bean,name,try,if,containing,bean,null,bean,name,bean,definition,reader,utils,generate,bean,name,bean,definition,this,reader,context,get,registry,true,else,bean,name,this,reader,context,generate,bean,name,bean,definition,string,bean,class,name,bean,definition,get,bean,class,name,if,bean,class,name,null,bean,name,starts,with,bean,class,name,bean,name,length,bean,class,name,length,this,reader,context,get,registry,is,bean,name,in,use,bean,class,name,aliases,add,bean,class,name,if,logger,is,debug,enabled,logger,debug,neither,xml,id,nor,name,specified,using,generated,bean,name,bean,name,catch,exception,ex,error,ex,get,message,ele,return,null,string,aliases,array,string,utils,to,string,array,aliases,return,new,bean,definition,holder,bean,definition,bean,name,aliases,array,return,null
BeanDefinitionParserDelegate -> public BeanDefinitionHolder parseBeanDefinitionElement(Element ele, BeanDefinition containingBean);1351392612;Parses the supplied <code>&lt_bean&gt_</code> element. May return <code>null</code>_if there were errors during parse. Errors are reported to the_{@link org.springframework.beans.factory.parsing.ProblemReporter}.;public BeanDefinitionHolder parseBeanDefinitionElement(Element ele, BeanDefinition containingBean) {_		String id = ele.getAttribute(ID_ATTRIBUTE)__		String nameAttr = ele.getAttribute(NAME_ATTRIBUTE)___		List<String> aliases = new ArrayList<String>()__		if (StringUtils.hasLength(nameAttr)) {_			String[] nameArr = StringUtils.tokenizeToStringArray(nameAttr, MULTI_VALUE_ATTRIBUTE_DELIMITERS)__			aliases.addAll(Arrays.asList(nameArr))__		}__		String beanName = id__		if (!StringUtils.hasText(beanName) && !aliases.isEmpty()) {_			beanName = aliases.remove(0)__			if (logger.isDebugEnabled()) {_				logger.debug("No XML 'id' specified - using '" + beanName +_						"' as bean name and " + aliases + " as aliases")__			}_		}__		if (containingBean == null) {_			checkNameUniqueness(beanName, aliases, ele)__		}__		AbstractBeanDefinition beanDefinition = parseBeanDefinitionElement(ele, beanName, containingBean)__		if (beanDefinition != null) {_			if (!StringUtils.hasText(beanName)) {_				try {_					if (containingBean != null) {_						beanName = BeanDefinitionReaderUtils.generateBeanName(_								beanDefinition, this.readerContext.getRegistry(), true)__					}_					else {_						beanName = this.readerContext.generateBeanName(beanDefinition)__						_						_						_						String beanClassName = beanDefinition.getBeanClassName()__						if (beanClassName != null &&_								beanName.startsWith(beanClassName) && beanName.length() > beanClassName.length() &&_								!this.readerContext.getRegistry().isBeanNameInUse(beanClassName)) {_							aliases.add(beanClassName)__						}_					}_					if (logger.isDebugEnabled()) {_						logger.debug("Neither XML 'id' nor 'name' specified - " +_								"using generated bean name [" + beanName + "]")__					}_				}_				catch (Exception ex) {_					error(ex.getMessage(), ele)__					return null__				}_			}_			String[] aliasesArray = StringUtils.toStringArray(aliases)__			return new BeanDefinitionHolder(beanDefinition, beanName, aliasesArray)__		}__		return null__	};parses,the,supplied,code,lt,bean,gt,code,element,may,return,code,null,code,if,there,were,errors,during,parse,errors,are,reported,to,the,link,org,springframework,beans,factory,parsing,problem,reporter;public,bean,definition,holder,parse,bean,definition,element,element,ele,bean,definition,containing,bean,string,id,ele,get,attribute,string,name,attr,ele,get,attribute,list,string,aliases,new,array,list,string,if,string,utils,has,length,name,attr,string,name,arr,string,utils,tokenize,to,string,array,name,attr,aliases,add,all,arrays,as,list,name,arr,string,bean,name,id,if,string,utils,has,text,bean,name,aliases,is,empty,bean,name,aliases,remove,0,if,logger,is,debug,enabled,logger,debug,no,xml,id,specified,using,bean,name,as,bean,name,and,aliases,as,aliases,if,containing,bean,null,check,name,uniqueness,bean,name,aliases,ele,abstract,bean,definition,bean,definition,parse,bean,definition,element,ele,bean,name,containing,bean,if,bean,definition,null,if,string,utils,has,text,bean,name,try,if,containing,bean,null,bean,name,bean,definition,reader,utils,generate,bean,name,bean,definition,this,reader,context,get,registry,true,else,bean,name,this,reader,context,generate,bean,name,bean,definition,string,bean,class,name,bean,definition,get,bean,class,name,if,bean,class,name,null,bean,name,starts,with,bean,class,name,bean,name,length,bean,class,name,length,this,reader,context,get,registry,is,bean,name,in,use,bean,class,name,aliases,add,bean,class,name,if,logger,is,debug,enabled,logger,debug,neither,xml,id,nor,name,specified,using,generated,bean,name,bean,name,catch,exception,ex,error,ex,get,message,ele,return,null,string,aliases,array,string,utils,to,string,array,aliases,return,new,bean,definition,holder,bean,definition,bean,name,aliases,array,return,null
BeanDefinitionParserDelegate -> public BeanDefinitionHolder parseBeanDefinitionElement(Element ele, BeanDefinition containingBean);1351696936;Parses the supplied <code>&lt_bean&gt_</code> element. May return <code>null</code>_if there were errors during parse. Errors are reported to the_{@link org.springframework.beans.factory.parsing.ProblemReporter}.;public BeanDefinitionHolder parseBeanDefinitionElement(Element ele, BeanDefinition containingBean) {_		String id = ele.getAttribute(ID_ATTRIBUTE)__		String nameAttr = ele.getAttribute(NAME_ATTRIBUTE)___		List<String> aliases = new ArrayList<String>()__		if (StringUtils.hasLength(nameAttr)) {_			String[] nameArr = StringUtils.tokenizeToStringArray(nameAttr, MULTI_VALUE_ATTRIBUTE_DELIMITERS)__			aliases.addAll(Arrays.asList(nameArr))__		}__		String beanName = id__		if (!StringUtils.hasText(beanName) && !aliases.isEmpty()) {_			beanName = aliases.remove(0)__			if (logger.isDebugEnabled()) {_				logger.debug("No XML 'id' specified - using '" + beanName +_						"' as bean name and " + aliases + " as aliases")__			}_		}__		if (containingBean == null) {_			checkNameUniqueness(beanName, aliases, ele)__		}__		AbstractBeanDefinition beanDefinition = parseBeanDefinitionElement(ele, beanName, containingBean)__		if (beanDefinition != null) {_			if (!StringUtils.hasText(beanName)) {_				try {_					if (containingBean != null) {_						beanName = BeanDefinitionReaderUtils.generateBeanName(_								beanDefinition, this.readerContext.getRegistry(), true)__					}_					else {_						beanName = this.readerContext.generateBeanName(beanDefinition)__						_						_						_						String beanClassName = beanDefinition.getBeanClassName()__						if (beanClassName != null &&_								beanName.startsWith(beanClassName) && beanName.length() > beanClassName.length() &&_								!this.readerContext.getRegistry().isBeanNameInUse(beanClassName)) {_							aliases.add(beanClassName)__						}_					}_					if (logger.isDebugEnabled()) {_						logger.debug("Neither XML 'id' nor 'name' specified - " +_								"using generated bean name [" + beanName + "]")__					}_				}_				catch (Exception ex) {_					error(ex.getMessage(), ele)__					return null__				}_			}_			String[] aliasesArray = StringUtils.toStringArray(aliases)__			return new BeanDefinitionHolder(beanDefinition, beanName, aliasesArray)__		}__		return null__	};parses,the,supplied,code,lt,bean,gt,code,element,may,return,code,null,code,if,there,were,errors,during,parse,errors,are,reported,to,the,link,org,springframework,beans,factory,parsing,problem,reporter;public,bean,definition,holder,parse,bean,definition,element,element,ele,bean,definition,containing,bean,string,id,ele,get,attribute,string,name,attr,ele,get,attribute,list,string,aliases,new,array,list,string,if,string,utils,has,length,name,attr,string,name,arr,string,utils,tokenize,to,string,array,name,attr,aliases,add,all,arrays,as,list,name,arr,string,bean,name,id,if,string,utils,has,text,bean,name,aliases,is,empty,bean,name,aliases,remove,0,if,logger,is,debug,enabled,logger,debug,no,xml,id,specified,using,bean,name,as,bean,name,and,aliases,as,aliases,if,containing,bean,null,check,name,uniqueness,bean,name,aliases,ele,abstract,bean,definition,bean,definition,parse,bean,definition,element,ele,bean,name,containing,bean,if,bean,definition,null,if,string,utils,has,text,bean,name,try,if,containing,bean,null,bean,name,bean,definition,reader,utils,generate,bean,name,bean,definition,this,reader,context,get,registry,true,else,bean,name,this,reader,context,generate,bean,name,bean,definition,string,bean,class,name,bean,definition,get,bean,class,name,if,bean,class,name,null,bean,name,starts,with,bean,class,name,bean,name,length,bean,class,name,length,this,reader,context,get,registry,is,bean,name,in,use,bean,class,name,aliases,add,bean,class,name,if,logger,is,debug,enabled,logger,debug,neither,xml,id,nor,name,specified,using,generated,bean,name,bean,name,catch,exception,ex,error,ex,get,message,ele,return,null,string,aliases,array,string,utils,to,string,array,aliases,return,new,bean,definition,holder,bean,definition,bean,name,aliases,array,return,null
BeanDefinitionParserDelegate -> public BeanDefinitionHolder parseBeanDefinitionElement(Element ele, BeanDefinition containingBean);1356735495;Parses the supplied {@code &lt_bean&gt_} element. May return {@code null}_if there were errors during parse. Errors are reported to the_{@link org.springframework.beans.factory.parsing.ProblemReporter}.;public BeanDefinitionHolder parseBeanDefinitionElement(Element ele, BeanDefinition containingBean) {_		String id = ele.getAttribute(ID_ATTRIBUTE)__		String nameAttr = ele.getAttribute(NAME_ATTRIBUTE)___		List<String> aliases = new ArrayList<String>()__		if (StringUtils.hasLength(nameAttr)) {_			String[] nameArr = StringUtils.tokenizeToStringArray(nameAttr, MULTI_VALUE_ATTRIBUTE_DELIMITERS)__			aliases.addAll(Arrays.asList(nameArr))__		}__		String beanName = id__		if (!StringUtils.hasText(beanName) && !aliases.isEmpty()) {_			beanName = aliases.remove(0)__			if (logger.isDebugEnabled()) {_				logger.debug("No XML 'id' specified - using '" + beanName +_						"' as bean name and " + aliases + " as aliases")__			}_		}__		if (containingBean == null) {_			checkNameUniqueness(beanName, aliases, ele)__		}__		AbstractBeanDefinition beanDefinition = parseBeanDefinitionElement(ele, beanName, containingBean)__		if (beanDefinition != null) {_			if (!StringUtils.hasText(beanName)) {_				try {_					if (containingBean != null) {_						beanName = BeanDefinitionReaderUtils.generateBeanName(_								beanDefinition, this.readerContext.getRegistry(), true)__					}_					else {_						beanName = this.readerContext.generateBeanName(beanDefinition)__						_						_						_						String beanClassName = beanDefinition.getBeanClassName()__						if (beanClassName != null &&_								beanName.startsWith(beanClassName) && beanName.length() > beanClassName.length() &&_								!this.readerContext.getRegistry().isBeanNameInUse(beanClassName)) {_							aliases.add(beanClassName)__						}_					}_					if (logger.isDebugEnabled()) {_						logger.debug("Neither XML 'id' nor 'name' specified - " +_								"using generated bean name [" + beanName + "]")__					}_				}_				catch (Exception ex) {_					error(ex.getMessage(), ele)__					return null__				}_			}_			String[] aliasesArray = StringUtils.toStringArray(aliases)__			return new BeanDefinitionHolder(beanDefinition, beanName, aliasesArray)__		}__		return null__	};parses,the,supplied,code,lt,bean,gt,element,may,return,code,null,if,there,were,errors,during,parse,errors,are,reported,to,the,link,org,springframework,beans,factory,parsing,problem,reporter;public,bean,definition,holder,parse,bean,definition,element,element,ele,bean,definition,containing,bean,string,id,ele,get,attribute,string,name,attr,ele,get,attribute,list,string,aliases,new,array,list,string,if,string,utils,has,length,name,attr,string,name,arr,string,utils,tokenize,to,string,array,name,attr,aliases,add,all,arrays,as,list,name,arr,string,bean,name,id,if,string,utils,has,text,bean,name,aliases,is,empty,bean,name,aliases,remove,0,if,logger,is,debug,enabled,logger,debug,no,xml,id,specified,using,bean,name,as,bean,name,and,aliases,as,aliases,if,containing,bean,null,check,name,uniqueness,bean,name,aliases,ele,abstract,bean,definition,bean,definition,parse,bean,definition,element,ele,bean,name,containing,bean,if,bean,definition,null,if,string,utils,has,text,bean,name,try,if,containing,bean,null,bean,name,bean,definition,reader,utils,generate,bean,name,bean,definition,this,reader,context,get,registry,true,else,bean,name,this,reader,context,generate,bean,name,bean,definition,string,bean,class,name,bean,definition,get,bean,class,name,if,bean,class,name,null,bean,name,starts,with,bean,class,name,bean,name,length,bean,class,name,length,this,reader,context,get,registry,is,bean,name,in,use,bean,class,name,aliases,add,bean,class,name,if,logger,is,debug,enabled,logger,debug,neither,xml,id,nor,name,specified,using,generated,bean,name,bean,name,catch,exception,ex,error,ex,get,message,ele,return,null,string,aliases,array,string,utils,to,string,array,aliases,return,new,bean,definition,holder,bean,definition,bean,name,aliases,array,return,null
BeanDefinitionParserDelegate -> public BeanDefinitionHolder parseBeanDefinitionElement(Element ele, BeanDefinition containingBean);1357119417;Parses the supplied {@code &lt_bean&gt_} element. May return {@code null}_if there were errors during parse. Errors are reported to the_{@link org.springframework.beans.factory.parsing.ProblemReporter}.;public BeanDefinitionHolder parseBeanDefinitionElement(Element ele, BeanDefinition containingBean) {_		String id = ele.getAttribute(ID_ATTRIBUTE)__		String nameAttr = ele.getAttribute(NAME_ATTRIBUTE)___		List<String> aliases = new ArrayList<String>()__		if (StringUtils.hasLength(nameAttr)) {_			String[] nameArr = StringUtils.tokenizeToStringArray(nameAttr, MULTI_VALUE_ATTRIBUTE_DELIMITERS)__			aliases.addAll(Arrays.asList(nameArr))__		}__		String beanName = id__		if (!StringUtils.hasText(beanName) && !aliases.isEmpty()) {_			beanName = aliases.remove(0)__			if (logger.isDebugEnabled()) {_				logger.debug("No XML 'id' specified - using '" + beanName +_						"' as bean name and " + aliases + " as aliases")__			}_		}__		if (containingBean == null) {_			checkNameUniqueness(beanName, aliases, ele)__		}__		AbstractBeanDefinition beanDefinition = parseBeanDefinitionElement(ele, beanName, containingBean)__		if (beanDefinition != null) {_			if (!StringUtils.hasText(beanName)) {_				try {_					if (containingBean != null) {_						beanName = BeanDefinitionReaderUtils.generateBeanName(_								beanDefinition, this.readerContext.getRegistry(), true)__					}_					else {_						beanName = this.readerContext.generateBeanName(beanDefinition)__						_						_						_						String beanClassName = beanDefinition.getBeanClassName()__						if (beanClassName != null &&_								beanName.startsWith(beanClassName) && beanName.length() > beanClassName.length() &&_								!this.readerContext.getRegistry().isBeanNameInUse(beanClassName)) {_							aliases.add(beanClassName)__						}_					}_					if (logger.isDebugEnabled()) {_						logger.debug("Neither XML 'id' nor 'name' specified - " +_								"using generated bean name [" + beanName + "]")__					}_				}_				catch (Exception ex) {_					error(ex.getMessage(), ele)__					return null__				}_			}_			String[] aliasesArray = StringUtils.toStringArray(aliases)__			return new BeanDefinitionHolder(beanDefinition, beanName, aliasesArray)__		}__		return null__	};parses,the,supplied,code,lt,bean,gt,element,may,return,code,null,if,there,were,errors,during,parse,errors,are,reported,to,the,link,org,springframework,beans,factory,parsing,problem,reporter;public,bean,definition,holder,parse,bean,definition,element,element,ele,bean,definition,containing,bean,string,id,ele,get,attribute,string,name,attr,ele,get,attribute,list,string,aliases,new,array,list,string,if,string,utils,has,length,name,attr,string,name,arr,string,utils,tokenize,to,string,array,name,attr,aliases,add,all,arrays,as,list,name,arr,string,bean,name,id,if,string,utils,has,text,bean,name,aliases,is,empty,bean,name,aliases,remove,0,if,logger,is,debug,enabled,logger,debug,no,xml,id,specified,using,bean,name,as,bean,name,and,aliases,as,aliases,if,containing,bean,null,check,name,uniqueness,bean,name,aliases,ele,abstract,bean,definition,bean,definition,parse,bean,definition,element,ele,bean,name,containing,bean,if,bean,definition,null,if,string,utils,has,text,bean,name,try,if,containing,bean,null,bean,name,bean,definition,reader,utils,generate,bean,name,bean,definition,this,reader,context,get,registry,true,else,bean,name,this,reader,context,generate,bean,name,bean,definition,string,bean,class,name,bean,definition,get,bean,class,name,if,bean,class,name,null,bean,name,starts,with,bean,class,name,bean,name,length,bean,class,name,length,this,reader,context,get,registry,is,bean,name,in,use,bean,class,name,aliases,add,bean,class,name,if,logger,is,debug,enabled,logger,debug,neither,xml,id,nor,name,specified,using,generated,bean,name,bean,name,catch,exception,ex,error,ex,get,message,ele,return,null,string,aliases,array,string,utils,to,string,array,aliases,return,new,bean,definition,holder,bean,definition,bean,name,aliases,array,return,null
BeanDefinitionParserDelegate -> public BeanDefinitionHolder parseBeanDefinitionElement(Element ele, BeanDefinition containingBean);1367943112;Parses the supplied {@code &lt_bean&gt_} element. May return {@code null}_if there were errors during parse. Errors are reported to the_{@link org.springframework.beans.factory.parsing.ProblemReporter}.;public BeanDefinitionHolder parseBeanDefinitionElement(Element ele, BeanDefinition containingBean) {_		String id = ele.getAttribute(ID_ATTRIBUTE)__		String nameAttr = ele.getAttribute(NAME_ATTRIBUTE)___		List<String> aliases = new ArrayList<String>()__		if (StringUtils.hasLength(nameAttr)) {_			String[] nameArr = StringUtils.tokenizeToStringArray(nameAttr, MULTI_VALUE_ATTRIBUTE_DELIMITERS)__			aliases.addAll(Arrays.asList(nameArr))__		}__		String beanName = id__		if (!StringUtils.hasText(beanName) && !aliases.isEmpty()) {_			beanName = aliases.remove(0)__			if (logger.isDebugEnabled()) {_				logger.debug("No XML 'id' specified - using '" + beanName +_						"' as bean name and " + aliases + " as aliases")__			}_		}__		if (containingBean == null) {_			checkNameUniqueness(beanName, aliases, ele)__		}__		AbstractBeanDefinition beanDefinition = parseBeanDefinitionElement(ele, beanName, containingBean)__		if (beanDefinition != null) {_			if (!StringUtils.hasText(beanName)) {_				try {_					if (containingBean != null) {_						beanName = BeanDefinitionReaderUtils.generateBeanName(_								beanDefinition, this.readerContext.getRegistry(), true)__					}_					else {_						beanName = this.readerContext.generateBeanName(beanDefinition)__						_						_						_						String beanClassName = beanDefinition.getBeanClassName()__						if (beanClassName != null &&_								beanName.startsWith(beanClassName) && beanName.length() > beanClassName.length() &&_								!this.readerContext.getRegistry().isBeanNameInUse(beanClassName)) {_							aliases.add(beanClassName)__						}_					}_					if (logger.isDebugEnabled()) {_						logger.debug("Neither XML 'id' nor 'name' specified - " +_								"using generated bean name [" + beanName + "]")__					}_				}_				catch (Exception ex) {_					error(ex.getMessage(), ele)__					return null__				}_			}_			String[] aliasesArray = StringUtils.toStringArray(aliases)__			return new BeanDefinitionHolder(beanDefinition, beanName, aliasesArray)__		}__		return null__	};parses,the,supplied,code,lt,bean,gt,element,may,return,code,null,if,there,were,errors,during,parse,errors,are,reported,to,the,link,org,springframework,beans,factory,parsing,problem,reporter;public,bean,definition,holder,parse,bean,definition,element,element,ele,bean,definition,containing,bean,string,id,ele,get,attribute,string,name,attr,ele,get,attribute,list,string,aliases,new,array,list,string,if,string,utils,has,length,name,attr,string,name,arr,string,utils,tokenize,to,string,array,name,attr,aliases,add,all,arrays,as,list,name,arr,string,bean,name,id,if,string,utils,has,text,bean,name,aliases,is,empty,bean,name,aliases,remove,0,if,logger,is,debug,enabled,logger,debug,no,xml,id,specified,using,bean,name,as,bean,name,and,aliases,as,aliases,if,containing,bean,null,check,name,uniqueness,bean,name,aliases,ele,abstract,bean,definition,bean,definition,parse,bean,definition,element,ele,bean,name,containing,bean,if,bean,definition,null,if,string,utils,has,text,bean,name,try,if,containing,bean,null,bean,name,bean,definition,reader,utils,generate,bean,name,bean,definition,this,reader,context,get,registry,true,else,bean,name,this,reader,context,generate,bean,name,bean,definition,string,bean,class,name,bean,definition,get,bean,class,name,if,bean,class,name,null,bean,name,starts,with,bean,class,name,bean,name,length,bean,class,name,length,this,reader,context,get,registry,is,bean,name,in,use,bean,class,name,aliases,add,bean,class,name,if,logger,is,debug,enabled,logger,debug,neither,xml,id,nor,name,specified,using,generated,bean,name,bean,name,catch,exception,ex,error,ex,get,message,ele,return,null,string,aliases,array,string,utils,to,string,array,aliases,return,new,bean,definition,holder,bean,definition,bean,name,aliases,array,return,null
BeanDefinitionParserDelegate -> public BeanDefinitionHolder parseBeanDefinitionElement(Element ele, BeanDefinition containingBean);1382030648;Parses the supplied {@code &lt_bean&gt_} element. May return {@code null}_if there were errors during parse. Errors are reported to the_{@link org.springframework.beans.factory.parsing.ProblemReporter}.;public BeanDefinitionHolder parseBeanDefinitionElement(Element ele, BeanDefinition containingBean) {_		String id = ele.getAttribute(ID_ATTRIBUTE)__		String nameAttr = ele.getAttribute(NAME_ATTRIBUTE)___		List<String> aliases = new ArrayList<String>()__		if (StringUtils.hasLength(nameAttr)) {_			String[] nameArr = StringUtils.tokenizeToStringArray(nameAttr, MULTI_VALUE_ATTRIBUTE_DELIMITERS)__			aliases.addAll(Arrays.asList(nameArr))__		}__		String beanName = id__		if (!StringUtils.hasText(beanName) && !aliases.isEmpty()) {_			beanName = aliases.remove(0)__			if (logger.isDebugEnabled()) {_				logger.debug("No XML 'id' specified - using '" + beanName +_						"' as bean name and " + aliases + " as aliases")__			}_		}__		if (containingBean == null) {_			checkNameUniqueness(beanName, aliases, ele)__		}__		AbstractBeanDefinition beanDefinition = parseBeanDefinitionElement(ele, beanName, containingBean)__		if (beanDefinition != null) {_			if (!StringUtils.hasText(beanName)) {_				try {_					if (containingBean != null) {_						beanName = BeanDefinitionReaderUtils.generateBeanName(_								beanDefinition, this.readerContext.getRegistry(), true)__					}_					else {_						beanName = this.readerContext.generateBeanName(beanDefinition)__						_						_						_						String beanClassName = beanDefinition.getBeanClassName()__						if (beanClassName != null &&_								beanName.startsWith(beanClassName) && beanName.length() > beanClassName.length() &&_								!this.readerContext.getRegistry().isBeanNameInUse(beanClassName)) {_							aliases.add(beanClassName)__						}_					}_					if (logger.isDebugEnabled()) {_						logger.debug("Neither XML 'id' nor 'name' specified - " +_								"using generated bean name [" + beanName + "]")__					}_				}_				catch (Exception ex) {_					error(ex.getMessage(), ele)__					return null__				}_			}_			String[] aliasesArray = StringUtils.toStringArray(aliases)__			return new BeanDefinitionHolder(beanDefinition, beanName, aliasesArray)__		}__		return null__	};parses,the,supplied,code,lt,bean,gt,element,may,return,code,null,if,there,were,errors,during,parse,errors,are,reported,to,the,link,org,springframework,beans,factory,parsing,problem,reporter;public,bean,definition,holder,parse,bean,definition,element,element,ele,bean,definition,containing,bean,string,id,ele,get,attribute,string,name,attr,ele,get,attribute,list,string,aliases,new,array,list,string,if,string,utils,has,length,name,attr,string,name,arr,string,utils,tokenize,to,string,array,name,attr,aliases,add,all,arrays,as,list,name,arr,string,bean,name,id,if,string,utils,has,text,bean,name,aliases,is,empty,bean,name,aliases,remove,0,if,logger,is,debug,enabled,logger,debug,no,xml,id,specified,using,bean,name,as,bean,name,and,aliases,as,aliases,if,containing,bean,null,check,name,uniqueness,bean,name,aliases,ele,abstract,bean,definition,bean,definition,parse,bean,definition,element,ele,bean,name,containing,bean,if,bean,definition,null,if,string,utils,has,text,bean,name,try,if,containing,bean,null,bean,name,bean,definition,reader,utils,generate,bean,name,bean,definition,this,reader,context,get,registry,true,else,bean,name,this,reader,context,generate,bean,name,bean,definition,string,bean,class,name,bean,definition,get,bean,class,name,if,bean,class,name,null,bean,name,starts,with,bean,class,name,bean,name,length,bean,class,name,length,this,reader,context,get,registry,is,bean,name,in,use,bean,class,name,aliases,add,bean,class,name,if,logger,is,debug,enabled,logger,debug,neither,xml,id,nor,name,specified,using,generated,bean,name,bean,name,catch,exception,ex,error,ex,get,message,ele,return,null,string,aliases,array,string,utils,to,string,array,aliases,return,new,bean,definition,holder,bean,definition,bean,name,aliases,array,return,null
BeanDefinitionParserDelegate -> public BeanDefinitionHolder parseBeanDefinitionElement(Element ele, BeanDefinition containingBean);1385412762;Parses the supplied {@code &lt_bean&gt_} element. May return {@code null}_if there were errors during parse. Errors are reported to the_{@link org.springframework.beans.factory.parsing.ProblemReporter}.;public BeanDefinitionHolder parseBeanDefinitionElement(Element ele, BeanDefinition containingBean) {_		String id = ele.getAttribute(ID_ATTRIBUTE)__		String nameAttr = ele.getAttribute(NAME_ATTRIBUTE)___		List<String> aliases = new ArrayList<String>()__		if (StringUtils.hasLength(nameAttr)) {_			String[] nameArr = StringUtils.tokenizeToStringArray(nameAttr, MULTI_VALUE_ATTRIBUTE_DELIMITERS)__			aliases.addAll(Arrays.asList(nameArr))__		}__		String beanName = id__		if (!StringUtils.hasText(beanName) && !aliases.isEmpty()) {_			beanName = aliases.remove(0)__			if (logger.isDebugEnabled()) {_				logger.debug("No XML 'id' specified - using '" + beanName +_						"' as bean name and " + aliases + " as aliases")__			}_		}__		if (containingBean == null) {_			checkNameUniqueness(beanName, aliases, ele)__		}__		AbstractBeanDefinition beanDefinition = parseBeanDefinitionElement(ele, beanName, containingBean)__		if (beanDefinition != null) {_			if (!StringUtils.hasText(beanName)) {_				try {_					if (containingBean != null) {_						beanName = BeanDefinitionReaderUtils.generateBeanName(_								beanDefinition, this.readerContext.getRegistry(), true)__					}_					else {_						beanName = this.readerContext.generateBeanName(beanDefinition)__						_						_						_						String beanClassName = beanDefinition.getBeanClassName()__						if (beanClassName != null &&_								beanName.startsWith(beanClassName) && beanName.length() > beanClassName.length() &&_								!this.readerContext.getRegistry().isBeanNameInUse(beanClassName)) {_							aliases.add(beanClassName)__						}_					}_					if (logger.isDebugEnabled()) {_						logger.debug("Neither XML 'id' nor 'name' specified - " +_								"using generated bean name [" + beanName + "]")__					}_				}_				catch (Exception ex) {_					error(ex.getMessage(), ele)__					return null__				}_			}_			String[] aliasesArray = StringUtils.toStringArray(aliases)__			return new BeanDefinitionHolder(beanDefinition, beanName, aliasesArray)__		}__		return null__	};parses,the,supplied,code,lt,bean,gt,element,may,return,code,null,if,there,were,errors,during,parse,errors,are,reported,to,the,link,org,springframework,beans,factory,parsing,problem,reporter;public,bean,definition,holder,parse,bean,definition,element,element,ele,bean,definition,containing,bean,string,id,ele,get,attribute,string,name,attr,ele,get,attribute,list,string,aliases,new,array,list,string,if,string,utils,has,length,name,attr,string,name,arr,string,utils,tokenize,to,string,array,name,attr,aliases,add,all,arrays,as,list,name,arr,string,bean,name,id,if,string,utils,has,text,bean,name,aliases,is,empty,bean,name,aliases,remove,0,if,logger,is,debug,enabled,logger,debug,no,xml,id,specified,using,bean,name,as,bean,name,and,aliases,as,aliases,if,containing,bean,null,check,name,uniqueness,bean,name,aliases,ele,abstract,bean,definition,bean,definition,parse,bean,definition,element,ele,bean,name,containing,bean,if,bean,definition,null,if,string,utils,has,text,bean,name,try,if,containing,bean,null,bean,name,bean,definition,reader,utils,generate,bean,name,bean,definition,this,reader,context,get,registry,true,else,bean,name,this,reader,context,generate,bean,name,bean,definition,string,bean,class,name,bean,definition,get,bean,class,name,if,bean,class,name,null,bean,name,starts,with,bean,class,name,bean,name,length,bean,class,name,length,this,reader,context,get,registry,is,bean,name,in,use,bean,class,name,aliases,add,bean,class,name,if,logger,is,debug,enabled,logger,debug,neither,xml,id,nor,name,specified,using,generated,bean,name,bean,name,catch,exception,ex,error,ex,get,message,ele,return,null,string,aliases,array,string,utils,to,string,array,aliases,return,new,bean,definition,holder,bean,definition,bean,name,aliases,array,return,null
BeanDefinitionParserDelegate -> public BeanDefinitionHolder parseBeanDefinitionElement(Element ele, BeanDefinition containingBean);1410953197;Parses the supplied {@code &lt_bean&gt_} element. May return {@code null}_if there were errors during parse. Errors are reported to the_{@link org.springframework.beans.factory.parsing.ProblemReporter}.;public BeanDefinitionHolder parseBeanDefinitionElement(Element ele, BeanDefinition containingBean) {_		String id = ele.getAttribute(ID_ATTRIBUTE)__		String nameAttr = ele.getAttribute(NAME_ATTRIBUTE)___		List<String> aliases = new ArrayList<String>()__		if (StringUtils.hasLength(nameAttr)) {_			String[] nameArr = StringUtils.tokenizeToStringArray(nameAttr, MULTI_VALUE_ATTRIBUTE_DELIMITERS)__			aliases.addAll(Arrays.asList(nameArr))__		}__		String beanName = id__		if (!StringUtils.hasText(beanName) && !aliases.isEmpty()) {_			beanName = aliases.remove(0)__			if (logger.isDebugEnabled()) {_				logger.debug("No XML 'id' specified - using '" + beanName +_						"' as bean name and " + aliases + " as aliases")__			}_		}__		if (containingBean == null) {_			checkNameUniqueness(beanName, aliases, ele)__		}__		AbstractBeanDefinition beanDefinition = parseBeanDefinitionElement(ele, beanName, containingBean)__		if (beanDefinition != null) {_			if (!StringUtils.hasText(beanName)) {_				try {_					if (containingBean != null) {_						beanName = BeanDefinitionReaderUtils.generateBeanName(_								beanDefinition, this.readerContext.getRegistry(), true)__					}_					else {_						beanName = this.readerContext.generateBeanName(beanDefinition)__						_						_						_						String beanClassName = beanDefinition.getBeanClassName()__						if (beanClassName != null &&_								beanName.startsWith(beanClassName) && beanName.length() > beanClassName.length() &&_								!this.readerContext.getRegistry().isBeanNameInUse(beanClassName)) {_							aliases.add(beanClassName)__						}_					}_					if (logger.isDebugEnabled()) {_						logger.debug("Neither XML 'id' nor 'name' specified - " +_								"using generated bean name [" + beanName + "]")__					}_				}_				catch (Exception ex) {_					error(ex.getMessage(), ele)__					return null__				}_			}_			String[] aliasesArray = StringUtils.toStringArray(aliases)__			return new BeanDefinitionHolder(beanDefinition, beanName, aliasesArray)__		}__		return null__	};parses,the,supplied,code,lt,bean,gt,element,may,return,code,null,if,there,were,errors,during,parse,errors,are,reported,to,the,link,org,springframework,beans,factory,parsing,problem,reporter;public,bean,definition,holder,parse,bean,definition,element,element,ele,bean,definition,containing,bean,string,id,ele,get,attribute,string,name,attr,ele,get,attribute,list,string,aliases,new,array,list,string,if,string,utils,has,length,name,attr,string,name,arr,string,utils,tokenize,to,string,array,name,attr,aliases,add,all,arrays,as,list,name,arr,string,bean,name,id,if,string,utils,has,text,bean,name,aliases,is,empty,bean,name,aliases,remove,0,if,logger,is,debug,enabled,logger,debug,no,xml,id,specified,using,bean,name,as,bean,name,and,aliases,as,aliases,if,containing,bean,null,check,name,uniqueness,bean,name,aliases,ele,abstract,bean,definition,bean,definition,parse,bean,definition,element,ele,bean,name,containing,bean,if,bean,definition,null,if,string,utils,has,text,bean,name,try,if,containing,bean,null,bean,name,bean,definition,reader,utils,generate,bean,name,bean,definition,this,reader,context,get,registry,true,else,bean,name,this,reader,context,generate,bean,name,bean,definition,string,bean,class,name,bean,definition,get,bean,class,name,if,bean,class,name,null,bean,name,starts,with,bean,class,name,bean,name,length,bean,class,name,length,this,reader,context,get,registry,is,bean,name,in,use,bean,class,name,aliases,add,bean,class,name,if,logger,is,debug,enabled,logger,debug,neither,xml,id,nor,name,specified,using,generated,bean,name,bean,name,catch,exception,ex,error,ex,get,message,ele,return,null,string,aliases,array,string,utils,to,string,array,aliases,return,new,bean,definition,holder,bean,definition,bean,name,aliases,array,return,null
BeanDefinitionParserDelegate -> public BeanDefinitionHolder parseBeanDefinitionElement(Element ele, BeanDefinition containingBean);1411599760;Parses the supplied {@code &lt_bean&gt_} element. May return {@code null}_if there were errors during parse. Errors are reported to the_{@link org.springframework.beans.factory.parsing.ProblemReporter}.;public BeanDefinitionHolder parseBeanDefinitionElement(Element ele, BeanDefinition containingBean) {_		String id = ele.getAttribute(ID_ATTRIBUTE)__		String nameAttr = ele.getAttribute(NAME_ATTRIBUTE)___		List<String> aliases = new ArrayList<String>()__		if (StringUtils.hasLength(nameAttr)) {_			String[] nameArr = StringUtils.tokenizeToStringArray(nameAttr, MULTI_VALUE_ATTRIBUTE_DELIMITERS)__			aliases.addAll(Arrays.asList(nameArr))__		}__		String beanName = id__		if (!StringUtils.hasText(beanName) && !aliases.isEmpty()) {_			beanName = aliases.remove(0)__			if (logger.isDebugEnabled()) {_				logger.debug("No XML 'id' specified - using '" + beanName +_						"' as bean name and " + aliases + " as aliases")__			}_		}__		if (containingBean == null) {_			checkNameUniqueness(beanName, aliases, ele)__		}__		AbstractBeanDefinition beanDefinition = parseBeanDefinitionElement(ele, beanName, containingBean)__		if (beanDefinition != null) {_			if (!StringUtils.hasText(beanName)) {_				try {_					if (containingBean != null) {_						beanName = BeanDefinitionReaderUtils.generateBeanName(_								beanDefinition, this.readerContext.getRegistry(), true)__					}_					else {_						beanName = this.readerContext.generateBeanName(beanDefinition)__						_						_						_						String beanClassName = beanDefinition.getBeanClassName()__						if (beanClassName != null &&_								beanName.startsWith(beanClassName) && beanName.length() > beanClassName.length() &&_								!this.readerContext.getRegistry().isBeanNameInUse(beanClassName)) {_							aliases.add(beanClassName)__						}_					}_					if (logger.isDebugEnabled()) {_						logger.debug("Neither XML 'id' nor 'name' specified - " +_								"using generated bean name [" + beanName + "]")__					}_				}_				catch (Exception ex) {_					error(ex.getMessage(), ele)__					return null__				}_			}_			String[] aliasesArray = StringUtils.toStringArray(aliases)__			return new BeanDefinitionHolder(beanDefinition, beanName, aliasesArray)__		}__		return null__	};parses,the,supplied,code,lt,bean,gt,element,may,return,code,null,if,there,were,errors,during,parse,errors,are,reported,to,the,link,org,springframework,beans,factory,parsing,problem,reporter;public,bean,definition,holder,parse,bean,definition,element,element,ele,bean,definition,containing,bean,string,id,ele,get,attribute,string,name,attr,ele,get,attribute,list,string,aliases,new,array,list,string,if,string,utils,has,length,name,attr,string,name,arr,string,utils,tokenize,to,string,array,name,attr,aliases,add,all,arrays,as,list,name,arr,string,bean,name,id,if,string,utils,has,text,bean,name,aliases,is,empty,bean,name,aliases,remove,0,if,logger,is,debug,enabled,logger,debug,no,xml,id,specified,using,bean,name,as,bean,name,and,aliases,as,aliases,if,containing,bean,null,check,name,uniqueness,bean,name,aliases,ele,abstract,bean,definition,bean,definition,parse,bean,definition,element,ele,bean,name,containing,bean,if,bean,definition,null,if,string,utils,has,text,bean,name,try,if,containing,bean,null,bean,name,bean,definition,reader,utils,generate,bean,name,bean,definition,this,reader,context,get,registry,true,else,bean,name,this,reader,context,generate,bean,name,bean,definition,string,bean,class,name,bean,definition,get,bean,class,name,if,bean,class,name,null,bean,name,starts,with,bean,class,name,bean,name,length,bean,class,name,length,this,reader,context,get,registry,is,bean,name,in,use,bean,class,name,aliases,add,bean,class,name,if,logger,is,debug,enabled,logger,debug,neither,xml,id,nor,name,specified,using,generated,bean,name,bean,name,catch,exception,ex,error,ex,get,message,ele,return,null,string,aliases,array,string,utils,to,string,array,aliases,return,new,bean,definition,holder,bean,definition,bean,name,aliases,array,return,null
BeanDefinitionParserDelegate -> public BeanDefinitionHolder parseBeanDefinitionElement(Element ele, BeanDefinition containingBean);1419966315;Parses the supplied {@code &lt_bean&gt_} element. May return {@code null}_if there were errors during parse. Errors are reported to the_{@link org.springframework.beans.factory.parsing.ProblemReporter}.;public BeanDefinitionHolder parseBeanDefinitionElement(Element ele, BeanDefinition containingBean) {_		String id = ele.getAttribute(ID_ATTRIBUTE)__		String nameAttr = ele.getAttribute(NAME_ATTRIBUTE)___		List<String> aliases = new ArrayList<String>()__		if (StringUtils.hasLength(nameAttr)) {_			String[] nameArr = StringUtils.tokenizeToStringArray(nameAttr, MULTI_VALUE_ATTRIBUTE_DELIMITERS)__			aliases.addAll(Arrays.asList(nameArr))__		}__		String beanName = id__		if (!StringUtils.hasText(beanName) && !aliases.isEmpty()) {_			beanName = aliases.remove(0)__			if (logger.isDebugEnabled()) {_				logger.debug("No XML 'id' specified - using '" + beanName +_						"' as bean name and " + aliases + " as aliases")__			}_		}__		if (containingBean == null) {_			checkNameUniqueness(beanName, aliases, ele)__		}__		AbstractBeanDefinition beanDefinition = parseBeanDefinitionElement(ele, beanName, containingBean)__		if (beanDefinition != null) {_			if (!StringUtils.hasText(beanName)) {_				try {_					if (containingBean != null) {_						beanName = BeanDefinitionReaderUtils.generateBeanName(_								beanDefinition, this.readerContext.getRegistry(), true)__					}_					else {_						beanName = this.readerContext.generateBeanName(beanDefinition)__						_						_						_						String beanClassName = beanDefinition.getBeanClassName()__						if (beanClassName != null &&_								beanName.startsWith(beanClassName) && beanName.length() > beanClassName.length() &&_								!this.readerContext.getRegistry().isBeanNameInUse(beanClassName)) {_							aliases.add(beanClassName)__						}_					}_					if (logger.isDebugEnabled()) {_						logger.debug("Neither XML 'id' nor 'name' specified - " +_								"using generated bean name [" + beanName + "]")__					}_				}_				catch (Exception ex) {_					error(ex.getMessage(), ele)__					return null__				}_			}_			String[] aliasesArray = StringUtils.toStringArray(aliases)__			return new BeanDefinitionHolder(beanDefinition, beanName, aliasesArray)__		}__		return null__	};parses,the,supplied,code,lt,bean,gt,element,may,return,code,null,if,there,were,errors,during,parse,errors,are,reported,to,the,link,org,springframework,beans,factory,parsing,problem,reporter;public,bean,definition,holder,parse,bean,definition,element,element,ele,bean,definition,containing,bean,string,id,ele,get,attribute,string,name,attr,ele,get,attribute,list,string,aliases,new,array,list,string,if,string,utils,has,length,name,attr,string,name,arr,string,utils,tokenize,to,string,array,name,attr,aliases,add,all,arrays,as,list,name,arr,string,bean,name,id,if,string,utils,has,text,bean,name,aliases,is,empty,bean,name,aliases,remove,0,if,logger,is,debug,enabled,logger,debug,no,xml,id,specified,using,bean,name,as,bean,name,and,aliases,as,aliases,if,containing,bean,null,check,name,uniqueness,bean,name,aliases,ele,abstract,bean,definition,bean,definition,parse,bean,definition,element,ele,bean,name,containing,bean,if,bean,definition,null,if,string,utils,has,text,bean,name,try,if,containing,bean,null,bean,name,bean,definition,reader,utils,generate,bean,name,bean,definition,this,reader,context,get,registry,true,else,bean,name,this,reader,context,generate,bean,name,bean,definition,string,bean,class,name,bean,definition,get,bean,class,name,if,bean,class,name,null,bean,name,starts,with,bean,class,name,bean,name,length,bean,class,name,length,this,reader,context,get,registry,is,bean,name,in,use,bean,class,name,aliases,add,bean,class,name,if,logger,is,debug,enabled,logger,debug,neither,xml,id,nor,name,specified,using,generated,bean,name,bean,name,catch,exception,ex,error,ex,get,message,ele,return,null,string,aliases,array,string,utils,to,string,array,aliases,return,new,bean,definition,holder,bean,definition,bean,name,aliases,array,return,null
BeanDefinitionParserDelegate -> public BeanDefinitionHolder parseBeanDefinitionElement(Element ele, BeanDefinition containingBean);1431958785;Parses the supplied {@code &lt_bean&gt_} element. May return {@code null}_if there were errors during parse. Errors are reported to the_{@link org.springframework.beans.factory.parsing.ProblemReporter}.;public BeanDefinitionHolder parseBeanDefinitionElement(Element ele, BeanDefinition containingBean) {_		String id = ele.getAttribute(ID_ATTRIBUTE)__		String nameAttr = ele.getAttribute(NAME_ATTRIBUTE)___		List<String> aliases = new ArrayList<String>()__		if (StringUtils.hasLength(nameAttr)) {_			String[] nameArr = StringUtils.tokenizeToStringArray(nameAttr, MULTI_VALUE_ATTRIBUTE_DELIMITERS)__			aliases.addAll(Arrays.asList(nameArr))__		}__		String beanName = id__		if (!StringUtils.hasText(beanName) && !aliases.isEmpty()) {_			beanName = aliases.remove(0)__			if (logger.isDebugEnabled()) {_				logger.debug("No XML 'id' specified - using '" + beanName +_						"' as bean name and " + aliases + " as aliases")__			}_		}__		if (containingBean == null) {_			checkNameUniqueness(beanName, aliases, ele)__		}__		AbstractBeanDefinition beanDefinition = parseBeanDefinitionElement(ele, beanName, containingBean)__		if (beanDefinition != null) {_			if (!StringUtils.hasText(beanName)) {_				try {_					if (containingBean != null) {_						beanName = BeanDefinitionReaderUtils.generateBeanName(_								beanDefinition, this.readerContext.getRegistry(), true)__					}_					else {_						beanName = this.readerContext.generateBeanName(beanDefinition)__						_						_						_						String beanClassName = beanDefinition.getBeanClassName()__						if (beanClassName != null &&_								beanName.startsWith(beanClassName) && beanName.length() > beanClassName.length() &&_								!this.readerContext.getRegistry().isBeanNameInUse(beanClassName)) {_							aliases.add(beanClassName)__						}_					}_					if (logger.isDebugEnabled()) {_						logger.debug("Neither XML 'id' nor 'name' specified - " +_								"using generated bean name [" + beanName + "]")__					}_				}_				catch (Exception ex) {_					error(ex.getMessage(), ele)__					return null__				}_			}_			String[] aliasesArray = StringUtils.toStringArray(aliases)__			return new BeanDefinitionHolder(beanDefinition, beanName, aliasesArray)__		}__		return null__	};parses,the,supplied,code,lt,bean,gt,element,may,return,code,null,if,there,were,errors,during,parse,errors,are,reported,to,the,link,org,springframework,beans,factory,parsing,problem,reporter;public,bean,definition,holder,parse,bean,definition,element,element,ele,bean,definition,containing,bean,string,id,ele,get,attribute,string,name,attr,ele,get,attribute,list,string,aliases,new,array,list,string,if,string,utils,has,length,name,attr,string,name,arr,string,utils,tokenize,to,string,array,name,attr,aliases,add,all,arrays,as,list,name,arr,string,bean,name,id,if,string,utils,has,text,bean,name,aliases,is,empty,bean,name,aliases,remove,0,if,logger,is,debug,enabled,logger,debug,no,xml,id,specified,using,bean,name,as,bean,name,and,aliases,as,aliases,if,containing,bean,null,check,name,uniqueness,bean,name,aliases,ele,abstract,bean,definition,bean,definition,parse,bean,definition,element,ele,bean,name,containing,bean,if,bean,definition,null,if,string,utils,has,text,bean,name,try,if,containing,bean,null,bean,name,bean,definition,reader,utils,generate,bean,name,bean,definition,this,reader,context,get,registry,true,else,bean,name,this,reader,context,generate,bean,name,bean,definition,string,bean,class,name,bean,definition,get,bean,class,name,if,bean,class,name,null,bean,name,starts,with,bean,class,name,bean,name,length,bean,class,name,length,this,reader,context,get,registry,is,bean,name,in,use,bean,class,name,aliases,add,bean,class,name,if,logger,is,debug,enabled,logger,debug,neither,xml,id,nor,name,specified,using,generated,bean,name,bean,name,catch,exception,ex,error,ex,get,message,ele,return,null,string,aliases,array,string,utils,to,string,array,aliases,return,new,bean,definition,holder,bean,definition,bean,name,aliases,array,return,null
BeanDefinitionParserDelegate -> public BeanDefinitionHolder parseBeanDefinitionElement(Element ele, BeanDefinition containingBean);1432135182;Parses the supplied {@code &lt_bean&gt_} element. May return {@code null}_if there were errors during parse. Errors are reported to the_{@link org.springframework.beans.factory.parsing.ProblemReporter}.;public BeanDefinitionHolder parseBeanDefinitionElement(Element ele, BeanDefinition containingBean) {_		String id = ele.getAttribute(ID_ATTRIBUTE)__		String nameAttr = ele.getAttribute(NAME_ATTRIBUTE)___		List<String> aliases = new ArrayList<String>()__		if (StringUtils.hasLength(nameAttr)) {_			String[] nameArr = StringUtils.tokenizeToStringArray(nameAttr, MULTI_VALUE_ATTRIBUTE_DELIMITERS)__			aliases.addAll(Arrays.asList(nameArr))__		}__		String beanName = id__		if (!StringUtils.hasText(beanName) && !aliases.isEmpty()) {_			beanName = aliases.remove(0)__			if (logger.isDebugEnabled()) {_				logger.debug("No XML 'id' specified - using '" + beanName +_						"' as bean name and " + aliases + " as aliases")__			}_		}__		if (containingBean == null) {_			checkNameUniqueness(beanName, aliases, ele)__		}__		AbstractBeanDefinition beanDefinition = parseBeanDefinitionElement(ele, beanName, containingBean)__		if (beanDefinition != null) {_			if (!StringUtils.hasText(beanName)) {_				try {_					if (containingBean != null) {_						beanName = BeanDefinitionReaderUtils.generateBeanName(_								beanDefinition, this.readerContext.getRegistry(), true)__					}_					else {_						beanName = this.readerContext.generateBeanName(beanDefinition)__						_						_						_						String beanClassName = beanDefinition.getBeanClassName()__						if (beanClassName != null &&_								beanName.startsWith(beanClassName) && beanName.length() > beanClassName.length() &&_								!this.readerContext.getRegistry().isBeanNameInUse(beanClassName)) {_							aliases.add(beanClassName)__						}_					}_					if (logger.isDebugEnabled()) {_						logger.debug("Neither XML 'id' nor 'name' specified - " +_								"using generated bean name [" + beanName + "]")__					}_				}_				catch (Exception ex) {_					error(ex.getMessage(), ele)__					return null__				}_			}_			String[] aliasesArray = StringUtils.toStringArray(aliases)__			return new BeanDefinitionHolder(beanDefinition, beanName, aliasesArray)__		}__		return null__	};parses,the,supplied,code,lt,bean,gt,element,may,return,code,null,if,there,were,errors,during,parse,errors,are,reported,to,the,link,org,springframework,beans,factory,parsing,problem,reporter;public,bean,definition,holder,parse,bean,definition,element,element,ele,bean,definition,containing,bean,string,id,ele,get,attribute,string,name,attr,ele,get,attribute,list,string,aliases,new,array,list,string,if,string,utils,has,length,name,attr,string,name,arr,string,utils,tokenize,to,string,array,name,attr,aliases,add,all,arrays,as,list,name,arr,string,bean,name,id,if,string,utils,has,text,bean,name,aliases,is,empty,bean,name,aliases,remove,0,if,logger,is,debug,enabled,logger,debug,no,xml,id,specified,using,bean,name,as,bean,name,and,aliases,as,aliases,if,containing,bean,null,check,name,uniqueness,bean,name,aliases,ele,abstract,bean,definition,bean,definition,parse,bean,definition,element,ele,bean,name,containing,bean,if,bean,definition,null,if,string,utils,has,text,bean,name,try,if,containing,bean,null,bean,name,bean,definition,reader,utils,generate,bean,name,bean,definition,this,reader,context,get,registry,true,else,bean,name,this,reader,context,generate,bean,name,bean,definition,string,bean,class,name,bean,definition,get,bean,class,name,if,bean,class,name,null,bean,name,starts,with,bean,class,name,bean,name,length,bean,class,name,length,this,reader,context,get,registry,is,bean,name,in,use,bean,class,name,aliases,add,bean,class,name,if,logger,is,debug,enabled,logger,debug,neither,xml,id,nor,name,specified,using,generated,bean,name,bean,name,catch,exception,ex,error,ex,get,message,ele,return,null,string,aliases,array,string,utils,to,string,array,aliases,return,new,bean,definition,holder,bean,definition,bean,name,aliases,array,return,null
BeanDefinitionParserDelegate -> public BeanDefinitionHolder parseBeanDefinitionElement(Element ele, BeanDefinition containingBean);1447323728;Parses the supplied {@code <bean>} element. May return {@code null}_if there were errors during parse. Errors are reported to the_{@link org.springframework.beans.factory.parsing.ProblemReporter}.;public BeanDefinitionHolder parseBeanDefinitionElement(Element ele, BeanDefinition containingBean) {_		String id = ele.getAttribute(ID_ATTRIBUTE)__		String nameAttr = ele.getAttribute(NAME_ATTRIBUTE)___		List<String> aliases = new ArrayList<String>()__		if (StringUtils.hasLength(nameAttr)) {_			String[] nameArr = StringUtils.tokenizeToStringArray(nameAttr, MULTI_VALUE_ATTRIBUTE_DELIMITERS)__			aliases.addAll(Arrays.asList(nameArr))__		}__		String beanName = id__		if (!StringUtils.hasText(beanName) && !aliases.isEmpty()) {_			beanName = aliases.remove(0)__			if (logger.isDebugEnabled()) {_				logger.debug("No XML 'id' specified - using '" + beanName +_						"' as bean name and " + aliases + " as aliases")__			}_		}__		if (containingBean == null) {_			checkNameUniqueness(beanName, aliases, ele)__		}__		AbstractBeanDefinition beanDefinition = parseBeanDefinitionElement(ele, beanName, containingBean)__		if (beanDefinition != null) {_			if (!StringUtils.hasText(beanName)) {_				try {_					if (containingBean != null) {_						beanName = BeanDefinitionReaderUtils.generateBeanName(_								beanDefinition, this.readerContext.getRegistry(), true)__					}_					else {_						beanName = this.readerContext.generateBeanName(beanDefinition)__						_						_						_						String beanClassName = beanDefinition.getBeanClassName()__						if (beanClassName != null &&_								beanName.startsWith(beanClassName) && beanName.length() > beanClassName.length() &&_								!this.readerContext.getRegistry().isBeanNameInUse(beanClassName)) {_							aliases.add(beanClassName)__						}_					}_					if (logger.isDebugEnabled()) {_						logger.debug("Neither XML 'id' nor 'name' specified - " +_								"using generated bean name [" + beanName + "]")__					}_				}_				catch (Exception ex) {_					error(ex.getMessage(), ele)__					return null__				}_			}_			String[] aliasesArray = StringUtils.toStringArray(aliases)__			return new BeanDefinitionHolder(beanDefinition, beanName, aliasesArray)__		}__		return null__	};parses,the,supplied,code,bean,element,may,return,code,null,if,there,were,errors,during,parse,errors,are,reported,to,the,link,org,springframework,beans,factory,parsing,problem,reporter;public,bean,definition,holder,parse,bean,definition,element,element,ele,bean,definition,containing,bean,string,id,ele,get,attribute,string,name,attr,ele,get,attribute,list,string,aliases,new,array,list,string,if,string,utils,has,length,name,attr,string,name,arr,string,utils,tokenize,to,string,array,name,attr,aliases,add,all,arrays,as,list,name,arr,string,bean,name,id,if,string,utils,has,text,bean,name,aliases,is,empty,bean,name,aliases,remove,0,if,logger,is,debug,enabled,logger,debug,no,xml,id,specified,using,bean,name,as,bean,name,and,aliases,as,aliases,if,containing,bean,null,check,name,uniqueness,bean,name,aliases,ele,abstract,bean,definition,bean,definition,parse,bean,definition,element,ele,bean,name,containing,bean,if,bean,definition,null,if,string,utils,has,text,bean,name,try,if,containing,bean,null,bean,name,bean,definition,reader,utils,generate,bean,name,bean,definition,this,reader,context,get,registry,true,else,bean,name,this,reader,context,generate,bean,name,bean,definition,string,bean,class,name,bean,definition,get,bean,class,name,if,bean,class,name,null,bean,name,starts,with,bean,class,name,bean,name,length,bean,class,name,length,this,reader,context,get,registry,is,bean,name,in,use,bean,class,name,aliases,add,bean,class,name,if,logger,is,debug,enabled,logger,debug,neither,xml,id,nor,name,specified,using,generated,bean,name,bean,name,catch,exception,ex,error,ex,get,message,ele,return,null,string,aliases,array,string,utils,to,string,array,aliases,return,new,bean,definition,holder,bean,definition,bean,name,aliases,array,return,null
BeanDefinitionParserDelegate -> public BeanDefinitionHolder parseBeanDefinitionElement(Element ele, BeanDefinition containingBean);1467726769;Parses the supplied {@code <bean>} element. May return {@code null}_if there were errors during parse. Errors are reported to the_{@link org.springframework.beans.factory.parsing.ProblemReporter}.;public BeanDefinitionHolder parseBeanDefinitionElement(Element ele, BeanDefinition containingBean) {_		String id = ele.getAttribute(ID_ATTRIBUTE)__		String nameAttr = ele.getAttribute(NAME_ATTRIBUTE)___		List<String> aliases = new ArrayList<String>()__		if (StringUtils.hasLength(nameAttr)) {_			String[] nameArr = StringUtils.tokenizeToStringArray(nameAttr, MULTI_VALUE_ATTRIBUTE_DELIMITERS)__			aliases.addAll(Arrays.asList(nameArr))__		}__		String beanName = id__		if (!StringUtils.hasText(beanName) && !aliases.isEmpty()) {_			beanName = aliases.remove(0)__			if (logger.isDebugEnabled()) {_				logger.debug("No XML 'id' specified - using '" + beanName +_						"' as bean name and " + aliases + " as aliases")__			}_		}__		if (containingBean == null) {_			checkNameUniqueness(beanName, aliases, ele)__		}__		AbstractBeanDefinition beanDefinition = parseBeanDefinitionElement(ele, beanName, containingBean)__		if (beanDefinition != null) {_			if (!StringUtils.hasText(beanName)) {_				try {_					if (containingBean != null) {_						beanName = BeanDefinitionReaderUtils.generateBeanName(_								beanDefinition, this.readerContext.getRegistry(), true)__					}_					else {_						beanName = this.readerContext.generateBeanName(beanDefinition)__						_						_						_						String beanClassName = beanDefinition.getBeanClassName()__						if (beanClassName != null &&_								beanName.startsWith(beanClassName) && beanName.length() > beanClassName.length() &&_								!this.readerContext.getRegistry().isBeanNameInUse(beanClassName)) {_							aliases.add(beanClassName)__						}_					}_					if (logger.isDebugEnabled()) {_						logger.debug("Neither XML 'id' nor 'name' specified - " +_								"using generated bean name [" + beanName + "]")__					}_				}_				catch (Exception ex) {_					error(ex.getMessage(), ele)__					return null__				}_			}_			String[] aliasesArray = StringUtils.toStringArray(aliases)__			return new BeanDefinitionHolder(beanDefinition, beanName, aliasesArray)__		}__		return null__	};parses,the,supplied,code,bean,element,may,return,code,null,if,there,were,errors,during,parse,errors,are,reported,to,the,link,org,springframework,beans,factory,parsing,problem,reporter;public,bean,definition,holder,parse,bean,definition,element,element,ele,bean,definition,containing,bean,string,id,ele,get,attribute,string,name,attr,ele,get,attribute,list,string,aliases,new,array,list,string,if,string,utils,has,length,name,attr,string,name,arr,string,utils,tokenize,to,string,array,name,attr,aliases,add,all,arrays,as,list,name,arr,string,bean,name,id,if,string,utils,has,text,bean,name,aliases,is,empty,bean,name,aliases,remove,0,if,logger,is,debug,enabled,logger,debug,no,xml,id,specified,using,bean,name,as,bean,name,and,aliases,as,aliases,if,containing,bean,null,check,name,uniqueness,bean,name,aliases,ele,abstract,bean,definition,bean,definition,parse,bean,definition,element,ele,bean,name,containing,bean,if,bean,definition,null,if,string,utils,has,text,bean,name,try,if,containing,bean,null,bean,name,bean,definition,reader,utils,generate,bean,name,bean,definition,this,reader,context,get,registry,true,else,bean,name,this,reader,context,generate,bean,name,bean,definition,string,bean,class,name,bean,definition,get,bean,class,name,if,bean,class,name,null,bean,name,starts,with,bean,class,name,bean,name,length,bean,class,name,length,this,reader,context,get,registry,is,bean,name,in,use,bean,class,name,aliases,add,bean,class,name,if,logger,is,debug,enabled,logger,debug,neither,xml,id,nor,name,specified,using,generated,bean,name,bean,name,catch,exception,ex,error,ex,get,message,ele,return,null,string,aliases,array,string,utils,to,string,array,aliases,return,new,bean,definition,holder,bean,definition,bean,name,aliases,array,return,null
BeanDefinitionParserDelegate -> public BeanDefinitionHolder parseBeanDefinitionElement(Element ele, BeanDefinition containingBean);1467730834;Parses the supplied {@code <bean>} element. May return {@code null}_if there were errors during parse. Errors are reported to the_{@link org.springframework.beans.factory.parsing.ProblemReporter}.;public BeanDefinitionHolder parseBeanDefinitionElement(Element ele, BeanDefinition containingBean) {_		String id = ele.getAttribute(ID_ATTRIBUTE)__		String nameAttr = ele.getAttribute(NAME_ATTRIBUTE)___		List<String> aliases = new ArrayList<>()__		if (StringUtils.hasLength(nameAttr)) {_			String[] nameArr = StringUtils.tokenizeToStringArray(nameAttr, MULTI_VALUE_ATTRIBUTE_DELIMITERS)__			aliases.addAll(Arrays.asList(nameArr))__		}__		String beanName = id__		if (!StringUtils.hasText(beanName) && !aliases.isEmpty()) {_			beanName = aliases.remove(0)__			if (logger.isDebugEnabled()) {_				logger.debug("No XML 'id' specified - using '" + beanName +_						"' as bean name and " + aliases + " as aliases")__			}_		}__		if (containingBean == null) {_			checkNameUniqueness(beanName, aliases, ele)__		}__		AbstractBeanDefinition beanDefinition = parseBeanDefinitionElement(ele, beanName, containingBean)__		if (beanDefinition != null) {_			if (!StringUtils.hasText(beanName)) {_				try {_					if (containingBean != null) {_						beanName = BeanDefinitionReaderUtils.generateBeanName(_								beanDefinition, this.readerContext.getRegistry(), true)__					}_					else {_						beanName = this.readerContext.generateBeanName(beanDefinition)__						_						_						_						String beanClassName = beanDefinition.getBeanClassName()__						if (beanClassName != null &&_								beanName.startsWith(beanClassName) && beanName.length() > beanClassName.length() &&_								!this.readerContext.getRegistry().isBeanNameInUse(beanClassName)) {_							aliases.add(beanClassName)__						}_					}_					if (logger.isDebugEnabled()) {_						logger.debug("Neither XML 'id' nor 'name' specified - " +_								"using generated bean name [" + beanName + "]")__					}_				}_				catch (Exception ex) {_					error(ex.getMessage(), ele)__					return null__				}_			}_			String[] aliasesArray = StringUtils.toStringArray(aliases)__			return new BeanDefinitionHolder(beanDefinition, beanName, aliasesArray)__		}__		return null__	};parses,the,supplied,code,bean,element,may,return,code,null,if,there,were,errors,during,parse,errors,are,reported,to,the,link,org,springframework,beans,factory,parsing,problem,reporter;public,bean,definition,holder,parse,bean,definition,element,element,ele,bean,definition,containing,bean,string,id,ele,get,attribute,string,name,attr,ele,get,attribute,list,string,aliases,new,array,list,if,string,utils,has,length,name,attr,string,name,arr,string,utils,tokenize,to,string,array,name,attr,aliases,add,all,arrays,as,list,name,arr,string,bean,name,id,if,string,utils,has,text,bean,name,aliases,is,empty,bean,name,aliases,remove,0,if,logger,is,debug,enabled,logger,debug,no,xml,id,specified,using,bean,name,as,bean,name,and,aliases,as,aliases,if,containing,bean,null,check,name,uniqueness,bean,name,aliases,ele,abstract,bean,definition,bean,definition,parse,bean,definition,element,ele,bean,name,containing,bean,if,bean,definition,null,if,string,utils,has,text,bean,name,try,if,containing,bean,null,bean,name,bean,definition,reader,utils,generate,bean,name,bean,definition,this,reader,context,get,registry,true,else,bean,name,this,reader,context,generate,bean,name,bean,definition,string,bean,class,name,bean,definition,get,bean,class,name,if,bean,class,name,null,bean,name,starts,with,bean,class,name,bean,name,length,bean,class,name,length,this,reader,context,get,registry,is,bean,name,in,use,bean,class,name,aliases,add,bean,class,name,if,logger,is,debug,enabled,logger,debug,neither,xml,id,nor,name,specified,using,generated,bean,name,bean,name,catch,exception,ex,error,ex,get,message,ele,return,null,string,aliases,array,string,utils,to,string,array,aliases,return,new,bean,definition,holder,bean,definition,bean,name,aliases,array,return,null
BeanDefinitionParserDelegate -> public BeanDefinitionHolder parseBeanDefinitionElement(Element ele, BeanDefinition containingBean);1467744603;Parses the supplied {@code <bean>} element. May return {@code null}_if there were errors during parse. Errors are reported to the_{@link org.springframework.beans.factory.parsing.ProblemReporter}.;public BeanDefinitionHolder parseBeanDefinitionElement(Element ele, BeanDefinition containingBean) {_		String id = ele.getAttribute(ID_ATTRIBUTE)__		String nameAttr = ele.getAttribute(NAME_ATTRIBUTE)___		List<String> aliases = new ArrayList<>()__		if (StringUtils.hasLength(nameAttr)) {_			String[] nameArr = StringUtils.tokenizeToStringArray(nameAttr, MULTI_VALUE_ATTRIBUTE_DELIMITERS)__			aliases.addAll(Arrays.asList(nameArr))__		}__		String beanName = id__		if (!StringUtils.hasText(beanName) && !aliases.isEmpty()) {_			beanName = aliases.remove(0)__			if (logger.isDebugEnabled()) {_				logger.debug("No XML 'id' specified - using '" + beanName +_						"' as bean name and " + aliases + " as aliases")__			}_		}__		if (containingBean == null) {_			checkNameUniqueness(beanName, aliases, ele)__		}__		AbstractBeanDefinition beanDefinition = parseBeanDefinitionElement(ele, beanName, containingBean)__		if (beanDefinition != null) {_			if (!StringUtils.hasText(beanName)) {_				try {_					if (containingBean != null) {_						beanName = BeanDefinitionReaderUtils.generateBeanName(_								beanDefinition, this.readerContext.getRegistry(), true)__					}_					else {_						beanName = this.readerContext.generateBeanName(beanDefinition)__						_						_						_						String beanClassName = beanDefinition.getBeanClassName()__						if (beanClassName != null &&_								beanName.startsWith(beanClassName) && beanName.length() > beanClassName.length() &&_								!this.readerContext.getRegistry().isBeanNameInUse(beanClassName)) {_							aliases.add(beanClassName)__						}_					}_					if (logger.isDebugEnabled()) {_						logger.debug("Neither XML 'id' nor 'name' specified - " +_								"using generated bean name [" + beanName + "]")__					}_				}_				catch (Exception ex) {_					error(ex.getMessage(), ele)__					return null__				}_			}_			String[] aliasesArray = StringUtils.toStringArray(aliases)__			return new BeanDefinitionHolder(beanDefinition, beanName, aliasesArray)__		}__		return null__	};parses,the,supplied,code,bean,element,may,return,code,null,if,there,were,errors,during,parse,errors,are,reported,to,the,link,org,springframework,beans,factory,parsing,problem,reporter;public,bean,definition,holder,parse,bean,definition,element,element,ele,bean,definition,containing,bean,string,id,ele,get,attribute,string,name,attr,ele,get,attribute,list,string,aliases,new,array,list,if,string,utils,has,length,name,attr,string,name,arr,string,utils,tokenize,to,string,array,name,attr,aliases,add,all,arrays,as,list,name,arr,string,bean,name,id,if,string,utils,has,text,bean,name,aliases,is,empty,bean,name,aliases,remove,0,if,logger,is,debug,enabled,logger,debug,no,xml,id,specified,using,bean,name,as,bean,name,and,aliases,as,aliases,if,containing,bean,null,check,name,uniqueness,bean,name,aliases,ele,abstract,bean,definition,bean,definition,parse,bean,definition,element,ele,bean,name,containing,bean,if,bean,definition,null,if,string,utils,has,text,bean,name,try,if,containing,bean,null,bean,name,bean,definition,reader,utils,generate,bean,name,bean,definition,this,reader,context,get,registry,true,else,bean,name,this,reader,context,generate,bean,name,bean,definition,string,bean,class,name,bean,definition,get,bean,class,name,if,bean,class,name,null,bean,name,starts,with,bean,class,name,bean,name,length,bean,class,name,length,this,reader,context,get,registry,is,bean,name,in,use,bean,class,name,aliases,add,bean,class,name,if,logger,is,debug,enabled,logger,debug,neither,xml,id,nor,name,specified,using,generated,bean,name,bean,name,catch,exception,ex,error,ex,get,message,ele,return,null,string,aliases,array,string,utils,to,string,array,aliases,return,new,bean,definition,holder,bean,definition,bean,name,aliases,array,return,null
BeanDefinitionParserDelegate -> public BeanDefinitionHolder parseBeanDefinitionElement(Element ele, BeanDefinition containingBean);1487245676;Parses the supplied {@code <bean>} element. May return {@code null}_if there were errors during parse. Errors are reported to the_{@link org.springframework.beans.factory.parsing.ProblemReporter}.;public BeanDefinitionHolder parseBeanDefinitionElement(Element ele, BeanDefinition containingBean) {_		String id = ele.getAttribute(ID_ATTRIBUTE)__		String nameAttr = ele.getAttribute(NAME_ATTRIBUTE)___		List<String> aliases = new ArrayList<>()__		if (StringUtils.hasLength(nameAttr)) {_			String[] nameArr = StringUtils.tokenizeToStringArray(nameAttr, MULTI_VALUE_ATTRIBUTE_DELIMITERS)__			aliases.addAll(Arrays.asList(nameArr))__		}__		String beanName = id__		if (!StringUtils.hasText(beanName) && !aliases.isEmpty()) {_			beanName = aliases.remove(0)__			if (logger.isDebugEnabled()) {_				logger.debug("No XML 'id' specified - using '" + beanName +_						"' as bean name and " + aliases + " as aliases")__			}_		}__		if (containingBean == null) {_			checkNameUniqueness(beanName, aliases, ele)__		}__		AbstractBeanDefinition beanDefinition = parseBeanDefinitionElement(ele, beanName, containingBean)__		if (beanDefinition != null) {_			if (!StringUtils.hasText(beanName)) {_				try {_					if (containingBean != null) {_						beanName = BeanDefinitionReaderUtils.generateBeanName(_								beanDefinition, this.readerContext.getRegistry(), true)__					}_					else {_						beanName = this.readerContext.generateBeanName(beanDefinition)__						_						_						_						String beanClassName = beanDefinition.getBeanClassName()__						if (beanClassName != null &&_								beanName.startsWith(beanClassName) && beanName.length() > beanClassName.length() &&_								!this.readerContext.getRegistry().isBeanNameInUse(beanClassName)) {_							aliases.add(beanClassName)__						}_					}_					if (logger.isDebugEnabled()) {_						logger.debug("Neither XML 'id' nor 'name' specified - " +_								"using generated bean name [" + beanName + "]")__					}_				}_				catch (Exception ex) {_					error(ex.getMessage(), ele)__					return null__				}_			}_			String[] aliasesArray = StringUtils.toStringArray(aliases)__			return new BeanDefinitionHolder(beanDefinition, beanName, aliasesArray)__		}__		return null__	};parses,the,supplied,code,bean,element,may,return,code,null,if,there,were,errors,during,parse,errors,are,reported,to,the,link,org,springframework,beans,factory,parsing,problem,reporter;public,bean,definition,holder,parse,bean,definition,element,element,ele,bean,definition,containing,bean,string,id,ele,get,attribute,string,name,attr,ele,get,attribute,list,string,aliases,new,array,list,if,string,utils,has,length,name,attr,string,name,arr,string,utils,tokenize,to,string,array,name,attr,aliases,add,all,arrays,as,list,name,arr,string,bean,name,id,if,string,utils,has,text,bean,name,aliases,is,empty,bean,name,aliases,remove,0,if,logger,is,debug,enabled,logger,debug,no,xml,id,specified,using,bean,name,as,bean,name,and,aliases,as,aliases,if,containing,bean,null,check,name,uniqueness,bean,name,aliases,ele,abstract,bean,definition,bean,definition,parse,bean,definition,element,ele,bean,name,containing,bean,if,bean,definition,null,if,string,utils,has,text,bean,name,try,if,containing,bean,null,bean,name,bean,definition,reader,utils,generate,bean,name,bean,definition,this,reader,context,get,registry,true,else,bean,name,this,reader,context,generate,bean,name,bean,definition,string,bean,class,name,bean,definition,get,bean,class,name,if,bean,class,name,null,bean,name,starts,with,bean,class,name,bean,name,length,bean,class,name,length,this,reader,context,get,registry,is,bean,name,in,use,bean,class,name,aliases,add,bean,class,name,if,logger,is,debug,enabled,logger,debug,neither,xml,id,nor,name,specified,using,generated,bean,name,bean,name,catch,exception,ex,error,ex,get,message,ele,return,null,string,aliases,array,string,utils,to,string,array,aliases,return,new,bean,definition,holder,bean,definition,bean,name,aliases,array,return,null
BeanDefinitionParserDelegate -> public BeanDefinitionHolder parseBeanDefinitionElement(Element ele, BeanDefinition containingBean);1487255851;Parses the supplied {@code <bean>} element. May return {@code null}_if there were errors during parse. Errors are reported to the_{@link org.springframework.beans.factory.parsing.ProblemReporter}.;public BeanDefinitionHolder parseBeanDefinitionElement(Element ele, BeanDefinition containingBean) {_		String id = ele.getAttribute(ID_ATTRIBUTE)__		String nameAttr = ele.getAttribute(NAME_ATTRIBUTE)___		List<String> aliases = new ArrayList<>()__		if (StringUtils.hasLength(nameAttr)) {_			String[] nameArr = StringUtils.tokenizeToStringArray(nameAttr, MULTI_VALUE_ATTRIBUTE_DELIMITERS)__			aliases.addAll(Arrays.asList(nameArr))__		}__		String beanName = id__		if (!StringUtils.hasText(beanName) && !aliases.isEmpty()) {_			beanName = aliases.remove(0)__			if (logger.isDebugEnabled()) {_				logger.debug("No XML 'id' specified - using '" + beanName +_						"' as bean name and " + aliases + " as aliases")__			}_		}__		if (containingBean == null) {_			checkNameUniqueness(beanName, aliases, ele)__		}__		AbstractBeanDefinition beanDefinition = parseBeanDefinitionElement(ele, beanName, containingBean)__		if (beanDefinition != null) {_			if (!StringUtils.hasText(beanName)) {_				try {_					if (containingBean != null) {_						beanName = BeanDefinitionReaderUtils.generateBeanName(_								beanDefinition, this.readerContext.getRegistry(), true)__					}_					else {_						beanName = this.readerContext.generateBeanName(beanDefinition)__						_						_						_						String beanClassName = beanDefinition.getBeanClassName()__						if (beanClassName != null &&_								beanName.startsWith(beanClassName) && beanName.length() > beanClassName.length() &&_								!this.readerContext.getRegistry().isBeanNameInUse(beanClassName)) {_							aliases.add(beanClassName)__						}_					}_					if (logger.isDebugEnabled()) {_						logger.debug("Neither XML 'id' nor 'name' specified - " +_								"using generated bean name [" + beanName + "]")__					}_				}_				catch (Exception ex) {_					error(ex.getMessage(), ele)__					return null__				}_			}_			String[] aliasesArray = StringUtils.toStringArray(aliases)__			return new BeanDefinitionHolder(beanDefinition, beanName, aliasesArray)__		}__		return null__	};parses,the,supplied,code,bean,element,may,return,code,null,if,there,were,errors,during,parse,errors,are,reported,to,the,link,org,springframework,beans,factory,parsing,problem,reporter;public,bean,definition,holder,parse,bean,definition,element,element,ele,bean,definition,containing,bean,string,id,ele,get,attribute,string,name,attr,ele,get,attribute,list,string,aliases,new,array,list,if,string,utils,has,length,name,attr,string,name,arr,string,utils,tokenize,to,string,array,name,attr,aliases,add,all,arrays,as,list,name,arr,string,bean,name,id,if,string,utils,has,text,bean,name,aliases,is,empty,bean,name,aliases,remove,0,if,logger,is,debug,enabled,logger,debug,no,xml,id,specified,using,bean,name,as,bean,name,and,aliases,as,aliases,if,containing,bean,null,check,name,uniqueness,bean,name,aliases,ele,abstract,bean,definition,bean,definition,parse,bean,definition,element,ele,bean,name,containing,bean,if,bean,definition,null,if,string,utils,has,text,bean,name,try,if,containing,bean,null,bean,name,bean,definition,reader,utils,generate,bean,name,bean,definition,this,reader,context,get,registry,true,else,bean,name,this,reader,context,generate,bean,name,bean,definition,string,bean,class,name,bean,definition,get,bean,class,name,if,bean,class,name,null,bean,name,starts,with,bean,class,name,bean,name,length,bean,class,name,length,this,reader,context,get,registry,is,bean,name,in,use,bean,class,name,aliases,add,bean,class,name,if,logger,is,debug,enabled,logger,debug,neither,xml,id,nor,name,specified,using,generated,bean,name,bean,name,catch,exception,ex,error,ex,get,message,ele,return,null,string,aliases,array,string,utils,to,string,array,aliases,return,new,bean,definition,holder,bean,definition,bean,name,aliases,array,return,null
BeanDefinitionParserDelegate -> public BeanDefinitionHolder parseBeanDefinitionElement(Element ele, BeanDefinition containingBean);1494586217;Parses the supplied {@code <bean>} element. May return {@code null}_if there were errors during parse. Errors are reported to the_{@link org.springframework.beans.factory.parsing.ProblemReporter}.;public BeanDefinitionHolder parseBeanDefinitionElement(Element ele, BeanDefinition containingBean) {_		String id = ele.getAttribute(ID_ATTRIBUTE)__		String nameAttr = ele.getAttribute(NAME_ATTRIBUTE)___		List<String> aliases = new ArrayList<>()__		if (StringUtils.hasLength(nameAttr)) {_			String[] nameArr = StringUtils.tokenizeToStringArray(nameAttr, MULTI_VALUE_ATTRIBUTE_DELIMITERS)__			aliases.addAll(Arrays.asList(nameArr))__		}__		String beanName = id__		if (!StringUtils.hasText(beanName) && !aliases.isEmpty()) {_			beanName = aliases.remove(0)__			if (logger.isDebugEnabled()) {_				logger.debug("No XML 'id' specified - using '" + beanName +_						"' as bean name and " + aliases + " as aliases")__			}_		}__		if (containingBean == null) {_			checkNameUniqueness(beanName, aliases, ele)__		}__		AbstractBeanDefinition beanDefinition = parseBeanDefinitionElement(ele, beanName, containingBean)__		if (beanDefinition != null) {_			if (!StringUtils.hasText(beanName)) {_				try {_					if (containingBean != null) {_						beanName = BeanDefinitionReaderUtils.generateBeanName(_								beanDefinition, this.readerContext.getRegistry(), true)__					}_					else {_						beanName = this.readerContext.generateBeanName(beanDefinition)__						_						_						_						String beanClassName = beanDefinition.getBeanClassName()__						if (beanClassName != null &&_								beanName.startsWith(beanClassName) && beanName.length() > beanClassName.length() &&_								!this.readerContext.getRegistry().isBeanNameInUse(beanClassName)) {_							aliases.add(beanClassName)__						}_					}_					if (logger.isDebugEnabled()) {_						logger.debug("Neither XML 'id' nor 'name' specified - " +_								"using generated bean name [" + beanName + "]")__					}_				}_				catch (Exception ex) {_					error(ex.getMessage(), ele)__					return null__				}_			}_			String[] aliasesArray = StringUtils.toStringArray(aliases)__			return new BeanDefinitionHolder(beanDefinition, beanName, aliasesArray)__		}__		return null__	};parses,the,supplied,code,bean,element,may,return,code,null,if,there,were,errors,during,parse,errors,are,reported,to,the,link,org,springframework,beans,factory,parsing,problem,reporter;public,bean,definition,holder,parse,bean,definition,element,element,ele,bean,definition,containing,bean,string,id,ele,get,attribute,string,name,attr,ele,get,attribute,list,string,aliases,new,array,list,if,string,utils,has,length,name,attr,string,name,arr,string,utils,tokenize,to,string,array,name,attr,aliases,add,all,arrays,as,list,name,arr,string,bean,name,id,if,string,utils,has,text,bean,name,aliases,is,empty,bean,name,aliases,remove,0,if,logger,is,debug,enabled,logger,debug,no,xml,id,specified,using,bean,name,as,bean,name,and,aliases,as,aliases,if,containing,bean,null,check,name,uniqueness,bean,name,aliases,ele,abstract,bean,definition,bean,definition,parse,bean,definition,element,ele,bean,name,containing,bean,if,bean,definition,null,if,string,utils,has,text,bean,name,try,if,containing,bean,null,bean,name,bean,definition,reader,utils,generate,bean,name,bean,definition,this,reader,context,get,registry,true,else,bean,name,this,reader,context,generate,bean,name,bean,definition,string,bean,class,name,bean,definition,get,bean,class,name,if,bean,class,name,null,bean,name,starts,with,bean,class,name,bean,name,length,bean,class,name,length,this,reader,context,get,registry,is,bean,name,in,use,bean,class,name,aliases,add,bean,class,name,if,logger,is,debug,enabled,logger,debug,neither,xml,id,nor,name,specified,using,generated,bean,name,bean,name,catch,exception,ex,error,ex,get,message,ele,return,null,string,aliases,array,string,utils,to,string,array,aliases,return,new,bean,definition,holder,bean,definition,bean,name,aliases,array,return,null
BeanDefinitionParserDelegate -> @Nullable 	public Object parsePropertyValue(Element ele, BeanDefinition bd, @Nullable String propertyName);1496259743;Get the value of a property element. May be a list etc._Also used for constructor arguments, "propertyName" being null in this case.;@Nullable_	public Object parsePropertyValue(Element ele, BeanDefinition bd, @Nullable String propertyName) {_		String elementName = (propertyName != null) ?_						"<property> element for property '" + propertyName + "'" :_						"<constructor-arg> element"___		_		NodeList nl = ele.getChildNodes()__		Element subElement = null__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element && !nodeNameEquals(node, DESCRIPTION_ELEMENT) &&_					!nodeNameEquals(node, META_ELEMENT)) {_				_				if (subElement != null) {_					error(elementName + " must not contain more than one sub-element", ele)__				}_				else {_					subElement = (Element) node__				}_			}_		}__		boolean hasRefAttribute = ele.hasAttribute(REF_ATTRIBUTE)__		boolean hasValueAttribute = ele.hasAttribute(VALUE_ATTRIBUTE)__		if ((hasRefAttribute && hasValueAttribute) ||_				((hasRefAttribute || hasValueAttribute) && subElement != null)) {_			error(elementName +_					" is only allowed to contain either 'ref' attribute OR 'value' attribute OR sub-element", ele)__		}__		if (hasRefAttribute) {_			String refName = ele.getAttribute(REF_ATTRIBUTE)__			if (!StringUtils.hasText(refName)) {_				error(elementName + " contains empty 'ref' attribute", ele)__			}_			RuntimeBeanReference ref = new RuntimeBeanReference(refName)__			ref.setSource(extractSource(ele))__			return ref__		}_		else if (hasValueAttribute) {_			TypedStringValue valueHolder = new TypedStringValue(ele.getAttribute(VALUE_ATTRIBUTE))__			valueHolder.setSource(extractSource(ele))__			return valueHolder__		}_		else if (subElement != null) {_			return parsePropertySubElement(subElement, bd)__		}_		else {_			_			error(elementName + " must specify a ref or value", ele)__			return null__		}_	};get,the,value,of,a,property,element,may,be,a,list,etc,also,used,for,constructor,arguments,property,name,being,null,in,this,case;nullable,public,object,parse,property,value,element,ele,bean,definition,bd,nullable,string,property,name,string,element,name,property,name,null,property,element,for,property,property,name,constructor,arg,element,node,list,nl,ele,get,child,nodes,element,sub,element,null,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,node,name,equals,node,node,name,equals,node,if,sub,element,null,error,element,name,must,not,contain,more,than,one,sub,element,ele,else,sub,element,element,node,boolean,has,ref,attribute,ele,has,attribute,boolean,has,value,attribute,ele,has,attribute,if,has,ref,attribute,has,value,attribute,has,ref,attribute,has,value,attribute,sub,element,null,error,element,name,is,only,allowed,to,contain,either,ref,attribute,or,value,attribute,or,sub,element,ele,if,has,ref,attribute,string,ref,name,ele,get,attribute,if,string,utils,has,text,ref,name,error,element,name,contains,empty,ref,attribute,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,ele,return,ref,else,if,has,value,attribute,typed,string,value,value,holder,new,typed,string,value,ele,get,attribute,value,holder,set,source,extract,source,ele,return,value,holder,else,if,sub,element,null,return,parse,property,sub,element,sub,element,bd,else,error,element,name,must,specify,a,ref,or,value,ele,return,null
BeanDefinitionParserDelegate -> @Nullable 	public Object parsePropertyValue(Element ele, BeanDefinition bd, @Nullable String propertyName);1496837955;Get the value of a property element. May be a list etc._Also used for constructor arguments, "propertyName" being null in this case.;@Nullable_	public Object parsePropertyValue(Element ele, BeanDefinition bd, @Nullable String propertyName) {_		String elementName = (propertyName != null) ?_						"<property> element for property '" + propertyName + "'" :_						"<constructor-arg> element"___		_		NodeList nl = ele.getChildNodes()__		Element subElement = null__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element && !nodeNameEquals(node, DESCRIPTION_ELEMENT) &&_					!nodeNameEquals(node, META_ELEMENT)) {_				_				if (subElement != null) {_					error(elementName + " must not contain more than one sub-element", ele)__				}_				else {_					subElement = (Element) node__				}_			}_		}__		boolean hasRefAttribute = ele.hasAttribute(REF_ATTRIBUTE)__		boolean hasValueAttribute = ele.hasAttribute(VALUE_ATTRIBUTE)__		if ((hasRefAttribute && hasValueAttribute) ||_				((hasRefAttribute || hasValueAttribute) && subElement != null)) {_			error(elementName +_					" is only allowed to contain either 'ref' attribute OR 'value' attribute OR sub-element", ele)__		}__		if (hasRefAttribute) {_			String refName = ele.getAttribute(REF_ATTRIBUTE)__			if (!StringUtils.hasText(refName)) {_				error(elementName + " contains empty 'ref' attribute", ele)__			}_			RuntimeBeanReference ref = new RuntimeBeanReference(refName)__			ref.setSource(extractSource(ele))__			return ref__		}_		else if (hasValueAttribute) {_			TypedStringValue valueHolder = new TypedStringValue(ele.getAttribute(VALUE_ATTRIBUTE))__			valueHolder.setSource(extractSource(ele))__			return valueHolder__		}_		else if (subElement != null) {_			return parsePropertySubElement(subElement, bd)__		}_		else {_			_			error(elementName + " must specify a ref or value", ele)__			return null__		}_	};get,the,value,of,a,property,element,may,be,a,list,etc,also,used,for,constructor,arguments,property,name,being,null,in,this,case;nullable,public,object,parse,property,value,element,ele,bean,definition,bd,nullable,string,property,name,string,element,name,property,name,null,property,element,for,property,property,name,constructor,arg,element,node,list,nl,ele,get,child,nodes,element,sub,element,null,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,node,name,equals,node,node,name,equals,node,if,sub,element,null,error,element,name,must,not,contain,more,than,one,sub,element,ele,else,sub,element,element,node,boolean,has,ref,attribute,ele,has,attribute,boolean,has,value,attribute,ele,has,attribute,if,has,ref,attribute,has,value,attribute,has,ref,attribute,has,value,attribute,sub,element,null,error,element,name,is,only,allowed,to,contain,either,ref,attribute,or,value,attribute,or,sub,element,ele,if,has,ref,attribute,string,ref,name,ele,get,attribute,if,string,utils,has,text,ref,name,error,element,name,contains,empty,ref,attribute,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,ele,return,ref,else,if,has,value,attribute,typed,string,value,value,holder,new,typed,string,value,ele,get,attribute,value,holder,set,source,extract,source,ele,return,value,holder,else,if,sub,element,null,return,parse,property,sub,element,sub,element,bd,else,error,element,name,must,specify,a,ref,or,value,ele,return,null
BeanDefinitionParserDelegate -> @Nullable 	public Object parsePropertyValue(Element ele, BeanDefinition bd, @Nullable String propertyName);1503008029;Get the value of a property element. May be a list etc._Also used for constructor arguments, "propertyName" being null in this case.;@Nullable_	public Object parsePropertyValue(Element ele, BeanDefinition bd, @Nullable String propertyName) {_		String elementName = (propertyName != null) ?_						"<property> element for property '" + propertyName + "'" :_						"<constructor-arg> element"___		_		NodeList nl = ele.getChildNodes()__		Element subElement = null__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element && !nodeNameEquals(node, DESCRIPTION_ELEMENT) &&_					!nodeNameEquals(node, META_ELEMENT)) {_				_				if (subElement != null) {_					error(elementName + " must not contain more than one sub-element", ele)__				}_				else {_					subElement = (Element) node__				}_			}_		}__		boolean hasRefAttribute = ele.hasAttribute(REF_ATTRIBUTE)__		boolean hasValueAttribute = ele.hasAttribute(VALUE_ATTRIBUTE)__		if ((hasRefAttribute && hasValueAttribute) ||_				((hasRefAttribute || hasValueAttribute) && subElement != null)) {_			error(elementName +_					" is only allowed to contain either 'ref' attribute OR 'value' attribute OR sub-element", ele)__		}__		if (hasRefAttribute) {_			String refName = ele.getAttribute(REF_ATTRIBUTE)__			if (!StringUtils.hasText(refName)) {_				error(elementName + " contains empty 'ref' attribute", ele)__			}_			RuntimeBeanReference ref = new RuntimeBeanReference(refName)__			ref.setSource(extractSource(ele))__			return ref__		}_		else if (hasValueAttribute) {_			TypedStringValue valueHolder = new TypedStringValue(ele.getAttribute(VALUE_ATTRIBUTE))__			valueHolder.setSource(extractSource(ele))__			return valueHolder__		}_		else if (subElement != null) {_			return parsePropertySubElement(subElement, bd)__		}_		else {_			_			error(elementName + " must specify a ref or value", ele)__			return null__		}_	};get,the,value,of,a,property,element,may,be,a,list,etc,also,used,for,constructor,arguments,property,name,being,null,in,this,case;nullable,public,object,parse,property,value,element,ele,bean,definition,bd,nullable,string,property,name,string,element,name,property,name,null,property,element,for,property,property,name,constructor,arg,element,node,list,nl,ele,get,child,nodes,element,sub,element,null,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,node,name,equals,node,node,name,equals,node,if,sub,element,null,error,element,name,must,not,contain,more,than,one,sub,element,ele,else,sub,element,element,node,boolean,has,ref,attribute,ele,has,attribute,boolean,has,value,attribute,ele,has,attribute,if,has,ref,attribute,has,value,attribute,has,ref,attribute,has,value,attribute,sub,element,null,error,element,name,is,only,allowed,to,contain,either,ref,attribute,or,value,attribute,or,sub,element,ele,if,has,ref,attribute,string,ref,name,ele,get,attribute,if,string,utils,has,text,ref,name,error,element,name,contains,empty,ref,attribute,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,ele,return,ref,else,if,has,value,attribute,typed,string,value,value,holder,new,typed,string,value,ele,get,attribute,value,holder,set,source,extract,source,ele,return,value,holder,else,if,sub,element,null,return,parse,property,sub,element,sub,element,bd,else,error,element,name,must,specify,a,ref,or,value,ele,return,null
BeanDefinitionParserDelegate -> @Nullable 	public Object parsePropertyValue(Element ele, BeanDefinition bd, @Nullable String propertyName);1519513303;Get the value of a property element. May be a list etc._Also used for constructor arguments, "propertyName" being null in this case.;@Nullable_	public Object parsePropertyValue(Element ele, BeanDefinition bd, @Nullable String propertyName) {_		String elementName = (propertyName != null) ?_						"<property> element for property '" + propertyName + "'" :_						"<constructor-arg> element"___		_		NodeList nl = ele.getChildNodes()__		Element subElement = null__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element && !nodeNameEquals(node, DESCRIPTION_ELEMENT) &&_					!nodeNameEquals(node, META_ELEMENT)) {_				_				if (subElement != null) {_					error(elementName + " must not contain more than one sub-element", ele)__				}_				else {_					subElement = (Element) node__				}_			}_		}__		boolean hasRefAttribute = ele.hasAttribute(REF_ATTRIBUTE)__		boolean hasValueAttribute = ele.hasAttribute(VALUE_ATTRIBUTE)__		if ((hasRefAttribute && hasValueAttribute) ||_				((hasRefAttribute || hasValueAttribute) && subElement != null)) {_			error(elementName +_					" is only allowed to contain either 'ref' attribute OR 'value' attribute OR sub-element", ele)__		}__		if (hasRefAttribute) {_			String refName = ele.getAttribute(REF_ATTRIBUTE)__			if (!StringUtils.hasText(refName)) {_				error(elementName + " contains empty 'ref' attribute", ele)__			}_			RuntimeBeanReference ref = new RuntimeBeanReference(refName)__			ref.setSource(extractSource(ele))__			return ref__		}_		else if (hasValueAttribute) {_			TypedStringValue valueHolder = new TypedStringValue(ele.getAttribute(VALUE_ATTRIBUTE))__			valueHolder.setSource(extractSource(ele))__			return valueHolder__		}_		else if (subElement != null) {_			return parsePropertySubElement(subElement, bd)__		}_		else {_			_			error(elementName + " must specify a ref or value", ele)__			return null__		}_	};get,the,value,of,a,property,element,may,be,a,list,etc,also,used,for,constructor,arguments,property,name,being,null,in,this,case;nullable,public,object,parse,property,value,element,ele,bean,definition,bd,nullable,string,property,name,string,element,name,property,name,null,property,element,for,property,property,name,constructor,arg,element,node,list,nl,ele,get,child,nodes,element,sub,element,null,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,node,name,equals,node,node,name,equals,node,if,sub,element,null,error,element,name,must,not,contain,more,than,one,sub,element,ele,else,sub,element,element,node,boolean,has,ref,attribute,ele,has,attribute,boolean,has,value,attribute,ele,has,attribute,if,has,ref,attribute,has,value,attribute,has,ref,attribute,has,value,attribute,sub,element,null,error,element,name,is,only,allowed,to,contain,either,ref,attribute,or,value,attribute,or,sub,element,ele,if,has,ref,attribute,string,ref,name,ele,get,attribute,if,string,utils,has,text,ref,name,error,element,name,contains,empty,ref,attribute,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,ele,return,ref,else,if,has,value,attribute,typed,string,value,value,holder,new,typed,string,value,ele,get,attribute,value,holder,set,source,extract,source,ele,return,value,holder,else,if,sub,element,null,return,parse,property,sub,element,sub,element,bd,else,error,element,name,must,specify,a,ref,or,value,ele,return,null
BeanDefinitionParserDelegate -> @Nullable 	public Object parsePropertyValue(Element ele, BeanDefinition bd, @Nullable String propertyName);1530174524;Get the value of a property element. May be a list etc._Also used for constructor arguments, "propertyName" being null in this case.;@Nullable_	public Object parsePropertyValue(Element ele, BeanDefinition bd, @Nullable String propertyName) {_		String elementName = (propertyName != null) ?_						"<property> element for property '" + propertyName + "'" :_						"<constructor-arg> element"___		_		NodeList nl = ele.getChildNodes()__		Element subElement = null__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element && !nodeNameEquals(node, DESCRIPTION_ELEMENT) &&_					!nodeNameEquals(node, META_ELEMENT)) {_				_				if (subElement != null) {_					error(elementName + " must not contain more than one sub-element", ele)__				}_				else {_					subElement = (Element) node__				}_			}_		}__		boolean hasRefAttribute = ele.hasAttribute(REF_ATTRIBUTE)__		boolean hasValueAttribute = ele.hasAttribute(VALUE_ATTRIBUTE)__		if ((hasRefAttribute && hasValueAttribute) ||_				((hasRefAttribute || hasValueAttribute) && subElement != null)) {_			error(elementName +_					" is only allowed to contain either 'ref' attribute OR 'value' attribute OR sub-element", ele)__		}__		if (hasRefAttribute) {_			String refName = ele.getAttribute(REF_ATTRIBUTE)__			if (!StringUtils.hasText(refName)) {_				error(elementName + " contains empty 'ref' attribute", ele)__			}_			RuntimeBeanReference ref = new RuntimeBeanReference(refName)__			ref.setSource(extractSource(ele))__			return ref__		}_		else if (hasValueAttribute) {_			TypedStringValue valueHolder = new TypedStringValue(ele.getAttribute(VALUE_ATTRIBUTE))__			valueHolder.setSource(extractSource(ele))__			return valueHolder__		}_		else if (subElement != null) {_			return parsePropertySubElement(subElement, bd)__		}_		else {_			_			error(elementName + " must specify a ref or value", ele)__			return null__		}_	};get,the,value,of,a,property,element,may,be,a,list,etc,also,used,for,constructor,arguments,property,name,being,null,in,this,case;nullable,public,object,parse,property,value,element,ele,bean,definition,bd,nullable,string,property,name,string,element,name,property,name,null,property,element,for,property,property,name,constructor,arg,element,node,list,nl,ele,get,child,nodes,element,sub,element,null,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,node,name,equals,node,node,name,equals,node,if,sub,element,null,error,element,name,must,not,contain,more,than,one,sub,element,ele,else,sub,element,element,node,boolean,has,ref,attribute,ele,has,attribute,boolean,has,value,attribute,ele,has,attribute,if,has,ref,attribute,has,value,attribute,has,ref,attribute,has,value,attribute,sub,element,null,error,element,name,is,only,allowed,to,contain,either,ref,attribute,or,value,attribute,or,sub,element,ele,if,has,ref,attribute,string,ref,name,ele,get,attribute,if,string,utils,has,text,ref,name,error,element,name,contains,empty,ref,attribute,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,ele,return,ref,else,if,has,value,attribute,typed,string,value,value,holder,new,typed,string,value,ele,get,attribute,value,holder,set,source,extract,source,ele,return,value,holder,else,if,sub,element,null,return,parse,property,sub,element,sub,element,bd,else,error,element,name,must,specify,a,ref,or,value,ele,return,null
BeanDefinitionParserDelegate -> @Nullable 	public Object parsePropertyValue(Element ele, BeanDefinition bd, @Nullable String propertyName);1530190293;Get the value of a property element. May be a list etc._Also used for constructor arguments, "propertyName" being null in this case.;@Nullable_	public Object parsePropertyValue(Element ele, BeanDefinition bd, @Nullable String propertyName) {_		String elementName = (propertyName != null ?_				"<property> element for property '" + propertyName + "'" :_				"<constructor-arg> element")___		_		NodeList nl = ele.getChildNodes()__		Element subElement = null__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element && !nodeNameEquals(node, DESCRIPTION_ELEMENT) &&_					!nodeNameEquals(node, META_ELEMENT)) {_				_				if (subElement != null) {_					error(elementName + " must not contain more than one sub-element", ele)__				}_				else {_					subElement = (Element) node__				}_			}_		}__		boolean hasRefAttribute = ele.hasAttribute(REF_ATTRIBUTE)__		boolean hasValueAttribute = ele.hasAttribute(VALUE_ATTRIBUTE)__		if ((hasRefAttribute && hasValueAttribute) ||_				((hasRefAttribute || hasValueAttribute) && subElement != null)) {_			error(elementName +_					" is only allowed to contain either 'ref' attribute OR 'value' attribute OR sub-element", ele)__		}__		if (hasRefAttribute) {_			String refName = ele.getAttribute(REF_ATTRIBUTE)__			if (!StringUtils.hasText(refName)) {_				error(elementName + " contains empty 'ref' attribute", ele)__			}_			RuntimeBeanReference ref = new RuntimeBeanReference(refName)__			ref.setSource(extractSource(ele))__			return ref__		}_		else if (hasValueAttribute) {_			TypedStringValue valueHolder = new TypedStringValue(ele.getAttribute(VALUE_ATTRIBUTE))__			valueHolder.setSource(extractSource(ele))__			return valueHolder__		}_		else if (subElement != null) {_			return parsePropertySubElement(subElement, bd)__		}_		else {_			_			error(elementName + " must specify a ref or value", ele)__			return null__		}_	};get,the,value,of,a,property,element,may,be,a,list,etc,also,used,for,constructor,arguments,property,name,being,null,in,this,case;nullable,public,object,parse,property,value,element,ele,bean,definition,bd,nullable,string,property,name,string,element,name,property,name,null,property,element,for,property,property,name,constructor,arg,element,node,list,nl,ele,get,child,nodes,element,sub,element,null,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,node,name,equals,node,node,name,equals,node,if,sub,element,null,error,element,name,must,not,contain,more,than,one,sub,element,ele,else,sub,element,element,node,boolean,has,ref,attribute,ele,has,attribute,boolean,has,value,attribute,ele,has,attribute,if,has,ref,attribute,has,value,attribute,has,ref,attribute,has,value,attribute,sub,element,null,error,element,name,is,only,allowed,to,contain,either,ref,attribute,or,value,attribute,or,sub,element,ele,if,has,ref,attribute,string,ref,name,ele,get,attribute,if,string,utils,has,text,ref,name,error,element,name,contains,empty,ref,attribute,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,ele,return,ref,else,if,has,value,attribute,typed,string,value,value,holder,new,typed,string,value,ele,get,attribute,value,holder,set,source,extract,source,ele,return,value,holder,else,if,sub,element,null,return,parse,property,sub,element,sub,element,bd,else,error,element,name,must,specify,a,ref,or,value,ele,return,null
BeanDefinitionParserDelegate -> @Nullable 	public Object parsePropertyValue(Element ele, BeanDefinition bd, @Nullable String propertyName);1532706365;Get the value of a property element. May be a list etc._Also used for constructor arguments, "propertyName" being null in this case.;@Nullable_	public Object parsePropertyValue(Element ele, BeanDefinition bd, @Nullable String propertyName) {_		String elementName = (propertyName != null ?_				"<property> element for property '" + propertyName + "'" :_				"<constructor-arg> element")___		_		NodeList nl = ele.getChildNodes()__		Element subElement = null__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element && !nodeNameEquals(node, DESCRIPTION_ELEMENT) &&_					!nodeNameEquals(node, META_ELEMENT)) {_				_				if (subElement != null) {_					error(elementName + " must not contain more than one sub-element", ele)__				}_				else {_					subElement = (Element) node__				}_			}_		}__		boolean hasRefAttribute = ele.hasAttribute(REF_ATTRIBUTE)__		boolean hasValueAttribute = ele.hasAttribute(VALUE_ATTRIBUTE)__		if ((hasRefAttribute && hasValueAttribute) ||_				((hasRefAttribute || hasValueAttribute) && subElement != null)) {_			error(elementName +_					" is only allowed to contain either 'ref' attribute OR 'value' attribute OR sub-element", ele)__		}__		if (hasRefAttribute) {_			String refName = ele.getAttribute(REF_ATTRIBUTE)__			if (!StringUtils.hasText(refName)) {_				error(elementName + " contains empty 'ref' attribute", ele)__			}_			RuntimeBeanReference ref = new RuntimeBeanReference(refName)__			ref.setSource(extractSource(ele))__			return ref__		}_		else if (hasValueAttribute) {_			TypedStringValue valueHolder = new TypedStringValue(ele.getAttribute(VALUE_ATTRIBUTE))__			valueHolder.setSource(extractSource(ele))__			return valueHolder__		}_		else if (subElement != null) {_			return parsePropertySubElement(subElement, bd)__		}_		else {_			_			error(elementName + " must specify a ref or value", ele)__			return null__		}_	};get,the,value,of,a,property,element,may,be,a,list,etc,also,used,for,constructor,arguments,property,name,being,null,in,this,case;nullable,public,object,parse,property,value,element,ele,bean,definition,bd,nullable,string,property,name,string,element,name,property,name,null,property,element,for,property,property,name,constructor,arg,element,node,list,nl,ele,get,child,nodes,element,sub,element,null,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,node,name,equals,node,node,name,equals,node,if,sub,element,null,error,element,name,must,not,contain,more,than,one,sub,element,ele,else,sub,element,element,node,boolean,has,ref,attribute,ele,has,attribute,boolean,has,value,attribute,ele,has,attribute,if,has,ref,attribute,has,value,attribute,has,ref,attribute,has,value,attribute,sub,element,null,error,element,name,is,only,allowed,to,contain,either,ref,attribute,or,value,attribute,or,sub,element,ele,if,has,ref,attribute,string,ref,name,ele,get,attribute,if,string,utils,has,text,ref,name,error,element,name,contains,empty,ref,attribute,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,ele,return,ref,else,if,has,value,attribute,typed,string,value,value,holder,new,typed,string,value,ele,get,attribute,value,holder,set,source,extract,source,ele,return,value,holder,else,if,sub,element,null,return,parse,property,sub,element,sub,element,bd,else,error,element,name,must,specify,a,ref,or,value,ele,return,null
BeanDefinitionParserDelegate -> @Nullable 	public Object parsePropertyValue(Element ele, BeanDefinition bd, @Nullable String propertyName);1546958161;Get the value of a property element. May be a list etc._Also used for constructor arguments, "propertyName" being null in this case.;@Nullable_	public Object parsePropertyValue(Element ele, BeanDefinition bd, @Nullable String propertyName) {_		String elementName = (propertyName != null ?_				"<property> element for property '" + propertyName + "'" :_				"<constructor-arg> element")___		_		NodeList nl = ele.getChildNodes()__		Element subElement = null__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element && !nodeNameEquals(node, DESCRIPTION_ELEMENT) &&_					!nodeNameEquals(node, META_ELEMENT)) {_				_				if (subElement != null) {_					error(elementName + " must not contain more than one sub-element", ele)__				}_				else {_					subElement = (Element) node__				}_			}_		}__		boolean hasRefAttribute = ele.hasAttribute(REF_ATTRIBUTE)__		boolean hasValueAttribute = ele.hasAttribute(VALUE_ATTRIBUTE)__		if ((hasRefAttribute && hasValueAttribute) ||_				((hasRefAttribute || hasValueAttribute) && subElement != null)) {_			error(elementName +_					" is only allowed to contain either 'ref' attribute OR 'value' attribute OR sub-element", ele)__		}__		if (hasRefAttribute) {_			String refName = ele.getAttribute(REF_ATTRIBUTE)__			if (!StringUtils.hasText(refName)) {_				error(elementName + " contains empty 'ref' attribute", ele)__			}_			RuntimeBeanReference ref = new RuntimeBeanReference(refName)__			ref.setSource(extractSource(ele))__			return ref__		}_		else if (hasValueAttribute) {_			TypedStringValue valueHolder = new TypedStringValue(ele.getAttribute(VALUE_ATTRIBUTE))__			valueHolder.setSource(extractSource(ele))__			return valueHolder__		}_		else if (subElement != null) {_			return parsePropertySubElement(subElement, bd)__		}_		else {_			_			error(elementName + " must specify a ref or value", ele)__			return null__		}_	};get,the,value,of,a,property,element,may,be,a,list,etc,also,used,for,constructor,arguments,property,name,being,null,in,this,case;nullable,public,object,parse,property,value,element,ele,bean,definition,bd,nullable,string,property,name,string,element,name,property,name,null,property,element,for,property,property,name,constructor,arg,element,node,list,nl,ele,get,child,nodes,element,sub,element,null,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,node,name,equals,node,node,name,equals,node,if,sub,element,null,error,element,name,must,not,contain,more,than,one,sub,element,ele,else,sub,element,element,node,boolean,has,ref,attribute,ele,has,attribute,boolean,has,value,attribute,ele,has,attribute,if,has,ref,attribute,has,value,attribute,has,ref,attribute,has,value,attribute,sub,element,null,error,element,name,is,only,allowed,to,contain,either,ref,attribute,or,value,attribute,or,sub,element,ele,if,has,ref,attribute,string,ref,name,ele,get,attribute,if,string,utils,has,text,ref,name,error,element,name,contains,empty,ref,attribute,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,ele,return,ref,else,if,has,value,attribute,typed,string,value,value,holder,new,typed,string,value,ele,get,attribute,value,holder,set,source,extract,source,ele,return,value,holder,else,if,sub,element,null,return,parse,property,sub,element,sub,element,bd,else,error,element,name,must,specify,a,ref,or,value,ele,return,null
BeanDefinitionParserDelegate -> @Nullable 	protected Object parseKeyElement(Element keyEle, @Nullable BeanDefinition bd, String defaultKeyTypeName);1496837955;Parse a key sub-element of a map element.;@Nullable_	protected Object parseKeyElement(Element keyEle, @Nullable BeanDefinition bd, String defaultKeyTypeName) {_		NodeList nl = keyEle.getChildNodes()__		Element subElement = null__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element) {_				_				if (subElement != null) {_					error("<key> element must not contain more than one value sub-element", keyEle)__				}_				else {_					subElement = (Element) node__				}_			}_		}_		if (subElement == null) {_			return null__		}_		return parsePropertySubElement(subElement, bd, defaultKeyTypeName)__	};parse,a,key,sub,element,of,a,map,element;nullable,protected,object,parse,key,element,element,key,ele,nullable,bean,definition,bd,string,default,key,type,name,node,list,nl,key,ele,get,child,nodes,element,sub,element,null,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,if,sub,element,null,error,key,element,must,not,contain,more,than,one,value,sub,element,key,ele,else,sub,element,element,node,if,sub,element,null,return,null,return,parse,property,sub,element,sub,element,bd,default,key,type,name
BeanDefinitionParserDelegate -> @Nullable 	protected Object parseKeyElement(Element keyEle, @Nullable BeanDefinition bd, String defaultKeyTypeName);1503008029;Parse a key sub-element of a map element.;@Nullable_	protected Object parseKeyElement(Element keyEle, @Nullable BeanDefinition bd, String defaultKeyTypeName) {_		NodeList nl = keyEle.getChildNodes()__		Element subElement = null__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element) {_				_				if (subElement != null) {_					error("<key> element must not contain more than one value sub-element", keyEle)__				}_				else {_					subElement = (Element) node__				}_			}_		}_		if (subElement == null) {_			return null__		}_		return parsePropertySubElement(subElement, bd, defaultKeyTypeName)__	};parse,a,key,sub,element,of,a,map,element;nullable,protected,object,parse,key,element,element,key,ele,nullable,bean,definition,bd,string,default,key,type,name,node,list,nl,key,ele,get,child,nodes,element,sub,element,null,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,if,sub,element,null,error,key,element,must,not,contain,more,than,one,value,sub,element,key,ele,else,sub,element,element,node,if,sub,element,null,return,null,return,parse,property,sub,element,sub,element,bd,default,key,type,name
BeanDefinitionParserDelegate -> @Nullable 	protected Object parseKeyElement(Element keyEle, @Nullable BeanDefinition bd, String defaultKeyTypeName);1519513303;Parse a key sub-element of a map element.;@Nullable_	protected Object parseKeyElement(Element keyEle, @Nullable BeanDefinition bd, String defaultKeyTypeName) {_		NodeList nl = keyEle.getChildNodes()__		Element subElement = null__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element) {_				_				if (subElement != null) {_					error("<key> element must not contain more than one value sub-element", keyEle)__				}_				else {_					subElement = (Element) node__				}_			}_		}_		if (subElement == null) {_			return null__		}_		return parsePropertySubElement(subElement, bd, defaultKeyTypeName)__	};parse,a,key,sub,element,of,a,map,element;nullable,protected,object,parse,key,element,element,key,ele,nullable,bean,definition,bd,string,default,key,type,name,node,list,nl,key,ele,get,child,nodes,element,sub,element,null,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,if,sub,element,null,error,key,element,must,not,contain,more,than,one,value,sub,element,key,ele,else,sub,element,element,node,if,sub,element,null,return,null,return,parse,property,sub,element,sub,element,bd,default,key,type,name
BeanDefinitionParserDelegate -> @Nullable 	protected Object parseKeyElement(Element keyEle, @Nullable BeanDefinition bd, String defaultKeyTypeName);1530174524;Parse a key sub-element of a map element.;@Nullable_	protected Object parseKeyElement(Element keyEle, @Nullable BeanDefinition bd, String defaultKeyTypeName) {_		NodeList nl = keyEle.getChildNodes()__		Element subElement = null__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element) {_				_				if (subElement != null) {_					error("<key> element must not contain more than one value sub-element", keyEle)__				}_				else {_					subElement = (Element) node__				}_			}_		}_		if (subElement == null) {_			return null__		}_		return parsePropertySubElement(subElement, bd, defaultKeyTypeName)__	};parse,a,key,sub,element,of,a,map,element;nullable,protected,object,parse,key,element,element,key,ele,nullable,bean,definition,bd,string,default,key,type,name,node,list,nl,key,ele,get,child,nodes,element,sub,element,null,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,if,sub,element,null,error,key,element,must,not,contain,more,than,one,value,sub,element,key,ele,else,sub,element,element,node,if,sub,element,null,return,null,return,parse,property,sub,element,sub,element,bd,default,key,type,name
BeanDefinitionParserDelegate -> @Nullable 	protected Object parseKeyElement(Element keyEle, @Nullable BeanDefinition bd, String defaultKeyTypeName);1530190293;Parse a key sub-element of a map element.;@Nullable_	protected Object parseKeyElement(Element keyEle, @Nullable BeanDefinition bd, String defaultKeyTypeName) {_		NodeList nl = keyEle.getChildNodes()__		Element subElement = null__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element) {_				_				if (subElement != null) {_					error("<key> element must not contain more than one value sub-element", keyEle)__				}_				else {_					subElement = (Element) node__				}_			}_		}_		if (subElement == null) {_			return null__		}_		return parsePropertySubElement(subElement, bd, defaultKeyTypeName)__	};parse,a,key,sub,element,of,a,map,element;nullable,protected,object,parse,key,element,element,key,ele,nullable,bean,definition,bd,string,default,key,type,name,node,list,nl,key,ele,get,child,nodes,element,sub,element,null,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,if,sub,element,null,error,key,element,must,not,contain,more,than,one,value,sub,element,key,ele,else,sub,element,element,node,if,sub,element,null,return,null,return,parse,property,sub,element,sub,element,bd,default,key,type,name
BeanDefinitionParserDelegate -> @Nullable 	protected Object parseKeyElement(Element keyEle, @Nullable BeanDefinition bd, String defaultKeyTypeName);1532706365;Parse a key sub-element of a map element.;@Nullable_	protected Object parseKeyElement(Element keyEle, @Nullable BeanDefinition bd, String defaultKeyTypeName) {_		NodeList nl = keyEle.getChildNodes()__		Element subElement = null__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element) {_				_				if (subElement != null) {_					error("<key> element must not contain more than one value sub-element", keyEle)__				}_				else {_					subElement = (Element) node__				}_			}_		}_		if (subElement == null) {_			return null__		}_		return parsePropertySubElement(subElement, bd, defaultKeyTypeName)__	};parse,a,key,sub,element,of,a,map,element;nullable,protected,object,parse,key,element,element,key,ele,nullable,bean,definition,bd,string,default,key,type,name,node,list,nl,key,ele,get,child,nodes,element,sub,element,null,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,if,sub,element,null,error,key,element,must,not,contain,more,than,one,value,sub,element,key,ele,else,sub,element,element,node,if,sub,element,null,return,null,return,parse,property,sub,element,sub,element,bd,default,key,type,name
BeanDefinitionParserDelegate -> @Nullable 	protected Object parseKeyElement(Element keyEle, @Nullable BeanDefinition bd, String defaultKeyTypeName);1546958161;Parse a key sub-element of a map element.;@Nullable_	protected Object parseKeyElement(Element keyEle, @Nullable BeanDefinition bd, String defaultKeyTypeName) {_		NodeList nl = keyEle.getChildNodes()__		Element subElement = null__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element) {_				_				if (subElement != null) {_					error("<key> element must not contain more than one value sub-element", keyEle)__				}_				else {_					subElement = (Element) node__				}_			}_		}_		if (subElement == null) {_			return null__		}_		return parsePropertySubElement(subElement, bd, defaultKeyTypeName)__	};parse,a,key,sub,element,of,a,map,element;nullable,protected,object,parse,key,element,element,key,ele,nullable,bean,definition,bd,string,default,key,type,name,node,list,nl,key,ele,get,child,nodes,element,sub,element,null,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,if,sub,element,null,error,key,element,must,not,contain,more,than,one,value,sub,element,key,ele,else,sub,element,element,node,if,sub,element,null,return,null,return,parse,property,sub,element,sub,element,bd,default,key,type,name
BeanDefinitionParserDelegate -> @Nullable 	public Object parsePropertySubElement(Element ele, @Nullable BeanDefinition bd, @Nullable String defaultValueType);1496837955;Parse a value, ref or collection sub-element of a property or_constructor-arg element._@param ele subelement of property element_ we don't know which yet_@param defaultValueType the default type (class name) for any_{@code <value>} tag that might be created;@Nullable_	public Object parsePropertySubElement(Element ele, @Nullable BeanDefinition bd, @Nullable String defaultValueType) {_		if (!isDefaultNamespace(ele)) {_			return parseNestedCustomElement(ele, bd)__		}_		else if (nodeNameEquals(ele, BEAN_ELEMENT)) {_			BeanDefinitionHolder nestedBd = parseBeanDefinitionElement(ele, bd)__			if (nestedBd != null) {_				nestedBd = decorateBeanDefinitionIfRequired(ele, nestedBd, bd)__			}_			return nestedBd__		}_		else if (nodeNameEquals(ele, REF_ELEMENT)) {_			_			String refName = ele.getAttribute(BEAN_REF_ATTRIBUTE)__			boolean toParent = false__			if (!StringUtils.hasLength(refName)) {_				_				refName = ele.getAttribute(PARENT_REF_ATTRIBUTE)__				toParent = true__				if (!StringUtils.hasLength(refName)) {_					error("'bean' or 'parent' is required for <ref> element", ele)__					return null__				}_			}_			if (!StringUtils.hasText(refName)) {_				error("<ref> element contains empty target attribute", ele)__				return null__			}_			RuntimeBeanReference ref = new RuntimeBeanReference(refName, toParent)__			ref.setSource(extractSource(ele))__			return ref__		}_		else if (nodeNameEquals(ele, IDREF_ELEMENT)) {_			return parseIdRefElement(ele)__		}_		else if (nodeNameEquals(ele, VALUE_ELEMENT)) {_			return parseValueElement(ele, defaultValueType)__		}_		else if (nodeNameEquals(ele, NULL_ELEMENT)) {_			_			_			TypedStringValue nullHolder = new TypedStringValue(null)__			nullHolder.setSource(extractSource(ele))__			return nullHolder__		}_		else if (nodeNameEquals(ele, ARRAY_ELEMENT)) {_			return parseArrayElement(ele, bd)__		}_		else if (nodeNameEquals(ele, LIST_ELEMENT)) {_			return parseListElement(ele, bd)__		}_		else if (nodeNameEquals(ele, SET_ELEMENT)) {_			return parseSetElement(ele, bd)__		}_		else if (nodeNameEquals(ele, MAP_ELEMENT)) {_			return parseMapElement(ele, bd)__		}_		else if (nodeNameEquals(ele, PROPS_ELEMENT)) {_			return parsePropsElement(ele)__		}_		else {_			error("Unknown property sub-element: [" + ele.getNodeName() + "]", ele)__			return null__		}_	};parse,a,value,ref,or,collection,sub,element,of,a,property,or,constructor,arg,element,param,ele,subelement,of,property,element,we,don,t,know,which,yet,param,default,value,type,the,default,type,class,name,for,any,code,value,tag,that,might,be,created;nullable,public,object,parse,property,sub,element,element,ele,nullable,bean,definition,bd,nullable,string,default,value,type,if,is,default,namespace,ele,return,parse,nested,custom,element,ele,bd,else,if,node,name,equals,ele,bean,definition,holder,nested,bd,parse,bean,definition,element,ele,bd,if,nested,bd,null,nested,bd,decorate,bean,definition,if,required,ele,nested,bd,bd,return,nested,bd,else,if,node,name,equals,ele,string,ref,name,ele,get,attribute,boolean,to,parent,false,if,string,utils,has,length,ref,name,ref,name,ele,get,attribute,to,parent,true,if,string,utils,has,length,ref,name,error,bean,or,parent,is,required,for,ref,element,ele,return,null,if,string,utils,has,text,ref,name,error,ref,element,contains,empty,target,attribute,ele,return,null,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,to,parent,ref,set,source,extract,source,ele,return,ref,else,if,node,name,equals,ele,return,parse,id,ref,element,ele,else,if,node,name,equals,ele,return,parse,value,element,ele,default,value,type,else,if,node,name,equals,ele,typed,string,value,null,holder,new,typed,string,value,null,null,holder,set,source,extract,source,ele,return,null,holder,else,if,node,name,equals,ele,return,parse,array,element,ele,bd,else,if,node,name,equals,ele,return,parse,list,element,ele,bd,else,if,node,name,equals,ele,return,parse,set,element,ele,bd,else,if,node,name,equals,ele,return,parse,map,element,ele,bd,else,if,node,name,equals,ele,return,parse,props,element,ele,else,error,unknown,property,sub,element,ele,get,node,name,ele,return,null
BeanDefinitionParserDelegate -> @Nullable 	public Object parsePropertySubElement(Element ele, @Nullable BeanDefinition bd, @Nullable String defaultValueType);1503008029;Parse a value, ref or collection sub-element of a property or_constructor-arg element._@param ele subelement of property element_ we don't know which yet_@param defaultValueType the default type (class name) for any_{@code <value>} tag that might be created;@Nullable_	public Object parsePropertySubElement(Element ele, @Nullable BeanDefinition bd, @Nullable String defaultValueType) {_		if (!isDefaultNamespace(ele)) {_			return parseNestedCustomElement(ele, bd)__		}_		else if (nodeNameEquals(ele, BEAN_ELEMENT)) {_			BeanDefinitionHolder nestedBd = parseBeanDefinitionElement(ele, bd)__			if (nestedBd != null) {_				nestedBd = decorateBeanDefinitionIfRequired(ele, nestedBd, bd)__			}_			return nestedBd__		}_		else if (nodeNameEquals(ele, REF_ELEMENT)) {_			_			String refName = ele.getAttribute(BEAN_REF_ATTRIBUTE)__			boolean toParent = false__			if (!StringUtils.hasLength(refName)) {_				_				refName = ele.getAttribute(PARENT_REF_ATTRIBUTE)__				toParent = true__				if (!StringUtils.hasLength(refName)) {_					error("'bean' or 'parent' is required for <ref> element", ele)__					return null__				}_			}_			if (!StringUtils.hasText(refName)) {_				error("<ref> element contains empty target attribute", ele)__				return null__			}_			RuntimeBeanReference ref = new RuntimeBeanReference(refName, toParent)__			ref.setSource(extractSource(ele))__			return ref__		}_		else if (nodeNameEquals(ele, IDREF_ELEMENT)) {_			return parseIdRefElement(ele)__		}_		else if (nodeNameEquals(ele, VALUE_ELEMENT)) {_			return parseValueElement(ele, defaultValueType)__		}_		else if (nodeNameEquals(ele, NULL_ELEMENT)) {_			_			_			TypedStringValue nullHolder = new TypedStringValue(null)__			nullHolder.setSource(extractSource(ele))__			return nullHolder__		}_		else if (nodeNameEquals(ele, ARRAY_ELEMENT)) {_			return parseArrayElement(ele, bd)__		}_		else if (nodeNameEquals(ele, LIST_ELEMENT)) {_			return parseListElement(ele, bd)__		}_		else if (nodeNameEquals(ele, SET_ELEMENT)) {_			return parseSetElement(ele, bd)__		}_		else if (nodeNameEquals(ele, MAP_ELEMENT)) {_			return parseMapElement(ele, bd)__		}_		else if (nodeNameEquals(ele, PROPS_ELEMENT)) {_			return parsePropsElement(ele)__		}_		else {_			error("Unknown property sub-element: [" + ele.getNodeName() + "]", ele)__			return null__		}_	};parse,a,value,ref,or,collection,sub,element,of,a,property,or,constructor,arg,element,param,ele,subelement,of,property,element,we,don,t,know,which,yet,param,default,value,type,the,default,type,class,name,for,any,code,value,tag,that,might,be,created;nullable,public,object,parse,property,sub,element,element,ele,nullable,bean,definition,bd,nullable,string,default,value,type,if,is,default,namespace,ele,return,parse,nested,custom,element,ele,bd,else,if,node,name,equals,ele,bean,definition,holder,nested,bd,parse,bean,definition,element,ele,bd,if,nested,bd,null,nested,bd,decorate,bean,definition,if,required,ele,nested,bd,bd,return,nested,bd,else,if,node,name,equals,ele,string,ref,name,ele,get,attribute,boolean,to,parent,false,if,string,utils,has,length,ref,name,ref,name,ele,get,attribute,to,parent,true,if,string,utils,has,length,ref,name,error,bean,or,parent,is,required,for,ref,element,ele,return,null,if,string,utils,has,text,ref,name,error,ref,element,contains,empty,target,attribute,ele,return,null,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,to,parent,ref,set,source,extract,source,ele,return,ref,else,if,node,name,equals,ele,return,parse,id,ref,element,ele,else,if,node,name,equals,ele,return,parse,value,element,ele,default,value,type,else,if,node,name,equals,ele,typed,string,value,null,holder,new,typed,string,value,null,null,holder,set,source,extract,source,ele,return,null,holder,else,if,node,name,equals,ele,return,parse,array,element,ele,bd,else,if,node,name,equals,ele,return,parse,list,element,ele,bd,else,if,node,name,equals,ele,return,parse,set,element,ele,bd,else,if,node,name,equals,ele,return,parse,map,element,ele,bd,else,if,node,name,equals,ele,return,parse,props,element,ele,else,error,unknown,property,sub,element,ele,get,node,name,ele,return,null
BeanDefinitionParserDelegate -> @Nullable 	public Object parsePropertySubElement(Element ele, @Nullable BeanDefinition bd, @Nullable String defaultValueType);1519513303;Parse a value, ref or collection sub-element of a property or_constructor-arg element._@param ele subelement of property element_ we don't know which yet_@param defaultValueType the default type (class name) for any_{@code <value>} tag that might be created;@Nullable_	public Object parsePropertySubElement(Element ele, @Nullable BeanDefinition bd, @Nullable String defaultValueType) {_		if (!isDefaultNamespace(ele)) {_			return parseNestedCustomElement(ele, bd)__		}_		else if (nodeNameEquals(ele, BEAN_ELEMENT)) {_			BeanDefinitionHolder nestedBd = parseBeanDefinitionElement(ele, bd)__			if (nestedBd != null) {_				nestedBd = decorateBeanDefinitionIfRequired(ele, nestedBd, bd)__			}_			return nestedBd__		}_		else if (nodeNameEquals(ele, REF_ELEMENT)) {_			_			String refName = ele.getAttribute(BEAN_REF_ATTRIBUTE)__			boolean toParent = false__			if (!StringUtils.hasLength(refName)) {_				_				refName = ele.getAttribute(PARENT_REF_ATTRIBUTE)__				toParent = true__				if (!StringUtils.hasLength(refName)) {_					error("'bean' or 'parent' is required for <ref> element", ele)__					return null__				}_			}_			if (!StringUtils.hasText(refName)) {_				error("<ref> element contains empty target attribute", ele)__				return null__			}_			RuntimeBeanReference ref = new RuntimeBeanReference(refName, toParent)__			ref.setSource(extractSource(ele))__			return ref__		}_		else if (nodeNameEquals(ele, IDREF_ELEMENT)) {_			return parseIdRefElement(ele)__		}_		else if (nodeNameEquals(ele, VALUE_ELEMENT)) {_			return parseValueElement(ele, defaultValueType)__		}_		else if (nodeNameEquals(ele, NULL_ELEMENT)) {_			_			_			TypedStringValue nullHolder = new TypedStringValue(null)__			nullHolder.setSource(extractSource(ele))__			return nullHolder__		}_		else if (nodeNameEquals(ele, ARRAY_ELEMENT)) {_			return parseArrayElement(ele, bd)__		}_		else if (nodeNameEquals(ele, LIST_ELEMENT)) {_			return parseListElement(ele, bd)__		}_		else if (nodeNameEquals(ele, SET_ELEMENT)) {_			return parseSetElement(ele, bd)__		}_		else if (nodeNameEquals(ele, MAP_ELEMENT)) {_			return parseMapElement(ele, bd)__		}_		else if (nodeNameEquals(ele, PROPS_ELEMENT)) {_			return parsePropsElement(ele)__		}_		else {_			error("Unknown property sub-element: [" + ele.getNodeName() + "]", ele)__			return null__		}_	};parse,a,value,ref,or,collection,sub,element,of,a,property,or,constructor,arg,element,param,ele,subelement,of,property,element,we,don,t,know,which,yet,param,default,value,type,the,default,type,class,name,for,any,code,value,tag,that,might,be,created;nullable,public,object,parse,property,sub,element,element,ele,nullable,bean,definition,bd,nullable,string,default,value,type,if,is,default,namespace,ele,return,parse,nested,custom,element,ele,bd,else,if,node,name,equals,ele,bean,definition,holder,nested,bd,parse,bean,definition,element,ele,bd,if,nested,bd,null,nested,bd,decorate,bean,definition,if,required,ele,nested,bd,bd,return,nested,bd,else,if,node,name,equals,ele,string,ref,name,ele,get,attribute,boolean,to,parent,false,if,string,utils,has,length,ref,name,ref,name,ele,get,attribute,to,parent,true,if,string,utils,has,length,ref,name,error,bean,or,parent,is,required,for,ref,element,ele,return,null,if,string,utils,has,text,ref,name,error,ref,element,contains,empty,target,attribute,ele,return,null,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,to,parent,ref,set,source,extract,source,ele,return,ref,else,if,node,name,equals,ele,return,parse,id,ref,element,ele,else,if,node,name,equals,ele,return,parse,value,element,ele,default,value,type,else,if,node,name,equals,ele,typed,string,value,null,holder,new,typed,string,value,null,null,holder,set,source,extract,source,ele,return,null,holder,else,if,node,name,equals,ele,return,parse,array,element,ele,bd,else,if,node,name,equals,ele,return,parse,list,element,ele,bd,else,if,node,name,equals,ele,return,parse,set,element,ele,bd,else,if,node,name,equals,ele,return,parse,map,element,ele,bd,else,if,node,name,equals,ele,return,parse,props,element,ele,else,error,unknown,property,sub,element,ele,get,node,name,ele,return,null
BeanDefinitionParserDelegate -> @Nullable 	public Object parsePropertySubElement(Element ele, @Nullable BeanDefinition bd, @Nullable String defaultValueType);1530174524;Parse a value, ref or collection sub-element of a property or_constructor-arg element._@param ele subelement of property element_ we don't know which yet_@param defaultValueType the default type (class name) for any_{@code <value>} tag that might be created;@Nullable_	public Object parsePropertySubElement(Element ele, @Nullable BeanDefinition bd, @Nullable String defaultValueType) {_		if (!isDefaultNamespace(ele)) {_			return parseNestedCustomElement(ele, bd)__		}_		else if (nodeNameEquals(ele, BEAN_ELEMENT)) {_			BeanDefinitionHolder nestedBd = parseBeanDefinitionElement(ele, bd)__			if (nestedBd != null) {_				nestedBd = decorateBeanDefinitionIfRequired(ele, nestedBd, bd)__			}_			return nestedBd__		}_		else if (nodeNameEquals(ele, REF_ELEMENT)) {_			_			String refName = ele.getAttribute(BEAN_REF_ATTRIBUTE)__			boolean toParent = false__			if (!StringUtils.hasLength(refName)) {_				_				refName = ele.getAttribute(PARENT_REF_ATTRIBUTE)__				toParent = true__				if (!StringUtils.hasLength(refName)) {_					error("'bean' or 'parent' is required for <ref> element", ele)__					return null__				}_			}_			if (!StringUtils.hasText(refName)) {_				error("<ref> element contains empty target attribute", ele)__				return null__			}_			RuntimeBeanReference ref = new RuntimeBeanReference(refName, toParent)__			ref.setSource(extractSource(ele))__			return ref__		}_		else if (nodeNameEquals(ele, IDREF_ELEMENT)) {_			return parseIdRefElement(ele)__		}_		else if (nodeNameEquals(ele, VALUE_ELEMENT)) {_			return parseValueElement(ele, defaultValueType)__		}_		else if (nodeNameEquals(ele, NULL_ELEMENT)) {_			_			_			TypedStringValue nullHolder = new TypedStringValue(null)__			nullHolder.setSource(extractSource(ele))__			return nullHolder__		}_		else if (nodeNameEquals(ele, ARRAY_ELEMENT)) {_			return parseArrayElement(ele, bd)__		}_		else if (nodeNameEquals(ele, LIST_ELEMENT)) {_			return parseListElement(ele, bd)__		}_		else if (nodeNameEquals(ele, SET_ELEMENT)) {_			return parseSetElement(ele, bd)__		}_		else if (nodeNameEquals(ele, MAP_ELEMENT)) {_			return parseMapElement(ele, bd)__		}_		else if (nodeNameEquals(ele, PROPS_ELEMENT)) {_			return parsePropsElement(ele)__		}_		else {_			error("Unknown property sub-element: [" + ele.getNodeName() + "]", ele)__			return null__		}_	};parse,a,value,ref,or,collection,sub,element,of,a,property,or,constructor,arg,element,param,ele,subelement,of,property,element,we,don,t,know,which,yet,param,default,value,type,the,default,type,class,name,for,any,code,value,tag,that,might,be,created;nullable,public,object,parse,property,sub,element,element,ele,nullable,bean,definition,bd,nullable,string,default,value,type,if,is,default,namespace,ele,return,parse,nested,custom,element,ele,bd,else,if,node,name,equals,ele,bean,definition,holder,nested,bd,parse,bean,definition,element,ele,bd,if,nested,bd,null,nested,bd,decorate,bean,definition,if,required,ele,nested,bd,bd,return,nested,bd,else,if,node,name,equals,ele,string,ref,name,ele,get,attribute,boolean,to,parent,false,if,string,utils,has,length,ref,name,ref,name,ele,get,attribute,to,parent,true,if,string,utils,has,length,ref,name,error,bean,or,parent,is,required,for,ref,element,ele,return,null,if,string,utils,has,text,ref,name,error,ref,element,contains,empty,target,attribute,ele,return,null,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,to,parent,ref,set,source,extract,source,ele,return,ref,else,if,node,name,equals,ele,return,parse,id,ref,element,ele,else,if,node,name,equals,ele,return,parse,value,element,ele,default,value,type,else,if,node,name,equals,ele,typed,string,value,null,holder,new,typed,string,value,null,null,holder,set,source,extract,source,ele,return,null,holder,else,if,node,name,equals,ele,return,parse,array,element,ele,bd,else,if,node,name,equals,ele,return,parse,list,element,ele,bd,else,if,node,name,equals,ele,return,parse,set,element,ele,bd,else,if,node,name,equals,ele,return,parse,map,element,ele,bd,else,if,node,name,equals,ele,return,parse,props,element,ele,else,error,unknown,property,sub,element,ele,get,node,name,ele,return,null
BeanDefinitionParserDelegate -> @Nullable 	public Object parsePropertySubElement(Element ele, @Nullable BeanDefinition bd, @Nullable String defaultValueType);1530190293;Parse a value, ref or collection sub-element of a property or_constructor-arg element._@param ele subelement of property element_ we don't know which yet_@param defaultValueType the default type (class name) for any_{@code <value>} tag that might be created;@Nullable_	public Object parsePropertySubElement(Element ele, @Nullable BeanDefinition bd, @Nullable String defaultValueType) {_		if (!isDefaultNamespace(ele)) {_			return parseNestedCustomElement(ele, bd)__		}_		else if (nodeNameEquals(ele, BEAN_ELEMENT)) {_			BeanDefinitionHolder nestedBd = parseBeanDefinitionElement(ele, bd)__			if (nestedBd != null) {_				nestedBd = decorateBeanDefinitionIfRequired(ele, nestedBd, bd)__			}_			return nestedBd__		}_		else if (nodeNameEquals(ele, REF_ELEMENT)) {_			_			String refName = ele.getAttribute(BEAN_REF_ATTRIBUTE)__			boolean toParent = false__			if (!StringUtils.hasLength(refName)) {_				_				refName = ele.getAttribute(PARENT_REF_ATTRIBUTE)__				toParent = true__				if (!StringUtils.hasLength(refName)) {_					error("'bean' or 'parent' is required for <ref> element", ele)__					return null__				}_			}_			if (!StringUtils.hasText(refName)) {_				error("<ref> element contains empty target attribute", ele)__				return null__			}_			RuntimeBeanReference ref = new RuntimeBeanReference(refName, toParent)__			ref.setSource(extractSource(ele))__			return ref__		}_		else if (nodeNameEquals(ele, IDREF_ELEMENT)) {_			return parseIdRefElement(ele)__		}_		else if (nodeNameEquals(ele, VALUE_ELEMENT)) {_			return parseValueElement(ele, defaultValueType)__		}_		else if (nodeNameEquals(ele, NULL_ELEMENT)) {_			_			_			TypedStringValue nullHolder = new TypedStringValue(null)__			nullHolder.setSource(extractSource(ele))__			return nullHolder__		}_		else if (nodeNameEquals(ele, ARRAY_ELEMENT)) {_			return parseArrayElement(ele, bd)__		}_		else if (nodeNameEquals(ele, LIST_ELEMENT)) {_			return parseListElement(ele, bd)__		}_		else if (nodeNameEquals(ele, SET_ELEMENT)) {_			return parseSetElement(ele, bd)__		}_		else if (nodeNameEquals(ele, MAP_ELEMENT)) {_			return parseMapElement(ele, bd)__		}_		else if (nodeNameEquals(ele, PROPS_ELEMENT)) {_			return parsePropsElement(ele)__		}_		else {_			error("Unknown property sub-element: [" + ele.getNodeName() + "]", ele)__			return null__		}_	};parse,a,value,ref,or,collection,sub,element,of,a,property,or,constructor,arg,element,param,ele,subelement,of,property,element,we,don,t,know,which,yet,param,default,value,type,the,default,type,class,name,for,any,code,value,tag,that,might,be,created;nullable,public,object,parse,property,sub,element,element,ele,nullable,bean,definition,bd,nullable,string,default,value,type,if,is,default,namespace,ele,return,parse,nested,custom,element,ele,bd,else,if,node,name,equals,ele,bean,definition,holder,nested,bd,parse,bean,definition,element,ele,bd,if,nested,bd,null,nested,bd,decorate,bean,definition,if,required,ele,nested,bd,bd,return,nested,bd,else,if,node,name,equals,ele,string,ref,name,ele,get,attribute,boolean,to,parent,false,if,string,utils,has,length,ref,name,ref,name,ele,get,attribute,to,parent,true,if,string,utils,has,length,ref,name,error,bean,or,parent,is,required,for,ref,element,ele,return,null,if,string,utils,has,text,ref,name,error,ref,element,contains,empty,target,attribute,ele,return,null,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,to,parent,ref,set,source,extract,source,ele,return,ref,else,if,node,name,equals,ele,return,parse,id,ref,element,ele,else,if,node,name,equals,ele,return,parse,value,element,ele,default,value,type,else,if,node,name,equals,ele,typed,string,value,null,holder,new,typed,string,value,null,null,holder,set,source,extract,source,ele,return,null,holder,else,if,node,name,equals,ele,return,parse,array,element,ele,bd,else,if,node,name,equals,ele,return,parse,list,element,ele,bd,else,if,node,name,equals,ele,return,parse,set,element,ele,bd,else,if,node,name,equals,ele,return,parse,map,element,ele,bd,else,if,node,name,equals,ele,return,parse,props,element,ele,else,error,unknown,property,sub,element,ele,get,node,name,ele,return,null
BeanDefinitionParserDelegate -> @Nullable 	public Object parsePropertySubElement(Element ele, @Nullable BeanDefinition bd, @Nullable String defaultValueType);1532706365;Parse a value, ref or collection sub-element of a property or_constructor-arg element._@param ele subelement of property element_ we don't know which yet_@param defaultValueType the default type (class name) for any_{@code <value>} tag that might be created;@Nullable_	public Object parsePropertySubElement(Element ele, @Nullable BeanDefinition bd, @Nullable String defaultValueType) {_		if (!isDefaultNamespace(ele)) {_			return parseNestedCustomElement(ele, bd)__		}_		else if (nodeNameEquals(ele, BEAN_ELEMENT)) {_			BeanDefinitionHolder nestedBd = parseBeanDefinitionElement(ele, bd)__			if (nestedBd != null) {_				nestedBd = decorateBeanDefinitionIfRequired(ele, nestedBd, bd)__			}_			return nestedBd__		}_		else if (nodeNameEquals(ele, REF_ELEMENT)) {_			_			String refName = ele.getAttribute(BEAN_REF_ATTRIBUTE)__			boolean toParent = false__			if (!StringUtils.hasLength(refName)) {_				_				refName = ele.getAttribute(PARENT_REF_ATTRIBUTE)__				toParent = true__				if (!StringUtils.hasLength(refName)) {_					error("'bean' or 'parent' is required for <ref> element", ele)__					return null__				}_			}_			if (!StringUtils.hasText(refName)) {_				error("<ref> element contains empty target attribute", ele)__				return null__			}_			RuntimeBeanReference ref = new RuntimeBeanReference(refName, toParent)__			ref.setSource(extractSource(ele))__			return ref__		}_		else if (nodeNameEquals(ele, IDREF_ELEMENT)) {_			return parseIdRefElement(ele)__		}_		else if (nodeNameEquals(ele, VALUE_ELEMENT)) {_			return parseValueElement(ele, defaultValueType)__		}_		else if (nodeNameEquals(ele, NULL_ELEMENT)) {_			_			_			TypedStringValue nullHolder = new TypedStringValue(null)__			nullHolder.setSource(extractSource(ele))__			return nullHolder__		}_		else if (nodeNameEquals(ele, ARRAY_ELEMENT)) {_			return parseArrayElement(ele, bd)__		}_		else if (nodeNameEquals(ele, LIST_ELEMENT)) {_			return parseListElement(ele, bd)__		}_		else if (nodeNameEquals(ele, SET_ELEMENT)) {_			return parseSetElement(ele, bd)__		}_		else if (nodeNameEquals(ele, MAP_ELEMENT)) {_			return parseMapElement(ele, bd)__		}_		else if (nodeNameEquals(ele, PROPS_ELEMENT)) {_			return parsePropsElement(ele)__		}_		else {_			error("Unknown property sub-element: [" + ele.getNodeName() + "]", ele)__			return null__		}_	};parse,a,value,ref,or,collection,sub,element,of,a,property,or,constructor,arg,element,param,ele,subelement,of,property,element,we,don,t,know,which,yet,param,default,value,type,the,default,type,class,name,for,any,code,value,tag,that,might,be,created;nullable,public,object,parse,property,sub,element,element,ele,nullable,bean,definition,bd,nullable,string,default,value,type,if,is,default,namespace,ele,return,parse,nested,custom,element,ele,bd,else,if,node,name,equals,ele,bean,definition,holder,nested,bd,parse,bean,definition,element,ele,bd,if,nested,bd,null,nested,bd,decorate,bean,definition,if,required,ele,nested,bd,bd,return,nested,bd,else,if,node,name,equals,ele,string,ref,name,ele,get,attribute,boolean,to,parent,false,if,string,utils,has,length,ref,name,ref,name,ele,get,attribute,to,parent,true,if,string,utils,has,length,ref,name,error,bean,or,parent,is,required,for,ref,element,ele,return,null,if,string,utils,has,text,ref,name,error,ref,element,contains,empty,target,attribute,ele,return,null,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,to,parent,ref,set,source,extract,source,ele,return,ref,else,if,node,name,equals,ele,return,parse,id,ref,element,ele,else,if,node,name,equals,ele,return,parse,value,element,ele,default,value,type,else,if,node,name,equals,ele,typed,string,value,null,holder,new,typed,string,value,null,null,holder,set,source,extract,source,ele,return,null,holder,else,if,node,name,equals,ele,return,parse,array,element,ele,bd,else,if,node,name,equals,ele,return,parse,list,element,ele,bd,else,if,node,name,equals,ele,return,parse,set,element,ele,bd,else,if,node,name,equals,ele,return,parse,map,element,ele,bd,else,if,node,name,equals,ele,return,parse,props,element,ele,else,error,unknown,property,sub,element,ele,get,node,name,ele,return,null
BeanDefinitionParserDelegate -> @Nullable 	public Object parsePropertySubElement(Element ele, @Nullable BeanDefinition bd, @Nullable String defaultValueType);1546958161;Parse a value, ref or collection sub-element of a property or_constructor-arg element._@param ele subelement of property element_ we don't know which yet_@param defaultValueType the default type (class name) for any_{@code <value>} tag that might be created;@Nullable_	public Object parsePropertySubElement(Element ele, @Nullable BeanDefinition bd, @Nullable String defaultValueType) {_		if (!isDefaultNamespace(ele)) {_			return parseNestedCustomElement(ele, bd)__		}_		else if (nodeNameEquals(ele, BEAN_ELEMENT)) {_			BeanDefinitionHolder nestedBd = parseBeanDefinitionElement(ele, bd)__			if (nestedBd != null) {_				nestedBd = decorateBeanDefinitionIfRequired(ele, nestedBd, bd)__			}_			return nestedBd__		}_		else if (nodeNameEquals(ele, REF_ELEMENT)) {_			_			String refName = ele.getAttribute(BEAN_REF_ATTRIBUTE)__			boolean toParent = false__			if (!StringUtils.hasLength(refName)) {_				_				refName = ele.getAttribute(PARENT_REF_ATTRIBUTE)__				toParent = true__				if (!StringUtils.hasLength(refName)) {_					error("'bean' or 'parent' is required for <ref> element", ele)__					return null__				}_			}_			if (!StringUtils.hasText(refName)) {_				error("<ref> element contains empty target attribute", ele)__				return null__			}_			RuntimeBeanReference ref = new RuntimeBeanReference(refName, toParent)__			ref.setSource(extractSource(ele))__			return ref__		}_		else if (nodeNameEquals(ele, IDREF_ELEMENT)) {_			return parseIdRefElement(ele)__		}_		else if (nodeNameEquals(ele, VALUE_ELEMENT)) {_			return parseValueElement(ele, defaultValueType)__		}_		else if (nodeNameEquals(ele, NULL_ELEMENT)) {_			_			_			TypedStringValue nullHolder = new TypedStringValue(null)__			nullHolder.setSource(extractSource(ele))__			return nullHolder__		}_		else if (nodeNameEquals(ele, ARRAY_ELEMENT)) {_			return parseArrayElement(ele, bd)__		}_		else if (nodeNameEquals(ele, LIST_ELEMENT)) {_			return parseListElement(ele, bd)__		}_		else if (nodeNameEquals(ele, SET_ELEMENT)) {_			return parseSetElement(ele, bd)__		}_		else if (nodeNameEquals(ele, MAP_ELEMENT)) {_			return parseMapElement(ele, bd)__		}_		else if (nodeNameEquals(ele, PROPS_ELEMENT)) {_			return parsePropsElement(ele)__		}_		else {_			error("Unknown property sub-element: [" + ele.getNodeName() + "]", ele)__			return null__		}_	};parse,a,value,ref,or,collection,sub,element,of,a,property,or,constructor,arg,element,param,ele,subelement,of,property,element,we,don,t,know,which,yet,param,default,value,type,the,default,type,class,name,for,any,code,value,tag,that,might,be,created;nullable,public,object,parse,property,sub,element,element,ele,nullable,bean,definition,bd,nullable,string,default,value,type,if,is,default,namespace,ele,return,parse,nested,custom,element,ele,bd,else,if,node,name,equals,ele,bean,definition,holder,nested,bd,parse,bean,definition,element,ele,bd,if,nested,bd,null,nested,bd,decorate,bean,definition,if,required,ele,nested,bd,bd,return,nested,bd,else,if,node,name,equals,ele,string,ref,name,ele,get,attribute,boolean,to,parent,false,if,string,utils,has,length,ref,name,ref,name,ele,get,attribute,to,parent,true,if,string,utils,has,length,ref,name,error,bean,or,parent,is,required,for,ref,element,ele,return,null,if,string,utils,has,text,ref,name,error,ref,element,contains,empty,target,attribute,ele,return,null,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,to,parent,ref,set,source,extract,source,ele,return,ref,else,if,node,name,equals,ele,return,parse,id,ref,element,ele,else,if,node,name,equals,ele,return,parse,value,element,ele,default,value,type,else,if,node,name,equals,ele,typed,string,value,null,holder,new,typed,string,value,null,null,holder,set,source,extract,source,ele,return,null,holder,else,if,node,name,equals,ele,return,parse,array,element,ele,bd,else,if,node,name,equals,ele,return,parse,list,element,ele,bd,else,if,node,name,equals,ele,return,parse,set,element,ele,bd,else,if,node,name,equals,ele,return,parse,map,element,ele,bd,else,if,node,name,equals,ele,return,parse,props,element,ele,else,error,unknown,property,sub,element,ele,get,node,name,ele,return,null
BeanDefinitionParserDelegate -> @Deprecated 	public void initDefaults(Element root);1356735495;Initialize the default settings assuming a {@code null} parent delegate._@deprecated in Spring 3.1 in favor of_{@link #initDefaults(Element, BeanDefinitionParserDelegate)};@Deprecated_	public void initDefaults(Element root) {_		initDefaults(root, null)__	};initialize,the,default,settings,assuming,a,code,null,parent,delegate,deprecated,in,spring,3,1,in,favor,of,link,init,defaults,element,bean,definition,parser,delegate;deprecated,public,void,init,defaults,element,root,init,defaults,root,null
BeanDefinitionParserDelegate -> @Deprecated 	public void initDefaults(Element root);1357119417;Initialize the default settings assuming a {@code null} parent delegate._@deprecated in Spring 3.1 in favor of_{@link #initDefaults(Element, BeanDefinitionParserDelegate)};@Deprecated_	public void initDefaults(Element root) {_		initDefaults(root, null)__	};initialize,the,default,settings,assuming,a,code,null,parent,delegate,deprecated,in,spring,3,1,in,favor,of,link,init,defaults,element,bean,definition,parser,delegate;deprecated,public,void,init,defaults,element,root,init,defaults,root,null
BeanDefinitionParserDelegate -> @Deprecated 	public void initDefaults(Element root);1367943112;Initialize the default settings assuming a {@code null} parent delegate._@deprecated in Spring 3.1 in favor of_{@link #initDefaults(Element, BeanDefinitionParserDelegate)};@Deprecated_	public void initDefaults(Element root) {_		initDefaults(root, null)__	};initialize,the,default,settings,assuming,a,code,null,parent,delegate,deprecated,in,spring,3,1,in,favor,of,link,init,defaults,element,bean,definition,parser,delegate;deprecated,public,void,init,defaults,element,root,init,defaults,root,null
BeanDefinitionParserDelegate -> protected void populateDefaults(DocumentDefaultsDefinition defaults, DocumentDefaultsDefinition parentDefaults, Element root);1328020251;Populate the given DocumentDefaultsDefinition instance with the default lazy-init,_autowire, dependency check settings, init-method, destroy-method and merge settings._Support nested 'beans' element use cases by falling back to_<literal>parentDefaults</literal> in case the defaults are not explicitly set_locally._@param defaults the defaults to populate_@param defaults the parent BeanDefinitionParserDelegate (if any) defaults to fall back to_@param root the root element of the current bean definition document (or nested beans element);protected void populateDefaults(DocumentDefaultsDefinition defaults, DocumentDefaultsDefinition parentDefaults, Element root) {_		String lazyInit = root.getAttribute(DEFAULT_LAZY_INIT_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(lazyInit)) {_			lazyInit = parentDefaults != null ? parentDefaults.getLazyInit() : FALSE_VALUE__		}_		defaults.setLazyInit(lazyInit)___		String merge = root.getAttribute(DEFAULT_MERGE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(merge)) {_			merge = parentDefaults != null ? parentDefaults.getMerge() : FALSE_VALUE__		}_		defaults.setMerge(merge)___		String autowire = root.getAttribute(DEFAULT_AUTOWIRE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(autowire)) {_			autowire = parentDefaults != null ? parentDefaults.getAutowire() : AUTOWIRE_NO_VALUE__		}_		defaults.setAutowire(autowire)___		_		_		_		defaults.setDependencyCheck(root.getAttribute(DEFAULT_DEPENDENCY_CHECK_ATTRIBUTE))___		if (root.hasAttribute(DEFAULT_AUTOWIRE_CANDIDATES_ATTRIBUTE)) {_			defaults.setAutowireCandidates(root.getAttribute(DEFAULT_AUTOWIRE_CANDIDATES_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setAutowireCandidates(parentDefaults.getAutowireCandidates())__		}__		if (root.hasAttribute(DEFAULT_INIT_METHOD_ATTRIBUTE)) {_			defaults.setInitMethod(root.getAttribute(DEFAULT_INIT_METHOD_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setInitMethod(parentDefaults.getInitMethod())__		}__		if (root.hasAttribute(DEFAULT_DESTROY_METHOD_ATTRIBUTE)) {_			defaults.setDestroyMethod(root.getAttribute(DEFAULT_DESTROY_METHOD_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setDestroyMethod(parentDefaults.getDestroyMethod())__		}__		defaults.setSource(this.readerContext.extractSource(root))__	};populate,the,given,document,defaults,definition,instance,with,the,default,lazy,init,autowire,dependency,check,settings,init,method,destroy,method,and,merge,settings,support,nested,beans,element,use,cases,by,falling,back,to,literal,parent,defaults,literal,in,case,the,defaults,are,not,explicitly,set,locally,param,defaults,the,defaults,to,populate,param,defaults,the,parent,bean,definition,parser,delegate,if,any,defaults,to,fall,back,to,param,root,the,root,element,of,the,current,bean,definition,document,or,nested,beans,element;protected,void,populate,defaults,document,defaults,definition,defaults,document,defaults,definition,parent,defaults,element,root,string,lazy,init,root,get,attribute,if,equals,lazy,init,lazy,init,parent,defaults,null,parent,defaults,get,lazy,init,defaults,set,lazy,init,lazy,init,string,merge,root,get,attribute,if,equals,merge,merge,parent,defaults,null,parent,defaults,get,merge,defaults,set,merge,merge,string,autowire,root,get,attribute,if,equals,autowire,autowire,parent,defaults,null,parent,defaults,get,autowire,defaults,set,autowire,autowire,defaults,set,dependency,check,root,get,attribute,if,root,has,attribute,defaults,set,autowire,candidates,root,get,attribute,else,if,parent,defaults,null,defaults,set,autowire,candidates,parent,defaults,get,autowire,candidates,if,root,has,attribute,defaults,set,init,method,root,get,attribute,else,if,parent,defaults,null,defaults,set,init,method,parent,defaults,get,init,method,if,root,has,attribute,defaults,set,destroy,method,root,get,attribute,else,if,parent,defaults,null,defaults,set,destroy,method,parent,defaults,get,destroy,method,defaults,set,source,this,reader,context,extract,source,root
BeanDefinitionParserDelegate -> protected void populateDefaults(DocumentDefaultsDefinition defaults, DocumentDefaultsDefinition parentDefaults, Element root);1335774711;Populate the given DocumentDefaultsDefinition instance with the default lazy-init,_autowire, dependency check settings, init-method, destroy-method and merge settings._Support nested 'beans' element use cases by falling back to_<literal>parentDefaults</literal> in case the defaults are not explicitly set_locally._@param defaults the defaults to populate_@param parentDefaults the parent BeanDefinitionParserDelegate (if any) defaults to fall back to_@param root the root element of the current bean definition document (or nested beans element);protected void populateDefaults(DocumentDefaultsDefinition defaults, DocumentDefaultsDefinition parentDefaults, Element root) {_		String lazyInit = root.getAttribute(DEFAULT_LAZY_INIT_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(lazyInit)) {_			lazyInit = parentDefaults != null ? parentDefaults.getLazyInit() : FALSE_VALUE__		}_		defaults.setLazyInit(lazyInit)___		String merge = root.getAttribute(DEFAULT_MERGE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(merge)) {_			merge = parentDefaults != null ? parentDefaults.getMerge() : FALSE_VALUE__		}_		defaults.setMerge(merge)___		String autowire = root.getAttribute(DEFAULT_AUTOWIRE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(autowire)) {_			autowire = parentDefaults != null ? parentDefaults.getAutowire() : AUTOWIRE_NO_VALUE__		}_		defaults.setAutowire(autowire)___		_		_		_		defaults.setDependencyCheck(root.getAttribute(DEFAULT_DEPENDENCY_CHECK_ATTRIBUTE))___		if (root.hasAttribute(DEFAULT_AUTOWIRE_CANDIDATES_ATTRIBUTE)) {_			defaults.setAutowireCandidates(root.getAttribute(DEFAULT_AUTOWIRE_CANDIDATES_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setAutowireCandidates(parentDefaults.getAutowireCandidates())__		}__		if (root.hasAttribute(DEFAULT_INIT_METHOD_ATTRIBUTE)) {_			defaults.setInitMethod(root.getAttribute(DEFAULT_INIT_METHOD_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setInitMethod(parentDefaults.getInitMethod())__		}__		if (root.hasAttribute(DEFAULT_DESTROY_METHOD_ATTRIBUTE)) {_			defaults.setDestroyMethod(root.getAttribute(DEFAULT_DESTROY_METHOD_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setDestroyMethod(parentDefaults.getDestroyMethod())__		}__		defaults.setSource(this.readerContext.extractSource(root))__	};populate,the,given,document,defaults,definition,instance,with,the,default,lazy,init,autowire,dependency,check,settings,init,method,destroy,method,and,merge,settings,support,nested,beans,element,use,cases,by,falling,back,to,literal,parent,defaults,literal,in,case,the,defaults,are,not,explicitly,set,locally,param,defaults,the,defaults,to,populate,param,parent,defaults,the,parent,bean,definition,parser,delegate,if,any,defaults,to,fall,back,to,param,root,the,root,element,of,the,current,bean,definition,document,or,nested,beans,element;protected,void,populate,defaults,document,defaults,definition,defaults,document,defaults,definition,parent,defaults,element,root,string,lazy,init,root,get,attribute,if,equals,lazy,init,lazy,init,parent,defaults,null,parent,defaults,get,lazy,init,defaults,set,lazy,init,lazy,init,string,merge,root,get,attribute,if,equals,merge,merge,parent,defaults,null,parent,defaults,get,merge,defaults,set,merge,merge,string,autowire,root,get,attribute,if,equals,autowire,autowire,parent,defaults,null,parent,defaults,get,autowire,defaults,set,autowire,autowire,defaults,set,dependency,check,root,get,attribute,if,root,has,attribute,defaults,set,autowire,candidates,root,get,attribute,else,if,parent,defaults,null,defaults,set,autowire,candidates,parent,defaults,get,autowire,candidates,if,root,has,attribute,defaults,set,init,method,root,get,attribute,else,if,parent,defaults,null,defaults,set,init,method,parent,defaults,get,init,method,if,root,has,attribute,defaults,set,destroy,method,root,get,attribute,else,if,parent,defaults,null,defaults,set,destroy,method,parent,defaults,get,destroy,method,defaults,set,source,this,reader,context,extract,source,root
BeanDefinitionParserDelegate -> protected void populateDefaults(DocumentDefaultsDefinition defaults, DocumentDefaultsDefinition parentDefaults, Element root);1337341719;Populate the given DocumentDefaultsDefinition instance with the default lazy-init,_autowire, dependency check settings, init-method, destroy-method and merge settings._Support nested 'beans' element use cases by falling back to_<literal>parentDefaults</literal> in case the defaults are not explicitly set_locally._@param defaults the defaults to populate_@param parentDefaults the parent BeanDefinitionParserDelegate (if any) defaults to fall back to_@param root the root element of the current bean definition document (or nested beans element);protected void populateDefaults(DocumentDefaultsDefinition defaults, DocumentDefaultsDefinition parentDefaults, Element root) {_		String lazyInit = root.getAttribute(DEFAULT_LAZY_INIT_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(lazyInit)) {_			lazyInit = parentDefaults != null ? parentDefaults.getLazyInit() : FALSE_VALUE__		}_		defaults.setLazyInit(lazyInit)___		String merge = root.getAttribute(DEFAULT_MERGE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(merge)) {_			merge = parentDefaults != null ? parentDefaults.getMerge() : FALSE_VALUE__		}_		defaults.setMerge(merge)___		String autowire = root.getAttribute(DEFAULT_AUTOWIRE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(autowire)) {_			autowire = parentDefaults != null ? parentDefaults.getAutowire() : AUTOWIRE_NO_VALUE__		}_		defaults.setAutowire(autowire)___		_		_		_		defaults.setDependencyCheck(root.getAttribute(DEFAULT_DEPENDENCY_CHECK_ATTRIBUTE))___		if (root.hasAttribute(DEFAULT_AUTOWIRE_CANDIDATES_ATTRIBUTE)) {_			defaults.setAutowireCandidates(root.getAttribute(DEFAULT_AUTOWIRE_CANDIDATES_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setAutowireCandidates(parentDefaults.getAutowireCandidates())__		}__		if (root.hasAttribute(DEFAULT_INIT_METHOD_ATTRIBUTE)) {_			defaults.setInitMethod(root.getAttribute(DEFAULT_INIT_METHOD_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setInitMethod(parentDefaults.getInitMethod())__		}__		if (root.hasAttribute(DEFAULT_DESTROY_METHOD_ATTRIBUTE)) {_			defaults.setDestroyMethod(root.getAttribute(DEFAULT_DESTROY_METHOD_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setDestroyMethod(parentDefaults.getDestroyMethod())__		}__		defaults.setSource(this.readerContext.extractSource(root))__	};populate,the,given,document,defaults,definition,instance,with,the,default,lazy,init,autowire,dependency,check,settings,init,method,destroy,method,and,merge,settings,support,nested,beans,element,use,cases,by,falling,back,to,literal,parent,defaults,literal,in,case,the,defaults,are,not,explicitly,set,locally,param,defaults,the,defaults,to,populate,param,parent,defaults,the,parent,bean,definition,parser,delegate,if,any,defaults,to,fall,back,to,param,root,the,root,element,of,the,current,bean,definition,document,or,nested,beans,element;protected,void,populate,defaults,document,defaults,definition,defaults,document,defaults,definition,parent,defaults,element,root,string,lazy,init,root,get,attribute,if,equals,lazy,init,lazy,init,parent,defaults,null,parent,defaults,get,lazy,init,defaults,set,lazy,init,lazy,init,string,merge,root,get,attribute,if,equals,merge,merge,parent,defaults,null,parent,defaults,get,merge,defaults,set,merge,merge,string,autowire,root,get,attribute,if,equals,autowire,autowire,parent,defaults,null,parent,defaults,get,autowire,defaults,set,autowire,autowire,defaults,set,dependency,check,root,get,attribute,if,root,has,attribute,defaults,set,autowire,candidates,root,get,attribute,else,if,parent,defaults,null,defaults,set,autowire,candidates,parent,defaults,get,autowire,candidates,if,root,has,attribute,defaults,set,init,method,root,get,attribute,else,if,parent,defaults,null,defaults,set,init,method,parent,defaults,get,init,method,if,root,has,attribute,defaults,set,destroy,method,root,get,attribute,else,if,parent,defaults,null,defaults,set,destroy,method,parent,defaults,get,destroy,method,defaults,set,source,this,reader,context,extract,source,root
BeanDefinitionParserDelegate -> protected void populateDefaults(DocumentDefaultsDefinition defaults, DocumentDefaultsDefinition parentDefaults, Element root);1351392612;Populate the given DocumentDefaultsDefinition instance with the default lazy-init,_autowire, dependency check settings, init-method, destroy-method and merge settings._Support nested 'beans' element use cases by falling back to_<literal>parentDefaults</literal> in case the defaults are not explicitly set_locally._@param defaults the defaults to populate_@param parentDefaults the parent BeanDefinitionParserDelegate (if any) defaults to fall back to_@param root the root element of the current bean definition document (or nested beans element);protected void populateDefaults(DocumentDefaultsDefinition defaults, DocumentDefaultsDefinition parentDefaults, Element root) {_		String lazyInit = root.getAttribute(DEFAULT_LAZY_INIT_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(lazyInit)) {_			lazyInit = parentDefaults != null ? parentDefaults.getLazyInit() : FALSE_VALUE__		}_		defaults.setLazyInit(lazyInit)___		String merge = root.getAttribute(DEFAULT_MERGE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(merge)) {_			merge = parentDefaults != null ? parentDefaults.getMerge() : FALSE_VALUE__		}_		defaults.setMerge(merge)___		String autowire = root.getAttribute(DEFAULT_AUTOWIRE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(autowire)) {_			autowire = parentDefaults != null ? parentDefaults.getAutowire() : AUTOWIRE_NO_VALUE__		}_		defaults.setAutowire(autowire)___		_		_		_		defaults.setDependencyCheck(root.getAttribute(DEFAULT_DEPENDENCY_CHECK_ATTRIBUTE))___		if (root.hasAttribute(DEFAULT_AUTOWIRE_CANDIDATES_ATTRIBUTE)) {_			defaults.setAutowireCandidates(root.getAttribute(DEFAULT_AUTOWIRE_CANDIDATES_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setAutowireCandidates(parentDefaults.getAutowireCandidates())__		}__		if (root.hasAttribute(DEFAULT_INIT_METHOD_ATTRIBUTE)) {_			defaults.setInitMethod(root.getAttribute(DEFAULT_INIT_METHOD_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setInitMethod(parentDefaults.getInitMethod())__		}__		if (root.hasAttribute(DEFAULT_DESTROY_METHOD_ATTRIBUTE)) {_			defaults.setDestroyMethod(root.getAttribute(DEFAULT_DESTROY_METHOD_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setDestroyMethod(parentDefaults.getDestroyMethod())__		}__		defaults.setSource(this.readerContext.extractSource(root))__	};populate,the,given,document,defaults,definition,instance,with,the,default,lazy,init,autowire,dependency,check,settings,init,method,destroy,method,and,merge,settings,support,nested,beans,element,use,cases,by,falling,back,to,literal,parent,defaults,literal,in,case,the,defaults,are,not,explicitly,set,locally,param,defaults,the,defaults,to,populate,param,parent,defaults,the,parent,bean,definition,parser,delegate,if,any,defaults,to,fall,back,to,param,root,the,root,element,of,the,current,bean,definition,document,or,nested,beans,element;protected,void,populate,defaults,document,defaults,definition,defaults,document,defaults,definition,parent,defaults,element,root,string,lazy,init,root,get,attribute,if,equals,lazy,init,lazy,init,parent,defaults,null,parent,defaults,get,lazy,init,defaults,set,lazy,init,lazy,init,string,merge,root,get,attribute,if,equals,merge,merge,parent,defaults,null,parent,defaults,get,merge,defaults,set,merge,merge,string,autowire,root,get,attribute,if,equals,autowire,autowire,parent,defaults,null,parent,defaults,get,autowire,defaults,set,autowire,autowire,defaults,set,dependency,check,root,get,attribute,if,root,has,attribute,defaults,set,autowire,candidates,root,get,attribute,else,if,parent,defaults,null,defaults,set,autowire,candidates,parent,defaults,get,autowire,candidates,if,root,has,attribute,defaults,set,init,method,root,get,attribute,else,if,parent,defaults,null,defaults,set,init,method,parent,defaults,get,init,method,if,root,has,attribute,defaults,set,destroy,method,root,get,attribute,else,if,parent,defaults,null,defaults,set,destroy,method,parent,defaults,get,destroy,method,defaults,set,source,this,reader,context,extract,source,root
BeanDefinitionParserDelegate -> protected void populateDefaults(DocumentDefaultsDefinition defaults, DocumentDefaultsDefinition parentDefaults, Element root);1351696936;Populate the given DocumentDefaultsDefinition instance with the default lazy-init,_autowire, dependency check settings, init-method, destroy-method and merge settings._Support nested 'beans' element use cases by falling back to_<literal>parentDefaults</literal> in case the defaults are not explicitly set_locally._@param defaults the defaults to populate_@param parentDefaults the parent BeanDefinitionParserDelegate (if any) defaults to fall back to_@param root the root element of the current bean definition document (or nested beans element);protected void populateDefaults(DocumentDefaultsDefinition defaults, DocumentDefaultsDefinition parentDefaults, Element root) {_		String lazyInit = root.getAttribute(DEFAULT_LAZY_INIT_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(lazyInit)) {_			lazyInit = parentDefaults != null ? parentDefaults.getLazyInit() : FALSE_VALUE__		}_		defaults.setLazyInit(lazyInit)___		String merge = root.getAttribute(DEFAULT_MERGE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(merge)) {_			merge = parentDefaults != null ? parentDefaults.getMerge() : FALSE_VALUE__		}_		defaults.setMerge(merge)___		String autowire = root.getAttribute(DEFAULT_AUTOWIRE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(autowire)) {_			autowire = parentDefaults != null ? parentDefaults.getAutowire() : AUTOWIRE_NO_VALUE__		}_		defaults.setAutowire(autowire)___		_		_		_		defaults.setDependencyCheck(root.getAttribute(DEFAULT_DEPENDENCY_CHECK_ATTRIBUTE))___		if (root.hasAttribute(DEFAULT_AUTOWIRE_CANDIDATES_ATTRIBUTE)) {_			defaults.setAutowireCandidates(root.getAttribute(DEFAULT_AUTOWIRE_CANDIDATES_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setAutowireCandidates(parentDefaults.getAutowireCandidates())__		}__		if (root.hasAttribute(DEFAULT_INIT_METHOD_ATTRIBUTE)) {_			defaults.setInitMethod(root.getAttribute(DEFAULT_INIT_METHOD_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setInitMethod(parentDefaults.getInitMethod())__		}__		if (root.hasAttribute(DEFAULT_DESTROY_METHOD_ATTRIBUTE)) {_			defaults.setDestroyMethod(root.getAttribute(DEFAULT_DESTROY_METHOD_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setDestroyMethod(parentDefaults.getDestroyMethod())__		}__		defaults.setSource(this.readerContext.extractSource(root))__	};populate,the,given,document,defaults,definition,instance,with,the,default,lazy,init,autowire,dependency,check,settings,init,method,destroy,method,and,merge,settings,support,nested,beans,element,use,cases,by,falling,back,to,literal,parent,defaults,literal,in,case,the,defaults,are,not,explicitly,set,locally,param,defaults,the,defaults,to,populate,param,parent,defaults,the,parent,bean,definition,parser,delegate,if,any,defaults,to,fall,back,to,param,root,the,root,element,of,the,current,bean,definition,document,or,nested,beans,element;protected,void,populate,defaults,document,defaults,definition,defaults,document,defaults,definition,parent,defaults,element,root,string,lazy,init,root,get,attribute,if,equals,lazy,init,lazy,init,parent,defaults,null,parent,defaults,get,lazy,init,defaults,set,lazy,init,lazy,init,string,merge,root,get,attribute,if,equals,merge,merge,parent,defaults,null,parent,defaults,get,merge,defaults,set,merge,merge,string,autowire,root,get,attribute,if,equals,autowire,autowire,parent,defaults,null,parent,defaults,get,autowire,defaults,set,autowire,autowire,defaults,set,dependency,check,root,get,attribute,if,root,has,attribute,defaults,set,autowire,candidates,root,get,attribute,else,if,parent,defaults,null,defaults,set,autowire,candidates,parent,defaults,get,autowire,candidates,if,root,has,attribute,defaults,set,init,method,root,get,attribute,else,if,parent,defaults,null,defaults,set,init,method,parent,defaults,get,init,method,if,root,has,attribute,defaults,set,destroy,method,root,get,attribute,else,if,parent,defaults,null,defaults,set,destroy,method,parent,defaults,get,destroy,method,defaults,set,source,this,reader,context,extract,source,root
BeanDefinitionParserDelegate -> protected void populateDefaults(DocumentDefaultsDefinition defaults, DocumentDefaultsDefinition parentDefaults, Element root);1356735495;Populate the given DocumentDefaultsDefinition instance with the default lazy-init,_autowire, dependency check settings, init-method, destroy-method and merge settings._Support nested 'beans' element use cases by falling back to_<literal>parentDefaults</literal> in case the defaults are not explicitly set_locally._@param defaults the defaults to populate_@param parentDefaults the parent BeanDefinitionParserDelegate (if any) defaults to fall back to_@param root the root element of the current bean definition document (or nested beans element);protected void populateDefaults(DocumentDefaultsDefinition defaults, DocumentDefaultsDefinition parentDefaults, Element root) {_		String lazyInit = root.getAttribute(DEFAULT_LAZY_INIT_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(lazyInit)) {_			lazyInit = parentDefaults != null ? parentDefaults.getLazyInit() : FALSE_VALUE__		}_		defaults.setLazyInit(lazyInit)___		String merge = root.getAttribute(DEFAULT_MERGE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(merge)) {_			merge = parentDefaults != null ? parentDefaults.getMerge() : FALSE_VALUE__		}_		defaults.setMerge(merge)___		String autowire = root.getAttribute(DEFAULT_AUTOWIRE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(autowire)) {_			autowire = parentDefaults != null ? parentDefaults.getAutowire() : AUTOWIRE_NO_VALUE__		}_		defaults.setAutowire(autowire)___		_		_		_		defaults.setDependencyCheck(root.getAttribute(DEFAULT_DEPENDENCY_CHECK_ATTRIBUTE))___		if (root.hasAttribute(DEFAULT_AUTOWIRE_CANDIDATES_ATTRIBUTE)) {_			defaults.setAutowireCandidates(root.getAttribute(DEFAULT_AUTOWIRE_CANDIDATES_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setAutowireCandidates(parentDefaults.getAutowireCandidates())__		}__		if (root.hasAttribute(DEFAULT_INIT_METHOD_ATTRIBUTE)) {_			defaults.setInitMethod(root.getAttribute(DEFAULT_INIT_METHOD_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setInitMethod(parentDefaults.getInitMethod())__		}__		if (root.hasAttribute(DEFAULT_DESTROY_METHOD_ATTRIBUTE)) {_			defaults.setDestroyMethod(root.getAttribute(DEFAULT_DESTROY_METHOD_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setDestroyMethod(parentDefaults.getDestroyMethod())__		}__		defaults.setSource(this.readerContext.extractSource(root))__	};populate,the,given,document,defaults,definition,instance,with,the,default,lazy,init,autowire,dependency,check,settings,init,method,destroy,method,and,merge,settings,support,nested,beans,element,use,cases,by,falling,back,to,literal,parent,defaults,literal,in,case,the,defaults,are,not,explicitly,set,locally,param,defaults,the,defaults,to,populate,param,parent,defaults,the,parent,bean,definition,parser,delegate,if,any,defaults,to,fall,back,to,param,root,the,root,element,of,the,current,bean,definition,document,or,nested,beans,element;protected,void,populate,defaults,document,defaults,definition,defaults,document,defaults,definition,parent,defaults,element,root,string,lazy,init,root,get,attribute,if,equals,lazy,init,lazy,init,parent,defaults,null,parent,defaults,get,lazy,init,defaults,set,lazy,init,lazy,init,string,merge,root,get,attribute,if,equals,merge,merge,parent,defaults,null,parent,defaults,get,merge,defaults,set,merge,merge,string,autowire,root,get,attribute,if,equals,autowire,autowire,parent,defaults,null,parent,defaults,get,autowire,defaults,set,autowire,autowire,defaults,set,dependency,check,root,get,attribute,if,root,has,attribute,defaults,set,autowire,candidates,root,get,attribute,else,if,parent,defaults,null,defaults,set,autowire,candidates,parent,defaults,get,autowire,candidates,if,root,has,attribute,defaults,set,init,method,root,get,attribute,else,if,parent,defaults,null,defaults,set,init,method,parent,defaults,get,init,method,if,root,has,attribute,defaults,set,destroy,method,root,get,attribute,else,if,parent,defaults,null,defaults,set,destroy,method,parent,defaults,get,destroy,method,defaults,set,source,this,reader,context,extract,source,root
BeanDefinitionParserDelegate -> protected void populateDefaults(DocumentDefaultsDefinition defaults, DocumentDefaultsDefinition parentDefaults, Element root);1357119417;Populate the given DocumentDefaultsDefinition instance with the default lazy-init,_autowire, dependency check settings, init-method, destroy-method and merge settings._Support nested 'beans' element use cases by falling back to_<literal>parentDefaults</literal> in case the defaults are not explicitly set_locally._@param defaults the defaults to populate_@param parentDefaults the parent BeanDefinitionParserDelegate (if any) defaults to fall back to_@param root the root element of the current bean definition document (or nested beans element);protected void populateDefaults(DocumentDefaultsDefinition defaults, DocumentDefaultsDefinition parentDefaults, Element root) {_		String lazyInit = root.getAttribute(DEFAULT_LAZY_INIT_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(lazyInit)) {_			lazyInit = parentDefaults != null ? parentDefaults.getLazyInit() : FALSE_VALUE__		}_		defaults.setLazyInit(lazyInit)___		String merge = root.getAttribute(DEFAULT_MERGE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(merge)) {_			merge = parentDefaults != null ? parentDefaults.getMerge() : FALSE_VALUE__		}_		defaults.setMerge(merge)___		String autowire = root.getAttribute(DEFAULT_AUTOWIRE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(autowire)) {_			autowire = parentDefaults != null ? parentDefaults.getAutowire() : AUTOWIRE_NO_VALUE__		}_		defaults.setAutowire(autowire)___		_		_		_		defaults.setDependencyCheck(root.getAttribute(DEFAULT_DEPENDENCY_CHECK_ATTRIBUTE))___		if (root.hasAttribute(DEFAULT_AUTOWIRE_CANDIDATES_ATTRIBUTE)) {_			defaults.setAutowireCandidates(root.getAttribute(DEFAULT_AUTOWIRE_CANDIDATES_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setAutowireCandidates(parentDefaults.getAutowireCandidates())__		}__		if (root.hasAttribute(DEFAULT_INIT_METHOD_ATTRIBUTE)) {_			defaults.setInitMethod(root.getAttribute(DEFAULT_INIT_METHOD_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setInitMethod(parentDefaults.getInitMethod())__		}__		if (root.hasAttribute(DEFAULT_DESTROY_METHOD_ATTRIBUTE)) {_			defaults.setDestroyMethod(root.getAttribute(DEFAULT_DESTROY_METHOD_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setDestroyMethod(parentDefaults.getDestroyMethod())__		}__		defaults.setSource(this.readerContext.extractSource(root))__	};populate,the,given,document,defaults,definition,instance,with,the,default,lazy,init,autowire,dependency,check,settings,init,method,destroy,method,and,merge,settings,support,nested,beans,element,use,cases,by,falling,back,to,literal,parent,defaults,literal,in,case,the,defaults,are,not,explicitly,set,locally,param,defaults,the,defaults,to,populate,param,parent,defaults,the,parent,bean,definition,parser,delegate,if,any,defaults,to,fall,back,to,param,root,the,root,element,of,the,current,bean,definition,document,or,nested,beans,element;protected,void,populate,defaults,document,defaults,definition,defaults,document,defaults,definition,parent,defaults,element,root,string,lazy,init,root,get,attribute,if,equals,lazy,init,lazy,init,parent,defaults,null,parent,defaults,get,lazy,init,defaults,set,lazy,init,lazy,init,string,merge,root,get,attribute,if,equals,merge,merge,parent,defaults,null,parent,defaults,get,merge,defaults,set,merge,merge,string,autowire,root,get,attribute,if,equals,autowire,autowire,parent,defaults,null,parent,defaults,get,autowire,defaults,set,autowire,autowire,defaults,set,dependency,check,root,get,attribute,if,root,has,attribute,defaults,set,autowire,candidates,root,get,attribute,else,if,parent,defaults,null,defaults,set,autowire,candidates,parent,defaults,get,autowire,candidates,if,root,has,attribute,defaults,set,init,method,root,get,attribute,else,if,parent,defaults,null,defaults,set,init,method,parent,defaults,get,init,method,if,root,has,attribute,defaults,set,destroy,method,root,get,attribute,else,if,parent,defaults,null,defaults,set,destroy,method,parent,defaults,get,destroy,method,defaults,set,source,this,reader,context,extract,source,root
BeanDefinitionParserDelegate -> protected void populateDefaults(DocumentDefaultsDefinition defaults, DocumentDefaultsDefinition parentDefaults, Element root);1367943112;Populate the given DocumentDefaultsDefinition instance with the default lazy-init,_autowire, dependency check settings, init-method, destroy-method and merge settings._Support nested 'beans' element use cases by falling back to_<literal>parentDefaults</literal> in case the defaults are not explicitly set_locally._@param defaults the defaults to populate_@param parentDefaults the parent BeanDefinitionParserDelegate (if any) defaults to fall back to_@param root the root element of the current bean definition document (or nested beans element);protected void populateDefaults(DocumentDefaultsDefinition defaults, DocumentDefaultsDefinition parentDefaults, Element root) {_		String lazyInit = root.getAttribute(DEFAULT_LAZY_INIT_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(lazyInit)) {_			lazyInit = parentDefaults != null ? parentDefaults.getLazyInit() : FALSE_VALUE__		}_		defaults.setLazyInit(lazyInit)___		String merge = root.getAttribute(DEFAULT_MERGE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(merge)) {_			merge = parentDefaults != null ? parentDefaults.getMerge() : FALSE_VALUE__		}_		defaults.setMerge(merge)___		String autowire = root.getAttribute(DEFAULT_AUTOWIRE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(autowire)) {_			autowire = parentDefaults != null ? parentDefaults.getAutowire() : AUTOWIRE_NO_VALUE__		}_		defaults.setAutowire(autowire)___		_		_		_		defaults.setDependencyCheck(root.getAttribute(DEFAULT_DEPENDENCY_CHECK_ATTRIBUTE))___		if (root.hasAttribute(DEFAULT_AUTOWIRE_CANDIDATES_ATTRIBUTE)) {_			defaults.setAutowireCandidates(root.getAttribute(DEFAULT_AUTOWIRE_CANDIDATES_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setAutowireCandidates(parentDefaults.getAutowireCandidates())__		}__		if (root.hasAttribute(DEFAULT_INIT_METHOD_ATTRIBUTE)) {_			defaults.setInitMethod(root.getAttribute(DEFAULT_INIT_METHOD_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setInitMethod(parentDefaults.getInitMethod())__		}__		if (root.hasAttribute(DEFAULT_DESTROY_METHOD_ATTRIBUTE)) {_			defaults.setDestroyMethod(root.getAttribute(DEFAULT_DESTROY_METHOD_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setDestroyMethod(parentDefaults.getDestroyMethod())__		}__		defaults.setSource(this.readerContext.extractSource(root))__	};populate,the,given,document,defaults,definition,instance,with,the,default,lazy,init,autowire,dependency,check,settings,init,method,destroy,method,and,merge,settings,support,nested,beans,element,use,cases,by,falling,back,to,literal,parent,defaults,literal,in,case,the,defaults,are,not,explicitly,set,locally,param,defaults,the,defaults,to,populate,param,parent,defaults,the,parent,bean,definition,parser,delegate,if,any,defaults,to,fall,back,to,param,root,the,root,element,of,the,current,bean,definition,document,or,nested,beans,element;protected,void,populate,defaults,document,defaults,definition,defaults,document,defaults,definition,parent,defaults,element,root,string,lazy,init,root,get,attribute,if,equals,lazy,init,lazy,init,parent,defaults,null,parent,defaults,get,lazy,init,defaults,set,lazy,init,lazy,init,string,merge,root,get,attribute,if,equals,merge,merge,parent,defaults,null,parent,defaults,get,merge,defaults,set,merge,merge,string,autowire,root,get,attribute,if,equals,autowire,autowire,parent,defaults,null,parent,defaults,get,autowire,defaults,set,autowire,autowire,defaults,set,dependency,check,root,get,attribute,if,root,has,attribute,defaults,set,autowire,candidates,root,get,attribute,else,if,parent,defaults,null,defaults,set,autowire,candidates,parent,defaults,get,autowire,candidates,if,root,has,attribute,defaults,set,init,method,root,get,attribute,else,if,parent,defaults,null,defaults,set,init,method,parent,defaults,get,init,method,if,root,has,attribute,defaults,set,destroy,method,root,get,attribute,else,if,parent,defaults,null,defaults,set,destroy,method,parent,defaults,get,destroy,method,defaults,set,source,this,reader,context,extract,source,root
BeanDefinitionParserDelegate -> protected void populateDefaults(DocumentDefaultsDefinition defaults, DocumentDefaultsDefinition parentDefaults, Element root);1382030648;Populate the given DocumentDefaultsDefinition instance with the default lazy-init,_autowire, dependency check settings, init-method, destroy-method and merge settings._Support nested 'beans' element use cases by falling back to_<literal>parentDefaults</literal> in case the defaults are not explicitly set_locally._@param defaults the defaults to populate_@param parentDefaults the parent BeanDefinitionParserDelegate (if any) defaults to fall back to_@param root the root element of the current bean definition document (or nested beans element);protected void populateDefaults(DocumentDefaultsDefinition defaults, DocumentDefaultsDefinition parentDefaults, Element root) {_		String lazyInit = root.getAttribute(DEFAULT_LAZY_INIT_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(lazyInit)) {_			lazyInit = parentDefaults != null ? parentDefaults.getLazyInit() : FALSE_VALUE__		}_		defaults.setLazyInit(lazyInit)___		String merge = root.getAttribute(DEFAULT_MERGE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(merge)) {_			merge = parentDefaults != null ? parentDefaults.getMerge() : FALSE_VALUE__		}_		defaults.setMerge(merge)___		String autowire = root.getAttribute(DEFAULT_AUTOWIRE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(autowire)) {_			autowire = parentDefaults != null ? parentDefaults.getAutowire() : AUTOWIRE_NO_VALUE__		}_		defaults.setAutowire(autowire)___		_		_		_		defaults.setDependencyCheck(root.getAttribute(DEFAULT_DEPENDENCY_CHECK_ATTRIBUTE))___		if (root.hasAttribute(DEFAULT_AUTOWIRE_CANDIDATES_ATTRIBUTE)) {_			defaults.setAutowireCandidates(root.getAttribute(DEFAULT_AUTOWIRE_CANDIDATES_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setAutowireCandidates(parentDefaults.getAutowireCandidates())__		}__		if (root.hasAttribute(DEFAULT_INIT_METHOD_ATTRIBUTE)) {_			defaults.setInitMethod(root.getAttribute(DEFAULT_INIT_METHOD_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setInitMethod(parentDefaults.getInitMethod())__		}__		if (root.hasAttribute(DEFAULT_DESTROY_METHOD_ATTRIBUTE)) {_			defaults.setDestroyMethod(root.getAttribute(DEFAULT_DESTROY_METHOD_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setDestroyMethod(parentDefaults.getDestroyMethod())__		}__		defaults.setSource(this.readerContext.extractSource(root))__	};populate,the,given,document,defaults,definition,instance,with,the,default,lazy,init,autowire,dependency,check,settings,init,method,destroy,method,and,merge,settings,support,nested,beans,element,use,cases,by,falling,back,to,literal,parent,defaults,literal,in,case,the,defaults,are,not,explicitly,set,locally,param,defaults,the,defaults,to,populate,param,parent,defaults,the,parent,bean,definition,parser,delegate,if,any,defaults,to,fall,back,to,param,root,the,root,element,of,the,current,bean,definition,document,or,nested,beans,element;protected,void,populate,defaults,document,defaults,definition,defaults,document,defaults,definition,parent,defaults,element,root,string,lazy,init,root,get,attribute,if,equals,lazy,init,lazy,init,parent,defaults,null,parent,defaults,get,lazy,init,defaults,set,lazy,init,lazy,init,string,merge,root,get,attribute,if,equals,merge,merge,parent,defaults,null,parent,defaults,get,merge,defaults,set,merge,merge,string,autowire,root,get,attribute,if,equals,autowire,autowire,parent,defaults,null,parent,defaults,get,autowire,defaults,set,autowire,autowire,defaults,set,dependency,check,root,get,attribute,if,root,has,attribute,defaults,set,autowire,candidates,root,get,attribute,else,if,parent,defaults,null,defaults,set,autowire,candidates,parent,defaults,get,autowire,candidates,if,root,has,attribute,defaults,set,init,method,root,get,attribute,else,if,parent,defaults,null,defaults,set,init,method,parent,defaults,get,init,method,if,root,has,attribute,defaults,set,destroy,method,root,get,attribute,else,if,parent,defaults,null,defaults,set,destroy,method,parent,defaults,get,destroy,method,defaults,set,source,this,reader,context,extract,source,root
BeanDefinitionParserDelegate -> protected void populateDefaults(DocumentDefaultsDefinition defaults, DocumentDefaultsDefinition parentDefaults, Element root);1385412762;Populate the given DocumentDefaultsDefinition instance with the default lazy-init,_autowire, dependency check settings, init-method, destroy-method and merge settings._Support nested 'beans' element use cases by falling back to_<literal>parentDefaults</literal> in case the defaults are not explicitly set_locally._@param defaults the defaults to populate_@param parentDefaults the parent BeanDefinitionParserDelegate (if any) defaults to fall back to_@param root the root element of the current bean definition document (or nested beans element);protected void populateDefaults(DocumentDefaultsDefinition defaults, DocumentDefaultsDefinition parentDefaults, Element root) {_		String lazyInit = root.getAttribute(DEFAULT_LAZY_INIT_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(lazyInit)) {_			lazyInit = parentDefaults != null ? parentDefaults.getLazyInit() : FALSE_VALUE__		}_		defaults.setLazyInit(lazyInit)___		String merge = root.getAttribute(DEFAULT_MERGE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(merge)) {_			merge = parentDefaults != null ? parentDefaults.getMerge() : FALSE_VALUE__		}_		defaults.setMerge(merge)___		String autowire = root.getAttribute(DEFAULT_AUTOWIRE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(autowire)) {_			autowire = parentDefaults != null ? parentDefaults.getAutowire() : AUTOWIRE_NO_VALUE__		}_		defaults.setAutowire(autowire)___		_		_		_		defaults.setDependencyCheck(root.getAttribute(DEFAULT_DEPENDENCY_CHECK_ATTRIBUTE))___		if (root.hasAttribute(DEFAULT_AUTOWIRE_CANDIDATES_ATTRIBUTE)) {_			defaults.setAutowireCandidates(root.getAttribute(DEFAULT_AUTOWIRE_CANDIDATES_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setAutowireCandidates(parentDefaults.getAutowireCandidates())__		}__		if (root.hasAttribute(DEFAULT_INIT_METHOD_ATTRIBUTE)) {_			defaults.setInitMethod(root.getAttribute(DEFAULT_INIT_METHOD_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setInitMethod(parentDefaults.getInitMethod())__		}__		if (root.hasAttribute(DEFAULT_DESTROY_METHOD_ATTRIBUTE)) {_			defaults.setDestroyMethod(root.getAttribute(DEFAULT_DESTROY_METHOD_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setDestroyMethod(parentDefaults.getDestroyMethod())__		}__		defaults.setSource(this.readerContext.extractSource(root))__	};populate,the,given,document,defaults,definition,instance,with,the,default,lazy,init,autowire,dependency,check,settings,init,method,destroy,method,and,merge,settings,support,nested,beans,element,use,cases,by,falling,back,to,literal,parent,defaults,literal,in,case,the,defaults,are,not,explicitly,set,locally,param,defaults,the,defaults,to,populate,param,parent,defaults,the,parent,bean,definition,parser,delegate,if,any,defaults,to,fall,back,to,param,root,the,root,element,of,the,current,bean,definition,document,or,nested,beans,element;protected,void,populate,defaults,document,defaults,definition,defaults,document,defaults,definition,parent,defaults,element,root,string,lazy,init,root,get,attribute,if,equals,lazy,init,lazy,init,parent,defaults,null,parent,defaults,get,lazy,init,defaults,set,lazy,init,lazy,init,string,merge,root,get,attribute,if,equals,merge,merge,parent,defaults,null,parent,defaults,get,merge,defaults,set,merge,merge,string,autowire,root,get,attribute,if,equals,autowire,autowire,parent,defaults,null,parent,defaults,get,autowire,defaults,set,autowire,autowire,defaults,set,dependency,check,root,get,attribute,if,root,has,attribute,defaults,set,autowire,candidates,root,get,attribute,else,if,parent,defaults,null,defaults,set,autowire,candidates,parent,defaults,get,autowire,candidates,if,root,has,attribute,defaults,set,init,method,root,get,attribute,else,if,parent,defaults,null,defaults,set,init,method,parent,defaults,get,init,method,if,root,has,attribute,defaults,set,destroy,method,root,get,attribute,else,if,parent,defaults,null,defaults,set,destroy,method,parent,defaults,get,destroy,method,defaults,set,source,this,reader,context,extract,source,root
BeanDefinitionParserDelegate -> protected void populateDefaults(DocumentDefaultsDefinition defaults, DocumentDefaultsDefinition parentDefaults, Element root);1410953197;Populate the given DocumentDefaultsDefinition instance with the default lazy-init,_autowire, dependency check settings, init-method, destroy-method and merge settings._Support nested 'beans' element use cases by falling back to_<literal>parentDefaults</literal> in case the defaults are not explicitly set_locally._@param defaults the defaults to populate_@param parentDefaults the parent BeanDefinitionParserDelegate (if any) defaults to fall back to_@param root the root element of the current bean definition document (or nested beans element);protected void populateDefaults(DocumentDefaultsDefinition defaults, DocumentDefaultsDefinition parentDefaults, Element root) {_		String lazyInit = root.getAttribute(DEFAULT_LAZY_INIT_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(lazyInit)) {_			lazyInit = parentDefaults != null ? parentDefaults.getLazyInit() : FALSE_VALUE__		}_		defaults.setLazyInit(lazyInit)___		String merge = root.getAttribute(DEFAULT_MERGE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(merge)) {_			merge = parentDefaults != null ? parentDefaults.getMerge() : FALSE_VALUE__		}_		defaults.setMerge(merge)___		String autowire = root.getAttribute(DEFAULT_AUTOWIRE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(autowire)) {_			autowire = parentDefaults != null ? parentDefaults.getAutowire() : AUTOWIRE_NO_VALUE__		}_		defaults.setAutowire(autowire)___		_		_		_		defaults.setDependencyCheck(root.getAttribute(DEFAULT_DEPENDENCY_CHECK_ATTRIBUTE))___		if (root.hasAttribute(DEFAULT_AUTOWIRE_CANDIDATES_ATTRIBUTE)) {_			defaults.setAutowireCandidates(root.getAttribute(DEFAULT_AUTOWIRE_CANDIDATES_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setAutowireCandidates(parentDefaults.getAutowireCandidates())__		}__		if (root.hasAttribute(DEFAULT_INIT_METHOD_ATTRIBUTE)) {_			defaults.setInitMethod(root.getAttribute(DEFAULT_INIT_METHOD_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setInitMethod(parentDefaults.getInitMethod())__		}__		if (root.hasAttribute(DEFAULT_DESTROY_METHOD_ATTRIBUTE)) {_			defaults.setDestroyMethod(root.getAttribute(DEFAULT_DESTROY_METHOD_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setDestroyMethod(parentDefaults.getDestroyMethod())__		}__		defaults.setSource(this.readerContext.extractSource(root))__	};populate,the,given,document,defaults,definition,instance,with,the,default,lazy,init,autowire,dependency,check,settings,init,method,destroy,method,and,merge,settings,support,nested,beans,element,use,cases,by,falling,back,to,literal,parent,defaults,literal,in,case,the,defaults,are,not,explicitly,set,locally,param,defaults,the,defaults,to,populate,param,parent,defaults,the,parent,bean,definition,parser,delegate,if,any,defaults,to,fall,back,to,param,root,the,root,element,of,the,current,bean,definition,document,or,nested,beans,element;protected,void,populate,defaults,document,defaults,definition,defaults,document,defaults,definition,parent,defaults,element,root,string,lazy,init,root,get,attribute,if,equals,lazy,init,lazy,init,parent,defaults,null,parent,defaults,get,lazy,init,defaults,set,lazy,init,lazy,init,string,merge,root,get,attribute,if,equals,merge,merge,parent,defaults,null,parent,defaults,get,merge,defaults,set,merge,merge,string,autowire,root,get,attribute,if,equals,autowire,autowire,parent,defaults,null,parent,defaults,get,autowire,defaults,set,autowire,autowire,defaults,set,dependency,check,root,get,attribute,if,root,has,attribute,defaults,set,autowire,candidates,root,get,attribute,else,if,parent,defaults,null,defaults,set,autowire,candidates,parent,defaults,get,autowire,candidates,if,root,has,attribute,defaults,set,init,method,root,get,attribute,else,if,parent,defaults,null,defaults,set,init,method,parent,defaults,get,init,method,if,root,has,attribute,defaults,set,destroy,method,root,get,attribute,else,if,parent,defaults,null,defaults,set,destroy,method,parent,defaults,get,destroy,method,defaults,set,source,this,reader,context,extract,source,root
BeanDefinitionParserDelegate -> protected void populateDefaults(DocumentDefaultsDefinition defaults, DocumentDefaultsDefinition parentDefaults, Element root);1411599760;Populate the given DocumentDefaultsDefinition instance with the default lazy-init,_autowire, dependency check settings, init-method, destroy-method and merge settings._Support nested 'beans' element use cases by falling back to_<literal>parentDefaults</literal> in case the defaults are not explicitly set_locally._@param defaults the defaults to populate_@param parentDefaults the parent BeanDefinitionParserDelegate (if any) defaults to fall back to_@param root the root element of the current bean definition document (or nested beans element);protected void populateDefaults(DocumentDefaultsDefinition defaults, DocumentDefaultsDefinition parentDefaults, Element root) {_		String lazyInit = root.getAttribute(DEFAULT_LAZY_INIT_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(lazyInit)) {_			lazyInit = parentDefaults != null ? parentDefaults.getLazyInit() : FALSE_VALUE__		}_		defaults.setLazyInit(lazyInit)___		String merge = root.getAttribute(DEFAULT_MERGE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(merge)) {_			merge = parentDefaults != null ? parentDefaults.getMerge() : FALSE_VALUE__		}_		defaults.setMerge(merge)___		String autowire = root.getAttribute(DEFAULT_AUTOWIRE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(autowire)) {_			autowire = parentDefaults != null ? parentDefaults.getAutowire() : AUTOWIRE_NO_VALUE__		}_		defaults.setAutowire(autowire)___		_		_		_		defaults.setDependencyCheck(root.getAttribute(DEFAULT_DEPENDENCY_CHECK_ATTRIBUTE))___		if (root.hasAttribute(DEFAULT_AUTOWIRE_CANDIDATES_ATTRIBUTE)) {_			defaults.setAutowireCandidates(root.getAttribute(DEFAULT_AUTOWIRE_CANDIDATES_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setAutowireCandidates(parentDefaults.getAutowireCandidates())__		}__		if (root.hasAttribute(DEFAULT_INIT_METHOD_ATTRIBUTE)) {_			defaults.setInitMethod(root.getAttribute(DEFAULT_INIT_METHOD_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setInitMethod(parentDefaults.getInitMethod())__		}__		if (root.hasAttribute(DEFAULT_DESTROY_METHOD_ATTRIBUTE)) {_			defaults.setDestroyMethod(root.getAttribute(DEFAULT_DESTROY_METHOD_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setDestroyMethod(parentDefaults.getDestroyMethod())__		}__		defaults.setSource(this.readerContext.extractSource(root))__	};populate,the,given,document,defaults,definition,instance,with,the,default,lazy,init,autowire,dependency,check,settings,init,method,destroy,method,and,merge,settings,support,nested,beans,element,use,cases,by,falling,back,to,literal,parent,defaults,literal,in,case,the,defaults,are,not,explicitly,set,locally,param,defaults,the,defaults,to,populate,param,parent,defaults,the,parent,bean,definition,parser,delegate,if,any,defaults,to,fall,back,to,param,root,the,root,element,of,the,current,bean,definition,document,or,nested,beans,element;protected,void,populate,defaults,document,defaults,definition,defaults,document,defaults,definition,parent,defaults,element,root,string,lazy,init,root,get,attribute,if,equals,lazy,init,lazy,init,parent,defaults,null,parent,defaults,get,lazy,init,defaults,set,lazy,init,lazy,init,string,merge,root,get,attribute,if,equals,merge,merge,parent,defaults,null,parent,defaults,get,merge,defaults,set,merge,merge,string,autowire,root,get,attribute,if,equals,autowire,autowire,parent,defaults,null,parent,defaults,get,autowire,defaults,set,autowire,autowire,defaults,set,dependency,check,root,get,attribute,if,root,has,attribute,defaults,set,autowire,candidates,root,get,attribute,else,if,parent,defaults,null,defaults,set,autowire,candidates,parent,defaults,get,autowire,candidates,if,root,has,attribute,defaults,set,init,method,root,get,attribute,else,if,parent,defaults,null,defaults,set,init,method,parent,defaults,get,init,method,if,root,has,attribute,defaults,set,destroy,method,root,get,attribute,else,if,parent,defaults,null,defaults,set,destroy,method,parent,defaults,get,destroy,method,defaults,set,source,this,reader,context,extract,source,root
BeanDefinitionParserDelegate -> protected void populateDefaults(DocumentDefaultsDefinition defaults, DocumentDefaultsDefinition parentDefaults, Element root);1419966315;Populate the given DocumentDefaultsDefinition instance with the default lazy-init,_autowire, dependency check settings, init-method, destroy-method and merge settings._Support nested 'beans' element use cases by falling back to_<literal>parentDefaults</literal> in case the defaults are not explicitly set_locally._@param defaults the defaults to populate_@param parentDefaults the parent BeanDefinitionParserDelegate (if any) defaults to fall back to_@param root the root element of the current bean definition document (or nested beans element);protected void populateDefaults(DocumentDefaultsDefinition defaults, DocumentDefaultsDefinition parentDefaults, Element root) {_		String lazyInit = root.getAttribute(DEFAULT_LAZY_INIT_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(lazyInit)) {_			lazyInit = parentDefaults != null ? parentDefaults.getLazyInit() : FALSE_VALUE__		}_		defaults.setLazyInit(lazyInit)___		String merge = root.getAttribute(DEFAULT_MERGE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(merge)) {_			merge = parentDefaults != null ? parentDefaults.getMerge() : FALSE_VALUE__		}_		defaults.setMerge(merge)___		String autowire = root.getAttribute(DEFAULT_AUTOWIRE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(autowire)) {_			autowire = parentDefaults != null ? parentDefaults.getAutowire() : AUTOWIRE_NO_VALUE__		}_		defaults.setAutowire(autowire)___		_		_		_		defaults.setDependencyCheck(root.getAttribute(DEFAULT_DEPENDENCY_CHECK_ATTRIBUTE))___		if (root.hasAttribute(DEFAULT_AUTOWIRE_CANDIDATES_ATTRIBUTE)) {_			defaults.setAutowireCandidates(root.getAttribute(DEFAULT_AUTOWIRE_CANDIDATES_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setAutowireCandidates(parentDefaults.getAutowireCandidates())__		}__		if (root.hasAttribute(DEFAULT_INIT_METHOD_ATTRIBUTE)) {_			defaults.setInitMethod(root.getAttribute(DEFAULT_INIT_METHOD_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setInitMethod(parentDefaults.getInitMethod())__		}__		if (root.hasAttribute(DEFAULT_DESTROY_METHOD_ATTRIBUTE)) {_			defaults.setDestroyMethod(root.getAttribute(DEFAULT_DESTROY_METHOD_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setDestroyMethod(parentDefaults.getDestroyMethod())__		}__		defaults.setSource(this.readerContext.extractSource(root))__	};populate,the,given,document,defaults,definition,instance,with,the,default,lazy,init,autowire,dependency,check,settings,init,method,destroy,method,and,merge,settings,support,nested,beans,element,use,cases,by,falling,back,to,literal,parent,defaults,literal,in,case,the,defaults,are,not,explicitly,set,locally,param,defaults,the,defaults,to,populate,param,parent,defaults,the,parent,bean,definition,parser,delegate,if,any,defaults,to,fall,back,to,param,root,the,root,element,of,the,current,bean,definition,document,or,nested,beans,element;protected,void,populate,defaults,document,defaults,definition,defaults,document,defaults,definition,parent,defaults,element,root,string,lazy,init,root,get,attribute,if,equals,lazy,init,lazy,init,parent,defaults,null,parent,defaults,get,lazy,init,defaults,set,lazy,init,lazy,init,string,merge,root,get,attribute,if,equals,merge,merge,parent,defaults,null,parent,defaults,get,merge,defaults,set,merge,merge,string,autowire,root,get,attribute,if,equals,autowire,autowire,parent,defaults,null,parent,defaults,get,autowire,defaults,set,autowire,autowire,defaults,set,dependency,check,root,get,attribute,if,root,has,attribute,defaults,set,autowire,candidates,root,get,attribute,else,if,parent,defaults,null,defaults,set,autowire,candidates,parent,defaults,get,autowire,candidates,if,root,has,attribute,defaults,set,init,method,root,get,attribute,else,if,parent,defaults,null,defaults,set,init,method,parent,defaults,get,init,method,if,root,has,attribute,defaults,set,destroy,method,root,get,attribute,else,if,parent,defaults,null,defaults,set,destroy,method,parent,defaults,get,destroy,method,defaults,set,source,this,reader,context,extract,source,root
BeanDefinitionParserDelegate -> protected void populateDefaults(DocumentDefaultsDefinition defaults, DocumentDefaultsDefinition parentDefaults, Element root);1431958785;Populate the given DocumentDefaultsDefinition instance with the default lazy-init,_autowire, dependency check settings, init-method, destroy-method and merge settings._Support nested 'beans' element use cases by falling back to <literal>parentDefaults</literal>_in case the defaults are not explicitly set locally._@param defaults the defaults to populate_@param parentDefaults the parent BeanDefinitionParserDelegate (if any) defaults to fall back to_@param root the root element of the current bean definition document (or nested beans element);protected void populateDefaults(DocumentDefaultsDefinition defaults, DocumentDefaultsDefinition parentDefaults, Element root) {_		String lazyInit = root.getAttribute(DEFAULT_LAZY_INIT_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(lazyInit)) {_			_			lazyInit = (parentDefaults != null ? parentDefaults.getLazyInit() : FALSE_VALUE)__		}_		defaults.setLazyInit(lazyInit)___		String merge = root.getAttribute(DEFAULT_MERGE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(merge)) {_			_			merge = (parentDefaults != null ? parentDefaults.getMerge() : FALSE_VALUE)__		}_		defaults.setMerge(merge)___		String autowire = root.getAttribute(DEFAULT_AUTOWIRE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(autowire)) {_			_			autowire = (parentDefaults != null ? parentDefaults.getAutowire() : AUTOWIRE_NO_VALUE)__		}_		defaults.setAutowire(autowire)___		_		_		defaults.setDependencyCheck(root.getAttribute(DEFAULT_DEPENDENCY_CHECK_ATTRIBUTE))___		if (root.hasAttribute(DEFAULT_AUTOWIRE_CANDIDATES_ATTRIBUTE)) {_			defaults.setAutowireCandidates(root.getAttribute(DEFAULT_AUTOWIRE_CANDIDATES_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setAutowireCandidates(parentDefaults.getAutowireCandidates())__		}__		if (root.hasAttribute(DEFAULT_INIT_METHOD_ATTRIBUTE)) {_			defaults.setInitMethod(root.getAttribute(DEFAULT_INIT_METHOD_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setInitMethod(parentDefaults.getInitMethod())__		}__		if (root.hasAttribute(DEFAULT_DESTROY_METHOD_ATTRIBUTE)) {_			defaults.setDestroyMethod(root.getAttribute(DEFAULT_DESTROY_METHOD_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setDestroyMethod(parentDefaults.getDestroyMethod())__		}__		defaults.setSource(this.readerContext.extractSource(root))__	};populate,the,given,document,defaults,definition,instance,with,the,default,lazy,init,autowire,dependency,check,settings,init,method,destroy,method,and,merge,settings,support,nested,beans,element,use,cases,by,falling,back,to,literal,parent,defaults,literal,in,case,the,defaults,are,not,explicitly,set,locally,param,defaults,the,defaults,to,populate,param,parent,defaults,the,parent,bean,definition,parser,delegate,if,any,defaults,to,fall,back,to,param,root,the,root,element,of,the,current,bean,definition,document,or,nested,beans,element;protected,void,populate,defaults,document,defaults,definition,defaults,document,defaults,definition,parent,defaults,element,root,string,lazy,init,root,get,attribute,if,equals,lazy,init,lazy,init,parent,defaults,null,parent,defaults,get,lazy,init,defaults,set,lazy,init,lazy,init,string,merge,root,get,attribute,if,equals,merge,merge,parent,defaults,null,parent,defaults,get,merge,defaults,set,merge,merge,string,autowire,root,get,attribute,if,equals,autowire,autowire,parent,defaults,null,parent,defaults,get,autowire,defaults,set,autowire,autowire,defaults,set,dependency,check,root,get,attribute,if,root,has,attribute,defaults,set,autowire,candidates,root,get,attribute,else,if,parent,defaults,null,defaults,set,autowire,candidates,parent,defaults,get,autowire,candidates,if,root,has,attribute,defaults,set,init,method,root,get,attribute,else,if,parent,defaults,null,defaults,set,init,method,parent,defaults,get,init,method,if,root,has,attribute,defaults,set,destroy,method,root,get,attribute,else,if,parent,defaults,null,defaults,set,destroy,method,parent,defaults,get,destroy,method,defaults,set,source,this,reader,context,extract,source,root
BeanDefinitionParserDelegate -> protected void populateDefaults(DocumentDefaultsDefinition defaults, DocumentDefaultsDefinition parentDefaults, Element root);1432135182;Populate the given DocumentDefaultsDefinition instance with the default lazy-init,_autowire, dependency check settings, init-method, destroy-method and merge settings._Support nested 'beans' element use cases by falling back to <literal>parentDefaults</literal>_in case the defaults are not explicitly set locally._@param defaults the defaults to populate_@param parentDefaults the parent BeanDefinitionParserDelegate (if any) defaults to fall back to_@param root the root element of the current bean definition document (or nested beans element);protected void populateDefaults(DocumentDefaultsDefinition defaults, DocumentDefaultsDefinition parentDefaults, Element root) {_		String lazyInit = root.getAttribute(DEFAULT_LAZY_INIT_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(lazyInit)) {_			_			lazyInit = (parentDefaults != null ? parentDefaults.getLazyInit() : FALSE_VALUE)__		}_		defaults.setLazyInit(lazyInit)___		String merge = root.getAttribute(DEFAULT_MERGE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(merge)) {_			_			merge = (parentDefaults != null ? parentDefaults.getMerge() : FALSE_VALUE)__		}_		defaults.setMerge(merge)___		String autowire = root.getAttribute(DEFAULT_AUTOWIRE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(autowire)) {_			_			autowire = (parentDefaults != null ? parentDefaults.getAutowire() : AUTOWIRE_NO_VALUE)__		}_		defaults.setAutowire(autowire)___		_		_		defaults.setDependencyCheck(root.getAttribute(DEFAULT_DEPENDENCY_CHECK_ATTRIBUTE))___		if (root.hasAttribute(DEFAULT_AUTOWIRE_CANDIDATES_ATTRIBUTE)) {_			defaults.setAutowireCandidates(root.getAttribute(DEFAULT_AUTOWIRE_CANDIDATES_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setAutowireCandidates(parentDefaults.getAutowireCandidates())__		}__		if (root.hasAttribute(DEFAULT_INIT_METHOD_ATTRIBUTE)) {_			defaults.setInitMethod(root.getAttribute(DEFAULT_INIT_METHOD_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setInitMethod(parentDefaults.getInitMethod())__		}__		if (root.hasAttribute(DEFAULT_DESTROY_METHOD_ATTRIBUTE)) {_			defaults.setDestroyMethod(root.getAttribute(DEFAULT_DESTROY_METHOD_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setDestroyMethod(parentDefaults.getDestroyMethod())__		}__		defaults.setSource(this.readerContext.extractSource(root))__	};populate,the,given,document,defaults,definition,instance,with,the,default,lazy,init,autowire,dependency,check,settings,init,method,destroy,method,and,merge,settings,support,nested,beans,element,use,cases,by,falling,back,to,literal,parent,defaults,literal,in,case,the,defaults,are,not,explicitly,set,locally,param,defaults,the,defaults,to,populate,param,parent,defaults,the,parent,bean,definition,parser,delegate,if,any,defaults,to,fall,back,to,param,root,the,root,element,of,the,current,bean,definition,document,or,nested,beans,element;protected,void,populate,defaults,document,defaults,definition,defaults,document,defaults,definition,parent,defaults,element,root,string,lazy,init,root,get,attribute,if,equals,lazy,init,lazy,init,parent,defaults,null,parent,defaults,get,lazy,init,defaults,set,lazy,init,lazy,init,string,merge,root,get,attribute,if,equals,merge,merge,parent,defaults,null,parent,defaults,get,merge,defaults,set,merge,merge,string,autowire,root,get,attribute,if,equals,autowire,autowire,parent,defaults,null,parent,defaults,get,autowire,defaults,set,autowire,autowire,defaults,set,dependency,check,root,get,attribute,if,root,has,attribute,defaults,set,autowire,candidates,root,get,attribute,else,if,parent,defaults,null,defaults,set,autowire,candidates,parent,defaults,get,autowire,candidates,if,root,has,attribute,defaults,set,init,method,root,get,attribute,else,if,parent,defaults,null,defaults,set,init,method,parent,defaults,get,init,method,if,root,has,attribute,defaults,set,destroy,method,root,get,attribute,else,if,parent,defaults,null,defaults,set,destroy,method,parent,defaults,get,destroy,method,defaults,set,source,this,reader,context,extract,source,root
BeanDefinitionParserDelegate -> protected void populateDefaults(DocumentDefaultsDefinition defaults, DocumentDefaultsDefinition parentDefaults, Element root);1447323728;Populate the given DocumentDefaultsDefinition instance with the default lazy-init,_autowire, dependency check settings, init-method, destroy-method and merge settings._Support nested 'beans' element use cases by falling back to <literal>parentDefaults</literal>_in case the defaults are not explicitly set locally._@param defaults the defaults to populate_@param parentDefaults the parent BeanDefinitionParserDelegate (if any) defaults to fall back to_@param root the root element of the current bean definition document (or nested beans element);protected void populateDefaults(DocumentDefaultsDefinition defaults, DocumentDefaultsDefinition parentDefaults, Element root) {_		String lazyInit = root.getAttribute(DEFAULT_LAZY_INIT_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(lazyInit)) {_			_			lazyInit = (parentDefaults != null ? parentDefaults.getLazyInit() : FALSE_VALUE)__		}_		defaults.setLazyInit(lazyInit)___		String merge = root.getAttribute(DEFAULT_MERGE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(merge)) {_			_			merge = (parentDefaults != null ? parentDefaults.getMerge() : FALSE_VALUE)__		}_		defaults.setMerge(merge)___		String autowire = root.getAttribute(DEFAULT_AUTOWIRE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(autowire)) {_			_			autowire = (parentDefaults != null ? parentDefaults.getAutowire() : AUTOWIRE_NO_VALUE)__		}_		defaults.setAutowire(autowire)___		_		_		defaults.setDependencyCheck(root.getAttribute(DEFAULT_DEPENDENCY_CHECK_ATTRIBUTE))___		if (root.hasAttribute(DEFAULT_AUTOWIRE_CANDIDATES_ATTRIBUTE)) {_			defaults.setAutowireCandidates(root.getAttribute(DEFAULT_AUTOWIRE_CANDIDATES_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setAutowireCandidates(parentDefaults.getAutowireCandidates())__		}__		if (root.hasAttribute(DEFAULT_INIT_METHOD_ATTRIBUTE)) {_			defaults.setInitMethod(root.getAttribute(DEFAULT_INIT_METHOD_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setInitMethod(parentDefaults.getInitMethod())__		}__		if (root.hasAttribute(DEFAULT_DESTROY_METHOD_ATTRIBUTE)) {_			defaults.setDestroyMethod(root.getAttribute(DEFAULT_DESTROY_METHOD_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setDestroyMethod(parentDefaults.getDestroyMethod())__		}__		defaults.setSource(this.readerContext.extractSource(root))__	};populate,the,given,document,defaults,definition,instance,with,the,default,lazy,init,autowire,dependency,check,settings,init,method,destroy,method,and,merge,settings,support,nested,beans,element,use,cases,by,falling,back,to,literal,parent,defaults,literal,in,case,the,defaults,are,not,explicitly,set,locally,param,defaults,the,defaults,to,populate,param,parent,defaults,the,parent,bean,definition,parser,delegate,if,any,defaults,to,fall,back,to,param,root,the,root,element,of,the,current,bean,definition,document,or,nested,beans,element;protected,void,populate,defaults,document,defaults,definition,defaults,document,defaults,definition,parent,defaults,element,root,string,lazy,init,root,get,attribute,if,equals,lazy,init,lazy,init,parent,defaults,null,parent,defaults,get,lazy,init,defaults,set,lazy,init,lazy,init,string,merge,root,get,attribute,if,equals,merge,merge,parent,defaults,null,parent,defaults,get,merge,defaults,set,merge,merge,string,autowire,root,get,attribute,if,equals,autowire,autowire,parent,defaults,null,parent,defaults,get,autowire,defaults,set,autowire,autowire,defaults,set,dependency,check,root,get,attribute,if,root,has,attribute,defaults,set,autowire,candidates,root,get,attribute,else,if,parent,defaults,null,defaults,set,autowire,candidates,parent,defaults,get,autowire,candidates,if,root,has,attribute,defaults,set,init,method,root,get,attribute,else,if,parent,defaults,null,defaults,set,init,method,parent,defaults,get,init,method,if,root,has,attribute,defaults,set,destroy,method,root,get,attribute,else,if,parent,defaults,null,defaults,set,destroy,method,parent,defaults,get,destroy,method,defaults,set,source,this,reader,context,extract,source,root
BeanDefinitionParserDelegate -> protected void populateDefaults(DocumentDefaultsDefinition defaults, DocumentDefaultsDefinition parentDefaults, Element root);1467726769;Populate the given DocumentDefaultsDefinition instance with the default lazy-init,_autowire, dependency check settings, init-method, destroy-method and merge settings._Support nested 'beans' element use cases by falling back to <literal>parentDefaults</literal>_in case the defaults are not explicitly set locally._@param defaults the defaults to populate_@param parentDefaults the parent BeanDefinitionParserDelegate (if any) defaults to fall back to_@param root the root element of the current bean definition document (or nested beans element);protected void populateDefaults(DocumentDefaultsDefinition defaults, DocumentDefaultsDefinition parentDefaults, Element root) {_		String lazyInit = root.getAttribute(DEFAULT_LAZY_INIT_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(lazyInit)) {_			_			lazyInit = (parentDefaults != null ? parentDefaults.getLazyInit() : FALSE_VALUE)__		}_		defaults.setLazyInit(lazyInit)___		String merge = root.getAttribute(DEFAULT_MERGE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(merge)) {_			_			merge = (parentDefaults != null ? parentDefaults.getMerge() : FALSE_VALUE)__		}_		defaults.setMerge(merge)___		String autowire = root.getAttribute(DEFAULT_AUTOWIRE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(autowire)) {_			_			autowire = (parentDefaults != null ? parentDefaults.getAutowire() : AUTOWIRE_NO_VALUE)__		}_		defaults.setAutowire(autowire)___		_		_		defaults.setDependencyCheck(root.getAttribute(DEFAULT_DEPENDENCY_CHECK_ATTRIBUTE))___		if (root.hasAttribute(DEFAULT_AUTOWIRE_CANDIDATES_ATTRIBUTE)) {_			defaults.setAutowireCandidates(root.getAttribute(DEFAULT_AUTOWIRE_CANDIDATES_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setAutowireCandidates(parentDefaults.getAutowireCandidates())__		}__		if (root.hasAttribute(DEFAULT_INIT_METHOD_ATTRIBUTE)) {_			defaults.setInitMethod(root.getAttribute(DEFAULT_INIT_METHOD_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setInitMethod(parentDefaults.getInitMethod())__		}__		if (root.hasAttribute(DEFAULT_DESTROY_METHOD_ATTRIBUTE)) {_			defaults.setDestroyMethod(root.getAttribute(DEFAULT_DESTROY_METHOD_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setDestroyMethod(parentDefaults.getDestroyMethod())__		}__		defaults.setSource(this.readerContext.extractSource(root))__	};populate,the,given,document,defaults,definition,instance,with,the,default,lazy,init,autowire,dependency,check,settings,init,method,destroy,method,and,merge,settings,support,nested,beans,element,use,cases,by,falling,back,to,literal,parent,defaults,literal,in,case,the,defaults,are,not,explicitly,set,locally,param,defaults,the,defaults,to,populate,param,parent,defaults,the,parent,bean,definition,parser,delegate,if,any,defaults,to,fall,back,to,param,root,the,root,element,of,the,current,bean,definition,document,or,nested,beans,element;protected,void,populate,defaults,document,defaults,definition,defaults,document,defaults,definition,parent,defaults,element,root,string,lazy,init,root,get,attribute,if,equals,lazy,init,lazy,init,parent,defaults,null,parent,defaults,get,lazy,init,defaults,set,lazy,init,lazy,init,string,merge,root,get,attribute,if,equals,merge,merge,parent,defaults,null,parent,defaults,get,merge,defaults,set,merge,merge,string,autowire,root,get,attribute,if,equals,autowire,autowire,parent,defaults,null,parent,defaults,get,autowire,defaults,set,autowire,autowire,defaults,set,dependency,check,root,get,attribute,if,root,has,attribute,defaults,set,autowire,candidates,root,get,attribute,else,if,parent,defaults,null,defaults,set,autowire,candidates,parent,defaults,get,autowire,candidates,if,root,has,attribute,defaults,set,init,method,root,get,attribute,else,if,parent,defaults,null,defaults,set,init,method,parent,defaults,get,init,method,if,root,has,attribute,defaults,set,destroy,method,root,get,attribute,else,if,parent,defaults,null,defaults,set,destroy,method,parent,defaults,get,destroy,method,defaults,set,source,this,reader,context,extract,source,root
BeanDefinitionParserDelegate -> protected void populateDefaults(DocumentDefaultsDefinition defaults, DocumentDefaultsDefinition parentDefaults, Element root);1467730834;Populate the given DocumentDefaultsDefinition instance with the default lazy-init,_autowire, dependency check settings, init-method, destroy-method and merge settings._Support nested 'beans' element use cases by falling back to <literal>parentDefaults</literal>_in case the defaults are not explicitly set locally._@param defaults the defaults to populate_@param parentDefaults the parent BeanDefinitionParserDelegate (if any) defaults to fall back to_@param root the root element of the current bean definition document (or nested beans element);protected void populateDefaults(DocumentDefaultsDefinition defaults, DocumentDefaultsDefinition parentDefaults, Element root) {_		String lazyInit = root.getAttribute(DEFAULT_LAZY_INIT_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(lazyInit)) {_			_			lazyInit = (parentDefaults != null ? parentDefaults.getLazyInit() : FALSE_VALUE)__		}_		defaults.setLazyInit(lazyInit)___		String merge = root.getAttribute(DEFAULT_MERGE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(merge)) {_			_			merge = (parentDefaults != null ? parentDefaults.getMerge() : FALSE_VALUE)__		}_		defaults.setMerge(merge)___		String autowire = root.getAttribute(DEFAULT_AUTOWIRE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(autowire)) {_			_			autowire = (parentDefaults != null ? parentDefaults.getAutowire() : AUTOWIRE_NO_VALUE)__		}_		defaults.setAutowire(autowire)___		_		_		defaults.setDependencyCheck(root.getAttribute(DEFAULT_DEPENDENCY_CHECK_ATTRIBUTE))___		if (root.hasAttribute(DEFAULT_AUTOWIRE_CANDIDATES_ATTRIBUTE)) {_			defaults.setAutowireCandidates(root.getAttribute(DEFAULT_AUTOWIRE_CANDIDATES_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setAutowireCandidates(parentDefaults.getAutowireCandidates())__		}__		if (root.hasAttribute(DEFAULT_INIT_METHOD_ATTRIBUTE)) {_			defaults.setInitMethod(root.getAttribute(DEFAULT_INIT_METHOD_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setInitMethod(parentDefaults.getInitMethod())__		}__		if (root.hasAttribute(DEFAULT_DESTROY_METHOD_ATTRIBUTE)) {_			defaults.setDestroyMethod(root.getAttribute(DEFAULT_DESTROY_METHOD_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setDestroyMethod(parentDefaults.getDestroyMethod())__		}__		defaults.setSource(this.readerContext.extractSource(root))__	};populate,the,given,document,defaults,definition,instance,with,the,default,lazy,init,autowire,dependency,check,settings,init,method,destroy,method,and,merge,settings,support,nested,beans,element,use,cases,by,falling,back,to,literal,parent,defaults,literal,in,case,the,defaults,are,not,explicitly,set,locally,param,defaults,the,defaults,to,populate,param,parent,defaults,the,parent,bean,definition,parser,delegate,if,any,defaults,to,fall,back,to,param,root,the,root,element,of,the,current,bean,definition,document,or,nested,beans,element;protected,void,populate,defaults,document,defaults,definition,defaults,document,defaults,definition,parent,defaults,element,root,string,lazy,init,root,get,attribute,if,equals,lazy,init,lazy,init,parent,defaults,null,parent,defaults,get,lazy,init,defaults,set,lazy,init,lazy,init,string,merge,root,get,attribute,if,equals,merge,merge,parent,defaults,null,parent,defaults,get,merge,defaults,set,merge,merge,string,autowire,root,get,attribute,if,equals,autowire,autowire,parent,defaults,null,parent,defaults,get,autowire,defaults,set,autowire,autowire,defaults,set,dependency,check,root,get,attribute,if,root,has,attribute,defaults,set,autowire,candidates,root,get,attribute,else,if,parent,defaults,null,defaults,set,autowire,candidates,parent,defaults,get,autowire,candidates,if,root,has,attribute,defaults,set,init,method,root,get,attribute,else,if,parent,defaults,null,defaults,set,init,method,parent,defaults,get,init,method,if,root,has,attribute,defaults,set,destroy,method,root,get,attribute,else,if,parent,defaults,null,defaults,set,destroy,method,parent,defaults,get,destroy,method,defaults,set,source,this,reader,context,extract,source,root
BeanDefinitionParserDelegate -> protected void populateDefaults(DocumentDefaultsDefinition defaults, DocumentDefaultsDefinition parentDefaults, Element root);1467744603;Populate the given DocumentDefaultsDefinition instance with the default lazy-init,_autowire, dependency check settings, init-method, destroy-method and merge settings._Support nested 'beans' element use cases by falling back to <literal>parentDefaults</literal>_in case the defaults are not explicitly set locally._@param defaults the defaults to populate_@param parentDefaults the parent BeanDefinitionParserDelegate (if any) defaults to fall back to_@param root the root element of the current bean definition document (or nested beans element);protected void populateDefaults(DocumentDefaultsDefinition defaults, DocumentDefaultsDefinition parentDefaults, Element root) {_		String lazyInit = root.getAttribute(DEFAULT_LAZY_INIT_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(lazyInit)) {_			_			lazyInit = (parentDefaults != null ? parentDefaults.getLazyInit() : FALSE_VALUE)__		}_		defaults.setLazyInit(lazyInit)___		String merge = root.getAttribute(DEFAULT_MERGE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(merge)) {_			_			merge = (parentDefaults != null ? parentDefaults.getMerge() : FALSE_VALUE)__		}_		defaults.setMerge(merge)___		String autowire = root.getAttribute(DEFAULT_AUTOWIRE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(autowire)) {_			_			autowire = (parentDefaults != null ? parentDefaults.getAutowire() : AUTOWIRE_NO_VALUE)__		}_		defaults.setAutowire(autowire)___		if (root.hasAttribute(DEFAULT_AUTOWIRE_CANDIDATES_ATTRIBUTE)) {_			defaults.setAutowireCandidates(root.getAttribute(DEFAULT_AUTOWIRE_CANDIDATES_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setAutowireCandidates(parentDefaults.getAutowireCandidates())__		}__		if (root.hasAttribute(DEFAULT_INIT_METHOD_ATTRIBUTE)) {_			defaults.setInitMethod(root.getAttribute(DEFAULT_INIT_METHOD_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setInitMethod(parentDefaults.getInitMethod())__		}__		if (root.hasAttribute(DEFAULT_DESTROY_METHOD_ATTRIBUTE)) {_			defaults.setDestroyMethod(root.getAttribute(DEFAULT_DESTROY_METHOD_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setDestroyMethod(parentDefaults.getDestroyMethod())__		}__		defaults.setSource(this.readerContext.extractSource(root))__	};populate,the,given,document,defaults,definition,instance,with,the,default,lazy,init,autowire,dependency,check,settings,init,method,destroy,method,and,merge,settings,support,nested,beans,element,use,cases,by,falling,back,to,literal,parent,defaults,literal,in,case,the,defaults,are,not,explicitly,set,locally,param,defaults,the,defaults,to,populate,param,parent,defaults,the,parent,bean,definition,parser,delegate,if,any,defaults,to,fall,back,to,param,root,the,root,element,of,the,current,bean,definition,document,or,nested,beans,element;protected,void,populate,defaults,document,defaults,definition,defaults,document,defaults,definition,parent,defaults,element,root,string,lazy,init,root,get,attribute,if,equals,lazy,init,lazy,init,parent,defaults,null,parent,defaults,get,lazy,init,defaults,set,lazy,init,lazy,init,string,merge,root,get,attribute,if,equals,merge,merge,parent,defaults,null,parent,defaults,get,merge,defaults,set,merge,merge,string,autowire,root,get,attribute,if,equals,autowire,autowire,parent,defaults,null,parent,defaults,get,autowire,defaults,set,autowire,autowire,if,root,has,attribute,defaults,set,autowire,candidates,root,get,attribute,else,if,parent,defaults,null,defaults,set,autowire,candidates,parent,defaults,get,autowire,candidates,if,root,has,attribute,defaults,set,init,method,root,get,attribute,else,if,parent,defaults,null,defaults,set,init,method,parent,defaults,get,init,method,if,root,has,attribute,defaults,set,destroy,method,root,get,attribute,else,if,parent,defaults,null,defaults,set,destroy,method,parent,defaults,get,destroy,method,defaults,set,source,this,reader,context,extract,source,root
BeanDefinitionParserDelegate -> protected void populateDefaults(DocumentDefaultsDefinition defaults, DocumentDefaultsDefinition parentDefaults, Element root);1487245676;Populate the given DocumentDefaultsDefinition instance with the default lazy-init,_autowire, dependency check settings, init-method, destroy-method and merge settings._Support nested 'beans' element use cases by falling back to <literal>parentDefaults</literal>_in case the defaults are not explicitly set locally._@param defaults the defaults to populate_@param parentDefaults the parent BeanDefinitionParserDelegate (if any) defaults to fall back to_@param root the root element of the current bean definition document (or nested beans element);protected void populateDefaults(DocumentDefaultsDefinition defaults, DocumentDefaultsDefinition parentDefaults, Element root) {_		String lazyInit = root.getAttribute(DEFAULT_LAZY_INIT_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(lazyInit)) {_			_			lazyInit = (parentDefaults != null ? parentDefaults.getLazyInit() : FALSE_VALUE)__		}_		defaults.setLazyInit(lazyInit)___		String merge = root.getAttribute(DEFAULT_MERGE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(merge)) {_			_			merge = (parentDefaults != null ? parentDefaults.getMerge() : FALSE_VALUE)__		}_		defaults.setMerge(merge)___		String autowire = root.getAttribute(DEFAULT_AUTOWIRE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(autowire)) {_			_			autowire = (parentDefaults != null ? parentDefaults.getAutowire() : AUTOWIRE_NO_VALUE)__		}_		defaults.setAutowire(autowire)___		if (root.hasAttribute(DEFAULT_AUTOWIRE_CANDIDATES_ATTRIBUTE)) {_			defaults.setAutowireCandidates(root.getAttribute(DEFAULT_AUTOWIRE_CANDIDATES_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setAutowireCandidates(parentDefaults.getAutowireCandidates())__		}__		if (root.hasAttribute(DEFAULT_INIT_METHOD_ATTRIBUTE)) {_			defaults.setInitMethod(root.getAttribute(DEFAULT_INIT_METHOD_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setInitMethod(parentDefaults.getInitMethod())__		}__		if (root.hasAttribute(DEFAULT_DESTROY_METHOD_ATTRIBUTE)) {_			defaults.setDestroyMethod(root.getAttribute(DEFAULT_DESTROY_METHOD_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setDestroyMethod(parentDefaults.getDestroyMethod())__		}__		defaults.setSource(this.readerContext.extractSource(root))__	};populate,the,given,document,defaults,definition,instance,with,the,default,lazy,init,autowire,dependency,check,settings,init,method,destroy,method,and,merge,settings,support,nested,beans,element,use,cases,by,falling,back,to,literal,parent,defaults,literal,in,case,the,defaults,are,not,explicitly,set,locally,param,defaults,the,defaults,to,populate,param,parent,defaults,the,parent,bean,definition,parser,delegate,if,any,defaults,to,fall,back,to,param,root,the,root,element,of,the,current,bean,definition,document,or,nested,beans,element;protected,void,populate,defaults,document,defaults,definition,defaults,document,defaults,definition,parent,defaults,element,root,string,lazy,init,root,get,attribute,if,equals,lazy,init,lazy,init,parent,defaults,null,parent,defaults,get,lazy,init,defaults,set,lazy,init,lazy,init,string,merge,root,get,attribute,if,equals,merge,merge,parent,defaults,null,parent,defaults,get,merge,defaults,set,merge,merge,string,autowire,root,get,attribute,if,equals,autowire,autowire,parent,defaults,null,parent,defaults,get,autowire,defaults,set,autowire,autowire,if,root,has,attribute,defaults,set,autowire,candidates,root,get,attribute,else,if,parent,defaults,null,defaults,set,autowire,candidates,parent,defaults,get,autowire,candidates,if,root,has,attribute,defaults,set,init,method,root,get,attribute,else,if,parent,defaults,null,defaults,set,init,method,parent,defaults,get,init,method,if,root,has,attribute,defaults,set,destroy,method,root,get,attribute,else,if,parent,defaults,null,defaults,set,destroy,method,parent,defaults,get,destroy,method,defaults,set,source,this,reader,context,extract,source,root
BeanDefinitionParserDelegate -> protected void populateDefaults(DocumentDefaultsDefinition defaults, DocumentDefaultsDefinition parentDefaults, Element root);1487255851;Populate the given DocumentDefaultsDefinition instance with the default lazy-init,_autowire, dependency check settings, init-method, destroy-method and merge settings._Support nested 'beans' element use cases by falling back to <literal>parentDefaults</literal>_in case the defaults are not explicitly set locally._@param defaults the defaults to populate_@param parentDefaults the parent BeanDefinitionParserDelegate (if any) defaults to fall back to_@param root the root element of the current bean definition document (or nested beans element);protected void populateDefaults(DocumentDefaultsDefinition defaults, DocumentDefaultsDefinition parentDefaults, Element root) {_		String lazyInit = root.getAttribute(DEFAULT_LAZY_INIT_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(lazyInit)) {_			_			lazyInit = (parentDefaults != null ? parentDefaults.getLazyInit() : FALSE_VALUE)__		}_		defaults.setLazyInit(lazyInit)___		String merge = root.getAttribute(DEFAULT_MERGE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(merge)) {_			_			merge = (parentDefaults != null ? parentDefaults.getMerge() : FALSE_VALUE)__		}_		defaults.setMerge(merge)___		String autowire = root.getAttribute(DEFAULT_AUTOWIRE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(autowire)) {_			_			autowire = (parentDefaults != null ? parentDefaults.getAutowire() : AUTOWIRE_NO_VALUE)__		}_		defaults.setAutowire(autowire)___		if (root.hasAttribute(DEFAULT_AUTOWIRE_CANDIDATES_ATTRIBUTE)) {_			defaults.setAutowireCandidates(root.getAttribute(DEFAULT_AUTOWIRE_CANDIDATES_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setAutowireCandidates(parentDefaults.getAutowireCandidates())__		}__		if (root.hasAttribute(DEFAULT_INIT_METHOD_ATTRIBUTE)) {_			defaults.setInitMethod(root.getAttribute(DEFAULT_INIT_METHOD_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setInitMethod(parentDefaults.getInitMethod())__		}__		if (root.hasAttribute(DEFAULT_DESTROY_METHOD_ATTRIBUTE)) {_			defaults.setDestroyMethod(root.getAttribute(DEFAULT_DESTROY_METHOD_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setDestroyMethod(parentDefaults.getDestroyMethod())__		}__		defaults.setSource(this.readerContext.extractSource(root))__	};populate,the,given,document,defaults,definition,instance,with,the,default,lazy,init,autowire,dependency,check,settings,init,method,destroy,method,and,merge,settings,support,nested,beans,element,use,cases,by,falling,back,to,literal,parent,defaults,literal,in,case,the,defaults,are,not,explicitly,set,locally,param,defaults,the,defaults,to,populate,param,parent,defaults,the,parent,bean,definition,parser,delegate,if,any,defaults,to,fall,back,to,param,root,the,root,element,of,the,current,bean,definition,document,or,nested,beans,element;protected,void,populate,defaults,document,defaults,definition,defaults,document,defaults,definition,parent,defaults,element,root,string,lazy,init,root,get,attribute,if,equals,lazy,init,lazy,init,parent,defaults,null,parent,defaults,get,lazy,init,defaults,set,lazy,init,lazy,init,string,merge,root,get,attribute,if,equals,merge,merge,parent,defaults,null,parent,defaults,get,merge,defaults,set,merge,merge,string,autowire,root,get,attribute,if,equals,autowire,autowire,parent,defaults,null,parent,defaults,get,autowire,defaults,set,autowire,autowire,if,root,has,attribute,defaults,set,autowire,candidates,root,get,attribute,else,if,parent,defaults,null,defaults,set,autowire,candidates,parent,defaults,get,autowire,candidates,if,root,has,attribute,defaults,set,init,method,root,get,attribute,else,if,parent,defaults,null,defaults,set,init,method,parent,defaults,get,init,method,if,root,has,attribute,defaults,set,destroy,method,root,get,attribute,else,if,parent,defaults,null,defaults,set,destroy,method,parent,defaults,get,destroy,method,defaults,set,source,this,reader,context,extract,source,root
BeanDefinitionParserDelegate -> protected void populateDefaults(DocumentDefaultsDefinition defaults, DocumentDefaultsDefinition parentDefaults, Element root);1494586217;Populate the given DocumentDefaultsDefinition instance with the default lazy-init,_autowire, dependency check settings, init-method, destroy-method and merge settings._Support nested 'beans' element use cases by falling back to <literal>parentDefaults</literal>_in case the defaults are not explicitly set locally._@param defaults the defaults to populate_@param parentDefaults the parent BeanDefinitionParserDelegate (if any) defaults to fall back to_@param root the root element of the current bean definition document (or nested beans element);protected void populateDefaults(DocumentDefaultsDefinition defaults, DocumentDefaultsDefinition parentDefaults, Element root) {_		String lazyInit = root.getAttribute(DEFAULT_LAZY_INIT_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(lazyInit)) {_			_			lazyInit = (parentDefaults != null ? parentDefaults.getLazyInit() : FALSE_VALUE)__		}_		defaults.setLazyInit(lazyInit)___		String merge = root.getAttribute(DEFAULT_MERGE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(merge)) {_			_			merge = (parentDefaults != null ? parentDefaults.getMerge() : FALSE_VALUE)__		}_		defaults.setMerge(merge)___		String autowire = root.getAttribute(DEFAULT_AUTOWIRE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(autowire)) {_			_			autowire = (parentDefaults != null ? parentDefaults.getAutowire() : AUTOWIRE_NO_VALUE)__		}_		defaults.setAutowire(autowire)___		if (root.hasAttribute(DEFAULT_AUTOWIRE_CANDIDATES_ATTRIBUTE)) {_			defaults.setAutowireCandidates(root.getAttribute(DEFAULT_AUTOWIRE_CANDIDATES_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setAutowireCandidates(parentDefaults.getAutowireCandidates())__		}__		if (root.hasAttribute(DEFAULT_INIT_METHOD_ATTRIBUTE)) {_			defaults.setInitMethod(root.getAttribute(DEFAULT_INIT_METHOD_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setInitMethod(parentDefaults.getInitMethod())__		}__		if (root.hasAttribute(DEFAULT_DESTROY_METHOD_ATTRIBUTE)) {_			defaults.setDestroyMethod(root.getAttribute(DEFAULT_DESTROY_METHOD_ATTRIBUTE))__		}_		else if (parentDefaults != null) {_			defaults.setDestroyMethod(parentDefaults.getDestroyMethod())__		}__		defaults.setSource(this.readerContext.extractSource(root))__	};populate,the,given,document,defaults,definition,instance,with,the,default,lazy,init,autowire,dependency,check,settings,init,method,destroy,method,and,merge,settings,support,nested,beans,element,use,cases,by,falling,back,to,literal,parent,defaults,literal,in,case,the,defaults,are,not,explicitly,set,locally,param,defaults,the,defaults,to,populate,param,parent,defaults,the,parent,bean,definition,parser,delegate,if,any,defaults,to,fall,back,to,param,root,the,root,element,of,the,current,bean,definition,document,or,nested,beans,element;protected,void,populate,defaults,document,defaults,definition,defaults,document,defaults,definition,parent,defaults,element,root,string,lazy,init,root,get,attribute,if,equals,lazy,init,lazy,init,parent,defaults,null,parent,defaults,get,lazy,init,defaults,set,lazy,init,lazy,init,string,merge,root,get,attribute,if,equals,merge,merge,parent,defaults,null,parent,defaults,get,merge,defaults,set,merge,merge,string,autowire,root,get,attribute,if,equals,autowire,autowire,parent,defaults,null,parent,defaults,get,autowire,defaults,set,autowire,autowire,if,root,has,attribute,defaults,set,autowire,candidates,root,get,attribute,else,if,parent,defaults,null,defaults,set,autowire,candidates,parent,defaults,get,autowire,candidates,if,root,has,attribute,defaults,set,init,method,root,get,attribute,else,if,parent,defaults,null,defaults,set,init,method,parent,defaults,get,init,method,if,root,has,attribute,defaults,set,destroy,method,root,get,attribute,else,if,parent,defaults,null,defaults,set,destroy,method,parent,defaults,get,destroy,method,defaults,set,source,this,reader,context,extract,source,root
BeanDefinitionParserDelegate -> public Object parsePropertyValue(Element ele, BeanDefinition bd, String propertyName);1328020251;Get the value of a property element. May be a list etc._Also used for constructor arguments, "propertyName" being null in this case.;public Object parsePropertyValue(Element ele, BeanDefinition bd, String propertyName) {_		String elementName = (propertyName != null) ?_						"<property> element for property '" + propertyName + "'" :_						"<constructor-arg> element"___		_		NodeList nl = ele.getChildNodes()__		Element subElement = null__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element && !nodeNameEquals(node, DESCRIPTION_ELEMENT) &&_					!nodeNameEquals(node, META_ELEMENT)) {_				_				if (subElement != null) {_					error(elementName + " must not contain more than one sub-element", ele)__				}_				else {_					subElement = (Element) node__				}_			}_		}__		boolean hasRefAttribute = ele.hasAttribute(REF_ATTRIBUTE)__		boolean hasValueAttribute = ele.hasAttribute(VALUE_ATTRIBUTE)__		if ((hasRefAttribute && hasValueAttribute) ||_				((hasRefAttribute || hasValueAttribute) && subElement != null)) {_			error(elementName +_					" is only allowed to contain either 'ref' attribute OR 'value' attribute OR sub-element", ele)__		}__		if (hasRefAttribute) {_			String refName = ele.getAttribute(REF_ATTRIBUTE)__			if (!StringUtils.hasText(refName)) {_				error(elementName + " contains empty 'ref' attribute", ele)__			}_			RuntimeBeanReference ref = new RuntimeBeanReference(refName)__			ref.setSource(extractSource(ele))__			return ref__		}_		else if (hasValueAttribute) {_			TypedStringValue valueHolder = new TypedStringValue(ele.getAttribute(VALUE_ATTRIBUTE))__			valueHolder.setSource(extractSource(ele))__			return valueHolder__		}_		else if (subElement != null) {_			return parsePropertySubElement(subElement, bd)__		}_		else {_			_			error(elementName + " must specify a ref or value", ele)__			return null__		}_	};get,the,value,of,a,property,element,may,be,a,list,etc,also,used,for,constructor,arguments,property,name,being,null,in,this,case;public,object,parse,property,value,element,ele,bean,definition,bd,string,property,name,string,element,name,property,name,null,property,element,for,property,property,name,constructor,arg,element,node,list,nl,ele,get,child,nodes,element,sub,element,null,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,node,name,equals,node,node,name,equals,node,if,sub,element,null,error,element,name,must,not,contain,more,than,one,sub,element,ele,else,sub,element,element,node,boolean,has,ref,attribute,ele,has,attribute,boolean,has,value,attribute,ele,has,attribute,if,has,ref,attribute,has,value,attribute,has,ref,attribute,has,value,attribute,sub,element,null,error,element,name,is,only,allowed,to,contain,either,ref,attribute,or,value,attribute,or,sub,element,ele,if,has,ref,attribute,string,ref,name,ele,get,attribute,if,string,utils,has,text,ref,name,error,element,name,contains,empty,ref,attribute,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,ele,return,ref,else,if,has,value,attribute,typed,string,value,value,holder,new,typed,string,value,ele,get,attribute,value,holder,set,source,extract,source,ele,return,value,holder,else,if,sub,element,null,return,parse,property,sub,element,sub,element,bd,else,error,element,name,must,specify,a,ref,or,value,ele,return,null
BeanDefinitionParserDelegate -> public Object parsePropertyValue(Element ele, BeanDefinition bd, String propertyName);1335774711;Get the value of a property element. May be a list etc._Also used for constructor arguments, "propertyName" being null in this case.;public Object parsePropertyValue(Element ele, BeanDefinition bd, String propertyName) {_		String elementName = (propertyName != null) ?_						"<property> element for property '" + propertyName + "'" :_						"<constructor-arg> element"___		_		NodeList nl = ele.getChildNodes()__		Element subElement = null__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element && !nodeNameEquals(node, DESCRIPTION_ELEMENT) &&_					!nodeNameEquals(node, META_ELEMENT)) {_				_				if (subElement != null) {_					error(elementName + " must not contain more than one sub-element", ele)__				}_				else {_					subElement = (Element) node__				}_			}_		}__		boolean hasRefAttribute = ele.hasAttribute(REF_ATTRIBUTE)__		boolean hasValueAttribute = ele.hasAttribute(VALUE_ATTRIBUTE)__		if ((hasRefAttribute && hasValueAttribute) ||_				((hasRefAttribute || hasValueAttribute) && subElement != null)) {_			error(elementName +_					" is only allowed to contain either 'ref' attribute OR 'value' attribute OR sub-element", ele)__		}__		if (hasRefAttribute) {_			String refName = ele.getAttribute(REF_ATTRIBUTE)__			if (!StringUtils.hasText(refName)) {_				error(elementName + " contains empty 'ref' attribute", ele)__			}_			RuntimeBeanReference ref = new RuntimeBeanReference(refName)__			ref.setSource(extractSource(ele))__			return ref__		}_		else if (hasValueAttribute) {_			TypedStringValue valueHolder = new TypedStringValue(ele.getAttribute(VALUE_ATTRIBUTE))__			valueHolder.setSource(extractSource(ele))__			return valueHolder__		}_		else if (subElement != null) {_			return parsePropertySubElement(subElement, bd)__		}_		else {_			_			error(elementName + " must specify a ref or value", ele)__			return null__		}_	};get,the,value,of,a,property,element,may,be,a,list,etc,also,used,for,constructor,arguments,property,name,being,null,in,this,case;public,object,parse,property,value,element,ele,bean,definition,bd,string,property,name,string,element,name,property,name,null,property,element,for,property,property,name,constructor,arg,element,node,list,nl,ele,get,child,nodes,element,sub,element,null,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,node,name,equals,node,node,name,equals,node,if,sub,element,null,error,element,name,must,not,contain,more,than,one,sub,element,ele,else,sub,element,element,node,boolean,has,ref,attribute,ele,has,attribute,boolean,has,value,attribute,ele,has,attribute,if,has,ref,attribute,has,value,attribute,has,ref,attribute,has,value,attribute,sub,element,null,error,element,name,is,only,allowed,to,contain,either,ref,attribute,or,value,attribute,or,sub,element,ele,if,has,ref,attribute,string,ref,name,ele,get,attribute,if,string,utils,has,text,ref,name,error,element,name,contains,empty,ref,attribute,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,ele,return,ref,else,if,has,value,attribute,typed,string,value,value,holder,new,typed,string,value,ele,get,attribute,value,holder,set,source,extract,source,ele,return,value,holder,else,if,sub,element,null,return,parse,property,sub,element,sub,element,bd,else,error,element,name,must,specify,a,ref,or,value,ele,return,null
BeanDefinitionParserDelegate -> public Object parsePropertyValue(Element ele, BeanDefinition bd, String propertyName);1337341719;Get the value of a property element. May be a list etc._Also used for constructor arguments, "propertyName" being null in this case.;public Object parsePropertyValue(Element ele, BeanDefinition bd, String propertyName) {_		String elementName = (propertyName != null) ?_						"<property> element for property '" + propertyName + "'" :_						"<constructor-arg> element"___		_		NodeList nl = ele.getChildNodes()__		Element subElement = null__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element && !nodeNameEquals(node, DESCRIPTION_ELEMENT) &&_					!nodeNameEquals(node, META_ELEMENT)) {_				_				if (subElement != null) {_					error(elementName + " must not contain more than one sub-element", ele)__				}_				else {_					subElement = (Element) node__				}_			}_		}__		boolean hasRefAttribute = ele.hasAttribute(REF_ATTRIBUTE)__		boolean hasValueAttribute = ele.hasAttribute(VALUE_ATTRIBUTE)__		if ((hasRefAttribute && hasValueAttribute) ||_				((hasRefAttribute || hasValueAttribute) && subElement != null)) {_			error(elementName +_					" is only allowed to contain either 'ref' attribute OR 'value' attribute OR sub-element", ele)__		}__		if (hasRefAttribute) {_			String refName = ele.getAttribute(REF_ATTRIBUTE)__			if (!StringUtils.hasText(refName)) {_				error(elementName + " contains empty 'ref' attribute", ele)__			}_			RuntimeBeanReference ref = new RuntimeBeanReference(refName)__			ref.setSource(extractSource(ele))__			return ref__		}_		else if (hasValueAttribute) {_			TypedStringValue valueHolder = new TypedStringValue(ele.getAttribute(VALUE_ATTRIBUTE))__			valueHolder.setSource(extractSource(ele))__			return valueHolder__		}_		else if (subElement != null) {_			return parsePropertySubElement(subElement, bd)__		}_		else {_			_			error(elementName + " must specify a ref or value", ele)__			return null__		}_	};get,the,value,of,a,property,element,may,be,a,list,etc,also,used,for,constructor,arguments,property,name,being,null,in,this,case;public,object,parse,property,value,element,ele,bean,definition,bd,string,property,name,string,element,name,property,name,null,property,element,for,property,property,name,constructor,arg,element,node,list,nl,ele,get,child,nodes,element,sub,element,null,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,node,name,equals,node,node,name,equals,node,if,sub,element,null,error,element,name,must,not,contain,more,than,one,sub,element,ele,else,sub,element,element,node,boolean,has,ref,attribute,ele,has,attribute,boolean,has,value,attribute,ele,has,attribute,if,has,ref,attribute,has,value,attribute,has,ref,attribute,has,value,attribute,sub,element,null,error,element,name,is,only,allowed,to,contain,either,ref,attribute,or,value,attribute,or,sub,element,ele,if,has,ref,attribute,string,ref,name,ele,get,attribute,if,string,utils,has,text,ref,name,error,element,name,contains,empty,ref,attribute,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,ele,return,ref,else,if,has,value,attribute,typed,string,value,value,holder,new,typed,string,value,ele,get,attribute,value,holder,set,source,extract,source,ele,return,value,holder,else,if,sub,element,null,return,parse,property,sub,element,sub,element,bd,else,error,element,name,must,specify,a,ref,or,value,ele,return,null
BeanDefinitionParserDelegate -> public Object parsePropertyValue(Element ele, BeanDefinition bd, String propertyName);1351392612;Get the value of a property element. May be a list etc._Also used for constructor arguments, "propertyName" being null in this case.;public Object parsePropertyValue(Element ele, BeanDefinition bd, String propertyName) {_		String elementName = (propertyName != null) ?_						"<property> element for property '" + propertyName + "'" :_						"<constructor-arg> element"___		_		NodeList nl = ele.getChildNodes()__		Element subElement = null__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element && !nodeNameEquals(node, DESCRIPTION_ELEMENT) &&_					!nodeNameEquals(node, META_ELEMENT)) {_				_				if (subElement != null) {_					error(elementName + " must not contain more than one sub-element", ele)__				}_				else {_					subElement = (Element) node__				}_			}_		}__		boolean hasRefAttribute = ele.hasAttribute(REF_ATTRIBUTE)__		boolean hasValueAttribute = ele.hasAttribute(VALUE_ATTRIBUTE)__		if ((hasRefAttribute && hasValueAttribute) ||_				((hasRefAttribute || hasValueAttribute) && subElement != null)) {_			error(elementName +_					" is only allowed to contain either 'ref' attribute OR 'value' attribute OR sub-element", ele)__		}__		if (hasRefAttribute) {_			String refName = ele.getAttribute(REF_ATTRIBUTE)__			if (!StringUtils.hasText(refName)) {_				error(elementName + " contains empty 'ref' attribute", ele)__			}_			RuntimeBeanReference ref = new RuntimeBeanReference(refName)__			ref.setSource(extractSource(ele))__			return ref__		}_		else if (hasValueAttribute) {_			TypedStringValue valueHolder = new TypedStringValue(ele.getAttribute(VALUE_ATTRIBUTE))__			valueHolder.setSource(extractSource(ele))__			return valueHolder__		}_		else if (subElement != null) {_			return parsePropertySubElement(subElement, bd)__		}_		else {_			_			error(elementName + " must specify a ref or value", ele)__			return null__		}_	};get,the,value,of,a,property,element,may,be,a,list,etc,also,used,for,constructor,arguments,property,name,being,null,in,this,case;public,object,parse,property,value,element,ele,bean,definition,bd,string,property,name,string,element,name,property,name,null,property,element,for,property,property,name,constructor,arg,element,node,list,nl,ele,get,child,nodes,element,sub,element,null,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,node,name,equals,node,node,name,equals,node,if,sub,element,null,error,element,name,must,not,contain,more,than,one,sub,element,ele,else,sub,element,element,node,boolean,has,ref,attribute,ele,has,attribute,boolean,has,value,attribute,ele,has,attribute,if,has,ref,attribute,has,value,attribute,has,ref,attribute,has,value,attribute,sub,element,null,error,element,name,is,only,allowed,to,contain,either,ref,attribute,or,value,attribute,or,sub,element,ele,if,has,ref,attribute,string,ref,name,ele,get,attribute,if,string,utils,has,text,ref,name,error,element,name,contains,empty,ref,attribute,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,ele,return,ref,else,if,has,value,attribute,typed,string,value,value,holder,new,typed,string,value,ele,get,attribute,value,holder,set,source,extract,source,ele,return,value,holder,else,if,sub,element,null,return,parse,property,sub,element,sub,element,bd,else,error,element,name,must,specify,a,ref,or,value,ele,return,null
BeanDefinitionParserDelegate -> public Object parsePropertyValue(Element ele, BeanDefinition bd, String propertyName);1351696936;Get the value of a property element. May be a list etc._Also used for constructor arguments, "propertyName" being null in this case.;public Object parsePropertyValue(Element ele, BeanDefinition bd, String propertyName) {_		String elementName = (propertyName != null) ?_						"<property> element for property '" + propertyName + "'" :_						"<constructor-arg> element"___		_		NodeList nl = ele.getChildNodes()__		Element subElement = null__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element && !nodeNameEquals(node, DESCRIPTION_ELEMENT) &&_					!nodeNameEquals(node, META_ELEMENT)) {_				_				if (subElement != null) {_					error(elementName + " must not contain more than one sub-element", ele)__				}_				else {_					subElement = (Element) node__				}_			}_		}__		boolean hasRefAttribute = ele.hasAttribute(REF_ATTRIBUTE)__		boolean hasValueAttribute = ele.hasAttribute(VALUE_ATTRIBUTE)__		if ((hasRefAttribute && hasValueAttribute) ||_				((hasRefAttribute || hasValueAttribute) && subElement != null)) {_			error(elementName +_					" is only allowed to contain either 'ref' attribute OR 'value' attribute OR sub-element", ele)__		}__		if (hasRefAttribute) {_			String refName = ele.getAttribute(REF_ATTRIBUTE)__			if (!StringUtils.hasText(refName)) {_				error(elementName + " contains empty 'ref' attribute", ele)__			}_			RuntimeBeanReference ref = new RuntimeBeanReference(refName)__			ref.setSource(extractSource(ele))__			return ref__		}_		else if (hasValueAttribute) {_			TypedStringValue valueHolder = new TypedStringValue(ele.getAttribute(VALUE_ATTRIBUTE))__			valueHolder.setSource(extractSource(ele))__			return valueHolder__		}_		else if (subElement != null) {_			return parsePropertySubElement(subElement, bd)__		}_		else {_			_			error(elementName + " must specify a ref or value", ele)__			return null__		}_	};get,the,value,of,a,property,element,may,be,a,list,etc,also,used,for,constructor,arguments,property,name,being,null,in,this,case;public,object,parse,property,value,element,ele,bean,definition,bd,string,property,name,string,element,name,property,name,null,property,element,for,property,property,name,constructor,arg,element,node,list,nl,ele,get,child,nodes,element,sub,element,null,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,node,name,equals,node,node,name,equals,node,if,sub,element,null,error,element,name,must,not,contain,more,than,one,sub,element,ele,else,sub,element,element,node,boolean,has,ref,attribute,ele,has,attribute,boolean,has,value,attribute,ele,has,attribute,if,has,ref,attribute,has,value,attribute,has,ref,attribute,has,value,attribute,sub,element,null,error,element,name,is,only,allowed,to,contain,either,ref,attribute,or,value,attribute,or,sub,element,ele,if,has,ref,attribute,string,ref,name,ele,get,attribute,if,string,utils,has,text,ref,name,error,element,name,contains,empty,ref,attribute,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,ele,return,ref,else,if,has,value,attribute,typed,string,value,value,holder,new,typed,string,value,ele,get,attribute,value,holder,set,source,extract,source,ele,return,value,holder,else,if,sub,element,null,return,parse,property,sub,element,sub,element,bd,else,error,element,name,must,specify,a,ref,or,value,ele,return,null
BeanDefinitionParserDelegate -> public Object parsePropertyValue(Element ele, BeanDefinition bd, String propertyName);1356735495;Get the value of a property element. May be a list etc._Also used for constructor arguments, "propertyName" being null in this case.;public Object parsePropertyValue(Element ele, BeanDefinition bd, String propertyName) {_		String elementName = (propertyName != null) ?_						"<property> element for property '" + propertyName + "'" :_						"<constructor-arg> element"___		_		NodeList nl = ele.getChildNodes()__		Element subElement = null__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element && !nodeNameEquals(node, DESCRIPTION_ELEMENT) &&_					!nodeNameEquals(node, META_ELEMENT)) {_				_				if (subElement != null) {_					error(elementName + " must not contain more than one sub-element", ele)__				}_				else {_					subElement = (Element) node__				}_			}_		}__		boolean hasRefAttribute = ele.hasAttribute(REF_ATTRIBUTE)__		boolean hasValueAttribute = ele.hasAttribute(VALUE_ATTRIBUTE)__		if ((hasRefAttribute && hasValueAttribute) ||_				((hasRefAttribute || hasValueAttribute) && subElement != null)) {_			error(elementName +_					" is only allowed to contain either 'ref' attribute OR 'value' attribute OR sub-element", ele)__		}__		if (hasRefAttribute) {_			String refName = ele.getAttribute(REF_ATTRIBUTE)__			if (!StringUtils.hasText(refName)) {_				error(elementName + " contains empty 'ref' attribute", ele)__			}_			RuntimeBeanReference ref = new RuntimeBeanReference(refName)__			ref.setSource(extractSource(ele))__			return ref__		}_		else if (hasValueAttribute) {_			TypedStringValue valueHolder = new TypedStringValue(ele.getAttribute(VALUE_ATTRIBUTE))__			valueHolder.setSource(extractSource(ele))__			return valueHolder__		}_		else if (subElement != null) {_			return parsePropertySubElement(subElement, bd)__		}_		else {_			_			error(elementName + " must specify a ref or value", ele)__			return null__		}_	};get,the,value,of,a,property,element,may,be,a,list,etc,also,used,for,constructor,arguments,property,name,being,null,in,this,case;public,object,parse,property,value,element,ele,bean,definition,bd,string,property,name,string,element,name,property,name,null,property,element,for,property,property,name,constructor,arg,element,node,list,nl,ele,get,child,nodes,element,sub,element,null,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,node,name,equals,node,node,name,equals,node,if,sub,element,null,error,element,name,must,not,contain,more,than,one,sub,element,ele,else,sub,element,element,node,boolean,has,ref,attribute,ele,has,attribute,boolean,has,value,attribute,ele,has,attribute,if,has,ref,attribute,has,value,attribute,has,ref,attribute,has,value,attribute,sub,element,null,error,element,name,is,only,allowed,to,contain,either,ref,attribute,or,value,attribute,or,sub,element,ele,if,has,ref,attribute,string,ref,name,ele,get,attribute,if,string,utils,has,text,ref,name,error,element,name,contains,empty,ref,attribute,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,ele,return,ref,else,if,has,value,attribute,typed,string,value,value,holder,new,typed,string,value,ele,get,attribute,value,holder,set,source,extract,source,ele,return,value,holder,else,if,sub,element,null,return,parse,property,sub,element,sub,element,bd,else,error,element,name,must,specify,a,ref,or,value,ele,return,null
BeanDefinitionParserDelegate -> public Object parsePropertyValue(Element ele, BeanDefinition bd, String propertyName);1357119417;Get the value of a property element. May be a list etc._Also used for constructor arguments, "propertyName" being null in this case.;public Object parsePropertyValue(Element ele, BeanDefinition bd, String propertyName) {_		String elementName = (propertyName != null) ?_						"<property> element for property '" + propertyName + "'" :_						"<constructor-arg> element"___		_		NodeList nl = ele.getChildNodes()__		Element subElement = null__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element && !nodeNameEquals(node, DESCRIPTION_ELEMENT) &&_					!nodeNameEquals(node, META_ELEMENT)) {_				_				if (subElement != null) {_					error(elementName + " must not contain more than one sub-element", ele)__				}_				else {_					subElement = (Element) node__				}_			}_		}__		boolean hasRefAttribute = ele.hasAttribute(REF_ATTRIBUTE)__		boolean hasValueAttribute = ele.hasAttribute(VALUE_ATTRIBUTE)__		if ((hasRefAttribute && hasValueAttribute) ||_				((hasRefAttribute || hasValueAttribute) && subElement != null)) {_			error(elementName +_					" is only allowed to contain either 'ref' attribute OR 'value' attribute OR sub-element", ele)__		}__		if (hasRefAttribute) {_			String refName = ele.getAttribute(REF_ATTRIBUTE)__			if (!StringUtils.hasText(refName)) {_				error(elementName + " contains empty 'ref' attribute", ele)__			}_			RuntimeBeanReference ref = new RuntimeBeanReference(refName)__			ref.setSource(extractSource(ele))__			return ref__		}_		else if (hasValueAttribute) {_			TypedStringValue valueHolder = new TypedStringValue(ele.getAttribute(VALUE_ATTRIBUTE))__			valueHolder.setSource(extractSource(ele))__			return valueHolder__		}_		else if (subElement != null) {_			return parsePropertySubElement(subElement, bd)__		}_		else {_			_			error(elementName + " must specify a ref or value", ele)__			return null__		}_	};get,the,value,of,a,property,element,may,be,a,list,etc,also,used,for,constructor,arguments,property,name,being,null,in,this,case;public,object,parse,property,value,element,ele,bean,definition,bd,string,property,name,string,element,name,property,name,null,property,element,for,property,property,name,constructor,arg,element,node,list,nl,ele,get,child,nodes,element,sub,element,null,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,node,name,equals,node,node,name,equals,node,if,sub,element,null,error,element,name,must,not,contain,more,than,one,sub,element,ele,else,sub,element,element,node,boolean,has,ref,attribute,ele,has,attribute,boolean,has,value,attribute,ele,has,attribute,if,has,ref,attribute,has,value,attribute,has,ref,attribute,has,value,attribute,sub,element,null,error,element,name,is,only,allowed,to,contain,either,ref,attribute,or,value,attribute,or,sub,element,ele,if,has,ref,attribute,string,ref,name,ele,get,attribute,if,string,utils,has,text,ref,name,error,element,name,contains,empty,ref,attribute,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,ele,return,ref,else,if,has,value,attribute,typed,string,value,value,holder,new,typed,string,value,ele,get,attribute,value,holder,set,source,extract,source,ele,return,value,holder,else,if,sub,element,null,return,parse,property,sub,element,sub,element,bd,else,error,element,name,must,specify,a,ref,or,value,ele,return,null
BeanDefinitionParserDelegate -> public Object parsePropertyValue(Element ele, BeanDefinition bd, String propertyName);1367943112;Get the value of a property element. May be a list etc._Also used for constructor arguments, "propertyName" being null in this case.;public Object parsePropertyValue(Element ele, BeanDefinition bd, String propertyName) {_		String elementName = (propertyName != null) ?_						"<property> element for property '" + propertyName + "'" :_						"<constructor-arg> element"___		_		NodeList nl = ele.getChildNodes()__		Element subElement = null__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element && !nodeNameEquals(node, DESCRIPTION_ELEMENT) &&_					!nodeNameEquals(node, META_ELEMENT)) {_				_				if (subElement != null) {_					error(elementName + " must not contain more than one sub-element", ele)__				}_				else {_					subElement = (Element) node__				}_			}_		}__		boolean hasRefAttribute = ele.hasAttribute(REF_ATTRIBUTE)__		boolean hasValueAttribute = ele.hasAttribute(VALUE_ATTRIBUTE)__		if ((hasRefAttribute && hasValueAttribute) ||_				((hasRefAttribute || hasValueAttribute) && subElement != null)) {_			error(elementName +_					" is only allowed to contain either 'ref' attribute OR 'value' attribute OR sub-element", ele)__		}__		if (hasRefAttribute) {_			String refName = ele.getAttribute(REF_ATTRIBUTE)__			if (!StringUtils.hasText(refName)) {_				error(elementName + " contains empty 'ref' attribute", ele)__			}_			RuntimeBeanReference ref = new RuntimeBeanReference(refName)__			ref.setSource(extractSource(ele))__			return ref__		}_		else if (hasValueAttribute) {_			TypedStringValue valueHolder = new TypedStringValue(ele.getAttribute(VALUE_ATTRIBUTE))__			valueHolder.setSource(extractSource(ele))__			return valueHolder__		}_		else if (subElement != null) {_			return parsePropertySubElement(subElement, bd)__		}_		else {_			_			error(elementName + " must specify a ref or value", ele)__			return null__		}_	};get,the,value,of,a,property,element,may,be,a,list,etc,also,used,for,constructor,arguments,property,name,being,null,in,this,case;public,object,parse,property,value,element,ele,bean,definition,bd,string,property,name,string,element,name,property,name,null,property,element,for,property,property,name,constructor,arg,element,node,list,nl,ele,get,child,nodes,element,sub,element,null,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,node,name,equals,node,node,name,equals,node,if,sub,element,null,error,element,name,must,not,contain,more,than,one,sub,element,ele,else,sub,element,element,node,boolean,has,ref,attribute,ele,has,attribute,boolean,has,value,attribute,ele,has,attribute,if,has,ref,attribute,has,value,attribute,has,ref,attribute,has,value,attribute,sub,element,null,error,element,name,is,only,allowed,to,contain,either,ref,attribute,or,value,attribute,or,sub,element,ele,if,has,ref,attribute,string,ref,name,ele,get,attribute,if,string,utils,has,text,ref,name,error,element,name,contains,empty,ref,attribute,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,ele,return,ref,else,if,has,value,attribute,typed,string,value,value,holder,new,typed,string,value,ele,get,attribute,value,holder,set,source,extract,source,ele,return,value,holder,else,if,sub,element,null,return,parse,property,sub,element,sub,element,bd,else,error,element,name,must,specify,a,ref,or,value,ele,return,null
BeanDefinitionParserDelegate -> public Object parsePropertyValue(Element ele, BeanDefinition bd, String propertyName);1382030648;Get the value of a property element. May be a list etc._Also used for constructor arguments, "propertyName" being null in this case.;public Object parsePropertyValue(Element ele, BeanDefinition bd, String propertyName) {_		String elementName = (propertyName != null) ?_						"<property> element for property '" + propertyName + "'" :_						"<constructor-arg> element"___		_		NodeList nl = ele.getChildNodes()__		Element subElement = null__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element && !nodeNameEquals(node, DESCRIPTION_ELEMENT) &&_					!nodeNameEquals(node, META_ELEMENT)) {_				_				if (subElement != null) {_					error(elementName + " must not contain more than one sub-element", ele)__				}_				else {_					subElement = (Element) node__				}_			}_		}__		boolean hasRefAttribute = ele.hasAttribute(REF_ATTRIBUTE)__		boolean hasValueAttribute = ele.hasAttribute(VALUE_ATTRIBUTE)__		if ((hasRefAttribute && hasValueAttribute) ||_				((hasRefAttribute || hasValueAttribute) && subElement != null)) {_			error(elementName +_					" is only allowed to contain either 'ref' attribute OR 'value' attribute OR sub-element", ele)__		}__		if (hasRefAttribute) {_			String refName = ele.getAttribute(REF_ATTRIBUTE)__			if (!StringUtils.hasText(refName)) {_				error(elementName + " contains empty 'ref' attribute", ele)__			}_			RuntimeBeanReference ref = new RuntimeBeanReference(refName)__			ref.setSource(extractSource(ele))__			return ref__		}_		else if (hasValueAttribute) {_			TypedStringValue valueHolder = new TypedStringValue(ele.getAttribute(VALUE_ATTRIBUTE))__			valueHolder.setSource(extractSource(ele))__			return valueHolder__		}_		else if (subElement != null) {_			return parsePropertySubElement(subElement, bd)__		}_		else {_			_			error(elementName + " must specify a ref or value", ele)__			return null__		}_	};get,the,value,of,a,property,element,may,be,a,list,etc,also,used,for,constructor,arguments,property,name,being,null,in,this,case;public,object,parse,property,value,element,ele,bean,definition,bd,string,property,name,string,element,name,property,name,null,property,element,for,property,property,name,constructor,arg,element,node,list,nl,ele,get,child,nodes,element,sub,element,null,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,node,name,equals,node,node,name,equals,node,if,sub,element,null,error,element,name,must,not,contain,more,than,one,sub,element,ele,else,sub,element,element,node,boolean,has,ref,attribute,ele,has,attribute,boolean,has,value,attribute,ele,has,attribute,if,has,ref,attribute,has,value,attribute,has,ref,attribute,has,value,attribute,sub,element,null,error,element,name,is,only,allowed,to,contain,either,ref,attribute,or,value,attribute,or,sub,element,ele,if,has,ref,attribute,string,ref,name,ele,get,attribute,if,string,utils,has,text,ref,name,error,element,name,contains,empty,ref,attribute,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,ele,return,ref,else,if,has,value,attribute,typed,string,value,value,holder,new,typed,string,value,ele,get,attribute,value,holder,set,source,extract,source,ele,return,value,holder,else,if,sub,element,null,return,parse,property,sub,element,sub,element,bd,else,error,element,name,must,specify,a,ref,or,value,ele,return,null
BeanDefinitionParserDelegate -> public Object parsePropertyValue(Element ele, BeanDefinition bd, String propertyName);1385412762;Get the value of a property element. May be a list etc._Also used for constructor arguments, "propertyName" being null in this case.;public Object parsePropertyValue(Element ele, BeanDefinition bd, String propertyName) {_		String elementName = (propertyName != null) ?_						"<property> element for property '" + propertyName + "'" :_						"<constructor-arg> element"___		_		NodeList nl = ele.getChildNodes()__		Element subElement = null__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element && !nodeNameEquals(node, DESCRIPTION_ELEMENT) &&_					!nodeNameEquals(node, META_ELEMENT)) {_				_				if (subElement != null) {_					error(elementName + " must not contain more than one sub-element", ele)__				}_				else {_					subElement = (Element) node__				}_			}_		}__		boolean hasRefAttribute = ele.hasAttribute(REF_ATTRIBUTE)__		boolean hasValueAttribute = ele.hasAttribute(VALUE_ATTRIBUTE)__		if ((hasRefAttribute && hasValueAttribute) ||_				((hasRefAttribute || hasValueAttribute) && subElement != null)) {_			error(elementName +_					" is only allowed to contain either 'ref' attribute OR 'value' attribute OR sub-element", ele)__		}__		if (hasRefAttribute) {_			String refName = ele.getAttribute(REF_ATTRIBUTE)__			if (!StringUtils.hasText(refName)) {_				error(elementName + " contains empty 'ref' attribute", ele)__			}_			RuntimeBeanReference ref = new RuntimeBeanReference(refName)__			ref.setSource(extractSource(ele))__			return ref__		}_		else if (hasValueAttribute) {_			TypedStringValue valueHolder = new TypedStringValue(ele.getAttribute(VALUE_ATTRIBUTE))__			valueHolder.setSource(extractSource(ele))__			return valueHolder__		}_		else if (subElement != null) {_			return parsePropertySubElement(subElement, bd)__		}_		else {_			_			error(elementName + " must specify a ref or value", ele)__			return null__		}_	};get,the,value,of,a,property,element,may,be,a,list,etc,also,used,for,constructor,arguments,property,name,being,null,in,this,case;public,object,parse,property,value,element,ele,bean,definition,bd,string,property,name,string,element,name,property,name,null,property,element,for,property,property,name,constructor,arg,element,node,list,nl,ele,get,child,nodes,element,sub,element,null,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,node,name,equals,node,node,name,equals,node,if,sub,element,null,error,element,name,must,not,contain,more,than,one,sub,element,ele,else,sub,element,element,node,boolean,has,ref,attribute,ele,has,attribute,boolean,has,value,attribute,ele,has,attribute,if,has,ref,attribute,has,value,attribute,has,ref,attribute,has,value,attribute,sub,element,null,error,element,name,is,only,allowed,to,contain,either,ref,attribute,or,value,attribute,or,sub,element,ele,if,has,ref,attribute,string,ref,name,ele,get,attribute,if,string,utils,has,text,ref,name,error,element,name,contains,empty,ref,attribute,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,ele,return,ref,else,if,has,value,attribute,typed,string,value,value,holder,new,typed,string,value,ele,get,attribute,value,holder,set,source,extract,source,ele,return,value,holder,else,if,sub,element,null,return,parse,property,sub,element,sub,element,bd,else,error,element,name,must,specify,a,ref,or,value,ele,return,null
BeanDefinitionParserDelegate -> public Object parsePropertyValue(Element ele, BeanDefinition bd, String propertyName);1410953197;Get the value of a property element. May be a list etc._Also used for constructor arguments, "propertyName" being null in this case.;public Object parsePropertyValue(Element ele, BeanDefinition bd, String propertyName) {_		String elementName = (propertyName != null) ?_						"<property> element for property '" + propertyName + "'" :_						"<constructor-arg> element"___		_		NodeList nl = ele.getChildNodes()__		Element subElement = null__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element && !nodeNameEquals(node, DESCRIPTION_ELEMENT) &&_					!nodeNameEquals(node, META_ELEMENT)) {_				_				if (subElement != null) {_					error(elementName + " must not contain more than one sub-element", ele)__				}_				else {_					subElement = (Element) node__				}_			}_		}__		boolean hasRefAttribute = ele.hasAttribute(REF_ATTRIBUTE)__		boolean hasValueAttribute = ele.hasAttribute(VALUE_ATTRIBUTE)__		if ((hasRefAttribute && hasValueAttribute) ||_				((hasRefAttribute || hasValueAttribute) && subElement != null)) {_			error(elementName +_					" is only allowed to contain either 'ref' attribute OR 'value' attribute OR sub-element", ele)__		}__		if (hasRefAttribute) {_			String refName = ele.getAttribute(REF_ATTRIBUTE)__			if (!StringUtils.hasText(refName)) {_				error(elementName + " contains empty 'ref' attribute", ele)__			}_			RuntimeBeanReference ref = new RuntimeBeanReference(refName)__			ref.setSource(extractSource(ele))__			return ref__		}_		else if (hasValueAttribute) {_			TypedStringValue valueHolder = new TypedStringValue(ele.getAttribute(VALUE_ATTRIBUTE))__			valueHolder.setSource(extractSource(ele))__			return valueHolder__		}_		else if (subElement != null) {_			return parsePropertySubElement(subElement, bd)__		}_		else {_			_			error(elementName + " must specify a ref or value", ele)__			return null__		}_	};get,the,value,of,a,property,element,may,be,a,list,etc,also,used,for,constructor,arguments,property,name,being,null,in,this,case;public,object,parse,property,value,element,ele,bean,definition,bd,string,property,name,string,element,name,property,name,null,property,element,for,property,property,name,constructor,arg,element,node,list,nl,ele,get,child,nodes,element,sub,element,null,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,node,name,equals,node,node,name,equals,node,if,sub,element,null,error,element,name,must,not,contain,more,than,one,sub,element,ele,else,sub,element,element,node,boolean,has,ref,attribute,ele,has,attribute,boolean,has,value,attribute,ele,has,attribute,if,has,ref,attribute,has,value,attribute,has,ref,attribute,has,value,attribute,sub,element,null,error,element,name,is,only,allowed,to,contain,either,ref,attribute,or,value,attribute,or,sub,element,ele,if,has,ref,attribute,string,ref,name,ele,get,attribute,if,string,utils,has,text,ref,name,error,element,name,contains,empty,ref,attribute,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,ele,return,ref,else,if,has,value,attribute,typed,string,value,value,holder,new,typed,string,value,ele,get,attribute,value,holder,set,source,extract,source,ele,return,value,holder,else,if,sub,element,null,return,parse,property,sub,element,sub,element,bd,else,error,element,name,must,specify,a,ref,or,value,ele,return,null
BeanDefinitionParserDelegate -> public Object parsePropertyValue(Element ele, BeanDefinition bd, String propertyName);1411599760;Get the value of a property element. May be a list etc._Also used for constructor arguments, "propertyName" being null in this case.;public Object parsePropertyValue(Element ele, BeanDefinition bd, String propertyName) {_		String elementName = (propertyName != null) ?_						"<property> element for property '" + propertyName + "'" :_						"<constructor-arg> element"___		_		NodeList nl = ele.getChildNodes()__		Element subElement = null__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element && !nodeNameEquals(node, DESCRIPTION_ELEMENT) &&_					!nodeNameEquals(node, META_ELEMENT)) {_				_				if (subElement != null) {_					error(elementName + " must not contain more than one sub-element", ele)__				}_				else {_					subElement = (Element) node__				}_			}_		}__		boolean hasRefAttribute = ele.hasAttribute(REF_ATTRIBUTE)__		boolean hasValueAttribute = ele.hasAttribute(VALUE_ATTRIBUTE)__		if ((hasRefAttribute && hasValueAttribute) ||_				((hasRefAttribute || hasValueAttribute) && subElement != null)) {_			error(elementName +_					" is only allowed to contain either 'ref' attribute OR 'value' attribute OR sub-element", ele)__		}__		if (hasRefAttribute) {_			String refName = ele.getAttribute(REF_ATTRIBUTE)__			if (!StringUtils.hasText(refName)) {_				error(elementName + " contains empty 'ref' attribute", ele)__			}_			RuntimeBeanReference ref = new RuntimeBeanReference(refName)__			ref.setSource(extractSource(ele))__			return ref__		}_		else if (hasValueAttribute) {_			TypedStringValue valueHolder = new TypedStringValue(ele.getAttribute(VALUE_ATTRIBUTE))__			valueHolder.setSource(extractSource(ele))__			return valueHolder__		}_		else if (subElement != null) {_			return parsePropertySubElement(subElement, bd)__		}_		else {_			_			error(elementName + " must specify a ref or value", ele)__			return null__		}_	};get,the,value,of,a,property,element,may,be,a,list,etc,also,used,for,constructor,arguments,property,name,being,null,in,this,case;public,object,parse,property,value,element,ele,bean,definition,bd,string,property,name,string,element,name,property,name,null,property,element,for,property,property,name,constructor,arg,element,node,list,nl,ele,get,child,nodes,element,sub,element,null,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,node,name,equals,node,node,name,equals,node,if,sub,element,null,error,element,name,must,not,contain,more,than,one,sub,element,ele,else,sub,element,element,node,boolean,has,ref,attribute,ele,has,attribute,boolean,has,value,attribute,ele,has,attribute,if,has,ref,attribute,has,value,attribute,has,ref,attribute,has,value,attribute,sub,element,null,error,element,name,is,only,allowed,to,contain,either,ref,attribute,or,value,attribute,or,sub,element,ele,if,has,ref,attribute,string,ref,name,ele,get,attribute,if,string,utils,has,text,ref,name,error,element,name,contains,empty,ref,attribute,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,ele,return,ref,else,if,has,value,attribute,typed,string,value,value,holder,new,typed,string,value,ele,get,attribute,value,holder,set,source,extract,source,ele,return,value,holder,else,if,sub,element,null,return,parse,property,sub,element,sub,element,bd,else,error,element,name,must,specify,a,ref,or,value,ele,return,null
BeanDefinitionParserDelegate -> public Object parsePropertyValue(Element ele, BeanDefinition bd, String propertyName);1419966315;Get the value of a property element. May be a list etc._Also used for constructor arguments, "propertyName" being null in this case.;public Object parsePropertyValue(Element ele, BeanDefinition bd, String propertyName) {_		String elementName = (propertyName != null) ?_						"<property> element for property '" + propertyName + "'" :_						"<constructor-arg> element"___		_		NodeList nl = ele.getChildNodes()__		Element subElement = null__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element && !nodeNameEquals(node, DESCRIPTION_ELEMENT) &&_					!nodeNameEquals(node, META_ELEMENT)) {_				_				if (subElement != null) {_					error(elementName + " must not contain more than one sub-element", ele)__				}_				else {_					subElement = (Element) node__				}_			}_		}__		boolean hasRefAttribute = ele.hasAttribute(REF_ATTRIBUTE)__		boolean hasValueAttribute = ele.hasAttribute(VALUE_ATTRIBUTE)__		if ((hasRefAttribute && hasValueAttribute) ||_				((hasRefAttribute || hasValueAttribute) && subElement != null)) {_			error(elementName +_					" is only allowed to contain either 'ref' attribute OR 'value' attribute OR sub-element", ele)__		}__		if (hasRefAttribute) {_			String refName = ele.getAttribute(REF_ATTRIBUTE)__			if (!StringUtils.hasText(refName)) {_				error(elementName + " contains empty 'ref' attribute", ele)__			}_			RuntimeBeanReference ref = new RuntimeBeanReference(refName)__			ref.setSource(extractSource(ele))__			return ref__		}_		else if (hasValueAttribute) {_			TypedStringValue valueHolder = new TypedStringValue(ele.getAttribute(VALUE_ATTRIBUTE))__			valueHolder.setSource(extractSource(ele))__			return valueHolder__		}_		else if (subElement != null) {_			return parsePropertySubElement(subElement, bd)__		}_		else {_			_			error(elementName + " must specify a ref or value", ele)__			return null__		}_	};get,the,value,of,a,property,element,may,be,a,list,etc,also,used,for,constructor,arguments,property,name,being,null,in,this,case;public,object,parse,property,value,element,ele,bean,definition,bd,string,property,name,string,element,name,property,name,null,property,element,for,property,property,name,constructor,arg,element,node,list,nl,ele,get,child,nodes,element,sub,element,null,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,node,name,equals,node,node,name,equals,node,if,sub,element,null,error,element,name,must,not,contain,more,than,one,sub,element,ele,else,sub,element,element,node,boolean,has,ref,attribute,ele,has,attribute,boolean,has,value,attribute,ele,has,attribute,if,has,ref,attribute,has,value,attribute,has,ref,attribute,has,value,attribute,sub,element,null,error,element,name,is,only,allowed,to,contain,either,ref,attribute,or,value,attribute,or,sub,element,ele,if,has,ref,attribute,string,ref,name,ele,get,attribute,if,string,utils,has,text,ref,name,error,element,name,contains,empty,ref,attribute,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,ele,return,ref,else,if,has,value,attribute,typed,string,value,value,holder,new,typed,string,value,ele,get,attribute,value,holder,set,source,extract,source,ele,return,value,holder,else,if,sub,element,null,return,parse,property,sub,element,sub,element,bd,else,error,element,name,must,specify,a,ref,or,value,ele,return,null
BeanDefinitionParserDelegate -> public Object parsePropertyValue(Element ele, BeanDefinition bd, String propertyName);1431958785;Get the value of a property element. May be a list etc._Also used for constructor arguments, "propertyName" being null in this case.;public Object parsePropertyValue(Element ele, BeanDefinition bd, String propertyName) {_		String elementName = (propertyName != null) ?_						"<property> element for property '" + propertyName + "'" :_						"<constructor-arg> element"___		_		NodeList nl = ele.getChildNodes()__		Element subElement = null__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element && !nodeNameEquals(node, DESCRIPTION_ELEMENT) &&_					!nodeNameEquals(node, META_ELEMENT)) {_				_				if (subElement != null) {_					error(elementName + " must not contain more than one sub-element", ele)__				}_				else {_					subElement = (Element) node__				}_			}_		}__		boolean hasRefAttribute = ele.hasAttribute(REF_ATTRIBUTE)__		boolean hasValueAttribute = ele.hasAttribute(VALUE_ATTRIBUTE)__		if ((hasRefAttribute && hasValueAttribute) ||_				((hasRefAttribute || hasValueAttribute) && subElement != null)) {_			error(elementName +_					" is only allowed to contain either 'ref' attribute OR 'value' attribute OR sub-element", ele)__		}__		if (hasRefAttribute) {_			String refName = ele.getAttribute(REF_ATTRIBUTE)__			if (!StringUtils.hasText(refName)) {_				error(elementName + " contains empty 'ref' attribute", ele)__			}_			RuntimeBeanReference ref = new RuntimeBeanReference(refName)__			ref.setSource(extractSource(ele))__			return ref__		}_		else if (hasValueAttribute) {_			TypedStringValue valueHolder = new TypedStringValue(ele.getAttribute(VALUE_ATTRIBUTE))__			valueHolder.setSource(extractSource(ele))__			return valueHolder__		}_		else if (subElement != null) {_			return parsePropertySubElement(subElement, bd)__		}_		else {_			_			error(elementName + " must specify a ref or value", ele)__			return null__		}_	};get,the,value,of,a,property,element,may,be,a,list,etc,also,used,for,constructor,arguments,property,name,being,null,in,this,case;public,object,parse,property,value,element,ele,bean,definition,bd,string,property,name,string,element,name,property,name,null,property,element,for,property,property,name,constructor,arg,element,node,list,nl,ele,get,child,nodes,element,sub,element,null,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,node,name,equals,node,node,name,equals,node,if,sub,element,null,error,element,name,must,not,contain,more,than,one,sub,element,ele,else,sub,element,element,node,boolean,has,ref,attribute,ele,has,attribute,boolean,has,value,attribute,ele,has,attribute,if,has,ref,attribute,has,value,attribute,has,ref,attribute,has,value,attribute,sub,element,null,error,element,name,is,only,allowed,to,contain,either,ref,attribute,or,value,attribute,or,sub,element,ele,if,has,ref,attribute,string,ref,name,ele,get,attribute,if,string,utils,has,text,ref,name,error,element,name,contains,empty,ref,attribute,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,ele,return,ref,else,if,has,value,attribute,typed,string,value,value,holder,new,typed,string,value,ele,get,attribute,value,holder,set,source,extract,source,ele,return,value,holder,else,if,sub,element,null,return,parse,property,sub,element,sub,element,bd,else,error,element,name,must,specify,a,ref,or,value,ele,return,null
BeanDefinitionParserDelegate -> public Object parsePropertyValue(Element ele, BeanDefinition bd, String propertyName);1432135182;Get the value of a property element. May be a list etc._Also used for constructor arguments, "propertyName" being null in this case.;public Object parsePropertyValue(Element ele, BeanDefinition bd, String propertyName) {_		String elementName = (propertyName != null) ?_						"<property> element for property '" + propertyName + "'" :_						"<constructor-arg> element"___		_		NodeList nl = ele.getChildNodes()__		Element subElement = null__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element && !nodeNameEquals(node, DESCRIPTION_ELEMENT) &&_					!nodeNameEquals(node, META_ELEMENT)) {_				_				if (subElement != null) {_					error(elementName + " must not contain more than one sub-element", ele)__				}_				else {_					subElement = (Element) node__				}_			}_		}__		boolean hasRefAttribute = ele.hasAttribute(REF_ATTRIBUTE)__		boolean hasValueAttribute = ele.hasAttribute(VALUE_ATTRIBUTE)__		if ((hasRefAttribute && hasValueAttribute) ||_				((hasRefAttribute || hasValueAttribute) && subElement != null)) {_			error(elementName +_					" is only allowed to contain either 'ref' attribute OR 'value' attribute OR sub-element", ele)__		}__		if (hasRefAttribute) {_			String refName = ele.getAttribute(REF_ATTRIBUTE)__			if (!StringUtils.hasText(refName)) {_				error(elementName + " contains empty 'ref' attribute", ele)__			}_			RuntimeBeanReference ref = new RuntimeBeanReference(refName)__			ref.setSource(extractSource(ele))__			return ref__		}_		else if (hasValueAttribute) {_			TypedStringValue valueHolder = new TypedStringValue(ele.getAttribute(VALUE_ATTRIBUTE))__			valueHolder.setSource(extractSource(ele))__			return valueHolder__		}_		else if (subElement != null) {_			return parsePropertySubElement(subElement, bd)__		}_		else {_			_			error(elementName + " must specify a ref or value", ele)__			return null__		}_	};get,the,value,of,a,property,element,may,be,a,list,etc,also,used,for,constructor,arguments,property,name,being,null,in,this,case;public,object,parse,property,value,element,ele,bean,definition,bd,string,property,name,string,element,name,property,name,null,property,element,for,property,property,name,constructor,arg,element,node,list,nl,ele,get,child,nodes,element,sub,element,null,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,node,name,equals,node,node,name,equals,node,if,sub,element,null,error,element,name,must,not,contain,more,than,one,sub,element,ele,else,sub,element,element,node,boolean,has,ref,attribute,ele,has,attribute,boolean,has,value,attribute,ele,has,attribute,if,has,ref,attribute,has,value,attribute,has,ref,attribute,has,value,attribute,sub,element,null,error,element,name,is,only,allowed,to,contain,either,ref,attribute,or,value,attribute,or,sub,element,ele,if,has,ref,attribute,string,ref,name,ele,get,attribute,if,string,utils,has,text,ref,name,error,element,name,contains,empty,ref,attribute,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,ele,return,ref,else,if,has,value,attribute,typed,string,value,value,holder,new,typed,string,value,ele,get,attribute,value,holder,set,source,extract,source,ele,return,value,holder,else,if,sub,element,null,return,parse,property,sub,element,sub,element,bd,else,error,element,name,must,specify,a,ref,or,value,ele,return,null
BeanDefinitionParserDelegate -> public Object parsePropertyValue(Element ele, BeanDefinition bd, String propertyName);1447323728;Get the value of a property element. May be a list etc._Also used for constructor arguments, "propertyName" being null in this case.;public Object parsePropertyValue(Element ele, BeanDefinition bd, String propertyName) {_		String elementName = (propertyName != null) ?_						"<property> element for property '" + propertyName + "'" :_						"<constructor-arg> element"___		_		NodeList nl = ele.getChildNodes()__		Element subElement = null__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element && !nodeNameEquals(node, DESCRIPTION_ELEMENT) &&_					!nodeNameEquals(node, META_ELEMENT)) {_				_				if (subElement != null) {_					error(elementName + " must not contain more than one sub-element", ele)__				}_				else {_					subElement = (Element) node__				}_			}_		}__		boolean hasRefAttribute = ele.hasAttribute(REF_ATTRIBUTE)__		boolean hasValueAttribute = ele.hasAttribute(VALUE_ATTRIBUTE)__		if ((hasRefAttribute && hasValueAttribute) ||_				((hasRefAttribute || hasValueAttribute) && subElement != null)) {_			error(elementName +_					" is only allowed to contain either 'ref' attribute OR 'value' attribute OR sub-element", ele)__		}__		if (hasRefAttribute) {_			String refName = ele.getAttribute(REF_ATTRIBUTE)__			if (!StringUtils.hasText(refName)) {_				error(elementName + " contains empty 'ref' attribute", ele)__			}_			RuntimeBeanReference ref = new RuntimeBeanReference(refName)__			ref.setSource(extractSource(ele))__			return ref__		}_		else if (hasValueAttribute) {_			TypedStringValue valueHolder = new TypedStringValue(ele.getAttribute(VALUE_ATTRIBUTE))__			valueHolder.setSource(extractSource(ele))__			return valueHolder__		}_		else if (subElement != null) {_			return parsePropertySubElement(subElement, bd)__		}_		else {_			_			error(elementName + " must specify a ref or value", ele)__			return null__		}_	};get,the,value,of,a,property,element,may,be,a,list,etc,also,used,for,constructor,arguments,property,name,being,null,in,this,case;public,object,parse,property,value,element,ele,bean,definition,bd,string,property,name,string,element,name,property,name,null,property,element,for,property,property,name,constructor,arg,element,node,list,nl,ele,get,child,nodes,element,sub,element,null,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,node,name,equals,node,node,name,equals,node,if,sub,element,null,error,element,name,must,not,contain,more,than,one,sub,element,ele,else,sub,element,element,node,boolean,has,ref,attribute,ele,has,attribute,boolean,has,value,attribute,ele,has,attribute,if,has,ref,attribute,has,value,attribute,has,ref,attribute,has,value,attribute,sub,element,null,error,element,name,is,only,allowed,to,contain,either,ref,attribute,or,value,attribute,or,sub,element,ele,if,has,ref,attribute,string,ref,name,ele,get,attribute,if,string,utils,has,text,ref,name,error,element,name,contains,empty,ref,attribute,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,ele,return,ref,else,if,has,value,attribute,typed,string,value,value,holder,new,typed,string,value,ele,get,attribute,value,holder,set,source,extract,source,ele,return,value,holder,else,if,sub,element,null,return,parse,property,sub,element,sub,element,bd,else,error,element,name,must,specify,a,ref,or,value,ele,return,null
BeanDefinitionParserDelegate -> public Object parsePropertyValue(Element ele, BeanDefinition bd, String propertyName);1467726769;Get the value of a property element. May be a list etc._Also used for constructor arguments, "propertyName" being null in this case.;public Object parsePropertyValue(Element ele, BeanDefinition bd, String propertyName) {_		String elementName = (propertyName != null) ?_						"<property> element for property '" + propertyName + "'" :_						"<constructor-arg> element"___		_		NodeList nl = ele.getChildNodes()__		Element subElement = null__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element && !nodeNameEquals(node, DESCRIPTION_ELEMENT) &&_					!nodeNameEquals(node, META_ELEMENT)) {_				_				if (subElement != null) {_					error(elementName + " must not contain more than one sub-element", ele)__				}_				else {_					subElement = (Element) node__				}_			}_		}__		boolean hasRefAttribute = ele.hasAttribute(REF_ATTRIBUTE)__		boolean hasValueAttribute = ele.hasAttribute(VALUE_ATTRIBUTE)__		if ((hasRefAttribute && hasValueAttribute) ||_				((hasRefAttribute || hasValueAttribute) && subElement != null)) {_			error(elementName +_					" is only allowed to contain either 'ref' attribute OR 'value' attribute OR sub-element", ele)__		}__		if (hasRefAttribute) {_			String refName = ele.getAttribute(REF_ATTRIBUTE)__			if (!StringUtils.hasText(refName)) {_				error(elementName + " contains empty 'ref' attribute", ele)__			}_			RuntimeBeanReference ref = new RuntimeBeanReference(refName)__			ref.setSource(extractSource(ele))__			return ref__		}_		else if (hasValueAttribute) {_			TypedStringValue valueHolder = new TypedStringValue(ele.getAttribute(VALUE_ATTRIBUTE))__			valueHolder.setSource(extractSource(ele))__			return valueHolder__		}_		else if (subElement != null) {_			return parsePropertySubElement(subElement, bd)__		}_		else {_			_			error(elementName + " must specify a ref or value", ele)__			return null__		}_	};get,the,value,of,a,property,element,may,be,a,list,etc,also,used,for,constructor,arguments,property,name,being,null,in,this,case;public,object,parse,property,value,element,ele,bean,definition,bd,string,property,name,string,element,name,property,name,null,property,element,for,property,property,name,constructor,arg,element,node,list,nl,ele,get,child,nodes,element,sub,element,null,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,node,name,equals,node,node,name,equals,node,if,sub,element,null,error,element,name,must,not,contain,more,than,one,sub,element,ele,else,sub,element,element,node,boolean,has,ref,attribute,ele,has,attribute,boolean,has,value,attribute,ele,has,attribute,if,has,ref,attribute,has,value,attribute,has,ref,attribute,has,value,attribute,sub,element,null,error,element,name,is,only,allowed,to,contain,either,ref,attribute,or,value,attribute,or,sub,element,ele,if,has,ref,attribute,string,ref,name,ele,get,attribute,if,string,utils,has,text,ref,name,error,element,name,contains,empty,ref,attribute,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,ele,return,ref,else,if,has,value,attribute,typed,string,value,value,holder,new,typed,string,value,ele,get,attribute,value,holder,set,source,extract,source,ele,return,value,holder,else,if,sub,element,null,return,parse,property,sub,element,sub,element,bd,else,error,element,name,must,specify,a,ref,or,value,ele,return,null
BeanDefinitionParserDelegate -> public Object parsePropertyValue(Element ele, BeanDefinition bd, String propertyName);1467730834;Get the value of a property element. May be a list etc._Also used for constructor arguments, "propertyName" being null in this case.;public Object parsePropertyValue(Element ele, BeanDefinition bd, String propertyName) {_		String elementName = (propertyName != null) ?_						"<property> element for property '" + propertyName + "'" :_						"<constructor-arg> element"___		_		NodeList nl = ele.getChildNodes()__		Element subElement = null__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element && !nodeNameEquals(node, DESCRIPTION_ELEMENT) &&_					!nodeNameEquals(node, META_ELEMENT)) {_				_				if (subElement != null) {_					error(elementName + " must not contain more than one sub-element", ele)__				}_				else {_					subElement = (Element) node__				}_			}_		}__		boolean hasRefAttribute = ele.hasAttribute(REF_ATTRIBUTE)__		boolean hasValueAttribute = ele.hasAttribute(VALUE_ATTRIBUTE)__		if ((hasRefAttribute && hasValueAttribute) ||_				((hasRefAttribute || hasValueAttribute) && subElement != null)) {_			error(elementName +_					" is only allowed to contain either 'ref' attribute OR 'value' attribute OR sub-element", ele)__		}__		if (hasRefAttribute) {_			String refName = ele.getAttribute(REF_ATTRIBUTE)__			if (!StringUtils.hasText(refName)) {_				error(elementName + " contains empty 'ref' attribute", ele)__			}_			RuntimeBeanReference ref = new RuntimeBeanReference(refName)__			ref.setSource(extractSource(ele))__			return ref__		}_		else if (hasValueAttribute) {_			TypedStringValue valueHolder = new TypedStringValue(ele.getAttribute(VALUE_ATTRIBUTE))__			valueHolder.setSource(extractSource(ele))__			return valueHolder__		}_		else if (subElement != null) {_			return parsePropertySubElement(subElement, bd)__		}_		else {_			_			error(elementName + " must specify a ref or value", ele)__			return null__		}_	};get,the,value,of,a,property,element,may,be,a,list,etc,also,used,for,constructor,arguments,property,name,being,null,in,this,case;public,object,parse,property,value,element,ele,bean,definition,bd,string,property,name,string,element,name,property,name,null,property,element,for,property,property,name,constructor,arg,element,node,list,nl,ele,get,child,nodes,element,sub,element,null,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,node,name,equals,node,node,name,equals,node,if,sub,element,null,error,element,name,must,not,contain,more,than,one,sub,element,ele,else,sub,element,element,node,boolean,has,ref,attribute,ele,has,attribute,boolean,has,value,attribute,ele,has,attribute,if,has,ref,attribute,has,value,attribute,has,ref,attribute,has,value,attribute,sub,element,null,error,element,name,is,only,allowed,to,contain,either,ref,attribute,or,value,attribute,or,sub,element,ele,if,has,ref,attribute,string,ref,name,ele,get,attribute,if,string,utils,has,text,ref,name,error,element,name,contains,empty,ref,attribute,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,ele,return,ref,else,if,has,value,attribute,typed,string,value,value,holder,new,typed,string,value,ele,get,attribute,value,holder,set,source,extract,source,ele,return,value,holder,else,if,sub,element,null,return,parse,property,sub,element,sub,element,bd,else,error,element,name,must,specify,a,ref,or,value,ele,return,null
BeanDefinitionParserDelegate -> public Object parsePropertyValue(Element ele, BeanDefinition bd, String propertyName);1467744603;Get the value of a property element. May be a list etc._Also used for constructor arguments, "propertyName" being null in this case.;public Object parsePropertyValue(Element ele, BeanDefinition bd, String propertyName) {_		String elementName = (propertyName != null) ?_						"<property> element for property '" + propertyName + "'" :_						"<constructor-arg> element"___		_		NodeList nl = ele.getChildNodes()__		Element subElement = null__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element && !nodeNameEquals(node, DESCRIPTION_ELEMENT) &&_					!nodeNameEquals(node, META_ELEMENT)) {_				_				if (subElement != null) {_					error(elementName + " must not contain more than one sub-element", ele)__				}_				else {_					subElement = (Element) node__				}_			}_		}__		boolean hasRefAttribute = ele.hasAttribute(REF_ATTRIBUTE)__		boolean hasValueAttribute = ele.hasAttribute(VALUE_ATTRIBUTE)__		if ((hasRefAttribute && hasValueAttribute) ||_				((hasRefAttribute || hasValueAttribute) && subElement != null)) {_			error(elementName +_					" is only allowed to contain either 'ref' attribute OR 'value' attribute OR sub-element", ele)__		}__		if (hasRefAttribute) {_			String refName = ele.getAttribute(REF_ATTRIBUTE)__			if (!StringUtils.hasText(refName)) {_				error(elementName + " contains empty 'ref' attribute", ele)__			}_			RuntimeBeanReference ref = new RuntimeBeanReference(refName)__			ref.setSource(extractSource(ele))__			return ref__		}_		else if (hasValueAttribute) {_			TypedStringValue valueHolder = new TypedStringValue(ele.getAttribute(VALUE_ATTRIBUTE))__			valueHolder.setSource(extractSource(ele))__			return valueHolder__		}_		else if (subElement != null) {_			return parsePropertySubElement(subElement, bd)__		}_		else {_			_			error(elementName + " must specify a ref or value", ele)__			return null__		}_	};get,the,value,of,a,property,element,may,be,a,list,etc,also,used,for,constructor,arguments,property,name,being,null,in,this,case;public,object,parse,property,value,element,ele,bean,definition,bd,string,property,name,string,element,name,property,name,null,property,element,for,property,property,name,constructor,arg,element,node,list,nl,ele,get,child,nodes,element,sub,element,null,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,node,name,equals,node,node,name,equals,node,if,sub,element,null,error,element,name,must,not,contain,more,than,one,sub,element,ele,else,sub,element,element,node,boolean,has,ref,attribute,ele,has,attribute,boolean,has,value,attribute,ele,has,attribute,if,has,ref,attribute,has,value,attribute,has,ref,attribute,has,value,attribute,sub,element,null,error,element,name,is,only,allowed,to,contain,either,ref,attribute,or,value,attribute,or,sub,element,ele,if,has,ref,attribute,string,ref,name,ele,get,attribute,if,string,utils,has,text,ref,name,error,element,name,contains,empty,ref,attribute,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,ele,return,ref,else,if,has,value,attribute,typed,string,value,value,holder,new,typed,string,value,ele,get,attribute,value,holder,set,source,extract,source,ele,return,value,holder,else,if,sub,element,null,return,parse,property,sub,element,sub,element,bd,else,error,element,name,must,specify,a,ref,or,value,ele,return,null
BeanDefinitionParserDelegate -> public Object parsePropertyValue(Element ele, BeanDefinition bd, String propertyName);1487245676;Get the value of a property element. May be a list etc._Also used for constructor arguments, "propertyName" being null in this case.;public Object parsePropertyValue(Element ele, BeanDefinition bd, String propertyName) {_		String elementName = (propertyName != null) ?_						"<property> element for property '" + propertyName + "'" :_						"<constructor-arg> element"___		_		NodeList nl = ele.getChildNodes()__		Element subElement = null__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element && !nodeNameEquals(node, DESCRIPTION_ELEMENT) &&_					!nodeNameEquals(node, META_ELEMENT)) {_				_				if (subElement != null) {_					error(elementName + " must not contain more than one sub-element", ele)__				}_				else {_					subElement = (Element) node__				}_			}_		}__		boolean hasRefAttribute = ele.hasAttribute(REF_ATTRIBUTE)__		boolean hasValueAttribute = ele.hasAttribute(VALUE_ATTRIBUTE)__		if ((hasRefAttribute && hasValueAttribute) ||_				((hasRefAttribute || hasValueAttribute) && subElement != null)) {_			error(elementName +_					" is only allowed to contain either 'ref' attribute OR 'value' attribute OR sub-element", ele)__		}__		if (hasRefAttribute) {_			String refName = ele.getAttribute(REF_ATTRIBUTE)__			if (!StringUtils.hasText(refName)) {_				error(elementName + " contains empty 'ref' attribute", ele)__			}_			RuntimeBeanReference ref = new RuntimeBeanReference(refName)__			ref.setSource(extractSource(ele))__			return ref__		}_		else if (hasValueAttribute) {_			TypedStringValue valueHolder = new TypedStringValue(ele.getAttribute(VALUE_ATTRIBUTE))__			valueHolder.setSource(extractSource(ele))__			return valueHolder__		}_		else if (subElement != null) {_			return parsePropertySubElement(subElement, bd)__		}_		else {_			_			error(elementName + " must specify a ref or value", ele)__			return null__		}_	};get,the,value,of,a,property,element,may,be,a,list,etc,also,used,for,constructor,arguments,property,name,being,null,in,this,case;public,object,parse,property,value,element,ele,bean,definition,bd,string,property,name,string,element,name,property,name,null,property,element,for,property,property,name,constructor,arg,element,node,list,nl,ele,get,child,nodes,element,sub,element,null,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,node,name,equals,node,node,name,equals,node,if,sub,element,null,error,element,name,must,not,contain,more,than,one,sub,element,ele,else,sub,element,element,node,boolean,has,ref,attribute,ele,has,attribute,boolean,has,value,attribute,ele,has,attribute,if,has,ref,attribute,has,value,attribute,has,ref,attribute,has,value,attribute,sub,element,null,error,element,name,is,only,allowed,to,contain,either,ref,attribute,or,value,attribute,or,sub,element,ele,if,has,ref,attribute,string,ref,name,ele,get,attribute,if,string,utils,has,text,ref,name,error,element,name,contains,empty,ref,attribute,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,ele,return,ref,else,if,has,value,attribute,typed,string,value,value,holder,new,typed,string,value,ele,get,attribute,value,holder,set,source,extract,source,ele,return,value,holder,else,if,sub,element,null,return,parse,property,sub,element,sub,element,bd,else,error,element,name,must,specify,a,ref,or,value,ele,return,null
BeanDefinitionParserDelegate -> public Object parsePropertyValue(Element ele, BeanDefinition bd, String propertyName);1487255851;Get the value of a property element. May be a list etc._Also used for constructor arguments, "propertyName" being null in this case.;public Object parsePropertyValue(Element ele, BeanDefinition bd, String propertyName) {_		String elementName = (propertyName != null) ?_						"<property> element for property '" + propertyName + "'" :_						"<constructor-arg> element"___		_		NodeList nl = ele.getChildNodes()__		Element subElement = null__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element && !nodeNameEquals(node, DESCRIPTION_ELEMENT) &&_					!nodeNameEquals(node, META_ELEMENT)) {_				_				if (subElement != null) {_					error(elementName + " must not contain more than one sub-element", ele)__				}_				else {_					subElement = (Element) node__				}_			}_		}__		boolean hasRefAttribute = ele.hasAttribute(REF_ATTRIBUTE)__		boolean hasValueAttribute = ele.hasAttribute(VALUE_ATTRIBUTE)__		if ((hasRefAttribute && hasValueAttribute) ||_				((hasRefAttribute || hasValueAttribute) && subElement != null)) {_			error(elementName +_					" is only allowed to contain either 'ref' attribute OR 'value' attribute OR sub-element", ele)__		}__		if (hasRefAttribute) {_			String refName = ele.getAttribute(REF_ATTRIBUTE)__			if (!StringUtils.hasText(refName)) {_				error(elementName + " contains empty 'ref' attribute", ele)__			}_			RuntimeBeanReference ref = new RuntimeBeanReference(refName)__			ref.setSource(extractSource(ele))__			return ref__		}_		else if (hasValueAttribute) {_			TypedStringValue valueHolder = new TypedStringValue(ele.getAttribute(VALUE_ATTRIBUTE))__			valueHolder.setSource(extractSource(ele))__			return valueHolder__		}_		else if (subElement != null) {_			return parsePropertySubElement(subElement, bd)__		}_		else {_			_			error(elementName + " must specify a ref or value", ele)__			return null__		}_	};get,the,value,of,a,property,element,may,be,a,list,etc,also,used,for,constructor,arguments,property,name,being,null,in,this,case;public,object,parse,property,value,element,ele,bean,definition,bd,string,property,name,string,element,name,property,name,null,property,element,for,property,property,name,constructor,arg,element,node,list,nl,ele,get,child,nodes,element,sub,element,null,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,node,name,equals,node,node,name,equals,node,if,sub,element,null,error,element,name,must,not,contain,more,than,one,sub,element,ele,else,sub,element,element,node,boolean,has,ref,attribute,ele,has,attribute,boolean,has,value,attribute,ele,has,attribute,if,has,ref,attribute,has,value,attribute,has,ref,attribute,has,value,attribute,sub,element,null,error,element,name,is,only,allowed,to,contain,either,ref,attribute,or,value,attribute,or,sub,element,ele,if,has,ref,attribute,string,ref,name,ele,get,attribute,if,string,utils,has,text,ref,name,error,element,name,contains,empty,ref,attribute,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,ele,return,ref,else,if,has,value,attribute,typed,string,value,value,holder,new,typed,string,value,ele,get,attribute,value,holder,set,source,extract,source,ele,return,value,holder,else,if,sub,element,null,return,parse,property,sub,element,sub,element,bd,else,error,element,name,must,specify,a,ref,or,value,ele,return,null
BeanDefinitionParserDelegate -> public Object parsePropertyValue(Element ele, BeanDefinition bd, String propertyName);1494586217;Get the value of a property element. May be a list etc._Also used for constructor arguments, "propertyName" being null in this case.;public Object parsePropertyValue(Element ele, BeanDefinition bd, String propertyName) {_		String elementName = (propertyName != null) ?_						"<property> element for property '" + propertyName + "'" :_						"<constructor-arg> element"___		_		NodeList nl = ele.getChildNodes()__		Element subElement = null__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element && !nodeNameEquals(node, DESCRIPTION_ELEMENT) &&_					!nodeNameEquals(node, META_ELEMENT)) {_				_				if (subElement != null) {_					error(elementName + " must not contain more than one sub-element", ele)__				}_				else {_					subElement = (Element) node__				}_			}_		}__		boolean hasRefAttribute = ele.hasAttribute(REF_ATTRIBUTE)__		boolean hasValueAttribute = ele.hasAttribute(VALUE_ATTRIBUTE)__		if ((hasRefAttribute && hasValueAttribute) ||_				((hasRefAttribute || hasValueAttribute) && subElement != null)) {_			error(elementName +_					" is only allowed to contain either 'ref' attribute OR 'value' attribute OR sub-element", ele)__		}__		if (hasRefAttribute) {_			String refName = ele.getAttribute(REF_ATTRIBUTE)__			if (!StringUtils.hasText(refName)) {_				error(elementName + " contains empty 'ref' attribute", ele)__			}_			RuntimeBeanReference ref = new RuntimeBeanReference(refName)__			ref.setSource(extractSource(ele))__			return ref__		}_		else if (hasValueAttribute) {_			TypedStringValue valueHolder = new TypedStringValue(ele.getAttribute(VALUE_ATTRIBUTE))__			valueHolder.setSource(extractSource(ele))__			return valueHolder__		}_		else if (subElement != null) {_			return parsePropertySubElement(subElement, bd)__		}_		else {_			_			error(elementName + " must specify a ref or value", ele)__			return null__		}_	};get,the,value,of,a,property,element,may,be,a,list,etc,also,used,for,constructor,arguments,property,name,being,null,in,this,case;public,object,parse,property,value,element,ele,bean,definition,bd,string,property,name,string,element,name,property,name,null,property,element,for,property,property,name,constructor,arg,element,node,list,nl,ele,get,child,nodes,element,sub,element,null,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,node,name,equals,node,node,name,equals,node,if,sub,element,null,error,element,name,must,not,contain,more,than,one,sub,element,ele,else,sub,element,element,node,boolean,has,ref,attribute,ele,has,attribute,boolean,has,value,attribute,ele,has,attribute,if,has,ref,attribute,has,value,attribute,has,ref,attribute,has,value,attribute,sub,element,null,error,element,name,is,only,allowed,to,contain,either,ref,attribute,or,value,attribute,or,sub,element,ele,if,has,ref,attribute,string,ref,name,ele,get,attribute,if,string,utils,has,text,ref,name,error,element,name,contains,empty,ref,attribute,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,ele,return,ref,else,if,has,value,attribute,typed,string,value,value,holder,new,typed,string,value,ele,get,attribute,value,holder,set,source,extract,source,ele,return,value,holder,else,if,sub,element,null,return,parse,property,sub,element,sub,element,bd,else,error,element,name,must,specify,a,ref,or,value,ele,return,null
BeanDefinitionParserDelegate -> public void parseQualifierElements(Element beanEle, AbstractBeanDefinition bd);1328020251;Parse qualifier sub-elements of the given bean element.;public void parseQualifierElements(Element beanEle, AbstractBeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, QUALIFIER_ELEMENT)) {_				parseQualifierElement((Element) node, bd)__			}_		}_	};parse,qualifier,sub,elements,of,the,given,bean,element;public,void,parse,qualifier,elements,element,bean,ele,abstract,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,qualifier,element,element,node,bd
BeanDefinitionParserDelegate -> public void parseQualifierElements(Element beanEle, AbstractBeanDefinition bd);1335774711;Parse qualifier sub-elements of the given bean element.;public void parseQualifierElements(Element beanEle, AbstractBeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, QUALIFIER_ELEMENT)) {_				parseQualifierElement((Element) node, bd)__			}_		}_	};parse,qualifier,sub,elements,of,the,given,bean,element;public,void,parse,qualifier,elements,element,bean,ele,abstract,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,qualifier,element,element,node,bd
BeanDefinitionParserDelegate -> public void parseQualifierElements(Element beanEle, AbstractBeanDefinition bd);1337341719;Parse qualifier sub-elements of the given bean element.;public void parseQualifierElements(Element beanEle, AbstractBeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, QUALIFIER_ELEMENT)) {_				parseQualifierElement((Element) node, bd)__			}_		}_	};parse,qualifier,sub,elements,of,the,given,bean,element;public,void,parse,qualifier,elements,element,bean,ele,abstract,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,qualifier,element,element,node,bd
BeanDefinitionParserDelegate -> public void parseQualifierElements(Element beanEle, AbstractBeanDefinition bd);1351392612;Parse qualifier sub-elements of the given bean element.;public void parseQualifierElements(Element beanEle, AbstractBeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, QUALIFIER_ELEMENT)) {_				parseQualifierElement((Element) node, bd)__			}_		}_	};parse,qualifier,sub,elements,of,the,given,bean,element;public,void,parse,qualifier,elements,element,bean,ele,abstract,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,qualifier,element,element,node,bd
BeanDefinitionParserDelegate -> public void parseQualifierElements(Element beanEle, AbstractBeanDefinition bd);1351696936;Parse qualifier sub-elements of the given bean element.;public void parseQualifierElements(Element beanEle, AbstractBeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, QUALIFIER_ELEMENT)) {_				parseQualifierElement((Element) node, bd)__			}_		}_	};parse,qualifier,sub,elements,of,the,given,bean,element;public,void,parse,qualifier,elements,element,bean,ele,abstract,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,qualifier,element,element,node,bd
BeanDefinitionParserDelegate -> public void parseQualifierElements(Element beanEle, AbstractBeanDefinition bd);1356735495;Parse qualifier sub-elements of the given bean element.;public void parseQualifierElements(Element beanEle, AbstractBeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, QUALIFIER_ELEMENT)) {_				parseQualifierElement((Element) node, bd)__			}_		}_	};parse,qualifier,sub,elements,of,the,given,bean,element;public,void,parse,qualifier,elements,element,bean,ele,abstract,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,qualifier,element,element,node,bd
BeanDefinitionParserDelegate -> public void parseQualifierElements(Element beanEle, AbstractBeanDefinition bd);1357119417;Parse qualifier sub-elements of the given bean element.;public void parseQualifierElements(Element beanEle, AbstractBeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, QUALIFIER_ELEMENT)) {_				parseQualifierElement((Element) node, bd)__			}_		}_	};parse,qualifier,sub,elements,of,the,given,bean,element;public,void,parse,qualifier,elements,element,bean,ele,abstract,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,qualifier,element,element,node,bd
BeanDefinitionParserDelegate -> public void parseQualifierElements(Element beanEle, AbstractBeanDefinition bd);1367943112;Parse qualifier sub-elements of the given bean element.;public void parseQualifierElements(Element beanEle, AbstractBeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, QUALIFIER_ELEMENT)) {_				parseQualifierElement((Element) node, bd)__			}_		}_	};parse,qualifier,sub,elements,of,the,given,bean,element;public,void,parse,qualifier,elements,element,bean,ele,abstract,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,qualifier,element,element,node,bd
BeanDefinitionParserDelegate -> public void parseQualifierElements(Element beanEle, AbstractBeanDefinition bd);1382030648;Parse qualifier sub-elements of the given bean element.;public void parseQualifierElements(Element beanEle, AbstractBeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, QUALIFIER_ELEMENT)) {_				parseQualifierElement((Element) node, bd)__			}_		}_	};parse,qualifier,sub,elements,of,the,given,bean,element;public,void,parse,qualifier,elements,element,bean,ele,abstract,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,qualifier,element,element,node,bd
BeanDefinitionParserDelegate -> public void parseQualifierElements(Element beanEle, AbstractBeanDefinition bd);1385412762;Parse qualifier sub-elements of the given bean element.;public void parseQualifierElements(Element beanEle, AbstractBeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, QUALIFIER_ELEMENT)) {_				parseQualifierElement((Element) node, bd)__			}_		}_	};parse,qualifier,sub,elements,of,the,given,bean,element;public,void,parse,qualifier,elements,element,bean,ele,abstract,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,qualifier,element,element,node,bd
BeanDefinitionParserDelegate -> public void parseQualifierElements(Element beanEle, AbstractBeanDefinition bd);1410953197;Parse qualifier sub-elements of the given bean element.;public void parseQualifierElements(Element beanEle, AbstractBeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, QUALIFIER_ELEMENT)) {_				parseQualifierElement((Element) node, bd)__			}_		}_	};parse,qualifier,sub,elements,of,the,given,bean,element;public,void,parse,qualifier,elements,element,bean,ele,abstract,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,qualifier,element,element,node,bd
BeanDefinitionParserDelegate -> public void parseQualifierElements(Element beanEle, AbstractBeanDefinition bd);1411599760;Parse qualifier sub-elements of the given bean element.;public void parseQualifierElements(Element beanEle, AbstractBeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, QUALIFIER_ELEMENT)) {_				parseQualifierElement((Element) node, bd)__			}_		}_	};parse,qualifier,sub,elements,of,the,given,bean,element;public,void,parse,qualifier,elements,element,bean,ele,abstract,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,qualifier,element,element,node,bd
BeanDefinitionParserDelegate -> public void parseQualifierElements(Element beanEle, AbstractBeanDefinition bd);1419966315;Parse qualifier sub-elements of the given bean element.;public void parseQualifierElements(Element beanEle, AbstractBeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, QUALIFIER_ELEMENT)) {_				parseQualifierElement((Element) node, bd)__			}_		}_	};parse,qualifier,sub,elements,of,the,given,bean,element;public,void,parse,qualifier,elements,element,bean,ele,abstract,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,qualifier,element,element,node,bd
BeanDefinitionParserDelegate -> public void parseQualifierElements(Element beanEle, AbstractBeanDefinition bd);1431958785;Parse qualifier sub-elements of the given bean element.;public void parseQualifierElements(Element beanEle, AbstractBeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, QUALIFIER_ELEMENT)) {_				parseQualifierElement((Element) node, bd)__			}_		}_	};parse,qualifier,sub,elements,of,the,given,bean,element;public,void,parse,qualifier,elements,element,bean,ele,abstract,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,qualifier,element,element,node,bd
BeanDefinitionParserDelegate -> public void parseQualifierElements(Element beanEle, AbstractBeanDefinition bd);1432135182;Parse qualifier sub-elements of the given bean element.;public void parseQualifierElements(Element beanEle, AbstractBeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, QUALIFIER_ELEMENT)) {_				parseQualifierElement((Element) node, bd)__			}_		}_	};parse,qualifier,sub,elements,of,the,given,bean,element;public,void,parse,qualifier,elements,element,bean,ele,abstract,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,qualifier,element,element,node,bd
BeanDefinitionParserDelegate -> public void parseQualifierElements(Element beanEle, AbstractBeanDefinition bd);1447323728;Parse qualifier sub-elements of the given bean element.;public void parseQualifierElements(Element beanEle, AbstractBeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, QUALIFIER_ELEMENT)) {_				parseQualifierElement((Element) node, bd)__			}_		}_	};parse,qualifier,sub,elements,of,the,given,bean,element;public,void,parse,qualifier,elements,element,bean,ele,abstract,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,qualifier,element,element,node,bd
BeanDefinitionParserDelegate -> public void parseQualifierElements(Element beanEle, AbstractBeanDefinition bd);1467726769;Parse qualifier sub-elements of the given bean element.;public void parseQualifierElements(Element beanEle, AbstractBeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, QUALIFIER_ELEMENT)) {_				parseQualifierElement((Element) node, bd)__			}_		}_	};parse,qualifier,sub,elements,of,the,given,bean,element;public,void,parse,qualifier,elements,element,bean,ele,abstract,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,qualifier,element,element,node,bd
BeanDefinitionParserDelegate -> public void parseQualifierElements(Element beanEle, AbstractBeanDefinition bd);1467730834;Parse qualifier sub-elements of the given bean element.;public void parseQualifierElements(Element beanEle, AbstractBeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, QUALIFIER_ELEMENT)) {_				parseQualifierElement((Element) node, bd)__			}_		}_	};parse,qualifier,sub,elements,of,the,given,bean,element;public,void,parse,qualifier,elements,element,bean,ele,abstract,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,qualifier,element,element,node,bd
BeanDefinitionParserDelegate -> public void parseQualifierElements(Element beanEle, AbstractBeanDefinition bd);1467744603;Parse qualifier sub-elements of the given bean element.;public void parseQualifierElements(Element beanEle, AbstractBeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, QUALIFIER_ELEMENT)) {_				parseQualifierElement((Element) node, bd)__			}_		}_	};parse,qualifier,sub,elements,of,the,given,bean,element;public,void,parse,qualifier,elements,element,bean,ele,abstract,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,qualifier,element,element,node,bd
BeanDefinitionParserDelegate -> public void parseQualifierElements(Element beanEle, AbstractBeanDefinition bd);1487245676;Parse qualifier sub-elements of the given bean element.;public void parseQualifierElements(Element beanEle, AbstractBeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, QUALIFIER_ELEMENT)) {_				parseQualifierElement((Element) node, bd)__			}_		}_	};parse,qualifier,sub,elements,of,the,given,bean,element;public,void,parse,qualifier,elements,element,bean,ele,abstract,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,qualifier,element,element,node,bd
BeanDefinitionParserDelegate -> public void parseQualifierElements(Element beanEle, AbstractBeanDefinition bd);1487255851;Parse qualifier sub-elements of the given bean element.;public void parseQualifierElements(Element beanEle, AbstractBeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, QUALIFIER_ELEMENT)) {_				parseQualifierElement((Element) node, bd)__			}_		}_	};parse,qualifier,sub,elements,of,the,given,bean,element;public,void,parse,qualifier,elements,element,bean,ele,abstract,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,qualifier,element,element,node,bd
BeanDefinitionParserDelegate -> public void parseQualifierElements(Element beanEle, AbstractBeanDefinition bd);1494586217;Parse qualifier sub-elements of the given bean element.;public void parseQualifierElements(Element beanEle, AbstractBeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, QUALIFIER_ELEMENT)) {_				parseQualifierElement((Element) node, bd)__			}_		}_	};parse,qualifier,sub,elements,of,the,given,bean,element;public,void,parse,qualifier,elements,element,bean,ele,abstract,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,qualifier,element,element,node,bd
BeanDefinitionParserDelegate -> public void parseQualifierElements(Element beanEle, AbstractBeanDefinition bd);1495868221;Parse qualifier sub-elements of the given bean element.;public void parseQualifierElements(Element beanEle, AbstractBeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, QUALIFIER_ELEMENT)) {_				parseQualifierElement((Element) node, bd)__			}_		}_	};parse,qualifier,sub,elements,of,the,given,bean,element;public,void,parse,qualifier,elements,element,bean,ele,abstract,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,qualifier,element,element,node,bd
BeanDefinitionParserDelegate -> public void parseQualifierElements(Element beanEle, AbstractBeanDefinition bd);1496259743;Parse qualifier sub-elements of the given bean element.;public void parseQualifierElements(Element beanEle, AbstractBeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, QUALIFIER_ELEMENT)) {_				parseQualifierElement((Element) node, bd)__			}_		}_	};parse,qualifier,sub,elements,of,the,given,bean,element;public,void,parse,qualifier,elements,element,bean,ele,abstract,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,qualifier,element,element,node,bd
BeanDefinitionParserDelegate -> public void parseQualifierElements(Element beanEle, AbstractBeanDefinition bd);1496837955;Parse qualifier sub-elements of the given bean element.;public void parseQualifierElements(Element beanEle, AbstractBeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, QUALIFIER_ELEMENT)) {_				parseQualifierElement((Element) node, bd)__			}_		}_	};parse,qualifier,sub,elements,of,the,given,bean,element;public,void,parse,qualifier,elements,element,bean,ele,abstract,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,qualifier,element,element,node,bd
BeanDefinitionParserDelegate -> public void parseQualifierElements(Element beanEle, AbstractBeanDefinition bd);1503008029;Parse qualifier sub-elements of the given bean element.;public void parseQualifierElements(Element beanEle, AbstractBeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, QUALIFIER_ELEMENT)) {_				parseQualifierElement((Element) node, bd)__			}_		}_	};parse,qualifier,sub,elements,of,the,given,bean,element;public,void,parse,qualifier,elements,element,bean,ele,abstract,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,qualifier,element,element,node,bd
BeanDefinitionParserDelegate -> public void parseQualifierElements(Element beanEle, AbstractBeanDefinition bd);1519513303;Parse qualifier sub-elements of the given bean element.;public void parseQualifierElements(Element beanEle, AbstractBeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, QUALIFIER_ELEMENT)) {_				parseQualifierElement((Element) node, bd)__			}_		}_	};parse,qualifier,sub,elements,of,the,given,bean,element;public,void,parse,qualifier,elements,element,bean,ele,abstract,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,qualifier,element,element,node,bd
BeanDefinitionParserDelegate -> public void parseQualifierElements(Element beanEle, AbstractBeanDefinition bd);1530174524;Parse qualifier sub-elements of the given bean element.;public void parseQualifierElements(Element beanEle, AbstractBeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, QUALIFIER_ELEMENT)) {_				parseQualifierElement((Element) node, bd)__			}_		}_	};parse,qualifier,sub,elements,of,the,given,bean,element;public,void,parse,qualifier,elements,element,bean,ele,abstract,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,qualifier,element,element,node,bd
BeanDefinitionParserDelegate -> public void parseQualifierElements(Element beanEle, AbstractBeanDefinition bd);1530190293;Parse qualifier sub-elements of the given bean element.;public void parseQualifierElements(Element beanEle, AbstractBeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, QUALIFIER_ELEMENT)) {_				parseQualifierElement((Element) node, bd)__			}_		}_	};parse,qualifier,sub,elements,of,the,given,bean,element;public,void,parse,qualifier,elements,element,bean,ele,abstract,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,qualifier,element,element,node,bd
BeanDefinitionParserDelegate -> public void parseQualifierElements(Element beanEle, AbstractBeanDefinition bd);1532706365;Parse qualifier sub-elements of the given bean element.;public void parseQualifierElements(Element beanEle, AbstractBeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, QUALIFIER_ELEMENT)) {_				parseQualifierElement((Element) node, bd)__			}_		}_	};parse,qualifier,sub,elements,of,the,given,bean,element;public,void,parse,qualifier,elements,element,bean,ele,abstract,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,qualifier,element,element,node,bd
BeanDefinitionParserDelegate -> public void parseQualifierElements(Element beanEle, AbstractBeanDefinition bd);1546958161;Parse qualifier sub-elements of the given bean element.;public void parseQualifierElements(Element beanEle, AbstractBeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, QUALIFIER_ELEMENT)) {_				parseQualifierElement((Element) node, bd)__			}_		}_	};parse,qualifier,sub,elements,of,the,given,bean,element;public,void,parse,qualifier,elements,element,bean,ele,abstract,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,qualifier,element,element,node,bd
BeanDefinitionParserDelegate -> public Map<Object, Object> parseMapElement(Element mapEle, @Nullable BeanDefinition bd);1496837955;Parse a map element.;public Map<Object, Object> parseMapElement(Element mapEle, @Nullable BeanDefinition bd) {_		String defaultKeyType = mapEle.getAttribute(KEY_TYPE_ATTRIBUTE)__		String defaultValueType = mapEle.getAttribute(VALUE_TYPE_ATTRIBUTE)___		List<Element> entryEles = DomUtils.getChildElementsByTagName(mapEle, ENTRY_ELEMENT)__		ManagedMap<Object, Object> map = new ManagedMap<>(entryEles.size())__		map.setSource(extractSource(mapEle))__		map.setKeyTypeName(defaultKeyType)__		map.setValueTypeName(defaultValueType)__		map.setMergeEnabled(parseMergeAttribute(mapEle))___		for (Element entryEle : entryEles) {_			_			_			NodeList entrySubNodes = entryEle.getChildNodes()__			Element keyEle = null__			Element valueEle = null__			for (int j = 0_ j < entrySubNodes.getLength()_ j++) {_				Node node = entrySubNodes.item(j)__				if (node instanceof Element) {_					Element candidateEle = (Element) node__					if (nodeNameEquals(candidateEle, KEY_ELEMENT)) {_						if (keyEle != null) {_							error("<entry> element is only allowed to contain one <key> sub-element", entryEle)__						}_						else {_							keyEle = candidateEle__						}_					}_					else {_						_						if (nodeNameEquals(candidateEle, DESCRIPTION_ELEMENT)) {_							_						}_						else if (valueEle != null) {_							error("<entry> element must not contain more than one value sub-element", entryEle)__						}_						else {_							valueEle = candidateEle__						}_					}_				}_			}__			_			Object key = null__			boolean hasKeyAttribute = entryEle.hasAttribute(KEY_ATTRIBUTE)__			boolean hasKeyRefAttribute = entryEle.hasAttribute(KEY_REF_ATTRIBUTE)__			if ((hasKeyAttribute && hasKeyRefAttribute) ||_					((hasKeyAttribute || hasKeyRefAttribute)) && keyEle != null) {_				error("<entry> element is only allowed to contain either " +_						"a 'key' attribute OR a 'key-ref' attribute OR a <key> sub-element", entryEle)__			}_			if (hasKeyAttribute) {_				key = buildTypedStringValueForMap(entryEle.getAttribute(KEY_ATTRIBUTE), defaultKeyType, entryEle)__			}_			else if (hasKeyRefAttribute) {_				String refName = entryEle.getAttribute(KEY_REF_ATTRIBUTE)__				if (!StringUtils.hasText(refName)) {_					error("<entry> element contains empty 'key-ref' attribute", entryEle)__				}_				RuntimeBeanReference ref = new RuntimeBeanReference(refName)__				ref.setSource(extractSource(entryEle))__				key = ref__			}_			else if (keyEle != null) {_				key = parseKeyElement(keyEle, bd, defaultKeyType)__			}_			else {_				error("<entry> element must specify a key", entryEle)__			}__			_			Object value = null__			boolean hasValueAttribute = entryEle.hasAttribute(VALUE_ATTRIBUTE)__			boolean hasValueRefAttribute = entryEle.hasAttribute(VALUE_REF_ATTRIBUTE)__			boolean hasValueTypeAttribute = entryEle.hasAttribute(VALUE_TYPE_ATTRIBUTE)__			if ((hasValueAttribute && hasValueRefAttribute) ||_					((hasValueAttribute || hasValueRefAttribute)) && valueEle != null) {_				error("<entry> element is only allowed to contain either " +_						"'value' attribute OR 'value-ref' attribute OR <value> sub-element", entryEle)__			}_			if ((hasValueTypeAttribute && hasValueRefAttribute) ||_				(hasValueTypeAttribute && !hasValueAttribute) ||_					(hasValueTypeAttribute && valueEle != null)) {_				error("<entry> element is only allowed to contain a 'value-type' " +_						"attribute when it has a 'value' attribute", entryEle)__			}_			if (hasValueAttribute) {_				String valueType = entryEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__				if (!StringUtils.hasText(valueType)) {_					valueType = defaultValueType__				}_				value = buildTypedStringValueForMap(entryEle.getAttribute(VALUE_ATTRIBUTE), valueType, entryEle)__			}_			else if (hasValueRefAttribute) {_				String refName = entryEle.getAttribute(VALUE_REF_ATTRIBUTE)__				if (!StringUtils.hasText(refName)) {_					error("<entry> element contains empty 'value-ref' attribute", entryEle)__				}_				RuntimeBeanReference ref = new RuntimeBeanReference(refName)__				ref.setSource(extractSource(entryEle))__				value = ref__			}_			else if (valueEle != null) {_				value = parsePropertySubElement(valueEle, bd, defaultValueType)__			}_			else {_				error("<entry> element must specify a value", entryEle)__			}__			_			map.put(key, value)__		}__		return map__	};parse,a,map,element;public,map,object,object,parse,map,element,element,map,ele,nullable,bean,definition,bd,string,default,key,type,map,ele,get,attribute,string,default,value,type,map,ele,get,attribute,list,element,entry,eles,dom,utils,get,child,elements,by,tag,name,map,ele,managed,map,object,object,map,new,managed,map,entry,eles,size,map,set,source,extract,source,map,ele,map,set,key,type,name,default,key,type,map,set,value,type,name,default,value,type,map,set,merge,enabled,parse,merge,attribute,map,ele,for,element,entry,ele,entry,eles,node,list,entry,sub,nodes,entry,ele,get,child,nodes,element,key,ele,null,element,value,ele,null,for,int,j,0,j,entry,sub,nodes,get,length,j,node,node,entry,sub,nodes,item,j,if,node,instanceof,element,element,candidate,ele,element,node,if,node,name,equals,candidate,ele,if,key,ele,null,error,entry,element,is,only,allowed,to,contain,one,key,sub,element,entry,ele,else,key,ele,candidate,ele,else,if,node,name,equals,candidate,ele,else,if,value,ele,null,error,entry,element,must,not,contain,more,than,one,value,sub,element,entry,ele,else,value,ele,candidate,ele,object,key,null,boolean,has,key,attribute,entry,ele,has,attribute,boolean,has,key,ref,attribute,entry,ele,has,attribute,if,has,key,attribute,has,key,ref,attribute,has,key,attribute,has,key,ref,attribute,key,ele,null,error,entry,element,is,only,allowed,to,contain,either,a,key,attribute,or,a,key,ref,attribute,or,a,key,sub,element,entry,ele,if,has,key,attribute,key,build,typed,string,value,for,map,entry,ele,get,attribute,default,key,type,entry,ele,else,if,has,key,ref,attribute,string,ref,name,entry,ele,get,attribute,if,string,utils,has,text,ref,name,error,entry,element,contains,empty,key,ref,attribute,entry,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,entry,ele,key,ref,else,if,key,ele,null,key,parse,key,element,key,ele,bd,default,key,type,else,error,entry,element,must,specify,a,key,entry,ele,object,value,null,boolean,has,value,attribute,entry,ele,has,attribute,boolean,has,value,ref,attribute,entry,ele,has,attribute,boolean,has,value,type,attribute,entry,ele,has,attribute,if,has,value,attribute,has,value,ref,attribute,has,value,attribute,has,value,ref,attribute,value,ele,null,error,entry,element,is,only,allowed,to,contain,either,value,attribute,or,value,ref,attribute,or,value,sub,element,entry,ele,if,has,value,type,attribute,has,value,ref,attribute,has,value,type,attribute,has,value,attribute,has,value,type,attribute,value,ele,null,error,entry,element,is,only,allowed,to,contain,a,value,type,attribute,when,it,has,a,value,attribute,entry,ele,if,has,value,attribute,string,value,type,entry,ele,get,attribute,if,string,utils,has,text,value,type,value,type,default,value,type,value,build,typed,string,value,for,map,entry,ele,get,attribute,value,type,entry,ele,else,if,has,value,ref,attribute,string,ref,name,entry,ele,get,attribute,if,string,utils,has,text,ref,name,error,entry,element,contains,empty,value,ref,attribute,entry,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,entry,ele,value,ref,else,if,value,ele,null,value,parse,property,sub,element,value,ele,bd,default,value,type,else,error,entry,element,must,specify,a,value,entry,ele,map,put,key,value,return,map
BeanDefinitionParserDelegate -> public Map<Object, Object> parseMapElement(Element mapEle, @Nullable BeanDefinition bd);1503008029;Parse a map element.;public Map<Object, Object> parseMapElement(Element mapEle, @Nullable BeanDefinition bd) {_		String defaultKeyType = mapEle.getAttribute(KEY_TYPE_ATTRIBUTE)__		String defaultValueType = mapEle.getAttribute(VALUE_TYPE_ATTRIBUTE)___		List<Element> entryEles = DomUtils.getChildElementsByTagName(mapEle, ENTRY_ELEMENT)__		ManagedMap<Object, Object> map = new ManagedMap<>(entryEles.size())__		map.setSource(extractSource(mapEle))__		map.setKeyTypeName(defaultKeyType)__		map.setValueTypeName(defaultValueType)__		map.setMergeEnabled(parseMergeAttribute(mapEle))___		for (Element entryEle : entryEles) {_			_			_			NodeList entrySubNodes = entryEle.getChildNodes()__			Element keyEle = null__			Element valueEle = null__			for (int j = 0_ j < entrySubNodes.getLength()_ j++) {_				Node node = entrySubNodes.item(j)__				if (node instanceof Element) {_					Element candidateEle = (Element) node__					if (nodeNameEquals(candidateEle, KEY_ELEMENT)) {_						if (keyEle != null) {_							error("<entry> element is only allowed to contain one <key> sub-element", entryEle)__						}_						else {_							keyEle = candidateEle__						}_					}_					else {_						_						if (nodeNameEquals(candidateEle, DESCRIPTION_ELEMENT)) {_							_						}_						else if (valueEle != null) {_							error("<entry> element must not contain more than one value sub-element", entryEle)__						}_						else {_							valueEle = candidateEle__						}_					}_				}_			}__			_			Object key = null__			boolean hasKeyAttribute = entryEle.hasAttribute(KEY_ATTRIBUTE)__			boolean hasKeyRefAttribute = entryEle.hasAttribute(KEY_REF_ATTRIBUTE)__			if ((hasKeyAttribute && hasKeyRefAttribute) ||_					((hasKeyAttribute || hasKeyRefAttribute)) && keyEle != null) {_				error("<entry> element is only allowed to contain either " +_						"a 'key' attribute OR a 'key-ref' attribute OR a <key> sub-element", entryEle)__			}_			if (hasKeyAttribute) {_				key = buildTypedStringValueForMap(entryEle.getAttribute(KEY_ATTRIBUTE), defaultKeyType, entryEle)__			}_			else if (hasKeyRefAttribute) {_				String refName = entryEle.getAttribute(KEY_REF_ATTRIBUTE)__				if (!StringUtils.hasText(refName)) {_					error("<entry> element contains empty 'key-ref' attribute", entryEle)__				}_				RuntimeBeanReference ref = new RuntimeBeanReference(refName)__				ref.setSource(extractSource(entryEle))__				key = ref__			}_			else if (keyEle != null) {_				key = parseKeyElement(keyEle, bd, defaultKeyType)__			}_			else {_				error("<entry> element must specify a key", entryEle)__			}__			_			Object value = null__			boolean hasValueAttribute = entryEle.hasAttribute(VALUE_ATTRIBUTE)__			boolean hasValueRefAttribute = entryEle.hasAttribute(VALUE_REF_ATTRIBUTE)__			boolean hasValueTypeAttribute = entryEle.hasAttribute(VALUE_TYPE_ATTRIBUTE)__			if ((hasValueAttribute && hasValueRefAttribute) ||_					((hasValueAttribute || hasValueRefAttribute)) && valueEle != null) {_				error("<entry> element is only allowed to contain either " +_						"'value' attribute OR 'value-ref' attribute OR <value> sub-element", entryEle)__			}_			if ((hasValueTypeAttribute && hasValueRefAttribute) ||_				(hasValueTypeAttribute && !hasValueAttribute) ||_					(hasValueTypeAttribute && valueEle != null)) {_				error("<entry> element is only allowed to contain a 'value-type' " +_						"attribute when it has a 'value' attribute", entryEle)__			}_			if (hasValueAttribute) {_				String valueType = entryEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__				if (!StringUtils.hasText(valueType)) {_					valueType = defaultValueType__				}_				value = buildTypedStringValueForMap(entryEle.getAttribute(VALUE_ATTRIBUTE), valueType, entryEle)__			}_			else if (hasValueRefAttribute) {_				String refName = entryEle.getAttribute(VALUE_REF_ATTRIBUTE)__				if (!StringUtils.hasText(refName)) {_					error("<entry> element contains empty 'value-ref' attribute", entryEle)__				}_				RuntimeBeanReference ref = new RuntimeBeanReference(refName)__				ref.setSource(extractSource(entryEle))__				value = ref__			}_			else if (valueEle != null) {_				value = parsePropertySubElement(valueEle, bd, defaultValueType)__			}_			else {_				error("<entry> element must specify a value", entryEle)__			}__			_			map.put(key, value)__		}__		return map__	};parse,a,map,element;public,map,object,object,parse,map,element,element,map,ele,nullable,bean,definition,bd,string,default,key,type,map,ele,get,attribute,string,default,value,type,map,ele,get,attribute,list,element,entry,eles,dom,utils,get,child,elements,by,tag,name,map,ele,managed,map,object,object,map,new,managed,map,entry,eles,size,map,set,source,extract,source,map,ele,map,set,key,type,name,default,key,type,map,set,value,type,name,default,value,type,map,set,merge,enabled,parse,merge,attribute,map,ele,for,element,entry,ele,entry,eles,node,list,entry,sub,nodes,entry,ele,get,child,nodes,element,key,ele,null,element,value,ele,null,for,int,j,0,j,entry,sub,nodes,get,length,j,node,node,entry,sub,nodes,item,j,if,node,instanceof,element,element,candidate,ele,element,node,if,node,name,equals,candidate,ele,if,key,ele,null,error,entry,element,is,only,allowed,to,contain,one,key,sub,element,entry,ele,else,key,ele,candidate,ele,else,if,node,name,equals,candidate,ele,else,if,value,ele,null,error,entry,element,must,not,contain,more,than,one,value,sub,element,entry,ele,else,value,ele,candidate,ele,object,key,null,boolean,has,key,attribute,entry,ele,has,attribute,boolean,has,key,ref,attribute,entry,ele,has,attribute,if,has,key,attribute,has,key,ref,attribute,has,key,attribute,has,key,ref,attribute,key,ele,null,error,entry,element,is,only,allowed,to,contain,either,a,key,attribute,or,a,key,ref,attribute,or,a,key,sub,element,entry,ele,if,has,key,attribute,key,build,typed,string,value,for,map,entry,ele,get,attribute,default,key,type,entry,ele,else,if,has,key,ref,attribute,string,ref,name,entry,ele,get,attribute,if,string,utils,has,text,ref,name,error,entry,element,contains,empty,key,ref,attribute,entry,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,entry,ele,key,ref,else,if,key,ele,null,key,parse,key,element,key,ele,bd,default,key,type,else,error,entry,element,must,specify,a,key,entry,ele,object,value,null,boolean,has,value,attribute,entry,ele,has,attribute,boolean,has,value,ref,attribute,entry,ele,has,attribute,boolean,has,value,type,attribute,entry,ele,has,attribute,if,has,value,attribute,has,value,ref,attribute,has,value,attribute,has,value,ref,attribute,value,ele,null,error,entry,element,is,only,allowed,to,contain,either,value,attribute,or,value,ref,attribute,or,value,sub,element,entry,ele,if,has,value,type,attribute,has,value,ref,attribute,has,value,type,attribute,has,value,attribute,has,value,type,attribute,value,ele,null,error,entry,element,is,only,allowed,to,contain,a,value,type,attribute,when,it,has,a,value,attribute,entry,ele,if,has,value,attribute,string,value,type,entry,ele,get,attribute,if,string,utils,has,text,value,type,value,type,default,value,type,value,build,typed,string,value,for,map,entry,ele,get,attribute,value,type,entry,ele,else,if,has,value,ref,attribute,string,ref,name,entry,ele,get,attribute,if,string,utils,has,text,ref,name,error,entry,element,contains,empty,value,ref,attribute,entry,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,entry,ele,value,ref,else,if,value,ele,null,value,parse,property,sub,element,value,ele,bd,default,value,type,else,error,entry,element,must,specify,a,value,entry,ele,map,put,key,value,return,map
BeanDefinitionParserDelegate -> public Map<Object, Object> parseMapElement(Element mapEle, @Nullable BeanDefinition bd);1519513303;Parse a map element.;public Map<Object, Object> parseMapElement(Element mapEle, @Nullable BeanDefinition bd) {_		String defaultKeyType = mapEle.getAttribute(KEY_TYPE_ATTRIBUTE)__		String defaultValueType = mapEle.getAttribute(VALUE_TYPE_ATTRIBUTE)___		List<Element> entryEles = DomUtils.getChildElementsByTagName(mapEle, ENTRY_ELEMENT)__		ManagedMap<Object, Object> map = new ManagedMap<>(entryEles.size())__		map.setSource(extractSource(mapEle))__		map.setKeyTypeName(defaultKeyType)__		map.setValueTypeName(defaultValueType)__		map.setMergeEnabled(parseMergeAttribute(mapEle))___		for (Element entryEle : entryEles) {_			_			_			NodeList entrySubNodes = entryEle.getChildNodes()__			Element keyEle = null__			Element valueEle = null__			for (int j = 0_ j < entrySubNodes.getLength()_ j++) {_				Node node = entrySubNodes.item(j)__				if (node instanceof Element) {_					Element candidateEle = (Element) node__					if (nodeNameEquals(candidateEle, KEY_ELEMENT)) {_						if (keyEle != null) {_							error("<entry> element is only allowed to contain one <key> sub-element", entryEle)__						}_						else {_							keyEle = candidateEle__						}_					}_					else {_						_						if (nodeNameEquals(candidateEle, DESCRIPTION_ELEMENT)) {_							_						}_						else if (valueEle != null) {_							error("<entry> element must not contain more than one value sub-element", entryEle)__						}_						else {_							valueEle = candidateEle__						}_					}_				}_			}__			_			Object key = null__			boolean hasKeyAttribute = entryEle.hasAttribute(KEY_ATTRIBUTE)__			boolean hasKeyRefAttribute = entryEle.hasAttribute(KEY_REF_ATTRIBUTE)__			if ((hasKeyAttribute && hasKeyRefAttribute) ||_					(hasKeyAttribute || hasKeyRefAttribute) && keyEle != null) {_				error("<entry> element is only allowed to contain either " +_						"a 'key' attribute OR a 'key-ref' attribute OR a <key> sub-element", entryEle)__			}_			if (hasKeyAttribute) {_				key = buildTypedStringValueForMap(entryEle.getAttribute(KEY_ATTRIBUTE), defaultKeyType, entryEle)__			}_			else if (hasKeyRefAttribute) {_				String refName = entryEle.getAttribute(KEY_REF_ATTRIBUTE)__				if (!StringUtils.hasText(refName)) {_					error("<entry> element contains empty 'key-ref' attribute", entryEle)__				}_				RuntimeBeanReference ref = new RuntimeBeanReference(refName)__				ref.setSource(extractSource(entryEle))__				key = ref__			}_			else if (keyEle != null) {_				key = parseKeyElement(keyEle, bd, defaultKeyType)__			}_			else {_				error("<entry> element must specify a key", entryEle)__			}__			_			Object value = null__			boolean hasValueAttribute = entryEle.hasAttribute(VALUE_ATTRIBUTE)__			boolean hasValueRefAttribute = entryEle.hasAttribute(VALUE_REF_ATTRIBUTE)__			boolean hasValueTypeAttribute = entryEle.hasAttribute(VALUE_TYPE_ATTRIBUTE)__			if ((hasValueAttribute && hasValueRefAttribute) ||_					(hasValueAttribute || hasValueRefAttribute) && valueEle != null) {_				error("<entry> element is only allowed to contain either " +_						"'value' attribute OR 'value-ref' attribute OR <value> sub-element", entryEle)__			}_			if ((hasValueTypeAttribute && hasValueRefAttribute) ||_				(hasValueTypeAttribute && !hasValueAttribute) ||_					(hasValueTypeAttribute && valueEle != null)) {_				error("<entry> element is only allowed to contain a 'value-type' " +_						"attribute when it has a 'value' attribute", entryEle)__			}_			if (hasValueAttribute) {_				String valueType = entryEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__				if (!StringUtils.hasText(valueType)) {_					valueType = defaultValueType__				}_				value = buildTypedStringValueForMap(entryEle.getAttribute(VALUE_ATTRIBUTE), valueType, entryEle)__			}_			else if (hasValueRefAttribute) {_				String refName = entryEle.getAttribute(VALUE_REF_ATTRIBUTE)__				if (!StringUtils.hasText(refName)) {_					error("<entry> element contains empty 'value-ref' attribute", entryEle)__				}_				RuntimeBeanReference ref = new RuntimeBeanReference(refName)__				ref.setSource(extractSource(entryEle))__				value = ref__			}_			else if (valueEle != null) {_				value = parsePropertySubElement(valueEle, bd, defaultValueType)__			}_			else {_				error("<entry> element must specify a value", entryEle)__			}__			_			map.put(key, value)__		}__		return map__	};parse,a,map,element;public,map,object,object,parse,map,element,element,map,ele,nullable,bean,definition,bd,string,default,key,type,map,ele,get,attribute,string,default,value,type,map,ele,get,attribute,list,element,entry,eles,dom,utils,get,child,elements,by,tag,name,map,ele,managed,map,object,object,map,new,managed,map,entry,eles,size,map,set,source,extract,source,map,ele,map,set,key,type,name,default,key,type,map,set,value,type,name,default,value,type,map,set,merge,enabled,parse,merge,attribute,map,ele,for,element,entry,ele,entry,eles,node,list,entry,sub,nodes,entry,ele,get,child,nodes,element,key,ele,null,element,value,ele,null,for,int,j,0,j,entry,sub,nodes,get,length,j,node,node,entry,sub,nodes,item,j,if,node,instanceof,element,element,candidate,ele,element,node,if,node,name,equals,candidate,ele,if,key,ele,null,error,entry,element,is,only,allowed,to,contain,one,key,sub,element,entry,ele,else,key,ele,candidate,ele,else,if,node,name,equals,candidate,ele,else,if,value,ele,null,error,entry,element,must,not,contain,more,than,one,value,sub,element,entry,ele,else,value,ele,candidate,ele,object,key,null,boolean,has,key,attribute,entry,ele,has,attribute,boolean,has,key,ref,attribute,entry,ele,has,attribute,if,has,key,attribute,has,key,ref,attribute,has,key,attribute,has,key,ref,attribute,key,ele,null,error,entry,element,is,only,allowed,to,contain,either,a,key,attribute,or,a,key,ref,attribute,or,a,key,sub,element,entry,ele,if,has,key,attribute,key,build,typed,string,value,for,map,entry,ele,get,attribute,default,key,type,entry,ele,else,if,has,key,ref,attribute,string,ref,name,entry,ele,get,attribute,if,string,utils,has,text,ref,name,error,entry,element,contains,empty,key,ref,attribute,entry,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,entry,ele,key,ref,else,if,key,ele,null,key,parse,key,element,key,ele,bd,default,key,type,else,error,entry,element,must,specify,a,key,entry,ele,object,value,null,boolean,has,value,attribute,entry,ele,has,attribute,boolean,has,value,ref,attribute,entry,ele,has,attribute,boolean,has,value,type,attribute,entry,ele,has,attribute,if,has,value,attribute,has,value,ref,attribute,has,value,attribute,has,value,ref,attribute,value,ele,null,error,entry,element,is,only,allowed,to,contain,either,value,attribute,or,value,ref,attribute,or,value,sub,element,entry,ele,if,has,value,type,attribute,has,value,ref,attribute,has,value,type,attribute,has,value,attribute,has,value,type,attribute,value,ele,null,error,entry,element,is,only,allowed,to,contain,a,value,type,attribute,when,it,has,a,value,attribute,entry,ele,if,has,value,attribute,string,value,type,entry,ele,get,attribute,if,string,utils,has,text,value,type,value,type,default,value,type,value,build,typed,string,value,for,map,entry,ele,get,attribute,value,type,entry,ele,else,if,has,value,ref,attribute,string,ref,name,entry,ele,get,attribute,if,string,utils,has,text,ref,name,error,entry,element,contains,empty,value,ref,attribute,entry,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,entry,ele,value,ref,else,if,value,ele,null,value,parse,property,sub,element,value,ele,bd,default,value,type,else,error,entry,element,must,specify,a,value,entry,ele,map,put,key,value,return,map
BeanDefinitionParserDelegate -> public Map<Object, Object> parseMapElement(Element mapEle, @Nullable BeanDefinition bd);1530174524;Parse a map element.;public Map<Object, Object> parseMapElement(Element mapEle, @Nullable BeanDefinition bd) {_		String defaultKeyType = mapEle.getAttribute(KEY_TYPE_ATTRIBUTE)__		String defaultValueType = mapEle.getAttribute(VALUE_TYPE_ATTRIBUTE)___		List<Element> entryEles = DomUtils.getChildElementsByTagName(mapEle, ENTRY_ELEMENT)__		ManagedMap<Object, Object> map = new ManagedMap<>(entryEles.size())__		map.setSource(extractSource(mapEle))__		map.setKeyTypeName(defaultKeyType)__		map.setValueTypeName(defaultValueType)__		map.setMergeEnabled(parseMergeAttribute(mapEle))___		for (Element entryEle : entryEles) {_			_			_			NodeList entrySubNodes = entryEle.getChildNodes()__			Element keyEle = null__			Element valueEle = null__			for (int j = 0_ j < entrySubNodes.getLength()_ j++) {_				Node node = entrySubNodes.item(j)__				if (node instanceof Element) {_					Element candidateEle = (Element) node__					if (nodeNameEquals(candidateEle, KEY_ELEMENT)) {_						if (keyEle != null) {_							error("<entry> element is only allowed to contain one <key> sub-element", entryEle)__						}_						else {_							keyEle = candidateEle__						}_					}_					else {_						_						if (nodeNameEquals(candidateEle, DESCRIPTION_ELEMENT)) {_							_						}_						else if (valueEle != null) {_							error("<entry> element must not contain more than one value sub-element", entryEle)__						}_						else {_							valueEle = candidateEle__						}_					}_				}_			}__			_			Object key = null__			boolean hasKeyAttribute = entryEle.hasAttribute(KEY_ATTRIBUTE)__			boolean hasKeyRefAttribute = entryEle.hasAttribute(KEY_REF_ATTRIBUTE)__			if ((hasKeyAttribute && hasKeyRefAttribute) ||_					(hasKeyAttribute || hasKeyRefAttribute) && keyEle != null) {_				error("<entry> element is only allowed to contain either " +_						"a 'key' attribute OR a 'key-ref' attribute OR a <key> sub-element", entryEle)__			}_			if (hasKeyAttribute) {_				key = buildTypedStringValueForMap(entryEle.getAttribute(KEY_ATTRIBUTE), defaultKeyType, entryEle)__			}_			else if (hasKeyRefAttribute) {_				String refName = entryEle.getAttribute(KEY_REF_ATTRIBUTE)__				if (!StringUtils.hasText(refName)) {_					error("<entry> element contains empty 'key-ref' attribute", entryEle)__				}_				RuntimeBeanReference ref = new RuntimeBeanReference(refName)__				ref.setSource(extractSource(entryEle))__				key = ref__			}_			else if (keyEle != null) {_				key = parseKeyElement(keyEle, bd, defaultKeyType)__			}_			else {_				error("<entry> element must specify a key", entryEle)__			}__			_			Object value = null__			boolean hasValueAttribute = entryEle.hasAttribute(VALUE_ATTRIBUTE)__			boolean hasValueRefAttribute = entryEle.hasAttribute(VALUE_REF_ATTRIBUTE)__			boolean hasValueTypeAttribute = entryEle.hasAttribute(VALUE_TYPE_ATTRIBUTE)__			if ((hasValueAttribute && hasValueRefAttribute) ||_					(hasValueAttribute || hasValueRefAttribute) && valueEle != null) {_				error("<entry> element is only allowed to contain either " +_						"'value' attribute OR 'value-ref' attribute OR <value> sub-element", entryEle)__			}_			if ((hasValueTypeAttribute && hasValueRefAttribute) ||_				(hasValueTypeAttribute && !hasValueAttribute) ||_					(hasValueTypeAttribute && valueEle != null)) {_				error("<entry> element is only allowed to contain a 'value-type' " +_						"attribute when it has a 'value' attribute", entryEle)__			}_			if (hasValueAttribute) {_				String valueType = entryEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__				if (!StringUtils.hasText(valueType)) {_					valueType = defaultValueType__				}_				value = buildTypedStringValueForMap(entryEle.getAttribute(VALUE_ATTRIBUTE), valueType, entryEle)__			}_			else if (hasValueRefAttribute) {_				String refName = entryEle.getAttribute(VALUE_REF_ATTRIBUTE)__				if (!StringUtils.hasText(refName)) {_					error("<entry> element contains empty 'value-ref' attribute", entryEle)__				}_				RuntimeBeanReference ref = new RuntimeBeanReference(refName)__				ref.setSource(extractSource(entryEle))__				value = ref__			}_			else if (valueEle != null) {_				value = parsePropertySubElement(valueEle, bd, defaultValueType)__			}_			else {_				error("<entry> element must specify a value", entryEle)__			}__			_			map.put(key, value)__		}__		return map__	};parse,a,map,element;public,map,object,object,parse,map,element,element,map,ele,nullable,bean,definition,bd,string,default,key,type,map,ele,get,attribute,string,default,value,type,map,ele,get,attribute,list,element,entry,eles,dom,utils,get,child,elements,by,tag,name,map,ele,managed,map,object,object,map,new,managed,map,entry,eles,size,map,set,source,extract,source,map,ele,map,set,key,type,name,default,key,type,map,set,value,type,name,default,value,type,map,set,merge,enabled,parse,merge,attribute,map,ele,for,element,entry,ele,entry,eles,node,list,entry,sub,nodes,entry,ele,get,child,nodes,element,key,ele,null,element,value,ele,null,for,int,j,0,j,entry,sub,nodes,get,length,j,node,node,entry,sub,nodes,item,j,if,node,instanceof,element,element,candidate,ele,element,node,if,node,name,equals,candidate,ele,if,key,ele,null,error,entry,element,is,only,allowed,to,contain,one,key,sub,element,entry,ele,else,key,ele,candidate,ele,else,if,node,name,equals,candidate,ele,else,if,value,ele,null,error,entry,element,must,not,contain,more,than,one,value,sub,element,entry,ele,else,value,ele,candidate,ele,object,key,null,boolean,has,key,attribute,entry,ele,has,attribute,boolean,has,key,ref,attribute,entry,ele,has,attribute,if,has,key,attribute,has,key,ref,attribute,has,key,attribute,has,key,ref,attribute,key,ele,null,error,entry,element,is,only,allowed,to,contain,either,a,key,attribute,or,a,key,ref,attribute,or,a,key,sub,element,entry,ele,if,has,key,attribute,key,build,typed,string,value,for,map,entry,ele,get,attribute,default,key,type,entry,ele,else,if,has,key,ref,attribute,string,ref,name,entry,ele,get,attribute,if,string,utils,has,text,ref,name,error,entry,element,contains,empty,key,ref,attribute,entry,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,entry,ele,key,ref,else,if,key,ele,null,key,parse,key,element,key,ele,bd,default,key,type,else,error,entry,element,must,specify,a,key,entry,ele,object,value,null,boolean,has,value,attribute,entry,ele,has,attribute,boolean,has,value,ref,attribute,entry,ele,has,attribute,boolean,has,value,type,attribute,entry,ele,has,attribute,if,has,value,attribute,has,value,ref,attribute,has,value,attribute,has,value,ref,attribute,value,ele,null,error,entry,element,is,only,allowed,to,contain,either,value,attribute,or,value,ref,attribute,or,value,sub,element,entry,ele,if,has,value,type,attribute,has,value,ref,attribute,has,value,type,attribute,has,value,attribute,has,value,type,attribute,value,ele,null,error,entry,element,is,only,allowed,to,contain,a,value,type,attribute,when,it,has,a,value,attribute,entry,ele,if,has,value,attribute,string,value,type,entry,ele,get,attribute,if,string,utils,has,text,value,type,value,type,default,value,type,value,build,typed,string,value,for,map,entry,ele,get,attribute,value,type,entry,ele,else,if,has,value,ref,attribute,string,ref,name,entry,ele,get,attribute,if,string,utils,has,text,ref,name,error,entry,element,contains,empty,value,ref,attribute,entry,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,entry,ele,value,ref,else,if,value,ele,null,value,parse,property,sub,element,value,ele,bd,default,value,type,else,error,entry,element,must,specify,a,value,entry,ele,map,put,key,value,return,map
BeanDefinitionParserDelegate -> public Map<Object, Object> parseMapElement(Element mapEle, @Nullable BeanDefinition bd);1530190293;Parse a map element.;public Map<Object, Object> parseMapElement(Element mapEle, @Nullable BeanDefinition bd) {_		String defaultKeyType = mapEle.getAttribute(KEY_TYPE_ATTRIBUTE)__		String defaultValueType = mapEle.getAttribute(VALUE_TYPE_ATTRIBUTE)___		List<Element> entryEles = DomUtils.getChildElementsByTagName(mapEle, ENTRY_ELEMENT)__		ManagedMap<Object, Object> map = new ManagedMap<>(entryEles.size())__		map.setSource(extractSource(mapEle))__		map.setKeyTypeName(defaultKeyType)__		map.setValueTypeName(defaultValueType)__		map.setMergeEnabled(parseMergeAttribute(mapEle))___		for (Element entryEle : entryEles) {_			_			_			NodeList entrySubNodes = entryEle.getChildNodes()__			Element keyEle = null__			Element valueEle = null__			for (int j = 0_ j < entrySubNodes.getLength()_ j++) {_				Node node = entrySubNodes.item(j)__				if (node instanceof Element) {_					Element candidateEle = (Element) node__					if (nodeNameEquals(candidateEle, KEY_ELEMENT)) {_						if (keyEle != null) {_							error("<entry> element is only allowed to contain one <key> sub-element", entryEle)__						}_						else {_							keyEle = candidateEle__						}_					}_					else {_						_						if (nodeNameEquals(candidateEle, DESCRIPTION_ELEMENT)) {_							_						}_						else if (valueEle != null) {_							error("<entry> element must not contain more than one value sub-element", entryEle)__						}_						else {_							valueEle = candidateEle__						}_					}_				}_			}__			_			Object key = null__			boolean hasKeyAttribute = entryEle.hasAttribute(KEY_ATTRIBUTE)__			boolean hasKeyRefAttribute = entryEle.hasAttribute(KEY_REF_ATTRIBUTE)__			if ((hasKeyAttribute && hasKeyRefAttribute) ||_					(hasKeyAttribute || hasKeyRefAttribute) && keyEle != null) {_				error("<entry> element is only allowed to contain either " +_						"a 'key' attribute OR a 'key-ref' attribute OR a <key> sub-element", entryEle)__			}_			if (hasKeyAttribute) {_				key = buildTypedStringValueForMap(entryEle.getAttribute(KEY_ATTRIBUTE), defaultKeyType, entryEle)__			}_			else if (hasKeyRefAttribute) {_				String refName = entryEle.getAttribute(KEY_REF_ATTRIBUTE)__				if (!StringUtils.hasText(refName)) {_					error("<entry> element contains empty 'key-ref' attribute", entryEle)__				}_				RuntimeBeanReference ref = new RuntimeBeanReference(refName)__				ref.setSource(extractSource(entryEle))__				key = ref__			}_			else if (keyEle != null) {_				key = parseKeyElement(keyEle, bd, defaultKeyType)__			}_			else {_				error("<entry> element must specify a key", entryEle)__			}__			_			Object value = null__			boolean hasValueAttribute = entryEle.hasAttribute(VALUE_ATTRIBUTE)__			boolean hasValueRefAttribute = entryEle.hasAttribute(VALUE_REF_ATTRIBUTE)__			boolean hasValueTypeAttribute = entryEle.hasAttribute(VALUE_TYPE_ATTRIBUTE)__			if ((hasValueAttribute && hasValueRefAttribute) ||_					(hasValueAttribute || hasValueRefAttribute) && valueEle != null) {_				error("<entry> element is only allowed to contain either " +_						"'value' attribute OR 'value-ref' attribute OR <value> sub-element", entryEle)__			}_			if ((hasValueTypeAttribute && hasValueRefAttribute) ||_				(hasValueTypeAttribute && !hasValueAttribute) ||_					(hasValueTypeAttribute && valueEle != null)) {_				error("<entry> element is only allowed to contain a 'value-type' " +_						"attribute when it has a 'value' attribute", entryEle)__			}_			if (hasValueAttribute) {_				String valueType = entryEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__				if (!StringUtils.hasText(valueType)) {_					valueType = defaultValueType__				}_				value = buildTypedStringValueForMap(entryEle.getAttribute(VALUE_ATTRIBUTE), valueType, entryEle)__			}_			else if (hasValueRefAttribute) {_				String refName = entryEle.getAttribute(VALUE_REF_ATTRIBUTE)__				if (!StringUtils.hasText(refName)) {_					error("<entry> element contains empty 'value-ref' attribute", entryEle)__				}_				RuntimeBeanReference ref = new RuntimeBeanReference(refName)__				ref.setSource(extractSource(entryEle))__				value = ref__			}_			else if (valueEle != null) {_				value = parsePropertySubElement(valueEle, bd, defaultValueType)__			}_			else {_				error("<entry> element must specify a value", entryEle)__			}__			_			map.put(key, value)__		}__		return map__	};parse,a,map,element;public,map,object,object,parse,map,element,element,map,ele,nullable,bean,definition,bd,string,default,key,type,map,ele,get,attribute,string,default,value,type,map,ele,get,attribute,list,element,entry,eles,dom,utils,get,child,elements,by,tag,name,map,ele,managed,map,object,object,map,new,managed,map,entry,eles,size,map,set,source,extract,source,map,ele,map,set,key,type,name,default,key,type,map,set,value,type,name,default,value,type,map,set,merge,enabled,parse,merge,attribute,map,ele,for,element,entry,ele,entry,eles,node,list,entry,sub,nodes,entry,ele,get,child,nodes,element,key,ele,null,element,value,ele,null,for,int,j,0,j,entry,sub,nodes,get,length,j,node,node,entry,sub,nodes,item,j,if,node,instanceof,element,element,candidate,ele,element,node,if,node,name,equals,candidate,ele,if,key,ele,null,error,entry,element,is,only,allowed,to,contain,one,key,sub,element,entry,ele,else,key,ele,candidate,ele,else,if,node,name,equals,candidate,ele,else,if,value,ele,null,error,entry,element,must,not,contain,more,than,one,value,sub,element,entry,ele,else,value,ele,candidate,ele,object,key,null,boolean,has,key,attribute,entry,ele,has,attribute,boolean,has,key,ref,attribute,entry,ele,has,attribute,if,has,key,attribute,has,key,ref,attribute,has,key,attribute,has,key,ref,attribute,key,ele,null,error,entry,element,is,only,allowed,to,contain,either,a,key,attribute,or,a,key,ref,attribute,or,a,key,sub,element,entry,ele,if,has,key,attribute,key,build,typed,string,value,for,map,entry,ele,get,attribute,default,key,type,entry,ele,else,if,has,key,ref,attribute,string,ref,name,entry,ele,get,attribute,if,string,utils,has,text,ref,name,error,entry,element,contains,empty,key,ref,attribute,entry,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,entry,ele,key,ref,else,if,key,ele,null,key,parse,key,element,key,ele,bd,default,key,type,else,error,entry,element,must,specify,a,key,entry,ele,object,value,null,boolean,has,value,attribute,entry,ele,has,attribute,boolean,has,value,ref,attribute,entry,ele,has,attribute,boolean,has,value,type,attribute,entry,ele,has,attribute,if,has,value,attribute,has,value,ref,attribute,has,value,attribute,has,value,ref,attribute,value,ele,null,error,entry,element,is,only,allowed,to,contain,either,value,attribute,or,value,ref,attribute,or,value,sub,element,entry,ele,if,has,value,type,attribute,has,value,ref,attribute,has,value,type,attribute,has,value,attribute,has,value,type,attribute,value,ele,null,error,entry,element,is,only,allowed,to,contain,a,value,type,attribute,when,it,has,a,value,attribute,entry,ele,if,has,value,attribute,string,value,type,entry,ele,get,attribute,if,string,utils,has,text,value,type,value,type,default,value,type,value,build,typed,string,value,for,map,entry,ele,get,attribute,value,type,entry,ele,else,if,has,value,ref,attribute,string,ref,name,entry,ele,get,attribute,if,string,utils,has,text,ref,name,error,entry,element,contains,empty,value,ref,attribute,entry,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,entry,ele,value,ref,else,if,value,ele,null,value,parse,property,sub,element,value,ele,bd,default,value,type,else,error,entry,element,must,specify,a,value,entry,ele,map,put,key,value,return,map
BeanDefinitionParserDelegate -> public Map<Object, Object> parseMapElement(Element mapEle, @Nullable BeanDefinition bd);1532706365;Parse a map element.;public Map<Object, Object> parseMapElement(Element mapEle, @Nullable BeanDefinition bd) {_		String defaultKeyType = mapEle.getAttribute(KEY_TYPE_ATTRIBUTE)__		String defaultValueType = mapEle.getAttribute(VALUE_TYPE_ATTRIBUTE)___		List<Element> entryEles = DomUtils.getChildElementsByTagName(mapEle, ENTRY_ELEMENT)__		ManagedMap<Object, Object> map = new ManagedMap<>(entryEles.size())__		map.setSource(extractSource(mapEle))__		map.setKeyTypeName(defaultKeyType)__		map.setValueTypeName(defaultValueType)__		map.setMergeEnabled(parseMergeAttribute(mapEle))___		for (Element entryEle : entryEles) {_			_			_			NodeList entrySubNodes = entryEle.getChildNodes()__			Element keyEle = null__			Element valueEle = null__			for (int j = 0_ j < entrySubNodes.getLength()_ j++) {_				Node node = entrySubNodes.item(j)__				if (node instanceof Element) {_					Element candidateEle = (Element) node__					if (nodeNameEquals(candidateEle, KEY_ELEMENT)) {_						if (keyEle != null) {_							error("<entry> element is only allowed to contain one <key> sub-element", entryEle)__						}_						else {_							keyEle = candidateEle__						}_					}_					else {_						_						if (nodeNameEquals(candidateEle, DESCRIPTION_ELEMENT)) {_							_						}_						else if (valueEle != null) {_							error("<entry> element must not contain more than one value sub-element", entryEle)__						}_						else {_							valueEle = candidateEle__						}_					}_				}_			}__			_			Object key = null__			boolean hasKeyAttribute = entryEle.hasAttribute(KEY_ATTRIBUTE)__			boolean hasKeyRefAttribute = entryEle.hasAttribute(KEY_REF_ATTRIBUTE)__			if ((hasKeyAttribute && hasKeyRefAttribute) ||_					(hasKeyAttribute || hasKeyRefAttribute) && keyEle != null) {_				error("<entry> element is only allowed to contain either " +_						"a 'key' attribute OR a 'key-ref' attribute OR a <key> sub-element", entryEle)__			}_			if (hasKeyAttribute) {_				key = buildTypedStringValueForMap(entryEle.getAttribute(KEY_ATTRIBUTE), defaultKeyType, entryEle)__			}_			else if (hasKeyRefAttribute) {_				String refName = entryEle.getAttribute(KEY_REF_ATTRIBUTE)__				if (!StringUtils.hasText(refName)) {_					error("<entry> element contains empty 'key-ref' attribute", entryEle)__				}_				RuntimeBeanReference ref = new RuntimeBeanReference(refName)__				ref.setSource(extractSource(entryEle))__				key = ref__			}_			else if (keyEle != null) {_				key = parseKeyElement(keyEle, bd, defaultKeyType)__			}_			else {_				error("<entry> element must specify a key", entryEle)__			}__			_			Object value = null__			boolean hasValueAttribute = entryEle.hasAttribute(VALUE_ATTRIBUTE)__			boolean hasValueRefAttribute = entryEle.hasAttribute(VALUE_REF_ATTRIBUTE)__			boolean hasValueTypeAttribute = entryEle.hasAttribute(VALUE_TYPE_ATTRIBUTE)__			if ((hasValueAttribute && hasValueRefAttribute) ||_					(hasValueAttribute || hasValueRefAttribute) && valueEle != null) {_				error("<entry> element is only allowed to contain either " +_						"'value' attribute OR 'value-ref' attribute OR <value> sub-element", entryEle)__			}_			if ((hasValueTypeAttribute && hasValueRefAttribute) ||_				(hasValueTypeAttribute && !hasValueAttribute) ||_					(hasValueTypeAttribute && valueEle != null)) {_				error("<entry> element is only allowed to contain a 'value-type' " +_						"attribute when it has a 'value' attribute", entryEle)__			}_			if (hasValueAttribute) {_				String valueType = entryEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__				if (!StringUtils.hasText(valueType)) {_					valueType = defaultValueType__				}_				value = buildTypedStringValueForMap(entryEle.getAttribute(VALUE_ATTRIBUTE), valueType, entryEle)__			}_			else if (hasValueRefAttribute) {_				String refName = entryEle.getAttribute(VALUE_REF_ATTRIBUTE)__				if (!StringUtils.hasText(refName)) {_					error("<entry> element contains empty 'value-ref' attribute", entryEle)__				}_				RuntimeBeanReference ref = new RuntimeBeanReference(refName)__				ref.setSource(extractSource(entryEle))__				value = ref__			}_			else if (valueEle != null) {_				value = parsePropertySubElement(valueEle, bd, defaultValueType)__			}_			else {_				error("<entry> element must specify a value", entryEle)__			}__			_			map.put(key, value)__		}__		return map__	};parse,a,map,element;public,map,object,object,parse,map,element,element,map,ele,nullable,bean,definition,bd,string,default,key,type,map,ele,get,attribute,string,default,value,type,map,ele,get,attribute,list,element,entry,eles,dom,utils,get,child,elements,by,tag,name,map,ele,managed,map,object,object,map,new,managed,map,entry,eles,size,map,set,source,extract,source,map,ele,map,set,key,type,name,default,key,type,map,set,value,type,name,default,value,type,map,set,merge,enabled,parse,merge,attribute,map,ele,for,element,entry,ele,entry,eles,node,list,entry,sub,nodes,entry,ele,get,child,nodes,element,key,ele,null,element,value,ele,null,for,int,j,0,j,entry,sub,nodes,get,length,j,node,node,entry,sub,nodes,item,j,if,node,instanceof,element,element,candidate,ele,element,node,if,node,name,equals,candidate,ele,if,key,ele,null,error,entry,element,is,only,allowed,to,contain,one,key,sub,element,entry,ele,else,key,ele,candidate,ele,else,if,node,name,equals,candidate,ele,else,if,value,ele,null,error,entry,element,must,not,contain,more,than,one,value,sub,element,entry,ele,else,value,ele,candidate,ele,object,key,null,boolean,has,key,attribute,entry,ele,has,attribute,boolean,has,key,ref,attribute,entry,ele,has,attribute,if,has,key,attribute,has,key,ref,attribute,has,key,attribute,has,key,ref,attribute,key,ele,null,error,entry,element,is,only,allowed,to,contain,either,a,key,attribute,or,a,key,ref,attribute,or,a,key,sub,element,entry,ele,if,has,key,attribute,key,build,typed,string,value,for,map,entry,ele,get,attribute,default,key,type,entry,ele,else,if,has,key,ref,attribute,string,ref,name,entry,ele,get,attribute,if,string,utils,has,text,ref,name,error,entry,element,contains,empty,key,ref,attribute,entry,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,entry,ele,key,ref,else,if,key,ele,null,key,parse,key,element,key,ele,bd,default,key,type,else,error,entry,element,must,specify,a,key,entry,ele,object,value,null,boolean,has,value,attribute,entry,ele,has,attribute,boolean,has,value,ref,attribute,entry,ele,has,attribute,boolean,has,value,type,attribute,entry,ele,has,attribute,if,has,value,attribute,has,value,ref,attribute,has,value,attribute,has,value,ref,attribute,value,ele,null,error,entry,element,is,only,allowed,to,contain,either,value,attribute,or,value,ref,attribute,or,value,sub,element,entry,ele,if,has,value,type,attribute,has,value,ref,attribute,has,value,type,attribute,has,value,attribute,has,value,type,attribute,value,ele,null,error,entry,element,is,only,allowed,to,contain,a,value,type,attribute,when,it,has,a,value,attribute,entry,ele,if,has,value,attribute,string,value,type,entry,ele,get,attribute,if,string,utils,has,text,value,type,value,type,default,value,type,value,build,typed,string,value,for,map,entry,ele,get,attribute,value,type,entry,ele,else,if,has,value,ref,attribute,string,ref,name,entry,ele,get,attribute,if,string,utils,has,text,ref,name,error,entry,element,contains,empty,value,ref,attribute,entry,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,entry,ele,value,ref,else,if,value,ele,null,value,parse,property,sub,element,value,ele,bd,default,value,type,else,error,entry,element,must,specify,a,value,entry,ele,map,put,key,value,return,map
BeanDefinitionParserDelegate -> public Map<Object, Object> parseMapElement(Element mapEle, @Nullable BeanDefinition bd);1546958161;Parse a map element.;public Map<Object, Object> parseMapElement(Element mapEle, @Nullable BeanDefinition bd) {_		String defaultKeyType = mapEle.getAttribute(KEY_TYPE_ATTRIBUTE)__		String defaultValueType = mapEle.getAttribute(VALUE_TYPE_ATTRIBUTE)___		List<Element> entryEles = DomUtils.getChildElementsByTagName(mapEle, ENTRY_ELEMENT)__		ManagedMap<Object, Object> map = new ManagedMap<>(entryEles.size())__		map.setSource(extractSource(mapEle))__		map.setKeyTypeName(defaultKeyType)__		map.setValueTypeName(defaultValueType)__		map.setMergeEnabled(parseMergeAttribute(mapEle))___		for (Element entryEle : entryEles) {_			_			_			NodeList entrySubNodes = entryEle.getChildNodes()__			Element keyEle = null__			Element valueEle = null__			for (int j = 0_ j < entrySubNodes.getLength()_ j++) {_				Node node = entrySubNodes.item(j)__				if (node instanceof Element) {_					Element candidateEle = (Element) node__					if (nodeNameEquals(candidateEle, KEY_ELEMENT)) {_						if (keyEle != null) {_							error("<entry> element is only allowed to contain one <key> sub-element", entryEle)__						}_						else {_							keyEle = candidateEle__						}_					}_					else {_						_						if (nodeNameEquals(candidateEle, DESCRIPTION_ELEMENT)) {_							_						}_						else if (valueEle != null) {_							error("<entry> element must not contain more than one value sub-element", entryEle)__						}_						else {_							valueEle = candidateEle__						}_					}_				}_			}__			_			Object key = null__			boolean hasKeyAttribute = entryEle.hasAttribute(KEY_ATTRIBUTE)__			boolean hasKeyRefAttribute = entryEle.hasAttribute(KEY_REF_ATTRIBUTE)__			if ((hasKeyAttribute && hasKeyRefAttribute) ||_					(hasKeyAttribute || hasKeyRefAttribute) && keyEle != null) {_				error("<entry> element is only allowed to contain either " +_						"a 'key' attribute OR a 'key-ref' attribute OR a <key> sub-element", entryEle)__			}_			if (hasKeyAttribute) {_				key = buildTypedStringValueForMap(entryEle.getAttribute(KEY_ATTRIBUTE), defaultKeyType, entryEle)__			}_			else if (hasKeyRefAttribute) {_				String refName = entryEle.getAttribute(KEY_REF_ATTRIBUTE)__				if (!StringUtils.hasText(refName)) {_					error("<entry> element contains empty 'key-ref' attribute", entryEle)__				}_				RuntimeBeanReference ref = new RuntimeBeanReference(refName)__				ref.setSource(extractSource(entryEle))__				key = ref__			}_			else if (keyEle != null) {_				key = parseKeyElement(keyEle, bd, defaultKeyType)__			}_			else {_				error("<entry> element must specify a key", entryEle)__			}__			_			Object value = null__			boolean hasValueAttribute = entryEle.hasAttribute(VALUE_ATTRIBUTE)__			boolean hasValueRefAttribute = entryEle.hasAttribute(VALUE_REF_ATTRIBUTE)__			boolean hasValueTypeAttribute = entryEle.hasAttribute(VALUE_TYPE_ATTRIBUTE)__			if ((hasValueAttribute && hasValueRefAttribute) ||_					(hasValueAttribute || hasValueRefAttribute) && valueEle != null) {_				error("<entry> element is only allowed to contain either " +_						"'value' attribute OR 'value-ref' attribute OR <value> sub-element", entryEle)__			}_			if ((hasValueTypeAttribute && hasValueRefAttribute) ||_				(hasValueTypeAttribute && !hasValueAttribute) ||_					(hasValueTypeAttribute && valueEle != null)) {_				error("<entry> element is only allowed to contain a 'value-type' " +_						"attribute when it has a 'value' attribute", entryEle)__			}_			if (hasValueAttribute) {_				String valueType = entryEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__				if (!StringUtils.hasText(valueType)) {_					valueType = defaultValueType__				}_				value = buildTypedStringValueForMap(entryEle.getAttribute(VALUE_ATTRIBUTE), valueType, entryEle)__			}_			else if (hasValueRefAttribute) {_				String refName = entryEle.getAttribute(VALUE_REF_ATTRIBUTE)__				if (!StringUtils.hasText(refName)) {_					error("<entry> element contains empty 'value-ref' attribute", entryEle)__				}_				RuntimeBeanReference ref = new RuntimeBeanReference(refName)__				ref.setSource(extractSource(entryEle))__				value = ref__			}_			else if (valueEle != null) {_				value = parsePropertySubElement(valueEle, bd, defaultValueType)__			}_			else {_				error("<entry> element must specify a value", entryEle)__			}__			_			map.put(key, value)__		}__		return map__	};parse,a,map,element;public,map,object,object,parse,map,element,element,map,ele,nullable,bean,definition,bd,string,default,key,type,map,ele,get,attribute,string,default,value,type,map,ele,get,attribute,list,element,entry,eles,dom,utils,get,child,elements,by,tag,name,map,ele,managed,map,object,object,map,new,managed,map,entry,eles,size,map,set,source,extract,source,map,ele,map,set,key,type,name,default,key,type,map,set,value,type,name,default,value,type,map,set,merge,enabled,parse,merge,attribute,map,ele,for,element,entry,ele,entry,eles,node,list,entry,sub,nodes,entry,ele,get,child,nodes,element,key,ele,null,element,value,ele,null,for,int,j,0,j,entry,sub,nodes,get,length,j,node,node,entry,sub,nodes,item,j,if,node,instanceof,element,element,candidate,ele,element,node,if,node,name,equals,candidate,ele,if,key,ele,null,error,entry,element,is,only,allowed,to,contain,one,key,sub,element,entry,ele,else,key,ele,candidate,ele,else,if,node,name,equals,candidate,ele,else,if,value,ele,null,error,entry,element,must,not,contain,more,than,one,value,sub,element,entry,ele,else,value,ele,candidate,ele,object,key,null,boolean,has,key,attribute,entry,ele,has,attribute,boolean,has,key,ref,attribute,entry,ele,has,attribute,if,has,key,attribute,has,key,ref,attribute,has,key,attribute,has,key,ref,attribute,key,ele,null,error,entry,element,is,only,allowed,to,contain,either,a,key,attribute,or,a,key,ref,attribute,or,a,key,sub,element,entry,ele,if,has,key,attribute,key,build,typed,string,value,for,map,entry,ele,get,attribute,default,key,type,entry,ele,else,if,has,key,ref,attribute,string,ref,name,entry,ele,get,attribute,if,string,utils,has,text,ref,name,error,entry,element,contains,empty,key,ref,attribute,entry,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,entry,ele,key,ref,else,if,key,ele,null,key,parse,key,element,key,ele,bd,default,key,type,else,error,entry,element,must,specify,a,key,entry,ele,object,value,null,boolean,has,value,attribute,entry,ele,has,attribute,boolean,has,value,ref,attribute,entry,ele,has,attribute,boolean,has,value,type,attribute,entry,ele,has,attribute,if,has,value,attribute,has,value,ref,attribute,has,value,attribute,has,value,ref,attribute,value,ele,null,error,entry,element,is,only,allowed,to,contain,either,value,attribute,or,value,ref,attribute,or,value,sub,element,entry,ele,if,has,value,type,attribute,has,value,ref,attribute,has,value,type,attribute,has,value,attribute,has,value,type,attribute,value,ele,null,error,entry,element,is,only,allowed,to,contain,a,value,type,attribute,when,it,has,a,value,attribute,entry,ele,if,has,value,attribute,string,value,type,entry,ele,get,attribute,if,string,utils,has,text,value,type,value,type,default,value,type,value,build,typed,string,value,for,map,entry,ele,get,attribute,value,type,entry,ele,else,if,has,value,ref,attribute,string,ref,name,entry,ele,get,attribute,if,string,utils,has,text,ref,name,error,entry,element,contains,empty,value,ref,attribute,entry,ele,runtime,bean,reference,ref,new,runtime,bean,reference,ref,name,ref,set,source,extract,source,entry,ele,value,ref,else,if,value,ele,null,value,parse,property,sub,element,value,ele,bd,default,value,type,else,error,entry,element,must,specify,a,value,entry,ele,map,put,key,value,return,map
BeanDefinitionParserDelegate -> public boolean parseMergeAttribute(Element collectionElement);1328020251;Parse the merge attribute of a collection element, if any.;public boolean parseMergeAttribute(Element collectionElement) {_		String value = collectionElement.getAttribute(MERGE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(value)) {_			value = this.defaults.getMerge()__		}_		return TRUE_VALUE.equals(value)__	};parse,the,merge,attribute,of,a,collection,element,if,any;public,boolean,parse,merge,attribute,element,collection,element,string,value,collection,element,get,attribute,if,equals,value,value,this,defaults,get,merge,return,equals,value
BeanDefinitionParserDelegate -> public boolean parseMergeAttribute(Element collectionElement);1335774711;Parse the merge attribute of a collection element, if any.;public boolean parseMergeAttribute(Element collectionElement) {_		String value = collectionElement.getAttribute(MERGE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(value)) {_			value = this.defaults.getMerge()__		}_		return TRUE_VALUE.equals(value)__	};parse,the,merge,attribute,of,a,collection,element,if,any;public,boolean,parse,merge,attribute,element,collection,element,string,value,collection,element,get,attribute,if,equals,value,value,this,defaults,get,merge,return,equals,value
BeanDefinitionParserDelegate -> public boolean parseMergeAttribute(Element collectionElement);1337341719;Parse the merge attribute of a collection element, if any.;public boolean parseMergeAttribute(Element collectionElement) {_		String value = collectionElement.getAttribute(MERGE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(value)) {_			value = this.defaults.getMerge()__		}_		return TRUE_VALUE.equals(value)__	};parse,the,merge,attribute,of,a,collection,element,if,any;public,boolean,parse,merge,attribute,element,collection,element,string,value,collection,element,get,attribute,if,equals,value,value,this,defaults,get,merge,return,equals,value
BeanDefinitionParserDelegate -> public boolean parseMergeAttribute(Element collectionElement);1351392612;Parse the merge attribute of a collection element, if any.;public boolean parseMergeAttribute(Element collectionElement) {_		String value = collectionElement.getAttribute(MERGE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(value)) {_			value = this.defaults.getMerge()__		}_		return TRUE_VALUE.equals(value)__	};parse,the,merge,attribute,of,a,collection,element,if,any;public,boolean,parse,merge,attribute,element,collection,element,string,value,collection,element,get,attribute,if,equals,value,value,this,defaults,get,merge,return,equals,value
BeanDefinitionParserDelegate -> public boolean parseMergeAttribute(Element collectionElement);1351696936;Parse the merge attribute of a collection element, if any.;public boolean parseMergeAttribute(Element collectionElement) {_		String value = collectionElement.getAttribute(MERGE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(value)) {_			value = this.defaults.getMerge()__		}_		return TRUE_VALUE.equals(value)__	};parse,the,merge,attribute,of,a,collection,element,if,any;public,boolean,parse,merge,attribute,element,collection,element,string,value,collection,element,get,attribute,if,equals,value,value,this,defaults,get,merge,return,equals,value
BeanDefinitionParserDelegate -> public boolean parseMergeAttribute(Element collectionElement);1356735495;Parse the merge attribute of a collection element, if any.;public boolean parseMergeAttribute(Element collectionElement) {_		String value = collectionElement.getAttribute(MERGE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(value)) {_			value = this.defaults.getMerge()__		}_		return TRUE_VALUE.equals(value)__	};parse,the,merge,attribute,of,a,collection,element,if,any;public,boolean,parse,merge,attribute,element,collection,element,string,value,collection,element,get,attribute,if,equals,value,value,this,defaults,get,merge,return,equals,value
BeanDefinitionParserDelegate -> public boolean parseMergeAttribute(Element collectionElement);1357119417;Parse the merge attribute of a collection element, if any.;public boolean parseMergeAttribute(Element collectionElement) {_		String value = collectionElement.getAttribute(MERGE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(value)) {_			value = this.defaults.getMerge()__		}_		return TRUE_VALUE.equals(value)__	};parse,the,merge,attribute,of,a,collection,element,if,any;public,boolean,parse,merge,attribute,element,collection,element,string,value,collection,element,get,attribute,if,equals,value,value,this,defaults,get,merge,return,equals,value
BeanDefinitionParserDelegate -> public boolean parseMergeAttribute(Element collectionElement);1367943112;Parse the merge attribute of a collection element, if any.;public boolean parseMergeAttribute(Element collectionElement) {_		String value = collectionElement.getAttribute(MERGE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(value)) {_			value = this.defaults.getMerge()__		}_		return TRUE_VALUE.equals(value)__	};parse,the,merge,attribute,of,a,collection,element,if,any;public,boolean,parse,merge,attribute,element,collection,element,string,value,collection,element,get,attribute,if,equals,value,value,this,defaults,get,merge,return,equals,value
BeanDefinitionParserDelegate -> public boolean parseMergeAttribute(Element collectionElement);1382030648;Parse the merge attribute of a collection element, if any.;public boolean parseMergeAttribute(Element collectionElement) {_		String value = collectionElement.getAttribute(MERGE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(value)) {_			value = this.defaults.getMerge()__		}_		return TRUE_VALUE.equals(value)__	};parse,the,merge,attribute,of,a,collection,element,if,any;public,boolean,parse,merge,attribute,element,collection,element,string,value,collection,element,get,attribute,if,equals,value,value,this,defaults,get,merge,return,equals,value
BeanDefinitionParserDelegate -> public boolean parseMergeAttribute(Element collectionElement);1385412762;Parse the merge attribute of a collection element, if any.;public boolean parseMergeAttribute(Element collectionElement) {_		String value = collectionElement.getAttribute(MERGE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(value)) {_			value = this.defaults.getMerge()__		}_		return TRUE_VALUE.equals(value)__	};parse,the,merge,attribute,of,a,collection,element,if,any;public,boolean,parse,merge,attribute,element,collection,element,string,value,collection,element,get,attribute,if,equals,value,value,this,defaults,get,merge,return,equals,value
BeanDefinitionParserDelegate -> public boolean parseMergeAttribute(Element collectionElement);1410953197;Parse the merge attribute of a collection element, if any.;public boolean parseMergeAttribute(Element collectionElement) {_		String value = collectionElement.getAttribute(MERGE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(value)) {_			value = this.defaults.getMerge()__		}_		return TRUE_VALUE.equals(value)__	};parse,the,merge,attribute,of,a,collection,element,if,any;public,boolean,parse,merge,attribute,element,collection,element,string,value,collection,element,get,attribute,if,equals,value,value,this,defaults,get,merge,return,equals,value
BeanDefinitionParserDelegate -> public boolean parseMergeAttribute(Element collectionElement);1411599760;Parse the merge attribute of a collection element, if any.;public boolean parseMergeAttribute(Element collectionElement) {_		String value = collectionElement.getAttribute(MERGE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(value)) {_			value = this.defaults.getMerge()__		}_		return TRUE_VALUE.equals(value)__	};parse,the,merge,attribute,of,a,collection,element,if,any;public,boolean,parse,merge,attribute,element,collection,element,string,value,collection,element,get,attribute,if,equals,value,value,this,defaults,get,merge,return,equals,value
BeanDefinitionParserDelegate -> public boolean parseMergeAttribute(Element collectionElement);1419966315;Parse the merge attribute of a collection element, if any.;public boolean parseMergeAttribute(Element collectionElement) {_		String value = collectionElement.getAttribute(MERGE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(value)) {_			value = this.defaults.getMerge()__		}_		return TRUE_VALUE.equals(value)__	};parse,the,merge,attribute,of,a,collection,element,if,any;public,boolean,parse,merge,attribute,element,collection,element,string,value,collection,element,get,attribute,if,equals,value,value,this,defaults,get,merge,return,equals,value
BeanDefinitionParserDelegate -> public boolean parseMergeAttribute(Element collectionElement);1431958785;Parse the merge attribute of a collection element, if any.;public boolean parseMergeAttribute(Element collectionElement) {_		String value = collectionElement.getAttribute(MERGE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(value)) {_			value = this.defaults.getMerge()__		}_		return TRUE_VALUE.equals(value)__	};parse,the,merge,attribute,of,a,collection,element,if,any;public,boolean,parse,merge,attribute,element,collection,element,string,value,collection,element,get,attribute,if,equals,value,value,this,defaults,get,merge,return,equals,value
BeanDefinitionParserDelegate -> public boolean parseMergeAttribute(Element collectionElement);1432135182;Parse the merge attribute of a collection element, if any.;public boolean parseMergeAttribute(Element collectionElement) {_		String value = collectionElement.getAttribute(MERGE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(value)) {_			value = this.defaults.getMerge()__		}_		return TRUE_VALUE.equals(value)__	};parse,the,merge,attribute,of,a,collection,element,if,any;public,boolean,parse,merge,attribute,element,collection,element,string,value,collection,element,get,attribute,if,equals,value,value,this,defaults,get,merge,return,equals,value
BeanDefinitionParserDelegate -> public boolean parseMergeAttribute(Element collectionElement);1447323728;Parse the merge attribute of a collection element, if any.;public boolean parseMergeAttribute(Element collectionElement) {_		String value = collectionElement.getAttribute(MERGE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(value)) {_			value = this.defaults.getMerge()__		}_		return TRUE_VALUE.equals(value)__	};parse,the,merge,attribute,of,a,collection,element,if,any;public,boolean,parse,merge,attribute,element,collection,element,string,value,collection,element,get,attribute,if,equals,value,value,this,defaults,get,merge,return,equals,value
BeanDefinitionParserDelegate -> public boolean parseMergeAttribute(Element collectionElement);1467726769;Parse the merge attribute of a collection element, if any.;public boolean parseMergeAttribute(Element collectionElement) {_		String value = collectionElement.getAttribute(MERGE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(value)) {_			value = this.defaults.getMerge()__		}_		return TRUE_VALUE.equals(value)__	};parse,the,merge,attribute,of,a,collection,element,if,any;public,boolean,parse,merge,attribute,element,collection,element,string,value,collection,element,get,attribute,if,equals,value,value,this,defaults,get,merge,return,equals,value
BeanDefinitionParserDelegate -> public boolean parseMergeAttribute(Element collectionElement);1467730834;Parse the merge attribute of a collection element, if any.;public boolean parseMergeAttribute(Element collectionElement) {_		String value = collectionElement.getAttribute(MERGE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(value)) {_			value = this.defaults.getMerge()__		}_		return TRUE_VALUE.equals(value)__	};parse,the,merge,attribute,of,a,collection,element,if,any;public,boolean,parse,merge,attribute,element,collection,element,string,value,collection,element,get,attribute,if,equals,value,value,this,defaults,get,merge,return,equals,value
BeanDefinitionParserDelegate -> public boolean parseMergeAttribute(Element collectionElement);1467744603;Parse the merge attribute of a collection element, if any.;public boolean parseMergeAttribute(Element collectionElement) {_		String value = collectionElement.getAttribute(MERGE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(value)) {_			value = this.defaults.getMerge()__		}_		return TRUE_VALUE.equals(value)__	};parse,the,merge,attribute,of,a,collection,element,if,any;public,boolean,parse,merge,attribute,element,collection,element,string,value,collection,element,get,attribute,if,equals,value,value,this,defaults,get,merge,return,equals,value
BeanDefinitionParserDelegate -> public boolean parseMergeAttribute(Element collectionElement);1487245676;Parse the merge attribute of a collection element, if any.;public boolean parseMergeAttribute(Element collectionElement) {_		String value = collectionElement.getAttribute(MERGE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(value)) {_			value = this.defaults.getMerge()__		}_		return TRUE_VALUE.equals(value)__	};parse,the,merge,attribute,of,a,collection,element,if,any;public,boolean,parse,merge,attribute,element,collection,element,string,value,collection,element,get,attribute,if,equals,value,value,this,defaults,get,merge,return,equals,value
BeanDefinitionParserDelegate -> public boolean parseMergeAttribute(Element collectionElement);1487255851;Parse the merge attribute of a collection element, if any.;public boolean parseMergeAttribute(Element collectionElement) {_		String value = collectionElement.getAttribute(MERGE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(value)) {_			value = this.defaults.getMerge()__		}_		return TRUE_VALUE.equals(value)__	};parse,the,merge,attribute,of,a,collection,element,if,any;public,boolean,parse,merge,attribute,element,collection,element,string,value,collection,element,get,attribute,if,equals,value,value,this,defaults,get,merge,return,equals,value
BeanDefinitionParserDelegate -> public boolean parseMergeAttribute(Element collectionElement);1494586217;Parse the merge attribute of a collection element, if any.;public boolean parseMergeAttribute(Element collectionElement) {_		String value = collectionElement.getAttribute(MERGE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(value)) {_			value = this.defaults.getMerge()__		}_		return TRUE_VALUE.equals(value)__	};parse,the,merge,attribute,of,a,collection,element,if,any;public,boolean,parse,merge,attribute,element,collection,element,string,value,collection,element,get,attribute,if,equals,value,value,this,defaults,get,merge,return,equals,value
BeanDefinitionParserDelegate -> public boolean parseMergeAttribute(Element collectionElement);1495868221;Parse the merge attribute of a collection element, if any.;public boolean parseMergeAttribute(Element collectionElement) {_		String value = collectionElement.getAttribute(MERGE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(value)) {_			value = this.defaults.getMerge()__		}_		return TRUE_VALUE.equals(value)__	};parse,the,merge,attribute,of,a,collection,element,if,any;public,boolean,parse,merge,attribute,element,collection,element,string,value,collection,element,get,attribute,if,equals,value,value,this,defaults,get,merge,return,equals,value
BeanDefinitionParserDelegate -> public boolean parseMergeAttribute(Element collectionElement);1496259743;Parse the merge attribute of a collection element, if any.;public boolean parseMergeAttribute(Element collectionElement) {_		String value = collectionElement.getAttribute(MERGE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(value)) {_			value = this.defaults.getMerge()__		}_		return TRUE_VALUE.equals(value)__	};parse,the,merge,attribute,of,a,collection,element,if,any;public,boolean,parse,merge,attribute,element,collection,element,string,value,collection,element,get,attribute,if,equals,value,value,this,defaults,get,merge,return,equals,value
BeanDefinitionParserDelegate -> public boolean parseMergeAttribute(Element collectionElement);1496837955;Parse the merge attribute of a collection element, if any.;public boolean parseMergeAttribute(Element collectionElement) {_		String value = collectionElement.getAttribute(MERGE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(value)) {_			value = this.defaults.getMerge()__		}_		return TRUE_VALUE.equals(value)__	};parse,the,merge,attribute,of,a,collection,element,if,any;public,boolean,parse,merge,attribute,element,collection,element,string,value,collection,element,get,attribute,if,equals,value,value,this,defaults,get,merge,return,equals,value
BeanDefinitionParserDelegate -> public boolean parseMergeAttribute(Element collectionElement);1503008029;Parse the merge attribute of a collection element, if any.;public boolean parseMergeAttribute(Element collectionElement) {_		String value = collectionElement.getAttribute(MERGE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(value)) {_			value = this.defaults.getMerge()__		}_		return TRUE_VALUE.equals(value)__	};parse,the,merge,attribute,of,a,collection,element,if,any;public,boolean,parse,merge,attribute,element,collection,element,string,value,collection,element,get,attribute,if,equals,value,value,this,defaults,get,merge,return,equals,value
BeanDefinitionParserDelegate -> public boolean parseMergeAttribute(Element collectionElement);1519513303;Parse the merge attribute of a collection element, if any.;public boolean parseMergeAttribute(Element collectionElement) {_		String value = collectionElement.getAttribute(MERGE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(value)) {_			value = this.defaults.getMerge()__		}_		return TRUE_VALUE.equals(value)__	};parse,the,merge,attribute,of,a,collection,element,if,any;public,boolean,parse,merge,attribute,element,collection,element,string,value,collection,element,get,attribute,if,equals,value,value,this,defaults,get,merge,return,equals,value
BeanDefinitionParserDelegate -> public boolean parseMergeAttribute(Element collectionElement);1530174524;Parse the merge attribute of a collection element, if any.;public boolean parseMergeAttribute(Element collectionElement) {_		String value = collectionElement.getAttribute(MERGE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(value)) {_			value = this.defaults.getMerge()__		}_		return TRUE_VALUE.equals(value)__	};parse,the,merge,attribute,of,a,collection,element,if,any;public,boolean,parse,merge,attribute,element,collection,element,string,value,collection,element,get,attribute,if,equals,value,value,this,defaults,get,merge,return,equals,value
BeanDefinitionParserDelegate -> public boolean parseMergeAttribute(Element collectionElement);1530190293;Parse the merge attribute of a collection element, if any.;public boolean parseMergeAttribute(Element collectionElement) {_		String value = collectionElement.getAttribute(MERGE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(value)) {_			value = this.defaults.getMerge()__		}_		return TRUE_VALUE.equals(value)__	};parse,the,merge,attribute,of,a,collection,element,if,any;public,boolean,parse,merge,attribute,element,collection,element,string,value,collection,element,get,attribute,if,equals,value,value,this,defaults,get,merge,return,equals,value
BeanDefinitionParserDelegate -> public boolean parseMergeAttribute(Element collectionElement);1532706365;Parse the merge attribute of a collection element, if any.;public boolean parseMergeAttribute(Element collectionElement) {_		String value = collectionElement.getAttribute(MERGE_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(value)) {_			value = this.defaults.getMerge()__		}_		return TRUE_VALUE.equals(value)__	};parse,the,merge,attribute,of,a,collection,element,if,any;public,boolean,parse,merge,attribute,element,collection,element,string,value,collection,element,get,attribute,if,equals,value,value,this,defaults,get,merge,return,equals,value
BeanDefinitionParserDelegate -> public boolean parseMergeAttribute(Element collectionElement);1546958161;Parse the merge attribute of a collection element, if any.;public boolean parseMergeAttribute(Element collectionElement) {_		String value = collectionElement.getAttribute(MERGE_ATTRIBUTE)__		if (isDefaultValue(value)) {_			value = this.defaults.getMerge()__		}_		return TRUE_VALUE.equals(value)__	};parse,the,merge,attribute,of,a,collection,element,if,any;public,boolean,parse,merge,attribute,element,collection,element,string,value,collection,element,get,attribute,if,is,default,value,value,value,this,defaults,get,merge,return,equals,value
BeanDefinitionParserDelegate -> public Object parseValueElement(Element ele, @Nullable String defaultTypeName);1496837955;Return a typed String value Object for the given value element.;public Object parseValueElement(Element ele, @Nullable String defaultTypeName) {_		_		String value = DomUtils.getTextValue(ele)__		String specifiedTypeName = ele.getAttribute(TYPE_ATTRIBUTE)__		String typeName = specifiedTypeName__		if (!StringUtils.hasText(typeName)) {_			typeName = defaultTypeName__		}_		try {_			TypedStringValue typedValue = buildTypedStringValue(value, typeName)__			typedValue.setSource(extractSource(ele))__			typedValue.setSpecifiedTypeName(specifiedTypeName)__			return typedValue__		}_		catch (ClassNotFoundException ex) {_			error("Type class [" + typeName + "] not found for <value> element", ele, ex)__			return value__		}_	};return,a,typed,string,value,object,for,the,given,value,element;public,object,parse,value,element,element,ele,nullable,string,default,type,name,string,value,dom,utils,get,text,value,ele,string,specified,type,name,ele,get,attribute,string,type,name,specified,type,name,if,string,utils,has,text,type,name,type,name,default,type,name,try,typed,string,value,typed,value,build,typed,string,value,value,type,name,typed,value,set,source,extract,source,ele,typed,value,set,specified,type,name,specified,type,name,return,typed,value,catch,class,not,found,exception,ex,error,type,class,type,name,not,found,for,value,element,ele,ex,return,value
BeanDefinitionParserDelegate -> public Object parseValueElement(Element ele, @Nullable String defaultTypeName);1503008029;Return a typed String value Object for the given value element.;public Object parseValueElement(Element ele, @Nullable String defaultTypeName) {_		_		String value = DomUtils.getTextValue(ele)__		String specifiedTypeName = ele.getAttribute(TYPE_ATTRIBUTE)__		String typeName = specifiedTypeName__		if (!StringUtils.hasText(typeName)) {_			typeName = defaultTypeName__		}_		try {_			TypedStringValue typedValue = buildTypedStringValue(value, typeName)__			typedValue.setSource(extractSource(ele))__			typedValue.setSpecifiedTypeName(specifiedTypeName)__			return typedValue__		}_		catch (ClassNotFoundException ex) {_			error("Type class [" + typeName + "] not found for <value> element", ele, ex)__			return value__		}_	};return,a,typed,string,value,object,for,the,given,value,element;public,object,parse,value,element,element,ele,nullable,string,default,type,name,string,value,dom,utils,get,text,value,ele,string,specified,type,name,ele,get,attribute,string,type,name,specified,type,name,if,string,utils,has,text,type,name,type,name,default,type,name,try,typed,string,value,typed,value,build,typed,string,value,value,type,name,typed,value,set,source,extract,source,ele,typed,value,set,specified,type,name,specified,type,name,return,typed,value,catch,class,not,found,exception,ex,error,type,class,type,name,not,found,for,value,element,ele,ex,return,value
BeanDefinitionParserDelegate -> public Object parseValueElement(Element ele, @Nullable String defaultTypeName);1519513303;Return a typed String value Object for the given value element.;public Object parseValueElement(Element ele, @Nullable String defaultTypeName) {_		_		String value = DomUtils.getTextValue(ele)__		String specifiedTypeName = ele.getAttribute(TYPE_ATTRIBUTE)__		String typeName = specifiedTypeName__		if (!StringUtils.hasText(typeName)) {_			typeName = defaultTypeName__		}_		try {_			TypedStringValue typedValue = buildTypedStringValue(value, typeName)__			typedValue.setSource(extractSource(ele))__			typedValue.setSpecifiedTypeName(specifiedTypeName)__			return typedValue__		}_		catch (ClassNotFoundException ex) {_			error("Type class [" + typeName + "] not found for <value> element", ele, ex)__			return value__		}_	};return,a,typed,string,value,object,for,the,given,value,element;public,object,parse,value,element,element,ele,nullable,string,default,type,name,string,value,dom,utils,get,text,value,ele,string,specified,type,name,ele,get,attribute,string,type,name,specified,type,name,if,string,utils,has,text,type,name,type,name,default,type,name,try,typed,string,value,typed,value,build,typed,string,value,value,type,name,typed,value,set,source,extract,source,ele,typed,value,set,specified,type,name,specified,type,name,return,typed,value,catch,class,not,found,exception,ex,error,type,class,type,name,not,found,for,value,element,ele,ex,return,value
BeanDefinitionParserDelegate -> public Object parseValueElement(Element ele, @Nullable String defaultTypeName);1530174524;Return a typed String value Object for the given value element.;public Object parseValueElement(Element ele, @Nullable String defaultTypeName) {_		_		String value = DomUtils.getTextValue(ele)__		String specifiedTypeName = ele.getAttribute(TYPE_ATTRIBUTE)__		String typeName = specifiedTypeName__		if (!StringUtils.hasText(typeName)) {_			typeName = defaultTypeName__		}_		try {_			TypedStringValue typedValue = buildTypedStringValue(value, typeName)__			typedValue.setSource(extractSource(ele))__			typedValue.setSpecifiedTypeName(specifiedTypeName)__			return typedValue__		}_		catch (ClassNotFoundException ex) {_			error("Type class [" + typeName + "] not found for <value> element", ele, ex)__			return value__		}_	};return,a,typed,string,value,object,for,the,given,value,element;public,object,parse,value,element,element,ele,nullable,string,default,type,name,string,value,dom,utils,get,text,value,ele,string,specified,type,name,ele,get,attribute,string,type,name,specified,type,name,if,string,utils,has,text,type,name,type,name,default,type,name,try,typed,string,value,typed,value,build,typed,string,value,value,type,name,typed,value,set,source,extract,source,ele,typed,value,set,specified,type,name,specified,type,name,return,typed,value,catch,class,not,found,exception,ex,error,type,class,type,name,not,found,for,value,element,ele,ex,return,value
BeanDefinitionParserDelegate -> public Object parseValueElement(Element ele, @Nullable String defaultTypeName);1530190293;Return a typed String value Object for the given value element.;public Object parseValueElement(Element ele, @Nullable String defaultTypeName) {_		_		String value = DomUtils.getTextValue(ele)__		String specifiedTypeName = ele.getAttribute(TYPE_ATTRIBUTE)__		String typeName = specifiedTypeName__		if (!StringUtils.hasText(typeName)) {_			typeName = defaultTypeName__		}_		try {_			TypedStringValue typedValue = buildTypedStringValue(value, typeName)__			typedValue.setSource(extractSource(ele))__			typedValue.setSpecifiedTypeName(specifiedTypeName)__			return typedValue__		}_		catch (ClassNotFoundException ex) {_			error("Type class [" + typeName + "] not found for <value> element", ele, ex)__			return value__		}_	};return,a,typed,string,value,object,for,the,given,value,element;public,object,parse,value,element,element,ele,nullable,string,default,type,name,string,value,dom,utils,get,text,value,ele,string,specified,type,name,ele,get,attribute,string,type,name,specified,type,name,if,string,utils,has,text,type,name,type,name,default,type,name,try,typed,string,value,typed,value,build,typed,string,value,value,type,name,typed,value,set,source,extract,source,ele,typed,value,set,specified,type,name,specified,type,name,return,typed,value,catch,class,not,found,exception,ex,error,type,class,type,name,not,found,for,value,element,ele,ex,return,value
BeanDefinitionParserDelegate -> public Object parseValueElement(Element ele, @Nullable String defaultTypeName);1532706365;Return a typed String value Object for the given value element.;public Object parseValueElement(Element ele, @Nullable String defaultTypeName) {_		_		String value = DomUtils.getTextValue(ele)__		String specifiedTypeName = ele.getAttribute(TYPE_ATTRIBUTE)__		String typeName = specifiedTypeName__		if (!StringUtils.hasText(typeName)) {_			typeName = defaultTypeName__		}_		try {_			TypedStringValue typedValue = buildTypedStringValue(value, typeName)__			typedValue.setSource(extractSource(ele))__			typedValue.setSpecifiedTypeName(specifiedTypeName)__			return typedValue__		}_		catch (ClassNotFoundException ex) {_			error("Type class [" + typeName + "] not found for <value> element", ele, ex)__			return value__		}_	};return,a,typed,string,value,object,for,the,given,value,element;public,object,parse,value,element,element,ele,nullable,string,default,type,name,string,value,dom,utils,get,text,value,ele,string,specified,type,name,ele,get,attribute,string,type,name,specified,type,name,if,string,utils,has,text,type,name,type,name,default,type,name,try,typed,string,value,typed,value,build,typed,string,value,value,type,name,typed,value,set,source,extract,source,ele,typed,value,set,specified,type,name,specified,type,name,return,typed,value,catch,class,not,found,exception,ex,error,type,class,type,name,not,found,for,value,element,ele,ex,return,value
BeanDefinitionParserDelegate -> public Object parseValueElement(Element ele, @Nullable String defaultTypeName);1546958161;Return a typed String value Object for the given value element.;public Object parseValueElement(Element ele, @Nullable String defaultTypeName) {_		_		String value = DomUtils.getTextValue(ele)__		String specifiedTypeName = ele.getAttribute(TYPE_ATTRIBUTE)__		String typeName = specifiedTypeName__		if (!StringUtils.hasText(typeName)) {_			typeName = defaultTypeName__		}_		try {_			TypedStringValue typedValue = buildTypedStringValue(value, typeName)__			typedValue.setSource(extractSource(ele))__			typedValue.setSpecifiedTypeName(specifiedTypeName)__			return typedValue__		}_		catch (ClassNotFoundException ex) {_			error("Type class [" + typeName + "] not found for <value> element", ele, ex)__			return value__		}_	};return,a,typed,string,value,object,for,the,given,value,element;public,object,parse,value,element,element,ele,nullable,string,default,type,name,string,value,dom,utils,get,text,value,ele,string,specified,type,name,ele,get,attribute,string,type,name,specified,type,name,if,string,utils,has,text,type,name,type,name,default,type,name,try,typed,string,value,typed,value,build,typed,string,value,value,type,name,typed,value,set,source,extract,source,ele,typed,value,set,specified,type,name,specified,type,name,return,typed,value,catch,class,not,found,exception,ex,error,type,class,type,name,not,found,for,value,element,ele,ex,return,value
BeanDefinitionParserDelegate -> public BeanDefinitionParserDelegate(XmlReaderContext readerContext, Environment environment);1328020251;Create a new BeanDefinitionParserDelegate associated with the_supplied {@link XmlReaderContext} and {@link Environment}.;public BeanDefinitionParserDelegate(XmlReaderContext readerContext, Environment environment) {_		Assert.notNull(readerContext, "XmlReaderContext must not be null")__		Assert.notNull(readerContext, "Environment must not be null")__		this.readerContext = readerContext__		this.environment = environment__	};create,a,new,bean,definition,parser,delegate,associated,with,the,supplied,link,xml,reader,context,and,link,environment;public,bean,definition,parser,delegate,xml,reader,context,reader,context,environment,environment,assert,not,null,reader,context,xml,reader,context,must,not,be,null,assert,not,null,reader,context,environment,must,not,be,null,this,reader,context,reader,context,this,environment,environment
BeanDefinitionParserDelegate -> public BeanDefinitionParserDelegate(XmlReaderContext readerContext, Environment environment);1335774711;Create a new BeanDefinitionParserDelegate associated with the_supplied {@link XmlReaderContext} and {@link Environment}.;public BeanDefinitionParserDelegate(XmlReaderContext readerContext, Environment environment) {_		Assert.notNull(readerContext, "XmlReaderContext must not be null")__		Assert.notNull(readerContext, "Environment must not be null")__		this.readerContext = readerContext__		this.environment = environment__	};create,a,new,bean,definition,parser,delegate,associated,with,the,supplied,link,xml,reader,context,and,link,environment;public,bean,definition,parser,delegate,xml,reader,context,reader,context,environment,environment,assert,not,null,reader,context,xml,reader,context,must,not,be,null,assert,not,null,reader,context,environment,must,not,be,null,this,reader,context,reader,context,this,environment,environment
BeanDefinitionParserDelegate -> public BeanDefinitionParserDelegate(XmlReaderContext readerContext, Environment environment);1337341719;Create a new BeanDefinitionParserDelegate associated with the_supplied {@link XmlReaderContext} and {@link Environment}.;public BeanDefinitionParserDelegate(XmlReaderContext readerContext, Environment environment) {_		Assert.notNull(readerContext, "XmlReaderContext must not be null")__		Assert.notNull(readerContext, "Environment must not be null")__		this.readerContext = readerContext__		this.environment = environment__	};create,a,new,bean,definition,parser,delegate,associated,with,the,supplied,link,xml,reader,context,and,link,environment;public,bean,definition,parser,delegate,xml,reader,context,reader,context,environment,environment,assert,not,null,reader,context,xml,reader,context,must,not,be,null,assert,not,null,reader,context,environment,must,not,be,null,this,reader,context,reader,context,this,environment,environment
BeanDefinitionParserDelegate -> public BeanDefinitionParserDelegate(XmlReaderContext readerContext, Environment environment);1351392612;Create a new BeanDefinitionParserDelegate associated with the_supplied {@link XmlReaderContext} and {@link Environment}.;public BeanDefinitionParserDelegate(XmlReaderContext readerContext, Environment environment) {_		Assert.notNull(readerContext, "XmlReaderContext must not be null")__		Assert.notNull(readerContext, "Environment must not be null")__		this.readerContext = readerContext__		this.environment = environment__	};create,a,new,bean,definition,parser,delegate,associated,with,the,supplied,link,xml,reader,context,and,link,environment;public,bean,definition,parser,delegate,xml,reader,context,reader,context,environment,environment,assert,not,null,reader,context,xml,reader,context,must,not,be,null,assert,not,null,reader,context,environment,must,not,be,null,this,reader,context,reader,context,this,environment,environment
BeanDefinitionParserDelegate -> public BeanDefinitionParserDelegate(XmlReaderContext readerContext, Environment environment);1351696936;Create a new BeanDefinitionParserDelegate associated with the_supplied {@link XmlReaderContext} and {@link Environment}.;public BeanDefinitionParserDelegate(XmlReaderContext readerContext, Environment environment) {_		Assert.notNull(readerContext, "XmlReaderContext must not be null")__		Assert.notNull(readerContext, "Environment must not be null")__		this.readerContext = readerContext__		this.environment = environment__	};create,a,new,bean,definition,parser,delegate,associated,with,the,supplied,link,xml,reader,context,and,link,environment;public,bean,definition,parser,delegate,xml,reader,context,reader,context,environment,environment,assert,not,null,reader,context,xml,reader,context,must,not,be,null,assert,not,null,reader,context,environment,must,not,be,null,this,reader,context,reader,context,this,environment,environment
BeanDefinitionParserDelegate -> public BeanDefinitionParserDelegate(XmlReaderContext readerContext, Environment environment);1356735495;Create a new BeanDefinitionParserDelegate associated with the_supplied {@link XmlReaderContext} and {@link Environment}.;public BeanDefinitionParserDelegate(XmlReaderContext readerContext, Environment environment) {_		Assert.notNull(readerContext, "XmlReaderContext must not be null")__		Assert.notNull(readerContext, "Environment must not be null")__		this.readerContext = readerContext__		this.environment = environment__	};create,a,new,bean,definition,parser,delegate,associated,with,the,supplied,link,xml,reader,context,and,link,environment;public,bean,definition,parser,delegate,xml,reader,context,reader,context,environment,environment,assert,not,null,reader,context,xml,reader,context,must,not,be,null,assert,not,null,reader,context,environment,must,not,be,null,this,reader,context,reader,context,this,environment,environment
BeanDefinitionParserDelegate -> public BeanDefinitionParserDelegate(XmlReaderContext readerContext, Environment environment);1357119417;Create a new BeanDefinitionParserDelegate associated with the_supplied {@link XmlReaderContext} and {@link Environment}.;public BeanDefinitionParserDelegate(XmlReaderContext readerContext, Environment environment) {_		Assert.notNull(readerContext, "XmlReaderContext must not be null")__		Assert.notNull(readerContext, "Environment must not be null")__		this.readerContext = readerContext__		this.environment = environment__	};create,a,new,bean,definition,parser,delegate,associated,with,the,supplied,link,xml,reader,context,and,link,environment;public,bean,definition,parser,delegate,xml,reader,context,reader,context,environment,environment,assert,not,null,reader,context,xml,reader,context,must,not,be,null,assert,not,null,reader,context,environment,must,not,be,null,this,reader,context,reader,context,this,environment,environment
BeanDefinitionParserDelegate -> public BeanDefinitionParserDelegate(XmlReaderContext readerContext, Environment environment);1367943112;Create a new BeanDefinitionParserDelegate associated with the_supplied {@link XmlReaderContext} and {@link Environment}.;public BeanDefinitionParserDelegate(XmlReaderContext readerContext, Environment environment) {_		Assert.notNull(readerContext, "XmlReaderContext must not be null")__		Assert.notNull(readerContext, "Environment must not be null")__		this.readerContext = readerContext__		this.environment = environment__	};create,a,new,bean,definition,parser,delegate,associated,with,the,supplied,link,xml,reader,context,and,link,environment;public,bean,definition,parser,delegate,xml,reader,context,reader,context,environment,environment,assert,not,null,reader,context,xml,reader,context,must,not,be,null,assert,not,null,reader,context,environment,must,not,be,null,this,reader,context,reader,context,this,environment,environment
BeanDefinitionParserDelegate -> public BeanDefinitionParserDelegate(XmlReaderContext readerContext, Environment environment);1382030648;Create a new BeanDefinitionParserDelegate associated with the_supplied {@link XmlReaderContext} and {@link Environment}.;public BeanDefinitionParserDelegate(XmlReaderContext readerContext, Environment environment) {_		Assert.notNull(readerContext, "XmlReaderContext must not be null")__		Assert.notNull(readerContext, "Environment must not be null")__		this.readerContext = readerContext__		this.environment = environment__	};create,a,new,bean,definition,parser,delegate,associated,with,the,supplied,link,xml,reader,context,and,link,environment;public,bean,definition,parser,delegate,xml,reader,context,reader,context,environment,environment,assert,not,null,reader,context,xml,reader,context,must,not,be,null,assert,not,null,reader,context,environment,must,not,be,null,this,reader,context,reader,context,this,environment,environment
BeanDefinitionParserDelegate -> public BeanDefinitionParserDelegate(XmlReaderContext readerContext, Environment environment);1385412762;Create a new BeanDefinitionParserDelegate associated with the_supplied {@link XmlReaderContext} and {@link Environment}.;public BeanDefinitionParserDelegate(XmlReaderContext readerContext, Environment environment) {_		Assert.notNull(readerContext, "XmlReaderContext must not be null")__		Assert.notNull(readerContext, "Environment must not be null")__		this.readerContext = readerContext__		this.environment = environment__	};create,a,new,bean,definition,parser,delegate,associated,with,the,supplied,link,xml,reader,context,and,link,environment;public,bean,definition,parser,delegate,xml,reader,context,reader,context,environment,environment,assert,not,null,reader,context,xml,reader,context,must,not,be,null,assert,not,null,reader,context,environment,must,not,be,null,this,reader,context,reader,context,this,environment,environment
BeanDefinitionParserDelegate -> public BeanDefinitionParserDelegate(XmlReaderContext readerContext, Environment environment);1410953197;Create a new BeanDefinitionParserDelegate associated with the_supplied {@link XmlReaderContext} and {@link Environment}.;public BeanDefinitionParserDelegate(XmlReaderContext readerContext, Environment environment) {_		Assert.notNull(readerContext, "XmlReaderContext must not be null")__		Assert.notNull(environment, "Environment must not be null")__		this.readerContext = readerContext__		this.environment = environment__	};create,a,new,bean,definition,parser,delegate,associated,with,the,supplied,link,xml,reader,context,and,link,environment;public,bean,definition,parser,delegate,xml,reader,context,reader,context,environment,environment,assert,not,null,reader,context,xml,reader,context,must,not,be,null,assert,not,null,environment,environment,must,not,be,null,this,reader,context,reader,context,this,environment,environment
BeanDefinitionParserDelegate -> public AbstractBeanDefinition parseBeanDefinitionAttributes(Element ele, String beanName, 			BeanDefinition containingBean, AbstractBeanDefinition bd);1328020251;Apply the attributes of the given bean element to the given bean * definition._@param ele bean declaration element_@param beanName bean name_@param containingBean containing bean definition_@return a bean definition initialized according to the bean element attributes;public AbstractBeanDefinition parseBeanDefinitionAttributes(Element ele, String beanName,_			BeanDefinition containingBean, AbstractBeanDefinition bd) {__		if (ele.hasAttribute(SCOPE_ATTRIBUTE)) {_			_			bd.setScope(ele.getAttribute(SCOPE_ATTRIBUTE))__			if (ele.hasAttribute(SINGLETON_ATTRIBUTE)) {_				error("Specify either 'scope' or 'singleton', not both", ele)__			}_		}_		else if (ele.hasAttribute(SINGLETON_ATTRIBUTE)) {_			_			bd.setScope(TRUE_VALUE.equals(ele.getAttribute(SINGLETON_ATTRIBUTE)) ?_					BeanDefinition.SCOPE_SINGLETON : BeanDefinition.SCOPE_PROTOTYPE)__		}_		else if (containingBean != null) {_			_			bd.setScope(containingBean.getScope())__		}__		if (ele.hasAttribute(ABSTRACT_ATTRIBUTE)) {_			bd.setAbstract(TRUE_VALUE.equals(ele.getAttribute(ABSTRACT_ATTRIBUTE)))__		}__		String lazyInit = ele.getAttribute(LAZY_INIT_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(lazyInit)) {_			lazyInit = this.defaults.getLazyInit()__		}_		bd.setLazyInit(TRUE_VALUE.equals(lazyInit))___		String autowire = ele.getAttribute(AUTOWIRE_ATTRIBUTE)__		bd.setAutowireMode(getAutowireMode(autowire))___		String dependencyCheck = ele.getAttribute(DEPENDENCY_CHECK_ATTRIBUTE)__		bd.setDependencyCheck(getDependencyCheck(dependencyCheck))___		if (ele.hasAttribute(DEPENDS_ON_ATTRIBUTE)) {_			String dependsOn = ele.getAttribute(DEPENDS_ON_ATTRIBUTE)__			bd.setDependsOn(StringUtils.tokenizeToStringArray(dependsOn, MULTI_VALUE_ATTRIBUTE_DELIMITERS))__		}__		String autowireCandidate = ele.getAttribute(AUTOWIRE_CANDIDATE_ATTRIBUTE)__		if ("".equals(autowireCandidate) || DEFAULT_VALUE.equals(autowireCandidate)) {_			String candidatePattern = this.defaults.getAutowireCandidates()__			if (candidatePattern != null) {_				String[] patterns = StringUtils.commaDelimitedListToStringArray(candidatePattern)__				bd.setAutowireCandidate(PatternMatchUtils.simpleMatch(patterns, beanName))__			}_		}_		else {_			bd.setAutowireCandidate(TRUE_VALUE.equals(autowireCandidate))__		}__		if (ele.hasAttribute(PRIMARY_ATTRIBUTE)) {_			bd.setPrimary(TRUE_VALUE.equals(ele.getAttribute(PRIMARY_ATTRIBUTE)))__		}__		if (ele.hasAttribute(INIT_METHOD_ATTRIBUTE)) {_			String initMethodName = ele.getAttribute(INIT_METHOD_ATTRIBUTE)__			if (!"".equals(initMethodName)) {_				bd.setInitMethodName(initMethodName)__			}_		}_		else {_			if (this.defaults.getInitMethod() != null) {_				bd.setInitMethodName(this.defaults.getInitMethod())__				bd.setEnforceInitMethod(false)__			}_		}__		if (ele.hasAttribute(DESTROY_METHOD_ATTRIBUTE)) {_			String destroyMethodName = ele.getAttribute(DESTROY_METHOD_ATTRIBUTE)__			if (!"".equals(destroyMethodName)) {_				bd.setDestroyMethodName(destroyMethodName)__			}_		}_		else {_			if (this.defaults.getDestroyMethod() != null) {_				bd.setDestroyMethodName(this.defaults.getDestroyMethod())__				bd.setEnforceDestroyMethod(false)__			}_		}__		if (ele.hasAttribute(FACTORY_METHOD_ATTRIBUTE)) {_			bd.setFactoryMethodName(ele.getAttribute(FACTORY_METHOD_ATTRIBUTE))__		}_		if (ele.hasAttribute(FACTORY_BEAN_ATTRIBUTE)) {_			bd.setFactoryBeanName(ele.getAttribute(FACTORY_BEAN_ATTRIBUTE))__		}__		return bd__	};apply,the,attributes,of,the,given,bean,element,to,the,given,bean,definition,param,ele,bean,declaration,element,param,bean,name,bean,name,param,containing,bean,containing,bean,definition,return,a,bean,definition,initialized,according,to,the,bean,element,attributes;public,abstract,bean,definition,parse,bean,definition,attributes,element,ele,string,bean,name,bean,definition,containing,bean,abstract,bean,definition,bd,if,ele,has,attribute,bd,set,scope,ele,get,attribute,if,ele,has,attribute,error,specify,either,scope,or,singleton,not,both,ele,else,if,ele,has,attribute,bd,set,scope,equals,ele,get,attribute,bean,definition,bean,definition,else,if,containing,bean,null,bd,set,scope,containing,bean,get,scope,if,ele,has,attribute,bd,set,abstract,equals,ele,get,attribute,string,lazy,init,ele,get,attribute,if,equals,lazy,init,lazy,init,this,defaults,get,lazy,init,bd,set,lazy,init,equals,lazy,init,string,autowire,ele,get,attribute,bd,set,autowire,mode,get,autowire,mode,autowire,string,dependency,check,ele,get,attribute,bd,set,dependency,check,get,dependency,check,dependency,check,if,ele,has,attribute,string,depends,on,ele,get,attribute,bd,set,depends,on,string,utils,tokenize,to,string,array,depends,on,string,autowire,candidate,ele,get,attribute,if,equals,autowire,candidate,equals,autowire,candidate,string,candidate,pattern,this,defaults,get,autowire,candidates,if,candidate,pattern,null,string,patterns,string,utils,comma,delimited,list,to,string,array,candidate,pattern,bd,set,autowire,candidate,pattern,match,utils,simple,match,patterns,bean,name,else,bd,set,autowire,candidate,equals,autowire,candidate,if,ele,has,attribute,bd,set,primary,equals,ele,get,attribute,if,ele,has,attribute,string,init,method,name,ele,get,attribute,if,equals,init,method,name,bd,set,init,method,name,init,method,name,else,if,this,defaults,get,init,method,null,bd,set,init,method,name,this,defaults,get,init,method,bd,set,enforce,init,method,false,if,ele,has,attribute,string,destroy,method,name,ele,get,attribute,if,equals,destroy,method,name,bd,set,destroy,method,name,destroy,method,name,else,if,this,defaults,get,destroy,method,null,bd,set,destroy,method,name,this,defaults,get,destroy,method,bd,set,enforce,destroy,method,false,if,ele,has,attribute,bd,set,factory,method,name,ele,get,attribute,if,ele,has,attribute,bd,set,factory,bean,name,ele,get,attribute,return,bd
BeanDefinitionParserDelegate -> public AbstractBeanDefinition parseBeanDefinitionAttributes(Element ele, String beanName, 			BeanDefinition containingBean, AbstractBeanDefinition bd);1335774711;Apply the attributes of the given bean element to the given bean * definition._@param ele bean declaration element_@param beanName bean name_@param containingBean containing bean definition_@return a bean definition initialized according to the bean element attributes;public AbstractBeanDefinition parseBeanDefinitionAttributes(Element ele, String beanName,_			BeanDefinition containingBean, AbstractBeanDefinition bd) {__		if (ele.hasAttribute(SCOPE_ATTRIBUTE)) {_			_			bd.setScope(ele.getAttribute(SCOPE_ATTRIBUTE))__			if (ele.hasAttribute(SINGLETON_ATTRIBUTE)) {_				error("Specify either 'scope' or 'singleton', not both", ele)__			}_		}_		else if (ele.hasAttribute(SINGLETON_ATTRIBUTE)) {_			_			bd.setScope(TRUE_VALUE.equals(ele.getAttribute(SINGLETON_ATTRIBUTE)) ?_					BeanDefinition.SCOPE_SINGLETON : BeanDefinition.SCOPE_PROTOTYPE)__		}_		else if (containingBean != null) {_			_			bd.setScope(containingBean.getScope())__		}__		if (ele.hasAttribute(ABSTRACT_ATTRIBUTE)) {_			bd.setAbstract(TRUE_VALUE.equals(ele.getAttribute(ABSTRACT_ATTRIBUTE)))__		}__		String lazyInit = ele.getAttribute(LAZY_INIT_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(lazyInit)) {_			lazyInit = this.defaults.getLazyInit()__		}_		bd.setLazyInit(TRUE_VALUE.equals(lazyInit))___		String autowire = ele.getAttribute(AUTOWIRE_ATTRIBUTE)__		bd.setAutowireMode(getAutowireMode(autowire))___		String dependencyCheck = ele.getAttribute(DEPENDENCY_CHECK_ATTRIBUTE)__		bd.setDependencyCheck(getDependencyCheck(dependencyCheck))___		if (ele.hasAttribute(DEPENDS_ON_ATTRIBUTE)) {_			String dependsOn = ele.getAttribute(DEPENDS_ON_ATTRIBUTE)__			bd.setDependsOn(StringUtils.tokenizeToStringArray(dependsOn, MULTI_VALUE_ATTRIBUTE_DELIMITERS))__		}__		String autowireCandidate = ele.getAttribute(AUTOWIRE_CANDIDATE_ATTRIBUTE)__		if ("".equals(autowireCandidate) || DEFAULT_VALUE.equals(autowireCandidate)) {_			String candidatePattern = this.defaults.getAutowireCandidates()__			if (candidatePattern != null) {_				String[] patterns = StringUtils.commaDelimitedListToStringArray(candidatePattern)__				bd.setAutowireCandidate(PatternMatchUtils.simpleMatch(patterns, beanName))__			}_		}_		else {_			bd.setAutowireCandidate(TRUE_VALUE.equals(autowireCandidate))__		}__		if (ele.hasAttribute(PRIMARY_ATTRIBUTE)) {_			bd.setPrimary(TRUE_VALUE.equals(ele.getAttribute(PRIMARY_ATTRIBUTE)))__		}__		if (ele.hasAttribute(INIT_METHOD_ATTRIBUTE)) {_			String initMethodName = ele.getAttribute(INIT_METHOD_ATTRIBUTE)__			if (!"".equals(initMethodName)) {_				bd.setInitMethodName(initMethodName)__			}_		}_		else {_			if (this.defaults.getInitMethod() != null) {_				bd.setInitMethodName(this.defaults.getInitMethod())__				bd.setEnforceInitMethod(false)__			}_		}__		if (ele.hasAttribute(DESTROY_METHOD_ATTRIBUTE)) {_			String destroyMethodName = ele.getAttribute(DESTROY_METHOD_ATTRIBUTE)__			if (!"".equals(destroyMethodName)) {_				bd.setDestroyMethodName(destroyMethodName)__			}_		}_		else {_			if (this.defaults.getDestroyMethod() != null) {_				bd.setDestroyMethodName(this.defaults.getDestroyMethod())__				bd.setEnforceDestroyMethod(false)__			}_		}__		if (ele.hasAttribute(FACTORY_METHOD_ATTRIBUTE)) {_			bd.setFactoryMethodName(ele.getAttribute(FACTORY_METHOD_ATTRIBUTE))__		}_		if (ele.hasAttribute(FACTORY_BEAN_ATTRIBUTE)) {_			bd.setFactoryBeanName(ele.getAttribute(FACTORY_BEAN_ATTRIBUTE))__		}__		return bd__	};apply,the,attributes,of,the,given,bean,element,to,the,given,bean,definition,param,ele,bean,declaration,element,param,bean,name,bean,name,param,containing,bean,containing,bean,definition,return,a,bean,definition,initialized,according,to,the,bean,element,attributes;public,abstract,bean,definition,parse,bean,definition,attributes,element,ele,string,bean,name,bean,definition,containing,bean,abstract,bean,definition,bd,if,ele,has,attribute,bd,set,scope,ele,get,attribute,if,ele,has,attribute,error,specify,either,scope,or,singleton,not,both,ele,else,if,ele,has,attribute,bd,set,scope,equals,ele,get,attribute,bean,definition,bean,definition,else,if,containing,bean,null,bd,set,scope,containing,bean,get,scope,if,ele,has,attribute,bd,set,abstract,equals,ele,get,attribute,string,lazy,init,ele,get,attribute,if,equals,lazy,init,lazy,init,this,defaults,get,lazy,init,bd,set,lazy,init,equals,lazy,init,string,autowire,ele,get,attribute,bd,set,autowire,mode,get,autowire,mode,autowire,string,dependency,check,ele,get,attribute,bd,set,dependency,check,get,dependency,check,dependency,check,if,ele,has,attribute,string,depends,on,ele,get,attribute,bd,set,depends,on,string,utils,tokenize,to,string,array,depends,on,string,autowire,candidate,ele,get,attribute,if,equals,autowire,candidate,equals,autowire,candidate,string,candidate,pattern,this,defaults,get,autowire,candidates,if,candidate,pattern,null,string,patterns,string,utils,comma,delimited,list,to,string,array,candidate,pattern,bd,set,autowire,candidate,pattern,match,utils,simple,match,patterns,bean,name,else,bd,set,autowire,candidate,equals,autowire,candidate,if,ele,has,attribute,bd,set,primary,equals,ele,get,attribute,if,ele,has,attribute,string,init,method,name,ele,get,attribute,if,equals,init,method,name,bd,set,init,method,name,init,method,name,else,if,this,defaults,get,init,method,null,bd,set,init,method,name,this,defaults,get,init,method,bd,set,enforce,init,method,false,if,ele,has,attribute,string,destroy,method,name,ele,get,attribute,if,equals,destroy,method,name,bd,set,destroy,method,name,destroy,method,name,else,if,this,defaults,get,destroy,method,null,bd,set,destroy,method,name,this,defaults,get,destroy,method,bd,set,enforce,destroy,method,false,if,ele,has,attribute,bd,set,factory,method,name,ele,get,attribute,if,ele,has,attribute,bd,set,factory,bean,name,ele,get,attribute,return,bd
BeanDefinitionParserDelegate -> public AbstractBeanDefinition parseBeanDefinitionAttributes(Element ele, String beanName, 			BeanDefinition containingBean, AbstractBeanDefinition bd);1337341719;Apply the attributes of the given bean element to the given bean * definition._@param ele bean declaration element_@param beanName bean name_@param containingBean containing bean definition_@return a bean definition initialized according to the bean element attributes;public AbstractBeanDefinition parseBeanDefinitionAttributes(Element ele, String beanName,_			BeanDefinition containingBean, AbstractBeanDefinition bd) {__		if (ele.hasAttribute(SCOPE_ATTRIBUTE)) {_			_			bd.setScope(ele.getAttribute(SCOPE_ATTRIBUTE))__			if (ele.hasAttribute(SINGLETON_ATTRIBUTE)) {_				error("Specify either 'scope' or 'singleton', not both", ele)__			}_		}_		else if (ele.hasAttribute(SINGLETON_ATTRIBUTE)) {_			_			bd.setScope(TRUE_VALUE.equals(ele.getAttribute(SINGLETON_ATTRIBUTE)) ?_					BeanDefinition.SCOPE_SINGLETON : BeanDefinition.SCOPE_PROTOTYPE)__		}_		else if (containingBean != null) {_			_			bd.setScope(containingBean.getScope())__		}__		if (ele.hasAttribute(ABSTRACT_ATTRIBUTE)) {_			bd.setAbstract(TRUE_VALUE.equals(ele.getAttribute(ABSTRACT_ATTRIBUTE)))__		}__		String lazyInit = ele.getAttribute(LAZY_INIT_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(lazyInit)) {_			lazyInit = this.defaults.getLazyInit()__		}_		bd.setLazyInit(TRUE_VALUE.equals(lazyInit))___		String autowire = ele.getAttribute(AUTOWIRE_ATTRIBUTE)__		bd.setAutowireMode(getAutowireMode(autowire))___		String dependencyCheck = ele.getAttribute(DEPENDENCY_CHECK_ATTRIBUTE)__		bd.setDependencyCheck(getDependencyCheck(dependencyCheck))___		if (ele.hasAttribute(DEPENDS_ON_ATTRIBUTE)) {_			String dependsOn = ele.getAttribute(DEPENDS_ON_ATTRIBUTE)__			bd.setDependsOn(StringUtils.tokenizeToStringArray(dependsOn, MULTI_VALUE_ATTRIBUTE_DELIMITERS))__		}__		String autowireCandidate = ele.getAttribute(AUTOWIRE_CANDIDATE_ATTRIBUTE)__		if ("".equals(autowireCandidate) || DEFAULT_VALUE.equals(autowireCandidate)) {_			String candidatePattern = this.defaults.getAutowireCandidates()__			if (candidatePattern != null) {_				String[] patterns = StringUtils.commaDelimitedListToStringArray(candidatePattern)__				bd.setAutowireCandidate(PatternMatchUtils.simpleMatch(patterns, beanName))__			}_		}_		else {_			bd.setAutowireCandidate(TRUE_VALUE.equals(autowireCandidate))__		}__		if (ele.hasAttribute(PRIMARY_ATTRIBUTE)) {_			bd.setPrimary(TRUE_VALUE.equals(ele.getAttribute(PRIMARY_ATTRIBUTE)))__		}__		if (ele.hasAttribute(INIT_METHOD_ATTRIBUTE)) {_			String initMethodName = ele.getAttribute(INIT_METHOD_ATTRIBUTE)__			if (!"".equals(initMethodName)) {_				bd.setInitMethodName(initMethodName)__			}_		}_		else {_			if (this.defaults.getInitMethod() != null) {_				bd.setInitMethodName(this.defaults.getInitMethod())__				bd.setEnforceInitMethod(false)__			}_		}__		if (ele.hasAttribute(DESTROY_METHOD_ATTRIBUTE)) {_			String destroyMethodName = ele.getAttribute(DESTROY_METHOD_ATTRIBUTE)__			if (!"".equals(destroyMethodName)) {_				bd.setDestroyMethodName(destroyMethodName)__			}_		}_		else {_			if (this.defaults.getDestroyMethod() != null) {_				bd.setDestroyMethodName(this.defaults.getDestroyMethod())__				bd.setEnforceDestroyMethod(false)__			}_		}__		if (ele.hasAttribute(FACTORY_METHOD_ATTRIBUTE)) {_			bd.setFactoryMethodName(ele.getAttribute(FACTORY_METHOD_ATTRIBUTE))__		}_		if (ele.hasAttribute(FACTORY_BEAN_ATTRIBUTE)) {_			bd.setFactoryBeanName(ele.getAttribute(FACTORY_BEAN_ATTRIBUTE))__		}__		return bd__	};apply,the,attributes,of,the,given,bean,element,to,the,given,bean,definition,param,ele,bean,declaration,element,param,bean,name,bean,name,param,containing,bean,containing,bean,definition,return,a,bean,definition,initialized,according,to,the,bean,element,attributes;public,abstract,bean,definition,parse,bean,definition,attributes,element,ele,string,bean,name,bean,definition,containing,bean,abstract,bean,definition,bd,if,ele,has,attribute,bd,set,scope,ele,get,attribute,if,ele,has,attribute,error,specify,either,scope,or,singleton,not,both,ele,else,if,ele,has,attribute,bd,set,scope,equals,ele,get,attribute,bean,definition,bean,definition,else,if,containing,bean,null,bd,set,scope,containing,bean,get,scope,if,ele,has,attribute,bd,set,abstract,equals,ele,get,attribute,string,lazy,init,ele,get,attribute,if,equals,lazy,init,lazy,init,this,defaults,get,lazy,init,bd,set,lazy,init,equals,lazy,init,string,autowire,ele,get,attribute,bd,set,autowire,mode,get,autowire,mode,autowire,string,dependency,check,ele,get,attribute,bd,set,dependency,check,get,dependency,check,dependency,check,if,ele,has,attribute,string,depends,on,ele,get,attribute,bd,set,depends,on,string,utils,tokenize,to,string,array,depends,on,string,autowire,candidate,ele,get,attribute,if,equals,autowire,candidate,equals,autowire,candidate,string,candidate,pattern,this,defaults,get,autowire,candidates,if,candidate,pattern,null,string,patterns,string,utils,comma,delimited,list,to,string,array,candidate,pattern,bd,set,autowire,candidate,pattern,match,utils,simple,match,patterns,bean,name,else,bd,set,autowire,candidate,equals,autowire,candidate,if,ele,has,attribute,bd,set,primary,equals,ele,get,attribute,if,ele,has,attribute,string,init,method,name,ele,get,attribute,if,equals,init,method,name,bd,set,init,method,name,init,method,name,else,if,this,defaults,get,init,method,null,bd,set,init,method,name,this,defaults,get,init,method,bd,set,enforce,init,method,false,if,ele,has,attribute,string,destroy,method,name,ele,get,attribute,if,equals,destroy,method,name,bd,set,destroy,method,name,destroy,method,name,else,if,this,defaults,get,destroy,method,null,bd,set,destroy,method,name,this,defaults,get,destroy,method,bd,set,enforce,destroy,method,false,if,ele,has,attribute,bd,set,factory,method,name,ele,get,attribute,if,ele,has,attribute,bd,set,factory,bean,name,ele,get,attribute,return,bd
BeanDefinitionParserDelegate -> public AbstractBeanDefinition parseBeanDefinitionAttributes(Element ele, String beanName, 			BeanDefinition containingBean, AbstractBeanDefinition bd);1351392612;Apply the attributes of the given bean element to the given bean * definition._@param ele bean declaration element_@param beanName bean name_@param containingBean containing bean definition_@return a bean definition initialized according to the bean element attributes;public AbstractBeanDefinition parseBeanDefinitionAttributes(Element ele, String beanName,_			BeanDefinition containingBean, AbstractBeanDefinition bd) {__		if (ele.hasAttribute(SCOPE_ATTRIBUTE)) {_			_			bd.setScope(ele.getAttribute(SCOPE_ATTRIBUTE))__			if (ele.hasAttribute(SINGLETON_ATTRIBUTE)) {_				error("Specify either 'scope' or 'singleton', not both", ele)__			}_		}_		else if (ele.hasAttribute(SINGLETON_ATTRIBUTE)) {_			_			bd.setScope(TRUE_VALUE.equals(ele.getAttribute(SINGLETON_ATTRIBUTE)) ?_					BeanDefinition.SCOPE_SINGLETON : BeanDefinition.SCOPE_PROTOTYPE)__		}_		else if (containingBean != null) {_			_			bd.setScope(containingBean.getScope())__		}__		if (ele.hasAttribute(ABSTRACT_ATTRIBUTE)) {_			bd.setAbstract(TRUE_VALUE.equals(ele.getAttribute(ABSTRACT_ATTRIBUTE)))__		}__		String lazyInit = ele.getAttribute(LAZY_INIT_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(lazyInit)) {_			lazyInit = this.defaults.getLazyInit()__		}_		bd.setLazyInit(TRUE_VALUE.equals(lazyInit))___		String autowire = ele.getAttribute(AUTOWIRE_ATTRIBUTE)__		bd.setAutowireMode(getAutowireMode(autowire))___		String dependencyCheck = ele.getAttribute(DEPENDENCY_CHECK_ATTRIBUTE)__		bd.setDependencyCheck(getDependencyCheck(dependencyCheck))___		if (ele.hasAttribute(DEPENDS_ON_ATTRIBUTE)) {_			String dependsOn = ele.getAttribute(DEPENDS_ON_ATTRIBUTE)__			bd.setDependsOn(StringUtils.tokenizeToStringArray(dependsOn, MULTI_VALUE_ATTRIBUTE_DELIMITERS))__		}__		String autowireCandidate = ele.getAttribute(AUTOWIRE_CANDIDATE_ATTRIBUTE)__		if ("".equals(autowireCandidate) || DEFAULT_VALUE.equals(autowireCandidate)) {_			String candidatePattern = this.defaults.getAutowireCandidates()__			if (candidatePattern != null) {_				String[] patterns = StringUtils.commaDelimitedListToStringArray(candidatePattern)__				bd.setAutowireCandidate(PatternMatchUtils.simpleMatch(patterns, beanName))__			}_		}_		else {_			bd.setAutowireCandidate(TRUE_VALUE.equals(autowireCandidate))__		}__		if (ele.hasAttribute(PRIMARY_ATTRIBUTE)) {_			bd.setPrimary(TRUE_VALUE.equals(ele.getAttribute(PRIMARY_ATTRIBUTE)))__		}__		if (ele.hasAttribute(INIT_METHOD_ATTRIBUTE)) {_			String initMethodName = ele.getAttribute(INIT_METHOD_ATTRIBUTE)__			if (!"".equals(initMethodName)) {_				bd.setInitMethodName(initMethodName)__			}_		}_		else {_			if (this.defaults.getInitMethod() != null) {_				bd.setInitMethodName(this.defaults.getInitMethod())__				bd.setEnforceInitMethod(false)__			}_		}__		if (ele.hasAttribute(DESTROY_METHOD_ATTRIBUTE)) {_			String destroyMethodName = ele.getAttribute(DESTROY_METHOD_ATTRIBUTE)__			if (!"".equals(destroyMethodName)) {_				bd.setDestroyMethodName(destroyMethodName)__			}_		}_		else {_			if (this.defaults.getDestroyMethod() != null) {_				bd.setDestroyMethodName(this.defaults.getDestroyMethod())__				bd.setEnforceDestroyMethod(false)__			}_		}__		if (ele.hasAttribute(FACTORY_METHOD_ATTRIBUTE)) {_			bd.setFactoryMethodName(ele.getAttribute(FACTORY_METHOD_ATTRIBUTE))__		}_		if (ele.hasAttribute(FACTORY_BEAN_ATTRIBUTE)) {_			bd.setFactoryBeanName(ele.getAttribute(FACTORY_BEAN_ATTRIBUTE))__		}__		return bd__	};apply,the,attributes,of,the,given,bean,element,to,the,given,bean,definition,param,ele,bean,declaration,element,param,bean,name,bean,name,param,containing,bean,containing,bean,definition,return,a,bean,definition,initialized,according,to,the,bean,element,attributes;public,abstract,bean,definition,parse,bean,definition,attributes,element,ele,string,bean,name,bean,definition,containing,bean,abstract,bean,definition,bd,if,ele,has,attribute,bd,set,scope,ele,get,attribute,if,ele,has,attribute,error,specify,either,scope,or,singleton,not,both,ele,else,if,ele,has,attribute,bd,set,scope,equals,ele,get,attribute,bean,definition,bean,definition,else,if,containing,bean,null,bd,set,scope,containing,bean,get,scope,if,ele,has,attribute,bd,set,abstract,equals,ele,get,attribute,string,lazy,init,ele,get,attribute,if,equals,lazy,init,lazy,init,this,defaults,get,lazy,init,bd,set,lazy,init,equals,lazy,init,string,autowire,ele,get,attribute,bd,set,autowire,mode,get,autowire,mode,autowire,string,dependency,check,ele,get,attribute,bd,set,dependency,check,get,dependency,check,dependency,check,if,ele,has,attribute,string,depends,on,ele,get,attribute,bd,set,depends,on,string,utils,tokenize,to,string,array,depends,on,string,autowire,candidate,ele,get,attribute,if,equals,autowire,candidate,equals,autowire,candidate,string,candidate,pattern,this,defaults,get,autowire,candidates,if,candidate,pattern,null,string,patterns,string,utils,comma,delimited,list,to,string,array,candidate,pattern,bd,set,autowire,candidate,pattern,match,utils,simple,match,patterns,bean,name,else,bd,set,autowire,candidate,equals,autowire,candidate,if,ele,has,attribute,bd,set,primary,equals,ele,get,attribute,if,ele,has,attribute,string,init,method,name,ele,get,attribute,if,equals,init,method,name,bd,set,init,method,name,init,method,name,else,if,this,defaults,get,init,method,null,bd,set,init,method,name,this,defaults,get,init,method,bd,set,enforce,init,method,false,if,ele,has,attribute,string,destroy,method,name,ele,get,attribute,if,equals,destroy,method,name,bd,set,destroy,method,name,destroy,method,name,else,if,this,defaults,get,destroy,method,null,bd,set,destroy,method,name,this,defaults,get,destroy,method,bd,set,enforce,destroy,method,false,if,ele,has,attribute,bd,set,factory,method,name,ele,get,attribute,if,ele,has,attribute,bd,set,factory,bean,name,ele,get,attribute,return,bd
BeanDefinitionParserDelegate -> public AbstractBeanDefinition parseBeanDefinitionAttributes(Element ele, String beanName, 			BeanDefinition containingBean, AbstractBeanDefinition bd);1351696936;Apply the attributes of the given bean element to the given bean * definition._@param ele bean declaration element_@param beanName bean name_@param containingBean containing bean definition_@return a bean definition initialized according to the bean element attributes;public AbstractBeanDefinition parseBeanDefinitionAttributes(Element ele, String beanName,_			BeanDefinition containingBean, AbstractBeanDefinition bd) {__		if (ele.hasAttribute(SCOPE_ATTRIBUTE)) {_			_			bd.setScope(ele.getAttribute(SCOPE_ATTRIBUTE))__			if (ele.hasAttribute(SINGLETON_ATTRIBUTE)) {_				error("Specify either 'scope' or 'singleton', not both", ele)__			}_		}_		else if (ele.hasAttribute(SINGLETON_ATTRIBUTE)) {_			_			bd.setScope(TRUE_VALUE.equals(ele.getAttribute(SINGLETON_ATTRIBUTE)) ?_					BeanDefinition.SCOPE_SINGLETON : BeanDefinition.SCOPE_PROTOTYPE)__		}_		else if (containingBean != null) {_			_			bd.setScope(containingBean.getScope())__		}__		if (ele.hasAttribute(ABSTRACT_ATTRIBUTE)) {_			bd.setAbstract(TRUE_VALUE.equals(ele.getAttribute(ABSTRACT_ATTRIBUTE)))__		}__		String lazyInit = ele.getAttribute(LAZY_INIT_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(lazyInit)) {_			lazyInit = this.defaults.getLazyInit()__		}_		bd.setLazyInit(TRUE_VALUE.equals(lazyInit))___		String autowire = ele.getAttribute(AUTOWIRE_ATTRIBUTE)__		bd.setAutowireMode(getAutowireMode(autowire))___		String dependencyCheck = ele.getAttribute(DEPENDENCY_CHECK_ATTRIBUTE)__		bd.setDependencyCheck(getDependencyCheck(dependencyCheck))___		if (ele.hasAttribute(DEPENDS_ON_ATTRIBUTE)) {_			String dependsOn = ele.getAttribute(DEPENDS_ON_ATTRIBUTE)__			bd.setDependsOn(StringUtils.tokenizeToStringArray(dependsOn, MULTI_VALUE_ATTRIBUTE_DELIMITERS))__		}__		String autowireCandidate = ele.getAttribute(AUTOWIRE_CANDIDATE_ATTRIBUTE)__		if ("".equals(autowireCandidate) || DEFAULT_VALUE.equals(autowireCandidate)) {_			String candidatePattern = this.defaults.getAutowireCandidates()__			if (candidatePattern != null) {_				String[] patterns = StringUtils.commaDelimitedListToStringArray(candidatePattern)__				bd.setAutowireCandidate(PatternMatchUtils.simpleMatch(patterns, beanName))__			}_		}_		else {_			bd.setAutowireCandidate(TRUE_VALUE.equals(autowireCandidate))__		}__		if (ele.hasAttribute(PRIMARY_ATTRIBUTE)) {_			bd.setPrimary(TRUE_VALUE.equals(ele.getAttribute(PRIMARY_ATTRIBUTE)))__		}__		if (ele.hasAttribute(INIT_METHOD_ATTRIBUTE)) {_			String initMethodName = ele.getAttribute(INIT_METHOD_ATTRIBUTE)__			if (!"".equals(initMethodName)) {_				bd.setInitMethodName(initMethodName)__			}_		}_		else {_			if (this.defaults.getInitMethod() != null) {_				bd.setInitMethodName(this.defaults.getInitMethod())__				bd.setEnforceInitMethod(false)__			}_		}__		if (ele.hasAttribute(DESTROY_METHOD_ATTRIBUTE)) {_			String destroyMethodName = ele.getAttribute(DESTROY_METHOD_ATTRIBUTE)__			if (!"".equals(destroyMethodName)) {_				bd.setDestroyMethodName(destroyMethodName)__			}_		}_		else {_			if (this.defaults.getDestroyMethod() != null) {_				bd.setDestroyMethodName(this.defaults.getDestroyMethod())__				bd.setEnforceDestroyMethod(false)__			}_		}__		if (ele.hasAttribute(FACTORY_METHOD_ATTRIBUTE)) {_			bd.setFactoryMethodName(ele.getAttribute(FACTORY_METHOD_ATTRIBUTE))__		}_		if (ele.hasAttribute(FACTORY_BEAN_ATTRIBUTE)) {_			bd.setFactoryBeanName(ele.getAttribute(FACTORY_BEAN_ATTRIBUTE))__		}__		return bd__	};apply,the,attributes,of,the,given,bean,element,to,the,given,bean,definition,param,ele,bean,declaration,element,param,bean,name,bean,name,param,containing,bean,containing,bean,definition,return,a,bean,definition,initialized,according,to,the,bean,element,attributes;public,abstract,bean,definition,parse,bean,definition,attributes,element,ele,string,bean,name,bean,definition,containing,bean,abstract,bean,definition,bd,if,ele,has,attribute,bd,set,scope,ele,get,attribute,if,ele,has,attribute,error,specify,either,scope,or,singleton,not,both,ele,else,if,ele,has,attribute,bd,set,scope,equals,ele,get,attribute,bean,definition,bean,definition,else,if,containing,bean,null,bd,set,scope,containing,bean,get,scope,if,ele,has,attribute,bd,set,abstract,equals,ele,get,attribute,string,lazy,init,ele,get,attribute,if,equals,lazy,init,lazy,init,this,defaults,get,lazy,init,bd,set,lazy,init,equals,lazy,init,string,autowire,ele,get,attribute,bd,set,autowire,mode,get,autowire,mode,autowire,string,dependency,check,ele,get,attribute,bd,set,dependency,check,get,dependency,check,dependency,check,if,ele,has,attribute,string,depends,on,ele,get,attribute,bd,set,depends,on,string,utils,tokenize,to,string,array,depends,on,string,autowire,candidate,ele,get,attribute,if,equals,autowire,candidate,equals,autowire,candidate,string,candidate,pattern,this,defaults,get,autowire,candidates,if,candidate,pattern,null,string,patterns,string,utils,comma,delimited,list,to,string,array,candidate,pattern,bd,set,autowire,candidate,pattern,match,utils,simple,match,patterns,bean,name,else,bd,set,autowire,candidate,equals,autowire,candidate,if,ele,has,attribute,bd,set,primary,equals,ele,get,attribute,if,ele,has,attribute,string,init,method,name,ele,get,attribute,if,equals,init,method,name,bd,set,init,method,name,init,method,name,else,if,this,defaults,get,init,method,null,bd,set,init,method,name,this,defaults,get,init,method,bd,set,enforce,init,method,false,if,ele,has,attribute,string,destroy,method,name,ele,get,attribute,if,equals,destroy,method,name,bd,set,destroy,method,name,destroy,method,name,else,if,this,defaults,get,destroy,method,null,bd,set,destroy,method,name,this,defaults,get,destroy,method,bd,set,enforce,destroy,method,false,if,ele,has,attribute,bd,set,factory,method,name,ele,get,attribute,if,ele,has,attribute,bd,set,factory,bean,name,ele,get,attribute,return,bd
BeanDefinitionParserDelegate -> public AbstractBeanDefinition parseBeanDefinitionAttributes(Element ele, String beanName, 			BeanDefinition containingBean, AbstractBeanDefinition bd);1356735495;Apply the attributes of the given bean element to the given bean * definition._@param ele bean declaration element_@param beanName bean name_@param containingBean containing bean definition_@return a bean definition initialized according to the bean element attributes;public AbstractBeanDefinition parseBeanDefinitionAttributes(Element ele, String beanName,_			BeanDefinition containingBean, AbstractBeanDefinition bd) {__		if (ele.hasAttribute(SCOPE_ATTRIBUTE)) {_			_			bd.setScope(ele.getAttribute(SCOPE_ATTRIBUTE))__			if (ele.hasAttribute(SINGLETON_ATTRIBUTE)) {_				error("Specify either 'scope' or 'singleton', not both", ele)__			}_		}_		else if (ele.hasAttribute(SINGLETON_ATTRIBUTE)) {_			_			bd.setScope(TRUE_VALUE.equals(ele.getAttribute(SINGLETON_ATTRIBUTE)) ?_					BeanDefinition.SCOPE_SINGLETON : BeanDefinition.SCOPE_PROTOTYPE)__		}_		else if (containingBean != null) {_			_			bd.setScope(containingBean.getScope())__		}__		if (ele.hasAttribute(ABSTRACT_ATTRIBUTE)) {_			bd.setAbstract(TRUE_VALUE.equals(ele.getAttribute(ABSTRACT_ATTRIBUTE)))__		}__		String lazyInit = ele.getAttribute(LAZY_INIT_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(lazyInit)) {_			lazyInit = this.defaults.getLazyInit()__		}_		bd.setLazyInit(TRUE_VALUE.equals(lazyInit))___		String autowire = ele.getAttribute(AUTOWIRE_ATTRIBUTE)__		bd.setAutowireMode(getAutowireMode(autowire))___		String dependencyCheck = ele.getAttribute(DEPENDENCY_CHECK_ATTRIBUTE)__		bd.setDependencyCheck(getDependencyCheck(dependencyCheck))___		if (ele.hasAttribute(DEPENDS_ON_ATTRIBUTE)) {_			String dependsOn = ele.getAttribute(DEPENDS_ON_ATTRIBUTE)__			bd.setDependsOn(StringUtils.tokenizeToStringArray(dependsOn, MULTI_VALUE_ATTRIBUTE_DELIMITERS))__		}__		String autowireCandidate = ele.getAttribute(AUTOWIRE_CANDIDATE_ATTRIBUTE)__		if ("".equals(autowireCandidate) || DEFAULT_VALUE.equals(autowireCandidate)) {_			String candidatePattern = this.defaults.getAutowireCandidates()__			if (candidatePattern != null) {_				String[] patterns = StringUtils.commaDelimitedListToStringArray(candidatePattern)__				bd.setAutowireCandidate(PatternMatchUtils.simpleMatch(patterns, beanName))__			}_		}_		else {_			bd.setAutowireCandidate(TRUE_VALUE.equals(autowireCandidate))__		}__		if (ele.hasAttribute(PRIMARY_ATTRIBUTE)) {_			bd.setPrimary(TRUE_VALUE.equals(ele.getAttribute(PRIMARY_ATTRIBUTE)))__		}__		if (ele.hasAttribute(INIT_METHOD_ATTRIBUTE)) {_			String initMethodName = ele.getAttribute(INIT_METHOD_ATTRIBUTE)__			if (!"".equals(initMethodName)) {_				bd.setInitMethodName(initMethodName)__			}_		}_		else {_			if (this.defaults.getInitMethod() != null) {_				bd.setInitMethodName(this.defaults.getInitMethod())__				bd.setEnforceInitMethod(false)__			}_		}__		if (ele.hasAttribute(DESTROY_METHOD_ATTRIBUTE)) {_			String destroyMethodName = ele.getAttribute(DESTROY_METHOD_ATTRIBUTE)__			if (!"".equals(destroyMethodName)) {_				bd.setDestroyMethodName(destroyMethodName)__			}_		}_		else {_			if (this.defaults.getDestroyMethod() != null) {_				bd.setDestroyMethodName(this.defaults.getDestroyMethod())__				bd.setEnforceDestroyMethod(false)__			}_		}__		if (ele.hasAttribute(FACTORY_METHOD_ATTRIBUTE)) {_			bd.setFactoryMethodName(ele.getAttribute(FACTORY_METHOD_ATTRIBUTE))__		}_		if (ele.hasAttribute(FACTORY_BEAN_ATTRIBUTE)) {_			bd.setFactoryBeanName(ele.getAttribute(FACTORY_BEAN_ATTRIBUTE))__		}__		return bd__	};apply,the,attributes,of,the,given,bean,element,to,the,given,bean,definition,param,ele,bean,declaration,element,param,bean,name,bean,name,param,containing,bean,containing,bean,definition,return,a,bean,definition,initialized,according,to,the,bean,element,attributes;public,abstract,bean,definition,parse,bean,definition,attributes,element,ele,string,bean,name,bean,definition,containing,bean,abstract,bean,definition,bd,if,ele,has,attribute,bd,set,scope,ele,get,attribute,if,ele,has,attribute,error,specify,either,scope,or,singleton,not,both,ele,else,if,ele,has,attribute,bd,set,scope,equals,ele,get,attribute,bean,definition,bean,definition,else,if,containing,bean,null,bd,set,scope,containing,bean,get,scope,if,ele,has,attribute,bd,set,abstract,equals,ele,get,attribute,string,lazy,init,ele,get,attribute,if,equals,lazy,init,lazy,init,this,defaults,get,lazy,init,bd,set,lazy,init,equals,lazy,init,string,autowire,ele,get,attribute,bd,set,autowire,mode,get,autowire,mode,autowire,string,dependency,check,ele,get,attribute,bd,set,dependency,check,get,dependency,check,dependency,check,if,ele,has,attribute,string,depends,on,ele,get,attribute,bd,set,depends,on,string,utils,tokenize,to,string,array,depends,on,string,autowire,candidate,ele,get,attribute,if,equals,autowire,candidate,equals,autowire,candidate,string,candidate,pattern,this,defaults,get,autowire,candidates,if,candidate,pattern,null,string,patterns,string,utils,comma,delimited,list,to,string,array,candidate,pattern,bd,set,autowire,candidate,pattern,match,utils,simple,match,patterns,bean,name,else,bd,set,autowire,candidate,equals,autowire,candidate,if,ele,has,attribute,bd,set,primary,equals,ele,get,attribute,if,ele,has,attribute,string,init,method,name,ele,get,attribute,if,equals,init,method,name,bd,set,init,method,name,init,method,name,else,if,this,defaults,get,init,method,null,bd,set,init,method,name,this,defaults,get,init,method,bd,set,enforce,init,method,false,if,ele,has,attribute,string,destroy,method,name,ele,get,attribute,if,equals,destroy,method,name,bd,set,destroy,method,name,destroy,method,name,else,if,this,defaults,get,destroy,method,null,bd,set,destroy,method,name,this,defaults,get,destroy,method,bd,set,enforce,destroy,method,false,if,ele,has,attribute,bd,set,factory,method,name,ele,get,attribute,if,ele,has,attribute,bd,set,factory,bean,name,ele,get,attribute,return,bd
BeanDefinitionParserDelegate -> public AbstractBeanDefinition parseBeanDefinitionAttributes(Element ele, String beanName, 			BeanDefinition containingBean, AbstractBeanDefinition bd);1357119417;Apply the attributes of the given bean element to the given bean * definition._@param ele bean declaration element_@param beanName bean name_@param containingBean containing bean definition_@return a bean definition initialized according to the bean element attributes;public AbstractBeanDefinition parseBeanDefinitionAttributes(Element ele, String beanName,_			BeanDefinition containingBean, AbstractBeanDefinition bd) {__		if (ele.hasAttribute(SCOPE_ATTRIBUTE)) {_			_			bd.setScope(ele.getAttribute(SCOPE_ATTRIBUTE))__			if (ele.hasAttribute(SINGLETON_ATTRIBUTE)) {_				error("Specify either 'scope' or 'singleton', not both", ele)__			}_		}_		else if (ele.hasAttribute(SINGLETON_ATTRIBUTE)) {_			_			bd.setScope(TRUE_VALUE.equals(ele.getAttribute(SINGLETON_ATTRIBUTE)) ?_					BeanDefinition.SCOPE_SINGLETON : BeanDefinition.SCOPE_PROTOTYPE)__		}_		else if (containingBean != null) {_			_			bd.setScope(containingBean.getScope())__		}__		if (ele.hasAttribute(ABSTRACT_ATTRIBUTE)) {_			bd.setAbstract(TRUE_VALUE.equals(ele.getAttribute(ABSTRACT_ATTRIBUTE)))__		}__		String lazyInit = ele.getAttribute(LAZY_INIT_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(lazyInit)) {_			lazyInit = this.defaults.getLazyInit()__		}_		bd.setLazyInit(TRUE_VALUE.equals(lazyInit))___		String autowire = ele.getAttribute(AUTOWIRE_ATTRIBUTE)__		bd.setAutowireMode(getAutowireMode(autowire))___		String dependencyCheck = ele.getAttribute(DEPENDENCY_CHECK_ATTRIBUTE)__		bd.setDependencyCheck(getDependencyCheck(dependencyCheck))___		if (ele.hasAttribute(DEPENDS_ON_ATTRIBUTE)) {_			String dependsOn = ele.getAttribute(DEPENDS_ON_ATTRIBUTE)__			bd.setDependsOn(StringUtils.tokenizeToStringArray(dependsOn, MULTI_VALUE_ATTRIBUTE_DELIMITERS))__		}__		String autowireCandidate = ele.getAttribute(AUTOWIRE_CANDIDATE_ATTRIBUTE)__		if ("".equals(autowireCandidate) || DEFAULT_VALUE.equals(autowireCandidate)) {_			String candidatePattern = this.defaults.getAutowireCandidates()__			if (candidatePattern != null) {_				String[] patterns = StringUtils.commaDelimitedListToStringArray(candidatePattern)__				bd.setAutowireCandidate(PatternMatchUtils.simpleMatch(patterns, beanName))__			}_		}_		else {_			bd.setAutowireCandidate(TRUE_VALUE.equals(autowireCandidate))__		}__		if (ele.hasAttribute(PRIMARY_ATTRIBUTE)) {_			bd.setPrimary(TRUE_VALUE.equals(ele.getAttribute(PRIMARY_ATTRIBUTE)))__		}__		if (ele.hasAttribute(INIT_METHOD_ATTRIBUTE)) {_			String initMethodName = ele.getAttribute(INIT_METHOD_ATTRIBUTE)__			if (!"".equals(initMethodName)) {_				bd.setInitMethodName(initMethodName)__			}_		}_		else {_			if (this.defaults.getInitMethod() != null) {_				bd.setInitMethodName(this.defaults.getInitMethod())__				bd.setEnforceInitMethod(false)__			}_		}__		if (ele.hasAttribute(DESTROY_METHOD_ATTRIBUTE)) {_			String destroyMethodName = ele.getAttribute(DESTROY_METHOD_ATTRIBUTE)__			if (!"".equals(destroyMethodName)) {_				bd.setDestroyMethodName(destroyMethodName)__			}_		}_		else {_			if (this.defaults.getDestroyMethod() != null) {_				bd.setDestroyMethodName(this.defaults.getDestroyMethod())__				bd.setEnforceDestroyMethod(false)__			}_		}__		if (ele.hasAttribute(FACTORY_METHOD_ATTRIBUTE)) {_			bd.setFactoryMethodName(ele.getAttribute(FACTORY_METHOD_ATTRIBUTE))__		}_		if (ele.hasAttribute(FACTORY_BEAN_ATTRIBUTE)) {_			bd.setFactoryBeanName(ele.getAttribute(FACTORY_BEAN_ATTRIBUTE))__		}__		return bd__	};apply,the,attributes,of,the,given,bean,element,to,the,given,bean,definition,param,ele,bean,declaration,element,param,bean,name,bean,name,param,containing,bean,containing,bean,definition,return,a,bean,definition,initialized,according,to,the,bean,element,attributes;public,abstract,bean,definition,parse,bean,definition,attributes,element,ele,string,bean,name,bean,definition,containing,bean,abstract,bean,definition,bd,if,ele,has,attribute,bd,set,scope,ele,get,attribute,if,ele,has,attribute,error,specify,either,scope,or,singleton,not,both,ele,else,if,ele,has,attribute,bd,set,scope,equals,ele,get,attribute,bean,definition,bean,definition,else,if,containing,bean,null,bd,set,scope,containing,bean,get,scope,if,ele,has,attribute,bd,set,abstract,equals,ele,get,attribute,string,lazy,init,ele,get,attribute,if,equals,lazy,init,lazy,init,this,defaults,get,lazy,init,bd,set,lazy,init,equals,lazy,init,string,autowire,ele,get,attribute,bd,set,autowire,mode,get,autowire,mode,autowire,string,dependency,check,ele,get,attribute,bd,set,dependency,check,get,dependency,check,dependency,check,if,ele,has,attribute,string,depends,on,ele,get,attribute,bd,set,depends,on,string,utils,tokenize,to,string,array,depends,on,string,autowire,candidate,ele,get,attribute,if,equals,autowire,candidate,equals,autowire,candidate,string,candidate,pattern,this,defaults,get,autowire,candidates,if,candidate,pattern,null,string,patterns,string,utils,comma,delimited,list,to,string,array,candidate,pattern,bd,set,autowire,candidate,pattern,match,utils,simple,match,patterns,bean,name,else,bd,set,autowire,candidate,equals,autowire,candidate,if,ele,has,attribute,bd,set,primary,equals,ele,get,attribute,if,ele,has,attribute,string,init,method,name,ele,get,attribute,if,equals,init,method,name,bd,set,init,method,name,init,method,name,else,if,this,defaults,get,init,method,null,bd,set,init,method,name,this,defaults,get,init,method,bd,set,enforce,init,method,false,if,ele,has,attribute,string,destroy,method,name,ele,get,attribute,if,equals,destroy,method,name,bd,set,destroy,method,name,destroy,method,name,else,if,this,defaults,get,destroy,method,null,bd,set,destroy,method,name,this,defaults,get,destroy,method,bd,set,enforce,destroy,method,false,if,ele,has,attribute,bd,set,factory,method,name,ele,get,attribute,if,ele,has,attribute,bd,set,factory,bean,name,ele,get,attribute,return,bd
BeanDefinitionParserDelegate -> public AbstractBeanDefinition parseBeanDefinitionAttributes(Element ele, String beanName, 			BeanDefinition containingBean, AbstractBeanDefinition bd);1367943112;Apply the attributes of the given bean element to the given bean * definition._@param ele bean declaration element_@param beanName bean name_@param containingBean containing bean definition_@return a bean definition initialized according to the bean element attributes;public AbstractBeanDefinition parseBeanDefinitionAttributes(Element ele, String beanName,_			BeanDefinition containingBean, AbstractBeanDefinition bd) {__		if (ele.hasAttribute(SCOPE_ATTRIBUTE)) {_			bd.setScope(ele.getAttribute(SCOPE_ATTRIBUTE))__		}_		else if (containingBean != null) {_			_			bd.setScope(containingBean.getScope())__		}__		if (ele.hasAttribute(ABSTRACT_ATTRIBUTE)) {_			bd.setAbstract(TRUE_VALUE.equals(ele.getAttribute(ABSTRACT_ATTRIBUTE)))__		}__		String lazyInit = ele.getAttribute(LAZY_INIT_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(lazyInit)) {_			lazyInit = this.defaults.getLazyInit()__		}_		bd.setLazyInit(TRUE_VALUE.equals(lazyInit))___		String autowire = ele.getAttribute(AUTOWIRE_ATTRIBUTE)__		bd.setAutowireMode(getAutowireMode(autowire))___		String dependencyCheck = ele.getAttribute(DEPENDENCY_CHECK_ATTRIBUTE)__		bd.setDependencyCheck(getDependencyCheck(dependencyCheck))___		if (ele.hasAttribute(DEPENDS_ON_ATTRIBUTE)) {_			String dependsOn = ele.getAttribute(DEPENDS_ON_ATTRIBUTE)__			bd.setDependsOn(StringUtils.tokenizeToStringArray(dependsOn, MULTI_VALUE_ATTRIBUTE_DELIMITERS))__		}__		String autowireCandidate = ele.getAttribute(AUTOWIRE_CANDIDATE_ATTRIBUTE)__		if ("".equals(autowireCandidate) || DEFAULT_VALUE.equals(autowireCandidate)) {_			String candidatePattern = this.defaults.getAutowireCandidates()__			if (candidatePattern != null) {_				String[] patterns = StringUtils.commaDelimitedListToStringArray(candidatePattern)__				bd.setAutowireCandidate(PatternMatchUtils.simpleMatch(patterns, beanName))__			}_		}_		else {_			bd.setAutowireCandidate(TRUE_VALUE.equals(autowireCandidate))__		}__		if (ele.hasAttribute(PRIMARY_ATTRIBUTE)) {_			bd.setPrimary(TRUE_VALUE.equals(ele.getAttribute(PRIMARY_ATTRIBUTE)))__		}__		if (ele.hasAttribute(INIT_METHOD_ATTRIBUTE)) {_			String initMethodName = ele.getAttribute(INIT_METHOD_ATTRIBUTE)__			if (!"".equals(initMethodName)) {_				bd.setInitMethodName(initMethodName)__			}_		}_		else {_			if (this.defaults.getInitMethod() != null) {_				bd.setInitMethodName(this.defaults.getInitMethod())__				bd.setEnforceInitMethod(false)__			}_		}__		if (ele.hasAttribute(DESTROY_METHOD_ATTRIBUTE)) {_			String destroyMethodName = ele.getAttribute(DESTROY_METHOD_ATTRIBUTE)__			if (!"".equals(destroyMethodName)) {_				bd.setDestroyMethodName(destroyMethodName)__			}_		}_		else {_			if (this.defaults.getDestroyMethod() != null) {_				bd.setDestroyMethodName(this.defaults.getDestroyMethod())__				bd.setEnforceDestroyMethod(false)__			}_		}__		if (ele.hasAttribute(FACTORY_METHOD_ATTRIBUTE)) {_			bd.setFactoryMethodName(ele.getAttribute(FACTORY_METHOD_ATTRIBUTE))__		}_		if (ele.hasAttribute(FACTORY_BEAN_ATTRIBUTE)) {_			bd.setFactoryBeanName(ele.getAttribute(FACTORY_BEAN_ATTRIBUTE))__		}__		return bd__	};apply,the,attributes,of,the,given,bean,element,to,the,given,bean,definition,param,ele,bean,declaration,element,param,bean,name,bean,name,param,containing,bean,containing,bean,definition,return,a,bean,definition,initialized,according,to,the,bean,element,attributes;public,abstract,bean,definition,parse,bean,definition,attributes,element,ele,string,bean,name,bean,definition,containing,bean,abstract,bean,definition,bd,if,ele,has,attribute,bd,set,scope,ele,get,attribute,else,if,containing,bean,null,bd,set,scope,containing,bean,get,scope,if,ele,has,attribute,bd,set,abstract,equals,ele,get,attribute,string,lazy,init,ele,get,attribute,if,equals,lazy,init,lazy,init,this,defaults,get,lazy,init,bd,set,lazy,init,equals,lazy,init,string,autowire,ele,get,attribute,bd,set,autowire,mode,get,autowire,mode,autowire,string,dependency,check,ele,get,attribute,bd,set,dependency,check,get,dependency,check,dependency,check,if,ele,has,attribute,string,depends,on,ele,get,attribute,bd,set,depends,on,string,utils,tokenize,to,string,array,depends,on,string,autowire,candidate,ele,get,attribute,if,equals,autowire,candidate,equals,autowire,candidate,string,candidate,pattern,this,defaults,get,autowire,candidates,if,candidate,pattern,null,string,patterns,string,utils,comma,delimited,list,to,string,array,candidate,pattern,bd,set,autowire,candidate,pattern,match,utils,simple,match,patterns,bean,name,else,bd,set,autowire,candidate,equals,autowire,candidate,if,ele,has,attribute,bd,set,primary,equals,ele,get,attribute,if,ele,has,attribute,string,init,method,name,ele,get,attribute,if,equals,init,method,name,bd,set,init,method,name,init,method,name,else,if,this,defaults,get,init,method,null,bd,set,init,method,name,this,defaults,get,init,method,bd,set,enforce,init,method,false,if,ele,has,attribute,string,destroy,method,name,ele,get,attribute,if,equals,destroy,method,name,bd,set,destroy,method,name,destroy,method,name,else,if,this,defaults,get,destroy,method,null,bd,set,destroy,method,name,this,defaults,get,destroy,method,bd,set,enforce,destroy,method,false,if,ele,has,attribute,bd,set,factory,method,name,ele,get,attribute,if,ele,has,attribute,bd,set,factory,bean,name,ele,get,attribute,return,bd
BeanDefinitionParserDelegate -> public AbstractBeanDefinition parseBeanDefinitionAttributes(Element ele, String beanName, 			BeanDefinition containingBean, AbstractBeanDefinition bd);1382030648;Apply the attributes of the given bean element to the given bean * definition._@param ele bean declaration element_@param beanName bean name_@param containingBean containing bean definition_@return a bean definition initialized according to the bean element attributes;public AbstractBeanDefinition parseBeanDefinitionAttributes(Element ele, String beanName,_			BeanDefinition containingBean, AbstractBeanDefinition bd) {__		if (ele.hasAttribute(SCOPE_ATTRIBUTE)) {_			bd.setScope(ele.getAttribute(SCOPE_ATTRIBUTE))__		}_		else if (containingBean != null) {_			_			bd.setScope(containingBean.getScope())__		}__		if (ele.hasAttribute(ABSTRACT_ATTRIBUTE)) {_			bd.setAbstract(TRUE_VALUE.equals(ele.getAttribute(ABSTRACT_ATTRIBUTE)))__		}__		String lazyInit = ele.getAttribute(LAZY_INIT_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(lazyInit)) {_			lazyInit = this.defaults.getLazyInit()__		}_		bd.setLazyInit(TRUE_VALUE.equals(lazyInit))___		String autowire = ele.getAttribute(AUTOWIRE_ATTRIBUTE)__		bd.setAutowireMode(getAutowireMode(autowire))___		String dependencyCheck = ele.getAttribute(DEPENDENCY_CHECK_ATTRIBUTE)__		bd.setDependencyCheck(getDependencyCheck(dependencyCheck))___		if (ele.hasAttribute(DEPENDS_ON_ATTRIBUTE)) {_			String dependsOn = ele.getAttribute(DEPENDS_ON_ATTRIBUTE)__			bd.setDependsOn(StringUtils.tokenizeToStringArray(dependsOn, MULTI_VALUE_ATTRIBUTE_DELIMITERS))__		}__		String autowireCandidate = ele.getAttribute(AUTOWIRE_CANDIDATE_ATTRIBUTE)__		if ("".equals(autowireCandidate) || DEFAULT_VALUE.equals(autowireCandidate)) {_			String candidatePattern = this.defaults.getAutowireCandidates()__			if (candidatePattern != null) {_				String[] patterns = StringUtils.commaDelimitedListToStringArray(candidatePattern)__				bd.setAutowireCandidate(PatternMatchUtils.simpleMatch(patterns, beanName))__			}_		}_		else {_			bd.setAutowireCandidate(TRUE_VALUE.equals(autowireCandidate))__		}__		if (ele.hasAttribute(PRIMARY_ATTRIBUTE)) {_			bd.setPrimary(TRUE_VALUE.equals(ele.getAttribute(PRIMARY_ATTRIBUTE)))__		}__		if (ele.hasAttribute(INIT_METHOD_ATTRIBUTE)) {_			String initMethodName = ele.getAttribute(INIT_METHOD_ATTRIBUTE)__			if (!"".equals(initMethodName)) {_				bd.setInitMethodName(initMethodName)__			}_		}_		else {_			if (this.defaults.getInitMethod() != null) {_				bd.setInitMethodName(this.defaults.getInitMethod())__				bd.setEnforceInitMethod(false)__			}_		}__		if (ele.hasAttribute(DESTROY_METHOD_ATTRIBUTE)) {_			String destroyMethodName = ele.getAttribute(DESTROY_METHOD_ATTRIBUTE)__			if (!"".equals(destroyMethodName)) {_				bd.setDestroyMethodName(destroyMethodName)__			}_		}_		else {_			if (this.defaults.getDestroyMethod() != null) {_				bd.setDestroyMethodName(this.defaults.getDestroyMethod())__				bd.setEnforceDestroyMethod(false)__			}_		}__		if (ele.hasAttribute(FACTORY_METHOD_ATTRIBUTE)) {_			bd.setFactoryMethodName(ele.getAttribute(FACTORY_METHOD_ATTRIBUTE))__		}_		if (ele.hasAttribute(FACTORY_BEAN_ATTRIBUTE)) {_			bd.setFactoryBeanName(ele.getAttribute(FACTORY_BEAN_ATTRIBUTE))__		}__		return bd__	};apply,the,attributes,of,the,given,bean,element,to,the,given,bean,definition,param,ele,bean,declaration,element,param,bean,name,bean,name,param,containing,bean,containing,bean,definition,return,a,bean,definition,initialized,according,to,the,bean,element,attributes;public,abstract,bean,definition,parse,bean,definition,attributes,element,ele,string,bean,name,bean,definition,containing,bean,abstract,bean,definition,bd,if,ele,has,attribute,bd,set,scope,ele,get,attribute,else,if,containing,bean,null,bd,set,scope,containing,bean,get,scope,if,ele,has,attribute,bd,set,abstract,equals,ele,get,attribute,string,lazy,init,ele,get,attribute,if,equals,lazy,init,lazy,init,this,defaults,get,lazy,init,bd,set,lazy,init,equals,lazy,init,string,autowire,ele,get,attribute,bd,set,autowire,mode,get,autowire,mode,autowire,string,dependency,check,ele,get,attribute,bd,set,dependency,check,get,dependency,check,dependency,check,if,ele,has,attribute,string,depends,on,ele,get,attribute,bd,set,depends,on,string,utils,tokenize,to,string,array,depends,on,string,autowire,candidate,ele,get,attribute,if,equals,autowire,candidate,equals,autowire,candidate,string,candidate,pattern,this,defaults,get,autowire,candidates,if,candidate,pattern,null,string,patterns,string,utils,comma,delimited,list,to,string,array,candidate,pattern,bd,set,autowire,candidate,pattern,match,utils,simple,match,patterns,bean,name,else,bd,set,autowire,candidate,equals,autowire,candidate,if,ele,has,attribute,bd,set,primary,equals,ele,get,attribute,if,ele,has,attribute,string,init,method,name,ele,get,attribute,if,equals,init,method,name,bd,set,init,method,name,init,method,name,else,if,this,defaults,get,init,method,null,bd,set,init,method,name,this,defaults,get,init,method,bd,set,enforce,init,method,false,if,ele,has,attribute,string,destroy,method,name,ele,get,attribute,if,equals,destroy,method,name,bd,set,destroy,method,name,destroy,method,name,else,if,this,defaults,get,destroy,method,null,bd,set,destroy,method,name,this,defaults,get,destroy,method,bd,set,enforce,destroy,method,false,if,ele,has,attribute,bd,set,factory,method,name,ele,get,attribute,if,ele,has,attribute,bd,set,factory,bean,name,ele,get,attribute,return,bd
BeanDefinitionParserDelegate -> public AbstractBeanDefinition parseBeanDefinitionAttributes(Element ele, String beanName, 			BeanDefinition containingBean, AbstractBeanDefinition bd);1385412762;Apply the attributes of the given bean element to the given bean * definition._@param ele bean declaration element_@param beanName bean name_@param containingBean containing bean definition_@return a bean definition initialized according to the bean element attributes;public AbstractBeanDefinition parseBeanDefinitionAttributes(Element ele, String beanName,_			BeanDefinition containingBean, AbstractBeanDefinition bd) {__		if (ele.hasAttribute(SCOPE_ATTRIBUTE)) {_			bd.setScope(ele.getAttribute(SCOPE_ATTRIBUTE))__		}_		else if (containingBean != null) {_			_			bd.setScope(containingBean.getScope())__		}__		if (ele.hasAttribute(ABSTRACT_ATTRIBUTE)) {_			bd.setAbstract(TRUE_VALUE.equals(ele.getAttribute(ABSTRACT_ATTRIBUTE)))__		}__		String lazyInit = ele.getAttribute(LAZY_INIT_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(lazyInit)) {_			lazyInit = this.defaults.getLazyInit()__		}_		bd.setLazyInit(TRUE_VALUE.equals(lazyInit))___		String autowire = ele.getAttribute(AUTOWIRE_ATTRIBUTE)__		bd.setAutowireMode(getAutowireMode(autowire))___		String dependencyCheck = ele.getAttribute(DEPENDENCY_CHECK_ATTRIBUTE)__		bd.setDependencyCheck(getDependencyCheck(dependencyCheck))___		if (ele.hasAttribute(DEPENDS_ON_ATTRIBUTE)) {_			String dependsOn = ele.getAttribute(DEPENDS_ON_ATTRIBUTE)__			bd.setDependsOn(StringUtils.tokenizeToStringArray(dependsOn, MULTI_VALUE_ATTRIBUTE_DELIMITERS))__		}__		String autowireCandidate = ele.getAttribute(AUTOWIRE_CANDIDATE_ATTRIBUTE)__		if ("".equals(autowireCandidate) || DEFAULT_VALUE.equals(autowireCandidate)) {_			String candidatePattern = this.defaults.getAutowireCandidates()__			if (candidatePattern != null) {_				String[] patterns = StringUtils.commaDelimitedListToStringArray(candidatePattern)__				bd.setAutowireCandidate(PatternMatchUtils.simpleMatch(patterns, beanName))__			}_		}_		else {_			bd.setAutowireCandidate(TRUE_VALUE.equals(autowireCandidate))__		}__		if (ele.hasAttribute(PRIMARY_ATTRIBUTE)) {_			bd.setPrimary(TRUE_VALUE.equals(ele.getAttribute(PRIMARY_ATTRIBUTE)))__		}__		if (ele.hasAttribute(INIT_METHOD_ATTRIBUTE)) {_			String initMethodName = ele.getAttribute(INIT_METHOD_ATTRIBUTE)__			if (!"".equals(initMethodName)) {_				bd.setInitMethodName(initMethodName)__			}_		}_		else {_			if (this.defaults.getInitMethod() != null) {_				bd.setInitMethodName(this.defaults.getInitMethod())__				bd.setEnforceInitMethod(false)__			}_		}__		if (ele.hasAttribute(DESTROY_METHOD_ATTRIBUTE)) {_			String destroyMethodName = ele.getAttribute(DESTROY_METHOD_ATTRIBUTE)__			if (!"".equals(destroyMethodName)) {_				bd.setDestroyMethodName(destroyMethodName)__			}_		}_		else {_			if (this.defaults.getDestroyMethod() != null) {_				bd.setDestroyMethodName(this.defaults.getDestroyMethod())__				bd.setEnforceDestroyMethod(false)__			}_		}__		if (ele.hasAttribute(FACTORY_METHOD_ATTRIBUTE)) {_			bd.setFactoryMethodName(ele.getAttribute(FACTORY_METHOD_ATTRIBUTE))__		}_		if (ele.hasAttribute(FACTORY_BEAN_ATTRIBUTE)) {_			bd.setFactoryBeanName(ele.getAttribute(FACTORY_BEAN_ATTRIBUTE))__		}__		return bd__	};apply,the,attributes,of,the,given,bean,element,to,the,given,bean,definition,param,ele,bean,declaration,element,param,bean,name,bean,name,param,containing,bean,containing,bean,definition,return,a,bean,definition,initialized,according,to,the,bean,element,attributes;public,abstract,bean,definition,parse,bean,definition,attributes,element,ele,string,bean,name,bean,definition,containing,bean,abstract,bean,definition,bd,if,ele,has,attribute,bd,set,scope,ele,get,attribute,else,if,containing,bean,null,bd,set,scope,containing,bean,get,scope,if,ele,has,attribute,bd,set,abstract,equals,ele,get,attribute,string,lazy,init,ele,get,attribute,if,equals,lazy,init,lazy,init,this,defaults,get,lazy,init,bd,set,lazy,init,equals,lazy,init,string,autowire,ele,get,attribute,bd,set,autowire,mode,get,autowire,mode,autowire,string,dependency,check,ele,get,attribute,bd,set,dependency,check,get,dependency,check,dependency,check,if,ele,has,attribute,string,depends,on,ele,get,attribute,bd,set,depends,on,string,utils,tokenize,to,string,array,depends,on,string,autowire,candidate,ele,get,attribute,if,equals,autowire,candidate,equals,autowire,candidate,string,candidate,pattern,this,defaults,get,autowire,candidates,if,candidate,pattern,null,string,patterns,string,utils,comma,delimited,list,to,string,array,candidate,pattern,bd,set,autowire,candidate,pattern,match,utils,simple,match,patterns,bean,name,else,bd,set,autowire,candidate,equals,autowire,candidate,if,ele,has,attribute,bd,set,primary,equals,ele,get,attribute,if,ele,has,attribute,string,init,method,name,ele,get,attribute,if,equals,init,method,name,bd,set,init,method,name,init,method,name,else,if,this,defaults,get,init,method,null,bd,set,init,method,name,this,defaults,get,init,method,bd,set,enforce,init,method,false,if,ele,has,attribute,string,destroy,method,name,ele,get,attribute,if,equals,destroy,method,name,bd,set,destroy,method,name,destroy,method,name,else,if,this,defaults,get,destroy,method,null,bd,set,destroy,method,name,this,defaults,get,destroy,method,bd,set,enforce,destroy,method,false,if,ele,has,attribute,bd,set,factory,method,name,ele,get,attribute,if,ele,has,attribute,bd,set,factory,bean,name,ele,get,attribute,return,bd
BeanDefinitionParserDelegate -> public AbstractBeanDefinition parseBeanDefinitionAttributes(Element ele, String beanName, 			BeanDefinition containingBean, AbstractBeanDefinition bd);1410953197;Apply the attributes of the given bean element to the given bean * definition._@param ele bean declaration element_@param beanName bean name_@param containingBean containing bean definition_@return a bean definition initialized according to the bean element attributes;public AbstractBeanDefinition parseBeanDefinitionAttributes(Element ele, String beanName,_			BeanDefinition containingBean, AbstractBeanDefinition bd) {__		if (ele.hasAttribute(SINGLETON_ATTRIBUTE)) {_			error("Old 1.x 'singleton' attribute in use - upgrade to 'scope' declaration", ele)__		}_		else if (ele.hasAttribute(SCOPE_ATTRIBUTE)) {_			bd.setScope(ele.getAttribute(SCOPE_ATTRIBUTE))__		}_		else if (containingBean != null) {_			_			bd.setScope(containingBean.getScope())__		}__		if (ele.hasAttribute(ABSTRACT_ATTRIBUTE)) {_			bd.setAbstract(TRUE_VALUE.equals(ele.getAttribute(ABSTRACT_ATTRIBUTE)))__		}__		String lazyInit = ele.getAttribute(LAZY_INIT_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(lazyInit)) {_			lazyInit = this.defaults.getLazyInit()__		}_		bd.setLazyInit(TRUE_VALUE.equals(lazyInit))___		String autowire = ele.getAttribute(AUTOWIRE_ATTRIBUTE)__		bd.setAutowireMode(getAutowireMode(autowire))___		String dependencyCheck = ele.getAttribute(DEPENDENCY_CHECK_ATTRIBUTE)__		bd.setDependencyCheck(getDependencyCheck(dependencyCheck))___		if (ele.hasAttribute(DEPENDS_ON_ATTRIBUTE)) {_			String dependsOn = ele.getAttribute(DEPENDS_ON_ATTRIBUTE)__			bd.setDependsOn(StringUtils.tokenizeToStringArray(dependsOn, MULTI_VALUE_ATTRIBUTE_DELIMITERS))__		}__		String autowireCandidate = ele.getAttribute(AUTOWIRE_CANDIDATE_ATTRIBUTE)__		if ("".equals(autowireCandidate) || DEFAULT_VALUE.equals(autowireCandidate)) {_			String candidatePattern = this.defaults.getAutowireCandidates()__			if (candidatePattern != null) {_				String[] patterns = StringUtils.commaDelimitedListToStringArray(candidatePattern)__				bd.setAutowireCandidate(PatternMatchUtils.simpleMatch(patterns, beanName))__			}_		}_		else {_			bd.setAutowireCandidate(TRUE_VALUE.equals(autowireCandidate))__		}__		if (ele.hasAttribute(PRIMARY_ATTRIBUTE)) {_			bd.setPrimary(TRUE_VALUE.equals(ele.getAttribute(PRIMARY_ATTRIBUTE)))__		}__		if (ele.hasAttribute(INIT_METHOD_ATTRIBUTE)) {_			String initMethodName = ele.getAttribute(INIT_METHOD_ATTRIBUTE)__			if (!"".equals(initMethodName)) {_				bd.setInitMethodName(initMethodName)__			}_		}_		else {_			if (this.defaults.getInitMethod() != null) {_				bd.setInitMethodName(this.defaults.getInitMethod())__				bd.setEnforceInitMethod(false)__			}_		}__		if (ele.hasAttribute(DESTROY_METHOD_ATTRIBUTE)) {_			String destroyMethodName = ele.getAttribute(DESTROY_METHOD_ATTRIBUTE)__			if (!"".equals(destroyMethodName)) {_				bd.setDestroyMethodName(destroyMethodName)__			}_		}_		else {_			if (this.defaults.getDestroyMethod() != null) {_				bd.setDestroyMethodName(this.defaults.getDestroyMethod())__				bd.setEnforceDestroyMethod(false)__			}_		}__		if (ele.hasAttribute(FACTORY_METHOD_ATTRIBUTE)) {_			bd.setFactoryMethodName(ele.getAttribute(FACTORY_METHOD_ATTRIBUTE))__		}_		if (ele.hasAttribute(FACTORY_BEAN_ATTRIBUTE)) {_			bd.setFactoryBeanName(ele.getAttribute(FACTORY_BEAN_ATTRIBUTE))__		}__		return bd__	};apply,the,attributes,of,the,given,bean,element,to,the,given,bean,definition,param,ele,bean,declaration,element,param,bean,name,bean,name,param,containing,bean,containing,bean,definition,return,a,bean,definition,initialized,according,to,the,bean,element,attributes;public,abstract,bean,definition,parse,bean,definition,attributes,element,ele,string,bean,name,bean,definition,containing,bean,abstract,bean,definition,bd,if,ele,has,attribute,error,old,1,x,singleton,attribute,in,use,upgrade,to,scope,declaration,ele,else,if,ele,has,attribute,bd,set,scope,ele,get,attribute,else,if,containing,bean,null,bd,set,scope,containing,bean,get,scope,if,ele,has,attribute,bd,set,abstract,equals,ele,get,attribute,string,lazy,init,ele,get,attribute,if,equals,lazy,init,lazy,init,this,defaults,get,lazy,init,bd,set,lazy,init,equals,lazy,init,string,autowire,ele,get,attribute,bd,set,autowire,mode,get,autowire,mode,autowire,string,dependency,check,ele,get,attribute,bd,set,dependency,check,get,dependency,check,dependency,check,if,ele,has,attribute,string,depends,on,ele,get,attribute,bd,set,depends,on,string,utils,tokenize,to,string,array,depends,on,string,autowire,candidate,ele,get,attribute,if,equals,autowire,candidate,equals,autowire,candidate,string,candidate,pattern,this,defaults,get,autowire,candidates,if,candidate,pattern,null,string,patterns,string,utils,comma,delimited,list,to,string,array,candidate,pattern,bd,set,autowire,candidate,pattern,match,utils,simple,match,patterns,bean,name,else,bd,set,autowire,candidate,equals,autowire,candidate,if,ele,has,attribute,bd,set,primary,equals,ele,get,attribute,if,ele,has,attribute,string,init,method,name,ele,get,attribute,if,equals,init,method,name,bd,set,init,method,name,init,method,name,else,if,this,defaults,get,init,method,null,bd,set,init,method,name,this,defaults,get,init,method,bd,set,enforce,init,method,false,if,ele,has,attribute,string,destroy,method,name,ele,get,attribute,if,equals,destroy,method,name,bd,set,destroy,method,name,destroy,method,name,else,if,this,defaults,get,destroy,method,null,bd,set,destroy,method,name,this,defaults,get,destroy,method,bd,set,enforce,destroy,method,false,if,ele,has,attribute,bd,set,factory,method,name,ele,get,attribute,if,ele,has,attribute,bd,set,factory,bean,name,ele,get,attribute,return,bd
BeanDefinitionParserDelegate -> public AbstractBeanDefinition parseBeanDefinitionAttributes(Element ele, String beanName, 			BeanDefinition containingBean, AbstractBeanDefinition bd);1411599760;Apply the attributes of the given bean element to the given bean * definition._@param ele bean declaration element_@param beanName bean name_@param containingBean containing bean definition_@return a bean definition initialized according to the bean element attributes;public AbstractBeanDefinition parseBeanDefinitionAttributes(Element ele, String beanName,_			BeanDefinition containingBean, AbstractBeanDefinition bd) {__		if (ele.hasAttribute(SINGLETON_ATTRIBUTE)) {_			error("Old 1.x 'singleton' attribute in use - upgrade to 'scope' declaration", ele)__		}_		else if (ele.hasAttribute(SCOPE_ATTRIBUTE)) {_			bd.setScope(ele.getAttribute(SCOPE_ATTRIBUTE))__		}_		else if (containingBean != null) {_			_			bd.setScope(containingBean.getScope())__		}__		if (ele.hasAttribute(ABSTRACT_ATTRIBUTE)) {_			bd.setAbstract(TRUE_VALUE.equals(ele.getAttribute(ABSTRACT_ATTRIBUTE)))__		}__		String lazyInit = ele.getAttribute(LAZY_INIT_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(lazyInit)) {_			lazyInit = this.defaults.getLazyInit()__		}_		bd.setLazyInit(TRUE_VALUE.equals(lazyInit))___		String autowire = ele.getAttribute(AUTOWIRE_ATTRIBUTE)__		bd.setAutowireMode(getAutowireMode(autowire))___		String dependencyCheck = ele.getAttribute(DEPENDENCY_CHECK_ATTRIBUTE)__		bd.setDependencyCheck(getDependencyCheck(dependencyCheck))___		if (ele.hasAttribute(DEPENDS_ON_ATTRIBUTE)) {_			String dependsOn = ele.getAttribute(DEPENDS_ON_ATTRIBUTE)__			bd.setDependsOn(StringUtils.tokenizeToStringArray(dependsOn, MULTI_VALUE_ATTRIBUTE_DELIMITERS))__		}__		String autowireCandidate = ele.getAttribute(AUTOWIRE_CANDIDATE_ATTRIBUTE)__		if ("".equals(autowireCandidate) || DEFAULT_VALUE.equals(autowireCandidate)) {_			String candidatePattern = this.defaults.getAutowireCandidates()__			if (candidatePattern != null) {_				String[] patterns = StringUtils.commaDelimitedListToStringArray(candidatePattern)__				bd.setAutowireCandidate(PatternMatchUtils.simpleMatch(patterns, beanName))__			}_		}_		else {_			bd.setAutowireCandidate(TRUE_VALUE.equals(autowireCandidate))__		}__		if (ele.hasAttribute(PRIMARY_ATTRIBUTE)) {_			bd.setPrimary(TRUE_VALUE.equals(ele.getAttribute(PRIMARY_ATTRIBUTE)))__		}__		if (ele.hasAttribute(INIT_METHOD_ATTRIBUTE)) {_			String initMethodName = ele.getAttribute(INIT_METHOD_ATTRIBUTE)__			if (!"".equals(initMethodName)) {_				bd.setInitMethodName(initMethodName)__			}_		}_		else {_			if (this.defaults.getInitMethod() != null) {_				bd.setInitMethodName(this.defaults.getInitMethod())__				bd.setEnforceInitMethod(false)__			}_		}__		if (ele.hasAttribute(DESTROY_METHOD_ATTRIBUTE)) {_			String destroyMethodName = ele.getAttribute(DESTROY_METHOD_ATTRIBUTE)__			if (!"".equals(destroyMethodName)) {_				bd.setDestroyMethodName(destroyMethodName)__			}_		}_		else {_			if (this.defaults.getDestroyMethod() != null) {_				bd.setDestroyMethodName(this.defaults.getDestroyMethod())__				bd.setEnforceDestroyMethod(false)__			}_		}__		if (ele.hasAttribute(FACTORY_METHOD_ATTRIBUTE)) {_			bd.setFactoryMethodName(ele.getAttribute(FACTORY_METHOD_ATTRIBUTE))__		}_		if (ele.hasAttribute(FACTORY_BEAN_ATTRIBUTE)) {_			bd.setFactoryBeanName(ele.getAttribute(FACTORY_BEAN_ATTRIBUTE))__		}__		return bd__	};apply,the,attributes,of,the,given,bean,element,to,the,given,bean,definition,param,ele,bean,declaration,element,param,bean,name,bean,name,param,containing,bean,containing,bean,definition,return,a,bean,definition,initialized,according,to,the,bean,element,attributes;public,abstract,bean,definition,parse,bean,definition,attributes,element,ele,string,bean,name,bean,definition,containing,bean,abstract,bean,definition,bd,if,ele,has,attribute,error,old,1,x,singleton,attribute,in,use,upgrade,to,scope,declaration,ele,else,if,ele,has,attribute,bd,set,scope,ele,get,attribute,else,if,containing,bean,null,bd,set,scope,containing,bean,get,scope,if,ele,has,attribute,bd,set,abstract,equals,ele,get,attribute,string,lazy,init,ele,get,attribute,if,equals,lazy,init,lazy,init,this,defaults,get,lazy,init,bd,set,lazy,init,equals,lazy,init,string,autowire,ele,get,attribute,bd,set,autowire,mode,get,autowire,mode,autowire,string,dependency,check,ele,get,attribute,bd,set,dependency,check,get,dependency,check,dependency,check,if,ele,has,attribute,string,depends,on,ele,get,attribute,bd,set,depends,on,string,utils,tokenize,to,string,array,depends,on,string,autowire,candidate,ele,get,attribute,if,equals,autowire,candidate,equals,autowire,candidate,string,candidate,pattern,this,defaults,get,autowire,candidates,if,candidate,pattern,null,string,patterns,string,utils,comma,delimited,list,to,string,array,candidate,pattern,bd,set,autowire,candidate,pattern,match,utils,simple,match,patterns,bean,name,else,bd,set,autowire,candidate,equals,autowire,candidate,if,ele,has,attribute,bd,set,primary,equals,ele,get,attribute,if,ele,has,attribute,string,init,method,name,ele,get,attribute,if,equals,init,method,name,bd,set,init,method,name,init,method,name,else,if,this,defaults,get,init,method,null,bd,set,init,method,name,this,defaults,get,init,method,bd,set,enforce,init,method,false,if,ele,has,attribute,string,destroy,method,name,ele,get,attribute,if,equals,destroy,method,name,bd,set,destroy,method,name,destroy,method,name,else,if,this,defaults,get,destroy,method,null,bd,set,destroy,method,name,this,defaults,get,destroy,method,bd,set,enforce,destroy,method,false,if,ele,has,attribute,bd,set,factory,method,name,ele,get,attribute,if,ele,has,attribute,bd,set,factory,bean,name,ele,get,attribute,return,bd
BeanDefinitionParserDelegate -> public AbstractBeanDefinition parseBeanDefinitionAttributes(Element ele, String beanName, 			BeanDefinition containingBean, AbstractBeanDefinition bd);1419966315;Apply the attributes of the given bean element to the given bean * definition._@param ele bean declaration element_@param beanName bean name_@param containingBean containing bean definition_@return a bean definition initialized according to the bean element attributes;public AbstractBeanDefinition parseBeanDefinitionAttributes(Element ele, String beanName,_			BeanDefinition containingBean, AbstractBeanDefinition bd) {__		if (ele.hasAttribute(SINGLETON_ATTRIBUTE)) {_			error("Old 1.x 'singleton' attribute in use - upgrade to 'scope' declaration", ele)__		}_		else if (ele.hasAttribute(SCOPE_ATTRIBUTE)) {_			bd.setScope(ele.getAttribute(SCOPE_ATTRIBUTE))__		}_		else if (containingBean != null) {_			_			bd.setScope(containingBean.getScope())__		}__		if (ele.hasAttribute(ABSTRACT_ATTRIBUTE)) {_			bd.setAbstract(TRUE_VALUE.equals(ele.getAttribute(ABSTRACT_ATTRIBUTE)))__		}__		String lazyInit = ele.getAttribute(LAZY_INIT_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(lazyInit)) {_			lazyInit = this.defaults.getLazyInit()__		}_		bd.setLazyInit(TRUE_VALUE.equals(lazyInit))___		String autowire = ele.getAttribute(AUTOWIRE_ATTRIBUTE)__		bd.setAutowireMode(getAutowireMode(autowire))___		String dependencyCheck = ele.getAttribute(DEPENDENCY_CHECK_ATTRIBUTE)__		bd.setDependencyCheck(getDependencyCheck(dependencyCheck))___		if (ele.hasAttribute(DEPENDS_ON_ATTRIBUTE)) {_			String dependsOn = ele.getAttribute(DEPENDS_ON_ATTRIBUTE)__			bd.setDependsOn(StringUtils.tokenizeToStringArray(dependsOn, MULTI_VALUE_ATTRIBUTE_DELIMITERS))__		}__		String autowireCandidate = ele.getAttribute(AUTOWIRE_CANDIDATE_ATTRIBUTE)__		if ("".equals(autowireCandidate) || DEFAULT_VALUE.equals(autowireCandidate)) {_			String candidatePattern = this.defaults.getAutowireCandidates()__			if (candidatePattern != null) {_				String[] patterns = StringUtils.commaDelimitedListToStringArray(candidatePattern)__				bd.setAutowireCandidate(PatternMatchUtils.simpleMatch(patterns, beanName))__			}_		}_		else {_			bd.setAutowireCandidate(TRUE_VALUE.equals(autowireCandidate))__		}__		if (ele.hasAttribute(PRIMARY_ATTRIBUTE)) {_			bd.setPrimary(TRUE_VALUE.equals(ele.getAttribute(PRIMARY_ATTRIBUTE)))__		}__		if (ele.hasAttribute(INIT_METHOD_ATTRIBUTE)) {_			String initMethodName = ele.getAttribute(INIT_METHOD_ATTRIBUTE)__			if (!"".equals(initMethodName)) {_				bd.setInitMethodName(initMethodName)__			}_		}_		else {_			if (this.defaults.getInitMethod() != null) {_				bd.setInitMethodName(this.defaults.getInitMethod())__				bd.setEnforceInitMethod(false)__			}_		}__		if (ele.hasAttribute(DESTROY_METHOD_ATTRIBUTE)) {_			String destroyMethodName = ele.getAttribute(DESTROY_METHOD_ATTRIBUTE)__			if (!"".equals(destroyMethodName)) {_				bd.setDestroyMethodName(destroyMethodName)__			}_		}_		else {_			if (this.defaults.getDestroyMethod() != null) {_				bd.setDestroyMethodName(this.defaults.getDestroyMethod())__				bd.setEnforceDestroyMethod(false)__			}_		}__		if (ele.hasAttribute(FACTORY_METHOD_ATTRIBUTE)) {_			bd.setFactoryMethodName(ele.getAttribute(FACTORY_METHOD_ATTRIBUTE))__		}_		if (ele.hasAttribute(FACTORY_BEAN_ATTRIBUTE)) {_			bd.setFactoryBeanName(ele.getAttribute(FACTORY_BEAN_ATTRIBUTE))__		}__		return bd__	};apply,the,attributes,of,the,given,bean,element,to,the,given,bean,definition,param,ele,bean,declaration,element,param,bean,name,bean,name,param,containing,bean,containing,bean,definition,return,a,bean,definition,initialized,according,to,the,bean,element,attributes;public,abstract,bean,definition,parse,bean,definition,attributes,element,ele,string,bean,name,bean,definition,containing,bean,abstract,bean,definition,bd,if,ele,has,attribute,error,old,1,x,singleton,attribute,in,use,upgrade,to,scope,declaration,ele,else,if,ele,has,attribute,bd,set,scope,ele,get,attribute,else,if,containing,bean,null,bd,set,scope,containing,bean,get,scope,if,ele,has,attribute,bd,set,abstract,equals,ele,get,attribute,string,lazy,init,ele,get,attribute,if,equals,lazy,init,lazy,init,this,defaults,get,lazy,init,bd,set,lazy,init,equals,lazy,init,string,autowire,ele,get,attribute,bd,set,autowire,mode,get,autowire,mode,autowire,string,dependency,check,ele,get,attribute,bd,set,dependency,check,get,dependency,check,dependency,check,if,ele,has,attribute,string,depends,on,ele,get,attribute,bd,set,depends,on,string,utils,tokenize,to,string,array,depends,on,string,autowire,candidate,ele,get,attribute,if,equals,autowire,candidate,equals,autowire,candidate,string,candidate,pattern,this,defaults,get,autowire,candidates,if,candidate,pattern,null,string,patterns,string,utils,comma,delimited,list,to,string,array,candidate,pattern,bd,set,autowire,candidate,pattern,match,utils,simple,match,patterns,bean,name,else,bd,set,autowire,candidate,equals,autowire,candidate,if,ele,has,attribute,bd,set,primary,equals,ele,get,attribute,if,ele,has,attribute,string,init,method,name,ele,get,attribute,if,equals,init,method,name,bd,set,init,method,name,init,method,name,else,if,this,defaults,get,init,method,null,bd,set,init,method,name,this,defaults,get,init,method,bd,set,enforce,init,method,false,if,ele,has,attribute,string,destroy,method,name,ele,get,attribute,if,equals,destroy,method,name,bd,set,destroy,method,name,destroy,method,name,else,if,this,defaults,get,destroy,method,null,bd,set,destroy,method,name,this,defaults,get,destroy,method,bd,set,enforce,destroy,method,false,if,ele,has,attribute,bd,set,factory,method,name,ele,get,attribute,if,ele,has,attribute,bd,set,factory,bean,name,ele,get,attribute,return,bd
BeanDefinitionParserDelegate -> public AbstractBeanDefinition parseBeanDefinitionAttributes(Element ele, String beanName, 			BeanDefinition containingBean, AbstractBeanDefinition bd);1431958785;Apply the attributes of the given bean element to the given bean * definition._@param ele bean declaration element_@param beanName bean name_@param containingBean containing bean definition_@return a bean definition initialized according to the bean element attributes;public AbstractBeanDefinition parseBeanDefinitionAttributes(Element ele, String beanName,_			BeanDefinition containingBean, AbstractBeanDefinition bd) {__		if (ele.hasAttribute(SINGLETON_ATTRIBUTE)) {_			error("Old 1.x 'singleton' attribute in use - upgrade to 'scope' declaration", ele)__		}_		else if (ele.hasAttribute(SCOPE_ATTRIBUTE)) {_			bd.setScope(ele.getAttribute(SCOPE_ATTRIBUTE))__		}_		else if (containingBean != null) {_			_			bd.setScope(containingBean.getScope())__		}__		if (ele.hasAttribute(ABSTRACT_ATTRIBUTE)) {_			bd.setAbstract(TRUE_VALUE.equals(ele.getAttribute(ABSTRACT_ATTRIBUTE)))__		}__		String lazyInit = ele.getAttribute(LAZY_INIT_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(lazyInit)) {_			lazyInit = this.defaults.getLazyInit()__		}_		bd.setLazyInit(TRUE_VALUE.equals(lazyInit))___		String autowire = ele.getAttribute(AUTOWIRE_ATTRIBUTE)__		bd.setAutowireMode(getAutowireMode(autowire))___		String dependencyCheck = ele.getAttribute(DEPENDENCY_CHECK_ATTRIBUTE)__		bd.setDependencyCheck(getDependencyCheck(dependencyCheck))___		if (ele.hasAttribute(DEPENDS_ON_ATTRIBUTE)) {_			String dependsOn = ele.getAttribute(DEPENDS_ON_ATTRIBUTE)__			bd.setDependsOn(StringUtils.tokenizeToStringArray(dependsOn, MULTI_VALUE_ATTRIBUTE_DELIMITERS))__		}__		String autowireCandidate = ele.getAttribute(AUTOWIRE_CANDIDATE_ATTRIBUTE)__		if ("".equals(autowireCandidate) || DEFAULT_VALUE.equals(autowireCandidate)) {_			String candidatePattern = this.defaults.getAutowireCandidates()__			if (candidatePattern != null) {_				String[] patterns = StringUtils.commaDelimitedListToStringArray(candidatePattern)__				bd.setAutowireCandidate(PatternMatchUtils.simpleMatch(patterns, beanName))__			}_		}_		else {_			bd.setAutowireCandidate(TRUE_VALUE.equals(autowireCandidate))__		}__		if (ele.hasAttribute(PRIMARY_ATTRIBUTE)) {_			bd.setPrimary(TRUE_VALUE.equals(ele.getAttribute(PRIMARY_ATTRIBUTE)))__		}__		if (ele.hasAttribute(INIT_METHOD_ATTRIBUTE)) {_			String initMethodName = ele.getAttribute(INIT_METHOD_ATTRIBUTE)__			if (!"".equals(initMethodName)) {_				bd.setInitMethodName(initMethodName)__			}_		}_		else {_			if (this.defaults.getInitMethod() != null) {_				bd.setInitMethodName(this.defaults.getInitMethod())__				bd.setEnforceInitMethod(false)__			}_		}__		if (ele.hasAttribute(DESTROY_METHOD_ATTRIBUTE)) {_			String destroyMethodName = ele.getAttribute(DESTROY_METHOD_ATTRIBUTE)__			if (!"".equals(destroyMethodName)) {_				bd.setDestroyMethodName(destroyMethodName)__			}_		}_		else {_			if (this.defaults.getDestroyMethod() != null) {_				bd.setDestroyMethodName(this.defaults.getDestroyMethod())__				bd.setEnforceDestroyMethod(false)__			}_		}__		if (ele.hasAttribute(FACTORY_METHOD_ATTRIBUTE)) {_			bd.setFactoryMethodName(ele.getAttribute(FACTORY_METHOD_ATTRIBUTE))__		}_		if (ele.hasAttribute(FACTORY_BEAN_ATTRIBUTE)) {_			bd.setFactoryBeanName(ele.getAttribute(FACTORY_BEAN_ATTRIBUTE))__		}__		return bd__	};apply,the,attributes,of,the,given,bean,element,to,the,given,bean,definition,param,ele,bean,declaration,element,param,bean,name,bean,name,param,containing,bean,containing,bean,definition,return,a,bean,definition,initialized,according,to,the,bean,element,attributes;public,abstract,bean,definition,parse,bean,definition,attributes,element,ele,string,bean,name,bean,definition,containing,bean,abstract,bean,definition,bd,if,ele,has,attribute,error,old,1,x,singleton,attribute,in,use,upgrade,to,scope,declaration,ele,else,if,ele,has,attribute,bd,set,scope,ele,get,attribute,else,if,containing,bean,null,bd,set,scope,containing,bean,get,scope,if,ele,has,attribute,bd,set,abstract,equals,ele,get,attribute,string,lazy,init,ele,get,attribute,if,equals,lazy,init,lazy,init,this,defaults,get,lazy,init,bd,set,lazy,init,equals,lazy,init,string,autowire,ele,get,attribute,bd,set,autowire,mode,get,autowire,mode,autowire,string,dependency,check,ele,get,attribute,bd,set,dependency,check,get,dependency,check,dependency,check,if,ele,has,attribute,string,depends,on,ele,get,attribute,bd,set,depends,on,string,utils,tokenize,to,string,array,depends,on,string,autowire,candidate,ele,get,attribute,if,equals,autowire,candidate,equals,autowire,candidate,string,candidate,pattern,this,defaults,get,autowire,candidates,if,candidate,pattern,null,string,patterns,string,utils,comma,delimited,list,to,string,array,candidate,pattern,bd,set,autowire,candidate,pattern,match,utils,simple,match,patterns,bean,name,else,bd,set,autowire,candidate,equals,autowire,candidate,if,ele,has,attribute,bd,set,primary,equals,ele,get,attribute,if,ele,has,attribute,string,init,method,name,ele,get,attribute,if,equals,init,method,name,bd,set,init,method,name,init,method,name,else,if,this,defaults,get,init,method,null,bd,set,init,method,name,this,defaults,get,init,method,bd,set,enforce,init,method,false,if,ele,has,attribute,string,destroy,method,name,ele,get,attribute,if,equals,destroy,method,name,bd,set,destroy,method,name,destroy,method,name,else,if,this,defaults,get,destroy,method,null,bd,set,destroy,method,name,this,defaults,get,destroy,method,bd,set,enforce,destroy,method,false,if,ele,has,attribute,bd,set,factory,method,name,ele,get,attribute,if,ele,has,attribute,bd,set,factory,bean,name,ele,get,attribute,return,bd
BeanDefinitionParserDelegate -> public AbstractBeanDefinition parseBeanDefinitionAttributes(Element ele, String beanName, 			BeanDefinition containingBean, AbstractBeanDefinition bd);1432135182;Apply the attributes of the given bean element to the given bean * definition._@param ele bean declaration element_@param beanName bean name_@param containingBean containing bean definition_@return a bean definition initialized according to the bean element attributes;public AbstractBeanDefinition parseBeanDefinitionAttributes(Element ele, String beanName,_			BeanDefinition containingBean, AbstractBeanDefinition bd) {__		if (ele.hasAttribute(SINGLETON_ATTRIBUTE)) {_			error("Old 1.x 'singleton' attribute in use - upgrade to 'scope' declaration", ele)__		}_		else if (ele.hasAttribute(SCOPE_ATTRIBUTE)) {_			bd.setScope(ele.getAttribute(SCOPE_ATTRIBUTE))__		}_		else if (containingBean != null) {_			_			bd.setScope(containingBean.getScope())__		}__		if (ele.hasAttribute(ABSTRACT_ATTRIBUTE)) {_			bd.setAbstract(TRUE_VALUE.equals(ele.getAttribute(ABSTRACT_ATTRIBUTE)))__		}__		String lazyInit = ele.getAttribute(LAZY_INIT_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(lazyInit)) {_			lazyInit = this.defaults.getLazyInit()__		}_		bd.setLazyInit(TRUE_VALUE.equals(lazyInit))___		String autowire = ele.getAttribute(AUTOWIRE_ATTRIBUTE)__		bd.setAutowireMode(getAutowireMode(autowire))___		String dependencyCheck = ele.getAttribute(DEPENDENCY_CHECK_ATTRIBUTE)__		bd.setDependencyCheck(getDependencyCheck(dependencyCheck))___		if (ele.hasAttribute(DEPENDS_ON_ATTRIBUTE)) {_			String dependsOn = ele.getAttribute(DEPENDS_ON_ATTRIBUTE)__			bd.setDependsOn(StringUtils.tokenizeToStringArray(dependsOn, MULTI_VALUE_ATTRIBUTE_DELIMITERS))__		}__		String autowireCandidate = ele.getAttribute(AUTOWIRE_CANDIDATE_ATTRIBUTE)__		if ("".equals(autowireCandidate) || DEFAULT_VALUE.equals(autowireCandidate)) {_			String candidatePattern = this.defaults.getAutowireCandidates()__			if (candidatePattern != null) {_				String[] patterns = StringUtils.commaDelimitedListToStringArray(candidatePattern)__				bd.setAutowireCandidate(PatternMatchUtils.simpleMatch(patterns, beanName))__			}_		}_		else {_			bd.setAutowireCandidate(TRUE_VALUE.equals(autowireCandidate))__		}__		if (ele.hasAttribute(PRIMARY_ATTRIBUTE)) {_			bd.setPrimary(TRUE_VALUE.equals(ele.getAttribute(PRIMARY_ATTRIBUTE)))__		}__		if (ele.hasAttribute(INIT_METHOD_ATTRIBUTE)) {_			String initMethodName = ele.getAttribute(INIT_METHOD_ATTRIBUTE)__			if (!"".equals(initMethodName)) {_				bd.setInitMethodName(initMethodName)__			}_		}_		else {_			if (this.defaults.getInitMethod() != null) {_				bd.setInitMethodName(this.defaults.getInitMethod())__				bd.setEnforceInitMethod(false)__			}_		}__		if (ele.hasAttribute(DESTROY_METHOD_ATTRIBUTE)) {_			String destroyMethodName = ele.getAttribute(DESTROY_METHOD_ATTRIBUTE)__			bd.setDestroyMethodName(destroyMethodName)__		}_		else {_			if (this.defaults.getDestroyMethod() != null) {_				bd.setDestroyMethodName(this.defaults.getDestroyMethod())__				bd.setEnforceDestroyMethod(false)__			}_		}__		if (ele.hasAttribute(FACTORY_METHOD_ATTRIBUTE)) {_			bd.setFactoryMethodName(ele.getAttribute(FACTORY_METHOD_ATTRIBUTE))__		}_		if (ele.hasAttribute(FACTORY_BEAN_ATTRIBUTE)) {_			bd.setFactoryBeanName(ele.getAttribute(FACTORY_BEAN_ATTRIBUTE))__		}__		return bd__	};apply,the,attributes,of,the,given,bean,element,to,the,given,bean,definition,param,ele,bean,declaration,element,param,bean,name,bean,name,param,containing,bean,containing,bean,definition,return,a,bean,definition,initialized,according,to,the,bean,element,attributes;public,abstract,bean,definition,parse,bean,definition,attributes,element,ele,string,bean,name,bean,definition,containing,bean,abstract,bean,definition,bd,if,ele,has,attribute,error,old,1,x,singleton,attribute,in,use,upgrade,to,scope,declaration,ele,else,if,ele,has,attribute,bd,set,scope,ele,get,attribute,else,if,containing,bean,null,bd,set,scope,containing,bean,get,scope,if,ele,has,attribute,bd,set,abstract,equals,ele,get,attribute,string,lazy,init,ele,get,attribute,if,equals,lazy,init,lazy,init,this,defaults,get,lazy,init,bd,set,lazy,init,equals,lazy,init,string,autowire,ele,get,attribute,bd,set,autowire,mode,get,autowire,mode,autowire,string,dependency,check,ele,get,attribute,bd,set,dependency,check,get,dependency,check,dependency,check,if,ele,has,attribute,string,depends,on,ele,get,attribute,bd,set,depends,on,string,utils,tokenize,to,string,array,depends,on,string,autowire,candidate,ele,get,attribute,if,equals,autowire,candidate,equals,autowire,candidate,string,candidate,pattern,this,defaults,get,autowire,candidates,if,candidate,pattern,null,string,patterns,string,utils,comma,delimited,list,to,string,array,candidate,pattern,bd,set,autowire,candidate,pattern,match,utils,simple,match,patterns,bean,name,else,bd,set,autowire,candidate,equals,autowire,candidate,if,ele,has,attribute,bd,set,primary,equals,ele,get,attribute,if,ele,has,attribute,string,init,method,name,ele,get,attribute,if,equals,init,method,name,bd,set,init,method,name,init,method,name,else,if,this,defaults,get,init,method,null,bd,set,init,method,name,this,defaults,get,init,method,bd,set,enforce,init,method,false,if,ele,has,attribute,string,destroy,method,name,ele,get,attribute,bd,set,destroy,method,name,destroy,method,name,else,if,this,defaults,get,destroy,method,null,bd,set,destroy,method,name,this,defaults,get,destroy,method,bd,set,enforce,destroy,method,false,if,ele,has,attribute,bd,set,factory,method,name,ele,get,attribute,if,ele,has,attribute,bd,set,factory,bean,name,ele,get,attribute,return,bd
BeanDefinitionParserDelegate -> public AbstractBeanDefinition parseBeanDefinitionAttributes(Element ele, String beanName, 			BeanDefinition containingBean, AbstractBeanDefinition bd);1447323728;Apply the attributes of the given bean element to the given bean * definition._@param ele bean declaration element_@param beanName bean name_@param containingBean containing bean definition_@return a bean definition initialized according to the bean element attributes;public AbstractBeanDefinition parseBeanDefinitionAttributes(Element ele, String beanName,_			BeanDefinition containingBean, AbstractBeanDefinition bd) {__		if (ele.hasAttribute(SINGLETON_ATTRIBUTE)) {_			error("Old 1.x 'singleton' attribute in use - upgrade to 'scope' declaration", ele)__		}_		else if (ele.hasAttribute(SCOPE_ATTRIBUTE)) {_			bd.setScope(ele.getAttribute(SCOPE_ATTRIBUTE))__		}_		else if (containingBean != null) {_			_			bd.setScope(containingBean.getScope())__		}__		if (ele.hasAttribute(ABSTRACT_ATTRIBUTE)) {_			bd.setAbstract(TRUE_VALUE.equals(ele.getAttribute(ABSTRACT_ATTRIBUTE)))__		}__		String lazyInit = ele.getAttribute(LAZY_INIT_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(lazyInit)) {_			lazyInit = this.defaults.getLazyInit()__		}_		bd.setLazyInit(TRUE_VALUE.equals(lazyInit))___		String autowire = ele.getAttribute(AUTOWIRE_ATTRIBUTE)__		bd.setAutowireMode(getAutowireMode(autowire))___		String dependencyCheck = ele.getAttribute(DEPENDENCY_CHECK_ATTRIBUTE)__		bd.setDependencyCheck(getDependencyCheck(dependencyCheck))___		if (ele.hasAttribute(DEPENDS_ON_ATTRIBUTE)) {_			String dependsOn = ele.getAttribute(DEPENDS_ON_ATTRIBUTE)__			bd.setDependsOn(StringUtils.tokenizeToStringArray(dependsOn, MULTI_VALUE_ATTRIBUTE_DELIMITERS))__		}__		String autowireCandidate = ele.getAttribute(AUTOWIRE_CANDIDATE_ATTRIBUTE)__		if ("".equals(autowireCandidate) || DEFAULT_VALUE.equals(autowireCandidate)) {_			String candidatePattern = this.defaults.getAutowireCandidates()__			if (candidatePattern != null) {_				String[] patterns = StringUtils.commaDelimitedListToStringArray(candidatePattern)__				bd.setAutowireCandidate(PatternMatchUtils.simpleMatch(patterns, beanName))__			}_		}_		else {_			bd.setAutowireCandidate(TRUE_VALUE.equals(autowireCandidate))__		}__		if (ele.hasAttribute(PRIMARY_ATTRIBUTE)) {_			bd.setPrimary(TRUE_VALUE.equals(ele.getAttribute(PRIMARY_ATTRIBUTE)))__		}__		if (ele.hasAttribute(INIT_METHOD_ATTRIBUTE)) {_			String initMethodName = ele.getAttribute(INIT_METHOD_ATTRIBUTE)__			if (!"".equals(initMethodName)) {_				bd.setInitMethodName(initMethodName)__			}_		}_		else {_			if (this.defaults.getInitMethod() != null) {_				bd.setInitMethodName(this.defaults.getInitMethod())__				bd.setEnforceInitMethod(false)__			}_		}__		if (ele.hasAttribute(DESTROY_METHOD_ATTRIBUTE)) {_			String destroyMethodName = ele.getAttribute(DESTROY_METHOD_ATTRIBUTE)__			bd.setDestroyMethodName(destroyMethodName)__		}_		else {_			if (this.defaults.getDestroyMethod() != null) {_				bd.setDestroyMethodName(this.defaults.getDestroyMethod())__				bd.setEnforceDestroyMethod(false)__			}_		}__		if (ele.hasAttribute(FACTORY_METHOD_ATTRIBUTE)) {_			bd.setFactoryMethodName(ele.getAttribute(FACTORY_METHOD_ATTRIBUTE))__		}_		if (ele.hasAttribute(FACTORY_BEAN_ATTRIBUTE)) {_			bd.setFactoryBeanName(ele.getAttribute(FACTORY_BEAN_ATTRIBUTE))__		}__		return bd__	};apply,the,attributes,of,the,given,bean,element,to,the,given,bean,definition,param,ele,bean,declaration,element,param,bean,name,bean,name,param,containing,bean,containing,bean,definition,return,a,bean,definition,initialized,according,to,the,bean,element,attributes;public,abstract,bean,definition,parse,bean,definition,attributes,element,ele,string,bean,name,bean,definition,containing,bean,abstract,bean,definition,bd,if,ele,has,attribute,error,old,1,x,singleton,attribute,in,use,upgrade,to,scope,declaration,ele,else,if,ele,has,attribute,bd,set,scope,ele,get,attribute,else,if,containing,bean,null,bd,set,scope,containing,bean,get,scope,if,ele,has,attribute,bd,set,abstract,equals,ele,get,attribute,string,lazy,init,ele,get,attribute,if,equals,lazy,init,lazy,init,this,defaults,get,lazy,init,bd,set,lazy,init,equals,lazy,init,string,autowire,ele,get,attribute,bd,set,autowire,mode,get,autowire,mode,autowire,string,dependency,check,ele,get,attribute,bd,set,dependency,check,get,dependency,check,dependency,check,if,ele,has,attribute,string,depends,on,ele,get,attribute,bd,set,depends,on,string,utils,tokenize,to,string,array,depends,on,string,autowire,candidate,ele,get,attribute,if,equals,autowire,candidate,equals,autowire,candidate,string,candidate,pattern,this,defaults,get,autowire,candidates,if,candidate,pattern,null,string,patterns,string,utils,comma,delimited,list,to,string,array,candidate,pattern,bd,set,autowire,candidate,pattern,match,utils,simple,match,patterns,bean,name,else,bd,set,autowire,candidate,equals,autowire,candidate,if,ele,has,attribute,bd,set,primary,equals,ele,get,attribute,if,ele,has,attribute,string,init,method,name,ele,get,attribute,if,equals,init,method,name,bd,set,init,method,name,init,method,name,else,if,this,defaults,get,init,method,null,bd,set,init,method,name,this,defaults,get,init,method,bd,set,enforce,init,method,false,if,ele,has,attribute,string,destroy,method,name,ele,get,attribute,bd,set,destroy,method,name,destroy,method,name,else,if,this,defaults,get,destroy,method,null,bd,set,destroy,method,name,this,defaults,get,destroy,method,bd,set,enforce,destroy,method,false,if,ele,has,attribute,bd,set,factory,method,name,ele,get,attribute,if,ele,has,attribute,bd,set,factory,bean,name,ele,get,attribute,return,bd
BeanDefinitionParserDelegate -> public AbstractBeanDefinition parseBeanDefinitionAttributes(Element ele, String beanName, 			BeanDefinition containingBean, AbstractBeanDefinition bd);1467726769;Apply the attributes of the given bean element to the given bean * definition._@param ele bean declaration element_@param beanName bean name_@param containingBean containing bean definition_@return a bean definition initialized according to the bean element attributes;public AbstractBeanDefinition parseBeanDefinitionAttributes(Element ele, String beanName,_			BeanDefinition containingBean, AbstractBeanDefinition bd) {__		if (ele.hasAttribute(SINGLETON_ATTRIBUTE)) {_			error("Old 1.x 'singleton' attribute in use - upgrade to 'scope' declaration", ele)__		}_		else if (ele.hasAttribute(SCOPE_ATTRIBUTE)) {_			bd.setScope(ele.getAttribute(SCOPE_ATTRIBUTE))__		}_		else if (containingBean != null) {_			_			bd.setScope(containingBean.getScope())__		}__		if (ele.hasAttribute(ABSTRACT_ATTRIBUTE)) {_			bd.setAbstract(TRUE_VALUE.equals(ele.getAttribute(ABSTRACT_ATTRIBUTE)))__		}__		String lazyInit = ele.getAttribute(LAZY_INIT_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(lazyInit)) {_			lazyInit = this.defaults.getLazyInit()__		}_		bd.setLazyInit(TRUE_VALUE.equals(lazyInit))___		String autowire = ele.getAttribute(AUTOWIRE_ATTRIBUTE)__		bd.setAutowireMode(getAutowireMode(autowire))___		String dependencyCheck = ele.getAttribute(DEPENDENCY_CHECK_ATTRIBUTE)__		bd.setDependencyCheck(getDependencyCheck(dependencyCheck))___		if (ele.hasAttribute(DEPENDS_ON_ATTRIBUTE)) {_			String dependsOn = ele.getAttribute(DEPENDS_ON_ATTRIBUTE)__			bd.setDependsOn(StringUtils.tokenizeToStringArray(dependsOn, MULTI_VALUE_ATTRIBUTE_DELIMITERS))__		}__		String autowireCandidate = ele.getAttribute(AUTOWIRE_CANDIDATE_ATTRIBUTE)__		if ("".equals(autowireCandidate) || DEFAULT_VALUE.equals(autowireCandidate)) {_			String candidatePattern = this.defaults.getAutowireCandidates()__			if (candidatePattern != null) {_				String[] patterns = StringUtils.commaDelimitedListToStringArray(candidatePattern)__				bd.setAutowireCandidate(PatternMatchUtils.simpleMatch(patterns, beanName))__			}_		}_		else {_			bd.setAutowireCandidate(TRUE_VALUE.equals(autowireCandidate))__		}__		if (ele.hasAttribute(PRIMARY_ATTRIBUTE)) {_			bd.setPrimary(TRUE_VALUE.equals(ele.getAttribute(PRIMARY_ATTRIBUTE)))__		}__		if (ele.hasAttribute(INIT_METHOD_ATTRIBUTE)) {_			String initMethodName = ele.getAttribute(INIT_METHOD_ATTRIBUTE)__			if (!"".equals(initMethodName)) {_				bd.setInitMethodName(initMethodName)__			}_		}_		else {_			if (this.defaults.getInitMethod() != null) {_				bd.setInitMethodName(this.defaults.getInitMethod())__				bd.setEnforceInitMethod(false)__			}_		}__		if (ele.hasAttribute(DESTROY_METHOD_ATTRIBUTE)) {_			String destroyMethodName = ele.getAttribute(DESTROY_METHOD_ATTRIBUTE)__			bd.setDestroyMethodName(destroyMethodName)__		}_		else {_			if (this.defaults.getDestroyMethod() != null) {_				bd.setDestroyMethodName(this.defaults.getDestroyMethod())__				bd.setEnforceDestroyMethod(false)__			}_		}__		if (ele.hasAttribute(FACTORY_METHOD_ATTRIBUTE)) {_			bd.setFactoryMethodName(ele.getAttribute(FACTORY_METHOD_ATTRIBUTE))__		}_		if (ele.hasAttribute(FACTORY_BEAN_ATTRIBUTE)) {_			bd.setFactoryBeanName(ele.getAttribute(FACTORY_BEAN_ATTRIBUTE))__		}__		return bd__	};apply,the,attributes,of,the,given,bean,element,to,the,given,bean,definition,param,ele,bean,declaration,element,param,bean,name,bean,name,param,containing,bean,containing,bean,definition,return,a,bean,definition,initialized,according,to,the,bean,element,attributes;public,abstract,bean,definition,parse,bean,definition,attributes,element,ele,string,bean,name,bean,definition,containing,bean,abstract,bean,definition,bd,if,ele,has,attribute,error,old,1,x,singleton,attribute,in,use,upgrade,to,scope,declaration,ele,else,if,ele,has,attribute,bd,set,scope,ele,get,attribute,else,if,containing,bean,null,bd,set,scope,containing,bean,get,scope,if,ele,has,attribute,bd,set,abstract,equals,ele,get,attribute,string,lazy,init,ele,get,attribute,if,equals,lazy,init,lazy,init,this,defaults,get,lazy,init,bd,set,lazy,init,equals,lazy,init,string,autowire,ele,get,attribute,bd,set,autowire,mode,get,autowire,mode,autowire,string,dependency,check,ele,get,attribute,bd,set,dependency,check,get,dependency,check,dependency,check,if,ele,has,attribute,string,depends,on,ele,get,attribute,bd,set,depends,on,string,utils,tokenize,to,string,array,depends,on,string,autowire,candidate,ele,get,attribute,if,equals,autowire,candidate,equals,autowire,candidate,string,candidate,pattern,this,defaults,get,autowire,candidates,if,candidate,pattern,null,string,patterns,string,utils,comma,delimited,list,to,string,array,candidate,pattern,bd,set,autowire,candidate,pattern,match,utils,simple,match,patterns,bean,name,else,bd,set,autowire,candidate,equals,autowire,candidate,if,ele,has,attribute,bd,set,primary,equals,ele,get,attribute,if,ele,has,attribute,string,init,method,name,ele,get,attribute,if,equals,init,method,name,bd,set,init,method,name,init,method,name,else,if,this,defaults,get,init,method,null,bd,set,init,method,name,this,defaults,get,init,method,bd,set,enforce,init,method,false,if,ele,has,attribute,string,destroy,method,name,ele,get,attribute,bd,set,destroy,method,name,destroy,method,name,else,if,this,defaults,get,destroy,method,null,bd,set,destroy,method,name,this,defaults,get,destroy,method,bd,set,enforce,destroy,method,false,if,ele,has,attribute,bd,set,factory,method,name,ele,get,attribute,if,ele,has,attribute,bd,set,factory,bean,name,ele,get,attribute,return,bd
BeanDefinitionParserDelegate -> public AbstractBeanDefinition parseBeanDefinitionAttributes(Element ele, String beanName, 			BeanDefinition containingBean, AbstractBeanDefinition bd);1467730834;Apply the attributes of the given bean element to the given bean * definition._@param ele bean declaration element_@param beanName bean name_@param containingBean containing bean definition_@return a bean definition initialized according to the bean element attributes;public AbstractBeanDefinition parseBeanDefinitionAttributes(Element ele, String beanName,_			BeanDefinition containingBean, AbstractBeanDefinition bd) {__		if (ele.hasAttribute(SINGLETON_ATTRIBUTE)) {_			error("Old 1.x 'singleton' attribute in use - upgrade to 'scope' declaration", ele)__		}_		else if (ele.hasAttribute(SCOPE_ATTRIBUTE)) {_			bd.setScope(ele.getAttribute(SCOPE_ATTRIBUTE))__		}_		else if (containingBean != null) {_			_			bd.setScope(containingBean.getScope())__		}__		if (ele.hasAttribute(ABSTRACT_ATTRIBUTE)) {_			bd.setAbstract(TRUE_VALUE.equals(ele.getAttribute(ABSTRACT_ATTRIBUTE)))__		}__		String lazyInit = ele.getAttribute(LAZY_INIT_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(lazyInit)) {_			lazyInit = this.defaults.getLazyInit()__		}_		bd.setLazyInit(TRUE_VALUE.equals(lazyInit))___		String autowire = ele.getAttribute(AUTOWIRE_ATTRIBUTE)__		bd.setAutowireMode(getAutowireMode(autowire))___		String dependencyCheck = ele.getAttribute(DEPENDENCY_CHECK_ATTRIBUTE)__		bd.setDependencyCheck(getDependencyCheck(dependencyCheck))___		if (ele.hasAttribute(DEPENDS_ON_ATTRIBUTE)) {_			String dependsOn = ele.getAttribute(DEPENDS_ON_ATTRIBUTE)__			bd.setDependsOn(StringUtils.tokenizeToStringArray(dependsOn, MULTI_VALUE_ATTRIBUTE_DELIMITERS))__		}__		String autowireCandidate = ele.getAttribute(AUTOWIRE_CANDIDATE_ATTRIBUTE)__		if ("".equals(autowireCandidate) || DEFAULT_VALUE.equals(autowireCandidate)) {_			String candidatePattern = this.defaults.getAutowireCandidates()__			if (candidatePattern != null) {_				String[] patterns = StringUtils.commaDelimitedListToStringArray(candidatePattern)__				bd.setAutowireCandidate(PatternMatchUtils.simpleMatch(patterns, beanName))__			}_		}_		else {_			bd.setAutowireCandidate(TRUE_VALUE.equals(autowireCandidate))__		}__		if (ele.hasAttribute(PRIMARY_ATTRIBUTE)) {_			bd.setPrimary(TRUE_VALUE.equals(ele.getAttribute(PRIMARY_ATTRIBUTE)))__		}__		if (ele.hasAttribute(INIT_METHOD_ATTRIBUTE)) {_			String initMethodName = ele.getAttribute(INIT_METHOD_ATTRIBUTE)__			if (!"".equals(initMethodName)) {_				bd.setInitMethodName(initMethodName)__			}_		}_		else {_			if (this.defaults.getInitMethod() != null) {_				bd.setInitMethodName(this.defaults.getInitMethod())__				bd.setEnforceInitMethod(false)__			}_		}__		if (ele.hasAttribute(DESTROY_METHOD_ATTRIBUTE)) {_			String destroyMethodName = ele.getAttribute(DESTROY_METHOD_ATTRIBUTE)__			bd.setDestroyMethodName(destroyMethodName)__		}_		else {_			if (this.defaults.getDestroyMethod() != null) {_				bd.setDestroyMethodName(this.defaults.getDestroyMethod())__				bd.setEnforceDestroyMethod(false)__			}_		}__		if (ele.hasAttribute(FACTORY_METHOD_ATTRIBUTE)) {_			bd.setFactoryMethodName(ele.getAttribute(FACTORY_METHOD_ATTRIBUTE))__		}_		if (ele.hasAttribute(FACTORY_BEAN_ATTRIBUTE)) {_			bd.setFactoryBeanName(ele.getAttribute(FACTORY_BEAN_ATTRIBUTE))__		}__		return bd__	};apply,the,attributes,of,the,given,bean,element,to,the,given,bean,definition,param,ele,bean,declaration,element,param,bean,name,bean,name,param,containing,bean,containing,bean,definition,return,a,bean,definition,initialized,according,to,the,bean,element,attributes;public,abstract,bean,definition,parse,bean,definition,attributes,element,ele,string,bean,name,bean,definition,containing,bean,abstract,bean,definition,bd,if,ele,has,attribute,error,old,1,x,singleton,attribute,in,use,upgrade,to,scope,declaration,ele,else,if,ele,has,attribute,bd,set,scope,ele,get,attribute,else,if,containing,bean,null,bd,set,scope,containing,bean,get,scope,if,ele,has,attribute,bd,set,abstract,equals,ele,get,attribute,string,lazy,init,ele,get,attribute,if,equals,lazy,init,lazy,init,this,defaults,get,lazy,init,bd,set,lazy,init,equals,lazy,init,string,autowire,ele,get,attribute,bd,set,autowire,mode,get,autowire,mode,autowire,string,dependency,check,ele,get,attribute,bd,set,dependency,check,get,dependency,check,dependency,check,if,ele,has,attribute,string,depends,on,ele,get,attribute,bd,set,depends,on,string,utils,tokenize,to,string,array,depends,on,string,autowire,candidate,ele,get,attribute,if,equals,autowire,candidate,equals,autowire,candidate,string,candidate,pattern,this,defaults,get,autowire,candidates,if,candidate,pattern,null,string,patterns,string,utils,comma,delimited,list,to,string,array,candidate,pattern,bd,set,autowire,candidate,pattern,match,utils,simple,match,patterns,bean,name,else,bd,set,autowire,candidate,equals,autowire,candidate,if,ele,has,attribute,bd,set,primary,equals,ele,get,attribute,if,ele,has,attribute,string,init,method,name,ele,get,attribute,if,equals,init,method,name,bd,set,init,method,name,init,method,name,else,if,this,defaults,get,init,method,null,bd,set,init,method,name,this,defaults,get,init,method,bd,set,enforce,init,method,false,if,ele,has,attribute,string,destroy,method,name,ele,get,attribute,bd,set,destroy,method,name,destroy,method,name,else,if,this,defaults,get,destroy,method,null,bd,set,destroy,method,name,this,defaults,get,destroy,method,bd,set,enforce,destroy,method,false,if,ele,has,attribute,bd,set,factory,method,name,ele,get,attribute,if,ele,has,attribute,bd,set,factory,bean,name,ele,get,attribute,return,bd
BeanDefinitionParserDelegate -> public AbstractBeanDefinition parseBeanDefinitionAttributes(Element ele, String beanName, 			BeanDefinition containingBean, AbstractBeanDefinition bd);1467744603;Apply the attributes of the given bean element to the given bean * definition._@param ele bean declaration element_@param beanName bean name_@param containingBean containing bean definition_@return a bean definition initialized according to the bean element attributes;public AbstractBeanDefinition parseBeanDefinitionAttributes(Element ele, String beanName,_			BeanDefinition containingBean, AbstractBeanDefinition bd) {__		if (ele.hasAttribute(SINGLETON_ATTRIBUTE)) {_			error("Old 1.x 'singleton' attribute in use - upgrade to 'scope' declaration", ele)__		}_		else if (ele.hasAttribute(SCOPE_ATTRIBUTE)) {_			bd.setScope(ele.getAttribute(SCOPE_ATTRIBUTE))__		}_		else if (containingBean != null) {_			_			bd.setScope(containingBean.getScope())__		}__		if (ele.hasAttribute(ABSTRACT_ATTRIBUTE)) {_			bd.setAbstract(TRUE_VALUE.equals(ele.getAttribute(ABSTRACT_ATTRIBUTE)))__		}__		String lazyInit = ele.getAttribute(LAZY_INIT_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(lazyInit)) {_			lazyInit = this.defaults.getLazyInit()__		}_		bd.setLazyInit(TRUE_VALUE.equals(lazyInit))___		String autowire = ele.getAttribute(AUTOWIRE_ATTRIBUTE)__		bd.setAutowireMode(getAutowireMode(autowire))___		if (ele.hasAttribute(DEPENDS_ON_ATTRIBUTE)) {_			String dependsOn = ele.getAttribute(DEPENDS_ON_ATTRIBUTE)__			bd.setDependsOn(StringUtils.tokenizeToStringArray(dependsOn, MULTI_VALUE_ATTRIBUTE_DELIMITERS))__		}__		String autowireCandidate = ele.getAttribute(AUTOWIRE_CANDIDATE_ATTRIBUTE)__		if ("".equals(autowireCandidate) || DEFAULT_VALUE.equals(autowireCandidate)) {_			String candidatePattern = this.defaults.getAutowireCandidates()__			if (candidatePattern != null) {_				String[] patterns = StringUtils.commaDelimitedListToStringArray(candidatePattern)__				bd.setAutowireCandidate(PatternMatchUtils.simpleMatch(patterns, beanName))__			}_		}_		else {_			bd.setAutowireCandidate(TRUE_VALUE.equals(autowireCandidate))__		}__		if (ele.hasAttribute(PRIMARY_ATTRIBUTE)) {_			bd.setPrimary(TRUE_VALUE.equals(ele.getAttribute(PRIMARY_ATTRIBUTE)))__		}__		if (ele.hasAttribute(INIT_METHOD_ATTRIBUTE)) {_			String initMethodName = ele.getAttribute(INIT_METHOD_ATTRIBUTE)__			if (!"".equals(initMethodName)) {_				bd.setInitMethodName(initMethodName)__			}_		}_		else {_			if (this.defaults.getInitMethod() != null) {_				bd.setInitMethodName(this.defaults.getInitMethod())__				bd.setEnforceInitMethod(false)__			}_		}__		if (ele.hasAttribute(DESTROY_METHOD_ATTRIBUTE)) {_			String destroyMethodName = ele.getAttribute(DESTROY_METHOD_ATTRIBUTE)__			bd.setDestroyMethodName(destroyMethodName)__		}_		else {_			if (this.defaults.getDestroyMethod() != null) {_				bd.setDestroyMethodName(this.defaults.getDestroyMethod())__				bd.setEnforceDestroyMethod(false)__			}_		}__		if (ele.hasAttribute(FACTORY_METHOD_ATTRIBUTE)) {_			bd.setFactoryMethodName(ele.getAttribute(FACTORY_METHOD_ATTRIBUTE))__		}_		if (ele.hasAttribute(FACTORY_BEAN_ATTRIBUTE)) {_			bd.setFactoryBeanName(ele.getAttribute(FACTORY_BEAN_ATTRIBUTE))__		}__		return bd__	};apply,the,attributes,of,the,given,bean,element,to,the,given,bean,definition,param,ele,bean,declaration,element,param,bean,name,bean,name,param,containing,bean,containing,bean,definition,return,a,bean,definition,initialized,according,to,the,bean,element,attributes;public,abstract,bean,definition,parse,bean,definition,attributes,element,ele,string,bean,name,bean,definition,containing,bean,abstract,bean,definition,bd,if,ele,has,attribute,error,old,1,x,singleton,attribute,in,use,upgrade,to,scope,declaration,ele,else,if,ele,has,attribute,bd,set,scope,ele,get,attribute,else,if,containing,bean,null,bd,set,scope,containing,bean,get,scope,if,ele,has,attribute,bd,set,abstract,equals,ele,get,attribute,string,lazy,init,ele,get,attribute,if,equals,lazy,init,lazy,init,this,defaults,get,lazy,init,bd,set,lazy,init,equals,lazy,init,string,autowire,ele,get,attribute,bd,set,autowire,mode,get,autowire,mode,autowire,if,ele,has,attribute,string,depends,on,ele,get,attribute,bd,set,depends,on,string,utils,tokenize,to,string,array,depends,on,string,autowire,candidate,ele,get,attribute,if,equals,autowire,candidate,equals,autowire,candidate,string,candidate,pattern,this,defaults,get,autowire,candidates,if,candidate,pattern,null,string,patterns,string,utils,comma,delimited,list,to,string,array,candidate,pattern,bd,set,autowire,candidate,pattern,match,utils,simple,match,patterns,bean,name,else,bd,set,autowire,candidate,equals,autowire,candidate,if,ele,has,attribute,bd,set,primary,equals,ele,get,attribute,if,ele,has,attribute,string,init,method,name,ele,get,attribute,if,equals,init,method,name,bd,set,init,method,name,init,method,name,else,if,this,defaults,get,init,method,null,bd,set,init,method,name,this,defaults,get,init,method,bd,set,enforce,init,method,false,if,ele,has,attribute,string,destroy,method,name,ele,get,attribute,bd,set,destroy,method,name,destroy,method,name,else,if,this,defaults,get,destroy,method,null,bd,set,destroy,method,name,this,defaults,get,destroy,method,bd,set,enforce,destroy,method,false,if,ele,has,attribute,bd,set,factory,method,name,ele,get,attribute,if,ele,has,attribute,bd,set,factory,bean,name,ele,get,attribute,return,bd
BeanDefinitionParserDelegate -> public AbstractBeanDefinition parseBeanDefinitionAttributes(Element ele, String beanName, 			BeanDefinition containingBean, AbstractBeanDefinition bd);1487245676;Apply the attributes of the given bean element to the given bean * definition._@param ele bean declaration element_@param beanName bean name_@param containingBean containing bean definition_@return a bean definition initialized according to the bean element attributes;public AbstractBeanDefinition parseBeanDefinitionAttributes(Element ele, String beanName,_			BeanDefinition containingBean, AbstractBeanDefinition bd) {__		if (ele.hasAttribute(SINGLETON_ATTRIBUTE)) {_			error("Old 1.x 'singleton' attribute in use - upgrade to 'scope' declaration", ele)__		}_		else if (ele.hasAttribute(SCOPE_ATTRIBUTE)) {_			bd.setScope(ele.getAttribute(SCOPE_ATTRIBUTE))__		}_		else if (containingBean != null) {_			_			bd.setScope(containingBean.getScope())__		}__		if (ele.hasAttribute(ABSTRACT_ATTRIBUTE)) {_			bd.setAbstract(TRUE_VALUE.equals(ele.getAttribute(ABSTRACT_ATTRIBUTE)))__		}__		String lazyInit = ele.getAttribute(LAZY_INIT_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(lazyInit)) {_			lazyInit = this.defaults.getLazyInit()__		}_		bd.setLazyInit(TRUE_VALUE.equals(lazyInit))___		String autowire = ele.getAttribute(AUTOWIRE_ATTRIBUTE)__		bd.setAutowireMode(getAutowireMode(autowire))___		if (ele.hasAttribute(DEPENDS_ON_ATTRIBUTE)) {_			String dependsOn = ele.getAttribute(DEPENDS_ON_ATTRIBUTE)__			bd.setDependsOn(StringUtils.tokenizeToStringArray(dependsOn, MULTI_VALUE_ATTRIBUTE_DELIMITERS))__		}__		String autowireCandidate = ele.getAttribute(AUTOWIRE_CANDIDATE_ATTRIBUTE)__		if ("".equals(autowireCandidate) || DEFAULT_VALUE.equals(autowireCandidate)) {_			String candidatePattern = this.defaults.getAutowireCandidates()__			if (candidatePattern != null) {_				String[] patterns = StringUtils.commaDelimitedListToStringArray(candidatePattern)__				bd.setAutowireCandidate(PatternMatchUtils.simpleMatch(patterns, beanName))__			}_		}_		else {_			bd.setAutowireCandidate(TRUE_VALUE.equals(autowireCandidate))__		}__		if (ele.hasAttribute(PRIMARY_ATTRIBUTE)) {_			bd.setPrimary(TRUE_VALUE.equals(ele.getAttribute(PRIMARY_ATTRIBUTE)))__		}__		if (ele.hasAttribute(INIT_METHOD_ATTRIBUTE)) {_			String initMethodName = ele.getAttribute(INIT_METHOD_ATTRIBUTE)__			if (!"".equals(initMethodName)) {_				bd.setInitMethodName(initMethodName)__			}_		}_		else {_			if (this.defaults.getInitMethod() != null) {_				bd.setInitMethodName(this.defaults.getInitMethod())__				bd.setEnforceInitMethod(false)__			}_		}__		if (ele.hasAttribute(DESTROY_METHOD_ATTRIBUTE)) {_			String destroyMethodName = ele.getAttribute(DESTROY_METHOD_ATTRIBUTE)__			bd.setDestroyMethodName(destroyMethodName)__		}_		else {_			if (this.defaults.getDestroyMethod() != null) {_				bd.setDestroyMethodName(this.defaults.getDestroyMethod())__				bd.setEnforceDestroyMethod(false)__			}_		}__		if (ele.hasAttribute(FACTORY_METHOD_ATTRIBUTE)) {_			bd.setFactoryMethodName(ele.getAttribute(FACTORY_METHOD_ATTRIBUTE))__		}_		if (ele.hasAttribute(FACTORY_BEAN_ATTRIBUTE)) {_			bd.setFactoryBeanName(ele.getAttribute(FACTORY_BEAN_ATTRIBUTE))__		}__		return bd__	};apply,the,attributes,of,the,given,bean,element,to,the,given,bean,definition,param,ele,bean,declaration,element,param,bean,name,bean,name,param,containing,bean,containing,bean,definition,return,a,bean,definition,initialized,according,to,the,bean,element,attributes;public,abstract,bean,definition,parse,bean,definition,attributes,element,ele,string,bean,name,bean,definition,containing,bean,abstract,bean,definition,bd,if,ele,has,attribute,error,old,1,x,singleton,attribute,in,use,upgrade,to,scope,declaration,ele,else,if,ele,has,attribute,bd,set,scope,ele,get,attribute,else,if,containing,bean,null,bd,set,scope,containing,bean,get,scope,if,ele,has,attribute,bd,set,abstract,equals,ele,get,attribute,string,lazy,init,ele,get,attribute,if,equals,lazy,init,lazy,init,this,defaults,get,lazy,init,bd,set,lazy,init,equals,lazy,init,string,autowire,ele,get,attribute,bd,set,autowire,mode,get,autowire,mode,autowire,if,ele,has,attribute,string,depends,on,ele,get,attribute,bd,set,depends,on,string,utils,tokenize,to,string,array,depends,on,string,autowire,candidate,ele,get,attribute,if,equals,autowire,candidate,equals,autowire,candidate,string,candidate,pattern,this,defaults,get,autowire,candidates,if,candidate,pattern,null,string,patterns,string,utils,comma,delimited,list,to,string,array,candidate,pattern,bd,set,autowire,candidate,pattern,match,utils,simple,match,patterns,bean,name,else,bd,set,autowire,candidate,equals,autowire,candidate,if,ele,has,attribute,bd,set,primary,equals,ele,get,attribute,if,ele,has,attribute,string,init,method,name,ele,get,attribute,if,equals,init,method,name,bd,set,init,method,name,init,method,name,else,if,this,defaults,get,init,method,null,bd,set,init,method,name,this,defaults,get,init,method,bd,set,enforce,init,method,false,if,ele,has,attribute,string,destroy,method,name,ele,get,attribute,bd,set,destroy,method,name,destroy,method,name,else,if,this,defaults,get,destroy,method,null,bd,set,destroy,method,name,this,defaults,get,destroy,method,bd,set,enforce,destroy,method,false,if,ele,has,attribute,bd,set,factory,method,name,ele,get,attribute,if,ele,has,attribute,bd,set,factory,bean,name,ele,get,attribute,return,bd
BeanDefinitionParserDelegate -> public AbstractBeanDefinition parseBeanDefinitionAttributes(Element ele, String beanName, 			BeanDefinition containingBean, AbstractBeanDefinition bd);1487255851;Apply the attributes of the given bean element to the given bean * definition._@param ele bean declaration element_@param beanName bean name_@param containingBean containing bean definition_@return a bean definition initialized according to the bean element attributes;public AbstractBeanDefinition parseBeanDefinitionAttributes(Element ele, String beanName,_			BeanDefinition containingBean, AbstractBeanDefinition bd) {__		if (ele.hasAttribute(SINGLETON_ATTRIBUTE)) {_			error("Old 1.x 'singleton' attribute in use - upgrade to 'scope' declaration", ele)__		}_		else if (ele.hasAttribute(SCOPE_ATTRIBUTE)) {_			bd.setScope(ele.getAttribute(SCOPE_ATTRIBUTE))__		}_		else if (containingBean != null) {_			_			bd.setScope(containingBean.getScope())__		}__		if (ele.hasAttribute(ABSTRACT_ATTRIBUTE)) {_			bd.setAbstract(TRUE_VALUE.equals(ele.getAttribute(ABSTRACT_ATTRIBUTE)))__		}__		String lazyInit = ele.getAttribute(LAZY_INIT_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(lazyInit)) {_			lazyInit = this.defaults.getLazyInit()__		}_		bd.setLazyInit(TRUE_VALUE.equals(lazyInit))___		String autowire = ele.getAttribute(AUTOWIRE_ATTRIBUTE)__		bd.setAutowireMode(getAutowireMode(autowire))___		if (ele.hasAttribute(DEPENDS_ON_ATTRIBUTE)) {_			String dependsOn = ele.getAttribute(DEPENDS_ON_ATTRIBUTE)__			bd.setDependsOn(StringUtils.tokenizeToStringArray(dependsOn, MULTI_VALUE_ATTRIBUTE_DELIMITERS))__		}__		String autowireCandidate = ele.getAttribute(AUTOWIRE_CANDIDATE_ATTRIBUTE)__		if ("".equals(autowireCandidate) || DEFAULT_VALUE.equals(autowireCandidate)) {_			String candidatePattern = this.defaults.getAutowireCandidates()__			if (candidatePattern != null) {_				String[] patterns = StringUtils.commaDelimitedListToStringArray(candidatePattern)__				bd.setAutowireCandidate(PatternMatchUtils.simpleMatch(patterns, beanName))__			}_		}_		else {_			bd.setAutowireCandidate(TRUE_VALUE.equals(autowireCandidate))__		}__		if (ele.hasAttribute(PRIMARY_ATTRIBUTE)) {_			bd.setPrimary(TRUE_VALUE.equals(ele.getAttribute(PRIMARY_ATTRIBUTE)))__		}__		if (ele.hasAttribute(INIT_METHOD_ATTRIBUTE)) {_			String initMethodName = ele.getAttribute(INIT_METHOD_ATTRIBUTE)__			if (!"".equals(initMethodName)) {_				bd.setInitMethodName(initMethodName)__			}_		}_		else {_			if (this.defaults.getInitMethod() != null) {_				bd.setInitMethodName(this.defaults.getInitMethod())__				bd.setEnforceInitMethod(false)__			}_		}__		if (ele.hasAttribute(DESTROY_METHOD_ATTRIBUTE)) {_			String destroyMethodName = ele.getAttribute(DESTROY_METHOD_ATTRIBUTE)__			bd.setDestroyMethodName(destroyMethodName)__		}_		else {_			if (this.defaults.getDestroyMethod() != null) {_				bd.setDestroyMethodName(this.defaults.getDestroyMethod())__				bd.setEnforceDestroyMethod(false)__			}_		}__		if (ele.hasAttribute(FACTORY_METHOD_ATTRIBUTE)) {_			bd.setFactoryMethodName(ele.getAttribute(FACTORY_METHOD_ATTRIBUTE))__		}_		if (ele.hasAttribute(FACTORY_BEAN_ATTRIBUTE)) {_			bd.setFactoryBeanName(ele.getAttribute(FACTORY_BEAN_ATTRIBUTE))__		}__		return bd__	};apply,the,attributes,of,the,given,bean,element,to,the,given,bean,definition,param,ele,bean,declaration,element,param,bean,name,bean,name,param,containing,bean,containing,bean,definition,return,a,bean,definition,initialized,according,to,the,bean,element,attributes;public,abstract,bean,definition,parse,bean,definition,attributes,element,ele,string,bean,name,bean,definition,containing,bean,abstract,bean,definition,bd,if,ele,has,attribute,error,old,1,x,singleton,attribute,in,use,upgrade,to,scope,declaration,ele,else,if,ele,has,attribute,bd,set,scope,ele,get,attribute,else,if,containing,bean,null,bd,set,scope,containing,bean,get,scope,if,ele,has,attribute,bd,set,abstract,equals,ele,get,attribute,string,lazy,init,ele,get,attribute,if,equals,lazy,init,lazy,init,this,defaults,get,lazy,init,bd,set,lazy,init,equals,lazy,init,string,autowire,ele,get,attribute,bd,set,autowire,mode,get,autowire,mode,autowire,if,ele,has,attribute,string,depends,on,ele,get,attribute,bd,set,depends,on,string,utils,tokenize,to,string,array,depends,on,string,autowire,candidate,ele,get,attribute,if,equals,autowire,candidate,equals,autowire,candidate,string,candidate,pattern,this,defaults,get,autowire,candidates,if,candidate,pattern,null,string,patterns,string,utils,comma,delimited,list,to,string,array,candidate,pattern,bd,set,autowire,candidate,pattern,match,utils,simple,match,patterns,bean,name,else,bd,set,autowire,candidate,equals,autowire,candidate,if,ele,has,attribute,bd,set,primary,equals,ele,get,attribute,if,ele,has,attribute,string,init,method,name,ele,get,attribute,if,equals,init,method,name,bd,set,init,method,name,init,method,name,else,if,this,defaults,get,init,method,null,bd,set,init,method,name,this,defaults,get,init,method,bd,set,enforce,init,method,false,if,ele,has,attribute,string,destroy,method,name,ele,get,attribute,bd,set,destroy,method,name,destroy,method,name,else,if,this,defaults,get,destroy,method,null,bd,set,destroy,method,name,this,defaults,get,destroy,method,bd,set,enforce,destroy,method,false,if,ele,has,attribute,bd,set,factory,method,name,ele,get,attribute,if,ele,has,attribute,bd,set,factory,bean,name,ele,get,attribute,return,bd
BeanDefinitionParserDelegate -> public AbstractBeanDefinition parseBeanDefinitionAttributes(Element ele, String beanName, 			BeanDefinition containingBean, AbstractBeanDefinition bd);1494586217;Apply the attributes of the given bean element to the given bean * definition._@param ele bean declaration element_@param beanName bean name_@param containingBean containing bean definition_@return a bean definition initialized according to the bean element attributes;public AbstractBeanDefinition parseBeanDefinitionAttributes(Element ele, String beanName,_			BeanDefinition containingBean, AbstractBeanDefinition bd) {__		if (ele.hasAttribute(SINGLETON_ATTRIBUTE)) {_			error("Old 1.x 'singleton' attribute in use - upgrade to 'scope' declaration", ele)__		}_		else if (ele.hasAttribute(SCOPE_ATTRIBUTE)) {_			bd.setScope(ele.getAttribute(SCOPE_ATTRIBUTE))__		}_		else if (containingBean != null) {_			_			bd.setScope(containingBean.getScope())__		}__		if (ele.hasAttribute(ABSTRACT_ATTRIBUTE)) {_			bd.setAbstract(TRUE_VALUE.equals(ele.getAttribute(ABSTRACT_ATTRIBUTE)))__		}__		String lazyInit = ele.getAttribute(LAZY_INIT_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(lazyInit)) {_			lazyInit = this.defaults.getLazyInit()__		}_		bd.setLazyInit(TRUE_VALUE.equals(lazyInit))___		String autowire = ele.getAttribute(AUTOWIRE_ATTRIBUTE)__		bd.setAutowireMode(getAutowireMode(autowire))___		if (ele.hasAttribute(DEPENDS_ON_ATTRIBUTE)) {_			String dependsOn = ele.getAttribute(DEPENDS_ON_ATTRIBUTE)__			bd.setDependsOn(StringUtils.tokenizeToStringArray(dependsOn, MULTI_VALUE_ATTRIBUTE_DELIMITERS))__		}__		String autowireCandidate = ele.getAttribute(AUTOWIRE_CANDIDATE_ATTRIBUTE)__		if ("".equals(autowireCandidate) || DEFAULT_VALUE.equals(autowireCandidate)) {_			String candidatePattern = this.defaults.getAutowireCandidates()__			if (candidatePattern != null) {_				String[] patterns = StringUtils.commaDelimitedListToStringArray(candidatePattern)__				bd.setAutowireCandidate(PatternMatchUtils.simpleMatch(patterns, beanName))__			}_		}_		else {_			bd.setAutowireCandidate(TRUE_VALUE.equals(autowireCandidate))__		}__		if (ele.hasAttribute(PRIMARY_ATTRIBUTE)) {_			bd.setPrimary(TRUE_VALUE.equals(ele.getAttribute(PRIMARY_ATTRIBUTE)))__		}__		if (ele.hasAttribute(INIT_METHOD_ATTRIBUTE)) {_			String initMethodName = ele.getAttribute(INIT_METHOD_ATTRIBUTE)__			if (!"".equals(initMethodName)) {_				bd.setInitMethodName(initMethodName)__			}_		}_		else if (this.defaults.getInitMethod() != null) {_			bd.setInitMethodName(this.defaults.getInitMethod())__			bd.setEnforceInitMethod(false)__		}__		if (ele.hasAttribute(DESTROY_METHOD_ATTRIBUTE)) {_			String destroyMethodName = ele.getAttribute(DESTROY_METHOD_ATTRIBUTE)__			bd.setDestroyMethodName(destroyMethodName)__		}_		else if (this.defaults.getDestroyMethod() != null) {_			bd.setDestroyMethodName(this.defaults.getDestroyMethod())__			bd.setEnforceDestroyMethod(false)__		}__		if (ele.hasAttribute(FACTORY_METHOD_ATTRIBUTE)) {_			bd.setFactoryMethodName(ele.getAttribute(FACTORY_METHOD_ATTRIBUTE))__		}_		if (ele.hasAttribute(FACTORY_BEAN_ATTRIBUTE)) {_			bd.setFactoryBeanName(ele.getAttribute(FACTORY_BEAN_ATTRIBUTE))__		}__		return bd__	};apply,the,attributes,of,the,given,bean,element,to,the,given,bean,definition,param,ele,bean,declaration,element,param,bean,name,bean,name,param,containing,bean,containing,bean,definition,return,a,bean,definition,initialized,according,to,the,bean,element,attributes;public,abstract,bean,definition,parse,bean,definition,attributes,element,ele,string,bean,name,bean,definition,containing,bean,abstract,bean,definition,bd,if,ele,has,attribute,error,old,1,x,singleton,attribute,in,use,upgrade,to,scope,declaration,ele,else,if,ele,has,attribute,bd,set,scope,ele,get,attribute,else,if,containing,bean,null,bd,set,scope,containing,bean,get,scope,if,ele,has,attribute,bd,set,abstract,equals,ele,get,attribute,string,lazy,init,ele,get,attribute,if,equals,lazy,init,lazy,init,this,defaults,get,lazy,init,bd,set,lazy,init,equals,lazy,init,string,autowire,ele,get,attribute,bd,set,autowire,mode,get,autowire,mode,autowire,if,ele,has,attribute,string,depends,on,ele,get,attribute,bd,set,depends,on,string,utils,tokenize,to,string,array,depends,on,string,autowire,candidate,ele,get,attribute,if,equals,autowire,candidate,equals,autowire,candidate,string,candidate,pattern,this,defaults,get,autowire,candidates,if,candidate,pattern,null,string,patterns,string,utils,comma,delimited,list,to,string,array,candidate,pattern,bd,set,autowire,candidate,pattern,match,utils,simple,match,patterns,bean,name,else,bd,set,autowire,candidate,equals,autowire,candidate,if,ele,has,attribute,bd,set,primary,equals,ele,get,attribute,if,ele,has,attribute,string,init,method,name,ele,get,attribute,if,equals,init,method,name,bd,set,init,method,name,init,method,name,else,if,this,defaults,get,init,method,null,bd,set,init,method,name,this,defaults,get,init,method,bd,set,enforce,init,method,false,if,ele,has,attribute,string,destroy,method,name,ele,get,attribute,bd,set,destroy,method,name,destroy,method,name,else,if,this,defaults,get,destroy,method,null,bd,set,destroy,method,name,this,defaults,get,destroy,method,bd,set,enforce,destroy,method,false,if,ele,has,attribute,bd,set,factory,method,name,ele,get,attribute,if,ele,has,attribute,bd,set,factory,bean,name,ele,get,attribute,return,bd
BeanDefinitionParserDelegate -> public AbstractBeanDefinition parseBeanDefinitionAttributes(Element ele, String beanName, 			BeanDefinition containingBean, AbstractBeanDefinition bd);1495868221;Apply the attributes of the given bean element to the given bean * definition._@param ele bean declaration element_@param beanName bean name_@param containingBean containing bean definition_@return a bean definition initialized according to the bean element attributes;public AbstractBeanDefinition parseBeanDefinitionAttributes(Element ele, String beanName,_			BeanDefinition containingBean, AbstractBeanDefinition bd) {__		if (ele.hasAttribute(SINGLETON_ATTRIBUTE)) {_			error("Old 1.x 'singleton' attribute in use - upgrade to 'scope' declaration", ele)__		}_		else if (ele.hasAttribute(SCOPE_ATTRIBUTE)) {_			bd.setScope(ele.getAttribute(SCOPE_ATTRIBUTE))__		}_		else if (containingBean != null) {_			_			bd.setScope(containingBean.getScope())__		}__		if (ele.hasAttribute(ABSTRACT_ATTRIBUTE)) {_			bd.setAbstract(TRUE_VALUE.equals(ele.getAttribute(ABSTRACT_ATTRIBUTE)))__		}__		String lazyInit = ele.getAttribute(LAZY_INIT_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(lazyInit)) {_			lazyInit = this.defaults.getLazyInit()__		}_		bd.setLazyInit(TRUE_VALUE.equals(lazyInit))___		String autowire = ele.getAttribute(AUTOWIRE_ATTRIBUTE)__		bd.setAutowireMode(getAutowireMode(autowire))___		if (ele.hasAttribute(DEPENDS_ON_ATTRIBUTE)) {_			String dependsOn = ele.getAttribute(DEPENDS_ON_ATTRIBUTE)__			bd.setDependsOn(StringUtils.tokenizeToStringArray(dependsOn, MULTI_VALUE_ATTRIBUTE_DELIMITERS))__		}__		String autowireCandidate = ele.getAttribute(AUTOWIRE_CANDIDATE_ATTRIBUTE)__		if ("".equals(autowireCandidate) || DEFAULT_VALUE.equals(autowireCandidate)) {_			String candidatePattern = this.defaults.getAutowireCandidates()__			if (candidatePattern != null) {_				String[] patterns = StringUtils.commaDelimitedListToStringArray(candidatePattern)__				bd.setAutowireCandidate(PatternMatchUtils.simpleMatch(patterns, beanName))__			}_		}_		else {_			bd.setAutowireCandidate(TRUE_VALUE.equals(autowireCandidate))__		}__		if (ele.hasAttribute(PRIMARY_ATTRIBUTE)) {_			bd.setPrimary(TRUE_VALUE.equals(ele.getAttribute(PRIMARY_ATTRIBUTE)))__		}__		if (ele.hasAttribute(INIT_METHOD_ATTRIBUTE)) {_			String initMethodName = ele.getAttribute(INIT_METHOD_ATTRIBUTE)__			if (!"".equals(initMethodName)) {_				bd.setInitMethodName(initMethodName)__			}_		}_		else if (this.defaults.getInitMethod() != null) {_			bd.setInitMethodName(this.defaults.getInitMethod())__			bd.setEnforceInitMethod(false)__		}__		if (ele.hasAttribute(DESTROY_METHOD_ATTRIBUTE)) {_			String destroyMethodName = ele.getAttribute(DESTROY_METHOD_ATTRIBUTE)__			bd.setDestroyMethodName(destroyMethodName)__		}_		else if (this.defaults.getDestroyMethod() != null) {_			bd.setDestroyMethodName(this.defaults.getDestroyMethod())__			bd.setEnforceDestroyMethod(false)__		}__		if (ele.hasAttribute(FACTORY_METHOD_ATTRIBUTE)) {_			bd.setFactoryMethodName(ele.getAttribute(FACTORY_METHOD_ATTRIBUTE))__		}_		if (ele.hasAttribute(FACTORY_BEAN_ATTRIBUTE)) {_			bd.setFactoryBeanName(ele.getAttribute(FACTORY_BEAN_ATTRIBUTE))__		}__		return bd__	};apply,the,attributes,of,the,given,bean,element,to,the,given,bean,definition,param,ele,bean,declaration,element,param,bean,name,bean,name,param,containing,bean,containing,bean,definition,return,a,bean,definition,initialized,according,to,the,bean,element,attributes;public,abstract,bean,definition,parse,bean,definition,attributes,element,ele,string,bean,name,bean,definition,containing,bean,abstract,bean,definition,bd,if,ele,has,attribute,error,old,1,x,singleton,attribute,in,use,upgrade,to,scope,declaration,ele,else,if,ele,has,attribute,bd,set,scope,ele,get,attribute,else,if,containing,bean,null,bd,set,scope,containing,bean,get,scope,if,ele,has,attribute,bd,set,abstract,equals,ele,get,attribute,string,lazy,init,ele,get,attribute,if,equals,lazy,init,lazy,init,this,defaults,get,lazy,init,bd,set,lazy,init,equals,lazy,init,string,autowire,ele,get,attribute,bd,set,autowire,mode,get,autowire,mode,autowire,if,ele,has,attribute,string,depends,on,ele,get,attribute,bd,set,depends,on,string,utils,tokenize,to,string,array,depends,on,string,autowire,candidate,ele,get,attribute,if,equals,autowire,candidate,equals,autowire,candidate,string,candidate,pattern,this,defaults,get,autowire,candidates,if,candidate,pattern,null,string,patterns,string,utils,comma,delimited,list,to,string,array,candidate,pattern,bd,set,autowire,candidate,pattern,match,utils,simple,match,patterns,bean,name,else,bd,set,autowire,candidate,equals,autowire,candidate,if,ele,has,attribute,bd,set,primary,equals,ele,get,attribute,if,ele,has,attribute,string,init,method,name,ele,get,attribute,if,equals,init,method,name,bd,set,init,method,name,init,method,name,else,if,this,defaults,get,init,method,null,bd,set,init,method,name,this,defaults,get,init,method,bd,set,enforce,init,method,false,if,ele,has,attribute,string,destroy,method,name,ele,get,attribute,bd,set,destroy,method,name,destroy,method,name,else,if,this,defaults,get,destroy,method,null,bd,set,destroy,method,name,this,defaults,get,destroy,method,bd,set,enforce,destroy,method,false,if,ele,has,attribute,bd,set,factory,method,name,ele,get,attribute,if,ele,has,attribute,bd,set,factory,bean,name,ele,get,attribute,return,bd
BeanDefinitionParserDelegate -> public AbstractBeanDefinition parseBeanDefinitionAttributes(Element ele, String beanName, 			BeanDefinition containingBean, AbstractBeanDefinition bd);1496259743;Apply the attributes of the given bean element to the given bean * definition._@param ele bean declaration element_@param beanName bean name_@param containingBean containing bean definition_@return a bean definition initialized according to the bean element attributes;public AbstractBeanDefinition parseBeanDefinitionAttributes(Element ele, String beanName,_			BeanDefinition containingBean, AbstractBeanDefinition bd) {__		if (ele.hasAttribute(SINGLETON_ATTRIBUTE)) {_			error("Old 1.x 'singleton' attribute in use - upgrade to 'scope' declaration", ele)__		}_		else if (ele.hasAttribute(SCOPE_ATTRIBUTE)) {_			bd.setScope(ele.getAttribute(SCOPE_ATTRIBUTE))__		}_		else if (containingBean != null) {_			_			bd.setScope(containingBean.getScope())__		}__		if (ele.hasAttribute(ABSTRACT_ATTRIBUTE)) {_			bd.setAbstract(TRUE_VALUE.equals(ele.getAttribute(ABSTRACT_ATTRIBUTE)))__		}__		String lazyInit = ele.getAttribute(LAZY_INIT_ATTRIBUTE)__		if (DEFAULT_VALUE.equals(lazyInit)) {_			lazyInit = this.defaults.getLazyInit()__		}_		bd.setLazyInit(TRUE_VALUE.equals(lazyInit))___		String autowire = ele.getAttribute(AUTOWIRE_ATTRIBUTE)__		bd.setAutowireMode(getAutowireMode(autowire))___		if (ele.hasAttribute(DEPENDS_ON_ATTRIBUTE)) {_			String dependsOn = ele.getAttribute(DEPENDS_ON_ATTRIBUTE)__			bd.setDependsOn(StringUtils.tokenizeToStringArray(dependsOn, MULTI_VALUE_ATTRIBUTE_DELIMITERS))__		}__		String autowireCandidate = ele.getAttribute(AUTOWIRE_CANDIDATE_ATTRIBUTE)__		if ("".equals(autowireCandidate) || DEFAULT_VALUE.equals(autowireCandidate)) {_			String candidatePattern = this.defaults.getAutowireCandidates()__			if (candidatePattern != null) {_				String[] patterns = StringUtils.commaDelimitedListToStringArray(candidatePattern)__				bd.setAutowireCandidate(PatternMatchUtils.simpleMatch(patterns, beanName))__			}_		}_		else {_			bd.setAutowireCandidate(TRUE_VALUE.equals(autowireCandidate))__		}__		if (ele.hasAttribute(PRIMARY_ATTRIBUTE)) {_			bd.setPrimary(TRUE_VALUE.equals(ele.getAttribute(PRIMARY_ATTRIBUTE)))__		}__		if (ele.hasAttribute(INIT_METHOD_ATTRIBUTE)) {_			String initMethodName = ele.getAttribute(INIT_METHOD_ATTRIBUTE)__			if (!"".equals(initMethodName)) {_				bd.setInitMethodName(initMethodName)__			}_		}_		else if (this.defaults.getInitMethod() != null) {_			bd.setInitMethodName(this.defaults.getInitMethod())__			bd.setEnforceInitMethod(false)__		}__		if (ele.hasAttribute(DESTROY_METHOD_ATTRIBUTE)) {_			String destroyMethodName = ele.getAttribute(DESTROY_METHOD_ATTRIBUTE)__			bd.setDestroyMethodName(destroyMethodName)__		}_		else if (this.defaults.getDestroyMethod() != null) {_			bd.setDestroyMethodName(this.defaults.getDestroyMethod())__			bd.setEnforceDestroyMethod(false)__		}__		if (ele.hasAttribute(FACTORY_METHOD_ATTRIBUTE)) {_			bd.setFactoryMethodName(ele.getAttribute(FACTORY_METHOD_ATTRIBUTE))__		}_		if (ele.hasAttribute(FACTORY_BEAN_ATTRIBUTE)) {_			bd.setFactoryBeanName(ele.getAttribute(FACTORY_BEAN_ATTRIBUTE))__		}__		return bd__	};apply,the,attributes,of,the,given,bean,element,to,the,given,bean,definition,param,ele,bean,declaration,element,param,bean,name,bean,name,param,containing,bean,containing,bean,definition,return,a,bean,definition,initialized,according,to,the,bean,element,attributes;public,abstract,bean,definition,parse,bean,definition,attributes,element,ele,string,bean,name,bean,definition,containing,bean,abstract,bean,definition,bd,if,ele,has,attribute,error,old,1,x,singleton,attribute,in,use,upgrade,to,scope,declaration,ele,else,if,ele,has,attribute,bd,set,scope,ele,get,attribute,else,if,containing,bean,null,bd,set,scope,containing,bean,get,scope,if,ele,has,attribute,bd,set,abstract,equals,ele,get,attribute,string,lazy,init,ele,get,attribute,if,equals,lazy,init,lazy,init,this,defaults,get,lazy,init,bd,set,lazy,init,equals,lazy,init,string,autowire,ele,get,attribute,bd,set,autowire,mode,get,autowire,mode,autowire,if,ele,has,attribute,string,depends,on,ele,get,attribute,bd,set,depends,on,string,utils,tokenize,to,string,array,depends,on,string,autowire,candidate,ele,get,attribute,if,equals,autowire,candidate,equals,autowire,candidate,string,candidate,pattern,this,defaults,get,autowire,candidates,if,candidate,pattern,null,string,patterns,string,utils,comma,delimited,list,to,string,array,candidate,pattern,bd,set,autowire,candidate,pattern,match,utils,simple,match,patterns,bean,name,else,bd,set,autowire,candidate,equals,autowire,candidate,if,ele,has,attribute,bd,set,primary,equals,ele,get,attribute,if,ele,has,attribute,string,init,method,name,ele,get,attribute,if,equals,init,method,name,bd,set,init,method,name,init,method,name,else,if,this,defaults,get,init,method,null,bd,set,init,method,name,this,defaults,get,init,method,bd,set,enforce,init,method,false,if,ele,has,attribute,string,destroy,method,name,ele,get,attribute,bd,set,destroy,method,name,destroy,method,name,else,if,this,defaults,get,destroy,method,null,bd,set,destroy,method,name,this,defaults,get,destroy,method,bd,set,enforce,destroy,method,false,if,ele,has,attribute,bd,set,factory,method,name,ele,get,attribute,if,ele,has,attribute,bd,set,factory,bean,name,ele,get,attribute,return,bd
BeanDefinitionParserDelegate -> public String[] getAutowireCandidatePatterns();1328020251;Return any patterns provided in the 'default-autowire-candidates'_attribute of the top-level <code>&lt_beans/&gt_</code> element.;public String[] getAutowireCandidatePatterns() {_		String candidatePattern = this.defaults.getAutowireCandidates()__		return (candidatePattern != null ? StringUtils.commaDelimitedListToStringArray(candidatePattern) : null)__	};return,any,patterns,provided,in,the,default,autowire,candidates,attribute,of,the,top,level,code,lt,beans,gt,code,element;public,string,get,autowire,candidate,patterns,string,candidate,pattern,this,defaults,get,autowire,candidates,return,candidate,pattern,null,string,utils,comma,delimited,list,to,string,array,candidate,pattern,null
BeanDefinitionParserDelegate -> public String[] getAutowireCandidatePatterns();1335774711;Return any patterns provided in the 'default-autowire-candidates'_attribute of the top-level <code>&lt_beans/&gt_</code> element.;public String[] getAutowireCandidatePatterns() {_		String candidatePattern = this.defaults.getAutowireCandidates()__		return (candidatePattern != null ? StringUtils.commaDelimitedListToStringArray(candidatePattern) : null)__	};return,any,patterns,provided,in,the,default,autowire,candidates,attribute,of,the,top,level,code,lt,beans,gt,code,element;public,string,get,autowire,candidate,patterns,string,candidate,pattern,this,defaults,get,autowire,candidates,return,candidate,pattern,null,string,utils,comma,delimited,list,to,string,array,candidate,pattern,null
BeanDefinitionParserDelegate -> public String[] getAutowireCandidatePatterns();1337341719;Return any patterns provided in the 'default-autowire-candidates'_attribute of the top-level <code>&lt_beans/&gt_</code> element.;public String[] getAutowireCandidatePatterns() {_		String candidatePattern = this.defaults.getAutowireCandidates()__		return (candidatePattern != null ? StringUtils.commaDelimitedListToStringArray(candidatePattern) : null)__	};return,any,patterns,provided,in,the,default,autowire,candidates,attribute,of,the,top,level,code,lt,beans,gt,code,element;public,string,get,autowire,candidate,patterns,string,candidate,pattern,this,defaults,get,autowire,candidates,return,candidate,pattern,null,string,utils,comma,delimited,list,to,string,array,candidate,pattern,null
BeanDefinitionParserDelegate -> public String[] getAutowireCandidatePatterns();1351392612;Return any patterns provided in the 'default-autowire-candidates'_attribute of the top-level <code>&lt_beans/&gt_</code> element.;public String[] getAutowireCandidatePatterns() {_		String candidatePattern = this.defaults.getAutowireCandidates()__		return (candidatePattern != null ? StringUtils.commaDelimitedListToStringArray(candidatePattern) : null)__	};return,any,patterns,provided,in,the,default,autowire,candidates,attribute,of,the,top,level,code,lt,beans,gt,code,element;public,string,get,autowire,candidate,patterns,string,candidate,pattern,this,defaults,get,autowire,candidates,return,candidate,pattern,null,string,utils,comma,delimited,list,to,string,array,candidate,pattern,null
BeanDefinitionParserDelegate -> public String[] getAutowireCandidatePatterns();1351696936;Return any patterns provided in the 'default-autowire-candidates'_attribute of the top-level <code>&lt_beans/&gt_</code> element.;public String[] getAutowireCandidatePatterns() {_		String candidatePattern = this.defaults.getAutowireCandidates()__		return (candidatePattern != null ? StringUtils.commaDelimitedListToStringArray(candidatePattern) : null)__	};return,any,patterns,provided,in,the,default,autowire,candidates,attribute,of,the,top,level,code,lt,beans,gt,code,element;public,string,get,autowire,candidate,patterns,string,candidate,pattern,this,defaults,get,autowire,candidates,return,candidate,pattern,null,string,utils,comma,delimited,list,to,string,array,candidate,pattern,null
BeanDefinitionParserDelegate -> public String[] getAutowireCandidatePatterns();1356735495;Return any patterns provided in the 'default-autowire-candidates'_attribute of the top-level {@code &lt_beans/&gt_} element.;public String[] getAutowireCandidatePatterns() {_		String candidatePattern = this.defaults.getAutowireCandidates()__		return (candidatePattern != null ? StringUtils.commaDelimitedListToStringArray(candidatePattern) : null)__	};return,any,patterns,provided,in,the,default,autowire,candidates,attribute,of,the,top,level,code,lt,beans,gt,element;public,string,get,autowire,candidate,patterns,string,candidate,pattern,this,defaults,get,autowire,candidates,return,candidate,pattern,null,string,utils,comma,delimited,list,to,string,array,candidate,pattern,null
BeanDefinitionParserDelegate -> public String[] getAutowireCandidatePatterns();1357119417;Return any patterns provided in the 'default-autowire-candidates'_attribute of the top-level {@code &lt_beans/&gt_} element.;public String[] getAutowireCandidatePatterns() {_		String candidatePattern = this.defaults.getAutowireCandidates()__		return (candidatePattern != null ? StringUtils.commaDelimitedListToStringArray(candidatePattern) : null)__	};return,any,patterns,provided,in,the,default,autowire,candidates,attribute,of,the,top,level,code,lt,beans,gt,element;public,string,get,autowire,candidate,patterns,string,candidate,pattern,this,defaults,get,autowire,candidates,return,candidate,pattern,null,string,utils,comma,delimited,list,to,string,array,candidate,pattern,null
BeanDefinitionParserDelegate -> public String[] getAutowireCandidatePatterns();1367943112;Return any patterns provided in the 'default-autowire-candidates'_attribute of the top-level {@code &lt_beans/&gt_} element.;public String[] getAutowireCandidatePatterns() {_		String candidatePattern = this.defaults.getAutowireCandidates()__		return (candidatePattern != null ? StringUtils.commaDelimitedListToStringArray(candidatePattern) : null)__	};return,any,patterns,provided,in,the,default,autowire,candidates,attribute,of,the,top,level,code,lt,beans,gt,element;public,string,get,autowire,candidate,patterns,string,candidate,pattern,this,defaults,get,autowire,candidates,return,candidate,pattern,null,string,utils,comma,delimited,list,to,string,array,candidate,pattern,null
BeanDefinitionParserDelegate -> public String[] getAutowireCandidatePatterns();1382030648;Return any patterns provided in the 'default-autowire-candidates'_attribute of the top-level {@code &lt_beans/&gt_} element.;public String[] getAutowireCandidatePatterns() {_		String candidatePattern = this.defaults.getAutowireCandidates()__		return (candidatePattern != null ? StringUtils.commaDelimitedListToStringArray(candidatePattern) : null)__	};return,any,patterns,provided,in,the,default,autowire,candidates,attribute,of,the,top,level,code,lt,beans,gt,element;public,string,get,autowire,candidate,patterns,string,candidate,pattern,this,defaults,get,autowire,candidates,return,candidate,pattern,null,string,utils,comma,delimited,list,to,string,array,candidate,pattern,null
BeanDefinitionParserDelegate -> public String[] getAutowireCandidatePatterns();1385412762;Return any patterns provided in the 'default-autowire-candidates'_attribute of the top-level {@code &lt_beans/&gt_} element.;public String[] getAutowireCandidatePatterns() {_		String candidatePattern = this.defaults.getAutowireCandidates()__		return (candidatePattern != null ? StringUtils.commaDelimitedListToStringArray(candidatePattern) : null)__	};return,any,patterns,provided,in,the,default,autowire,candidates,attribute,of,the,top,level,code,lt,beans,gt,element;public,string,get,autowire,candidate,patterns,string,candidate,pattern,this,defaults,get,autowire,candidates,return,candidate,pattern,null,string,utils,comma,delimited,list,to,string,array,candidate,pattern,null
BeanDefinitionParserDelegate -> public String[] getAutowireCandidatePatterns();1410953197;Return any patterns provided in the 'default-autowire-candidates'_attribute of the top-level {@code &lt_beans/&gt_} element.;public String[] getAutowireCandidatePatterns() {_		String candidatePattern = this.defaults.getAutowireCandidates()__		return (candidatePattern != null ? StringUtils.commaDelimitedListToStringArray(candidatePattern) : null)__	};return,any,patterns,provided,in,the,default,autowire,candidates,attribute,of,the,top,level,code,lt,beans,gt,element;public,string,get,autowire,candidate,patterns,string,candidate,pattern,this,defaults,get,autowire,candidates,return,candidate,pattern,null,string,utils,comma,delimited,list,to,string,array,candidate,pattern,null
BeanDefinitionParserDelegate -> public String[] getAutowireCandidatePatterns();1411599760;Return any patterns provided in the 'default-autowire-candidates'_attribute of the top-level {@code &lt_beans/&gt_} element.;public String[] getAutowireCandidatePatterns() {_		String candidatePattern = this.defaults.getAutowireCandidates()__		return (candidatePattern != null ? StringUtils.commaDelimitedListToStringArray(candidatePattern) : null)__	};return,any,patterns,provided,in,the,default,autowire,candidates,attribute,of,the,top,level,code,lt,beans,gt,element;public,string,get,autowire,candidate,patterns,string,candidate,pattern,this,defaults,get,autowire,candidates,return,candidate,pattern,null,string,utils,comma,delimited,list,to,string,array,candidate,pattern,null
BeanDefinitionParserDelegate -> public String[] getAutowireCandidatePatterns();1419966315;Return any patterns provided in the 'default-autowire-candidates'_attribute of the top-level {@code &lt_beans/&gt_} element.;public String[] getAutowireCandidatePatterns() {_		String candidatePattern = this.defaults.getAutowireCandidates()__		return (candidatePattern != null ? StringUtils.commaDelimitedListToStringArray(candidatePattern) : null)__	};return,any,patterns,provided,in,the,default,autowire,candidates,attribute,of,the,top,level,code,lt,beans,gt,element;public,string,get,autowire,candidate,patterns,string,candidate,pattern,this,defaults,get,autowire,candidates,return,candidate,pattern,null,string,utils,comma,delimited,list,to,string,array,candidate,pattern,null
BeanDefinitionParserDelegate -> public String[] getAutowireCandidatePatterns();1431958785;Return any patterns provided in the 'default-autowire-candidates'_attribute of the top-level {@code &lt_beans/&gt_} element.;public String[] getAutowireCandidatePatterns() {_		String candidatePattern = this.defaults.getAutowireCandidates()__		return (candidatePattern != null ? StringUtils.commaDelimitedListToStringArray(candidatePattern) : null)__	};return,any,patterns,provided,in,the,default,autowire,candidates,attribute,of,the,top,level,code,lt,beans,gt,element;public,string,get,autowire,candidate,patterns,string,candidate,pattern,this,defaults,get,autowire,candidates,return,candidate,pattern,null,string,utils,comma,delimited,list,to,string,array,candidate,pattern,null
BeanDefinitionParserDelegate -> public String[] getAutowireCandidatePatterns();1432135182;Return any patterns provided in the 'default-autowire-candidates'_attribute of the top-level {@code &lt_beans/&gt_} element.;public String[] getAutowireCandidatePatterns() {_		String candidatePattern = this.defaults.getAutowireCandidates()__		return (candidatePattern != null ? StringUtils.commaDelimitedListToStringArray(candidatePattern) : null)__	};return,any,patterns,provided,in,the,default,autowire,candidates,attribute,of,the,top,level,code,lt,beans,gt,element;public,string,get,autowire,candidate,patterns,string,candidate,pattern,this,defaults,get,autowire,candidates,return,candidate,pattern,null,string,utils,comma,delimited,list,to,string,array,candidate,pattern,null
BeanDefinitionParserDelegate -> public String[] getAutowireCandidatePatterns();1447323728;Return any patterns provided in the 'default-autowire-candidates'_attribute of the top-level {@code <beans/>} element.;public String[] getAutowireCandidatePatterns() {_		String candidatePattern = this.defaults.getAutowireCandidates()__		return (candidatePattern != null ? StringUtils.commaDelimitedListToStringArray(candidatePattern) : null)__	};return,any,patterns,provided,in,the,default,autowire,candidates,attribute,of,the,top,level,code,beans,element;public,string,get,autowire,candidate,patterns,string,candidate,pattern,this,defaults,get,autowire,candidates,return,candidate,pattern,null,string,utils,comma,delimited,list,to,string,array,candidate,pattern,null
BeanDefinitionParserDelegate -> public String[] getAutowireCandidatePatterns();1467726769;Return any patterns provided in the 'default-autowire-candidates'_attribute of the top-level {@code <beans/>} element.;public String[] getAutowireCandidatePatterns() {_		String candidatePattern = this.defaults.getAutowireCandidates()__		return (candidatePattern != null ? StringUtils.commaDelimitedListToStringArray(candidatePattern) : null)__	};return,any,patterns,provided,in,the,default,autowire,candidates,attribute,of,the,top,level,code,beans,element;public,string,get,autowire,candidate,patterns,string,candidate,pattern,this,defaults,get,autowire,candidates,return,candidate,pattern,null,string,utils,comma,delimited,list,to,string,array,candidate,pattern,null
BeanDefinitionParserDelegate -> public String[] getAutowireCandidatePatterns();1467730834;Return any patterns provided in the 'default-autowire-candidates'_attribute of the top-level {@code <beans/>} element.;public String[] getAutowireCandidatePatterns() {_		String candidatePattern = this.defaults.getAutowireCandidates()__		return (candidatePattern != null ? StringUtils.commaDelimitedListToStringArray(candidatePattern) : null)__	};return,any,patterns,provided,in,the,default,autowire,candidates,attribute,of,the,top,level,code,beans,element;public,string,get,autowire,candidate,patterns,string,candidate,pattern,this,defaults,get,autowire,candidates,return,candidate,pattern,null,string,utils,comma,delimited,list,to,string,array,candidate,pattern,null
BeanDefinitionParserDelegate -> public String[] getAutowireCandidatePatterns();1467744603;Return any patterns provided in the 'default-autowire-candidates'_attribute of the top-level {@code <beans/>} element.;public String[] getAutowireCandidatePatterns() {_		String candidatePattern = this.defaults.getAutowireCandidates()__		return (candidatePattern != null ? StringUtils.commaDelimitedListToStringArray(candidatePattern) : null)__	};return,any,patterns,provided,in,the,default,autowire,candidates,attribute,of,the,top,level,code,beans,element;public,string,get,autowire,candidate,patterns,string,candidate,pattern,this,defaults,get,autowire,candidates,return,candidate,pattern,null,string,utils,comma,delimited,list,to,string,array,candidate,pattern,null
BeanDefinitionParserDelegate -> public String[] getAutowireCandidatePatterns();1487245676;Return any patterns provided in the 'default-autowire-candidates'_attribute of the top-level {@code <beans/>} element.;public String[] getAutowireCandidatePatterns() {_		String candidatePattern = this.defaults.getAutowireCandidates()__		return (candidatePattern != null ? StringUtils.commaDelimitedListToStringArray(candidatePattern) : null)__	};return,any,patterns,provided,in,the,default,autowire,candidates,attribute,of,the,top,level,code,beans,element;public,string,get,autowire,candidate,patterns,string,candidate,pattern,this,defaults,get,autowire,candidates,return,candidate,pattern,null,string,utils,comma,delimited,list,to,string,array,candidate,pattern,null
BeanDefinitionParserDelegate -> public String[] getAutowireCandidatePatterns();1487255851;Return any patterns provided in the 'default-autowire-candidates'_attribute of the top-level {@code <beans/>} element.;public String[] getAutowireCandidatePatterns() {_		String candidatePattern = this.defaults.getAutowireCandidates()__		return (candidatePattern != null ? StringUtils.commaDelimitedListToStringArray(candidatePattern) : null)__	};return,any,patterns,provided,in,the,default,autowire,candidates,attribute,of,the,top,level,code,beans,element;public,string,get,autowire,candidate,patterns,string,candidate,pattern,this,defaults,get,autowire,candidates,return,candidate,pattern,null,string,utils,comma,delimited,list,to,string,array,candidate,pattern,null
BeanDefinitionParserDelegate -> public String[] getAutowireCandidatePatterns();1494586217;Return any patterns provided in the 'default-autowire-candidates'_attribute of the top-level {@code <beans/>} element.;public String[] getAutowireCandidatePatterns() {_		String candidatePattern = this.defaults.getAutowireCandidates()__		return (candidatePattern != null ? StringUtils.commaDelimitedListToStringArray(candidatePattern) : null)__	};return,any,patterns,provided,in,the,default,autowire,candidates,attribute,of,the,top,level,code,beans,element;public,string,get,autowire,candidate,patterns,string,candidate,pattern,this,defaults,get,autowire,candidates,return,candidate,pattern,null,string,utils,comma,delimited,list,to,string,array,candidate,pattern,null
BeanDefinitionParserDelegate -> public String[] getAutowireCandidatePatterns();1495868221;Return any patterns provided in the 'default-autowire-candidates'_attribute of the top-level {@code <beans/>} element.;public String[] getAutowireCandidatePatterns() {_		String candidatePattern = this.defaults.getAutowireCandidates()__		return (candidatePattern != null ? StringUtils.commaDelimitedListToStringArray(candidatePattern) : null)__	};return,any,patterns,provided,in,the,default,autowire,candidates,attribute,of,the,top,level,code,beans,element;public,string,get,autowire,candidate,patterns,string,candidate,pattern,this,defaults,get,autowire,candidates,return,candidate,pattern,null,string,utils,comma,delimited,list,to,string,array,candidate,pattern,null
BeanDefinitionParserDelegate -> public String[] getAutowireCandidatePatterns();1496259743;Return any patterns provided in the 'default-autowire-candidates'_attribute of the top-level {@code <beans/>} element.;public String[] getAutowireCandidatePatterns() {_		String candidatePattern = this.defaults.getAutowireCandidates()__		return (candidatePattern != null ? StringUtils.commaDelimitedListToStringArray(candidatePattern) : null)__	};return,any,patterns,provided,in,the,default,autowire,candidates,attribute,of,the,top,level,code,beans,element;public,string,get,autowire,candidate,patterns,string,candidate,pattern,this,defaults,get,autowire,candidates,return,candidate,pattern,null,string,utils,comma,delimited,list,to,string,array,candidate,pattern,null
BeanDefinitionParserDelegate -> public Object parseArrayElement(Element arrayEle, BeanDefinition bd);1328020251;Parse an array element.;public Object parseArrayElement(Element arrayEle, BeanDefinition bd) {_		String elementType = arrayEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = arrayEle.getChildNodes()__		ManagedArray target = new ManagedArray(elementType, nl.getLength())__		target.setSource(extractSource(arrayEle))__		target.setElementTypeName(elementType)__		target.setMergeEnabled(parseMergeAttribute(arrayEle))__		parseCollectionElements(nl, target, bd, elementType)__		return target__	};parse,an,array,element;public,object,parse,array,element,element,array,ele,bean,definition,bd,string,element,type,array,ele,get,attribute,node,list,nl,array,ele,get,child,nodes,managed,array,target,new,managed,array,element,type,nl,get,length,target,set,source,extract,source,array,ele,target,set,element,type,name,element,type,target,set,merge,enabled,parse,merge,attribute,array,ele,parse,collection,elements,nl,target,bd,element,type,return,target
BeanDefinitionParserDelegate -> public Object parseArrayElement(Element arrayEle, BeanDefinition bd);1335774711;Parse an array element.;public Object parseArrayElement(Element arrayEle, BeanDefinition bd) {_		String elementType = arrayEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = arrayEle.getChildNodes()__		ManagedArray target = new ManagedArray(elementType, nl.getLength())__		target.setSource(extractSource(arrayEle))__		target.setElementTypeName(elementType)__		target.setMergeEnabled(parseMergeAttribute(arrayEle))__		parseCollectionElements(nl, target, bd, elementType)__		return target__	};parse,an,array,element;public,object,parse,array,element,element,array,ele,bean,definition,bd,string,element,type,array,ele,get,attribute,node,list,nl,array,ele,get,child,nodes,managed,array,target,new,managed,array,element,type,nl,get,length,target,set,source,extract,source,array,ele,target,set,element,type,name,element,type,target,set,merge,enabled,parse,merge,attribute,array,ele,parse,collection,elements,nl,target,bd,element,type,return,target
BeanDefinitionParserDelegate -> public Object parseArrayElement(Element arrayEle, BeanDefinition bd);1337341719;Parse an array element.;public Object parseArrayElement(Element arrayEle, BeanDefinition bd) {_		String elementType = arrayEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = arrayEle.getChildNodes()__		ManagedArray target = new ManagedArray(elementType, nl.getLength())__		target.setSource(extractSource(arrayEle))__		target.setElementTypeName(elementType)__		target.setMergeEnabled(parseMergeAttribute(arrayEle))__		parseCollectionElements(nl, target, bd, elementType)__		return target__	};parse,an,array,element;public,object,parse,array,element,element,array,ele,bean,definition,bd,string,element,type,array,ele,get,attribute,node,list,nl,array,ele,get,child,nodes,managed,array,target,new,managed,array,element,type,nl,get,length,target,set,source,extract,source,array,ele,target,set,element,type,name,element,type,target,set,merge,enabled,parse,merge,attribute,array,ele,parse,collection,elements,nl,target,bd,element,type,return,target
BeanDefinitionParserDelegate -> public Object parseArrayElement(Element arrayEle, BeanDefinition bd);1351392612;Parse an array element.;public Object parseArrayElement(Element arrayEle, BeanDefinition bd) {_		String elementType = arrayEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = arrayEle.getChildNodes()__		ManagedArray target = new ManagedArray(elementType, nl.getLength())__		target.setSource(extractSource(arrayEle))__		target.setElementTypeName(elementType)__		target.setMergeEnabled(parseMergeAttribute(arrayEle))__		parseCollectionElements(nl, target, bd, elementType)__		return target__	};parse,an,array,element;public,object,parse,array,element,element,array,ele,bean,definition,bd,string,element,type,array,ele,get,attribute,node,list,nl,array,ele,get,child,nodes,managed,array,target,new,managed,array,element,type,nl,get,length,target,set,source,extract,source,array,ele,target,set,element,type,name,element,type,target,set,merge,enabled,parse,merge,attribute,array,ele,parse,collection,elements,nl,target,bd,element,type,return,target
BeanDefinitionParserDelegate -> public Object parseArrayElement(Element arrayEle, BeanDefinition bd);1351696936;Parse an array element.;public Object parseArrayElement(Element arrayEle, BeanDefinition bd) {_		String elementType = arrayEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = arrayEle.getChildNodes()__		ManagedArray target = new ManagedArray(elementType, nl.getLength())__		target.setSource(extractSource(arrayEle))__		target.setElementTypeName(elementType)__		target.setMergeEnabled(parseMergeAttribute(arrayEle))__		parseCollectionElements(nl, target, bd, elementType)__		return target__	};parse,an,array,element;public,object,parse,array,element,element,array,ele,bean,definition,bd,string,element,type,array,ele,get,attribute,node,list,nl,array,ele,get,child,nodes,managed,array,target,new,managed,array,element,type,nl,get,length,target,set,source,extract,source,array,ele,target,set,element,type,name,element,type,target,set,merge,enabled,parse,merge,attribute,array,ele,parse,collection,elements,nl,target,bd,element,type,return,target
BeanDefinitionParserDelegate -> public Object parseArrayElement(Element arrayEle, BeanDefinition bd);1356735495;Parse an array element.;public Object parseArrayElement(Element arrayEle, BeanDefinition bd) {_		String elementType = arrayEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = arrayEle.getChildNodes()__		ManagedArray target = new ManagedArray(elementType, nl.getLength())__		target.setSource(extractSource(arrayEle))__		target.setElementTypeName(elementType)__		target.setMergeEnabled(parseMergeAttribute(arrayEle))__		parseCollectionElements(nl, target, bd, elementType)__		return target__	};parse,an,array,element;public,object,parse,array,element,element,array,ele,bean,definition,bd,string,element,type,array,ele,get,attribute,node,list,nl,array,ele,get,child,nodes,managed,array,target,new,managed,array,element,type,nl,get,length,target,set,source,extract,source,array,ele,target,set,element,type,name,element,type,target,set,merge,enabled,parse,merge,attribute,array,ele,parse,collection,elements,nl,target,bd,element,type,return,target
BeanDefinitionParserDelegate -> public Object parseArrayElement(Element arrayEle, BeanDefinition bd);1357119417;Parse an array element.;public Object parseArrayElement(Element arrayEle, BeanDefinition bd) {_		String elementType = arrayEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = arrayEle.getChildNodes()__		ManagedArray target = new ManagedArray(elementType, nl.getLength())__		target.setSource(extractSource(arrayEle))__		target.setElementTypeName(elementType)__		target.setMergeEnabled(parseMergeAttribute(arrayEle))__		parseCollectionElements(nl, target, bd, elementType)__		return target__	};parse,an,array,element;public,object,parse,array,element,element,array,ele,bean,definition,bd,string,element,type,array,ele,get,attribute,node,list,nl,array,ele,get,child,nodes,managed,array,target,new,managed,array,element,type,nl,get,length,target,set,source,extract,source,array,ele,target,set,element,type,name,element,type,target,set,merge,enabled,parse,merge,attribute,array,ele,parse,collection,elements,nl,target,bd,element,type,return,target
BeanDefinitionParserDelegate -> public Object parseArrayElement(Element arrayEle, BeanDefinition bd);1367943112;Parse an array element.;public Object parseArrayElement(Element arrayEle, BeanDefinition bd) {_		String elementType = arrayEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = arrayEle.getChildNodes()__		ManagedArray target = new ManagedArray(elementType, nl.getLength())__		target.setSource(extractSource(arrayEle))__		target.setElementTypeName(elementType)__		target.setMergeEnabled(parseMergeAttribute(arrayEle))__		parseCollectionElements(nl, target, bd, elementType)__		return target__	};parse,an,array,element;public,object,parse,array,element,element,array,ele,bean,definition,bd,string,element,type,array,ele,get,attribute,node,list,nl,array,ele,get,child,nodes,managed,array,target,new,managed,array,element,type,nl,get,length,target,set,source,extract,source,array,ele,target,set,element,type,name,element,type,target,set,merge,enabled,parse,merge,attribute,array,ele,parse,collection,elements,nl,target,bd,element,type,return,target
BeanDefinitionParserDelegate -> public Object parseArrayElement(Element arrayEle, BeanDefinition bd);1382030648;Parse an array element.;public Object parseArrayElement(Element arrayEle, BeanDefinition bd) {_		String elementType = arrayEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = arrayEle.getChildNodes()__		ManagedArray target = new ManagedArray(elementType, nl.getLength())__		target.setSource(extractSource(arrayEle))__		target.setElementTypeName(elementType)__		target.setMergeEnabled(parseMergeAttribute(arrayEle))__		parseCollectionElements(nl, target, bd, elementType)__		return target__	};parse,an,array,element;public,object,parse,array,element,element,array,ele,bean,definition,bd,string,element,type,array,ele,get,attribute,node,list,nl,array,ele,get,child,nodes,managed,array,target,new,managed,array,element,type,nl,get,length,target,set,source,extract,source,array,ele,target,set,element,type,name,element,type,target,set,merge,enabled,parse,merge,attribute,array,ele,parse,collection,elements,nl,target,bd,element,type,return,target
BeanDefinitionParserDelegate -> public Object parseArrayElement(Element arrayEle, BeanDefinition bd);1385412762;Parse an array element.;public Object parseArrayElement(Element arrayEle, BeanDefinition bd) {_		String elementType = arrayEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = arrayEle.getChildNodes()__		ManagedArray target = new ManagedArray(elementType, nl.getLength())__		target.setSource(extractSource(arrayEle))__		target.setElementTypeName(elementType)__		target.setMergeEnabled(parseMergeAttribute(arrayEle))__		parseCollectionElements(nl, target, bd, elementType)__		return target__	};parse,an,array,element;public,object,parse,array,element,element,array,ele,bean,definition,bd,string,element,type,array,ele,get,attribute,node,list,nl,array,ele,get,child,nodes,managed,array,target,new,managed,array,element,type,nl,get,length,target,set,source,extract,source,array,ele,target,set,element,type,name,element,type,target,set,merge,enabled,parse,merge,attribute,array,ele,parse,collection,elements,nl,target,bd,element,type,return,target
BeanDefinitionParserDelegate -> public Object parseArrayElement(Element arrayEle, BeanDefinition bd);1410953197;Parse an array element.;public Object parseArrayElement(Element arrayEle, BeanDefinition bd) {_		String elementType = arrayEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = arrayEle.getChildNodes()__		ManagedArray target = new ManagedArray(elementType, nl.getLength())__		target.setSource(extractSource(arrayEle))__		target.setElementTypeName(elementType)__		target.setMergeEnabled(parseMergeAttribute(arrayEle))__		parseCollectionElements(nl, target, bd, elementType)__		return target__	};parse,an,array,element;public,object,parse,array,element,element,array,ele,bean,definition,bd,string,element,type,array,ele,get,attribute,node,list,nl,array,ele,get,child,nodes,managed,array,target,new,managed,array,element,type,nl,get,length,target,set,source,extract,source,array,ele,target,set,element,type,name,element,type,target,set,merge,enabled,parse,merge,attribute,array,ele,parse,collection,elements,nl,target,bd,element,type,return,target
BeanDefinitionParserDelegate -> public Object parseArrayElement(Element arrayEle, BeanDefinition bd);1411599760;Parse an array element.;public Object parseArrayElement(Element arrayEle, BeanDefinition bd) {_		String elementType = arrayEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = arrayEle.getChildNodes()__		ManagedArray target = new ManagedArray(elementType, nl.getLength())__		target.setSource(extractSource(arrayEle))__		target.setElementTypeName(elementType)__		target.setMergeEnabled(parseMergeAttribute(arrayEle))__		parseCollectionElements(nl, target, bd, elementType)__		return target__	};parse,an,array,element;public,object,parse,array,element,element,array,ele,bean,definition,bd,string,element,type,array,ele,get,attribute,node,list,nl,array,ele,get,child,nodes,managed,array,target,new,managed,array,element,type,nl,get,length,target,set,source,extract,source,array,ele,target,set,element,type,name,element,type,target,set,merge,enabled,parse,merge,attribute,array,ele,parse,collection,elements,nl,target,bd,element,type,return,target
BeanDefinitionParserDelegate -> public Object parseArrayElement(Element arrayEle, BeanDefinition bd);1419966315;Parse an array element.;public Object parseArrayElement(Element arrayEle, BeanDefinition bd) {_		String elementType = arrayEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = arrayEle.getChildNodes()__		ManagedArray target = new ManagedArray(elementType, nl.getLength())__		target.setSource(extractSource(arrayEle))__		target.setElementTypeName(elementType)__		target.setMergeEnabled(parseMergeAttribute(arrayEle))__		parseCollectionElements(nl, target, bd, elementType)__		return target__	};parse,an,array,element;public,object,parse,array,element,element,array,ele,bean,definition,bd,string,element,type,array,ele,get,attribute,node,list,nl,array,ele,get,child,nodes,managed,array,target,new,managed,array,element,type,nl,get,length,target,set,source,extract,source,array,ele,target,set,element,type,name,element,type,target,set,merge,enabled,parse,merge,attribute,array,ele,parse,collection,elements,nl,target,bd,element,type,return,target
BeanDefinitionParserDelegate -> public Object parseArrayElement(Element arrayEle, BeanDefinition bd);1431958785;Parse an array element.;public Object parseArrayElement(Element arrayEle, BeanDefinition bd) {_		String elementType = arrayEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = arrayEle.getChildNodes()__		ManagedArray target = new ManagedArray(elementType, nl.getLength())__		target.setSource(extractSource(arrayEle))__		target.setElementTypeName(elementType)__		target.setMergeEnabled(parseMergeAttribute(arrayEle))__		parseCollectionElements(nl, target, bd, elementType)__		return target__	};parse,an,array,element;public,object,parse,array,element,element,array,ele,bean,definition,bd,string,element,type,array,ele,get,attribute,node,list,nl,array,ele,get,child,nodes,managed,array,target,new,managed,array,element,type,nl,get,length,target,set,source,extract,source,array,ele,target,set,element,type,name,element,type,target,set,merge,enabled,parse,merge,attribute,array,ele,parse,collection,elements,nl,target,bd,element,type,return,target
BeanDefinitionParserDelegate -> public Object parseArrayElement(Element arrayEle, BeanDefinition bd);1432135182;Parse an array element.;public Object parseArrayElement(Element arrayEle, BeanDefinition bd) {_		String elementType = arrayEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = arrayEle.getChildNodes()__		ManagedArray target = new ManagedArray(elementType, nl.getLength())__		target.setSource(extractSource(arrayEle))__		target.setElementTypeName(elementType)__		target.setMergeEnabled(parseMergeAttribute(arrayEle))__		parseCollectionElements(nl, target, bd, elementType)__		return target__	};parse,an,array,element;public,object,parse,array,element,element,array,ele,bean,definition,bd,string,element,type,array,ele,get,attribute,node,list,nl,array,ele,get,child,nodes,managed,array,target,new,managed,array,element,type,nl,get,length,target,set,source,extract,source,array,ele,target,set,element,type,name,element,type,target,set,merge,enabled,parse,merge,attribute,array,ele,parse,collection,elements,nl,target,bd,element,type,return,target
BeanDefinitionParserDelegate -> public Object parseArrayElement(Element arrayEle, BeanDefinition bd);1447323728;Parse an array element.;public Object parseArrayElement(Element arrayEle, BeanDefinition bd) {_		String elementType = arrayEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = arrayEle.getChildNodes()__		ManagedArray target = new ManagedArray(elementType, nl.getLength())__		target.setSource(extractSource(arrayEle))__		target.setElementTypeName(elementType)__		target.setMergeEnabled(parseMergeAttribute(arrayEle))__		parseCollectionElements(nl, target, bd, elementType)__		return target__	};parse,an,array,element;public,object,parse,array,element,element,array,ele,bean,definition,bd,string,element,type,array,ele,get,attribute,node,list,nl,array,ele,get,child,nodes,managed,array,target,new,managed,array,element,type,nl,get,length,target,set,source,extract,source,array,ele,target,set,element,type,name,element,type,target,set,merge,enabled,parse,merge,attribute,array,ele,parse,collection,elements,nl,target,bd,element,type,return,target
BeanDefinitionParserDelegate -> public Object parseArrayElement(Element arrayEle, BeanDefinition bd);1467726769;Parse an array element.;public Object parseArrayElement(Element arrayEle, BeanDefinition bd) {_		String elementType = arrayEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = arrayEle.getChildNodes()__		ManagedArray target = new ManagedArray(elementType, nl.getLength())__		target.setSource(extractSource(arrayEle))__		target.setElementTypeName(elementType)__		target.setMergeEnabled(parseMergeAttribute(arrayEle))__		parseCollectionElements(nl, target, bd, elementType)__		return target__	};parse,an,array,element;public,object,parse,array,element,element,array,ele,bean,definition,bd,string,element,type,array,ele,get,attribute,node,list,nl,array,ele,get,child,nodes,managed,array,target,new,managed,array,element,type,nl,get,length,target,set,source,extract,source,array,ele,target,set,element,type,name,element,type,target,set,merge,enabled,parse,merge,attribute,array,ele,parse,collection,elements,nl,target,bd,element,type,return,target
BeanDefinitionParserDelegate -> public Object parseArrayElement(Element arrayEle, BeanDefinition bd);1467730834;Parse an array element.;public Object parseArrayElement(Element arrayEle, BeanDefinition bd) {_		String elementType = arrayEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = arrayEle.getChildNodes()__		ManagedArray target = new ManagedArray(elementType, nl.getLength())__		target.setSource(extractSource(arrayEle))__		target.setElementTypeName(elementType)__		target.setMergeEnabled(parseMergeAttribute(arrayEle))__		parseCollectionElements(nl, target, bd, elementType)__		return target__	};parse,an,array,element;public,object,parse,array,element,element,array,ele,bean,definition,bd,string,element,type,array,ele,get,attribute,node,list,nl,array,ele,get,child,nodes,managed,array,target,new,managed,array,element,type,nl,get,length,target,set,source,extract,source,array,ele,target,set,element,type,name,element,type,target,set,merge,enabled,parse,merge,attribute,array,ele,parse,collection,elements,nl,target,bd,element,type,return,target
BeanDefinitionParserDelegate -> public Object parseArrayElement(Element arrayEle, BeanDefinition bd);1467744603;Parse an array element.;public Object parseArrayElement(Element arrayEle, BeanDefinition bd) {_		String elementType = arrayEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = arrayEle.getChildNodes()__		ManagedArray target = new ManagedArray(elementType, nl.getLength())__		target.setSource(extractSource(arrayEle))__		target.setElementTypeName(elementType)__		target.setMergeEnabled(parseMergeAttribute(arrayEle))__		parseCollectionElements(nl, target, bd, elementType)__		return target__	};parse,an,array,element;public,object,parse,array,element,element,array,ele,bean,definition,bd,string,element,type,array,ele,get,attribute,node,list,nl,array,ele,get,child,nodes,managed,array,target,new,managed,array,element,type,nl,get,length,target,set,source,extract,source,array,ele,target,set,element,type,name,element,type,target,set,merge,enabled,parse,merge,attribute,array,ele,parse,collection,elements,nl,target,bd,element,type,return,target
BeanDefinitionParserDelegate -> public Object parseArrayElement(Element arrayEle, BeanDefinition bd);1487245676;Parse an array element.;public Object parseArrayElement(Element arrayEle, BeanDefinition bd) {_		String elementType = arrayEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = arrayEle.getChildNodes()__		ManagedArray target = new ManagedArray(elementType, nl.getLength())__		target.setSource(extractSource(arrayEle))__		target.setElementTypeName(elementType)__		target.setMergeEnabled(parseMergeAttribute(arrayEle))__		parseCollectionElements(nl, target, bd, elementType)__		return target__	};parse,an,array,element;public,object,parse,array,element,element,array,ele,bean,definition,bd,string,element,type,array,ele,get,attribute,node,list,nl,array,ele,get,child,nodes,managed,array,target,new,managed,array,element,type,nl,get,length,target,set,source,extract,source,array,ele,target,set,element,type,name,element,type,target,set,merge,enabled,parse,merge,attribute,array,ele,parse,collection,elements,nl,target,bd,element,type,return,target
BeanDefinitionParserDelegate -> public Object parseArrayElement(Element arrayEle, BeanDefinition bd);1487255851;Parse an array element.;public Object parseArrayElement(Element arrayEle, BeanDefinition bd) {_		String elementType = arrayEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = arrayEle.getChildNodes()__		ManagedArray target = new ManagedArray(elementType, nl.getLength())__		target.setSource(extractSource(arrayEle))__		target.setElementTypeName(elementType)__		target.setMergeEnabled(parseMergeAttribute(arrayEle))__		parseCollectionElements(nl, target, bd, elementType)__		return target__	};parse,an,array,element;public,object,parse,array,element,element,array,ele,bean,definition,bd,string,element,type,array,ele,get,attribute,node,list,nl,array,ele,get,child,nodes,managed,array,target,new,managed,array,element,type,nl,get,length,target,set,source,extract,source,array,ele,target,set,element,type,name,element,type,target,set,merge,enabled,parse,merge,attribute,array,ele,parse,collection,elements,nl,target,bd,element,type,return,target
BeanDefinitionParserDelegate -> public Object parseArrayElement(Element arrayEle, BeanDefinition bd);1494586217;Parse an array element.;public Object parseArrayElement(Element arrayEle, BeanDefinition bd) {_		String elementType = arrayEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = arrayEle.getChildNodes()__		ManagedArray target = new ManagedArray(elementType, nl.getLength())__		target.setSource(extractSource(arrayEle))__		target.setElementTypeName(elementType)__		target.setMergeEnabled(parseMergeAttribute(arrayEle))__		parseCollectionElements(nl, target, bd, elementType)__		return target__	};parse,an,array,element;public,object,parse,array,element,element,array,ele,bean,definition,bd,string,element,type,array,ele,get,attribute,node,list,nl,array,ele,get,child,nodes,managed,array,target,new,managed,array,element,type,nl,get,length,target,set,source,extract,source,array,ele,target,set,element,type,name,element,type,target,set,merge,enabled,parse,merge,attribute,array,ele,parse,collection,elements,nl,target,bd,element,type,return,target
BeanDefinitionParserDelegate -> public Object parseArrayElement(Element arrayEle, BeanDefinition bd);1495868221;Parse an array element.;public Object parseArrayElement(Element arrayEle, BeanDefinition bd) {_		String elementType = arrayEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = arrayEle.getChildNodes()__		ManagedArray target = new ManagedArray(elementType, nl.getLength())__		target.setSource(extractSource(arrayEle))__		target.setElementTypeName(elementType)__		target.setMergeEnabled(parseMergeAttribute(arrayEle))__		parseCollectionElements(nl, target, bd, elementType)__		return target__	};parse,an,array,element;public,object,parse,array,element,element,array,ele,bean,definition,bd,string,element,type,array,ele,get,attribute,node,list,nl,array,ele,get,child,nodes,managed,array,target,new,managed,array,element,type,nl,get,length,target,set,source,extract,source,array,ele,target,set,element,type,name,element,type,target,set,merge,enabled,parse,merge,attribute,array,ele,parse,collection,elements,nl,target,bd,element,type,return,target
BeanDefinitionParserDelegate -> public Object parseArrayElement(Element arrayEle, BeanDefinition bd);1496259743;Parse an array element.;public Object parseArrayElement(Element arrayEle, BeanDefinition bd) {_		String elementType = arrayEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = arrayEle.getChildNodes()__		ManagedArray target = new ManagedArray(elementType, nl.getLength())__		target.setSource(extractSource(arrayEle))__		target.setElementTypeName(elementType)__		target.setMergeEnabled(parseMergeAttribute(arrayEle))__		parseCollectionElements(nl, target, bd, elementType)__		return target__	};parse,an,array,element;public,object,parse,array,element,element,array,ele,bean,definition,bd,string,element,type,array,ele,get,attribute,node,list,nl,array,ele,get,child,nodes,managed,array,target,new,managed,array,element,type,nl,get,length,target,set,source,extract,source,array,ele,target,set,element,type,name,element,type,target,set,merge,enabled,parse,merge,attribute,array,ele,parse,collection,elements,nl,target,bd,element,type,return,target
BeanDefinitionParserDelegate -> public boolean nodeNameEquals(Node node, String desiredName);1328020251;Determine whether the name of the supplied node is equal to the supplied name._<p>The default implementation checks the supplied desired name against both_{@link Node#getNodeName()} and {@link Node#getLocalName()}._<p>Subclasses may override the default implementation to provide a different_mechanism for comparing node names._@param node the node to compare_@param desiredName the name to check for;public boolean nodeNameEquals(Node node, String desiredName) {_		return desiredName.equals(node.getNodeName()) || desiredName.equals(getLocalName(node))__	};determine,whether,the,name,of,the,supplied,node,is,equal,to,the,supplied,name,p,the,default,implementation,checks,the,supplied,desired,name,against,both,link,node,get,node,name,and,link,node,get,local,name,p,subclasses,may,override,the,default,implementation,to,provide,a,different,mechanism,for,comparing,node,names,param,node,the,node,to,compare,param,desired,name,the,name,to,check,for;public,boolean,node,name,equals,node,node,string,desired,name,return,desired,name,equals,node,get,node,name,desired,name,equals,get,local,name,node
BeanDefinitionParserDelegate -> public boolean nodeNameEquals(Node node, String desiredName);1335774711;Determine whether the name of the supplied node is equal to the supplied name._<p>The default implementation checks the supplied desired name against both_{@link Node#getNodeName()} and {@link Node#getLocalName()}._<p>Subclasses may override the default implementation to provide a different_mechanism for comparing node names._@param node the node to compare_@param desiredName the name to check for;public boolean nodeNameEquals(Node node, String desiredName) {_		return desiredName.equals(node.getNodeName()) || desiredName.equals(getLocalName(node))__	};determine,whether,the,name,of,the,supplied,node,is,equal,to,the,supplied,name,p,the,default,implementation,checks,the,supplied,desired,name,against,both,link,node,get,node,name,and,link,node,get,local,name,p,subclasses,may,override,the,default,implementation,to,provide,a,different,mechanism,for,comparing,node,names,param,node,the,node,to,compare,param,desired,name,the,name,to,check,for;public,boolean,node,name,equals,node,node,string,desired,name,return,desired,name,equals,node,get,node,name,desired,name,equals,get,local,name,node
BeanDefinitionParserDelegate -> public boolean nodeNameEquals(Node node, String desiredName);1337341719;Determine whether the name of the supplied node is equal to the supplied name._<p>The default implementation checks the supplied desired name against both_{@link Node#getNodeName()} and {@link Node#getLocalName()}._<p>Subclasses may override the default implementation to provide a different_mechanism for comparing node names._@param node the node to compare_@param desiredName the name to check for;public boolean nodeNameEquals(Node node, String desiredName) {_		return desiredName.equals(node.getNodeName()) || desiredName.equals(getLocalName(node))__	};determine,whether,the,name,of,the,supplied,node,is,equal,to,the,supplied,name,p,the,default,implementation,checks,the,supplied,desired,name,against,both,link,node,get,node,name,and,link,node,get,local,name,p,subclasses,may,override,the,default,implementation,to,provide,a,different,mechanism,for,comparing,node,names,param,node,the,node,to,compare,param,desired,name,the,name,to,check,for;public,boolean,node,name,equals,node,node,string,desired,name,return,desired,name,equals,node,get,node,name,desired,name,equals,get,local,name,node
BeanDefinitionParserDelegate -> public boolean nodeNameEquals(Node node, String desiredName);1351392612;Determine whether the name of the supplied node is equal to the supplied name._<p>The default implementation checks the supplied desired name against both_{@link Node#getNodeName()} and {@link Node#getLocalName()}._<p>Subclasses may override the default implementation to provide a different_mechanism for comparing node names._@param node the node to compare_@param desiredName the name to check for;public boolean nodeNameEquals(Node node, String desiredName) {_		return desiredName.equals(node.getNodeName()) || desiredName.equals(getLocalName(node))__	};determine,whether,the,name,of,the,supplied,node,is,equal,to,the,supplied,name,p,the,default,implementation,checks,the,supplied,desired,name,against,both,link,node,get,node,name,and,link,node,get,local,name,p,subclasses,may,override,the,default,implementation,to,provide,a,different,mechanism,for,comparing,node,names,param,node,the,node,to,compare,param,desired,name,the,name,to,check,for;public,boolean,node,name,equals,node,node,string,desired,name,return,desired,name,equals,node,get,node,name,desired,name,equals,get,local,name,node
BeanDefinitionParserDelegate -> public boolean nodeNameEquals(Node node, String desiredName);1351696936;Determine whether the name of the supplied node is equal to the supplied name._<p>The default implementation checks the supplied desired name against both_{@link Node#getNodeName()} and {@link Node#getLocalName()}._<p>Subclasses may override the default implementation to provide a different_mechanism for comparing node names._@param node the node to compare_@param desiredName the name to check for;public boolean nodeNameEquals(Node node, String desiredName) {_		return desiredName.equals(node.getNodeName()) || desiredName.equals(getLocalName(node))__	};determine,whether,the,name,of,the,supplied,node,is,equal,to,the,supplied,name,p,the,default,implementation,checks,the,supplied,desired,name,against,both,link,node,get,node,name,and,link,node,get,local,name,p,subclasses,may,override,the,default,implementation,to,provide,a,different,mechanism,for,comparing,node,names,param,node,the,node,to,compare,param,desired,name,the,name,to,check,for;public,boolean,node,name,equals,node,node,string,desired,name,return,desired,name,equals,node,get,node,name,desired,name,equals,get,local,name,node
BeanDefinitionParserDelegate -> public boolean nodeNameEquals(Node node, String desiredName);1356735495;Determine whether the name of the supplied node is equal to the supplied name._<p>The default implementation checks the supplied desired name against both_{@link Node#getNodeName()} and {@link Node#getLocalName()}._<p>Subclasses may override the default implementation to provide a different_mechanism for comparing node names._@param node the node to compare_@param desiredName the name to check for;public boolean nodeNameEquals(Node node, String desiredName) {_		return desiredName.equals(node.getNodeName()) || desiredName.equals(getLocalName(node))__	};determine,whether,the,name,of,the,supplied,node,is,equal,to,the,supplied,name,p,the,default,implementation,checks,the,supplied,desired,name,against,both,link,node,get,node,name,and,link,node,get,local,name,p,subclasses,may,override,the,default,implementation,to,provide,a,different,mechanism,for,comparing,node,names,param,node,the,node,to,compare,param,desired,name,the,name,to,check,for;public,boolean,node,name,equals,node,node,string,desired,name,return,desired,name,equals,node,get,node,name,desired,name,equals,get,local,name,node
BeanDefinitionParserDelegate -> public boolean nodeNameEquals(Node node, String desiredName);1357119417;Determine whether the name of the supplied node is equal to the supplied name._<p>The default implementation checks the supplied desired name against both_{@link Node#getNodeName()} and {@link Node#getLocalName()}._<p>Subclasses may override the default implementation to provide a different_mechanism for comparing node names._@param node the node to compare_@param desiredName the name to check for;public boolean nodeNameEquals(Node node, String desiredName) {_		return desiredName.equals(node.getNodeName()) || desiredName.equals(getLocalName(node))__	};determine,whether,the,name,of,the,supplied,node,is,equal,to,the,supplied,name,p,the,default,implementation,checks,the,supplied,desired,name,against,both,link,node,get,node,name,and,link,node,get,local,name,p,subclasses,may,override,the,default,implementation,to,provide,a,different,mechanism,for,comparing,node,names,param,node,the,node,to,compare,param,desired,name,the,name,to,check,for;public,boolean,node,name,equals,node,node,string,desired,name,return,desired,name,equals,node,get,node,name,desired,name,equals,get,local,name,node
BeanDefinitionParserDelegate -> public boolean nodeNameEquals(Node node, String desiredName);1367943112;Determine whether the name of the supplied node is equal to the supplied name._<p>The default implementation checks the supplied desired name against both_{@link Node#getNodeName()} and {@link Node#getLocalName()}._<p>Subclasses may override the default implementation to provide a different_mechanism for comparing node names._@param node the node to compare_@param desiredName the name to check for;public boolean nodeNameEquals(Node node, String desiredName) {_		return desiredName.equals(node.getNodeName()) || desiredName.equals(getLocalName(node))__	};determine,whether,the,name,of,the,supplied,node,is,equal,to,the,supplied,name,p,the,default,implementation,checks,the,supplied,desired,name,against,both,link,node,get,node,name,and,link,node,get,local,name,p,subclasses,may,override,the,default,implementation,to,provide,a,different,mechanism,for,comparing,node,names,param,node,the,node,to,compare,param,desired,name,the,name,to,check,for;public,boolean,node,name,equals,node,node,string,desired,name,return,desired,name,equals,node,get,node,name,desired,name,equals,get,local,name,node
BeanDefinitionParserDelegate -> public boolean nodeNameEquals(Node node, String desiredName);1382030648;Determine whether the name of the supplied node is equal to the supplied name._<p>The default implementation checks the supplied desired name against both_{@link Node#getNodeName()} and {@link Node#getLocalName()}._<p>Subclasses may override the default implementation to provide a different_mechanism for comparing node names._@param node the node to compare_@param desiredName the name to check for;public boolean nodeNameEquals(Node node, String desiredName) {_		return desiredName.equals(node.getNodeName()) || desiredName.equals(getLocalName(node))__	};determine,whether,the,name,of,the,supplied,node,is,equal,to,the,supplied,name,p,the,default,implementation,checks,the,supplied,desired,name,against,both,link,node,get,node,name,and,link,node,get,local,name,p,subclasses,may,override,the,default,implementation,to,provide,a,different,mechanism,for,comparing,node,names,param,node,the,node,to,compare,param,desired,name,the,name,to,check,for;public,boolean,node,name,equals,node,node,string,desired,name,return,desired,name,equals,node,get,node,name,desired,name,equals,get,local,name,node
BeanDefinitionParserDelegate -> public boolean nodeNameEquals(Node node, String desiredName);1385412762;Determine whether the name of the supplied node is equal to the supplied name._<p>The default implementation checks the supplied desired name against both_{@link Node#getNodeName()} and {@link Node#getLocalName()}._<p>Subclasses may override the default implementation to provide a different_mechanism for comparing node names._@param node the node to compare_@param desiredName the name to check for;public boolean nodeNameEquals(Node node, String desiredName) {_		return desiredName.equals(node.getNodeName()) || desiredName.equals(getLocalName(node))__	};determine,whether,the,name,of,the,supplied,node,is,equal,to,the,supplied,name,p,the,default,implementation,checks,the,supplied,desired,name,against,both,link,node,get,node,name,and,link,node,get,local,name,p,subclasses,may,override,the,default,implementation,to,provide,a,different,mechanism,for,comparing,node,names,param,node,the,node,to,compare,param,desired,name,the,name,to,check,for;public,boolean,node,name,equals,node,node,string,desired,name,return,desired,name,equals,node,get,node,name,desired,name,equals,get,local,name,node
BeanDefinitionParserDelegate -> public boolean nodeNameEquals(Node node, String desiredName);1410953197;Determine whether the name of the supplied node is equal to the supplied name._<p>The default implementation checks the supplied desired name against both_{@link Node#getNodeName()} and {@link Node#getLocalName()}._<p>Subclasses may override the default implementation to provide a different_mechanism for comparing node names._@param node the node to compare_@param desiredName the name to check for;public boolean nodeNameEquals(Node node, String desiredName) {_		return desiredName.equals(node.getNodeName()) || desiredName.equals(getLocalName(node))__	};determine,whether,the,name,of,the,supplied,node,is,equal,to,the,supplied,name,p,the,default,implementation,checks,the,supplied,desired,name,against,both,link,node,get,node,name,and,link,node,get,local,name,p,subclasses,may,override,the,default,implementation,to,provide,a,different,mechanism,for,comparing,node,names,param,node,the,node,to,compare,param,desired,name,the,name,to,check,for;public,boolean,node,name,equals,node,node,string,desired,name,return,desired,name,equals,node,get,node,name,desired,name,equals,get,local,name,node
BeanDefinitionParserDelegate -> public boolean nodeNameEquals(Node node, String desiredName);1411599760;Determine whether the name of the supplied node is equal to the supplied name._<p>The default implementation checks the supplied desired name against both_{@link Node#getNodeName()} and {@link Node#getLocalName()}._<p>Subclasses may override the default implementation to provide a different_mechanism for comparing node names._@param node the node to compare_@param desiredName the name to check for;public boolean nodeNameEquals(Node node, String desiredName) {_		return desiredName.equals(node.getNodeName()) || desiredName.equals(getLocalName(node))__	};determine,whether,the,name,of,the,supplied,node,is,equal,to,the,supplied,name,p,the,default,implementation,checks,the,supplied,desired,name,against,both,link,node,get,node,name,and,link,node,get,local,name,p,subclasses,may,override,the,default,implementation,to,provide,a,different,mechanism,for,comparing,node,names,param,node,the,node,to,compare,param,desired,name,the,name,to,check,for;public,boolean,node,name,equals,node,node,string,desired,name,return,desired,name,equals,node,get,node,name,desired,name,equals,get,local,name,node
BeanDefinitionParserDelegate -> public boolean nodeNameEquals(Node node, String desiredName);1419966315;Determine whether the name of the supplied node is equal to the supplied name._<p>The default implementation checks the supplied desired name against both_{@link Node#getNodeName()} and {@link Node#getLocalName()}._<p>Subclasses may override the default implementation to provide a different_mechanism for comparing node names._@param node the node to compare_@param desiredName the name to check for;public boolean nodeNameEquals(Node node, String desiredName) {_		return desiredName.equals(node.getNodeName()) || desiredName.equals(getLocalName(node))__	};determine,whether,the,name,of,the,supplied,node,is,equal,to,the,supplied,name,p,the,default,implementation,checks,the,supplied,desired,name,against,both,link,node,get,node,name,and,link,node,get,local,name,p,subclasses,may,override,the,default,implementation,to,provide,a,different,mechanism,for,comparing,node,names,param,node,the,node,to,compare,param,desired,name,the,name,to,check,for;public,boolean,node,name,equals,node,node,string,desired,name,return,desired,name,equals,node,get,node,name,desired,name,equals,get,local,name,node
BeanDefinitionParserDelegate -> public boolean nodeNameEquals(Node node, String desiredName);1431958785;Determine whether the name of the supplied node is equal to the supplied name._<p>The default implementation checks the supplied desired name against both_{@link Node#getNodeName()} and {@link Node#getLocalName()}._<p>Subclasses may override the default implementation to provide a different_mechanism for comparing node names._@param node the node to compare_@param desiredName the name to check for;public boolean nodeNameEquals(Node node, String desiredName) {_		return desiredName.equals(node.getNodeName()) || desiredName.equals(getLocalName(node))__	};determine,whether,the,name,of,the,supplied,node,is,equal,to,the,supplied,name,p,the,default,implementation,checks,the,supplied,desired,name,against,both,link,node,get,node,name,and,link,node,get,local,name,p,subclasses,may,override,the,default,implementation,to,provide,a,different,mechanism,for,comparing,node,names,param,node,the,node,to,compare,param,desired,name,the,name,to,check,for;public,boolean,node,name,equals,node,node,string,desired,name,return,desired,name,equals,node,get,node,name,desired,name,equals,get,local,name,node
BeanDefinitionParserDelegate -> public boolean nodeNameEquals(Node node, String desiredName);1432135182;Determine whether the name of the supplied node is equal to the supplied name._<p>The default implementation checks the supplied desired name against both_{@link Node#getNodeName()} and {@link Node#getLocalName()}._<p>Subclasses may override the default implementation to provide a different_mechanism for comparing node names._@param node the node to compare_@param desiredName the name to check for;public boolean nodeNameEquals(Node node, String desiredName) {_		return desiredName.equals(node.getNodeName()) || desiredName.equals(getLocalName(node))__	};determine,whether,the,name,of,the,supplied,node,is,equal,to,the,supplied,name,p,the,default,implementation,checks,the,supplied,desired,name,against,both,link,node,get,node,name,and,link,node,get,local,name,p,subclasses,may,override,the,default,implementation,to,provide,a,different,mechanism,for,comparing,node,names,param,node,the,node,to,compare,param,desired,name,the,name,to,check,for;public,boolean,node,name,equals,node,node,string,desired,name,return,desired,name,equals,node,get,node,name,desired,name,equals,get,local,name,node
BeanDefinitionParserDelegate -> public boolean nodeNameEquals(Node node, String desiredName);1447323728;Determine whether the name of the supplied node is equal to the supplied name._<p>The default implementation checks the supplied desired name against both_{@link Node#getNodeName()} and {@link Node#getLocalName()}._<p>Subclasses may override the default implementation to provide a different_mechanism for comparing node names._@param node the node to compare_@param desiredName the name to check for;public boolean nodeNameEquals(Node node, String desiredName) {_		return desiredName.equals(node.getNodeName()) || desiredName.equals(getLocalName(node))__	};determine,whether,the,name,of,the,supplied,node,is,equal,to,the,supplied,name,p,the,default,implementation,checks,the,supplied,desired,name,against,both,link,node,get,node,name,and,link,node,get,local,name,p,subclasses,may,override,the,default,implementation,to,provide,a,different,mechanism,for,comparing,node,names,param,node,the,node,to,compare,param,desired,name,the,name,to,check,for;public,boolean,node,name,equals,node,node,string,desired,name,return,desired,name,equals,node,get,node,name,desired,name,equals,get,local,name,node
BeanDefinitionParserDelegate -> public boolean nodeNameEquals(Node node, String desiredName);1467726769;Determine whether the name of the supplied node is equal to the supplied name._<p>The default implementation checks the supplied desired name against both_{@link Node#getNodeName()} and {@link Node#getLocalName()}._<p>Subclasses may override the default implementation to provide a different_mechanism for comparing node names._@param node the node to compare_@param desiredName the name to check for;public boolean nodeNameEquals(Node node, String desiredName) {_		return desiredName.equals(node.getNodeName()) || desiredName.equals(getLocalName(node))__	};determine,whether,the,name,of,the,supplied,node,is,equal,to,the,supplied,name,p,the,default,implementation,checks,the,supplied,desired,name,against,both,link,node,get,node,name,and,link,node,get,local,name,p,subclasses,may,override,the,default,implementation,to,provide,a,different,mechanism,for,comparing,node,names,param,node,the,node,to,compare,param,desired,name,the,name,to,check,for;public,boolean,node,name,equals,node,node,string,desired,name,return,desired,name,equals,node,get,node,name,desired,name,equals,get,local,name,node
BeanDefinitionParserDelegate -> public boolean nodeNameEquals(Node node, String desiredName);1467730834;Determine whether the name of the supplied node is equal to the supplied name._<p>The default implementation checks the supplied desired name against both_{@link Node#getNodeName()} and {@link Node#getLocalName()}._<p>Subclasses may override the default implementation to provide a different_mechanism for comparing node names._@param node the node to compare_@param desiredName the name to check for;public boolean nodeNameEquals(Node node, String desiredName) {_		return desiredName.equals(node.getNodeName()) || desiredName.equals(getLocalName(node))__	};determine,whether,the,name,of,the,supplied,node,is,equal,to,the,supplied,name,p,the,default,implementation,checks,the,supplied,desired,name,against,both,link,node,get,node,name,and,link,node,get,local,name,p,subclasses,may,override,the,default,implementation,to,provide,a,different,mechanism,for,comparing,node,names,param,node,the,node,to,compare,param,desired,name,the,name,to,check,for;public,boolean,node,name,equals,node,node,string,desired,name,return,desired,name,equals,node,get,node,name,desired,name,equals,get,local,name,node
BeanDefinitionParserDelegate -> public boolean nodeNameEquals(Node node, String desiredName);1467744603;Determine whether the name of the supplied node is equal to the supplied name._<p>The default implementation checks the supplied desired name against both_{@link Node#getNodeName()} and {@link Node#getLocalName()}._<p>Subclasses may override the default implementation to provide a different_mechanism for comparing node names._@param node the node to compare_@param desiredName the name to check for;public boolean nodeNameEquals(Node node, String desiredName) {_		return desiredName.equals(node.getNodeName()) || desiredName.equals(getLocalName(node))__	};determine,whether,the,name,of,the,supplied,node,is,equal,to,the,supplied,name,p,the,default,implementation,checks,the,supplied,desired,name,against,both,link,node,get,node,name,and,link,node,get,local,name,p,subclasses,may,override,the,default,implementation,to,provide,a,different,mechanism,for,comparing,node,names,param,node,the,node,to,compare,param,desired,name,the,name,to,check,for;public,boolean,node,name,equals,node,node,string,desired,name,return,desired,name,equals,node,get,node,name,desired,name,equals,get,local,name,node
BeanDefinitionParserDelegate -> public boolean nodeNameEquals(Node node, String desiredName);1487245676;Determine whether the name of the supplied node is equal to the supplied name._<p>The default implementation checks the supplied desired name against both_{@link Node#getNodeName()} and {@link Node#getLocalName()}._<p>Subclasses may override the default implementation to provide a different_mechanism for comparing node names._@param node the node to compare_@param desiredName the name to check for;public boolean nodeNameEquals(Node node, String desiredName) {_		return desiredName.equals(node.getNodeName()) || desiredName.equals(getLocalName(node))__	};determine,whether,the,name,of,the,supplied,node,is,equal,to,the,supplied,name,p,the,default,implementation,checks,the,supplied,desired,name,against,both,link,node,get,node,name,and,link,node,get,local,name,p,subclasses,may,override,the,default,implementation,to,provide,a,different,mechanism,for,comparing,node,names,param,node,the,node,to,compare,param,desired,name,the,name,to,check,for;public,boolean,node,name,equals,node,node,string,desired,name,return,desired,name,equals,node,get,node,name,desired,name,equals,get,local,name,node
BeanDefinitionParserDelegate -> public boolean nodeNameEquals(Node node, String desiredName);1487255851;Determine whether the name of the supplied node is equal to the supplied name._<p>The default implementation checks the supplied desired name against both_{@link Node#getNodeName()} and {@link Node#getLocalName()}._<p>Subclasses may override the default implementation to provide a different_mechanism for comparing node names._@param node the node to compare_@param desiredName the name to check for;public boolean nodeNameEquals(Node node, String desiredName) {_		return desiredName.equals(node.getNodeName()) || desiredName.equals(getLocalName(node))__	};determine,whether,the,name,of,the,supplied,node,is,equal,to,the,supplied,name,p,the,default,implementation,checks,the,supplied,desired,name,against,both,link,node,get,node,name,and,link,node,get,local,name,p,subclasses,may,override,the,default,implementation,to,provide,a,different,mechanism,for,comparing,node,names,param,node,the,node,to,compare,param,desired,name,the,name,to,check,for;public,boolean,node,name,equals,node,node,string,desired,name,return,desired,name,equals,node,get,node,name,desired,name,equals,get,local,name,node
BeanDefinitionParserDelegate -> public boolean nodeNameEquals(Node node, String desiredName);1494586217;Determine whether the name of the supplied node is equal to the supplied name._<p>The default implementation checks the supplied desired name against both_{@link Node#getNodeName()} and {@link Node#getLocalName()}._<p>Subclasses may override the default implementation to provide a different_mechanism for comparing node names._@param node the node to compare_@param desiredName the name to check for;public boolean nodeNameEquals(Node node, String desiredName) {_		return desiredName.equals(node.getNodeName()) || desiredName.equals(getLocalName(node))__	};determine,whether,the,name,of,the,supplied,node,is,equal,to,the,supplied,name,p,the,default,implementation,checks,the,supplied,desired,name,against,both,link,node,get,node,name,and,link,node,get,local,name,p,subclasses,may,override,the,default,implementation,to,provide,a,different,mechanism,for,comparing,node,names,param,node,the,node,to,compare,param,desired,name,the,name,to,check,for;public,boolean,node,name,equals,node,node,string,desired,name,return,desired,name,equals,node,get,node,name,desired,name,equals,get,local,name,node
BeanDefinitionParserDelegate -> public boolean nodeNameEquals(Node node, String desiredName);1495868221;Determine whether the name of the supplied node is equal to the supplied name._<p>The default implementation checks the supplied desired name against both_{@link Node#getNodeName()} and {@link Node#getLocalName()}._<p>Subclasses may override the default implementation to provide a different_mechanism for comparing node names._@param node the node to compare_@param desiredName the name to check for;public boolean nodeNameEquals(Node node, String desiredName) {_		return desiredName.equals(node.getNodeName()) || desiredName.equals(getLocalName(node))__	};determine,whether,the,name,of,the,supplied,node,is,equal,to,the,supplied,name,p,the,default,implementation,checks,the,supplied,desired,name,against,both,link,node,get,node,name,and,link,node,get,local,name,p,subclasses,may,override,the,default,implementation,to,provide,a,different,mechanism,for,comparing,node,names,param,node,the,node,to,compare,param,desired,name,the,name,to,check,for;public,boolean,node,name,equals,node,node,string,desired,name,return,desired,name,equals,node,get,node,name,desired,name,equals,get,local,name,node
BeanDefinitionParserDelegate -> public boolean nodeNameEquals(Node node, String desiredName);1496259743;Determine whether the name of the supplied node is equal to the supplied name._<p>The default implementation checks the supplied desired name against both_{@link Node#getNodeName()} and {@link Node#getLocalName()}._<p>Subclasses may override the default implementation to provide a different_mechanism for comparing node names._@param node the node to compare_@param desiredName the name to check for;public boolean nodeNameEquals(Node node, String desiredName) {_		return desiredName.equals(node.getNodeName()) || desiredName.equals(getLocalName(node))__	};determine,whether,the,name,of,the,supplied,node,is,equal,to,the,supplied,name,p,the,default,implementation,checks,the,supplied,desired,name,against,both,link,node,get,node,name,and,link,node,get,local,name,p,subclasses,may,override,the,default,implementation,to,provide,a,different,mechanism,for,comparing,node,names,param,node,the,node,to,compare,param,desired,name,the,name,to,check,for;public,boolean,node,name,equals,node,node,string,desired,name,return,desired,name,equals,node,get,node,name,desired,name,equals,get,local,name,node
BeanDefinitionParserDelegate -> public boolean nodeNameEquals(Node node, String desiredName);1496837955;Determine whether the name of the supplied node is equal to the supplied name._<p>The default implementation checks the supplied desired name against both_{@link Node#getNodeName()} and {@link Node#getLocalName()}._<p>Subclasses may override the default implementation to provide a different_mechanism for comparing node names._@param node the node to compare_@param desiredName the name to check for;public boolean nodeNameEquals(Node node, String desiredName) {_		return desiredName.equals(node.getNodeName()) || desiredName.equals(getLocalName(node))__	};determine,whether,the,name,of,the,supplied,node,is,equal,to,the,supplied,name,p,the,default,implementation,checks,the,supplied,desired,name,against,both,link,node,get,node,name,and,link,node,get,local,name,p,subclasses,may,override,the,default,implementation,to,provide,a,different,mechanism,for,comparing,node,names,param,node,the,node,to,compare,param,desired,name,the,name,to,check,for;public,boolean,node,name,equals,node,node,string,desired,name,return,desired,name,equals,node,get,node,name,desired,name,equals,get,local,name,node
BeanDefinitionParserDelegate -> public boolean nodeNameEquals(Node node, String desiredName);1503008029;Determine whether the name of the supplied node is equal to the supplied name._<p>The default implementation checks the supplied desired name against both_{@link Node#getNodeName()} and {@link Node#getLocalName()}._<p>Subclasses may override the default implementation to provide a different_mechanism for comparing node names._@param node the node to compare_@param desiredName the name to check for;public boolean nodeNameEquals(Node node, String desiredName) {_		return desiredName.equals(node.getNodeName()) || desiredName.equals(getLocalName(node))__	};determine,whether,the,name,of,the,supplied,node,is,equal,to,the,supplied,name,p,the,default,implementation,checks,the,supplied,desired,name,against,both,link,node,get,node,name,and,link,node,get,local,name,p,subclasses,may,override,the,default,implementation,to,provide,a,different,mechanism,for,comparing,node,names,param,node,the,node,to,compare,param,desired,name,the,name,to,check,for;public,boolean,node,name,equals,node,node,string,desired,name,return,desired,name,equals,node,get,node,name,desired,name,equals,get,local,name,node
BeanDefinitionParserDelegate -> public boolean nodeNameEquals(Node node, String desiredName);1519513303;Determine whether the name of the supplied node is equal to the supplied name._<p>The default implementation checks the supplied desired name against both_{@link Node#getNodeName()} and {@link Node#getLocalName()}._<p>Subclasses may override the default implementation to provide a different_mechanism for comparing node names._@param node the node to compare_@param desiredName the name to check for;public boolean nodeNameEquals(Node node, String desiredName) {_		return desiredName.equals(node.getNodeName()) || desiredName.equals(getLocalName(node))__	};determine,whether,the,name,of,the,supplied,node,is,equal,to,the,supplied,name,p,the,default,implementation,checks,the,supplied,desired,name,against,both,link,node,get,node,name,and,link,node,get,local,name,p,subclasses,may,override,the,default,implementation,to,provide,a,different,mechanism,for,comparing,node,names,param,node,the,node,to,compare,param,desired,name,the,name,to,check,for;public,boolean,node,name,equals,node,node,string,desired,name,return,desired,name,equals,node,get,node,name,desired,name,equals,get,local,name,node
BeanDefinitionParserDelegate -> public boolean nodeNameEquals(Node node, String desiredName);1530174524;Determine whether the name of the supplied node is equal to the supplied name._<p>The default implementation checks the supplied desired name against both_{@link Node#getNodeName()} and {@link Node#getLocalName()}._<p>Subclasses may override the default implementation to provide a different_mechanism for comparing node names._@param node the node to compare_@param desiredName the name to check for;public boolean nodeNameEquals(Node node, String desiredName) {_		return desiredName.equals(node.getNodeName()) || desiredName.equals(getLocalName(node))__	};determine,whether,the,name,of,the,supplied,node,is,equal,to,the,supplied,name,p,the,default,implementation,checks,the,supplied,desired,name,against,both,link,node,get,node,name,and,link,node,get,local,name,p,subclasses,may,override,the,default,implementation,to,provide,a,different,mechanism,for,comparing,node,names,param,node,the,node,to,compare,param,desired,name,the,name,to,check,for;public,boolean,node,name,equals,node,node,string,desired,name,return,desired,name,equals,node,get,node,name,desired,name,equals,get,local,name,node
BeanDefinitionParserDelegate -> public boolean nodeNameEquals(Node node, String desiredName);1530190293;Determine whether the name of the supplied node is equal to the supplied name._<p>The default implementation checks the supplied desired name against both_{@link Node#getNodeName()} and {@link Node#getLocalName()}._<p>Subclasses may override the default implementation to provide a different_mechanism for comparing node names._@param node the node to compare_@param desiredName the name to check for;public boolean nodeNameEquals(Node node, String desiredName) {_		return desiredName.equals(node.getNodeName()) || desiredName.equals(getLocalName(node))__	};determine,whether,the,name,of,the,supplied,node,is,equal,to,the,supplied,name,p,the,default,implementation,checks,the,supplied,desired,name,against,both,link,node,get,node,name,and,link,node,get,local,name,p,subclasses,may,override,the,default,implementation,to,provide,a,different,mechanism,for,comparing,node,names,param,node,the,node,to,compare,param,desired,name,the,name,to,check,for;public,boolean,node,name,equals,node,node,string,desired,name,return,desired,name,equals,node,get,node,name,desired,name,equals,get,local,name,node
BeanDefinitionParserDelegate -> public boolean nodeNameEquals(Node node, String desiredName);1532706365;Determine whether the name of the supplied node is equal to the supplied name._<p>The default implementation checks the supplied desired name against both_{@link Node#getNodeName()} and {@link Node#getLocalName()}._<p>Subclasses may override the default implementation to provide a different_mechanism for comparing node names._@param node the node to compare_@param desiredName the name to check for;public boolean nodeNameEquals(Node node, String desiredName) {_		return desiredName.equals(node.getNodeName()) || desiredName.equals(getLocalName(node))__	};determine,whether,the,name,of,the,supplied,node,is,equal,to,the,supplied,name,p,the,default,implementation,checks,the,supplied,desired,name,against,both,link,node,get,node,name,and,link,node,get,local,name,p,subclasses,may,override,the,default,implementation,to,provide,a,different,mechanism,for,comparing,node,names,param,node,the,node,to,compare,param,desired,name,the,name,to,check,for;public,boolean,node,name,equals,node,node,string,desired,name,return,desired,name,equals,node,get,node,name,desired,name,equals,get,local,name,node
BeanDefinitionParserDelegate -> public boolean nodeNameEquals(Node node, String desiredName);1546958161;Determine whether the name of the supplied node is equal to the supplied name._<p>The default implementation checks the supplied desired name against both_{@link Node#getNodeName()} and {@link Node#getLocalName()}._<p>Subclasses may override the default implementation to provide a different_mechanism for comparing node names._@param node the node to compare_@param desiredName the name to check for;public boolean nodeNameEquals(Node node, String desiredName) {_		return desiredName.equals(node.getNodeName()) || desiredName.equals(getLocalName(node))__	};determine,whether,the,name,of,the,supplied,node,is,equal,to,the,supplied,name,p,the,default,implementation,checks,the,supplied,desired,name,against,both,link,node,get,node,name,and,link,node,get,local,name,p,subclasses,may,override,the,default,implementation,to,provide,a,different,mechanism,for,comparing,node,names,param,node,the,node,to,compare,param,desired,name,the,name,to,check,for;public,boolean,node,name,equals,node,node,string,desired,name,return,desired,name,equals,node,get,node,name,desired,name,equals,get,local,name,node
BeanDefinitionParserDelegate -> public final Environment getEnvironment();1328020251;Get the {@link Environment} associated with this helper instance.;public final Environment getEnvironment() {_		return this.environment__	};get,the,link,environment,associated,with,this,helper,instance;public,final,environment,get,environment,return,this,environment
BeanDefinitionParserDelegate -> public final Environment getEnvironment();1335774711;Get the {@link Environment} associated with this helper instance.;public final Environment getEnvironment() {_		return this.environment__	};get,the,link,environment,associated,with,this,helper,instance;public,final,environment,get,environment,return,this,environment
BeanDefinitionParserDelegate -> public final Environment getEnvironment();1337341719;Get the {@link Environment} associated with this helper instance.;public final Environment getEnvironment() {_		return this.environment__	};get,the,link,environment,associated,with,this,helper,instance;public,final,environment,get,environment,return,this,environment
BeanDefinitionParserDelegate -> public final Environment getEnvironment();1351392612;Get the {@link Environment} associated with this helper instance.;public final Environment getEnvironment() {_		return this.environment__	};get,the,link,environment,associated,with,this,helper,instance;public,final,environment,get,environment,return,this,environment
BeanDefinitionParserDelegate -> public final Environment getEnvironment();1351696936;Get the {@link Environment} associated with this helper instance.;public final Environment getEnvironment() {_		return this.environment__	};get,the,link,environment,associated,with,this,helper,instance;public,final,environment,get,environment,return,this,environment
BeanDefinitionParserDelegate -> public final Environment getEnvironment();1356735495;Get the {@link Environment} associated with this helper instance.;public final Environment getEnvironment() {_		return this.environment__	};get,the,link,environment,associated,with,this,helper,instance;public,final,environment,get,environment,return,this,environment
BeanDefinitionParserDelegate -> public final Environment getEnvironment();1357119417;Get the {@link Environment} associated with this helper instance.;public final Environment getEnvironment() {_		return this.environment__	};get,the,link,environment,associated,with,this,helper,instance;public,final,environment,get,environment,return,this,environment
BeanDefinitionParserDelegate -> public final Environment getEnvironment();1367943112;Get the {@link Environment} associated with this helper instance.;public final Environment getEnvironment() {_		return this.environment__	};get,the,link,environment,associated,with,this,helper,instance;public,final,environment,get,environment,return,this,environment
BeanDefinitionParserDelegate -> public final Environment getEnvironment();1382030648;Get the {@link Environment} associated with this helper instance.;public final Environment getEnvironment() {_		return this.environment__	};get,the,link,environment,associated,with,this,helper,instance;public,final,environment,get,environment,return,this,environment
BeanDefinitionParserDelegate -> public final Environment getEnvironment();1385412762;Get the {@link Environment} associated with this helper instance.;public final Environment getEnvironment() {_		return this.environment__	};get,the,link,environment,associated,with,this,helper,instance;public,final,environment,get,environment,return,this,environment
BeanDefinitionParserDelegate -> public final Environment getEnvironment();1410953197;Get the {@link Environment} associated with this helper instance.;public final Environment getEnvironment() {_		return this.environment__	};get,the,link,environment,associated,with,this,helper,instance;public,final,environment,get,environment,return,this,environment
BeanDefinitionParserDelegate -> public void initDefaults(Element root);1328020251;Initialize the default settings assuming a {@code null} parent delegate._@deprecated in Spring 3.1 in favor of_{@link #initDefaults(Element, BeanDefinitionParserDelegate)};public void initDefaults(Element root) {_		initDefaults(root, null)__	};initialize,the,default,settings,assuming,a,code,null,parent,delegate,deprecated,in,spring,3,1,in,favor,of,link,init,defaults,element,bean,definition,parser,delegate;public,void,init,defaults,element,root,init,defaults,root,null
BeanDefinitionParserDelegate -> public void initDefaults(Element root);1335774711;Initialize the default settings assuming a {@code null} parent delegate._@deprecated in Spring 3.1 in favor of_{@link #initDefaults(Element, BeanDefinitionParserDelegate)};public void initDefaults(Element root) {_		initDefaults(root, null)__	};initialize,the,default,settings,assuming,a,code,null,parent,delegate,deprecated,in,spring,3,1,in,favor,of,link,init,defaults,element,bean,definition,parser,delegate;public,void,init,defaults,element,root,init,defaults,root,null
BeanDefinitionParserDelegate -> public void initDefaults(Element root);1337341719;Initialize the default settings assuming a {@code null} parent delegate._@deprecated in Spring 3.1 in favor of_{@link #initDefaults(Element, BeanDefinitionParserDelegate)};public void initDefaults(Element root) {_		initDefaults(root, null)__	};initialize,the,default,settings,assuming,a,code,null,parent,delegate,deprecated,in,spring,3,1,in,favor,of,link,init,defaults,element,bean,definition,parser,delegate;public,void,init,defaults,element,root,init,defaults,root,null
BeanDefinitionParserDelegate -> public void initDefaults(Element root);1351392612;Initialize the default settings assuming a {@code null} parent delegate._@deprecated in Spring 3.1 in favor of_{@link #initDefaults(Element, BeanDefinitionParserDelegate)};public void initDefaults(Element root) {_		initDefaults(root, null)__	};initialize,the,default,settings,assuming,a,code,null,parent,delegate,deprecated,in,spring,3,1,in,favor,of,link,init,defaults,element,bean,definition,parser,delegate;public,void,init,defaults,element,root,init,defaults,root,null
BeanDefinitionParserDelegate -> public void initDefaults(Element root);1351696936;Initialize the default settings assuming a {@code null} parent delegate._@deprecated in Spring 3.1 in favor of_{@link #initDefaults(Element, BeanDefinitionParserDelegate)};public void initDefaults(Element root) {_		initDefaults(root, null)__	};initialize,the,default,settings,assuming,a,code,null,parent,delegate,deprecated,in,spring,3,1,in,favor,of,link,init,defaults,element,bean,definition,parser,delegate;public,void,init,defaults,element,root,init,defaults,root,null
BeanDefinitionParserDelegate -> public void initDefaults(Element root);1382030648;Initialize the default settings assuming a {@code null} parent delegate.;public void initDefaults(Element root) {_		initDefaults(root, null)__	};initialize,the,default,settings,assuming,a,code,null,parent,delegate;public,void,init,defaults,element,root,init,defaults,root,null
BeanDefinitionParserDelegate -> public void initDefaults(Element root);1385412762;Initialize the default settings assuming a {@code null} parent delegate.;public void initDefaults(Element root) {_		initDefaults(root, null)__	};initialize,the,default,settings,assuming,a,code,null,parent,delegate;public,void,init,defaults,element,root,init,defaults,root,null
BeanDefinitionParserDelegate -> public void initDefaults(Element root);1410953197;Initialize the default settings assuming a {@code null} parent delegate.;public void initDefaults(Element root) {_		initDefaults(root, null)__	};initialize,the,default,settings,assuming,a,code,null,parent,delegate;public,void,init,defaults,element,root,init,defaults,root,null
BeanDefinitionParserDelegate -> public void initDefaults(Element root);1411599760;Initialize the default settings assuming a {@code null} parent delegate.;public void initDefaults(Element root) {_		initDefaults(root, null)__	};initialize,the,default,settings,assuming,a,code,null,parent,delegate;public,void,init,defaults,element,root,init,defaults,root,null
BeanDefinitionParserDelegate -> public void initDefaults(Element root);1419966315;Initialize the default settings assuming a {@code null} parent delegate.;public void initDefaults(Element root) {_		initDefaults(root, null)__	};initialize,the,default,settings,assuming,a,code,null,parent,delegate;public,void,init,defaults,element,root,init,defaults,root,null
BeanDefinitionParserDelegate -> public void initDefaults(Element root);1431958785;Initialize the default settings assuming a {@code null} parent delegate.;public void initDefaults(Element root) {_		initDefaults(root, null)__	};initialize,the,default,settings,assuming,a,code,null,parent,delegate;public,void,init,defaults,element,root,init,defaults,root,null
BeanDefinitionParserDelegate -> public void initDefaults(Element root);1432135182;Initialize the default settings assuming a {@code null} parent delegate.;public void initDefaults(Element root) {_		initDefaults(root, null)__	};initialize,the,default,settings,assuming,a,code,null,parent,delegate;public,void,init,defaults,element,root,init,defaults,root,null
BeanDefinitionParserDelegate -> public void initDefaults(Element root);1447323728;Initialize the default settings assuming a {@code null} parent delegate.;public void initDefaults(Element root) {_		initDefaults(root, null)__	};initialize,the,default,settings,assuming,a,code,null,parent,delegate;public,void,init,defaults,element,root,init,defaults,root,null
BeanDefinitionParserDelegate -> public void initDefaults(Element root);1467726769;Initialize the default settings assuming a {@code null} parent delegate.;public void initDefaults(Element root) {_		initDefaults(root, null)__	};initialize,the,default,settings,assuming,a,code,null,parent,delegate;public,void,init,defaults,element,root,init,defaults,root,null
BeanDefinitionParserDelegate -> public void initDefaults(Element root);1467730834;Initialize the default settings assuming a {@code null} parent delegate.;public void initDefaults(Element root) {_		initDefaults(root, null)__	};initialize,the,default,settings,assuming,a,code,null,parent,delegate;public,void,init,defaults,element,root,init,defaults,root,null
BeanDefinitionParserDelegate -> public void initDefaults(Element root);1467744603;Initialize the default settings assuming a {@code null} parent delegate.;public void initDefaults(Element root) {_		initDefaults(root, null)__	};initialize,the,default,settings,assuming,a,code,null,parent,delegate;public,void,init,defaults,element,root,init,defaults,root,null
BeanDefinitionParserDelegate -> public void initDefaults(Element root);1487245676;Initialize the default settings assuming a {@code null} parent delegate.;public void initDefaults(Element root) {_		initDefaults(root, null)__	};initialize,the,default,settings,assuming,a,code,null,parent,delegate;public,void,init,defaults,element,root,init,defaults,root,null
BeanDefinitionParserDelegate -> public void initDefaults(Element root);1487255851;Initialize the default settings assuming a {@code null} parent delegate.;public void initDefaults(Element root) {_		initDefaults(root, null)__	};initialize,the,default,settings,assuming,a,code,null,parent,delegate;public,void,init,defaults,element,root,init,defaults,root,null
BeanDefinitionParserDelegate -> public void initDefaults(Element root);1494586217;Initialize the default settings assuming a {@code null} parent delegate.;public void initDefaults(Element root) {_		initDefaults(root, null)__	};initialize,the,default,settings,assuming,a,code,null,parent,delegate;public,void,init,defaults,element,root,init,defaults,root,null
BeanDefinitionParserDelegate -> public void initDefaults(Element root);1495868221;Initialize the default settings assuming a {@code null} parent delegate.;public void initDefaults(Element root) {_		initDefaults(root, null)__	};initialize,the,default,settings,assuming,a,code,null,parent,delegate;public,void,init,defaults,element,root,init,defaults,root,null
BeanDefinitionParserDelegate -> public void initDefaults(Element root);1496259743;Initialize the default settings assuming a {@code null} parent delegate.;public void initDefaults(Element root) {_		initDefaults(root, null)__	};initialize,the,default,settings,assuming,a,code,null,parent,delegate;public,void,init,defaults,element,root,init,defaults,root,null
BeanDefinitionParserDelegate -> public void initDefaults(Element root);1496837955;Initialize the default settings assuming a {@code null} parent delegate.;public void initDefaults(Element root) {_		initDefaults(root, null)__	};initialize,the,default,settings,assuming,a,code,null,parent,delegate;public,void,init,defaults,element,root,init,defaults,root,null
BeanDefinitionParserDelegate -> public void initDefaults(Element root);1503008029;Initialize the default settings assuming a {@code null} parent delegate.;public void initDefaults(Element root) {_		initDefaults(root, null)__	};initialize,the,default,settings,assuming,a,code,null,parent,delegate;public,void,init,defaults,element,root,init,defaults,root,null
BeanDefinitionParserDelegate -> public void initDefaults(Element root);1519513303;Initialize the default settings assuming a {@code null} parent delegate.;public void initDefaults(Element root) {_		initDefaults(root, null)__	};initialize,the,default,settings,assuming,a,code,null,parent,delegate;public,void,init,defaults,element,root,init,defaults,root,null
BeanDefinitionParserDelegate -> public void initDefaults(Element root);1530174524;Initialize the default settings assuming a {@code null} parent delegate.;public void initDefaults(Element root) {_		initDefaults(root, null)__	};initialize,the,default,settings,assuming,a,code,null,parent,delegate;public,void,init,defaults,element,root,init,defaults,root,null
BeanDefinitionParserDelegate -> public void initDefaults(Element root);1530190293;Initialize the default settings assuming a {@code null} parent delegate.;public void initDefaults(Element root) {_		initDefaults(root, null)__	};initialize,the,default,settings,assuming,a,code,null,parent,delegate;public,void,init,defaults,element,root,init,defaults,root,null
BeanDefinitionParserDelegate -> public void initDefaults(Element root);1532706365;Initialize the default settings assuming a {@code null} parent delegate.;public void initDefaults(Element root) {_		initDefaults(root, null)__	};initialize,the,default,settings,assuming,a,code,null,parent,delegate;public,void,init,defaults,element,root,init,defaults,root,null
BeanDefinitionParserDelegate -> public void initDefaults(Element root);1546958161;Initialize the default settings assuming a {@code null} parent delegate.;public void initDefaults(Element root) {_		initDefaults(root, null)__	};initialize,the,default,settings,assuming,a,code,null,parent,delegate;public,void,init,defaults,element,root,init,defaults,root,null
BeanDefinitionParserDelegate -> public void parseConstructorArgElements(Element beanEle, BeanDefinition bd);1328020251;Parse constructor-arg sub-elements of the given bean element.;public void parseConstructorArgElements(Element beanEle, BeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, CONSTRUCTOR_ARG_ELEMENT)) {_				parseConstructorArgElement((Element) node, bd)__			}_		}_	};parse,constructor,arg,sub,elements,of,the,given,bean,element;public,void,parse,constructor,arg,elements,element,bean,ele,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,constructor,arg,element,element,node,bd
BeanDefinitionParserDelegate -> public void parseConstructorArgElements(Element beanEle, BeanDefinition bd);1335774711;Parse constructor-arg sub-elements of the given bean element.;public void parseConstructorArgElements(Element beanEle, BeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, CONSTRUCTOR_ARG_ELEMENT)) {_				parseConstructorArgElement((Element) node, bd)__			}_		}_	};parse,constructor,arg,sub,elements,of,the,given,bean,element;public,void,parse,constructor,arg,elements,element,bean,ele,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,constructor,arg,element,element,node,bd
BeanDefinitionParserDelegate -> public void parseConstructorArgElements(Element beanEle, BeanDefinition bd);1337341719;Parse constructor-arg sub-elements of the given bean element.;public void parseConstructorArgElements(Element beanEle, BeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, CONSTRUCTOR_ARG_ELEMENT)) {_				parseConstructorArgElement((Element) node, bd)__			}_		}_	};parse,constructor,arg,sub,elements,of,the,given,bean,element;public,void,parse,constructor,arg,elements,element,bean,ele,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,constructor,arg,element,element,node,bd
BeanDefinitionParserDelegate -> public void parseConstructorArgElements(Element beanEle, BeanDefinition bd);1351392612;Parse constructor-arg sub-elements of the given bean element.;public void parseConstructorArgElements(Element beanEle, BeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, CONSTRUCTOR_ARG_ELEMENT)) {_				parseConstructorArgElement((Element) node, bd)__			}_		}_	};parse,constructor,arg,sub,elements,of,the,given,bean,element;public,void,parse,constructor,arg,elements,element,bean,ele,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,constructor,arg,element,element,node,bd
BeanDefinitionParserDelegate -> public void parseConstructorArgElements(Element beanEle, BeanDefinition bd);1351696936;Parse constructor-arg sub-elements of the given bean element.;public void parseConstructorArgElements(Element beanEle, BeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, CONSTRUCTOR_ARG_ELEMENT)) {_				parseConstructorArgElement((Element) node, bd)__			}_		}_	};parse,constructor,arg,sub,elements,of,the,given,bean,element;public,void,parse,constructor,arg,elements,element,bean,ele,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,constructor,arg,element,element,node,bd
BeanDefinitionParserDelegate -> public void parseConstructorArgElements(Element beanEle, BeanDefinition bd);1356735495;Parse constructor-arg sub-elements of the given bean element.;public void parseConstructorArgElements(Element beanEle, BeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, CONSTRUCTOR_ARG_ELEMENT)) {_				parseConstructorArgElement((Element) node, bd)__			}_		}_	};parse,constructor,arg,sub,elements,of,the,given,bean,element;public,void,parse,constructor,arg,elements,element,bean,ele,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,constructor,arg,element,element,node,bd
BeanDefinitionParserDelegate -> public void parseConstructorArgElements(Element beanEle, BeanDefinition bd);1357119417;Parse constructor-arg sub-elements of the given bean element.;public void parseConstructorArgElements(Element beanEle, BeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, CONSTRUCTOR_ARG_ELEMENT)) {_				parseConstructorArgElement((Element) node, bd)__			}_		}_	};parse,constructor,arg,sub,elements,of,the,given,bean,element;public,void,parse,constructor,arg,elements,element,bean,ele,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,constructor,arg,element,element,node,bd
BeanDefinitionParserDelegate -> public void parseConstructorArgElements(Element beanEle, BeanDefinition bd);1367943112;Parse constructor-arg sub-elements of the given bean element.;public void parseConstructorArgElements(Element beanEle, BeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, CONSTRUCTOR_ARG_ELEMENT)) {_				parseConstructorArgElement((Element) node, bd)__			}_		}_	};parse,constructor,arg,sub,elements,of,the,given,bean,element;public,void,parse,constructor,arg,elements,element,bean,ele,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,constructor,arg,element,element,node,bd
BeanDefinitionParserDelegate -> public void parseConstructorArgElements(Element beanEle, BeanDefinition bd);1382030648;Parse constructor-arg sub-elements of the given bean element.;public void parseConstructorArgElements(Element beanEle, BeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, CONSTRUCTOR_ARG_ELEMENT)) {_				parseConstructorArgElement((Element) node, bd)__			}_		}_	};parse,constructor,arg,sub,elements,of,the,given,bean,element;public,void,parse,constructor,arg,elements,element,bean,ele,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,constructor,arg,element,element,node,bd
BeanDefinitionParserDelegate -> public void parseConstructorArgElements(Element beanEle, BeanDefinition bd);1385412762;Parse constructor-arg sub-elements of the given bean element.;public void parseConstructorArgElements(Element beanEle, BeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, CONSTRUCTOR_ARG_ELEMENT)) {_				parseConstructorArgElement((Element) node, bd)__			}_		}_	};parse,constructor,arg,sub,elements,of,the,given,bean,element;public,void,parse,constructor,arg,elements,element,bean,ele,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,constructor,arg,element,element,node,bd
BeanDefinitionParserDelegate -> public void parseConstructorArgElements(Element beanEle, BeanDefinition bd);1410953197;Parse constructor-arg sub-elements of the given bean element.;public void parseConstructorArgElements(Element beanEle, BeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, CONSTRUCTOR_ARG_ELEMENT)) {_				parseConstructorArgElement((Element) node, bd)__			}_		}_	};parse,constructor,arg,sub,elements,of,the,given,bean,element;public,void,parse,constructor,arg,elements,element,bean,ele,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,constructor,arg,element,element,node,bd
BeanDefinitionParserDelegate -> public void parseConstructorArgElements(Element beanEle, BeanDefinition bd);1411599760;Parse constructor-arg sub-elements of the given bean element.;public void parseConstructorArgElements(Element beanEle, BeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, CONSTRUCTOR_ARG_ELEMENT)) {_				parseConstructorArgElement((Element) node, bd)__			}_		}_	};parse,constructor,arg,sub,elements,of,the,given,bean,element;public,void,parse,constructor,arg,elements,element,bean,ele,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,constructor,arg,element,element,node,bd
BeanDefinitionParserDelegate -> public void parseConstructorArgElements(Element beanEle, BeanDefinition bd);1419966315;Parse constructor-arg sub-elements of the given bean element.;public void parseConstructorArgElements(Element beanEle, BeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, CONSTRUCTOR_ARG_ELEMENT)) {_				parseConstructorArgElement((Element) node, bd)__			}_		}_	};parse,constructor,arg,sub,elements,of,the,given,bean,element;public,void,parse,constructor,arg,elements,element,bean,ele,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,constructor,arg,element,element,node,bd
BeanDefinitionParserDelegate -> public void parseConstructorArgElements(Element beanEle, BeanDefinition bd);1431958785;Parse constructor-arg sub-elements of the given bean element.;public void parseConstructorArgElements(Element beanEle, BeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, CONSTRUCTOR_ARG_ELEMENT)) {_				parseConstructorArgElement((Element) node, bd)__			}_		}_	};parse,constructor,arg,sub,elements,of,the,given,bean,element;public,void,parse,constructor,arg,elements,element,bean,ele,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,constructor,arg,element,element,node,bd
BeanDefinitionParserDelegate -> public void parseConstructorArgElements(Element beanEle, BeanDefinition bd);1432135182;Parse constructor-arg sub-elements of the given bean element.;public void parseConstructorArgElements(Element beanEle, BeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, CONSTRUCTOR_ARG_ELEMENT)) {_				parseConstructorArgElement((Element) node, bd)__			}_		}_	};parse,constructor,arg,sub,elements,of,the,given,bean,element;public,void,parse,constructor,arg,elements,element,bean,ele,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,constructor,arg,element,element,node,bd
BeanDefinitionParserDelegate -> public void parseConstructorArgElements(Element beanEle, BeanDefinition bd);1447323728;Parse constructor-arg sub-elements of the given bean element.;public void parseConstructorArgElements(Element beanEle, BeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, CONSTRUCTOR_ARG_ELEMENT)) {_				parseConstructorArgElement((Element) node, bd)__			}_		}_	};parse,constructor,arg,sub,elements,of,the,given,bean,element;public,void,parse,constructor,arg,elements,element,bean,ele,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,constructor,arg,element,element,node,bd
BeanDefinitionParserDelegate -> public void parseConstructorArgElements(Element beanEle, BeanDefinition bd);1467726769;Parse constructor-arg sub-elements of the given bean element.;public void parseConstructorArgElements(Element beanEle, BeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, CONSTRUCTOR_ARG_ELEMENT)) {_				parseConstructorArgElement((Element) node, bd)__			}_		}_	};parse,constructor,arg,sub,elements,of,the,given,bean,element;public,void,parse,constructor,arg,elements,element,bean,ele,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,constructor,arg,element,element,node,bd
BeanDefinitionParserDelegate -> public void parseConstructorArgElements(Element beanEle, BeanDefinition bd);1467730834;Parse constructor-arg sub-elements of the given bean element.;public void parseConstructorArgElements(Element beanEle, BeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, CONSTRUCTOR_ARG_ELEMENT)) {_				parseConstructorArgElement((Element) node, bd)__			}_		}_	};parse,constructor,arg,sub,elements,of,the,given,bean,element;public,void,parse,constructor,arg,elements,element,bean,ele,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,constructor,arg,element,element,node,bd
BeanDefinitionParserDelegate -> public void parseConstructorArgElements(Element beanEle, BeanDefinition bd);1467744603;Parse constructor-arg sub-elements of the given bean element.;public void parseConstructorArgElements(Element beanEle, BeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, CONSTRUCTOR_ARG_ELEMENT)) {_				parseConstructorArgElement((Element) node, bd)__			}_		}_	};parse,constructor,arg,sub,elements,of,the,given,bean,element;public,void,parse,constructor,arg,elements,element,bean,ele,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,constructor,arg,element,element,node,bd
BeanDefinitionParserDelegate -> public void parseConstructorArgElements(Element beanEle, BeanDefinition bd);1487245676;Parse constructor-arg sub-elements of the given bean element.;public void parseConstructorArgElements(Element beanEle, BeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, CONSTRUCTOR_ARG_ELEMENT)) {_				parseConstructorArgElement((Element) node, bd)__			}_		}_	};parse,constructor,arg,sub,elements,of,the,given,bean,element;public,void,parse,constructor,arg,elements,element,bean,ele,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,constructor,arg,element,element,node,bd
BeanDefinitionParserDelegate -> public void parseConstructorArgElements(Element beanEle, BeanDefinition bd);1487255851;Parse constructor-arg sub-elements of the given bean element.;public void parseConstructorArgElements(Element beanEle, BeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, CONSTRUCTOR_ARG_ELEMENT)) {_				parseConstructorArgElement((Element) node, bd)__			}_		}_	};parse,constructor,arg,sub,elements,of,the,given,bean,element;public,void,parse,constructor,arg,elements,element,bean,ele,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,constructor,arg,element,element,node,bd
BeanDefinitionParserDelegate -> public void parseConstructorArgElements(Element beanEle, BeanDefinition bd);1494586217;Parse constructor-arg sub-elements of the given bean element.;public void parseConstructorArgElements(Element beanEle, BeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, CONSTRUCTOR_ARG_ELEMENT)) {_				parseConstructorArgElement((Element) node, bd)__			}_		}_	};parse,constructor,arg,sub,elements,of,the,given,bean,element;public,void,parse,constructor,arg,elements,element,bean,ele,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,constructor,arg,element,element,node,bd
BeanDefinitionParserDelegate -> public void parseConstructorArgElements(Element beanEle, BeanDefinition bd);1495868221;Parse constructor-arg sub-elements of the given bean element.;public void parseConstructorArgElements(Element beanEle, BeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, CONSTRUCTOR_ARG_ELEMENT)) {_				parseConstructorArgElement((Element) node, bd)__			}_		}_	};parse,constructor,arg,sub,elements,of,the,given,bean,element;public,void,parse,constructor,arg,elements,element,bean,ele,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,constructor,arg,element,element,node,bd
BeanDefinitionParserDelegate -> public void parseConstructorArgElements(Element beanEle, BeanDefinition bd);1496259743;Parse constructor-arg sub-elements of the given bean element.;public void parseConstructorArgElements(Element beanEle, BeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, CONSTRUCTOR_ARG_ELEMENT)) {_				parseConstructorArgElement((Element) node, bd)__			}_		}_	};parse,constructor,arg,sub,elements,of,the,given,bean,element;public,void,parse,constructor,arg,elements,element,bean,ele,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,constructor,arg,element,element,node,bd
BeanDefinitionParserDelegate -> public void parseConstructorArgElements(Element beanEle, BeanDefinition bd);1496837955;Parse constructor-arg sub-elements of the given bean element.;public void parseConstructorArgElements(Element beanEle, BeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, CONSTRUCTOR_ARG_ELEMENT)) {_				parseConstructorArgElement((Element) node, bd)__			}_		}_	};parse,constructor,arg,sub,elements,of,the,given,bean,element;public,void,parse,constructor,arg,elements,element,bean,ele,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,constructor,arg,element,element,node,bd
BeanDefinitionParserDelegate -> public void parseConstructorArgElements(Element beanEle, BeanDefinition bd);1503008029;Parse constructor-arg sub-elements of the given bean element.;public void parseConstructorArgElements(Element beanEle, BeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, CONSTRUCTOR_ARG_ELEMENT)) {_				parseConstructorArgElement((Element) node, bd)__			}_		}_	};parse,constructor,arg,sub,elements,of,the,given,bean,element;public,void,parse,constructor,arg,elements,element,bean,ele,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,constructor,arg,element,element,node,bd
BeanDefinitionParserDelegate -> public void parseConstructorArgElements(Element beanEle, BeanDefinition bd);1519513303;Parse constructor-arg sub-elements of the given bean element.;public void parseConstructorArgElements(Element beanEle, BeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, CONSTRUCTOR_ARG_ELEMENT)) {_				parseConstructorArgElement((Element) node, bd)__			}_		}_	};parse,constructor,arg,sub,elements,of,the,given,bean,element;public,void,parse,constructor,arg,elements,element,bean,ele,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,constructor,arg,element,element,node,bd
BeanDefinitionParserDelegate -> public void parseConstructorArgElements(Element beanEle, BeanDefinition bd);1530174524;Parse constructor-arg sub-elements of the given bean element.;public void parseConstructorArgElements(Element beanEle, BeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, CONSTRUCTOR_ARG_ELEMENT)) {_				parseConstructorArgElement((Element) node, bd)__			}_		}_	};parse,constructor,arg,sub,elements,of,the,given,bean,element;public,void,parse,constructor,arg,elements,element,bean,ele,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,constructor,arg,element,element,node,bd
BeanDefinitionParserDelegate -> public void parseConstructorArgElements(Element beanEle, BeanDefinition bd);1530190293;Parse constructor-arg sub-elements of the given bean element.;public void parseConstructorArgElements(Element beanEle, BeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, CONSTRUCTOR_ARG_ELEMENT)) {_				parseConstructorArgElement((Element) node, bd)__			}_		}_	};parse,constructor,arg,sub,elements,of,the,given,bean,element;public,void,parse,constructor,arg,elements,element,bean,ele,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,constructor,arg,element,element,node,bd
BeanDefinitionParserDelegate -> public void parseConstructorArgElements(Element beanEle, BeanDefinition bd);1532706365;Parse constructor-arg sub-elements of the given bean element.;public void parseConstructorArgElements(Element beanEle, BeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, CONSTRUCTOR_ARG_ELEMENT)) {_				parseConstructorArgElement((Element) node, bd)__			}_		}_	};parse,constructor,arg,sub,elements,of,the,given,bean,element;public,void,parse,constructor,arg,elements,element,bean,ele,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,constructor,arg,element,element,node,bd
BeanDefinitionParserDelegate -> public void parseConstructorArgElements(Element beanEle, BeanDefinition bd);1546958161;Parse constructor-arg sub-elements of the given bean element.;public void parseConstructorArgElements(Element beanEle, BeanDefinition bd) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, CONSTRUCTOR_ARG_ELEMENT)) {_				parseConstructorArgElement((Element) node, bd)__			}_		}_	};parse,constructor,arg,sub,elements,of,the,given,bean,element;public,void,parse,constructor,arg,elements,element,bean,ele,bean,definition,bd,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,parse,constructor,arg,element,element,node,bd
BeanDefinitionParserDelegate -> public List parseListElement(Element collectionEle, BeanDefinition bd);1328020251;Parse a list element.;public List parseListElement(Element collectionEle, BeanDefinition bd) {_		String defaultElementType = collectionEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = collectionEle.getChildNodes()__		ManagedList<Object> target = new ManagedList<Object>(nl.getLength())__		target.setSource(extractSource(collectionEle))__		target.setElementTypeName(defaultElementType)__		target.setMergeEnabled(parseMergeAttribute(collectionEle))__		parseCollectionElements(nl, target, bd, defaultElementType)__		return target__	};parse,a,list,element;public,list,parse,list,element,element,collection,ele,bean,definition,bd,string,default,element,type,collection,ele,get,attribute,node,list,nl,collection,ele,get,child,nodes,managed,list,object,target,new,managed,list,object,nl,get,length,target,set,source,extract,source,collection,ele,target,set,element,type,name,default,element,type,target,set,merge,enabled,parse,merge,attribute,collection,ele,parse,collection,elements,nl,target,bd,default,element,type,return,target
BeanDefinitionParserDelegate -> public List parseListElement(Element collectionEle, BeanDefinition bd);1335774711;Parse a list element.;public List parseListElement(Element collectionEle, BeanDefinition bd) {_		String defaultElementType = collectionEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = collectionEle.getChildNodes()__		ManagedList<Object> target = new ManagedList<Object>(nl.getLength())__		target.setSource(extractSource(collectionEle))__		target.setElementTypeName(defaultElementType)__		target.setMergeEnabled(parseMergeAttribute(collectionEle))__		parseCollectionElements(nl, target, bd, defaultElementType)__		return target__	};parse,a,list,element;public,list,parse,list,element,element,collection,ele,bean,definition,bd,string,default,element,type,collection,ele,get,attribute,node,list,nl,collection,ele,get,child,nodes,managed,list,object,target,new,managed,list,object,nl,get,length,target,set,source,extract,source,collection,ele,target,set,element,type,name,default,element,type,target,set,merge,enabled,parse,merge,attribute,collection,ele,parse,collection,elements,nl,target,bd,default,element,type,return,target
BeanDefinitionParserDelegate -> public List parseListElement(Element collectionEle, BeanDefinition bd);1337341719;Parse a list element.;public List parseListElement(Element collectionEle, BeanDefinition bd) {_		String defaultElementType = collectionEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = collectionEle.getChildNodes()__		ManagedList<Object> target = new ManagedList<Object>(nl.getLength())__		target.setSource(extractSource(collectionEle))__		target.setElementTypeName(defaultElementType)__		target.setMergeEnabled(parseMergeAttribute(collectionEle))__		parseCollectionElements(nl, target, bd, defaultElementType)__		return target__	};parse,a,list,element;public,list,parse,list,element,element,collection,ele,bean,definition,bd,string,default,element,type,collection,ele,get,attribute,node,list,nl,collection,ele,get,child,nodes,managed,list,object,target,new,managed,list,object,nl,get,length,target,set,source,extract,source,collection,ele,target,set,element,type,name,default,element,type,target,set,merge,enabled,parse,merge,attribute,collection,ele,parse,collection,elements,nl,target,bd,default,element,type,return,target
BeanDefinitionParserDelegate -> public List parseListElement(Element collectionEle, BeanDefinition bd);1351392612;Parse a list element.;public List parseListElement(Element collectionEle, BeanDefinition bd) {_		String defaultElementType = collectionEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = collectionEle.getChildNodes()__		ManagedList<Object> target = new ManagedList<Object>(nl.getLength())__		target.setSource(extractSource(collectionEle))__		target.setElementTypeName(defaultElementType)__		target.setMergeEnabled(parseMergeAttribute(collectionEle))__		parseCollectionElements(nl, target, bd, defaultElementType)__		return target__	};parse,a,list,element;public,list,parse,list,element,element,collection,ele,bean,definition,bd,string,default,element,type,collection,ele,get,attribute,node,list,nl,collection,ele,get,child,nodes,managed,list,object,target,new,managed,list,object,nl,get,length,target,set,source,extract,source,collection,ele,target,set,element,type,name,default,element,type,target,set,merge,enabled,parse,merge,attribute,collection,ele,parse,collection,elements,nl,target,bd,default,element,type,return,target
BeanDefinitionParserDelegate -> public List parseListElement(Element collectionEle, BeanDefinition bd);1351696936;Parse a list element.;public List parseListElement(Element collectionEle, BeanDefinition bd) {_		String defaultElementType = collectionEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = collectionEle.getChildNodes()__		ManagedList<Object> target = new ManagedList<Object>(nl.getLength())__		target.setSource(extractSource(collectionEle))__		target.setElementTypeName(defaultElementType)__		target.setMergeEnabled(parseMergeAttribute(collectionEle))__		parseCollectionElements(nl, target, bd, defaultElementType)__		return target__	};parse,a,list,element;public,list,parse,list,element,element,collection,ele,bean,definition,bd,string,default,element,type,collection,ele,get,attribute,node,list,nl,collection,ele,get,child,nodes,managed,list,object,target,new,managed,list,object,nl,get,length,target,set,source,extract,source,collection,ele,target,set,element,type,name,default,element,type,target,set,merge,enabled,parse,merge,attribute,collection,ele,parse,collection,elements,nl,target,bd,default,element,type,return,target
BeanDefinitionParserDelegate -> public List parseListElement(Element collectionEle, BeanDefinition bd);1356735495;Parse a list element.;public List parseListElement(Element collectionEle, BeanDefinition bd) {_		String defaultElementType = collectionEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = collectionEle.getChildNodes()__		ManagedList<Object> target = new ManagedList<Object>(nl.getLength())__		target.setSource(extractSource(collectionEle))__		target.setElementTypeName(defaultElementType)__		target.setMergeEnabled(parseMergeAttribute(collectionEle))__		parseCollectionElements(nl, target, bd, defaultElementType)__		return target__	};parse,a,list,element;public,list,parse,list,element,element,collection,ele,bean,definition,bd,string,default,element,type,collection,ele,get,attribute,node,list,nl,collection,ele,get,child,nodes,managed,list,object,target,new,managed,list,object,nl,get,length,target,set,source,extract,source,collection,ele,target,set,element,type,name,default,element,type,target,set,merge,enabled,parse,merge,attribute,collection,ele,parse,collection,elements,nl,target,bd,default,element,type,return,target
BeanDefinitionParserDelegate -> public List parseListElement(Element collectionEle, BeanDefinition bd);1357119417;Parse a list element.;public List parseListElement(Element collectionEle, BeanDefinition bd) {_		String defaultElementType = collectionEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = collectionEle.getChildNodes()__		ManagedList<Object> target = new ManagedList<Object>(nl.getLength())__		target.setSource(extractSource(collectionEle))__		target.setElementTypeName(defaultElementType)__		target.setMergeEnabled(parseMergeAttribute(collectionEle))__		parseCollectionElements(nl, target, bd, defaultElementType)__		return target__	};parse,a,list,element;public,list,parse,list,element,element,collection,ele,bean,definition,bd,string,default,element,type,collection,ele,get,attribute,node,list,nl,collection,ele,get,child,nodes,managed,list,object,target,new,managed,list,object,nl,get,length,target,set,source,extract,source,collection,ele,target,set,element,type,name,default,element,type,target,set,merge,enabled,parse,merge,attribute,collection,ele,parse,collection,elements,nl,target,bd,default,element,type,return,target
BeanDefinitionParserDelegate -> public List parseListElement(Element collectionEle, BeanDefinition bd);1367943112;Parse a list element.;public List parseListElement(Element collectionEle, BeanDefinition bd) {_		String defaultElementType = collectionEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = collectionEle.getChildNodes()__		ManagedList<Object> target = new ManagedList<Object>(nl.getLength())__		target.setSource(extractSource(collectionEle))__		target.setElementTypeName(defaultElementType)__		target.setMergeEnabled(parseMergeAttribute(collectionEle))__		parseCollectionElements(nl, target, bd, defaultElementType)__		return target__	};parse,a,list,element;public,list,parse,list,element,element,collection,ele,bean,definition,bd,string,default,element,type,collection,ele,get,attribute,node,list,nl,collection,ele,get,child,nodes,managed,list,object,target,new,managed,list,object,nl,get,length,target,set,source,extract,source,collection,ele,target,set,element,type,name,default,element,type,target,set,merge,enabled,parse,merge,attribute,collection,ele,parse,collection,elements,nl,target,bd,default,element,type,return,target
BeanDefinitionParserDelegate -> public List parseListElement(Element collectionEle, BeanDefinition bd);1382030648;Parse a list element.;public List parseListElement(Element collectionEle, BeanDefinition bd) {_		String defaultElementType = collectionEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = collectionEle.getChildNodes()__		ManagedList<Object> target = new ManagedList<Object>(nl.getLength())__		target.setSource(extractSource(collectionEle))__		target.setElementTypeName(defaultElementType)__		target.setMergeEnabled(parseMergeAttribute(collectionEle))__		parseCollectionElements(nl, target, bd, defaultElementType)__		return target__	};parse,a,list,element;public,list,parse,list,element,element,collection,ele,bean,definition,bd,string,default,element,type,collection,ele,get,attribute,node,list,nl,collection,ele,get,child,nodes,managed,list,object,target,new,managed,list,object,nl,get,length,target,set,source,extract,source,collection,ele,target,set,element,type,name,default,element,type,target,set,merge,enabled,parse,merge,attribute,collection,ele,parse,collection,elements,nl,target,bd,default,element,type,return,target
BeanDefinitionParserDelegate -> public void initDefaults(Element root, BeanDefinitionParserDelegate parent);1328020251;Initialize the default lazy-init, autowire, dependency check settings,_init-method, destroy-method and merge settings. Support nested 'beans'_element use cases by falling back to the given parent in case the_defaults are not explicitly set locally._@see #populateDefaults(DocumentDefaultsDefinition, DocumentDefaultsDefinition, org.w3c.dom.Element)_@see #getDefaults();public void initDefaults(Element root, BeanDefinitionParserDelegate parent) {_		populateDefaults(this.defaults, (parent != null ? parent.defaults : null), root)__		this.readerContext.fireDefaultsRegistered(this.defaults)__	};initialize,the,default,lazy,init,autowire,dependency,check,settings,init,method,destroy,method,and,merge,settings,support,nested,beans,element,use,cases,by,falling,back,to,the,given,parent,in,case,the,defaults,are,not,explicitly,set,locally,see,populate,defaults,document,defaults,definition,document,defaults,definition,org,w3c,dom,element,see,get,defaults;public,void,init,defaults,element,root,bean,definition,parser,delegate,parent,populate,defaults,this,defaults,parent,null,parent,defaults,null,root,this,reader,context,fire,defaults,registered,this,defaults
BeanDefinitionParserDelegate -> public void initDefaults(Element root, BeanDefinitionParserDelegate parent);1335774711;Initialize the default lazy-init, autowire, dependency check settings,_init-method, destroy-method and merge settings. Support nested 'beans'_element use cases by falling back to the given parent in case the_defaults are not explicitly set locally._@see #populateDefaults(DocumentDefaultsDefinition, DocumentDefaultsDefinition, org.w3c.dom.Element)_@see #getDefaults();public void initDefaults(Element root, BeanDefinitionParserDelegate parent) {_		populateDefaults(this.defaults, (parent != null ? parent.defaults : null), root)__		this.readerContext.fireDefaultsRegistered(this.defaults)__	};initialize,the,default,lazy,init,autowire,dependency,check,settings,init,method,destroy,method,and,merge,settings,support,nested,beans,element,use,cases,by,falling,back,to,the,given,parent,in,case,the,defaults,are,not,explicitly,set,locally,see,populate,defaults,document,defaults,definition,document,defaults,definition,org,w3c,dom,element,see,get,defaults;public,void,init,defaults,element,root,bean,definition,parser,delegate,parent,populate,defaults,this,defaults,parent,null,parent,defaults,null,root,this,reader,context,fire,defaults,registered,this,defaults
BeanDefinitionParserDelegate -> public void initDefaults(Element root, BeanDefinitionParserDelegate parent);1337341719;Initialize the default lazy-init, autowire, dependency check settings,_init-method, destroy-method and merge settings. Support nested 'beans'_element use cases by falling back to the given parent in case the_defaults are not explicitly set locally._@see #populateDefaults(DocumentDefaultsDefinition, DocumentDefaultsDefinition, org.w3c.dom.Element)_@see #getDefaults();public void initDefaults(Element root, BeanDefinitionParserDelegate parent) {_		populateDefaults(this.defaults, (parent != null ? parent.defaults : null), root)__		this.readerContext.fireDefaultsRegistered(this.defaults)__	};initialize,the,default,lazy,init,autowire,dependency,check,settings,init,method,destroy,method,and,merge,settings,support,nested,beans,element,use,cases,by,falling,back,to,the,given,parent,in,case,the,defaults,are,not,explicitly,set,locally,see,populate,defaults,document,defaults,definition,document,defaults,definition,org,w3c,dom,element,see,get,defaults;public,void,init,defaults,element,root,bean,definition,parser,delegate,parent,populate,defaults,this,defaults,parent,null,parent,defaults,null,root,this,reader,context,fire,defaults,registered,this,defaults
BeanDefinitionParserDelegate -> public void initDefaults(Element root, BeanDefinitionParserDelegate parent);1351392612;Initialize the default lazy-init, autowire, dependency check settings,_init-method, destroy-method and merge settings. Support nested 'beans'_element use cases by falling back to the given parent in case the_defaults are not explicitly set locally._@see #populateDefaults(DocumentDefaultsDefinition, DocumentDefaultsDefinition, org.w3c.dom.Element)_@see #getDefaults();public void initDefaults(Element root, BeanDefinitionParserDelegate parent) {_		populateDefaults(this.defaults, (parent != null ? parent.defaults : null), root)__		this.readerContext.fireDefaultsRegistered(this.defaults)__	};initialize,the,default,lazy,init,autowire,dependency,check,settings,init,method,destroy,method,and,merge,settings,support,nested,beans,element,use,cases,by,falling,back,to,the,given,parent,in,case,the,defaults,are,not,explicitly,set,locally,see,populate,defaults,document,defaults,definition,document,defaults,definition,org,w3c,dom,element,see,get,defaults;public,void,init,defaults,element,root,bean,definition,parser,delegate,parent,populate,defaults,this,defaults,parent,null,parent,defaults,null,root,this,reader,context,fire,defaults,registered,this,defaults
BeanDefinitionParserDelegate -> public void initDefaults(Element root, BeanDefinitionParserDelegate parent);1351696936;Initialize the default lazy-init, autowire, dependency check settings,_init-method, destroy-method and merge settings. Support nested 'beans'_element use cases by falling back to the given parent in case the_defaults are not explicitly set locally._@see #populateDefaults(DocumentDefaultsDefinition, DocumentDefaultsDefinition, org.w3c.dom.Element)_@see #getDefaults();public void initDefaults(Element root, BeanDefinitionParserDelegate parent) {_		populateDefaults(this.defaults, (parent != null ? parent.defaults : null), root)__		this.readerContext.fireDefaultsRegistered(this.defaults)__	};initialize,the,default,lazy,init,autowire,dependency,check,settings,init,method,destroy,method,and,merge,settings,support,nested,beans,element,use,cases,by,falling,back,to,the,given,parent,in,case,the,defaults,are,not,explicitly,set,locally,see,populate,defaults,document,defaults,definition,document,defaults,definition,org,w3c,dom,element,see,get,defaults;public,void,init,defaults,element,root,bean,definition,parser,delegate,parent,populate,defaults,this,defaults,parent,null,parent,defaults,null,root,this,reader,context,fire,defaults,registered,this,defaults
BeanDefinitionParserDelegate -> public void initDefaults(Element root, BeanDefinitionParserDelegate parent);1356735495;Initialize the default lazy-init, autowire, dependency check settings,_init-method, destroy-method and merge settings. Support nested 'beans'_element use cases by falling back to the given parent in case the_defaults are not explicitly set locally._@see #populateDefaults(DocumentDefaultsDefinition, DocumentDefaultsDefinition, org.w3c.dom.Element)_@see #getDefaults();public void initDefaults(Element root, BeanDefinitionParserDelegate parent) {_		populateDefaults(this.defaults, (parent != null ? parent.defaults : null), root)__		this.readerContext.fireDefaultsRegistered(this.defaults)__	};initialize,the,default,lazy,init,autowire,dependency,check,settings,init,method,destroy,method,and,merge,settings,support,nested,beans,element,use,cases,by,falling,back,to,the,given,parent,in,case,the,defaults,are,not,explicitly,set,locally,see,populate,defaults,document,defaults,definition,document,defaults,definition,org,w3c,dom,element,see,get,defaults;public,void,init,defaults,element,root,bean,definition,parser,delegate,parent,populate,defaults,this,defaults,parent,null,parent,defaults,null,root,this,reader,context,fire,defaults,registered,this,defaults
BeanDefinitionParserDelegate -> public void initDefaults(Element root, BeanDefinitionParserDelegate parent);1357119417;Initialize the default lazy-init, autowire, dependency check settings,_init-method, destroy-method and merge settings. Support nested 'beans'_element use cases by falling back to the given parent in case the_defaults are not explicitly set locally._@see #populateDefaults(DocumentDefaultsDefinition, DocumentDefaultsDefinition, org.w3c.dom.Element)_@see #getDefaults();public void initDefaults(Element root, BeanDefinitionParserDelegate parent) {_		populateDefaults(this.defaults, (parent != null ? parent.defaults : null), root)__		this.readerContext.fireDefaultsRegistered(this.defaults)__	};initialize,the,default,lazy,init,autowire,dependency,check,settings,init,method,destroy,method,and,merge,settings,support,nested,beans,element,use,cases,by,falling,back,to,the,given,parent,in,case,the,defaults,are,not,explicitly,set,locally,see,populate,defaults,document,defaults,definition,document,defaults,definition,org,w3c,dom,element,see,get,defaults;public,void,init,defaults,element,root,bean,definition,parser,delegate,parent,populate,defaults,this,defaults,parent,null,parent,defaults,null,root,this,reader,context,fire,defaults,registered,this,defaults
BeanDefinitionParserDelegate -> public void initDefaults(Element root, BeanDefinitionParserDelegate parent);1367943112;Initialize the default lazy-init, autowire, dependency check settings,_init-method, destroy-method and merge settings. Support nested 'beans'_element use cases by falling back to the given parent in case the_defaults are not explicitly set locally._@see #populateDefaults(DocumentDefaultsDefinition, DocumentDefaultsDefinition, org.w3c.dom.Element)_@see #getDefaults();public void initDefaults(Element root, BeanDefinitionParserDelegate parent) {_		populateDefaults(this.defaults, (parent != null ? parent.defaults : null), root)__		this.readerContext.fireDefaultsRegistered(this.defaults)__	};initialize,the,default,lazy,init,autowire,dependency,check,settings,init,method,destroy,method,and,merge,settings,support,nested,beans,element,use,cases,by,falling,back,to,the,given,parent,in,case,the,defaults,are,not,explicitly,set,locally,see,populate,defaults,document,defaults,definition,document,defaults,definition,org,w3c,dom,element,see,get,defaults;public,void,init,defaults,element,root,bean,definition,parser,delegate,parent,populate,defaults,this,defaults,parent,null,parent,defaults,null,root,this,reader,context,fire,defaults,registered,this,defaults
BeanDefinitionParserDelegate -> public void initDefaults(Element root, BeanDefinitionParserDelegate parent);1382030648;Initialize the default lazy-init, autowire, dependency check settings,_init-method, destroy-method and merge settings. Support nested 'beans'_element use cases by falling back to the given parent in case the_defaults are not explicitly set locally._@see #populateDefaults(DocumentDefaultsDefinition, DocumentDefaultsDefinition, org.w3c.dom.Element)_@see #getDefaults();public void initDefaults(Element root, BeanDefinitionParserDelegate parent) {_		populateDefaults(this.defaults, (parent != null ? parent.defaults : null), root)__		this.readerContext.fireDefaultsRegistered(this.defaults)__	};initialize,the,default,lazy,init,autowire,dependency,check,settings,init,method,destroy,method,and,merge,settings,support,nested,beans,element,use,cases,by,falling,back,to,the,given,parent,in,case,the,defaults,are,not,explicitly,set,locally,see,populate,defaults,document,defaults,definition,document,defaults,definition,org,w3c,dom,element,see,get,defaults;public,void,init,defaults,element,root,bean,definition,parser,delegate,parent,populate,defaults,this,defaults,parent,null,parent,defaults,null,root,this,reader,context,fire,defaults,registered,this,defaults
BeanDefinitionParserDelegate -> public void initDefaults(Element root, BeanDefinitionParserDelegate parent);1385412762;Initialize the default lazy-init, autowire, dependency check settings,_init-method, destroy-method and merge settings. Support nested 'beans'_element use cases by falling back to the given parent in case the_defaults are not explicitly set locally._@see #populateDefaults(DocumentDefaultsDefinition, DocumentDefaultsDefinition, org.w3c.dom.Element)_@see #getDefaults();public void initDefaults(Element root, BeanDefinitionParserDelegate parent) {_		populateDefaults(this.defaults, (parent != null ? parent.defaults : null), root)__		this.readerContext.fireDefaultsRegistered(this.defaults)__	};initialize,the,default,lazy,init,autowire,dependency,check,settings,init,method,destroy,method,and,merge,settings,support,nested,beans,element,use,cases,by,falling,back,to,the,given,parent,in,case,the,defaults,are,not,explicitly,set,locally,see,populate,defaults,document,defaults,definition,document,defaults,definition,org,w3c,dom,element,see,get,defaults;public,void,init,defaults,element,root,bean,definition,parser,delegate,parent,populate,defaults,this,defaults,parent,null,parent,defaults,null,root,this,reader,context,fire,defaults,registered,this,defaults
BeanDefinitionParserDelegate -> public void initDefaults(Element root, BeanDefinitionParserDelegate parent);1410953197;Initialize the default lazy-init, autowire, dependency check settings,_init-method, destroy-method and merge settings. Support nested 'beans'_element use cases by falling back to the given parent in case the_defaults are not explicitly set locally._@see #populateDefaults(DocumentDefaultsDefinition, DocumentDefaultsDefinition, org.w3c.dom.Element)_@see #getDefaults();public void initDefaults(Element root, BeanDefinitionParserDelegate parent) {_		populateDefaults(this.defaults, (parent != null ? parent.defaults : null), root)__		this.readerContext.fireDefaultsRegistered(this.defaults)__	};initialize,the,default,lazy,init,autowire,dependency,check,settings,init,method,destroy,method,and,merge,settings,support,nested,beans,element,use,cases,by,falling,back,to,the,given,parent,in,case,the,defaults,are,not,explicitly,set,locally,see,populate,defaults,document,defaults,definition,document,defaults,definition,org,w3c,dom,element,see,get,defaults;public,void,init,defaults,element,root,bean,definition,parser,delegate,parent,populate,defaults,this,defaults,parent,null,parent,defaults,null,root,this,reader,context,fire,defaults,registered,this,defaults
BeanDefinitionParserDelegate -> public void initDefaults(Element root, BeanDefinitionParserDelegate parent);1411599760;Initialize the default lazy-init, autowire, dependency check settings,_init-method, destroy-method and merge settings. Support nested 'beans'_element use cases by falling back to the given parent in case the_defaults are not explicitly set locally._@see #populateDefaults(DocumentDefaultsDefinition, DocumentDefaultsDefinition, org.w3c.dom.Element)_@see #getDefaults();public void initDefaults(Element root, BeanDefinitionParserDelegate parent) {_		populateDefaults(this.defaults, (parent != null ? parent.defaults : null), root)__		this.readerContext.fireDefaultsRegistered(this.defaults)__	};initialize,the,default,lazy,init,autowire,dependency,check,settings,init,method,destroy,method,and,merge,settings,support,nested,beans,element,use,cases,by,falling,back,to,the,given,parent,in,case,the,defaults,are,not,explicitly,set,locally,see,populate,defaults,document,defaults,definition,document,defaults,definition,org,w3c,dom,element,see,get,defaults;public,void,init,defaults,element,root,bean,definition,parser,delegate,parent,populate,defaults,this,defaults,parent,null,parent,defaults,null,root,this,reader,context,fire,defaults,registered,this,defaults
BeanDefinitionParserDelegate -> public void initDefaults(Element root, BeanDefinitionParserDelegate parent);1419966315;Initialize the default lazy-init, autowire, dependency check settings,_init-method, destroy-method and merge settings. Support nested 'beans'_element use cases by falling back to the given parent in case the_defaults are not explicitly set locally._@see #populateDefaults(DocumentDefaultsDefinition, DocumentDefaultsDefinition, org.w3c.dom.Element)_@see #getDefaults();public void initDefaults(Element root, BeanDefinitionParserDelegate parent) {_		populateDefaults(this.defaults, (parent != null ? parent.defaults : null), root)__		this.readerContext.fireDefaultsRegistered(this.defaults)__	};initialize,the,default,lazy,init,autowire,dependency,check,settings,init,method,destroy,method,and,merge,settings,support,nested,beans,element,use,cases,by,falling,back,to,the,given,parent,in,case,the,defaults,are,not,explicitly,set,locally,see,populate,defaults,document,defaults,definition,document,defaults,definition,org,w3c,dom,element,see,get,defaults;public,void,init,defaults,element,root,bean,definition,parser,delegate,parent,populate,defaults,this,defaults,parent,null,parent,defaults,null,root,this,reader,context,fire,defaults,registered,this,defaults
BeanDefinitionParserDelegate -> public void initDefaults(Element root, BeanDefinitionParserDelegate parent);1431958785;Initialize the default lazy-init, autowire, dependency check settings,_init-method, destroy-method and merge settings. Support nested 'beans'_element use cases by falling back to the given parent in case the_defaults are not explicitly set locally._@see #populateDefaults(DocumentDefaultsDefinition, DocumentDefaultsDefinition, org.w3c.dom.Element)_@see #getDefaults();public void initDefaults(Element root, BeanDefinitionParserDelegate parent) {_		populateDefaults(this.defaults, (parent != null ? parent.defaults : null), root)__		this.readerContext.fireDefaultsRegistered(this.defaults)__	};initialize,the,default,lazy,init,autowire,dependency,check,settings,init,method,destroy,method,and,merge,settings,support,nested,beans,element,use,cases,by,falling,back,to,the,given,parent,in,case,the,defaults,are,not,explicitly,set,locally,see,populate,defaults,document,defaults,definition,document,defaults,definition,org,w3c,dom,element,see,get,defaults;public,void,init,defaults,element,root,bean,definition,parser,delegate,parent,populate,defaults,this,defaults,parent,null,parent,defaults,null,root,this,reader,context,fire,defaults,registered,this,defaults
BeanDefinitionParserDelegate -> public void initDefaults(Element root, BeanDefinitionParserDelegate parent);1432135182;Initialize the default lazy-init, autowire, dependency check settings,_init-method, destroy-method and merge settings. Support nested 'beans'_element use cases by falling back to the given parent in case the_defaults are not explicitly set locally._@see #populateDefaults(DocumentDefaultsDefinition, DocumentDefaultsDefinition, org.w3c.dom.Element)_@see #getDefaults();public void initDefaults(Element root, BeanDefinitionParserDelegate parent) {_		populateDefaults(this.defaults, (parent != null ? parent.defaults : null), root)__		this.readerContext.fireDefaultsRegistered(this.defaults)__	};initialize,the,default,lazy,init,autowire,dependency,check,settings,init,method,destroy,method,and,merge,settings,support,nested,beans,element,use,cases,by,falling,back,to,the,given,parent,in,case,the,defaults,are,not,explicitly,set,locally,see,populate,defaults,document,defaults,definition,document,defaults,definition,org,w3c,dom,element,see,get,defaults;public,void,init,defaults,element,root,bean,definition,parser,delegate,parent,populate,defaults,this,defaults,parent,null,parent,defaults,null,root,this,reader,context,fire,defaults,registered,this,defaults
BeanDefinitionParserDelegate -> public void initDefaults(Element root, BeanDefinitionParserDelegate parent);1447323728;Initialize the default lazy-init, autowire, dependency check settings,_init-method, destroy-method and merge settings. Support nested 'beans'_element use cases by falling back to the given parent in case the_defaults are not explicitly set locally._@see #populateDefaults(DocumentDefaultsDefinition, DocumentDefaultsDefinition, org.w3c.dom.Element)_@see #getDefaults();public void initDefaults(Element root, BeanDefinitionParserDelegate parent) {_		populateDefaults(this.defaults, (parent != null ? parent.defaults : null), root)__		this.readerContext.fireDefaultsRegistered(this.defaults)__	};initialize,the,default,lazy,init,autowire,dependency,check,settings,init,method,destroy,method,and,merge,settings,support,nested,beans,element,use,cases,by,falling,back,to,the,given,parent,in,case,the,defaults,are,not,explicitly,set,locally,see,populate,defaults,document,defaults,definition,document,defaults,definition,org,w3c,dom,element,see,get,defaults;public,void,init,defaults,element,root,bean,definition,parser,delegate,parent,populate,defaults,this,defaults,parent,null,parent,defaults,null,root,this,reader,context,fire,defaults,registered,this,defaults
BeanDefinitionParserDelegate -> public void initDefaults(Element root, BeanDefinitionParserDelegate parent);1467726769;Initialize the default lazy-init, autowire, dependency check settings,_init-method, destroy-method and merge settings. Support nested 'beans'_element use cases by falling back to the given parent in case the_defaults are not explicitly set locally._@see #populateDefaults(DocumentDefaultsDefinition, DocumentDefaultsDefinition, org.w3c.dom.Element)_@see #getDefaults();public void initDefaults(Element root, BeanDefinitionParserDelegate parent) {_		populateDefaults(this.defaults, (parent != null ? parent.defaults : null), root)__		this.readerContext.fireDefaultsRegistered(this.defaults)__	};initialize,the,default,lazy,init,autowire,dependency,check,settings,init,method,destroy,method,and,merge,settings,support,nested,beans,element,use,cases,by,falling,back,to,the,given,parent,in,case,the,defaults,are,not,explicitly,set,locally,see,populate,defaults,document,defaults,definition,document,defaults,definition,org,w3c,dom,element,see,get,defaults;public,void,init,defaults,element,root,bean,definition,parser,delegate,parent,populate,defaults,this,defaults,parent,null,parent,defaults,null,root,this,reader,context,fire,defaults,registered,this,defaults
BeanDefinitionParserDelegate -> public void initDefaults(Element root, BeanDefinitionParserDelegate parent);1467730834;Initialize the default lazy-init, autowire, dependency check settings,_init-method, destroy-method and merge settings. Support nested 'beans'_element use cases by falling back to the given parent in case the_defaults are not explicitly set locally._@see #populateDefaults(DocumentDefaultsDefinition, DocumentDefaultsDefinition, org.w3c.dom.Element)_@see #getDefaults();public void initDefaults(Element root, BeanDefinitionParserDelegate parent) {_		populateDefaults(this.defaults, (parent != null ? parent.defaults : null), root)__		this.readerContext.fireDefaultsRegistered(this.defaults)__	};initialize,the,default,lazy,init,autowire,dependency,check,settings,init,method,destroy,method,and,merge,settings,support,nested,beans,element,use,cases,by,falling,back,to,the,given,parent,in,case,the,defaults,are,not,explicitly,set,locally,see,populate,defaults,document,defaults,definition,document,defaults,definition,org,w3c,dom,element,see,get,defaults;public,void,init,defaults,element,root,bean,definition,parser,delegate,parent,populate,defaults,this,defaults,parent,null,parent,defaults,null,root,this,reader,context,fire,defaults,registered,this,defaults
BeanDefinitionParserDelegate -> public void initDefaults(Element root, BeanDefinitionParserDelegate parent);1467744603;Initialize the default lazy-init, autowire, dependency check settings,_init-method, destroy-method and merge settings. Support nested 'beans'_element use cases by falling back to the given parent in case the_defaults are not explicitly set locally._@see #populateDefaults(DocumentDefaultsDefinition, DocumentDefaultsDefinition, org.w3c.dom.Element)_@see #getDefaults();public void initDefaults(Element root, BeanDefinitionParserDelegate parent) {_		populateDefaults(this.defaults, (parent != null ? parent.defaults : null), root)__		this.readerContext.fireDefaultsRegistered(this.defaults)__	};initialize,the,default,lazy,init,autowire,dependency,check,settings,init,method,destroy,method,and,merge,settings,support,nested,beans,element,use,cases,by,falling,back,to,the,given,parent,in,case,the,defaults,are,not,explicitly,set,locally,see,populate,defaults,document,defaults,definition,document,defaults,definition,org,w3c,dom,element,see,get,defaults;public,void,init,defaults,element,root,bean,definition,parser,delegate,parent,populate,defaults,this,defaults,parent,null,parent,defaults,null,root,this,reader,context,fire,defaults,registered,this,defaults
BeanDefinitionParserDelegate -> public void initDefaults(Element root, BeanDefinitionParserDelegate parent);1487245676;Initialize the default lazy-init, autowire, dependency check settings,_init-method, destroy-method and merge settings. Support nested 'beans'_element use cases by falling back to the given parent in case the_defaults are not explicitly set locally._@see #populateDefaults(DocumentDefaultsDefinition, DocumentDefaultsDefinition, org.w3c.dom.Element)_@see #getDefaults();public void initDefaults(Element root, BeanDefinitionParserDelegate parent) {_		populateDefaults(this.defaults, (parent != null ? parent.defaults : null), root)__		this.readerContext.fireDefaultsRegistered(this.defaults)__	};initialize,the,default,lazy,init,autowire,dependency,check,settings,init,method,destroy,method,and,merge,settings,support,nested,beans,element,use,cases,by,falling,back,to,the,given,parent,in,case,the,defaults,are,not,explicitly,set,locally,see,populate,defaults,document,defaults,definition,document,defaults,definition,org,w3c,dom,element,see,get,defaults;public,void,init,defaults,element,root,bean,definition,parser,delegate,parent,populate,defaults,this,defaults,parent,null,parent,defaults,null,root,this,reader,context,fire,defaults,registered,this,defaults
BeanDefinitionParserDelegate -> public void initDefaults(Element root, BeanDefinitionParserDelegate parent);1487255851;Initialize the default lazy-init, autowire, dependency check settings,_init-method, destroy-method and merge settings. Support nested 'beans'_element use cases by falling back to the given parent in case the_defaults are not explicitly set locally._@see #populateDefaults(DocumentDefaultsDefinition, DocumentDefaultsDefinition, org.w3c.dom.Element)_@see #getDefaults();public void initDefaults(Element root, BeanDefinitionParserDelegate parent) {_		populateDefaults(this.defaults, (parent != null ? parent.defaults : null), root)__		this.readerContext.fireDefaultsRegistered(this.defaults)__	};initialize,the,default,lazy,init,autowire,dependency,check,settings,init,method,destroy,method,and,merge,settings,support,nested,beans,element,use,cases,by,falling,back,to,the,given,parent,in,case,the,defaults,are,not,explicitly,set,locally,see,populate,defaults,document,defaults,definition,document,defaults,definition,org,w3c,dom,element,see,get,defaults;public,void,init,defaults,element,root,bean,definition,parser,delegate,parent,populate,defaults,this,defaults,parent,null,parent,defaults,null,root,this,reader,context,fire,defaults,registered,this,defaults
BeanDefinitionParserDelegate -> public void initDefaults(Element root, BeanDefinitionParserDelegate parent);1494586217;Initialize the default lazy-init, autowire, dependency check settings,_init-method, destroy-method and merge settings. Support nested 'beans'_element use cases by falling back to the given parent in case the_defaults are not explicitly set locally._@see #populateDefaults(DocumentDefaultsDefinition, DocumentDefaultsDefinition, org.w3c.dom.Element)_@see #getDefaults();public void initDefaults(Element root, BeanDefinitionParserDelegate parent) {_		populateDefaults(this.defaults, (parent != null ? parent.defaults : null), root)__		this.readerContext.fireDefaultsRegistered(this.defaults)__	};initialize,the,default,lazy,init,autowire,dependency,check,settings,init,method,destroy,method,and,merge,settings,support,nested,beans,element,use,cases,by,falling,back,to,the,given,parent,in,case,the,defaults,are,not,explicitly,set,locally,see,populate,defaults,document,defaults,definition,document,defaults,definition,org,w3c,dom,element,see,get,defaults;public,void,init,defaults,element,root,bean,definition,parser,delegate,parent,populate,defaults,this,defaults,parent,null,parent,defaults,null,root,this,reader,context,fire,defaults,registered,this,defaults
BeanDefinitionParserDelegate -> public void initDefaults(Element root, BeanDefinitionParserDelegate parent);1495868221;Initialize the default lazy-init, autowire, dependency check settings,_init-method, destroy-method and merge settings. Support nested 'beans'_element use cases by falling back to the given parent in case the_defaults are not explicitly set locally._@see #populateDefaults(DocumentDefaultsDefinition, DocumentDefaultsDefinition, org.w3c.dom.Element)_@see #getDefaults();public void initDefaults(Element root, BeanDefinitionParserDelegate parent) {_		populateDefaults(this.defaults, (parent != null ? parent.defaults : null), root)__		this.readerContext.fireDefaultsRegistered(this.defaults)__	};initialize,the,default,lazy,init,autowire,dependency,check,settings,init,method,destroy,method,and,merge,settings,support,nested,beans,element,use,cases,by,falling,back,to,the,given,parent,in,case,the,defaults,are,not,explicitly,set,locally,see,populate,defaults,document,defaults,definition,document,defaults,definition,org,w3c,dom,element,see,get,defaults;public,void,init,defaults,element,root,bean,definition,parser,delegate,parent,populate,defaults,this,defaults,parent,null,parent,defaults,null,root,this,reader,context,fire,defaults,registered,this,defaults
BeanDefinitionParserDelegate -> protected Object parseKeyElement(Element keyEle, BeanDefinition bd, String defaultKeyTypeName);1328020251;Parse a key sub-element of a map element.;protected Object parseKeyElement(Element keyEle, BeanDefinition bd, String defaultKeyTypeName) {_		NodeList nl = keyEle.getChildNodes()__		Element subElement = null__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element) {_				_				if (subElement != null) {_					error("<key> element must not contain more than one value sub-element", keyEle)__				}_				else {_					subElement = (Element) node__				}_			}_		}_		return parsePropertySubElement(subElement, bd, defaultKeyTypeName)__	};parse,a,key,sub,element,of,a,map,element;protected,object,parse,key,element,element,key,ele,bean,definition,bd,string,default,key,type,name,node,list,nl,key,ele,get,child,nodes,element,sub,element,null,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,if,sub,element,null,error,key,element,must,not,contain,more,than,one,value,sub,element,key,ele,else,sub,element,element,node,return,parse,property,sub,element,sub,element,bd,default,key,type,name
BeanDefinitionParserDelegate -> protected Object parseKeyElement(Element keyEle, BeanDefinition bd, String defaultKeyTypeName);1335774711;Parse a key sub-element of a map element.;protected Object parseKeyElement(Element keyEle, BeanDefinition bd, String defaultKeyTypeName) {_		NodeList nl = keyEle.getChildNodes()__		Element subElement = null__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element) {_				_				if (subElement != null) {_					error("<key> element must not contain more than one value sub-element", keyEle)__				}_				else {_					subElement = (Element) node__				}_			}_		}_		return parsePropertySubElement(subElement, bd, defaultKeyTypeName)__	};parse,a,key,sub,element,of,a,map,element;protected,object,parse,key,element,element,key,ele,bean,definition,bd,string,default,key,type,name,node,list,nl,key,ele,get,child,nodes,element,sub,element,null,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,if,sub,element,null,error,key,element,must,not,contain,more,than,one,value,sub,element,key,ele,else,sub,element,element,node,return,parse,property,sub,element,sub,element,bd,default,key,type,name
BeanDefinitionParserDelegate -> protected Object parseKeyElement(Element keyEle, BeanDefinition bd, String defaultKeyTypeName);1337341719;Parse a key sub-element of a map element.;protected Object parseKeyElement(Element keyEle, BeanDefinition bd, String defaultKeyTypeName) {_		NodeList nl = keyEle.getChildNodes()__		Element subElement = null__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element) {_				_				if (subElement != null) {_					error("<key> element must not contain more than one value sub-element", keyEle)__				}_				else {_					subElement = (Element) node__				}_			}_		}_		return parsePropertySubElement(subElement, bd, defaultKeyTypeName)__	};parse,a,key,sub,element,of,a,map,element;protected,object,parse,key,element,element,key,ele,bean,definition,bd,string,default,key,type,name,node,list,nl,key,ele,get,child,nodes,element,sub,element,null,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,if,sub,element,null,error,key,element,must,not,contain,more,than,one,value,sub,element,key,ele,else,sub,element,element,node,return,parse,property,sub,element,sub,element,bd,default,key,type,name
BeanDefinitionParserDelegate -> protected Object parseKeyElement(Element keyEle, BeanDefinition bd, String defaultKeyTypeName);1351392612;Parse a key sub-element of a map element.;protected Object parseKeyElement(Element keyEle, BeanDefinition bd, String defaultKeyTypeName) {_		NodeList nl = keyEle.getChildNodes()__		Element subElement = null__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element) {_				_				if (subElement != null) {_					error("<key> element must not contain more than one value sub-element", keyEle)__				}_				else {_					subElement = (Element) node__				}_			}_		}_		return parsePropertySubElement(subElement, bd, defaultKeyTypeName)__	};parse,a,key,sub,element,of,a,map,element;protected,object,parse,key,element,element,key,ele,bean,definition,bd,string,default,key,type,name,node,list,nl,key,ele,get,child,nodes,element,sub,element,null,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,if,sub,element,null,error,key,element,must,not,contain,more,than,one,value,sub,element,key,ele,else,sub,element,element,node,return,parse,property,sub,element,sub,element,bd,default,key,type,name
BeanDefinitionParserDelegate -> protected Object parseKeyElement(Element keyEle, BeanDefinition bd, String defaultKeyTypeName);1351696936;Parse a key sub-element of a map element.;protected Object parseKeyElement(Element keyEle, BeanDefinition bd, String defaultKeyTypeName) {_		NodeList nl = keyEle.getChildNodes()__		Element subElement = null__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element) {_				_				if (subElement != null) {_					error("<key> element must not contain more than one value sub-element", keyEle)__				}_				else {_					subElement = (Element) node__				}_			}_		}_		return parsePropertySubElement(subElement, bd, defaultKeyTypeName)__	};parse,a,key,sub,element,of,a,map,element;protected,object,parse,key,element,element,key,ele,bean,definition,bd,string,default,key,type,name,node,list,nl,key,ele,get,child,nodes,element,sub,element,null,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,if,sub,element,null,error,key,element,must,not,contain,more,than,one,value,sub,element,key,ele,else,sub,element,element,node,return,parse,property,sub,element,sub,element,bd,default,key,type,name
BeanDefinitionParserDelegate -> protected Object parseKeyElement(Element keyEle, BeanDefinition bd, String defaultKeyTypeName);1356735495;Parse a key sub-element of a map element.;protected Object parseKeyElement(Element keyEle, BeanDefinition bd, String defaultKeyTypeName) {_		NodeList nl = keyEle.getChildNodes()__		Element subElement = null__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element) {_				_				if (subElement != null) {_					error("<key> element must not contain more than one value sub-element", keyEle)__				}_				else {_					subElement = (Element) node__				}_			}_		}_		return parsePropertySubElement(subElement, bd, defaultKeyTypeName)__	};parse,a,key,sub,element,of,a,map,element;protected,object,parse,key,element,element,key,ele,bean,definition,bd,string,default,key,type,name,node,list,nl,key,ele,get,child,nodes,element,sub,element,null,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,if,sub,element,null,error,key,element,must,not,contain,more,than,one,value,sub,element,key,ele,else,sub,element,element,node,return,parse,property,sub,element,sub,element,bd,default,key,type,name
BeanDefinitionParserDelegate -> protected Object parseKeyElement(Element keyEle, BeanDefinition bd, String defaultKeyTypeName);1357119417;Parse a key sub-element of a map element.;protected Object parseKeyElement(Element keyEle, BeanDefinition bd, String defaultKeyTypeName) {_		NodeList nl = keyEle.getChildNodes()__		Element subElement = null__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element) {_				_				if (subElement != null) {_					error("<key> element must not contain more than one value sub-element", keyEle)__				}_				else {_					subElement = (Element) node__				}_			}_		}_		return parsePropertySubElement(subElement, bd, defaultKeyTypeName)__	};parse,a,key,sub,element,of,a,map,element;protected,object,parse,key,element,element,key,ele,bean,definition,bd,string,default,key,type,name,node,list,nl,key,ele,get,child,nodes,element,sub,element,null,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,if,sub,element,null,error,key,element,must,not,contain,more,than,one,value,sub,element,key,ele,else,sub,element,element,node,return,parse,property,sub,element,sub,element,bd,default,key,type,name
BeanDefinitionParserDelegate -> protected Object parseKeyElement(Element keyEle, BeanDefinition bd, String defaultKeyTypeName);1367943112;Parse a key sub-element of a map element.;protected Object parseKeyElement(Element keyEle, BeanDefinition bd, String defaultKeyTypeName) {_		NodeList nl = keyEle.getChildNodes()__		Element subElement = null__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element) {_				_				if (subElement != null) {_					error("<key> element must not contain more than one value sub-element", keyEle)__				}_				else {_					subElement = (Element) node__				}_			}_		}_		return parsePropertySubElement(subElement, bd, defaultKeyTypeName)__	};parse,a,key,sub,element,of,a,map,element;protected,object,parse,key,element,element,key,ele,bean,definition,bd,string,default,key,type,name,node,list,nl,key,ele,get,child,nodes,element,sub,element,null,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,if,sub,element,null,error,key,element,must,not,contain,more,than,one,value,sub,element,key,ele,else,sub,element,element,node,return,parse,property,sub,element,sub,element,bd,default,key,type,name
BeanDefinitionParserDelegate -> protected Object parseKeyElement(Element keyEle, BeanDefinition bd, String defaultKeyTypeName);1382030648;Parse a key sub-element of a map element.;protected Object parseKeyElement(Element keyEle, BeanDefinition bd, String defaultKeyTypeName) {_		NodeList nl = keyEle.getChildNodes()__		Element subElement = null__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element) {_				_				if (subElement != null) {_					error("<key> element must not contain more than one value sub-element", keyEle)__				}_				else {_					subElement = (Element) node__				}_			}_		}_		return parsePropertySubElement(subElement, bd, defaultKeyTypeName)__	};parse,a,key,sub,element,of,a,map,element;protected,object,parse,key,element,element,key,ele,bean,definition,bd,string,default,key,type,name,node,list,nl,key,ele,get,child,nodes,element,sub,element,null,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,if,sub,element,null,error,key,element,must,not,contain,more,than,one,value,sub,element,key,ele,else,sub,element,element,node,return,parse,property,sub,element,sub,element,bd,default,key,type,name
BeanDefinitionParserDelegate -> protected Object parseKeyElement(Element keyEle, BeanDefinition bd, String defaultKeyTypeName);1385412762;Parse a key sub-element of a map element.;protected Object parseKeyElement(Element keyEle, BeanDefinition bd, String defaultKeyTypeName) {_		NodeList nl = keyEle.getChildNodes()__		Element subElement = null__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element) {_				_				if (subElement != null) {_					error("<key> element must not contain more than one value sub-element", keyEle)__				}_				else {_					subElement = (Element) node__				}_			}_		}_		return parsePropertySubElement(subElement, bd, defaultKeyTypeName)__	};parse,a,key,sub,element,of,a,map,element;protected,object,parse,key,element,element,key,ele,bean,definition,bd,string,default,key,type,name,node,list,nl,key,ele,get,child,nodes,element,sub,element,null,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,if,sub,element,null,error,key,element,must,not,contain,more,than,one,value,sub,element,key,ele,else,sub,element,element,node,return,parse,property,sub,element,sub,element,bd,default,key,type,name
BeanDefinitionParserDelegate -> protected Object parseKeyElement(Element keyEle, BeanDefinition bd, String defaultKeyTypeName);1410953197;Parse a key sub-element of a map element.;protected Object parseKeyElement(Element keyEle, BeanDefinition bd, String defaultKeyTypeName) {_		NodeList nl = keyEle.getChildNodes()__		Element subElement = null__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element) {_				_				if (subElement != null) {_					error("<key> element must not contain more than one value sub-element", keyEle)__				}_				else {_					subElement = (Element) node__				}_			}_		}_		return parsePropertySubElement(subElement, bd, defaultKeyTypeName)__	};parse,a,key,sub,element,of,a,map,element;protected,object,parse,key,element,element,key,ele,bean,definition,bd,string,default,key,type,name,node,list,nl,key,ele,get,child,nodes,element,sub,element,null,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,if,sub,element,null,error,key,element,must,not,contain,more,than,one,value,sub,element,key,ele,else,sub,element,element,node,return,parse,property,sub,element,sub,element,bd,default,key,type,name
BeanDefinitionParserDelegate -> protected Object parseKeyElement(Element keyEle, BeanDefinition bd, String defaultKeyTypeName);1411599760;Parse a key sub-element of a map element.;protected Object parseKeyElement(Element keyEle, BeanDefinition bd, String defaultKeyTypeName) {_		NodeList nl = keyEle.getChildNodes()__		Element subElement = null__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element) {_				_				if (subElement != null) {_					error("<key> element must not contain more than one value sub-element", keyEle)__				}_				else {_					subElement = (Element) node__				}_			}_		}_		return parsePropertySubElement(subElement, bd, defaultKeyTypeName)__	};parse,a,key,sub,element,of,a,map,element;protected,object,parse,key,element,element,key,ele,bean,definition,bd,string,default,key,type,name,node,list,nl,key,ele,get,child,nodes,element,sub,element,null,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,if,sub,element,null,error,key,element,must,not,contain,more,than,one,value,sub,element,key,ele,else,sub,element,element,node,return,parse,property,sub,element,sub,element,bd,default,key,type,name
BeanDefinitionParserDelegate -> protected Object parseKeyElement(Element keyEle, BeanDefinition bd, String defaultKeyTypeName);1419966315;Parse a key sub-element of a map element.;protected Object parseKeyElement(Element keyEle, BeanDefinition bd, String defaultKeyTypeName) {_		NodeList nl = keyEle.getChildNodes()__		Element subElement = null__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element) {_				_				if (subElement != null) {_					error("<key> element must not contain more than one value sub-element", keyEle)__				}_				else {_					subElement = (Element) node__				}_			}_		}_		return parsePropertySubElement(subElement, bd, defaultKeyTypeName)__	};parse,a,key,sub,element,of,a,map,element;protected,object,parse,key,element,element,key,ele,bean,definition,bd,string,default,key,type,name,node,list,nl,key,ele,get,child,nodes,element,sub,element,null,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,if,sub,element,null,error,key,element,must,not,contain,more,than,one,value,sub,element,key,ele,else,sub,element,element,node,return,parse,property,sub,element,sub,element,bd,default,key,type,name
BeanDefinitionParserDelegate -> protected Object parseKeyElement(Element keyEle, BeanDefinition bd, String defaultKeyTypeName);1431958785;Parse a key sub-element of a map element.;protected Object parseKeyElement(Element keyEle, BeanDefinition bd, String defaultKeyTypeName) {_		NodeList nl = keyEle.getChildNodes()__		Element subElement = null__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element) {_				_				if (subElement != null) {_					error("<key> element must not contain more than one value sub-element", keyEle)__				}_				else {_					subElement = (Element) node__				}_			}_		}_		return parsePropertySubElement(subElement, bd, defaultKeyTypeName)__	};parse,a,key,sub,element,of,a,map,element;protected,object,parse,key,element,element,key,ele,bean,definition,bd,string,default,key,type,name,node,list,nl,key,ele,get,child,nodes,element,sub,element,null,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,if,sub,element,null,error,key,element,must,not,contain,more,than,one,value,sub,element,key,ele,else,sub,element,element,node,return,parse,property,sub,element,sub,element,bd,default,key,type,name
BeanDefinitionParserDelegate -> protected Object parseKeyElement(Element keyEle, BeanDefinition bd, String defaultKeyTypeName);1432135182;Parse a key sub-element of a map element.;protected Object parseKeyElement(Element keyEle, BeanDefinition bd, String defaultKeyTypeName) {_		NodeList nl = keyEle.getChildNodes()__		Element subElement = null__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element) {_				_				if (subElement != null) {_					error("<key> element must not contain more than one value sub-element", keyEle)__				}_				else {_					subElement = (Element) node__				}_			}_		}_		return parsePropertySubElement(subElement, bd, defaultKeyTypeName)__	};parse,a,key,sub,element,of,a,map,element;protected,object,parse,key,element,element,key,ele,bean,definition,bd,string,default,key,type,name,node,list,nl,key,ele,get,child,nodes,element,sub,element,null,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,if,sub,element,null,error,key,element,must,not,contain,more,than,one,value,sub,element,key,ele,else,sub,element,element,node,return,parse,property,sub,element,sub,element,bd,default,key,type,name
BeanDefinitionParserDelegate -> protected Object parseKeyElement(Element keyEle, BeanDefinition bd, String defaultKeyTypeName);1447323728;Parse a key sub-element of a map element.;protected Object parseKeyElement(Element keyEle, BeanDefinition bd, String defaultKeyTypeName) {_		NodeList nl = keyEle.getChildNodes()__		Element subElement = null__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element) {_				_				if (subElement != null) {_					error("<key> element must not contain more than one value sub-element", keyEle)__				}_				else {_					subElement = (Element) node__				}_			}_		}_		return parsePropertySubElement(subElement, bd, defaultKeyTypeName)__	};parse,a,key,sub,element,of,a,map,element;protected,object,parse,key,element,element,key,ele,bean,definition,bd,string,default,key,type,name,node,list,nl,key,ele,get,child,nodes,element,sub,element,null,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,if,sub,element,null,error,key,element,must,not,contain,more,than,one,value,sub,element,key,ele,else,sub,element,element,node,return,parse,property,sub,element,sub,element,bd,default,key,type,name
BeanDefinitionParserDelegate -> protected Object parseKeyElement(Element keyEle, BeanDefinition bd, String defaultKeyTypeName);1467726769;Parse a key sub-element of a map element.;protected Object parseKeyElement(Element keyEle, BeanDefinition bd, String defaultKeyTypeName) {_		NodeList nl = keyEle.getChildNodes()__		Element subElement = null__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element) {_				_				if (subElement != null) {_					error("<key> element must not contain more than one value sub-element", keyEle)__				}_				else {_					subElement = (Element) node__				}_			}_		}_		return parsePropertySubElement(subElement, bd, defaultKeyTypeName)__	};parse,a,key,sub,element,of,a,map,element;protected,object,parse,key,element,element,key,ele,bean,definition,bd,string,default,key,type,name,node,list,nl,key,ele,get,child,nodes,element,sub,element,null,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,if,sub,element,null,error,key,element,must,not,contain,more,than,one,value,sub,element,key,ele,else,sub,element,element,node,return,parse,property,sub,element,sub,element,bd,default,key,type,name
BeanDefinitionParserDelegate -> protected Object parseKeyElement(Element keyEle, BeanDefinition bd, String defaultKeyTypeName);1467730834;Parse a key sub-element of a map element.;protected Object parseKeyElement(Element keyEle, BeanDefinition bd, String defaultKeyTypeName) {_		NodeList nl = keyEle.getChildNodes()__		Element subElement = null__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element) {_				_				if (subElement != null) {_					error("<key> element must not contain more than one value sub-element", keyEle)__				}_				else {_					subElement = (Element) node__				}_			}_		}_		return parsePropertySubElement(subElement, bd, defaultKeyTypeName)__	};parse,a,key,sub,element,of,a,map,element;protected,object,parse,key,element,element,key,ele,bean,definition,bd,string,default,key,type,name,node,list,nl,key,ele,get,child,nodes,element,sub,element,null,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,if,sub,element,null,error,key,element,must,not,contain,more,than,one,value,sub,element,key,ele,else,sub,element,element,node,return,parse,property,sub,element,sub,element,bd,default,key,type,name
BeanDefinitionParserDelegate -> protected Object parseKeyElement(Element keyEle, BeanDefinition bd, String defaultKeyTypeName);1467744603;Parse a key sub-element of a map element.;protected Object parseKeyElement(Element keyEle, BeanDefinition bd, String defaultKeyTypeName) {_		NodeList nl = keyEle.getChildNodes()__		Element subElement = null__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element) {_				_				if (subElement != null) {_					error("<key> element must not contain more than one value sub-element", keyEle)__				}_				else {_					subElement = (Element) node__				}_			}_		}_		return parsePropertySubElement(subElement, bd, defaultKeyTypeName)__	};parse,a,key,sub,element,of,a,map,element;protected,object,parse,key,element,element,key,ele,bean,definition,bd,string,default,key,type,name,node,list,nl,key,ele,get,child,nodes,element,sub,element,null,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,if,sub,element,null,error,key,element,must,not,contain,more,than,one,value,sub,element,key,ele,else,sub,element,element,node,return,parse,property,sub,element,sub,element,bd,default,key,type,name
BeanDefinitionParserDelegate -> protected Object parseKeyElement(Element keyEle, BeanDefinition bd, String defaultKeyTypeName);1487245676;Parse a key sub-element of a map element.;protected Object parseKeyElement(Element keyEle, BeanDefinition bd, String defaultKeyTypeName) {_		NodeList nl = keyEle.getChildNodes()__		Element subElement = null__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element) {_				_				if (subElement != null) {_					error("<key> element must not contain more than one value sub-element", keyEle)__				}_				else {_					subElement = (Element) node__				}_			}_		}_		return parsePropertySubElement(subElement, bd, defaultKeyTypeName)__	};parse,a,key,sub,element,of,a,map,element;protected,object,parse,key,element,element,key,ele,bean,definition,bd,string,default,key,type,name,node,list,nl,key,ele,get,child,nodes,element,sub,element,null,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,if,sub,element,null,error,key,element,must,not,contain,more,than,one,value,sub,element,key,ele,else,sub,element,element,node,return,parse,property,sub,element,sub,element,bd,default,key,type,name
BeanDefinitionParserDelegate -> protected Object parseKeyElement(Element keyEle, BeanDefinition bd, String defaultKeyTypeName);1487255851;Parse a key sub-element of a map element.;protected Object parseKeyElement(Element keyEle, BeanDefinition bd, String defaultKeyTypeName) {_		NodeList nl = keyEle.getChildNodes()__		Element subElement = null__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element) {_				_				if (subElement != null) {_					error("<key> element must not contain more than one value sub-element", keyEle)__				}_				else {_					subElement = (Element) node__				}_			}_		}_		return parsePropertySubElement(subElement, bd, defaultKeyTypeName)__	};parse,a,key,sub,element,of,a,map,element;protected,object,parse,key,element,element,key,ele,bean,definition,bd,string,default,key,type,name,node,list,nl,key,ele,get,child,nodes,element,sub,element,null,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,if,sub,element,null,error,key,element,must,not,contain,more,than,one,value,sub,element,key,ele,else,sub,element,element,node,return,parse,property,sub,element,sub,element,bd,default,key,type,name
BeanDefinitionParserDelegate -> protected Object parseKeyElement(Element keyEle, BeanDefinition bd, String defaultKeyTypeName);1494586217;Parse a key sub-element of a map element.;protected Object parseKeyElement(Element keyEle, BeanDefinition bd, String defaultKeyTypeName) {_		NodeList nl = keyEle.getChildNodes()__		Element subElement = null__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element) {_				_				if (subElement != null) {_					error("<key> element must not contain more than one value sub-element", keyEle)__				}_				else {_					subElement = (Element) node__				}_			}_		}_		return parsePropertySubElement(subElement, bd, defaultKeyTypeName)__	};parse,a,key,sub,element,of,a,map,element;protected,object,parse,key,element,element,key,ele,bean,definition,bd,string,default,key,type,name,node,list,nl,key,ele,get,child,nodes,element,sub,element,null,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,if,sub,element,null,error,key,element,must,not,contain,more,than,one,value,sub,element,key,ele,else,sub,element,element,node,return,parse,property,sub,element,sub,element,bd,default,key,type,name
BeanDefinitionParserDelegate -> protected Object parseKeyElement(Element keyEle, BeanDefinition bd, String defaultKeyTypeName);1495868221;Parse a key sub-element of a map element.;protected Object parseKeyElement(Element keyEle, BeanDefinition bd, String defaultKeyTypeName) {_		NodeList nl = keyEle.getChildNodes()__		Element subElement = null__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element) {_				_				if (subElement != null) {_					error("<key> element must not contain more than one value sub-element", keyEle)__				}_				else {_					subElement = (Element) node__				}_			}_		}_		return parsePropertySubElement(subElement, bd, defaultKeyTypeName)__	};parse,a,key,sub,element,of,a,map,element;protected,object,parse,key,element,element,key,ele,bean,definition,bd,string,default,key,type,name,node,list,nl,key,ele,get,child,nodes,element,sub,element,null,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,if,sub,element,null,error,key,element,must,not,contain,more,than,one,value,sub,element,key,ele,else,sub,element,element,node,return,parse,property,sub,element,sub,element,bd,default,key,type,name
BeanDefinitionParserDelegate -> protected Object parseKeyElement(Element keyEle, BeanDefinition bd, String defaultKeyTypeName);1496259743;Parse a key sub-element of a map element.;protected Object parseKeyElement(Element keyEle, BeanDefinition bd, String defaultKeyTypeName) {_		NodeList nl = keyEle.getChildNodes()__		Element subElement = null__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (node instanceof Element) {_				_				if (subElement != null) {_					error("<key> element must not contain more than one value sub-element", keyEle)__				}_				else {_					subElement = (Element) node__				}_			}_		}_		return parsePropertySubElement(subElement, bd, defaultKeyTypeName)__	};parse,a,key,sub,element,of,a,map,element;protected,object,parse,key,element,element,key,ele,bean,definition,bd,string,default,key,type,name,node,list,nl,key,ele,get,child,nodes,element,sub,element,null,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,if,sub,element,null,error,key,element,must,not,contain,more,than,one,value,sub,element,key,ele,else,sub,element,element,node,return,parse,property,sub,element,sub,element,bd,default,key,type,name
BeanDefinitionParserDelegate -> @Nullable 	public DocumentDefaultsDefinition getDefaults();1495868221;Return the defaults definition object, or {@code null} if the_defaults have been initialized yet.;@Nullable_	public DocumentDefaultsDefinition getDefaults() {_		return this.defaults__	};return,the,defaults,definition,object,or,code,null,if,the,defaults,have,been,initialized,yet;nullable,public,document,defaults,definition,get,defaults,return,this,defaults
BeanDefinitionParserDelegate -> @Nullable 	public DocumentDefaultsDefinition getDefaults();1496259743;Return the defaults definition object, or {@code null} if the_defaults have been initialized yet.;@Nullable_	public DocumentDefaultsDefinition getDefaults() {_		return this.defaults__	};return,the,defaults,definition,object,or,code,null,if,the,defaults,have,been,initialized,yet;nullable,public,document,defaults,definition,get,defaults,return,this,defaults
BeanDefinitionParserDelegate -> protected TypedStringValue buildTypedStringValue(String value, String targetTypeName) 			throws ClassNotFoundException;1328020251;Build a typed String value Object for the given raw value._@see org.springframework.beans.factory.config.TypedStringValue;protected TypedStringValue buildTypedStringValue(String value, String targetTypeName)_			throws ClassNotFoundException {__		ClassLoader classLoader = this.readerContext.getBeanClassLoader()__		TypedStringValue typedValue__		if (!StringUtils.hasText(targetTypeName)) {_			typedValue = new TypedStringValue(value)__		}_		else if (classLoader != null) {_			Class<?> targetType = ClassUtils.forName(targetTypeName, classLoader)__			typedValue = new TypedStringValue(value, targetType)__		}_		else {_			typedValue = new TypedStringValue(value, targetTypeName)__		}_		return typedValue__	};build,a,typed,string,value,object,for,the,given,raw,value,see,org,springframework,beans,factory,config,typed,string,value;protected,typed,string,value,build,typed,string,value,string,value,string,target,type,name,throws,class,not,found,exception,class,loader,class,loader,this,reader,context,get,bean,class,loader,typed,string,value,typed,value,if,string,utils,has,text,target,type,name,typed,value,new,typed,string,value,value,else,if,class,loader,null,class,target,type,class,utils,for,name,target,type,name,class,loader,typed,value,new,typed,string,value,value,target,type,else,typed,value,new,typed,string,value,value,target,type,name,return,typed,value
BeanDefinitionParserDelegate -> protected TypedStringValue buildTypedStringValue(String value, String targetTypeName) 			throws ClassNotFoundException;1335774711;Build a typed String value Object for the given raw value._@see org.springframework.beans.factory.config.TypedStringValue;protected TypedStringValue buildTypedStringValue(String value, String targetTypeName)_			throws ClassNotFoundException {__		ClassLoader classLoader = this.readerContext.getBeanClassLoader()__		TypedStringValue typedValue__		if (!StringUtils.hasText(targetTypeName)) {_			typedValue = new TypedStringValue(value)__		}_		else if (classLoader != null) {_			Class<?> targetType = ClassUtils.forName(targetTypeName, classLoader)__			typedValue = new TypedStringValue(value, targetType)__		}_		else {_			typedValue = new TypedStringValue(value, targetTypeName)__		}_		return typedValue__	};build,a,typed,string,value,object,for,the,given,raw,value,see,org,springframework,beans,factory,config,typed,string,value;protected,typed,string,value,build,typed,string,value,string,value,string,target,type,name,throws,class,not,found,exception,class,loader,class,loader,this,reader,context,get,bean,class,loader,typed,string,value,typed,value,if,string,utils,has,text,target,type,name,typed,value,new,typed,string,value,value,else,if,class,loader,null,class,target,type,class,utils,for,name,target,type,name,class,loader,typed,value,new,typed,string,value,value,target,type,else,typed,value,new,typed,string,value,value,target,type,name,return,typed,value
BeanDefinitionParserDelegate -> protected TypedStringValue buildTypedStringValue(String value, String targetTypeName) 			throws ClassNotFoundException;1337341719;Build a typed String value Object for the given raw value._@see org.springframework.beans.factory.config.TypedStringValue;protected TypedStringValue buildTypedStringValue(String value, String targetTypeName)_			throws ClassNotFoundException {__		ClassLoader classLoader = this.readerContext.getBeanClassLoader()__		TypedStringValue typedValue__		if (!StringUtils.hasText(targetTypeName)) {_			typedValue = new TypedStringValue(value)__		}_		else if (classLoader != null) {_			Class<?> targetType = ClassUtils.forName(targetTypeName, classLoader)__			typedValue = new TypedStringValue(value, targetType)__		}_		else {_			typedValue = new TypedStringValue(value, targetTypeName)__		}_		return typedValue__	};build,a,typed,string,value,object,for,the,given,raw,value,see,org,springframework,beans,factory,config,typed,string,value;protected,typed,string,value,build,typed,string,value,string,value,string,target,type,name,throws,class,not,found,exception,class,loader,class,loader,this,reader,context,get,bean,class,loader,typed,string,value,typed,value,if,string,utils,has,text,target,type,name,typed,value,new,typed,string,value,value,else,if,class,loader,null,class,target,type,class,utils,for,name,target,type,name,class,loader,typed,value,new,typed,string,value,value,target,type,else,typed,value,new,typed,string,value,value,target,type,name,return,typed,value
BeanDefinitionParserDelegate -> protected TypedStringValue buildTypedStringValue(String value, String targetTypeName) 			throws ClassNotFoundException;1351392612;Build a typed String value Object for the given raw value._@see org.springframework.beans.factory.config.TypedStringValue;protected TypedStringValue buildTypedStringValue(String value, String targetTypeName)_			throws ClassNotFoundException {__		ClassLoader classLoader = this.readerContext.getBeanClassLoader()__		TypedStringValue typedValue__		if (!StringUtils.hasText(targetTypeName)) {_			typedValue = new TypedStringValue(value)__		}_		else if (classLoader != null) {_			Class<?> targetType = ClassUtils.forName(targetTypeName, classLoader)__			typedValue = new TypedStringValue(value, targetType)__		}_		else {_			typedValue = new TypedStringValue(value, targetTypeName)__		}_		return typedValue__	};build,a,typed,string,value,object,for,the,given,raw,value,see,org,springframework,beans,factory,config,typed,string,value;protected,typed,string,value,build,typed,string,value,string,value,string,target,type,name,throws,class,not,found,exception,class,loader,class,loader,this,reader,context,get,bean,class,loader,typed,string,value,typed,value,if,string,utils,has,text,target,type,name,typed,value,new,typed,string,value,value,else,if,class,loader,null,class,target,type,class,utils,for,name,target,type,name,class,loader,typed,value,new,typed,string,value,value,target,type,else,typed,value,new,typed,string,value,value,target,type,name,return,typed,value
BeanDefinitionParserDelegate -> protected TypedStringValue buildTypedStringValue(String value, String targetTypeName) 			throws ClassNotFoundException;1351696936;Build a typed String value Object for the given raw value._@see org.springframework.beans.factory.config.TypedStringValue;protected TypedStringValue buildTypedStringValue(String value, String targetTypeName)_			throws ClassNotFoundException {__		ClassLoader classLoader = this.readerContext.getBeanClassLoader()__		TypedStringValue typedValue__		if (!StringUtils.hasText(targetTypeName)) {_			typedValue = new TypedStringValue(value)__		}_		else if (classLoader != null) {_			Class<?> targetType = ClassUtils.forName(targetTypeName, classLoader)__			typedValue = new TypedStringValue(value, targetType)__		}_		else {_			typedValue = new TypedStringValue(value, targetTypeName)__		}_		return typedValue__	};build,a,typed,string,value,object,for,the,given,raw,value,see,org,springframework,beans,factory,config,typed,string,value;protected,typed,string,value,build,typed,string,value,string,value,string,target,type,name,throws,class,not,found,exception,class,loader,class,loader,this,reader,context,get,bean,class,loader,typed,string,value,typed,value,if,string,utils,has,text,target,type,name,typed,value,new,typed,string,value,value,else,if,class,loader,null,class,target,type,class,utils,for,name,target,type,name,class,loader,typed,value,new,typed,string,value,value,target,type,else,typed,value,new,typed,string,value,value,target,type,name,return,typed,value
BeanDefinitionParserDelegate -> protected TypedStringValue buildTypedStringValue(String value, String targetTypeName) 			throws ClassNotFoundException;1356735495;Build a typed String value Object for the given raw value._@see org.springframework.beans.factory.config.TypedStringValue;protected TypedStringValue buildTypedStringValue(String value, String targetTypeName)_			throws ClassNotFoundException {__		ClassLoader classLoader = this.readerContext.getBeanClassLoader()__		TypedStringValue typedValue__		if (!StringUtils.hasText(targetTypeName)) {_			typedValue = new TypedStringValue(value)__		}_		else if (classLoader != null) {_			Class<?> targetType = ClassUtils.forName(targetTypeName, classLoader)__			typedValue = new TypedStringValue(value, targetType)__		}_		else {_			typedValue = new TypedStringValue(value, targetTypeName)__		}_		return typedValue__	};build,a,typed,string,value,object,for,the,given,raw,value,see,org,springframework,beans,factory,config,typed,string,value;protected,typed,string,value,build,typed,string,value,string,value,string,target,type,name,throws,class,not,found,exception,class,loader,class,loader,this,reader,context,get,bean,class,loader,typed,string,value,typed,value,if,string,utils,has,text,target,type,name,typed,value,new,typed,string,value,value,else,if,class,loader,null,class,target,type,class,utils,for,name,target,type,name,class,loader,typed,value,new,typed,string,value,value,target,type,else,typed,value,new,typed,string,value,value,target,type,name,return,typed,value
BeanDefinitionParserDelegate -> protected TypedStringValue buildTypedStringValue(String value, String targetTypeName) 			throws ClassNotFoundException;1357119417;Build a typed String value Object for the given raw value._@see org.springframework.beans.factory.config.TypedStringValue;protected TypedStringValue buildTypedStringValue(String value, String targetTypeName)_			throws ClassNotFoundException {__		ClassLoader classLoader = this.readerContext.getBeanClassLoader()__		TypedStringValue typedValue__		if (!StringUtils.hasText(targetTypeName)) {_			typedValue = new TypedStringValue(value)__		}_		else if (classLoader != null) {_			Class<?> targetType = ClassUtils.forName(targetTypeName, classLoader)__			typedValue = new TypedStringValue(value, targetType)__		}_		else {_			typedValue = new TypedStringValue(value, targetTypeName)__		}_		return typedValue__	};build,a,typed,string,value,object,for,the,given,raw,value,see,org,springframework,beans,factory,config,typed,string,value;protected,typed,string,value,build,typed,string,value,string,value,string,target,type,name,throws,class,not,found,exception,class,loader,class,loader,this,reader,context,get,bean,class,loader,typed,string,value,typed,value,if,string,utils,has,text,target,type,name,typed,value,new,typed,string,value,value,else,if,class,loader,null,class,target,type,class,utils,for,name,target,type,name,class,loader,typed,value,new,typed,string,value,value,target,type,else,typed,value,new,typed,string,value,value,target,type,name,return,typed,value
BeanDefinitionParserDelegate -> protected TypedStringValue buildTypedStringValue(String value, String targetTypeName) 			throws ClassNotFoundException;1367943112;Build a typed String value Object for the given raw value._@see org.springframework.beans.factory.config.TypedStringValue;protected TypedStringValue buildTypedStringValue(String value, String targetTypeName)_			throws ClassNotFoundException {__		ClassLoader classLoader = this.readerContext.getBeanClassLoader()__		TypedStringValue typedValue__		if (!StringUtils.hasText(targetTypeName)) {_			typedValue = new TypedStringValue(value)__		}_		else if (classLoader != null) {_			Class<?> targetType = ClassUtils.forName(targetTypeName, classLoader)__			typedValue = new TypedStringValue(value, targetType)__		}_		else {_			typedValue = new TypedStringValue(value, targetTypeName)__		}_		return typedValue__	};build,a,typed,string,value,object,for,the,given,raw,value,see,org,springframework,beans,factory,config,typed,string,value;protected,typed,string,value,build,typed,string,value,string,value,string,target,type,name,throws,class,not,found,exception,class,loader,class,loader,this,reader,context,get,bean,class,loader,typed,string,value,typed,value,if,string,utils,has,text,target,type,name,typed,value,new,typed,string,value,value,else,if,class,loader,null,class,target,type,class,utils,for,name,target,type,name,class,loader,typed,value,new,typed,string,value,value,target,type,else,typed,value,new,typed,string,value,value,target,type,name,return,typed,value
BeanDefinitionParserDelegate -> protected TypedStringValue buildTypedStringValue(String value, String targetTypeName) 			throws ClassNotFoundException;1382030648;Build a typed String value Object for the given raw value._@see org.springframework.beans.factory.config.TypedStringValue;protected TypedStringValue buildTypedStringValue(String value, String targetTypeName)_			throws ClassNotFoundException {__		ClassLoader classLoader = this.readerContext.getBeanClassLoader()__		TypedStringValue typedValue__		if (!StringUtils.hasText(targetTypeName)) {_			typedValue = new TypedStringValue(value)__		}_		else if (classLoader != null) {_			Class<?> targetType = ClassUtils.forName(targetTypeName, classLoader)__			typedValue = new TypedStringValue(value, targetType)__		}_		else {_			typedValue = new TypedStringValue(value, targetTypeName)__		}_		return typedValue__	};build,a,typed,string,value,object,for,the,given,raw,value,see,org,springframework,beans,factory,config,typed,string,value;protected,typed,string,value,build,typed,string,value,string,value,string,target,type,name,throws,class,not,found,exception,class,loader,class,loader,this,reader,context,get,bean,class,loader,typed,string,value,typed,value,if,string,utils,has,text,target,type,name,typed,value,new,typed,string,value,value,else,if,class,loader,null,class,target,type,class,utils,for,name,target,type,name,class,loader,typed,value,new,typed,string,value,value,target,type,else,typed,value,new,typed,string,value,value,target,type,name,return,typed,value
BeanDefinitionParserDelegate -> protected TypedStringValue buildTypedStringValue(String value, String targetTypeName) 			throws ClassNotFoundException;1385412762;Build a typed String value Object for the given raw value._@see org.springframework.beans.factory.config.TypedStringValue;protected TypedStringValue buildTypedStringValue(String value, String targetTypeName)_			throws ClassNotFoundException {__		ClassLoader classLoader = this.readerContext.getBeanClassLoader()__		TypedStringValue typedValue__		if (!StringUtils.hasText(targetTypeName)) {_			typedValue = new TypedStringValue(value)__		}_		else if (classLoader != null) {_			Class<?> targetType = ClassUtils.forName(targetTypeName, classLoader)__			typedValue = new TypedStringValue(value, targetType)__		}_		else {_			typedValue = new TypedStringValue(value, targetTypeName)__		}_		return typedValue__	};build,a,typed,string,value,object,for,the,given,raw,value,see,org,springframework,beans,factory,config,typed,string,value;protected,typed,string,value,build,typed,string,value,string,value,string,target,type,name,throws,class,not,found,exception,class,loader,class,loader,this,reader,context,get,bean,class,loader,typed,string,value,typed,value,if,string,utils,has,text,target,type,name,typed,value,new,typed,string,value,value,else,if,class,loader,null,class,target,type,class,utils,for,name,target,type,name,class,loader,typed,value,new,typed,string,value,value,target,type,else,typed,value,new,typed,string,value,value,target,type,name,return,typed,value
BeanDefinitionParserDelegate -> protected TypedStringValue buildTypedStringValue(String value, String targetTypeName) 			throws ClassNotFoundException;1410953197;Build a typed String value Object for the given raw value._@see org.springframework.beans.factory.config.TypedStringValue;protected TypedStringValue buildTypedStringValue(String value, String targetTypeName)_			throws ClassNotFoundException {__		ClassLoader classLoader = this.readerContext.getBeanClassLoader()__		TypedStringValue typedValue__		if (!StringUtils.hasText(targetTypeName)) {_			typedValue = new TypedStringValue(value)__		}_		else if (classLoader != null) {_			Class<?> targetType = ClassUtils.forName(targetTypeName, classLoader)__			typedValue = new TypedStringValue(value, targetType)__		}_		else {_			typedValue = new TypedStringValue(value, targetTypeName)__		}_		return typedValue__	};build,a,typed,string,value,object,for,the,given,raw,value,see,org,springframework,beans,factory,config,typed,string,value;protected,typed,string,value,build,typed,string,value,string,value,string,target,type,name,throws,class,not,found,exception,class,loader,class,loader,this,reader,context,get,bean,class,loader,typed,string,value,typed,value,if,string,utils,has,text,target,type,name,typed,value,new,typed,string,value,value,else,if,class,loader,null,class,target,type,class,utils,for,name,target,type,name,class,loader,typed,value,new,typed,string,value,value,target,type,else,typed,value,new,typed,string,value,value,target,type,name,return,typed,value
BeanDefinitionParserDelegate -> protected TypedStringValue buildTypedStringValue(String value, String targetTypeName) 			throws ClassNotFoundException;1411599760;Build a typed String value Object for the given raw value._@see org.springframework.beans.factory.config.TypedStringValue;protected TypedStringValue buildTypedStringValue(String value, String targetTypeName)_			throws ClassNotFoundException {__		ClassLoader classLoader = this.readerContext.getBeanClassLoader()__		TypedStringValue typedValue__		if (!StringUtils.hasText(targetTypeName)) {_			typedValue = new TypedStringValue(value)__		}_		else if (classLoader != null) {_			Class<?> targetType = ClassUtils.forName(targetTypeName, classLoader)__			typedValue = new TypedStringValue(value, targetType)__		}_		else {_			typedValue = new TypedStringValue(value, targetTypeName)__		}_		return typedValue__	};build,a,typed,string,value,object,for,the,given,raw,value,see,org,springframework,beans,factory,config,typed,string,value;protected,typed,string,value,build,typed,string,value,string,value,string,target,type,name,throws,class,not,found,exception,class,loader,class,loader,this,reader,context,get,bean,class,loader,typed,string,value,typed,value,if,string,utils,has,text,target,type,name,typed,value,new,typed,string,value,value,else,if,class,loader,null,class,target,type,class,utils,for,name,target,type,name,class,loader,typed,value,new,typed,string,value,value,target,type,else,typed,value,new,typed,string,value,value,target,type,name,return,typed,value
BeanDefinitionParserDelegate -> protected TypedStringValue buildTypedStringValue(String value, String targetTypeName) 			throws ClassNotFoundException;1419966315;Build a typed String value Object for the given raw value._@see org.springframework.beans.factory.config.TypedStringValue;protected TypedStringValue buildTypedStringValue(String value, String targetTypeName)_			throws ClassNotFoundException {__		ClassLoader classLoader = this.readerContext.getBeanClassLoader()__		TypedStringValue typedValue__		if (!StringUtils.hasText(targetTypeName)) {_			typedValue = new TypedStringValue(value)__		}_		else if (classLoader != null) {_			Class<?> targetType = ClassUtils.forName(targetTypeName, classLoader)__			typedValue = new TypedStringValue(value, targetType)__		}_		else {_			typedValue = new TypedStringValue(value, targetTypeName)__		}_		return typedValue__	};build,a,typed,string,value,object,for,the,given,raw,value,see,org,springframework,beans,factory,config,typed,string,value;protected,typed,string,value,build,typed,string,value,string,value,string,target,type,name,throws,class,not,found,exception,class,loader,class,loader,this,reader,context,get,bean,class,loader,typed,string,value,typed,value,if,string,utils,has,text,target,type,name,typed,value,new,typed,string,value,value,else,if,class,loader,null,class,target,type,class,utils,for,name,target,type,name,class,loader,typed,value,new,typed,string,value,value,target,type,else,typed,value,new,typed,string,value,value,target,type,name,return,typed,value
BeanDefinitionParserDelegate -> protected TypedStringValue buildTypedStringValue(String value, String targetTypeName) 			throws ClassNotFoundException;1431958785;Build a typed String value Object for the given raw value._@see org.springframework.beans.factory.config.TypedStringValue;protected TypedStringValue buildTypedStringValue(String value, String targetTypeName)_			throws ClassNotFoundException {__		ClassLoader classLoader = this.readerContext.getBeanClassLoader()__		TypedStringValue typedValue__		if (!StringUtils.hasText(targetTypeName)) {_			typedValue = new TypedStringValue(value)__		}_		else if (classLoader != null) {_			Class<?> targetType = ClassUtils.forName(targetTypeName, classLoader)__			typedValue = new TypedStringValue(value, targetType)__		}_		else {_			typedValue = new TypedStringValue(value, targetTypeName)__		}_		return typedValue__	};build,a,typed,string,value,object,for,the,given,raw,value,see,org,springframework,beans,factory,config,typed,string,value;protected,typed,string,value,build,typed,string,value,string,value,string,target,type,name,throws,class,not,found,exception,class,loader,class,loader,this,reader,context,get,bean,class,loader,typed,string,value,typed,value,if,string,utils,has,text,target,type,name,typed,value,new,typed,string,value,value,else,if,class,loader,null,class,target,type,class,utils,for,name,target,type,name,class,loader,typed,value,new,typed,string,value,value,target,type,else,typed,value,new,typed,string,value,value,target,type,name,return,typed,value
BeanDefinitionParserDelegate -> protected TypedStringValue buildTypedStringValue(String value, String targetTypeName) 			throws ClassNotFoundException;1432135182;Build a typed String value Object for the given raw value._@see org.springframework.beans.factory.config.TypedStringValue;protected TypedStringValue buildTypedStringValue(String value, String targetTypeName)_			throws ClassNotFoundException {__		ClassLoader classLoader = this.readerContext.getBeanClassLoader()__		TypedStringValue typedValue__		if (!StringUtils.hasText(targetTypeName)) {_			typedValue = new TypedStringValue(value)__		}_		else if (classLoader != null) {_			Class<?> targetType = ClassUtils.forName(targetTypeName, classLoader)__			typedValue = new TypedStringValue(value, targetType)__		}_		else {_			typedValue = new TypedStringValue(value, targetTypeName)__		}_		return typedValue__	};build,a,typed,string,value,object,for,the,given,raw,value,see,org,springframework,beans,factory,config,typed,string,value;protected,typed,string,value,build,typed,string,value,string,value,string,target,type,name,throws,class,not,found,exception,class,loader,class,loader,this,reader,context,get,bean,class,loader,typed,string,value,typed,value,if,string,utils,has,text,target,type,name,typed,value,new,typed,string,value,value,else,if,class,loader,null,class,target,type,class,utils,for,name,target,type,name,class,loader,typed,value,new,typed,string,value,value,target,type,else,typed,value,new,typed,string,value,value,target,type,name,return,typed,value
BeanDefinitionParserDelegate -> protected TypedStringValue buildTypedStringValue(String value, String targetTypeName) 			throws ClassNotFoundException;1447323728;Build a typed String value Object for the given raw value._@see org.springframework.beans.factory.config.TypedStringValue;protected TypedStringValue buildTypedStringValue(String value, String targetTypeName)_			throws ClassNotFoundException {__		ClassLoader classLoader = this.readerContext.getBeanClassLoader()__		TypedStringValue typedValue__		if (!StringUtils.hasText(targetTypeName)) {_			typedValue = new TypedStringValue(value)__		}_		else if (classLoader != null) {_			Class<?> targetType = ClassUtils.forName(targetTypeName, classLoader)__			typedValue = new TypedStringValue(value, targetType)__		}_		else {_			typedValue = new TypedStringValue(value, targetTypeName)__		}_		return typedValue__	};build,a,typed,string,value,object,for,the,given,raw,value,see,org,springframework,beans,factory,config,typed,string,value;protected,typed,string,value,build,typed,string,value,string,value,string,target,type,name,throws,class,not,found,exception,class,loader,class,loader,this,reader,context,get,bean,class,loader,typed,string,value,typed,value,if,string,utils,has,text,target,type,name,typed,value,new,typed,string,value,value,else,if,class,loader,null,class,target,type,class,utils,for,name,target,type,name,class,loader,typed,value,new,typed,string,value,value,target,type,else,typed,value,new,typed,string,value,value,target,type,name,return,typed,value
BeanDefinitionParserDelegate -> protected TypedStringValue buildTypedStringValue(String value, String targetTypeName) 			throws ClassNotFoundException;1467726769;Build a typed String value Object for the given raw value._@see org.springframework.beans.factory.config.TypedStringValue;protected TypedStringValue buildTypedStringValue(String value, String targetTypeName)_			throws ClassNotFoundException {__		ClassLoader classLoader = this.readerContext.getBeanClassLoader()__		TypedStringValue typedValue__		if (!StringUtils.hasText(targetTypeName)) {_			typedValue = new TypedStringValue(value)__		}_		else if (classLoader != null) {_			Class<?> targetType = ClassUtils.forName(targetTypeName, classLoader)__			typedValue = new TypedStringValue(value, targetType)__		}_		else {_			typedValue = new TypedStringValue(value, targetTypeName)__		}_		return typedValue__	};build,a,typed,string,value,object,for,the,given,raw,value,see,org,springframework,beans,factory,config,typed,string,value;protected,typed,string,value,build,typed,string,value,string,value,string,target,type,name,throws,class,not,found,exception,class,loader,class,loader,this,reader,context,get,bean,class,loader,typed,string,value,typed,value,if,string,utils,has,text,target,type,name,typed,value,new,typed,string,value,value,else,if,class,loader,null,class,target,type,class,utils,for,name,target,type,name,class,loader,typed,value,new,typed,string,value,value,target,type,else,typed,value,new,typed,string,value,value,target,type,name,return,typed,value
BeanDefinitionParserDelegate -> protected TypedStringValue buildTypedStringValue(String value, String targetTypeName) 			throws ClassNotFoundException;1467730834;Build a typed String value Object for the given raw value._@see org.springframework.beans.factory.config.TypedStringValue;protected TypedStringValue buildTypedStringValue(String value, String targetTypeName)_			throws ClassNotFoundException {__		ClassLoader classLoader = this.readerContext.getBeanClassLoader()__		TypedStringValue typedValue__		if (!StringUtils.hasText(targetTypeName)) {_			typedValue = new TypedStringValue(value)__		}_		else if (classLoader != null) {_			Class<?> targetType = ClassUtils.forName(targetTypeName, classLoader)__			typedValue = new TypedStringValue(value, targetType)__		}_		else {_			typedValue = new TypedStringValue(value, targetTypeName)__		}_		return typedValue__	};build,a,typed,string,value,object,for,the,given,raw,value,see,org,springframework,beans,factory,config,typed,string,value;protected,typed,string,value,build,typed,string,value,string,value,string,target,type,name,throws,class,not,found,exception,class,loader,class,loader,this,reader,context,get,bean,class,loader,typed,string,value,typed,value,if,string,utils,has,text,target,type,name,typed,value,new,typed,string,value,value,else,if,class,loader,null,class,target,type,class,utils,for,name,target,type,name,class,loader,typed,value,new,typed,string,value,value,target,type,else,typed,value,new,typed,string,value,value,target,type,name,return,typed,value
BeanDefinitionParserDelegate -> protected TypedStringValue buildTypedStringValue(String value, String targetTypeName) 			throws ClassNotFoundException;1467744603;Build a typed String value Object for the given raw value._@see org.springframework.beans.factory.config.TypedStringValue;protected TypedStringValue buildTypedStringValue(String value, String targetTypeName)_			throws ClassNotFoundException {__		ClassLoader classLoader = this.readerContext.getBeanClassLoader()__		TypedStringValue typedValue__		if (!StringUtils.hasText(targetTypeName)) {_			typedValue = new TypedStringValue(value)__		}_		else if (classLoader != null) {_			Class<?> targetType = ClassUtils.forName(targetTypeName, classLoader)__			typedValue = new TypedStringValue(value, targetType)__		}_		else {_			typedValue = new TypedStringValue(value, targetTypeName)__		}_		return typedValue__	};build,a,typed,string,value,object,for,the,given,raw,value,see,org,springframework,beans,factory,config,typed,string,value;protected,typed,string,value,build,typed,string,value,string,value,string,target,type,name,throws,class,not,found,exception,class,loader,class,loader,this,reader,context,get,bean,class,loader,typed,string,value,typed,value,if,string,utils,has,text,target,type,name,typed,value,new,typed,string,value,value,else,if,class,loader,null,class,target,type,class,utils,for,name,target,type,name,class,loader,typed,value,new,typed,string,value,value,target,type,else,typed,value,new,typed,string,value,value,target,type,name,return,typed,value
BeanDefinitionParserDelegate -> protected TypedStringValue buildTypedStringValue(String value, String targetTypeName) 			throws ClassNotFoundException;1487245676;Build a typed String value Object for the given raw value._@see org.springframework.beans.factory.config.TypedStringValue;protected TypedStringValue buildTypedStringValue(String value, String targetTypeName)_			throws ClassNotFoundException {__		ClassLoader classLoader = this.readerContext.getBeanClassLoader()__		TypedStringValue typedValue__		if (!StringUtils.hasText(targetTypeName)) {_			typedValue = new TypedStringValue(value)__		}_		else if (classLoader != null) {_			Class<?> targetType = ClassUtils.forName(targetTypeName, classLoader)__			typedValue = new TypedStringValue(value, targetType)__		}_		else {_			typedValue = new TypedStringValue(value, targetTypeName)__		}_		return typedValue__	};build,a,typed,string,value,object,for,the,given,raw,value,see,org,springframework,beans,factory,config,typed,string,value;protected,typed,string,value,build,typed,string,value,string,value,string,target,type,name,throws,class,not,found,exception,class,loader,class,loader,this,reader,context,get,bean,class,loader,typed,string,value,typed,value,if,string,utils,has,text,target,type,name,typed,value,new,typed,string,value,value,else,if,class,loader,null,class,target,type,class,utils,for,name,target,type,name,class,loader,typed,value,new,typed,string,value,value,target,type,else,typed,value,new,typed,string,value,value,target,type,name,return,typed,value
BeanDefinitionParserDelegate -> protected TypedStringValue buildTypedStringValue(String value, String targetTypeName) 			throws ClassNotFoundException;1487255851;Build a typed String value Object for the given raw value._@see org.springframework.beans.factory.config.TypedStringValue;protected TypedStringValue buildTypedStringValue(String value, String targetTypeName)_			throws ClassNotFoundException {__		ClassLoader classLoader = this.readerContext.getBeanClassLoader()__		TypedStringValue typedValue__		if (!StringUtils.hasText(targetTypeName)) {_			typedValue = new TypedStringValue(value)__		}_		else if (classLoader != null) {_			Class<?> targetType = ClassUtils.forName(targetTypeName, classLoader)__			typedValue = new TypedStringValue(value, targetType)__		}_		else {_			typedValue = new TypedStringValue(value, targetTypeName)__		}_		return typedValue__	};build,a,typed,string,value,object,for,the,given,raw,value,see,org,springframework,beans,factory,config,typed,string,value;protected,typed,string,value,build,typed,string,value,string,value,string,target,type,name,throws,class,not,found,exception,class,loader,class,loader,this,reader,context,get,bean,class,loader,typed,string,value,typed,value,if,string,utils,has,text,target,type,name,typed,value,new,typed,string,value,value,else,if,class,loader,null,class,target,type,class,utils,for,name,target,type,name,class,loader,typed,value,new,typed,string,value,value,target,type,else,typed,value,new,typed,string,value,value,target,type,name,return,typed,value
BeanDefinitionParserDelegate -> protected TypedStringValue buildTypedStringValue(String value, String targetTypeName) 			throws ClassNotFoundException;1494586217;Build a typed String value Object for the given raw value._@see org.springframework.beans.factory.config.TypedStringValue;protected TypedStringValue buildTypedStringValue(String value, String targetTypeName)_			throws ClassNotFoundException {__		ClassLoader classLoader = this.readerContext.getBeanClassLoader()__		TypedStringValue typedValue__		if (!StringUtils.hasText(targetTypeName)) {_			typedValue = new TypedStringValue(value)__		}_		else if (classLoader != null) {_			Class<?> targetType = ClassUtils.forName(targetTypeName, classLoader)__			typedValue = new TypedStringValue(value, targetType)__		}_		else {_			typedValue = new TypedStringValue(value, targetTypeName)__		}_		return typedValue__	};build,a,typed,string,value,object,for,the,given,raw,value,see,org,springframework,beans,factory,config,typed,string,value;protected,typed,string,value,build,typed,string,value,string,value,string,target,type,name,throws,class,not,found,exception,class,loader,class,loader,this,reader,context,get,bean,class,loader,typed,string,value,typed,value,if,string,utils,has,text,target,type,name,typed,value,new,typed,string,value,value,else,if,class,loader,null,class,target,type,class,utils,for,name,target,type,name,class,loader,typed,value,new,typed,string,value,value,target,type,else,typed,value,new,typed,string,value,value,target,type,name,return,typed,value
BeanDefinitionParserDelegate -> protected TypedStringValue buildTypedStringValue(String value, String targetTypeName) 			throws ClassNotFoundException;1495868221;Build a typed String value Object for the given raw value._@see org.springframework.beans.factory.config.TypedStringValue;protected TypedStringValue buildTypedStringValue(String value, String targetTypeName)_			throws ClassNotFoundException {__		ClassLoader classLoader = this.readerContext.getBeanClassLoader()__		TypedStringValue typedValue__		if (!StringUtils.hasText(targetTypeName)) {_			typedValue = new TypedStringValue(value)__		}_		else if (classLoader != null) {_			Class<?> targetType = ClassUtils.forName(targetTypeName, classLoader)__			typedValue = new TypedStringValue(value, targetType)__		}_		else {_			typedValue = new TypedStringValue(value, targetTypeName)__		}_		return typedValue__	};build,a,typed,string,value,object,for,the,given,raw,value,see,org,springframework,beans,factory,config,typed,string,value;protected,typed,string,value,build,typed,string,value,string,value,string,target,type,name,throws,class,not,found,exception,class,loader,class,loader,this,reader,context,get,bean,class,loader,typed,string,value,typed,value,if,string,utils,has,text,target,type,name,typed,value,new,typed,string,value,value,else,if,class,loader,null,class,target,type,class,utils,for,name,target,type,name,class,loader,typed,value,new,typed,string,value,value,target,type,else,typed,value,new,typed,string,value,value,target,type,name,return,typed,value
BeanDefinitionParserDelegate -> protected TypedStringValue buildTypedStringValue(String value, String targetTypeName) 			throws ClassNotFoundException;1496259743;Build a typed String value Object for the given raw value._@see org.springframework.beans.factory.config.TypedStringValue;protected TypedStringValue buildTypedStringValue(String value, String targetTypeName)_			throws ClassNotFoundException {__		ClassLoader classLoader = this.readerContext.getBeanClassLoader()__		TypedStringValue typedValue__		if (!StringUtils.hasText(targetTypeName)) {_			typedValue = new TypedStringValue(value)__		}_		else if (classLoader != null) {_			Class<?> targetType = ClassUtils.forName(targetTypeName, classLoader)__			typedValue = new TypedStringValue(value, targetType)__		}_		else {_			typedValue = new TypedStringValue(value, targetTypeName)__		}_		return typedValue__	};build,a,typed,string,value,object,for,the,given,raw,value,see,org,springframework,beans,factory,config,typed,string,value;protected,typed,string,value,build,typed,string,value,string,value,string,target,type,name,throws,class,not,found,exception,class,loader,class,loader,this,reader,context,get,bean,class,loader,typed,string,value,typed,value,if,string,utils,has,text,target,type,name,typed,value,new,typed,string,value,value,else,if,class,loader,null,class,target,type,class,utils,for,name,target,type,name,class,loader,typed,value,new,typed,string,value,value,target,type,else,typed,value,new,typed,string,value,value,target,type,name,return,typed,value
BeanDefinitionParserDelegate -> public BeanDefinitionParserDelegate(XmlReaderContext readerContext);1411599760;Create a new BeanDefinitionParserDelegate associated with the supplied_{@link XmlReaderContext}.;public BeanDefinitionParserDelegate(XmlReaderContext readerContext) {_		Assert.notNull(readerContext, "XmlReaderContext must not be null")__		this.readerContext = readerContext__	};create,a,new,bean,definition,parser,delegate,associated,with,the,supplied,link,xml,reader,context;public,bean,definition,parser,delegate,xml,reader,context,reader,context,assert,not,null,reader,context,xml,reader,context,must,not,be,null,this,reader,context,reader,context
BeanDefinitionParserDelegate -> public BeanDefinitionParserDelegate(XmlReaderContext readerContext);1419966315;Create a new BeanDefinitionParserDelegate associated with the supplied_{@link XmlReaderContext}.;public BeanDefinitionParserDelegate(XmlReaderContext readerContext) {_		Assert.notNull(readerContext, "XmlReaderContext must not be null")__		this.readerContext = readerContext__	};create,a,new,bean,definition,parser,delegate,associated,with,the,supplied,link,xml,reader,context;public,bean,definition,parser,delegate,xml,reader,context,reader,context,assert,not,null,reader,context,xml,reader,context,must,not,be,null,this,reader,context,reader,context
BeanDefinitionParserDelegate -> public BeanDefinitionParserDelegate(XmlReaderContext readerContext);1431958785;Create a new BeanDefinitionParserDelegate associated with the supplied_{@link XmlReaderContext}.;public BeanDefinitionParserDelegate(XmlReaderContext readerContext) {_		Assert.notNull(readerContext, "XmlReaderContext must not be null")__		this.readerContext = readerContext__	};create,a,new,bean,definition,parser,delegate,associated,with,the,supplied,link,xml,reader,context;public,bean,definition,parser,delegate,xml,reader,context,reader,context,assert,not,null,reader,context,xml,reader,context,must,not,be,null,this,reader,context,reader,context
BeanDefinitionParserDelegate -> public BeanDefinitionParserDelegate(XmlReaderContext readerContext);1432135182;Create a new BeanDefinitionParserDelegate associated with the supplied_{@link XmlReaderContext}.;public BeanDefinitionParserDelegate(XmlReaderContext readerContext) {_		Assert.notNull(readerContext, "XmlReaderContext must not be null")__		this.readerContext = readerContext__	};create,a,new,bean,definition,parser,delegate,associated,with,the,supplied,link,xml,reader,context;public,bean,definition,parser,delegate,xml,reader,context,reader,context,assert,not,null,reader,context,xml,reader,context,must,not,be,null,this,reader,context,reader,context
BeanDefinitionParserDelegate -> public BeanDefinitionParserDelegate(XmlReaderContext readerContext);1447323728;Create a new BeanDefinitionParserDelegate associated with the supplied_{@link XmlReaderContext}.;public BeanDefinitionParserDelegate(XmlReaderContext readerContext) {_		Assert.notNull(readerContext, "XmlReaderContext must not be null")__		this.readerContext = readerContext__	};create,a,new,bean,definition,parser,delegate,associated,with,the,supplied,link,xml,reader,context;public,bean,definition,parser,delegate,xml,reader,context,reader,context,assert,not,null,reader,context,xml,reader,context,must,not,be,null,this,reader,context,reader,context
BeanDefinitionParserDelegate -> public BeanDefinitionParserDelegate(XmlReaderContext readerContext);1467726769;Create a new BeanDefinitionParserDelegate associated with the supplied_{@link XmlReaderContext}.;public BeanDefinitionParserDelegate(XmlReaderContext readerContext) {_		Assert.notNull(readerContext, "XmlReaderContext must not be null")__		this.readerContext = readerContext__	};create,a,new,bean,definition,parser,delegate,associated,with,the,supplied,link,xml,reader,context;public,bean,definition,parser,delegate,xml,reader,context,reader,context,assert,not,null,reader,context,xml,reader,context,must,not,be,null,this,reader,context,reader,context
BeanDefinitionParserDelegate -> public BeanDefinitionParserDelegate(XmlReaderContext readerContext);1467730834;Create a new BeanDefinitionParserDelegate associated with the supplied_{@link XmlReaderContext}.;public BeanDefinitionParserDelegate(XmlReaderContext readerContext) {_		Assert.notNull(readerContext, "XmlReaderContext must not be null")__		this.readerContext = readerContext__	};create,a,new,bean,definition,parser,delegate,associated,with,the,supplied,link,xml,reader,context;public,bean,definition,parser,delegate,xml,reader,context,reader,context,assert,not,null,reader,context,xml,reader,context,must,not,be,null,this,reader,context,reader,context
BeanDefinitionParserDelegate -> public BeanDefinitionParserDelegate(XmlReaderContext readerContext);1467744603;Create a new BeanDefinitionParserDelegate associated with the supplied_{@link XmlReaderContext}.;public BeanDefinitionParserDelegate(XmlReaderContext readerContext) {_		Assert.notNull(readerContext, "XmlReaderContext must not be null")__		this.readerContext = readerContext__	};create,a,new,bean,definition,parser,delegate,associated,with,the,supplied,link,xml,reader,context;public,bean,definition,parser,delegate,xml,reader,context,reader,context,assert,not,null,reader,context,xml,reader,context,must,not,be,null,this,reader,context,reader,context
BeanDefinitionParserDelegate -> public BeanDefinitionParserDelegate(XmlReaderContext readerContext);1487245676;Create a new BeanDefinitionParserDelegate associated with the supplied_{@link XmlReaderContext}.;public BeanDefinitionParserDelegate(XmlReaderContext readerContext) {_		Assert.notNull(readerContext, "XmlReaderContext must not be null")__		this.readerContext = readerContext__	};create,a,new,bean,definition,parser,delegate,associated,with,the,supplied,link,xml,reader,context;public,bean,definition,parser,delegate,xml,reader,context,reader,context,assert,not,null,reader,context,xml,reader,context,must,not,be,null,this,reader,context,reader,context
BeanDefinitionParserDelegate -> public BeanDefinitionParserDelegate(XmlReaderContext readerContext);1487255851;Create a new BeanDefinitionParserDelegate associated with the supplied_{@link XmlReaderContext}.;public BeanDefinitionParserDelegate(XmlReaderContext readerContext) {_		Assert.notNull(readerContext, "XmlReaderContext must not be null")__		this.readerContext = readerContext__	};create,a,new,bean,definition,parser,delegate,associated,with,the,supplied,link,xml,reader,context;public,bean,definition,parser,delegate,xml,reader,context,reader,context,assert,not,null,reader,context,xml,reader,context,must,not,be,null,this,reader,context,reader,context
BeanDefinitionParserDelegate -> public BeanDefinitionParserDelegate(XmlReaderContext readerContext);1494586217;Create a new BeanDefinitionParserDelegate associated with the supplied_{@link XmlReaderContext}.;public BeanDefinitionParserDelegate(XmlReaderContext readerContext) {_		Assert.notNull(readerContext, "XmlReaderContext must not be null")__		this.readerContext = readerContext__	};create,a,new,bean,definition,parser,delegate,associated,with,the,supplied,link,xml,reader,context;public,bean,definition,parser,delegate,xml,reader,context,reader,context,assert,not,null,reader,context,xml,reader,context,must,not,be,null,this,reader,context,reader,context
BeanDefinitionParserDelegate -> public BeanDefinitionParserDelegate(XmlReaderContext readerContext);1495868221;Create a new BeanDefinitionParserDelegate associated with the supplied_{@link XmlReaderContext}.;public BeanDefinitionParserDelegate(XmlReaderContext readerContext) {_		Assert.notNull(readerContext, "XmlReaderContext must not be null")__		this.readerContext = readerContext__	};create,a,new,bean,definition,parser,delegate,associated,with,the,supplied,link,xml,reader,context;public,bean,definition,parser,delegate,xml,reader,context,reader,context,assert,not,null,reader,context,xml,reader,context,must,not,be,null,this,reader,context,reader,context
BeanDefinitionParserDelegate -> public BeanDefinitionParserDelegate(XmlReaderContext readerContext);1496259743;Create a new BeanDefinitionParserDelegate associated with the supplied_{@link XmlReaderContext}.;public BeanDefinitionParserDelegate(XmlReaderContext readerContext) {_		Assert.notNull(readerContext, "XmlReaderContext must not be null")__		this.readerContext = readerContext__	};create,a,new,bean,definition,parser,delegate,associated,with,the,supplied,link,xml,reader,context;public,bean,definition,parser,delegate,xml,reader,context,reader,context,assert,not,null,reader,context,xml,reader,context,must,not,be,null,this,reader,context,reader,context
BeanDefinitionParserDelegate -> public BeanDefinitionParserDelegate(XmlReaderContext readerContext);1496837955;Create a new BeanDefinitionParserDelegate associated with the supplied_{@link XmlReaderContext}.;public BeanDefinitionParserDelegate(XmlReaderContext readerContext) {_		Assert.notNull(readerContext, "XmlReaderContext must not be null")__		this.readerContext = readerContext__	};create,a,new,bean,definition,parser,delegate,associated,with,the,supplied,link,xml,reader,context;public,bean,definition,parser,delegate,xml,reader,context,reader,context,assert,not,null,reader,context,xml,reader,context,must,not,be,null,this,reader,context,reader,context
BeanDefinitionParserDelegate -> public BeanDefinitionParserDelegate(XmlReaderContext readerContext);1503008029;Create a new BeanDefinitionParserDelegate associated with the supplied_{@link XmlReaderContext}.;public BeanDefinitionParserDelegate(XmlReaderContext readerContext) {_		Assert.notNull(readerContext, "XmlReaderContext must not be null")__		this.readerContext = readerContext__	};create,a,new,bean,definition,parser,delegate,associated,with,the,supplied,link,xml,reader,context;public,bean,definition,parser,delegate,xml,reader,context,reader,context,assert,not,null,reader,context,xml,reader,context,must,not,be,null,this,reader,context,reader,context
BeanDefinitionParserDelegate -> public BeanDefinitionParserDelegate(XmlReaderContext readerContext);1519513303;Create a new BeanDefinitionParserDelegate associated with the supplied_{@link XmlReaderContext}.;public BeanDefinitionParserDelegate(XmlReaderContext readerContext) {_		Assert.notNull(readerContext, "XmlReaderContext must not be null")__		this.readerContext = readerContext__	};create,a,new,bean,definition,parser,delegate,associated,with,the,supplied,link,xml,reader,context;public,bean,definition,parser,delegate,xml,reader,context,reader,context,assert,not,null,reader,context,xml,reader,context,must,not,be,null,this,reader,context,reader,context
BeanDefinitionParserDelegate -> public BeanDefinitionParserDelegate(XmlReaderContext readerContext);1530174524;Create a new BeanDefinitionParserDelegate associated with the supplied_{@link XmlReaderContext}.;public BeanDefinitionParserDelegate(XmlReaderContext readerContext) {_		Assert.notNull(readerContext, "XmlReaderContext must not be null")__		this.readerContext = readerContext__	};create,a,new,bean,definition,parser,delegate,associated,with,the,supplied,link,xml,reader,context;public,bean,definition,parser,delegate,xml,reader,context,reader,context,assert,not,null,reader,context,xml,reader,context,must,not,be,null,this,reader,context,reader,context
BeanDefinitionParserDelegate -> public BeanDefinitionParserDelegate(XmlReaderContext readerContext);1530190293;Create a new BeanDefinitionParserDelegate associated with the supplied_{@link XmlReaderContext}.;public BeanDefinitionParserDelegate(XmlReaderContext readerContext) {_		Assert.notNull(readerContext, "XmlReaderContext must not be null")__		this.readerContext = readerContext__	};create,a,new,bean,definition,parser,delegate,associated,with,the,supplied,link,xml,reader,context;public,bean,definition,parser,delegate,xml,reader,context,reader,context,assert,not,null,reader,context,xml,reader,context,must,not,be,null,this,reader,context,reader,context
BeanDefinitionParserDelegate -> public BeanDefinitionParserDelegate(XmlReaderContext readerContext);1532706365;Create a new BeanDefinitionParserDelegate associated with the supplied_{@link XmlReaderContext}.;public BeanDefinitionParserDelegate(XmlReaderContext readerContext) {_		Assert.notNull(readerContext, "XmlReaderContext must not be null")__		this.readerContext = readerContext__	};create,a,new,bean,definition,parser,delegate,associated,with,the,supplied,link,xml,reader,context;public,bean,definition,parser,delegate,xml,reader,context,reader,context,assert,not,null,reader,context,xml,reader,context,must,not,be,null,this,reader,context,reader,context
BeanDefinitionParserDelegate -> public BeanDefinitionParserDelegate(XmlReaderContext readerContext);1546958161;Create a new BeanDefinitionParserDelegate associated with the supplied_{@link XmlReaderContext}.;public BeanDefinitionParserDelegate(XmlReaderContext readerContext) {_		Assert.notNull(readerContext, "XmlReaderContext must not be null")__		this.readerContext = readerContext__	};create,a,new,bean,definition,parser,delegate,associated,with,the,supplied,link,xml,reader,context;public,bean,definition,parser,delegate,xml,reader,context,reader,context,assert,not,null,reader,context,xml,reader,context,must,not,be,null,this,reader,context,reader,context
BeanDefinitionParserDelegate -> protected Object extractSource(Element ele);1328020251;Invoke the {@link org.springframework.beans.factory.parsing.SourceExtractor} to pull the_source metadata from the supplied {@link Element}.;protected Object extractSource(Element ele) {_		return this.readerContext.extractSource(ele)__	};invoke,the,link,org,springframework,beans,factory,parsing,source,extractor,to,pull,the,source,metadata,from,the,supplied,link,element;protected,object,extract,source,element,ele,return,this,reader,context,extract,source,ele
BeanDefinitionParserDelegate -> protected Object extractSource(Element ele);1335774711;Invoke the {@link org.springframework.beans.factory.parsing.SourceExtractor} to pull the_source metadata from the supplied {@link Element}.;protected Object extractSource(Element ele) {_		return this.readerContext.extractSource(ele)__	};invoke,the,link,org,springframework,beans,factory,parsing,source,extractor,to,pull,the,source,metadata,from,the,supplied,link,element;protected,object,extract,source,element,ele,return,this,reader,context,extract,source,ele
BeanDefinitionParserDelegate -> protected Object extractSource(Element ele);1337341719;Invoke the {@link org.springframework.beans.factory.parsing.SourceExtractor} to pull the_source metadata from the supplied {@link Element}.;protected Object extractSource(Element ele) {_		return this.readerContext.extractSource(ele)__	};invoke,the,link,org,springframework,beans,factory,parsing,source,extractor,to,pull,the,source,metadata,from,the,supplied,link,element;protected,object,extract,source,element,ele,return,this,reader,context,extract,source,ele
BeanDefinitionParserDelegate -> protected Object extractSource(Element ele);1351392612;Invoke the {@link org.springframework.beans.factory.parsing.SourceExtractor} to pull the_source metadata from the supplied {@link Element}.;protected Object extractSource(Element ele) {_		return this.readerContext.extractSource(ele)__	};invoke,the,link,org,springframework,beans,factory,parsing,source,extractor,to,pull,the,source,metadata,from,the,supplied,link,element;protected,object,extract,source,element,ele,return,this,reader,context,extract,source,ele
BeanDefinitionParserDelegate -> protected Object extractSource(Element ele);1351696936;Invoke the {@link org.springframework.beans.factory.parsing.SourceExtractor} to pull the_source metadata from the supplied {@link Element}.;protected Object extractSource(Element ele) {_		return this.readerContext.extractSource(ele)__	};invoke,the,link,org,springframework,beans,factory,parsing,source,extractor,to,pull,the,source,metadata,from,the,supplied,link,element;protected,object,extract,source,element,ele,return,this,reader,context,extract,source,ele
BeanDefinitionParserDelegate -> protected Object extractSource(Element ele);1356735495;Invoke the {@link org.springframework.beans.factory.parsing.SourceExtractor} to pull the_source metadata from the supplied {@link Element}.;protected Object extractSource(Element ele) {_		return this.readerContext.extractSource(ele)__	};invoke,the,link,org,springframework,beans,factory,parsing,source,extractor,to,pull,the,source,metadata,from,the,supplied,link,element;protected,object,extract,source,element,ele,return,this,reader,context,extract,source,ele
BeanDefinitionParserDelegate -> protected Object extractSource(Element ele);1357119417;Invoke the {@link org.springframework.beans.factory.parsing.SourceExtractor} to pull the_source metadata from the supplied {@link Element}.;protected Object extractSource(Element ele) {_		return this.readerContext.extractSource(ele)__	};invoke,the,link,org,springframework,beans,factory,parsing,source,extractor,to,pull,the,source,metadata,from,the,supplied,link,element;protected,object,extract,source,element,ele,return,this,reader,context,extract,source,ele
BeanDefinitionParserDelegate -> protected Object extractSource(Element ele);1367943112;Invoke the {@link org.springframework.beans.factory.parsing.SourceExtractor} to pull the_source metadata from the supplied {@link Element}.;protected Object extractSource(Element ele) {_		return this.readerContext.extractSource(ele)__	};invoke,the,link,org,springframework,beans,factory,parsing,source,extractor,to,pull,the,source,metadata,from,the,supplied,link,element;protected,object,extract,source,element,ele,return,this,reader,context,extract,source,ele
BeanDefinitionParserDelegate -> protected Object extractSource(Element ele);1382030648;Invoke the {@link org.springframework.beans.factory.parsing.SourceExtractor} to pull the_source metadata from the supplied {@link Element}.;protected Object extractSource(Element ele) {_		return this.readerContext.extractSource(ele)__	};invoke,the,link,org,springframework,beans,factory,parsing,source,extractor,to,pull,the,source,metadata,from,the,supplied,link,element;protected,object,extract,source,element,ele,return,this,reader,context,extract,source,ele
BeanDefinitionParserDelegate -> protected Object extractSource(Element ele);1385412762;Invoke the {@link org.springframework.beans.factory.parsing.SourceExtractor} to pull the_source metadata from the supplied {@link Element}.;protected Object extractSource(Element ele) {_		return this.readerContext.extractSource(ele)__	};invoke,the,link,org,springframework,beans,factory,parsing,source,extractor,to,pull,the,source,metadata,from,the,supplied,link,element;protected,object,extract,source,element,ele,return,this,reader,context,extract,source,ele
BeanDefinitionParserDelegate -> protected Object extractSource(Element ele);1410953197;Invoke the {@link org.springframework.beans.factory.parsing.SourceExtractor} to pull the_source metadata from the supplied {@link Element}.;protected Object extractSource(Element ele) {_		return this.readerContext.extractSource(ele)__	};invoke,the,link,org,springframework,beans,factory,parsing,source,extractor,to,pull,the,source,metadata,from,the,supplied,link,element;protected,object,extract,source,element,ele,return,this,reader,context,extract,source,ele
BeanDefinitionParserDelegate -> protected Object extractSource(Element ele);1411599760;Invoke the {@link org.springframework.beans.factory.parsing.SourceExtractor} to pull the_source metadata from the supplied {@link Element}.;protected Object extractSource(Element ele) {_		return this.readerContext.extractSource(ele)__	};invoke,the,link,org,springframework,beans,factory,parsing,source,extractor,to,pull,the,source,metadata,from,the,supplied,link,element;protected,object,extract,source,element,ele,return,this,reader,context,extract,source,ele
BeanDefinitionParserDelegate -> protected Object extractSource(Element ele);1419966315;Invoke the {@link org.springframework.beans.factory.parsing.SourceExtractor} to pull the_source metadata from the supplied {@link Element}.;protected Object extractSource(Element ele) {_		return this.readerContext.extractSource(ele)__	};invoke,the,link,org,springframework,beans,factory,parsing,source,extractor,to,pull,the,source,metadata,from,the,supplied,link,element;protected,object,extract,source,element,ele,return,this,reader,context,extract,source,ele
BeanDefinitionParserDelegate -> protected Object extractSource(Element ele);1431958785;Invoke the {@link org.springframework.beans.factory.parsing.SourceExtractor} to pull the_source metadata from the supplied {@link Element}.;protected Object extractSource(Element ele) {_		return this.readerContext.extractSource(ele)__	};invoke,the,link,org,springframework,beans,factory,parsing,source,extractor,to,pull,the,source,metadata,from,the,supplied,link,element;protected,object,extract,source,element,ele,return,this,reader,context,extract,source,ele
BeanDefinitionParserDelegate -> protected Object extractSource(Element ele);1432135182;Invoke the {@link org.springframework.beans.factory.parsing.SourceExtractor} to pull the_source metadata from the supplied {@link Element}.;protected Object extractSource(Element ele) {_		return this.readerContext.extractSource(ele)__	};invoke,the,link,org,springframework,beans,factory,parsing,source,extractor,to,pull,the,source,metadata,from,the,supplied,link,element;protected,object,extract,source,element,ele,return,this,reader,context,extract,source,ele
BeanDefinitionParserDelegate -> protected Object extractSource(Element ele);1447323728;Invoke the {@link org.springframework.beans.factory.parsing.SourceExtractor} to pull the_source metadata from the supplied {@link Element}.;protected Object extractSource(Element ele) {_		return this.readerContext.extractSource(ele)__	};invoke,the,link,org,springframework,beans,factory,parsing,source,extractor,to,pull,the,source,metadata,from,the,supplied,link,element;protected,object,extract,source,element,ele,return,this,reader,context,extract,source,ele
BeanDefinitionParserDelegate -> protected Object extractSource(Element ele);1467726769;Invoke the {@link org.springframework.beans.factory.parsing.SourceExtractor} to pull the_source metadata from the supplied {@link Element}.;protected Object extractSource(Element ele) {_		return this.readerContext.extractSource(ele)__	};invoke,the,link,org,springframework,beans,factory,parsing,source,extractor,to,pull,the,source,metadata,from,the,supplied,link,element;protected,object,extract,source,element,ele,return,this,reader,context,extract,source,ele
BeanDefinitionParserDelegate -> protected Object extractSource(Element ele);1467730834;Invoke the {@link org.springframework.beans.factory.parsing.SourceExtractor} to pull the_source metadata from the supplied {@link Element}.;protected Object extractSource(Element ele) {_		return this.readerContext.extractSource(ele)__	};invoke,the,link,org,springframework,beans,factory,parsing,source,extractor,to,pull,the,source,metadata,from,the,supplied,link,element;protected,object,extract,source,element,ele,return,this,reader,context,extract,source,ele
BeanDefinitionParserDelegate -> protected Object extractSource(Element ele);1467744603;Invoke the {@link org.springframework.beans.factory.parsing.SourceExtractor} to pull the_source metadata from the supplied {@link Element}.;protected Object extractSource(Element ele) {_		return this.readerContext.extractSource(ele)__	};invoke,the,link,org,springframework,beans,factory,parsing,source,extractor,to,pull,the,source,metadata,from,the,supplied,link,element;protected,object,extract,source,element,ele,return,this,reader,context,extract,source,ele
BeanDefinitionParserDelegate -> protected Object extractSource(Element ele);1487245676;Invoke the {@link org.springframework.beans.factory.parsing.SourceExtractor} to pull the_source metadata from the supplied {@link Element}.;protected Object extractSource(Element ele) {_		return this.readerContext.extractSource(ele)__	};invoke,the,link,org,springframework,beans,factory,parsing,source,extractor,to,pull,the,source,metadata,from,the,supplied,link,element;protected,object,extract,source,element,ele,return,this,reader,context,extract,source,ele
BeanDefinitionParserDelegate -> protected Object extractSource(Element ele);1487255851;Invoke the {@link org.springframework.beans.factory.parsing.SourceExtractor} to pull the_source metadata from the supplied {@link Element}.;protected Object extractSource(Element ele) {_		return this.readerContext.extractSource(ele)__	};invoke,the,link,org,springframework,beans,factory,parsing,source,extractor,to,pull,the,source,metadata,from,the,supplied,link,element;protected,object,extract,source,element,ele,return,this,reader,context,extract,source,ele
BeanDefinitionParserDelegate -> protected Object extractSource(Element ele);1494586217;Invoke the {@link org.springframework.beans.factory.parsing.SourceExtractor} to pull the_source metadata from the supplied {@link Element}.;protected Object extractSource(Element ele) {_		return this.readerContext.extractSource(ele)__	};invoke,the,link,org,springframework,beans,factory,parsing,source,extractor,to,pull,the,source,metadata,from,the,supplied,link,element;protected,object,extract,source,element,ele,return,this,reader,context,extract,source,ele
BeanDefinitionParserDelegate -> protected Object extractSource(Element ele);1495868221;Invoke the {@link org.springframework.beans.factory.parsing.SourceExtractor} to pull the_source metadata from the supplied {@link Element}.;protected Object extractSource(Element ele) {_		return this.readerContext.extractSource(ele)__	};invoke,the,link,org,springframework,beans,factory,parsing,source,extractor,to,pull,the,source,metadata,from,the,supplied,link,element;protected,object,extract,source,element,ele,return,this,reader,context,extract,source,ele
BeanDefinitionParserDelegate -> protected Object extractSource(Element ele);1496259743;Invoke the {@link org.springframework.beans.factory.parsing.SourceExtractor} to pull the_source metadata from the supplied {@link Element}.;protected Object extractSource(Element ele) {_		return this.readerContext.extractSource(ele)__	};invoke,the,link,org,springframework,beans,factory,parsing,source,extractor,to,pull,the,source,metadata,from,the,supplied,link,element;protected,object,extract,source,element,ele,return,this,reader,context,extract,source,ele
BeanDefinitionParserDelegate -> public void parseLookupOverrideSubElements(Element beanEle, MethodOverrides overrides);1328020251;Parse lookup-override sub-elements of the given bean element.;public void parseLookupOverrideSubElements(Element beanEle, MethodOverrides overrides) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, LOOKUP_METHOD_ELEMENT)) {_				Element ele = (Element) node__				String methodName = ele.getAttribute(NAME_ATTRIBUTE)__				String beanRef = ele.getAttribute(BEAN_ELEMENT)__				LookupOverride override = new LookupOverride(methodName, beanRef)__				override.setSource(extractSource(ele))__				overrides.addOverride(override)__			}_		}_	};parse,lookup,override,sub,elements,of,the,given,bean,element;public,void,parse,lookup,override,sub,elements,element,bean,ele,method,overrides,overrides,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,ele,element,node,string,method,name,ele,get,attribute,string,bean,ref,ele,get,attribute,lookup,override,override,new,lookup,override,method,name,bean,ref,override,set,source,extract,source,ele,overrides,add,override,override
BeanDefinitionParserDelegate -> public void parseLookupOverrideSubElements(Element beanEle, MethodOverrides overrides);1335774711;Parse lookup-override sub-elements of the given bean element.;public void parseLookupOverrideSubElements(Element beanEle, MethodOverrides overrides) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, LOOKUP_METHOD_ELEMENT)) {_				Element ele = (Element) node__				String methodName = ele.getAttribute(NAME_ATTRIBUTE)__				String beanRef = ele.getAttribute(BEAN_ELEMENT)__				LookupOverride override = new LookupOverride(methodName, beanRef)__				override.setSource(extractSource(ele))__				overrides.addOverride(override)__			}_		}_	};parse,lookup,override,sub,elements,of,the,given,bean,element;public,void,parse,lookup,override,sub,elements,element,bean,ele,method,overrides,overrides,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,ele,element,node,string,method,name,ele,get,attribute,string,bean,ref,ele,get,attribute,lookup,override,override,new,lookup,override,method,name,bean,ref,override,set,source,extract,source,ele,overrides,add,override,override
BeanDefinitionParserDelegate -> public void parseLookupOverrideSubElements(Element beanEle, MethodOverrides overrides);1337341719;Parse lookup-override sub-elements of the given bean element.;public void parseLookupOverrideSubElements(Element beanEle, MethodOverrides overrides) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, LOOKUP_METHOD_ELEMENT)) {_				Element ele = (Element) node__				String methodName = ele.getAttribute(NAME_ATTRIBUTE)__				String beanRef = ele.getAttribute(BEAN_ELEMENT)__				LookupOverride override = new LookupOverride(methodName, beanRef)__				override.setSource(extractSource(ele))__				overrides.addOverride(override)__			}_		}_	};parse,lookup,override,sub,elements,of,the,given,bean,element;public,void,parse,lookup,override,sub,elements,element,bean,ele,method,overrides,overrides,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,ele,element,node,string,method,name,ele,get,attribute,string,bean,ref,ele,get,attribute,lookup,override,override,new,lookup,override,method,name,bean,ref,override,set,source,extract,source,ele,overrides,add,override,override
BeanDefinitionParserDelegate -> public void parseLookupOverrideSubElements(Element beanEle, MethodOverrides overrides);1351392612;Parse lookup-override sub-elements of the given bean element.;public void parseLookupOverrideSubElements(Element beanEle, MethodOverrides overrides) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, LOOKUP_METHOD_ELEMENT)) {_				Element ele = (Element) node__				String methodName = ele.getAttribute(NAME_ATTRIBUTE)__				String beanRef = ele.getAttribute(BEAN_ELEMENT)__				LookupOverride override = new LookupOverride(methodName, beanRef)__				override.setSource(extractSource(ele))__				overrides.addOverride(override)__			}_		}_	};parse,lookup,override,sub,elements,of,the,given,bean,element;public,void,parse,lookup,override,sub,elements,element,bean,ele,method,overrides,overrides,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,ele,element,node,string,method,name,ele,get,attribute,string,bean,ref,ele,get,attribute,lookup,override,override,new,lookup,override,method,name,bean,ref,override,set,source,extract,source,ele,overrides,add,override,override
BeanDefinitionParserDelegate -> public void parseLookupOverrideSubElements(Element beanEle, MethodOverrides overrides);1351696936;Parse lookup-override sub-elements of the given bean element.;public void parseLookupOverrideSubElements(Element beanEle, MethodOverrides overrides) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, LOOKUP_METHOD_ELEMENT)) {_				Element ele = (Element) node__				String methodName = ele.getAttribute(NAME_ATTRIBUTE)__				String beanRef = ele.getAttribute(BEAN_ELEMENT)__				LookupOverride override = new LookupOverride(methodName, beanRef)__				override.setSource(extractSource(ele))__				overrides.addOverride(override)__			}_		}_	};parse,lookup,override,sub,elements,of,the,given,bean,element;public,void,parse,lookup,override,sub,elements,element,bean,ele,method,overrides,overrides,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,ele,element,node,string,method,name,ele,get,attribute,string,bean,ref,ele,get,attribute,lookup,override,override,new,lookup,override,method,name,bean,ref,override,set,source,extract,source,ele,overrides,add,override,override
BeanDefinitionParserDelegate -> public void parseLookupOverrideSubElements(Element beanEle, MethodOverrides overrides);1356735495;Parse lookup-override sub-elements of the given bean element.;public void parseLookupOverrideSubElements(Element beanEle, MethodOverrides overrides) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, LOOKUP_METHOD_ELEMENT)) {_				Element ele = (Element) node__				String methodName = ele.getAttribute(NAME_ATTRIBUTE)__				String beanRef = ele.getAttribute(BEAN_ELEMENT)__				LookupOverride override = new LookupOverride(methodName, beanRef)__				override.setSource(extractSource(ele))__				overrides.addOverride(override)__			}_		}_	};parse,lookup,override,sub,elements,of,the,given,bean,element;public,void,parse,lookup,override,sub,elements,element,bean,ele,method,overrides,overrides,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,ele,element,node,string,method,name,ele,get,attribute,string,bean,ref,ele,get,attribute,lookup,override,override,new,lookup,override,method,name,bean,ref,override,set,source,extract,source,ele,overrides,add,override,override
BeanDefinitionParserDelegate -> public void parseLookupOverrideSubElements(Element beanEle, MethodOverrides overrides);1357119417;Parse lookup-override sub-elements of the given bean element.;public void parseLookupOverrideSubElements(Element beanEle, MethodOverrides overrides) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, LOOKUP_METHOD_ELEMENT)) {_				Element ele = (Element) node__				String methodName = ele.getAttribute(NAME_ATTRIBUTE)__				String beanRef = ele.getAttribute(BEAN_ELEMENT)__				LookupOverride override = new LookupOverride(methodName, beanRef)__				override.setSource(extractSource(ele))__				overrides.addOverride(override)__			}_		}_	};parse,lookup,override,sub,elements,of,the,given,bean,element;public,void,parse,lookup,override,sub,elements,element,bean,ele,method,overrides,overrides,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,ele,element,node,string,method,name,ele,get,attribute,string,bean,ref,ele,get,attribute,lookup,override,override,new,lookup,override,method,name,bean,ref,override,set,source,extract,source,ele,overrides,add,override,override
BeanDefinitionParserDelegate -> public void parseLookupOverrideSubElements(Element beanEle, MethodOverrides overrides);1367943112;Parse lookup-override sub-elements of the given bean element.;public void parseLookupOverrideSubElements(Element beanEle, MethodOverrides overrides) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, LOOKUP_METHOD_ELEMENT)) {_				Element ele = (Element) node__				String methodName = ele.getAttribute(NAME_ATTRIBUTE)__				String beanRef = ele.getAttribute(BEAN_ELEMENT)__				LookupOverride override = new LookupOverride(methodName, beanRef)__				override.setSource(extractSource(ele))__				overrides.addOverride(override)__			}_		}_	};parse,lookup,override,sub,elements,of,the,given,bean,element;public,void,parse,lookup,override,sub,elements,element,bean,ele,method,overrides,overrides,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,ele,element,node,string,method,name,ele,get,attribute,string,bean,ref,ele,get,attribute,lookup,override,override,new,lookup,override,method,name,bean,ref,override,set,source,extract,source,ele,overrides,add,override,override
BeanDefinitionParserDelegate -> public void parseLookupOverrideSubElements(Element beanEle, MethodOverrides overrides);1382030648;Parse lookup-override sub-elements of the given bean element.;public void parseLookupOverrideSubElements(Element beanEle, MethodOverrides overrides) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, LOOKUP_METHOD_ELEMENT)) {_				Element ele = (Element) node__				String methodName = ele.getAttribute(NAME_ATTRIBUTE)__				String beanRef = ele.getAttribute(BEAN_ELEMENT)__				LookupOverride override = new LookupOverride(methodName, beanRef)__				override.setSource(extractSource(ele))__				overrides.addOverride(override)__			}_		}_	};parse,lookup,override,sub,elements,of,the,given,bean,element;public,void,parse,lookup,override,sub,elements,element,bean,ele,method,overrides,overrides,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,ele,element,node,string,method,name,ele,get,attribute,string,bean,ref,ele,get,attribute,lookup,override,override,new,lookup,override,method,name,bean,ref,override,set,source,extract,source,ele,overrides,add,override,override
BeanDefinitionParserDelegate -> public void parseLookupOverrideSubElements(Element beanEle, MethodOverrides overrides);1385412762;Parse lookup-override sub-elements of the given bean element.;public void parseLookupOverrideSubElements(Element beanEle, MethodOverrides overrides) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, LOOKUP_METHOD_ELEMENT)) {_				Element ele = (Element) node__				String methodName = ele.getAttribute(NAME_ATTRIBUTE)__				String beanRef = ele.getAttribute(BEAN_ELEMENT)__				LookupOverride override = new LookupOverride(methodName, beanRef)__				override.setSource(extractSource(ele))__				overrides.addOverride(override)__			}_		}_	};parse,lookup,override,sub,elements,of,the,given,bean,element;public,void,parse,lookup,override,sub,elements,element,bean,ele,method,overrides,overrides,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,ele,element,node,string,method,name,ele,get,attribute,string,bean,ref,ele,get,attribute,lookup,override,override,new,lookup,override,method,name,bean,ref,override,set,source,extract,source,ele,overrides,add,override,override
BeanDefinitionParserDelegate -> public void parseLookupOverrideSubElements(Element beanEle, MethodOverrides overrides);1410953197;Parse lookup-override sub-elements of the given bean element.;public void parseLookupOverrideSubElements(Element beanEle, MethodOverrides overrides) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, LOOKUP_METHOD_ELEMENT)) {_				Element ele = (Element) node__				String methodName = ele.getAttribute(NAME_ATTRIBUTE)__				String beanRef = ele.getAttribute(BEAN_ELEMENT)__				LookupOverride override = new LookupOverride(methodName, beanRef)__				override.setSource(extractSource(ele))__				overrides.addOverride(override)__			}_		}_	};parse,lookup,override,sub,elements,of,the,given,bean,element;public,void,parse,lookup,override,sub,elements,element,bean,ele,method,overrides,overrides,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,ele,element,node,string,method,name,ele,get,attribute,string,bean,ref,ele,get,attribute,lookup,override,override,new,lookup,override,method,name,bean,ref,override,set,source,extract,source,ele,overrides,add,override,override
BeanDefinitionParserDelegate -> public void parseLookupOverrideSubElements(Element beanEle, MethodOverrides overrides);1411599760;Parse lookup-override sub-elements of the given bean element.;public void parseLookupOverrideSubElements(Element beanEle, MethodOverrides overrides) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, LOOKUP_METHOD_ELEMENT)) {_				Element ele = (Element) node__				String methodName = ele.getAttribute(NAME_ATTRIBUTE)__				String beanRef = ele.getAttribute(BEAN_ELEMENT)__				LookupOverride override = new LookupOverride(methodName, beanRef)__				override.setSource(extractSource(ele))__				overrides.addOverride(override)__			}_		}_	};parse,lookup,override,sub,elements,of,the,given,bean,element;public,void,parse,lookup,override,sub,elements,element,bean,ele,method,overrides,overrides,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,ele,element,node,string,method,name,ele,get,attribute,string,bean,ref,ele,get,attribute,lookup,override,override,new,lookup,override,method,name,bean,ref,override,set,source,extract,source,ele,overrides,add,override,override
BeanDefinitionParserDelegate -> public void parseLookupOverrideSubElements(Element beanEle, MethodOverrides overrides);1419966315;Parse lookup-override sub-elements of the given bean element.;public void parseLookupOverrideSubElements(Element beanEle, MethodOverrides overrides) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, LOOKUP_METHOD_ELEMENT)) {_				Element ele = (Element) node__				String methodName = ele.getAttribute(NAME_ATTRIBUTE)__				String beanRef = ele.getAttribute(BEAN_ELEMENT)__				LookupOverride override = new LookupOverride(methodName, beanRef)__				override.setSource(extractSource(ele))__				overrides.addOverride(override)__			}_		}_	};parse,lookup,override,sub,elements,of,the,given,bean,element;public,void,parse,lookup,override,sub,elements,element,bean,ele,method,overrides,overrides,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,ele,element,node,string,method,name,ele,get,attribute,string,bean,ref,ele,get,attribute,lookup,override,override,new,lookup,override,method,name,bean,ref,override,set,source,extract,source,ele,overrides,add,override,override
BeanDefinitionParserDelegate -> public void parseLookupOverrideSubElements(Element beanEle, MethodOverrides overrides);1431958785;Parse lookup-override sub-elements of the given bean element.;public void parseLookupOverrideSubElements(Element beanEle, MethodOverrides overrides) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, LOOKUP_METHOD_ELEMENT)) {_				Element ele = (Element) node__				String methodName = ele.getAttribute(NAME_ATTRIBUTE)__				String beanRef = ele.getAttribute(BEAN_ELEMENT)__				LookupOverride override = new LookupOverride(methodName, beanRef)__				override.setSource(extractSource(ele))__				overrides.addOverride(override)__			}_		}_	};parse,lookup,override,sub,elements,of,the,given,bean,element;public,void,parse,lookup,override,sub,elements,element,bean,ele,method,overrides,overrides,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,ele,element,node,string,method,name,ele,get,attribute,string,bean,ref,ele,get,attribute,lookup,override,override,new,lookup,override,method,name,bean,ref,override,set,source,extract,source,ele,overrides,add,override,override
BeanDefinitionParserDelegate -> public void parseLookupOverrideSubElements(Element beanEle, MethodOverrides overrides);1432135182;Parse lookup-override sub-elements of the given bean element.;public void parseLookupOverrideSubElements(Element beanEle, MethodOverrides overrides) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, LOOKUP_METHOD_ELEMENT)) {_				Element ele = (Element) node__				String methodName = ele.getAttribute(NAME_ATTRIBUTE)__				String beanRef = ele.getAttribute(BEAN_ELEMENT)__				LookupOverride override = new LookupOverride(methodName, beanRef)__				override.setSource(extractSource(ele))__				overrides.addOverride(override)__			}_		}_	};parse,lookup,override,sub,elements,of,the,given,bean,element;public,void,parse,lookup,override,sub,elements,element,bean,ele,method,overrides,overrides,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,ele,element,node,string,method,name,ele,get,attribute,string,bean,ref,ele,get,attribute,lookup,override,override,new,lookup,override,method,name,bean,ref,override,set,source,extract,source,ele,overrides,add,override,override
BeanDefinitionParserDelegate -> public void parseLookupOverrideSubElements(Element beanEle, MethodOverrides overrides);1447323728;Parse lookup-override sub-elements of the given bean element.;public void parseLookupOverrideSubElements(Element beanEle, MethodOverrides overrides) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, LOOKUP_METHOD_ELEMENT)) {_				Element ele = (Element) node__				String methodName = ele.getAttribute(NAME_ATTRIBUTE)__				String beanRef = ele.getAttribute(BEAN_ELEMENT)__				LookupOverride override = new LookupOverride(methodName, beanRef)__				override.setSource(extractSource(ele))__				overrides.addOverride(override)__			}_		}_	};parse,lookup,override,sub,elements,of,the,given,bean,element;public,void,parse,lookup,override,sub,elements,element,bean,ele,method,overrides,overrides,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,ele,element,node,string,method,name,ele,get,attribute,string,bean,ref,ele,get,attribute,lookup,override,override,new,lookup,override,method,name,bean,ref,override,set,source,extract,source,ele,overrides,add,override,override
BeanDefinitionParserDelegate -> public void parseLookupOverrideSubElements(Element beanEle, MethodOverrides overrides);1467726769;Parse lookup-override sub-elements of the given bean element.;public void parseLookupOverrideSubElements(Element beanEle, MethodOverrides overrides) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, LOOKUP_METHOD_ELEMENT)) {_				Element ele = (Element) node__				String methodName = ele.getAttribute(NAME_ATTRIBUTE)__				String beanRef = ele.getAttribute(BEAN_ELEMENT)__				LookupOverride override = new LookupOverride(methodName, beanRef)__				override.setSource(extractSource(ele))__				overrides.addOverride(override)__			}_		}_	};parse,lookup,override,sub,elements,of,the,given,bean,element;public,void,parse,lookup,override,sub,elements,element,bean,ele,method,overrides,overrides,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,ele,element,node,string,method,name,ele,get,attribute,string,bean,ref,ele,get,attribute,lookup,override,override,new,lookup,override,method,name,bean,ref,override,set,source,extract,source,ele,overrides,add,override,override
BeanDefinitionParserDelegate -> public void parseLookupOverrideSubElements(Element beanEle, MethodOverrides overrides);1467730834;Parse lookup-override sub-elements of the given bean element.;public void parseLookupOverrideSubElements(Element beanEle, MethodOverrides overrides) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, LOOKUP_METHOD_ELEMENT)) {_				Element ele = (Element) node__				String methodName = ele.getAttribute(NAME_ATTRIBUTE)__				String beanRef = ele.getAttribute(BEAN_ELEMENT)__				LookupOverride override = new LookupOverride(methodName, beanRef)__				override.setSource(extractSource(ele))__				overrides.addOverride(override)__			}_		}_	};parse,lookup,override,sub,elements,of,the,given,bean,element;public,void,parse,lookup,override,sub,elements,element,bean,ele,method,overrides,overrides,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,ele,element,node,string,method,name,ele,get,attribute,string,bean,ref,ele,get,attribute,lookup,override,override,new,lookup,override,method,name,bean,ref,override,set,source,extract,source,ele,overrides,add,override,override
BeanDefinitionParserDelegate -> public void parseLookupOverrideSubElements(Element beanEle, MethodOverrides overrides);1467744603;Parse lookup-override sub-elements of the given bean element.;public void parseLookupOverrideSubElements(Element beanEle, MethodOverrides overrides) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, LOOKUP_METHOD_ELEMENT)) {_				Element ele = (Element) node__				String methodName = ele.getAttribute(NAME_ATTRIBUTE)__				String beanRef = ele.getAttribute(BEAN_ELEMENT)__				LookupOverride override = new LookupOverride(methodName, beanRef)__				override.setSource(extractSource(ele))__				overrides.addOverride(override)__			}_		}_	};parse,lookup,override,sub,elements,of,the,given,bean,element;public,void,parse,lookup,override,sub,elements,element,bean,ele,method,overrides,overrides,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,ele,element,node,string,method,name,ele,get,attribute,string,bean,ref,ele,get,attribute,lookup,override,override,new,lookup,override,method,name,bean,ref,override,set,source,extract,source,ele,overrides,add,override,override
BeanDefinitionParserDelegate -> public void parseLookupOverrideSubElements(Element beanEle, MethodOverrides overrides);1487245676;Parse lookup-override sub-elements of the given bean element.;public void parseLookupOverrideSubElements(Element beanEle, MethodOverrides overrides) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, LOOKUP_METHOD_ELEMENT)) {_				Element ele = (Element) node__				String methodName = ele.getAttribute(NAME_ATTRIBUTE)__				String beanRef = ele.getAttribute(BEAN_ELEMENT)__				LookupOverride override = new LookupOverride(methodName, beanRef)__				override.setSource(extractSource(ele))__				overrides.addOverride(override)__			}_		}_	};parse,lookup,override,sub,elements,of,the,given,bean,element;public,void,parse,lookup,override,sub,elements,element,bean,ele,method,overrides,overrides,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,ele,element,node,string,method,name,ele,get,attribute,string,bean,ref,ele,get,attribute,lookup,override,override,new,lookup,override,method,name,bean,ref,override,set,source,extract,source,ele,overrides,add,override,override
BeanDefinitionParserDelegate -> public void parseLookupOverrideSubElements(Element beanEle, MethodOverrides overrides);1487255851;Parse lookup-override sub-elements of the given bean element.;public void parseLookupOverrideSubElements(Element beanEle, MethodOverrides overrides) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, LOOKUP_METHOD_ELEMENT)) {_				Element ele = (Element) node__				String methodName = ele.getAttribute(NAME_ATTRIBUTE)__				String beanRef = ele.getAttribute(BEAN_ELEMENT)__				LookupOverride override = new LookupOverride(methodName, beanRef)__				override.setSource(extractSource(ele))__				overrides.addOverride(override)__			}_		}_	};parse,lookup,override,sub,elements,of,the,given,bean,element;public,void,parse,lookup,override,sub,elements,element,bean,ele,method,overrides,overrides,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,ele,element,node,string,method,name,ele,get,attribute,string,bean,ref,ele,get,attribute,lookup,override,override,new,lookup,override,method,name,bean,ref,override,set,source,extract,source,ele,overrides,add,override,override
BeanDefinitionParserDelegate -> public void parseLookupOverrideSubElements(Element beanEle, MethodOverrides overrides);1494586217;Parse lookup-override sub-elements of the given bean element.;public void parseLookupOverrideSubElements(Element beanEle, MethodOverrides overrides) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, LOOKUP_METHOD_ELEMENT)) {_				Element ele = (Element) node__				String methodName = ele.getAttribute(NAME_ATTRIBUTE)__				String beanRef = ele.getAttribute(BEAN_ELEMENT)__				LookupOverride override = new LookupOverride(methodName, beanRef)__				override.setSource(extractSource(ele))__				overrides.addOverride(override)__			}_		}_	};parse,lookup,override,sub,elements,of,the,given,bean,element;public,void,parse,lookup,override,sub,elements,element,bean,ele,method,overrides,overrides,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,ele,element,node,string,method,name,ele,get,attribute,string,bean,ref,ele,get,attribute,lookup,override,override,new,lookup,override,method,name,bean,ref,override,set,source,extract,source,ele,overrides,add,override,override
BeanDefinitionParserDelegate -> public void parseLookupOverrideSubElements(Element beanEle, MethodOverrides overrides);1495868221;Parse lookup-override sub-elements of the given bean element.;public void parseLookupOverrideSubElements(Element beanEle, MethodOverrides overrides) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, LOOKUP_METHOD_ELEMENT)) {_				Element ele = (Element) node__				String methodName = ele.getAttribute(NAME_ATTRIBUTE)__				String beanRef = ele.getAttribute(BEAN_ELEMENT)__				LookupOverride override = new LookupOverride(methodName, beanRef)__				override.setSource(extractSource(ele))__				overrides.addOverride(override)__			}_		}_	};parse,lookup,override,sub,elements,of,the,given,bean,element;public,void,parse,lookup,override,sub,elements,element,bean,ele,method,overrides,overrides,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,ele,element,node,string,method,name,ele,get,attribute,string,bean,ref,ele,get,attribute,lookup,override,override,new,lookup,override,method,name,bean,ref,override,set,source,extract,source,ele,overrides,add,override,override
BeanDefinitionParserDelegate -> public void parseLookupOverrideSubElements(Element beanEle, MethodOverrides overrides);1496259743;Parse lookup-override sub-elements of the given bean element.;public void parseLookupOverrideSubElements(Element beanEle, MethodOverrides overrides) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, LOOKUP_METHOD_ELEMENT)) {_				Element ele = (Element) node__				String methodName = ele.getAttribute(NAME_ATTRIBUTE)__				String beanRef = ele.getAttribute(BEAN_ELEMENT)__				LookupOverride override = new LookupOverride(methodName, beanRef)__				override.setSource(extractSource(ele))__				overrides.addOverride(override)__			}_		}_	};parse,lookup,override,sub,elements,of,the,given,bean,element;public,void,parse,lookup,override,sub,elements,element,bean,ele,method,overrides,overrides,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,ele,element,node,string,method,name,ele,get,attribute,string,bean,ref,ele,get,attribute,lookup,override,override,new,lookup,override,method,name,bean,ref,override,set,source,extract,source,ele,overrides,add,override,override
BeanDefinitionParserDelegate -> public void parseLookupOverrideSubElements(Element beanEle, MethodOverrides overrides);1496837955;Parse lookup-override sub-elements of the given bean element.;public void parseLookupOverrideSubElements(Element beanEle, MethodOverrides overrides) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, LOOKUP_METHOD_ELEMENT)) {_				Element ele = (Element) node__				String methodName = ele.getAttribute(NAME_ATTRIBUTE)__				String beanRef = ele.getAttribute(BEAN_ELEMENT)__				LookupOverride override = new LookupOverride(methodName, beanRef)__				override.setSource(extractSource(ele))__				overrides.addOverride(override)__			}_		}_	};parse,lookup,override,sub,elements,of,the,given,bean,element;public,void,parse,lookup,override,sub,elements,element,bean,ele,method,overrides,overrides,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,ele,element,node,string,method,name,ele,get,attribute,string,bean,ref,ele,get,attribute,lookup,override,override,new,lookup,override,method,name,bean,ref,override,set,source,extract,source,ele,overrides,add,override,override
BeanDefinitionParserDelegate -> public void parseLookupOverrideSubElements(Element beanEle, MethodOverrides overrides);1503008029;Parse lookup-override sub-elements of the given bean element.;public void parseLookupOverrideSubElements(Element beanEle, MethodOverrides overrides) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, LOOKUP_METHOD_ELEMENT)) {_				Element ele = (Element) node__				String methodName = ele.getAttribute(NAME_ATTRIBUTE)__				String beanRef = ele.getAttribute(BEAN_ELEMENT)__				LookupOverride override = new LookupOverride(methodName, beanRef)__				override.setSource(extractSource(ele))__				overrides.addOverride(override)__			}_		}_	};parse,lookup,override,sub,elements,of,the,given,bean,element;public,void,parse,lookup,override,sub,elements,element,bean,ele,method,overrides,overrides,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,ele,element,node,string,method,name,ele,get,attribute,string,bean,ref,ele,get,attribute,lookup,override,override,new,lookup,override,method,name,bean,ref,override,set,source,extract,source,ele,overrides,add,override,override
BeanDefinitionParserDelegate -> public void parseLookupOverrideSubElements(Element beanEle, MethodOverrides overrides);1519513303;Parse lookup-override sub-elements of the given bean element.;public void parseLookupOverrideSubElements(Element beanEle, MethodOverrides overrides) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, LOOKUP_METHOD_ELEMENT)) {_				Element ele = (Element) node__				String methodName = ele.getAttribute(NAME_ATTRIBUTE)__				String beanRef = ele.getAttribute(BEAN_ELEMENT)__				LookupOverride override = new LookupOverride(methodName, beanRef)__				override.setSource(extractSource(ele))__				overrides.addOverride(override)__			}_		}_	};parse,lookup,override,sub,elements,of,the,given,bean,element;public,void,parse,lookup,override,sub,elements,element,bean,ele,method,overrides,overrides,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,ele,element,node,string,method,name,ele,get,attribute,string,bean,ref,ele,get,attribute,lookup,override,override,new,lookup,override,method,name,bean,ref,override,set,source,extract,source,ele,overrides,add,override,override
BeanDefinitionParserDelegate -> public void parseLookupOverrideSubElements(Element beanEle, MethodOverrides overrides);1530174524;Parse lookup-override sub-elements of the given bean element.;public void parseLookupOverrideSubElements(Element beanEle, MethodOverrides overrides) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, LOOKUP_METHOD_ELEMENT)) {_				Element ele = (Element) node__				String methodName = ele.getAttribute(NAME_ATTRIBUTE)__				String beanRef = ele.getAttribute(BEAN_ELEMENT)__				LookupOverride override = new LookupOverride(methodName, beanRef)__				override.setSource(extractSource(ele))__				overrides.addOverride(override)__			}_		}_	};parse,lookup,override,sub,elements,of,the,given,bean,element;public,void,parse,lookup,override,sub,elements,element,bean,ele,method,overrides,overrides,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,ele,element,node,string,method,name,ele,get,attribute,string,bean,ref,ele,get,attribute,lookup,override,override,new,lookup,override,method,name,bean,ref,override,set,source,extract,source,ele,overrides,add,override,override
BeanDefinitionParserDelegate -> public void parseLookupOverrideSubElements(Element beanEle, MethodOverrides overrides);1530190293;Parse lookup-override sub-elements of the given bean element.;public void parseLookupOverrideSubElements(Element beanEle, MethodOverrides overrides) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, LOOKUP_METHOD_ELEMENT)) {_				Element ele = (Element) node__				String methodName = ele.getAttribute(NAME_ATTRIBUTE)__				String beanRef = ele.getAttribute(BEAN_ELEMENT)__				LookupOverride override = new LookupOverride(methodName, beanRef)__				override.setSource(extractSource(ele))__				overrides.addOverride(override)__			}_		}_	};parse,lookup,override,sub,elements,of,the,given,bean,element;public,void,parse,lookup,override,sub,elements,element,bean,ele,method,overrides,overrides,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,ele,element,node,string,method,name,ele,get,attribute,string,bean,ref,ele,get,attribute,lookup,override,override,new,lookup,override,method,name,bean,ref,override,set,source,extract,source,ele,overrides,add,override,override
BeanDefinitionParserDelegate -> public void parseLookupOverrideSubElements(Element beanEle, MethodOverrides overrides);1532706365;Parse lookup-override sub-elements of the given bean element.;public void parseLookupOverrideSubElements(Element beanEle, MethodOverrides overrides) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, LOOKUP_METHOD_ELEMENT)) {_				Element ele = (Element) node__				String methodName = ele.getAttribute(NAME_ATTRIBUTE)__				String beanRef = ele.getAttribute(BEAN_ELEMENT)__				LookupOverride override = new LookupOverride(methodName, beanRef)__				override.setSource(extractSource(ele))__				overrides.addOverride(override)__			}_		}_	};parse,lookup,override,sub,elements,of,the,given,bean,element;public,void,parse,lookup,override,sub,elements,element,bean,ele,method,overrides,overrides,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,ele,element,node,string,method,name,ele,get,attribute,string,bean,ref,ele,get,attribute,lookup,override,override,new,lookup,override,method,name,bean,ref,override,set,source,extract,source,ele,overrides,add,override,override
BeanDefinitionParserDelegate -> public void parseLookupOverrideSubElements(Element beanEle, MethodOverrides overrides);1546958161;Parse lookup-override sub-elements of the given bean element.;public void parseLookupOverrideSubElements(Element beanEle, MethodOverrides overrides) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, LOOKUP_METHOD_ELEMENT)) {_				Element ele = (Element) node__				String methodName = ele.getAttribute(NAME_ATTRIBUTE)__				String beanRef = ele.getAttribute(BEAN_ELEMENT)__				LookupOverride override = new LookupOverride(methodName, beanRef)__				override.setSource(extractSource(ele))__				overrides.addOverride(override)__			}_		}_	};parse,lookup,override,sub,elements,of,the,given,bean,element;public,void,parse,lookup,override,sub,elements,element,bean,ele,method,overrides,overrides,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,ele,element,node,string,method,name,ele,get,attribute,string,bean,ref,ele,get,attribute,lookup,override,override,new,lookup,override,method,name,bean,ref,override,set,source,extract,source,ele,overrides,add,override,override
BeanDefinitionParserDelegate -> @Nullable 	public BeanDefinitionHolder parseBeanDefinitionElement(Element ele);1495868221;Parses the supplied {@code <bean>} element. May return {@code null}_if there were errors during parse. Errors are reported to the_{@link org.springframework.beans.factory.parsing.ProblemReporter}.;@Nullable_	public BeanDefinitionHolder parseBeanDefinitionElement(Element ele) {_		return parseBeanDefinitionElement(ele, null)__	};parses,the,supplied,code,bean,element,may,return,code,null,if,there,were,errors,during,parse,errors,are,reported,to,the,link,org,springframework,beans,factory,parsing,problem,reporter;nullable,public,bean,definition,holder,parse,bean,definition,element,element,ele,return,parse,bean,definition,element,ele,null
BeanDefinitionParserDelegate -> @Nullable 	public BeanDefinitionHolder parseBeanDefinitionElement(Element ele);1496259743;Parses the supplied {@code <bean>} element. May return {@code null}_if there were errors during parse. Errors are reported to the_{@link org.springframework.beans.factory.parsing.ProblemReporter}.;@Nullable_	public BeanDefinitionHolder parseBeanDefinitionElement(Element ele) {_		return parseBeanDefinitionElement(ele, null)__	};parses,the,supplied,code,bean,element,may,return,code,null,if,there,were,errors,during,parse,errors,are,reported,to,the,link,org,springframework,beans,factory,parsing,problem,reporter;nullable,public,bean,definition,holder,parse,bean,definition,element,element,ele,return,parse,bean,definition,element,ele,null
BeanDefinitionParserDelegate -> @Nullable 	public BeanDefinitionHolder parseBeanDefinitionElement(Element ele);1496837955;Parses the supplied {@code <bean>} element. May return {@code null}_if there were errors during parse. Errors are reported to the_{@link org.springframework.beans.factory.parsing.ProblemReporter}.;@Nullable_	public BeanDefinitionHolder parseBeanDefinitionElement(Element ele) {_		return parseBeanDefinitionElement(ele, null)__	};parses,the,supplied,code,bean,element,may,return,code,null,if,there,were,errors,during,parse,errors,are,reported,to,the,link,org,springframework,beans,factory,parsing,problem,reporter;nullable,public,bean,definition,holder,parse,bean,definition,element,element,ele,return,parse,bean,definition,element,ele,null
BeanDefinitionParserDelegate -> @Nullable 	public BeanDefinitionHolder parseBeanDefinitionElement(Element ele);1503008029;Parses the supplied {@code <bean>} element. May return {@code null}_if there were errors during parse. Errors are reported to the_{@link org.springframework.beans.factory.parsing.ProblemReporter}.;@Nullable_	public BeanDefinitionHolder parseBeanDefinitionElement(Element ele) {_		return parseBeanDefinitionElement(ele, null)__	};parses,the,supplied,code,bean,element,may,return,code,null,if,there,were,errors,during,parse,errors,are,reported,to,the,link,org,springframework,beans,factory,parsing,problem,reporter;nullable,public,bean,definition,holder,parse,bean,definition,element,element,ele,return,parse,bean,definition,element,ele,null
BeanDefinitionParserDelegate -> @Nullable 	public BeanDefinitionHolder parseBeanDefinitionElement(Element ele);1519513303;Parses the supplied {@code <bean>} element. May return {@code null}_if there were errors during parse. Errors are reported to the_{@link org.springframework.beans.factory.parsing.ProblemReporter}.;@Nullable_	public BeanDefinitionHolder parseBeanDefinitionElement(Element ele) {_		return parseBeanDefinitionElement(ele, null)__	};parses,the,supplied,code,bean,element,may,return,code,null,if,there,were,errors,during,parse,errors,are,reported,to,the,link,org,springframework,beans,factory,parsing,problem,reporter;nullable,public,bean,definition,holder,parse,bean,definition,element,element,ele,return,parse,bean,definition,element,ele,null
BeanDefinitionParserDelegate -> @Nullable 	public BeanDefinitionHolder parseBeanDefinitionElement(Element ele);1530174524;Parses the supplied {@code <bean>} element. May return {@code null}_if there were errors during parse. Errors are reported to the_{@link org.springframework.beans.factory.parsing.ProblemReporter}.;@Nullable_	public BeanDefinitionHolder parseBeanDefinitionElement(Element ele) {_		return parseBeanDefinitionElement(ele, null)__	};parses,the,supplied,code,bean,element,may,return,code,null,if,there,were,errors,during,parse,errors,are,reported,to,the,link,org,springframework,beans,factory,parsing,problem,reporter;nullable,public,bean,definition,holder,parse,bean,definition,element,element,ele,return,parse,bean,definition,element,ele,null
BeanDefinitionParserDelegate -> @Nullable 	public BeanDefinitionHolder parseBeanDefinitionElement(Element ele);1530190293;Parses the supplied {@code <bean>} element. May return {@code null}_if there were errors during parse. Errors are reported to the_{@link org.springframework.beans.factory.parsing.ProblemReporter}.;@Nullable_	public BeanDefinitionHolder parseBeanDefinitionElement(Element ele) {_		return parseBeanDefinitionElement(ele, null)__	};parses,the,supplied,code,bean,element,may,return,code,null,if,there,were,errors,during,parse,errors,are,reported,to,the,link,org,springframework,beans,factory,parsing,problem,reporter;nullable,public,bean,definition,holder,parse,bean,definition,element,element,ele,return,parse,bean,definition,element,ele,null
BeanDefinitionParserDelegate -> @Nullable 	public BeanDefinitionHolder parseBeanDefinitionElement(Element ele);1532706365;Parses the supplied {@code <bean>} element. May return {@code null}_if there were errors during parse. Errors are reported to the_{@link org.springframework.beans.factory.parsing.ProblemReporter}.;@Nullable_	public BeanDefinitionHolder parseBeanDefinitionElement(Element ele) {_		return parseBeanDefinitionElement(ele, null)__	};parses,the,supplied,code,bean,element,may,return,code,null,if,there,were,errors,during,parse,errors,are,reported,to,the,link,org,springframework,beans,factory,parsing,problem,reporter;nullable,public,bean,definition,holder,parse,bean,definition,element,element,ele,return,parse,bean,definition,element,ele,null
BeanDefinitionParserDelegate -> @Nullable 	public BeanDefinitionHolder parseBeanDefinitionElement(Element ele);1546958161;Parses the supplied {@code <bean>} element. May return {@code null}_if there were errors during parse. Errors are reported to the_{@link org.springframework.beans.factory.parsing.ProblemReporter}.;@Nullable_	public BeanDefinitionHolder parseBeanDefinitionElement(Element ele) {_		return parseBeanDefinitionElement(ele, null)__	};parses,the,supplied,code,bean,element,may,return,code,null,if,there,were,errors,during,parse,errors,are,reported,to,the,link,org,springframework,beans,factory,parsing,problem,reporter;nullable,public,bean,definition,holder,parse,bean,definition,element,element,ele,return,parse,bean,definition,element,ele,null
BeanDefinitionParserDelegate -> protected void error(String message, Element source);1328020251;Report an error with the given message for the given source element.;protected void error(String message, Element source) {_		this.readerContext.error(message, source, this.parseState.snapshot())__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,element,source,this,reader,context,error,message,source,this,parse,state,snapshot
BeanDefinitionParserDelegate -> protected void error(String message, Element source);1335774711;Report an error with the given message for the given source element.;protected void error(String message, Element source) {_		this.readerContext.error(message, source, this.parseState.snapshot())__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,element,source,this,reader,context,error,message,source,this,parse,state,snapshot
BeanDefinitionParserDelegate -> protected void error(String message, Element source);1337341719;Report an error with the given message for the given source element.;protected void error(String message, Element source) {_		this.readerContext.error(message, source, this.parseState.snapshot())__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,element,source,this,reader,context,error,message,source,this,parse,state,snapshot
BeanDefinitionParserDelegate -> protected void error(String message, Element source);1351392612;Report an error with the given message for the given source element.;protected void error(String message, Element source) {_		this.readerContext.error(message, source, this.parseState.snapshot())__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,element,source,this,reader,context,error,message,source,this,parse,state,snapshot
BeanDefinitionParserDelegate -> protected void error(String message, Element source);1351696936;Report an error with the given message for the given source element.;protected void error(String message, Element source) {_		this.readerContext.error(message, source, this.parseState.snapshot())__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,element,source,this,reader,context,error,message,source,this,parse,state,snapshot
BeanDefinitionParserDelegate -> protected void error(String message, Element source);1356735495;Report an error with the given message for the given source element.;protected void error(String message, Element source) {_		this.readerContext.error(message, source, this.parseState.snapshot())__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,element,source,this,reader,context,error,message,source,this,parse,state,snapshot
BeanDefinitionParserDelegate -> protected void error(String message, Element source);1357119417;Report an error with the given message for the given source element.;protected void error(String message, Element source) {_		this.readerContext.error(message, source, this.parseState.snapshot())__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,element,source,this,reader,context,error,message,source,this,parse,state,snapshot
BeanDefinitionParserDelegate -> protected void error(String message, Element source);1367943112;Report an error with the given message for the given source element.;protected void error(String message, Element source) {_		this.readerContext.error(message, source, this.parseState.snapshot())__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,element,source,this,reader,context,error,message,source,this,parse,state,snapshot
BeanDefinitionParserDelegate -> protected void error(String message, Element source);1382030648;Report an error with the given message for the given source element.;protected void error(String message, Element source) {_		this.readerContext.error(message, source, this.parseState.snapshot())__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,element,source,this,reader,context,error,message,source,this,parse,state,snapshot
BeanDefinitionParserDelegate -> protected void error(String message, Element source);1385412762;Report an error with the given message for the given source element.;protected void error(String message, Element source) {_		this.readerContext.error(message, source, this.parseState.snapshot())__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,element,source,this,reader,context,error,message,source,this,parse,state,snapshot
BeanDefinitionParserDelegate -> protected void error(String message, Element source);1410953197;Report an error with the given message for the given source element.;protected void error(String message, Element source) {_		this.readerContext.error(message, source, this.parseState.snapshot())__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,element,source,this,reader,context,error,message,source,this,parse,state,snapshot
BeanDefinitionParserDelegate -> protected void error(String message, Element source);1411599760;Report an error with the given message for the given source element.;protected void error(String message, Element source) {_		this.readerContext.error(message, source, this.parseState.snapshot())__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,element,source,this,reader,context,error,message,source,this,parse,state,snapshot
BeanDefinitionParserDelegate -> protected void error(String message, Element source);1419966315;Report an error with the given message for the given source element.;protected void error(String message, Element source) {_		this.readerContext.error(message, source, this.parseState.snapshot())__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,element,source,this,reader,context,error,message,source,this,parse,state,snapshot
BeanDefinitionParserDelegate -> protected void error(String message, Element source);1431958785;Report an error with the given message for the given source element.;protected void error(String message, Element source) {_		this.readerContext.error(message, source, this.parseState.snapshot())__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,element,source,this,reader,context,error,message,source,this,parse,state,snapshot
BeanDefinitionParserDelegate -> protected void error(String message, Element source);1432135182;Report an error with the given message for the given source element.;protected void error(String message, Element source) {_		this.readerContext.error(message, source, this.parseState.snapshot())__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,element,source,this,reader,context,error,message,source,this,parse,state,snapshot
BeanDefinitionParserDelegate -> protected void error(String message, Element source);1447323728;Report an error with the given message for the given source element.;protected void error(String message, Element source) {_		this.readerContext.error(message, source, this.parseState.snapshot())__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,element,source,this,reader,context,error,message,source,this,parse,state,snapshot
BeanDefinitionParserDelegate -> protected void error(String message, Element source);1467726769;Report an error with the given message for the given source element.;protected void error(String message, Element source) {_		this.readerContext.error(message, source, this.parseState.snapshot())__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,element,source,this,reader,context,error,message,source,this,parse,state,snapshot
BeanDefinitionParserDelegate -> protected void error(String message, Element source);1467730834;Report an error with the given message for the given source element.;protected void error(String message, Element source) {_		this.readerContext.error(message, source, this.parseState.snapshot())__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,element,source,this,reader,context,error,message,source,this,parse,state,snapshot
BeanDefinitionParserDelegate -> protected void error(String message, Element source);1467744603;Report an error with the given message for the given source element.;protected void error(String message, Element source) {_		this.readerContext.error(message, source, this.parseState.snapshot())__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,element,source,this,reader,context,error,message,source,this,parse,state,snapshot
BeanDefinitionParserDelegate -> protected void error(String message, Element source);1487245676;Report an error with the given message for the given source element.;protected void error(String message, Element source) {_		this.readerContext.error(message, source, this.parseState.snapshot())__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,element,source,this,reader,context,error,message,source,this,parse,state,snapshot
BeanDefinitionParserDelegate -> protected void error(String message, Element source);1487255851;Report an error with the given message for the given source element.;protected void error(String message, Element source) {_		this.readerContext.error(message, source, this.parseState.snapshot())__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,element,source,this,reader,context,error,message,source,this,parse,state,snapshot
BeanDefinitionParserDelegate -> protected void error(String message, Element source);1494586217;Report an error with the given message for the given source element.;protected void error(String message, Element source) {_		this.readerContext.error(message, source, this.parseState.snapshot())__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,element,source,this,reader,context,error,message,source,this,parse,state,snapshot
BeanDefinitionParserDelegate -> protected void error(String message, Element source);1495868221;Report an error with the given message for the given source element.;protected void error(String message, Element source) {_		this.readerContext.error(message, source, this.parseState.snapshot())__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,element,source,this,reader,context,error,message,source,this,parse,state,snapshot
BeanDefinitionParserDelegate -> protected void error(String message, Element source);1496259743;Report an error with the given message for the given source element.;protected void error(String message, Element source) {_		this.readerContext.error(message, source, this.parseState.snapshot())__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,element,source,this,reader,context,error,message,source,this,parse,state,snapshot
BeanDefinitionParserDelegate -> protected void error(String message, Element source);1496837955;Report an error with the given message for the given source element.;protected void error(String message, Element source) {_		this.readerContext.error(message, source, this.parseState.snapshot())__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,element,source,this,reader,context,error,message,source,this,parse,state,snapshot
BeanDefinitionParserDelegate -> protected void error(String message, Element source);1503008029;Report an error with the given message for the given source element.;protected void error(String message, Element source) {_		this.readerContext.error(message, source, this.parseState.snapshot())__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,element,source,this,reader,context,error,message,source,this,parse,state,snapshot
BeanDefinitionParserDelegate -> protected void error(String message, Element source);1519513303;Report an error with the given message for the given source element.;protected void error(String message, Element source) {_		this.readerContext.error(message, source, this.parseState.snapshot())__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,element,source,this,reader,context,error,message,source,this,parse,state,snapshot
BeanDefinitionParserDelegate -> protected void error(String message, Element source);1530174524;Report an error with the given message for the given source element.;protected void error(String message, Element source) {_		this.readerContext.error(message, source, this.parseState.snapshot())__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,element,source,this,reader,context,error,message,source,this,parse,state,snapshot
BeanDefinitionParserDelegate -> protected void error(String message, Element source);1530190293;Report an error with the given message for the given source element.;protected void error(String message, Element source) {_		this.readerContext.error(message, source, this.parseState.snapshot())__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,element,source,this,reader,context,error,message,source,this,parse,state,snapshot
BeanDefinitionParserDelegate -> protected void error(String message, Element source);1532706365;Report an error with the given message for the given source element.;protected void error(String message, Element source) {_		this.readerContext.error(message, source, this.parseState.snapshot())__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,element,source,this,reader,context,error,message,source,this,parse,state,snapshot
BeanDefinitionParserDelegate -> protected void error(String message, Element source);1546958161;Report an error with the given message for the given source element.;protected void error(String message, Element source) {_		this.readerContext.error(message, source, this.parseState.snapshot())__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,element,source,this,reader,context,error,message,source,this,parse,state,snapshot
BeanDefinitionParserDelegate -> public Set parseSetElement(Element collectionEle, BeanDefinition bd);1328020251;Parse a set element.;public Set parseSetElement(Element collectionEle, BeanDefinition bd) {_		String defaultElementType = collectionEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = collectionEle.getChildNodes()__		ManagedSet<Object> target = new ManagedSet<Object>(nl.getLength())__		target.setSource(extractSource(collectionEle))__		target.setElementTypeName(defaultElementType)__		target.setMergeEnabled(parseMergeAttribute(collectionEle))__		parseCollectionElements(nl, target, bd, defaultElementType)__		return target__	};parse,a,set,element;public,set,parse,set,element,element,collection,ele,bean,definition,bd,string,default,element,type,collection,ele,get,attribute,node,list,nl,collection,ele,get,child,nodes,managed,set,object,target,new,managed,set,object,nl,get,length,target,set,source,extract,source,collection,ele,target,set,element,type,name,default,element,type,target,set,merge,enabled,parse,merge,attribute,collection,ele,parse,collection,elements,nl,target,bd,default,element,type,return,target
BeanDefinitionParserDelegate -> public Set parseSetElement(Element collectionEle, BeanDefinition bd);1335774711;Parse a set element.;public Set parseSetElement(Element collectionEle, BeanDefinition bd) {_		String defaultElementType = collectionEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = collectionEle.getChildNodes()__		ManagedSet<Object> target = new ManagedSet<Object>(nl.getLength())__		target.setSource(extractSource(collectionEle))__		target.setElementTypeName(defaultElementType)__		target.setMergeEnabled(parseMergeAttribute(collectionEle))__		parseCollectionElements(nl, target, bd, defaultElementType)__		return target__	};parse,a,set,element;public,set,parse,set,element,element,collection,ele,bean,definition,bd,string,default,element,type,collection,ele,get,attribute,node,list,nl,collection,ele,get,child,nodes,managed,set,object,target,new,managed,set,object,nl,get,length,target,set,source,extract,source,collection,ele,target,set,element,type,name,default,element,type,target,set,merge,enabled,parse,merge,attribute,collection,ele,parse,collection,elements,nl,target,bd,default,element,type,return,target
BeanDefinitionParserDelegate -> public Set parseSetElement(Element collectionEle, BeanDefinition bd);1337341719;Parse a set element.;public Set parseSetElement(Element collectionEle, BeanDefinition bd) {_		String defaultElementType = collectionEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = collectionEle.getChildNodes()__		ManagedSet<Object> target = new ManagedSet<Object>(nl.getLength())__		target.setSource(extractSource(collectionEle))__		target.setElementTypeName(defaultElementType)__		target.setMergeEnabled(parseMergeAttribute(collectionEle))__		parseCollectionElements(nl, target, bd, defaultElementType)__		return target__	};parse,a,set,element;public,set,parse,set,element,element,collection,ele,bean,definition,bd,string,default,element,type,collection,ele,get,attribute,node,list,nl,collection,ele,get,child,nodes,managed,set,object,target,new,managed,set,object,nl,get,length,target,set,source,extract,source,collection,ele,target,set,element,type,name,default,element,type,target,set,merge,enabled,parse,merge,attribute,collection,ele,parse,collection,elements,nl,target,bd,default,element,type,return,target
BeanDefinitionParserDelegate -> public Set parseSetElement(Element collectionEle, BeanDefinition bd);1351392612;Parse a set element.;public Set parseSetElement(Element collectionEle, BeanDefinition bd) {_		String defaultElementType = collectionEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = collectionEle.getChildNodes()__		ManagedSet<Object> target = new ManagedSet<Object>(nl.getLength())__		target.setSource(extractSource(collectionEle))__		target.setElementTypeName(defaultElementType)__		target.setMergeEnabled(parseMergeAttribute(collectionEle))__		parseCollectionElements(nl, target, bd, defaultElementType)__		return target__	};parse,a,set,element;public,set,parse,set,element,element,collection,ele,bean,definition,bd,string,default,element,type,collection,ele,get,attribute,node,list,nl,collection,ele,get,child,nodes,managed,set,object,target,new,managed,set,object,nl,get,length,target,set,source,extract,source,collection,ele,target,set,element,type,name,default,element,type,target,set,merge,enabled,parse,merge,attribute,collection,ele,parse,collection,elements,nl,target,bd,default,element,type,return,target
BeanDefinitionParserDelegate -> public Set parseSetElement(Element collectionEle, BeanDefinition bd);1351696936;Parse a set element.;public Set parseSetElement(Element collectionEle, BeanDefinition bd) {_		String defaultElementType = collectionEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = collectionEle.getChildNodes()__		ManagedSet<Object> target = new ManagedSet<Object>(nl.getLength())__		target.setSource(extractSource(collectionEle))__		target.setElementTypeName(defaultElementType)__		target.setMergeEnabled(parseMergeAttribute(collectionEle))__		parseCollectionElements(nl, target, bd, defaultElementType)__		return target__	};parse,a,set,element;public,set,parse,set,element,element,collection,ele,bean,definition,bd,string,default,element,type,collection,ele,get,attribute,node,list,nl,collection,ele,get,child,nodes,managed,set,object,target,new,managed,set,object,nl,get,length,target,set,source,extract,source,collection,ele,target,set,element,type,name,default,element,type,target,set,merge,enabled,parse,merge,attribute,collection,ele,parse,collection,elements,nl,target,bd,default,element,type,return,target
BeanDefinitionParserDelegate -> public Set parseSetElement(Element collectionEle, BeanDefinition bd);1356735495;Parse a set element.;public Set parseSetElement(Element collectionEle, BeanDefinition bd) {_		String defaultElementType = collectionEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = collectionEle.getChildNodes()__		ManagedSet<Object> target = new ManagedSet<Object>(nl.getLength())__		target.setSource(extractSource(collectionEle))__		target.setElementTypeName(defaultElementType)__		target.setMergeEnabled(parseMergeAttribute(collectionEle))__		parseCollectionElements(nl, target, bd, defaultElementType)__		return target__	};parse,a,set,element;public,set,parse,set,element,element,collection,ele,bean,definition,bd,string,default,element,type,collection,ele,get,attribute,node,list,nl,collection,ele,get,child,nodes,managed,set,object,target,new,managed,set,object,nl,get,length,target,set,source,extract,source,collection,ele,target,set,element,type,name,default,element,type,target,set,merge,enabled,parse,merge,attribute,collection,ele,parse,collection,elements,nl,target,bd,default,element,type,return,target
BeanDefinitionParserDelegate -> public Set parseSetElement(Element collectionEle, BeanDefinition bd);1357119417;Parse a set element.;public Set parseSetElement(Element collectionEle, BeanDefinition bd) {_		String defaultElementType = collectionEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = collectionEle.getChildNodes()__		ManagedSet<Object> target = new ManagedSet<Object>(nl.getLength())__		target.setSource(extractSource(collectionEle))__		target.setElementTypeName(defaultElementType)__		target.setMergeEnabled(parseMergeAttribute(collectionEle))__		parseCollectionElements(nl, target, bd, defaultElementType)__		return target__	};parse,a,set,element;public,set,parse,set,element,element,collection,ele,bean,definition,bd,string,default,element,type,collection,ele,get,attribute,node,list,nl,collection,ele,get,child,nodes,managed,set,object,target,new,managed,set,object,nl,get,length,target,set,source,extract,source,collection,ele,target,set,element,type,name,default,element,type,target,set,merge,enabled,parse,merge,attribute,collection,ele,parse,collection,elements,nl,target,bd,default,element,type,return,target
BeanDefinitionParserDelegate -> public Set parseSetElement(Element collectionEle, BeanDefinition bd);1367943112;Parse a set element.;public Set parseSetElement(Element collectionEle, BeanDefinition bd) {_		String defaultElementType = collectionEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = collectionEle.getChildNodes()__		ManagedSet<Object> target = new ManagedSet<Object>(nl.getLength())__		target.setSource(extractSource(collectionEle))__		target.setElementTypeName(defaultElementType)__		target.setMergeEnabled(parseMergeAttribute(collectionEle))__		parseCollectionElements(nl, target, bd, defaultElementType)__		return target__	};parse,a,set,element;public,set,parse,set,element,element,collection,ele,bean,definition,bd,string,default,element,type,collection,ele,get,attribute,node,list,nl,collection,ele,get,child,nodes,managed,set,object,target,new,managed,set,object,nl,get,length,target,set,source,extract,source,collection,ele,target,set,element,type,name,default,element,type,target,set,merge,enabled,parse,merge,attribute,collection,ele,parse,collection,elements,nl,target,bd,default,element,type,return,target
BeanDefinitionParserDelegate -> public Set parseSetElement(Element collectionEle, BeanDefinition bd);1382030648;Parse a set element.;public Set parseSetElement(Element collectionEle, BeanDefinition bd) {_		String defaultElementType = collectionEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = collectionEle.getChildNodes()__		ManagedSet<Object> target = new ManagedSet<Object>(nl.getLength())__		target.setSource(extractSource(collectionEle))__		target.setElementTypeName(defaultElementType)__		target.setMergeEnabled(parseMergeAttribute(collectionEle))__		parseCollectionElements(nl, target, bd, defaultElementType)__		return target__	};parse,a,set,element;public,set,parse,set,element,element,collection,ele,bean,definition,bd,string,default,element,type,collection,ele,get,attribute,node,list,nl,collection,ele,get,child,nodes,managed,set,object,target,new,managed,set,object,nl,get,length,target,set,source,extract,source,collection,ele,target,set,element,type,name,default,element,type,target,set,merge,enabled,parse,merge,attribute,collection,ele,parse,collection,elements,nl,target,bd,default,element,type,return,target
BeanDefinitionParserDelegate -> public Properties parsePropsElement(Element propsEle);1328020251;Parse a props element.;public Properties parsePropsElement(Element propsEle) {_		ManagedProperties props = new ManagedProperties()__		props.setSource(extractSource(propsEle))__		props.setMergeEnabled(parseMergeAttribute(propsEle))___		List<Element> propEles = DomUtils.getChildElementsByTagName(propsEle, PROP_ELEMENT)__		for (Element propEle : propEles) {_			String key = propEle.getAttribute(KEY_ATTRIBUTE)__			_			_			String value = DomUtils.getTextValue(propEle).trim()__			TypedStringValue keyHolder = new TypedStringValue(key)__			keyHolder.setSource(extractSource(propEle))__			TypedStringValue valueHolder = new TypedStringValue(value)__			valueHolder.setSource(extractSource(propEle))__			props.put(keyHolder, valueHolder)__		}__		return props__	};parse,a,props,element;public,properties,parse,props,element,element,props,ele,managed,properties,props,new,managed,properties,props,set,source,extract,source,props,ele,props,set,merge,enabled,parse,merge,attribute,props,ele,list,element,prop,eles,dom,utils,get,child,elements,by,tag,name,props,ele,for,element,prop,ele,prop,eles,string,key,prop,ele,get,attribute,string,value,dom,utils,get,text,value,prop,ele,trim,typed,string,value,key,holder,new,typed,string,value,key,key,holder,set,source,extract,source,prop,ele,typed,string,value,value,holder,new,typed,string,value,value,value,holder,set,source,extract,source,prop,ele,props,put,key,holder,value,holder,return,props
BeanDefinitionParserDelegate -> public Properties parsePropsElement(Element propsEle);1335774711;Parse a props element.;public Properties parsePropsElement(Element propsEle) {_		ManagedProperties props = new ManagedProperties()__		props.setSource(extractSource(propsEle))__		props.setMergeEnabled(parseMergeAttribute(propsEle))___		List<Element> propEles = DomUtils.getChildElementsByTagName(propsEle, PROP_ELEMENT)__		for (Element propEle : propEles) {_			String key = propEle.getAttribute(KEY_ATTRIBUTE)__			_			_			String value = DomUtils.getTextValue(propEle).trim()__			TypedStringValue keyHolder = new TypedStringValue(key)__			keyHolder.setSource(extractSource(propEle))__			TypedStringValue valueHolder = new TypedStringValue(value)__			valueHolder.setSource(extractSource(propEle))__			props.put(keyHolder, valueHolder)__		}__		return props__	};parse,a,props,element;public,properties,parse,props,element,element,props,ele,managed,properties,props,new,managed,properties,props,set,source,extract,source,props,ele,props,set,merge,enabled,parse,merge,attribute,props,ele,list,element,prop,eles,dom,utils,get,child,elements,by,tag,name,props,ele,for,element,prop,ele,prop,eles,string,key,prop,ele,get,attribute,string,value,dom,utils,get,text,value,prop,ele,trim,typed,string,value,key,holder,new,typed,string,value,key,key,holder,set,source,extract,source,prop,ele,typed,string,value,value,holder,new,typed,string,value,value,value,holder,set,source,extract,source,prop,ele,props,put,key,holder,value,holder,return,props
BeanDefinitionParserDelegate -> public Properties parsePropsElement(Element propsEle);1337341719;Parse a props element.;public Properties parsePropsElement(Element propsEle) {_		ManagedProperties props = new ManagedProperties()__		props.setSource(extractSource(propsEle))__		props.setMergeEnabled(parseMergeAttribute(propsEle))___		List<Element> propEles = DomUtils.getChildElementsByTagName(propsEle, PROP_ELEMENT)__		for (Element propEle : propEles) {_			String key = propEle.getAttribute(KEY_ATTRIBUTE)__			_			_			String value = DomUtils.getTextValue(propEle).trim()__			TypedStringValue keyHolder = new TypedStringValue(key)__			keyHolder.setSource(extractSource(propEle))__			TypedStringValue valueHolder = new TypedStringValue(value)__			valueHolder.setSource(extractSource(propEle))__			props.put(keyHolder, valueHolder)__		}__		return props__	};parse,a,props,element;public,properties,parse,props,element,element,props,ele,managed,properties,props,new,managed,properties,props,set,source,extract,source,props,ele,props,set,merge,enabled,parse,merge,attribute,props,ele,list,element,prop,eles,dom,utils,get,child,elements,by,tag,name,props,ele,for,element,prop,ele,prop,eles,string,key,prop,ele,get,attribute,string,value,dom,utils,get,text,value,prop,ele,trim,typed,string,value,key,holder,new,typed,string,value,key,key,holder,set,source,extract,source,prop,ele,typed,string,value,value,holder,new,typed,string,value,value,value,holder,set,source,extract,source,prop,ele,props,put,key,holder,value,holder,return,props
BeanDefinitionParserDelegate -> public Properties parsePropsElement(Element propsEle);1351392612;Parse a props element.;public Properties parsePropsElement(Element propsEle) {_		ManagedProperties props = new ManagedProperties()__		props.setSource(extractSource(propsEle))__		props.setMergeEnabled(parseMergeAttribute(propsEle))___		List<Element> propEles = DomUtils.getChildElementsByTagName(propsEle, PROP_ELEMENT)__		for (Element propEle : propEles) {_			String key = propEle.getAttribute(KEY_ATTRIBUTE)__			_			_			String value = DomUtils.getTextValue(propEle).trim()__			TypedStringValue keyHolder = new TypedStringValue(key)__			keyHolder.setSource(extractSource(propEle))__			TypedStringValue valueHolder = new TypedStringValue(value)__			valueHolder.setSource(extractSource(propEle))__			props.put(keyHolder, valueHolder)__		}__		return props__	};parse,a,props,element;public,properties,parse,props,element,element,props,ele,managed,properties,props,new,managed,properties,props,set,source,extract,source,props,ele,props,set,merge,enabled,parse,merge,attribute,props,ele,list,element,prop,eles,dom,utils,get,child,elements,by,tag,name,props,ele,for,element,prop,ele,prop,eles,string,key,prop,ele,get,attribute,string,value,dom,utils,get,text,value,prop,ele,trim,typed,string,value,key,holder,new,typed,string,value,key,key,holder,set,source,extract,source,prop,ele,typed,string,value,value,holder,new,typed,string,value,value,value,holder,set,source,extract,source,prop,ele,props,put,key,holder,value,holder,return,props
BeanDefinitionParserDelegate -> public Properties parsePropsElement(Element propsEle);1351696936;Parse a props element.;public Properties parsePropsElement(Element propsEle) {_		ManagedProperties props = new ManagedProperties()__		props.setSource(extractSource(propsEle))__		props.setMergeEnabled(parseMergeAttribute(propsEle))___		List<Element> propEles = DomUtils.getChildElementsByTagName(propsEle, PROP_ELEMENT)__		for (Element propEle : propEles) {_			String key = propEle.getAttribute(KEY_ATTRIBUTE)__			_			_			String value = DomUtils.getTextValue(propEle).trim()__			TypedStringValue keyHolder = new TypedStringValue(key)__			keyHolder.setSource(extractSource(propEle))__			TypedStringValue valueHolder = new TypedStringValue(value)__			valueHolder.setSource(extractSource(propEle))__			props.put(keyHolder, valueHolder)__		}__		return props__	};parse,a,props,element;public,properties,parse,props,element,element,props,ele,managed,properties,props,new,managed,properties,props,set,source,extract,source,props,ele,props,set,merge,enabled,parse,merge,attribute,props,ele,list,element,prop,eles,dom,utils,get,child,elements,by,tag,name,props,ele,for,element,prop,ele,prop,eles,string,key,prop,ele,get,attribute,string,value,dom,utils,get,text,value,prop,ele,trim,typed,string,value,key,holder,new,typed,string,value,key,key,holder,set,source,extract,source,prop,ele,typed,string,value,value,holder,new,typed,string,value,value,value,holder,set,source,extract,source,prop,ele,props,put,key,holder,value,holder,return,props
BeanDefinitionParserDelegate -> public Properties parsePropsElement(Element propsEle);1356735495;Parse a props element.;public Properties parsePropsElement(Element propsEle) {_		ManagedProperties props = new ManagedProperties()__		props.setSource(extractSource(propsEle))__		props.setMergeEnabled(parseMergeAttribute(propsEle))___		List<Element> propEles = DomUtils.getChildElementsByTagName(propsEle, PROP_ELEMENT)__		for (Element propEle : propEles) {_			String key = propEle.getAttribute(KEY_ATTRIBUTE)__			_			_			String value = DomUtils.getTextValue(propEle).trim()__			TypedStringValue keyHolder = new TypedStringValue(key)__			keyHolder.setSource(extractSource(propEle))__			TypedStringValue valueHolder = new TypedStringValue(value)__			valueHolder.setSource(extractSource(propEle))__			props.put(keyHolder, valueHolder)__		}__		return props__	};parse,a,props,element;public,properties,parse,props,element,element,props,ele,managed,properties,props,new,managed,properties,props,set,source,extract,source,props,ele,props,set,merge,enabled,parse,merge,attribute,props,ele,list,element,prop,eles,dom,utils,get,child,elements,by,tag,name,props,ele,for,element,prop,ele,prop,eles,string,key,prop,ele,get,attribute,string,value,dom,utils,get,text,value,prop,ele,trim,typed,string,value,key,holder,new,typed,string,value,key,key,holder,set,source,extract,source,prop,ele,typed,string,value,value,holder,new,typed,string,value,value,value,holder,set,source,extract,source,prop,ele,props,put,key,holder,value,holder,return,props
BeanDefinitionParserDelegate -> public Properties parsePropsElement(Element propsEle);1357119417;Parse a props element.;public Properties parsePropsElement(Element propsEle) {_		ManagedProperties props = new ManagedProperties()__		props.setSource(extractSource(propsEle))__		props.setMergeEnabled(parseMergeAttribute(propsEle))___		List<Element> propEles = DomUtils.getChildElementsByTagName(propsEle, PROP_ELEMENT)__		for (Element propEle : propEles) {_			String key = propEle.getAttribute(KEY_ATTRIBUTE)__			_			_			String value = DomUtils.getTextValue(propEle).trim()__			TypedStringValue keyHolder = new TypedStringValue(key)__			keyHolder.setSource(extractSource(propEle))__			TypedStringValue valueHolder = new TypedStringValue(value)__			valueHolder.setSource(extractSource(propEle))__			props.put(keyHolder, valueHolder)__		}__		return props__	};parse,a,props,element;public,properties,parse,props,element,element,props,ele,managed,properties,props,new,managed,properties,props,set,source,extract,source,props,ele,props,set,merge,enabled,parse,merge,attribute,props,ele,list,element,prop,eles,dom,utils,get,child,elements,by,tag,name,props,ele,for,element,prop,ele,prop,eles,string,key,prop,ele,get,attribute,string,value,dom,utils,get,text,value,prop,ele,trim,typed,string,value,key,holder,new,typed,string,value,key,key,holder,set,source,extract,source,prop,ele,typed,string,value,value,holder,new,typed,string,value,value,value,holder,set,source,extract,source,prop,ele,props,put,key,holder,value,holder,return,props
BeanDefinitionParserDelegate -> public Properties parsePropsElement(Element propsEle);1367943112;Parse a props element.;public Properties parsePropsElement(Element propsEle) {_		ManagedProperties props = new ManagedProperties()__		props.setSource(extractSource(propsEle))__		props.setMergeEnabled(parseMergeAttribute(propsEle))___		List<Element> propEles = DomUtils.getChildElementsByTagName(propsEle, PROP_ELEMENT)__		for (Element propEle : propEles) {_			String key = propEle.getAttribute(KEY_ATTRIBUTE)__			_			_			String value = DomUtils.getTextValue(propEle).trim()__			TypedStringValue keyHolder = new TypedStringValue(key)__			keyHolder.setSource(extractSource(propEle))__			TypedStringValue valueHolder = new TypedStringValue(value)__			valueHolder.setSource(extractSource(propEle))__			props.put(keyHolder, valueHolder)__		}__		return props__	};parse,a,props,element;public,properties,parse,props,element,element,props,ele,managed,properties,props,new,managed,properties,props,set,source,extract,source,props,ele,props,set,merge,enabled,parse,merge,attribute,props,ele,list,element,prop,eles,dom,utils,get,child,elements,by,tag,name,props,ele,for,element,prop,ele,prop,eles,string,key,prop,ele,get,attribute,string,value,dom,utils,get,text,value,prop,ele,trim,typed,string,value,key,holder,new,typed,string,value,key,key,holder,set,source,extract,source,prop,ele,typed,string,value,value,holder,new,typed,string,value,value,value,holder,set,source,extract,source,prop,ele,props,put,key,holder,value,holder,return,props
BeanDefinitionParserDelegate -> public Properties parsePropsElement(Element propsEle);1382030648;Parse a props element.;public Properties parsePropsElement(Element propsEle) {_		ManagedProperties props = new ManagedProperties()__		props.setSource(extractSource(propsEle))__		props.setMergeEnabled(parseMergeAttribute(propsEle))___		List<Element> propEles = DomUtils.getChildElementsByTagName(propsEle, PROP_ELEMENT)__		for (Element propEle : propEles) {_			String key = propEle.getAttribute(KEY_ATTRIBUTE)__			_			_			String value = DomUtils.getTextValue(propEle).trim()__			TypedStringValue keyHolder = new TypedStringValue(key)__			keyHolder.setSource(extractSource(propEle))__			TypedStringValue valueHolder = new TypedStringValue(value)__			valueHolder.setSource(extractSource(propEle))__			props.put(keyHolder, valueHolder)__		}__		return props__	};parse,a,props,element;public,properties,parse,props,element,element,props,ele,managed,properties,props,new,managed,properties,props,set,source,extract,source,props,ele,props,set,merge,enabled,parse,merge,attribute,props,ele,list,element,prop,eles,dom,utils,get,child,elements,by,tag,name,props,ele,for,element,prop,ele,prop,eles,string,key,prop,ele,get,attribute,string,value,dom,utils,get,text,value,prop,ele,trim,typed,string,value,key,holder,new,typed,string,value,key,key,holder,set,source,extract,source,prop,ele,typed,string,value,value,holder,new,typed,string,value,value,value,holder,set,source,extract,source,prop,ele,props,put,key,holder,value,holder,return,props
BeanDefinitionParserDelegate -> public Properties parsePropsElement(Element propsEle);1385412762;Parse a props element.;public Properties parsePropsElement(Element propsEle) {_		ManagedProperties props = new ManagedProperties()__		props.setSource(extractSource(propsEle))__		props.setMergeEnabled(parseMergeAttribute(propsEle))___		List<Element> propEles = DomUtils.getChildElementsByTagName(propsEle, PROP_ELEMENT)__		for (Element propEle : propEles) {_			String key = propEle.getAttribute(KEY_ATTRIBUTE)__			_			_			String value = DomUtils.getTextValue(propEle).trim()__			TypedStringValue keyHolder = new TypedStringValue(key)__			keyHolder.setSource(extractSource(propEle))__			TypedStringValue valueHolder = new TypedStringValue(value)__			valueHolder.setSource(extractSource(propEle))__			props.put(keyHolder, valueHolder)__		}__		return props__	};parse,a,props,element;public,properties,parse,props,element,element,props,ele,managed,properties,props,new,managed,properties,props,set,source,extract,source,props,ele,props,set,merge,enabled,parse,merge,attribute,props,ele,list,element,prop,eles,dom,utils,get,child,elements,by,tag,name,props,ele,for,element,prop,ele,prop,eles,string,key,prop,ele,get,attribute,string,value,dom,utils,get,text,value,prop,ele,trim,typed,string,value,key,holder,new,typed,string,value,key,key,holder,set,source,extract,source,prop,ele,typed,string,value,value,holder,new,typed,string,value,value,value,holder,set,source,extract,source,prop,ele,props,put,key,holder,value,holder,return,props
BeanDefinitionParserDelegate -> public Properties parsePropsElement(Element propsEle);1410953197;Parse a props element.;public Properties parsePropsElement(Element propsEle) {_		ManagedProperties props = new ManagedProperties()__		props.setSource(extractSource(propsEle))__		props.setMergeEnabled(parseMergeAttribute(propsEle))___		List<Element> propEles = DomUtils.getChildElementsByTagName(propsEle, PROP_ELEMENT)__		for (Element propEle : propEles) {_			String key = propEle.getAttribute(KEY_ATTRIBUTE)__			_			_			String value = DomUtils.getTextValue(propEle).trim()__			TypedStringValue keyHolder = new TypedStringValue(key)__			keyHolder.setSource(extractSource(propEle))__			TypedStringValue valueHolder = new TypedStringValue(value)__			valueHolder.setSource(extractSource(propEle))__			props.put(keyHolder, valueHolder)__		}__		return props__	};parse,a,props,element;public,properties,parse,props,element,element,props,ele,managed,properties,props,new,managed,properties,props,set,source,extract,source,props,ele,props,set,merge,enabled,parse,merge,attribute,props,ele,list,element,prop,eles,dom,utils,get,child,elements,by,tag,name,props,ele,for,element,prop,ele,prop,eles,string,key,prop,ele,get,attribute,string,value,dom,utils,get,text,value,prop,ele,trim,typed,string,value,key,holder,new,typed,string,value,key,key,holder,set,source,extract,source,prop,ele,typed,string,value,value,holder,new,typed,string,value,value,value,holder,set,source,extract,source,prop,ele,props,put,key,holder,value,holder,return,props
BeanDefinitionParserDelegate -> public Properties parsePropsElement(Element propsEle);1411599760;Parse a props element.;public Properties parsePropsElement(Element propsEle) {_		ManagedProperties props = new ManagedProperties()__		props.setSource(extractSource(propsEle))__		props.setMergeEnabled(parseMergeAttribute(propsEle))___		List<Element> propEles = DomUtils.getChildElementsByTagName(propsEle, PROP_ELEMENT)__		for (Element propEle : propEles) {_			String key = propEle.getAttribute(KEY_ATTRIBUTE)__			_			_			String value = DomUtils.getTextValue(propEle).trim()__			TypedStringValue keyHolder = new TypedStringValue(key)__			keyHolder.setSource(extractSource(propEle))__			TypedStringValue valueHolder = new TypedStringValue(value)__			valueHolder.setSource(extractSource(propEle))__			props.put(keyHolder, valueHolder)__		}__		return props__	};parse,a,props,element;public,properties,parse,props,element,element,props,ele,managed,properties,props,new,managed,properties,props,set,source,extract,source,props,ele,props,set,merge,enabled,parse,merge,attribute,props,ele,list,element,prop,eles,dom,utils,get,child,elements,by,tag,name,props,ele,for,element,prop,ele,prop,eles,string,key,prop,ele,get,attribute,string,value,dom,utils,get,text,value,prop,ele,trim,typed,string,value,key,holder,new,typed,string,value,key,key,holder,set,source,extract,source,prop,ele,typed,string,value,value,holder,new,typed,string,value,value,value,holder,set,source,extract,source,prop,ele,props,put,key,holder,value,holder,return,props
BeanDefinitionParserDelegate -> public Properties parsePropsElement(Element propsEle);1419966315;Parse a props element.;public Properties parsePropsElement(Element propsEle) {_		ManagedProperties props = new ManagedProperties()__		props.setSource(extractSource(propsEle))__		props.setMergeEnabled(parseMergeAttribute(propsEle))___		List<Element> propEles = DomUtils.getChildElementsByTagName(propsEle, PROP_ELEMENT)__		for (Element propEle : propEles) {_			String key = propEle.getAttribute(KEY_ATTRIBUTE)__			_			_			String value = DomUtils.getTextValue(propEle).trim()__			TypedStringValue keyHolder = new TypedStringValue(key)__			keyHolder.setSource(extractSource(propEle))__			TypedStringValue valueHolder = new TypedStringValue(value)__			valueHolder.setSource(extractSource(propEle))__			props.put(keyHolder, valueHolder)__		}__		return props__	};parse,a,props,element;public,properties,parse,props,element,element,props,ele,managed,properties,props,new,managed,properties,props,set,source,extract,source,props,ele,props,set,merge,enabled,parse,merge,attribute,props,ele,list,element,prop,eles,dom,utils,get,child,elements,by,tag,name,props,ele,for,element,prop,ele,prop,eles,string,key,prop,ele,get,attribute,string,value,dom,utils,get,text,value,prop,ele,trim,typed,string,value,key,holder,new,typed,string,value,key,key,holder,set,source,extract,source,prop,ele,typed,string,value,value,holder,new,typed,string,value,value,value,holder,set,source,extract,source,prop,ele,props,put,key,holder,value,holder,return,props
BeanDefinitionParserDelegate -> public Properties parsePropsElement(Element propsEle);1431958785;Parse a props element.;public Properties parsePropsElement(Element propsEle) {_		ManagedProperties props = new ManagedProperties()__		props.setSource(extractSource(propsEle))__		props.setMergeEnabled(parseMergeAttribute(propsEle))___		List<Element> propEles = DomUtils.getChildElementsByTagName(propsEle, PROP_ELEMENT)__		for (Element propEle : propEles) {_			String key = propEle.getAttribute(KEY_ATTRIBUTE)__			_			_			String value = DomUtils.getTextValue(propEle).trim()__			TypedStringValue keyHolder = new TypedStringValue(key)__			keyHolder.setSource(extractSource(propEle))__			TypedStringValue valueHolder = new TypedStringValue(value)__			valueHolder.setSource(extractSource(propEle))__			props.put(keyHolder, valueHolder)__		}__		return props__	};parse,a,props,element;public,properties,parse,props,element,element,props,ele,managed,properties,props,new,managed,properties,props,set,source,extract,source,props,ele,props,set,merge,enabled,parse,merge,attribute,props,ele,list,element,prop,eles,dom,utils,get,child,elements,by,tag,name,props,ele,for,element,prop,ele,prop,eles,string,key,prop,ele,get,attribute,string,value,dom,utils,get,text,value,prop,ele,trim,typed,string,value,key,holder,new,typed,string,value,key,key,holder,set,source,extract,source,prop,ele,typed,string,value,value,holder,new,typed,string,value,value,value,holder,set,source,extract,source,prop,ele,props,put,key,holder,value,holder,return,props
BeanDefinitionParserDelegate -> public Properties parsePropsElement(Element propsEle);1432135182;Parse a props element.;public Properties parsePropsElement(Element propsEle) {_		ManagedProperties props = new ManagedProperties()__		props.setSource(extractSource(propsEle))__		props.setMergeEnabled(parseMergeAttribute(propsEle))___		List<Element> propEles = DomUtils.getChildElementsByTagName(propsEle, PROP_ELEMENT)__		for (Element propEle : propEles) {_			String key = propEle.getAttribute(KEY_ATTRIBUTE)__			_			_			String value = DomUtils.getTextValue(propEle).trim()__			TypedStringValue keyHolder = new TypedStringValue(key)__			keyHolder.setSource(extractSource(propEle))__			TypedStringValue valueHolder = new TypedStringValue(value)__			valueHolder.setSource(extractSource(propEle))__			props.put(keyHolder, valueHolder)__		}__		return props__	};parse,a,props,element;public,properties,parse,props,element,element,props,ele,managed,properties,props,new,managed,properties,props,set,source,extract,source,props,ele,props,set,merge,enabled,parse,merge,attribute,props,ele,list,element,prop,eles,dom,utils,get,child,elements,by,tag,name,props,ele,for,element,prop,ele,prop,eles,string,key,prop,ele,get,attribute,string,value,dom,utils,get,text,value,prop,ele,trim,typed,string,value,key,holder,new,typed,string,value,key,key,holder,set,source,extract,source,prop,ele,typed,string,value,value,holder,new,typed,string,value,value,value,holder,set,source,extract,source,prop,ele,props,put,key,holder,value,holder,return,props
BeanDefinitionParserDelegate -> public Properties parsePropsElement(Element propsEle);1447323728;Parse a props element.;public Properties parsePropsElement(Element propsEle) {_		ManagedProperties props = new ManagedProperties()__		props.setSource(extractSource(propsEle))__		props.setMergeEnabled(parseMergeAttribute(propsEle))___		List<Element> propEles = DomUtils.getChildElementsByTagName(propsEle, PROP_ELEMENT)__		for (Element propEle : propEles) {_			String key = propEle.getAttribute(KEY_ATTRIBUTE)__			_			_			String value = DomUtils.getTextValue(propEle).trim()__			TypedStringValue keyHolder = new TypedStringValue(key)__			keyHolder.setSource(extractSource(propEle))__			TypedStringValue valueHolder = new TypedStringValue(value)__			valueHolder.setSource(extractSource(propEle))__			props.put(keyHolder, valueHolder)__		}__		return props__	};parse,a,props,element;public,properties,parse,props,element,element,props,ele,managed,properties,props,new,managed,properties,props,set,source,extract,source,props,ele,props,set,merge,enabled,parse,merge,attribute,props,ele,list,element,prop,eles,dom,utils,get,child,elements,by,tag,name,props,ele,for,element,prop,ele,prop,eles,string,key,prop,ele,get,attribute,string,value,dom,utils,get,text,value,prop,ele,trim,typed,string,value,key,holder,new,typed,string,value,key,key,holder,set,source,extract,source,prop,ele,typed,string,value,value,holder,new,typed,string,value,value,value,holder,set,source,extract,source,prop,ele,props,put,key,holder,value,holder,return,props
BeanDefinitionParserDelegate -> public Properties parsePropsElement(Element propsEle);1467726769;Parse a props element.;public Properties parsePropsElement(Element propsEle) {_		ManagedProperties props = new ManagedProperties()__		props.setSource(extractSource(propsEle))__		props.setMergeEnabled(parseMergeAttribute(propsEle))___		List<Element> propEles = DomUtils.getChildElementsByTagName(propsEle, PROP_ELEMENT)__		for (Element propEle : propEles) {_			String key = propEle.getAttribute(KEY_ATTRIBUTE)__			_			_			String value = DomUtils.getTextValue(propEle).trim()__			TypedStringValue keyHolder = new TypedStringValue(key)__			keyHolder.setSource(extractSource(propEle))__			TypedStringValue valueHolder = new TypedStringValue(value)__			valueHolder.setSource(extractSource(propEle))__			props.put(keyHolder, valueHolder)__		}__		return props__	};parse,a,props,element;public,properties,parse,props,element,element,props,ele,managed,properties,props,new,managed,properties,props,set,source,extract,source,props,ele,props,set,merge,enabled,parse,merge,attribute,props,ele,list,element,prop,eles,dom,utils,get,child,elements,by,tag,name,props,ele,for,element,prop,ele,prop,eles,string,key,prop,ele,get,attribute,string,value,dom,utils,get,text,value,prop,ele,trim,typed,string,value,key,holder,new,typed,string,value,key,key,holder,set,source,extract,source,prop,ele,typed,string,value,value,holder,new,typed,string,value,value,value,holder,set,source,extract,source,prop,ele,props,put,key,holder,value,holder,return,props
BeanDefinitionParserDelegate -> public Properties parsePropsElement(Element propsEle);1467730834;Parse a props element.;public Properties parsePropsElement(Element propsEle) {_		ManagedProperties props = new ManagedProperties()__		props.setSource(extractSource(propsEle))__		props.setMergeEnabled(parseMergeAttribute(propsEle))___		List<Element> propEles = DomUtils.getChildElementsByTagName(propsEle, PROP_ELEMENT)__		for (Element propEle : propEles) {_			String key = propEle.getAttribute(KEY_ATTRIBUTE)__			_			_			String value = DomUtils.getTextValue(propEle).trim()__			TypedStringValue keyHolder = new TypedStringValue(key)__			keyHolder.setSource(extractSource(propEle))__			TypedStringValue valueHolder = new TypedStringValue(value)__			valueHolder.setSource(extractSource(propEle))__			props.put(keyHolder, valueHolder)__		}__		return props__	};parse,a,props,element;public,properties,parse,props,element,element,props,ele,managed,properties,props,new,managed,properties,props,set,source,extract,source,props,ele,props,set,merge,enabled,parse,merge,attribute,props,ele,list,element,prop,eles,dom,utils,get,child,elements,by,tag,name,props,ele,for,element,prop,ele,prop,eles,string,key,prop,ele,get,attribute,string,value,dom,utils,get,text,value,prop,ele,trim,typed,string,value,key,holder,new,typed,string,value,key,key,holder,set,source,extract,source,prop,ele,typed,string,value,value,holder,new,typed,string,value,value,value,holder,set,source,extract,source,prop,ele,props,put,key,holder,value,holder,return,props
BeanDefinitionParserDelegate -> public Properties parsePropsElement(Element propsEle);1467744603;Parse a props element.;public Properties parsePropsElement(Element propsEle) {_		ManagedProperties props = new ManagedProperties()__		props.setSource(extractSource(propsEle))__		props.setMergeEnabled(parseMergeAttribute(propsEle))___		List<Element> propEles = DomUtils.getChildElementsByTagName(propsEle, PROP_ELEMENT)__		for (Element propEle : propEles) {_			String key = propEle.getAttribute(KEY_ATTRIBUTE)__			_			_			String value = DomUtils.getTextValue(propEle).trim()__			TypedStringValue keyHolder = new TypedStringValue(key)__			keyHolder.setSource(extractSource(propEle))__			TypedStringValue valueHolder = new TypedStringValue(value)__			valueHolder.setSource(extractSource(propEle))__			props.put(keyHolder, valueHolder)__		}__		return props__	};parse,a,props,element;public,properties,parse,props,element,element,props,ele,managed,properties,props,new,managed,properties,props,set,source,extract,source,props,ele,props,set,merge,enabled,parse,merge,attribute,props,ele,list,element,prop,eles,dom,utils,get,child,elements,by,tag,name,props,ele,for,element,prop,ele,prop,eles,string,key,prop,ele,get,attribute,string,value,dom,utils,get,text,value,prop,ele,trim,typed,string,value,key,holder,new,typed,string,value,key,key,holder,set,source,extract,source,prop,ele,typed,string,value,value,holder,new,typed,string,value,value,value,holder,set,source,extract,source,prop,ele,props,put,key,holder,value,holder,return,props
BeanDefinitionParserDelegate -> public Properties parsePropsElement(Element propsEle);1487245676;Parse a props element.;public Properties parsePropsElement(Element propsEle) {_		ManagedProperties props = new ManagedProperties()__		props.setSource(extractSource(propsEle))__		props.setMergeEnabled(parseMergeAttribute(propsEle))___		List<Element> propEles = DomUtils.getChildElementsByTagName(propsEle, PROP_ELEMENT)__		for (Element propEle : propEles) {_			String key = propEle.getAttribute(KEY_ATTRIBUTE)__			_			_			String value = DomUtils.getTextValue(propEle).trim()__			TypedStringValue keyHolder = new TypedStringValue(key)__			keyHolder.setSource(extractSource(propEle))__			TypedStringValue valueHolder = new TypedStringValue(value)__			valueHolder.setSource(extractSource(propEle))__			props.put(keyHolder, valueHolder)__		}__		return props__	};parse,a,props,element;public,properties,parse,props,element,element,props,ele,managed,properties,props,new,managed,properties,props,set,source,extract,source,props,ele,props,set,merge,enabled,parse,merge,attribute,props,ele,list,element,prop,eles,dom,utils,get,child,elements,by,tag,name,props,ele,for,element,prop,ele,prop,eles,string,key,prop,ele,get,attribute,string,value,dom,utils,get,text,value,prop,ele,trim,typed,string,value,key,holder,new,typed,string,value,key,key,holder,set,source,extract,source,prop,ele,typed,string,value,value,holder,new,typed,string,value,value,value,holder,set,source,extract,source,prop,ele,props,put,key,holder,value,holder,return,props
BeanDefinitionParserDelegate -> public Properties parsePropsElement(Element propsEle);1487255851;Parse a props element.;public Properties parsePropsElement(Element propsEle) {_		ManagedProperties props = new ManagedProperties()__		props.setSource(extractSource(propsEle))__		props.setMergeEnabled(parseMergeAttribute(propsEle))___		List<Element> propEles = DomUtils.getChildElementsByTagName(propsEle, PROP_ELEMENT)__		for (Element propEle : propEles) {_			String key = propEle.getAttribute(KEY_ATTRIBUTE)__			_			_			String value = DomUtils.getTextValue(propEle).trim()__			TypedStringValue keyHolder = new TypedStringValue(key)__			keyHolder.setSource(extractSource(propEle))__			TypedStringValue valueHolder = new TypedStringValue(value)__			valueHolder.setSource(extractSource(propEle))__			props.put(keyHolder, valueHolder)__		}__		return props__	};parse,a,props,element;public,properties,parse,props,element,element,props,ele,managed,properties,props,new,managed,properties,props,set,source,extract,source,props,ele,props,set,merge,enabled,parse,merge,attribute,props,ele,list,element,prop,eles,dom,utils,get,child,elements,by,tag,name,props,ele,for,element,prop,ele,prop,eles,string,key,prop,ele,get,attribute,string,value,dom,utils,get,text,value,prop,ele,trim,typed,string,value,key,holder,new,typed,string,value,key,key,holder,set,source,extract,source,prop,ele,typed,string,value,value,holder,new,typed,string,value,value,value,holder,set,source,extract,source,prop,ele,props,put,key,holder,value,holder,return,props
BeanDefinitionParserDelegate -> public Properties parsePropsElement(Element propsEle);1494586217;Parse a props element.;public Properties parsePropsElement(Element propsEle) {_		ManagedProperties props = new ManagedProperties()__		props.setSource(extractSource(propsEle))__		props.setMergeEnabled(parseMergeAttribute(propsEle))___		List<Element> propEles = DomUtils.getChildElementsByTagName(propsEle, PROP_ELEMENT)__		for (Element propEle : propEles) {_			String key = propEle.getAttribute(KEY_ATTRIBUTE)__			_			_			String value = DomUtils.getTextValue(propEle).trim()__			TypedStringValue keyHolder = new TypedStringValue(key)__			keyHolder.setSource(extractSource(propEle))__			TypedStringValue valueHolder = new TypedStringValue(value)__			valueHolder.setSource(extractSource(propEle))__			props.put(keyHolder, valueHolder)__		}__		return props__	};parse,a,props,element;public,properties,parse,props,element,element,props,ele,managed,properties,props,new,managed,properties,props,set,source,extract,source,props,ele,props,set,merge,enabled,parse,merge,attribute,props,ele,list,element,prop,eles,dom,utils,get,child,elements,by,tag,name,props,ele,for,element,prop,ele,prop,eles,string,key,prop,ele,get,attribute,string,value,dom,utils,get,text,value,prop,ele,trim,typed,string,value,key,holder,new,typed,string,value,key,key,holder,set,source,extract,source,prop,ele,typed,string,value,value,holder,new,typed,string,value,value,value,holder,set,source,extract,source,prop,ele,props,put,key,holder,value,holder,return,props
BeanDefinitionParserDelegate -> public Properties parsePropsElement(Element propsEle);1495868221;Parse a props element.;public Properties parsePropsElement(Element propsEle) {_		ManagedProperties props = new ManagedProperties()__		props.setSource(extractSource(propsEle))__		props.setMergeEnabled(parseMergeAttribute(propsEle))___		List<Element> propEles = DomUtils.getChildElementsByTagName(propsEle, PROP_ELEMENT)__		for (Element propEle : propEles) {_			String key = propEle.getAttribute(KEY_ATTRIBUTE)__			_			_			String value = DomUtils.getTextValue(propEle).trim()__			TypedStringValue keyHolder = new TypedStringValue(key)__			keyHolder.setSource(extractSource(propEle))__			TypedStringValue valueHolder = new TypedStringValue(value)__			valueHolder.setSource(extractSource(propEle))__			props.put(keyHolder, valueHolder)__		}__		return props__	};parse,a,props,element;public,properties,parse,props,element,element,props,ele,managed,properties,props,new,managed,properties,props,set,source,extract,source,props,ele,props,set,merge,enabled,parse,merge,attribute,props,ele,list,element,prop,eles,dom,utils,get,child,elements,by,tag,name,props,ele,for,element,prop,ele,prop,eles,string,key,prop,ele,get,attribute,string,value,dom,utils,get,text,value,prop,ele,trim,typed,string,value,key,holder,new,typed,string,value,key,key,holder,set,source,extract,source,prop,ele,typed,string,value,value,holder,new,typed,string,value,value,value,holder,set,source,extract,source,prop,ele,props,put,key,holder,value,holder,return,props
BeanDefinitionParserDelegate -> public Properties parsePropsElement(Element propsEle);1496259743;Parse a props element.;public Properties parsePropsElement(Element propsEle) {_		ManagedProperties props = new ManagedProperties()__		props.setSource(extractSource(propsEle))__		props.setMergeEnabled(parseMergeAttribute(propsEle))___		List<Element> propEles = DomUtils.getChildElementsByTagName(propsEle, PROP_ELEMENT)__		for (Element propEle : propEles) {_			String key = propEle.getAttribute(KEY_ATTRIBUTE)__			_			_			String value = DomUtils.getTextValue(propEle).trim()__			TypedStringValue keyHolder = new TypedStringValue(key)__			keyHolder.setSource(extractSource(propEle))__			TypedStringValue valueHolder = new TypedStringValue(value)__			valueHolder.setSource(extractSource(propEle))__			props.put(keyHolder, valueHolder)__		}__		return props__	};parse,a,props,element;public,properties,parse,props,element,element,props,ele,managed,properties,props,new,managed,properties,props,set,source,extract,source,props,ele,props,set,merge,enabled,parse,merge,attribute,props,ele,list,element,prop,eles,dom,utils,get,child,elements,by,tag,name,props,ele,for,element,prop,ele,prop,eles,string,key,prop,ele,get,attribute,string,value,dom,utils,get,text,value,prop,ele,trim,typed,string,value,key,holder,new,typed,string,value,key,key,holder,set,source,extract,source,prop,ele,typed,string,value,value,holder,new,typed,string,value,value,value,holder,set,source,extract,source,prop,ele,props,put,key,holder,value,holder,return,props
BeanDefinitionParserDelegate -> public Properties parsePropsElement(Element propsEle);1496837955;Parse a props element.;public Properties parsePropsElement(Element propsEle) {_		ManagedProperties props = new ManagedProperties()__		props.setSource(extractSource(propsEle))__		props.setMergeEnabled(parseMergeAttribute(propsEle))___		List<Element> propEles = DomUtils.getChildElementsByTagName(propsEle, PROP_ELEMENT)__		for (Element propEle : propEles) {_			String key = propEle.getAttribute(KEY_ATTRIBUTE)__			_			_			String value = DomUtils.getTextValue(propEle).trim()__			TypedStringValue keyHolder = new TypedStringValue(key)__			keyHolder.setSource(extractSource(propEle))__			TypedStringValue valueHolder = new TypedStringValue(value)__			valueHolder.setSource(extractSource(propEle))__			props.put(keyHolder, valueHolder)__		}__		return props__	};parse,a,props,element;public,properties,parse,props,element,element,props,ele,managed,properties,props,new,managed,properties,props,set,source,extract,source,props,ele,props,set,merge,enabled,parse,merge,attribute,props,ele,list,element,prop,eles,dom,utils,get,child,elements,by,tag,name,props,ele,for,element,prop,ele,prop,eles,string,key,prop,ele,get,attribute,string,value,dom,utils,get,text,value,prop,ele,trim,typed,string,value,key,holder,new,typed,string,value,key,key,holder,set,source,extract,source,prop,ele,typed,string,value,value,holder,new,typed,string,value,value,value,holder,set,source,extract,source,prop,ele,props,put,key,holder,value,holder,return,props
BeanDefinitionParserDelegate -> public Properties parsePropsElement(Element propsEle);1503008029;Parse a props element.;public Properties parsePropsElement(Element propsEle) {_		ManagedProperties props = new ManagedProperties()__		props.setSource(extractSource(propsEle))__		props.setMergeEnabled(parseMergeAttribute(propsEle))___		List<Element> propEles = DomUtils.getChildElementsByTagName(propsEle, PROP_ELEMENT)__		for (Element propEle : propEles) {_			String key = propEle.getAttribute(KEY_ATTRIBUTE)__			_			_			String value = DomUtils.getTextValue(propEle).trim()__			TypedStringValue keyHolder = new TypedStringValue(key)__			keyHolder.setSource(extractSource(propEle))__			TypedStringValue valueHolder = new TypedStringValue(value)__			valueHolder.setSource(extractSource(propEle))__			props.put(keyHolder, valueHolder)__		}__		return props__	};parse,a,props,element;public,properties,parse,props,element,element,props,ele,managed,properties,props,new,managed,properties,props,set,source,extract,source,props,ele,props,set,merge,enabled,parse,merge,attribute,props,ele,list,element,prop,eles,dom,utils,get,child,elements,by,tag,name,props,ele,for,element,prop,ele,prop,eles,string,key,prop,ele,get,attribute,string,value,dom,utils,get,text,value,prop,ele,trim,typed,string,value,key,holder,new,typed,string,value,key,key,holder,set,source,extract,source,prop,ele,typed,string,value,value,holder,new,typed,string,value,value,value,holder,set,source,extract,source,prop,ele,props,put,key,holder,value,holder,return,props
BeanDefinitionParserDelegate -> public Properties parsePropsElement(Element propsEle);1519513303;Parse a props element.;public Properties parsePropsElement(Element propsEle) {_		ManagedProperties props = new ManagedProperties()__		props.setSource(extractSource(propsEle))__		props.setMergeEnabled(parseMergeAttribute(propsEle))___		List<Element> propEles = DomUtils.getChildElementsByTagName(propsEle, PROP_ELEMENT)__		for (Element propEle : propEles) {_			String key = propEle.getAttribute(KEY_ATTRIBUTE)__			_			_			String value = DomUtils.getTextValue(propEle).trim()__			TypedStringValue keyHolder = new TypedStringValue(key)__			keyHolder.setSource(extractSource(propEle))__			TypedStringValue valueHolder = new TypedStringValue(value)__			valueHolder.setSource(extractSource(propEle))__			props.put(keyHolder, valueHolder)__		}__		return props__	};parse,a,props,element;public,properties,parse,props,element,element,props,ele,managed,properties,props,new,managed,properties,props,set,source,extract,source,props,ele,props,set,merge,enabled,parse,merge,attribute,props,ele,list,element,prop,eles,dom,utils,get,child,elements,by,tag,name,props,ele,for,element,prop,ele,prop,eles,string,key,prop,ele,get,attribute,string,value,dom,utils,get,text,value,prop,ele,trim,typed,string,value,key,holder,new,typed,string,value,key,key,holder,set,source,extract,source,prop,ele,typed,string,value,value,holder,new,typed,string,value,value,value,holder,set,source,extract,source,prop,ele,props,put,key,holder,value,holder,return,props
BeanDefinitionParserDelegate -> public Properties parsePropsElement(Element propsEle);1530174524;Parse a props element.;public Properties parsePropsElement(Element propsEle) {_		ManagedProperties props = new ManagedProperties()__		props.setSource(extractSource(propsEle))__		props.setMergeEnabled(parseMergeAttribute(propsEle))___		List<Element> propEles = DomUtils.getChildElementsByTagName(propsEle, PROP_ELEMENT)__		for (Element propEle : propEles) {_			String key = propEle.getAttribute(KEY_ATTRIBUTE)__			_			_			String value = DomUtils.getTextValue(propEle).trim()__			TypedStringValue keyHolder = new TypedStringValue(key)__			keyHolder.setSource(extractSource(propEle))__			TypedStringValue valueHolder = new TypedStringValue(value)__			valueHolder.setSource(extractSource(propEle))__			props.put(keyHolder, valueHolder)__		}__		return props__	};parse,a,props,element;public,properties,parse,props,element,element,props,ele,managed,properties,props,new,managed,properties,props,set,source,extract,source,props,ele,props,set,merge,enabled,parse,merge,attribute,props,ele,list,element,prop,eles,dom,utils,get,child,elements,by,tag,name,props,ele,for,element,prop,ele,prop,eles,string,key,prop,ele,get,attribute,string,value,dom,utils,get,text,value,prop,ele,trim,typed,string,value,key,holder,new,typed,string,value,key,key,holder,set,source,extract,source,prop,ele,typed,string,value,value,holder,new,typed,string,value,value,value,holder,set,source,extract,source,prop,ele,props,put,key,holder,value,holder,return,props
BeanDefinitionParserDelegate -> public Properties parsePropsElement(Element propsEle);1530190293;Parse a props element.;public Properties parsePropsElement(Element propsEle) {_		ManagedProperties props = new ManagedProperties()__		props.setSource(extractSource(propsEle))__		props.setMergeEnabled(parseMergeAttribute(propsEle))___		List<Element> propEles = DomUtils.getChildElementsByTagName(propsEle, PROP_ELEMENT)__		for (Element propEle : propEles) {_			String key = propEle.getAttribute(KEY_ATTRIBUTE)__			_			_			String value = DomUtils.getTextValue(propEle).trim()__			TypedStringValue keyHolder = new TypedStringValue(key)__			keyHolder.setSource(extractSource(propEle))__			TypedStringValue valueHolder = new TypedStringValue(value)__			valueHolder.setSource(extractSource(propEle))__			props.put(keyHolder, valueHolder)__		}__		return props__	};parse,a,props,element;public,properties,parse,props,element,element,props,ele,managed,properties,props,new,managed,properties,props,set,source,extract,source,props,ele,props,set,merge,enabled,parse,merge,attribute,props,ele,list,element,prop,eles,dom,utils,get,child,elements,by,tag,name,props,ele,for,element,prop,ele,prop,eles,string,key,prop,ele,get,attribute,string,value,dom,utils,get,text,value,prop,ele,trim,typed,string,value,key,holder,new,typed,string,value,key,key,holder,set,source,extract,source,prop,ele,typed,string,value,value,holder,new,typed,string,value,value,value,holder,set,source,extract,source,prop,ele,props,put,key,holder,value,holder,return,props
BeanDefinitionParserDelegate -> public Properties parsePropsElement(Element propsEle);1532706365;Parse a props element.;public Properties parsePropsElement(Element propsEle) {_		ManagedProperties props = new ManagedProperties()__		props.setSource(extractSource(propsEle))__		props.setMergeEnabled(parseMergeAttribute(propsEle))___		List<Element> propEles = DomUtils.getChildElementsByTagName(propsEle, PROP_ELEMENT)__		for (Element propEle : propEles) {_			String key = propEle.getAttribute(KEY_ATTRIBUTE)__			_			_			String value = DomUtils.getTextValue(propEle).trim()__			TypedStringValue keyHolder = new TypedStringValue(key)__			keyHolder.setSource(extractSource(propEle))__			TypedStringValue valueHolder = new TypedStringValue(value)__			valueHolder.setSource(extractSource(propEle))__			props.put(keyHolder, valueHolder)__		}__		return props__	};parse,a,props,element;public,properties,parse,props,element,element,props,ele,managed,properties,props,new,managed,properties,props,set,source,extract,source,props,ele,props,set,merge,enabled,parse,merge,attribute,props,ele,list,element,prop,eles,dom,utils,get,child,elements,by,tag,name,props,ele,for,element,prop,ele,prop,eles,string,key,prop,ele,get,attribute,string,value,dom,utils,get,text,value,prop,ele,trim,typed,string,value,key,holder,new,typed,string,value,key,key,holder,set,source,extract,source,prop,ele,typed,string,value,value,holder,new,typed,string,value,value,value,holder,set,source,extract,source,prop,ele,props,put,key,holder,value,holder,return,props
BeanDefinitionParserDelegate -> public Properties parsePropsElement(Element propsEle);1546958161;Parse a props element.;public Properties parsePropsElement(Element propsEle) {_		ManagedProperties props = new ManagedProperties()__		props.setSource(extractSource(propsEle))__		props.setMergeEnabled(parseMergeAttribute(propsEle))___		List<Element> propEles = DomUtils.getChildElementsByTagName(propsEle, PROP_ELEMENT)__		for (Element propEle : propEles) {_			String key = propEle.getAttribute(KEY_ATTRIBUTE)__			_			_			String value = DomUtils.getTextValue(propEle).trim()__			TypedStringValue keyHolder = new TypedStringValue(key)__			keyHolder.setSource(extractSource(propEle))__			TypedStringValue valueHolder = new TypedStringValue(value)__			valueHolder.setSource(extractSource(propEle))__			props.put(keyHolder, valueHolder)__		}__		return props__	};parse,a,props,element;public,properties,parse,props,element,element,props,ele,managed,properties,props,new,managed,properties,props,set,source,extract,source,props,ele,props,set,merge,enabled,parse,merge,attribute,props,ele,list,element,prop,eles,dom,utils,get,child,elements,by,tag,name,props,ele,for,element,prop,ele,prop,eles,string,key,prop,ele,get,attribute,string,value,dom,utils,get,text,value,prop,ele,trim,typed,string,value,key,holder,new,typed,string,value,key,key,holder,set,source,extract,source,prop,ele,typed,string,value,value,holder,new,typed,string,value,value,value,holder,set,source,extract,source,prop,ele,props,put,key,holder,value,holder,return,props
BeanDefinitionParserDelegate -> public Object parseIdRefElement(Element ele);1328020251;Return a typed String value Object for the given 'idref' element.;public Object parseIdRefElement(Element ele) {_		_		String refName = ele.getAttribute(BEAN_REF_ATTRIBUTE)__		if (!StringUtils.hasLength(refName)) {_			_			refName = ele.getAttribute(LOCAL_REF_ATTRIBUTE)__			if (!StringUtils.hasLength(refName)) {_				error("Either 'bean' or 'local' is required for <idref> element", ele)__				return null__			}_		}_		if (!StringUtils.hasText(refName)) {_			error("<idref> element contains empty target attribute", ele)__			return null__		}_		RuntimeBeanNameReference ref = new RuntimeBeanNameReference(refName)__		ref.setSource(extractSource(ele))__		return ref__	};return,a,typed,string,value,object,for,the,given,idref,element;public,object,parse,id,ref,element,element,ele,string,ref,name,ele,get,attribute,if,string,utils,has,length,ref,name,ref,name,ele,get,attribute,if,string,utils,has,length,ref,name,error,either,bean,or,local,is,required,for,idref,element,ele,return,null,if,string,utils,has,text,ref,name,error,idref,element,contains,empty,target,attribute,ele,return,null,runtime,bean,name,reference,ref,new,runtime,bean,name,reference,ref,name,ref,set,source,extract,source,ele,return,ref
BeanDefinitionParserDelegate -> public Object parseIdRefElement(Element ele);1335774711;Return a typed String value Object for the given 'idref' element.;public Object parseIdRefElement(Element ele) {_		_		String refName = ele.getAttribute(BEAN_REF_ATTRIBUTE)__		if (!StringUtils.hasLength(refName)) {_			_			refName = ele.getAttribute(LOCAL_REF_ATTRIBUTE)__			if (!StringUtils.hasLength(refName)) {_				error("Either 'bean' or 'local' is required for <idref> element", ele)__				return null__			}_		}_		if (!StringUtils.hasText(refName)) {_			error("<idref> element contains empty target attribute", ele)__			return null__		}_		RuntimeBeanNameReference ref = new RuntimeBeanNameReference(refName)__		ref.setSource(extractSource(ele))__		return ref__	};return,a,typed,string,value,object,for,the,given,idref,element;public,object,parse,id,ref,element,element,ele,string,ref,name,ele,get,attribute,if,string,utils,has,length,ref,name,ref,name,ele,get,attribute,if,string,utils,has,length,ref,name,error,either,bean,or,local,is,required,for,idref,element,ele,return,null,if,string,utils,has,text,ref,name,error,idref,element,contains,empty,target,attribute,ele,return,null,runtime,bean,name,reference,ref,new,runtime,bean,name,reference,ref,name,ref,set,source,extract,source,ele,return,ref
BeanDefinitionParserDelegate -> public Object parseIdRefElement(Element ele);1337341719;Return a typed String value Object for the given 'idref' element.;public Object parseIdRefElement(Element ele) {_		_		String refName = ele.getAttribute(BEAN_REF_ATTRIBUTE)__		if (!StringUtils.hasLength(refName)) {_			_			refName = ele.getAttribute(LOCAL_REF_ATTRIBUTE)__			if (!StringUtils.hasLength(refName)) {_				error("Either 'bean' or 'local' is required for <idref> element", ele)__				return null__			}_		}_		if (!StringUtils.hasText(refName)) {_			error("<idref> element contains empty target attribute", ele)__			return null__		}_		RuntimeBeanNameReference ref = new RuntimeBeanNameReference(refName)__		ref.setSource(extractSource(ele))__		return ref__	};return,a,typed,string,value,object,for,the,given,idref,element;public,object,parse,id,ref,element,element,ele,string,ref,name,ele,get,attribute,if,string,utils,has,length,ref,name,ref,name,ele,get,attribute,if,string,utils,has,length,ref,name,error,either,bean,or,local,is,required,for,idref,element,ele,return,null,if,string,utils,has,text,ref,name,error,idref,element,contains,empty,target,attribute,ele,return,null,runtime,bean,name,reference,ref,new,runtime,bean,name,reference,ref,name,ref,set,source,extract,source,ele,return,ref
BeanDefinitionParserDelegate -> public Object parseIdRefElement(Element ele);1351392612;Return a typed String value Object for the given 'idref' element.;public Object parseIdRefElement(Element ele) {_		_		String refName = ele.getAttribute(BEAN_REF_ATTRIBUTE)__		if (!StringUtils.hasLength(refName)) {_			_			refName = ele.getAttribute(LOCAL_REF_ATTRIBUTE)__			if (!StringUtils.hasLength(refName)) {_				error("Either 'bean' or 'local' is required for <idref> element", ele)__				return null__			}_		}_		if (!StringUtils.hasText(refName)) {_			error("<idref> element contains empty target attribute", ele)__			return null__		}_		RuntimeBeanNameReference ref = new RuntimeBeanNameReference(refName)__		ref.setSource(extractSource(ele))__		return ref__	};return,a,typed,string,value,object,for,the,given,idref,element;public,object,parse,id,ref,element,element,ele,string,ref,name,ele,get,attribute,if,string,utils,has,length,ref,name,ref,name,ele,get,attribute,if,string,utils,has,length,ref,name,error,either,bean,or,local,is,required,for,idref,element,ele,return,null,if,string,utils,has,text,ref,name,error,idref,element,contains,empty,target,attribute,ele,return,null,runtime,bean,name,reference,ref,new,runtime,bean,name,reference,ref,name,ref,set,source,extract,source,ele,return,ref
BeanDefinitionParserDelegate -> public Object parseIdRefElement(Element ele);1351696936;Return a typed String value Object for the given 'idref' element.;public Object parseIdRefElement(Element ele) {_		_		String refName = ele.getAttribute(BEAN_REF_ATTRIBUTE)__		if (!StringUtils.hasLength(refName)) {_			_			refName = ele.getAttribute(LOCAL_REF_ATTRIBUTE)__			if (!StringUtils.hasLength(refName)) {_				error("Either 'bean' or 'local' is required for <idref> element", ele)__				return null__			}_		}_		if (!StringUtils.hasText(refName)) {_			error("<idref> element contains empty target attribute", ele)__			return null__		}_		RuntimeBeanNameReference ref = new RuntimeBeanNameReference(refName)__		ref.setSource(extractSource(ele))__		return ref__	};return,a,typed,string,value,object,for,the,given,idref,element;public,object,parse,id,ref,element,element,ele,string,ref,name,ele,get,attribute,if,string,utils,has,length,ref,name,ref,name,ele,get,attribute,if,string,utils,has,length,ref,name,error,either,bean,or,local,is,required,for,idref,element,ele,return,null,if,string,utils,has,text,ref,name,error,idref,element,contains,empty,target,attribute,ele,return,null,runtime,bean,name,reference,ref,new,runtime,bean,name,reference,ref,name,ref,set,source,extract,source,ele,return,ref
BeanDefinitionParserDelegate -> public Object parseIdRefElement(Element ele);1356735495;Return a typed String value Object for the given 'idref' element.;public Object parseIdRefElement(Element ele) {_		_		String refName = ele.getAttribute(BEAN_REF_ATTRIBUTE)__		if (!StringUtils.hasLength(refName)) {_			_			refName = ele.getAttribute(LOCAL_REF_ATTRIBUTE)__			if (!StringUtils.hasLength(refName)) {_				error("Either 'bean' or 'local' is required for <idref> element", ele)__				return null__			}_		}_		if (!StringUtils.hasText(refName)) {_			error("<idref> element contains empty target attribute", ele)__			return null__		}_		RuntimeBeanNameReference ref = new RuntimeBeanNameReference(refName)__		ref.setSource(extractSource(ele))__		return ref__	};return,a,typed,string,value,object,for,the,given,idref,element;public,object,parse,id,ref,element,element,ele,string,ref,name,ele,get,attribute,if,string,utils,has,length,ref,name,ref,name,ele,get,attribute,if,string,utils,has,length,ref,name,error,either,bean,or,local,is,required,for,idref,element,ele,return,null,if,string,utils,has,text,ref,name,error,idref,element,contains,empty,target,attribute,ele,return,null,runtime,bean,name,reference,ref,new,runtime,bean,name,reference,ref,name,ref,set,source,extract,source,ele,return,ref
BeanDefinitionParserDelegate -> public Object parseIdRefElement(Element ele);1357119417;Return a typed String value Object for the given 'idref' element.;public Object parseIdRefElement(Element ele) {_		_		String refName = ele.getAttribute(BEAN_REF_ATTRIBUTE)__		if (!StringUtils.hasLength(refName)) {_			_			refName = ele.getAttribute(LOCAL_REF_ATTRIBUTE)__			if (!StringUtils.hasLength(refName)) {_				error("Either 'bean' or 'local' is required for <idref> element", ele)__				return null__			}_		}_		if (!StringUtils.hasText(refName)) {_			error("<idref> element contains empty target attribute", ele)__			return null__		}_		RuntimeBeanNameReference ref = new RuntimeBeanNameReference(refName)__		ref.setSource(extractSource(ele))__		return ref__	};return,a,typed,string,value,object,for,the,given,idref,element;public,object,parse,id,ref,element,element,ele,string,ref,name,ele,get,attribute,if,string,utils,has,length,ref,name,ref,name,ele,get,attribute,if,string,utils,has,length,ref,name,error,either,bean,or,local,is,required,for,idref,element,ele,return,null,if,string,utils,has,text,ref,name,error,idref,element,contains,empty,target,attribute,ele,return,null,runtime,bean,name,reference,ref,new,runtime,bean,name,reference,ref,name,ref,set,source,extract,source,ele,return,ref
BeanDefinitionParserDelegate -> public Object parseIdRefElement(Element ele);1367943112;Return a typed String value Object for the given 'idref' element.;public Object parseIdRefElement(Element ele) {_		_		String refName = ele.getAttribute(BEAN_REF_ATTRIBUTE)__		if (!StringUtils.hasLength(refName)) {_			_			refName = ele.getAttribute(LOCAL_REF_ATTRIBUTE)__			if (!StringUtils.hasLength(refName)) {_				error("Either 'bean' or 'local' is required for <idref> element", ele)__				return null__			}_		}_		if (!StringUtils.hasText(refName)) {_			error("<idref> element contains empty target attribute", ele)__			return null__		}_		RuntimeBeanNameReference ref = new RuntimeBeanNameReference(refName)__		ref.setSource(extractSource(ele))__		return ref__	};return,a,typed,string,value,object,for,the,given,idref,element;public,object,parse,id,ref,element,element,ele,string,ref,name,ele,get,attribute,if,string,utils,has,length,ref,name,ref,name,ele,get,attribute,if,string,utils,has,length,ref,name,error,either,bean,or,local,is,required,for,idref,element,ele,return,null,if,string,utils,has,text,ref,name,error,idref,element,contains,empty,target,attribute,ele,return,null,runtime,bean,name,reference,ref,new,runtime,bean,name,reference,ref,name,ref,set,source,extract,source,ele,return,ref
BeanDefinitionParserDelegate -> public Object parseIdRefElement(Element ele);1382030648;Return a typed String value Object for the given 'idref' element.;public Object parseIdRefElement(Element ele) {_		_		String refName = ele.getAttribute(BEAN_REF_ATTRIBUTE)__		if (!StringUtils.hasLength(refName)) {_			_			refName = ele.getAttribute(LOCAL_REF_ATTRIBUTE)__			if (!StringUtils.hasLength(refName)) {_				error("Either 'bean' or 'local' is required for <idref> element", ele)__				return null__			}_		}_		if (!StringUtils.hasText(refName)) {_			error("<idref> element contains empty target attribute", ele)__			return null__		}_		RuntimeBeanNameReference ref = new RuntimeBeanNameReference(refName)__		ref.setSource(extractSource(ele))__		return ref__	};return,a,typed,string,value,object,for,the,given,idref,element;public,object,parse,id,ref,element,element,ele,string,ref,name,ele,get,attribute,if,string,utils,has,length,ref,name,ref,name,ele,get,attribute,if,string,utils,has,length,ref,name,error,either,bean,or,local,is,required,for,idref,element,ele,return,null,if,string,utils,has,text,ref,name,error,idref,element,contains,empty,target,attribute,ele,return,null,runtime,bean,name,reference,ref,new,runtime,bean,name,reference,ref,name,ref,set,source,extract,source,ele,return,ref
BeanDefinitionParserDelegate -> public Object parseIdRefElement(Element ele);1385412762;Return a typed String value Object for the given 'idref' element.;public Object parseIdRefElement(Element ele) {_		_		String refName = ele.getAttribute(BEAN_REF_ATTRIBUTE)__		if (!StringUtils.hasLength(refName)) {_			_			refName = ele.getAttribute(LOCAL_REF_ATTRIBUTE)__			if (!StringUtils.hasLength(refName)) {_				error("Either 'bean' or 'local' is required for <idref> element", ele)__				return null__			}_		}_		if (!StringUtils.hasText(refName)) {_			error("<idref> element contains empty target attribute", ele)__			return null__		}_		RuntimeBeanNameReference ref = new RuntimeBeanNameReference(refName)__		ref.setSource(extractSource(ele))__		return ref__	};return,a,typed,string,value,object,for,the,given,idref,element;public,object,parse,id,ref,element,element,ele,string,ref,name,ele,get,attribute,if,string,utils,has,length,ref,name,ref,name,ele,get,attribute,if,string,utils,has,length,ref,name,error,either,bean,or,local,is,required,for,idref,element,ele,return,null,if,string,utils,has,text,ref,name,error,idref,element,contains,empty,target,attribute,ele,return,null,runtime,bean,name,reference,ref,new,runtime,bean,name,reference,ref,name,ref,set,source,extract,source,ele,return,ref
BeanDefinitionParserDelegate -> public Object parseIdRefElement(Element ele);1410953197;Return a typed String value Object for the given 'idref' element.;public Object parseIdRefElement(Element ele) {_		_		String refName = ele.getAttribute(BEAN_REF_ATTRIBUTE)__		if (!StringUtils.hasLength(refName)) {_			_			refName = ele.getAttribute(LOCAL_REF_ATTRIBUTE)__			if (!StringUtils.hasLength(refName)) {_				error("Either 'bean' or 'local' is required for <idref> element", ele)__				return null__			}_		}_		if (!StringUtils.hasText(refName)) {_			error("<idref> element contains empty target attribute", ele)__			return null__		}_		RuntimeBeanNameReference ref = new RuntimeBeanNameReference(refName)__		ref.setSource(extractSource(ele))__		return ref__	};return,a,typed,string,value,object,for,the,given,idref,element;public,object,parse,id,ref,element,element,ele,string,ref,name,ele,get,attribute,if,string,utils,has,length,ref,name,ref,name,ele,get,attribute,if,string,utils,has,length,ref,name,error,either,bean,or,local,is,required,for,idref,element,ele,return,null,if,string,utils,has,text,ref,name,error,idref,element,contains,empty,target,attribute,ele,return,null,runtime,bean,name,reference,ref,new,runtime,bean,name,reference,ref,name,ref,set,source,extract,source,ele,return,ref
BeanDefinitionParserDelegate -> public Object parseIdRefElement(Element ele);1411599760;Return a typed String value Object for the given 'idref' element.;public Object parseIdRefElement(Element ele) {_		_		String refName = ele.getAttribute(BEAN_REF_ATTRIBUTE)__		if (!StringUtils.hasLength(refName)) {_			_			refName = ele.getAttribute(LOCAL_REF_ATTRIBUTE)__			if (!StringUtils.hasLength(refName)) {_				error("Either 'bean' or 'local' is required for <idref> element", ele)__				return null__			}_		}_		if (!StringUtils.hasText(refName)) {_			error("<idref> element contains empty target attribute", ele)__			return null__		}_		RuntimeBeanNameReference ref = new RuntimeBeanNameReference(refName)__		ref.setSource(extractSource(ele))__		return ref__	};return,a,typed,string,value,object,for,the,given,idref,element;public,object,parse,id,ref,element,element,ele,string,ref,name,ele,get,attribute,if,string,utils,has,length,ref,name,ref,name,ele,get,attribute,if,string,utils,has,length,ref,name,error,either,bean,or,local,is,required,for,idref,element,ele,return,null,if,string,utils,has,text,ref,name,error,idref,element,contains,empty,target,attribute,ele,return,null,runtime,bean,name,reference,ref,new,runtime,bean,name,reference,ref,name,ref,set,source,extract,source,ele,return,ref
BeanDefinitionParserDelegate -> public Object parseIdRefElement(Element ele);1419966315;Return a typed String value Object for the given 'idref' element.;public Object parseIdRefElement(Element ele) {_		_		String refName = ele.getAttribute(BEAN_REF_ATTRIBUTE)__		if (!StringUtils.hasLength(refName)) {_			_			refName = ele.getAttribute(LOCAL_REF_ATTRIBUTE)__			if (!StringUtils.hasLength(refName)) {_				error("Either 'bean' or 'local' is required for <idref> element", ele)__				return null__			}_		}_		if (!StringUtils.hasText(refName)) {_			error("<idref> element contains empty target attribute", ele)__			return null__		}_		RuntimeBeanNameReference ref = new RuntimeBeanNameReference(refName)__		ref.setSource(extractSource(ele))__		return ref__	};return,a,typed,string,value,object,for,the,given,idref,element;public,object,parse,id,ref,element,element,ele,string,ref,name,ele,get,attribute,if,string,utils,has,length,ref,name,ref,name,ele,get,attribute,if,string,utils,has,length,ref,name,error,either,bean,or,local,is,required,for,idref,element,ele,return,null,if,string,utils,has,text,ref,name,error,idref,element,contains,empty,target,attribute,ele,return,null,runtime,bean,name,reference,ref,new,runtime,bean,name,reference,ref,name,ref,set,source,extract,source,ele,return,ref
BeanDefinitionParserDelegate -> public Object parseIdRefElement(Element ele);1431958785;Return a typed String value Object for the given 'idref' element.;public Object parseIdRefElement(Element ele) {_		_		String refName = ele.getAttribute(BEAN_REF_ATTRIBUTE)__		if (!StringUtils.hasLength(refName)) {_			_			refName = ele.getAttribute(LOCAL_REF_ATTRIBUTE)__			if (!StringUtils.hasLength(refName)) {_				error("Either 'bean' or 'local' is required for <idref> element", ele)__				return null__			}_		}_		if (!StringUtils.hasText(refName)) {_			error("<idref> element contains empty target attribute", ele)__			return null__		}_		RuntimeBeanNameReference ref = new RuntimeBeanNameReference(refName)__		ref.setSource(extractSource(ele))__		return ref__	};return,a,typed,string,value,object,for,the,given,idref,element;public,object,parse,id,ref,element,element,ele,string,ref,name,ele,get,attribute,if,string,utils,has,length,ref,name,ref,name,ele,get,attribute,if,string,utils,has,length,ref,name,error,either,bean,or,local,is,required,for,idref,element,ele,return,null,if,string,utils,has,text,ref,name,error,idref,element,contains,empty,target,attribute,ele,return,null,runtime,bean,name,reference,ref,new,runtime,bean,name,reference,ref,name,ref,set,source,extract,source,ele,return,ref
BeanDefinitionParserDelegate -> public Object parseIdRefElement(Element ele);1432135182;Return a typed String value Object for the given 'idref' element.;public Object parseIdRefElement(Element ele) {_		_		String refName = ele.getAttribute(BEAN_REF_ATTRIBUTE)__		if (!StringUtils.hasLength(refName)) {_			_			refName = ele.getAttribute(LOCAL_REF_ATTRIBUTE)__			if (!StringUtils.hasLength(refName)) {_				error("Either 'bean' or 'local' is required for <idref> element", ele)__				return null__			}_		}_		if (!StringUtils.hasText(refName)) {_			error("<idref> element contains empty target attribute", ele)__			return null__		}_		RuntimeBeanNameReference ref = new RuntimeBeanNameReference(refName)__		ref.setSource(extractSource(ele))__		return ref__	};return,a,typed,string,value,object,for,the,given,idref,element;public,object,parse,id,ref,element,element,ele,string,ref,name,ele,get,attribute,if,string,utils,has,length,ref,name,ref,name,ele,get,attribute,if,string,utils,has,length,ref,name,error,either,bean,or,local,is,required,for,idref,element,ele,return,null,if,string,utils,has,text,ref,name,error,idref,element,contains,empty,target,attribute,ele,return,null,runtime,bean,name,reference,ref,new,runtime,bean,name,reference,ref,name,ref,set,source,extract,source,ele,return,ref
BeanDefinitionParserDelegate -> public Object parseIdRefElement(Element ele);1447323728;Return a typed String value Object for the given 'idref' element.;public Object parseIdRefElement(Element ele) {_		_		String refName = ele.getAttribute(BEAN_REF_ATTRIBUTE)__		if (!StringUtils.hasLength(refName)) {_			_			refName = ele.getAttribute(LOCAL_REF_ATTRIBUTE)__			if (!StringUtils.hasLength(refName)) {_				error("Either 'bean' or 'local' is required for <idref> element", ele)__				return null__			}_		}_		if (!StringUtils.hasText(refName)) {_			error("<idref> element contains empty target attribute", ele)__			return null__		}_		RuntimeBeanNameReference ref = new RuntimeBeanNameReference(refName)__		ref.setSource(extractSource(ele))__		return ref__	};return,a,typed,string,value,object,for,the,given,idref,element;public,object,parse,id,ref,element,element,ele,string,ref,name,ele,get,attribute,if,string,utils,has,length,ref,name,ref,name,ele,get,attribute,if,string,utils,has,length,ref,name,error,either,bean,or,local,is,required,for,idref,element,ele,return,null,if,string,utils,has,text,ref,name,error,idref,element,contains,empty,target,attribute,ele,return,null,runtime,bean,name,reference,ref,new,runtime,bean,name,reference,ref,name,ref,set,source,extract,source,ele,return,ref
BeanDefinitionParserDelegate -> public Object parseIdRefElement(Element ele);1467726769;Return a typed String value Object for the given 'idref' element.;public Object parseIdRefElement(Element ele) {_		_		String refName = ele.getAttribute(BEAN_REF_ATTRIBUTE)__		if (!StringUtils.hasLength(refName)) {_			_			refName = ele.getAttribute(LOCAL_REF_ATTRIBUTE)__			if (!StringUtils.hasLength(refName)) {_				error("Either 'bean' or 'local' is required for <idref> element", ele)__				return null__			}_		}_		if (!StringUtils.hasText(refName)) {_			error("<idref> element contains empty target attribute", ele)__			return null__		}_		RuntimeBeanNameReference ref = new RuntimeBeanNameReference(refName)__		ref.setSource(extractSource(ele))__		return ref__	};return,a,typed,string,value,object,for,the,given,idref,element;public,object,parse,id,ref,element,element,ele,string,ref,name,ele,get,attribute,if,string,utils,has,length,ref,name,ref,name,ele,get,attribute,if,string,utils,has,length,ref,name,error,either,bean,or,local,is,required,for,idref,element,ele,return,null,if,string,utils,has,text,ref,name,error,idref,element,contains,empty,target,attribute,ele,return,null,runtime,bean,name,reference,ref,new,runtime,bean,name,reference,ref,name,ref,set,source,extract,source,ele,return,ref
BeanDefinitionParserDelegate -> public Object parseIdRefElement(Element ele);1467730834;Return a typed String value Object for the given 'idref' element.;public Object parseIdRefElement(Element ele) {_		_		String refName = ele.getAttribute(BEAN_REF_ATTRIBUTE)__		if (!StringUtils.hasLength(refName)) {_			_			refName = ele.getAttribute(LOCAL_REF_ATTRIBUTE)__			if (!StringUtils.hasLength(refName)) {_				error("Either 'bean' or 'local' is required for <idref> element", ele)__				return null__			}_		}_		if (!StringUtils.hasText(refName)) {_			error("<idref> element contains empty target attribute", ele)__			return null__		}_		RuntimeBeanNameReference ref = new RuntimeBeanNameReference(refName)__		ref.setSource(extractSource(ele))__		return ref__	};return,a,typed,string,value,object,for,the,given,idref,element;public,object,parse,id,ref,element,element,ele,string,ref,name,ele,get,attribute,if,string,utils,has,length,ref,name,ref,name,ele,get,attribute,if,string,utils,has,length,ref,name,error,either,bean,or,local,is,required,for,idref,element,ele,return,null,if,string,utils,has,text,ref,name,error,idref,element,contains,empty,target,attribute,ele,return,null,runtime,bean,name,reference,ref,new,runtime,bean,name,reference,ref,name,ref,set,source,extract,source,ele,return,ref
BeanDefinitionParserDelegate -> public Object parseIdRefElement(Element ele);1467744603;Return a typed String value Object for the given 'idref' element.;public Object parseIdRefElement(Element ele) {_		_		String refName = ele.getAttribute(BEAN_REF_ATTRIBUTE)__		if (!StringUtils.hasLength(refName)) {_			error("'bean' is required for <idref> element", ele)__			return null__		}_		if (!StringUtils.hasText(refName)) {_			error("<idref> element contains empty target attribute", ele)__			return null__		}_		RuntimeBeanNameReference ref = new RuntimeBeanNameReference(refName)__		ref.setSource(extractSource(ele))__		return ref__	};return,a,typed,string,value,object,for,the,given,idref,element;public,object,parse,id,ref,element,element,ele,string,ref,name,ele,get,attribute,if,string,utils,has,length,ref,name,error,bean,is,required,for,idref,element,ele,return,null,if,string,utils,has,text,ref,name,error,idref,element,contains,empty,target,attribute,ele,return,null,runtime,bean,name,reference,ref,new,runtime,bean,name,reference,ref,name,ref,set,source,extract,source,ele,return,ref
BeanDefinitionParserDelegate -> public Object parseIdRefElement(Element ele);1487245676;Return a typed String value Object for the given 'idref' element.;public Object parseIdRefElement(Element ele) {_		_		String refName = ele.getAttribute(BEAN_REF_ATTRIBUTE)__		if (!StringUtils.hasLength(refName)) {_			error("'bean' is required for <idref> element", ele)__			return null__		}_		if (!StringUtils.hasText(refName)) {_			error("<idref> element contains empty target attribute", ele)__			return null__		}_		RuntimeBeanNameReference ref = new RuntimeBeanNameReference(refName)__		ref.setSource(extractSource(ele))__		return ref__	};return,a,typed,string,value,object,for,the,given,idref,element;public,object,parse,id,ref,element,element,ele,string,ref,name,ele,get,attribute,if,string,utils,has,length,ref,name,error,bean,is,required,for,idref,element,ele,return,null,if,string,utils,has,text,ref,name,error,idref,element,contains,empty,target,attribute,ele,return,null,runtime,bean,name,reference,ref,new,runtime,bean,name,reference,ref,name,ref,set,source,extract,source,ele,return,ref
BeanDefinitionParserDelegate -> public Object parseIdRefElement(Element ele);1487255851;Return a typed String value Object for the given 'idref' element.;public Object parseIdRefElement(Element ele) {_		_		String refName = ele.getAttribute(BEAN_REF_ATTRIBUTE)__		if (!StringUtils.hasLength(refName)) {_			error("'bean' is required for <idref> element", ele)__			return null__		}_		if (!StringUtils.hasText(refName)) {_			error("<idref> element contains empty target attribute", ele)__			return null__		}_		RuntimeBeanNameReference ref = new RuntimeBeanNameReference(refName)__		ref.setSource(extractSource(ele))__		return ref__	};return,a,typed,string,value,object,for,the,given,idref,element;public,object,parse,id,ref,element,element,ele,string,ref,name,ele,get,attribute,if,string,utils,has,length,ref,name,error,bean,is,required,for,idref,element,ele,return,null,if,string,utils,has,text,ref,name,error,idref,element,contains,empty,target,attribute,ele,return,null,runtime,bean,name,reference,ref,new,runtime,bean,name,reference,ref,name,ref,set,source,extract,source,ele,return,ref
BeanDefinitionParserDelegate -> public Object parseIdRefElement(Element ele);1494586217;Return a typed String value Object for the given 'idref' element.;public Object parseIdRefElement(Element ele) {_		_		String refName = ele.getAttribute(BEAN_REF_ATTRIBUTE)__		if (!StringUtils.hasLength(refName)) {_			error("'bean' is required for <idref> element", ele)__			return null__		}_		if (!StringUtils.hasText(refName)) {_			error("<idref> element contains empty target attribute", ele)__			return null__		}_		RuntimeBeanNameReference ref = new RuntimeBeanNameReference(refName)__		ref.setSource(extractSource(ele))__		return ref__	};return,a,typed,string,value,object,for,the,given,idref,element;public,object,parse,id,ref,element,element,ele,string,ref,name,ele,get,attribute,if,string,utils,has,length,ref,name,error,bean,is,required,for,idref,element,ele,return,null,if,string,utils,has,text,ref,name,error,idref,element,contains,empty,target,attribute,ele,return,null,runtime,bean,name,reference,ref,new,runtime,bean,name,reference,ref,name,ref,set,source,extract,source,ele,return,ref
BeanDefinitionParserDelegate -> @Nullable 	public String getNamespaceURI(Node node);1496837955;Get the namespace URI for the supplied node._<p>The default implementation uses {@link Node#getNamespaceURI}._Subclasses may override the default implementation to provide a_different namespace identification mechanism._@param node the node;@Nullable_	public String getNamespaceURI(Node node) {_		return node.getNamespaceURI()__	};get,the,namespace,uri,for,the,supplied,node,p,the,default,implementation,uses,link,node,get,namespace,uri,subclasses,may,override,the,default,implementation,to,provide,a,different,namespace,identification,mechanism,param,node,the,node;nullable,public,string,get,namespace,uri,node,node,return,node,get,namespace,uri
BeanDefinitionParserDelegate -> @Nullable 	public String getNamespaceURI(Node node);1503008029;Get the namespace URI for the supplied node._<p>The default implementation uses {@link Node#getNamespaceURI}._Subclasses may override the default implementation to provide a_different namespace identification mechanism._@param node the node;@Nullable_	public String getNamespaceURI(Node node) {_		return node.getNamespaceURI()__	};get,the,namespace,uri,for,the,supplied,node,p,the,default,implementation,uses,link,node,get,namespace,uri,subclasses,may,override,the,default,implementation,to,provide,a,different,namespace,identification,mechanism,param,node,the,node;nullable,public,string,get,namespace,uri,node,node,return,node,get,namespace,uri
BeanDefinitionParserDelegate -> @Nullable 	public String getNamespaceURI(Node node);1519513303;Get the namespace URI for the supplied node._<p>The default implementation uses {@link Node#getNamespaceURI}._Subclasses may override the default implementation to provide a_different namespace identification mechanism._@param node the node;@Nullable_	public String getNamespaceURI(Node node) {_		return node.getNamespaceURI()__	};get,the,namespace,uri,for,the,supplied,node,p,the,default,implementation,uses,link,node,get,namespace,uri,subclasses,may,override,the,default,implementation,to,provide,a,different,namespace,identification,mechanism,param,node,the,node;nullable,public,string,get,namespace,uri,node,node,return,node,get,namespace,uri
BeanDefinitionParserDelegate -> @Nullable 	public String getNamespaceURI(Node node);1530174524;Get the namespace URI for the supplied node._<p>The default implementation uses {@link Node#getNamespaceURI}._Subclasses may override the default implementation to provide a_different namespace identification mechanism._@param node the node;@Nullable_	public String getNamespaceURI(Node node) {_		return node.getNamespaceURI()__	};get,the,namespace,uri,for,the,supplied,node,p,the,default,implementation,uses,link,node,get,namespace,uri,subclasses,may,override,the,default,implementation,to,provide,a,different,namespace,identification,mechanism,param,node,the,node;nullable,public,string,get,namespace,uri,node,node,return,node,get,namespace,uri
BeanDefinitionParserDelegate -> @Nullable 	public String getNamespaceURI(Node node);1530190293;Get the namespace URI for the supplied node._<p>The default implementation uses {@link Node#getNamespaceURI}._Subclasses may override the default implementation to provide a_different namespace identification mechanism._@param node the node;@Nullable_	public String getNamespaceURI(Node node) {_		return node.getNamespaceURI()__	};get,the,namespace,uri,for,the,supplied,node,p,the,default,implementation,uses,link,node,get,namespace,uri,subclasses,may,override,the,default,implementation,to,provide,a,different,namespace,identification,mechanism,param,node,the,node;nullable,public,string,get,namespace,uri,node,node,return,node,get,namespace,uri
BeanDefinitionParserDelegate -> @Nullable 	public String getNamespaceURI(Node node);1532706365;Get the namespace URI for the supplied node._<p>The default implementation uses {@link Node#getNamespaceURI}._Subclasses may override the default implementation to provide a_different namespace identification mechanism._@param node the node;@Nullable_	public String getNamespaceURI(Node node) {_		return node.getNamespaceURI()__	};get,the,namespace,uri,for,the,supplied,node,p,the,default,implementation,uses,link,node,get,namespace,uri,subclasses,may,override,the,default,implementation,to,provide,a,different,namespace,identification,mechanism,param,node,the,node;nullable,public,string,get,namespace,uri,node,node,return,node,get,namespace,uri
BeanDefinitionParserDelegate -> @Nullable 	public String getNamespaceURI(Node node);1546958161;Get the namespace URI for the supplied node._<p>The default implementation uses {@link Node#getNamespaceURI}._Subclasses may override the default implementation to provide a_different namespace identification mechanism._@param node the node;@Nullable_	public String getNamespaceURI(Node node) {_		return node.getNamespaceURI()__	};get,the,namespace,uri,for,the,supplied,node,p,the,default,implementation,uses,link,node,get,namespace,uri,subclasses,may,override,the,default,implementation,to,provide,a,different,namespace,identification,mechanism,param,node,the,node;nullable,public,string,get,namespace,uri,node,node,return,node,get,namespace,uri
BeanDefinitionParserDelegate -> protected void error(String message, Node source);1328020251;Report an error with the given message for the given source element.;protected void error(String message, Node source) {_		this.readerContext.error(message, source, this.parseState.snapshot())__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,node,source,this,reader,context,error,message,source,this,parse,state,snapshot
BeanDefinitionParserDelegate -> protected void error(String message, Node source);1335774711;Report an error with the given message for the given source element.;protected void error(String message, Node source) {_		this.readerContext.error(message, source, this.parseState.snapshot())__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,node,source,this,reader,context,error,message,source,this,parse,state,snapshot
BeanDefinitionParserDelegate -> protected void error(String message, Node source);1337341719;Report an error with the given message for the given source element.;protected void error(String message, Node source) {_		this.readerContext.error(message, source, this.parseState.snapshot())__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,node,source,this,reader,context,error,message,source,this,parse,state,snapshot
BeanDefinitionParserDelegate -> protected void error(String message, Node source);1351392612;Report an error with the given message for the given source element.;protected void error(String message, Node source) {_		this.readerContext.error(message, source, this.parseState.snapshot())__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,node,source,this,reader,context,error,message,source,this,parse,state,snapshot
BeanDefinitionParserDelegate -> protected void error(String message, Node source);1351696936;Report an error with the given message for the given source element.;protected void error(String message, Node source) {_		this.readerContext.error(message, source, this.parseState.snapshot())__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,node,source,this,reader,context,error,message,source,this,parse,state,snapshot
BeanDefinitionParserDelegate -> protected void error(String message, Node source);1356735495;Report an error with the given message for the given source element.;protected void error(String message, Node source) {_		this.readerContext.error(message, source, this.parseState.snapshot())__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,node,source,this,reader,context,error,message,source,this,parse,state,snapshot
BeanDefinitionParserDelegate -> protected void error(String message, Node source);1357119417;Report an error with the given message for the given source element.;protected void error(String message, Node source) {_		this.readerContext.error(message, source, this.parseState.snapshot())__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,node,source,this,reader,context,error,message,source,this,parse,state,snapshot
BeanDefinitionParserDelegate -> protected void error(String message, Node source);1367943112;Report an error with the given message for the given source element.;protected void error(String message, Node source) {_		this.readerContext.error(message, source, this.parseState.snapshot())__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,node,source,this,reader,context,error,message,source,this,parse,state,snapshot
BeanDefinitionParserDelegate -> protected void error(String message, Node source);1382030648;Report an error with the given message for the given source element.;protected void error(String message, Node source) {_		this.readerContext.error(message, source, this.parseState.snapshot())__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,node,source,this,reader,context,error,message,source,this,parse,state,snapshot
BeanDefinitionParserDelegate -> protected void error(String message, Node source);1385412762;Report an error with the given message for the given source element.;protected void error(String message, Node source) {_		this.readerContext.error(message, source, this.parseState.snapshot())__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,node,source,this,reader,context,error,message,source,this,parse,state,snapshot
BeanDefinitionParserDelegate -> protected void error(String message, Node source);1410953197;Report an error with the given message for the given source element.;protected void error(String message, Node source) {_		this.readerContext.error(message, source, this.parseState.snapshot())__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,node,source,this,reader,context,error,message,source,this,parse,state,snapshot
BeanDefinitionParserDelegate -> protected void error(String message, Node source);1411599760;Report an error with the given message for the given source element.;protected void error(String message, Node source) {_		this.readerContext.error(message, source, this.parseState.snapshot())__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,node,source,this,reader,context,error,message,source,this,parse,state,snapshot
BeanDefinitionParserDelegate -> protected void error(String message, Node source);1419966315;Report an error with the given message for the given source element.;protected void error(String message, Node source) {_		this.readerContext.error(message, source, this.parseState.snapshot())__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,node,source,this,reader,context,error,message,source,this,parse,state,snapshot
BeanDefinitionParserDelegate -> protected void error(String message, Node source);1431958785;Report an error with the given message for the given source element.;protected void error(String message, Node source) {_		this.readerContext.error(message, source, this.parseState.snapshot())__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,node,source,this,reader,context,error,message,source,this,parse,state,snapshot
BeanDefinitionParserDelegate -> protected void error(String message, Node source);1432135182;Report an error with the given message for the given source element.;protected void error(String message, Node source) {_		this.readerContext.error(message, source, this.parseState.snapshot())__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,node,source,this,reader,context,error,message,source,this,parse,state,snapshot
BeanDefinitionParserDelegate -> protected void error(String message, Node source);1447323728;Report an error with the given message for the given source element.;protected void error(String message, Node source) {_		this.readerContext.error(message, source, this.parseState.snapshot())__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,node,source,this,reader,context,error,message,source,this,parse,state,snapshot
BeanDefinitionParserDelegate -> protected void error(String message, Node source);1467726769;Report an error with the given message for the given source element.;protected void error(String message, Node source) {_		this.readerContext.error(message, source, this.parseState.snapshot())__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,node,source,this,reader,context,error,message,source,this,parse,state,snapshot
BeanDefinitionParserDelegate -> protected void error(String message, Node source);1467730834;Report an error with the given message for the given source element.;protected void error(String message, Node source) {_		this.readerContext.error(message, source, this.parseState.snapshot())__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,node,source,this,reader,context,error,message,source,this,parse,state,snapshot
BeanDefinitionParserDelegate -> protected void error(String message, Node source);1467744603;Report an error with the given message for the given source element.;protected void error(String message, Node source) {_		this.readerContext.error(message, source, this.parseState.snapshot())__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,node,source,this,reader,context,error,message,source,this,parse,state,snapshot
BeanDefinitionParserDelegate -> protected void error(String message, Node source);1487245676;Report an error with the given message for the given source element.;protected void error(String message, Node source) {_		this.readerContext.error(message, source, this.parseState.snapshot())__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,node,source,this,reader,context,error,message,source,this,parse,state,snapshot
BeanDefinitionParserDelegate -> protected void error(String message, Node source);1487255851;Report an error with the given message for the given source element.;protected void error(String message, Node source) {_		this.readerContext.error(message, source, this.parseState.snapshot())__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,node,source,this,reader,context,error,message,source,this,parse,state,snapshot
BeanDefinitionParserDelegate -> protected void error(String message, Node source);1494586217;Report an error with the given message for the given source element.;protected void error(String message, Node source) {_		this.readerContext.error(message, source, this.parseState.snapshot())__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,node,source,this,reader,context,error,message,source,this,parse,state,snapshot
BeanDefinitionParserDelegate -> protected void error(String message, Node source);1495868221;Report an error with the given message for the given source element.;protected void error(String message, Node source) {_		this.readerContext.error(message, source, this.parseState.snapshot())__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,node,source,this,reader,context,error,message,source,this,parse,state,snapshot
BeanDefinitionParserDelegate -> protected void error(String message, Node source);1496259743;Report an error with the given message for the given source element.;protected void error(String message, Node source) {_		this.readerContext.error(message, source, this.parseState.snapshot())__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,node,source,this,reader,context,error,message,source,this,parse,state,snapshot
BeanDefinitionParserDelegate -> protected void error(String message, Node source);1496837955;Report an error with the given message for the given source element.;protected void error(String message, Node source) {_		this.readerContext.error(message, source, this.parseState.snapshot())__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,node,source,this,reader,context,error,message,source,this,parse,state,snapshot
BeanDefinitionParserDelegate -> protected void error(String message, Node source);1503008029;Report an error with the given message for the given source element.;protected void error(String message, Node source) {_		this.readerContext.error(message, source, this.parseState.snapshot())__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,node,source,this,reader,context,error,message,source,this,parse,state,snapshot
BeanDefinitionParserDelegate -> protected void error(String message, Node source);1519513303;Report an error with the given message for the given source element.;protected void error(String message, Node source) {_		this.readerContext.error(message, source, this.parseState.snapshot())__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,node,source,this,reader,context,error,message,source,this,parse,state,snapshot
BeanDefinitionParserDelegate -> protected void error(String message, Node source);1530174524;Report an error with the given message for the given source element.;protected void error(String message, Node source) {_		this.readerContext.error(message, source, this.parseState.snapshot())__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,node,source,this,reader,context,error,message,source,this,parse,state,snapshot
BeanDefinitionParserDelegate -> protected void error(String message, Node source);1530190293;Report an error with the given message for the given source element.;protected void error(String message, Node source) {_		this.readerContext.error(message, source, this.parseState.snapshot())__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,node,source,this,reader,context,error,message,source,this,parse,state,snapshot
BeanDefinitionParserDelegate -> protected void error(String message, Node source);1532706365;Report an error with the given message for the given source element.;protected void error(String message, Node source) {_		this.readerContext.error(message, source, this.parseState.snapshot())__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,node,source,this,reader,context,error,message,source,this,parse,state,snapshot
BeanDefinitionParserDelegate -> protected void error(String message, Node source);1546958161;Report an error with the given message for the given source element.;protected void error(String message, Node source) {_		this.readerContext.error(message, source, this.parseState.snapshot())__	};report,an,error,with,the,given,message,for,the,given,source,element;protected,void,error,string,message,node,source,this,reader,context,error,message,source,this,parse,state,snapshot
BeanDefinitionParserDelegate -> public void parseReplacedMethodSubElements(Element beanEle, MethodOverrides overrides);1328020251;Parse replaced-method sub-elements of the given bean element.;public void parseReplacedMethodSubElements(Element beanEle, MethodOverrides overrides) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, REPLACED_METHOD_ELEMENT)) {_				Element replacedMethodEle = (Element) node__				String name = replacedMethodEle.getAttribute(NAME_ATTRIBUTE)__				String callback = replacedMethodEle.getAttribute(REPLACER_ATTRIBUTE)__				ReplaceOverride replaceOverride = new ReplaceOverride(name, callback)__				_				List<Element> argTypeEles = DomUtils.getChildElementsByTagName(replacedMethodEle, ARG_TYPE_ELEMENT)__				for (Element argTypeEle : argTypeEles) {_					replaceOverride.addTypeIdentifier(argTypeEle.getAttribute(ARG_TYPE_MATCH_ATTRIBUTE))__				}_				replaceOverride.setSource(extractSource(replacedMethodEle))__				overrides.addOverride(replaceOverride)__			}_		}_	};parse,replaced,method,sub,elements,of,the,given,bean,element;public,void,parse,replaced,method,sub,elements,element,bean,ele,method,overrides,overrides,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,replaced,method,ele,element,node,string,name,replaced,method,ele,get,attribute,string,callback,replaced,method,ele,get,attribute,replace,override,replace,override,new,replace,override,name,callback,list,element,arg,type,eles,dom,utils,get,child,elements,by,tag,name,replaced,method,ele,for,element,arg,type,ele,arg,type,eles,replace,override,add,type,identifier,arg,type,ele,get,attribute,replace,override,set,source,extract,source,replaced,method,ele,overrides,add,override,replace,override
BeanDefinitionParserDelegate -> public void parseReplacedMethodSubElements(Element beanEle, MethodOverrides overrides);1335774711;Parse replaced-method sub-elements of the given bean element.;public void parseReplacedMethodSubElements(Element beanEle, MethodOverrides overrides) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, REPLACED_METHOD_ELEMENT)) {_				Element replacedMethodEle = (Element) node__				String name = replacedMethodEle.getAttribute(NAME_ATTRIBUTE)__				String callback = replacedMethodEle.getAttribute(REPLACER_ATTRIBUTE)__				ReplaceOverride replaceOverride = new ReplaceOverride(name, callback)__				_				List<Element> argTypeEles = DomUtils.getChildElementsByTagName(replacedMethodEle, ARG_TYPE_ELEMENT)__				for (Element argTypeEle : argTypeEles) {_					replaceOverride.addTypeIdentifier(argTypeEle.getAttribute(ARG_TYPE_MATCH_ATTRIBUTE))__				}_				replaceOverride.setSource(extractSource(replacedMethodEle))__				overrides.addOverride(replaceOverride)__			}_		}_	};parse,replaced,method,sub,elements,of,the,given,bean,element;public,void,parse,replaced,method,sub,elements,element,bean,ele,method,overrides,overrides,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,replaced,method,ele,element,node,string,name,replaced,method,ele,get,attribute,string,callback,replaced,method,ele,get,attribute,replace,override,replace,override,new,replace,override,name,callback,list,element,arg,type,eles,dom,utils,get,child,elements,by,tag,name,replaced,method,ele,for,element,arg,type,ele,arg,type,eles,replace,override,add,type,identifier,arg,type,ele,get,attribute,replace,override,set,source,extract,source,replaced,method,ele,overrides,add,override,replace,override
BeanDefinitionParserDelegate -> public void parseReplacedMethodSubElements(Element beanEle, MethodOverrides overrides);1337341719;Parse replaced-method sub-elements of the given bean element.;public void parseReplacedMethodSubElements(Element beanEle, MethodOverrides overrides) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, REPLACED_METHOD_ELEMENT)) {_				Element replacedMethodEle = (Element) node__				String name = replacedMethodEle.getAttribute(NAME_ATTRIBUTE)__				String callback = replacedMethodEle.getAttribute(REPLACER_ATTRIBUTE)__				ReplaceOverride replaceOverride = new ReplaceOverride(name, callback)__				_				List<Element> argTypeEles = DomUtils.getChildElementsByTagName(replacedMethodEle, ARG_TYPE_ELEMENT)__				for (Element argTypeEle : argTypeEles) {_					replaceOverride.addTypeIdentifier(argTypeEle.getAttribute(ARG_TYPE_MATCH_ATTRIBUTE))__				}_				replaceOverride.setSource(extractSource(replacedMethodEle))__				overrides.addOverride(replaceOverride)__			}_		}_	};parse,replaced,method,sub,elements,of,the,given,bean,element;public,void,parse,replaced,method,sub,elements,element,bean,ele,method,overrides,overrides,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,replaced,method,ele,element,node,string,name,replaced,method,ele,get,attribute,string,callback,replaced,method,ele,get,attribute,replace,override,replace,override,new,replace,override,name,callback,list,element,arg,type,eles,dom,utils,get,child,elements,by,tag,name,replaced,method,ele,for,element,arg,type,ele,arg,type,eles,replace,override,add,type,identifier,arg,type,ele,get,attribute,replace,override,set,source,extract,source,replaced,method,ele,overrides,add,override,replace,override
BeanDefinitionParserDelegate -> public void parseReplacedMethodSubElements(Element beanEle, MethodOverrides overrides);1351392612;Parse replaced-method sub-elements of the given bean element.;public void parseReplacedMethodSubElements(Element beanEle, MethodOverrides overrides) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, REPLACED_METHOD_ELEMENT)) {_				Element replacedMethodEle = (Element) node__				String name = replacedMethodEle.getAttribute(NAME_ATTRIBUTE)__				String callback = replacedMethodEle.getAttribute(REPLACER_ATTRIBUTE)__				ReplaceOverride replaceOverride = new ReplaceOverride(name, callback)__				_				List<Element> argTypeEles = DomUtils.getChildElementsByTagName(replacedMethodEle, ARG_TYPE_ELEMENT)__				for (Element argTypeEle : argTypeEles) {_					String match = argTypeEle.getAttribute(ARG_TYPE_MATCH_ATTRIBUTE)__					match = (StringUtils.hasText(match) ? match : DomUtils.getTextValue(argTypeEle))__					if (StringUtils.hasText(match)) {_						replaceOverride.addTypeIdentifier(match)__					}_				}_				replaceOverride.setSource(extractSource(replacedMethodEle))__				overrides.addOverride(replaceOverride)__			}_		}_	};parse,replaced,method,sub,elements,of,the,given,bean,element;public,void,parse,replaced,method,sub,elements,element,bean,ele,method,overrides,overrides,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,replaced,method,ele,element,node,string,name,replaced,method,ele,get,attribute,string,callback,replaced,method,ele,get,attribute,replace,override,replace,override,new,replace,override,name,callback,list,element,arg,type,eles,dom,utils,get,child,elements,by,tag,name,replaced,method,ele,for,element,arg,type,ele,arg,type,eles,string,match,arg,type,ele,get,attribute,match,string,utils,has,text,match,match,dom,utils,get,text,value,arg,type,ele,if,string,utils,has,text,match,replace,override,add,type,identifier,match,replace,override,set,source,extract,source,replaced,method,ele,overrides,add,override,replace,override
BeanDefinitionParserDelegate -> public void parseReplacedMethodSubElements(Element beanEle, MethodOverrides overrides);1351696936;Parse replaced-method sub-elements of the given bean element.;public void parseReplacedMethodSubElements(Element beanEle, MethodOverrides overrides) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, REPLACED_METHOD_ELEMENT)) {_				Element replacedMethodEle = (Element) node__				String name = replacedMethodEle.getAttribute(NAME_ATTRIBUTE)__				String callback = replacedMethodEle.getAttribute(REPLACER_ATTRIBUTE)__				ReplaceOverride replaceOverride = new ReplaceOverride(name, callback)__				_				List<Element> argTypeEles = DomUtils.getChildElementsByTagName(replacedMethodEle, ARG_TYPE_ELEMENT)__				for (Element argTypeEle : argTypeEles) {_					String match = argTypeEle.getAttribute(ARG_TYPE_MATCH_ATTRIBUTE)__					match = (StringUtils.hasText(match) ? match : DomUtils.getTextValue(argTypeEle))__					if (StringUtils.hasText(match)) {_						replaceOverride.addTypeIdentifier(match)__					}_				}_				replaceOverride.setSource(extractSource(replacedMethodEle))__				overrides.addOverride(replaceOverride)__			}_		}_	};parse,replaced,method,sub,elements,of,the,given,bean,element;public,void,parse,replaced,method,sub,elements,element,bean,ele,method,overrides,overrides,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,replaced,method,ele,element,node,string,name,replaced,method,ele,get,attribute,string,callback,replaced,method,ele,get,attribute,replace,override,replace,override,new,replace,override,name,callback,list,element,arg,type,eles,dom,utils,get,child,elements,by,tag,name,replaced,method,ele,for,element,arg,type,ele,arg,type,eles,string,match,arg,type,ele,get,attribute,match,string,utils,has,text,match,match,dom,utils,get,text,value,arg,type,ele,if,string,utils,has,text,match,replace,override,add,type,identifier,match,replace,override,set,source,extract,source,replaced,method,ele,overrides,add,override,replace,override
BeanDefinitionParserDelegate -> public void parseReplacedMethodSubElements(Element beanEle, MethodOverrides overrides);1356735495;Parse replaced-method sub-elements of the given bean element.;public void parseReplacedMethodSubElements(Element beanEle, MethodOverrides overrides) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, REPLACED_METHOD_ELEMENT)) {_				Element replacedMethodEle = (Element) node__				String name = replacedMethodEle.getAttribute(NAME_ATTRIBUTE)__				String callback = replacedMethodEle.getAttribute(REPLACER_ATTRIBUTE)__				ReplaceOverride replaceOverride = new ReplaceOverride(name, callback)__				_				List<Element> argTypeEles = DomUtils.getChildElementsByTagName(replacedMethodEle, ARG_TYPE_ELEMENT)__				for (Element argTypeEle : argTypeEles) {_					String match = argTypeEle.getAttribute(ARG_TYPE_MATCH_ATTRIBUTE)__					match = (StringUtils.hasText(match) ? match : DomUtils.getTextValue(argTypeEle))__					if (StringUtils.hasText(match)) {_						replaceOverride.addTypeIdentifier(match)__					}_				}_				replaceOverride.setSource(extractSource(replacedMethodEle))__				overrides.addOverride(replaceOverride)__			}_		}_	};parse,replaced,method,sub,elements,of,the,given,bean,element;public,void,parse,replaced,method,sub,elements,element,bean,ele,method,overrides,overrides,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,replaced,method,ele,element,node,string,name,replaced,method,ele,get,attribute,string,callback,replaced,method,ele,get,attribute,replace,override,replace,override,new,replace,override,name,callback,list,element,arg,type,eles,dom,utils,get,child,elements,by,tag,name,replaced,method,ele,for,element,arg,type,ele,arg,type,eles,string,match,arg,type,ele,get,attribute,match,string,utils,has,text,match,match,dom,utils,get,text,value,arg,type,ele,if,string,utils,has,text,match,replace,override,add,type,identifier,match,replace,override,set,source,extract,source,replaced,method,ele,overrides,add,override,replace,override
BeanDefinitionParserDelegate -> public void parseReplacedMethodSubElements(Element beanEle, MethodOverrides overrides);1357119417;Parse replaced-method sub-elements of the given bean element.;public void parseReplacedMethodSubElements(Element beanEle, MethodOverrides overrides) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, REPLACED_METHOD_ELEMENT)) {_				Element replacedMethodEle = (Element) node__				String name = replacedMethodEle.getAttribute(NAME_ATTRIBUTE)__				String callback = replacedMethodEle.getAttribute(REPLACER_ATTRIBUTE)__				ReplaceOverride replaceOverride = new ReplaceOverride(name, callback)__				_				List<Element> argTypeEles = DomUtils.getChildElementsByTagName(replacedMethodEle, ARG_TYPE_ELEMENT)__				for (Element argTypeEle : argTypeEles) {_					String match = argTypeEle.getAttribute(ARG_TYPE_MATCH_ATTRIBUTE)__					match = (StringUtils.hasText(match) ? match : DomUtils.getTextValue(argTypeEle))__					if (StringUtils.hasText(match)) {_						replaceOverride.addTypeIdentifier(match)__					}_				}_				replaceOverride.setSource(extractSource(replacedMethodEle))__				overrides.addOverride(replaceOverride)__			}_		}_	};parse,replaced,method,sub,elements,of,the,given,bean,element;public,void,parse,replaced,method,sub,elements,element,bean,ele,method,overrides,overrides,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,replaced,method,ele,element,node,string,name,replaced,method,ele,get,attribute,string,callback,replaced,method,ele,get,attribute,replace,override,replace,override,new,replace,override,name,callback,list,element,arg,type,eles,dom,utils,get,child,elements,by,tag,name,replaced,method,ele,for,element,arg,type,ele,arg,type,eles,string,match,arg,type,ele,get,attribute,match,string,utils,has,text,match,match,dom,utils,get,text,value,arg,type,ele,if,string,utils,has,text,match,replace,override,add,type,identifier,match,replace,override,set,source,extract,source,replaced,method,ele,overrides,add,override,replace,override
BeanDefinitionParserDelegate -> public void parseReplacedMethodSubElements(Element beanEle, MethodOverrides overrides);1367943112;Parse replaced-method sub-elements of the given bean element.;public void parseReplacedMethodSubElements(Element beanEle, MethodOverrides overrides) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, REPLACED_METHOD_ELEMENT)) {_				Element replacedMethodEle = (Element) node__				String name = replacedMethodEle.getAttribute(NAME_ATTRIBUTE)__				String callback = replacedMethodEle.getAttribute(REPLACER_ATTRIBUTE)__				ReplaceOverride replaceOverride = new ReplaceOverride(name, callback)__				_				List<Element> argTypeEles = DomUtils.getChildElementsByTagName(replacedMethodEle, ARG_TYPE_ELEMENT)__				for (Element argTypeEle : argTypeEles) {_					String match = argTypeEle.getAttribute(ARG_TYPE_MATCH_ATTRIBUTE)__					match = (StringUtils.hasText(match) ? match : DomUtils.getTextValue(argTypeEle))__					if (StringUtils.hasText(match)) {_						replaceOverride.addTypeIdentifier(match)__					}_				}_				replaceOverride.setSource(extractSource(replacedMethodEle))__				overrides.addOverride(replaceOverride)__			}_		}_	};parse,replaced,method,sub,elements,of,the,given,bean,element;public,void,parse,replaced,method,sub,elements,element,bean,ele,method,overrides,overrides,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,replaced,method,ele,element,node,string,name,replaced,method,ele,get,attribute,string,callback,replaced,method,ele,get,attribute,replace,override,replace,override,new,replace,override,name,callback,list,element,arg,type,eles,dom,utils,get,child,elements,by,tag,name,replaced,method,ele,for,element,arg,type,ele,arg,type,eles,string,match,arg,type,ele,get,attribute,match,string,utils,has,text,match,match,dom,utils,get,text,value,arg,type,ele,if,string,utils,has,text,match,replace,override,add,type,identifier,match,replace,override,set,source,extract,source,replaced,method,ele,overrides,add,override,replace,override
BeanDefinitionParserDelegate -> public void parseReplacedMethodSubElements(Element beanEle, MethodOverrides overrides);1382030648;Parse replaced-method sub-elements of the given bean element.;public void parseReplacedMethodSubElements(Element beanEle, MethodOverrides overrides) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, REPLACED_METHOD_ELEMENT)) {_				Element replacedMethodEle = (Element) node__				String name = replacedMethodEle.getAttribute(NAME_ATTRIBUTE)__				String callback = replacedMethodEle.getAttribute(REPLACER_ATTRIBUTE)__				ReplaceOverride replaceOverride = new ReplaceOverride(name, callback)__				_				List<Element> argTypeEles = DomUtils.getChildElementsByTagName(replacedMethodEle, ARG_TYPE_ELEMENT)__				for (Element argTypeEle : argTypeEles) {_					String match = argTypeEle.getAttribute(ARG_TYPE_MATCH_ATTRIBUTE)__					match = (StringUtils.hasText(match) ? match : DomUtils.getTextValue(argTypeEle))__					if (StringUtils.hasText(match)) {_						replaceOverride.addTypeIdentifier(match)__					}_				}_				replaceOverride.setSource(extractSource(replacedMethodEle))__				overrides.addOverride(replaceOverride)__			}_		}_	};parse,replaced,method,sub,elements,of,the,given,bean,element;public,void,parse,replaced,method,sub,elements,element,bean,ele,method,overrides,overrides,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,replaced,method,ele,element,node,string,name,replaced,method,ele,get,attribute,string,callback,replaced,method,ele,get,attribute,replace,override,replace,override,new,replace,override,name,callback,list,element,arg,type,eles,dom,utils,get,child,elements,by,tag,name,replaced,method,ele,for,element,arg,type,ele,arg,type,eles,string,match,arg,type,ele,get,attribute,match,string,utils,has,text,match,match,dom,utils,get,text,value,arg,type,ele,if,string,utils,has,text,match,replace,override,add,type,identifier,match,replace,override,set,source,extract,source,replaced,method,ele,overrides,add,override,replace,override
BeanDefinitionParserDelegate -> public void parseReplacedMethodSubElements(Element beanEle, MethodOverrides overrides);1385412762;Parse replaced-method sub-elements of the given bean element.;public void parseReplacedMethodSubElements(Element beanEle, MethodOverrides overrides) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, REPLACED_METHOD_ELEMENT)) {_				Element replacedMethodEle = (Element) node__				String name = replacedMethodEle.getAttribute(NAME_ATTRIBUTE)__				String callback = replacedMethodEle.getAttribute(REPLACER_ATTRIBUTE)__				ReplaceOverride replaceOverride = new ReplaceOverride(name, callback)__				_				List<Element> argTypeEles = DomUtils.getChildElementsByTagName(replacedMethodEle, ARG_TYPE_ELEMENT)__				for (Element argTypeEle : argTypeEles) {_					String match = argTypeEle.getAttribute(ARG_TYPE_MATCH_ATTRIBUTE)__					match = (StringUtils.hasText(match) ? match : DomUtils.getTextValue(argTypeEle))__					if (StringUtils.hasText(match)) {_						replaceOverride.addTypeIdentifier(match)__					}_				}_				replaceOverride.setSource(extractSource(replacedMethodEle))__				overrides.addOverride(replaceOverride)__			}_		}_	};parse,replaced,method,sub,elements,of,the,given,bean,element;public,void,parse,replaced,method,sub,elements,element,bean,ele,method,overrides,overrides,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,replaced,method,ele,element,node,string,name,replaced,method,ele,get,attribute,string,callback,replaced,method,ele,get,attribute,replace,override,replace,override,new,replace,override,name,callback,list,element,arg,type,eles,dom,utils,get,child,elements,by,tag,name,replaced,method,ele,for,element,arg,type,ele,arg,type,eles,string,match,arg,type,ele,get,attribute,match,string,utils,has,text,match,match,dom,utils,get,text,value,arg,type,ele,if,string,utils,has,text,match,replace,override,add,type,identifier,match,replace,override,set,source,extract,source,replaced,method,ele,overrides,add,override,replace,override
BeanDefinitionParserDelegate -> public void parseReplacedMethodSubElements(Element beanEle, MethodOverrides overrides);1410953197;Parse replaced-method sub-elements of the given bean element.;public void parseReplacedMethodSubElements(Element beanEle, MethodOverrides overrides) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, REPLACED_METHOD_ELEMENT)) {_				Element replacedMethodEle = (Element) node__				String name = replacedMethodEle.getAttribute(NAME_ATTRIBUTE)__				String callback = replacedMethodEle.getAttribute(REPLACER_ATTRIBUTE)__				ReplaceOverride replaceOverride = new ReplaceOverride(name, callback)__				_				List<Element> argTypeEles = DomUtils.getChildElementsByTagName(replacedMethodEle, ARG_TYPE_ELEMENT)__				for (Element argTypeEle : argTypeEles) {_					String match = argTypeEle.getAttribute(ARG_TYPE_MATCH_ATTRIBUTE)__					match = (StringUtils.hasText(match) ? match : DomUtils.getTextValue(argTypeEle))__					if (StringUtils.hasText(match)) {_						replaceOverride.addTypeIdentifier(match)__					}_				}_				replaceOverride.setSource(extractSource(replacedMethodEle))__				overrides.addOverride(replaceOverride)__			}_		}_	};parse,replaced,method,sub,elements,of,the,given,bean,element;public,void,parse,replaced,method,sub,elements,element,bean,ele,method,overrides,overrides,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,replaced,method,ele,element,node,string,name,replaced,method,ele,get,attribute,string,callback,replaced,method,ele,get,attribute,replace,override,replace,override,new,replace,override,name,callback,list,element,arg,type,eles,dom,utils,get,child,elements,by,tag,name,replaced,method,ele,for,element,arg,type,ele,arg,type,eles,string,match,arg,type,ele,get,attribute,match,string,utils,has,text,match,match,dom,utils,get,text,value,arg,type,ele,if,string,utils,has,text,match,replace,override,add,type,identifier,match,replace,override,set,source,extract,source,replaced,method,ele,overrides,add,override,replace,override
BeanDefinitionParserDelegate -> public void parseReplacedMethodSubElements(Element beanEle, MethodOverrides overrides);1411599760;Parse replaced-method sub-elements of the given bean element.;public void parseReplacedMethodSubElements(Element beanEle, MethodOverrides overrides) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, REPLACED_METHOD_ELEMENT)) {_				Element replacedMethodEle = (Element) node__				String name = replacedMethodEle.getAttribute(NAME_ATTRIBUTE)__				String callback = replacedMethodEle.getAttribute(REPLACER_ATTRIBUTE)__				ReplaceOverride replaceOverride = new ReplaceOverride(name, callback)__				_				List<Element> argTypeEles = DomUtils.getChildElementsByTagName(replacedMethodEle, ARG_TYPE_ELEMENT)__				for (Element argTypeEle : argTypeEles) {_					String match = argTypeEle.getAttribute(ARG_TYPE_MATCH_ATTRIBUTE)__					match = (StringUtils.hasText(match) ? match : DomUtils.getTextValue(argTypeEle))__					if (StringUtils.hasText(match)) {_						replaceOverride.addTypeIdentifier(match)__					}_				}_				replaceOverride.setSource(extractSource(replacedMethodEle))__				overrides.addOverride(replaceOverride)__			}_		}_	};parse,replaced,method,sub,elements,of,the,given,bean,element;public,void,parse,replaced,method,sub,elements,element,bean,ele,method,overrides,overrides,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,replaced,method,ele,element,node,string,name,replaced,method,ele,get,attribute,string,callback,replaced,method,ele,get,attribute,replace,override,replace,override,new,replace,override,name,callback,list,element,arg,type,eles,dom,utils,get,child,elements,by,tag,name,replaced,method,ele,for,element,arg,type,ele,arg,type,eles,string,match,arg,type,ele,get,attribute,match,string,utils,has,text,match,match,dom,utils,get,text,value,arg,type,ele,if,string,utils,has,text,match,replace,override,add,type,identifier,match,replace,override,set,source,extract,source,replaced,method,ele,overrides,add,override,replace,override
BeanDefinitionParserDelegate -> public void parseReplacedMethodSubElements(Element beanEle, MethodOverrides overrides);1419966315;Parse replaced-method sub-elements of the given bean element.;public void parseReplacedMethodSubElements(Element beanEle, MethodOverrides overrides) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, REPLACED_METHOD_ELEMENT)) {_				Element replacedMethodEle = (Element) node__				String name = replacedMethodEle.getAttribute(NAME_ATTRIBUTE)__				String callback = replacedMethodEle.getAttribute(REPLACER_ATTRIBUTE)__				ReplaceOverride replaceOverride = new ReplaceOverride(name, callback)__				_				List<Element> argTypeEles = DomUtils.getChildElementsByTagName(replacedMethodEle, ARG_TYPE_ELEMENT)__				for (Element argTypeEle : argTypeEles) {_					String match = argTypeEle.getAttribute(ARG_TYPE_MATCH_ATTRIBUTE)__					match = (StringUtils.hasText(match) ? match : DomUtils.getTextValue(argTypeEle))__					if (StringUtils.hasText(match)) {_						replaceOverride.addTypeIdentifier(match)__					}_				}_				replaceOverride.setSource(extractSource(replacedMethodEle))__				overrides.addOverride(replaceOverride)__			}_		}_	};parse,replaced,method,sub,elements,of,the,given,bean,element;public,void,parse,replaced,method,sub,elements,element,bean,ele,method,overrides,overrides,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,replaced,method,ele,element,node,string,name,replaced,method,ele,get,attribute,string,callback,replaced,method,ele,get,attribute,replace,override,replace,override,new,replace,override,name,callback,list,element,arg,type,eles,dom,utils,get,child,elements,by,tag,name,replaced,method,ele,for,element,arg,type,ele,arg,type,eles,string,match,arg,type,ele,get,attribute,match,string,utils,has,text,match,match,dom,utils,get,text,value,arg,type,ele,if,string,utils,has,text,match,replace,override,add,type,identifier,match,replace,override,set,source,extract,source,replaced,method,ele,overrides,add,override,replace,override
BeanDefinitionParserDelegate -> public void parseReplacedMethodSubElements(Element beanEle, MethodOverrides overrides);1431958785;Parse replaced-method sub-elements of the given bean element.;public void parseReplacedMethodSubElements(Element beanEle, MethodOverrides overrides) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, REPLACED_METHOD_ELEMENT)) {_				Element replacedMethodEle = (Element) node__				String name = replacedMethodEle.getAttribute(NAME_ATTRIBUTE)__				String callback = replacedMethodEle.getAttribute(REPLACER_ATTRIBUTE)__				ReplaceOverride replaceOverride = new ReplaceOverride(name, callback)__				_				List<Element> argTypeEles = DomUtils.getChildElementsByTagName(replacedMethodEle, ARG_TYPE_ELEMENT)__				for (Element argTypeEle : argTypeEles) {_					String match = argTypeEle.getAttribute(ARG_TYPE_MATCH_ATTRIBUTE)__					match = (StringUtils.hasText(match) ? match : DomUtils.getTextValue(argTypeEle))__					if (StringUtils.hasText(match)) {_						replaceOverride.addTypeIdentifier(match)__					}_				}_				replaceOverride.setSource(extractSource(replacedMethodEle))__				overrides.addOverride(replaceOverride)__			}_		}_	};parse,replaced,method,sub,elements,of,the,given,bean,element;public,void,parse,replaced,method,sub,elements,element,bean,ele,method,overrides,overrides,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,replaced,method,ele,element,node,string,name,replaced,method,ele,get,attribute,string,callback,replaced,method,ele,get,attribute,replace,override,replace,override,new,replace,override,name,callback,list,element,arg,type,eles,dom,utils,get,child,elements,by,tag,name,replaced,method,ele,for,element,arg,type,ele,arg,type,eles,string,match,arg,type,ele,get,attribute,match,string,utils,has,text,match,match,dom,utils,get,text,value,arg,type,ele,if,string,utils,has,text,match,replace,override,add,type,identifier,match,replace,override,set,source,extract,source,replaced,method,ele,overrides,add,override,replace,override
BeanDefinitionParserDelegate -> public void parseReplacedMethodSubElements(Element beanEle, MethodOverrides overrides);1432135182;Parse replaced-method sub-elements of the given bean element.;public void parseReplacedMethodSubElements(Element beanEle, MethodOverrides overrides) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, REPLACED_METHOD_ELEMENT)) {_				Element replacedMethodEle = (Element) node__				String name = replacedMethodEle.getAttribute(NAME_ATTRIBUTE)__				String callback = replacedMethodEle.getAttribute(REPLACER_ATTRIBUTE)__				ReplaceOverride replaceOverride = new ReplaceOverride(name, callback)__				_				List<Element> argTypeEles = DomUtils.getChildElementsByTagName(replacedMethodEle, ARG_TYPE_ELEMENT)__				for (Element argTypeEle : argTypeEles) {_					String match = argTypeEle.getAttribute(ARG_TYPE_MATCH_ATTRIBUTE)__					match = (StringUtils.hasText(match) ? match : DomUtils.getTextValue(argTypeEle))__					if (StringUtils.hasText(match)) {_						replaceOverride.addTypeIdentifier(match)__					}_				}_				replaceOverride.setSource(extractSource(replacedMethodEle))__				overrides.addOverride(replaceOverride)__			}_		}_	};parse,replaced,method,sub,elements,of,the,given,bean,element;public,void,parse,replaced,method,sub,elements,element,bean,ele,method,overrides,overrides,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,replaced,method,ele,element,node,string,name,replaced,method,ele,get,attribute,string,callback,replaced,method,ele,get,attribute,replace,override,replace,override,new,replace,override,name,callback,list,element,arg,type,eles,dom,utils,get,child,elements,by,tag,name,replaced,method,ele,for,element,arg,type,ele,arg,type,eles,string,match,arg,type,ele,get,attribute,match,string,utils,has,text,match,match,dom,utils,get,text,value,arg,type,ele,if,string,utils,has,text,match,replace,override,add,type,identifier,match,replace,override,set,source,extract,source,replaced,method,ele,overrides,add,override,replace,override
BeanDefinitionParserDelegate -> public void parseReplacedMethodSubElements(Element beanEle, MethodOverrides overrides);1447323728;Parse replaced-method sub-elements of the given bean element.;public void parseReplacedMethodSubElements(Element beanEle, MethodOverrides overrides) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, REPLACED_METHOD_ELEMENT)) {_				Element replacedMethodEle = (Element) node__				String name = replacedMethodEle.getAttribute(NAME_ATTRIBUTE)__				String callback = replacedMethodEle.getAttribute(REPLACER_ATTRIBUTE)__				ReplaceOverride replaceOverride = new ReplaceOverride(name, callback)__				_				List<Element> argTypeEles = DomUtils.getChildElementsByTagName(replacedMethodEle, ARG_TYPE_ELEMENT)__				for (Element argTypeEle : argTypeEles) {_					String match = argTypeEle.getAttribute(ARG_TYPE_MATCH_ATTRIBUTE)__					match = (StringUtils.hasText(match) ? match : DomUtils.getTextValue(argTypeEle))__					if (StringUtils.hasText(match)) {_						replaceOverride.addTypeIdentifier(match)__					}_				}_				replaceOverride.setSource(extractSource(replacedMethodEle))__				overrides.addOverride(replaceOverride)__			}_		}_	};parse,replaced,method,sub,elements,of,the,given,bean,element;public,void,parse,replaced,method,sub,elements,element,bean,ele,method,overrides,overrides,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,replaced,method,ele,element,node,string,name,replaced,method,ele,get,attribute,string,callback,replaced,method,ele,get,attribute,replace,override,replace,override,new,replace,override,name,callback,list,element,arg,type,eles,dom,utils,get,child,elements,by,tag,name,replaced,method,ele,for,element,arg,type,ele,arg,type,eles,string,match,arg,type,ele,get,attribute,match,string,utils,has,text,match,match,dom,utils,get,text,value,arg,type,ele,if,string,utils,has,text,match,replace,override,add,type,identifier,match,replace,override,set,source,extract,source,replaced,method,ele,overrides,add,override,replace,override
BeanDefinitionParserDelegate -> public void parseReplacedMethodSubElements(Element beanEle, MethodOverrides overrides);1467726769;Parse replaced-method sub-elements of the given bean element.;public void parseReplacedMethodSubElements(Element beanEle, MethodOverrides overrides) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, REPLACED_METHOD_ELEMENT)) {_				Element replacedMethodEle = (Element) node__				String name = replacedMethodEle.getAttribute(NAME_ATTRIBUTE)__				String callback = replacedMethodEle.getAttribute(REPLACER_ATTRIBUTE)__				ReplaceOverride replaceOverride = new ReplaceOverride(name, callback)__				_				List<Element> argTypeEles = DomUtils.getChildElementsByTagName(replacedMethodEle, ARG_TYPE_ELEMENT)__				for (Element argTypeEle : argTypeEles) {_					String match = argTypeEle.getAttribute(ARG_TYPE_MATCH_ATTRIBUTE)__					match = (StringUtils.hasText(match) ? match : DomUtils.getTextValue(argTypeEle))__					if (StringUtils.hasText(match)) {_						replaceOverride.addTypeIdentifier(match)__					}_				}_				replaceOverride.setSource(extractSource(replacedMethodEle))__				overrides.addOverride(replaceOverride)__			}_		}_	};parse,replaced,method,sub,elements,of,the,given,bean,element;public,void,parse,replaced,method,sub,elements,element,bean,ele,method,overrides,overrides,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,replaced,method,ele,element,node,string,name,replaced,method,ele,get,attribute,string,callback,replaced,method,ele,get,attribute,replace,override,replace,override,new,replace,override,name,callback,list,element,arg,type,eles,dom,utils,get,child,elements,by,tag,name,replaced,method,ele,for,element,arg,type,ele,arg,type,eles,string,match,arg,type,ele,get,attribute,match,string,utils,has,text,match,match,dom,utils,get,text,value,arg,type,ele,if,string,utils,has,text,match,replace,override,add,type,identifier,match,replace,override,set,source,extract,source,replaced,method,ele,overrides,add,override,replace,override
BeanDefinitionParserDelegate -> public void parseReplacedMethodSubElements(Element beanEle, MethodOverrides overrides);1467730834;Parse replaced-method sub-elements of the given bean element.;public void parseReplacedMethodSubElements(Element beanEle, MethodOverrides overrides) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, REPLACED_METHOD_ELEMENT)) {_				Element replacedMethodEle = (Element) node__				String name = replacedMethodEle.getAttribute(NAME_ATTRIBUTE)__				String callback = replacedMethodEle.getAttribute(REPLACER_ATTRIBUTE)__				ReplaceOverride replaceOverride = new ReplaceOverride(name, callback)__				_				List<Element> argTypeEles = DomUtils.getChildElementsByTagName(replacedMethodEle, ARG_TYPE_ELEMENT)__				for (Element argTypeEle : argTypeEles) {_					String match = argTypeEle.getAttribute(ARG_TYPE_MATCH_ATTRIBUTE)__					match = (StringUtils.hasText(match) ? match : DomUtils.getTextValue(argTypeEle))__					if (StringUtils.hasText(match)) {_						replaceOverride.addTypeIdentifier(match)__					}_				}_				replaceOverride.setSource(extractSource(replacedMethodEle))__				overrides.addOverride(replaceOverride)__			}_		}_	};parse,replaced,method,sub,elements,of,the,given,bean,element;public,void,parse,replaced,method,sub,elements,element,bean,ele,method,overrides,overrides,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,replaced,method,ele,element,node,string,name,replaced,method,ele,get,attribute,string,callback,replaced,method,ele,get,attribute,replace,override,replace,override,new,replace,override,name,callback,list,element,arg,type,eles,dom,utils,get,child,elements,by,tag,name,replaced,method,ele,for,element,arg,type,ele,arg,type,eles,string,match,arg,type,ele,get,attribute,match,string,utils,has,text,match,match,dom,utils,get,text,value,arg,type,ele,if,string,utils,has,text,match,replace,override,add,type,identifier,match,replace,override,set,source,extract,source,replaced,method,ele,overrides,add,override,replace,override
BeanDefinitionParserDelegate -> public void parseReplacedMethodSubElements(Element beanEle, MethodOverrides overrides);1467744603;Parse replaced-method sub-elements of the given bean element.;public void parseReplacedMethodSubElements(Element beanEle, MethodOverrides overrides) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, REPLACED_METHOD_ELEMENT)) {_				Element replacedMethodEle = (Element) node__				String name = replacedMethodEle.getAttribute(NAME_ATTRIBUTE)__				String callback = replacedMethodEle.getAttribute(REPLACER_ATTRIBUTE)__				ReplaceOverride replaceOverride = new ReplaceOverride(name, callback)__				_				List<Element> argTypeEles = DomUtils.getChildElementsByTagName(replacedMethodEle, ARG_TYPE_ELEMENT)__				for (Element argTypeEle : argTypeEles) {_					String match = argTypeEle.getAttribute(ARG_TYPE_MATCH_ATTRIBUTE)__					match = (StringUtils.hasText(match) ? match : DomUtils.getTextValue(argTypeEle))__					if (StringUtils.hasText(match)) {_						replaceOverride.addTypeIdentifier(match)__					}_				}_				replaceOverride.setSource(extractSource(replacedMethodEle))__				overrides.addOverride(replaceOverride)__			}_		}_	};parse,replaced,method,sub,elements,of,the,given,bean,element;public,void,parse,replaced,method,sub,elements,element,bean,ele,method,overrides,overrides,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,replaced,method,ele,element,node,string,name,replaced,method,ele,get,attribute,string,callback,replaced,method,ele,get,attribute,replace,override,replace,override,new,replace,override,name,callback,list,element,arg,type,eles,dom,utils,get,child,elements,by,tag,name,replaced,method,ele,for,element,arg,type,ele,arg,type,eles,string,match,arg,type,ele,get,attribute,match,string,utils,has,text,match,match,dom,utils,get,text,value,arg,type,ele,if,string,utils,has,text,match,replace,override,add,type,identifier,match,replace,override,set,source,extract,source,replaced,method,ele,overrides,add,override,replace,override
BeanDefinitionParserDelegate -> public void parseReplacedMethodSubElements(Element beanEle, MethodOverrides overrides);1487245676;Parse replaced-method sub-elements of the given bean element.;public void parseReplacedMethodSubElements(Element beanEle, MethodOverrides overrides) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, REPLACED_METHOD_ELEMENT)) {_				Element replacedMethodEle = (Element) node__				String name = replacedMethodEle.getAttribute(NAME_ATTRIBUTE)__				String callback = replacedMethodEle.getAttribute(REPLACER_ATTRIBUTE)__				ReplaceOverride replaceOverride = new ReplaceOverride(name, callback)__				_				List<Element> argTypeEles = DomUtils.getChildElementsByTagName(replacedMethodEle, ARG_TYPE_ELEMENT)__				for (Element argTypeEle : argTypeEles) {_					String match = argTypeEle.getAttribute(ARG_TYPE_MATCH_ATTRIBUTE)__					match = (StringUtils.hasText(match) ? match : DomUtils.getTextValue(argTypeEle))__					if (StringUtils.hasText(match)) {_						replaceOverride.addTypeIdentifier(match)__					}_				}_				replaceOverride.setSource(extractSource(replacedMethodEle))__				overrides.addOverride(replaceOverride)__			}_		}_	};parse,replaced,method,sub,elements,of,the,given,bean,element;public,void,parse,replaced,method,sub,elements,element,bean,ele,method,overrides,overrides,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,replaced,method,ele,element,node,string,name,replaced,method,ele,get,attribute,string,callback,replaced,method,ele,get,attribute,replace,override,replace,override,new,replace,override,name,callback,list,element,arg,type,eles,dom,utils,get,child,elements,by,tag,name,replaced,method,ele,for,element,arg,type,ele,arg,type,eles,string,match,arg,type,ele,get,attribute,match,string,utils,has,text,match,match,dom,utils,get,text,value,arg,type,ele,if,string,utils,has,text,match,replace,override,add,type,identifier,match,replace,override,set,source,extract,source,replaced,method,ele,overrides,add,override,replace,override
BeanDefinitionParserDelegate -> public void parseReplacedMethodSubElements(Element beanEle, MethodOverrides overrides);1487255851;Parse replaced-method sub-elements of the given bean element.;public void parseReplacedMethodSubElements(Element beanEle, MethodOverrides overrides) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, REPLACED_METHOD_ELEMENT)) {_				Element replacedMethodEle = (Element) node__				String name = replacedMethodEle.getAttribute(NAME_ATTRIBUTE)__				String callback = replacedMethodEle.getAttribute(REPLACER_ATTRIBUTE)__				ReplaceOverride replaceOverride = new ReplaceOverride(name, callback)__				_				List<Element> argTypeEles = DomUtils.getChildElementsByTagName(replacedMethodEle, ARG_TYPE_ELEMENT)__				for (Element argTypeEle : argTypeEles) {_					String match = argTypeEle.getAttribute(ARG_TYPE_MATCH_ATTRIBUTE)__					match = (StringUtils.hasText(match) ? match : DomUtils.getTextValue(argTypeEle))__					if (StringUtils.hasText(match)) {_						replaceOverride.addTypeIdentifier(match)__					}_				}_				replaceOverride.setSource(extractSource(replacedMethodEle))__				overrides.addOverride(replaceOverride)__			}_		}_	};parse,replaced,method,sub,elements,of,the,given,bean,element;public,void,parse,replaced,method,sub,elements,element,bean,ele,method,overrides,overrides,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,replaced,method,ele,element,node,string,name,replaced,method,ele,get,attribute,string,callback,replaced,method,ele,get,attribute,replace,override,replace,override,new,replace,override,name,callback,list,element,arg,type,eles,dom,utils,get,child,elements,by,tag,name,replaced,method,ele,for,element,arg,type,ele,arg,type,eles,string,match,arg,type,ele,get,attribute,match,string,utils,has,text,match,match,dom,utils,get,text,value,arg,type,ele,if,string,utils,has,text,match,replace,override,add,type,identifier,match,replace,override,set,source,extract,source,replaced,method,ele,overrides,add,override,replace,override
BeanDefinitionParserDelegate -> public void parseReplacedMethodSubElements(Element beanEle, MethodOverrides overrides);1494586217;Parse replaced-method sub-elements of the given bean element.;public void parseReplacedMethodSubElements(Element beanEle, MethodOverrides overrides) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, REPLACED_METHOD_ELEMENT)) {_				Element replacedMethodEle = (Element) node__				String name = replacedMethodEle.getAttribute(NAME_ATTRIBUTE)__				String callback = replacedMethodEle.getAttribute(REPLACER_ATTRIBUTE)__				ReplaceOverride replaceOverride = new ReplaceOverride(name, callback)__				_				List<Element> argTypeEles = DomUtils.getChildElementsByTagName(replacedMethodEle, ARG_TYPE_ELEMENT)__				for (Element argTypeEle : argTypeEles) {_					String match = argTypeEle.getAttribute(ARG_TYPE_MATCH_ATTRIBUTE)__					match = (StringUtils.hasText(match) ? match : DomUtils.getTextValue(argTypeEle))__					if (StringUtils.hasText(match)) {_						replaceOverride.addTypeIdentifier(match)__					}_				}_				replaceOverride.setSource(extractSource(replacedMethodEle))__				overrides.addOverride(replaceOverride)__			}_		}_	};parse,replaced,method,sub,elements,of,the,given,bean,element;public,void,parse,replaced,method,sub,elements,element,bean,ele,method,overrides,overrides,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,replaced,method,ele,element,node,string,name,replaced,method,ele,get,attribute,string,callback,replaced,method,ele,get,attribute,replace,override,replace,override,new,replace,override,name,callback,list,element,arg,type,eles,dom,utils,get,child,elements,by,tag,name,replaced,method,ele,for,element,arg,type,ele,arg,type,eles,string,match,arg,type,ele,get,attribute,match,string,utils,has,text,match,match,dom,utils,get,text,value,arg,type,ele,if,string,utils,has,text,match,replace,override,add,type,identifier,match,replace,override,set,source,extract,source,replaced,method,ele,overrides,add,override,replace,override
BeanDefinitionParserDelegate -> public void parseReplacedMethodSubElements(Element beanEle, MethodOverrides overrides);1495868221;Parse replaced-method sub-elements of the given bean element.;public void parseReplacedMethodSubElements(Element beanEle, MethodOverrides overrides) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, REPLACED_METHOD_ELEMENT)) {_				Element replacedMethodEle = (Element) node__				String name = replacedMethodEle.getAttribute(NAME_ATTRIBUTE)__				String callback = replacedMethodEle.getAttribute(REPLACER_ATTRIBUTE)__				ReplaceOverride replaceOverride = new ReplaceOverride(name, callback)__				_				List<Element> argTypeEles = DomUtils.getChildElementsByTagName(replacedMethodEle, ARG_TYPE_ELEMENT)__				for (Element argTypeEle : argTypeEles) {_					String match = argTypeEle.getAttribute(ARG_TYPE_MATCH_ATTRIBUTE)__					match = (StringUtils.hasText(match) ? match : DomUtils.getTextValue(argTypeEle))__					if (StringUtils.hasText(match)) {_						replaceOverride.addTypeIdentifier(match)__					}_				}_				replaceOverride.setSource(extractSource(replacedMethodEle))__				overrides.addOverride(replaceOverride)__			}_		}_	};parse,replaced,method,sub,elements,of,the,given,bean,element;public,void,parse,replaced,method,sub,elements,element,bean,ele,method,overrides,overrides,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,replaced,method,ele,element,node,string,name,replaced,method,ele,get,attribute,string,callback,replaced,method,ele,get,attribute,replace,override,replace,override,new,replace,override,name,callback,list,element,arg,type,eles,dom,utils,get,child,elements,by,tag,name,replaced,method,ele,for,element,arg,type,ele,arg,type,eles,string,match,arg,type,ele,get,attribute,match,string,utils,has,text,match,match,dom,utils,get,text,value,arg,type,ele,if,string,utils,has,text,match,replace,override,add,type,identifier,match,replace,override,set,source,extract,source,replaced,method,ele,overrides,add,override,replace,override
BeanDefinitionParserDelegate -> public void parseReplacedMethodSubElements(Element beanEle, MethodOverrides overrides);1496259743;Parse replaced-method sub-elements of the given bean element.;public void parseReplacedMethodSubElements(Element beanEle, MethodOverrides overrides) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, REPLACED_METHOD_ELEMENT)) {_				Element replacedMethodEle = (Element) node__				String name = replacedMethodEle.getAttribute(NAME_ATTRIBUTE)__				String callback = replacedMethodEle.getAttribute(REPLACER_ATTRIBUTE)__				ReplaceOverride replaceOverride = new ReplaceOverride(name, callback)__				_				List<Element> argTypeEles = DomUtils.getChildElementsByTagName(replacedMethodEle, ARG_TYPE_ELEMENT)__				for (Element argTypeEle : argTypeEles) {_					String match = argTypeEle.getAttribute(ARG_TYPE_MATCH_ATTRIBUTE)__					match = (StringUtils.hasText(match) ? match : DomUtils.getTextValue(argTypeEle))__					if (StringUtils.hasText(match)) {_						replaceOverride.addTypeIdentifier(match)__					}_				}_				replaceOverride.setSource(extractSource(replacedMethodEle))__				overrides.addOverride(replaceOverride)__			}_		}_	};parse,replaced,method,sub,elements,of,the,given,bean,element;public,void,parse,replaced,method,sub,elements,element,bean,ele,method,overrides,overrides,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,replaced,method,ele,element,node,string,name,replaced,method,ele,get,attribute,string,callback,replaced,method,ele,get,attribute,replace,override,replace,override,new,replace,override,name,callback,list,element,arg,type,eles,dom,utils,get,child,elements,by,tag,name,replaced,method,ele,for,element,arg,type,ele,arg,type,eles,string,match,arg,type,ele,get,attribute,match,string,utils,has,text,match,match,dom,utils,get,text,value,arg,type,ele,if,string,utils,has,text,match,replace,override,add,type,identifier,match,replace,override,set,source,extract,source,replaced,method,ele,overrides,add,override,replace,override
BeanDefinitionParserDelegate -> public void parseReplacedMethodSubElements(Element beanEle, MethodOverrides overrides);1496837955;Parse replaced-method sub-elements of the given bean element.;public void parseReplacedMethodSubElements(Element beanEle, MethodOverrides overrides) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, REPLACED_METHOD_ELEMENT)) {_				Element replacedMethodEle = (Element) node__				String name = replacedMethodEle.getAttribute(NAME_ATTRIBUTE)__				String callback = replacedMethodEle.getAttribute(REPLACER_ATTRIBUTE)__				ReplaceOverride replaceOverride = new ReplaceOverride(name, callback)__				_				List<Element> argTypeEles = DomUtils.getChildElementsByTagName(replacedMethodEle, ARG_TYPE_ELEMENT)__				for (Element argTypeEle : argTypeEles) {_					String match = argTypeEle.getAttribute(ARG_TYPE_MATCH_ATTRIBUTE)__					match = (StringUtils.hasText(match) ? match : DomUtils.getTextValue(argTypeEle))__					if (StringUtils.hasText(match)) {_						replaceOverride.addTypeIdentifier(match)__					}_				}_				replaceOverride.setSource(extractSource(replacedMethodEle))__				overrides.addOverride(replaceOverride)__			}_		}_	};parse,replaced,method,sub,elements,of,the,given,bean,element;public,void,parse,replaced,method,sub,elements,element,bean,ele,method,overrides,overrides,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,replaced,method,ele,element,node,string,name,replaced,method,ele,get,attribute,string,callback,replaced,method,ele,get,attribute,replace,override,replace,override,new,replace,override,name,callback,list,element,arg,type,eles,dom,utils,get,child,elements,by,tag,name,replaced,method,ele,for,element,arg,type,ele,arg,type,eles,string,match,arg,type,ele,get,attribute,match,string,utils,has,text,match,match,dom,utils,get,text,value,arg,type,ele,if,string,utils,has,text,match,replace,override,add,type,identifier,match,replace,override,set,source,extract,source,replaced,method,ele,overrides,add,override,replace,override
BeanDefinitionParserDelegate -> public void parseReplacedMethodSubElements(Element beanEle, MethodOverrides overrides);1503008029;Parse replaced-method sub-elements of the given bean element.;public void parseReplacedMethodSubElements(Element beanEle, MethodOverrides overrides) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, REPLACED_METHOD_ELEMENT)) {_				Element replacedMethodEle = (Element) node__				String name = replacedMethodEle.getAttribute(NAME_ATTRIBUTE)__				String callback = replacedMethodEle.getAttribute(REPLACER_ATTRIBUTE)__				ReplaceOverride replaceOverride = new ReplaceOverride(name, callback)__				_				List<Element> argTypeEles = DomUtils.getChildElementsByTagName(replacedMethodEle, ARG_TYPE_ELEMENT)__				for (Element argTypeEle : argTypeEles) {_					String match = argTypeEle.getAttribute(ARG_TYPE_MATCH_ATTRIBUTE)__					match = (StringUtils.hasText(match) ? match : DomUtils.getTextValue(argTypeEle))__					if (StringUtils.hasText(match)) {_						replaceOverride.addTypeIdentifier(match)__					}_				}_				replaceOverride.setSource(extractSource(replacedMethodEle))__				overrides.addOverride(replaceOverride)__			}_		}_	};parse,replaced,method,sub,elements,of,the,given,bean,element;public,void,parse,replaced,method,sub,elements,element,bean,ele,method,overrides,overrides,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,replaced,method,ele,element,node,string,name,replaced,method,ele,get,attribute,string,callback,replaced,method,ele,get,attribute,replace,override,replace,override,new,replace,override,name,callback,list,element,arg,type,eles,dom,utils,get,child,elements,by,tag,name,replaced,method,ele,for,element,arg,type,ele,arg,type,eles,string,match,arg,type,ele,get,attribute,match,string,utils,has,text,match,match,dom,utils,get,text,value,arg,type,ele,if,string,utils,has,text,match,replace,override,add,type,identifier,match,replace,override,set,source,extract,source,replaced,method,ele,overrides,add,override,replace,override
BeanDefinitionParserDelegate -> public void parseReplacedMethodSubElements(Element beanEle, MethodOverrides overrides);1519513303;Parse replaced-method sub-elements of the given bean element.;public void parseReplacedMethodSubElements(Element beanEle, MethodOverrides overrides) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, REPLACED_METHOD_ELEMENT)) {_				Element replacedMethodEle = (Element) node__				String name = replacedMethodEle.getAttribute(NAME_ATTRIBUTE)__				String callback = replacedMethodEle.getAttribute(REPLACER_ATTRIBUTE)__				ReplaceOverride replaceOverride = new ReplaceOverride(name, callback)__				_				List<Element> argTypeEles = DomUtils.getChildElementsByTagName(replacedMethodEle, ARG_TYPE_ELEMENT)__				for (Element argTypeEle : argTypeEles) {_					String match = argTypeEle.getAttribute(ARG_TYPE_MATCH_ATTRIBUTE)__					match = (StringUtils.hasText(match) ? match : DomUtils.getTextValue(argTypeEle))__					if (StringUtils.hasText(match)) {_						replaceOverride.addTypeIdentifier(match)__					}_				}_				replaceOverride.setSource(extractSource(replacedMethodEle))__				overrides.addOverride(replaceOverride)__			}_		}_	};parse,replaced,method,sub,elements,of,the,given,bean,element;public,void,parse,replaced,method,sub,elements,element,bean,ele,method,overrides,overrides,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,replaced,method,ele,element,node,string,name,replaced,method,ele,get,attribute,string,callback,replaced,method,ele,get,attribute,replace,override,replace,override,new,replace,override,name,callback,list,element,arg,type,eles,dom,utils,get,child,elements,by,tag,name,replaced,method,ele,for,element,arg,type,ele,arg,type,eles,string,match,arg,type,ele,get,attribute,match,string,utils,has,text,match,match,dom,utils,get,text,value,arg,type,ele,if,string,utils,has,text,match,replace,override,add,type,identifier,match,replace,override,set,source,extract,source,replaced,method,ele,overrides,add,override,replace,override
BeanDefinitionParserDelegate -> public void parseReplacedMethodSubElements(Element beanEle, MethodOverrides overrides);1530174524;Parse replaced-method sub-elements of the given bean element.;public void parseReplacedMethodSubElements(Element beanEle, MethodOverrides overrides) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, REPLACED_METHOD_ELEMENT)) {_				Element replacedMethodEle = (Element) node__				String name = replacedMethodEle.getAttribute(NAME_ATTRIBUTE)__				String callback = replacedMethodEle.getAttribute(REPLACER_ATTRIBUTE)__				ReplaceOverride replaceOverride = new ReplaceOverride(name, callback)__				_				List<Element> argTypeEles = DomUtils.getChildElementsByTagName(replacedMethodEle, ARG_TYPE_ELEMENT)__				for (Element argTypeEle : argTypeEles) {_					String match = argTypeEle.getAttribute(ARG_TYPE_MATCH_ATTRIBUTE)__					match = (StringUtils.hasText(match) ? match : DomUtils.getTextValue(argTypeEle))__					if (StringUtils.hasText(match)) {_						replaceOverride.addTypeIdentifier(match)__					}_				}_				replaceOverride.setSource(extractSource(replacedMethodEle))__				overrides.addOverride(replaceOverride)__			}_		}_	};parse,replaced,method,sub,elements,of,the,given,bean,element;public,void,parse,replaced,method,sub,elements,element,bean,ele,method,overrides,overrides,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,replaced,method,ele,element,node,string,name,replaced,method,ele,get,attribute,string,callback,replaced,method,ele,get,attribute,replace,override,replace,override,new,replace,override,name,callback,list,element,arg,type,eles,dom,utils,get,child,elements,by,tag,name,replaced,method,ele,for,element,arg,type,ele,arg,type,eles,string,match,arg,type,ele,get,attribute,match,string,utils,has,text,match,match,dom,utils,get,text,value,arg,type,ele,if,string,utils,has,text,match,replace,override,add,type,identifier,match,replace,override,set,source,extract,source,replaced,method,ele,overrides,add,override,replace,override
BeanDefinitionParserDelegate -> public void parseReplacedMethodSubElements(Element beanEle, MethodOverrides overrides);1530190293;Parse replaced-method sub-elements of the given bean element.;public void parseReplacedMethodSubElements(Element beanEle, MethodOverrides overrides) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, REPLACED_METHOD_ELEMENT)) {_				Element replacedMethodEle = (Element) node__				String name = replacedMethodEle.getAttribute(NAME_ATTRIBUTE)__				String callback = replacedMethodEle.getAttribute(REPLACER_ATTRIBUTE)__				ReplaceOverride replaceOverride = new ReplaceOverride(name, callback)__				_				List<Element> argTypeEles = DomUtils.getChildElementsByTagName(replacedMethodEle, ARG_TYPE_ELEMENT)__				for (Element argTypeEle : argTypeEles) {_					String match = argTypeEle.getAttribute(ARG_TYPE_MATCH_ATTRIBUTE)__					match = (StringUtils.hasText(match) ? match : DomUtils.getTextValue(argTypeEle))__					if (StringUtils.hasText(match)) {_						replaceOverride.addTypeIdentifier(match)__					}_				}_				replaceOverride.setSource(extractSource(replacedMethodEle))__				overrides.addOverride(replaceOverride)__			}_		}_	};parse,replaced,method,sub,elements,of,the,given,bean,element;public,void,parse,replaced,method,sub,elements,element,bean,ele,method,overrides,overrides,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,replaced,method,ele,element,node,string,name,replaced,method,ele,get,attribute,string,callback,replaced,method,ele,get,attribute,replace,override,replace,override,new,replace,override,name,callback,list,element,arg,type,eles,dom,utils,get,child,elements,by,tag,name,replaced,method,ele,for,element,arg,type,ele,arg,type,eles,string,match,arg,type,ele,get,attribute,match,string,utils,has,text,match,match,dom,utils,get,text,value,arg,type,ele,if,string,utils,has,text,match,replace,override,add,type,identifier,match,replace,override,set,source,extract,source,replaced,method,ele,overrides,add,override,replace,override
BeanDefinitionParserDelegate -> public void parseReplacedMethodSubElements(Element beanEle, MethodOverrides overrides);1532706365;Parse replaced-method sub-elements of the given bean element.;public void parseReplacedMethodSubElements(Element beanEle, MethodOverrides overrides) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, REPLACED_METHOD_ELEMENT)) {_				Element replacedMethodEle = (Element) node__				String name = replacedMethodEle.getAttribute(NAME_ATTRIBUTE)__				String callback = replacedMethodEle.getAttribute(REPLACER_ATTRIBUTE)__				ReplaceOverride replaceOverride = new ReplaceOverride(name, callback)__				_				List<Element> argTypeEles = DomUtils.getChildElementsByTagName(replacedMethodEle, ARG_TYPE_ELEMENT)__				for (Element argTypeEle : argTypeEles) {_					String match = argTypeEle.getAttribute(ARG_TYPE_MATCH_ATTRIBUTE)__					match = (StringUtils.hasText(match) ? match : DomUtils.getTextValue(argTypeEle))__					if (StringUtils.hasText(match)) {_						replaceOverride.addTypeIdentifier(match)__					}_				}_				replaceOverride.setSource(extractSource(replacedMethodEle))__				overrides.addOverride(replaceOverride)__			}_		}_	};parse,replaced,method,sub,elements,of,the,given,bean,element;public,void,parse,replaced,method,sub,elements,element,bean,ele,method,overrides,overrides,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,replaced,method,ele,element,node,string,name,replaced,method,ele,get,attribute,string,callback,replaced,method,ele,get,attribute,replace,override,replace,override,new,replace,override,name,callback,list,element,arg,type,eles,dom,utils,get,child,elements,by,tag,name,replaced,method,ele,for,element,arg,type,ele,arg,type,eles,string,match,arg,type,ele,get,attribute,match,string,utils,has,text,match,match,dom,utils,get,text,value,arg,type,ele,if,string,utils,has,text,match,replace,override,add,type,identifier,match,replace,override,set,source,extract,source,replaced,method,ele,overrides,add,override,replace,override
BeanDefinitionParserDelegate -> public void parseReplacedMethodSubElements(Element beanEle, MethodOverrides overrides);1546958161;Parse replaced-method sub-elements of the given bean element.;public void parseReplacedMethodSubElements(Element beanEle, MethodOverrides overrides) {_		NodeList nl = beanEle.getChildNodes()__		for (int i = 0_ i < nl.getLength()_ i++) {_			Node node = nl.item(i)__			if (isCandidateElement(node) && nodeNameEquals(node, REPLACED_METHOD_ELEMENT)) {_				Element replacedMethodEle = (Element) node__				String name = replacedMethodEle.getAttribute(NAME_ATTRIBUTE)__				String callback = replacedMethodEle.getAttribute(REPLACER_ATTRIBUTE)__				ReplaceOverride replaceOverride = new ReplaceOverride(name, callback)__				_				List<Element> argTypeEles = DomUtils.getChildElementsByTagName(replacedMethodEle, ARG_TYPE_ELEMENT)__				for (Element argTypeEle : argTypeEles) {_					String match = argTypeEle.getAttribute(ARG_TYPE_MATCH_ATTRIBUTE)__					match = (StringUtils.hasText(match) ? match : DomUtils.getTextValue(argTypeEle))__					if (StringUtils.hasText(match)) {_						replaceOverride.addTypeIdentifier(match)__					}_				}_				replaceOverride.setSource(extractSource(replacedMethodEle))__				overrides.addOverride(replaceOverride)__			}_		}_	};parse,replaced,method,sub,elements,of,the,given,bean,element;public,void,parse,replaced,method,sub,elements,element,bean,ele,method,overrides,overrides,node,list,nl,bean,ele,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,is,candidate,element,node,node,name,equals,node,element,replaced,method,ele,element,node,string,name,replaced,method,ele,get,attribute,string,callback,replaced,method,ele,get,attribute,replace,override,replace,override,new,replace,override,name,callback,list,element,arg,type,eles,dom,utils,get,child,elements,by,tag,name,replaced,method,ele,for,element,arg,type,ele,arg,type,eles,string,match,arg,type,ele,get,attribute,match,string,utils,has,text,match,match,dom,utils,get,text,value,arg,type,ele,if,string,utils,has,text,match,replace,override,add,type,identifier,match,replace,override,set,source,extract,source,replaced,method,ele,overrides,add,override,replace,override
BeanDefinitionParserDelegate -> public void initDefaults(Element root, @Nullable BeanDefinitionParserDelegate parent);1496259743;Initialize the default lazy-init, autowire, dependency check settings,_init-method, destroy-method and merge settings. Support nested 'beans'_element use cases by falling back to the given parent in case the_defaults are not explicitly set locally._@see #populateDefaults(DocumentDefaultsDefinition, DocumentDefaultsDefinition, org.w3c.dom.Element)_@see #getDefaults();public void initDefaults(Element root, @Nullable BeanDefinitionParserDelegate parent) {_		populateDefaults(this.defaults, (parent != null ? parent.defaults : null), root)__		this.readerContext.fireDefaultsRegistered(this.defaults)__	};initialize,the,default,lazy,init,autowire,dependency,check,settings,init,method,destroy,method,and,merge,settings,support,nested,beans,element,use,cases,by,falling,back,to,the,given,parent,in,case,the,defaults,are,not,explicitly,set,locally,see,populate,defaults,document,defaults,definition,document,defaults,definition,org,w3c,dom,element,see,get,defaults;public,void,init,defaults,element,root,nullable,bean,definition,parser,delegate,parent,populate,defaults,this,defaults,parent,null,parent,defaults,null,root,this,reader,context,fire,defaults,registered,this,defaults
BeanDefinitionParserDelegate -> public void initDefaults(Element root, @Nullable BeanDefinitionParserDelegate parent);1496837955;Initialize the default lazy-init, autowire, dependency check settings,_init-method, destroy-method and merge settings. Support nested 'beans'_element use cases by falling back to the given parent in case the_defaults are not explicitly set locally._@see #populateDefaults(DocumentDefaultsDefinition, DocumentDefaultsDefinition, org.w3c.dom.Element)_@see #getDefaults();public void initDefaults(Element root, @Nullable BeanDefinitionParserDelegate parent) {_		populateDefaults(this.defaults, (parent != null ? parent.defaults : null), root)__		this.readerContext.fireDefaultsRegistered(this.defaults)__	};initialize,the,default,lazy,init,autowire,dependency,check,settings,init,method,destroy,method,and,merge,settings,support,nested,beans,element,use,cases,by,falling,back,to,the,given,parent,in,case,the,defaults,are,not,explicitly,set,locally,see,populate,defaults,document,defaults,definition,document,defaults,definition,org,w3c,dom,element,see,get,defaults;public,void,init,defaults,element,root,nullable,bean,definition,parser,delegate,parent,populate,defaults,this,defaults,parent,null,parent,defaults,null,root,this,reader,context,fire,defaults,registered,this,defaults
BeanDefinitionParserDelegate -> public void initDefaults(Element root, @Nullable BeanDefinitionParserDelegate parent);1503008029;Initialize the default lazy-init, autowire, dependency check settings,_init-method, destroy-method and merge settings. Support nested 'beans'_element use cases by falling back to the given parent in case the_defaults are not explicitly set locally._@see #populateDefaults(DocumentDefaultsDefinition, DocumentDefaultsDefinition, org.w3c.dom.Element)_@see #getDefaults();public void initDefaults(Element root, @Nullable BeanDefinitionParserDelegate parent) {_		populateDefaults(this.defaults, (parent != null ? parent.defaults : null), root)__		this.readerContext.fireDefaultsRegistered(this.defaults)__	};initialize,the,default,lazy,init,autowire,dependency,check,settings,init,method,destroy,method,and,merge,settings,support,nested,beans,element,use,cases,by,falling,back,to,the,given,parent,in,case,the,defaults,are,not,explicitly,set,locally,see,populate,defaults,document,defaults,definition,document,defaults,definition,org,w3c,dom,element,see,get,defaults;public,void,init,defaults,element,root,nullable,bean,definition,parser,delegate,parent,populate,defaults,this,defaults,parent,null,parent,defaults,null,root,this,reader,context,fire,defaults,registered,this,defaults
BeanDefinitionParserDelegate -> public void initDefaults(Element root, @Nullable BeanDefinitionParserDelegate parent);1519513303;Initialize the default lazy-init, autowire, dependency check settings,_init-method, destroy-method and merge settings. Support nested 'beans'_element use cases by falling back to the given parent in case the_defaults are not explicitly set locally._@see #populateDefaults(DocumentDefaultsDefinition, DocumentDefaultsDefinition, org.w3c.dom.Element)_@see #getDefaults();public void initDefaults(Element root, @Nullable BeanDefinitionParserDelegate parent) {_		populateDefaults(this.defaults, (parent != null ? parent.defaults : null), root)__		this.readerContext.fireDefaultsRegistered(this.defaults)__	};initialize,the,default,lazy,init,autowire,dependency,check,settings,init,method,destroy,method,and,merge,settings,support,nested,beans,element,use,cases,by,falling,back,to,the,given,parent,in,case,the,defaults,are,not,explicitly,set,locally,see,populate,defaults,document,defaults,definition,document,defaults,definition,org,w3c,dom,element,see,get,defaults;public,void,init,defaults,element,root,nullable,bean,definition,parser,delegate,parent,populate,defaults,this,defaults,parent,null,parent,defaults,null,root,this,reader,context,fire,defaults,registered,this,defaults
BeanDefinitionParserDelegate -> public void initDefaults(Element root, @Nullable BeanDefinitionParserDelegate parent);1530174524;Initialize the default lazy-init, autowire, dependency check settings,_init-method, destroy-method and merge settings. Support nested 'beans'_element use cases by falling back to the given parent in case the_defaults are not explicitly set locally._@see #populateDefaults(DocumentDefaultsDefinition, DocumentDefaultsDefinition, org.w3c.dom.Element)_@see #getDefaults();public void initDefaults(Element root, @Nullable BeanDefinitionParserDelegate parent) {_		populateDefaults(this.defaults, (parent != null ? parent.defaults : null), root)__		this.readerContext.fireDefaultsRegistered(this.defaults)__	};initialize,the,default,lazy,init,autowire,dependency,check,settings,init,method,destroy,method,and,merge,settings,support,nested,beans,element,use,cases,by,falling,back,to,the,given,parent,in,case,the,defaults,are,not,explicitly,set,locally,see,populate,defaults,document,defaults,definition,document,defaults,definition,org,w3c,dom,element,see,get,defaults;public,void,init,defaults,element,root,nullable,bean,definition,parser,delegate,parent,populate,defaults,this,defaults,parent,null,parent,defaults,null,root,this,reader,context,fire,defaults,registered,this,defaults
BeanDefinitionParserDelegate -> public void initDefaults(Element root, @Nullable BeanDefinitionParserDelegate parent);1530190293;Initialize the default lazy-init, autowire, dependency check settings,_init-method, destroy-method and merge settings. Support nested 'beans'_element use cases by falling back to the given parent in case the_defaults are not explicitly set locally._@see #populateDefaults(DocumentDefaultsDefinition, DocumentDefaultsDefinition, org.w3c.dom.Element)_@see #getDefaults();public void initDefaults(Element root, @Nullable BeanDefinitionParserDelegate parent) {_		populateDefaults(this.defaults, (parent != null ? parent.defaults : null), root)__		this.readerContext.fireDefaultsRegistered(this.defaults)__	};initialize,the,default,lazy,init,autowire,dependency,check,settings,init,method,destroy,method,and,merge,settings,support,nested,beans,element,use,cases,by,falling,back,to,the,given,parent,in,case,the,defaults,are,not,explicitly,set,locally,see,populate,defaults,document,defaults,definition,document,defaults,definition,org,w3c,dom,element,see,get,defaults;public,void,init,defaults,element,root,nullable,bean,definition,parser,delegate,parent,populate,defaults,this,defaults,parent,null,parent,defaults,null,root,this,reader,context,fire,defaults,registered,this,defaults
BeanDefinitionParserDelegate -> public void initDefaults(Element root, @Nullable BeanDefinitionParserDelegate parent);1532706365;Initialize the default lazy-init, autowire, dependency check settings,_init-method, destroy-method and merge settings. Support nested 'beans'_element use cases by falling back to the given parent in case the_defaults are not explicitly set locally._@see #populateDefaults(DocumentDefaultsDefinition, DocumentDefaultsDefinition, org.w3c.dom.Element)_@see #getDefaults();public void initDefaults(Element root, @Nullable BeanDefinitionParserDelegate parent) {_		populateDefaults(this.defaults, (parent != null ? parent.defaults : null), root)__		this.readerContext.fireDefaultsRegistered(this.defaults)__	};initialize,the,default,lazy,init,autowire,dependency,check,settings,init,method,destroy,method,and,merge,settings,support,nested,beans,element,use,cases,by,falling,back,to,the,given,parent,in,case,the,defaults,are,not,explicitly,set,locally,see,populate,defaults,document,defaults,definition,document,defaults,definition,org,w3c,dom,element,see,get,defaults;public,void,init,defaults,element,root,nullable,bean,definition,parser,delegate,parent,populate,defaults,this,defaults,parent,null,parent,defaults,null,root,this,reader,context,fire,defaults,registered,this,defaults
BeanDefinitionParserDelegate -> public void initDefaults(Element root, @Nullable BeanDefinitionParserDelegate parent);1546958161;Initialize the default lazy-init, autowire, dependency check settings,_init-method, destroy-method and merge settings. Support nested 'beans'_element use cases by falling back to the given parent in case the_defaults are not explicitly set locally._@see #populateDefaults(DocumentDefaultsDefinition, DocumentDefaultsDefinition, org.w3c.dom.Element)_@see #getDefaults();public void initDefaults(Element root, @Nullable BeanDefinitionParserDelegate parent) {_		populateDefaults(this.defaults, (parent != null ? parent.defaults : null), root)__		this.readerContext.fireDefaultsRegistered(this.defaults)__	};initialize,the,default,lazy,init,autowire,dependency,check,settings,init,method,destroy,method,and,merge,settings,support,nested,beans,element,use,cases,by,falling,back,to,the,given,parent,in,case,the,defaults,are,not,explicitly,set,locally,see,populate,defaults,document,defaults,definition,document,defaults,definition,org,w3c,dom,element,see,get,defaults;public,void,init,defaults,element,root,nullable,bean,definition,parser,delegate,parent,populate,defaults,this,defaults,parent,null,parent,defaults,null,root,this,reader,context,fire,defaults,registered,this,defaults
BeanDefinitionParserDelegate -> @Nullable 	public BeanDefinitionHolder parseBeanDefinitionElement(Element ele, @Nullable BeanDefinition containingBean);1496259743;Parses the supplied {@code <bean>} element. May return {@code null}_if there were errors during parse. Errors are reported to the_{@link org.springframework.beans.factory.parsing.ProblemReporter}.;@Nullable_	public BeanDefinitionHolder parseBeanDefinitionElement(Element ele, @Nullable BeanDefinition containingBean) {_		String id = ele.getAttribute(ID_ATTRIBUTE)__		String nameAttr = ele.getAttribute(NAME_ATTRIBUTE)___		List<String> aliases = new ArrayList<>()__		if (StringUtils.hasLength(nameAttr)) {_			String[] nameArr = StringUtils.tokenizeToStringArray(nameAttr, MULTI_VALUE_ATTRIBUTE_DELIMITERS)__			aliases.addAll(Arrays.asList(nameArr))__		}__		String beanName = id__		if (!StringUtils.hasText(beanName) && !aliases.isEmpty()) {_			beanName = aliases.remove(0)__			if (logger.isDebugEnabled()) {_				logger.debug("No XML 'id' specified - using '" + beanName +_						"' as bean name and " + aliases + " as aliases")__			}_		}__		if (containingBean == null) {_			checkNameUniqueness(beanName, aliases, ele)__		}__		AbstractBeanDefinition beanDefinition = parseBeanDefinitionElement(ele, beanName, containingBean)__		if (beanDefinition != null) {_			if (!StringUtils.hasText(beanName)) {_				try {_					if (containingBean != null) {_						beanName = BeanDefinitionReaderUtils.generateBeanName(_								beanDefinition, this.readerContext.getRegistry(), true)__					}_					else {_						beanName = this.readerContext.generateBeanName(beanDefinition)__						_						_						_						String beanClassName = beanDefinition.getBeanClassName()__						if (beanClassName != null &&_								beanName.startsWith(beanClassName) && beanName.length() > beanClassName.length() &&_								!this.readerContext.getRegistry().isBeanNameInUse(beanClassName)) {_							aliases.add(beanClassName)__						}_					}_					if (logger.isDebugEnabled()) {_						logger.debug("Neither XML 'id' nor 'name' specified - " +_								"using generated bean name [" + beanName + "]")__					}_				}_				catch (Exception ex) {_					error(ex.getMessage(), ele)__					return null__				}_			}_			String[] aliasesArray = StringUtils.toStringArray(aliases)__			return new BeanDefinitionHolder(beanDefinition, beanName, aliasesArray)__		}__		return null__	};parses,the,supplied,code,bean,element,may,return,code,null,if,there,were,errors,during,parse,errors,are,reported,to,the,link,org,springframework,beans,factory,parsing,problem,reporter;nullable,public,bean,definition,holder,parse,bean,definition,element,element,ele,nullable,bean,definition,containing,bean,string,id,ele,get,attribute,string,name,attr,ele,get,attribute,list,string,aliases,new,array,list,if,string,utils,has,length,name,attr,string,name,arr,string,utils,tokenize,to,string,array,name,attr,aliases,add,all,arrays,as,list,name,arr,string,bean,name,id,if,string,utils,has,text,bean,name,aliases,is,empty,bean,name,aliases,remove,0,if,logger,is,debug,enabled,logger,debug,no,xml,id,specified,using,bean,name,as,bean,name,and,aliases,as,aliases,if,containing,bean,null,check,name,uniqueness,bean,name,aliases,ele,abstract,bean,definition,bean,definition,parse,bean,definition,element,ele,bean,name,containing,bean,if,bean,definition,null,if,string,utils,has,text,bean,name,try,if,containing,bean,null,bean,name,bean,definition,reader,utils,generate,bean,name,bean,definition,this,reader,context,get,registry,true,else,bean,name,this,reader,context,generate,bean,name,bean,definition,string,bean,class,name,bean,definition,get,bean,class,name,if,bean,class,name,null,bean,name,starts,with,bean,class,name,bean,name,length,bean,class,name,length,this,reader,context,get,registry,is,bean,name,in,use,bean,class,name,aliases,add,bean,class,name,if,logger,is,debug,enabled,logger,debug,neither,xml,id,nor,name,specified,using,generated,bean,name,bean,name,catch,exception,ex,error,ex,get,message,ele,return,null,string,aliases,array,string,utils,to,string,array,aliases,return,new,bean,definition,holder,bean,definition,bean,name,aliases,array,return,null
BeanDefinitionParserDelegate -> @Nullable 	public BeanDefinitionHolder parseBeanDefinitionElement(Element ele, @Nullable BeanDefinition containingBean);1496837955;Parses the supplied {@code <bean>} element. May return {@code null}_if there were errors during parse. Errors are reported to the_{@link org.springframework.beans.factory.parsing.ProblemReporter}.;@Nullable_	public BeanDefinitionHolder parseBeanDefinitionElement(Element ele, @Nullable BeanDefinition containingBean) {_		String id = ele.getAttribute(ID_ATTRIBUTE)__		String nameAttr = ele.getAttribute(NAME_ATTRIBUTE)___		List<String> aliases = new ArrayList<>()__		if (StringUtils.hasLength(nameAttr)) {_			String[] nameArr = StringUtils.tokenizeToStringArray(nameAttr, MULTI_VALUE_ATTRIBUTE_DELIMITERS)__			aliases.addAll(Arrays.asList(nameArr))__		}__		String beanName = id__		if (!StringUtils.hasText(beanName) && !aliases.isEmpty()) {_			beanName = aliases.remove(0)__			if (logger.isDebugEnabled()) {_				logger.debug("No XML 'id' specified - using '" + beanName +_						"' as bean name and " + aliases + " as aliases")__			}_		}__		if (containingBean == null) {_			checkNameUniqueness(beanName, aliases, ele)__		}__		AbstractBeanDefinition beanDefinition = parseBeanDefinitionElement(ele, beanName, containingBean)__		if (beanDefinition != null) {_			if (!StringUtils.hasText(beanName)) {_				try {_					if (containingBean != null) {_						beanName = BeanDefinitionReaderUtils.generateBeanName(_								beanDefinition, this.readerContext.getRegistry(), true)__					}_					else {_						beanName = this.readerContext.generateBeanName(beanDefinition)__						_						_						_						String beanClassName = beanDefinition.getBeanClassName()__						if (beanClassName != null &&_								beanName.startsWith(beanClassName) && beanName.length() > beanClassName.length() &&_								!this.readerContext.getRegistry().isBeanNameInUse(beanClassName)) {_							aliases.add(beanClassName)__						}_					}_					if (logger.isDebugEnabled()) {_						logger.debug("Neither XML 'id' nor 'name' specified - " +_								"using generated bean name [" + beanName + "]")__					}_				}_				catch (Exception ex) {_					error(ex.getMessage(), ele)__					return null__				}_			}_			String[] aliasesArray = StringUtils.toStringArray(aliases)__			return new BeanDefinitionHolder(beanDefinition, beanName, aliasesArray)__		}__		return null__	};parses,the,supplied,code,bean,element,may,return,code,null,if,there,were,errors,during,parse,errors,are,reported,to,the,link,org,springframework,beans,factory,parsing,problem,reporter;nullable,public,bean,definition,holder,parse,bean,definition,element,element,ele,nullable,bean,definition,containing,bean,string,id,ele,get,attribute,string,name,attr,ele,get,attribute,list,string,aliases,new,array,list,if,string,utils,has,length,name,attr,string,name,arr,string,utils,tokenize,to,string,array,name,attr,aliases,add,all,arrays,as,list,name,arr,string,bean,name,id,if,string,utils,has,text,bean,name,aliases,is,empty,bean,name,aliases,remove,0,if,logger,is,debug,enabled,logger,debug,no,xml,id,specified,using,bean,name,as,bean,name,and,aliases,as,aliases,if,containing,bean,null,check,name,uniqueness,bean,name,aliases,ele,abstract,bean,definition,bean,definition,parse,bean,definition,element,ele,bean,name,containing,bean,if,bean,definition,null,if,string,utils,has,text,bean,name,try,if,containing,bean,null,bean,name,bean,definition,reader,utils,generate,bean,name,bean,definition,this,reader,context,get,registry,true,else,bean,name,this,reader,context,generate,bean,name,bean,definition,string,bean,class,name,bean,definition,get,bean,class,name,if,bean,class,name,null,bean,name,starts,with,bean,class,name,bean,name,length,bean,class,name,length,this,reader,context,get,registry,is,bean,name,in,use,bean,class,name,aliases,add,bean,class,name,if,logger,is,debug,enabled,logger,debug,neither,xml,id,nor,name,specified,using,generated,bean,name,bean,name,catch,exception,ex,error,ex,get,message,ele,return,null,string,aliases,array,string,utils,to,string,array,aliases,return,new,bean,definition,holder,bean,definition,bean,name,aliases,array,return,null
BeanDefinitionParserDelegate -> @Nullable 	public BeanDefinitionHolder parseBeanDefinitionElement(Element ele, @Nullable BeanDefinition containingBean);1503008029;Parses the supplied {@code <bean>} element. May return {@code null}_if there were errors during parse. Errors are reported to the_{@link org.springframework.beans.factory.parsing.ProblemReporter}.;@Nullable_	public BeanDefinitionHolder parseBeanDefinitionElement(Element ele, @Nullable BeanDefinition containingBean) {_		String id = ele.getAttribute(ID_ATTRIBUTE)__		String nameAttr = ele.getAttribute(NAME_ATTRIBUTE)___		List<String> aliases = new ArrayList<>()__		if (StringUtils.hasLength(nameAttr)) {_			String[] nameArr = StringUtils.tokenizeToStringArray(nameAttr, MULTI_VALUE_ATTRIBUTE_DELIMITERS)__			aliases.addAll(Arrays.asList(nameArr))__		}__		String beanName = id__		if (!StringUtils.hasText(beanName) && !aliases.isEmpty()) {_			beanName = aliases.remove(0)__			if (logger.isDebugEnabled()) {_				logger.debug("No XML 'id' specified - using '" + beanName +_						"' as bean name and " + aliases + " as aliases")__			}_		}__		if (containingBean == null) {_			checkNameUniqueness(beanName, aliases, ele)__		}__		AbstractBeanDefinition beanDefinition = parseBeanDefinitionElement(ele, beanName, containingBean)__		if (beanDefinition != null) {_			if (!StringUtils.hasText(beanName)) {_				try {_					if (containingBean != null) {_						beanName = BeanDefinitionReaderUtils.generateBeanName(_								beanDefinition, this.readerContext.getRegistry(), true)__					}_					else {_						beanName = this.readerContext.generateBeanName(beanDefinition)__						_						_						_						String beanClassName = beanDefinition.getBeanClassName()__						if (beanClassName != null &&_								beanName.startsWith(beanClassName) && beanName.length() > beanClassName.length() &&_								!this.readerContext.getRegistry().isBeanNameInUse(beanClassName)) {_							aliases.add(beanClassName)__						}_					}_					if (logger.isDebugEnabled()) {_						logger.debug("Neither XML 'id' nor 'name' specified - " +_								"using generated bean name [" + beanName + "]")__					}_				}_				catch (Exception ex) {_					error(ex.getMessage(), ele)__					return null__				}_			}_			String[] aliasesArray = StringUtils.toStringArray(aliases)__			return new BeanDefinitionHolder(beanDefinition, beanName, aliasesArray)__		}__		return null__	};parses,the,supplied,code,bean,element,may,return,code,null,if,there,were,errors,during,parse,errors,are,reported,to,the,link,org,springframework,beans,factory,parsing,problem,reporter;nullable,public,bean,definition,holder,parse,bean,definition,element,element,ele,nullable,bean,definition,containing,bean,string,id,ele,get,attribute,string,name,attr,ele,get,attribute,list,string,aliases,new,array,list,if,string,utils,has,length,name,attr,string,name,arr,string,utils,tokenize,to,string,array,name,attr,aliases,add,all,arrays,as,list,name,arr,string,bean,name,id,if,string,utils,has,text,bean,name,aliases,is,empty,bean,name,aliases,remove,0,if,logger,is,debug,enabled,logger,debug,no,xml,id,specified,using,bean,name,as,bean,name,and,aliases,as,aliases,if,containing,bean,null,check,name,uniqueness,bean,name,aliases,ele,abstract,bean,definition,bean,definition,parse,bean,definition,element,ele,bean,name,containing,bean,if,bean,definition,null,if,string,utils,has,text,bean,name,try,if,containing,bean,null,bean,name,bean,definition,reader,utils,generate,bean,name,bean,definition,this,reader,context,get,registry,true,else,bean,name,this,reader,context,generate,bean,name,bean,definition,string,bean,class,name,bean,definition,get,bean,class,name,if,bean,class,name,null,bean,name,starts,with,bean,class,name,bean,name,length,bean,class,name,length,this,reader,context,get,registry,is,bean,name,in,use,bean,class,name,aliases,add,bean,class,name,if,logger,is,debug,enabled,logger,debug,neither,xml,id,nor,name,specified,using,generated,bean,name,bean,name,catch,exception,ex,error,ex,get,message,ele,return,null,string,aliases,array,string,utils,to,string,array,aliases,return,new,bean,definition,holder,bean,definition,bean,name,aliases,array,return,null
BeanDefinitionParserDelegate -> @Nullable 	public BeanDefinitionHolder parseBeanDefinitionElement(Element ele, @Nullable BeanDefinition containingBean);1519513303;Parses the supplied {@code <bean>} element. May return {@code null}_if there were errors during parse. Errors are reported to the_{@link org.springframework.beans.factory.parsing.ProblemReporter}.;@Nullable_	public BeanDefinitionHolder parseBeanDefinitionElement(Element ele, @Nullable BeanDefinition containingBean) {_		String id = ele.getAttribute(ID_ATTRIBUTE)__		String nameAttr = ele.getAttribute(NAME_ATTRIBUTE)___		List<String> aliases = new ArrayList<>()__		if (StringUtils.hasLength(nameAttr)) {_			String[] nameArr = StringUtils.tokenizeToStringArray(nameAttr, MULTI_VALUE_ATTRIBUTE_DELIMITERS)__			aliases.addAll(Arrays.asList(nameArr))__		}__		String beanName = id__		if (!StringUtils.hasText(beanName) && !aliases.isEmpty()) {_			beanName = aliases.remove(0)__			if (logger.isDebugEnabled()) {_				logger.debug("No XML 'id' specified - using '" + beanName +_						"' as bean name and " + aliases + " as aliases")__			}_		}__		if (containingBean == null) {_			checkNameUniqueness(beanName, aliases, ele)__		}__		AbstractBeanDefinition beanDefinition = parseBeanDefinitionElement(ele, beanName, containingBean)__		if (beanDefinition != null) {_			if (!StringUtils.hasText(beanName)) {_				try {_					if (containingBean != null) {_						beanName = BeanDefinitionReaderUtils.generateBeanName(_								beanDefinition, this.readerContext.getRegistry(), true)__					}_					else {_						beanName = this.readerContext.generateBeanName(beanDefinition)__						_						_						_						String beanClassName = beanDefinition.getBeanClassName()__						if (beanClassName != null &&_								beanName.startsWith(beanClassName) && beanName.length() > beanClassName.length() &&_								!this.readerContext.getRegistry().isBeanNameInUse(beanClassName)) {_							aliases.add(beanClassName)__						}_					}_					if (logger.isDebugEnabled()) {_						logger.debug("Neither XML 'id' nor 'name' specified - " +_								"using generated bean name [" + beanName + "]")__					}_				}_				catch (Exception ex) {_					error(ex.getMessage(), ele)__					return null__				}_			}_			String[] aliasesArray = StringUtils.toStringArray(aliases)__			return new BeanDefinitionHolder(beanDefinition, beanName, aliasesArray)__		}__		return null__	};parses,the,supplied,code,bean,element,may,return,code,null,if,there,were,errors,during,parse,errors,are,reported,to,the,link,org,springframework,beans,factory,parsing,problem,reporter;nullable,public,bean,definition,holder,parse,bean,definition,element,element,ele,nullable,bean,definition,containing,bean,string,id,ele,get,attribute,string,name,attr,ele,get,attribute,list,string,aliases,new,array,list,if,string,utils,has,length,name,attr,string,name,arr,string,utils,tokenize,to,string,array,name,attr,aliases,add,all,arrays,as,list,name,arr,string,bean,name,id,if,string,utils,has,text,bean,name,aliases,is,empty,bean,name,aliases,remove,0,if,logger,is,debug,enabled,logger,debug,no,xml,id,specified,using,bean,name,as,bean,name,and,aliases,as,aliases,if,containing,bean,null,check,name,uniqueness,bean,name,aliases,ele,abstract,bean,definition,bean,definition,parse,bean,definition,element,ele,bean,name,containing,bean,if,bean,definition,null,if,string,utils,has,text,bean,name,try,if,containing,bean,null,bean,name,bean,definition,reader,utils,generate,bean,name,bean,definition,this,reader,context,get,registry,true,else,bean,name,this,reader,context,generate,bean,name,bean,definition,string,bean,class,name,bean,definition,get,bean,class,name,if,bean,class,name,null,bean,name,starts,with,bean,class,name,bean,name,length,bean,class,name,length,this,reader,context,get,registry,is,bean,name,in,use,bean,class,name,aliases,add,bean,class,name,if,logger,is,debug,enabled,logger,debug,neither,xml,id,nor,name,specified,using,generated,bean,name,bean,name,catch,exception,ex,error,ex,get,message,ele,return,null,string,aliases,array,string,utils,to,string,array,aliases,return,new,bean,definition,holder,bean,definition,bean,name,aliases,array,return,null
BeanDefinitionParserDelegate -> @Nullable 	public BeanDefinitionHolder parseBeanDefinitionElement(Element ele, @Nullable BeanDefinition containingBean);1530174524;Parses the supplied {@code <bean>} element. May return {@code null}_if there were errors during parse. Errors are reported to the_{@link org.springframework.beans.factory.parsing.ProblemReporter}.;@Nullable_	public BeanDefinitionHolder parseBeanDefinitionElement(Element ele, @Nullable BeanDefinition containingBean) {_		String id = ele.getAttribute(ID_ATTRIBUTE)__		String nameAttr = ele.getAttribute(NAME_ATTRIBUTE)___		List<String> aliases = new ArrayList<>()__		if (StringUtils.hasLength(nameAttr)) {_			String[] nameArr = StringUtils.tokenizeToStringArray(nameAttr, MULTI_VALUE_ATTRIBUTE_DELIMITERS)__			aliases.addAll(Arrays.asList(nameArr))__		}__		String beanName = id__		if (!StringUtils.hasText(beanName) && !aliases.isEmpty()) {_			beanName = aliases.remove(0)__			if (logger.isDebugEnabled()) {_				logger.debug("No XML 'id' specified - using '" + beanName +_						"' as bean name and " + aliases + " as aliases")__			}_		}__		if (containingBean == null) {_			checkNameUniqueness(beanName, aliases, ele)__		}__		AbstractBeanDefinition beanDefinition = parseBeanDefinitionElement(ele, beanName, containingBean)__		if (beanDefinition != null) {_			if (!StringUtils.hasText(beanName)) {_				try {_					if (containingBean != null) {_						beanName = BeanDefinitionReaderUtils.generateBeanName(_								beanDefinition, this.readerContext.getRegistry(), true)__					}_					else {_						beanName = this.readerContext.generateBeanName(beanDefinition)__						_						_						_						String beanClassName = beanDefinition.getBeanClassName()__						if (beanClassName != null &&_								beanName.startsWith(beanClassName) && beanName.length() > beanClassName.length() &&_								!this.readerContext.getRegistry().isBeanNameInUse(beanClassName)) {_							aliases.add(beanClassName)__						}_					}_					if (logger.isDebugEnabled()) {_						logger.debug("Neither XML 'id' nor 'name' specified - " +_								"using generated bean name [" + beanName + "]")__					}_				}_				catch (Exception ex) {_					error(ex.getMessage(), ele)__					return null__				}_			}_			String[] aliasesArray = StringUtils.toStringArray(aliases)__			return new BeanDefinitionHolder(beanDefinition, beanName, aliasesArray)__		}__		return null__	};parses,the,supplied,code,bean,element,may,return,code,null,if,there,were,errors,during,parse,errors,are,reported,to,the,link,org,springframework,beans,factory,parsing,problem,reporter;nullable,public,bean,definition,holder,parse,bean,definition,element,element,ele,nullable,bean,definition,containing,bean,string,id,ele,get,attribute,string,name,attr,ele,get,attribute,list,string,aliases,new,array,list,if,string,utils,has,length,name,attr,string,name,arr,string,utils,tokenize,to,string,array,name,attr,aliases,add,all,arrays,as,list,name,arr,string,bean,name,id,if,string,utils,has,text,bean,name,aliases,is,empty,bean,name,aliases,remove,0,if,logger,is,debug,enabled,logger,debug,no,xml,id,specified,using,bean,name,as,bean,name,and,aliases,as,aliases,if,containing,bean,null,check,name,uniqueness,bean,name,aliases,ele,abstract,bean,definition,bean,definition,parse,bean,definition,element,ele,bean,name,containing,bean,if,bean,definition,null,if,string,utils,has,text,bean,name,try,if,containing,bean,null,bean,name,bean,definition,reader,utils,generate,bean,name,bean,definition,this,reader,context,get,registry,true,else,bean,name,this,reader,context,generate,bean,name,bean,definition,string,bean,class,name,bean,definition,get,bean,class,name,if,bean,class,name,null,bean,name,starts,with,bean,class,name,bean,name,length,bean,class,name,length,this,reader,context,get,registry,is,bean,name,in,use,bean,class,name,aliases,add,bean,class,name,if,logger,is,debug,enabled,logger,debug,neither,xml,id,nor,name,specified,using,generated,bean,name,bean,name,catch,exception,ex,error,ex,get,message,ele,return,null,string,aliases,array,string,utils,to,string,array,aliases,return,new,bean,definition,holder,bean,definition,bean,name,aliases,array,return,null
BeanDefinitionParserDelegate -> @Nullable 	public BeanDefinitionHolder parseBeanDefinitionElement(Element ele, @Nullable BeanDefinition containingBean);1530190293;Parses the supplied {@code <bean>} element. May return {@code null}_if there were errors during parse. Errors are reported to the_{@link org.springframework.beans.factory.parsing.ProblemReporter}.;@Nullable_	public BeanDefinitionHolder parseBeanDefinitionElement(Element ele, @Nullable BeanDefinition containingBean) {_		String id = ele.getAttribute(ID_ATTRIBUTE)__		String nameAttr = ele.getAttribute(NAME_ATTRIBUTE)___		List<String> aliases = new ArrayList<>()__		if (StringUtils.hasLength(nameAttr)) {_			String[] nameArr = StringUtils.tokenizeToStringArray(nameAttr, MULTI_VALUE_ATTRIBUTE_DELIMITERS)__			aliases.addAll(Arrays.asList(nameArr))__		}__		String beanName = id__		if (!StringUtils.hasText(beanName) && !aliases.isEmpty()) {_			beanName = aliases.remove(0)__			if (logger.isDebugEnabled()) {_				logger.debug("No XML 'id' specified - using '" + beanName +_						"' as bean name and " + aliases + " as aliases")__			}_		}__		if (containingBean == null) {_			checkNameUniqueness(beanName, aliases, ele)__		}__		AbstractBeanDefinition beanDefinition = parseBeanDefinitionElement(ele, beanName, containingBean)__		if (beanDefinition != null) {_			if (!StringUtils.hasText(beanName)) {_				try {_					if (containingBean != null) {_						beanName = BeanDefinitionReaderUtils.generateBeanName(_								beanDefinition, this.readerContext.getRegistry(), true)__					}_					else {_						beanName = this.readerContext.generateBeanName(beanDefinition)__						_						_						_						String beanClassName = beanDefinition.getBeanClassName()__						if (beanClassName != null &&_								beanName.startsWith(beanClassName) && beanName.length() > beanClassName.length() &&_								!this.readerContext.getRegistry().isBeanNameInUse(beanClassName)) {_							aliases.add(beanClassName)__						}_					}_					if (logger.isDebugEnabled()) {_						logger.debug("Neither XML 'id' nor 'name' specified - " +_								"using generated bean name [" + beanName + "]")__					}_				}_				catch (Exception ex) {_					error(ex.getMessage(), ele)__					return null__				}_			}_			String[] aliasesArray = StringUtils.toStringArray(aliases)__			return new BeanDefinitionHolder(beanDefinition, beanName, aliasesArray)__		}__		return null__	};parses,the,supplied,code,bean,element,may,return,code,null,if,there,were,errors,during,parse,errors,are,reported,to,the,link,org,springframework,beans,factory,parsing,problem,reporter;nullable,public,bean,definition,holder,parse,bean,definition,element,element,ele,nullable,bean,definition,containing,bean,string,id,ele,get,attribute,string,name,attr,ele,get,attribute,list,string,aliases,new,array,list,if,string,utils,has,length,name,attr,string,name,arr,string,utils,tokenize,to,string,array,name,attr,aliases,add,all,arrays,as,list,name,arr,string,bean,name,id,if,string,utils,has,text,bean,name,aliases,is,empty,bean,name,aliases,remove,0,if,logger,is,debug,enabled,logger,debug,no,xml,id,specified,using,bean,name,as,bean,name,and,aliases,as,aliases,if,containing,bean,null,check,name,uniqueness,bean,name,aliases,ele,abstract,bean,definition,bean,definition,parse,bean,definition,element,ele,bean,name,containing,bean,if,bean,definition,null,if,string,utils,has,text,bean,name,try,if,containing,bean,null,bean,name,bean,definition,reader,utils,generate,bean,name,bean,definition,this,reader,context,get,registry,true,else,bean,name,this,reader,context,generate,bean,name,bean,definition,string,bean,class,name,bean,definition,get,bean,class,name,if,bean,class,name,null,bean,name,starts,with,bean,class,name,bean,name,length,bean,class,name,length,this,reader,context,get,registry,is,bean,name,in,use,bean,class,name,aliases,add,bean,class,name,if,logger,is,debug,enabled,logger,debug,neither,xml,id,nor,name,specified,using,generated,bean,name,bean,name,catch,exception,ex,error,ex,get,message,ele,return,null,string,aliases,array,string,utils,to,string,array,aliases,return,new,bean,definition,holder,bean,definition,bean,name,aliases,array,return,null
BeanDefinitionParserDelegate -> @Nullable 	public BeanDefinitionHolder parseBeanDefinitionElement(Element ele, @Nullable BeanDefinition containingBean);1532706365;Parses the supplied {@code <bean>} element. May return {@code null}_if there were errors during parse. Errors are reported to the_{@link org.springframework.beans.factory.parsing.ProblemReporter}.;@Nullable_	public BeanDefinitionHolder parseBeanDefinitionElement(Element ele, @Nullable BeanDefinition containingBean) {_		String id = ele.getAttribute(ID_ATTRIBUTE)__		String nameAttr = ele.getAttribute(NAME_ATTRIBUTE)___		List<String> aliases = new ArrayList<>()__		if (StringUtils.hasLength(nameAttr)) {_			String[] nameArr = StringUtils.tokenizeToStringArray(nameAttr, MULTI_VALUE_ATTRIBUTE_DELIMITERS)__			aliases.addAll(Arrays.asList(nameArr))__		}__		String beanName = id__		if (!StringUtils.hasText(beanName) && !aliases.isEmpty()) {_			beanName = aliases.remove(0)__			if (logger.isTraceEnabled()) {_				logger.trace("No XML 'id' specified - using '" + beanName +_						"' as bean name and " + aliases + " as aliases")__			}_		}__		if (containingBean == null) {_			checkNameUniqueness(beanName, aliases, ele)__		}__		AbstractBeanDefinition beanDefinition = parseBeanDefinitionElement(ele, beanName, containingBean)__		if (beanDefinition != null) {_			if (!StringUtils.hasText(beanName)) {_				try {_					if (containingBean != null) {_						beanName = BeanDefinitionReaderUtils.generateBeanName(_								beanDefinition, this.readerContext.getRegistry(), true)__					}_					else {_						beanName = this.readerContext.generateBeanName(beanDefinition)__						_						_						_						String beanClassName = beanDefinition.getBeanClassName()__						if (beanClassName != null &&_								beanName.startsWith(beanClassName) && beanName.length() > beanClassName.length() &&_								!this.readerContext.getRegistry().isBeanNameInUse(beanClassName)) {_							aliases.add(beanClassName)__						}_					}_					if (logger.isTraceEnabled()) {_						logger.trace("Neither XML 'id' nor 'name' specified - " +_								"using generated bean name [" + beanName + "]")__					}_				}_				catch (Exception ex) {_					error(ex.getMessage(), ele)__					return null__				}_			}_			String[] aliasesArray = StringUtils.toStringArray(aliases)__			return new BeanDefinitionHolder(beanDefinition, beanName, aliasesArray)__		}__		return null__	};parses,the,supplied,code,bean,element,may,return,code,null,if,there,were,errors,during,parse,errors,are,reported,to,the,link,org,springframework,beans,factory,parsing,problem,reporter;nullable,public,bean,definition,holder,parse,bean,definition,element,element,ele,nullable,bean,definition,containing,bean,string,id,ele,get,attribute,string,name,attr,ele,get,attribute,list,string,aliases,new,array,list,if,string,utils,has,length,name,attr,string,name,arr,string,utils,tokenize,to,string,array,name,attr,aliases,add,all,arrays,as,list,name,arr,string,bean,name,id,if,string,utils,has,text,bean,name,aliases,is,empty,bean,name,aliases,remove,0,if,logger,is,trace,enabled,logger,trace,no,xml,id,specified,using,bean,name,as,bean,name,and,aliases,as,aliases,if,containing,bean,null,check,name,uniqueness,bean,name,aliases,ele,abstract,bean,definition,bean,definition,parse,bean,definition,element,ele,bean,name,containing,bean,if,bean,definition,null,if,string,utils,has,text,bean,name,try,if,containing,bean,null,bean,name,bean,definition,reader,utils,generate,bean,name,bean,definition,this,reader,context,get,registry,true,else,bean,name,this,reader,context,generate,bean,name,bean,definition,string,bean,class,name,bean,definition,get,bean,class,name,if,bean,class,name,null,bean,name,starts,with,bean,class,name,bean,name,length,bean,class,name,length,this,reader,context,get,registry,is,bean,name,in,use,bean,class,name,aliases,add,bean,class,name,if,logger,is,trace,enabled,logger,trace,neither,xml,id,nor,name,specified,using,generated,bean,name,bean,name,catch,exception,ex,error,ex,get,message,ele,return,null,string,aliases,array,string,utils,to,string,array,aliases,return,new,bean,definition,holder,bean,definition,bean,name,aliases,array,return,null
BeanDefinitionParserDelegate -> @Nullable 	public BeanDefinitionHolder parseBeanDefinitionElement(Element ele, @Nullable BeanDefinition containingBean);1546958161;Parses the supplied {@code <bean>} element. May return {@code null}_if there were errors during parse. Errors are reported to the_{@link org.springframework.beans.factory.parsing.ProblemReporter}.;@Nullable_	public BeanDefinitionHolder parseBeanDefinitionElement(Element ele, @Nullable BeanDefinition containingBean) {_		String id = ele.getAttribute(ID_ATTRIBUTE)__		String nameAttr = ele.getAttribute(NAME_ATTRIBUTE)___		List<String> aliases = new ArrayList<>()__		if (StringUtils.hasLength(nameAttr)) {_			String[] nameArr = StringUtils.tokenizeToStringArray(nameAttr, MULTI_VALUE_ATTRIBUTE_DELIMITERS)__			aliases.addAll(Arrays.asList(nameArr))__		}__		String beanName = id__		if (!StringUtils.hasText(beanName) && !aliases.isEmpty()) {_			beanName = aliases.remove(0)__			if (logger.isTraceEnabled()) {_				logger.trace("No XML 'id' specified - using '" + beanName +_						"' as bean name and " + aliases + " as aliases")__			}_		}__		if (containingBean == null) {_			checkNameUniqueness(beanName, aliases, ele)__		}__		AbstractBeanDefinition beanDefinition = parseBeanDefinitionElement(ele, beanName, containingBean)__		if (beanDefinition != null) {_			if (!StringUtils.hasText(beanName)) {_				try {_					if (containingBean != null) {_						beanName = BeanDefinitionReaderUtils.generateBeanName(_								beanDefinition, this.readerContext.getRegistry(), true)__					}_					else {_						beanName = this.readerContext.generateBeanName(beanDefinition)__						_						_						_						String beanClassName = beanDefinition.getBeanClassName()__						if (beanClassName != null &&_								beanName.startsWith(beanClassName) && beanName.length() > beanClassName.length() &&_								!this.readerContext.getRegistry().isBeanNameInUse(beanClassName)) {_							aliases.add(beanClassName)__						}_					}_					if (logger.isTraceEnabled()) {_						logger.trace("Neither XML 'id' nor 'name' specified - " +_								"using generated bean name [" + beanName + "]")__					}_				}_				catch (Exception ex) {_					error(ex.getMessage(), ele)__					return null__				}_			}_			String[] aliasesArray = StringUtils.toStringArray(aliases)__			return new BeanDefinitionHolder(beanDefinition, beanName, aliasesArray)__		}__		return null__	};parses,the,supplied,code,bean,element,may,return,code,null,if,there,were,errors,during,parse,errors,are,reported,to,the,link,org,springframework,beans,factory,parsing,problem,reporter;nullable,public,bean,definition,holder,parse,bean,definition,element,element,ele,nullable,bean,definition,containing,bean,string,id,ele,get,attribute,string,name,attr,ele,get,attribute,list,string,aliases,new,array,list,if,string,utils,has,length,name,attr,string,name,arr,string,utils,tokenize,to,string,array,name,attr,aliases,add,all,arrays,as,list,name,arr,string,bean,name,id,if,string,utils,has,text,bean,name,aliases,is,empty,bean,name,aliases,remove,0,if,logger,is,trace,enabled,logger,trace,no,xml,id,specified,using,bean,name,as,bean,name,and,aliases,as,aliases,if,containing,bean,null,check,name,uniqueness,bean,name,aliases,ele,abstract,bean,definition,bean,definition,parse,bean,definition,element,ele,bean,name,containing,bean,if,bean,definition,null,if,string,utils,has,text,bean,name,try,if,containing,bean,null,bean,name,bean,definition,reader,utils,generate,bean,name,bean,definition,this,reader,context,get,registry,true,else,bean,name,this,reader,context,generate,bean,name,bean,definition,string,bean,class,name,bean,definition,get,bean,class,name,if,bean,class,name,null,bean,name,starts,with,bean,class,name,bean,name,length,bean,class,name,length,this,reader,context,get,registry,is,bean,name,in,use,bean,class,name,aliases,add,bean,class,name,if,logger,is,trace,enabled,logger,trace,neither,xml,id,nor,name,specified,using,generated,bean,name,bean,name,catch,exception,ex,error,ex,get,message,ele,return,null,string,aliases,array,string,utils,to,string,array,aliases,return,new,bean,definition,holder,bean,definition,bean,name,aliases,array,return,null
BeanDefinitionParserDelegate -> public Object parseArrayElement(Element arrayEle, @Nullable BeanDefinition bd);1496837955;Parse an array element.;public Object parseArrayElement(Element arrayEle, @Nullable BeanDefinition bd) {_		String elementType = arrayEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = arrayEle.getChildNodes()__		ManagedArray target = new ManagedArray(elementType, nl.getLength())__		target.setSource(extractSource(arrayEle))__		target.setElementTypeName(elementType)__		target.setMergeEnabled(parseMergeAttribute(arrayEle))__		parseCollectionElements(nl, target, bd, elementType)__		return target__	};parse,an,array,element;public,object,parse,array,element,element,array,ele,nullable,bean,definition,bd,string,element,type,array,ele,get,attribute,node,list,nl,array,ele,get,child,nodes,managed,array,target,new,managed,array,element,type,nl,get,length,target,set,source,extract,source,array,ele,target,set,element,type,name,element,type,target,set,merge,enabled,parse,merge,attribute,array,ele,parse,collection,elements,nl,target,bd,element,type,return,target
BeanDefinitionParserDelegate -> public Object parseArrayElement(Element arrayEle, @Nullable BeanDefinition bd);1503008029;Parse an array element.;public Object parseArrayElement(Element arrayEle, @Nullable BeanDefinition bd) {_		String elementType = arrayEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = arrayEle.getChildNodes()__		ManagedArray target = new ManagedArray(elementType, nl.getLength())__		target.setSource(extractSource(arrayEle))__		target.setElementTypeName(elementType)__		target.setMergeEnabled(parseMergeAttribute(arrayEle))__		parseCollectionElements(nl, target, bd, elementType)__		return target__	};parse,an,array,element;public,object,parse,array,element,element,array,ele,nullable,bean,definition,bd,string,element,type,array,ele,get,attribute,node,list,nl,array,ele,get,child,nodes,managed,array,target,new,managed,array,element,type,nl,get,length,target,set,source,extract,source,array,ele,target,set,element,type,name,element,type,target,set,merge,enabled,parse,merge,attribute,array,ele,parse,collection,elements,nl,target,bd,element,type,return,target
BeanDefinitionParserDelegate -> public Object parseArrayElement(Element arrayEle, @Nullable BeanDefinition bd);1519513303;Parse an array element.;public Object parseArrayElement(Element arrayEle, @Nullable BeanDefinition bd) {_		String elementType = arrayEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = arrayEle.getChildNodes()__		ManagedArray target = new ManagedArray(elementType, nl.getLength())__		target.setSource(extractSource(arrayEle))__		target.setElementTypeName(elementType)__		target.setMergeEnabled(parseMergeAttribute(arrayEle))__		parseCollectionElements(nl, target, bd, elementType)__		return target__	};parse,an,array,element;public,object,parse,array,element,element,array,ele,nullable,bean,definition,bd,string,element,type,array,ele,get,attribute,node,list,nl,array,ele,get,child,nodes,managed,array,target,new,managed,array,element,type,nl,get,length,target,set,source,extract,source,array,ele,target,set,element,type,name,element,type,target,set,merge,enabled,parse,merge,attribute,array,ele,parse,collection,elements,nl,target,bd,element,type,return,target
BeanDefinitionParserDelegate -> public Object parseArrayElement(Element arrayEle, @Nullable BeanDefinition bd);1530174524;Parse an array element.;public Object parseArrayElement(Element arrayEle, @Nullable BeanDefinition bd) {_		String elementType = arrayEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = arrayEle.getChildNodes()__		ManagedArray target = new ManagedArray(elementType, nl.getLength())__		target.setSource(extractSource(arrayEle))__		target.setElementTypeName(elementType)__		target.setMergeEnabled(parseMergeAttribute(arrayEle))__		parseCollectionElements(nl, target, bd, elementType)__		return target__	};parse,an,array,element;public,object,parse,array,element,element,array,ele,nullable,bean,definition,bd,string,element,type,array,ele,get,attribute,node,list,nl,array,ele,get,child,nodes,managed,array,target,new,managed,array,element,type,nl,get,length,target,set,source,extract,source,array,ele,target,set,element,type,name,element,type,target,set,merge,enabled,parse,merge,attribute,array,ele,parse,collection,elements,nl,target,bd,element,type,return,target
BeanDefinitionParserDelegate -> public Object parseArrayElement(Element arrayEle, @Nullable BeanDefinition bd);1530190293;Parse an array element.;public Object parseArrayElement(Element arrayEle, @Nullable BeanDefinition bd) {_		String elementType = arrayEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = arrayEle.getChildNodes()__		ManagedArray target = new ManagedArray(elementType, nl.getLength())__		target.setSource(extractSource(arrayEle))__		target.setElementTypeName(elementType)__		target.setMergeEnabled(parseMergeAttribute(arrayEle))__		parseCollectionElements(nl, target, bd, elementType)__		return target__	};parse,an,array,element;public,object,parse,array,element,element,array,ele,nullable,bean,definition,bd,string,element,type,array,ele,get,attribute,node,list,nl,array,ele,get,child,nodes,managed,array,target,new,managed,array,element,type,nl,get,length,target,set,source,extract,source,array,ele,target,set,element,type,name,element,type,target,set,merge,enabled,parse,merge,attribute,array,ele,parse,collection,elements,nl,target,bd,element,type,return,target
BeanDefinitionParserDelegate -> public Object parseArrayElement(Element arrayEle, @Nullable BeanDefinition bd);1532706365;Parse an array element.;public Object parseArrayElement(Element arrayEle, @Nullable BeanDefinition bd) {_		String elementType = arrayEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = arrayEle.getChildNodes()__		ManagedArray target = new ManagedArray(elementType, nl.getLength())__		target.setSource(extractSource(arrayEle))__		target.setElementTypeName(elementType)__		target.setMergeEnabled(parseMergeAttribute(arrayEle))__		parseCollectionElements(nl, target, bd, elementType)__		return target__	};parse,an,array,element;public,object,parse,array,element,element,array,ele,nullable,bean,definition,bd,string,element,type,array,ele,get,attribute,node,list,nl,array,ele,get,child,nodes,managed,array,target,new,managed,array,element,type,nl,get,length,target,set,source,extract,source,array,ele,target,set,element,type,name,element,type,target,set,merge,enabled,parse,merge,attribute,array,ele,parse,collection,elements,nl,target,bd,element,type,return,target
BeanDefinitionParserDelegate -> public Object parseArrayElement(Element arrayEle, @Nullable BeanDefinition bd);1546958161;Parse an array element.;public Object parseArrayElement(Element arrayEle, @Nullable BeanDefinition bd) {_		String elementType = arrayEle.getAttribute(VALUE_TYPE_ATTRIBUTE)__		NodeList nl = arrayEle.getChildNodes()__		ManagedArray target = new ManagedArray(elementType, nl.getLength())__		target.setSource(extractSource(arrayEle))__		target.setElementTypeName(elementType)__		target.setMergeEnabled(parseMergeAttribute(arrayEle))__		parseCollectionElements(nl, target, bd, elementType)__		return target__	};parse,an,array,element;public,object,parse,array,element,element,array,ele,nullable,bean,definition,bd,string,element,type,array,ele,get,attribute,node,list,nl,array,ele,get,child,nodes,managed,array,target,new,managed,array,element,type,nl,get,length,target,set,source,extract,source,array,ele,target,set,element,type,name,element,type,target,set,merge,enabled,parse,merge,attribute,array,ele,parse,collection,elements,nl,target,bd,element,type,return,target
BeanDefinitionParserDelegate -> public AbstractBeanDefinition parseBeanDefinitionElement( 			Element ele, String beanName, BeanDefinition containingBean);1328020251;Parse the bean definition itself, without regard to name or aliases. May return_<code>null</code> if problems occured during the parse of the bean definition.;public AbstractBeanDefinition parseBeanDefinitionElement(_			Element ele, String beanName, BeanDefinition containingBean) {__		this.parseState.push(new BeanEntry(beanName))___		String className = null__		if (ele.hasAttribute(CLASS_ATTRIBUTE)) {_			className = ele.getAttribute(CLASS_ATTRIBUTE).trim()__		}__		try {_			String parent = null__			if (ele.hasAttribute(PARENT_ATTRIBUTE)) {_				parent = ele.getAttribute(PARENT_ATTRIBUTE)__			}_			AbstractBeanDefinition bd = createBeanDefinition(className, parent)___			parseBeanDefinitionAttributes(ele, beanName, containingBean, bd)__			bd.setDescription(DomUtils.getChildElementValueByTagName(ele, DESCRIPTION_ELEMENT))___			parseMetaElements(ele, bd)__			parseLookupOverrideSubElements(ele, bd.getMethodOverrides())__			parseReplacedMethodSubElements(ele, bd.getMethodOverrides())___			parseConstructorArgElements(ele, bd)__			parsePropertyElements(ele, bd)__			parseQualifierElements(ele, bd)___			bd.setResource(this.readerContext.getResource())__			bd.setSource(extractSource(ele))___			return bd__		}_		catch (ClassNotFoundException ex) {_			error("Bean class [" + className + "] not found", ele, ex)__		}_		catch (NoClassDefFoundError err) {_			error("Class that bean class [" + className + "] depends on not found", ele, err)__		}_		catch (Throwable ex) {_			error("Unexpected failure during bean definition parsing", ele, ex)__		}_		finally {_			this.parseState.pop()__		}__		return null__	};parse,the,bean,definition,itself,without,regard,to,name,or,aliases,may,return,code,null,code,if,problems,occured,during,the,parse,of,the,bean,definition;public,abstract,bean,definition,parse,bean,definition,element,element,ele,string,bean,name,bean,definition,containing,bean,this,parse,state,push,new,bean,entry,bean,name,string,class,name,null,if,ele,has,attribute,class,name,ele,get,attribute,trim,try,string,parent,null,if,ele,has,attribute,parent,ele,get,attribute,abstract,bean,definition,bd,create,bean,definition,class,name,parent,parse,bean,definition,attributes,ele,bean,name,containing,bean,bd,bd,set,description,dom,utils,get,child,element,value,by,tag,name,ele,parse,meta,elements,ele,bd,parse,lookup,override,sub,elements,ele,bd,get,method,overrides,parse,replaced,method,sub,elements,ele,bd,get,method,overrides,parse,constructor,arg,elements,ele,bd,parse,property,elements,ele,bd,parse,qualifier,elements,ele,bd,bd,set,resource,this,reader,context,get,resource,bd,set,source,extract,source,ele,return,bd,catch,class,not,found,exception,ex,error,bean,class,class,name,not,found,ele,ex,catch,no,class,def,found,error,err,error,class,that,bean,class,class,name,depends,on,not,found,ele,err,catch,throwable,ex,error,unexpected,failure,during,bean,definition,parsing,ele,ex,finally,this,parse,state,pop,return,null
BeanDefinitionParserDelegate -> public AbstractBeanDefinition parseBeanDefinitionElement( 			Element ele, String beanName, BeanDefinition containingBean);1335774711;Parse the bean definition itself, without regard to name or aliases. May return_<code>null</code> if problems occured during the parse of the bean definition.;public AbstractBeanDefinition parseBeanDefinitionElement(_			Element ele, String beanName, BeanDefinition containingBean) {__		this.parseState.push(new BeanEntry(beanName))___		String className = null__		if (ele.hasAttribute(CLASS_ATTRIBUTE)) {_			className = ele.getAttribute(CLASS_ATTRIBUTE).trim()__		}__		try {_			String parent = null__			if (ele.hasAttribute(PARENT_ATTRIBUTE)) {_				parent = ele.getAttribute(PARENT_ATTRIBUTE)__			}_			AbstractBeanDefinition bd = createBeanDefinition(className, parent)___			parseBeanDefinitionAttributes(ele, beanName, containingBean, bd)__			bd.setDescription(DomUtils.getChildElementValueByTagName(ele, DESCRIPTION_ELEMENT))___			parseMetaElements(ele, bd)__			parseLookupOverrideSubElements(ele, bd.getMethodOverrides())__			parseReplacedMethodSubElements(ele, bd.getMethodOverrides())___			parseConstructorArgElements(ele, bd)__			parsePropertyElements(ele, bd)__			parseQualifierElements(ele, bd)___			bd.setResource(this.readerContext.getResource())__			bd.setSource(extractSource(ele))___			return bd__		}_		catch (ClassNotFoundException ex) {_			error("Bean class [" + className + "] not found", ele, ex)__		}_		catch (NoClassDefFoundError err) {_			error("Class that bean class [" + className + "] depends on not found", ele, err)__		}_		catch (Throwable ex) {_			error("Unexpected failure during bean definition parsing", ele, ex)__		}_		finally {_			this.parseState.pop()__		}__		return null__	};parse,the,bean,definition,itself,without,regard,to,name,or,aliases,may,return,code,null,code,if,problems,occured,during,the,parse,of,the,bean,definition;public,abstract,bean,definition,parse,bean,definition,element,element,ele,string,bean,name,bean,definition,containing,bean,this,parse,state,push,new,bean,entry,bean,name,string,class,name,null,if,ele,has,attribute,class,name,ele,get,attribute,trim,try,string,parent,null,if,ele,has,attribute,parent,ele,get,attribute,abstract,bean,definition,bd,create,bean,definition,class,name,parent,parse,bean,definition,attributes,ele,bean,name,containing,bean,bd,bd,set,description,dom,utils,get,child,element,value,by,tag,name,ele,parse,meta,elements,ele,bd,parse,lookup,override,sub,elements,ele,bd,get,method,overrides,parse,replaced,method,sub,elements,ele,bd,get,method,overrides,parse,constructor,arg,elements,ele,bd,parse,property,elements,ele,bd,parse,qualifier,elements,ele,bd,bd,set,resource,this,reader,context,get,resource,bd,set,source,extract,source,ele,return,bd,catch,class,not,found,exception,ex,error,bean,class,class,name,not,found,ele,ex,catch,no,class,def,found,error,err,error,class,that,bean,class,class,name,depends,on,not,found,ele,err,catch,throwable,ex,error,unexpected,failure,during,bean,definition,parsing,ele,ex,finally,this,parse,state,pop,return,null
BeanDefinitionParserDelegate -> public AbstractBeanDefinition parseBeanDefinitionElement( 			Element ele, String beanName, BeanDefinition containingBean);1337341719;Parse the bean definition itself, without regard to name or aliases. May return_<code>null</code> if problems occured during the parse of the bean definition.;public AbstractBeanDefinition parseBeanDefinitionElement(_			Element ele, String beanName, BeanDefinition containingBean) {__		this.parseState.push(new BeanEntry(beanName))___		String className = null__		if (ele.hasAttribute(CLASS_ATTRIBUTE)) {_			className = ele.getAttribute(CLASS_ATTRIBUTE).trim()__		}__		try {_			String parent = null__			if (ele.hasAttribute(PARENT_ATTRIBUTE)) {_				parent = ele.getAttribute(PARENT_ATTRIBUTE)__			}_			AbstractBeanDefinition bd = createBeanDefinition(className, parent)___			parseBeanDefinitionAttributes(ele, beanName, containingBean, bd)__			bd.setDescription(DomUtils.getChildElementValueByTagName(ele, DESCRIPTION_ELEMENT))___			parseMetaElements(ele, bd)__			parseLookupOverrideSubElements(ele, bd.getMethodOverrides())__			parseReplacedMethodSubElements(ele, bd.getMethodOverrides())___			parseConstructorArgElements(ele, bd)__			parsePropertyElements(ele, bd)__			parseQualifierElements(ele, bd)___			bd.setResource(this.readerContext.getResource())__			bd.setSource(extractSource(ele))___			return bd__		}_		catch (ClassNotFoundException ex) {_			error("Bean class [" + className + "] not found", ele, ex)__		}_		catch (NoClassDefFoundError err) {_			error("Class that bean class [" + className + "] depends on not found", ele, err)__		}_		catch (Throwable ex) {_			error("Unexpected failure during bean definition parsing", ele, ex)__		}_		finally {_			this.parseState.pop()__		}__		return null__	};parse,the,bean,definition,itself,without,regard,to,name,or,aliases,may,return,code,null,code,if,problems,occured,during,the,parse,of,the,bean,definition;public,abstract,bean,definition,parse,bean,definition,element,element,ele,string,bean,name,bean,definition,containing,bean,this,parse,state,push,new,bean,entry,bean,name,string,class,name,null,if,ele,has,attribute,class,name,ele,get,attribute,trim,try,string,parent,null,if,ele,has,attribute,parent,ele,get,attribute,abstract,bean,definition,bd,create,bean,definition,class,name,parent,parse,bean,definition,attributes,ele,bean,name,containing,bean,bd,bd,set,description,dom,utils,get,child,element,value,by,tag,name,ele,parse,meta,elements,ele,bd,parse,lookup,override,sub,elements,ele,bd,get,method,overrides,parse,replaced,method,sub,elements,ele,bd,get,method,overrides,parse,constructor,arg,elements,ele,bd,parse,property,elements,ele,bd,parse,qualifier,elements,ele,bd,bd,set,resource,this,reader,context,get,resource,bd,set,source,extract,source,ele,return,bd,catch,class,not,found,exception,ex,error,bean,class,class,name,not,found,ele,ex,catch,no,class,def,found,error,err,error,class,that,bean,class,class,name,depends,on,not,found,ele,err,catch,throwable,ex,error,unexpected,failure,during,bean,definition,parsing,ele,ex,finally,this,parse,state,pop,return,null
BeanDefinitionParserDelegate -> public AbstractBeanDefinition parseBeanDefinitionElement( 			Element ele, String beanName, BeanDefinition containingBean);1351392612;Parse the bean definition itself, without regard to name or aliases. May return_<code>null</code> if problems occured during the parse of the bean definition.;public AbstractBeanDefinition parseBeanDefinitionElement(_			Element ele, String beanName, BeanDefinition containingBean) {__		this.parseState.push(new BeanEntry(beanName))___		String className = null__		if (ele.hasAttribute(CLASS_ATTRIBUTE)) {_			className = ele.getAttribute(CLASS_ATTRIBUTE).trim()__		}__		try {_			String parent = null__			if (ele.hasAttribute(PARENT_ATTRIBUTE)) {_				parent = ele.getAttribute(PARENT_ATTRIBUTE)__			}_			AbstractBeanDefinition bd = createBeanDefinition(className, parent)___			parseBeanDefinitionAttributes(ele, beanName, containingBean, bd)__			bd.setDescription(DomUtils.getChildElementValueByTagName(ele, DESCRIPTION_ELEMENT))___			parseMetaElements(ele, bd)__			parseLookupOverrideSubElements(ele, bd.getMethodOverrides())__			parseReplacedMethodSubElements(ele, bd.getMethodOverrides())___			parseConstructorArgElements(ele, bd)__			parsePropertyElements(ele, bd)__			parseQualifierElements(ele, bd)___			bd.setResource(this.readerContext.getResource())__			bd.setSource(extractSource(ele))___			return bd__		}_		catch (ClassNotFoundException ex) {_			error("Bean class [" + className + "] not found", ele, ex)__		}_		catch (NoClassDefFoundError err) {_			error("Class that bean class [" + className + "] depends on not found", ele, err)__		}_		catch (Throwable ex) {_			error("Unexpected failure during bean definition parsing", ele, ex)__		}_		finally {_			this.parseState.pop()__		}__		return null__	};parse,the,bean,definition,itself,without,regard,to,name,or,aliases,may,return,code,null,code,if,problems,occured,during,the,parse,of,the,bean,definition;public,abstract,bean,definition,parse,bean,definition,element,element,ele,string,bean,name,bean,definition,containing,bean,this,parse,state,push,new,bean,entry,bean,name,string,class,name,null,if,ele,has,attribute,class,name,ele,get,attribute,trim,try,string,parent,null,if,ele,has,attribute,parent,ele,get,attribute,abstract,bean,definition,bd,create,bean,definition,class,name,parent,parse,bean,definition,attributes,ele,bean,name,containing,bean,bd,bd,set,description,dom,utils,get,child,element,value,by,tag,name,ele,parse,meta,elements,ele,bd,parse,lookup,override,sub,elements,ele,bd,get,method,overrides,parse,replaced,method,sub,elements,ele,bd,get,method,overrides,parse,constructor,arg,elements,ele,bd,parse,property,elements,ele,bd,parse,qualifier,elements,ele,bd,bd,set,resource,this,reader,context,get,resource,bd,set,source,extract,source,ele,return,bd,catch,class,not,found,exception,ex,error,bean,class,class,name,not,found,ele,ex,catch,no,class,def,found,error,err,error,class,that,bean,class,class,name,depends,on,not,found,ele,err,catch,throwable,ex,error,unexpected,failure,during,bean,definition,parsing,ele,ex,finally,this,parse,state,pop,return,null
BeanDefinitionParserDelegate -> public AbstractBeanDefinition parseBeanDefinitionElement( 			Element ele, String beanName, BeanDefinition containingBean);1351696936;Parse the bean definition itself, without regard to name or aliases. May return_<code>null</code> if problems occurred during the parsing of the bean definition.;public AbstractBeanDefinition parseBeanDefinitionElement(_			Element ele, String beanName, BeanDefinition containingBean) {__		this.parseState.push(new BeanEntry(beanName))___		String className = null__		if (ele.hasAttribute(CLASS_ATTRIBUTE)) {_			className = ele.getAttribute(CLASS_ATTRIBUTE).trim()__		}__		try {_			String parent = null__			if (ele.hasAttribute(PARENT_ATTRIBUTE)) {_				parent = ele.getAttribute(PARENT_ATTRIBUTE)__			}_			AbstractBeanDefinition bd = createBeanDefinition(className, parent)___			parseBeanDefinitionAttributes(ele, beanName, containingBean, bd)__			bd.setDescription(DomUtils.getChildElementValueByTagName(ele, DESCRIPTION_ELEMENT))___			parseMetaElements(ele, bd)__			parseLookupOverrideSubElements(ele, bd.getMethodOverrides())__			parseReplacedMethodSubElements(ele, bd.getMethodOverrides())___			parseConstructorArgElements(ele, bd)__			parsePropertyElements(ele, bd)__			parseQualifierElements(ele, bd)___			bd.setResource(this.readerContext.getResource())__			bd.setSource(extractSource(ele))___			return bd__		}_		catch (ClassNotFoundException ex) {_			error("Bean class [" + className + "] not found", ele, ex)__		}_		catch (NoClassDefFoundError err) {_			error("Class that bean class [" + className + "] depends on not found", ele, err)__		}_		catch (Throwable ex) {_			error("Unexpected failure during bean definition parsing", ele, ex)__		}_		finally {_			this.parseState.pop()__		}__		return null__	};parse,the,bean,definition,itself,without,regard,to,name,or,aliases,may,return,code,null,code,if,problems,occurred,during,the,parsing,of,the,bean,definition;public,abstract,bean,definition,parse,bean,definition,element,element,ele,string,bean,name,bean,definition,containing,bean,this,parse,state,push,new,bean,entry,bean,name,string,class,name,null,if,ele,has,attribute,class,name,ele,get,attribute,trim,try,string,parent,null,if,ele,has,attribute,parent,ele,get,attribute,abstract,bean,definition,bd,create,bean,definition,class,name,parent,parse,bean,definition,attributes,ele,bean,name,containing,bean,bd,bd,set,description,dom,utils,get,child,element,value,by,tag,name,ele,parse,meta,elements,ele,bd,parse,lookup,override,sub,elements,ele,bd,get,method,overrides,parse,replaced,method,sub,elements,ele,bd,get,method,overrides,parse,constructor,arg,elements,ele,bd,parse,property,elements,ele,bd,parse,qualifier,elements,ele,bd,bd,set,resource,this,reader,context,get,resource,bd,set,source,extract,source,ele,return,bd,catch,class,not,found,exception,ex,error,bean,class,class,name,not,found,ele,ex,catch,no,class,def,found,error,err,error,class,that,bean,class,class,name,depends,on,not,found,ele,err,catch,throwable,ex,error,unexpected,failure,during,bean,definition,parsing,ele,ex,finally,this,parse,state,pop,return,null
BeanDefinitionParserDelegate -> public AbstractBeanDefinition parseBeanDefinitionElement( 			Element ele, String beanName, BeanDefinition containingBean);1356735495;Parse the bean definition itself, without regard to name or aliases. May return_{@code null} if problems occurred during the parsing of the bean definition.;public AbstractBeanDefinition parseBeanDefinitionElement(_			Element ele, String beanName, BeanDefinition containingBean) {__		this.parseState.push(new BeanEntry(beanName))___		String className = null__		if (ele.hasAttribute(CLASS_ATTRIBUTE)) {_			className = ele.getAttribute(CLASS_ATTRIBUTE).trim()__		}__		try {_			String parent = null__			if (ele.hasAttribute(PARENT_ATTRIBUTE)) {_				parent = ele.getAttribute(PARENT_ATTRIBUTE)__			}_			AbstractBeanDefinition bd = createBeanDefinition(className, parent)___			parseBeanDefinitionAttributes(ele, beanName, containingBean, bd)__			bd.setDescription(DomUtils.getChildElementValueByTagName(ele, DESCRIPTION_ELEMENT))___			parseMetaElements(ele, bd)__			parseLookupOverrideSubElements(ele, bd.getMethodOverrides())__			parseReplacedMethodSubElements(ele, bd.getMethodOverrides())___			parseConstructorArgElements(ele, bd)__			parsePropertyElements(ele, bd)__			parseQualifierElements(ele, bd)___			bd.setResource(this.readerContext.getResource())__			bd.setSource(extractSource(ele))___			return bd__		}_		catch (ClassNotFoundException ex) {_			error("Bean class [" + className + "] not found", ele, ex)__		}_		catch (NoClassDefFoundError err) {_			error("Class that bean class [" + className + "] depends on not found", ele, err)__		}_		catch (Throwable ex) {_			error("Unexpected failure during bean definition parsing", ele, ex)__		}_		finally {_			this.parseState.pop()__		}__		return null__	};parse,the,bean,definition,itself,without,regard,to,name,or,aliases,may,return,code,null,if,problems,occurred,during,the,parsing,of,the,bean,definition;public,abstract,bean,definition,parse,bean,definition,element,element,ele,string,bean,name,bean,definition,containing,bean,this,parse,state,push,new,bean,entry,bean,name,string,class,name,null,if,ele,has,attribute,class,name,ele,get,attribute,trim,try,string,parent,null,if,ele,has,attribute,parent,ele,get,attribute,abstract,bean,definition,bd,create,bean,definition,class,name,parent,parse,bean,definition,attributes,ele,bean,name,containing,bean,bd,bd,set,description,dom,utils,get,child,element,value,by,tag,name,ele,parse,meta,elements,ele,bd,parse,lookup,override,sub,elements,ele,bd,get,method,overrides,parse,replaced,method,sub,elements,ele,bd,get,method,overrides,parse,constructor,arg,elements,ele,bd,parse,property,elements,ele,bd,parse,qualifier,elements,ele,bd,bd,set,resource,this,reader,context,get,resource,bd,set,source,extract,source,ele,return,bd,catch,class,not,found,exception,ex,error,bean,class,class,name,not,found,ele,ex,catch,no,class,def,found,error,err,error,class,that,bean,class,class,name,depends,on,not,found,ele,err,catch,throwable,ex,error,unexpected,failure,during,bean,definition,parsing,ele,ex,finally,this,parse,state,pop,return,null
BeanDefinitionParserDelegate -> public AbstractBeanDefinition parseBeanDefinitionElement( 			Element ele, String beanName, BeanDefinition containingBean);1357119417;Parse the bean definition itself, without regard to name or aliases. May return_{@code null} if problems occurred during the parsing of the bean definition.;public AbstractBeanDefinition parseBeanDefinitionElement(_			Element ele, String beanName, BeanDefinition containingBean) {__		this.parseState.push(new BeanEntry(beanName))___		String className = null__		if (ele.hasAttribute(CLASS_ATTRIBUTE)) {_			className = ele.getAttribute(CLASS_ATTRIBUTE).trim()__		}__		try {_			String parent = null__			if (ele.hasAttribute(PARENT_ATTRIBUTE)) {_				parent = ele.getAttribute(PARENT_ATTRIBUTE)__			}_			AbstractBeanDefinition bd = createBeanDefinition(className, parent)___			parseBeanDefinitionAttributes(ele, beanName, containingBean, bd)__			bd.setDescription(DomUtils.getChildElementValueByTagName(ele, DESCRIPTION_ELEMENT))___			parseMetaElements(ele, bd)__			parseLookupOverrideSubElements(ele, bd.getMethodOverrides())__			parseReplacedMethodSubElements(ele, bd.getMethodOverrides())___			parseConstructorArgElements(ele, bd)__			parsePropertyElements(ele, bd)__			parseQualifierElements(ele, bd)___			bd.setResource(this.readerContext.getResource())__			bd.setSource(extractSource(ele))___			return bd__		}_		catch (ClassNotFoundException ex) {_			error("Bean class [" + className + "] not found", ele, ex)__		}_		catch (NoClassDefFoundError err) {_			error("Class that bean class [" + className + "] depends on not found", ele, err)__		}_		catch (Throwable ex) {_			error("Unexpected failure during bean definition parsing", ele, ex)__		}_		finally {_			this.parseState.pop()__		}__		return null__	};parse,the,bean,definition,itself,without,regard,to,name,or,aliases,may,return,code,null,if,problems,occurred,during,the,parsing,of,the,bean,definition;public,abstract,bean,definition,parse,bean,definition,element,element,ele,string,bean,name,bean,definition,containing,bean,this,parse,state,push,new,bean,entry,bean,name,string,class,name,null,if,ele,has,attribute,class,name,ele,get,attribute,trim,try,string,parent,null,if,ele,has,attribute,parent,ele,get,attribute,abstract,bean,definition,bd,create,bean,definition,class,name,parent,parse,bean,definition,attributes,ele,bean,name,containing,bean,bd,bd,set,description,dom,utils,get,child,element,value,by,tag,name,ele,parse,meta,elements,ele,bd,parse,lookup,override,sub,elements,ele,bd,get,method,overrides,parse,replaced,method,sub,elements,ele,bd,get,method,overrides,parse,constructor,arg,elements,ele,bd,parse,property,elements,ele,bd,parse,qualifier,elements,ele,bd,bd,set,resource,this,reader,context,get,resource,bd,set,source,extract,source,ele,return,bd,catch,class,not,found,exception,ex,error,bean,class,class,name,not,found,ele,ex,catch,no,class,def,found,error,err,error,class,that,bean,class,class,name,depends,on,not,found,ele,err,catch,throwable,ex,error,unexpected,failure,during,bean,definition,parsing,ele,ex,finally,this,parse,state,pop,return,null
BeanDefinitionParserDelegate -> public AbstractBeanDefinition parseBeanDefinitionElement( 			Element ele, String beanName, BeanDefinition containingBean);1367943112;Parse the bean definition itself, without regard to name or aliases. May return_{@code null} if problems occurred during the parsing of the bean definition.;public AbstractBeanDefinition parseBeanDefinitionElement(_			Element ele, String beanName, BeanDefinition containingBean) {__		this.parseState.push(new BeanEntry(beanName))___		String className = null__		if (ele.hasAttribute(CLASS_ATTRIBUTE)) {_			className = ele.getAttribute(CLASS_ATTRIBUTE).trim()__		}__		try {_			String parent = null__			if (ele.hasAttribute(PARENT_ATTRIBUTE)) {_				parent = ele.getAttribute(PARENT_ATTRIBUTE)__			}_			AbstractBeanDefinition bd = createBeanDefinition(className, parent)___			parseBeanDefinitionAttributes(ele, beanName, containingBean, bd)__			bd.setDescription(DomUtils.getChildElementValueByTagName(ele, DESCRIPTION_ELEMENT))___			parseMetaElements(ele, bd)__			parseLookupOverrideSubElements(ele, bd.getMethodOverrides())__			parseReplacedMethodSubElements(ele, bd.getMethodOverrides())___			parseConstructorArgElements(ele, bd)__			parsePropertyElements(ele, bd)__			parseQualifierElements(ele, bd)___			bd.setResource(this.readerContext.getResource())__			bd.setSource(extractSource(ele))___			return bd__		}_		catch (ClassNotFoundException ex) {_			error("Bean class [" + className + "] not found", ele, ex)__		}_		catch (NoClassDefFoundError err) {_			error("Class that bean class [" + className + "] depends on not found", ele, err)__		}_		catch (Throwable ex) {_			error("Unexpected failure during bean definition parsing", ele, ex)__		}_		finally {_			this.parseState.pop()__		}__		return null__	};parse,the,bean,definition,itself,without,regard,to,name,or,aliases,may,return,code,null,if,problems,occurred,during,the,parsing,of,the,bean,definition;public,abstract,bean,definition,parse,bean,definition,element,element,ele,string,bean,name,bean,definition,containing,bean,this,parse,state,push,new,bean,entry,bean,name,string,class,name,null,if,ele,has,attribute,class,name,ele,get,attribute,trim,try,string,parent,null,if,ele,has,attribute,parent,ele,get,attribute,abstract,bean,definition,bd,create,bean,definition,class,name,parent,parse,bean,definition,attributes,ele,bean,name,containing,bean,bd,bd,set,description,dom,utils,get,child,element,value,by,tag,name,ele,parse,meta,elements,ele,bd,parse,lookup,override,sub,elements,ele,bd,get,method,overrides,parse,replaced,method,sub,elements,ele,bd,get,method,overrides,parse,constructor,arg,elements,ele,bd,parse,property,elements,ele,bd,parse,qualifier,elements,ele,bd,bd,set,resource,this,reader,context,get,resource,bd,set,source,extract,source,ele,return,bd,catch,class,not,found,exception,ex,error,bean,class,class,name,not,found,ele,ex,catch,no,class,def,found,error,err,error,class,that,bean,class,class,name,depends,on,not,found,ele,err,catch,throwable,ex,error,unexpected,failure,during,bean,definition,parsing,ele,ex,finally,this,parse,state,pop,return,null
BeanDefinitionParserDelegate -> public AbstractBeanDefinition parseBeanDefinitionElement( 			Element ele, String beanName, BeanDefinition containingBean);1382030648;Parse the bean definition itself, without regard to name or aliases. May return_{@code null} if problems occurred during the parsing of the bean definition.;public AbstractBeanDefinition parseBeanDefinitionElement(_			Element ele, String beanName, BeanDefinition containingBean) {__		this.parseState.push(new BeanEntry(beanName))___		String className = null__		if (ele.hasAttribute(CLASS_ATTRIBUTE)) {_			className = ele.getAttribute(CLASS_ATTRIBUTE).trim()__		}__		try {_			String parent = null__			if (ele.hasAttribute(PARENT_ATTRIBUTE)) {_				parent = ele.getAttribute(PARENT_ATTRIBUTE)__			}_			AbstractBeanDefinition bd = createBeanDefinition(className, parent)___			parseBeanDefinitionAttributes(ele, beanName, containingBean, bd)__			bd.setDescription(DomUtils.getChildElementValueByTagName(ele, DESCRIPTION_ELEMENT))___			parseMetaElements(ele, bd)__			parseLookupOverrideSubElements(ele, bd.getMethodOverrides())__			parseReplacedMethodSubElements(ele, bd.getMethodOverrides())___			parseConstructorArgElements(ele, bd)__			parsePropertyElements(ele, bd)__			parseQualifierElements(ele, bd)___			bd.setResource(this.readerContext.getResource())__			bd.setSource(extractSource(ele))___			return bd__		}_		catch (ClassNotFoundException ex) {_			error("Bean class [" + className + "] not found", ele, ex)__		}_		catch (NoClassDefFoundError err) {_			error("Class that bean class [" + className + "] depends on not found", ele, err)__		}_		catch (Throwable ex) {_			error("Unexpected failure during bean definition parsing", ele, ex)__		}_		finally {_			this.parseState.pop()__		}__		return null__	};parse,the,bean,definition,itself,without,regard,to,name,or,aliases,may,return,code,null,if,problems,occurred,during,the,parsing,of,the,bean,definition;public,abstract,bean,definition,parse,bean,definition,element,element,ele,string,bean,name,bean,definition,containing,bean,this,parse,state,push,new,bean,entry,bean,name,string,class,name,null,if,ele,has,attribute,class,name,ele,get,attribute,trim,try,string,parent,null,if,ele,has,attribute,parent,ele,get,attribute,abstract,bean,definition,bd,create,bean,definition,class,name,parent,parse,bean,definition,attributes,ele,bean,name,containing,bean,bd,bd,set,description,dom,utils,get,child,element,value,by,tag,name,ele,parse,meta,elements,ele,bd,parse,lookup,override,sub,elements,ele,bd,get,method,overrides,parse,replaced,method,sub,elements,ele,bd,get,method,overrides,parse,constructor,arg,elements,ele,bd,parse,property,elements,ele,bd,parse,qualifier,elements,ele,bd,bd,set,resource,this,reader,context,get,resource,bd,set,source,extract,source,ele,return,bd,catch,class,not,found,exception,ex,error,bean,class,class,name,not,found,ele,ex,catch,no,class,def,found,error,err,error,class,that,bean,class,class,name,depends,on,not,found,ele,err,catch,throwable,ex,error,unexpected,failure,during,bean,definition,parsing,ele,ex,finally,this,parse,state,pop,return,null
BeanDefinitionParserDelegate -> public AbstractBeanDefinition parseBeanDefinitionElement( 			Element ele, String beanName, BeanDefinition containingBean);1385412762;Parse the bean definition itself, without regard to name or aliases. May return_{@code null} if problems occurred during the parsing of the bean definition.;public AbstractBeanDefinition parseBeanDefinitionElement(_			Element ele, String beanName, BeanDefinition containingBean) {__		this.parseState.push(new BeanEntry(beanName))___		String className = null__		if (ele.hasAttribute(CLASS_ATTRIBUTE)) {_			className = ele.getAttribute(CLASS_ATTRIBUTE).trim()__		}__		try {_			String parent = null__			if (ele.hasAttribute(PARENT_ATTRIBUTE)) {_				parent = ele.getAttribute(PARENT_ATTRIBUTE)__			}_			AbstractBeanDefinition bd = createBeanDefinition(className, parent)___			parseBeanDefinitionAttributes(ele, beanName, containingBean, bd)__			bd.setDescription(DomUtils.getChildElementValueByTagName(ele, DESCRIPTION_ELEMENT))___			parseMetaElements(ele, bd)__			parseLookupOverrideSubElements(ele, bd.getMethodOverrides())__			parseReplacedMethodSubElements(ele, bd.getMethodOverrides())___			parseConstructorArgElements(ele, bd)__			parsePropertyElements(ele, bd)__			parseQualifierElements(ele, bd)___			bd.setResource(this.readerContext.getResource())__			bd.setSource(extractSource(ele))___			return bd__		}_		catch (ClassNotFoundException ex) {_			error("Bean class [" + className + "] not found", ele, ex)__		}_		catch (NoClassDefFoundError err) {_			error("Class that bean class [" + className + "] depends on not found", ele, err)__		}_		catch (Throwable ex) {_			error("Unexpected failure during bean definition parsing", ele, ex)__		}_		finally {_			this.parseState.pop()__		}__		return null__	};parse,the,bean,definition,itself,without,regard,to,name,or,aliases,may,return,code,null,if,problems,occurred,during,the,parsing,of,the,bean,definition;public,abstract,bean,definition,parse,bean,definition,element,element,ele,string,bean,name,bean,definition,containing,bean,this,parse,state,push,new,bean,entry,bean,name,string,class,name,null,if,ele,has,attribute,class,name,ele,get,attribute,trim,try,string,parent,null,if,ele,has,attribute,parent,ele,get,attribute,abstract,bean,definition,bd,create,bean,definition,class,name,parent,parse,bean,definition,attributes,ele,bean,name,containing,bean,bd,bd,set,description,dom,utils,get,child,element,value,by,tag,name,ele,parse,meta,elements,ele,bd,parse,lookup,override,sub,elements,ele,bd,get,method,overrides,parse,replaced,method,sub,elements,ele,bd,get,method,overrides,parse,constructor,arg,elements,ele,bd,parse,property,elements,ele,bd,parse,qualifier,elements,ele,bd,bd,set,resource,this,reader,context,get,resource,bd,set,source,extract,source,ele,return,bd,catch,class,not,found,exception,ex,error,bean,class,class,name,not,found,ele,ex,catch,no,class,def,found,error,err,error,class,that,bean,class,class,name,depends,on,not,found,ele,err,catch,throwable,ex,error,unexpected,failure,during,bean,definition,parsing,ele,ex,finally,this,parse,state,pop,return,null
BeanDefinitionParserDelegate -> public AbstractBeanDefinition parseBeanDefinitionElement( 			Element ele, String beanName, BeanDefinition containingBean);1410953197;Parse the bean definition itself, without regard to name or aliases. May return_{@code null} if problems occurred during the parsing of the bean definition.;public AbstractBeanDefinition parseBeanDefinitionElement(_			Element ele, String beanName, BeanDefinition containingBean) {__		this.parseState.push(new BeanEntry(beanName))___		String className = null__		if (ele.hasAttribute(CLASS_ATTRIBUTE)) {_			className = ele.getAttribute(CLASS_ATTRIBUTE).trim()__		}__		try {_			String parent = null__			if (ele.hasAttribute(PARENT_ATTRIBUTE)) {_				parent = ele.getAttribute(PARENT_ATTRIBUTE)__			}_			AbstractBeanDefinition bd = createBeanDefinition(className, parent)___			parseBeanDefinitionAttributes(ele, beanName, containingBean, bd)__			bd.setDescription(DomUtils.getChildElementValueByTagName(ele, DESCRIPTION_ELEMENT))___			parseMetaElements(ele, bd)__			parseLookupOverrideSubElements(ele, bd.getMethodOverrides())__			parseReplacedMethodSubElements(ele, bd.getMethodOverrides())___			parseConstructorArgElements(ele, bd)__			parsePropertyElements(ele, bd)__			parseQualifierElements(ele, bd)___			bd.setResource(this.readerContext.getResource())__			bd.setSource(extractSource(ele))___			return bd__		}_		catch (ClassNotFoundException ex) {_			error("Bean class [" + className + "] not found", ele, ex)__		}_		catch (NoClassDefFoundError err) {_			error("Class that bean class [" + className + "] depends on not found", ele, err)__		}_		catch (Throwable ex) {_			error("Unexpected failure during bean definition parsing", ele, ex)__		}_		finally {_			this.parseState.pop()__		}__		return null__	};parse,the,bean,definition,itself,without,regard,to,name,or,aliases,may,return,code,null,if,problems,occurred,during,the,parsing,of,the,bean,definition;public,abstract,bean,definition,parse,bean,definition,element,element,ele,string,bean,name,bean,definition,containing,bean,this,parse,state,push,new,bean,entry,bean,name,string,class,name,null,if,ele,has,attribute,class,name,ele,get,attribute,trim,try,string,parent,null,if,ele,has,attribute,parent,ele,get,attribute,abstract,bean,definition,bd,create,bean,definition,class,name,parent,parse,bean,definition,attributes,ele,bean,name,containing,bean,bd,bd,set,description,dom,utils,get,child,element,value,by,tag,name,ele,parse,meta,elements,ele,bd,parse,lookup,override,sub,elements,ele,bd,get,method,overrides,parse,replaced,method,sub,elements,ele,bd,get,method,overrides,parse,constructor,arg,elements,ele,bd,parse,property,elements,ele,bd,parse,qualifier,elements,ele,bd,bd,set,resource,this,reader,context,get,resource,bd,set,source,extract,source,ele,return,bd,catch,class,not,found,exception,ex,error,bean,class,class,name,not,found,ele,ex,catch,no,class,def,found,error,err,error,class,that,bean,class,class,name,depends,on,not,found,ele,err,catch,throwable,ex,error,unexpected,failure,during,bean,definition,parsing,ele,ex,finally,this,parse,state,pop,return,null
BeanDefinitionParserDelegate -> public AbstractBeanDefinition parseBeanDefinitionElement( 			Element ele, String beanName, BeanDefinition containingBean);1411599760;Parse the bean definition itself, without regard to name or aliases. May return_{@code null} if problems occurred during the parsing of the bean definition.;public AbstractBeanDefinition parseBeanDefinitionElement(_			Element ele, String beanName, BeanDefinition containingBean) {__		this.parseState.push(new BeanEntry(beanName))___		String className = null__		if (ele.hasAttribute(CLASS_ATTRIBUTE)) {_			className = ele.getAttribute(CLASS_ATTRIBUTE).trim()__		}__		try {_			String parent = null__			if (ele.hasAttribute(PARENT_ATTRIBUTE)) {_				parent = ele.getAttribute(PARENT_ATTRIBUTE)__			}_			AbstractBeanDefinition bd = createBeanDefinition(className, parent)___			parseBeanDefinitionAttributes(ele, beanName, containingBean, bd)__			bd.setDescription(DomUtils.getChildElementValueByTagName(ele, DESCRIPTION_ELEMENT))___			parseMetaElements(ele, bd)__			parseLookupOverrideSubElements(ele, bd.getMethodOverrides())__			parseReplacedMethodSubElements(ele, bd.getMethodOverrides())___			parseConstructorArgElements(ele, bd)__			parsePropertyElements(ele, bd)__			parseQualifierElements(ele, bd)___			bd.setResource(this.readerContext.getResource())__			bd.setSource(extractSource(ele))___			return bd__		}_		catch (ClassNotFoundException ex) {_			error("Bean class [" + className + "] not found", ele, ex)__		}_		catch (NoClassDefFoundError err) {_			error("Class that bean class [" + className + "] depends on not found", ele, err)__		}_		catch (Throwable ex) {_			error("Unexpected failure during bean definition parsing", ele, ex)__		}_		finally {_			this.parseState.pop()__		}__		return null__	};parse,the,bean,definition,itself,without,regard,to,name,or,aliases,may,return,code,null,if,problems,occurred,during,the,parsing,of,the,bean,definition;public,abstract,bean,definition,parse,bean,definition,element,element,ele,string,bean,name,bean,definition,containing,bean,this,parse,state,push,new,bean,entry,bean,name,string,class,name,null,if,ele,has,attribute,class,name,ele,get,attribute,trim,try,string,parent,null,if,ele,has,attribute,parent,ele,get,attribute,abstract,bean,definition,bd,create,bean,definition,class,name,parent,parse,bean,definition,attributes,ele,bean,name,containing,bean,bd,bd,set,description,dom,utils,get,child,element,value,by,tag,name,ele,parse,meta,elements,ele,bd,parse,lookup,override,sub,elements,ele,bd,get,method,overrides,parse,replaced,method,sub,elements,ele,bd,get,method,overrides,parse,constructor,arg,elements,ele,bd,parse,property,elements,ele,bd,parse,qualifier,elements,ele,bd,bd,set,resource,this,reader,context,get,resource,bd,set,source,extract,source,ele,return,bd,catch,class,not,found,exception,ex,error,bean,class,class,name,not,found,ele,ex,catch,no,class,def,found,error,err,error,class,that,bean,class,class,name,depends,on,not,found,ele,err,catch,throwable,ex,error,unexpected,failure,during,bean,definition,parsing,ele,ex,finally,this,parse,state,pop,return,null
BeanDefinitionParserDelegate -> public AbstractBeanDefinition parseBeanDefinitionElement( 			Element ele, String beanName, BeanDefinition containingBean);1419966315;Parse the bean definition itself, without regard to name or aliases. May return_{@code null} if problems occurred during the parsing of the bean definition.;public AbstractBeanDefinition parseBeanDefinitionElement(_			Element ele, String beanName, BeanDefinition containingBean) {__		this.parseState.push(new BeanEntry(beanName))___		String className = null__		if (ele.hasAttribute(CLASS_ATTRIBUTE)) {_			className = ele.getAttribute(CLASS_ATTRIBUTE).trim()__		}__		try {_			String parent = null__			if (ele.hasAttribute(PARENT_ATTRIBUTE)) {_				parent = ele.getAttribute(PARENT_ATTRIBUTE)__			}_			AbstractBeanDefinition bd = createBeanDefinition(className, parent)___			parseBeanDefinitionAttributes(ele, beanName, containingBean, bd)__			bd.setDescription(DomUtils.getChildElementValueByTagName(ele, DESCRIPTION_ELEMENT))___			parseMetaElements(ele, bd)__			parseLookupOverrideSubElements(ele, bd.getMethodOverrides())__			parseReplacedMethodSubElements(ele, bd.getMethodOverrides())___			parseConstructorArgElements(ele, bd)__			parsePropertyElements(ele, bd)__			parseQualifierElements(ele, bd)___			bd.setResource(this.readerContext.getResource())__			bd.setSource(extractSource(ele))___			return bd__		}_		catch (ClassNotFoundException ex) {_			error("Bean class [" + className + "] not found", ele, ex)__		}_		catch (NoClassDefFoundError err) {_			error("Class that bean class [" + className + "] depends on not found", ele, err)__		}_		catch (Throwable ex) {_			error("Unexpected failure during bean definition parsing", ele, ex)__		}_		finally {_			this.parseState.pop()__		}__		return null__	};parse,the,bean,definition,itself,without,regard,to,name,or,aliases,may,return,code,null,if,problems,occurred,during,the,parsing,of,the,bean,definition;public,abstract,bean,definition,parse,bean,definition,element,element,ele,string,bean,name,bean,definition,containing,bean,this,parse,state,push,new,bean,entry,bean,name,string,class,name,null,if,ele,has,attribute,class,name,ele,get,attribute,trim,try,string,parent,null,if,ele,has,attribute,parent,ele,get,attribute,abstract,bean,definition,bd,create,bean,definition,class,name,parent,parse,bean,definition,attributes,ele,bean,name,containing,bean,bd,bd,set,description,dom,utils,get,child,element,value,by,tag,name,ele,parse,meta,elements,ele,bd,parse,lookup,override,sub,elements,ele,bd,get,method,overrides,parse,replaced,method,sub,elements,ele,bd,get,method,overrides,parse,constructor,arg,elements,ele,bd,parse,property,elements,ele,bd,parse,qualifier,elements,ele,bd,bd,set,resource,this,reader,context,get,resource,bd,set,source,extract,source,ele,return,bd,catch,class,not,found,exception,ex,error,bean,class,class,name,not,found,ele,ex,catch,no,class,def,found,error,err,error,class,that,bean,class,class,name,depends,on,not,found,ele,err,catch,throwable,ex,error,unexpected,failure,during,bean,definition,parsing,ele,ex,finally,this,parse,state,pop,return,null
BeanDefinitionParserDelegate -> public AbstractBeanDefinition parseBeanDefinitionElement( 			Element ele, String beanName, BeanDefinition containingBean);1431958785;Parse the bean definition itself, without regard to name or aliases. May return_{@code null} if problems occurred during the parsing of the bean definition.;public AbstractBeanDefinition parseBeanDefinitionElement(_			Element ele, String beanName, BeanDefinition containingBean) {__		this.parseState.push(new BeanEntry(beanName))___		String className = null__		if (ele.hasAttribute(CLASS_ATTRIBUTE)) {_			className = ele.getAttribute(CLASS_ATTRIBUTE).trim()__		}__		try {_			String parent = null__			if (ele.hasAttribute(PARENT_ATTRIBUTE)) {_				parent = ele.getAttribute(PARENT_ATTRIBUTE)__			}_			AbstractBeanDefinition bd = createBeanDefinition(className, parent)___			parseBeanDefinitionAttributes(ele, beanName, containingBean, bd)__			bd.setDescription(DomUtils.getChildElementValueByTagName(ele, DESCRIPTION_ELEMENT))___			parseMetaElements(ele, bd)__			parseLookupOverrideSubElements(ele, bd.getMethodOverrides())__			parseReplacedMethodSubElements(ele, bd.getMethodOverrides())___			parseConstructorArgElements(ele, bd)__			parsePropertyElements(ele, bd)__			parseQualifierElements(ele, bd)___			bd.setResource(this.readerContext.getResource())__			bd.setSource(extractSource(ele))___			return bd__		}_		catch (ClassNotFoundException ex) {_			error("Bean class [" + className + "] not found", ele, ex)__		}_		catch (NoClassDefFoundError err) {_			error("Class that bean class [" + className + "] depends on not found", ele, err)__		}_		catch (Throwable ex) {_			error("Unexpected failure during bean definition parsing", ele, ex)__		}_		finally {_			this.parseState.pop()__		}__		return null__	};parse,the,bean,definition,itself,without,regard,to,name,or,aliases,may,return,code,null,if,problems,occurred,during,the,parsing,of,the,bean,definition;public,abstract,bean,definition,parse,bean,definition,element,element,ele,string,bean,name,bean,definition,containing,bean,this,parse,state,push,new,bean,entry,bean,name,string,class,name,null,if,ele,has,attribute,class,name,ele,get,attribute,trim,try,string,parent,null,if,ele,has,attribute,parent,ele,get,attribute,abstract,bean,definition,bd,create,bean,definition,class,name,parent,parse,bean,definition,attributes,ele,bean,name,containing,bean,bd,bd,set,description,dom,utils,get,child,element,value,by,tag,name,ele,parse,meta,elements,ele,bd,parse,lookup,override,sub,elements,ele,bd,get,method,overrides,parse,replaced,method,sub,elements,ele,bd,get,method,overrides,parse,constructor,arg,elements,ele,bd,parse,property,elements,ele,bd,parse,qualifier,elements,ele,bd,bd,set,resource,this,reader,context,get,resource,bd,set,source,extract,source,ele,return,bd,catch,class,not,found,exception,ex,error,bean,class,class,name,not,found,ele,ex,catch,no,class,def,found,error,err,error,class,that,bean,class,class,name,depends,on,not,found,ele,err,catch,throwable,ex,error,unexpected,failure,during,bean,definition,parsing,ele,ex,finally,this,parse,state,pop,return,null
BeanDefinitionParserDelegate -> public AbstractBeanDefinition parseBeanDefinitionElement( 			Element ele, String beanName, BeanDefinition containingBean);1432135182;Parse the bean definition itself, without regard to name or aliases. May return_{@code null} if problems occurred during the parsing of the bean definition.;public AbstractBeanDefinition parseBeanDefinitionElement(_			Element ele, String beanName, BeanDefinition containingBean) {__		this.parseState.push(new BeanEntry(beanName))___		String className = null__		if (ele.hasAttribute(CLASS_ATTRIBUTE)) {_			className = ele.getAttribute(CLASS_ATTRIBUTE).trim()__		}__		try {_			String parent = null__			if (ele.hasAttribute(PARENT_ATTRIBUTE)) {_				parent = ele.getAttribute(PARENT_ATTRIBUTE)__			}_			AbstractBeanDefinition bd = createBeanDefinition(className, parent)___			parseBeanDefinitionAttributes(ele, beanName, containingBean, bd)__			bd.setDescription(DomUtils.getChildElementValueByTagName(ele, DESCRIPTION_ELEMENT))___			parseMetaElements(ele, bd)__			parseLookupOverrideSubElements(ele, bd.getMethodOverrides())__			parseReplacedMethodSubElements(ele, bd.getMethodOverrides())___			parseConstructorArgElements(ele, bd)__			parsePropertyElements(ele, bd)__			parseQualifierElements(ele, bd)___			bd.setResource(this.readerContext.getResource())__			bd.setSource(extractSource(ele))___			return bd__		}_		catch (ClassNotFoundException ex) {_			error("Bean class [" + className + "] not found", ele, ex)__		}_		catch (NoClassDefFoundError err) {_			error("Class that bean class [" + className + "] depends on not found", ele, err)__		}_		catch (Throwable ex) {_			error("Unexpected failure during bean definition parsing", ele, ex)__		}_		finally {_			this.parseState.pop()__		}__		return null__	};parse,the,bean,definition,itself,without,regard,to,name,or,aliases,may,return,code,null,if,problems,occurred,during,the,parsing,of,the,bean,definition;public,abstract,bean,definition,parse,bean,definition,element,element,ele,string,bean,name,bean,definition,containing,bean,this,parse,state,push,new,bean,entry,bean,name,string,class,name,null,if,ele,has,attribute,class,name,ele,get,attribute,trim,try,string,parent,null,if,ele,has,attribute,parent,ele,get,attribute,abstract,bean,definition,bd,create,bean,definition,class,name,parent,parse,bean,definition,attributes,ele,bean,name,containing,bean,bd,bd,set,description,dom,utils,get,child,element,value,by,tag,name,ele,parse,meta,elements,ele,bd,parse,lookup,override,sub,elements,ele,bd,get,method,overrides,parse,replaced,method,sub,elements,ele,bd,get,method,overrides,parse,constructor,arg,elements,ele,bd,parse,property,elements,ele,bd,parse,qualifier,elements,ele,bd,bd,set,resource,this,reader,context,get,resource,bd,set,source,extract,source,ele,return,bd,catch,class,not,found,exception,ex,error,bean,class,class,name,not,found,ele,ex,catch,no,class,def,found,error,err,error,class,that,bean,class,class,name,depends,on,not,found,ele,err,catch,throwable,ex,error,unexpected,failure,during,bean,definition,parsing,ele,ex,finally,this,parse,state,pop,return,null
BeanDefinitionParserDelegate -> public AbstractBeanDefinition parseBeanDefinitionElement( 			Element ele, String beanName, BeanDefinition containingBean);1447323728;Parse the bean definition itself, without regard to name or aliases. May return_{@code null} if problems occurred during the parsing of the bean definition.;public AbstractBeanDefinition parseBeanDefinitionElement(_			Element ele, String beanName, BeanDefinition containingBean) {__		this.parseState.push(new BeanEntry(beanName))___		String className = null__		if (ele.hasAttribute(CLASS_ATTRIBUTE)) {_			className = ele.getAttribute(CLASS_ATTRIBUTE).trim()__		}__		try {_			String parent = null__			if (ele.hasAttribute(PARENT_ATTRIBUTE)) {_				parent = ele.getAttribute(PARENT_ATTRIBUTE)__			}_			AbstractBeanDefinition bd = createBeanDefinition(className, parent)___			parseBeanDefinitionAttributes(ele, beanName, containingBean, bd)__			bd.setDescription(DomUtils.getChildElementValueByTagName(ele, DESCRIPTION_ELEMENT))___			parseMetaElements(ele, bd)__			parseLookupOverrideSubElements(ele, bd.getMethodOverrides())__			parseReplacedMethodSubElements(ele, bd.getMethodOverrides())___			parseConstructorArgElements(ele, bd)__			parsePropertyElements(ele, bd)__			parseQualifierElements(ele, bd)___			bd.setResource(this.readerContext.getResource())__			bd.setSource(extractSource(ele))___			return bd__		}_		catch (ClassNotFoundException ex) {_			error("Bean class [" + className + "] not found", ele, ex)__		}_		catch (NoClassDefFoundError err) {_			error("Class that bean class [" + className + "] depends on not found", ele, err)__		}_		catch (Throwable ex) {_			error("Unexpected failure during bean definition parsing", ele, ex)__		}_		finally {_			this.parseState.pop()__		}__		return null__	};parse,the,bean,definition,itself,without,regard,to,name,or,aliases,may,return,code,null,if,problems,occurred,during,the,parsing,of,the,bean,definition;public,abstract,bean,definition,parse,bean,definition,element,element,ele,string,bean,name,bean,definition,containing,bean,this,parse,state,push,new,bean,entry,bean,name,string,class,name,null,if,ele,has,attribute,class,name,ele,get,attribute,trim,try,string,parent,null,if,ele,has,attribute,parent,ele,get,attribute,abstract,bean,definition,bd,create,bean,definition,class,name,parent,parse,bean,definition,attributes,ele,bean,name,containing,bean,bd,bd,set,description,dom,utils,get,child,element,value,by,tag,name,ele,parse,meta,elements,ele,bd,parse,lookup,override,sub,elements,ele,bd,get,method,overrides,parse,replaced,method,sub,elements,ele,bd,get,method,overrides,parse,constructor,arg,elements,ele,bd,parse,property,elements,ele,bd,parse,qualifier,elements,ele,bd,bd,set,resource,this,reader,context,get,resource,bd,set,source,extract,source,ele,return,bd,catch,class,not,found,exception,ex,error,bean,class,class,name,not,found,ele,ex,catch,no,class,def,found,error,err,error,class,that,bean,class,class,name,depends,on,not,found,ele,err,catch,throwable,ex,error,unexpected,failure,during,bean,definition,parsing,ele,ex,finally,this,parse,state,pop,return,null
BeanDefinitionParserDelegate -> public AbstractBeanDefinition parseBeanDefinitionElement( 			Element ele, String beanName, BeanDefinition containingBean);1467726769;Parse the bean definition itself, without regard to name or aliases. May return_{@code null} if problems occurred during the parsing of the bean definition.;public AbstractBeanDefinition parseBeanDefinitionElement(_			Element ele, String beanName, BeanDefinition containingBean) {__		this.parseState.push(new BeanEntry(beanName))___		String className = null__		if (ele.hasAttribute(CLASS_ATTRIBUTE)) {_			className = ele.getAttribute(CLASS_ATTRIBUTE).trim()__		}__		try {_			String parent = null__			if (ele.hasAttribute(PARENT_ATTRIBUTE)) {_				parent = ele.getAttribute(PARENT_ATTRIBUTE)__			}_			AbstractBeanDefinition bd = createBeanDefinition(className, parent)___			parseBeanDefinitionAttributes(ele, beanName, containingBean, bd)__			bd.setDescription(DomUtils.getChildElementValueByTagName(ele, DESCRIPTION_ELEMENT))___			parseMetaElements(ele, bd)__			parseLookupOverrideSubElements(ele, bd.getMethodOverrides())__			parseReplacedMethodSubElements(ele, bd.getMethodOverrides())___			parseConstructorArgElements(ele, bd)__			parsePropertyElements(ele, bd)__			parseQualifierElements(ele, bd)___			bd.setResource(this.readerContext.getResource())__			bd.setSource(extractSource(ele))___			return bd__		}_		catch (ClassNotFoundException ex) {_			error("Bean class [" + className + "] not found", ele, ex)__		}_		catch (NoClassDefFoundError err) {_			error("Class that bean class [" + className + "] depends on not found", ele, err)__		}_		catch (Throwable ex) {_			error("Unexpected failure during bean definition parsing", ele, ex)__		}_		finally {_			this.parseState.pop()__		}__		return null__	};parse,the,bean,definition,itself,without,regard,to,name,or,aliases,may,return,code,null,if,problems,occurred,during,the,parsing,of,the,bean,definition;public,abstract,bean,definition,parse,bean,definition,element,element,ele,string,bean,name,bean,definition,containing,bean,this,parse,state,push,new,bean,entry,bean,name,string,class,name,null,if,ele,has,attribute,class,name,ele,get,attribute,trim,try,string,parent,null,if,ele,has,attribute,parent,ele,get,attribute,abstract,bean,definition,bd,create,bean,definition,class,name,parent,parse,bean,definition,attributes,ele,bean,name,containing,bean,bd,bd,set,description,dom,utils,get,child,element,value,by,tag,name,ele,parse,meta,elements,ele,bd,parse,lookup,override,sub,elements,ele,bd,get,method,overrides,parse,replaced,method,sub,elements,ele,bd,get,method,overrides,parse,constructor,arg,elements,ele,bd,parse,property,elements,ele,bd,parse,qualifier,elements,ele,bd,bd,set,resource,this,reader,context,get,resource,bd,set,source,extract,source,ele,return,bd,catch,class,not,found,exception,ex,error,bean,class,class,name,not,found,ele,ex,catch,no,class,def,found,error,err,error,class,that,bean,class,class,name,depends,on,not,found,ele,err,catch,throwable,ex,error,unexpected,failure,during,bean,definition,parsing,ele,ex,finally,this,parse,state,pop,return,null
BeanDefinitionParserDelegate -> public AbstractBeanDefinition parseBeanDefinitionElement( 			Element ele, String beanName, BeanDefinition containingBean);1467730834;Parse the bean definition itself, without regard to name or aliases. May return_{@code null} if problems occurred during the parsing of the bean definition.;public AbstractBeanDefinition parseBeanDefinitionElement(_			Element ele, String beanName, BeanDefinition containingBean) {__		this.parseState.push(new BeanEntry(beanName))___		String className = null__		if (ele.hasAttribute(CLASS_ATTRIBUTE)) {_			className = ele.getAttribute(CLASS_ATTRIBUTE).trim()__		}__		try {_			String parent = null__			if (ele.hasAttribute(PARENT_ATTRIBUTE)) {_				parent = ele.getAttribute(PARENT_ATTRIBUTE)__			}_			AbstractBeanDefinition bd = createBeanDefinition(className, parent)___			parseBeanDefinitionAttributes(ele, beanName, containingBean, bd)__			bd.setDescription(DomUtils.getChildElementValueByTagName(ele, DESCRIPTION_ELEMENT))___			parseMetaElements(ele, bd)__			parseLookupOverrideSubElements(ele, bd.getMethodOverrides())__			parseReplacedMethodSubElements(ele, bd.getMethodOverrides())___			parseConstructorArgElements(ele, bd)__			parsePropertyElements(ele, bd)__			parseQualifierElements(ele, bd)___			bd.setResource(this.readerContext.getResource())__			bd.setSource(extractSource(ele))___			return bd__		}_		catch (ClassNotFoundException ex) {_			error("Bean class [" + className + "] not found", ele, ex)__		}_		catch (NoClassDefFoundError err) {_			error("Class that bean class [" + className + "] depends on not found", ele, err)__		}_		catch (Throwable ex) {_			error("Unexpected failure during bean definition parsing", ele, ex)__		}_		finally {_			this.parseState.pop()__		}__		return null__	};parse,the,bean,definition,itself,without,regard,to,name,or,aliases,may,return,code,null,if,problems,occurred,during,the,parsing,of,the,bean,definition;public,abstract,bean,definition,parse,bean,definition,element,element,ele,string,bean,name,bean,definition,containing,bean,this,parse,state,push,new,bean,entry,bean,name,string,class,name,null,if,ele,has,attribute,class,name,ele,get,attribute,trim,try,string,parent,null,if,ele,has,attribute,parent,ele,get,attribute,abstract,bean,definition,bd,create,bean,definition,class,name,parent,parse,bean,definition,attributes,ele,bean,name,containing,bean,bd,bd,set,description,dom,utils,get,child,element,value,by,tag,name,ele,parse,meta,elements,ele,bd,parse,lookup,override,sub,elements,ele,bd,get,method,overrides,parse,replaced,method,sub,elements,ele,bd,get,method,overrides,parse,constructor,arg,elements,ele,bd,parse,property,elements,ele,bd,parse,qualifier,elements,ele,bd,bd,set,resource,this,reader,context,get,resource,bd,set,source,extract,source,ele,return,bd,catch,class,not,found,exception,ex,error,bean,class,class,name,not,found,ele,ex,catch,no,class,def,found,error,err,error,class,that,bean,class,class,name,depends,on,not,found,ele,err,catch,throwable,ex,error,unexpected,failure,during,bean,definition,parsing,ele,ex,finally,this,parse,state,pop,return,null
BeanDefinitionParserDelegate -> public AbstractBeanDefinition parseBeanDefinitionElement( 			Element ele, String beanName, BeanDefinition containingBean);1467744603;Parse the bean definition itself, without regard to name or aliases. May return_{@code null} if problems occurred during the parsing of the bean definition.;public AbstractBeanDefinition parseBeanDefinitionElement(_			Element ele, String beanName, BeanDefinition containingBean) {__		this.parseState.push(new BeanEntry(beanName))___		String className = null__		if (ele.hasAttribute(CLASS_ATTRIBUTE)) {_			className = ele.getAttribute(CLASS_ATTRIBUTE).trim()__		}__		try {_			String parent = null__			if (ele.hasAttribute(PARENT_ATTRIBUTE)) {_				parent = ele.getAttribute(PARENT_ATTRIBUTE)__			}_			AbstractBeanDefinition bd = createBeanDefinition(className, parent)___			parseBeanDefinitionAttributes(ele, beanName, containingBean, bd)__			bd.setDescription(DomUtils.getChildElementValueByTagName(ele, DESCRIPTION_ELEMENT))___			parseMetaElements(ele, bd)__			parseLookupOverrideSubElements(ele, bd.getMethodOverrides())__			parseReplacedMethodSubElements(ele, bd.getMethodOverrides())___			parseConstructorArgElements(ele, bd)__			parsePropertyElements(ele, bd)__			parseQualifierElements(ele, bd)___			bd.setResource(this.readerContext.getResource())__			bd.setSource(extractSource(ele))___			return bd__		}_		catch (ClassNotFoundException ex) {_			error("Bean class [" + className + "] not found", ele, ex)__		}_		catch (NoClassDefFoundError err) {_			error("Class that bean class [" + className + "] depends on not found", ele, err)__		}_		catch (Throwable ex) {_			error("Unexpected failure during bean definition parsing", ele, ex)__		}_		finally {_			this.parseState.pop()__		}__		return null__	};parse,the,bean,definition,itself,without,regard,to,name,or,aliases,may,return,code,null,if,problems,occurred,during,the,parsing,of,the,bean,definition;public,abstract,bean,definition,parse,bean,definition,element,element,ele,string,bean,name,bean,definition,containing,bean,this,parse,state,push,new,bean,entry,bean,name,string,class,name,null,if,ele,has,attribute,class,name,ele,get,attribute,trim,try,string,parent,null,if,ele,has,attribute,parent,ele,get,attribute,abstract,bean,definition,bd,create,bean,definition,class,name,parent,parse,bean,definition,attributes,ele,bean,name,containing,bean,bd,bd,set,description,dom,utils,get,child,element,value,by,tag,name,ele,parse,meta,elements,ele,bd,parse,lookup,override,sub,elements,ele,bd,get,method,overrides,parse,replaced,method,sub,elements,ele,bd,get,method,overrides,parse,constructor,arg,elements,ele,bd,parse,property,elements,ele,bd,parse,qualifier,elements,ele,bd,bd,set,resource,this,reader,context,get,resource,bd,set,source,extract,source,ele,return,bd,catch,class,not,found,exception,ex,error,bean,class,class,name,not,found,ele,ex,catch,no,class,def,found,error,err,error,class,that,bean,class,class,name,depends,on,not,found,ele,err,catch,throwable,ex,error,unexpected,failure,during,bean,definition,parsing,ele,ex,finally,this,parse,state,pop,return,null
BeanDefinitionParserDelegate -> public AbstractBeanDefinition parseBeanDefinitionElement( 			Element ele, String beanName, BeanDefinition containingBean);1487245676;Parse the bean definition itself, without regard to name or aliases. May return_{@code null} if problems occurred during the parsing of the bean definition.;public AbstractBeanDefinition parseBeanDefinitionElement(_			Element ele, String beanName, BeanDefinition containingBean) {__		this.parseState.push(new BeanEntry(beanName))___		String className = null__		if (ele.hasAttribute(CLASS_ATTRIBUTE)) {_			className = ele.getAttribute(CLASS_ATTRIBUTE).trim()__		}__		try {_			String parent = null__			if (ele.hasAttribute(PARENT_ATTRIBUTE)) {_				parent = ele.getAttribute(PARENT_ATTRIBUTE)__			}_			AbstractBeanDefinition bd = createBeanDefinition(className, parent)___			parseBeanDefinitionAttributes(ele, beanName, containingBean, bd)__			bd.setDescription(DomUtils.getChildElementValueByTagName(ele, DESCRIPTION_ELEMENT))___			parseMetaElements(ele, bd)__			parseLookupOverrideSubElements(ele, bd.getMethodOverrides())__			parseReplacedMethodSubElements(ele, bd.getMethodOverrides())___			parseConstructorArgElements(ele, bd)__			parsePropertyElements(ele, bd)__			parseQualifierElements(ele, bd)___			bd.setResource(this.readerContext.getResource())__			bd.setSource(extractSource(ele))___			return bd__		}_		catch (ClassNotFoundException ex) {_			error("Bean class [" + className + "] not found", ele, ex)__		}_		catch (NoClassDefFoundError err) {_			error("Class that bean class [" + className + "] depends on not found", ele, err)__		}_		catch (Throwable ex) {_			error("Unexpected failure during bean definition parsing", ele, ex)__		}_		finally {_			this.parseState.pop()__		}__		return null__	};parse,the,bean,definition,itself,without,regard,to,name,or,aliases,may,return,code,null,if,problems,occurred,during,the,parsing,of,the,bean,definition;public,abstract,bean,definition,parse,bean,definition,element,element,ele,string,bean,name,bean,definition,containing,bean,this,parse,state,push,new,bean,entry,bean,name,string,class,name,null,if,ele,has,attribute,class,name,ele,get,attribute,trim,try,string,parent,null,if,ele,has,attribute,parent,ele,get,attribute,abstract,bean,definition,bd,create,bean,definition,class,name,parent,parse,bean,definition,attributes,ele,bean,name,containing,bean,bd,bd,set,description,dom,utils,get,child,element,value,by,tag,name,ele,parse,meta,elements,ele,bd,parse,lookup,override,sub,elements,ele,bd,get,method,overrides,parse,replaced,method,sub,elements,ele,bd,get,method,overrides,parse,constructor,arg,elements,ele,bd,parse,property,elements,ele,bd,parse,qualifier,elements,ele,bd,bd,set,resource,this,reader,context,get,resource,bd,set,source,extract,source,ele,return,bd,catch,class,not,found,exception,ex,error,bean,class,class,name,not,found,ele,ex,catch,no,class,def,found,error,err,error,class,that,bean,class,class,name,depends,on,not,found,ele,err,catch,throwable,ex,error,unexpected,failure,during,bean,definition,parsing,ele,ex,finally,this,parse,state,pop,return,null
BeanDefinitionParserDelegate -> public AbstractBeanDefinition parseBeanDefinitionElement( 			Element ele, String beanName, BeanDefinition containingBean);1487255851;Parse the bean definition itself, without regard to name or aliases. May return_{@code null} if problems occurred during the parsing of the bean definition.;public AbstractBeanDefinition parseBeanDefinitionElement(_			Element ele, String beanName, BeanDefinition containingBean) {__		this.parseState.push(new BeanEntry(beanName))___		String className = null__		if (ele.hasAttribute(CLASS_ATTRIBUTE)) {_			className = ele.getAttribute(CLASS_ATTRIBUTE).trim()__		}__		try {_			String parent = null__			if (ele.hasAttribute(PARENT_ATTRIBUTE)) {_				parent = ele.getAttribute(PARENT_ATTRIBUTE)__			}_			AbstractBeanDefinition bd = createBeanDefinition(className, parent)___			parseBeanDefinitionAttributes(ele, beanName, containingBean, bd)__			bd.setDescription(DomUtils.getChildElementValueByTagName(ele, DESCRIPTION_ELEMENT))___			parseMetaElements(ele, bd)__			parseLookupOverrideSubElements(ele, bd.getMethodOverrides())__			parseReplacedMethodSubElements(ele, bd.getMethodOverrides())___			parseConstructorArgElements(ele, bd)__			parsePropertyElements(ele, bd)__			parseQualifierElements(ele, bd)___			bd.setResource(this.readerContext.getResource())__			bd.setSource(extractSource(ele))___			return bd__		}_		catch (ClassNotFoundException ex) {_			error("Bean class [" + className + "] not found", ele, ex)__		}_		catch (NoClassDefFoundError err) {_			error("Class that bean class [" + className + "] depends on not found", ele, err)__		}_		catch (Throwable ex) {_			error("Unexpected failure during bean definition parsing", ele, ex)__		}_		finally {_			this.parseState.pop()__		}__		return null__	};parse,the,bean,definition,itself,without,regard,to,name,or,aliases,may,return,code,null,if,problems,occurred,during,the,parsing,of,the,bean,definition;public,abstract,bean,definition,parse,bean,definition,element,element,ele,string,bean,name,bean,definition,containing,bean,this,parse,state,push,new,bean,entry,bean,name,string,class,name,null,if,ele,has,attribute,class,name,ele,get,attribute,trim,try,string,parent,null,if,ele,has,attribute,parent,ele,get,attribute,abstract,bean,definition,bd,create,bean,definition,class,name,parent,parse,bean,definition,attributes,ele,bean,name,containing,bean,bd,bd,set,description,dom,utils,get,child,element,value,by,tag,name,ele,parse,meta,elements,ele,bd,parse,lookup,override,sub,elements,ele,bd,get,method,overrides,parse,replaced,method,sub,elements,ele,bd,get,method,overrides,parse,constructor,arg,elements,ele,bd,parse,property,elements,ele,bd,parse,qualifier,elements,ele,bd,bd,set,resource,this,reader,context,get,resource,bd,set,source,extract,source,ele,return,bd,catch,class,not,found,exception,ex,error,bean,class,class,name,not,found,ele,ex,catch,no,class,def,found,error,err,error,class,that,bean,class,class,name,depends,on,not,found,ele,err,catch,throwable,ex,error,unexpected,failure,during,bean,definition,parsing,ele,ex,finally,this,parse,state,pop,return,null
BeanDefinitionParserDelegate -> public AbstractBeanDefinition parseBeanDefinitionElement( 			Element ele, String beanName, BeanDefinition containingBean);1494586217;Parse the bean definition itself, without regard to name or aliases. May return_{@code null} if problems occurred during the parsing of the bean definition.;public AbstractBeanDefinition parseBeanDefinitionElement(_			Element ele, String beanName, BeanDefinition containingBean) {__		this.parseState.push(new BeanEntry(beanName))___		String className = null__		if (ele.hasAttribute(CLASS_ATTRIBUTE)) {_			className = ele.getAttribute(CLASS_ATTRIBUTE).trim()__		}__		try {_			String parent = null__			if (ele.hasAttribute(PARENT_ATTRIBUTE)) {_				parent = ele.getAttribute(PARENT_ATTRIBUTE)__			}_			AbstractBeanDefinition bd = createBeanDefinition(className, parent)___			parseBeanDefinitionAttributes(ele, beanName, containingBean, bd)__			bd.setDescription(DomUtils.getChildElementValueByTagName(ele, DESCRIPTION_ELEMENT))___			parseMetaElements(ele, bd)__			parseLookupOverrideSubElements(ele, bd.getMethodOverrides())__			parseReplacedMethodSubElements(ele, bd.getMethodOverrides())___			parseConstructorArgElements(ele, bd)__			parsePropertyElements(ele, bd)__			parseQualifierElements(ele, bd)___			bd.setResource(this.readerContext.getResource())__			bd.setSource(extractSource(ele))___			return bd__		}_		catch (ClassNotFoundException ex) {_			error("Bean class [" + className + "] not found", ele, ex)__		}_		catch (NoClassDefFoundError err) {_			error("Class that bean class [" + className + "] depends on not found", ele, err)__		}_		catch (Throwable ex) {_			error("Unexpected failure during bean definition parsing", ele, ex)__		}_		finally {_			this.parseState.pop()__		}__		return null__	};parse,the,bean,definition,itself,without,regard,to,name,or,aliases,may,return,code,null,if,problems,occurred,during,the,parsing,of,the,bean,definition;public,abstract,bean,definition,parse,bean,definition,element,element,ele,string,bean,name,bean,definition,containing,bean,this,parse,state,push,new,bean,entry,bean,name,string,class,name,null,if,ele,has,attribute,class,name,ele,get,attribute,trim,try,string,parent,null,if,ele,has,attribute,parent,ele,get,attribute,abstract,bean,definition,bd,create,bean,definition,class,name,parent,parse,bean,definition,attributes,ele,bean,name,containing,bean,bd,bd,set,description,dom,utils,get,child,element,value,by,tag,name,ele,parse,meta,elements,ele,bd,parse,lookup,override,sub,elements,ele,bd,get,method,overrides,parse,replaced,method,sub,elements,ele,bd,get,method,overrides,parse,constructor,arg,elements,ele,bd,parse,property,elements,ele,bd,parse,qualifier,elements,ele,bd,bd,set,resource,this,reader,context,get,resource,bd,set,source,extract,source,ele,return,bd,catch,class,not,found,exception,ex,error,bean,class,class,name,not,found,ele,ex,catch,no,class,def,found,error,err,error,class,that,bean,class,class,name,depends,on,not,found,ele,err,catch,throwable,ex,error,unexpected,failure,during,bean,definition,parsing,ele,ex,finally,this,parse,state,pop,return,null
