commented;modifiers;parameterAmount;loc;comment;code
true;public;1;12;/**  * Set the property to compare.  * <p>If the property was the same as the current, the sort is reversed if  * "toggleAscendingOnProperty" is activated, else simply ignored.  * @see #setToggleAscendingOnProperty  */ ;/**  * Set the property to compare.  * <p>If the property was the same as the current, the sort is reversed if  * "toggleAscendingOnProperty" is activated, else simply ignored.  * @see #setToggleAscendingOnProperty  */ public void setProperty(String property) {     if (!StringUtils.hasLength(property)) {         this.property = "".     } else {         // Implicit toggling of ascending?         if (isToggleAscendingOnProperty()) {             this.ascending = (!property.equals(this.property) || !this.ascending).         }         this.property = property.     } }
false;public;0;4;;@Override public String getProperty() {     return this.property. }
true;public;1;3;/**  * Set whether upper and lower case in String values should be ignored.  */ ;/**  * Set whether upper and lower case in String values should be ignored.  */ public void setIgnoreCase(boolean ignoreCase) {     this.ignoreCase = ignoreCase. }
false;public;0;4;;@Override public boolean isIgnoreCase() {     return this.ignoreCase. }
true;public;1;3;/**  * Set whether to sort ascending (true) or descending (false).  */ ;/**  * Set whether to sort ascending (true) or descending (false).  */ public void setAscending(boolean ascending) {     this.ascending = ascending. }
false;public;0;4;;@Override public boolean isAscending() {     return this.ascending. }
true;public;1;3;/**  * Set whether to toggle the ascending flag if the same property gets set again  * (that is, {@link #setProperty} gets called with already set property name again).  * <p>This is particularly useful for parameter binding through a web request,  * where clicking on the field header again might be supposed to trigger a  * resort for the same field but opposite order.  */ ;/**  * Set whether to toggle the ascending flag if the same property gets set again  * (that is, {@link #setProperty} gets called with already set property name again).  * <p>This is particularly useful for parameter binding through a web request,  * where clicking on the field header again might be supposed to trigger a  * resort for the same field but opposite order.  */ public void setToggleAscendingOnProperty(boolean toggleAscendingOnProperty) {     this.toggleAscendingOnProperty = toggleAscendingOnProperty. }
true;public;0;3;/**  * Return whether to toggle the ascending flag if the same property gets set again  * (that is, {@code setProperty} gets called with already set property name again).  */ ;/**  * Return whether to toggle the ascending flag if the same property gets set again  * (that is, {@code setProperty} gets called with already set property name again).  */ public boolean isToggleAscendingOnProperty() {     return this.toggleAscendingOnProperty. }
false;public;1;13;;@Override public boolean equals(Object other) {     if (this == other) {         return true.     }     if (!(other instanceof SortDefinition)) {         return false.     }     SortDefinition otherSd = (SortDefinition) other.     return (getProperty().equals(otherSd.getProperty()) && isAscending() == otherSd.isAscending() && isIgnoreCase() == otherSd.isIgnoreCase()). }
false;public;0;7;;@Override public int hashCode() {     int hashCode = getProperty().hashCode().     hashCode = 29 * hashCode + (isIgnoreCase() ? 1 : 0).     hashCode = 29 * hashCode + (isAscending() ? 1 : 0).     return hashCode. }
