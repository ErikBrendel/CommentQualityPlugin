# id;timestamp;commentText;codeText;commentWords;codeWords
MutableSortDefinition -> public MutableSortDefinition(String property, boolean ignoreCase, boolean ascending);1328020251;Create a MutableSortDefinition for the given settings._@param property the property to compare_@param ignoreCase whether upper and lower case in String values should be ignored_@param ascending whether to sort ascending (true) or descending (false);public MutableSortDefinition(String property, boolean ignoreCase, boolean ascending) {_		this.property = property__		this.ignoreCase = ignoreCase__		this.ascending = ascending__	};create,a,mutable,sort,definition,for,the,given,settings,param,property,the,property,to,compare,param,ignore,case,whether,upper,and,lower,case,in,string,values,should,be,ignored,param,ascending,whether,to,sort,ascending,true,or,descending,false;public,mutable,sort,definition,string,property,boolean,ignore,case,boolean,ascending,this,property,property,this,ignore,case,ignore,case,this,ascending,ascending
MutableSortDefinition -> public MutableSortDefinition(String property, boolean ignoreCase, boolean ascending);1356735495;Create a MutableSortDefinition for the given settings._@param property the property to compare_@param ignoreCase whether upper and lower case in String values should be ignored_@param ascending whether to sort ascending (true) or descending (false);public MutableSortDefinition(String property, boolean ignoreCase, boolean ascending) {_		this.property = property__		this.ignoreCase = ignoreCase__		this.ascending = ascending__	};create,a,mutable,sort,definition,for,the,given,settings,param,property,the,property,to,compare,param,ignore,case,whether,upper,and,lower,case,in,string,values,should,be,ignored,param,ascending,whether,to,sort,ascending,true,or,descending,false;public,mutable,sort,definition,string,property,boolean,ignore,case,boolean,ascending,this,property,property,this,ignore,case,ignore,case,this,ascending,ascending
MutableSortDefinition -> public MutableSortDefinition(String property, boolean ignoreCase, boolean ascending);1357119239;Create a MutableSortDefinition for the given settings._@param property the property to compare_@param ignoreCase whether upper and lower case in String values should be ignored_@param ascending whether to sort ascending (true) or descending (false);public MutableSortDefinition(String property, boolean ignoreCase, boolean ascending) {_		this.property = property__		this.ignoreCase = ignoreCase__		this.ascending = ascending__	};create,a,mutable,sort,definition,for,the,given,settings,param,property,the,property,to,compare,param,ignore,case,whether,upper,and,lower,case,in,string,values,should,be,ignored,param,ascending,whether,to,sort,ascending,true,or,descending,false;public,mutable,sort,definition,string,property,boolean,ignore,case,boolean,ascending,this,property,property,this,ignore,case,ignore,case,this,ascending,ascending
MutableSortDefinition -> public MutableSortDefinition(String property, boolean ignoreCase, boolean ascending);1368482696;Create a MutableSortDefinition for the given settings._@param property the property to compare_@param ignoreCase whether upper and lower case in String values should be ignored_@param ascending whether to sort ascending (true) or descending (false);public MutableSortDefinition(String property, boolean ignoreCase, boolean ascending) {_		this.property = property__		this.ignoreCase = ignoreCase__		this.ascending = ascending__	};create,a,mutable,sort,definition,for,the,given,settings,param,property,the,property,to,compare,param,ignore,case,whether,upper,and,lower,case,in,string,values,should,be,ignored,param,ascending,whether,to,sort,ascending,true,or,descending,false;public,mutable,sort,definition,string,property,boolean,ignore,case,boolean,ascending,this,property,property,this,ignore,case,ignore,case,this,ascending,ascending
MutableSortDefinition -> public MutableSortDefinition(String property, boolean ignoreCase, boolean ascending);1385501137;Create a MutableSortDefinition for the given settings._@param property the property to compare_@param ignoreCase whether upper and lower case in String values should be ignored_@param ascending whether to sort ascending (true) or descending (false);public MutableSortDefinition(String property, boolean ignoreCase, boolean ascending) {_		this.property = property__		this.ignoreCase = ignoreCase__		this.ascending = ascending__	};create,a,mutable,sort,definition,for,the,given,settings,param,property,the,property,to,compare,param,ignore,case,whether,upper,and,lower,case,in,string,values,should,be,ignored,param,ascending,whether,to,sort,ascending,true,or,descending,false;public,mutable,sort,definition,string,property,boolean,ignore,case,boolean,ascending,this,property,property,this,ignore,case,ignore,case,this,ascending,ascending
MutableSortDefinition -> public MutableSortDefinition(SortDefinition source);1328020251;Copy constructor: create a new MutableSortDefinition_that mirrors the given sort definition._@param source the original sort definition;public MutableSortDefinition(SortDefinition source) {_		this.property = source.getProperty()__		this.ignoreCase = source.isIgnoreCase()__		this.ascending = source.isAscending()__	};copy,constructor,create,a,new,mutable,sort,definition,that,mirrors,the,given,sort,definition,param,source,the,original,sort,definition;public,mutable,sort,definition,sort,definition,source,this,property,source,get,property,this,ignore,case,source,is,ignore,case,this,ascending,source,is,ascending
MutableSortDefinition -> public MutableSortDefinition(SortDefinition source);1356735495;Copy constructor: create a new MutableSortDefinition_that mirrors the given sort definition._@param source the original sort definition;public MutableSortDefinition(SortDefinition source) {_		this.property = source.getProperty()__		this.ignoreCase = source.isIgnoreCase()__		this.ascending = source.isAscending()__	};copy,constructor,create,a,new,mutable,sort,definition,that,mirrors,the,given,sort,definition,param,source,the,original,sort,definition;public,mutable,sort,definition,sort,definition,source,this,property,source,get,property,this,ignore,case,source,is,ignore,case,this,ascending,source,is,ascending
MutableSortDefinition -> public MutableSortDefinition(SortDefinition source);1357119239;Copy constructor: create a new MutableSortDefinition_that mirrors the given sort definition._@param source the original sort definition;public MutableSortDefinition(SortDefinition source) {_		this.property = source.getProperty()__		this.ignoreCase = source.isIgnoreCase()__		this.ascending = source.isAscending()__	};copy,constructor,create,a,new,mutable,sort,definition,that,mirrors,the,given,sort,definition,param,source,the,original,sort,definition;public,mutable,sort,definition,sort,definition,source,this,property,source,get,property,this,ignore,case,source,is,ignore,case,this,ascending,source,is,ascending
MutableSortDefinition -> public MutableSortDefinition(SortDefinition source);1368482696;Copy constructor: create a new MutableSortDefinition_that mirrors the given sort definition._@param source the original sort definition;public MutableSortDefinition(SortDefinition source) {_		this.property = source.getProperty()__		this.ignoreCase = source.isIgnoreCase()__		this.ascending = source.isAscending()__	};copy,constructor,create,a,new,mutable,sort,definition,that,mirrors,the,given,sort,definition,param,source,the,original,sort,definition;public,mutable,sort,definition,sort,definition,source,this,property,source,get,property,this,ignore,case,source,is,ignore,case,this,ascending,source,is,ascending
MutableSortDefinition -> public MutableSortDefinition(SortDefinition source);1385501137;Copy constructor: create a new MutableSortDefinition_that mirrors the given sort definition._@param source the original sort definition;public MutableSortDefinition(SortDefinition source) {_		this.property = source.getProperty()__		this.ignoreCase = source.isIgnoreCase()__		this.ascending = source.isAscending()__	};copy,constructor,create,a,new,mutable,sort,definition,that,mirrors,the,given,sort,definition,param,source,the,original,sort,definition;public,mutable,sort,definition,sort,definition,source,this,property,source,get,property,this,ignore,case,source,is,ignore,case,this,ascending,source,is,ascending
MutableSortDefinition -> public void setIgnoreCase(boolean ignoreCase);1328020251;Set whether upper and lower case in String values should be ignored.;public void setIgnoreCase(boolean ignoreCase) {_		this.ignoreCase = ignoreCase__	};set,whether,upper,and,lower,case,in,string,values,should,be,ignored;public,void,set,ignore,case,boolean,ignore,case,this,ignore,case,ignore,case
MutableSortDefinition -> public void setIgnoreCase(boolean ignoreCase);1356735495;Set whether upper and lower case in String values should be ignored.;public void setIgnoreCase(boolean ignoreCase) {_		this.ignoreCase = ignoreCase__	};set,whether,upper,and,lower,case,in,string,values,should,be,ignored;public,void,set,ignore,case,boolean,ignore,case,this,ignore,case,ignore,case
MutableSortDefinition -> public void setIgnoreCase(boolean ignoreCase);1357119239;Set whether upper and lower case in String values should be ignored.;public void setIgnoreCase(boolean ignoreCase) {_		this.ignoreCase = ignoreCase__	};set,whether,upper,and,lower,case,in,string,values,should,be,ignored;public,void,set,ignore,case,boolean,ignore,case,this,ignore,case,ignore,case
MutableSortDefinition -> public void setIgnoreCase(boolean ignoreCase);1368482696;Set whether upper and lower case in String values should be ignored.;public void setIgnoreCase(boolean ignoreCase) {_		this.ignoreCase = ignoreCase__	};set,whether,upper,and,lower,case,in,string,values,should,be,ignored;public,void,set,ignore,case,boolean,ignore,case,this,ignore,case,ignore,case
MutableSortDefinition -> public void setIgnoreCase(boolean ignoreCase);1385501137;Set whether upper and lower case in String values should be ignored.;public void setIgnoreCase(boolean ignoreCase) {_		this.ignoreCase = ignoreCase__	};set,whether,upper,and,lower,case,in,string,values,should,be,ignored;public,void,set,ignore,case,boolean,ignore,case,this,ignore,case,ignore,case
MutableSortDefinition -> public MutableSortDefinition();1328020251;Create an empty MutableSortDefinition,_to be populated via its bean properties._@see #setProperty_@see #setIgnoreCase_@see #setAscending;public MutableSortDefinition() {_	};create,an,empty,mutable,sort,definition,to,be,populated,via,its,bean,properties,see,set,property,see,set,ignore,case,see,set,ascending;public,mutable,sort,definition
MutableSortDefinition -> public MutableSortDefinition();1356735495;Create an empty MutableSortDefinition,_to be populated via its bean properties._@see #setProperty_@see #setIgnoreCase_@see #setAscending;public MutableSortDefinition() {_	};create,an,empty,mutable,sort,definition,to,be,populated,via,its,bean,properties,see,set,property,see,set,ignore,case,see,set,ascending;public,mutable,sort,definition
MutableSortDefinition -> public MutableSortDefinition();1357119239;Create an empty MutableSortDefinition,_to be populated via its bean properties._@see #setProperty_@see #setIgnoreCase_@see #setAscending;public MutableSortDefinition() {_	};create,an,empty,mutable,sort,definition,to,be,populated,via,its,bean,properties,see,set,property,see,set,ignore,case,see,set,ascending;public,mutable,sort,definition
MutableSortDefinition -> public MutableSortDefinition();1368482696;Create an empty MutableSortDefinition,_to be populated via its bean properties._@see #setProperty_@see #setIgnoreCase_@see #setAscending;public MutableSortDefinition() {_	};create,an,empty,mutable,sort,definition,to,be,populated,via,its,bean,properties,see,set,property,see,set,ignore,case,see,set,ascending;public,mutable,sort,definition
MutableSortDefinition -> public MutableSortDefinition();1385501137;Create an empty MutableSortDefinition,_to be populated via its bean properties._@see #setProperty_@see #setIgnoreCase_@see #setAscending;public MutableSortDefinition() {_	};create,an,empty,mutable,sort,definition,to,be,populated,via,its,bean,properties,see,set,property,see,set,ignore,case,see,set,ascending;public,mutable,sort,definition
MutableSortDefinition -> public void setToggleAscendingOnProperty(boolean toggleAscendingOnProperty);1328020251;Set whether to toggle the ascending flag if the same property gets set again_(that is, {@link #setProperty} gets called with already set property name again)._<p>This is particularly useful for parameter binding through a web request,_where clicking on the field header again might be supposed to trigger a_resort for the same field but opposite order.;public void setToggleAscendingOnProperty(boolean toggleAscendingOnProperty) {_		this.toggleAscendingOnProperty = toggleAscendingOnProperty__	};set,whether,to,toggle,the,ascending,flag,if,the,same,property,gets,set,again,that,is,link,set,property,gets,called,with,already,set,property,name,again,p,this,is,particularly,useful,for,parameter,binding,through,a,web,request,where,clicking,on,the,field,header,again,might,be,supposed,to,trigger,a,resort,for,the,same,field,but,opposite,order;public,void,set,toggle,ascending,on,property,boolean,toggle,ascending,on,property,this,toggle,ascending,on,property,toggle,ascending,on,property
MutableSortDefinition -> public void setToggleAscendingOnProperty(boolean toggleAscendingOnProperty);1356735495;Set whether to toggle the ascending flag if the same property gets set again_(that is, {@link #setProperty} gets called with already set property name again)._<p>This is particularly useful for parameter binding through a web request,_where clicking on the field header again might be supposed to trigger a_resort for the same field but opposite order.;public void setToggleAscendingOnProperty(boolean toggleAscendingOnProperty) {_		this.toggleAscendingOnProperty = toggleAscendingOnProperty__	};set,whether,to,toggle,the,ascending,flag,if,the,same,property,gets,set,again,that,is,link,set,property,gets,called,with,already,set,property,name,again,p,this,is,particularly,useful,for,parameter,binding,through,a,web,request,where,clicking,on,the,field,header,again,might,be,supposed,to,trigger,a,resort,for,the,same,field,but,opposite,order;public,void,set,toggle,ascending,on,property,boolean,toggle,ascending,on,property,this,toggle,ascending,on,property,toggle,ascending,on,property
MutableSortDefinition -> public void setToggleAscendingOnProperty(boolean toggleAscendingOnProperty);1357119239;Set whether to toggle the ascending flag if the same property gets set again_(that is, {@link #setProperty} gets called with already set property name again)._<p>This is particularly useful for parameter binding through a web request,_where clicking on the field header again might be supposed to trigger a_resort for the same field but opposite order.;public void setToggleAscendingOnProperty(boolean toggleAscendingOnProperty) {_		this.toggleAscendingOnProperty = toggleAscendingOnProperty__	};set,whether,to,toggle,the,ascending,flag,if,the,same,property,gets,set,again,that,is,link,set,property,gets,called,with,already,set,property,name,again,p,this,is,particularly,useful,for,parameter,binding,through,a,web,request,where,clicking,on,the,field,header,again,might,be,supposed,to,trigger,a,resort,for,the,same,field,but,opposite,order;public,void,set,toggle,ascending,on,property,boolean,toggle,ascending,on,property,this,toggle,ascending,on,property,toggle,ascending,on,property
MutableSortDefinition -> public void setToggleAscendingOnProperty(boolean toggleAscendingOnProperty);1368482696;Set whether to toggle the ascending flag if the same property gets set again_(that is, {@link #setProperty} gets called with already set property name again)._<p>This is particularly useful for parameter binding through a web request,_where clicking on the field header again might be supposed to trigger a_resort for the same field but opposite order.;public void setToggleAscendingOnProperty(boolean toggleAscendingOnProperty) {_		this.toggleAscendingOnProperty = toggleAscendingOnProperty__	};set,whether,to,toggle,the,ascending,flag,if,the,same,property,gets,set,again,that,is,link,set,property,gets,called,with,already,set,property,name,again,p,this,is,particularly,useful,for,parameter,binding,through,a,web,request,where,clicking,on,the,field,header,again,might,be,supposed,to,trigger,a,resort,for,the,same,field,but,opposite,order;public,void,set,toggle,ascending,on,property,boolean,toggle,ascending,on,property,this,toggle,ascending,on,property,toggle,ascending,on,property
MutableSortDefinition -> public void setToggleAscendingOnProperty(boolean toggleAscendingOnProperty);1385501137;Set whether to toggle the ascending flag if the same property gets set again_(that is, {@link #setProperty} gets called with already set property name again)._<p>This is particularly useful for parameter binding through a web request,_where clicking on the field header again might be supposed to trigger a_resort for the same field but opposite order.;public void setToggleAscendingOnProperty(boolean toggleAscendingOnProperty) {_		this.toggleAscendingOnProperty = toggleAscendingOnProperty__	};set,whether,to,toggle,the,ascending,flag,if,the,same,property,gets,set,again,that,is,link,set,property,gets,called,with,already,set,property,name,again,p,this,is,particularly,useful,for,parameter,binding,through,a,web,request,where,clicking,on,the,field,header,again,might,be,supposed,to,trigger,a,resort,for,the,same,field,but,opposite,order;public,void,set,toggle,ascending,on,property,boolean,toggle,ascending,on,property,this,toggle,ascending,on,property,toggle,ascending,on,property
MutableSortDefinition -> public MutableSortDefinition(boolean toggleAscendingOnSameProperty);1328020251;Create a new MutableSortDefinition._@param toggleAscendingOnSameProperty whether to toggle the ascending flag_if the same property gets set again (that is, <code>setProperty</code> gets_called with already set property name again).;public MutableSortDefinition(boolean toggleAscendingOnSameProperty) {_		this.toggleAscendingOnProperty = toggleAscendingOnSameProperty__	};create,a,new,mutable,sort,definition,param,toggle,ascending,on,same,property,whether,to,toggle,the,ascending,flag,if,the,same,property,gets,set,again,that,is,code,set,property,code,gets,called,with,already,set,property,name,again;public,mutable,sort,definition,boolean,toggle,ascending,on,same,property,this,toggle,ascending,on,property,toggle,ascending,on,same,property
MutableSortDefinition -> public MutableSortDefinition(boolean toggleAscendingOnSameProperty);1356735495;Create a new MutableSortDefinition._@param toggleAscendingOnSameProperty whether to toggle the ascending flag_if the same property gets set again (that is, {@code setProperty} gets_called with already set property name again).;public MutableSortDefinition(boolean toggleAscendingOnSameProperty) {_		this.toggleAscendingOnProperty = toggleAscendingOnSameProperty__	};create,a,new,mutable,sort,definition,param,toggle,ascending,on,same,property,whether,to,toggle,the,ascending,flag,if,the,same,property,gets,set,again,that,is,code,set,property,gets,called,with,already,set,property,name,again;public,mutable,sort,definition,boolean,toggle,ascending,on,same,property,this,toggle,ascending,on,property,toggle,ascending,on,same,property
MutableSortDefinition -> public MutableSortDefinition(boolean toggleAscendingOnSameProperty);1357119239;Create a new MutableSortDefinition._@param toggleAscendingOnSameProperty whether to toggle the ascending flag_if the same property gets set again (that is, {@code setProperty} gets_called with already set property name again).;public MutableSortDefinition(boolean toggleAscendingOnSameProperty) {_		this.toggleAscendingOnProperty = toggleAscendingOnSameProperty__	};create,a,new,mutable,sort,definition,param,toggle,ascending,on,same,property,whether,to,toggle,the,ascending,flag,if,the,same,property,gets,set,again,that,is,code,set,property,gets,called,with,already,set,property,name,again;public,mutable,sort,definition,boolean,toggle,ascending,on,same,property,this,toggle,ascending,on,property,toggle,ascending,on,same,property
MutableSortDefinition -> public MutableSortDefinition(boolean toggleAscendingOnSameProperty);1368482696;Create a new MutableSortDefinition._@param toggleAscendingOnSameProperty whether to toggle the ascending flag_if the same property gets set again (that is, {@code setProperty} gets_called with already set property name again).;public MutableSortDefinition(boolean toggleAscendingOnSameProperty) {_		this.toggleAscendingOnProperty = toggleAscendingOnSameProperty__	};create,a,new,mutable,sort,definition,param,toggle,ascending,on,same,property,whether,to,toggle,the,ascending,flag,if,the,same,property,gets,set,again,that,is,code,set,property,gets,called,with,already,set,property,name,again;public,mutable,sort,definition,boolean,toggle,ascending,on,same,property,this,toggle,ascending,on,property,toggle,ascending,on,same,property
MutableSortDefinition -> public MutableSortDefinition(boolean toggleAscendingOnSameProperty);1385501137;Create a new MutableSortDefinition._@param toggleAscendingOnSameProperty whether to toggle the ascending flag_if the same property gets set again (that is, {@code setProperty} gets_called with already set property name again).;public MutableSortDefinition(boolean toggleAscendingOnSameProperty) {_		this.toggleAscendingOnProperty = toggleAscendingOnSameProperty__	};create,a,new,mutable,sort,definition,param,toggle,ascending,on,same,property,whether,to,toggle,the,ascending,flag,if,the,same,property,gets,set,again,that,is,code,set,property,gets,called,with,already,set,property,name,again;public,mutable,sort,definition,boolean,toggle,ascending,on,same,property,this,toggle,ascending,on,property,toggle,ascending,on,same,property
MutableSortDefinition -> public void setProperty(String property);1328020251;Set the property to compare._<p>If the property was the same as the current, the sort is reversed if_"toggleAscendingOnProperty" is activated, else simply ignored._@see #setToggleAscendingOnProperty;public void setProperty(String property) {_		if (!StringUtils.hasLength(property)) {_			this.property = ""__		}_		else {_			_			if (isToggleAscendingOnProperty()) {_				this.ascending = (!property.equals(this.property) || !this.ascending)__			}_			this.property = property__		}_	};set,the,property,to,compare,p,if,the,property,was,the,same,as,the,current,the,sort,is,reversed,if,toggle,ascending,on,property,is,activated,else,simply,ignored,see,set,toggle,ascending,on,property;public,void,set,property,string,property,if,string,utils,has,length,property,this,property,else,if,is,toggle,ascending,on,property,this,ascending,property,equals,this,property,this,ascending,this,property,property
MutableSortDefinition -> public void setProperty(String property);1356735495;Set the property to compare._<p>If the property was the same as the current, the sort is reversed if_"toggleAscendingOnProperty" is activated, else simply ignored._@see #setToggleAscendingOnProperty;public void setProperty(String property) {_		if (!StringUtils.hasLength(property)) {_			this.property = ""__		}_		else {_			_			if (isToggleAscendingOnProperty()) {_				this.ascending = (!property.equals(this.property) || !this.ascending)__			}_			this.property = property__		}_	};set,the,property,to,compare,p,if,the,property,was,the,same,as,the,current,the,sort,is,reversed,if,toggle,ascending,on,property,is,activated,else,simply,ignored,see,set,toggle,ascending,on,property;public,void,set,property,string,property,if,string,utils,has,length,property,this,property,else,if,is,toggle,ascending,on,property,this,ascending,property,equals,this,property,this,ascending,this,property,property
MutableSortDefinition -> public void setProperty(String property);1357119239;Set the property to compare._<p>If the property was the same as the current, the sort is reversed if_"toggleAscendingOnProperty" is activated, else simply ignored._@see #setToggleAscendingOnProperty;public void setProperty(String property) {_		if (!StringUtils.hasLength(property)) {_			this.property = ""__		}_		else {_			_			if (isToggleAscendingOnProperty()) {_				this.ascending = (!property.equals(this.property) || !this.ascending)__			}_			this.property = property__		}_	};set,the,property,to,compare,p,if,the,property,was,the,same,as,the,current,the,sort,is,reversed,if,toggle,ascending,on,property,is,activated,else,simply,ignored,see,set,toggle,ascending,on,property;public,void,set,property,string,property,if,string,utils,has,length,property,this,property,else,if,is,toggle,ascending,on,property,this,ascending,property,equals,this,property,this,ascending,this,property,property
MutableSortDefinition -> public void setProperty(String property);1368482696;Set the property to compare._<p>If the property was the same as the current, the sort is reversed if_"toggleAscendingOnProperty" is activated, else simply ignored._@see #setToggleAscendingOnProperty;public void setProperty(String property) {_		if (!StringUtils.hasLength(property)) {_			this.property = ""__		}_		else {_			_			if (isToggleAscendingOnProperty()) {_				this.ascending = (!property.equals(this.property) || !this.ascending)__			}_			this.property = property__		}_	};set,the,property,to,compare,p,if,the,property,was,the,same,as,the,current,the,sort,is,reversed,if,toggle,ascending,on,property,is,activated,else,simply,ignored,see,set,toggle,ascending,on,property;public,void,set,property,string,property,if,string,utils,has,length,property,this,property,else,if,is,toggle,ascending,on,property,this,ascending,property,equals,this,property,this,ascending,this,property,property
MutableSortDefinition -> public void setProperty(String property);1385501137;Set the property to compare._<p>If the property was the same as the current, the sort is reversed if_"toggleAscendingOnProperty" is activated, else simply ignored._@see #setToggleAscendingOnProperty;public void setProperty(String property) {_		if (!StringUtils.hasLength(property)) {_			this.property = ""__		}_		else {_			_			if (isToggleAscendingOnProperty()) {_				this.ascending = (!property.equals(this.property) || !this.ascending)__			}_			this.property = property__		}_	};set,the,property,to,compare,p,if,the,property,was,the,same,as,the,current,the,sort,is,reversed,if,toggle,ascending,on,property,is,activated,else,simply,ignored,see,set,toggle,ascending,on,property;public,void,set,property,string,property,if,string,utils,has,length,property,this,property,else,if,is,toggle,ascending,on,property,this,ascending,property,equals,this,property,this,ascending,this,property,property
MutableSortDefinition -> public void setAscending(boolean ascending);1328020251;Set whether to sort ascending (true) or descending (false).;public void setAscending(boolean ascending) {_		this.ascending = ascending__	};set,whether,to,sort,ascending,true,or,descending,false;public,void,set,ascending,boolean,ascending,this,ascending,ascending
MutableSortDefinition -> public void setAscending(boolean ascending);1356735495;Set whether to sort ascending (true) or descending (false).;public void setAscending(boolean ascending) {_		this.ascending = ascending__	};set,whether,to,sort,ascending,true,or,descending,false;public,void,set,ascending,boolean,ascending,this,ascending,ascending
MutableSortDefinition -> public void setAscending(boolean ascending);1357119239;Set whether to sort ascending (true) or descending (false).;public void setAscending(boolean ascending) {_		this.ascending = ascending__	};set,whether,to,sort,ascending,true,or,descending,false;public,void,set,ascending,boolean,ascending,this,ascending,ascending
MutableSortDefinition -> public void setAscending(boolean ascending);1368482696;Set whether to sort ascending (true) or descending (false).;public void setAscending(boolean ascending) {_		this.ascending = ascending__	};set,whether,to,sort,ascending,true,or,descending,false;public,void,set,ascending,boolean,ascending,this,ascending,ascending
MutableSortDefinition -> public void setAscending(boolean ascending);1385501137;Set whether to sort ascending (true) or descending (false).;public void setAscending(boolean ascending) {_		this.ascending = ascending__	};set,whether,to,sort,ascending,true,or,descending,false;public,void,set,ascending,boolean,ascending,this,ascending,ascending
MutableSortDefinition -> public boolean isToggleAscendingOnProperty();1328020251;Return whether to toggle the ascending flag if the same property gets set again_(that is, {@link #setProperty} gets called with already set property name again).;public boolean isToggleAscendingOnProperty() {_		return this.toggleAscendingOnProperty__	};return,whether,to,toggle,the,ascending,flag,if,the,same,property,gets,set,again,that,is,link,set,property,gets,called,with,already,set,property,name,again;public,boolean,is,toggle,ascending,on,property,return,this,toggle,ascending,on,property
MutableSortDefinition -> public boolean isToggleAscendingOnProperty();1356735495;Return whether to toggle the ascending flag if the same property gets set again_(that is, {@link #setProperty} gets called with already set property name again).;public boolean isToggleAscendingOnProperty() {_		return this.toggleAscendingOnProperty__	};return,whether,to,toggle,the,ascending,flag,if,the,same,property,gets,set,again,that,is,link,set,property,gets,called,with,already,set,property,name,again;public,boolean,is,toggle,ascending,on,property,return,this,toggle,ascending,on,property
MutableSortDefinition -> public boolean isToggleAscendingOnProperty();1357119239;Return whether to toggle the ascending flag if the same property gets set again_(that is, {@link #setProperty} gets called with already set property name again).;public boolean isToggleAscendingOnProperty() {_		return this.toggleAscendingOnProperty__	};return,whether,to,toggle,the,ascending,flag,if,the,same,property,gets,set,again,that,is,link,set,property,gets,called,with,already,set,property,name,again;public,boolean,is,toggle,ascending,on,property,return,this,toggle,ascending,on,property
MutableSortDefinition -> public boolean isToggleAscendingOnProperty();1368482696;Return whether to toggle the ascending flag if the same property gets set again_(that is, {@link #setProperty} gets called with already set property name again).;public boolean isToggleAscendingOnProperty() {_		return this.toggleAscendingOnProperty__	};return,whether,to,toggle,the,ascending,flag,if,the,same,property,gets,set,again,that,is,link,set,property,gets,called,with,already,set,property,name,again;public,boolean,is,toggle,ascending,on,property,return,this,toggle,ascending,on,property
MutableSortDefinition -> public boolean isToggleAscendingOnProperty();1385501137;Return whether to toggle the ascending flag if the same property gets set again_(that is, {@code setProperty} gets called with already set property name again).;public boolean isToggleAscendingOnProperty() {_		return this.toggleAscendingOnProperty__	};return,whether,to,toggle,the,ascending,flag,if,the,same,property,gets,set,again,that,is,code,set,property,gets,called,with,already,set,property,name,again;public,boolean,is,toggle,ascending,on,property,return,this,toggle,ascending,on,property
