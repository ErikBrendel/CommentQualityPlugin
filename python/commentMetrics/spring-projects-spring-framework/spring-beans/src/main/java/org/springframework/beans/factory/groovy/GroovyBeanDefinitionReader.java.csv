# id;timestamp;commentText;codeText;commentWords;codeWords
GroovyBeanDefinitionReader -> public GroovyBeanDefinitionReader beans(Closure closure);1503319306;Defines a set of beans for the given block or closure._@param closure the block or closure_@return this {@code GroovyBeanDefinitionReader} instance;public GroovyBeanDefinitionReader beans(Closure closure) {_		return invokeBeanDefiningClosure(closure)__	};defines,a,set,of,beans,for,the,given,block,or,closure,param,closure,the,block,or,closure,return,this,code,groovy,bean,definition,reader,instance;public,groovy,bean,definition,reader,beans,closure,closure,return,invoke,bean,defining,closure,closure
GroovyBeanDefinitionReader -> public GroovyBeanDefinitionReader beans(Closure closure);1506097334;Defines a set of beans for the given block or closure._@param closure the block or closure_@return this {@code GroovyBeanDefinitionReader} instance;public GroovyBeanDefinitionReader beans(Closure closure) {_		return invokeBeanDefiningClosure(closure)__	};defines,a,set,of,beans,for,the,given,block,or,closure,param,closure,the,block,or,closure,return,this,code,groovy,bean,definition,reader,instance;public,groovy,bean,definition,reader,beans,closure,closure,return,invoke,bean,defining,closure,closure
GroovyBeanDefinitionReader -> public GroovyBeanDefinitionReader beans(Closure closure);1519771074;Defines a set of beans for the given block or closure._@param closure the block or closure_@return this {@code GroovyBeanDefinitionReader} instance;public GroovyBeanDefinitionReader beans(Closure closure) {_		return invokeBeanDefiningClosure(closure)__	};defines,a,set,of,beans,for,the,given,block,or,closure,param,closure,the,block,or,closure,return,this,code,groovy,bean,definition,reader,instance;public,groovy,bean,definition,reader,beans,closure,closure,return,invoke,bean,defining,closure,closure
GroovyBeanDefinitionReader -> public GroovyBeanDefinitionReader beans(Closure closure);1519832519;Defines a set of beans for the given block or closure._@param closure the block or closure_@return this {@code GroovyBeanDefinitionReader} instance;public GroovyBeanDefinitionReader beans(Closure closure) {_		return invokeBeanDefiningClosure(closure)__	};defines,a,set,of,beans,for,the,given,block,or,closure,param,closure,the,block,or,closure,return,this,code,groovy,bean,definition,reader,instance;public,groovy,bean,definition,reader,beans,closure,closure,return,invoke,bean,defining,closure,closure
GroovyBeanDefinitionReader -> public GroovyBeanDefinitionReader beans(Closure closure);1519859718;Defines a set of beans for the given block or closure._@param closure the block or closure_@return this {@code GroovyBeanDefinitionReader} instance;public GroovyBeanDefinitionReader beans(Closure closure) {_		return invokeBeanDefiningClosure(closure)__	};defines,a,set,of,beans,for,the,given,block,or,closure,param,closure,the,block,or,closure,return,this,code,groovy,bean,definition,reader,instance;public,groovy,bean,definition,reader,beans,closure,closure,return,invoke,bean,defining,closure,closure
GroovyBeanDefinitionReader -> public GroovyBeanDefinitionReader beans(Closure closure);1520529117;Defines a set of beans for the given block or closure._@param closure the block or closure_@return this {@code GroovyBeanDefinitionReader} instance;public GroovyBeanDefinitionReader beans(Closure closure) {_		return invokeBeanDefiningClosure(closure)__	};defines,a,set,of,beans,for,the,given,block,or,closure,param,closure,the,block,or,closure,return,this,code,groovy,bean,definition,reader,instance;public,groovy,bean,definition,reader,beans,closure,closure,return,invoke,bean,defining,closure,closure
GroovyBeanDefinitionReader -> public GroovyBeanDefinitionReader beans(Closure closure);1522359230;Defines a set of beans for the given block or closure._@param closure the block or closure_@return this {@code GroovyBeanDefinitionReader} instance;public GroovyBeanDefinitionReader beans(Closure closure) {_		return invokeBeanDefiningClosure(closure)__	};defines,a,set,of,beans,for,the,given,block,or,closure,param,closure,the,block,or,closure,return,this,code,groovy,bean,definition,reader,instance;public,groovy,bean,definition,reader,beans,closure,closure,return,invoke,bean,defining,closure,closure
GroovyBeanDefinitionReader -> public GroovyBeanDefinitionReader beans(Closure closure);1530174524;Defines a set of beans for the given block or closure._@param closure the block or closure_@return this {@code GroovyBeanDefinitionReader} instance;public GroovyBeanDefinitionReader beans(Closure closure) {_		return invokeBeanDefiningClosure(closure)__	};defines,a,set,of,beans,for,the,given,block,or,closure,param,closure,the,block,or,closure,return,this,code,groovy,bean,definition,reader,instance;public,groovy,bean,definition,reader,beans,closure,closure,return,invoke,bean,defining,closure,closure
GroovyBeanDefinitionReader -> public GroovyBeanDefinitionReader beans(Closure closure);1530174524;Defines a set of beans for the given block or closure._@param closure the block or closure_@return this {@code GroovyBeanDefinitionReader} instance;public GroovyBeanDefinitionReader beans(Closure closure) {_		return invokeBeanDefiningClosure(closure)__	};defines,a,set,of,beans,for,the,given,block,or,closure,param,closure,the,block,or,closure,return,this,code,groovy,bean,definition,reader,instance;public,groovy,bean,definition,reader,beans,closure,closure,return,invoke,bean,defining,closure,closure
GroovyBeanDefinitionReader -> public GroovyBeanDefinitionReader beans(Closure closure);1530174524;Defines a set of beans for the given block or closure._@param closure the block or closure_@return this {@code GroovyBeanDefinitionReader} instance;public GroovyBeanDefinitionReader beans(Closure closure) {_		return invokeBeanDefiningClosure(closure)__	};defines,a,set,of,beans,for,the,given,block,or,closure,param,closure,the,block,or,closure,return,this,code,groovy,bean,definition,reader,instance;public,groovy,bean,definition,reader,beans,closure,closure,return,invoke,bean,defining,closure,closure
GroovyBeanDefinitionReader -> public GroovyBeanDefinitionReader beans(Closure closure);1530190293;Defines a set of beans for the given block or closure._@param closure the block or closure_@return this {@code GroovyBeanDefinitionReader} instance;public GroovyBeanDefinitionReader beans(Closure closure) {_		return invokeBeanDefiningClosure(closure)__	};defines,a,set,of,beans,for,the,given,block,or,closure,param,closure,the,block,or,closure,return,this,code,groovy,bean,definition,reader,instance;public,groovy,bean,definition,reader,beans,closure,closure,return,invoke,bean,defining,closure,closure
GroovyBeanDefinitionReader -> public GroovyBeanDefinitionReader beans(Closure closure);1532706365;Defines a set of beans for the given block or closure._@param closure the block or closure_@return this {@code GroovyBeanDefinitionReader} instance;public GroovyBeanDefinitionReader beans(Closure closure) {_		return invokeBeanDefiningClosure(closure)__	};defines,a,set,of,beans,for,the,given,block,or,closure,param,closure,the,block,or,closure,return,this,code,groovy,bean,definition,reader,instance;public,groovy,bean,definition,reader,beans,closure,closure,return,invoke,bean,defining,closure,closure
GroovyBeanDefinitionReader -> private Object manageListIfNecessary(List<?> list);1503319306;Checks whether there are any {@link RuntimeBeanReference}s inside the {@link List}_and converts it to a {@link ManagedList} if necessary._@param list the original List_@return either the original list or a managed copy of it;private Object manageListIfNecessary(List<?> list) {_		boolean containsRuntimeRefs = false__		for (Object element : list) {_			if (element instanceof RuntimeBeanReference) {_				containsRuntimeRefs = true__				break__			}_		}_		if (containsRuntimeRefs) {_			List<Object> managedList = new ManagedList<>()__			managedList.addAll(list)__			return managedList__		}_		return list__	};checks,whether,there,are,any,link,runtime,bean,reference,s,inside,the,link,list,and,converts,it,to,a,link,managed,list,if,necessary,param,list,the,original,list,return,either,the,original,list,or,a,managed,copy,of,it;private,object,manage,list,if,necessary,list,list,boolean,contains,runtime,refs,false,for,object,element,list,if,element,instanceof,runtime,bean,reference,contains,runtime,refs,true,break,if,contains,runtime,refs,list,object,managed,list,new,managed,list,managed,list,add,all,list,return,managed,list,return,list
GroovyBeanDefinitionReader -> private Object manageListIfNecessary(List<?> list);1506097334;Checks whether there are any {@link RuntimeBeanReference}s inside the {@link List}_and converts it to a {@link ManagedList} if necessary._@param list the original List_@return either the original list or a managed copy of it;private Object manageListIfNecessary(List<?> list) {_		boolean containsRuntimeRefs = false__		for (Object element : list) {_			if (element instanceof RuntimeBeanReference) {_				containsRuntimeRefs = true__				break__			}_		}_		if (containsRuntimeRefs) {_			List<Object> managedList = new ManagedList<>()__			managedList.addAll(list)__			return managedList__		}_		return list__	};checks,whether,there,are,any,link,runtime,bean,reference,s,inside,the,link,list,and,converts,it,to,a,link,managed,list,if,necessary,param,list,the,original,list,return,either,the,original,list,or,a,managed,copy,of,it;private,object,manage,list,if,necessary,list,list,boolean,contains,runtime,refs,false,for,object,element,list,if,element,instanceof,runtime,bean,reference,contains,runtime,refs,true,break,if,contains,runtime,refs,list,object,managed,list,new,managed,list,managed,list,add,all,list,return,managed,list,return,list
GroovyBeanDefinitionReader -> private Object manageListIfNecessary(List<?> list);1519771074;Checks whether there are any {@link RuntimeBeanReference}s inside the {@link List}_and converts it to a {@link ManagedList} if necessary._@param list the original List_@return either the original list or a managed copy of it;private Object manageListIfNecessary(List<?> list) {_		boolean containsRuntimeRefs = false__		for (Object element : list) {_			if (element instanceof RuntimeBeanReference) {_				containsRuntimeRefs = true__				break__			}_		}_		if (containsRuntimeRefs) {_			List<Object> managedList = new ManagedList<>()__			managedList.addAll(list)__			return managedList__		}_		return list__	};checks,whether,there,are,any,link,runtime,bean,reference,s,inside,the,link,list,and,converts,it,to,a,link,managed,list,if,necessary,param,list,the,original,list,return,either,the,original,list,or,a,managed,copy,of,it;private,object,manage,list,if,necessary,list,list,boolean,contains,runtime,refs,false,for,object,element,list,if,element,instanceof,runtime,bean,reference,contains,runtime,refs,true,break,if,contains,runtime,refs,list,object,managed,list,new,managed,list,managed,list,add,all,list,return,managed,list,return,list
GroovyBeanDefinitionReader -> private Object manageListIfNecessary(List<?> list);1519832519;Checks whether there are any {@link RuntimeBeanReference}s inside the {@link List}_and converts it to a {@link ManagedList} if necessary._@param list the original List_@return either the original list or a managed copy of it;private Object manageListIfNecessary(List<?> list) {_		boolean containsRuntimeRefs = false__		for (Object element : list) {_			if (element instanceof RuntimeBeanReference) {_				containsRuntimeRefs = true__				break__			}_		}_		if (containsRuntimeRefs) {_			List<Object> managedList = new ManagedList<>()__			managedList.addAll(list)__			return managedList__		}_		return list__	};checks,whether,there,are,any,link,runtime,bean,reference,s,inside,the,link,list,and,converts,it,to,a,link,managed,list,if,necessary,param,list,the,original,list,return,either,the,original,list,or,a,managed,copy,of,it;private,object,manage,list,if,necessary,list,list,boolean,contains,runtime,refs,false,for,object,element,list,if,element,instanceof,runtime,bean,reference,contains,runtime,refs,true,break,if,contains,runtime,refs,list,object,managed,list,new,managed,list,managed,list,add,all,list,return,managed,list,return,list
GroovyBeanDefinitionReader -> private Object manageListIfNecessary(List<?> list);1519859718;Checks whether there are any {@link RuntimeBeanReference}s inside the {@link List}_and converts it to a {@link ManagedList} if necessary._@param list the original List_@return either the original list or a managed copy of it;private Object manageListIfNecessary(List<?> list) {_		boolean containsRuntimeRefs = false__		for (Object element : list) {_			if (element instanceof RuntimeBeanReference) {_				containsRuntimeRefs = true__				break__			}_		}_		if (containsRuntimeRefs) {_			List<Object> managedList = new ManagedList<>()__			managedList.addAll(list)__			return managedList__		}_		return list__	};checks,whether,there,are,any,link,runtime,bean,reference,s,inside,the,link,list,and,converts,it,to,a,link,managed,list,if,necessary,param,list,the,original,list,return,either,the,original,list,or,a,managed,copy,of,it;private,object,manage,list,if,necessary,list,list,boolean,contains,runtime,refs,false,for,object,element,list,if,element,instanceof,runtime,bean,reference,contains,runtime,refs,true,break,if,contains,runtime,refs,list,object,managed,list,new,managed,list,managed,list,add,all,list,return,managed,list,return,list
GroovyBeanDefinitionReader -> private Object manageListIfNecessary(List<?> list);1520529117;Checks whether there are any {@link RuntimeBeanReference}s inside the {@link List}_and converts it to a {@link ManagedList} if necessary._@param list the original List_@return either the original list or a managed copy of it;private Object manageListIfNecessary(List<?> list) {_		boolean containsRuntimeRefs = false__		for (Object element : list) {_			if (element instanceof RuntimeBeanReference) {_				containsRuntimeRefs = true__				break__			}_		}_		if (containsRuntimeRefs) {_			List<Object> managedList = new ManagedList<>()__			managedList.addAll(list)__			return managedList__		}_		return list__	};checks,whether,there,are,any,link,runtime,bean,reference,s,inside,the,link,list,and,converts,it,to,a,link,managed,list,if,necessary,param,list,the,original,list,return,either,the,original,list,or,a,managed,copy,of,it;private,object,manage,list,if,necessary,list,list,boolean,contains,runtime,refs,false,for,object,element,list,if,element,instanceof,runtime,bean,reference,contains,runtime,refs,true,break,if,contains,runtime,refs,list,object,managed,list,new,managed,list,managed,list,add,all,list,return,managed,list,return,list
GroovyBeanDefinitionReader -> private Object manageListIfNecessary(List<?> list);1522359230;Checks whether there are any {@link RuntimeBeanReference}s inside the {@link List}_and converts it to a {@link ManagedList} if necessary._@param list the original List_@return either the original list or a managed copy of it;private Object manageListIfNecessary(List<?> list) {_		boolean containsRuntimeRefs = false__		for (Object element : list) {_			if (element instanceof RuntimeBeanReference) {_				containsRuntimeRefs = true__				break__			}_		}_		if (containsRuntimeRefs) {_			List<Object> managedList = new ManagedList<>()__			managedList.addAll(list)__			return managedList__		}_		return list__	};checks,whether,there,are,any,link,runtime,bean,reference,s,inside,the,link,list,and,converts,it,to,a,link,managed,list,if,necessary,param,list,the,original,list,return,either,the,original,list,or,a,managed,copy,of,it;private,object,manage,list,if,necessary,list,list,boolean,contains,runtime,refs,false,for,object,element,list,if,element,instanceof,runtime,bean,reference,contains,runtime,refs,true,break,if,contains,runtime,refs,list,object,managed,list,new,managed,list,managed,list,add,all,list,return,managed,list,return,list
GroovyBeanDefinitionReader -> private Object manageListIfNecessary(List<?> list);1530174524;Checks whether there are any {@link RuntimeBeanReference RuntimeBeanReferences}_inside the {@link List} and converts it to a {@link ManagedList} if necessary._@param list the original List_@return either the original list or a managed copy of it;private Object manageListIfNecessary(List<?> list) {_		boolean containsRuntimeRefs = false__		for (Object element : list) {_			if (element instanceof RuntimeBeanReference) {_				containsRuntimeRefs = true__				break__			}_		}_		if (containsRuntimeRefs) {_			List<Object> managedList = new ManagedList<>()__			managedList.addAll(list)__			return managedList__		}_		return list__	};checks,whether,there,are,any,link,runtime,bean,reference,runtime,bean,references,inside,the,link,list,and,converts,it,to,a,link,managed,list,if,necessary,param,list,the,original,list,return,either,the,original,list,or,a,managed,copy,of,it;private,object,manage,list,if,necessary,list,list,boolean,contains,runtime,refs,false,for,object,element,list,if,element,instanceof,runtime,bean,reference,contains,runtime,refs,true,break,if,contains,runtime,refs,list,object,managed,list,new,managed,list,managed,list,add,all,list,return,managed,list,return,list
GroovyBeanDefinitionReader -> private Object manageListIfNecessary(List<?> list);1530174524;Checks whether there are any {@link RuntimeBeanReference RuntimeBeanReferences}_inside the {@link List} and converts it to a {@link ManagedList} if necessary._@param list the original List_@return either the original list or a managed copy of it;private Object manageListIfNecessary(List<?> list) {_		boolean containsRuntimeRefs = false__		for (Object element : list) {_			if (element instanceof RuntimeBeanReference) {_				containsRuntimeRefs = true__				break__			}_		}_		if (containsRuntimeRefs) {_			List<Object> managedList = new ManagedList<>()__			managedList.addAll(list)__			return managedList__		}_		return list__	};checks,whether,there,are,any,link,runtime,bean,reference,runtime,bean,references,inside,the,link,list,and,converts,it,to,a,link,managed,list,if,necessary,param,list,the,original,list,return,either,the,original,list,or,a,managed,copy,of,it;private,object,manage,list,if,necessary,list,list,boolean,contains,runtime,refs,false,for,object,element,list,if,element,instanceof,runtime,bean,reference,contains,runtime,refs,true,break,if,contains,runtime,refs,list,object,managed,list,new,managed,list,managed,list,add,all,list,return,managed,list,return,list
GroovyBeanDefinitionReader -> private Object manageListIfNecessary(List<?> list);1530174524;Checks whether there are any {@link RuntimeBeanReference RuntimeBeanReferences}_inside the {@link List} and converts it to a {@link ManagedList} if necessary._@param list the original List_@return either the original list or a managed copy of it;private Object manageListIfNecessary(List<?> list) {_		boolean containsRuntimeRefs = false__		for (Object element : list) {_			if (element instanceof RuntimeBeanReference) {_				containsRuntimeRefs = true__				break__			}_		}_		if (containsRuntimeRefs) {_			List<Object> managedList = new ManagedList<>()__			managedList.addAll(list)__			return managedList__		}_		return list__	};checks,whether,there,are,any,link,runtime,bean,reference,runtime,bean,references,inside,the,link,list,and,converts,it,to,a,link,managed,list,if,necessary,param,list,the,original,list,return,either,the,original,list,or,a,managed,copy,of,it;private,object,manage,list,if,necessary,list,list,boolean,contains,runtime,refs,false,for,object,element,list,if,element,instanceof,runtime,bean,reference,contains,runtime,refs,true,break,if,contains,runtime,refs,list,object,managed,list,new,managed,list,managed,list,add,all,list,return,managed,list,return,list
GroovyBeanDefinitionReader -> private Object manageListIfNecessary(List<?> list);1530190293;Checks whether there are any {@link RuntimeBeanReference RuntimeBeanReferences}_inside the {@link List} and converts it to a {@link ManagedList} if necessary._@param list the original List_@return either the original list or a managed copy of it;private Object manageListIfNecessary(List<?> list) {_		boolean containsRuntimeRefs = false__		for (Object element : list) {_			if (element instanceof RuntimeBeanReference) {_				containsRuntimeRefs = true__				break__			}_		}_		if (containsRuntimeRefs) {_			List<Object> managedList = new ManagedList<>()__			managedList.addAll(list)__			return managedList__		}_		return list__	};checks,whether,there,are,any,link,runtime,bean,reference,runtime,bean,references,inside,the,link,list,and,converts,it,to,a,link,managed,list,if,necessary,param,list,the,original,list,return,either,the,original,list,or,a,managed,copy,of,it;private,object,manage,list,if,necessary,list,list,boolean,contains,runtime,refs,false,for,object,element,list,if,element,instanceof,runtime,bean,reference,contains,runtime,refs,true,break,if,contains,runtime,refs,list,object,managed,list,new,managed,list,managed,list,add,all,list,return,managed,list,return,list
GroovyBeanDefinitionReader -> private Object manageListIfNecessary(List<?> list);1532706365;Checks whether there are any {@link RuntimeBeanReference RuntimeBeanReferences}_inside the {@link List} and converts it to a {@link ManagedList} if necessary._@param list the original List_@return either the original list or a managed copy of it;private Object manageListIfNecessary(List<?> list) {_		boolean containsRuntimeRefs = false__		for (Object element : list) {_			if (element instanceof RuntimeBeanReference) {_				containsRuntimeRefs = true__				break__			}_		}_		if (containsRuntimeRefs) {_			List<Object> managedList = new ManagedList<>()__			managedList.addAll(list)__			return managedList__		}_		return list__	};checks,whether,there,are,any,link,runtime,bean,reference,runtime,bean,references,inside,the,link,list,and,converts,it,to,a,link,managed,list,if,necessary,param,list,the,original,list,return,either,the,original,list,or,a,managed,copy,of,it;private,object,manage,list,if,necessary,list,list,boolean,contains,runtime,refs,false,for,object,element,list,if,element,instanceof,runtime,bean,reference,contains,runtime,refs,true,break,if,contains,runtime,refs,list,object,managed,list,new,managed,list,managed,list,add,all,list,return,managed,list,return,list
GroovyBeanDefinitionReader -> private GroovyBeanDefinitionWrapper invokeBeanDefiningMethod(String beanName, Object[] args);1503319306;This method is called when a bean definition node is called._@param beanName the name of the bean to define_@param args the arguments to the bean. The first argument is the class name, the last_argument is sometimes a closure. All the arguments in between are constructor arguments._@return the bean definition wrapper;private GroovyBeanDefinitionWrapper invokeBeanDefiningMethod(String beanName, Object[] args) {_		boolean hasClosureArgument = (args[args.length - 1] instanceof Closure)__		if (args[0] instanceof Class) {_			Class<?> beanClass = (Class<?>) args[0]__			if (args.length >= 1) {_				if (hasClosureArgument) {_					if (args.length - 1 != 1) {_						this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(_								beanName, beanClass, resolveConstructorArguments(args, 1, args.length - 1))__					}_					else {_						this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName, beanClass)__					}_				}_				else  {_					this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(_							beanName, beanClass, resolveConstructorArguments(args, 1, args.length))__				}__			}_		}_		else if (args[0] instanceof RuntimeBeanReference) {_			this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName)__			this.currentBeanDefinition.getBeanDefinition().setFactoryBeanName(((RuntimeBeanReference) args[0]).getBeanName())__		}_		else if (args[0] instanceof Map) {_			_			if (args.length > 1 && args[1] instanceof Class) {_				List constructorArgs = resolveConstructorArguments(args, 2, hasClosureArgument ? args.length - 1 : args.length)__				this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName, (Class)args[1], constructorArgs)__				Map namedArgs = (Map)args[0]__				for (Object o : namedArgs.keySet()) {_					String propName = (String) o__					setProperty(propName, namedArgs.get(propName))__				}_			}_			_			else {_				this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName)__				_				Map.Entry factoryBeanEntry = (Map.Entry) ((Map) args[0]).entrySet().iterator().next()__				_				_				int constructorArgsTest = hasClosureArgument?2:1__				_				if (args.length > constructorArgsTest){_					_					int endOfConstructArgs = (hasClosureArgument? args.length - 1 : args.length)__					this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName, null,_							resolveConstructorArguments(args, 1, endOfConstructArgs))__				}_				else {_					this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName)__				}_				this.currentBeanDefinition.getBeanDefinition().setFactoryBeanName(factoryBeanEntry.getKey().toString())__				this.currentBeanDefinition.getBeanDefinition().setFactoryMethodName(factoryBeanEntry.getValue().toString())__			}__		}_		else if (args[0] instanceof Closure) {_			this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName)__			this.currentBeanDefinition.getBeanDefinition().setAbstract(true)__		}_		else {_			List constructorArgs = resolveConstructorArguments(args, 0, hasClosureArgument ? args.length - 1 : args.length)__			currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName, null, constructorArgs)__		}__		if (hasClosureArgument) {_			Closure callable = (Closure) args[args.length - 1]__			callable.setDelegate(this)__			callable.setResolveStrategy(Closure.DELEGATE_FIRST)__			callable.call(new Object[]{currentBeanDefinition})__		}__		GroovyBeanDefinitionWrapper beanDefinition = currentBeanDefinition__		this.currentBeanDefinition = null__		beanDefinition.getBeanDefinition().setAttribute(GroovyBeanDefinitionWrapper.class.getName(), beanDefinition)__		getRegistry().registerBeanDefinition(beanName, beanDefinition.getBeanDefinition())__		return beanDefinition__	};this,method,is,called,when,a,bean,definition,node,is,called,param,bean,name,the,name,of,the,bean,to,define,param,args,the,arguments,to,the,bean,the,first,argument,is,the,class,name,the,last,argument,is,sometimes,a,closure,all,the,arguments,in,between,are,constructor,arguments,return,the,bean,definition,wrapper;private,groovy,bean,definition,wrapper,invoke,bean,defining,method,string,bean,name,object,args,boolean,has,closure,argument,args,args,length,1,instanceof,closure,if,args,0,instanceof,class,class,bean,class,class,args,0,if,args,length,1,if,has,closure,argument,if,args,length,1,1,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,bean,class,resolve,constructor,arguments,args,1,args,length,1,else,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,bean,class,else,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,bean,class,resolve,constructor,arguments,args,1,args,length,else,if,args,0,instanceof,runtime,bean,reference,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,this,current,bean,definition,get,bean,definition,set,factory,bean,name,runtime,bean,reference,args,0,get,bean,name,else,if,args,0,instanceof,map,if,args,length,1,args,1,instanceof,class,list,constructor,args,resolve,constructor,arguments,args,2,has,closure,argument,args,length,1,args,length,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,class,args,1,constructor,args,map,named,args,map,args,0,for,object,o,named,args,key,set,string,prop,name,string,o,set,property,prop,name,named,args,get,prop,name,else,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,map,entry,factory,bean,entry,map,entry,map,args,0,entry,set,iterator,next,int,constructor,args,test,has,closure,argument,2,1,if,args,length,constructor,args,test,int,end,of,construct,args,has,closure,argument,args,length,1,args,length,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,null,resolve,constructor,arguments,args,1,end,of,construct,args,else,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,this,current,bean,definition,get,bean,definition,set,factory,bean,name,factory,bean,entry,get,key,to,string,this,current,bean,definition,get,bean,definition,set,factory,method,name,factory,bean,entry,get,value,to,string,else,if,args,0,instanceof,closure,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,this,current,bean,definition,get,bean,definition,set,abstract,true,else,list,constructor,args,resolve,constructor,arguments,args,0,has,closure,argument,args,length,1,args,length,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,null,constructor,args,if,has,closure,argument,closure,callable,closure,args,args,length,1,callable,set,delegate,this,callable,set,resolve,strategy,closure,callable,call,new,object,current,bean,definition,groovy,bean,definition,wrapper,bean,definition,current,bean,definition,this,current,bean,definition,null,bean,definition,get,bean,definition,set,attribute,groovy,bean,definition,wrapper,class,get,name,bean,definition,get,registry,register,bean,definition,bean,name,bean,definition,get,bean,definition,return,bean,definition
GroovyBeanDefinitionReader -> private GroovyBeanDefinitionWrapper invokeBeanDefiningMethod(String beanName, Object[] args);1506097334;This method is called when a bean definition node is called._@param beanName the name of the bean to define_@param args the arguments to the bean. The first argument is the class name, the last_argument is sometimes a closure. All the arguments in between are constructor arguments._@return the bean definition wrapper;private GroovyBeanDefinitionWrapper invokeBeanDefiningMethod(String beanName, Object[] args) {_		boolean hasClosureArgument = (args[args.length - 1] instanceof Closure)__		if (args[0] instanceof Class) {_			Class<?> beanClass = (Class<?>) args[0]__			if (hasClosureArgument) {_				if (args.length - 1 != 1) {_					this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(_							beanName, beanClass, resolveConstructorArguments(args, 1, args.length - 1))__				}_				else {_					this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName, beanClass)__				}_			}_			else  {_				this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(_						beanName, beanClass, resolveConstructorArguments(args, 1, args.length))__			}_		}_		else if (args[0] instanceof RuntimeBeanReference) {_			this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName)__			this.currentBeanDefinition.getBeanDefinition().setFactoryBeanName(((RuntimeBeanReference) args[0]).getBeanName())__		}_		else if (args[0] instanceof Map) {_			_			if (args.length > 1 && args[1] instanceof Class) {_				List constructorArgs = resolveConstructorArguments(args, 2, hasClosureArgument ? args.length - 1 : args.length)__				this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName, (Class)args[1], constructorArgs)__				Map namedArgs = (Map)args[0]__				for (Object o : namedArgs.keySet()) {_					String propName = (String) o__					setProperty(propName, namedArgs.get(propName))__				}_			}_			_			else {_				this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName)__				_				Map.Entry factoryBeanEntry = (Map.Entry) ((Map) args[0]).entrySet().iterator().next()__				_				_				int constructorArgsTest = hasClosureArgument?2:1__				_				if (args.length > constructorArgsTest){_					_					int endOfConstructArgs = (hasClosureArgument? args.length - 1 : args.length)__					this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName, null,_							resolveConstructorArguments(args, 1, endOfConstructArgs))__				}_				else {_					this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName)__				}_				this.currentBeanDefinition.getBeanDefinition().setFactoryBeanName(factoryBeanEntry.getKey().toString())__				this.currentBeanDefinition.getBeanDefinition().setFactoryMethodName(factoryBeanEntry.getValue().toString())__			}__		}_		else if (args[0] instanceof Closure) {_			this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName)__			this.currentBeanDefinition.getBeanDefinition().setAbstract(true)__		}_		else {_			List constructorArgs = resolveConstructorArguments(args, 0, hasClosureArgument ? args.length - 1 : args.length)__			currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName, null, constructorArgs)__		}__		if (hasClosureArgument) {_			Closure callable = (Closure) args[args.length - 1]__			callable.setDelegate(this)__			callable.setResolveStrategy(Closure.DELEGATE_FIRST)__			callable.call(new Object[]{currentBeanDefinition})__		}__		GroovyBeanDefinitionWrapper beanDefinition = currentBeanDefinition__		this.currentBeanDefinition = null__		beanDefinition.getBeanDefinition().setAttribute(GroovyBeanDefinitionWrapper.class.getName(), beanDefinition)__		getRegistry().registerBeanDefinition(beanName, beanDefinition.getBeanDefinition())__		return beanDefinition__	};this,method,is,called,when,a,bean,definition,node,is,called,param,bean,name,the,name,of,the,bean,to,define,param,args,the,arguments,to,the,bean,the,first,argument,is,the,class,name,the,last,argument,is,sometimes,a,closure,all,the,arguments,in,between,are,constructor,arguments,return,the,bean,definition,wrapper;private,groovy,bean,definition,wrapper,invoke,bean,defining,method,string,bean,name,object,args,boolean,has,closure,argument,args,args,length,1,instanceof,closure,if,args,0,instanceof,class,class,bean,class,class,args,0,if,has,closure,argument,if,args,length,1,1,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,bean,class,resolve,constructor,arguments,args,1,args,length,1,else,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,bean,class,else,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,bean,class,resolve,constructor,arguments,args,1,args,length,else,if,args,0,instanceof,runtime,bean,reference,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,this,current,bean,definition,get,bean,definition,set,factory,bean,name,runtime,bean,reference,args,0,get,bean,name,else,if,args,0,instanceof,map,if,args,length,1,args,1,instanceof,class,list,constructor,args,resolve,constructor,arguments,args,2,has,closure,argument,args,length,1,args,length,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,class,args,1,constructor,args,map,named,args,map,args,0,for,object,o,named,args,key,set,string,prop,name,string,o,set,property,prop,name,named,args,get,prop,name,else,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,map,entry,factory,bean,entry,map,entry,map,args,0,entry,set,iterator,next,int,constructor,args,test,has,closure,argument,2,1,if,args,length,constructor,args,test,int,end,of,construct,args,has,closure,argument,args,length,1,args,length,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,null,resolve,constructor,arguments,args,1,end,of,construct,args,else,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,this,current,bean,definition,get,bean,definition,set,factory,bean,name,factory,bean,entry,get,key,to,string,this,current,bean,definition,get,bean,definition,set,factory,method,name,factory,bean,entry,get,value,to,string,else,if,args,0,instanceof,closure,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,this,current,bean,definition,get,bean,definition,set,abstract,true,else,list,constructor,args,resolve,constructor,arguments,args,0,has,closure,argument,args,length,1,args,length,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,null,constructor,args,if,has,closure,argument,closure,callable,closure,args,args,length,1,callable,set,delegate,this,callable,set,resolve,strategy,closure,callable,call,new,object,current,bean,definition,groovy,bean,definition,wrapper,bean,definition,current,bean,definition,this,current,bean,definition,null,bean,definition,get,bean,definition,set,attribute,groovy,bean,definition,wrapper,class,get,name,bean,definition,get,registry,register,bean,definition,bean,name,bean,definition,get,bean,definition,return,bean,definition
GroovyBeanDefinitionReader -> private GroovyBeanDefinitionWrapper invokeBeanDefiningMethod(String beanName, Object[] args);1519771074;This method is called when a bean definition node is called._@param beanName the name of the bean to define_@param args the arguments to the bean. The first argument is the class name, the last_argument is sometimes a closure. All the arguments in between are constructor arguments._@return the bean definition wrapper;private GroovyBeanDefinitionWrapper invokeBeanDefiningMethod(String beanName, Object[] args) {_		boolean hasClosureArgument = (args[args.length - 1] instanceof Closure)__		if (args[0] instanceof Class) {_			Class<?> beanClass = (Class<?>) args[0]__			if (hasClosureArgument) {_				if (args.length - 1 != 1) {_					this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(_							beanName, beanClass, resolveConstructorArguments(args, 1, args.length - 1))__				}_				else {_					this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName, beanClass)__				}_			}_			else  {_				this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(_						beanName, beanClass, resolveConstructorArguments(args, 1, args.length))__			}_		}_		else if (args[0] instanceof RuntimeBeanReference) {_			this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName)__			this.currentBeanDefinition.getBeanDefinition().setFactoryBeanName(((RuntimeBeanReference) args[0]).getBeanName())__		}_		else if (args[0] instanceof Map) {_			_			if (args.length > 1 && args[1] instanceof Class) {_				List constructorArgs = resolveConstructorArguments(args, 2, hasClosureArgument ? args.length - 1 : args.length)__				this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName, (Class)args[1], constructorArgs)__				Map namedArgs = (Map)args[0]__				for (Object o : namedArgs.keySet()) {_					String propName = (String) o__					setProperty(propName, namedArgs.get(propName))__				}_			}_			_			else {_				this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName)__				_				Map.Entry factoryBeanEntry = (Map.Entry) ((Map) args[0]).entrySet().iterator().next()__				_				_				int constructorArgsTest = hasClosureArgument?2:1__				_				if (args.length > constructorArgsTest){_					_					int endOfConstructArgs = (hasClosureArgument? args.length - 1 : args.length)__					this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName, null,_							resolveConstructorArguments(args, 1, endOfConstructArgs))__				}_				else {_					this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName)__				}_				this.currentBeanDefinition.getBeanDefinition().setFactoryBeanName(factoryBeanEntry.getKey().toString())__				this.currentBeanDefinition.getBeanDefinition().setFactoryMethodName(factoryBeanEntry.getValue().toString())__			}__		}_		else if (args[0] instanceof Closure) {_			this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName)__			this.currentBeanDefinition.getBeanDefinition().setAbstract(true)__		}_		else {_			List constructorArgs = resolveConstructorArguments(args, 0, hasClosureArgument ? args.length - 1 : args.length)__			currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName, null, constructorArgs)__		}__		if (hasClosureArgument) {_			Closure callable = (Closure) args[args.length - 1]__			callable.setDelegate(this)__			callable.setResolveStrategy(Closure.DELEGATE_FIRST)__			callable.call(currentBeanDefinition)__		}__		GroovyBeanDefinitionWrapper beanDefinition = currentBeanDefinition__		this.currentBeanDefinition = null__		beanDefinition.getBeanDefinition().setAttribute(GroovyBeanDefinitionWrapper.class.getName(), beanDefinition)__		getRegistry().registerBeanDefinition(beanName, beanDefinition.getBeanDefinition())__		return beanDefinition__	};this,method,is,called,when,a,bean,definition,node,is,called,param,bean,name,the,name,of,the,bean,to,define,param,args,the,arguments,to,the,bean,the,first,argument,is,the,class,name,the,last,argument,is,sometimes,a,closure,all,the,arguments,in,between,are,constructor,arguments,return,the,bean,definition,wrapper;private,groovy,bean,definition,wrapper,invoke,bean,defining,method,string,bean,name,object,args,boolean,has,closure,argument,args,args,length,1,instanceof,closure,if,args,0,instanceof,class,class,bean,class,class,args,0,if,has,closure,argument,if,args,length,1,1,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,bean,class,resolve,constructor,arguments,args,1,args,length,1,else,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,bean,class,else,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,bean,class,resolve,constructor,arguments,args,1,args,length,else,if,args,0,instanceof,runtime,bean,reference,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,this,current,bean,definition,get,bean,definition,set,factory,bean,name,runtime,bean,reference,args,0,get,bean,name,else,if,args,0,instanceof,map,if,args,length,1,args,1,instanceof,class,list,constructor,args,resolve,constructor,arguments,args,2,has,closure,argument,args,length,1,args,length,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,class,args,1,constructor,args,map,named,args,map,args,0,for,object,o,named,args,key,set,string,prop,name,string,o,set,property,prop,name,named,args,get,prop,name,else,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,map,entry,factory,bean,entry,map,entry,map,args,0,entry,set,iterator,next,int,constructor,args,test,has,closure,argument,2,1,if,args,length,constructor,args,test,int,end,of,construct,args,has,closure,argument,args,length,1,args,length,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,null,resolve,constructor,arguments,args,1,end,of,construct,args,else,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,this,current,bean,definition,get,bean,definition,set,factory,bean,name,factory,bean,entry,get,key,to,string,this,current,bean,definition,get,bean,definition,set,factory,method,name,factory,bean,entry,get,value,to,string,else,if,args,0,instanceof,closure,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,this,current,bean,definition,get,bean,definition,set,abstract,true,else,list,constructor,args,resolve,constructor,arguments,args,0,has,closure,argument,args,length,1,args,length,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,null,constructor,args,if,has,closure,argument,closure,callable,closure,args,args,length,1,callable,set,delegate,this,callable,set,resolve,strategy,closure,callable,call,current,bean,definition,groovy,bean,definition,wrapper,bean,definition,current,bean,definition,this,current,bean,definition,null,bean,definition,get,bean,definition,set,attribute,groovy,bean,definition,wrapper,class,get,name,bean,definition,get,registry,register,bean,definition,bean,name,bean,definition,get,bean,definition,return,bean,definition
GroovyBeanDefinitionReader -> private GroovyBeanDefinitionWrapper invokeBeanDefiningMethod(String beanName, Object[] args);1519832519;This method is called when a bean definition node is called._@param beanName the name of the bean to define_@param args the arguments to the bean. The first argument is the class name, the last_argument is sometimes a closure. All the arguments in between are constructor arguments._@return the bean definition wrapper;private GroovyBeanDefinitionWrapper invokeBeanDefiningMethod(String beanName, Object[] args) {_		boolean hasClosureArgument = (args[args.length - 1] instanceof Closure)__		if (args[0] instanceof Class) {_			Class<?> beanClass = (Class<?>) args[0]__			if (hasClosureArgument) {_				if (args.length - 1 != 1) {_					this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(_							beanName, beanClass, resolveConstructorArguments(args, 1, args.length - 1))__				}_				else {_					this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName, beanClass)__				}_			}_			else  {_				this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(_						beanName, beanClass, resolveConstructorArguments(args, 1, args.length))__			}_		}_		else if (args[0] instanceof RuntimeBeanReference) {_			this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName)__			this.currentBeanDefinition.getBeanDefinition().setFactoryBeanName(((RuntimeBeanReference) args[0]).getBeanName())__		}_		else if (args[0] instanceof Map) {_			_			if (args.length > 1 && args[1] instanceof Class) {_				List constructorArgs = resolveConstructorArguments(args, 2, hasClosureArgument ? args.length - 1 : args.length)__				this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName, (Class)args[1], constructorArgs)__				Map namedArgs = (Map)args[0]__				for (Object o : namedArgs.keySet()) {_					String propName = (String) o__					setProperty(propName, namedArgs.get(propName))__				}_			}_			_			else {_				this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName)__				_				Map.Entry factoryBeanEntry = (Map.Entry) ((Map) args[0]).entrySet().iterator().next()__				_				_				int constructorArgsTest = hasClosureArgument?2:1__				_				if (args.length > constructorArgsTest){_					_					int endOfConstructArgs = (hasClosureArgument? args.length - 1 : args.length)__					this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName, null,_							resolveConstructorArguments(args, 1, endOfConstructArgs))__				}_				else {_					this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName)__				}_				this.currentBeanDefinition.getBeanDefinition().setFactoryBeanName(factoryBeanEntry.getKey().toString())__				this.currentBeanDefinition.getBeanDefinition().setFactoryMethodName(factoryBeanEntry.getValue().toString())__			}__		}_		else if (args[0] instanceof Closure) {_			this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName)__			this.currentBeanDefinition.getBeanDefinition().setAbstract(true)__		}_		else {_			List constructorArgs = resolveConstructorArguments(args, 0, hasClosureArgument ? args.length - 1 : args.length)__			currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName, null, constructorArgs)__		}__		if (hasClosureArgument) {_			Closure callable = (Closure) args[args.length - 1]__			callable.setDelegate(this)__			callable.setResolveStrategy(Closure.DELEGATE_FIRST)__			callable.call(this.currentBeanDefinition)__		}__		GroovyBeanDefinitionWrapper beanDefinition = this.currentBeanDefinition__		this.currentBeanDefinition = null__		beanDefinition.getBeanDefinition().setAttribute(GroovyBeanDefinitionWrapper.class.getName(), beanDefinition)__		getRegistry().registerBeanDefinition(beanName, beanDefinition.getBeanDefinition())__		return beanDefinition__	};this,method,is,called,when,a,bean,definition,node,is,called,param,bean,name,the,name,of,the,bean,to,define,param,args,the,arguments,to,the,bean,the,first,argument,is,the,class,name,the,last,argument,is,sometimes,a,closure,all,the,arguments,in,between,are,constructor,arguments,return,the,bean,definition,wrapper;private,groovy,bean,definition,wrapper,invoke,bean,defining,method,string,bean,name,object,args,boolean,has,closure,argument,args,args,length,1,instanceof,closure,if,args,0,instanceof,class,class,bean,class,class,args,0,if,has,closure,argument,if,args,length,1,1,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,bean,class,resolve,constructor,arguments,args,1,args,length,1,else,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,bean,class,else,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,bean,class,resolve,constructor,arguments,args,1,args,length,else,if,args,0,instanceof,runtime,bean,reference,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,this,current,bean,definition,get,bean,definition,set,factory,bean,name,runtime,bean,reference,args,0,get,bean,name,else,if,args,0,instanceof,map,if,args,length,1,args,1,instanceof,class,list,constructor,args,resolve,constructor,arguments,args,2,has,closure,argument,args,length,1,args,length,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,class,args,1,constructor,args,map,named,args,map,args,0,for,object,o,named,args,key,set,string,prop,name,string,o,set,property,prop,name,named,args,get,prop,name,else,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,map,entry,factory,bean,entry,map,entry,map,args,0,entry,set,iterator,next,int,constructor,args,test,has,closure,argument,2,1,if,args,length,constructor,args,test,int,end,of,construct,args,has,closure,argument,args,length,1,args,length,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,null,resolve,constructor,arguments,args,1,end,of,construct,args,else,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,this,current,bean,definition,get,bean,definition,set,factory,bean,name,factory,bean,entry,get,key,to,string,this,current,bean,definition,get,bean,definition,set,factory,method,name,factory,bean,entry,get,value,to,string,else,if,args,0,instanceof,closure,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,this,current,bean,definition,get,bean,definition,set,abstract,true,else,list,constructor,args,resolve,constructor,arguments,args,0,has,closure,argument,args,length,1,args,length,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,null,constructor,args,if,has,closure,argument,closure,callable,closure,args,args,length,1,callable,set,delegate,this,callable,set,resolve,strategy,closure,callable,call,this,current,bean,definition,groovy,bean,definition,wrapper,bean,definition,this,current,bean,definition,this,current,bean,definition,null,bean,definition,get,bean,definition,set,attribute,groovy,bean,definition,wrapper,class,get,name,bean,definition,get,registry,register,bean,definition,bean,name,bean,definition,get,bean,definition,return,bean,definition
GroovyBeanDefinitionReader -> private GroovyBeanDefinitionWrapper invokeBeanDefiningMethod(String beanName, Object[] args);1519859718;This method is called when a bean definition node is called._@param beanName the name of the bean to define_@param args the arguments to the bean. The first argument is the class name, the last_argument is sometimes a closure. All the arguments in between are constructor arguments._@return the bean definition wrapper;private GroovyBeanDefinitionWrapper invokeBeanDefiningMethod(String beanName, Object[] args) {_		boolean hasClosureArgument = (args[args.length - 1] instanceof Closure)__		if (args[0] instanceof Class) {_			Class<?> beanClass = (Class<?>) args[0]__			if (hasClosureArgument) {_				if (args.length - 1 != 1) {_					this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(_							beanName, beanClass, resolveConstructorArguments(args, 1, args.length - 1))__				}_				else {_					this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName, beanClass)__				}_			}_			else  {_				this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(_						beanName, beanClass, resolveConstructorArguments(args, 1, args.length))__			}_		}_		else if (args[0] instanceof RuntimeBeanReference) {_			this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName)__			this.currentBeanDefinition.getBeanDefinition().setFactoryBeanName(((RuntimeBeanReference) args[0]).getBeanName())__		}_		else if (args[0] instanceof Map) {_			_			if (args.length > 1 && args[1] instanceof Class) {_				List constructorArgs = resolveConstructorArguments(args, 2, hasClosureArgument ? args.length - 1 : args.length)__				this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName, (Class)args[1], constructorArgs)__				Map namedArgs = (Map)args[0]__				for (Object o : namedArgs.keySet()) {_					String propName = (String) o__					setProperty(propName, namedArgs.get(propName))__				}_			}_			_			else {_				this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName)__				_				Map.Entry factoryBeanEntry = (Map.Entry) ((Map) args[0]).entrySet().iterator().next()__				_				_				int constructorArgsTest = hasClosureArgument?2:1__				_				if (args.length > constructorArgsTest){_					_					int endOfConstructArgs = (hasClosureArgument? args.length - 1 : args.length)__					this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName, null,_							resolveConstructorArguments(args, 1, endOfConstructArgs))__				}_				else {_					this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName)__				}_				this.currentBeanDefinition.getBeanDefinition().setFactoryBeanName(factoryBeanEntry.getKey().toString())__				this.currentBeanDefinition.getBeanDefinition().setFactoryMethodName(factoryBeanEntry.getValue().toString())__			}__		}_		else if (args[0] instanceof Closure) {_			this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName)__			this.currentBeanDefinition.getBeanDefinition().setAbstract(true)__		}_		else {_			List constructorArgs = resolveConstructorArguments(args, 0, hasClosureArgument ? args.length - 1 : args.length)__			currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName, null, constructorArgs)__		}__		if (hasClosureArgument) {_			Closure callable = (Closure) args[args.length - 1]__			callable.setDelegate(this)__			callable.setResolveStrategy(Closure.DELEGATE_FIRST)__			callable.call(this.currentBeanDefinition)__		}__		GroovyBeanDefinitionWrapper beanDefinition = this.currentBeanDefinition__		this.currentBeanDefinition = null__		beanDefinition.getBeanDefinition().setAttribute(GroovyBeanDefinitionWrapper.class.getName(), beanDefinition)__		getRegistry().registerBeanDefinition(beanName, beanDefinition.getBeanDefinition())__		return beanDefinition__	};this,method,is,called,when,a,bean,definition,node,is,called,param,bean,name,the,name,of,the,bean,to,define,param,args,the,arguments,to,the,bean,the,first,argument,is,the,class,name,the,last,argument,is,sometimes,a,closure,all,the,arguments,in,between,are,constructor,arguments,return,the,bean,definition,wrapper;private,groovy,bean,definition,wrapper,invoke,bean,defining,method,string,bean,name,object,args,boolean,has,closure,argument,args,args,length,1,instanceof,closure,if,args,0,instanceof,class,class,bean,class,class,args,0,if,has,closure,argument,if,args,length,1,1,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,bean,class,resolve,constructor,arguments,args,1,args,length,1,else,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,bean,class,else,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,bean,class,resolve,constructor,arguments,args,1,args,length,else,if,args,0,instanceof,runtime,bean,reference,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,this,current,bean,definition,get,bean,definition,set,factory,bean,name,runtime,bean,reference,args,0,get,bean,name,else,if,args,0,instanceof,map,if,args,length,1,args,1,instanceof,class,list,constructor,args,resolve,constructor,arguments,args,2,has,closure,argument,args,length,1,args,length,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,class,args,1,constructor,args,map,named,args,map,args,0,for,object,o,named,args,key,set,string,prop,name,string,o,set,property,prop,name,named,args,get,prop,name,else,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,map,entry,factory,bean,entry,map,entry,map,args,0,entry,set,iterator,next,int,constructor,args,test,has,closure,argument,2,1,if,args,length,constructor,args,test,int,end,of,construct,args,has,closure,argument,args,length,1,args,length,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,null,resolve,constructor,arguments,args,1,end,of,construct,args,else,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,this,current,bean,definition,get,bean,definition,set,factory,bean,name,factory,bean,entry,get,key,to,string,this,current,bean,definition,get,bean,definition,set,factory,method,name,factory,bean,entry,get,value,to,string,else,if,args,0,instanceof,closure,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,this,current,bean,definition,get,bean,definition,set,abstract,true,else,list,constructor,args,resolve,constructor,arguments,args,0,has,closure,argument,args,length,1,args,length,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,null,constructor,args,if,has,closure,argument,closure,callable,closure,args,args,length,1,callable,set,delegate,this,callable,set,resolve,strategy,closure,callable,call,this,current,bean,definition,groovy,bean,definition,wrapper,bean,definition,this,current,bean,definition,this,current,bean,definition,null,bean,definition,get,bean,definition,set,attribute,groovy,bean,definition,wrapper,class,get,name,bean,definition,get,registry,register,bean,definition,bean,name,bean,definition,get,bean,definition,return,bean,definition
GroovyBeanDefinitionReader -> private GroovyBeanDefinitionWrapper invokeBeanDefiningMethod(String beanName, Object[] args);1520529117;This method is called when a bean definition node is called._@param beanName the name of the bean to define_@param args the arguments to the bean. The first argument is the class name, the last_argument is sometimes a closure. All the arguments in between are constructor arguments._@return the bean definition wrapper;private GroovyBeanDefinitionWrapper invokeBeanDefiningMethod(String beanName, Object[] args) {_		boolean hasClosureArgument = (args[args.length - 1] instanceof Closure)__		if (args[0] instanceof Class) {_			Class<?> beanClass = (Class<?>) args[0]__			if (hasClosureArgument) {_				if (args.length - 1 != 1) {_					this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(_							beanName, beanClass, resolveConstructorArguments(args, 1, args.length - 1))__				}_				else {_					this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName, beanClass)__				}_			}_			else  {_				this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(_						beanName, beanClass, resolveConstructorArguments(args, 1, args.length))__			}_		}_		else if (args[0] instanceof RuntimeBeanReference) {_			this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName)__			this.currentBeanDefinition.getBeanDefinition().setFactoryBeanName(((RuntimeBeanReference) args[0]).getBeanName())__		}_		else if (args[0] instanceof Map) {_			_			if (args.length > 1 && args[1] instanceof Class) {_				List constructorArgs = resolveConstructorArguments(args, 2, hasClosureArgument ? args.length - 1 : args.length)__				this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName, (Class)args[1], constructorArgs)__				Map namedArgs = (Map)args[0]__				for (Object o : namedArgs.keySet()) {_					String propName = (String) o__					setProperty(propName, namedArgs.get(propName))__				}_			}_			_			else {_				this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName)__				_				Map.Entry factoryBeanEntry = (Map.Entry) ((Map) args[0]).entrySet().iterator().next()__				_				_				int constructorArgsTest = hasClosureArgument?2:1__				_				if (args.length > constructorArgsTest){_					_					int endOfConstructArgs = (hasClosureArgument? args.length - 1 : args.length)__					this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName, null,_							resolveConstructorArguments(args, 1, endOfConstructArgs))__				}_				else {_					this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName)__				}_				this.currentBeanDefinition.getBeanDefinition().setFactoryBeanName(factoryBeanEntry.getKey().toString())__				this.currentBeanDefinition.getBeanDefinition().setFactoryMethodName(factoryBeanEntry.getValue().toString())__			}__		}_		else if (args[0] instanceof Closure) {_			this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName)__			this.currentBeanDefinition.getBeanDefinition().setAbstract(true)__		}_		else {_			List constructorArgs = resolveConstructorArguments(args, 0, hasClosureArgument ? args.length - 1 : args.length)__			currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName, null, constructorArgs)__		}__		if (hasClosureArgument) {_			Closure callable = (Closure) args[args.length - 1]__			callable.setDelegate(this)__			callable.setResolveStrategy(Closure.DELEGATE_FIRST)__			callable.call(this.currentBeanDefinition)__		}__		GroovyBeanDefinitionWrapper beanDefinition = this.currentBeanDefinition__		this.currentBeanDefinition = null__		beanDefinition.getBeanDefinition().setAttribute(GroovyBeanDefinitionWrapper.class.getName(), beanDefinition)__		getRegistry().registerBeanDefinition(beanName, beanDefinition.getBeanDefinition())__		return beanDefinition__	};this,method,is,called,when,a,bean,definition,node,is,called,param,bean,name,the,name,of,the,bean,to,define,param,args,the,arguments,to,the,bean,the,first,argument,is,the,class,name,the,last,argument,is,sometimes,a,closure,all,the,arguments,in,between,are,constructor,arguments,return,the,bean,definition,wrapper;private,groovy,bean,definition,wrapper,invoke,bean,defining,method,string,bean,name,object,args,boolean,has,closure,argument,args,args,length,1,instanceof,closure,if,args,0,instanceof,class,class,bean,class,class,args,0,if,has,closure,argument,if,args,length,1,1,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,bean,class,resolve,constructor,arguments,args,1,args,length,1,else,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,bean,class,else,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,bean,class,resolve,constructor,arguments,args,1,args,length,else,if,args,0,instanceof,runtime,bean,reference,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,this,current,bean,definition,get,bean,definition,set,factory,bean,name,runtime,bean,reference,args,0,get,bean,name,else,if,args,0,instanceof,map,if,args,length,1,args,1,instanceof,class,list,constructor,args,resolve,constructor,arguments,args,2,has,closure,argument,args,length,1,args,length,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,class,args,1,constructor,args,map,named,args,map,args,0,for,object,o,named,args,key,set,string,prop,name,string,o,set,property,prop,name,named,args,get,prop,name,else,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,map,entry,factory,bean,entry,map,entry,map,args,0,entry,set,iterator,next,int,constructor,args,test,has,closure,argument,2,1,if,args,length,constructor,args,test,int,end,of,construct,args,has,closure,argument,args,length,1,args,length,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,null,resolve,constructor,arguments,args,1,end,of,construct,args,else,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,this,current,bean,definition,get,bean,definition,set,factory,bean,name,factory,bean,entry,get,key,to,string,this,current,bean,definition,get,bean,definition,set,factory,method,name,factory,bean,entry,get,value,to,string,else,if,args,0,instanceof,closure,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,this,current,bean,definition,get,bean,definition,set,abstract,true,else,list,constructor,args,resolve,constructor,arguments,args,0,has,closure,argument,args,length,1,args,length,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,null,constructor,args,if,has,closure,argument,closure,callable,closure,args,args,length,1,callable,set,delegate,this,callable,set,resolve,strategy,closure,callable,call,this,current,bean,definition,groovy,bean,definition,wrapper,bean,definition,this,current,bean,definition,this,current,bean,definition,null,bean,definition,get,bean,definition,set,attribute,groovy,bean,definition,wrapper,class,get,name,bean,definition,get,registry,register,bean,definition,bean,name,bean,definition,get,bean,definition,return,bean,definition
GroovyBeanDefinitionReader -> private GroovyBeanDefinitionWrapper invokeBeanDefiningMethod(String beanName, Object[] args);1522359230;This method is called when a bean definition node is called._@param beanName the name of the bean to define_@param args the arguments to the bean. The first argument is the class name, the last_argument is sometimes a closure. All the arguments in between are constructor arguments._@return the bean definition wrapper;private GroovyBeanDefinitionWrapper invokeBeanDefiningMethod(String beanName, Object[] args) {_		boolean hasClosureArgument = (args[args.length - 1] instanceof Closure)__		if (args[0] instanceof Class) {_			Class<?> beanClass = (Class<?>) args[0]__			if (hasClosureArgument) {_				if (args.length - 1 != 1) {_					this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(_							beanName, beanClass, resolveConstructorArguments(args, 1, args.length - 1))__				}_				else {_					this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName, beanClass)__				}_			}_			else  {_				this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(_						beanName, beanClass, resolveConstructorArguments(args, 1, args.length))__			}_		}_		else if (args[0] instanceof RuntimeBeanReference) {_			this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName)__			this.currentBeanDefinition.getBeanDefinition().setFactoryBeanName(((RuntimeBeanReference) args[0]).getBeanName())__		}_		else if (args[0] instanceof Map) {_			_			if (args.length > 1 && args[1] instanceof Class) {_				List constructorArgs = resolveConstructorArguments(args, 2, hasClosureArgument ? args.length - 1 : args.length)__				this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName, (Class)args[1], constructorArgs)__				Map namedArgs = (Map)args[0]__				for (Object o : namedArgs.keySet()) {_					String propName = (String) o__					setProperty(propName, namedArgs.get(propName))__				}_			}_			_			else {_				this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName)__				_				Map.Entry factoryBeanEntry = (Map.Entry) ((Map) args[0]).entrySet().iterator().next()__				_				_				int constructorArgsTest = hasClosureArgument?2:1__				_				if (args.length > constructorArgsTest){_					_					int endOfConstructArgs = (hasClosureArgument? args.length - 1 : args.length)__					this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName, null,_							resolveConstructorArguments(args, 1, endOfConstructArgs))__				}_				else {_					this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName)__				}_				this.currentBeanDefinition.getBeanDefinition().setFactoryBeanName(factoryBeanEntry.getKey().toString())__				this.currentBeanDefinition.getBeanDefinition().setFactoryMethodName(factoryBeanEntry.getValue().toString())__			}__		}_		else if (args[0] instanceof Closure) {_			this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName)__			this.currentBeanDefinition.getBeanDefinition().setAbstract(true)__		}_		else {_			List constructorArgs = resolveConstructorArguments(args, 0, hasClosureArgument ? args.length - 1 : args.length)__			currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName, null, constructorArgs)__		}__		if (hasClosureArgument) {_			Closure callable = (Closure) args[args.length - 1]__			callable.setDelegate(this)__			callable.setResolveStrategy(Closure.DELEGATE_FIRST)__			callable.call(this.currentBeanDefinition)__		}__		GroovyBeanDefinitionWrapper beanDefinition = this.currentBeanDefinition__		this.currentBeanDefinition = null__		beanDefinition.getBeanDefinition().setAttribute(GroovyBeanDefinitionWrapper.class.getName(), beanDefinition)__		getRegistry().registerBeanDefinition(beanName, beanDefinition.getBeanDefinition())__		return beanDefinition__	};this,method,is,called,when,a,bean,definition,node,is,called,param,bean,name,the,name,of,the,bean,to,define,param,args,the,arguments,to,the,bean,the,first,argument,is,the,class,name,the,last,argument,is,sometimes,a,closure,all,the,arguments,in,between,are,constructor,arguments,return,the,bean,definition,wrapper;private,groovy,bean,definition,wrapper,invoke,bean,defining,method,string,bean,name,object,args,boolean,has,closure,argument,args,args,length,1,instanceof,closure,if,args,0,instanceof,class,class,bean,class,class,args,0,if,has,closure,argument,if,args,length,1,1,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,bean,class,resolve,constructor,arguments,args,1,args,length,1,else,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,bean,class,else,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,bean,class,resolve,constructor,arguments,args,1,args,length,else,if,args,0,instanceof,runtime,bean,reference,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,this,current,bean,definition,get,bean,definition,set,factory,bean,name,runtime,bean,reference,args,0,get,bean,name,else,if,args,0,instanceof,map,if,args,length,1,args,1,instanceof,class,list,constructor,args,resolve,constructor,arguments,args,2,has,closure,argument,args,length,1,args,length,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,class,args,1,constructor,args,map,named,args,map,args,0,for,object,o,named,args,key,set,string,prop,name,string,o,set,property,prop,name,named,args,get,prop,name,else,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,map,entry,factory,bean,entry,map,entry,map,args,0,entry,set,iterator,next,int,constructor,args,test,has,closure,argument,2,1,if,args,length,constructor,args,test,int,end,of,construct,args,has,closure,argument,args,length,1,args,length,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,null,resolve,constructor,arguments,args,1,end,of,construct,args,else,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,this,current,bean,definition,get,bean,definition,set,factory,bean,name,factory,bean,entry,get,key,to,string,this,current,bean,definition,get,bean,definition,set,factory,method,name,factory,bean,entry,get,value,to,string,else,if,args,0,instanceof,closure,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,this,current,bean,definition,get,bean,definition,set,abstract,true,else,list,constructor,args,resolve,constructor,arguments,args,0,has,closure,argument,args,length,1,args,length,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,null,constructor,args,if,has,closure,argument,closure,callable,closure,args,args,length,1,callable,set,delegate,this,callable,set,resolve,strategy,closure,callable,call,this,current,bean,definition,groovy,bean,definition,wrapper,bean,definition,this,current,bean,definition,this,current,bean,definition,null,bean,definition,get,bean,definition,set,attribute,groovy,bean,definition,wrapper,class,get,name,bean,definition,get,registry,register,bean,definition,bean,name,bean,definition,get,bean,definition,return,bean,definition
GroovyBeanDefinitionReader -> private GroovyBeanDefinitionWrapper invokeBeanDefiningMethod(String beanName, Object[] args);1530174524;This method is called when a bean definition node is called._@param beanName the name of the bean to define_@param args the arguments to the bean. The first argument is the class name, the last_argument is sometimes a closure. All the arguments in between are constructor arguments._@return the bean definition wrapper;private GroovyBeanDefinitionWrapper invokeBeanDefiningMethod(String beanName, Object[] args) {_		boolean hasClosureArgument = (args[args.length - 1] instanceof Closure)__		if (args[0] instanceof Class) {_			Class<?> beanClass = (Class<?>) args[0]__			if (hasClosureArgument) {_				if (args.length - 1 != 1) {_					this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(_							beanName, beanClass, resolveConstructorArguments(args, 1, args.length - 1))__				}_				else {_					this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName, beanClass)__				}_			}_			else  {_				this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(_						beanName, beanClass, resolveConstructorArguments(args, 1, args.length))__			}_		}_		else if (args[0] instanceof RuntimeBeanReference) {_			this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName)__			this.currentBeanDefinition.getBeanDefinition().setFactoryBeanName(((RuntimeBeanReference) args[0]).getBeanName())__		}_		else if (args[0] instanceof Map) {_			_			if (args.length > 1 && args[1] instanceof Class) {_				List constructorArgs = resolveConstructorArguments(args, 2, hasClosureArgument ? args.length - 1 : args.length)__				this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName, (Class)args[1], constructorArgs)__				Map namedArgs = (Map)args[0]__				for (Object o : namedArgs.keySet()) {_					String propName = (String) o__					setProperty(propName, namedArgs.get(propName))__				}_			}_			_			else {_				this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName)__				_				Map.Entry factoryBeanEntry = (Map.Entry) ((Map) args[0]).entrySet().iterator().next()__				_				_				int constructorArgsTest = hasClosureArgument?2:1__				_				if (args.length > constructorArgsTest){_					_					int endOfConstructArgs = (hasClosureArgument? args.length - 1 : args.length)__					this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName, null,_							resolveConstructorArguments(args, 1, endOfConstructArgs))__				}_				else {_					this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName)__				}_				this.currentBeanDefinition.getBeanDefinition().setFactoryBeanName(factoryBeanEntry.getKey().toString())__				this.currentBeanDefinition.getBeanDefinition().setFactoryMethodName(factoryBeanEntry.getValue().toString())__			}__		}_		else if (args[0] instanceof Closure) {_			this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName)__			this.currentBeanDefinition.getBeanDefinition().setAbstract(true)__		}_		else {_			List constructorArgs = resolveConstructorArguments(args, 0, hasClosureArgument ? args.length - 1 : args.length)__			currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName, null, constructorArgs)__		}__		if (hasClosureArgument) {_			Closure callable = (Closure) args[args.length - 1]__			callable.setDelegate(this)__			callable.setResolveStrategy(Closure.DELEGATE_FIRST)__			callable.call(this.currentBeanDefinition)__		}__		GroovyBeanDefinitionWrapper beanDefinition = this.currentBeanDefinition__		this.currentBeanDefinition = null__		beanDefinition.getBeanDefinition().setAttribute(GroovyBeanDefinitionWrapper.class.getName(), beanDefinition)__		getRegistry().registerBeanDefinition(beanName, beanDefinition.getBeanDefinition())__		return beanDefinition__	};this,method,is,called,when,a,bean,definition,node,is,called,param,bean,name,the,name,of,the,bean,to,define,param,args,the,arguments,to,the,bean,the,first,argument,is,the,class,name,the,last,argument,is,sometimes,a,closure,all,the,arguments,in,between,are,constructor,arguments,return,the,bean,definition,wrapper;private,groovy,bean,definition,wrapper,invoke,bean,defining,method,string,bean,name,object,args,boolean,has,closure,argument,args,args,length,1,instanceof,closure,if,args,0,instanceof,class,class,bean,class,class,args,0,if,has,closure,argument,if,args,length,1,1,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,bean,class,resolve,constructor,arguments,args,1,args,length,1,else,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,bean,class,else,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,bean,class,resolve,constructor,arguments,args,1,args,length,else,if,args,0,instanceof,runtime,bean,reference,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,this,current,bean,definition,get,bean,definition,set,factory,bean,name,runtime,bean,reference,args,0,get,bean,name,else,if,args,0,instanceof,map,if,args,length,1,args,1,instanceof,class,list,constructor,args,resolve,constructor,arguments,args,2,has,closure,argument,args,length,1,args,length,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,class,args,1,constructor,args,map,named,args,map,args,0,for,object,o,named,args,key,set,string,prop,name,string,o,set,property,prop,name,named,args,get,prop,name,else,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,map,entry,factory,bean,entry,map,entry,map,args,0,entry,set,iterator,next,int,constructor,args,test,has,closure,argument,2,1,if,args,length,constructor,args,test,int,end,of,construct,args,has,closure,argument,args,length,1,args,length,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,null,resolve,constructor,arguments,args,1,end,of,construct,args,else,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,this,current,bean,definition,get,bean,definition,set,factory,bean,name,factory,bean,entry,get,key,to,string,this,current,bean,definition,get,bean,definition,set,factory,method,name,factory,bean,entry,get,value,to,string,else,if,args,0,instanceof,closure,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,this,current,bean,definition,get,bean,definition,set,abstract,true,else,list,constructor,args,resolve,constructor,arguments,args,0,has,closure,argument,args,length,1,args,length,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,null,constructor,args,if,has,closure,argument,closure,callable,closure,args,args,length,1,callable,set,delegate,this,callable,set,resolve,strategy,closure,callable,call,this,current,bean,definition,groovy,bean,definition,wrapper,bean,definition,this,current,bean,definition,this,current,bean,definition,null,bean,definition,get,bean,definition,set,attribute,groovy,bean,definition,wrapper,class,get,name,bean,definition,get,registry,register,bean,definition,bean,name,bean,definition,get,bean,definition,return,bean,definition
GroovyBeanDefinitionReader -> private GroovyBeanDefinitionWrapper invokeBeanDefiningMethod(String beanName, Object[] args);1530174524;This method is called when a bean definition node is called._@param beanName the name of the bean to define_@param args the arguments to the bean. The first argument is the class name, the last_argument is sometimes a closure. All the arguments in between are constructor arguments._@return the bean definition wrapper;private GroovyBeanDefinitionWrapper invokeBeanDefiningMethod(String beanName, Object[] args) {_		boolean hasClosureArgument = (args[args.length - 1] instanceof Closure)__		if (args[0] instanceof Class) {_			Class<?> beanClass = (Class<?>) args[0]__			if (hasClosureArgument) {_				if (args.length - 1 != 1) {_					this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(_							beanName, beanClass, resolveConstructorArguments(args, 1, args.length - 1))__				}_				else {_					this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName, beanClass)__				}_			}_			else  {_				this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(_						beanName, beanClass, resolveConstructorArguments(args, 1, args.length))__			}_		}_		else if (args[0] instanceof RuntimeBeanReference) {_			this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName)__			this.currentBeanDefinition.getBeanDefinition().setFactoryBeanName(((RuntimeBeanReference) args[0]).getBeanName())__		}_		else if (args[0] instanceof Map) {_			_			if (args.length > 1 && args[1] instanceof Class) {_				List constructorArgs = resolveConstructorArguments(args, 2, hasClosureArgument ? args.length - 1 : args.length)__				this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName, (Class)args[1], constructorArgs)__				Map namedArgs = (Map)args[0]__				for (Object o : namedArgs.keySet()) {_					String propName = (String) o__					setProperty(propName, namedArgs.get(propName))__				}_			}_			_			else {_				this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName)__				_				Map.Entry factoryBeanEntry = (Map.Entry) ((Map) args[0]).entrySet().iterator().next()__				_				_				int constructorArgsTest = hasClosureArgument?2:1__				_				if (args.length > constructorArgsTest){_					_					int endOfConstructArgs = (hasClosureArgument? args.length - 1 : args.length)__					this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName, null,_							resolveConstructorArguments(args, 1, endOfConstructArgs))__				}_				else {_					this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName)__				}_				this.currentBeanDefinition.getBeanDefinition().setFactoryBeanName(factoryBeanEntry.getKey().toString())__				this.currentBeanDefinition.getBeanDefinition().setFactoryMethodName(factoryBeanEntry.getValue().toString())__			}__		}_		else if (args[0] instanceof Closure) {_			this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName)__			this.currentBeanDefinition.getBeanDefinition().setAbstract(true)__		}_		else {_			List constructorArgs = resolveConstructorArguments(args, 0, hasClosureArgument ? args.length - 1 : args.length)__			currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName, null, constructorArgs)__		}__		if (hasClosureArgument) {_			Closure callable = (Closure) args[args.length - 1]__			callable.setDelegate(this)__			callable.setResolveStrategy(Closure.DELEGATE_FIRST)__			callable.call(this.currentBeanDefinition)__		}__		GroovyBeanDefinitionWrapper beanDefinition = this.currentBeanDefinition__		this.currentBeanDefinition = null__		beanDefinition.getBeanDefinition().setAttribute(GroovyBeanDefinitionWrapper.class.getName(), beanDefinition)__		getRegistry().registerBeanDefinition(beanName, beanDefinition.getBeanDefinition())__		return beanDefinition__	};this,method,is,called,when,a,bean,definition,node,is,called,param,bean,name,the,name,of,the,bean,to,define,param,args,the,arguments,to,the,bean,the,first,argument,is,the,class,name,the,last,argument,is,sometimes,a,closure,all,the,arguments,in,between,are,constructor,arguments,return,the,bean,definition,wrapper;private,groovy,bean,definition,wrapper,invoke,bean,defining,method,string,bean,name,object,args,boolean,has,closure,argument,args,args,length,1,instanceof,closure,if,args,0,instanceof,class,class,bean,class,class,args,0,if,has,closure,argument,if,args,length,1,1,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,bean,class,resolve,constructor,arguments,args,1,args,length,1,else,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,bean,class,else,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,bean,class,resolve,constructor,arguments,args,1,args,length,else,if,args,0,instanceof,runtime,bean,reference,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,this,current,bean,definition,get,bean,definition,set,factory,bean,name,runtime,bean,reference,args,0,get,bean,name,else,if,args,0,instanceof,map,if,args,length,1,args,1,instanceof,class,list,constructor,args,resolve,constructor,arguments,args,2,has,closure,argument,args,length,1,args,length,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,class,args,1,constructor,args,map,named,args,map,args,0,for,object,o,named,args,key,set,string,prop,name,string,o,set,property,prop,name,named,args,get,prop,name,else,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,map,entry,factory,bean,entry,map,entry,map,args,0,entry,set,iterator,next,int,constructor,args,test,has,closure,argument,2,1,if,args,length,constructor,args,test,int,end,of,construct,args,has,closure,argument,args,length,1,args,length,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,null,resolve,constructor,arguments,args,1,end,of,construct,args,else,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,this,current,bean,definition,get,bean,definition,set,factory,bean,name,factory,bean,entry,get,key,to,string,this,current,bean,definition,get,bean,definition,set,factory,method,name,factory,bean,entry,get,value,to,string,else,if,args,0,instanceof,closure,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,this,current,bean,definition,get,bean,definition,set,abstract,true,else,list,constructor,args,resolve,constructor,arguments,args,0,has,closure,argument,args,length,1,args,length,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,null,constructor,args,if,has,closure,argument,closure,callable,closure,args,args,length,1,callable,set,delegate,this,callable,set,resolve,strategy,closure,callable,call,this,current,bean,definition,groovy,bean,definition,wrapper,bean,definition,this,current,bean,definition,this,current,bean,definition,null,bean,definition,get,bean,definition,set,attribute,groovy,bean,definition,wrapper,class,get,name,bean,definition,get,registry,register,bean,definition,bean,name,bean,definition,get,bean,definition,return,bean,definition
GroovyBeanDefinitionReader -> private GroovyBeanDefinitionWrapper invokeBeanDefiningMethod(String beanName, Object[] args);1530174524;This method is called when a bean definition node is called._@param beanName the name of the bean to define_@param args the arguments to the bean. The first argument is the class name, the last_argument is sometimes a closure. All the arguments in between are constructor arguments._@return the bean definition wrapper;private GroovyBeanDefinitionWrapper invokeBeanDefiningMethod(String beanName, Object[] args) {_		boolean hasClosureArgument = (args[args.length - 1] instanceof Closure)__		if (args[0] instanceof Class) {_			Class<?> beanClass = (Class<?>) args[0]__			if (hasClosureArgument) {_				if (args.length - 1 != 1) {_					this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(_							beanName, beanClass, resolveConstructorArguments(args, 1, args.length - 1))__				}_				else {_					this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName, beanClass)__				}_			}_			else  {_				this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(_						beanName, beanClass, resolveConstructorArguments(args, 1, args.length))__			}_		}_		else if (args[0] instanceof RuntimeBeanReference) {_			this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName)__			this.currentBeanDefinition.getBeanDefinition().setFactoryBeanName(((RuntimeBeanReference) args[0]).getBeanName())__		}_		else if (args[0] instanceof Map) {_			_			if (args.length > 1 && args[1] instanceof Class) {_				List constructorArgs = resolveConstructorArguments(args, 2, hasClosureArgument ? args.length - 1 : args.length)__				this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName, (Class)args[1], constructorArgs)__				Map namedArgs = (Map)args[0]__				for (Object o : namedArgs.keySet()) {_					String propName = (String) o__					setProperty(propName, namedArgs.get(propName))__				}_			}_			_			else {_				this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName)__				_				Map.Entry factoryBeanEntry = (Map.Entry) ((Map) args[0]).entrySet().iterator().next()__				_				_				int constructorArgsTest = hasClosureArgument?2:1__				_				if (args.length > constructorArgsTest){_					_					int endOfConstructArgs = (hasClosureArgument? args.length - 1 : args.length)__					this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName, null,_							resolveConstructorArguments(args, 1, endOfConstructArgs))__				}_				else {_					this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName)__				}_				this.currentBeanDefinition.getBeanDefinition().setFactoryBeanName(factoryBeanEntry.getKey().toString())__				this.currentBeanDefinition.getBeanDefinition().setFactoryMethodName(factoryBeanEntry.getValue().toString())__			}__		}_		else if (args[0] instanceof Closure) {_			this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName)__			this.currentBeanDefinition.getBeanDefinition().setAbstract(true)__		}_		else {_			List constructorArgs = resolveConstructorArguments(args, 0, hasClosureArgument ? args.length - 1 : args.length)__			this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName, null, constructorArgs)__		}__		if (hasClosureArgument) {_			Closure callable = (Closure) args[args.length - 1]__			callable.setDelegate(this)__			callable.setResolveStrategy(Closure.DELEGATE_FIRST)__			callable.call(this.currentBeanDefinition)__		}__		GroovyBeanDefinitionWrapper beanDefinition = this.currentBeanDefinition__		this.currentBeanDefinition = null__		beanDefinition.getBeanDefinition().setAttribute(GroovyBeanDefinitionWrapper.class.getName(), beanDefinition)__		getRegistry().registerBeanDefinition(beanName, beanDefinition.getBeanDefinition())__		return beanDefinition__	};this,method,is,called,when,a,bean,definition,node,is,called,param,bean,name,the,name,of,the,bean,to,define,param,args,the,arguments,to,the,bean,the,first,argument,is,the,class,name,the,last,argument,is,sometimes,a,closure,all,the,arguments,in,between,are,constructor,arguments,return,the,bean,definition,wrapper;private,groovy,bean,definition,wrapper,invoke,bean,defining,method,string,bean,name,object,args,boolean,has,closure,argument,args,args,length,1,instanceof,closure,if,args,0,instanceof,class,class,bean,class,class,args,0,if,has,closure,argument,if,args,length,1,1,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,bean,class,resolve,constructor,arguments,args,1,args,length,1,else,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,bean,class,else,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,bean,class,resolve,constructor,arguments,args,1,args,length,else,if,args,0,instanceof,runtime,bean,reference,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,this,current,bean,definition,get,bean,definition,set,factory,bean,name,runtime,bean,reference,args,0,get,bean,name,else,if,args,0,instanceof,map,if,args,length,1,args,1,instanceof,class,list,constructor,args,resolve,constructor,arguments,args,2,has,closure,argument,args,length,1,args,length,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,class,args,1,constructor,args,map,named,args,map,args,0,for,object,o,named,args,key,set,string,prop,name,string,o,set,property,prop,name,named,args,get,prop,name,else,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,map,entry,factory,bean,entry,map,entry,map,args,0,entry,set,iterator,next,int,constructor,args,test,has,closure,argument,2,1,if,args,length,constructor,args,test,int,end,of,construct,args,has,closure,argument,args,length,1,args,length,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,null,resolve,constructor,arguments,args,1,end,of,construct,args,else,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,this,current,bean,definition,get,bean,definition,set,factory,bean,name,factory,bean,entry,get,key,to,string,this,current,bean,definition,get,bean,definition,set,factory,method,name,factory,bean,entry,get,value,to,string,else,if,args,0,instanceof,closure,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,this,current,bean,definition,get,bean,definition,set,abstract,true,else,list,constructor,args,resolve,constructor,arguments,args,0,has,closure,argument,args,length,1,args,length,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,null,constructor,args,if,has,closure,argument,closure,callable,closure,args,args,length,1,callable,set,delegate,this,callable,set,resolve,strategy,closure,callable,call,this,current,bean,definition,groovy,bean,definition,wrapper,bean,definition,this,current,bean,definition,this,current,bean,definition,null,bean,definition,get,bean,definition,set,attribute,groovy,bean,definition,wrapper,class,get,name,bean,definition,get,registry,register,bean,definition,bean,name,bean,definition,get,bean,definition,return,bean,definition
GroovyBeanDefinitionReader -> private GroovyBeanDefinitionWrapper invokeBeanDefiningMethod(String beanName, Object[] args);1530190293;This method is called when a bean definition node is called._@param beanName the name of the bean to define_@param args the arguments to the bean. The first argument is the class name, the last_argument is sometimes a closure. All the arguments in between are constructor arguments._@return the bean definition wrapper;private GroovyBeanDefinitionWrapper invokeBeanDefiningMethod(String beanName, Object[] args) {_		boolean hasClosureArgument = (args[args.length - 1] instanceof Closure)__		if (args[0] instanceof Class) {_			Class<?> beanClass = (Class<?>) args[0]__			if (hasClosureArgument) {_				if (args.length - 1 != 1) {_					this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(_							beanName, beanClass, resolveConstructorArguments(args, 1, args.length - 1))__				}_				else {_					this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName, beanClass)__				}_			}_			else  {_				this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(_						beanName, beanClass, resolveConstructorArguments(args, 1, args.length))__			}_		}_		else if (args[0] instanceof RuntimeBeanReference) {_			this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName)__			this.currentBeanDefinition.getBeanDefinition().setFactoryBeanName(((RuntimeBeanReference) args[0]).getBeanName())__		}_		else if (args[0] instanceof Map) {_			_			if (args.length > 1 && args[1] instanceof Class) {_				List constructorArgs = resolveConstructorArguments(args, 2, hasClosureArgument ? args.length - 1 : args.length)__				this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName, (Class)args[1], constructorArgs)__				Map namedArgs = (Map)args[0]__				for (Object o : namedArgs.keySet()) {_					String propName = (String) o__					setProperty(propName, namedArgs.get(propName))__				}_			}_			_			else {_				this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName)__				_				Map.Entry factoryBeanEntry = (Map.Entry) ((Map) args[0]).entrySet().iterator().next()__				_				_				int constructorArgsTest = (hasClosureArgument ? 2 : 1)__				_				if (args.length > constructorArgsTest){_					_					int endOfConstructArgs = (hasClosureArgument ? args.length - 1 : args.length)__					this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName, null,_							resolveConstructorArguments(args, 1, endOfConstructArgs))__				}_				else {_					this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName)__				}_				this.currentBeanDefinition.getBeanDefinition().setFactoryBeanName(factoryBeanEntry.getKey().toString())__				this.currentBeanDefinition.getBeanDefinition().setFactoryMethodName(factoryBeanEntry.getValue().toString())__			}__		}_		else if (args[0] instanceof Closure) {_			this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName)__			this.currentBeanDefinition.getBeanDefinition().setAbstract(true)__		}_		else {_			List constructorArgs = resolveConstructorArguments(args, 0, hasClosureArgument ? args.length - 1 : args.length)__			this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName, null, constructorArgs)__		}__		if (hasClosureArgument) {_			Closure callable = (Closure) args[args.length - 1]__			callable.setDelegate(this)__			callable.setResolveStrategy(Closure.DELEGATE_FIRST)__			callable.call(this.currentBeanDefinition)__		}__		GroovyBeanDefinitionWrapper beanDefinition = this.currentBeanDefinition__		this.currentBeanDefinition = null__		beanDefinition.getBeanDefinition().setAttribute(GroovyBeanDefinitionWrapper.class.getName(), beanDefinition)__		getRegistry().registerBeanDefinition(beanName, beanDefinition.getBeanDefinition())__		return beanDefinition__	};this,method,is,called,when,a,bean,definition,node,is,called,param,bean,name,the,name,of,the,bean,to,define,param,args,the,arguments,to,the,bean,the,first,argument,is,the,class,name,the,last,argument,is,sometimes,a,closure,all,the,arguments,in,between,are,constructor,arguments,return,the,bean,definition,wrapper;private,groovy,bean,definition,wrapper,invoke,bean,defining,method,string,bean,name,object,args,boolean,has,closure,argument,args,args,length,1,instanceof,closure,if,args,0,instanceof,class,class,bean,class,class,args,0,if,has,closure,argument,if,args,length,1,1,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,bean,class,resolve,constructor,arguments,args,1,args,length,1,else,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,bean,class,else,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,bean,class,resolve,constructor,arguments,args,1,args,length,else,if,args,0,instanceof,runtime,bean,reference,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,this,current,bean,definition,get,bean,definition,set,factory,bean,name,runtime,bean,reference,args,0,get,bean,name,else,if,args,0,instanceof,map,if,args,length,1,args,1,instanceof,class,list,constructor,args,resolve,constructor,arguments,args,2,has,closure,argument,args,length,1,args,length,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,class,args,1,constructor,args,map,named,args,map,args,0,for,object,o,named,args,key,set,string,prop,name,string,o,set,property,prop,name,named,args,get,prop,name,else,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,map,entry,factory,bean,entry,map,entry,map,args,0,entry,set,iterator,next,int,constructor,args,test,has,closure,argument,2,1,if,args,length,constructor,args,test,int,end,of,construct,args,has,closure,argument,args,length,1,args,length,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,null,resolve,constructor,arguments,args,1,end,of,construct,args,else,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,this,current,bean,definition,get,bean,definition,set,factory,bean,name,factory,bean,entry,get,key,to,string,this,current,bean,definition,get,bean,definition,set,factory,method,name,factory,bean,entry,get,value,to,string,else,if,args,0,instanceof,closure,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,this,current,bean,definition,get,bean,definition,set,abstract,true,else,list,constructor,args,resolve,constructor,arguments,args,0,has,closure,argument,args,length,1,args,length,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,null,constructor,args,if,has,closure,argument,closure,callable,closure,args,args,length,1,callable,set,delegate,this,callable,set,resolve,strategy,closure,callable,call,this,current,bean,definition,groovy,bean,definition,wrapper,bean,definition,this,current,bean,definition,this,current,bean,definition,null,bean,definition,get,bean,definition,set,attribute,groovy,bean,definition,wrapper,class,get,name,bean,definition,get,registry,register,bean,definition,bean,name,bean,definition,get,bean,definition,return,bean,definition
GroovyBeanDefinitionReader -> private GroovyBeanDefinitionWrapper invokeBeanDefiningMethod(String beanName, Object[] args);1532706365;This method is called when a bean definition node is called._@param beanName the name of the bean to define_@param args the arguments to the bean. The first argument is the class name, the last_argument is sometimes a closure. All the arguments in between are constructor arguments._@return the bean definition wrapper;private GroovyBeanDefinitionWrapper invokeBeanDefiningMethod(String beanName, Object[] args) {_		boolean hasClosureArgument = (args[args.length - 1] instanceof Closure)__		if (args[0] instanceof Class) {_			Class<?> beanClass = (Class<?>) args[0]__			if (hasClosureArgument) {_				if (args.length - 1 != 1) {_					this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(_							beanName, beanClass, resolveConstructorArguments(args, 1, args.length - 1))__				}_				else {_					this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName, beanClass)__				}_			}_			else  {_				this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(_						beanName, beanClass, resolveConstructorArguments(args, 1, args.length))__			}_		}_		else if (args[0] instanceof RuntimeBeanReference) {_			this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName)__			this.currentBeanDefinition.getBeanDefinition().setFactoryBeanName(((RuntimeBeanReference) args[0]).getBeanName())__		}_		else if (args[0] instanceof Map) {_			_			if (args.length > 1 && args[1] instanceof Class) {_				List constructorArgs = resolveConstructorArguments(args, 2, hasClosureArgument ? args.length - 1 : args.length)__				this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName, (Class)args[1], constructorArgs)__				Map namedArgs = (Map)args[0]__				for (Object o : namedArgs.keySet()) {_					String propName = (String) o__					setProperty(propName, namedArgs.get(propName))__				}_			}_			_			else {_				this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName)__				_				Map.Entry factoryBeanEntry = (Map.Entry) ((Map) args[0]).entrySet().iterator().next()__				_				_				int constructorArgsTest = (hasClosureArgument ? 2 : 1)__				_				if (args.length > constructorArgsTest){_					_					int endOfConstructArgs = (hasClosureArgument ? args.length - 1 : args.length)__					this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName, null,_							resolveConstructorArguments(args, 1, endOfConstructArgs))__				}_				else {_					this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName)__				}_				this.currentBeanDefinition.getBeanDefinition().setFactoryBeanName(factoryBeanEntry.getKey().toString())__				this.currentBeanDefinition.getBeanDefinition().setFactoryMethodName(factoryBeanEntry.getValue().toString())__			}__		}_		else if (args[0] instanceof Closure) {_			this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName)__			this.currentBeanDefinition.getBeanDefinition().setAbstract(true)__		}_		else {_			List constructorArgs = resolveConstructorArguments(args, 0, hasClosureArgument ? args.length - 1 : args.length)__			this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(beanName, null, constructorArgs)__		}__		if (hasClosureArgument) {_			Closure callable = (Closure) args[args.length - 1]__			callable.setDelegate(this)__			callable.setResolveStrategy(Closure.DELEGATE_FIRST)__			callable.call(this.currentBeanDefinition)__		}__		GroovyBeanDefinitionWrapper beanDefinition = this.currentBeanDefinition__		this.currentBeanDefinition = null__		beanDefinition.getBeanDefinition().setAttribute(GroovyBeanDefinitionWrapper.class.getName(), beanDefinition)__		getRegistry().registerBeanDefinition(beanName, beanDefinition.getBeanDefinition())__		return beanDefinition__	};this,method,is,called,when,a,bean,definition,node,is,called,param,bean,name,the,name,of,the,bean,to,define,param,args,the,arguments,to,the,bean,the,first,argument,is,the,class,name,the,last,argument,is,sometimes,a,closure,all,the,arguments,in,between,are,constructor,arguments,return,the,bean,definition,wrapper;private,groovy,bean,definition,wrapper,invoke,bean,defining,method,string,bean,name,object,args,boolean,has,closure,argument,args,args,length,1,instanceof,closure,if,args,0,instanceof,class,class,bean,class,class,args,0,if,has,closure,argument,if,args,length,1,1,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,bean,class,resolve,constructor,arguments,args,1,args,length,1,else,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,bean,class,else,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,bean,class,resolve,constructor,arguments,args,1,args,length,else,if,args,0,instanceof,runtime,bean,reference,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,this,current,bean,definition,get,bean,definition,set,factory,bean,name,runtime,bean,reference,args,0,get,bean,name,else,if,args,0,instanceof,map,if,args,length,1,args,1,instanceof,class,list,constructor,args,resolve,constructor,arguments,args,2,has,closure,argument,args,length,1,args,length,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,class,args,1,constructor,args,map,named,args,map,args,0,for,object,o,named,args,key,set,string,prop,name,string,o,set,property,prop,name,named,args,get,prop,name,else,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,map,entry,factory,bean,entry,map,entry,map,args,0,entry,set,iterator,next,int,constructor,args,test,has,closure,argument,2,1,if,args,length,constructor,args,test,int,end,of,construct,args,has,closure,argument,args,length,1,args,length,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,null,resolve,constructor,arguments,args,1,end,of,construct,args,else,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,this,current,bean,definition,get,bean,definition,set,factory,bean,name,factory,bean,entry,get,key,to,string,this,current,bean,definition,get,bean,definition,set,factory,method,name,factory,bean,entry,get,value,to,string,else,if,args,0,instanceof,closure,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,this,current,bean,definition,get,bean,definition,set,abstract,true,else,list,constructor,args,resolve,constructor,arguments,args,0,has,closure,argument,args,length,1,args,length,this,current,bean,definition,new,groovy,bean,definition,wrapper,bean,name,null,constructor,args,if,has,closure,argument,closure,callable,closure,args,args,length,1,callable,set,delegate,this,callable,set,resolve,strategy,closure,callable,call,this,current,bean,definition,groovy,bean,definition,wrapper,bean,definition,this,current,bean,definition,this,current,bean,definition,null,bean,definition,get,bean,definition,set,attribute,groovy,bean,definition,wrapper,class,get,name,bean,definition,get,registry,register,bean,definition,bean,name,bean,definition,get,bean,definition,return,bean,definition
GroovyBeanDefinitionReader -> public GroovyBeanDefinitionReader(XmlBeanDefinitionReader xmlBeanDefinitionReader);1503319306;Create a new {@code GroovyBeanDefinitionReader} based on the given_{@link XmlBeanDefinitionReader}, loading bean definitions into its_{@code BeanDefinitionRegistry} and delegating Groovy DSL loading to it._<p>The supplied {@code XmlBeanDefinitionReader} should typically_be pre-configured with XML validation disabled._@param xmlBeanDefinitionReader the {@code XmlBeanDefinitionReader} to_derive the registry from and to delegate Groovy DSL loading to;public GroovyBeanDefinitionReader(XmlBeanDefinitionReader xmlBeanDefinitionReader) {_		super(xmlBeanDefinitionReader.getRegistry())__		this.standardXmlBeanDefinitionReader = new XmlBeanDefinitionReader(xmlBeanDefinitionReader.getRegistry())__		this.groovyDslXmlBeanDefinitionReader = xmlBeanDefinitionReader__	};create,a,new,code,groovy,bean,definition,reader,based,on,the,given,link,xml,bean,definition,reader,loading,bean,definitions,into,its,code,bean,definition,registry,and,delegating,groovy,dsl,loading,to,it,p,the,supplied,code,xml,bean,definition,reader,should,typically,be,pre,configured,with,xml,validation,disabled,param,xml,bean,definition,reader,the,code,xml,bean,definition,reader,to,derive,the,registry,from,and,to,delegate,groovy,dsl,loading,to;public,groovy,bean,definition,reader,xml,bean,definition,reader,xml,bean,definition,reader,super,xml,bean,definition,reader,get,registry,this,standard,xml,bean,definition,reader,new,xml,bean,definition,reader,xml,bean,definition,reader,get,registry,this,groovy,dsl,xml,bean,definition,reader,xml,bean,definition,reader
GroovyBeanDefinitionReader -> public GroovyBeanDefinitionReader(XmlBeanDefinitionReader xmlBeanDefinitionReader);1506097334;Create a new {@code GroovyBeanDefinitionReader} based on the given_{@link XmlBeanDefinitionReader}, loading bean definitions into its_{@code BeanDefinitionRegistry} and delegating Groovy DSL loading to it._<p>The supplied {@code XmlBeanDefinitionReader} should typically_be pre-configured with XML validation disabled._@param xmlBeanDefinitionReader the {@code XmlBeanDefinitionReader} to_derive the registry from and to delegate Groovy DSL loading to;public GroovyBeanDefinitionReader(XmlBeanDefinitionReader xmlBeanDefinitionReader) {_		super(xmlBeanDefinitionReader.getRegistry())__		this.standardXmlBeanDefinitionReader = new XmlBeanDefinitionReader(xmlBeanDefinitionReader.getRegistry())__		this.groovyDslXmlBeanDefinitionReader = xmlBeanDefinitionReader__	};create,a,new,code,groovy,bean,definition,reader,based,on,the,given,link,xml,bean,definition,reader,loading,bean,definitions,into,its,code,bean,definition,registry,and,delegating,groovy,dsl,loading,to,it,p,the,supplied,code,xml,bean,definition,reader,should,typically,be,pre,configured,with,xml,validation,disabled,param,xml,bean,definition,reader,the,code,xml,bean,definition,reader,to,derive,the,registry,from,and,to,delegate,groovy,dsl,loading,to;public,groovy,bean,definition,reader,xml,bean,definition,reader,xml,bean,definition,reader,super,xml,bean,definition,reader,get,registry,this,standard,xml,bean,definition,reader,new,xml,bean,definition,reader,xml,bean,definition,reader,get,registry,this,groovy,dsl,xml,bean,definition,reader,xml,bean,definition,reader
GroovyBeanDefinitionReader -> public GroovyBeanDefinitionReader(XmlBeanDefinitionReader xmlBeanDefinitionReader);1519771074;Create a new {@code GroovyBeanDefinitionReader} based on the given_{@link XmlBeanDefinitionReader}, loading bean definitions into its_{@code BeanDefinitionRegistry} and delegating Groovy DSL loading to it._<p>The supplied {@code XmlBeanDefinitionReader} should typically_be pre-configured with XML validation disabled._@param xmlBeanDefinitionReader the {@code XmlBeanDefinitionReader} to_derive the registry from and to delegate Groovy DSL loading to;public GroovyBeanDefinitionReader(XmlBeanDefinitionReader xmlBeanDefinitionReader) {_		super(xmlBeanDefinitionReader.getRegistry())__		this.standardXmlBeanDefinitionReader = new XmlBeanDefinitionReader(xmlBeanDefinitionReader.getRegistry())__		this.groovyDslXmlBeanDefinitionReader = xmlBeanDefinitionReader__	};create,a,new,code,groovy,bean,definition,reader,based,on,the,given,link,xml,bean,definition,reader,loading,bean,definitions,into,its,code,bean,definition,registry,and,delegating,groovy,dsl,loading,to,it,p,the,supplied,code,xml,bean,definition,reader,should,typically,be,pre,configured,with,xml,validation,disabled,param,xml,bean,definition,reader,the,code,xml,bean,definition,reader,to,derive,the,registry,from,and,to,delegate,groovy,dsl,loading,to;public,groovy,bean,definition,reader,xml,bean,definition,reader,xml,bean,definition,reader,super,xml,bean,definition,reader,get,registry,this,standard,xml,bean,definition,reader,new,xml,bean,definition,reader,xml,bean,definition,reader,get,registry,this,groovy,dsl,xml,bean,definition,reader,xml,bean,definition,reader
GroovyBeanDefinitionReader -> public GroovyBeanDefinitionReader(XmlBeanDefinitionReader xmlBeanDefinitionReader);1519832519;Create a new {@code GroovyBeanDefinitionReader} based on the given_{@link XmlBeanDefinitionReader}, loading bean definitions into its_{@code BeanDefinitionRegistry} and delegating Groovy DSL loading to it._<p>The supplied {@code XmlBeanDefinitionReader} should typically_be pre-configured with XML validation disabled._@param xmlBeanDefinitionReader the {@code XmlBeanDefinitionReader} to_derive the registry from and to delegate Groovy DSL loading to;public GroovyBeanDefinitionReader(XmlBeanDefinitionReader xmlBeanDefinitionReader) {_		super(xmlBeanDefinitionReader.getRegistry())__		this.standardXmlBeanDefinitionReader = new XmlBeanDefinitionReader(xmlBeanDefinitionReader.getRegistry())__		this.groovyDslXmlBeanDefinitionReader = xmlBeanDefinitionReader__	};create,a,new,code,groovy,bean,definition,reader,based,on,the,given,link,xml,bean,definition,reader,loading,bean,definitions,into,its,code,bean,definition,registry,and,delegating,groovy,dsl,loading,to,it,p,the,supplied,code,xml,bean,definition,reader,should,typically,be,pre,configured,with,xml,validation,disabled,param,xml,bean,definition,reader,the,code,xml,bean,definition,reader,to,derive,the,registry,from,and,to,delegate,groovy,dsl,loading,to;public,groovy,bean,definition,reader,xml,bean,definition,reader,xml,bean,definition,reader,super,xml,bean,definition,reader,get,registry,this,standard,xml,bean,definition,reader,new,xml,bean,definition,reader,xml,bean,definition,reader,get,registry,this,groovy,dsl,xml,bean,definition,reader,xml,bean,definition,reader
GroovyBeanDefinitionReader -> public GroovyBeanDefinitionReader(XmlBeanDefinitionReader xmlBeanDefinitionReader);1519859718;Create a new {@code GroovyBeanDefinitionReader} based on the given_{@link XmlBeanDefinitionReader}, loading bean definitions into its_{@code BeanDefinitionRegistry} and delegating Groovy DSL loading to it._<p>The supplied {@code XmlBeanDefinitionReader} should typically_be pre-configured with XML validation disabled._@param xmlBeanDefinitionReader the {@code XmlBeanDefinitionReader} to_derive the registry from and to delegate Groovy DSL loading to;public GroovyBeanDefinitionReader(XmlBeanDefinitionReader xmlBeanDefinitionReader) {_		super(xmlBeanDefinitionReader.getRegistry())__		this.standardXmlBeanDefinitionReader = new XmlBeanDefinitionReader(xmlBeanDefinitionReader.getRegistry())__		this.groovyDslXmlBeanDefinitionReader = xmlBeanDefinitionReader__	};create,a,new,code,groovy,bean,definition,reader,based,on,the,given,link,xml,bean,definition,reader,loading,bean,definitions,into,its,code,bean,definition,registry,and,delegating,groovy,dsl,loading,to,it,p,the,supplied,code,xml,bean,definition,reader,should,typically,be,pre,configured,with,xml,validation,disabled,param,xml,bean,definition,reader,the,code,xml,bean,definition,reader,to,derive,the,registry,from,and,to,delegate,groovy,dsl,loading,to;public,groovy,bean,definition,reader,xml,bean,definition,reader,xml,bean,definition,reader,super,xml,bean,definition,reader,get,registry,this,standard,xml,bean,definition,reader,new,xml,bean,definition,reader,xml,bean,definition,reader,get,registry,this,groovy,dsl,xml,bean,definition,reader,xml,bean,definition,reader
GroovyBeanDefinitionReader -> public GroovyBeanDefinitionReader(XmlBeanDefinitionReader xmlBeanDefinitionReader);1520529117;Create a new {@code GroovyBeanDefinitionReader} based on the given_{@link XmlBeanDefinitionReader}, loading bean definitions into its_{@code BeanDefinitionRegistry} and delegating Groovy DSL loading to it._<p>The supplied {@code XmlBeanDefinitionReader} should typically_be pre-configured with XML validation disabled._@param xmlBeanDefinitionReader the {@code XmlBeanDefinitionReader} to_derive the registry from and to delegate Groovy DSL loading to;public GroovyBeanDefinitionReader(XmlBeanDefinitionReader xmlBeanDefinitionReader) {_		super(xmlBeanDefinitionReader.getRegistry())__		this.standardXmlBeanDefinitionReader = new XmlBeanDefinitionReader(xmlBeanDefinitionReader.getRegistry())__		this.groovyDslXmlBeanDefinitionReader = xmlBeanDefinitionReader__	};create,a,new,code,groovy,bean,definition,reader,based,on,the,given,link,xml,bean,definition,reader,loading,bean,definitions,into,its,code,bean,definition,registry,and,delegating,groovy,dsl,loading,to,it,p,the,supplied,code,xml,bean,definition,reader,should,typically,be,pre,configured,with,xml,validation,disabled,param,xml,bean,definition,reader,the,code,xml,bean,definition,reader,to,derive,the,registry,from,and,to,delegate,groovy,dsl,loading,to;public,groovy,bean,definition,reader,xml,bean,definition,reader,xml,bean,definition,reader,super,xml,bean,definition,reader,get,registry,this,standard,xml,bean,definition,reader,new,xml,bean,definition,reader,xml,bean,definition,reader,get,registry,this,groovy,dsl,xml,bean,definition,reader,xml,bean,definition,reader
GroovyBeanDefinitionReader -> public GroovyBeanDefinitionReader(XmlBeanDefinitionReader xmlBeanDefinitionReader);1522359230;Create a new {@code GroovyBeanDefinitionReader} based on the given_{@link XmlBeanDefinitionReader}, loading bean definitions into its_{@code BeanDefinitionRegistry} and delegating Groovy DSL loading to it._<p>The supplied {@code XmlBeanDefinitionReader} should typically_be pre-configured with XML validation disabled._@param xmlBeanDefinitionReader the {@code XmlBeanDefinitionReader} to_derive the registry from and to delegate Groovy DSL loading to;public GroovyBeanDefinitionReader(XmlBeanDefinitionReader xmlBeanDefinitionReader) {_		super(xmlBeanDefinitionReader.getRegistry())__		this.standardXmlBeanDefinitionReader = new XmlBeanDefinitionReader(xmlBeanDefinitionReader.getRegistry())__		this.groovyDslXmlBeanDefinitionReader = xmlBeanDefinitionReader__	};create,a,new,code,groovy,bean,definition,reader,based,on,the,given,link,xml,bean,definition,reader,loading,bean,definitions,into,its,code,bean,definition,registry,and,delegating,groovy,dsl,loading,to,it,p,the,supplied,code,xml,bean,definition,reader,should,typically,be,pre,configured,with,xml,validation,disabled,param,xml,bean,definition,reader,the,code,xml,bean,definition,reader,to,derive,the,registry,from,and,to,delegate,groovy,dsl,loading,to;public,groovy,bean,definition,reader,xml,bean,definition,reader,xml,bean,definition,reader,super,xml,bean,definition,reader,get,registry,this,standard,xml,bean,definition,reader,new,xml,bean,definition,reader,xml,bean,definition,reader,get,registry,this,groovy,dsl,xml,bean,definition,reader,xml,bean,definition,reader
GroovyBeanDefinitionReader -> public GroovyBeanDefinitionReader(XmlBeanDefinitionReader xmlBeanDefinitionReader);1530174524;Create a new {@code GroovyBeanDefinitionReader} based on the given_{@link XmlBeanDefinitionReader}, loading bean definitions into its_{@code BeanDefinitionRegistry} and delegating Groovy DSL loading to it._<p>The supplied {@code XmlBeanDefinitionReader} should typically_be pre-configured with XML validation disabled._@param xmlBeanDefinitionReader the {@code XmlBeanDefinitionReader} to_derive the registry from and to delegate Groovy DSL loading to;public GroovyBeanDefinitionReader(XmlBeanDefinitionReader xmlBeanDefinitionReader) {_		super(xmlBeanDefinitionReader.getRegistry())__		this.standardXmlBeanDefinitionReader = new XmlBeanDefinitionReader(xmlBeanDefinitionReader.getRegistry())__		this.groovyDslXmlBeanDefinitionReader = xmlBeanDefinitionReader__	};create,a,new,code,groovy,bean,definition,reader,based,on,the,given,link,xml,bean,definition,reader,loading,bean,definitions,into,its,code,bean,definition,registry,and,delegating,groovy,dsl,loading,to,it,p,the,supplied,code,xml,bean,definition,reader,should,typically,be,pre,configured,with,xml,validation,disabled,param,xml,bean,definition,reader,the,code,xml,bean,definition,reader,to,derive,the,registry,from,and,to,delegate,groovy,dsl,loading,to;public,groovy,bean,definition,reader,xml,bean,definition,reader,xml,bean,definition,reader,super,xml,bean,definition,reader,get,registry,this,standard,xml,bean,definition,reader,new,xml,bean,definition,reader,xml,bean,definition,reader,get,registry,this,groovy,dsl,xml,bean,definition,reader,xml,bean,definition,reader
GroovyBeanDefinitionReader -> public GroovyBeanDefinitionReader(XmlBeanDefinitionReader xmlBeanDefinitionReader);1530174524;Create a new {@code GroovyBeanDefinitionReader} based on the given_{@link XmlBeanDefinitionReader}, loading bean definitions into its_{@code BeanDefinitionRegistry} and delegating Groovy DSL loading to it._<p>The supplied {@code XmlBeanDefinitionReader} should typically_be pre-configured with XML validation disabled._@param xmlBeanDefinitionReader the {@code XmlBeanDefinitionReader} to_derive the registry from and to delegate Groovy DSL loading to;public GroovyBeanDefinitionReader(XmlBeanDefinitionReader xmlBeanDefinitionReader) {_		super(xmlBeanDefinitionReader.getRegistry())__		this.standardXmlBeanDefinitionReader = new XmlBeanDefinitionReader(xmlBeanDefinitionReader.getRegistry())__		this.groovyDslXmlBeanDefinitionReader = xmlBeanDefinitionReader__	};create,a,new,code,groovy,bean,definition,reader,based,on,the,given,link,xml,bean,definition,reader,loading,bean,definitions,into,its,code,bean,definition,registry,and,delegating,groovy,dsl,loading,to,it,p,the,supplied,code,xml,bean,definition,reader,should,typically,be,pre,configured,with,xml,validation,disabled,param,xml,bean,definition,reader,the,code,xml,bean,definition,reader,to,derive,the,registry,from,and,to,delegate,groovy,dsl,loading,to;public,groovy,bean,definition,reader,xml,bean,definition,reader,xml,bean,definition,reader,super,xml,bean,definition,reader,get,registry,this,standard,xml,bean,definition,reader,new,xml,bean,definition,reader,xml,bean,definition,reader,get,registry,this,groovy,dsl,xml,bean,definition,reader,xml,bean,definition,reader
GroovyBeanDefinitionReader -> public GroovyBeanDefinitionReader(XmlBeanDefinitionReader xmlBeanDefinitionReader);1530174524;Create a new {@code GroovyBeanDefinitionReader} based on the given_{@link XmlBeanDefinitionReader}, loading bean definitions into its_{@code BeanDefinitionRegistry} and delegating Groovy DSL loading to it._<p>The supplied {@code XmlBeanDefinitionReader} should typically_be pre-configured with XML validation disabled._@param xmlBeanDefinitionReader the {@code XmlBeanDefinitionReader} to_derive the registry from and to delegate Groovy DSL loading to;public GroovyBeanDefinitionReader(XmlBeanDefinitionReader xmlBeanDefinitionReader) {_		super(xmlBeanDefinitionReader.getRegistry())__		this.standardXmlBeanDefinitionReader = new XmlBeanDefinitionReader(xmlBeanDefinitionReader.getRegistry())__		this.groovyDslXmlBeanDefinitionReader = xmlBeanDefinitionReader__	};create,a,new,code,groovy,bean,definition,reader,based,on,the,given,link,xml,bean,definition,reader,loading,bean,definitions,into,its,code,bean,definition,registry,and,delegating,groovy,dsl,loading,to,it,p,the,supplied,code,xml,bean,definition,reader,should,typically,be,pre,configured,with,xml,validation,disabled,param,xml,bean,definition,reader,the,code,xml,bean,definition,reader,to,derive,the,registry,from,and,to,delegate,groovy,dsl,loading,to;public,groovy,bean,definition,reader,xml,bean,definition,reader,xml,bean,definition,reader,super,xml,bean,definition,reader,get,registry,this,standard,xml,bean,definition,reader,new,xml,bean,definition,reader,xml,bean,definition,reader,get,registry,this,groovy,dsl,xml,bean,definition,reader,xml,bean,definition,reader
GroovyBeanDefinitionReader -> public GroovyBeanDefinitionReader(XmlBeanDefinitionReader xmlBeanDefinitionReader);1530190293;Create a new {@code GroovyBeanDefinitionReader} based on the given_{@link XmlBeanDefinitionReader}, loading bean definitions into its_{@code BeanDefinitionRegistry} and delegating Groovy DSL loading to it._<p>The supplied {@code XmlBeanDefinitionReader} should typically_be pre-configured with XML validation disabled._@param xmlBeanDefinitionReader the {@code XmlBeanDefinitionReader} to_derive the registry from and to delegate Groovy DSL loading to;public GroovyBeanDefinitionReader(XmlBeanDefinitionReader xmlBeanDefinitionReader) {_		super(xmlBeanDefinitionReader.getRegistry())__		this.standardXmlBeanDefinitionReader = new XmlBeanDefinitionReader(xmlBeanDefinitionReader.getRegistry())__		this.groovyDslXmlBeanDefinitionReader = xmlBeanDefinitionReader__	};create,a,new,code,groovy,bean,definition,reader,based,on,the,given,link,xml,bean,definition,reader,loading,bean,definitions,into,its,code,bean,definition,registry,and,delegating,groovy,dsl,loading,to,it,p,the,supplied,code,xml,bean,definition,reader,should,typically,be,pre,configured,with,xml,validation,disabled,param,xml,bean,definition,reader,the,code,xml,bean,definition,reader,to,derive,the,registry,from,and,to,delegate,groovy,dsl,loading,to;public,groovy,bean,definition,reader,xml,bean,definition,reader,xml,bean,definition,reader,super,xml,bean,definition,reader,get,registry,this,standard,xml,bean,definition,reader,new,xml,bean,definition,reader,xml,bean,definition,reader,get,registry,this,groovy,dsl,xml,bean,definition,reader,xml,bean,definition,reader
GroovyBeanDefinitionReader -> public GroovyBeanDefinitionReader(XmlBeanDefinitionReader xmlBeanDefinitionReader);1532706365;Create a new {@code GroovyBeanDefinitionReader} based on the given_{@link XmlBeanDefinitionReader}, loading bean definitions into its_{@code BeanDefinitionRegistry} and delegating Groovy DSL loading to it._<p>The supplied {@code XmlBeanDefinitionReader} should typically_be pre-configured with XML validation disabled._@param xmlBeanDefinitionReader the {@code XmlBeanDefinitionReader} to_derive the registry from and to delegate Groovy DSL loading to;public GroovyBeanDefinitionReader(XmlBeanDefinitionReader xmlBeanDefinitionReader) {_		super(xmlBeanDefinitionReader.getRegistry())__		this.standardXmlBeanDefinitionReader = new XmlBeanDefinitionReader(xmlBeanDefinitionReader.getRegistry())__		this.groovyDslXmlBeanDefinitionReader = xmlBeanDefinitionReader__	};create,a,new,code,groovy,bean,definition,reader,based,on,the,given,link,xml,bean,definition,reader,loading,bean,definitions,into,its,code,bean,definition,registry,and,delegating,groovy,dsl,loading,to,it,p,the,supplied,code,xml,bean,definition,reader,should,typically,be,pre,configured,with,xml,validation,disabled,param,xml,bean,definition,reader,the,code,xml,bean,definition,reader,to,derive,the,registry,from,and,to,delegate,groovy,dsl,loading,to;public,groovy,bean,definition,reader,xml,bean,definition,reader,xml,bean,definition,reader,super,xml,bean,definition,reader,get,registry,this,standard,xml,bean,definition,reader,new,xml,bean,definition,reader,xml,bean,definition,reader,get,registry,this,groovy,dsl,xml,bean,definition,reader,xml,bean,definition,reader
GroovyBeanDefinitionReader -> public Binding getBinding();1503319306;Return a specified binding for Groovy variables, if any.;public Binding getBinding() {_		return this.binding__	};return,a,specified,binding,for,groovy,variables,if,any;public,binding,get,binding,return,this,binding
GroovyBeanDefinitionReader -> public Binding getBinding();1506097334;Return a specified binding for Groovy variables, if any.;public Binding getBinding() {_		return this.binding__	};return,a,specified,binding,for,groovy,variables,if,any;public,binding,get,binding,return,this,binding
GroovyBeanDefinitionReader -> public Binding getBinding();1519771074;Return a specified binding for Groovy variables, if any.;public Binding getBinding() {_		return this.binding__	};return,a,specified,binding,for,groovy,variables,if,any;public,binding,get,binding,return,this,binding
GroovyBeanDefinitionReader -> public Binding getBinding();1519832519;Return a specified binding for Groovy variables, if any.;public Binding getBinding() {_		return this.binding__	};return,a,specified,binding,for,groovy,variables,if,any;public,binding,get,binding,return,this,binding
GroovyBeanDefinitionReader -> public Binding getBinding();1519859718;Return a specified binding for Groovy variables, if any.;public Binding getBinding() {_		return this.binding__	};return,a,specified,binding,for,groovy,variables,if,any;public,binding,get,binding,return,this,binding
GroovyBeanDefinitionReader -> public Binding getBinding();1520529117;Return a specified binding for Groovy variables, if any.;public Binding getBinding() {_		return this.binding__	};return,a,specified,binding,for,groovy,variables,if,any;public,binding,get,binding,return,this,binding
GroovyBeanDefinitionReader -> public Binding getBinding();1522359230;Return a specified binding for Groovy variables, if any.;public Binding getBinding() {_		return this.binding__	};return,a,specified,binding,for,groovy,variables,if,any;public,binding,get,binding,return,this,binding
GroovyBeanDefinitionReader -> public Binding getBinding();1530174524;Return a specified binding for Groovy variables, if any.;public Binding getBinding() {_		return this.binding__	};return,a,specified,binding,for,groovy,variables,if,any;public,binding,get,binding,return,this,binding
GroovyBeanDefinitionReader -> public Binding getBinding();1530174524;Return a specified binding for Groovy variables, if any.;public Binding getBinding() {_		return this.binding__	};return,a,specified,binding,for,groovy,variables,if,any;public,binding,get,binding,return,this,binding
GroovyBeanDefinitionReader -> public Binding getBinding();1530174524;Return a specified binding for Groovy variables, if any.;public Binding getBinding() {_		return this.binding__	};return,a,specified,binding,for,groovy,variables,if,any;public,binding,get,binding,return,this,binding
GroovyBeanDefinitionReader -> public Binding getBinding();1530190293;Return a specified binding for Groovy variables, if any.;public Binding getBinding() {_		return this.binding__	};return,a,specified,binding,for,groovy,variables,if,any;public,binding,get,binding,return,this,binding
GroovyBeanDefinitionReader -> public Binding getBinding();1532706365;Return a specified binding for Groovy variables, if any.;public Binding getBinding() {_		return this.binding__	};return,a,specified,binding,for,groovy,variables,if,any;public,binding,get,binding,return,this,binding
GroovyBeanDefinitionReader -> public Object invokeMethod(String name, Object arg);1503319306;This method overrides method invocation to create beans for each method name that_takes a class argument.;public Object invokeMethod(String name, Object arg) {_		Object[] args = (Object[])arg__		if ("beans".equals(name) && args.length == 1 && args[0] instanceof Closure) {_			return beans((Closure) args[0])__		}_		else if ("ref".equals(name)) {_			String refName__			if (args[0] == null)_				throw new IllegalArgumentException("Argument to ref() is not a valid bean or was not found")___			if (args[0] instanceof RuntimeBeanReference) {_				refName = ((RuntimeBeanReference) args[0]).getBeanName()__			}_			else {_				refName = args[0].toString()__			}_			boolean parentRef = false__			if (args.length > 1) {_				if (args[1] instanceof Boolean) {_					parentRef = (Boolean) args[1]__				}_			}_			return new RuntimeBeanReference(refName, parentRef)__		}_		else if (this.namespaces.containsKey(name) && args.length > 0 && args[0] instanceof Closure) {_			GroovyDynamicElementReader reader = createDynamicElementReader(name)__			reader.invokeMethod("doCall", args)__		}_		else if (args.length > 0 && args[0] instanceof Closure) {_			_			return invokeBeanDefiningMethod(name, args)__		}_		else if (args.length > 0 &&_				(args[0] instanceof Class || args[0] instanceof RuntimeBeanReference || args[0] instanceof Map)) {_			return invokeBeanDefiningMethod(name, args)__		}_		else if (args.length > 1 && args[args.length -1] instanceof Closure) {_			return invokeBeanDefiningMethod(name, args)__		}_		MetaClass mc = DefaultGroovyMethods.getMetaClass(getRegistry())__		if (!mc.respondsTo(getRegistry(), name, args).isEmpty()){_			return mc.invokeMethod(getRegistry(), name, args)__		}_		return this__	};this,method,overrides,method,invocation,to,create,beans,for,each,method,name,that,takes,a,class,argument;public,object,invoke,method,string,name,object,arg,object,args,object,arg,if,beans,equals,name,args,length,1,args,0,instanceof,closure,return,beans,closure,args,0,else,if,ref,equals,name,string,ref,name,if,args,0,null,throw,new,illegal,argument,exception,argument,to,ref,is,not,a,valid,bean,or,was,not,found,if,args,0,instanceof,runtime,bean,reference,ref,name,runtime,bean,reference,args,0,get,bean,name,else,ref,name,args,0,to,string,boolean,parent,ref,false,if,args,length,1,if,args,1,instanceof,boolean,parent,ref,boolean,args,1,return,new,runtime,bean,reference,ref,name,parent,ref,else,if,this,namespaces,contains,key,name,args,length,0,args,0,instanceof,closure,groovy,dynamic,element,reader,reader,create,dynamic,element,reader,name,reader,invoke,method,do,call,args,else,if,args,length,0,args,0,instanceof,closure,return,invoke,bean,defining,method,name,args,else,if,args,length,0,args,0,instanceof,class,args,0,instanceof,runtime,bean,reference,args,0,instanceof,map,return,invoke,bean,defining,method,name,args,else,if,args,length,1,args,args,length,1,instanceof,closure,return,invoke,bean,defining,method,name,args,meta,class,mc,default,groovy,methods,get,meta,class,get,registry,if,mc,responds,to,get,registry,name,args,is,empty,return,mc,invoke,method,get,registry,name,args,return,this
GroovyBeanDefinitionReader -> public Object invokeMethod(String name, Object arg);1506097334;This method overrides method invocation to create beans for each method name that_takes a class argument.;public Object invokeMethod(String name, Object arg) {_		Object[] args = (Object[])arg__		if ("beans".equals(name) && args.length == 1 && args[0] instanceof Closure) {_			return beans((Closure) args[0])__		}_		else if ("ref".equals(name)) {_			String refName__			if (args[0] == null)_				throw new IllegalArgumentException("Argument to ref() is not a valid bean or was not found")___			if (args[0] instanceof RuntimeBeanReference) {_				refName = ((RuntimeBeanReference) args[0]).getBeanName()__			}_			else {_				refName = args[0].toString()__			}_			boolean parentRef = false__			if (args.length > 1) {_				if (args[1] instanceof Boolean) {_					parentRef = (Boolean) args[1]__				}_			}_			return new RuntimeBeanReference(refName, parentRef)__		}_		else if (this.namespaces.containsKey(name) && args.length > 0 && args[0] instanceof Closure) {_			GroovyDynamicElementReader reader = createDynamicElementReader(name)__			reader.invokeMethod("doCall", args)__		}_		else if (args.length > 0 && args[0] instanceof Closure) {_			_			return invokeBeanDefiningMethod(name, args)__		}_		else if (args.length > 0 &&_				(args[0] instanceof Class || args[0] instanceof RuntimeBeanReference || args[0] instanceof Map)) {_			return invokeBeanDefiningMethod(name, args)__		}_		else if (args.length > 1 && args[args.length -1] instanceof Closure) {_			return invokeBeanDefiningMethod(name, args)__		}_		MetaClass mc = DefaultGroovyMethods.getMetaClass(getRegistry())__		if (!mc.respondsTo(getRegistry(), name, args).isEmpty()){_			return mc.invokeMethod(getRegistry(), name, args)__		}_		return this__	};this,method,overrides,method,invocation,to,create,beans,for,each,method,name,that,takes,a,class,argument;public,object,invoke,method,string,name,object,arg,object,args,object,arg,if,beans,equals,name,args,length,1,args,0,instanceof,closure,return,beans,closure,args,0,else,if,ref,equals,name,string,ref,name,if,args,0,null,throw,new,illegal,argument,exception,argument,to,ref,is,not,a,valid,bean,or,was,not,found,if,args,0,instanceof,runtime,bean,reference,ref,name,runtime,bean,reference,args,0,get,bean,name,else,ref,name,args,0,to,string,boolean,parent,ref,false,if,args,length,1,if,args,1,instanceof,boolean,parent,ref,boolean,args,1,return,new,runtime,bean,reference,ref,name,parent,ref,else,if,this,namespaces,contains,key,name,args,length,0,args,0,instanceof,closure,groovy,dynamic,element,reader,reader,create,dynamic,element,reader,name,reader,invoke,method,do,call,args,else,if,args,length,0,args,0,instanceof,closure,return,invoke,bean,defining,method,name,args,else,if,args,length,0,args,0,instanceof,class,args,0,instanceof,runtime,bean,reference,args,0,instanceof,map,return,invoke,bean,defining,method,name,args,else,if,args,length,1,args,args,length,1,instanceof,closure,return,invoke,bean,defining,method,name,args,meta,class,mc,default,groovy,methods,get,meta,class,get,registry,if,mc,responds,to,get,registry,name,args,is,empty,return,mc,invoke,method,get,registry,name,args,return,this
GroovyBeanDefinitionReader -> public Object invokeMethod(String name, Object arg);1519771074;This method overrides method invocation to create beans for each method name that_takes a class argument.;public Object invokeMethod(String name, Object arg) {_		Object[] args = (Object[])arg__		if ("beans".equals(name) && args.length == 1 && args[0] instanceof Closure) {_			return beans((Closure) args[0])__		}_		else if ("ref".equals(name)) {_			String refName__			if (args[0] == null)_				throw new IllegalArgumentException("Argument to ref() is not a valid bean or was not found")___			if (args[0] instanceof RuntimeBeanReference) {_				refName = ((RuntimeBeanReference) args[0]).getBeanName()__			}_			else {_				refName = args[0].toString()__			}_			boolean parentRef = false__			if (args.length > 1) {_				if (args[1] instanceof Boolean) {_					parentRef = (Boolean) args[1]__				}_			}_			return new RuntimeBeanReference(refName, parentRef)__		}_		else if (this.namespaces.containsKey(name) && args.length > 0 && args[0] instanceof Closure) {_			GroovyDynamicElementReader reader = createDynamicElementReader(name)__			reader.invokeMethod("doCall", args)__		}_		else if (args.length > 0 && args[0] instanceof Closure) {_			_			return invokeBeanDefiningMethod(name, args)__		}_		else if (args.length > 0 &&_				(args[0] instanceof Class || args[0] instanceof RuntimeBeanReference || args[0] instanceof Map)) {_			return invokeBeanDefiningMethod(name, args)__		}_		else if (args.length > 1 && args[args.length -1] instanceof Closure) {_			return invokeBeanDefiningMethod(name, args)__		}_		MetaClass mc = DefaultGroovyMethods.getMetaClass(getRegistry())__		if (!mc.respondsTo(getRegistry(), name, args).isEmpty()){_			return mc.invokeMethod(getRegistry(), name, args)__		}_		return this__	};this,method,overrides,method,invocation,to,create,beans,for,each,method,name,that,takes,a,class,argument;public,object,invoke,method,string,name,object,arg,object,args,object,arg,if,beans,equals,name,args,length,1,args,0,instanceof,closure,return,beans,closure,args,0,else,if,ref,equals,name,string,ref,name,if,args,0,null,throw,new,illegal,argument,exception,argument,to,ref,is,not,a,valid,bean,or,was,not,found,if,args,0,instanceof,runtime,bean,reference,ref,name,runtime,bean,reference,args,0,get,bean,name,else,ref,name,args,0,to,string,boolean,parent,ref,false,if,args,length,1,if,args,1,instanceof,boolean,parent,ref,boolean,args,1,return,new,runtime,bean,reference,ref,name,parent,ref,else,if,this,namespaces,contains,key,name,args,length,0,args,0,instanceof,closure,groovy,dynamic,element,reader,reader,create,dynamic,element,reader,name,reader,invoke,method,do,call,args,else,if,args,length,0,args,0,instanceof,closure,return,invoke,bean,defining,method,name,args,else,if,args,length,0,args,0,instanceof,class,args,0,instanceof,runtime,bean,reference,args,0,instanceof,map,return,invoke,bean,defining,method,name,args,else,if,args,length,1,args,args,length,1,instanceof,closure,return,invoke,bean,defining,method,name,args,meta,class,mc,default,groovy,methods,get,meta,class,get,registry,if,mc,responds,to,get,registry,name,args,is,empty,return,mc,invoke,method,get,registry,name,args,return,this
GroovyBeanDefinitionReader -> public Object invokeMethod(String name, Object arg);1519832519;This method overrides method invocation to create beans for each method name that_takes a class argument.;public Object invokeMethod(String name, Object arg) {_		Object[] args = (Object[])arg__		if ("beans".equals(name) && args.length == 1 && args[0] instanceof Closure) {_			return beans((Closure) args[0])__		}_		else if ("ref".equals(name)) {_			String refName__			if (args[0] == null)_				throw new IllegalArgumentException("Argument to ref() is not a valid bean or was not found")___			if (args[0] instanceof RuntimeBeanReference) {_				refName = ((RuntimeBeanReference) args[0]).getBeanName()__			}_			else {_				refName = args[0].toString()__			}_			boolean parentRef = false__			if (args.length > 1) {_				if (args[1] instanceof Boolean) {_					parentRef = (Boolean) args[1]__				}_			}_			return new RuntimeBeanReference(refName, parentRef)__		}_		else if (this.namespaces.containsKey(name) && args.length > 0 && args[0] instanceof Closure) {_			GroovyDynamicElementReader reader = createDynamicElementReader(name)__			reader.invokeMethod("doCall", args)__		}_		else if (args.length > 0 && args[0] instanceof Closure) {_			_			return invokeBeanDefiningMethod(name, args)__		}_		else if (args.length > 0 &&_				(args[0] instanceof Class || args[0] instanceof RuntimeBeanReference || args[0] instanceof Map)) {_			return invokeBeanDefiningMethod(name, args)__		}_		else if (args.length > 1 && args[args.length -1] instanceof Closure) {_			return invokeBeanDefiningMethod(name, args)__		}_		MetaClass mc = DefaultGroovyMethods.getMetaClass(getRegistry())__		if (!mc.respondsTo(getRegistry(), name, args).isEmpty()){_			return mc.invokeMethod(getRegistry(), name, args)__		}_		return this__	};this,method,overrides,method,invocation,to,create,beans,for,each,method,name,that,takes,a,class,argument;public,object,invoke,method,string,name,object,arg,object,args,object,arg,if,beans,equals,name,args,length,1,args,0,instanceof,closure,return,beans,closure,args,0,else,if,ref,equals,name,string,ref,name,if,args,0,null,throw,new,illegal,argument,exception,argument,to,ref,is,not,a,valid,bean,or,was,not,found,if,args,0,instanceof,runtime,bean,reference,ref,name,runtime,bean,reference,args,0,get,bean,name,else,ref,name,args,0,to,string,boolean,parent,ref,false,if,args,length,1,if,args,1,instanceof,boolean,parent,ref,boolean,args,1,return,new,runtime,bean,reference,ref,name,parent,ref,else,if,this,namespaces,contains,key,name,args,length,0,args,0,instanceof,closure,groovy,dynamic,element,reader,reader,create,dynamic,element,reader,name,reader,invoke,method,do,call,args,else,if,args,length,0,args,0,instanceof,closure,return,invoke,bean,defining,method,name,args,else,if,args,length,0,args,0,instanceof,class,args,0,instanceof,runtime,bean,reference,args,0,instanceof,map,return,invoke,bean,defining,method,name,args,else,if,args,length,1,args,args,length,1,instanceof,closure,return,invoke,bean,defining,method,name,args,meta,class,mc,default,groovy,methods,get,meta,class,get,registry,if,mc,responds,to,get,registry,name,args,is,empty,return,mc,invoke,method,get,registry,name,args,return,this
GroovyBeanDefinitionReader -> public Object invokeMethod(String name, Object arg);1519859718;This method overrides method invocation to create beans for each method name that_takes a class argument.;public Object invokeMethod(String name, Object arg) {_		Object[] args = (Object[])arg__		if ("beans".equals(name) && args.length == 1 && args[0] instanceof Closure) {_			return beans((Closure) args[0])__		}_		else if ("ref".equals(name)) {_			String refName__			if (args[0] == null)_				throw new IllegalArgumentException("Argument to ref() is not a valid bean or was not found")___			if (args[0] instanceof RuntimeBeanReference) {_				refName = ((RuntimeBeanReference) args[0]).getBeanName()__			}_			else {_				refName = args[0].toString()__			}_			boolean parentRef = false__			if (args.length > 1) {_				if (args[1] instanceof Boolean) {_					parentRef = (Boolean) args[1]__				}_			}_			return new RuntimeBeanReference(refName, parentRef)__		}_		else if (this.namespaces.containsKey(name) && args.length > 0 && args[0] instanceof Closure) {_			GroovyDynamicElementReader reader = createDynamicElementReader(name)__			reader.invokeMethod("doCall", args)__		}_		else if (args.length > 0 && args[0] instanceof Closure) {_			_			return invokeBeanDefiningMethod(name, args)__		}_		else if (args.length > 0 &&_				(args[0] instanceof Class || args[0] instanceof RuntimeBeanReference || args[0] instanceof Map)) {_			return invokeBeanDefiningMethod(name, args)__		}_		else if (args.length > 1 && args[args.length -1] instanceof Closure) {_			return invokeBeanDefiningMethod(name, args)__		}_		MetaClass mc = DefaultGroovyMethods.getMetaClass(getRegistry())__		if (!mc.respondsTo(getRegistry(), name, args).isEmpty()){_			return mc.invokeMethod(getRegistry(), name, args)__		}_		return this__	};this,method,overrides,method,invocation,to,create,beans,for,each,method,name,that,takes,a,class,argument;public,object,invoke,method,string,name,object,arg,object,args,object,arg,if,beans,equals,name,args,length,1,args,0,instanceof,closure,return,beans,closure,args,0,else,if,ref,equals,name,string,ref,name,if,args,0,null,throw,new,illegal,argument,exception,argument,to,ref,is,not,a,valid,bean,or,was,not,found,if,args,0,instanceof,runtime,bean,reference,ref,name,runtime,bean,reference,args,0,get,bean,name,else,ref,name,args,0,to,string,boolean,parent,ref,false,if,args,length,1,if,args,1,instanceof,boolean,parent,ref,boolean,args,1,return,new,runtime,bean,reference,ref,name,parent,ref,else,if,this,namespaces,contains,key,name,args,length,0,args,0,instanceof,closure,groovy,dynamic,element,reader,reader,create,dynamic,element,reader,name,reader,invoke,method,do,call,args,else,if,args,length,0,args,0,instanceof,closure,return,invoke,bean,defining,method,name,args,else,if,args,length,0,args,0,instanceof,class,args,0,instanceof,runtime,bean,reference,args,0,instanceof,map,return,invoke,bean,defining,method,name,args,else,if,args,length,1,args,args,length,1,instanceof,closure,return,invoke,bean,defining,method,name,args,meta,class,mc,default,groovy,methods,get,meta,class,get,registry,if,mc,responds,to,get,registry,name,args,is,empty,return,mc,invoke,method,get,registry,name,args,return,this
GroovyBeanDefinitionReader -> public Object invokeMethod(String name, Object arg);1520529117;This method overrides method invocation to create beans for each method name that_takes a class argument.;public Object invokeMethod(String name, Object arg) {_		Object[] args = (Object[])arg__		if ("beans".equals(name) && args.length == 1 && args[0] instanceof Closure) {_			return beans((Closure) args[0])__		}_		else if ("ref".equals(name)) {_			String refName__			if (args[0] == null)_				throw new IllegalArgumentException("Argument to ref() is not a valid bean or was not found")___			if (args[0] instanceof RuntimeBeanReference) {_				refName = ((RuntimeBeanReference) args[0]).getBeanName()__			}_			else {_				refName = args[0].toString()__			}_			boolean parentRef = false__			if (args.length > 1 && args[1] instanceof Boolean) {_				parentRef = (Boolean) args[1]__			}_			return new RuntimeBeanReference(refName, parentRef)__		}_		else if (this.namespaces.containsKey(name) && args.length > 0 && args[0] instanceof Closure) {_			GroovyDynamicElementReader reader = createDynamicElementReader(name)__			reader.invokeMethod("doCall", args)__		}_		else if (args.length > 0 && args[0] instanceof Closure) {_			_			return invokeBeanDefiningMethod(name, args)__		}_		else if (args.length > 0 &&_				(args[0] instanceof Class || args[0] instanceof RuntimeBeanReference || args[0] instanceof Map)) {_			return invokeBeanDefiningMethod(name, args)__		}_		else if (args.length > 1 && args[args.length -1] instanceof Closure) {_			return invokeBeanDefiningMethod(name, args)__		}_		MetaClass mc = DefaultGroovyMethods.getMetaClass(getRegistry())__		if (!mc.respondsTo(getRegistry(), name, args).isEmpty()){_			return mc.invokeMethod(getRegistry(), name, args)__		}_		return this__	};this,method,overrides,method,invocation,to,create,beans,for,each,method,name,that,takes,a,class,argument;public,object,invoke,method,string,name,object,arg,object,args,object,arg,if,beans,equals,name,args,length,1,args,0,instanceof,closure,return,beans,closure,args,0,else,if,ref,equals,name,string,ref,name,if,args,0,null,throw,new,illegal,argument,exception,argument,to,ref,is,not,a,valid,bean,or,was,not,found,if,args,0,instanceof,runtime,bean,reference,ref,name,runtime,bean,reference,args,0,get,bean,name,else,ref,name,args,0,to,string,boolean,parent,ref,false,if,args,length,1,args,1,instanceof,boolean,parent,ref,boolean,args,1,return,new,runtime,bean,reference,ref,name,parent,ref,else,if,this,namespaces,contains,key,name,args,length,0,args,0,instanceof,closure,groovy,dynamic,element,reader,reader,create,dynamic,element,reader,name,reader,invoke,method,do,call,args,else,if,args,length,0,args,0,instanceof,closure,return,invoke,bean,defining,method,name,args,else,if,args,length,0,args,0,instanceof,class,args,0,instanceof,runtime,bean,reference,args,0,instanceof,map,return,invoke,bean,defining,method,name,args,else,if,args,length,1,args,args,length,1,instanceof,closure,return,invoke,bean,defining,method,name,args,meta,class,mc,default,groovy,methods,get,meta,class,get,registry,if,mc,responds,to,get,registry,name,args,is,empty,return,mc,invoke,method,get,registry,name,args,return,this
GroovyBeanDefinitionReader -> public Object invokeMethod(String name, Object arg);1522359230;This method overrides method invocation to create beans for each method name that_takes a class argument.;public Object invokeMethod(String name, Object arg) {_		Object[] args = (Object[])arg__		if ("beans".equals(name) && args.length == 1 && args[0] instanceof Closure) {_			return beans((Closure) args[0])__		}_		else if ("ref".equals(name)) {_			String refName__			if (args[0] == null)_				throw new IllegalArgumentException("Argument to ref() is not a valid bean or was not found")___			if (args[0] instanceof RuntimeBeanReference) {_				refName = ((RuntimeBeanReference) args[0]).getBeanName()__			}_			else {_				refName = args[0].toString()__			}_			boolean parentRef = false__			if (args.length > 1 && args[1] instanceof Boolean) {_				parentRef = (Boolean) args[1]__			}_			return new RuntimeBeanReference(refName, parentRef)__		}_		else if (this.namespaces.containsKey(name) && args.length > 0 && args[0] instanceof Closure) {_			GroovyDynamicElementReader reader = createDynamicElementReader(name)__			reader.invokeMethod("doCall", args)__		}_		else if (args.length > 0 && args[0] instanceof Closure) {_			_			return invokeBeanDefiningMethod(name, args)__		}_		else if (args.length > 0 &&_				(args[0] instanceof Class || args[0] instanceof RuntimeBeanReference || args[0] instanceof Map)) {_			return invokeBeanDefiningMethod(name, args)__		}_		else if (args.length > 1 && args[args.length -1] instanceof Closure) {_			return invokeBeanDefiningMethod(name, args)__		}_		MetaClass mc = DefaultGroovyMethods.getMetaClass(getRegistry())__		if (!mc.respondsTo(getRegistry(), name, args).isEmpty()){_			return mc.invokeMethod(getRegistry(), name, args)__		}_		return this__	};this,method,overrides,method,invocation,to,create,beans,for,each,method,name,that,takes,a,class,argument;public,object,invoke,method,string,name,object,arg,object,args,object,arg,if,beans,equals,name,args,length,1,args,0,instanceof,closure,return,beans,closure,args,0,else,if,ref,equals,name,string,ref,name,if,args,0,null,throw,new,illegal,argument,exception,argument,to,ref,is,not,a,valid,bean,or,was,not,found,if,args,0,instanceof,runtime,bean,reference,ref,name,runtime,bean,reference,args,0,get,bean,name,else,ref,name,args,0,to,string,boolean,parent,ref,false,if,args,length,1,args,1,instanceof,boolean,parent,ref,boolean,args,1,return,new,runtime,bean,reference,ref,name,parent,ref,else,if,this,namespaces,contains,key,name,args,length,0,args,0,instanceof,closure,groovy,dynamic,element,reader,reader,create,dynamic,element,reader,name,reader,invoke,method,do,call,args,else,if,args,length,0,args,0,instanceof,closure,return,invoke,bean,defining,method,name,args,else,if,args,length,0,args,0,instanceof,class,args,0,instanceof,runtime,bean,reference,args,0,instanceof,map,return,invoke,bean,defining,method,name,args,else,if,args,length,1,args,args,length,1,instanceof,closure,return,invoke,bean,defining,method,name,args,meta,class,mc,default,groovy,methods,get,meta,class,get,registry,if,mc,responds,to,get,registry,name,args,is,empty,return,mc,invoke,method,get,registry,name,args,return,this
GroovyBeanDefinitionReader -> public Object invokeMethod(String name, Object arg);1530174524;This method overrides method invocation to create beans for each method name that_takes a class argument.;public Object invokeMethod(String name, Object arg) {_		Object[] args = (Object[])arg__		if ("beans".equals(name) && args.length == 1 && args[0] instanceof Closure) {_			return beans((Closure) args[0])__		}_		else if ("ref".equals(name)) {_			String refName__			if (args[0] == null)_				throw new IllegalArgumentException("Argument to ref() is not a valid bean or was not found")___			if (args[0] instanceof RuntimeBeanReference) {_				refName = ((RuntimeBeanReference) args[0]).getBeanName()__			}_			else {_				refName = args[0].toString()__			}_			boolean parentRef = false__			if (args.length > 1 && args[1] instanceof Boolean) {_				parentRef = (Boolean) args[1]__			}_			return new RuntimeBeanReference(refName, parentRef)__		}_		else if (this.namespaces.containsKey(name) && args.length > 0 && args[0] instanceof Closure) {_			GroovyDynamicElementReader reader = createDynamicElementReader(name)__			reader.invokeMethod("doCall", args)__		}_		else if (args.length > 0 && args[0] instanceof Closure) {_			_			return invokeBeanDefiningMethod(name, args)__		}_		else if (args.length > 0 &&_				(args[0] instanceof Class || args[0] instanceof RuntimeBeanReference || args[0] instanceof Map)) {_			return invokeBeanDefiningMethod(name, args)__		}_		else if (args.length > 1 && args[args.length -1] instanceof Closure) {_			return invokeBeanDefiningMethod(name, args)__		}_		MetaClass mc = DefaultGroovyMethods.getMetaClass(getRegistry())__		if (!mc.respondsTo(getRegistry(), name, args).isEmpty()){_			return mc.invokeMethod(getRegistry(), name, args)__		}_		return this__	};this,method,overrides,method,invocation,to,create,beans,for,each,method,name,that,takes,a,class,argument;public,object,invoke,method,string,name,object,arg,object,args,object,arg,if,beans,equals,name,args,length,1,args,0,instanceof,closure,return,beans,closure,args,0,else,if,ref,equals,name,string,ref,name,if,args,0,null,throw,new,illegal,argument,exception,argument,to,ref,is,not,a,valid,bean,or,was,not,found,if,args,0,instanceof,runtime,bean,reference,ref,name,runtime,bean,reference,args,0,get,bean,name,else,ref,name,args,0,to,string,boolean,parent,ref,false,if,args,length,1,args,1,instanceof,boolean,parent,ref,boolean,args,1,return,new,runtime,bean,reference,ref,name,parent,ref,else,if,this,namespaces,contains,key,name,args,length,0,args,0,instanceof,closure,groovy,dynamic,element,reader,reader,create,dynamic,element,reader,name,reader,invoke,method,do,call,args,else,if,args,length,0,args,0,instanceof,closure,return,invoke,bean,defining,method,name,args,else,if,args,length,0,args,0,instanceof,class,args,0,instanceof,runtime,bean,reference,args,0,instanceof,map,return,invoke,bean,defining,method,name,args,else,if,args,length,1,args,args,length,1,instanceof,closure,return,invoke,bean,defining,method,name,args,meta,class,mc,default,groovy,methods,get,meta,class,get,registry,if,mc,responds,to,get,registry,name,args,is,empty,return,mc,invoke,method,get,registry,name,args,return,this
GroovyBeanDefinitionReader -> public Object invokeMethod(String name, Object arg);1530174524;This method overrides method invocation to create beans for each method name that_takes a class argument.;public Object invokeMethod(String name, Object arg) {_		Object[] args = (Object[])arg__		if ("beans".equals(name) && args.length == 1 && args[0] instanceof Closure) {_			return beans((Closure) args[0])__		}_		else if ("ref".equals(name)) {_			String refName__			if (args[0] == null) {_				throw new IllegalArgumentException("Argument to ref() is not a valid bean or was not found")__			}__			if (args[0] instanceof RuntimeBeanReference) {_				refName = ((RuntimeBeanReference) args[0]).getBeanName()__			}_			else {_				refName = args[0].toString()__			}_			boolean parentRef = false__			if (args.length > 1 && args[1] instanceof Boolean) {_				parentRef = (Boolean) args[1]__			}_			return new RuntimeBeanReference(refName, parentRef)__		}_		else if (this.namespaces.containsKey(name) && args.length > 0 && args[0] instanceof Closure) {_			GroovyDynamicElementReader reader = createDynamicElementReader(name)__			reader.invokeMethod("doCall", args)__		}_		else if (args.length > 0 && args[0] instanceof Closure) {_			_			return invokeBeanDefiningMethod(name, args)__		}_		else if (args.length > 0 &&_				(args[0] instanceof Class || args[0] instanceof RuntimeBeanReference || args[0] instanceof Map)) {_			return invokeBeanDefiningMethod(name, args)__		}_		else if (args.length > 1 && args[args.length -1] instanceof Closure) {_			return invokeBeanDefiningMethod(name, args)__		}_		MetaClass mc = DefaultGroovyMethods.getMetaClass(getRegistry())__		if (!mc.respondsTo(getRegistry(), name, args).isEmpty()){_			return mc.invokeMethod(getRegistry(), name, args)__		}_		return this__	};this,method,overrides,method,invocation,to,create,beans,for,each,method,name,that,takes,a,class,argument;public,object,invoke,method,string,name,object,arg,object,args,object,arg,if,beans,equals,name,args,length,1,args,0,instanceof,closure,return,beans,closure,args,0,else,if,ref,equals,name,string,ref,name,if,args,0,null,throw,new,illegal,argument,exception,argument,to,ref,is,not,a,valid,bean,or,was,not,found,if,args,0,instanceof,runtime,bean,reference,ref,name,runtime,bean,reference,args,0,get,bean,name,else,ref,name,args,0,to,string,boolean,parent,ref,false,if,args,length,1,args,1,instanceof,boolean,parent,ref,boolean,args,1,return,new,runtime,bean,reference,ref,name,parent,ref,else,if,this,namespaces,contains,key,name,args,length,0,args,0,instanceof,closure,groovy,dynamic,element,reader,reader,create,dynamic,element,reader,name,reader,invoke,method,do,call,args,else,if,args,length,0,args,0,instanceof,closure,return,invoke,bean,defining,method,name,args,else,if,args,length,0,args,0,instanceof,class,args,0,instanceof,runtime,bean,reference,args,0,instanceof,map,return,invoke,bean,defining,method,name,args,else,if,args,length,1,args,args,length,1,instanceof,closure,return,invoke,bean,defining,method,name,args,meta,class,mc,default,groovy,methods,get,meta,class,get,registry,if,mc,responds,to,get,registry,name,args,is,empty,return,mc,invoke,method,get,registry,name,args,return,this
GroovyBeanDefinitionReader -> public Object invokeMethod(String name, Object arg);1530174524;This method overrides method invocation to create beans for each method name that_takes a class argument.;public Object invokeMethod(String name, Object arg) {_		Object[] args = (Object[])arg__		if ("beans".equals(name) && args.length == 1 && args[0] instanceof Closure) {_			return beans((Closure) args[0])__		}_		else if ("ref".equals(name)) {_			String refName__			if (args[0] == null) {_				throw new IllegalArgumentException("Argument to ref() is not a valid bean or was not found")__			}__			if (args[0] instanceof RuntimeBeanReference) {_				refName = ((RuntimeBeanReference) args[0]).getBeanName()__			}_			else {_				refName = args[0].toString()__			}_			boolean parentRef = false__			if (args.length > 1 && args[1] instanceof Boolean) {_				parentRef = (Boolean) args[1]__			}_			return new RuntimeBeanReference(refName, parentRef)__		}_		else if (this.namespaces.containsKey(name) && args.length > 0 && args[0] instanceof Closure) {_			GroovyDynamicElementReader reader = createDynamicElementReader(name)__			reader.invokeMethod("doCall", args)__		}_		else if (args.length > 0 && args[0] instanceof Closure) {_			_			return invokeBeanDefiningMethod(name, args)__		}_		else if (args.length > 0 &&_				(args[0] instanceof Class || args[0] instanceof RuntimeBeanReference || args[0] instanceof Map)) {_			return invokeBeanDefiningMethod(name, args)__		}_		else if (args.length > 1 && args[args.length -1] instanceof Closure) {_			return invokeBeanDefiningMethod(name, args)__		}_		MetaClass mc = DefaultGroovyMethods.getMetaClass(getRegistry())__		if (!mc.respondsTo(getRegistry(), name, args).isEmpty()){_			return mc.invokeMethod(getRegistry(), name, args)__		}_		return this__	};this,method,overrides,method,invocation,to,create,beans,for,each,method,name,that,takes,a,class,argument;public,object,invoke,method,string,name,object,arg,object,args,object,arg,if,beans,equals,name,args,length,1,args,0,instanceof,closure,return,beans,closure,args,0,else,if,ref,equals,name,string,ref,name,if,args,0,null,throw,new,illegal,argument,exception,argument,to,ref,is,not,a,valid,bean,or,was,not,found,if,args,0,instanceof,runtime,bean,reference,ref,name,runtime,bean,reference,args,0,get,bean,name,else,ref,name,args,0,to,string,boolean,parent,ref,false,if,args,length,1,args,1,instanceof,boolean,parent,ref,boolean,args,1,return,new,runtime,bean,reference,ref,name,parent,ref,else,if,this,namespaces,contains,key,name,args,length,0,args,0,instanceof,closure,groovy,dynamic,element,reader,reader,create,dynamic,element,reader,name,reader,invoke,method,do,call,args,else,if,args,length,0,args,0,instanceof,closure,return,invoke,bean,defining,method,name,args,else,if,args,length,0,args,0,instanceof,class,args,0,instanceof,runtime,bean,reference,args,0,instanceof,map,return,invoke,bean,defining,method,name,args,else,if,args,length,1,args,args,length,1,instanceof,closure,return,invoke,bean,defining,method,name,args,meta,class,mc,default,groovy,methods,get,meta,class,get,registry,if,mc,responds,to,get,registry,name,args,is,empty,return,mc,invoke,method,get,registry,name,args,return,this
GroovyBeanDefinitionReader -> public Object invokeMethod(String name, Object arg);1530190293;This method overrides method invocation to create beans for each method name that_takes a class argument.;public Object invokeMethod(String name, Object arg) {_		Object[] args = (Object[])arg__		if ("beans".equals(name) && args.length == 1 && args[0] instanceof Closure) {_			return beans((Closure) args[0])__		}_		else if ("ref".equals(name)) {_			String refName__			if (args[0] == null) {_				throw new IllegalArgumentException("Argument to ref() is not a valid bean or was not found")__			}_			if (args[0] instanceof RuntimeBeanReference) {_				refName = ((RuntimeBeanReference) args[0]).getBeanName()__			}_			else {_				refName = args[0].toString()__			}_			boolean parentRef = false__			if (args.length > 1 && args[1] instanceof Boolean) {_				parentRef = (Boolean) args[1]__			}_			return new RuntimeBeanReference(refName, parentRef)__		}_		else if (this.namespaces.containsKey(name) && args.length > 0 && args[0] instanceof Closure) {_			GroovyDynamicElementReader reader = createDynamicElementReader(name)__			reader.invokeMethod("doCall", args)__		}_		else if (args.length > 0 && args[0] instanceof Closure) {_			_			return invokeBeanDefiningMethod(name, args)__		}_		else if (args.length > 0 &&_				(args[0] instanceof Class || args[0] instanceof RuntimeBeanReference || args[0] instanceof Map)) {_			return invokeBeanDefiningMethod(name, args)__		}_		else if (args.length > 1 && args[args.length -1] instanceof Closure) {_			return invokeBeanDefiningMethod(name, args)__		}_		MetaClass mc = DefaultGroovyMethods.getMetaClass(getRegistry())__		if (!mc.respondsTo(getRegistry(), name, args).isEmpty()){_			return mc.invokeMethod(getRegistry(), name, args)__		}_		return this__	};this,method,overrides,method,invocation,to,create,beans,for,each,method,name,that,takes,a,class,argument;public,object,invoke,method,string,name,object,arg,object,args,object,arg,if,beans,equals,name,args,length,1,args,0,instanceof,closure,return,beans,closure,args,0,else,if,ref,equals,name,string,ref,name,if,args,0,null,throw,new,illegal,argument,exception,argument,to,ref,is,not,a,valid,bean,or,was,not,found,if,args,0,instanceof,runtime,bean,reference,ref,name,runtime,bean,reference,args,0,get,bean,name,else,ref,name,args,0,to,string,boolean,parent,ref,false,if,args,length,1,args,1,instanceof,boolean,parent,ref,boolean,args,1,return,new,runtime,bean,reference,ref,name,parent,ref,else,if,this,namespaces,contains,key,name,args,length,0,args,0,instanceof,closure,groovy,dynamic,element,reader,reader,create,dynamic,element,reader,name,reader,invoke,method,do,call,args,else,if,args,length,0,args,0,instanceof,closure,return,invoke,bean,defining,method,name,args,else,if,args,length,0,args,0,instanceof,class,args,0,instanceof,runtime,bean,reference,args,0,instanceof,map,return,invoke,bean,defining,method,name,args,else,if,args,length,1,args,args,length,1,instanceof,closure,return,invoke,bean,defining,method,name,args,meta,class,mc,default,groovy,methods,get,meta,class,get,registry,if,mc,responds,to,get,registry,name,args,is,empty,return,mc,invoke,method,get,registry,name,args,return,this
GroovyBeanDefinitionReader -> public Object invokeMethod(String name, Object arg);1532706365;This method overrides method invocation to create beans for each method name that_takes a class argument.;public Object invokeMethod(String name, Object arg) {_		Object[] args = (Object[])arg__		if ("beans".equals(name) && args.length == 1 && args[0] instanceof Closure) {_			return beans((Closure) args[0])__		}_		else if ("ref".equals(name)) {_			String refName__			if (args[0] == null) {_				throw new IllegalArgumentException("Argument to ref() is not a valid bean or was not found")__			}_			if (args[0] instanceof RuntimeBeanReference) {_				refName = ((RuntimeBeanReference) args[0]).getBeanName()__			}_			else {_				refName = args[0].toString()__			}_			boolean parentRef = false__			if (args.length > 1 && args[1] instanceof Boolean) {_				parentRef = (Boolean) args[1]__			}_			return new RuntimeBeanReference(refName, parentRef)__		}_		else if (this.namespaces.containsKey(name) && args.length > 0 && args[0] instanceof Closure) {_			GroovyDynamicElementReader reader = createDynamicElementReader(name)__			reader.invokeMethod("doCall", args)__		}_		else if (args.length > 0 && args[0] instanceof Closure) {_			_			return invokeBeanDefiningMethod(name, args)__		}_		else if (args.length > 0 &&_				(args[0] instanceof Class || args[0] instanceof RuntimeBeanReference || args[0] instanceof Map)) {_			return invokeBeanDefiningMethod(name, args)__		}_		else if (args.length > 1 && args[args.length -1] instanceof Closure) {_			return invokeBeanDefiningMethod(name, args)__		}_		MetaClass mc = DefaultGroovyMethods.getMetaClass(getRegistry())__		if (!mc.respondsTo(getRegistry(), name, args).isEmpty()){_			return mc.invokeMethod(getRegistry(), name, args)__		}_		return this__	};this,method,overrides,method,invocation,to,create,beans,for,each,method,name,that,takes,a,class,argument;public,object,invoke,method,string,name,object,arg,object,args,object,arg,if,beans,equals,name,args,length,1,args,0,instanceof,closure,return,beans,closure,args,0,else,if,ref,equals,name,string,ref,name,if,args,0,null,throw,new,illegal,argument,exception,argument,to,ref,is,not,a,valid,bean,or,was,not,found,if,args,0,instanceof,runtime,bean,reference,ref,name,runtime,bean,reference,args,0,get,bean,name,else,ref,name,args,0,to,string,boolean,parent,ref,false,if,args,length,1,args,1,instanceof,boolean,parent,ref,boolean,args,1,return,new,runtime,bean,reference,ref,name,parent,ref,else,if,this,namespaces,contains,key,name,args,length,0,args,0,instanceof,closure,groovy,dynamic,element,reader,reader,create,dynamic,element,reader,name,reader,invoke,method,do,call,args,else,if,args,length,0,args,0,instanceof,closure,return,invoke,bean,defining,method,name,args,else,if,args,length,0,args,0,instanceof,class,args,0,instanceof,runtime,bean,reference,args,0,instanceof,map,return,invoke,bean,defining,method,name,args,else,if,args,length,1,args,args,length,1,instanceof,closure,return,invoke,bean,defining,method,name,args,meta,class,mc,default,groovy,methods,get,meta,class,get,registry,if,mc,responds,to,get,registry,name,args,is,empty,return,mc,invoke,method,get,registry,name,args,return,this
GroovyBeanDefinitionReader -> public GroovyBeanDefinitionReader(BeanDefinitionRegistry registry);1503319306;Create a new {@code GroovyBeanDefinitionReader} for the given_{@link BeanDefinitionRegistry}._@param registry the {@code BeanDefinitionRegistry} to load bean definitions into;public GroovyBeanDefinitionReader(BeanDefinitionRegistry registry) {_		super(registry)__		this.standardXmlBeanDefinitionReader = new XmlBeanDefinitionReader(registry)__		this.groovyDslXmlBeanDefinitionReader = new XmlBeanDefinitionReader(registry)__		this.groovyDslXmlBeanDefinitionReader.setValidating(false)__	};create,a,new,code,groovy,bean,definition,reader,for,the,given,link,bean,definition,registry,param,registry,the,code,bean,definition,registry,to,load,bean,definitions,into;public,groovy,bean,definition,reader,bean,definition,registry,registry,super,registry,this,standard,xml,bean,definition,reader,new,xml,bean,definition,reader,registry,this,groovy,dsl,xml,bean,definition,reader,new,xml,bean,definition,reader,registry,this,groovy,dsl,xml,bean,definition,reader,set,validating,false
GroovyBeanDefinitionReader -> public GroovyBeanDefinitionReader(BeanDefinitionRegistry registry);1506097334;Create a new {@code GroovyBeanDefinitionReader} for the given_{@link BeanDefinitionRegistry}._@param registry the {@code BeanDefinitionRegistry} to load bean definitions into;public GroovyBeanDefinitionReader(BeanDefinitionRegistry registry) {_		super(registry)__		this.standardXmlBeanDefinitionReader = new XmlBeanDefinitionReader(registry)__		this.groovyDslXmlBeanDefinitionReader = new XmlBeanDefinitionReader(registry)__		this.groovyDslXmlBeanDefinitionReader.setValidating(false)__	};create,a,new,code,groovy,bean,definition,reader,for,the,given,link,bean,definition,registry,param,registry,the,code,bean,definition,registry,to,load,bean,definitions,into;public,groovy,bean,definition,reader,bean,definition,registry,registry,super,registry,this,standard,xml,bean,definition,reader,new,xml,bean,definition,reader,registry,this,groovy,dsl,xml,bean,definition,reader,new,xml,bean,definition,reader,registry,this,groovy,dsl,xml,bean,definition,reader,set,validating,false
GroovyBeanDefinitionReader -> public GroovyBeanDefinitionReader(BeanDefinitionRegistry registry);1519771074;Create a new {@code GroovyBeanDefinitionReader} for the given_{@link BeanDefinitionRegistry}._@param registry the {@code BeanDefinitionRegistry} to load bean definitions into;public GroovyBeanDefinitionReader(BeanDefinitionRegistry registry) {_		super(registry)__		this.standardXmlBeanDefinitionReader = new XmlBeanDefinitionReader(registry)__		this.groovyDslXmlBeanDefinitionReader = new XmlBeanDefinitionReader(registry)__		this.groovyDslXmlBeanDefinitionReader.setValidating(false)__	};create,a,new,code,groovy,bean,definition,reader,for,the,given,link,bean,definition,registry,param,registry,the,code,bean,definition,registry,to,load,bean,definitions,into;public,groovy,bean,definition,reader,bean,definition,registry,registry,super,registry,this,standard,xml,bean,definition,reader,new,xml,bean,definition,reader,registry,this,groovy,dsl,xml,bean,definition,reader,new,xml,bean,definition,reader,registry,this,groovy,dsl,xml,bean,definition,reader,set,validating,false
GroovyBeanDefinitionReader -> public GroovyBeanDefinitionReader(BeanDefinitionRegistry registry);1519832519;Create a new {@code GroovyBeanDefinitionReader} for the given_{@link BeanDefinitionRegistry}._@param registry the {@code BeanDefinitionRegistry} to load bean definitions into;public GroovyBeanDefinitionReader(BeanDefinitionRegistry registry) {_		super(registry)__		this.standardXmlBeanDefinitionReader = new XmlBeanDefinitionReader(registry)__		this.groovyDslXmlBeanDefinitionReader = new XmlBeanDefinitionReader(registry)__		this.groovyDslXmlBeanDefinitionReader.setValidating(false)__	};create,a,new,code,groovy,bean,definition,reader,for,the,given,link,bean,definition,registry,param,registry,the,code,bean,definition,registry,to,load,bean,definitions,into;public,groovy,bean,definition,reader,bean,definition,registry,registry,super,registry,this,standard,xml,bean,definition,reader,new,xml,bean,definition,reader,registry,this,groovy,dsl,xml,bean,definition,reader,new,xml,bean,definition,reader,registry,this,groovy,dsl,xml,bean,definition,reader,set,validating,false
GroovyBeanDefinitionReader -> public GroovyBeanDefinitionReader(BeanDefinitionRegistry registry);1519859718;Create a new {@code GroovyBeanDefinitionReader} for the given_{@link BeanDefinitionRegistry}._@param registry the {@code BeanDefinitionRegistry} to load bean definitions into;public GroovyBeanDefinitionReader(BeanDefinitionRegistry registry) {_		super(registry)__		this.standardXmlBeanDefinitionReader = new XmlBeanDefinitionReader(registry)__		this.groovyDslXmlBeanDefinitionReader = new XmlBeanDefinitionReader(registry)__		this.groovyDslXmlBeanDefinitionReader.setValidating(false)__	};create,a,new,code,groovy,bean,definition,reader,for,the,given,link,bean,definition,registry,param,registry,the,code,bean,definition,registry,to,load,bean,definitions,into;public,groovy,bean,definition,reader,bean,definition,registry,registry,super,registry,this,standard,xml,bean,definition,reader,new,xml,bean,definition,reader,registry,this,groovy,dsl,xml,bean,definition,reader,new,xml,bean,definition,reader,registry,this,groovy,dsl,xml,bean,definition,reader,set,validating,false
GroovyBeanDefinitionReader -> public GroovyBeanDefinitionReader(BeanDefinitionRegistry registry);1520529117;Create a new {@code GroovyBeanDefinitionReader} for the given_{@link BeanDefinitionRegistry}._@param registry the {@code BeanDefinitionRegistry} to load bean definitions into;public GroovyBeanDefinitionReader(BeanDefinitionRegistry registry) {_		super(registry)__		this.standardXmlBeanDefinitionReader = new XmlBeanDefinitionReader(registry)__		this.groovyDslXmlBeanDefinitionReader = new XmlBeanDefinitionReader(registry)__		this.groovyDslXmlBeanDefinitionReader.setValidating(false)__	};create,a,new,code,groovy,bean,definition,reader,for,the,given,link,bean,definition,registry,param,registry,the,code,bean,definition,registry,to,load,bean,definitions,into;public,groovy,bean,definition,reader,bean,definition,registry,registry,super,registry,this,standard,xml,bean,definition,reader,new,xml,bean,definition,reader,registry,this,groovy,dsl,xml,bean,definition,reader,new,xml,bean,definition,reader,registry,this,groovy,dsl,xml,bean,definition,reader,set,validating,false
GroovyBeanDefinitionReader -> public GroovyBeanDefinitionReader(BeanDefinitionRegistry registry);1522359230;Create a new {@code GroovyBeanDefinitionReader} for the given_{@link BeanDefinitionRegistry}._@param registry the {@code BeanDefinitionRegistry} to load bean definitions into;public GroovyBeanDefinitionReader(BeanDefinitionRegistry registry) {_		super(registry)__		this.standardXmlBeanDefinitionReader = new XmlBeanDefinitionReader(registry)__		this.groovyDslXmlBeanDefinitionReader = new XmlBeanDefinitionReader(registry)__		this.groovyDslXmlBeanDefinitionReader.setValidating(false)__	};create,a,new,code,groovy,bean,definition,reader,for,the,given,link,bean,definition,registry,param,registry,the,code,bean,definition,registry,to,load,bean,definitions,into;public,groovy,bean,definition,reader,bean,definition,registry,registry,super,registry,this,standard,xml,bean,definition,reader,new,xml,bean,definition,reader,registry,this,groovy,dsl,xml,bean,definition,reader,new,xml,bean,definition,reader,registry,this,groovy,dsl,xml,bean,definition,reader,set,validating,false
GroovyBeanDefinitionReader -> public GroovyBeanDefinitionReader(BeanDefinitionRegistry registry);1530174524;Create a new {@code GroovyBeanDefinitionReader} for the given_{@link BeanDefinitionRegistry}._@param registry the {@code BeanDefinitionRegistry} to load bean definitions into;public GroovyBeanDefinitionReader(BeanDefinitionRegistry registry) {_		super(registry)__		this.standardXmlBeanDefinitionReader = new XmlBeanDefinitionReader(registry)__		this.groovyDslXmlBeanDefinitionReader = new XmlBeanDefinitionReader(registry)__		this.groovyDslXmlBeanDefinitionReader.setValidating(false)__	};create,a,new,code,groovy,bean,definition,reader,for,the,given,link,bean,definition,registry,param,registry,the,code,bean,definition,registry,to,load,bean,definitions,into;public,groovy,bean,definition,reader,bean,definition,registry,registry,super,registry,this,standard,xml,bean,definition,reader,new,xml,bean,definition,reader,registry,this,groovy,dsl,xml,bean,definition,reader,new,xml,bean,definition,reader,registry,this,groovy,dsl,xml,bean,definition,reader,set,validating,false
GroovyBeanDefinitionReader -> public GroovyBeanDefinitionReader(BeanDefinitionRegistry registry);1530174524;Create a new {@code GroovyBeanDefinitionReader} for the given_{@link BeanDefinitionRegistry}._@param registry the {@code BeanDefinitionRegistry} to load bean definitions into;public GroovyBeanDefinitionReader(BeanDefinitionRegistry registry) {_		super(registry)__		this.standardXmlBeanDefinitionReader = new XmlBeanDefinitionReader(registry)__		this.groovyDslXmlBeanDefinitionReader = new XmlBeanDefinitionReader(registry)__		this.groovyDslXmlBeanDefinitionReader.setValidating(false)__	};create,a,new,code,groovy,bean,definition,reader,for,the,given,link,bean,definition,registry,param,registry,the,code,bean,definition,registry,to,load,bean,definitions,into;public,groovy,bean,definition,reader,bean,definition,registry,registry,super,registry,this,standard,xml,bean,definition,reader,new,xml,bean,definition,reader,registry,this,groovy,dsl,xml,bean,definition,reader,new,xml,bean,definition,reader,registry,this,groovy,dsl,xml,bean,definition,reader,set,validating,false
GroovyBeanDefinitionReader -> public GroovyBeanDefinitionReader(BeanDefinitionRegistry registry);1530174524;Create a new {@code GroovyBeanDefinitionReader} for the given_{@link BeanDefinitionRegistry}._@param registry the {@code BeanDefinitionRegistry} to load bean definitions into;public GroovyBeanDefinitionReader(BeanDefinitionRegistry registry) {_		super(registry)__		this.standardXmlBeanDefinitionReader = new XmlBeanDefinitionReader(registry)__		this.groovyDslXmlBeanDefinitionReader = new XmlBeanDefinitionReader(registry)__		this.groovyDslXmlBeanDefinitionReader.setValidating(false)__	};create,a,new,code,groovy,bean,definition,reader,for,the,given,link,bean,definition,registry,param,registry,the,code,bean,definition,registry,to,load,bean,definitions,into;public,groovy,bean,definition,reader,bean,definition,registry,registry,super,registry,this,standard,xml,bean,definition,reader,new,xml,bean,definition,reader,registry,this,groovy,dsl,xml,bean,definition,reader,new,xml,bean,definition,reader,registry,this,groovy,dsl,xml,bean,definition,reader,set,validating,false
GroovyBeanDefinitionReader -> public GroovyBeanDefinitionReader(BeanDefinitionRegistry registry);1530190293;Create a new {@code GroovyBeanDefinitionReader} for the given_{@link BeanDefinitionRegistry}._@param registry the {@code BeanDefinitionRegistry} to load bean definitions into;public GroovyBeanDefinitionReader(BeanDefinitionRegistry registry) {_		super(registry)__		this.standardXmlBeanDefinitionReader = new XmlBeanDefinitionReader(registry)__		this.groovyDslXmlBeanDefinitionReader = new XmlBeanDefinitionReader(registry)__		this.groovyDslXmlBeanDefinitionReader.setValidating(false)__	};create,a,new,code,groovy,bean,definition,reader,for,the,given,link,bean,definition,registry,param,registry,the,code,bean,definition,registry,to,load,bean,definitions,into;public,groovy,bean,definition,reader,bean,definition,registry,registry,super,registry,this,standard,xml,bean,definition,reader,new,xml,bean,definition,reader,registry,this,groovy,dsl,xml,bean,definition,reader,new,xml,bean,definition,reader,registry,this,groovy,dsl,xml,bean,definition,reader,set,validating,false
GroovyBeanDefinitionReader -> public GroovyBeanDefinitionReader(BeanDefinitionRegistry registry);1532706365;Create a new {@code GroovyBeanDefinitionReader} for the given_{@link BeanDefinitionRegistry}._@param registry the {@code BeanDefinitionRegistry} to load bean definitions into;public GroovyBeanDefinitionReader(BeanDefinitionRegistry registry) {_		super(registry)__		this.standardXmlBeanDefinitionReader = new XmlBeanDefinitionReader(registry)__		this.groovyDslXmlBeanDefinitionReader = new XmlBeanDefinitionReader(registry)__		this.groovyDslXmlBeanDefinitionReader.setValidating(false)__	};create,a,new,code,groovy,bean,definition,reader,for,the,given,link,bean,definition,registry,param,registry,the,code,bean,definition,registry,to,load,bean,definitions,into;public,groovy,bean,definition,reader,bean,definition,registry,registry,super,registry,this,standard,xml,bean,definition,reader,new,xml,bean,definition,reader,registry,this,groovy,dsl,xml,bean,definition,reader,new,xml,bean,definition,reader,registry,this,groovy,dsl,xml,bean,definition,reader,set,validating,false
GroovyBeanDefinitionReader -> public AbstractBeanDefinition bean(Class<?> type, Object...args);1503319306;Define an inner bean definition._@param type the bean type_@param args the constructors arguments and closure configurer_@return the bean definition;public AbstractBeanDefinition bean(Class<?> type, Object...args) {_		GroovyBeanDefinitionWrapper current = this.currentBeanDefinition__		try {_			Closure callable = null__			Collection constructorArgs = null__			if (!ObjectUtils.isEmpty(args)) {_				int index = args.length__				Object lastArg = args[index - 1]__				if (lastArg instanceof Closure) {_					callable = (Closure) lastArg__					index--__				}_				if (index > -1) {_					constructorArgs = resolveConstructorArguments(args, 0, index)__				}_			}_			this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(null, type, constructorArgs)__			if (callable != null) {_				callable.call(this.currentBeanDefinition)__			}_			return this.currentBeanDefinition.getBeanDefinition()___		}_		finally {_			this.currentBeanDefinition = current__		}_	};define,an,inner,bean,definition,param,type,the,bean,type,param,args,the,constructors,arguments,and,closure,configurer,return,the,bean,definition;public,abstract,bean,definition,bean,class,type,object,args,groovy,bean,definition,wrapper,current,this,current,bean,definition,try,closure,callable,null,collection,constructor,args,null,if,object,utils,is,empty,args,int,index,args,length,object,last,arg,args,index,1,if,last,arg,instanceof,closure,callable,closure,last,arg,index,if,index,1,constructor,args,resolve,constructor,arguments,args,0,index,this,current,bean,definition,new,groovy,bean,definition,wrapper,null,type,constructor,args,if,callable,null,callable,call,this,current,bean,definition,return,this,current,bean,definition,get,bean,definition,finally,this,current,bean,definition,current
GroovyBeanDefinitionReader -> public AbstractBeanDefinition bean(Class<?> type, Object...args);1506097334;Define an inner bean definition._@param type the bean type_@param args the constructors arguments and closure configurer_@return the bean definition;public AbstractBeanDefinition bean(Class<?> type, Object...args) {_		GroovyBeanDefinitionWrapper current = this.currentBeanDefinition__		try {_			Closure callable = null__			Collection constructorArgs = null__			if (!ObjectUtils.isEmpty(args)) {_				int index = args.length__				Object lastArg = args[index - 1]__				if (lastArg instanceof Closure) {_					callable = (Closure) lastArg__					index--__				}_				if (index > -1) {_					constructorArgs = resolveConstructorArguments(args, 0, index)__				}_			}_			this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(null, type, constructorArgs)__			if (callable != null) {_				callable.call(this.currentBeanDefinition)__			}_			return this.currentBeanDefinition.getBeanDefinition()___		}_		finally {_			this.currentBeanDefinition = current__		}_	};define,an,inner,bean,definition,param,type,the,bean,type,param,args,the,constructors,arguments,and,closure,configurer,return,the,bean,definition;public,abstract,bean,definition,bean,class,type,object,args,groovy,bean,definition,wrapper,current,this,current,bean,definition,try,closure,callable,null,collection,constructor,args,null,if,object,utils,is,empty,args,int,index,args,length,object,last,arg,args,index,1,if,last,arg,instanceof,closure,callable,closure,last,arg,index,if,index,1,constructor,args,resolve,constructor,arguments,args,0,index,this,current,bean,definition,new,groovy,bean,definition,wrapper,null,type,constructor,args,if,callable,null,callable,call,this,current,bean,definition,return,this,current,bean,definition,get,bean,definition,finally,this,current,bean,definition,current
GroovyBeanDefinitionReader -> public AbstractBeanDefinition bean(Class<?> type, Object...args);1519771074;Define an inner bean definition._@param type the bean type_@param args the constructors arguments and closure configurer_@return the bean definition;public AbstractBeanDefinition bean(Class<?> type, Object...args) {_		GroovyBeanDefinitionWrapper current = this.currentBeanDefinition__		try {_			Closure callable = null__			Collection constructorArgs = null__			if (!ObjectUtils.isEmpty(args)) {_				int index = args.length__				Object lastArg = args[index - 1]__				if (lastArg instanceof Closure) {_					callable = (Closure) lastArg__					index--__				}_				if (index > -1) {_					constructorArgs = resolveConstructorArguments(args, 0, index)__				}_			}_			this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(null, type, constructorArgs)__			if (callable != null) {_				callable.call(this.currentBeanDefinition)__			}_			return this.currentBeanDefinition.getBeanDefinition()___		}_		finally {_			this.currentBeanDefinition = current__		}_	};define,an,inner,bean,definition,param,type,the,bean,type,param,args,the,constructors,arguments,and,closure,configurer,return,the,bean,definition;public,abstract,bean,definition,bean,class,type,object,args,groovy,bean,definition,wrapper,current,this,current,bean,definition,try,closure,callable,null,collection,constructor,args,null,if,object,utils,is,empty,args,int,index,args,length,object,last,arg,args,index,1,if,last,arg,instanceof,closure,callable,closure,last,arg,index,if,index,1,constructor,args,resolve,constructor,arguments,args,0,index,this,current,bean,definition,new,groovy,bean,definition,wrapper,null,type,constructor,args,if,callable,null,callable,call,this,current,bean,definition,return,this,current,bean,definition,get,bean,definition,finally,this,current,bean,definition,current
GroovyBeanDefinitionReader -> public AbstractBeanDefinition bean(Class<?> type, Object...args);1519832519;Define an inner bean definition._@param type the bean type_@param args the constructors arguments and closure configurer_@return the bean definition;public AbstractBeanDefinition bean(Class<?> type, Object...args) {_		GroovyBeanDefinitionWrapper current = this.currentBeanDefinition__		try {_			Closure callable = null__			Collection constructorArgs = null__			if (!ObjectUtils.isEmpty(args)) {_				int index = args.length__				Object lastArg = args[index - 1]__				if (lastArg instanceof Closure) {_					callable = (Closure) lastArg__					index--__				}_				if (index > -1) {_					constructorArgs = resolveConstructorArguments(args, 0, index)__				}_			}_			this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(null, type, constructorArgs)__			if (callable != null) {_				callable.call(this.currentBeanDefinition)__			}_			return this.currentBeanDefinition.getBeanDefinition()___		}_		finally {_			this.currentBeanDefinition = current__		}_	};define,an,inner,bean,definition,param,type,the,bean,type,param,args,the,constructors,arguments,and,closure,configurer,return,the,bean,definition;public,abstract,bean,definition,bean,class,type,object,args,groovy,bean,definition,wrapper,current,this,current,bean,definition,try,closure,callable,null,collection,constructor,args,null,if,object,utils,is,empty,args,int,index,args,length,object,last,arg,args,index,1,if,last,arg,instanceof,closure,callable,closure,last,arg,index,if,index,1,constructor,args,resolve,constructor,arguments,args,0,index,this,current,bean,definition,new,groovy,bean,definition,wrapper,null,type,constructor,args,if,callable,null,callable,call,this,current,bean,definition,return,this,current,bean,definition,get,bean,definition,finally,this,current,bean,definition,current
GroovyBeanDefinitionReader -> public AbstractBeanDefinition bean(Class<?> type, Object...args);1519859718;Define an inner bean definition._@param type the bean type_@param args the constructors arguments and closure configurer_@return the bean definition;public AbstractBeanDefinition bean(Class<?> type, Object...args) {_		GroovyBeanDefinitionWrapper current = this.currentBeanDefinition__		try {_			Closure callable = null__			Collection constructorArgs = null__			if (!ObjectUtils.isEmpty(args)) {_				int index = args.length__				Object lastArg = args[index - 1]__				if (lastArg instanceof Closure) {_					callable = (Closure) lastArg__					index--__				}_				if (index > -1) {_					constructorArgs = resolveConstructorArguments(args, 0, index)__				}_			}_			this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(null, type, constructorArgs)__			if (callable != null) {_				callable.call(this.currentBeanDefinition)__			}_			return this.currentBeanDefinition.getBeanDefinition()___		}_		finally {_			this.currentBeanDefinition = current__		}_	};define,an,inner,bean,definition,param,type,the,bean,type,param,args,the,constructors,arguments,and,closure,configurer,return,the,bean,definition;public,abstract,bean,definition,bean,class,type,object,args,groovy,bean,definition,wrapper,current,this,current,bean,definition,try,closure,callable,null,collection,constructor,args,null,if,object,utils,is,empty,args,int,index,args,length,object,last,arg,args,index,1,if,last,arg,instanceof,closure,callable,closure,last,arg,index,if,index,1,constructor,args,resolve,constructor,arguments,args,0,index,this,current,bean,definition,new,groovy,bean,definition,wrapper,null,type,constructor,args,if,callable,null,callable,call,this,current,bean,definition,return,this,current,bean,definition,get,bean,definition,finally,this,current,bean,definition,current
GroovyBeanDefinitionReader -> public AbstractBeanDefinition bean(Class<?> type, Object...args);1520529117;Define an inner bean definition._@param type the bean type_@param args the constructors arguments and closure configurer_@return the bean definition;public AbstractBeanDefinition bean(Class<?> type, Object...args) {_		GroovyBeanDefinitionWrapper current = this.currentBeanDefinition__		try {_			Closure callable = null__			Collection constructorArgs = null__			if (!ObjectUtils.isEmpty(args)) {_				int index = args.length__				Object lastArg = args[index - 1]__				if (lastArg instanceof Closure) {_					callable = (Closure) lastArg__					index--__				}_				if (index > -1) {_					constructorArgs = resolveConstructorArguments(args, 0, index)__				}_			}_			this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(null, type, constructorArgs)__			if (callable != null) {_				callable.call(this.currentBeanDefinition)__			}_			return this.currentBeanDefinition.getBeanDefinition()___		}_		finally {_			this.currentBeanDefinition = current__		}_	};define,an,inner,bean,definition,param,type,the,bean,type,param,args,the,constructors,arguments,and,closure,configurer,return,the,bean,definition;public,abstract,bean,definition,bean,class,type,object,args,groovy,bean,definition,wrapper,current,this,current,bean,definition,try,closure,callable,null,collection,constructor,args,null,if,object,utils,is,empty,args,int,index,args,length,object,last,arg,args,index,1,if,last,arg,instanceof,closure,callable,closure,last,arg,index,if,index,1,constructor,args,resolve,constructor,arguments,args,0,index,this,current,bean,definition,new,groovy,bean,definition,wrapper,null,type,constructor,args,if,callable,null,callable,call,this,current,bean,definition,return,this,current,bean,definition,get,bean,definition,finally,this,current,bean,definition,current
GroovyBeanDefinitionReader -> public AbstractBeanDefinition bean(Class<?> type, Object...args);1522359230;Define an inner bean definition._@param type the bean type_@param args the constructors arguments and closure configurer_@return the bean definition;public AbstractBeanDefinition bean(Class<?> type, Object...args) {_		GroovyBeanDefinitionWrapper current = this.currentBeanDefinition__		try {_			Closure callable = null__			Collection constructorArgs = null__			if (!ObjectUtils.isEmpty(args)) {_				int index = args.length__				Object lastArg = args[index - 1]__				if (lastArg instanceof Closure) {_					callable = (Closure) lastArg__					index--__				}_				if (index > -1) {_					constructorArgs = resolveConstructorArguments(args, 0, index)__				}_			}_			this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(null, type, constructorArgs)__			if (callable != null) {_				callable.call(this.currentBeanDefinition)__			}_			return this.currentBeanDefinition.getBeanDefinition()___		}_		finally {_			this.currentBeanDefinition = current__		}_	};define,an,inner,bean,definition,param,type,the,bean,type,param,args,the,constructors,arguments,and,closure,configurer,return,the,bean,definition;public,abstract,bean,definition,bean,class,type,object,args,groovy,bean,definition,wrapper,current,this,current,bean,definition,try,closure,callable,null,collection,constructor,args,null,if,object,utils,is,empty,args,int,index,args,length,object,last,arg,args,index,1,if,last,arg,instanceof,closure,callable,closure,last,arg,index,if,index,1,constructor,args,resolve,constructor,arguments,args,0,index,this,current,bean,definition,new,groovy,bean,definition,wrapper,null,type,constructor,args,if,callable,null,callable,call,this,current,bean,definition,return,this,current,bean,definition,get,bean,definition,finally,this,current,bean,definition,current
GroovyBeanDefinitionReader -> public AbstractBeanDefinition bean(Class<?> type, Object...args);1530174524;Define an inner bean definition._@param type the bean type_@param args the constructors arguments and closure configurer_@return the bean definition;public AbstractBeanDefinition bean(Class<?> type, Object...args) {_		GroovyBeanDefinitionWrapper current = this.currentBeanDefinition__		try {_			Closure callable = null__			Collection constructorArgs = null__			if (!ObjectUtils.isEmpty(args)) {_				int index = args.length__				Object lastArg = args[index - 1]__				if (lastArg instanceof Closure) {_					callable = (Closure) lastArg__					index--__				}_				if (index > -1) {_					constructorArgs = resolveConstructorArguments(args, 0, index)__				}_			}_			this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(null, type, constructorArgs)__			if (callable != null) {_				callable.call(this.currentBeanDefinition)__			}_			return this.currentBeanDefinition.getBeanDefinition()___		}_		finally {_			this.currentBeanDefinition = current__		}_	};define,an,inner,bean,definition,param,type,the,bean,type,param,args,the,constructors,arguments,and,closure,configurer,return,the,bean,definition;public,abstract,bean,definition,bean,class,type,object,args,groovy,bean,definition,wrapper,current,this,current,bean,definition,try,closure,callable,null,collection,constructor,args,null,if,object,utils,is,empty,args,int,index,args,length,object,last,arg,args,index,1,if,last,arg,instanceof,closure,callable,closure,last,arg,index,if,index,1,constructor,args,resolve,constructor,arguments,args,0,index,this,current,bean,definition,new,groovy,bean,definition,wrapper,null,type,constructor,args,if,callable,null,callable,call,this,current,bean,definition,return,this,current,bean,definition,get,bean,definition,finally,this,current,bean,definition,current
GroovyBeanDefinitionReader -> public AbstractBeanDefinition bean(Class<?> type, Object...args);1530174524;Define an inner bean definition._@param type the bean type_@param args the constructors arguments and closure configurer_@return the bean definition;public AbstractBeanDefinition bean(Class<?> type, Object...args) {_		GroovyBeanDefinitionWrapper current = this.currentBeanDefinition__		try {_			Closure callable = null__			Collection constructorArgs = null__			if (!ObjectUtils.isEmpty(args)) {_				int index = args.length__				Object lastArg = args[index - 1]__				if (lastArg instanceof Closure) {_					callable = (Closure) lastArg__					index--__				}_				if (index > -1) {_					constructorArgs = resolveConstructorArguments(args, 0, index)__				}_			}_			this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(null, type, constructorArgs)__			if (callable != null) {_				callable.call(this.currentBeanDefinition)__			}_			return this.currentBeanDefinition.getBeanDefinition()___		}_		finally {_			this.currentBeanDefinition = current__		}_	};define,an,inner,bean,definition,param,type,the,bean,type,param,args,the,constructors,arguments,and,closure,configurer,return,the,bean,definition;public,abstract,bean,definition,bean,class,type,object,args,groovy,bean,definition,wrapper,current,this,current,bean,definition,try,closure,callable,null,collection,constructor,args,null,if,object,utils,is,empty,args,int,index,args,length,object,last,arg,args,index,1,if,last,arg,instanceof,closure,callable,closure,last,arg,index,if,index,1,constructor,args,resolve,constructor,arguments,args,0,index,this,current,bean,definition,new,groovy,bean,definition,wrapper,null,type,constructor,args,if,callable,null,callable,call,this,current,bean,definition,return,this,current,bean,definition,get,bean,definition,finally,this,current,bean,definition,current
GroovyBeanDefinitionReader -> public AbstractBeanDefinition bean(Class<?> type, Object...args);1530174524;Define an inner bean definition._@param type the bean type_@param args the constructors arguments and closure configurer_@return the bean definition;public AbstractBeanDefinition bean(Class<?> type, Object...args) {_		GroovyBeanDefinitionWrapper current = this.currentBeanDefinition__		try {_			Closure callable = null__			Collection constructorArgs = null__			if (!ObjectUtils.isEmpty(args)) {_				int index = args.length__				Object lastArg = args[index - 1]__				if (lastArg instanceof Closure) {_					callable = (Closure) lastArg__					index--__				}_				if (index > -1) {_					constructorArgs = resolveConstructorArguments(args, 0, index)__				}_			}_			this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(null, type, constructorArgs)__			if (callable != null) {_				callable.call(this.currentBeanDefinition)__			}_			return this.currentBeanDefinition.getBeanDefinition()___		}_		finally {_			this.currentBeanDefinition = current__		}_	};define,an,inner,bean,definition,param,type,the,bean,type,param,args,the,constructors,arguments,and,closure,configurer,return,the,bean,definition;public,abstract,bean,definition,bean,class,type,object,args,groovy,bean,definition,wrapper,current,this,current,bean,definition,try,closure,callable,null,collection,constructor,args,null,if,object,utils,is,empty,args,int,index,args,length,object,last,arg,args,index,1,if,last,arg,instanceof,closure,callable,closure,last,arg,index,if,index,1,constructor,args,resolve,constructor,arguments,args,0,index,this,current,bean,definition,new,groovy,bean,definition,wrapper,null,type,constructor,args,if,callable,null,callable,call,this,current,bean,definition,return,this,current,bean,definition,get,bean,definition,finally,this,current,bean,definition,current
GroovyBeanDefinitionReader -> public AbstractBeanDefinition bean(Class<?> type, Object...args);1530190293;Define an inner bean definition._@param type the bean type_@param args the constructors arguments and closure configurer_@return the bean definition;public AbstractBeanDefinition bean(Class<?> type, Object...args) {_		GroovyBeanDefinitionWrapper current = this.currentBeanDefinition__		try {_			Closure callable = null__			Collection constructorArgs = null__			if (!ObjectUtils.isEmpty(args)) {_				int index = args.length__				Object lastArg = args[index - 1]__				if (lastArg instanceof Closure) {_					callable = (Closure) lastArg__					index--__				}_				if (index > -1) {_					constructorArgs = resolveConstructorArguments(args, 0, index)__				}_			}_			this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(null, type, constructorArgs)__			if (callable != null) {_				callable.call(this.currentBeanDefinition)__			}_			return this.currentBeanDefinition.getBeanDefinition()___		}_		finally {_			this.currentBeanDefinition = current__		}_	};define,an,inner,bean,definition,param,type,the,bean,type,param,args,the,constructors,arguments,and,closure,configurer,return,the,bean,definition;public,abstract,bean,definition,bean,class,type,object,args,groovy,bean,definition,wrapper,current,this,current,bean,definition,try,closure,callable,null,collection,constructor,args,null,if,object,utils,is,empty,args,int,index,args,length,object,last,arg,args,index,1,if,last,arg,instanceof,closure,callable,closure,last,arg,index,if,index,1,constructor,args,resolve,constructor,arguments,args,0,index,this,current,bean,definition,new,groovy,bean,definition,wrapper,null,type,constructor,args,if,callable,null,callable,call,this,current,bean,definition,return,this,current,bean,definition,get,bean,definition,finally,this,current,bean,definition,current
GroovyBeanDefinitionReader -> public AbstractBeanDefinition bean(Class<?> type, Object...args);1532706365;Define an inner bean definition._@param type the bean type_@param args the constructors arguments and closure configurer_@return the bean definition;public AbstractBeanDefinition bean(Class<?> type, Object...args) {_		GroovyBeanDefinitionWrapper current = this.currentBeanDefinition__		try {_			Closure callable = null__			Collection constructorArgs = null__			if (!ObjectUtils.isEmpty(args)) {_				int index = args.length__				Object lastArg = args[index - 1]__				if (lastArg instanceof Closure) {_					callable = (Closure) lastArg__					index--__				}_				if (index > -1) {_					constructorArgs = resolveConstructorArguments(args, 0, index)__				}_			}_			this.currentBeanDefinition = new GroovyBeanDefinitionWrapper(null, type, constructorArgs)__			if (callable != null) {_				callable.call(this.currentBeanDefinition)__			}_			return this.currentBeanDefinition.getBeanDefinition()___		}_		finally {_			this.currentBeanDefinition = current__		}_	};define,an,inner,bean,definition,param,type,the,bean,type,param,args,the,constructors,arguments,and,closure,configurer,return,the,bean,definition;public,abstract,bean,definition,bean,class,type,object,args,groovy,bean,definition,wrapper,current,this,current,bean,definition,try,closure,callable,null,collection,constructor,args,null,if,object,utils,is,empty,args,int,index,args,length,object,last,arg,args,index,1,if,last,arg,instanceof,closure,callable,closure,last,arg,index,if,index,1,constructor,args,resolve,constructor,arguments,args,0,index,this,current,bean,definition,new,groovy,bean,definition,wrapper,null,type,constructor,args,if,callable,null,callable,call,this,current,bean,definition,return,this,current,bean,definition,get,bean,definition,finally,this,current,bean,definition,current
GroovyBeanDefinitionReader -> public void setBinding(Binding binding);1503319306;Set the binding, i.e. the Groovy variables available in the scope_of a {@code GroovyBeanDefinitionReader} closure.;public void setBinding(Binding binding) {_		this.binding = binding__	};set,the,binding,i,e,the,groovy,variables,available,in,the,scope,of,a,code,groovy,bean,definition,reader,closure;public,void,set,binding,binding,binding,this,binding,binding
GroovyBeanDefinitionReader -> public void setBinding(Binding binding);1506097334;Set the binding, i.e. the Groovy variables available in the scope_of a {@code GroovyBeanDefinitionReader} closure.;public void setBinding(Binding binding) {_		this.binding = binding__	};set,the,binding,i,e,the,groovy,variables,available,in,the,scope,of,a,code,groovy,bean,definition,reader,closure;public,void,set,binding,binding,binding,this,binding,binding
GroovyBeanDefinitionReader -> public void setBinding(Binding binding);1519771074;Set the binding, i.e. the Groovy variables available in the scope_of a {@code GroovyBeanDefinitionReader} closure.;public void setBinding(Binding binding) {_		this.binding = binding__	};set,the,binding,i,e,the,groovy,variables,available,in,the,scope,of,a,code,groovy,bean,definition,reader,closure;public,void,set,binding,binding,binding,this,binding,binding
GroovyBeanDefinitionReader -> public void setBinding(Binding binding);1519832519;Set the binding, i.e. the Groovy variables available in the scope_of a {@code GroovyBeanDefinitionReader} closure.;public void setBinding(Binding binding) {_		this.binding = binding__	};set,the,binding,i,e,the,groovy,variables,available,in,the,scope,of,a,code,groovy,bean,definition,reader,closure;public,void,set,binding,binding,binding,this,binding,binding
GroovyBeanDefinitionReader -> public void setBinding(Binding binding);1519859718;Set the binding, i.e. the Groovy variables available in the scope_of a {@code GroovyBeanDefinitionReader} closure.;public void setBinding(Binding binding) {_		this.binding = binding__	};set,the,binding,i,e,the,groovy,variables,available,in,the,scope,of,a,code,groovy,bean,definition,reader,closure;public,void,set,binding,binding,binding,this,binding,binding
GroovyBeanDefinitionReader -> public void setBinding(Binding binding);1520529117;Set the binding, i.e. the Groovy variables available in the scope_of a {@code GroovyBeanDefinitionReader} closure.;public void setBinding(Binding binding) {_		this.binding = binding__	};set,the,binding,i,e,the,groovy,variables,available,in,the,scope,of,a,code,groovy,bean,definition,reader,closure;public,void,set,binding,binding,binding,this,binding,binding
GroovyBeanDefinitionReader -> public void setBinding(Binding binding);1522359230;Set the binding, i.e. the Groovy variables available in the scope_of a {@code GroovyBeanDefinitionReader} closure.;public void setBinding(Binding binding) {_		this.binding = binding__	};set,the,binding,i,e,the,groovy,variables,available,in,the,scope,of,a,code,groovy,bean,definition,reader,closure;public,void,set,binding,binding,binding,this,binding,binding
GroovyBeanDefinitionReader -> public void setBinding(Binding binding);1530174524;Set the binding, i.e. the Groovy variables available in the scope_of a {@code GroovyBeanDefinitionReader} closure.;public void setBinding(Binding binding) {_		this.binding = binding__	};set,the,binding,i,e,the,groovy,variables,available,in,the,scope,of,a,code,groovy,bean,definition,reader,closure;public,void,set,binding,binding,binding,this,binding,binding
GroovyBeanDefinitionReader -> public void setBinding(Binding binding);1530174524;Set the binding, i.e. the Groovy variables available in the scope_of a {@code GroovyBeanDefinitionReader} closure.;public void setBinding(Binding binding) {_		this.binding = binding__	};set,the,binding,i,e,the,groovy,variables,available,in,the,scope,of,a,code,groovy,bean,definition,reader,closure;public,void,set,binding,binding,binding,this,binding,binding
GroovyBeanDefinitionReader -> public void setBinding(Binding binding);1530174524;Set the binding, i.e. the Groovy variables available in the scope_of a {@code GroovyBeanDefinitionReader} closure.;public void setBinding(Binding binding) {_		this.binding = binding__	};set,the,binding,i,e,the,groovy,variables,available,in,the,scope,of,a,code,groovy,bean,definition,reader,closure;public,void,set,binding,binding,binding,this,binding,binding
GroovyBeanDefinitionReader -> public void setBinding(Binding binding);1530190293;Set the binding, i.e. the Groovy variables available in the scope_of a {@code GroovyBeanDefinitionReader} closure.;public void setBinding(Binding binding) {_		this.binding = binding__	};set,the,binding,i,e,the,groovy,variables,available,in,the,scope,of,a,code,groovy,bean,definition,reader,closure;public,void,set,binding,binding,binding,this,binding,binding
GroovyBeanDefinitionReader -> public void setBinding(Binding binding);1532706365;Set the binding, i.e. the Groovy variables available in the scope_of a {@code GroovyBeanDefinitionReader} closure.;public void setBinding(Binding binding) {_		this.binding = binding__	};set,the,binding,i,e,the,groovy,variables,available,in,the,scope,of,a,code,groovy,bean,definition,reader,closure;public,void,set,binding,binding,binding,this,binding,binding
GroovyBeanDefinitionReader -> public void importBeans(String resourcePattern) throws IOException;1503319306;Import Spring bean definitions from either XML or Groovy sources into the_current bean builder instance._@param resourcePattern the resource pattern;public void importBeans(String resourcePattern) throws IOException {_		loadBeanDefinitions(resourcePattern)__	};import,spring,bean,definitions,from,either,xml,or,groovy,sources,into,the,current,bean,builder,instance,param,resource,pattern,the,resource,pattern;public,void,import,beans,string,resource,pattern,throws,ioexception,load,bean,definitions,resource,pattern
GroovyBeanDefinitionReader -> public void importBeans(String resourcePattern) throws IOException;1506097334;Import Spring bean definitions from either XML or Groovy sources into the_current bean builder instance._@param resourcePattern the resource pattern;public void importBeans(String resourcePattern) throws IOException {_		loadBeanDefinitions(resourcePattern)__	};import,spring,bean,definitions,from,either,xml,or,groovy,sources,into,the,current,bean,builder,instance,param,resource,pattern,the,resource,pattern;public,void,import,beans,string,resource,pattern,throws,ioexception,load,bean,definitions,resource,pattern
GroovyBeanDefinitionReader -> public void importBeans(String resourcePattern) throws IOException;1519771074;Import Spring bean definitions from either XML or Groovy sources into the_current bean builder instance._@param resourcePattern the resource pattern;public void importBeans(String resourcePattern) throws IOException {_		loadBeanDefinitions(resourcePattern)__	};import,spring,bean,definitions,from,either,xml,or,groovy,sources,into,the,current,bean,builder,instance,param,resource,pattern,the,resource,pattern;public,void,import,beans,string,resource,pattern,throws,ioexception,load,bean,definitions,resource,pattern
GroovyBeanDefinitionReader -> public void importBeans(String resourcePattern) throws IOException;1519832519;Import Spring bean definitions from either XML or Groovy sources into the_current bean builder instance._@param resourcePattern the resource pattern;public void importBeans(String resourcePattern) throws IOException {_		loadBeanDefinitions(resourcePattern)__	};import,spring,bean,definitions,from,either,xml,or,groovy,sources,into,the,current,bean,builder,instance,param,resource,pattern,the,resource,pattern;public,void,import,beans,string,resource,pattern,throws,ioexception,load,bean,definitions,resource,pattern
GroovyBeanDefinitionReader -> public void importBeans(String resourcePattern) throws IOException;1519859718;Import Spring bean definitions from either XML or Groovy sources into the_current bean builder instance._@param resourcePattern the resource pattern;public void importBeans(String resourcePattern) throws IOException {_		loadBeanDefinitions(resourcePattern)__	};import,spring,bean,definitions,from,either,xml,or,groovy,sources,into,the,current,bean,builder,instance,param,resource,pattern,the,resource,pattern;public,void,import,beans,string,resource,pattern,throws,ioexception,load,bean,definitions,resource,pattern
GroovyBeanDefinitionReader -> public void importBeans(String resourcePattern) throws IOException;1520529117;Import Spring bean definitions from either XML or Groovy sources into the_current bean builder instance._@param resourcePattern the resource pattern;public void importBeans(String resourcePattern) throws IOException {_		loadBeanDefinitions(resourcePattern)__	};import,spring,bean,definitions,from,either,xml,or,groovy,sources,into,the,current,bean,builder,instance,param,resource,pattern,the,resource,pattern;public,void,import,beans,string,resource,pattern,throws,ioexception,load,bean,definitions,resource,pattern
GroovyBeanDefinitionReader -> public void importBeans(String resourcePattern) throws IOException;1522359230;Import Spring bean definitions from either XML or Groovy sources into the_current bean builder instance._@param resourcePattern the resource pattern;public void importBeans(String resourcePattern) throws IOException {_		loadBeanDefinitions(resourcePattern)__	};import,spring,bean,definitions,from,either,xml,or,groovy,sources,into,the,current,bean,builder,instance,param,resource,pattern,the,resource,pattern;public,void,import,beans,string,resource,pattern,throws,ioexception,load,bean,definitions,resource,pattern
GroovyBeanDefinitionReader -> public void importBeans(String resourcePattern) throws IOException;1530174524;Import Spring bean definitions from either XML or Groovy sources into the_current bean builder instance._@param resourcePattern the resource pattern;public void importBeans(String resourcePattern) throws IOException {_		loadBeanDefinitions(resourcePattern)__	};import,spring,bean,definitions,from,either,xml,or,groovy,sources,into,the,current,bean,builder,instance,param,resource,pattern,the,resource,pattern;public,void,import,beans,string,resource,pattern,throws,ioexception,load,bean,definitions,resource,pattern
GroovyBeanDefinitionReader -> public void importBeans(String resourcePattern) throws IOException;1530174524;Import Spring bean definitions from either XML or Groovy sources into the_current bean builder instance._@param resourcePattern the resource pattern;public void importBeans(String resourcePattern) throws IOException {_		loadBeanDefinitions(resourcePattern)__	};import,spring,bean,definitions,from,either,xml,or,groovy,sources,into,the,current,bean,builder,instance,param,resource,pattern,the,resource,pattern;public,void,import,beans,string,resource,pattern,throws,ioexception,load,bean,definitions,resource,pattern
GroovyBeanDefinitionReader -> public void importBeans(String resourcePattern) throws IOException;1530174524;Import Spring bean definitions from either XML or Groovy sources into the_current bean builder instance._@param resourcePattern the resource pattern;public void importBeans(String resourcePattern) throws IOException {_		loadBeanDefinitions(resourcePattern)__	};import,spring,bean,definitions,from,either,xml,or,groovy,sources,into,the,current,bean,builder,instance,param,resource,pattern,the,resource,pattern;public,void,import,beans,string,resource,pattern,throws,ioexception,load,bean,definitions,resource,pattern
GroovyBeanDefinitionReader -> public void importBeans(String resourcePattern) throws IOException;1530190293;Import Spring bean definitions from either XML or Groovy sources into the_current bean builder instance._@param resourcePattern the resource pattern;public void importBeans(String resourcePattern) throws IOException {_		loadBeanDefinitions(resourcePattern)__	};import,spring,bean,definitions,from,either,xml,or,groovy,sources,into,the,current,bean,builder,instance,param,resource,pattern,the,resource,pattern;public,void,import,beans,string,resource,pattern,throws,ioexception,load,bean,definitions,resource,pattern
GroovyBeanDefinitionReader -> public void importBeans(String resourcePattern) throws IOException;1532706365;Import Spring bean definitions from either XML or Groovy sources into the_current bean builder instance._@param resourcePattern the resource pattern;public void importBeans(String resourcePattern) throws IOException {_		loadBeanDefinitions(resourcePattern)__	};import,spring,bean,definitions,from,either,xml,or,groovy,sources,into,the,current,bean,builder,instance,param,resource,pattern,the,resource,pattern;public,void,import,beans,string,resource,pattern,throws,ioexception,load,bean,definitions,resource,pattern
GroovyBeanDefinitionReader -> public int loadBeanDefinitions(EncodedResource encodedResource) throws BeanDefinitionStoreException;1503319306;Load bean definitions from the specified Groovy script or XML file._<p>Note that {@code ".xml"} files will be parsed as XML content_ all other kinds_of resources will be parsed as Groovy scripts._@param encodedResource the resource descriptor for the Groovy script or XML file,_allowing specification of an encoding to use for parsing the file_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int loadBeanDefinitions(EncodedResource encodedResource) throws BeanDefinitionStoreException {_		_		String filename = encodedResource.getResource().getFilename()__		if (StringUtils.endsWithIgnoreCase(filename, ".xml")) {_			return this.standardXmlBeanDefinitionReader.loadBeanDefinitions(encodedResource)__		}__		Closure beans = new Closure(this) {_			public Object call(Object[] args) {_				invokeBeanDefiningClosure((Closure) args[0])__				return null__			}_		}__		Binding binding = new Binding() {_			@Override_			public void setVariable(String name, Object value) {_				if (currentBeanDefinition != null) {_					applyPropertyToBeanDefinition(name, value)__				}_				else {_					super.setVariable(name, value)__				}_			}_		}__		binding.setVariable("beans", beans)___		int countBefore = getRegistry().getBeanDefinitionCount()__		try {_			GroovyShell shell = new GroovyShell(getBeanClassLoader(), binding)__			shell.evaluate(encodedResource.getReader(), "beans")__		}_		catch (Throwable ex) {_			throw new BeanDefinitionParsingException(new Problem("Error evaluating Groovy script: " + ex.getMessage(),_					new Location(encodedResource.getResource()), null, ex))__		}_		return getRegistry().getBeanDefinitionCount() - countBefore__	};load,bean,definitions,from,the,specified,groovy,script,or,xml,file,p,note,that,code,xml,files,will,be,parsed,as,xml,content,all,other,kinds,of,resources,will,be,parsed,as,groovy,scripts,param,encoded,resource,the,resource,descriptor,for,the,groovy,script,or,xml,file,allowing,specification,of,an,encoding,to,use,for,parsing,the,file,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,load,bean,definitions,encoded,resource,encoded,resource,throws,bean,definition,store,exception,string,filename,encoded,resource,get,resource,get,filename,if,string,utils,ends,with,ignore,case,filename,xml,return,this,standard,xml,bean,definition,reader,load,bean,definitions,encoded,resource,closure,beans,new,closure,this,public,object,call,object,args,invoke,bean,defining,closure,closure,args,0,return,null,binding,binding,new,binding,override,public,void,set,variable,string,name,object,value,if,current,bean,definition,null,apply,property,to,bean,definition,name,value,else,super,set,variable,name,value,binding,set,variable,beans,beans,int,count,before,get,registry,get,bean,definition,count,try,groovy,shell,shell,new,groovy,shell,get,bean,class,loader,binding,shell,evaluate,encoded,resource,get,reader,beans,catch,throwable,ex,throw,new,bean,definition,parsing,exception,new,problem,error,evaluating,groovy,script,ex,get,message,new,location,encoded,resource,get,resource,null,ex,return,get,registry,get,bean,definition,count,count,before
GroovyBeanDefinitionReader -> public int loadBeanDefinitions(EncodedResource encodedResource) throws BeanDefinitionStoreException;1506097334;Load bean definitions from the specified Groovy script or XML file._<p>Note that {@code ".xml"} files will be parsed as XML content_ all other kinds_of resources will be parsed as Groovy scripts._@param encodedResource the resource descriptor for the Groovy script or XML file,_allowing specification of an encoding to use for parsing the file_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int loadBeanDefinitions(EncodedResource encodedResource) throws BeanDefinitionStoreException {_		_		String filename = encodedResource.getResource().getFilename()__		if (StringUtils.endsWithIgnoreCase(filename, ".xml")) {_			return this.standardXmlBeanDefinitionReader.loadBeanDefinitions(encodedResource)__		}__		Closure beans = new Closure(this) {_			public Object call(Object[] args) {_				invokeBeanDefiningClosure((Closure) args[0])__				return null__			}_		}__		Binding binding = new Binding() {_			@Override_			public void setVariable(String name, Object value) {_				if (currentBeanDefinition != null) {_					applyPropertyToBeanDefinition(name, value)__				}_				else {_					super.setVariable(name, value)__				}_			}_		}__		binding.setVariable("beans", beans)___		int countBefore = getRegistry().getBeanDefinitionCount()__		try {_			GroovyShell shell = new GroovyShell(getBeanClassLoader(), binding)__			shell.evaluate(encodedResource.getReader(), "beans")__		}_		catch (Throwable ex) {_			throw new BeanDefinitionParsingException(new Problem("Error evaluating Groovy script: " + ex.getMessage(),_					new Location(encodedResource.getResource()), null, ex))__		}_		return getRegistry().getBeanDefinitionCount() - countBefore__	};load,bean,definitions,from,the,specified,groovy,script,or,xml,file,p,note,that,code,xml,files,will,be,parsed,as,xml,content,all,other,kinds,of,resources,will,be,parsed,as,groovy,scripts,param,encoded,resource,the,resource,descriptor,for,the,groovy,script,or,xml,file,allowing,specification,of,an,encoding,to,use,for,parsing,the,file,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,load,bean,definitions,encoded,resource,encoded,resource,throws,bean,definition,store,exception,string,filename,encoded,resource,get,resource,get,filename,if,string,utils,ends,with,ignore,case,filename,xml,return,this,standard,xml,bean,definition,reader,load,bean,definitions,encoded,resource,closure,beans,new,closure,this,public,object,call,object,args,invoke,bean,defining,closure,closure,args,0,return,null,binding,binding,new,binding,override,public,void,set,variable,string,name,object,value,if,current,bean,definition,null,apply,property,to,bean,definition,name,value,else,super,set,variable,name,value,binding,set,variable,beans,beans,int,count,before,get,registry,get,bean,definition,count,try,groovy,shell,shell,new,groovy,shell,get,bean,class,loader,binding,shell,evaluate,encoded,resource,get,reader,beans,catch,throwable,ex,throw,new,bean,definition,parsing,exception,new,problem,error,evaluating,groovy,script,ex,get,message,new,location,encoded,resource,get,resource,null,ex,return,get,registry,get,bean,definition,count,count,before
GroovyBeanDefinitionReader -> public int loadBeanDefinitions(EncodedResource encodedResource) throws BeanDefinitionStoreException;1519771074;Load bean definitions from the specified Groovy script or XML file._<p>Note that {@code ".xml"} files will be parsed as XML content_ all other kinds_of resources will be parsed as Groovy scripts._@param encodedResource the resource descriptor for the Groovy script or XML file,_allowing specification of an encoding to use for parsing the file_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int loadBeanDefinitions(EncodedResource encodedResource) throws BeanDefinitionStoreException {_		_		String filename = encodedResource.getResource().getFilename()__		if (StringUtils.endsWithIgnoreCase(filename, ".xml")) {_			return this.standardXmlBeanDefinitionReader.loadBeanDefinitions(encodedResource)__		}__		Closure beans = new Closure(this) {_			public Object call(Object[] args) {_				invokeBeanDefiningClosure((Closure) args[0])__				return null__			}_		}__		Binding binding = new Binding() {_			@Override_			public void setVariable(String name, Object value) {_				if (currentBeanDefinition != null) {_					applyPropertyToBeanDefinition(name, value)__				}_				else {_					super.setVariable(name, value)__				}_			}_		}__		binding.setVariable("beans", beans)___		int countBefore = getRegistry().getBeanDefinitionCount()__		try {_			GroovyShell shell = new GroovyShell(getBeanClassLoader(), binding)__			shell.evaluate(encodedResource.getReader(), "beans")__		}_		catch (Throwable ex) {_			throw new BeanDefinitionParsingException(new Problem("Error evaluating Groovy script: " + ex.getMessage(),_					new Location(encodedResource.getResource()), null, ex))__		}_		return getRegistry().getBeanDefinitionCount() - countBefore__	};load,bean,definitions,from,the,specified,groovy,script,or,xml,file,p,note,that,code,xml,files,will,be,parsed,as,xml,content,all,other,kinds,of,resources,will,be,parsed,as,groovy,scripts,param,encoded,resource,the,resource,descriptor,for,the,groovy,script,or,xml,file,allowing,specification,of,an,encoding,to,use,for,parsing,the,file,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,load,bean,definitions,encoded,resource,encoded,resource,throws,bean,definition,store,exception,string,filename,encoded,resource,get,resource,get,filename,if,string,utils,ends,with,ignore,case,filename,xml,return,this,standard,xml,bean,definition,reader,load,bean,definitions,encoded,resource,closure,beans,new,closure,this,public,object,call,object,args,invoke,bean,defining,closure,closure,args,0,return,null,binding,binding,new,binding,override,public,void,set,variable,string,name,object,value,if,current,bean,definition,null,apply,property,to,bean,definition,name,value,else,super,set,variable,name,value,binding,set,variable,beans,beans,int,count,before,get,registry,get,bean,definition,count,try,groovy,shell,shell,new,groovy,shell,get,bean,class,loader,binding,shell,evaluate,encoded,resource,get,reader,beans,catch,throwable,ex,throw,new,bean,definition,parsing,exception,new,problem,error,evaluating,groovy,script,ex,get,message,new,location,encoded,resource,get,resource,null,ex,return,get,registry,get,bean,definition,count,count,before
GroovyBeanDefinitionReader -> public int loadBeanDefinitions(EncodedResource encodedResource) throws BeanDefinitionStoreException;1519832519;Load bean definitions from the specified Groovy script or XML file._<p>Note that {@code ".xml"} files will be parsed as XML content_ all other kinds_of resources will be parsed as Groovy scripts._@param encodedResource the resource descriptor for the Groovy script or XML file,_allowing specification of an encoding to use for parsing the file_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int loadBeanDefinitions(EncodedResource encodedResource) throws BeanDefinitionStoreException {_		_		String filename = encodedResource.getResource().getFilename()__		if (StringUtils.endsWithIgnoreCase(filename, ".xml")) {_			return this.standardXmlBeanDefinitionReader.loadBeanDefinitions(encodedResource)__		}__		Closure beans = new Closure(this) {_			public Object call(Object[] args) {_				invokeBeanDefiningClosure((Closure) args[0])__				return null__			}_		}__		Binding binding = new Binding() {_			@Override_			public void setVariable(String name, Object value) {_				if (currentBeanDefinition != null) {_					applyPropertyToBeanDefinition(name, value)__				}_				else {_					super.setVariable(name, value)__				}_			}_		}__		binding.setVariable("beans", beans)___		int countBefore = getRegistry().getBeanDefinitionCount()__		try {_			GroovyShell shell = new GroovyShell(getBeanClassLoader(), binding)__			shell.evaluate(encodedResource.getReader(), "beans")__		}_		catch (Throwable ex) {_			throw new BeanDefinitionParsingException(new Problem("Error evaluating Groovy script: " + ex.getMessage(),_					new Location(encodedResource.getResource()), null, ex))__		}_		return getRegistry().getBeanDefinitionCount() - countBefore__	};load,bean,definitions,from,the,specified,groovy,script,or,xml,file,p,note,that,code,xml,files,will,be,parsed,as,xml,content,all,other,kinds,of,resources,will,be,parsed,as,groovy,scripts,param,encoded,resource,the,resource,descriptor,for,the,groovy,script,or,xml,file,allowing,specification,of,an,encoding,to,use,for,parsing,the,file,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,load,bean,definitions,encoded,resource,encoded,resource,throws,bean,definition,store,exception,string,filename,encoded,resource,get,resource,get,filename,if,string,utils,ends,with,ignore,case,filename,xml,return,this,standard,xml,bean,definition,reader,load,bean,definitions,encoded,resource,closure,beans,new,closure,this,public,object,call,object,args,invoke,bean,defining,closure,closure,args,0,return,null,binding,binding,new,binding,override,public,void,set,variable,string,name,object,value,if,current,bean,definition,null,apply,property,to,bean,definition,name,value,else,super,set,variable,name,value,binding,set,variable,beans,beans,int,count,before,get,registry,get,bean,definition,count,try,groovy,shell,shell,new,groovy,shell,get,bean,class,loader,binding,shell,evaluate,encoded,resource,get,reader,beans,catch,throwable,ex,throw,new,bean,definition,parsing,exception,new,problem,error,evaluating,groovy,script,ex,get,message,new,location,encoded,resource,get,resource,null,ex,return,get,registry,get,bean,definition,count,count,before
GroovyBeanDefinitionReader -> public int loadBeanDefinitions(EncodedResource encodedResource) throws BeanDefinitionStoreException;1519859718;Load bean definitions from the specified Groovy script or XML file._<p>Note that {@code ".xml"} files will be parsed as XML content_ all other kinds_of resources will be parsed as Groovy scripts._@param encodedResource the resource descriptor for the Groovy script or XML file,_allowing specification of an encoding to use for parsing the file_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int loadBeanDefinitions(EncodedResource encodedResource) throws BeanDefinitionStoreException {_		_		String filename = encodedResource.getResource().getFilename()__		if (StringUtils.endsWithIgnoreCase(filename, ".xml")) {_			return this.standardXmlBeanDefinitionReader.loadBeanDefinitions(encodedResource)__		}__		Closure beans = new Closure(this) {_			@Override_			public Object call(Object[] args) {_				invokeBeanDefiningClosure((Closure) args[0])__				return null__			}_		}__		Binding binding = new Binding() {_			@Override_			public void setVariable(String name, Object value) {_				if (currentBeanDefinition != null) {_					applyPropertyToBeanDefinition(name, value)__				}_				else {_					super.setVariable(name, value)__				}_			}_		}__		binding.setVariable("beans", beans)___		int countBefore = getRegistry().getBeanDefinitionCount()__		try {_			GroovyShell shell = new GroovyShell(getBeanClassLoader(), binding)__			shell.evaluate(encodedResource.getReader(), "beans")__		}_		catch (Throwable ex) {_			throw new BeanDefinitionParsingException(new Problem("Error evaluating Groovy script: " + ex.getMessage(),_					new Location(encodedResource.getResource()), null, ex))__		}_		return getRegistry().getBeanDefinitionCount() - countBefore__	};load,bean,definitions,from,the,specified,groovy,script,or,xml,file,p,note,that,code,xml,files,will,be,parsed,as,xml,content,all,other,kinds,of,resources,will,be,parsed,as,groovy,scripts,param,encoded,resource,the,resource,descriptor,for,the,groovy,script,or,xml,file,allowing,specification,of,an,encoding,to,use,for,parsing,the,file,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,load,bean,definitions,encoded,resource,encoded,resource,throws,bean,definition,store,exception,string,filename,encoded,resource,get,resource,get,filename,if,string,utils,ends,with,ignore,case,filename,xml,return,this,standard,xml,bean,definition,reader,load,bean,definitions,encoded,resource,closure,beans,new,closure,this,override,public,object,call,object,args,invoke,bean,defining,closure,closure,args,0,return,null,binding,binding,new,binding,override,public,void,set,variable,string,name,object,value,if,current,bean,definition,null,apply,property,to,bean,definition,name,value,else,super,set,variable,name,value,binding,set,variable,beans,beans,int,count,before,get,registry,get,bean,definition,count,try,groovy,shell,shell,new,groovy,shell,get,bean,class,loader,binding,shell,evaluate,encoded,resource,get,reader,beans,catch,throwable,ex,throw,new,bean,definition,parsing,exception,new,problem,error,evaluating,groovy,script,ex,get,message,new,location,encoded,resource,get,resource,null,ex,return,get,registry,get,bean,definition,count,count,before
GroovyBeanDefinitionReader -> public int loadBeanDefinitions(EncodedResource encodedResource) throws BeanDefinitionStoreException;1520529117;Load bean definitions from the specified Groovy script or XML file._<p>Note that {@code ".xml"} files will be parsed as XML content_ all other kinds_of resources will be parsed as Groovy scripts._@param encodedResource the resource descriptor for the Groovy script or XML file,_allowing specification of an encoding to use for parsing the file_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int loadBeanDefinitions(EncodedResource encodedResource) throws BeanDefinitionStoreException {_		_		String filename = encodedResource.getResource().getFilename()__		if (StringUtils.endsWithIgnoreCase(filename, ".xml")) {_			return this.standardXmlBeanDefinitionReader.loadBeanDefinitions(encodedResource)__		}__		Closure beans = new Closure(this) {_			@Override_			public Object call(Object[] args) {_				invokeBeanDefiningClosure((Closure) args[0])__				return null__			}_		}__		Binding binding = new Binding() {_			@Override_			public void setVariable(String name, Object value) {_				if (currentBeanDefinition != null) {_					applyPropertyToBeanDefinition(name, value)__				}_				else {_					super.setVariable(name, value)__				}_			}_		}__		binding.setVariable("beans", beans)___		int countBefore = getRegistry().getBeanDefinitionCount()__		try {_			GroovyShell shell = new GroovyShell(getBeanClassLoader(), binding)__			shell.evaluate(encodedResource.getReader(), "beans")__		}_		catch (Throwable ex) {_			throw new BeanDefinitionParsingException(new Problem("Error evaluating Groovy script: " + ex.getMessage(),_					new Location(encodedResource.getResource()), null, ex))__		}_		return getRegistry().getBeanDefinitionCount() - countBefore__	};load,bean,definitions,from,the,specified,groovy,script,or,xml,file,p,note,that,code,xml,files,will,be,parsed,as,xml,content,all,other,kinds,of,resources,will,be,parsed,as,groovy,scripts,param,encoded,resource,the,resource,descriptor,for,the,groovy,script,or,xml,file,allowing,specification,of,an,encoding,to,use,for,parsing,the,file,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,load,bean,definitions,encoded,resource,encoded,resource,throws,bean,definition,store,exception,string,filename,encoded,resource,get,resource,get,filename,if,string,utils,ends,with,ignore,case,filename,xml,return,this,standard,xml,bean,definition,reader,load,bean,definitions,encoded,resource,closure,beans,new,closure,this,override,public,object,call,object,args,invoke,bean,defining,closure,closure,args,0,return,null,binding,binding,new,binding,override,public,void,set,variable,string,name,object,value,if,current,bean,definition,null,apply,property,to,bean,definition,name,value,else,super,set,variable,name,value,binding,set,variable,beans,beans,int,count,before,get,registry,get,bean,definition,count,try,groovy,shell,shell,new,groovy,shell,get,bean,class,loader,binding,shell,evaluate,encoded,resource,get,reader,beans,catch,throwable,ex,throw,new,bean,definition,parsing,exception,new,problem,error,evaluating,groovy,script,ex,get,message,new,location,encoded,resource,get,resource,null,ex,return,get,registry,get,bean,definition,count,count,before
GroovyBeanDefinitionReader -> public int loadBeanDefinitions(EncodedResource encodedResource) throws BeanDefinitionStoreException;1522359230;Load bean definitions from the specified Groovy script or XML file._<p>Note that {@code ".xml"} files will be parsed as XML content_ all other kinds_of resources will be parsed as Groovy scripts._@param encodedResource the resource descriptor for the Groovy script or XML file,_allowing specification of an encoding to use for parsing the file_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int loadBeanDefinitions(EncodedResource encodedResource) throws BeanDefinitionStoreException {_		_		String filename = encodedResource.getResource().getFilename()__		if (StringUtils.endsWithIgnoreCase(filename, ".xml")) {_			return this.standardXmlBeanDefinitionReader.loadBeanDefinitions(encodedResource)__		}__		Closure beans = new Closure(this) {_			@Override_			public Object call(Object[] args) {_				invokeBeanDefiningClosure((Closure) args[0])__				return null__			}_		}__		Binding binding = new Binding() {_			@Override_			public void setVariable(String name, Object value) {_				if (currentBeanDefinition != null) {_					applyPropertyToBeanDefinition(name, value)__				}_				else {_					super.setVariable(name, value)__				}_			}_		}__		binding.setVariable("beans", beans)___		int countBefore = getRegistry().getBeanDefinitionCount()__		try {_			GroovyShell shell = new GroovyShell(getBeanClassLoader(), binding)__			shell.evaluate(encodedResource.getReader(), "beans")__		}_		catch (Throwable ex) {_			throw new BeanDefinitionParsingException(new Problem("Error evaluating Groovy script: " + ex.getMessage(),_					new Location(encodedResource.getResource()), null, ex))__		}_		return getRegistry().getBeanDefinitionCount() - countBefore__	};load,bean,definitions,from,the,specified,groovy,script,or,xml,file,p,note,that,code,xml,files,will,be,parsed,as,xml,content,all,other,kinds,of,resources,will,be,parsed,as,groovy,scripts,param,encoded,resource,the,resource,descriptor,for,the,groovy,script,or,xml,file,allowing,specification,of,an,encoding,to,use,for,parsing,the,file,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,load,bean,definitions,encoded,resource,encoded,resource,throws,bean,definition,store,exception,string,filename,encoded,resource,get,resource,get,filename,if,string,utils,ends,with,ignore,case,filename,xml,return,this,standard,xml,bean,definition,reader,load,bean,definitions,encoded,resource,closure,beans,new,closure,this,override,public,object,call,object,args,invoke,bean,defining,closure,closure,args,0,return,null,binding,binding,new,binding,override,public,void,set,variable,string,name,object,value,if,current,bean,definition,null,apply,property,to,bean,definition,name,value,else,super,set,variable,name,value,binding,set,variable,beans,beans,int,count,before,get,registry,get,bean,definition,count,try,groovy,shell,shell,new,groovy,shell,get,bean,class,loader,binding,shell,evaluate,encoded,resource,get,reader,beans,catch,throwable,ex,throw,new,bean,definition,parsing,exception,new,problem,error,evaluating,groovy,script,ex,get,message,new,location,encoded,resource,get,resource,null,ex,return,get,registry,get,bean,definition,count,count,before
GroovyBeanDefinitionReader -> public int loadBeanDefinitions(EncodedResource encodedResource) throws BeanDefinitionStoreException;1530174524;Load bean definitions from the specified Groovy script or XML file._<p>Note that {@code ".xml"} files will be parsed as XML content_ all other kinds_of resources will be parsed as Groovy scripts._@param encodedResource the resource descriptor for the Groovy script or XML file,_allowing specification of an encoding to use for parsing the file_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int loadBeanDefinitions(EncodedResource encodedResource) throws BeanDefinitionStoreException {_		_		String filename = encodedResource.getResource().getFilename()__		if (StringUtils.endsWithIgnoreCase(filename, ".xml")) {_			return this.standardXmlBeanDefinitionReader.loadBeanDefinitions(encodedResource)__		}__		Closure beans = new Closure(this) {_			@Override_			public Object call(Object[] args) {_				invokeBeanDefiningClosure((Closure) args[0])__				return null__			}_		}__		Binding binding = new Binding() {_			@Override_			public void setVariable(String name, Object value) {_				if (currentBeanDefinition != null) {_					applyPropertyToBeanDefinition(name, value)__				}_				else {_					super.setVariable(name, value)__				}_			}_		}__		binding.setVariable("beans", beans)___		int countBefore = getRegistry().getBeanDefinitionCount()__		try {_			GroovyShell shell = new GroovyShell(getBeanClassLoader(), binding)__			shell.evaluate(encodedResource.getReader(), "beans")__		}_		catch (Throwable ex) {_			throw new BeanDefinitionParsingException(new Problem("Error evaluating Groovy script: " + ex.getMessage(),_					new Location(encodedResource.getResource()), null, ex))__		}_		return getRegistry().getBeanDefinitionCount() - countBefore__	};load,bean,definitions,from,the,specified,groovy,script,or,xml,file,p,note,that,code,xml,files,will,be,parsed,as,xml,content,all,other,kinds,of,resources,will,be,parsed,as,groovy,scripts,param,encoded,resource,the,resource,descriptor,for,the,groovy,script,or,xml,file,allowing,specification,of,an,encoding,to,use,for,parsing,the,file,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,load,bean,definitions,encoded,resource,encoded,resource,throws,bean,definition,store,exception,string,filename,encoded,resource,get,resource,get,filename,if,string,utils,ends,with,ignore,case,filename,xml,return,this,standard,xml,bean,definition,reader,load,bean,definitions,encoded,resource,closure,beans,new,closure,this,override,public,object,call,object,args,invoke,bean,defining,closure,closure,args,0,return,null,binding,binding,new,binding,override,public,void,set,variable,string,name,object,value,if,current,bean,definition,null,apply,property,to,bean,definition,name,value,else,super,set,variable,name,value,binding,set,variable,beans,beans,int,count,before,get,registry,get,bean,definition,count,try,groovy,shell,shell,new,groovy,shell,get,bean,class,loader,binding,shell,evaluate,encoded,resource,get,reader,beans,catch,throwable,ex,throw,new,bean,definition,parsing,exception,new,problem,error,evaluating,groovy,script,ex,get,message,new,location,encoded,resource,get,resource,null,ex,return,get,registry,get,bean,definition,count,count,before
GroovyBeanDefinitionReader -> public int loadBeanDefinitions(EncodedResource encodedResource) throws BeanDefinitionStoreException;1530174524;Load bean definitions from the specified Groovy script or XML file._<p>Note that {@code ".xml"} files will be parsed as XML content_ all other kinds_of resources will be parsed as Groovy scripts._@param encodedResource the resource descriptor for the Groovy script or XML file,_allowing specification of an encoding to use for parsing the file_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int loadBeanDefinitions(EncodedResource encodedResource) throws BeanDefinitionStoreException {_		_		String filename = encodedResource.getResource().getFilename()__		if (StringUtils.endsWithIgnoreCase(filename, ".xml")) {_			return this.standardXmlBeanDefinitionReader.loadBeanDefinitions(encodedResource)__		}__		Closure beans = new Closure(this) {_			@Override_			public Object call(Object[] args) {_				invokeBeanDefiningClosure((Closure) args[0])__				return null__			}_		}__		Binding binding = new Binding() {_			@Override_			public void setVariable(String name, Object value) {_				if (currentBeanDefinition != null) {_					applyPropertyToBeanDefinition(name, value)__				}_				else {_					super.setVariable(name, value)__				}_			}_		}__		binding.setVariable("beans", beans)___		int countBefore = getRegistry().getBeanDefinitionCount()__		try {_			GroovyShell shell = new GroovyShell(getBeanClassLoader(), binding)__			shell.evaluate(encodedResource.getReader(), "beans")__		}_		catch (Throwable ex) {_			throw new BeanDefinitionParsingException(new Problem("Error evaluating Groovy script: " + ex.getMessage(),_					new Location(encodedResource.getResource()), null, ex))__		}_		return getRegistry().getBeanDefinitionCount() - countBefore__	};load,bean,definitions,from,the,specified,groovy,script,or,xml,file,p,note,that,code,xml,files,will,be,parsed,as,xml,content,all,other,kinds,of,resources,will,be,parsed,as,groovy,scripts,param,encoded,resource,the,resource,descriptor,for,the,groovy,script,or,xml,file,allowing,specification,of,an,encoding,to,use,for,parsing,the,file,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,load,bean,definitions,encoded,resource,encoded,resource,throws,bean,definition,store,exception,string,filename,encoded,resource,get,resource,get,filename,if,string,utils,ends,with,ignore,case,filename,xml,return,this,standard,xml,bean,definition,reader,load,bean,definitions,encoded,resource,closure,beans,new,closure,this,override,public,object,call,object,args,invoke,bean,defining,closure,closure,args,0,return,null,binding,binding,new,binding,override,public,void,set,variable,string,name,object,value,if,current,bean,definition,null,apply,property,to,bean,definition,name,value,else,super,set,variable,name,value,binding,set,variable,beans,beans,int,count,before,get,registry,get,bean,definition,count,try,groovy,shell,shell,new,groovy,shell,get,bean,class,loader,binding,shell,evaluate,encoded,resource,get,reader,beans,catch,throwable,ex,throw,new,bean,definition,parsing,exception,new,problem,error,evaluating,groovy,script,ex,get,message,new,location,encoded,resource,get,resource,null,ex,return,get,registry,get,bean,definition,count,count,before
GroovyBeanDefinitionReader -> public int loadBeanDefinitions(EncodedResource encodedResource) throws BeanDefinitionStoreException;1530174524;Load bean definitions from the specified Groovy script or XML file._<p>Note that {@code ".xml"} files will be parsed as XML content_ all other kinds_of resources will be parsed as Groovy scripts._@param encodedResource the resource descriptor for the Groovy script or XML file,_allowing specification of an encoding to use for parsing the file_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int loadBeanDefinitions(EncodedResource encodedResource) throws BeanDefinitionStoreException {_		_		String filename = encodedResource.getResource().getFilename()__		if (StringUtils.endsWithIgnoreCase(filename, ".xml")) {_			return this.standardXmlBeanDefinitionReader.loadBeanDefinitions(encodedResource)__		}__		Closure beans = new Closure(this) {_			@Override_			public Object call(Object[] args) {_				invokeBeanDefiningClosure((Closure) args[0])__				return null__			}_		}__		Binding binding = new Binding() {_			@Override_			public void setVariable(String name, Object value) {_				if (currentBeanDefinition != null) {_					applyPropertyToBeanDefinition(name, value)__				}_				else {_					super.setVariable(name, value)__				}_			}_		}__		binding.setVariable("beans", beans)___		int countBefore = getRegistry().getBeanDefinitionCount()__		try {_			GroovyShell shell = new GroovyShell(getBeanClassLoader(), binding)__			shell.evaluate(encodedResource.getReader(), "beans")__		}_		catch (Throwable ex) {_			throw new BeanDefinitionParsingException(new Problem("Error evaluating Groovy script: " + ex.getMessage(),_					new Location(encodedResource.getResource()), null, ex))__		}_		return getRegistry().getBeanDefinitionCount() - countBefore__	};load,bean,definitions,from,the,specified,groovy,script,or,xml,file,p,note,that,code,xml,files,will,be,parsed,as,xml,content,all,other,kinds,of,resources,will,be,parsed,as,groovy,scripts,param,encoded,resource,the,resource,descriptor,for,the,groovy,script,or,xml,file,allowing,specification,of,an,encoding,to,use,for,parsing,the,file,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,load,bean,definitions,encoded,resource,encoded,resource,throws,bean,definition,store,exception,string,filename,encoded,resource,get,resource,get,filename,if,string,utils,ends,with,ignore,case,filename,xml,return,this,standard,xml,bean,definition,reader,load,bean,definitions,encoded,resource,closure,beans,new,closure,this,override,public,object,call,object,args,invoke,bean,defining,closure,closure,args,0,return,null,binding,binding,new,binding,override,public,void,set,variable,string,name,object,value,if,current,bean,definition,null,apply,property,to,bean,definition,name,value,else,super,set,variable,name,value,binding,set,variable,beans,beans,int,count,before,get,registry,get,bean,definition,count,try,groovy,shell,shell,new,groovy,shell,get,bean,class,loader,binding,shell,evaluate,encoded,resource,get,reader,beans,catch,throwable,ex,throw,new,bean,definition,parsing,exception,new,problem,error,evaluating,groovy,script,ex,get,message,new,location,encoded,resource,get,resource,null,ex,return,get,registry,get,bean,definition,count,count,before
GroovyBeanDefinitionReader -> public int loadBeanDefinitions(EncodedResource encodedResource) throws BeanDefinitionStoreException;1530190293;Load bean definitions from the specified Groovy script or XML file._<p>Note that {@code ".xml"} files will be parsed as XML content_ all other kinds_of resources will be parsed as Groovy scripts._@param encodedResource the resource descriptor for the Groovy script or XML file,_allowing specification of an encoding to use for parsing the file_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int loadBeanDefinitions(EncodedResource encodedResource) throws BeanDefinitionStoreException {_		_		String filename = encodedResource.getResource().getFilename()__		if (StringUtils.endsWithIgnoreCase(filename, ".xml")) {_			return this.standardXmlBeanDefinitionReader.loadBeanDefinitions(encodedResource)__		}__		Closure beans = new Closure(this) {_			@Override_			public Object call(Object[] args) {_				invokeBeanDefiningClosure((Closure) args[0])__				return null__			}_		}__		Binding binding = new Binding() {_			@Override_			public void setVariable(String name, Object value) {_				if (currentBeanDefinition != null) {_					applyPropertyToBeanDefinition(name, value)__				}_				else {_					super.setVariable(name, value)__				}_			}_		}__		binding.setVariable("beans", beans)___		int countBefore = getRegistry().getBeanDefinitionCount()__		try {_			GroovyShell shell = new GroovyShell(getBeanClassLoader(), binding)__			shell.evaluate(encodedResource.getReader(), "beans")__		}_		catch (Throwable ex) {_			throw new BeanDefinitionParsingException(new Problem("Error evaluating Groovy script: " + ex.getMessage(),_					new Location(encodedResource.getResource()), null, ex))__		}_		return getRegistry().getBeanDefinitionCount() - countBefore__	};load,bean,definitions,from,the,specified,groovy,script,or,xml,file,p,note,that,code,xml,files,will,be,parsed,as,xml,content,all,other,kinds,of,resources,will,be,parsed,as,groovy,scripts,param,encoded,resource,the,resource,descriptor,for,the,groovy,script,or,xml,file,allowing,specification,of,an,encoding,to,use,for,parsing,the,file,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,load,bean,definitions,encoded,resource,encoded,resource,throws,bean,definition,store,exception,string,filename,encoded,resource,get,resource,get,filename,if,string,utils,ends,with,ignore,case,filename,xml,return,this,standard,xml,bean,definition,reader,load,bean,definitions,encoded,resource,closure,beans,new,closure,this,override,public,object,call,object,args,invoke,bean,defining,closure,closure,args,0,return,null,binding,binding,new,binding,override,public,void,set,variable,string,name,object,value,if,current,bean,definition,null,apply,property,to,bean,definition,name,value,else,super,set,variable,name,value,binding,set,variable,beans,beans,int,count,before,get,registry,get,bean,definition,count,try,groovy,shell,shell,new,groovy,shell,get,bean,class,loader,binding,shell,evaluate,encoded,resource,get,reader,beans,catch,throwable,ex,throw,new,bean,definition,parsing,exception,new,problem,error,evaluating,groovy,script,ex,get,message,new,location,encoded,resource,get,resource,null,ex,return,get,registry,get,bean,definition,count,count,before
GroovyBeanDefinitionReader -> public int loadBeanDefinitions(EncodedResource encodedResource) throws BeanDefinitionStoreException;1532706365;Load bean definitions from the specified Groovy script or XML file._<p>Note that {@code ".xml"} files will be parsed as XML content_ all other kinds_of resources will be parsed as Groovy scripts._@param encodedResource the resource descriptor for the Groovy script or XML file,_allowing specification of an encoding to use for parsing the file_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int loadBeanDefinitions(EncodedResource encodedResource) throws BeanDefinitionStoreException {_		_		String filename = encodedResource.getResource().getFilename()__		if (StringUtils.endsWithIgnoreCase(filename, ".xml")) {_			return this.standardXmlBeanDefinitionReader.loadBeanDefinitions(encodedResource)__		}__		if (logger.isTraceEnabled()) {_			logger.trace("Loading Groovy bean definitions from " + encodedResource)__		}__		Closure beans = new Closure(this) {_			@Override_			public Object call(Object[] args) {_				invokeBeanDefiningClosure((Closure) args[0])__				return null__			}_		}__		Binding binding = new Binding() {_			@Override_			public void setVariable(String name, Object value) {_				if (currentBeanDefinition != null) {_					applyPropertyToBeanDefinition(name, value)__				}_				else {_					super.setVariable(name, value)__				}_			}_		}__		binding.setVariable("beans", beans)___		int countBefore = getRegistry().getBeanDefinitionCount()__		try {_			GroovyShell shell = new GroovyShell(getBeanClassLoader(), binding)__			shell.evaluate(encodedResource.getReader(), "beans")__		}_		catch (Throwable ex) {_			throw new BeanDefinitionParsingException(new Problem("Error evaluating Groovy script: " + ex.getMessage(),_					new Location(encodedResource.getResource()), null, ex))__		}__		int count = getRegistry().getBeanDefinitionCount() - countBefore__		if (logger.isDebugEnabled()) {_			logger.debug("Loaded " + count + " bean definitions from " + encodedResource)__		}_		return count__	};load,bean,definitions,from,the,specified,groovy,script,or,xml,file,p,note,that,code,xml,files,will,be,parsed,as,xml,content,all,other,kinds,of,resources,will,be,parsed,as,groovy,scripts,param,encoded,resource,the,resource,descriptor,for,the,groovy,script,or,xml,file,allowing,specification,of,an,encoding,to,use,for,parsing,the,file,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,load,bean,definitions,encoded,resource,encoded,resource,throws,bean,definition,store,exception,string,filename,encoded,resource,get,resource,get,filename,if,string,utils,ends,with,ignore,case,filename,xml,return,this,standard,xml,bean,definition,reader,load,bean,definitions,encoded,resource,if,logger,is,trace,enabled,logger,trace,loading,groovy,bean,definitions,from,encoded,resource,closure,beans,new,closure,this,override,public,object,call,object,args,invoke,bean,defining,closure,closure,args,0,return,null,binding,binding,new,binding,override,public,void,set,variable,string,name,object,value,if,current,bean,definition,null,apply,property,to,bean,definition,name,value,else,super,set,variable,name,value,binding,set,variable,beans,beans,int,count,before,get,registry,get,bean,definition,count,try,groovy,shell,shell,new,groovy,shell,get,bean,class,loader,binding,shell,evaluate,encoded,resource,get,reader,beans,catch,throwable,ex,throw,new,bean,definition,parsing,exception,new,problem,error,evaluating,groovy,script,ex,get,message,new,location,encoded,resource,get,resource,null,ex,int,count,get,registry,get,bean,definition,count,count,before,if,logger,is,debug,enabled,logger,debug,loaded,count,bean,definitions,from,encoded,resource,return,count
GroovyBeanDefinitionReader -> public GenericBeanDefinition bean(Class<?> type);1503319306;Define an inner bean definition._@param type the bean type_@return the bean definition;public GenericBeanDefinition bean(Class<?> type) {_		GenericBeanDefinition beanDefinition = new GenericBeanDefinition()__		beanDefinition.setBeanClass(type)__		return beanDefinition__	};define,an,inner,bean,definition,param,type,the,bean,type,return,the,bean,definition;public,generic,bean,definition,bean,class,type,generic,bean,definition,bean,definition,new,generic,bean,definition,bean,definition,set,bean,class,type,return,bean,definition
GroovyBeanDefinitionReader -> public GenericBeanDefinition bean(Class<?> type);1506097334;Define an inner bean definition._@param type the bean type_@return the bean definition;public GenericBeanDefinition bean(Class<?> type) {_		GenericBeanDefinition beanDefinition = new GenericBeanDefinition()__		beanDefinition.setBeanClass(type)__		return beanDefinition__	};define,an,inner,bean,definition,param,type,the,bean,type,return,the,bean,definition;public,generic,bean,definition,bean,class,type,generic,bean,definition,bean,definition,new,generic,bean,definition,bean,definition,set,bean,class,type,return,bean,definition
GroovyBeanDefinitionReader -> public GenericBeanDefinition bean(Class<?> type);1519771074;Define an inner bean definition._@param type the bean type_@return the bean definition;public GenericBeanDefinition bean(Class<?> type) {_		GenericBeanDefinition beanDefinition = new GenericBeanDefinition()__		beanDefinition.setBeanClass(type)__		return beanDefinition__	};define,an,inner,bean,definition,param,type,the,bean,type,return,the,bean,definition;public,generic,bean,definition,bean,class,type,generic,bean,definition,bean,definition,new,generic,bean,definition,bean,definition,set,bean,class,type,return,bean,definition
GroovyBeanDefinitionReader -> public GenericBeanDefinition bean(Class<?> type);1519832519;Define an inner bean definition._@param type the bean type_@return the bean definition;public GenericBeanDefinition bean(Class<?> type) {_		GenericBeanDefinition beanDefinition = new GenericBeanDefinition()__		beanDefinition.setBeanClass(type)__		return beanDefinition__	};define,an,inner,bean,definition,param,type,the,bean,type,return,the,bean,definition;public,generic,bean,definition,bean,class,type,generic,bean,definition,bean,definition,new,generic,bean,definition,bean,definition,set,bean,class,type,return,bean,definition
GroovyBeanDefinitionReader -> public GenericBeanDefinition bean(Class<?> type);1519859718;Define an inner bean definition._@param type the bean type_@return the bean definition;public GenericBeanDefinition bean(Class<?> type) {_		GenericBeanDefinition beanDefinition = new GenericBeanDefinition()__		beanDefinition.setBeanClass(type)__		return beanDefinition__	};define,an,inner,bean,definition,param,type,the,bean,type,return,the,bean,definition;public,generic,bean,definition,bean,class,type,generic,bean,definition,bean,definition,new,generic,bean,definition,bean,definition,set,bean,class,type,return,bean,definition
GroovyBeanDefinitionReader -> public GenericBeanDefinition bean(Class<?> type);1520529117;Define an inner bean definition._@param type the bean type_@return the bean definition;public GenericBeanDefinition bean(Class<?> type) {_		GenericBeanDefinition beanDefinition = new GenericBeanDefinition()__		beanDefinition.setBeanClass(type)__		return beanDefinition__	};define,an,inner,bean,definition,param,type,the,bean,type,return,the,bean,definition;public,generic,bean,definition,bean,class,type,generic,bean,definition,bean,definition,new,generic,bean,definition,bean,definition,set,bean,class,type,return,bean,definition
GroovyBeanDefinitionReader -> public GenericBeanDefinition bean(Class<?> type);1522359230;Define an inner bean definition._@param type the bean type_@return the bean definition;public GenericBeanDefinition bean(Class<?> type) {_		GenericBeanDefinition beanDefinition = new GenericBeanDefinition()__		beanDefinition.setBeanClass(type)__		return beanDefinition__	};define,an,inner,bean,definition,param,type,the,bean,type,return,the,bean,definition;public,generic,bean,definition,bean,class,type,generic,bean,definition,bean,definition,new,generic,bean,definition,bean,definition,set,bean,class,type,return,bean,definition
GroovyBeanDefinitionReader -> public GenericBeanDefinition bean(Class<?> type);1530174524;Define an inner bean definition._@param type the bean type_@return the bean definition;public GenericBeanDefinition bean(Class<?> type) {_		GenericBeanDefinition beanDefinition = new GenericBeanDefinition()__		beanDefinition.setBeanClass(type)__		return beanDefinition__	};define,an,inner,bean,definition,param,type,the,bean,type,return,the,bean,definition;public,generic,bean,definition,bean,class,type,generic,bean,definition,bean,definition,new,generic,bean,definition,bean,definition,set,bean,class,type,return,bean,definition
GroovyBeanDefinitionReader -> public GenericBeanDefinition bean(Class<?> type);1530174524;Define an inner bean definition._@param type the bean type_@return the bean definition;public GenericBeanDefinition bean(Class<?> type) {_		GenericBeanDefinition beanDefinition = new GenericBeanDefinition()__		beanDefinition.setBeanClass(type)__		return beanDefinition__	};define,an,inner,bean,definition,param,type,the,bean,type,return,the,bean,definition;public,generic,bean,definition,bean,class,type,generic,bean,definition,bean,definition,new,generic,bean,definition,bean,definition,set,bean,class,type,return,bean,definition
GroovyBeanDefinitionReader -> public GenericBeanDefinition bean(Class<?> type);1530174524;Define an inner bean definition._@param type the bean type_@return the bean definition;public GenericBeanDefinition bean(Class<?> type) {_		GenericBeanDefinition beanDefinition = new GenericBeanDefinition()__		beanDefinition.setBeanClass(type)__		return beanDefinition__	};define,an,inner,bean,definition,param,type,the,bean,type,return,the,bean,definition;public,generic,bean,definition,bean,class,type,generic,bean,definition,bean,definition,new,generic,bean,definition,bean,definition,set,bean,class,type,return,bean,definition
GroovyBeanDefinitionReader -> public GenericBeanDefinition bean(Class<?> type);1530190293;Define an inner bean definition._@param type the bean type_@return the bean definition;public GenericBeanDefinition bean(Class<?> type) {_		GenericBeanDefinition beanDefinition = new GenericBeanDefinition()__		beanDefinition.setBeanClass(type)__		return beanDefinition__	};define,an,inner,bean,definition,param,type,the,bean,type,return,the,bean,definition;public,generic,bean,definition,bean,class,type,generic,bean,definition,bean,definition,new,generic,bean,definition,bean,definition,set,bean,class,type,return,bean,definition
GroovyBeanDefinitionReader -> public GenericBeanDefinition bean(Class<?> type);1532706365;Define an inner bean definition._@param type the bean type_@return the bean definition;public GenericBeanDefinition bean(Class<?> type) {_		GenericBeanDefinition beanDefinition = new GenericBeanDefinition()__		beanDefinition.setBeanClass(type)__		return beanDefinition__	};define,an,inner,bean,definition,param,type,the,bean,type,return,the,bean,definition;public,generic,bean,definition,bean,class,type,generic,bean,definition,bean,definition,new,generic,bean,definition,bean,definition,set,bean,class,type,return,bean,definition
GroovyBeanDefinitionReader -> public void xmlns(Map<String, String> definition);1503319306;Define a Spring XML namespace definition to use._@param definition the namespace definition;public void xmlns(Map<String, String> definition) {_		if (!definition.isEmpty()) {_			for (Map.Entry<String,String> entry : definition.entrySet()) {_				String namespace = entry.getKey()__				String uri = entry.getValue()__				if (uri == null) {_					throw new IllegalArgumentException("Namespace definition must supply a non-null URI")__				}_				NamespaceHandler namespaceHandler =_						this.groovyDslXmlBeanDefinitionReader.getNamespaceHandlerResolver().resolve(uri)__				if (namespaceHandler == null) {_					throw new BeanDefinitionParsingException(new Problem("No namespace handler found for URI: " + uri,_							new Location(new DescriptiveResource(("Groovy")))))__				}_				this.namespaces.put(namespace, uri)__			}_		}_	};define,a,spring,xml,namespace,definition,to,use,param,definition,the,namespace,definition;public,void,xmlns,map,string,string,definition,if,definition,is,empty,for,map,entry,string,string,entry,definition,entry,set,string,namespace,entry,get,key,string,uri,entry,get,value,if,uri,null,throw,new,illegal,argument,exception,namespace,definition,must,supply,a,non,null,uri,namespace,handler,namespace,handler,this,groovy,dsl,xml,bean,definition,reader,get,namespace,handler,resolver,resolve,uri,if,namespace,handler,null,throw,new,bean,definition,parsing,exception,new,problem,no,namespace,handler,found,for,uri,uri,new,location,new,descriptive,resource,groovy,this,namespaces,put,namespace,uri
GroovyBeanDefinitionReader -> public void xmlns(Map<String, String> definition);1506097334;Define a Spring XML namespace definition to use._@param definition the namespace definition;public void xmlns(Map<String, String> definition) {_		if (!definition.isEmpty()) {_			for (Map.Entry<String,String> entry : definition.entrySet()) {_				String namespace = entry.getKey()__				String uri = entry.getValue()__				if (uri == null) {_					throw new IllegalArgumentException("Namespace definition must supply a non-null URI")__				}_				NamespaceHandler namespaceHandler =_						this.groovyDslXmlBeanDefinitionReader.getNamespaceHandlerResolver().resolve(uri)__				if (namespaceHandler == null) {_					throw new BeanDefinitionParsingException(new Problem("No namespace handler found for URI: " + uri,_							new Location(new DescriptiveResource(("Groovy")))))__				}_				this.namespaces.put(namespace, uri)__			}_		}_	};define,a,spring,xml,namespace,definition,to,use,param,definition,the,namespace,definition;public,void,xmlns,map,string,string,definition,if,definition,is,empty,for,map,entry,string,string,entry,definition,entry,set,string,namespace,entry,get,key,string,uri,entry,get,value,if,uri,null,throw,new,illegal,argument,exception,namespace,definition,must,supply,a,non,null,uri,namespace,handler,namespace,handler,this,groovy,dsl,xml,bean,definition,reader,get,namespace,handler,resolver,resolve,uri,if,namespace,handler,null,throw,new,bean,definition,parsing,exception,new,problem,no,namespace,handler,found,for,uri,uri,new,location,new,descriptive,resource,groovy,this,namespaces,put,namespace,uri
GroovyBeanDefinitionReader -> public void xmlns(Map<String, String> definition);1519771074;Define a Spring XML namespace definition to use._@param definition the namespace definition;public void xmlns(Map<String, String> definition) {_		if (!definition.isEmpty()) {_			for (Map.Entry<String,String> entry : definition.entrySet()) {_				String namespace = entry.getKey()__				String uri = entry.getValue()__				if (uri == null) {_					throw new IllegalArgumentException("Namespace definition must supply a non-null URI")__				}_				NamespaceHandler namespaceHandler =_						this.groovyDslXmlBeanDefinitionReader.getNamespaceHandlerResolver().resolve(uri)__				if (namespaceHandler == null) {_					throw new BeanDefinitionParsingException(new Problem("No namespace handler found for URI: " + uri,_							new Location(new DescriptiveResource(("Groovy")))))__				}_				this.namespaces.put(namespace, uri)__			}_		}_	};define,a,spring,xml,namespace,definition,to,use,param,definition,the,namespace,definition;public,void,xmlns,map,string,string,definition,if,definition,is,empty,for,map,entry,string,string,entry,definition,entry,set,string,namespace,entry,get,key,string,uri,entry,get,value,if,uri,null,throw,new,illegal,argument,exception,namespace,definition,must,supply,a,non,null,uri,namespace,handler,namespace,handler,this,groovy,dsl,xml,bean,definition,reader,get,namespace,handler,resolver,resolve,uri,if,namespace,handler,null,throw,new,bean,definition,parsing,exception,new,problem,no,namespace,handler,found,for,uri,uri,new,location,new,descriptive,resource,groovy,this,namespaces,put,namespace,uri
GroovyBeanDefinitionReader -> public void xmlns(Map<String, String> definition);1519832519;Define a Spring XML namespace definition to use._@param definition the namespace definition;public void xmlns(Map<String, String> definition) {_		if (!definition.isEmpty()) {_			for (Map.Entry<String,String> entry : definition.entrySet()) {_				String namespace = entry.getKey()__				String uri = entry.getValue()__				if (uri == null) {_					throw new IllegalArgumentException("Namespace definition must supply a non-null URI")__				}_				NamespaceHandler namespaceHandler =_						this.groovyDslXmlBeanDefinitionReader.getNamespaceHandlerResolver().resolve(uri)__				if (namespaceHandler == null) {_					throw new BeanDefinitionParsingException(new Problem("No namespace handler found for URI: " + uri,_							new Location(new DescriptiveResource(("Groovy")))))__				}_				this.namespaces.put(namespace, uri)__			}_		}_	};define,a,spring,xml,namespace,definition,to,use,param,definition,the,namespace,definition;public,void,xmlns,map,string,string,definition,if,definition,is,empty,for,map,entry,string,string,entry,definition,entry,set,string,namespace,entry,get,key,string,uri,entry,get,value,if,uri,null,throw,new,illegal,argument,exception,namespace,definition,must,supply,a,non,null,uri,namespace,handler,namespace,handler,this,groovy,dsl,xml,bean,definition,reader,get,namespace,handler,resolver,resolve,uri,if,namespace,handler,null,throw,new,bean,definition,parsing,exception,new,problem,no,namespace,handler,found,for,uri,uri,new,location,new,descriptive,resource,groovy,this,namespaces,put,namespace,uri
GroovyBeanDefinitionReader -> public void xmlns(Map<String, String> definition);1519859718;Define a Spring XML namespace definition to use._@param definition the namespace definition;public void xmlns(Map<String, String> definition) {_		if (!definition.isEmpty()) {_			for (Map.Entry<String,String> entry : definition.entrySet()) {_				String namespace = entry.getKey()__				String uri = entry.getValue()__				if (uri == null) {_					throw new IllegalArgumentException("Namespace definition must supply a non-null URI")__				}_				NamespaceHandler namespaceHandler =_						this.groovyDslXmlBeanDefinitionReader.getNamespaceHandlerResolver().resolve(uri)__				if (namespaceHandler == null) {_					throw new BeanDefinitionParsingException(new Problem("No namespace handler found for URI: " + uri,_							new Location(new DescriptiveResource(("Groovy")))))__				}_				this.namespaces.put(namespace, uri)__			}_		}_	};define,a,spring,xml,namespace,definition,to,use,param,definition,the,namespace,definition;public,void,xmlns,map,string,string,definition,if,definition,is,empty,for,map,entry,string,string,entry,definition,entry,set,string,namespace,entry,get,key,string,uri,entry,get,value,if,uri,null,throw,new,illegal,argument,exception,namespace,definition,must,supply,a,non,null,uri,namespace,handler,namespace,handler,this,groovy,dsl,xml,bean,definition,reader,get,namespace,handler,resolver,resolve,uri,if,namespace,handler,null,throw,new,bean,definition,parsing,exception,new,problem,no,namespace,handler,found,for,uri,uri,new,location,new,descriptive,resource,groovy,this,namespaces,put,namespace,uri
GroovyBeanDefinitionReader -> public void xmlns(Map<String, String> definition);1520529117;Define a Spring XML namespace definition to use._@param definition the namespace definition;public void xmlns(Map<String, String> definition) {_		if (!definition.isEmpty()) {_			for (Map.Entry<String,String> entry : definition.entrySet()) {_				String namespace = entry.getKey()__				String uri = entry.getValue()__				if (uri == null) {_					throw new IllegalArgumentException("Namespace definition must supply a non-null URI")__				}_				NamespaceHandler namespaceHandler =_						this.groovyDslXmlBeanDefinitionReader.getNamespaceHandlerResolver().resolve(uri)__				if (namespaceHandler == null) {_					throw new BeanDefinitionParsingException(new Problem("No namespace handler found for URI: " + uri,_							new Location(new DescriptiveResource(("Groovy")))))__				}_				this.namespaces.put(namespace, uri)__			}_		}_	};define,a,spring,xml,namespace,definition,to,use,param,definition,the,namespace,definition;public,void,xmlns,map,string,string,definition,if,definition,is,empty,for,map,entry,string,string,entry,definition,entry,set,string,namespace,entry,get,key,string,uri,entry,get,value,if,uri,null,throw,new,illegal,argument,exception,namespace,definition,must,supply,a,non,null,uri,namespace,handler,namespace,handler,this,groovy,dsl,xml,bean,definition,reader,get,namespace,handler,resolver,resolve,uri,if,namespace,handler,null,throw,new,bean,definition,parsing,exception,new,problem,no,namespace,handler,found,for,uri,uri,new,location,new,descriptive,resource,groovy,this,namespaces,put,namespace,uri
GroovyBeanDefinitionReader -> public void xmlns(Map<String, String> definition);1522359230;Define a Spring XML namespace definition to use._@param definition the namespace definition;public void xmlns(Map<String, String> definition) {_		if (!definition.isEmpty()) {_			for (Map.Entry<String,String> entry : definition.entrySet()) {_				String namespace = entry.getKey()__				String uri = entry.getValue()__				if (uri == null) {_					throw new IllegalArgumentException("Namespace definition must supply a non-null URI")__				}_				NamespaceHandler namespaceHandler =_						this.groovyDslXmlBeanDefinitionReader.getNamespaceHandlerResolver().resolve(uri)__				if (namespaceHandler == null) {_					throw new BeanDefinitionParsingException(new Problem("No namespace handler found for URI: " + uri,_							new Location(new DescriptiveResource(("Groovy")))))__				}_				this.namespaces.put(namespace, uri)__			}_		}_	};define,a,spring,xml,namespace,definition,to,use,param,definition,the,namespace,definition;public,void,xmlns,map,string,string,definition,if,definition,is,empty,for,map,entry,string,string,entry,definition,entry,set,string,namespace,entry,get,key,string,uri,entry,get,value,if,uri,null,throw,new,illegal,argument,exception,namespace,definition,must,supply,a,non,null,uri,namespace,handler,namespace,handler,this,groovy,dsl,xml,bean,definition,reader,get,namespace,handler,resolver,resolve,uri,if,namespace,handler,null,throw,new,bean,definition,parsing,exception,new,problem,no,namespace,handler,found,for,uri,uri,new,location,new,descriptive,resource,groovy,this,namespaces,put,namespace,uri
GroovyBeanDefinitionReader -> public void xmlns(Map<String, String> definition);1530174524;Define a Spring XML namespace definition to use._@param definition the namespace definition;public void xmlns(Map<String, String> definition) {_		if (!definition.isEmpty()) {_			for (Map.Entry<String,String> entry : definition.entrySet()) {_				String namespace = entry.getKey()__				String uri = entry.getValue()__				if (uri == null) {_					throw new IllegalArgumentException("Namespace definition must supply a non-null URI")__				}_				NamespaceHandler namespaceHandler =_						this.groovyDslXmlBeanDefinitionReader.getNamespaceHandlerResolver().resolve(uri)__				if (namespaceHandler == null) {_					throw new BeanDefinitionParsingException(new Problem("No namespace handler found for URI: " + uri,_							new Location(new DescriptiveResource(("Groovy")))))__				}_				this.namespaces.put(namespace, uri)__			}_		}_	};define,a,spring,xml,namespace,definition,to,use,param,definition,the,namespace,definition;public,void,xmlns,map,string,string,definition,if,definition,is,empty,for,map,entry,string,string,entry,definition,entry,set,string,namespace,entry,get,key,string,uri,entry,get,value,if,uri,null,throw,new,illegal,argument,exception,namespace,definition,must,supply,a,non,null,uri,namespace,handler,namespace,handler,this,groovy,dsl,xml,bean,definition,reader,get,namespace,handler,resolver,resolve,uri,if,namespace,handler,null,throw,new,bean,definition,parsing,exception,new,problem,no,namespace,handler,found,for,uri,uri,new,location,new,descriptive,resource,groovy,this,namespaces,put,namespace,uri
GroovyBeanDefinitionReader -> public void xmlns(Map<String, String> definition);1530174524;Define a Spring XML namespace definition to use._@param definition the namespace definition;public void xmlns(Map<String, String> definition) {_		if (!definition.isEmpty()) {_			for (Map.Entry<String,String> entry : definition.entrySet()) {_				String namespace = entry.getKey()__				String uri = entry.getValue()__				if (uri == null) {_					throw new IllegalArgumentException("Namespace definition must supply a non-null URI")__				}_				NamespaceHandler namespaceHandler =_						this.groovyDslXmlBeanDefinitionReader.getNamespaceHandlerResolver().resolve(uri)__				if (namespaceHandler == null) {_					throw new BeanDefinitionParsingException(new Problem("No namespace handler found for URI: " + uri,_							new Location(new DescriptiveResource(("Groovy")))))__				}_				this.namespaces.put(namespace, uri)__			}_		}_	};define,a,spring,xml,namespace,definition,to,use,param,definition,the,namespace,definition;public,void,xmlns,map,string,string,definition,if,definition,is,empty,for,map,entry,string,string,entry,definition,entry,set,string,namespace,entry,get,key,string,uri,entry,get,value,if,uri,null,throw,new,illegal,argument,exception,namespace,definition,must,supply,a,non,null,uri,namespace,handler,namespace,handler,this,groovy,dsl,xml,bean,definition,reader,get,namespace,handler,resolver,resolve,uri,if,namespace,handler,null,throw,new,bean,definition,parsing,exception,new,problem,no,namespace,handler,found,for,uri,uri,new,location,new,descriptive,resource,groovy,this,namespaces,put,namespace,uri
GroovyBeanDefinitionReader -> public void xmlns(Map<String, String> definition);1530174524;Define a Spring XML namespace definition to use._@param definition the namespace definition;public void xmlns(Map<String, String> definition) {_		if (!definition.isEmpty()) {_			for (Map.Entry<String,String> entry : definition.entrySet()) {_				String namespace = entry.getKey()__				String uri = entry.getValue()__				if (uri == null) {_					throw new IllegalArgumentException("Namespace definition must supply a non-null URI")__				}_				NamespaceHandler namespaceHandler =_						this.groovyDslXmlBeanDefinitionReader.getNamespaceHandlerResolver().resolve(uri)__				if (namespaceHandler == null) {_					throw new BeanDefinitionParsingException(new Problem("No namespace handler found for URI: " + uri,_							new Location(new DescriptiveResource(("Groovy")))))__				}_				this.namespaces.put(namespace, uri)__			}_		}_	};define,a,spring,xml,namespace,definition,to,use,param,definition,the,namespace,definition;public,void,xmlns,map,string,string,definition,if,definition,is,empty,for,map,entry,string,string,entry,definition,entry,set,string,namespace,entry,get,key,string,uri,entry,get,value,if,uri,null,throw,new,illegal,argument,exception,namespace,definition,must,supply,a,non,null,uri,namespace,handler,namespace,handler,this,groovy,dsl,xml,bean,definition,reader,get,namespace,handler,resolver,resolve,uri,if,namespace,handler,null,throw,new,bean,definition,parsing,exception,new,problem,no,namespace,handler,found,for,uri,uri,new,location,new,descriptive,resource,groovy,this,namespaces,put,namespace,uri
GroovyBeanDefinitionReader -> public void xmlns(Map<String, String> definition);1530190293;Define a Spring XML namespace definition to use._@param definition the namespace definition;public void xmlns(Map<String, String> definition) {_		if (!definition.isEmpty()) {_			for (Map.Entry<String,String> entry : definition.entrySet()) {_				String namespace = entry.getKey()__				String uri = entry.getValue()__				if (uri == null) {_					throw new IllegalArgumentException("Namespace definition must supply a non-null URI")__				}_				NamespaceHandler namespaceHandler =_						this.groovyDslXmlBeanDefinitionReader.getNamespaceHandlerResolver().resolve(uri)__				if (namespaceHandler == null) {_					throw new BeanDefinitionParsingException(new Problem("No namespace handler found for URI: " + uri,_							new Location(new DescriptiveResource(("Groovy")))))__				}_				this.namespaces.put(namespace, uri)__			}_		}_	};define,a,spring,xml,namespace,definition,to,use,param,definition,the,namespace,definition;public,void,xmlns,map,string,string,definition,if,definition,is,empty,for,map,entry,string,string,entry,definition,entry,set,string,namespace,entry,get,key,string,uri,entry,get,value,if,uri,null,throw,new,illegal,argument,exception,namespace,definition,must,supply,a,non,null,uri,namespace,handler,namespace,handler,this,groovy,dsl,xml,bean,definition,reader,get,namespace,handler,resolver,resolve,uri,if,namespace,handler,null,throw,new,bean,definition,parsing,exception,new,problem,no,namespace,handler,found,for,uri,uri,new,location,new,descriptive,resource,groovy,this,namespaces,put,namespace,uri
GroovyBeanDefinitionReader -> public void xmlns(Map<String, String> definition);1532706365;Define a Spring XML namespace definition to use._@param definition the namespace definition;public void xmlns(Map<String, String> definition) {_		if (!definition.isEmpty()) {_			for (Map.Entry<String,String> entry : definition.entrySet()) {_				String namespace = entry.getKey()__				String uri = entry.getValue()__				if (uri == null) {_					throw new IllegalArgumentException("Namespace definition must supply a non-null URI")__				}_				NamespaceHandler namespaceHandler =_						this.groovyDslXmlBeanDefinitionReader.getNamespaceHandlerResolver().resolve(uri)__				if (namespaceHandler == null) {_					throw new BeanDefinitionParsingException(new Problem("No namespace handler found for URI: " + uri,_							new Location(new DescriptiveResource(("Groovy")))))__				}_				this.namespaces.put(namespace, uri)__			}_		}_	};define,a,spring,xml,namespace,definition,to,use,param,definition,the,namespace,definition;public,void,xmlns,map,string,string,definition,if,definition,is,empty,for,map,entry,string,string,entry,definition,entry,set,string,namespace,entry,get,key,string,uri,entry,get,value,if,uri,null,throw,new,illegal,argument,exception,namespace,definition,must,supply,a,non,null,uri,namespace,handler,namespace,handler,this,groovy,dsl,xml,bean,definition,reader,get,namespace,handler,resolver,resolve,uri,if,namespace,handler,null,throw,new,bean,definition,parsing,exception,new,problem,no,namespace,handler,found,for,uri,uri,new,location,new,descriptive,resource,groovy,this,namespaces,put,namespace,uri
GroovyBeanDefinitionReader -> private Object manageMapIfNecessary(Map<?, ?> map);1503319306;Checks whether there are any {@link RuntimeBeanReference}s inside the {@link Map}_and converts it to a {@link ManagedMap} if necessary._@param map the original Map_@return either the original map or a managed copy of it;private Object manageMapIfNecessary(Map<?, ?> map) {_		boolean containsRuntimeRefs = false__		for (Object element : map.values()) {_			if (element instanceof RuntimeBeanReference) {_				containsRuntimeRefs = true__				break__			}_		}_		if (containsRuntimeRefs) {_			Map<Object, Object> managedMap = new ManagedMap<>()__			managedMap.putAll(map)__			return managedMap__		}_		return map__	};checks,whether,there,are,any,link,runtime,bean,reference,s,inside,the,link,map,and,converts,it,to,a,link,managed,map,if,necessary,param,map,the,original,map,return,either,the,original,map,or,a,managed,copy,of,it;private,object,manage,map,if,necessary,map,map,boolean,contains,runtime,refs,false,for,object,element,map,values,if,element,instanceof,runtime,bean,reference,contains,runtime,refs,true,break,if,contains,runtime,refs,map,object,object,managed,map,new,managed,map,managed,map,put,all,map,return,managed,map,return,map
GroovyBeanDefinitionReader -> private Object manageMapIfNecessary(Map<?, ?> map);1506097334;Checks whether there are any {@link RuntimeBeanReference}s inside the {@link Map}_and converts it to a {@link ManagedMap} if necessary._@param map the original Map_@return either the original map or a managed copy of it;private Object manageMapIfNecessary(Map<?, ?> map) {_		boolean containsRuntimeRefs = false__		for (Object element : map.values()) {_			if (element instanceof RuntimeBeanReference) {_				containsRuntimeRefs = true__				break__			}_		}_		if (containsRuntimeRefs) {_			Map<Object, Object> managedMap = new ManagedMap<>()__			managedMap.putAll(map)__			return managedMap__		}_		return map__	};checks,whether,there,are,any,link,runtime,bean,reference,s,inside,the,link,map,and,converts,it,to,a,link,managed,map,if,necessary,param,map,the,original,map,return,either,the,original,map,or,a,managed,copy,of,it;private,object,manage,map,if,necessary,map,map,boolean,contains,runtime,refs,false,for,object,element,map,values,if,element,instanceof,runtime,bean,reference,contains,runtime,refs,true,break,if,contains,runtime,refs,map,object,object,managed,map,new,managed,map,managed,map,put,all,map,return,managed,map,return,map
GroovyBeanDefinitionReader -> private Object manageMapIfNecessary(Map<?, ?> map);1519771074;Checks whether there are any {@link RuntimeBeanReference}s inside the {@link Map}_and converts it to a {@link ManagedMap} if necessary._@param map the original Map_@return either the original map or a managed copy of it;private Object manageMapIfNecessary(Map<?, ?> map) {_		boolean containsRuntimeRefs = false__		for (Object element : map.values()) {_			if (element instanceof RuntimeBeanReference) {_				containsRuntimeRefs = true__				break__			}_		}_		if (containsRuntimeRefs) {_			Map<Object, Object> managedMap = new ManagedMap<>()__			managedMap.putAll(map)__			return managedMap__		}_		return map__	};checks,whether,there,are,any,link,runtime,bean,reference,s,inside,the,link,map,and,converts,it,to,a,link,managed,map,if,necessary,param,map,the,original,map,return,either,the,original,map,or,a,managed,copy,of,it;private,object,manage,map,if,necessary,map,map,boolean,contains,runtime,refs,false,for,object,element,map,values,if,element,instanceof,runtime,bean,reference,contains,runtime,refs,true,break,if,contains,runtime,refs,map,object,object,managed,map,new,managed,map,managed,map,put,all,map,return,managed,map,return,map
GroovyBeanDefinitionReader -> private Object manageMapIfNecessary(Map<?, ?> map);1519832519;Checks whether there are any {@link RuntimeBeanReference}s inside the {@link Map}_and converts it to a {@link ManagedMap} if necessary._@param map the original Map_@return either the original map or a managed copy of it;private Object manageMapIfNecessary(Map<?, ?> map) {_		boolean containsRuntimeRefs = false__		for (Object element : map.values()) {_			if (element instanceof RuntimeBeanReference) {_				containsRuntimeRefs = true__				break__			}_		}_		if (containsRuntimeRefs) {_			Map<Object, Object> managedMap = new ManagedMap<>()__			managedMap.putAll(map)__			return managedMap__		}_		return map__	};checks,whether,there,are,any,link,runtime,bean,reference,s,inside,the,link,map,and,converts,it,to,a,link,managed,map,if,necessary,param,map,the,original,map,return,either,the,original,map,or,a,managed,copy,of,it;private,object,manage,map,if,necessary,map,map,boolean,contains,runtime,refs,false,for,object,element,map,values,if,element,instanceof,runtime,bean,reference,contains,runtime,refs,true,break,if,contains,runtime,refs,map,object,object,managed,map,new,managed,map,managed,map,put,all,map,return,managed,map,return,map
GroovyBeanDefinitionReader -> private Object manageMapIfNecessary(Map<?, ?> map);1519859718;Checks whether there are any {@link RuntimeBeanReference}s inside the {@link Map}_and converts it to a {@link ManagedMap} if necessary._@param map the original Map_@return either the original map or a managed copy of it;private Object manageMapIfNecessary(Map<?, ?> map) {_		boolean containsRuntimeRefs = false__		for (Object element : map.values()) {_			if (element instanceof RuntimeBeanReference) {_				containsRuntimeRefs = true__				break__			}_		}_		if (containsRuntimeRefs) {_			Map<Object, Object> managedMap = new ManagedMap<>()__			managedMap.putAll(map)__			return managedMap__		}_		return map__	};checks,whether,there,are,any,link,runtime,bean,reference,s,inside,the,link,map,and,converts,it,to,a,link,managed,map,if,necessary,param,map,the,original,map,return,either,the,original,map,or,a,managed,copy,of,it;private,object,manage,map,if,necessary,map,map,boolean,contains,runtime,refs,false,for,object,element,map,values,if,element,instanceof,runtime,bean,reference,contains,runtime,refs,true,break,if,contains,runtime,refs,map,object,object,managed,map,new,managed,map,managed,map,put,all,map,return,managed,map,return,map
GroovyBeanDefinitionReader -> private Object manageMapIfNecessary(Map<?, ?> map);1520529117;Checks whether there are any {@link RuntimeBeanReference}s inside the {@link Map}_and converts it to a {@link ManagedMap} if necessary._@param map the original Map_@return either the original map or a managed copy of it;private Object manageMapIfNecessary(Map<?, ?> map) {_		boolean containsRuntimeRefs = false__		for (Object element : map.values()) {_			if (element instanceof RuntimeBeanReference) {_				containsRuntimeRefs = true__				break__			}_		}_		if (containsRuntimeRefs) {_			Map<Object, Object> managedMap = new ManagedMap<>()__			managedMap.putAll(map)__			return managedMap__		}_		return map__	};checks,whether,there,are,any,link,runtime,bean,reference,s,inside,the,link,map,and,converts,it,to,a,link,managed,map,if,necessary,param,map,the,original,map,return,either,the,original,map,or,a,managed,copy,of,it;private,object,manage,map,if,necessary,map,map,boolean,contains,runtime,refs,false,for,object,element,map,values,if,element,instanceof,runtime,bean,reference,contains,runtime,refs,true,break,if,contains,runtime,refs,map,object,object,managed,map,new,managed,map,managed,map,put,all,map,return,managed,map,return,map
GroovyBeanDefinitionReader -> private Object manageMapIfNecessary(Map<?, ?> map);1522359230;Checks whether there are any {@link RuntimeBeanReference}s inside the {@link Map}_and converts it to a {@link ManagedMap} if necessary._@param map the original Map_@return either the original map or a managed copy of it;private Object manageMapIfNecessary(Map<?, ?> map) {_		boolean containsRuntimeRefs = false__		for (Object element : map.values()) {_			if (element instanceof RuntimeBeanReference) {_				containsRuntimeRefs = true__				break__			}_		}_		if (containsRuntimeRefs) {_			Map<Object, Object> managedMap = new ManagedMap<>()__			managedMap.putAll(map)__			return managedMap__		}_		return map__	};checks,whether,there,are,any,link,runtime,bean,reference,s,inside,the,link,map,and,converts,it,to,a,link,managed,map,if,necessary,param,map,the,original,map,return,either,the,original,map,or,a,managed,copy,of,it;private,object,manage,map,if,necessary,map,map,boolean,contains,runtime,refs,false,for,object,element,map,values,if,element,instanceof,runtime,bean,reference,contains,runtime,refs,true,break,if,contains,runtime,refs,map,object,object,managed,map,new,managed,map,managed,map,put,all,map,return,managed,map,return,map
GroovyBeanDefinitionReader -> private Object manageMapIfNecessary(Map<?, ?> map);1530174524;Checks whether there are any {@link RuntimeBeanReference RuntimeBeanReferences}_inside the {@link Map} and converts it to a {@link ManagedMap} if necessary._@param map the original Map_@return either the original map or a managed copy of it;private Object manageMapIfNecessary(Map<?, ?> map) {_		boolean containsRuntimeRefs = false__		for (Object element : map.values()) {_			if (element instanceof RuntimeBeanReference) {_				containsRuntimeRefs = true__				break__			}_		}_		if (containsRuntimeRefs) {_			Map<Object, Object> managedMap = new ManagedMap<>()__			managedMap.putAll(map)__			return managedMap__		}_		return map__	};checks,whether,there,are,any,link,runtime,bean,reference,runtime,bean,references,inside,the,link,map,and,converts,it,to,a,link,managed,map,if,necessary,param,map,the,original,map,return,either,the,original,map,or,a,managed,copy,of,it;private,object,manage,map,if,necessary,map,map,boolean,contains,runtime,refs,false,for,object,element,map,values,if,element,instanceof,runtime,bean,reference,contains,runtime,refs,true,break,if,contains,runtime,refs,map,object,object,managed,map,new,managed,map,managed,map,put,all,map,return,managed,map,return,map
GroovyBeanDefinitionReader -> private Object manageMapIfNecessary(Map<?, ?> map);1530174524;Checks whether there are any {@link RuntimeBeanReference RuntimeBeanReferences}_inside the {@link Map} and converts it to a {@link ManagedMap} if necessary._@param map the original Map_@return either the original map or a managed copy of it;private Object manageMapIfNecessary(Map<?, ?> map) {_		boolean containsRuntimeRefs = false__		for (Object element : map.values()) {_			if (element instanceof RuntimeBeanReference) {_				containsRuntimeRefs = true__				break__			}_		}_		if (containsRuntimeRefs) {_			Map<Object, Object> managedMap = new ManagedMap<>()__			managedMap.putAll(map)__			return managedMap__		}_		return map__	};checks,whether,there,are,any,link,runtime,bean,reference,runtime,bean,references,inside,the,link,map,and,converts,it,to,a,link,managed,map,if,necessary,param,map,the,original,map,return,either,the,original,map,or,a,managed,copy,of,it;private,object,manage,map,if,necessary,map,map,boolean,contains,runtime,refs,false,for,object,element,map,values,if,element,instanceof,runtime,bean,reference,contains,runtime,refs,true,break,if,contains,runtime,refs,map,object,object,managed,map,new,managed,map,managed,map,put,all,map,return,managed,map,return,map
GroovyBeanDefinitionReader -> private Object manageMapIfNecessary(Map<?, ?> map);1530174524;Checks whether there are any {@link RuntimeBeanReference RuntimeBeanReferences}_inside the {@link Map} and converts it to a {@link ManagedMap} if necessary._@param map the original Map_@return either the original map or a managed copy of it;private Object manageMapIfNecessary(Map<?, ?> map) {_		boolean containsRuntimeRefs = false__		for (Object element : map.values()) {_			if (element instanceof RuntimeBeanReference) {_				containsRuntimeRefs = true__				break__			}_		}_		if (containsRuntimeRefs) {_			Map<Object, Object> managedMap = new ManagedMap<>()__			managedMap.putAll(map)__			return managedMap__		}_		return map__	};checks,whether,there,are,any,link,runtime,bean,reference,runtime,bean,references,inside,the,link,map,and,converts,it,to,a,link,managed,map,if,necessary,param,map,the,original,map,return,either,the,original,map,or,a,managed,copy,of,it;private,object,manage,map,if,necessary,map,map,boolean,contains,runtime,refs,false,for,object,element,map,values,if,element,instanceof,runtime,bean,reference,contains,runtime,refs,true,break,if,contains,runtime,refs,map,object,object,managed,map,new,managed,map,managed,map,put,all,map,return,managed,map,return,map
GroovyBeanDefinitionReader -> private Object manageMapIfNecessary(Map<?, ?> map);1530190293;Checks whether there are any {@link RuntimeBeanReference RuntimeBeanReferences}_inside the {@link Map} and converts it to a {@link ManagedMap} if necessary._@param map the original Map_@return either the original map or a managed copy of it;private Object manageMapIfNecessary(Map<?, ?> map) {_		boolean containsRuntimeRefs = false__		for (Object element : map.values()) {_			if (element instanceof RuntimeBeanReference) {_				containsRuntimeRefs = true__				break__			}_		}_		if (containsRuntimeRefs) {_			Map<Object, Object> managedMap = new ManagedMap<>()__			managedMap.putAll(map)__			return managedMap__		}_		return map__	};checks,whether,there,are,any,link,runtime,bean,reference,runtime,bean,references,inside,the,link,map,and,converts,it,to,a,link,managed,map,if,necessary,param,map,the,original,map,return,either,the,original,map,or,a,managed,copy,of,it;private,object,manage,map,if,necessary,map,map,boolean,contains,runtime,refs,false,for,object,element,map,values,if,element,instanceof,runtime,bean,reference,contains,runtime,refs,true,break,if,contains,runtime,refs,map,object,object,managed,map,new,managed,map,managed,map,put,all,map,return,managed,map,return,map
GroovyBeanDefinitionReader -> private Object manageMapIfNecessary(Map<?, ?> map);1532706365;Checks whether there are any {@link RuntimeBeanReference RuntimeBeanReferences}_inside the {@link Map} and converts it to a {@link ManagedMap} if necessary._@param map the original Map_@return either the original map or a managed copy of it;private Object manageMapIfNecessary(Map<?, ?> map) {_		boolean containsRuntimeRefs = false__		for (Object element : map.values()) {_			if (element instanceof RuntimeBeanReference) {_				containsRuntimeRefs = true__				break__			}_		}_		if (containsRuntimeRefs) {_			Map<Object, Object> managedMap = new ManagedMap<>()__			managedMap.putAll(map)__			return managedMap__		}_		return map__	};checks,whether,there,are,any,link,runtime,bean,reference,runtime,bean,references,inside,the,link,map,and,converts,it,to,a,link,managed,map,if,necessary,param,map,the,original,map,return,either,the,original,map,or,a,managed,copy,of,it;private,object,manage,map,if,necessary,map,map,boolean,contains,runtime,refs,false,for,object,element,map,values,if,element,instanceof,runtime,bean,reference,contains,runtime,refs,true,break,if,contains,runtime,refs,map,object,object,managed,map,new,managed,map,managed,map,put,all,map,return,managed,map,return,map
GroovyBeanDefinitionReader -> public int loadBeanDefinitions(Resource resource) throws BeanDefinitionStoreException;1503319306;Load bean definitions from the specified Groovy script or XML file._<p>Note that {@code ".xml"} files will be parsed as XML content_ all other kinds_of resources will be parsed as Groovy scripts._@param resource the resource descriptor for the Groovy script or XML file_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int loadBeanDefinitions(Resource resource) throws BeanDefinitionStoreException {_		return loadBeanDefinitions(new EncodedResource(resource))__	};load,bean,definitions,from,the,specified,groovy,script,or,xml,file,p,note,that,code,xml,files,will,be,parsed,as,xml,content,all,other,kinds,of,resources,will,be,parsed,as,groovy,scripts,param,resource,the,resource,descriptor,for,the,groovy,script,or,xml,file,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,load,bean,definitions,resource,resource,throws,bean,definition,store,exception,return,load,bean,definitions,new,encoded,resource,resource
GroovyBeanDefinitionReader -> public int loadBeanDefinitions(Resource resource) throws BeanDefinitionStoreException;1506097334;Load bean definitions from the specified Groovy script or XML file._<p>Note that {@code ".xml"} files will be parsed as XML content_ all other kinds_of resources will be parsed as Groovy scripts._@param resource the resource descriptor for the Groovy script or XML file_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int loadBeanDefinitions(Resource resource) throws BeanDefinitionStoreException {_		return loadBeanDefinitions(new EncodedResource(resource))__	};load,bean,definitions,from,the,specified,groovy,script,or,xml,file,p,note,that,code,xml,files,will,be,parsed,as,xml,content,all,other,kinds,of,resources,will,be,parsed,as,groovy,scripts,param,resource,the,resource,descriptor,for,the,groovy,script,or,xml,file,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,load,bean,definitions,resource,resource,throws,bean,definition,store,exception,return,load,bean,definitions,new,encoded,resource,resource
GroovyBeanDefinitionReader -> public int loadBeanDefinitions(Resource resource) throws BeanDefinitionStoreException;1519771074;Load bean definitions from the specified Groovy script or XML file._<p>Note that {@code ".xml"} files will be parsed as XML content_ all other kinds_of resources will be parsed as Groovy scripts._@param resource the resource descriptor for the Groovy script or XML file_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int loadBeanDefinitions(Resource resource) throws BeanDefinitionStoreException {_		return loadBeanDefinitions(new EncodedResource(resource))__	};load,bean,definitions,from,the,specified,groovy,script,or,xml,file,p,note,that,code,xml,files,will,be,parsed,as,xml,content,all,other,kinds,of,resources,will,be,parsed,as,groovy,scripts,param,resource,the,resource,descriptor,for,the,groovy,script,or,xml,file,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,load,bean,definitions,resource,resource,throws,bean,definition,store,exception,return,load,bean,definitions,new,encoded,resource,resource
GroovyBeanDefinitionReader -> public int loadBeanDefinitions(Resource resource) throws BeanDefinitionStoreException;1519832519;Load bean definitions from the specified Groovy script or XML file._<p>Note that {@code ".xml"} files will be parsed as XML content_ all other kinds_of resources will be parsed as Groovy scripts._@param resource the resource descriptor for the Groovy script or XML file_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int loadBeanDefinitions(Resource resource) throws BeanDefinitionStoreException {_		return loadBeanDefinitions(new EncodedResource(resource))__	};load,bean,definitions,from,the,specified,groovy,script,or,xml,file,p,note,that,code,xml,files,will,be,parsed,as,xml,content,all,other,kinds,of,resources,will,be,parsed,as,groovy,scripts,param,resource,the,resource,descriptor,for,the,groovy,script,or,xml,file,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,load,bean,definitions,resource,resource,throws,bean,definition,store,exception,return,load,bean,definitions,new,encoded,resource,resource
GroovyBeanDefinitionReader -> public int loadBeanDefinitions(Resource resource) throws BeanDefinitionStoreException;1519859718;Load bean definitions from the specified Groovy script or XML file._<p>Note that {@code ".xml"} files will be parsed as XML content_ all other kinds_of resources will be parsed as Groovy scripts._@param resource the resource descriptor for the Groovy script or XML file_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int loadBeanDefinitions(Resource resource) throws BeanDefinitionStoreException {_		return loadBeanDefinitions(new EncodedResource(resource))__	};load,bean,definitions,from,the,specified,groovy,script,or,xml,file,p,note,that,code,xml,files,will,be,parsed,as,xml,content,all,other,kinds,of,resources,will,be,parsed,as,groovy,scripts,param,resource,the,resource,descriptor,for,the,groovy,script,or,xml,file,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,load,bean,definitions,resource,resource,throws,bean,definition,store,exception,return,load,bean,definitions,new,encoded,resource,resource
GroovyBeanDefinitionReader -> public int loadBeanDefinitions(Resource resource) throws BeanDefinitionStoreException;1520529117;Load bean definitions from the specified Groovy script or XML file._<p>Note that {@code ".xml"} files will be parsed as XML content_ all other kinds_of resources will be parsed as Groovy scripts._@param resource the resource descriptor for the Groovy script or XML file_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int loadBeanDefinitions(Resource resource) throws BeanDefinitionStoreException {_		return loadBeanDefinitions(new EncodedResource(resource))__	};load,bean,definitions,from,the,specified,groovy,script,or,xml,file,p,note,that,code,xml,files,will,be,parsed,as,xml,content,all,other,kinds,of,resources,will,be,parsed,as,groovy,scripts,param,resource,the,resource,descriptor,for,the,groovy,script,or,xml,file,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,load,bean,definitions,resource,resource,throws,bean,definition,store,exception,return,load,bean,definitions,new,encoded,resource,resource
GroovyBeanDefinitionReader -> public int loadBeanDefinitions(Resource resource) throws BeanDefinitionStoreException;1522359230;Load bean definitions from the specified Groovy script or XML file._<p>Note that {@code ".xml"} files will be parsed as XML content_ all other kinds_of resources will be parsed as Groovy scripts._@param resource the resource descriptor for the Groovy script or XML file_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int loadBeanDefinitions(Resource resource) throws BeanDefinitionStoreException {_		return loadBeanDefinitions(new EncodedResource(resource))__	};load,bean,definitions,from,the,specified,groovy,script,or,xml,file,p,note,that,code,xml,files,will,be,parsed,as,xml,content,all,other,kinds,of,resources,will,be,parsed,as,groovy,scripts,param,resource,the,resource,descriptor,for,the,groovy,script,or,xml,file,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,load,bean,definitions,resource,resource,throws,bean,definition,store,exception,return,load,bean,definitions,new,encoded,resource,resource
GroovyBeanDefinitionReader -> public int loadBeanDefinitions(Resource resource) throws BeanDefinitionStoreException;1530174524;Load bean definitions from the specified Groovy script or XML file._<p>Note that {@code ".xml"} files will be parsed as XML content_ all other kinds_of resources will be parsed as Groovy scripts._@param resource the resource descriptor for the Groovy script or XML file_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int loadBeanDefinitions(Resource resource) throws BeanDefinitionStoreException {_		return loadBeanDefinitions(new EncodedResource(resource))__	};load,bean,definitions,from,the,specified,groovy,script,or,xml,file,p,note,that,code,xml,files,will,be,parsed,as,xml,content,all,other,kinds,of,resources,will,be,parsed,as,groovy,scripts,param,resource,the,resource,descriptor,for,the,groovy,script,or,xml,file,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,load,bean,definitions,resource,resource,throws,bean,definition,store,exception,return,load,bean,definitions,new,encoded,resource,resource
GroovyBeanDefinitionReader -> public int loadBeanDefinitions(Resource resource) throws BeanDefinitionStoreException;1530174524;Load bean definitions from the specified Groovy script or XML file._<p>Note that {@code ".xml"} files will be parsed as XML content_ all other kinds_of resources will be parsed as Groovy scripts._@param resource the resource descriptor for the Groovy script or XML file_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int loadBeanDefinitions(Resource resource) throws BeanDefinitionStoreException {_		return loadBeanDefinitions(new EncodedResource(resource))__	};load,bean,definitions,from,the,specified,groovy,script,or,xml,file,p,note,that,code,xml,files,will,be,parsed,as,xml,content,all,other,kinds,of,resources,will,be,parsed,as,groovy,scripts,param,resource,the,resource,descriptor,for,the,groovy,script,or,xml,file,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,load,bean,definitions,resource,resource,throws,bean,definition,store,exception,return,load,bean,definitions,new,encoded,resource,resource
GroovyBeanDefinitionReader -> public int loadBeanDefinitions(Resource resource) throws BeanDefinitionStoreException;1530174524;Load bean definitions from the specified Groovy script or XML file._<p>Note that {@code ".xml"} files will be parsed as XML content_ all other kinds_of resources will be parsed as Groovy scripts._@param resource the resource descriptor for the Groovy script or XML file_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int loadBeanDefinitions(Resource resource) throws BeanDefinitionStoreException {_		return loadBeanDefinitions(new EncodedResource(resource))__	};load,bean,definitions,from,the,specified,groovy,script,or,xml,file,p,note,that,code,xml,files,will,be,parsed,as,xml,content,all,other,kinds,of,resources,will,be,parsed,as,groovy,scripts,param,resource,the,resource,descriptor,for,the,groovy,script,or,xml,file,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,load,bean,definitions,resource,resource,throws,bean,definition,store,exception,return,load,bean,definitions,new,encoded,resource,resource
GroovyBeanDefinitionReader -> public int loadBeanDefinitions(Resource resource) throws BeanDefinitionStoreException;1530190293;Load bean definitions from the specified Groovy script or XML file._<p>Note that {@code ".xml"} files will be parsed as XML content_ all other kinds_of resources will be parsed as Groovy scripts._@param resource the resource descriptor for the Groovy script or XML file_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int loadBeanDefinitions(Resource resource) throws BeanDefinitionStoreException {_		return loadBeanDefinitions(new EncodedResource(resource))__	};load,bean,definitions,from,the,specified,groovy,script,or,xml,file,p,note,that,code,xml,files,will,be,parsed,as,xml,content,all,other,kinds,of,resources,will,be,parsed,as,groovy,scripts,param,resource,the,resource,descriptor,for,the,groovy,script,or,xml,file,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,load,bean,definitions,resource,resource,throws,bean,definition,store,exception,return,load,bean,definitions,new,encoded,resource,resource
GroovyBeanDefinitionReader -> public int loadBeanDefinitions(Resource resource) throws BeanDefinitionStoreException;1532706365;Load bean definitions from the specified Groovy script or XML file._<p>Note that {@code ".xml"} files will be parsed as XML content_ all other kinds_of resources will be parsed as Groovy scripts._@param resource the resource descriptor for the Groovy script or XML file_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int loadBeanDefinitions(Resource resource) throws BeanDefinitionStoreException {_		return loadBeanDefinitions(new EncodedResource(resource))__	};load,bean,definitions,from,the,specified,groovy,script,or,xml,file,p,note,that,code,xml,files,will,be,parsed,as,xml,content,all,other,kinds,of,resources,will,be,parsed,as,groovy,scripts,param,resource,the,resource,descriptor,for,the,groovy,script,or,xml,file,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,load,bean,definitions,resource,resource,throws,bean,definition,store,exception,return,load,bean,definitions,new,encoded,resource,resource
GroovyBeanDefinitionReader -> public Object getProperty(String name);1503319306;This method overrides property retrieval in the scope of the_{@code GroovyBeanDefinitionReader} to either:_<ul>_<li>Retrieve a variable from the bean builder's binding if it exists_<li>Retrieve a RuntimeBeanReference for a specific bean if it exists_<li>Otherwise just delegate to MetaClass.getProperty which will resolve_properties from the {@code GroovyBeanDefinitionReader} itself_</ul>;public Object getProperty(String name) {_		Binding binding = getBinding()__		if (binding != null && binding.hasVariable(name)) {_			return binding.getVariable(name)__		}_		else {_			if (this.namespaces.containsKey(name)) {_				return createDynamicElementReader(name)__			}_			if (getRegistry().containsBeanDefinition(name)) {_				GroovyBeanDefinitionWrapper beanDefinition = (GroovyBeanDefinitionWrapper)_						getRegistry().getBeanDefinition(name).getAttribute(GroovyBeanDefinitionWrapper.class.getName())__				if (beanDefinition != null) {_					return new GroovyRuntimeBeanReference(name, beanDefinition, false)__				}_				else {_					return new RuntimeBeanReference(name, false)__				}_			}_			_			_			else if (this.currentBeanDefinition != null) {_				MutablePropertyValues pvs = this.currentBeanDefinition.getBeanDefinition().getPropertyValues()__				if (pvs.contains(name)) {_					return pvs.get(name)__				}_				else {_					DeferredProperty dp = this.deferredProperties.get(this.currentBeanDefinition.getBeanName() + name)__					if (dp != null) {_						return dp.value__					}_					else {_						return getMetaClass().getProperty(this, name)__					}_				}_			}_			else {_				return getMetaClass().getProperty(this, name)__			}_		}_	};this,method,overrides,property,retrieval,in,the,scope,of,the,code,groovy,bean,definition,reader,to,either,ul,li,retrieve,a,variable,from,the,bean,builder,s,binding,if,it,exists,li,retrieve,a,runtime,bean,reference,for,a,specific,bean,if,it,exists,li,otherwise,just,delegate,to,meta,class,get,property,which,will,resolve,properties,from,the,code,groovy,bean,definition,reader,itself,ul;public,object,get,property,string,name,binding,binding,get,binding,if,binding,null,binding,has,variable,name,return,binding,get,variable,name,else,if,this,namespaces,contains,key,name,return,create,dynamic,element,reader,name,if,get,registry,contains,bean,definition,name,groovy,bean,definition,wrapper,bean,definition,groovy,bean,definition,wrapper,get,registry,get,bean,definition,name,get,attribute,groovy,bean,definition,wrapper,class,get,name,if,bean,definition,null,return,new,groovy,runtime,bean,reference,name,bean,definition,false,else,return,new,runtime,bean,reference,name,false,else,if,this,current,bean,definition,null,mutable,property,values,pvs,this,current,bean,definition,get,bean,definition,get,property,values,if,pvs,contains,name,return,pvs,get,name,else,deferred,property,dp,this,deferred,properties,get,this,current,bean,definition,get,bean,name,name,if,dp,null,return,dp,value,else,return,get,meta,class,get,property,this,name,else,return,get,meta,class,get,property,this,name
GroovyBeanDefinitionReader -> public Object getProperty(String name);1506097334;This method overrides property retrieval in the scope of the_{@code GroovyBeanDefinitionReader} to either:_<ul>_<li>Retrieve a variable from the bean builder's binding if it exists_<li>Retrieve a RuntimeBeanReference for a specific bean if it exists_<li>Otherwise just delegate to MetaClass.getProperty which will resolve_properties from the {@code GroovyBeanDefinitionReader} itself_</ul>;public Object getProperty(String name) {_		Binding binding = getBinding()__		if (binding != null && binding.hasVariable(name)) {_			return binding.getVariable(name)__		}_		else {_			if (this.namespaces.containsKey(name)) {_				return createDynamicElementReader(name)__			}_			if (getRegistry().containsBeanDefinition(name)) {_				GroovyBeanDefinitionWrapper beanDefinition = (GroovyBeanDefinitionWrapper)_						getRegistry().getBeanDefinition(name).getAttribute(GroovyBeanDefinitionWrapper.class.getName())__				if (beanDefinition != null) {_					return new GroovyRuntimeBeanReference(name, beanDefinition, false)__				}_				else {_					return new RuntimeBeanReference(name, false)__				}_			}_			_			_			else if (this.currentBeanDefinition != null) {_				MutablePropertyValues pvs = this.currentBeanDefinition.getBeanDefinition().getPropertyValues()__				if (pvs.contains(name)) {_					return pvs.get(name)__				}_				else {_					DeferredProperty dp = this.deferredProperties.get(this.currentBeanDefinition.getBeanName() + name)__					if (dp != null) {_						return dp.value__					}_					else {_						return getMetaClass().getProperty(this, name)__					}_				}_			}_			else {_				return getMetaClass().getProperty(this, name)__			}_		}_	};this,method,overrides,property,retrieval,in,the,scope,of,the,code,groovy,bean,definition,reader,to,either,ul,li,retrieve,a,variable,from,the,bean,builder,s,binding,if,it,exists,li,retrieve,a,runtime,bean,reference,for,a,specific,bean,if,it,exists,li,otherwise,just,delegate,to,meta,class,get,property,which,will,resolve,properties,from,the,code,groovy,bean,definition,reader,itself,ul;public,object,get,property,string,name,binding,binding,get,binding,if,binding,null,binding,has,variable,name,return,binding,get,variable,name,else,if,this,namespaces,contains,key,name,return,create,dynamic,element,reader,name,if,get,registry,contains,bean,definition,name,groovy,bean,definition,wrapper,bean,definition,groovy,bean,definition,wrapper,get,registry,get,bean,definition,name,get,attribute,groovy,bean,definition,wrapper,class,get,name,if,bean,definition,null,return,new,groovy,runtime,bean,reference,name,bean,definition,false,else,return,new,runtime,bean,reference,name,false,else,if,this,current,bean,definition,null,mutable,property,values,pvs,this,current,bean,definition,get,bean,definition,get,property,values,if,pvs,contains,name,return,pvs,get,name,else,deferred,property,dp,this,deferred,properties,get,this,current,bean,definition,get,bean,name,name,if,dp,null,return,dp,value,else,return,get,meta,class,get,property,this,name,else,return,get,meta,class,get,property,this,name
GroovyBeanDefinitionReader -> public Object getProperty(String name);1519771074;This method overrides property retrieval in the scope of the_{@code GroovyBeanDefinitionReader} to either:_<ul>_<li>Retrieve a variable from the bean builder's binding if it exists_<li>Retrieve a RuntimeBeanReference for a specific bean if it exists_<li>Otherwise just delegate to MetaClass.getProperty which will resolve_properties from the {@code GroovyBeanDefinitionReader} itself_</ul>;public Object getProperty(String name) {_		Binding binding = getBinding()__		if (binding != null && binding.hasVariable(name)) {_			return binding.getVariable(name)__		}_		else {_			if (this.namespaces.containsKey(name)) {_				return createDynamicElementReader(name)__			}_			if (getRegistry().containsBeanDefinition(name)) {_				GroovyBeanDefinitionWrapper beanDefinition = (GroovyBeanDefinitionWrapper)_						getRegistry().getBeanDefinition(name).getAttribute(GroovyBeanDefinitionWrapper.class.getName())__				if (beanDefinition != null) {_					return new GroovyRuntimeBeanReference(name, beanDefinition, false)__				}_				else {_					return new RuntimeBeanReference(name, false)__				}_			}_			_			_			else if (this.currentBeanDefinition != null) {_				MutablePropertyValues pvs = this.currentBeanDefinition.getBeanDefinition().getPropertyValues()__				if (pvs.contains(name)) {_					return pvs.get(name)__				}_				else {_					DeferredProperty dp = this.deferredProperties.get(this.currentBeanDefinition.getBeanName() + name)__					if (dp != null) {_						return dp.value__					}_					else {_						return getMetaClass().getProperty(this, name)__					}_				}_			}_			else {_				return getMetaClass().getProperty(this, name)__			}_		}_	};this,method,overrides,property,retrieval,in,the,scope,of,the,code,groovy,bean,definition,reader,to,either,ul,li,retrieve,a,variable,from,the,bean,builder,s,binding,if,it,exists,li,retrieve,a,runtime,bean,reference,for,a,specific,bean,if,it,exists,li,otherwise,just,delegate,to,meta,class,get,property,which,will,resolve,properties,from,the,code,groovy,bean,definition,reader,itself,ul;public,object,get,property,string,name,binding,binding,get,binding,if,binding,null,binding,has,variable,name,return,binding,get,variable,name,else,if,this,namespaces,contains,key,name,return,create,dynamic,element,reader,name,if,get,registry,contains,bean,definition,name,groovy,bean,definition,wrapper,bean,definition,groovy,bean,definition,wrapper,get,registry,get,bean,definition,name,get,attribute,groovy,bean,definition,wrapper,class,get,name,if,bean,definition,null,return,new,groovy,runtime,bean,reference,name,bean,definition,false,else,return,new,runtime,bean,reference,name,false,else,if,this,current,bean,definition,null,mutable,property,values,pvs,this,current,bean,definition,get,bean,definition,get,property,values,if,pvs,contains,name,return,pvs,get,name,else,deferred,property,dp,this,deferred,properties,get,this,current,bean,definition,get,bean,name,name,if,dp,null,return,dp,value,else,return,get,meta,class,get,property,this,name,else,return,get,meta,class,get,property,this,name
GroovyBeanDefinitionReader -> public Object getProperty(String name);1519832519;This method overrides property retrieval in the scope of the_{@code GroovyBeanDefinitionReader} to either:_<ul>_<li>Retrieve a variable from the bean builder's binding if it exists_<li>Retrieve a RuntimeBeanReference for a specific bean if it exists_<li>Otherwise just delegate to MetaClass.getProperty which will resolve_properties from the {@code GroovyBeanDefinitionReader} itself_</ul>;public Object getProperty(String name) {_		Binding binding = getBinding()__		if (binding != null && binding.hasVariable(name)) {_			return binding.getVariable(name)__		}_		else {_			if (this.namespaces.containsKey(name)) {_				return createDynamicElementReader(name)__			}_			if (getRegistry().containsBeanDefinition(name)) {_				GroovyBeanDefinitionWrapper beanDefinition = (GroovyBeanDefinitionWrapper)_						getRegistry().getBeanDefinition(name).getAttribute(GroovyBeanDefinitionWrapper.class.getName())__				if (beanDefinition != null) {_					return new GroovyRuntimeBeanReference(name, beanDefinition, false)__				}_				else {_					return new RuntimeBeanReference(name, false)__				}_			}_			_			_			else if (this.currentBeanDefinition != null) {_				MutablePropertyValues pvs = this.currentBeanDefinition.getBeanDefinition().getPropertyValues()__				if (pvs.contains(name)) {_					return pvs.get(name)__				}_				else {_					DeferredProperty dp = this.deferredProperties.get(this.currentBeanDefinition.getBeanName() + name)__					if (dp != null) {_						return dp.value__					}_					else {_						return getMetaClass().getProperty(this, name)__					}_				}_			}_			else {_				return getMetaClass().getProperty(this, name)__			}_		}_	};this,method,overrides,property,retrieval,in,the,scope,of,the,code,groovy,bean,definition,reader,to,either,ul,li,retrieve,a,variable,from,the,bean,builder,s,binding,if,it,exists,li,retrieve,a,runtime,bean,reference,for,a,specific,bean,if,it,exists,li,otherwise,just,delegate,to,meta,class,get,property,which,will,resolve,properties,from,the,code,groovy,bean,definition,reader,itself,ul;public,object,get,property,string,name,binding,binding,get,binding,if,binding,null,binding,has,variable,name,return,binding,get,variable,name,else,if,this,namespaces,contains,key,name,return,create,dynamic,element,reader,name,if,get,registry,contains,bean,definition,name,groovy,bean,definition,wrapper,bean,definition,groovy,bean,definition,wrapper,get,registry,get,bean,definition,name,get,attribute,groovy,bean,definition,wrapper,class,get,name,if,bean,definition,null,return,new,groovy,runtime,bean,reference,name,bean,definition,false,else,return,new,runtime,bean,reference,name,false,else,if,this,current,bean,definition,null,mutable,property,values,pvs,this,current,bean,definition,get,bean,definition,get,property,values,if,pvs,contains,name,return,pvs,get,name,else,deferred,property,dp,this,deferred,properties,get,this,current,bean,definition,get,bean,name,name,if,dp,null,return,dp,value,else,return,get,meta,class,get,property,this,name,else,return,get,meta,class,get,property,this,name
GroovyBeanDefinitionReader -> public Object getProperty(String name);1519859718;This method overrides property retrieval in the scope of the_{@code GroovyBeanDefinitionReader} to either:_<ul>_<li>Retrieve a variable from the bean builder's binding if it exists_<li>Retrieve a RuntimeBeanReference for a specific bean if it exists_<li>Otherwise just delegate to MetaClass.getProperty which will resolve_properties from the {@code GroovyBeanDefinitionReader} itself_</ul>;public Object getProperty(String name) {_		Binding binding = getBinding()__		if (binding != null && binding.hasVariable(name)) {_			return binding.getVariable(name)__		}_		else {_			if (this.namespaces.containsKey(name)) {_				return createDynamicElementReader(name)__			}_			if (getRegistry().containsBeanDefinition(name)) {_				GroovyBeanDefinitionWrapper beanDefinition = (GroovyBeanDefinitionWrapper)_						getRegistry().getBeanDefinition(name).getAttribute(GroovyBeanDefinitionWrapper.class.getName())__				if (beanDefinition != null) {_					return new GroovyRuntimeBeanReference(name, beanDefinition, false)__				}_				else {_					return new RuntimeBeanReference(name, false)__				}_			}_			_			_			else if (this.currentBeanDefinition != null) {_				MutablePropertyValues pvs = this.currentBeanDefinition.getBeanDefinition().getPropertyValues()__				if (pvs.contains(name)) {_					return pvs.get(name)__				}_				else {_					DeferredProperty dp = this.deferredProperties.get(this.currentBeanDefinition.getBeanName() + name)__					if (dp != null) {_						return dp.value__					}_					else {_						return getMetaClass().getProperty(this, name)__					}_				}_			}_			else {_				return getMetaClass().getProperty(this, name)__			}_		}_	};this,method,overrides,property,retrieval,in,the,scope,of,the,code,groovy,bean,definition,reader,to,either,ul,li,retrieve,a,variable,from,the,bean,builder,s,binding,if,it,exists,li,retrieve,a,runtime,bean,reference,for,a,specific,bean,if,it,exists,li,otherwise,just,delegate,to,meta,class,get,property,which,will,resolve,properties,from,the,code,groovy,bean,definition,reader,itself,ul;public,object,get,property,string,name,binding,binding,get,binding,if,binding,null,binding,has,variable,name,return,binding,get,variable,name,else,if,this,namespaces,contains,key,name,return,create,dynamic,element,reader,name,if,get,registry,contains,bean,definition,name,groovy,bean,definition,wrapper,bean,definition,groovy,bean,definition,wrapper,get,registry,get,bean,definition,name,get,attribute,groovy,bean,definition,wrapper,class,get,name,if,bean,definition,null,return,new,groovy,runtime,bean,reference,name,bean,definition,false,else,return,new,runtime,bean,reference,name,false,else,if,this,current,bean,definition,null,mutable,property,values,pvs,this,current,bean,definition,get,bean,definition,get,property,values,if,pvs,contains,name,return,pvs,get,name,else,deferred,property,dp,this,deferred,properties,get,this,current,bean,definition,get,bean,name,name,if,dp,null,return,dp,value,else,return,get,meta,class,get,property,this,name,else,return,get,meta,class,get,property,this,name
GroovyBeanDefinitionReader -> public Object getProperty(String name);1520529117;This method overrides property retrieval in the scope of the_{@code GroovyBeanDefinitionReader} to either:_<ul>_<li>Retrieve a variable from the bean builder's binding if it exists_<li>Retrieve a RuntimeBeanReference for a specific bean if it exists_<li>Otherwise just delegate to MetaClass.getProperty which will resolve_properties from the {@code GroovyBeanDefinitionReader} itself_</ul>;public Object getProperty(String name) {_		Binding binding = getBinding()__		if (binding != null && binding.hasVariable(name)) {_			return binding.getVariable(name)__		}_		else {_			if (this.namespaces.containsKey(name)) {_				return createDynamicElementReader(name)__			}_			if (getRegistry().containsBeanDefinition(name)) {_				GroovyBeanDefinitionWrapper beanDefinition = (GroovyBeanDefinitionWrapper)_						getRegistry().getBeanDefinition(name).getAttribute(GroovyBeanDefinitionWrapper.class.getName())__				if (beanDefinition != null) {_					return new GroovyRuntimeBeanReference(name, beanDefinition, false)__				}_				else {_					return new RuntimeBeanReference(name, false)__				}_			}_			_			_			else if (this.currentBeanDefinition != null) {_				MutablePropertyValues pvs = this.currentBeanDefinition.getBeanDefinition().getPropertyValues()__				if (pvs.contains(name)) {_					return pvs.get(name)__				}_				else {_					DeferredProperty dp = this.deferredProperties.get(this.currentBeanDefinition.getBeanName() + name)__					if (dp != null) {_						return dp.value__					}_					else {_						return getMetaClass().getProperty(this, name)__					}_				}_			}_			else {_				return getMetaClass().getProperty(this, name)__			}_		}_	};this,method,overrides,property,retrieval,in,the,scope,of,the,code,groovy,bean,definition,reader,to,either,ul,li,retrieve,a,variable,from,the,bean,builder,s,binding,if,it,exists,li,retrieve,a,runtime,bean,reference,for,a,specific,bean,if,it,exists,li,otherwise,just,delegate,to,meta,class,get,property,which,will,resolve,properties,from,the,code,groovy,bean,definition,reader,itself,ul;public,object,get,property,string,name,binding,binding,get,binding,if,binding,null,binding,has,variable,name,return,binding,get,variable,name,else,if,this,namespaces,contains,key,name,return,create,dynamic,element,reader,name,if,get,registry,contains,bean,definition,name,groovy,bean,definition,wrapper,bean,definition,groovy,bean,definition,wrapper,get,registry,get,bean,definition,name,get,attribute,groovy,bean,definition,wrapper,class,get,name,if,bean,definition,null,return,new,groovy,runtime,bean,reference,name,bean,definition,false,else,return,new,runtime,bean,reference,name,false,else,if,this,current,bean,definition,null,mutable,property,values,pvs,this,current,bean,definition,get,bean,definition,get,property,values,if,pvs,contains,name,return,pvs,get,name,else,deferred,property,dp,this,deferred,properties,get,this,current,bean,definition,get,bean,name,name,if,dp,null,return,dp,value,else,return,get,meta,class,get,property,this,name,else,return,get,meta,class,get,property,this,name
GroovyBeanDefinitionReader -> public Object getProperty(String name);1522359230;This method overrides property retrieval in the scope of the_{@code GroovyBeanDefinitionReader} to either:_<ul>_<li>Retrieve a variable from the bean builder's binding if it exists_<li>Retrieve a RuntimeBeanReference for a specific bean if it exists_<li>Otherwise just delegate to MetaClass.getProperty which will resolve_properties from the {@code GroovyBeanDefinitionReader} itself_</ul>;public Object getProperty(String name) {_		Binding binding = getBinding()__		if (binding != null && binding.hasVariable(name)) {_			return binding.getVariable(name)__		}_		else {_			if (this.namespaces.containsKey(name)) {_				return createDynamicElementReader(name)__			}_			if (getRegistry().containsBeanDefinition(name)) {_				GroovyBeanDefinitionWrapper beanDefinition = (GroovyBeanDefinitionWrapper)_						getRegistry().getBeanDefinition(name).getAttribute(GroovyBeanDefinitionWrapper.class.getName())__				if (beanDefinition != null) {_					return new GroovyRuntimeBeanReference(name, beanDefinition, false)__				}_				else {_					return new RuntimeBeanReference(name, false)__				}_			}_			_			_			else if (this.currentBeanDefinition != null) {_				MutablePropertyValues pvs = this.currentBeanDefinition.getBeanDefinition().getPropertyValues()__				if (pvs.contains(name)) {_					return pvs.get(name)__				}_				else {_					DeferredProperty dp = this.deferredProperties.get(this.currentBeanDefinition.getBeanName() + name)__					if (dp != null) {_						return dp.value__					}_					else {_						return getMetaClass().getProperty(this, name)__					}_				}_			}_			else {_				return getMetaClass().getProperty(this, name)__			}_		}_	};this,method,overrides,property,retrieval,in,the,scope,of,the,code,groovy,bean,definition,reader,to,either,ul,li,retrieve,a,variable,from,the,bean,builder,s,binding,if,it,exists,li,retrieve,a,runtime,bean,reference,for,a,specific,bean,if,it,exists,li,otherwise,just,delegate,to,meta,class,get,property,which,will,resolve,properties,from,the,code,groovy,bean,definition,reader,itself,ul;public,object,get,property,string,name,binding,binding,get,binding,if,binding,null,binding,has,variable,name,return,binding,get,variable,name,else,if,this,namespaces,contains,key,name,return,create,dynamic,element,reader,name,if,get,registry,contains,bean,definition,name,groovy,bean,definition,wrapper,bean,definition,groovy,bean,definition,wrapper,get,registry,get,bean,definition,name,get,attribute,groovy,bean,definition,wrapper,class,get,name,if,bean,definition,null,return,new,groovy,runtime,bean,reference,name,bean,definition,false,else,return,new,runtime,bean,reference,name,false,else,if,this,current,bean,definition,null,mutable,property,values,pvs,this,current,bean,definition,get,bean,definition,get,property,values,if,pvs,contains,name,return,pvs,get,name,else,deferred,property,dp,this,deferred,properties,get,this,current,bean,definition,get,bean,name,name,if,dp,null,return,dp,value,else,return,get,meta,class,get,property,this,name,else,return,get,meta,class,get,property,this,name
GroovyBeanDefinitionReader -> public Object getProperty(String name);1530174524;This method overrides property retrieval in the scope of the_{@code GroovyBeanDefinitionReader}. A property retrieval will either:_<ul>_<li>Retrieve a variable from the bean builder's binding if it exists_<li>Retrieve a RuntimeBeanReference for a specific bean if it exists_<li>Otherwise just delegate to MetaClass.getProperty which will resolve_properties from the {@code GroovyBeanDefinitionReader} itself_</ul>;public Object getProperty(String name) {_		Binding binding = getBinding()__		if (binding != null && binding.hasVariable(name)) {_			return binding.getVariable(name)__		}_		else {_			if (this.namespaces.containsKey(name)) {_				return createDynamicElementReader(name)__			}_			if (getRegistry().containsBeanDefinition(name)) {_				GroovyBeanDefinitionWrapper beanDefinition = (GroovyBeanDefinitionWrapper)_						getRegistry().getBeanDefinition(name).getAttribute(GroovyBeanDefinitionWrapper.class.getName())__				if (beanDefinition != null) {_					return new GroovyRuntimeBeanReference(name, beanDefinition, false)__				}_				else {_					return new RuntimeBeanReference(name, false)__				}_			}_			_			_			else if (this.currentBeanDefinition != null) {_				MutablePropertyValues pvs = this.currentBeanDefinition.getBeanDefinition().getPropertyValues()__				if (pvs.contains(name)) {_					return pvs.get(name)__				}_				else {_					DeferredProperty dp = this.deferredProperties.get(this.currentBeanDefinition.getBeanName() + name)__					if (dp != null) {_						return dp.value__					}_					else {_						return getMetaClass().getProperty(this, name)__					}_				}_			}_			else {_				return getMetaClass().getProperty(this, name)__			}_		}_	};this,method,overrides,property,retrieval,in,the,scope,of,the,code,groovy,bean,definition,reader,a,property,retrieval,will,either,ul,li,retrieve,a,variable,from,the,bean,builder,s,binding,if,it,exists,li,retrieve,a,runtime,bean,reference,for,a,specific,bean,if,it,exists,li,otherwise,just,delegate,to,meta,class,get,property,which,will,resolve,properties,from,the,code,groovy,bean,definition,reader,itself,ul;public,object,get,property,string,name,binding,binding,get,binding,if,binding,null,binding,has,variable,name,return,binding,get,variable,name,else,if,this,namespaces,contains,key,name,return,create,dynamic,element,reader,name,if,get,registry,contains,bean,definition,name,groovy,bean,definition,wrapper,bean,definition,groovy,bean,definition,wrapper,get,registry,get,bean,definition,name,get,attribute,groovy,bean,definition,wrapper,class,get,name,if,bean,definition,null,return,new,groovy,runtime,bean,reference,name,bean,definition,false,else,return,new,runtime,bean,reference,name,false,else,if,this,current,bean,definition,null,mutable,property,values,pvs,this,current,bean,definition,get,bean,definition,get,property,values,if,pvs,contains,name,return,pvs,get,name,else,deferred,property,dp,this,deferred,properties,get,this,current,bean,definition,get,bean,name,name,if,dp,null,return,dp,value,else,return,get,meta,class,get,property,this,name,else,return,get,meta,class,get,property,this,name
GroovyBeanDefinitionReader -> public Object getProperty(String name);1530174524;This method overrides property retrieval in the scope of the_{@code GroovyBeanDefinitionReader}. A property retrieval will either:_<ul>_<li>Retrieve a variable from the bean builder's binding if it exists_<li>Retrieve a RuntimeBeanReference for a specific bean if it exists_<li>Otherwise just delegate to MetaClass.getProperty which will resolve_properties from the {@code GroovyBeanDefinitionReader} itself_</ul>;public Object getProperty(String name) {_		Binding binding = getBinding()__		if (binding != null && binding.hasVariable(name)) {_			return binding.getVariable(name)__		}_		else {_			if (this.namespaces.containsKey(name)) {_				return createDynamicElementReader(name)__			}_			if (getRegistry().containsBeanDefinition(name)) {_				GroovyBeanDefinitionWrapper beanDefinition = (GroovyBeanDefinitionWrapper)_						getRegistry().getBeanDefinition(name).getAttribute(GroovyBeanDefinitionWrapper.class.getName())__				if (beanDefinition != null) {_					return new GroovyRuntimeBeanReference(name, beanDefinition, false)__				}_				else {_					return new RuntimeBeanReference(name, false)__				}_			}_			_			_			else if (this.currentBeanDefinition != null) {_				MutablePropertyValues pvs = this.currentBeanDefinition.getBeanDefinition().getPropertyValues()__				if (pvs.contains(name)) {_					return pvs.get(name)__				}_				else {_					DeferredProperty dp = this.deferredProperties.get(this.currentBeanDefinition.getBeanName() + name)__					if (dp != null) {_						return dp.value__					}_					else {_						return getMetaClass().getProperty(this, name)__					}_				}_			}_			else {_				return getMetaClass().getProperty(this, name)__			}_		}_	};this,method,overrides,property,retrieval,in,the,scope,of,the,code,groovy,bean,definition,reader,a,property,retrieval,will,either,ul,li,retrieve,a,variable,from,the,bean,builder,s,binding,if,it,exists,li,retrieve,a,runtime,bean,reference,for,a,specific,bean,if,it,exists,li,otherwise,just,delegate,to,meta,class,get,property,which,will,resolve,properties,from,the,code,groovy,bean,definition,reader,itself,ul;public,object,get,property,string,name,binding,binding,get,binding,if,binding,null,binding,has,variable,name,return,binding,get,variable,name,else,if,this,namespaces,contains,key,name,return,create,dynamic,element,reader,name,if,get,registry,contains,bean,definition,name,groovy,bean,definition,wrapper,bean,definition,groovy,bean,definition,wrapper,get,registry,get,bean,definition,name,get,attribute,groovy,bean,definition,wrapper,class,get,name,if,bean,definition,null,return,new,groovy,runtime,bean,reference,name,bean,definition,false,else,return,new,runtime,bean,reference,name,false,else,if,this,current,bean,definition,null,mutable,property,values,pvs,this,current,bean,definition,get,bean,definition,get,property,values,if,pvs,contains,name,return,pvs,get,name,else,deferred,property,dp,this,deferred,properties,get,this,current,bean,definition,get,bean,name,name,if,dp,null,return,dp,value,else,return,get,meta,class,get,property,this,name,else,return,get,meta,class,get,property,this,name
GroovyBeanDefinitionReader -> public Object getProperty(String name);1530174524;This method overrides property retrieval in the scope of the_{@code GroovyBeanDefinitionReader}. A property retrieval will either:_<ul>_<li>Retrieve a variable from the bean builder's binding if it exists_<li>Retrieve a RuntimeBeanReference for a specific bean if it exists_<li>Otherwise just delegate to MetaClass.getProperty which will resolve_properties from the {@code GroovyBeanDefinitionReader} itself_</ul>;public Object getProperty(String name) {_		Binding binding = getBinding()__		if (binding != null && binding.hasVariable(name)) {_			return binding.getVariable(name)__		}_		else {_			if (this.namespaces.containsKey(name)) {_				return createDynamicElementReader(name)__			}_			if (getRegistry().containsBeanDefinition(name)) {_				GroovyBeanDefinitionWrapper beanDefinition = (GroovyBeanDefinitionWrapper)_						getRegistry().getBeanDefinition(name).getAttribute(GroovyBeanDefinitionWrapper.class.getName())__				if (beanDefinition != null) {_					return new GroovyRuntimeBeanReference(name, beanDefinition, false)__				}_				else {_					return new RuntimeBeanReference(name, false)__				}_			}_			_			_			else if (this.currentBeanDefinition != null) {_				MutablePropertyValues pvs = this.currentBeanDefinition.getBeanDefinition().getPropertyValues()__				if (pvs.contains(name)) {_					return pvs.get(name)__				}_				else {_					DeferredProperty dp = this.deferredProperties.get(this.currentBeanDefinition.getBeanName() + name)__					if (dp != null) {_						return dp.value__					}_					else {_						return getMetaClass().getProperty(this, name)__					}_				}_			}_			else {_				return getMetaClass().getProperty(this, name)__			}_		}_	};this,method,overrides,property,retrieval,in,the,scope,of,the,code,groovy,bean,definition,reader,a,property,retrieval,will,either,ul,li,retrieve,a,variable,from,the,bean,builder,s,binding,if,it,exists,li,retrieve,a,runtime,bean,reference,for,a,specific,bean,if,it,exists,li,otherwise,just,delegate,to,meta,class,get,property,which,will,resolve,properties,from,the,code,groovy,bean,definition,reader,itself,ul;public,object,get,property,string,name,binding,binding,get,binding,if,binding,null,binding,has,variable,name,return,binding,get,variable,name,else,if,this,namespaces,contains,key,name,return,create,dynamic,element,reader,name,if,get,registry,contains,bean,definition,name,groovy,bean,definition,wrapper,bean,definition,groovy,bean,definition,wrapper,get,registry,get,bean,definition,name,get,attribute,groovy,bean,definition,wrapper,class,get,name,if,bean,definition,null,return,new,groovy,runtime,bean,reference,name,bean,definition,false,else,return,new,runtime,bean,reference,name,false,else,if,this,current,bean,definition,null,mutable,property,values,pvs,this,current,bean,definition,get,bean,definition,get,property,values,if,pvs,contains,name,return,pvs,get,name,else,deferred,property,dp,this,deferred,properties,get,this,current,bean,definition,get,bean,name,name,if,dp,null,return,dp,value,else,return,get,meta,class,get,property,this,name,else,return,get,meta,class,get,property,this,name
GroovyBeanDefinitionReader -> public Object getProperty(String name);1530190293;This method overrides property retrieval in the scope of the_{@code GroovyBeanDefinitionReader}. A property retrieval will either:_<ul>_<li>Retrieve a variable from the bean builder's binding if it exists_<li>Retrieve a RuntimeBeanReference for a specific bean if it exists_<li>Otherwise just delegate to MetaClass.getProperty which will resolve_properties from the {@code GroovyBeanDefinitionReader} itself_</ul>;public Object getProperty(String name) {_		Binding binding = getBinding()__		if (binding != null && binding.hasVariable(name)) {_			return binding.getVariable(name)__		}_		else {_			if (this.namespaces.containsKey(name)) {_				return createDynamicElementReader(name)__			}_			if (getRegistry().containsBeanDefinition(name)) {_				GroovyBeanDefinitionWrapper beanDefinition = (GroovyBeanDefinitionWrapper)_						getRegistry().getBeanDefinition(name).getAttribute(GroovyBeanDefinitionWrapper.class.getName())__				if (beanDefinition != null) {_					return new GroovyRuntimeBeanReference(name, beanDefinition, false)__				}_				else {_					return new RuntimeBeanReference(name, false)__				}_			}_			_			_			else if (this.currentBeanDefinition != null) {_				MutablePropertyValues pvs = this.currentBeanDefinition.getBeanDefinition().getPropertyValues()__				if (pvs.contains(name)) {_					return pvs.get(name)__				}_				else {_					DeferredProperty dp = this.deferredProperties.get(this.currentBeanDefinition.getBeanName() + name)__					if (dp != null) {_						return dp.value__					}_					else {_						return getMetaClass().getProperty(this, name)__					}_				}_			}_			else {_				return getMetaClass().getProperty(this, name)__			}_		}_	};this,method,overrides,property,retrieval,in,the,scope,of,the,code,groovy,bean,definition,reader,a,property,retrieval,will,either,ul,li,retrieve,a,variable,from,the,bean,builder,s,binding,if,it,exists,li,retrieve,a,runtime,bean,reference,for,a,specific,bean,if,it,exists,li,otherwise,just,delegate,to,meta,class,get,property,which,will,resolve,properties,from,the,code,groovy,bean,definition,reader,itself,ul;public,object,get,property,string,name,binding,binding,get,binding,if,binding,null,binding,has,variable,name,return,binding,get,variable,name,else,if,this,namespaces,contains,key,name,return,create,dynamic,element,reader,name,if,get,registry,contains,bean,definition,name,groovy,bean,definition,wrapper,bean,definition,groovy,bean,definition,wrapper,get,registry,get,bean,definition,name,get,attribute,groovy,bean,definition,wrapper,class,get,name,if,bean,definition,null,return,new,groovy,runtime,bean,reference,name,bean,definition,false,else,return,new,runtime,bean,reference,name,false,else,if,this,current,bean,definition,null,mutable,property,values,pvs,this,current,bean,definition,get,bean,definition,get,property,values,if,pvs,contains,name,return,pvs,get,name,else,deferred,property,dp,this,deferred,properties,get,this,current,bean,definition,get,bean,name,name,if,dp,null,return,dp,value,else,return,get,meta,class,get,property,this,name,else,return,get,meta,class,get,property,this,name
GroovyBeanDefinitionReader -> public Object getProperty(String name);1532706365;This method overrides property retrieval in the scope of the_{@code GroovyBeanDefinitionReader}. A property retrieval will either:_<ul>_<li>Retrieve a variable from the bean builder's binding if it exists_<li>Retrieve a RuntimeBeanReference for a specific bean if it exists_<li>Otherwise just delegate to MetaClass.getProperty which will resolve_properties from the {@code GroovyBeanDefinitionReader} itself_</ul>;public Object getProperty(String name) {_		Binding binding = getBinding()__		if (binding != null && binding.hasVariable(name)) {_			return binding.getVariable(name)__		}_		else {_			if (this.namespaces.containsKey(name)) {_				return createDynamicElementReader(name)__			}_			if (getRegistry().containsBeanDefinition(name)) {_				GroovyBeanDefinitionWrapper beanDefinition = (GroovyBeanDefinitionWrapper)_						getRegistry().getBeanDefinition(name).getAttribute(GroovyBeanDefinitionWrapper.class.getName())__				if (beanDefinition != null) {_					return new GroovyRuntimeBeanReference(name, beanDefinition, false)__				}_				else {_					return new RuntimeBeanReference(name, false)__				}_			}_			_			_			else if (this.currentBeanDefinition != null) {_				MutablePropertyValues pvs = this.currentBeanDefinition.getBeanDefinition().getPropertyValues()__				if (pvs.contains(name)) {_					return pvs.get(name)__				}_				else {_					DeferredProperty dp = this.deferredProperties.get(this.currentBeanDefinition.getBeanName() + name)__					if (dp != null) {_						return dp.value__					}_					else {_						return getMetaClass().getProperty(this, name)__					}_				}_			}_			else {_				return getMetaClass().getProperty(this, name)__			}_		}_	};this,method,overrides,property,retrieval,in,the,scope,of,the,code,groovy,bean,definition,reader,a,property,retrieval,will,either,ul,li,retrieve,a,variable,from,the,bean,builder,s,binding,if,it,exists,li,retrieve,a,runtime,bean,reference,for,a,specific,bean,if,it,exists,li,otherwise,just,delegate,to,meta,class,get,property,which,will,resolve,properties,from,the,code,groovy,bean,definition,reader,itself,ul;public,object,get,property,string,name,binding,binding,get,binding,if,binding,null,binding,has,variable,name,return,binding,get,variable,name,else,if,this,namespaces,contains,key,name,return,create,dynamic,element,reader,name,if,get,registry,contains,bean,definition,name,groovy,bean,definition,wrapper,bean,definition,groovy,bean,definition,wrapper,get,registry,get,bean,definition,name,get,attribute,groovy,bean,definition,wrapper,class,get,name,if,bean,definition,null,return,new,groovy,runtime,bean,reference,name,bean,definition,false,else,return,new,runtime,bean,reference,name,false,else,if,this,current,bean,definition,null,mutable,property,values,pvs,this,current,bean,definition,get,bean,definition,get,property,values,if,pvs,contains,name,return,pvs,get,name,else,deferred,property,dp,this,deferred,properties,get,this,current,bean,definition,get,bean,name,name,if,dp,null,return,dp,value,else,return,get,meta,class,get,property,this,name,else,return,get,meta,class,get,property,this,name
GroovyBeanDefinitionReader -> public void setProperty(String name, Object value);1503319306;This method overrides property setting in the scope of the {@code GroovyBeanDefinitionReader}_to set properties on the current bean definition.;public void setProperty(String name, Object value) {_		if (this.currentBeanDefinition != null) {_			applyPropertyToBeanDefinition(name, value)__		}_	};this,method,overrides,property,setting,in,the,scope,of,the,code,groovy,bean,definition,reader,to,set,properties,on,the,current,bean,definition;public,void,set,property,string,name,object,value,if,this,current,bean,definition,null,apply,property,to,bean,definition,name,value
GroovyBeanDefinitionReader -> public void setProperty(String name, Object value);1506097334;This method overrides property setting in the scope of the {@code GroovyBeanDefinitionReader}_to set properties on the current bean definition.;public void setProperty(String name, Object value) {_		if (this.currentBeanDefinition != null) {_			applyPropertyToBeanDefinition(name, value)__		}_	};this,method,overrides,property,setting,in,the,scope,of,the,code,groovy,bean,definition,reader,to,set,properties,on,the,current,bean,definition;public,void,set,property,string,name,object,value,if,this,current,bean,definition,null,apply,property,to,bean,definition,name,value
GroovyBeanDefinitionReader -> public void setProperty(String name, Object value);1519771074;This method overrides property setting in the scope of the {@code GroovyBeanDefinitionReader}_to set properties on the current bean definition.;public void setProperty(String name, Object value) {_		if (this.currentBeanDefinition != null) {_			applyPropertyToBeanDefinition(name, value)__		}_	};this,method,overrides,property,setting,in,the,scope,of,the,code,groovy,bean,definition,reader,to,set,properties,on,the,current,bean,definition;public,void,set,property,string,name,object,value,if,this,current,bean,definition,null,apply,property,to,bean,definition,name,value
GroovyBeanDefinitionReader -> public void setProperty(String name, Object value);1519832519;This method overrides property setting in the scope of the {@code GroovyBeanDefinitionReader}_to set properties on the current bean definition.;public void setProperty(String name, Object value) {_		if (this.currentBeanDefinition != null) {_			applyPropertyToBeanDefinition(name, value)__		}_	};this,method,overrides,property,setting,in,the,scope,of,the,code,groovy,bean,definition,reader,to,set,properties,on,the,current,bean,definition;public,void,set,property,string,name,object,value,if,this,current,bean,definition,null,apply,property,to,bean,definition,name,value
GroovyBeanDefinitionReader -> public void setProperty(String name, Object value);1519859718;This method overrides property setting in the scope of the {@code GroovyBeanDefinitionReader}_to set properties on the current bean definition.;public void setProperty(String name, Object value) {_		if (this.currentBeanDefinition != null) {_			applyPropertyToBeanDefinition(name, value)__		}_	};this,method,overrides,property,setting,in,the,scope,of,the,code,groovy,bean,definition,reader,to,set,properties,on,the,current,bean,definition;public,void,set,property,string,name,object,value,if,this,current,bean,definition,null,apply,property,to,bean,definition,name,value
GroovyBeanDefinitionReader -> public void setProperty(String name, Object value);1520529117;This method overrides property setting in the scope of the {@code GroovyBeanDefinitionReader}_to set properties on the current bean definition.;public void setProperty(String name, Object value) {_		if (this.currentBeanDefinition != null) {_			applyPropertyToBeanDefinition(name, value)__		}_	};this,method,overrides,property,setting,in,the,scope,of,the,code,groovy,bean,definition,reader,to,set,properties,on,the,current,bean,definition;public,void,set,property,string,name,object,value,if,this,current,bean,definition,null,apply,property,to,bean,definition,name,value
GroovyBeanDefinitionReader -> public void setProperty(String name, Object value);1522359230;This method overrides property setting in the scope of the {@code GroovyBeanDefinitionReader}_to set properties on the current bean definition.;public void setProperty(String name, Object value) {_		if (this.currentBeanDefinition != null) {_			applyPropertyToBeanDefinition(name, value)__		}_	};this,method,overrides,property,setting,in,the,scope,of,the,code,groovy,bean,definition,reader,to,set,properties,on,the,current,bean,definition;public,void,set,property,string,name,object,value,if,this,current,bean,definition,null,apply,property,to,bean,definition,name,value
GroovyBeanDefinitionReader -> public void setProperty(String name, Object value);1530174524;This method overrides property setting in the scope of the {@code GroovyBeanDefinitionReader}_to set properties on the current bean definition.;public void setProperty(String name, Object value) {_		if (this.currentBeanDefinition != null) {_			applyPropertyToBeanDefinition(name, value)__		}_	};this,method,overrides,property,setting,in,the,scope,of,the,code,groovy,bean,definition,reader,to,set,properties,on,the,current,bean,definition;public,void,set,property,string,name,object,value,if,this,current,bean,definition,null,apply,property,to,bean,definition,name,value
GroovyBeanDefinitionReader -> public void setProperty(String name, Object value);1530174524;This method overrides property setting in the scope of the {@code GroovyBeanDefinitionReader}_to set properties on the current bean definition.;public void setProperty(String name, Object value) {_		if (this.currentBeanDefinition != null) {_			applyPropertyToBeanDefinition(name, value)__		}_	};this,method,overrides,property,setting,in,the,scope,of,the,code,groovy,bean,definition,reader,to,set,properties,on,the,current,bean,definition;public,void,set,property,string,name,object,value,if,this,current,bean,definition,null,apply,property,to,bean,definition,name,value
GroovyBeanDefinitionReader -> public void setProperty(String name, Object value);1530174524;This method overrides property setting in the scope of the {@code GroovyBeanDefinitionReader}_to set properties on the current bean definition.;public void setProperty(String name, Object value) {_		if (this.currentBeanDefinition != null) {_			applyPropertyToBeanDefinition(name, value)__		}_	};this,method,overrides,property,setting,in,the,scope,of,the,code,groovy,bean,definition,reader,to,set,properties,on,the,current,bean,definition;public,void,set,property,string,name,object,value,if,this,current,bean,definition,null,apply,property,to,bean,definition,name,value
GroovyBeanDefinitionReader -> public void setProperty(String name, Object value);1530190293;This method overrides property setting in the scope of the {@code GroovyBeanDefinitionReader}_to set properties on the current bean definition.;public void setProperty(String name, Object value) {_		if (this.currentBeanDefinition != null) {_			applyPropertyToBeanDefinition(name, value)__		}_	};this,method,overrides,property,setting,in,the,scope,of,the,code,groovy,bean,definition,reader,to,set,properties,on,the,current,bean,definition;public,void,set,property,string,name,object,value,if,this,current,bean,definition,null,apply,property,to,bean,definition,name,value
GroovyBeanDefinitionReader -> public void setProperty(String name, Object value);1532706365;This method overrides property setting in the scope of the {@code GroovyBeanDefinitionReader}_to set properties on the current bean definition.;public void setProperty(String name, Object value) {_		if (this.currentBeanDefinition != null) {_			applyPropertyToBeanDefinition(name, value)__		}_	};this,method,overrides,property,setting,in,the,scope,of,the,code,groovy,bean,definition,reader,to,set,properties,on,the,current,bean,definition;public,void,set,property,string,name,object,value,if,this,current,bean,definition,null,apply,property,to,bean,definition,name,value
GroovyBeanDefinitionReader -> protected GroovyBeanDefinitionReader invokeBeanDefiningClosure(Closure callable);1503319306;When a method argument is only a closure it is a set of bean definitions._@param callable the closure argument_@return this {@code GroovyBeanDefinitionReader} instance;protected GroovyBeanDefinitionReader invokeBeanDefiningClosure(Closure callable) {_		callable.setDelegate(this)__		callable.call()__		finalizeDeferredProperties()__		return this__	};when,a,method,argument,is,only,a,closure,it,is,a,set,of,bean,definitions,param,callable,the,closure,argument,return,this,code,groovy,bean,definition,reader,instance;protected,groovy,bean,definition,reader,invoke,bean,defining,closure,closure,callable,callable,set,delegate,this,callable,call,finalize,deferred,properties,return,this
GroovyBeanDefinitionReader -> protected GroovyBeanDefinitionReader invokeBeanDefiningClosure(Closure callable);1506097334;When a method argument is only a closure it is a set of bean definitions._@param callable the closure argument_@return this {@code GroovyBeanDefinitionReader} instance;protected GroovyBeanDefinitionReader invokeBeanDefiningClosure(Closure callable) {_		callable.setDelegate(this)__		callable.call()__		finalizeDeferredProperties()__		return this__	};when,a,method,argument,is,only,a,closure,it,is,a,set,of,bean,definitions,param,callable,the,closure,argument,return,this,code,groovy,bean,definition,reader,instance;protected,groovy,bean,definition,reader,invoke,bean,defining,closure,closure,callable,callable,set,delegate,this,callable,call,finalize,deferred,properties,return,this
GroovyBeanDefinitionReader -> protected GroovyBeanDefinitionReader invokeBeanDefiningClosure(Closure callable);1519771074;When a method argument is only a closure it is a set of bean definitions._@param callable the closure argument_@return this {@code GroovyBeanDefinitionReader} instance;protected GroovyBeanDefinitionReader invokeBeanDefiningClosure(Closure callable) {_		callable.setDelegate(this)__		callable.call()__		finalizeDeferredProperties()__		return this__	};when,a,method,argument,is,only,a,closure,it,is,a,set,of,bean,definitions,param,callable,the,closure,argument,return,this,code,groovy,bean,definition,reader,instance;protected,groovy,bean,definition,reader,invoke,bean,defining,closure,closure,callable,callable,set,delegate,this,callable,call,finalize,deferred,properties,return,this
GroovyBeanDefinitionReader -> protected GroovyBeanDefinitionReader invokeBeanDefiningClosure(Closure callable);1519832519;When a method argument is only a closure it is a set of bean definitions._@param callable the closure argument_@return this {@code GroovyBeanDefinitionReader} instance;protected GroovyBeanDefinitionReader invokeBeanDefiningClosure(Closure callable) {_		callable.setDelegate(this)__		callable.call()__		finalizeDeferredProperties()__		return this__	};when,a,method,argument,is,only,a,closure,it,is,a,set,of,bean,definitions,param,callable,the,closure,argument,return,this,code,groovy,bean,definition,reader,instance;protected,groovy,bean,definition,reader,invoke,bean,defining,closure,closure,callable,callable,set,delegate,this,callable,call,finalize,deferred,properties,return,this
GroovyBeanDefinitionReader -> protected GroovyBeanDefinitionReader invokeBeanDefiningClosure(Closure callable);1519859718;When a method argument is only a closure it is a set of bean definitions._@param callable the closure argument_@return this {@code GroovyBeanDefinitionReader} instance;protected GroovyBeanDefinitionReader invokeBeanDefiningClosure(Closure callable) {_		callable.setDelegate(this)__		callable.call()__		finalizeDeferredProperties()__		return this__	};when,a,method,argument,is,only,a,closure,it,is,a,set,of,bean,definitions,param,callable,the,closure,argument,return,this,code,groovy,bean,definition,reader,instance;protected,groovy,bean,definition,reader,invoke,bean,defining,closure,closure,callable,callable,set,delegate,this,callable,call,finalize,deferred,properties,return,this
GroovyBeanDefinitionReader -> protected GroovyBeanDefinitionReader invokeBeanDefiningClosure(Closure callable);1520529117;When a method argument is only a closure it is a set of bean definitions._@param callable the closure argument_@return this {@code GroovyBeanDefinitionReader} instance;protected GroovyBeanDefinitionReader invokeBeanDefiningClosure(Closure callable) {_		callable.setDelegate(this)__		callable.call()__		finalizeDeferredProperties()__		return this__	};when,a,method,argument,is,only,a,closure,it,is,a,set,of,bean,definitions,param,callable,the,closure,argument,return,this,code,groovy,bean,definition,reader,instance;protected,groovy,bean,definition,reader,invoke,bean,defining,closure,closure,callable,callable,set,delegate,this,callable,call,finalize,deferred,properties,return,this
GroovyBeanDefinitionReader -> protected GroovyBeanDefinitionReader invokeBeanDefiningClosure(Closure callable);1522359230;When a method argument is only a closure it is a set of bean definitions._@param callable the closure argument_@return this {@code GroovyBeanDefinitionReader} instance;protected GroovyBeanDefinitionReader invokeBeanDefiningClosure(Closure callable) {_		callable.setDelegate(this)__		callable.call()__		finalizeDeferredProperties()__		return this__	};when,a,method,argument,is,only,a,closure,it,is,a,set,of,bean,definitions,param,callable,the,closure,argument,return,this,code,groovy,bean,definition,reader,instance;protected,groovy,bean,definition,reader,invoke,bean,defining,closure,closure,callable,callable,set,delegate,this,callable,call,finalize,deferred,properties,return,this
GroovyBeanDefinitionReader -> protected GroovyBeanDefinitionReader invokeBeanDefiningClosure(Closure callable);1530174524;When a method argument is only a closure it is a set of bean definitions._@param callable the closure argument_@return this {@code GroovyBeanDefinitionReader} instance;protected GroovyBeanDefinitionReader invokeBeanDefiningClosure(Closure callable) {_		callable.setDelegate(this)__		callable.call()__		finalizeDeferredProperties()__		return this__	};when,a,method,argument,is,only,a,closure,it,is,a,set,of,bean,definitions,param,callable,the,closure,argument,return,this,code,groovy,bean,definition,reader,instance;protected,groovy,bean,definition,reader,invoke,bean,defining,closure,closure,callable,callable,set,delegate,this,callable,call,finalize,deferred,properties,return,this
GroovyBeanDefinitionReader -> protected GroovyBeanDefinitionReader invokeBeanDefiningClosure(Closure callable);1530174524;When a method argument is only a closure it is a set of bean definitions._@param callable the closure argument_@return this {@code GroovyBeanDefinitionReader} instance;protected GroovyBeanDefinitionReader invokeBeanDefiningClosure(Closure callable) {_		callable.setDelegate(this)__		callable.call()__		finalizeDeferredProperties()__		return this__	};when,a,method,argument,is,only,a,closure,it,is,a,set,of,bean,definitions,param,callable,the,closure,argument,return,this,code,groovy,bean,definition,reader,instance;protected,groovy,bean,definition,reader,invoke,bean,defining,closure,closure,callable,callable,set,delegate,this,callable,call,finalize,deferred,properties,return,this
GroovyBeanDefinitionReader -> protected GroovyBeanDefinitionReader invokeBeanDefiningClosure(Closure callable);1530174524;When a method argument is only a closure it is a set of bean definitions._@param callable the closure argument_@return this {@code GroovyBeanDefinitionReader} instance;protected GroovyBeanDefinitionReader invokeBeanDefiningClosure(Closure callable) {_		callable.setDelegate(this)__		callable.call()__		finalizeDeferredProperties()__		return this__	};when,a,method,argument,is,only,a,closure,it,is,a,set,of,bean,definitions,param,callable,the,closure,argument,return,this,code,groovy,bean,definition,reader,instance;protected,groovy,bean,definition,reader,invoke,bean,defining,closure,closure,callable,callable,set,delegate,this,callable,call,finalize,deferred,properties,return,this
GroovyBeanDefinitionReader -> protected GroovyBeanDefinitionReader invokeBeanDefiningClosure(Closure callable);1530190293;When a method argument is only a closure it is a set of bean definitions._@param callable the closure argument_@return this {@code GroovyBeanDefinitionReader} instance;protected GroovyBeanDefinitionReader invokeBeanDefiningClosure(Closure callable) {_		callable.setDelegate(this)__		callable.call()__		finalizeDeferredProperties()__		return this__	};when,a,method,argument,is,only,a,closure,it,is,a,set,of,bean,definitions,param,callable,the,closure,argument,return,this,code,groovy,bean,definition,reader,instance;protected,groovy,bean,definition,reader,invoke,bean,defining,closure,closure,callable,callable,set,delegate,this,callable,call,finalize,deferred,properties,return,this
GroovyBeanDefinitionReader -> protected GroovyBeanDefinitionReader invokeBeanDefiningClosure(Closure callable);1532706365;When a method argument is only a closure it is a set of bean definitions._@param callable the closure argument_@return this {@code GroovyBeanDefinitionReader} instance;protected GroovyBeanDefinitionReader invokeBeanDefiningClosure(Closure callable) {_		callable.setDelegate(this)__		callable.call()__		finalizeDeferredProperties()__		return this__	};when,a,method,argument,is,only,a,closure,it,is,a,set,of,bean,definitions,param,callable,the,closure,argument,return,this,code,groovy,bean,definition,reader,instance;protected,groovy,bean,definition,reader,invoke,bean,defining,closure,closure,callable,callable,set,delegate,this,callable,call,finalize,deferred,properties,return,this
