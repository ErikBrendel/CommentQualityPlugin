commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the source List, typically populated via XML "list" elements.  */ ;/**  * Set the source List, typically populated via XML "list" elements.  */ public void setSourceList(List<?> sourceList) {     this.sourceList = sourceList. }
true;public;1;10;/**  * Set the class to use for the target List. Can be populated with a fully  * qualified class name when defined in a Spring application context.  * <p>Default is a {@code java.util.ArrayList}.  * @see java.util.ArrayList  */ ;/**  * Set the class to use for the target List. Can be populated with a fully  * qualified class name when defined in a Spring application context.  * <p>Default is a {@code java.util.ArrayList}.  * @see java.util.ArrayList  */ @SuppressWarnings("rawtypes") public void setTargetListClass(@Nullable Class<? extends List> targetListClass) {     if (targetListClass == null) {         throw new IllegalArgumentException("'targetListClass' must not be null").     }     if (!List.class.isAssignableFrom(targetListClass)) {         throw new IllegalArgumentException("'targetListClass' must implement [java.util.List]").     }     this.targetListClass = targetListClass. }
false;public;0;5;;@Override @SuppressWarnings("rawtypes") public Class<List> getObjectType() {     return List.class. }
false;protected;0;28;;@Override @SuppressWarnings("unchecked") protected List<Object> createInstance() {     if (this.sourceList == null) {         throw new IllegalArgumentException("'sourceList' is required").     }     List<Object> result = null.     if (this.targetListClass != null) {         result = BeanUtils.instantiateClass(this.targetListClass).     } else {         result = new ArrayList<>(this.sourceList.size()).     }     Class<?> valueType = null.     if (this.targetListClass != null) {         valueType = ResolvableType.forClass(this.targetListClass).asCollection().resolveGeneric().     }     if (valueType != null) {         TypeConverter converter = getBeanTypeConverter().         for (Object elem : this.sourceList) {             result.add(converter.convertIfNecessary(elem, valueType)).         }     } else {         result.addAll(this.sourceList).     }     return result. }
