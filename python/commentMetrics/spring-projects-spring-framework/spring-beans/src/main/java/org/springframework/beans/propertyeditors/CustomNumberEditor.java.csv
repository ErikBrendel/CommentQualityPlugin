commented;modifiers;parameterAmount;loc;comment;code
true;public;1;15;/**  * Parse the Number from the given text, using the specified NumberFormat.  */ ;/**  * Parse the Number from the given text, using the specified NumberFormat.  */ @Override public void setAsText(String text) throws IllegalArgumentException {     if (this.allowEmpty && !StringUtils.hasText(text)) {         // Treat empty String as null value.         setValue(null).     } else if (this.numberFormat != null) {         // Use given NumberFormat for parsing text.         setValue(NumberUtils.parseNumber(text, this.numberClass, this.numberFormat)).     } else {         // Use default valueOf methods for parsing text.         setValue(NumberUtils.parseNumber(text, this.numberClass)).     } }
true;public;1;9;/**  * Coerce a Number value into the required target class, if necessary.  */ ;/**  * Coerce a Number value into the required target class, if necessary.  */ @Override public void setValue(@Nullable Object value) {     if (value instanceof Number) {         super.setValue(NumberUtils.convertNumberToTargetClass((Number) value, this.numberClass)).     } else {         super.setValue(value).     } }
true;public;0;15;/**  * Format the Number as String, using the specified NumberFormat.  */ ;/**  * Format the Number as String, using the specified NumberFormat.  */ @Override public String getAsText() {     Object value = getValue().     if (value == null) {         return "".     }     if (this.numberFormat != null) {         // Use NumberFormat for rendering value.         return this.numberFormat.format(value).     } else {         // Use toString method for rendering value.         return value.toString().     } }
