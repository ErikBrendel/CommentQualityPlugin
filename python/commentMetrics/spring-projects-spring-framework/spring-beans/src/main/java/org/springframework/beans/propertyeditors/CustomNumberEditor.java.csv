# id;timestamp;commentText;codeText;commentWords;codeWords
CustomNumberEditor -> public CustomNumberEditor(Class<? extends Number> numberClass, boolean allowEmpty) throws IllegalArgumentException;1328020251;Create a new CustomNumberEditor instance, using the default_<code>valueOf</code> methods for parsing and <code>toString</code>_methods for rendering._<p>The "allowEmpty" parameter states if an empty String should_be allowed for parsing, i.e. get interpreted as <code>null</code> value._Else, an IllegalArgumentException gets thrown in that case._@param numberClass Number subclass to generate_@param allowEmpty if empty strings should be allowed_@throws IllegalArgumentException if an invalid numberClass has been specified_@see org.springframework.util.NumberUtils#parseNumber(String, Class)_@see Integer#valueOf_@see Integer#toString;public CustomNumberEditor(Class<? extends Number> numberClass, boolean allowEmpty) throws IllegalArgumentException {_		this(numberClass, null, allowEmpty)__	};create,a,new,custom,number,editor,instance,using,the,default,code,value,of,code,methods,for,parsing,and,code,to,string,code,methods,for,rendering,p,the,allow,empty,parameter,states,if,an,empty,string,should,be,allowed,for,parsing,i,e,get,interpreted,as,code,null,code,value,else,an,illegal,argument,exception,gets,thrown,in,that,case,param,number,class,number,subclass,to,generate,param,allow,empty,if,empty,strings,should,be,allowed,throws,illegal,argument,exception,if,an,invalid,number,class,has,been,specified,see,org,springframework,util,number,utils,parse,number,string,class,see,integer,value,of,see,integer,to,string;public,custom,number,editor,class,extends,number,number,class,boolean,allow,empty,throws,illegal,argument,exception,this,number,class,null,allow,empty
CustomNumberEditor -> public CustomNumberEditor(Class<? extends Number> numberClass, boolean allowEmpty) throws IllegalArgumentException;1356735495;Create a new CustomNumberEditor instance, using the default_{@code valueOf} methods for parsing and {@code toString}_methods for rendering._<p>The "allowEmpty" parameter states if an empty String should_be allowed for parsing, i.e. get interpreted as {@code null} value._Else, an IllegalArgumentException gets thrown in that case._@param numberClass Number subclass to generate_@param allowEmpty if empty strings should be allowed_@throws IllegalArgumentException if an invalid numberClass has been specified_@see org.springframework.util.NumberUtils#parseNumber(String, Class)_@see Integer#valueOf_@see Integer#toString;public CustomNumberEditor(Class<? extends Number> numberClass, boolean allowEmpty) throws IllegalArgumentException {_		this(numberClass, null, allowEmpty)__	};create,a,new,custom,number,editor,instance,using,the,default,code,value,of,methods,for,parsing,and,code,to,string,methods,for,rendering,p,the,allow,empty,parameter,states,if,an,empty,string,should,be,allowed,for,parsing,i,e,get,interpreted,as,code,null,value,else,an,illegal,argument,exception,gets,thrown,in,that,case,param,number,class,number,subclass,to,generate,param,allow,empty,if,empty,strings,should,be,allowed,throws,illegal,argument,exception,if,an,invalid,number,class,has,been,specified,see,org,springframework,util,number,utils,parse,number,string,class,see,integer,value,of,see,integer,to,string;public,custom,number,editor,class,extends,number,number,class,boolean,allow,empty,throws,illegal,argument,exception,this,number,class,null,allow,empty
CustomNumberEditor -> public CustomNumberEditor(Class<? extends Number> numberClass, boolean allowEmpty) throws IllegalArgumentException;1385501137;Create a new CustomNumberEditor instance, using the default_{@code valueOf} methods for parsing and {@code toString}_methods for rendering._<p>The "allowEmpty" parameter states if an empty String should_be allowed for parsing, i.e. get interpreted as {@code null} value._Else, an IllegalArgumentException gets thrown in that case._@param numberClass Number subclass to generate_@param allowEmpty if empty strings should be allowed_@throws IllegalArgumentException if an invalid numberClass has been specified_@see org.springframework.util.NumberUtils#parseNumber(String, Class)_@see Integer#valueOf_@see Integer#toString;public CustomNumberEditor(Class<? extends Number> numberClass, boolean allowEmpty) throws IllegalArgumentException {_		this(numberClass, null, allowEmpty)__	};create,a,new,custom,number,editor,instance,using,the,default,code,value,of,methods,for,parsing,and,code,to,string,methods,for,rendering,p,the,allow,empty,parameter,states,if,an,empty,string,should,be,allowed,for,parsing,i,e,get,interpreted,as,code,null,value,else,an,illegal,argument,exception,gets,thrown,in,that,case,param,number,class,number,subclass,to,generate,param,allow,empty,if,empty,strings,should,be,allowed,throws,illegal,argument,exception,if,an,invalid,number,class,has,been,specified,see,org,springframework,util,number,utils,parse,number,string,class,see,integer,value,of,see,integer,to,string;public,custom,number,editor,class,extends,number,number,class,boolean,allow,empty,throws,illegal,argument,exception,this,number,class,null,allow,empty
CustomNumberEditor -> public CustomNumberEditor(Class<? extends Number> numberClass, boolean allowEmpty) throws IllegalArgumentException;1496837955;Create a new CustomNumberEditor instance, using the default_{@code valueOf} methods for parsing and {@code toString}_methods for rendering._<p>The "allowEmpty" parameter states if an empty String should_be allowed for parsing, i.e. get interpreted as {@code null} value._Else, an IllegalArgumentException gets thrown in that case._@param numberClass Number subclass to generate_@param allowEmpty if empty strings should be allowed_@throws IllegalArgumentException if an invalid numberClass has been specified_@see org.springframework.util.NumberUtils#parseNumber(String, Class)_@see Integer#valueOf_@see Integer#toString;public CustomNumberEditor(Class<? extends Number> numberClass, boolean allowEmpty) throws IllegalArgumentException {_		this(numberClass, null, allowEmpty)__	};create,a,new,custom,number,editor,instance,using,the,default,code,value,of,methods,for,parsing,and,code,to,string,methods,for,rendering,p,the,allow,empty,parameter,states,if,an,empty,string,should,be,allowed,for,parsing,i,e,get,interpreted,as,code,null,value,else,an,illegal,argument,exception,gets,thrown,in,that,case,param,number,class,number,subclass,to,generate,param,allow,empty,if,empty,strings,should,be,allowed,throws,illegal,argument,exception,if,an,invalid,number,class,has,been,specified,see,org,springframework,util,number,utils,parse,number,string,class,see,integer,value,of,see,integer,to,string;public,custom,number,editor,class,extends,number,number,class,boolean,allow,empty,throws,illegal,argument,exception,this,number,class,null,allow,empty
CustomNumberEditor -> public CustomNumberEditor(Class<? extends Number> numberClass, boolean allowEmpty) throws IllegalArgumentException;1498780456;Create a new CustomNumberEditor instance, using the default_{@code valueOf} methods for parsing and {@code toString}_methods for rendering._<p>The "allowEmpty" parameter states if an empty String should_be allowed for parsing, i.e. get interpreted as {@code null} value._Else, an IllegalArgumentException gets thrown in that case._@param numberClass Number subclass to generate_@param allowEmpty if empty strings should be allowed_@throws IllegalArgumentException if an invalid numberClass has been specified_@see org.springframework.util.NumberUtils#parseNumber(String, Class)_@see Integer#valueOf_@see Integer#toString;public CustomNumberEditor(Class<? extends Number> numberClass, boolean allowEmpty) throws IllegalArgumentException {_		this(numberClass, null, allowEmpty)__	};create,a,new,custom,number,editor,instance,using,the,default,code,value,of,methods,for,parsing,and,code,to,string,methods,for,rendering,p,the,allow,empty,parameter,states,if,an,empty,string,should,be,allowed,for,parsing,i,e,get,interpreted,as,code,null,value,else,an,illegal,argument,exception,gets,thrown,in,that,case,param,number,class,number,subclass,to,generate,param,allow,empty,if,empty,strings,should,be,allowed,throws,illegal,argument,exception,if,an,invalid,number,class,has,been,specified,see,org,springframework,util,number,utils,parse,number,string,class,see,integer,value,of,see,integer,to,string;public,custom,number,editor,class,extends,number,number,class,boolean,allow,empty,throws,illegal,argument,exception,this,number,class,null,allow,empty
CustomNumberEditor -> public CustomNumberEditor(Class<? extends Number> numberClass, boolean allowEmpty) throws IllegalArgumentException;1530174524;Create a new CustomNumberEditor instance, using the default_{@code valueOf} methods for parsing and {@code toString}_methods for rendering._<p>The "allowEmpty" parameter states if an empty String should_be allowed for parsing, i.e. get interpreted as {@code null} value._Else, an IllegalArgumentException gets thrown in that case._@param numberClass the Number subclass to generate_@param allowEmpty if empty strings should be allowed_@throws IllegalArgumentException if an invalid numberClass has been specified_@see org.springframework.util.NumberUtils#parseNumber(String, Class)_@see Integer#valueOf_@see Integer#toString;public CustomNumberEditor(Class<? extends Number> numberClass, boolean allowEmpty) throws IllegalArgumentException {_		this(numberClass, null, allowEmpty)__	};create,a,new,custom,number,editor,instance,using,the,default,code,value,of,methods,for,parsing,and,code,to,string,methods,for,rendering,p,the,allow,empty,parameter,states,if,an,empty,string,should,be,allowed,for,parsing,i,e,get,interpreted,as,code,null,value,else,an,illegal,argument,exception,gets,thrown,in,that,case,param,number,class,the,number,subclass,to,generate,param,allow,empty,if,empty,strings,should,be,allowed,throws,illegal,argument,exception,if,an,invalid,number,class,has,been,specified,see,org,springframework,util,number,utils,parse,number,string,class,see,integer,value,of,see,integer,to,string;public,custom,number,editor,class,extends,number,number,class,boolean,allow,empty,throws,illegal,argument,exception,this,number,class,null,allow,empty
CustomNumberEditor -> @Override 	public void setAsText(String text) throws IllegalArgumentException;1328020251;Parse the Number from the given text, using the specified NumberFormat.;@Override_	public void setAsText(String text) throws IllegalArgumentException {_		if (this.allowEmpty && !StringUtils.hasText(text)) {_			_			setValue(null)__		}_		else if (this.numberFormat != null) {_			_			setValue(NumberUtils.parseNumber(text, this.numberClass, this.numberFormat))__		}_		else {_			_			setValue(NumberUtils.parseNumber(text, this.numberClass))__		}_	};parse,the,number,from,the,given,text,using,the,specified,number,format;override,public,void,set,as,text,string,text,throws,illegal,argument,exception,if,this,allow,empty,string,utils,has,text,text,set,value,null,else,if,this,number,format,null,set,value,number,utils,parse,number,text,this,number,class,this,number,format,else,set,value,number,utils,parse,number,text,this,number,class
CustomNumberEditor -> @Override 	public void setAsText(String text) throws IllegalArgumentException;1356735495;Parse the Number from the given text, using the specified NumberFormat.;@Override_	public void setAsText(String text) throws IllegalArgumentException {_		if (this.allowEmpty && !StringUtils.hasText(text)) {_			_			setValue(null)__		}_		else if (this.numberFormat != null) {_			_			setValue(NumberUtils.parseNumber(text, this.numberClass, this.numberFormat))__		}_		else {_			_			setValue(NumberUtils.parseNumber(text, this.numberClass))__		}_	};parse,the,number,from,the,given,text,using,the,specified,number,format;override,public,void,set,as,text,string,text,throws,illegal,argument,exception,if,this,allow,empty,string,utils,has,text,text,set,value,null,else,if,this,number,format,null,set,value,number,utils,parse,number,text,this,number,class,this,number,format,else,set,value,number,utils,parse,number,text,this,number,class
CustomNumberEditor -> @Override 	public void setAsText(String text) throws IllegalArgumentException;1385501137;Parse the Number from the given text, using the specified NumberFormat.;@Override_	public void setAsText(String text) throws IllegalArgumentException {_		if (this.allowEmpty && !StringUtils.hasText(text)) {_			_			setValue(null)__		}_		else if (this.numberFormat != null) {_			_			setValue(NumberUtils.parseNumber(text, this.numberClass, this.numberFormat))__		}_		else {_			_			setValue(NumberUtils.parseNumber(text, this.numberClass))__		}_	};parse,the,number,from,the,given,text,using,the,specified,number,format;override,public,void,set,as,text,string,text,throws,illegal,argument,exception,if,this,allow,empty,string,utils,has,text,text,set,value,null,else,if,this,number,format,null,set,value,number,utils,parse,number,text,this,number,class,this,number,format,else,set,value,number,utils,parse,number,text,this,number,class
CustomNumberEditor -> @Override 	public void setAsText(String text) throws IllegalArgumentException;1496837955;Parse the Number from the given text, using the specified NumberFormat.;@Override_	public void setAsText(String text) throws IllegalArgumentException {_		if (this.allowEmpty && !StringUtils.hasText(text)) {_			_			setValue(null)__		}_		else if (this.numberFormat != null) {_			_			setValue(NumberUtils.parseNumber(text, this.numberClass, this.numberFormat))__		}_		else {_			_			setValue(NumberUtils.parseNumber(text, this.numberClass))__		}_	};parse,the,number,from,the,given,text,using,the,specified,number,format;override,public,void,set,as,text,string,text,throws,illegal,argument,exception,if,this,allow,empty,string,utils,has,text,text,set,value,null,else,if,this,number,format,null,set,value,number,utils,parse,number,text,this,number,class,this,number,format,else,set,value,number,utils,parse,number,text,this,number,class
CustomNumberEditor -> @Override 	public void setAsText(String text) throws IllegalArgumentException;1498780456;Parse the Number from the given text, using the specified NumberFormat.;@Override_	public void setAsText(String text) throws IllegalArgumentException {_		if (this.allowEmpty && !StringUtils.hasText(text)) {_			_			setValue(null)__		}_		else if (this.numberFormat != null) {_			_			setValue(NumberUtils.parseNumber(text, this.numberClass, this.numberFormat))__		}_		else {_			_			setValue(NumberUtils.parseNumber(text, this.numberClass))__		}_	};parse,the,number,from,the,given,text,using,the,specified,number,format;override,public,void,set,as,text,string,text,throws,illegal,argument,exception,if,this,allow,empty,string,utils,has,text,text,set,value,null,else,if,this,number,format,null,set,value,number,utils,parse,number,text,this,number,class,this,number,format,else,set,value,number,utils,parse,number,text,this,number,class
CustomNumberEditor -> @Override 	public void setAsText(String text) throws IllegalArgumentException;1530174524;Parse the Number from the given text, using the specified NumberFormat.;@Override_	public void setAsText(String text) throws IllegalArgumentException {_		if (this.allowEmpty && !StringUtils.hasText(text)) {_			_			setValue(null)__		}_		else if (this.numberFormat != null) {_			_			setValue(NumberUtils.parseNumber(text, this.numberClass, this.numberFormat))__		}_		else {_			_			setValue(NumberUtils.parseNumber(text, this.numberClass))__		}_	};parse,the,number,from,the,given,text,using,the,specified,number,format;override,public,void,set,as,text,string,text,throws,illegal,argument,exception,if,this,allow,empty,string,utils,has,text,text,set,value,null,else,if,this,number,format,null,set,value,number,utils,parse,number,text,this,number,class,this,number,format,else,set,value,number,utils,parse,number,text,this,number,class
CustomNumberEditor -> @Override 	public void setValue(Object value);1328020251;Coerce a Number value into the required target class, if necessary.;@Override_	public void setValue(Object value) {_		if (value instanceof Number) {_			super.setValue(NumberUtils.convertNumberToTargetClass((Number) value, this.numberClass))__		}_		else {_			super.setValue(value)__		}_	};coerce,a,number,value,into,the,required,target,class,if,necessary;override,public,void,set,value,object,value,if,value,instanceof,number,super,set,value,number,utils,convert,number,to,target,class,number,value,this,number,class,else,super,set,value,value
CustomNumberEditor -> @Override 	public void setValue(Object value);1356735495;Coerce a Number value into the required target class, if necessary.;@Override_	public void setValue(Object value) {_		if (value instanceof Number) {_			super.setValue(NumberUtils.convertNumberToTargetClass((Number) value, this.numberClass))__		}_		else {_			super.setValue(value)__		}_	};coerce,a,number,value,into,the,required,target,class,if,necessary;override,public,void,set,value,object,value,if,value,instanceof,number,super,set,value,number,utils,convert,number,to,target,class,number,value,this,number,class,else,super,set,value,value
CustomNumberEditor -> @Override 	public void setValue(Object value);1385501137;Coerce a Number value into the required target class, if necessary.;@Override_	public void setValue(Object value) {_		if (value instanceof Number) {_			super.setValue(NumberUtils.convertNumberToTargetClass((Number) value, this.numberClass))__		}_		else {_			super.setValue(value)__		}_	};coerce,a,number,value,into,the,required,target,class,if,necessary;override,public,void,set,value,object,value,if,value,instanceof,number,super,set,value,number,utils,convert,number,to,target,class,number,value,this,number,class,else,super,set,value,value
CustomNumberEditor -> public CustomNumberEditor(Class<? extends Number> numberClass, 			@Nullable NumberFormat numberFormat, boolean allowEmpty) throws IllegalArgumentException;1496837955;Create a new CustomNumberEditor instance, using the given NumberFormat_for parsing and rendering._<p>The allowEmpty parameter states if an empty String should_be allowed for parsing, i.e. get interpreted as {@code null} value._Else, an IllegalArgumentException gets thrown in that case._@param numberClass Number subclass to generate_@param numberFormat NumberFormat to use for parsing and rendering_@param allowEmpty if empty strings should be allowed_@throws IllegalArgumentException if an invalid numberClass has been specified_@see org.springframework.util.NumberUtils#parseNumber(String, Class, java.text.NumberFormat)_@see java.text.NumberFormat#parse_@see java.text.NumberFormat#format;public CustomNumberEditor(Class<? extends Number> numberClass,_			@Nullable NumberFormat numberFormat, boolean allowEmpty) throws IllegalArgumentException {__		if (!Number.class.isAssignableFrom(numberClass)) {_			throw new IllegalArgumentException("Property class must be a subclass of Number")__		}_		this.numberClass = numberClass__		this.numberFormat = numberFormat__		this.allowEmpty = allowEmpty__	};create,a,new,custom,number,editor,instance,using,the,given,number,format,for,parsing,and,rendering,p,the,allow,empty,parameter,states,if,an,empty,string,should,be,allowed,for,parsing,i,e,get,interpreted,as,code,null,value,else,an,illegal,argument,exception,gets,thrown,in,that,case,param,number,class,number,subclass,to,generate,param,number,format,number,format,to,use,for,parsing,and,rendering,param,allow,empty,if,empty,strings,should,be,allowed,throws,illegal,argument,exception,if,an,invalid,number,class,has,been,specified,see,org,springframework,util,number,utils,parse,number,string,class,java,text,number,format,see,java,text,number,format,parse,see,java,text,number,format,format;public,custom,number,editor,class,extends,number,number,class,nullable,number,format,number,format,boolean,allow,empty,throws,illegal,argument,exception,if,number,class,is,assignable,from,number,class,throw,new,illegal,argument,exception,property,class,must,be,a,subclass,of,number,this,number,class,number,class,this,number,format,number,format,this,allow,empty,allow,empty
CustomNumberEditor -> public CustomNumberEditor(Class<? extends Number> numberClass, 			@Nullable NumberFormat numberFormat, boolean allowEmpty) throws IllegalArgumentException;1498780456;Create a new CustomNumberEditor instance, using the given NumberFormat_for parsing and rendering._<p>The allowEmpty parameter states if an empty String should_be allowed for parsing, i.e. get interpreted as {@code null} value._Else, an IllegalArgumentException gets thrown in that case._@param numberClass Number subclass to generate_@param numberFormat NumberFormat to use for parsing and rendering_@param allowEmpty if empty strings should be allowed_@throws IllegalArgumentException if an invalid numberClass has been specified_@see org.springframework.util.NumberUtils#parseNumber(String, Class, java.text.NumberFormat)_@see java.text.NumberFormat#parse_@see java.text.NumberFormat#format;public CustomNumberEditor(Class<? extends Number> numberClass,_			@Nullable NumberFormat numberFormat, boolean allowEmpty) throws IllegalArgumentException {__		if (!Number.class.isAssignableFrom(numberClass)) {_			throw new IllegalArgumentException("Property class must be a subclass of Number")__		}_		this.numberClass = numberClass__		this.numberFormat = numberFormat__		this.allowEmpty = allowEmpty__	};create,a,new,custom,number,editor,instance,using,the,given,number,format,for,parsing,and,rendering,p,the,allow,empty,parameter,states,if,an,empty,string,should,be,allowed,for,parsing,i,e,get,interpreted,as,code,null,value,else,an,illegal,argument,exception,gets,thrown,in,that,case,param,number,class,number,subclass,to,generate,param,number,format,number,format,to,use,for,parsing,and,rendering,param,allow,empty,if,empty,strings,should,be,allowed,throws,illegal,argument,exception,if,an,invalid,number,class,has,been,specified,see,org,springframework,util,number,utils,parse,number,string,class,java,text,number,format,see,java,text,number,format,parse,see,java,text,number,format,format;public,custom,number,editor,class,extends,number,number,class,nullable,number,format,number,format,boolean,allow,empty,throws,illegal,argument,exception,if,number,class,is,assignable,from,number,class,throw,new,illegal,argument,exception,property,class,must,be,a,subclass,of,number,this,number,class,number,class,this,number,format,number,format,this,allow,empty,allow,empty
CustomNumberEditor -> public CustomNumberEditor(Class<? extends Number> numberClass, 			@Nullable NumberFormat numberFormat, boolean allowEmpty) throws IllegalArgumentException;1530174524;Create a new CustomNumberEditor instance, using the given NumberFormat_for parsing and rendering._<p>The allowEmpty parameter states if an empty String should_be allowed for parsing, i.e. get interpreted as {@code null} value._Else, an IllegalArgumentException gets thrown in that case._@param numberClass the Number subclass to generate_@param numberFormat the NumberFormat to use for parsing and rendering_@param allowEmpty if empty strings should be allowed_@throws IllegalArgumentException if an invalid numberClass has been specified_@see org.springframework.util.NumberUtils#parseNumber(String, Class, java.text.NumberFormat)_@see java.text.NumberFormat#parse_@see java.text.NumberFormat#format;public CustomNumberEditor(Class<? extends Number> numberClass,_			@Nullable NumberFormat numberFormat, boolean allowEmpty) throws IllegalArgumentException {__		if (!Number.class.isAssignableFrom(numberClass)) {_			throw new IllegalArgumentException("Property class must be a subclass of Number")__		}_		this.numberClass = numberClass__		this.numberFormat = numberFormat__		this.allowEmpty = allowEmpty__	};create,a,new,custom,number,editor,instance,using,the,given,number,format,for,parsing,and,rendering,p,the,allow,empty,parameter,states,if,an,empty,string,should,be,allowed,for,parsing,i,e,get,interpreted,as,code,null,value,else,an,illegal,argument,exception,gets,thrown,in,that,case,param,number,class,the,number,subclass,to,generate,param,number,format,the,number,format,to,use,for,parsing,and,rendering,param,allow,empty,if,empty,strings,should,be,allowed,throws,illegal,argument,exception,if,an,invalid,number,class,has,been,specified,see,org,springframework,util,number,utils,parse,number,string,class,java,text,number,format,see,java,text,number,format,parse,see,java,text,number,format,format;public,custom,number,editor,class,extends,number,number,class,nullable,number,format,number,format,boolean,allow,empty,throws,illegal,argument,exception,if,number,class,is,assignable,from,number,class,throw,new,illegal,argument,exception,property,class,must,be,a,subclass,of,number,this,number,class,number,class,this,number,format,number,format,this,allow,empty,allow,empty
CustomNumberEditor -> public CustomNumberEditor(Class<? extends Number> numberClass, 			NumberFormat numberFormat, boolean allowEmpty) throws IllegalArgumentException;1356735495;Create a new CustomNumberEditor instance, using the given NumberFormat_for parsing and rendering._<p>The allowEmpty parameter states if an empty String should_be allowed for parsing, i.e. get interpreted as {@code null} value._Else, an IllegalArgumentException gets thrown in that case._@param numberClass Number subclass to generate_@param numberFormat NumberFormat to use for parsing and rendering_@param allowEmpty if empty strings should be allowed_@throws IllegalArgumentException if an invalid numberClass has been specified_@see org.springframework.util.NumberUtils#parseNumber(String, Class, java.text.NumberFormat)_@see java.text.NumberFormat#parse_@see java.text.NumberFormat#format;public CustomNumberEditor(Class<? extends Number> numberClass,_			NumberFormat numberFormat, boolean allowEmpty) throws IllegalArgumentException {__		if (numberClass == null || !Number.class.isAssignableFrom(numberClass)) {_			throw new IllegalArgumentException("Property class must be a subclass of Number")__		}_		this.numberClass = numberClass__		this.numberFormat = numberFormat__		this.allowEmpty = allowEmpty__	};create,a,new,custom,number,editor,instance,using,the,given,number,format,for,parsing,and,rendering,p,the,allow,empty,parameter,states,if,an,empty,string,should,be,allowed,for,parsing,i,e,get,interpreted,as,code,null,value,else,an,illegal,argument,exception,gets,thrown,in,that,case,param,number,class,number,subclass,to,generate,param,number,format,number,format,to,use,for,parsing,and,rendering,param,allow,empty,if,empty,strings,should,be,allowed,throws,illegal,argument,exception,if,an,invalid,number,class,has,been,specified,see,org,springframework,util,number,utils,parse,number,string,class,java,text,number,format,see,java,text,number,format,parse,see,java,text,number,format,format;public,custom,number,editor,class,extends,number,number,class,number,format,number,format,boolean,allow,empty,throws,illegal,argument,exception,if,number,class,null,number,class,is,assignable,from,number,class,throw,new,illegal,argument,exception,property,class,must,be,a,subclass,of,number,this,number,class,number,class,this,number,format,number,format,this,allow,empty,allow,empty
CustomNumberEditor -> public CustomNumberEditor(Class<? extends Number> numberClass, 			NumberFormat numberFormat, boolean allowEmpty) throws IllegalArgumentException;1385501137;Create a new CustomNumberEditor instance, using the given NumberFormat_for parsing and rendering._<p>The allowEmpty parameter states if an empty String should_be allowed for parsing, i.e. get interpreted as {@code null} value._Else, an IllegalArgumentException gets thrown in that case._@param numberClass Number subclass to generate_@param numberFormat NumberFormat to use for parsing and rendering_@param allowEmpty if empty strings should be allowed_@throws IllegalArgumentException if an invalid numberClass has been specified_@see org.springframework.util.NumberUtils#parseNumber(String, Class, java.text.NumberFormat)_@see java.text.NumberFormat#parse_@see java.text.NumberFormat#format;public CustomNumberEditor(Class<? extends Number> numberClass,_			NumberFormat numberFormat, boolean allowEmpty) throws IllegalArgumentException {__		if (numberClass == null || !Number.class.isAssignableFrom(numberClass)) {_			throw new IllegalArgumentException("Property class must be a subclass of Number")__		}_		this.numberClass = numberClass__		this.numberFormat = numberFormat__		this.allowEmpty = allowEmpty__	};create,a,new,custom,number,editor,instance,using,the,given,number,format,for,parsing,and,rendering,p,the,allow,empty,parameter,states,if,an,empty,string,should,be,allowed,for,parsing,i,e,get,interpreted,as,code,null,value,else,an,illegal,argument,exception,gets,thrown,in,that,case,param,number,class,number,subclass,to,generate,param,number,format,number,format,to,use,for,parsing,and,rendering,param,allow,empty,if,empty,strings,should,be,allowed,throws,illegal,argument,exception,if,an,invalid,number,class,has,been,specified,see,org,springframework,util,number,utils,parse,number,string,class,java,text,number,format,see,java,text,number,format,parse,see,java,text,number,format,format;public,custom,number,editor,class,extends,number,number,class,number,format,number,format,boolean,allow,empty,throws,illegal,argument,exception,if,number,class,null,number,class,is,assignable,from,number,class,throw,new,illegal,argument,exception,property,class,must,be,a,subclass,of,number,this,number,class,number,class,this,number,format,number,format,this,allow,empty,allow,empty
CustomNumberEditor -> @Override 	public void setValue(@Nullable Object value);1496837955;Coerce a Number value into the required target class, if necessary.;@Override_	public void setValue(@Nullable Object value) {_		if (value instanceof Number) {_			super.setValue(NumberUtils.convertNumberToTargetClass((Number) value, this.numberClass))__		}_		else {_			super.setValue(value)__		}_	};coerce,a,number,value,into,the,required,target,class,if,necessary;override,public,void,set,value,nullable,object,value,if,value,instanceof,number,super,set,value,number,utils,convert,number,to,target,class,number,value,this,number,class,else,super,set,value,value
CustomNumberEditor -> @Override 	public void setValue(@Nullable Object value);1498780456;Coerce a Number value into the required target class, if necessary.;@Override_	public void setValue(@Nullable Object value) {_		if (value instanceof Number) {_			super.setValue(NumberUtils.convertNumberToTargetClass((Number) value, this.numberClass))__		}_		else {_			super.setValue(value)__		}_	};coerce,a,number,value,into,the,required,target,class,if,necessary;override,public,void,set,value,nullable,object,value,if,value,instanceof,number,super,set,value,number,utils,convert,number,to,target,class,number,value,this,number,class,else,super,set,value,value
CustomNumberEditor -> @Override 	public void setValue(@Nullable Object value);1530174524;Coerce a Number value into the required target class, if necessary.;@Override_	public void setValue(@Nullable Object value) {_		if (value instanceof Number) {_			super.setValue(NumberUtils.convertNumberToTargetClass((Number) value, this.numberClass))__		}_		else {_			super.setValue(value)__		}_	};coerce,a,number,value,into,the,required,target,class,if,necessary;override,public,void,set,value,nullable,object,value,if,value,instanceof,number,super,set,value,number,utils,convert,number,to,target,class,number,value,this,number,class,else,super,set,value,value
CustomNumberEditor -> @Override 	public String getAsText();1328020251;Format the Number as String, using the specified NumberFormat.;@Override_	public String getAsText() {_		Object value = getValue()__		if (value == null) {_			return ""__		}_		if (this.numberFormat != null) {_			_			return this.numberFormat.format(value)__		}_		else {_			_			return value.toString()__		}_	};format,the,number,as,string,using,the,specified,number,format;override,public,string,get,as,text,object,value,get,value,if,value,null,return,if,this,number,format,null,return,this,number,format,format,value,else,return,value,to,string
CustomNumberEditor -> @Override 	public String getAsText();1356735495;Format the Number as String, using the specified NumberFormat.;@Override_	public String getAsText() {_		Object value = getValue()__		if (value == null) {_			return ""__		}_		if (this.numberFormat != null) {_			_			return this.numberFormat.format(value)__		}_		else {_			_			return value.toString()__		}_	};format,the,number,as,string,using,the,specified,number,format;override,public,string,get,as,text,object,value,get,value,if,value,null,return,if,this,number,format,null,return,this,number,format,format,value,else,return,value,to,string
CustomNumberEditor -> @Override 	public String getAsText();1385501137;Format the Number as String, using the specified NumberFormat.;@Override_	public String getAsText() {_		Object value = getValue()__		if (value == null) {_			return ""__		}_		if (this.numberFormat != null) {_			_			return this.numberFormat.format(value)__		}_		else {_			_			return value.toString()__		}_	};format,the,number,as,string,using,the,specified,number,format;override,public,string,get,as,text,object,value,get,value,if,value,null,return,if,this,number,format,null,return,this,number,format,format,value,else,return,value,to,string
CustomNumberEditor -> @Override 	public String getAsText();1496837955;Format the Number as String, using the specified NumberFormat.;@Override_	public String getAsText() {_		Object value = getValue()__		if (value == null) {_			return ""__		}_		if (this.numberFormat != null) {_			_			return this.numberFormat.format(value)__		}_		else {_			_			return value.toString()__		}_	};format,the,number,as,string,using,the,specified,number,format;override,public,string,get,as,text,object,value,get,value,if,value,null,return,if,this,number,format,null,return,this,number,format,format,value,else,return,value,to,string
CustomNumberEditor -> @Override 	public String getAsText();1498780456;Format the Number as String, using the specified NumberFormat.;@Override_	public String getAsText() {_		Object value = getValue()__		if (value == null) {_			return ""__		}_		if (this.numberFormat != null) {_			_			return this.numberFormat.format(value)__		}_		else {_			_			return value.toString()__		}_	};format,the,number,as,string,using,the,specified,number,format;override,public,string,get,as,text,object,value,get,value,if,value,null,return,if,this,number,format,null,return,this,number,format,format,value,else,return,value,to,string
CustomNumberEditor -> @Override 	public String getAsText();1530174524;Format the Number as String, using the specified NumberFormat.;@Override_	public String getAsText() {_		Object value = getValue()__		if (value == null) {_			return ""__		}_		if (this.numberFormat != null) {_			_			return this.numberFormat.format(value)__		}_		else {_			_			return value.toString()__		}_	};format,the,number,as,string,using,the,specified,number,format;override,public,string,get,as,text,object,value,get,value,if,value,null,return,if,this,number,format,null,return,this,number,format,format,value,else,return,value,to,string
