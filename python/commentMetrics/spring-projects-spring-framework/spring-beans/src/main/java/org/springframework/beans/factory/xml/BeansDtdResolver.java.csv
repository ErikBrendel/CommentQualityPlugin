commented;modifiers;parameterAmount;loc;comment;code
false;public;2;37;;@Override @Nullable public InputSource resolveEntity(String publicId, @Nullable String systemId) throws IOException {     if (logger.isTraceEnabled()) {         logger.trace("Trying to resolve XML entity with public ID [" + publicId + "] and system ID [" + systemId + "]").     }     if (systemId != null && systemId.endsWith(DTD_EXTENSION)) {         int lastPathSeparator = systemId.lastIndexOf('/').         int dtdNameStart = systemId.indexOf(DTD_NAME, lastPathSeparator).         if (dtdNameStart != -1) {             String dtdFile = DTD_NAME + DTD_EXTENSION.             if (logger.isTraceEnabled()) {                 logger.trace("Trying to locate [" + dtdFile + "] in Spring jar on classpath").             }             try {                 Resource resource = new ClassPathResource(dtdFile, getClass()).                 InputSource source = new InputSource(resource.getInputStream()).                 source.setPublicId(publicId).                 source.setSystemId(systemId).                 if (logger.isTraceEnabled()) {                     logger.trace("Found beans DTD [" + systemId + "] in classpath: " + dtdFile).                 }                 return source.             } catch (IOException ex) {                 if (logger.isDebugEnabled()) {                     logger.debug("Could not resolve beans DTD [" + systemId + "]: not found in classpath", ex).                 }             }         }     }     // Fall back to the parser's default behavior.     return null. }
false;public;0;4;;@Override public String toString() {     return "EntityResolver for spring-beans DTD". }
