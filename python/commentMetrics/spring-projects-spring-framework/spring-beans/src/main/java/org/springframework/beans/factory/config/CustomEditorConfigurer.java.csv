commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void setOrder(int order) {     this.order = order. }
false;public;0;4;;@Override public int getOrder() {     return this.order. }
true;public;1;3;/**  * Specify the {@link PropertyEditorRegistrar PropertyEditorRegistrars}  * to apply to beans defined within the current application context.  * <p>This allows for sharing {@code PropertyEditorRegistrars} with  * {@link org.springframework.validation.DataBinder DataBinders}, etc.  * Furthermore, it avoids the need for synchronization on custom editors:  * A {@code PropertyEditorRegistrar} will always create fresh editor  * instances for each bean creation attempt.  * @see ConfigurableListableBeanFactory#addPropertyEditorRegistrar  */ ;/**  * Specify the {@link PropertyEditorRegistrar PropertyEditorRegistrars}  * to apply to beans defined within the current application context.  * <p>This allows for sharing {@code PropertyEditorRegistrars} with  * {@link org.springframework.validation.DataBinder DataBinders}, etc.  * Furthermore, it avoids the need for synchronization on custom editors:  * A {@code PropertyEditorRegistrar} will always create fresh editor  * instances for each bean creation attempt.  * @see ConfigurableListableBeanFactory#addPropertyEditorRegistrar  */ public void setPropertyEditorRegistrars(PropertyEditorRegistrar[] propertyEditorRegistrars) {     this.propertyEditorRegistrars = propertyEditorRegistrars. }
true;public;1;3;/**  * Specify the custom editors to register via a {@link Map}, using the  * class name of the required type as the key and the class name of the  * associated {@link PropertyEditor} as value.  * @see ConfigurableListableBeanFactory#registerCustomEditor  */ ;/**  * Specify the custom editors to register via a {@link Map}, using the  * class name of the required type as the key and the class name of the  * associated {@link PropertyEditor} as value.  * @see ConfigurableListableBeanFactory#registerCustomEditor  */ public void setCustomEditors(Map<Class<?>, Class<? extends PropertyEditor>> customEditors) {     this.customEditors = customEditors. }
false;public;1;11;;@Override public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {     if (this.propertyEditorRegistrars != null) {         for (PropertyEditorRegistrar propertyEditorRegistrar : this.propertyEditorRegistrars) {             beanFactory.addPropertyEditorRegistrar(propertyEditorRegistrar).         }     }     if (this.customEditors != null) {         this.customEditors.forEach(beanFactory::registerCustomEditor).     } }
