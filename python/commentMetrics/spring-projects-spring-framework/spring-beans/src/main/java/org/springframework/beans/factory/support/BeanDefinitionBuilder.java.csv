commented;modifiers;parameterAmount;loc;comment;code
true;public,static;0;3;/**  * Create a new {@code BeanDefinitionBuilder} used to construct a {@link GenericBeanDefinition}.  */ ;/**  * Create a new {@code BeanDefinitionBuilder} used to construct a {@link GenericBeanDefinition}.  */ public static BeanDefinitionBuilder genericBeanDefinition() {     return new BeanDefinitionBuilder(new GenericBeanDefinition()). }
true;public,static;1;5;/**  * Create a new {@code BeanDefinitionBuilder} used to construct a {@link GenericBeanDefinition}.  * @param beanClassName the class name for the bean that the definition is being created for  */ ;/**  * Create a new {@code BeanDefinitionBuilder} used to construct a {@link GenericBeanDefinition}.  * @param beanClassName the class name for the bean that the definition is being created for  */ public static BeanDefinitionBuilder genericBeanDefinition(String beanClassName) {     BeanDefinitionBuilder builder = new BeanDefinitionBuilder(new GenericBeanDefinition()).     builder.beanDefinition.setBeanClassName(beanClassName).     return builder. }
true;public,static;1;5;/**  * Create a new {@code BeanDefinitionBuilder} used to construct a {@link GenericBeanDefinition}.  * @param beanClass the {@code Class} of the bean that the definition is being created for  */ ;/**  * Create a new {@code BeanDefinitionBuilder} used to construct a {@link GenericBeanDefinition}.  * @param beanClass the {@code Class} of the bean that the definition is being created for  */ public static BeanDefinitionBuilder genericBeanDefinition(Class<?> beanClass) {     BeanDefinitionBuilder builder = new BeanDefinitionBuilder(new GenericBeanDefinition()).     builder.beanDefinition.setBeanClass(beanClass).     return builder. }
true;public,static;2;6;/**  * Create a new {@code BeanDefinitionBuilder} used to construct a {@link GenericBeanDefinition}.  * @param beanClass the {@code Class} of the bean that the definition is being created for  * @param instanceSupplier a callback for creating an instance of the bean  * @since 5.0  */ ;/**  * Create a new {@code BeanDefinitionBuilder} used to construct a {@link GenericBeanDefinition}.  * @param beanClass the {@code Class} of the bean that the definition is being created for  * @param instanceSupplier a callback for creating an instance of the bean  * @since 5.0  */ public static <T> BeanDefinitionBuilder genericBeanDefinition(Class<T> beanClass, Supplier<T> instanceSupplier) {     BeanDefinitionBuilder builder = new BeanDefinitionBuilder(new GenericBeanDefinition()).     builder.beanDefinition.setBeanClass(beanClass).     builder.beanDefinition.setInstanceSupplier(instanceSupplier).     return builder. }
true;public,static;1;3;/**  * Create a new {@code BeanDefinitionBuilder} used to construct a {@link RootBeanDefinition}.  * @param beanClassName the class name for the bean that the definition is being created for  */ ;/**  * Create a new {@code BeanDefinitionBuilder} used to construct a {@link RootBeanDefinition}.  * @param beanClassName the class name for the bean that the definition is being created for  */ public static BeanDefinitionBuilder rootBeanDefinition(String beanClassName) {     return rootBeanDefinition(beanClassName, null). }
true;public,static;2;6;/**  * Create a new {@code BeanDefinitionBuilder} used to construct a {@link RootBeanDefinition}.  * @param beanClassName the class name for the bean that the definition is being created for  * @param factoryMethodName the name of the method to use to construct the bean instance  */ ;/**  * Create a new {@code BeanDefinitionBuilder} used to construct a {@link RootBeanDefinition}.  * @param beanClassName the class name for the bean that the definition is being created for  * @param factoryMethodName the name of the method to use to construct the bean instance  */ public static BeanDefinitionBuilder rootBeanDefinition(String beanClassName, @Nullable String factoryMethodName) {     BeanDefinitionBuilder builder = new BeanDefinitionBuilder(new RootBeanDefinition()).     builder.beanDefinition.setBeanClassName(beanClassName).     builder.beanDefinition.setFactoryMethodName(factoryMethodName).     return builder. }
true;public,static;1;3;/**  * Create a new {@code BeanDefinitionBuilder} used to construct a {@link RootBeanDefinition}.  * @param beanClass the {@code Class} of the bean that the definition is being created for  */ ;/**  * Create a new {@code BeanDefinitionBuilder} used to construct a {@link RootBeanDefinition}.  * @param beanClass the {@code Class} of the bean that the definition is being created for  */ public static BeanDefinitionBuilder rootBeanDefinition(Class<?> beanClass) {     return rootBeanDefinition(beanClass, null). }
true;public,static;2;6;/**  * Create a new {@code BeanDefinitionBuilder} used to construct a {@link RootBeanDefinition}.  * @param beanClass the {@code Class} of the bean that the definition is being created for  * @param factoryMethodName the name of the method to use to construct the bean instance  */ ;/**  * Create a new {@code BeanDefinitionBuilder} used to construct a {@link RootBeanDefinition}.  * @param beanClass the {@code Class} of the bean that the definition is being created for  * @param factoryMethodName the name of the method to use to construct the bean instance  */ public static BeanDefinitionBuilder rootBeanDefinition(Class<?> beanClass, @Nullable String factoryMethodName) {     BeanDefinitionBuilder builder = new BeanDefinitionBuilder(new RootBeanDefinition()).     builder.beanDefinition.setBeanClass(beanClass).     builder.beanDefinition.setFactoryMethodName(factoryMethodName).     return builder. }
true;public,static;1;3;/**  * Create a new {@code BeanDefinitionBuilder} used to construct a {@link ChildBeanDefinition}.  * @param parentName the name of the parent bean  */ ;/**  * Create a new {@code BeanDefinitionBuilder} used to construct a {@link ChildBeanDefinition}.  * @param parentName the name of the parent bean  */ public static BeanDefinitionBuilder childBeanDefinition(String parentName) {     return new BeanDefinitionBuilder(new ChildBeanDefinition(parentName)). }
true;public;0;3;/**  * Return the current BeanDefinition object in its raw (unvalidated) form.  * @see #getBeanDefinition()  */ ;/**  * Return the current BeanDefinition object in its raw (unvalidated) form.  * @see #getBeanDefinition()  */ public AbstractBeanDefinition getRawBeanDefinition() {     return this.beanDefinition. }
true;public;0;4;/**  * Validate and return the created BeanDefinition object.  */ ;/**  * Validate and return the created BeanDefinition object.  */ public AbstractBeanDefinition getBeanDefinition() {     this.beanDefinition.validate().     return this.beanDefinition. }
true;public;1;4;/**  * Set the name of the parent definition of this bean definition.  */ ;/**  * Set the name of the parent definition of this bean definition.  */ public BeanDefinitionBuilder setParentName(String parentName) {     this.beanDefinition.setParentName(parentName).     return this. }
true;public;1;4;/**  * Set the name of a static factory method to use for this definition,  * to be called on this bean's class.  */ ;/**  * Set the name of a static factory method to use for this definition,  * to be called on this bean's class.  */ public BeanDefinitionBuilder setFactoryMethod(String factoryMethod) {     this.beanDefinition.setFactoryMethodName(factoryMethod).     return this. }
true;public;2;5;/**  * Set the name of a non-static factory method to use for this definition,  * including the bean name of the factory instance to call the method on.  * @since 4.3.6  */ ;/**  * Set the name of a non-static factory method to use for this definition,  * including the bean name of the factory instance to call the method on.  * @since 4.3.6  */ public BeanDefinitionBuilder setFactoryMethodOnBean(String factoryMethod, String factoryBean) {     this.beanDefinition.setFactoryMethodName(factoryMethod).     this.beanDefinition.setFactoryBeanName(factoryBean).     return this. }
true;public;1;5;/**  * Add an indexed constructor arg value. The current index is tracked internally  * and all additions are at the present point.  */ ;/**  * Add an indexed constructor arg value. The current index is tracked internally  * and all additions are at the present point.  */ public BeanDefinitionBuilder addConstructorArgValue(@Nullable Object value) {     this.beanDefinition.getConstructorArgumentValues().addIndexedArgumentValue(this.constructorArgIndex++, value).     return this. }
true;public;1;5;/**  * Add a reference to a named bean as a constructor arg.  * @see #addConstructorArgValue(Object)  */ ;/**  * Add a reference to a named bean as a constructor arg.  * @see #addConstructorArgValue(Object)  */ public BeanDefinitionBuilder addConstructorArgReference(String beanName) {     this.beanDefinition.getConstructorArgumentValues().addIndexedArgumentValue(this.constructorArgIndex++, new RuntimeBeanReference(beanName)).     return this. }
true;public;2;4;/**  * Add the supplied property value under the given name.  */ ;/**  * Add the supplied property value under the given name.  */ public BeanDefinitionBuilder addPropertyValue(String name, @Nullable Object value) {     this.beanDefinition.getPropertyValues().add(name, value).     return this. }
true;public;2;4;/**  * Add a reference to the specified bean name under the property specified.  * @param name the name of the property to add the reference to  * @param beanName the name of the bean being referenced  */ ;/**  * Add a reference to the specified bean name under the property specified.  * @param name the name of the property to add the reference to  * @param beanName the name of the bean being referenced  */ public BeanDefinitionBuilder addPropertyReference(String name, String beanName) {     this.beanDefinition.getPropertyValues().add(name, new RuntimeBeanReference(beanName)).     return this. }
true;public;1;4;/**  * Set the init method for this definition.  */ ;/**  * Set the init method for this definition.  */ public BeanDefinitionBuilder setInitMethodName(@Nullable String methodName) {     this.beanDefinition.setInitMethodName(methodName).     return this. }
true;public;1;4;/**  * Set the destroy method for this definition.  */ ;/**  * Set the destroy method for this definition.  */ public BeanDefinitionBuilder setDestroyMethodName(@Nullable String methodName) {     this.beanDefinition.setDestroyMethodName(methodName).     return this. }
true;public;1;4;/**  * Set the scope of this definition.  * @see org.springframework.beans.factory.config.BeanDefinition#SCOPE_SINGLETON  * @see org.springframework.beans.factory.config.BeanDefinition#SCOPE_PROTOTYPE  */ ;/**  * Set the scope of this definition.  * @see org.springframework.beans.factory.config.BeanDefinition#SCOPE_SINGLETON  * @see org.springframework.beans.factory.config.BeanDefinition#SCOPE_PROTOTYPE  */ public BeanDefinitionBuilder setScope(@Nullable String scope) {     this.beanDefinition.setScope(scope).     return this. }
true;public;1;4;/**  * Set whether or not this definition is abstract.  */ ;/**  * Set whether or not this definition is abstract.  */ public BeanDefinitionBuilder setAbstract(boolean flag) {     this.beanDefinition.setAbstract(flag).     return this. }
true;public;1;4;/**  * Set whether beans for this definition should be lazily initialized or not.  */ ;/**  * Set whether beans for this definition should be lazily initialized or not.  */ public BeanDefinitionBuilder setLazyInit(boolean lazy) {     this.beanDefinition.setLazyInit(lazy).     return this. }
true;public;1;4;/**  * Set the autowire mode for this definition.  */ ;/**  * Set the autowire mode for this definition.  */ public BeanDefinitionBuilder setAutowireMode(int autowireMode) {     this.beanDefinition.setAutowireMode(autowireMode).     return this. }
true;public;1;4;/**  * Set the dependency check mode for this definition.  */ ;/**  * Set the dependency check mode for this definition.  */ public BeanDefinitionBuilder setDependencyCheck(int dependencyCheck) {     this.beanDefinition.setDependencyCheck(dependencyCheck).     return this. }
true;public;1;10;/**  * Append the specified bean name to the list of beans that this definition  * depends on.  */ ;/**  * Append the specified bean name to the list of beans that this definition  * depends on.  */ public BeanDefinitionBuilder addDependsOn(String beanName) {     if (this.beanDefinition.getDependsOn() == null) {         this.beanDefinition.setDependsOn(beanName).     } else {         String[] added = ObjectUtils.addObjectToArray(this.beanDefinition.getDependsOn(), beanName).         this.beanDefinition.setDependsOn(added).     }     return this. }
true;public;1;4;/**  * Set the role of this definition.  */ ;/**  * Set the role of this definition.  */ public BeanDefinitionBuilder setRole(int role) {     this.beanDefinition.setRole(role).     return this. }
true;public;1;6;/**  * Apply the given customizers to the underlying bean definition.  * @since 5.0  */ ;/**  * Apply the given customizers to the underlying bean definition.  * @since 5.0  */ public BeanDefinitionBuilder applyCustomizers(BeanDefinitionCustomizer... customizers) {     for (BeanDefinitionCustomizer customizer : customizers) {         customizer.customize(this.beanDefinition).     }     return this. }
