commented;modifiers;parameterAmount;loc;comment;code
false;public,final;0;3;;public final XmlReaderContext getReaderContext() {     return this.readerContext. }
false;public,final;0;3;;public final BeanDefinitionRegistry getRegistry() {     return this.readerContext.getRegistry(). }
false;public,final;0;3;;public final BeanDefinitionParserDelegate getDelegate() {     return this.delegate. }
false;public,final;0;4;;@Nullable public final BeanDefinition getContainingBeanDefinition() {     return this.containingBeanDefinition. }
false;public,final;0;3;;public final boolean isNested() {     return (this.containingBeanDefinition != null). }
false;public;0;3;;public boolean isDefaultLazyInit() {     return BeanDefinitionParserDelegate.TRUE_VALUE.equals(this.delegate.getDefaults().getLazyInit()). }
false;public;1;4;;@Nullable public Object extractSource(Object sourceCandidate) {     return this.readerContext.extractSource(sourceCandidate). }
false;public;0;4;;@Nullable public CompositeComponentDefinition getContainingComponent() {     return this.containingComponents.peek(). }
false;public;1;3;;public void pushContainingComponent(CompositeComponentDefinition containingComponent) {     this.containingComponents.push(containingComponent). }
false;public;0;3;;public CompositeComponentDefinition popContainingComponent() {     return this.containingComponents.pop(). }
false;public;0;3;;public void popAndRegisterContainingComponent() {     registerComponent(popContainingComponent()). }
false;public;1;9;;public void registerComponent(ComponentDefinition component) {     CompositeComponentDefinition containingComponent = getContainingComponent().     if (containingComponent != null) {         containingComponent.addNestedComponent(component).     } else {         this.readerContext.fireComponentRegistered(component).     } }
false;public;1;4;;public void registerBeanComponent(BeanComponentDefinition component) {     BeanDefinitionReaderUtils.registerBeanDefinition(component, getRegistry()).     registerComponent(component). }
