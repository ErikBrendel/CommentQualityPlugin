commented;modifiers;parameterAmount;loc;comment;code
true;public,final;0;3;/**  * If this returns 0, no errors were encountered during binding.  */ ;/**  * If this returns 0, no errors were encountered during binding.  */ public final int getExceptionCount() {     return this.propertyAccessExceptions.length. }
true;public,final;0;3;/**  * Return an array of the propertyAccessExceptions stored in this object.  * <p>Will return the empty array (not {@code null}) if there were no errors.  */ ;/**  * Return an array of the propertyAccessExceptions stored in this object.  * <p>Will return the empty array (not {@code null}) if there were no errors.  */ public final PropertyAccessException[] getPropertyAccessExceptions() {     return this.propertyAccessExceptions. }
true;public;1;9;/**  * Return the exception for this field, or {@code null} if there isn't any.  */ ;/**  * Return the exception for this field, or {@code null} if there isn't any.  */ @Nullable public PropertyAccessException getPropertyAccessException(String propertyName) {     for (PropertyAccessException pae : this.propertyAccessExceptions) {         if (ObjectUtils.nullSafeEquals(propertyName, pae.getPropertyName())) {             return pae.         }     }     return null. }
false;public;0;11;;@Override public String getMessage() {     StringBuilder sb = new StringBuilder("Failed properties: ").     for (int i = 0. i < this.propertyAccessExceptions.length. i++) {         sb.append(this.propertyAccessExceptions[i].getMessage()).         if (i < this.propertyAccessExceptions.length - 1) {             sb.append(". ").         }     }     return sb.toString(). }
false;public;0;11;;@Override public String toString() {     StringBuilder sb = new StringBuilder().     sb.append(getClass().getName()).append(". nested PropertyAccessExceptions (").     sb.append(getExceptionCount()).append(") are:").     for (int i = 0. i < this.propertyAccessExceptions.length. i++) {         sb.append('\n').append("PropertyAccessException ").append(i + 1).append(": ").         sb.append(this.propertyAccessExceptions[i]).     }     return sb.toString(). }
false;public;1;11;;@Override public void printStackTrace(PrintStream ps) {     synchronized (ps) {         ps.println(getClass().getName() + ". nested PropertyAccessException details (" + getExceptionCount() + ") are:").         for (int i = 0. i < this.propertyAccessExceptions.length. i++) {             ps.println("PropertyAccessException " + (i + 1) + ":").             this.propertyAccessExceptions[i].printStackTrace(ps).         }     } }
false;public;1;11;;@Override public void printStackTrace(PrintWriter pw) {     synchronized (pw) {         pw.println(getClass().getName() + ". nested PropertyAccessException details (" + getExceptionCount() + ") are:").         for (int i = 0. i < this.propertyAccessExceptions.length. i++) {             pw.println("PropertyAccessException " + (i + 1) + ":").             this.propertyAccessExceptions[i].printStackTrace(pw).         }     } }
false;public;1;15;;@Override public boolean contains(@Nullable Class<?> exType) {     if (exType == null) {         return false.     }     if (exType.isInstance(this)) {         return true.     }     for (PropertyAccessException pae : this.propertyAccessExceptions) {         if (pae.contains(exType)) {             return true.         }     }     return false. }
