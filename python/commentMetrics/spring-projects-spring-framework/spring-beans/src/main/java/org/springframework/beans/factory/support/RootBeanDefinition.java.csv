# id;timestamp;commentText;codeText;commentWords;codeWords
RootBeanDefinition -> public <T> RootBeanDefinition(Class<T> beanClass, String scope, Supplier<T> instanceSupplier);1482091545;Create a new RootBeanDefinition for a scoped bean, constructing each instance_through calling the given supplier (possibly a lambda or method reference)._@param beanClass the class of the bean to instantiate_@param scope the name of the corresponding scope_@param instanceSupplier the supplier to construct a bean instance,_as an alternative to a declaratively specified factory method_@since 5.0_@see #setInstanceSupplier(Supplier);public <T> RootBeanDefinition(Class<T> beanClass, String scope, Supplier<T> instanceSupplier) {_		super()__		setBeanClass(beanClass)__		setScope(scope)__		setInstanceSupplier(instanceSupplier)__	};create,a,new,root,bean,definition,for,a,scoped,bean,constructing,each,instance,through,calling,the,given,supplier,possibly,a,lambda,or,method,reference,param,bean,class,the,class,of,the,bean,to,instantiate,param,scope,the,name,of,the,corresponding,scope,param,instance,supplier,the,supplier,to,construct,a,bean,instance,as,an,alternative,to,a,declaratively,specified,factory,method,since,5,0,see,set,instance,supplier,supplier;public,t,root,bean,definition,class,t,bean,class,string,scope,supplier,t,instance,supplier,super,set,bean,class,bean,class,set,scope,scope,set,instance,supplier,instance,supplier
RootBeanDefinition -> public <T> RootBeanDefinition(Class<T> beanClass, String scope, Supplier<T> instanceSupplier);1483093818;Create a new RootBeanDefinition for a scoped bean, constructing each instance_through calling the given supplier (possibly a lambda or method reference)._@param beanClass the class of the bean to instantiate_@param scope the name of the corresponding scope_@param instanceSupplier the supplier to construct a bean instance,_as an alternative to a declaratively specified factory method_@since 5.0_@see #setInstanceSupplier;public <T> RootBeanDefinition(Class<T> beanClass, String scope, Supplier<T> instanceSupplier) {_		super()__		setBeanClass(beanClass)__		setScope(scope)__		setInstanceSupplier(instanceSupplier)__	};create,a,new,root,bean,definition,for,a,scoped,bean,constructing,each,instance,through,calling,the,given,supplier,possibly,a,lambda,or,method,reference,param,bean,class,the,class,of,the,bean,to,instantiate,param,scope,the,name,of,the,corresponding,scope,param,instance,supplier,the,supplier,to,construct,a,bean,instance,as,an,alternative,to,a,declaratively,specified,factory,method,since,5,0,see,set,instance,supplier;public,t,root,bean,definition,class,t,bean,class,string,scope,supplier,t,instance,supplier,super,set,bean,class,bean,class,set,scope,scope,set,instance,supplier,instance,supplier
RootBeanDefinition -> public <T> RootBeanDefinition(Class<T> beanClass, String scope, Supplier<T> instanceSupplier);1495868221;Create a new RootBeanDefinition for a scoped bean, constructing each instance_through calling the given supplier (possibly a lambda or method reference)._@param beanClass the class of the bean to instantiate_@param scope the name of the corresponding scope_@param instanceSupplier the supplier to construct a bean instance,_as an alternative to a declaratively specified factory method_@since 5.0_@see #setInstanceSupplier;public <T> RootBeanDefinition(Class<T> beanClass, String scope, Supplier<T> instanceSupplier) {_		super()__		setBeanClass(beanClass)__		setScope(scope)__		setInstanceSupplier(instanceSupplier)__	};create,a,new,root,bean,definition,for,a,scoped,bean,constructing,each,instance,through,calling,the,given,supplier,possibly,a,lambda,or,method,reference,param,bean,class,the,class,of,the,bean,to,instantiate,param,scope,the,name,of,the,corresponding,scope,param,instance,supplier,the,supplier,to,construct,a,bean,instance,as,an,alternative,to,a,declaratively,specified,factory,method,since,5,0,see,set,instance,supplier;public,t,root,bean,definition,class,t,bean,class,string,scope,supplier,t,instance,supplier,super,set,bean,class,bean,class,set,scope,scope,set,instance,supplier,instance,supplier
RootBeanDefinition -> public <T> RootBeanDefinition(Class<T> beanClass, String scope, Supplier<T> instanceSupplier);1496242568;Create a new RootBeanDefinition for a scoped bean, constructing each instance_through calling the given supplier (possibly a lambda or method reference)._@param beanClass the class of the bean to instantiate_@param scope the name of the corresponding scope_@param instanceSupplier the supplier to construct a bean instance,_as an alternative to a declaratively specified factory method_@since 5.0_@see #setInstanceSupplier;public <T> RootBeanDefinition(Class<T> beanClass, String scope, Supplier<T> instanceSupplier) {_		super()__		setBeanClass(beanClass)__		setScope(scope)__		setInstanceSupplier(instanceSupplier)__	};create,a,new,root,bean,definition,for,a,scoped,bean,constructing,each,instance,through,calling,the,given,supplier,possibly,a,lambda,or,method,reference,param,bean,class,the,class,of,the,bean,to,instantiate,param,scope,the,name,of,the,corresponding,scope,param,instance,supplier,the,supplier,to,construct,a,bean,instance,as,an,alternative,to,a,declaratively,specified,factory,method,since,5,0,see,set,instance,supplier;public,t,root,bean,definition,class,t,bean,class,string,scope,supplier,t,instance,supplier,super,set,bean,class,bean,class,set,scope,scope,set,instance,supplier,instance,supplier
RootBeanDefinition -> @Nullable 	public Method getResolvedFactoryMethod();1495868221;Return the resolved factory method as a Java Method object, if available._@return the factory method, or {@code null} if not found or not resolved yet;@Nullable_	public Method getResolvedFactoryMethod() {_		synchronized (this.constructorArgumentLock) {_			Executable candidate = this.resolvedConstructorOrFactoryMethod__			return (candidate instanceof Method ? (Method) candidate : null)__		}_	};return,the,resolved,factory,method,as,a,java,method,object,if,available,return,the,factory,method,or,code,null,if,not,found,or,not,resolved,yet;nullable,public,method,get,resolved,factory,method,synchronized,this,constructor,argument,lock,executable,candidate,this,resolved,constructor,or,factory,method,return,candidate,instanceof,method,method,candidate,null
RootBeanDefinition -> @Nullable 	public Method getResolvedFactoryMethod();1496242568;Return the resolved factory method as a Java Method object, if available._@return the factory method, or {@code null} if not found or not resolved yet;@Nullable_	public Method getResolvedFactoryMethod() {_		synchronized (this.constructorArgumentLock) {_			Executable candidate = this.resolvedConstructorOrFactoryMethod__			return (candidate instanceof Method ? (Method) candidate : null)__		}_	};return,the,resolved,factory,method,as,a,java,method,object,if,available,return,the,factory,method,or,code,null,if,not,found,or,not,resolved,yet;nullable,public,method,get,resolved,factory,method,synchronized,this,constructor,argument,lock,executable,candidate,this,resolved,constructor,or,factory,method,return,candidate,instanceof,method,method,candidate,null
RootBeanDefinition -> @Nullable 	public Method getResolvedFactoryMethod();1496243689;Return the resolved factory method as a Java Method object, if available._@return the factory method, or {@code null} if not found or not resolved yet;@Nullable_	public Method getResolvedFactoryMethod() {_		synchronized (this.constructorArgumentLock) {_			Executable candidate = this.resolvedConstructorOrFactoryMethod__			return (candidate instanceof Method ? (Method) candidate : null)__		}_	};return,the,resolved,factory,method,as,a,java,method,object,if,available,return,the,factory,method,or,code,null,if,not,found,or,not,resolved,yet;nullable,public,method,get,resolved,factory,method,synchronized,this,constructor,argument,lock,executable,candidate,this,resolved,constructor,or,factory,method,return,candidate,instanceof,method,method,candidate,null
RootBeanDefinition -> @Nullable 	public Method getResolvedFactoryMethod();1496259743;Return the resolved factory method as a Java Method object, if available._@return the factory method, or {@code null} if not found or not resolved yet;@Nullable_	public Method getResolvedFactoryMethod() {_		synchronized (this.constructorArgumentLock) {_			Executable candidate = this.resolvedConstructorOrFactoryMethod__			return (candidate instanceof Method ? (Method) candidate : null)__		}_	};return,the,resolved,factory,method,as,a,java,method,object,if,available,return,the,factory,method,or,code,null,if,not,found,or,not,resolved,yet;nullable,public,method,get,resolved,factory,method,synchronized,this,constructor,argument,lock,executable,candidate,this,resolved,constructor,or,factory,method,return,candidate,instanceof,method,method,candidate,null
RootBeanDefinition -> @Nullable 	public Method getResolvedFactoryMethod();1496837955;Return the resolved factory method as a Java Method object, if available._@return the factory method, or {@code null} if not found or not resolved yet;@Nullable_	public Method getResolvedFactoryMethod() {_		synchronized (this.constructorArgumentLock) {_			Executable candidate = this.resolvedConstructorOrFactoryMethod__			return (candidate instanceof Method ? (Method) candidate : null)__		}_	};return,the,resolved,factory,method,as,a,java,method,object,if,available,return,the,factory,method,or,code,null,if,not,found,or,not,resolved,yet;nullable,public,method,get,resolved,factory,method,synchronized,this,constructor,argument,lock,executable,candidate,this,resolved,constructor,or,factory,method,return,candidate,instanceof,method,method,candidate,null
RootBeanDefinition -> @Nullable 	public Method getResolvedFactoryMethod();1498780456;Return the resolved factory method as a Java Method object, if available._@return the factory method, or {@code null} if not found or not resolved yet;@Nullable_	public Method getResolvedFactoryMethod() {_		synchronized (this.constructorArgumentLock) {_			Executable candidate = this.resolvedConstructorOrFactoryMethod__			return (candidate instanceof Method ? (Method) candidate : null)__		}_	};return,the,resolved,factory,method,as,a,java,method,object,if,available,return,the,factory,method,or,code,null,if,not,found,or,not,resolved,yet;nullable,public,method,get,resolved,factory,method,synchronized,this,constructor,argument,lock,executable,candidate,this,resolved,constructor,or,factory,method,return,candidate,instanceof,method,method,candidate,null
RootBeanDefinition -> @Nullable 	public Method getResolvedFactoryMethod();1500448076;Return the resolved factory method as a Java Method object, if available._@return the factory method, or {@code null} if not found or not resolved yet;@Nullable_	public Method getResolvedFactoryMethod() {_		synchronized (this.constructorArgumentLock) {_			Executable candidate = this.resolvedConstructorOrFactoryMethod__			return (candidate instanceof Method ? (Method) candidate : null)__		}_	};return,the,resolved,factory,method,as,a,java,method,object,if,available,return,the,factory,method,or,code,null,if,not,found,or,not,resolved,yet;nullable,public,method,get,resolved,factory,method,synchronized,this,constructor,argument,lock,executable,candidate,this,resolved,constructor,or,factory,method,return,candidate,instanceof,method,method,candidate,null
RootBeanDefinition -> @Nullable 	public Method getResolvedFactoryMethod();1510606271;Return the resolved factory method as a Java Method object, if available._@return the factory method, or {@code null} if not found or not resolved yet;@Nullable_	public Method getResolvedFactoryMethod() {_		synchronized (this.constructorArgumentLock) {_			Executable candidate = this.resolvedConstructorOrFactoryMethod__			return (candidate instanceof Method ? (Method) candidate : null)__		}_	};return,the,resolved,factory,method,as,a,java,method,object,if,available,return,the,factory,method,or,code,null,if,not,found,or,not,resolved,yet;nullable,public,method,get,resolved,factory,method,synchronized,this,constructor,argument,lock,executable,candidate,this,resolved,constructor,or,factory,method,return,candidate,instanceof,method,method,candidate,null
RootBeanDefinition -> @Nullable 	public Method getResolvedFactoryMethod();1530174524;Return the resolved factory method as a Java Method object, if available._@return the factory method, or {@code null} if not found or not resolved yet;@Nullable_	public Method getResolvedFactoryMethod() {_		synchronized (this.constructorArgumentLock) {_			Executable candidate = this.resolvedConstructorOrFactoryMethod__			return (candidate instanceof Method ? (Method) candidate : null)__		}_	};return,the,resolved,factory,method,as,a,java,method,object,if,available,return,the,factory,method,or,code,null,if,not,found,or,not,resolved,yet;nullable,public,method,get,resolved,factory,method,synchronized,this,constructor,argument,lock,executable,candidate,this,resolved,constructor,or,factory,method,return,candidate,instanceof,method,method,candidate,null
RootBeanDefinition -> @Nullable 	public Method getResolvedFactoryMethod();1531243692;Return the resolved factory method as a Java Method object, if available._@return the factory method, or {@code null} if not found or not resolved yet;@Nullable_	public Method getResolvedFactoryMethod() {_		synchronized (this.constructorArgumentLock) {_			Executable candidate = this.resolvedConstructorOrFactoryMethod__			return (candidate instanceof Method ? (Method) candidate : null)__		}_	};return,the,resolved,factory,method,as,a,java,method,object,if,available,return,the,factory,method,or,code,null,if,not,found,or,not,resolved,yet;nullable,public,method,get,resolved,factory,method,synchronized,this,constructor,argument,lock,executable,candidate,this,resolved,constructor,or,factory,method,return,candidate,instanceof,method,method,candidate,null
RootBeanDefinition -> @Nullable 	public Method getResolvedFactoryMethod();1537388383;Return the resolved factory method as a Java Method object, if available._@return the factory method, or {@code null} if not found or not resolved yet;@Nullable_	public Method getResolvedFactoryMethod() {_		synchronized (this.constructorArgumentLock) {_			Executable candidate = this.resolvedConstructorOrFactoryMethod__			return (candidate instanceof Method ? (Method) candidate : null)__		}_	};return,the,resolved,factory,method,as,a,java,method,object,if,available,return,the,factory,method,or,code,null,if,not,found,or,not,resolved,yet;nullable,public,method,get,resolved,factory,method,synchronized,this,constructor,argument,lock,executable,candidate,this,resolved,constructor,or,factory,method,return,candidate,instanceof,method,method,candidate,null
RootBeanDefinition -> @Nullable 	public Method getResolvedFactoryMethod();1539377630;Return the resolved factory method as a Java Method object, if available._@return the factory method, or {@code null} if not found or not resolved yet;@Nullable_	public Method getResolvedFactoryMethod() {_		return this.factoryMethodToIntrospect__	};return,the,resolved,factory,method,as,a,java,method,object,if,available,return,the,factory,method,or,code,null,if,not,found,or,not,resolved,yet;nullable,public,method,get,resolved,factory,method,return,this,factory,method,to,introspect
RootBeanDefinition -> @Deprecated 	public RootBeanDefinition(Class beanClass, boolean singleton);1328020251;Create a new RootBeanDefinition with the given singleton status._@param beanClass the class of the bean to instantiate_@param singleton the singleton status of the bean_@deprecated since Spring 2.5, in favor of {@link #setScope};@Deprecated_	public RootBeanDefinition(Class beanClass, boolean singleton) {_		super()__		setBeanClass(beanClass)__		setSingleton(singleton)__	};create,a,new,root,bean,definition,with,the,given,singleton,status,param,bean,class,the,class,of,the,bean,to,instantiate,param,singleton,the,singleton,status,of,the,bean,deprecated,since,spring,2,5,in,favor,of,link,set,scope;deprecated,public,root,bean,definition,class,bean,class,boolean,singleton,super,set,bean,class,bean,class,set,singleton,singleton
RootBeanDefinition -> @Deprecated 	public RootBeanDefinition(Class beanClass, boolean singleton);1352412675;Create a new RootBeanDefinition with the given singleton status._@param beanClass the class of the bean to instantiate_@param singleton the singleton status of the bean_@deprecated since Spring 2.5, in favor of {@link #setScope};@Deprecated_	public RootBeanDefinition(Class beanClass, boolean singleton) {_		super()__		setBeanClass(beanClass)__		setSingleton(singleton)__	};create,a,new,root,bean,definition,with,the,given,singleton,status,param,bean,class,the,class,of,the,bean,to,instantiate,param,singleton,the,singleton,status,of,the,bean,deprecated,since,spring,2,5,in,favor,of,link,set,scope;deprecated,public,root,bean,definition,class,bean,class,boolean,singleton,super,set,bean,class,bean,class,set,singleton,singleton
RootBeanDefinition -> @Deprecated 	public RootBeanDefinition(Class beanClass, boolean singleton);1355352386;Create a new RootBeanDefinition with the given singleton status._@param beanClass the class of the bean to instantiate_@param singleton the singleton status of the bean_@deprecated since Spring 2.5, in favor of {@link #setScope};@Deprecated_	public RootBeanDefinition(Class beanClass, boolean singleton) {_		super()__		setBeanClass(beanClass)__		setSingleton(singleton)__	};create,a,new,root,bean,definition,with,the,given,singleton,status,param,bean,class,the,class,of,the,bean,to,instantiate,param,singleton,the,singleton,status,of,the,bean,deprecated,since,spring,2,5,in,favor,of,link,set,scope;deprecated,public,root,bean,definition,class,bean,class,boolean,singleton,super,set,bean,class,bean,class,set,singleton,singleton
RootBeanDefinition -> @Deprecated 	public RootBeanDefinition(Class beanClass, boolean singleton);1356735495;Create a new RootBeanDefinition with the given singleton status._@param beanClass the class of the bean to instantiate_@param singleton the singleton status of the bean_@deprecated since Spring 2.5, in favor of {@link #setScope};@Deprecated_	public RootBeanDefinition(Class beanClass, boolean singleton) {_		super()__		setBeanClass(beanClass)__		setSingleton(singleton)__	};create,a,new,root,bean,definition,with,the,given,singleton,status,param,bean,class,the,class,of,the,bean,to,instantiate,param,singleton,the,singleton,status,of,the,bean,deprecated,since,spring,2,5,in,favor,of,link,set,scope;deprecated,public,root,bean,definition,class,bean,class,boolean,singleton,super,set,bean,class,bean,class,set,singleton,singleton
RootBeanDefinition -> @Deprecated 	public RootBeanDefinition(Class beanClass, boolean singleton);1357119239;Create a new RootBeanDefinition with the given singleton status._@param beanClass the class of the bean to instantiate_@param singleton the singleton status of the bean_@deprecated since Spring 2.5, in favor of {@link #setScope};@Deprecated_	public RootBeanDefinition(Class beanClass, boolean singleton) {_		super()__		setBeanClass(beanClass)__		setSingleton(singleton)__	};create,a,new,root,bean,definition,with,the,given,singleton,status,param,bean,class,the,class,of,the,bean,to,instantiate,param,singleton,the,singleton,status,of,the,bean,deprecated,since,spring,2,5,in,favor,of,link,set,scope;deprecated,public,root,bean,definition,class,bean,class,boolean,singleton,super,set,bean,class,bean,class,set,singleton,singleton
RootBeanDefinition -> @Deprecated 	public RootBeanDefinition(Class beanClass, boolean singleton);1362408075;Create a new RootBeanDefinition with the given singleton status._@param beanClass the class of the bean to instantiate_@param singleton the singleton status of the bean_@deprecated since Spring 2.5, in favor of {@link #setScope};@Deprecated_	public RootBeanDefinition(Class beanClass, boolean singleton) {_		super()__		setBeanClass(beanClass)__		setSingleton(singleton)__	};create,a,new,root,bean,definition,with,the,given,singleton,status,param,bean,class,the,class,of,the,bean,to,instantiate,param,singleton,the,singleton,status,of,the,bean,deprecated,since,spring,2,5,in,favor,of,link,set,scope;deprecated,public,root,bean,definition,class,bean,class,boolean,singleton,super,set,bean,class,bean,class,set,singleton,singleton
RootBeanDefinition -> @Deprecated 	public RootBeanDefinition(Class beanClass, boolean singleton);1364505266;Create a new RootBeanDefinition with the given singleton status._@param beanClass the class of the bean to instantiate_@param singleton the singleton status of the bean_@deprecated since Spring 2.5, in favor of {@link #setScope};@Deprecated_	public RootBeanDefinition(Class beanClass, boolean singleton) {_		super()__		setBeanClass(beanClass)__		setSingleton(singleton)__	};create,a,new,root,bean,definition,with,the,given,singleton,status,param,bean,class,the,class,of,the,bean,to,instantiate,param,singleton,the,singleton,status,of,the,bean,deprecated,since,spring,2,5,in,favor,of,link,set,scope;deprecated,public,root,bean,definition,class,bean,class,boolean,singleton,super,set,bean,class,bean,class,set,singleton,singleton
RootBeanDefinition -> public RootBeanDefinition(Class<?> beanClass, int autowireMode, boolean dependencyCheck);1368546246;Create a new RootBeanDefinition for a singleton,_using the given autowire mode._@param beanClass the class of the bean to instantiate_@param autowireMode by name or type, using the constants in this interface_@param dependencyCheck whether to perform a dependency check for objects_(not applicable to autowiring a constructor, thus ignored there);public RootBeanDefinition(Class<?> beanClass, int autowireMode, boolean dependencyCheck) {_		super()__		setBeanClass(beanClass)__		setAutowireMode(autowireMode)__		if (dependencyCheck && getResolvedAutowireMode() != AUTOWIRE_CONSTRUCTOR) {_			setDependencyCheck(RootBeanDefinition.DEPENDENCY_CHECK_OBJECTS)__		}_	};create,a,new,root,bean,definition,for,a,singleton,using,the,given,autowire,mode,param,bean,class,the,class,of,the,bean,to,instantiate,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,param,dependency,check,whether,to,perform,a,dependency,check,for,objects,not,applicable,to,autowiring,a,constructor,thus,ignored,there;public,root,bean,definition,class,bean,class,int,autowire,mode,boolean,dependency,check,super,set,bean,class,bean,class,set,autowire,mode,autowire,mode,if,dependency,check,get,resolved,autowire,mode,set,dependency,check,root,bean,definition
RootBeanDefinition -> public RootBeanDefinition(Class<?> beanClass, int autowireMode, boolean dependencyCheck);1368628892;Create a new RootBeanDefinition for a singleton,_using the given autowire mode._@param beanClass the class of the bean to instantiate_@param autowireMode by name or type, using the constants in this interface_@param dependencyCheck whether to perform a dependency check for objects_(not applicable to autowiring a constructor, thus ignored there);public RootBeanDefinition(Class<?> beanClass, int autowireMode, boolean dependencyCheck) {_		super()__		setBeanClass(beanClass)__		setAutowireMode(autowireMode)__		if (dependencyCheck && getResolvedAutowireMode() != AUTOWIRE_CONSTRUCTOR) {_			setDependencyCheck(RootBeanDefinition.DEPENDENCY_CHECK_OBJECTS)__		}_	};create,a,new,root,bean,definition,for,a,singleton,using,the,given,autowire,mode,param,bean,class,the,class,of,the,bean,to,instantiate,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,param,dependency,check,whether,to,perform,a,dependency,check,for,objects,not,applicable,to,autowiring,a,constructor,thus,ignored,there;public,root,bean,definition,class,bean,class,int,autowire,mode,boolean,dependency,check,super,set,bean,class,bean,class,set,autowire,mode,autowire,mode,if,dependency,check,get,resolved,autowire,mode,set,dependency,check,root,bean,definition
RootBeanDefinition -> public RootBeanDefinition(Class<?> beanClass, int autowireMode, boolean dependencyCheck);1382826936;Create a new RootBeanDefinition for a singleton,_using the given autowire mode._@param beanClass the class of the bean to instantiate_@param autowireMode by name or type, using the constants in this interface_@param dependencyCheck whether to perform a dependency check for objects_(not applicable to autowiring a constructor, thus ignored there);public RootBeanDefinition(Class<?> beanClass, int autowireMode, boolean dependencyCheck) {_		super()__		setBeanClass(beanClass)__		setAutowireMode(autowireMode)__		if (dependencyCheck && getResolvedAutowireMode() != AUTOWIRE_CONSTRUCTOR) {_			setDependencyCheck(RootBeanDefinition.DEPENDENCY_CHECK_OBJECTS)__		}_	};create,a,new,root,bean,definition,for,a,singleton,using,the,given,autowire,mode,param,bean,class,the,class,of,the,bean,to,instantiate,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,param,dependency,check,whether,to,perform,a,dependency,check,for,objects,not,applicable,to,autowiring,a,constructor,thus,ignored,there;public,root,bean,definition,class,bean,class,int,autowire,mode,boolean,dependency,check,super,set,bean,class,bean,class,set,autowire,mode,autowire,mode,if,dependency,check,get,resolved,autowire,mode,set,dependency,check,root,bean,definition
RootBeanDefinition -> public RootBeanDefinition(Class<?> beanClass, int autowireMode, boolean dependencyCheck);1390396833;Create a new RootBeanDefinition for a singleton,_using the given autowire mode._@param beanClass the class of the bean to instantiate_@param autowireMode by name or type, using the constants in this interface_@param dependencyCheck whether to perform a dependency check for objects_(not applicable to autowiring a constructor, thus ignored there);public RootBeanDefinition(Class<?> beanClass, int autowireMode, boolean dependencyCheck) {_		super()__		setBeanClass(beanClass)__		setAutowireMode(autowireMode)__		if (dependencyCheck && getResolvedAutowireMode() != AUTOWIRE_CONSTRUCTOR) {_			setDependencyCheck(RootBeanDefinition.DEPENDENCY_CHECK_OBJECTS)__		}_	};create,a,new,root,bean,definition,for,a,singleton,using,the,given,autowire,mode,param,bean,class,the,class,of,the,bean,to,instantiate,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,param,dependency,check,whether,to,perform,a,dependency,check,for,objects,not,applicable,to,autowiring,a,constructor,thus,ignored,there;public,root,bean,definition,class,bean,class,int,autowire,mode,boolean,dependency,check,super,set,bean,class,bean,class,set,autowire,mode,autowire,mode,if,dependency,check,get,resolved,autowire,mode,set,dependency,check,root,bean,definition
RootBeanDefinition -> public RootBeanDefinition(Class<?> beanClass, int autowireMode, boolean dependencyCheck);1467730834;Create a new RootBeanDefinition for a singleton,_using the given autowire mode._@param beanClass the class of the bean to instantiate_@param autowireMode by name or type, using the constants in this interface_@param dependencyCheck whether to perform a dependency check for objects_(not applicable to autowiring a constructor, thus ignored there);public RootBeanDefinition(Class<?> beanClass, int autowireMode, boolean dependencyCheck) {_		super()__		setBeanClass(beanClass)__		setAutowireMode(autowireMode)__		if (dependencyCheck && getResolvedAutowireMode() != AUTOWIRE_CONSTRUCTOR) {_			setDependencyCheck(RootBeanDefinition.DEPENDENCY_CHECK_OBJECTS)__		}_	};create,a,new,root,bean,definition,for,a,singleton,using,the,given,autowire,mode,param,bean,class,the,class,of,the,bean,to,instantiate,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,param,dependency,check,whether,to,perform,a,dependency,check,for,objects,not,applicable,to,autowiring,a,constructor,thus,ignored,there;public,root,bean,definition,class,bean,class,int,autowire,mode,boolean,dependency,check,super,set,bean,class,bean,class,set,autowire,mode,autowire,mode,if,dependency,check,get,resolved,autowire,mode,set,dependency,check,root,bean,definition
RootBeanDefinition -> public RootBeanDefinition(Class<?> beanClass, int autowireMode, boolean dependencyCheck);1467744603;Create a new RootBeanDefinition for a singleton,_using the given autowire mode._@param beanClass the class of the bean to instantiate_@param autowireMode by name or type, using the constants in this interface_@param dependencyCheck whether to perform a dependency check for objects_(not applicable to autowiring a constructor, thus ignored there);public RootBeanDefinition(Class<?> beanClass, int autowireMode, boolean dependencyCheck) {_		super()__		setBeanClass(beanClass)__		setAutowireMode(autowireMode)__		if (dependencyCheck && getResolvedAutowireMode() != AUTOWIRE_CONSTRUCTOR) {_			setDependencyCheck(DEPENDENCY_CHECK_OBJECTS)__		}_	};create,a,new,root,bean,definition,for,a,singleton,using,the,given,autowire,mode,param,bean,class,the,class,of,the,bean,to,instantiate,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,param,dependency,check,whether,to,perform,a,dependency,check,for,objects,not,applicable,to,autowiring,a,constructor,thus,ignored,there;public,root,bean,definition,class,bean,class,int,autowire,mode,boolean,dependency,check,super,set,bean,class,bean,class,set,autowire,mode,autowire,mode,if,dependency,check,get,resolved,autowire,mode,set,dependency,check
RootBeanDefinition -> public RootBeanDefinition(Class<?> beanClass, int autowireMode, boolean dependencyCheck);1469367243;Create a new RootBeanDefinition for a singleton,_using the given autowire mode._@param beanClass the class of the bean to instantiate_@param autowireMode by name or type, using the constants in this interface_@param dependencyCheck whether to perform a dependency check for objects_(not applicable to autowiring a constructor, thus ignored there);public RootBeanDefinition(Class<?> beanClass, int autowireMode, boolean dependencyCheck) {_		super()__		setBeanClass(beanClass)__		setAutowireMode(autowireMode)__		if (dependencyCheck && getResolvedAutowireMode() != AUTOWIRE_CONSTRUCTOR) {_			setDependencyCheck(DEPENDENCY_CHECK_OBJECTS)__		}_	};create,a,new,root,bean,definition,for,a,singleton,using,the,given,autowire,mode,param,bean,class,the,class,of,the,bean,to,instantiate,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,param,dependency,check,whether,to,perform,a,dependency,check,for,objects,not,applicable,to,autowiring,a,constructor,thus,ignored,there;public,root,bean,definition,class,bean,class,int,autowire,mode,boolean,dependency,check,super,set,bean,class,bean,class,set,autowire,mode,autowire,mode,if,dependency,check,get,resolved,autowire,mode,set,dependency,check
RootBeanDefinition -> public RootBeanDefinition(Class<?> beanClass, int autowireMode, boolean dependencyCheck);1471445956;Create a new RootBeanDefinition for a singleton,_using the given autowire mode._@param beanClass the class of the bean to instantiate_@param autowireMode by name or type, using the constants in this interface_@param dependencyCheck whether to perform a dependency check for objects_(not applicable to autowiring a constructor, thus ignored there);public RootBeanDefinition(Class<?> beanClass, int autowireMode, boolean dependencyCheck) {_		super()__		setBeanClass(beanClass)__		setAutowireMode(autowireMode)__		if (dependencyCheck && getResolvedAutowireMode() != AUTOWIRE_CONSTRUCTOR) {_			setDependencyCheck(DEPENDENCY_CHECK_OBJECTS)__		}_	};create,a,new,root,bean,definition,for,a,singleton,using,the,given,autowire,mode,param,bean,class,the,class,of,the,bean,to,instantiate,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,param,dependency,check,whether,to,perform,a,dependency,check,for,objects,not,applicable,to,autowiring,a,constructor,thus,ignored,there;public,root,bean,definition,class,bean,class,int,autowire,mode,boolean,dependency,check,super,set,bean,class,bean,class,set,autowire,mode,autowire,mode,if,dependency,check,get,resolved,autowire,mode,set,dependency,check
RootBeanDefinition -> public RootBeanDefinition(Class<?> beanClass, int autowireMode, boolean dependencyCheck);1474010431;Create a new RootBeanDefinition for a singleton,_using the given autowire mode._@param beanClass the class of the bean to instantiate_@param autowireMode by name or type, using the constants in this interface_@param dependencyCheck whether to perform a dependency check for objects_(not applicable to autowiring a constructor, thus ignored there);public RootBeanDefinition(Class<?> beanClass, int autowireMode, boolean dependencyCheck) {_		super()__		setBeanClass(beanClass)__		setAutowireMode(autowireMode)__		if (dependencyCheck && getResolvedAutowireMode() != AUTOWIRE_CONSTRUCTOR) {_			setDependencyCheck(DEPENDENCY_CHECK_OBJECTS)__		}_	};create,a,new,root,bean,definition,for,a,singleton,using,the,given,autowire,mode,param,bean,class,the,class,of,the,bean,to,instantiate,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,param,dependency,check,whether,to,perform,a,dependency,check,for,objects,not,applicable,to,autowiring,a,constructor,thus,ignored,there;public,root,bean,definition,class,bean,class,int,autowire,mode,boolean,dependency,check,super,set,bean,class,bean,class,set,autowire,mode,autowire,mode,if,dependency,check,get,resolved,autowire,mode,set,dependency,check
RootBeanDefinition -> public RootBeanDefinition(Class<?> beanClass, int autowireMode, boolean dependencyCheck);1474014845;Create a new RootBeanDefinition for a singleton,_using the given autowire mode._@param beanClass the class of the bean to instantiate_@param autowireMode by name or type, using the constants in this interface_@param dependencyCheck whether to perform a dependency check for objects_(not applicable to autowiring a constructor, thus ignored there);public RootBeanDefinition(Class<?> beanClass, int autowireMode, boolean dependencyCheck) {_		super()__		setBeanClass(beanClass)__		setAutowireMode(autowireMode)__		if (dependencyCheck && getResolvedAutowireMode() != AUTOWIRE_CONSTRUCTOR) {_			setDependencyCheck(DEPENDENCY_CHECK_OBJECTS)__		}_	};create,a,new,root,bean,definition,for,a,singleton,using,the,given,autowire,mode,param,bean,class,the,class,of,the,bean,to,instantiate,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,param,dependency,check,whether,to,perform,a,dependency,check,for,objects,not,applicable,to,autowiring,a,constructor,thus,ignored,there;public,root,bean,definition,class,bean,class,int,autowire,mode,boolean,dependency,check,super,set,bean,class,bean,class,set,autowire,mode,autowire,mode,if,dependency,check,get,resolved,autowire,mode,set,dependency,check
RootBeanDefinition -> public RootBeanDefinition(Class<?> beanClass, int autowireMode, boolean dependencyCheck);1482012648;Create a new RootBeanDefinition for a singleton,_using the given autowire mode._@param beanClass the class of the bean to instantiate_@param autowireMode by name or type, using the constants in this interface_@param dependencyCheck whether to perform a dependency check for objects_(not applicable to autowiring a constructor, thus ignored there);public RootBeanDefinition(Class<?> beanClass, int autowireMode, boolean dependencyCheck) {_		super()__		setBeanClass(beanClass)__		setAutowireMode(autowireMode)__		if (dependencyCheck && getResolvedAutowireMode() != AUTOWIRE_CONSTRUCTOR) {_			setDependencyCheck(DEPENDENCY_CHECK_OBJECTS)__		}_	};create,a,new,root,bean,definition,for,a,singleton,using,the,given,autowire,mode,param,bean,class,the,class,of,the,bean,to,instantiate,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,param,dependency,check,whether,to,perform,a,dependency,check,for,objects,not,applicable,to,autowiring,a,constructor,thus,ignored,there;public,root,bean,definition,class,bean,class,int,autowire,mode,boolean,dependency,check,super,set,bean,class,bean,class,set,autowire,mode,autowire,mode,if,dependency,check,get,resolved,autowire,mode,set,dependency,check
RootBeanDefinition -> public RootBeanDefinition(Class<?> beanClass, int autowireMode, boolean dependencyCheck);1482091545;Create a new RootBeanDefinition for a singleton,_using the given autowire mode._@param beanClass the class of the bean to instantiate_@param autowireMode by name or type, using the constants in this interface_@param dependencyCheck whether to perform a dependency check for objects_(not applicable to autowiring a constructor, thus ignored there);public RootBeanDefinition(Class<?> beanClass, int autowireMode, boolean dependencyCheck) {_		super()__		setBeanClass(beanClass)__		setAutowireMode(autowireMode)__		if (dependencyCheck && getResolvedAutowireMode() != AUTOWIRE_CONSTRUCTOR) {_			setDependencyCheck(DEPENDENCY_CHECK_OBJECTS)__		}_	};create,a,new,root,bean,definition,for,a,singleton,using,the,given,autowire,mode,param,bean,class,the,class,of,the,bean,to,instantiate,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,param,dependency,check,whether,to,perform,a,dependency,check,for,objects,not,applicable,to,autowiring,a,constructor,thus,ignored,there;public,root,bean,definition,class,bean,class,int,autowire,mode,boolean,dependency,check,super,set,bean,class,bean,class,set,autowire,mode,autowire,mode,if,dependency,check,get,resolved,autowire,mode,set,dependency,check
RootBeanDefinition -> public RootBeanDefinition(Class<?> beanClass, int autowireMode, boolean dependencyCheck);1483093818;Create a new RootBeanDefinition for a singleton,_using the given autowire mode._@param beanClass the class of the bean to instantiate_@param autowireMode by name or type, using the constants in this interface_@param dependencyCheck whether to perform a dependency check for objects_(not applicable to autowiring a constructor, thus ignored there);public RootBeanDefinition(Class<?> beanClass, int autowireMode, boolean dependencyCheck) {_		super()__		setBeanClass(beanClass)__		setAutowireMode(autowireMode)__		if (dependencyCheck && getResolvedAutowireMode() != AUTOWIRE_CONSTRUCTOR) {_			setDependencyCheck(DEPENDENCY_CHECK_OBJECTS)__		}_	};create,a,new,root,bean,definition,for,a,singleton,using,the,given,autowire,mode,param,bean,class,the,class,of,the,bean,to,instantiate,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,param,dependency,check,whether,to,perform,a,dependency,check,for,objects,not,applicable,to,autowiring,a,constructor,thus,ignored,there;public,root,bean,definition,class,bean,class,int,autowire,mode,boolean,dependency,check,super,set,bean,class,bean,class,set,autowire,mode,autowire,mode,if,dependency,check,get,resolved,autowire,mode,set,dependency,check
RootBeanDefinition -> public RootBeanDefinition(Class<?> beanClass, int autowireMode, boolean dependencyCheck);1495868221;Create a new RootBeanDefinition for a singleton,_using the given autowire mode._@param beanClass the class of the bean to instantiate_@param autowireMode by name or type, using the constants in this interface_@param dependencyCheck whether to perform a dependency check for objects_(not applicable to autowiring a constructor, thus ignored there);public RootBeanDefinition(Class<?> beanClass, int autowireMode, boolean dependencyCheck) {_		super()__		setBeanClass(beanClass)__		setAutowireMode(autowireMode)__		if (dependencyCheck && getResolvedAutowireMode() != AUTOWIRE_CONSTRUCTOR) {_			setDependencyCheck(DEPENDENCY_CHECK_OBJECTS)__		}_	};create,a,new,root,bean,definition,for,a,singleton,using,the,given,autowire,mode,param,bean,class,the,class,of,the,bean,to,instantiate,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,param,dependency,check,whether,to,perform,a,dependency,check,for,objects,not,applicable,to,autowiring,a,constructor,thus,ignored,there;public,root,bean,definition,class,bean,class,int,autowire,mode,boolean,dependency,check,super,set,bean,class,bean,class,set,autowire,mode,autowire,mode,if,dependency,check,get,resolved,autowire,mode,set,dependency,check
RootBeanDefinition -> public RootBeanDefinition(Class<?> beanClass, int autowireMode, boolean dependencyCheck);1496242568;Create a new RootBeanDefinition for a singleton,_using the given autowire mode._@param beanClass the class of the bean to instantiate_@param autowireMode by name or type, using the constants in this interface_@param dependencyCheck whether to perform a dependency check for objects_(not applicable to autowiring a constructor, thus ignored there);public RootBeanDefinition(Class<?> beanClass, int autowireMode, boolean dependencyCheck) {_		super()__		setBeanClass(beanClass)__		setAutowireMode(autowireMode)__		if (dependencyCheck && getResolvedAutowireMode() != AUTOWIRE_CONSTRUCTOR) {_			setDependencyCheck(DEPENDENCY_CHECK_OBJECTS)__		}_	};create,a,new,root,bean,definition,for,a,singleton,using,the,given,autowire,mode,param,bean,class,the,class,of,the,bean,to,instantiate,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,param,dependency,check,whether,to,perform,a,dependency,check,for,objects,not,applicable,to,autowiring,a,constructor,thus,ignored,there;public,root,bean,definition,class,bean,class,int,autowire,mode,boolean,dependency,check,super,set,bean,class,bean,class,set,autowire,mode,autowire,mode,if,dependency,check,get,resolved,autowire,mode,set,dependency,check
RootBeanDefinition -> @Nullable 	public BeanDefinitionHolder getDecoratedDefinition();1495868221;Return the target definition that is being decorated by this bean definition, if any.;@Nullable_	public BeanDefinitionHolder getDecoratedDefinition() {_		return this.decoratedDefinition__	};return,the,target,definition,that,is,being,decorated,by,this,bean,definition,if,any;nullable,public,bean,definition,holder,get,decorated,definition,return,this,decorated,definition
RootBeanDefinition -> @Nullable 	public BeanDefinitionHolder getDecoratedDefinition();1496242568;Return the target definition that is being decorated by this bean definition, if any.;@Nullable_	public BeanDefinitionHolder getDecoratedDefinition() {_		return this.decoratedDefinition__	};return,the,target,definition,that,is,being,decorated,by,this,bean,definition,if,any;nullable,public,bean,definition,holder,get,decorated,definition,return,this,decorated,definition
RootBeanDefinition -> @Nullable 	public BeanDefinitionHolder getDecoratedDefinition();1496243689;Return the target definition that is being decorated by this bean definition, if any.;@Nullable_	public BeanDefinitionHolder getDecoratedDefinition() {_		return this.decoratedDefinition__	};return,the,target,definition,that,is,being,decorated,by,this,bean,definition,if,any;nullable,public,bean,definition,holder,get,decorated,definition,return,this,decorated,definition
RootBeanDefinition -> @Nullable 	public BeanDefinitionHolder getDecoratedDefinition();1496259743;Return the target definition that is being decorated by this bean definition, if any.;@Nullable_	public BeanDefinitionHolder getDecoratedDefinition() {_		return this.decoratedDefinition__	};return,the,target,definition,that,is,being,decorated,by,this,bean,definition,if,any;nullable,public,bean,definition,holder,get,decorated,definition,return,this,decorated,definition
RootBeanDefinition -> @Nullable 	public BeanDefinitionHolder getDecoratedDefinition();1496837955;Return the target definition that is being decorated by this bean definition, if any.;@Nullable_	public BeanDefinitionHolder getDecoratedDefinition() {_		return this.decoratedDefinition__	};return,the,target,definition,that,is,being,decorated,by,this,bean,definition,if,any;nullable,public,bean,definition,holder,get,decorated,definition,return,this,decorated,definition
RootBeanDefinition -> @Nullable 	public BeanDefinitionHolder getDecoratedDefinition();1498780456;Return the target definition that is being decorated by this bean definition, if any.;@Nullable_	public BeanDefinitionHolder getDecoratedDefinition() {_		return this.decoratedDefinition__	};return,the,target,definition,that,is,being,decorated,by,this,bean,definition,if,any;nullable,public,bean,definition,holder,get,decorated,definition,return,this,decorated,definition
RootBeanDefinition -> @Nullable 	public BeanDefinitionHolder getDecoratedDefinition();1500448076;Return the target definition that is being decorated by this bean definition, if any.;@Nullable_	public BeanDefinitionHolder getDecoratedDefinition() {_		return this.decoratedDefinition__	};return,the,target,definition,that,is,being,decorated,by,this,bean,definition,if,any;nullable,public,bean,definition,holder,get,decorated,definition,return,this,decorated,definition
RootBeanDefinition -> @Nullable 	public BeanDefinitionHolder getDecoratedDefinition();1510606271;Return the target definition that is being decorated by this bean definition, if any.;@Nullable_	public BeanDefinitionHolder getDecoratedDefinition() {_		return this.decoratedDefinition__	};return,the,target,definition,that,is,being,decorated,by,this,bean,definition,if,any;nullable,public,bean,definition,holder,get,decorated,definition,return,this,decorated,definition
RootBeanDefinition -> @Nullable 	public BeanDefinitionHolder getDecoratedDefinition();1530174524;Return the target definition that is being decorated by this bean definition, if any.;@Nullable_	public BeanDefinitionHolder getDecoratedDefinition() {_		return this.decoratedDefinition__	};return,the,target,definition,that,is,being,decorated,by,this,bean,definition,if,any;nullable,public,bean,definition,holder,get,decorated,definition,return,this,decorated,definition
RootBeanDefinition -> @Nullable 	public BeanDefinitionHolder getDecoratedDefinition();1531243692;Return the target definition that is being decorated by this bean definition, if any.;@Nullable_	public BeanDefinitionHolder getDecoratedDefinition() {_		return this.decoratedDefinition__	};return,the,target,definition,that,is,being,decorated,by,this,bean,definition,if,any;nullable,public,bean,definition,holder,get,decorated,definition,return,this,decorated,definition
RootBeanDefinition -> @Nullable 	public BeanDefinitionHolder getDecoratedDefinition();1537388383;Return the target definition that is being decorated by this bean definition, if any.;@Nullable_	public BeanDefinitionHolder getDecoratedDefinition() {_		return this.decoratedDefinition__	};return,the,target,definition,that,is,being,decorated,by,this,bean,definition,if,any;nullable,public,bean,definition,holder,get,decorated,definition,return,this,decorated,definition
RootBeanDefinition -> @Nullable 	public BeanDefinitionHolder getDecoratedDefinition();1539377630;Return the target definition that is being decorated by this bean definition, if any.;@Nullable_	public BeanDefinitionHolder getDecoratedDefinition() {_		return this.decoratedDefinition__	};return,the,target,definition,that,is,being,decorated,by,this,bean,definition,if,any;nullable,public,bean,definition,holder,get,decorated,definition,return,this,decorated,definition
RootBeanDefinition -> @Deprecated 	public RootBeanDefinition(Class beanClass, MutablePropertyValues pvs, boolean singleton);1328020251;Create a new RootBeanDefinition with the given singleton status,_providing property values._@param beanClass the class of the bean to instantiate_@param pvs the property values to apply_@param singleton the singleton status of the bean_@deprecated since Spring 2.5, in favor of {@link #setScope};@Deprecated_	public RootBeanDefinition(Class beanClass, MutablePropertyValues pvs, boolean singleton) {_		super(null, pvs)__		setBeanClass(beanClass)__		setSingleton(singleton)__	};create,a,new,root,bean,definition,with,the,given,singleton,status,providing,property,values,param,bean,class,the,class,of,the,bean,to,instantiate,param,pvs,the,property,values,to,apply,param,singleton,the,singleton,status,of,the,bean,deprecated,since,spring,2,5,in,favor,of,link,set,scope;deprecated,public,root,bean,definition,class,bean,class,mutable,property,values,pvs,boolean,singleton,super,null,pvs,set,bean,class,bean,class,set,singleton,singleton
RootBeanDefinition -> @Deprecated 	public RootBeanDefinition(Class beanClass, MutablePropertyValues pvs, boolean singleton);1352412675;Create a new RootBeanDefinition with the given singleton status,_providing property values._@param beanClass the class of the bean to instantiate_@param pvs the property values to apply_@param singleton the singleton status of the bean_@deprecated since Spring 2.5, in favor of {@link #setScope};@Deprecated_	public RootBeanDefinition(Class beanClass, MutablePropertyValues pvs, boolean singleton) {_		super(null, pvs)__		setBeanClass(beanClass)__		setSingleton(singleton)__	};create,a,new,root,bean,definition,with,the,given,singleton,status,providing,property,values,param,bean,class,the,class,of,the,bean,to,instantiate,param,pvs,the,property,values,to,apply,param,singleton,the,singleton,status,of,the,bean,deprecated,since,spring,2,5,in,favor,of,link,set,scope;deprecated,public,root,bean,definition,class,bean,class,mutable,property,values,pvs,boolean,singleton,super,null,pvs,set,bean,class,bean,class,set,singleton,singleton
RootBeanDefinition -> @Deprecated 	public RootBeanDefinition(Class beanClass, MutablePropertyValues pvs, boolean singleton);1355352386;Create a new RootBeanDefinition with the given singleton status,_providing property values._@param beanClass the class of the bean to instantiate_@param pvs the property values to apply_@param singleton the singleton status of the bean_@deprecated since Spring 2.5, in favor of {@link #setScope};@Deprecated_	public RootBeanDefinition(Class beanClass, MutablePropertyValues pvs, boolean singleton) {_		super(null, pvs)__		setBeanClass(beanClass)__		setSingleton(singleton)__	};create,a,new,root,bean,definition,with,the,given,singleton,status,providing,property,values,param,bean,class,the,class,of,the,bean,to,instantiate,param,pvs,the,property,values,to,apply,param,singleton,the,singleton,status,of,the,bean,deprecated,since,spring,2,5,in,favor,of,link,set,scope;deprecated,public,root,bean,definition,class,bean,class,mutable,property,values,pvs,boolean,singleton,super,null,pvs,set,bean,class,bean,class,set,singleton,singleton
RootBeanDefinition -> @Deprecated 	public RootBeanDefinition(Class beanClass, MutablePropertyValues pvs, boolean singleton);1356735495;Create a new RootBeanDefinition with the given singleton status,_providing property values._@param beanClass the class of the bean to instantiate_@param pvs the property values to apply_@param singleton the singleton status of the bean_@deprecated since Spring 2.5, in favor of {@link #setScope};@Deprecated_	public RootBeanDefinition(Class beanClass, MutablePropertyValues pvs, boolean singleton) {_		super(null, pvs)__		setBeanClass(beanClass)__		setSingleton(singleton)__	};create,a,new,root,bean,definition,with,the,given,singleton,status,providing,property,values,param,bean,class,the,class,of,the,bean,to,instantiate,param,pvs,the,property,values,to,apply,param,singleton,the,singleton,status,of,the,bean,deprecated,since,spring,2,5,in,favor,of,link,set,scope;deprecated,public,root,bean,definition,class,bean,class,mutable,property,values,pvs,boolean,singleton,super,null,pvs,set,bean,class,bean,class,set,singleton,singleton
RootBeanDefinition -> @Deprecated 	public RootBeanDefinition(Class beanClass, MutablePropertyValues pvs, boolean singleton);1357119239;Create a new RootBeanDefinition with the given singleton status,_providing property values._@param beanClass the class of the bean to instantiate_@param pvs the property values to apply_@param singleton the singleton status of the bean_@deprecated since Spring 2.5, in favor of {@link #setScope};@Deprecated_	public RootBeanDefinition(Class beanClass, MutablePropertyValues pvs, boolean singleton) {_		super(null, pvs)__		setBeanClass(beanClass)__		setSingleton(singleton)__	};create,a,new,root,bean,definition,with,the,given,singleton,status,providing,property,values,param,bean,class,the,class,of,the,bean,to,instantiate,param,pvs,the,property,values,to,apply,param,singleton,the,singleton,status,of,the,bean,deprecated,since,spring,2,5,in,favor,of,link,set,scope;deprecated,public,root,bean,definition,class,bean,class,mutable,property,values,pvs,boolean,singleton,super,null,pvs,set,bean,class,bean,class,set,singleton,singleton
RootBeanDefinition -> @Deprecated 	public RootBeanDefinition(Class beanClass, MutablePropertyValues pvs, boolean singleton);1362408075;Create a new RootBeanDefinition with the given singleton status,_providing property values._@param beanClass the class of the bean to instantiate_@param pvs the property values to apply_@param singleton the singleton status of the bean_@deprecated since Spring 2.5, in favor of {@link #setScope};@Deprecated_	public RootBeanDefinition(Class beanClass, MutablePropertyValues pvs, boolean singleton) {_		super(null, pvs)__		setBeanClass(beanClass)__		setSingleton(singleton)__	};create,a,new,root,bean,definition,with,the,given,singleton,status,providing,property,values,param,bean,class,the,class,of,the,bean,to,instantiate,param,pvs,the,property,values,to,apply,param,singleton,the,singleton,status,of,the,bean,deprecated,since,spring,2,5,in,favor,of,link,set,scope;deprecated,public,root,bean,definition,class,bean,class,mutable,property,values,pvs,boolean,singleton,super,null,pvs,set,bean,class,bean,class,set,singleton,singleton
RootBeanDefinition -> @Deprecated 	public RootBeanDefinition(Class beanClass, MutablePropertyValues pvs, boolean singleton);1364505266;Create a new RootBeanDefinition with the given singleton status,_providing property values._@param beanClass the class of the bean to instantiate_@param pvs the property values to apply_@param singleton the singleton status of the bean_@deprecated since Spring 2.5, in favor of {@link #setScope};@Deprecated_	public RootBeanDefinition(Class beanClass, MutablePropertyValues pvs, boolean singleton) {_		super(null, pvs)__		setBeanClass(beanClass)__		setSingleton(singleton)__	};create,a,new,root,bean,definition,with,the,given,singleton,status,providing,property,values,param,bean,class,the,class,of,the,bean,to,instantiate,param,pvs,the,property,values,to,apply,param,singleton,the,singleton,status,of,the,bean,deprecated,since,spring,2,5,in,favor,of,link,set,scope;deprecated,public,root,bean,definition,class,bean,class,mutable,property,values,pvs,boolean,singleton,super,null,pvs,set,bean,class,bean,class,set,singleton,singleton
RootBeanDefinition -> public RootBeanDefinition(Class beanClass);1328020251;Create a new RootBeanDefinition for a singleton._@param beanClass the class of the bean to instantiate;public RootBeanDefinition(Class beanClass) {_		super()__		setBeanClass(beanClass)__	};create,a,new,root,bean,definition,for,a,singleton,param,bean,class,the,class,of,the,bean,to,instantiate;public,root,bean,definition,class,bean,class,super,set,bean,class,bean,class
RootBeanDefinition -> public RootBeanDefinition(Class beanClass);1352412675;Create a new RootBeanDefinition for a singleton._@param beanClass the class of the bean to instantiate;public RootBeanDefinition(Class beanClass) {_		super()__		setBeanClass(beanClass)__	};create,a,new,root,bean,definition,for,a,singleton,param,bean,class,the,class,of,the,bean,to,instantiate;public,root,bean,definition,class,bean,class,super,set,bean,class,bean,class
RootBeanDefinition -> public RootBeanDefinition(Class beanClass);1355352386;Create a new RootBeanDefinition for a singleton._@param beanClass the class of the bean to instantiate;public RootBeanDefinition(Class beanClass) {_		super()__		setBeanClass(beanClass)__	};create,a,new,root,bean,definition,for,a,singleton,param,bean,class,the,class,of,the,bean,to,instantiate;public,root,bean,definition,class,bean,class,super,set,bean,class,bean,class
RootBeanDefinition -> public RootBeanDefinition(Class beanClass);1356735495;Create a new RootBeanDefinition for a singleton._@param beanClass the class of the bean to instantiate;public RootBeanDefinition(Class beanClass) {_		super()__		setBeanClass(beanClass)__	};create,a,new,root,bean,definition,for,a,singleton,param,bean,class,the,class,of,the,bean,to,instantiate;public,root,bean,definition,class,bean,class,super,set,bean,class,bean,class
RootBeanDefinition -> public RootBeanDefinition(Class beanClass);1357119239;Create a new RootBeanDefinition for a singleton._@param beanClass the class of the bean to instantiate;public RootBeanDefinition(Class beanClass) {_		super()__		setBeanClass(beanClass)__	};create,a,new,root,bean,definition,for,a,singleton,param,bean,class,the,class,of,the,bean,to,instantiate;public,root,bean,definition,class,bean,class,super,set,bean,class,bean,class
RootBeanDefinition -> public RootBeanDefinition(Class beanClass);1362408075;Create a new RootBeanDefinition for a singleton._@param beanClass the class of the bean to instantiate;public RootBeanDefinition(Class beanClass) {_		super()__		setBeanClass(beanClass)__	};create,a,new,root,bean,definition,for,a,singleton,param,bean,class,the,class,of,the,bean,to,instantiate;public,root,bean,definition,class,bean,class,super,set,bean,class,bean,class
RootBeanDefinition -> public RootBeanDefinition(Class beanClass);1364505266;Create a new RootBeanDefinition for a singleton._@param beanClass the class of the bean to instantiate;public RootBeanDefinition(Class beanClass) {_		super()__		setBeanClass(beanClass)__	};create,a,new,root,bean,definition,for,a,singleton,param,bean,class,the,class,of,the,bean,to,instantiate;public,root,bean,definition,class,bean,class,super,set,bean,class,bean,class
RootBeanDefinition -> public RootBeanDefinition(Class beanClass);1367943112;Create a new RootBeanDefinition for a singleton._@param beanClass the class of the bean to instantiate;public RootBeanDefinition(Class beanClass) {_		super()__		setBeanClass(beanClass)__	};create,a,new,root,bean,definition,for,a,singleton,param,bean,class,the,class,of,the,bean,to,instantiate;public,root,bean,definition,class,bean,class,super,set,bean,class,bean,class
RootBeanDefinition -> public RootBeanDefinition(Class beanClass);1368482696;Create a new RootBeanDefinition for a singleton._@param beanClass the class of the bean to instantiate;public RootBeanDefinition(Class beanClass) {_		super()__		setBeanClass(beanClass)__	};create,a,new,root,bean,definition,for,a,singleton,param,bean,class,the,class,of,the,bean,to,instantiate;public,root,bean,definition,class,bean,class,super,set,bean,class,bean,class
RootBeanDefinition -> @Nullable 	public Class<?> getTargetType();1496837955;Return the target type of this bean definition, if known_(either specified in advance or resolved on first instantiation)._@since 3.2.2;@Nullable_	public Class<?> getTargetType() {_		if (this.resolvedTargetType != null) {_			return this.resolvedTargetType__		}_		return (this.targetType != null ? this.targetType.resolve() : null)__	};return,the,target,type,of,this,bean,definition,if,known,either,specified,in,advance,or,resolved,on,first,instantiation,since,3,2,2;nullable,public,class,get,target,type,if,this,resolved,target,type,null,return,this,resolved,target,type,return,this,target,type,null,this,target,type,resolve,null
RootBeanDefinition -> @Nullable 	public Class<?> getTargetType();1498780456;Return the target type of this bean definition, if known_(either specified in advance or resolved on first instantiation)._@since 3.2.2;@Nullable_	public Class<?> getTargetType() {_		if (this.resolvedTargetType != null) {_			return this.resolvedTargetType__		}_		ResolvableType targetType = this.targetType__		return (targetType != null ? targetType.resolve() : null)__	};return,the,target,type,of,this,bean,definition,if,known,either,specified,in,advance,or,resolved,on,first,instantiation,since,3,2,2;nullable,public,class,get,target,type,if,this,resolved,target,type,null,return,this,resolved,target,type,resolvable,type,target,type,this,target,type,return,target,type,null,target,type,resolve,null
RootBeanDefinition -> @Nullable 	public Class<?> getTargetType();1500448076;Return the target type of this bean definition, if known_(either specified in advance or resolved on first instantiation)._@since 3.2.2;@Nullable_	public Class<?> getTargetType() {_		if (this.resolvedTargetType != null) {_			return this.resolvedTargetType__		}_		ResolvableType targetType = this.targetType__		return (targetType != null ? targetType.resolve() : null)__	};return,the,target,type,of,this,bean,definition,if,known,either,specified,in,advance,or,resolved,on,first,instantiation,since,3,2,2;nullable,public,class,get,target,type,if,this,resolved,target,type,null,return,this,resolved,target,type,resolvable,type,target,type,this,target,type,return,target,type,null,target,type,resolve,null
RootBeanDefinition -> @Nullable 	public Class<?> getTargetType();1510606271;Return the target type of this bean definition, if known_(either specified in advance or resolved on first instantiation)._@since 3.2.2;@Nullable_	public Class<?> getTargetType() {_		if (this.resolvedTargetType != null) {_			return this.resolvedTargetType__		}_		ResolvableType targetType = this.targetType__		return (targetType != null ? targetType.resolve() : null)__	};return,the,target,type,of,this,bean,definition,if,known,either,specified,in,advance,or,resolved,on,first,instantiation,since,3,2,2;nullable,public,class,get,target,type,if,this,resolved,target,type,null,return,this,resolved,target,type,resolvable,type,target,type,this,target,type,return,target,type,null,target,type,resolve,null
RootBeanDefinition -> @Nullable 	public Class<?> getTargetType();1530174524;Return the target type of this bean definition, if known_(either specified in advance or resolved on first instantiation)._@since 3.2.2;@Nullable_	public Class<?> getTargetType() {_		if (this.resolvedTargetType != null) {_			return this.resolvedTargetType__		}_		ResolvableType targetType = this.targetType__		return (targetType != null ? targetType.resolve() : null)__	};return,the,target,type,of,this,bean,definition,if,known,either,specified,in,advance,or,resolved,on,first,instantiation,since,3,2,2;nullable,public,class,get,target,type,if,this,resolved,target,type,null,return,this,resolved,target,type,resolvable,type,target,type,this,target,type,return,target,type,null,target,type,resolve,null
RootBeanDefinition -> @Nullable 	public Class<?> getTargetType();1531243692;Return the target type of this bean definition, if known_(either specified in advance or resolved on first instantiation)._@since 3.2.2;@Nullable_	public Class<?> getTargetType() {_		if (this.resolvedTargetType != null) {_			return this.resolvedTargetType__		}_		ResolvableType targetType = this.targetType__		return (targetType != null ? targetType.resolve() : null)__	};return,the,target,type,of,this,bean,definition,if,known,either,specified,in,advance,or,resolved,on,first,instantiation,since,3,2,2;nullable,public,class,get,target,type,if,this,resolved,target,type,null,return,this,resolved,target,type,resolvable,type,target,type,this,target,type,return,target,type,null,target,type,resolve,null
RootBeanDefinition -> @Nullable 	public Class<?> getTargetType();1537388383;Return the target type of this bean definition, if known_(either specified in advance or resolved on first instantiation)._@since 3.2.2;@Nullable_	public Class<?> getTargetType() {_		if (this.resolvedTargetType != null) {_			return this.resolvedTargetType__		}_		ResolvableType targetType = this.targetType__		return (targetType != null ? targetType.resolve() : null)__	};return,the,target,type,of,this,bean,definition,if,known,either,specified,in,advance,or,resolved,on,first,instantiation,since,3,2,2;nullable,public,class,get,target,type,if,this,resolved,target,type,null,return,this,resolved,target,type,resolvable,type,target,type,this,target,type,return,target,type,null,target,type,resolve,null
RootBeanDefinition -> @Nullable 	public Class<?> getTargetType();1539377630;Return the target type of this bean definition, if known_(either specified in advance or resolved on first instantiation)._@since 3.2.2;@Nullable_	public Class<?> getTargetType() {_		if (this.resolvedTargetType != null) {_			return this.resolvedTargetType__		}_		ResolvableType targetType = this.targetType__		return (targetType != null ? targetType.resolve() : null)__	};return,the,target,type,of,this,bean,definition,if,known,either,specified,in,advance,or,resolved,on,first,instantiation,since,3,2,2;nullable,public,class,get,target,type,if,this,resolved,target,type,null,return,this,resolved,target,type,resolvable,type,target,type,this,target,type,return,target,type,null,target,type,resolve,null
RootBeanDefinition -> public void setTargetType(ResolvableType targetType);1471445956;Specify a generics-containing target type of this bean definition, if known in advance._@since 4.3.3;public void setTargetType(ResolvableType targetType) {_		this.targetType = targetType__	};specify,a,generics,containing,target,type,of,this,bean,definition,if,known,in,advance,since,4,3,3;public,void,set,target,type,resolvable,type,target,type,this,target,type,target,type
RootBeanDefinition -> public void setTargetType(ResolvableType targetType);1474010431;Specify a generics-containing target type of this bean definition, if known in advance._@since 4.3.3;public void setTargetType(ResolvableType targetType) {_		this.targetType = targetType__	};specify,a,generics,containing,target,type,of,this,bean,definition,if,known,in,advance,since,4,3,3;public,void,set,target,type,resolvable,type,target,type,this,target,type,target,type
RootBeanDefinition -> public void setTargetType(ResolvableType targetType);1474014845;Specify a generics-containing target type of this bean definition, if known in advance._@since 4.3.3;public void setTargetType(ResolvableType targetType) {_		this.targetType = targetType__	};specify,a,generics,containing,target,type,of,this,bean,definition,if,known,in,advance,since,4,3,3;public,void,set,target,type,resolvable,type,target,type,this,target,type,target,type
RootBeanDefinition -> public void setTargetType(ResolvableType targetType);1482012648;Specify a generics-containing target type of this bean definition, if known in advance._@since 4.3.3;public void setTargetType(ResolvableType targetType) {_		this.targetType = targetType__	};specify,a,generics,containing,target,type,of,this,bean,definition,if,known,in,advance,since,4,3,3;public,void,set,target,type,resolvable,type,target,type,this,target,type,target,type
RootBeanDefinition -> public void setTargetType(ResolvableType targetType);1482091545;Specify a generics-containing target type of this bean definition, if known in advance._@since 4.3.3;public void setTargetType(ResolvableType targetType) {_		this.targetType = targetType__	};specify,a,generics,containing,target,type,of,this,bean,definition,if,known,in,advance,since,4,3,3;public,void,set,target,type,resolvable,type,target,type,this,target,type,target,type
RootBeanDefinition -> public void setTargetType(ResolvableType targetType);1483093818;Specify a generics-containing target type of this bean definition, if known in advance._@since 4.3.3;public void setTargetType(ResolvableType targetType) {_		this.targetType = targetType__	};specify,a,generics,containing,target,type,of,this,bean,definition,if,known,in,advance,since,4,3,3;public,void,set,target,type,resolvable,type,target,type,this,target,type,target,type
RootBeanDefinition -> public void setTargetType(ResolvableType targetType);1495868221;Specify a generics-containing target type of this bean definition, if known in advance._@since 4.3.3;public void setTargetType(ResolvableType targetType) {_		this.targetType = targetType__	};specify,a,generics,containing,target,type,of,this,bean,definition,if,known,in,advance,since,4,3,3;public,void,set,target,type,resolvable,type,target,type,this,target,type,target,type
RootBeanDefinition -> public void setTargetType(ResolvableType targetType);1496242568;Specify a generics-containing target type of this bean definition, if known in advance._@since 4.3.3;public void setTargetType(ResolvableType targetType) {_		this.targetType = targetType__	};specify,a,generics,containing,target,type,of,this,bean,definition,if,known,in,advance,since,4,3,3;public,void,set,target,type,resolvable,type,target,type,this,target,type,target,type
RootBeanDefinition -> public void setTargetType(ResolvableType targetType);1496243689;Specify a generics-containing target type of this bean definition, if known in advance._@since 4.3.3;public void setTargetType(ResolvableType targetType) {_		this.targetType = targetType__	};specify,a,generics,containing,target,type,of,this,bean,definition,if,known,in,advance,since,4,3,3;public,void,set,target,type,resolvable,type,target,type,this,target,type,target,type
RootBeanDefinition -> public void setTargetType(ResolvableType targetType);1496259743;Specify a generics-containing target type of this bean definition, if known in advance._@since 4.3.3;public void setTargetType(ResolvableType targetType) {_		this.targetType = targetType__	};specify,a,generics,containing,target,type,of,this,bean,definition,if,known,in,advance,since,4,3,3;public,void,set,target,type,resolvable,type,target,type,this,target,type,target,type
RootBeanDefinition -> public void setTargetType(ResolvableType targetType);1496837955;Specify a generics-containing target type of this bean definition, if known in advance._@since 4.3.3;public void setTargetType(ResolvableType targetType) {_		this.targetType = targetType__	};specify,a,generics,containing,target,type,of,this,bean,definition,if,known,in,advance,since,4,3,3;public,void,set,target,type,resolvable,type,target,type,this,target,type,target,type
RootBeanDefinition -> public void setTargetType(ResolvableType targetType);1498780456;Specify a generics-containing target type of this bean definition, if known in advance._@since 4.3.3;public void setTargetType(ResolvableType targetType) {_		this.targetType = targetType__	};specify,a,generics,containing,target,type,of,this,bean,definition,if,known,in,advance,since,4,3,3;public,void,set,target,type,resolvable,type,target,type,this,target,type,target,type
RootBeanDefinition -> public void setTargetType(ResolvableType targetType);1500448076;Specify a generics-containing target type of this bean definition, if known in advance._@since 4.3.3;public void setTargetType(ResolvableType targetType) {_		this.targetType = targetType__	};specify,a,generics,containing,target,type,of,this,bean,definition,if,known,in,advance,since,4,3,3;public,void,set,target,type,resolvable,type,target,type,this,target,type,target,type
RootBeanDefinition -> public void setTargetType(ResolvableType targetType);1510606271;Specify a generics-containing target type of this bean definition, if known in advance._@since 4.3.3;public void setTargetType(ResolvableType targetType) {_		this.targetType = targetType__	};specify,a,generics,containing,target,type,of,this,bean,definition,if,known,in,advance,since,4,3,3;public,void,set,target,type,resolvable,type,target,type,this,target,type,target,type
RootBeanDefinition -> public void setTargetType(ResolvableType targetType);1530174524;Specify a generics-containing target type of this bean definition, if known in advance._@since 4.3.3;public void setTargetType(ResolvableType targetType) {_		this.targetType = targetType__	};specify,a,generics,containing,target,type,of,this,bean,definition,if,known,in,advance,since,4,3,3;public,void,set,target,type,resolvable,type,target,type,this,target,type,target,type
RootBeanDefinition -> public void setTargetType(ResolvableType targetType);1531243692;Specify a generics-containing target type of this bean definition, if known in advance._@since 4.3.3;public void setTargetType(ResolvableType targetType) {_		this.targetType = targetType__	};specify,a,generics,containing,target,type,of,this,bean,definition,if,known,in,advance,since,4,3,3;public,void,set,target,type,resolvable,type,target,type,this,target,type,target,type
RootBeanDefinition -> public void setTargetType(ResolvableType targetType);1537388383;Specify a generics-containing target type of this bean definition, if known in advance._@since 4.3.3;public void setTargetType(ResolvableType targetType) {_		this.targetType = targetType__	};specify,a,generics,containing,target,type,of,this,bean,definition,if,known,in,advance,since,4,3,3;public,void,set,target,type,resolvable,type,target,type,this,target,type,target,type
RootBeanDefinition -> public void setTargetType(ResolvableType targetType);1539377630;Specify a generics-containing target type of this bean definition, if known in advance._@since 4.3.3;public void setTargetType(ResolvableType targetType) {_		this.targetType = targetType__	};specify,a,generics,containing,target,type,of,this,bean,definition,if,known,in,advance,since,4,3,3;public,void,set,target,type,resolvable,type,target,type,this,target,type,target,type
RootBeanDefinition -> public RootBeanDefinition(@Nullable Class<?> beanClass, @Nullable ConstructorArgumentValues cargs, 			@Nullable MutablePropertyValues pvs);1510606271;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._@param beanClass the class of the bean to instantiate_@param cargs the constructor argument values to apply_@param pvs the property values to apply;public RootBeanDefinition(@Nullable Class<?> beanClass, @Nullable ConstructorArgumentValues cargs,_			@Nullable MutablePropertyValues pvs) {__		super(cargs, pvs)__		setBeanClass(beanClass)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,param,bean,class,the,class,of,the,bean,to,instantiate,param,cargs,the,constructor,argument,values,to,apply,param,pvs,the,property,values,to,apply;public,root,bean,definition,nullable,class,bean,class,nullable,constructor,argument,values,cargs,nullable,mutable,property,values,pvs,super,cargs,pvs,set,bean,class,bean,class
RootBeanDefinition -> public RootBeanDefinition(@Nullable Class<?> beanClass, @Nullable ConstructorArgumentValues cargs, 			@Nullable MutablePropertyValues pvs);1530174524;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._@param beanClass the class of the bean to instantiate_@param cargs the constructor argument values to apply_@param pvs the property values to apply;public RootBeanDefinition(@Nullable Class<?> beanClass, @Nullable ConstructorArgumentValues cargs,_			@Nullable MutablePropertyValues pvs) {__		super(cargs, pvs)__		setBeanClass(beanClass)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,param,bean,class,the,class,of,the,bean,to,instantiate,param,cargs,the,constructor,argument,values,to,apply,param,pvs,the,property,values,to,apply;public,root,bean,definition,nullable,class,bean,class,nullable,constructor,argument,values,cargs,nullable,mutable,property,values,pvs,super,cargs,pvs,set,bean,class,bean,class
RootBeanDefinition -> public RootBeanDefinition(@Nullable Class<?> beanClass, @Nullable ConstructorArgumentValues cargs, 			@Nullable MutablePropertyValues pvs);1531243692;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._@param beanClass the class of the bean to instantiate_@param cargs the constructor argument values to apply_@param pvs the property values to apply;public RootBeanDefinition(@Nullable Class<?> beanClass, @Nullable ConstructorArgumentValues cargs,_			@Nullable MutablePropertyValues pvs) {__		super(cargs, pvs)__		setBeanClass(beanClass)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,param,bean,class,the,class,of,the,bean,to,instantiate,param,cargs,the,constructor,argument,values,to,apply,param,pvs,the,property,values,to,apply;public,root,bean,definition,nullable,class,bean,class,nullable,constructor,argument,values,cargs,nullable,mutable,property,values,pvs,super,cargs,pvs,set,bean,class,bean,class
RootBeanDefinition -> public RootBeanDefinition(@Nullable Class<?> beanClass, @Nullable ConstructorArgumentValues cargs, 			@Nullable MutablePropertyValues pvs);1537388383;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._@param beanClass the class of the bean to instantiate_@param cargs the constructor argument values to apply_@param pvs the property values to apply;public RootBeanDefinition(@Nullable Class<?> beanClass, @Nullable ConstructorArgumentValues cargs,_			@Nullable MutablePropertyValues pvs) {__		super(cargs, pvs)__		setBeanClass(beanClass)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,param,bean,class,the,class,of,the,bean,to,instantiate,param,cargs,the,constructor,argument,values,to,apply,param,pvs,the,property,values,to,apply;public,root,bean,definition,nullable,class,bean,class,nullable,constructor,argument,values,cargs,nullable,mutable,property,values,pvs,super,cargs,pvs,set,bean,class,bean,class
RootBeanDefinition -> public RootBeanDefinition(@Nullable Class<?> beanClass, @Nullable ConstructorArgumentValues cargs, 			@Nullable MutablePropertyValues pvs);1539377630;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._@param beanClass the class of the bean to instantiate_@param cargs the constructor argument values to apply_@param pvs the property values to apply;public RootBeanDefinition(@Nullable Class<?> beanClass, @Nullable ConstructorArgumentValues cargs,_			@Nullable MutablePropertyValues pvs) {__		super(cargs, pvs)__		setBeanClass(beanClass)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,param,bean,class,the,class,of,the,bean,to,instantiate,param,cargs,the,constructor,argument,values,to,apply,param,pvs,the,property,values,to,apply;public,root,bean,definition,nullable,class,bean,class,nullable,constructor,argument,values,cargs,nullable,mutable,property,values,pvs,super,cargs,pvs,set,bean,class,bean,class
RootBeanDefinition -> public void setTargetType(Class<?> targetType);1362408075;Specify the target type of this bean definition, if known in advance.;public void setTargetType(Class<?> targetType) {_		this.targetType = targetType__	};specify,the,target,type,of,this,bean,definition,if,known,in,advance;public,void,set,target,type,class,target,type,this,target,type,target,type
RootBeanDefinition -> public void setTargetType(Class<?> targetType);1364505266;Specify the target type of this bean definition, if known in advance.;public void setTargetType(Class<?> targetType) {_		this.targetType = targetType__	};specify,the,target,type,of,this,bean,definition,if,known,in,advance;public,void,set,target,type,class,target,type,this,target,type,target,type
RootBeanDefinition -> public void setTargetType(Class<?> targetType);1367943112;Specify the target type of this bean definition, if known in advance.;public void setTargetType(Class<?> targetType) {_		this.targetType = targetType__	};specify,the,target,type,of,this,bean,definition,if,known,in,advance;public,void,set,target,type,class,target,type,this,target,type,target,type
RootBeanDefinition -> public void setTargetType(Class<?> targetType);1368482696;Specify the target type of this bean definition, if known in advance.;public void setTargetType(Class<?> targetType) {_		this.targetType = targetType__	};specify,the,target,type,of,this,bean,definition,if,known,in,advance;public,void,set,target,type,class,target,type,this,target,type,target,type
RootBeanDefinition -> public void setTargetType(Class<?> targetType);1368546246;Specify the target type of this bean definition, if known in advance.;public void setTargetType(Class<?> targetType) {_		this.targetType = targetType__	};specify,the,target,type,of,this,bean,definition,if,known,in,advance;public,void,set,target,type,class,target,type,this,target,type,target,type
RootBeanDefinition -> public void setTargetType(Class<?> targetType);1368628892;Specify the target type of this bean definition, if known in advance.;public void setTargetType(Class<?> targetType) {_		this.targetType = targetType__	};specify,the,target,type,of,this,bean,definition,if,known,in,advance;public,void,set,target,type,class,target,type,this,target,type,target,type
RootBeanDefinition -> public void setTargetType(Class<?> targetType);1382826936;Specify the target type of this bean definition, if known in advance.;public void setTargetType(Class<?> targetType) {_		this.targetType = targetType__	};specify,the,target,type,of,this,bean,definition,if,known,in,advance;public,void,set,target,type,class,target,type,this,target,type,target,type
RootBeanDefinition -> public void setTargetType(Class<?> targetType);1390396833;Specify the target type of this bean definition, if known in advance.;public void setTargetType(Class<?> targetType) {_		this.targetType = targetType__	};specify,the,target,type,of,this,bean,definition,if,known,in,advance;public,void,set,target,type,class,target,type,this,target,type,target,type
RootBeanDefinition -> public void setTargetType(Class<?> targetType);1467730834;Specify the target type of this bean definition, if known in advance.;public void setTargetType(Class<?> targetType) {_		this.targetType = targetType__	};specify,the,target,type,of,this,bean,definition,if,known,in,advance;public,void,set,target,type,class,target,type,this,target,type,target,type
RootBeanDefinition -> public void setTargetType(Class<?> targetType);1467744603;Specify the target type of this bean definition, if known in advance.;public void setTargetType(Class<?> targetType) {_		this.targetType = targetType__	};specify,the,target,type,of,this,bean,definition,if,known,in,advance;public,void,set,target,type,class,target,type,this,target,type,target,type
RootBeanDefinition -> public void setTargetType(Class<?> targetType);1469367243;Specify the target type of this bean definition, if known in advance.;public void setTargetType(Class<?> targetType) {_		this.targetType = targetType__	};specify,the,target,type,of,this,bean,definition,if,known,in,advance;public,void,set,target,type,class,target,type,this,target,type,target,type
RootBeanDefinition -> public void setTargetType(Class<?> targetType);1471445956;Specify the target type of this bean definition, if known in advance._@since 3.2.2;public void setTargetType(Class<?> targetType) {_		this.targetType = (targetType != null ? ResolvableType.forClass(targetType) : null)__	};specify,the,target,type,of,this,bean,definition,if,known,in,advance,since,3,2,2;public,void,set,target,type,class,target,type,this,target,type,target,type,null,resolvable,type,for,class,target,type,null
RootBeanDefinition -> public void setTargetType(Class<?> targetType);1474010431;Specify the target type of this bean definition, if known in advance._@since 3.2.2;public void setTargetType(Class<?> targetType) {_		this.targetType = (targetType != null ? ResolvableType.forClass(targetType) : null)__	};specify,the,target,type,of,this,bean,definition,if,known,in,advance,since,3,2,2;public,void,set,target,type,class,target,type,this,target,type,target,type,null,resolvable,type,for,class,target,type,null
RootBeanDefinition -> public void setTargetType(Class<?> targetType);1474014845;Specify the target type of this bean definition, if known in advance._@since 3.2.2;public void setTargetType(Class<?> targetType) {_		this.targetType = (targetType != null ? ResolvableType.forClass(targetType) : null)__	};specify,the,target,type,of,this,bean,definition,if,known,in,advance,since,3,2,2;public,void,set,target,type,class,target,type,this,target,type,target,type,null,resolvable,type,for,class,target,type,null
RootBeanDefinition -> public void setTargetType(Class<?> targetType);1482012648;Specify the target type of this bean definition, if known in advance._@since 3.2.2;public void setTargetType(Class<?> targetType) {_		this.targetType = (targetType != null ? ResolvableType.forClass(targetType) : null)__	};specify,the,target,type,of,this,bean,definition,if,known,in,advance,since,3,2,2;public,void,set,target,type,class,target,type,this,target,type,target,type,null,resolvable,type,for,class,target,type,null
RootBeanDefinition -> public void setTargetType(Class<?> targetType);1482091545;Specify the target type of this bean definition, if known in advance._@since 3.2.2;public void setTargetType(Class<?> targetType) {_		this.targetType = (targetType != null ? ResolvableType.forClass(targetType) : null)__	};specify,the,target,type,of,this,bean,definition,if,known,in,advance,since,3,2,2;public,void,set,target,type,class,target,type,this,target,type,target,type,null,resolvable,type,for,class,target,type,null
RootBeanDefinition -> public void setTargetType(Class<?> targetType);1483093818;Specify the target type of this bean definition, if known in advance._@since 3.2.2;public void setTargetType(Class<?> targetType) {_		this.targetType = (targetType != null ? ResolvableType.forClass(targetType) : null)__	};specify,the,target,type,of,this,bean,definition,if,known,in,advance,since,3,2,2;public,void,set,target,type,class,target,type,this,target,type,target,type,null,resolvable,type,for,class,target,type,null
RootBeanDefinition -> public void setTargetType(Class<?> targetType);1495868221;Specify the target type of this bean definition, if known in advance._@since 3.2.2;public void setTargetType(Class<?> targetType) {_		this.targetType = (targetType != null ? ResolvableType.forClass(targetType) : null)__	};specify,the,target,type,of,this,bean,definition,if,known,in,advance,since,3,2,2;public,void,set,target,type,class,target,type,this,target,type,target,type,null,resolvable,type,for,class,target,type,null
RootBeanDefinition -> public void setTargetType(Class<?> targetType);1496242568;Specify the target type of this bean definition, if known in advance._@since 3.2.2;public void setTargetType(Class<?> targetType) {_		this.targetType = (targetType != null ? ResolvableType.forClass(targetType) : null)__	};specify,the,target,type,of,this,bean,definition,if,known,in,advance,since,3,2,2;public,void,set,target,type,class,target,type,this,target,type,target,type,null,resolvable,type,for,class,target,type,null
RootBeanDefinition -> public void setTargetType(Class<?> targetType);1496243689;Specify the target type of this bean definition, if known in advance._@since 3.2.2;public void setTargetType(Class<?> targetType) {_		this.targetType = (targetType != null ? ResolvableType.forClass(targetType) : null)__	};specify,the,target,type,of,this,bean,definition,if,known,in,advance,since,3,2,2;public,void,set,target,type,class,target,type,this,target,type,target,type,null,resolvable,type,for,class,target,type,null
RootBeanDefinition -> public void setTargetType(Class<?> targetType);1496259743;Specify the target type of this bean definition, if known in advance._@since 3.2.2;public void setTargetType(Class<?> targetType) {_		this.targetType = (targetType != null ? ResolvableType.forClass(targetType) : null)__	};specify,the,target,type,of,this,bean,definition,if,known,in,advance,since,3,2,2;public,void,set,target,type,class,target,type,this,target,type,target,type,null,resolvable,type,for,class,target,type,null
RootBeanDefinition -> public RootBeanDefinition(Class<?> beanClass, ConstructorArgumentValues cargs, MutablePropertyValues pvs);1368546246;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._@param beanClass the class of the bean to instantiate_@param cargs the constructor argument values to apply_@param pvs the property values to apply;public RootBeanDefinition(Class<?> beanClass, ConstructorArgumentValues cargs, MutablePropertyValues pvs) {_		super(cargs, pvs)__		setBeanClass(beanClass)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,param,bean,class,the,class,of,the,bean,to,instantiate,param,cargs,the,constructor,argument,values,to,apply,param,pvs,the,property,values,to,apply;public,root,bean,definition,class,bean,class,constructor,argument,values,cargs,mutable,property,values,pvs,super,cargs,pvs,set,bean,class,bean,class
RootBeanDefinition -> public RootBeanDefinition(Class<?> beanClass, ConstructorArgumentValues cargs, MutablePropertyValues pvs);1368628892;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._@param beanClass the class of the bean to instantiate_@param cargs the constructor argument values to apply_@param pvs the property values to apply;public RootBeanDefinition(Class<?> beanClass, ConstructorArgumentValues cargs, MutablePropertyValues pvs) {_		super(cargs, pvs)__		setBeanClass(beanClass)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,param,bean,class,the,class,of,the,bean,to,instantiate,param,cargs,the,constructor,argument,values,to,apply,param,pvs,the,property,values,to,apply;public,root,bean,definition,class,bean,class,constructor,argument,values,cargs,mutable,property,values,pvs,super,cargs,pvs,set,bean,class,bean,class
RootBeanDefinition -> public RootBeanDefinition(Class<?> beanClass, ConstructorArgumentValues cargs, MutablePropertyValues pvs);1382826936;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._@param beanClass the class of the bean to instantiate_@param cargs the constructor argument values to apply_@param pvs the property values to apply;public RootBeanDefinition(Class<?> beanClass, ConstructorArgumentValues cargs, MutablePropertyValues pvs) {_		super(cargs, pvs)__		setBeanClass(beanClass)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,param,bean,class,the,class,of,the,bean,to,instantiate,param,cargs,the,constructor,argument,values,to,apply,param,pvs,the,property,values,to,apply;public,root,bean,definition,class,bean,class,constructor,argument,values,cargs,mutable,property,values,pvs,super,cargs,pvs,set,bean,class,bean,class
RootBeanDefinition -> public RootBeanDefinition(Class<?> beanClass, ConstructorArgumentValues cargs, MutablePropertyValues pvs);1390396833;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._@param beanClass the class of the bean to instantiate_@param cargs the constructor argument values to apply_@param pvs the property values to apply;public RootBeanDefinition(Class<?> beanClass, ConstructorArgumentValues cargs, MutablePropertyValues pvs) {_		super(cargs, pvs)__		setBeanClass(beanClass)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,param,bean,class,the,class,of,the,bean,to,instantiate,param,cargs,the,constructor,argument,values,to,apply,param,pvs,the,property,values,to,apply;public,root,bean,definition,class,bean,class,constructor,argument,values,cargs,mutable,property,values,pvs,super,cargs,pvs,set,bean,class,bean,class
RootBeanDefinition -> public RootBeanDefinition(Class<?> beanClass, ConstructorArgumentValues cargs, MutablePropertyValues pvs);1467730834;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._@param beanClass the class of the bean to instantiate_@param cargs the constructor argument values to apply_@param pvs the property values to apply;public RootBeanDefinition(Class<?> beanClass, ConstructorArgumentValues cargs, MutablePropertyValues pvs) {_		super(cargs, pvs)__		setBeanClass(beanClass)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,param,bean,class,the,class,of,the,bean,to,instantiate,param,cargs,the,constructor,argument,values,to,apply,param,pvs,the,property,values,to,apply;public,root,bean,definition,class,bean,class,constructor,argument,values,cargs,mutable,property,values,pvs,super,cargs,pvs,set,bean,class,bean,class
RootBeanDefinition -> public RootBeanDefinition(Class<?> beanClass, ConstructorArgumentValues cargs, MutablePropertyValues pvs);1467744603;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._@param beanClass the class of the bean to instantiate_@param cargs the constructor argument values to apply_@param pvs the property values to apply;public RootBeanDefinition(Class<?> beanClass, ConstructorArgumentValues cargs, MutablePropertyValues pvs) {_		super(cargs, pvs)__		setBeanClass(beanClass)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,param,bean,class,the,class,of,the,bean,to,instantiate,param,cargs,the,constructor,argument,values,to,apply,param,pvs,the,property,values,to,apply;public,root,bean,definition,class,bean,class,constructor,argument,values,cargs,mutable,property,values,pvs,super,cargs,pvs,set,bean,class,bean,class
RootBeanDefinition -> public RootBeanDefinition(Class<?> beanClass, ConstructorArgumentValues cargs, MutablePropertyValues pvs);1469367243;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._@param beanClass the class of the bean to instantiate_@param cargs the constructor argument values to apply_@param pvs the property values to apply;public RootBeanDefinition(Class<?> beanClass, ConstructorArgumentValues cargs, MutablePropertyValues pvs) {_		super(cargs, pvs)__		setBeanClass(beanClass)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,param,bean,class,the,class,of,the,bean,to,instantiate,param,cargs,the,constructor,argument,values,to,apply,param,pvs,the,property,values,to,apply;public,root,bean,definition,class,bean,class,constructor,argument,values,cargs,mutable,property,values,pvs,super,cargs,pvs,set,bean,class,bean,class
RootBeanDefinition -> public RootBeanDefinition(Class<?> beanClass, ConstructorArgumentValues cargs, MutablePropertyValues pvs);1471445956;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._@param beanClass the class of the bean to instantiate_@param cargs the constructor argument values to apply_@param pvs the property values to apply;public RootBeanDefinition(Class<?> beanClass, ConstructorArgumentValues cargs, MutablePropertyValues pvs) {_		super(cargs, pvs)__		setBeanClass(beanClass)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,param,bean,class,the,class,of,the,bean,to,instantiate,param,cargs,the,constructor,argument,values,to,apply,param,pvs,the,property,values,to,apply;public,root,bean,definition,class,bean,class,constructor,argument,values,cargs,mutable,property,values,pvs,super,cargs,pvs,set,bean,class,bean,class
RootBeanDefinition -> public RootBeanDefinition(Class<?> beanClass, ConstructorArgumentValues cargs, MutablePropertyValues pvs);1474010431;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._@param beanClass the class of the bean to instantiate_@param cargs the constructor argument values to apply_@param pvs the property values to apply;public RootBeanDefinition(Class<?> beanClass, ConstructorArgumentValues cargs, MutablePropertyValues pvs) {_		super(cargs, pvs)__		setBeanClass(beanClass)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,param,bean,class,the,class,of,the,bean,to,instantiate,param,cargs,the,constructor,argument,values,to,apply,param,pvs,the,property,values,to,apply;public,root,bean,definition,class,bean,class,constructor,argument,values,cargs,mutable,property,values,pvs,super,cargs,pvs,set,bean,class,bean,class
RootBeanDefinition -> public RootBeanDefinition(Class<?> beanClass, ConstructorArgumentValues cargs, MutablePropertyValues pvs);1474014845;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._@param beanClass the class of the bean to instantiate_@param cargs the constructor argument values to apply_@param pvs the property values to apply;public RootBeanDefinition(Class<?> beanClass, ConstructorArgumentValues cargs, MutablePropertyValues pvs) {_		super(cargs, pvs)__		setBeanClass(beanClass)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,param,bean,class,the,class,of,the,bean,to,instantiate,param,cargs,the,constructor,argument,values,to,apply,param,pvs,the,property,values,to,apply;public,root,bean,definition,class,bean,class,constructor,argument,values,cargs,mutable,property,values,pvs,super,cargs,pvs,set,bean,class,bean,class
RootBeanDefinition -> public RootBeanDefinition(Class<?> beanClass, ConstructorArgumentValues cargs, MutablePropertyValues pvs);1482012648;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._@param beanClass the class of the bean to instantiate_@param cargs the constructor argument values to apply_@param pvs the property values to apply;public RootBeanDefinition(Class<?> beanClass, ConstructorArgumentValues cargs, MutablePropertyValues pvs) {_		super(cargs, pvs)__		setBeanClass(beanClass)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,param,bean,class,the,class,of,the,bean,to,instantiate,param,cargs,the,constructor,argument,values,to,apply,param,pvs,the,property,values,to,apply;public,root,bean,definition,class,bean,class,constructor,argument,values,cargs,mutable,property,values,pvs,super,cargs,pvs,set,bean,class,bean,class
RootBeanDefinition -> public RootBeanDefinition(Class<?> beanClass, ConstructorArgumentValues cargs, MutablePropertyValues pvs);1482091545;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._@param beanClass the class of the bean to instantiate_@param cargs the constructor argument values to apply_@param pvs the property values to apply;public RootBeanDefinition(Class<?> beanClass, ConstructorArgumentValues cargs, MutablePropertyValues pvs) {_		super(cargs, pvs)__		setBeanClass(beanClass)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,param,bean,class,the,class,of,the,bean,to,instantiate,param,cargs,the,constructor,argument,values,to,apply,param,pvs,the,property,values,to,apply;public,root,bean,definition,class,bean,class,constructor,argument,values,cargs,mutable,property,values,pvs,super,cargs,pvs,set,bean,class,bean,class
RootBeanDefinition -> public RootBeanDefinition(Class<?> beanClass, ConstructorArgumentValues cargs, MutablePropertyValues pvs);1483093818;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._@param beanClass the class of the bean to instantiate_@param cargs the constructor argument values to apply_@param pvs the property values to apply;public RootBeanDefinition(Class<?> beanClass, ConstructorArgumentValues cargs, MutablePropertyValues pvs) {_		super(cargs, pvs)__		setBeanClass(beanClass)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,param,bean,class,the,class,of,the,bean,to,instantiate,param,cargs,the,constructor,argument,values,to,apply,param,pvs,the,property,values,to,apply;public,root,bean,definition,class,bean,class,constructor,argument,values,cargs,mutable,property,values,pvs,super,cargs,pvs,set,bean,class,bean,class
RootBeanDefinition -> public RootBeanDefinition(Class<?> beanClass, ConstructorArgumentValues cargs, MutablePropertyValues pvs);1495868221;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._@param beanClass the class of the bean to instantiate_@param cargs the constructor argument values to apply_@param pvs the property values to apply;public RootBeanDefinition(Class<?> beanClass, ConstructorArgumentValues cargs, MutablePropertyValues pvs) {_		super(cargs, pvs)__		setBeanClass(beanClass)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,param,bean,class,the,class,of,the,bean,to,instantiate,param,cargs,the,constructor,argument,values,to,apply,param,pvs,the,property,values,to,apply;public,root,bean,definition,class,bean,class,constructor,argument,values,cargs,mutable,property,values,pvs,super,cargs,pvs,set,bean,class,bean,class
RootBeanDefinition -> public RootBeanDefinition(Class<?> beanClass, ConstructorArgumentValues cargs, MutablePropertyValues pvs);1496242568;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._@param beanClass the class of the bean to instantiate_@param cargs the constructor argument values to apply_@param pvs the property values to apply;public RootBeanDefinition(Class<?> beanClass, ConstructorArgumentValues cargs, MutablePropertyValues pvs) {_		super(cargs, pvs)__		setBeanClass(beanClass)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,param,bean,class,the,class,of,the,bean,to,instantiate,param,cargs,the,constructor,argument,values,to,apply,param,pvs,the,property,values,to,apply;public,root,bean,definition,class,bean,class,constructor,argument,values,cargs,mutable,property,values,pvs,super,cargs,pvs,set,bean,class,bean,class
RootBeanDefinition -> @Nullable 	public Constructor<?>[] getPreferredConstructors();1537388383;Determine preferred constructors to use for default construction, if any._Constructor arguments will be autowired if necessary._@return one or more preferred constructors, or {@code null} if none_(in which case the regular no-arg default constructor will be called)_@since 5.1;@Nullable_	public Constructor<?>[] getPreferredConstructors() {_		return null__	};determine,preferred,constructors,to,use,for,default,construction,if,any,constructor,arguments,will,be,autowired,if,necessary,return,one,or,more,preferred,constructors,or,code,null,if,none,in,which,case,the,regular,no,arg,default,constructor,will,be,called,since,5,1;nullable,public,constructor,get,preferred,constructors,return,null
RootBeanDefinition -> @Nullable 	public Constructor<?>[] getPreferredConstructors();1539377630;Determine preferred constructors to use for default construction, if any._Constructor arguments will be autowired if necessary._@return one or more preferred constructors, or {@code null} if none_(in which case the regular no-arg default constructor will be called)_@since 5.1;@Nullable_	public Constructor<?>[] getPreferredConstructors() {_		return null__	};determine,preferred,constructors,to,use,for,default,construction,if,any,constructor,arguments,will,be,autowired,if,necessary,return,one,or,more,preferred,constructors,or,code,null,if,none,in,which,case,the,regular,no,arg,default,constructor,will,be,called,since,5,1;nullable,public,constructor,get,preferred,constructors,return,null
RootBeanDefinition -> @Nullable 	public AnnotatedElement getQualifiedElement();1495868221;Return the {@link AnnotatedElement} defining qualifiers, if any._Otherwise, the factory method and target class will be checked._@since 4.3.3;@Nullable_	public AnnotatedElement getQualifiedElement() {_		return this.qualifiedElement__	};return,the,link,annotated,element,defining,qualifiers,if,any,otherwise,the,factory,method,and,target,class,will,be,checked,since,4,3,3;nullable,public,annotated,element,get,qualified,element,return,this,qualified,element
RootBeanDefinition -> @Nullable 	public AnnotatedElement getQualifiedElement();1496242568;Return the {@link AnnotatedElement} defining qualifiers, if any._Otherwise, the factory method and target class will be checked._@since 4.3.3;@Nullable_	public AnnotatedElement getQualifiedElement() {_		return this.qualifiedElement__	};return,the,link,annotated,element,defining,qualifiers,if,any,otherwise,the,factory,method,and,target,class,will,be,checked,since,4,3,3;nullable,public,annotated,element,get,qualified,element,return,this,qualified,element
RootBeanDefinition -> @Nullable 	public AnnotatedElement getQualifiedElement();1496243689;Return the {@link AnnotatedElement} defining qualifiers, if any._Otherwise, the factory method and target class will be checked._@since 4.3.3;@Nullable_	public AnnotatedElement getQualifiedElement() {_		return this.qualifiedElement__	};return,the,link,annotated,element,defining,qualifiers,if,any,otherwise,the,factory,method,and,target,class,will,be,checked,since,4,3,3;nullable,public,annotated,element,get,qualified,element,return,this,qualified,element
RootBeanDefinition -> @Nullable 	public AnnotatedElement getQualifiedElement();1496259743;Return the {@link AnnotatedElement} defining qualifiers, if any._Otherwise, the factory method and target class will be checked._@since 4.3.3;@Nullable_	public AnnotatedElement getQualifiedElement() {_		return this.qualifiedElement__	};return,the,link,annotated,element,defining,qualifiers,if,any,otherwise,the,factory,method,and,target,class,will,be,checked,since,4,3,3;nullable,public,annotated,element,get,qualified,element,return,this,qualified,element
RootBeanDefinition -> @Nullable 	public AnnotatedElement getQualifiedElement();1496837955;Return the {@link AnnotatedElement} defining qualifiers, if any._Otherwise, the factory method and target class will be checked._@since 4.3.3;@Nullable_	public AnnotatedElement getQualifiedElement() {_		return this.qualifiedElement__	};return,the,link,annotated,element,defining,qualifiers,if,any,otherwise,the,factory,method,and,target,class,will,be,checked,since,4,3,3;nullable,public,annotated,element,get,qualified,element,return,this,qualified,element
RootBeanDefinition -> @Nullable 	public AnnotatedElement getQualifiedElement();1498780456;Return the {@link AnnotatedElement} defining qualifiers, if any._Otherwise, the factory method and target class will be checked._@since 4.3.3;@Nullable_	public AnnotatedElement getQualifiedElement() {_		return this.qualifiedElement__	};return,the,link,annotated,element,defining,qualifiers,if,any,otherwise,the,factory,method,and,target,class,will,be,checked,since,4,3,3;nullable,public,annotated,element,get,qualified,element,return,this,qualified,element
RootBeanDefinition -> @Nullable 	public AnnotatedElement getQualifiedElement();1500448076;Return the {@link AnnotatedElement} defining qualifiers, if any._Otherwise, the factory method and target class will be checked._@since 4.3.3;@Nullable_	public AnnotatedElement getQualifiedElement() {_		return this.qualifiedElement__	};return,the,link,annotated,element,defining,qualifiers,if,any,otherwise,the,factory,method,and,target,class,will,be,checked,since,4,3,3;nullable,public,annotated,element,get,qualified,element,return,this,qualified,element
RootBeanDefinition -> @Nullable 	public AnnotatedElement getQualifiedElement();1510606271;Return the {@link AnnotatedElement} defining qualifiers, if any._Otherwise, the factory method and target class will be checked._@since 4.3.3;@Nullable_	public AnnotatedElement getQualifiedElement() {_		return this.qualifiedElement__	};return,the,link,annotated,element,defining,qualifiers,if,any,otherwise,the,factory,method,and,target,class,will,be,checked,since,4,3,3;nullable,public,annotated,element,get,qualified,element,return,this,qualified,element
RootBeanDefinition -> @Nullable 	public AnnotatedElement getQualifiedElement();1530174524;Return the {@link AnnotatedElement} defining qualifiers, if any._Otherwise, the factory method and target class will be checked._@since 4.3.3;@Nullable_	public AnnotatedElement getQualifiedElement() {_		return this.qualifiedElement__	};return,the,link,annotated,element,defining,qualifiers,if,any,otherwise,the,factory,method,and,target,class,will,be,checked,since,4,3,3;nullable,public,annotated,element,get,qualified,element,return,this,qualified,element
RootBeanDefinition -> @Nullable 	public AnnotatedElement getQualifiedElement();1531243692;Return the {@link AnnotatedElement} defining qualifiers, if any._Otherwise, the factory method and target class will be checked._@since 4.3.3;@Nullable_	public AnnotatedElement getQualifiedElement() {_		return this.qualifiedElement__	};return,the,link,annotated,element,defining,qualifiers,if,any,otherwise,the,factory,method,and,target,class,will,be,checked,since,4,3,3;nullable,public,annotated,element,get,qualified,element,return,this,qualified,element
RootBeanDefinition -> @Nullable 	public AnnotatedElement getQualifiedElement();1537388383;Return the {@link AnnotatedElement} defining qualifiers, if any._Otherwise, the factory method and target class will be checked._@since 4.3.3;@Nullable_	public AnnotatedElement getQualifiedElement() {_		return this.qualifiedElement__	};return,the,link,annotated,element,defining,qualifiers,if,any,otherwise,the,factory,method,and,target,class,will,be,checked,since,4,3,3;nullable,public,annotated,element,get,qualified,element,return,this,qualified,element
RootBeanDefinition -> @Nullable 	public AnnotatedElement getQualifiedElement();1539377630;Return the {@link AnnotatedElement} defining qualifiers, if any._Otherwise, the factory method and target class will be checked._@since 4.3.3;@Nullable_	public AnnotatedElement getQualifiedElement() {_		return this.qualifiedElement__	};return,the,link,annotated,element,defining,qualifiers,if,any,otherwise,the,factory,method,and,target,class,will,be,checked,since,4,3,3;nullable,public,annotated,element,get,qualified,element,return,this,qualified,element
RootBeanDefinition -> public void setQualifiedElement(@Nullable AnnotatedElement qualifiedElement);1500448076;Specify the {@link AnnotatedElement} defining qualifiers,_to be used instead of the target class or factory method._@since 4.3.3_@see #setTargetType(ResolvableType)_@see #getResolvedFactoryMethod();public void setQualifiedElement(@Nullable AnnotatedElement qualifiedElement) {_		this.qualifiedElement = qualifiedElement__	};specify,the,link,annotated,element,defining,qualifiers,to,be,used,instead,of,the,target,class,or,factory,method,since,4,3,3,see,set,target,type,resolvable,type,see,get,resolved,factory,method;public,void,set,qualified,element,nullable,annotated,element,qualified,element,this,qualified,element,qualified,element
RootBeanDefinition -> public void setQualifiedElement(@Nullable AnnotatedElement qualifiedElement);1510606271;Specify the {@link AnnotatedElement} defining qualifiers,_to be used instead of the target class or factory method._@since 4.3.3_@see #setTargetType(ResolvableType)_@see #getResolvedFactoryMethod();public void setQualifiedElement(@Nullable AnnotatedElement qualifiedElement) {_		this.qualifiedElement = qualifiedElement__	};specify,the,link,annotated,element,defining,qualifiers,to,be,used,instead,of,the,target,class,or,factory,method,since,4,3,3,see,set,target,type,resolvable,type,see,get,resolved,factory,method;public,void,set,qualified,element,nullable,annotated,element,qualified,element,this,qualified,element,qualified,element
RootBeanDefinition -> public void setQualifiedElement(@Nullable AnnotatedElement qualifiedElement);1530174524;Specify the {@link AnnotatedElement} defining qualifiers,_to be used instead of the target class or factory method._@since 4.3.3_@see #setTargetType(ResolvableType)_@see #getResolvedFactoryMethod();public void setQualifiedElement(@Nullable AnnotatedElement qualifiedElement) {_		this.qualifiedElement = qualifiedElement__	};specify,the,link,annotated,element,defining,qualifiers,to,be,used,instead,of,the,target,class,or,factory,method,since,4,3,3,see,set,target,type,resolvable,type,see,get,resolved,factory,method;public,void,set,qualified,element,nullable,annotated,element,qualified,element,this,qualified,element,qualified,element
RootBeanDefinition -> public void setQualifiedElement(@Nullable AnnotatedElement qualifiedElement);1531243692;Specify the {@link AnnotatedElement} defining qualifiers,_to be used instead of the target class or factory method._@since 4.3.3_@see #setTargetType(ResolvableType)_@see #getResolvedFactoryMethod();public void setQualifiedElement(@Nullable AnnotatedElement qualifiedElement) {_		this.qualifiedElement = qualifiedElement__	};specify,the,link,annotated,element,defining,qualifiers,to,be,used,instead,of,the,target,class,or,factory,method,since,4,3,3,see,set,target,type,resolvable,type,see,get,resolved,factory,method;public,void,set,qualified,element,nullable,annotated,element,qualified,element,this,qualified,element,qualified,element
RootBeanDefinition -> public void setQualifiedElement(@Nullable AnnotatedElement qualifiedElement);1537388383;Specify the {@link AnnotatedElement} defining qualifiers,_to be used instead of the target class or factory method._@since 4.3.3_@see #setTargetType(ResolvableType)_@see #getResolvedFactoryMethod();public void setQualifiedElement(@Nullable AnnotatedElement qualifiedElement) {_		this.qualifiedElement = qualifiedElement__	};specify,the,link,annotated,element,defining,qualifiers,to,be,used,instead,of,the,target,class,or,factory,method,since,4,3,3,see,set,target,type,resolvable,type,see,get,resolved,factory,method;public,void,set,qualified,element,nullable,annotated,element,qualified,element,this,qualified,element,qualified,element
RootBeanDefinition -> public void setQualifiedElement(@Nullable AnnotatedElement qualifiedElement);1539377630;Specify the {@link AnnotatedElement} defining qualifiers,_to be used instead of the target class or factory method._@since 4.3.3_@see #setTargetType(ResolvableType)_@see #getResolvedFactoryMethod();public void setQualifiedElement(@Nullable AnnotatedElement qualifiedElement) {_		this.qualifiedElement = qualifiedElement__	};specify,the,link,annotated,element,defining,qualifiers,to,be,used,instead,of,the,target,class,or,factory,method,since,4,3,3,see,set,target,type,resolvable,type,see,get,resolved,factory,method;public,void,set,qualified,element,nullable,annotated,element,qualified,element,this,qualified,element,qualified,element
RootBeanDefinition -> public void setTargetType(@Nullable Class<?> targetType);1496837955;Specify the target type of this bean definition, if known in advance._@since 3.2.2;public void setTargetType(@Nullable Class<?> targetType) {_		this.targetType = (targetType != null ? ResolvableType.forClass(targetType) : null)__	};specify,the,target,type,of,this,bean,definition,if,known,in,advance,since,3,2,2;public,void,set,target,type,nullable,class,target,type,this,target,type,target,type,null,resolvable,type,for,class,target,type,null
RootBeanDefinition -> public void setTargetType(@Nullable Class<?> targetType);1498780456;Specify the target type of this bean definition, if known in advance._@since 3.2.2;public void setTargetType(@Nullable Class<?> targetType) {_		this.targetType = (targetType != null ? ResolvableType.forClass(targetType) : null)__	};specify,the,target,type,of,this,bean,definition,if,known,in,advance,since,3,2,2;public,void,set,target,type,nullable,class,target,type,this,target,type,target,type,null,resolvable,type,for,class,target,type,null
RootBeanDefinition -> public void setTargetType(@Nullable Class<?> targetType);1500448076;Specify the target type of this bean definition, if known in advance._@since 3.2.2;public void setTargetType(@Nullable Class<?> targetType) {_		this.targetType = (targetType != null ? ResolvableType.forClass(targetType) : null)__	};specify,the,target,type,of,this,bean,definition,if,known,in,advance,since,3,2,2;public,void,set,target,type,nullable,class,target,type,this,target,type,target,type,null,resolvable,type,for,class,target,type,null
RootBeanDefinition -> public void setTargetType(@Nullable Class<?> targetType);1510606271;Specify the target type of this bean definition, if known in advance._@since 3.2.2;public void setTargetType(@Nullable Class<?> targetType) {_		this.targetType = (targetType != null ? ResolvableType.forClass(targetType) : null)__	};specify,the,target,type,of,this,bean,definition,if,known,in,advance,since,3,2,2;public,void,set,target,type,nullable,class,target,type,this,target,type,target,type,null,resolvable,type,for,class,target,type,null
RootBeanDefinition -> public void setTargetType(@Nullable Class<?> targetType);1530174524;Specify the target type of this bean definition, if known in advance._@since 3.2.2;public void setTargetType(@Nullable Class<?> targetType) {_		this.targetType = (targetType != null ? ResolvableType.forClass(targetType) : null)__	};specify,the,target,type,of,this,bean,definition,if,known,in,advance,since,3,2,2;public,void,set,target,type,nullable,class,target,type,this,target,type,target,type,null,resolvable,type,for,class,target,type,null
RootBeanDefinition -> public void setTargetType(@Nullable Class<?> targetType);1531243692;Specify the target type of this bean definition, if known in advance._@since 3.2.2;public void setTargetType(@Nullable Class<?> targetType) {_		this.targetType = (targetType != null ? ResolvableType.forClass(targetType) : null)__	};specify,the,target,type,of,this,bean,definition,if,known,in,advance,since,3,2,2;public,void,set,target,type,nullable,class,target,type,this,target,type,target,type,null,resolvable,type,for,class,target,type,null
RootBeanDefinition -> public void setTargetType(@Nullable Class<?> targetType);1537388383;Specify the target type of this bean definition, if known in advance._@since 3.2.2;public void setTargetType(@Nullable Class<?> targetType) {_		this.targetType = (targetType != null ? ResolvableType.forClass(targetType) : null)__	};specify,the,target,type,of,this,bean,definition,if,known,in,advance,since,3,2,2;public,void,set,target,type,nullable,class,target,type,this,target,type,target,type,null,resolvable,type,for,class,target,type,null
RootBeanDefinition -> public void setTargetType(@Nullable Class<?> targetType);1539377630;Specify the target type of this bean definition, if known in advance._@since 3.2.2;public void setTargetType(@Nullable Class<?> targetType) {_		this.targetType = (targetType != null ? ResolvableType.forClass(targetType) : null)__	};specify,the,target,type,of,this,bean,definition,if,known,in,advance,since,3,2,2;public,void,set,target,type,nullable,class,target,type,this,target,type,target,type,null,resolvable,type,for,class,target,type,null
RootBeanDefinition -> public <T> RootBeanDefinition(@Nullable Class<T> beanClass, @Nullable Supplier<T> instanceSupplier);1496243689;Create a new RootBeanDefinition for a singleton bean, constructing each instance_through calling the given supplier (possibly a lambda or method reference)._@param beanClass the class of the bean to instantiate_@param instanceSupplier the supplier to construct a bean instance,_as an alternative to a declaratively specified factory method_@since 5.0_@see #setInstanceSupplier;public <T> RootBeanDefinition(@Nullable Class<T> beanClass, @Nullable Supplier<T> instanceSupplier) {_		super()__		setBeanClass(beanClass)__		setInstanceSupplier(instanceSupplier)__	};create,a,new,root,bean,definition,for,a,singleton,bean,constructing,each,instance,through,calling,the,given,supplier,possibly,a,lambda,or,method,reference,param,bean,class,the,class,of,the,bean,to,instantiate,param,instance,supplier,the,supplier,to,construct,a,bean,instance,as,an,alternative,to,a,declaratively,specified,factory,method,since,5,0,see,set,instance,supplier;public,t,root,bean,definition,nullable,class,t,bean,class,nullable,supplier,t,instance,supplier,super,set,bean,class,bean,class,set,instance,supplier,instance,supplier
RootBeanDefinition -> public <T> RootBeanDefinition(@Nullable Class<T> beanClass, @Nullable Supplier<T> instanceSupplier);1496259743;Create a new RootBeanDefinition for a singleton bean, constructing each instance_through calling the given supplier (possibly a lambda or method reference)._@param beanClass the class of the bean to instantiate_@param instanceSupplier the supplier to construct a bean instance,_as an alternative to a declaratively specified factory method_@since 5.0_@see #setInstanceSupplier;public <T> RootBeanDefinition(@Nullable Class<T> beanClass, @Nullable Supplier<T> instanceSupplier) {_		super()__		setBeanClass(beanClass)__		setInstanceSupplier(instanceSupplier)__	};create,a,new,root,bean,definition,for,a,singleton,bean,constructing,each,instance,through,calling,the,given,supplier,possibly,a,lambda,or,method,reference,param,bean,class,the,class,of,the,bean,to,instantiate,param,instance,supplier,the,supplier,to,construct,a,bean,instance,as,an,alternative,to,a,declaratively,specified,factory,method,since,5,0,see,set,instance,supplier;public,t,root,bean,definition,nullable,class,t,bean,class,nullable,supplier,t,instance,supplier,super,set,bean,class,bean,class,set,instance,supplier,instance,supplier
RootBeanDefinition -> public <T> RootBeanDefinition(@Nullable Class<T> beanClass, @Nullable Supplier<T> instanceSupplier);1496837955;Create a new RootBeanDefinition for a singleton bean, constructing each instance_through calling the given supplier (possibly a lambda or method reference)._@param beanClass the class of the bean to instantiate_@param instanceSupplier the supplier to construct a bean instance,_as an alternative to a declaratively specified factory method_@since 5.0_@see #setInstanceSupplier;public <T> RootBeanDefinition(@Nullable Class<T> beanClass, @Nullable Supplier<T> instanceSupplier) {_		super()__		setBeanClass(beanClass)__		setInstanceSupplier(instanceSupplier)__	};create,a,new,root,bean,definition,for,a,singleton,bean,constructing,each,instance,through,calling,the,given,supplier,possibly,a,lambda,or,method,reference,param,bean,class,the,class,of,the,bean,to,instantiate,param,instance,supplier,the,supplier,to,construct,a,bean,instance,as,an,alternative,to,a,declaratively,specified,factory,method,since,5,0,see,set,instance,supplier;public,t,root,bean,definition,nullable,class,t,bean,class,nullable,supplier,t,instance,supplier,super,set,bean,class,bean,class,set,instance,supplier,instance,supplier
RootBeanDefinition -> public <T> RootBeanDefinition(@Nullable Class<T> beanClass, @Nullable Supplier<T> instanceSupplier);1498780456;Create a new RootBeanDefinition for a singleton bean, constructing each instance_through calling the given supplier (possibly a lambda or method reference)._@param beanClass the class of the bean to instantiate_@param instanceSupplier the supplier to construct a bean instance,_as an alternative to a declaratively specified factory method_@since 5.0_@see #setInstanceSupplier;public <T> RootBeanDefinition(@Nullable Class<T> beanClass, @Nullable Supplier<T> instanceSupplier) {_		super()__		setBeanClass(beanClass)__		setInstanceSupplier(instanceSupplier)__	};create,a,new,root,bean,definition,for,a,singleton,bean,constructing,each,instance,through,calling,the,given,supplier,possibly,a,lambda,or,method,reference,param,bean,class,the,class,of,the,bean,to,instantiate,param,instance,supplier,the,supplier,to,construct,a,bean,instance,as,an,alternative,to,a,declaratively,specified,factory,method,since,5,0,see,set,instance,supplier;public,t,root,bean,definition,nullable,class,t,bean,class,nullable,supplier,t,instance,supplier,super,set,bean,class,bean,class,set,instance,supplier,instance,supplier
RootBeanDefinition -> public <T> RootBeanDefinition(@Nullable Class<T> beanClass, @Nullable Supplier<T> instanceSupplier);1500448076;Create a new RootBeanDefinition for a singleton bean, constructing each instance_through calling the given supplier (possibly a lambda or method reference)._@param beanClass the class of the bean to instantiate_@param instanceSupplier the supplier to construct a bean instance,_as an alternative to a declaratively specified factory method_@since 5.0_@see #setInstanceSupplier;public <T> RootBeanDefinition(@Nullable Class<T> beanClass, @Nullable Supplier<T> instanceSupplier) {_		super()__		setBeanClass(beanClass)__		setInstanceSupplier(instanceSupplier)__	};create,a,new,root,bean,definition,for,a,singleton,bean,constructing,each,instance,through,calling,the,given,supplier,possibly,a,lambda,or,method,reference,param,bean,class,the,class,of,the,bean,to,instantiate,param,instance,supplier,the,supplier,to,construct,a,bean,instance,as,an,alternative,to,a,declaratively,specified,factory,method,since,5,0,see,set,instance,supplier;public,t,root,bean,definition,nullable,class,t,bean,class,nullable,supplier,t,instance,supplier,super,set,bean,class,bean,class,set,instance,supplier,instance,supplier
RootBeanDefinition -> public <T> RootBeanDefinition(@Nullable Class<T> beanClass, @Nullable Supplier<T> instanceSupplier);1510606271;Create a new RootBeanDefinition for a singleton bean, constructing each instance_through calling the given supplier (possibly a lambda or method reference)._@param beanClass the class of the bean to instantiate_@param instanceSupplier the supplier to construct a bean instance,_as an alternative to a declaratively specified factory method_@since 5.0_@see #setInstanceSupplier;public <T> RootBeanDefinition(@Nullable Class<T> beanClass, @Nullable Supplier<T> instanceSupplier) {_		super()__		setBeanClass(beanClass)__		setInstanceSupplier(instanceSupplier)__	};create,a,new,root,bean,definition,for,a,singleton,bean,constructing,each,instance,through,calling,the,given,supplier,possibly,a,lambda,or,method,reference,param,bean,class,the,class,of,the,bean,to,instantiate,param,instance,supplier,the,supplier,to,construct,a,bean,instance,as,an,alternative,to,a,declaratively,specified,factory,method,since,5,0,see,set,instance,supplier;public,t,root,bean,definition,nullable,class,t,bean,class,nullable,supplier,t,instance,supplier,super,set,bean,class,bean,class,set,instance,supplier,instance,supplier
RootBeanDefinition -> public <T> RootBeanDefinition(@Nullable Class<T> beanClass, @Nullable Supplier<T> instanceSupplier);1530174524;Create a new RootBeanDefinition for a singleton bean, constructing each instance_through calling the given supplier (possibly a lambda or method reference)._@param beanClass the class of the bean to instantiate_@param instanceSupplier the supplier to construct a bean instance,_as an alternative to a declaratively specified factory method_@since 5.0_@see #setInstanceSupplier;public <T> RootBeanDefinition(@Nullable Class<T> beanClass, @Nullable Supplier<T> instanceSupplier) {_		super()__		setBeanClass(beanClass)__		setInstanceSupplier(instanceSupplier)__	};create,a,new,root,bean,definition,for,a,singleton,bean,constructing,each,instance,through,calling,the,given,supplier,possibly,a,lambda,or,method,reference,param,bean,class,the,class,of,the,bean,to,instantiate,param,instance,supplier,the,supplier,to,construct,a,bean,instance,as,an,alternative,to,a,declaratively,specified,factory,method,since,5,0,see,set,instance,supplier;public,t,root,bean,definition,nullable,class,t,bean,class,nullable,supplier,t,instance,supplier,super,set,bean,class,bean,class,set,instance,supplier,instance,supplier
RootBeanDefinition -> public <T> RootBeanDefinition(@Nullable Class<T> beanClass, @Nullable Supplier<T> instanceSupplier);1531243692;Create a new RootBeanDefinition for a singleton bean, constructing each instance_through calling the given supplier (possibly a lambda or method reference)._@param beanClass the class of the bean to instantiate_@param instanceSupplier the supplier to construct a bean instance,_as an alternative to a declaratively specified factory method_@since 5.0_@see #setInstanceSupplier;public <T> RootBeanDefinition(@Nullable Class<T> beanClass, @Nullable Supplier<T> instanceSupplier) {_		super()__		setBeanClass(beanClass)__		setInstanceSupplier(instanceSupplier)__	};create,a,new,root,bean,definition,for,a,singleton,bean,constructing,each,instance,through,calling,the,given,supplier,possibly,a,lambda,or,method,reference,param,bean,class,the,class,of,the,bean,to,instantiate,param,instance,supplier,the,supplier,to,construct,a,bean,instance,as,an,alternative,to,a,declaratively,specified,factory,method,since,5,0,see,set,instance,supplier;public,t,root,bean,definition,nullable,class,t,bean,class,nullable,supplier,t,instance,supplier,super,set,bean,class,bean,class,set,instance,supplier,instance,supplier
RootBeanDefinition -> public <T> RootBeanDefinition(@Nullable Class<T> beanClass, @Nullable Supplier<T> instanceSupplier);1537388383;Create a new RootBeanDefinition for a singleton bean, constructing each instance_through calling the given supplier (possibly a lambda or method reference)._@param beanClass the class of the bean to instantiate_@param instanceSupplier the supplier to construct a bean instance,_as an alternative to a declaratively specified factory method_@since 5.0_@see #setInstanceSupplier;public <T> RootBeanDefinition(@Nullable Class<T> beanClass, @Nullable Supplier<T> instanceSupplier) {_		super()__		setBeanClass(beanClass)__		setInstanceSupplier(instanceSupplier)__	};create,a,new,root,bean,definition,for,a,singleton,bean,constructing,each,instance,through,calling,the,given,supplier,possibly,a,lambda,or,method,reference,param,bean,class,the,class,of,the,bean,to,instantiate,param,instance,supplier,the,supplier,to,construct,a,bean,instance,as,an,alternative,to,a,declaratively,specified,factory,method,since,5,0,see,set,instance,supplier;public,t,root,bean,definition,nullable,class,t,bean,class,nullable,supplier,t,instance,supplier,super,set,bean,class,bean,class,set,instance,supplier,instance,supplier
RootBeanDefinition -> public <T> RootBeanDefinition(@Nullable Class<T> beanClass, @Nullable Supplier<T> instanceSupplier);1539377630;Create a new RootBeanDefinition for a singleton bean, constructing each instance_through calling the given supplier (possibly a lambda or method reference)._@param beanClass the class of the bean to instantiate_@param instanceSupplier the supplier to construct a bean instance,_as an alternative to a declaratively specified factory method_@since 5.0_@see #setInstanceSupplier;public <T> RootBeanDefinition(@Nullable Class<T> beanClass, @Nullable Supplier<T> instanceSupplier) {_		super()__		setBeanClass(beanClass)__		setInstanceSupplier(instanceSupplier)__	};create,a,new,root,bean,definition,for,a,singleton,bean,constructing,each,instance,through,calling,the,given,supplier,possibly,a,lambda,or,method,reference,param,bean,class,the,class,of,the,bean,to,instantiate,param,instance,supplier,the,supplier,to,construct,a,bean,instance,as,an,alternative,to,a,declaratively,specified,factory,method,since,5,0,see,set,instance,supplier;public,t,root,bean,definition,nullable,class,t,bean,class,nullable,supplier,t,instance,supplier,super,set,bean,class,bean,class,set,instance,supplier,instance,supplier
RootBeanDefinition -> public boolean isFactoryMethod(Method candidate);1328020251;Check whether the given candidate qualifies as a factory method.;public boolean isFactoryMethod(Method candidate) {_		return (candidate != null && candidate.getName().equals(getFactoryMethodName()))__	};check,whether,the,given,candidate,qualifies,as,a,factory,method;public,boolean,is,factory,method,method,candidate,return,candidate,null,candidate,get,name,equals,get,factory,method,name
RootBeanDefinition -> public boolean isFactoryMethod(Method candidate);1352412675;Check whether the given candidate qualifies as a factory method.;public boolean isFactoryMethod(Method candidate) {_		return (candidate != null && candidate.getName().equals(getFactoryMethodName()))__	};check,whether,the,given,candidate,qualifies,as,a,factory,method;public,boolean,is,factory,method,method,candidate,return,candidate,null,candidate,get,name,equals,get,factory,method,name
RootBeanDefinition -> public boolean isFactoryMethod(Method candidate);1355352386;Check whether the given candidate qualifies as a factory method.;public boolean isFactoryMethod(Method candidate) {_		return (candidate != null && candidate.getName().equals(getFactoryMethodName()))__	};check,whether,the,given,candidate,qualifies,as,a,factory,method;public,boolean,is,factory,method,method,candidate,return,candidate,null,candidate,get,name,equals,get,factory,method,name
RootBeanDefinition -> public boolean isFactoryMethod(Method candidate);1356735495;Check whether the given candidate qualifies as a factory method.;public boolean isFactoryMethod(Method candidate) {_		return (candidate != null && candidate.getName().equals(getFactoryMethodName()))__	};check,whether,the,given,candidate,qualifies,as,a,factory,method;public,boolean,is,factory,method,method,candidate,return,candidate,null,candidate,get,name,equals,get,factory,method,name
RootBeanDefinition -> public boolean isFactoryMethod(Method candidate);1357119239;Check whether the given candidate qualifies as a factory method.;public boolean isFactoryMethod(Method candidate) {_		return (candidate != null && candidate.getName().equals(getFactoryMethodName()))__	};check,whether,the,given,candidate,qualifies,as,a,factory,method;public,boolean,is,factory,method,method,candidate,return,candidate,null,candidate,get,name,equals,get,factory,method,name
RootBeanDefinition -> public boolean isFactoryMethod(Method candidate);1362408075;Check whether the given candidate qualifies as a factory method.;public boolean isFactoryMethod(Method candidate) {_		return (candidate != null && candidate.getName().equals(getFactoryMethodName()))__	};check,whether,the,given,candidate,qualifies,as,a,factory,method;public,boolean,is,factory,method,method,candidate,return,candidate,null,candidate,get,name,equals,get,factory,method,name
RootBeanDefinition -> public boolean isFactoryMethod(Method candidate);1364505266;Check whether the given candidate qualifies as a factory method.;public boolean isFactoryMethod(Method candidate) {_		return (candidate != null && candidate.getName().equals(getFactoryMethodName()))__	};check,whether,the,given,candidate,qualifies,as,a,factory,method;public,boolean,is,factory,method,method,candidate,return,candidate,null,candidate,get,name,equals,get,factory,method,name
RootBeanDefinition -> public boolean isFactoryMethod(Method candidate);1367943112;Check whether the given candidate qualifies as a factory method.;public boolean isFactoryMethod(Method candidate) {_		return (candidate != null && candidate.getName().equals(getFactoryMethodName()))__	};check,whether,the,given,candidate,qualifies,as,a,factory,method;public,boolean,is,factory,method,method,candidate,return,candidate,null,candidate,get,name,equals,get,factory,method,name
RootBeanDefinition -> public boolean isFactoryMethod(Method candidate);1368482696;Check whether the given candidate qualifies as a factory method.;public boolean isFactoryMethod(Method candidate) {_		return (candidate != null && candidate.getName().equals(getFactoryMethodName()))__	};check,whether,the,given,candidate,qualifies,as,a,factory,method;public,boolean,is,factory,method,method,candidate,return,candidate,null,candidate,get,name,equals,get,factory,method,name
RootBeanDefinition -> public boolean isFactoryMethod(Method candidate);1368546246;Check whether the given candidate qualifies as a factory method.;public boolean isFactoryMethod(Method candidate) {_		return (candidate != null && candidate.getName().equals(getFactoryMethodName()))__	};check,whether,the,given,candidate,qualifies,as,a,factory,method;public,boolean,is,factory,method,method,candidate,return,candidate,null,candidate,get,name,equals,get,factory,method,name
RootBeanDefinition -> public boolean isFactoryMethod(Method candidate);1368628892;Check whether the given candidate qualifies as a factory method.;public boolean isFactoryMethod(Method candidate) {_		return (candidate != null && candidate.getName().equals(getFactoryMethodName()))__	};check,whether,the,given,candidate,qualifies,as,a,factory,method;public,boolean,is,factory,method,method,candidate,return,candidate,null,candidate,get,name,equals,get,factory,method,name
RootBeanDefinition -> public boolean isFactoryMethod(Method candidate);1382826936;Check whether the given candidate qualifies as a factory method.;public boolean isFactoryMethod(Method candidate) {_		return (candidate != null && candidate.getName().equals(getFactoryMethodName()))__	};check,whether,the,given,candidate,qualifies,as,a,factory,method;public,boolean,is,factory,method,method,candidate,return,candidate,null,candidate,get,name,equals,get,factory,method,name
RootBeanDefinition -> public boolean isFactoryMethod(Method candidate);1390396833;Check whether the given candidate qualifies as a factory method.;public boolean isFactoryMethod(Method candidate) {_		return (candidate != null && candidate.getName().equals(getFactoryMethodName()))__	};check,whether,the,given,candidate,qualifies,as,a,factory,method;public,boolean,is,factory,method,method,candidate,return,candidate,null,candidate,get,name,equals,get,factory,method,name
RootBeanDefinition -> public boolean isFactoryMethod(Method candidate);1467730834;Check whether the given candidate qualifies as a factory method.;public boolean isFactoryMethod(Method candidate) {_		return (candidate != null && candidate.getName().equals(getFactoryMethodName()))__	};check,whether,the,given,candidate,qualifies,as,a,factory,method;public,boolean,is,factory,method,method,candidate,return,candidate,null,candidate,get,name,equals,get,factory,method,name
RootBeanDefinition -> public boolean isFactoryMethod(Method candidate);1467744603;Check whether the given candidate qualifies as a factory method.;public boolean isFactoryMethod(Method candidate) {_		return (candidate != null && candidate.getName().equals(getFactoryMethodName()))__	};check,whether,the,given,candidate,qualifies,as,a,factory,method;public,boolean,is,factory,method,method,candidate,return,candidate,null,candidate,get,name,equals,get,factory,method,name
RootBeanDefinition -> public boolean isFactoryMethod(Method candidate);1469367243;Check whether the given candidate qualifies as a factory method.;public boolean isFactoryMethod(Method candidate) {_		return (candidate != null && candidate.getName().equals(getFactoryMethodName()))__	};check,whether,the,given,candidate,qualifies,as,a,factory,method;public,boolean,is,factory,method,method,candidate,return,candidate,null,candidate,get,name,equals,get,factory,method,name
RootBeanDefinition -> public boolean isFactoryMethod(Method candidate);1471445956;Check whether the given candidate qualifies as a factory method.;public boolean isFactoryMethod(Method candidate) {_		return (candidate != null && candidate.getName().equals(getFactoryMethodName()))__	};check,whether,the,given,candidate,qualifies,as,a,factory,method;public,boolean,is,factory,method,method,candidate,return,candidate,null,candidate,get,name,equals,get,factory,method,name
RootBeanDefinition -> public boolean isFactoryMethod(Method candidate);1474010431;Check whether the given candidate qualifies as a factory method.;public boolean isFactoryMethod(Method candidate) {_		return (candidate != null && candidate.getName().equals(getFactoryMethodName()))__	};check,whether,the,given,candidate,qualifies,as,a,factory,method;public,boolean,is,factory,method,method,candidate,return,candidate,null,candidate,get,name,equals,get,factory,method,name
RootBeanDefinition -> public boolean isFactoryMethod(Method candidate);1474014845;Check whether the given candidate qualifies as a factory method.;public boolean isFactoryMethod(Method candidate) {_		return (candidate != null && candidate.getName().equals(getFactoryMethodName()))__	};check,whether,the,given,candidate,qualifies,as,a,factory,method;public,boolean,is,factory,method,method,candidate,return,candidate,null,candidate,get,name,equals,get,factory,method,name
RootBeanDefinition -> public boolean isFactoryMethod(Method candidate);1482012648;Check whether the given candidate qualifies as a factory method.;public boolean isFactoryMethod(Method candidate) {_		return (candidate != null && candidate.getName().equals(getFactoryMethodName()))__	};check,whether,the,given,candidate,qualifies,as,a,factory,method;public,boolean,is,factory,method,method,candidate,return,candidate,null,candidate,get,name,equals,get,factory,method,name
RootBeanDefinition -> public boolean isFactoryMethod(Method candidate);1482091545;Check whether the given candidate qualifies as a factory method.;public boolean isFactoryMethod(Method candidate) {_		return (candidate != null && candidate.getName().equals(getFactoryMethodName()))__	};check,whether,the,given,candidate,qualifies,as,a,factory,method;public,boolean,is,factory,method,method,candidate,return,candidate,null,candidate,get,name,equals,get,factory,method,name
RootBeanDefinition -> public boolean isFactoryMethod(Method candidate);1483093818;Check whether the given candidate qualifies as a factory method.;public boolean isFactoryMethod(Method candidate) {_		return (candidate != null && candidate.getName().equals(getFactoryMethodName()))__	};check,whether,the,given,candidate,qualifies,as,a,factory,method;public,boolean,is,factory,method,method,candidate,return,candidate,null,candidate,get,name,equals,get,factory,method,name
RootBeanDefinition -> public boolean isFactoryMethod(Method candidate);1495868221;Check whether the given candidate qualifies as a factory method.;public boolean isFactoryMethod(Method candidate) {_		return (candidate != null && candidate.getName().equals(getFactoryMethodName()))__	};check,whether,the,given,candidate,qualifies,as,a,factory,method;public,boolean,is,factory,method,method,candidate,return,candidate,null,candidate,get,name,equals,get,factory,method,name
RootBeanDefinition -> public boolean isFactoryMethod(Method candidate);1496242568;Check whether the given candidate qualifies as a factory method.;public boolean isFactoryMethod(Method candidate) {_		return (candidate != null && candidate.getName().equals(getFactoryMethodName()))__	};check,whether,the,given,candidate,qualifies,as,a,factory,method;public,boolean,is,factory,method,method,candidate,return,candidate,null,candidate,get,name,equals,get,factory,method,name
RootBeanDefinition -> public boolean isFactoryMethod(Method candidate);1496243689;Check whether the given candidate qualifies as a factory method.;public boolean isFactoryMethod(Method candidate) {_		return (candidate != null && candidate.getName().equals(getFactoryMethodName()))__	};check,whether,the,given,candidate,qualifies,as,a,factory,method;public,boolean,is,factory,method,method,candidate,return,candidate,null,candidate,get,name,equals,get,factory,method,name
RootBeanDefinition -> public boolean isFactoryMethod(Method candidate);1496259743;Check whether the given candidate qualifies as a factory method.;public boolean isFactoryMethod(Method candidate) {_		return (candidate != null && candidate.getName().equals(getFactoryMethodName()))__	};check,whether,the,given,candidate,qualifies,as,a,factory,method;public,boolean,is,factory,method,method,candidate,return,candidate,null,candidate,get,name,equals,get,factory,method,name
RootBeanDefinition -> public boolean isFactoryMethod(Method candidate);1496837955;Check whether the given candidate qualifies as a factory method.;public boolean isFactoryMethod(Method candidate) {_		return candidate.getName().equals(getFactoryMethodName())__	};check,whether,the,given,candidate,qualifies,as,a,factory,method;public,boolean,is,factory,method,method,candidate,return,candidate,get,name,equals,get,factory,method,name
RootBeanDefinition -> public boolean isFactoryMethod(Method candidate);1498780456;Check whether the given candidate qualifies as a factory method.;public boolean isFactoryMethod(Method candidate) {_		return candidate.getName().equals(getFactoryMethodName())__	};check,whether,the,given,candidate,qualifies,as,a,factory,method;public,boolean,is,factory,method,method,candidate,return,candidate,get,name,equals,get,factory,method,name
RootBeanDefinition -> public boolean isFactoryMethod(Method candidate);1500448076;Check whether the given candidate qualifies as a factory method.;public boolean isFactoryMethod(Method candidate) {_		return candidate.getName().equals(getFactoryMethodName())__	};check,whether,the,given,candidate,qualifies,as,a,factory,method;public,boolean,is,factory,method,method,candidate,return,candidate,get,name,equals,get,factory,method,name
RootBeanDefinition -> public boolean isFactoryMethod(Method candidate);1510606271;Check whether the given candidate qualifies as a factory method.;public boolean isFactoryMethod(Method candidate) {_		return candidate.getName().equals(getFactoryMethodName())__	};check,whether,the,given,candidate,qualifies,as,a,factory,method;public,boolean,is,factory,method,method,candidate,return,candidate,get,name,equals,get,factory,method,name
RootBeanDefinition -> public boolean isFactoryMethod(Method candidate);1530174524;Check whether the given candidate qualifies as a factory method.;public boolean isFactoryMethod(Method candidate) {_		return candidate.getName().equals(getFactoryMethodName())__	};check,whether,the,given,candidate,qualifies,as,a,factory,method;public,boolean,is,factory,method,method,candidate,return,candidate,get,name,equals,get,factory,method,name
RootBeanDefinition -> public boolean isFactoryMethod(Method candidate);1531243692;Check whether the given candidate qualifies as a factory method.;public boolean isFactoryMethod(Method candidate) {_		return candidate.getName().equals(getFactoryMethodName())__	};check,whether,the,given,candidate,qualifies,as,a,factory,method;public,boolean,is,factory,method,method,candidate,return,candidate,get,name,equals,get,factory,method,name
RootBeanDefinition -> public boolean isFactoryMethod(Method candidate);1537388383;Check whether the given candidate qualifies as a factory method.;public boolean isFactoryMethod(Method candidate) {_		return candidate.getName().equals(getFactoryMethodName())__	};check,whether,the,given,candidate,qualifies,as,a,factory,method;public,boolean,is,factory,method,method,candidate,return,candidate,get,name,equals,get,factory,method,name
RootBeanDefinition -> public boolean isFactoryMethod(Method candidate);1539377630;Check whether the given candidate qualifies as a factory method.;public boolean isFactoryMethod(Method candidate) {_		return candidate.getName().equals(getFactoryMethodName())__	};check,whether,the,given,candidate,qualifies,as,a,factory,method;public,boolean,is,factory,method,method,candidate,return,candidate,get,name,equals,get,factory,method,name
RootBeanDefinition -> public RootBeanDefinition(Class<?> beanClass);1368546246;Create a new RootBeanDefinition for a singleton._@param beanClass the class of the bean to instantiate;public RootBeanDefinition(Class<?> beanClass) {_		super()__		setBeanClass(beanClass)__	};create,a,new,root,bean,definition,for,a,singleton,param,bean,class,the,class,of,the,bean,to,instantiate;public,root,bean,definition,class,bean,class,super,set,bean,class,bean,class
RootBeanDefinition -> public RootBeanDefinition(Class<?> beanClass);1368628892;Create a new RootBeanDefinition for a singleton._@param beanClass the class of the bean to instantiate;public RootBeanDefinition(Class<?> beanClass) {_		super()__		setBeanClass(beanClass)__	};create,a,new,root,bean,definition,for,a,singleton,param,bean,class,the,class,of,the,bean,to,instantiate;public,root,bean,definition,class,bean,class,super,set,bean,class,bean,class
RootBeanDefinition -> public RootBeanDefinition(Class<?> beanClass);1382826936;Create a new RootBeanDefinition for a singleton._@param beanClass the class of the bean to instantiate;public RootBeanDefinition(Class<?> beanClass) {_		super()__		setBeanClass(beanClass)__	};create,a,new,root,bean,definition,for,a,singleton,param,bean,class,the,class,of,the,bean,to,instantiate;public,root,bean,definition,class,bean,class,super,set,bean,class,bean,class
RootBeanDefinition -> public RootBeanDefinition(Class<?> beanClass);1390396833;Create a new RootBeanDefinition for a singleton._@param beanClass the class of the bean to instantiate;public RootBeanDefinition(Class<?> beanClass) {_		super()__		setBeanClass(beanClass)__	};create,a,new,root,bean,definition,for,a,singleton,param,bean,class,the,class,of,the,bean,to,instantiate;public,root,bean,definition,class,bean,class,super,set,bean,class,bean,class
RootBeanDefinition -> public RootBeanDefinition(Class<?> beanClass);1467730834;Create a new RootBeanDefinition for a singleton._@param beanClass the class of the bean to instantiate;public RootBeanDefinition(Class<?> beanClass) {_		super()__		setBeanClass(beanClass)__	};create,a,new,root,bean,definition,for,a,singleton,param,bean,class,the,class,of,the,bean,to,instantiate;public,root,bean,definition,class,bean,class,super,set,bean,class,bean,class
RootBeanDefinition -> public RootBeanDefinition(Class<?> beanClass);1467744603;Create a new RootBeanDefinition for a singleton._@param beanClass the class of the bean to instantiate;public RootBeanDefinition(Class<?> beanClass) {_		super()__		setBeanClass(beanClass)__	};create,a,new,root,bean,definition,for,a,singleton,param,bean,class,the,class,of,the,bean,to,instantiate;public,root,bean,definition,class,bean,class,super,set,bean,class,bean,class
RootBeanDefinition -> public RootBeanDefinition(Class<?> beanClass);1469367243;Create a new RootBeanDefinition for a singleton._@param beanClass the class of the bean to instantiate;public RootBeanDefinition(Class<?> beanClass) {_		super()__		setBeanClass(beanClass)__	};create,a,new,root,bean,definition,for,a,singleton,param,bean,class,the,class,of,the,bean,to,instantiate;public,root,bean,definition,class,bean,class,super,set,bean,class,bean,class
RootBeanDefinition -> public RootBeanDefinition(Class<?> beanClass);1471445956;Create a new RootBeanDefinition for a singleton._@param beanClass the class of the bean to instantiate;public RootBeanDefinition(Class<?> beanClass) {_		super()__		setBeanClass(beanClass)__	};create,a,new,root,bean,definition,for,a,singleton,param,bean,class,the,class,of,the,bean,to,instantiate;public,root,bean,definition,class,bean,class,super,set,bean,class,bean,class
RootBeanDefinition -> public RootBeanDefinition(Class<?> beanClass);1474010431;Create a new RootBeanDefinition for a singleton._@param beanClass the class of the bean to instantiate;public RootBeanDefinition(Class<?> beanClass) {_		super()__		setBeanClass(beanClass)__	};create,a,new,root,bean,definition,for,a,singleton,param,bean,class,the,class,of,the,bean,to,instantiate;public,root,bean,definition,class,bean,class,super,set,bean,class,bean,class
RootBeanDefinition -> public RootBeanDefinition(Class<?> beanClass);1474014845;Create a new RootBeanDefinition for a singleton._@param beanClass the class of the bean to instantiate;public RootBeanDefinition(Class<?> beanClass) {_		super()__		setBeanClass(beanClass)__	};create,a,new,root,bean,definition,for,a,singleton,param,bean,class,the,class,of,the,bean,to,instantiate;public,root,bean,definition,class,bean,class,super,set,bean,class,bean,class
RootBeanDefinition -> public RootBeanDefinition(Class<?> beanClass);1482012648;Create a new RootBeanDefinition for a singleton._@param beanClass the class of the bean to instantiate;public RootBeanDefinition(Class<?> beanClass) {_		super()__		setBeanClass(beanClass)__	};create,a,new,root,bean,definition,for,a,singleton,param,bean,class,the,class,of,the,bean,to,instantiate;public,root,bean,definition,class,bean,class,super,set,bean,class,bean,class
RootBeanDefinition -> public RootBeanDefinition(Class<?> beanClass);1482091545;Create a new RootBeanDefinition for a singleton._@param beanClass the class of the bean to instantiate_@see #setBeanClass;public RootBeanDefinition(Class<?> beanClass) {_		super()__		setBeanClass(beanClass)__	};create,a,new,root,bean,definition,for,a,singleton,param,bean,class,the,class,of,the,bean,to,instantiate,see,set,bean,class;public,root,bean,definition,class,bean,class,super,set,bean,class,bean,class
RootBeanDefinition -> public RootBeanDefinition(Class<?> beanClass);1483093818;Create a new RootBeanDefinition for a singleton._@param beanClass the class of the bean to instantiate_@see #setBeanClass;public RootBeanDefinition(Class<?> beanClass) {_		super()__		setBeanClass(beanClass)__	};create,a,new,root,bean,definition,for,a,singleton,param,bean,class,the,class,of,the,bean,to,instantiate,see,set,bean,class;public,root,bean,definition,class,bean,class,super,set,bean,class,bean,class
RootBeanDefinition -> public RootBeanDefinition(Class<?> beanClass);1495868221;Create a new RootBeanDefinition for a singleton._@param beanClass the class of the bean to instantiate_@see #setBeanClass;public RootBeanDefinition(Class<?> beanClass) {_		super()__		setBeanClass(beanClass)__	};create,a,new,root,bean,definition,for,a,singleton,param,bean,class,the,class,of,the,bean,to,instantiate,see,set,bean,class;public,root,bean,definition,class,bean,class,super,set,bean,class,bean,class
RootBeanDefinition -> public RootBeanDefinition(Class<?> beanClass);1496242568;Create a new RootBeanDefinition for a singleton._@param beanClass the class of the bean to instantiate_@see #setBeanClass;public RootBeanDefinition(Class<?> beanClass) {_		super()__		setBeanClass(beanClass)__	};create,a,new,root,bean,definition,for,a,singleton,param,bean,class,the,class,of,the,bean,to,instantiate,see,set,bean,class;public,root,bean,definition,class,bean,class,super,set,bean,class,bean,class
RootBeanDefinition -> public void setUniqueFactoryMethodName(String name);1328020251;Specify a factory method name that refers to a non-overloaded method.;public void setUniqueFactoryMethodName(String name) {_		Assert.hasText(name, "Factory method name must not be empty")__		setFactoryMethodName(name)__		this.isFactoryMethodUnique = true__	};specify,a,factory,method,name,that,refers,to,a,non,overloaded,method;public,void,set,unique,factory,method,name,string,name,assert,has,text,name,factory,method,name,must,not,be,empty,set,factory,method,name,name,this,is,factory,method,unique,true
RootBeanDefinition -> public void setUniqueFactoryMethodName(String name);1352412675;Specify a factory method name that refers to a non-overloaded method.;public void setUniqueFactoryMethodName(String name) {_		Assert.hasText(name, "Factory method name must not be empty")__		setFactoryMethodName(name)__		this.isFactoryMethodUnique = true__	};specify,a,factory,method,name,that,refers,to,a,non,overloaded,method;public,void,set,unique,factory,method,name,string,name,assert,has,text,name,factory,method,name,must,not,be,empty,set,factory,method,name,name,this,is,factory,method,unique,true
RootBeanDefinition -> public void setUniqueFactoryMethodName(String name);1355352386;Specify a factory method name that refers to a non-overloaded method.;public void setUniqueFactoryMethodName(String name) {_		Assert.hasText(name, "Factory method name must not be empty")__		setFactoryMethodName(name)__		this.isFactoryMethodUnique = true__	};specify,a,factory,method,name,that,refers,to,a,non,overloaded,method;public,void,set,unique,factory,method,name,string,name,assert,has,text,name,factory,method,name,must,not,be,empty,set,factory,method,name,name,this,is,factory,method,unique,true
RootBeanDefinition -> public void setUniqueFactoryMethodName(String name);1356735495;Specify a factory method name that refers to a non-overloaded method.;public void setUniqueFactoryMethodName(String name) {_		Assert.hasText(name, "Factory method name must not be empty")__		setFactoryMethodName(name)__		this.isFactoryMethodUnique = true__	};specify,a,factory,method,name,that,refers,to,a,non,overloaded,method;public,void,set,unique,factory,method,name,string,name,assert,has,text,name,factory,method,name,must,not,be,empty,set,factory,method,name,name,this,is,factory,method,unique,true
RootBeanDefinition -> public void setUniqueFactoryMethodName(String name);1357119239;Specify a factory method name that refers to a non-overloaded method.;public void setUniqueFactoryMethodName(String name) {_		Assert.hasText(name, "Factory method name must not be empty")__		setFactoryMethodName(name)__		this.isFactoryMethodUnique = true__	};specify,a,factory,method,name,that,refers,to,a,non,overloaded,method;public,void,set,unique,factory,method,name,string,name,assert,has,text,name,factory,method,name,must,not,be,empty,set,factory,method,name,name,this,is,factory,method,unique,true
RootBeanDefinition -> public void setUniqueFactoryMethodName(String name);1362408075;Specify a factory method name that refers to a non-overloaded method.;public void setUniqueFactoryMethodName(String name) {_		Assert.hasText(name, "Factory method name must not be empty")__		setFactoryMethodName(name)__		this.isFactoryMethodUnique = true__	};specify,a,factory,method,name,that,refers,to,a,non,overloaded,method;public,void,set,unique,factory,method,name,string,name,assert,has,text,name,factory,method,name,must,not,be,empty,set,factory,method,name,name,this,is,factory,method,unique,true
RootBeanDefinition -> public void setUniqueFactoryMethodName(String name);1364505266;Specify a factory method name that refers to a non-overloaded method.;public void setUniqueFactoryMethodName(String name) {_		Assert.hasText(name, "Factory method name must not be empty")__		setFactoryMethodName(name)__		this.isFactoryMethodUnique = true__	};specify,a,factory,method,name,that,refers,to,a,non,overloaded,method;public,void,set,unique,factory,method,name,string,name,assert,has,text,name,factory,method,name,must,not,be,empty,set,factory,method,name,name,this,is,factory,method,unique,true
RootBeanDefinition -> public void setUniqueFactoryMethodName(String name);1367943112;Specify a factory method name that refers to a non-overloaded method.;public void setUniqueFactoryMethodName(String name) {_		Assert.hasText(name, "Factory method name must not be empty")__		setFactoryMethodName(name)__		this.isFactoryMethodUnique = true__	};specify,a,factory,method,name,that,refers,to,a,non,overloaded,method;public,void,set,unique,factory,method,name,string,name,assert,has,text,name,factory,method,name,must,not,be,empty,set,factory,method,name,name,this,is,factory,method,unique,true
RootBeanDefinition -> public void setUniqueFactoryMethodName(String name);1368482696;Specify a factory method name that refers to a non-overloaded method.;public void setUniqueFactoryMethodName(String name) {_		Assert.hasText(name, "Factory method name must not be empty")__		setFactoryMethodName(name)__		this.isFactoryMethodUnique = true__	};specify,a,factory,method,name,that,refers,to,a,non,overloaded,method;public,void,set,unique,factory,method,name,string,name,assert,has,text,name,factory,method,name,must,not,be,empty,set,factory,method,name,name,this,is,factory,method,unique,true
RootBeanDefinition -> public void setUniqueFactoryMethodName(String name);1368546246;Specify a factory method name that refers to a non-overloaded method.;public void setUniqueFactoryMethodName(String name) {_		Assert.hasText(name, "Factory method name must not be empty")__		setFactoryMethodName(name)__		this.isFactoryMethodUnique = true__	};specify,a,factory,method,name,that,refers,to,a,non,overloaded,method;public,void,set,unique,factory,method,name,string,name,assert,has,text,name,factory,method,name,must,not,be,empty,set,factory,method,name,name,this,is,factory,method,unique,true
RootBeanDefinition -> public void setUniqueFactoryMethodName(String name);1368628892;Specify a factory method name that refers to a non-overloaded method.;public void setUniqueFactoryMethodName(String name) {_		Assert.hasText(name, "Factory method name must not be empty")__		setFactoryMethodName(name)__		this.isFactoryMethodUnique = true__	};specify,a,factory,method,name,that,refers,to,a,non,overloaded,method;public,void,set,unique,factory,method,name,string,name,assert,has,text,name,factory,method,name,must,not,be,empty,set,factory,method,name,name,this,is,factory,method,unique,true
RootBeanDefinition -> public void setUniqueFactoryMethodName(String name);1382826936;Specify a factory method name that refers to a non-overloaded method.;public void setUniqueFactoryMethodName(String name) {_		Assert.hasText(name, "Factory method name must not be empty")__		setFactoryMethodName(name)__		this.isFactoryMethodUnique = true__	};specify,a,factory,method,name,that,refers,to,a,non,overloaded,method;public,void,set,unique,factory,method,name,string,name,assert,has,text,name,factory,method,name,must,not,be,empty,set,factory,method,name,name,this,is,factory,method,unique,true
RootBeanDefinition -> public void setUniqueFactoryMethodName(String name);1390396833;Specify a factory method name that refers to a non-overloaded method.;public void setUniqueFactoryMethodName(String name) {_		Assert.hasText(name, "Factory method name must not be empty")__		setFactoryMethodName(name)__		this.isFactoryMethodUnique = true__	};specify,a,factory,method,name,that,refers,to,a,non,overloaded,method;public,void,set,unique,factory,method,name,string,name,assert,has,text,name,factory,method,name,must,not,be,empty,set,factory,method,name,name,this,is,factory,method,unique,true
RootBeanDefinition -> public void setUniqueFactoryMethodName(String name);1467730834;Specify a factory method name that refers to a non-overloaded method.;public void setUniqueFactoryMethodName(String name) {_		Assert.hasText(name, "Factory method name must not be empty")__		setFactoryMethodName(name)__		this.isFactoryMethodUnique = true__	};specify,a,factory,method,name,that,refers,to,a,non,overloaded,method;public,void,set,unique,factory,method,name,string,name,assert,has,text,name,factory,method,name,must,not,be,empty,set,factory,method,name,name,this,is,factory,method,unique,true
RootBeanDefinition -> public void setUniqueFactoryMethodName(String name);1467744603;Specify a factory method name that refers to a non-overloaded method.;public void setUniqueFactoryMethodName(String name) {_		Assert.hasText(name, "Factory method name must not be empty")__		setFactoryMethodName(name)__		this.isFactoryMethodUnique = true__	};specify,a,factory,method,name,that,refers,to,a,non,overloaded,method;public,void,set,unique,factory,method,name,string,name,assert,has,text,name,factory,method,name,must,not,be,empty,set,factory,method,name,name,this,is,factory,method,unique,true
RootBeanDefinition -> public void setUniqueFactoryMethodName(String name);1469367243;Specify a factory method name that refers to a non-overloaded method.;public void setUniqueFactoryMethodName(String name) {_		Assert.hasText(name, "Factory method name must not be empty")__		setFactoryMethodName(name)__		this.isFactoryMethodUnique = true__	};specify,a,factory,method,name,that,refers,to,a,non,overloaded,method;public,void,set,unique,factory,method,name,string,name,assert,has,text,name,factory,method,name,must,not,be,empty,set,factory,method,name,name,this,is,factory,method,unique,true
RootBeanDefinition -> public void setUniqueFactoryMethodName(String name);1471445956;Specify a factory method name that refers to a non-overloaded method.;public void setUniqueFactoryMethodName(String name) {_		Assert.hasText(name, "Factory method name must not be empty")__		setFactoryMethodName(name)__		this.isFactoryMethodUnique = true__	};specify,a,factory,method,name,that,refers,to,a,non,overloaded,method;public,void,set,unique,factory,method,name,string,name,assert,has,text,name,factory,method,name,must,not,be,empty,set,factory,method,name,name,this,is,factory,method,unique,true
RootBeanDefinition -> public void setUniqueFactoryMethodName(String name);1474010431;Specify a factory method name that refers to a non-overloaded method.;public void setUniqueFactoryMethodName(String name) {_		Assert.hasText(name, "Factory method name must not be empty")__		setFactoryMethodName(name)__		this.isFactoryMethodUnique = true__	};specify,a,factory,method,name,that,refers,to,a,non,overloaded,method;public,void,set,unique,factory,method,name,string,name,assert,has,text,name,factory,method,name,must,not,be,empty,set,factory,method,name,name,this,is,factory,method,unique,true
RootBeanDefinition -> public void setUniqueFactoryMethodName(String name);1474014845;Specify a factory method name that refers to a non-overloaded method.;public void setUniqueFactoryMethodName(String name) {_		Assert.hasText(name, "Factory method name must not be empty")__		setFactoryMethodName(name)__		this.isFactoryMethodUnique = true__	};specify,a,factory,method,name,that,refers,to,a,non,overloaded,method;public,void,set,unique,factory,method,name,string,name,assert,has,text,name,factory,method,name,must,not,be,empty,set,factory,method,name,name,this,is,factory,method,unique,true
RootBeanDefinition -> public void setUniqueFactoryMethodName(String name);1482012648;Specify a factory method name that refers to a non-overloaded method.;public void setUniqueFactoryMethodName(String name) {_		Assert.hasText(name, "Factory method name must not be empty")__		setFactoryMethodName(name)__		this.isFactoryMethodUnique = true__	};specify,a,factory,method,name,that,refers,to,a,non,overloaded,method;public,void,set,unique,factory,method,name,string,name,assert,has,text,name,factory,method,name,must,not,be,empty,set,factory,method,name,name,this,is,factory,method,unique,true
RootBeanDefinition -> public void setUniqueFactoryMethodName(String name);1482091545;Specify a factory method name that refers to a non-overloaded method.;public void setUniqueFactoryMethodName(String name) {_		Assert.hasText(name, "Factory method name must not be empty")__		setFactoryMethodName(name)__		this.isFactoryMethodUnique = true__	};specify,a,factory,method,name,that,refers,to,a,non,overloaded,method;public,void,set,unique,factory,method,name,string,name,assert,has,text,name,factory,method,name,must,not,be,empty,set,factory,method,name,name,this,is,factory,method,unique,true
RootBeanDefinition -> public void setUniqueFactoryMethodName(String name);1483093818;Specify a factory method name that refers to a non-overloaded method.;public void setUniqueFactoryMethodName(String name) {_		Assert.hasText(name, "Factory method name must not be empty")__		setFactoryMethodName(name)__		this.isFactoryMethodUnique = true__	};specify,a,factory,method,name,that,refers,to,a,non,overloaded,method;public,void,set,unique,factory,method,name,string,name,assert,has,text,name,factory,method,name,must,not,be,empty,set,factory,method,name,name,this,is,factory,method,unique,true
RootBeanDefinition -> public void setUniqueFactoryMethodName(String name);1495868221;Specify a factory method name that refers to a non-overloaded method.;public void setUniqueFactoryMethodName(String name) {_		Assert.hasText(name, "Factory method name must not be empty")__		setFactoryMethodName(name)__		this.isFactoryMethodUnique = true__	};specify,a,factory,method,name,that,refers,to,a,non,overloaded,method;public,void,set,unique,factory,method,name,string,name,assert,has,text,name,factory,method,name,must,not,be,empty,set,factory,method,name,name,this,is,factory,method,unique,true
RootBeanDefinition -> public void setUniqueFactoryMethodName(String name);1496242568;Specify a factory method name that refers to a non-overloaded method.;public void setUniqueFactoryMethodName(String name) {_		Assert.hasText(name, "Factory method name must not be empty")__		setFactoryMethodName(name)__		this.isFactoryMethodUnique = true__	};specify,a,factory,method,name,that,refers,to,a,non,overloaded,method;public,void,set,unique,factory,method,name,string,name,assert,has,text,name,factory,method,name,must,not,be,empty,set,factory,method,name,name,this,is,factory,method,unique,true
RootBeanDefinition -> public void setUniqueFactoryMethodName(String name);1496243689;Specify a factory method name that refers to a non-overloaded method.;public void setUniqueFactoryMethodName(String name) {_		Assert.hasText(name, "Factory method name must not be empty")__		setFactoryMethodName(name)__		this.isFactoryMethodUnique = true__	};specify,a,factory,method,name,that,refers,to,a,non,overloaded,method;public,void,set,unique,factory,method,name,string,name,assert,has,text,name,factory,method,name,must,not,be,empty,set,factory,method,name,name,this,is,factory,method,unique,true
RootBeanDefinition -> public void setUniqueFactoryMethodName(String name);1496259743;Specify a factory method name that refers to a non-overloaded method.;public void setUniqueFactoryMethodName(String name) {_		Assert.hasText(name, "Factory method name must not be empty")__		setFactoryMethodName(name)__		this.isFactoryMethodUnique = true__	};specify,a,factory,method,name,that,refers,to,a,non,overloaded,method;public,void,set,unique,factory,method,name,string,name,assert,has,text,name,factory,method,name,must,not,be,empty,set,factory,method,name,name,this,is,factory,method,unique,true
RootBeanDefinition -> public void setUniqueFactoryMethodName(String name);1496837955;Specify a factory method name that refers to a non-overloaded method.;public void setUniqueFactoryMethodName(String name) {_		Assert.hasText(name, "Factory method name must not be empty")__		setFactoryMethodName(name)__		this.isFactoryMethodUnique = true__	};specify,a,factory,method,name,that,refers,to,a,non,overloaded,method;public,void,set,unique,factory,method,name,string,name,assert,has,text,name,factory,method,name,must,not,be,empty,set,factory,method,name,name,this,is,factory,method,unique,true
RootBeanDefinition -> public void setUniqueFactoryMethodName(String name);1498780456;Specify a factory method name that refers to a non-overloaded method.;public void setUniqueFactoryMethodName(String name) {_		Assert.hasText(name, "Factory method name must not be empty")__		setFactoryMethodName(name)__		this.isFactoryMethodUnique = true__	};specify,a,factory,method,name,that,refers,to,a,non,overloaded,method;public,void,set,unique,factory,method,name,string,name,assert,has,text,name,factory,method,name,must,not,be,empty,set,factory,method,name,name,this,is,factory,method,unique,true
RootBeanDefinition -> public void setUniqueFactoryMethodName(String name);1500448076;Specify a factory method name that refers to a non-overloaded method.;public void setUniqueFactoryMethodName(String name) {_		Assert.hasText(name, "Factory method name must not be empty")__		setFactoryMethodName(name)__		this.isFactoryMethodUnique = true__	};specify,a,factory,method,name,that,refers,to,a,non,overloaded,method;public,void,set,unique,factory,method,name,string,name,assert,has,text,name,factory,method,name,must,not,be,empty,set,factory,method,name,name,this,is,factory,method,unique,true
RootBeanDefinition -> public void setUniqueFactoryMethodName(String name);1510606271;Specify a factory method name that refers to a non-overloaded method.;public void setUniqueFactoryMethodName(String name) {_		Assert.hasText(name, "Factory method name must not be empty")__		setFactoryMethodName(name)__		this.isFactoryMethodUnique = true__	};specify,a,factory,method,name,that,refers,to,a,non,overloaded,method;public,void,set,unique,factory,method,name,string,name,assert,has,text,name,factory,method,name,must,not,be,empty,set,factory,method,name,name,this,is,factory,method,unique,true
RootBeanDefinition -> public void setUniqueFactoryMethodName(String name);1530174524;Specify a factory method name that refers to a non-overloaded method.;public void setUniqueFactoryMethodName(String name) {_		Assert.hasText(name, "Factory method name must not be empty")__		setFactoryMethodName(name)__		this.isFactoryMethodUnique = true__	};specify,a,factory,method,name,that,refers,to,a,non,overloaded,method;public,void,set,unique,factory,method,name,string,name,assert,has,text,name,factory,method,name,must,not,be,empty,set,factory,method,name,name,this,is,factory,method,unique,true
RootBeanDefinition -> public void setUniqueFactoryMethodName(String name);1531243692;Specify a factory method name that refers to a non-overloaded method.;public void setUniqueFactoryMethodName(String name) {_		Assert.hasText(name, "Factory method name must not be empty")__		setFactoryMethodName(name)__		this.isFactoryMethodUnique = true__	};specify,a,factory,method,name,that,refers,to,a,non,overloaded,method;public,void,set,unique,factory,method,name,string,name,assert,has,text,name,factory,method,name,must,not,be,empty,set,factory,method,name,name,this,is,factory,method,unique,true
RootBeanDefinition -> public void setUniqueFactoryMethodName(String name);1537388383;Specify a factory method name that refers to a non-overloaded method.;public void setUniqueFactoryMethodName(String name) {_		Assert.hasText(name, "Factory method name must not be empty")__		setFactoryMethodName(name)__		this.isFactoryMethodUnique = true__	};specify,a,factory,method,name,that,refers,to,a,non,overloaded,method;public,void,set,unique,factory,method,name,string,name,assert,has,text,name,factory,method,name,must,not,be,empty,set,factory,method,name,name,this,is,factory,method,unique,true
RootBeanDefinition -> public void setUniqueFactoryMethodName(String name);1539377630;Specify a factory method name that refers to a non-overloaded method.;public void setUniqueFactoryMethodName(String name) {_		Assert.hasText(name, "Factory method name must not be empty")__		setFactoryMethodName(name)__		this.isFactoryMethodUnique = true__	};specify,a,factory,method,name,that,refers,to,a,non,overloaded,method;public,void,set,unique,factory,method,name,string,name,assert,has,text,name,factory,method,name,must,not,be,empty,set,factory,method,name,name,this,is,factory,method,unique,true
RootBeanDefinition -> public void setDecoratedDefinition(BeanDefinitionHolder decoratedDefinition);1390396833;Register a target definition that is being decorated by this bean definition.;public void setDecoratedDefinition(BeanDefinitionHolder decoratedDefinition) {_		this.decoratedDefinition = decoratedDefinition__	};register,a,target,definition,that,is,being,decorated,by,this,bean,definition;public,void,set,decorated,definition,bean,definition,holder,decorated,definition,this,decorated,definition,decorated,definition
RootBeanDefinition -> public void setDecoratedDefinition(BeanDefinitionHolder decoratedDefinition);1467730834;Register a target definition that is being decorated by this bean definition.;public void setDecoratedDefinition(BeanDefinitionHolder decoratedDefinition) {_		this.decoratedDefinition = decoratedDefinition__	};register,a,target,definition,that,is,being,decorated,by,this,bean,definition;public,void,set,decorated,definition,bean,definition,holder,decorated,definition,this,decorated,definition,decorated,definition
RootBeanDefinition -> public void setDecoratedDefinition(BeanDefinitionHolder decoratedDefinition);1467744603;Register a target definition that is being decorated by this bean definition.;public void setDecoratedDefinition(BeanDefinitionHolder decoratedDefinition) {_		this.decoratedDefinition = decoratedDefinition__	};register,a,target,definition,that,is,being,decorated,by,this,bean,definition;public,void,set,decorated,definition,bean,definition,holder,decorated,definition,this,decorated,definition,decorated,definition
RootBeanDefinition -> public void setDecoratedDefinition(BeanDefinitionHolder decoratedDefinition);1469367243;Register a target definition that is being decorated by this bean definition.;public void setDecoratedDefinition(BeanDefinitionHolder decoratedDefinition) {_		this.decoratedDefinition = decoratedDefinition__	};register,a,target,definition,that,is,being,decorated,by,this,bean,definition;public,void,set,decorated,definition,bean,definition,holder,decorated,definition,this,decorated,definition,decorated,definition
RootBeanDefinition -> public void setDecoratedDefinition(BeanDefinitionHolder decoratedDefinition);1471445956;Register a target definition that is being decorated by this bean definition.;public void setDecoratedDefinition(BeanDefinitionHolder decoratedDefinition) {_		this.decoratedDefinition = decoratedDefinition__	};register,a,target,definition,that,is,being,decorated,by,this,bean,definition;public,void,set,decorated,definition,bean,definition,holder,decorated,definition,this,decorated,definition,decorated,definition
RootBeanDefinition -> public void setDecoratedDefinition(BeanDefinitionHolder decoratedDefinition);1474010431;Register a target definition that is being decorated by this bean definition.;public void setDecoratedDefinition(BeanDefinitionHolder decoratedDefinition) {_		this.decoratedDefinition = decoratedDefinition__	};register,a,target,definition,that,is,being,decorated,by,this,bean,definition;public,void,set,decorated,definition,bean,definition,holder,decorated,definition,this,decorated,definition,decorated,definition
RootBeanDefinition -> public void setDecoratedDefinition(BeanDefinitionHolder decoratedDefinition);1474014845;Register a target definition that is being decorated by this bean definition.;public void setDecoratedDefinition(BeanDefinitionHolder decoratedDefinition) {_		this.decoratedDefinition = decoratedDefinition__	};register,a,target,definition,that,is,being,decorated,by,this,bean,definition;public,void,set,decorated,definition,bean,definition,holder,decorated,definition,this,decorated,definition,decorated,definition
RootBeanDefinition -> public void setDecoratedDefinition(BeanDefinitionHolder decoratedDefinition);1482012648;Register a target definition that is being decorated by this bean definition.;public void setDecoratedDefinition(BeanDefinitionHolder decoratedDefinition) {_		this.decoratedDefinition = decoratedDefinition__	};register,a,target,definition,that,is,being,decorated,by,this,bean,definition;public,void,set,decorated,definition,bean,definition,holder,decorated,definition,this,decorated,definition,decorated,definition
RootBeanDefinition -> public void setDecoratedDefinition(BeanDefinitionHolder decoratedDefinition);1482091545;Register a target definition that is being decorated by this bean definition.;public void setDecoratedDefinition(BeanDefinitionHolder decoratedDefinition) {_		this.decoratedDefinition = decoratedDefinition__	};register,a,target,definition,that,is,being,decorated,by,this,bean,definition;public,void,set,decorated,definition,bean,definition,holder,decorated,definition,this,decorated,definition,decorated,definition
RootBeanDefinition -> public void setDecoratedDefinition(BeanDefinitionHolder decoratedDefinition);1483093818;Register a target definition that is being decorated by this bean definition.;public void setDecoratedDefinition(BeanDefinitionHolder decoratedDefinition) {_		this.decoratedDefinition = decoratedDefinition__	};register,a,target,definition,that,is,being,decorated,by,this,bean,definition;public,void,set,decorated,definition,bean,definition,holder,decorated,definition,this,decorated,definition,decorated,definition
RootBeanDefinition -> public void setDecoratedDefinition(BeanDefinitionHolder decoratedDefinition);1495868221;Register a target definition that is being decorated by this bean definition.;public void setDecoratedDefinition(BeanDefinitionHolder decoratedDefinition) {_		this.decoratedDefinition = decoratedDefinition__	};register,a,target,definition,that,is,being,decorated,by,this,bean,definition;public,void,set,decorated,definition,bean,definition,holder,decorated,definition,this,decorated,definition,decorated,definition
RootBeanDefinition -> public void setDecoratedDefinition(BeanDefinitionHolder decoratedDefinition);1496242568;Register a target definition that is being decorated by this bean definition.;public void setDecoratedDefinition(BeanDefinitionHolder decoratedDefinition) {_		this.decoratedDefinition = decoratedDefinition__	};register,a,target,definition,that,is,being,decorated,by,this,bean,definition;public,void,set,decorated,definition,bean,definition,holder,decorated,definition,this,decorated,definition,decorated,definition
RootBeanDefinition -> public void setDecoratedDefinition(BeanDefinitionHolder decoratedDefinition);1496243689;Register a target definition that is being decorated by this bean definition.;public void setDecoratedDefinition(BeanDefinitionHolder decoratedDefinition) {_		this.decoratedDefinition = decoratedDefinition__	};register,a,target,definition,that,is,being,decorated,by,this,bean,definition;public,void,set,decorated,definition,bean,definition,holder,decorated,definition,this,decorated,definition,decorated,definition
RootBeanDefinition -> public void setDecoratedDefinition(BeanDefinitionHolder decoratedDefinition);1496259743;Register a target definition that is being decorated by this bean definition.;public void setDecoratedDefinition(BeanDefinitionHolder decoratedDefinition) {_		this.decoratedDefinition = decoratedDefinition__	};register,a,target,definition,that,is,being,decorated,by,this,bean,definition;public,void,set,decorated,definition,bean,definition,holder,decorated,definition,this,decorated,definition,decorated,definition
RootBeanDefinition -> public void setDecoratedDefinition(BeanDefinitionHolder decoratedDefinition);1496837955;Register a target definition that is being decorated by this bean definition.;public void setDecoratedDefinition(BeanDefinitionHolder decoratedDefinition) {_		this.decoratedDefinition = decoratedDefinition__	};register,a,target,definition,that,is,being,decorated,by,this,bean,definition;public,void,set,decorated,definition,bean,definition,holder,decorated,definition,this,decorated,definition,decorated,definition
RootBeanDefinition -> public void setDecoratedDefinition(BeanDefinitionHolder decoratedDefinition);1498780456;Register a target definition that is being decorated by this bean definition.;public void setDecoratedDefinition(BeanDefinitionHolder decoratedDefinition) {_		this.decoratedDefinition = decoratedDefinition__	};register,a,target,definition,that,is,being,decorated,by,this,bean,definition;public,void,set,decorated,definition,bean,definition,holder,decorated,definition,this,decorated,definition,decorated,definition
RootBeanDefinition -> public <T> RootBeanDefinition(Class<T> beanClass, Supplier<T> instanceSupplier);1482091545;Create a new RootBeanDefinition for a singleton bean, constructing each instance_through calling the given supplier (possibly a lambda or method reference)._@param beanClass the class of the bean to instantiate_@param instanceSupplier the supplier to construct a bean instance,_as an alternative to a declaratively specified factory method_@since 5.0_@see #setInstanceSupplier(Supplier);public <T> RootBeanDefinition(Class<T> beanClass, Supplier<T> instanceSupplier) {_		super()__		setBeanClass(beanClass)__		setInstanceSupplier(instanceSupplier)__	};create,a,new,root,bean,definition,for,a,singleton,bean,constructing,each,instance,through,calling,the,given,supplier,possibly,a,lambda,or,method,reference,param,bean,class,the,class,of,the,bean,to,instantiate,param,instance,supplier,the,supplier,to,construct,a,bean,instance,as,an,alternative,to,a,declaratively,specified,factory,method,since,5,0,see,set,instance,supplier,supplier;public,t,root,bean,definition,class,t,bean,class,supplier,t,instance,supplier,super,set,bean,class,bean,class,set,instance,supplier,instance,supplier
RootBeanDefinition -> public <T> RootBeanDefinition(Class<T> beanClass, Supplier<T> instanceSupplier);1483093818;Create a new RootBeanDefinition for a singleton bean, constructing each instance_through calling the given supplier (possibly a lambda or method reference)._@param beanClass the class of the bean to instantiate_@param instanceSupplier the supplier to construct a bean instance,_as an alternative to a declaratively specified factory method_@since 5.0_@see #setInstanceSupplier;public <T> RootBeanDefinition(Class<T> beanClass, Supplier<T> instanceSupplier) {_		super()__		setBeanClass(beanClass)__		setInstanceSupplier(instanceSupplier)__	};create,a,new,root,bean,definition,for,a,singleton,bean,constructing,each,instance,through,calling,the,given,supplier,possibly,a,lambda,or,method,reference,param,bean,class,the,class,of,the,bean,to,instantiate,param,instance,supplier,the,supplier,to,construct,a,bean,instance,as,an,alternative,to,a,declaratively,specified,factory,method,since,5,0,see,set,instance,supplier;public,t,root,bean,definition,class,t,bean,class,supplier,t,instance,supplier,super,set,bean,class,bean,class,set,instance,supplier,instance,supplier
RootBeanDefinition -> public <T> RootBeanDefinition(Class<T> beanClass, Supplier<T> instanceSupplier);1495868221;Create a new RootBeanDefinition for a singleton bean, constructing each instance_through calling the given supplier (possibly a lambda or method reference)._@param beanClass the class of the bean to instantiate_@param instanceSupplier the supplier to construct a bean instance,_as an alternative to a declaratively specified factory method_@since 5.0_@see #setInstanceSupplier;public <T> RootBeanDefinition(Class<T> beanClass, Supplier<T> instanceSupplier) {_		super()__		setBeanClass(beanClass)__		setInstanceSupplier(instanceSupplier)__	};create,a,new,root,bean,definition,for,a,singleton,bean,constructing,each,instance,through,calling,the,given,supplier,possibly,a,lambda,or,method,reference,param,bean,class,the,class,of,the,bean,to,instantiate,param,instance,supplier,the,supplier,to,construct,a,bean,instance,as,an,alternative,to,a,declaratively,specified,factory,method,since,5,0,see,set,instance,supplier;public,t,root,bean,definition,class,t,bean,class,supplier,t,instance,supplier,super,set,bean,class,bean,class,set,instance,supplier,instance,supplier
RootBeanDefinition -> public <T> RootBeanDefinition(Class<T> beanClass, Supplier<T> instanceSupplier);1496242568;Create a new RootBeanDefinition for a singleton bean, constructing each instance_through calling the given supplier (possibly a lambda or method reference)._@param beanClass the class of the bean to instantiate_@param instanceSupplier the supplier to construct a bean instance,_as an alternative to a declaratively specified factory method_@since 5.0_@see #setInstanceSupplier;public <T> RootBeanDefinition(Class<T> beanClass, Supplier<T> instanceSupplier) {_		super()__		setBeanClass(beanClass)__		setInstanceSupplier(instanceSupplier)__	};create,a,new,root,bean,definition,for,a,singleton,bean,constructing,each,instance,through,calling,the,given,supplier,possibly,a,lambda,or,method,reference,param,bean,class,the,class,of,the,bean,to,instantiate,param,instance,supplier,the,supplier,to,construct,a,bean,instance,as,an,alternative,to,a,declaratively,specified,factory,method,since,5,0,see,set,instance,supplier;public,t,root,bean,definition,class,t,bean,class,supplier,t,instance,supplier,super,set,bean,class,bean,class,set,instance,supplier,instance,supplier
RootBeanDefinition -> public Class<?> getTargetType();1362408075;Return the target type of this bean definition, if known_(either specified in advance or resolved on first instantiation).;public Class<?> getTargetType() {_		return this.targetType__	};return,the,target,type,of,this,bean,definition,if,known,either,specified,in,advance,or,resolved,on,first,instantiation;public,class,get,target,type,return,this,target,type
RootBeanDefinition -> public Class<?> getTargetType();1364505266;Return the target type of this bean definition, if known_(either specified in advance or resolved on first instantiation).;public Class<?> getTargetType() {_		return this.targetType__	};return,the,target,type,of,this,bean,definition,if,known,either,specified,in,advance,or,resolved,on,first,instantiation;public,class,get,target,type,return,this,target,type
RootBeanDefinition -> public Class<?> getTargetType();1367943112;Return the target type of this bean definition, if known_(either specified in advance or resolved on first instantiation).;public Class<?> getTargetType() {_		return this.targetType__	};return,the,target,type,of,this,bean,definition,if,known,either,specified,in,advance,or,resolved,on,first,instantiation;public,class,get,target,type,return,this,target,type
RootBeanDefinition -> public Class<?> getTargetType();1368482696;Return the target type of this bean definition, if known_(either specified in advance or resolved on first instantiation).;public Class<?> getTargetType() {_		return this.targetType__	};return,the,target,type,of,this,bean,definition,if,known,either,specified,in,advance,or,resolved,on,first,instantiation;public,class,get,target,type,return,this,target,type
RootBeanDefinition -> public Class<?> getTargetType();1368546246;Return the target type of this bean definition, if known_(either specified in advance or resolved on first instantiation).;public Class<?> getTargetType() {_		return this.targetType__	};return,the,target,type,of,this,bean,definition,if,known,either,specified,in,advance,or,resolved,on,first,instantiation;public,class,get,target,type,return,this,target,type
RootBeanDefinition -> public Class<?> getTargetType();1368628892;Return the target type of this bean definition, if known_(either specified in advance or resolved on first instantiation).;public Class<?> getTargetType() {_		return this.targetType__	};return,the,target,type,of,this,bean,definition,if,known,either,specified,in,advance,or,resolved,on,first,instantiation;public,class,get,target,type,return,this,target,type
RootBeanDefinition -> public Class<?> getTargetType();1382826936;Return the target type of this bean definition, if known_(either specified in advance or resolved on first instantiation).;public Class<?> getTargetType() {_		return this.targetType__	};return,the,target,type,of,this,bean,definition,if,known,either,specified,in,advance,or,resolved,on,first,instantiation;public,class,get,target,type,return,this,target,type
RootBeanDefinition -> public Class<?> getTargetType();1390396833;Return the target type of this bean definition, if known_(either specified in advance or resolved on first instantiation).;public Class<?> getTargetType() {_		return this.targetType__	};return,the,target,type,of,this,bean,definition,if,known,either,specified,in,advance,or,resolved,on,first,instantiation;public,class,get,target,type,return,this,target,type
RootBeanDefinition -> public Class<?> getTargetType();1467730834;Return the target type of this bean definition, if known_(either specified in advance or resolved on first instantiation).;public Class<?> getTargetType() {_		return this.targetType__	};return,the,target,type,of,this,bean,definition,if,known,either,specified,in,advance,or,resolved,on,first,instantiation;public,class,get,target,type,return,this,target,type
RootBeanDefinition -> public Class<?> getTargetType();1467744603;Return the target type of this bean definition, if known_(either specified in advance or resolved on first instantiation).;public Class<?> getTargetType() {_		return this.targetType__	};return,the,target,type,of,this,bean,definition,if,known,either,specified,in,advance,or,resolved,on,first,instantiation;public,class,get,target,type,return,this,target,type
RootBeanDefinition -> public Class<?> getTargetType();1469367243;Return the target type of this bean definition, if known_(either specified in advance or resolved on first instantiation).;public Class<?> getTargetType() {_		return this.targetType__	};return,the,target,type,of,this,bean,definition,if,known,either,specified,in,advance,or,resolved,on,first,instantiation;public,class,get,target,type,return,this,target,type
RootBeanDefinition -> public Class<?> getTargetType();1471445956;Return the target type of this bean definition, if known_(either specified in advance or resolved on first instantiation)._@since 3.2.2;public Class<?> getTargetType() {_		if (this.resolvedTargetType != null) {_			return this.resolvedTargetType__		}_		return (this.targetType != null ? this.targetType.resolve() : null)__	};return,the,target,type,of,this,bean,definition,if,known,either,specified,in,advance,or,resolved,on,first,instantiation,since,3,2,2;public,class,get,target,type,if,this,resolved,target,type,null,return,this,resolved,target,type,return,this,target,type,null,this,target,type,resolve,null
RootBeanDefinition -> public Class<?> getTargetType();1474010431;Return the target type of this bean definition, if known_(either specified in advance or resolved on first instantiation)._@since 3.2.2;public Class<?> getTargetType() {_		if (this.resolvedTargetType != null) {_			return this.resolvedTargetType__		}_		return (this.targetType != null ? this.targetType.resolve() : null)__	};return,the,target,type,of,this,bean,definition,if,known,either,specified,in,advance,or,resolved,on,first,instantiation,since,3,2,2;public,class,get,target,type,if,this,resolved,target,type,null,return,this,resolved,target,type,return,this,target,type,null,this,target,type,resolve,null
RootBeanDefinition -> public Class<?> getTargetType();1474014845;Return the target type of this bean definition, if known_(either specified in advance or resolved on first instantiation)._@since 3.2.2;public Class<?> getTargetType() {_		if (this.resolvedTargetType != null) {_			return this.resolvedTargetType__		}_		return (this.targetType != null ? this.targetType.resolve() : null)__	};return,the,target,type,of,this,bean,definition,if,known,either,specified,in,advance,or,resolved,on,first,instantiation,since,3,2,2;public,class,get,target,type,if,this,resolved,target,type,null,return,this,resolved,target,type,return,this,target,type,null,this,target,type,resolve,null
RootBeanDefinition -> public Class<?> getTargetType();1482012648;Return the target type of this bean definition, if known_(either specified in advance or resolved on first instantiation)._@since 3.2.2;public Class<?> getTargetType() {_		if (this.resolvedTargetType != null) {_			return this.resolvedTargetType__		}_		return (this.targetType != null ? this.targetType.resolve() : null)__	};return,the,target,type,of,this,bean,definition,if,known,either,specified,in,advance,or,resolved,on,first,instantiation,since,3,2,2;public,class,get,target,type,if,this,resolved,target,type,null,return,this,resolved,target,type,return,this,target,type,null,this,target,type,resolve,null
RootBeanDefinition -> public Class<?> getTargetType();1482091545;Return the target type of this bean definition, if known_(either specified in advance or resolved on first instantiation)._@since 3.2.2;public Class<?> getTargetType() {_		if (this.resolvedTargetType != null) {_			return this.resolvedTargetType__		}_		return (this.targetType != null ? this.targetType.resolve() : null)__	};return,the,target,type,of,this,bean,definition,if,known,either,specified,in,advance,or,resolved,on,first,instantiation,since,3,2,2;public,class,get,target,type,if,this,resolved,target,type,null,return,this,resolved,target,type,return,this,target,type,null,this,target,type,resolve,null
RootBeanDefinition -> public Class<?> getTargetType();1483093818;Return the target type of this bean definition, if known_(either specified in advance or resolved on first instantiation)._@since 3.2.2;public Class<?> getTargetType() {_		if (this.resolvedTargetType != null) {_			return this.resolvedTargetType__		}_		return (this.targetType != null ? this.targetType.resolve() : null)__	};return,the,target,type,of,this,bean,definition,if,known,either,specified,in,advance,or,resolved,on,first,instantiation,since,3,2,2;public,class,get,target,type,if,this,resolved,target,type,null,return,this,resolved,target,type,return,this,target,type,null,this,target,type,resolve,null
RootBeanDefinition -> public Class<?> getTargetType();1495868221;Return the target type of this bean definition, if known_(either specified in advance or resolved on first instantiation)._@since 3.2.2;public Class<?> getTargetType() {_		if (this.resolvedTargetType != null) {_			return this.resolvedTargetType__		}_		return (this.targetType != null ? this.targetType.resolve() : null)__	};return,the,target,type,of,this,bean,definition,if,known,either,specified,in,advance,or,resolved,on,first,instantiation,since,3,2,2;public,class,get,target,type,if,this,resolved,target,type,null,return,this,resolved,target,type,return,this,target,type,null,this,target,type,resolve,null
RootBeanDefinition -> public Class<?> getTargetType();1496242568;Return the target type of this bean definition, if known_(either specified in advance or resolved on first instantiation)._@since 3.2.2;public Class<?> getTargetType() {_		if (this.resolvedTargetType != null) {_			return this.resolvedTargetType__		}_		return (this.targetType != null ? this.targetType.resolve() : null)__	};return,the,target,type,of,this,bean,definition,if,known,either,specified,in,advance,or,resolved,on,first,instantiation,since,3,2,2;public,class,get,target,type,if,this,resolved,target,type,null,return,this,resolved,target,type,return,this,target,type,null,this,target,type,resolve,null
RootBeanDefinition -> public Class<?> getTargetType();1496243689;Return the target type of this bean definition, if known_(either specified in advance or resolved on first instantiation)._@since 3.2.2;public Class<?> getTargetType() {_		if (this.resolvedTargetType != null) {_			return this.resolvedTargetType__		}_		return (this.targetType != null ? this.targetType.resolve() : null)__	};return,the,target,type,of,this,bean,definition,if,known,either,specified,in,advance,or,resolved,on,first,instantiation,since,3,2,2;public,class,get,target,type,if,this,resolved,target,type,null,return,this,resolved,target,type,return,this,target,type,null,this,target,type,resolve,null
RootBeanDefinition -> public Class<?> getTargetType();1496259743;Return the target type of this bean definition, if known_(either specified in advance or resolved on first instantiation)._@since 3.2.2;public Class<?> getTargetType() {_		if (this.resolvedTargetType != null) {_			return this.resolvedTargetType__		}_		return (this.targetType != null ? this.targetType.resolve() : null)__	};return,the,target,type,of,this,bean,definition,if,known,either,specified,in,advance,or,resolved,on,first,instantiation,since,3,2,2;public,class,get,target,type,if,this,resolved,target,type,null,return,this,resolved,target,type,return,this,target,type,null,this,target,type,resolve,null
RootBeanDefinition -> public void setQualifiedElement(AnnotatedElement qualifiedElement);1474010431;Specify the {@link AnnotatedElement} defining qualifiers._@since 4.3.3;public void setQualifiedElement(AnnotatedElement qualifiedElement) {_		this.qualifiedElement = qualifiedElement__	};specify,the,link,annotated,element,defining,qualifiers,since,4,3,3;public,void,set,qualified,element,annotated,element,qualified,element,this,qualified,element,qualified,element
RootBeanDefinition -> public void setQualifiedElement(AnnotatedElement qualifiedElement);1474014845;Specify the {@link AnnotatedElement} defining qualifiers,_to be used instead of the target class or factory method._@since 4.3.3_@see #setTargetType(ResolvableType)_@see #getResolvedFactoryMethod();public void setQualifiedElement(AnnotatedElement qualifiedElement) {_		this.qualifiedElement = qualifiedElement__	};specify,the,link,annotated,element,defining,qualifiers,to,be,used,instead,of,the,target,class,or,factory,method,since,4,3,3,see,set,target,type,resolvable,type,see,get,resolved,factory,method;public,void,set,qualified,element,annotated,element,qualified,element,this,qualified,element,qualified,element
RootBeanDefinition -> public void setQualifiedElement(AnnotatedElement qualifiedElement);1482012648;Specify the {@link AnnotatedElement} defining qualifiers,_to be used instead of the target class or factory method._@since 4.3.3_@see #setTargetType(ResolvableType)_@see #getResolvedFactoryMethod();public void setQualifiedElement(AnnotatedElement qualifiedElement) {_		this.qualifiedElement = qualifiedElement__	};specify,the,link,annotated,element,defining,qualifiers,to,be,used,instead,of,the,target,class,or,factory,method,since,4,3,3,see,set,target,type,resolvable,type,see,get,resolved,factory,method;public,void,set,qualified,element,annotated,element,qualified,element,this,qualified,element,qualified,element
RootBeanDefinition -> public void setQualifiedElement(AnnotatedElement qualifiedElement);1482091545;Specify the {@link AnnotatedElement} defining qualifiers,_to be used instead of the target class or factory method._@since 4.3.3_@see #setTargetType(ResolvableType)_@see #getResolvedFactoryMethod();public void setQualifiedElement(AnnotatedElement qualifiedElement) {_		this.qualifiedElement = qualifiedElement__	};specify,the,link,annotated,element,defining,qualifiers,to,be,used,instead,of,the,target,class,or,factory,method,since,4,3,3,see,set,target,type,resolvable,type,see,get,resolved,factory,method;public,void,set,qualified,element,annotated,element,qualified,element,this,qualified,element,qualified,element
RootBeanDefinition -> public void setQualifiedElement(AnnotatedElement qualifiedElement);1483093818;Specify the {@link AnnotatedElement} defining qualifiers,_to be used instead of the target class or factory method._@since 4.3.3_@see #setTargetType(ResolvableType)_@see #getResolvedFactoryMethod();public void setQualifiedElement(AnnotatedElement qualifiedElement) {_		this.qualifiedElement = qualifiedElement__	};specify,the,link,annotated,element,defining,qualifiers,to,be,used,instead,of,the,target,class,or,factory,method,since,4,3,3,see,set,target,type,resolvable,type,see,get,resolved,factory,method;public,void,set,qualified,element,annotated,element,qualified,element,this,qualified,element,qualified,element
RootBeanDefinition -> public void setQualifiedElement(AnnotatedElement qualifiedElement);1495868221;Specify the {@link AnnotatedElement} defining qualifiers,_to be used instead of the target class or factory method._@since 4.3.3_@see #setTargetType(ResolvableType)_@see #getResolvedFactoryMethod();public void setQualifiedElement(AnnotatedElement qualifiedElement) {_		this.qualifiedElement = qualifiedElement__	};specify,the,link,annotated,element,defining,qualifiers,to,be,used,instead,of,the,target,class,or,factory,method,since,4,3,3,see,set,target,type,resolvable,type,see,get,resolved,factory,method;public,void,set,qualified,element,annotated,element,qualified,element,this,qualified,element,qualified,element
RootBeanDefinition -> public void setQualifiedElement(AnnotatedElement qualifiedElement);1496242568;Specify the {@link AnnotatedElement} defining qualifiers,_to be used instead of the target class or factory method._@since 4.3.3_@see #setTargetType(ResolvableType)_@see #getResolvedFactoryMethod();public void setQualifiedElement(AnnotatedElement qualifiedElement) {_		this.qualifiedElement = qualifiedElement__	};specify,the,link,annotated,element,defining,qualifiers,to,be,used,instead,of,the,target,class,or,factory,method,since,4,3,3,see,set,target,type,resolvable,type,see,get,resolved,factory,method;public,void,set,qualified,element,annotated,element,qualified,element,this,qualified,element,qualified,element
RootBeanDefinition -> public void setQualifiedElement(AnnotatedElement qualifiedElement);1496243689;Specify the {@link AnnotatedElement} defining qualifiers,_to be used instead of the target class or factory method._@since 4.3.3_@see #setTargetType(ResolvableType)_@see #getResolvedFactoryMethod();public void setQualifiedElement(AnnotatedElement qualifiedElement) {_		this.qualifiedElement = qualifiedElement__	};specify,the,link,annotated,element,defining,qualifiers,to,be,used,instead,of,the,target,class,or,factory,method,since,4,3,3,see,set,target,type,resolvable,type,see,get,resolved,factory,method;public,void,set,qualified,element,annotated,element,qualified,element,this,qualified,element,qualified,element
RootBeanDefinition -> public void setQualifiedElement(AnnotatedElement qualifiedElement);1496259743;Specify the {@link AnnotatedElement} defining qualifiers,_to be used instead of the target class or factory method._@since 4.3.3_@see #setTargetType(ResolvableType)_@see #getResolvedFactoryMethod();public void setQualifiedElement(AnnotatedElement qualifiedElement) {_		this.qualifiedElement = qualifiedElement__	};specify,the,link,annotated,element,defining,qualifiers,to,be,used,instead,of,the,target,class,or,factory,method,since,4,3,3,see,set,target,type,resolvable,type,see,get,resolved,factory,method;public,void,set,qualified,element,annotated,element,qualified,element,this,qualified,element,qualified,element
RootBeanDefinition -> public void setQualifiedElement(AnnotatedElement qualifiedElement);1496837955;Specify the {@link AnnotatedElement} defining qualifiers,_to be used instead of the target class or factory method._@since 4.3.3_@see #setTargetType(ResolvableType)_@see #getResolvedFactoryMethod();public void setQualifiedElement(AnnotatedElement qualifiedElement) {_		this.qualifiedElement = qualifiedElement__	};specify,the,link,annotated,element,defining,qualifiers,to,be,used,instead,of,the,target,class,or,factory,method,since,4,3,3,see,set,target,type,resolvable,type,see,get,resolved,factory,method;public,void,set,qualified,element,annotated,element,qualified,element,this,qualified,element,qualified,element
RootBeanDefinition -> public void setQualifiedElement(AnnotatedElement qualifiedElement);1498780456;Specify the {@link AnnotatedElement} defining qualifiers,_to be used instead of the target class or factory method._@since 4.3.3_@see #setTargetType(ResolvableType)_@see #getResolvedFactoryMethod();public void setQualifiedElement(AnnotatedElement qualifiedElement) {_		this.qualifiedElement = qualifiedElement__	};specify,the,link,annotated,element,defining,qualifiers,to,be,used,instead,of,the,target,class,or,factory,method,since,4,3,3,see,set,target,type,resolvable,type,see,get,resolved,factory,method;public,void,set,qualified,element,annotated,element,qualified,element,this,qualified,element,qualified,element
RootBeanDefinition -> public void setDecoratedDefinition(@Nullable BeanDefinitionHolder decoratedDefinition);1500448076;Register a target definition that is being decorated by this bean definition.;public void setDecoratedDefinition(@Nullable BeanDefinitionHolder decoratedDefinition) {_		this.decoratedDefinition = decoratedDefinition__	};register,a,target,definition,that,is,being,decorated,by,this,bean,definition;public,void,set,decorated,definition,nullable,bean,definition,holder,decorated,definition,this,decorated,definition,decorated,definition
RootBeanDefinition -> public void setDecoratedDefinition(@Nullable BeanDefinitionHolder decoratedDefinition);1510606271;Register a target definition that is being decorated by this bean definition.;public void setDecoratedDefinition(@Nullable BeanDefinitionHolder decoratedDefinition) {_		this.decoratedDefinition = decoratedDefinition__	};register,a,target,definition,that,is,being,decorated,by,this,bean,definition;public,void,set,decorated,definition,nullable,bean,definition,holder,decorated,definition,this,decorated,definition,decorated,definition
RootBeanDefinition -> public void setDecoratedDefinition(@Nullable BeanDefinitionHolder decoratedDefinition);1530174524;Register a target definition that is being decorated by this bean definition.;public void setDecoratedDefinition(@Nullable BeanDefinitionHolder decoratedDefinition) {_		this.decoratedDefinition = decoratedDefinition__	};register,a,target,definition,that,is,being,decorated,by,this,bean,definition;public,void,set,decorated,definition,nullable,bean,definition,holder,decorated,definition,this,decorated,definition,decorated,definition
RootBeanDefinition -> public void setDecoratedDefinition(@Nullable BeanDefinitionHolder decoratedDefinition);1531243692;Register a target definition that is being decorated by this bean definition.;public void setDecoratedDefinition(@Nullable BeanDefinitionHolder decoratedDefinition) {_		this.decoratedDefinition = decoratedDefinition__	};register,a,target,definition,that,is,being,decorated,by,this,bean,definition;public,void,set,decorated,definition,nullable,bean,definition,holder,decorated,definition,this,decorated,definition,decorated,definition
RootBeanDefinition -> public void setDecoratedDefinition(@Nullable BeanDefinitionHolder decoratedDefinition);1537388383;Register a target definition that is being decorated by this bean definition.;public void setDecoratedDefinition(@Nullable BeanDefinitionHolder decoratedDefinition) {_		this.decoratedDefinition = decoratedDefinition__	};register,a,target,definition,that,is,being,decorated,by,this,bean,definition;public,void,set,decorated,definition,nullable,bean,definition,holder,decorated,definition,this,decorated,definition,decorated,definition
RootBeanDefinition -> public void setDecoratedDefinition(@Nullable BeanDefinitionHolder decoratedDefinition);1539377630;Register a target definition that is being decorated by this bean definition.;public void setDecoratedDefinition(@Nullable BeanDefinitionHolder decoratedDefinition) {_		this.decoratedDefinition = decoratedDefinition__	};register,a,target,definition,that,is,being,decorated,by,this,bean,definition;public,void,set,decorated,definition,nullable,bean,definition,holder,decorated,definition,this,decorated,definition,decorated,definition
RootBeanDefinition -> @Deprecated 	public RootBeanDefinition(Class beanClass, MutablePropertyValues pvs);1328020251;Create a new RootBeanDefinition for a singleton,_providing property values._@param beanClass the class of the bean to instantiate_@param pvs the property values to apply_@deprecated as of Spring 3.0, in favor of {@link #getPropertyValues} usage;@Deprecated_	public RootBeanDefinition(Class beanClass, MutablePropertyValues pvs) {_		super(null, pvs)__		setBeanClass(beanClass)__	};create,a,new,root,bean,definition,for,a,singleton,providing,property,values,param,bean,class,the,class,of,the,bean,to,instantiate,param,pvs,the,property,values,to,apply,deprecated,as,of,spring,3,0,in,favor,of,link,get,property,values,usage;deprecated,public,root,bean,definition,class,bean,class,mutable,property,values,pvs,super,null,pvs,set,bean,class,bean,class
RootBeanDefinition -> @Deprecated 	public RootBeanDefinition(Class beanClass, MutablePropertyValues pvs);1352412675;Create a new RootBeanDefinition for a singleton,_providing property values._@param beanClass the class of the bean to instantiate_@param pvs the property values to apply_@deprecated as of Spring 3.0, in favor of {@link #getPropertyValues} usage;@Deprecated_	public RootBeanDefinition(Class beanClass, MutablePropertyValues pvs) {_		super(null, pvs)__		setBeanClass(beanClass)__	};create,a,new,root,bean,definition,for,a,singleton,providing,property,values,param,bean,class,the,class,of,the,bean,to,instantiate,param,pvs,the,property,values,to,apply,deprecated,as,of,spring,3,0,in,favor,of,link,get,property,values,usage;deprecated,public,root,bean,definition,class,bean,class,mutable,property,values,pvs,super,null,pvs,set,bean,class,bean,class
RootBeanDefinition -> @Deprecated 	public RootBeanDefinition(Class beanClass, MutablePropertyValues pvs);1355352386;Create a new RootBeanDefinition for a singleton,_providing property values._@param beanClass the class of the bean to instantiate_@param pvs the property values to apply_@deprecated as of Spring 3.0, in favor of {@link #getPropertyValues} usage;@Deprecated_	public RootBeanDefinition(Class beanClass, MutablePropertyValues pvs) {_		super(null, pvs)__		setBeanClass(beanClass)__	};create,a,new,root,bean,definition,for,a,singleton,providing,property,values,param,bean,class,the,class,of,the,bean,to,instantiate,param,pvs,the,property,values,to,apply,deprecated,as,of,spring,3,0,in,favor,of,link,get,property,values,usage;deprecated,public,root,bean,definition,class,bean,class,mutable,property,values,pvs,super,null,pvs,set,bean,class,bean,class
RootBeanDefinition -> @Deprecated 	public RootBeanDefinition(Class beanClass, MutablePropertyValues pvs);1356735495;Create a new RootBeanDefinition for a singleton,_providing property values._@param beanClass the class of the bean to instantiate_@param pvs the property values to apply_@deprecated as of Spring 3.0, in favor of {@link #getPropertyValues} usage;@Deprecated_	public RootBeanDefinition(Class beanClass, MutablePropertyValues pvs) {_		super(null, pvs)__		setBeanClass(beanClass)__	};create,a,new,root,bean,definition,for,a,singleton,providing,property,values,param,bean,class,the,class,of,the,bean,to,instantiate,param,pvs,the,property,values,to,apply,deprecated,as,of,spring,3,0,in,favor,of,link,get,property,values,usage;deprecated,public,root,bean,definition,class,bean,class,mutable,property,values,pvs,super,null,pvs,set,bean,class,bean,class
RootBeanDefinition -> @Deprecated 	public RootBeanDefinition(Class beanClass, MutablePropertyValues pvs);1357119239;Create a new RootBeanDefinition for a singleton,_providing property values._@param beanClass the class of the bean to instantiate_@param pvs the property values to apply_@deprecated as of Spring 3.0, in favor of {@link #getPropertyValues} usage;@Deprecated_	public RootBeanDefinition(Class beanClass, MutablePropertyValues pvs) {_		super(null, pvs)__		setBeanClass(beanClass)__	};create,a,new,root,bean,definition,for,a,singleton,providing,property,values,param,bean,class,the,class,of,the,bean,to,instantiate,param,pvs,the,property,values,to,apply,deprecated,as,of,spring,3,0,in,favor,of,link,get,property,values,usage;deprecated,public,root,bean,definition,class,bean,class,mutable,property,values,pvs,super,null,pvs,set,bean,class,bean,class
RootBeanDefinition -> @Deprecated 	public RootBeanDefinition(Class beanClass, MutablePropertyValues pvs);1362408075;Create a new RootBeanDefinition for a singleton,_providing property values._@param beanClass the class of the bean to instantiate_@param pvs the property values to apply_@deprecated as of Spring 3.0, in favor of {@link #getPropertyValues} usage;@Deprecated_	public RootBeanDefinition(Class beanClass, MutablePropertyValues pvs) {_		super(null, pvs)__		setBeanClass(beanClass)__	};create,a,new,root,bean,definition,for,a,singleton,providing,property,values,param,bean,class,the,class,of,the,bean,to,instantiate,param,pvs,the,property,values,to,apply,deprecated,as,of,spring,3,0,in,favor,of,link,get,property,values,usage;deprecated,public,root,bean,definition,class,bean,class,mutable,property,values,pvs,super,null,pvs,set,bean,class,bean,class
RootBeanDefinition -> @Deprecated 	public RootBeanDefinition(Class beanClass, MutablePropertyValues pvs);1364505266;Create a new RootBeanDefinition for a singleton,_providing property values._@param beanClass the class of the bean to instantiate_@param pvs the property values to apply_@deprecated as of Spring 3.0, in favor of {@link #getPropertyValues} usage;@Deprecated_	public RootBeanDefinition(Class beanClass, MutablePropertyValues pvs) {_		super(null, pvs)__		setBeanClass(beanClass)__	};create,a,new,root,bean,definition,for,a,singleton,providing,property,values,param,bean,class,the,class,of,the,bean,to,instantiate,param,pvs,the,property,values,to,apply,deprecated,as,of,spring,3,0,in,favor,of,link,get,property,values,usage;deprecated,public,root,bean,definition,class,bean,class,mutable,property,values,pvs,super,null,pvs,set,bean,class,bean,class
RootBeanDefinition -> public BeanDefinitionHolder getDecoratedDefinition();1390396833;Return the target definition that is being decorated by this bean definition, if any.;public BeanDefinitionHolder getDecoratedDefinition() {_		return this.decoratedDefinition__	};return,the,target,definition,that,is,being,decorated,by,this,bean,definition,if,any;public,bean,definition,holder,get,decorated,definition,return,this,decorated,definition
RootBeanDefinition -> public BeanDefinitionHolder getDecoratedDefinition();1467730834;Return the target definition that is being decorated by this bean definition, if any.;public BeanDefinitionHolder getDecoratedDefinition() {_		return this.decoratedDefinition__	};return,the,target,definition,that,is,being,decorated,by,this,bean,definition,if,any;public,bean,definition,holder,get,decorated,definition,return,this,decorated,definition
RootBeanDefinition -> public BeanDefinitionHolder getDecoratedDefinition();1467744603;Return the target definition that is being decorated by this bean definition, if any.;public BeanDefinitionHolder getDecoratedDefinition() {_		return this.decoratedDefinition__	};return,the,target,definition,that,is,being,decorated,by,this,bean,definition,if,any;public,bean,definition,holder,get,decorated,definition,return,this,decorated,definition
RootBeanDefinition -> public BeanDefinitionHolder getDecoratedDefinition();1469367243;Return the target definition that is being decorated by this bean definition, if any.;public BeanDefinitionHolder getDecoratedDefinition() {_		return this.decoratedDefinition__	};return,the,target,definition,that,is,being,decorated,by,this,bean,definition,if,any;public,bean,definition,holder,get,decorated,definition,return,this,decorated,definition
RootBeanDefinition -> public BeanDefinitionHolder getDecoratedDefinition();1471445956;Return the target definition that is being decorated by this bean definition, if any.;public BeanDefinitionHolder getDecoratedDefinition() {_		return this.decoratedDefinition__	};return,the,target,definition,that,is,being,decorated,by,this,bean,definition,if,any;public,bean,definition,holder,get,decorated,definition,return,this,decorated,definition
RootBeanDefinition -> public BeanDefinitionHolder getDecoratedDefinition();1474010431;Return the target definition that is being decorated by this bean definition, if any.;public BeanDefinitionHolder getDecoratedDefinition() {_		return this.decoratedDefinition__	};return,the,target,definition,that,is,being,decorated,by,this,bean,definition,if,any;public,bean,definition,holder,get,decorated,definition,return,this,decorated,definition
RootBeanDefinition -> public BeanDefinitionHolder getDecoratedDefinition();1474014845;Return the target definition that is being decorated by this bean definition, if any.;public BeanDefinitionHolder getDecoratedDefinition() {_		return this.decoratedDefinition__	};return,the,target,definition,that,is,being,decorated,by,this,bean,definition,if,any;public,bean,definition,holder,get,decorated,definition,return,this,decorated,definition
RootBeanDefinition -> public BeanDefinitionHolder getDecoratedDefinition();1482012648;Return the target definition that is being decorated by this bean definition, if any.;public BeanDefinitionHolder getDecoratedDefinition() {_		return this.decoratedDefinition__	};return,the,target,definition,that,is,being,decorated,by,this,bean,definition,if,any;public,bean,definition,holder,get,decorated,definition,return,this,decorated,definition
RootBeanDefinition -> public BeanDefinitionHolder getDecoratedDefinition();1482091545;Return the target definition that is being decorated by this bean definition, if any.;public BeanDefinitionHolder getDecoratedDefinition() {_		return this.decoratedDefinition__	};return,the,target,definition,that,is,being,decorated,by,this,bean,definition,if,any;public,bean,definition,holder,get,decorated,definition,return,this,decorated,definition
RootBeanDefinition -> public BeanDefinitionHolder getDecoratedDefinition();1483093818;Return the target definition that is being decorated by this bean definition, if any.;public BeanDefinitionHolder getDecoratedDefinition() {_		return this.decoratedDefinition__	};return,the,target,definition,that,is,being,decorated,by,this,bean,definition,if,any;public,bean,definition,holder,get,decorated,definition,return,this,decorated,definition
RootBeanDefinition -> public Method getResolvedFactoryMethod();1328020251;Return the resolved factory method as a Java Method object, if available._@return the factory method, or <code>null</code> if not found or not resolved yet;public Method getResolvedFactoryMethod() {_		synchronized (this.constructorArgumentLock) {_			Object candidate = this.resolvedConstructorOrFactoryMethod__			return (candidate instanceof Method ? (Method) candidate : null)__		}_	};return,the,resolved,factory,method,as,a,java,method,object,if,available,return,the,factory,method,or,code,null,code,if,not,found,or,not,resolved,yet;public,method,get,resolved,factory,method,synchronized,this,constructor,argument,lock,object,candidate,this,resolved,constructor,or,factory,method,return,candidate,instanceof,method,method,candidate,null
RootBeanDefinition -> public Method getResolvedFactoryMethod();1352412675;Return the resolved factory method as a Java Method object, if available._@return the factory method, or <code>null</code> if not found or not resolved yet;public Method getResolvedFactoryMethod() {_		synchronized (this.constructorArgumentLock) {_			Object candidate = this.resolvedConstructorOrFactoryMethod__			return (candidate instanceof Method ? (Method) candidate : null)__		}_	};return,the,resolved,factory,method,as,a,java,method,object,if,available,return,the,factory,method,or,code,null,code,if,not,found,or,not,resolved,yet;public,method,get,resolved,factory,method,synchronized,this,constructor,argument,lock,object,candidate,this,resolved,constructor,or,factory,method,return,candidate,instanceof,method,method,candidate,null
RootBeanDefinition -> public Method getResolvedFactoryMethod();1355352386;Return the resolved factory method as a Java Method object, if available._@return the factory method, or <code>null</code> if not found or not resolved yet;public Method getResolvedFactoryMethod() {_		synchronized (this.constructorArgumentLock) {_			Object candidate = this.resolvedConstructorOrFactoryMethod__			return (candidate instanceof Method ? (Method) candidate : null)__		}_	};return,the,resolved,factory,method,as,a,java,method,object,if,available,return,the,factory,method,or,code,null,code,if,not,found,or,not,resolved,yet;public,method,get,resolved,factory,method,synchronized,this,constructor,argument,lock,object,candidate,this,resolved,constructor,or,factory,method,return,candidate,instanceof,method,method,candidate,null
RootBeanDefinition -> public Method getResolvedFactoryMethod();1356735495;Return the resolved factory method as a Java Method object, if available._@return the factory method, or {@code null} if not found or not resolved yet;public Method getResolvedFactoryMethod() {_		synchronized (this.constructorArgumentLock) {_			Object candidate = this.resolvedConstructorOrFactoryMethod__			return (candidate instanceof Method ? (Method) candidate : null)__		}_	};return,the,resolved,factory,method,as,a,java,method,object,if,available,return,the,factory,method,or,code,null,if,not,found,or,not,resolved,yet;public,method,get,resolved,factory,method,synchronized,this,constructor,argument,lock,object,candidate,this,resolved,constructor,or,factory,method,return,candidate,instanceof,method,method,candidate,null
RootBeanDefinition -> public Method getResolvedFactoryMethod();1357119239;Return the resolved factory method as a Java Method object, if available._@return the factory method, or {@code null} if not found or not resolved yet;public Method getResolvedFactoryMethod() {_		synchronized (this.constructorArgumentLock) {_			Object candidate = this.resolvedConstructorOrFactoryMethod__			return (candidate instanceof Method ? (Method) candidate : null)__		}_	};return,the,resolved,factory,method,as,a,java,method,object,if,available,return,the,factory,method,or,code,null,if,not,found,or,not,resolved,yet;public,method,get,resolved,factory,method,synchronized,this,constructor,argument,lock,object,candidate,this,resolved,constructor,or,factory,method,return,candidate,instanceof,method,method,candidate,null
RootBeanDefinition -> public Method getResolvedFactoryMethod();1362408075;Return the resolved factory method as a Java Method object, if available._@return the factory method, or {@code null} if not found or not resolved yet;public Method getResolvedFactoryMethod() {_		synchronized (this.constructorArgumentLock) {_			Object candidate = this.resolvedConstructorOrFactoryMethod__			return (candidate instanceof Method ? (Method) candidate : null)__		}_	};return,the,resolved,factory,method,as,a,java,method,object,if,available,return,the,factory,method,or,code,null,if,not,found,or,not,resolved,yet;public,method,get,resolved,factory,method,synchronized,this,constructor,argument,lock,object,candidate,this,resolved,constructor,or,factory,method,return,candidate,instanceof,method,method,candidate,null
RootBeanDefinition -> public Method getResolvedFactoryMethod();1364505266;Return the resolved factory method as a Java Method object, if available._@return the factory method, or {@code null} if not found or not resolved yet;public Method getResolvedFactoryMethod() {_		synchronized (this.constructorArgumentLock) {_			Object candidate = this.resolvedConstructorOrFactoryMethod__			return (candidate instanceof Method ? (Method) candidate : null)__		}_	};return,the,resolved,factory,method,as,a,java,method,object,if,available,return,the,factory,method,or,code,null,if,not,found,or,not,resolved,yet;public,method,get,resolved,factory,method,synchronized,this,constructor,argument,lock,object,candidate,this,resolved,constructor,or,factory,method,return,candidate,instanceof,method,method,candidate,null
RootBeanDefinition -> public Method getResolvedFactoryMethod();1367943112;Return the resolved factory method as a Java Method object, if available._@return the factory method, or {@code null} if not found or not resolved yet;public Method getResolvedFactoryMethod() {_		synchronized (this.constructorArgumentLock) {_			Object candidate = this.resolvedConstructorOrFactoryMethod__			return (candidate instanceof Method ? (Method) candidate : null)__		}_	};return,the,resolved,factory,method,as,a,java,method,object,if,available,return,the,factory,method,or,code,null,if,not,found,or,not,resolved,yet;public,method,get,resolved,factory,method,synchronized,this,constructor,argument,lock,object,candidate,this,resolved,constructor,or,factory,method,return,candidate,instanceof,method,method,candidate,null
RootBeanDefinition -> public Method getResolvedFactoryMethod();1368482696;Return the resolved factory method as a Java Method object, if available._@return the factory method, or {@code null} if not found or not resolved yet;public Method getResolvedFactoryMethod() {_		synchronized (this.constructorArgumentLock) {_			Object candidate = this.resolvedConstructorOrFactoryMethod__			return (candidate instanceof Method ? (Method) candidate : null)__		}_	};return,the,resolved,factory,method,as,a,java,method,object,if,available,return,the,factory,method,or,code,null,if,not,found,or,not,resolved,yet;public,method,get,resolved,factory,method,synchronized,this,constructor,argument,lock,object,candidate,this,resolved,constructor,or,factory,method,return,candidate,instanceof,method,method,candidate,null
RootBeanDefinition -> public Method getResolvedFactoryMethod();1368546246;Return the resolved factory method as a Java Method object, if available._@return the factory method, or {@code null} if not found or not resolved yet;public Method getResolvedFactoryMethod() {_		synchronized (this.constructorArgumentLock) {_			Object candidate = this.resolvedConstructorOrFactoryMethod__			return (candidate instanceof Method ? (Method) candidate : null)__		}_	};return,the,resolved,factory,method,as,a,java,method,object,if,available,return,the,factory,method,or,code,null,if,not,found,or,not,resolved,yet;public,method,get,resolved,factory,method,synchronized,this,constructor,argument,lock,object,candidate,this,resolved,constructor,or,factory,method,return,candidate,instanceof,method,method,candidate,null
RootBeanDefinition -> public Method getResolvedFactoryMethod();1368628892;Return the resolved factory method as a Java Method object, if available._@return the factory method, or {@code null} if not found or not resolved yet;public Method getResolvedFactoryMethod() {_		synchronized (this.constructorArgumentLock) {_			Object candidate = this.resolvedConstructorOrFactoryMethod__			return (candidate instanceof Method ? (Method) candidate : null)__		}_	};return,the,resolved,factory,method,as,a,java,method,object,if,available,return,the,factory,method,or,code,null,if,not,found,or,not,resolved,yet;public,method,get,resolved,factory,method,synchronized,this,constructor,argument,lock,object,candidate,this,resolved,constructor,or,factory,method,return,candidate,instanceof,method,method,candidate,null
RootBeanDefinition -> public Method getResolvedFactoryMethod();1382826936;Return the resolved factory method as a Java Method object, if available._@return the factory method, or {@code null} if not found or not resolved yet;public Method getResolvedFactoryMethod() {_		synchronized (this.constructorArgumentLock) {_			Object candidate = this.resolvedConstructorOrFactoryMethod__			return (candidate instanceof Method ? (Method) candidate : null)__		}_	};return,the,resolved,factory,method,as,a,java,method,object,if,available,return,the,factory,method,or,code,null,if,not,found,or,not,resolved,yet;public,method,get,resolved,factory,method,synchronized,this,constructor,argument,lock,object,candidate,this,resolved,constructor,or,factory,method,return,candidate,instanceof,method,method,candidate,null
RootBeanDefinition -> public Method getResolvedFactoryMethod();1390396833;Return the resolved factory method as a Java Method object, if available._@return the factory method, or {@code null} if not found or not resolved yet;public Method getResolvedFactoryMethod() {_		synchronized (this.constructorArgumentLock) {_			Object candidate = this.resolvedConstructorOrFactoryMethod__			return (candidate instanceof Method ? (Method) candidate : null)__		}_	};return,the,resolved,factory,method,as,a,java,method,object,if,available,return,the,factory,method,or,code,null,if,not,found,or,not,resolved,yet;public,method,get,resolved,factory,method,synchronized,this,constructor,argument,lock,object,candidate,this,resolved,constructor,or,factory,method,return,candidate,instanceof,method,method,candidate,null
RootBeanDefinition -> public Method getResolvedFactoryMethod();1467730834;Return the resolved factory method as a Java Method object, if available._@return the factory method, or {@code null} if not found or not resolved yet;public Method getResolvedFactoryMethod() {_		synchronized (this.constructorArgumentLock) {_			Object candidate = this.resolvedConstructorOrFactoryMethod__			return (candidate instanceof Method ? (Method) candidate : null)__		}_	};return,the,resolved,factory,method,as,a,java,method,object,if,available,return,the,factory,method,or,code,null,if,not,found,or,not,resolved,yet;public,method,get,resolved,factory,method,synchronized,this,constructor,argument,lock,object,candidate,this,resolved,constructor,or,factory,method,return,candidate,instanceof,method,method,candidate,null
RootBeanDefinition -> public Method getResolvedFactoryMethod();1467744603;Return the resolved factory method as a Java Method object, if available._@return the factory method, or {@code null} if not found or not resolved yet;public Method getResolvedFactoryMethod() {_		synchronized (this.constructorArgumentLock) {_			Object candidate = this.resolvedConstructorOrFactoryMethod__			return (candidate instanceof Method ? (Method) candidate : null)__		}_	};return,the,resolved,factory,method,as,a,java,method,object,if,available,return,the,factory,method,or,code,null,if,not,found,or,not,resolved,yet;public,method,get,resolved,factory,method,synchronized,this,constructor,argument,lock,object,candidate,this,resolved,constructor,or,factory,method,return,candidate,instanceof,method,method,candidate,null
RootBeanDefinition -> public Method getResolvedFactoryMethod();1469367243;Return the resolved factory method as a Java Method object, if available._@return the factory method, or {@code null} if not found or not resolved yet;public Method getResolvedFactoryMethod() {_		synchronized (this.constructorArgumentLock) {_			Executable candidate = this.resolvedConstructorOrFactoryMethod__			return (candidate instanceof Method ? (Method) candidate : null)__		}_	};return,the,resolved,factory,method,as,a,java,method,object,if,available,return,the,factory,method,or,code,null,if,not,found,or,not,resolved,yet;public,method,get,resolved,factory,method,synchronized,this,constructor,argument,lock,executable,candidate,this,resolved,constructor,or,factory,method,return,candidate,instanceof,method,method,candidate,null
RootBeanDefinition -> public Method getResolvedFactoryMethod();1471445956;Return the resolved factory method as a Java Method object, if available._@return the factory method, or {@code null} if not found or not resolved yet;public Method getResolvedFactoryMethod() {_		synchronized (this.constructorArgumentLock) {_			Executable candidate = this.resolvedConstructorOrFactoryMethod__			return (candidate instanceof Method ? (Method) candidate : null)__		}_	};return,the,resolved,factory,method,as,a,java,method,object,if,available,return,the,factory,method,or,code,null,if,not,found,or,not,resolved,yet;public,method,get,resolved,factory,method,synchronized,this,constructor,argument,lock,executable,candidate,this,resolved,constructor,or,factory,method,return,candidate,instanceof,method,method,candidate,null
RootBeanDefinition -> public Method getResolvedFactoryMethod();1474010431;Return the resolved factory method as a Java Method object, if available._@return the factory method, or {@code null} if not found or not resolved yet;public Method getResolvedFactoryMethod() {_		synchronized (this.constructorArgumentLock) {_			Executable candidate = this.resolvedConstructorOrFactoryMethod__			return (candidate instanceof Method ? (Method) candidate : null)__		}_	};return,the,resolved,factory,method,as,a,java,method,object,if,available,return,the,factory,method,or,code,null,if,not,found,or,not,resolved,yet;public,method,get,resolved,factory,method,synchronized,this,constructor,argument,lock,executable,candidate,this,resolved,constructor,or,factory,method,return,candidate,instanceof,method,method,candidate,null
RootBeanDefinition -> public Method getResolvedFactoryMethod();1474014845;Return the resolved factory method as a Java Method object, if available._@return the factory method, or {@code null} if not found or not resolved yet;public Method getResolvedFactoryMethod() {_		synchronized (this.constructorArgumentLock) {_			Executable candidate = this.resolvedConstructorOrFactoryMethod__			return (candidate instanceof Method ? (Method) candidate : null)__		}_	};return,the,resolved,factory,method,as,a,java,method,object,if,available,return,the,factory,method,or,code,null,if,not,found,or,not,resolved,yet;public,method,get,resolved,factory,method,synchronized,this,constructor,argument,lock,executable,candidate,this,resolved,constructor,or,factory,method,return,candidate,instanceof,method,method,candidate,null
RootBeanDefinition -> public Method getResolvedFactoryMethod();1482012648;Return the resolved factory method as a Java Method object, if available._@return the factory method, or {@code null} if not found or not resolved yet;public Method getResolvedFactoryMethod() {_		synchronized (this.constructorArgumentLock) {_			Executable candidate = this.resolvedConstructorOrFactoryMethod__			return (candidate instanceof Method ? (Method) candidate : null)__		}_	};return,the,resolved,factory,method,as,a,java,method,object,if,available,return,the,factory,method,or,code,null,if,not,found,or,not,resolved,yet;public,method,get,resolved,factory,method,synchronized,this,constructor,argument,lock,executable,candidate,this,resolved,constructor,or,factory,method,return,candidate,instanceof,method,method,candidate,null
RootBeanDefinition -> public Method getResolvedFactoryMethod();1482091545;Return the resolved factory method as a Java Method object, if available._@return the factory method, or {@code null} if not found or not resolved yet;public Method getResolvedFactoryMethod() {_		synchronized (this.constructorArgumentLock) {_			Executable candidate = this.resolvedConstructorOrFactoryMethod__			return (candidate instanceof Method ? (Method) candidate : null)__		}_	};return,the,resolved,factory,method,as,a,java,method,object,if,available,return,the,factory,method,or,code,null,if,not,found,or,not,resolved,yet;public,method,get,resolved,factory,method,synchronized,this,constructor,argument,lock,executable,candidate,this,resolved,constructor,or,factory,method,return,candidate,instanceof,method,method,candidate,null
RootBeanDefinition -> public Method getResolvedFactoryMethod();1483093818;Return the resolved factory method as a Java Method object, if available._@return the factory method, or {@code null} if not found or not resolved yet;public Method getResolvedFactoryMethod() {_		synchronized (this.constructorArgumentLock) {_			Executable candidate = this.resolvedConstructorOrFactoryMethod__			return (candidate instanceof Method ? (Method) candidate : null)__		}_	};return,the,resolved,factory,method,as,a,java,method,object,if,available,return,the,factory,method,or,code,null,if,not,found,or,not,resolved,yet;public,method,get,resolved,factory,method,synchronized,this,constructor,argument,lock,executable,candidate,this,resolved,constructor,or,factory,method,return,candidate,instanceof,method,method,candidate,null
RootBeanDefinition -> public RootBeanDefinition(String beanClassName, ConstructorArgumentValues cargs, MutablePropertyValues pvs);1328020251;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._<p>Takes a bean class name to avoid eager loading of the bean class._@param beanClassName the name of the class to instantiate_@param cargs the constructor argument values to apply_@param pvs the property values to apply;public RootBeanDefinition(String beanClassName, ConstructorArgumentValues cargs, MutablePropertyValues pvs) {_		super(cargs, pvs)__		setBeanClassName(beanClassName)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,p,takes,a,bean,class,name,to,avoid,eager,loading,of,the,bean,class,param,bean,class,name,the,name,of,the,class,to,instantiate,param,cargs,the,constructor,argument,values,to,apply,param,pvs,the,property,values,to,apply;public,root,bean,definition,string,bean,class,name,constructor,argument,values,cargs,mutable,property,values,pvs,super,cargs,pvs,set,bean,class,name,bean,class,name
RootBeanDefinition -> public RootBeanDefinition(String beanClassName, ConstructorArgumentValues cargs, MutablePropertyValues pvs);1352412675;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._<p>Takes a bean class name to avoid eager loading of the bean class._@param beanClassName the name of the class to instantiate_@param cargs the constructor argument values to apply_@param pvs the property values to apply;public RootBeanDefinition(String beanClassName, ConstructorArgumentValues cargs, MutablePropertyValues pvs) {_		super(cargs, pvs)__		setBeanClassName(beanClassName)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,p,takes,a,bean,class,name,to,avoid,eager,loading,of,the,bean,class,param,bean,class,name,the,name,of,the,class,to,instantiate,param,cargs,the,constructor,argument,values,to,apply,param,pvs,the,property,values,to,apply;public,root,bean,definition,string,bean,class,name,constructor,argument,values,cargs,mutable,property,values,pvs,super,cargs,pvs,set,bean,class,name,bean,class,name
RootBeanDefinition -> public RootBeanDefinition(String beanClassName, ConstructorArgumentValues cargs, MutablePropertyValues pvs);1355352386;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._<p>Takes a bean class name to avoid eager loading of the bean class._@param beanClassName the name of the class to instantiate_@param cargs the constructor argument values to apply_@param pvs the property values to apply;public RootBeanDefinition(String beanClassName, ConstructorArgumentValues cargs, MutablePropertyValues pvs) {_		super(cargs, pvs)__		setBeanClassName(beanClassName)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,p,takes,a,bean,class,name,to,avoid,eager,loading,of,the,bean,class,param,bean,class,name,the,name,of,the,class,to,instantiate,param,cargs,the,constructor,argument,values,to,apply,param,pvs,the,property,values,to,apply;public,root,bean,definition,string,bean,class,name,constructor,argument,values,cargs,mutable,property,values,pvs,super,cargs,pvs,set,bean,class,name,bean,class,name
RootBeanDefinition -> public RootBeanDefinition(String beanClassName, ConstructorArgumentValues cargs, MutablePropertyValues pvs);1356735495;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._<p>Takes a bean class name to avoid eager loading of the bean class._@param beanClassName the name of the class to instantiate_@param cargs the constructor argument values to apply_@param pvs the property values to apply;public RootBeanDefinition(String beanClassName, ConstructorArgumentValues cargs, MutablePropertyValues pvs) {_		super(cargs, pvs)__		setBeanClassName(beanClassName)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,p,takes,a,bean,class,name,to,avoid,eager,loading,of,the,bean,class,param,bean,class,name,the,name,of,the,class,to,instantiate,param,cargs,the,constructor,argument,values,to,apply,param,pvs,the,property,values,to,apply;public,root,bean,definition,string,bean,class,name,constructor,argument,values,cargs,mutable,property,values,pvs,super,cargs,pvs,set,bean,class,name,bean,class,name
RootBeanDefinition -> public RootBeanDefinition(String beanClassName, ConstructorArgumentValues cargs, MutablePropertyValues pvs);1357119239;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._<p>Takes a bean class name to avoid eager loading of the bean class._@param beanClassName the name of the class to instantiate_@param cargs the constructor argument values to apply_@param pvs the property values to apply;public RootBeanDefinition(String beanClassName, ConstructorArgumentValues cargs, MutablePropertyValues pvs) {_		super(cargs, pvs)__		setBeanClassName(beanClassName)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,p,takes,a,bean,class,name,to,avoid,eager,loading,of,the,bean,class,param,bean,class,name,the,name,of,the,class,to,instantiate,param,cargs,the,constructor,argument,values,to,apply,param,pvs,the,property,values,to,apply;public,root,bean,definition,string,bean,class,name,constructor,argument,values,cargs,mutable,property,values,pvs,super,cargs,pvs,set,bean,class,name,bean,class,name
RootBeanDefinition -> public RootBeanDefinition(String beanClassName, ConstructorArgumentValues cargs, MutablePropertyValues pvs);1362408075;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._<p>Takes a bean class name to avoid eager loading of the bean class._@param beanClassName the name of the class to instantiate_@param cargs the constructor argument values to apply_@param pvs the property values to apply;public RootBeanDefinition(String beanClassName, ConstructorArgumentValues cargs, MutablePropertyValues pvs) {_		super(cargs, pvs)__		setBeanClassName(beanClassName)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,p,takes,a,bean,class,name,to,avoid,eager,loading,of,the,bean,class,param,bean,class,name,the,name,of,the,class,to,instantiate,param,cargs,the,constructor,argument,values,to,apply,param,pvs,the,property,values,to,apply;public,root,bean,definition,string,bean,class,name,constructor,argument,values,cargs,mutable,property,values,pvs,super,cargs,pvs,set,bean,class,name,bean,class,name
RootBeanDefinition -> public RootBeanDefinition(String beanClassName, ConstructorArgumentValues cargs, MutablePropertyValues pvs);1364505266;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._<p>Takes a bean class name to avoid eager loading of the bean class._@param beanClassName the name of the class to instantiate_@param cargs the constructor argument values to apply_@param pvs the property values to apply;public RootBeanDefinition(String beanClassName, ConstructorArgumentValues cargs, MutablePropertyValues pvs) {_		super(cargs, pvs)__		setBeanClassName(beanClassName)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,p,takes,a,bean,class,name,to,avoid,eager,loading,of,the,bean,class,param,bean,class,name,the,name,of,the,class,to,instantiate,param,cargs,the,constructor,argument,values,to,apply,param,pvs,the,property,values,to,apply;public,root,bean,definition,string,bean,class,name,constructor,argument,values,cargs,mutable,property,values,pvs,super,cargs,pvs,set,bean,class,name,bean,class,name
RootBeanDefinition -> public RootBeanDefinition(String beanClassName, ConstructorArgumentValues cargs, MutablePropertyValues pvs);1367943112;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._<p>Takes a bean class name to avoid eager loading of the bean class._@param beanClassName the name of the class to instantiate_@param cargs the constructor argument values to apply_@param pvs the property values to apply;public RootBeanDefinition(String beanClassName, ConstructorArgumentValues cargs, MutablePropertyValues pvs) {_		super(cargs, pvs)__		setBeanClassName(beanClassName)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,p,takes,a,bean,class,name,to,avoid,eager,loading,of,the,bean,class,param,bean,class,name,the,name,of,the,class,to,instantiate,param,cargs,the,constructor,argument,values,to,apply,param,pvs,the,property,values,to,apply;public,root,bean,definition,string,bean,class,name,constructor,argument,values,cargs,mutable,property,values,pvs,super,cargs,pvs,set,bean,class,name,bean,class,name
RootBeanDefinition -> public RootBeanDefinition(String beanClassName, ConstructorArgumentValues cargs, MutablePropertyValues pvs);1368482696;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._<p>Takes a bean class name to avoid eager loading of the bean class._@param beanClassName the name of the class to instantiate_@param cargs the constructor argument values to apply_@param pvs the property values to apply;public RootBeanDefinition(String beanClassName, ConstructorArgumentValues cargs, MutablePropertyValues pvs) {_		super(cargs, pvs)__		setBeanClassName(beanClassName)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,p,takes,a,bean,class,name,to,avoid,eager,loading,of,the,bean,class,param,bean,class,name,the,name,of,the,class,to,instantiate,param,cargs,the,constructor,argument,values,to,apply,param,pvs,the,property,values,to,apply;public,root,bean,definition,string,bean,class,name,constructor,argument,values,cargs,mutable,property,values,pvs,super,cargs,pvs,set,bean,class,name,bean,class,name
RootBeanDefinition -> public RootBeanDefinition(String beanClassName, ConstructorArgumentValues cargs, MutablePropertyValues pvs);1368546246;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._<p>Takes a bean class name to avoid eager loading of the bean class._@param beanClassName the name of the class to instantiate_@param cargs the constructor argument values to apply_@param pvs the property values to apply;public RootBeanDefinition(String beanClassName, ConstructorArgumentValues cargs, MutablePropertyValues pvs) {_		super(cargs, pvs)__		setBeanClassName(beanClassName)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,p,takes,a,bean,class,name,to,avoid,eager,loading,of,the,bean,class,param,bean,class,name,the,name,of,the,class,to,instantiate,param,cargs,the,constructor,argument,values,to,apply,param,pvs,the,property,values,to,apply;public,root,bean,definition,string,bean,class,name,constructor,argument,values,cargs,mutable,property,values,pvs,super,cargs,pvs,set,bean,class,name,bean,class,name
RootBeanDefinition -> public RootBeanDefinition(String beanClassName, ConstructorArgumentValues cargs, MutablePropertyValues pvs);1368628892;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._<p>Takes a bean class name to avoid eager loading of the bean class._@param beanClassName the name of the class to instantiate_@param cargs the constructor argument values to apply_@param pvs the property values to apply;public RootBeanDefinition(String beanClassName, ConstructorArgumentValues cargs, MutablePropertyValues pvs) {_		super(cargs, pvs)__		setBeanClassName(beanClassName)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,p,takes,a,bean,class,name,to,avoid,eager,loading,of,the,bean,class,param,bean,class,name,the,name,of,the,class,to,instantiate,param,cargs,the,constructor,argument,values,to,apply,param,pvs,the,property,values,to,apply;public,root,bean,definition,string,bean,class,name,constructor,argument,values,cargs,mutable,property,values,pvs,super,cargs,pvs,set,bean,class,name,bean,class,name
RootBeanDefinition -> public RootBeanDefinition(String beanClassName, ConstructorArgumentValues cargs, MutablePropertyValues pvs);1382826936;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._<p>Takes a bean class name to avoid eager loading of the bean class._@param beanClassName the name of the class to instantiate_@param cargs the constructor argument values to apply_@param pvs the property values to apply;public RootBeanDefinition(String beanClassName, ConstructorArgumentValues cargs, MutablePropertyValues pvs) {_		super(cargs, pvs)__		setBeanClassName(beanClassName)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,p,takes,a,bean,class,name,to,avoid,eager,loading,of,the,bean,class,param,bean,class,name,the,name,of,the,class,to,instantiate,param,cargs,the,constructor,argument,values,to,apply,param,pvs,the,property,values,to,apply;public,root,bean,definition,string,bean,class,name,constructor,argument,values,cargs,mutable,property,values,pvs,super,cargs,pvs,set,bean,class,name,bean,class,name
RootBeanDefinition -> public RootBeanDefinition(String beanClassName, ConstructorArgumentValues cargs, MutablePropertyValues pvs);1390396833;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._<p>Takes a bean class name to avoid eager loading of the bean class._@param beanClassName the name of the class to instantiate_@param cargs the constructor argument values to apply_@param pvs the property values to apply;public RootBeanDefinition(String beanClassName, ConstructorArgumentValues cargs, MutablePropertyValues pvs) {_		super(cargs, pvs)__		setBeanClassName(beanClassName)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,p,takes,a,bean,class,name,to,avoid,eager,loading,of,the,bean,class,param,bean,class,name,the,name,of,the,class,to,instantiate,param,cargs,the,constructor,argument,values,to,apply,param,pvs,the,property,values,to,apply;public,root,bean,definition,string,bean,class,name,constructor,argument,values,cargs,mutable,property,values,pvs,super,cargs,pvs,set,bean,class,name,bean,class,name
RootBeanDefinition -> public RootBeanDefinition(String beanClassName, ConstructorArgumentValues cargs, MutablePropertyValues pvs);1467730834;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._<p>Takes a bean class name to avoid eager loading of the bean class._@param beanClassName the name of the class to instantiate_@param cargs the constructor argument values to apply_@param pvs the property values to apply;public RootBeanDefinition(String beanClassName, ConstructorArgumentValues cargs, MutablePropertyValues pvs) {_		super(cargs, pvs)__		setBeanClassName(beanClassName)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,p,takes,a,bean,class,name,to,avoid,eager,loading,of,the,bean,class,param,bean,class,name,the,name,of,the,class,to,instantiate,param,cargs,the,constructor,argument,values,to,apply,param,pvs,the,property,values,to,apply;public,root,bean,definition,string,bean,class,name,constructor,argument,values,cargs,mutable,property,values,pvs,super,cargs,pvs,set,bean,class,name,bean,class,name
RootBeanDefinition -> public RootBeanDefinition(String beanClassName, ConstructorArgumentValues cargs, MutablePropertyValues pvs);1467744603;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._<p>Takes a bean class name to avoid eager loading of the bean class._@param beanClassName the name of the class to instantiate_@param cargs the constructor argument values to apply_@param pvs the property values to apply;public RootBeanDefinition(String beanClassName, ConstructorArgumentValues cargs, MutablePropertyValues pvs) {_		super(cargs, pvs)__		setBeanClassName(beanClassName)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,p,takes,a,bean,class,name,to,avoid,eager,loading,of,the,bean,class,param,bean,class,name,the,name,of,the,class,to,instantiate,param,cargs,the,constructor,argument,values,to,apply,param,pvs,the,property,values,to,apply;public,root,bean,definition,string,bean,class,name,constructor,argument,values,cargs,mutable,property,values,pvs,super,cargs,pvs,set,bean,class,name,bean,class,name
RootBeanDefinition -> public RootBeanDefinition(String beanClassName, ConstructorArgumentValues cargs, MutablePropertyValues pvs);1469367243;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._<p>Takes a bean class name to avoid eager loading of the bean class._@param beanClassName the name of the class to instantiate_@param cargs the constructor argument values to apply_@param pvs the property values to apply;public RootBeanDefinition(String beanClassName, ConstructorArgumentValues cargs, MutablePropertyValues pvs) {_		super(cargs, pvs)__		setBeanClassName(beanClassName)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,p,takes,a,bean,class,name,to,avoid,eager,loading,of,the,bean,class,param,bean,class,name,the,name,of,the,class,to,instantiate,param,cargs,the,constructor,argument,values,to,apply,param,pvs,the,property,values,to,apply;public,root,bean,definition,string,bean,class,name,constructor,argument,values,cargs,mutable,property,values,pvs,super,cargs,pvs,set,bean,class,name,bean,class,name
RootBeanDefinition -> public RootBeanDefinition(String beanClassName, ConstructorArgumentValues cargs, MutablePropertyValues pvs);1471445956;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._<p>Takes a bean class name to avoid eager loading of the bean class._@param beanClassName the name of the class to instantiate_@param cargs the constructor argument values to apply_@param pvs the property values to apply;public RootBeanDefinition(String beanClassName, ConstructorArgumentValues cargs, MutablePropertyValues pvs) {_		super(cargs, pvs)__		setBeanClassName(beanClassName)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,p,takes,a,bean,class,name,to,avoid,eager,loading,of,the,bean,class,param,bean,class,name,the,name,of,the,class,to,instantiate,param,cargs,the,constructor,argument,values,to,apply,param,pvs,the,property,values,to,apply;public,root,bean,definition,string,bean,class,name,constructor,argument,values,cargs,mutable,property,values,pvs,super,cargs,pvs,set,bean,class,name,bean,class,name
RootBeanDefinition -> public RootBeanDefinition(String beanClassName, ConstructorArgumentValues cargs, MutablePropertyValues pvs);1474010431;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._<p>Takes a bean class name to avoid eager loading of the bean class._@param beanClassName the name of the class to instantiate_@param cargs the constructor argument values to apply_@param pvs the property values to apply;public RootBeanDefinition(String beanClassName, ConstructorArgumentValues cargs, MutablePropertyValues pvs) {_		super(cargs, pvs)__		setBeanClassName(beanClassName)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,p,takes,a,bean,class,name,to,avoid,eager,loading,of,the,bean,class,param,bean,class,name,the,name,of,the,class,to,instantiate,param,cargs,the,constructor,argument,values,to,apply,param,pvs,the,property,values,to,apply;public,root,bean,definition,string,bean,class,name,constructor,argument,values,cargs,mutable,property,values,pvs,super,cargs,pvs,set,bean,class,name,bean,class,name
RootBeanDefinition -> public RootBeanDefinition(String beanClassName, ConstructorArgumentValues cargs, MutablePropertyValues pvs);1474014845;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._<p>Takes a bean class name to avoid eager loading of the bean class._@param beanClassName the name of the class to instantiate_@param cargs the constructor argument values to apply_@param pvs the property values to apply;public RootBeanDefinition(String beanClassName, ConstructorArgumentValues cargs, MutablePropertyValues pvs) {_		super(cargs, pvs)__		setBeanClassName(beanClassName)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,p,takes,a,bean,class,name,to,avoid,eager,loading,of,the,bean,class,param,bean,class,name,the,name,of,the,class,to,instantiate,param,cargs,the,constructor,argument,values,to,apply,param,pvs,the,property,values,to,apply;public,root,bean,definition,string,bean,class,name,constructor,argument,values,cargs,mutable,property,values,pvs,super,cargs,pvs,set,bean,class,name,bean,class,name
RootBeanDefinition -> public RootBeanDefinition(String beanClassName, ConstructorArgumentValues cargs, MutablePropertyValues pvs);1482012648;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._<p>Takes a bean class name to avoid eager loading of the bean class._@param beanClassName the name of the class to instantiate_@param cargs the constructor argument values to apply_@param pvs the property values to apply;public RootBeanDefinition(String beanClassName, ConstructorArgumentValues cargs, MutablePropertyValues pvs) {_		super(cargs, pvs)__		setBeanClassName(beanClassName)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,p,takes,a,bean,class,name,to,avoid,eager,loading,of,the,bean,class,param,bean,class,name,the,name,of,the,class,to,instantiate,param,cargs,the,constructor,argument,values,to,apply,param,pvs,the,property,values,to,apply;public,root,bean,definition,string,bean,class,name,constructor,argument,values,cargs,mutable,property,values,pvs,super,cargs,pvs,set,bean,class,name,bean,class,name
RootBeanDefinition -> public RootBeanDefinition(String beanClassName, ConstructorArgumentValues cargs, MutablePropertyValues pvs);1482091545;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._<p>Takes a bean class name to avoid eager loading of the bean class._@param beanClassName the name of the class to instantiate_@param cargs the constructor argument values to apply_@param pvs the property values to apply;public RootBeanDefinition(String beanClassName, ConstructorArgumentValues cargs, MutablePropertyValues pvs) {_		super(cargs, pvs)__		setBeanClassName(beanClassName)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,p,takes,a,bean,class,name,to,avoid,eager,loading,of,the,bean,class,param,bean,class,name,the,name,of,the,class,to,instantiate,param,cargs,the,constructor,argument,values,to,apply,param,pvs,the,property,values,to,apply;public,root,bean,definition,string,bean,class,name,constructor,argument,values,cargs,mutable,property,values,pvs,super,cargs,pvs,set,bean,class,name,bean,class,name
RootBeanDefinition -> public RootBeanDefinition(String beanClassName, ConstructorArgumentValues cargs, MutablePropertyValues pvs);1483093818;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._<p>Takes a bean class name to avoid eager loading of the bean class._@param beanClassName the name of the class to instantiate_@param cargs the constructor argument values to apply_@param pvs the property values to apply;public RootBeanDefinition(String beanClassName, ConstructorArgumentValues cargs, MutablePropertyValues pvs) {_		super(cargs, pvs)__		setBeanClassName(beanClassName)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,p,takes,a,bean,class,name,to,avoid,eager,loading,of,the,bean,class,param,bean,class,name,the,name,of,the,class,to,instantiate,param,cargs,the,constructor,argument,values,to,apply,param,pvs,the,property,values,to,apply;public,root,bean,definition,string,bean,class,name,constructor,argument,values,cargs,mutable,property,values,pvs,super,cargs,pvs,set,bean,class,name,bean,class,name
RootBeanDefinition -> public RootBeanDefinition(String beanClassName, ConstructorArgumentValues cargs, MutablePropertyValues pvs);1495868221;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._<p>Takes a bean class name to avoid eager loading of the bean class._@param beanClassName the name of the class to instantiate_@param cargs the constructor argument values to apply_@param pvs the property values to apply;public RootBeanDefinition(String beanClassName, ConstructorArgumentValues cargs, MutablePropertyValues pvs) {_		super(cargs, pvs)__		setBeanClassName(beanClassName)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,p,takes,a,bean,class,name,to,avoid,eager,loading,of,the,bean,class,param,bean,class,name,the,name,of,the,class,to,instantiate,param,cargs,the,constructor,argument,values,to,apply,param,pvs,the,property,values,to,apply;public,root,bean,definition,string,bean,class,name,constructor,argument,values,cargs,mutable,property,values,pvs,super,cargs,pvs,set,bean,class,name,bean,class,name
RootBeanDefinition -> public RootBeanDefinition(String beanClassName, ConstructorArgumentValues cargs, MutablePropertyValues pvs);1496242568;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._<p>Takes a bean class name to avoid eager loading of the bean class._@param beanClassName the name of the class to instantiate_@param cargs the constructor argument values to apply_@param pvs the property values to apply;public RootBeanDefinition(String beanClassName, ConstructorArgumentValues cargs, MutablePropertyValues pvs) {_		super(cargs, pvs)__		setBeanClassName(beanClassName)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,p,takes,a,bean,class,name,to,avoid,eager,loading,of,the,bean,class,param,bean,class,name,the,name,of,the,class,to,instantiate,param,cargs,the,constructor,argument,values,to,apply,param,pvs,the,property,values,to,apply;public,root,bean,definition,string,bean,class,name,constructor,argument,values,cargs,mutable,property,values,pvs,super,cargs,pvs,set,bean,class,name,bean,class,name
RootBeanDefinition -> public RootBeanDefinition(String beanClassName, ConstructorArgumentValues cargs, MutablePropertyValues pvs);1496243689;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._<p>Takes a bean class name to avoid eager loading of the bean class._@param beanClassName the name of the class to instantiate_@param cargs the constructor argument values to apply_@param pvs the property values to apply;public RootBeanDefinition(String beanClassName, ConstructorArgumentValues cargs, MutablePropertyValues pvs) {_		super(cargs, pvs)__		setBeanClassName(beanClassName)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,p,takes,a,bean,class,name,to,avoid,eager,loading,of,the,bean,class,param,bean,class,name,the,name,of,the,class,to,instantiate,param,cargs,the,constructor,argument,values,to,apply,param,pvs,the,property,values,to,apply;public,root,bean,definition,string,bean,class,name,constructor,argument,values,cargs,mutable,property,values,pvs,super,cargs,pvs,set,bean,class,name,bean,class,name
RootBeanDefinition -> public RootBeanDefinition(String beanClassName, ConstructorArgumentValues cargs, MutablePropertyValues pvs);1496259743;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._<p>Takes a bean class name to avoid eager loading of the bean class._@param beanClassName the name of the class to instantiate_@param cargs the constructor argument values to apply_@param pvs the property values to apply;public RootBeanDefinition(String beanClassName, ConstructorArgumentValues cargs, MutablePropertyValues pvs) {_		super(cargs, pvs)__		setBeanClassName(beanClassName)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,p,takes,a,bean,class,name,to,avoid,eager,loading,of,the,bean,class,param,bean,class,name,the,name,of,the,class,to,instantiate,param,cargs,the,constructor,argument,values,to,apply,param,pvs,the,property,values,to,apply;public,root,bean,definition,string,bean,class,name,constructor,argument,values,cargs,mutable,property,values,pvs,super,cargs,pvs,set,bean,class,name,bean,class,name
RootBeanDefinition -> public RootBeanDefinition(String beanClassName, ConstructorArgumentValues cargs, MutablePropertyValues pvs);1496837955;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._<p>Takes a bean class name to avoid eager loading of the bean class._@param beanClassName the name of the class to instantiate_@param cargs the constructor argument values to apply_@param pvs the property values to apply;public RootBeanDefinition(String beanClassName, ConstructorArgumentValues cargs, MutablePropertyValues pvs) {_		super(cargs, pvs)__		setBeanClassName(beanClassName)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,p,takes,a,bean,class,name,to,avoid,eager,loading,of,the,bean,class,param,bean,class,name,the,name,of,the,class,to,instantiate,param,cargs,the,constructor,argument,values,to,apply,param,pvs,the,property,values,to,apply;public,root,bean,definition,string,bean,class,name,constructor,argument,values,cargs,mutable,property,values,pvs,super,cargs,pvs,set,bean,class,name,bean,class,name
RootBeanDefinition -> public RootBeanDefinition(String beanClassName, ConstructorArgumentValues cargs, MutablePropertyValues pvs);1498780456;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._<p>Takes a bean class name to avoid eager loading of the bean class._@param beanClassName the name of the class to instantiate_@param cargs the constructor argument values to apply_@param pvs the property values to apply;public RootBeanDefinition(String beanClassName, ConstructorArgumentValues cargs, MutablePropertyValues pvs) {_		super(cargs, pvs)__		setBeanClassName(beanClassName)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,p,takes,a,bean,class,name,to,avoid,eager,loading,of,the,bean,class,param,bean,class,name,the,name,of,the,class,to,instantiate,param,cargs,the,constructor,argument,values,to,apply,param,pvs,the,property,values,to,apply;public,root,bean,definition,string,bean,class,name,constructor,argument,values,cargs,mutable,property,values,pvs,super,cargs,pvs,set,bean,class,name,bean,class,name
RootBeanDefinition -> public RootBeanDefinition(String beanClassName, ConstructorArgumentValues cargs, MutablePropertyValues pvs);1500448076;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._<p>Takes a bean class name to avoid eager loading of the bean class._@param beanClassName the name of the class to instantiate_@param cargs the constructor argument values to apply_@param pvs the property values to apply;public RootBeanDefinition(String beanClassName, ConstructorArgumentValues cargs, MutablePropertyValues pvs) {_		super(cargs, pvs)__		setBeanClassName(beanClassName)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,p,takes,a,bean,class,name,to,avoid,eager,loading,of,the,bean,class,param,bean,class,name,the,name,of,the,class,to,instantiate,param,cargs,the,constructor,argument,values,to,apply,param,pvs,the,property,values,to,apply;public,root,bean,definition,string,bean,class,name,constructor,argument,values,cargs,mutable,property,values,pvs,super,cargs,pvs,set,bean,class,name,bean,class,name
RootBeanDefinition -> public RootBeanDefinition(String beanClassName, ConstructorArgumentValues cargs, MutablePropertyValues pvs);1510606271;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._<p>Takes a bean class name to avoid eager loading of the bean class._@param beanClassName the name of the class to instantiate_@param cargs the constructor argument values to apply_@param pvs the property values to apply;public RootBeanDefinition(String beanClassName, ConstructorArgumentValues cargs, MutablePropertyValues pvs) {_		super(cargs, pvs)__		setBeanClassName(beanClassName)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,p,takes,a,bean,class,name,to,avoid,eager,loading,of,the,bean,class,param,bean,class,name,the,name,of,the,class,to,instantiate,param,cargs,the,constructor,argument,values,to,apply,param,pvs,the,property,values,to,apply;public,root,bean,definition,string,bean,class,name,constructor,argument,values,cargs,mutable,property,values,pvs,super,cargs,pvs,set,bean,class,name,bean,class,name
RootBeanDefinition -> public RootBeanDefinition(String beanClassName, ConstructorArgumentValues cargs, MutablePropertyValues pvs);1530174524;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._<p>Takes a bean class name to avoid eager loading of the bean class._@param beanClassName the name of the class to instantiate_@param cargs the constructor argument values to apply_@param pvs the property values to apply;public RootBeanDefinition(String beanClassName, ConstructorArgumentValues cargs, MutablePropertyValues pvs) {_		super(cargs, pvs)__		setBeanClassName(beanClassName)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,p,takes,a,bean,class,name,to,avoid,eager,loading,of,the,bean,class,param,bean,class,name,the,name,of,the,class,to,instantiate,param,cargs,the,constructor,argument,values,to,apply,param,pvs,the,property,values,to,apply;public,root,bean,definition,string,bean,class,name,constructor,argument,values,cargs,mutable,property,values,pvs,super,cargs,pvs,set,bean,class,name,bean,class,name
RootBeanDefinition -> public RootBeanDefinition(String beanClassName, ConstructorArgumentValues cargs, MutablePropertyValues pvs);1531243692;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._<p>Takes a bean class name to avoid eager loading of the bean class._@param beanClassName the name of the class to instantiate_@param cargs the constructor argument values to apply_@param pvs the property values to apply;public RootBeanDefinition(String beanClassName, ConstructorArgumentValues cargs, MutablePropertyValues pvs) {_		super(cargs, pvs)__		setBeanClassName(beanClassName)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,p,takes,a,bean,class,name,to,avoid,eager,loading,of,the,bean,class,param,bean,class,name,the,name,of,the,class,to,instantiate,param,cargs,the,constructor,argument,values,to,apply,param,pvs,the,property,values,to,apply;public,root,bean,definition,string,bean,class,name,constructor,argument,values,cargs,mutable,property,values,pvs,super,cargs,pvs,set,bean,class,name,bean,class,name
RootBeanDefinition -> public RootBeanDefinition(String beanClassName, ConstructorArgumentValues cargs, MutablePropertyValues pvs);1537388383;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._<p>Takes a bean class name to avoid eager loading of the bean class._@param beanClassName the name of the class to instantiate_@param cargs the constructor argument values to apply_@param pvs the property values to apply;public RootBeanDefinition(String beanClassName, ConstructorArgumentValues cargs, MutablePropertyValues pvs) {_		super(cargs, pvs)__		setBeanClassName(beanClassName)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,p,takes,a,bean,class,name,to,avoid,eager,loading,of,the,bean,class,param,bean,class,name,the,name,of,the,class,to,instantiate,param,cargs,the,constructor,argument,values,to,apply,param,pvs,the,property,values,to,apply;public,root,bean,definition,string,bean,class,name,constructor,argument,values,cargs,mutable,property,values,pvs,super,cargs,pvs,set,bean,class,name,bean,class,name
RootBeanDefinition -> public RootBeanDefinition(String beanClassName, ConstructorArgumentValues cargs, MutablePropertyValues pvs);1539377630;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._<p>Takes a bean class name to avoid eager loading of the bean class._@param beanClassName the name of the class to instantiate_@param cargs the constructor argument values to apply_@param pvs the property values to apply;public RootBeanDefinition(String beanClassName, ConstructorArgumentValues cargs, MutablePropertyValues pvs) {_		super(cargs, pvs)__		setBeanClassName(beanClassName)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,p,takes,a,bean,class,name,to,avoid,eager,loading,of,the,bean,class,param,bean,class,name,the,name,of,the,class,to,instantiate,param,cargs,the,constructor,argument,values,to,apply,param,pvs,the,property,values,to,apply;public,root,bean,definition,string,bean,class,name,constructor,argument,values,cargs,mutable,property,values,pvs,super,cargs,pvs,set,bean,class,name,bean,class,name
RootBeanDefinition -> public <T> RootBeanDefinition(@Nullable Class<T> beanClass, String scope, @Nullable Supplier<T> instanceSupplier);1496243689;Create a new RootBeanDefinition for a scoped bean, constructing each instance_through calling the given supplier (possibly a lambda or method reference)._@param beanClass the class of the bean to instantiate_@param scope the name of the corresponding scope_@param instanceSupplier the supplier to construct a bean instance,_as an alternative to a declaratively specified factory method_@since 5.0_@see #setInstanceSupplier;public <T> RootBeanDefinition(@Nullable Class<T> beanClass, String scope, @Nullable Supplier<T> instanceSupplier) {_		super()__		setBeanClass(beanClass)__		setScope(scope)__		setInstanceSupplier(instanceSupplier)__	};create,a,new,root,bean,definition,for,a,scoped,bean,constructing,each,instance,through,calling,the,given,supplier,possibly,a,lambda,or,method,reference,param,bean,class,the,class,of,the,bean,to,instantiate,param,scope,the,name,of,the,corresponding,scope,param,instance,supplier,the,supplier,to,construct,a,bean,instance,as,an,alternative,to,a,declaratively,specified,factory,method,since,5,0,see,set,instance,supplier;public,t,root,bean,definition,nullable,class,t,bean,class,string,scope,nullable,supplier,t,instance,supplier,super,set,bean,class,bean,class,set,scope,scope,set,instance,supplier,instance,supplier
RootBeanDefinition -> public <T> RootBeanDefinition(@Nullable Class<T> beanClass, String scope, @Nullable Supplier<T> instanceSupplier);1496259743;Create a new RootBeanDefinition for a scoped bean, constructing each instance_through calling the given supplier (possibly a lambda or method reference)._@param beanClass the class of the bean to instantiate_@param scope the name of the corresponding scope_@param instanceSupplier the supplier to construct a bean instance,_as an alternative to a declaratively specified factory method_@since 5.0_@see #setInstanceSupplier;public <T> RootBeanDefinition(@Nullable Class<T> beanClass, String scope, @Nullable Supplier<T> instanceSupplier) {_		super()__		setBeanClass(beanClass)__		setScope(scope)__		setInstanceSupplier(instanceSupplier)__	};create,a,new,root,bean,definition,for,a,scoped,bean,constructing,each,instance,through,calling,the,given,supplier,possibly,a,lambda,or,method,reference,param,bean,class,the,class,of,the,bean,to,instantiate,param,scope,the,name,of,the,corresponding,scope,param,instance,supplier,the,supplier,to,construct,a,bean,instance,as,an,alternative,to,a,declaratively,specified,factory,method,since,5,0,see,set,instance,supplier;public,t,root,bean,definition,nullable,class,t,bean,class,string,scope,nullable,supplier,t,instance,supplier,super,set,bean,class,bean,class,set,scope,scope,set,instance,supplier,instance,supplier
RootBeanDefinition -> public <T> RootBeanDefinition(@Nullable Class<T> beanClass, String scope, @Nullable Supplier<T> instanceSupplier);1496837955;Create a new RootBeanDefinition for a scoped bean, constructing each instance_through calling the given supplier (possibly a lambda or method reference)._@param beanClass the class of the bean to instantiate_@param scope the name of the corresponding scope_@param instanceSupplier the supplier to construct a bean instance,_as an alternative to a declaratively specified factory method_@since 5.0_@see #setInstanceSupplier;public <T> RootBeanDefinition(@Nullable Class<T> beanClass, String scope, @Nullable Supplier<T> instanceSupplier) {_		super()__		setBeanClass(beanClass)__		setScope(scope)__		setInstanceSupplier(instanceSupplier)__	};create,a,new,root,bean,definition,for,a,scoped,bean,constructing,each,instance,through,calling,the,given,supplier,possibly,a,lambda,or,method,reference,param,bean,class,the,class,of,the,bean,to,instantiate,param,scope,the,name,of,the,corresponding,scope,param,instance,supplier,the,supplier,to,construct,a,bean,instance,as,an,alternative,to,a,declaratively,specified,factory,method,since,5,0,see,set,instance,supplier;public,t,root,bean,definition,nullable,class,t,bean,class,string,scope,nullable,supplier,t,instance,supplier,super,set,bean,class,bean,class,set,scope,scope,set,instance,supplier,instance,supplier
RootBeanDefinition -> public <T> RootBeanDefinition(@Nullable Class<T> beanClass, String scope, @Nullable Supplier<T> instanceSupplier);1498780456;Create a new RootBeanDefinition for a scoped bean, constructing each instance_through calling the given supplier (possibly a lambda or method reference)._@param beanClass the class of the bean to instantiate_@param scope the name of the corresponding scope_@param instanceSupplier the supplier to construct a bean instance,_as an alternative to a declaratively specified factory method_@since 5.0_@see #setInstanceSupplier;public <T> RootBeanDefinition(@Nullable Class<T> beanClass, String scope, @Nullable Supplier<T> instanceSupplier) {_		super()__		setBeanClass(beanClass)__		setScope(scope)__		setInstanceSupplier(instanceSupplier)__	};create,a,new,root,bean,definition,for,a,scoped,bean,constructing,each,instance,through,calling,the,given,supplier,possibly,a,lambda,or,method,reference,param,bean,class,the,class,of,the,bean,to,instantiate,param,scope,the,name,of,the,corresponding,scope,param,instance,supplier,the,supplier,to,construct,a,bean,instance,as,an,alternative,to,a,declaratively,specified,factory,method,since,5,0,see,set,instance,supplier;public,t,root,bean,definition,nullable,class,t,bean,class,string,scope,nullable,supplier,t,instance,supplier,super,set,bean,class,bean,class,set,scope,scope,set,instance,supplier,instance,supplier
RootBeanDefinition -> public <T> RootBeanDefinition(@Nullable Class<T> beanClass, String scope, @Nullable Supplier<T> instanceSupplier);1500448076;Create a new RootBeanDefinition for a scoped bean, constructing each instance_through calling the given supplier (possibly a lambda or method reference)._@param beanClass the class of the bean to instantiate_@param scope the name of the corresponding scope_@param instanceSupplier the supplier to construct a bean instance,_as an alternative to a declaratively specified factory method_@since 5.0_@see #setInstanceSupplier;public <T> RootBeanDefinition(@Nullable Class<T> beanClass, String scope, @Nullable Supplier<T> instanceSupplier) {_		super()__		setBeanClass(beanClass)__		setScope(scope)__		setInstanceSupplier(instanceSupplier)__	};create,a,new,root,bean,definition,for,a,scoped,bean,constructing,each,instance,through,calling,the,given,supplier,possibly,a,lambda,or,method,reference,param,bean,class,the,class,of,the,bean,to,instantiate,param,scope,the,name,of,the,corresponding,scope,param,instance,supplier,the,supplier,to,construct,a,bean,instance,as,an,alternative,to,a,declaratively,specified,factory,method,since,5,0,see,set,instance,supplier;public,t,root,bean,definition,nullable,class,t,bean,class,string,scope,nullable,supplier,t,instance,supplier,super,set,bean,class,bean,class,set,scope,scope,set,instance,supplier,instance,supplier
RootBeanDefinition -> public <T> RootBeanDefinition(@Nullable Class<T> beanClass, String scope, @Nullable Supplier<T> instanceSupplier);1510606271;Create a new RootBeanDefinition for a scoped bean, constructing each instance_through calling the given supplier (possibly a lambda or method reference)._@param beanClass the class of the bean to instantiate_@param scope the name of the corresponding scope_@param instanceSupplier the supplier to construct a bean instance,_as an alternative to a declaratively specified factory method_@since 5.0_@see #setInstanceSupplier;public <T> RootBeanDefinition(@Nullable Class<T> beanClass, String scope, @Nullable Supplier<T> instanceSupplier) {_		super()__		setBeanClass(beanClass)__		setScope(scope)__		setInstanceSupplier(instanceSupplier)__	};create,a,new,root,bean,definition,for,a,scoped,bean,constructing,each,instance,through,calling,the,given,supplier,possibly,a,lambda,or,method,reference,param,bean,class,the,class,of,the,bean,to,instantiate,param,scope,the,name,of,the,corresponding,scope,param,instance,supplier,the,supplier,to,construct,a,bean,instance,as,an,alternative,to,a,declaratively,specified,factory,method,since,5,0,see,set,instance,supplier;public,t,root,bean,definition,nullable,class,t,bean,class,string,scope,nullable,supplier,t,instance,supplier,super,set,bean,class,bean,class,set,scope,scope,set,instance,supplier,instance,supplier
RootBeanDefinition -> public <T> RootBeanDefinition(@Nullable Class<T> beanClass, String scope, @Nullable Supplier<T> instanceSupplier);1530174524;Create a new RootBeanDefinition for a scoped bean, constructing each instance_through calling the given supplier (possibly a lambda or method reference)._@param beanClass the class of the bean to instantiate_@param scope the name of the corresponding scope_@param instanceSupplier the supplier to construct a bean instance,_as an alternative to a declaratively specified factory method_@since 5.0_@see #setInstanceSupplier;public <T> RootBeanDefinition(@Nullable Class<T> beanClass, String scope, @Nullable Supplier<T> instanceSupplier) {_		super()__		setBeanClass(beanClass)__		setScope(scope)__		setInstanceSupplier(instanceSupplier)__	};create,a,new,root,bean,definition,for,a,scoped,bean,constructing,each,instance,through,calling,the,given,supplier,possibly,a,lambda,or,method,reference,param,bean,class,the,class,of,the,bean,to,instantiate,param,scope,the,name,of,the,corresponding,scope,param,instance,supplier,the,supplier,to,construct,a,bean,instance,as,an,alternative,to,a,declaratively,specified,factory,method,since,5,0,see,set,instance,supplier;public,t,root,bean,definition,nullable,class,t,bean,class,string,scope,nullable,supplier,t,instance,supplier,super,set,bean,class,bean,class,set,scope,scope,set,instance,supplier,instance,supplier
RootBeanDefinition -> public <T> RootBeanDefinition(@Nullable Class<T> beanClass, String scope, @Nullable Supplier<T> instanceSupplier);1531243692;Create a new RootBeanDefinition for a scoped bean, constructing each instance_through calling the given supplier (possibly a lambda or method reference)._@param beanClass the class of the bean to instantiate_@param scope the name of the corresponding scope_@param instanceSupplier the supplier to construct a bean instance,_as an alternative to a declaratively specified factory method_@since 5.0_@see #setInstanceSupplier;public <T> RootBeanDefinition(@Nullable Class<T> beanClass, String scope, @Nullable Supplier<T> instanceSupplier) {_		super()__		setBeanClass(beanClass)__		setScope(scope)__		setInstanceSupplier(instanceSupplier)__	};create,a,new,root,bean,definition,for,a,scoped,bean,constructing,each,instance,through,calling,the,given,supplier,possibly,a,lambda,or,method,reference,param,bean,class,the,class,of,the,bean,to,instantiate,param,scope,the,name,of,the,corresponding,scope,param,instance,supplier,the,supplier,to,construct,a,bean,instance,as,an,alternative,to,a,declaratively,specified,factory,method,since,5,0,see,set,instance,supplier;public,t,root,bean,definition,nullable,class,t,bean,class,string,scope,nullable,supplier,t,instance,supplier,super,set,bean,class,bean,class,set,scope,scope,set,instance,supplier,instance,supplier
RootBeanDefinition -> public <T> RootBeanDefinition(@Nullable Class<T> beanClass, String scope, @Nullable Supplier<T> instanceSupplier);1537388383;Create a new RootBeanDefinition for a scoped bean, constructing each instance_through calling the given supplier (possibly a lambda or method reference)._@param beanClass the class of the bean to instantiate_@param scope the name of the corresponding scope_@param instanceSupplier the supplier to construct a bean instance,_as an alternative to a declaratively specified factory method_@since 5.0_@see #setInstanceSupplier;public <T> RootBeanDefinition(@Nullable Class<T> beanClass, String scope, @Nullable Supplier<T> instanceSupplier) {_		super()__		setBeanClass(beanClass)__		setScope(scope)__		setInstanceSupplier(instanceSupplier)__	};create,a,new,root,bean,definition,for,a,scoped,bean,constructing,each,instance,through,calling,the,given,supplier,possibly,a,lambda,or,method,reference,param,bean,class,the,class,of,the,bean,to,instantiate,param,scope,the,name,of,the,corresponding,scope,param,instance,supplier,the,supplier,to,construct,a,bean,instance,as,an,alternative,to,a,declaratively,specified,factory,method,since,5,0,see,set,instance,supplier;public,t,root,bean,definition,nullable,class,t,bean,class,string,scope,nullable,supplier,t,instance,supplier,super,set,bean,class,bean,class,set,scope,scope,set,instance,supplier,instance,supplier
RootBeanDefinition -> public <T> RootBeanDefinition(@Nullable Class<T> beanClass, String scope, @Nullable Supplier<T> instanceSupplier);1539377630;Create a new RootBeanDefinition for a scoped bean, constructing each instance_through calling the given supplier (possibly a lambda or method reference)._@param beanClass the class of the bean to instantiate_@param scope the name of the corresponding scope_@param instanceSupplier the supplier to construct a bean instance,_as an alternative to a declaratively specified factory method_@since 5.0_@see #setInstanceSupplier;public <T> RootBeanDefinition(@Nullable Class<T> beanClass, String scope, @Nullable Supplier<T> instanceSupplier) {_		super()__		setBeanClass(beanClass)__		setScope(scope)__		setInstanceSupplier(instanceSupplier)__	};create,a,new,root,bean,definition,for,a,scoped,bean,constructing,each,instance,through,calling,the,given,supplier,possibly,a,lambda,or,method,reference,param,bean,class,the,class,of,the,bean,to,instantiate,param,scope,the,name,of,the,corresponding,scope,param,instance,supplier,the,supplier,to,construct,a,bean,instance,as,an,alternative,to,a,declaratively,specified,factory,method,since,5,0,see,set,instance,supplier;public,t,root,bean,definition,nullable,class,t,bean,class,string,scope,nullable,supplier,t,instance,supplier,super,set,bean,class,bean,class,set,scope,scope,set,instance,supplier,instance,supplier
RootBeanDefinition -> RootBeanDefinition(BeanDefinition original);1328020251;Create a new RootBeanDefinition as deep copy of the given_bean definition._@param original the original bean definition to copy from;RootBeanDefinition(BeanDefinition original) {_		super(original)__		if (original instanceof RootBeanDefinition) {_			RootBeanDefinition originalRbd = (RootBeanDefinition) original__			this.decoratedDefinition = originalRbd.decoratedDefinition__			this.isFactoryMethodUnique = originalRbd.isFactoryMethodUnique__		}_	};create,a,new,root,bean,definition,as,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;root,bean,definition,bean,definition,original,super,original,if,original,instanceof,root,bean,definition,root,bean,definition,original,rbd,root,bean,definition,original,this,decorated,definition,original,rbd,decorated,definition,this,is,factory,method,unique,original,rbd,is,factory,method,unique
RootBeanDefinition -> RootBeanDefinition(BeanDefinition original);1352412675;Create a new RootBeanDefinition as deep copy of the given_bean definition._@param original the original bean definition to copy from;RootBeanDefinition(BeanDefinition original) {_		super(original)__		if (original instanceof RootBeanDefinition) {_			RootBeanDefinition originalRbd = (RootBeanDefinition) original__			this.decoratedDefinition = originalRbd.decoratedDefinition__			this.isFactoryMethodUnique = originalRbd.isFactoryMethodUnique__		}_	};create,a,new,root,bean,definition,as,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;root,bean,definition,bean,definition,original,super,original,if,original,instanceof,root,bean,definition,root,bean,definition,original,rbd,root,bean,definition,original,this,decorated,definition,original,rbd,decorated,definition,this,is,factory,method,unique,original,rbd,is,factory,method,unique
RootBeanDefinition -> RootBeanDefinition(BeanDefinition original);1355352386;Create a new RootBeanDefinition as deep copy of the given_bean definition._@param original the original bean definition to copy from;RootBeanDefinition(BeanDefinition original) {_		super(original)__		if (original instanceof RootBeanDefinition) {_			RootBeanDefinition originalRbd = (RootBeanDefinition) original__			this.decoratedDefinition = originalRbd.decoratedDefinition__			this.isFactoryMethodUnique = originalRbd.isFactoryMethodUnique__		}_	};create,a,new,root,bean,definition,as,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;root,bean,definition,bean,definition,original,super,original,if,original,instanceof,root,bean,definition,root,bean,definition,original,rbd,root,bean,definition,original,this,decorated,definition,original,rbd,decorated,definition,this,is,factory,method,unique,original,rbd,is,factory,method,unique
RootBeanDefinition -> RootBeanDefinition(BeanDefinition original);1356735495;Create a new RootBeanDefinition as deep copy of the given_bean definition._@param original the original bean definition to copy from;RootBeanDefinition(BeanDefinition original) {_		super(original)__		if (original instanceof RootBeanDefinition) {_			RootBeanDefinition originalRbd = (RootBeanDefinition) original__			this.decoratedDefinition = originalRbd.decoratedDefinition__			this.isFactoryMethodUnique = originalRbd.isFactoryMethodUnique__		}_	};create,a,new,root,bean,definition,as,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;root,bean,definition,bean,definition,original,super,original,if,original,instanceof,root,bean,definition,root,bean,definition,original,rbd,root,bean,definition,original,this,decorated,definition,original,rbd,decorated,definition,this,is,factory,method,unique,original,rbd,is,factory,method,unique
RootBeanDefinition -> RootBeanDefinition(BeanDefinition original);1357119239;Create a new RootBeanDefinition as deep copy of the given_bean definition._@param original the original bean definition to copy from;RootBeanDefinition(BeanDefinition original) {_		super(original)__		if (original instanceof RootBeanDefinition) {_			RootBeanDefinition originalRbd = (RootBeanDefinition) original__			this.decoratedDefinition = originalRbd.decoratedDefinition__			this.isFactoryMethodUnique = originalRbd.isFactoryMethodUnique__		}_	};create,a,new,root,bean,definition,as,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;root,bean,definition,bean,definition,original,super,original,if,original,instanceof,root,bean,definition,root,bean,definition,original,rbd,root,bean,definition,original,this,decorated,definition,original,rbd,decorated,definition,this,is,factory,method,unique,original,rbd,is,factory,method,unique
RootBeanDefinition -> RootBeanDefinition(BeanDefinition original);1362408075;Create a new RootBeanDefinition as deep copy of the given_bean definition._@param original the original bean definition to copy from;RootBeanDefinition(BeanDefinition original) {_		super(original)__		if (original instanceof RootBeanDefinition) {_			RootBeanDefinition originalRbd = (RootBeanDefinition) original__			this.decoratedDefinition = originalRbd.decoratedDefinition__			this.allowCaching = originalRbd.allowCaching__			this.targetType = originalRbd.targetType__			this.isFactoryMethodUnique = originalRbd.isFactoryMethodUnique__		}_	};create,a,new,root,bean,definition,as,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;root,bean,definition,bean,definition,original,super,original,if,original,instanceof,root,bean,definition,root,bean,definition,original,rbd,root,bean,definition,original,this,decorated,definition,original,rbd,decorated,definition,this,allow,caching,original,rbd,allow,caching,this,target,type,original,rbd,target,type,this,is,factory,method,unique,original,rbd,is,factory,method,unique
RootBeanDefinition -> RootBeanDefinition(BeanDefinition original);1364505266;Create a new RootBeanDefinition as deep copy of the given_bean definition._@param original the original bean definition to copy from;RootBeanDefinition(BeanDefinition original) {_		super(original)__		if (original instanceof RootBeanDefinition) {_			RootBeanDefinition originalRbd = (RootBeanDefinition) original__			this.decoratedDefinition = originalRbd.decoratedDefinition__			this.allowCaching = originalRbd.allowCaching__			this.targetType = originalRbd.targetType__			this.isFactoryMethodUnique = originalRbd.isFactoryMethodUnique__		}_	};create,a,new,root,bean,definition,as,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;root,bean,definition,bean,definition,original,super,original,if,original,instanceof,root,bean,definition,root,bean,definition,original,rbd,root,bean,definition,original,this,decorated,definition,original,rbd,decorated,definition,this,allow,caching,original,rbd,allow,caching,this,target,type,original,rbd,target,type,this,is,factory,method,unique,original,rbd,is,factory,method,unique
RootBeanDefinition -> RootBeanDefinition(BeanDefinition original);1367943112;Create a new RootBeanDefinition as deep copy of the given_bean definition._@param original the original bean definition to copy from;RootBeanDefinition(BeanDefinition original) {_		super(original)__		if (original instanceof RootBeanDefinition) {_			RootBeanDefinition originalRbd = (RootBeanDefinition) original__			this.decoratedDefinition = originalRbd.decoratedDefinition__			this.allowCaching = originalRbd.allowCaching__			this.targetType = originalRbd.targetType__			this.isFactoryMethodUnique = originalRbd.isFactoryMethodUnique__		}_	};create,a,new,root,bean,definition,as,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;root,bean,definition,bean,definition,original,super,original,if,original,instanceof,root,bean,definition,root,bean,definition,original,rbd,root,bean,definition,original,this,decorated,definition,original,rbd,decorated,definition,this,allow,caching,original,rbd,allow,caching,this,target,type,original,rbd,target,type,this,is,factory,method,unique,original,rbd,is,factory,method,unique
RootBeanDefinition -> RootBeanDefinition(BeanDefinition original);1368482696;Create a new RootBeanDefinition as deep copy of the given_bean definition._@param original the original bean definition to copy from;RootBeanDefinition(BeanDefinition original) {_		super(original)__		if (original instanceof RootBeanDefinition) {_			RootBeanDefinition originalRbd = (RootBeanDefinition) original__			this.decoratedDefinition = originalRbd.decoratedDefinition__			this.allowCaching = originalRbd.allowCaching__			this.targetType = originalRbd.targetType__			this.isFactoryMethodUnique = originalRbd.isFactoryMethodUnique__		}_	};create,a,new,root,bean,definition,as,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;root,bean,definition,bean,definition,original,super,original,if,original,instanceof,root,bean,definition,root,bean,definition,original,rbd,root,bean,definition,original,this,decorated,definition,original,rbd,decorated,definition,this,allow,caching,original,rbd,allow,caching,this,target,type,original,rbd,target,type,this,is,factory,method,unique,original,rbd,is,factory,method,unique
RootBeanDefinition -> RootBeanDefinition(BeanDefinition original);1368546246;Create a new RootBeanDefinition as deep copy of the given_bean definition._@param original the original bean definition to copy from;RootBeanDefinition(BeanDefinition original) {_		super(original)__		if (original instanceof RootBeanDefinition) {_			RootBeanDefinition originalRbd = (RootBeanDefinition) original__			this.decoratedDefinition = originalRbd.decoratedDefinition__			this.allowCaching = originalRbd.allowCaching__			this.targetType = originalRbd.targetType__			this.isFactoryMethodUnique = originalRbd.isFactoryMethodUnique__		}_	};create,a,new,root,bean,definition,as,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;root,bean,definition,bean,definition,original,super,original,if,original,instanceof,root,bean,definition,root,bean,definition,original,rbd,root,bean,definition,original,this,decorated,definition,original,rbd,decorated,definition,this,allow,caching,original,rbd,allow,caching,this,target,type,original,rbd,target,type,this,is,factory,method,unique,original,rbd,is,factory,method,unique
RootBeanDefinition -> RootBeanDefinition(BeanDefinition original);1368628892;Create a new RootBeanDefinition as deep copy of the given_bean definition._@param original the original bean definition to copy from;RootBeanDefinition(BeanDefinition original) {_		super(original)__	};create,a,new,root,bean,definition,as,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;root,bean,definition,bean,definition,original,super,original
RootBeanDefinition -> RootBeanDefinition(BeanDefinition original);1382826936;Create a new RootBeanDefinition as deep copy of the given_bean definition._@param original the original bean definition to copy from;RootBeanDefinition(BeanDefinition original) {_		super(original)__	};create,a,new,root,bean,definition,as,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;root,bean,definition,bean,definition,original,super,original
RootBeanDefinition -> RootBeanDefinition(BeanDefinition original);1390396833;Create a new RootBeanDefinition as deep copy of the given_bean definition._@param original the original bean definition to copy from;RootBeanDefinition(BeanDefinition original) {_		super(original)__	};create,a,new,root,bean,definition,as,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;root,bean,definition,bean,definition,original,super,original
RootBeanDefinition -> RootBeanDefinition(BeanDefinition original);1467730834;Create a new RootBeanDefinition as deep copy of the given_bean definition._@param original the original bean definition to copy from;RootBeanDefinition(BeanDefinition original) {_		super(original)__	};create,a,new,root,bean,definition,as,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;root,bean,definition,bean,definition,original,super,original
RootBeanDefinition -> RootBeanDefinition(BeanDefinition original);1467744603;Create a new RootBeanDefinition as deep copy of the given_bean definition._@param original the original bean definition to copy from;RootBeanDefinition(BeanDefinition original) {_		super(original)__	};create,a,new,root,bean,definition,as,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;root,bean,definition,bean,definition,original,super,original
RootBeanDefinition -> RootBeanDefinition(BeanDefinition original);1469367243;Create a new RootBeanDefinition as deep copy of the given_bean definition._@param original the original bean definition to copy from;RootBeanDefinition(BeanDefinition original) {_		super(original)__	};create,a,new,root,bean,definition,as,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;root,bean,definition,bean,definition,original,super,original
RootBeanDefinition -> RootBeanDefinition(BeanDefinition original);1471445956;Create a new RootBeanDefinition as deep copy of the given_bean definition._@param original the original bean definition to copy from;RootBeanDefinition(BeanDefinition original) {_		super(original)__	};create,a,new,root,bean,definition,as,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;root,bean,definition,bean,definition,original,super,original
RootBeanDefinition -> RootBeanDefinition(BeanDefinition original);1474010431;Create a new RootBeanDefinition as deep copy of the given_bean definition._@param original the original bean definition to copy from;RootBeanDefinition(BeanDefinition original) {_		super(original)__	};create,a,new,root,bean,definition,as,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;root,bean,definition,bean,definition,original,super,original
RootBeanDefinition -> RootBeanDefinition(BeanDefinition original);1474014845;Create a new RootBeanDefinition as deep copy of the given_bean definition._@param original the original bean definition to copy from;RootBeanDefinition(BeanDefinition original) {_		super(original)__	};create,a,new,root,bean,definition,as,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;root,bean,definition,bean,definition,original,super,original
RootBeanDefinition -> RootBeanDefinition(BeanDefinition original);1482012648;Create a new RootBeanDefinition as deep copy of the given_bean definition._@param original the original bean definition to copy from;RootBeanDefinition(BeanDefinition original) {_		super(original)__	};create,a,new,root,bean,definition,as,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;root,bean,definition,bean,definition,original,super,original
RootBeanDefinition -> RootBeanDefinition(BeanDefinition original);1482091545;Create a new RootBeanDefinition as deep copy of the given_bean definition._@param original the original bean definition to copy from;RootBeanDefinition(BeanDefinition original) {_		super(original)__	};create,a,new,root,bean,definition,as,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;root,bean,definition,bean,definition,original,super,original
RootBeanDefinition -> RootBeanDefinition(BeanDefinition original);1483093818;Create a new RootBeanDefinition as deep copy of the given_bean definition._@param original the original bean definition to copy from;RootBeanDefinition(BeanDefinition original) {_		super(original)__	};create,a,new,root,bean,definition,as,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;root,bean,definition,bean,definition,original,super,original
RootBeanDefinition -> RootBeanDefinition(BeanDefinition original);1495868221;Create a new RootBeanDefinition as deep copy of the given_bean definition._@param original the original bean definition to copy from;RootBeanDefinition(BeanDefinition original) {_		super(original)__	};create,a,new,root,bean,definition,as,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;root,bean,definition,bean,definition,original,super,original
RootBeanDefinition -> RootBeanDefinition(BeanDefinition original);1496242568;Create a new RootBeanDefinition as deep copy of the given_bean definition._@param original the original bean definition to copy from;RootBeanDefinition(BeanDefinition original) {_		super(original)__	};create,a,new,root,bean,definition,as,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;root,bean,definition,bean,definition,original,super,original
RootBeanDefinition -> RootBeanDefinition(BeanDefinition original);1496243689;Create a new RootBeanDefinition as deep copy of the given_bean definition._@param original the original bean definition to copy from;RootBeanDefinition(BeanDefinition original) {_		super(original)__	};create,a,new,root,bean,definition,as,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;root,bean,definition,bean,definition,original,super,original
RootBeanDefinition -> RootBeanDefinition(BeanDefinition original);1496259743;Create a new RootBeanDefinition as deep copy of the given_bean definition._@param original the original bean definition to copy from;RootBeanDefinition(BeanDefinition original) {_		super(original)__	};create,a,new,root,bean,definition,as,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;root,bean,definition,bean,definition,original,super,original
RootBeanDefinition -> RootBeanDefinition(BeanDefinition original);1496837955;Create a new RootBeanDefinition as deep copy of the given_bean definition._@param original the original bean definition to copy from;RootBeanDefinition(BeanDefinition original) {_		super(original)__	};create,a,new,root,bean,definition,as,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;root,bean,definition,bean,definition,original,super,original
RootBeanDefinition -> RootBeanDefinition(BeanDefinition original);1498780456;Create a new RootBeanDefinition as deep copy of the given_bean definition._@param original the original bean definition to copy from;RootBeanDefinition(BeanDefinition original) {_		super(original)__	};create,a,new,root,bean,definition,as,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;root,bean,definition,bean,definition,original,super,original
RootBeanDefinition -> RootBeanDefinition(BeanDefinition original);1500448076;Create a new RootBeanDefinition as deep copy of the given_bean definition._@param original the original bean definition to copy from;RootBeanDefinition(BeanDefinition original) {_		super(original)__	};create,a,new,root,bean,definition,as,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;root,bean,definition,bean,definition,original,super,original
RootBeanDefinition -> RootBeanDefinition(BeanDefinition original);1510606271;Create a new RootBeanDefinition as deep copy of the given_bean definition._@param original the original bean definition to copy from;RootBeanDefinition(BeanDefinition original) {_		super(original)__	};create,a,new,root,bean,definition,as,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;root,bean,definition,bean,definition,original,super,original
RootBeanDefinition -> RootBeanDefinition(BeanDefinition original);1530174524;Create a new RootBeanDefinition as deep copy of the given_bean definition._@param original the original bean definition to copy from;RootBeanDefinition(BeanDefinition original) {_		super(original)__	};create,a,new,root,bean,definition,as,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;root,bean,definition,bean,definition,original,super,original
RootBeanDefinition -> RootBeanDefinition(BeanDefinition original);1531243692;Create a new RootBeanDefinition as deep copy of the given_bean definition._@param original the original bean definition to copy from;RootBeanDefinition(BeanDefinition original) {_		super(original)__	};create,a,new,root,bean,definition,as,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;root,bean,definition,bean,definition,original,super,original
RootBeanDefinition -> RootBeanDefinition(BeanDefinition original);1537388383;Create a new RootBeanDefinition as deep copy of the given_bean definition._@param original the original bean definition to copy from;RootBeanDefinition(BeanDefinition original) {_		super(original)__	};create,a,new,root,bean,definition,as,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;root,bean,definition,bean,definition,original,super,original
RootBeanDefinition -> RootBeanDefinition(BeanDefinition original);1539377630;Create a new RootBeanDefinition as deep copy of the given_bean definition._@param original the original bean definition to copy from;RootBeanDefinition(BeanDefinition original) {_		super(original)__	};create,a,new,root,bean,definition,as,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;root,bean,definition,bean,definition,original,super,original
RootBeanDefinition -> public RootBeanDefinition();1328020251;Create a new RootBeanDefinition, to be configured through its bean_properties and configuration methods._@see #setBeanClass_@see #setBeanClassName_@see #setScope_@see #setAutowireMode_@see #setDependencyCheck_@see #setConstructorArgumentValues_@see #setPropertyValues;public RootBeanDefinition() {_		super()__	};create,a,new,root,bean,definition,to,be,configured,through,its,bean,properties,and,configuration,methods,see,set,bean,class,see,set,bean,class,name,see,set,scope,see,set,autowire,mode,see,set,dependency,check,see,set,constructor,argument,values,see,set,property,values;public,root,bean,definition,super
RootBeanDefinition -> public RootBeanDefinition();1352412675;Create a new RootBeanDefinition, to be configured through its bean_properties and configuration methods._@see #setBeanClass_@see #setBeanClassName_@see #setScope_@see #setAutowireMode_@see #setDependencyCheck_@see #setConstructorArgumentValues_@see #setPropertyValues;public RootBeanDefinition() {_		super()__	};create,a,new,root,bean,definition,to,be,configured,through,its,bean,properties,and,configuration,methods,see,set,bean,class,see,set,bean,class,name,see,set,scope,see,set,autowire,mode,see,set,dependency,check,see,set,constructor,argument,values,see,set,property,values;public,root,bean,definition,super
RootBeanDefinition -> public RootBeanDefinition();1355352386;Create a new RootBeanDefinition, to be configured through its bean_properties and configuration methods._@see #setBeanClass_@see #setBeanClassName_@see #setScope_@see #setAutowireMode_@see #setDependencyCheck_@see #setConstructorArgumentValues_@see #setPropertyValues;public RootBeanDefinition() {_		super()__	};create,a,new,root,bean,definition,to,be,configured,through,its,bean,properties,and,configuration,methods,see,set,bean,class,see,set,bean,class,name,see,set,scope,see,set,autowire,mode,see,set,dependency,check,see,set,constructor,argument,values,see,set,property,values;public,root,bean,definition,super
RootBeanDefinition -> public RootBeanDefinition();1356735495;Create a new RootBeanDefinition, to be configured through its bean_properties and configuration methods._@see #setBeanClass_@see #setBeanClassName_@see #setScope_@see #setAutowireMode_@see #setDependencyCheck_@see #setConstructorArgumentValues_@see #setPropertyValues;public RootBeanDefinition() {_		super()__	};create,a,new,root,bean,definition,to,be,configured,through,its,bean,properties,and,configuration,methods,see,set,bean,class,see,set,bean,class,name,see,set,scope,see,set,autowire,mode,see,set,dependency,check,see,set,constructor,argument,values,see,set,property,values;public,root,bean,definition,super
RootBeanDefinition -> public RootBeanDefinition();1357119239;Create a new RootBeanDefinition, to be configured through its bean_properties and configuration methods._@see #setBeanClass_@see #setBeanClassName_@see #setScope_@see #setAutowireMode_@see #setDependencyCheck_@see #setConstructorArgumentValues_@see #setPropertyValues;public RootBeanDefinition() {_		super()__	};create,a,new,root,bean,definition,to,be,configured,through,its,bean,properties,and,configuration,methods,see,set,bean,class,see,set,bean,class,name,see,set,scope,see,set,autowire,mode,see,set,dependency,check,see,set,constructor,argument,values,see,set,property,values;public,root,bean,definition,super
RootBeanDefinition -> public RootBeanDefinition();1362408075;Create a new RootBeanDefinition, to be configured through its bean_properties and configuration methods._@see #setBeanClass_@see #setBeanClassName_@see #setScope_@see #setAutowireMode_@see #setDependencyCheck_@see #setConstructorArgumentValues_@see #setPropertyValues;public RootBeanDefinition() {_		super()__	};create,a,new,root,bean,definition,to,be,configured,through,its,bean,properties,and,configuration,methods,see,set,bean,class,see,set,bean,class,name,see,set,scope,see,set,autowire,mode,see,set,dependency,check,see,set,constructor,argument,values,see,set,property,values;public,root,bean,definition,super
RootBeanDefinition -> public RootBeanDefinition();1364505266;Create a new RootBeanDefinition, to be configured through its bean_properties and configuration methods._@see #setBeanClass_@see #setBeanClassName_@see #setScope_@see #setAutowireMode_@see #setDependencyCheck_@see #setConstructorArgumentValues_@see #setPropertyValues;public RootBeanDefinition() {_		super()__	};create,a,new,root,bean,definition,to,be,configured,through,its,bean,properties,and,configuration,methods,see,set,bean,class,see,set,bean,class,name,see,set,scope,see,set,autowire,mode,see,set,dependency,check,see,set,constructor,argument,values,see,set,property,values;public,root,bean,definition,super
RootBeanDefinition -> public RootBeanDefinition();1367943112;Create a new RootBeanDefinition, to be configured through its bean_properties and configuration methods._@see #setBeanClass_@see #setBeanClassName_@see #setScope_@see #setAutowireMode_@see #setDependencyCheck_@see #setConstructorArgumentValues_@see #setPropertyValues;public RootBeanDefinition() {_		super()__	};create,a,new,root,bean,definition,to,be,configured,through,its,bean,properties,and,configuration,methods,see,set,bean,class,see,set,bean,class,name,see,set,scope,see,set,autowire,mode,see,set,dependency,check,see,set,constructor,argument,values,see,set,property,values;public,root,bean,definition,super
RootBeanDefinition -> public RootBeanDefinition();1368482696;Create a new RootBeanDefinition, to be configured through its bean_properties and configuration methods._@see #setBeanClass_@see #setBeanClassName_@see #setScope_@see #setAutowireMode_@see #setDependencyCheck_@see #setConstructorArgumentValues_@see #setPropertyValues;public RootBeanDefinition() {_		super()__	};create,a,new,root,bean,definition,to,be,configured,through,its,bean,properties,and,configuration,methods,see,set,bean,class,see,set,bean,class,name,see,set,scope,see,set,autowire,mode,see,set,dependency,check,see,set,constructor,argument,values,see,set,property,values;public,root,bean,definition,super
RootBeanDefinition -> public RootBeanDefinition();1368546246;Create a new RootBeanDefinition, to be configured through its bean_properties and configuration methods._@see #setBeanClass_@see #setBeanClassName_@see #setScope_@see #setAutowireMode_@see #setDependencyCheck_@see #setConstructorArgumentValues_@see #setPropertyValues;public RootBeanDefinition() {_		super()__	};create,a,new,root,bean,definition,to,be,configured,through,its,bean,properties,and,configuration,methods,see,set,bean,class,see,set,bean,class,name,see,set,scope,see,set,autowire,mode,see,set,dependency,check,see,set,constructor,argument,values,see,set,property,values;public,root,bean,definition,super
RootBeanDefinition -> public RootBeanDefinition();1368628892;Create a new RootBeanDefinition, to be configured through its bean_properties and configuration methods._@see #setBeanClass_@see #setBeanClassName_@see #setScope_@see #setAutowireMode_@see #setDependencyCheck_@see #setConstructorArgumentValues_@see #setPropertyValues;public RootBeanDefinition() {_		super()__	};create,a,new,root,bean,definition,to,be,configured,through,its,bean,properties,and,configuration,methods,see,set,bean,class,see,set,bean,class,name,see,set,scope,see,set,autowire,mode,see,set,dependency,check,see,set,constructor,argument,values,see,set,property,values;public,root,bean,definition,super
RootBeanDefinition -> public RootBeanDefinition();1382826936;Create a new RootBeanDefinition, to be configured through its bean_properties and configuration methods._@see #setBeanClass_@see #setBeanClassName_@see #setScope_@see #setAutowireMode_@see #setDependencyCheck_@see #setConstructorArgumentValues_@see #setPropertyValues;public RootBeanDefinition() {_		super()__	};create,a,new,root,bean,definition,to,be,configured,through,its,bean,properties,and,configuration,methods,see,set,bean,class,see,set,bean,class,name,see,set,scope,see,set,autowire,mode,see,set,dependency,check,see,set,constructor,argument,values,see,set,property,values;public,root,bean,definition,super
RootBeanDefinition -> public RootBeanDefinition();1390396833;Create a new RootBeanDefinition, to be configured through its bean_properties and configuration methods._@see #setBeanClass_@see #setBeanClassName_@see #setScope_@see #setAutowireMode_@see #setDependencyCheck_@see #setConstructorArgumentValues_@see #setPropertyValues;public RootBeanDefinition() {_		super()__	};create,a,new,root,bean,definition,to,be,configured,through,its,bean,properties,and,configuration,methods,see,set,bean,class,see,set,bean,class,name,see,set,scope,see,set,autowire,mode,see,set,dependency,check,see,set,constructor,argument,values,see,set,property,values;public,root,bean,definition,super
RootBeanDefinition -> public RootBeanDefinition();1467730834;Create a new RootBeanDefinition, to be configured through its bean_properties and configuration methods._@see #setBeanClass_@see #setBeanClassName_@see #setScope_@see #setAutowireMode_@see #setDependencyCheck_@see #setConstructorArgumentValues_@see #setPropertyValues;public RootBeanDefinition() {_		super()__	};create,a,new,root,bean,definition,to,be,configured,through,its,bean,properties,and,configuration,methods,see,set,bean,class,see,set,bean,class,name,see,set,scope,see,set,autowire,mode,see,set,dependency,check,see,set,constructor,argument,values,see,set,property,values;public,root,bean,definition,super
RootBeanDefinition -> public RootBeanDefinition();1467744603;Create a new RootBeanDefinition, to be configured through its bean_properties and configuration methods._@see #setBeanClass_@see #setBeanClassName_@see #setScope_@see #setAutowireMode_@see #setDependencyCheck_@see #setConstructorArgumentValues_@see #setPropertyValues;public RootBeanDefinition() {_		super()__	};create,a,new,root,bean,definition,to,be,configured,through,its,bean,properties,and,configuration,methods,see,set,bean,class,see,set,bean,class,name,see,set,scope,see,set,autowire,mode,see,set,dependency,check,see,set,constructor,argument,values,see,set,property,values;public,root,bean,definition,super
RootBeanDefinition -> public RootBeanDefinition();1469367243;Create a new RootBeanDefinition, to be configured through its bean_properties and configuration methods._@see #setBeanClass_@see #setBeanClassName_@see #setScope_@see #setAutowireMode_@see #setDependencyCheck_@see #setConstructorArgumentValues_@see #setPropertyValues;public RootBeanDefinition() {_		super()__	};create,a,new,root,bean,definition,to,be,configured,through,its,bean,properties,and,configuration,methods,see,set,bean,class,see,set,bean,class,name,see,set,scope,see,set,autowire,mode,see,set,dependency,check,see,set,constructor,argument,values,see,set,property,values;public,root,bean,definition,super
RootBeanDefinition -> public RootBeanDefinition();1471445956;Create a new RootBeanDefinition, to be configured through its bean_properties and configuration methods._@see #setBeanClass_@see #setBeanClassName_@see #setScope_@see #setAutowireMode_@see #setDependencyCheck_@see #setConstructorArgumentValues_@see #setPropertyValues;public RootBeanDefinition() {_		super()__	};create,a,new,root,bean,definition,to,be,configured,through,its,bean,properties,and,configuration,methods,see,set,bean,class,see,set,bean,class,name,see,set,scope,see,set,autowire,mode,see,set,dependency,check,see,set,constructor,argument,values,see,set,property,values;public,root,bean,definition,super
RootBeanDefinition -> public RootBeanDefinition();1474010431;Create a new RootBeanDefinition, to be configured through its bean_properties and configuration methods._@see #setBeanClass_@see #setBeanClassName_@see #setScope_@see #setAutowireMode_@see #setDependencyCheck_@see #setConstructorArgumentValues_@see #setPropertyValues;public RootBeanDefinition() {_		super()__	};create,a,new,root,bean,definition,to,be,configured,through,its,bean,properties,and,configuration,methods,see,set,bean,class,see,set,bean,class,name,see,set,scope,see,set,autowire,mode,see,set,dependency,check,see,set,constructor,argument,values,see,set,property,values;public,root,bean,definition,super
RootBeanDefinition -> public RootBeanDefinition();1474014845;Create a new RootBeanDefinition, to be configured through its bean_properties and configuration methods._@see #setBeanClass_@see #setBeanClassName_@see #setScope_@see #setAutowireMode_@see #setDependencyCheck_@see #setConstructorArgumentValues_@see #setPropertyValues;public RootBeanDefinition() {_		super()__	};create,a,new,root,bean,definition,to,be,configured,through,its,bean,properties,and,configuration,methods,see,set,bean,class,see,set,bean,class,name,see,set,scope,see,set,autowire,mode,see,set,dependency,check,see,set,constructor,argument,values,see,set,property,values;public,root,bean,definition,super
RootBeanDefinition -> public RootBeanDefinition();1482012648;Create a new RootBeanDefinition, to be configured through its bean_properties and configuration methods._@see #setBeanClass_@see #setBeanClassName_@see #setScope_@see #setAutowireMode_@see #setDependencyCheck_@see #setConstructorArgumentValues_@see #setPropertyValues;public RootBeanDefinition() {_		super()__	};create,a,new,root,bean,definition,to,be,configured,through,its,bean,properties,and,configuration,methods,see,set,bean,class,see,set,bean,class,name,see,set,scope,see,set,autowire,mode,see,set,dependency,check,see,set,constructor,argument,values,see,set,property,values;public,root,bean,definition,super
RootBeanDefinition -> public RootBeanDefinition();1482091545;Create a new RootBeanDefinition, to be configured through its bean_properties and configuration methods._@see #setBeanClass_@see #setBeanClassName_@see #setScope_@see #setAutowireMode_@see #setDependencyCheck_@see #setConstructorArgumentValues_@see #setPropertyValues;public RootBeanDefinition() {_		super()__	};create,a,new,root,bean,definition,to,be,configured,through,its,bean,properties,and,configuration,methods,see,set,bean,class,see,set,bean,class,name,see,set,scope,see,set,autowire,mode,see,set,dependency,check,see,set,constructor,argument,values,see,set,property,values;public,root,bean,definition,super
RootBeanDefinition -> public RootBeanDefinition();1483093818;Create a new RootBeanDefinition, to be configured through its bean_properties and configuration methods._@see #setBeanClass_@see #setScope_@see #setConstructorArgumentValues_@see #setPropertyValues;public RootBeanDefinition() {_		super()__	};create,a,new,root,bean,definition,to,be,configured,through,its,bean,properties,and,configuration,methods,see,set,bean,class,see,set,scope,see,set,constructor,argument,values,see,set,property,values;public,root,bean,definition,super
RootBeanDefinition -> public RootBeanDefinition();1495868221;Create a new RootBeanDefinition, to be configured through its bean_properties and configuration methods._@see #setBeanClass_@see #setScope_@see #setConstructorArgumentValues_@see #setPropertyValues;public RootBeanDefinition() {_		super()__	};create,a,new,root,bean,definition,to,be,configured,through,its,bean,properties,and,configuration,methods,see,set,bean,class,see,set,scope,see,set,constructor,argument,values,see,set,property,values;public,root,bean,definition,super
RootBeanDefinition -> public RootBeanDefinition();1496242568;Create a new RootBeanDefinition, to be configured through its bean_properties and configuration methods._@see #setBeanClass_@see #setScope_@see #setConstructorArgumentValues_@see #setPropertyValues;public RootBeanDefinition() {_		super()__	};create,a,new,root,bean,definition,to,be,configured,through,its,bean,properties,and,configuration,methods,see,set,bean,class,see,set,scope,see,set,constructor,argument,values,see,set,property,values;public,root,bean,definition,super
RootBeanDefinition -> public RootBeanDefinition();1496243689;Create a new RootBeanDefinition, to be configured through its bean_properties and configuration methods._@see #setBeanClass_@see #setScope_@see #setConstructorArgumentValues_@see #setPropertyValues;public RootBeanDefinition() {_		super()__	};create,a,new,root,bean,definition,to,be,configured,through,its,bean,properties,and,configuration,methods,see,set,bean,class,see,set,scope,see,set,constructor,argument,values,see,set,property,values;public,root,bean,definition,super
RootBeanDefinition -> public RootBeanDefinition();1496259743;Create a new RootBeanDefinition, to be configured through its bean_properties and configuration methods._@see #setBeanClass_@see #setScope_@see #setConstructorArgumentValues_@see #setPropertyValues;public RootBeanDefinition() {_		super()__	};create,a,new,root,bean,definition,to,be,configured,through,its,bean,properties,and,configuration,methods,see,set,bean,class,see,set,scope,see,set,constructor,argument,values,see,set,property,values;public,root,bean,definition,super
RootBeanDefinition -> public RootBeanDefinition();1496837955;Create a new RootBeanDefinition, to be configured through its bean_properties and configuration methods._@see #setBeanClass_@see #setScope_@see #setConstructorArgumentValues_@see #setPropertyValues;public RootBeanDefinition() {_		super()__	};create,a,new,root,bean,definition,to,be,configured,through,its,bean,properties,and,configuration,methods,see,set,bean,class,see,set,scope,see,set,constructor,argument,values,see,set,property,values;public,root,bean,definition,super
RootBeanDefinition -> public RootBeanDefinition();1498780456;Create a new RootBeanDefinition, to be configured through its bean_properties and configuration methods._@see #setBeanClass_@see #setScope_@see #setConstructorArgumentValues_@see #setPropertyValues;public RootBeanDefinition() {_		super()__	};create,a,new,root,bean,definition,to,be,configured,through,its,bean,properties,and,configuration,methods,see,set,bean,class,see,set,scope,see,set,constructor,argument,values,see,set,property,values;public,root,bean,definition,super
RootBeanDefinition -> public RootBeanDefinition();1500448076;Create a new RootBeanDefinition, to be configured through its bean_properties and configuration methods._@see #setBeanClass_@see #setScope_@see #setConstructorArgumentValues_@see #setPropertyValues;public RootBeanDefinition() {_		super()__	};create,a,new,root,bean,definition,to,be,configured,through,its,bean,properties,and,configuration,methods,see,set,bean,class,see,set,scope,see,set,constructor,argument,values,see,set,property,values;public,root,bean,definition,super
RootBeanDefinition -> public RootBeanDefinition();1510606271;Create a new RootBeanDefinition, to be configured through its bean_properties and configuration methods._@see #setBeanClass_@see #setScope_@see #setConstructorArgumentValues_@see #setPropertyValues;public RootBeanDefinition() {_		super()__	};create,a,new,root,bean,definition,to,be,configured,through,its,bean,properties,and,configuration,methods,see,set,bean,class,see,set,scope,see,set,constructor,argument,values,see,set,property,values;public,root,bean,definition,super
RootBeanDefinition -> public RootBeanDefinition();1530174524;Create a new RootBeanDefinition, to be configured through its bean_properties and configuration methods._@see #setBeanClass_@see #setScope_@see #setConstructorArgumentValues_@see #setPropertyValues;public RootBeanDefinition() {_		super()__	};create,a,new,root,bean,definition,to,be,configured,through,its,bean,properties,and,configuration,methods,see,set,bean,class,see,set,scope,see,set,constructor,argument,values,see,set,property,values;public,root,bean,definition,super
RootBeanDefinition -> public RootBeanDefinition();1531243692;Create a new RootBeanDefinition, to be configured through its bean_properties and configuration methods._@see #setBeanClass_@see #setScope_@see #setConstructorArgumentValues_@see #setPropertyValues;public RootBeanDefinition() {_		super()__	};create,a,new,root,bean,definition,to,be,configured,through,its,bean,properties,and,configuration,methods,see,set,bean,class,see,set,scope,see,set,constructor,argument,values,see,set,property,values;public,root,bean,definition,super
RootBeanDefinition -> public RootBeanDefinition();1537388383;Create a new RootBeanDefinition, to be configured through its bean_properties and configuration methods._@see #setBeanClass_@see #setScope_@see #setConstructorArgumentValues_@see #setPropertyValues;public RootBeanDefinition() {_		super()__	};create,a,new,root,bean,definition,to,be,configured,through,its,bean,properties,and,configuration,methods,see,set,bean,class,see,set,scope,see,set,constructor,argument,values,see,set,property,values;public,root,bean,definition,super
RootBeanDefinition -> public RootBeanDefinition();1539377630;Create a new RootBeanDefinition, to be configured through its bean_properties and configuration methods._@see #setBeanClass_@see #setScope_@see #setConstructorArgumentValues_@see #setPropertyValues;public RootBeanDefinition() {_		super()__	};create,a,new,root,bean,definition,to,be,configured,through,its,bean,properties,and,configuration,methods,see,set,bean,class,see,set,scope,see,set,constructor,argument,values,see,set,property,values;public,root,bean,definition,super
RootBeanDefinition -> @Deprecated 	public RootBeanDefinition(Class beanClass, int autowireMode);1328020251;Create a new RootBeanDefinition for a singleton,_using the given autowire mode._@param beanClass the class of the bean to instantiate_@param autowireMode by name or type, using the constants in this interface_@deprecated as of Spring 3.0, in favor of {@link #setAutowireMode} usage;@Deprecated_	public RootBeanDefinition(Class beanClass, int autowireMode) {_		super()__		setBeanClass(beanClass)__		setAutowireMode(autowireMode)__	};create,a,new,root,bean,definition,for,a,singleton,using,the,given,autowire,mode,param,bean,class,the,class,of,the,bean,to,instantiate,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,deprecated,as,of,spring,3,0,in,favor,of,link,set,autowire,mode,usage;deprecated,public,root,bean,definition,class,bean,class,int,autowire,mode,super,set,bean,class,bean,class,set,autowire,mode,autowire,mode
RootBeanDefinition -> @Deprecated 	public RootBeanDefinition(Class beanClass, int autowireMode);1352412675;Create a new RootBeanDefinition for a singleton,_using the given autowire mode._@param beanClass the class of the bean to instantiate_@param autowireMode by name or type, using the constants in this interface_@deprecated as of Spring 3.0, in favor of {@link #setAutowireMode} usage;@Deprecated_	public RootBeanDefinition(Class beanClass, int autowireMode) {_		super()__		setBeanClass(beanClass)__		setAutowireMode(autowireMode)__	};create,a,new,root,bean,definition,for,a,singleton,using,the,given,autowire,mode,param,bean,class,the,class,of,the,bean,to,instantiate,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,deprecated,as,of,spring,3,0,in,favor,of,link,set,autowire,mode,usage;deprecated,public,root,bean,definition,class,bean,class,int,autowire,mode,super,set,bean,class,bean,class,set,autowire,mode,autowire,mode
RootBeanDefinition -> @Deprecated 	public RootBeanDefinition(Class beanClass, int autowireMode);1355352386;Create a new RootBeanDefinition for a singleton,_using the given autowire mode._@param beanClass the class of the bean to instantiate_@param autowireMode by name or type, using the constants in this interface_@deprecated as of Spring 3.0, in favor of {@link #setAutowireMode} usage;@Deprecated_	public RootBeanDefinition(Class beanClass, int autowireMode) {_		super()__		setBeanClass(beanClass)__		setAutowireMode(autowireMode)__	};create,a,new,root,bean,definition,for,a,singleton,using,the,given,autowire,mode,param,bean,class,the,class,of,the,bean,to,instantiate,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,deprecated,as,of,spring,3,0,in,favor,of,link,set,autowire,mode,usage;deprecated,public,root,bean,definition,class,bean,class,int,autowire,mode,super,set,bean,class,bean,class,set,autowire,mode,autowire,mode
RootBeanDefinition -> @Deprecated 	public RootBeanDefinition(Class beanClass, int autowireMode);1356735495;Create a new RootBeanDefinition for a singleton,_using the given autowire mode._@param beanClass the class of the bean to instantiate_@param autowireMode by name or type, using the constants in this interface_@deprecated as of Spring 3.0, in favor of {@link #setAutowireMode} usage;@Deprecated_	public RootBeanDefinition(Class beanClass, int autowireMode) {_		super()__		setBeanClass(beanClass)__		setAutowireMode(autowireMode)__	};create,a,new,root,bean,definition,for,a,singleton,using,the,given,autowire,mode,param,bean,class,the,class,of,the,bean,to,instantiate,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,deprecated,as,of,spring,3,0,in,favor,of,link,set,autowire,mode,usage;deprecated,public,root,bean,definition,class,bean,class,int,autowire,mode,super,set,bean,class,bean,class,set,autowire,mode,autowire,mode
RootBeanDefinition -> @Deprecated 	public RootBeanDefinition(Class beanClass, int autowireMode);1357119239;Create a new RootBeanDefinition for a singleton,_using the given autowire mode._@param beanClass the class of the bean to instantiate_@param autowireMode by name or type, using the constants in this interface_@deprecated as of Spring 3.0, in favor of {@link #setAutowireMode} usage;@Deprecated_	public RootBeanDefinition(Class beanClass, int autowireMode) {_		super()__		setBeanClass(beanClass)__		setAutowireMode(autowireMode)__	};create,a,new,root,bean,definition,for,a,singleton,using,the,given,autowire,mode,param,bean,class,the,class,of,the,bean,to,instantiate,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,deprecated,as,of,spring,3,0,in,favor,of,link,set,autowire,mode,usage;deprecated,public,root,bean,definition,class,bean,class,int,autowire,mode,super,set,bean,class,bean,class,set,autowire,mode,autowire,mode
RootBeanDefinition -> @Deprecated 	public RootBeanDefinition(Class beanClass, int autowireMode);1362408075;Create a new RootBeanDefinition for a singleton,_using the given autowire mode._@param beanClass the class of the bean to instantiate_@param autowireMode by name or type, using the constants in this interface_@deprecated as of Spring 3.0, in favor of {@link #setAutowireMode} usage;@Deprecated_	public RootBeanDefinition(Class beanClass, int autowireMode) {_		super()__		setBeanClass(beanClass)__		setAutowireMode(autowireMode)__	};create,a,new,root,bean,definition,for,a,singleton,using,the,given,autowire,mode,param,bean,class,the,class,of,the,bean,to,instantiate,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,deprecated,as,of,spring,3,0,in,favor,of,link,set,autowire,mode,usage;deprecated,public,root,bean,definition,class,bean,class,int,autowire,mode,super,set,bean,class,bean,class,set,autowire,mode,autowire,mode
RootBeanDefinition -> @Deprecated 	public RootBeanDefinition(Class beanClass, int autowireMode);1364505266;Create a new RootBeanDefinition for a singleton,_using the given autowire mode._@param beanClass the class of the bean to instantiate_@param autowireMode by name or type, using the constants in this interface_@deprecated as of Spring 3.0, in favor of {@link #setAutowireMode} usage;@Deprecated_	public RootBeanDefinition(Class beanClass, int autowireMode) {_		super()__		setBeanClass(beanClass)__		setAutowireMode(autowireMode)__	};create,a,new,root,bean,definition,for,a,singleton,using,the,given,autowire,mode,param,bean,class,the,class,of,the,bean,to,instantiate,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,deprecated,as,of,spring,3,0,in,favor,of,link,set,autowire,mode,usage;deprecated,public,root,bean,definition,class,bean,class,int,autowire,mode,super,set,bean,class,bean,class,set,autowire,mode,autowire,mode
RootBeanDefinition -> public AnnotatedElement getQualifiedElement();1474010431;Return the {@link AnnotatedElement} defining qualifiers, if any._@since 4.3.3;public AnnotatedElement getQualifiedElement() {_		return this.qualifiedElement__	};return,the,link,annotated,element,defining,qualifiers,if,any,since,4,3,3;public,annotated,element,get,qualified,element,return,this,qualified,element
RootBeanDefinition -> public AnnotatedElement getQualifiedElement();1474014845;Return the {@link AnnotatedElement} defining qualifiers, if any._Otherwise, the factory method and target class will be checked._@since 4.3.3;public AnnotatedElement getQualifiedElement() {_		return this.qualifiedElement__	};return,the,link,annotated,element,defining,qualifiers,if,any,otherwise,the,factory,method,and,target,class,will,be,checked,since,4,3,3;public,annotated,element,get,qualified,element,return,this,qualified,element
RootBeanDefinition -> public AnnotatedElement getQualifiedElement();1482012648;Return the {@link AnnotatedElement} defining qualifiers, if any._Otherwise, the factory method and target class will be checked._@since 4.3.3;public AnnotatedElement getQualifiedElement() {_		return this.qualifiedElement__	};return,the,link,annotated,element,defining,qualifiers,if,any,otherwise,the,factory,method,and,target,class,will,be,checked,since,4,3,3;public,annotated,element,get,qualified,element,return,this,qualified,element
RootBeanDefinition -> public AnnotatedElement getQualifiedElement();1482091545;Return the {@link AnnotatedElement} defining qualifiers, if any._Otherwise, the factory method and target class will be checked._@since 4.3.3;public AnnotatedElement getQualifiedElement() {_		return this.qualifiedElement__	};return,the,link,annotated,element,defining,qualifiers,if,any,otherwise,the,factory,method,and,target,class,will,be,checked,since,4,3,3;public,annotated,element,get,qualified,element,return,this,qualified,element
RootBeanDefinition -> public AnnotatedElement getQualifiedElement();1483093818;Return the {@link AnnotatedElement} defining qualifiers, if any._Otherwise, the factory method and target class will be checked._@since 4.3.3;public AnnotatedElement getQualifiedElement() {_		return this.qualifiedElement__	};return,the,link,annotated,element,defining,qualifiers,if,any,otherwise,the,factory,method,and,target,class,will,be,checked,since,4,3,3;public,annotated,element,get,qualified,element,return,this,qualified,element
RootBeanDefinition -> public ResolvableType getResolvableType();1531243692;Return a {@link ResolvableType} for this bean definition,_either from runtime-cached type information or from configuration-time_{@link #setTargetType(ResolvableType)} or {@link #setBeanClass(Class)}._@since 5.1_@see #getTargetType()_@see #getBeanClass();public ResolvableType getResolvableType() {_		ResolvableType targetType = this.targetType__		return (targetType != null ? targetType : ResolvableType.forClass(getBeanClass()))__	};return,a,link,resolvable,type,for,this,bean,definition,either,from,runtime,cached,type,information,or,from,configuration,time,link,set,target,type,resolvable,type,or,link,set,bean,class,class,since,5,1,see,get,target,type,see,get,bean,class;public,resolvable,type,get,resolvable,type,resolvable,type,target,type,this,target,type,return,target,type,null,target,type,resolvable,type,for,class,get,bean,class
RootBeanDefinition -> public ResolvableType getResolvableType();1537388383;Return a {@link ResolvableType} for this bean definition,_either from runtime-cached type information or from configuration-time_{@link #setTargetType(ResolvableType)} or {@link #setBeanClass(Class)}._@since 5.1_@see #getTargetType()_@see #getBeanClass();public ResolvableType getResolvableType() {_		ResolvableType targetType = this.targetType__		return (targetType != null ? targetType : ResolvableType.forClass(getBeanClass()))__	};return,a,link,resolvable,type,for,this,bean,definition,either,from,runtime,cached,type,information,or,from,configuration,time,link,set,target,type,resolvable,type,or,link,set,bean,class,class,since,5,1,see,get,target,type,see,get,bean,class;public,resolvable,type,get,resolvable,type,resolvable,type,target,type,this,target,type,return,target,type,null,target,type,resolvable,type,for,class,get,bean,class
RootBeanDefinition -> public ResolvableType getResolvableType();1539377630;Return a {@link ResolvableType} for this bean definition,_either from runtime-cached type information or from configuration-time_{@link #setTargetType(ResolvableType)} or {@link #setBeanClass(Class)}._@since 5.1_@see #getTargetType()_@see #getBeanClass();public ResolvableType getResolvableType() {_		ResolvableType targetType = this.targetType__		return (targetType != null ? targetType : ResolvableType.forClass(getBeanClass()))__	};return,a,link,resolvable,type,for,this,bean,definition,either,from,runtime,cached,type,information,or,from,configuration,time,link,set,target,type,resolvable,type,or,link,set,bean,class,class,since,5,1,see,get,target,type,see,get,bean,class;public,resolvable,type,get,resolvable,type,resolvable,type,target,type,this,target,type,return,target,type,null,target,type,resolvable,type,for,class,get,bean,class
RootBeanDefinition -> public RootBeanDefinition(RootBeanDefinition original);1328020251;Create a new RootBeanDefinition as deep copy of the given_bean definition._@param original the original bean definition to copy from;public RootBeanDefinition(RootBeanDefinition original) {_		this((BeanDefinition) original)__	};create,a,new,root,bean,definition,as,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;public,root,bean,definition,root,bean,definition,original,this,bean,definition,original
RootBeanDefinition -> public RootBeanDefinition(RootBeanDefinition original);1352412675;Create a new RootBeanDefinition as deep copy of the given_bean definition._@param original the original bean definition to copy from;public RootBeanDefinition(RootBeanDefinition original) {_		this((BeanDefinition) original)__	};create,a,new,root,bean,definition,as,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;public,root,bean,definition,root,bean,definition,original,this,bean,definition,original
RootBeanDefinition -> public RootBeanDefinition(RootBeanDefinition original);1355352386;Create a new RootBeanDefinition as deep copy of the given_bean definition._@param original the original bean definition to copy from;public RootBeanDefinition(RootBeanDefinition original) {_		this((BeanDefinition) original)__	};create,a,new,root,bean,definition,as,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;public,root,bean,definition,root,bean,definition,original,this,bean,definition,original
RootBeanDefinition -> public RootBeanDefinition(RootBeanDefinition original);1356735495;Create a new RootBeanDefinition as deep copy of the given_bean definition._@param original the original bean definition to copy from;public RootBeanDefinition(RootBeanDefinition original) {_		this((BeanDefinition) original)__	};create,a,new,root,bean,definition,as,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;public,root,bean,definition,root,bean,definition,original,this,bean,definition,original
RootBeanDefinition -> public RootBeanDefinition(RootBeanDefinition original);1357119239;Create a new RootBeanDefinition as deep copy of the given_bean definition._@param original the original bean definition to copy from;public RootBeanDefinition(RootBeanDefinition original) {_		this((BeanDefinition) original)__	};create,a,new,root,bean,definition,as,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;public,root,bean,definition,root,bean,definition,original,this,bean,definition,original
RootBeanDefinition -> public RootBeanDefinition(RootBeanDefinition original);1362408075;Create a new RootBeanDefinition as deep copy of the given_bean definition._@param original the original bean definition to copy from;public RootBeanDefinition(RootBeanDefinition original) {_		this((BeanDefinition) original)__	};create,a,new,root,bean,definition,as,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;public,root,bean,definition,root,bean,definition,original,this,bean,definition,original
RootBeanDefinition -> public RootBeanDefinition(RootBeanDefinition original);1364505266;Create a new RootBeanDefinition as deep copy of the given_bean definition._@param original the original bean definition to copy from;public RootBeanDefinition(RootBeanDefinition original) {_		this((BeanDefinition) original)__	};create,a,new,root,bean,definition,as,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;public,root,bean,definition,root,bean,definition,original,this,bean,definition,original
RootBeanDefinition -> public RootBeanDefinition(RootBeanDefinition original);1367943112;Create a new RootBeanDefinition as deep copy of the given_bean definition._@param original the original bean definition to copy from;public RootBeanDefinition(RootBeanDefinition original) {_		this((BeanDefinition) original)__	};create,a,new,root,bean,definition,as,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;public,root,bean,definition,root,bean,definition,original,this,bean,definition,original
RootBeanDefinition -> public RootBeanDefinition(RootBeanDefinition original);1368482696;Create a new RootBeanDefinition as deep copy of the given_bean definition._@param original the original bean definition to copy from;public RootBeanDefinition(RootBeanDefinition original) {_		this((BeanDefinition) original)__	};create,a,new,root,bean,definition,as,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;public,root,bean,definition,root,bean,definition,original,this,bean,definition,original
RootBeanDefinition -> public RootBeanDefinition(RootBeanDefinition original);1368546246;Create a new RootBeanDefinition as deep copy of the given_bean definition._@param original the original bean definition to copy from;public RootBeanDefinition(RootBeanDefinition original) {_		this((BeanDefinition) original)__	};create,a,new,root,bean,definition,as,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;public,root,bean,definition,root,bean,definition,original,this,bean,definition,original
RootBeanDefinition -> public RootBeanDefinition(RootBeanDefinition original);1368628892;Create a new RootBeanDefinition as deep copy of the given_bean definition._@param original the original bean definition to copy from;public RootBeanDefinition(RootBeanDefinition original) {_		super(original)__		this.decoratedDefinition = original.decoratedDefinition__		this.allowCaching = original.allowCaching__		this.targetType = original.targetType__		this.isFactoryMethodUnique = original.isFactoryMethodUnique__	};create,a,new,root,bean,definition,as,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;public,root,bean,definition,root,bean,definition,original,super,original,this,decorated,definition,original,decorated,definition,this,allow,caching,original,allow,caching,this,target,type,original,target,type,this,is,factory,method,unique,original,is,factory,method,unique
RootBeanDefinition -> public RootBeanDefinition(RootBeanDefinition original);1382826936;Create a new RootBeanDefinition as deep copy of the given_bean definition._@param original the original bean definition to copy from;public RootBeanDefinition(RootBeanDefinition original) {_		super(original)__		this.decoratedDefinition = original.decoratedDefinition__		this.allowCaching = original.allowCaching__		this.targetType = original.targetType__		this.isFactoryMethodUnique = original.isFactoryMethodUnique__	};create,a,new,root,bean,definition,as,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;public,root,bean,definition,root,bean,definition,original,super,original,this,decorated,definition,original,decorated,definition,this,allow,caching,original,allow,caching,this,target,type,original,target,type,this,is,factory,method,unique,original,is,factory,method,unique
RootBeanDefinition -> public RootBeanDefinition(RootBeanDefinition original);1390396833;Create a new RootBeanDefinition as deep copy of the given_bean definition._@param original the original bean definition to copy from;public RootBeanDefinition(RootBeanDefinition original) {_		super(original)__		this.allowCaching = original.allowCaching__		this.decoratedDefinition = original.decoratedDefinition__		this.targetType = original.targetType__		this.isFactoryMethodUnique = original.isFactoryMethodUnique__	};create,a,new,root,bean,definition,as,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;public,root,bean,definition,root,bean,definition,original,super,original,this,allow,caching,original,allow,caching,this,decorated,definition,original,decorated,definition,this,target,type,original,target,type,this,is,factory,method,unique,original,is,factory,method,unique
RootBeanDefinition -> public RootBeanDefinition(RootBeanDefinition original);1467730834;Create a new RootBeanDefinition as deep copy of the given_bean definition._@param original the original bean definition to copy from;public RootBeanDefinition(RootBeanDefinition original) {_		super(original)__		this.allowCaching = original.allowCaching__		this.decoratedDefinition = original.decoratedDefinition__		this.targetType = original.targetType__		this.isFactoryMethodUnique = original.isFactoryMethodUnique__	};create,a,new,root,bean,definition,as,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;public,root,bean,definition,root,bean,definition,original,super,original,this,allow,caching,original,allow,caching,this,decorated,definition,original,decorated,definition,this,target,type,original,target,type,this,is,factory,method,unique,original,is,factory,method,unique
RootBeanDefinition -> public RootBeanDefinition(RootBeanDefinition original);1467744603;Create a new RootBeanDefinition as deep copy of the given_bean definition._@param original the original bean definition to copy from;public RootBeanDefinition(RootBeanDefinition original) {_		super(original)__		this.allowCaching = original.allowCaching__		this.decoratedDefinition = original.decoratedDefinition__		this.targetType = original.targetType__		this.isFactoryMethodUnique = original.isFactoryMethodUnique__	};create,a,new,root,bean,definition,as,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;public,root,bean,definition,root,bean,definition,original,super,original,this,allow,caching,original,allow,caching,this,decorated,definition,original,decorated,definition,this,target,type,original,target,type,this,is,factory,method,unique,original,is,factory,method,unique
RootBeanDefinition -> public RootBeanDefinition(RootBeanDefinition original);1469367243;Create a new RootBeanDefinition as deep copy of the given_bean definition._@param original the original bean definition to copy from;public RootBeanDefinition(RootBeanDefinition original) {_		super(original)__		this.allowCaching = original.allowCaching__		this.decoratedDefinition = original.decoratedDefinition__		this.targetType = original.targetType__		this.isFactoryMethodUnique = original.isFactoryMethodUnique__	};create,a,new,root,bean,definition,as,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;public,root,bean,definition,root,bean,definition,original,super,original,this,allow,caching,original,allow,caching,this,decorated,definition,original,decorated,definition,this,target,type,original,target,type,this,is,factory,method,unique,original,is,factory,method,unique
RootBeanDefinition -> public RootBeanDefinition(RootBeanDefinition original);1471445956;Create a new RootBeanDefinition as deep copy of the given_bean definition._@param original the original bean definition to copy from;public RootBeanDefinition(RootBeanDefinition original) {_		super(original)__		this.decoratedDefinition = original.decoratedDefinition__		this.allowCaching = original.allowCaching__		this.targetType = original.targetType__		this.isFactoryMethodUnique = original.isFactoryMethodUnique__	};create,a,new,root,bean,definition,as,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;public,root,bean,definition,root,bean,definition,original,super,original,this,decorated,definition,original,decorated,definition,this,allow,caching,original,allow,caching,this,target,type,original,target,type,this,is,factory,method,unique,original,is,factory,method,unique
RootBeanDefinition -> public RootBeanDefinition(RootBeanDefinition original);1474010431;Create a new RootBeanDefinition as deep copy of the given_bean definition._@param original the original bean definition to copy from;public RootBeanDefinition(RootBeanDefinition original) {_		super(original)__		this.decoratedDefinition = original.decoratedDefinition__		this.allowCaching = original.allowCaching__		this.targetType = original.targetType__		this.isFactoryMethodUnique = original.isFactoryMethodUnique__		this.qualifiedElement = original.qualifiedElement__	};create,a,new,root,bean,definition,as,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;public,root,bean,definition,root,bean,definition,original,super,original,this,decorated,definition,original,decorated,definition,this,allow,caching,original,allow,caching,this,target,type,original,target,type,this,is,factory,method,unique,original,is,factory,method,unique,this,qualified,element,original,qualified,element
RootBeanDefinition -> public RootBeanDefinition(RootBeanDefinition original);1474014845;Create a new RootBeanDefinition as deep copy of the given_bean definition._@param original the original bean definition to copy from;public RootBeanDefinition(RootBeanDefinition original) {_		super(original)__		this.decoratedDefinition = original.decoratedDefinition__		this.qualifiedElement = original.qualifiedElement__		this.allowCaching = original.allowCaching__		this.isFactoryMethodUnique = original.isFactoryMethodUnique__		this.targetType = original.targetType__	};create,a,new,root,bean,definition,as,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;public,root,bean,definition,root,bean,definition,original,super,original,this,decorated,definition,original,decorated,definition,this,qualified,element,original,qualified,element,this,allow,caching,original,allow,caching,this,is,factory,method,unique,original,is,factory,method,unique,this,target,type,original,target,type
RootBeanDefinition -> public RootBeanDefinition(RootBeanDefinition original);1482012648;Create a new RootBeanDefinition as deep copy of the given_bean definition._@param original the original bean definition to copy from;public RootBeanDefinition(RootBeanDefinition original) {_		super(original)__		this.decoratedDefinition = original.decoratedDefinition__		this.qualifiedElement = original.qualifiedElement__		this.allowCaching = original.allowCaching__		this.isFactoryMethodUnique = original.isFactoryMethodUnique__		this.targetType = original.targetType__	};create,a,new,root,bean,definition,as,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;public,root,bean,definition,root,bean,definition,original,super,original,this,decorated,definition,original,decorated,definition,this,qualified,element,original,qualified,element,this,allow,caching,original,allow,caching,this,is,factory,method,unique,original,is,factory,method,unique,this,target,type,original,target,type
RootBeanDefinition -> public RootBeanDefinition(RootBeanDefinition original);1482091545;Create a new RootBeanDefinition as deep copy of the given_bean definition._@param original the original bean definition to copy from;public RootBeanDefinition(RootBeanDefinition original) {_		super(original)__		this.decoratedDefinition = original.decoratedDefinition__		this.qualifiedElement = original.qualifiedElement__		this.allowCaching = original.allowCaching__		this.isFactoryMethodUnique = original.isFactoryMethodUnique__		this.targetType = original.targetType__	};create,a,new,root,bean,definition,as,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;public,root,bean,definition,root,bean,definition,original,super,original,this,decorated,definition,original,decorated,definition,this,qualified,element,original,qualified,element,this,allow,caching,original,allow,caching,this,is,factory,method,unique,original,is,factory,method,unique,this,target,type,original,target,type
RootBeanDefinition -> public RootBeanDefinition(RootBeanDefinition original);1483093818;Create a new RootBeanDefinition as deep copy of the given_bean definition._@param original the original bean definition to copy from;public RootBeanDefinition(RootBeanDefinition original) {_		super(original)__		this.decoratedDefinition = original.decoratedDefinition__		this.qualifiedElement = original.qualifiedElement__		this.allowCaching = original.allowCaching__		this.isFactoryMethodUnique = original.isFactoryMethodUnique__		this.targetType = original.targetType__	};create,a,new,root,bean,definition,as,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;public,root,bean,definition,root,bean,definition,original,super,original,this,decorated,definition,original,decorated,definition,this,qualified,element,original,qualified,element,this,allow,caching,original,allow,caching,this,is,factory,method,unique,original,is,factory,method,unique,this,target,type,original,target,type
RootBeanDefinition -> public RootBeanDefinition(RootBeanDefinition original);1495868221;Create a new RootBeanDefinition as deep copy of the given_bean definition._@param original the original bean definition to copy from;public RootBeanDefinition(RootBeanDefinition original) {_		super(original)__		this.decoratedDefinition = original.decoratedDefinition__		this.qualifiedElement = original.qualifiedElement__		this.allowCaching = original.allowCaching__		this.isFactoryMethodUnique = original.isFactoryMethodUnique__		this.targetType = original.targetType__	};create,a,new,root,bean,definition,as,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;public,root,bean,definition,root,bean,definition,original,super,original,this,decorated,definition,original,decorated,definition,this,qualified,element,original,qualified,element,this,allow,caching,original,allow,caching,this,is,factory,method,unique,original,is,factory,method,unique,this,target,type,original,target,type
RootBeanDefinition -> public RootBeanDefinition(RootBeanDefinition original);1496242568;Create a new RootBeanDefinition as deep copy of the given_bean definition._@param original the original bean definition to copy from;public RootBeanDefinition(RootBeanDefinition original) {_		super(original)__		this.decoratedDefinition = original.decoratedDefinition__		this.qualifiedElement = original.qualifiedElement__		this.allowCaching = original.allowCaching__		this.isFactoryMethodUnique = original.isFactoryMethodUnique__		this.targetType = original.targetType__	};create,a,new,root,bean,definition,as,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;public,root,bean,definition,root,bean,definition,original,super,original,this,decorated,definition,original,decorated,definition,this,qualified,element,original,qualified,element,this,allow,caching,original,allow,caching,this,is,factory,method,unique,original,is,factory,method,unique,this,target,type,original,target,type
RootBeanDefinition -> public RootBeanDefinition(RootBeanDefinition original);1496243689;Create a new RootBeanDefinition as deep copy of the given_bean definition._@param original the original bean definition to copy from;public RootBeanDefinition(RootBeanDefinition original) {_		super(original)__		this.decoratedDefinition = original.decoratedDefinition__		this.qualifiedElement = original.qualifiedElement__		this.allowCaching = original.allowCaching__		this.isFactoryMethodUnique = original.isFactoryMethodUnique__		this.targetType = original.targetType__	};create,a,new,root,bean,definition,as,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;public,root,bean,definition,root,bean,definition,original,super,original,this,decorated,definition,original,decorated,definition,this,qualified,element,original,qualified,element,this,allow,caching,original,allow,caching,this,is,factory,method,unique,original,is,factory,method,unique,this,target,type,original,target,type
RootBeanDefinition -> public RootBeanDefinition(RootBeanDefinition original);1496259743;Create a new RootBeanDefinition as deep copy of the given_bean definition._@param original the original bean definition to copy from;public RootBeanDefinition(RootBeanDefinition original) {_		super(original)__		this.decoratedDefinition = original.decoratedDefinition__		this.qualifiedElement = original.qualifiedElement__		this.allowCaching = original.allowCaching__		this.isFactoryMethodUnique = original.isFactoryMethodUnique__		this.targetType = original.targetType__	};create,a,new,root,bean,definition,as,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;public,root,bean,definition,root,bean,definition,original,super,original,this,decorated,definition,original,decorated,definition,this,qualified,element,original,qualified,element,this,allow,caching,original,allow,caching,this,is,factory,method,unique,original,is,factory,method,unique,this,target,type,original,target,type
RootBeanDefinition -> public RootBeanDefinition(RootBeanDefinition original);1496837955;Create a new RootBeanDefinition as deep copy of the given_bean definition._@param original the original bean definition to copy from;public RootBeanDefinition(RootBeanDefinition original) {_		super(original)__		this.decoratedDefinition = original.decoratedDefinition__		this.qualifiedElement = original.qualifiedElement__		this.allowCaching = original.allowCaching__		this.isFactoryMethodUnique = original.isFactoryMethodUnique__		this.targetType = original.targetType__	};create,a,new,root,bean,definition,as,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;public,root,bean,definition,root,bean,definition,original,super,original,this,decorated,definition,original,decorated,definition,this,qualified,element,original,qualified,element,this,allow,caching,original,allow,caching,this,is,factory,method,unique,original,is,factory,method,unique,this,target,type,original,target,type
RootBeanDefinition -> public RootBeanDefinition(RootBeanDefinition original);1498780456;Create a new RootBeanDefinition as deep copy of the given_bean definition._@param original the original bean definition to copy from;public RootBeanDefinition(RootBeanDefinition original) {_		super(original)__		this.decoratedDefinition = original.decoratedDefinition__		this.qualifiedElement = original.qualifiedElement__		this.allowCaching = original.allowCaching__		this.isFactoryMethodUnique = original.isFactoryMethodUnique__		this.targetType = original.targetType__	};create,a,new,root,bean,definition,as,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;public,root,bean,definition,root,bean,definition,original,super,original,this,decorated,definition,original,decorated,definition,this,qualified,element,original,qualified,element,this,allow,caching,original,allow,caching,this,is,factory,method,unique,original,is,factory,method,unique,this,target,type,original,target,type
RootBeanDefinition -> public RootBeanDefinition(RootBeanDefinition original);1500448076;Create a new RootBeanDefinition as deep copy of the given_bean definition._@param original the original bean definition to copy from;public RootBeanDefinition(RootBeanDefinition original) {_		super(original)__		this.decoratedDefinition = original.decoratedDefinition__		this.qualifiedElement = original.qualifiedElement__		this.allowCaching = original.allowCaching__		this.isFactoryMethodUnique = original.isFactoryMethodUnique__		this.targetType = original.targetType__	};create,a,new,root,bean,definition,as,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;public,root,bean,definition,root,bean,definition,original,super,original,this,decorated,definition,original,decorated,definition,this,qualified,element,original,qualified,element,this,allow,caching,original,allow,caching,this,is,factory,method,unique,original,is,factory,method,unique,this,target,type,original,target,type
RootBeanDefinition -> public RootBeanDefinition(RootBeanDefinition original);1510606271;Create a new RootBeanDefinition as deep copy of the given_bean definition._@param original the original bean definition to copy from;public RootBeanDefinition(RootBeanDefinition original) {_		super(original)__		this.decoratedDefinition = original.decoratedDefinition__		this.qualifiedElement = original.qualifiedElement__		this.allowCaching = original.allowCaching__		this.isFactoryMethodUnique = original.isFactoryMethodUnique__		this.targetType = original.targetType__	};create,a,new,root,bean,definition,as,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;public,root,bean,definition,root,bean,definition,original,super,original,this,decorated,definition,original,decorated,definition,this,qualified,element,original,qualified,element,this,allow,caching,original,allow,caching,this,is,factory,method,unique,original,is,factory,method,unique,this,target,type,original,target,type
RootBeanDefinition -> public RootBeanDefinition(RootBeanDefinition original);1530174524;Create a new RootBeanDefinition as deep copy of the given_bean definition._@param original the original bean definition to copy from;public RootBeanDefinition(RootBeanDefinition original) {_		super(original)__		this.decoratedDefinition = original.decoratedDefinition__		this.qualifiedElement = original.qualifiedElement__		this.allowCaching = original.allowCaching__		this.isFactoryMethodUnique = original.isFactoryMethodUnique__		this.targetType = original.targetType__	};create,a,new,root,bean,definition,as,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;public,root,bean,definition,root,bean,definition,original,super,original,this,decorated,definition,original,decorated,definition,this,qualified,element,original,qualified,element,this,allow,caching,original,allow,caching,this,is,factory,method,unique,original,is,factory,method,unique,this,target,type,original,target,type
RootBeanDefinition -> public RootBeanDefinition(RootBeanDefinition original);1531243692;Create a new RootBeanDefinition as deep copy of the given_bean definition._@param original the original bean definition to copy from;public RootBeanDefinition(RootBeanDefinition original) {_		super(original)__		this.decoratedDefinition = original.decoratedDefinition__		this.qualifiedElement = original.qualifiedElement__		this.allowCaching = original.allowCaching__		this.isFactoryMethodUnique = original.isFactoryMethodUnique__		this.targetType = original.targetType__	};create,a,new,root,bean,definition,as,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;public,root,bean,definition,root,bean,definition,original,super,original,this,decorated,definition,original,decorated,definition,this,qualified,element,original,qualified,element,this,allow,caching,original,allow,caching,this,is,factory,method,unique,original,is,factory,method,unique,this,target,type,original,target,type
RootBeanDefinition -> public RootBeanDefinition(RootBeanDefinition original);1537388383;Create a new RootBeanDefinition as deep copy of the given_bean definition._@param original the original bean definition to copy from;public RootBeanDefinition(RootBeanDefinition original) {_		super(original)__		this.decoratedDefinition = original.decoratedDefinition__		this.qualifiedElement = original.qualifiedElement__		this.allowCaching = original.allowCaching__		this.isFactoryMethodUnique = original.isFactoryMethodUnique__		this.targetType = original.targetType__	};create,a,new,root,bean,definition,as,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;public,root,bean,definition,root,bean,definition,original,super,original,this,decorated,definition,original,decorated,definition,this,qualified,element,original,qualified,element,this,allow,caching,original,allow,caching,this,is,factory,method,unique,original,is,factory,method,unique,this,target,type,original,target,type
RootBeanDefinition -> public RootBeanDefinition(RootBeanDefinition original);1539377630;Create a new RootBeanDefinition as deep copy of the given_bean definition._@param original the original bean definition to copy from;public RootBeanDefinition(RootBeanDefinition original) {_		super(original)__		this.decoratedDefinition = original.decoratedDefinition__		this.qualifiedElement = original.qualifiedElement__		this.allowCaching = original.allowCaching__		this.isFactoryMethodUnique = original.isFactoryMethodUnique__		this.targetType = original.targetType__	};create,a,new,root,bean,definition,as,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;public,root,bean,definition,root,bean,definition,original,super,original,this,decorated,definition,original,decorated,definition,this,qualified,element,original,qualified,element,this,allow,caching,original,allow,caching,this,is,factory,method,unique,original,is,factory,method,unique,this,target,type,original,target,type
RootBeanDefinition -> public RootBeanDefinition(@Nullable Class<?> beanClass, ConstructorArgumentValues cargs, @Nullable MutablePropertyValues pvs);1496259743;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._@param beanClass the class of the bean to instantiate_@param cargs the constructor argument values to apply_@param pvs the property values to apply;public RootBeanDefinition(@Nullable Class<?> beanClass, ConstructorArgumentValues cargs, @Nullable MutablePropertyValues pvs) {_		super(cargs, pvs)__		setBeanClass(beanClass)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,param,bean,class,the,class,of,the,bean,to,instantiate,param,cargs,the,constructor,argument,values,to,apply,param,pvs,the,property,values,to,apply;public,root,bean,definition,nullable,class,bean,class,constructor,argument,values,cargs,nullable,mutable,property,values,pvs,super,cargs,pvs,set,bean,class,bean,class
RootBeanDefinition -> public RootBeanDefinition(@Nullable Class<?> beanClass, ConstructorArgumentValues cargs, @Nullable MutablePropertyValues pvs);1496837955;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._@param beanClass the class of the bean to instantiate_@param cargs the constructor argument values to apply_@param pvs the property values to apply;public RootBeanDefinition(@Nullable Class<?> beanClass, ConstructorArgumentValues cargs, @Nullable MutablePropertyValues pvs) {_		super(cargs, pvs)__		setBeanClass(beanClass)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,param,bean,class,the,class,of,the,bean,to,instantiate,param,cargs,the,constructor,argument,values,to,apply,param,pvs,the,property,values,to,apply;public,root,bean,definition,nullable,class,bean,class,constructor,argument,values,cargs,nullable,mutable,property,values,pvs,super,cargs,pvs,set,bean,class,bean,class
RootBeanDefinition -> public RootBeanDefinition(@Nullable Class<?> beanClass, ConstructorArgumentValues cargs, @Nullable MutablePropertyValues pvs);1498780456;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._@param beanClass the class of the bean to instantiate_@param cargs the constructor argument values to apply_@param pvs the property values to apply;public RootBeanDefinition(@Nullable Class<?> beanClass, ConstructorArgumentValues cargs, @Nullable MutablePropertyValues pvs) {_		super(cargs, pvs)__		setBeanClass(beanClass)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,param,bean,class,the,class,of,the,bean,to,instantiate,param,cargs,the,constructor,argument,values,to,apply,param,pvs,the,property,values,to,apply;public,root,bean,definition,nullable,class,bean,class,constructor,argument,values,cargs,nullable,mutable,property,values,pvs,super,cargs,pvs,set,bean,class,bean,class
RootBeanDefinition -> public RootBeanDefinition(@Nullable Class<?> beanClass, ConstructorArgumentValues cargs, @Nullable MutablePropertyValues pvs);1500448076;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._@param beanClass the class of the bean to instantiate_@param cargs the constructor argument values to apply_@param pvs the property values to apply;public RootBeanDefinition(@Nullable Class<?> beanClass, ConstructorArgumentValues cargs, @Nullable MutablePropertyValues pvs) {_		super(cargs, pvs)__		setBeanClass(beanClass)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,param,bean,class,the,class,of,the,bean,to,instantiate,param,cargs,the,constructor,argument,values,to,apply,param,pvs,the,property,values,to,apply;public,root,bean,definition,nullable,class,bean,class,constructor,argument,values,cargs,nullable,mutable,property,values,pvs,super,cargs,pvs,set,bean,class,bean,class
RootBeanDefinition -> public RootBeanDefinition(Class beanClass, int autowireMode, boolean dependencyCheck);1328020251;Create a new RootBeanDefinition for a singleton,_using the given autowire mode._@param beanClass the class of the bean to instantiate_@param autowireMode by name or type, using the constants in this interface_@param dependencyCheck whether to perform a dependency check for objects_(not applicable to autowiring a constructor, thus ignored there);public RootBeanDefinition(Class beanClass, int autowireMode, boolean dependencyCheck) {_		super()__		setBeanClass(beanClass)__		setAutowireMode(autowireMode)__		if (dependencyCheck && getResolvedAutowireMode() != AUTOWIRE_CONSTRUCTOR) {_			setDependencyCheck(RootBeanDefinition.DEPENDENCY_CHECK_OBJECTS)__		}_	};create,a,new,root,bean,definition,for,a,singleton,using,the,given,autowire,mode,param,bean,class,the,class,of,the,bean,to,instantiate,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,param,dependency,check,whether,to,perform,a,dependency,check,for,objects,not,applicable,to,autowiring,a,constructor,thus,ignored,there;public,root,bean,definition,class,bean,class,int,autowire,mode,boolean,dependency,check,super,set,bean,class,bean,class,set,autowire,mode,autowire,mode,if,dependency,check,get,resolved,autowire,mode,set,dependency,check,root,bean,definition
RootBeanDefinition -> public RootBeanDefinition(Class beanClass, int autowireMode, boolean dependencyCheck);1352412675;Create a new RootBeanDefinition for a singleton,_using the given autowire mode._@param beanClass the class of the bean to instantiate_@param autowireMode by name or type, using the constants in this interface_@param dependencyCheck whether to perform a dependency check for objects_(not applicable to autowiring a constructor, thus ignored there);public RootBeanDefinition(Class beanClass, int autowireMode, boolean dependencyCheck) {_		super()__		setBeanClass(beanClass)__		setAutowireMode(autowireMode)__		if (dependencyCheck && getResolvedAutowireMode() != AUTOWIRE_CONSTRUCTOR) {_			setDependencyCheck(RootBeanDefinition.DEPENDENCY_CHECK_OBJECTS)__		}_	};create,a,new,root,bean,definition,for,a,singleton,using,the,given,autowire,mode,param,bean,class,the,class,of,the,bean,to,instantiate,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,param,dependency,check,whether,to,perform,a,dependency,check,for,objects,not,applicable,to,autowiring,a,constructor,thus,ignored,there;public,root,bean,definition,class,bean,class,int,autowire,mode,boolean,dependency,check,super,set,bean,class,bean,class,set,autowire,mode,autowire,mode,if,dependency,check,get,resolved,autowire,mode,set,dependency,check,root,bean,definition
RootBeanDefinition -> public RootBeanDefinition(Class beanClass, int autowireMode, boolean dependencyCheck);1355352386;Create a new RootBeanDefinition for a singleton,_using the given autowire mode._@param beanClass the class of the bean to instantiate_@param autowireMode by name or type, using the constants in this interface_@param dependencyCheck whether to perform a dependency check for objects_(not applicable to autowiring a constructor, thus ignored there);public RootBeanDefinition(Class beanClass, int autowireMode, boolean dependencyCheck) {_		super()__		setBeanClass(beanClass)__		setAutowireMode(autowireMode)__		if (dependencyCheck && getResolvedAutowireMode() != AUTOWIRE_CONSTRUCTOR) {_			setDependencyCheck(RootBeanDefinition.DEPENDENCY_CHECK_OBJECTS)__		}_	};create,a,new,root,bean,definition,for,a,singleton,using,the,given,autowire,mode,param,bean,class,the,class,of,the,bean,to,instantiate,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,param,dependency,check,whether,to,perform,a,dependency,check,for,objects,not,applicable,to,autowiring,a,constructor,thus,ignored,there;public,root,bean,definition,class,bean,class,int,autowire,mode,boolean,dependency,check,super,set,bean,class,bean,class,set,autowire,mode,autowire,mode,if,dependency,check,get,resolved,autowire,mode,set,dependency,check,root,bean,definition
RootBeanDefinition -> public RootBeanDefinition(Class beanClass, int autowireMode, boolean dependencyCheck);1356735495;Create a new RootBeanDefinition for a singleton,_using the given autowire mode._@param beanClass the class of the bean to instantiate_@param autowireMode by name or type, using the constants in this interface_@param dependencyCheck whether to perform a dependency check for objects_(not applicable to autowiring a constructor, thus ignored there);public RootBeanDefinition(Class beanClass, int autowireMode, boolean dependencyCheck) {_		super()__		setBeanClass(beanClass)__		setAutowireMode(autowireMode)__		if (dependencyCheck && getResolvedAutowireMode() != AUTOWIRE_CONSTRUCTOR) {_			setDependencyCheck(RootBeanDefinition.DEPENDENCY_CHECK_OBJECTS)__		}_	};create,a,new,root,bean,definition,for,a,singleton,using,the,given,autowire,mode,param,bean,class,the,class,of,the,bean,to,instantiate,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,param,dependency,check,whether,to,perform,a,dependency,check,for,objects,not,applicable,to,autowiring,a,constructor,thus,ignored,there;public,root,bean,definition,class,bean,class,int,autowire,mode,boolean,dependency,check,super,set,bean,class,bean,class,set,autowire,mode,autowire,mode,if,dependency,check,get,resolved,autowire,mode,set,dependency,check,root,bean,definition
RootBeanDefinition -> public RootBeanDefinition(Class beanClass, int autowireMode, boolean dependencyCheck);1357119239;Create a new RootBeanDefinition for a singleton,_using the given autowire mode._@param beanClass the class of the bean to instantiate_@param autowireMode by name or type, using the constants in this interface_@param dependencyCheck whether to perform a dependency check for objects_(not applicable to autowiring a constructor, thus ignored there);public RootBeanDefinition(Class beanClass, int autowireMode, boolean dependencyCheck) {_		super()__		setBeanClass(beanClass)__		setAutowireMode(autowireMode)__		if (dependencyCheck && getResolvedAutowireMode() != AUTOWIRE_CONSTRUCTOR) {_			setDependencyCheck(RootBeanDefinition.DEPENDENCY_CHECK_OBJECTS)__		}_	};create,a,new,root,bean,definition,for,a,singleton,using,the,given,autowire,mode,param,bean,class,the,class,of,the,bean,to,instantiate,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,param,dependency,check,whether,to,perform,a,dependency,check,for,objects,not,applicable,to,autowiring,a,constructor,thus,ignored,there;public,root,bean,definition,class,bean,class,int,autowire,mode,boolean,dependency,check,super,set,bean,class,bean,class,set,autowire,mode,autowire,mode,if,dependency,check,get,resolved,autowire,mode,set,dependency,check,root,bean,definition
RootBeanDefinition -> public RootBeanDefinition(Class beanClass, int autowireMode, boolean dependencyCheck);1362408075;Create a new RootBeanDefinition for a singleton,_using the given autowire mode._@param beanClass the class of the bean to instantiate_@param autowireMode by name or type, using the constants in this interface_@param dependencyCheck whether to perform a dependency check for objects_(not applicable to autowiring a constructor, thus ignored there);public RootBeanDefinition(Class beanClass, int autowireMode, boolean dependencyCheck) {_		super()__		setBeanClass(beanClass)__		setAutowireMode(autowireMode)__		if (dependencyCheck && getResolvedAutowireMode() != AUTOWIRE_CONSTRUCTOR) {_			setDependencyCheck(RootBeanDefinition.DEPENDENCY_CHECK_OBJECTS)__		}_	};create,a,new,root,bean,definition,for,a,singleton,using,the,given,autowire,mode,param,bean,class,the,class,of,the,bean,to,instantiate,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,param,dependency,check,whether,to,perform,a,dependency,check,for,objects,not,applicable,to,autowiring,a,constructor,thus,ignored,there;public,root,bean,definition,class,bean,class,int,autowire,mode,boolean,dependency,check,super,set,bean,class,bean,class,set,autowire,mode,autowire,mode,if,dependency,check,get,resolved,autowire,mode,set,dependency,check,root,bean,definition
RootBeanDefinition -> public RootBeanDefinition(Class beanClass, int autowireMode, boolean dependencyCheck);1364505266;Create a new RootBeanDefinition for a singleton,_using the given autowire mode._@param beanClass the class of the bean to instantiate_@param autowireMode by name or type, using the constants in this interface_@param dependencyCheck whether to perform a dependency check for objects_(not applicable to autowiring a constructor, thus ignored there);public RootBeanDefinition(Class beanClass, int autowireMode, boolean dependencyCheck) {_		super()__		setBeanClass(beanClass)__		setAutowireMode(autowireMode)__		if (dependencyCheck && getResolvedAutowireMode() != AUTOWIRE_CONSTRUCTOR) {_			setDependencyCheck(RootBeanDefinition.DEPENDENCY_CHECK_OBJECTS)__		}_	};create,a,new,root,bean,definition,for,a,singleton,using,the,given,autowire,mode,param,bean,class,the,class,of,the,bean,to,instantiate,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,param,dependency,check,whether,to,perform,a,dependency,check,for,objects,not,applicable,to,autowiring,a,constructor,thus,ignored,there;public,root,bean,definition,class,bean,class,int,autowire,mode,boolean,dependency,check,super,set,bean,class,bean,class,set,autowire,mode,autowire,mode,if,dependency,check,get,resolved,autowire,mode,set,dependency,check,root,bean,definition
RootBeanDefinition -> public RootBeanDefinition(Class beanClass, int autowireMode, boolean dependencyCheck);1367943112;Create a new RootBeanDefinition for a singleton,_using the given autowire mode._@param beanClass the class of the bean to instantiate_@param autowireMode by name or type, using the constants in this interface_@param dependencyCheck whether to perform a dependency check for objects_(not applicable to autowiring a constructor, thus ignored there);public RootBeanDefinition(Class beanClass, int autowireMode, boolean dependencyCheck) {_		super()__		setBeanClass(beanClass)__		setAutowireMode(autowireMode)__		if (dependencyCheck && getResolvedAutowireMode() != AUTOWIRE_CONSTRUCTOR) {_			setDependencyCheck(RootBeanDefinition.DEPENDENCY_CHECK_OBJECTS)__		}_	};create,a,new,root,bean,definition,for,a,singleton,using,the,given,autowire,mode,param,bean,class,the,class,of,the,bean,to,instantiate,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,param,dependency,check,whether,to,perform,a,dependency,check,for,objects,not,applicable,to,autowiring,a,constructor,thus,ignored,there;public,root,bean,definition,class,bean,class,int,autowire,mode,boolean,dependency,check,super,set,bean,class,bean,class,set,autowire,mode,autowire,mode,if,dependency,check,get,resolved,autowire,mode,set,dependency,check,root,bean,definition
RootBeanDefinition -> public RootBeanDefinition(Class beanClass, int autowireMode, boolean dependencyCheck);1368482696;Create a new RootBeanDefinition for a singleton,_using the given autowire mode._@param beanClass the class of the bean to instantiate_@param autowireMode by name or type, using the constants in this interface_@param dependencyCheck whether to perform a dependency check for objects_(not applicable to autowiring a constructor, thus ignored there);public RootBeanDefinition(Class beanClass, int autowireMode, boolean dependencyCheck) {_		super()__		setBeanClass(beanClass)__		setAutowireMode(autowireMode)__		if (dependencyCheck && getResolvedAutowireMode() != AUTOWIRE_CONSTRUCTOR) {_			setDependencyCheck(RootBeanDefinition.DEPENDENCY_CHECK_OBJECTS)__		}_	};create,a,new,root,bean,definition,for,a,singleton,using,the,given,autowire,mode,param,bean,class,the,class,of,the,bean,to,instantiate,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,param,dependency,check,whether,to,perform,a,dependency,check,for,objects,not,applicable,to,autowiring,a,constructor,thus,ignored,there;public,root,bean,definition,class,bean,class,int,autowire,mode,boolean,dependency,check,super,set,bean,class,bean,class,set,autowire,mode,autowire,mode,if,dependency,check,get,resolved,autowire,mode,set,dependency,check,root,bean,definition
RootBeanDefinition -> public RootBeanDefinition(@Nullable Class<?> beanClass);1496243689;Create a new RootBeanDefinition for a singleton._@param beanClass the class of the bean to instantiate_@see #setBeanClass;public RootBeanDefinition(@Nullable Class<?> beanClass) {_		super()__		setBeanClass(beanClass)__	};create,a,new,root,bean,definition,for,a,singleton,param,bean,class,the,class,of,the,bean,to,instantiate,see,set,bean,class;public,root,bean,definition,nullable,class,bean,class,super,set,bean,class,bean,class
RootBeanDefinition -> public RootBeanDefinition(@Nullable Class<?> beanClass);1496259743;Create a new RootBeanDefinition for a singleton._@param beanClass the class of the bean to instantiate_@see #setBeanClass;public RootBeanDefinition(@Nullable Class<?> beanClass) {_		super()__		setBeanClass(beanClass)__	};create,a,new,root,bean,definition,for,a,singleton,param,bean,class,the,class,of,the,bean,to,instantiate,see,set,bean,class;public,root,bean,definition,nullable,class,bean,class,super,set,bean,class,bean,class
RootBeanDefinition -> public RootBeanDefinition(@Nullable Class<?> beanClass);1496837955;Create a new RootBeanDefinition for a singleton._@param beanClass the class of the bean to instantiate_@see #setBeanClass;public RootBeanDefinition(@Nullable Class<?> beanClass) {_		super()__		setBeanClass(beanClass)__	};create,a,new,root,bean,definition,for,a,singleton,param,bean,class,the,class,of,the,bean,to,instantiate,see,set,bean,class;public,root,bean,definition,nullable,class,bean,class,super,set,bean,class,bean,class
RootBeanDefinition -> public RootBeanDefinition(@Nullable Class<?> beanClass);1498780456;Create a new RootBeanDefinition for a singleton._@param beanClass the class of the bean to instantiate_@see #setBeanClass;public RootBeanDefinition(@Nullable Class<?> beanClass) {_		super()__		setBeanClass(beanClass)__	};create,a,new,root,bean,definition,for,a,singleton,param,bean,class,the,class,of,the,bean,to,instantiate,see,set,bean,class;public,root,bean,definition,nullable,class,bean,class,super,set,bean,class,bean,class
RootBeanDefinition -> public RootBeanDefinition(@Nullable Class<?> beanClass);1500448076;Create a new RootBeanDefinition for a singleton._@param beanClass the class of the bean to instantiate_@see #setBeanClass;public RootBeanDefinition(@Nullable Class<?> beanClass) {_		super()__		setBeanClass(beanClass)__	};create,a,new,root,bean,definition,for,a,singleton,param,bean,class,the,class,of,the,bean,to,instantiate,see,set,bean,class;public,root,bean,definition,nullable,class,bean,class,super,set,bean,class,bean,class
RootBeanDefinition -> public RootBeanDefinition(@Nullable Class<?> beanClass);1510606271;Create a new RootBeanDefinition for a singleton._@param beanClass the class of the bean to instantiate_@see #setBeanClass;public RootBeanDefinition(@Nullable Class<?> beanClass) {_		super()__		setBeanClass(beanClass)__	};create,a,new,root,bean,definition,for,a,singleton,param,bean,class,the,class,of,the,bean,to,instantiate,see,set,bean,class;public,root,bean,definition,nullable,class,bean,class,super,set,bean,class,bean,class
RootBeanDefinition -> public RootBeanDefinition(@Nullable Class<?> beanClass);1530174524;Create a new RootBeanDefinition for a singleton._@param beanClass the class of the bean to instantiate_@see #setBeanClass;public RootBeanDefinition(@Nullable Class<?> beanClass) {_		super()__		setBeanClass(beanClass)__	};create,a,new,root,bean,definition,for,a,singleton,param,bean,class,the,class,of,the,bean,to,instantiate,see,set,bean,class;public,root,bean,definition,nullable,class,bean,class,super,set,bean,class,bean,class
RootBeanDefinition -> public RootBeanDefinition(@Nullable Class<?> beanClass);1531243692;Create a new RootBeanDefinition for a singleton._@param beanClass the class of the bean to instantiate_@see #setBeanClass;public RootBeanDefinition(@Nullable Class<?> beanClass) {_		super()__		setBeanClass(beanClass)__	};create,a,new,root,bean,definition,for,a,singleton,param,bean,class,the,class,of,the,bean,to,instantiate,see,set,bean,class;public,root,bean,definition,nullable,class,bean,class,super,set,bean,class,bean,class
RootBeanDefinition -> public RootBeanDefinition(@Nullable Class<?> beanClass);1537388383;Create a new RootBeanDefinition for a singleton._@param beanClass the class of the bean to instantiate_@see #setBeanClass;public RootBeanDefinition(@Nullable Class<?> beanClass) {_		super()__		setBeanClass(beanClass)__	};create,a,new,root,bean,definition,for,a,singleton,param,bean,class,the,class,of,the,bean,to,instantiate,see,set,bean,class;public,root,bean,definition,nullable,class,bean,class,super,set,bean,class,bean,class
RootBeanDefinition -> public RootBeanDefinition(@Nullable Class<?> beanClass);1539377630;Create a new RootBeanDefinition for a singleton._@param beanClass the class of the bean to instantiate_@see #setBeanClass;public RootBeanDefinition(@Nullable Class<?> beanClass) {_		super()__		setBeanClass(beanClass)__	};create,a,new,root,bean,definition,for,a,singleton,param,bean,class,the,class,of,the,bean,to,instantiate,see,set,bean,class;public,root,bean,definition,nullable,class,bean,class,super,set,bean,class,bean,class
RootBeanDefinition -> public RootBeanDefinition(@Nullable Class<?> beanClass, int autowireMode, boolean dependencyCheck);1496243689;Create a new RootBeanDefinition for a singleton,_using the given autowire mode._@param beanClass the class of the bean to instantiate_@param autowireMode by name or type, using the constants in this interface_@param dependencyCheck whether to perform a dependency check for objects_(not applicable to autowiring a constructor, thus ignored there);public RootBeanDefinition(@Nullable Class<?> beanClass, int autowireMode, boolean dependencyCheck) {_		super()__		setBeanClass(beanClass)__		setAutowireMode(autowireMode)__		if (dependencyCheck && getResolvedAutowireMode() != AUTOWIRE_CONSTRUCTOR) {_			setDependencyCheck(DEPENDENCY_CHECK_OBJECTS)__		}_	};create,a,new,root,bean,definition,for,a,singleton,using,the,given,autowire,mode,param,bean,class,the,class,of,the,bean,to,instantiate,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,param,dependency,check,whether,to,perform,a,dependency,check,for,objects,not,applicable,to,autowiring,a,constructor,thus,ignored,there;public,root,bean,definition,nullable,class,bean,class,int,autowire,mode,boolean,dependency,check,super,set,bean,class,bean,class,set,autowire,mode,autowire,mode,if,dependency,check,get,resolved,autowire,mode,set,dependency,check
RootBeanDefinition -> public RootBeanDefinition(@Nullable Class<?> beanClass, int autowireMode, boolean dependencyCheck);1496259743;Create a new RootBeanDefinition for a singleton,_using the given autowire mode._@param beanClass the class of the bean to instantiate_@param autowireMode by name or type, using the constants in this interface_@param dependencyCheck whether to perform a dependency check for objects_(not applicable to autowiring a constructor, thus ignored there);public RootBeanDefinition(@Nullable Class<?> beanClass, int autowireMode, boolean dependencyCheck) {_		super()__		setBeanClass(beanClass)__		setAutowireMode(autowireMode)__		if (dependencyCheck && getResolvedAutowireMode() != AUTOWIRE_CONSTRUCTOR) {_			setDependencyCheck(DEPENDENCY_CHECK_OBJECTS)__		}_	};create,a,new,root,bean,definition,for,a,singleton,using,the,given,autowire,mode,param,bean,class,the,class,of,the,bean,to,instantiate,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,param,dependency,check,whether,to,perform,a,dependency,check,for,objects,not,applicable,to,autowiring,a,constructor,thus,ignored,there;public,root,bean,definition,nullable,class,bean,class,int,autowire,mode,boolean,dependency,check,super,set,bean,class,bean,class,set,autowire,mode,autowire,mode,if,dependency,check,get,resolved,autowire,mode,set,dependency,check
RootBeanDefinition -> public RootBeanDefinition(@Nullable Class<?> beanClass, int autowireMode, boolean dependencyCheck);1496837955;Create a new RootBeanDefinition for a singleton,_using the given autowire mode._@param beanClass the class of the bean to instantiate_@param autowireMode by name or type, using the constants in this interface_@param dependencyCheck whether to perform a dependency check for objects_(not applicable to autowiring a constructor, thus ignored there);public RootBeanDefinition(@Nullable Class<?> beanClass, int autowireMode, boolean dependencyCheck) {_		super()__		setBeanClass(beanClass)__		setAutowireMode(autowireMode)__		if (dependencyCheck && getResolvedAutowireMode() != AUTOWIRE_CONSTRUCTOR) {_			setDependencyCheck(DEPENDENCY_CHECK_OBJECTS)__		}_	};create,a,new,root,bean,definition,for,a,singleton,using,the,given,autowire,mode,param,bean,class,the,class,of,the,bean,to,instantiate,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,param,dependency,check,whether,to,perform,a,dependency,check,for,objects,not,applicable,to,autowiring,a,constructor,thus,ignored,there;public,root,bean,definition,nullable,class,bean,class,int,autowire,mode,boolean,dependency,check,super,set,bean,class,bean,class,set,autowire,mode,autowire,mode,if,dependency,check,get,resolved,autowire,mode,set,dependency,check
RootBeanDefinition -> public RootBeanDefinition(@Nullable Class<?> beanClass, int autowireMode, boolean dependencyCheck);1498780456;Create a new RootBeanDefinition for a singleton,_using the given autowire mode._@param beanClass the class of the bean to instantiate_@param autowireMode by name or type, using the constants in this interface_@param dependencyCheck whether to perform a dependency check for objects_(not applicable to autowiring a constructor, thus ignored there);public RootBeanDefinition(@Nullable Class<?> beanClass, int autowireMode, boolean dependencyCheck) {_		super()__		setBeanClass(beanClass)__		setAutowireMode(autowireMode)__		if (dependencyCheck && getResolvedAutowireMode() != AUTOWIRE_CONSTRUCTOR) {_			setDependencyCheck(DEPENDENCY_CHECK_OBJECTS)__		}_	};create,a,new,root,bean,definition,for,a,singleton,using,the,given,autowire,mode,param,bean,class,the,class,of,the,bean,to,instantiate,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,param,dependency,check,whether,to,perform,a,dependency,check,for,objects,not,applicable,to,autowiring,a,constructor,thus,ignored,there;public,root,bean,definition,nullable,class,bean,class,int,autowire,mode,boolean,dependency,check,super,set,bean,class,bean,class,set,autowire,mode,autowire,mode,if,dependency,check,get,resolved,autowire,mode,set,dependency,check
RootBeanDefinition -> public RootBeanDefinition(@Nullable Class<?> beanClass, int autowireMode, boolean dependencyCheck);1500448076;Create a new RootBeanDefinition for a singleton,_using the given autowire mode._@param beanClass the class of the bean to instantiate_@param autowireMode by name or type, using the constants in this interface_@param dependencyCheck whether to perform a dependency check for objects_(not applicable to autowiring a constructor, thus ignored there);public RootBeanDefinition(@Nullable Class<?> beanClass, int autowireMode, boolean dependencyCheck) {_		super()__		setBeanClass(beanClass)__		setAutowireMode(autowireMode)__		if (dependencyCheck && getResolvedAutowireMode() != AUTOWIRE_CONSTRUCTOR) {_			setDependencyCheck(DEPENDENCY_CHECK_OBJECTS)__		}_	};create,a,new,root,bean,definition,for,a,singleton,using,the,given,autowire,mode,param,bean,class,the,class,of,the,bean,to,instantiate,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,param,dependency,check,whether,to,perform,a,dependency,check,for,objects,not,applicable,to,autowiring,a,constructor,thus,ignored,there;public,root,bean,definition,nullable,class,bean,class,int,autowire,mode,boolean,dependency,check,super,set,bean,class,bean,class,set,autowire,mode,autowire,mode,if,dependency,check,get,resolved,autowire,mode,set,dependency,check
RootBeanDefinition -> public RootBeanDefinition(@Nullable Class<?> beanClass, int autowireMode, boolean dependencyCheck);1510606271;Create a new RootBeanDefinition for a singleton,_using the given autowire mode._@param beanClass the class of the bean to instantiate_@param autowireMode by name or type, using the constants in this interface_@param dependencyCheck whether to perform a dependency check for objects_(not applicable to autowiring a constructor, thus ignored there);public RootBeanDefinition(@Nullable Class<?> beanClass, int autowireMode, boolean dependencyCheck) {_		super()__		setBeanClass(beanClass)__		setAutowireMode(autowireMode)__		if (dependencyCheck && getResolvedAutowireMode() != AUTOWIRE_CONSTRUCTOR) {_			setDependencyCheck(DEPENDENCY_CHECK_OBJECTS)__		}_	};create,a,new,root,bean,definition,for,a,singleton,using,the,given,autowire,mode,param,bean,class,the,class,of,the,bean,to,instantiate,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,param,dependency,check,whether,to,perform,a,dependency,check,for,objects,not,applicable,to,autowiring,a,constructor,thus,ignored,there;public,root,bean,definition,nullable,class,bean,class,int,autowire,mode,boolean,dependency,check,super,set,bean,class,bean,class,set,autowire,mode,autowire,mode,if,dependency,check,get,resolved,autowire,mode,set,dependency,check
RootBeanDefinition -> public RootBeanDefinition(@Nullable Class<?> beanClass, int autowireMode, boolean dependencyCheck);1530174524;Create a new RootBeanDefinition for a singleton,_using the given autowire mode._@param beanClass the class of the bean to instantiate_@param autowireMode by name or type, using the constants in this interface_@param dependencyCheck whether to perform a dependency check for objects_(not applicable to autowiring a constructor, thus ignored there);public RootBeanDefinition(@Nullable Class<?> beanClass, int autowireMode, boolean dependencyCheck) {_		super()__		setBeanClass(beanClass)__		setAutowireMode(autowireMode)__		if (dependencyCheck && getResolvedAutowireMode() != AUTOWIRE_CONSTRUCTOR) {_			setDependencyCheck(DEPENDENCY_CHECK_OBJECTS)__		}_	};create,a,new,root,bean,definition,for,a,singleton,using,the,given,autowire,mode,param,bean,class,the,class,of,the,bean,to,instantiate,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,param,dependency,check,whether,to,perform,a,dependency,check,for,objects,not,applicable,to,autowiring,a,constructor,thus,ignored,there;public,root,bean,definition,nullable,class,bean,class,int,autowire,mode,boolean,dependency,check,super,set,bean,class,bean,class,set,autowire,mode,autowire,mode,if,dependency,check,get,resolved,autowire,mode,set,dependency,check
RootBeanDefinition -> public RootBeanDefinition(@Nullable Class<?> beanClass, int autowireMode, boolean dependencyCheck);1531243692;Create a new RootBeanDefinition for a singleton,_using the given autowire mode._@param beanClass the class of the bean to instantiate_@param autowireMode by name or type, using the constants in this interface_@param dependencyCheck whether to perform a dependency check for objects_(not applicable to autowiring a constructor, thus ignored there);public RootBeanDefinition(@Nullable Class<?> beanClass, int autowireMode, boolean dependencyCheck) {_		super()__		setBeanClass(beanClass)__		setAutowireMode(autowireMode)__		if (dependencyCheck && getResolvedAutowireMode() != AUTOWIRE_CONSTRUCTOR) {_			setDependencyCheck(DEPENDENCY_CHECK_OBJECTS)__		}_	};create,a,new,root,bean,definition,for,a,singleton,using,the,given,autowire,mode,param,bean,class,the,class,of,the,bean,to,instantiate,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,param,dependency,check,whether,to,perform,a,dependency,check,for,objects,not,applicable,to,autowiring,a,constructor,thus,ignored,there;public,root,bean,definition,nullable,class,bean,class,int,autowire,mode,boolean,dependency,check,super,set,bean,class,bean,class,set,autowire,mode,autowire,mode,if,dependency,check,get,resolved,autowire,mode,set,dependency,check
RootBeanDefinition -> public RootBeanDefinition(@Nullable Class<?> beanClass, int autowireMode, boolean dependencyCheck);1537388383;Create a new RootBeanDefinition for a singleton,_using the given autowire mode._@param beanClass the class of the bean to instantiate_@param autowireMode by name or type, using the constants in this interface_@param dependencyCheck whether to perform a dependency check for objects_(not applicable to autowiring a constructor, thus ignored there);public RootBeanDefinition(@Nullable Class<?> beanClass, int autowireMode, boolean dependencyCheck) {_		super()__		setBeanClass(beanClass)__		setAutowireMode(autowireMode)__		if (dependencyCheck && getResolvedAutowireMode() != AUTOWIRE_CONSTRUCTOR) {_			setDependencyCheck(DEPENDENCY_CHECK_OBJECTS)__		}_	};create,a,new,root,bean,definition,for,a,singleton,using,the,given,autowire,mode,param,bean,class,the,class,of,the,bean,to,instantiate,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,param,dependency,check,whether,to,perform,a,dependency,check,for,objects,not,applicable,to,autowiring,a,constructor,thus,ignored,there;public,root,bean,definition,nullable,class,bean,class,int,autowire,mode,boolean,dependency,check,super,set,bean,class,bean,class,set,autowire,mode,autowire,mode,if,dependency,check,get,resolved,autowire,mode,set,dependency,check
RootBeanDefinition -> public RootBeanDefinition(@Nullable Class<?> beanClass, int autowireMode, boolean dependencyCheck);1539377630;Create a new RootBeanDefinition for a singleton,_using the given autowire mode._@param beanClass the class of the bean to instantiate_@param autowireMode by name or type, using the constants in this interface_@param dependencyCheck whether to perform a dependency check for objects_(not applicable to autowiring a constructor, thus ignored there);public RootBeanDefinition(@Nullable Class<?> beanClass, int autowireMode, boolean dependencyCheck) {_		super()__		setBeanClass(beanClass)__		setAutowireMode(autowireMode)__		if (dependencyCheck && getResolvedAutowireMode() != AUTOWIRE_CONSTRUCTOR) {_			setDependencyCheck(DEPENDENCY_CHECK_OBJECTS)__		}_	};create,a,new,root,bean,definition,for,a,singleton,using,the,given,autowire,mode,param,bean,class,the,class,of,the,bean,to,instantiate,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,param,dependency,check,whether,to,perform,a,dependency,check,for,objects,not,applicable,to,autowiring,a,constructor,thus,ignored,there;public,root,bean,definition,nullable,class,bean,class,int,autowire,mode,boolean,dependency,check,super,set,bean,class,bean,class,set,autowire,mode,autowire,mode,if,dependency,check,get,resolved,autowire,mode,set,dependency,check
RootBeanDefinition -> public RootBeanDefinition(Class beanClass, ConstructorArgumentValues cargs, MutablePropertyValues pvs);1328020251;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._@param beanClass the class of the bean to instantiate_@param cargs the constructor argument values to apply_@param pvs the property values to apply;public RootBeanDefinition(Class beanClass, ConstructorArgumentValues cargs, MutablePropertyValues pvs) {_		super(cargs, pvs)__		setBeanClass(beanClass)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,param,bean,class,the,class,of,the,bean,to,instantiate,param,cargs,the,constructor,argument,values,to,apply,param,pvs,the,property,values,to,apply;public,root,bean,definition,class,bean,class,constructor,argument,values,cargs,mutable,property,values,pvs,super,cargs,pvs,set,bean,class,bean,class
RootBeanDefinition -> public RootBeanDefinition(Class beanClass, ConstructorArgumentValues cargs, MutablePropertyValues pvs);1352412675;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._@param beanClass the class of the bean to instantiate_@param cargs the constructor argument values to apply_@param pvs the property values to apply;public RootBeanDefinition(Class beanClass, ConstructorArgumentValues cargs, MutablePropertyValues pvs) {_		super(cargs, pvs)__		setBeanClass(beanClass)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,param,bean,class,the,class,of,the,bean,to,instantiate,param,cargs,the,constructor,argument,values,to,apply,param,pvs,the,property,values,to,apply;public,root,bean,definition,class,bean,class,constructor,argument,values,cargs,mutable,property,values,pvs,super,cargs,pvs,set,bean,class,bean,class
RootBeanDefinition -> public RootBeanDefinition(Class beanClass, ConstructorArgumentValues cargs, MutablePropertyValues pvs);1355352386;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._@param beanClass the class of the bean to instantiate_@param cargs the constructor argument values to apply_@param pvs the property values to apply;public RootBeanDefinition(Class beanClass, ConstructorArgumentValues cargs, MutablePropertyValues pvs) {_		super(cargs, pvs)__		setBeanClass(beanClass)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,param,bean,class,the,class,of,the,bean,to,instantiate,param,cargs,the,constructor,argument,values,to,apply,param,pvs,the,property,values,to,apply;public,root,bean,definition,class,bean,class,constructor,argument,values,cargs,mutable,property,values,pvs,super,cargs,pvs,set,bean,class,bean,class
RootBeanDefinition -> public RootBeanDefinition(Class beanClass, ConstructorArgumentValues cargs, MutablePropertyValues pvs);1356735495;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._@param beanClass the class of the bean to instantiate_@param cargs the constructor argument values to apply_@param pvs the property values to apply;public RootBeanDefinition(Class beanClass, ConstructorArgumentValues cargs, MutablePropertyValues pvs) {_		super(cargs, pvs)__		setBeanClass(beanClass)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,param,bean,class,the,class,of,the,bean,to,instantiate,param,cargs,the,constructor,argument,values,to,apply,param,pvs,the,property,values,to,apply;public,root,bean,definition,class,bean,class,constructor,argument,values,cargs,mutable,property,values,pvs,super,cargs,pvs,set,bean,class,bean,class
RootBeanDefinition -> public RootBeanDefinition(Class beanClass, ConstructorArgumentValues cargs, MutablePropertyValues pvs);1357119239;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._@param beanClass the class of the bean to instantiate_@param cargs the constructor argument values to apply_@param pvs the property values to apply;public RootBeanDefinition(Class beanClass, ConstructorArgumentValues cargs, MutablePropertyValues pvs) {_		super(cargs, pvs)__		setBeanClass(beanClass)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,param,bean,class,the,class,of,the,bean,to,instantiate,param,cargs,the,constructor,argument,values,to,apply,param,pvs,the,property,values,to,apply;public,root,bean,definition,class,bean,class,constructor,argument,values,cargs,mutable,property,values,pvs,super,cargs,pvs,set,bean,class,bean,class
RootBeanDefinition -> public RootBeanDefinition(Class beanClass, ConstructorArgumentValues cargs, MutablePropertyValues pvs);1362408075;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._@param beanClass the class of the bean to instantiate_@param cargs the constructor argument values to apply_@param pvs the property values to apply;public RootBeanDefinition(Class beanClass, ConstructorArgumentValues cargs, MutablePropertyValues pvs) {_		super(cargs, pvs)__		setBeanClass(beanClass)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,param,bean,class,the,class,of,the,bean,to,instantiate,param,cargs,the,constructor,argument,values,to,apply,param,pvs,the,property,values,to,apply;public,root,bean,definition,class,bean,class,constructor,argument,values,cargs,mutable,property,values,pvs,super,cargs,pvs,set,bean,class,bean,class
RootBeanDefinition -> public RootBeanDefinition(Class beanClass, ConstructorArgumentValues cargs, MutablePropertyValues pvs);1364505266;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._@param beanClass the class of the bean to instantiate_@param cargs the constructor argument values to apply_@param pvs the property values to apply;public RootBeanDefinition(Class beanClass, ConstructorArgumentValues cargs, MutablePropertyValues pvs) {_		super(cargs, pvs)__		setBeanClass(beanClass)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,param,bean,class,the,class,of,the,bean,to,instantiate,param,cargs,the,constructor,argument,values,to,apply,param,pvs,the,property,values,to,apply;public,root,bean,definition,class,bean,class,constructor,argument,values,cargs,mutable,property,values,pvs,super,cargs,pvs,set,bean,class,bean,class
RootBeanDefinition -> public RootBeanDefinition(Class beanClass, ConstructorArgumentValues cargs, MutablePropertyValues pvs);1367943112;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._@param beanClass the class of the bean to instantiate_@param cargs the constructor argument values to apply_@param pvs the property values to apply;public RootBeanDefinition(Class beanClass, ConstructorArgumentValues cargs, MutablePropertyValues pvs) {_		super(cargs, pvs)__		setBeanClass(beanClass)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,param,bean,class,the,class,of,the,bean,to,instantiate,param,cargs,the,constructor,argument,values,to,apply,param,pvs,the,property,values,to,apply;public,root,bean,definition,class,bean,class,constructor,argument,values,cargs,mutable,property,values,pvs,super,cargs,pvs,set,bean,class,bean,class
RootBeanDefinition -> public RootBeanDefinition(Class beanClass, ConstructorArgumentValues cargs, MutablePropertyValues pvs);1368482696;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._@param beanClass the class of the bean to instantiate_@param cargs the constructor argument values to apply_@param pvs the property values to apply;public RootBeanDefinition(Class beanClass, ConstructorArgumentValues cargs, MutablePropertyValues pvs) {_		super(cargs, pvs)__		setBeanClass(beanClass)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,param,bean,class,the,class,of,the,bean,to,instantiate,param,cargs,the,constructor,argument,values,to,apply,param,pvs,the,property,values,to,apply;public,root,bean,definition,class,bean,class,constructor,argument,values,cargs,mutable,property,values,pvs,super,cargs,pvs,set,bean,class,bean,class
RootBeanDefinition -> public RootBeanDefinition(String beanClassName);1328020251;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._<p>Takes a bean class name to avoid eager loading of the bean class._@param beanClassName the name of the class to instantiate;public RootBeanDefinition(String beanClassName) {_		setBeanClassName(beanClassName)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,p,takes,a,bean,class,name,to,avoid,eager,loading,of,the,bean,class,param,bean,class,name,the,name,of,the,class,to,instantiate;public,root,bean,definition,string,bean,class,name,set,bean,class,name,bean,class,name
RootBeanDefinition -> public RootBeanDefinition(String beanClassName);1352412675;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._<p>Takes a bean class name to avoid eager loading of the bean class._@param beanClassName the name of the class to instantiate;public RootBeanDefinition(String beanClassName) {_		setBeanClassName(beanClassName)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,p,takes,a,bean,class,name,to,avoid,eager,loading,of,the,bean,class,param,bean,class,name,the,name,of,the,class,to,instantiate;public,root,bean,definition,string,bean,class,name,set,bean,class,name,bean,class,name
RootBeanDefinition -> public RootBeanDefinition(String beanClassName);1355352386;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._<p>Takes a bean class name to avoid eager loading of the bean class._@param beanClassName the name of the class to instantiate;public RootBeanDefinition(String beanClassName) {_		setBeanClassName(beanClassName)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,p,takes,a,bean,class,name,to,avoid,eager,loading,of,the,bean,class,param,bean,class,name,the,name,of,the,class,to,instantiate;public,root,bean,definition,string,bean,class,name,set,bean,class,name,bean,class,name
RootBeanDefinition -> public RootBeanDefinition(String beanClassName);1356735495;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._<p>Takes a bean class name to avoid eager loading of the bean class._@param beanClassName the name of the class to instantiate;public RootBeanDefinition(String beanClassName) {_		setBeanClassName(beanClassName)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,p,takes,a,bean,class,name,to,avoid,eager,loading,of,the,bean,class,param,bean,class,name,the,name,of,the,class,to,instantiate;public,root,bean,definition,string,bean,class,name,set,bean,class,name,bean,class,name
RootBeanDefinition -> public RootBeanDefinition(String beanClassName);1357119239;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._<p>Takes a bean class name to avoid eager loading of the bean class._@param beanClassName the name of the class to instantiate;public RootBeanDefinition(String beanClassName) {_		setBeanClassName(beanClassName)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,p,takes,a,bean,class,name,to,avoid,eager,loading,of,the,bean,class,param,bean,class,name,the,name,of,the,class,to,instantiate;public,root,bean,definition,string,bean,class,name,set,bean,class,name,bean,class,name
RootBeanDefinition -> public RootBeanDefinition(String beanClassName);1362408075;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._<p>Takes a bean class name to avoid eager loading of the bean class._@param beanClassName the name of the class to instantiate;public RootBeanDefinition(String beanClassName) {_		setBeanClassName(beanClassName)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,p,takes,a,bean,class,name,to,avoid,eager,loading,of,the,bean,class,param,bean,class,name,the,name,of,the,class,to,instantiate;public,root,bean,definition,string,bean,class,name,set,bean,class,name,bean,class,name
RootBeanDefinition -> public RootBeanDefinition(String beanClassName);1364505266;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._<p>Takes a bean class name to avoid eager loading of the bean class._@param beanClassName the name of the class to instantiate;public RootBeanDefinition(String beanClassName) {_		setBeanClassName(beanClassName)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,p,takes,a,bean,class,name,to,avoid,eager,loading,of,the,bean,class,param,bean,class,name,the,name,of,the,class,to,instantiate;public,root,bean,definition,string,bean,class,name,set,bean,class,name,bean,class,name
RootBeanDefinition -> public RootBeanDefinition(String beanClassName);1367943112;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._<p>Takes a bean class name to avoid eager loading of the bean class._@param beanClassName the name of the class to instantiate;public RootBeanDefinition(String beanClassName) {_		setBeanClassName(beanClassName)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,p,takes,a,bean,class,name,to,avoid,eager,loading,of,the,bean,class,param,bean,class,name,the,name,of,the,class,to,instantiate;public,root,bean,definition,string,bean,class,name,set,bean,class,name,bean,class,name
RootBeanDefinition -> public RootBeanDefinition(String beanClassName);1368482696;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._<p>Takes a bean class name to avoid eager loading of the bean class._@param beanClassName the name of the class to instantiate;public RootBeanDefinition(String beanClassName) {_		setBeanClassName(beanClassName)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,p,takes,a,bean,class,name,to,avoid,eager,loading,of,the,bean,class,param,bean,class,name,the,name,of,the,class,to,instantiate;public,root,bean,definition,string,bean,class,name,set,bean,class,name,bean,class,name
RootBeanDefinition -> public RootBeanDefinition(String beanClassName);1368546246;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._<p>Takes a bean class name to avoid eager loading of the bean class._@param beanClassName the name of the class to instantiate;public RootBeanDefinition(String beanClassName) {_		setBeanClassName(beanClassName)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,p,takes,a,bean,class,name,to,avoid,eager,loading,of,the,bean,class,param,bean,class,name,the,name,of,the,class,to,instantiate;public,root,bean,definition,string,bean,class,name,set,bean,class,name,bean,class,name
RootBeanDefinition -> public RootBeanDefinition(String beanClassName);1368628892;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._<p>Takes a bean class name to avoid eager loading of the bean class._@param beanClassName the name of the class to instantiate;public RootBeanDefinition(String beanClassName) {_		setBeanClassName(beanClassName)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,p,takes,a,bean,class,name,to,avoid,eager,loading,of,the,bean,class,param,bean,class,name,the,name,of,the,class,to,instantiate;public,root,bean,definition,string,bean,class,name,set,bean,class,name,bean,class,name
RootBeanDefinition -> public RootBeanDefinition(String beanClassName);1382826936;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._<p>Takes a bean class name to avoid eager loading of the bean class._@param beanClassName the name of the class to instantiate;public RootBeanDefinition(String beanClassName) {_		setBeanClassName(beanClassName)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,p,takes,a,bean,class,name,to,avoid,eager,loading,of,the,bean,class,param,bean,class,name,the,name,of,the,class,to,instantiate;public,root,bean,definition,string,bean,class,name,set,bean,class,name,bean,class,name
RootBeanDefinition -> public RootBeanDefinition(String beanClassName);1390396833;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._<p>Takes a bean class name to avoid eager loading of the bean class._@param beanClassName the name of the class to instantiate;public RootBeanDefinition(String beanClassName) {_		setBeanClassName(beanClassName)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,p,takes,a,bean,class,name,to,avoid,eager,loading,of,the,bean,class,param,bean,class,name,the,name,of,the,class,to,instantiate;public,root,bean,definition,string,bean,class,name,set,bean,class,name,bean,class,name
RootBeanDefinition -> public RootBeanDefinition(String beanClassName);1467730834;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._<p>Takes a bean class name to avoid eager loading of the bean class._@param beanClassName the name of the class to instantiate;public RootBeanDefinition(String beanClassName) {_		setBeanClassName(beanClassName)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,p,takes,a,bean,class,name,to,avoid,eager,loading,of,the,bean,class,param,bean,class,name,the,name,of,the,class,to,instantiate;public,root,bean,definition,string,bean,class,name,set,bean,class,name,bean,class,name
RootBeanDefinition -> public RootBeanDefinition(String beanClassName);1467744603;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._<p>Takes a bean class name to avoid eager loading of the bean class._@param beanClassName the name of the class to instantiate;public RootBeanDefinition(String beanClassName) {_		setBeanClassName(beanClassName)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,p,takes,a,bean,class,name,to,avoid,eager,loading,of,the,bean,class,param,bean,class,name,the,name,of,the,class,to,instantiate;public,root,bean,definition,string,bean,class,name,set,bean,class,name,bean,class,name
RootBeanDefinition -> public RootBeanDefinition(String beanClassName);1469367243;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._<p>Takes a bean class name to avoid eager loading of the bean class._@param beanClassName the name of the class to instantiate;public RootBeanDefinition(String beanClassName) {_		setBeanClassName(beanClassName)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,p,takes,a,bean,class,name,to,avoid,eager,loading,of,the,bean,class,param,bean,class,name,the,name,of,the,class,to,instantiate;public,root,bean,definition,string,bean,class,name,set,bean,class,name,bean,class,name
RootBeanDefinition -> public RootBeanDefinition(String beanClassName);1471445956;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._<p>Takes a bean class name to avoid eager loading of the bean class._@param beanClassName the name of the class to instantiate;public RootBeanDefinition(String beanClassName) {_		setBeanClassName(beanClassName)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,p,takes,a,bean,class,name,to,avoid,eager,loading,of,the,bean,class,param,bean,class,name,the,name,of,the,class,to,instantiate;public,root,bean,definition,string,bean,class,name,set,bean,class,name,bean,class,name
RootBeanDefinition -> public RootBeanDefinition(String beanClassName);1474010431;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._<p>Takes a bean class name to avoid eager loading of the bean class._@param beanClassName the name of the class to instantiate;public RootBeanDefinition(String beanClassName) {_		setBeanClassName(beanClassName)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,p,takes,a,bean,class,name,to,avoid,eager,loading,of,the,bean,class,param,bean,class,name,the,name,of,the,class,to,instantiate;public,root,bean,definition,string,bean,class,name,set,bean,class,name,bean,class,name
RootBeanDefinition -> public RootBeanDefinition(String beanClassName);1474014845;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._<p>Takes a bean class name to avoid eager loading of the bean class._@param beanClassName the name of the class to instantiate;public RootBeanDefinition(String beanClassName) {_		setBeanClassName(beanClassName)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,p,takes,a,bean,class,name,to,avoid,eager,loading,of,the,bean,class,param,bean,class,name,the,name,of,the,class,to,instantiate;public,root,bean,definition,string,bean,class,name,set,bean,class,name,bean,class,name
RootBeanDefinition -> public RootBeanDefinition(String beanClassName);1482012648;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._<p>Takes a bean class name to avoid eager loading of the bean class._@param beanClassName the name of the class to instantiate;public RootBeanDefinition(String beanClassName) {_		setBeanClassName(beanClassName)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,p,takes,a,bean,class,name,to,avoid,eager,loading,of,the,bean,class,param,bean,class,name,the,name,of,the,class,to,instantiate;public,root,bean,definition,string,bean,class,name,set,bean,class,name,bean,class,name
RootBeanDefinition -> public RootBeanDefinition(String beanClassName);1482091545;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._<p>Takes a bean class name to avoid eager loading of the bean class._@param beanClassName the name of the class to instantiate;public RootBeanDefinition(String beanClassName) {_		setBeanClassName(beanClassName)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,p,takes,a,bean,class,name,to,avoid,eager,loading,of,the,bean,class,param,bean,class,name,the,name,of,the,class,to,instantiate;public,root,bean,definition,string,bean,class,name,set,bean,class,name,bean,class,name
RootBeanDefinition -> public RootBeanDefinition(String beanClassName);1483093818;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._<p>Takes a bean class name to avoid eager loading of the bean class._@param beanClassName the name of the class to instantiate;public RootBeanDefinition(String beanClassName) {_		setBeanClassName(beanClassName)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,p,takes,a,bean,class,name,to,avoid,eager,loading,of,the,bean,class,param,bean,class,name,the,name,of,the,class,to,instantiate;public,root,bean,definition,string,bean,class,name,set,bean,class,name,bean,class,name
RootBeanDefinition -> public RootBeanDefinition(String beanClassName);1495868221;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._<p>Takes a bean class name to avoid eager loading of the bean class._@param beanClassName the name of the class to instantiate;public RootBeanDefinition(String beanClassName) {_		setBeanClassName(beanClassName)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,p,takes,a,bean,class,name,to,avoid,eager,loading,of,the,bean,class,param,bean,class,name,the,name,of,the,class,to,instantiate;public,root,bean,definition,string,bean,class,name,set,bean,class,name,bean,class,name
RootBeanDefinition -> public RootBeanDefinition(String beanClassName);1496242568;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._<p>Takes a bean class name to avoid eager loading of the bean class._@param beanClassName the name of the class to instantiate;public RootBeanDefinition(String beanClassName) {_		setBeanClassName(beanClassName)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,p,takes,a,bean,class,name,to,avoid,eager,loading,of,the,bean,class,param,bean,class,name,the,name,of,the,class,to,instantiate;public,root,bean,definition,string,bean,class,name,set,bean,class,name,bean,class,name
RootBeanDefinition -> public RootBeanDefinition(String beanClassName);1496243689;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._<p>Takes a bean class name to avoid eager loading of the bean class._@param beanClassName the name of the class to instantiate;public RootBeanDefinition(String beanClassName) {_		setBeanClassName(beanClassName)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,p,takes,a,bean,class,name,to,avoid,eager,loading,of,the,bean,class,param,bean,class,name,the,name,of,the,class,to,instantiate;public,root,bean,definition,string,bean,class,name,set,bean,class,name,bean,class,name
RootBeanDefinition -> public RootBeanDefinition(String beanClassName);1496259743;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._<p>Takes a bean class name to avoid eager loading of the bean class._@param beanClassName the name of the class to instantiate;public RootBeanDefinition(String beanClassName) {_		setBeanClassName(beanClassName)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,p,takes,a,bean,class,name,to,avoid,eager,loading,of,the,bean,class,param,bean,class,name,the,name,of,the,class,to,instantiate;public,root,bean,definition,string,bean,class,name,set,bean,class,name,bean,class,name
RootBeanDefinition -> public RootBeanDefinition(String beanClassName);1496837955;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._<p>Takes a bean class name to avoid eager loading of the bean class._@param beanClassName the name of the class to instantiate;public RootBeanDefinition(String beanClassName) {_		setBeanClassName(beanClassName)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,p,takes,a,bean,class,name,to,avoid,eager,loading,of,the,bean,class,param,bean,class,name,the,name,of,the,class,to,instantiate;public,root,bean,definition,string,bean,class,name,set,bean,class,name,bean,class,name
RootBeanDefinition -> public RootBeanDefinition(String beanClassName);1498780456;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._<p>Takes a bean class name to avoid eager loading of the bean class._@param beanClassName the name of the class to instantiate;public RootBeanDefinition(String beanClassName) {_		setBeanClassName(beanClassName)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,p,takes,a,bean,class,name,to,avoid,eager,loading,of,the,bean,class,param,bean,class,name,the,name,of,the,class,to,instantiate;public,root,bean,definition,string,bean,class,name,set,bean,class,name,bean,class,name
RootBeanDefinition -> public RootBeanDefinition(String beanClassName);1500448076;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._<p>Takes a bean class name to avoid eager loading of the bean class._@param beanClassName the name of the class to instantiate;public RootBeanDefinition(String beanClassName) {_		setBeanClassName(beanClassName)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,p,takes,a,bean,class,name,to,avoid,eager,loading,of,the,bean,class,param,bean,class,name,the,name,of,the,class,to,instantiate;public,root,bean,definition,string,bean,class,name,set,bean,class,name,bean,class,name
RootBeanDefinition -> public RootBeanDefinition(String beanClassName);1510606271;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._<p>Takes a bean class name to avoid eager loading of the bean class._@param beanClassName the name of the class to instantiate;public RootBeanDefinition(String beanClassName) {_		setBeanClassName(beanClassName)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,p,takes,a,bean,class,name,to,avoid,eager,loading,of,the,bean,class,param,bean,class,name,the,name,of,the,class,to,instantiate;public,root,bean,definition,string,bean,class,name,set,bean,class,name,bean,class,name
RootBeanDefinition -> public RootBeanDefinition(String beanClassName);1530174524;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._<p>Takes a bean class name to avoid eager loading of the bean class._@param beanClassName the name of the class to instantiate;public RootBeanDefinition(String beanClassName) {_		setBeanClassName(beanClassName)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,p,takes,a,bean,class,name,to,avoid,eager,loading,of,the,bean,class,param,bean,class,name,the,name,of,the,class,to,instantiate;public,root,bean,definition,string,bean,class,name,set,bean,class,name,bean,class,name
RootBeanDefinition -> public RootBeanDefinition(String beanClassName);1531243692;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._<p>Takes a bean class name to avoid eager loading of the bean class._@param beanClassName the name of the class to instantiate;public RootBeanDefinition(String beanClassName) {_		setBeanClassName(beanClassName)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,p,takes,a,bean,class,name,to,avoid,eager,loading,of,the,bean,class,param,bean,class,name,the,name,of,the,class,to,instantiate;public,root,bean,definition,string,bean,class,name,set,bean,class,name,bean,class,name
RootBeanDefinition -> public RootBeanDefinition(String beanClassName);1537388383;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._<p>Takes a bean class name to avoid eager loading of the bean class._@param beanClassName the name of the class to instantiate;public RootBeanDefinition(String beanClassName) {_		setBeanClassName(beanClassName)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,p,takes,a,bean,class,name,to,avoid,eager,loading,of,the,bean,class,param,bean,class,name,the,name,of,the,class,to,instantiate;public,root,bean,definition,string,bean,class,name,set,bean,class,name,bean,class,name
RootBeanDefinition -> public RootBeanDefinition(String beanClassName);1539377630;Create a new RootBeanDefinition for a singleton,_providing constructor arguments and property values._<p>Takes a bean class name to avoid eager loading of the bean class._@param beanClassName the name of the class to instantiate;public RootBeanDefinition(String beanClassName) {_		setBeanClassName(beanClassName)__	};create,a,new,root,bean,definition,for,a,singleton,providing,constructor,arguments,and,property,values,p,takes,a,bean,class,name,to,avoid,eager,loading,of,the,bean,class,param,bean,class,name,the,name,of,the,class,to,instantiate;public,root,bean,definition,string,bean,class,name,set,bean,class,name,bean,class,name
