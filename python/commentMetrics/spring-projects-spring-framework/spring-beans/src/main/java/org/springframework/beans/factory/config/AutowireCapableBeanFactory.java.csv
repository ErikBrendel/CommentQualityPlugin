# id;timestamp;commentText;codeText;commentWords;codeWords
AutowireCapableBeanFactory -> Object configureBean(Object existingBean, String beanName) throws BeansException_;1328020251;Configure the given raw bean: autowiring bean properties, applying_bean property values, applying factory callbacks such as <code>setBeanName</code>_and <code>setBeanFactory</code>, and also applying all bean post processors_(including ones which might wrap the given raw bean)._<p>This is effectively a superset of what {@link #initializeBean} provides,_fully applying the configuration specified by the corresponding bean definition._<b>Note: This method requires a bean definition for the given name!</b>_@param existingBean the existing bean instance_@param beanName the name of the bean, to be passed to it if necessary_(a bean definition of that name has to be available)_@return the bean instance to use, either the original or a wrapped one_@throws org.springframework.beans.factory.NoSuchBeanDefinitionException_if there is no bean definition with the given name_@throws BeansException if the initialization failed_@see #initializeBean;Object configureBean(Object existingBean, String beanName) throws BeansException_;configure,the,given,raw,bean,autowiring,bean,properties,applying,bean,property,values,applying,factory,callbacks,such,as,code,set,bean,name,code,and,code,set,bean,factory,code,and,also,applying,all,bean,post,processors,including,ones,which,might,wrap,the,given,raw,bean,p,this,is,effectively,a,superset,of,what,link,initialize,bean,provides,fully,applying,the,configuration,specified,by,the,corresponding,bean,definition,b,note,this,method,requires,a,bean,definition,for,the,given,name,b,param,existing,bean,the,existing,bean,instance,param,bean,name,the,name,of,the,bean,to,be,passed,to,it,if,necessary,a,bean,definition,of,that,name,has,to,be,available,return,the,bean,instance,to,use,either,the,original,or,a,wrapped,one,throws,org,springframework,beans,factory,no,such,bean,definition,exception,if,there,is,no,bean,definition,with,the,given,name,throws,beans,exception,if,the,initialization,failed,see,initialize,bean;object,configure,bean,object,existing,bean,string,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> Object configureBean(Object existingBean, String beanName) throws BeansException_;1356735495;Configure the given raw bean: autowiring bean properties, applying_bean property values, applying factory callbacks such as {@code setBeanName}_and {@code setBeanFactory}, and also applying all bean post processors_(including ones which might wrap the given raw bean)._<p>This is effectively a superset of what {@link #initializeBean} provides,_fully applying the configuration specified by the corresponding bean definition._<b>Note: This method requires a bean definition for the given name!</b>_@param existingBean the existing bean instance_@param beanName the name of the bean, to be passed to it if necessary_(a bean definition of that name has to be available)_@return the bean instance to use, either the original or a wrapped one_@throws org.springframework.beans.factory.NoSuchBeanDefinitionException_if there is no bean definition with the given name_@throws BeansException if the initialization failed_@see #initializeBean;Object configureBean(Object existingBean, String beanName) throws BeansException_;configure,the,given,raw,bean,autowiring,bean,properties,applying,bean,property,values,applying,factory,callbacks,such,as,code,set,bean,name,and,code,set,bean,factory,and,also,applying,all,bean,post,processors,including,ones,which,might,wrap,the,given,raw,bean,p,this,is,effectively,a,superset,of,what,link,initialize,bean,provides,fully,applying,the,configuration,specified,by,the,corresponding,bean,definition,b,note,this,method,requires,a,bean,definition,for,the,given,name,b,param,existing,bean,the,existing,bean,instance,param,bean,name,the,name,of,the,bean,to,be,passed,to,it,if,necessary,a,bean,definition,of,that,name,has,to,be,available,return,the,bean,instance,to,use,either,the,original,or,a,wrapped,one,throws,org,springframework,beans,factory,no,such,bean,definition,exception,if,there,is,no,bean,definition,with,the,given,name,throws,beans,exception,if,the,initialization,failed,see,initialize,bean;object,configure,bean,object,existing,bean,string,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> Object configureBean(Object existingBean, String beanName) throws BeansException_;1364503447;Configure the given raw bean: autowiring bean properties, applying_bean property values, applying factory callbacks such as {@code setBeanName}_and {@code setBeanFactory}, and also applying all bean post processors_(including ones which might wrap the given raw bean)._<p>This is effectively a superset of what {@link #initializeBean} provides,_fully applying the configuration specified by the corresponding bean definition._<b>Note: This method requires a bean definition for the given name!</b>_@param existingBean the existing bean instance_@param beanName the name of the bean, to be passed to it if necessary_(a bean definition of that name has to be available)_@return the bean instance to use, either the original or a wrapped one_@throws org.springframework.beans.factory.NoSuchBeanDefinitionException_if there is no bean definition with the given name_@throws BeansException if the initialization failed_@see #initializeBean;Object configureBean(Object existingBean, String beanName) throws BeansException_;configure,the,given,raw,bean,autowiring,bean,properties,applying,bean,property,values,applying,factory,callbacks,such,as,code,set,bean,name,and,code,set,bean,factory,and,also,applying,all,bean,post,processors,including,ones,which,might,wrap,the,given,raw,bean,p,this,is,effectively,a,superset,of,what,link,initialize,bean,provides,fully,applying,the,configuration,specified,by,the,corresponding,bean,definition,b,note,this,method,requires,a,bean,definition,for,the,given,name,b,param,existing,bean,the,existing,bean,instance,param,bean,name,the,name,of,the,bean,to,be,passed,to,it,if,necessary,a,bean,definition,of,that,name,has,to,be,available,return,the,bean,instance,to,use,either,the,original,or,a,wrapped,one,throws,org,springframework,beans,factory,no,such,bean,definition,exception,if,there,is,no,bean,definition,with,the,given,name,throws,beans,exception,if,the,initialization,failed,see,initialize,bean;object,configure,bean,object,existing,bean,string,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> Object configureBean(Object existingBean, String beanName) throws BeansException_;1368546246;Configure the given raw bean: autowiring bean properties, applying_bean property values, applying factory callbacks such as {@code setBeanName}_and {@code setBeanFactory}, and also applying all bean post processors_(including ones which might wrap the given raw bean)._<p>This is effectively a superset of what {@link #initializeBean} provides,_fully applying the configuration specified by the corresponding bean definition._<b>Note: This method requires a bean definition for the given name!</b>_@param existingBean the existing bean instance_@param beanName the name of the bean, to be passed to it if necessary_(a bean definition of that name has to be available)_@return the bean instance to use, either the original or a wrapped one_@throws org.springframework.beans.factory.NoSuchBeanDefinitionException_if there is no bean definition with the given name_@throws BeansException if the initialization failed_@see #initializeBean;Object configureBean(Object existingBean, String beanName) throws BeansException_;configure,the,given,raw,bean,autowiring,bean,properties,applying,bean,property,values,applying,factory,callbacks,such,as,code,set,bean,name,and,code,set,bean,factory,and,also,applying,all,bean,post,processors,including,ones,which,might,wrap,the,given,raw,bean,p,this,is,effectively,a,superset,of,what,link,initialize,bean,provides,fully,applying,the,configuration,specified,by,the,corresponding,bean,definition,b,note,this,method,requires,a,bean,definition,for,the,given,name,b,param,existing,bean,the,existing,bean,instance,param,bean,name,the,name,of,the,bean,to,be,passed,to,it,if,necessary,a,bean,definition,of,that,name,has,to,be,available,return,the,bean,instance,to,use,either,the,original,or,a,wrapped,one,throws,org,springframework,beans,factory,no,such,bean,definition,exception,if,there,is,no,bean,definition,with,the,given,name,throws,beans,exception,if,the,initialization,failed,see,initialize,bean;object,configure,bean,object,existing,bean,string,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> Object configureBean(Object existingBean, String beanName) throws BeansException_;1458483997;Configure the given raw bean: autowiring bean properties, applying_bean property values, applying factory callbacks such as {@code setBeanName}_and {@code setBeanFactory}, and also applying all bean post processors_(including ones which might wrap the given raw bean)._<p>This is effectively a superset of what {@link #initializeBean} provides,_fully applying the configuration specified by the corresponding bean definition._<b>Note: This method requires a bean definition for the given name!</b>_@param existingBean the existing bean instance_@param beanName the name of the bean, to be passed to it if necessary_(a bean definition of that name has to be available)_@return the bean instance to use, either the original or a wrapped one_@throws org.springframework.beans.factory.NoSuchBeanDefinitionException_if there is no bean definition with the given name_@throws BeansException if the initialization failed_@see #initializeBean;Object configureBean(Object existingBean, String beanName) throws BeansException_;configure,the,given,raw,bean,autowiring,bean,properties,applying,bean,property,values,applying,factory,callbacks,such,as,code,set,bean,name,and,code,set,bean,factory,and,also,applying,all,bean,post,processors,including,ones,which,might,wrap,the,given,raw,bean,p,this,is,effectively,a,superset,of,what,link,initialize,bean,provides,fully,applying,the,configuration,specified,by,the,corresponding,bean,definition,b,note,this,method,requires,a,bean,definition,for,the,given,name,b,param,existing,bean,the,existing,bean,instance,param,bean,name,the,name,of,the,bean,to,be,passed,to,it,if,necessary,a,bean,definition,of,that,name,has,to,be,available,return,the,bean,instance,to,use,either,the,original,or,a,wrapped,one,throws,org,springframework,beans,factory,no,such,bean,definition,exception,if,there,is,no,bean,definition,with,the,given,name,throws,beans,exception,if,the,initialization,failed,see,initialize,bean;object,configure,bean,object,existing,bean,string,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> Object configureBean(Object existingBean, String beanName) throws BeansException_;1470948126;Configure the given raw bean: autowiring bean properties, applying_bean property values, applying factory callbacks such as {@code setBeanName}_and {@code setBeanFactory}, and also applying all bean post processors_(including ones which might wrap the given raw bean)._<p>This is effectively a superset of what {@link #initializeBean} provides,_fully applying the configuration specified by the corresponding bean definition._<b>Note: This method requires a bean definition for the given name!</b>_@param existingBean the existing bean instance_@param beanName the name of the bean, to be passed to it if necessary_(a bean definition of that name has to be available)_@return the bean instance to use, either the original or a wrapped one_@throws org.springframework.beans.factory.NoSuchBeanDefinitionException_if there is no bean definition with the given name_@throws BeansException if the initialization failed_@see #initializeBean;Object configureBean(Object existingBean, String beanName) throws BeansException_;configure,the,given,raw,bean,autowiring,bean,properties,applying,bean,property,values,applying,factory,callbacks,such,as,code,set,bean,name,and,code,set,bean,factory,and,also,applying,all,bean,post,processors,including,ones,which,might,wrap,the,given,raw,bean,p,this,is,effectively,a,superset,of,what,link,initialize,bean,provides,fully,applying,the,configuration,specified,by,the,corresponding,bean,definition,b,note,this,method,requires,a,bean,definition,for,the,given,name,b,param,existing,bean,the,existing,bean,instance,param,bean,name,the,name,of,the,bean,to,be,passed,to,it,if,necessary,a,bean,definition,of,that,name,has,to,be,available,return,the,bean,instance,to,use,either,the,original,or,a,wrapped,one,throws,org,springframework,beans,factory,no,such,bean,definition,exception,if,there,is,no,bean,definition,with,the,given,name,throws,beans,exception,if,the,initialization,failed,see,initialize,bean;object,configure,bean,object,existing,bean,string,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> Object configureBean(Object existingBean, String beanName) throws BeansException_;1470952254;Configure the given raw bean: autowiring bean properties, applying_bean property values, applying factory callbacks such as {@code setBeanName}_and {@code setBeanFactory}, and also applying all bean post processors_(including ones which might wrap the given raw bean)._<p>This is effectively a superset of what {@link #initializeBean} provides,_fully applying the configuration specified by the corresponding bean definition._<b>Note: This method requires a bean definition for the given name!</b>_@param existingBean the existing bean instance_@param beanName the name of the bean, to be passed to it if necessary_(a bean definition of that name has to be available)_@return the bean instance to use, either the original or a wrapped one_@throws org.springframework.beans.factory.NoSuchBeanDefinitionException_if there is no bean definition with the given name_@throws BeansException if the initialization failed_@see #initializeBean;Object configureBean(Object existingBean, String beanName) throws BeansException_;configure,the,given,raw,bean,autowiring,bean,properties,applying,bean,property,values,applying,factory,callbacks,such,as,code,set,bean,name,and,code,set,bean,factory,and,also,applying,all,bean,post,processors,including,ones,which,might,wrap,the,given,raw,bean,p,this,is,effectively,a,superset,of,what,link,initialize,bean,provides,fully,applying,the,configuration,specified,by,the,corresponding,bean,definition,b,note,this,method,requires,a,bean,definition,for,the,given,name,b,param,existing,bean,the,existing,bean,instance,param,bean,name,the,name,of,the,bean,to,be,passed,to,it,if,necessary,a,bean,definition,of,that,name,has,to,be,available,return,the,bean,instance,to,use,either,the,original,or,a,wrapped,one,throws,org,springframework,beans,factory,no,such,bean,definition,exception,if,there,is,no,bean,definition,with,the,given,name,throws,beans,exception,if,the,initialization,failed,see,initialize,bean;object,configure,bean,object,existing,bean,string,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> Object configureBean(Object existingBean, String beanName) throws BeansException_;1495868221;Configure the given raw bean: autowiring bean properties, applying_bean property values, applying factory callbacks such as {@code setBeanName}_and {@code setBeanFactory}, and also applying all bean post processors_(including ones which might wrap the given raw bean)._<p>This is effectively a superset of what {@link #initializeBean} provides,_fully applying the configuration specified by the corresponding bean definition._<b>Note: This method requires a bean definition for the given name!</b>_@param existingBean the existing bean instance_@param beanName the name of the bean, to be passed to it if necessary_(a bean definition of that name has to be available)_@return the bean instance to use, either the original or a wrapped one_@throws org.springframework.beans.factory.NoSuchBeanDefinitionException_if there is no bean definition with the given name_@throws BeansException if the initialization failed_@see #initializeBean;Object configureBean(Object existingBean, String beanName) throws BeansException_;configure,the,given,raw,bean,autowiring,bean,properties,applying,bean,property,values,applying,factory,callbacks,such,as,code,set,bean,name,and,code,set,bean,factory,and,also,applying,all,bean,post,processors,including,ones,which,might,wrap,the,given,raw,bean,p,this,is,effectively,a,superset,of,what,link,initialize,bean,provides,fully,applying,the,configuration,specified,by,the,corresponding,bean,definition,b,note,this,method,requires,a,bean,definition,for,the,given,name,b,param,existing,bean,the,existing,bean,instance,param,bean,name,the,name,of,the,bean,to,be,passed,to,it,if,necessary,a,bean,definition,of,that,name,has,to,be,available,return,the,bean,instance,to,use,either,the,original,or,a,wrapped,one,throws,org,springframework,beans,factory,no,such,bean,definition,exception,if,there,is,no,bean,definition,with,the,given,name,throws,beans,exception,if,the,initialization,failed,see,initialize,bean;object,configure,bean,object,existing,bean,string,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> Object configureBean(Object existingBean, String beanName) throws BeansException_;1496259743;Configure the given raw bean: autowiring bean properties, applying_bean property values, applying factory callbacks such as {@code setBeanName}_and {@code setBeanFactory}, and also applying all bean post processors_(including ones which might wrap the given raw bean)._<p>This is effectively a superset of what {@link #initializeBean} provides,_fully applying the configuration specified by the corresponding bean definition._<b>Note: This method requires a bean definition for the given name!</b>_@param existingBean the existing bean instance_@param beanName the name of the bean, to be passed to it if necessary_(a bean definition of that name has to be available)_@return the bean instance to use, either the original or a wrapped one_@throws org.springframework.beans.factory.NoSuchBeanDefinitionException_if there is no bean definition with the given name_@throws BeansException if the initialization failed_@see #initializeBean;Object configureBean(Object existingBean, String beanName) throws BeansException_;configure,the,given,raw,bean,autowiring,bean,properties,applying,bean,property,values,applying,factory,callbacks,such,as,code,set,bean,name,and,code,set,bean,factory,and,also,applying,all,bean,post,processors,including,ones,which,might,wrap,the,given,raw,bean,p,this,is,effectively,a,superset,of,what,link,initialize,bean,provides,fully,applying,the,configuration,specified,by,the,corresponding,bean,definition,b,note,this,method,requires,a,bean,definition,for,the,given,name,b,param,existing,bean,the,existing,bean,instance,param,bean,name,the,name,of,the,bean,to,be,passed,to,it,if,necessary,a,bean,definition,of,that,name,has,to,be,available,return,the,bean,instance,to,use,either,the,original,or,a,wrapped,one,throws,org,springframework,beans,factory,no,such,bean,definition,exception,if,there,is,no,bean,definition,with,the,given,name,throws,beans,exception,if,the,initialization,failed,see,initialize,bean;object,configure,bean,object,existing,bean,string,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> Object configureBean(Object existingBean, String beanName) throws BeansException_;1496837955;Configure the given raw bean: autowiring bean properties, applying_bean property values, applying factory callbacks such as {@code setBeanName}_and {@code setBeanFactory}, and also applying all bean post processors_(including ones which might wrap the given raw bean)._<p>This is effectively a superset of what {@link #initializeBean} provides,_fully applying the configuration specified by the corresponding bean definition._<b>Note: This method requires a bean definition for the given name!</b>_@param existingBean the existing bean instance_@param beanName the name of the bean, to be passed to it if necessary_(a bean definition of that name has to be available)_@return the bean instance to use, either the original or a wrapped one_@throws org.springframework.beans.factory.NoSuchBeanDefinitionException_if there is no bean definition with the given name_@throws BeansException if the initialization failed_@see #initializeBean;Object configureBean(Object existingBean, String beanName) throws BeansException_;configure,the,given,raw,bean,autowiring,bean,properties,applying,bean,property,values,applying,factory,callbacks,such,as,code,set,bean,name,and,code,set,bean,factory,and,also,applying,all,bean,post,processors,including,ones,which,might,wrap,the,given,raw,bean,p,this,is,effectively,a,superset,of,what,link,initialize,bean,provides,fully,applying,the,configuration,specified,by,the,corresponding,bean,definition,b,note,this,method,requires,a,bean,definition,for,the,given,name,b,param,existing,bean,the,existing,bean,instance,param,bean,name,the,name,of,the,bean,to,be,passed,to,it,if,necessary,a,bean,definition,of,that,name,has,to,be,available,return,the,bean,instance,to,use,either,the,original,or,a,wrapped,one,throws,org,springframework,beans,factory,no,such,bean,definition,exception,if,there,is,no,bean,definition,with,the,given,name,throws,beans,exception,if,the,initialization,failed,see,initialize,bean;object,configure,bean,object,existing,bean,string,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> Object configureBean(Object existingBean, String beanName) throws BeansException_;1503007895;Configure the given raw bean: autowiring bean properties, applying_bean property values, applying factory callbacks such as {@code setBeanName}_and {@code setBeanFactory}, and also applying all bean post processors_(including ones which might wrap the given raw bean)._<p>This is effectively a superset of what {@link #initializeBean} provides,_fully applying the configuration specified by the corresponding bean definition._<b>Note: This method requires a bean definition for the given name!</b>_@param existingBean the existing bean instance_@param beanName the name of the bean, to be passed to it if necessary_(a bean definition of that name has to be available)_@return the bean instance to use, either the original or a wrapped one_@throws org.springframework.beans.factory.NoSuchBeanDefinitionException_if there is no bean definition with the given name_@throws BeansException if the initialization failed_@see #initializeBean;Object configureBean(Object existingBean, String beanName) throws BeansException_;configure,the,given,raw,bean,autowiring,bean,properties,applying,bean,property,values,applying,factory,callbacks,such,as,code,set,bean,name,and,code,set,bean,factory,and,also,applying,all,bean,post,processors,including,ones,which,might,wrap,the,given,raw,bean,p,this,is,effectively,a,superset,of,what,link,initialize,bean,provides,fully,applying,the,configuration,specified,by,the,corresponding,bean,definition,b,note,this,method,requires,a,bean,definition,for,the,given,name,b,param,existing,bean,the,existing,bean,instance,param,bean,name,the,name,of,the,bean,to,be,passed,to,it,if,necessary,a,bean,definition,of,that,name,has,to,be,available,return,the,bean,instance,to,use,either,the,original,or,a,wrapped,one,throws,org,springframework,beans,factory,no,such,bean,definition,exception,if,there,is,no,bean,definition,with,the,given,name,throws,beans,exception,if,the,initialization,failed,see,initialize,bean;object,configure,bean,object,existing,bean,string,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> Object configureBean(Object existingBean, String beanName) throws BeansException_;1530174524;Configure the given raw bean: autowiring bean properties, applying_bean property values, applying factory callbacks such as {@code setBeanName}_and {@code setBeanFactory}, and also applying all bean post processors_(including ones which might wrap the given raw bean)._<p>This is effectively a superset of what {@link #initializeBean} provides,_fully applying the configuration specified by the corresponding bean definition._<b>Note: This method requires a bean definition for the given name!</b>_@param existingBean the existing bean instance_@param beanName the name of the bean, to be passed to it if necessary_(a bean definition of that name has to be available)_@return the bean instance to use, either the original or a wrapped one_@throws org.springframework.beans.factory.NoSuchBeanDefinitionException_if there is no bean definition with the given name_@throws BeansException if the initialization failed_@see #initializeBean;Object configureBean(Object existingBean, String beanName) throws BeansException_;configure,the,given,raw,bean,autowiring,bean,properties,applying,bean,property,values,applying,factory,callbacks,such,as,code,set,bean,name,and,code,set,bean,factory,and,also,applying,all,bean,post,processors,including,ones,which,might,wrap,the,given,raw,bean,p,this,is,effectively,a,superset,of,what,link,initialize,bean,provides,fully,applying,the,configuration,specified,by,the,corresponding,bean,definition,b,note,this,method,requires,a,bean,definition,for,the,given,name,b,param,existing,bean,the,existing,bean,instance,param,bean,name,the,name,of,the,bean,to,be,passed,to,it,if,necessary,a,bean,definition,of,that,name,has,to,be,available,return,the,bean,instance,to,use,either,the,original,or,a,wrapped,one,throws,org,springframework,beans,factory,no,such,bean,definition,exception,if,there,is,no,bean,definition,with,the,given,name,throws,beans,exception,if,the,initialization,failed,see,initialize,bean;object,configure,bean,object,existing,bean,string,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> Object configureBean(Object existingBean, String beanName) throws BeansException_;1535064541;Configure the given raw bean: autowiring bean properties, applying_bean property values, applying factory callbacks such as {@code setBeanName}_and {@code setBeanFactory}, and also applying all bean post processors_(including ones which might wrap the given raw bean)._<p>This is effectively a superset of what {@link #initializeBean} provides,_fully applying the configuration specified by the corresponding bean definition._<b>Note: This method requires a bean definition for the given name!</b>_@param existingBean the existing bean instance_@param beanName the name of the bean, to be passed to it if necessary_(a bean definition of that name has to be available)_@return the bean instance to use, either the original or a wrapped one_@throws org.springframework.beans.factory.NoSuchBeanDefinitionException_if there is no bean definition with the given name_@throws BeansException if the initialization failed_@see #initializeBean;Object configureBean(Object existingBean, String beanName) throws BeansException_;configure,the,given,raw,bean,autowiring,bean,properties,applying,bean,property,values,applying,factory,callbacks,such,as,code,set,bean,name,and,code,set,bean,factory,and,also,applying,all,bean,post,processors,including,ones,which,might,wrap,the,given,raw,bean,p,this,is,effectively,a,superset,of,what,link,initialize,bean,provides,fully,applying,the,configuration,specified,by,the,corresponding,bean,definition,b,note,this,method,requires,a,bean,definition,for,the,given,name,b,param,existing,bean,the,existing,bean,instance,param,bean,name,the,name,of,the,bean,to,be,passed,to,it,if,necessary,a,bean,definition,of,that,name,has,to,be,available,return,the,bean,instance,to,use,either,the,original,or,a,wrapped,one,throws,org,springframework,beans,factory,no,such,bean,definition,exception,if,there,is,no,bean,definition,with,the,given,name,throws,beans,exception,if,the,initialization,failed,see,initialize,bean;object,configure,bean,object,existing,bean,string,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> Object configureBean(Object existingBean, String beanName) throws BeansException_;1549551674;Configure the given raw bean: autowiring bean properties, applying_bean property values, applying factory callbacks such as {@code setBeanName}_and {@code setBeanFactory}, and also applying all bean post processors_(including ones which might wrap the given raw bean)._<p>This is effectively a superset of what {@link #initializeBean} provides,_fully applying the configuration specified by the corresponding bean definition._<b>Note: This method requires a bean definition for the given name!</b>_@param existingBean the existing bean instance_@param beanName the name of the bean, to be passed to it if necessary_(a bean definition of that name has to be available)_@return the bean instance to use, either the original or a wrapped one_@throws org.springframework.beans.factory.NoSuchBeanDefinitionException_if there is no bean definition with the given name_@throws BeansException if the initialization failed_@see #initializeBean;Object configureBean(Object existingBean, String beanName) throws BeansException_;configure,the,given,raw,bean,autowiring,bean,properties,applying,bean,property,values,applying,factory,callbacks,such,as,code,set,bean,name,and,code,set,bean,factory,and,also,applying,all,bean,post,processors,including,ones,which,might,wrap,the,given,raw,bean,p,this,is,effectively,a,superset,of,what,link,initialize,bean,provides,fully,applying,the,configuration,specified,by,the,corresponding,bean,definition,b,note,this,method,requires,a,bean,definition,for,the,given,name,b,param,existing,bean,the,existing,bean,instance,param,bean,name,the,name,of,the,bean,to,be,passed,to,it,if,necessary,a,bean,definition,of,that,name,has,to,be,available,return,the,bean,instance,to,use,either,the,original,or,a,wrapped,one,throws,org,springframework,beans,factory,no,such,bean,definition,exception,if,there,is,no,bean,definition,with,the,given,name,throws,beans,exception,if,the,initialization,failed,see,initialize,bean;object,configure,bean,object,existing,bean,string,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> Object configureBean(Object existingBean, String beanName) throws BeansException_;1549577242;Configure the given raw bean: autowiring bean properties, applying_bean property values, applying factory callbacks such as {@code setBeanName}_and {@code setBeanFactory}, and also applying all bean post processors_(including ones which might wrap the given raw bean)._<p>This is effectively a superset of what {@link #initializeBean} provides,_fully applying the configuration specified by the corresponding bean definition._<b>Note: This method requires a bean definition for the given name!</b>_@param existingBean the existing bean instance_@param beanName the name of the bean, to be passed to it if necessary_(a bean definition of that name has to be available)_@return the bean instance to use, either the original or a wrapped one_@throws org.springframework.beans.factory.NoSuchBeanDefinitionException_if there is no bean definition with the given name_@throws BeansException if the initialization failed_@see #initializeBean;Object configureBean(Object existingBean, String beanName) throws BeansException_;configure,the,given,raw,bean,autowiring,bean,properties,applying,bean,property,values,applying,factory,callbacks,such,as,code,set,bean,name,and,code,set,bean,factory,and,also,applying,all,bean,post,processors,including,ones,which,might,wrap,the,given,raw,bean,p,this,is,effectively,a,superset,of,what,link,initialize,bean,provides,fully,applying,the,configuration,specified,by,the,corresponding,bean,definition,b,note,this,method,requires,a,bean,definition,for,the,given,name,b,param,existing,bean,the,existing,bean,instance,param,bean,name,the,name,of,the,bean,to,be,passed,to,it,if,necessary,a,bean,definition,of,that,name,has,to,be,available,return,the,bean,instance,to,use,either,the,original,or,a,wrapped,one,throws,org,springframework,beans,factory,no,such,bean,definition,exception,if,there,is,no,bean,definition,with,the,given,name,throws,beans,exception,if,the,initialization,failed,see,initialize,bean;object,configure,bean,object,existing,bean,string,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> Object createBean(Class<?> beanClass, int autowireMode, boolean dependencyCheck) throws BeansException_;1368546246;Fully create a new bean instance of the given class with the specified_autowire strategy. All constants defined in this interface are supported here._<p>Performs full initialization of the bean, including all applicable_{@link BeanPostProcessor BeanPostProcessors}. This is effectively a superset_of what {@link #autowire} provides, adding {@link #initializeBean} behavior._@param beanClass the class of the bean to create_@param autowireMode by name or type, using the constants in this interface_@param dependencyCheck whether to perform a dependency check for objects_(not applicable to autowiring a constructor, thus ignored there)_@return the new bean instance_@throws BeansException if instantiation or wiring failed_@see #AUTOWIRE_NO_@see #AUTOWIRE_BY_NAME_@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_CONSTRUCTOR;Object createBean(Class<?> beanClass, int autowireMode, boolean dependencyCheck) throws BeansException_;fully,create,a,new,bean,instance,of,the,given,class,with,the,specified,autowire,strategy,all,constants,defined,in,this,interface,are,supported,here,p,performs,full,initialization,of,the,bean,including,all,applicable,link,bean,post,processor,bean,post,processors,this,is,effectively,a,superset,of,what,link,autowire,provides,adding,link,initialize,bean,behavior,param,bean,class,the,class,of,the,bean,to,create,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,param,dependency,check,whether,to,perform,a,dependency,check,for,objects,not,applicable,to,autowiring,a,constructor,thus,ignored,there,return,the,new,bean,instance,throws,beans,exception,if,instantiation,or,wiring,failed,see,see,see,see;object,create,bean,class,bean,class,int,autowire,mode,boolean,dependency,check,throws,beans,exception
AutowireCapableBeanFactory -> Object createBean(Class<?> beanClass, int autowireMode, boolean dependencyCheck) throws BeansException_;1458483997;Fully create a new bean instance of the given class with the specified_autowire strategy. All constants defined in this interface are supported here._<p>Performs full initialization of the bean, including all applicable_{@link BeanPostProcessor BeanPostProcessors}. This is effectively a superset_of what {@link #autowire} provides, adding {@link #initializeBean} behavior._@param beanClass the class of the bean to create_@param autowireMode by name or type, using the constants in this interface_@param dependencyCheck whether to perform a dependency check for objects_(not applicable to autowiring a constructor, thus ignored there)_@return the new bean instance_@throws BeansException if instantiation or wiring failed_@see #AUTOWIRE_NO_@see #AUTOWIRE_BY_NAME_@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_CONSTRUCTOR;Object createBean(Class<?> beanClass, int autowireMode, boolean dependencyCheck) throws BeansException_;fully,create,a,new,bean,instance,of,the,given,class,with,the,specified,autowire,strategy,all,constants,defined,in,this,interface,are,supported,here,p,performs,full,initialization,of,the,bean,including,all,applicable,link,bean,post,processor,bean,post,processors,this,is,effectively,a,superset,of,what,link,autowire,provides,adding,link,initialize,bean,behavior,param,bean,class,the,class,of,the,bean,to,create,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,param,dependency,check,whether,to,perform,a,dependency,check,for,objects,not,applicable,to,autowiring,a,constructor,thus,ignored,there,return,the,new,bean,instance,throws,beans,exception,if,instantiation,or,wiring,failed,see,see,see,see;object,create,bean,class,bean,class,int,autowire,mode,boolean,dependency,check,throws,beans,exception
AutowireCapableBeanFactory -> Object createBean(Class<?> beanClass, int autowireMode, boolean dependencyCheck) throws BeansException_;1470948126;Fully create a new bean instance of the given class with the specified_autowire strategy. All constants defined in this interface are supported here._<p>Performs full initialization of the bean, including all applicable_{@link BeanPostProcessor BeanPostProcessors}. This is effectively a superset_of what {@link #autowire} provides, adding {@link #initializeBean} behavior._@param beanClass the class of the bean to create_@param autowireMode by name or type, using the constants in this interface_@param dependencyCheck whether to perform a dependency check for objects_(not applicable to autowiring a constructor, thus ignored there)_@return the new bean instance_@throws BeansException if instantiation or wiring failed_@see #AUTOWIRE_NO_@see #AUTOWIRE_BY_NAME_@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_CONSTRUCTOR;Object createBean(Class<?> beanClass, int autowireMode, boolean dependencyCheck) throws BeansException_;fully,create,a,new,bean,instance,of,the,given,class,with,the,specified,autowire,strategy,all,constants,defined,in,this,interface,are,supported,here,p,performs,full,initialization,of,the,bean,including,all,applicable,link,bean,post,processor,bean,post,processors,this,is,effectively,a,superset,of,what,link,autowire,provides,adding,link,initialize,bean,behavior,param,bean,class,the,class,of,the,bean,to,create,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,param,dependency,check,whether,to,perform,a,dependency,check,for,objects,not,applicable,to,autowiring,a,constructor,thus,ignored,there,return,the,new,bean,instance,throws,beans,exception,if,instantiation,or,wiring,failed,see,see,see,see;object,create,bean,class,bean,class,int,autowire,mode,boolean,dependency,check,throws,beans,exception
AutowireCapableBeanFactory -> Object createBean(Class<?> beanClass, int autowireMode, boolean dependencyCheck) throws BeansException_;1470952254;Fully create a new bean instance of the given class with the specified_autowire strategy. All constants defined in this interface are supported here._<p>Performs full initialization of the bean, including all applicable_{@link BeanPostProcessor BeanPostProcessors}. This is effectively a superset_of what {@link #autowire} provides, adding {@link #initializeBean} behavior._@param beanClass the class of the bean to create_@param autowireMode by name or type, using the constants in this interface_@param dependencyCheck whether to perform a dependency check for objects_(not applicable to autowiring a constructor, thus ignored there)_@return the new bean instance_@throws BeansException if instantiation or wiring failed_@see #AUTOWIRE_NO_@see #AUTOWIRE_BY_NAME_@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_CONSTRUCTOR;Object createBean(Class<?> beanClass, int autowireMode, boolean dependencyCheck) throws BeansException_;fully,create,a,new,bean,instance,of,the,given,class,with,the,specified,autowire,strategy,all,constants,defined,in,this,interface,are,supported,here,p,performs,full,initialization,of,the,bean,including,all,applicable,link,bean,post,processor,bean,post,processors,this,is,effectively,a,superset,of,what,link,autowire,provides,adding,link,initialize,bean,behavior,param,bean,class,the,class,of,the,bean,to,create,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,param,dependency,check,whether,to,perform,a,dependency,check,for,objects,not,applicable,to,autowiring,a,constructor,thus,ignored,there,return,the,new,bean,instance,throws,beans,exception,if,instantiation,or,wiring,failed,see,see,see,see;object,create,bean,class,bean,class,int,autowire,mode,boolean,dependency,check,throws,beans,exception
AutowireCapableBeanFactory -> Object createBean(Class<?> beanClass, int autowireMode, boolean dependencyCheck) throws BeansException_;1495868221;Fully create a new bean instance of the given class with the specified_autowire strategy. All constants defined in this interface are supported here._<p>Performs full initialization of the bean, including all applicable_{@link BeanPostProcessor BeanPostProcessors}. This is effectively a superset_of what {@link #autowire} provides, adding {@link #initializeBean} behavior._@param beanClass the class of the bean to create_@param autowireMode by name or type, using the constants in this interface_@param dependencyCheck whether to perform a dependency check for objects_(not applicable to autowiring a constructor, thus ignored there)_@return the new bean instance_@throws BeansException if instantiation or wiring failed_@see #AUTOWIRE_NO_@see #AUTOWIRE_BY_NAME_@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_CONSTRUCTOR;Object createBean(Class<?> beanClass, int autowireMode, boolean dependencyCheck) throws BeansException_;fully,create,a,new,bean,instance,of,the,given,class,with,the,specified,autowire,strategy,all,constants,defined,in,this,interface,are,supported,here,p,performs,full,initialization,of,the,bean,including,all,applicable,link,bean,post,processor,bean,post,processors,this,is,effectively,a,superset,of,what,link,autowire,provides,adding,link,initialize,bean,behavior,param,bean,class,the,class,of,the,bean,to,create,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,param,dependency,check,whether,to,perform,a,dependency,check,for,objects,not,applicable,to,autowiring,a,constructor,thus,ignored,there,return,the,new,bean,instance,throws,beans,exception,if,instantiation,or,wiring,failed,see,see,see,see;object,create,bean,class,bean,class,int,autowire,mode,boolean,dependency,check,throws,beans,exception
AutowireCapableBeanFactory -> Object createBean(Class<?> beanClass, int autowireMode, boolean dependencyCheck) throws BeansException_;1496259743;Fully create a new bean instance of the given class with the specified_autowire strategy. All constants defined in this interface are supported here._<p>Performs full initialization of the bean, including all applicable_{@link BeanPostProcessor BeanPostProcessors}. This is effectively a superset_of what {@link #autowire} provides, adding {@link #initializeBean} behavior._@param beanClass the class of the bean to create_@param autowireMode by name or type, using the constants in this interface_@param dependencyCheck whether to perform a dependency check for objects_(not applicable to autowiring a constructor, thus ignored there)_@return the new bean instance_@throws BeansException if instantiation or wiring failed_@see #AUTOWIRE_NO_@see #AUTOWIRE_BY_NAME_@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_CONSTRUCTOR;Object createBean(Class<?> beanClass, int autowireMode, boolean dependencyCheck) throws BeansException_;fully,create,a,new,bean,instance,of,the,given,class,with,the,specified,autowire,strategy,all,constants,defined,in,this,interface,are,supported,here,p,performs,full,initialization,of,the,bean,including,all,applicable,link,bean,post,processor,bean,post,processors,this,is,effectively,a,superset,of,what,link,autowire,provides,adding,link,initialize,bean,behavior,param,bean,class,the,class,of,the,bean,to,create,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,param,dependency,check,whether,to,perform,a,dependency,check,for,objects,not,applicable,to,autowiring,a,constructor,thus,ignored,there,return,the,new,bean,instance,throws,beans,exception,if,instantiation,or,wiring,failed,see,see,see,see;object,create,bean,class,bean,class,int,autowire,mode,boolean,dependency,check,throws,beans,exception
AutowireCapableBeanFactory -> Object createBean(Class<?> beanClass, int autowireMode, boolean dependencyCheck) throws BeansException_;1496837955;Fully create a new bean instance of the given class with the specified_autowire strategy. All constants defined in this interface are supported here._<p>Performs full initialization of the bean, including all applicable_{@link BeanPostProcessor BeanPostProcessors}. This is effectively a superset_of what {@link #autowire} provides, adding {@link #initializeBean} behavior._@param beanClass the class of the bean to create_@param autowireMode by name or type, using the constants in this interface_@param dependencyCheck whether to perform a dependency check for objects_(not applicable to autowiring a constructor, thus ignored there)_@return the new bean instance_@throws BeansException if instantiation or wiring failed_@see #AUTOWIRE_NO_@see #AUTOWIRE_BY_NAME_@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_CONSTRUCTOR;Object createBean(Class<?> beanClass, int autowireMode, boolean dependencyCheck) throws BeansException_;fully,create,a,new,bean,instance,of,the,given,class,with,the,specified,autowire,strategy,all,constants,defined,in,this,interface,are,supported,here,p,performs,full,initialization,of,the,bean,including,all,applicable,link,bean,post,processor,bean,post,processors,this,is,effectively,a,superset,of,what,link,autowire,provides,adding,link,initialize,bean,behavior,param,bean,class,the,class,of,the,bean,to,create,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,param,dependency,check,whether,to,perform,a,dependency,check,for,objects,not,applicable,to,autowiring,a,constructor,thus,ignored,there,return,the,new,bean,instance,throws,beans,exception,if,instantiation,or,wiring,failed,see,see,see,see;object,create,bean,class,bean,class,int,autowire,mode,boolean,dependency,check,throws,beans,exception
AutowireCapableBeanFactory -> Object createBean(Class<?> beanClass, int autowireMode, boolean dependencyCheck) throws BeansException_;1503007895;Fully create a new bean instance of the given class with the specified_autowire strategy. All constants defined in this interface are supported here._<p>Performs full initialization of the bean, including all applicable_{@link BeanPostProcessor BeanPostProcessors}. This is effectively a superset_of what {@link #autowire} provides, adding {@link #initializeBean} behavior._@param beanClass the class of the bean to create_@param autowireMode by name or type, using the constants in this interface_@param dependencyCheck whether to perform a dependency check for objects_(not applicable to autowiring a constructor, thus ignored there)_@return the new bean instance_@throws BeansException if instantiation or wiring failed_@see #AUTOWIRE_NO_@see #AUTOWIRE_BY_NAME_@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_CONSTRUCTOR;Object createBean(Class<?> beanClass, int autowireMode, boolean dependencyCheck) throws BeansException_;fully,create,a,new,bean,instance,of,the,given,class,with,the,specified,autowire,strategy,all,constants,defined,in,this,interface,are,supported,here,p,performs,full,initialization,of,the,bean,including,all,applicable,link,bean,post,processor,bean,post,processors,this,is,effectively,a,superset,of,what,link,autowire,provides,adding,link,initialize,bean,behavior,param,bean,class,the,class,of,the,bean,to,create,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,param,dependency,check,whether,to,perform,a,dependency,check,for,objects,not,applicable,to,autowiring,a,constructor,thus,ignored,there,return,the,new,bean,instance,throws,beans,exception,if,instantiation,or,wiring,failed,see,see,see,see;object,create,bean,class,bean,class,int,autowire,mode,boolean,dependency,check,throws,beans,exception
AutowireCapableBeanFactory -> Object createBean(Class<?> beanClass, int autowireMode, boolean dependencyCheck) throws BeansException_;1530174524;Fully create a new bean instance of the given class with the specified_autowire strategy. All constants defined in this interface are supported here._<p>Performs full initialization of the bean, including all applicable_{@link BeanPostProcessor BeanPostProcessors}. This is effectively a superset_of what {@link #autowire} provides, adding {@link #initializeBean} behavior._@param beanClass the class of the bean to create_@param autowireMode by name or type, using the constants in this interface_@param dependencyCheck whether to perform a dependency check for objects_(not applicable to autowiring a constructor, thus ignored there)_@return the new bean instance_@throws BeansException if instantiation or wiring failed_@see #AUTOWIRE_NO_@see #AUTOWIRE_BY_NAME_@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_CONSTRUCTOR;Object createBean(Class<?> beanClass, int autowireMode, boolean dependencyCheck) throws BeansException_;fully,create,a,new,bean,instance,of,the,given,class,with,the,specified,autowire,strategy,all,constants,defined,in,this,interface,are,supported,here,p,performs,full,initialization,of,the,bean,including,all,applicable,link,bean,post,processor,bean,post,processors,this,is,effectively,a,superset,of,what,link,autowire,provides,adding,link,initialize,bean,behavior,param,bean,class,the,class,of,the,bean,to,create,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,param,dependency,check,whether,to,perform,a,dependency,check,for,objects,not,applicable,to,autowiring,a,constructor,thus,ignored,there,return,the,new,bean,instance,throws,beans,exception,if,instantiation,or,wiring,failed,see,see,see,see;object,create,bean,class,bean,class,int,autowire,mode,boolean,dependency,check,throws,beans,exception
AutowireCapableBeanFactory -> Object createBean(Class<?> beanClass, int autowireMode, boolean dependencyCheck) throws BeansException_;1535064541;Fully create a new bean instance of the given class with the specified_autowire strategy. All constants defined in this interface are supported here._<p>Performs full initialization of the bean, including all applicable_{@link BeanPostProcessor BeanPostProcessors}. This is effectively a superset_of what {@link #autowire} provides, adding {@link #initializeBean} behavior._@param beanClass the class of the bean to create_@param autowireMode by name or type, using the constants in this interface_@param dependencyCheck whether to perform a dependency check for objects_(not applicable to autowiring a constructor, thus ignored there)_@return the new bean instance_@throws BeansException if instantiation or wiring failed_@see #AUTOWIRE_NO_@see #AUTOWIRE_BY_NAME_@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_CONSTRUCTOR;Object createBean(Class<?> beanClass, int autowireMode, boolean dependencyCheck) throws BeansException_;fully,create,a,new,bean,instance,of,the,given,class,with,the,specified,autowire,strategy,all,constants,defined,in,this,interface,are,supported,here,p,performs,full,initialization,of,the,bean,including,all,applicable,link,bean,post,processor,bean,post,processors,this,is,effectively,a,superset,of,what,link,autowire,provides,adding,link,initialize,bean,behavior,param,bean,class,the,class,of,the,bean,to,create,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,param,dependency,check,whether,to,perform,a,dependency,check,for,objects,not,applicable,to,autowiring,a,constructor,thus,ignored,there,return,the,new,bean,instance,throws,beans,exception,if,instantiation,or,wiring,failed,see,see,see,see;object,create,bean,class,bean,class,int,autowire,mode,boolean,dependency,check,throws,beans,exception
AutowireCapableBeanFactory -> Object createBean(Class<?> beanClass, int autowireMode, boolean dependencyCheck) throws BeansException_;1549551674;Fully create a new bean instance of the given class with the specified_autowire strategy. All constants defined in this interface are supported here._<p>Performs full initialization of the bean, including all applicable_{@link BeanPostProcessor BeanPostProcessors}. This is effectively a superset_of what {@link #autowire} provides, adding {@link #initializeBean} behavior._@param beanClass the class of the bean to create_@param autowireMode by name or type, using the constants in this interface_@param dependencyCheck whether to perform a dependency check for objects_(not applicable to autowiring a constructor, thus ignored there)_@return the new bean instance_@throws BeansException if instantiation or wiring failed_@see #AUTOWIRE_NO_@see #AUTOWIRE_BY_NAME_@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_CONSTRUCTOR;Object createBean(Class<?> beanClass, int autowireMode, boolean dependencyCheck) throws BeansException_;fully,create,a,new,bean,instance,of,the,given,class,with,the,specified,autowire,strategy,all,constants,defined,in,this,interface,are,supported,here,p,performs,full,initialization,of,the,bean,including,all,applicable,link,bean,post,processor,bean,post,processors,this,is,effectively,a,superset,of,what,link,autowire,provides,adding,link,initialize,bean,behavior,param,bean,class,the,class,of,the,bean,to,create,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,param,dependency,check,whether,to,perform,a,dependency,check,for,objects,not,applicable,to,autowiring,a,constructor,thus,ignored,there,return,the,new,bean,instance,throws,beans,exception,if,instantiation,or,wiring,failed,see,see,see,see;object,create,bean,class,bean,class,int,autowire,mode,boolean,dependency,check,throws,beans,exception
AutowireCapableBeanFactory -> Object createBean(Class<?> beanClass, int autowireMode, boolean dependencyCheck) throws BeansException_;1549577242;Fully create a new bean instance of the given class with the specified_autowire strategy. All constants defined in this interface are supported here._<p>Performs full initialization of the bean, including all applicable_{@link BeanPostProcessor BeanPostProcessors}. This is effectively a superset_of what {@link #autowire} provides, adding {@link #initializeBean} behavior._@param beanClass the class of the bean to create_@param autowireMode by name or type, using the constants in this interface_@param dependencyCheck whether to perform a dependency check for objects_(not applicable to autowiring a constructor, thus ignored there)_@return the new bean instance_@throws BeansException if instantiation or wiring failed_@see #AUTOWIRE_NO_@see #AUTOWIRE_BY_NAME_@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_CONSTRUCTOR;Object createBean(Class<?> beanClass, int autowireMode, boolean dependencyCheck) throws BeansException_;fully,create,a,new,bean,instance,of,the,given,class,with,the,specified,autowire,strategy,all,constants,defined,in,this,interface,are,supported,here,p,performs,full,initialization,of,the,bean,including,all,applicable,link,bean,post,processor,bean,post,processors,this,is,effectively,a,superset,of,what,link,autowire,provides,adding,link,initialize,bean,behavior,param,bean,class,the,class,of,the,bean,to,create,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,param,dependency,check,whether,to,perform,a,dependency,check,for,objects,not,applicable,to,autowiring,a,constructor,thus,ignored,there,return,the,new,bean,instance,throws,beans,exception,if,instantiation,or,wiring,failed,see,see,see,see;object,create,bean,class,bean,class,int,autowire,mode,boolean,dependency,check,throws,beans,exception
AutowireCapableBeanFactory -> void applyBeanPropertyValues(Object existingBean, String beanName) throws BeansException_;1328020251;Apply the property values of the bean definition with the given name to_the given bean instance. The bean definition can either define a fully_self-contained bean, reusing its property values, or just property values_meant to be used for existing bean instances._<p>This method does <i>not</i> autowire bean properties_ it just applies_explicitly defined property values. Use the {@link #autowireBeanProperties}_method to autowire an existing bean instance._<b>Note: This method requires a bean definition for the given name!</b>_<p>Does <i>not</i> apply standard {@link BeanPostProcessor BeanPostProcessors}_callbacks or perform any further initialization of the bean. This interface_offers distinct, fine-grained operations for those purposes, for example_{@link #initializeBean}. However, {@link InstantiationAwareBeanPostProcessor}_callbacks are applied, if applicable to the configuration of the instance._@param existingBean the existing bean instance_@param beanName the name of the bean definition in the bean factory_(a bean definition of that name has to be available)_@throws org.springframework.beans.factory.NoSuchBeanDefinitionException_if there is no bean definition with the given name_@throws BeansException if applying the property values failed_@see #autowireBeanProperties;void applyBeanPropertyValues(Object existingBean, String beanName) throws BeansException_;apply,the,property,values,of,the,bean,definition,with,the,given,name,to,the,given,bean,instance,the,bean,definition,can,either,define,a,fully,self,contained,bean,reusing,its,property,values,or,just,property,values,meant,to,be,used,for,existing,bean,instances,p,this,method,does,i,not,i,autowire,bean,properties,it,just,applies,explicitly,defined,property,values,use,the,link,autowire,bean,properties,method,to,autowire,an,existing,bean,instance,b,note,this,method,requires,a,bean,definition,for,the,given,name,b,p,does,i,not,i,apply,standard,link,bean,post,processor,bean,post,processors,callbacks,or,perform,any,further,initialization,of,the,bean,this,interface,offers,distinct,fine,grained,operations,for,those,purposes,for,example,link,initialize,bean,however,link,instantiation,aware,bean,post,processor,callbacks,are,applied,if,applicable,to,the,configuration,of,the,instance,param,existing,bean,the,existing,bean,instance,param,bean,name,the,name,of,the,bean,definition,in,the,bean,factory,a,bean,definition,of,that,name,has,to,be,available,throws,org,springframework,beans,factory,no,such,bean,definition,exception,if,there,is,no,bean,definition,with,the,given,name,throws,beans,exception,if,applying,the,property,values,failed,see,autowire,bean,properties;void,apply,bean,property,values,object,existing,bean,string,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> void applyBeanPropertyValues(Object existingBean, String beanName) throws BeansException_;1356735495;Apply the property values of the bean definition with the given name to_the given bean instance. The bean definition can either define a fully_self-contained bean, reusing its property values, or just property values_meant to be used for existing bean instances._<p>This method does <i>not</i> autowire bean properties_ it just applies_explicitly defined property values. Use the {@link #autowireBeanProperties}_method to autowire an existing bean instance._<b>Note: This method requires a bean definition for the given name!</b>_<p>Does <i>not</i> apply standard {@link BeanPostProcessor BeanPostProcessors}_callbacks or perform any further initialization of the bean. This interface_offers distinct, fine-grained operations for those purposes, for example_{@link #initializeBean}. However, {@link InstantiationAwareBeanPostProcessor}_callbacks are applied, if applicable to the configuration of the instance._@param existingBean the existing bean instance_@param beanName the name of the bean definition in the bean factory_(a bean definition of that name has to be available)_@throws org.springframework.beans.factory.NoSuchBeanDefinitionException_if there is no bean definition with the given name_@throws BeansException if applying the property values failed_@see #autowireBeanProperties;void applyBeanPropertyValues(Object existingBean, String beanName) throws BeansException_;apply,the,property,values,of,the,bean,definition,with,the,given,name,to,the,given,bean,instance,the,bean,definition,can,either,define,a,fully,self,contained,bean,reusing,its,property,values,or,just,property,values,meant,to,be,used,for,existing,bean,instances,p,this,method,does,i,not,i,autowire,bean,properties,it,just,applies,explicitly,defined,property,values,use,the,link,autowire,bean,properties,method,to,autowire,an,existing,bean,instance,b,note,this,method,requires,a,bean,definition,for,the,given,name,b,p,does,i,not,i,apply,standard,link,bean,post,processor,bean,post,processors,callbacks,or,perform,any,further,initialization,of,the,bean,this,interface,offers,distinct,fine,grained,operations,for,those,purposes,for,example,link,initialize,bean,however,link,instantiation,aware,bean,post,processor,callbacks,are,applied,if,applicable,to,the,configuration,of,the,instance,param,existing,bean,the,existing,bean,instance,param,bean,name,the,name,of,the,bean,definition,in,the,bean,factory,a,bean,definition,of,that,name,has,to,be,available,throws,org,springframework,beans,factory,no,such,bean,definition,exception,if,there,is,no,bean,definition,with,the,given,name,throws,beans,exception,if,applying,the,property,values,failed,see,autowire,bean,properties;void,apply,bean,property,values,object,existing,bean,string,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> void applyBeanPropertyValues(Object existingBean, String beanName) throws BeansException_;1364503447;Apply the property values of the bean definition with the given name to_the given bean instance. The bean definition can either define a fully_self-contained bean, reusing its property values, or just property values_meant to be used for existing bean instances._<p>This method does <i>not</i> autowire bean properties_ it just applies_explicitly defined property values. Use the {@link #autowireBeanProperties}_method to autowire an existing bean instance._<b>Note: This method requires a bean definition for the given name!</b>_<p>Does <i>not</i> apply standard {@link BeanPostProcessor BeanPostProcessors}_callbacks or perform any further initialization of the bean. This interface_offers distinct, fine-grained operations for those purposes, for example_{@link #initializeBean}. However, {@link InstantiationAwareBeanPostProcessor}_callbacks are applied, if applicable to the configuration of the instance._@param existingBean the existing bean instance_@param beanName the name of the bean definition in the bean factory_(a bean definition of that name has to be available)_@throws org.springframework.beans.factory.NoSuchBeanDefinitionException_if there is no bean definition with the given name_@throws BeansException if applying the property values failed_@see #autowireBeanProperties;void applyBeanPropertyValues(Object existingBean, String beanName) throws BeansException_;apply,the,property,values,of,the,bean,definition,with,the,given,name,to,the,given,bean,instance,the,bean,definition,can,either,define,a,fully,self,contained,bean,reusing,its,property,values,or,just,property,values,meant,to,be,used,for,existing,bean,instances,p,this,method,does,i,not,i,autowire,bean,properties,it,just,applies,explicitly,defined,property,values,use,the,link,autowire,bean,properties,method,to,autowire,an,existing,bean,instance,b,note,this,method,requires,a,bean,definition,for,the,given,name,b,p,does,i,not,i,apply,standard,link,bean,post,processor,bean,post,processors,callbacks,or,perform,any,further,initialization,of,the,bean,this,interface,offers,distinct,fine,grained,operations,for,those,purposes,for,example,link,initialize,bean,however,link,instantiation,aware,bean,post,processor,callbacks,are,applied,if,applicable,to,the,configuration,of,the,instance,param,existing,bean,the,existing,bean,instance,param,bean,name,the,name,of,the,bean,definition,in,the,bean,factory,a,bean,definition,of,that,name,has,to,be,available,throws,org,springframework,beans,factory,no,such,bean,definition,exception,if,there,is,no,bean,definition,with,the,given,name,throws,beans,exception,if,applying,the,property,values,failed,see,autowire,bean,properties;void,apply,bean,property,values,object,existing,bean,string,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> void applyBeanPropertyValues(Object existingBean, String beanName) throws BeansException_;1368546246;Apply the property values of the bean definition with the given name to_the given bean instance. The bean definition can either define a fully_self-contained bean, reusing its property values, or just property values_meant to be used for existing bean instances._<p>This method does <i>not</i> autowire bean properties_ it just applies_explicitly defined property values. Use the {@link #autowireBeanProperties}_method to autowire an existing bean instance._<b>Note: This method requires a bean definition for the given name!</b>_<p>Does <i>not</i> apply standard {@link BeanPostProcessor BeanPostProcessors}_callbacks or perform any further initialization of the bean. This interface_offers distinct, fine-grained operations for those purposes, for example_{@link #initializeBean}. However, {@link InstantiationAwareBeanPostProcessor}_callbacks are applied, if applicable to the configuration of the instance._@param existingBean the existing bean instance_@param beanName the name of the bean definition in the bean factory_(a bean definition of that name has to be available)_@throws org.springframework.beans.factory.NoSuchBeanDefinitionException_if there is no bean definition with the given name_@throws BeansException if applying the property values failed_@see #autowireBeanProperties;void applyBeanPropertyValues(Object existingBean, String beanName) throws BeansException_;apply,the,property,values,of,the,bean,definition,with,the,given,name,to,the,given,bean,instance,the,bean,definition,can,either,define,a,fully,self,contained,bean,reusing,its,property,values,or,just,property,values,meant,to,be,used,for,existing,bean,instances,p,this,method,does,i,not,i,autowire,bean,properties,it,just,applies,explicitly,defined,property,values,use,the,link,autowire,bean,properties,method,to,autowire,an,existing,bean,instance,b,note,this,method,requires,a,bean,definition,for,the,given,name,b,p,does,i,not,i,apply,standard,link,bean,post,processor,bean,post,processors,callbacks,or,perform,any,further,initialization,of,the,bean,this,interface,offers,distinct,fine,grained,operations,for,those,purposes,for,example,link,initialize,bean,however,link,instantiation,aware,bean,post,processor,callbacks,are,applied,if,applicable,to,the,configuration,of,the,instance,param,existing,bean,the,existing,bean,instance,param,bean,name,the,name,of,the,bean,definition,in,the,bean,factory,a,bean,definition,of,that,name,has,to,be,available,throws,org,springframework,beans,factory,no,such,bean,definition,exception,if,there,is,no,bean,definition,with,the,given,name,throws,beans,exception,if,applying,the,property,values,failed,see,autowire,bean,properties;void,apply,bean,property,values,object,existing,bean,string,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> void applyBeanPropertyValues(Object existingBean, String beanName) throws BeansException_;1458483997;Apply the property values of the bean definition with the given name to_the given bean instance. The bean definition can either define a fully_self-contained bean, reusing its property values, or just property values_meant to be used for existing bean instances._<p>This method does <i>not</i> autowire bean properties_ it just applies_explicitly defined property values. Use the {@link #autowireBeanProperties}_method to autowire an existing bean instance._<b>Note: This method requires a bean definition for the given name!</b>_<p>Does <i>not</i> apply standard {@link BeanPostProcessor BeanPostProcessors}_callbacks or perform any further initialization of the bean. This interface_offers distinct, fine-grained operations for those purposes, for example_{@link #initializeBean}. However, {@link InstantiationAwareBeanPostProcessor}_callbacks are applied, if applicable to the configuration of the instance._@param existingBean the existing bean instance_@param beanName the name of the bean definition in the bean factory_(a bean definition of that name has to be available)_@throws org.springframework.beans.factory.NoSuchBeanDefinitionException_if there is no bean definition with the given name_@throws BeansException if applying the property values failed_@see #autowireBeanProperties;void applyBeanPropertyValues(Object existingBean, String beanName) throws BeansException_;apply,the,property,values,of,the,bean,definition,with,the,given,name,to,the,given,bean,instance,the,bean,definition,can,either,define,a,fully,self,contained,bean,reusing,its,property,values,or,just,property,values,meant,to,be,used,for,existing,bean,instances,p,this,method,does,i,not,i,autowire,bean,properties,it,just,applies,explicitly,defined,property,values,use,the,link,autowire,bean,properties,method,to,autowire,an,existing,bean,instance,b,note,this,method,requires,a,bean,definition,for,the,given,name,b,p,does,i,not,i,apply,standard,link,bean,post,processor,bean,post,processors,callbacks,or,perform,any,further,initialization,of,the,bean,this,interface,offers,distinct,fine,grained,operations,for,those,purposes,for,example,link,initialize,bean,however,link,instantiation,aware,bean,post,processor,callbacks,are,applied,if,applicable,to,the,configuration,of,the,instance,param,existing,bean,the,existing,bean,instance,param,bean,name,the,name,of,the,bean,definition,in,the,bean,factory,a,bean,definition,of,that,name,has,to,be,available,throws,org,springframework,beans,factory,no,such,bean,definition,exception,if,there,is,no,bean,definition,with,the,given,name,throws,beans,exception,if,applying,the,property,values,failed,see,autowire,bean,properties;void,apply,bean,property,values,object,existing,bean,string,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> void applyBeanPropertyValues(Object existingBean, String beanName) throws BeansException_;1470948126;Apply the property values of the bean definition with the given name to_the given bean instance. The bean definition can either define a fully_self-contained bean, reusing its property values, or just property values_meant to be used for existing bean instances._<p>This method does <i>not</i> autowire bean properties_ it just applies_explicitly defined property values. Use the {@link #autowireBeanProperties}_method to autowire an existing bean instance._<b>Note: This method requires a bean definition for the given name!</b>_<p>Does <i>not</i> apply standard {@link BeanPostProcessor BeanPostProcessors}_callbacks or perform any further initialization of the bean. This interface_offers distinct, fine-grained operations for those purposes, for example_{@link #initializeBean}. However, {@link InstantiationAwareBeanPostProcessor}_callbacks are applied, if applicable to the configuration of the instance._@param existingBean the existing bean instance_@param beanName the name of the bean definition in the bean factory_(a bean definition of that name has to be available)_@throws org.springframework.beans.factory.NoSuchBeanDefinitionException_if there is no bean definition with the given name_@throws BeansException if applying the property values failed_@see #autowireBeanProperties;void applyBeanPropertyValues(Object existingBean, String beanName) throws BeansException_;apply,the,property,values,of,the,bean,definition,with,the,given,name,to,the,given,bean,instance,the,bean,definition,can,either,define,a,fully,self,contained,bean,reusing,its,property,values,or,just,property,values,meant,to,be,used,for,existing,bean,instances,p,this,method,does,i,not,i,autowire,bean,properties,it,just,applies,explicitly,defined,property,values,use,the,link,autowire,bean,properties,method,to,autowire,an,existing,bean,instance,b,note,this,method,requires,a,bean,definition,for,the,given,name,b,p,does,i,not,i,apply,standard,link,bean,post,processor,bean,post,processors,callbacks,or,perform,any,further,initialization,of,the,bean,this,interface,offers,distinct,fine,grained,operations,for,those,purposes,for,example,link,initialize,bean,however,link,instantiation,aware,bean,post,processor,callbacks,are,applied,if,applicable,to,the,configuration,of,the,instance,param,existing,bean,the,existing,bean,instance,param,bean,name,the,name,of,the,bean,definition,in,the,bean,factory,a,bean,definition,of,that,name,has,to,be,available,throws,org,springframework,beans,factory,no,such,bean,definition,exception,if,there,is,no,bean,definition,with,the,given,name,throws,beans,exception,if,applying,the,property,values,failed,see,autowire,bean,properties;void,apply,bean,property,values,object,existing,bean,string,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> void applyBeanPropertyValues(Object existingBean, String beanName) throws BeansException_;1470952254;Apply the property values of the bean definition with the given name to_the given bean instance. The bean definition can either define a fully_self-contained bean, reusing its property values, or just property values_meant to be used for existing bean instances._<p>This method does <i>not</i> autowire bean properties_ it just applies_explicitly defined property values. Use the {@link #autowireBeanProperties}_method to autowire an existing bean instance._<b>Note: This method requires a bean definition for the given name!</b>_<p>Does <i>not</i> apply standard {@link BeanPostProcessor BeanPostProcessors}_callbacks or perform any further initialization of the bean. This interface_offers distinct, fine-grained operations for those purposes, for example_{@link #initializeBean}. However, {@link InstantiationAwareBeanPostProcessor}_callbacks are applied, if applicable to the configuration of the instance._@param existingBean the existing bean instance_@param beanName the name of the bean definition in the bean factory_(a bean definition of that name has to be available)_@throws org.springframework.beans.factory.NoSuchBeanDefinitionException_if there is no bean definition with the given name_@throws BeansException if applying the property values failed_@see #autowireBeanProperties;void applyBeanPropertyValues(Object existingBean, String beanName) throws BeansException_;apply,the,property,values,of,the,bean,definition,with,the,given,name,to,the,given,bean,instance,the,bean,definition,can,either,define,a,fully,self,contained,bean,reusing,its,property,values,or,just,property,values,meant,to,be,used,for,existing,bean,instances,p,this,method,does,i,not,i,autowire,bean,properties,it,just,applies,explicitly,defined,property,values,use,the,link,autowire,bean,properties,method,to,autowire,an,existing,bean,instance,b,note,this,method,requires,a,bean,definition,for,the,given,name,b,p,does,i,not,i,apply,standard,link,bean,post,processor,bean,post,processors,callbacks,or,perform,any,further,initialization,of,the,bean,this,interface,offers,distinct,fine,grained,operations,for,those,purposes,for,example,link,initialize,bean,however,link,instantiation,aware,bean,post,processor,callbacks,are,applied,if,applicable,to,the,configuration,of,the,instance,param,existing,bean,the,existing,bean,instance,param,bean,name,the,name,of,the,bean,definition,in,the,bean,factory,a,bean,definition,of,that,name,has,to,be,available,throws,org,springframework,beans,factory,no,such,bean,definition,exception,if,there,is,no,bean,definition,with,the,given,name,throws,beans,exception,if,applying,the,property,values,failed,see,autowire,bean,properties;void,apply,bean,property,values,object,existing,bean,string,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> void applyBeanPropertyValues(Object existingBean, String beanName) throws BeansException_;1495868221;Apply the property values of the bean definition with the given name to_the given bean instance. The bean definition can either define a fully_self-contained bean, reusing its property values, or just property values_meant to be used for existing bean instances._<p>This method does <i>not</i> autowire bean properties_ it just applies_explicitly defined property values. Use the {@link #autowireBeanProperties}_method to autowire an existing bean instance._<b>Note: This method requires a bean definition for the given name!</b>_<p>Does <i>not</i> apply standard {@link BeanPostProcessor BeanPostProcessors}_callbacks or perform any further initialization of the bean. This interface_offers distinct, fine-grained operations for those purposes, for example_{@link #initializeBean}. However, {@link InstantiationAwareBeanPostProcessor}_callbacks are applied, if applicable to the configuration of the instance._@param existingBean the existing bean instance_@param beanName the name of the bean definition in the bean factory_(a bean definition of that name has to be available)_@throws org.springframework.beans.factory.NoSuchBeanDefinitionException_if there is no bean definition with the given name_@throws BeansException if applying the property values failed_@see #autowireBeanProperties;void applyBeanPropertyValues(Object existingBean, String beanName) throws BeansException_;apply,the,property,values,of,the,bean,definition,with,the,given,name,to,the,given,bean,instance,the,bean,definition,can,either,define,a,fully,self,contained,bean,reusing,its,property,values,or,just,property,values,meant,to,be,used,for,existing,bean,instances,p,this,method,does,i,not,i,autowire,bean,properties,it,just,applies,explicitly,defined,property,values,use,the,link,autowire,bean,properties,method,to,autowire,an,existing,bean,instance,b,note,this,method,requires,a,bean,definition,for,the,given,name,b,p,does,i,not,i,apply,standard,link,bean,post,processor,bean,post,processors,callbacks,or,perform,any,further,initialization,of,the,bean,this,interface,offers,distinct,fine,grained,operations,for,those,purposes,for,example,link,initialize,bean,however,link,instantiation,aware,bean,post,processor,callbacks,are,applied,if,applicable,to,the,configuration,of,the,instance,param,existing,bean,the,existing,bean,instance,param,bean,name,the,name,of,the,bean,definition,in,the,bean,factory,a,bean,definition,of,that,name,has,to,be,available,throws,org,springframework,beans,factory,no,such,bean,definition,exception,if,there,is,no,bean,definition,with,the,given,name,throws,beans,exception,if,applying,the,property,values,failed,see,autowire,bean,properties;void,apply,bean,property,values,object,existing,bean,string,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> void applyBeanPropertyValues(Object existingBean, String beanName) throws BeansException_;1496259743;Apply the property values of the bean definition with the given name to_the given bean instance. The bean definition can either define a fully_self-contained bean, reusing its property values, or just property values_meant to be used for existing bean instances._<p>This method does <i>not</i> autowire bean properties_ it just applies_explicitly defined property values. Use the {@link #autowireBeanProperties}_method to autowire an existing bean instance._<b>Note: This method requires a bean definition for the given name!</b>_<p>Does <i>not</i> apply standard {@link BeanPostProcessor BeanPostProcessors}_callbacks or perform any further initialization of the bean. This interface_offers distinct, fine-grained operations for those purposes, for example_{@link #initializeBean}. However, {@link InstantiationAwareBeanPostProcessor}_callbacks are applied, if applicable to the configuration of the instance._@param existingBean the existing bean instance_@param beanName the name of the bean definition in the bean factory_(a bean definition of that name has to be available)_@throws org.springframework.beans.factory.NoSuchBeanDefinitionException_if there is no bean definition with the given name_@throws BeansException if applying the property values failed_@see #autowireBeanProperties;void applyBeanPropertyValues(Object existingBean, String beanName) throws BeansException_;apply,the,property,values,of,the,bean,definition,with,the,given,name,to,the,given,bean,instance,the,bean,definition,can,either,define,a,fully,self,contained,bean,reusing,its,property,values,or,just,property,values,meant,to,be,used,for,existing,bean,instances,p,this,method,does,i,not,i,autowire,bean,properties,it,just,applies,explicitly,defined,property,values,use,the,link,autowire,bean,properties,method,to,autowire,an,existing,bean,instance,b,note,this,method,requires,a,bean,definition,for,the,given,name,b,p,does,i,not,i,apply,standard,link,bean,post,processor,bean,post,processors,callbacks,or,perform,any,further,initialization,of,the,bean,this,interface,offers,distinct,fine,grained,operations,for,those,purposes,for,example,link,initialize,bean,however,link,instantiation,aware,bean,post,processor,callbacks,are,applied,if,applicable,to,the,configuration,of,the,instance,param,existing,bean,the,existing,bean,instance,param,bean,name,the,name,of,the,bean,definition,in,the,bean,factory,a,bean,definition,of,that,name,has,to,be,available,throws,org,springframework,beans,factory,no,such,bean,definition,exception,if,there,is,no,bean,definition,with,the,given,name,throws,beans,exception,if,applying,the,property,values,failed,see,autowire,bean,properties;void,apply,bean,property,values,object,existing,bean,string,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> void applyBeanPropertyValues(Object existingBean, String beanName) throws BeansException_;1496837955;Apply the property values of the bean definition with the given name to_the given bean instance. The bean definition can either define a fully_self-contained bean, reusing its property values, or just property values_meant to be used for existing bean instances._<p>This method does <i>not</i> autowire bean properties_ it just applies_explicitly defined property values. Use the {@link #autowireBeanProperties}_method to autowire an existing bean instance._<b>Note: This method requires a bean definition for the given name!</b>_<p>Does <i>not</i> apply standard {@link BeanPostProcessor BeanPostProcessors}_callbacks or perform any further initialization of the bean. This interface_offers distinct, fine-grained operations for those purposes, for example_{@link #initializeBean}. However, {@link InstantiationAwareBeanPostProcessor}_callbacks are applied, if applicable to the configuration of the instance._@param existingBean the existing bean instance_@param beanName the name of the bean definition in the bean factory_(a bean definition of that name has to be available)_@throws org.springframework.beans.factory.NoSuchBeanDefinitionException_if there is no bean definition with the given name_@throws BeansException if applying the property values failed_@see #autowireBeanProperties;void applyBeanPropertyValues(Object existingBean, String beanName) throws BeansException_;apply,the,property,values,of,the,bean,definition,with,the,given,name,to,the,given,bean,instance,the,bean,definition,can,either,define,a,fully,self,contained,bean,reusing,its,property,values,or,just,property,values,meant,to,be,used,for,existing,bean,instances,p,this,method,does,i,not,i,autowire,bean,properties,it,just,applies,explicitly,defined,property,values,use,the,link,autowire,bean,properties,method,to,autowire,an,existing,bean,instance,b,note,this,method,requires,a,bean,definition,for,the,given,name,b,p,does,i,not,i,apply,standard,link,bean,post,processor,bean,post,processors,callbacks,or,perform,any,further,initialization,of,the,bean,this,interface,offers,distinct,fine,grained,operations,for,those,purposes,for,example,link,initialize,bean,however,link,instantiation,aware,bean,post,processor,callbacks,are,applied,if,applicable,to,the,configuration,of,the,instance,param,existing,bean,the,existing,bean,instance,param,bean,name,the,name,of,the,bean,definition,in,the,bean,factory,a,bean,definition,of,that,name,has,to,be,available,throws,org,springframework,beans,factory,no,such,bean,definition,exception,if,there,is,no,bean,definition,with,the,given,name,throws,beans,exception,if,applying,the,property,values,failed,see,autowire,bean,properties;void,apply,bean,property,values,object,existing,bean,string,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> void applyBeanPropertyValues(Object existingBean, String beanName) throws BeansException_;1503007895;Apply the property values of the bean definition with the given name to_the given bean instance. The bean definition can either define a fully_self-contained bean, reusing its property values, or just property values_meant to be used for existing bean instances._<p>This method does <i>not</i> autowire bean properties_ it just applies_explicitly defined property values. Use the {@link #autowireBeanProperties}_method to autowire an existing bean instance._<b>Note: This method requires a bean definition for the given name!</b>_<p>Does <i>not</i> apply standard {@link BeanPostProcessor BeanPostProcessors}_callbacks or perform any further initialization of the bean. This interface_offers distinct, fine-grained operations for those purposes, for example_{@link #initializeBean}. However, {@link InstantiationAwareBeanPostProcessor}_callbacks are applied, if applicable to the configuration of the instance._@param existingBean the existing bean instance_@param beanName the name of the bean definition in the bean factory_(a bean definition of that name has to be available)_@throws org.springframework.beans.factory.NoSuchBeanDefinitionException_if there is no bean definition with the given name_@throws BeansException if applying the property values failed_@see #autowireBeanProperties;void applyBeanPropertyValues(Object existingBean, String beanName) throws BeansException_;apply,the,property,values,of,the,bean,definition,with,the,given,name,to,the,given,bean,instance,the,bean,definition,can,either,define,a,fully,self,contained,bean,reusing,its,property,values,or,just,property,values,meant,to,be,used,for,existing,bean,instances,p,this,method,does,i,not,i,autowire,bean,properties,it,just,applies,explicitly,defined,property,values,use,the,link,autowire,bean,properties,method,to,autowire,an,existing,bean,instance,b,note,this,method,requires,a,bean,definition,for,the,given,name,b,p,does,i,not,i,apply,standard,link,bean,post,processor,bean,post,processors,callbacks,or,perform,any,further,initialization,of,the,bean,this,interface,offers,distinct,fine,grained,operations,for,those,purposes,for,example,link,initialize,bean,however,link,instantiation,aware,bean,post,processor,callbacks,are,applied,if,applicable,to,the,configuration,of,the,instance,param,existing,bean,the,existing,bean,instance,param,bean,name,the,name,of,the,bean,definition,in,the,bean,factory,a,bean,definition,of,that,name,has,to,be,available,throws,org,springframework,beans,factory,no,such,bean,definition,exception,if,there,is,no,bean,definition,with,the,given,name,throws,beans,exception,if,applying,the,property,values,failed,see,autowire,bean,properties;void,apply,bean,property,values,object,existing,bean,string,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> void applyBeanPropertyValues(Object existingBean, String beanName) throws BeansException_;1530174524;Apply the property values of the bean definition with the given name to_the given bean instance. The bean definition can either define a fully_self-contained bean, reusing its property values, or just property values_meant to be used for existing bean instances._<p>This method does <i>not</i> autowire bean properties_ it just applies_explicitly defined property values. Use the {@link #autowireBeanProperties}_method to autowire an existing bean instance._<b>Note: This method requires a bean definition for the given name!</b>_<p>Does <i>not</i> apply standard {@link BeanPostProcessor BeanPostProcessors}_callbacks or perform any further initialization of the bean. This interface_offers distinct, fine-grained operations for those purposes, for example_{@link #initializeBean}. However, {@link InstantiationAwareBeanPostProcessor}_callbacks are applied, if applicable to the configuration of the instance._@param existingBean the existing bean instance_@param beanName the name of the bean definition in the bean factory_(a bean definition of that name has to be available)_@throws org.springframework.beans.factory.NoSuchBeanDefinitionException_if there is no bean definition with the given name_@throws BeansException if applying the property values failed_@see #autowireBeanProperties;void applyBeanPropertyValues(Object existingBean, String beanName) throws BeansException_;apply,the,property,values,of,the,bean,definition,with,the,given,name,to,the,given,bean,instance,the,bean,definition,can,either,define,a,fully,self,contained,bean,reusing,its,property,values,or,just,property,values,meant,to,be,used,for,existing,bean,instances,p,this,method,does,i,not,i,autowire,bean,properties,it,just,applies,explicitly,defined,property,values,use,the,link,autowire,bean,properties,method,to,autowire,an,existing,bean,instance,b,note,this,method,requires,a,bean,definition,for,the,given,name,b,p,does,i,not,i,apply,standard,link,bean,post,processor,bean,post,processors,callbacks,or,perform,any,further,initialization,of,the,bean,this,interface,offers,distinct,fine,grained,operations,for,those,purposes,for,example,link,initialize,bean,however,link,instantiation,aware,bean,post,processor,callbacks,are,applied,if,applicable,to,the,configuration,of,the,instance,param,existing,bean,the,existing,bean,instance,param,bean,name,the,name,of,the,bean,definition,in,the,bean,factory,a,bean,definition,of,that,name,has,to,be,available,throws,org,springframework,beans,factory,no,such,bean,definition,exception,if,there,is,no,bean,definition,with,the,given,name,throws,beans,exception,if,applying,the,property,values,failed,see,autowire,bean,properties;void,apply,bean,property,values,object,existing,bean,string,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> void applyBeanPropertyValues(Object existingBean, String beanName) throws BeansException_;1535064541;Apply the property values of the bean definition with the given name to_the given bean instance. The bean definition can either define a fully_self-contained bean, reusing its property values, or just property values_meant to be used for existing bean instances._<p>This method does <i>not</i> autowire bean properties_ it just applies_explicitly defined property values. Use the {@link #autowireBeanProperties}_method to autowire an existing bean instance._<b>Note: This method requires a bean definition for the given name!</b>_<p>Does <i>not</i> apply standard {@link BeanPostProcessor BeanPostProcessors}_callbacks or perform any further initialization of the bean. This interface_offers distinct, fine-grained operations for those purposes, for example_{@link #initializeBean}. However, {@link InstantiationAwareBeanPostProcessor}_callbacks are applied, if applicable to the configuration of the instance._@param existingBean the existing bean instance_@param beanName the name of the bean definition in the bean factory_(a bean definition of that name has to be available)_@throws org.springframework.beans.factory.NoSuchBeanDefinitionException_if there is no bean definition with the given name_@throws BeansException if applying the property values failed_@see #autowireBeanProperties;void applyBeanPropertyValues(Object existingBean, String beanName) throws BeansException_;apply,the,property,values,of,the,bean,definition,with,the,given,name,to,the,given,bean,instance,the,bean,definition,can,either,define,a,fully,self,contained,bean,reusing,its,property,values,or,just,property,values,meant,to,be,used,for,existing,bean,instances,p,this,method,does,i,not,i,autowire,bean,properties,it,just,applies,explicitly,defined,property,values,use,the,link,autowire,bean,properties,method,to,autowire,an,existing,bean,instance,b,note,this,method,requires,a,bean,definition,for,the,given,name,b,p,does,i,not,i,apply,standard,link,bean,post,processor,bean,post,processors,callbacks,or,perform,any,further,initialization,of,the,bean,this,interface,offers,distinct,fine,grained,operations,for,those,purposes,for,example,link,initialize,bean,however,link,instantiation,aware,bean,post,processor,callbacks,are,applied,if,applicable,to,the,configuration,of,the,instance,param,existing,bean,the,existing,bean,instance,param,bean,name,the,name,of,the,bean,definition,in,the,bean,factory,a,bean,definition,of,that,name,has,to,be,available,throws,org,springframework,beans,factory,no,such,bean,definition,exception,if,there,is,no,bean,definition,with,the,given,name,throws,beans,exception,if,applying,the,property,values,failed,see,autowire,bean,properties;void,apply,bean,property,values,object,existing,bean,string,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> void applyBeanPropertyValues(Object existingBean, String beanName) throws BeansException_;1549551674;Apply the property values of the bean definition with the given name to_the given bean instance. The bean definition can either define a fully_self-contained bean, reusing its property values, or just property values_meant to be used for existing bean instances._<p>This method does <i>not</i> autowire bean properties_ it just applies_explicitly defined property values. Use the {@link #autowireBeanProperties}_method to autowire an existing bean instance._<b>Note: This method requires a bean definition for the given name!</b>_<p>Does <i>not</i> apply standard {@link BeanPostProcessor BeanPostProcessors}_callbacks or perform any further initialization of the bean. This interface_offers distinct, fine-grained operations for those purposes, for example_{@link #initializeBean}. However, {@link InstantiationAwareBeanPostProcessor}_callbacks are applied, if applicable to the configuration of the instance._@param existingBean the existing bean instance_@param beanName the name of the bean definition in the bean factory_(a bean definition of that name has to be available)_@throws org.springframework.beans.factory.NoSuchBeanDefinitionException_if there is no bean definition with the given name_@throws BeansException if applying the property values failed_@see #autowireBeanProperties;void applyBeanPropertyValues(Object existingBean, String beanName) throws BeansException_;apply,the,property,values,of,the,bean,definition,with,the,given,name,to,the,given,bean,instance,the,bean,definition,can,either,define,a,fully,self,contained,bean,reusing,its,property,values,or,just,property,values,meant,to,be,used,for,existing,bean,instances,p,this,method,does,i,not,i,autowire,bean,properties,it,just,applies,explicitly,defined,property,values,use,the,link,autowire,bean,properties,method,to,autowire,an,existing,bean,instance,b,note,this,method,requires,a,bean,definition,for,the,given,name,b,p,does,i,not,i,apply,standard,link,bean,post,processor,bean,post,processors,callbacks,or,perform,any,further,initialization,of,the,bean,this,interface,offers,distinct,fine,grained,operations,for,those,purposes,for,example,link,initialize,bean,however,link,instantiation,aware,bean,post,processor,callbacks,are,applied,if,applicable,to,the,configuration,of,the,instance,param,existing,bean,the,existing,bean,instance,param,bean,name,the,name,of,the,bean,definition,in,the,bean,factory,a,bean,definition,of,that,name,has,to,be,available,throws,org,springframework,beans,factory,no,such,bean,definition,exception,if,there,is,no,bean,definition,with,the,given,name,throws,beans,exception,if,applying,the,property,values,failed,see,autowire,bean,properties;void,apply,bean,property,values,object,existing,bean,string,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> void applyBeanPropertyValues(Object existingBean, String beanName) throws BeansException_;1549577242;Apply the property values of the bean definition with the given name to_the given bean instance. The bean definition can either define a fully_self-contained bean, reusing its property values, or just property values_meant to be used for existing bean instances._<p>This method does <i>not</i> autowire bean properties_ it just applies_explicitly defined property values. Use the {@link #autowireBeanProperties}_method to autowire an existing bean instance._<b>Note: This method requires a bean definition for the given name!</b>_<p>Does <i>not</i> apply standard {@link BeanPostProcessor BeanPostProcessors}_callbacks or perform any further initialization of the bean. This interface_offers distinct, fine-grained operations for those purposes, for example_{@link #initializeBean}. However, {@link InstantiationAwareBeanPostProcessor}_callbacks are applied, if applicable to the configuration of the instance._@param existingBean the existing bean instance_@param beanName the name of the bean definition in the bean factory_(a bean definition of that name has to be available)_@throws org.springframework.beans.factory.NoSuchBeanDefinitionException_if there is no bean definition with the given name_@throws BeansException if applying the property values failed_@see #autowireBeanProperties;void applyBeanPropertyValues(Object existingBean, String beanName) throws BeansException_;apply,the,property,values,of,the,bean,definition,with,the,given,name,to,the,given,bean,instance,the,bean,definition,can,either,define,a,fully,self,contained,bean,reusing,its,property,values,or,just,property,values,meant,to,be,used,for,existing,bean,instances,p,this,method,does,i,not,i,autowire,bean,properties,it,just,applies,explicitly,defined,property,values,use,the,link,autowire,bean,properties,method,to,autowire,an,existing,bean,instance,b,note,this,method,requires,a,bean,definition,for,the,given,name,b,p,does,i,not,i,apply,standard,link,bean,post,processor,bean,post,processors,callbacks,or,perform,any,further,initialization,of,the,bean,this,interface,offers,distinct,fine,grained,operations,for,those,purposes,for,example,link,initialize,bean,however,link,instantiation,aware,bean,post,processor,callbacks,are,applied,if,applicable,to,the,configuration,of,the,instance,param,existing,bean,the,existing,bean,instance,param,bean,name,the,name,of,the,bean,definition,in,the,bean,factory,a,bean,definition,of,that,name,has,to,be,available,throws,org,springframework,beans,factory,no,such,bean,definition,exception,if,there,is,no,bean,definition,with,the,given,name,throws,beans,exception,if,applying,the,property,values,failed,see,autowire,bean,properties;void,apply,bean,property,values,object,existing,bean,string,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> void autowireBean(Object existingBean) throws BeansException_;1328020251;Populate the given bean instance through applying after-instantiation callbacks_and bean property post-processing (e.g. for annotation-driven injection)._<p>Note: This is essentially intended for (re-)populating annotated fields and_methods, either for new instances or for deserialized instances. It does_<i>not</i> imply traditional by-name or by-type autowiring of properties__use {@link #autowireBeanProperties} for that purposes._@param existingBean the existing bean instance_@throws BeansException if wiring failed;void autowireBean(Object existingBean) throws BeansException_;populate,the,given,bean,instance,through,applying,after,instantiation,callbacks,and,bean,property,post,processing,e,g,for,annotation,driven,injection,p,note,this,is,essentially,intended,for,re,populating,annotated,fields,and,methods,either,for,new,instances,or,for,deserialized,instances,it,does,i,not,i,imply,traditional,by,name,or,by,type,autowiring,of,properties,use,link,autowire,bean,properties,for,that,purposes,param,existing,bean,the,existing,bean,instance,throws,beans,exception,if,wiring,failed;void,autowire,bean,object,existing,bean,throws,beans,exception
AutowireCapableBeanFactory -> void autowireBean(Object existingBean) throws BeansException_;1356735495;Populate the given bean instance through applying after-instantiation callbacks_and bean property post-processing (e.g. for annotation-driven injection)._<p>Note: This is essentially intended for (re-)populating annotated fields and_methods, either for new instances or for deserialized instances. It does_<i>not</i> imply traditional by-name or by-type autowiring of properties__use {@link #autowireBeanProperties} for that purposes._@param existingBean the existing bean instance_@throws BeansException if wiring failed;void autowireBean(Object existingBean) throws BeansException_;populate,the,given,bean,instance,through,applying,after,instantiation,callbacks,and,bean,property,post,processing,e,g,for,annotation,driven,injection,p,note,this,is,essentially,intended,for,re,populating,annotated,fields,and,methods,either,for,new,instances,or,for,deserialized,instances,it,does,i,not,i,imply,traditional,by,name,or,by,type,autowiring,of,properties,use,link,autowire,bean,properties,for,that,purposes,param,existing,bean,the,existing,bean,instance,throws,beans,exception,if,wiring,failed;void,autowire,bean,object,existing,bean,throws,beans,exception
AutowireCapableBeanFactory -> void autowireBean(Object existingBean) throws BeansException_;1364503447;Populate the given bean instance through applying after-instantiation callbacks_and bean property post-processing (e.g. for annotation-driven injection)._<p>Note: This is essentially intended for (re-)populating annotated fields and_methods, either for new instances or for deserialized instances. It does_<i>not</i> imply traditional by-name or by-type autowiring of properties__use {@link #autowireBeanProperties} for that purposes._@param existingBean the existing bean instance_@throws BeansException if wiring failed;void autowireBean(Object existingBean) throws BeansException_;populate,the,given,bean,instance,through,applying,after,instantiation,callbacks,and,bean,property,post,processing,e,g,for,annotation,driven,injection,p,note,this,is,essentially,intended,for,re,populating,annotated,fields,and,methods,either,for,new,instances,or,for,deserialized,instances,it,does,i,not,i,imply,traditional,by,name,or,by,type,autowiring,of,properties,use,link,autowire,bean,properties,for,that,purposes,param,existing,bean,the,existing,bean,instance,throws,beans,exception,if,wiring,failed;void,autowire,bean,object,existing,bean,throws,beans,exception
AutowireCapableBeanFactory -> void autowireBean(Object existingBean) throws BeansException_;1368546246;Populate the given bean instance through applying after-instantiation callbacks_and bean property post-processing (e.g. for annotation-driven injection)._<p>Note: This is essentially intended for (re-)populating annotated fields and_methods, either for new instances or for deserialized instances. It does_<i>not</i> imply traditional by-name or by-type autowiring of properties__use {@link #autowireBeanProperties} for that purposes._@param existingBean the existing bean instance_@throws BeansException if wiring failed;void autowireBean(Object existingBean) throws BeansException_;populate,the,given,bean,instance,through,applying,after,instantiation,callbacks,and,bean,property,post,processing,e,g,for,annotation,driven,injection,p,note,this,is,essentially,intended,for,re,populating,annotated,fields,and,methods,either,for,new,instances,or,for,deserialized,instances,it,does,i,not,i,imply,traditional,by,name,or,by,type,autowiring,of,properties,use,link,autowire,bean,properties,for,that,purposes,param,existing,bean,the,existing,bean,instance,throws,beans,exception,if,wiring,failed;void,autowire,bean,object,existing,bean,throws,beans,exception
AutowireCapableBeanFactory -> void autowireBean(Object existingBean) throws BeansException_;1458483997;Populate the given bean instance through applying after-instantiation callbacks_and bean property post-processing (e.g. for annotation-driven injection)._<p>Note: This is essentially intended for (re-)populating annotated fields and_methods, either for new instances or for deserialized instances. It does_<i>not</i> imply traditional by-name or by-type autowiring of properties__use {@link #autowireBeanProperties} for those purposes._@param existingBean the existing bean instance_@throws BeansException if wiring failed;void autowireBean(Object existingBean) throws BeansException_;populate,the,given,bean,instance,through,applying,after,instantiation,callbacks,and,bean,property,post,processing,e,g,for,annotation,driven,injection,p,note,this,is,essentially,intended,for,re,populating,annotated,fields,and,methods,either,for,new,instances,or,for,deserialized,instances,it,does,i,not,i,imply,traditional,by,name,or,by,type,autowiring,of,properties,use,link,autowire,bean,properties,for,those,purposes,param,existing,bean,the,existing,bean,instance,throws,beans,exception,if,wiring,failed;void,autowire,bean,object,existing,bean,throws,beans,exception
AutowireCapableBeanFactory -> void autowireBean(Object existingBean) throws BeansException_;1470948126;Populate the given bean instance through applying after-instantiation callbacks_and bean property post-processing (e.g. for annotation-driven injection)._<p>Note: This is essentially intended for (re-)populating annotated fields and_methods, either for new instances or for deserialized instances. It does_<i>not</i> imply traditional by-name or by-type autowiring of properties__use {@link #autowireBeanProperties} for those purposes._@param existingBean the existing bean instance_@throws BeansException if wiring failed;void autowireBean(Object existingBean) throws BeansException_;populate,the,given,bean,instance,through,applying,after,instantiation,callbacks,and,bean,property,post,processing,e,g,for,annotation,driven,injection,p,note,this,is,essentially,intended,for,re,populating,annotated,fields,and,methods,either,for,new,instances,or,for,deserialized,instances,it,does,i,not,i,imply,traditional,by,name,or,by,type,autowiring,of,properties,use,link,autowire,bean,properties,for,those,purposes,param,existing,bean,the,existing,bean,instance,throws,beans,exception,if,wiring,failed;void,autowire,bean,object,existing,bean,throws,beans,exception
AutowireCapableBeanFactory -> void autowireBean(Object existingBean) throws BeansException_;1470952254;Populate the given bean instance through applying after-instantiation callbacks_and bean property post-processing (e.g. for annotation-driven injection)._<p>Note: This is essentially intended for (re-)populating annotated fields and_methods, either for new instances or for deserialized instances. It does_<i>not</i> imply traditional by-name or by-type autowiring of properties__use {@link #autowireBeanProperties} for those purposes._@param existingBean the existing bean instance_@throws BeansException if wiring failed;void autowireBean(Object existingBean) throws BeansException_;populate,the,given,bean,instance,through,applying,after,instantiation,callbacks,and,bean,property,post,processing,e,g,for,annotation,driven,injection,p,note,this,is,essentially,intended,for,re,populating,annotated,fields,and,methods,either,for,new,instances,or,for,deserialized,instances,it,does,i,not,i,imply,traditional,by,name,or,by,type,autowiring,of,properties,use,link,autowire,bean,properties,for,those,purposes,param,existing,bean,the,existing,bean,instance,throws,beans,exception,if,wiring,failed;void,autowire,bean,object,existing,bean,throws,beans,exception
AutowireCapableBeanFactory -> void autowireBean(Object existingBean) throws BeansException_;1495868221;Populate the given bean instance through applying after-instantiation callbacks_and bean property post-processing (e.g. for annotation-driven injection)._<p>Note: This is essentially intended for (re-)populating annotated fields and_methods, either for new instances or for deserialized instances. It does_<i>not</i> imply traditional by-name or by-type autowiring of properties__use {@link #autowireBeanProperties} for those purposes._@param existingBean the existing bean instance_@throws BeansException if wiring failed;void autowireBean(Object existingBean) throws BeansException_;populate,the,given,bean,instance,through,applying,after,instantiation,callbacks,and,bean,property,post,processing,e,g,for,annotation,driven,injection,p,note,this,is,essentially,intended,for,re,populating,annotated,fields,and,methods,either,for,new,instances,or,for,deserialized,instances,it,does,i,not,i,imply,traditional,by,name,or,by,type,autowiring,of,properties,use,link,autowire,bean,properties,for,those,purposes,param,existing,bean,the,existing,bean,instance,throws,beans,exception,if,wiring,failed;void,autowire,bean,object,existing,bean,throws,beans,exception
AutowireCapableBeanFactory -> void autowireBean(Object existingBean) throws BeansException_;1496259743;Populate the given bean instance through applying after-instantiation callbacks_and bean property post-processing (e.g. for annotation-driven injection)._<p>Note: This is essentially intended for (re-)populating annotated fields and_methods, either for new instances or for deserialized instances. It does_<i>not</i> imply traditional by-name or by-type autowiring of properties__use {@link #autowireBeanProperties} for those purposes._@param existingBean the existing bean instance_@throws BeansException if wiring failed;void autowireBean(Object existingBean) throws BeansException_;populate,the,given,bean,instance,through,applying,after,instantiation,callbacks,and,bean,property,post,processing,e,g,for,annotation,driven,injection,p,note,this,is,essentially,intended,for,re,populating,annotated,fields,and,methods,either,for,new,instances,or,for,deserialized,instances,it,does,i,not,i,imply,traditional,by,name,or,by,type,autowiring,of,properties,use,link,autowire,bean,properties,for,those,purposes,param,existing,bean,the,existing,bean,instance,throws,beans,exception,if,wiring,failed;void,autowire,bean,object,existing,bean,throws,beans,exception
AutowireCapableBeanFactory -> void autowireBean(Object existingBean) throws BeansException_;1496837955;Populate the given bean instance through applying after-instantiation callbacks_and bean property post-processing (e.g. for annotation-driven injection)._<p>Note: This is essentially intended for (re-)populating annotated fields and_methods, either for new instances or for deserialized instances. It does_<i>not</i> imply traditional by-name or by-type autowiring of properties__use {@link #autowireBeanProperties} for those purposes._@param existingBean the existing bean instance_@throws BeansException if wiring failed;void autowireBean(Object existingBean) throws BeansException_;populate,the,given,bean,instance,through,applying,after,instantiation,callbacks,and,bean,property,post,processing,e,g,for,annotation,driven,injection,p,note,this,is,essentially,intended,for,re,populating,annotated,fields,and,methods,either,for,new,instances,or,for,deserialized,instances,it,does,i,not,i,imply,traditional,by,name,or,by,type,autowiring,of,properties,use,link,autowire,bean,properties,for,those,purposes,param,existing,bean,the,existing,bean,instance,throws,beans,exception,if,wiring,failed;void,autowire,bean,object,existing,bean,throws,beans,exception
AutowireCapableBeanFactory -> void autowireBean(Object existingBean) throws BeansException_;1503007895;Populate the given bean instance through applying after-instantiation callbacks_and bean property post-processing (e.g. for annotation-driven injection)._<p>Note: This is essentially intended for (re-)populating annotated fields and_methods, either for new instances or for deserialized instances. It does_<i>not</i> imply traditional by-name or by-type autowiring of properties__use {@link #autowireBeanProperties} for those purposes._@param existingBean the existing bean instance_@throws BeansException if wiring failed;void autowireBean(Object existingBean) throws BeansException_;populate,the,given,bean,instance,through,applying,after,instantiation,callbacks,and,bean,property,post,processing,e,g,for,annotation,driven,injection,p,note,this,is,essentially,intended,for,re,populating,annotated,fields,and,methods,either,for,new,instances,or,for,deserialized,instances,it,does,i,not,i,imply,traditional,by,name,or,by,type,autowiring,of,properties,use,link,autowire,bean,properties,for,those,purposes,param,existing,bean,the,existing,bean,instance,throws,beans,exception,if,wiring,failed;void,autowire,bean,object,existing,bean,throws,beans,exception
AutowireCapableBeanFactory -> void autowireBean(Object existingBean) throws BeansException_;1530174524;Populate the given bean instance through applying after-instantiation callbacks_and bean property post-processing (e.g. for annotation-driven injection)._<p>Note: This is essentially intended for (re-)populating annotated fields and_methods, either for new instances or for deserialized instances. It does_<i>not</i> imply traditional by-name or by-type autowiring of properties__use {@link #autowireBeanProperties} for those purposes._@param existingBean the existing bean instance_@throws BeansException if wiring failed;void autowireBean(Object existingBean) throws BeansException_;populate,the,given,bean,instance,through,applying,after,instantiation,callbacks,and,bean,property,post,processing,e,g,for,annotation,driven,injection,p,note,this,is,essentially,intended,for,re,populating,annotated,fields,and,methods,either,for,new,instances,or,for,deserialized,instances,it,does,i,not,i,imply,traditional,by,name,or,by,type,autowiring,of,properties,use,link,autowire,bean,properties,for,those,purposes,param,existing,bean,the,existing,bean,instance,throws,beans,exception,if,wiring,failed;void,autowire,bean,object,existing,bean,throws,beans,exception
AutowireCapableBeanFactory -> void autowireBean(Object existingBean) throws BeansException_;1535064541;Populate the given bean instance through applying after-instantiation callbacks_and bean property post-processing (e.g. for annotation-driven injection)._<p>Note: This is essentially intended for (re-)populating annotated fields and_methods, either for new instances or for deserialized instances. It does_<i>not</i> imply traditional by-name or by-type autowiring of properties__use {@link #autowireBeanProperties} for those purposes._@param existingBean the existing bean instance_@throws BeansException if wiring failed;void autowireBean(Object existingBean) throws BeansException_;populate,the,given,bean,instance,through,applying,after,instantiation,callbacks,and,bean,property,post,processing,e,g,for,annotation,driven,injection,p,note,this,is,essentially,intended,for,re,populating,annotated,fields,and,methods,either,for,new,instances,or,for,deserialized,instances,it,does,i,not,i,imply,traditional,by,name,or,by,type,autowiring,of,properties,use,link,autowire,bean,properties,for,those,purposes,param,existing,bean,the,existing,bean,instance,throws,beans,exception,if,wiring,failed;void,autowire,bean,object,existing,bean,throws,beans,exception
AutowireCapableBeanFactory -> void autowireBean(Object existingBean) throws BeansException_;1549551674;Populate the given bean instance through applying after-instantiation callbacks_and bean property post-processing (e.g. for annotation-driven injection)._<p>Note: This is essentially intended for (re-)populating annotated fields and_methods, either for new instances or for deserialized instances. It does_<i>not</i> imply traditional by-name or by-type autowiring of properties__use {@link #autowireBeanProperties} for those purposes._@param existingBean the existing bean instance_@throws BeansException if wiring failed;void autowireBean(Object existingBean) throws BeansException_;populate,the,given,bean,instance,through,applying,after,instantiation,callbacks,and,bean,property,post,processing,e,g,for,annotation,driven,injection,p,note,this,is,essentially,intended,for,re,populating,annotated,fields,and,methods,either,for,new,instances,or,for,deserialized,instances,it,does,i,not,i,imply,traditional,by,name,or,by,type,autowiring,of,properties,use,link,autowire,bean,properties,for,those,purposes,param,existing,bean,the,existing,bean,instance,throws,beans,exception,if,wiring,failed;void,autowire,bean,object,existing,bean,throws,beans,exception
AutowireCapableBeanFactory -> void autowireBean(Object existingBean) throws BeansException_;1549577242;Populate the given bean instance through applying after-instantiation callbacks_and bean property post-processing (e.g. for annotation-driven injection)._<p>Note: This is essentially intended for (re-)populating annotated fields and_methods, either for new instances or for deserialized instances. It does_<i>not</i> imply traditional by-name or by-type autowiring of properties__use {@link #autowireBeanProperties} for those purposes._@param existingBean the existing bean instance_@throws BeansException if wiring failed;void autowireBean(Object existingBean) throws BeansException_;populate,the,given,bean,instance,through,applying,after,instantiation,callbacks,and,bean,property,post,processing,e,g,for,annotation,driven,injection,p,note,this,is,essentially,intended,for,re,populating,annotated,fields,and,methods,either,for,new,instances,or,for,deserialized,instances,it,does,i,not,i,imply,traditional,by,name,or,by,type,autowiring,of,properties,use,link,autowire,bean,properties,for,those,purposes,param,existing,bean,the,existing,bean,instance,throws,beans,exception,if,wiring,failed;void,autowire,bean,object,existing,bean,throws,beans,exception
AutowireCapableBeanFactory -> Object applyBeanPostProcessorsAfterInitialization(Object existingBean, String beanName) 			throws BeansException_;1328020251;Apply {@link BeanPostProcessor BeanPostProcessors} to the given existing bean_instance, invoking their <code>postProcessAfterInitialization</code> methods._The returned bean instance may be a wrapper around the original._@param existingBean the new bean instance_@param beanName the name of the bean_@return the bean instance to use, either the original or a wrapped one_@throws BeansException if any post-processing failed_@see BeanPostProcessor#postProcessAfterInitialization;Object applyBeanPostProcessorsAfterInitialization(Object existingBean, String beanName)_			throws BeansException_;apply,link,bean,post,processor,bean,post,processors,to,the,given,existing,bean,instance,invoking,their,code,post,process,after,initialization,code,methods,the,returned,bean,instance,may,be,a,wrapper,around,the,original,param,existing,bean,the,new,bean,instance,param,bean,name,the,name,of,the,bean,return,the,bean,instance,to,use,either,the,original,or,a,wrapped,one,throws,beans,exception,if,any,post,processing,failed,see,bean,post,processor,post,process,after,initialization;object,apply,bean,post,processors,after,initialization,object,existing,bean,string,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> Object applyBeanPostProcessorsAfterInitialization(Object existingBean, String beanName) 			throws BeansException_;1356735495;Apply {@link BeanPostProcessor BeanPostProcessors} to the given existing bean_instance, invoking their {@code postProcessAfterInitialization} methods._The returned bean instance may be a wrapper around the original._@param existingBean the new bean instance_@param beanName the name of the bean_@return the bean instance to use, either the original or a wrapped one_@throws BeansException if any post-processing failed_@see BeanPostProcessor#postProcessAfterInitialization;Object applyBeanPostProcessorsAfterInitialization(Object existingBean, String beanName)_			throws BeansException_;apply,link,bean,post,processor,bean,post,processors,to,the,given,existing,bean,instance,invoking,their,code,post,process,after,initialization,methods,the,returned,bean,instance,may,be,a,wrapper,around,the,original,param,existing,bean,the,new,bean,instance,param,bean,name,the,name,of,the,bean,return,the,bean,instance,to,use,either,the,original,or,a,wrapped,one,throws,beans,exception,if,any,post,processing,failed,see,bean,post,processor,post,process,after,initialization;object,apply,bean,post,processors,after,initialization,object,existing,bean,string,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> Object applyBeanPostProcessorsAfterInitialization(Object existingBean, String beanName) 			throws BeansException_;1364503447;Apply {@link BeanPostProcessor BeanPostProcessors} to the given existing bean_instance, invoking their {@code postProcessAfterInitialization} methods._The returned bean instance may be a wrapper around the original._@param existingBean the new bean instance_@param beanName the name of the bean_@return the bean instance to use, either the original or a wrapped one_@throws BeansException if any post-processing failed_@see BeanPostProcessor#postProcessAfterInitialization;Object applyBeanPostProcessorsAfterInitialization(Object existingBean, String beanName)_			throws BeansException_;apply,link,bean,post,processor,bean,post,processors,to,the,given,existing,bean,instance,invoking,their,code,post,process,after,initialization,methods,the,returned,bean,instance,may,be,a,wrapper,around,the,original,param,existing,bean,the,new,bean,instance,param,bean,name,the,name,of,the,bean,return,the,bean,instance,to,use,either,the,original,or,a,wrapped,one,throws,beans,exception,if,any,post,processing,failed,see,bean,post,processor,post,process,after,initialization;object,apply,bean,post,processors,after,initialization,object,existing,bean,string,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> Object applyBeanPostProcessorsAfterInitialization(Object existingBean, String beanName) 			throws BeansException_;1368546246;Apply {@link BeanPostProcessor BeanPostProcessors} to the given existing bean_instance, invoking their {@code postProcessAfterInitialization} methods._The returned bean instance may be a wrapper around the original._@param existingBean the new bean instance_@param beanName the name of the bean_@return the bean instance to use, either the original or a wrapped one_@throws BeansException if any post-processing failed_@see BeanPostProcessor#postProcessAfterInitialization;Object applyBeanPostProcessorsAfterInitialization(Object existingBean, String beanName)_			throws BeansException_;apply,link,bean,post,processor,bean,post,processors,to,the,given,existing,bean,instance,invoking,their,code,post,process,after,initialization,methods,the,returned,bean,instance,may,be,a,wrapper,around,the,original,param,existing,bean,the,new,bean,instance,param,bean,name,the,name,of,the,bean,return,the,bean,instance,to,use,either,the,original,or,a,wrapped,one,throws,beans,exception,if,any,post,processing,failed,see,bean,post,processor,post,process,after,initialization;object,apply,bean,post,processors,after,initialization,object,existing,bean,string,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> Object applyBeanPostProcessorsAfterInitialization(Object existingBean, String beanName) 			throws BeansException_;1458483997;Apply {@link BeanPostProcessor BeanPostProcessors} to the given existing bean_instance, invoking their {@code postProcessAfterInitialization} methods._The returned bean instance may be a wrapper around the original._@param existingBean the new bean instance_@param beanName the name of the bean_@return the bean instance to use, either the original or a wrapped one_@throws BeansException if any post-processing failed_@see BeanPostProcessor#postProcessAfterInitialization;Object applyBeanPostProcessorsAfterInitialization(Object existingBean, String beanName)_			throws BeansException_;apply,link,bean,post,processor,bean,post,processors,to,the,given,existing,bean,instance,invoking,their,code,post,process,after,initialization,methods,the,returned,bean,instance,may,be,a,wrapper,around,the,original,param,existing,bean,the,new,bean,instance,param,bean,name,the,name,of,the,bean,return,the,bean,instance,to,use,either,the,original,or,a,wrapped,one,throws,beans,exception,if,any,post,processing,failed,see,bean,post,processor,post,process,after,initialization;object,apply,bean,post,processors,after,initialization,object,existing,bean,string,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> Object applyBeanPostProcessorsAfterInitialization(Object existingBean, String beanName) 			throws BeansException_;1470948126;Apply {@link BeanPostProcessor BeanPostProcessors} to the given existing bean_instance, invoking their {@code postProcessAfterInitialization} methods._The returned bean instance may be a wrapper around the original._@param existingBean the new bean instance_@param beanName the name of the bean_@return the bean instance to use, either the original or a wrapped one_@throws BeansException if any post-processing failed_@see BeanPostProcessor#postProcessAfterInitialization;Object applyBeanPostProcessorsAfterInitialization(Object existingBean, String beanName)_			throws BeansException_;apply,link,bean,post,processor,bean,post,processors,to,the,given,existing,bean,instance,invoking,their,code,post,process,after,initialization,methods,the,returned,bean,instance,may,be,a,wrapper,around,the,original,param,existing,bean,the,new,bean,instance,param,bean,name,the,name,of,the,bean,return,the,bean,instance,to,use,either,the,original,or,a,wrapped,one,throws,beans,exception,if,any,post,processing,failed,see,bean,post,processor,post,process,after,initialization;object,apply,bean,post,processors,after,initialization,object,existing,bean,string,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> Object applyBeanPostProcessorsAfterInitialization(Object existingBean, String beanName) 			throws BeansException_;1470952254;Apply {@link BeanPostProcessor BeanPostProcessors} to the given existing bean_instance, invoking their {@code postProcessAfterInitialization} methods._The returned bean instance may be a wrapper around the original._@param existingBean the new bean instance_@param beanName the name of the bean_@return the bean instance to use, either the original or a wrapped one_@throws BeansException if any post-processing failed_@see BeanPostProcessor#postProcessAfterInitialization;Object applyBeanPostProcessorsAfterInitialization(Object existingBean, String beanName)_			throws BeansException_;apply,link,bean,post,processor,bean,post,processors,to,the,given,existing,bean,instance,invoking,their,code,post,process,after,initialization,methods,the,returned,bean,instance,may,be,a,wrapper,around,the,original,param,existing,bean,the,new,bean,instance,param,bean,name,the,name,of,the,bean,return,the,bean,instance,to,use,either,the,original,or,a,wrapped,one,throws,beans,exception,if,any,post,processing,failed,see,bean,post,processor,post,process,after,initialization;object,apply,bean,post,processors,after,initialization,object,existing,bean,string,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> Object applyBeanPostProcessorsAfterInitialization(Object existingBean, String beanName) 			throws BeansException_;1495868221;Apply {@link BeanPostProcessor BeanPostProcessors} to the given existing bean_instance, invoking their {@code postProcessAfterInitialization} methods._The returned bean instance may be a wrapper around the original._@param existingBean the new bean instance_@param beanName the name of the bean_@return the bean instance to use, either the original or a wrapped one_@throws BeansException if any post-processing failed_@see BeanPostProcessor#postProcessAfterInitialization;Object applyBeanPostProcessorsAfterInitialization(Object existingBean, String beanName)_			throws BeansException_;apply,link,bean,post,processor,bean,post,processors,to,the,given,existing,bean,instance,invoking,their,code,post,process,after,initialization,methods,the,returned,bean,instance,may,be,a,wrapper,around,the,original,param,existing,bean,the,new,bean,instance,param,bean,name,the,name,of,the,bean,return,the,bean,instance,to,use,either,the,original,or,a,wrapped,one,throws,beans,exception,if,any,post,processing,failed,see,bean,post,processor,post,process,after,initialization;object,apply,bean,post,processors,after,initialization,object,existing,bean,string,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> Object applyBeanPostProcessorsAfterInitialization(Object existingBean, String beanName) 			throws BeansException_;1496259743;Apply {@link BeanPostProcessor BeanPostProcessors} to the given existing bean_instance, invoking their {@code postProcessAfterInitialization} methods._The returned bean instance may be a wrapper around the original._@param existingBean the new bean instance_@param beanName the name of the bean_@return the bean instance to use, either the original or a wrapped one_@throws BeansException if any post-processing failed_@see BeanPostProcessor#postProcessAfterInitialization;Object applyBeanPostProcessorsAfterInitialization(Object existingBean, String beanName)_			throws BeansException_;apply,link,bean,post,processor,bean,post,processors,to,the,given,existing,bean,instance,invoking,their,code,post,process,after,initialization,methods,the,returned,bean,instance,may,be,a,wrapper,around,the,original,param,existing,bean,the,new,bean,instance,param,bean,name,the,name,of,the,bean,return,the,bean,instance,to,use,either,the,original,or,a,wrapped,one,throws,beans,exception,if,any,post,processing,failed,see,bean,post,processor,post,process,after,initialization;object,apply,bean,post,processors,after,initialization,object,existing,bean,string,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> Object applyBeanPostProcessorsAfterInitialization(Object existingBean, String beanName) 			throws BeansException_;1503007895;Apply {@link BeanPostProcessor BeanPostProcessors} to the given existing bean_instance, invoking their {@code postProcessAfterInitialization} methods._The returned bean instance may be a wrapper around the original._@param existingBean the new bean instance_@param beanName the name of the bean_@return the bean instance to use, either the original or a wrapped one_@throws BeansException if any post-processing failed_@see BeanPostProcessor#postProcessAfterInitialization;Object applyBeanPostProcessorsAfterInitialization(Object existingBean, String beanName)_			throws BeansException_;apply,link,bean,post,processor,bean,post,processors,to,the,given,existing,bean,instance,invoking,their,code,post,process,after,initialization,methods,the,returned,bean,instance,may,be,a,wrapper,around,the,original,param,existing,bean,the,new,bean,instance,param,bean,name,the,name,of,the,bean,return,the,bean,instance,to,use,either,the,original,or,a,wrapped,one,throws,beans,exception,if,any,post,processing,failed,see,bean,post,processor,post,process,after,initialization;object,apply,bean,post,processors,after,initialization,object,existing,bean,string,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> Object applyBeanPostProcessorsAfterInitialization(Object existingBean, String beanName) 			throws BeansException_;1530174524;Apply {@link BeanPostProcessor BeanPostProcessors} to the given existing bean_instance, invoking their {@code postProcessAfterInitialization} methods._The returned bean instance may be a wrapper around the original._@param existingBean the new bean instance_@param beanName the name of the bean_@return the bean instance to use, either the original or a wrapped one_@throws BeansException if any post-processing failed_@see BeanPostProcessor#postProcessAfterInitialization;Object applyBeanPostProcessorsAfterInitialization(Object existingBean, String beanName)_			throws BeansException_;apply,link,bean,post,processor,bean,post,processors,to,the,given,existing,bean,instance,invoking,their,code,post,process,after,initialization,methods,the,returned,bean,instance,may,be,a,wrapper,around,the,original,param,existing,bean,the,new,bean,instance,param,bean,name,the,name,of,the,bean,return,the,bean,instance,to,use,either,the,original,or,a,wrapped,one,throws,beans,exception,if,any,post,processing,failed,see,bean,post,processor,post,process,after,initialization;object,apply,bean,post,processors,after,initialization,object,existing,bean,string,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> Object applyBeanPostProcessorsAfterInitialization(Object existingBean, String beanName) 			throws BeansException_;1535064541;Apply {@link BeanPostProcessor BeanPostProcessors} to the given existing bean_instance, invoking their {@code postProcessAfterInitialization} methods._The returned bean instance may be a wrapper around the original._@param existingBean the new bean instance_(only passed to {@link BeanPostProcessor BeanPostProcessors}__can follow the {@link #ORIGINAL_INSTANCE_SUFFIX} convention in order to_enforce the given instance to be returned, i.e. no proxies etc)_@return the bean instance to use, either the original or a wrapped one_@throws BeansException if any post-processing failed_@see BeanPostProcessor#postProcessAfterInitialization_@see #ORIGINAL_INSTANCE_SUFFIX;Object applyBeanPostProcessorsAfterInitialization(Object existingBean, String beanName)_			throws BeansException_;apply,link,bean,post,processor,bean,post,processors,to,the,given,existing,bean,instance,invoking,their,code,post,process,after,initialization,methods,the,returned,bean,instance,may,be,a,wrapper,around,the,original,param,existing,bean,the,new,bean,instance,only,passed,to,link,bean,post,processor,bean,post,processors,can,follow,the,link,convention,in,order,to,enforce,the,given,instance,to,be,returned,i,e,no,proxies,etc,return,the,bean,instance,to,use,either,the,original,or,a,wrapped,one,throws,beans,exception,if,any,post,processing,failed,see,bean,post,processor,post,process,after,initialization,see;object,apply,bean,post,processors,after,initialization,object,existing,bean,string,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> Object applyBeanPostProcessorsAfterInitialization(Object existingBean, String beanName) 			throws BeansException_;1549551674;Apply {@link BeanPostProcessor BeanPostProcessors} to the given existing bean_instance, invoking their {@code postProcessAfterInitialization} methods._The returned bean instance may be a wrapper around the original._@param existingBean the new bean instance_(only passed to {@link BeanPostProcessor BeanPostProcessors}__can follow the {@link #ORIGINAL_INSTANCE_SUFFIX} convention in order to_enforce the given instance to be returned, i.e. no proxies etc)_@return the bean instance to use, either the original or a wrapped one_@throws BeansException if any post-processing failed_@see BeanPostProcessor#postProcessAfterInitialization_@see #ORIGINAL_INSTANCE_SUFFIX;Object applyBeanPostProcessorsAfterInitialization(Object existingBean, String beanName)_			throws BeansException_;apply,link,bean,post,processor,bean,post,processors,to,the,given,existing,bean,instance,invoking,their,code,post,process,after,initialization,methods,the,returned,bean,instance,may,be,a,wrapper,around,the,original,param,existing,bean,the,new,bean,instance,only,passed,to,link,bean,post,processor,bean,post,processors,can,follow,the,link,convention,in,order,to,enforce,the,given,instance,to,be,returned,i,e,no,proxies,etc,return,the,bean,instance,to,use,either,the,original,or,a,wrapped,one,throws,beans,exception,if,any,post,processing,failed,see,bean,post,processor,post,process,after,initialization,see;object,apply,bean,post,processors,after,initialization,object,existing,bean,string,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> Object applyBeanPostProcessorsAfterInitialization(Object existingBean, String beanName) 			throws BeansException_;1549577242;Apply {@link BeanPostProcessor BeanPostProcessors} to the given existing bean_instance, invoking their {@code postProcessAfterInitialization} methods._The returned bean instance may be a wrapper around the original._@param existingBean the existing bean instance_@param beanName the name of the bean, to be passed to it if necessary_(only passed to {@link BeanPostProcessor BeanPostProcessors}__can follow the {@link #ORIGINAL_INSTANCE_SUFFIX} convention in order to_enforce the given instance to be returned, i.e. no proxies etc)_@return the bean instance to use, either the original or a wrapped one_@throws BeansException if any post-processing failed_@see BeanPostProcessor#postProcessAfterInitialization_@see #ORIGINAL_INSTANCE_SUFFIX;Object applyBeanPostProcessorsAfterInitialization(Object existingBean, String beanName)_			throws BeansException_;apply,link,bean,post,processor,bean,post,processors,to,the,given,existing,bean,instance,invoking,their,code,post,process,after,initialization,methods,the,returned,bean,instance,may,be,a,wrapper,around,the,original,param,existing,bean,the,existing,bean,instance,param,bean,name,the,name,of,the,bean,to,be,passed,to,it,if,necessary,only,passed,to,link,bean,post,processor,bean,post,processors,can,follow,the,link,convention,in,order,to,enforce,the,given,instance,to,be,returned,i,e,no,proxies,etc,return,the,bean,instance,to,use,either,the,original,or,a,wrapped,one,throws,beans,exception,if,any,post,processing,failed,see,bean,post,processor,post,process,after,initialization,see;object,apply,bean,post,processors,after,initialization,object,existing,bean,string,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> Object resolveBeanByName(String name, DependencyDescriptor descriptor) throws BeansException_;1549551674;Resolve a bean instance for the given bean name, providing a dependency descriptor_for exposure to target factory methods._<p>This is effectively a variant of {@link #getBean(String, Class)} which supports_factory methods with an {@link org.springframework.beans.factory.InjectionPoint}_argument._@param name the name of the bean to look up_@param descriptor the dependency descriptor for the requesting injection point_@return the corresponding bean instance_@throws NoSuchBeanDefinitionException if there is no bean with the specified name_@throws BeansException if the bean could not be created_@since 5.1.5_@see #getBean(String, Class);Object resolveBeanByName(String name, DependencyDescriptor descriptor) throws BeansException_;resolve,a,bean,instance,for,the,given,bean,name,providing,a,dependency,descriptor,for,exposure,to,target,factory,methods,p,this,is,effectively,a,variant,of,link,get,bean,string,class,which,supports,factory,methods,with,an,link,org,springframework,beans,factory,injection,point,argument,param,name,the,name,of,the,bean,to,look,up,param,descriptor,the,dependency,descriptor,for,the,requesting,injection,point,return,the,corresponding,bean,instance,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,specified,name,throws,beans,exception,if,the,bean,could,not,be,created,since,5,1,5,see,get,bean,string,class;object,resolve,bean,by,name,string,name,dependency,descriptor,descriptor,throws,beans,exception
AutowireCapableBeanFactory -> Object resolveBeanByName(String name, DependencyDescriptor descriptor) throws BeansException_;1549577242;Resolve a bean instance for the given bean name, providing a dependency descriptor_for exposure to target factory methods._<p>This is effectively a variant of {@link #getBean(String, Class)} which supports_factory methods with an {@link org.springframework.beans.factory.InjectionPoint}_argument._@param name the name of the bean to look up_@param descriptor the dependency descriptor for the requesting injection point_@return the corresponding bean instance_@throws NoSuchBeanDefinitionException if there is no bean with the specified name_@throws BeansException if the bean could not be created_@since 5.1.5_@see #getBean(String, Class);Object resolveBeanByName(String name, DependencyDescriptor descriptor) throws BeansException_;resolve,a,bean,instance,for,the,given,bean,name,providing,a,dependency,descriptor,for,exposure,to,target,factory,methods,p,this,is,effectively,a,variant,of,link,get,bean,string,class,which,supports,factory,methods,with,an,link,org,springframework,beans,factory,injection,point,argument,param,name,the,name,of,the,bean,to,look,up,param,descriptor,the,dependency,descriptor,for,the,requesting,injection,point,return,the,corresponding,bean,instance,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,specified,name,throws,beans,exception,if,the,bean,could,not,be,created,since,5,1,5,see,get,bean,string,class;object,resolve,bean,by,name,string,name,dependency,descriptor,descriptor,throws,beans,exception
AutowireCapableBeanFactory -> Object applyBeanPostProcessorsBeforeInitialization(Object existingBean, String beanName) 			throws BeansException_;1328020251;Apply {@link BeanPostProcessor BeanPostProcessors} to the given existing bean_instance, invoking their <code>postProcessBeforeInitialization</code> methods._The returned bean instance may be a wrapper around the original._@param existingBean the new bean instance_@param beanName the name of the bean_@return the bean instance to use, either the original or a wrapped one_@throws BeansException if any post-processing failed_@see BeanPostProcessor#postProcessBeforeInitialization;Object applyBeanPostProcessorsBeforeInitialization(Object existingBean, String beanName)_			throws BeansException_;apply,link,bean,post,processor,bean,post,processors,to,the,given,existing,bean,instance,invoking,their,code,post,process,before,initialization,code,methods,the,returned,bean,instance,may,be,a,wrapper,around,the,original,param,existing,bean,the,new,bean,instance,param,bean,name,the,name,of,the,bean,return,the,bean,instance,to,use,either,the,original,or,a,wrapped,one,throws,beans,exception,if,any,post,processing,failed,see,bean,post,processor,post,process,before,initialization;object,apply,bean,post,processors,before,initialization,object,existing,bean,string,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> Object applyBeanPostProcessorsBeforeInitialization(Object existingBean, String beanName) 			throws BeansException_;1356735495;Apply {@link BeanPostProcessor BeanPostProcessors} to the given existing bean_instance, invoking their {@code postProcessBeforeInitialization} methods._The returned bean instance may be a wrapper around the original._@param existingBean the new bean instance_@param beanName the name of the bean_@return the bean instance to use, either the original or a wrapped one_@throws BeansException if any post-processing failed_@see BeanPostProcessor#postProcessBeforeInitialization;Object applyBeanPostProcessorsBeforeInitialization(Object existingBean, String beanName)_			throws BeansException_;apply,link,bean,post,processor,bean,post,processors,to,the,given,existing,bean,instance,invoking,their,code,post,process,before,initialization,methods,the,returned,bean,instance,may,be,a,wrapper,around,the,original,param,existing,bean,the,new,bean,instance,param,bean,name,the,name,of,the,bean,return,the,bean,instance,to,use,either,the,original,or,a,wrapped,one,throws,beans,exception,if,any,post,processing,failed,see,bean,post,processor,post,process,before,initialization;object,apply,bean,post,processors,before,initialization,object,existing,bean,string,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> Object applyBeanPostProcessorsBeforeInitialization(Object existingBean, String beanName) 			throws BeansException_;1364503447;Apply {@link BeanPostProcessor BeanPostProcessors} to the given existing bean_instance, invoking their {@code postProcessBeforeInitialization} methods._The returned bean instance may be a wrapper around the original._@param existingBean the new bean instance_@param beanName the name of the bean_@return the bean instance to use, either the original or a wrapped one_@throws BeansException if any post-processing failed_@see BeanPostProcessor#postProcessBeforeInitialization;Object applyBeanPostProcessorsBeforeInitialization(Object existingBean, String beanName)_			throws BeansException_;apply,link,bean,post,processor,bean,post,processors,to,the,given,existing,bean,instance,invoking,their,code,post,process,before,initialization,methods,the,returned,bean,instance,may,be,a,wrapper,around,the,original,param,existing,bean,the,new,bean,instance,param,bean,name,the,name,of,the,bean,return,the,bean,instance,to,use,either,the,original,or,a,wrapped,one,throws,beans,exception,if,any,post,processing,failed,see,bean,post,processor,post,process,before,initialization;object,apply,bean,post,processors,before,initialization,object,existing,bean,string,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> Object applyBeanPostProcessorsBeforeInitialization(Object existingBean, String beanName) 			throws BeansException_;1368546246;Apply {@link BeanPostProcessor BeanPostProcessors} to the given existing bean_instance, invoking their {@code postProcessBeforeInitialization} methods._The returned bean instance may be a wrapper around the original._@param existingBean the new bean instance_@param beanName the name of the bean_@return the bean instance to use, either the original or a wrapped one_@throws BeansException if any post-processing failed_@see BeanPostProcessor#postProcessBeforeInitialization;Object applyBeanPostProcessorsBeforeInitialization(Object existingBean, String beanName)_			throws BeansException_;apply,link,bean,post,processor,bean,post,processors,to,the,given,existing,bean,instance,invoking,their,code,post,process,before,initialization,methods,the,returned,bean,instance,may,be,a,wrapper,around,the,original,param,existing,bean,the,new,bean,instance,param,bean,name,the,name,of,the,bean,return,the,bean,instance,to,use,either,the,original,or,a,wrapped,one,throws,beans,exception,if,any,post,processing,failed,see,bean,post,processor,post,process,before,initialization;object,apply,bean,post,processors,before,initialization,object,existing,bean,string,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> Object applyBeanPostProcessorsBeforeInitialization(Object existingBean, String beanName) 			throws BeansException_;1458483997;Apply {@link BeanPostProcessor BeanPostProcessors} to the given existing bean_instance, invoking their {@code postProcessBeforeInitialization} methods._The returned bean instance may be a wrapper around the original._@param existingBean the new bean instance_@param beanName the name of the bean_@return the bean instance to use, either the original or a wrapped one_@throws BeansException if any post-processing failed_@see BeanPostProcessor#postProcessBeforeInitialization;Object applyBeanPostProcessorsBeforeInitialization(Object existingBean, String beanName)_			throws BeansException_;apply,link,bean,post,processor,bean,post,processors,to,the,given,existing,bean,instance,invoking,their,code,post,process,before,initialization,methods,the,returned,bean,instance,may,be,a,wrapper,around,the,original,param,existing,bean,the,new,bean,instance,param,bean,name,the,name,of,the,bean,return,the,bean,instance,to,use,either,the,original,or,a,wrapped,one,throws,beans,exception,if,any,post,processing,failed,see,bean,post,processor,post,process,before,initialization;object,apply,bean,post,processors,before,initialization,object,existing,bean,string,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> Object applyBeanPostProcessorsBeforeInitialization(Object existingBean, String beanName) 			throws BeansException_;1470948126;Apply {@link BeanPostProcessor BeanPostProcessors} to the given existing bean_instance, invoking their {@code postProcessBeforeInitialization} methods._The returned bean instance may be a wrapper around the original._@param existingBean the new bean instance_@param beanName the name of the bean_@return the bean instance to use, either the original or a wrapped one_@throws BeansException if any post-processing failed_@see BeanPostProcessor#postProcessBeforeInitialization;Object applyBeanPostProcessorsBeforeInitialization(Object existingBean, String beanName)_			throws BeansException_;apply,link,bean,post,processor,bean,post,processors,to,the,given,existing,bean,instance,invoking,their,code,post,process,before,initialization,methods,the,returned,bean,instance,may,be,a,wrapper,around,the,original,param,existing,bean,the,new,bean,instance,param,bean,name,the,name,of,the,bean,return,the,bean,instance,to,use,either,the,original,or,a,wrapped,one,throws,beans,exception,if,any,post,processing,failed,see,bean,post,processor,post,process,before,initialization;object,apply,bean,post,processors,before,initialization,object,existing,bean,string,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> Object applyBeanPostProcessorsBeforeInitialization(Object existingBean, String beanName) 			throws BeansException_;1470952254;Apply {@link BeanPostProcessor BeanPostProcessors} to the given existing bean_instance, invoking their {@code postProcessBeforeInitialization} methods._The returned bean instance may be a wrapper around the original._@param existingBean the new bean instance_@param beanName the name of the bean_@return the bean instance to use, either the original or a wrapped one_@throws BeansException if any post-processing failed_@see BeanPostProcessor#postProcessBeforeInitialization;Object applyBeanPostProcessorsBeforeInitialization(Object existingBean, String beanName)_			throws BeansException_;apply,link,bean,post,processor,bean,post,processors,to,the,given,existing,bean,instance,invoking,their,code,post,process,before,initialization,methods,the,returned,bean,instance,may,be,a,wrapper,around,the,original,param,existing,bean,the,new,bean,instance,param,bean,name,the,name,of,the,bean,return,the,bean,instance,to,use,either,the,original,or,a,wrapped,one,throws,beans,exception,if,any,post,processing,failed,see,bean,post,processor,post,process,before,initialization;object,apply,bean,post,processors,before,initialization,object,existing,bean,string,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> Object applyBeanPostProcessorsBeforeInitialization(Object existingBean, String beanName) 			throws BeansException_;1495868221;Apply {@link BeanPostProcessor BeanPostProcessors} to the given existing bean_instance, invoking their {@code postProcessBeforeInitialization} methods._The returned bean instance may be a wrapper around the original._@param existingBean the new bean instance_@param beanName the name of the bean_@return the bean instance to use, either the original or a wrapped one_@throws BeansException if any post-processing failed_@see BeanPostProcessor#postProcessBeforeInitialization;Object applyBeanPostProcessorsBeforeInitialization(Object existingBean, String beanName)_			throws BeansException_;apply,link,bean,post,processor,bean,post,processors,to,the,given,existing,bean,instance,invoking,their,code,post,process,before,initialization,methods,the,returned,bean,instance,may,be,a,wrapper,around,the,original,param,existing,bean,the,new,bean,instance,param,bean,name,the,name,of,the,bean,return,the,bean,instance,to,use,either,the,original,or,a,wrapped,one,throws,beans,exception,if,any,post,processing,failed,see,bean,post,processor,post,process,before,initialization;object,apply,bean,post,processors,before,initialization,object,existing,bean,string,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> Object applyBeanPostProcessorsBeforeInitialization(Object existingBean, String beanName) 			throws BeansException_;1496259743;Apply {@link BeanPostProcessor BeanPostProcessors} to the given existing bean_instance, invoking their {@code postProcessBeforeInitialization} methods._The returned bean instance may be a wrapper around the original._@param existingBean the new bean instance_@param beanName the name of the bean_@return the bean instance to use, either the original or a wrapped one_@throws BeansException if any post-processing failed_@see BeanPostProcessor#postProcessBeforeInitialization;Object applyBeanPostProcessorsBeforeInitialization(Object existingBean, String beanName)_			throws BeansException_;apply,link,bean,post,processor,bean,post,processors,to,the,given,existing,bean,instance,invoking,their,code,post,process,before,initialization,methods,the,returned,bean,instance,may,be,a,wrapper,around,the,original,param,existing,bean,the,new,bean,instance,param,bean,name,the,name,of,the,bean,return,the,bean,instance,to,use,either,the,original,or,a,wrapped,one,throws,beans,exception,if,any,post,processing,failed,see,bean,post,processor,post,process,before,initialization;object,apply,bean,post,processors,before,initialization,object,existing,bean,string,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> Object applyBeanPostProcessorsBeforeInitialization(Object existingBean, String beanName) 			throws BeansException_;1503007895;Apply {@link BeanPostProcessor BeanPostProcessors} to the given existing bean_instance, invoking their {@code postProcessBeforeInitialization} methods._The returned bean instance may be a wrapper around the original._@param existingBean the new bean instance_@param beanName the name of the bean_@return the bean instance to use, either the original or a wrapped one_@throws BeansException if any post-processing failed_@see BeanPostProcessor#postProcessBeforeInitialization;Object applyBeanPostProcessorsBeforeInitialization(Object existingBean, String beanName)_			throws BeansException_;apply,link,bean,post,processor,bean,post,processors,to,the,given,existing,bean,instance,invoking,their,code,post,process,before,initialization,methods,the,returned,bean,instance,may,be,a,wrapper,around,the,original,param,existing,bean,the,new,bean,instance,param,bean,name,the,name,of,the,bean,return,the,bean,instance,to,use,either,the,original,or,a,wrapped,one,throws,beans,exception,if,any,post,processing,failed,see,bean,post,processor,post,process,before,initialization;object,apply,bean,post,processors,before,initialization,object,existing,bean,string,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> Object applyBeanPostProcessorsBeforeInitialization(Object existingBean, String beanName) 			throws BeansException_;1530174524;Apply {@link BeanPostProcessor BeanPostProcessors} to the given existing bean_instance, invoking their {@code postProcessBeforeInitialization} methods._The returned bean instance may be a wrapper around the original._@param existingBean the new bean instance_@param beanName the name of the bean_@return the bean instance to use, either the original or a wrapped one_@throws BeansException if any post-processing failed_@see BeanPostProcessor#postProcessBeforeInitialization;Object applyBeanPostProcessorsBeforeInitialization(Object existingBean, String beanName)_			throws BeansException_;apply,link,bean,post,processor,bean,post,processors,to,the,given,existing,bean,instance,invoking,their,code,post,process,before,initialization,methods,the,returned,bean,instance,may,be,a,wrapper,around,the,original,param,existing,bean,the,new,bean,instance,param,bean,name,the,name,of,the,bean,return,the,bean,instance,to,use,either,the,original,or,a,wrapped,one,throws,beans,exception,if,any,post,processing,failed,see,bean,post,processor,post,process,before,initialization;object,apply,bean,post,processors,before,initialization,object,existing,bean,string,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> Object applyBeanPostProcessorsBeforeInitialization(Object existingBean, String beanName) 			throws BeansException_;1535064541;Apply {@link BeanPostProcessor BeanPostProcessors} to the given existing bean_instance, invoking their {@code postProcessBeforeInitialization} methods._The returned bean instance may be a wrapper around the original._@param existingBean the new bean instance_(only passed to {@link BeanPostProcessor BeanPostProcessors}__can follow the {@link #ORIGINAL_INSTANCE_SUFFIX} convention in order to_enforce the given instance to be returned, i.e. no proxies etc)_@return the bean instance to use, either the original or a wrapped one_@throws BeansException if any post-processing failed_@see BeanPostProcessor#postProcessBeforeInitialization_@see #ORIGINAL_INSTANCE_SUFFIX;Object applyBeanPostProcessorsBeforeInitialization(Object existingBean, String beanName)_			throws BeansException_;apply,link,bean,post,processor,bean,post,processors,to,the,given,existing,bean,instance,invoking,their,code,post,process,before,initialization,methods,the,returned,bean,instance,may,be,a,wrapper,around,the,original,param,existing,bean,the,new,bean,instance,only,passed,to,link,bean,post,processor,bean,post,processors,can,follow,the,link,convention,in,order,to,enforce,the,given,instance,to,be,returned,i,e,no,proxies,etc,return,the,bean,instance,to,use,either,the,original,or,a,wrapped,one,throws,beans,exception,if,any,post,processing,failed,see,bean,post,processor,post,process,before,initialization,see;object,apply,bean,post,processors,before,initialization,object,existing,bean,string,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> Object applyBeanPostProcessorsBeforeInitialization(Object existingBean, String beanName) 			throws BeansException_;1549551674;Apply {@link BeanPostProcessor BeanPostProcessors} to the given existing bean_instance, invoking their {@code postProcessBeforeInitialization} methods._The returned bean instance may be a wrapper around the original._@param existingBean the new bean instance_(only passed to {@link BeanPostProcessor BeanPostProcessors}__can follow the {@link #ORIGINAL_INSTANCE_SUFFIX} convention in order to_enforce the given instance to be returned, i.e. no proxies etc)_@return the bean instance to use, either the original or a wrapped one_@throws BeansException if any post-processing failed_@see BeanPostProcessor#postProcessBeforeInitialization_@see #ORIGINAL_INSTANCE_SUFFIX;Object applyBeanPostProcessorsBeforeInitialization(Object existingBean, String beanName)_			throws BeansException_;apply,link,bean,post,processor,bean,post,processors,to,the,given,existing,bean,instance,invoking,their,code,post,process,before,initialization,methods,the,returned,bean,instance,may,be,a,wrapper,around,the,original,param,existing,bean,the,new,bean,instance,only,passed,to,link,bean,post,processor,bean,post,processors,can,follow,the,link,convention,in,order,to,enforce,the,given,instance,to,be,returned,i,e,no,proxies,etc,return,the,bean,instance,to,use,either,the,original,or,a,wrapped,one,throws,beans,exception,if,any,post,processing,failed,see,bean,post,processor,post,process,before,initialization,see;object,apply,bean,post,processors,before,initialization,object,existing,bean,string,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> Object applyBeanPostProcessorsBeforeInitialization(Object existingBean, String beanName) 			throws BeansException_;1549577242;Apply {@link BeanPostProcessor BeanPostProcessors} to the given existing bean_instance, invoking their {@code postProcessBeforeInitialization} methods._The returned bean instance may be a wrapper around the original._@param existingBean the existing bean instance_@param beanName the name of the bean, to be passed to it if necessary_(only passed to {@link BeanPostProcessor BeanPostProcessors}__can follow the {@link #ORIGINAL_INSTANCE_SUFFIX} convention in order to_enforce the given instance to be returned, i.e. no proxies etc)_@return the bean instance to use, either the original or a wrapped one_@throws BeansException if any post-processing failed_@see BeanPostProcessor#postProcessBeforeInitialization_@see #ORIGINAL_INSTANCE_SUFFIX;Object applyBeanPostProcessorsBeforeInitialization(Object existingBean, String beanName)_			throws BeansException_;apply,link,bean,post,processor,bean,post,processors,to,the,given,existing,bean,instance,invoking,their,code,post,process,before,initialization,methods,the,returned,bean,instance,may,be,a,wrapper,around,the,original,param,existing,bean,the,existing,bean,instance,param,bean,name,the,name,of,the,bean,to,be,passed,to,it,if,necessary,only,passed,to,link,bean,post,processor,bean,post,processors,can,follow,the,link,convention,in,order,to,enforce,the,given,instance,to,be,returned,i,e,no,proxies,etc,return,the,bean,instance,to,use,either,the,original,or,a,wrapped,one,throws,beans,exception,if,any,post,processing,failed,see,bean,post,processor,post,process,before,initialization,see;object,apply,bean,post,processors,before,initialization,object,existing,bean,string,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> Object autowire(Class beanClass, int autowireMode, boolean dependencyCheck) throws BeansException_;1328020251;Instantiate a new bean instance of the given class with the specified autowire_strategy. All constants defined in this interface are supported here._Can also be invoked with <code>AUTOWIRE_NO</code> in order to just apply_before-instantiation callbacks (e.g. for annotation-driven injection)._<p>Does <i>not</i> apply standard {@link BeanPostProcessor BeanPostProcessors}_callbacks or perform any further initialization of the bean. This interface_offers distinct, fine-grained operations for those purposes, for example_{@link #initializeBean}. However, {@link InstantiationAwareBeanPostProcessor}_callbacks are applied, if applicable to the construction of the instance._@param beanClass the class of the bean to instantiate_@param autowireMode by name or type, using the constants in this interface_@param dependencyCheck whether to perform a dependency check for object_references in the bean instance (not applicable to autowiring a constructor,_thus ignored there)_@return the new bean instance_@throws BeansException if instantiation or wiring failed_@see #AUTOWIRE_NO_@see #AUTOWIRE_BY_NAME_@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_CONSTRUCTOR_@see #AUTOWIRE_AUTODETECT_@see #initializeBean_@see #applyBeanPostProcessorsBeforeInitialization_@see #applyBeanPostProcessorsAfterInitialization;Object autowire(Class beanClass, int autowireMode, boolean dependencyCheck) throws BeansException_;instantiate,a,new,bean,instance,of,the,given,class,with,the,specified,autowire,strategy,all,constants,defined,in,this,interface,are,supported,here,can,also,be,invoked,with,code,code,in,order,to,just,apply,before,instantiation,callbacks,e,g,for,annotation,driven,injection,p,does,i,not,i,apply,standard,link,bean,post,processor,bean,post,processors,callbacks,or,perform,any,further,initialization,of,the,bean,this,interface,offers,distinct,fine,grained,operations,for,those,purposes,for,example,link,initialize,bean,however,link,instantiation,aware,bean,post,processor,callbacks,are,applied,if,applicable,to,the,construction,of,the,instance,param,bean,class,the,class,of,the,bean,to,instantiate,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,param,dependency,check,whether,to,perform,a,dependency,check,for,object,references,in,the,bean,instance,not,applicable,to,autowiring,a,constructor,thus,ignored,there,return,the,new,bean,instance,throws,beans,exception,if,instantiation,or,wiring,failed,see,see,see,see,see,see,initialize,bean,see,apply,bean,post,processors,before,initialization,see,apply,bean,post,processors,after,initialization;object,autowire,class,bean,class,int,autowire,mode,boolean,dependency,check,throws,beans,exception
AutowireCapableBeanFactory -> Object autowire(Class beanClass, int autowireMode, boolean dependencyCheck) throws BeansException_;1356735495;Instantiate a new bean instance of the given class with the specified autowire_strategy. All constants defined in this interface are supported here._Can also be invoked with {@code AUTOWIRE_NO} in order to just apply_before-instantiation callbacks (e.g. for annotation-driven injection)._<p>Does <i>not</i> apply standard {@link BeanPostProcessor BeanPostProcessors}_callbacks or perform any further initialization of the bean. This interface_offers distinct, fine-grained operations for those purposes, for example_{@link #initializeBean}. However, {@link InstantiationAwareBeanPostProcessor}_callbacks are applied, if applicable to the construction of the instance._@param beanClass the class of the bean to instantiate_@param autowireMode by name or type, using the constants in this interface_@param dependencyCheck whether to perform a dependency check for object_references in the bean instance (not applicable to autowiring a constructor,_thus ignored there)_@return the new bean instance_@throws BeansException if instantiation or wiring failed_@see #AUTOWIRE_NO_@see #AUTOWIRE_BY_NAME_@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_CONSTRUCTOR_@see #AUTOWIRE_AUTODETECT_@see #initializeBean_@see #applyBeanPostProcessorsBeforeInitialization_@see #applyBeanPostProcessorsAfterInitialization;Object autowire(Class beanClass, int autowireMode, boolean dependencyCheck) throws BeansException_;instantiate,a,new,bean,instance,of,the,given,class,with,the,specified,autowire,strategy,all,constants,defined,in,this,interface,are,supported,here,can,also,be,invoked,with,code,in,order,to,just,apply,before,instantiation,callbacks,e,g,for,annotation,driven,injection,p,does,i,not,i,apply,standard,link,bean,post,processor,bean,post,processors,callbacks,or,perform,any,further,initialization,of,the,bean,this,interface,offers,distinct,fine,grained,operations,for,those,purposes,for,example,link,initialize,bean,however,link,instantiation,aware,bean,post,processor,callbacks,are,applied,if,applicable,to,the,construction,of,the,instance,param,bean,class,the,class,of,the,bean,to,instantiate,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,param,dependency,check,whether,to,perform,a,dependency,check,for,object,references,in,the,bean,instance,not,applicable,to,autowiring,a,constructor,thus,ignored,there,return,the,new,bean,instance,throws,beans,exception,if,instantiation,or,wiring,failed,see,see,see,see,see,see,initialize,bean,see,apply,bean,post,processors,before,initialization,see,apply,bean,post,processors,after,initialization;object,autowire,class,bean,class,int,autowire,mode,boolean,dependency,check,throws,beans,exception
AutowireCapableBeanFactory -> Object autowire(Class beanClass, int autowireMode, boolean dependencyCheck) throws BeansException_;1364503447;Instantiate a new bean instance of the given class with the specified autowire_strategy. All constants defined in this interface are supported here._Can also be invoked with {@code AUTOWIRE_NO} in order to just apply_before-instantiation callbacks (e.g. for annotation-driven injection)._<p>Does <i>not</i> apply standard {@link BeanPostProcessor BeanPostProcessors}_callbacks or perform any further initialization of the bean. This interface_offers distinct, fine-grained operations for those purposes, for example_{@link #initializeBean}. However, {@link InstantiationAwareBeanPostProcessor}_callbacks are applied, if applicable to the construction of the instance._@param beanClass the class of the bean to instantiate_@param autowireMode by name or type, using the constants in this interface_@param dependencyCheck whether to perform a dependency check for object_references in the bean instance (not applicable to autowiring a constructor,_thus ignored there)_@return the new bean instance_@throws BeansException if instantiation or wiring failed_@see #AUTOWIRE_NO_@see #AUTOWIRE_BY_NAME_@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_CONSTRUCTOR_@see #AUTOWIRE_AUTODETECT_@see #initializeBean_@see #applyBeanPostProcessorsBeforeInitialization_@see #applyBeanPostProcessorsAfterInitialization;Object autowire(Class beanClass, int autowireMode, boolean dependencyCheck) throws BeansException_;instantiate,a,new,bean,instance,of,the,given,class,with,the,specified,autowire,strategy,all,constants,defined,in,this,interface,are,supported,here,can,also,be,invoked,with,code,in,order,to,just,apply,before,instantiation,callbacks,e,g,for,annotation,driven,injection,p,does,i,not,i,apply,standard,link,bean,post,processor,bean,post,processors,callbacks,or,perform,any,further,initialization,of,the,bean,this,interface,offers,distinct,fine,grained,operations,for,those,purposes,for,example,link,initialize,bean,however,link,instantiation,aware,bean,post,processor,callbacks,are,applied,if,applicable,to,the,construction,of,the,instance,param,bean,class,the,class,of,the,bean,to,instantiate,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,param,dependency,check,whether,to,perform,a,dependency,check,for,object,references,in,the,bean,instance,not,applicable,to,autowiring,a,constructor,thus,ignored,there,return,the,new,bean,instance,throws,beans,exception,if,instantiation,or,wiring,failed,see,see,see,see,see,see,initialize,bean,see,apply,bean,post,processors,before,initialization,see,apply,bean,post,processors,after,initialization;object,autowire,class,bean,class,int,autowire,mode,boolean,dependency,check,throws,beans,exception
AutowireCapableBeanFactory -> void autowireBeanProperties(Object existingBean, int autowireMode, boolean dependencyCheck) 			throws BeansException_;1328020251;Autowire the bean properties of the given bean instance by name or type._Can also be invoked with <code>AUTOWIRE_NO</code> in order to just apply_after-instantiation callbacks (e.g. for annotation-driven injection)._<p>Does <i>not</i> apply standard {@link BeanPostProcessor BeanPostProcessors}_callbacks or perform any further initialization of the bean. This interface_offers distinct, fine-grained operations for those purposes, for example_{@link #initializeBean}. However, {@link InstantiationAwareBeanPostProcessor}_callbacks are applied, if applicable to the configuration of the instance._@param existingBean the existing bean instance_@param autowireMode by name or type, using the constants in this interface_@param dependencyCheck whether to perform a dependency check for object_references in the bean instance_@throws BeansException if wiring failed_@see #AUTOWIRE_BY_NAME_@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_NO;void autowireBeanProperties(Object existingBean, int autowireMode, boolean dependencyCheck)_			throws BeansException_;autowire,the,bean,properties,of,the,given,bean,instance,by,name,or,type,can,also,be,invoked,with,code,code,in,order,to,just,apply,after,instantiation,callbacks,e,g,for,annotation,driven,injection,p,does,i,not,i,apply,standard,link,bean,post,processor,bean,post,processors,callbacks,or,perform,any,further,initialization,of,the,bean,this,interface,offers,distinct,fine,grained,operations,for,those,purposes,for,example,link,initialize,bean,however,link,instantiation,aware,bean,post,processor,callbacks,are,applied,if,applicable,to,the,configuration,of,the,instance,param,existing,bean,the,existing,bean,instance,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,param,dependency,check,whether,to,perform,a,dependency,check,for,object,references,in,the,bean,instance,throws,beans,exception,if,wiring,failed,see,see,see;void,autowire,bean,properties,object,existing,bean,int,autowire,mode,boolean,dependency,check,throws,beans,exception
AutowireCapableBeanFactory -> void autowireBeanProperties(Object existingBean, int autowireMode, boolean dependencyCheck) 			throws BeansException_;1356735495;Autowire the bean properties of the given bean instance by name or type._Can also be invoked with {@code AUTOWIRE_NO} in order to just apply_after-instantiation callbacks (e.g. for annotation-driven injection)._<p>Does <i>not</i> apply standard {@link BeanPostProcessor BeanPostProcessors}_callbacks or perform any further initialization of the bean. This interface_offers distinct, fine-grained operations for those purposes, for example_{@link #initializeBean}. However, {@link InstantiationAwareBeanPostProcessor}_callbacks are applied, if applicable to the configuration of the instance._@param existingBean the existing bean instance_@param autowireMode by name or type, using the constants in this interface_@param dependencyCheck whether to perform a dependency check for object_references in the bean instance_@throws BeansException if wiring failed_@see #AUTOWIRE_BY_NAME_@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_NO;void autowireBeanProperties(Object existingBean, int autowireMode, boolean dependencyCheck)_			throws BeansException_;autowire,the,bean,properties,of,the,given,bean,instance,by,name,or,type,can,also,be,invoked,with,code,in,order,to,just,apply,after,instantiation,callbacks,e,g,for,annotation,driven,injection,p,does,i,not,i,apply,standard,link,bean,post,processor,bean,post,processors,callbacks,or,perform,any,further,initialization,of,the,bean,this,interface,offers,distinct,fine,grained,operations,for,those,purposes,for,example,link,initialize,bean,however,link,instantiation,aware,bean,post,processor,callbacks,are,applied,if,applicable,to,the,configuration,of,the,instance,param,existing,bean,the,existing,bean,instance,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,param,dependency,check,whether,to,perform,a,dependency,check,for,object,references,in,the,bean,instance,throws,beans,exception,if,wiring,failed,see,see,see;void,autowire,bean,properties,object,existing,bean,int,autowire,mode,boolean,dependency,check,throws,beans,exception
AutowireCapableBeanFactory -> void autowireBeanProperties(Object existingBean, int autowireMode, boolean dependencyCheck) 			throws BeansException_;1364503447;Autowire the bean properties of the given bean instance by name or type._Can also be invoked with {@code AUTOWIRE_NO} in order to just apply_after-instantiation callbacks (e.g. for annotation-driven injection)._<p>Does <i>not</i> apply standard {@link BeanPostProcessor BeanPostProcessors}_callbacks or perform any further initialization of the bean. This interface_offers distinct, fine-grained operations for those purposes, for example_{@link #initializeBean}. However, {@link InstantiationAwareBeanPostProcessor}_callbacks are applied, if applicable to the configuration of the instance._@param existingBean the existing bean instance_@param autowireMode by name or type, using the constants in this interface_@param dependencyCheck whether to perform a dependency check for object_references in the bean instance_@throws BeansException if wiring failed_@see #AUTOWIRE_BY_NAME_@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_NO;void autowireBeanProperties(Object existingBean, int autowireMode, boolean dependencyCheck)_			throws BeansException_;autowire,the,bean,properties,of,the,given,bean,instance,by,name,or,type,can,also,be,invoked,with,code,in,order,to,just,apply,after,instantiation,callbacks,e,g,for,annotation,driven,injection,p,does,i,not,i,apply,standard,link,bean,post,processor,bean,post,processors,callbacks,or,perform,any,further,initialization,of,the,bean,this,interface,offers,distinct,fine,grained,operations,for,those,purposes,for,example,link,initialize,bean,however,link,instantiation,aware,bean,post,processor,callbacks,are,applied,if,applicable,to,the,configuration,of,the,instance,param,existing,bean,the,existing,bean,instance,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,param,dependency,check,whether,to,perform,a,dependency,check,for,object,references,in,the,bean,instance,throws,beans,exception,if,wiring,failed,see,see,see;void,autowire,bean,properties,object,existing,bean,int,autowire,mode,boolean,dependency,check,throws,beans,exception
AutowireCapableBeanFactory -> void autowireBeanProperties(Object existingBean, int autowireMode, boolean dependencyCheck) 			throws BeansException_;1368546246;Autowire the bean properties of the given bean instance by name or type._Can also be invoked with {@code AUTOWIRE_NO} in order to just apply_after-instantiation callbacks (e.g. for annotation-driven injection)._<p>Does <i>not</i> apply standard {@link BeanPostProcessor BeanPostProcessors}_callbacks or perform any further initialization of the bean. This interface_offers distinct, fine-grained operations for those purposes, for example_{@link #initializeBean}. However, {@link InstantiationAwareBeanPostProcessor}_callbacks are applied, if applicable to the configuration of the instance._@param existingBean the existing bean instance_@param autowireMode by name or type, using the constants in this interface_@param dependencyCheck whether to perform a dependency check for object_references in the bean instance_@throws BeansException if wiring failed_@see #AUTOWIRE_BY_NAME_@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_NO;void autowireBeanProperties(Object existingBean, int autowireMode, boolean dependencyCheck)_			throws BeansException_;autowire,the,bean,properties,of,the,given,bean,instance,by,name,or,type,can,also,be,invoked,with,code,in,order,to,just,apply,after,instantiation,callbacks,e,g,for,annotation,driven,injection,p,does,i,not,i,apply,standard,link,bean,post,processor,bean,post,processors,callbacks,or,perform,any,further,initialization,of,the,bean,this,interface,offers,distinct,fine,grained,operations,for,those,purposes,for,example,link,initialize,bean,however,link,instantiation,aware,bean,post,processor,callbacks,are,applied,if,applicable,to,the,configuration,of,the,instance,param,existing,bean,the,existing,bean,instance,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,param,dependency,check,whether,to,perform,a,dependency,check,for,object,references,in,the,bean,instance,throws,beans,exception,if,wiring,failed,see,see,see;void,autowire,bean,properties,object,existing,bean,int,autowire,mode,boolean,dependency,check,throws,beans,exception
AutowireCapableBeanFactory -> void autowireBeanProperties(Object existingBean, int autowireMode, boolean dependencyCheck) 			throws BeansException_;1458483997;Autowire the bean properties of the given bean instance by name or type._Can also be invoked with {@code AUTOWIRE_NO} in order to just apply_after-instantiation callbacks (e.g. for annotation-driven injection)._<p>Does <i>not</i> apply standard {@link BeanPostProcessor BeanPostProcessors}_callbacks or perform any further initialization of the bean. This interface_offers distinct, fine-grained operations for those purposes, for example_{@link #initializeBean}. However, {@link InstantiationAwareBeanPostProcessor}_callbacks are applied, if applicable to the configuration of the instance._@param existingBean the existing bean instance_@param autowireMode by name or type, using the constants in this interface_@param dependencyCheck whether to perform a dependency check for object_references in the bean instance_@throws BeansException if wiring failed_@see #AUTOWIRE_BY_NAME_@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_NO;void autowireBeanProperties(Object existingBean, int autowireMode, boolean dependencyCheck)_			throws BeansException_;autowire,the,bean,properties,of,the,given,bean,instance,by,name,or,type,can,also,be,invoked,with,code,in,order,to,just,apply,after,instantiation,callbacks,e,g,for,annotation,driven,injection,p,does,i,not,i,apply,standard,link,bean,post,processor,bean,post,processors,callbacks,or,perform,any,further,initialization,of,the,bean,this,interface,offers,distinct,fine,grained,operations,for,those,purposes,for,example,link,initialize,bean,however,link,instantiation,aware,bean,post,processor,callbacks,are,applied,if,applicable,to,the,configuration,of,the,instance,param,existing,bean,the,existing,bean,instance,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,param,dependency,check,whether,to,perform,a,dependency,check,for,object,references,in,the,bean,instance,throws,beans,exception,if,wiring,failed,see,see,see;void,autowire,bean,properties,object,existing,bean,int,autowire,mode,boolean,dependency,check,throws,beans,exception
AutowireCapableBeanFactory -> void autowireBeanProperties(Object existingBean, int autowireMode, boolean dependencyCheck) 			throws BeansException_;1470948126;Autowire the bean properties of the given bean instance by name or type._Can also be invoked with {@code AUTOWIRE_NO} in order to just apply_after-instantiation callbacks (e.g. for annotation-driven injection)._<p>Does <i>not</i> apply standard {@link BeanPostProcessor BeanPostProcessors}_callbacks or perform any further initialization of the bean. This interface_offers distinct, fine-grained operations for those purposes, for example_{@link #initializeBean}. However, {@link InstantiationAwareBeanPostProcessor}_callbacks are applied, if applicable to the configuration of the instance._@param existingBean the existing bean instance_@param autowireMode by name or type, using the constants in this interface_@param dependencyCheck whether to perform a dependency check for object_references in the bean instance_@throws BeansException if wiring failed_@see #AUTOWIRE_BY_NAME_@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_NO;void autowireBeanProperties(Object existingBean, int autowireMode, boolean dependencyCheck)_			throws BeansException_;autowire,the,bean,properties,of,the,given,bean,instance,by,name,or,type,can,also,be,invoked,with,code,in,order,to,just,apply,after,instantiation,callbacks,e,g,for,annotation,driven,injection,p,does,i,not,i,apply,standard,link,bean,post,processor,bean,post,processors,callbacks,or,perform,any,further,initialization,of,the,bean,this,interface,offers,distinct,fine,grained,operations,for,those,purposes,for,example,link,initialize,bean,however,link,instantiation,aware,bean,post,processor,callbacks,are,applied,if,applicable,to,the,configuration,of,the,instance,param,existing,bean,the,existing,bean,instance,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,param,dependency,check,whether,to,perform,a,dependency,check,for,object,references,in,the,bean,instance,throws,beans,exception,if,wiring,failed,see,see,see;void,autowire,bean,properties,object,existing,bean,int,autowire,mode,boolean,dependency,check,throws,beans,exception
AutowireCapableBeanFactory -> void autowireBeanProperties(Object existingBean, int autowireMode, boolean dependencyCheck) 			throws BeansException_;1470952254;Autowire the bean properties of the given bean instance by name or type._Can also be invoked with {@code AUTOWIRE_NO} in order to just apply_after-instantiation callbacks (e.g. for annotation-driven injection)._<p>Does <i>not</i> apply standard {@link BeanPostProcessor BeanPostProcessors}_callbacks or perform any further initialization of the bean. This interface_offers distinct, fine-grained operations for those purposes, for example_{@link #initializeBean}. However, {@link InstantiationAwareBeanPostProcessor}_callbacks are applied, if applicable to the configuration of the instance._@param existingBean the existing bean instance_@param autowireMode by name or type, using the constants in this interface_@param dependencyCheck whether to perform a dependency check for object_references in the bean instance_@throws BeansException if wiring failed_@see #AUTOWIRE_BY_NAME_@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_NO;void autowireBeanProperties(Object existingBean, int autowireMode, boolean dependencyCheck)_			throws BeansException_;autowire,the,bean,properties,of,the,given,bean,instance,by,name,or,type,can,also,be,invoked,with,code,in,order,to,just,apply,after,instantiation,callbacks,e,g,for,annotation,driven,injection,p,does,i,not,i,apply,standard,link,bean,post,processor,bean,post,processors,callbacks,or,perform,any,further,initialization,of,the,bean,this,interface,offers,distinct,fine,grained,operations,for,those,purposes,for,example,link,initialize,bean,however,link,instantiation,aware,bean,post,processor,callbacks,are,applied,if,applicable,to,the,configuration,of,the,instance,param,existing,bean,the,existing,bean,instance,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,param,dependency,check,whether,to,perform,a,dependency,check,for,object,references,in,the,bean,instance,throws,beans,exception,if,wiring,failed,see,see,see;void,autowire,bean,properties,object,existing,bean,int,autowire,mode,boolean,dependency,check,throws,beans,exception
AutowireCapableBeanFactory -> void autowireBeanProperties(Object existingBean, int autowireMode, boolean dependencyCheck) 			throws BeansException_;1495868221;Autowire the bean properties of the given bean instance by name or type._Can also be invoked with {@code AUTOWIRE_NO} in order to just apply_after-instantiation callbacks (e.g. for annotation-driven injection)._<p>Does <i>not</i> apply standard {@link BeanPostProcessor BeanPostProcessors}_callbacks or perform any further initialization of the bean. This interface_offers distinct, fine-grained operations for those purposes, for example_{@link #initializeBean}. However, {@link InstantiationAwareBeanPostProcessor}_callbacks are applied, if applicable to the configuration of the instance._@param existingBean the existing bean instance_@param autowireMode by name or type, using the constants in this interface_@param dependencyCheck whether to perform a dependency check for object_references in the bean instance_@throws BeansException if wiring failed_@see #AUTOWIRE_BY_NAME_@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_NO;void autowireBeanProperties(Object existingBean, int autowireMode, boolean dependencyCheck)_			throws BeansException_;autowire,the,bean,properties,of,the,given,bean,instance,by,name,or,type,can,also,be,invoked,with,code,in,order,to,just,apply,after,instantiation,callbacks,e,g,for,annotation,driven,injection,p,does,i,not,i,apply,standard,link,bean,post,processor,bean,post,processors,callbacks,or,perform,any,further,initialization,of,the,bean,this,interface,offers,distinct,fine,grained,operations,for,those,purposes,for,example,link,initialize,bean,however,link,instantiation,aware,bean,post,processor,callbacks,are,applied,if,applicable,to,the,configuration,of,the,instance,param,existing,bean,the,existing,bean,instance,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,param,dependency,check,whether,to,perform,a,dependency,check,for,object,references,in,the,bean,instance,throws,beans,exception,if,wiring,failed,see,see,see;void,autowire,bean,properties,object,existing,bean,int,autowire,mode,boolean,dependency,check,throws,beans,exception
AutowireCapableBeanFactory -> void autowireBeanProperties(Object existingBean, int autowireMode, boolean dependencyCheck) 			throws BeansException_;1496259743;Autowire the bean properties of the given bean instance by name or type._Can also be invoked with {@code AUTOWIRE_NO} in order to just apply_after-instantiation callbacks (e.g. for annotation-driven injection)._<p>Does <i>not</i> apply standard {@link BeanPostProcessor BeanPostProcessors}_callbacks or perform any further initialization of the bean. This interface_offers distinct, fine-grained operations for those purposes, for example_{@link #initializeBean}. However, {@link InstantiationAwareBeanPostProcessor}_callbacks are applied, if applicable to the configuration of the instance._@param existingBean the existing bean instance_@param autowireMode by name or type, using the constants in this interface_@param dependencyCheck whether to perform a dependency check for object_references in the bean instance_@throws BeansException if wiring failed_@see #AUTOWIRE_BY_NAME_@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_NO;void autowireBeanProperties(Object existingBean, int autowireMode, boolean dependencyCheck)_			throws BeansException_;autowire,the,bean,properties,of,the,given,bean,instance,by,name,or,type,can,also,be,invoked,with,code,in,order,to,just,apply,after,instantiation,callbacks,e,g,for,annotation,driven,injection,p,does,i,not,i,apply,standard,link,bean,post,processor,bean,post,processors,callbacks,or,perform,any,further,initialization,of,the,bean,this,interface,offers,distinct,fine,grained,operations,for,those,purposes,for,example,link,initialize,bean,however,link,instantiation,aware,bean,post,processor,callbacks,are,applied,if,applicable,to,the,configuration,of,the,instance,param,existing,bean,the,existing,bean,instance,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,param,dependency,check,whether,to,perform,a,dependency,check,for,object,references,in,the,bean,instance,throws,beans,exception,if,wiring,failed,see,see,see;void,autowire,bean,properties,object,existing,bean,int,autowire,mode,boolean,dependency,check,throws,beans,exception
AutowireCapableBeanFactory -> void autowireBeanProperties(Object existingBean, int autowireMode, boolean dependencyCheck) 			throws BeansException_;1496837955;Autowire the bean properties of the given bean instance by name or type._Can also be invoked with {@code AUTOWIRE_NO} in order to just apply_after-instantiation callbacks (e.g. for annotation-driven injection)._<p>Does <i>not</i> apply standard {@link BeanPostProcessor BeanPostProcessors}_callbacks or perform any further initialization of the bean. This interface_offers distinct, fine-grained operations for those purposes, for example_{@link #initializeBean}. However, {@link InstantiationAwareBeanPostProcessor}_callbacks are applied, if applicable to the configuration of the instance._@param existingBean the existing bean instance_@param autowireMode by name or type, using the constants in this interface_@param dependencyCheck whether to perform a dependency check for object_references in the bean instance_@throws BeansException if wiring failed_@see #AUTOWIRE_BY_NAME_@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_NO;void autowireBeanProperties(Object existingBean, int autowireMode, boolean dependencyCheck)_			throws BeansException_;autowire,the,bean,properties,of,the,given,bean,instance,by,name,or,type,can,also,be,invoked,with,code,in,order,to,just,apply,after,instantiation,callbacks,e,g,for,annotation,driven,injection,p,does,i,not,i,apply,standard,link,bean,post,processor,bean,post,processors,callbacks,or,perform,any,further,initialization,of,the,bean,this,interface,offers,distinct,fine,grained,operations,for,those,purposes,for,example,link,initialize,bean,however,link,instantiation,aware,bean,post,processor,callbacks,are,applied,if,applicable,to,the,configuration,of,the,instance,param,existing,bean,the,existing,bean,instance,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,param,dependency,check,whether,to,perform,a,dependency,check,for,object,references,in,the,bean,instance,throws,beans,exception,if,wiring,failed,see,see,see;void,autowire,bean,properties,object,existing,bean,int,autowire,mode,boolean,dependency,check,throws,beans,exception
AutowireCapableBeanFactory -> void autowireBeanProperties(Object existingBean, int autowireMode, boolean dependencyCheck) 			throws BeansException_;1503007895;Autowire the bean properties of the given bean instance by name or type._Can also be invoked with {@code AUTOWIRE_NO} in order to just apply_after-instantiation callbacks (e.g. for annotation-driven injection)._<p>Does <i>not</i> apply standard {@link BeanPostProcessor BeanPostProcessors}_callbacks or perform any further initialization of the bean. This interface_offers distinct, fine-grained operations for those purposes, for example_{@link #initializeBean}. However, {@link InstantiationAwareBeanPostProcessor}_callbacks are applied, if applicable to the configuration of the instance._@param existingBean the existing bean instance_@param autowireMode by name or type, using the constants in this interface_@param dependencyCheck whether to perform a dependency check for object_references in the bean instance_@throws BeansException if wiring failed_@see #AUTOWIRE_BY_NAME_@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_NO;void autowireBeanProperties(Object existingBean, int autowireMode, boolean dependencyCheck)_			throws BeansException_;autowire,the,bean,properties,of,the,given,bean,instance,by,name,or,type,can,also,be,invoked,with,code,in,order,to,just,apply,after,instantiation,callbacks,e,g,for,annotation,driven,injection,p,does,i,not,i,apply,standard,link,bean,post,processor,bean,post,processors,callbacks,or,perform,any,further,initialization,of,the,bean,this,interface,offers,distinct,fine,grained,operations,for,those,purposes,for,example,link,initialize,bean,however,link,instantiation,aware,bean,post,processor,callbacks,are,applied,if,applicable,to,the,configuration,of,the,instance,param,existing,bean,the,existing,bean,instance,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,param,dependency,check,whether,to,perform,a,dependency,check,for,object,references,in,the,bean,instance,throws,beans,exception,if,wiring,failed,see,see,see;void,autowire,bean,properties,object,existing,bean,int,autowire,mode,boolean,dependency,check,throws,beans,exception
AutowireCapableBeanFactory -> void autowireBeanProperties(Object existingBean, int autowireMode, boolean dependencyCheck) 			throws BeansException_;1530174524;Autowire the bean properties of the given bean instance by name or type._Can also be invoked with {@code AUTOWIRE_NO} in order to just apply_after-instantiation callbacks (e.g. for annotation-driven injection)._<p>Does <i>not</i> apply standard {@link BeanPostProcessor BeanPostProcessors}_callbacks or perform any further initialization of the bean. This interface_offers distinct, fine-grained operations for those purposes, for example_{@link #initializeBean}. However, {@link InstantiationAwareBeanPostProcessor}_callbacks are applied, if applicable to the configuration of the instance._@param existingBean the existing bean instance_@param autowireMode by name or type, using the constants in this interface_@param dependencyCheck whether to perform a dependency check for object_references in the bean instance_@throws BeansException if wiring failed_@see #AUTOWIRE_BY_NAME_@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_NO;void autowireBeanProperties(Object existingBean, int autowireMode, boolean dependencyCheck)_			throws BeansException_;autowire,the,bean,properties,of,the,given,bean,instance,by,name,or,type,can,also,be,invoked,with,code,in,order,to,just,apply,after,instantiation,callbacks,e,g,for,annotation,driven,injection,p,does,i,not,i,apply,standard,link,bean,post,processor,bean,post,processors,callbacks,or,perform,any,further,initialization,of,the,bean,this,interface,offers,distinct,fine,grained,operations,for,those,purposes,for,example,link,initialize,bean,however,link,instantiation,aware,bean,post,processor,callbacks,are,applied,if,applicable,to,the,configuration,of,the,instance,param,existing,bean,the,existing,bean,instance,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,param,dependency,check,whether,to,perform,a,dependency,check,for,object,references,in,the,bean,instance,throws,beans,exception,if,wiring,failed,see,see,see;void,autowire,bean,properties,object,existing,bean,int,autowire,mode,boolean,dependency,check,throws,beans,exception
AutowireCapableBeanFactory -> void autowireBeanProperties(Object existingBean, int autowireMode, boolean dependencyCheck) 			throws BeansException_;1535064541;Autowire the bean properties of the given bean instance by name or type._Can also be invoked with {@code AUTOWIRE_NO} in order to just apply_after-instantiation callbacks (e.g. for annotation-driven injection)._<p>Does <i>not</i> apply standard {@link BeanPostProcessor BeanPostProcessors}_callbacks or perform any further initialization of the bean. This interface_offers distinct, fine-grained operations for those purposes, for example_{@link #initializeBean}. However, {@link InstantiationAwareBeanPostProcessor}_callbacks are applied, if applicable to the configuration of the instance._@param existingBean the existing bean instance_@param autowireMode by name or type, using the constants in this interface_@param dependencyCheck whether to perform a dependency check for object_references in the bean instance_@throws BeansException if wiring failed_@see #AUTOWIRE_BY_NAME_@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_NO;void autowireBeanProperties(Object existingBean, int autowireMode, boolean dependencyCheck)_			throws BeansException_;autowire,the,bean,properties,of,the,given,bean,instance,by,name,or,type,can,also,be,invoked,with,code,in,order,to,just,apply,after,instantiation,callbacks,e,g,for,annotation,driven,injection,p,does,i,not,i,apply,standard,link,bean,post,processor,bean,post,processors,callbacks,or,perform,any,further,initialization,of,the,bean,this,interface,offers,distinct,fine,grained,operations,for,those,purposes,for,example,link,initialize,bean,however,link,instantiation,aware,bean,post,processor,callbacks,are,applied,if,applicable,to,the,configuration,of,the,instance,param,existing,bean,the,existing,bean,instance,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,param,dependency,check,whether,to,perform,a,dependency,check,for,object,references,in,the,bean,instance,throws,beans,exception,if,wiring,failed,see,see,see;void,autowire,bean,properties,object,existing,bean,int,autowire,mode,boolean,dependency,check,throws,beans,exception
AutowireCapableBeanFactory -> void autowireBeanProperties(Object existingBean, int autowireMode, boolean dependencyCheck) 			throws BeansException_;1549551674;Autowire the bean properties of the given bean instance by name or type._Can also be invoked with {@code AUTOWIRE_NO} in order to just apply_after-instantiation callbacks (e.g. for annotation-driven injection)._<p>Does <i>not</i> apply standard {@link BeanPostProcessor BeanPostProcessors}_callbacks or perform any further initialization of the bean. This interface_offers distinct, fine-grained operations for those purposes, for example_{@link #initializeBean}. However, {@link InstantiationAwareBeanPostProcessor}_callbacks are applied, if applicable to the configuration of the instance._@param existingBean the existing bean instance_@param autowireMode by name or type, using the constants in this interface_@param dependencyCheck whether to perform a dependency check for object_references in the bean instance_@throws BeansException if wiring failed_@see #AUTOWIRE_BY_NAME_@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_NO;void autowireBeanProperties(Object existingBean, int autowireMode, boolean dependencyCheck)_			throws BeansException_;autowire,the,bean,properties,of,the,given,bean,instance,by,name,or,type,can,also,be,invoked,with,code,in,order,to,just,apply,after,instantiation,callbacks,e,g,for,annotation,driven,injection,p,does,i,not,i,apply,standard,link,bean,post,processor,bean,post,processors,callbacks,or,perform,any,further,initialization,of,the,bean,this,interface,offers,distinct,fine,grained,operations,for,those,purposes,for,example,link,initialize,bean,however,link,instantiation,aware,bean,post,processor,callbacks,are,applied,if,applicable,to,the,configuration,of,the,instance,param,existing,bean,the,existing,bean,instance,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,param,dependency,check,whether,to,perform,a,dependency,check,for,object,references,in,the,bean,instance,throws,beans,exception,if,wiring,failed,see,see,see;void,autowire,bean,properties,object,existing,bean,int,autowire,mode,boolean,dependency,check,throws,beans,exception
AutowireCapableBeanFactory -> void autowireBeanProperties(Object existingBean, int autowireMode, boolean dependencyCheck) 			throws BeansException_;1549577242;Autowire the bean properties of the given bean instance by name or type._Can also be invoked with {@code AUTOWIRE_NO} in order to just apply_after-instantiation callbacks (e.g. for annotation-driven injection)._<p>Does <i>not</i> apply standard {@link BeanPostProcessor BeanPostProcessors}_callbacks or perform any further initialization of the bean. This interface_offers distinct, fine-grained operations for those purposes, for example_{@link #initializeBean}. However, {@link InstantiationAwareBeanPostProcessor}_callbacks are applied, if applicable to the configuration of the instance._@param existingBean the existing bean instance_@param autowireMode by name or type, using the constants in this interface_@param dependencyCheck whether to perform a dependency check for object_references in the bean instance_@throws BeansException if wiring failed_@see #AUTOWIRE_BY_NAME_@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_NO;void autowireBeanProperties(Object existingBean, int autowireMode, boolean dependencyCheck)_			throws BeansException_;autowire,the,bean,properties,of,the,given,bean,instance,by,name,or,type,can,also,be,invoked,with,code,in,order,to,just,apply,after,instantiation,callbacks,e,g,for,annotation,driven,injection,p,does,i,not,i,apply,standard,link,bean,post,processor,bean,post,processors,callbacks,or,perform,any,further,initialization,of,the,bean,this,interface,offers,distinct,fine,grained,operations,for,those,purposes,for,example,link,initialize,bean,however,link,instantiation,aware,bean,post,processor,callbacks,are,applied,if,applicable,to,the,configuration,of,the,instance,param,existing,bean,the,existing,bean,instance,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,param,dependency,check,whether,to,perform,a,dependency,check,for,object,references,in,the,bean,instance,throws,beans,exception,if,wiring,failed,see,see,see;void,autowire,bean,properties,object,existing,bean,int,autowire,mode,boolean,dependency,check,throws,beans,exception
AutowireCapableBeanFactory -> Object resolveDependency(DependencyDescriptor descriptor, String beanName, 			Set<String> autowiredBeanNames, TypeConverter typeConverter) throws BeansException_;1328020251;Resolve the specified dependency against the beans defined in this factory._@param descriptor the descriptor for the dependency_@param beanName the name of the bean which declares the present dependency_@param autowiredBeanNames a Set that all names of autowired beans (used for_resolving the present dependency) are supposed to be added to_@param typeConverter the TypeConverter to use for populating arrays and_collections_@return the resolved object, or <code>null</code> if none found_@throws BeansException in dependency resolution failed;Object resolveDependency(DependencyDescriptor descriptor, String beanName,_			Set<String> autowiredBeanNames, TypeConverter typeConverter) throws BeansException_;resolve,the,specified,dependency,against,the,beans,defined,in,this,factory,param,descriptor,the,descriptor,for,the,dependency,param,bean,name,the,name,of,the,bean,which,declares,the,present,dependency,param,autowired,bean,names,a,set,that,all,names,of,autowired,beans,used,for,resolving,the,present,dependency,are,supposed,to,be,added,to,param,type,converter,the,type,converter,to,use,for,populating,arrays,and,collections,return,the,resolved,object,or,code,null,code,if,none,found,throws,beans,exception,in,dependency,resolution,failed;object,resolve,dependency,dependency,descriptor,descriptor,string,bean,name,set,string,autowired,bean,names,type,converter,type,converter,throws,beans,exception
AutowireCapableBeanFactory -> Object resolveDependency(DependencyDescriptor descriptor, String beanName, 			Set<String> autowiredBeanNames, TypeConverter typeConverter) throws BeansException_;1356735495;Resolve the specified dependency against the beans defined in this factory._@param descriptor the descriptor for the dependency_@param beanName the name of the bean which declares the present dependency_@param autowiredBeanNames a Set that all names of autowired beans (used for_resolving the present dependency) are supposed to be added to_@param typeConverter the TypeConverter to use for populating arrays and_collections_@return the resolved object, or {@code null} if none found_@throws BeansException in dependency resolution failed;Object resolveDependency(DependencyDescriptor descriptor, String beanName,_			Set<String> autowiredBeanNames, TypeConverter typeConverter) throws BeansException_;resolve,the,specified,dependency,against,the,beans,defined,in,this,factory,param,descriptor,the,descriptor,for,the,dependency,param,bean,name,the,name,of,the,bean,which,declares,the,present,dependency,param,autowired,bean,names,a,set,that,all,names,of,autowired,beans,used,for,resolving,the,present,dependency,are,supposed,to,be,added,to,param,type,converter,the,type,converter,to,use,for,populating,arrays,and,collections,return,the,resolved,object,or,code,null,if,none,found,throws,beans,exception,in,dependency,resolution,failed;object,resolve,dependency,dependency,descriptor,descriptor,string,bean,name,set,string,autowired,bean,names,type,converter,type,converter,throws,beans,exception
AutowireCapableBeanFactory -> Object resolveDependency(DependencyDescriptor descriptor, String beanName, 			Set<String> autowiredBeanNames, TypeConverter typeConverter) throws BeansException_;1364503447;Resolve the specified dependency against the beans defined in this factory._@param descriptor the descriptor for the dependency_@param beanName the name of the bean which declares the present dependency_@param autowiredBeanNames a Set that all names of autowired beans (used for_resolving the present dependency) are supposed to be added to_@param typeConverter the TypeConverter to use for populating arrays and_collections_@return the resolved object, or {@code null} if none found_@throws BeansException in dependency resolution failed;Object resolveDependency(DependencyDescriptor descriptor, String beanName,_			Set<String> autowiredBeanNames, TypeConverter typeConverter) throws BeansException_;resolve,the,specified,dependency,against,the,beans,defined,in,this,factory,param,descriptor,the,descriptor,for,the,dependency,param,bean,name,the,name,of,the,bean,which,declares,the,present,dependency,param,autowired,bean,names,a,set,that,all,names,of,autowired,beans,used,for,resolving,the,present,dependency,are,supposed,to,be,added,to,param,type,converter,the,type,converter,to,use,for,populating,arrays,and,collections,return,the,resolved,object,or,code,null,if,none,found,throws,beans,exception,in,dependency,resolution,failed;object,resolve,dependency,dependency,descriptor,descriptor,string,bean,name,set,string,autowired,bean,names,type,converter,type,converter,throws,beans,exception
AutowireCapableBeanFactory -> Object resolveDependency(DependencyDescriptor descriptor, String beanName, 			Set<String> autowiredBeanNames, TypeConverter typeConverter) throws BeansException_;1368546246;Resolve the specified dependency against the beans defined in this factory._@param descriptor the descriptor for the dependency_@param beanName the name of the bean which declares the present dependency_@param autowiredBeanNames a Set that all names of autowired beans (used for_resolving the present dependency) are supposed to be added to_@param typeConverter the TypeConverter to use for populating arrays and_collections_@return the resolved object, or {@code null} if none found_@throws BeansException in dependency resolution failed;Object resolveDependency(DependencyDescriptor descriptor, String beanName,_			Set<String> autowiredBeanNames, TypeConverter typeConverter) throws BeansException_;resolve,the,specified,dependency,against,the,beans,defined,in,this,factory,param,descriptor,the,descriptor,for,the,dependency,param,bean,name,the,name,of,the,bean,which,declares,the,present,dependency,param,autowired,bean,names,a,set,that,all,names,of,autowired,beans,used,for,resolving,the,present,dependency,are,supposed,to,be,added,to,param,type,converter,the,type,converter,to,use,for,populating,arrays,and,collections,return,the,resolved,object,or,code,null,if,none,found,throws,beans,exception,in,dependency,resolution,failed;object,resolve,dependency,dependency,descriptor,descriptor,string,bean,name,set,string,autowired,bean,names,type,converter,type,converter,throws,beans,exception
AutowireCapableBeanFactory -> Object resolveDependency(DependencyDescriptor descriptor, String beanName, 			Set<String> autowiredBeanNames, TypeConverter typeConverter) throws BeansException_;1458483997;Resolve the specified dependency against the beans defined in this factory._@param descriptor the descriptor for the dependency_@param beanName the name of the bean which declares the present dependency_@param autowiredBeanNames a Set that all names of autowired beans (used for_resolving the present dependency) are supposed to be added to_@param typeConverter the TypeConverter to use for populating arrays and_collections_@return the resolved object, or {@code null} if none found_@throws BeansException if dependency resolution failed;Object resolveDependency(DependencyDescriptor descriptor, String beanName,_			Set<String> autowiredBeanNames, TypeConverter typeConverter) throws BeansException_;resolve,the,specified,dependency,against,the,beans,defined,in,this,factory,param,descriptor,the,descriptor,for,the,dependency,param,bean,name,the,name,of,the,bean,which,declares,the,present,dependency,param,autowired,bean,names,a,set,that,all,names,of,autowired,beans,used,for,resolving,the,present,dependency,are,supposed,to,be,added,to,param,type,converter,the,type,converter,to,use,for,populating,arrays,and,collections,return,the,resolved,object,or,code,null,if,none,found,throws,beans,exception,if,dependency,resolution,failed;object,resolve,dependency,dependency,descriptor,descriptor,string,bean,name,set,string,autowired,bean,names,type,converter,type,converter,throws,beans,exception
AutowireCapableBeanFactory -> @Nullable 	Object resolveDependency(DependencyDescriptor descriptor, @Nullable String requestingBeanName) throws BeansException_;1496259743;Resolve the specified dependency against the beans defined in this factory._@param descriptor the descriptor for the dependency (field/method/constructor)_@param requestingBeanName the name of the bean which declares the given dependency_@return the resolved object, or {@code null} if none found_@throws NoSuchBeanDefinitionException if no matching bean was found_@throws NoUniqueBeanDefinitionException if more than one matching bean was found_@throws BeansException if dependency resolution failed for any other reason_@since 2.5_@see #resolveDependency(DependencyDescriptor, String, Set, TypeConverter);@Nullable_	Object resolveDependency(DependencyDescriptor descriptor, @Nullable String requestingBeanName) throws BeansException_;resolve,the,specified,dependency,against,the,beans,defined,in,this,factory,param,descriptor,the,descriptor,for,the,dependency,field,method,constructor,param,requesting,bean,name,the,name,of,the,bean,which,declares,the,given,dependency,return,the,resolved,object,or,code,null,if,none,found,throws,no,such,bean,definition,exception,if,no,matching,bean,was,found,throws,no,unique,bean,definition,exception,if,more,than,one,matching,bean,was,found,throws,beans,exception,if,dependency,resolution,failed,for,any,other,reason,since,2,5,see,resolve,dependency,dependency,descriptor,string,set,type,converter;nullable,object,resolve,dependency,dependency,descriptor,descriptor,nullable,string,requesting,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> @Nullable 	Object resolveDependency(DependencyDescriptor descriptor, @Nullable String requestingBeanName) throws BeansException_;1496837955;Resolve the specified dependency against the beans defined in this factory._@param descriptor the descriptor for the dependency (field/method/constructor)_@param requestingBeanName the name of the bean which declares the given dependency_@return the resolved object, or {@code null} if none found_@throws NoSuchBeanDefinitionException if no matching bean was found_@throws NoUniqueBeanDefinitionException if more than one matching bean was found_@throws BeansException if dependency resolution failed for any other reason_@since 2.5_@see #resolveDependency(DependencyDescriptor, String, Set, TypeConverter);@Nullable_	Object resolveDependency(DependencyDescriptor descriptor, @Nullable String requestingBeanName) throws BeansException_;resolve,the,specified,dependency,against,the,beans,defined,in,this,factory,param,descriptor,the,descriptor,for,the,dependency,field,method,constructor,param,requesting,bean,name,the,name,of,the,bean,which,declares,the,given,dependency,return,the,resolved,object,or,code,null,if,none,found,throws,no,such,bean,definition,exception,if,no,matching,bean,was,found,throws,no,unique,bean,definition,exception,if,more,than,one,matching,bean,was,found,throws,beans,exception,if,dependency,resolution,failed,for,any,other,reason,since,2,5,see,resolve,dependency,dependency,descriptor,string,set,type,converter;nullable,object,resolve,dependency,dependency,descriptor,descriptor,nullable,string,requesting,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> @Nullable 	Object resolveDependency(DependencyDescriptor descriptor, @Nullable String requestingBeanName) throws BeansException_;1503007895;Resolve the specified dependency against the beans defined in this factory._@param descriptor the descriptor for the dependency (field/method/constructor)_@param requestingBeanName the name of the bean which declares the given dependency_@return the resolved object, or {@code null} if none found_@throws NoSuchBeanDefinitionException if no matching bean was found_@throws NoUniqueBeanDefinitionException if more than one matching bean was found_@throws BeansException if dependency resolution failed for any other reason_@since 2.5_@see #resolveDependency(DependencyDescriptor, String, Set, TypeConverter);@Nullable_	Object resolveDependency(DependencyDescriptor descriptor, @Nullable String requestingBeanName) throws BeansException_;resolve,the,specified,dependency,against,the,beans,defined,in,this,factory,param,descriptor,the,descriptor,for,the,dependency,field,method,constructor,param,requesting,bean,name,the,name,of,the,bean,which,declares,the,given,dependency,return,the,resolved,object,or,code,null,if,none,found,throws,no,such,bean,definition,exception,if,no,matching,bean,was,found,throws,no,unique,bean,definition,exception,if,more,than,one,matching,bean,was,found,throws,beans,exception,if,dependency,resolution,failed,for,any,other,reason,since,2,5,see,resolve,dependency,dependency,descriptor,string,set,type,converter;nullable,object,resolve,dependency,dependency,descriptor,descriptor,nullable,string,requesting,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> @Nullable 	Object resolveDependency(DependencyDescriptor descriptor, @Nullable String requestingBeanName) throws BeansException_;1530174524;Resolve the specified dependency against the beans defined in this factory._@param descriptor the descriptor for the dependency (field/method/constructor)_@param requestingBeanName the name of the bean which declares the given dependency_@return the resolved object, or {@code null} if none found_@throws NoSuchBeanDefinitionException if no matching bean was found_@throws NoUniqueBeanDefinitionException if more than one matching bean was found_@throws BeansException if dependency resolution failed for any other reason_@since 2.5_@see #resolveDependency(DependencyDescriptor, String, Set, TypeConverter);@Nullable_	Object resolveDependency(DependencyDescriptor descriptor, @Nullable String requestingBeanName) throws BeansException_;resolve,the,specified,dependency,against,the,beans,defined,in,this,factory,param,descriptor,the,descriptor,for,the,dependency,field,method,constructor,param,requesting,bean,name,the,name,of,the,bean,which,declares,the,given,dependency,return,the,resolved,object,or,code,null,if,none,found,throws,no,such,bean,definition,exception,if,no,matching,bean,was,found,throws,no,unique,bean,definition,exception,if,more,than,one,matching,bean,was,found,throws,beans,exception,if,dependency,resolution,failed,for,any,other,reason,since,2,5,see,resolve,dependency,dependency,descriptor,string,set,type,converter;nullable,object,resolve,dependency,dependency,descriptor,descriptor,nullable,string,requesting,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> @Nullable 	Object resolveDependency(DependencyDescriptor descriptor, @Nullable String requestingBeanName) throws BeansException_;1535064541;Resolve the specified dependency against the beans defined in this factory._@param descriptor the descriptor for the dependency (field/method/constructor)_@param requestingBeanName the name of the bean which declares the given dependency_@return the resolved object, or {@code null} if none found_@throws NoSuchBeanDefinitionException if no matching bean was found_@throws NoUniqueBeanDefinitionException if more than one matching bean was found_@throws BeansException if dependency resolution failed for any other reason_@since 2.5_@see #resolveDependency(DependencyDescriptor, String, Set, TypeConverter);@Nullable_	Object resolveDependency(DependencyDescriptor descriptor, @Nullable String requestingBeanName) throws BeansException_;resolve,the,specified,dependency,against,the,beans,defined,in,this,factory,param,descriptor,the,descriptor,for,the,dependency,field,method,constructor,param,requesting,bean,name,the,name,of,the,bean,which,declares,the,given,dependency,return,the,resolved,object,or,code,null,if,none,found,throws,no,such,bean,definition,exception,if,no,matching,bean,was,found,throws,no,unique,bean,definition,exception,if,more,than,one,matching,bean,was,found,throws,beans,exception,if,dependency,resolution,failed,for,any,other,reason,since,2,5,see,resolve,dependency,dependency,descriptor,string,set,type,converter;nullable,object,resolve,dependency,dependency,descriptor,descriptor,nullable,string,requesting,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> @Nullable 	Object resolveDependency(DependencyDescriptor descriptor, @Nullable String requestingBeanName) throws BeansException_;1549551674;Resolve the specified dependency against the beans defined in this factory._@param descriptor the descriptor for the dependency (field/method/constructor)_@param requestingBeanName the name of the bean which declares the given dependency_@return the resolved object, or {@code null} if none found_@throws NoSuchBeanDefinitionException if no matching bean was found_@throws NoUniqueBeanDefinitionException if more than one matching bean was found_@throws BeansException if dependency resolution failed for any other reason_@since 2.5_@see #resolveDependency(DependencyDescriptor, String, Set, TypeConverter);@Nullable_	Object resolveDependency(DependencyDescriptor descriptor, @Nullable String requestingBeanName) throws BeansException_;resolve,the,specified,dependency,against,the,beans,defined,in,this,factory,param,descriptor,the,descriptor,for,the,dependency,field,method,constructor,param,requesting,bean,name,the,name,of,the,bean,which,declares,the,given,dependency,return,the,resolved,object,or,code,null,if,none,found,throws,no,such,bean,definition,exception,if,no,matching,bean,was,found,throws,no,unique,bean,definition,exception,if,more,than,one,matching,bean,was,found,throws,beans,exception,if,dependency,resolution,failed,for,any,other,reason,since,2,5,see,resolve,dependency,dependency,descriptor,string,set,type,converter;nullable,object,resolve,dependency,dependency,descriptor,descriptor,nullable,string,requesting,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> @Nullable 	Object resolveDependency(DependencyDescriptor descriptor, @Nullable String requestingBeanName) throws BeansException_;1549577242;Resolve the specified dependency against the beans defined in this factory._@param descriptor the descriptor for the dependency (field/method/constructor)_@param requestingBeanName the name of the bean which declares the given dependency_@return the resolved object, or {@code null} if none found_@throws NoSuchBeanDefinitionException if no matching bean was found_@throws NoUniqueBeanDefinitionException if more than one matching bean was found_@throws BeansException if dependency resolution failed for any other reason_@since 2.5_@see #resolveDependency(DependencyDescriptor, String, Set, TypeConverter);@Nullable_	Object resolveDependency(DependencyDescriptor descriptor, @Nullable String requestingBeanName) throws BeansException_;resolve,the,specified,dependency,against,the,beans,defined,in,this,factory,param,descriptor,the,descriptor,for,the,dependency,field,method,constructor,param,requesting,bean,name,the,name,of,the,bean,which,declares,the,given,dependency,return,the,resolved,object,or,code,null,if,none,found,throws,no,such,bean,definition,exception,if,no,matching,bean,was,found,throws,no,unique,bean,definition,exception,if,more,than,one,matching,bean,was,found,throws,beans,exception,if,dependency,resolution,failed,for,any,other,reason,since,2,5,see,resolve,dependency,dependency,descriptor,string,set,type,converter;nullable,object,resolve,dependency,dependency,descriptor,descriptor,nullable,string,requesting,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> Object autowire(Class<?> beanClass, int autowireMode, boolean dependencyCheck) throws BeansException_;1368546246;Instantiate a new bean instance of the given class with the specified autowire_strategy. All constants defined in this interface are supported here._Can also be invoked with {@code AUTOWIRE_NO} in order to just apply_before-instantiation callbacks (e.g. for annotation-driven injection)._<p>Does <i>not</i> apply standard {@link BeanPostProcessor BeanPostProcessors}_callbacks or perform any further initialization of the bean. This interface_offers distinct, fine-grained operations for those purposes, for example_{@link #initializeBean}. However, {@link InstantiationAwareBeanPostProcessor}_callbacks are applied, if applicable to the construction of the instance._@param beanClass the class of the bean to instantiate_@param autowireMode by name or type, using the constants in this interface_@param dependencyCheck whether to perform a dependency check for object_references in the bean instance (not applicable to autowiring a constructor,_thus ignored there)_@return the new bean instance_@throws BeansException if instantiation or wiring failed_@see #AUTOWIRE_NO_@see #AUTOWIRE_BY_NAME_@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_CONSTRUCTOR_@see #AUTOWIRE_AUTODETECT_@see #initializeBean_@see #applyBeanPostProcessorsBeforeInitialization_@see #applyBeanPostProcessorsAfterInitialization;Object autowire(Class<?> beanClass, int autowireMode, boolean dependencyCheck) throws BeansException_;instantiate,a,new,bean,instance,of,the,given,class,with,the,specified,autowire,strategy,all,constants,defined,in,this,interface,are,supported,here,can,also,be,invoked,with,code,in,order,to,just,apply,before,instantiation,callbacks,e,g,for,annotation,driven,injection,p,does,i,not,i,apply,standard,link,bean,post,processor,bean,post,processors,callbacks,or,perform,any,further,initialization,of,the,bean,this,interface,offers,distinct,fine,grained,operations,for,those,purposes,for,example,link,initialize,bean,however,link,instantiation,aware,bean,post,processor,callbacks,are,applied,if,applicable,to,the,construction,of,the,instance,param,bean,class,the,class,of,the,bean,to,instantiate,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,param,dependency,check,whether,to,perform,a,dependency,check,for,object,references,in,the,bean,instance,not,applicable,to,autowiring,a,constructor,thus,ignored,there,return,the,new,bean,instance,throws,beans,exception,if,instantiation,or,wiring,failed,see,see,see,see,see,see,initialize,bean,see,apply,bean,post,processors,before,initialization,see,apply,bean,post,processors,after,initialization;object,autowire,class,bean,class,int,autowire,mode,boolean,dependency,check,throws,beans,exception
AutowireCapableBeanFactory -> Object autowire(Class<?> beanClass, int autowireMode, boolean dependencyCheck) throws BeansException_;1458483997;Instantiate a new bean instance of the given class with the specified autowire_strategy. All constants defined in this interface are supported here._Can also be invoked with {@code AUTOWIRE_NO} in order to just apply_before-instantiation callbacks (e.g. for annotation-driven injection)._<p>Does <i>not</i> apply standard {@link BeanPostProcessor BeanPostProcessors}_callbacks or perform any further initialization of the bean. This interface_offers distinct, fine-grained operations for those purposes, for example_{@link #initializeBean}. However, {@link InstantiationAwareBeanPostProcessor}_callbacks are applied, if applicable to the construction of the instance._@param beanClass the class of the bean to instantiate_@param autowireMode by name or type, using the constants in this interface_@param dependencyCheck whether to perform a dependency check for object_references in the bean instance (not applicable to autowiring a constructor,_thus ignored there)_@return the new bean instance_@throws BeansException if instantiation or wiring failed_@see #AUTOWIRE_NO_@see #AUTOWIRE_BY_NAME_@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_CONSTRUCTOR_@see #AUTOWIRE_AUTODETECT_@see #initializeBean_@see #applyBeanPostProcessorsBeforeInitialization_@see #applyBeanPostProcessorsAfterInitialization;Object autowire(Class<?> beanClass, int autowireMode, boolean dependencyCheck) throws BeansException_;instantiate,a,new,bean,instance,of,the,given,class,with,the,specified,autowire,strategy,all,constants,defined,in,this,interface,are,supported,here,can,also,be,invoked,with,code,in,order,to,just,apply,before,instantiation,callbacks,e,g,for,annotation,driven,injection,p,does,i,not,i,apply,standard,link,bean,post,processor,bean,post,processors,callbacks,or,perform,any,further,initialization,of,the,bean,this,interface,offers,distinct,fine,grained,operations,for,those,purposes,for,example,link,initialize,bean,however,link,instantiation,aware,bean,post,processor,callbacks,are,applied,if,applicable,to,the,construction,of,the,instance,param,bean,class,the,class,of,the,bean,to,instantiate,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,param,dependency,check,whether,to,perform,a,dependency,check,for,object,references,in,the,bean,instance,not,applicable,to,autowiring,a,constructor,thus,ignored,there,return,the,new,bean,instance,throws,beans,exception,if,instantiation,or,wiring,failed,see,see,see,see,see,see,initialize,bean,see,apply,bean,post,processors,before,initialization,see,apply,bean,post,processors,after,initialization;object,autowire,class,bean,class,int,autowire,mode,boolean,dependency,check,throws,beans,exception
AutowireCapableBeanFactory -> Object autowire(Class<?> beanClass, int autowireMode, boolean dependencyCheck) throws BeansException_;1470948126;Instantiate a new bean instance of the given class with the specified autowire_strategy. All constants defined in this interface are supported here._Can also be invoked with {@code AUTOWIRE_NO} in order to just apply_before-instantiation callbacks (e.g. for annotation-driven injection)._<p>Does <i>not</i> apply standard {@link BeanPostProcessor BeanPostProcessors}_callbacks or perform any further initialization of the bean. This interface_offers distinct, fine-grained operations for those purposes, for example_{@link #initializeBean}. However, {@link InstantiationAwareBeanPostProcessor}_callbacks are applied, if applicable to the construction of the instance._@param beanClass the class of the bean to instantiate_@param autowireMode by name or type, using the constants in this interface_@param dependencyCheck whether to perform a dependency check for object_references in the bean instance (not applicable to autowiring a constructor,_thus ignored there)_@return the new bean instance_@throws BeansException if instantiation or wiring failed_@see #AUTOWIRE_NO_@see #AUTOWIRE_BY_NAME_@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_CONSTRUCTOR_@see #AUTOWIRE_AUTODETECT_@see #initializeBean_@see #applyBeanPostProcessorsBeforeInitialization_@see #applyBeanPostProcessorsAfterInitialization;Object autowire(Class<?> beanClass, int autowireMode, boolean dependencyCheck) throws BeansException_;instantiate,a,new,bean,instance,of,the,given,class,with,the,specified,autowire,strategy,all,constants,defined,in,this,interface,are,supported,here,can,also,be,invoked,with,code,in,order,to,just,apply,before,instantiation,callbacks,e,g,for,annotation,driven,injection,p,does,i,not,i,apply,standard,link,bean,post,processor,bean,post,processors,callbacks,or,perform,any,further,initialization,of,the,bean,this,interface,offers,distinct,fine,grained,operations,for,those,purposes,for,example,link,initialize,bean,however,link,instantiation,aware,bean,post,processor,callbacks,are,applied,if,applicable,to,the,construction,of,the,instance,param,bean,class,the,class,of,the,bean,to,instantiate,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,param,dependency,check,whether,to,perform,a,dependency,check,for,object,references,in,the,bean,instance,not,applicable,to,autowiring,a,constructor,thus,ignored,there,return,the,new,bean,instance,throws,beans,exception,if,instantiation,or,wiring,failed,see,see,see,see,see,see,initialize,bean,see,apply,bean,post,processors,before,initialization,see,apply,bean,post,processors,after,initialization;object,autowire,class,bean,class,int,autowire,mode,boolean,dependency,check,throws,beans,exception
AutowireCapableBeanFactory -> Object autowire(Class<?> beanClass, int autowireMode, boolean dependencyCheck) throws BeansException_;1470952254;Instantiate a new bean instance of the given class with the specified autowire_strategy. All constants defined in this interface are supported here._Can also be invoked with {@code AUTOWIRE_NO} in order to just apply_before-instantiation callbacks (e.g. for annotation-driven injection)._<p>Does <i>not</i> apply standard {@link BeanPostProcessor BeanPostProcessors}_callbacks or perform any further initialization of the bean. This interface_offers distinct, fine-grained operations for those purposes, for example_{@link #initializeBean}. However, {@link InstantiationAwareBeanPostProcessor}_callbacks are applied, if applicable to the construction of the instance._@param beanClass the class of the bean to instantiate_@param autowireMode by name or type, using the constants in this interface_@param dependencyCheck whether to perform a dependency check for object_references in the bean instance (not applicable to autowiring a constructor,_thus ignored there)_@return the new bean instance_@throws BeansException if instantiation or wiring failed_@see #AUTOWIRE_NO_@see #AUTOWIRE_BY_NAME_@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_CONSTRUCTOR_@see #AUTOWIRE_AUTODETECT_@see #initializeBean_@see #applyBeanPostProcessorsBeforeInitialization_@see #applyBeanPostProcessorsAfterInitialization;Object autowire(Class<?> beanClass, int autowireMode, boolean dependencyCheck) throws BeansException_;instantiate,a,new,bean,instance,of,the,given,class,with,the,specified,autowire,strategy,all,constants,defined,in,this,interface,are,supported,here,can,also,be,invoked,with,code,in,order,to,just,apply,before,instantiation,callbacks,e,g,for,annotation,driven,injection,p,does,i,not,i,apply,standard,link,bean,post,processor,bean,post,processors,callbacks,or,perform,any,further,initialization,of,the,bean,this,interface,offers,distinct,fine,grained,operations,for,those,purposes,for,example,link,initialize,bean,however,link,instantiation,aware,bean,post,processor,callbacks,are,applied,if,applicable,to,the,construction,of,the,instance,param,bean,class,the,class,of,the,bean,to,instantiate,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,param,dependency,check,whether,to,perform,a,dependency,check,for,object,references,in,the,bean,instance,not,applicable,to,autowiring,a,constructor,thus,ignored,there,return,the,new,bean,instance,throws,beans,exception,if,instantiation,or,wiring,failed,see,see,see,see,see,see,initialize,bean,see,apply,bean,post,processors,before,initialization,see,apply,bean,post,processors,after,initialization;object,autowire,class,bean,class,int,autowire,mode,boolean,dependency,check,throws,beans,exception
AutowireCapableBeanFactory -> Object autowire(Class<?> beanClass, int autowireMode, boolean dependencyCheck) throws BeansException_;1495868221;Instantiate a new bean instance of the given class with the specified autowire_strategy. All constants defined in this interface are supported here._Can also be invoked with {@code AUTOWIRE_NO} in order to just apply_before-instantiation callbacks (e.g. for annotation-driven injection)._<p>Does <i>not</i> apply standard {@link BeanPostProcessor BeanPostProcessors}_callbacks or perform any further initialization of the bean. This interface_offers distinct, fine-grained operations for those purposes, for example_{@link #initializeBean}. However, {@link InstantiationAwareBeanPostProcessor}_callbacks are applied, if applicable to the construction of the instance._@param beanClass the class of the bean to instantiate_@param autowireMode by name or type, using the constants in this interface_@param dependencyCheck whether to perform a dependency check for object_references in the bean instance (not applicable to autowiring a constructor,_thus ignored there)_@return the new bean instance_@throws BeansException if instantiation or wiring failed_@see #AUTOWIRE_NO_@see #AUTOWIRE_BY_NAME_@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_CONSTRUCTOR_@see #AUTOWIRE_AUTODETECT_@see #initializeBean_@see #applyBeanPostProcessorsBeforeInitialization_@see #applyBeanPostProcessorsAfterInitialization;Object autowire(Class<?> beanClass, int autowireMode, boolean dependencyCheck) throws BeansException_;instantiate,a,new,bean,instance,of,the,given,class,with,the,specified,autowire,strategy,all,constants,defined,in,this,interface,are,supported,here,can,also,be,invoked,with,code,in,order,to,just,apply,before,instantiation,callbacks,e,g,for,annotation,driven,injection,p,does,i,not,i,apply,standard,link,bean,post,processor,bean,post,processors,callbacks,or,perform,any,further,initialization,of,the,bean,this,interface,offers,distinct,fine,grained,operations,for,those,purposes,for,example,link,initialize,bean,however,link,instantiation,aware,bean,post,processor,callbacks,are,applied,if,applicable,to,the,construction,of,the,instance,param,bean,class,the,class,of,the,bean,to,instantiate,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,param,dependency,check,whether,to,perform,a,dependency,check,for,object,references,in,the,bean,instance,not,applicable,to,autowiring,a,constructor,thus,ignored,there,return,the,new,bean,instance,throws,beans,exception,if,instantiation,or,wiring,failed,see,see,see,see,see,see,initialize,bean,see,apply,bean,post,processors,before,initialization,see,apply,bean,post,processors,after,initialization;object,autowire,class,bean,class,int,autowire,mode,boolean,dependency,check,throws,beans,exception
AutowireCapableBeanFactory -> Object autowire(Class<?> beanClass, int autowireMode, boolean dependencyCheck) throws BeansException_;1496259743;Instantiate a new bean instance of the given class with the specified autowire_strategy. All constants defined in this interface are supported here._Can also be invoked with {@code AUTOWIRE_NO} in order to just apply_before-instantiation callbacks (e.g. for annotation-driven injection)._<p>Does <i>not</i> apply standard {@link BeanPostProcessor BeanPostProcessors}_callbacks or perform any further initialization of the bean. This interface_offers distinct, fine-grained operations for those purposes, for example_{@link #initializeBean}. However, {@link InstantiationAwareBeanPostProcessor}_callbacks are applied, if applicable to the construction of the instance._@param beanClass the class of the bean to instantiate_@param autowireMode by name or type, using the constants in this interface_@param dependencyCheck whether to perform a dependency check for object_references in the bean instance (not applicable to autowiring a constructor,_thus ignored there)_@return the new bean instance_@throws BeansException if instantiation or wiring failed_@see #AUTOWIRE_NO_@see #AUTOWIRE_BY_NAME_@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_CONSTRUCTOR_@see #AUTOWIRE_AUTODETECT_@see #initializeBean_@see #applyBeanPostProcessorsBeforeInitialization_@see #applyBeanPostProcessorsAfterInitialization;Object autowire(Class<?> beanClass, int autowireMode, boolean dependencyCheck) throws BeansException_;instantiate,a,new,bean,instance,of,the,given,class,with,the,specified,autowire,strategy,all,constants,defined,in,this,interface,are,supported,here,can,also,be,invoked,with,code,in,order,to,just,apply,before,instantiation,callbacks,e,g,for,annotation,driven,injection,p,does,i,not,i,apply,standard,link,bean,post,processor,bean,post,processors,callbacks,or,perform,any,further,initialization,of,the,bean,this,interface,offers,distinct,fine,grained,operations,for,those,purposes,for,example,link,initialize,bean,however,link,instantiation,aware,bean,post,processor,callbacks,are,applied,if,applicable,to,the,construction,of,the,instance,param,bean,class,the,class,of,the,bean,to,instantiate,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,param,dependency,check,whether,to,perform,a,dependency,check,for,object,references,in,the,bean,instance,not,applicable,to,autowiring,a,constructor,thus,ignored,there,return,the,new,bean,instance,throws,beans,exception,if,instantiation,or,wiring,failed,see,see,see,see,see,see,initialize,bean,see,apply,bean,post,processors,before,initialization,see,apply,bean,post,processors,after,initialization;object,autowire,class,bean,class,int,autowire,mode,boolean,dependency,check,throws,beans,exception
AutowireCapableBeanFactory -> Object autowire(Class<?> beanClass, int autowireMode, boolean dependencyCheck) throws BeansException_;1496837955;Instantiate a new bean instance of the given class with the specified autowire_strategy. All constants defined in this interface are supported here._Can also be invoked with {@code AUTOWIRE_NO} in order to just apply_before-instantiation callbacks (e.g. for annotation-driven injection)._<p>Does <i>not</i> apply standard {@link BeanPostProcessor BeanPostProcessors}_callbacks or perform any further initialization of the bean. This interface_offers distinct, fine-grained operations for those purposes, for example_{@link #initializeBean}. However, {@link InstantiationAwareBeanPostProcessor}_callbacks are applied, if applicable to the construction of the instance._@param beanClass the class of the bean to instantiate_@param autowireMode by name or type, using the constants in this interface_@param dependencyCheck whether to perform a dependency check for object_references in the bean instance (not applicable to autowiring a constructor,_thus ignored there)_@return the new bean instance_@throws BeansException if instantiation or wiring failed_@see #AUTOWIRE_NO_@see #AUTOWIRE_BY_NAME_@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_CONSTRUCTOR_@see #AUTOWIRE_AUTODETECT_@see #initializeBean_@see #applyBeanPostProcessorsBeforeInitialization_@see #applyBeanPostProcessorsAfterInitialization;Object autowire(Class<?> beanClass, int autowireMode, boolean dependencyCheck) throws BeansException_;instantiate,a,new,bean,instance,of,the,given,class,with,the,specified,autowire,strategy,all,constants,defined,in,this,interface,are,supported,here,can,also,be,invoked,with,code,in,order,to,just,apply,before,instantiation,callbacks,e,g,for,annotation,driven,injection,p,does,i,not,i,apply,standard,link,bean,post,processor,bean,post,processors,callbacks,or,perform,any,further,initialization,of,the,bean,this,interface,offers,distinct,fine,grained,operations,for,those,purposes,for,example,link,initialize,bean,however,link,instantiation,aware,bean,post,processor,callbacks,are,applied,if,applicable,to,the,construction,of,the,instance,param,bean,class,the,class,of,the,bean,to,instantiate,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,param,dependency,check,whether,to,perform,a,dependency,check,for,object,references,in,the,bean,instance,not,applicable,to,autowiring,a,constructor,thus,ignored,there,return,the,new,bean,instance,throws,beans,exception,if,instantiation,or,wiring,failed,see,see,see,see,see,see,initialize,bean,see,apply,bean,post,processors,before,initialization,see,apply,bean,post,processors,after,initialization;object,autowire,class,bean,class,int,autowire,mode,boolean,dependency,check,throws,beans,exception
AutowireCapableBeanFactory -> Object autowire(Class<?> beanClass, int autowireMode, boolean dependencyCheck) throws BeansException_;1503007895;Instantiate a new bean instance of the given class with the specified autowire_strategy. All constants defined in this interface are supported here._Can also be invoked with {@code AUTOWIRE_NO} in order to just apply_before-instantiation callbacks (e.g. for annotation-driven injection)._<p>Does <i>not</i> apply standard {@link BeanPostProcessor BeanPostProcessors}_callbacks or perform any further initialization of the bean. This interface_offers distinct, fine-grained operations for those purposes, for example_{@link #initializeBean}. However, {@link InstantiationAwareBeanPostProcessor}_callbacks are applied, if applicable to the construction of the instance._@param beanClass the class of the bean to instantiate_@param autowireMode by name or type, using the constants in this interface_@param dependencyCheck whether to perform a dependency check for object_references in the bean instance (not applicable to autowiring a constructor,_thus ignored there)_@return the new bean instance_@throws BeansException if instantiation or wiring failed_@see #AUTOWIRE_NO_@see #AUTOWIRE_BY_NAME_@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_CONSTRUCTOR_@see #AUTOWIRE_AUTODETECT_@see #initializeBean_@see #applyBeanPostProcessorsBeforeInitialization_@see #applyBeanPostProcessorsAfterInitialization;Object autowire(Class<?> beanClass, int autowireMode, boolean dependencyCheck) throws BeansException_;instantiate,a,new,bean,instance,of,the,given,class,with,the,specified,autowire,strategy,all,constants,defined,in,this,interface,are,supported,here,can,also,be,invoked,with,code,in,order,to,just,apply,before,instantiation,callbacks,e,g,for,annotation,driven,injection,p,does,i,not,i,apply,standard,link,bean,post,processor,bean,post,processors,callbacks,or,perform,any,further,initialization,of,the,bean,this,interface,offers,distinct,fine,grained,operations,for,those,purposes,for,example,link,initialize,bean,however,link,instantiation,aware,bean,post,processor,callbacks,are,applied,if,applicable,to,the,construction,of,the,instance,param,bean,class,the,class,of,the,bean,to,instantiate,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,param,dependency,check,whether,to,perform,a,dependency,check,for,object,references,in,the,bean,instance,not,applicable,to,autowiring,a,constructor,thus,ignored,there,return,the,new,bean,instance,throws,beans,exception,if,instantiation,or,wiring,failed,see,see,see,see,see,see,initialize,bean,see,apply,bean,post,processors,before,initialization,see,apply,bean,post,processors,after,initialization;object,autowire,class,bean,class,int,autowire,mode,boolean,dependency,check,throws,beans,exception
AutowireCapableBeanFactory -> Object autowire(Class<?> beanClass, int autowireMode, boolean dependencyCheck) throws BeansException_;1530174524;Instantiate a new bean instance of the given class with the specified autowire_strategy. All constants defined in this interface are supported here._Can also be invoked with {@code AUTOWIRE_NO} in order to just apply_before-instantiation callbacks (e.g. for annotation-driven injection)._<p>Does <i>not</i> apply standard {@link BeanPostProcessor BeanPostProcessors}_callbacks or perform any further initialization of the bean. This interface_offers distinct, fine-grained operations for those purposes, for example_{@link #initializeBean}. However, {@link InstantiationAwareBeanPostProcessor}_callbacks are applied, if applicable to the construction of the instance._@param beanClass the class of the bean to instantiate_@param autowireMode by name or type, using the constants in this interface_@param dependencyCheck whether to perform a dependency check for object_references in the bean instance (not applicable to autowiring a constructor,_thus ignored there)_@return the new bean instance_@throws BeansException if instantiation or wiring failed_@see #AUTOWIRE_NO_@see #AUTOWIRE_BY_NAME_@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_CONSTRUCTOR_@see #AUTOWIRE_AUTODETECT_@see #initializeBean_@see #applyBeanPostProcessorsBeforeInitialization_@see #applyBeanPostProcessorsAfterInitialization;Object autowire(Class<?> beanClass, int autowireMode, boolean dependencyCheck) throws BeansException_;instantiate,a,new,bean,instance,of,the,given,class,with,the,specified,autowire,strategy,all,constants,defined,in,this,interface,are,supported,here,can,also,be,invoked,with,code,in,order,to,just,apply,before,instantiation,callbacks,e,g,for,annotation,driven,injection,p,does,i,not,i,apply,standard,link,bean,post,processor,bean,post,processors,callbacks,or,perform,any,further,initialization,of,the,bean,this,interface,offers,distinct,fine,grained,operations,for,those,purposes,for,example,link,initialize,bean,however,link,instantiation,aware,bean,post,processor,callbacks,are,applied,if,applicable,to,the,construction,of,the,instance,param,bean,class,the,class,of,the,bean,to,instantiate,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,param,dependency,check,whether,to,perform,a,dependency,check,for,object,references,in,the,bean,instance,not,applicable,to,autowiring,a,constructor,thus,ignored,there,return,the,new,bean,instance,throws,beans,exception,if,instantiation,or,wiring,failed,see,see,see,see,see,see,initialize,bean,see,apply,bean,post,processors,before,initialization,see,apply,bean,post,processors,after,initialization;object,autowire,class,bean,class,int,autowire,mode,boolean,dependency,check,throws,beans,exception
AutowireCapableBeanFactory -> Object autowire(Class<?> beanClass, int autowireMode, boolean dependencyCheck) throws BeansException_;1535064541;Instantiate a new bean instance of the given class with the specified autowire_strategy. All constants defined in this interface are supported here._Can also be invoked with {@code AUTOWIRE_NO} in order to just apply_before-instantiation callbacks (e.g. for annotation-driven injection)._<p>Does <i>not</i> apply standard {@link BeanPostProcessor BeanPostProcessors}_callbacks or perform any further initialization of the bean. This interface_offers distinct, fine-grained operations for those purposes, for example_{@link #initializeBean}. However, {@link InstantiationAwareBeanPostProcessor}_callbacks are applied, if applicable to the construction of the instance._@param beanClass the class of the bean to instantiate_@param autowireMode by name or type, using the constants in this interface_@param dependencyCheck whether to perform a dependency check for object_references in the bean instance (not applicable to autowiring a constructor,_thus ignored there)_@return the new bean instance_@throws BeansException if instantiation or wiring failed_@see #AUTOWIRE_NO_@see #AUTOWIRE_BY_NAME_@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_CONSTRUCTOR_@see #AUTOWIRE_AUTODETECT_@see #initializeBean_@see #applyBeanPostProcessorsBeforeInitialization_@see #applyBeanPostProcessorsAfterInitialization;Object autowire(Class<?> beanClass, int autowireMode, boolean dependencyCheck) throws BeansException_;instantiate,a,new,bean,instance,of,the,given,class,with,the,specified,autowire,strategy,all,constants,defined,in,this,interface,are,supported,here,can,also,be,invoked,with,code,in,order,to,just,apply,before,instantiation,callbacks,e,g,for,annotation,driven,injection,p,does,i,not,i,apply,standard,link,bean,post,processor,bean,post,processors,callbacks,or,perform,any,further,initialization,of,the,bean,this,interface,offers,distinct,fine,grained,operations,for,those,purposes,for,example,link,initialize,bean,however,link,instantiation,aware,bean,post,processor,callbacks,are,applied,if,applicable,to,the,construction,of,the,instance,param,bean,class,the,class,of,the,bean,to,instantiate,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,param,dependency,check,whether,to,perform,a,dependency,check,for,object,references,in,the,bean,instance,not,applicable,to,autowiring,a,constructor,thus,ignored,there,return,the,new,bean,instance,throws,beans,exception,if,instantiation,or,wiring,failed,see,see,see,see,see,see,initialize,bean,see,apply,bean,post,processors,before,initialization,see,apply,bean,post,processors,after,initialization;object,autowire,class,bean,class,int,autowire,mode,boolean,dependency,check,throws,beans,exception
AutowireCapableBeanFactory -> Object autowire(Class<?> beanClass, int autowireMode, boolean dependencyCheck) throws BeansException_;1549551674;Instantiate a new bean instance of the given class with the specified autowire_strategy. All constants defined in this interface are supported here._Can also be invoked with {@code AUTOWIRE_NO} in order to just apply_before-instantiation callbacks (e.g. for annotation-driven injection)._<p>Does <i>not</i> apply standard {@link BeanPostProcessor BeanPostProcessors}_callbacks or perform any further initialization of the bean. This interface_offers distinct, fine-grained operations for those purposes, for example_{@link #initializeBean}. However, {@link InstantiationAwareBeanPostProcessor}_callbacks are applied, if applicable to the construction of the instance._@param beanClass the class of the bean to instantiate_@param autowireMode by name or type, using the constants in this interface_@param dependencyCheck whether to perform a dependency check for object_references in the bean instance (not applicable to autowiring a constructor,_thus ignored there)_@return the new bean instance_@throws BeansException if instantiation or wiring failed_@see #AUTOWIRE_NO_@see #AUTOWIRE_BY_NAME_@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_CONSTRUCTOR_@see #AUTOWIRE_AUTODETECT_@see #initializeBean_@see #applyBeanPostProcessorsBeforeInitialization_@see #applyBeanPostProcessorsAfterInitialization;Object autowire(Class<?> beanClass, int autowireMode, boolean dependencyCheck) throws BeansException_;instantiate,a,new,bean,instance,of,the,given,class,with,the,specified,autowire,strategy,all,constants,defined,in,this,interface,are,supported,here,can,also,be,invoked,with,code,in,order,to,just,apply,before,instantiation,callbacks,e,g,for,annotation,driven,injection,p,does,i,not,i,apply,standard,link,bean,post,processor,bean,post,processors,callbacks,or,perform,any,further,initialization,of,the,bean,this,interface,offers,distinct,fine,grained,operations,for,those,purposes,for,example,link,initialize,bean,however,link,instantiation,aware,bean,post,processor,callbacks,are,applied,if,applicable,to,the,construction,of,the,instance,param,bean,class,the,class,of,the,bean,to,instantiate,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,param,dependency,check,whether,to,perform,a,dependency,check,for,object,references,in,the,bean,instance,not,applicable,to,autowiring,a,constructor,thus,ignored,there,return,the,new,bean,instance,throws,beans,exception,if,instantiation,or,wiring,failed,see,see,see,see,see,see,initialize,bean,see,apply,bean,post,processors,before,initialization,see,apply,bean,post,processors,after,initialization;object,autowire,class,bean,class,int,autowire,mode,boolean,dependency,check,throws,beans,exception
AutowireCapableBeanFactory -> Object autowire(Class<?> beanClass, int autowireMode, boolean dependencyCheck) throws BeansException_;1549577242;Instantiate a new bean instance of the given class with the specified autowire_strategy. All constants defined in this interface are supported here._Can also be invoked with {@code AUTOWIRE_NO} in order to just apply_before-instantiation callbacks (e.g. for annotation-driven injection)._<p>Does <i>not</i> apply standard {@link BeanPostProcessor BeanPostProcessors}_callbacks or perform any further initialization of the bean. This interface_offers distinct, fine-grained operations for those purposes, for example_{@link #initializeBean}. However, {@link InstantiationAwareBeanPostProcessor}_callbacks are applied, if applicable to the construction of the instance._@param beanClass the class of the bean to instantiate_@param autowireMode by name or type, using the constants in this interface_@param dependencyCheck whether to perform a dependency check for object_references in the bean instance (not applicable to autowiring a constructor,_thus ignored there)_@return the new bean instance_@throws BeansException if instantiation or wiring failed_@see #AUTOWIRE_NO_@see #AUTOWIRE_BY_NAME_@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_CONSTRUCTOR_@see #AUTOWIRE_AUTODETECT_@see #initializeBean_@see #applyBeanPostProcessorsBeforeInitialization_@see #applyBeanPostProcessorsAfterInitialization;Object autowire(Class<?> beanClass, int autowireMode, boolean dependencyCheck) throws BeansException_;instantiate,a,new,bean,instance,of,the,given,class,with,the,specified,autowire,strategy,all,constants,defined,in,this,interface,are,supported,here,can,also,be,invoked,with,code,in,order,to,just,apply,before,instantiation,callbacks,e,g,for,annotation,driven,injection,p,does,i,not,i,apply,standard,link,bean,post,processor,bean,post,processors,callbacks,or,perform,any,further,initialization,of,the,bean,this,interface,offers,distinct,fine,grained,operations,for,those,purposes,for,example,link,initialize,bean,however,link,instantiation,aware,bean,post,processor,callbacks,are,applied,if,applicable,to,the,construction,of,the,instance,param,bean,class,the,class,of,the,bean,to,instantiate,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,param,dependency,check,whether,to,perform,a,dependency,check,for,object,references,in,the,bean,instance,not,applicable,to,autowiring,a,constructor,thus,ignored,there,return,the,new,bean,instance,throws,beans,exception,if,instantiation,or,wiring,failed,see,see,see,see,see,see,initialize,bean,see,apply,bean,post,processors,before,initialization,see,apply,bean,post,processors,after,initialization;object,autowire,class,bean,class,int,autowire,mode,boolean,dependency,check,throws,beans,exception
AutowireCapableBeanFactory -> Object resolveDependency(DependencyDescriptor descriptor, String beanName) throws BeansException_;1328020251;Resolve the specified dependency against the beans defined in this factory._@param descriptor the descriptor for the dependency_@param beanName the name of the bean which declares the present dependency_@return the resolved object, or <code>null</code> if none found_@throws BeansException in dependency resolution failed;Object resolveDependency(DependencyDescriptor descriptor, String beanName) throws BeansException_;resolve,the,specified,dependency,against,the,beans,defined,in,this,factory,param,descriptor,the,descriptor,for,the,dependency,param,bean,name,the,name,of,the,bean,which,declares,the,present,dependency,return,the,resolved,object,or,code,null,code,if,none,found,throws,beans,exception,in,dependency,resolution,failed;object,resolve,dependency,dependency,descriptor,descriptor,string,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> Object resolveDependency(DependencyDescriptor descriptor, String beanName) throws BeansException_;1356735495;Resolve the specified dependency against the beans defined in this factory._@param descriptor the descriptor for the dependency_@param beanName the name of the bean which declares the present dependency_@return the resolved object, or {@code null} if none found_@throws BeansException in dependency resolution failed;Object resolveDependency(DependencyDescriptor descriptor, String beanName) throws BeansException_;resolve,the,specified,dependency,against,the,beans,defined,in,this,factory,param,descriptor,the,descriptor,for,the,dependency,param,bean,name,the,name,of,the,bean,which,declares,the,present,dependency,return,the,resolved,object,or,code,null,if,none,found,throws,beans,exception,in,dependency,resolution,failed;object,resolve,dependency,dependency,descriptor,descriptor,string,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> Object resolveDependency(DependencyDescriptor descriptor, String beanName) throws BeansException_;1364503447;Resolve the specified dependency against the beans defined in this factory._@param descriptor the descriptor for the dependency_@param beanName the name of the bean which declares the present dependency_@return the resolved object, or {@code null} if none found_@throws BeansException in dependency resolution failed;Object resolveDependency(DependencyDescriptor descriptor, String beanName) throws BeansException_;resolve,the,specified,dependency,against,the,beans,defined,in,this,factory,param,descriptor,the,descriptor,for,the,dependency,param,bean,name,the,name,of,the,bean,which,declares,the,present,dependency,return,the,resolved,object,or,code,null,if,none,found,throws,beans,exception,in,dependency,resolution,failed;object,resolve,dependency,dependency,descriptor,descriptor,string,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> Object resolveDependency(DependencyDescriptor descriptor, String beanName) throws BeansException_;1368546246;Resolve the specified dependency against the beans defined in this factory._@param descriptor the descriptor for the dependency_@param beanName the name of the bean which declares the present dependency_@return the resolved object, or {@code null} if none found_@throws BeansException in dependency resolution failed;Object resolveDependency(DependencyDescriptor descriptor, String beanName) throws BeansException_;resolve,the,specified,dependency,against,the,beans,defined,in,this,factory,param,descriptor,the,descriptor,for,the,dependency,param,bean,name,the,name,of,the,bean,which,declares,the,present,dependency,return,the,resolved,object,or,code,null,if,none,found,throws,beans,exception,in,dependency,resolution,failed;object,resolve,dependency,dependency,descriptor,descriptor,string,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> Object resolveDependency(DependencyDescriptor descriptor, String beanName) throws BeansException_;1458483997;Resolve the specified dependency against the beans defined in this factory._@param descriptor the descriptor for the dependency_@param beanName the name of the bean which declares the present dependency_@return the resolved object, or {@code null} if none found_@throws BeansException if dependency resolution failed;Object resolveDependency(DependencyDescriptor descriptor, String beanName) throws BeansException_;resolve,the,specified,dependency,against,the,beans,defined,in,this,factory,param,descriptor,the,descriptor,for,the,dependency,param,bean,name,the,name,of,the,bean,which,declares,the,present,dependency,return,the,resolved,object,or,code,null,if,none,found,throws,beans,exception,if,dependency,resolution,failed;object,resolve,dependency,dependency,descriptor,descriptor,string,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> Object initializeBean(Object existingBean, String beanName) throws BeansException_;1328020251;Initialize the given raw bean, applying factory callbacks_such as <code>setBeanName</code> and <code>setBeanFactory</code>,_also applying all bean post processors (including ones which_might wrap the given raw bean)._<p>Note that no bean definition of the given name has to exist_in the bean factory. The passed-in bean name will simply be used_for callbacks but not checked against the registered bean definitions._@param existingBean the existing bean instance_@param beanName the name of the bean, to be passed to it if necessary_(only passed to {@link BeanPostProcessor BeanPostProcessors})_@return the bean instance to use, either the original or a wrapped one_@throws BeansException if the initialization failed;Object initializeBean(Object existingBean, String beanName) throws BeansException_;initialize,the,given,raw,bean,applying,factory,callbacks,such,as,code,set,bean,name,code,and,code,set,bean,factory,code,also,applying,all,bean,post,processors,including,ones,which,might,wrap,the,given,raw,bean,p,note,that,no,bean,definition,of,the,given,name,has,to,exist,in,the,bean,factory,the,passed,in,bean,name,will,simply,be,used,for,callbacks,but,not,checked,against,the,registered,bean,definitions,param,existing,bean,the,existing,bean,instance,param,bean,name,the,name,of,the,bean,to,be,passed,to,it,if,necessary,only,passed,to,link,bean,post,processor,bean,post,processors,return,the,bean,instance,to,use,either,the,original,or,a,wrapped,one,throws,beans,exception,if,the,initialization,failed;object,initialize,bean,object,existing,bean,string,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> Object initializeBean(Object existingBean, String beanName) throws BeansException_;1356735495;Initialize the given raw bean, applying factory callbacks_such as {@code setBeanName} and {@code setBeanFactory},_also applying all bean post processors (including ones which_might wrap the given raw bean)._<p>Note that no bean definition of the given name has to exist_in the bean factory. The passed-in bean name will simply be used_for callbacks but not checked against the registered bean definitions._@param existingBean the existing bean instance_@param beanName the name of the bean, to be passed to it if necessary_(only passed to {@link BeanPostProcessor BeanPostProcessors})_@return the bean instance to use, either the original or a wrapped one_@throws BeansException if the initialization failed;Object initializeBean(Object existingBean, String beanName) throws BeansException_;initialize,the,given,raw,bean,applying,factory,callbacks,such,as,code,set,bean,name,and,code,set,bean,factory,also,applying,all,bean,post,processors,including,ones,which,might,wrap,the,given,raw,bean,p,note,that,no,bean,definition,of,the,given,name,has,to,exist,in,the,bean,factory,the,passed,in,bean,name,will,simply,be,used,for,callbacks,but,not,checked,against,the,registered,bean,definitions,param,existing,bean,the,existing,bean,instance,param,bean,name,the,name,of,the,bean,to,be,passed,to,it,if,necessary,only,passed,to,link,bean,post,processor,bean,post,processors,return,the,bean,instance,to,use,either,the,original,or,a,wrapped,one,throws,beans,exception,if,the,initialization,failed;object,initialize,bean,object,existing,bean,string,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> Object initializeBean(Object existingBean, String beanName) throws BeansException_;1364503447;Initialize the given raw bean, applying factory callbacks_such as {@code setBeanName} and {@code setBeanFactory},_also applying all bean post processors (including ones which_might wrap the given raw bean)._<p>Note that no bean definition of the given name has to exist_in the bean factory. The passed-in bean name will simply be used_for callbacks but not checked against the registered bean definitions._@param existingBean the existing bean instance_@param beanName the name of the bean, to be passed to it if necessary_(only passed to {@link BeanPostProcessor BeanPostProcessors})_@return the bean instance to use, either the original or a wrapped one_@throws BeansException if the initialization failed;Object initializeBean(Object existingBean, String beanName) throws BeansException_;initialize,the,given,raw,bean,applying,factory,callbacks,such,as,code,set,bean,name,and,code,set,bean,factory,also,applying,all,bean,post,processors,including,ones,which,might,wrap,the,given,raw,bean,p,note,that,no,bean,definition,of,the,given,name,has,to,exist,in,the,bean,factory,the,passed,in,bean,name,will,simply,be,used,for,callbacks,but,not,checked,against,the,registered,bean,definitions,param,existing,bean,the,existing,bean,instance,param,bean,name,the,name,of,the,bean,to,be,passed,to,it,if,necessary,only,passed,to,link,bean,post,processor,bean,post,processors,return,the,bean,instance,to,use,either,the,original,or,a,wrapped,one,throws,beans,exception,if,the,initialization,failed;object,initialize,bean,object,existing,bean,string,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> Object initializeBean(Object existingBean, String beanName) throws BeansException_;1368546246;Initialize the given raw bean, applying factory callbacks_such as {@code setBeanName} and {@code setBeanFactory},_also applying all bean post processors (including ones which_might wrap the given raw bean)._<p>Note that no bean definition of the given name has to exist_in the bean factory. The passed-in bean name will simply be used_for callbacks but not checked against the registered bean definitions._@param existingBean the existing bean instance_@param beanName the name of the bean, to be passed to it if necessary_(only passed to {@link BeanPostProcessor BeanPostProcessors})_@return the bean instance to use, either the original or a wrapped one_@throws BeansException if the initialization failed;Object initializeBean(Object existingBean, String beanName) throws BeansException_;initialize,the,given,raw,bean,applying,factory,callbacks,such,as,code,set,bean,name,and,code,set,bean,factory,also,applying,all,bean,post,processors,including,ones,which,might,wrap,the,given,raw,bean,p,note,that,no,bean,definition,of,the,given,name,has,to,exist,in,the,bean,factory,the,passed,in,bean,name,will,simply,be,used,for,callbacks,but,not,checked,against,the,registered,bean,definitions,param,existing,bean,the,existing,bean,instance,param,bean,name,the,name,of,the,bean,to,be,passed,to,it,if,necessary,only,passed,to,link,bean,post,processor,bean,post,processors,return,the,bean,instance,to,use,either,the,original,or,a,wrapped,one,throws,beans,exception,if,the,initialization,failed;object,initialize,bean,object,existing,bean,string,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> Object initializeBean(Object existingBean, String beanName) throws BeansException_;1458483997;Initialize the given raw bean, applying factory callbacks_such as {@code setBeanName} and {@code setBeanFactory},_also applying all bean post processors (including ones which_might wrap the given raw bean)._<p>Note that no bean definition of the given name has to exist_in the bean factory. The passed-in bean name will simply be used_for callbacks but not checked against the registered bean definitions._@param existingBean the existing bean instance_@param beanName the name of the bean, to be passed to it if necessary_(only passed to {@link BeanPostProcessor BeanPostProcessors})_@return the bean instance to use, either the original or a wrapped one_@throws BeansException if the initialization failed;Object initializeBean(Object existingBean, String beanName) throws BeansException_;initialize,the,given,raw,bean,applying,factory,callbacks,such,as,code,set,bean,name,and,code,set,bean,factory,also,applying,all,bean,post,processors,including,ones,which,might,wrap,the,given,raw,bean,p,note,that,no,bean,definition,of,the,given,name,has,to,exist,in,the,bean,factory,the,passed,in,bean,name,will,simply,be,used,for,callbacks,but,not,checked,against,the,registered,bean,definitions,param,existing,bean,the,existing,bean,instance,param,bean,name,the,name,of,the,bean,to,be,passed,to,it,if,necessary,only,passed,to,link,bean,post,processor,bean,post,processors,return,the,bean,instance,to,use,either,the,original,or,a,wrapped,one,throws,beans,exception,if,the,initialization,failed;object,initialize,bean,object,existing,bean,string,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> Object initializeBean(Object existingBean, String beanName) throws BeansException_;1470948126;Initialize the given raw bean, applying factory callbacks_such as {@code setBeanName} and {@code setBeanFactory},_also applying all bean post processors (including ones which_might wrap the given raw bean)._<p>Note that no bean definition of the given name has to exist_in the bean factory. The passed-in bean name will simply be used_for callbacks but not checked against the registered bean definitions._@param existingBean the existing bean instance_@param beanName the name of the bean, to be passed to it if necessary_(only passed to {@link BeanPostProcessor BeanPostProcessors})_@return the bean instance to use, either the original or a wrapped one_@throws BeansException if the initialization failed;Object initializeBean(Object existingBean, String beanName) throws BeansException_;initialize,the,given,raw,bean,applying,factory,callbacks,such,as,code,set,bean,name,and,code,set,bean,factory,also,applying,all,bean,post,processors,including,ones,which,might,wrap,the,given,raw,bean,p,note,that,no,bean,definition,of,the,given,name,has,to,exist,in,the,bean,factory,the,passed,in,bean,name,will,simply,be,used,for,callbacks,but,not,checked,against,the,registered,bean,definitions,param,existing,bean,the,existing,bean,instance,param,bean,name,the,name,of,the,bean,to,be,passed,to,it,if,necessary,only,passed,to,link,bean,post,processor,bean,post,processors,return,the,bean,instance,to,use,either,the,original,or,a,wrapped,one,throws,beans,exception,if,the,initialization,failed;object,initialize,bean,object,existing,bean,string,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> Object initializeBean(Object existingBean, String beanName) throws BeansException_;1470952254;Initialize the given raw bean, applying factory callbacks_such as {@code setBeanName} and {@code setBeanFactory},_also applying all bean post processors (including ones which_might wrap the given raw bean)._<p>Note that no bean definition of the given name has to exist_in the bean factory. The passed-in bean name will simply be used_for callbacks but not checked against the registered bean definitions._@param existingBean the existing bean instance_@param beanName the name of the bean, to be passed to it if necessary_(only passed to {@link BeanPostProcessor BeanPostProcessors})_@return the bean instance to use, either the original or a wrapped one_@throws BeansException if the initialization failed;Object initializeBean(Object existingBean, String beanName) throws BeansException_;initialize,the,given,raw,bean,applying,factory,callbacks,such,as,code,set,bean,name,and,code,set,bean,factory,also,applying,all,bean,post,processors,including,ones,which,might,wrap,the,given,raw,bean,p,note,that,no,bean,definition,of,the,given,name,has,to,exist,in,the,bean,factory,the,passed,in,bean,name,will,simply,be,used,for,callbacks,but,not,checked,against,the,registered,bean,definitions,param,existing,bean,the,existing,bean,instance,param,bean,name,the,name,of,the,bean,to,be,passed,to,it,if,necessary,only,passed,to,link,bean,post,processor,bean,post,processors,return,the,bean,instance,to,use,either,the,original,or,a,wrapped,one,throws,beans,exception,if,the,initialization,failed;object,initialize,bean,object,existing,bean,string,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> Object initializeBean(Object existingBean, String beanName) throws BeansException_;1495868221;Initialize the given raw bean, applying factory callbacks_such as {@code setBeanName} and {@code setBeanFactory},_also applying all bean post processors (including ones which_might wrap the given raw bean)._<p>Note that no bean definition of the given name has to exist_in the bean factory. The passed-in bean name will simply be used_for callbacks but not checked against the registered bean definitions._@param existingBean the existing bean instance_@param beanName the name of the bean, to be passed to it if necessary_(only passed to {@link BeanPostProcessor BeanPostProcessors})_@return the bean instance to use, either the original or a wrapped one_@throws BeansException if the initialization failed;Object initializeBean(Object existingBean, String beanName) throws BeansException_;initialize,the,given,raw,bean,applying,factory,callbacks,such,as,code,set,bean,name,and,code,set,bean,factory,also,applying,all,bean,post,processors,including,ones,which,might,wrap,the,given,raw,bean,p,note,that,no,bean,definition,of,the,given,name,has,to,exist,in,the,bean,factory,the,passed,in,bean,name,will,simply,be,used,for,callbacks,but,not,checked,against,the,registered,bean,definitions,param,existing,bean,the,existing,bean,instance,param,bean,name,the,name,of,the,bean,to,be,passed,to,it,if,necessary,only,passed,to,link,bean,post,processor,bean,post,processors,return,the,bean,instance,to,use,either,the,original,or,a,wrapped,one,throws,beans,exception,if,the,initialization,failed;object,initialize,bean,object,existing,bean,string,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> Object initializeBean(Object existingBean, String beanName) throws BeansException_;1496259743;Initialize the given raw bean, applying factory callbacks_such as {@code setBeanName} and {@code setBeanFactory},_also applying all bean post processors (including ones which_might wrap the given raw bean)._<p>Note that no bean definition of the given name has to exist_in the bean factory. The passed-in bean name will simply be used_for callbacks but not checked against the registered bean definitions._@param existingBean the existing bean instance_@param beanName the name of the bean, to be passed to it if necessary_(only passed to {@link BeanPostProcessor BeanPostProcessors})_@return the bean instance to use, either the original or a wrapped one_@throws BeansException if the initialization failed;Object initializeBean(Object existingBean, String beanName) throws BeansException_;initialize,the,given,raw,bean,applying,factory,callbacks,such,as,code,set,bean,name,and,code,set,bean,factory,also,applying,all,bean,post,processors,including,ones,which,might,wrap,the,given,raw,bean,p,note,that,no,bean,definition,of,the,given,name,has,to,exist,in,the,bean,factory,the,passed,in,bean,name,will,simply,be,used,for,callbacks,but,not,checked,against,the,registered,bean,definitions,param,existing,bean,the,existing,bean,instance,param,bean,name,the,name,of,the,bean,to,be,passed,to,it,if,necessary,only,passed,to,link,bean,post,processor,bean,post,processors,return,the,bean,instance,to,use,either,the,original,or,a,wrapped,one,throws,beans,exception,if,the,initialization,failed;object,initialize,bean,object,existing,bean,string,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> Object initializeBean(Object existingBean, String beanName) throws BeansException_;1503007895;Initialize the given raw bean, applying factory callbacks_such as {@code setBeanName} and {@code setBeanFactory},_also applying all bean post processors (including ones which_might wrap the given raw bean)._<p>Note that no bean definition of the given name has to exist_in the bean factory. The passed-in bean name will simply be used_for callbacks but not checked against the registered bean definitions._@param existingBean the existing bean instance_@param beanName the name of the bean, to be passed to it if necessary_(only passed to {@link BeanPostProcessor BeanPostProcessors})_@return the bean instance to use, either the original or a wrapped one_@throws BeansException if the initialization failed;Object initializeBean(Object existingBean, String beanName) throws BeansException_;initialize,the,given,raw,bean,applying,factory,callbacks,such,as,code,set,bean,name,and,code,set,bean,factory,also,applying,all,bean,post,processors,including,ones,which,might,wrap,the,given,raw,bean,p,note,that,no,bean,definition,of,the,given,name,has,to,exist,in,the,bean,factory,the,passed,in,bean,name,will,simply,be,used,for,callbacks,but,not,checked,against,the,registered,bean,definitions,param,existing,bean,the,existing,bean,instance,param,bean,name,the,name,of,the,bean,to,be,passed,to,it,if,necessary,only,passed,to,link,bean,post,processor,bean,post,processors,return,the,bean,instance,to,use,either,the,original,or,a,wrapped,one,throws,beans,exception,if,the,initialization,failed;object,initialize,bean,object,existing,bean,string,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> Object initializeBean(Object existingBean, String beanName) throws BeansException_;1530174524;Initialize the given raw bean, applying factory callbacks_such as {@code setBeanName} and {@code setBeanFactory},_also applying all bean post processors (including ones which_might wrap the given raw bean)._<p>Note that no bean definition of the given name has to exist_in the bean factory. The passed-in bean name will simply be used_for callbacks but not checked against the registered bean definitions._@param existingBean the existing bean instance_@param beanName the name of the bean, to be passed to it if necessary_(only passed to {@link BeanPostProcessor BeanPostProcessors})_@return the bean instance to use, either the original or a wrapped one_@throws BeansException if the initialization failed;Object initializeBean(Object existingBean, String beanName) throws BeansException_;initialize,the,given,raw,bean,applying,factory,callbacks,such,as,code,set,bean,name,and,code,set,bean,factory,also,applying,all,bean,post,processors,including,ones,which,might,wrap,the,given,raw,bean,p,note,that,no,bean,definition,of,the,given,name,has,to,exist,in,the,bean,factory,the,passed,in,bean,name,will,simply,be,used,for,callbacks,but,not,checked,against,the,registered,bean,definitions,param,existing,bean,the,existing,bean,instance,param,bean,name,the,name,of,the,bean,to,be,passed,to,it,if,necessary,only,passed,to,link,bean,post,processor,bean,post,processors,return,the,bean,instance,to,use,either,the,original,or,a,wrapped,one,throws,beans,exception,if,the,initialization,failed;object,initialize,bean,object,existing,bean,string,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> Object initializeBean(Object existingBean, String beanName) throws BeansException_;1535064541;Initialize the given raw bean, applying factory callbacks_such as {@code setBeanName} and {@code setBeanFactory},_also applying all bean post processors (including ones which_might wrap the given raw bean)._<p>Note that no bean definition of the given name has to exist_in the bean factory. The passed-in bean name will simply be used_for callbacks but not checked against the registered bean definitions._@param existingBean the existing bean instance_@param beanName the name of the bean, to be passed to it if necessary_(only passed to {@link BeanPostProcessor BeanPostProcessors}__can follow the {@link #ORIGINAL_INSTANCE_SUFFIX} convention in order to_enforce the given instance to be returned, i.e. no proxies etc)_@return the bean instance to use, either the original or a wrapped one_@throws BeansException if the initialization failed_@see #ORIGINAL_INSTANCE_SUFFIX;Object initializeBean(Object existingBean, String beanName) throws BeansException_;initialize,the,given,raw,bean,applying,factory,callbacks,such,as,code,set,bean,name,and,code,set,bean,factory,also,applying,all,bean,post,processors,including,ones,which,might,wrap,the,given,raw,bean,p,note,that,no,bean,definition,of,the,given,name,has,to,exist,in,the,bean,factory,the,passed,in,bean,name,will,simply,be,used,for,callbacks,but,not,checked,against,the,registered,bean,definitions,param,existing,bean,the,existing,bean,instance,param,bean,name,the,name,of,the,bean,to,be,passed,to,it,if,necessary,only,passed,to,link,bean,post,processor,bean,post,processors,can,follow,the,link,convention,in,order,to,enforce,the,given,instance,to,be,returned,i,e,no,proxies,etc,return,the,bean,instance,to,use,either,the,original,or,a,wrapped,one,throws,beans,exception,if,the,initialization,failed,see;object,initialize,bean,object,existing,bean,string,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> Object initializeBean(Object existingBean, String beanName) throws BeansException_;1549551674;Initialize the given raw bean, applying factory callbacks_such as {@code setBeanName} and {@code setBeanFactory},_also applying all bean post processors (including ones which_might wrap the given raw bean)._<p>Note that no bean definition of the given name has to exist_in the bean factory. The passed-in bean name will simply be used_for callbacks but not checked against the registered bean definitions._@param existingBean the existing bean instance_@param beanName the name of the bean, to be passed to it if necessary_(only passed to {@link BeanPostProcessor BeanPostProcessors}__can follow the {@link #ORIGINAL_INSTANCE_SUFFIX} convention in order to_enforce the given instance to be returned, i.e. no proxies etc)_@return the bean instance to use, either the original or a wrapped one_@throws BeansException if the initialization failed_@see #ORIGINAL_INSTANCE_SUFFIX;Object initializeBean(Object existingBean, String beanName) throws BeansException_;initialize,the,given,raw,bean,applying,factory,callbacks,such,as,code,set,bean,name,and,code,set,bean,factory,also,applying,all,bean,post,processors,including,ones,which,might,wrap,the,given,raw,bean,p,note,that,no,bean,definition,of,the,given,name,has,to,exist,in,the,bean,factory,the,passed,in,bean,name,will,simply,be,used,for,callbacks,but,not,checked,against,the,registered,bean,definitions,param,existing,bean,the,existing,bean,instance,param,bean,name,the,name,of,the,bean,to,be,passed,to,it,if,necessary,only,passed,to,link,bean,post,processor,bean,post,processors,can,follow,the,link,convention,in,order,to,enforce,the,given,instance,to,be,returned,i,e,no,proxies,etc,return,the,bean,instance,to,use,either,the,original,or,a,wrapped,one,throws,beans,exception,if,the,initialization,failed,see;object,initialize,bean,object,existing,bean,string,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> Object initializeBean(Object existingBean, String beanName) throws BeansException_;1549577242;Initialize the given raw bean, applying factory callbacks_such as {@code setBeanName} and {@code setBeanFactory},_also applying all bean post processors (including ones which_might wrap the given raw bean)._<p>Note that no bean definition of the given name has to exist_in the bean factory. The passed-in bean name will simply be used_for callbacks but not checked against the registered bean definitions._@param existingBean the existing bean instance_@param beanName the name of the bean, to be passed to it if necessary_(only passed to {@link BeanPostProcessor BeanPostProcessors}__can follow the {@link #ORIGINAL_INSTANCE_SUFFIX} convention in order to_enforce the given instance to be returned, i.e. no proxies etc)_@return the bean instance to use, either the original or a wrapped one_@throws BeansException if the initialization failed_@see #ORIGINAL_INSTANCE_SUFFIX;Object initializeBean(Object existingBean, String beanName) throws BeansException_;initialize,the,given,raw,bean,applying,factory,callbacks,such,as,code,set,bean,name,and,code,set,bean,factory,also,applying,all,bean,post,processors,including,ones,which,might,wrap,the,given,raw,bean,p,note,that,no,bean,definition,of,the,given,name,has,to,exist,in,the,bean,factory,the,passed,in,bean,name,will,simply,be,used,for,callbacks,but,not,checked,against,the,registered,bean,definitions,param,existing,bean,the,existing,bean,instance,param,bean,name,the,name,of,the,bean,to,be,passed,to,it,if,necessary,only,passed,to,link,bean,post,processor,bean,post,processors,can,follow,the,link,convention,in,order,to,enforce,the,given,instance,to,be,returned,i,e,no,proxies,etc,return,the,bean,instance,to,use,either,the,original,or,a,wrapped,one,throws,beans,exception,if,the,initialization,failed,see;object,initialize,bean,object,existing,bean,string,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> void destroyBean(Object existingBean)_;1364503447;Destroy the given bean instance (typically coming from {@link #createBean}),_applying the {@link org.springframework.beans.factory.DisposableBean} contract as well as_registered {@link DestructionAwareBeanPostProcessor DestructionAwareBeanPostProcessors}._<p>Any exception that arises during destruction should be caught_and logged instead of propagated to the caller of this method._@param existingBean the bean instance to destroy;void destroyBean(Object existingBean)_;destroy,the,given,bean,instance,typically,coming,from,link,create,bean,applying,the,link,org,springframework,beans,factory,disposable,bean,contract,as,well,as,registered,link,destruction,aware,bean,post,processor,destruction,aware,bean,post,processors,p,any,exception,that,arises,during,destruction,should,be,caught,and,logged,instead,of,propagated,to,the,caller,of,this,method,param,existing,bean,the,bean,instance,to,destroy;void,destroy,bean,object,existing,bean
AutowireCapableBeanFactory -> void destroyBean(Object existingBean)_;1368546246;Destroy the given bean instance (typically coming from {@link #createBean}),_applying the {@link org.springframework.beans.factory.DisposableBean} contract as well as_registered {@link DestructionAwareBeanPostProcessor DestructionAwareBeanPostProcessors}._<p>Any exception that arises during destruction should be caught_and logged instead of propagated to the caller of this method._@param existingBean the bean instance to destroy;void destroyBean(Object existingBean)_;destroy,the,given,bean,instance,typically,coming,from,link,create,bean,applying,the,link,org,springframework,beans,factory,disposable,bean,contract,as,well,as,registered,link,destruction,aware,bean,post,processor,destruction,aware,bean,post,processors,p,any,exception,that,arises,during,destruction,should,be,caught,and,logged,instead,of,propagated,to,the,caller,of,this,method,param,existing,bean,the,bean,instance,to,destroy;void,destroy,bean,object,existing,bean
AutowireCapableBeanFactory -> void destroyBean(Object existingBean)_;1458483997;Destroy the given bean instance (typically coming from {@link #createBean}),_applying the {@link org.springframework.beans.factory.DisposableBean} contract as well as_registered {@link DestructionAwareBeanPostProcessor DestructionAwareBeanPostProcessors}._<p>Any exception that arises during destruction should be caught_and logged instead of propagated to the caller of this method._@param existingBean the bean instance to destroy;void destroyBean(Object existingBean)_;destroy,the,given,bean,instance,typically,coming,from,link,create,bean,applying,the,link,org,springframework,beans,factory,disposable,bean,contract,as,well,as,registered,link,destruction,aware,bean,post,processor,destruction,aware,bean,post,processors,p,any,exception,that,arises,during,destruction,should,be,caught,and,logged,instead,of,propagated,to,the,caller,of,this,method,param,existing,bean,the,bean,instance,to,destroy;void,destroy,bean,object,existing,bean
AutowireCapableBeanFactory -> void destroyBean(Object existingBean)_;1470948126;Destroy the given bean instance (typically coming from {@link #createBean}),_applying the {@link org.springframework.beans.factory.DisposableBean} contract as well as_registered {@link DestructionAwareBeanPostProcessor DestructionAwareBeanPostProcessors}._<p>Any exception that arises during destruction should be caught_and logged instead of propagated to the caller of this method._@param existingBean the bean instance to destroy;void destroyBean(Object existingBean)_;destroy,the,given,bean,instance,typically,coming,from,link,create,bean,applying,the,link,org,springframework,beans,factory,disposable,bean,contract,as,well,as,registered,link,destruction,aware,bean,post,processor,destruction,aware,bean,post,processors,p,any,exception,that,arises,during,destruction,should,be,caught,and,logged,instead,of,propagated,to,the,caller,of,this,method,param,existing,bean,the,bean,instance,to,destroy;void,destroy,bean,object,existing,bean
AutowireCapableBeanFactory -> void destroyBean(Object existingBean)_;1470952254;Destroy the given bean instance (typically coming from {@link #createBean}),_applying the {@link org.springframework.beans.factory.DisposableBean} contract as well as_registered {@link DestructionAwareBeanPostProcessor DestructionAwareBeanPostProcessors}._<p>Any exception that arises during destruction should be caught_and logged instead of propagated to the caller of this method._@param existingBean the bean instance to destroy;void destroyBean(Object existingBean)_;destroy,the,given,bean,instance,typically,coming,from,link,create,bean,applying,the,link,org,springframework,beans,factory,disposable,bean,contract,as,well,as,registered,link,destruction,aware,bean,post,processor,destruction,aware,bean,post,processors,p,any,exception,that,arises,during,destruction,should,be,caught,and,logged,instead,of,propagated,to,the,caller,of,this,method,param,existing,bean,the,bean,instance,to,destroy;void,destroy,bean,object,existing,bean
AutowireCapableBeanFactory -> void destroyBean(Object existingBean)_;1495868221;Destroy the given bean instance (typically coming from {@link #createBean}),_applying the {@link org.springframework.beans.factory.DisposableBean} contract as well as_registered {@link DestructionAwareBeanPostProcessor DestructionAwareBeanPostProcessors}._<p>Any exception that arises during destruction should be caught_and logged instead of propagated to the caller of this method._@param existingBean the bean instance to destroy;void destroyBean(Object existingBean)_;destroy,the,given,bean,instance,typically,coming,from,link,create,bean,applying,the,link,org,springframework,beans,factory,disposable,bean,contract,as,well,as,registered,link,destruction,aware,bean,post,processor,destruction,aware,bean,post,processors,p,any,exception,that,arises,during,destruction,should,be,caught,and,logged,instead,of,propagated,to,the,caller,of,this,method,param,existing,bean,the,bean,instance,to,destroy;void,destroy,bean,object,existing,bean
AutowireCapableBeanFactory -> void destroyBean(Object existingBean)_;1496259743;Destroy the given bean instance (typically coming from {@link #createBean}),_applying the {@link org.springframework.beans.factory.DisposableBean} contract as well as_registered {@link DestructionAwareBeanPostProcessor DestructionAwareBeanPostProcessors}._<p>Any exception that arises during destruction should be caught_and logged instead of propagated to the caller of this method._@param existingBean the bean instance to destroy;void destroyBean(Object existingBean)_;destroy,the,given,bean,instance,typically,coming,from,link,create,bean,applying,the,link,org,springframework,beans,factory,disposable,bean,contract,as,well,as,registered,link,destruction,aware,bean,post,processor,destruction,aware,bean,post,processors,p,any,exception,that,arises,during,destruction,should,be,caught,and,logged,instead,of,propagated,to,the,caller,of,this,method,param,existing,bean,the,bean,instance,to,destroy;void,destroy,bean,object,existing,bean
AutowireCapableBeanFactory -> void destroyBean(Object existingBean)_;1496837955;Destroy the given bean instance (typically coming from {@link #createBean}),_applying the {@link org.springframework.beans.factory.DisposableBean} contract as well as_registered {@link DestructionAwareBeanPostProcessor DestructionAwareBeanPostProcessors}._<p>Any exception that arises during destruction should be caught_and logged instead of propagated to the caller of this method._@param existingBean the bean instance to destroy;void destroyBean(Object existingBean)_;destroy,the,given,bean,instance,typically,coming,from,link,create,bean,applying,the,link,org,springframework,beans,factory,disposable,bean,contract,as,well,as,registered,link,destruction,aware,bean,post,processor,destruction,aware,bean,post,processors,p,any,exception,that,arises,during,destruction,should,be,caught,and,logged,instead,of,propagated,to,the,caller,of,this,method,param,existing,bean,the,bean,instance,to,destroy;void,destroy,bean,object,existing,bean
AutowireCapableBeanFactory -> void destroyBean(Object existingBean)_;1503007895;Destroy the given bean instance (typically coming from {@link #createBean}),_applying the {@link org.springframework.beans.factory.DisposableBean} contract as well as_registered {@link DestructionAwareBeanPostProcessor DestructionAwareBeanPostProcessors}._<p>Any exception that arises during destruction should be caught_and logged instead of propagated to the caller of this method._@param existingBean the bean instance to destroy;void destroyBean(Object existingBean)_;destroy,the,given,bean,instance,typically,coming,from,link,create,bean,applying,the,link,org,springframework,beans,factory,disposable,bean,contract,as,well,as,registered,link,destruction,aware,bean,post,processor,destruction,aware,bean,post,processors,p,any,exception,that,arises,during,destruction,should,be,caught,and,logged,instead,of,propagated,to,the,caller,of,this,method,param,existing,bean,the,bean,instance,to,destroy;void,destroy,bean,object,existing,bean
AutowireCapableBeanFactory -> void destroyBean(Object existingBean)_;1530174524;Destroy the given bean instance (typically coming from {@link #createBean}),_applying the {@link org.springframework.beans.factory.DisposableBean} contract as well as_registered {@link DestructionAwareBeanPostProcessor DestructionAwareBeanPostProcessors}._<p>Any exception that arises during destruction should be caught_and logged instead of propagated to the caller of this method._@param existingBean the bean instance to destroy;void destroyBean(Object existingBean)_;destroy,the,given,bean,instance,typically,coming,from,link,create,bean,applying,the,link,org,springframework,beans,factory,disposable,bean,contract,as,well,as,registered,link,destruction,aware,bean,post,processor,destruction,aware,bean,post,processors,p,any,exception,that,arises,during,destruction,should,be,caught,and,logged,instead,of,propagated,to,the,caller,of,this,method,param,existing,bean,the,bean,instance,to,destroy;void,destroy,bean,object,existing,bean
AutowireCapableBeanFactory -> void destroyBean(Object existingBean)_;1535064541;Destroy the given bean instance (typically coming from {@link #createBean}),_applying the {@link org.springframework.beans.factory.DisposableBean} contract as well as_registered {@link DestructionAwareBeanPostProcessor DestructionAwareBeanPostProcessors}._<p>Any exception that arises during destruction should be caught_and logged instead of propagated to the caller of this method._@param existingBean the bean instance to destroy;void destroyBean(Object existingBean)_;destroy,the,given,bean,instance,typically,coming,from,link,create,bean,applying,the,link,org,springframework,beans,factory,disposable,bean,contract,as,well,as,registered,link,destruction,aware,bean,post,processor,destruction,aware,bean,post,processors,p,any,exception,that,arises,during,destruction,should,be,caught,and,logged,instead,of,propagated,to,the,caller,of,this,method,param,existing,bean,the,bean,instance,to,destroy;void,destroy,bean,object,existing,bean
AutowireCapableBeanFactory -> void destroyBean(Object existingBean)_;1549551674;Destroy the given bean instance (typically coming from {@link #createBean}),_applying the {@link org.springframework.beans.factory.DisposableBean} contract as well as_registered {@link DestructionAwareBeanPostProcessor DestructionAwareBeanPostProcessors}._<p>Any exception that arises during destruction should be caught_and logged instead of propagated to the caller of this method._@param existingBean the bean instance to destroy;void destroyBean(Object existingBean)_;destroy,the,given,bean,instance,typically,coming,from,link,create,bean,applying,the,link,org,springframework,beans,factory,disposable,bean,contract,as,well,as,registered,link,destruction,aware,bean,post,processor,destruction,aware,bean,post,processors,p,any,exception,that,arises,during,destruction,should,be,caught,and,logged,instead,of,propagated,to,the,caller,of,this,method,param,existing,bean,the,bean,instance,to,destroy;void,destroy,bean,object,existing,bean
AutowireCapableBeanFactory -> void destroyBean(Object existingBean)_;1549577242;Destroy the given bean instance (typically coming from {@link #createBean}),_applying the {@link org.springframework.beans.factory.DisposableBean} contract as well as_registered {@link DestructionAwareBeanPostProcessor DestructionAwareBeanPostProcessors}._<p>Any exception that arises during destruction should be caught_and logged instead of propagated to the caller of this method._@param existingBean the bean instance to destroy;void destroyBean(Object existingBean)_;destroy,the,given,bean,instance,typically,coming,from,link,create,bean,applying,the,link,org,springframework,beans,factory,disposable,bean,contract,as,well,as,registered,link,destruction,aware,bean,post,processor,destruction,aware,bean,post,processors,p,any,exception,that,arises,during,destruction,should,be,caught,and,logged,instead,of,propagated,to,the,caller,of,this,method,param,existing,bean,the,bean,instance,to,destroy;void,destroy,bean,object,existing,bean
AutowireCapableBeanFactory -> Object resolveDependency(DependencyDescriptor descriptor, String requestingBeanName) throws BeansException_;1470948126;Resolve the specified dependency against the beans defined in this factory._@param descriptor the descriptor for the dependency_@param requestingBeanName the name of the bean which declares the present dependency_@return the resolved object, or {@code null} if none found_@throws NoSuchBeanDefinitionException if no matching bean was found_@throws NoUniqueBeanDefinitionException if more than one matching bean was found_@throws BeansException if dependency resolution failed for any other reason_@see #resolveDependency(DependencyDescriptor, String, Set, TypeConverter)_@since 2.5;Object resolveDependency(DependencyDescriptor descriptor, String requestingBeanName) throws BeansException_;resolve,the,specified,dependency,against,the,beans,defined,in,this,factory,param,descriptor,the,descriptor,for,the,dependency,param,requesting,bean,name,the,name,of,the,bean,which,declares,the,present,dependency,return,the,resolved,object,or,code,null,if,none,found,throws,no,such,bean,definition,exception,if,no,matching,bean,was,found,throws,no,unique,bean,definition,exception,if,more,than,one,matching,bean,was,found,throws,beans,exception,if,dependency,resolution,failed,for,any,other,reason,see,resolve,dependency,dependency,descriptor,string,set,type,converter,since,2,5;object,resolve,dependency,dependency,descriptor,descriptor,string,requesting,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> Object resolveDependency(DependencyDescriptor descriptor, String requestingBeanName) throws BeansException_;1470952254;Resolve the specified dependency against the beans defined in this factory._@param descriptor the descriptor for the dependency (field/method/constructor)_@param requestingBeanName the name of the bean which declares the given dependency_@return the resolved object, or {@code null} if none found_@throws NoSuchBeanDefinitionException if no matching bean was found_@throws NoUniqueBeanDefinitionException if more than one matching bean was found_@throws BeansException if dependency resolution failed for any other reason_@since 2.5_@see #resolveDependency(DependencyDescriptor, String, Set, TypeConverter);Object resolveDependency(DependencyDescriptor descriptor, String requestingBeanName) throws BeansException_;resolve,the,specified,dependency,against,the,beans,defined,in,this,factory,param,descriptor,the,descriptor,for,the,dependency,field,method,constructor,param,requesting,bean,name,the,name,of,the,bean,which,declares,the,given,dependency,return,the,resolved,object,or,code,null,if,none,found,throws,no,such,bean,definition,exception,if,no,matching,bean,was,found,throws,no,unique,bean,definition,exception,if,more,than,one,matching,bean,was,found,throws,beans,exception,if,dependency,resolution,failed,for,any,other,reason,since,2,5,see,resolve,dependency,dependency,descriptor,string,set,type,converter;object,resolve,dependency,dependency,descriptor,descriptor,string,requesting,bean,name,throws,beans,exception
AutowireCapableBeanFactory -> Object createBean(Class beanClass, int autowireMode, boolean dependencyCheck) throws BeansException_;1328020251;Fully create a new bean instance of the given class with the specified_autowire strategy. All constants defined in this interface are supported here._<p>Performs full initialization of the bean, including all applicable_{@link BeanPostProcessor BeanPostProcessors}. This is effectively a superset_of what {@link #autowire} provides, adding {@link #initializeBean} behavior._@param beanClass the class of the bean to create_@param autowireMode by name or type, using the constants in this interface_@param dependencyCheck whether to perform a dependency check for objects_(not applicable to autowiring a constructor, thus ignored there)_@return the new bean instance_@throws BeansException if instantiation or wiring failed_@see #AUTOWIRE_NO_@see #AUTOWIRE_BY_NAME_@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_CONSTRUCTOR;Object createBean(Class beanClass, int autowireMode, boolean dependencyCheck) throws BeansException_;fully,create,a,new,bean,instance,of,the,given,class,with,the,specified,autowire,strategy,all,constants,defined,in,this,interface,are,supported,here,p,performs,full,initialization,of,the,bean,including,all,applicable,link,bean,post,processor,bean,post,processors,this,is,effectively,a,superset,of,what,link,autowire,provides,adding,link,initialize,bean,behavior,param,bean,class,the,class,of,the,bean,to,create,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,param,dependency,check,whether,to,perform,a,dependency,check,for,objects,not,applicable,to,autowiring,a,constructor,thus,ignored,there,return,the,new,bean,instance,throws,beans,exception,if,instantiation,or,wiring,failed,see,see,see,see;object,create,bean,class,bean,class,int,autowire,mode,boolean,dependency,check,throws,beans,exception
AutowireCapableBeanFactory -> Object createBean(Class beanClass, int autowireMode, boolean dependencyCheck) throws BeansException_;1356735495;Fully create a new bean instance of the given class with the specified_autowire strategy. All constants defined in this interface are supported here._<p>Performs full initialization of the bean, including all applicable_{@link BeanPostProcessor BeanPostProcessors}. This is effectively a superset_of what {@link #autowire} provides, adding {@link #initializeBean} behavior._@param beanClass the class of the bean to create_@param autowireMode by name or type, using the constants in this interface_@param dependencyCheck whether to perform a dependency check for objects_(not applicable to autowiring a constructor, thus ignored there)_@return the new bean instance_@throws BeansException if instantiation or wiring failed_@see #AUTOWIRE_NO_@see #AUTOWIRE_BY_NAME_@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_CONSTRUCTOR;Object createBean(Class beanClass, int autowireMode, boolean dependencyCheck) throws BeansException_;fully,create,a,new,bean,instance,of,the,given,class,with,the,specified,autowire,strategy,all,constants,defined,in,this,interface,are,supported,here,p,performs,full,initialization,of,the,bean,including,all,applicable,link,bean,post,processor,bean,post,processors,this,is,effectively,a,superset,of,what,link,autowire,provides,adding,link,initialize,bean,behavior,param,bean,class,the,class,of,the,bean,to,create,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,param,dependency,check,whether,to,perform,a,dependency,check,for,objects,not,applicable,to,autowiring,a,constructor,thus,ignored,there,return,the,new,bean,instance,throws,beans,exception,if,instantiation,or,wiring,failed,see,see,see,see;object,create,bean,class,bean,class,int,autowire,mode,boolean,dependency,check,throws,beans,exception
AutowireCapableBeanFactory -> Object createBean(Class beanClass, int autowireMode, boolean dependencyCheck) throws BeansException_;1364503447;Fully create a new bean instance of the given class with the specified_autowire strategy. All constants defined in this interface are supported here._<p>Performs full initialization of the bean, including all applicable_{@link BeanPostProcessor BeanPostProcessors}. This is effectively a superset_of what {@link #autowire} provides, adding {@link #initializeBean} behavior._@param beanClass the class of the bean to create_@param autowireMode by name or type, using the constants in this interface_@param dependencyCheck whether to perform a dependency check for objects_(not applicable to autowiring a constructor, thus ignored there)_@return the new bean instance_@throws BeansException if instantiation or wiring failed_@see #AUTOWIRE_NO_@see #AUTOWIRE_BY_NAME_@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_CONSTRUCTOR;Object createBean(Class beanClass, int autowireMode, boolean dependencyCheck) throws BeansException_;fully,create,a,new,bean,instance,of,the,given,class,with,the,specified,autowire,strategy,all,constants,defined,in,this,interface,are,supported,here,p,performs,full,initialization,of,the,bean,including,all,applicable,link,bean,post,processor,bean,post,processors,this,is,effectively,a,superset,of,what,link,autowire,provides,adding,link,initialize,bean,behavior,param,bean,class,the,class,of,the,bean,to,create,param,autowire,mode,by,name,or,type,using,the,constants,in,this,interface,param,dependency,check,whether,to,perform,a,dependency,check,for,objects,not,applicable,to,autowiring,a,constructor,thus,ignored,there,return,the,new,bean,instance,throws,beans,exception,if,instantiation,or,wiring,failed,see,see,see,see;object,create,bean,class,bean,class,int,autowire,mode,boolean,dependency,check,throws,beans,exception
AutowireCapableBeanFactory -> @Nullable 	Object resolveDependency(DependencyDescriptor descriptor, @Nullable String requestingBeanName, 			@Nullable Set<String> autowiredBeanNames, @Nullable TypeConverter typeConverter) throws BeansException_;1496837955;Resolve the specified dependency against the beans defined in this factory._@param descriptor the descriptor for the dependency (field/method/constructor)_@param requestingBeanName the name of the bean which declares the given dependency_@param autowiredBeanNames a Set that all names of autowired beans (used for_resolving the given dependency) are supposed to be added to_@param typeConverter the TypeConverter to use for populating arrays and collections_@return the resolved object, or {@code null} if none found_@throws NoSuchBeanDefinitionException if no matching bean was found_@throws NoUniqueBeanDefinitionException if more than one matching bean was found_@throws BeansException if dependency resolution failed for any other reason_@since 2.5_@see DependencyDescriptor;@Nullable_	Object resolveDependency(DependencyDescriptor descriptor, @Nullable String requestingBeanName,_			@Nullable Set<String> autowiredBeanNames, @Nullable TypeConverter typeConverter) throws BeansException_;resolve,the,specified,dependency,against,the,beans,defined,in,this,factory,param,descriptor,the,descriptor,for,the,dependency,field,method,constructor,param,requesting,bean,name,the,name,of,the,bean,which,declares,the,given,dependency,param,autowired,bean,names,a,set,that,all,names,of,autowired,beans,used,for,resolving,the,given,dependency,are,supposed,to,be,added,to,param,type,converter,the,type,converter,to,use,for,populating,arrays,and,collections,return,the,resolved,object,or,code,null,if,none,found,throws,no,such,bean,definition,exception,if,no,matching,bean,was,found,throws,no,unique,bean,definition,exception,if,more,than,one,matching,bean,was,found,throws,beans,exception,if,dependency,resolution,failed,for,any,other,reason,since,2,5,see,dependency,descriptor;nullable,object,resolve,dependency,dependency,descriptor,descriptor,nullable,string,requesting,bean,name,nullable,set,string,autowired,bean,names,nullable,type,converter,type,converter,throws,beans,exception
AutowireCapableBeanFactory -> @Nullable 	Object resolveDependency(DependencyDescriptor descriptor, @Nullable String requestingBeanName, 			@Nullable Set<String> autowiredBeanNames, @Nullable TypeConverter typeConverter) throws BeansException_;1503007895;Resolve the specified dependency against the beans defined in this factory._@param descriptor the descriptor for the dependency (field/method/constructor)_@param requestingBeanName the name of the bean which declares the given dependency_@param autowiredBeanNames a Set that all names of autowired beans (used for_resolving the given dependency) are supposed to be added to_@param typeConverter the TypeConverter to use for populating arrays and collections_@return the resolved object, or {@code null} if none found_@throws NoSuchBeanDefinitionException if no matching bean was found_@throws NoUniqueBeanDefinitionException if more than one matching bean was found_@throws BeansException if dependency resolution failed for any other reason_@since 2.5_@see DependencyDescriptor;@Nullable_	Object resolveDependency(DependencyDescriptor descriptor, @Nullable String requestingBeanName,_			@Nullable Set<String> autowiredBeanNames, @Nullable TypeConverter typeConverter) throws BeansException_;resolve,the,specified,dependency,against,the,beans,defined,in,this,factory,param,descriptor,the,descriptor,for,the,dependency,field,method,constructor,param,requesting,bean,name,the,name,of,the,bean,which,declares,the,given,dependency,param,autowired,bean,names,a,set,that,all,names,of,autowired,beans,used,for,resolving,the,given,dependency,are,supposed,to,be,added,to,param,type,converter,the,type,converter,to,use,for,populating,arrays,and,collections,return,the,resolved,object,or,code,null,if,none,found,throws,no,such,bean,definition,exception,if,no,matching,bean,was,found,throws,no,unique,bean,definition,exception,if,more,than,one,matching,bean,was,found,throws,beans,exception,if,dependency,resolution,failed,for,any,other,reason,since,2,5,see,dependency,descriptor;nullable,object,resolve,dependency,dependency,descriptor,descriptor,nullable,string,requesting,bean,name,nullable,set,string,autowired,bean,names,nullable,type,converter,type,converter,throws,beans,exception
AutowireCapableBeanFactory -> @Nullable 	Object resolveDependency(DependencyDescriptor descriptor, @Nullable String requestingBeanName, 			@Nullable Set<String> autowiredBeanNames, @Nullable TypeConverter typeConverter) throws BeansException_;1530174524;Resolve the specified dependency against the beans defined in this factory._@param descriptor the descriptor for the dependency (field/method/constructor)_@param requestingBeanName the name of the bean which declares the given dependency_@param autowiredBeanNames a Set that all names of autowired beans (used for_resolving the given dependency) are supposed to be added to_@param typeConverter the TypeConverter to use for populating arrays and collections_@return the resolved object, or {@code null} if none found_@throws NoSuchBeanDefinitionException if no matching bean was found_@throws NoUniqueBeanDefinitionException if more than one matching bean was found_@throws BeansException if dependency resolution failed for any other reason_@since 2.5_@see DependencyDescriptor;@Nullable_	Object resolveDependency(DependencyDescriptor descriptor, @Nullable String requestingBeanName,_			@Nullable Set<String> autowiredBeanNames, @Nullable TypeConverter typeConverter) throws BeansException_;resolve,the,specified,dependency,against,the,beans,defined,in,this,factory,param,descriptor,the,descriptor,for,the,dependency,field,method,constructor,param,requesting,bean,name,the,name,of,the,bean,which,declares,the,given,dependency,param,autowired,bean,names,a,set,that,all,names,of,autowired,beans,used,for,resolving,the,given,dependency,are,supposed,to,be,added,to,param,type,converter,the,type,converter,to,use,for,populating,arrays,and,collections,return,the,resolved,object,or,code,null,if,none,found,throws,no,such,bean,definition,exception,if,no,matching,bean,was,found,throws,no,unique,bean,definition,exception,if,more,than,one,matching,bean,was,found,throws,beans,exception,if,dependency,resolution,failed,for,any,other,reason,since,2,5,see,dependency,descriptor;nullable,object,resolve,dependency,dependency,descriptor,descriptor,nullable,string,requesting,bean,name,nullable,set,string,autowired,bean,names,nullable,type,converter,type,converter,throws,beans,exception
AutowireCapableBeanFactory -> @Nullable 	Object resolveDependency(DependencyDescriptor descriptor, @Nullable String requestingBeanName, 			@Nullable Set<String> autowiredBeanNames, @Nullable TypeConverter typeConverter) throws BeansException_;1535064541;Resolve the specified dependency against the beans defined in this factory._@param descriptor the descriptor for the dependency (field/method/constructor)_@param requestingBeanName the name of the bean which declares the given dependency_@param autowiredBeanNames a Set that all names of autowired beans (used for_resolving the given dependency) are supposed to be added to_@param typeConverter the TypeConverter to use for populating arrays and collections_@return the resolved object, or {@code null} if none found_@throws NoSuchBeanDefinitionException if no matching bean was found_@throws NoUniqueBeanDefinitionException if more than one matching bean was found_@throws BeansException if dependency resolution failed for any other reason_@since 2.5_@see DependencyDescriptor;@Nullable_	Object resolveDependency(DependencyDescriptor descriptor, @Nullable String requestingBeanName,_			@Nullable Set<String> autowiredBeanNames, @Nullable TypeConverter typeConverter) throws BeansException_;resolve,the,specified,dependency,against,the,beans,defined,in,this,factory,param,descriptor,the,descriptor,for,the,dependency,field,method,constructor,param,requesting,bean,name,the,name,of,the,bean,which,declares,the,given,dependency,param,autowired,bean,names,a,set,that,all,names,of,autowired,beans,used,for,resolving,the,given,dependency,are,supposed,to,be,added,to,param,type,converter,the,type,converter,to,use,for,populating,arrays,and,collections,return,the,resolved,object,or,code,null,if,none,found,throws,no,such,bean,definition,exception,if,no,matching,bean,was,found,throws,no,unique,bean,definition,exception,if,more,than,one,matching,bean,was,found,throws,beans,exception,if,dependency,resolution,failed,for,any,other,reason,since,2,5,see,dependency,descriptor;nullable,object,resolve,dependency,dependency,descriptor,descriptor,nullable,string,requesting,bean,name,nullable,set,string,autowired,bean,names,nullable,type,converter,type,converter,throws,beans,exception
AutowireCapableBeanFactory -> @Nullable 	Object resolveDependency(DependencyDescriptor descriptor, @Nullable String requestingBeanName, 			@Nullable Set<String> autowiredBeanNames, @Nullable TypeConverter typeConverter) throws BeansException_;1549551674;Resolve the specified dependency against the beans defined in this factory._@param descriptor the descriptor for the dependency (field/method/constructor)_@param requestingBeanName the name of the bean which declares the given dependency_@param autowiredBeanNames a Set that all names of autowired beans (used for_resolving the given dependency) are supposed to be added to_@param typeConverter the TypeConverter to use for populating arrays and collections_@return the resolved object, or {@code null} if none found_@throws NoSuchBeanDefinitionException if no matching bean was found_@throws NoUniqueBeanDefinitionException if more than one matching bean was found_@throws BeansException if dependency resolution failed for any other reason_@since 2.5_@see DependencyDescriptor;@Nullable_	Object resolveDependency(DependencyDescriptor descriptor, @Nullable String requestingBeanName,_			@Nullable Set<String> autowiredBeanNames, @Nullable TypeConverter typeConverter) throws BeansException_;resolve,the,specified,dependency,against,the,beans,defined,in,this,factory,param,descriptor,the,descriptor,for,the,dependency,field,method,constructor,param,requesting,bean,name,the,name,of,the,bean,which,declares,the,given,dependency,param,autowired,bean,names,a,set,that,all,names,of,autowired,beans,used,for,resolving,the,given,dependency,are,supposed,to,be,added,to,param,type,converter,the,type,converter,to,use,for,populating,arrays,and,collections,return,the,resolved,object,or,code,null,if,none,found,throws,no,such,bean,definition,exception,if,no,matching,bean,was,found,throws,no,unique,bean,definition,exception,if,more,than,one,matching,bean,was,found,throws,beans,exception,if,dependency,resolution,failed,for,any,other,reason,since,2,5,see,dependency,descriptor;nullable,object,resolve,dependency,dependency,descriptor,descriptor,nullable,string,requesting,bean,name,nullable,set,string,autowired,bean,names,nullable,type,converter,type,converter,throws,beans,exception
AutowireCapableBeanFactory -> @Nullable 	Object resolveDependency(DependencyDescriptor descriptor, @Nullable String requestingBeanName, 			@Nullable Set<String> autowiredBeanNames, @Nullable TypeConverter typeConverter) throws BeansException_;1549577242;Resolve the specified dependency against the beans defined in this factory._@param descriptor the descriptor for the dependency (field/method/constructor)_@param requestingBeanName the name of the bean which declares the given dependency_@param autowiredBeanNames a Set that all names of autowired beans (used for_resolving the given dependency) are supposed to be added to_@param typeConverter the TypeConverter to use for populating arrays and collections_@return the resolved object, or {@code null} if none found_@throws NoSuchBeanDefinitionException if no matching bean was found_@throws NoUniqueBeanDefinitionException if more than one matching bean was found_@throws BeansException if dependency resolution failed for any other reason_@since 2.5_@see DependencyDescriptor;@Nullable_	Object resolveDependency(DependencyDescriptor descriptor, @Nullable String requestingBeanName,_			@Nullable Set<String> autowiredBeanNames, @Nullable TypeConverter typeConverter) throws BeansException_;resolve,the,specified,dependency,against,the,beans,defined,in,this,factory,param,descriptor,the,descriptor,for,the,dependency,field,method,constructor,param,requesting,bean,name,the,name,of,the,bean,which,declares,the,given,dependency,param,autowired,bean,names,a,set,that,all,names,of,autowired,beans,used,for,resolving,the,given,dependency,are,supposed,to,be,added,to,param,type,converter,the,type,converter,to,use,for,populating,arrays,and,collections,return,the,resolved,object,or,code,null,if,none,found,throws,no,such,bean,definition,exception,if,no,matching,bean,was,found,throws,no,unique,bean,definition,exception,if,more,than,one,matching,bean,was,found,throws,beans,exception,if,dependency,resolution,failed,for,any,other,reason,since,2,5,see,dependency,descriptor;nullable,object,resolve,dependency,dependency,descriptor,descriptor,nullable,string,requesting,bean,name,nullable,set,string,autowired,bean,names,nullable,type,converter,type,converter,throws,beans,exception
AutowireCapableBeanFactory -> <T> T createBean(Class<T> beanClass) throws BeansException_;1328020251;Fully create a new bean instance of the given class._<p>Performs full initialization of the bean, including all applicable_{@link BeanPostProcessor BeanPostProcessors}._<p>Note: This is intended for creating a fresh instance, populating annotated_fields and methods as well as applying all standard bean initialiation callbacks._It does <i>not</> imply traditional by-name or by-type autowiring of properties__use {@link #createBean(Class, int, boolean)} for that purposes._@param beanClass the class of the bean to create_@return the new bean instance_@throws BeansException if instantiation or wiring failed;<T> T createBean(Class<T> beanClass) throws BeansException_;fully,create,a,new,bean,instance,of,the,given,class,p,performs,full,initialization,of,the,bean,including,all,applicable,link,bean,post,processor,bean,post,processors,p,note,this,is,intended,for,creating,a,fresh,instance,populating,annotated,fields,and,methods,as,well,as,applying,all,standard,bean,initialiation,callbacks,it,does,i,not,imply,traditional,by,name,or,by,type,autowiring,of,properties,use,link,create,bean,class,int,boolean,for,that,purposes,param,bean,class,the,class,of,the,bean,to,create,return,the,new,bean,instance,throws,beans,exception,if,instantiation,or,wiring,failed;t,t,create,bean,class,t,bean,class,throws,beans,exception
AutowireCapableBeanFactory -> <T> T createBean(Class<T> beanClass) throws BeansException_;1356735495;Fully create a new bean instance of the given class._<p>Performs full initialization of the bean, including all applicable_{@link BeanPostProcessor BeanPostProcessors}._<p>Note: This is intended for creating a fresh instance, populating annotated_fields and methods as well as applying all standard bean initialiation callbacks._It does <i>not</> imply traditional by-name or by-type autowiring of properties__use {@link #createBean(Class, int, boolean)} for that purposes._@param beanClass the class of the bean to create_@return the new bean instance_@throws BeansException if instantiation or wiring failed;<T> T createBean(Class<T> beanClass) throws BeansException_;fully,create,a,new,bean,instance,of,the,given,class,p,performs,full,initialization,of,the,bean,including,all,applicable,link,bean,post,processor,bean,post,processors,p,note,this,is,intended,for,creating,a,fresh,instance,populating,annotated,fields,and,methods,as,well,as,applying,all,standard,bean,initialiation,callbacks,it,does,i,not,imply,traditional,by,name,or,by,type,autowiring,of,properties,use,link,create,bean,class,int,boolean,for,that,purposes,param,bean,class,the,class,of,the,bean,to,create,return,the,new,bean,instance,throws,beans,exception,if,instantiation,or,wiring,failed;t,t,create,bean,class,t,bean,class,throws,beans,exception
AutowireCapableBeanFactory -> <T> T createBean(Class<T> beanClass) throws BeansException_;1364503447;Fully create a new bean instance of the given class._<p>Performs full initialization of the bean, including all applicable_{@link BeanPostProcessor BeanPostProcessors}._<p>Note: This is intended for creating a fresh instance, populating annotated_fields and methods as well as applying all standard bean initialiation callbacks._It does <i>not</> imply traditional by-name or by-type autowiring of properties__use {@link #createBean(Class, int, boolean)} for that purposes._@param beanClass the class of the bean to create_@return the new bean instance_@throws BeansException if instantiation or wiring failed;<T> T createBean(Class<T> beanClass) throws BeansException_;fully,create,a,new,bean,instance,of,the,given,class,p,performs,full,initialization,of,the,bean,including,all,applicable,link,bean,post,processor,bean,post,processors,p,note,this,is,intended,for,creating,a,fresh,instance,populating,annotated,fields,and,methods,as,well,as,applying,all,standard,bean,initialiation,callbacks,it,does,i,not,imply,traditional,by,name,or,by,type,autowiring,of,properties,use,link,create,bean,class,int,boolean,for,that,purposes,param,bean,class,the,class,of,the,bean,to,create,return,the,new,bean,instance,throws,beans,exception,if,instantiation,or,wiring,failed;t,t,create,bean,class,t,bean,class,throws,beans,exception
AutowireCapableBeanFactory -> <T> T createBean(Class<T> beanClass) throws BeansException_;1368546246;Fully create a new bean instance of the given class._<p>Performs full initialization of the bean, including all applicable_{@link BeanPostProcessor BeanPostProcessors}._<p>Note: This is intended for creating a fresh instance, populating annotated_fields and methods as well as applying all standard bean initialiation callbacks._It does <i>not</> imply traditional by-name or by-type autowiring of properties__use {@link #createBean(Class, int, boolean)} for that purposes._@param beanClass the class of the bean to create_@return the new bean instance_@throws BeansException if instantiation or wiring failed;<T> T createBean(Class<T> beanClass) throws BeansException_;fully,create,a,new,bean,instance,of,the,given,class,p,performs,full,initialization,of,the,bean,including,all,applicable,link,bean,post,processor,bean,post,processors,p,note,this,is,intended,for,creating,a,fresh,instance,populating,annotated,fields,and,methods,as,well,as,applying,all,standard,bean,initialiation,callbacks,it,does,i,not,imply,traditional,by,name,or,by,type,autowiring,of,properties,use,link,create,bean,class,int,boolean,for,that,purposes,param,bean,class,the,class,of,the,bean,to,create,return,the,new,bean,instance,throws,beans,exception,if,instantiation,or,wiring,failed;t,t,create,bean,class,t,bean,class,throws,beans,exception
AutowireCapableBeanFactory -> <T> T createBean(Class<T> beanClass) throws BeansException_;1458483997;Fully create a new bean instance of the given class._<p>Performs full initialization of the bean, including all applicable_{@link BeanPostProcessor BeanPostProcessors}._<p>Note: This is intended for creating a fresh instance, populating annotated_fields and methods as well as applying all standard bean initialization callbacks._It does <i>not</> imply traditional by-name or by-type autowiring of properties__use {@link #createBean(Class, int, boolean)} for those purposes._@param beanClass the class of the bean to create_@return the new bean instance_@throws BeansException if instantiation or wiring failed;<T> T createBean(Class<T> beanClass) throws BeansException_;fully,create,a,new,bean,instance,of,the,given,class,p,performs,full,initialization,of,the,bean,including,all,applicable,link,bean,post,processor,bean,post,processors,p,note,this,is,intended,for,creating,a,fresh,instance,populating,annotated,fields,and,methods,as,well,as,applying,all,standard,bean,initialization,callbacks,it,does,i,not,imply,traditional,by,name,or,by,type,autowiring,of,properties,use,link,create,bean,class,int,boolean,for,those,purposes,param,bean,class,the,class,of,the,bean,to,create,return,the,new,bean,instance,throws,beans,exception,if,instantiation,or,wiring,failed;t,t,create,bean,class,t,bean,class,throws,beans,exception
AutowireCapableBeanFactory -> <T> T createBean(Class<T> beanClass) throws BeansException_;1470948126;Fully create a new bean instance of the given class._<p>Performs full initialization of the bean, including all applicable_{@link BeanPostProcessor BeanPostProcessors}._<p>Note: This is intended for creating a fresh instance, populating annotated_fields and methods as well as applying all standard bean initialization callbacks._It does <i>not</> imply traditional by-name or by-type autowiring of properties__use {@link #createBean(Class, int, boolean)} for those purposes._@param beanClass the class of the bean to create_@return the new bean instance_@throws BeansException if instantiation or wiring failed;<T> T createBean(Class<T> beanClass) throws BeansException_;fully,create,a,new,bean,instance,of,the,given,class,p,performs,full,initialization,of,the,bean,including,all,applicable,link,bean,post,processor,bean,post,processors,p,note,this,is,intended,for,creating,a,fresh,instance,populating,annotated,fields,and,methods,as,well,as,applying,all,standard,bean,initialization,callbacks,it,does,i,not,imply,traditional,by,name,or,by,type,autowiring,of,properties,use,link,create,bean,class,int,boolean,for,those,purposes,param,bean,class,the,class,of,the,bean,to,create,return,the,new,bean,instance,throws,beans,exception,if,instantiation,or,wiring,failed;t,t,create,bean,class,t,bean,class,throws,beans,exception
AutowireCapableBeanFactory -> <T> T createBean(Class<T> beanClass) throws BeansException_;1470952254;Fully create a new bean instance of the given class._<p>Performs full initialization of the bean, including all applicable_{@link BeanPostProcessor BeanPostProcessors}._<p>Note: This is intended for creating a fresh instance, populating annotated_fields and methods as well as applying all standard bean initialization callbacks._It does <i>not</> imply traditional by-name or by-type autowiring of properties__use {@link #createBean(Class, int, boolean)} for those purposes._@param beanClass the class of the bean to create_@return the new bean instance_@throws BeansException if instantiation or wiring failed;<T> T createBean(Class<T> beanClass) throws BeansException_;fully,create,a,new,bean,instance,of,the,given,class,p,performs,full,initialization,of,the,bean,including,all,applicable,link,bean,post,processor,bean,post,processors,p,note,this,is,intended,for,creating,a,fresh,instance,populating,annotated,fields,and,methods,as,well,as,applying,all,standard,bean,initialization,callbacks,it,does,i,not,imply,traditional,by,name,or,by,type,autowiring,of,properties,use,link,create,bean,class,int,boolean,for,those,purposes,param,bean,class,the,class,of,the,bean,to,create,return,the,new,bean,instance,throws,beans,exception,if,instantiation,or,wiring,failed;t,t,create,bean,class,t,bean,class,throws,beans,exception
AutowireCapableBeanFactory -> <T> T createBean(Class<T> beanClass) throws BeansException_;1495868221;Fully create a new bean instance of the given class._<p>Performs full initialization of the bean, including all applicable_{@link BeanPostProcessor BeanPostProcessors}._<p>Note: This is intended for creating a fresh instance, populating annotated_fields and methods as well as applying all standard bean initialization callbacks._It does <i>not</> imply traditional by-name or by-type autowiring of properties__use {@link #createBean(Class, int, boolean)} for those purposes._@param beanClass the class of the bean to create_@return the new bean instance_@throws BeansException if instantiation or wiring failed;<T> T createBean(Class<T> beanClass) throws BeansException_;fully,create,a,new,bean,instance,of,the,given,class,p,performs,full,initialization,of,the,bean,including,all,applicable,link,bean,post,processor,bean,post,processors,p,note,this,is,intended,for,creating,a,fresh,instance,populating,annotated,fields,and,methods,as,well,as,applying,all,standard,bean,initialization,callbacks,it,does,i,not,imply,traditional,by,name,or,by,type,autowiring,of,properties,use,link,create,bean,class,int,boolean,for,those,purposes,param,bean,class,the,class,of,the,bean,to,create,return,the,new,bean,instance,throws,beans,exception,if,instantiation,or,wiring,failed;t,t,create,bean,class,t,bean,class,throws,beans,exception
AutowireCapableBeanFactory -> <T> T createBean(Class<T> beanClass) throws BeansException_;1496259743;Fully create a new bean instance of the given class._<p>Performs full initialization of the bean, including all applicable_{@link BeanPostProcessor BeanPostProcessors}._<p>Note: This is intended for creating a fresh instance, populating annotated_fields and methods as well as applying all standard bean initialization callbacks._It does <i>not</> imply traditional by-name or by-type autowiring of properties__use {@link #createBean(Class, int, boolean)} for those purposes._@param beanClass the class of the bean to create_@return the new bean instance_@throws BeansException if instantiation or wiring failed;<T> T createBean(Class<T> beanClass) throws BeansException_;fully,create,a,new,bean,instance,of,the,given,class,p,performs,full,initialization,of,the,bean,including,all,applicable,link,bean,post,processor,bean,post,processors,p,note,this,is,intended,for,creating,a,fresh,instance,populating,annotated,fields,and,methods,as,well,as,applying,all,standard,bean,initialization,callbacks,it,does,i,not,imply,traditional,by,name,or,by,type,autowiring,of,properties,use,link,create,bean,class,int,boolean,for,those,purposes,param,bean,class,the,class,of,the,bean,to,create,return,the,new,bean,instance,throws,beans,exception,if,instantiation,or,wiring,failed;t,t,create,bean,class,t,bean,class,throws,beans,exception
AutowireCapableBeanFactory -> <T> T createBean(Class<T> beanClass) throws BeansException_;1496837955;Fully create a new bean instance of the given class._<p>Performs full initialization of the bean, including all applicable_{@link BeanPostProcessor BeanPostProcessors}._<p>Note: This is intended for creating a fresh instance, populating annotated_fields and methods as well as applying all standard bean initialization callbacks._It does <i>not</> imply traditional by-name or by-type autowiring of properties__use {@link #createBean(Class, int, boolean)} for those purposes._@param beanClass the class of the bean to create_@return the new bean instance_@throws BeansException if instantiation or wiring failed;<T> T createBean(Class<T> beanClass) throws BeansException_;fully,create,a,new,bean,instance,of,the,given,class,p,performs,full,initialization,of,the,bean,including,all,applicable,link,bean,post,processor,bean,post,processors,p,note,this,is,intended,for,creating,a,fresh,instance,populating,annotated,fields,and,methods,as,well,as,applying,all,standard,bean,initialization,callbacks,it,does,i,not,imply,traditional,by,name,or,by,type,autowiring,of,properties,use,link,create,bean,class,int,boolean,for,those,purposes,param,bean,class,the,class,of,the,bean,to,create,return,the,new,bean,instance,throws,beans,exception,if,instantiation,or,wiring,failed;t,t,create,bean,class,t,bean,class,throws,beans,exception
AutowireCapableBeanFactory -> <T> T createBean(Class<T> beanClass) throws BeansException_;1503007895;Fully create a new bean instance of the given class._<p>Performs full initialization of the bean, including all applicable_{@link BeanPostProcessor BeanPostProcessors}._<p>Note: This is intended for creating a fresh instance, populating annotated_fields and methods as well as applying all standard bean initialization callbacks._It does <i>not</> imply traditional by-name or by-type autowiring of properties__use {@link #createBean(Class, int, boolean)} for those purposes._@param beanClass the class of the bean to create_@return the new bean instance_@throws BeansException if instantiation or wiring failed;<T> T createBean(Class<T> beanClass) throws BeansException_;fully,create,a,new,bean,instance,of,the,given,class,p,performs,full,initialization,of,the,bean,including,all,applicable,link,bean,post,processor,bean,post,processors,p,note,this,is,intended,for,creating,a,fresh,instance,populating,annotated,fields,and,methods,as,well,as,applying,all,standard,bean,initialization,callbacks,it,does,i,not,imply,traditional,by,name,or,by,type,autowiring,of,properties,use,link,create,bean,class,int,boolean,for,those,purposes,param,bean,class,the,class,of,the,bean,to,create,return,the,new,bean,instance,throws,beans,exception,if,instantiation,or,wiring,failed;t,t,create,bean,class,t,bean,class,throws,beans,exception
AutowireCapableBeanFactory -> <T> T createBean(Class<T> beanClass) throws BeansException_;1530174524;Fully create a new bean instance of the given class._<p>Performs full initialization of the bean, including all applicable_{@link BeanPostProcessor BeanPostProcessors}._<p>Note: This is intended for creating a fresh instance, populating annotated_fields and methods as well as applying all standard bean initialization callbacks._It does <i>not</i> imply traditional by-name or by-type autowiring of properties__use {@link #createBean(Class, int, boolean)} for those purposes._@param beanClass the class of the bean to create_@return the new bean instance_@throws BeansException if instantiation or wiring failed;<T> T createBean(Class<T> beanClass) throws BeansException_;fully,create,a,new,bean,instance,of,the,given,class,p,performs,full,initialization,of,the,bean,including,all,applicable,link,bean,post,processor,bean,post,processors,p,note,this,is,intended,for,creating,a,fresh,instance,populating,annotated,fields,and,methods,as,well,as,applying,all,standard,bean,initialization,callbacks,it,does,i,not,i,imply,traditional,by,name,or,by,type,autowiring,of,properties,use,link,create,bean,class,int,boolean,for,those,purposes,param,bean,class,the,class,of,the,bean,to,create,return,the,new,bean,instance,throws,beans,exception,if,instantiation,or,wiring,failed;t,t,create,bean,class,t,bean,class,throws,beans,exception
AutowireCapableBeanFactory -> <T> T createBean(Class<T> beanClass) throws BeansException_;1535064541;Fully create a new bean instance of the given class._<p>Performs full initialization of the bean, including all applicable_{@link BeanPostProcessor BeanPostProcessors}._<p>Note: This is intended for creating a fresh instance, populating annotated_fields and methods as well as applying all standard bean initialization callbacks._It does <i>not</i> imply traditional by-name or by-type autowiring of properties__use {@link #createBean(Class, int, boolean)} for those purposes._@param beanClass the class of the bean to create_@return the new bean instance_@throws BeansException if instantiation or wiring failed;<T> T createBean(Class<T> beanClass) throws BeansException_;fully,create,a,new,bean,instance,of,the,given,class,p,performs,full,initialization,of,the,bean,including,all,applicable,link,bean,post,processor,bean,post,processors,p,note,this,is,intended,for,creating,a,fresh,instance,populating,annotated,fields,and,methods,as,well,as,applying,all,standard,bean,initialization,callbacks,it,does,i,not,i,imply,traditional,by,name,or,by,type,autowiring,of,properties,use,link,create,bean,class,int,boolean,for,those,purposes,param,bean,class,the,class,of,the,bean,to,create,return,the,new,bean,instance,throws,beans,exception,if,instantiation,or,wiring,failed;t,t,create,bean,class,t,bean,class,throws,beans,exception
AutowireCapableBeanFactory -> <T> T createBean(Class<T> beanClass) throws BeansException_;1549551674;Fully create a new bean instance of the given class._<p>Performs full initialization of the bean, including all applicable_{@link BeanPostProcessor BeanPostProcessors}._<p>Note: This is intended for creating a fresh instance, populating annotated_fields and methods as well as applying all standard bean initialization callbacks._It does <i>not</i> imply traditional by-name or by-type autowiring of properties__use {@link #createBean(Class, int, boolean)} for those purposes._@param beanClass the class of the bean to create_@return the new bean instance_@throws BeansException if instantiation or wiring failed;<T> T createBean(Class<T> beanClass) throws BeansException_;fully,create,a,new,bean,instance,of,the,given,class,p,performs,full,initialization,of,the,bean,including,all,applicable,link,bean,post,processor,bean,post,processors,p,note,this,is,intended,for,creating,a,fresh,instance,populating,annotated,fields,and,methods,as,well,as,applying,all,standard,bean,initialization,callbacks,it,does,i,not,i,imply,traditional,by,name,or,by,type,autowiring,of,properties,use,link,create,bean,class,int,boolean,for,those,purposes,param,bean,class,the,class,of,the,bean,to,create,return,the,new,bean,instance,throws,beans,exception,if,instantiation,or,wiring,failed;t,t,create,bean,class,t,bean,class,throws,beans,exception
AutowireCapableBeanFactory -> <T> T createBean(Class<T> beanClass) throws BeansException_;1549577242;Fully create a new bean instance of the given class._<p>Performs full initialization of the bean, including all applicable_{@link BeanPostProcessor BeanPostProcessors}._<p>Note: This is intended for creating a fresh instance, populating annotated_fields and methods as well as applying all standard bean initialization callbacks._It does <i>not</i> imply traditional by-name or by-type autowiring of properties__use {@link #createBean(Class, int, boolean)} for those purposes._@param beanClass the class of the bean to create_@return the new bean instance_@throws BeansException if instantiation or wiring failed;<T> T createBean(Class<T> beanClass) throws BeansException_;fully,create,a,new,bean,instance,of,the,given,class,p,performs,full,initialization,of,the,bean,including,all,applicable,link,bean,post,processor,bean,post,processors,p,note,this,is,intended,for,creating,a,fresh,instance,populating,annotated,fields,and,methods,as,well,as,applying,all,standard,bean,initialization,callbacks,it,does,i,not,i,imply,traditional,by,name,or,by,type,autowiring,of,properties,use,link,create,bean,class,int,boolean,for,those,purposes,param,bean,class,the,class,of,the,bean,to,create,return,the,new,bean,instance,throws,beans,exception,if,instantiation,or,wiring,failed;t,t,create,bean,class,t,bean,class,throws,beans,exception
AutowireCapableBeanFactory -> <T> NamedBeanHolder<T> resolveNamedBean(Class<T> requiredType) throws BeansException_;1470948126;Resolve the bean instance that uniquely matches the given object type, if any,_including its bean name._<p>This is effectively a variant of {@link #getBean(Class)} which preserves the_bean name of the matching instance._@param requiredType type the bean must match_ can be an interface or superclass._{@code null} is disallowed._@return the bean name plus bean instance_@throws NoSuchBeanDefinitionException if no bean of the given type was found_@throws NoUniqueBeanDefinitionException if more than one bean of the given type was found_@throws BeansException if the bean could not be created_@since 4.3.3_@see #getBean(Class);<T> NamedBeanHolder<T> resolveNamedBean(Class<T> requiredType) throws BeansException_;resolve,the,bean,instance,that,uniquely,matches,the,given,object,type,if,any,including,its,bean,name,p,this,is,effectively,a,variant,of,link,get,bean,class,which,preserves,the,bean,name,of,the,matching,instance,param,required,type,type,the,bean,must,match,can,be,an,interface,or,superclass,code,null,is,disallowed,return,the,bean,name,plus,bean,instance,throws,no,such,bean,definition,exception,if,no,bean,of,the,given,type,was,found,throws,no,unique,bean,definition,exception,if,more,than,one,bean,of,the,given,type,was,found,throws,beans,exception,if,the,bean,could,not,be,created,since,4,3,3,see,get,bean,class;t,named,bean,holder,t,resolve,named,bean,class,t,required,type,throws,beans,exception
AutowireCapableBeanFactory -> <T> NamedBeanHolder<T> resolveNamedBean(Class<T> requiredType) throws BeansException_;1470952254;Resolve the bean instance that uniquely matches the given object type, if any,_including its bean name._<p>This is effectively a variant of {@link #getBean(Class)} which preserves the_bean name of the matching instance._@param requiredType type the bean must match_ can be an interface or superclass._{@code null} is disallowed._@return the bean name plus bean instance_@throws NoSuchBeanDefinitionException if no matching bean was found_@throws NoUniqueBeanDefinitionException if more than one matching bean was found_@throws BeansException if the bean could not be created_@since 4.3.3_@see #getBean(Class);<T> NamedBeanHolder<T> resolveNamedBean(Class<T> requiredType) throws BeansException_;resolve,the,bean,instance,that,uniquely,matches,the,given,object,type,if,any,including,its,bean,name,p,this,is,effectively,a,variant,of,link,get,bean,class,which,preserves,the,bean,name,of,the,matching,instance,param,required,type,type,the,bean,must,match,can,be,an,interface,or,superclass,code,null,is,disallowed,return,the,bean,name,plus,bean,instance,throws,no,such,bean,definition,exception,if,no,matching,bean,was,found,throws,no,unique,bean,definition,exception,if,more,than,one,matching,bean,was,found,throws,beans,exception,if,the,bean,could,not,be,created,since,4,3,3,see,get,bean,class;t,named,bean,holder,t,resolve,named,bean,class,t,required,type,throws,beans,exception
AutowireCapableBeanFactory -> <T> NamedBeanHolder<T> resolveNamedBean(Class<T> requiredType) throws BeansException_;1495868221;Resolve the bean instance that uniquely matches the given object type, if any,_including its bean name._<p>This is effectively a variant of {@link #getBean(Class)} which preserves the_bean name of the matching instance._@param requiredType type the bean must match_ can be an interface or superclass._{@code null} is disallowed._@return the bean name plus bean instance_@throws NoSuchBeanDefinitionException if no matching bean was found_@throws NoUniqueBeanDefinitionException if more than one matching bean was found_@throws BeansException if the bean could not be created_@since 4.3.3_@see #getBean(Class);<T> NamedBeanHolder<T> resolveNamedBean(Class<T> requiredType) throws BeansException_;resolve,the,bean,instance,that,uniquely,matches,the,given,object,type,if,any,including,its,bean,name,p,this,is,effectively,a,variant,of,link,get,bean,class,which,preserves,the,bean,name,of,the,matching,instance,param,required,type,type,the,bean,must,match,can,be,an,interface,or,superclass,code,null,is,disallowed,return,the,bean,name,plus,bean,instance,throws,no,such,bean,definition,exception,if,no,matching,bean,was,found,throws,no,unique,bean,definition,exception,if,more,than,one,matching,bean,was,found,throws,beans,exception,if,the,bean,could,not,be,created,since,4,3,3,see,get,bean,class;t,named,bean,holder,t,resolve,named,bean,class,t,required,type,throws,beans,exception
AutowireCapableBeanFactory -> <T> NamedBeanHolder<T> resolveNamedBean(Class<T> requiredType) throws BeansException_;1496259743;Resolve the bean instance that uniquely matches the given object type, if any,_including its bean name._<p>This is effectively a variant of {@link #getBean(Class)} which preserves the_bean name of the matching instance._@param requiredType type the bean must match_ can be an interface or superclass._{@code null} is disallowed._@return the bean name plus bean instance_@throws NoSuchBeanDefinitionException if no matching bean was found_@throws NoUniqueBeanDefinitionException if more than one matching bean was found_@throws BeansException if the bean could not be created_@since 4.3.3_@see #getBean(Class);<T> NamedBeanHolder<T> resolveNamedBean(Class<T> requiredType) throws BeansException_;resolve,the,bean,instance,that,uniquely,matches,the,given,object,type,if,any,including,its,bean,name,p,this,is,effectively,a,variant,of,link,get,bean,class,which,preserves,the,bean,name,of,the,matching,instance,param,required,type,type,the,bean,must,match,can,be,an,interface,or,superclass,code,null,is,disallowed,return,the,bean,name,plus,bean,instance,throws,no,such,bean,definition,exception,if,no,matching,bean,was,found,throws,no,unique,bean,definition,exception,if,more,than,one,matching,bean,was,found,throws,beans,exception,if,the,bean,could,not,be,created,since,4,3,3,see,get,bean,class;t,named,bean,holder,t,resolve,named,bean,class,t,required,type,throws,beans,exception
AutowireCapableBeanFactory -> <T> NamedBeanHolder<T> resolveNamedBean(Class<T> requiredType) throws BeansException_;1496837955;Resolve the bean instance that uniquely matches the given object type, if any,_including its bean name._<p>This is effectively a variant of {@link #getBean(Class)} which preserves the_bean name of the matching instance._@param requiredType type the bean must match_ can be an interface or superclass._{@code null} is disallowed._@return the bean name plus bean instance_@throws NoSuchBeanDefinitionException if no matching bean was found_@throws NoUniqueBeanDefinitionException if more than one matching bean was found_@throws BeansException if the bean could not be created_@since 4.3.3_@see #getBean(Class);<T> NamedBeanHolder<T> resolveNamedBean(Class<T> requiredType) throws BeansException_;resolve,the,bean,instance,that,uniquely,matches,the,given,object,type,if,any,including,its,bean,name,p,this,is,effectively,a,variant,of,link,get,bean,class,which,preserves,the,bean,name,of,the,matching,instance,param,required,type,type,the,bean,must,match,can,be,an,interface,or,superclass,code,null,is,disallowed,return,the,bean,name,plus,bean,instance,throws,no,such,bean,definition,exception,if,no,matching,bean,was,found,throws,no,unique,bean,definition,exception,if,more,than,one,matching,bean,was,found,throws,beans,exception,if,the,bean,could,not,be,created,since,4,3,3,see,get,bean,class;t,named,bean,holder,t,resolve,named,bean,class,t,required,type,throws,beans,exception
AutowireCapableBeanFactory -> <T> NamedBeanHolder<T> resolveNamedBean(Class<T> requiredType) throws BeansException_;1503007895;Resolve the bean instance that uniquely matches the given object type, if any,_including its bean name._<p>This is effectively a variant of {@link #getBean(Class)} which preserves the_bean name of the matching instance._@param requiredType type the bean must match_ can be an interface or superclass._{@code null} is disallowed._@return the bean name plus bean instance_@throws NoSuchBeanDefinitionException if no matching bean was found_@throws NoUniqueBeanDefinitionException if more than one matching bean was found_@throws BeansException if the bean could not be created_@since 4.3.3_@see #getBean(Class);<T> NamedBeanHolder<T> resolveNamedBean(Class<T> requiredType) throws BeansException_;resolve,the,bean,instance,that,uniquely,matches,the,given,object,type,if,any,including,its,bean,name,p,this,is,effectively,a,variant,of,link,get,bean,class,which,preserves,the,bean,name,of,the,matching,instance,param,required,type,type,the,bean,must,match,can,be,an,interface,or,superclass,code,null,is,disallowed,return,the,bean,name,plus,bean,instance,throws,no,such,bean,definition,exception,if,no,matching,bean,was,found,throws,no,unique,bean,definition,exception,if,more,than,one,matching,bean,was,found,throws,beans,exception,if,the,bean,could,not,be,created,since,4,3,3,see,get,bean,class;t,named,bean,holder,t,resolve,named,bean,class,t,required,type,throws,beans,exception
AutowireCapableBeanFactory -> <T> NamedBeanHolder<T> resolveNamedBean(Class<T> requiredType) throws BeansException_;1530174524;Resolve the bean instance that uniquely matches the given object type, if any,_including its bean name._<p>This is effectively a variant of {@link #getBean(Class)} which preserves the_bean name of the matching instance._@param requiredType type the bean must match_ can be an interface or superclass._{@code null} is disallowed._@return the bean name plus bean instance_@throws NoSuchBeanDefinitionException if no matching bean was found_@throws NoUniqueBeanDefinitionException if more than one matching bean was found_@throws BeansException if the bean could not be created_@since 4.3.3_@see #getBean(Class);<T> NamedBeanHolder<T> resolveNamedBean(Class<T> requiredType) throws BeansException_;resolve,the,bean,instance,that,uniquely,matches,the,given,object,type,if,any,including,its,bean,name,p,this,is,effectively,a,variant,of,link,get,bean,class,which,preserves,the,bean,name,of,the,matching,instance,param,required,type,type,the,bean,must,match,can,be,an,interface,or,superclass,code,null,is,disallowed,return,the,bean,name,plus,bean,instance,throws,no,such,bean,definition,exception,if,no,matching,bean,was,found,throws,no,unique,bean,definition,exception,if,more,than,one,matching,bean,was,found,throws,beans,exception,if,the,bean,could,not,be,created,since,4,3,3,see,get,bean,class;t,named,bean,holder,t,resolve,named,bean,class,t,required,type,throws,beans,exception
AutowireCapableBeanFactory -> <T> NamedBeanHolder<T> resolveNamedBean(Class<T> requiredType) throws BeansException_;1535064541;Resolve the bean instance that uniquely matches the given object type, if any,_including its bean name._<p>This is effectively a variant of {@link #getBean(Class)} which preserves the_bean name of the matching instance._@param requiredType type the bean must match_ can be an interface or superclass._{@code null} is disallowed._@return the bean name plus bean instance_@throws NoSuchBeanDefinitionException if no matching bean was found_@throws NoUniqueBeanDefinitionException if more than one matching bean was found_@throws BeansException if the bean could not be created_@since 4.3.3_@see #getBean(Class);<T> NamedBeanHolder<T> resolveNamedBean(Class<T> requiredType) throws BeansException_;resolve,the,bean,instance,that,uniquely,matches,the,given,object,type,if,any,including,its,bean,name,p,this,is,effectively,a,variant,of,link,get,bean,class,which,preserves,the,bean,name,of,the,matching,instance,param,required,type,type,the,bean,must,match,can,be,an,interface,or,superclass,code,null,is,disallowed,return,the,bean,name,plus,bean,instance,throws,no,such,bean,definition,exception,if,no,matching,bean,was,found,throws,no,unique,bean,definition,exception,if,more,than,one,matching,bean,was,found,throws,beans,exception,if,the,bean,could,not,be,created,since,4,3,3,see,get,bean,class;t,named,bean,holder,t,resolve,named,bean,class,t,required,type,throws,beans,exception
AutowireCapableBeanFactory -> <T> NamedBeanHolder<T> resolveNamedBean(Class<T> requiredType) throws BeansException_;1549551674;Resolve the bean instance that uniquely matches the given object type, if any,_including its bean name._<p>This is effectively a variant of {@link #getBean(Class)} which preserves the_bean name of the matching instance._@param requiredType type the bean must match_ can be an interface or superclass_@return the bean name plus bean instance_@throws NoSuchBeanDefinitionException if no matching bean was found_@throws NoUniqueBeanDefinitionException if more than one matching bean was found_@throws BeansException if the bean could not be created_@since 4.3.3_@see #getBean(Class);<T> NamedBeanHolder<T> resolveNamedBean(Class<T> requiredType) throws BeansException_;resolve,the,bean,instance,that,uniquely,matches,the,given,object,type,if,any,including,its,bean,name,p,this,is,effectively,a,variant,of,link,get,bean,class,which,preserves,the,bean,name,of,the,matching,instance,param,required,type,type,the,bean,must,match,can,be,an,interface,or,superclass,return,the,bean,name,plus,bean,instance,throws,no,such,bean,definition,exception,if,no,matching,bean,was,found,throws,no,unique,bean,definition,exception,if,more,than,one,matching,bean,was,found,throws,beans,exception,if,the,bean,could,not,be,created,since,4,3,3,see,get,bean,class;t,named,bean,holder,t,resolve,named,bean,class,t,required,type,throws,beans,exception
AutowireCapableBeanFactory -> <T> NamedBeanHolder<T> resolveNamedBean(Class<T> requiredType) throws BeansException_;1549577242;Resolve the bean instance that uniquely matches the given object type, if any,_including its bean name._<p>This is effectively a variant of {@link #getBean(Class)} which preserves the_bean name of the matching instance._@param requiredType type the bean must match_ can be an interface or superclass_@return the bean name plus bean instance_@throws NoSuchBeanDefinitionException if no matching bean was found_@throws NoUniqueBeanDefinitionException if more than one matching bean was found_@throws BeansException if the bean could not be created_@since 4.3.3_@see #getBean(Class);<T> NamedBeanHolder<T> resolveNamedBean(Class<T> requiredType) throws BeansException_;resolve,the,bean,instance,that,uniquely,matches,the,given,object,type,if,any,including,its,bean,name,p,this,is,effectively,a,variant,of,link,get,bean,class,which,preserves,the,bean,name,of,the,matching,instance,param,required,type,type,the,bean,must,match,can,be,an,interface,or,superclass,return,the,bean,name,plus,bean,instance,throws,no,such,bean,definition,exception,if,no,matching,bean,was,found,throws,no,unique,bean,definition,exception,if,more,than,one,matching,bean,was,found,throws,beans,exception,if,the,bean,could,not,be,created,since,4,3,3,see,get,bean,class;t,named,bean,holder,t,resolve,named,bean,class,t,required,type,throws,beans,exception
AutowireCapableBeanFactory -> Object resolveDependency(DependencyDescriptor descriptor, String requestingBeanName, 			Set<String> autowiredBeanNames, TypeConverter typeConverter) throws BeansException_;1470948126;Resolve the specified dependency against the beans defined in this factory._@param descriptor the descriptor for the dependency_@param requestingBeanName the name of the bean which declares the present dependency_@param autowiredBeanNames a Set that all names of autowired beans (used for resolving_the present dependency) are supposed to be added to_@param typeConverter the TypeConverter to use for populating arrays and collections_@return the resolved object, or {@code null} if none found_@throws NoSuchBeanDefinitionException if no matching bean was found_@throws NoUniqueBeanDefinitionException if more than one matching bean was found_@throws BeansException if dependency resolution failed for any other reason_@see DependencyDescriptor_@since 2.5;Object resolveDependency(DependencyDescriptor descriptor, String requestingBeanName,_			Set<String> autowiredBeanNames, TypeConverter typeConverter) throws BeansException_;resolve,the,specified,dependency,against,the,beans,defined,in,this,factory,param,descriptor,the,descriptor,for,the,dependency,param,requesting,bean,name,the,name,of,the,bean,which,declares,the,present,dependency,param,autowired,bean,names,a,set,that,all,names,of,autowired,beans,used,for,resolving,the,present,dependency,are,supposed,to,be,added,to,param,type,converter,the,type,converter,to,use,for,populating,arrays,and,collections,return,the,resolved,object,or,code,null,if,none,found,throws,no,such,bean,definition,exception,if,no,matching,bean,was,found,throws,no,unique,bean,definition,exception,if,more,than,one,matching,bean,was,found,throws,beans,exception,if,dependency,resolution,failed,for,any,other,reason,see,dependency,descriptor,since,2,5;object,resolve,dependency,dependency,descriptor,descriptor,string,requesting,bean,name,set,string,autowired,bean,names,type,converter,type,converter,throws,beans,exception
AutowireCapableBeanFactory -> Object resolveDependency(DependencyDescriptor descriptor, String requestingBeanName, 			Set<String> autowiredBeanNames, TypeConverter typeConverter) throws BeansException_;1470952254;Resolve the specified dependency against the beans defined in this factory._@param descriptor the descriptor for the dependency (field/method/constructor)_@param requestingBeanName the name of the bean which declares the given dependency_@param autowiredBeanNames a Set that all names of autowired beans (used for_resolving the given dependency) are supposed to be added to_@param typeConverter the TypeConverter to use for populating arrays and collections_@return the resolved object, or {@code null} if none found_@throws NoSuchBeanDefinitionException if no matching bean was found_@throws NoUniqueBeanDefinitionException if more than one matching bean was found_@throws BeansException if dependency resolution failed for any other reason_@since 2.5_@see DependencyDescriptor;Object resolveDependency(DependencyDescriptor descriptor, String requestingBeanName,_			Set<String> autowiredBeanNames, TypeConverter typeConverter) throws BeansException_;resolve,the,specified,dependency,against,the,beans,defined,in,this,factory,param,descriptor,the,descriptor,for,the,dependency,field,method,constructor,param,requesting,bean,name,the,name,of,the,bean,which,declares,the,given,dependency,param,autowired,bean,names,a,set,that,all,names,of,autowired,beans,used,for,resolving,the,given,dependency,are,supposed,to,be,added,to,param,type,converter,the,type,converter,to,use,for,populating,arrays,and,collections,return,the,resolved,object,or,code,null,if,none,found,throws,no,such,bean,definition,exception,if,no,matching,bean,was,found,throws,no,unique,bean,definition,exception,if,more,than,one,matching,bean,was,found,throws,beans,exception,if,dependency,resolution,failed,for,any,other,reason,since,2,5,see,dependency,descriptor;object,resolve,dependency,dependency,descriptor,descriptor,string,requesting,bean,name,set,string,autowired,bean,names,type,converter,type,converter,throws,beans,exception
