# id;timestamp;commentText;codeText;commentWords;codeWords
LookupOverride -> public LookupOverride(Method method, String beanName);1408052945;Construct a new LookupOverride._@param method the method to override_@param beanName the name of the bean in the current {@code BeanFactory}_that the overridden method should return (may be {@code null});public LookupOverride(Method method, String beanName) {_		super(method.getName())__		this.method = method__		this.beanName = beanName__	};construct,a,new,lookup,override,param,method,the,method,to,override,param,bean,name,the,name,of,the,bean,in,the,current,code,bean,factory,that,the,overridden,method,should,return,may,be,code,null;public,lookup,override,method,method,string,bean,name,super,method,get,name,this,method,method,this,bean,name,bean,name
LookupOverride -> public LookupOverride(Method method, String beanName);1467846264;Construct a new LookupOverride._@param method the method to override_@param beanName the name of the bean in the current {@code BeanFactory}_that the overridden method should return (may be {@code null});public LookupOverride(Method method, String beanName) {_		super(method.getName())__		this.method = method__		this.beanName = beanName__	};construct,a,new,lookup,override,param,method,the,method,to,override,param,bean,name,the,name,of,the,bean,in,the,current,code,bean,factory,that,the,overridden,method,should,return,may,be,code,null;public,lookup,override,method,method,string,bean,name,super,method,get,name,this,method,method,this,bean,name,bean,name
LookupOverride -> public LookupOverride(String methodName, String beanName);1328020251;Construct a new LookupOverride._@param methodName the name of the method to override._This method must have no arguments._@param beanName name of the bean in the current BeanFactory_that the overriden method should return;public LookupOverride(String methodName, String beanName) {_		super(methodName)__		Assert.notNull(beanName, "Bean name must not be null")__		this.beanName = beanName__	};construct,a,new,lookup,override,param,method,name,the,name,of,the,method,to,override,this,method,must,have,no,arguments,param,bean,name,name,of,the,bean,in,the,current,bean,factory,that,the,overriden,method,should,return;public,lookup,override,string,method,name,string,bean,name,super,method,name,assert,not,null,bean,name,bean,name,must,not,be,null,this,bean,name,bean,name
LookupOverride -> public LookupOverride(String methodName, String beanName);1356735495;Construct a new LookupOverride._@param methodName the name of the method to override._This method must have no arguments._@param beanName name of the bean in the current BeanFactory_that the overriden method should return;public LookupOverride(String methodName, String beanName) {_		super(methodName)__		Assert.notNull(beanName, "Bean name must not be null")__		this.beanName = beanName__	};construct,a,new,lookup,override,param,method,name,the,name,of,the,method,to,override,this,method,must,have,no,arguments,param,bean,name,name,of,the,bean,in,the,current,bean,factory,that,the,overriden,method,should,return;public,lookup,override,string,method,name,string,bean,name,super,method,name,assert,not,null,bean,name,bean,name,must,not,be,null,this,bean,name,bean,name
LookupOverride -> public LookupOverride(String methodName, String beanName);1391902244;Construct a new LookupOverride._@param methodName the name of the method to override._This method must have no arguments._@param beanName the name of the bean in the current BeanFactory_that the overridden method should return;public LookupOverride(String methodName, String beanName) {_		super(methodName)__		Assert.notNull(beanName, "Bean name must not be null")__		this.beanName = beanName__	};construct,a,new,lookup,override,param,method,name,the,name,of,the,method,to,override,this,method,must,have,no,arguments,param,bean,name,the,name,of,the,bean,in,the,current,bean,factory,that,the,overridden,method,should,return;public,lookup,override,string,method,name,string,bean,name,super,method,name,assert,not,null,bean,name,bean,name,must,not,be,null,this,bean,name,bean,name
LookupOverride -> public LookupOverride(String methodName, String beanName);1408052945;Construct a new LookupOverride._@param methodName the name of the method to override_@param beanName the name of the bean in the current {@code BeanFactory}_that the overridden method should return (may be {@code null});public LookupOverride(String methodName, String beanName) {_		super(methodName)__		this.beanName = beanName__	};construct,a,new,lookup,override,param,method,name,the,name,of,the,method,to,override,param,bean,name,the,name,of,the,bean,in,the,current,code,bean,factory,that,the,overridden,method,should,return,may,be,code,null;public,lookup,override,string,method,name,string,bean,name,super,method,name,this,bean,name,bean,name
LookupOverride -> public LookupOverride(String methodName, String beanName);1467846264;Construct a new LookupOverride._@param methodName the name of the method to override_@param beanName the name of the bean in the current {@code BeanFactory}_that the overridden method should return (may be {@code null});public LookupOverride(String methodName, String beanName) {_		super(methodName)__		this.beanName = beanName__	};construct,a,new,lookup,override,param,method,name,the,name,of,the,method,to,override,param,bean,name,the,name,of,the,bean,in,the,current,code,bean,factory,that,the,overridden,method,should,return,may,be,code,null;public,lookup,override,string,method,name,string,bean,name,super,method,name,this,bean,name,bean,name
LookupOverride -> @Override 	public boolean matches(Method method);1328020251;Match method of the given name, with no parameters.;@Override_	public boolean matches(Method method) {_		return (method.getName().equals(getMethodName()) && method.getParameterTypes().length == 0)__	};match,method,of,the,given,name,with,no,parameters;override,public,boolean,matches,method,method,return,method,get,name,equals,get,method,name,method,get,parameter,types,length,0
LookupOverride -> @Override 	public boolean matches(Method method);1356735495;Match method of the given name, with no parameters.;@Override_	public boolean matches(Method method) {_		return (method.getName().equals(getMethodName()) && method.getParameterTypes().length == 0)__	};match,method,of,the,given,name,with,no,parameters;override,public,boolean,matches,method,method,return,method,get,name,equals,get,method,name,method,get,parameter,types,length,0
LookupOverride -> @Override 	public boolean matches(Method method);1391902244;Match the method of the given name, with no parameters.;@Override_	public boolean matches(Method method) {_		return (method.getName().equals(getMethodName()) && method.getParameterTypes().length == 0)__	};match,the,method,of,the,given,name,with,no,parameters;override,public,boolean,matches,method,method,return,method,get,name,equals,get,method,name,method,get,parameter,types,length,0
LookupOverride -> @Override 	public boolean matches(Method method);1408052945;Match the specified method by {@link Method} reference or method name._<p>For backwards compatibility reasons, in a scenario with overloaded_non-abstract methods of the given name, only the no-arg variant of a_method will be turned into a container-driven lookup method._<p>In case of a provided {@link Method}, only straight matches will_be considered, usually demarcated by the {@code @Lookup} annotation.;@Override_	public boolean matches(Method method) {_		if (this.method != null) {_			return method.equals(this.method)__		}_		else {_			return (method.getName().equals(getMethodName()) && (!isOverloaded() ||_					Modifier.isAbstract(method.getModifiers()) || method.getParameterTypes().length == 0))__		}_	};match,the,specified,method,by,link,method,reference,or,method,name,p,for,backwards,compatibility,reasons,in,a,scenario,with,overloaded,non,abstract,methods,of,the,given,name,only,the,no,arg,variant,of,a,method,will,be,turned,into,a,container,driven,lookup,method,p,in,case,of,a,provided,link,method,only,straight,matches,will,be,considered,usually,demarcated,by,the,code,lookup,annotation;override,public,boolean,matches,method,method,if,this,method,null,return,method,equals,this,method,else,return,method,get,name,equals,get,method,name,is,overloaded,modifier,is,abstract,method,get,modifiers,method,get,parameter,types,length,0
LookupOverride -> @Override 	public boolean matches(Method method);1467846264;Match the specified method by {@link Method} reference or method name._<p>For backwards compatibility reasons, in a scenario with overloaded_non-abstract methods of the given name, only the no-arg variant of a_method will be turned into a container-driven lookup method._<p>In case of a provided {@link Method}, only straight matches will_be considered, usually demarcated by the {@code @Lookup} annotation.;@Override_	public boolean matches(Method method) {_		if (this.method != null) {_			return method.equals(this.method)__		}_		else {_			return (method.getName().equals(getMethodName()) && (!isOverloaded() ||_					Modifier.isAbstract(method.getModifiers()) || method.getParameterCount() == 0))__		}_	};match,the,specified,method,by,link,method,reference,or,method,name,p,for,backwards,compatibility,reasons,in,a,scenario,with,overloaded,non,abstract,methods,of,the,given,name,only,the,no,arg,variant,of,a,method,will,be,turned,into,a,container,driven,lookup,method,p,in,case,of,a,provided,link,method,only,straight,matches,will,be,considered,usually,demarcated,by,the,code,lookup,annotation;override,public,boolean,matches,method,method,if,this,method,null,return,method,equals,this,method,else,return,method,get,name,equals,get,method,name,is,overloaded,modifier,is,abstract,method,get,modifiers,method,get,parameter,count,0
LookupOverride -> @Override 	public boolean matches(Method method);1495868221;Match the specified method by {@link Method} reference or method name._<p>For backwards compatibility reasons, in a scenario with overloaded_non-abstract methods of the given name, only the no-arg variant of a_method will be turned into a container-driven lookup method._<p>In case of a provided {@link Method}, only straight matches will_be considered, usually demarcated by the {@code @Lookup} annotation.;@Override_	public boolean matches(Method method) {_		if (this.method != null) {_			return method.equals(this.method)__		}_		else {_			return (method.getName().equals(getMethodName()) && (!isOverloaded() ||_					Modifier.isAbstract(method.getModifiers()) || method.getParameterCount() == 0))__		}_	};match,the,specified,method,by,link,method,reference,or,method,name,p,for,backwards,compatibility,reasons,in,a,scenario,with,overloaded,non,abstract,methods,of,the,given,name,only,the,no,arg,variant,of,a,method,will,be,turned,into,a,container,driven,lookup,method,p,in,case,of,a,provided,link,method,only,straight,matches,will,be,considered,usually,demarcated,by,the,code,lookup,annotation;override,public,boolean,matches,method,method,if,this,method,null,return,method,equals,this,method,else,return,method,get,name,equals,get,method,name,is,overloaded,modifier,is,abstract,method,get,modifiers,method,get,parameter,count,0
LookupOverride -> @Override 	public boolean matches(Method method);1498780456;Match the specified method by {@link Method} reference or method name._<p>For backwards compatibility reasons, in a scenario with overloaded_non-abstract methods of the given name, only the no-arg variant of a_method will be turned into a container-driven lookup method._<p>In case of a provided {@link Method}, only straight matches will_be considered, usually demarcated by the {@code @Lookup} annotation.;@Override_	public boolean matches(Method method) {_		if (this.method != null) {_			return method.equals(this.method)__		}_		else {_			return (method.getName().equals(getMethodName()) && (!isOverloaded() ||_					Modifier.isAbstract(method.getModifiers()) || method.getParameterCount() == 0))__		}_	};match,the,specified,method,by,link,method,reference,or,method,name,p,for,backwards,compatibility,reasons,in,a,scenario,with,overloaded,non,abstract,methods,of,the,given,name,only,the,no,arg,variant,of,a,method,will,be,turned,into,a,container,driven,lookup,method,p,in,case,of,a,provided,link,method,only,straight,matches,will,be,considered,usually,demarcated,by,the,code,lookup,annotation;override,public,boolean,matches,method,method,if,this,method,null,return,method,equals,this,method,else,return,method,get,name,equals,get,method,name,is,overloaded,modifier,is,abstract,method,get,modifiers,method,get,parameter,count,0
LookupOverride -> public LookupOverride(String methodName, @Nullable String beanName);1495868221;Construct a new LookupOverride._@param methodName the name of the method to override_@param beanName the name of the bean in the current {@code BeanFactory}_that the overridden method should return (may be {@code null});public LookupOverride(String methodName, @Nullable String beanName) {_		super(methodName)__		this.beanName = beanName__	};construct,a,new,lookup,override,param,method,name,the,name,of,the,method,to,override,param,bean,name,the,name,of,the,bean,in,the,current,code,bean,factory,that,the,overridden,method,should,return,may,be,code,null;public,lookup,override,string,method,name,nullable,string,bean,name,super,method,name,this,bean,name,bean,name
LookupOverride -> public LookupOverride(String methodName, @Nullable String beanName);1498780456;Construct a new LookupOverride._@param methodName the name of the method to override_@param beanName the name of the bean in the current {@code BeanFactory}_that the overridden method should return (may be {@code null});public LookupOverride(String methodName, @Nullable String beanName) {_		super(methodName)__		this.beanName = beanName__	};construct,a,new,lookup,override,param,method,name,the,name,of,the,method,to,override,param,bean,name,the,name,of,the,bean,in,the,current,code,bean,factory,that,the,overridden,method,should,return,may,be,code,null;public,lookup,override,string,method,name,nullable,string,bean,name,super,method,name,this,bean,name,bean,name
LookupOverride -> public LookupOverride(Method method, @Nullable String beanName);1495868221;Construct a new LookupOverride._@param method the method to override_@param beanName the name of the bean in the current {@code BeanFactory}_that the overridden method should return (may be {@code null});public LookupOverride(Method method, @Nullable String beanName) {_		super(method.getName())__		this.method = method__		this.beanName = beanName__	};construct,a,new,lookup,override,param,method,the,method,to,override,param,bean,name,the,name,of,the,bean,in,the,current,code,bean,factory,that,the,overridden,method,should,return,may,be,code,null;public,lookup,override,method,method,nullable,string,bean,name,super,method,get,name,this,method,method,this,bean,name,bean,name
LookupOverride -> public LookupOverride(Method method, @Nullable String beanName);1498780456;Construct a new LookupOverride._@param method the method to override_@param beanName the name of the bean in the current {@code BeanFactory}_that the overridden method should return (may be {@code null});public LookupOverride(Method method, @Nullable String beanName) {_		super(method.getName())__		this.method = method__		this.beanName = beanName__	};construct,a,new,lookup,override,param,method,the,method,to,override,param,bean,name,the,name,of,the,bean,in,the,current,code,bean,factory,that,the,overridden,method,should,return,may,be,code,null;public,lookup,override,method,method,nullable,string,bean,name,super,method,get,name,this,method,method,this,bean,name,bean,name
LookupOverride -> public String getBeanName();1328020251;Return the name of the bean that should be returned by this method.;public String getBeanName() {_		return this.beanName__	};return,the,name,of,the,bean,that,should,be,returned,by,this,method;public,string,get,bean,name,return,this,bean,name
LookupOverride -> public String getBeanName();1356735495;Return the name of the bean that should be returned by this method.;public String getBeanName() {_		return this.beanName__	};return,the,name,of,the,bean,that,should,be,returned,by,this,method;public,string,get,bean,name,return,this,bean,name
LookupOverride -> public String getBeanName();1391902244;Return the name of the bean that should be returned by this method.;public String getBeanName() {_		return this.beanName__	};return,the,name,of,the,bean,that,should,be,returned,by,this,method;public,string,get,bean,name,return,this,bean,name
LookupOverride -> public String getBeanName();1408052945;Return the name of the bean that should be returned by this method.;public String getBeanName() {_		return this.beanName__	};return,the,name,of,the,bean,that,should,be,returned,by,this,method;public,string,get,bean,name,return,this,bean,name
LookupOverride -> public String getBeanName();1467846264;Return the name of the bean that should be returned by this method.;public String getBeanName() {_		return this.beanName__	};return,the,name,of,the,bean,that,should,be,returned,by,this,method;public,string,get,bean,name,return,this,bean,name
LookupOverride -> public String getBeanName();1495868221;Return the name of the bean that should be returned by this method.;public String getBeanName() {_		return this.beanName__	};return,the,name,of,the,bean,that,should,be,returned,by,this,method;public,string,get,bean,name,return,this,bean,name
