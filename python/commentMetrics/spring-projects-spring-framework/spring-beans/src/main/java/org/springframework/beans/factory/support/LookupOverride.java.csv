commented;modifiers;parameterAmount;loc;comment;code
true;public;0;4;/**  * Return the name of the bean that should be returned by this method.  */ ;/**  * Return the name of the bean that should be returned by this method.  */ @Nullable public String getBeanName() {     return this.beanName. }
true;public;1;10;/**  * Match the specified method by {@link Method} reference or method name.  * <p>For backwards compatibility reasons, in a scenario with overloaded  * non-abstract methods of the given name, only the no-arg variant of a  * method will be turned into a container-driven lookup method.  * <p>In case of a provided {@link Method}, only straight matches will  * be considered, usually demarcated by the {@code @Lookup} annotation.  */ ;/**  * Match the specified method by {@link Method} reference or method name.  * <p>For backwards compatibility reasons, in a scenario with overloaded  * non-abstract methods of the given name, only the no-arg variant of a  * method will be turned into a container-driven lookup method.  * <p>In case of a provided {@link Method}, only straight matches will  * be considered, usually demarcated by the {@code @Lookup} annotation.  */ @Override public boolean matches(Method method) {     if (this.method != null) {         return method.equals(this.method).     } else {         return (method.getName().equals(getMethodName()) && (!isOverloaded() || Modifier.isAbstract(method.getModifiers()) || method.getParameterCount() == 0)).     } }
false;public;1;9;;@Override public boolean equals(Object other) {     if (!(other instanceof LookupOverride) || !super.equals(other)) {         return false.     }     LookupOverride that = (LookupOverride) other.     return (ObjectUtils.nullSafeEquals(this.method, that.method) && ObjectUtils.nullSafeEquals(this.beanName, that.beanName)). }
false;public;0;4;;@Override public int hashCode() {     return (29 * super.hashCode() + ObjectUtils.nullSafeHashCode(this.beanName)). }
false;public;0;4;;@Override public String toString() {     return "LookupOverride for method '" + getMethodName() + "'". }
