# id;timestamp;commentText;codeText;commentWords;codeWords
DefaultSingletonBeanRegistry -> protected void destroyBean(String beanName, @Nullable DisposableBean bean);1496837955;Destroy the given bean. Must destroy beans that depend on the given_bean before the bean itself. Should not throw any exceptions._@param beanName the name of the bean_@param bean the bean instance to destroy;protected void destroyBean(String beanName, @Nullable DisposableBean bean) {_		_		Set<String> dependencies = this.dependentBeanMap.remove(beanName)__		if (dependencies != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieved dependent beans for bean '" + beanName + "': " + dependencies)__			}_			for (String dependentBeanName : dependencies) {_				destroySingleton(dependentBeanName)__			}_		}__		_		if (bean != null) {_			try {_				bean.destroy()__			}_			catch (Throwable ex) {_				logger.error("Destroy method on bean with name '" + beanName + "' threw an exception", ex)__			}_		}__		_		Set<String> containedBeans = this.containedBeanMap.remove(beanName)__		if (containedBeans != null) {_			for (String containedBeanName : containedBeans) {_				destroySingleton(containedBeanName)__			}_		}__		_		synchronized (this.dependentBeanMap) {_			for (Iterator<Map.Entry<String, Set<String>>> it = this.dependentBeanMap.entrySet().iterator()_ it.hasNext()_) {_				Map.Entry<String, Set<String>> entry = it.next()__				Set<String> dependenciesToClean = entry.getValue()__				dependenciesToClean.remove(beanName)__				if (dependenciesToClean.isEmpty()) {_					it.remove()__				}_			}_		}__		_		this.dependenciesForBeanMap.remove(beanName)__	};destroy,the,given,bean,must,destroy,beans,that,depend,on,the,given,bean,before,the,bean,itself,should,not,throw,any,exceptions,param,bean,name,the,name,of,the,bean,param,bean,the,bean,instance,to,destroy;protected,void,destroy,bean,string,bean,name,nullable,disposable,bean,bean,set,string,dependencies,this,dependent,bean,map,remove,bean,name,if,dependencies,null,if,logger,is,debug,enabled,logger,debug,retrieved,dependent,beans,for,bean,bean,name,dependencies,for,string,dependent,bean,name,dependencies,destroy,singleton,dependent,bean,name,if,bean,null,try,bean,destroy,catch,throwable,ex,logger,error,destroy,method,on,bean,with,name,bean,name,threw,an,exception,ex,set,string,contained,beans,this,contained,bean,map,remove,bean,name,if,contained,beans,null,for,string,contained,bean,name,contained,beans,destroy,singleton,contained,bean,name,synchronized,this,dependent,bean,map,for,iterator,map,entry,string,set,string,it,this,dependent,bean,map,entry,set,iterator,it,has,next,map,entry,string,set,string,entry,it,next,set,string,dependencies,to,clean,entry,get,value,dependencies,to,clean,remove,bean,name,if,dependencies,to,clean,is,empty,it,remove,this,dependencies,for,bean,map,remove,bean,name
DefaultSingletonBeanRegistry -> protected void destroyBean(String beanName, @Nullable DisposableBean bean);1498780456;Destroy the given bean. Must destroy beans that depend on the given_bean before the bean itself. Should not throw any exceptions._@param beanName the name of the bean_@param bean the bean instance to destroy;protected void destroyBean(String beanName, @Nullable DisposableBean bean) {_		_		Set<String> dependencies = this.dependentBeanMap.remove(beanName)__		if (dependencies != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieved dependent beans for bean '" + beanName + "': " + dependencies)__			}_			for (String dependentBeanName : dependencies) {_				destroySingleton(dependentBeanName)__			}_		}__		_		if (bean != null) {_			try {_				bean.destroy()__			}_			catch (Throwable ex) {_				logger.error("Destroy method on bean with name '" + beanName + "' threw an exception", ex)__			}_		}__		_		Set<String> containedBeans = this.containedBeanMap.remove(beanName)__		if (containedBeans != null) {_			for (String containedBeanName : containedBeans) {_				destroySingleton(containedBeanName)__			}_		}__		_		synchronized (this.dependentBeanMap) {_			for (Iterator<Map.Entry<String, Set<String>>> it = this.dependentBeanMap.entrySet().iterator()_ it.hasNext()_) {_				Map.Entry<String, Set<String>> entry = it.next()__				Set<String> dependenciesToClean = entry.getValue()__				dependenciesToClean.remove(beanName)__				if (dependenciesToClean.isEmpty()) {_					it.remove()__				}_			}_		}__		_		this.dependenciesForBeanMap.remove(beanName)__	};destroy,the,given,bean,must,destroy,beans,that,depend,on,the,given,bean,before,the,bean,itself,should,not,throw,any,exceptions,param,bean,name,the,name,of,the,bean,param,bean,the,bean,instance,to,destroy;protected,void,destroy,bean,string,bean,name,nullable,disposable,bean,bean,set,string,dependencies,this,dependent,bean,map,remove,bean,name,if,dependencies,null,if,logger,is,debug,enabled,logger,debug,retrieved,dependent,beans,for,bean,bean,name,dependencies,for,string,dependent,bean,name,dependencies,destroy,singleton,dependent,bean,name,if,bean,null,try,bean,destroy,catch,throwable,ex,logger,error,destroy,method,on,bean,with,name,bean,name,threw,an,exception,ex,set,string,contained,beans,this,contained,bean,map,remove,bean,name,if,contained,beans,null,for,string,contained,bean,name,contained,beans,destroy,singleton,contained,bean,name,synchronized,this,dependent,bean,map,for,iterator,map,entry,string,set,string,it,this,dependent,bean,map,entry,set,iterator,it,has,next,map,entry,string,set,string,entry,it,next,set,string,dependencies,to,clean,entry,get,value,dependencies,to,clean,remove,bean,name,if,dependencies,to,clean,is,empty,it,remove,this,dependencies,for,bean,map,remove,bean,name
DefaultSingletonBeanRegistry -> protected void destroyBean(String beanName, @Nullable DisposableBean bean);1502974979;Destroy the given bean. Must destroy beans that depend on the given_bean before the bean itself. Should not throw any exceptions._@param beanName the name of the bean_@param bean the bean instance to destroy;protected void destroyBean(String beanName, @Nullable DisposableBean bean) {_		_		Set<String> dependencies = this.dependentBeanMap.remove(beanName)__		if (dependencies != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieved dependent beans for bean '" + beanName + "': " + dependencies)__			}_			for (String dependentBeanName : dependencies) {_				destroySingleton(dependentBeanName)__			}_		}__		_		if (bean != null) {_			try {_				bean.destroy()__			}_			catch (Throwable ex) {_				logger.error("Destroy method on bean with name '" + beanName + "' threw an exception", ex)__			}_		}__		_		Set<String> containedBeans = this.containedBeanMap.remove(beanName)__		if (containedBeans != null) {_			for (String containedBeanName : containedBeans) {_				destroySingleton(containedBeanName)__			}_		}__		_		synchronized (this.dependentBeanMap) {_			for (Iterator<Map.Entry<String, Set<String>>> it = this.dependentBeanMap.entrySet().iterator()_ it.hasNext()_) {_				Map.Entry<String, Set<String>> entry = it.next()__				Set<String> dependenciesToClean = entry.getValue()__				dependenciesToClean.remove(beanName)__				if (dependenciesToClean.isEmpty()) {_					it.remove()__				}_			}_		}__		_		this.dependenciesForBeanMap.remove(beanName)__	};destroy,the,given,bean,must,destroy,beans,that,depend,on,the,given,bean,before,the,bean,itself,should,not,throw,any,exceptions,param,bean,name,the,name,of,the,bean,param,bean,the,bean,instance,to,destroy;protected,void,destroy,bean,string,bean,name,nullable,disposable,bean,bean,set,string,dependencies,this,dependent,bean,map,remove,bean,name,if,dependencies,null,if,logger,is,debug,enabled,logger,debug,retrieved,dependent,beans,for,bean,bean,name,dependencies,for,string,dependent,bean,name,dependencies,destroy,singleton,dependent,bean,name,if,bean,null,try,bean,destroy,catch,throwable,ex,logger,error,destroy,method,on,bean,with,name,bean,name,threw,an,exception,ex,set,string,contained,beans,this,contained,bean,map,remove,bean,name,if,contained,beans,null,for,string,contained,bean,name,contained,beans,destroy,singleton,contained,bean,name,synchronized,this,dependent,bean,map,for,iterator,map,entry,string,set,string,it,this,dependent,bean,map,entry,set,iterator,it,has,next,map,entry,string,set,string,entry,it,next,set,string,dependencies,to,clean,entry,get,value,dependencies,to,clean,remove,bean,name,if,dependencies,to,clean,is,empty,it,remove,this,dependencies,for,bean,map,remove,bean,name
DefaultSingletonBeanRegistry -> protected void destroyBean(String beanName, @Nullable DisposableBean bean);1503007895;Destroy the given bean. Must destroy beans that depend on the given_bean before the bean itself. Should not throw any exceptions._@param beanName the name of the bean_@param bean the bean instance to destroy;protected void destroyBean(String beanName, @Nullable DisposableBean bean) {_		_		Set<String> dependencies = this.dependentBeanMap.remove(beanName)__		if (dependencies != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieved dependent beans for bean '" + beanName + "': " + dependencies)__			}_			for (String dependentBeanName : dependencies) {_				destroySingleton(dependentBeanName)__			}_		}__		_		if (bean != null) {_			try {_				bean.destroy()__			}_			catch (Throwable ex) {_				logger.error("Destroy method on bean with name '" + beanName + "' threw an exception", ex)__			}_		}__		_		Set<String> containedBeans = this.containedBeanMap.remove(beanName)__		if (containedBeans != null) {_			for (String containedBeanName : containedBeans) {_				destroySingleton(containedBeanName)__			}_		}__		_		synchronized (this.dependentBeanMap) {_			for (Iterator<Map.Entry<String, Set<String>>> it = this.dependentBeanMap.entrySet().iterator()_ it.hasNext()_) {_				Map.Entry<String, Set<String>> entry = it.next()__				Set<String> dependenciesToClean = entry.getValue()__				dependenciesToClean.remove(beanName)__				if (dependenciesToClean.isEmpty()) {_					it.remove()__				}_			}_		}__		_		this.dependenciesForBeanMap.remove(beanName)__	};destroy,the,given,bean,must,destroy,beans,that,depend,on,the,given,bean,before,the,bean,itself,should,not,throw,any,exceptions,param,bean,name,the,name,of,the,bean,param,bean,the,bean,instance,to,destroy;protected,void,destroy,bean,string,bean,name,nullable,disposable,bean,bean,set,string,dependencies,this,dependent,bean,map,remove,bean,name,if,dependencies,null,if,logger,is,debug,enabled,logger,debug,retrieved,dependent,beans,for,bean,bean,name,dependencies,for,string,dependent,bean,name,dependencies,destroy,singleton,dependent,bean,name,if,bean,null,try,bean,destroy,catch,throwable,ex,logger,error,destroy,method,on,bean,with,name,bean,name,threw,an,exception,ex,set,string,contained,beans,this,contained,bean,map,remove,bean,name,if,contained,beans,null,for,string,contained,bean,name,contained,beans,destroy,singleton,contained,bean,name,synchronized,this,dependent,bean,map,for,iterator,map,entry,string,set,string,it,this,dependent,bean,map,entry,set,iterator,it,has,next,map,entry,string,set,string,entry,it,next,set,string,dependencies,to,clean,entry,get,value,dependencies,to,clean,remove,bean,name,if,dependencies,to,clean,is,empty,it,remove,this,dependencies,for,bean,map,remove,bean,name
DefaultSingletonBeanRegistry -> protected void destroyBean(String beanName, @Nullable DisposableBean bean);1518810557;Destroy the given bean. Must destroy beans that depend on the given_bean before the bean itself. Should not throw any exceptions._@param beanName the name of the bean_@param bean the bean instance to destroy;protected void destroyBean(String beanName, @Nullable DisposableBean bean) {_		_		Set<String> dependencies = this.dependentBeanMap.remove(beanName)__		if (dependencies != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieved dependent beans for bean '" + beanName + "': " + dependencies)__			}_			for (String dependentBeanName : dependencies) {_				destroySingleton(dependentBeanName)__			}_		}__		_		if (bean != null) {_			try {_				bean.destroy()__			}_			catch (Throwable ex) {_				logger.error("Destroy method on bean with name '" + beanName + "' threw an exception", ex)__			}_		}__		_		Set<String> containedBeans = this.containedBeanMap.remove(beanName)__		if (containedBeans != null) {_			for (String containedBeanName : containedBeans) {_				destroySingleton(containedBeanName)__			}_		}__		_		synchronized (this.dependentBeanMap) {_			for (Iterator<Map.Entry<String, Set<String>>> it = this.dependentBeanMap.entrySet().iterator()_ it.hasNext()_) {_				Map.Entry<String, Set<String>> entry = it.next()__				Set<String> dependenciesToClean = entry.getValue()__				dependenciesToClean.remove(beanName)__				if (dependenciesToClean.isEmpty()) {_					it.remove()__				}_			}_		}__		_		this.dependenciesForBeanMap.remove(beanName)__	};destroy,the,given,bean,must,destroy,beans,that,depend,on,the,given,bean,before,the,bean,itself,should,not,throw,any,exceptions,param,bean,name,the,name,of,the,bean,param,bean,the,bean,instance,to,destroy;protected,void,destroy,bean,string,bean,name,nullable,disposable,bean,bean,set,string,dependencies,this,dependent,bean,map,remove,bean,name,if,dependencies,null,if,logger,is,debug,enabled,logger,debug,retrieved,dependent,beans,for,bean,bean,name,dependencies,for,string,dependent,bean,name,dependencies,destroy,singleton,dependent,bean,name,if,bean,null,try,bean,destroy,catch,throwable,ex,logger,error,destroy,method,on,bean,with,name,bean,name,threw,an,exception,ex,set,string,contained,beans,this,contained,bean,map,remove,bean,name,if,contained,beans,null,for,string,contained,bean,name,contained,beans,destroy,singleton,contained,bean,name,synchronized,this,dependent,bean,map,for,iterator,map,entry,string,set,string,it,this,dependent,bean,map,entry,set,iterator,it,has,next,map,entry,string,set,string,entry,it,next,set,string,dependencies,to,clean,entry,get,value,dependencies,to,clean,remove,bean,name,if,dependencies,to,clean,is,empty,it,remove,this,dependencies,for,bean,map,remove,bean,name
DefaultSingletonBeanRegistry -> protected void destroyBean(String beanName, @Nullable DisposableBean bean);1521822873;Destroy the given bean. Must destroy beans that depend on the given_bean before the bean itself. Should not throw any exceptions._@param beanName the name of the bean_@param bean the bean instance to destroy;protected void destroyBean(String beanName, @Nullable DisposableBean bean) {_		_		Set<String> dependencies = this.dependentBeanMap.remove(beanName)__		if (dependencies != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieved dependent beans for bean '" + beanName + "': " + dependencies)__			}_			for (String dependentBeanName : dependencies) {_				destroySingleton(dependentBeanName)__			}_		}__		_		if (bean != null) {_			try {_				bean.destroy()__			}_			catch (Throwable ex) {_				logger.error("Destroy method on bean with name '" + beanName + "' threw an exception", ex)__			}_		}__		_		Set<String> containedBeans = this.containedBeanMap.remove(beanName)__		if (containedBeans != null) {_			for (String containedBeanName : containedBeans) {_				destroySingleton(containedBeanName)__			}_		}__		_		synchronized (this.dependentBeanMap) {_			for (Iterator<Map.Entry<String, Set<String>>> it = this.dependentBeanMap.entrySet().iterator()_ it.hasNext()_) {_				Map.Entry<String, Set<String>> entry = it.next()__				Set<String> dependenciesToClean = entry.getValue()__				dependenciesToClean.remove(beanName)__				if (dependenciesToClean.isEmpty()) {_					it.remove()__				}_			}_		}__		_		this.dependenciesForBeanMap.remove(beanName)__	};destroy,the,given,bean,must,destroy,beans,that,depend,on,the,given,bean,before,the,bean,itself,should,not,throw,any,exceptions,param,bean,name,the,name,of,the,bean,param,bean,the,bean,instance,to,destroy;protected,void,destroy,bean,string,bean,name,nullable,disposable,bean,bean,set,string,dependencies,this,dependent,bean,map,remove,bean,name,if,dependencies,null,if,logger,is,debug,enabled,logger,debug,retrieved,dependent,beans,for,bean,bean,name,dependencies,for,string,dependent,bean,name,dependencies,destroy,singleton,dependent,bean,name,if,bean,null,try,bean,destroy,catch,throwable,ex,logger,error,destroy,method,on,bean,with,name,bean,name,threw,an,exception,ex,set,string,contained,beans,this,contained,bean,map,remove,bean,name,if,contained,beans,null,for,string,contained,bean,name,contained,beans,destroy,singleton,contained,bean,name,synchronized,this,dependent,bean,map,for,iterator,map,entry,string,set,string,it,this,dependent,bean,map,entry,set,iterator,it,has,next,map,entry,string,set,string,entry,it,next,set,string,dependencies,to,clean,entry,get,value,dependencies,to,clean,remove,bean,name,if,dependencies,to,clean,is,empty,it,remove,this,dependencies,for,bean,map,remove,bean,name
DefaultSingletonBeanRegistry -> protected void destroyBean(String beanName, @Nullable DisposableBean bean);1521905451;Destroy the given bean. Must destroy beans that depend on the given_bean before the bean itself. Should not throw any exceptions._@param beanName the name of the bean_@param bean the bean instance to destroy;protected void destroyBean(String beanName, @Nullable DisposableBean bean) {_		_		Set<String> dependencies__		synchronized (this.dependentBeanMap) {_			_			dependencies = this.dependentBeanMap.remove(beanName)__		}_		if (dependencies != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieved dependent beans for bean '" + beanName + "': " + dependencies)__			}_			for (String dependentBeanName : dependencies) {_				destroySingleton(dependentBeanName)__			}_		}__		_		if (bean != null) {_			try {_				bean.destroy()__			}_			catch (Throwable ex) {_				logger.error("Destroy method on bean with name '" + beanName + "' threw an exception", ex)__			}_		}__		_		Set<String> containedBeans__		synchronized (this.containedBeanMap) {_			_			containedBeans = this.containedBeanMap.remove(beanName)__		}_		if (containedBeans != null) {_			for (String containedBeanName : containedBeans) {_				destroySingleton(containedBeanName)__			}_		}__		_		synchronized (this.dependentBeanMap) {_			for (Iterator<Map.Entry<String, Set<String>>> it = this.dependentBeanMap.entrySet().iterator()_ it.hasNext()_) {_				Map.Entry<String, Set<String>> entry = it.next()__				Set<String> dependenciesToClean = entry.getValue()__				dependenciesToClean.remove(beanName)__				if (dependenciesToClean.isEmpty()) {_					it.remove()__				}_			}_		}__		_		this.dependenciesForBeanMap.remove(beanName)__	};destroy,the,given,bean,must,destroy,beans,that,depend,on,the,given,bean,before,the,bean,itself,should,not,throw,any,exceptions,param,bean,name,the,name,of,the,bean,param,bean,the,bean,instance,to,destroy;protected,void,destroy,bean,string,bean,name,nullable,disposable,bean,bean,set,string,dependencies,synchronized,this,dependent,bean,map,dependencies,this,dependent,bean,map,remove,bean,name,if,dependencies,null,if,logger,is,debug,enabled,logger,debug,retrieved,dependent,beans,for,bean,bean,name,dependencies,for,string,dependent,bean,name,dependencies,destroy,singleton,dependent,bean,name,if,bean,null,try,bean,destroy,catch,throwable,ex,logger,error,destroy,method,on,bean,with,name,bean,name,threw,an,exception,ex,set,string,contained,beans,synchronized,this,contained,bean,map,contained,beans,this,contained,bean,map,remove,bean,name,if,contained,beans,null,for,string,contained,bean,name,contained,beans,destroy,singleton,contained,bean,name,synchronized,this,dependent,bean,map,for,iterator,map,entry,string,set,string,it,this,dependent,bean,map,entry,set,iterator,it,has,next,map,entry,string,set,string,entry,it,next,set,string,dependencies,to,clean,entry,get,value,dependencies,to,clean,remove,bean,name,if,dependencies,to,clean,is,empty,it,remove,this,dependencies,for,bean,map,remove,bean,name
DefaultSingletonBeanRegistry -> protected void destroyBean(String beanName, @Nullable DisposableBean bean);1527623493;Destroy the given bean. Must destroy beans that depend on the given_bean before the bean itself. Should not throw any exceptions._@param beanName the name of the bean_@param bean the bean instance to destroy;protected void destroyBean(String beanName, @Nullable DisposableBean bean) {_		_		Set<String> dependencies__		synchronized (this.dependentBeanMap) {_			_			dependencies = this.dependentBeanMap.remove(beanName)__		}_		if (dependencies != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieved dependent beans for bean '" + beanName + "': " + dependencies)__			}_			for (String dependentBeanName : dependencies) {_				destroySingleton(dependentBeanName)__			}_		}__		_		if (bean != null) {_			try {_				bean.destroy()__			}_			catch (Throwable ex) {_				logger.error("Destroy method on bean with name '" + beanName + "' threw an exception", ex)__			}_		}__		_		Set<String> containedBeans__		synchronized (this.containedBeanMap) {_			_			containedBeans = this.containedBeanMap.remove(beanName)__		}_		if (containedBeans != null) {_			for (String containedBeanName : containedBeans) {_				destroySingleton(containedBeanName)__			}_		}__		_		synchronized (this.dependentBeanMap) {_			for (Iterator<Map.Entry<String, Set<String>>> it = this.dependentBeanMap.entrySet().iterator()_ it.hasNext()_) {_				Map.Entry<String, Set<String>> entry = it.next()__				Set<String> dependenciesToClean = entry.getValue()__				dependenciesToClean.remove(beanName)__				if (dependenciesToClean.isEmpty()) {_					it.remove()__				}_			}_		}__		_		this.dependenciesForBeanMap.remove(beanName)__	};destroy,the,given,bean,must,destroy,beans,that,depend,on,the,given,bean,before,the,bean,itself,should,not,throw,any,exceptions,param,bean,name,the,name,of,the,bean,param,bean,the,bean,instance,to,destroy;protected,void,destroy,bean,string,bean,name,nullable,disposable,bean,bean,set,string,dependencies,synchronized,this,dependent,bean,map,dependencies,this,dependent,bean,map,remove,bean,name,if,dependencies,null,if,logger,is,debug,enabled,logger,debug,retrieved,dependent,beans,for,bean,bean,name,dependencies,for,string,dependent,bean,name,dependencies,destroy,singleton,dependent,bean,name,if,bean,null,try,bean,destroy,catch,throwable,ex,logger,error,destroy,method,on,bean,with,name,bean,name,threw,an,exception,ex,set,string,contained,beans,synchronized,this,contained,bean,map,contained,beans,this,contained,bean,map,remove,bean,name,if,contained,beans,null,for,string,contained,bean,name,contained,beans,destroy,singleton,contained,bean,name,synchronized,this,dependent,bean,map,for,iterator,map,entry,string,set,string,it,this,dependent,bean,map,entry,set,iterator,it,has,next,map,entry,string,set,string,entry,it,next,set,string,dependencies,to,clean,entry,get,value,dependencies,to,clean,remove,bean,name,if,dependencies,to,clean,is,empty,it,remove,this,dependencies,for,bean,map,remove,bean,name
DefaultSingletonBeanRegistry -> protected void destroyBean(String beanName, @Nullable DisposableBean bean);1530174524;Destroy the given bean. Must destroy beans that depend on the given_bean before the bean itself. Should not throw any exceptions._@param beanName the name of the bean_@param bean the bean instance to destroy;protected void destroyBean(String beanName, @Nullable DisposableBean bean) {_		_		Set<String> dependencies__		synchronized (this.dependentBeanMap) {_			_			dependencies = this.dependentBeanMap.remove(beanName)__		}_		if (dependencies != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieved dependent beans for bean '" + beanName + "': " + dependencies)__			}_			for (String dependentBeanName : dependencies) {_				destroySingleton(dependentBeanName)__			}_		}__		_		if (bean != null) {_			try {_				bean.destroy()__			}_			catch (Throwable ex) {_				logger.error("Destroy method on bean with name '" + beanName + "' threw an exception", ex)__			}_		}__		_		Set<String> containedBeans__		synchronized (this.containedBeanMap) {_			_			containedBeans = this.containedBeanMap.remove(beanName)__		}_		if (containedBeans != null) {_			for (String containedBeanName : containedBeans) {_				destroySingleton(containedBeanName)__			}_		}__		_		synchronized (this.dependentBeanMap) {_			for (Iterator<Map.Entry<String, Set<String>>> it = this.dependentBeanMap.entrySet().iterator()_ it.hasNext()_) {_				Map.Entry<String, Set<String>> entry = it.next()__				Set<String> dependenciesToClean = entry.getValue()__				dependenciesToClean.remove(beanName)__				if (dependenciesToClean.isEmpty()) {_					it.remove()__				}_			}_		}__		_		this.dependenciesForBeanMap.remove(beanName)__	};destroy,the,given,bean,must,destroy,beans,that,depend,on,the,given,bean,before,the,bean,itself,should,not,throw,any,exceptions,param,bean,name,the,name,of,the,bean,param,bean,the,bean,instance,to,destroy;protected,void,destroy,bean,string,bean,name,nullable,disposable,bean,bean,set,string,dependencies,synchronized,this,dependent,bean,map,dependencies,this,dependent,bean,map,remove,bean,name,if,dependencies,null,if,logger,is,debug,enabled,logger,debug,retrieved,dependent,beans,for,bean,bean,name,dependencies,for,string,dependent,bean,name,dependencies,destroy,singleton,dependent,bean,name,if,bean,null,try,bean,destroy,catch,throwable,ex,logger,error,destroy,method,on,bean,with,name,bean,name,threw,an,exception,ex,set,string,contained,beans,synchronized,this,contained,bean,map,contained,beans,this,contained,bean,map,remove,bean,name,if,contained,beans,null,for,string,contained,bean,name,contained,beans,destroy,singleton,contained,bean,name,synchronized,this,dependent,bean,map,for,iterator,map,entry,string,set,string,it,this,dependent,bean,map,entry,set,iterator,it,has,next,map,entry,string,set,string,entry,it,next,set,string,dependencies,to,clean,entry,get,value,dependencies,to,clean,remove,bean,name,if,dependencies,to,clean,is,empty,it,remove,this,dependencies,for,bean,map,remove,bean,name
DefaultSingletonBeanRegistry -> protected void destroyBean(String beanName, @Nullable DisposableBean bean);1532091916;Destroy the given bean. Must destroy beans that depend on the given_bean before the bean itself. Should not throw any exceptions._@param beanName the name of the bean_@param bean the bean instance to destroy;protected void destroyBean(String beanName, @Nullable DisposableBean bean) {_		_		Set<String> dependencies__		synchronized (this.dependentBeanMap) {_			_			dependencies = this.dependentBeanMap.remove(beanName)__		}_		if (dependencies != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieved dependent beans for bean '" + beanName + "': " + dependencies)__			}_			for (String dependentBeanName : dependencies) {_				destroySingleton(dependentBeanName)__			}_		}__		_		if (bean != null) {_			try {_				bean.destroy()__			}_			catch (Throwable ex) {_				logger.warn("Destroy method on bean with name '" + beanName + "' threw an exception", ex)__			}_		}__		_		Set<String> containedBeans__		synchronized (this.containedBeanMap) {_			_			containedBeans = this.containedBeanMap.remove(beanName)__		}_		if (containedBeans != null) {_			for (String containedBeanName : containedBeans) {_				destroySingleton(containedBeanName)__			}_		}__		_		synchronized (this.dependentBeanMap) {_			for (Iterator<Map.Entry<String, Set<String>>> it = this.dependentBeanMap.entrySet().iterator()_ it.hasNext()_) {_				Map.Entry<String, Set<String>> entry = it.next()__				Set<String> dependenciesToClean = entry.getValue()__				dependenciesToClean.remove(beanName)__				if (dependenciesToClean.isEmpty()) {_					it.remove()__				}_			}_		}__		_		this.dependenciesForBeanMap.remove(beanName)__	};destroy,the,given,bean,must,destroy,beans,that,depend,on,the,given,bean,before,the,bean,itself,should,not,throw,any,exceptions,param,bean,name,the,name,of,the,bean,param,bean,the,bean,instance,to,destroy;protected,void,destroy,bean,string,bean,name,nullable,disposable,bean,bean,set,string,dependencies,synchronized,this,dependent,bean,map,dependencies,this,dependent,bean,map,remove,bean,name,if,dependencies,null,if,logger,is,debug,enabled,logger,debug,retrieved,dependent,beans,for,bean,bean,name,dependencies,for,string,dependent,bean,name,dependencies,destroy,singleton,dependent,bean,name,if,bean,null,try,bean,destroy,catch,throwable,ex,logger,warn,destroy,method,on,bean,with,name,bean,name,threw,an,exception,ex,set,string,contained,beans,synchronized,this,contained,bean,map,contained,beans,this,contained,bean,map,remove,bean,name,if,contained,beans,null,for,string,contained,bean,name,contained,beans,destroy,singleton,contained,bean,name,synchronized,this,dependent,bean,map,for,iterator,map,entry,string,set,string,it,this,dependent,bean,map,entry,set,iterator,it,has,next,map,entry,string,set,string,entry,it,next,set,string,dependencies,to,clean,entry,get,value,dependencies,to,clean,remove,bean,name,if,dependencies,to,clean,is,empty,it,remove,this,dependencies,for,bean,map,remove,bean,name
DefaultSingletonBeanRegistry -> protected void destroyBean(String beanName, @Nullable DisposableBean bean);1532706365;Destroy the given bean. Must destroy beans that depend on the given_bean before the bean itself. Should not throw any exceptions._@param beanName the name of the bean_@param bean the bean instance to destroy;protected void destroyBean(String beanName, @Nullable DisposableBean bean) {_		_		Set<String> dependencies__		synchronized (this.dependentBeanMap) {_			_			dependencies = this.dependentBeanMap.remove(beanName)__		}_		if (dependencies != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Retrieved dependent beans for bean '" + beanName + "': " + dependencies)__			}_			for (String dependentBeanName : dependencies) {_				destroySingleton(dependentBeanName)__			}_		}__		_		if (bean != null) {_			try {_				bean.destroy()__			}_			catch (Throwable ex) {_				if (logger.isInfoEnabled()) {_					logger.info("Destroy method on bean with name '" + beanName + "' threw an exception", ex)__				}_			}_		}__		_		Set<String> containedBeans__		synchronized (this.containedBeanMap) {_			_			containedBeans = this.containedBeanMap.remove(beanName)__		}_		if (containedBeans != null) {_			for (String containedBeanName : containedBeans) {_				destroySingleton(containedBeanName)__			}_		}__		_		synchronized (this.dependentBeanMap) {_			for (Iterator<Map.Entry<String, Set<String>>> it = this.dependentBeanMap.entrySet().iterator()_ it.hasNext()_) {_				Map.Entry<String, Set<String>> entry = it.next()__				Set<String> dependenciesToClean = entry.getValue()__				dependenciesToClean.remove(beanName)__				if (dependenciesToClean.isEmpty()) {_					it.remove()__				}_			}_		}__		_		this.dependenciesForBeanMap.remove(beanName)__	};destroy,the,given,bean,must,destroy,beans,that,depend,on,the,given,bean,before,the,bean,itself,should,not,throw,any,exceptions,param,bean,name,the,name,of,the,bean,param,bean,the,bean,instance,to,destroy;protected,void,destroy,bean,string,bean,name,nullable,disposable,bean,bean,set,string,dependencies,synchronized,this,dependent,bean,map,dependencies,this,dependent,bean,map,remove,bean,name,if,dependencies,null,if,logger,is,trace,enabled,logger,trace,retrieved,dependent,beans,for,bean,bean,name,dependencies,for,string,dependent,bean,name,dependencies,destroy,singleton,dependent,bean,name,if,bean,null,try,bean,destroy,catch,throwable,ex,if,logger,is,info,enabled,logger,info,destroy,method,on,bean,with,name,bean,name,threw,an,exception,ex,set,string,contained,beans,synchronized,this,contained,bean,map,contained,beans,this,contained,bean,map,remove,bean,name,if,contained,beans,null,for,string,contained,bean,name,contained,beans,destroy,singleton,contained,bean,name,synchronized,this,dependent,bean,map,for,iterator,map,entry,string,set,string,it,this,dependent,bean,map,entry,set,iterator,it,has,next,map,entry,string,set,string,entry,it,next,set,string,dependencies,to,clean,entry,get,value,dependencies,to,clean,remove,bean,name,if,dependencies,to,clean,is,empty,it,remove,this,dependencies,for,bean,map,remove,bean,name
DefaultSingletonBeanRegistry -> public void registerDependentBean(String beanName, String dependentBeanName);1328020251;Register a dependent bean for the given bean,_to be destroyed before the given bean is destroyed._@param beanName the name of the bean_@param dependentBeanName the name of the dependent bean;public void registerDependentBean(String beanName, String dependentBeanName) {_		String canonicalName = canonicalName(beanName)__		synchronized (this.dependentBeanMap) {_			Set<String> dependentBeans = this.dependentBeanMap.get(canonicalName)__			if (dependentBeans == null) {_				dependentBeans = new LinkedHashSet<String>(8)__				this.dependentBeanMap.put(canonicalName, dependentBeans)__			}_			dependentBeans.add(dependentBeanName)__		}_		synchronized (this.dependenciesForBeanMap) {_			Set<String> dependenciesForBean = this.dependenciesForBeanMap.get(dependentBeanName)__			if (dependenciesForBean == null) {_				dependenciesForBean = new LinkedHashSet<String>(8)__				this.dependenciesForBeanMap.put(dependentBeanName, dependenciesForBean)__			}_			dependenciesForBean.add(canonicalName)__		}_	};register,a,dependent,bean,for,the,given,bean,to,be,destroyed,before,the,given,bean,is,destroyed,param,bean,name,the,name,of,the,bean,param,dependent,bean,name,the,name,of,the,dependent,bean;public,void,register,dependent,bean,string,bean,name,string,dependent,bean,name,string,canonical,name,canonical,name,bean,name,synchronized,this,dependent,bean,map,set,string,dependent,beans,this,dependent,bean,map,get,canonical,name,if,dependent,beans,null,dependent,beans,new,linked,hash,set,string,8,this,dependent,bean,map,put,canonical,name,dependent,beans,dependent,beans,add,dependent,bean,name,synchronized,this,dependencies,for,bean,map,set,string,dependencies,for,bean,this,dependencies,for,bean,map,get,dependent,bean,name,if,dependencies,for,bean,null,dependencies,for,bean,new,linked,hash,set,string,8,this,dependencies,for,bean,map,put,dependent,bean,name,dependencies,for,bean,dependencies,for,bean,add,canonical,name
DefaultSingletonBeanRegistry -> public void registerDependentBean(String beanName, String dependentBeanName);1349872135;Register a dependent bean for the given bean,_to be destroyed before the given bean is destroyed._@param beanName the name of the bean_@param dependentBeanName the name of the dependent bean;public void registerDependentBean(String beanName, String dependentBeanName) {_		String canonicalName = canonicalName(beanName)__		synchronized (this.dependentBeanMap) {_			Set<String> dependentBeans = this.dependentBeanMap.get(canonicalName)__			if (dependentBeans == null) {_				dependentBeans = new LinkedHashSet<String>(8)__				this.dependentBeanMap.put(canonicalName, dependentBeans)__			}_			dependentBeans.add(dependentBeanName)__		}_		synchronized (this.dependenciesForBeanMap) {_			Set<String> dependenciesForBean = this.dependenciesForBeanMap.get(dependentBeanName)__			if (dependenciesForBean == null) {_				dependenciesForBean = new LinkedHashSet<String>(8)__				this.dependenciesForBeanMap.put(dependentBeanName, dependenciesForBean)__			}_			dependenciesForBean.add(canonicalName)__		}_	};register,a,dependent,bean,for,the,given,bean,to,be,destroyed,before,the,given,bean,is,destroyed,param,bean,name,the,name,of,the,bean,param,dependent,bean,name,the,name,of,the,dependent,bean;public,void,register,dependent,bean,string,bean,name,string,dependent,bean,name,string,canonical,name,canonical,name,bean,name,synchronized,this,dependent,bean,map,set,string,dependent,beans,this,dependent,bean,map,get,canonical,name,if,dependent,beans,null,dependent,beans,new,linked,hash,set,string,8,this,dependent,bean,map,put,canonical,name,dependent,beans,dependent,beans,add,dependent,bean,name,synchronized,this,dependencies,for,bean,map,set,string,dependencies,for,bean,this,dependencies,for,bean,map,get,dependent,bean,name,if,dependencies,for,bean,null,dependencies,for,bean,new,linked,hash,set,string,8,this,dependencies,for,bean,map,put,dependent,bean,name,dependencies,for,bean,dependencies,for,bean,add,canonical,name
DefaultSingletonBeanRegistry -> public void registerDependentBean(String beanName, String dependentBeanName);1352412938;Register a dependent bean for the given bean,_to be destroyed before the given bean is destroyed._@param beanName the name of the bean_@param dependentBeanName the name of the dependent bean;public void registerDependentBean(String beanName, String dependentBeanName) {_		String canonicalName = canonicalName(beanName)__		synchronized (this.dependentBeanMap) {_			Set<String> dependentBeans = this.dependentBeanMap.get(canonicalName)__			if (dependentBeans == null) {_				dependentBeans = new LinkedHashSet<String>(8)__				this.dependentBeanMap.put(canonicalName, dependentBeans)__			}_			dependentBeans.add(dependentBeanName)__		}_		synchronized (this.dependenciesForBeanMap) {_			Set<String> dependenciesForBean = this.dependenciesForBeanMap.get(dependentBeanName)__			if (dependenciesForBean == null) {_				dependenciesForBean = new LinkedHashSet<String>(8)__				this.dependenciesForBeanMap.put(dependentBeanName, dependenciesForBean)__			}_			dependenciesForBean.add(canonicalName)__		}_	};register,a,dependent,bean,for,the,given,bean,to,be,destroyed,before,the,given,bean,is,destroyed,param,bean,name,the,name,of,the,bean,param,dependent,bean,name,the,name,of,the,dependent,bean;public,void,register,dependent,bean,string,bean,name,string,dependent,bean,name,string,canonical,name,canonical,name,bean,name,synchronized,this,dependent,bean,map,set,string,dependent,beans,this,dependent,bean,map,get,canonical,name,if,dependent,beans,null,dependent,beans,new,linked,hash,set,string,8,this,dependent,bean,map,put,canonical,name,dependent,beans,dependent,beans,add,dependent,bean,name,synchronized,this,dependencies,for,bean,map,set,string,dependencies,for,bean,this,dependencies,for,bean,map,get,dependent,bean,name,if,dependencies,for,bean,null,dependencies,for,bean,new,linked,hash,set,string,8,this,dependencies,for,bean,map,put,dependent,bean,name,dependencies,for,bean,dependencies,for,bean,add,canonical,name
DefaultSingletonBeanRegistry -> public void registerDependentBean(String beanName, String dependentBeanName);1352418897;Register a dependent bean for the given bean,_to be destroyed before the given bean is destroyed._@param beanName the name of the bean_@param dependentBeanName the name of the dependent bean;public void registerDependentBean(String beanName, String dependentBeanName) {_		String canonicalName = canonicalName(beanName)__		synchronized (this.dependentBeanMap) {_			Set<String> dependentBeans = this.dependentBeanMap.get(canonicalName)__			if (dependentBeans == null) {_				dependentBeans = new LinkedHashSet<String>(8)__				this.dependentBeanMap.put(canonicalName, dependentBeans)__			}_			dependentBeans.add(dependentBeanName)__		}_		synchronized (this.dependenciesForBeanMap) {_			Set<String> dependenciesForBean = this.dependenciesForBeanMap.get(dependentBeanName)__			if (dependenciesForBean == null) {_				dependenciesForBean = new LinkedHashSet<String>(8)__				this.dependenciesForBeanMap.put(dependentBeanName, dependenciesForBean)__			}_			dependenciesForBean.add(canonicalName)__		}_	};register,a,dependent,bean,for,the,given,bean,to,be,destroyed,before,the,given,bean,is,destroyed,param,bean,name,the,name,of,the,bean,param,dependent,bean,name,the,name,of,the,dependent,bean;public,void,register,dependent,bean,string,bean,name,string,dependent,bean,name,string,canonical,name,canonical,name,bean,name,synchronized,this,dependent,bean,map,set,string,dependent,beans,this,dependent,bean,map,get,canonical,name,if,dependent,beans,null,dependent,beans,new,linked,hash,set,string,8,this,dependent,bean,map,put,canonical,name,dependent,beans,dependent,beans,add,dependent,bean,name,synchronized,this,dependencies,for,bean,map,set,string,dependencies,for,bean,this,dependencies,for,bean,map,get,dependent,bean,name,if,dependencies,for,bean,null,dependencies,for,bean,new,linked,hash,set,string,8,this,dependencies,for,bean,map,put,dependent,bean,name,dependencies,for,bean,dependencies,for,bean,add,canonical,name
DefaultSingletonBeanRegistry -> public void registerDependentBean(String beanName, String dependentBeanName);1353882772;Register a dependent bean for the given bean,_to be destroyed before the given bean is destroyed._@param beanName the name of the bean_@param dependentBeanName the name of the dependent bean;public void registerDependentBean(String beanName, String dependentBeanName) {_		String canonicalName = canonicalName(beanName)__		synchronized (this.dependentBeanMap) {_			Set<String> dependentBeans = this.dependentBeanMap.get(canonicalName)__			if (dependentBeans == null) {_				dependentBeans = new LinkedHashSet<String>(8)__				this.dependentBeanMap.put(canonicalName, dependentBeans)__			}_			dependentBeans.add(dependentBeanName)__		}_		synchronized (this.dependenciesForBeanMap) {_			Set<String> dependenciesForBean = this.dependenciesForBeanMap.get(dependentBeanName)__			if (dependenciesForBean == null) {_				dependenciesForBean = new LinkedHashSet<String>(8)__				this.dependenciesForBeanMap.put(dependentBeanName, dependenciesForBean)__			}_			dependenciesForBean.add(canonicalName)__		}_	};register,a,dependent,bean,for,the,given,bean,to,be,destroyed,before,the,given,bean,is,destroyed,param,bean,name,the,name,of,the,bean,param,dependent,bean,name,the,name,of,the,dependent,bean;public,void,register,dependent,bean,string,bean,name,string,dependent,bean,name,string,canonical,name,canonical,name,bean,name,synchronized,this,dependent,bean,map,set,string,dependent,beans,this,dependent,bean,map,get,canonical,name,if,dependent,beans,null,dependent,beans,new,linked,hash,set,string,8,this,dependent,bean,map,put,canonical,name,dependent,beans,dependent,beans,add,dependent,bean,name,synchronized,this,dependencies,for,bean,map,set,string,dependencies,for,bean,this,dependencies,for,bean,map,get,dependent,bean,name,if,dependencies,for,bean,null,dependencies,for,bean,new,linked,hash,set,string,8,this,dependencies,for,bean,map,put,dependent,bean,name,dependencies,for,bean,dependencies,for,bean,add,canonical,name
DefaultSingletonBeanRegistry -> public void registerDependentBean(String beanName, String dependentBeanName);1355352386;Register a dependent bean for the given bean,_to be destroyed before the given bean is destroyed._@param beanName the name of the bean_@param dependentBeanName the name of the dependent bean;public void registerDependentBean(String beanName, String dependentBeanName) {_		String canonicalName = canonicalName(beanName)__		synchronized (this.dependentBeanMap) {_			Set<String> dependentBeans = this.dependentBeanMap.get(canonicalName)__			if (dependentBeans == null) {_				dependentBeans = new LinkedHashSet<String>(8)__				this.dependentBeanMap.put(canonicalName, dependentBeans)__			}_			dependentBeans.add(dependentBeanName)__		}_		synchronized (this.dependenciesForBeanMap) {_			Set<String> dependenciesForBean = this.dependenciesForBeanMap.get(dependentBeanName)__			if (dependenciesForBean == null) {_				dependenciesForBean = new LinkedHashSet<String>(8)__				this.dependenciesForBeanMap.put(dependentBeanName, dependenciesForBean)__			}_			dependenciesForBean.add(canonicalName)__		}_	};register,a,dependent,bean,for,the,given,bean,to,be,destroyed,before,the,given,bean,is,destroyed,param,bean,name,the,name,of,the,bean,param,dependent,bean,name,the,name,of,the,dependent,bean;public,void,register,dependent,bean,string,bean,name,string,dependent,bean,name,string,canonical,name,canonical,name,bean,name,synchronized,this,dependent,bean,map,set,string,dependent,beans,this,dependent,bean,map,get,canonical,name,if,dependent,beans,null,dependent,beans,new,linked,hash,set,string,8,this,dependent,bean,map,put,canonical,name,dependent,beans,dependent,beans,add,dependent,bean,name,synchronized,this,dependencies,for,bean,map,set,string,dependencies,for,bean,this,dependencies,for,bean,map,get,dependent,bean,name,if,dependencies,for,bean,null,dependencies,for,bean,new,linked,hash,set,string,8,this,dependencies,for,bean,map,put,dependent,bean,name,dependencies,for,bean,dependencies,for,bean,add,canonical,name
DefaultSingletonBeanRegistry -> public void registerDependentBean(String beanName, String dependentBeanName);1356735495;Register a dependent bean for the given bean,_to be destroyed before the given bean is destroyed._@param beanName the name of the bean_@param dependentBeanName the name of the dependent bean;public void registerDependentBean(String beanName, String dependentBeanName) {_		String canonicalName = canonicalName(beanName)__		synchronized (this.dependentBeanMap) {_			Set<String> dependentBeans = this.dependentBeanMap.get(canonicalName)__			if (dependentBeans == null) {_				dependentBeans = new LinkedHashSet<String>(8)__				this.dependentBeanMap.put(canonicalName, dependentBeans)__			}_			dependentBeans.add(dependentBeanName)__		}_		synchronized (this.dependenciesForBeanMap) {_			Set<String> dependenciesForBean = this.dependenciesForBeanMap.get(dependentBeanName)__			if (dependenciesForBean == null) {_				dependenciesForBean = new LinkedHashSet<String>(8)__				this.dependenciesForBeanMap.put(dependentBeanName, dependenciesForBean)__			}_			dependenciesForBean.add(canonicalName)__		}_	};register,a,dependent,bean,for,the,given,bean,to,be,destroyed,before,the,given,bean,is,destroyed,param,bean,name,the,name,of,the,bean,param,dependent,bean,name,the,name,of,the,dependent,bean;public,void,register,dependent,bean,string,bean,name,string,dependent,bean,name,string,canonical,name,canonical,name,bean,name,synchronized,this,dependent,bean,map,set,string,dependent,beans,this,dependent,bean,map,get,canonical,name,if,dependent,beans,null,dependent,beans,new,linked,hash,set,string,8,this,dependent,bean,map,put,canonical,name,dependent,beans,dependent,beans,add,dependent,bean,name,synchronized,this,dependencies,for,bean,map,set,string,dependencies,for,bean,this,dependencies,for,bean,map,get,dependent,bean,name,if,dependencies,for,bean,null,dependencies,for,bean,new,linked,hash,set,string,8,this,dependencies,for,bean,map,put,dependent,bean,name,dependencies,for,bean,dependencies,for,bean,add,canonical,name
DefaultSingletonBeanRegistry -> public void registerDependentBean(String beanName, String dependentBeanName);1357119239;Register a dependent bean for the given bean,_to be destroyed before the given bean is destroyed._@param beanName the name of the bean_@param dependentBeanName the name of the dependent bean;public void registerDependentBean(String beanName, String dependentBeanName) {_		String canonicalName = canonicalName(beanName)__		synchronized (this.dependentBeanMap) {_			Set<String> dependentBeans = this.dependentBeanMap.get(canonicalName)__			if (dependentBeans == null) {_				dependentBeans = new LinkedHashSet<String>(8)__				this.dependentBeanMap.put(canonicalName, dependentBeans)__			}_			dependentBeans.add(dependentBeanName)__		}_		synchronized (this.dependenciesForBeanMap) {_			Set<String> dependenciesForBean = this.dependenciesForBeanMap.get(dependentBeanName)__			if (dependenciesForBean == null) {_				dependenciesForBean = new LinkedHashSet<String>(8)__				this.dependenciesForBeanMap.put(dependentBeanName, dependenciesForBean)__			}_			dependenciesForBean.add(canonicalName)__		}_	};register,a,dependent,bean,for,the,given,bean,to,be,destroyed,before,the,given,bean,is,destroyed,param,bean,name,the,name,of,the,bean,param,dependent,bean,name,the,name,of,the,dependent,bean;public,void,register,dependent,bean,string,bean,name,string,dependent,bean,name,string,canonical,name,canonical,name,bean,name,synchronized,this,dependent,bean,map,set,string,dependent,beans,this,dependent,bean,map,get,canonical,name,if,dependent,beans,null,dependent,beans,new,linked,hash,set,string,8,this,dependent,bean,map,put,canonical,name,dependent,beans,dependent,beans,add,dependent,bean,name,synchronized,this,dependencies,for,bean,map,set,string,dependencies,for,bean,this,dependencies,for,bean,map,get,dependent,bean,name,if,dependencies,for,bean,null,dependencies,for,bean,new,linked,hash,set,string,8,this,dependencies,for,bean,map,put,dependent,bean,name,dependencies,for,bean,dependencies,for,bean,add,canonical,name
DefaultSingletonBeanRegistry -> public void registerDependentBean(String beanName, String dependentBeanName);1364505266;Register a dependent bean for the given bean,_to be destroyed before the given bean is destroyed._@param beanName the name of the bean_@param dependentBeanName the name of the dependent bean;public void registerDependentBean(String beanName, String dependentBeanName) {_		String canonicalName = canonicalName(beanName)__		synchronized (this.dependentBeanMap) {_			Set<String> dependentBeans = this.dependentBeanMap.get(canonicalName)__			if (dependentBeans == null) {_				dependentBeans = new LinkedHashSet<String>(8)__				this.dependentBeanMap.put(canonicalName, dependentBeans)__			}_			dependentBeans.add(dependentBeanName)__		}_		synchronized (this.dependenciesForBeanMap) {_			Set<String> dependenciesForBean = this.dependenciesForBeanMap.get(dependentBeanName)__			if (dependenciesForBean == null) {_				dependenciesForBean = new LinkedHashSet<String>(8)__				this.dependenciesForBeanMap.put(dependentBeanName, dependenciesForBean)__			}_			dependenciesForBean.add(canonicalName)__		}_	};register,a,dependent,bean,for,the,given,bean,to,be,destroyed,before,the,given,bean,is,destroyed,param,bean,name,the,name,of,the,bean,param,dependent,bean,name,the,name,of,the,dependent,bean;public,void,register,dependent,bean,string,bean,name,string,dependent,bean,name,string,canonical,name,canonical,name,bean,name,synchronized,this,dependent,bean,map,set,string,dependent,beans,this,dependent,bean,map,get,canonical,name,if,dependent,beans,null,dependent,beans,new,linked,hash,set,string,8,this,dependent,bean,map,put,canonical,name,dependent,beans,dependent,beans,add,dependent,bean,name,synchronized,this,dependencies,for,bean,map,set,string,dependencies,for,bean,this,dependencies,for,bean,map,get,dependent,bean,name,if,dependencies,for,bean,null,dependencies,for,bean,new,linked,hash,set,string,8,this,dependencies,for,bean,map,put,dependent,bean,name,dependencies,for,bean,dependencies,for,bean,add,canonical,name
DefaultSingletonBeanRegistry -> public void registerDependentBean(String beanName, String dependentBeanName);1368482696;Register a dependent bean for the given bean,_to be destroyed before the given bean is destroyed._@param beanName the name of the bean_@param dependentBeanName the name of the dependent bean;public void registerDependentBean(String beanName, String dependentBeanName) {_		String canonicalName = canonicalName(beanName)__		synchronized (this.dependentBeanMap) {_			Set<String> dependentBeans = this.dependentBeanMap.get(canonicalName)__			if (dependentBeans == null) {_				dependentBeans = new LinkedHashSet<String>(8)__				this.dependentBeanMap.put(canonicalName, dependentBeans)__			}_			dependentBeans.add(dependentBeanName)__		}_		synchronized (this.dependenciesForBeanMap) {_			Set<String> dependenciesForBean = this.dependenciesForBeanMap.get(dependentBeanName)__			if (dependenciesForBean == null) {_				dependenciesForBean = new LinkedHashSet<String>(8)__				this.dependenciesForBeanMap.put(dependentBeanName, dependenciesForBean)__			}_			dependenciesForBean.add(canonicalName)__		}_	};register,a,dependent,bean,for,the,given,bean,to,be,destroyed,before,the,given,bean,is,destroyed,param,bean,name,the,name,of,the,bean,param,dependent,bean,name,the,name,of,the,dependent,bean;public,void,register,dependent,bean,string,bean,name,string,dependent,bean,name,string,canonical,name,canonical,name,bean,name,synchronized,this,dependent,bean,map,set,string,dependent,beans,this,dependent,bean,map,get,canonical,name,if,dependent,beans,null,dependent,beans,new,linked,hash,set,string,8,this,dependent,bean,map,put,canonical,name,dependent,beans,dependent,beans,add,dependent,bean,name,synchronized,this,dependencies,for,bean,map,set,string,dependencies,for,bean,this,dependencies,for,bean,map,get,dependent,bean,name,if,dependencies,for,bean,null,dependencies,for,bean,new,linked,hash,set,string,8,this,dependencies,for,bean,map,put,dependent,bean,name,dependencies,for,bean,dependencies,for,bean,add,canonical,name
DefaultSingletonBeanRegistry -> public void registerDependentBean(String beanName, String dependentBeanName);1374698947;Register a dependent bean for the given bean,_to be destroyed before the given bean is destroyed._@param beanName the name of the bean_@param dependentBeanName the name of the dependent bean;public void registerDependentBean(String beanName, String dependentBeanName) {_		String canonicalName = canonicalName(beanName)__		synchronized (this.dependentBeanMap) {_			Set<String> dependentBeans = this.dependentBeanMap.get(canonicalName)__			if (dependentBeans == null) {_				dependentBeans = new LinkedHashSet<String>(8)__				this.dependentBeanMap.put(canonicalName, dependentBeans)__			}_			dependentBeans.add(dependentBeanName)__		}_		synchronized (this.dependenciesForBeanMap) {_			Set<String> dependenciesForBean = this.dependenciesForBeanMap.get(dependentBeanName)__			if (dependenciesForBean == null) {_				dependenciesForBean = new LinkedHashSet<String>(8)__				this.dependenciesForBeanMap.put(dependentBeanName, dependenciesForBean)__			}_			dependenciesForBean.add(canonicalName)__		}_	};register,a,dependent,bean,for,the,given,bean,to,be,destroyed,before,the,given,bean,is,destroyed,param,bean,name,the,name,of,the,bean,param,dependent,bean,name,the,name,of,the,dependent,bean;public,void,register,dependent,bean,string,bean,name,string,dependent,bean,name,string,canonical,name,canonical,name,bean,name,synchronized,this,dependent,bean,map,set,string,dependent,beans,this,dependent,bean,map,get,canonical,name,if,dependent,beans,null,dependent,beans,new,linked,hash,set,string,8,this,dependent,bean,map,put,canonical,name,dependent,beans,dependent,beans,add,dependent,bean,name,synchronized,this,dependencies,for,bean,map,set,string,dependencies,for,bean,this,dependencies,for,bean,map,get,dependent,bean,name,if,dependencies,for,bean,null,dependencies,for,bean,new,linked,hash,set,string,8,this,dependencies,for,bean,map,put,dependent,bean,name,dependencies,for,bean,dependencies,for,bean,add,canonical,name
DefaultSingletonBeanRegistry -> public void registerDependentBean(String beanName, String dependentBeanName);1385412762;Register a dependent bean for the given bean,_to be destroyed before the given bean is destroyed._@param beanName the name of the bean_@param dependentBeanName the name of the dependent bean;public void registerDependentBean(String beanName, String dependentBeanName) {_		String canonicalName = canonicalName(beanName)__		synchronized (this.dependentBeanMap) {_			Set<String> dependentBeans = this.dependentBeanMap.get(canonicalName)__			if (dependentBeans == null) {_				dependentBeans = new LinkedHashSet<String>(8)__				this.dependentBeanMap.put(canonicalName, dependentBeans)__			}_			dependentBeans.add(dependentBeanName)__		}_		synchronized (this.dependenciesForBeanMap) {_			Set<String> dependenciesForBean = this.dependenciesForBeanMap.get(dependentBeanName)__			if (dependenciesForBean == null) {_				dependenciesForBean = new LinkedHashSet<String>(8)__				this.dependenciesForBeanMap.put(dependentBeanName, dependenciesForBean)__			}_			dependenciesForBean.add(canonicalName)__		}_	};register,a,dependent,bean,for,the,given,bean,to,be,destroyed,before,the,given,bean,is,destroyed,param,bean,name,the,name,of,the,bean,param,dependent,bean,name,the,name,of,the,dependent,bean;public,void,register,dependent,bean,string,bean,name,string,dependent,bean,name,string,canonical,name,canonical,name,bean,name,synchronized,this,dependent,bean,map,set,string,dependent,beans,this,dependent,bean,map,get,canonical,name,if,dependent,beans,null,dependent,beans,new,linked,hash,set,string,8,this,dependent,bean,map,put,canonical,name,dependent,beans,dependent,beans,add,dependent,bean,name,synchronized,this,dependencies,for,bean,map,set,string,dependencies,for,bean,this,dependencies,for,bean,map,get,dependent,bean,name,if,dependencies,for,bean,null,dependencies,for,bean,new,linked,hash,set,string,8,this,dependencies,for,bean,map,put,dependent,bean,name,dependencies,for,bean,dependencies,for,bean,add,canonical,name
DefaultSingletonBeanRegistry -> public void registerDependentBean(String beanName, String dependentBeanName);1385984377;Register a dependent bean for the given bean,_to be destroyed before the given bean is destroyed._@param beanName the name of the bean_@param dependentBeanName the name of the dependent bean;public void registerDependentBean(String beanName, String dependentBeanName) {_		String canonicalName = canonicalName(beanName)__		synchronized (this.dependentBeanMap) {_			Set<String> dependentBeans = this.dependentBeanMap.get(canonicalName)__			if (dependentBeans == null) {_				dependentBeans = new LinkedHashSet<String>(8)__				this.dependentBeanMap.put(canonicalName, dependentBeans)__			}_			dependentBeans.add(dependentBeanName)__		}_		synchronized (this.dependenciesForBeanMap) {_			Set<String> dependenciesForBean = this.dependenciesForBeanMap.get(dependentBeanName)__			if (dependenciesForBean == null) {_				dependenciesForBean = new LinkedHashSet<String>(8)__				this.dependenciesForBeanMap.put(dependentBeanName, dependenciesForBean)__			}_			dependenciesForBean.add(canonicalName)__		}_	};register,a,dependent,bean,for,the,given,bean,to,be,destroyed,before,the,given,bean,is,destroyed,param,bean,name,the,name,of,the,bean,param,dependent,bean,name,the,name,of,the,dependent,bean;public,void,register,dependent,bean,string,bean,name,string,dependent,bean,name,string,canonical,name,canonical,name,bean,name,synchronized,this,dependent,bean,map,set,string,dependent,beans,this,dependent,bean,map,get,canonical,name,if,dependent,beans,null,dependent,beans,new,linked,hash,set,string,8,this,dependent,bean,map,put,canonical,name,dependent,beans,dependent,beans,add,dependent,bean,name,synchronized,this,dependencies,for,bean,map,set,string,dependencies,for,bean,this,dependencies,for,bean,map,get,dependent,bean,name,if,dependencies,for,bean,null,dependencies,for,bean,new,linked,hash,set,string,8,this,dependencies,for,bean,map,put,dependent,bean,name,dependencies,for,bean,dependencies,for,bean,add,canonical,name
DefaultSingletonBeanRegistry -> public void registerDependentBean(String beanName, String dependentBeanName);1405430015;Register a dependent bean for the given bean,_to be destroyed before the given bean is destroyed._@param beanName the name of the bean_@param dependentBeanName the name of the dependent bean;public void registerDependentBean(String beanName, String dependentBeanName) {_		String canonicalName = canonicalName(beanName)__		synchronized (this.dependentBeanMap) {_			Set<String> dependentBeans = this.dependentBeanMap.get(canonicalName)__			if (dependentBeans == null) {_				dependentBeans = new LinkedHashSet<String>(8)__				this.dependentBeanMap.put(canonicalName, dependentBeans)__			}_			dependentBeans.add(dependentBeanName)__		}_		synchronized (this.dependenciesForBeanMap) {_			Set<String> dependenciesForBean = this.dependenciesForBeanMap.get(dependentBeanName)__			if (dependenciesForBean == null) {_				dependenciesForBean = new LinkedHashSet<String>(8)__				this.dependenciesForBeanMap.put(dependentBeanName, dependenciesForBean)__			}_			dependenciesForBean.add(canonicalName)__		}_	};register,a,dependent,bean,for,the,given,bean,to,be,destroyed,before,the,given,bean,is,destroyed,param,bean,name,the,name,of,the,bean,param,dependent,bean,name,the,name,of,the,dependent,bean;public,void,register,dependent,bean,string,bean,name,string,dependent,bean,name,string,canonical,name,canonical,name,bean,name,synchronized,this,dependent,bean,map,set,string,dependent,beans,this,dependent,bean,map,get,canonical,name,if,dependent,beans,null,dependent,beans,new,linked,hash,set,string,8,this,dependent,bean,map,put,canonical,name,dependent,beans,dependent,beans,add,dependent,bean,name,synchronized,this,dependencies,for,bean,map,set,string,dependencies,for,bean,this,dependencies,for,bean,map,get,dependent,bean,name,if,dependencies,for,bean,null,dependencies,for,bean,new,linked,hash,set,string,8,this,dependencies,for,bean,map,put,dependent,bean,name,dependencies,for,bean,dependencies,for,bean,add,canonical,name
DefaultSingletonBeanRegistry -> public void registerDependentBean(String beanName, String dependentBeanName);1408528936;Register a dependent bean for the given bean,_to be destroyed before the given bean is destroyed._@param beanName the name of the bean_@param dependentBeanName the name of the dependent bean;public void registerDependentBean(String beanName, String dependentBeanName) {_		_		String canonicalName = canonicalName(beanName)__		Set<String> dependentBeans = this.dependentBeanMap.get(canonicalName)__		if (dependentBeans != null && dependentBeans.contains(dependentBeanName)) {_			return__		}__		_		synchronized (this.dependentBeanMap) {_			dependentBeans = this.dependentBeanMap.get(canonicalName)__			if (dependentBeans == null) {_				dependentBeans = new LinkedHashSet<String>(8)__				this.dependentBeanMap.put(canonicalName, dependentBeans)__			}_			dependentBeans.add(dependentBeanName)__		}_		synchronized (this.dependenciesForBeanMap) {_			Set<String> dependenciesForBean = this.dependenciesForBeanMap.get(dependentBeanName)__			if (dependenciesForBean == null) {_				dependenciesForBean = new LinkedHashSet<String>(8)__				this.dependenciesForBeanMap.put(dependentBeanName, dependenciesForBean)__			}_			dependenciesForBean.add(canonicalName)__		}_	};register,a,dependent,bean,for,the,given,bean,to,be,destroyed,before,the,given,bean,is,destroyed,param,bean,name,the,name,of,the,bean,param,dependent,bean,name,the,name,of,the,dependent,bean;public,void,register,dependent,bean,string,bean,name,string,dependent,bean,name,string,canonical,name,canonical,name,bean,name,set,string,dependent,beans,this,dependent,bean,map,get,canonical,name,if,dependent,beans,null,dependent,beans,contains,dependent,bean,name,return,synchronized,this,dependent,bean,map,dependent,beans,this,dependent,bean,map,get,canonical,name,if,dependent,beans,null,dependent,beans,new,linked,hash,set,string,8,this,dependent,bean,map,put,canonical,name,dependent,beans,dependent,beans,add,dependent,bean,name,synchronized,this,dependencies,for,bean,map,set,string,dependencies,for,bean,this,dependencies,for,bean,map,get,dependent,bean,name,if,dependencies,for,bean,null,dependencies,for,bean,new,linked,hash,set,string,8,this,dependencies,for,bean,map,put,dependent,bean,name,dependencies,for,bean,dependencies,for,bean,add,canonical,name
DefaultSingletonBeanRegistry -> public void registerDependentBean(String beanName, String dependentBeanName);1408624154;Register a dependent bean for the given bean,_to be destroyed before the given bean is destroyed._@param beanName the name of the bean_@param dependentBeanName the name of the dependent bean;public void registerDependentBean(String beanName, String dependentBeanName) {_		_		String canonicalName = canonicalName(beanName)__		Set<String> dependentBeans = this.dependentBeanMap.get(canonicalName)__		if (dependentBeans != null && dependentBeans.contains(dependentBeanName)) {_			return__		}__		_		synchronized (this.dependentBeanMap) {_			dependentBeans = this.dependentBeanMap.get(canonicalName)__			if (dependentBeans == null) {_				dependentBeans = new LinkedHashSet<String>(8)__				this.dependentBeanMap.put(canonicalName, dependentBeans)__			}_			dependentBeans.add(dependentBeanName)__		}_		synchronized (this.dependenciesForBeanMap) {_			Set<String> dependenciesForBean = this.dependenciesForBeanMap.get(dependentBeanName)__			if (dependenciesForBean == null) {_				dependenciesForBean = new LinkedHashSet<String>(8)__				this.dependenciesForBeanMap.put(dependentBeanName, dependenciesForBean)__			}_			dependenciesForBean.add(canonicalName)__		}_	};register,a,dependent,bean,for,the,given,bean,to,be,destroyed,before,the,given,bean,is,destroyed,param,bean,name,the,name,of,the,bean,param,dependent,bean,name,the,name,of,the,dependent,bean;public,void,register,dependent,bean,string,bean,name,string,dependent,bean,name,string,canonical,name,canonical,name,bean,name,set,string,dependent,beans,this,dependent,bean,map,get,canonical,name,if,dependent,beans,null,dependent,beans,contains,dependent,bean,name,return,synchronized,this,dependent,bean,map,dependent,beans,this,dependent,bean,map,get,canonical,name,if,dependent,beans,null,dependent,beans,new,linked,hash,set,string,8,this,dependent,bean,map,put,canonical,name,dependent,beans,dependent,beans,add,dependent,bean,name,synchronized,this,dependencies,for,bean,map,set,string,dependencies,for,bean,this,dependencies,for,bean,map,get,dependent,bean,name,if,dependencies,for,bean,null,dependencies,for,bean,new,linked,hash,set,string,8,this,dependencies,for,bean,map,put,dependent,bean,name,dependencies,for,bean,dependencies,for,bean,add,canonical,name
DefaultSingletonBeanRegistry -> public void registerDependentBean(String beanName, String dependentBeanName);1409688815;Register a dependent bean for the given bean,_to be destroyed before the given bean is destroyed._@param beanName the name of the bean_@param dependentBeanName the name of the dependent bean;public void registerDependentBean(String beanName, String dependentBeanName) {_		_		String canonicalName = canonicalName(beanName)__		Set<String> dependentBeans = this.dependentBeanMap.get(canonicalName)__		if (dependentBeans != null && dependentBeans.contains(dependentBeanName)) {_			return__		}__		_		synchronized (this.dependentBeanMap) {_			dependentBeans = this.dependentBeanMap.get(canonicalName)__			if (dependentBeans == null) {_				dependentBeans = new LinkedHashSet<String>(8)__				this.dependentBeanMap.put(canonicalName, dependentBeans)__			}_			dependentBeans.add(dependentBeanName)__		}_		synchronized (this.dependenciesForBeanMap) {_			Set<String> dependenciesForBean = this.dependenciesForBeanMap.get(dependentBeanName)__			if (dependenciesForBean == null) {_				dependenciesForBean = new LinkedHashSet<String>(8)__				this.dependenciesForBeanMap.put(dependentBeanName, dependenciesForBean)__			}_			dependenciesForBean.add(canonicalName)__		}_	};register,a,dependent,bean,for,the,given,bean,to,be,destroyed,before,the,given,bean,is,destroyed,param,bean,name,the,name,of,the,bean,param,dependent,bean,name,the,name,of,the,dependent,bean;public,void,register,dependent,bean,string,bean,name,string,dependent,bean,name,string,canonical,name,canonical,name,bean,name,set,string,dependent,beans,this,dependent,bean,map,get,canonical,name,if,dependent,beans,null,dependent,beans,contains,dependent,bean,name,return,synchronized,this,dependent,bean,map,dependent,beans,this,dependent,bean,map,get,canonical,name,if,dependent,beans,null,dependent,beans,new,linked,hash,set,string,8,this,dependent,bean,map,put,canonical,name,dependent,beans,dependent,beans,add,dependent,bean,name,synchronized,this,dependencies,for,bean,map,set,string,dependencies,for,bean,this,dependencies,for,bean,map,get,dependent,bean,name,if,dependencies,for,bean,null,dependencies,for,bean,new,linked,hash,set,string,8,this,dependencies,for,bean,map,put,dependent,bean,name,dependencies,for,bean,dependencies,for,bean,add,canonical,name
DefaultSingletonBeanRegistry -> public void registerDependentBean(String beanName, String dependentBeanName);1417966231;Register a dependent bean for the given bean,_to be destroyed before the given bean is destroyed._@param beanName the name of the bean_@param dependentBeanName the name of the dependent bean;public void registerDependentBean(String beanName, String dependentBeanName) {_		_		String canonicalName = canonicalName(beanName)__		Set<String> dependentBeans = this.dependentBeanMap.get(canonicalName)__		if (dependentBeans != null && dependentBeans.contains(dependentBeanName)) {_			return__		}__		_		synchronized (this.dependentBeanMap) {_			dependentBeans = this.dependentBeanMap.get(canonicalName)__			if (dependentBeans == null) {_				dependentBeans = new LinkedHashSet<String>(8)__				this.dependentBeanMap.put(canonicalName, dependentBeans)__			}_			dependentBeans.add(dependentBeanName)__		}_		synchronized (this.dependenciesForBeanMap) {_			Set<String> dependenciesForBean = this.dependenciesForBeanMap.get(dependentBeanName)__			if (dependenciesForBean == null) {_				dependenciesForBean = new LinkedHashSet<String>(8)__				this.dependenciesForBeanMap.put(dependentBeanName, dependenciesForBean)__			}_			dependenciesForBean.add(canonicalName)__		}_	};register,a,dependent,bean,for,the,given,bean,to,be,destroyed,before,the,given,bean,is,destroyed,param,bean,name,the,name,of,the,bean,param,dependent,bean,name,the,name,of,the,dependent,bean;public,void,register,dependent,bean,string,bean,name,string,dependent,bean,name,string,canonical,name,canonical,name,bean,name,set,string,dependent,beans,this,dependent,bean,map,get,canonical,name,if,dependent,beans,null,dependent,beans,contains,dependent,bean,name,return,synchronized,this,dependent,bean,map,dependent,beans,this,dependent,bean,map,get,canonical,name,if,dependent,beans,null,dependent,beans,new,linked,hash,set,string,8,this,dependent,bean,map,put,canonical,name,dependent,beans,dependent,beans,add,dependent,bean,name,synchronized,this,dependencies,for,bean,map,set,string,dependencies,for,bean,this,dependencies,for,bean,map,get,dependent,bean,name,if,dependencies,for,bean,null,dependencies,for,bean,new,linked,hash,set,string,8,this,dependencies,for,bean,map,put,dependent,bean,name,dependencies,for,bean,dependencies,for,bean,add,canonical,name
DefaultSingletonBeanRegistry -> public void registerDependentBean(String beanName, String dependentBeanName);1424972106;Register a dependent bean for the given bean,_to be destroyed before the given bean is destroyed._@param beanName the name of the bean_@param dependentBeanName the name of the dependent bean;public void registerDependentBean(String beanName, String dependentBeanName) {_		_		String canonicalName = canonicalName(beanName)__		Set<String> dependentBeans = this.dependentBeanMap.get(canonicalName)__		if (dependentBeans != null && dependentBeans.contains(dependentBeanName)) {_			return__		}__		_		synchronized (this.dependentBeanMap) {_			dependentBeans = this.dependentBeanMap.get(canonicalName)__			if (dependentBeans == null) {_				dependentBeans = new LinkedHashSet<String>(8)__				this.dependentBeanMap.put(canonicalName, dependentBeans)__			}_			dependentBeans.add(dependentBeanName)__		}_		synchronized (this.dependenciesForBeanMap) {_			Set<String> dependenciesForBean = this.dependenciesForBeanMap.get(dependentBeanName)__			if (dependenciesForBean == null) {_				dependenciesForBean = new LinkedHashSet<String>(8)__				this.dependenciesForBeanMap.put(dependentBeanName, dependenciesForBean)__			}_			dependenciesForBean.add(canonicalName)__		}_	};register,a,dependent,bean,for,the,given,bean,to,be,destroyed,before,the,given,bean,is,destroyed,param,bean,name,the,name,of,the,bean,param,dependent,bean,name,the,name,of,the,dependent,bean;public,void,register,dependent,bean,string,bean,name,string,dependent,bean,name,string,canonical,name,canonical,name,bean,name,set,string,dependent,beans,this,dependent,bean,map,get,canonical,name,if,dependent,beans,null,dependent,beans,contains,dependent,bean,name,return,synchronized,this,dependent,bean,map,dependent,beans,this,dependent,bean,map,get,canonical,name,if,dependent,beans,null,dependent,beans,new,linked,hash,set,string,8,this,dependent,bean,map,put,canonical,name,dependent,beans,dependent,beans,add,dependent,bean,name,synchronized,this,dependencies,for,bean,map,set,string,dependencies,for,bean,this,dependencies,for,bean,map,get,dependent,bean,name,if,dependencies,for,bean,null,dependencies,for,bean,new,linked,hash,set,string,8,this,dependencies,for,bean,map,put,dependent,bean,name,dependencies,for,bean,dependencies,for,bean,add,canonical,name
DefaultSingletonBeanRegistry -> public void registerDependentBean(String beanName, String dependentBeanName);1447399860;Register a dependent bean for the given bean,_to be destroyed before the given bean is destroyed._@param beanName the name of the bean_@param dependentBeanName the name of the dependent bean;public void registerDependentBean(String beanName, String dependentBeanName) {_		_		String canonicalName = canonicalName(beanName)__		Set<String> dependentBeans = this.dependentBeanMap.get(canonicalName)__		if (dependentBeans != null && dependentBeans.contains(dependentBeanName)) {_			return__		}__		_		synchronized (this.dependentBeanMap) {_			dependentBeans = this.dependentBeanMap.get(canonicalName)__			if (dependentBeans == null) {_				dependentBeans = new LinkedHashSet<String>(8)__				this.dependentBeanMap.put(canonicalName, dependentBeans)__			}_			dependentBeans.add(dependentBeanName)__		}_		synchronized (this.dependenciesForBeanMap) {_			Set<String> dependenciesForBean = this.dependenciesForBeanMap.get(dependentBeanName)__			if (dependenciesForBean == null) {_				dependenciesForBean = new LinkedHashSet<String>(8)__				this.dependenciesForBeanMap.put(dependentBeanName, dependenciesForBean)__			}_			dependenciesForBean.add(canonicalName)__		}_	};register,a,dependent,bean,for,the,given,bean,to,be,destroyed,before,the,given,bean,is,destroyed,param,bean,name,the,name,of,the,bean,param,dependent,bean,name,the,name,of,the,dependent,bean;public,void,register,dependent,bean,string,bean,name,string,dependent,bean,name,string,canonical,name,canonical,name,bean,name,set,string,dependent,beans,this,dependent,bean,map,get,canonical,name,if,dependent,beans,null,dependent,beans,contains,dependent,bean,name,return,synchronized,this,dependent,bean,map,dependent,beans,this,dependent,bean,map,get,canonical,name,if,dependent,beans,null,dependent,beans,new,linked,hash,set,string,8,this,dependent,bean,map,put,canonical,name,dependent,beans,dependent,beans,add,dependent,bean,name,synchronized,this,dependencies,for,bean,map,set,string,dependencies,for,bean,this,dependencies,for,bean,map,get,dependent,bean,name,if,dependencies,for,bean,null,dependencies,for,bean,new,linked,hash,set,string,8,this,dependencies,for,bean,map,put,dependent,bean,name,dependencies,for,bean,dependencies,for,bean,add,canonical,name
DefaultSingletonBeanRegistry -> public void registerDependentBean(String beanName, String dependentBeanName);1467730834;Register a dependent bean for the given bean,_to be destroyed before the given bean is destroyed._@param beanName the name of the bean_@param dependentBeanName the name of the dependent bean;public void registerDependentBean(String beanName, String dependentBeanName) {_		_		String canonicalName = canonicalName(beanName)__		Set<String> dependentBeans = this.dependentBeanMap.get(canonicalName)__		if (dependentBeans != null && dependentBeans.contains(dependentBeanName)) {_			return__		}__		_		synchronized (this.dependentBeanMap) {_			dependentBeans = this.dependentBeanMap.get(canonicalName)__			if (dependentBeans == null) {_				dependentBeans = new LinkedHashSet<>(8)__				this.dependentBeanMap.put(canonicalName, dependentBeans)__			}_			dependentBeans.add(dependentBeanName)__		}_		synchronized (this.dependenciesForBeanMap) {_			Set<String> dependenciesForBean = this.dependenciesForBeanMap.get(dependentBeanName)__			if (dependenciesForBean == null) {_				dependenciesForBean = new LinkedHashSet<>(8)__				this.dependenciesForBeanMap.put(dependentBeanName, dependenciesForBean)__			}_			dependenciesForBean.add(canonicalName)__		}_	};register,a,dependent,bean,for,the,given,bean,to,be,destroyed,before,the,given,bean,is,destroyed,param,bean,name,the,name,of,the,bean,param,dependent,bean,name,the,name,of,the,dependent,bean;public,void,register,dependent,bean,string,bean,name,string,dependent,bean,name,string,canonical,name,canonical,name,bean,name,set,string,dependent,beans,this,dependent,bean,map,get,canonical,name,if,dependent,beans,null,dependent,beans,contains,dependent,bean,name,return,synchronized,this,dependent,bean,map,dependent,beans,this,dependent,bean,map,get,canonical,name,if,dependent,beans,null,dependent,beans,new,linked,hash,set,8,this,dependent,bean,map,put,canonical,name,dependent,beans,dependent,beans,add,dependent,bean,name,synchronized,this,dependencies,for,bean,map,set,string,dependencies,for,bean,this,dependencies,for,bean,map,get,dependent,bean,name,if,dependencies,for,bean,null,dependencies,for,bean,new,linked,hash,set,8,this,dependencies,for,bean,map,put,dependent,bean,name,dependencies,for,bean,dependencies,for,bean,add,canonical,name
DefaultSingletonBeanRegistry -> public void registerDependentBean(String beanName, String dependentBeanName);1467810738;Register a dependent bean for the given bean,_to be destroyed before the given bean is destroyed._@param beanName the name of the bean_@param dependentBeanName the name of the dependent bean;public void registerDependentBean(String beanName, String dependentBeanName) {_		_		String canonicalName = canonicalName(beanName)__		Set<String> dependentBeans = this.dependentBeanMap.get(canonicalName)__		if (dependentBeans != null && dependentBeans.contains(dependentBeanName)) {_			return__		}__		_		synchronized (this.dependentBeanMap) {_			dependentBeans = this.dependentBeanMap.get(canonicalName)__			if (dependentBeans == null) {_				dependentBeans = new LinkedHashSet<>(8)__				this.dependentBeanMap.put(canonicalName, dependentBeans)__			}_			dependentBeans.add(dependentBeanName)__		}_		synchronized (this.dependenciesForBeanMap) {_			Set<String> dependenciesForBean = this.dependenciesForBeanMap.get(dependentBeanName)__			if (dependenciesForBean == null) {_				dependenciesForBean = new LinkedHashSet<>(8)__				this.dependenciesForBeanMap.put(dependentBeanName, dependenciesForBean)__			}_			dependenciesForBean.add(canonicalName)__		}_	};register,a,dependent,bean,for,the,given,bean,to,be,destroyed,before,the,given,bean,is,destroyed,param,bean,name,the,name,of,the,bean,param,dependent,bean,name,the,name,of,the,dependent,bean;public,void,register,dependent,bean,string,bean,name,string,dependent,bean,name,string,canonical,name,canonical,name,bean,name,set,string,dependent,beans,this,dependent,bean,map,get,canonical,name,if,dependent,beans,null,dependent,beans,contains,dependent,bean,name,return,synchronized,this,dependent,bean,map,dependent,beans,this,dependent,bean,map,get,canonical,name,if,dependent,beans,null,dependent,beans,new,linked,hash,set,8,this,dependent,bean,map,put,canonical,name,dependent,beans,dependent,beans,add,dependent,bean,name,synchronized,this,dependencies,for,bean,map,set,string,dependencies,for,bean,this,dependencies,for,bean,map,get,dependent,bean,name,if,dependencies,for,bean,null,dependencies,for,bean,new,linked,hash,set,8,this,dependencies,for,bean,map,put,dependent,bean,name,dependencies,for,bean,dependencies,for,bean,add,canonical,name
DefaultSingletonBeanRegistry -> public void registerDependentBean(String beanName, String dependentBeanName);1469561191;Register a dependent bean for the given bean,_to be destroyed before the given bean is destroyed._@param beanName the name of the bean_@param dependentBeanName the name of the dependent bean;public void registerDependentBean(String beanName, String dependentBeanName) {_		_		String canonicalName = canonicalName(beanName)__		Set<String> dependentBeans = this.dependentBeanMap.get(canonicalName)__		if (dependentBeans != null && dependentBeans.contains(dependentBeanName)) {_			return__		}__		_		synchronized (this.dependentBeanMap) {_			dependentBeans = this.dependentBeanMap.get(canonicalName)__			if (dependentBeans == null) {_				dependentBeans = new LinkedHashSet<>(8)__				this.dependentBeanMap.put(canonicalName, dependentBeans)__			}_			dependentBeans.add(dependentBeanName)__		}_		synchronized (this.dependenciesForBeanMap) {_			Set<String> dependenciesForBean = this.dependenciesForBeanMap.get(dependentBeanName)__			if (dependenciesForBean == null) {_				dependenciesForBean = new LinkedHashSet<>(8)__				this.dependenciesForBeanMap.put(dependentBeanName, dependenciesForBean)__			}_			dependenciesForBean.add(canonicalName)__		}_	};register,a,dependent,bean,for,the,given,bean,to,be,destroyed,before,the,given,bean,is,destroyed,param,bean,name,the,name,of,the,bean,param,dependent,bean,name,the,name,of,the,dependent,bean;public,void,register,dependent,bean,string,bean,name,string,dependent,bean,name,string,canonical,name,canonical,name,bean,name,set,string,dependent,beans,this,dependent,bean,map,get,canonical,name,if,dependent,beans,null,dependent,beans,contains,dependent,bean,name,return,synchronized,this,dependent,bean,map,dependent,beans,this,dependent,bean,map,get,canonical,name,if,dependent,beans,null,dependent,beans,new,linked,hash,set,8,this,dependent,bean,map,put,canonical,name,dependent,beans,dependent,beans,add,dependent,bean,name,synchronized,this,dependencies,for,bean,map,set,string,dependencies,for,bean,this,dependencies,for,bean,map,get,dependent,bean,name,if,dependencies,for,bean,null,dependencies,for,bean,new,linked,hash,set,8,this,dependencies,for,bean,map,put,dependent,bean,name,dependencies,for,bean,dependencies,for,bean,add,canonical,name
DefaultSingletonBeanRegistry -> public void registerDependentBean(String beanName, String dependentBeanName);1478538021;Register a dependent bean for the given bean,_to be destroyed before the given bean is destroyed._@param beanName the name of the bean_@param dependentBeanName the name of the dependent bean;public void registerDependentBean(String beanName, String dependentBeanName) {_		_		String canonicalName = canonicalName(beanName)__		Set<String> dependentBeans = this.dependentBeanMap.get(canonicalName)__		if (dependentBeans != null && dependentBeans.contains(dependentBeanName)) {_			return__		}__		_		synchronized (this.dependentBeanMap) {_			dependentBeans = this.dependentBeanMap.get(canonicalName)__			if (dependentBeans == null) {_				dependentBeans = new LinkedHashSet<>(8)__				this.dependentBeanMap.put(canonicalName, dependentBeans)__			}_			dependentBeans.add(dependentBeanName)__		}_		synchronized (this.dependenciesForBeanMap) {_			Set<String> dependenciesForBean = this.dependenciesForBeanMap.get(dependentBeanName)__			if (dependenciesForBean == null) {_				dependenciesForBean = new LinkedHashSet<>(8)__				this.dependenciesForBeanMap.put(dependentBeanName, dependenciesForBean)__			}_			dependenciesForBean.add(canonicalName)__		}_	};register,a,dependent,bean,for,the,given,bean,to,be,destroyed,before,the,given,bean,is,destroyed,param,bean,name,the,name,of,the,bean,param,dependent,bean,name,the,name,of,the,dependent,bean;public,void,register,dependent,bean,string,bean,name,string,dependent,bean,name,string,canonical,name,canonical,name,bean,name,set,string,dependent,beans,this,dependent,bean,map,get,canonical,name,if,dependent,beans,null,dependent,beans,contains,dependent,bean,name,return,synchronized,this,dependent,bean,map,dependent,beans,this,dependent,bean,map,get,canonical,name,if,dependent,beans,null,dependent,beans,new,linked,hash,set,8,this,dependent,bean,map,put,canonical,name,dependent,beans,dependent,beans,add,dependent,bean,name,synchronized,this,dependencies,for,bean,map,set,string,dependencies,for,bean,this,dependencies,for,bean,map,get,dependent,bean,name,if,dependencies,for,bean,null,dependencies,for,bean,new,linked,hash,set,8,this,dependencies,for,bean,map,put,dependent,bean,name,dependencies,for,bean,dependencies,for,bean,add,canonical,name
DefaultSingletonBeanRegistry -> public void registerDependentBean(String beanName, String dependentBeanName);1495868221;Register a dependent bean for the given bean,_to be destroyed before the given bean is destroyed._@param beanName the name of the bean_@param dependentBeanName the name of the dependent bean;public void registerDependentBean(String beanName, String dependentBeanName) {_		_		String canonicalName = canonicalName(beanName)__		Set<String> dependentBeans = this.dependentBeanMap.get(canonicalName)__		if (dependentBeans != null && dependentBeans.contains(dependentBeanName)) {_			return__		}__		_		synchronized (this.dependentBeanMap) {_			dependentBeans = this.dependentBeanMap.get(canonicalName)__			if (dependentBeans == null) {_				dependentBeans = new LinkedHashSet<>(8)__				this.dependentBeanMap.put(canonicalName, dependentBeans)__			}_			dependentBeans.add(dependentBeanName)__		}_		synchronized (this.dependenciesForBeanMap) {_			Set<String> dependenciesForBean = this.dependenciesForBeanMap.get(dependentBeanName)__			if (dependenciesForBean == null) {_				dependenciesForBean = new LinkedHashSet<>(8)__				this.dependenciesForBeanMap.put(dependentBeanName, dependenciesForBean)__			}_			dependenciesForBean.add(canonicalName)__		}_	};register,a,dependent,bean,for,the,given,bean,to,be,destroyed,before,the,given,bean,is,destroyed,param,bean,name,the,name,of,the,bean,param,dependent,bean,name,the,name,of,the,dependent,bean;public,void,register,dependent,bean,string,bean,name,string,dependent,bean,name,string,canonical,name,canonical,name,bean,name,set,string,dependent,beans,this,dependent,bean,map,get,canonical,name,if,dependent,beans,null,dependent,beans,contains,dependent,bean,name,return,synchronized,this,dependent,bean,map,dependent,beans,this,dependent,bean,map,get,canonical,name,if,dependent,beans,null,dependent,beans,new,linked,hash,set,8,this,dependent,bean,map,put,canonical,name,dependent,beans,dependent,beans,add,dependent,bean,name,synchronized,this,dependencies,for,bean,map,set,string,dependencies,for,bean,this,dependencies,for,bean,map,get,dependent,bean,name,if,dependencies,for,bean,null,dependencies,for,bean,new,linked,hash,set,8,this,dependencies,for,bean,map,put,dependent,bean,name,dependencies,for,bean,dependencies,for,bean,add,canonical,name
DefaultSingletonBeanRegistry -> public void registerDependentBean(String beanName, String dependentBeanName);1496259743;Register a dependent bean for the given bean,_to be destroyed before the given bean is destroyed._@param beanName the name of the bean_@param dependentBeanName the name of the dependent bean;public void registerDependentBean(String beanName, String dependentBeanName) {_		_		String canonicalName = canonicalName(beanName)__		Set<String> dependentBeans = this.dependentBeanMap.get(canonicalName)__		if (dependentBeans != null && dependentBeans.contains(dependentBeanName)) {_			return__		}__		_		synchronized (this.dependentBeanMap) {_			dependentBeans = this.dependentBeanMap.get(canonicalName)__			if (dependentBeans == null) {_				dependentBeans = new LinkedHashSet<>(8)__				this.dependentBeanMap.put(canonicalName, dependentBeans)__			}_			dependentBeans.add(dependentBeanName)__		}_		synchronized (this.dependenciesForBeanMap) {_			Set<String> dependenciesForBean = this.dependenciesForBeanMap.get(dependentBeanName)__			if (dependenciesForBean == null) {_				dependenciesForBean = new LinkedHashSet<>(8)__				this.dependenciesForBeanMap.put(dependentBeanName, dependenciesForBean)__			}_			dependenciesForBean.add(canonicalName)__		}_	};register,a,dependent,bean,for,the,given,bean,to,be,destroyed,before,the,given,bean,is,destroyed,param,bean,name,the,name,of,the,bean,param,dependent,bean,name,the,name,of,the,dependent,bean;public,void,register,dependent,bean,string,bean,name,string,dependent,bean,name,string,canonical,name,canonical,name,bean,name,set,string,dependent,beans,this,dependent,bean,map,get,canonical,name,if,dependent,beans,null,dependent,beans,contains,dependent,bean,name,return,synchronized,this,dependent,bean,map,dependent,beans,this,dependent,bean,map,get,canonical,name,if,dependent,beans,null,dependent,beans,new,linked,hash,set,8,this,dependent,bean,map,put,canonical,name,dependent,beans,dependent,beans,add,dependent,bean,name,synchronized,this,dependencies,for,bean,map,set,string,dependencies,for,bean,this,dependencies,for,bean,map,get,dependent,bean,name,if,dependencies,for,bean,null,dependencies,for,bean,new,linked,hash,set,8,this,dependencies,for,bean,map,put,dependent,bean,name,dependencies,for,bean,dependencies,for,bean,add,canonical,name
DefaultSingletonBeanRegistry -> public void registerDependentBean(String beanName, String dependentBeanName);1496837955;Register a dependent bean for the given bean,_to be destroyed before the given bean is destroyed._@param beanName the name of the bean_@param dependentBeanName the name of the dependent bean;public void registerDependentBean(String beanName, String dependentBeanName) {_		_		String canonicalName = canonicalName(beanName)__		Set<String> dependentBeans = this.dependentBeanMap.get(canonicalName)__		if (dependentBeans != null && dependentBeans.contains(dependentBeanName)) {_			return__		}__		_		synchronized (this.dependentBeanMap) {_			dependentBeans = this.dependentBeanMap.get(canonicalName)__			if (dependentBeans == null) {_				dependentBeans = new LinkedHashSet<>(8)__				this.dependentBeanMap.put(canonicalName, dependentBeans)__			}_			dependentBeans.add(dependentBeanName)__		}_		synchronized (this.dependenciesForBeanMap) {_			Set<String> dependenciesForBean = this.dependenciesForBeanMap.get(dependentBeanName)__			if (dependenciesForBean == null) {_				dependenciesForBean = new LinkedHashSet<>(8)__				this.dependenciesForBeanMap.put(dependentBeanName, dependenciesForBean)__			}_			dependenciesForBean.add(canonicalName)__		}_	};register,a,dependent,bean,for,the,given,bean,to,be,destroyed,before,the,given,bean,is,destroyed,param,bean,name,the,name,of,the,bean,param,dependent,bean,name,the,name,of,the,dependent,bean;public,void,register,dependent,bean,string,bean,name,string,dependent,bean,name,string,canonical,name,canonical,name,bean,name,set,string,dependent,beans,this,dependent,bean,map,get,canonical,name,if,dependent,beans,null,dependent,beans,contains,dependent,bean,name,return,synchronized,this,dependent,bean,map,dependent,beans,this,dependent,bean,map,get,canonical,name,if,dependent,beans,null,dependent,beans,new,linked,hash,set,8,this,dependent,bean,map,put,canonical,name,dependent,beans,dependent,beans,add,dependent,bean,name,synchronized,this,dependencies,for,bean,map,set,string,dependencies,for,bean,this,dependencies,for,bean,map,get,dependent,bean,name,if,dependencies,for,bean,null,dependencies,for,bean,new,linked,hash,set,8,this,dependencies,for,bean,map,put,dependent,bean,name,dependencies,for,bean,dependencies,for,bean,add,canonical,name
DefaultSingletonBeanRegistry -> public void registerDependentBean(String beanName, String dependentBeanName);1498780456;Register a dependent bean for the given bean,_to be destroyed before the given bean is destroyed._@param beanName the name of the bean_@param dependentBeanName the name of the dependent bean;public void registerDependentBean(String beanName, String dependentBeanName) {_		_		String canonicalName = canonicalName(beanName)__		Set<String> dependentBeans = this.dependentBeanMap.get(canonicalName)__		if (dependentBeans != null && dependentBeans.contains(dependentBeanName)) {_			return__		}__		_		synchronized (this.dependentBeanMap) {_			dependentBeans = this.dependentBeanMap.get(canonicalName)__			if (dependentBeans == null) {_				dependentBeans = new LinkedHashSet<>(8)__				this.dependentBeanMap.put(canonicalName, dependentBeans)__			}_			dependentBeans.add(dependentBeanName)__		}_		synchronized (this.dependenciesForBeanMap) {_			Set<String> dependenciesForBean = this.dependenciesForBeanMap.get(dependentBeanName)__			if (dependenciesForBean == null) {_				dependenciesForBean = new LinkedHashSet<>(8)__				this.dependenciesForBeanMap.put(dependentBeanName, dependenciesForBean)__			}_			dependenciesForBean.add(canonicalName)__		}_	};register,a,dependent,bean,for,the,given,bean,to,be,destroyed,before,the,given,bean,is,destroyed,param,bean,name,the,name,of,the,bean,param,dependent,bean,name,the,name,of,the,dependent,bean;public,void,register,dependent,bean,string,bean,name,string,dependent,bean,name,string,canonical,name,canonical,name,bean,name,set,string,dependent,beans,this,dependent,bean,map,get,canonical,name,if,dependent,beans,null,dependent,beans,contains,dependent,bean,name,return,synchronized,this,dependent,bean,map,dependent,beans,this,dependent,bean,map,get,canonical,name,if,dependent,beans,null,dependent,beans,new,linked,hash,set,8,this,dependent,bean,map,put,canonical,name,dependent,beans,dependent,beans,add,dependent,bean,name,synchronized,this,dependencies,for,bean,map,set,string,dependencies,for,bean,this,dependencies,for,bean,map,get,dependent,bean,name,if,dependencies,for,bean,null,dependencies,for,bean,new,linked,hash,set,8,this,dependencies,for,bean,map,put,dependent,bean,name,dependencies,for,bean,dependencies,for,bean,add,canonical,name
DefaultSingletonBeanRegistry -> public void registerDependentBean(String beanName, String dependentBeanName);1502974979;Register a dependent bean for the given bean,_to be destroyed before the given bean is destroyed._@param beanName the name of the bean_@param dependentBeanName the name of the dependent bean;public void registerDependentBean(String beanName, String dependentBeanName) {_		_		String canonicalName = canonicalName(beanName)__		Set<String> dependentBeans = this.dependentBeanMap.get(canonicalName)__		if (dependentBeans != null && dependentBeans.contains(dependentBeanName)) {_			return__		}__		_		synchronized (this.dependentBeanMap) {_			dependentBeans = this.dependentBeanMap.get(canonicalName)__			if (dependentBeans == null) {_				dependentBeans = new LinkedHashSet<>(8)__				this.dependentBeanMap.put(canonicalName, dependentBeans)__			}_			dependentBeans.add(dependentBeanName)__		}_		synchronized (this.dependenciesForBeanMap) {_			Set<String> dependenciesForBean = this.dependenciesForBeanMap.get(dependentBeanName)__			if (dependenciesForBean == null) {_				dependenciesForBean = new LinkedHashSet<>(8)__				this.dependenciesForBeanMap.put(dependentBeanName, dependenciesForBean)__			}_			dependenciesForBean.add(canonicalName)__		}_	};register,a,dependent,bean,for,the,given,bean,to,be,destroyed,before,the,given,bean,is,destroyed,param,bean,name,the,name,of,the,bean,param,dependent,bean,name,the,name,of,the,dependent,bean;public,void,register,dependent,bean,string,bean,name,string,dependent,bean,name,string,canonical,name,canonical,name,bean,name,set,string,dependent,beans,this,dependent,bean,map,get,canonical,name,if,dependent,beans,null,dependent,beans,contains,dependent,bean,name,return,synchronized,this,dependent,bean,map,dependent,beans,this,dependent,bean,map,get,canonical,name,if,dependent,beans,null,dependent,beans,new,linked,hash,set,8,this,dependent,bean,map,put,canonical,name,dependent,beans,dependent,beans,add,dependent,bean,name,synchronized,this,dependencies,for,bean,map,set,string,dependencies,for,bean,this,dependencies,for,bean,map,get,dependent,bean,name,if,dependencies,for,bean,null,dependencies,for,bean,new,linked,hash,set,8,this,dependencies,for,bean,map,put,dependent,bean,name,dependencies,for,bean,dependencies,for,bean,add,canonical,name
DefaultSingletonBeanRegistry -> public void registerDependentBean(String beanName, String dependentBeanName);1503007895;Register a dependent bean for the given bean,_to be destroyed before the given bean is destroyed._@param beanName the name of the bean_@param dependentBeanName the name of the dependent bean;public void registerDependentBean(String beanName, String dependentBeanName) {_		_		String canonicalName = canonicalName(beanName)__		Set<String> dependentBeans = this.dependentBeanMap.get(canonicalName)__		if (dependentBeans != null && dependentBeans.contains(dependentBeanName)) {_			return__		}__		_		synchronized (this.dependentBeanMap) {_			dependentBeans = this.dependentBeanMap.get(canonicalName)__			if (dependentBeans == null) {_				dependentBeans = new LinkedHashSet<>(8)__				this.dependentBeanMap.put(canonicalName, dependentBeans)__			}_			dependentBeans.add(dependentBeanName)__		}_		synchronized (this.dependenciesForBeanMap) {_			Set<String> dependenciesForBean = this.dependenciesForBeanMap.get(dependentBeanName)__			if (dependenciesForBean == null) {_				dependenciesForBean = new LinkedHashSet<>(8)__				this.dependenciesForBeanMap.put(dependentBeanName, dependenciesForBean)__			}_			dependenciesForBean.add(canonicalName)__		}_	};register,a,dependent,bean,for,the,given,bean,to,be,destroyed,before,the,given,bean,is,destroyed,param,bean,name,the,name,of,the,bean,param,dependent,bean,name,the,name,of,the,dependent,bean;public,void,register,dependent,bean,string,bean,name,string,dependent,bean,name,string,canonical,name,canonical,name,bean,name,set,string,dependent,beans,this,dependent,bean,map,get,canonical,name,if,dependent,beans,null,dependent,beans,contains,dependent,bean,name,return,synchronized,this,dependent,bean,map,dependent,beans,this,dependent,bean,map,get,canonical,name,if,dependent,beans,null,dependent,beans,new,linked,hash,set,8,this,dependent,bean,map,put,canonical,name,dependent,beans,dependent,beans,add,dependent,bean,name,synchronized,this,dependencies,for,bean,map,set,string,dependencies,for,bean,this,dependencies,for,bean,map,get,dependent,bean,name,if,dependencies,for,bean,null,dependencies,for,bean,new,linked,hash,set,8,this,dependencies,for,bean,map,put,dependent,bean,name,dependencies,for,bean,dependencies,for,bean,add,canonical,name
DefaultSingletonBeanRegistry -> public void registerDependentBean(String beanName, String dependentBeanName);1518810557;Register a dependent bean for the given bean,_to be destroyed before the given bean is destroyed._@param beanName the name of the bean_@param dependentBeanName the name of the dependent bean;public void registerDependentBean(String beanName, String dependentBeanName) {_		_		String canonicalName = canonicalName(beanName)__		Set<String> dependentBeans = this.dependentBeanMap.get(canonicalName)__		if (dependentBeans != null && dependentBeans.contains(dependentBeanName)) {_			return__		}__		_		synchronized (this.dependentBeanMap) {_			dependentBeans = this.dependentBeanMap.get(canonicalName)__			if (dependentBeans == null) {_				dependentBeans = new LinkedHashSet<>(8)__				this.dependentBeanMap.put(canonicalName, dependentBeans)__			}_			dependentBeans.add(dependentBeanName)__		}_		synchronized (this.dependenciesForBeanMap) {_			Set<String> dependenciesForBean = this.dependenciesForBeanMap.get(dependentBeanName)__			if (dependenciesForBean == null) {_				dependenciesForBean = new LinkedHashSet<>(8)__				this.dependenciesForBeanMap.put(dependentBeanName, dependenciesForBean)__			}_			dependenciesForBean.add(canonicalName)__		}_	};register,a,dependent,bean,for,the,given,bean,to,be,destroyed,before,the,given,bean,is,destroyed,param,bean,name,the,name,of,the,bean,param,dependent,bean,name,the,name,of,the,dependent,bean;public,void,register,dependent,bean,string,bean,name,string,dependent,bean,name,string,canonical,name,canonical,name,bean,name,set,string,dependent,beans,this,dependent,bean,map,get,canonical,name,if,dependent,beans,null,dependent,beans,contains,dependent,bean,name,return,synchronized,this,dependent,bean,map,dependent,beans,this,dependent,bean,map,get,canonical,name,if,dependent,beans,null,dependent,beans,new,linked,hash,set,8,this,dependent,bean,map,put,canonical,name,dependent,beans,dependent,beans,add,dependent,bean,name,synchronized,this,dependencies,for,bean,map,set,string,dependencies,for,bean,this,dependencies,for,bean,map,get,dependent,bean,name,if,dependencies,for,bean,null,dependencies,for,bean,new,linked,hash,set,8,this,dependencies,for,bean,map,put,dependent,bean,name,dependencies,for,bean,dependencies,for,bean,add,canonical,name
DefaultSingletonBeanRegistry -> public void registerDependentBean(String beanName, String dependentBeanName);1521822873;Register a dependent bean for the given bean,_to be destroyed before the given bean is destroyed._@param beanName the name of the bean_@param dependentBeanName the name of the dependent bean;public void registerDependentBean(String beanName, String dependentBeanName) {_		_		String canonicalName = canonicalName(beanName)__		Set<String> dependentBeans = this.dependentBeanMap.get(canonicalName)__		if (dependentBeans != null && dependentBeans.contains(dependentBeanName)) {_			return__		}__		_		synchronized (this.dependentBeanMap) {_			dependentBeans = this.dependentBeanMap.computeIfAbsent(canonicalName, k -> new LinkedHashSet<>(8))__			dependentBeans.add(dependentBeanName)__		}_		synchronized (this.dependenciesForBeanMap) {_			Set<String> dependenciesForBean =_					this.dependenciesForBeanMap.computeIfAbsent(dependentBeanName, k -> new LinkedHashSet<>(8))__			dependenciesForBean.add(canonicalName)__		}_	};register,a,dependent,bean,for,the,given,bean,to,be,destroyed,before,the,given,bean,is,destroyed,param,bean,name,the,name,of,the,bean,param,dependent,bean,name,the,name,of,the,dependent,bean;public,void,register,dependent,bean,string,bean,name,string,dependent,bean,name,string,canonical,name,canonical,name,bean,name,set,string,dependent,beans,this,dependent,bean,map,get,canonical,name,if,dependent,beans,null,dependent,beans,contains,dependent,bean,name,return,synchronized,this,dependent,bean,map,dependent,beans,this,dependent,bean,map,compute,if,absent,canonical,name,k,new,linked,hash,set,8,dependent,beans,add,dependent,bean,name,synchronized,this,dependencies,for,bean,map,set,string,dependencies,for,bean,this,dependencies,for,bean,map,compute,if,absent,dependent,bean,name,k,new,linked,hash,set,8,dependencies,for,bean,add,canonical,name
DefaultSingletonBeanRegistry -> public void registerDependentBean(String beanName, String dependentBeanName);1521905451;Register a dependent bean for the given bean,_to be destroyed before the given bean is destroyed._@param beanName the name of the bean_@param dependentBeanName the name of the dependent bean;public void registerDependentBean(String beanName, String dependentBeanName) {_		String canonicalName = canonicalName(beanName)___		synchronized (this.dependentBeanMap) {_			Set<String> dependentBeans =_					this.dependentBeanMap.computeIfAbsent(canonicalName, k -> new LinkedHashSet<>(8))__			if (!dependentBeans.add(dependentBeanName)) {_				return__			}_		}__		synchronized (this.dependenciesForBeanMap) {_			Set<String> dependenciesForBean =_					this.dependenciesForBeanMap.computeIfAbsent(dependentBeanName, k -> new LinkedHashSet<>(8))__			dependenciesForBean.add(canonicalName)__		}_	};register,a,dependent,bean,for,the,given,bean,to,be,destroyed,before,the,given,bean,is,destroyed,param,bean,name,the,name,of,the,bean,param,dependent,bean,name,the,name,of,the,dependent,bean;public,void,register,dependent,bean,string,bean,name,string,dependent,bean,name,string,canonical,name,canonical,name,bean,name,synchronized,this,dependent,bean,map,set,string,dependent,beans,this,dependent,bean,map,compute,if,absent,canonical,name,k,new,linked,hash,set,8,if,dependent,beans,add,dependent,bean,name,return,synchronized,this,dependencies,for,bean,map,set,string,dependencies,for,bean,this,dependencies,for,bean,map,compute,if,absent,dependent,bean,name,k,new,linked,hash,set,8,dependencies,for,bean,add,canonical,name
DefaultSingletonBeanRegistry -> public void registerDependentBean(String beanName, String dependentBeanName);1527623493;Register a dependent bean for the given bean,_to be destroyed before the given bean is destroyed._@param beanName the name of the bean_@param dependentBeanName the name of the dependent bean;public void registerDependentBean(String beanName, String dependentBeanName) {_		String canonicalName = canonicalName(beanName)___		synchronized (this.dependentBeanMap) {_			Set<String> dependentBeans =_					this.dependentBeanMap.computeIfAbsent(canonicalName, k -> new LinkedHashSet<>(8))__			if (!dependentBeans.add(dependentBeanName)) {_				return__			}_		}__		synchronized (this.dependenciesForBeanMap) {_			Set<String> dependenciesForBean =_					this.dependenciesForBeanMap.computeIfAbsent(dependentBeanName, k -> new LinkedHashSet<>(8))__			dependenciesForBean.add(canonicalName)__		}_	};register,a,dependent,bean,for,the,given,bean,to,be,destroyed,before,the,given,bean,is,destroyed,param,bean,name,the,name,of,the,bean,param,dependent,bean,name,the,name,of,the,dependent,bean;public,void,register,dependent,bean,string,bean,name,string,dependent,bean,name,string,canonical,name,canonical,name,bean,name,synchronized,this,dependent,bean,map,set,string,dependent,beans,this,dependent,bean,map,compute,if,absent,canonical,name,k,new,linked,hash,set,8,if,dependent,beans,add,dependent,bean,name,return,synchronized,this,dependencies,for,bean,map,set,string,dependencies,for,bean,this,dependencies,for,bean,map,compute,if,absent,dependent,bean,name,k,new,linked,hash,set,8,dependencies,for,bean,add,canonical,name
DefaultSingletonBeanRegistry -> public void registerDependentBean(String beanName, String dependentBeanName);1530174524;Register a dependent bean for the given bean,_to be destroyed before the given bean is destroyed._@param beanName the name of the bean_@param dependentBeanName the name of the dependent bean;public void registerDependentBean(String beanName, String dependentBeanName) {_		String canonicalName = canonicalName(beanName)___		synchronized (this.dependentBeanMap) {_			Set<String> dependentBeans =_					this.dependentBeanMap.computeIfAbsent(canonicalName, k -> new LinkedHashSet<>(8))__			if (!dependentBeans.add(dependentBeanName)) {_				return__			}_		}__		synchronized (this.dependenciesForBeanMap) {_			Set<String> dependenciesForBean =_					this.dependenciesForBeanMap.computeIfAbsent(dependentBeanName, k -> new LinkedHashSet<>(8))__			dependenciesForBean.add(canonicalName)__		}_	};register,a,dependent,bean,for,the,given,bean,to,be,destroyed,before,the,given,bean,is,destroyed,param,bean,name,the,name,of,the,bean,param,dependent,bean,name,the,name,of,the,dependent,bean;public,void,register,dependent,bean,string,bean,name,string,dependent,bean,name,string,canonical,name,canonical,name,bean,name,synchronized,this,dependent,bean,map,set,string,dependent,beans,this,dependent,bean,map,compute,if,absent,canonical,name,k,new,linked,hash,set,8,if,dependent,beans,add,dependent,bean,name,return,synchronized,this,dependencies,for,bean,map,set,string,dependencies,for,bean,this,dependencies,for,bean,map,compute,if,absent,dependent,bean,name,k,new,linked,hash,set,8,dependencies,for,bean,add,canonical,name
DefaultSingletonBeanRegistry -> public void registerDependentBean(String beanName, String dependentBeanName);1532091916;Register a dependent bean for the given bean,_to be destroyed before the given bean is destroyed._@param beanName the name of the bean_@param dependentBeanName the name of the dependent bean;public void registerDependentBean(String beanName, String dependentBeanName) {_		String canonicalName = canonicalName(beanName)___		synchronized (this.dependentBeanMap) {_			Set<String> dependentBeans =_					this.dependentBeanMap.computeIfAbsent(canonicalName, k -> new LinkedHashSet<>(8))__			if (!dependentBeans.add(dependentBeanName)) {_				return__			}_		}__		synchronized (this.dependenciesForBeanMap) {_			Set<String> dependenciesForBean =_					this.dependenciesForBeanMap.computeIfAbsent(dependentBeanName, k -> new LinkedHashSet<>(8))__			dependenciesForBean.add(canonicalName)__		}_	};register,a,dependent,bean,for,the,given,bean,to,be,destroyed,before,the,given,bean,is,destroyed,param,bean,name,the,name,of,the,bean,param,dependent,bean,name,the,name,of,the,dependent,bean;public,void,register,dependent,bean,string,bean,name,string,dependent,bean,name,string,canonical,name,canonical,name,bean,name,synchronized,this,dependent,bean,map,set,string,dependent,beans,this,dependent,bean,map,compute,if,absent,canonical,name,k,new,linked,hash,set,8,if,dependent,beans,add,dependent,bean,name,return,synchronized,this,dependencies,for,bean,map,set,string,dependencies,for,bean,this,dependencies,for,bean,map,compute,if,absent,dependent,bean,name,k,new,linked,hash,set,8,dependencies,for,bean,add,canonical,name
DefaultSingletonBeanRegistry -> public void registerDependentBean(String beanName, String dependentBeanName);1532706365;Register a dependent bean for the given bean,_to be destroyed before the given bean is destroyed._@param beanName the name of the bean_@param dependentBeanName the name of the dependent bean;public void registerDependentBean(String beanName, String dependentBeanName) {_		String canonicalName = canonicalName(beanName)___		synchronized (this.dependentBeanMap) {_			Set<String> dependentBeans =_					this.dependentBeanMap.computeIfAbsent(canonicalName, k -> new LinkedHashSet<>(8))__			if (!dependentBeans.add(dependentBeanName)) {_				return__			}_		}__		synchronized (this.dependenciesForBeanMap) {_			Set<String> dependenciesForBean =_					this.dependenciesForBeanMap.computeIfAbsent(dependentBeanName, k -> new LinkedHashSet<>(8))__			dependenciesForBean.add(canonicalName)__		}_	};register,a,dependent,bean,for,the,given,bean,to,be,destroyed,before,the,given,bean,is,destroyed,param,bean,name,the,name,of,the,bean,param,dependent,bean,name,the,name,of,the,dependent,bean;public,void,register,dependent,bean,string,bean,name,string,dependent,bean,name,string,canonical,name,canonical,name,bean,name,synchronized,this,dependent,bean,map,set,string,dependent,beans,this,dependent,bean,map,compute,if,absent,canonical,name,k,new,linked,hash,set,8,if,dependent,beans,add,dependent,bean,name,return,synchronized,this,dependencies,for,bean,map,set,string,dependencies,for,bean,this,dependencies,for,bean,map,compute,if,absent,dependent,bean,name,k,new,linked,hash,set,8,dependencies,for,bean,add,canonical,name
DefaultSingletonBeanRegistry -> public final boolean isSingletonCurrentlyInCreation(String beanName);1328020251;Return whether the specified singleton bean is currently in creation_(within the entire factory)._@param beanName the name of the bean;public final boolean isSingletonCurrentlyInCreation(String beanName) {_		return this.singletonsCurrentlyInCreation.contains(beanName)__	};return,whether,the,specified,singleton,bean,is,currently,in,creation,within,the,entire,factory,param,bean,name,the,name,of,the,bean;public,final,boolean,is,singleton,currently,in,creation,string,bean,name,return,this,singletons,currently,in,creation,contains,bean,name
DefaultSingletonBeanRegistry -> public final boolean isSingletonCurrentlyInCreation(String beanName);1349872135;Return whether the specified singleton bean is currently in creation_(within the entire factory)._@param beanName the name of the bean;public final boolean isSingletonCurrentlyInCreation(String beanName) {_		return this.singletonsCurrentlyInCreation.contains(beanName)__	};return,whether,the,specified,singleton,bean,is,currently,in,creation,within,the,entire,factory,param,bean,name,the,name,of,the,bean;public,final,boolean,is,singleton,currently,in,creation,string,bean,name,return,this,singletons,currently,in,creation,contains,bean,name
DefaultSingletonBeanRegistry -> public final boolean isSingletonCurrentlyInCreation(String beanName);1352412938;Return whether the specified singleton bean is currently in creation_(within the entire factory)._@param beanName the name of the bean;public final boolean isSingletonCurrentlyInCreation(String beanName) {_		return this.singletonsCurrentlyInCreation.contains(beanName)__	};return,whether,the,specified,singleton,bean,is,currently,in,creation,within,the,entire,factory,param,bean,name,the,name,of,the,bean;public,final,boolean,is,singleton,currently,in,creation,string,bean,name,return,this,singletons,currently,in,creation,contains,bean,name
DefaultSingletonBeanRegistry -> protected void afterSingletonCreation(String beanName);1328020251;Callback after singleton creation._<p>Default implementation marks the singleton as not in creation anymore._@param beanName the name of the singleton that has been created_@see #isSingletonCurrentlyInCreation;protected void afterSingletonCreation(String beanName) {_		if (!this.inCreationCheckExclusions.contains(beanName) && !this.singletonsCurrentlyInCreation.remove(beanName)) {_			throw new IllegalStateException("Singleton '" + beanName + "' isn't currently in creation")__		}_	};callback,after,singleton,creation,p,default,implementation,marks,the,singleton,as,not,in,creation,anymore,param,bean,name,the,name,of,the,singleton,that,has,been,created,see,is,singleton,currently,in,creation;protected,void,after,singleton,creation,string,bean,name,if,this,in,creation,check,exclusions,contains,bean,name,this,singletons,currently,in,creation,remove,bean,name,throw,new,illegal,state,exception,singleton,bean,name,isn,t,currently,in,creation
DefaultSingletonBeanRegistry -> protected void afterSingletonCreation(String beanName);1349872135;Callback after singleton creation._<p>The default implementation marks the singleton as not in creation anymore._@param beanName the name of the singleton that has been created_@see #isSingletonCurrentlyInCreation;protected void afterSingletonCreation(String beanName) {_		if (!this.inCreationCheckExclusions.contains(beanName) && !this.singletonsCurrentlyInCreation.remove(beanName)) {_			throw new IllegalStateException("Singleton '" + beanName + "' isn't currently in creation")__		}_	};callback,after,singleton,creation,p,the,default,implementation,marks,the,singleton,as,not,in,creation,anymore,param,bean,name,the,name,of,the,singleton,that,has,been,created,see,is,singleton,currently,in,creation;protected,void,after,singleton,creation,string,bean,name,if,this,in,creation,check,exclusions,contains,bean,name,this,singletons,currently,in,creation,remove,bean,name,throw,new,illegal,state,exception,singleton,bean,name,isn,t,currently,in,creation
DefaultSingletonBeanRegistry -> protected void afterSingletonCreation(String beanName);1352412938;Callback after singleton creation._<p>The default implementation marks the singleton as not in creation anymore._@param beanName the name of the singleton that has been created_@see #isSingletonCurrentlyInCreation;protected void afterSingletonCreation(String beanName) {_		if (!this.inCreationCheckExclusions.contains(beanName) && !this.singletonsCurrentlyInCreation.remove(beanName)) {_			throw new IllegalStateException("Singleton '" + beanName + "' isn't currently in creation")__		}_	};callback,after,singleton,creation,p,the,default,implementation,marks,the,singleton,as,not,in,creation,anymore,param,bean,name,the,name,of,the,singleton,that,has,been,created,see,is,singleton,currently,in,creation;protected,void,after,singleton,creation,string,bean,name,if,this,in,creation,check,exclusions,contains,bean,name,this,singletons,currently,in,creation,remove,bean,name,throw,new,illegal,state,exception,singleton,bean,name,isn,t,currently,in,creation
DefaultSingletonBeanRegistry -> protected void afterSingletonCreation(String beanName);1352418897;Callback after singleton creation._<p>The default implementation marks the singleton as not in creation anymore._@param beanName the name of the singleton that has been created_@see #isSingletonCurrentlyInCreation;protected void afterSingletonCreation(String beanName) {_		if (!this.inCreationCheckExclusions.containsKey(beanName) &&_				!this.singletonsCurrentlyInCreation.remove(beanName)) {_			throw new IllegalStateException("Singleton '" + beanName + "' isn't currently in creation")__		}_	};callback,after,singleton,creation,p,the,default,implementation,marks,the,singleton,as,not,in,creation,anymore,param,bean,name,the,name,of,the,singleton,that,has,been,created,see,is,singleton,currently,in,creation;protected,void,after,singleton,creation,string,bean,name,if,this,in,creation,check,exclusions,contains,key,bean,name,this,singletons,currently,in,creation,remove,bean,name,throw,new,illegal,state,exception,singleton,bean,name,isn,t,currently,in,creation
DefaultSingletonBeanRegistry -> protected void afterSingletonCreation(String beanName);1353882772;Callback after singleton creation._<p>The default implementation marks the singleton as not in creation anymore._@param beanName the name of the singleton that has been created_@see #isSingletonCurrentlyInCreation;protected void afterSingletonCreation(String beanName) {_		if (!this.inCreationCheckExclusions.containsKey(beanName) &&_				!this.singletonsCurrentlyInCreation.remove(beanName)) {_			throw new IllegalStateException("Singleton '" + beanName + "' isn't currently in creation")__		}_	};callback,after,singleton,creation,p,the,default,implementation,marks,the,singleton,as,not,in,creation,anymore,param,bean,name,the,name,of,the,singleton,that,has,been,created,see,is,singleton,currently,in,creation;protected,void,after,singleton,creation,string,bean,name,if,this,in,creation,check,exclusions,contains,key,bean,name,this,singletons,currently,in,creation,remove,bean,name,throw,new,illegal,state,exception,singleton,bean,name,isn,t,currently,in,creation
DefaultSingletonBeanRegistry -> protected void afterSingletonCreation(String beanName);1355352386;Callback after singleton creation._<p>The default implementation marks the singleton as not in creation anymore._@param beanName the name of the singleton that has been created_@see #isSingletonCurrentlyInCreation;protected void afterSingletonCreation(String beanName) {_		if (!this.inCreationCheckExclusions.containsKey(beanName) &&_				!this.singletonsCurrentlyInCreation.remove(beanName)) {_			throw new IllegalStateException("Singleton '" + beanName + "' isn't currently in creation")__		}_	};callback,after,singleton,creation,p,the,default,implementation,marks,the,singleton,as,not,in,creation,anymore,param,bean,name,the,name,of,the,singleton,that,has,been,created,see,is,singleton,currently,in,creation;protected,void,after,singleton,creation,string,bean,name,if,this,in,creation,check,exclusions,contains,key,bean,name,this,singletons,currently,in,creation,remove,bean,name,throw,new,illegal,state,exception,singleton,bean,name,isn,t,currently,in,creation
DefaultSingletonBeanRegistry -> protected void afterSingletonCreation(String beanName);1356735495;Callback after singleton creation._<p>The default implementation marks the singleton as not in creation anymore._@param beanName the name of the singleton that has been created_@see #isSingletonCurrentlyInCreation;protected void afterSingletonCreation(String beanName) {_		if (!this.inCreationCheckExclusions.containsKey(beanName) &&_				!this.singletonsCurrentlyInCreation.remove(beanName)) {_			throw new IllegalStateException("Singleton '" + beanName + "' isn't currently in creation")__		}_	};callback,after,singleton,creation,p,the,default,implementation,marks,the,singleton,as,not,in,creation,anymore,param,bean,name,the,name,of,the,singleton,that,has,been,created,see,is,singleton,currently,in,creation;protected,void,after,singleton,creation,string,bean,name,if,this,in,creation,check,exclusions,contains,key,bean,name,this,singletons,currently,in,creation,remove,bean,name,throw,new,illegal,state,exception,singleton,bean,name,isn,t,currently,in,creation
DefaultSingletonBeanRegistry -> protected void afterSingletonCreation(String beanName);1357119239;Callback after singleton creation._<p>The default implementation marks the singleton as not in creation anymore._@param beanName the name of the singleton that has been created_@see #isSingletonCurrentlyInCreation;protected void afterSingletonCreation(String beanName) {_		if (!this.inCreationCheckExclusions.containsKey(beanName) &&_				!this.singletonsCurrentlyInCreation.remove(beanName)) {_			throw new IllegalStateException("Singleton '" + beanName + "' isn't currently in creation")__		}_	};callback,after,singleton,creation,p,the,default,implementation,marks,the,singleton,as,not,in,creation,anymore,param,bean,name,the,name,of,the,singleton,that,has,been,created,see,is,singleton,currently,in,creation;protected,void,after,singleton,creation,string,bean,name,if,this,in,creation,check,exclusions,contains,key,bean,name,this,singletons,currently,in,creation,remove,bean,name,throw,new,illegal,state,exception,singleton,bean,name,isn,t,currently,in,creation
DefaultSingletonBeanRegistry -> protected void afterSingletonCreation(String beanName);1364505266;Callback after singleton creation._<p>The default implementation marks the singleton as not in creation anymore._@param beanName the name of the singleton that has been created_@see #isSingletonCurrentlyInCreation;protected void afterSingletonCreation(String beanName) {_		if (!this.inCreationCheckExclusions.contains(beanName) &&_				!this.singletonsCurrentlyInCreation.remove(beanName)) {_			throw new IllegalStateException("Singleton '" + beanName + "' isn't currently in creation")__		}_	};callback,after,singleton,creation,p,the,default,implementation,marks,the,singleton,as,not,in,creation,anymore,param,bean,name,the,name,of,the,singleton,that,has,been,created,see,is,singleton,currently,in,creation;protected,void,after,singleton,creation,string,bean,name,if,this,in,creation,check,exclusions,contains,bean,name,this,singletons,currently,in,creation,remove,bean,name,throw,new,illegal,state,exception,singleton,bean,name,isn,t,currently,in,creation
DefaultSingletonBeanRegistry -> protected void afterSingletonCreation(String beanName);1368482696;Callback after singleton creation._<p>The default implementation marks the singleton as not in creation anymore._@param beanName the name of the singleton that has been created_@see #isSingletonCurrentlyInCreation;protected void afterSingletonCreation(String beanName) {_		if (!this.inCreationCheckExclusions.contains(beanName) &&_				!this.singletonsCurrentlyInCreation.remove(beanName)) {_			throw new IllegalStateException("Singleton '" + beanName + "' isn't currently in creation")__		}_	};callback,after,singleton,creation,p,the,default,implementation,marks,the,singleton,as,not,in,creation,anymore,param,bean,name,the,name,of,the,singleton,that,has,been,created,see,is,singleton,currently,in,creation;protected,void,after,singleton,creation,string,bean,name,if,this,in,creation,check,exclusions,contains,bean,name,this,singletons,currently,in,creation,remove,bean,name,throw,new,illegal,state,exception,singleton,bean,name,isn,t,currently,in,creation
DefaultSingletonBeanRegistry -> protected void afterSingletonCreation(String beanName);1374698947;Callback after singleton creation._<p>The default implementation marks the singleton as not in creation anymore._@param beanName the name of the singleton that has been created_@see #isSingletonCurrentlyInCreation;protected void afterSingletonCreation(String beanName) {_		if (!this.inCreationCheckExclusions.contains(beanName) &&_				!this.singletonsCurrentlyInCreation.remove(beanName)) {_			throw new IllegalStateException("Singleton '" + beanName + "' isn't currently in creation")__		}_	};callback,after,singleton,creation,p,the,default,implementation,marks,the,singleton,as,not,in,creation,anymore,param,bean,name,the,name,of,the,singleton,that,has,been,created,see,is,singleton,currently,in,creation;protected,void,after,singleton,creation,string,bean,name,if,this,in,creation,check,exclusions,contains,bean,name,this,singletons,currently,in,creation,remove,bean,name,throw,new,illegal,state,exception,singleton,bean,name,isn,t,currently,in,creation
DefaultSingletonBeanRegistry -> protected void afterSingletonCreation(String beanName);1385412762;Callback after singleton creation._<p>The default implementation marks the singleton as not in creation anymore._@param beanName the name of the singleton that has been created_@see #isSingletonCurrentlyInCreation;protected void afterSingletonCreation(String beanName) {_		if (!this.inCreationCheckExclusions.contains(beanName) &&_				!this.singletonsCurrentlyInCreation.remove(beanName)) {_			throw new IllegalStateException("Singleton '" + beanName + "' isn't currently in creation")__		}_	};callback,after,singleton,creation,p,the,default,implementation,marks,the,singleton,as,not,in,creation,anymore,param,bean,name,the,name,of,the,singleton,that,has,been,created,see,is,singleton,currently,in,creation;protected,void,after,singleton,creation,string,bean,name,if,this,in,creation,check,exclusions,contains,bean,name,this,singletons,currently,in,creation,remove,bean,name,throw,new,illegal,state,exception,singleton,bean,name,isn,t,currently,in,creation
DefaultSingletonBeanRegistry -> protected void afterSingletonCreation(String beanName);1385984377;Callback after singleton creation._<p>The default implementation marks the singleton as not in creation anymore._@param beanName the name of the singleton that has been created_@see #isSingletonCurrentlyInCreation;protected void afterSingletonCreation(String beanName) {_		if (!this.inCreationCheckExclusions.contains(beanName) &&_				!this.singletonsCurrentlyInCreation.remove(beanName)) {_			throw new IllegalStateException("Singleton '" + beanName + "' isn't currently in creation")__		}_	};callback,after,singleton,creation,p,the,default,implementation,marks,the,singleton,as,not,in,creation,anymore,param,bean,name,the,name,of,the,singleton,that,has,been,created,see,is,singleton,currently,in,creation;protected,void,after,singleton,creation,string,bean,name,if,this,in,creation,check,exclusions,contains,bean,name,this,singletons,currently,in,creation,remove,bean,name,throw,new,illegal,state,exception,singleton,bean,name,isn,t,currently,in,creation
DefaultSingletonBeanRegistry -> protected void afterSingletonCreation(String beanName);1405430015;Callback after singleton creation._<p>The default implementation marks the singleton as not in creation anymore._@param beanName the name of the singleton that has been created_@see #isSingletonCurrentlyInCreation;protected void afterSingletonCreation(String beanName) {_		if (!this.inCreationCheckExclusions.contains(beanName) && !this.singletonsCurrentlyInCreation.remove(beanName)) {_			throw new IllegalStateException("Singleton '" + beanName + "' isn't currently in creation")__		}_	};callback,after,singleton,creation,p,the,default,implementation,marks,the,singleton,as,not,in,creation,anymore,param,bean,name,the,name,of,the,singleton,that,has,been,created,see,is,singleton,currently,in,creation;protected,void,after,singleton,creation,string,bean,name,if,this,in,creation,check,exclusions,contains,bean,name,this,singletons,currently,in,creation,remove,bean,name,throw,new,illegal,state,exception,singleton,bean,name,isn,t,currently,in,creation
DefaultSingletonBeanRegistry -> protected void afterSingletonCreation(String beanName);1408528936;Callback after singleton creation._<p>The default implementation marks the singleton as not in creation anymore._@param beanName the name of the singleton that has been created_@see #isSingletonCurrentlyInCreation;protected void afterSingletonCreation(String beanName) {_		if (!this.inCreationCheckExclusions.contains(beanName) && !this.singletonsCurrentlyInCreation.remove(beanName)) {_			throw new IllegalStateException("Singleton '" + beanName + "' isn't currently in creation")__		}_	};callback,after,singleton,creation,p,the,default,implementation,marks,the,singleton,as,not,in,creation,anymore,param,bean,name,the,name,of,the,singleton,that,has,been,created,see,is,singleton,currently,in,creation;protected,void,after,singleton,creation,string,bean,name,if,this,in,creation,check,exclusions,contains,bean,name,this,singletons,currently,in,creation,remove,bean,name,throw,new,illegal,state,exception,singleton,bean,name,isn,t,currently,in,creation
DefaultSingletonBeanRegistry -> protected void afterSingletonCreation(String beanName);1408624154;Callback after singleton creation._<p>The default implementation marks the singleton as not in creation anymore._@param beanName the name of the singleton that has been created_@see #isSingletonCurrentlyInCreation;protected void afterSingletonCreation(String beanName) {_		if (!this.inCreationCheckExclusions.contains(beanName) && !this.singletonsCurrentlyInCreation.remove(beanName)) {_			throw new IllegalStateException("Singleton '" + beanName + "' isn't currently in creation")__		}_	};callback,after,singleton,creation,p,the,default,implementation,marks,the,singleton,as,not,in,creation,anymore,param,bean,name,the,name,of,the,singleton,that,has,been,created,see,is,singleton,currently,in,creation;protected,void,after,singleton,creation,string,bean,name,if,this,in,creation,check,exclusions,contains,bean,name,this,singletons,currently,in,creation,remove,bean,name,throw,new,illegal,state,exception,singleton,bean,name,isn,t,currently,in,creation
DefaultSingletonBeanRegistry -> protected void afterSingletonCreation(String beanName);1409688815;Callback after singleton creation._<p>The default implementation marks the singleton as not in creation anymore._@param beanName the name of the singleton that has been created_@see #isSingletonCurrentlyInCreation;protected void afterSingletonCreation(String beanName) {_		if (!this.inCreationCheckExclusions.contains(beanName) && !this.singletonsCurrentlyInCreation.remove(beanName)) {_			throw new IllegalStateException("Singleton '" + beanName + "' isn't currently in creation")__		}_	};callback,after,singleton,creation,p,the,default,implementation,marks,the,singleton,as,not,in,creation,anymore,param,bean,name,the,name,of,the,singleton,that,has,been,created,see,is,singleton,currently,in,creation;protected,void,after,singleton,creation,string,bean,name,if,this,in,creation,check,exclusions,contains,bean,name,this,singletons,currently,in,creation,remove,bean,name,throw,new,illegal,state,exception,singleton,bean,name,isn,t,currently,in,creation
DefaultSingletonBeanRegistry -> protected void afterSingletonCreation(String beanName);1417966231;Callback after singleton creation._<p>The default implementation marks the singleton as not in creation anymore._@param beanName the name of the singleton that has been created_@see #isSingletonCurrentlyInCreation;protected void afterSingletonCreation(String beanName) {_		if (!this.inCreationCheckExclusions.contains(beanName) && !this.singletonsCurrentlyInCreation.remove(beanName)) {_			throw new IllegalStateException("Singleton '" + beanName + "' isn't currently in creation")__		}_	};callback,after,singleton,creation,p,the,default,implementation,marks,the,singleton,as,not,in,creation,anymore,param,bean,name,the,name,of,the,singleton,that,has,been,created,see,is,singleton,currently,in,creation;protected,void,after,singleton,creation,string,bean,name,if,this,in,creation,check,exclusions,contains,bean,name,this,singletons,currently,in,creation,remove,bean,name,throw,new,illegal,state,exception,singleton,bean,name,isn,t,currently,in,creation
DefaultSingletonBeanRegistry -> protected void afterSingletonCreation(String beanName);1424972106;Callback after singleton creation._<p>The default implementation marks the singleton as not in creation anymore._@param beanName the name of the singleton that has been created_@see #isSingletonCurrentlyInCreation;protected void afterSingletonCreation(String beanName) {_		if (!this.inCreationCheckExclusions.contains(beanName) && !this.singletonsCurrentlyInCreation.remove(beanName)) {_			throw new IllegalStateException("Singleton '" + beanName + "' isn't currently in creation")__		}_	};callback,after,singleton,creation,p,the,default,implementation,marks,the,singleton,as,not,in,creation,anymore,param,bean,name,the,name,of,the,singleton,that,has,been,created,see,is,singleton,currently,in,creation;protected,void,after,singleton,creation,string,bean,name,if,this,in,creation,check,exclusions,contains,bean,name,this,singletons,currently,in,creation,remove,bean,name,throw,new,illegal,state,exception,singleton,bean,name,isn,t,currently,in,creation
DefaultSingletonBeanRegistry -> protected void afterSingletonCreation(String beanName);1447399860;Callback after singleton creation._<p>The default implementation marks the singleton as not in creation anymore._@param beanName the name of the singleton that has been created_@see #isSingletonCurrentlyInCreation;protected void afterSingletonCreation(String beanName) {_		if (!this.inCreationCheckExclusions.contains(beanName) && !this.singletonsCurrentlyInCreation.remove(beanName)) {_			throw new IllegalStateException("Singleton '" + beanName + "' isn't currently in creation")__		}_	};callback,after,singleton,creation,p,the,default,implementation,marks,the,singleton,as,not,in,creation,anymore,param,bean,name,the,name,of,the,singleton,that,has,been,created,see,is,singleton,currently,in,creation;protected,void,after,singleton,creation,string,bean,name,if,this,in,creation,check,exclusions,contains,bean,name,this,singletons,currently,in,creation,remove,bean,name,throw,new,illegal,state,exception,singleton,bean,name,isn,t,currently,in,creation
DefaultSingletonBeanRegistry -> protected void afterSingletonCreation(String beanName);1467730834;Callback after singleton creation._<p>The default implementation marks the singleton as not in creation anymore._@param beanName the name of the singleton that has been created_@see #isSingletonCurrentlyInCreation;protected void afterSingletonCreation(String beanName) {_		if (!this.inCreationCheckExclusions.contains(beanName) && !this.singletonsCurrentlyInCreation.remove(beanName)) {_			throw new IllegalStateException("Singleton '" + beanName + "' isn't currently in creation")__		}_	};callback,after,singleton,creation,p,the,default,implementation,marks,the,singleton,as,not,in,creation,anymore,param,bean,name,the,name,of,the,singleton,that,has,been,created,see,is,singleton,currently,in,creation;protected,void,after,singleton,creation,string,bean,name,if,this,in,creation,check,exclusions,contains,bean,name,this,singletons,currently,in,creation,remove,bean,name,throw,new,illegal,state,exception,singleton,bean,name,isn,t,currently,in,creation
DefaultSingletonBeanRegistry -> protected void afterSingletonCreation(String beanName);1467810738;Callback after singleton creation._<p>The default implementation marks the singleton as not in creation anymore._@param beanName the name of the singleton that has been created_@see #isSingletonCurrentlyInCreation;protected void afterSingletonCreation(String beanName) {_		if (!this.inCreationCheckExclusions.contains(beanName) && !this.singletonsCurrentlyInCreation.remove(beanName)) {_			throw new IllegalStateException("Singleton '" + beanName + "' isn't currently in creation")__		}_	};callback,after,singleton,creation,p,the,default,implementation,marks,the,singleton,as,not,in,creation,anymore,param,bean,name,the,name,of,the,singleton,that,has,been,created,see,is,singleton,currently,in,creation;protected,void,after,singleton,creation,string,bean,name,if,this,in,creation,check,exclusions,contains,bean,name,this,singletons,currently,in,creation,remove,bean,name,throw,new,illegal,state,exception,singleton,bean,name,isn,t,currently,in,creation
DefaultSingletonBeanRegistry -> protected void afterSingletonCreation(String beanName);1469561191;Callback after singleton creation._<p>The default implementation marks the singleton as not in creation anymore._@param beanName the name of the singleton that has been created_@see #isSingletonCurrentlyInCreation;protected void afterSingletonCreation(String beanName) {_		if (!this.inCreationCheckExclusions.contains(beanName) && !this.singletonsCurrentlyInCreation.remove(beanName)) {_			throw new IllegalStateException("Singleton '" + beanName + "' isn't currently in creation")__		}_	};callback,after,singleton,creation,p,the,default,implementation,marks,the,singleton,as,not,in,creation,anymore,param,bean,name,the,name,of,the,singleton,that,has,been,created,see,is,singleton,currently,in,creation;protected,void,after,singleton,creation,string,bean,name,if,this,in,creation,check,exclusions,contains,bean,name,this,singletons,currently,in,creation,remove,bean,name,throw,new,illegal,state,exception,singleton,bean,name,isn,t,currently,in,creation
DefaultSingletonBeanRegistry -> protected void afterSingletonCreation(String beanName);1478538021;Callback after singleton creation._<p>The default implementation marks the singleton as not in creation anymore._@param beanName the name of the singleton that has been created_@see #isSingletonCurrentlyInCreation;protected void afterSingletonCreation(String beanName) {_		if (!this.inCreationCheckExclusions.contains(beanName) && !this.singletonsCurrentlyInCreation.remove(beanName)) {_			throw new IllegalStateException("Singleton '" + beanName + "' isn't currently in creation")__		}_	};callback,after,singleton,creation,p,the,default,implementation,marks,the,singleton,as,not,in,creation,anymore,param,bean,name,the,name,of,the,singleton,that,has,been,created,see,is,singleton,currently,in,creation;protected,void,after,singleton,creation,string,bean,name,if,this,in,creation,check,exclusions,contains,bean,name,this,singletons,currently,in,creation,remove,bean,name,throw,new,illegal,state,exception,singleton,bean,name,isn,t,currently,in,creation
DefaultSingletonBeanRegistry -> protected void afterSingletonCreation(String beanName);1495868221;Callback after singleton creation._<p>The default implementation marks the singleton as not in creation anymore._@param beanName the name of the singleton that has been created_@see #isSingletonCurrentlyInCreation;protected void afterSingletonCreation(String beanName) {_		if (!this.inCreationCheckExclusions.contains(beanName) && !this.singletonsCurrentlyInCreation.remove(beanName)) {_			throw new IllegalStateException("Singleton '" + beanName + "' isn't currently in creation")__		}_	};callback,after,singleton,creation,p,the,default,implementation,marks,the,singleton,as,not,in,creation,anymore,param,bean,name,the,name,of,the,singleton,that,has,been,created,see,is,singleton,currently,in,creation;protected,void,after,singleton,creation,string,bean,name,if,this,in,creation,check,exclusions,contains,bean,name,this,singletons,currently,in,creation,remove,bean,name,throw,new,illegal,state,exception,singleton,bean,name,isn,t,currently,in,creation
DefaultSingletonBeanRegistry -> protected void afterSingletonCreation(String beanName);1496259743;Callback after singleton creation._<p>The default implementation marks the singleton as not in creation anymore._@param beanName the name of the singleton that has been created_@see #isSingletonCurrentlyInCreation;protected void afterSingletonCreation(String beanName) {_		if (!this.inCreationCheckExclusions.contains(beanName) && !this.singletonsCurrentlyInCreation.remove(beanName)) {_			throw new IllegalStateException("Singleton '" + beanName + "' isn't currently in creation")__		}_	};callback,after,singleton,creation,p,the,default,implementation,marks,the,singleton,as,not,in,creation,anymore,param,bean,name,the,name,of,the,singleton,that,has,been,created,see,is,singleton,currently,in,creation;protected,void,after,singleton,creation,string,bean,name,if,this,in,creation,check,exclusions,contains,bean,name,this,singletons,currently,in,creation,remove,bean,name,throw,new,illegal,state,exception,singleton,bean,name,isn,t,currently,in,creation
DefaultSingletonBeanRegistry -> protected void afterSingletonCreation(String beanName);1496837955;Callback after singleton creation._<p>The default implementation marks the singleton as not in creation anymore._@param beanName the name of the singleton that has been created_@see #isSingletonCurrentlyInCreation;protected void afterSingletonCreation(String beanName) {_		if (!this.inCreationCheckExclusions.contains(beanName) && !this.singletonsCurrentlyInCreation.remove(beanName)) {_			throw new IllegalStateException("Singleton '" + beanName + "' isn't currently in creation")__		}_	};callback,after,singleton,creation,p,the,default,implementation,marks,the,singleton,as,not,in,creation,anymore,param,bean,name,the,name,of,the,singleton,that,has,been,created,see,is,singleton,currently,in,creation;protected,void,after,singleton,creation,string,bean,name,if,this,in,creation,check,exclusions,contains,bean,name,this,singletons,currently,in,creation,remove,bean,name,throw,new,illegal,state,exception,singleton,bean,name,isn,t,currently,in,creation
DefaultSingletonBeanRegistry -> protected void afterSingletonCreation(String beanName);1498780456;Callback after singleton creation._<p>The default implementation marks the singleton as not in creation anymore._@param beanName the name of the singleton that has been created_@see #isSingletonCurrentlyInCreation;protected void afterSingletonCreation(String beanName) {_		if (!this.inCreationCheckExclusions.contains(beanName) && !this.singletonsCurrentlyInCreation.remove(beanName)) {_			throw new IllegalStateException("Singleton '" + beanName + "' isn't currently in creation")__		}_	};callback,after,singleton,creation,p,the,default,implementation,marks,the,singleton,as,not,in,creation,anymore,param,bean,name,the,name,of,the,singleton,that,has,been,created,see,is,singleton,currently,in,creation;protected,void,after,singleton,creation,string,bean,name,if,this,in,creation,check,exclusions,contains,bean,name,this,singletons,currently,in,creation,remove,bean,name,throw,new,illegal,state,exception,singleton,bean,name,isn,t,currently,in,creation
DefaultSingletonBeanRegistry -> protected void afterSingletonCreation(String beanName);1502974979;Callback after singleton creation._<p>The default implementation marks the singleton as not in creation anymore._@param beanName the name of the singleton that has been created_@see #isSingletonCurrentlyInCreation;protected void afterSingletonCreation(String beanName) {_		if (!this.inCreationCheckExclusions.contains(beanName) && !this.singletonsCurrentlyInCreation.remove(beanName)) {_			throw new IllegalStateException("Singleton '" + beanName + "' isn't currently in creation")__		}_	};callback,after,singleton,creation,p,the,default,implementation,marks,the,singleton,as,not,in,creation,anymore,param,bean,name,the,name,of,the,singleton,that,has,been,created,see,is,singleton,currently,in,creation;protected,void,after,singleton,creation,string,bean,name,if,this,in,creation,check,exclusions,contains,bean,name,this,singletons,currently,in,creation,remove,bean,name,throw,new,illegal,state,exception,singleton,bean,name,isn,t,currently,in,creation
DefaultSingletonBeanRegistry -> protected void afterSingletonCreation(String beanName);1503007895;Callback after singleton creation._<p>The default implementation marks the singleton as not in creation anymore._@param beanName the name of the singleton that has been created_@see #isSingletonCurrentlyInCreation;protected void afterSingletonCreation(String beanName) {_		if (!this.inCreationCheckExclusions.contains(beanName) && !this.singletonsCurrentlyInCreation.remove(beanName)) {_			throw new IllegalStateException("Singleton '" + beanName + "' isn't currently in creation")__		}_	};callback,after,singleton,creation,p,the,default,implementation,marks,the,singleton,as,not,in,creation,anymore,param,bean,name,the,name,of,the,singleton,that,has,been,created,see,is,singleton,currently,in,creation;protected,void,after,singleton,creation,string,bean,name,if,this,in,creation,check,exclusions,contains,bean,name,this,singletons,currently,in,creation,remove,bean,name,throw,new,illegal,state,exception,singleton,bean,name,isn,t,currently,in,creation
DefaultSingletonBeanRegistry -> protected void afterSingletonCreation(String beanName);1518810557;Callback after singleton creation._<p>The default implementation marks the singleton as not in creation anymore._@param beanName the name of the singleton that has been created_@see #isSingletonCurrentlyInCreation;protected void afterSingletonCreation(String beanName) {_		if (!this.inCreationCheckExclusions.contains(beanName) && !this.singletonsCurrentlyInCreation.remove(beanName)) {_			throw new IllegalStateException("Singleton '" + beanName + "' isn't currently in creation")__		}_	};callback,after,singleton,creation,p,the,default,implementation,marks,the,singleton,as,not,in,creation,anymore,param,bean,name,the,name,of,the,singleton,that,has,been,created,see,is,singleton,currently,in,creation;protected,void,after,singleton,creation,string,bean,name,if,this,in,creation,check,exclusions,contains,bean,name,this,singletons,currently,in,creation,remove,bean,name,throw,new,illegal,state,exception,singleton,bean,name,isn,t,currently,in,creation
DefaultSingletonBeanRegistry -> protected void afterSingletonCreation(String beanName);1521822873;Callback after singleton creation._<p>The default implementation marks the singleton as not in creation anymore._@param beanName the name of the singleton that has been created_@see #isSingletonCurrentlyInCreation;protected void afterSingletonCreation(String beanName) {_		if (!this.inCreationCheckExclusions.contains(beanName) && !this.singletonsCurrentlyInCreation.remove(beanName)) {_			throw new IllegalStateException("Singleton '" + beanName + "' isn't currently in creation")__		}_	};callback,after,singleton,creation,p,the,default,implementation,marks,the,singleton,as,not,in,creation,anymore,param,bean,name,the,name,of,the,singleton,that,has,been,created,see,is,singleton,currently,in,creation;protected,void,after,singleton,creation,string,bean,name,if,this,in,creation,check,exclusions,contains,bean,name,this,singletons,currently,in,creation,remove,bean,name,throw,new,illegal,state,exception,singleton,bean,name,isn,t,currently,in,creation
DefaultSingletonBeanRegistry -> protected void afterSingletonCreation(String beanName);1521905451;Callback after singleton creation._<p>The default implementation marks the singleton as not in creation anymore._@param beanName the name of the singleton that has been created_@see #isSingletonCurrentlyInCreation;protected void afterSingletonCreation(String beanName) {_		if (!this.inCreationCheckExclusions.contains(beanName) && !this.singletonsCurrentlyInCreation.remove(beanName)) {_			throw new IllegalStateException("Singleton '" + beanName + "' isn't currently in creation")__		}_	};callback,after,singleton,creation,p,the,default,implementation,marks,the,singleton,as,not,in,creation,anymore,param,bean,name,the,name,of,the,singleton,that,has,been,created,see,is,singleton,currently,in,creation;protected,void,after,singleton,creation,string,bean,name,if,this,in,creation,check,exclusions,contains,bean,name,this,singletons,currently,in,creation,remove,bean,name,throw,new,illegal,state,exception,singleton,bean,name,isn,t,currently,in,creation
DefaultSingletonBeanRegistry -> protected void afterSingletonCreation(String beanName);1527623493;Callback after singleton creation._<p>The default implementation marks the singleton as not in creation anymore._@param beanName the name of the singleton that has been created_@see #isSingletonCurrentlyInCreation;protected void afterSingletonCreation(String beanName) {_		if (!this.inCreationCheckExclusions.contains(beanName) && !this.singletonsCurrentlyInCreation.remove(beanName)) {_			throw new IllegalStateException("Singleton '" + beanName + "' isn't currently in creation")__		}_	};callback,after,singleton,creation,p,the,default,implementation,marks,the,singleton,as,not,in,creation,anymore,param,bean,name,the,name,of,the,singleton,that,has,been,created,see,is,singleton,currently,in,creation;protected,void,after,singleton,creation,string,bean,name,if,this,in,creation,check,exclusions,contains,bean,name,this,singletons,currently,in,creation,remove,bean,name,throw,new,illegal,state,exception,singleton,bean,name,isn,t,currently,in,creation
DefaultSingletonBeanRegistry -> protected void afterSingletonCreation(String beanName);1530174524;Callback after singleton creation._<p>The default implementation marks the singleton as not in creation anymore._@param beanName the name of the singleton that has been created_@see #isSingletonCurrentlyInCreation;protected void afterSingletonCreation(String beanName) {_		if (!this.inCreationCheckExclusions.contains(beanName) && !this.singletonsCurrentlyInCreation.remove(beanName)) {_			throw new IllegalStateException("Singleton '" + beanName + "' isn't currently in creation")__		}_	};callback,after,singleton,creation,p,the,default,implementation,marks,the,singleton,as,not,in,creation,anymore,param,bean,name,the,name,of,the,singleton,that,has,been,created,see,is,singleton,currently,in,creation;protected,void,after,singleton,creation,string,bean,name,if,this,in,creation,check,exclusions,contains,bean,name,this,singletons,currently,in,creation,remove,bean,name,throw,new,illegal,state,exception,singleton,bean,name,isn,t,currently,in,creation
DefaultSingletonBeanRegistry -> protected void afterSingletonCreation(String beanName);1532091916;Callback after singleton creation._<p>The default implementation marks the singleton as not in creation anymore._@param beanName the name of the singleton that has been created_@see #isSingletonCurrentlyInCreation;protected void afterSingletonCreation(String beanName) {_		if (!this.inCreationCheckExclusions.contains(beanName) && !this.singletonsCurrentlyInCreation.remove(beanName)) {_			throw new IllegalStateException("Singleton '" + beanName + "' isn't currently in creation")__		}_	};callback,after,singleton,creation,p,the,default,implementation,marks,the,singleton,as,not,in,creation,anymore,param,bean,name,the,name,of,the,singleton,that,has,been,created,see,is,singleton,currently,in,creation;protected,void,after,singleton,creation,string,bean,name,if,this,in,creation,check,exclusions,contains,bean,name,this,singletons,currently,in,creation,remove,bean,name,throw,new,illegal,state,exception,singleton,bean,name,isn,t,currently,in,creation
DefaultSingletonBeanRegistry -> protected void afterSingletonCreation(String beanName);1532706365;Callback after singleton creation._<p>The default implementation marks the singleton as not in creation anymore._@param beanName the name of the singleton that has been created_@see #isSingletonCurrentlyInCreation;protected void afterSingletonCreation(String beanName) {_		if (!this.inCreationCheckExclusions.contains(beanName) && !this.singletonsCurrentlyInCreation.remove(beanName)) {_			throw new IllegalStateException("Singleton '" + beanName + "' isn't currently in creation")__		}_	};callback,after,singleton,creation,p,the,default,implementation,marks,the,singleton,as,not,in,creation,anymore,param,bean,name,the,name,of,the,singleton,that,has,been,created,see,is,singleton,currently,in,creation;protected,void,after,singleton,creation,string,bean,name,if,this,in,creation,check,exclusions,contains,bean,name,this,singletons,currently,in,creation,remove,bean,name,throw,new,illegal,state,exception,singleton,bean,name,isn,t,currently,in,creation
DefaultSingletonBeanRegistry -> protected boolean isDependent(String beanName, String dependentBeanName);1385984377;Determine whether the specified dependent bean has been registered as_dependent on the given bean or on any of its transitive dependencies._@param beanName the name of the bean to check_@param dependentBeanName the name of the dependent bean;protected boolean isDependent(String beanName, String dependentBeanName) {_		Set<String> dependentBeans = this.dependentBeanMap.get(beanName)__		if (dependentBeans == null) {_			return false__		}_		if (dependentBeans.contains(dependentBeanName)) {_			return true__		}_		for (String transitiveDependency : dependentBeans) {_			if (isDependent(transitiveDependency, dependentBeanName)) {_				return true__			}_		}_		return false__	};determine,whether,the,specified,dependent,bean,has,been,registered,as,dependent,on,the,given,bean,or,on,any,of,its,transitive,dependencies,param,bean,name,the,name,of,the,bean,to,check,param,dependent,bean,name,the,name,of,the,dependent,bean;protected,boolean,is,dependent,string,bean,name,string,dependent,bean,name,set,string,dependent,beans,this,dependent,bean,map,get,bean,name,if,dependent,beans,null,return,false,if,dependent,beans,contains,dependent,bean,name,return,true,for,string,transitive,dependency,dependent,beans,if,is,dependent,transitive,dependency,dependent,bean,name,return,true,return,false
DefaultSingletonBeanRegistry -> protected boolean isDependent(String beanName, String dependentBeanName);1405430015;Determine whether the specified dependent bean has been registered as_dependent on the given bean or on any of its transitive dependencies._@param beanName the name of the bean to check_@param dependentBeanName the name of the dependent bean;protected boolean isDependent(String beanName, String dependentBeanName) {_		Set<String> dependentBeans = this.dependentBeanMap.get(beanName)__		if (dependentBeans == null) {_			return false__		}_		if (dependentBeans.contains(dependentBeanName)) {_			return true__		}_		for (String transitiveDependency : dependentBeans) {_			if (isDependent(transitiveDependency, dependentBeanName)) {_				return true__			}_		}_		return false__	};determine,whether,the,specified,dependent,bean,has,been,registered,as,dependent,on,the,given,bean,or,on,any,of,its,transitive,dependencies,param,bean,name,the,name,of,the,bean,to,check,param,dependent,bean,name,the,name,of,the,dependent,bean;protected,boolean,is,dependent,string,bean,name,string,dependent,bean,name,set,string,dependent,beans,this,dependent,bean,map,get,bean,name,if,dependent,beans,null,return,false,if,dependent,beans,contains,dependent,bean,name,return,true,for,string,transitive,dependency,dependent,beans,if,is,dependent,transitive,dependency,dependent,bean,name,return,true,return,false
DefaultSingletonBeanRegistry -> protected boolean isDependent(String beanName, String dependentBeanName);1408528936;Determine whether the specified dependent bean has been registered as_dependent on the given bean or on any of its transitive dependencies._@param beanName the name of the bean to check_@param dependentBeanName the name of the dependent bean;protected boolean isDependent(String beanName, String dependentBeanName) {_		String canonicalName = canonicalName(beanName)__		Set<String> dependentBeans = this.dependentBeanMap.get(canonicalName)__		if (dependentBeans == null) {_			return false__		}_		if (dependentBeans.contains(dependentBeanName)) {_			return true__		}_		for (String transitiveDependency : dependentBeans) {_			if (isDependent(transitiveDependency, dependentBeanName)) {_				return true__			}_		}_		return false__	};determine,whether,the,specified,dependent,bean,has,been,registered,as,dependent,on,the,given,bean,or,on,any,of,its,transitive,dependencies,param,bean,name,the,name,of,the,bean,to,check,param,dependent,bean,name,the,name,of,the,dependent,bean;protected,boolean,is,dependent,string,bean,name,string,dependent,bean,name,string,canonical,name,canonical,name,bean,name,set,string,dependent,beans,this,dependent,bean,map,get,canonical,name,if,dependent,beans,null,return,false,if,dependent,beans,contains,dependent,bean,name,return,true,for,string,transitive,dependency,dependent,beans,if,is,dependent,transitive,dependency,dependent,bean,name,return,true,return,false
DefaultSingletonBeanRegistry -> protected boolean isDependent(String beanName, String dependentBeanName);1408624154;Determine whether the specified dependent bean has been registered as_dependent on the given bean or on any of its transitive dependencies._@param beanName the name of the bean to check_@param dependentBeanName the name of the dependent bean;protected boolean isDependent(String beanName, String dependentBeanName) {_		String canonicalName = canonicalName(beanName)__		Set<String> dependentBeans = this.dependentBeanMap.get(canonicalName)__		if (dependentBeans == null) {_			return false__		}_		if (dependentBeans.contains(dependentBeanName)) {_			return true__		}_		for (String transitiveDependency : dependentBeans) {_			if (isDependent(transitiveDependency, dependentBeanName)) {_				return true__			}_		}_		return false__	};determine,whether,the,specified,dependent,bean,has,been,registered,as,dependent,on,the,given,bean,or,on,any,of,its,transitive,dependencies,param,bean,name,the,name,of,the,bean,to,check,param,dependent,bean,name,the,name,of,the,dependent,bean;protected,boolean,is,dependent,string,bean,name,string,dependent,bean,name,string,canonical,name,canonical,name,bean,name,set,string,dependent,beans,this,dependent,bean,map,get,canonical,name,if,dependent,beans,null,return,false,if,dependent,beans,contains,dependent,bean,name,return,true,for,string,transitive,dependency,dependent,beans,if,is,dependent,transitive,dependency,dependent,bean,name,return,true,return,false
DefaultSingletonBeanRegistry -> protected boolean isDependent(String beanName, String dependentBeanName);1409688815;Determine whether the specified dependent bean has been registered as_dependent on the given bean or on any of its transitive dependencies._@param beanName the name of the bean to check_@param dependentBeanName the name of the dependent bean;protected boolean isDependent(String beanName, String dependentBeanName) {_		String canonicalName = canonicalName(beanName)__		Set<String> dependentBeans = this.dependentBeanMap.get(canonicalName)__		if (dependentBeans == null) {_			return false__		}_		if (dependentBeans.contains(dependentBeanName)) {_			return true__		}_		for (String transitiveDependency : dependentBeans) {_			if (isDependent(transitiveDependency, dependentBeanName)) {_				return true__			}_		}_		return false__	};determine,whether,the,specified,dependent,bean,has,been,registered,as,dependent,on,the,given,bean,or,on,any,of,its,transitive,dependencies,param,bean,name,the,name,of,the,bean,to,check,param,dependent,bean,name,the,name,of,the,dependent,bean;protected,boolean,is,dependent,string,bean,name,string,dependent,bean,name,string,canonical,name,canonical,name,bean,name,set,string,dependent,beans,this,dependent,bean,map,get,canonical,name,if,dependent,beans,null,return,false,if,dependent,beans,contains,dependent,bean,name,return,true,for,string,transitive,dependency,dependent,beans,if,is,dependent,transitive,dependency,dependent,bean,name,return,true,return,false
DefaultSingletonBeanRegistry -> protected boolean isDependent(String beanName, String dependentBeanName);1417966231;Determine whether the specified dependent bean has been registered as_dependent on the given bean or on any of its transitive dependencies._@param beanName the name of the bean to check_@param dependentBeanName the name of the dependent bean_@since 4.0;protected boolean isDependent(String beanName, String dependentBeanName) {_		return isDependent(beanName, dependentBeanName, null)__	};determine,whether,the,specified,dependent,bean,has,been,registered,as,dependent,on,the,given,bean,or,on,any,of,its,transitive,dependencies,param,bean,name,the,name,of,the,bean,to,check,param,dependent,bean,name,the,name,of,the,dependent,bean,since,4,0;protected,boolean,is,dependent,string,bean,name,string,dependent,bean,name,return,is,dependent,bean,name,dependent,bean,name,null
DefaultSingletonBeanRegistry -> protected boolean isDependent(String beanName, String dependentBeanName);1424972106;Determine whether the specified dependent bean has been registered as_dependent on the given bean or on any of its transitive dependencies._@param beanName the name of the bean to check_@param dependentBeanName the name of the dependent bean_@since 4.0;protected boolean isDependent(String beanName, String dependentBeanName) {_		return isDependent(beanName, dependentBeanName, null)__	};determine,whether,the,specified,dependent,bean,has,been,registered,as,dependent,on,the,given,bean,or,on,any,of,its,transitive,dependencies,param,bean,name,the,name,of,the,bean,to,check,param,dependent,bean,name,the,name,of,the,dependent,bean,since,4,0;protected,boolean,is,dependent,string,bean,name,string,dependent,bean,name,return,is,dependent,bean,name,dependent,bean,name,null
DefaultSingletonBeanRegistry -> protected boolean isDependent(String beanName, String dependentBeanName);1447399860;Determine whether the specified dependent bean has been registered as_dependent on the given bean or on any of its transitive dependencies._@param beanName the name of the bean to check_@param dependentBeanName the name of the dependent bean_@since 4.0;protected boolean isDependent(String beanName, String dependentBeanName) {_		return isDependent(beanName, dependentBeanName, null)__	};determine,whether,the,specified,dependent,bean,has,been,registered,as,dependent,on,the,given,bean,or,on,any,of,its,transitive,dependencies,param,bean,name,the,name,of,the,bean,to,check,param,dependent,bean,name,the,name,of,the,dependent,bean,since,4,0;protected,boolean,is,dependent,string,bean,name,string,dependent,bean,name,return,is,dependent,bean,name,dependent,bean,name,null
DefaultSingletonBeanRegistry -> protected boolean isDependent(String beanName, String dependentBeanName);1467730834;Determine whether the specified dependent bean has been registered as_dependent on the given bean or on any of its transitive dependencies._@param beanName the name of the bean to check_@param dependentBeanName the name of the dependent bean_@since 4.0;protected boolean isDependent(String beanName, String dependentBeanName) {_		return isDependent(beanName, dependentBeanName, null)__	};determine,whether,the,specified,dependent,bean,has,been,registered,as,dependent,on,the,given,bean,or,on,any,of,its,transitive,dependencies,param,bean,name,the,name,of,the,bean,to,check,param,dependent,bean,name,the,name,of,the,dependent,bean,since,4,0;protected,boolean,is,dependent,string,bean,name,string,dependent,bean,name,return,is,dependent,bean,name,dependent,bean,name,null
DefaultSingletonBeanRegistry -> protected boolean isDependent(String beanName, String dependentBeanName);1467810738;Determine whether the specified dependent bean has been registered as_dependent on the given bean or on any of its transitive dependencies._@param beanName the name of the bean to check_@param dependentBeanName the name of the dependent bean_@since 4.0;protected boolean isDependent(String beanName, String dependentBeanName) {_		return isDependent(beanName, dependentBeanName, null)__	};determine,whether,the,specified,dependent,bean,has,been,registered,as,dependent,on,the,given,bean,or,on,any,of,its,transitive,dependencies,param,bean,name,the,name,of,the,bean,to,check,param,dependent,bean,name,the,name,of,the,dependent,bean,since,4,0;protected,boolean,is,dependent,string,bean,name,string,dependent,bean,name,return,is,dependent,bean,name,dependent,bean,name,null
DefaultSingletonBeanRegistry -> protected boolean isDependent(String beanName, String dependentBeanName);1469561191;Determine whether the specified dependent bean has been registered as_dependent on the given bean or on any of its transitive dependencies._@param beanName the name of the bean to check_@param dependentBeanName the name of the dependent bean_@since 4.0;protected boolean isDependent(String beanName, String dependentBeanName) {_		return isDependent(beanName, dependentBeanName, null)__	};determine,whether,the,specified,dependent,bean,has,been,registered,as,dependent,on,the,given,bean,or,on,any,of,its,transitive,dependencies,param,bean,name,the,name,of,the,bean,to,check,param,dependent,bean,name,the,name,of,the,dependent,bean,since,4,0;protected,boolean,is,dependent,string,bean,name,string,dependent,bean,name,return,is,dependent,bean,name,dependent,bean,name,null
DefaultSingletonBeanRegistry -> protected boolean isDependent(String beanName, String dependentBeanName);1478538021;Determine whether the specified dependent bean has been registered as_dependent on the given bean or on any of its transitive dependencies._@param beanName the name of the bean to check_@param dependentBeanName the name of the dependent bean_@since 4.0;protected boolean isDependent(String beanName, String dependentBeanName) {_		return isDependent(beanName, dependentBeanName, null)__	};determine,whether,the,specified,dependent,bean,has,been,registered,as,dependent,on,the,given,bean,or,on,any,of,its,transitive,dependencies,param,bean,name,the,name,of,the,bean,to,check,param,dependent,bean,name,the,name,of,the,dependent,bean,since,4,0;protected,boolean,is,dependent,string,bean,name,string,dependent,bean,name,return,is,dependent,bean,name,dependent,bean,name,null
DefaultSingletonBeanRegistry -> protected boolean isDependent(String beanName, String dependentBeanName);1495868221;Determine whether the specified dependent bean has been registered as_dependent on the given bean or on any of its transitive dependencies._@param beanName the name of the bean to check_@param dependentBeanName the name of the dependent bean_@since 4.0;protected boolean isDependent(String beanName, String dependentBeanName) {_		return isDependent(beanName, dependentBeanName, null)__	};determine,whether,the,specified,dependent,bean,has,been,registered,as,dependent,on,the,given,bean,or,on,any,of,its,transitive,dependencies,param,bean,name,the,name,of,the,bean,to,check,param,dependent,bean,name,the,name,of,the,dependent,bean,since,4,0;protected,boolean,is,dependent,string,bean,name,string,dependent,bean,name,return,is,dependent,bean,name,dependent,bean,name,null
DefaultSingletonBeanRegistry -> protected boolean isDependent(String beanName, String dependentBeanName);1496259743;Determine whether the specified dependent bean has been registered as_dependent on the given bean or on any of its transitive dependencies._@param beanName the name of the bean to check_@param dependentBeanName the name of the dependent bean_@since 4.0;protected boolean isDependent(String beanName, String dependentBeanName) {_		return isDependent(beanName, dependentBeanName, null)__	};determine,whether,the,specified,dependent,bean,has,been,registered,as,dependent,on,the,given,bean,or,on,any,of,its,transitive,dependencies,param,bean,name,the,name,of,the,bean,to,check,param,dependent,bean,name,the,name,of,the,dependent,bean,since,4,0;protected,boolean,is,dependent,string,bean,name,string,dependent,bean,name,return,is,dependent,bean,name,dependent,bean,name,null
DefaultSingletonBeanRegistry -> protected boolean isDependent(String beanName, String dependentBeanName);1496837955;Determine whether the specified dependent bean has been registered as_dependent on the given bean or on any of its transitive dependencies._@param beanName the name of the bean to check_@param dependentBeanName the name of the dependent bean_@since 4.0;protected boolean isDependent(String beanName, String dependentBeanName) {_		return isDependent(beanName, dependentBeanName, null)__	};determine,whether,the,specified,dependent,bean,has,been,registered,as,dependent,on,the,given,bean,or,on,any,of,its,transitive,dependencies,param,bean,name,the,name,of,the,bean,to,check,param,dependent,bean,name,the,name,of,the,dependent,bean,since,4,0;protected,boolean,is,dependent,string,bean,name,string,dependent,bean,name,return,is,dependent,bean,name,dependent,bean,name,null
DefaultSingletonBeanRegistry -> protected boolean isDependent(String beanName, String dependentBeanName);1498780456;Determine whether the specified dependent bean has been registered as_dependent on the given bean or on any of its transitive dependencies._@param beanName the name of the bean to check_@param dependentBeanName the name of the dependent bean_@since 4.0;protected boolean isDependent(String beanName, String dependentBeanName) {_		return isDependent(beanName, dependentBeanName, null)__	};determine,whether,the,specified,dependent,bean,has,been,registered,as,dependent,on,the,given,bean,or,on,any,of,its,transitive,dependencies,param,bean,name,the,name,of,the,bean,to,check,param,dependent,bean,name,the,name,of,the,dependent,bean,since,4,0;protected,boolean,is,dependent,string,bean,name,string,dependent,bean,name,return,is,dependent,bean,name,dependent,bean,name,null
DefaultSingletonBeanRegistry -> protected boolean isDependent(String beanName, String dependentBeanName);1502974979;Determine whether the specified dependent bean has been registered as_dependent on the given bean or on any of its transitive dependencies._@param beanName the name of the bean to check_@param dependentBeanName the name of the dependent bean_@since 4.0;protected boolean isDependent(String beanName, String dependentBeanName) {_		return isDependent(beanName, dependentBeanName, null)__	};determine,whether,the,specified,dependent,bean,has,been,registered,as,dependent,on,the,given,bean,or,on,any,of,its,transitive,dependencies,param,bean,name,the,name,of,the,bean,to,check,param,dependent,bean,name,the,name,of,the,dependent,bean,since,4,0;protected,boolean,is,dependent,string,bean,name,string,dependent,bean,name,return,is,dependent,bean,name,dependent,bean,name,null
DefaultSingletonBeanRegistry -> protected boolean isDependent(String beanName, String dependentBeanName);1503007895;Determine whether the specified dependent bean has been registered as_dependent on the given bean or on any of its transitive dependencies._@param beanName the name of the bean to check_@param dependentBeanName the name of the dependent bean_@since 4.0;protected boolean isDependent(String beanName, String dependentBeanName) {_		return isDependent(beanName, dependentBeanName, null)__	};determine,whether,the,specified,dependent,bean,has,been,registered,as,dependent,on,the,given,bean,or,on,any,of,its,transitive,dependencies,param,bean,name,the,name,of,the,bean,to,check,param,dependent,bean,name,the,name,of,the,dependent,bean,since,4,0;protected,boolean,is,dependent,string,bean,name,string,dependent,bean,name,return,is,dependent,bean,name,dependent,bean,name,null
DefaultSingletonBeanRegistry -> protected boolean isDependent(String beanName, String dependentBeanName);1518810557;Determine whether the specified dependent bean has been registered as_dependent on the given bean or on any of its transitive dependencies._@param beanName the name of the bean to check_@param dependentBeanName the name of the dependent bean_@since 4.0;protected boolean isDependent(String beanName, String dependentBeanName) {_		return isDependent(beanName, dependentBeanName, null)__	};determine,whether,the,specified,dependent,bean,has,been,registered,as,dependent,on,the,given,bean,or,on,any,of,its,transitive,dependencies,param,bean,name,the,name,of,the,bean,to,check,param,dependent,bean,name,the,name,of,the,dependent,bean,since,4,0;protected,boolean,is,dependent,string,bean,name,string,dependent,bean,name,return,is,dependent,bean,name,dependent,bean,name,null
DefaultSingletonBeanRegistry -> protected boolean isDependent(String beanName, String dependentBeanName);1521822873;Determine whether the specified dependent bean has been registered as_dependent on the given bean or on any of its transitive dependencies._@param beanName the name of the bean to check_@param dependentBeanName the name of the dependent bean_@since 4.0;protected boolean isDependent(String beanName, String dependentBeanName) {_		return isDependent(beanName, dependentBeanName, null)__	};determine,whether,the,specified,dependent,bean,has,been,registered,as,dependent,on,the,given,bean,or,on,any,of,its,transitive,dependencies,param,bean,name,the,name,of,the,bean,to,check,param,dependent,bean,name,the,name,of,the,dependent,bean,since,4,0;protected,boolean,is,dependent,string,bean,name,string,dependent,bean,name,return,is,dependent,bean,name,dependent,bean,name,null
DefaultSingletonBeanRegistry -> protected boolean isDependent(String beanName, String dependentBeanName);1521905451;Determine whether the specified dependent bean has been registered as_dependent on the given bean or on any of its transitive dependencies._@param beanName the name of the bean to check_@param dependentBeanName the name of the dependent bean_@since 4.0;protected boolean isDependent(String beanName, String dependentBeanName) {_		synchronized (this.dependentBeanMap) {_			return isDependent(beanName, dependentBeanName, null)__		}_	};determine,whether,the,specified,dependent,bean,has,been,registered,as,dependent,on,the,given,bean,or,on,any,of,its,transitive,dependencies,param,bean,name,the,name,of,the,bean,to,check,param,dependent,bean,name,the,name,of,the,dependent,bean,since,4,0;protected,boolean,is,dependent,string,bean,name,string,dependent,bean,name,synchronized,this,dependent,bean,map,return,is,dependent,bean,name,dependent,bean,name,null
DefaultSingletonBeanRegistry -> protected boolean isDependent(String beanName, String dependentBeanName);1527623493;Determine whether the specified dependent bean has been registered as_dependent on the given bean or on any of its transitive dependencies._@param beanName the name of the bean to check_@param dependentBeanName the name of the dependent bean_@since 4.0;protected boolean isDependent(String beanName, String dependentBeanName) {_		synchronized (this.dependentBeanMap) {_			return isDependent(beanName, dependentBeanName, null)__		}_	};determine,whether,the,specified,dependent,bean,has,been,registered,as,dependent,on,the,given,bean,or,on,any,of,its,transitive,dependencies,param,bean,name,the,name,of,the,bean,to,check,param,dependent,bean,name,the,name,of,the,dependent,bean,since,4,0;protected,boolean,is,dependent,string,bean,name,string,dependent,bean,name,synchronized,this,dependent,bean,map,return,is,dependent,bean,name,dependent,bean,name,null
DefaultSingletonBeanRegistry -> protected boolean isDependent(String beanName, String dependentBeanName);1530174524;Determine whether the specified dependent bean has been registered as_dependent on the given bean or on any of its transitive dependencies._@param beanName the name of the bean to check_@param dependentBeanName the name of the dependent bean_@since 4.0;protected boolean isDependent(String beanName, String dependentBeanName) {_		synchronized (this.dependentBeanMap) {_			return isDependent(beanName, dependentBeanName, null)__		}_	};determine,whether,the,specified,dependent,bean,has,been,registered,as,dependent,on,the,given,bean,or,on,any,of,its,transitive,dependencies,param,bean,name,the,name,of,the,bean,to,check,param,dependent,bean,name,the,name,of,the,dependent,bean,since,4,0;protected,boolean,is,dependent,string,bean,name,string,dependent,bean,name,synchronized,this,dependent,bean,map,return,is,dependent,bean,name,dependent,bean,name,null
DefaultSingletonBeanRegistry -> protected boolean isDependent(String beanName, String dependentBeanName);1532091916;Determine whether the specified dependent bean has been registered as_dependent on the given bean or on any of its transitive dependencies._@param beanName the name of the bean to check_@param dependentBeanName the name of the dependent bean_@since 4.0;protected boolean isDependent(String beanName, String dependentBeanName) {_		synchronized (this.dependentBeanMap) {_			return isDependent(beanName, dependentBeanName, null)__		}_	};determine,whether,the,specified,dependent,bean,has,been,registered,as,dependent,on,the,given,bean,or,on,any,of,its,transitive,dependencies,param,bean,name,the,name,of,the,bean,to,check,param,dependent,bean,name,the,name,of,the,dependent,bean,since,4,0;protected,boolean,is,dependent,string,bean,name,string,dependent,bean,name,synchronized,this,dependent,bean,map,return,is,dependent,bean,name,dependent,bean,name,null
DefaultSingletonBeanRegistry -> protected boolean isDependent(String beanName, String dependentBeanName);1532706365;Determine whether the specified dependent bean has been registered as_dependent on the given bean or on any of its transitive dependencies._@param beanName the name of the bean to check_@param dependentBeanName the name of the dependent bean_@since 4.0;protected boolean isDependent(String beanName, String dependentBeanName) {_		synchronized (this.dependentBeanMap) {_			return isDependent(beanName, dependentBeanName, null)__		}_	};determine,whether,the,specified,dependent,bean,has,been,registered,as,dependent,on,the,given,bean,or,on,any,of,its,transitive,dependencies,param,bean,name,the,name,of,the,bean,to,check,param,dependent,bean,name,the,name,of,the,dependent,bean,since,4,0;protected,boolean,is,dependent,string,bean,name,string,dependent,bean,name,synchronized,this,dependent,bean,map,return,is,dependent,bean,name,dependent,bean,name,null
DefaultSingletonBeanRegistry -> public Object getSingleton(String beanName, ObjectFactory singletonFactory);1328020251;Return the (raw) singleton object registered under the given name,_creating and registering a new one if none registered yet._@param beanName the name of the bean_@param singletonFactory the ObjectFactory to lazily create the singleton_with, if necessary_@return the registered singleton object;public Object getSingleton(String beanName, ObjectFactory singletonFactory) {_		Assert.notNull(beanName, "'beanName' must not be null")__		synchronized (this.singletonObjects) {_			Object singletonObject = this.singletonObjects.get(beanName)__			if (singletonObject == null) {_				if (this.singletonsCurrentlyInDestruction) {_					throw new BeanCreationNotAllowedException(beanName,_							"Singleton bean creation not allowed while the singletons of this factory are in destruction " +_							"(Do not request a bean from a BeanFactory in a destroy method implementation!)")__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Creating shared instance of singleton bean '" + beanName + "'")__				}_				beforeSingletonCreation(beanName)__				boolean recordSuppressedExceptions = (this.suppressedExceptions == null)__				if (recordSuppressedExceptions) {_					this.suppressedExceptions = new LinkedHashSet<Exception>()__				}_				try {_					singletonObject = singletonFactory.getObject()__				}_				catch (BeanCreationException ex) {_					if (recordSuppressedExceptions) {_						for (Exception suppressedException : this.suppressedExceptions) {_							ex.addRelatedCause(suppressedException)__						}_					}_					throw ex__				}_				finally {_					if (recordSuppressedExceptions) {_						this.suppressedExceptions = null__					}_					afterSingletonCreation(beanName)__				}_				addSingleton(beanName, singletonObject)__			}_			return (singletonObject != NULL_OBJECT ? singletonObject : null)__		}_	};return,the,raw,singleton,object,registered,under,the,given,name,creating,and,registering,a,new,one,if,none,registered,yet,param,bean,name,the,name,of,the,bean,param,singleton,factory,the,object,factory,to,lazily,create,the,singleton,with,if,necessary,return,the,registered,singleton,object;public,object,get,singleton,string,bean,name,object,factory,singleton,factory,assert,not,null,bean,name,bean,name,must,not,be,null,synchronized,this,singleton,objects,object,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,if,this,singletons,currently,in,destruction,throw,new,bean,creation,not,allowed,exception,bean,name,singleton,bean,creation,not,allowed,while,the,singletons,of,this,factory,are,in,destruction,do,not,request,a,bean,from,a,bean,factory,in,a,destroy,method,implementation,if,logger,is,debug,enabled,logger,debug,creating,shared,instance,of,singleton,bean,bean,name,before,singleton,creation,bean,name,boolean,record,suppressed,exceptions,this,suppressed,exceptions,null,if,record,suppressed,exceptions,this,suppressed,exceptions,new,linked,hash,set,exception,try,singleton,object,singleton,factory,get,object,catch,bean,creation,exception,ex,if,record,suppressed,exceptions,for,exception,suppressed,exception,this,suppressed,exceptions,ex,add,related,cause,suppressed,exception,throw,ex,finally,if,record,suppressed,exceptions,this,suppressed,exceptions,null,after,singleton,creation,bean,name,add,singleton,bean,name,singleton,object,return,singleton,object,singleton,object,null
DefaultSingletonBeanRegistry -> public Object getSingleton(String beanName, ObjectFactory singletonFactory);1349872135;Return the (raw) singleton object registered under the given name,_creating and registering a new one if none registered yet._@param beanName the name of the bean_@param singletonFactory the ObjectFactory to lazily create the singleton_with, if necessary_@return the registered singleton object;public Object getSingleton(String beanName, ObjectFactory singletonFactory) {_		Assert.notNull(beanName, "'beanName' must not be null")__		synchronized (this.singletonObjects) {_			Object singletonObject = this.singletonObjects.get(beanName)__			if (singletonObject == null) {_				if (this.singletonsCurrentlyInDestruction) {_					throw new BeanCreationNotAllowedException(beanName,_							"Singleton bean creation not allowed while the singletons of this factory are in destruction " +_							"(Do not request a bean from a BeanFactory in a destroy method implementation!)")__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Creating shared instance of singleton bean '" + beanName + "'")__				}_				beforeSingletonCreation(beanName)__				boolean recordSuppressedExceptions = (this.suppressedExceptions == null)__				if (recordSuppressedExceptions) {_					this.suppressedExceptions = new LinkedHashSet<Exception>()__				}_				try {_					singletonObject = singletonFactory.getObject()__				}_				catch (BeanCreationException ex) {_					if (recordSuppressedExceptions) {_						for (Exception suppressedException : this.suppressedExceptions) {_							ex.addRelatedCause(suppressedException)__						}_					}_					throw ex__				}_				finally {_					if (recordSuppressedExceptions) {_						this.suppressedExceptions = null__					}_					afterSingletonCreation(beanName)__				}_				addSingleton(beanName, singletonObject)__			}_			return (singletonObject != NULL_OBJECT ? singletonObject : null)__		}_	};return,the,raw,singleton,object,registered,under,the,given,name,creating,and,registering,a,new,one,if,none,registered,yet,param,bean,name,the,name,of,the,bean,param,singleton,factory,the,object,factory,to,lazily,create,the,singleton,with,if,necessary,return,the,registered,singleton,object;public,object,get,singleton,string,bean,name,object,factory,singleton,factory,assert,not,null,bean,name,bean,name,must,not,be,null,synchronized,this,singleton,objects,object,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,if,this,singletons,currently,in,destruction,throw,new,bean,creation,not,allowed,exception,bean,name,singleton,bean,creation,not,allowed,while,the,singletons,of,this,factory,are,in,destruction,do,not,request,a,bean,from,a,bean,factory,in,a,destroy,method,implementation,if,logger,is,debug,enabled,logger,debug,creating,shared,instance,of,singleton,bean,bean,name,before,singleton,creation,bean,name,boolean,record,suppressed,exceptions,this,suppressed,exceptions,null,if,record,suppressed,exceptions,this,suppressed,exceptions,new,linked,hash,set,exception,try,singleton,object,singleton,factory,get,object,catch,bean,creation,exception,ex,if,record,suppressed,exceptions,for,exception,suppressed,exception,this,suppressed,exceptions,ex,add,related,cause,suppressed,exception,throw,ex,finally,if,record,suppressed,exceptions,this,suppressed,exceptions,null,after,singleton,creation,bean,name,add,singleton,bean,name,singleton,object,return,singleton,object,singleton,object,null
DefaultSingletonBeanRegistry -> public Object getSingleton(String beanName, ObjectFactory singletonFactory);1352412938;Return the (raw) singleton object registered under the given name,_creating and registering a new one if none registered yet._@param beanName the name of the bean_@param singletonFactory the ObjectFactory to lazily create the singleton_with, if necessary_@return the registered singleton object;public Object getSingleton(String beanName, ObjectFactory singletonFactory) {_		Assert.notNull(beanName, "'beanName' must not be null")__		synchronized (this.singletonObjects) {_			Object singletonObject = this.singletonObjects.get(beanName)__			if (singletonObject == null) {_				if (this.singletonsCurrentlyInDestruction) {_					throw new BeanCreationNotAllowedException(beanName,_							"Singleton bean creation not allowed while the singletons of this factory are in destruction " +_							"(Do not request a bean from a BeanFactory in a destroy method implementation!)")__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Creating shared instance of singleton bean '" + beanName + "'")__				}_				beforeSingletonCreation(beanName)__				boolean recordSuppressedExceptions = (this.suppressedExceptions == null)__				if (recordSuppressedExceptions) {_					this.suppressedExceptions = new LinkedHashSet<Exception>()__				}_				try {_					singletonObject = singletonFactory.getObject()__				}_				catch (BeanCreationException ex) {_					if (recordSuppressedExceptions) {_						for (Exception suppressedException : this.suppressedExceptions) {_							ex.addRelatedCause(suppressedException)__						}_					}_					throw ex__				}_				finally {_					if (recordSuppressedExceptions) {_						this.suppressedExceptions = null__					}_					afterSingletonCreation(beanName)__				}_				addSingleton(beanName, singletonObject)__			}_			return (singletonObject != NULL_OBJECT ? singletonObject : null)__		}_	};return,the,raw,singleton,object,registered,under,the,given,name,creating,and,registering,a,new,one,if,none,registered,yet,param,bean,name,the,name,of,the,bean,param,singleton,factory,the,object,factory,to,lazily,create,the,singleton,with,if,necessary,return,the,registered,singleton,object;public,object,get,singleton,string,bean,name,object,factory,singleton,factory,assert,not,null,bean,name,bean,name,must,not,be,null,synchronized,this,singleton,objects,object,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,if,this,singletons,currently,in,destruction,throw,new,bean,creation,not,allowed,exception,bean,name,singleton,bean,creation,not,allowed,while,the,singletons,of,this,factory,are,in,destruction,do,not,request,a,bean,from,a,bean,factory,in,a,destroy,method,implementation,if,logger,is,debug,enabled,logger,debug,creating,shared,instance,of,singleton,bean,bean,name,before,singleton,creation,bean,name,boolean,record,suppressed,exceptions,this,suppressed,exceptions,null,if,record,suppressed,exceptions,this,suppressed,exceptions,new,linked,hash,set,exception,try,singleton,object,singleton,factory,get,object,catch,bean,creation,exception,ex,if,record,suppressed,exceptions,for,exception,suppressed,exception,this,suppressed,exceptions,ex,add,related,cause,suppressed,exception,throw,ex,finally,if,record,suppressed,exceptions,this,suppressed,exceptions,null,after,singleton,creation,bean,name,add,singleton,bean,name,singleton,object,return,singleton,object,singleton,object,null
DefaultSingletonBeanRegistry -> public Object getSingleton(String beanName, ObjectFactory singletonFactory);1352418897;Return the (raw) singleton object registered under the given name,_creating and registering a new one if none registered yet._@param beanName the name of the bean_@param singletonFactory the ObjectFactory to lazily create the singleton_with, if necessary_@return the registered singleton object;public Object getSingleton(String beanName, ObjectFactory singletonFactory) {_		Assert.notNull(beanName, "'beanName' must not be null")__		synchronized (this.singletonObjects) {_			Object singletonObject = this.singletonObjects.get(beanName)__			if (singletonObject == null) {_				if (this.singletonsCurrentlyInDestruction) {_					throw new BeanCreationNotAllowedException(beanName,_							"Singleton bean creation not allowed while the singletons of this factory are in destruction " +_							"(Do not request a bean from a BeanFactory in a destroy method implementation!)")__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Creating shared instance of singleton bean '" + beanName + "'")__				}_				beforeSingletonCreation(beanName)__				boolean recordSuppressedExceptions = (this.suppressedExceptions == null)__				if (recordSuppressedExceptions) {_					this.suppressedExceptions = new LinkedHashSet<Exception>()__				}_				try {_					singletonObject = singletonFactory.getObject()__				}_				catch (BeanCreationException ex) {_					if (recordSuppressedExceptions) {_						for (Exception suppressedException : this.suppressedExceptions) {_							ex.addRelatedCause(suppressedException)__						}_					}_					throw ex__				}_				finally {_					if (recordSuppressedExceptions) {_						this.suppressedExceptions = null__					}_					afterSingletonCreation(beanName)__				}_				addSingleton(beanName, singletonObject)__			}_			return (singletonObject != NULL_OBJECT ? singletonObject : null)__		}_	};return,the,raw,singleton,object,registered,under,the,given,name,creating,and,registering,a,new,one,if,none,registered,yet,param,bean,name,the,name,of,the,bean,param,singleton,factory,the,object,factory,to,lazily,create,the,singleton,with,if,necessary,return,the,registered,singleton,object;public,object,get,singleton,string,bean,name,object,factory,singleton,factory,assert,not,null,bean,name,bean,name,must,not,be,null,synchronized,this,singleton,objects,object,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,if,this,singletons,currently,in,destruction,throw,new,bean,creation,not,allowed,exception,bean,name,singleton,bean,creation,not,allowed,while,the,singletons,of,this,factory,are,in,destruction,do,not,request,a,bean,from,a,bean,factory,in,a,destroy,method,implementation,if,logger,is,debug,enabled,logger,debug,creating,shared,instance,of,singleton,bean,bean,name,before,singleton,creation,bean,name,boolean,record,suppressed,exceptions,this,suppressed,exceptions,null,if,record,suppressed,exceptions,this,suppressed,exceptions,new,linked,hash,set,exception,try,singleton,object,singleton,factory,get,object,catch,bean,creation,exception,ex,if,record,suppressed,exceptions,for,exception,suppressed,exception,this,suppressed,exceptions,ex,add,related,cause,suppressed,exception,throw,ex,finally,if,record,suppressed,exceptions,this,suppressed,exceptions,null,after,singleton,creation,bean,name,add,singleton,bean,name,singleton,object,return,singleton,object,singleton,object,null
DefaultSingletonBeanRegistry -> public Object getSingleton(String beanName, ObjectFactory singletonFactory);1353882772;Return the (raw) singleton object registered under the given name,_creating and registering a new one if none registered yet._@param beanName the name of the bean_@param singletonFactory the ObjectFactory to lazily create the singleton_with, if necessary_@return the registered singleton object;public Object getSingleton(String beanName, ObjectFactory singletonFactory) {_		Assert.notNull(beanName, "'beanName' must not be null")__		synchronized (this.singletonObjects) {_			Object singletonObject = this.singletonObjects.get(beanName)__			if (singletonObject == null) {_				if (this.singletonsCurrentlyInDestruction) {_					throw new BeanCreationNotAllowedException(beanName,_							"Singleton bean creation not allowed while the singletons of this factory are in destruction " +_							"(Do not request a bean from a BeanFactory in a destroy method implementation!)")__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Creating shared instance of singleton bean '" + beanName + "'")__				}_				beforeSingletonCreation(beanName)__				boolean recordSuppressedExceptions = (this.suppressedExceptions == null)__				if (recordSuppressedExceptions) {_					this.suppressedExceptions = new LinkedHashSet<Exception>()__				}_				try {_					singletonObject = singletonFactory.getObject()__				}_				catch (BeanCreationException ex) {_					if (recordSuppressedExceptions) {_						for (Exception suppressedException : this.suppressedExceptions) {_							ex.addRelatedCause(suppressedException)__						}_					}_					throw ex__				}_				finally {_					if (recordSuppressedExceptions) {_						this.suppressedExceptions = null__					}_					afterSingletonCreation(beanName)__				}_				addSingleton(beanName, singletonObject)__			}_			return (singletonObject != NULL_OBJECT ? singletonObject : null)__		}_	};return,the,raw,singleton,object,registered,under,the,given,name,creating,and,registering,a,new,one,if,none,registered,yet,param,bean,name,the,name,of,the,bean,param,singleton,factory,the,object,factory,to,lazily,create,the,singleton,with,if,necessary,return,the,registered,singleton,object;public,object,get,singleton,string,bean,name,object,factory,singleton,factory,assert,not,null,bean,name,bean,name,must,not,be,null,synchronized,this,singleton,objects,object,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,if,this,singletons,currently,in,destruction,throw,new,bean,creation,not,allowed,exception,bean,name,singleton,bean,creation,not,allowed,while,the,singletons,of,this,factory,are,in,destruction,do,not,request,a,bean,from,a,bean,factory,in,a,destroy,method,implementation,if,logger,is,debug,enabled,logger,debug,creating,shared,instance,of,singleton,bean,bean,name,before,singleton,creation,bean,name,boolean,record,suppressed,exceptions,this,suppressed,exceptions,null,if,record,suppressed,exceptions,this,suppressed,exceptions,new,linked,hash,set,exception,try,singleton,object,singleton,factory,get,object,catch,bean,creation,exception,ex,if,record,suppressed,exceptions,for,exception,suppressed,exception,this,suppressed,exceptions,ex,add,related,cause,suppressed,exception,throw,ex,finally,if,record,suppressed,exceptions,this,suppressed,exceptions,null,after,singleton,creation,bean,name,add,singleton,bean,name,singleton,object,return,singleton,object,singleton,object,null
DefaultSingletonBeanRegistry -> public Object getSingleton(String beanName, ObjectFactory singletonFactory);1355352386;Return the (raw) singleton object registered under the given name,_creating and registering a new one if none registered yet._@param beanName the name of the bean_@param singletonFactory the ObjectFactory to lazily create the singleton_with, if necessary_@return the registered singleton object;public Object getSingleton(String beanName, ObjectFactory singletonFactory) {_		Assert.notNull(beanName, "'beanName' must not be null")__		synchronized (this.singletonObjects) {_			Object singletonObject = this.singletonObjects.get(beanName)__			if (singletonObject == null) {_				if (this.singletonsCurrentlyInDestruction) {_					throw new BeanCreationNotAllowedException(beanName,_							"Singleton bean creation not allowed while the singletons of this factory are in destruction " +_							"(Do not request a bean from a BeanFactory in a destroy method implementation!)")__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Creating shared instance of singleton bean '" + beanName + "'")__				}_				beforeSingletonCreation(beanName)__				boolean recordSuppressedExceptions = (this.suppressedExceptions == null)__				if (recordSuppressedExceptions) {_					this.suppressedExceptions = new LinkedHashSet<Exception>()__				}_				try {_					singletonObject = singletonFactory.getObject()__				}_				catch (BeanCreationException ex) {_					if (recordSuppressedExceptions) {_						for (Exception suppressedException : this.suppressedExceptions) {_							ex.addRelatedCause(suppressedException)__						}_					}_					throw ex__				}_				finally {_					if (recordSuppressedExceptions) {_						this.suppressedExceptions = null__					}_					afterSingletonCreation(beanName)__				}_				addSingleton(beanName, singletonObject)__			}_			return (singletonObject != NULL_OBJECT ? singletonObject : null)__		}_	};return,the,raw,singleton,object,registered,under,the,given,name,creating,and,registering,a,new,one,if,none,registered,yet,param,bean,name,the,name,of,the,bean,param,singleton,factory,the,object,factory,to,lazily,create,the,singleton,with,if,necessary,return,the,registered,singleton,object;public,object,get,singleton,string,bean,name,object,factory,singleton,factory,assert,not,null,bean,name,bean,name,must,not,be,null,synchronized,this,singleton,objects,object,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,if,this,singletons,currently,in,destruction,throw,new,bean,creation,not,allowed,exception,bean,name,singleton,bean,creation,not,allowed,while,the,singletons,of,this,factory,are,in,destruction,do,not,request,a,bean,from,a,bean,factory,in,a,destroy,method,implementation,if,logger,is,debug,enabled,logger,debug,creating,shared,instance,of,singleton,bean,bean,name,before,singleton,creation,bean,name,boolean,record,suppressed,exceptions,this,suppressed,exceptions,null,if,record,suppressed,exceptions,this,suppressed,exceptions,new,linked,hash,set,exception,try,singleton,object,singleton,factory,get,object,catch,bean,creation,exception,ex,if,record,suppressed,exceptions,for,exception,suppressed,exception,this,suppressed,exceptions,ex,add,related,cause,suppressed,exception,throw,ex,finally,if,record,suppressed,exceptions,this,suppressed,exceptions,null,after,singleton,creation,bean,name,add,singleton,bean,name,singleton,object,return,singleton,object,singleton,object,null
DefaultSingletonBeanRegistry -> public Object getSingleton(String beanName, ObjectFactory singletonFactory);1356735495;Return the (raw) singleton object registered under the given name,_creating and registering a new one if none registered yet._@param beanName the name of the bean_@param singletonFactory the ObjectFactory to lazily create the singleton_with, if necessary_@return the registered singleton object;public Object getSingleton(String beanName, ObjectFactory singletonFactory) {_		Assert.notNull(beanName, "'beanName' must not be null")__		synchronized (this.singletonObjects) {_			Object singletonObject = this.singletonObjects.get(beanName)__			if (singletonObject == null) {_				if (this.singletonsCurrentlyInDestruction) {_					throw new BeanCreationNotAllowedException(beanName,_							"Singleton bean creation not allowed while the singletons of this factory are in destruction " +_							"(Do not request a bean from a BeanFactory in a destroy method implementation!)")__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Creating shared instance of singleton bean '" + beanName + "'")__				}_				beforeSingletonCreation(beanName)__				boolean recordSuppressedExceptions = (this.suppressedExceptions == null)__				if (recordSuppressedExceptions) {_					this.suppressedExceptions = new LinkedHashSet<Exception>()__				}_				try {_					singletonObject = singletonFactory.getObject()__				}_				catch (BeanCreationException ex) {_					if (recordSuppressedExceptions) {_						for (Exception suppressedException : this.suppressedExceptions) {_							ex.addRelatedCause(suppressedException)__						}_					}_					throw ex__				}_				finally {_					if (recordSuppressedExceptions) {_						this.suppressedExceptions = null__					}_					afterSingletonCreation(beanName)__				}_				addSingleton(beanName, singletonObject)__			}_			return (singletonObject != NULL_OBJECT ? singletonObject : null)__		}_	};return,the,raw,singleton,object,registered,under,the,given,name,creating,and,registering,a,new,one,if,none,registered,yet,param,bean,name,the,name,of,the,bean,param,singleton,factory,the,object,factory,to,lazily,create,the,singleton,with,if,necessary,return,the,registered,singleton,object;public,object,get,singleton,string,bean,name,object,factory,singleton,factory,assert,not,null,bean,name,bean,name,must,not,be,null,synchronized,this,singleton,objects,object,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,if,this,singletons,currently,in,destruction,throw,new,bean,creation,not,allowed,exception,bean,name,singleton,bean,creation,not,allowed,while,the,singletons,of,this,factory,are,in,destruction,do,not,request,a,bean,from,a,bean,factory,in,a,destroy,method,implementation,if,logger,is,debug,enabled,logger,debug,creating,shared,instance,of,singleton,bean,bean,name,before,singleton,creation,bean,name,boolean,record,suppressed,exceptions,this,suppressed,exceptions,null,if,record,suppressed,exceptions,this,suppressed,exceptions,new,linked,hash,set,exception,try,singleton,object,singleton,factory,get,object,catch,bean,creation,exception,ex,if,record,suppressed,exceptions,for,exception,suppressed,exception,this,suppressed,exceptions,ex,add,related,cause,suppressed,exception,throw,ex,finally,if,record,suppressed,exceptions,this,suppressed,exceptions,null,after,singleton,creation,bean,name,add,singleton,bean,name,singleton,object,return,singleton,object,singleton,object,null
DefaultSingletonBeanRegistry -> public Object getSingleton(String beanName, ObjectFactory singletonFactory);1357119239;Return the (raw) singleton object registered under the given name,_creating and registering a new one if none registered yet._@param beanName the name of the bean_@param singletonFactory the ObjectFactory to lazily create the singleton_with, if necessary_@return the registered singleton object;public Object getSingleton(String beanName, ObjectFactory singletonFactory) {_		Assert.notNull(beanName, "'beanName' must not be null")__		synchronized (this.singletonObjects) {_			Object singletonObject = this.singletonObjects.get(beanName)__			if (singletonObject == null) {_				if (this.singletonsCurrentlyInDestruction) {_					throw new BeanCreationNotAllowedException(beanName,_							"Singleton bean creation not allowed while the singletons of this factory are in destruction " +_							"(Do not request a bean from a BeanFactory in a destroy method implementation!)")__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Creating shared instance of singleton bean '" + beanName + "'")__				}_				beforeSingletonCreation(beanName)__				boolean recordSuppressedExceptions = (this.suppressedExceptions == null)__				if (recordSuppressedExceptions) {_					this.suppressedExceptions = new LinkedHashSet<Exception>()__				}_				try {_					singletonObject = singletonFactory.getObject()__				}_				catch (BeanCreationException ex) {_					if (recordSuppressedExceptions) {_						for (Exception suppressedException : this.suppressedExceptions) {_							ex.addRelatedCause(suppressedException)__						}_					}_					throw ex__				}_				finally {_					if (recordSuppressedExceptions) {_						this.suppressedExceptions = null__					}_					afterSingletonCreation(beanName)__				}_				addSingleton(beanName, singletonObject)__			}_			return (singletonObject != NULL_OBJECT ? singletonObject : null)__		}_	};return,the,raw,singleton,object,registered,under,the,given,name,creating,and,registering,a,new,one,if,none,registered,yet,param,bean,name,the,name,of,the,bean,param,singleton,factory,the,object,factory,to,lazily,create,the,singleton,with,if,necessary,return,the,registered,singleton,object;public,object,get,singleton,string,bean,name,object,factory,singleton,factory,assert,not,null,bean,name,bean,name,must,not,be,null,synchronized,this,singleton,objects,object,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,if,this,singletons,currently,in,destruction,throw,new,bean,creation,not,allowed,exception,bean,name,singleton,bean,creation,not,allowed,while,the,singletons,of,this,factory,are,in,destruction,do,not,request,a,bean,from,a,bean,factory,in,a,destroy,method,implementation,if,logger,is,debug,enabled,logger,debug,creating,shared,instance,of,singleton,bean,bean,name,before,singleton,creation,bean,name,boolean,record,suppressed,exceptions,this,suppressed,exceptions,null,if,record,suppressed,exceptions,this,suppressed,exceptions,new,linked,hash,set,exception,try,singleton,object,singleton,factory,get,object,catch,bean,creation,exception,ex,if,record,suppressed,exceptions,for,exception,suppressed,exception,this,suppressed,exceptions,ex,add,related,cause,suppressed,exception,throw,ex,finally,if,record,suppressed,exceptions,this,suppressed,exceptions,null,after,singleton,creation,bean,name,add,singleton,bean,name,singleton,object,return,singleton,object,singleton,object,null
DefaultSingletonBeanRegistry -> public Object getSingleton(String beanName, ObjectFactory singletonFactory);1364505266;Return the (raw) singleton object registered under the given name,_creating and registering a new one if none registered yet._@param beanName the name of the bean_@param singletonFactory the ObjectFactory to lazily create the singleton_with, if necessary_@return the registered singleton object;public Object getSingleton(String beanName, ObjectFactory singletonFactory) {_		Assert.notNull(beanName, "'beanName' must not be null")__		synchronized (this.singletonObjects) {_			Object singletonObject = this.singletonObjects.get(beanName)__			if (singletonObject == null) {_				if (this.singletonsCurrentlyInDestruction) {_					throw new BeanCreationNotAllowedException(beanName,_							"Singleton bean creation not allowed while the singletons of this factory are in destruction " +_							"(Do not request a bean from a BeanFactory in a destroy method implementation!)")__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Creating shared instance of singleton bean '" + beanName + "'")__				}_				beforeSingletonCreation(beanName)__				boolean recordSuppressedExceptions = (this.suppressedExceptions == null)__				if (recordSuppressedExceptions) {_					this.suppressedExceptions = new LinkedHashSet<Exception>()__				}_				try {_					singletonObject = singletonFactory.getObject()__				}_				catch (BeanCreationException ex) {_					if (recordSuppressedExceptions) {_						for (Exception suppressedException : this.suppressedExceptions) {_							ex.addRelatedCause(suppressedException)__						}_					}_					throw ex__				}_				finally {_					if (recordSuppressedExceptions) {_						this.suppressedExceptions = null__					}_					afterSingletonCreation(beanName)__				}_				addSingleton(beanName, singletonObject)__			}_			return (singletonObject != NULL_OBJECT ? singletonObject : null)__		}_	};return,the,raw,singleton,object,registered,under,the,given,name,creating,and,registering,a,new,one,if,none,registered,yet,param,bean,name,the,name,of,the,bean,param,singleton,factory,the,object,factory,to,lazily,create,the,singleton,with,if,necessary,return,the,registered,singleton,object;public,object,get,singleton,string,bean,name,object,factory,singleton,factory,assert,not,null,bean,name,bean,name,must,not,be,null,synchronized,this,singleton,objects,object,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,if,this,singletons,currently,in,destruction,throw,new,bean,creation,not,allowed,exception,bean,name,singleton,bean,creation,not,allowed,while,the,singletons,of,this,factory,are,in,destruction,do,not,request,a,bean,from,a,bean,factory,in,a,destroy,method,implementation,if,logger,is,debug,enabled,logger,debug,creating,shared,instance,of,singleton,bean,bean,name,before,singleton,creation,bean,name,boolean,record,suppressed,exceptions,this,suppressed,exceptions,null,if,record,suppressed,exceptions,this,suppressed,exceptions,new,linked,hash,set,exception,try,singleton,object,singleton,factory,get,object,catch,bean,creation,exception,ex,if,record,suppressed,exceptions,for,exception,suppressed,exception,this,suppressed,exceptions,ex,add,related,cause,suppressed,exception,throw,ex,finally,if,record,suppressed,exceptions,this,suppressed,exceptions,null,after,singleton,creation,bean,name,add,singleton,bean,name,singleton,object,return,singleton,object,singleton,object,null
DefaultSingletonBeanRegistry -> public Object getSingleton(String beanName, ObjectFactory singletonFactory);1368482696;Return the (raw) singleton object registered under the given name,_creating and registering a new one if none registered yet._@param beanName the name of the bean_@param singletonFactory the ObjectFactory to lazily create the singleton_with, if necessary_@return the registered singleton object;public Object getSingleton(String beanName, ObjectFactory singletonFactory) {_		Assert.notNull(beanName, "'beanName' must not be null")__		synchronized (this.singletonObjects) {_			Object singletonObject = this.singletonObjects.get(beanName)__			if (singletonObject == null) {_				if (this.singletonsCurrentlyInDestruction) {_					throw new BeanCreationNotAllowedException(beanName,_							"Singleton bean creation not allowed while the singletons of this factory are in destruction " +_							"(Do not request a bean from a BeanFactory in a destroy method implementation!)")__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Creating shared instance of singleton bean '" + beanName + "'")__				}_				beforeSingletonCreation(beanName)__				boolean recordSuppressedExceptions = (this.suppressedExceptions == null)__				if (recordSuppressedExceptions) {_					this.suppressedExceptions = new LinkedHashSet<Exception>()__				}_				try {_					singletonObject = singletonFactory.getObject()__				}_				catch (BeanCreationException ex) {_					if (recordSuppressedExceptions) {_						for (Exception suppressedException : this.suppressedExceptions) {_							ex.addRelatedCause(suppressedException)__						}_					}_					throw ex__				}_				finally {_					if (recordSuppressedExceptions) {_						this.suppressedExceptions = null__					}_					afterSingletonCreation(beanName)__				}_				addSingleton(beanName, singletonObject)__			}_			return (singletonObject != NULL_OBJECT ? singletonObject : null)__		}_	};return,the,raw,singleton,object,registered,under,the,given,name,creating,and,registering,a,new,one,if,none,registered,yet,param,bean,name,the,name,of,the,bean,param,singleton,factory,the,object,factory,to,lazily,create,the,singleton,with,if,necessary,return,the,registered,singleton,object;public,object,get,singleton,string,bean,name,object,factory,singleton,factory,assert,not,null,bean,name,bean,name,must,not,be,null,synchronized,this,singleton,objects,object,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,if,this,singletons,currently,in,destruction,throw,new,bean,creation,not,allowed,exception,bean,name,singleton,bean,creation,not,allowed,while,the,singletons,of,this,factory,are,in,destruction,do,not,request,a,bean,from,a,bean,factory,in,a,destroy,method,implementation,if,logger,is,debug,enabled,logger,debug,creating,shared,instance,of,singleton,bean,bean,name,before,singleton,creation,bean,name,boolean,record,suppressed,exceptions,this,suppressed,exceptions,null,if,record,suppressed,exceptions,this,suppressed,exceptions,new,linked,hash,set,exception,try,singleton,object,singleton,factory,get,object,catch,bean,creation,exception,ex,if,record,suppressed,exceptions,for,exception,suppressed,exception,this,suppressed,exceptions,ex,add,related,cause,suppressed,exception,throw,ex,finally,if,record,suppressed,exceptions,this,suppressed,exceptions,null,after,singleton,creation,bean,name,add,singleton,bean,name,singleton,object,return,singleton,object,singleton,object,null
DefaultSingletonBeanRegistry -> public Object getSingleton(String beanName, ObjectFactory singletonFactory);1374698947;Return the (raw) singleton object registered under the given name,_creating and registering a new one if none registered yet._@param beanName the name of the bean_@param singletonFactory the ObjectFactory to lazily create the singleton_with, if necessary_@return the registered singleton object;public Object getSingleton(String beanName, ObjectFactory singletonFactory) {_		Assert.notNull(beanName, "'beanName' must not be null")__		synchronized (this.singletonObjects) {_			Object singletonObject = this.singletonObjects.get(beanName)__			if (singletonObject == null) {_				if (this.singletonsCurrentlyInDestruction) {_					throw new BeanCreationNotAllowedException(beanName,_							"Singleton bean creation not allowed while the singletons of this factory are in destruction " +_							"(Do not request a bean from a BeanFactory in a destroy method implementation!)")__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Creating shared instance of singleton bean '" + beanName + "'")__				}_				beforeSingletonCreation(beanName)__				boolean recordSuppressedExceptions = (this.suppressedExceptions == null)__				if (recordSuppressedExceptions) {_					this.suppressedExceptions = new LinkedHashSet<Exception>()__				}_				try {_					singletonObject = singletonFactory.getObject()__				}_				catch (BeanCreationException ex) {_					if (recordSuppressedExceptions) {_						for (Exception suppressedException : this.suppressedExceptions) {_							ex.addRelatedCause(suppressedException)__						}_					}_					throw ex__				}_				finally {_					if (recordSuppressedExceptions) {_						this.suppressedExceptions = null__					}_					afterSingletonCreation(beanName)__				}_				addSingleton(beanName, singletonObject)__			}_			return (singletonObject != NULL_OBJECT ? singletonObject : null)__		}_	};return,the,raw,singleton,object,registered,under,the,given,name,creating,and,registering,a,new,one,if,none,registered,yet,param,bean,name,the,name,of,the,bean,param,singleton,factory,the,object,factory,to,lazily,create,the,singleton,with,if,necessary,return,the,registered,singleton,object;public,object,get,singleton,string,bean,name,object,factory,singleton,factory,assert,not,null,bean,name,bean,name,must,not,be,null,synchronized,this,singleton,objects,object,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,if,this,singletons,currently,in,destruction,throw,new,bean,creation,not,allowed,exception,bean,name,singleton,bean,creation,not,allowed,while,the,singletons,of,this,factory,are,in,destruction,do,not,request,a,bean,from,a,bean,factory,in,a,destroy,method,implementation,if,logger,is,debug,enabled,logger,debug,creating,shared,instance,of,singleton,bean,bean,name,before,singleton,creation,bean,name,boolean,record,suppressed,exceptions,this,suppressed,exceptions,null,if,record,suppressed,exceptions,this,suppressed,exceptions,new,linked,hash,set,exception,try,singleton,object,singleton,factory,get,object,catch,bean,creation,exception,ex,if,record,suppressed,exceptions,for,exception,suppressed,exception,this,suppressed,exceptions,ex,add,related,cause,suppressed,exception,throw,ex,finally,if,record,suppressed,exceptions,this,suppressed,exceptions,null,after,singleton,creation,bean,name,add,singleton,bean,name,singleton,object,return,singleton,object,singleton,object,null
DefaultSingletonBeanRegistry -> protected void clearSingletonCache();1521822873;Clear all cached singleton instances in this registry._@since 4.3.15;protected void clearSingletonCache() {_		synchronized (this.singletonObjects) {_			this.singletonObjects.clear()__			this.singletonFactories.clear()__			this.earlySingletonObjects.clear()__			this.registeredSingletons.clear()__			this.singletonsCurrentlyInDestruction = false__		}_	};clear,all,cached,singleton,instances,in,this,registry,since,4,3,15;protected,void,clear,singleton,cache,synchronized,this,singleton,objects,this,singleton,objects,clear,this,singleton,factories,clear,this,early,singleton,objects,clear,this,registered,singletons,clear,this,singletons,currently,in,destruction,false
DefaultSingletonBeanRegistry -> protected void clearSingletonCache();1521905451;Clear all cached singleton instances in this registry._@since 4.3.15;protected void clearSingletonCache() {_		synchronized (this.singletonObjects) {_			this.singletonObjects.clear()__			this.singletonFactories.clear()__			this.earlySingletonObjects.clear()__			this.registeredSingletons.clear()__			this.singletonsCurrentlyInDestruction = false__		}_	};clear,all,cached,singleton,instances,in,this,registry,since,4,3,15;protected,void,clear,singleton,cache,synchronized,this,singleton,objects,this,singleton,objects,clear,this,singleton,factories,clear,this,early,singleton,objects,clear,this,registered,singletons,clear,this,singletons,currently,in,destruction,false
DefaultSingletonBeanRegistry -> protected void clearSingletonCache();1527623493;Clear all cached singleton instances in this registry._@since 4.3.15;protected void clearSingletonCache() {_		synchronized (this.singletonObjects) {_			this.singletonObjects.clear()__			this.singletonFactories.clear()__			this.earlySingletonObjects.clear()__			this.registeredSingletons.clear()__			this.singletonsCurrentlyInDestruction = false__		}_	};clear,all,cached,singleton,instances,in,this,registry,since,4,3,15;protected,void,clear,singleton,cache,synchronized,this,singleton,objects,this,singleton,objects,clear,this,singleton,factories,clear,this,early,singleton,objects,clear,this,registered,singletons,clear,this,singletons,currently,in,destruction,false
DefaultSingletonBeanRegistry -> protected void clearSingletonCache();1530174524;Clear all cached singleton instances in this registry._@since 4.3.15;protected void clearSingletonCache() {_		synchronized (this.singletonObjects) {_			this.singletonObjects.clear()__			this.singletonFactories.clear()__			this.earlySingletonObjects.clear()__			this.registeredSingletons.clear()__			this.singletonsCurrentlyInDestruction = false__		}_	};clear,all,cached,singleton,instances,in,this,registry,since,4,3,15;protected,void,clear,singleton,cache,synchronized,this,singleton,objects,this,singleton,objects,clear,this,singleton,factories,clear,this,early,singleton,objects,clear,this,registered,singletons,clear,this,singletons,currently,in,destruction,false
DefaultSingletonBeanRegistry -> protected void clearSingletonCache();1532091916;Clear all cached singleton instances in this registry._@since 4.3.15;protected void clearSingletonCache() {_		synchronized (this.singletonObjects) {_			this.singletonObjects.clear()__			this.singletonFactories.clear()__			this.earlySingletonObjects.clear()__			this.registeredSingletons.clear()__			this.singletonsCurrentlyInDestruction = false__		}_	};clear,all,cached,singleton,instances,in,this,registry,since,4,3,15;protected,void,clear,singleton,cache,synchronized,this,singleton,objects,this,singleton,objects,clear,this,singleton,factories,clear,this,early,singleton,objects,clear,this,registered,singletons,clear,this,singletons,currently,in,destruction,false
DefaultSingletonBeanRegistry -> protected void clearSingletonCache();1532706365;Clear all cached singleton instances in this registry._@since 4.3.15;protected void clearSingletonCache() {_		synchronized (this.singletonObjects) {_			this.singletonObjects.clear()__			this.singletonFactories.clear()__			this.earlySingletonObjects.clear()__			this.registeredSingletons.clear()__			this.singletonsCurrentlyInDestruction = false__		}_	};clear,all,cached,singleton,instances,in,this,registry,since,4,3,15;protected,void,clear,singleton,cache,synchronized,this,singleton,objects,this,singleton,objects,clear,this,singleton,factories,clear,this,early,singleton,objects,clear,this,registered,singletons,clear,this,singletons,currently,in,destruction,false
DefaultSingletonBeanRegistry -> protected final Object getSingletonMutex();1328020251;Expose the singleton mutex to subclasses._<p>Subclasses should synchronize on the given Object if they perform_any sort of extended singleton creation phase. In particular, subclasses_should <i>not</i> have their own mutexes involved in singleton creation,_to avoid the potential for deadlocks in lazy-init situations.;protected final Object getSingletonMutex() {_		return this.singletonObjects__	};expose,the,singleton,mutex,to,subclasses,p,subclasses,should,synchronize,on,the,given,object,if,they,perform,any,sort,of,extended,singleton,creation,phase,in,particular,subclasses,should,i,not,i,have,their,own,mutexes,involved,in,singleton,creation,to,avoid,the,potential,for,deadlocks,in,lazy,init,situations;protected,final,object,get,singleton,mutex,return,this,singleton,objects
DefaultSingletonBeanRegistry -> protected final Object getSingletonMutex();1349872135;Expose the singleton mutex to subclasses._<p>Subclasses should synchronize on the given Object if they perform_any sort of extended singleton creation phase. In particular, subclasses_should <i>not</i> have their own mutexes involved in singleton creation,_to avoid the potential for deadlocks in lazy-init situations.;protected final Object getSingletonMutex() {_		return this.singletonObjects__	};expose,the,singleton,mutex,to,subclasses,p,subclasses,should,synchronize,on,the,given,object,if,they,perform,any,sort,of,extended,singleton,creation,phase,in,particular,subclasses,should,i,not,i,have,their,own,mutexes,involved,in,singleton,creation,to,avoid,the,potential,for,deadlocks,in,lazy,init,situations;protected,final,object,get,singleton,mutex,return,this,singleton,objects
DefaultSingletonBeanRegistry -> protected final Object getSingletonMutex();1352412938;Expose the singleton mutex to subclasses._<p>Subclasses should synchronize on the given Object if they perform_any sort of extended singleton creation phase. In particular, subclasses_should <i>not</i> have their own mutexes involved in singleton creation,_to avoid the potential for deadlocks in lazy-init situations.;protected final Object getSingletonMutex() {_		return this.singletonObjects__	};expose,the,singleton,mutex,to,subclasses,p,subclasses,should,synchronize,on,the,given,object,if,they,perform,any,sort,of,extended,singleton,creation,phase,in,particular,subclasses,should,i,not,i,have,their,own,mutexes,involved,in,singleton,creation,to,avoid,the,potential,for,deadlocks,in,lazy,init,situations;protected,final,object,get,singleton,mutex,return,this,singleton,objects
DefaultSingletonBeanRegistry -> protected final Object getSingletonMutex();1352418897;Expose the singleton mutex to subclasses._<p>Subclasses should synchronize on the given Object if they perform_any sort of extended singleton creation phase. In particular, subclasses_should <i>not</i> have their own mutexes involved in singleton creation,_to avoid the potential for deadlocks in lazy-init situations.;protected final Object getSingletonMutex() {_		return this.singletonObjects__	};expose,the,singleton,mutex,to,subclasses,p,subclasses,should,synchronize,on,the,given,object,if,they,perform,any,sort,of,extended,singleton,creation,phase,in,particular,subclasses,should,i,not,i,have,their,own,mutexes,involved,in,singleton,creation,to,avoid,the,potential,for,deadlocks,in,lazy,init,situations;protected,final,object,get,singleton,mutex,return,this,singleton,objects
DefaultSingletonBeanRegistry -> protected final Object getSingletonMutex();1353882772;Expose the singleton mutex to subclasses._<p>Subclasses should synchronize on the given Object if they perform_any sort of extended singleton creation phase. In particular, subclasses_should <i>not</i> have their own mutexes involved in singleton creation,_to avoid the potential for deadlocks in lazy-init situations.;protected final Object getSingletonMutex() {_		return this.singletonObjects__	};expose,the,singleton,mutex,to,subclasses,p,subclasses,should,synchronize,on,the,given,object,if,they,perform,any,sort,of,extended,singleton,creation,phase,in,particular,subclasses,should,i,not,i,have,their,own,mutexes,involved,in,singleton,creation,to,avoid,the,potential,for,deadlocks,in,lazy,init,situations;protected,final,object,get,singleton,mutex,return,this,singleton,objects
DefaultSingletonBeanRegistry -> protected final Object getSingletonMutex();1355352386;Expose the singleton mutex to subclasses._<p>Subclasses should synchronize on the given Object if they perform_any sort of extended singleton creation phase. In particular, subclasses_should <i>not</i> have their own mutexes involved in singleton creation,_to avoid the potential for deadlocks in lazy-init situations.;protected final Object getSingletonMutex() {_		return this.singletonObjects__	};expose,the,singleton,mutex,to,subclasses,p,subclasses,should,synchronize,on,the,given,object,if,they,perform,any,sort,of,extended,singleton,creation,phase,in,particular,subclasses,should,i,not,i,have,their,own,mutexes,involved,in,singleton,creation,to,avoid,the,potential,for,deadlocks,in,lazy,init,situations;protected,final,object,get,singleton,mutex,return,this,singleton,objects
DefaultSingletonBeanRegistry -> protected final Object getSingletonMutex();1356735495;Expose the singleton mutex to subclasses._<p>Subclasses should synchronize on the given Object if they perform_any sort of extended singleton creation phase. In particular, subclasses_should <i>not</i> have their own mutexes involved in singleton creation,_to avoid the potential for deadlocks in lazy-init situations.;protected final Object getSingletonMutex() {_		return this.singletonObjects__	};expose,the,singleton,mutex,to,subclasses,p,subclasses,should,synchronize,on,the,given,object,if,they,perform,any,sort,of,extended,singleton,creation,phase,in,particular,subclasses,should,i,not,i,have,their,own,mutexes,involved,in,singleton,creation,to,avoid,the,potential,for,deadlocks,in,lazy,init,situations;protected,final,object,get,singleton,mutex,return,this,singleton,objects
DefaultSingletonBeanRegistry -> protected final Object getSingletonMutex();1357119239;Expose the singleton mutex to subclasses._<p>Subclasses should synchronize on the given Object if they perform_any sort of extended singleton creation phase. In particular, subclasses_should <i>not</i> have their own mutexes involved in singleton creation,_to avoid the potential for deadlocks in lazy-init situations.;protected final Object getSingletonMutex() {_		return this.singletonObjects__	};expose,the,singleton,mutex,to,subclasses,p,subclasses,should,synchronize,on,the,given,object,if,they,perform,any,sort,of,extended,singleton,creation,phase,in,particular,subclasses,should,i,not,i,have,their,own,mutexes,involved,in,singleton,creation,to,avoid,the,potential,for,deadlocks,in,lazy,init,situations;protected,final,object,get,singleton,mutex,return,this,singleton,objects
DefaultSingletonBeanRegistry -> protected final Object getSingletonMutex();1364505266;Expose the singleton mutex to subclasses._<p>Subclasses should synchronize on the given Object if they perform_any sort of extended singleton creation phase. In particular, subclasses_should <i>not</i> have their own mutexes involved in singleton creation,_to avoid the potential for deadlocks in lazy-init situations.;protected final Object getSingletonMutex() {_		return this.singletonObjects__	};expose,the,singleton,mutex,to,subclasses,p,subclasses,should,synchronize,on,the,given,object,if,they,perform,any,sort,of,extended,singleton,creation,phase,in,particular,subclasses,should,i,not,i,have,their,own,mutexes,involved,in,singleton,creation,to,avoid,the,potential,for,deadlocks,in,lazy,init,situations;protected,final,object,get,singleton,mutex,return,this,singleton,objects
DefaultSingletonBeanRegistry -> protected final Object getSingletonMutex();1368482696;Expose the singleton mutex to subclasses._<p>Subclasses should synchronize on the given Object if they perform_any sort of extended singleton creation phase. In particular, subclasses_should <i>not</i> have their own mutexes involved in singleton creation,_to avoid the potential for deadlocks in lazy-init situations.;protected final Object getSingletonMutex() {_		return this.singletonObjects__	};expose,the,singleton,mutex,to,subclasses,p,subclasses,should,synchronize,on,the,given,object,if,they,perform,any,sort,of,extended,singleton,creation,phase,in,particular,subclasses,should,i,not,i,have,their,own,mutexes,involved,in,singleton,creation,to,avoid,the,potential,for,deadlocks,in,lazy,init,situations;protected,final,object,get,singleton,mutex,return,this,singleton,objects
DefaultSingletonBeanRegistry -> protected final Object getSingletonMutex();1374698947;Expose the singleton mutex to subclasses._<p>Subclasses should synchronize on the given Object if they perform_any sort of extended singleton creation phase. In particular, subclasses_should <i>not</i> have their own mutexes involved in singleton creation,_to avoid the potential for deadlocks in lazy-init situations.;protected final Object getSingletonMutex() {_		return this.singletonObjects__	};expose,the,singleton,mutex,to,subclasses,p,subclasses,should,synchronize,on,the,given,object,if,they,perform,any,sort,of,extended,singleton,creation,phase,in,particular,subclasses,should,i,not,i,have,their,own,mutexes,involved,in,singleton,creation,to,avoid,the,potential,for,deadlocks,in,lazy,init,situations;protected,final,object,get,singleton,mutex,return,this,singleton,objects
DefaultSingletonBeanRegistry -> protected final Object getSingletonMutex();1385412762;Expose the singleton mutex to subclasses._<p>Subclasses should synchronize on the given Object if they perform_any sort of extended singleton creation phase. In particular, subclasses_should <i>not</i> have their own mutexes involved in singleton creation,_to avoid the potential for deadlocks in lazy-init situations.;protected final Object getSingletonMutex() {_		return this.singletonObjects__	};expose,the,singleton,mutex,to,subclasses,p,subclasses,should,synchronize,on,the,given,object,if,they,perform,any,sort,of,extended,singleton,creation,phase,in,particular,subclasses,should,i,not,i,have,their,own,mutexes,involved,in,singleton,creation,to,avoid,the,potential,for,deadlocks,in,lazy,init,situations;protected,final,object,get,singleton,mutex,return,this,singleton,objects
DefaultSingletonBeanRegistry -> protected final Object getSingletonMutex();1385984377;Expose the singleton mutex to subclasses._<p>Subclasses should synchronize on the given Object if they perform_any sort of extended singleton creation phase. In particular, subclasses_should <i>not</i> have their own mutexes involved in singleton creation,_to avoid the potential for deadlocks in lazy-init situations.;protected final Object getSingletonMutex() {_		return this.singletonObjects__	};expose,the,singleton,mutex,to,subclasses,p,subclasses,should,synchronize,on,the,given,object,if,they,perform,any,sort,of,extended,singleton,creation,phase,in,particular,subclasses,should,i,not,i,have,their,own,mutexes,involved,in,singleton,creation,to,avoid,the,potential,for,deadlocks,in,lazy,init,situations;protected,final,object,get,singleton,mutex,return,this,singleton,objects
DefaultSingletonBeanRegistry -> protected final Object getSingletonMutex();1405430015;Expose the singleton mutex to subclasses._<p>Subclasses should synchronize on the given Object if they perform_any sort of extended singleton creation phase. In particular, subclasses_should <i>not</i> have their own mutexes involved in singleton creation,_to avoid the potential for deadlocks in lazy-init situations.;protected final Object getSingletonMutex() {_		return this.singletonObjects__	};expose,the,singleton,mutex,to,subclasses,p,subclasses,should,synchronize,on,the,given,object,if,they,perform,any,sort,of,extended,singleton,creation,phase,in,particular,subclasses,should,i,not,i,have,their,own,mutexes,involved,in,singleton,creation,to,avoid,the,potential,for,deadlocks,in,lazy,init,situations;protected,final,object,get,singleton,mutex,return,this,singleton,objects
DefaultSingletonBeanRegistry -> protected final Object getSingletonMutex();1408528936;Expose the singleton mutex to subclasses._<p>Subclasses should synchronize on the given Object if they perform_any sort of extended singleton creation phase. In particular, subclasses_should <i>not</i> have their own mutexes involved in singleton creation,_to avoid the potential for deadlocks in lazy-init situations.;protected final Object getSingletonMutex() {_		return this.singletonObjects__	};expose,the,singleton,mutex,to,subclasses,p,subclasses,should,synchronize,on,the,given,object,if,they,perform,any,sort,of,extended,singleton,creation,phase,in,particular,subclasses,should,i,not,i,have,their,own,mutexes,involved,in,singleton,creation,to,avoid,the,potential,for,deadlocks,in,lazy,init,situations;protected,final,object,get,singleton,mutex,return,this,singleton,objects
DefaultSingletonBeanRegistry -> protected final Object getSingletonMutex();1408624154;Expose the singleton mutex to subclasses._<p>Subclasses should synchronize on the given Object if they perform_any sort of extended singleton creation phase. In particular, subclasses_should <i>not</i> have their own mutexes involved in singleton creation,_to avoid the potential for deadlocks in lazy-init situations.;protected final Object getSingletonMutex() {_		return this.singletonObjects__	};expose,the,singleton,mutex,to,subclasses,p,subclasses,should,synchronize,on,the,given,object,if,they,perform,any,sort,of,extended,singleton,creation,phase,in,particular,subclasses,should,i,not,i,have,their,own,mutexes,involved,in,singleton,creation,to,avoid,the,potential,for,deadlocks,in,lazy,init,situations;protected,final,object,get,singleton,mutex,return,this,singleton,objects
DefaultSingletonBeanRegistry -> protected final Object getSingletonMutex();1409688815;Expose the singleton mutex to subclasses._<p>Subclasses should synchronize on the given Object if they perform_any sort of extended singleton creation phase. In particular, subclasses_should <i>not</i> have their own mutexes involved in singleton creation,_to avoid the potential for deadlocks in lazy-init situations.;protected final Object getSingletonMutex() {_		return this.singletonObjects__	};expose,the,singleton,mutex,to,subclasses,p,subclasses,should,synchronize,on,the,given,object,if,they,perform,any,sort,of,extended,singleton,creation,phase,in,particular,subclasses,should,i,not,i,have,their,own,mutexes,involved,in,singleton,creation,to,avoid,the,potential,for,deadlocks,in,lazy,init,situations;protected,final,object,get,singleton,mutex,return,this,singleton,objects
DefaultSingletonBeanRegistry -> protected final Object getSingletonMutex();1417966231;Expose the singleton mutex to subclasses._<p>Subclasses should synchronize on the given Object if they perform_any sort of extended singleton creation phase. In particular, subclasses_should <i>not</i> have their own mutexes involved in singleton creation,_to avoid the potential for deadlocks in lazy-init situations.;protected final Object getSingletonMutex() {_		return this.singletonObjects__	};expose,the,singleton,mutex,to,subclasses,p,subclasses,should,synchronize,on,the,given,object,if,they,perform,any,sort,of,extended,singleton,creation,phase,in,particular,subclasses,should,i,not,i,have,their,own,mutexes,involved,in,singleton,creation,to,avoid,the,potential,for,deadlocks,in,lazy,init,situations;protected,final,object,get,singleton,mutex,return,this,singleton,objects
DefaultSingletonBeanRegistry -> @Nullable 	public Object getSingleton(String beanName, ObjectFactory<?> singletonFactory);1496837955;Return the (raw) singleton object registered under the given name,_creating and registering a new one if none registered yet._@param beanName the name of the bean_@param singletonFactory the ObjectFactory to lazily create the singleton_with, if necessary_@return the registered singleton object;@Nullable_	public Object getSingleton(String beanName, ObjectFactory<?> singletonFactory) {_		Assert.notNull(beanName, "'beanName' must not be null")__		synchronized (this.singletonObjects) {_			Object singletonObject = this.singletonObjects.get(beanName)__			if (singletonObject == null) {_				if (this.singletonsCurrentlyInDestruction) {_					throw new BeanCreationNotAllowedException(beanName,_							"Singleton bean creation not allowed while singletons of this factory are in destruction " +_							"(Do not request a bean from a BeanFactory in a destroy method implementation!)")__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Creating shared instance of singleton bean '" + beanName + "'")__				}_				beforeSingletonCreation(beanName)__				boolean newSingleton = false__				boolean recordSuppressedExceptions = (this.suppressedExceptions == null)__				if (recordSuppressedExceptions) {_					this.suppressedExceptions = new LinkedHashSet<>()__				}_				try {_					singletonObject = singletonFactory.getObject()__					newSingleton = true__				}_				catch (IllegalStateException ex) {_					_					_					singletonObject = this.singletonObjects.get(beanName)__					if (singletonObject == null) {_						throw ex__					}_				}_				catch (BeanCreationException ex) {_					if (recordSuppressedExceptions) {_						for (Exception suppressedException : this.suppressedExceptions) {_							ex.addRelatedCause(suppressedException)__						}_					}_					throw ex__				}_				finally {_					if (recordSuppressedExceptions) {_						this.suppressedExceptions = null__					}_					afterSingletonCreation(beanName)__				}_				if (newSingleton) {_					addSingleton(beanName, singletonObject)__				}_			}_			return (singletonObject != NULL_OBJECT ? singletonObject : null)__		}_	};return,the,raw,singleton,object,registered,under,the,given,name,creating,and,registering,a,new,one,if,none,registered,yet,param,bean,name,the,name,of,the,bean,param,singleton,factory,the,object,factory,to,lazily,create,the,singleton,with,if,necessary,return,the,registered,singleton,object;nullable,public,object,get,singleton,string,bean,name,object,factory,singleton,factory,assert,not,null,bean,name,bean,name,must,not,be,null,synchronized,this,singleton,objects,object,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,if,this,singletons,currently,in,destruction,throw,new,bean,creation,not,allowed,exception,bean,name,singleton,bean,creation,not,allowed,while,singletons,of,this,factory,are,in,destruction,do,not,request,a,bean,from,a,bean,factory,in,a,destroy,method,implementation,if,logger,is,debug,enabled,logger,debug,creating,shared,instance,of,singleton,bean,bean,name,before,singleton,creation,bean,name,boolean,new,singleton,false,boolean,record,suppressed,exceptions,this,suppressed,exceptions,null,if,record,suppressed,exceptions,this,suppressed,exceptions,new,linked,hash,set,try,singleton,object,singleton,factory,get,object,new,singleton,true,catch,illegal,state,exception,ex,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,throw,ex,catch,bean,creation,exception,ex,if,record,suppressed,exceptions,for,exception,suppressed,exception,this,suppressed,exceptions,ex,add,related,cause,suppressed,exception,throw,ex,finally,if,record,suppressed,exceptions,this,suppressed,exceptions,null,after,singleton,creation,bean,name,if,new,singleton,add,singleton,bean,name,singleton,object,return,singleton,object,singleton,object,null
DefaultSingletonBeanRegistry -> @Nullable 	public Object getSingleton(String beanName, ObjectFactory<?> singletonFactory);1498780456;Return the (raw) singleton object registered under the given name,_creating and registering a new one if none registered yet._@param beanName the name of the bean_@param singletonFactory the ObjectFactory to lazily create the singleton_with, if necessary_@return the registered singleton object;@Nullable_	public Object getSingleton(String beanName, ObjectFactory<?> singletonFactory) {_		Assert.notNull(beanName, "'beanName' must not be null")__		synchronized (this.singletonObjects) {_			Object singletonObject = this.singletonObjects.get(beanName)__			if (singletonObject == null) {_				if (this.singletonsCurrentlyInDestruction) {_					throw new BeanCreationNotAllowedException(beanName,_							"Singleton bean creation not allowed while singletons of this factory are in destruction " +_							"(Do not request a bean from a BeanFactory in a destroy method implementation!)")__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Creating shared instance of singleton bean '" + beanName + "'")__				}_				beforeSingletonCreation(beanName)__				boolean newSingleton = false__				boolean recordSuppressedExceptions = (this.suppressedExceptions == null)__				if (recordSuppressedExceptions) {_					this.suppressedExceptions = new LinkedHashSet<>()__				}_				try {_					singletonObject = singletonFactory.getObject()__					newSingleton = true__				}_				catch (IllegalStateException ex) {_					_					_					singletonObject = this.singletonObjects.get(beanName)__					if (singletonObject == null) {_						throw ex__					}_				}_				catch (BeanCreationException ex) {_					if (recordSuppressedExceptions) {_						for (Exception suppressedException : this.suppressedExceptions) {_							ex.addRelatedCause(suppressedException)__						}_					}_					throw ex__				}_				finally {_					if (recordSuppressedExceptions) {_						this.suppressedExceptions = null__					}_					afterSingletonCreation(beanName)__				}_				if (newSingleton) {_					addSingleton(beanName, singletonObject)__				}_			}_			return (singletonObject != NULL_OBJECT ? singletonObject : null)__		}_	};return,the,raw,singleton,object,registered,under,the,given,name,creating,and,registering,a,new,one,if,none,registered,yet,param,bean,name,the,name,of,the,bean,param,singleton,factory,the,object,factory,to,lazily,create,the,singleton,with,if,necessary,return,the,registered,singleton,object;nullable,public,object,get,singleton,string,bean,name,object,factory,singleton,factory,assert,not,null,bean,name,bean,name,must,not,be,null,synchronized,this,singleton,objects,object,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,if,this,singletons,currently,in,destruction,throw,new,bean,creation,not,allowed,exception,bean,name,singleton,bean,creation,not,allowed,while,singletons,of,this,factory,are,in,destruction,do,not,request,a,bean,from,a,bean,factory,in,a,destroy,method,implementation,if,logger,is,debug,enabled,logger,debug,creating,shared,instance,of,singleton,bean,bean,name,before,singleton,creation,bean,name,boolean,new,singleton,false,boolean,record,suppressed,exceptions,this,suppressed,exceptions,null,if,record,suppressed,exceptions,this,suppressed,exceptions,new,linked,hash,set,try,singleton,object,singleton,factory,get,object,new,singleton,true,catch,illegal,state,exception,ex,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,throw,ex,catch,bean,creation,exception,ex,if,record,suppressed,exceptions,for,exception,suppressed,exception,this,suppressed,exceptions,ex,add,related,cause,suppressed,exception,throw,ex,finally,if,record,suppressed,exceptions,this,suppressed,exceptions,null,after,singleton,creation,bean,name,if,new,singleton,add,singleton,bean,name,singleton,object,return,singleton,object,singleton,object,null
DefaultSingletonBeanRegistry -> @Nullable 	public Object getSingleton(String beanName, ObjectFactory<?> singletonFactory);1502974979;Return the (raw) singleton object registered under the given name,_creating and registering a new one if none registered yet._@param beanName the name of the bean_@param singletonFactory the ObjectFactory to lazily create the singleton_with, if necessary_@return the registered singleton object;@Nullable_	public Object getSingleton(String beanName, ObjectFactory<?> singletonFactory) {_		Assert.notNull(beanName, "'beanName' must not be null")__		synchronized (this.singletonObjects) {_			Object singletonObject = this.singletonObjects.get(beanName)__			if (singletonObject == null) {_				if (this.singletonsCurrentlyInDestruction) {_					throw new BeanCreationNotAllowedException(beanName,_							"Singleton bean creation not allowed while singletons of this factory are in destruction " +_							"(Do not request a bean from a BeanFactory in a destroy method implementation!)")__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Creating shared instance of singleton bean '" + beanName + "'")__				}_				beforeSingletonCreation(beanName)__				boolean newSingleton = false__				boolean recordSuppressedExceptions = (this.suppressedExceptions == null)__				if (recordSuppressedExceptions) {_					this.suppressedExceptions = new LinkedHashSet<>()__				}_				try {_					singletonObject = singletonFactory.getObject()__					newSingleton = true__				}_				catch (IllegalStateException ex) {_					_					_					singletonObject = this.singletonObjects.get(beanName)__					if (singletonObject == null) {_						throw ex__					}_				}_				catch (BeanCreationException ex) {_					if (recordSuppressedExceptions) {_						for (Exception suppressedException : this.suppressedExceptions) {_							ex.addRelatedCause(suppressedException)__						}_					}_					throw ex__				}_				finally {_					if (recordSuppressedExceptions) {_						this.suppressedExceptions = null__					}_					afterSingletonCreation(beanName)__				}_				if (newSingleton) {_					addSingleton(beanName, singletonObject)__				}_			}_			return (singletonObject != NULL_OBJECT ? singletonObject : null)__		}_	};return,the,raw,singleton,object,registered,under,the,given,name,creating,and,registering,a,new,one,if,none,registered,yet,param,bean,name,the,name,of,the,bean,param,singleton,factory,the,object,factory,to,lazily,create,the,singleton,with,if,necessary,return,the,registered,singleton,object;nullable,public,object,get,singleton,string,bean,name,object,factory,singleton,factory,assert,not,null,bean,name,bean,name,must,not,be,null,synchronized,this,singleton,objects,object,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,if,this,singletons,currently,in,destruction,throw,new,bean,creation,not,allowed,exception,bean,name,singleton,bean,creation,not,allowed,while,singletons,of,this,factory,are,in,destruction,do,not,request,a,bean,from,a,bean,factory,in,a,destroy,method,implementation,if,logger,is,debug,enabled,logger,debug,creating,shared,instance,of,singleton,bean,bean,name,before,singleton,creation,bean,name,boolean,new,singleton,false,boolean,record,suppressed,exceptions,this,suppressed,exceptions,null,if,record,suppressed,exceptions,this,suppressed,exceptions,new,linked,hash,set,try,singleton,object,singleton,factory,get,object,new,singleton,true,catch,illegal,state,exception,ex,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,throw,ex,catch,bean,creation,exception,ex,if,record,suppressed,exceptions,for,exception,suppressed,exception,this,suppressed,exceptions,ex,add,related,cause,suppressed,exception,throw,ex,finally,if,record,suppressed,exceptions,this,suppressed,exceptions,null,after,singleton,creation,bean,name,if,new,singleton,add,singleton,bean,name,singleton,object,return,singleton,object,singleton,object,null
DefaultSingletonBeanRegistry -> protected void onSuppressedException(Exception ex);1328020251;Register an Exception that happened to get suppressed during the creation of a_singleton bean instance, e.g. a temporary circular reference resolution problem._@param ex the Exception to register;protected void onSuppressedException(Exception ex) {_		synchronized (this.singletonObjects) {_			if (this.suppressedExceptions != null) {_				this.suppressedExceptions.add(ex)__			}_		}_	};register,an,exception,that,happened,to,get,suppressed,during,the,creation,of,a,singleton,bean,instance,e,g,a,temporary,circular,reference,resolution,problem,param,ex,the,exception,to,register;protected,void,on,suppressed,exception,exception,ex,synchronized,this,singleton,objects,if,this,suppressed,exceptions,null,this,suppressed,exceptions,add,ex
DefaultSingletonBeanRegistry -> protected void onSuppressedException(Exception ex);1349872135;Register an Exception that happened to get suppressed during the creation of a_singleton bean instance, e.g. a temporary circular reference resolution problem._@param ex the Exception to register;protected void onSuppressedException(Exception ex) {_		synchronized (this.singletonObjects) {_			if (this.suppressedExceptions != null) {_				this.suppressedExceptions.add(ex)__			}_		}_	};register,an,exception,that,happened,to,get,suppressed,during,the,creation,of,a,singleton,bean,instance,e,g,a,temporary,circular,reference,resolution,problem,param,ex,the,exception,to,register;protected,void,on,suppressed,exception,exception,ex,synchronized,this,singleton,objects,if,this,suppressed,exceptions,null,this,suppressed,exceptions,add,ex
DefaultSingletonBeanRegistry -> protected void onSuppressedException(Exception ex);1352412938;Register an Exception that happened to get suppressed during the creation of a_singleton bean instance, e.g. a temporary circular reference resolution problem._@param ex the Exception to register;protected void onSuppressedException(Exception ex) {_		synchronized (this.singletonObjects) {_			if (this.suppressedExceptions != null) {_				this.suppressedExceptions.add(ex)__			}_		}_	};register,an,exception,that,happened,to,get,suppressed,during,the,creation,of,a,singleton,bean,instance,e,g,a,temporary,circular,reference,resolution,problem,param,ex,the,exception,to,register;protected,void,on,suppressed,exception,exception,ex,synchronized,this,singleton,objects,if,this,suppressed,exceptions,null,this,suppressed,exceptions,add,ex
DefaultSingletonBeanRegistry -> protected void onSuppressedException(Exception ex);1352418897;Register an Exception that happened to get suppressed during the creation of a_singleton bean instance, e.g. a temporary circular reference resolution problem._@param ex the Exception to register;protected void onSuppressedException(Exception ex) {_		synchronized (this.singletonObjects) {_			if (this.suppressedExceptions != null) {_				this.suppressedExceptions.add(ex)__			}_		}_	};register,an,exception,that,happened,to,get,suppressed,during,the,creation,of,a,singleton,bean,instance,e,g,a,temporary,circular,reference,resolution,problem,param,ex,the,exception,to,register;protected,void,on,suppressed,exception,exception,ex,synchronized,this,singleton,objects,if,this,suppressed,exceptions,null,this,suppressed,exceptions,add,ex
DefaultSingletonBeanRegistry -> protected void onSuppressedException(Exception ex);1353882772;Register an Exception that happened to get suppressed during the creation of a_singleton bean instance, e.g. a temporary circular reference resolution problem._@param ex the Exception to register;protected void onSuppressedException(Exception ex) {_		synchronized (this.singletonObjects) {_			if (this.suppressedExceptions != null) {_				this.suppressedExceptions.add(ex)__			}_		}_	};register,an,exception,that,happened,to,get,suppressed,during,the,creation,of,a,singleton,bean,instance,e,g,a,temporary,circular,reference,resolution,problem,param,ex,the,exception,to,register;protected,void,on,suppressed,exception,exception,ex,synchronized,this,singleton,objects,if,this,suppressed,exceptions,null,this,suppressed,exceptions,add,ex
DefaultSingletonBeanRegistry -> protected void onSuppressedException(Exception ex);1355352386;Register an Exception that happened to get suppressed during the creation of a_singleton bean instance, e.g. a temporary circular reference resolution problem._@param ex the Exception to register;protected void onSuppressedException(Exception ex) {_		synchronized (this.singletonObjects) {_			if (this.suppressedExceptions != null) {_				this.suppressedExceptions.add(ex)__			}_		}_	};register,an,exception,that,happened,to,get,suppressed,during,the,creation,of,a,singleton,bean,instance,e,g,a,temporary,circular,reference,resolution,problem,param,ex,the,exception,to,register;protected,void,on,suppressed,exception,exception,ex,synchronized,this,singleton,objects,if,this,suppressed,exceptions,null,this,suppressed,exceptions,add,ex
DefaultSingletonBeanRegistry -> protected void onSuppressedException(Exception ex);1356735495;Register an Exception that happened to get suppressed during the creation of a_singleton bean instance, e.g. a temporary circular reference resolution problem._@param ex the Exception to register;protected void onSuppressedException(Exception ex) {_		synchronized (this.singletonObjects) {_			if (this.suppressedExceptions != null) {_				this.suppressedExceptions.add(ex)__			}_		}_	};register,an,exception,that,happened,to,get,suppressed,during,the,creation,of,a,singleton,bean,instance,e,g,a,temporary,circular,reference,resolution,problem,param,ex,the,exception,to,register;protected,void,on,suppressed,exception,exception,ex,synchronized,this,singleton,objects,if,this,suppressed,exceptions,null,this,suppressed,exceptions,add,ex
DefaultSingletonBeanRegistry -> protected void onSuppressedException(Exception ex);1357119239;Register an Exception that happened to get suppressed during the creation of a_singleton bean instance, e.g. a temporary circular reference resolution problem._@param ex the Exception to register;protected void onSuppressedException(Exception ex) {_		synchronized (this.singletonObjects) {_			if (this.suppressedExceptions != null) {_				this.suppressedExceptions.add(ex)__			}_		}_	};register,an,exception,that,happened,to,get,suppressed,during,the,creation,of,a,singleton,bean,instance,e,g,a,temporary,circular,reference,resolution,problem,param,ex,the,exception,to,register;protected,void,on,suppressed,exception,exception,ex,synchronized,this,singleton,objects,if,this,suppressed,exceptions,null,this,suppressed,exceptions,add,ex
DefaultSingletonBeanRegistry -> protected void onSuppressedException(Exception ex);1364505266;Register an Exception that happened to get suppressed during the creation of a_singleton bean instance, e.g. a temporary circular reference resolution problem._@param ex the Exception to register;protected void onSuppressedException(Exception ex) {_		synchronized (this.singletonObjects) {_			if (this.suppressedExceptions != null) {_				this.suppressedExceptions.add(ex)__			}_		}_	};register,an,exception,that,happened,to,get,suppressed,during,the,creation,of,a,singleton,bean,instance,e,g,a,temporary,circular,reference,resolution,problem,param,ex,the,exception,to,register;protected,void,on,suppressed,exception,exception,ex,synchronized,this,singleton,objects,if,this,suppressed,exceptions,null,this,suppressed,exceptions,add,ex
DefaultSingletonBeanRegistry -> protected void onSuppressedException(Exception ex);1368482696;Register an Exception that happened to get suppressed during the creation of a_singleton bean instance, e.g. a temporary circular reference resolution problem._@param ex the Exception to register;protected void onSuppressedException(Exception ex) {_		synchronized (this.singletonObjects) {_			if (this.suppressedExceptions != null) {_				this.suppressedExceptions.add(ex)__			}_		}_	};register,an,exception,that,happened,to,get,suppressed,during,the,creation,of,a,singleton,bean,instance,e,g,a,temporary,circular,reference,resolution,problem,param,ex,the,exception,to,register;protected,void,on,suppressed,exception,exception,ex,synchronized,this,singleton,objects,if,this,suppressed,exceptions,null,this,suppressed,exceptions,add,ex
DefaultSingletonBeanRegistry -> protected void onSuppressedException(Exception ex);1374698947;Register an Exception that happened to get suppressed during the creation of a_singleton bean instance, e.g. a temporary circular reference resolution problem._@param ex the Exception to register;protected void onSuppressedException(Exception ex) {_		synchronized (this.singletonObjects) {_			if (this.suppressedExceptions != null) {_				this.suppressedExceptions.add(ex)__			}_		}_	};register,an,exception,that,happened,to,get,suppressed,during,the,creation,of,a,singleton,bean,instance,e,g,a,temporary,circular,reference,resolution,problem,param,ex,the,exception,to,register;protected,void,on,suppressed,exception,exception,ex,synchronized,this,singleton,objects,if,this,suppressed,exceptions,null,this,suppressed,exceptions,add,ex
DefaultSingletonBeanRegistry -> protected void onSuppressedException(Exception ex);1385412762;Register an Exception that happened to get suppressed during the creation of a_singleton bean instance, e.g. a temporary circular reference resolution problem._@param ex the Exception to register;protected void onSuppressedException(Exception ex) {_		synchronized (this.singletonObjects) {_			if (this.suppressedExceptions != null) {_				this.suppressedExceptions.add(ex)__			}_		}_	};register,an,exception,that,happened,to,get,suppressed,during,the,creation,of,a,singleton,bean,instance,e,g,a,temporary,circular,reference,resolution,problem,param,ex,the,exception,to,register;protected,void,on,suppressed,exception,exception,ex,synchronized,this,singleton,objects,if,this,suppressed,exceptions,null,this,suppressed,exceptions,add,ex
DefaultSingletonBeanRegistry -> protected void onSuppressedException(Exception ex);1385984377;Register an Exception that happened to get suppressed during the creation of a_singleton bean instance, e.g. a temporary circular reference resolution problem._@param ex the Exception to register;protected void onSuppressedException(Exception ex) {_		synchronized (this.singletonObjects) {_			if (this.suppressedExceptions != null) {_				this.suppressedExceptions.add(ex)__			}_		}_	};register,an,exception,that,happened,to,get,suppressed,during,the,creation,of,a,singleton,bean,instance,e,g,a,temporary,circular,reference,resolution,problem,param,ex,the,exception,to,register;protected,void,on,suppressed,exception,exception,ex,synchronized,this,singleton,objects,if,this,suppressed,exceptions,null,this,suppressed,exceptions,add,ex
DefaultSingletonBeanRegistry -> protected void onSuppressedException(Exception ex);1405430015;Register an Exception that happened to get suppressed during the creation of a_singleton bean instance, e.g. a temporary circular reference resolution problem._@param ex the Exception to register;protected void onSuppressedException(Exception ex) {_		synchronized (this.singletonObjects) {_			if (this.suppressedExceptions != null) {_				this.suppressedExceptions.add(ex)__			}_		}_	};register,an,exception,that,happened,to,get,suppressed,during,the,creation,of,a,singleton,bean,instance,e,g,a,temporary,circular,reference,resolution,problem,param,ex,the,exception,to,register;protected,void,on,suppressed,exception,exception,ex,synchronized,this,singleton,objects,if,this,suppressed,exceptions,null,this,suppressed,exceptions,add,ex
DefaultSingletonBeanRegistry -> protected void onSuppressedException(Exception ex);1408528936;Register an Exception that happened to get suppressed during the creation of a_singleton bean instance, e.g. a temporary circular reference resolution problem._@param ex the Exception to register;protected void onSuppressedException(Exception ex) {_		synchronized (this.singletonObjects) {_			if (this.suppressedExceptions != null) {_				this.suppressedExceptions.add(ex)__			}_		}_	};register,an,exception,that,happened,to,get,suppressed,during,the,creation,of,a,singleton,bean,instance,e,g,a,temporary,circular,reference,resolution,problem,param,ex,the,exception,to,register;protected,void,on,suppressed,exception,exception,ex,synchronized,this,singleton,objects,if,this,suppressed,exceptions,null,this,suppressed,exceptions,add,ex
DefaultSingletonBeanRegistry -> protected void onSuppressedException(Exception ex);1408624154;Register an Exception that happened to get suppressed during the creation of a_singleton bean instance, e.g. a temporary circular reference resolution problem._@param ex the Exception to register;protected void onSuppressedException(Exception ex) {_		synchronized (this.singletonObjects) {_			if (this.suppressedExceptions != null) {_				this.suppressedExceptions.add(ex)__			}_		}_	};register,an,exception,that,happened,to,get,suppressed,during,the,creation,of,a,singleton,bean,instance,e,g,a,temporary,circular,reference,resolution,problem,param,ex,the,exception,to,register;protected,void,on,suppressed,exception,exception,ex,synchronized,this,singleton,objects,if,this,suppressed,exceptions,null,this,suppressed,exceptions,add,ex
DefaultSingletonBeanRegistry -> protected void onSuppressedException(Exception ex);1409688815;Register an Exception that happened to get suppressed during the creation of a_singleton bean instance, e.g. a temporary circular reference resolution problem._@param ex the Exception to register;protected void onSuppressedException(Exception ex) {_		synchronized (this.singletonObjects) {_			if (this.suppressedExceptions != null) {_				this.suppressedExceptions.add(ex)__			}_		}_	};register,an,exception,that,happened,to,get,suppressed,during,the,creation,of,a,singleton,bean,instance,e,g,a,temporary,circular,reference,resolution,problem,param,ex,the,exception,to,register;protected,void,on,suppressed,exception,exception,ex,synchronized,this,singleton,objects,if,this,suppressed,exceptions,null,this,suppressed,exceptions,add,ex
DefaultSingletonBeanRegistry -> protected void onSuppressedException(Exception ex);1417966231;Register an Exception that happened to get suppressed during the creation of a_singleton bean instance, e.g. a temporary circular reference resolution problem._@param ex the Exception to register;protected void onSuppressedException(Exception ex) {_		synchronized (this.singletonObjects) {_			if (this.suppressedExceptions != null) {_				this.suppressedExceptions.add(ex)__			}_		}_	};register,an,exception,that,happened,to,get,suppressed,during,the,creation,of,a,singleton,bean,instance,e,g,a,temporary,circular,reference,resolution,problem,param,ex,the,exception,to,register;protected,void,on,suppressed,exception,exception,ex,synchronized,this,singleton,objects,if,this,suppressed,exceptions,null,this,suppressed,exceptions,add,ex
DefaultSingletonBeanRegistry -> protected void onSuppressedException(Exception ex);1424972106;Register an Exception that happened to get suppressed during the creation of a_singleton bean instance, e.g. a temporary circular reference resolution problem._@param ex the Exception to register;protected void onSuppressedException(Exception ex) {_		synchronized (this.singletonObjects) {_			if (this.suppressedExceptions != null) {_				this.suppressedExceptions.add(ex)__			}_		}_	};register,an,exception,that,happened,to,get,suppressed,during,the,creation,of,a,singleton,bean,instance,e,g,a,temporary,circular,reference,resolution,problem,param,ex,the,exception,to,register;protected,void,on,suppressed,exception,exception,ex,synchronized,this,singleton,objects,if,this,suppressed,exceptions,null,this,suppressed,exceptions,add,ex
DefaultSingletonBeanRegistry -> protected void onSuppressedException(Exception ex);1447399860;Register an Exception that happened to get suppressed during the creation of a_singleton bean instance, e.g. a temporary circular reference resolution problem._@param ex the Exception to register;protected void onSuppressedException(Exception ex) {_		synchronized (this.singletonObjects) {_			if (this.suppressedExceptions != null) {_				this.suppressedExceptions.add(ex)__			}_		}_	};register,an,exception,that,happened,to,get,suppressed,during,the,creation,of,a,singleton,bean,instance,e,g,a,temporary,circular,reference,resolution,problem,param,ex,the,exception,to,register;protected,void,on,suppressed,exception,exception,ex,synchronized,this,singleton,objects,if,this,suppressed,exceptions,null,this,suppressed,exceptions,add,ex
DefaultSingletonBeanRegistry -> protected void onSuppressedException(Exception ex);1467730834;Register an Exception that happened to get suppressed during the creation of a_singleton bean instance, e.g. a temporary circular reference resolution problem._@param ex the Exception to register;protected void onSuppressedException(Exception ex) {_		synchronized (this.singletonObjects) {_			if (this.suppressedExceptions != null) {_				this.suppressedExceptions.add(ex)__			}_		}_	};register,an,exception,that,happened,to,get,suppressed,during,the,creation,of,a,singleton,bean,instance,e,g,a,temporary,circular,reference,resolution,problem,param,ex,the,exception,to,register;protected,void,on,suppressed,exception,exception,ex,synchronized,this,singleton,objects,if,this,suppressed,exceptions,null,this,suppressed,exceptions,add,ex
DefaultSingletonBeanRegistry -> protected void onSuppressedException(Exception ex);1467810738;Register an Exception that happened to get suppressed during the creation of a_singleton bean instance, e.g. a temporary circular reference resolution problem._@param ex the Exception to register;protected void onSuppressedException(Exception ex) {_		synchronized (this.singletonObjects) {_			if (this.suppressedExceptions != null) {_				this.suppressedExceptions.add(ex)__			}_		}_	};register,an,exception,that,happened,to,get,suppressed,during,the,creation,of,a,singleton,bean,instance,e,g,a,temporary,circular,reference,resolution,problem,param,ex,the,exception,to,register;protected,void,on,suppressed,exception,exception,ex,synchronized,this,singleton,objects,if,this,suppressed,exceptions,null,this,suppressed,exceptions,add,ex
DefaultSingletonBeanRegistry -> protected void onSuppressedException(Exception ex);1469561191;Register an Exception that happened to get suppressed during the creation of a_singleton bean instance, e.g. a temporary circular reference resolution problem._@param ex the Exception to register;protected void onSuppressedException(Exception ex) {_		synchronized (this.singletonObjects) {_			if (this.suppressedExceptions != null) {_				this.suppressedExceptions.add(ex)__			}_		}_	};register,an,exception,that,happened,to,get,suppressed,during,the,creation,of,a,singleton,bean,instance,e,g,a,temporary,circular,reference,resolution,problem,param,ex,the,exception,to,register;protected,void,on,suppressed,exception,exception,ex,synchronized,this,singleton,objects,if,this,suppressed,exceptions,null,this,suppressed,exceptions,add,ex
DefaultSingletonBeanRegistry -> protected void onSuppressedException(Exception ex);1478538021;Register an Exception that happened to get suppressed during the creation of a_singleton bean instance, e.g. a temporary circular reference resolution problem._@param ex the Exception to register;protected void onSuppressedException(Exception ex) {_		synchronized (this.singletonObjects) {_			if (this.suppressedExceptions != null) {_				this.suppressedExceptions.add(ex)__			}_		}_	};register,an,exception,that,happened,to,get,suppressed,during,the,creation,of,a,singleton,bean,instance,e,g,a,temporary,circular,reference,resolution,problem,param,ex,the,exception,to,register;protected,void,on,suppressed,exception,exception,ex,synchronized,this,singleton,objects,if,this,suppressed,exceptions,null,this,suppressed,exceptions,add,ex
DefaultSingletonBeanRegistry -> protected void onSuppressedException(Exception ex);1495868221;Register an Exception that happened to get suppressed during the creation of a_singleton bean instance, e.g. a temporary circular reference resolution problem._@param ex the Exception to register;protected void onSuppressedException(Exception ex) {_		synchronized (this.singletonObjects) {_			if (this.suppressedExceptions != null) {_				this.suppressedExceptions.add(ex)__			}_		}_	};register,an,exception,that,happened,to,get,suppressed,during,the,creation,of,a,singleton,bean,instance,e,g,a,temporary,circular,reference,resolution,problem,param,ex,the,exception,to,register;protected,void,on,suppressed,exception,exception,ex,synchronized,this,singleton,objects,if,this,suppressed,exceptions,null,this,suppressed,exceptions,add,ex
DefaultSingletonBeanRegistry -> protected void onSuppressedException(Exception ex);1496259743;Register an Exception that happened to get suppressed during the creation of a_singleton bean instance, e.g. a temporary circular reference resolution problem._@param ex the Exception to register;protected void onSuppressedException(Exception ex) {_		synchronized (this.singletonObjects) {_			if (this.suppressedExceptions != null) {_				this.suppressedExceptions.add(ex)__			}_		}_	};register,an,exception,that,happened,to,get,suppressed,during,the,creation,of,a,singleton,bean,instance,e,g,a,temporary,circular,reference,resolution,problem,param,ex,the,exception,to,register;protected,void,on,suppressed,exception,exception,ex,synchronized,this,singleton,objects,if,this,suppressed,exceptions,null,this,suppressed,exceptions,add,ex
DefaultSingletonBeanRegistry -> protected void onSuppressedException(Exception ex);1496837955;Register an Exception that happened to get suppressed during the creation of a_singleton bean instance, e.g. a temporary circular reference resolution problem._@param ex the Exception to register;protected void onSuppressedException(Exception ex) {_		synchronized (this.singletonObjects) {_			if (this.suppressedExceptions != null) {_				this.suppressedExceptions.add(ex)__			}_		}_	};register,an,exception,that,happened,to,get,suppressed,during,the,creation,of,a,singleton,bean,instance,e,g,a,temporary,circular,reference,resolution,problem,param,ex,the,exception,to,register;protected,void,on,suppressed,exception,exception,ex,synchronized,this,singleton,objects,if,this,suppressed,exceptions,null,this,suppressed,exceptions,add,ex
DefaultSingletonBeanRegistry -> protected void onSuppressedException(Exception ex);1498780456;Register an Exception that happened to get suppressed during the creation of a_singleton bean instance, e.g. a temporary circular reference resolution problem._@param ex the Exception to register;protected void onSuppressedException(Exception ex) {_		synchronized (this.singletonObjects) {_			if (this.suppressedExceptions != null) {_				this.suppressedExceptions.add(ex)__			}_		}_	};register,an,exception,that,happened,to,get,suppressed,during,the,creation,of,a,singleton,bean,instance,e,g,a,temporary,circular,reference,resolution,problem,param,ex,the,exception,to,register;protected,void,on,suppressed,exception,exception,ex,synchronized,this,singleton,objects,if,this,suppressed,exceptions,null,this,suppressed,exceptions,add,ex
DefaultSingletonBeanRegistry -> protected void onSuppressedException(Exception ex);1502974979;Register an Exception that happened to get suppressed during the creation of a_singleton bean instance, e.g. a temporary circular reference resolution problem._@param ex the Exception to register;protected void onSuppressedException(Exception ex) {_		synchronized (this.singletonObjects) {_			if (this.suppressedExceptions != null) {_				this.suppressedExceptions.add(ex)__			}_		}_	};register,an,exception,that,happened,to,get,suppressed,during,the,creation,of,a,singleton,bean,instance,e,g,a,temporary,circular,reference,resolution,problem,param,ex,the,exception,to,register;protected,void,on,suppressed,exception,exception,ex,synchronized,this,singleton,objects,if,this,suppressed,exceptions,null,this,suppressed,exceptions,add,ex
DefaultSingletonBeanRegistry -> protected void onSuppressedException(Exception ex);1503007895;Register an Exception that happened to get suppressed during the creation of a_singleton bean instance, e.g. a temporary circular reference resolution problem._@param ex the Exception to register;protected void onSuppressedException(Exception ex) {_		synchronized (this.singletonObjects) {_			if (this.suppressedExceptions != null) {_				this.suppressedExceptions.add(ex)__			}_		}_	};register,an,exception,that,happened,to,get,suppressed,during,the,creation,of,a,singleton,bean,instance,e,g,a,temporary,circular,reference,resolution,problem,param,ex,the,exception,to,register;protected,void,on,suppressed,exception,exception,ex,synchronized,this,singleton,objects,if,this,suppressed,exceptions,null,this,suppressed,exceptions,add,ex
DefaultSingletonBeanRegistry -> protected void onSuppressedException(Exception ex);1518810557;Register an Exception that happened to get suppressed during the creation of a_singleton bean instance, e.g. a temporary circular reference resolution problem._@param ex the Exception to register;protected void onSuppressedException(Exception ex) {_		synchronized (this.singletonObjects) {_			if (this.suppressedExceptions != null) {_				this.suppressedExceptions.add(ex)__			}_		}_	};register,an,exception,that,happened,to,get,suppressed,during,the,creation,of,a,singleton,bean,instance,e,g,a,temporary,circular,reference,resolution,problem,param,ex,the,exception,to,register;protected,void,on,suppressed,exception,exception,ex,synchronized,this,singleton,objects,if,this,suppressed,exceptions,null,this,suppressed,exceptions,add,ex
DefaultSingletonBeanRegistry -> protected void onSuppressedException(Exception ex);1521822873;Register an Exception that happened to get suppressed during the creation of a_singleton bean instance, e.g. a temporary circular reference resolution problem._@param ex the Exception to register;protected void onSuppressedException(Exception ex) {_		synchronized (this.singletonObjects) {_			if (this.suppressedExceptions != null) {_				this.suppressedExceptions.add(ex)__			}_		}_	};register,an,exception,that,happened,to,get,suppressed,during,the,creation,of,a,singleton,bean,instance,e,g,a,temporary,circular,reference,resolution,problem,param,ex,the,exception,to,register;protected,void,on,suppressed,exception,exception,ex,synchronized,this,singleton,objects,if,this,suppressed,exceptions,null,this,suppressed,exceptions,add,ex
DefaultSingletonBeanRegistry -> protected void onSuppressedException(Exception ex);1521905451;Register an Exception that happened to get suppressed during the creation of a_singleton bean instance, e.g. a temporary circular reference resolution problem._@param ex the Exception to register;protected void onSuppressedException(Exception ex) {_		synchronized (this.singletonObjects) {_			if (this.suppressedExceptions != null) {_				this.suppressedExceptions.add(ex)__			}_		}_	};register,an,exception,that,happened,to,get,suppressed,during,the,creation,of,a,singleton,bean,instance,e,g,a,temporary,circular,reference,resolution,problem,param,ex,the,exception,to,register;protected,void,on,suppressed,exception,exception,ex,synchronized,this,singleton,objects,if,this,suppressed,exceptions,null,this,suppressed,exceptions,add,ex
DefaultSingletonBeanRegistry -> protected void onSuppressedException(Exception ex);1527623493;Register an Exception that happened to get suppressed during the creation of a_singleton bean instance, e.g. a temporary circular reference resolution problem._@param ex the Exception to register;protected void onSuppressedException(Exception ex) {_		synchronized (this.singletonObjects) {_			if (this.suppressedExceptions != null) {_				this.suppressedExceptions.add(ex)__			}_		}_	};register,an,exception,that,happened,to,get,suppressed,during,the,creation,of,a,singleton,bean,instance,e,g,a,temporary,circular,reference,resolution,problem,param,ex,the,exception,to,register;protected,void,on,suppressed,exception,exception,ex,synchronized,this,singleton,objects,if,this,suppressed,exceptions,null,this,suppressed,exceptions,add,ex
DefaultSingletonBeanRegistry -> protected void onSuppressedException(Exception ex);1530174524;Register an Exception that happened to get suppressed during the creation of a_singleton bean instance, e.g. a temporary circular reference resolution problem._@param ex the Exception to register;protected void onSuppressedException(Exception ex) {_		synchronized (this.singletonObjects) {_			if (this.suppressedExceptions != null) {_				this.suppressedExceptions.add(ex)__			}_		}_	};register,an,exception,that,happened,to,get,suppressed,during,the,creation,of,a,singleton,bean,instance,e,g,a,temporary,circular,reference,resolution,problem,param,ex,the,exception,to,register;protected,void,on,suppressed,exception,exception,ex,synchronized,this,singleton,objects,if,this,suppressed,exceptions,null,this,suppressed,exceptions,add,ex
DefaultSingletonBeanRegistry -> protected void onSuppressedException(Exception ex);1532091916;Register an Exception that happened to get suppressed during the creation of a_singleton bean instance, e.g. a temporary circular reference resolution problem._@param ex the Exception to register;protected void onSuppressedException(Exception ex) {_		synchronized (this.singletonObjects) {_			if (this.suppressedExceptions != null) {_				this.suppressedExceptions.add(ex)__			}_		}_	};register,an,exception,that,happened,to,get,suppressed,during,the,creation,of,a,singleton,bean,instance,e,g,a,temporary,circular,reference,resolution,problem,param,ex,the,exception,to,register;protected,void,on,suppressed,exception,exception,ex,synchronized,this,singleton,objects,if,this,suppressed,exceptions,null,this,suppressed,exceptions,add,ex
DefaultSingletonBeanRegistry -> protected void onSuppressedException(Exception ex);1532706365;Register an Exception that happened to get suppressed during the creation of a_singleton bean instance, e.g. a temporary circular reference resolution problem._@param ex the Exception to register;protected void onSuppressedException(Exception ex) {_		synchronized (this.singletonObjects) {_			if (this.suppressedExceptions != null) {_				this.suppressedExceptions.add(ex)__			}_		}_	};register,an,exception,that,happened,to,get,suppressed,during,the,creation,of,a,singleton,bean,instance,e,g,a,temporary,circular,reference,resolution,problem,param,ex,the,exception,to,register;protected,void,on,suppressed,exception,exception,ex,synchronized,this,singleton,objects,if,this,suppressed,exceptions,null,this,suppressed,exceptions,add,ex
DefaultSingletonBeanRegistry -> protected void addSingleton(String beanName, @Nullable Object singletonObject);1496837955;Add the given singleton object to the singleton cache of this factory._<p>To be called for eager registration of singletons._@param beanName the name of the bean_@param singletonObject the singleton object;protected void addSingleton(String beanName, @Nullable Object singletonObject) {_		synchronized (this.singletonObjects) {_			this.singletonObjects.put(beanName, (singletonObject != null ? singletonObject : NULL_OBJECT))__			this.singletonFactories.remove(beanName)__			this.earlySingletonObjects.remove(beanName)__			this.registeredSingletons.add(beanName)__		}_	};add,the,given,singleton,object,to,the,singleton,cache,of,this,factory,p,to,be,called,for,eager,registration,of,singletons,param,bean,name,the,name,of,the,bean,param,singleton,object,the,singleton,object;protected,void,add,singleton,string,bean,name,nullable,object,singleton,object,synchronized,this,singleton,objects,this,singleton,objects,put,bean,name,singleton,object,null,singleton,object,this,singleton,factories,remove,bean,name,this,early,singleton,objects,remove,bean,name,this,registered,singletons,add,bean,name
DefaultSingletonBeanRegistry -> protected void addSingleton(String beanName, @Nullable Object singletonObject);1498780456;Add the given singleton object to the singleton cache of this factory._<p>To be called for eager registration of singletons._@param beanName the name of the bean_@param singletonObject the singleton object;protected void addSingleton(String beanName, @Nullable Object singletonObject) {_		synchronized (this.singletonObjects) {_			this.singletonObjects.put(beanName, (singletonObject != null ? singletonObject : NULL_OBJECT))__			this.singletonFactories.remove(beanName)__			this.earlySingletonObjects.remove(beanName)__			this.registeredSingletons.add(beanName)__		}_	};add,the,given,singleton,object,to,the,singleton,cache,of,this,factory,p,to,be,called,for,eager,registration,of,singletons,param,bean,name,the,name,of,the,bean,param,singleton,object,the,singleton,object;protected,void,add,singleton,string,bean,name,nullable,object,singleton,object,synchronized,this,singleton,objects,this,singleton,objects,put,bean,name,singleton,object,null,singleton,object,this,singleton,factories,remove,bean,name,this,early,singleton,objects,remove,bean,name,this,registered,singletons,add,bean,name
DefaultSingletonBeanRegistry -> protected void addSingleton(String beanName, @Nullable Object singletonObject);1502974979;Add the given singleton object to the singleton cache of this factory._<p>To be called for eager registration of singletons._@param beanName the name of the bean_@param singletonObject the singleton object;protected void addSingleton(String beanName, @Nullable Object singletonObject) {_		synchronized (this.singletonObjects) {_			this.singletonObjects.put(beanName, (singletonObject != null ? singletonObject : NULL_OBJECT))__			this.singletonFactories.remove(beanName)__			this.earlySingletonObjects.remove(beanName)__			this.registeredSingletons.add(beanName)__		}_	};add,the,given,singleton,object,to,the,singleton,cache,of,this,factory,p,to,be,called,for,eager,registration,of,singletons,param,bean,name,the,name,of,the,bean,param,singleton,object,the,singleton,object;protected,void,add,singleton,string,bean,name,nullable,object,singleton,object,synchronized,this,singleton,objects,this,singleton,objects,put,bean,name,singleton,object,null,singleton,object,this,singleton,factories,remove,bean,name,this,early,singleton,objects,remove,bean,name,this,registered,singletons,add,bean,name
DefaultSingletonBeanRegistry -> protected void removeSingleton(String beanName);1328020251;Remove the bean with the given name from the singleton cache of this factory,_to be able to clean up eager registration of a singleton if creation failed._@param beanName the name of the bean_@see #getSingletonMutex();protected void removeSingleton(String beanName) {_		synchronized (this.singletonObjects) {_			this.singletonObjects.remove(beanName)__			this.singletonFactories.remove(beanName)__			this.earlySingletonObjects.remove(beanName)__			this.registeredSingletons.remove(beanName)__		}_	};remove,the,bean,with,the,given,name,from,the,singleton,cache,of,this,factory,to,be,able,to,clean,up,eager,registration,of,a,singleton,if,creation,failed,param,bean,name,the,name,of,the,bean,see,get,singleton,mutex;protected,void,remove,singleton,string,bean,name,synchronized,this,singleton,objects,this,singleton,objects,remove,bean,name,this,singleton,factories,remove,bean,name,this,early,singleton,objects,remove,bean,name,this,registered,singletons,remove,bean,name
DefaultSingletonBeanRegistry -> protected void removeSingleton(String beanName);1349872135;Remove the bean with the given name from the singleton cache of this factory,_to be able to clean up eager registration of a singleton if creation failed._@param beanName the name of the bean_@see #getSingletonMutex();protected void removeSingleton(String beanName) {_		synchronized (this.singletonObjects) {_			this.singletonObjects.remove(beanName)__			this.singletonFactories.remove(beanName)__			this.earlySingletonObjects.remove(beanName)__			this.registeredSingletons.remove(beanName)__		}_	};remove,the,bean,with,the,given,name,from,the,singleton,cache,of,this,factory,to,be,able,to,clean,up,eager,registration,of,a,singleton,if,creation,failed,param,bean,name,the,name,of,the,bean,see,get,singleton,mutex;protected,void,remove,singleton,string,bean,name,synchronized,this,singleton,objects,this,singleton,objects,remove,bean,name,this,singleton,factories,remove,bean,name,this,early,singleton,objects,remove,bean,name,this,registered,singletons,remove,bean,name
DefaultSingletonBeanRegistry -> protected void removeSingleton(String beanName);1352412938;Remove the bean with the given name from the singleton cache of this factory,_to be able to clean up eager registration of a singleton if creation failed._@param beanName the name of the bean_@see #getSingletonMutex();protected void removeSingleton(String beanName) {_		synchronized (this.singletonObjects) {_			this.singletonObjects.remove(beanName)__			this.singletonFactories.remove(beanName)__			this.earlySingletonObjects.remove(beanName)__			this.registeredSingletons.remove(beanName)__		}_	};remove,the,bean,with,the,given,name,from,the,singleton,cache,of,this,factory,to,be,able,to,clean,up,eager,registration,of,a,singleton,if,creation,failed,param,bean,name,the,name,of,the,bean,see,get,singleton,mutex;protected,void,remove,singleton,string,bean,name,synchronized,this,singleton,objects,this,singleton,objects,remove,bean,name,this,singleton,factories,remove,bean,name,this,early,singleton,objects,remove,bean,name,this,registered,singletons,remove,bean,name
DefaultSingletonBeanRegistry -> protected void removeSingleton(String beanName);1352418897;Remove the bean with the given name from the singleton cache of this factory,_to be able to clean up eager registration of a singleton if creation failed._@param beanName the name of the bean_@see #getSingletonMutex();protected void removeSingleton(String beanName) {_		synchronized (this.singletonObjects) {_			this.singletonObjects.remove(beanName)__			this.singletonFactories.remove(beanName)__			this.earlySingletonObjects.remove(beanName)__			this.registeredSingletons.remove(beanName)__		}_	};remove,the,bean,with,the,given,name,from,the,singleton,cache,of,this,factory,to,be,able,to,clean,up,eager,registration,of,a,singleton,if,creation,failed,param,bean,name,the,name,of,the,bean,see,get,singleton,mutex;protected,void,remove,singleton,string,bean,name,synchronized,this,singleton,objects,this,singleton,objects,remove,bean,name,this,singleton,factories,remove,bean,name,this,early,singleton,objects,remove,bean,name,this,registered,singletons,remove,bean,name
DefaultSingletonBeanRegistry -> protected void removeSingleton(String beanName);1353882772;Remove the bean with the given name from the singleton cache of this factory,_to be able to clean up eager registration of a singleton if creation failed._@param beanName the name of the bean_@see #getSingletonMutex();protected void removeSingleton(String beanName) {_		synchronized (this.singletonObjects) {_			this.singletonObjects.remove(beanName)__			this.singletonFactories.remove(beanName)__			this.earlySingletonObjects.remove(beanName)__			this.registeredSingletons.remove(beanName)__		}_	};remove,the,bean,with,the,given,name,from,the,singleton,cache,of,this,factory,to,be,able,to,clean,up,eager,registration,of,a,singleton,if,creation,failed,param,bean,name,the,name,of,the,bean,see,get,singleton,mutex;protected,void,remove,singleton,string,bean,name,synchronized,this,singleton,objects,this,singleton,objects,remove,bean,name,this,singleton,factories,remove,bean,name,this,early,singleton,objects,remove,bean,name,this,registered,singletons,remove,bean,name
DefaultSingletonBeanRegistry -> protected void removeSingleton(String beanName);1355352386;Remove the bean with the given name from the singleton cache of this factory,_to be able to clean up eager registration of a singleton if creation failed._@param beanName the name of the bean_@see #getSingletonMutex();protected void removeSingleton(String beanName) {_		synchronized (this.singletonObjects) {_			this.singletonObjects.remove(beanName)__			this.singletonFactories.remove(beanName)__			this.earlySingletonObjects.remove(beanName)__			this.registeredSingletons.remove(beanName)__		}_	};remove,the,bean,with,the,given,name,from,the,singleton,cache,of,this,factory,to,be,able,to,clean,up,eager,registration,of,a,singleton,if,creation,failed,param,bean,name,the,name,of,the,bean,see,get,singleton,mutex;protected,void,remove,singleton,string,bean,name,synchronized,this,singleton,objects,this,singleton,objects,remove,bean,name,this,singleton,factories,remove,bean,name,this,early,singleton,objects,remove,bean,name,this,registered,singletons,remove,bean,name
DefaultSingletonBeanRegistry -> protected void removeSingleton(String beanName);1356735495;Remove the bean with the given name from the singleton cache of this factory,_to be able to clean up eager registration of a singleton if creation failed._@param beanName the name of the bean_@see #getSingletonMutex();protected void removeSingleton(String beanName) {_		synchronized (this.singletonObjects) {_			this.singletonObjects.remove(beanName)__			this.singletonFactories.remove(beanName)__			this.earlySingletonObjects.remove(beanName)__			this.registeredSingletons.remove(beanName)__		}_	};remove,the,bean,with,the,given,name,from,the,singleton,cache,of,this,factory,to,be,able,to,clean,up,eager,registration,of,a,singleton,if,creation,failed,param,bean,name,the,name,of,the,bean,see,get,singleton,mutex;protected,void,remove,singleton,string,bean,name,synchronized,this,singleton,objects,this,singleton,objects,remove,bean,name,this,singleton,factories,remove,bean,name,this,early,singleton,objects,remove,bean,name,this,registered,singletons,remove,bean,name
DefaultSingletonBeanRegistry -> protected void removeSingleton(String beanName);1357119239;Remove the bean with the given name from the singleton cache of this factory,_to be able to clean up eager registration of a singleton if creation failed._@param beanName the name of the bean_@see #getSingletonMutex();protected void removeSingleton(String beanName) {_		synchronized (this.singletonObjects) {_			this.singletonObjects.remove(beanName)__			this.singletonFactories.remove(beanName)__			this.earlySingletonObjects.remove(beanName)__			this.registeredSingletons.remove(beanName)__		}_	};remove,the,bean,with,the,given,name,from,the,singleton,cache,of,this,factory,to,be,able,to,clean,up,eager,registration,of,a,singleton,if,creation,failed,param,bean,name,the,name,of,the,bean,see,get,singleton,mutex;protected,void,remove,singleton,string,bean,name,synchronized,this,singleton,objects,this,singleton,objects,remove,bean,name,this,singleton,factories,remove,bean,name,this,early,singleton,objects,remove,bean,name,this,registered,singletons,remove,bean,name
DefaultSingletonBeanRegistry -> protected void removeSingleton(String beanName);1364505266;Remove the bean with the given name from the singleton cache of this factory,_to be able to clean up eager registration of a singleton if creation failed._@param beanName the name of the bean_@see #getSingletonMutex();protected void removeSingleton(String beanName) {_		synchronized (this.singletonObjects) {_			this.singletonObjects.remove(beanName)__			this.singletonFactories.remove(beanName)__			this.earlySingletonObjects.remove(beanName)__			this.registeredSingletons.remove(beanName)__		}_	};remove,the,bean,with,the,given,name,from,the,singleton,cache,of,this,factory,to,be,able,to,clean,up,eager,registration,of,a,singleton,if,creation,failed,param,bean,name,the,name,of,the,bean,see,get,singleton,mutex;protected,void,remove,singleton,string,bean,name,synchronized,this,singleton,objects,this,singleton,objects,remove,bean,name,this,singleton,factories,remove,bean,name,this,early,singleton,objects,remove,bean,name,this,registered,singletons,remove,bean,name
DefaultSingletonBeanRegistry -> protected void removeSingleton(String beanName);1368482696;Remove the bean with the given name from the singleton cache of this factory,_to be able to clean up eager registration of a singleton if creation failed._@param beanName the name of the bean_@see #getSingletonMutex();protected void removeSingleton(String beanName) {_		synchronized (this.singletonObjects) {_			this.singletonObjects.remove(beanName)__			this.singletonFactories.remove(beanName)__			this.earlySingletonObjects.remove(beanName)__			this.registeredSingletons.remove(beanName)__		}_	};remove,the,bean,with,the,given,name,from,the,singleton,cache,of,this,factory,to,be,able,to,clean,up,eager,registration,of,a,singleton,if,creation,failed,param,bean,name,the,name,of,the,bean,see,get,singleton,mutex;protected,void,remove,singleton,string,bean,name,synchronized,this,singleton,objects,this,singleton,objects,remove,bean,name,this,singleton,factories,remove,bean,name,this,early,singleton,objects,remove,bean,name,this,registered,singletons,remove,bean,name
DefaultSingletonBeanRegistry -> protected void removeSingleton(String beanName);1374698947;Remove the bean with the given name from the singleton cache of this factory,_to be able to clean up eager registration of a singleton if creation failed._@param beanName the name of the bean_@see #getSingletonMutex();protected void removeSingleton(String beanName) {_		synchronized (this.singletonObjects) {_			this.singletonObjects.remove(beanName)__			this.singletonFactories.remove(beanName)__			this.earlySingletonObjects.remove(beanName)__			this.registeredSingletons.remove(beanName)__		}_	};remove,the,bean,with,the,given,name,from,the,singleton,cache,of,this,factory,to,be,able,to,clean,up,eager,registration,of,a,singleton,if,creation,failed,param,bean,name,the,name,of,the,bean,see,get,singleton,mutex;protected,void,remove,singleton,string,bean,name,synchronized,this,singleton,objects,this,singleton,objects,remove,bean,name,this,singleton,factories,remove,bean,name,this,early,singleton,objects,remove,bean,name,this,registered,singletons,remove,bean,name
DefaultSingletonBeanRegistry -> protected void removeSingleton(String beanName);1385412762;Remove the bean with the given name from the singleton cache of this factory,_to be able to clean up eager registration of a singleton if creation failed._@param beanName the name of the bean_@see #getSingletonMutex();protected void removeSingleton(String beanName) {_		synchronized (this.singletonObjects) {_			this.singletonObjects.remove(beanName)__			this.singletonFactories.remove(beanName)__			this.earlySingletonObjects.remove(beanName)__			this.registeredSingletons.remove(beanName)__		}_	};remove,the,bean,with,the,given,name,from,the,singleton,cache,of,this,factory,to,be,able,to,clean,up,eager,registration,of,a,singleton,if,creation,failed,param,bean,name,the,name,of,the,bean,see,get,singleton,mutex;protected,void,remove,singleton,string,bean,name,synchronized,this,singleton,objects,this,singleton,objects,remove,bean,name,this,singleton,factories,remove,bean,name,this,early,singleton,objects,remove,bean,name,this,registered,singletons,remove,bean,name
DefaultSingletonBeanRegistry -> protected void removeSingleton(String beanName);1385984377;Remove the bean with the given name from the singleton cache of this factory,_to be able to clean up eager registration of a singleton if creation failed._@param beanName the name of the bean_@see #getSingletonMutex();protected void removeSingleton(String beanName) {_		synchronized (this.singletonObjects) {_			this.singletonObjects.remove(beanName)__			this.singletonFactories.remove(beanName)__			this.earlySingletonObjects.remove(beanName)__			this.registeredSingletons.remove(beanName)__		}_	};remove,the,bean,with,the,given,name,from,the,singleton,cache,of,this,factory,to,be,able,to,clean,up,eager,registration,of,a,singleton,if,creation,failed,param,bean,name,the,name,of,the,bean,see,get,singleton,mutex;protected,void,remove,singleton,string,bean,name,synchronized,this,singleton,objects,this,singleton,objects,remove,bean,name,this,singleton,factories,remove,bean,name,this,early,singleton,objects,remove,bean,name,this,registered,singletons,remove,bean,name
DefaultSingletonBeanRegistry -> protected void removeSingleton(String beanName);1405430015;Remove the bean with the given name from the singleton cache of this factory,_to be able to clean up eager registration of a singleton if creation failed._@param beanName the name of the bean_@see #getSingletonMutex();protected void removeSingleton(String beanName) {_		synchronized (this.singletonObjects) {_			this.singletonObjects.remove(beanName)__			this.singletonFactories.remove(beanName)__			this.earlySingletonObjects.remove(beanName)__			this.registeredSingletons.remove(beanName)__		}_	};remove,the,bean,with,the,given,name,from,the,singleton,cache,of,this,factory,to,be,able,to,clean,up,eager,registration,of,a,singleton,if,creation,failed,param,bean,name,the,name,of,the,bean,see,get,singleton,mutex;protected,void,remove,singleton,string,bean,name,synchronized,this,singleton,objects,this,singleton,objects,remove,bean,name,this,singleton,factories,remove,bean,name,this,early,singleton,objects,remove,bean,name,this,registered,singletons,remove,bean,name
DefaultSingletonBeanRegistry -> protected void removeSingleton(String beanName);1408528936;Remove the bean with the given name from the singleton cache of this factory,_to be able to clean up eager registration of a singleton if creation failed._@param beanName the name of the bean_@see #getSingletonMutex();protected void removeSingleton(String beanName) {_		synchronized (this.singletonObjects) {_			this.singletonObjects.remove(beanName)__			this.singletonFactories.remove(beanName)__			this.earlySingletonObjects.remove(beanName)__			this.registeredSingletons.remove(beanName)__		}_	};remove,the,bean,with,the,given,name,from,the,singleton,cache,of,this,factory,to,be,able,to,clean,up,eager,registration,of,a,singleton,if,creation,failed,param,bean,name,the,name,of,the,bean,see,get,singleton,mutex;protected,void,remove,singleton,string,bean,name,synchronized,this,singleton,objects,this,singleton,objects,remove,bean,name,this,singleton,factories,remove,bean,name,this,early,singleton,objects,remove,bean,name,this,registered,singletons,remove,bean,name
DefaultSingletonBeanRegistry -> protected void removeSingleton(String beanName);1408624154;Remove the bean with the given name from the singleton cache of this factory,_to be able to clean up eager registration of a singleton if creation failed._@param beanName the name of the bean_@see #getSingletonMutex();protected void removeSingleton(String beanName) {_		synchronized (this.singletonObjects) {_			this.singletonObjects.remove(beanName)__			this.singletonFactories.remove(beanName)__			this.earlySingletonObjects.remove(beanName)__			this.registeredSingletons.remove(beanName)__		}_	};remove,the,bean,with,the,given,name,from,the,singleton,cache,of,this,factory,to,be,able,to,clean,up,eager,registration,of,a,singleton,if,creation,failed,param,bean,name,the,name,of,the,bean,see,get,singleton,mutex;protected,void,remove,singleton,string,bean,name,synchronized,this,singleton,objects,this,singleton,objects,remove,bean,name,this,singleton,factories,remove,bean,name,this,early,singleton,objects,remove,bean,name,this,registered,singletons,remove,bean,name
DefaultSingletonBeanRegistry -> protected void removeSingleton(String beanName);1409688815;Remove the bean with the given name from the singleton cache of this factory,_to be able to clean up eager registration of a singleton if creation failed._@param beanName the name of the bean_@see #getSingletonMutex();protected void removeSingleton(String beanName) {_		synchronized (this.singletonObjects) {_			this.singletonObjects.remove(beanName)__			this.singletonFactories.remove(beanName)__			this.earlySingletonObjects.remove(beanName)__			this.registeredSingletons.remove(beanName)__		}_	};remove,the,bean,with,the,given,name,from,the,singleton,cache,of,this,factory,to,be,able,to,clean,up,eager,registration,of,a,singleton,if,creation,failed,param,bean,name,the,name,of,the,bean,see,get,singleton,mutex;protected,void,remove,singleton,string,bean,name,synchronized,this,singleton,objects,this,singleton,objects,remove,bean,name,this,singleton,factories,remove,bean,name,this,early,singleton,objects,remove,bean,name,this,registered,singletons,remove,bean,name
DefaultSingletonBeanRegistry -> protected void removeSingleton(String beanName);1417966231;Remove the bean with the given name from the singleton cache of this factory,_to be able to clean up eager registration of a singleton if creation failed._@param beanName the name of the bean_@see #getSingletonMutex();protected void removeSingleton(String beanName) {_		synchronized (this.singletonObjects) {_			this.singletonObjects.remove(beanName)__			this.singletonFactories.remove(beanName)__			this.earlySingletonObjects.remove(beanName)__			this.registeredSingletons.remove(beanName)__		}_	};remove,the,bean,with,the,given,name,from,the,singleton,cache,of,this,factory,to,be,able,to,clean,up,eager,registration,of,a,singleton,if,creation,failed,param,bean,name,the,name,of,the,bean,see,get,singleton,mutex;protected,void,remove,singleton,string,bean,name,synchronized,this,singleton,objects,this,singleton,objects,remove,bean,name,this,singleton,factories,remove,bean,name,this,early,singleton,objects,remove,bean,name,this,registered,singletons,remove,bean,name
DefaultSingletonBeanRegistry -> protected void removeSingleton(String beanName);1424972106;Remove the bean with the given name from the singleton cache of this factory,_to be able to clean up eager registration of a singleton if creation failed._@param beanName the name of the bean_@see #getSingletonMutex();protected void removeSingleton(String beanName) {_		synchronized (this.singletonObjects) {_			this.singletonObjects.remove(beanName)__			this.singletonFactories.remove(beanName)__			this.earlySingletonObjects.remove(beanName)__			this.registeredSingletons.remove(beanName)__		}_	};remove,the,bean,with,the,given,name,from,the,singleton,cache,of,this,factory,to,be,able,to,clean,up,eager,registration,of,a,singleton,if,creation,failed,param,bean,name,the,name,of,the,bean,see,get,singleton,mutex;protected,void,remove,singleton,string,bean,name,synchronized,this,singleton,objects,this,singleton,objects,remove,bean,name,this,singleton,factories,remove,bean,name,this,early,singleton,objects,remove,bean,name,this,registered,singletons,remove,bean,name
DefaultSingletonBeanRegistry -> protected void removeSingleton(String beanName);1447399860;Remove the bean with the given name from the singleton cache of this factory,_to be able to clean up eager registration of a singleton if creation failed._@param beanName the name of the bean_@see #getSingletonMutex();protected void removeSingleton(String beanName) {_		synchronized (this.singletonObjects) {_			this.singletonObjects.remove(beanName)__			this.singletonFactories.remove(beanName)__			this.earlySingletonObjects.remove(beanName)__			this.registeredSingletons.remove(beanName)__		}_	};remove,the,bean,with,the,given,name,from,the,singleton,cache,of,this,factory,to,be,able,to,clean,up,eager,registration,of,a,singleton,if,creation,failed,param,bean,name,the,name,of,the,bean,see,get,singleton,mutex;protected,void,remove,singleton,string,bean,name,synchronized,this,singleton,objects,this,singleton,objects,remove,bean,name,this,singleton,factories,remove,bean,name,this,early,singleton,objects,remove,bean,name,this,registered,singletons,remove,bean,name
DefaultSingletonBeanRegistry -> protected void removeSingleton(String beanName);1467730834;Remove the bean with the given name from the singleton cache of this factory,_to be able to clean up eager registration of a singleton if creation failed._@param beanName the name of the bean_@see #getSingletonMutex();protected void removeSingleton(String beanName) {_		synchronized (this.singletonObjects) {_			this.singletonObjects.remove(beanName)__			this.singletonFactories.remove(beanName)__			this.earlySingletonObjects.remove(beanName)__			this.registeredSingletons.remove(beanName)__		}_	};remove,the,bean,with,the,given,name,from,the,singleton,cache,of,this,factory,to,be,able,to,clean,up,eager,registration,of,a,singleton,if,creation,failed,param,bean,name,the,name,of,the,bean,see,get,singleton,mutex;protected,void,remove,singleton,string,bean,name,synchronized,this,singleton,objects,this,singleton,objects,remove,bean,name,this,singleton,factories,remove,bean,name,this,early,singleton,objects,remove,bean,name,this,registered,singletons,remove,bean,name
DefaultSingletonBeanRegistry -> protected void removeSingleton(String beanName);1467810738;Remove the bean with the given name from the singleton cache of this factory,_to be able to clean up eager registration of a singleton if creation failed._@param beanName the name of the bean_@see #getSingletonMutex();protected void removeSingleton(String beanName) {_		synchronized (this.singletonObjects) {_			this.singletonObjects.remove(beanName)__			this.singletonFactories.remove(beanName)__			this.earlySingletonObjects.remove(beanName)__			this.registeredSingletons.remove(beanName)__		}_	};remove,the,bean,with,the,given,name,from,the,singleton,cache,of,this,factory,to,be,able,to,clean,up,eager,registration,of,a,singleton,if,creation,failed,param,bean,name,the,name,of,the,bean,see,get,singleton,mutex;protected,void,remove,singleton,string,bean,name,synchronized,this,singleton,objects,this,singleton,objects,remove,bean,name,this,singleton,factories,remove,bean,name,this,early,singleton,objects,remove,bean,name,this,registered,singletons,remove,bean,name
DefaultSingletonBeanRegistry -> protected void removeSingleton(String beanName);1469561191;Remove the bean with the given name from the singleton cache of this factory,_to be able to clean up eager registration of a singleton if creation failed._@param beanName the name of the bean_@see #getSingletonMutex();protected void removeSingleton(String beanName) {_		synchronized (this.singletonObjects) {_			this.singletonObjects.remove(beanName)__			this.singletonFactories.remove(beanName)__			this.earlySingletonObjects.remove(beanName)__			this.registeredSingletons.remove(beanName)__		}_	};remove,the,bean,with,the,given,name,from,the,singleton,cache,of,this,factory,to,be,able,to,clean,up,eager,registration,of,a,singleton,if,creation,failed,param,bean,name,the,name,of,the,bean,see,get,singleton,mutex;protected,void,remove,singleton,string,bean,name,synchronized,this,singleton,objects,this,singleton,objects,remove,bean,name,this,singleton,factories,remove,bean,name,this,early,singleton,objects,remove,bean,name,this,registered,singletons,remove,bean,name
DefaultSingletonBeanRegistry -> protected void removeSingleton(String beanName);1478538021;Remove the bean with the given name from the singleton cache of this factory,_to be able to clean up eager registration of a singleton if creation failed._@param beanName the name of the bean_@see #getSingletonMutex();protected void removeSingleton(String beanName) {_		synchronized (this.singletonObjects) {_			this.singletonObjects.remove(beanName)__			this.singletonFactories.remove(beanName)__			this.earlySingletonObjects.remove(beanName)__			this.registeredSingletons.remove(beanName)__		}_	};remove,the,bean,with,the,given,name,from,the,singleton,cache,of,this,factory,to,be,able,to,clean,up,eager,registration,of,a,singleton,if,creation,failed,param,bean,name,the,name,of,the,bean,see,get,singleton,mutex;protected,void,remove,singleton,string,bean,name,synchronized,this,singleton,objects,this,singleton,objects,remove,bean,name,this,singleton,factories,remove,bean,name,this,early,singleton,objects,remove,bean,name,this,registered,singletons,remove,bean,name
DefaultSingletonBeanRegistry -> protected void removeSingleton(String beanName);1495868221;Remove the bean with the given name from the singleton cache of this factory,_to be able to clean up eager registration of a singleton if creation failed._@param beanName the name of the bean_@see #getSingletonMutex();protected void removeSingleton(String beanName) {_		synchronized (this.singletonObjects) {_			this.singletonObjects.remove(beanName)__			this.singletonFactories.remove(beanName)__			this.earlySingletonObjects.remove(beanName)__			this.registeredSingletons.remove(beanName)__		}_	};remove,the,bean,with,the,given,name,from,the,singleton,cache,of,this,factory,to,be,able,to,clean,up,eager,registration,of,a,singleton,if,creation,failed,param,bean,name,the,name,of,the,bean,see,get,singleton,mutex;protected,void,remove,singleton,string,bean,name,synchronized,this,singleton,objects,this,singleton,objects,remove,bean,name,this,singleton,factories,remove,bean,name,this,early,singleton,objects,remove,bean,name,this,registered,singletons,remove,bean,name
DefaultSingletonBeanRegistry -> protected void removeSingleton(String beanName);1496259743;Remove the bean with the given name from the singleton cache of this factory,_to be able to clean up eager registration of a singleton if creation failed._@param beanName the name of the bean_@see #getSingletonMutex();protected void removeSingleton(String beanName) {_		synchronized (this.singletonObjects) {_			this.singletonObjects.remove(beanName)__			this.singletonFactories.remove(beanName)__			this.earlySingletonObjects.remove(beanName)__			this.registeredSingletons.remove(beanName)__		}_	};remove,the,bean,with,the,given,name,from,the,singleton,cache,of,this,factory,to,be,able,to,clean,up,eager,registration,of,a,singleton,if,creation,failed,param,bean,name,the,name,of,the,bean,see,get,singleton,mutex;protected,void,remove,singleton,string,bean,name,synchronized,this,singleton,objects,this,singleton,objects,remove,bean,name,this,singleton,factories,remove,bean,name,this,early,singleton,objects,remove,bean,name,this,registered,singletons,remove,bean,name
DefaultSingletonBeanRegistry -> protected void removeSingleton(String beanName);1496837955;Remove the bean with the given name from the singleton cache of this factory,_to be able to clean up eager registration of a singleton if creation failed._@param beanName the name of the bean_@see #getSingletonMutex();protected void removeSingleton(String beanName) {_		synchronized (this.singletonObjects) {_			this.singletonObjects.remove(beanName)__			this.singletonFactories.remove(beanName)__			this.earlySingletonObjects.remove(beanName)__			this.registeredSingletons.remove(beanName)__		}_	};remove,the,bean,with,the,given,name,from,the,singleton,cache,of,this,factory,to,be,able,to,clean,up,eager,registration,of,a,singleton,if,creation,failed,param,bean,name,the,name,of,the,bean,see,get,singleton,mutex;protected,void,remove,singleton,string,bean,name,synchronized,this,singleton,objects,this,singleton,objects,remove,bean,name,this,singleton,factories,remove,bean,name,this,early,singleton,objects,remove,bean,name,this,registered,singletons,remove,bean,name
DefaultSingletonBeanRegistry -> protected void removeSingleton(String beanName);1498780456;Remove the bean with the given name from the singleton cache of this factory,_to be able to clean up eager registration of a singleton if creation failed._@param beanName the name of the bean_@see #getSingletonMutex();protected void removeSingleton(String beanName) {_		synchronized (this.singletonObjects) {_			this.singletonObjects.remove(beanName)__			this.singletonFactories.remove(beanName)__			this.earlySingletonObjects.remove(beanName)__			this.registeredSingletons.remove(beanName)__		}_	};remove,the,bean,with,the,given,name,from,the,singleton,cache,of,this,factory,to,be,able,to,clean,up,eager,registration,of,a,singleton,if,creation,failed,param,bean,name,the,name,of,the,bean,see,get,singleton,mutex;protected,void,remove,singleton,string,bean,name,synchronized,this,singleton,objects,this,singleton,objects,remove,bean,name,this,singleton,factories,remove,bean,name,this,early,singleton,objects,remove,bean,name,this,registered,singletons,remove,bean,name
DefaultSingletonBeanRegistry -> protected void removeSingleton(String beanName);1502974979;Remove the bean with the given name from the singleton cache of this factory,_to be able to clean up eager registration of a singleton if creation failed._@param beanName the name of the bean_@see #getSingletonMutex();protected void removeSingleton(String beanName) {_		synchronized (this.singletonObjects) {_			this.singletonObjects.remove(beanName)__			this.singletonFactories.remove(beanName)__			this.earlySingletonObjects.remove(beanName)__			this.registeredSingletons.remove(beanName)__		}_	};remove,the,bean,with,the,given,name,from,the,singleton,cache,of,this,factory,to,be,able,to,clean,up,eager,registration,of,a,singleton,if,creation,failed,param,bean,name,the,name,of,the,bean,see,get,singleton,mutex;protected,void,remove,singleton,string,bean,name,synchronized,this,singleton,objects,this,singleton,objects,remove,bean,name,this,singleton,factories,remove,bean,name,this,early,singleton,objects,remove,bean,name,this,registered,singletons,remove,bean,name
DefaultSingletonBeanRegistry -> protected void removeSingleton(String beanName);1503007895;Remove the bean with the given name from the singleton cache of this factory,_to be able to clean up eager registration of a singleton if creation failed._@param beanName the name of the bean_@see #getSingletonMutex();protected void removeSingleton(String beanName) {_		synchronized (this.singletonObjects) {_			this.singletonObjects.remove(beanName)__			this.singletonFactories.remove(beanName)__			this.earlySingletonObjects.remove(beanName)__			this.registeredSingletons.remove(beanName)__		}_	};remove,the,bean,with,the,given,name,from,the,singleton,cache,of,this,factory,to,be,able,to,clean,up,eager,registration,of,a,singleton,if,creation,failed,param,bean,name,the,name,of,the,bean,see,get,singleton,mutex;protected,void,remove,singleton,string,bean,name,synchronized,this,singleton,objects,this,singleton,objects,remove,bean,name,this,singleton,factories,remove,bean,name,this,early,singleton,objects,remove,bean,name,this,registered,singletons,remove,bean,name
DefaultSingletonBeanRegistry -> protected void removeSingleton(String beanName);1518810557;Remove the bean with the given name from the singleton cache of this factory,_to be able to clean up eager registration of a singleton if creation failed._@param beanName the name of the bean_@see #getSingletonMutex();protected void removeSingleton(String beanName) {_		synchronized (this.singletonObjects) {_			this.singletonObjects.remove(beanName)__			this.singletonFactories.remove(beanName)__			this.earlySingletonObjects.remove(beanName)__			this.registeredSingletons.remove(beanName)__		}_	};remove,the,bean,with,the,given,name,from,the,singleton,cache,of,this,factory,to,be,able,to,clean,up,eager,registration,of,a,singleton,if,creation,failed,param,bean,name,the,name,of,the,bean,see,get,singleton,mutex;protected,void,remove,singleton,string,bean,name,synchronized,this,singleton,objects,this,singleton,objects,remove,bean,name,this,singleton,factories,remove,bean,name,this,early,singleton,objects,remove,bean,name,this,registered,singletons,remove,bean,name
DefaultSingletonBeanRegistry -> protected void removeSingleton(String beanName);1521822873;Remove the bean with the given name from the singleton cache of this factory,_to be able to clean up eager registration of a singleton if creation failed._@param beanName the name of the bean_@see #getSingletonMutex();protected void removeSingleton(String beanName) {_		synchronized (this.singletonObjects) {_			this.singletonObjects.remove(beanName)__			this.singletonFactories.remove(beanName)__			this.earlySingletonObjects.remove(beanName)__			this.registeredSingletons.remove(beanName)__		}_	};remove,the,bean,with,the,given,name,from,the,singleton,cache,of,this,factory,to,be,able,to,clean,up,eager,registration,of,a,singleton,if,creation,failed,param,bean,name,the,name,of,the,bean,see,get,singleton,mutex;protected,void,remove,singleton,string,bean,name,synchronized,this,singleton,objects,this,singleton,objects,remove,bean,name,this,singleton,factories,remove,bean,name,this,early,singleton,objects,remove,bean,name,this,registered,singletons,remove,bean,name
DefaultSingletonBeanRegistry -> protected void removeSingleton(String beanName);1521905451;Remove the bean with the given name from the singleton cache of this factory,_to be able to clean up eager registration of a singleton if creation failed._@param beanName the name of the bean_@see #getSingletonMutex();protected void removeSingleton(String beanName) {_		synchronized (this.singletonObjects) {_			this.singletonObjects.remove(beanName)__			this.singletonFactories.remove(beanName)__			this.earlySingletonObjects.remove(beanName)__			this.registeredSingletons.remove(beanName)__		}_	};remove,the,bean,with,the,given,name,from,the,singleton,cache,of,this,factory,to,be,able,to,clean,up,eager,registration,of,a,singleton,if,creation,failed,param,bean,name,the,name,of,the,bean,see,get,singleton,mutex;protected,void,remove,singleton,string,bean,name,synchronized,this,singleton,objects,this,singleton,objects,remove,bean,name,this,singleton,factories,remove,bean,name,this,early,singleton,objects,remove,bean,name,this,registered,singletons,remove,bean,name
DefaultSingletonBeanRegistry -> protected void removeSingleton(String beanName);1527623493;Remove the bean with the given name from the singleton cache of this factory,_to be able to clean up eager registration of a singleton if creation failed._@param beanName the name of the bean_@see #getSingletonMutex();protected void removeSingleton(String beanName) {_		synchronized (this.singletonObjects) {_			this.singletonObjects.remove(beanName)__			this.singletonFactories.remove(beanName)__			this.earlySingletonObjects.remove(beanName)__			this.registeredSingletons.remove(beanName)__		}_	};remove,the,bean,with,the,given,name,from,the,singleton,cache,of,this,factory,to,be,able,to,clean,up,eager,registration,of,a,singleton,if,creation,failed,param,bean,name,the,name,of,the,bean,see,get,singleton,mutex;protected,void,remove,singleton,string,bean,name,synchronized,this,singleton,objects,this,singleton,objects,remove,bean,name,this,singleton,factories,remove,bean,name,this,early,singleton,objects,remove,bean,name,this,registered,singletons,remove,bean,name
DefaultSingletonBeanRegistry -> protected void removeSingleton(String beanName);1530174524;Remove the bean with the given name from the singleton cache of this factory,_to be able to clean up eager registration of a singleton if creation failed._@param beanName the name of the bean_@see #getSingletonMutex();protected void removeSingleton(String beanName) {_		synchronized (this.singletonObjects) {_			this.singletonObjects.remove(beanName)__			this.singletonFactories.remove(beanName)__			this.earlySingletonObjects.remove(beanName)__			this.registeredSingletons.remove(beanName)__		}_	};remove,the,bean,with,the,given,name,from,the,singleton,cache,of,this,factory,to,be,able,to,clean,up,eager,registration,of,a,singleton,if,creation,failed,param,bean,name,the,name,of,the,bean,see,get,singleton,mutex;protected,void,remove,singleton,string,bean,name,synchronized,this,singleton,objects,this,singleton,objects,remove,bean,name,this,singleton,factories,remove,bean,name,this,early,singleton,objects,remove,bean,name,this,registered,singletons,remove,bean,name
DefaultSingletonBeanRegistry -> protected void removeSingleton(String beanName);1532091916;Remove the bean with the given name from the singleton cache of this factory,_to be able to clean up eager registration of a singleton if creation failed._@param beanName the name of the bean_@see #getSingletonMutex();protected void removeSingleton(String beanName) {_		synchronized (this.singletonObjects) {_			this.singletonObjects.remove(beanName)__			this.singletonFactories.remove(beanName)__			this.earlySingletonObjects.remove(beanName)__			this.registeredSingletons.remove(beanName)__		}_	};remove,the,bean,with,the,given,name,from,the,singleton,cache,of,this,factory,to,be,able,to,clean,up,eager,registration,of,a,singleton,if,creation,failed,param,bean,name,the,name,of,the,bean,see,get,singleton,mutex;protected,void,remove,singleton,string,bean,name,synchronized,this,singleton,objects,this,singleton,objects,remove,bean,name,this,singleton,factories,remove,bean,name,this,early,singleton,objects,remove,bean,name,this,registered,singletons,remove,bean,name
DefaultSingletonBeanRegistry -> protected void removeSingleton(String beanName);1532706365;Remove the bean with the given name from the singleton cache of this factory,_to be able to clean up eager registration of a singleton if creation failed._@param beanName the name of the bean_@see #getSingletonMutex();protected void removeSingleton(String beanName) {_		synchronized (this.singletonObjects) {_			this.singletonObjects.remove(beanName)__			this.singletonFactories.remove(beanName)__			this.earlySingletonObjects.remove(beanName)__			this.registeredSingletons.remove(beanName)__		}_	};remove,the,bean,with,the,given,name,from,the,singleton,cache,of,this,factory,to,be,able,to,clean,up,eager,registration,of,a,singleton,if,creation,failed,param,bean,name,the,name,of,the,bean,see,get,singleton,mutex;protected,void,remove,singleton,string,bean,name,synchronized,this,singleton,objects,this,singleton,objects,remove,bean,name,this,singleton,factories,remove,bean,name,this,early,singleton,objects,remove,bean,name,this,registered,singletons,remove,bean,name
DefaultSingletonBeanRegistry -> public boolean isSingletonCurrentlyInCreation(String beanName);1352418897;Return whether the specified singleton bean is currently in creation_(within the entire factory)._@param beanName the name of the bean;public boolean isSingletonCurrentlyInCreation(String beanName) {_		return this.singletonsCurrentlyInCreation.containsKey(beanName)__	};return,whether,the,specified,singleton,bean,is,currently,in,creation,within,the,entire,factory,param,bean,name,the,name,of,the,bean;public,boolean,is,singleton,currently,in,creation,string,bean,name,return,this,singletons,currently,in,creation,contains,key,bean,name
DefaultSingletonBeanRegistry -> public boolean isSingletonCurrentlyInCreation(String beanName);1353882772;Return whether the specified singleton bean is currently in creation_(within the entire factory)._@param beanName the name of the bean;public boolean isSingletonCurrentlyInCreation(String beanName) {_		return this.singletonsCurrentlyInCreation.containsKey(beanName)__	};return,whether,the,specified,singleton,bean,is,currently,in,creation,within,the,entire,factory,param,bean,name,the,name,of,the,bean;public,boolean,is,singleton,currently,in,creation,string,bean,name,return,this,singletons,currently,in,creation,contains,key,bean,name
DefaultSingletonBeanRegistry -> public boolean isSingletonCurrentlyInCreation(String beanName);1355352386;Return whether the specified singleton bean is currently in creation_(within the entire factory)._@param beanName the name of the bean;public boolean isSingletonCurrentlyInCreation(String beanName) {_		return this.singletonsCurrentlyInCreation.containsKey(beanName)__	};return,whether,the,specified,singleton,bean,is,currently,in,creation,within,the,entire,factory,param,bean,name,the,name,of,the,bean;public,boolean,is,singleton,currently,in,creation,string,bean,name,return,this,singletons,currently,in,creation,contains,key,bean,name
DefaultSingletonBeanRegistry -> public boolean isSingletonCurrentlyInCreation(String beanName);1356735495;Return whether the specified singleton bean is currently in creation_(within the entire factory)._@param beanName the name of the bean;public boolean isSingletonCurrentlyInCreation(String beanName) {_		return this.singletonsCurrentlyInCreation.containsKey(beanName)__	};return,whether,the,specified,singleton,bean,is,currently,in,creation,within,the,entire,factory,param,bean,name,the,name,of,the,bean;public,boolean,is,singleton,currently,in,creation,string,bean,name,return,this,singletons,currently,in,creation,contains,key,bean,name
DefaultSingletonBeanRegistry -> public boolean isSingletonCurrentlyInCreation(String beanName);1357119239;Return whether the specified singleton bean is currently in creation_(within the entire factory)._@param beanName the name of the bean;public boolean isSingletonCurrentlyInCreation(String beanName) {_		return this.singletonsCurrentlyInCreation.containsKey(beanName)__	};return,whether,the,specified,singleton,bean,is,currently,in,creation,within,the,entire,factory,param,bean,name,the,name,of,the,bean;public,boolean,is,singleton,currently,in,creation,string,bean,name,return,this,singletons,currently,in,creation,contains,key,bean,name
DefaultSingletonBeanRegistry -> public boolean isSingletonCurrentlyInCreation(String beanName);1364505266;Return whether the specified singleton bean is currently in creation_(within the entire factory)._@param beanName the name of the bean;public boolean isSingletonCurrentlyInCreation(String beanName) {_		return this.singletonsCurrentlyInCreation.contains(beanName)__	};return,whether,the,specified,singleton,bean,is,currently,in,creation,within,the,entire,factory,param,bean,name,the,name,of,the,bean;public,boolean,is,singleton,currently,in,creation,string,bean,name,return,this,singletons,currently,in,creation,contains,bean,name
DefaultSingletonBeanRegistry -> public boolean isSingletonCurrentlyInCreation(String beanName);1368482696;Return whether the specified singleton bean is currently in creation_(within the entire factory)._@param beanName the name of the bean;public boolean isSingletonCurrentlyInCreation(String beanName) {_		return this.singletonsCurrentlyInCreation.contains(beanName)__	};return,whether,the,specified,singleton,bean,is,currently,in,creation,within,the,entire,factory,param,bean,name,the,name,of,the,bean;public,boolean,is,singleton,currently,in,creation,string,bean,name,return,this,singletons,currently,in,creation,contains,bean,name
DefaultSingletonBeanRegistry -> public boolean isSingletonCurrentlyInCreation(String beanName);1374698947;Return whether the specified singleton bean is currently in creation_(within the entire factory)._@param beanName the name of the bean;public boolean isSingletonCurrentlyInCreation(String beanName) {_		return this.singletonsCurrentlyInCreation.contains(beanName)__	};return,whether,the,specified,singleton,bean,is,currently,in,creation,within,the,entire,factory,param,bean,name,the,name,of,the,bean;public,boolean,is,singleton,currently,in,creation,string,bean,name,return,this,singletons,currently,in,creation,contains,bean,name
DefaultSingletonBeanRegistry -> public boolean isSingletonCurrentlyInCreation(String beanName);1385412762;Return whether the specified singleton bean is currently in creation_(within the entire factory)._@param beanName the name of the bean;public boolean isSingletonCurrentlyInCreation(String beanName) {_		return this.singletonsCurrentlyInCreation.contains(beanName)__	};return,whether,the,specified,singleton,bean,is,currently,in,creation,within,the,entire,factory,param,bean,name,the,name,of,the,bean;public,boolean,is,singleton,currently,in,creation,string,bean,name,return,this,singletons,currently,in,creation,contains,bean,name
DefaultSingletonBeanRegistry -> public boolean isSingletonCurrentlyInCreation(String beanName);1385984377;Return whether the specified singleton bean is currently in creation_(within the entire factory)._@param beanName the name of the bean;public boolean isSingletonCurrentlyInCreation(String beanName) {_		return this.singletonsCurrentlyInCreation.contains(beanName)__	};return,whether,the,specified,singleton,bean,is,currently,in,creation,within,the,entire,factory,param,bean,name,the,name,of,the,bean;public,boolean,is,singleton,currently,in,creation,string,bean,name,return,this,singletons,currently,in,creation,contains,bean,name
DefaultSingletonBeanRegistry -> public boolean isSingletonCurrentlyInCreation(String beanName);1405430015;Return whether the specified singleton bean is currently in creation_(within the entire factory)._@param beanName the name of the bean;public boolean isSingletonCurrentlyInCreation(String beanName) {_		return this.singletonsCurrentlyInCreation.contains(beanName)__	};return,whether,the,specified,singleton,bean,is,currently,in,creation,within,the,entire,factory,param,bean,name,the,name,of,the,bean;public,boolean,is,singleton,currently,in,creation,string,bean,name,return,this,singletons,currently,in,creation,contains,bean,name
DefaultSingletonBeanRegistry -> public boolean isSingletonCurrentlyInCreation(String beanName);1408528936;Return whether the specified singleton bean is currently in creation_(within the entire factory)._@param beanName the name of the bean;public boolean isSingletonCurrentlyInCreation(String beanName) {_		return this.singletonsCurrentlyInCreation.contains(beanName)__	};return,whether,the,specified,singleton,bean,is,currently,in,creation,within,the,entire,factory,param,bean,name,the,name,of,the,bean;public,boolean,is,singleton,currently,in,creation,string,bean,name,return,this,singletons,currently,in,creation,contains,bean,name
DefaultSingletonBeanRegistry -> public boolean isSingletonCurrentlyInCreation(String beanName);1408624154;Return whether the specified singleton bean is currently in creation_(within the entire factory)._@param beanName the name of the bean;public boolean isSingletonCurrentlyInCreation(String beanName) {_		return this.singletonsCurrentlyInCreation.contains(beanName)__	};return,whether,the,specified,singleton,bean,is,currently,in,creation,within,the,entire,factory,param,bean,name,the,name,of,the,bean;public,boolean,is,singleton,currently,in,creation,string,bean,name,return,this,singletons,currently,in,creation,contains,bean,name
DefaultSingletonBeanRegistry -> public boolean isSingletonCurrentlyInCreation(String beanName);1409688815;Return whether the specified singleton bean is currently in creation_(within the entire factory)._@param beanName the name of the bean;public boolean isSingletonCurrentlyInCreation(String beanName) {_		return this.singletonsCurrentlyInCreation.contains(beanName)__	};return,whether,the,specified,singleton,bean,is,currently,in,creation,within,the,entire,factory,param,bean,name,the,name,of,the,bean;public,boolean,is,singleton,currently,in,creation,string,bean,name,return,this,singletons,currently,in,creation,contains,bean,name
DefaultSingletonBeanRegistry -> public boolean isSingletonCurrentlyInCreation(String beanName);1417966231;Return whether the specified singleton bean is currently in creation_(within the entire factory)._@param beanName the name of the bean;public boolean isSingletonCurrentlyInCreation(String beanName) {_		return this.singletonsCurrentlyInCreation.contains(beanName)__	};return,whether,the,specified,singleton,bean,is,currently,in,creation,within,the,entire,factory,param,bean,name,the,name,of,the,bean;public,boolean,is,singleton,currently,in,creation,string,bean,name,return,this,singletons,currently,in,creation,contains,bean,name
DefaultSingletonBeanRegistry -> public boolean isSingletonCurrentlyInCreation(String beanName);1424972106;Return whether the specified singleton bean is currently in creation_(within the entire factory)._@param beanName the name of the bean;public boolean isSingletonCurrentlyInCreation(String beanName) {_		return this.singletonsCurrentlyInCreation.contains(beanName)__	};return,whether,the,specified,singleton,bean,is,currently,in,creation,within,the,entire,factory,param,bean,name,the,name,of,the,bean;public,boolean,is,singleton,currently,in,creation,string,bean,name,return,this,singletons,currently,in,creation,contains,bean,name
DefaultSingletonBeanRegistry -> public boolean isSingletonCurrentlyInCreation(String beanName);1447399860;Return whether the specified singleton bean is currently in creation_(within the entire factory)._@param beanName the name of the bean;public boolean isSingletonCurrentlyInCreation(String beanName) {_		return this.singletonsCurrentlyInCreation.contains(beanName)__	};return,whether,the,specified,singleton,bean,is,currently,in,creation,within,the,entire,factory,param,bean,name,the,name,of,the,bean;public,boolean,is,singleton,currently,in,creation,string,bean,name,return,this,singletons,currently,in,creation,contains,bean,name
DefaultSingletonBeanRegistry -> public boolean isSingletonCurrentlyInCreation(String beanName);1467730834;Return whether the specified singleton bean is currently in creation_(within the entire factory)._@param beanName the name of the bean;public boolean isSingletonCurrentlyInCreation(String beanName) {_		return this.singletonsCurrentlyInCreation.contains(beanName)__	};return,whether,the,specified,singleton,bean,is,currently,in,creation,within,the,entire,factory,param,bean,name,the,name,of,the,bean;public,boolean,is,singleton,currently,in,creation,string,bean,name,return,this,singletons,currently,in,creation,contains,bean,name
DefaultSingletonBeanRegistry -> public boolean isSingletonCurrentlyInCreation(String beanName);1467810738;Return whether the specified singleton bean is currently in creation_(within the entire factory)._@param beanName the name of the bean;public boolean isSingletonCurrentlyInCreation(String beanName) {_		return this.singletonsCurrentlyInCreation.contains(beanName)__	};return,whether,the,specified,singleton,bean,is,currently,in,creation,within,the,entire,factory,param,bean,name,the,name,of,the,bean;public,boolean,is,singleton,currently,in,creation,string,bean,name,return,this,singletons,currently,in,creation,contains,bean,name
DefaultSingletonBeanRegistry -> public boolean isSingletonCurrentlyInCreation(String beanName);1469561191;Return whether the specified singleton bean is currently in creation_(within the entire factory)._@param beanName the name of the bean;public boolean isSingletonCurrentlyInCreation(String beanName) {_		return this.singletonsCurrentlyInCreation.contains(beanName)__	};return,whether,the,specified,singleton,bean,is,currently,in,creation,within,the,entire,factory,param,bean,name,the,name,of,the,bean;public,boolean,is,singleton,currently,in,creation,string,bean,name,return,this,singletons,currently,in,creation,contains,bean,name
DefaultSingletonBeanRegistry -> public boolean isSingletonCurrentlyInCreation(String beanName);1478538021;Return whether the specified singleton bean is currently in creation_(within the entire factory)._@param beanName the name of the bean;public boolean isSingletonCurrentlyInCreation(String beanName) {_		return this.singletonsCurrentlyInCreation.contains(beanName)__	};return,whether,the,specified,singleton,bean,is,currently,in,creation,within,the,entire,factory,param,bean,name,the,name,of,the,bean;public,boolean,is,singleton,currently,in,creation,string,bean,name,return,this,singletons,currently,in,creation,contains,bean,name
DefaultSingletonBeanRegistry -> public boolean isSingletonCurrentlyInCreation(String beanName);1495868221;Return whether the specified singleton bean is currently in creation_(within the entire factory)._@param beanName the name of the bean;public boolean isSingletonCurrentlyInCreation(String beanName) {_		return this.singletonsCurrentlyInCreation.contains(beanName)__	};return,whether,the,specified,singleton,bean,is,currently,in,creation,within,the,entire,factory,param,bean,name,the,name,of,the,bean;public,boolean,is,singleton,currently,in,creation,string,bean,name,return,this,singletons,currently,in,creation,contains,bean,name
DefaultSingletonBeanRegistry -> public boolean isSingletonCurrentlyInCreation(String beanName);1496259743;Return whether the specified singleton bean is currently in creation_(within the entire factory)._@param beanName the name of the bean;public boolean isSingletonCurrentlyInCreation(String beanName) {_		return this.singletonsCurrentlyInCreation.contains(beanName)__	};return,whether,the,specified,singleton,bean,is,currently,in,creation,within,the,entire,factory,param,bean,name,the,name,of,the,bean;public,boolean,is,singleton,currently,in,creation,string,bean,name,return,this,singletons,currently,in,creation,contains,bean,name
DefaultSingletonBeanRegistry -> public boolean isSingletonCurrentlyInCreation(String beanName);1496837955;Return whether the specified singleton bean is currently in creation_(within the entire factory)._@param beanName the name of the bean;public boolean isSingletonCurrentlyInCreation(String beanName) {_		return this.singletonsCurrentlyInCreation.contains(beanName)__	};return,whether,the,specified,singleton,bean,is,currently,in,creation,within,the,entire,factory,param,bean,name,the,name,of,the,bean;public,boolean,is,singleton,currently,in,creation,string,bean,name,return,this,singletons,currently,in,creation,contains,bean,name
DefaultSingletonBeanRegistry -> public boolean isSingletonCurrentlyInCreation(String beanName);1498780456;Return whether the specified singleton bean is currently in creation_(within the entire factory)._@param beanName the name of the bean;public boolean isSingletonCurrentlyInCreation(String beanName) {_		return this.singletonsCurrentlyInCreation.contains(beanName)__	};return,whether,the,specified,singleton,bean,is,currently,in,creation,within,the,entire,factory,param,bean,name,the,name,of,the,bean;public,boolean,is,singleton,currently,in,creation,string,bean,name,return,this,singletons,currently,in,creation,contains,bean,name
DefaultSingletonBeanRegistry -> public boolean isSingletonCurrentlyInCreation(String beanName);1502974979;Return whether the specified singleton bean is currently in creation_(within the entire factory)._@param beanName the name of the bean;public boolean isSingletonCurrentlyInCreation(String beanName) {_		return this.singletonsCurrentlyInCreation.contains(beanName)__	};return,whether,the,specified,singleton,bean,is,currently,in,creation,within,the,entire,factory,param,bean,name,the,name,of,the,bean;public,boolean,is,singleton,currently,in,creation,string,bean,name,return,this,singletons,currently,in,creation,contains,bean,name
DefaultSingletonBeanRegistry -> public boolean isSingletonCurrentlyInCreation(String beanName);1503007895;Return whether the specified singleton bean is currently in creation_(within the entire factory)._@param beanName the name of the bean;public boolean isSingletonCurrentlyInCreation(String beanName) {_		return this.singletonsCurrentlyInCreation.contains(beanName)__	};return,whether,the,specified,singleton,bean,is,currently,in,creation,within,the,entire,factory,param,bean,name,the,name,of,the,bean;public,boolean,is,singleton,currently,in,creation,string,bean,name,return,this,singletons,currently,in,creation,contains,bean,name
DefaultSingletonBeanRegistry -> public boolean isSingletonCurrentlyInCreation(String beanName);1518810557;Return whether the specified singleton bean is currently in creation_(within the entire factory)._@param beanName the name of the bean;public boolean isSingletonCurrentlyInCreation(String beanName) {_		return this.singletonsCurrentlyInCreation.contains(beanName)__	};return,whether,the,specified,singleton,bean,is,currently,in,creation,within,the,entire,factory,param,bean,name,the,name,of,the,bean;public,boolean,is,singleton,currently,in,creation,string,bean,name,return,this,singletons,currently,in,creation,contains,bean,name
DefaultSingletonBeanRegistry -> public boolean isSingletonCurrentlyInCreation(String beanName);1521822873;Return whether the specified singleton bean is currently in creation_(within the entire factory)._@param beanName the name of the bean;public boolean isSingletonCurrentlyInCreation(String beanName) {_		return this.singletonsCurrentlyInCreation.contains(beanName)__	};return,whether,the,specified,singleton,bean,is,currently,in,creation,within,the,entire,factory,param,bean,name,the,name,of,the,bean;public,boolean,is,singleton,currently,in,creation,string,bean,name,return,this,singletons,currently,in,creation,contains,bean,name
DefaultSingletonBeanRegistry -> public boolean isSingletonCurrentlyInCreation(String beanName);1521905451;Return whether the specified singleton bean is currently in creation_(within the entire factory)._@param beanName the name of the bean;public boolean isSingletonCurrentlyInCreation(String beanName) {_		return this.singletonsCurrentlyInCreation.contains(beanName)__	};return,whether,the,specified,singleton,bean,is,currently,in,creation,within,the,entire,factory,param,bean,name,the,name,of,the,bean;public,boolean,is,singleton,currently,in,creation,string,bean,name,return,this,singletons,currently,in,creation,contains,bean,name
DefaultSingletonBeanRegistry -> public boolean isSingletonCurrentlyInCreation(String beanName);1527623493;Return whether the specified singleton bean is currently in creation_(within the entire factory)._@param beanName the name of the bean;public boolean isSingletonCurrentlyInCreation(String beanName) {_		return this.singletonsCurrentlyInCreation.contains(beanName)__	};return,whether,the,specified,singleton,bean,is,currently,in,creation,within,the,entire,factory,param,bean,name,the,name,of,the,bean;public,boolean,is,singleton,currently,in,creation,string,bean,name,return,this,singletons,currently,in,creation,contains,bean,name
DefaultSingletonBeanRegistry -> public boolean isSingletonCurrentlyInCreation(String beanName);1530174524;Return whether the specified singleton bean is currently in creation_(within the entire factory)._@param beanName the name of the bean;public boolean isSingletonCurrentlyInCreation(String beanName) {_		return this.singletonsCurrentlyInCreation.contains(beanName)__	};return,whether,the,specified,singleton,bean,is,currently,in,creation,within,the,entire,factory,param,bean,name,the,name,of,the,bean;public,boolean,is,singleton,currently,in,creation,string,bean,name,return,this,singletons,currently,in,creation,contains,bean,name
DefaultSingletonBeanRegistry -> public boolean isSingletonCurrentlyInCreation(String beanName);1532091916;Return whether the specified singleton bean is currently in creation_(within the entire factory)._@param beanName the name of the bean;public boolean isSingletonCurrentlyInCreation(String beanName) {_		return this.singletonsCurrentlyInCreation.contains(beanName)__	};return,whether,the,specified,singleton,bean,is,currently,in,creation,within,the,entire,factory,param,bean,name,the,name,of,the,bean;public,boolean,is,singleton,currently,in,creation,string,bean,name,return,this,singletons,currently,in,creation,contains,bean,name
DefaultSingletonBeanRegistry -> public boolean isSingletonCurrentlyInCreation(String beanName);1532706365;Return whether the specified singleton bean is currently in creation_(within the entire factory)._@param beanName the name of the bean;public boolean isSingletonCurrentlyInCreation(String beanName) {_		return this.singletonsCurrentlyInCreation.contains(beanName)__	};return,whether,the,specified,singleton,bean,is,currently,in,creation,within,the,entire,factory,param,bean,name,the,name,of,the,bean;public,boolean,is,singleton,currently,in,creation,string,bean,name,return,this,singletons,currently,in,creation,contains,bean,name
DefaultSingletonBeanRegistry -> public void registerDisposableBean(String beanName, DisposableBean bean);1328020251;Add the given bean to the list of disposable beans in this registry._Disposable beans usually correspond to registered singletons,_matching the bean name but potentially being a different instance_(for example, a DisposableBean adapter for a singleton that does not_naturally implement Spring's DisposableBean interface)._@param beanName the name of the bean_@param bean the bean instance;public void registerDisposableBean(String beanName, DisposableBean bean) {_		synchronized (this.disposableBeans) {_			this.disposableBeans.put(beanName, bean)__		}_	};add,the,given,bean,to,the,list,of,disposable,beans,in,this,registry,disposable,beans,usually,correspond,to,registered,singletons,matching,the,bean,name,but,potentially,being,a,different,instance,for,example,a,disposable,bean,adapter,for,a,singleton,that,does,not,naturally,implement,spring,s,disposable,bean,interface,param,bean,name,the,name,of,the,bean,param,bean,the,bean,instance;public,void,register,disposable,bean,string,bean,name,disposable,bean,bean,synchronized,this,disposable,beans,this,disposable,beans,put,bean,name,bean
DefaultSingletonBeanRegistry -> public void registerDisposableBean(String beanName, DisposableBean bean);1349872135;Add the given bean to the list of disposable beans in this registry._<p>Disposable beans usually correspond to registered singletons,_matching the bean name but potentially being a different instance_(for example, a DisposableBean adapter for a singleton that does not_naturally implement Spring's DisposableBean interface)._@param beanName the name of the bean_@param bean the bean instance;public void registerDisposableBean(String beanName, DisposableBean bean) {_		synchronized (this.disposableBeans) {_			this.disposableBeans.put(beanName, bean)__		}_	};add,the,given,bean,to,the,list,of,disposable,beans,in,this,registry,p,disposable,beans,usually,correspond,to,registered,singletons,matching,the,bean,name,but,potentially,being,a,different,instance,for,example,a,disposable,bean,adapter,for,a,singleton,that,does,not,naturally,implement,spring,s,disposable,bean,interface,param,bean,name,the,name,of,the,bean,param,bean,the,bean,instance;public,void,register,disposable,bean,string,bean,name,disposable,bean,bean,synchronized,this,disposable,beans,this,disposable,beans,put,bean,name,bean
DefaultSingletonBeanRegistry -> public void registerDisposableBean(String beanName, DisposableBean bean);1352412938;Add the given bean to the list of disposable beans in this registry._<p>Disposable beans usually correspond to registered singletons,_matching the bean name but potentially being a different instance_(for example, a DisposableBean adapter for a singleton that does not_naturally implement Spring's DisposableBean interface)._@param beanName the name of the bean_@param bean the bean instance;public void registerDisposableBean(String beanName, DisposableBean bean) {_		synchronized (this.disposableBeans) {_			this.disposableBeans.put(beanName, bean)__		}_	};add,the,given,bean,to,the,list,of,disposable,beans,in,this,registry,p,disposable,beans,usually,correspond,to,registered,singletons,matching,the,bean,name,but,potentially,being,a,different,instance,for,example,a,disposable,bean,adapter,for,a,singleton,that,does,not,naturally,implement,spring,s,disposable,bean,interface,param,bean,name,the,name,of,the,bean,param,bean,the,bean,instance;public,void,register,disposable,bean,string,bean,name,disposable,bean,bean,synchronized,this,disposable,beans,this,disposable,beans,put,bean,name,bean
DefaultSingletonBeanRegistry -> public void registerDisposableBean(String beanName, DisposableBean bean);1352418897;Add the given bean to the list of disposable beans in this registry._<p>Disposable beans usually correspond to registered singletons,_matching the bean name but potentially being a different instance_(for example, a DisposableBean adapter for a singleton that does not_naturally implement Spring's DisposableBean interface)._@param beanName the name of the bean_@param bean the bean instance;public void registerDisposableBean(String beanName, DisposableBean bean) {_		synchronized (this.disposableBeans) {_			this.disposableBeans.put(beanName, bean)__		}_	};add,the,given,bean,to,the,list,of,disposable,beans,in,this,registry,p,disposable,beans,usually,correspond,to,registered,singletons,matching,the,bean,name,but,potentially,being,a,different,instance,for,example,a,disposable,bean,adapter,for,a,singleton,that,does,not,naturally,implement,spring,s,disposable,bean,interface,param,bean,name,the,name,of,the,bean,param,bean,the,bean,instance;public,void,register,disposable,bean,string,bean,name,disposable,bean,bean,synchronized,this,disposable,beans,this,disposable,beans,put,bean,name,bean
DefaultSingletonBeanRegistry -> public void registerDisposableBean(String beanName, DisposableBean bean);1353882772;Add the given bean to the list of disposable beans in this registry._<p>Disposable beans usually correspond to registered singletons,_matching the bean name but potentially being a different instance_(for example, a DisposableBean adapter for a singleton that does not_naturally implement Spring's DisposableBean interface)._@param beanName the name of the bean_@param bean the bean instance;public void registerDisposableBean(String beanName, DisposableBean bean) {_		synchronized (this.disposableBeans) {_			this.disposableBeans.put(beanName, bean)__		}_	};add,the,given,bean,to,the,list,of,disposable,beans,in,this,registry,p,disposable,beans,usually,correspond,to,registered,singletons,matching,the,bean,name,but,potentially,being,a,different,instance,for,example,a,disposable,bean,adapter,for,a,singleton,that,does,not,naturally,implement,spring,s,disposable,bean,interface,param,bean,name,the,name,of,the,bean,param,bean,the,bean,instance;public,void,register,disposable,bean,string,bean,name,disposable,bean,bean,synchronized,this,disposable,beans,this,disposable,beans,put,bean,name,bean
DefaultSingletonBeanRegistry -> public void registerDisposableBean(String beanName, DisposableBean bean);1355352386;Add the given bean to the list of disposable beans in this registry._<p>Disposable beans usually correspond to registered singletons,_matching the bean name but potentially being a different instance_(for example, a DisposableBean adapter for a singleton that does not_naturally implement Spring's DisposableBean interface)._@param beanName the name of the bean_@param bean the bean instance;public void registerDisposableBean(String beanName, DisposableBean bean) {_		synchronized (this.disposableBeans) {_			this.disposableBeans.put(beanName, bean)__		}_	};add,the,given,bean,to,the,list,of,disposable,beans,in,this,registry,p,disposable,beans,usually,correspond,to,registered,singletons,matching,the,bean,name,but,potentially,being,a,different,instance,for,example,a,disposable,bean,adapter,for,a,singleton,that,does,not,naturally,implement,spring,s,disposable,bean,interface,param,bean,name,the,name,of,the,bean,param,bean,the,bean,instance;public,void,register,disposable,bean,string,bean,name,disposable,bean,bean,synchronized,this,disposable,beans,this,disposable,beans,put,bean,name,bean
DefaultSingletonBeanRegistry -> public void registerDisposableBean(String beanName, DisposableBean bean);1356735495;Add the given bean to the list of disposable beans in this registry._<p>Disposable beans usually correspond to registered singletons,_matching the bean name but potentially being a different instance_(for example, a DisposableBean adapter for a singleton that does not_naturally implement Spring's DisposableBean interface)._@param beanName the name of the bean_@param bean the bean instance;public void registerDisposableBean(String beanName, DisposableBean bean) {_		synchronized (this.disposableBeans) {_			this.disposableBeans.put(beanName, bean)__		}_	};add,the,given,bean,to,the,list,of,disposable,beans,in,this,registry,p,disposable,beans,usually,correspond,to,registered,singletons,matching,the,bean,name,but,potentially,being,a,different,instance,for,example,a,disposable,bean,adapter,for,a,singleton,that,does,not,naturally,implement,spring,s,disposable,bean,interface,param,bean,name,the,name,of,the,bean,param,bean,the,bean,instance;public,void,register,disposable,bean,string,bean,name,disposable,bean,bean,synchronized,this,disposable,beans,this,disposable,beans,put,bean,name,bean
DefaultSingletonBeanRegistry -> public void registerDisposableBean(String beanName, DisposableBean bean);1357119239;Add the given bean to the list of disposable beans in this registry._<p>Disposable beans usually correspond to registered singletons,_matching the bean name but potentially being a different instance_(for example, a DisposableBean adapter for a singleton that does not_naturally implement Spring's DisposableBean interface)._@param beanName the name of the bean_@param bean the bean instance;public void registerDisposableBean(String beanName, DisposableBean bean) {_		synchronized (this.disposableBeans) {_			this.disposableBeans.put(beanName, bean)__		}_	};add,the,given,bean,to,the,list,of,disposable,beans,in,this,registry,p,disposable,beans,usually,correspond,to,registered,singletons,matching,the,bean,name,but,potentially,being,a,different,instance,for,example,a,disposable,bean,adapter,for,a,singleton,that,does,not,naturally,implement,spring,s,disposable,bean,interface,param,bean,name,the,name,of,the,bean,param,bean,the,bean,instance;public,void,register,disposable,bean,string,bean,name,disposable,bean,bean,synchronized,this,disposable,beans,this,disposable,beans,put,bean,name,bean
DefaultSingletonBeanRegistry -> public void registerDisposableBean(String beanName, DisposableBean bean);1364505266;Add the given bean to the list of disposable beans in this registry._<p>Disposable beans usually correspond to registered singletons,_matching the bean name but potentially being a different instance_(for example, a DisposableBean adapter for a singleton that does not_naturally implement Spring's DisposableBean interface)._@param beanName the name of the bean_@param bean the bean instance;public void registerDisposableBean(String beanName, DisposableBean bean) {_		synchronized (this.disposableBeans) {_			this.disposableBeans.put(beanName, bean)__		}_	};add,the,given,bean,to,the,list,of,disposable,beans,in,this,registry,p,disposable,beans,usually,correspond,to,registered,singletons,matching,the,bean,name,but,potentially,being,a,different,instance,for,example,a,disposable,bean,adapter,for,a,singleton,that,does,not,naturally,implement,spring,s,disposable,bean,interface,param,bean,name,the,name,of,the,bean,param,bean,the,bean,instance;public,void,register,disposable,bean,string,bean,name,disposable,bean,bean,synchronized,this,disposable,beans,this,disposable,beans,put,bean,name,bean
DefaultSingletonBeanRegistry -> public void registerDisposableBean(String beanName, DisposableBean bean);1368482696;Add the given bean to the list of disposable beans in this registry._<p>Disposable beans usually correspond to registered singletons,_matching the bean name but potentially being a different instance_(for example, a DisposableBean adapter for a singleton that does not_naturally implement Spring's DisposableBean interface)._@param beanName the name of the bean_@param bean the bean instance;public void registerDisposableBean(String beanName, DisposableBean bean) {_		synchronized (this.disposableBeans) {_			this.disposableBeans.put(beanName, bean)__		}_	};add,the,given,bean,to,the,list,of,disposable,beans,in,this,registry,p,disposable,beans,usually,correspond,to,registered,singletons,matching,the,bean,name,but,potentially,being,a,different,instance,for,example,a,disposable,bean,adapter,for,a,singleton,that,does,not,naturally,implement,spring,s,disposable,bean,interface,param,bean,name,the,name,of,the,bean,param,bean,the,bean,instance;public,void,register,disposable,bean,string,bean,name,disposable,bean,bean,synchronized,this,disposable,beans,this,disposable,beans,put,bean,name,bean
DefaultSingletonBeanRegistry -> public void registerDisposableBean(String beanName, DisposableBean bean);1374698947;Add the given bean to the list of disposable beans in this registry._<p>Disposable beans usually correspond to registered singletons,_matching the bean name but potentially being a different instance_(for example, a DisposableBean adapter for a singleton that does not_naturally implement Spring's DisposableBean interface)._@param beanName the name of the bean_@param bean the bean instance;public void registerDisposableBean(String beanName, DisposableBean bean) {_		synchronized (this.disposableBeans) {_			this.disposableBeans.put(beanName, bean)__		}_	};add,the,given,bean,to,the,list,of,disposable,beans,in,this,registry,p,disposable,beans,usually,correspond,to,registered,singletons,matching,the,bean,name,but,potentially,being,a,different,instance,for,example,a,disposable,bean,adapter,for,a,singleton,that,does,not,naturally,implement,spring,s,disposable,bean,interface,param,bean,name,the,name,of,the,bean,param,bean,the,bean,instance;public,void,register,disposable,bean,string,bean,name,disposable,bean,bean,synchronized,this,disposable,beans,this,disposable,beans,put,bean,name,bean
DefaultSingletonBeanRegistry -> public void registerDisposableBean(String beanName, DisposableBean bean);1385412762;Add the given bean to the list of disposable beans in this registry._<p>Disposable beans usually correspond to registered singletons,_matching the bean name but potentially being a different instance_(for example, a DisposableBean adapter for a singleton that does not_naturally implement Spring's DisposableBean interface)._@param beanName the name of the bean_@param bean the bean instance;public void registerDisposableBean(String beanName, DisposableBean bean) {_		synchronized (this.disposableBeans) {_			this.disposableBeans.put(beanName, bean)__		}_	};add,the,given,bean,to,the,list,of,disposable,beans,in,this,registry,p,disposable,beans,usually,correspond,to,registered,singletons,matching,the,bean,name,but,potentially,being,a,different,instance,for,example,a,disposable,bean,adapter,for,a,singleton,that,does,not,naturally,implement,spring,s,disposable,bean,interface,param,bean,name,the,name,of,the,bean,param,bean,the,bean,instance;public,void,register,disposable,bean,string,bean,name,disposable,bean,bean,synchronized,this,disposable,beans,this,disposable,beans,put,bean,name,bean
DefaultSingletonBeanRegistry -> public void registerDisposableBean(String beanName, DisposableBean bean);1385984377;Add the given bean to the list of disposable beans in this registry._<p>Disposable beans usually correspond to registered singletons,_matching the bean name but potentially being a different instance_(for example, a DisposableBean adapter for a singleton that does not_naturally implement Spring's DisposableBean interface)._@param beanName the name of the bean_@param bean the bean instance;public void registerDisposableBean(String beanName, DisposableBean bean) {_		synchronized (this.disposableBeans) {_			this.disposableBeans.put(beanName, bean)__		}_	};add,the,given,bean,to,the,list,of,disposable,beans,in,this,registry,p,disposable,beans,usually,correspond,to,registered,singletons,matching,the,bean,name,but,potentially,being,a,different,instance,for,example,a,disposable,bean,adapter,for,a,singleton,that,does,not,naturally,implement,spring,s,disposable,bean,interface,param,bean,name,the,name,of,the,bean,param,bean,the,bean,instance;public,void,register,disposable,bean,string,bean,name,disposable,bean,bean,synchronized,this,disposable,beans,this,disposable,beans,put,bean,name,bean
DefaultSingletonBeanRegistry -> public void registerDisposableBean(String beanName, DisposableBean bean);1405430015;Add the given bean to the list of disposable beans in this registry._<p>Disposable beans usually correspond to registered singletons,_matching the bean name but potentially being a different instance_(for example, a DisposableBean adapter for a singleton that does not_naturally implement Spring's DisposableBean interface)._@param beanName the name of the bean_@param bean the bean instance;public void registerDisposableBean(String beanName, DisposableBean bean) {_		synchronized (this.disposableBeans) {_			this.disposableBeans.put(beanName, bean)__		}_	};add,the,given,bean,to,the,list,of,disposable,beans,in,this,registry,p,disposable,beans,usually,correspond,to,registered,singletons,matching,the,bean,name,but,potentially,being,a,different,instance,for,example,a,disposable,bean,adapter,for,a,singleton,that,does,not,naturally,implement,spring,s,disposable,bean,interface,param,bean,name,the,name,of,the,bean,param,bean,the,bean,instance;public,void,register,disposable,bean,string,bean,name,disposable,bean,bean,synchronized,this,disposable,beans,this,disposable,beans,put,bean,name,bean
DefaultSingletonBeanRegistry -> public void registerDisposableBean(String beanName, DisposableBean bean);1408528936;Add the given bean to the list of disposable beans in this registry._<p>Disposable beans usually correspond to registered singletons,_matching the bean name but potentially being a different instance_(for example, a DisposableBean adapter for a singleton that does not_naturally implement Spring's DisposableBean interface)._@param beanName the name of the bean_@param bean the bean instance;public void registerDisposableBean(String beanName, DisposableBean bean) {_		synchronized (this.disposableBeans) {_			this.disposableBeans.put(beanName, bean)__		}_	};add,the,given,bean,to,the,list,of,disposable,beans,in,this,registry,p,disposable,beans,usually,correspond,to,registered,singletons,matching,the,bean,name,but,potentially,being,a,different,instance,for,example,a,disposable,bean,adapter,for,a,singleton,that,does,not,naturally,implement,spring,s,disposable,bean,interface,param,bean,name,the,name,of,the,bean,param,bean,the,bean,instance;public,void,register,disposable,bean,string,bean,name,disposable,bean,bean,synchronized,this,disposable,beans,this,disposable,beans,put,bean,name,bean
DefaultSingletonBeanRegistry -> public void registerDisposableBean(String beanName, DisposableBean bean);1408624154;Add the given bean to the list of disposable beans in this registry._<p>Disposable beans usually correspond to registered singletons,_matching the bean name but potentially being a different instance_(for example, a DisposableBean adapter for a singleton that does not_naturally implement Spring's DisposableBean interface)._@param beanName the name of the bean_@param bean the bean instance;public void registerDisposableBean(String beanName, DisposableBean bean) {_		synchronized (this.disposableBeans) {_			this.disposableBeans.put(beanName, bean)__		}_	};add,the,given,bean,to,the,list,of,disposable,beans,in,this,registry,p,disposable,beans,usually,correspond,to,registered,singletons,matching,the,bean,name,but,potentially,being,a,different,instance,for,example,a,disposable,bean,adapter,for,a,singleton,that,does,not,naturally,implement,spring,s,disposable,bean,interface,param,bean,name,the,name,of,the,bean,param,bean,the,bean,instance;public,void,register,disposable,bean,string,bean,name,disposable,bean,bean,synchronized,this,disposable,beans,this,disposable,beans,put,bean,name,bean
DefaultSingletonBeanRegistry -> public void registerDisposableBean(String beanName, DisposableBean bean);1409688815;Add the given bean to the list of disposable beans in this registry._<p>Disposable beans usually correspond to registered singletons,_matching the bean name but potentially being a different instance_(for example, a DisposableBean adapter for a singleton that does not_naturally implement Spring's DisposableBean interface)._@param beanName the name of the bean_@param bean the bean instance;public void registerDisposableBean(String beanName, DisposableBean bean) {_		synchronized (this.disposableBeans) {_			this.disposableBeans.put(beanName, bean)__		}_	};add,the,given,bean,to,the,list,of,disposable,beans,in,this,registry,p,disposable,beans,usually,correspond,to,registered,singletons,matching,the,bean,name,but,potentially,being,a,different,instance,for,example,a,disposable,bean,adapter,for,a,singleton,that,does,not,naturally,implement,spring,s,disposable,bean,interface,param,bean,name,the,name,of,the,bean,param,bean,the,bean,instance;public,void,register,disposable,bean,string,bean,name,disposable,bean,bean,synchronized,this,disposable,beans,this,disposable,beans,put,bean,name,bean
DefaultSingletonBeanRegistry -> public void registerDisposableBean(String beanName, DisposableBean bean);1417966231;Add the given bean to the list of disposable beans in this registry._<p>Disposable beans usually correspond to registered singletons,_matching the bean name but potentially being a different instance_(for example, a DisposableBean adapter for a singleton that does not_naturally implement Spring's DisposableBean interface)._@param beanName the name of the bean_@param bean the bean instance;public void registerDisposableBean(String beanName, DisposableBean bean) {_		synchronized (this.disposableBeans) {_			this.disposableBeans.put(beanName, bean)__		}_	};add,the,given,bean,to,the,list,of,disposable,beans,in,this,registry,p,disposable,beans,usually,correspond,to,registered,singletons,matching,the,bean,name,but,potentially,being,a,different,instance,for,example,a,disposable,bean,adapter,for,a,singleton,that,does,not,naturally,implement,spring,s,disposable,bean,interface,param,bean,name,the,name,of,the,bean,param,bean,the,bean,instance;public,void,register,disposable,bean,string,bean,name,disposable,bean,bean,synchronized,this,disposable,beans,this,disposable,beans,put,bean,name,bean
DefaultSingletonBeanRegistry -> public void registerDisposableBean(String beanName, DisposableBean bean);1424972106;Add the given bean to the list of disposable beans in this registry._<p>Disposable beans usually correspond to registered singletons,_matching the bean name but potentially being a different instance_(for example, a DisposableBean adapter for a singleton that does not_naturally implement Spring's DisposableBean interface)._@param beanName the name of the bean_@param bean the bean instance;public void registerDisposableBean(String beanName, DisposableBean bean) {_		synchronized (this.disposableBeans) {_			this.disposableBeans.put(beanName, bean)__		}_	};add,the,given,bean,to,the,list,of,disposable,beans,in,this,registry,p,disposable,beans,usually,correspond,to,registered,singletons,matching,the,bean,name,but,potentially,being,a,different,instance,for,example,a,disposable,bean,adapter,for,a,singleton,that,does,not,naturally,implement,spring,s,disposable,bean,interface,param,bean,name,the,name,of,the,bean,param,bean,the,bean,instance;public,void,register,disposable,bean,string,bean,name,disposable,bean,bean,synchronized,this,disposable,beans,this,disposable,beans,put,bean,name,bean
DefaultSingletonBeanRegistry -> public void registerDisposableBean(String beanName, DisposableBean bean);1447399860;Add the given bean to the list of disposable beans in this registry._<p>Disposable beans usually correspond to registered singletons,_matching the bean name but potentially being a different instance_(for example, a DisposableBean adapter for a singleton that does not_naturally implement Spring's DisposableBean interface)._@param beanName the name of the bean_@param bean the bean instance;public void registerDisposableBean(String beanName, DisposableBean bean) {_		synchronized (this.disposableBeans) {_			this.disposableBeans.put(beanName, bean)__		}_	};add,the,given,bean,to,the,list,of,disposable,beans,in,this,registry,p,disposable,beans,usually,correspond,to,registered,singletons,matching,the,bean,name,but,potentially,being,a,different,instance,for,example,a,disposable,bean,adapter,for,a,singleton,that,does,not,naturally,implement,spring,s,disposable,bean,interface,param,bean,name,the,name,of,the,bean,param,bean,the,bean,instance;public,void,register,disposable,bean,string,bean,name,disposable,bean,bean,synchronized,this,disposable,beans,this,disposable,beans,put,bean,name,bean
DefaultSingletonBeanRegistry -> public void registerDisposableBean(String beanName, DisposableBean bean);1467730834;Add the given bean to the list of disposable beans in this registry._<p>Disposable beans usually correspond to registered singletons,_matching the bean name but potentially being a different instance_(for example, a DisposableBean adapter for a singleton that does not_naturally implement Spring's DisposableBean interface)._@param beanName the name of the bean_@param bean the bean instance;public void registerDisposableBean(String beanName, DisposableBean bean) {_		synchronized (this.disposableBeans) {_			this.disposableBeans.put(beanName, bean)__		}_	};add,the,given,bean,to,the,list,of,disposable,beans,in,this,registry,p,disposable,beans,usually,correspond,to,registered,singletons,matching,the,bean,name,but,potentially,being,a,different,instance,for,example,a,disposable,bean,adapter,for,a,singleton,that,does,not,naturally,implement,spring,s,disposable,bean,interface,param,bean,name,the,name,of,the,bean,param,bean,the,bean,instance;public,void,register,disposable,bean,string,bean,name,disposable,bean,bean,synchronized,this,disposable,beans,this,disposable,beans,put,bean,name,bean
DefaultSingletonBeanRegistry -> public void registerDisposableBean(String beanName, DisposableBean bean);1467810738;Add the given bean to the list of disposable beans in this registry._<p>Disposable beans usually correspond to registered singletons,_matching the bean name but potentially being a different instance_(for example, a DisposableBean adapter for a singleton that does not_naturally implement Spring's DisposableBean interface)._@param beanName the name of the bean_@param bean the bean instance;public void registerDisposableBean(String beanName, DisposableBean bean) {_		synchronized (this.disposableBeans) {_			this.disposableBeans.put(beanName, bean)__		}_	};add,the,given,bean,to,the,list,of,disposable,beans,in,this,registry,p,disposable,beans,usually,correspond,to,registered,singletons,matching,the,bean,name,but,potentially,being,a,different,instance,for,example,a,disposable,bean,adapter,for,a,singleton,that,does,not,naturally,implement,spring,s,disposable,bean,interface,param,bean,name,the,name,of,the,bean,param,bean,the,bean,instance;public,void,register,disposable,bean,string,bean,name,disposable,bean,bean,synchronized,this,disposable,beans,this,disposable,beans,put,bean,name,bean
DefaultSingletonBeanRegistry -> public void registerDisposableBean(String beanName, DisposableBean bean);1469561191;Add the given bean to the list of disposable beans in this registry._<p>Disposable beans usually correspond to registered singletons,_matching the bean name but potentially being a different instance_(for example, a DisposableBean adapter for a singleton that does not_naturally implement Spring's DisposableBean interface)._@param beanName the name of the bean_@param bean the bean instance;public void registerDisposableBean(String beanName, DisposableBean bean) {_		synchronized (this.disposableBeans) {_			this.disposableBeans.put(beanName, bean)__		}_	};add,the,given,bean,to,the,list,of,disposable,beans,in,this,registry,p,disposable,beans,usually,correspond,to,registered,singletons,matching,the,bean,name,but,potentially,being,a,different,instance,for,example,a,disposable,bean,adapter,for,a,singleton,that,does,not,naturally,implement,spring,s,disposable,bean,interface,param,bean,name,the,name,of,the,bean,param,bean,the,bean,instance;public,void,register,disposable,bean,string,bean,name,disposable,bean,bean,synchronized,this,disposable,beans,this,disposable,beans,put,bean,name,bean
DefaultSingletonBeanRegistry -> public void registerDisposableBean(String beanName, DisposableBean bean);1478538021;Add the given bean to the list of disposable beans in this registry._<p>Disposable beans usually correspond to registered singletons,_matching the bean name but potentially being a different instance_(for example, a DisposableBean adapter for a singleton that does not_naturally implement Spring's DisposableBean interface)._@param beanName the name of the bean_@param bean the bean instance;public void registerDisposableBean(String beanName, DisposableBean bean) {_		synchronized (this.disposableBeans) {_			this.disposableBeans.put(beanName, bean)__		}_	};add,the,given,bean,to,the,list,of,disposable,beans,in,this,registry,p,disposable,beans,usually,correspond,to,registered,singletons,matching,the,bean,name,but,potentially,being,a,different,instance,for,example,a,disposable,bean,adapter,for,a,singleton,that,does,not,naturally,implement,spring,s,disposable,bean,interface,param,bean,name,the,name,of,the,bean,param,bean,the,bean,instance;public,void,register,disposable,bean,string,bean,name,disposable,bean,bean,synchronized,this,disposable,beans,this,disposable,beans,put,bean,name,bean
DefaultSingletonBeanRegistry -> public void registerDisposableBean(String beanName, DisposableBean bean);1495868221;Add the given bean to the list of disposable beans in this registry._<p>Disposable beans usually correspond to registered singletons,_matching the bean name but potentially being a different instance_(for example, a DisposableBean adapter for a singleton that does not_naturally implement Spring's DisposableBean interface)._@param beanName the name of the bean_@param bean the bean instance;public void registerDisposableBean(String beanName, DisposableBean bean) {_		synchronized (this.disposableBeans) {_			this.disposableBeans.put(beanName, bean)__		}_	};add,the,given,bean,to,the,list,of,disposable,beans,in,this,registry,p,disposable,beans,usually,correspond,to,registered,singletons,matching,the,bean,name,but,potentially,being,a,different,instance,for,example,a,disposable,bean,adapter,for,a,singleton,that,does,not,naturally,implement,spring,s,disposable,bean,interface,param,bean,name,the,name,of,the,bean,param,bean,the,bean,instance;public,void,register,disposable,bean,string,bean,name,disposable,bean,bean,synchronized,this,disposable,beans,this,disposable,beans,put,bean,name,bean
DefaultSingletonBeanRegistry -> public void registerDisposableBean(String beanName, DisposableBean bean);1496259743;Add the given bean to the list of disposable beans in this registry._<p>Disposable beans usually correspond to registered singletons,_matching the bean name but potentially being a different instance_(for example, a DisposableBean adapter for a singleton that does not_naturally implement Spring's DisposableBean interface)._@param beanName the name of the bean_@param bean the bean instance;public void registerDisposableBean(String beanName, DisposableBean bean) {_		synchronized (this.disposableBeans) {_			this.disposableBeans.put(beanName, bean)__		}_	};add,the,given,bean,to,the,list,of,disposable,beans,in,this,registry,p,disposable,beans,usually,correspond,to,registered,singletons,matching,the,bean,name,but,potentially,being,a,different,instance,for,example,a,disposable,bean,adapter,for,a,singleton,that,does,not,naturally,implement,spring,s,disposable,bean,interface,param,bean,name,the,name,of,the,bean,param,bean,the,bean,instance;public,void,register,disposable,bean,string,bean,name,disposable,bean,bean,synchronized,this,disposable,beans,this,disposable,beans,put,bean,name,bean
DefaultSingletonBeanRegistry -> public void registerDisposableBean(String beanName, DisposableBean bean);1496837955;Add the given bean to the list of disposable beans in this registry._<p>Disposable beans usually correspond to registered singletons,_matching the bean name but potentially being a different instance_(for example, a DisposableBean adapter for a singleton that does not_naturally implement Spring's DisposableBean interface)._@param beanName the name of the bean_@param bean the bean instance;public void registerDisposableBean(String beanName, DisposableBean bean) {_		synchronized (this.disposableBeans) {_			this.disposableBeans.put(beanName, bean)__		}_	};add,the,given,bean,to,the,list,of,disposable,beans,in,this,registry,p,disposable,beans,usually,correspond,to,registered,singletons,matching,the,bean,name,but,potentially,being,a,different,instance,for,example,a,disposable,bean,adapter,for,a,singleton,that,does,not,naturally,implement,spring,s,disposable,bean,interface,param,bean,name,the,name,of,the,bean,param,bean,the,bean,instance;public,void,register,disposable,bean,string,bean,name,disposable,bean,bean,synchronized,this,disposable,beans,this,disposable,beans,put,bean,name,bean
DefaultSingletonBeanRegistry -> public void registerDisposableBean(String beanName, DisposableBean bean);1498780456;Add the given bean to the list of disposable beans in this registry._<p>Disposable beans usually correspond to registered singletons,_matching the bean name but potentially being a different instance_(for example, a DisposableBean adapter for a singleton that does not_naturally implement Spring's DisposableBean interface)._@param beanName the name of the bean_@param bean the bean instance;public void registerDisposableBean(String beanName, DisposableBean bean) {_		synchronized (this.disposableBeans) {_			this.disposableBeans.put(beanName, bean)__		}_	};add,the,given,bean,to,the,list,of,disposable,beans,in,this,registry,p,disposable,beans,usually,correspond,to,registered,singletons,matching,the,bean,name,but,potentially,being,a,different,instance,for,example,a,disposable,bean,adapter,for,a,singleton,that,does,not,naturally,implement,spring,s,disposable,bean,interface,param,bean,name,the,name,of,the,bean,param,bean,the,bean,instance;public,void,register,disposable,bean,string,bean,name,disposable,bean,bean,synchronized,this,disposable,beans,this,disposable,beans,put,bean,name,bean
DefaultSingletonBeanRegistry -> public void registerDisposableBean(String beanName, DisposableBean bean);1502974979;Add the given bean to the list of disposable beans in this registry._<p>Disposable beans usually correspond to registered singletons,_matching the bean name but potentially being a different instance_(for example, a DisposableBean adapter for a singleton that does not_naturally implement Spring's DisposableBean interface)._@param beanName the name of the bean_@param bean the bean instance;public void registerDisposableBean(String beanName, DisposableBean bean) {_		synchronized (this.disposableBeans) {_			this.disposableBeans.put(beanName, bean)__		}_	};add,the,given,bean,to,the,list,of,disposable,beans,in,this,registry,p,disposable,beans,usually,correspond,to,registered,singletons,matching,the,bean,name,but,potentially,being,a,different,instance,for,example,a,disposable,bean,adapter,for,a,singleton,that,does,not,naturally,implement,spring,s,disposable,bean,interface,param,bean,name,the,name,of,the,bean,param,bean,the,bean,instance;public,void,register,disposable,bean,string,bean,name,disposable,bean,bean,synchronized,this,disposable,beans,this,disposable,beans,put,bean,name,bean
DefaultSingletonBeanRegistry -> public void registerDisposableBean(String beanName, DisposableBean bean);1503007895;Add the given bean to the list of disposable beans in this registry._<p>Disposable beans usually correspond to registered singletons,_matching the bean name but potentially being a different instance_(for example, a DisposableBean adapter for a singleton that does not_naturally implement Spring's DisposableBean interface)._@param beanName the name of the bean_@param bean the bean instance;public void registerDisposableBean(String beanName, DisposableBean bean) {_		synchronized (this.disposableBeans) {_			this.disposableBeans.put(beanName, bean)__		}_	};add,the,given,bean,to,the,list,of,disposable,beans,in,this,registry,p,disposable,beans,usually,correspond,to,registered,singletons,matching,the,bean,name,but,potentially,being,a,different,instance,for,example,a,disposable,bean,adapter,for,a,singleton,that,does,not,naturally,implement,spring,s,disposable,bean,interface,param,bean,name,the,name,of,the,bean,param,bean,the,bean,instance;public,void,register,disposable,bean,string,bean,name,disposable,bean,bean,synchronized,this,disposable,beans,this,disposable,beans,put,bean,name,bean
DefaultSingletonBeanRegistry -> public void registerDisposableBean(String beanName, DisposableBean bean);1518810557;Add the given bean to the list of disposable beans in this registry._<p>Disposable beans usually correspond to registered singletons,_matching the bean name but potentially being a different instance_(for example, a DisposableBean adapter for a singleton that does not_naturally implement Spring's DisposableBean interface)._@param beanName the name of the bean_@param bean the bean instance;public void registerDisposableBean(String beanName, DisposableBean bean) {_		synchronized (this.disposableBeans) {_			this.disposableBeans.put(beanName, bean)__		}_	};add,the,given,bean,to,the,list,of,disposable,beans,in,this,registry,p,disposable,beans,usually,correspond,to,registered,singletons,matching,the,bean,name,but,potentially,being,a,different,instance,for,example,a,disposable,bean,adapter,for,a,singleton,that,does,not,naturally,implement,spring,s,disposable,bean,interface,param,bean,name,the,name,of,the,bean,param,bean,the,bean,instance;public,void,register,disposable,bean,string,bean,name,disposable,bean,bean,synchronized,this,disposable,beans,this,disposable,beans,put,bean,name,bean
DefaultSingletonBeanRegistry -> public void registerDisposableBean(String beanName, DisposableBean bean);1521822873;Add the given bean to the list of disposable beans in this registry._<p>Disposable beans usually correspond to registered singletons,_matching the bean name but potentially being a different instance_(for example, a DisposableBean adapter for a singleton that does not_naturally implement Spring's DisposableBean interface)._@param beanName the name of the bean_@param bean the bean instance;public void registerDisposableBean(String beanName, DisposableBean bean) {_		synchronized (this.disposableBeans) {_			this.disposableBeans.put(beanName, bean)__		}_	};add,the,given,bean,to,the,list,of,disposable,beans,in,this,registry,p,disposable,beans,usually,correspond,to,registered,singletons,matching,the,bean,name,but,potentially,being,a,different,instance,for,example,a,disposable,bean,adapter,for,a,singleton,that,does,not,naturally,implement,spring,s,disposable,bean,interface,param,bean,name,the,name,of,the,bean,param,bean,the,bean,instance;public,void,register,disposable,bean,string,bean,name,disposable,bean,bean,synchronized,this,disposable,beans,this,disposable,beans,put,bean,name,bean
DefaultSingletonBeanRegistry -> public void registerDisposableBean(String beanName, DisposableBean bean);1521905451;Add the given bean to the list of disposable beans in this registry._<p>Disposable beans usually correspond to registered singletons,_matching the bean name but potentially being a different instance_(for example, a DisposableBean adapter for a singleton that does not_naturally implement Spring's DisposableBean interface)._@param beanName the name of the bean_@param bean the bean instance;public void registerDisposableBean(String beanName, DisposableBean bean) {_		synchronized (this.disposableBeans) {_			this.disposableBeans.put(beanName, bean)__		}_	};add,the,given,bean,to,the,list,of,disposable,beans,in,this,registry,p,disposable,beans,usually,correspond,to,registered,singletons,matching,the,bean,name,but,potentially,being,a,different,instance,for,example,a,disposable,bean,adapter,for,a,singleton,that,does,not,naturally,implement,spring,s,disposable,bean,interface,param,bean,name,the,name,of,the,bean,param,bean,the,bean,instance;public,void,register,disposable,bean,string,bean,name,disposable,bean,bean,synchronized,this,disposable,beans,this,disposable,beans,put,bean,name,bean
DefaultSingletonBeanRegistry -> public void registerDisposableBean(String beanName, DisposableBean bean);1527623493;Add the given bean to the list of disposable beans in this registry._<p>Disposable beans usually correspond to registered singletons,_matching the bean name but potentially being a different instance_(for example, a DisposableBean adapter for a singleton that does not_naturally implement Spring's DisposableBean interface)._@param beanName the name of the bean_@param bean the bean instance;public void registerDisposableBean(String beanName, DisposableBean bean) {_		synchronized (this.disposableBeans) {_			this.disposableBeans.put(beanName, bean)__		}_	};add,the,given,bean,to,the,list,of,disposable,beans,in,this,registry,p,disposable,beans,usually,correspond,to,registered,singletons,matching,the,bean,name,but,potentially,being,a,different,instance,for,example,a,disposable,bean,adapter,for,a,singleton,that,does,not,naturally,implement,spring,s,disposable,bean,interface,param,bean,name,the,name,of,the,bean,param,bean,the,bean,instance;public,void,register,disposable,bean,string,bean,name,disposable,bean,bean,synchronized,this,disposable,beans,this,disposable,beans,put,bean,name,bean
DefaultSingletonBeanRegistry -> public void registerDisposableBean(String beanName, DisposableBean bean);1530174524;Add the given bean to the list of disposable beans in this registry._<p>Disposable beans usually correspond to registered singletons,_matching the bean name but potentially being a different instance_(for example, a DisposableBean adapter for a singleton that does not_naturally implement Spring's DisposableBean interface)._@param beanName the name of the bean_@param bean the bean instance;public void registerDisposableBean(String beanName, DisposableBean bean) {_		synchronized (this.disposableBeans) {_			this.disposableBeans.put(beanName, bean)__		}_	};add,the,given,bean,to,the,list,of,disposable,beans,in,this,registry,p,disposable,beans,usually,correspond,to,registered,singletons,matching,the,bean,name,but,potentially,being,a,different,instance,for,example,a,disposable,bean,adapter,for,a,singleton,that,does,not,naturally,implement,spring,s,disposable,bean,interface,param,bean,name,the,name,of,the,bean,param,bean,the,bean,instance;public,void,register,disposable,bean,string,bean,name,disposable,bean,bean,synchronized,this,disposable,beans,this,disposable,beans,put,bean,name,bean
DefaultSingletonBeanRegistry -> public void registerDisposableBean(String beanName, DisposableBean bean);1532091916;Add the given bean to the list of disposable beans in this registry._<p>Disposable beans usually correspond to registered singletons,_matching the bean name but potentially being a different instance_(for example, a DisposableBean adapter for a singleton that does not_naturally implement Spring's DisposableBean interface)._@param beanName the name of the bean_@param bean the bean instance;public void registerDisposableBean(String beanName, DisposableBean bean) {_		synchronized (this.disposableBeans) {_			this.disposableBeans.put(beanName, bean)__		}_	};add,the,given,bean,to,the,list,of,disposable,beans,in,this,registry,p,disposable,beans,usually,correspond,to,registered,singletons,matching,the,bean,name,but,potentially,being,a,different,instance,for,example,a,disposable,bean,adapter,for,a,singleton,that,does,not,naturally,implement,spring,s,disposable,bean,interface,param,bean,name,the,name,of,the,bean,param,bean,the,bean,instance;public,void,register,disposable,bean,string,bean,name,disposable,bean,bean,synchronized,this,disposable,beans,this,disposable,beans,put,bean,name,bean
DefaultSingletonBeanRegistry -> public void registerDisposableBean(String beanName, DisposableBean bean);1532706365;Add the given bean to the list of disposable beans in this registry._<p>Disposable beans usually correspond to registered singletons,_matching the bean name but potentially being a different instance_(for example, a DisposableBean adapter for a singleton that does not_naturally implement Spring's DisposableBean interface)._@param beanName the name of the bean_@param bean the bean instance;public void registerDisposableBean(String beanName, DisposableBean bean) {_		synchronized (this.disposableBeans) {_			this.disposableBeans.put(beanName, bean)__		}_	};add,the,given,bean,to,the,list,of,disposable,beans,in,this,registry,p,disposable,beans,usually,correspond,to,registered,singletons,matching,the,bean,name,but,potentially,being,a,different,instance,for,example,a,disposable,bean,adapter,for,a,singleton,that,does,not,naturally,implement,spring,s,disposable,bean,interface,param,bean,name,the,name,of,the,bean,param,bean,the,bean,instance;public,void,register,disposable,bean,string,bean,name,disposable,bean,bean,synchronized,this,disposable,beans,this,disposable,beans,put,bean,name,bean
DefaultSingletonBeanRegistry -> @Nullable 	protected Object getSingleton(String beanName, boolean allowEarlyReference);1495868221;Return the (raw) singleton object registered under the given name._<p>Checks already instantiated singletons and also allows for an early_reference to a currently created singleton (resolving a circular reference)._@param beanName the name of the bean to look for_@param allowEarlyReference whether early references should be created or not_@return the registered singleton object, or {@code null} if none found;@Nullable_	protected Object getSingleton(String beanName, boolean allowEarlyReference) {_		Object singletonObject = this.singletonObjects.get(beanName)__		if (singletonObject == null && isSingletonCurrentlyInCreation(beanName)) {_			synchronized (this.singletonObjects) {_				singletonObject = this.earlySingletonObjects.get(beanName)__				if (singletonObject == null && allowEarlyReference) {_					ObjectFactory<?> singletonFactory = this.singletonFactories.get(beanName)__					if (singletonFactory != null) {_						singletonObject = singletonFactory.getObject()__						this.earlySingletonObjects.put(beanName, singletonObject)__						this.singletonFactories.remove(beanName)__					}_				}_			}_		}_		return (singletonObject != NULL_OBJECT ? singletonObject : null)__	};return,the,raw,singleton,object,registered,under,the,given,name,p,checks,already,instantiated,singletons,and,also,allows,for,an,early,reference,to,a,currently,created,singleton,resolving,a,circular,reference,param,bean,name,the,name,of,the,bean,to,look,for,param,allow,early,reference,whether,early,references,should,be,created,or,not,return,the,registered,singleton,object,or,code,null,if,none,found;nullable,protected,object,get,singleton,string,bean,name,boolean,allow,early,reference,object,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,is,singleton,currently,in,creation,bean,name,synchronized,this,singleton,objects,singleton,object,this,early,singleton,objects,get,bean,name,if,singleton,object,null,allow,early,reference,object,factory,singleton,factory,this,singleton,factories,get,bean,name,if,singleton,factory,null,singleton,object,singleton,factory,get,object,this,early,singleton,objects,put,bean,name,singleton,object,this,singleton,factories,remove,bean,name,return,singleton,object,singleton,object,null
DefaultSingletonBeanRegistry -> @Nullable 	protected Object getSingleton(String beanName, boolean allowEarlyReference);1496259743;Return the (raw) singleton object registered under the given name._<p>Checks already instantiated singletons and also allows for an early_reference to a currently created singleton (resolving a circular reference)._@param beanName the name of the bean to look for_@param allowEarlyReference whether early references should be created or not_@return the registered singleton object, or {@code null} if none found;@Nullable_	protected Object getSingleton(String beanName, boolean allowEarlyReference) {_		Object singletonObject = this.singletonObjects.get(beanName)__		if (singletonObject == null && isSingletonCurrentlyInCreation(beanName)) {_			synchronized (this.singletonObjects) {_				singletonObject = this.earlySingletonObjects.get(beanName)__				if (singletonObject == null && allowEarlyReference) {_					ObjectFactory<?> singletonFactory = this.singletonFactories.get(beanName)__					if (singletonFactory != null) {_						singletonObject = singletonFactory.getObject()__						this.earlySingletonObjects.put(beanName, singletonObject)__						this.singletonFactories.remove(beanName)__					}_				}_			}_		}_		return (singletonObject != NULL_OBJECT ? singletonObject : null)__	};return,the,raw,singleton,object,registered,under,the,given,name,p,checks,already,instantiated,singletons,and,also,allows,for,an,early,reference,to,a,currently,created,singleton,resolving,a,circular,reference,param,bean,name,the,name,of,the,bean,to,look,for,param,allow,early,reference,whether,early,references,should,be,created,or,not,return,the,registered,singleton,object,or,code,null,if,none,found;nullable,protected,object,get,singleton,string,bean,name,boolean,allow,early,reference,object,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,is,singleton,currently,in,creation,bean,name,synchronized,this,singleton,objects,singleton,object,this,early,singleton,objects,get,bean,name,if,singleton,object,null,allow,early,reference,object,factory,singleton,factory,this,singleton,factories,get,bean,name,if,singleton,factory,null,singleton,object,singleton,factory,get,object,this,early,singleton,objects,put,bean,name,singleton,object,this,singleton,factories,remove,bean,name,return,singleton,object,singleton,object,null
DefaultSingletonBeanRegistry -> @Nullable 	protected Object getSingleton(String beanName, boolean allowEarlyReference);1496837955;Return the (raw) singleton object registered under the given name._<p>Checks already instantiated singletons and also allows for an early_reference to a currently created singleton (resolving a circular reference)._@param beanName the name of the bean to look for_@param allowEarlyReference whether early references should be created or not_@return the registered singleton object, or {@code null} if none found;@Nullable_	protected Object getSingleton(String beanName, boolean allowEarlyReference) {_		Object singletonObject = this.singletonObjects.get(beanName)__		if (singletonObject == null && isSingletonCurrentlyInCreation(beanName)) {_			synchronized (this.singletonObjects) {_				singletonObject = this.earlySingletonObjects.get(beanName)__				if (singletonObject == null && allowEarlyReference) {_					ObjectFactory<?> singletonFactory = this.singletonFactories.get(beanName)__					if (singletonFactory != null) {_						singletonObject = singletonFactory.getObject()__						this.earlySingletonObjects.put(beanName, singletonObject)__						this.singletonFactories.remove(beanName)__					}_				}_			}_		}_		return (singletonObject != NULL_OBJECT ? singletonObject : null)__	};return,the,raw,singleton,object,registered,under,the,given,name,p,checks,already,instantiated,singletons,and,also,allows,for,an,early,reference,to,a,currently,created,singleton,resolving,a,circular,reference,param,bean,name,the,name,of,the,bean,to,look,for,param,allow,early,reference,whether,early,references,should,be,created,or,not,return,the,registered,singleton,object,or,code,null,if,none,found;nullable,protected,object,get,singleton,string,bean,name,boolean,allow,early,reference,object,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,is,singleton,currently,in,creation,bean,name,synchronized,this,singleton,objects,singleton,object,this,early,singleton,objects,get,bean,name,if,singleton,object,null,allow,early,reference,object,factory,singleton,factory,this,singleton,factories,get,bean,name,if,singleton,factory,null,singleton,object,singleton,factory,get,object,this,early,singleton,objects,put,bean,name,singleton,object,this,singleton,factories,remove,bean,name,return,singleton,object,singleton,object,null
DefaultSingletonBeanRegistry -> @Nullable 	protected Object getSingleton(String beanName, boolean allowEarlyReference);1498780456;Return the (raw) singleton object registered under the given name._<p>Checks already instantiated singletons and also allows for an early_reference to a currently created singleton (resolving a circular reference)._@param beanName the name of the bean to look for_@param allowEarlyReference whether early references should be created or not_@return the registered singleton object, or {@code null} if none found;@Nullable_	protected Object getSingleton(String beanName, boolean allowEarlyReference) {_		Object singletonObject = this.singletonObjects.get(beanName)__		if (singletonObject == null && isSingletonCurrentlyInCreation(beanName)) {_			synchronized (this.singletonObjects) {_				singletonObject = this.earlySingletonObjects.get(beanName)__				if (singletonObject == null && allowEarlyReference) {_					ObjectFactory<?> singletonFactory = this.singletonFactories.get(beanName)__					if (singletonFactory != null) {_						singletonObject = singletonFactory.getObject()__						this.earlySingletonObjects.put(beanName, singletonObject)__						this.singletonFactories.remove(beanName)__					}_				}_			}_		}_		return (singletonObject != NULL_OBJECT ? singletonObject : null)__	};return,the,raw,singleton,object,registered,under,the,given,name,p,checks,already,instantiated,singletons,and,also,allows,for,an,early,reference,to,a,currently,created,singleton,resolving,a,circular,reference,param,bean,name,the,name,of,the,bean,to,look,for,param,allow,early,reference,whether,early,references,should,be,created,or,not,return,the,registered,singleton,object,or,code,null,if,none,found;nullable,protected,object,get,singleton,string,bean,name,boolean,allow,early,reference,object,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,is,singleton,currently,in,creation,bean,name,synchronized,this,singleton,objects,singleton,object,this,early,singleton,objects,get,bean,name,if,singleton,object,null,allow,early,reference,object,factory,singleton,factory,this,singleton,factories,get,bean,name,if,singleton,factory,null,singleton,object,singleton,factory,get,object,this,early,singleton,objects,put,bean,name,singleton,object,this,singleton,factories,remove,bean,name,return,singleton,object,singleton,object,null
DefaultSingletonBeanRegistry -> @Nullable 	protected Object getSingleton(String beanName, boolean allowEarlyReference);1502974979;Return the (raw) singleton object registered under the given name._<p>Checks already instantiated singletons and also allows for an early_reference to a currently created singleton (resolving a circular reference)._@param beanName the name of the bean to look for_@param allowEarlyReference whether early references should be created or not_@return the registered singleton object, or {@code null} if none found;@Nullable_	protected Object getSingleton(String beanName, boolean allowEarlyReference) {_		Object singletonObject = this.singletonObjects.get(beanName)__		if (singletonObject == null && isSingletonCurrentlyInCreation(beanName)) {_			synchronized (this.singletonObjects) {_				singletonObject = this.earlySingletonObjects.get(beanName)__				if (singletonObject == null && allowEarlyReference) {_					ObjectFactory<?> singletonFactory = this.singletonFactories.get(beanName)__					if (singletonFactory != null) {_						singletonObject = singletonFactory.getObject()__						this.earlySingletonObjects.put(beanName, singletonObject)__						this.singletonFactories.remove(beanName)__					}_				}_			}_		}_		return (singletonObject != NULL_OBJECT ? singletonObject : null)__	};return,the,raw,singleton,object,registered,under,the,given,name,p,checks,already,instantiated,singletons,and,also,allows,for,an,early,reference,to,a,currently,created,singleton,resolving,a,circular,reference,param,bean,name,the,name,of,the,bean,to,look,for,param,allow,early,reference,whether,early,references,should,be,created,or,not,return,the,registered,singleton,object,or,code,null,if,none,found;nullable,protected,object,get,singleton,string,bean,name,boolean,allow,early,reference,object,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,is,singleton,currently,in,creation,bean,name,synchronized,this,singleton,objects,singleton,object,this,early,singleton,objects,get,bean,name,if,singleton,object,null,allow,early,reference,object,factory,singleton,factory,this,singleton,factories,get,bean,name,if,singleton,factory,null,singleton,object,singleton,factory,get,object,this,early,singleton,objects,put,bean,name,singleton,object,this,singleton,factories,remove,bean,name,return,singleton,object,singleton,object,null
DefaultSingletonBeanRegistry -> @Nullable 	protected Object getSingleton(String beanName, boolean allowEarlyReference);1503007895;Return the (raw) singleton object registered under the given name._<p>Checks already instantiated singletons and also allows for an early_reference to a currently created singleton (resolving a circular reference)._@param beanName the name of the bean to look for_@param allowEarlyReference whether early references should be created or not_@return the registered singleton object, or {@code null} if none found;@Nullable_	protected Object getSingleton(String beanName, boolean allowEarlyReference) {_		Object singletonObject = this.singletonObjects.get(beanName)__		if (singletonObject == null && isSingletonCurrentlyInCreation(beanName)) {_			synchronized (this.singletonObjects) {_				singletonObject = this.earlySingletonObjects.get(beanName)__				if (singletonObject == null && allowEarlyReference) {_					ObjectFactory<?> singletonFactory = this.singletonFactories.get(beanName)__					if (singletonFactory != null) {_						singletonObject = singletonFactory.getObject()__						this.earlySingletonObjects.put(beanName, singletonObject)__						this.singletonFactories.remove(beanName)__					}_				}_			}_		}_		return singletonObject__	};return,the,raw,singleton,object,registered,under,the,given,name,p,checks,already,instantiated,singletons,and,also,allows,for,an,early,reference,to,a,currently,created,singleton,resolving,a,circular,reference,param,bean,name,the,name,of,the,bean,to,look,for,param,allow,early,reference,whether,early,references,should,be,created,or,not,return,the,registered,singleton,object,or,code,null,if,none,found;nullable,protected,object,get,singleton,string,bean,name,boolean,allow,early,reference,object,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,is,singleton,currently,in,creation,bean,name,synchronized,this,singleton,objects,singleton,object,this,early,singleton,objects,get,bean,name,if,singleton,object,null,allow,early,reference,object,factory,singleton,factory,this,singleton,factories,get,bean,name,if,singleton,factory,null,singleton,object,singleton,factory,get,object,this,early,singleton,objects,put,bean,name,singleton,object,this,singleton,factories,remove,bean,name,return,singleton,object
DefaultSingletonBeanRegistry -> @Nullable 	protected Object getSingleton(String beanName, boolean allowEarlyReference);1518810557;Return the (raw) singleton object registered under the given name._<p>Checks already instantiated singletons and also allows for an early_reference to a currently created singleton (resolving a circular reference)._@param beanName the name of the bean to look for_@param allowEarlyReference whether early references should be created or not_@return the registered singleton object, or {@code null} if none found;@Nullable_	protected Object getSingleton(String beanName, boolean allowEarlyReference) {_		Object singletonObject = this.singletonObjects.get(beanName)__		if (singletonObject == null && isSingletonCurrentlyInCreation(beanName)) {_			synchronized (this.singletonObjects) {_				singletonObject = this.earlySingletonObjects.get(beanName)__				if (singletonObject == null && allowEarlyReference) {_					ObjectFactory<?> singletonFactory = this.singletonFactories.get(beanName)__					if (singletonFactory != null) {_						singletonObject = singletonFactory.getObject()__						this.earlySingletonObjects.put(beanName, singletonObject)__						this.singletonFactories.remove(beanName)__					}_				}_			}_		}_		return singletonObject__	};return,the,raw,singleton,object,registered,under,the,given,name,p,checks,already,instantiated,singletons,and,also,allows,for,an,early,reference,to,a,currently,created,singleton,resolving,a,circular,reference,param,bean,name,the,name,of,the,bean,to,look,for,param,allow,early,reference,whether,early,references,should,be,created,or,not,return,the,registered,singleton,object,or,code,null,if,none,found;nullable,protected,object,get,singleton,string,bean,name,boolean,allow,early,reference,object,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,is,singleton,currently,in,creation,bean,name,synchronized,this,singleton,objects,singleton,object,this,early,singleton,objects,get,bean,name,if,singleton,object,null,allow,early,reference,object,factory,singleton,factory,this,singleton,factories,get,bean,name,if,singleton,factory,null,singleton,object,singleton,factory,get,object,this,early,singleton,objects,put,bean,name,singleton,object,this,singleton,factories,remove,bean,name,return,singleton,object
DefaultSingletonBeanRegistry -> @Nullable 	protected Object getSingleton(String beanName, boolean allowEarlyReference);1521822873;Return the (raw) singleton object registered under the given name._<p>Checks already instantiated singletons and also allows for an early_reference to a currently created singleton (resolving a circular reference)._@param beanName the name of the bean to look for_@param allowEarlyReference whether early references should be created or not_@return the registered singleton object, or {@code null} if none found;@Nullable_	protected Object getSingleton(String beanName, boolean allowEarlyReference) {_		Object singletonObject = this.singletonObjects.get(beanName)__		if (singletonObject == null && isSingletonCurrentlyInCreation(beanName)) {_			synchronized (this.singletonObjects) {_				singletonObject = this.earlySingletonObjects.get(beanName)__				if (singletonObject == null && allowEarlyReference) {_					ObjectFactory<?> singletonFactory = this.singletonFactories.get(beanName)__					if (singletonFactory != null) {_						singletonObject = singletonFactory.getObject()__						this.earlySingletonObjects.put(beanName, singletonObject)__						this.singletonFactories.remove(beanName)__					}_				}_			}_		}_		return singletonObject__	};return,the,raw,singleton,object,registered,under,the,given,name,p,checks,already,instantiated,singletons,and,also,allows,for,an,early,reference,to,a,currently,created,singleton,resolving,a,circular,reference,param,bean,name,the,name,of,the,bean,to,look,for,param,allow,early,reference,whether,early,references,should,be,created,or,not,return,the,registered,singleton,object,or,code,null,if,none,found;nullable,protected,object,get,singleton,string,bean,name,boolean,allow,early,reference,object,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,is,singleton,currently,in,creation,bean,name,synchronized,this,singleton,objects,singleton,object,this,early,singleton,objects,get,bean,name,if,singleton,object,null,allow,early,reference,object,factory,singleton,factory,this,singleton,factories,get,bean,name,if,singleton,factory,null,singleton,object,singleton,factory,get,object,this,early,singleton,objects,put,bean,name,singleton,object,this,singleton,factories,remove,bean,name,return,singleton,object
DefaultSingletonBeanRegistry -> @Nullable 	protected Object getSingleton(String beanName, boolean allowEarlyReference);1521905451;Return the (raw) singleton object registered under the given name._<p>Checks already instantiated singletons and also allows for an early_reference to a currently created singleton (resolving a circular reference)._@param beanName the name of the bean to look for_@param allowEarlyReference whether early references should be created or not_@return the registered singleton object, or {@code null} if none found;@Nullable_	protected Object getSingleton(String beanName, boolean allowEarlyReference) {_		Object singletonObject = this.singletonObjects.get(beanName)__		if (singletonObject == null && isSingletonCurrentlyInCreation(beanName)) {_			synchronized (this.singletonObjects) {_				singletonObject = this.earlySingletonObjects.get(beanName)__				if (singletonObject == null && allowEarlyReference) {_					ObjectFactory<?> singletonFactory = this.singletonFactories.get(beanName)__					if (singletonFactory != null) {_						singletonObject = singletonFactory.getObject()__						this.earlySingletonObjects.put(beanName, singletonObject)__						this.singletonFactories.remove(beanName)__					}_				}_			}_		}_		return singletonObject__	};return,the,raw,singleton,object,registered,under,the,given,name,p,checks,already,instantiated,singletons,and,also,allows,for,an,early,reference,to,a,currently,created,singleton,resolving,a,circular,reference,param,bean,name,the,name,of,the,bean,to,look,for,param,allow,early,reference,whether,early,references,should,be,created,or,not,return,the,registered,singleton,object,or,code,null,if,none,found;nullable,protected,object,get,singleton,string,bean,name,boolean,allow,early,reference,object,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,is,singleton,currently,in,creation,bean,name,synchronized,this,singleton,objects,singleton,object,this,early,singleton,objects,get,bean,name,if,singleton,object,null,allow,early,reference,object,factory,singleton,factory,this,singleton,factories,get,bean,name,if,singleton,factory,null,singleton,object,singleton,factory,get,object,this,early,singleton,objects,put,bean,name,singleton,object,this,singleton,factories,remove,bean,name,return,singleton,object
DefaultSingletonBeanRegistry -> @Nullable 	protected Object getSingleton(String beanName, boolean allowEarlyReference);1527623493;Return the (raw) singleton object registered under the given name._<p>Checks already instantiated singletons and also allows for an early_reference to a currently created singleton (resolving a circular reference)._@param beanName the name of the bean to look for_@param allowEarlyReference whether early references should be created or not_@return the registered singleton object, or {@code null} if none found;@Nullable_	protected Object getSingleton(String beanName, boolean allowEarlyReference) {_		Object singletonObject = this.singletonObjects.get(beanName)__		if (singletonObject == null && isSingletonCurrentlyInCreation(beanName)) {_			synchronized (this.singletonObjects) {_				singletonObject = this.earlySingletonObjects.get(beanName)__				if (singletonObject == null && allowEarlyReference) {_					ObjectFactory<?> singletonFactory = this.singletonFactories.get(beanName)__					if (singletonFactory != null) {_						singletonObject = singletonFactory.getObject()__						this.earlySingletonObjects.put(beanName, singletonObject)__						this.singletonFactories.remove(beanName)__					}_				}_			}_		}_		return singletonObject__	};return,the,raw,singleton,object,registered,under,the,given,name,p,checks,already,instantiated,singletons,and,also,allows,for,an,early,reference,to,a,currently,created,singleton,resolving,a,circular,reference,param,bean,name,the,name,of,the,bean,to,look,for,param,allow,early,reference,whether,early,references,should,be,created,or,not,return,the,registered,singleton,object,or,code,null,if,none,found;nullable,protected,object,get,singleton,string,bean,name,boolean,allow,early,reference,object,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,is,singleton,currently,in,creation,bean,name,synchronized,this,singleton,objects,singleton,object,this,early,singleton,objects,get,bean,name,if,singleton,object,null,allow,early,reference,object,factory,singleton,factory,this,singleton,factories,get,bean,name,if,singleton,factory,null,singleton,object,singleton,factory,get,object,this,early,singleton,objects,put,bean,name,singleton,object,this,singleton,factories,remove,bean,name,return,singleton,object
DefaultSingletonBeanRegistry -> @Nullable 	protected Object getSingleton(String beanName, boolean allowEarlyReference);1530174524;Return the (raw) singleton object registered under the given name._<p>Checks already instantiated singletons and also allows for an early_reference to a currently created singleton (resolving a circular reference)._@param beanName the name of the bean to look for_@param allowEarlyReference whether early references should be created or not_@return the registered singleton object, or {@code null} if none found;@Nullable_	protected Object getSingleton(String beanName, boolean allowEarlyReference) {_		Object singletonObject = this.singletonObjects.get(beanName)__		if (singletonObject == null && isSingletonCurrentlyInCreation(beanName)) {_			synchronized (this.singletonObjects) {_				singletonObject = this.earlySingletonObjects.get(beanName)__				if (singletonObject == null && allowEarlyReference) {_					ObjectFactory<?> singletonFactory = this.singletonFactories.get(beanName)__					if (singletonFactory != null) {_						singletonObject = singletonFactory.getObject()__						this.earlySingletonObjects.put(beanName, singletonObject)__						this.singletonFactories.remove(beanName)__					}_				}_			}_		}_		return singletonObject__	};return,the,raw,singleton,object,registered,under,the,given,name,p,checks,already,instantiated,singletons,and,also,allows,for,an,early,reference,to,a,currently,created,singleton,resolving,a,circular,reference,param,bean,name,the,name,of,the,bean,to,look,for,param,allow,early,reference,whether,early,references,should,be,created,or,not,return,the,registered,singleton,object,or,code,null,if,none,found;nullable,protected,object,get,singleton,string,bean,name,boolean,allow,early,reference,object,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,is,singleton,currently,in,creation,bean,name,synchronized,this,singleton,objects,singleton,object,this,early,singleton,objects,get,bean,name,if,singleton,object,null,allow,early,reference,object,factory,singleton,factory,this,singleton,factories,get,bean,name,if,singleton,factory,null,singleton,object,singleton,factory,get,object,this,early,singleton,objects,put,bean,name,singleton,object,this,singleton,factories,remove,bean,name,return,singleton,object
DefaultSingletonBeanRegistry -> @Nullable 	protected Object getSingleton(String beanName, boolean allowEarlyReference);1532091916;Return the (raw) singleton object registered under the given name._<p>Checks already instantiated singletons and also allows for an early_reference to a currently created singleton (resolving a circular reference)._@param beanName the name of the bean to look for_@param allowEarlyReference whether early references should be created or not_@return the registered singleton object, or {@code null} if none found;@Nullable_	protected Object getSingleton(String beanName, boolean allowEarlyReference) {_		Object singletonObject = this.singletonObjects.get(beanName)__		if (singletonObject == null && isSingletonCurrentlyInCreation(beanName)) {_			synchronized (this.singletonObjects) {_				singletonObject = this.earlySingletonObjects.get(beanName)__				if (singletonObject == null && allowEarlyReference) {_					ObjectFactory<?> singletonFactory = this.singletonFactories.get(beanName)__					if (singletonFactory != null) {_						singletonObject = singletonFactory.getObject()__						this.earlySingletonObjects.put(beanName, singletonObject)__						this.singletonFactories.remove(beanName)__					}_				}_			}_		}_		return singletonObject__	};return,the,raw,singleton,object,registered,under,the,given,name,p,checks,already,instantiated,singletons,and,also,allows,for,an,early,reference,to,a,currently,created,singleton,resolving,a,circular,reference,param,bean,name,the,name,of,the,bean,to,look,for,param,allow,early,reference,whether,early,references,should,be,created,or,not,return,the,registered,singleton,object,or,code,null,if,none,found;nullable,protected,object,get,singleton,string,bean,name,boolean,allow,early,reference,object,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,is,singleton,currently,in,creation,bean,name,synchronized,this,singleton,objects,singleton,object,this,early,singleton,objects,get,bean,name,if,singleton,object,null,allow,early,reference,object,factory,singleton,factory,this,singleton,factories,get,bean,name,if,singleton,factory,null,singleton,object,singleton,factory,get,object,this,early,singleton,objects,put,bean,name,singleton,object,this,singleton,factories,remove,bean,name,return,singleton,object
DefaultSingletonBeanRegistry -> @Nullable 	protected Object getSingleton(String beanName, boolean allowEarlyReference);1532706365;Return the (raw) singleton object registered under the given name._<p>Checks already instantiated singletons and also allows for an early_reference to a currently created singleton (resolving a circular reference)._@param beanName the name of the bean to look for_@param allowEarlyReference whether early references should be created or not_@return the registered singleton object, or {@code null} if none found;@Nullable_	protected Object getSingleton(String beanName, boolean allowEarlyReference) {_		Object singletonObject = this.singletonObjects.get(beanName)__		if (singletonObject == null && isSingletonCurrentlyInCreation(beanName)) {_			synchronized (this.singletonObjects) {_				singletonObject = this.earlySingletonObjects.get(beanName)__				if (singletonObject == null && allowEarlyReference) {_					ObjectFactory<?> singletonFactory = this.singletonFactories.get(beanName)__					if (singletonFactory != null) {_						singletonObject = singletonFactory.getObject()__						this.earlySingletonObjects.put(beanName, singletonObject)__						this.singletonFactories.remove(beanName)__					}_				}_			}_		}_		return singletonObject__	};return,the,raw,singleton,object,registered,under,the,given,name,p,checks,already,instantiated,singletons,and,also,allows,for,an,early,reference,to,a,currently,created,singleton,resolving,a,circular,reference,param,bean,name,the,name,of,the,bean,to,look,for,param,allow,early,reference,whether,early,references,should,be,created,or,not,return,the,registered,singleton,object,or,code,null,if,none,found;nullable,protected,object,get,singleton,string,bean,name,boolean,allow,early,reference,object,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,is,singleton,currently,in,creation,bean,name,synchronized,this,singleton,objects,singleton,object,this,early,singleton,objects,get,bean,name,if,singleton,object,null,allow,early,reference,object,factory,singleton,factory,this,singleton,factories,get,bean,name,if,singleton,factory,null,singleton,object,singleton,factory,get,object,this,early,singleton,objects,put,bean,name,singleton,object,this,singleton,factories,remove,bean,name,return,singleton,object
DefaultSingletonBeanRegistry -> protected void destroyBean(String beanName, DisposableBean bean);1328020251;Destroy the given bean. Must destroy beans that depend on the given_bean before the bean itself. Should not throw any exceptions._@param beanName the name of the bean_@param bean the bean instance to destroy;protected void destroyBean(String beanName, DisposableBean bean) {_		_		Set<String> dependencies = this.dependentBeanMap.remove(beanName)__		if (dependencies != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieved dependent beans for bean '" + beanName + "': " + dependencies)__			}_			for (String dependentBeanName : dependencies) {_				destroySingleton(dependentBeanName)__			}_		}__		_		if (bean != null) {_			try {_				bean.destroy()__			}_			catch (Throwable ex) {_				logger.error("Destroy method on bean with name '" + beanName + "' threw an exception", ex)__			}_		}__		_		Set<String> containedBeans = this.containedBeanMap.remove(beanName)__		if (containedBeans != null) {_			for (String containedBeanName : containedBeans) {_				destroySingleton(containedBeanName)__			}_		}__		_		synchronized (this.dependentBeanMap) {_			for (Iterator<Map.Entry<String, Set<String>>> it = this.dependentBeanMap.entrySet().iterator()_ it.hasNext()_) {_				Map.Entry<String, Set<String>> entry = it.next()__				Set<String> dependenciesToClean = entry.getValue()__				dependenciesToClean.remove(beanName)__				if (dependenciesToClean.isEmpty()) {_					it.remove()__				}_			}_		}__		_		this.dependenciesForBeanMap.remove(beanName)__	};destroy,the,given,bean,must,destroy,beans,that,depend,on,the,given,bean,before,the,bean,itself,should,not,throw,any,exceptions,param,bean,name,the,name,of,the,bean,param,bean,the,bean,instance,to,destroy;protected,void,destroy,bean,string,bean,name,disposable,bean,bean,set,string,dependencies,this,dependent,bean,map,remove,bean,name,if,dependencies,null,if,logger,is,debug,enabled,logger,debug,retrieved,dependent,beans,for,bean,bean,name,dependencies,for,string,dependent,bean,name,dependencies,destroy,singleton,dependent,bean,name,if,bean,null,try,bean,destroy,catch,throwable,ex,logger,error,destroy,method,on,bean,with,name,bean,name,threw,an,exception,ex,set,string,contained,beans,this,contained,bean,map,remove,bean,name,if,contained,beans,null,for,string,contained,bean,name,contained,beans,destroy,singleton,contained,bean,name,synchronized,this,dependent,bean,map,for,iterator,map,entry,string,set,string,it,this,dependent,bean,map,entry,set,iterator,it,has,next,map,entry,string,set,string,entry,it,next,set,string,dependencies,to,clean,entry,get,value,dependencies,to,clean,remove,bean,name,if,dependencies,to,clean,is,empty,it,remove,this,dependencies,for,bean,map,remove,bean,name
DefaultSingletonBeanRegistry -> protected void destroyBean(String beanName, DisposableBean bean);1349872135;Destroy the given bean. Must destroy beans that depend on the given_bean before the bean itself. Should not throw any exceptions._@param beanName the name of the bean_@param bean the bean instance to destroy;protected void destroyBean(String beanName, DisposableBean bean) {_		_		Set<String> dependencies = this.dependentBeanMap.remove(beanName)__		if (dependencies != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieved dependent beans for bean '" + beanName + "': " + dependencies)__			}_			for (String dependentBeanName : dependencies) {_				destroySingleton(dependentBeanName)__			}_		}__		_		if (bean != null) {_			try {_				bean.destroy()__			}_			catch (Throwable ex) {_				logger.error("Destroy method on bean with name '" + beanName + "' threw an exception", ex)__			}_		}__		_		Set<String> containedBeans = this.containedBeanMap.remove(beanName)__		if (containedBeans != null) {_			for (String containedBeanName : containedBeans) {_				destroySingleton(containedBeanName)__			}_		}__		_		synchronized (this.dependentBeanMap) {_			for (Iterator<Map.Entry<String, Set<String>>> it = this.dependentBeanMap.entrySet().iterator()_ it.hasNext()_) {_				Map.Entry<String, Set<String>> entry = it.next()__				Set<String> dependenciesToClean = entry.getValue()__				dependenciesToClean.remove(beanName)__				if (dependenciesToClean.isEmpty()) {_					it.remove()__				}_			}_		}__		_		this.dependenciesForBeanMap.remove(beanName)__	};destroy,the,given,bean,must,destroy,beans,that,depend,on,the,given,bean,before,the,bean,itself,should,not,throw,any,exceptions,param,bean,name,the,name,of,the,bean,param,bean,the,bean,instance,to,destroy;protected,void,destroy,bean,string,bean,name,disposable,bean,bean,set,string,dependencies,this,dependent,bean,map,remove,bean,name,if,dependencies,null,if,logger,is,debug,enabled,logger,debug,retrieved,dependent,beans,for,bean,bean,name,dependencies,for,string,dependent,bean,name,dependencies,destroy,singleton,dependent,bean,name,if,bean,null,try,bean,destroy,catch,throwable,ex,logger,error,destroy,method,on,bean,with,name,bean,name,threw,an,exception,ex,set,string,contained,beans,this,contained,bean,map,remove,bean,name,if,contained,beans,null,for,string,contained,bean,name,contained,beans,destroy,singleton,contained,bean,name,synchronized,this,dependent,bean,map,for,iterator,map,entry,string,set,string,it,this,dependent,bean,map,entry,set,iterator,it,has,next,map,entry,string,set,string,entry,it,next,set,string,dependencies,to,clean,entry,get,value,dependencies,to,clean,remove,bean,name,if,dependencies,to,clean,is,empty,it,remove,this,dependencies,for,bean,map,remove,bean,name
DefaultSingletonBeanRegistry -> protected void destroyBean(String beanName, DisposableBean bean);1352412938;Destroy the given bean. Must destroy beans that depend on the given_bean before the bean itself. Should not throw any exceptions._@param beanName the name of the bean_@param bean the bean instance to destroy;protected void destroyBean(String beanName, DisposableBean bean) {_		_		Set<String> dependencies = this.dependentBeanMap.remove(beanName)__		if (dependencies != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieved dependent beans for bean '" + beanName + "': " + dependencies)__			}_			for (String dependentBeanName : dependencies) {_				destroySingleton(dependentBeanName)__			}_		}__		_		if (bean != null) {_			try {_				bean.destroy()__			}_			catch (Throwable ex) {_				logger.error("Destroy method on bean with name '" + beanName + "' threw an exception", ex)__			}_		}__		_		Set<String> containedBeans = this.containedBeanMap.remove(beanName)__		if (containedBeans != null) {_			for (String containedBeanName : containedBeans) {_				destroySingleton(containedBeanName)__			}_		}__		_		synchronized (this.dependentBeanMap) {_			for (Iterator<Map.Entry<String, Set<String>>> it = this.dependentBeanMap.entrySet().iterator()_ it.hasNext()_) {_				Map.Entry<String, Set<String>> entry = it.next()__				Set<String> dependenciesToClean = entry.getValue()__				dependenciesToClean.remove(beanName)__				if (dependenciesToClean.isEmpty()) {_					it.remove()__				}_			}_		}__		_		this.dependenciesForBeanMap.remove(beanName)__	};destroy,the,given,bean,must,destroy,beans,that,depend,on,the,given,bean,before,the,bean,itself,should,not,throw,any,exceptions,param,bean,name,the,name,of,the,bean,param,bean,the,bean,instance,to,destroy;protected,void,destroy,bean,string,bean,name,disposable,bean,bean,set,string,dependencies,this,dependent,bean,map,remove,bean,name,if,dependencies,null,if,logger,is,debug,enabled,logger,debug,retrieved,dependent,beans,for,bean,bean,name,dependencies,for,string,dependent,bean,name,dependencies,destroy,singleton,dependent,bean,name,if,bean,null,try,bean,destroy,catch,throwable,ex,logger,error,destroy,method,on,bean,with,name,bean,name,threw,an,exception,ex,set,string,contained,beans,this,contained,bean,map,remove,bean,name,if,contained,beans,null,for,string,contained,bean,name,contained,beans,destroy,singleton,contained,bean,name,synchronized,this,dependent,bean,map,for,iterator,map,entry,string,set,string,it,this,dependent,bean,map,entry,set,iterator,it,has,next,map,entry,string,set,string,entry,it,next,set,string,dependencies,to,clean,entry,get,value,dependencies,to,clean,remove,bean,name,if,dependencies,to,clean,is,empty,it,remove,this,dependencies,for,bean,map,remove,bean,name
DefaultSingletonBeanRegistry -> protected void destroyBean(String beanName, DisposableBean bean);1352418897;Destroy the given bean. Must destroy beans that depend on the given_bean before the bean itself. Should not throw any exceptions._@param beanName the name of the bean_@param bean the bean instance to destroy;protected void destroyBean(String beanName, DisposableBean bean) {_		_		Set<String> dependencies = this.dependentBeanMap.remove(beanName)__		if (dependencies != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieved dependent beans for bean '" + beanName + "': " + dependencies)__			}_			for (String dependentBeanName : dependencies) {_				destroySingleton(dependentBeanName)__			}_		}__		_		if (bean != null) {_			try {_				bean.destroy()__			}_			catch (Throwable ex) {_				logger.error("Destroy method on bean with name '" + beanName + "' threw an exception", ex)__			}_		}__		_		Set<String> containedBeans = this.containedBeanMap.remove(beanName)__		if (containedBeans != null) {_			for (String containedBeanName : containedBeans) {_				destroySingleton(containedBeanName)__			}_		}__		_		synchronized (this.dependentBeanMap) {_			for (Iterator<Map.Entry<String, Set<String>>> it = this.dependentBeanMap.entrySet().iterator()_ it.hasNext()_) {_				Map.Entry<String, Set<String>> entry = it.next()__				Set<String> dependenciesToClean = entry.getValue()__				dependenciesToClean.remove(beanName)__				if (dependenciesToClean.isEmpty()) {_					it.remove()__				}_			}_		}__		_		this.dependenciesForBeanMap.remove(beanName)__	};destroy,the,given,bean,must,destroy,beans,that,depend,on,the,given,bean,before,the,bean,itself,should,not,throw,any,exceptions,param,bean,name,the,name,of,the,bean,param,bean,the,bean,instance,to,destroy;protected,void,destroy,bean,string,bean,name,disposable,bean,bean,set,string,dependencies,this,dependent,bean,map,remove,bean,name,if,dependencies,null,if,logger,is,debug,enabled,logger,debug,retrieved,dependent,beans,for,bean,bean,name,dependencies,for,string,dependent,bean,name,dependencies,destroy,singleton,dependent,bean,name,if,bean,null,try,bean,destroy,catch,throwable,ex,logger,error,destroy,method,on,bean,with,name,bean,name,threw,an,exception,ex,set,string,contained,beans,this,contained,bean,map,remove,bean,name,if,contained,beans,null,for,string,contained,bean,name,contained,beans,destroy,singleton,contained,bean,name,synchronized,this,dependent,bean,map,for,iterator,map,entry,string,set,string,it,this,dependent,bean,map,entry,set,iterator,it,has,next,map,entry,string,set,string,entry,it,next,set,string,dependencies,to,clean,entry,get,value,dependencies,to,clean,remove,bean,name,if,dependencies,to,clean,is,empty,it,remove,this,dependencies,for,bean,map,remove,bean,name
DefaultSingletonBeanRegistry -> protected void destroyBean(String beanName, DisposableBean bean);1353882772;Destroy the given bean. Must destroy beans that depend on the given_bean before the bean itself. Should not throw any exceptions._@param beanName the name of the bean_@param bean the bean instance to destroy;protected void destroyBean(String beanName, DisposableBean bean) {_		_		Set<String> dependencies = this.dependentBeanMap.remove(beanName)__		if (dependencies != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieved dependent beans for bean '" + beanName + "': " + dependencies)__			}_			for (String dependentBeanName : dependencies) {_				destroySingleton(dependentBeanName)__			}_		}__		_		if (bean != null) {_			try {_				bean.destroy()__			}_			catch (Throwable ex) {_				logger.error("Destroy method on bean with name '" + beanName + "' threw an exception", ex)__			}_		}__		_		Set<String> containedBeans = this.containedBeanMap.remove(beanName)__		if (containedBeans != null) {_			for (String containedBeanName : containedBeans) {_				destroySingleton(containedBeanName)__			}_		}__		_		synchronized (this.dependentBeanMap) {_			for (Iterator<Map.Entry<String, Set<String>>> it = this.dependentBeanMap.entrySet().iterator()_ it.hasNext()_) {_				Map.Entry<String, Set<String>> entry = it.next()__				Set<String> dependenciesToClean = entry.getValue()__				dependenciesToClean.remove(beanName)__				if (dependenciesToClean.isEmpty()) {_					it.remove()__				}_			}_		}__		_		this.dependenciesForBeanMap.remove(beanName)__	};destroy,the,given,bean,must,destroy,beans,that,depend,on,the,given,bean,before,the,bean,itself,should,not,throw,any,exceptions,param,bean,name,the,name,of,the,bean,param,bean,the,bean,instance,to,destroy;protected,void,destroy,bean,string,bean,name,disposable,bean,bean,set,string,dependencies,this,dependent,bean,map,remove,bean,name,if,dependencies,null,if,logger,is,debug,enabled,logger,debug,retrieved,dependent,beans,for,bean,bean,name,dependencies,for,string,dependent,bean,name,dependencies,destroy,singleton,dependent,bean,name,if,bean,null,try,bean,destroy,catch,throwable,ex,logger,error,destroy,method,on,bean,with,name,bean,name,threw,an,exception,ex,set,string,contained,beans,this,contained,bean,map,remove,bean,name,if,contained,beans,null,for,string,contained,bean,name,contained,beans,destroy,singleton,contained,bean,name,synchronized,this,dependent,bean,map,for,iterator,map,entry,string,set,string,it,this,dependent,bean,map,entry,set,iterator,it,has,next,map,entry,string,set,string,entry,it,next,set,string,dependencies,to,clean,entry,get,value,dependencies,to,clean,remove,bean,name,if,dependencies,to,clean,is,empty,it,remove,this,dependencies,for,bean,map,remove,bean,name
DefaultSingletonBeanRegistry -> protected void destroyBean(String beanName, DisposableBean bean);1355352386;Destroy the given bean. Must destroy beans that depend on the given_bean before the bean itself. Should not throw any exceptions._@param beanName the name of the bean_@param bean the bean instance to destroy;protected void destroyBean(String beanName, DisposableBean bean) {_		_		Set<String> dependencies = this.dependentBeanMap.remove(beanName)__		if (dependencies != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieved dependent beans for bean '" + beanName + "': " + dependencies)__			}_			for (String dependentBeanName : dependencies) {_				destroySingleton(dependentBeanName)__			}_		}__		_		if (bean != null) {_			try {_				bean.destroy()__			}_			catch (Throwable ex) {_				logger.error("Destroy method on bean with name '" + beanName + "' threw an exception", ex)__			}_		}__		_		Set<String> containedBeans = this.containedBeanMap.remove(beanName)__		if (containedBeans != null) {_			for (String containedBeanName : containedBeans) {_				destroySingleton(containedBeanName)__			}_		}__		_		synchronized (this.dependentBeanMap) {_			for (Iterator<Map.Entry<String, Set<String>>> it = this.dependentBeanMap.entrySet().iterator()_ it.hasNext()_) {_				Map.Entry<String, Set<String>> entry = it.next()__				Set<String> dependenciesToClean = entry.getValue()__				dependenciesToClean.remove(beanName)__				if (dependenciesToClean.isEmpty()) {_					it.remove()__				}_			}_		}__		_		this.dependenciesForBeanMap.remove(beanName)__	};destroy,the,given,bean,must,destroy,beans,that,depend,on,the,given,bean,before,the,bean,itself,should,not,throw,any,exceptions,param,bean,name,the,name,of,the,bean,param,bean,the,bean,instance,to,destroy;protected,void,destroy,bean,string,bean,name,disposable,bean,bean,set,string,dependencies,this,dependent,bean,map,remove,bean,name,if,dependencies,null,if,logger,is,debug,enabled,logger,debug,retrieved,dependent,beans,for,bean,bean,name,dependencies,for,string,dependent,bean,name,dependencies,destroy,singleton,dependent,bean,name,if,bean,null,try,bean,destroy,catch,throwable,ex,logger,error,destroy,method,on,bean,with,name,bean,name,threw,an,exception,ex,set,string,contained,beans,this,contained,bean,map,remove,bean,name,if,contained,beans,null,for,string,contained,bean,name,contained,beans,destroy,singleton,contained,bean,name,synchronized,this,dependent,bean,map,for,iterator,map,entry,string,set,string,it,this,dependent,bean,map,entry,set,iterator,it,has,next,map,entry,string,set,string,entry,it,next,set,string,dependencies,to,clean,entry,get,value,dependencies,to,clean,remove,bean,name,if,dependencies,to,clean,is,empty,it,remove,this,dependencies,for,bean,map,remove,bean,name
DefaultSingletonBeanRegistry -> protected void destroyBean(String beanName, DisposableBean bean);1356735495;Destroy the given bean. Must destroy beans that depend on the given_bean before the bean itself. Should not throw any exceptions._@param beanName the name of the bean_@param bean the bean instance to destroy;protected void destroyBean(String beanName, DisposableBean bean) {_		_		Set<String> dependencies = this.dependentBeanMap.remove(beanName)__		if (dependencies != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieved dependent beans for bean '" + beanName + "': " + dependencies)__			}_			for (String dependentBeanName : dependencies) {_				destroySingleton(dependentBeanName)__			}_		}__		_		if (bean != null) {_			try {_				bean.destroy()__			}_			catch (Throwable ex) {_				logger.error("Destroy method on bean with name '" + beanName + "' threw an exception", ex)__			}_		}__		_		Set<String> containedBeans = this.containedBeanMap.remove(beanName)__		if (containedBeans != null) {_			for (String containedBeanName : containedBeans) {_				destroySingleton(containedBeanName)__			}_		}__		_		synchronized (this.dependentBeanMap) {_			for (Iterator<Map.Entry<String, Set<String>>> it = this.dependentBeanMap.entrySet().iterator()_ it.hasNext()_) {_				Map.Entry<String, Set<String>> entry = it.next()__				Set<String> dependenciesToClean = entry.getValue()__				dependenciesToClean.remove(beanName)__				if (dependenciesToClean.isEmpty()) {_					it.remove()__				}_			}_		}__		_		this.dependenciesForBeanMap.remove(beanName)__	};destroy,the,given,bean,must,destroy,beans,that,depend,on,the,given,bean,before,the,bean,itself,should,not,throw,any,exceptions,param,bean,name,the,name,of,the,bean,param,bean,the,bean,instance,to,destroy;protected,void,destroy,bean,string,bean,name,disposable,bean,bean,set,string,dependencies,this,dependent,bean,map,remove,bean,name,if,dependencies,null,if,logger,is,debug,enabled,logger,debug,retrieved,dependent,beans,for,bean,bean,name,dependencies,for,string,dependent,bean,name,dependencies,destroy,singleton,dependent,bean,name,if,bean,null,try,bean,destroy,catch,throwable,ex,logger,error,destroy,method,on,bean,with,name,bean,name,threw,an,exception,ex,set,string,contained,beans,this,contained,bean,map,remove,bean,name,if,contained,beans,null,for,string,contained,bean,name,contained,beans,destroy,singleton,contained,bean,name,synchronized,this,dependent,bean,map,for,iterator,map,entry,string,set,string,it,this,dependent,bean,map,entry,set,iterator,it,has,next,map,entry,string,set,string,entry,it,next,set,string,dependencies,to,clean,entry,get,value,dependencies,to,clean,remove,bean,name,if,dependencies,to,clean,is,empty,it,remove,this,dependencies,for,bean,map,remove,bean,name
DefaultSingletonBeanRegistry -> protected void destroyBean(String beanName, DisposableBean bean);1357119239;Destroy the given bean. Must destroy beans that depend on the given_bean before the bean itself. Should not throw any exceptions._@param beanName the name of the bean_@param bean the bean instance to destroy;protected void destroyBean(String beanName, DisposableBean bean) {_		_		Set<String> dependencies = this.dependentBeanMap.remove(beanName)__		if (dependencies != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieved dependent beans for bean '" + beanName + "': " + dependencies)__			}_			for (String dependentBeanName : dependencies) {_				destroySingleton(dependentBeanName)__			}_		}__		_		if (bean != null) {_			try {_				bean.destroy()__			}_			catch (Throwable ex) {_				logger.error("Destroy method on bean with name '" + beanName + "' threw an exception", ex)__			}_		}__		_		Set<String> containedBeans = this.containedBeanMap.remove(beanName)__		if (containedBeans != null) {_			for (String containedBeanName : containedBeans) {_				destroySingleton(containedBeanName)__			}_		}__		_		synchronized (this.dependentBeanMap) {_			for (Iterator<Map.Entry<String, Set<String>>> it = this.dependentBeanMap.entrySet().iterator()_ it.hasNext()_) {_				Map.Entry<String, Set<String>> entry = it.next()__				Set<String> dependenciesToClean = entry.getValue()__				dependenciesToClean.remove(beanName)__				if (dependenciesToClean.isEmpty()) {_					it.remove()__				}_			}_		}__		_		this.dependenciesForBeanMap.remove(beanName)__	};destroy,the,given,bean,must,destroy,beans,that,depend,on,the,given,bean,before,the,bean,itself,should,not,throw,any,exceptions,param,bean,name,the,name,of,the,bean,param,bean,the,bean,instance,to,destroy;protected,void,destroy,bean,string,bean,name,disposable,bean,bean,set,string,dependencies,this,dependent,bean,map,remove,bean,name,if,dependencies,null,if,logger,is,debug,enabled,logger,debug,retrieved,dependent,beans,for,bean,bean,name,dependencies,for,string,dependent,bean,name,dependencies,destroy,singleton,dependent,bean,name,if,bean,null,try,bean,destroy,catch,throwable,ex,logger,error,destroy,method,on,bean,with,name,bean,name,threw,an,exception,ex,set,string,contained,beans,this,contained,bean,map,remove,bean,name,if,contained,beans,null,for,string,contained,bean,name,contained,beans,destroy,singleton,contained,bean,name,synchronized,this,dependent,bean,map,for,iterator,map,entry,string,set,string,it,this,dependent,bean,map,entry,set,iterator,it,has,next,map,entry,string,set,string,entry,it,next,set,string,dependencies,to,clean,entry,get,value,dependencies,to,clean,remove,bean,name,if,dependencies,to,clean,is,empty,it,remove,this,dependencies,for,bean,map,remove,bean,name
DefaultSingletonBeanRegistry -> protected void destroyBean(String beanName, DisposableBean bean);1364505266;Destroy the given bean. Must destroy beans that depend on the given_bean before the bean itself. Should not throw any exceptions._@param beanName the name of the bean_@param bean the bean instance to destroy;protected void destroyBean(String beanName, DisposableBean bean) {_		_		Set<String> dependencies = this.dependentBeanMap.remove(beanName)__		if (dependencies != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieved dependent beans for bean '" + beanName + "': " + dependencies)__			}_			for (String dependentBeanName : dependencies) {_				destroySingleton(dependentBeanName)__			}_		}__		_		if (bean != null) {_			try {_				bean.destroy()__			}_			catch (Throwable ex) {_				logger.error("Destroy method on bean with name '" + beanName + "' threw an exception", ex)__			}_		}__		_		Set<String> containedBeans = this.containedBeanMap.remove(beanName)__		if (containedBeans != null) {_			for (String containedBeanName : containedBeans) {_				destroySingleton(containedBeanName)__			}_		}__		_		synchronized (this.dependentBeanMap) {_			for (Iterator<Map.Entry<String, Set<String>>> it = this.dependentBeanMap.entrySet().iterator()_ it.hasNext()_) {_				Map.Entry<String, Set<String>> entry = it.next()__				Set<String> dependenciesToClean = entry.getValue()__				dependenciesToClean.remove(beanName)__				if (dependenciesToClean.isEmpty()) {_					it.remove()__				}_			}_		}__		_		this.dependenciesForBeanMap.remove(beanName)__	};destroy,the,given,bean,must,destroy,beans,that,depend,on,the,given,bean,before,the,bean,itself,should,not,throw,any,exceptions,param,bean,name,the,name,of,the,bean,param,bean,the,bean,instance,to,destroy;protected,void,destroy,bean,string,bean,name,disposable,bean,bean,set,string,dependencies,this,dependent,bean,map,remove,bean,name,if,dependencies,null,if,logger,is,debug,enabled,logger,debug,retrieved,dependent,beans,for,bean,bean,name,dependencies,for,string,dependent,bean,name,dependencies,destroy,singleton,dependent,bean,name,if,bean,null,try,bean,destroy,catch,throwable,ex,logger,error,destroy,method,on,bean,with,name,bean,name,threw,an,exception,ex,set,string,contained,beans,this,contained,bean,map,remove,bean,name,if,contained,beans,null,for,string,contained,bean,name,contained,beans,destroy,singleton,contained,bean,name,synchronized,this,dependent,bean,map,for,iterator,map,entry,string,set,string,it,this,dependent,bean,map,entry,set,iterator,it,has,next,map,entry,string,set,string,entry,it,next,set,string,dependencies,to,clean,entry,get,value,dependencies,to,clean,remove,bean,name,if,dependencies,to,clean,is,empty,it,remove,this,dependencies,for,bean,map,remove,bean,name
DefaultSingletonBeanRegistry -> protected void destroyBean(String beanName, DisposableBean bean);1368482696;Destroy the given bean. Must destroy beans that depend on the given_bean before the bean itself. Should not throw any exceptions._@param beanName the name of the bean_@param bean the bean instance to destroy;protected void destroyBean(String beanName, DisposableBean bean) {_		_		Set<String> dependencies = this.dependentBeanMap.remove(beanName)__		if (dependencies != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieved dependent beans for bean '" + beanName + "': " + dependencies)__			}_			for (String dependentBeanName : dependencies) {_				destroySingleton(dependentBeanName)__			}_		}__		_		if (bean != null) {_			try {_				bean.destroy()__			}_			catch (Throwable ex) {_				logger.error("Destroy method on bean with name '" + beanName + "' threw an exception", ex)__			}_		}__		_		Set<String> containedBeans = this.containedBeanMap.remove(beanName)__		if (containedBeans != null) {_			for (String containedBeanName : containedBeans) {_				destroySingleton(containedBeanName)__			}_		}__		_		synchronized (this.dependentBeanMap) {_			for (Iterator<Map.Entry<String, Set<String>>> it = this.dependentBeanMap.entrySet().iterator()_ it.hasNext()_) {_				Map.Entry<String, Set<String>> entry = it.next()__				Set<String> dependenciesToClean = entry.getValue()__				dependenciesToClean.remove(beanName)__				if (dependenciesToClean.isEmpty()) {_					it.remove()__				}_			}_		}__		_		this.dependenciesForBeanMap.remove(beanName)__	};destroy,the,given,bean,must,destroy,beans,that,depend,on,the,given,bean,before,the,bean,itself,should,not,throw,any,exceptions,param,bean,name,the,name,of,the,bean,param,bean,the,bean,instance,to,destroy;protected,void,destroy,bean,string,bean,name,disposable,bean,bean,set,string,dependencies,this,dependent,bean,map,remove,bean,name,if,dependencies,null,if,logger,is,debug,enabled,logger,debug,retrieved,dependent,beans,for,bean,bean,name,dependencies,for,string,dependent,bean,name,dependencies,destroy,singleton,dependent,bean,name,if,bean,null,try,bean,destroy,catch,throwable,ex,logger,error,destroy,method,on,bean,with,name,bean,name,threw,an,exception,ex,set,string,contained,beans,this,contained,bean,map,remove,bean,name,if,contained,beans,null,for,string,contained,bean,name,contained,beans,destroy,singleton,contained,bean,name,synchronized,this,dependent,bean,map,for,iterator,map,entry,string,set,string,it,this,dependent,bean,map,entry,set,iterator,it,has,next,map,entry,string,set,string,entry,it,next,set,string,dependencies,to,clean,entry,get,value,dependencies,to,clean,remove,bean,name,if,dependencies,to,clean,is,empty,it,remove,this,dependencies,for,bean,map,remove,bean,name
DefaultSingletonBeanRegistry -> protected void destroyBean(String beanName, DisposableBean bean);1374698947;Destroy the given bean. Must destroy beans that depend on the given_bean before the bean itself. Should not throw any exceptions._@param beanName the name of the bean_@param bean the bean instance to destroy;protected void destroyBean(String beanName, DisposableBean bean) {_		_		Set<String> dependencies = this.dependentBeanMap.remove(beanName)__		if (dependencies != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieved dependent beans for bean '" + beanName + "': " + dependencies)__			}_			for (String dependentBeanName : dependencies) {_				destroySingleton(dependentBeanName)__			}_		}__		_		if (bean != null) {_			try {_				bean.destroy()__			}_			catch (Throwable ex) {_				logger.error("Destroy method on bean with name '" + beanName + "' threw an exception", ex)__			}_		}__		_		Set<String> containedBeans = this.containedBeanMap.remove(beanName)__		if (containedBeans != null) {_			for (String containedBeanName : containedBeans) {_				destroySingleton(containedBeanName)__			}_		}__		_		synchronized (this.dependentBeanMap) {_			for (Iterator<Map.Entry<String, Set<String>>> it = this.dependentBeanMap.entrySet().iterator()_ it.hasNext()_) {_				Map.Entry<String, Set<String>> entry = it.next()__				Set<String> dependenciesToClean = entry.getValue()__				dependenciesToClean.remove(beanName)__				if (dependenciesToClean.isEmpty()) {_					it.remove()__				}_			}_		}__		_		this.dependenciesForBeanMap.remove(beanName)__	};destroy,the,given,bean,must,destroy,beans,that,depend,on,the,given,bean,before,the,bean,itself,should,not,throw,any,exceptions,param,bean,name,the,name,of,the,bean,param,bean,the,bean,instance,to,destroy;protected,void,destroy,bean,string,bean,name,disposable,bean,bean,set,string,dependencies,this,dependent,bean,map,remove,bean,name,if,dependencies,null,if,logger,is,debug,enabled,logger,debug,retrieved,dependent,beans,for,bean,bean,name,dependencies,for,string,dependent,bean,name,dependencies,destroy,singleton,dependent,bean,name,if,bean,null,try,bean,destroy,catch,throwable,ex,logger,error,destroy,method,on,bean,with,name,bean,name,threw,an,exception,ex,set,string,contained,beans,this,contained,bean,map,remove,bean,name,if,contained,beans,null,for,string,contained,bean,name,contained,beans,destroy,singleton,contained,bean,name,synchronized,this,dependent,bean,map,for,iterator,map,entry,string,set,string,it,this,dependent,bean,map,entry,set,iterator,it,has,next,map,entry,string,set,string,entry,it,next,set,string,dependencies,to,clean,entry,get,value,dependencies,to,clean,remove,bean,name,if,dependencies,to,clean,is,empty,it,remove,this,dependencies,for,bean,map,remove,bean,name
DefaultSingletonBeanRegistry -> protected void destroyBean(String beanName, DisposableBean bean);1385412762;Destroy the given bean. Must destroy beans that depend on the given_bean before the bean itself. Should not throw any exceptions._@param beanName the name of the bean_@param bean the bean instance to destroy;protected void destroyBean(String beanName, DisposableBean bean) {_		_		Set<String> dependencies = this.dependentBeanMap.remove(beanName)__		if (dependencies != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieved dependent beans for bean '" + beanName + "': " + dependencies)__			}_			for (String dependentBeanName : dependencies) {_				destroySingleton(dependentBeanName)__			}_		}__		_		if (bean != null) {_			try {_				bean.destroy()__			}_			catch (Throwable ex) {_				logger.error("Destroy method on bean with name '" + beanName + "' threw an exception", ex)__			}_		}__		_		Set<String> containedBeans = this.containedBeanMap.remove(beanName)__		if (containedBeans != null) {_			for (String containedBeanName : containedBeans) {_				destroySingleton(containedBeanName)__			}_		}__		_		synchronized (this.dependentBeanMap) {_			for (Iterator<Map.Entry<String, Set<String>>> it = this.dependentBeanMap.entrySet().iterator()_ it.hasNext()_) {_				Map.Entry<String, Set<String>> entry = it.next()__				Set<String> dependenciesToClean = entry.getValue()__				dependenciesToClean.remove(beanName)__				if (dependenciesToClean.isEmpty()) {_					it.remove()__				}_			}_		}__		_		this.dependenciesForBeanMap.remove(beanName)__	};destroy,the,given,bean,must,destroy,beans,that,depend,on,the,given,bean,before,the,bean,itself,should,not,throw,any,exceptions,param,bean,name,the,name,of,the,bean,param,bean,the,bean,instance,to,destroy;protected,void,destroy,bean,string,bean,name,disposable,bean,bean,set,string,dependencies,this,dependent,bean,map,remove,bean,name,if,dependencies,null,if,logger,is,debug,enabled,logger,debug,retrieved,dependent,beans,for,bean,bean,name,dependencies,for,string,dependent,bean,name,dependencies,destroy,singleton,dependent,bean,name,if,bean,null,try,bean,destroy,catch,throwable,ex,logger,error,destroy,method,on,bean,with,name,bean,name,threw,an,exception,ex,set,string,contained,beans,this,contained,bean,map,remove,bean,name,if,contained,beans,null,for,string,contained,bean,name,contained,beans,destroy,singleton,contained,bean,name,synchronized,this,dependent,bean,map,for,iterator,map,entry,string,set,string,it,this,dependent,bean,map,entry,set,iterator,it,has,next,map,entry,string,set,string,entry,it,next,set,string,dependencies,to,clean,entry,get,value,dependencies,to,clean,remove,bean,name,if,dependencies,to,clean,is,empty,it,remove,this,dependencies,for,bean,map,remove,bean,name
DefaultSingletonBeanRegistry -> protected void destroyBean(String beanName, DisposableBean bean);1385984377;Destroy the given bean. Must destroy beans that depend on the given_bean before the bean itself. Should not throw any exceptions._@param beanName the name of the bean_@param bean the bean instance to destroy;protected void destroyBean(String beanName, DisposableBean bean) {_		_		Set<String> dependencies = this.dependentBeanMap.remove(beanName)__		if (dependencies != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieved dependent beans for bean '" + beanName + "': " + dependencies)__			}_			for (String dependentBeanName : dependencies) {_				destroySingleton(dependentBeanName)__			}_		}__		_		if (bean != null) {_			try {_				bean.destroy()__			}_			catch (Throwable ex) {_				logger.error("Destroy method on bean with name '" + beanName + "' threw an exception", ex)__			}_		}__		_		Set<String> containedBeans = this.containedBeanMap.remove(beanName)__		if (containedBeans != null) {_			for (String containedBeanName : containedBeans) {_				destroySingleton(containedBeanName)__			}_		}__		_		synchronized (this.dependentBeanMap) {_			for (Iterator<Map.Entry<String, Set<String>>> it = this.dependentBeanMap.entrySet().iterator()_ it.hasNext()_) {_				Map.Entry<String, Set<String>> entry = it.next()__				Set<String> dependenciesToClean = entry.getValue()__				dependenciesToClean.remove(beanName)__				if (dependenciesToClean.isEmpty()) {_					it.remove()__				}_			}_		}__		_		this.dependenciesForBeanMap.remove(beanName)__	};destroy,the,given,bean,must,destroy,beans,that,depend,on,the,given,bean,before,the,bean,itself,should,not,throw,any,exceptions,param,bean,name,the,name,of,the,bean,param,bean,the,bean,instance,to,destroy;protected,void,destroy,bean,string,bean,name,disposable,bean,bean,set,string,dependencies,this,dependent,bean,map,remove,bean,name,if,dependencies,null,if,logger,is,debug,enabled,logger,debug,retrieved,dependent,beans,for,bean,bean,name,dependencies,for,string,dependent,bean,name,dependencies,destroy,singleton,dependent,bean,name,if,bean,null,try,bean,destroy,catch,throwable,ex,logger,error,destroy,method,on,bean,with,name,bean,name,threw,an,exception,ex,set,string,contained,beans,this,contained,bean,map,remove,bean,name,if,contained,beans,null,for,string,contained,bean,name,contained,beans,destroy,singleton,contained,bean,name,synchronized,this,dependent,bean,map,for,iterator,map,entry,string,set,string,it,this,dependent,bean,map,entry,set,iterator,it,has,next,map,entry,string,set,string,entry,it,next,set,string,dependencies,to,clean,entry,get,value,dependencies,to,clean,remove,bean,name,if,dependencies,to,clean,is,empty,it,remove,this,dependencies,for,bean,map,remove,bean,name
DefaultSingletonBeanRegistry -> protected void destroyBean(String beanName, DisposableBean bean);1405430015;Destroy the given bean. Must destroy beans that depend on the given_bean before the bean itself. Should not throw any exceptions._@param beanName the name of the bean_@param bean the bean instance to destroy;protected void destroyBean(String beanName, DisposableBean bean) {_		_		Set<String> dependencies = this.dependentBeanMap.remove(beanName)__		if (dependencies != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieved dependent beans for bean '" + beanName + "': " + dependencies)__			}_			for (String dependentBeanName : dependencies) {_				destroySingleton(dependentBeanName)__			}_		}__		_		if (bean != null) {_			try {_				bean.destroy()__			}_			catch (Throwable ex) {_				logger.error("Destroy method on bean with name '" + beanName + "' threw an exception", ex)__			}_		}__		_		Set<String> containedBeans = this.containedBeanMap.remove(beanName)__		if (containedBeans != null) {_			for (String containedBeanName : containedBeans) {_				destroySingleton(containedBeanName)__			}_		}__		_		synchronized (this.dependentBeanMap) {_			for (Iterator<Map.Entry<String, Set<String>>> it = this.dependentBeanMap.entrySet().iterator()_ it.hasNext()_) {_				Map.Entry<String, Set<String>> entry = it.next()__				Set<String> dependenciesToClean = entry.getValue()__				dependenciesToClean.remove(beanName)__				if (dependenciesToClean.isEmpty()) {_					it.remove()__				}_			}_		}__		_		this.dependenciesForBeanMap.remove(beanName)__	};destroy,the,given,bean,must,destroy,beans,that,depend,on,the,given,bean,before,the,bean,itself,should,not,throw,any,exceptions,param,bean,name,the,name,of,the,bean,param,bean,the,bean,instance,to,destroy;protected,void,destroy,bean,string,bean,name,disposable,bean,bean,set,string,dependencies,this,dependent,bean,map,remove,bean,name,if,dependencies,null,if,logger,is,debug,enabled,logger,debug,retrieved,dependent,beans,for,bean,bean,name,dependencies,for,string,dependent,bean,name,dependencies,destroy,singleton,dependent,bean,name,if,bean,null,try,bean,destroy,catch,throwable,ex,logger,error,destroy,method,on,bean,with,name,bean,name,threw,an,exception,ex,set,string,contained,beans,this,contained,bean,map,remove,bean,name,if,contained,beans,null,for,string,contained,bean,name,contained,beans,destroy,singleton,contained,bean,name,synchronized,this,dependent,bean,map,for,iterator,map,entry,string,set,string,it,this,dependent,bean,map,entry,set,iterator,it,has,next,map,entry,string,set,string,entry,it,next,set,string,dependencies,to,clean,entry,get,value,dependencies,to,clean,remove,bean,name,if,dependencies,to,clean,is,empty,it,remove,this,dependencies,for,bean,map,remove,bean,name
DefaultSingletonBeanRegistry -> protected void destroyBean(String beanName, DisposableBean bean);1408528936;Destroy the given bean. Must destroy beans that depend on the given_bean before the bean itself. Should not throw any exceptions._@param beanName the name of the bean_@param bean the bean instance to destroy;protected void destroyBean(String beanName, DisposableBean bean) {_		_		Set<String> dependencies = this.dependentBeanMap.remove(beanName)__		if (dependencies != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieved dependent beans for bean '" + beanName + "': " + dependencies)__			}_			for (String dependentBeanName : dependencies) {_				destroySingleton(dependentBeanName)__			}_		}__		_		if (bean != null) {_			try {_				bean.destroy()__			}_			catch (Throwable ex) {_				logger.error("Destroy method on bean with name '" + beanName + "' threw an exception", ex)__			}_		}__		_		Set<String> containedBeans = this.containedBeanMap.remove(beanName)__		if (containedBeans != null) {_			for (String containedBeanName : containedBeans) {_				destroySingleton(containedBeanName)__			}_		}__		_		synchronized (this.dependentBeanMap) {_			for (Iterator<Map.Entry<String, Set<String>>> it = this.dependentBeanMap.entrySet().iterator()_ it.hasNext()_) {_				Map.Entry<String, Set<String>> entry = it.next()__				Set<String> dependenciesToClean = entry.getValue()__				dependenciesToClean.remove(beanName)__				if (dependenciesToClean.isEmpty()) {_					it.remove()__				}_			}_		}__		_		this.dependenciesForBeanMap.remove(beanName)__	};destroy,the,given,bean,must,destroy,beans,that,depend,on,the,given,bean,before,the,bean,itself,should,not,throw,any,exceptions,param,bean,name,the,name,of,the,bean,param,bean,the,bean,instance,to,destroy;protected,void,destroy,bean,string,bean,name,disposable,bean,bean,set,string,dependencies,this,dependent,bean,map,remove,bean,name,if,dependencies,null,if,logger,is,debug,enabled,logger,debug,retrieved,dependent,beans,for,bean,bean,name,dependencies,for,string,dependent,bean,name,dependencies,destroy,singleton,dependent,bean,name,if,bean,null,try,bean,destroy,catch,throwable,ex,logger,error,destroy,method,on,bean,with,name,bean,name,threw,an,exception,ex,set,string,contained,beans,this,contained,bean,map,remove,bean,name,if,contained,beans,null,for,string,contained,bean,name,contained,beans,destroy,singleton,contained,bean,name,synchronized,this,dependent,bean,map,for,iterator,map,entry,string,set,string,it,this,dependent,bean,map,entry,set,iterator,it,has,next,map,entry,string,set,string,entry,it,next,set,string,dependencies,to,clean,entry,get,value,dependencies,to,clean,remove,bean,name,if,dependencies,to,clean,is,empty,it,remove,this,dependencies,for,bean,map,remove,bean,name
DefaultSingletonBeanRegistry -> protected void destroyBean(String beanName, DisposableBean bean);1408624154;Destroy the given bean. Must destroy beans that depend on the given_bean before the bean itself. Should not throw any exceptions._@param beanName the name of the bean_@param bean the bean instance to destroy;protected void destroyBean(String beanName, DisposableBean bean) {_		_		Set<String> dependencies = this.dependentBeanMap.remove(beanName)__		if (dependencies != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieved dependent beans for bean '" + beanName + "': " + dependencies)__			}_			for (String dependentBeanName : dependencies) {_				destroySingleton(dependentBeanName)__			}_		}__		_		if (bean != null) {_			try {_				bean.destroy()__			}_			catch (Throwable ex) {_				logger.error("Destroy method on bean with name '" + beanName + "' threw an exception", ex)__			}_		}__		_		Set<String> containedBeans = this.containedBeanMap.remove(beanName)__		if (containedBeans != null) {_			for (String containedBeanName : containedBeans) {_				destroySingleton(containedBeanName)__			}_		}__		_		synchronized (this.dependentBeanMap) {_			for (Iterator<Map.Entry<String, Set<String>>> it = this.dependentBeanMap.entrySet().iterator()_ it.hasNext()_) {_				Map.Entry<String, Set<String>> entry = it.next()__				Set<String> dependenciesToClean = entry.getValue()__				dependenciesToClean.remove(beanName)__				if (dependenciesToClean.isEmpty()) {_					it.remove()__				}_			}_		}__		_		this.dependenciesForBeanMap.remove(beanName)__	};destroy,the,given,bean,must,destroy,beans,that,depend,on,the,given,bean,before,the,bean,itself,should,not,throw,any,exceptions,param,bean,name,the,name,of,the,bean,param,bean,the,bean,instance,to,destroy;protected,void,destroy,bean,string,bean,name,disposable,bean,bean,set,string,dependencies,this,dependent,bean,map,remove,bean,name,if,dependencies,null,if,logger,is,debug,enabled,logger,debug,retrieved,dependent,beans,for,bean,bean,name,dependencies,for,string,dependent,bean,name,dependencies,destroy,singleton,dependent,bean,name,if,bean,null,try,bean,destroy,catch,throwable,ex,logger,error,destroy,method,on,bean,with,name,bean,name,threw,an,exception,ex,set,string,contained,beans,this,contained,bean,map,remove,bean,name,if,contained,beans,null,for,string,contained,bean,name,contained,beans,destroy,singleton,contained,bean,name,synchronized,this,dependent,bean,map,for,iterator,map,entry,string,set,string,it,this,dependent,bean,map,entry,set,iterator,it,has,next,map,entry,string,set,string,entry,it,next,set,string,dependencies,to,clean,entry,get,value,dependencies,to,clean,remove,bean,name,if,dependencies,to,clean,is,empty,it,remove,this,dependencies,for,bean,map,remove,bean,name
DefaultSingletonBeanRegistry -> protected void destroyBean(String beanName, DisposableBean bean);1409688815;Destroy the given bean. Must destroy beans that depend on the given_bean before the bean itself. Should not throw any exceptions._@param beanName the name of the bean_@param bean the bean instance to destroy;protected void destroyBean(String beanName, DisposableBean bean) {_		_		Set<String> dependencies = this.dependentBeanMap.remove(beanName)__		if (dependencies != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieved dependent beans for bean '" + beanName + "': " + dependencies)__			}_			for (String dependentBeanName : dependencies) {_				destroySingleton(dependentBeanName)__			}_		}__		_		if (bean != null) {_			try {_				bean.destroy()__			}_			catch (Throwable ex) {_				logger.error("Destroy method on bean with name '" + beanName + "' threw an exception", ex)__			}_		}__		_		Set<String> containedBeans = this.containedBeanMap.remove(beanName)__		if (containedBeans != null) {_			for (String containedBeanName : containedBeans) {_				destroySingleton(containedBeanName)__			}_		}__		_		synchronized (this.dependentBeanMap) {_			for (Iterator<Map.Entry<String, Set<String>>> it = this.dependentBeanMap.entrySet().iterator()_ it.hasNext()_) {_				Map.Entry<String, Set<String>> entry = it.next()__				Set<String> dependenciesToClean = entry.getValue()__				dependenciesToClean.remove(beanName)__				if (dependenciesToClean.isEmpty()) {_					it.remove()__				}_			}_		}__		_		this.dependenciesForBeanMap.remove(beanName)__	};destroy,the,given,bean,must,destroy,beans,that,depend,on,the,given,bean,before,the,bean,itself,should,not,throw,any,exceptions,param,bean,name,the,name,of,the,bean,param,bean,the,bean,instance,to,destroy;protected,void,destroy,bean,string,bean,name,disposable,bean,bean,set,string,dependencies,this,dependent,bean,map,remove,bean,name,if,dependencies,null,if,logger,is,debug,enabled,logger,debug,retrieved,dependent,beans,for,bean,bean,name,dependencies,for,string,dependent,bean,name,dependencies,destroy,singleton,dependent,bean,name,if,bean,null,try,bean,destroy,catch,throwable,ex,logger,error,destroy,method,on,bean,with,name,bean,name,threw,an,exception,ex,set,string,contained,beans,this,contained,bean,map,remove,bean,name,if,contained,beans,null,for,string,contained,bean,name,contained,beans,destroy,singleton,contained,bean,name,synchronized,this,dependent,bean,map,for,iterator,map,entry,string,set,string,it,this,dependent,bean,map,entry,set,iterator,it,has,next,map,entry,string,set,string,entry,it,next,set,string,dependencies,to,clean,entry,get,value,dependencies,to,clean,remove,bean,name,if,dependencies,to,clean,is,empty,it,remove,this,dependencies,for,bean,map,remove,bean,name
DefaultSingletonBeanRegistry -> protected void destroyBean(String beanName, DisposableBean bean);1417966231;Destroy the given bean. Must destroy beans that depend on the given_bean before the bean itself. Should not throw any exceptions._@param beanName the name of the bean_@param bean the bean instance to destroy;protected void destroyBean(String beanName, DisposableBean bean) {_		_		Set<String> dependencies = this.dependentBeanMap.remove(beanName)__		if (dependencies != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieved dependent beans for bean '" + beanName + "': " + dependencies)__			}_			for (String dependentBeanName : dependencies) {_				destroySingleton(dependentBeanName)__			}_		}__		_		if (bean != null) {_			try {_				bean.destroy()__			}_			catch (Throwable ex) {_				logger.error("Destroy method on bean with name '" + beanName + "' threw an exception", ex)__			}_		}__		_		Set<String> containedBeans = this.containedBeanMap.remove(beanName)__		if (containedBeans != null) {_			for (String containedBeanName : containedBeans) {_				destroySingleton(containedBeanName)__			}_		}__		_		synchronized (this.dependentBeanMap) {_			for (Iterator<Map.Entry<String, Set<String>>> it = this.dependentBeanMap.entrySet().iterator()_ it.hasNext()_) {_				Map.Entry<String, Set<String>> entry = it.next()__				Set<String> dependenciesToClean = entry.getValue()__				dependenciesToClean.remove(beanName)__				if (dependenciesToClean.isEmpty()) {_					it.remove()__				}_			}_		}__		_		this.dependenciesForBeanMap.remove(beanName)__	};destroy,the,given,bean,must,destroy,beans,that,depend,on,the,given,bean,before,the,bean,itself,should,not,throw,any,exceptions,param,bean,name,the,name,of,the,bean,param,bean,the,bean,instance,to,destroy;protected,void,destroy,bean,string,bean,name,disposable,bean,bean,set,string,dependencies,this,dependent,bean,map,remove,bean,name,if,dependencies,null,if,logger,is,debug,enabled,logger,debug,retrieved,dependent,beans,for,bean,bean,name,dependencies,for,string,dependent,bean,name,dependencies,destroy,singleton,dependent,bean,name,if,bean,null,try,bean,destroy,catch,throwable,ex,logger,error,destroy,method,on,bean,with,name,bean,name,threw,an,exception,ex,set,string,contained,beans,this,contained,bean,map,remove,bean,name,if,contained,beans,null,for,string,contained,bean,name,contained,beans,destroy,singleton,contained,bean,name,synchronized,this,dependent,bean,map,for,iterator,map,entry,string,set,string,it,this,dependent,bean,map,entry,set,iterator,it,has,next,map,entry,string,set,string,entry,it,next,set,string,dependencies,to,clean,entry,get,value,dependencies,to,clean,remove,bean,name,if,dependencies,to,clean,is,empty,it,remove,this,dependencies,for,bean,map,remove,bean,name
DefaultSingletonBeanRegistry -> protected void destroyBean(String beanName, DisposableBean bean);1424972106;Destroy the given bean. Must destroy beans that depend on the given_bean before the bean itself. Should not throw any exceptions._@param beanName the name of the bean_@param bean the bean instance to destroy;protected void destroyBean(String beanName, DisposableBean bean) {_		_		Set<String> dependencies = this.dependentBeanMap.remove(beanName)__		if (dependencies != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieved dependent beans for bean '" + beanName + "': " + dependencies)__			}_			for (String dependentBeanName : dependencies) {_				destroySingleton(dependentBeanName)__			}_		}__		_		if (bean != null) {_			try {_				bean.destroy()__			}_			catch (Throwable ex) {_				logger.error("Destroy method on bean with name '" + beanName + "' threw an exception", ex)__			}_		}__		_		Set<String> containedBeans = this.containedBeanMap.remove(beanName)__		if (containedBeans != null) {_			for (String containedBeanName : containedBeans) {_				destroySingleton(containedBeanName)__			}_		}__		_		synchronized (this.dependentBeanMap) {_			for (Iterator<Map.Entry<String, Set<String>>> it = this.dependentBeanMap.entrySet().iterator()_ it.hasNext()_) {_				Map.Entry<String, Set<String>> entry = it.next()__				Set<String> dependenciesToClean = entry.getValue()__				dependenciesToClean.remove(beanName)__				if (dependenciesToClean.isEmpty()) {_					it.remove()__				}_			}_		}__		_		this.dependenciesForBeanMap.remove(beanName)__	};destroy,the,given,bean,must,destroy,beans,that,depend,on,the,given,bean,before,the,bean,itself,should,not,throw,any,exceptions,param,bean,name,the,name,of,the,bean,param,bean,the,bean,instance,to,destroy;protected,void,destroy,bean,string,bean,name,disposable,bean,bean,set,string,dependencies,this,dependent,bean,map,remove,bean,name,if,dependencies,null,if,logger,is,debug,enabled,logger,debug,retrieved,dependent,beans,for,bean,bean,name,dependencies,for,string,dependent,bean,name,dependencies,destroy,singleton,dependent,bean,name,if,bean,null,try,bean,destroy,catch,throwable,ex,logger,error,destroy,method,on,bean,with,name,bean,name,threw,an,exception,ex,set,string,contained,beans,this,contained,bean,map,remove,bean,name,if,contained,beans,null,for,string,contained,bean,name,contained,beans,destroy,singleton,contained,bean,name,synchronized,this,dependent,bean,map,for,iterator,map,entry,string,set,string,it,this,dependent,bean,map,entry,set,iterator,it,has,next,map,entry,string,set,string,entry,it,next,set,string,dependencies,to,clean,entry,get,value,dependencies,to,clean,remove,bean,name,if,dependencies,to,clean,is,empty,it,remove,this,dependencies,for,bean,map,remove,bean,name
DefaultSingletonBeanRegistry -> protected void destroyBean(String beanName, DisposableBean bean);1447399860;Destroy the given bean. Must destroy beans that depend on the given_bean before the bean itself. Should not throw any exceptions._@param beanName the name of the bean_@param bean the bean instance to destroy;protected void destroyBean(String beanName, DisposableBean bean) {_		_		Set<String> dependencies = this.dependentBeanMap.remove(beanName)__		if (dependencies != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieved dependent beans for bean '" + beanName + "': " + dependencies)__			}_			for (String dependentBeanName : dependencies) {_				destroySingleton(dependentBeanName)__			}_		}__		_		if (bean != null) {_			try {_				bean.destroy()__			}_			catch (Throwable ex) {_				logger.error("Destroy method on bean with name '" + beanName + "' threw an exception", ex)__			}_		}__		_		Set<String> containedBeans = this.containedBeanMap.remove(beanName)__		if (containedBeans != null) {_			for (String containedBeanName : containedBeans) {_				destroySingleton(containedBeanName)__			}_		}__		_		synchronized (this.dependentBeanMap) {_			for (Iterator<Map.Entry<String, Set<String>>> it = this.dependentBeanMap.entrySet().iterator()_ it.hasNext()_) {_				Map.Entry<String, Set<String>> entry = it.next()__				Set<String> dependenciesToClean = entry.getValue()__				dependenciesToClean.remove(beanName)__				if (dependenciesToClean.isEmpty()) {_					it.remove()__				}_			}_		}__		_		this.dependenciesForBeanMap.remove(beanName)__	};destroy,the,given,bean,must,destroy,beans,that,depend,on,the,given,bean,before,the,bean,itself,should,not,throw,any,exceptions,param,bean,name,the,name,of,the,bean,param,bean,the,bean,instance,to,destroy;protected,void,destroy,bean,string,bean,name,disposable,bean,bean,set,string,dependencies,this,dependent,bean,map,remove,bean,name,if,dependencies,null,if,logger,is,debug,enabled,logger,debug,retrieved,dependent,beans,for,bean,bean,name,dependencies,for,string,dependent,bean,name,dependencies,destroy,singleton,dependent,bean,name,if,bean,null,try,bean,destroy,catch,throwable,ex,logger,error,destroy,method,on,bean,with,name,bean,name,threw,an,exception,ex,set,string,contained,beans,this,contained,bean,map,remove,bean,name,if,contained,beans,null,for,string,contained,bean,name,contained,beans,destroy,singleton,contained,bean,name,synchronized,this,dependent,bean,map,for,iterator,map,entry,string,set,string,it,this,dependent,bean,map,entry,set,iterator,it,has,next,map,entry,string,set,string,entry,it,next,set,string,dependencies,to,clean,entry,get,value,dependencies,to,clean,remove,bean,name,if,dependencies,to,clean,is,empty,it,remove,this,dependencies,for,bean,map,remove,bean,name
DefaultSingletonBeanRegistry -> protected void destroyBean(String beanName, DisposableBean bean);1467730834;Destroy the given bean. Must destroy beans that depend on the given_bean before the bean itself. Should not throw any exceptions._@param beanName the name of the bean_@param bean the bean instance to destroy;protected void destroyBean(String beanName, DisposableBean bean) {_		_		Set<String> dependencies = this.dependentBeanMap.remove(beanName)__		if (dependencies != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieved dependent beans for bean '" + beanName + "': " + dependencies)__			}_			for (String dependentBeanName : dependencies) {_				destroySingleton(dependentBeanName)__			}_		}__		_		if (bean != null) {_			try {_				bean.destroy()__			}_			catch (Throwable ex) {_				logger.error("Destroy method on bean with name '" + beanName + "' threw an exception", ex)__			}_		}__		_		Set<String> containedBeans = this.containedBeanMap.remove(beanName)__		if (containedBeans != null) {_			for (String containedBeanName : containedBeans) {_				destroySingleton(containedBeanName)__			}_		}__		_		synchronized (this.dependentBeanMap) {_			for (Iterator<Map.Entry<String, Set<String>>> it = this.dependentBeanMap.entrySet().iterator()_ it.hasNext()_) {_				Map.Entry<String, Set<String>> entry = it.next()__				Set<String> dependenciesToClean = entry.getValue()__				dependenciesToClean.remove(beanName)__				if (dependenciesToClean.isEmpty()) {_					it.remove()__				}_			}_		}__		_		this.dependenciesForBeanMap.remove(beanName)__	};destroy,the,given,bean,must,destroy,beans,that,depend,on,the,given,bean,before,the,bean,itself,should,not,throw,any,exceptions,param,bean,name,the,name,of,the,bean,param,bean,the,bean,instance,to,destroy;protected,void,destroy,bean,string,bean,name,disposable,bean,bean,set,string,dependencies,this,dependent,bean,map,remove,bean,name,if,dependencies,null,if,logger,is,debug,enabled,logger,debug,retrieved,dependent,beans,for,bean,bean,name,dependencies,for,string,dependent,bean,name,dependencies,destroy,singleton,dependent,bean,name,if,bean,null,try,bean,destroy,catch,throwable,ex,logger,error,destroy,method,on,bean,with,name,bean,name,threw,an,exception,ex,set,string,contained,beans,this,contained,bean,map,remove,bean,name,if,contained,beans,null,for,string,contained,bean,name,contained,beans,destroy,singleton,contained,bean,name,synchronized,this,dependent,bean,map,for,iterator,map,entry,string,set,string,it,this,dependent,bean,map,entry,set,iterator,it,has,next,map,entry,string,set,string,entry,it,next,set,string,dependencies,to,clean,entry,get,value,dependencies,to,clean,remove,bean,name,if,dependencies,to,clean,is,empty,it,remove,this,dependencies,for,bean,map,remove,bean,name
DefaultSingletonBeanRegistry -> protected void destroyBean(String beanName, DisposableBean bean);1467810738;Destroy the given bean. Must destroy beans that depend on the given_bean before the bean itself. Should not throw any exceptions._@param beanName the name of the bean_@param bean the bean instance to destroy;protected void destroyBean(String beanName, DisposableBean bean) {_		_		Set<String> dependencies = this.dependentBeanMap.remove(beanName)__		if (dependencies != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieved dependent beans for bean '" + beanName + "': " + dependencies)__			}_			for (String dependentBeanName : dependencies) {_				destroySingleton(dependentBeanName)__			}_		}__		_		if (bean != null) {_			try {_				bean.destroy()__			}_			catch (Throwable ex) {_				logger.error("Destroy method on bean with name '" + beanName + "' threw an exception", ex)__			}_		}__		_		Set<String> containedBeans = this.containedBeanMap.remove(beanName)__		if (containedBeans != null) {_			for (String containedBeanName : containedBeans) {_				destroySingleton(containedBeanName)__			}_		}__		_		synchronized (this.dependentBeanMap) {_			for (Iterator<Map.Entry<String, Set<String>>> it = this.dependentBeanMap.entrySet().iterator()_ it.hasNext()_) {_				Map.Entry<String, Set<String>> entry = it.next()__				Set<String> dependenciesToClean = entry.getValue()__				dependenciesToClean.remove(beanName)__				if (dependenciesToClean.isEmpty()) {_					it.remove()__				}_			}_		}__		_		this.dependenciesForBeanMap.remove(beanName)__	};destroy,the,given,bean,must,destroy,beans,that,depend,on,the,given,bean,before,the,bean,itself,should,not,throw,any,exceptions,param,bean,name,the,name,of,the,bean,param,bean,the,bean,instance,to,destroy;protected,void,destroy,bean,string,bean,name,disposable,bean,bean,set,string,dependencies,this,dependent,bean,map,remove,bean,name,if,dependencies,null,if,logger,is,debug,enabled,logger,debug,retrieved,dependent,beans,for,bean,bean,name,dependencies,for,string,dependent,bean,name,dependencies,destroy,singleton,dependent,bean,name,if,bean,null,try,bean,destroy,catch,throwable,ex,logger,error,destroy,method,on,bean,with,name,bean,name,threw,an,exception,ex,set,string,contained,beans,this,contained,bean,map,remove,bean,name,if,contained,beans,null,for,string,contained,bean,name,contained,beans,destroy,singleton,contained,bean,name,synchronized,this,dependent,bean,map,for,iterator,map,entry,string,set,string,it,this,dependent,bean,map,entry,set,iterator,it,has,next,map,entry,string,set,string,entry,it,next,set,string,dependencies,to,clean,entry,get,value,dependencies,to,clean,remove,bean,name,if,dependencies,to,clean,is,empty,it,remove,this,dependencies,for,bean,map,remove,bean,name
DefaultSingletonBeanRegistry -> protected void destroyBean(String beanName, DisposableBean bean);1469561191;Destroy the given bean. Must destroy beans that depend on the given_bean before the bean itself. Should not throw any exceptions._@param beanName the name of the bean_@param bean the bean instance to destroy;protected void destroyBean(String beanName, DisposableBean bean) {_		_		Set<String> dependencies = this.dependentBeanMap.remove(beanName)__		if (dependencies != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieved dependent beans for bean '" + beanName + "': " + dependencies)__			}_			for (String dependentBeanName : dependencies) {_				destroySingleton(dependentBeanName)__			}_		}__		_		if (bean != null) {_			try {_				bean.destroy()__			}_			catch (Throwable ex) {_				logger.error("Destroy method on bean with name '" + beanName + "' threw an exception", ex)__			}_		}__		_		Set<String> containedBeans = this.containedBeanMap.remove(beanName)__		if (containedBeans != null) {_			for (String containedBeanName : containedBeans) {_				destroySingleton(containedBeanName)__			}_		}__		_		synchronized (this.dependentBeanMap) {_			for (Iterator<Map.Entry<String, Set<String>>> it = this.dependentBeanMap.entrySet().iterator()_ it.hasNext()_) {_				Map.Entry<String, Set<String>> entry = it.next()__				Set<String> dependenciesToClean = entry.getValue()__				dependenciesToClean.remove(beanName)__				if (dependenciesToClean.isEmpty()) {_					it.remove()__				}_			}_		}__		_		this.dependenciesForBeanMap.remove(beanName)__	};destroy,the,given,bean,must,destroy,beans,that,depend,on,the,given,bean,before,the,bean,itself,should,not,throw,any,exceptions,param,bean,name,the,name,of,the,bean,param,bean,the,bean,instance,to,destroy;protected,void,destroy,bean,string,bean,name,disposable,bean,bean,set,string,dependencies,this,dependent,bean,map,remove,bean,name,if,dependencies,null,if,logger,is,debug,enabled,logger,debug,retrieved,dependent,beans,for,bean,bean,name,dependencies,for,string,dependent,bean,name,dependencies,destroy,singleton,dependent,bean,name,if,bean,null,try,bean,destroy,catch,throwable,ex,logger,error,destroy,method,on,bean,with,name,bean,name,threw,an,exception,ex,set,string,contained,beans,this,contained,bean,map,remove,bean,name,if,contained,beans,null,for,string,contained,bean,name,contained,beans,destroy,singleton,contained,bean,name,synchronized,this,dependent,bean,map,for,iterator,map,entry,string,set,string,it,this,dependent,bean,map,entry,set,iterator,it,has,next,map,entry,string,set,string,entry,it,next,set,string,dependencies,to,clean,entry,get,value,dependencies,to,clean,remove,bean,name,if,dependencies,to,clean,is,empty,it,remove,this,dependencies,for,bean,map,remove,bean,name
DefaultSingletonBeanRegistry -> protected void destroyBean(String beanName, DisposableBean bean);1478538021;Destroy the given bean. Must destroy beans that depend on the given_bean before the bean itself. Should not throw any exceptions._@param beanName the name of the bean_@param bean the bean instance to destroy;protected void destroyBean(String beanName, DisposableBean bean) {_		_		Set<String> dependencies = this.dependentBeanMap.remove(beanName)__		if (dependencies != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieved dependent beans for bean '" + beanName + "': " + dependencies)__			}_			for (String dependentBeanName : dependencies) {_				destroySingleton(dependentBeanName)__			}_		}__		_		if (bean != null) {_			try {_				bean.destroy()__			}_			catch (Throwable ex) {_				logger.error("Destroy method on bean with name '" + beanName + "' threw an exception", ex)__			}_		}__		_		Set<String> containedBeans = this.containedBeanMap.remove(beanName)__		if (containedBeans != null) {_			for (String containedBeanName : containedBeans) {_				destroySingleton(containedBeanName)__			}_		}__		_		synchronized (this.dependentBeanMap) {_			for (Iterator<Map.Entry<String, Set<String>>> it = this.dependentBeanMap.entrySet().iterator()_ it.hasNext()_) {_				Map.Entry<String, Set<String>> entry = it.next()__				Set<String> dependenciesToClean = entry.getValue()__				dependenciesToClean.remove(beanName)__				if (dependenciesToClean.isEmpty()) {_					it.remove()__				}_			}_		}__		_		this.dependenciesForBeanMap.remove(beanName)__	};destroy,the,given,bean,must,destroy,beans,that,depend,on,the,given,bean,before,the,bean,itself,should,not,throw,any,exceptions,param,bean,name,the,name,of,the,bean,param,bean,the,bean,instance,to,destroy;protected,void,destroy,bean,string,bean,name,disposable,bean,bean,set,string,dependencies,this,dependent,bean,map,remove,bean,name,if,dependencies,null,if,logger,is,debug,enabled,logger,debug,retrieved,dependent,beans,for,bean,bean,name,dependencies,for,string,dependent,bean,name,dependencies,destroy,singleton,dependent,bean,name,if,bean,null,try,bean,destroy,catch,throwable,ex,logger,error,destroy,method,on,bean,with,name,bean,name,threw,an,exception,ex,set,string,contained,beans,this,contained,bean,map,remove,bean,name,if,contained,beans,null,for,string,contained,bean,name,contained,beans,destroy,singleton,contained,bean,name,synchronized,this,dependent,bean,map,for,iterator,map,entry,string,set,string,it,this,dependent,bean,map,entry,set,iterator,it,has,next,map,entry,string,set,string,entry,it,next,set,string,dependencies,to,clean,entry,get,value,dependencies,to,clean,remove,bean,name,if,dependencies,to,clean,is,empty,it,remove,this,dependencies,for,bean,map,remove,bean,name
DefaultSingletonBeanRegistry -> protected void destroyBean(String beanName, DisposableBean bean);1495868221;Destroy the given bean. Must destroy beans that depend on the given_bean before the bean itself. Should not throw any exceptions._@param beanName the name of the bean_@param bean the bean instance to destroy;protected void destroyBean(String beanName, DisposableBean bean) {_		_		Set<String> dependencies = this.dependentBeanMap.remove(beanName)__		if (dependencies != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieved dependent beans for bean '" + beanName + "': " + dependencies)__			}_			for (String dependentBeanName : dependencies) {_				destroySingleton(dependentBeanName)__			}_		}__		_		if (bean != null) {_			try {_				bean.destroy()__			}_			catch (Throwable ex) {_				logger.error("Destroy method on bean with name '" + beanName + "' threw an exception", ex)__			}_		}__		_		Set<String> containedBeans = this.containedBeanMap.remove(beanName)__		if (containedBeans != null) {_			for (String containedBeanName : containedBeans) {_				destroySingleton(containedBeanName)__			}_		}__		_		synchronized (this.dependentBeanMap) {_			for (Iterator<Map.Entry<String, Set<String>>> it = this.dependentBeanMap.entrySet().iterator()_ it.hasNext()_) {_				Map.Entry<String, Set<String>> entry = it.next()__				Set<String> dependenciesToClean = entry.getValue()__				dependenciesToClean.remove(beanName)__				if (dependenciesToClean.isEmpty()) {_					it.remove()__				}_			}_		}__		_		this.dependenciesForBeanMap.remove(beanName)__	};destroy,the,given,bean,must,destroy,beans,that,depend,on,the,given,bean,before,the,bean,itself,should,not,throw,any,exceptions,param,bean,name,the,name,of,the,bean,param,bean,the,bean,instance,to,destroy;protected,void,destroy,bean,string,bean,name,disposable,bean,bean,set,string,dependencies,this,dependent,bean,map,remove,bean,name,if,dependencies,null,if,logger,is,debug,enabled,logger,debug,retrieved,dependent,beans,for,bean,bean,name,dependencies,for,string,dependent,bean,name,dependencies,destroy,singleton,dependent,bean,name,if,bean,null,try,bean,destroy,catch,throwable,ex,logger,error,destroy,method,on,bean,with,name,bean,name,threw,an,exception,ex,set,string,contained,beans,this,contained,bean,map,remove,bean,name,if,contained,beans,null,for,string,contained,bean,name,contained,beans,destroy,singleton,contained,bean,name,synchronized,this,dependent,bean,map,for,iterator,map,entry,string,set,string,it,this,dependent,bean,map,entry,set,iterator,it,has,next,map,entry,string,set,string,entry,it,next,set,string,dependencies,to,clean,entry,get,value,dependencies,to,clean,remove,bean,name,if,dependencies,to,clean,is,empty,it,remove,this,dependencies,for,bean,map,remove,bean,name
DefaultSingletonBeanRegistry -> protected void destroyBean(String beanName, DisposableBean bean);1496259743;Destroy the given bean. Must destroy beans that depend on the given_bean before the bean itself. Should not throw any exceptions._@param beanName the name of the bean_@param bean the bean instance to destroy;protected void destroyBean(String beanName, DisposableBean bean) {_		_		Set<String> dependencies = this.dependentBeanMap.remove(beanName)__		if (dependencies != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Retrieved dependent beans for bean '" + beanName + "': " + dependencies)__			}_			for (String dependentBeanName : dependencies) {_				destroySingleton(dependentBeanName)__			}_		}__		_		if (bean != null) {_			try {_				bean.destroy()__			}_			catch (Throwable ex) {_				logger.error("Destroy method on bean with name '" + beanName + "' threw an exception", ex)__			}_		}__		_		Set<String> containedBeans = this.containedBeanMap.remove(beanName)__		if (containedBeans != null) {_			for (String containedBeanName : containedBeans) {_				destroySingleton(containedBeanName)__			}_		}__		_		synchronized (this.dependentBeanMap) {_			for (Iterator<Map.Entry<String, Set<String>>> it = this.dependentBeanMap.entrySet().iterator()_ it.hasNext()_) {_				Map.Entry<String, Set<String>> entry = it.next()__				Set<String> dependenciesToClean = entry.getValue()__				dependenciesToClean.remove(beanName)__				if (dependenciesToClean.isEmpty()) {_					it.remove()__				}_			}_		}__		_		this.dependenciesForBeanMap.remove(beanName)__	};destroy,the,given,bean,must,destroy,beans,that,depend,on,the,given,bean,before,the,bean,itself,should,not,throw,any,exceptions,param,bean,name,the,name,of,the,bean,param,bean,the,bean,instance,to,destroy;protected,void,destroy,bean,string,bean,name,disposable,bean,bean,set,string,dependencies,this,dependent,bean,map,remove,bean,name,if,dependencies,null,if,logger,is,debug,enabled,logger,debug,retrieved,dependent,beans,for,bean,bean,name,dependencies,for,string,dependent,bean,name,dependencies,destroy,singleton,dependent,bean,name,if,bean,null,try,bean,destroy,catch,throwable,ex,logger,error,destroy,method,on,bean,with,name,bean,name,threw,an,exception,ex,set,string,contained,beans,this,contained,bean,map,remove,bean,name,if,contained,beans,null,for,string,contained,bean,name,contained,beans,destroy,singleton,contained,bean,name,synchronized,this,dependent,bean,map,for,iterator,map,entry,string,set,string,it,this,dependent,bean,map,entry,set,iterator,it,has,next,map,entry,string,set,string,entry,it,next,set,string,dependencies,to,clean,entry,get,value,dependencies,to,clean,remove,bean,name,if,dependencies,to,clean,is,empty,it,remove,this,dependencies,for,bean,map,remove,bean,name
DefaultSingletonBeanRegistry -> protected void addSingletonFactory(String beanName, ObjectFactory singletonFactory);1328020251;Add the given singleton factory for building the specified singleton_if necessary._<p>To be called for eager registration of singletons, e.g. to be able to_resolve circular references._@param beanName the name of the bean_@param singletonFactory the factory for the singleton object;protected void addSingletonFactory(String beanName, ObjectFactory singletonFactory) {_		Assert.notNull(singletonFactory, "Singleton factory must not be null")__		synchronized (this.singletonObjects) {_			if (!this.singletonObjects.containsKey(beanName)) {_				this.singletonFactories.put(beanName, singletonFactory)__				this.earlySingletonObjects.remove(beanName)__				this.registeredSingletons.add(beanName)__			}_		}_	};add,the,given,singleton,factory,for,building,the,specified,singleton,if,necessary,p,to,be,called,for,eager,registration,of,singletons,e,g,to,be,able,to,resolve,circular,references,param,bean,name,the,name,of,the,bean,param,singleton,factory,the,factory,for,the,singleton,object;protected,void,add,singleton,factory,string,bean,name,object,factory,singleton,factory,assert,not,null,singleton,factory,singleton,factory,must,not,be,null,synchronized,this,singleton,objects,if,this,singleton,objects,contains,key,bean,name,this,singleton,factories,put,bean,name,singleton,factory,this,early,singleton,objects,remove,bean,name,this,registered,singletons,add,bean,name
DefaultSingletonBeanRegistry -> protected void addSingletonFactory(String beanName, ObjectFactory singletonFactory);1349872135;Add the given singleton factory for building the specified singleton_if necessary._<p>To be called for eager registration of singletons, e.g. to be able to_resolve circular references._@param beanName the name of the bean_@param singletonFactory the factory for the singleton object;protected void addSingletonFactory(String beanName, ObjectFactory singletonFactory) {_		Assert.notNull(singletonFactory, "Singleton factory must not be null")__		synchronized (this.singletonObjects) {_			if (!this.singletonObjects.containsKey(beanName)) {_				this.singletonFactories.put(beanName, singletonFactory)__				this.earlySingletonObjects.remove(beanName)__				this.registeredSingletons.add(beanName)__			}_		}_	};add,the,given,singleton,factory,for,building,the,specified,singleton,if,necessary,p,to,be,called,for,eager,registration,of,singletons,e,g,to,be,able,to,resolve,circular,references,param,bean,name,the,name,of,the,bean,param,singleton,factory,the,factory,for,the,singleton,object;protected,void,add,singleton,factory,string,bean,name,object,factory,singleton,factory,assert,not,null,singleton,factory,singleton,factory,must,not,be,null,synchronized,this,singleton,objects,if,this,singleton,objects,contains,key,bean,name,this,singleton,factories,put,bean,name,singleton,factory,this,early,singleton,objects,remove,bean,name,this,registered,singletons,add,bean,name
DefaultSingletonBeanRegistry -> protected void addSingletonFactory(String beanName, ObjectFactory singletonFactory);1352412938;Add the given singleton factory for building the specified singleton_if necessary._<p>To be called for eager registration of singletons, e.g. to be able to_resolve circular references._@param beanName the name of the bean_@param singletonFactory the factory for the singleton object;protected void addSingletonFactory(String beanName, ObjectFactory singletonFactory) {_		Assert.notNull(singletonFactory, "Singleton factory must not be null")__		synchronized (this.singletonObjects) {_			if (!this.singletonObjects.containsKey(beanName)) {_				this.singletonFactories.put(beanName, singletonFactory)__				this.earlySingletonObjects.remove(beanName)__				this.registeredSingletons.add(beanName)__			}_		}_	};add,the,given,singleton,factory,for,building,the,specified,singleton,if,necessary,p,to,be,called,for,eager,registration,of,singletons,e,g,to,be,able,to,resolve,circular,references,param,bean,name,the,name,of,the,bean,param,singleton,factory,the,factory,for,the,singleton,object;protected,void,add,singleton,factory,string,bean,name,object,factory,singleton,factory,assert,not,null,singleton,factory,singleton,factory,must,not,be,null,synchronized,this,singleton,objects,if,this,singleton,objects,contains,key,bean,name,this,singleton,factories,put,bean,name,singleton,factory,this,early,singleton,objects,remove,bean,name,this,registered,singletons,add,bean,name
DefaultSingletonBeanRegistry -> protected void addSingletonFactory(String beanName, ObjectFactory singletonFactory);1352418897;Add the given singleton factory for building the specified singleton_if necessary._<p>To be called for eager registration of singletons, e.g. to be able to_resolve circular references._@param beanName the name of the bean_@param singletonFactory the factory for the singleton object;protected void addSingletonFactory(String beanName, ObjectFactory singletonFactory) {_		Assert.notNull(singletonFactory, "Singleton factory must not be null")__		synchronized (this.singletonObjects) {_			if (!this.singletonObjects.containsKey(beanName)) {_				this.singletonFactories.put(beanName, singletonFactory)__				this.earlySingletonObjects.remove(beanName)__				this.registeredSingletons.add(beanName)__			}_		}_	};add,the,given,singleton,factory,for,building,the,specified,singleton,if,necessary,p,to,be,called,for,eager,registration,of,singletons,e,g,to,be,able,to,resolve,circular,references,param,bean,name,the,name,of,the,bean,param,singleton,factory,the,factory,for,the,singleton,object;protected,void,add,singleton,factory,string,bean,name,object,factory,singleton,factory,assert,not,null,singleton,factory,singleton,factory,must,not,be,null,synchronized,this,singleton,objects,if,this,singleton,objects,contains,key,bean,name,this,singleton,factories,put,bean,name,singleton,factory,this,early,singleton,objects,remove,bean,name,this,registered,singletons,add,bean,name
DefaultSingletonBeanRegistry -> protected void addSingletonFactory(String beanName, ObjectFactory singletonFactory);1353882772;Add the given singleton factory for building the specified singleton_if necessary._<p>To be called for eager registration of singletons, e.g. to be able to_resolve circular references._@param beanName the name of the bean_@param singletonFactory the factory for the singleton object;protected void addSingletonFactory(String beanName, ObjectFactory singletonFactory) {_		Assert.notNull(singletonFactory, "Singleton factory must not be null")__		synchronized (this.singletonObjects) {_			if (!this.singletonObjects.containsKey(beanName)) {_				this.singletonFactories.put(beanName, singletonFactory)__				this.earlySingletonObjects.remove(beanName)__				this.registeredSingletons.add(beanName)__			}_		}_	};add,the,given,singleton,factory,for,building,the,specified,singleton,if,necessary,p,to,be,called,for,eager,registration,of,singletons,e,g,to,be,able,to,resolve,circular,references,param,bean,name,the,name,of,the,bean,param,singleton,factory,the,factory,for,the,singleton,object;protected,void,add,singleton,factory,string,bean,name,object,factory,singleton,factory,assert,not,null,singleton,factory,singleton,factory,must,not,be,null,synchronized,this,singleton,objects,if,this,singleton,objects,contains,key,bean,name,this,singleton,factories,put,bean,name,singleton,factory,this,early,singleton,objects,remove,bean,name,this,registered,singletons,add,bean,name
DefaultSingletonBeanRegistry -> protected void addSingletonFactory(String beanName, ObjectFactory singletonFactory);1355352386;Add the given singleton factory for building the specified singleton_if necessary._<p>To be called for eager registration of singletons, e.g. to be able to_resolve circular references._@param beanName the name of the bean_@param singletonFactory the factory for the singleton object;protected void addSingletonFactory(String beanName, ObjectFactory singletonFactory) {_		Assert.notNull(singletonFactory, "Singleton factory must not be null")__		synchronized (this.singletonObjects) {_			if (!this.singletonObjects.containsKey(beanName)) {_				this.singletonFactories.put(beanName, singletonFactory)__				this.earlySingletonObjects.remove(beanName)__				this.registeredSingletons.add(beanName)__			}_		}_	};add,the,given,singleton,factory,for,building,the,specified,singleton,if,necessary,p,to,be,called,for,eager,registration,of,singletons,e,g,to,be,able,to,resolve,circular,references,param,bean,name,the,name,of,the,bean,param,singleton,factory,the,factory,for,the,singleton,object;protected,void,add,singleton,factory,string,bean,name,object,factory,singleton,factory,assert,not,null,singleton,factory,singleton,factory,must,not,be,null,synchronized,this,singleton,objects,if,this,singleton,objects,contains,key,bean,name,this,singleton,factories,put,bean,name,singleton,factory,this,early,singleton,objects,remove,bean,name,this,registered,singletons,add,bean,name
DefaultSingletonBeanRegistry -> protected void addSingletonFactory(String beanName, ObjectFactory singletonFactory);1356735495;Add the given singleton factory for building the specified singleton_if necessary._<p>To be called for eager registration of singletons, e.g. to be able to_resolve circular references._@param beanName the name of the bean_@param singletonFactory the factory for the singleton object;protected void addSingletonFactory(String beanName, ObjectFactory singletonFactory) {_		Assert.notNull(singletonFactory, "Singleton factory must not be null")__		synchronized (this.singletonObjects) {_			if (!this.singletonObjects.containsKey(beanName)) {_				this.singletonFactories.put(beanName, singletonFactory)__				this.earlySingletonObjects.remove(beanName)__				this.registeredSingletons.add(beanName)__			}_		}_	};add,the,given,singleton,factory,for,building,the,specified,singleton,if,necessary,p,to,be,called,for,eager,registration,of,singletons,e,g,to,be,able,to,resolve,circular,references,param,bean,name,the,name,of,the,bean,param,singleton,factory,the,factory,for,the,singleton,object;protected,void,add,singleton,factory,string,bean,name,object,factory,singleton,factory,assert,not,null,singleton,factory,singleton,factory,must,not,be,null,synchronized,this,singleton,objects,if,this,singleton,objects,contains,key,bean,name,this,singleton,factories,put,bean,name,singleton,factory,this,early,singleton,objects,remove,bean,name,this,registered,singletons,add,bean,name
DefaultSingletonBeanRegistry -> protected void addSingletonFactory(String beanName, ObjectFactory singletonFactory);1357119239;Add the given singleton factory for building the specified singleton_if necessary._<p>To be called for eager registration of singletons, e.g. to be able to_resolve circular references._@param beanName the name of the bean_@param singletonFactory the factory for the singleton object;protected void addSingletonFactory(String beanName, ObjectFactory singletonFactory) {_		Assert.notNull(singletonFactory, "Singleton factory must not be null")__		synchronized (this.singletonObjects) {_			if (!this.singletonObjects.containsKey(beanName)) {_				this.singletonFactories.put(beanName, singletonFactory)__				this.earlySingletonObjects.remove(beanName)__				this.registeredSingletons.add(beanName)__			}_		}_	};add,the,given,singleton,factory,for,building,the,specified,singleton,if,necessary,p,to,be,called,for,eager,registration,of,singletons,e,g,to,be,able,to,resolve,circular,references,param,bean,name,the,name,of,the,bean,param,singleton,factory,the,factory,for,the,singleton,object;protected,void,add,singleton,factory,string,bean,name,object,factory,singleton,factory,assert,not,null,singleton,factory,singleton,factory,must,not,be,null,synchronized,this,singleton,objects,if,this,singleton,objects,contains,key,bean,name,this,singleton,factories,put,bean,name,singleton,factory,this,early,singleton,objects,remove,bean,name,this,registered,singletons,add,bean,name
DefaultSingletonBeanRegistry -> protected void addSingletonFactory(String beanName, ObjectFactory singletonFactory);1364505266;Add the given singleton factory for building the specified singleton_if necessary._<p>To be called for eager registration of singletons, e.g. to be able to_resolve circular references._@param beanName the name of the bean_@param singletonFactory the factory for the singleton object;protected void addSingletonFactory(String beanName, ObjectFactory singletonFactory) {_		Assert.notNull(singletonFactory, "Singleton factory must not be null")__		synchronized (this.singletonObjects) {_			if (!this.singletonObjects.containsKey(beanName)) {_				this.singletonFactories.put(beanName, singletonFactory)__				this.earlySingletonObjects.remove(beanName)__				this.registeredSingletons.add(beanName)__			}_		}_	};add,the,given,singleton,factory,for,building,the,specified,singleton,if,necessary,p,to,be,called,for,eager,registration,of,singletons,e,g,to,be,able,to,resolve,circular,references,param,bean,name,the,name,of,the,bean,param,singleton,factory,the,factory,for,the,singleton,object;protected,void,add,singleton,factory,string,bean,name,object,factory,singleton,factory,assert,not,null,singleton,factory,singleton,factory,must,not,be,null,synchronized,this,singleton,objects,if,this,singleton,objects,contains,key,bean,name,this,singleton,factories,put,bean,name,singleton,factory,this,early,singleton,objects,remove,bean,name,this,registered,singletons,add,bean,name
DefaultSingletonBeanRegistry -> protected void addSingletonFactory(String beanName, ObjectFactory singletonFactory);1368482696;Add the given singleton factory for building the specified singleton_if necessary._<p>To be called for eager registration of singletons, e.g. to be able to_resolve circular references._@param beanName the name of the bean_@param singletonFactory the factory for the singleton object;protected void addSingletonFactory(String beanName, ObjectFactory singletonFactory) {_		Assert.notNull(singletonFactory, "Singleton factory must not be null")__		synchronized (this.singletonObjects) {_			if (!this.singletonObjects.containsKey(beanName)) {_				this.singletonFactories.put(beanName, singletonFactory)__				this.earlySingletonObjects.remove(beanName)__				this.registeredSingletons.add(beanName)__			}_		}_	};add,the,given,singleton,factory,for,building,the,specified,singleton,if,necessary,p,to,be,called,for,eager,registration,of,singletons,e,g,to,be,able,to,resolve,circular,references,param,bean,name,the,name,of,the,bean,param,singleton,factory,the,factory,for,the,singleton,object;protected,void,add,singleton,factory,string,bean,name,object,factory,singleton,factory,assert,not,null,singleton,factory,singleton,factory,must,not,be,null,synchronized,this,singleton,objects,if,this,singleton,objects,contains,key,bean,name,this,singleton,factories,put,bean,name,singleton,factory,this,early,singleton,objects,remove,bean,name,this,registered,singletons,add,bean,name
DefaultSingletonBeanRegistry -> protected void addSingletonFactory(String beanName, ObjectFactory singletonFactory);1374698947;Add the given singleton factory for building the specified singleton_if necessary._<p>To be called for eager registration of singletons, e.g. to be able to_resolve circular references._@param beanName the name of the bean_@param singletonFactory the factory for the singleton object;protected void addSingletonFactory(String beanName, ObjectFactory singletonFactory) {_		Assert.notNull(singletonFactory, "Singleton factory must not be null")__		synchronized (this.singletonObjects) {_			if (!this.singletonObjects.containsKey(beanName)) {_				this.singletonFactories.put(beanName, singletonFactory)__				this.earlySingletonObjects.remove(beanName)__				this.registeredSingletons.add(beanName)__			}_		}_	};add,the,given,singleton,factory,for,building,the,specified,singleton,if,necessary,p,to,be,called,for,eager,registration,of,singletons,e,g,to,be,able,to,resolve,circular,references,param,bean,name,the,name,of,the,bean,param,singleton,factory,the,factory,for,the,singleton,object;protected,void,add,singleton,factory,string,bean,name,object,factory,singleton,factory,assert,not,null,singleton,factory,singleton,factory,must,not,be,null,synchronized,this,singleton,objects,if,this,singleton,objects,contains,key,bean,name,this,singleton,factories,put,bean,name,singleton,factory,this,early,singleton,objects,remove,bean,name,this,registered,singletons,add,bean,name
DefaultSingletonBeanRegistry -> public void registerContainedBean(String containedBeanName, String containingBeanName);1328020251;Register a containment relationship between two beans,_e.g. between an inner bean and its containing outer bean._<p>Also registers the containing bean as dependent on the contained bean_in terms of destruction order._@param containedBeanName the name of the contained (inner) bean_@param containingBeanName the name of the containing (outer) bean_@see #registerDependentBean;public void registerContainedBean(String containedBeanName, String containingBeanName) {_		synchronized (this.containedBeanMap) {_			Set<String> containedBeans = this.containedBeanMap.get(containingBeanName)__			if (containedBeans == null) {_				containedBeans = new LinkedHashSet<String>(8)__				this.containedBeanMap.put(containingBeanName, containedBeans)__			}_			containedBeans.add(containedBeanName)__		}_		registerDependentBean(containedBeanName, containingBeanName)__	};register,a,containment,relationship,between,two,beans,e,g,between,an,inner,bean,and,its,containing,outer,bean,p,also,registers,the,containing,bean,as,dependent,on,the,contained,bean,in,terms,of,destruction,order,param,contained,bean,name,the,name,of,the,contained,inner,bean,param,containing,bean,name,the,name,of,the,containing,outer,bean,see,register,dependent,bean;public,void,register,contained,bean,string,contained,bean,name,string,containing,bean,name,synchronized,this,contained,bean,map,set,string,contained,beans,this,contained,bean,map,get,containing,bean,name,if,contained,beans,null,contained,beans,new,linked,hash,set,string,8,this,contained,bean,map,put,containing,bean,name,contained,beans,contained,beans,add,contained,bean,name,register,dependent,bean,contained,bean,name,containing,bean,name
DefaultSingletonBeanRegistry -> public void registerContainedBean(String containedBeanName, String containingBeanName);1349872135;Register a containment relationship between two beans,_e.g. between an inner bean and its containing outer bean._<p>Also registers the containing bean as dependent on the contained bean_in terms of destruction order._@param containedBeanName the name of the contained (inner) bean_@param containingBeanName the name of the containing (outer) bean_@see #registerDependentBean;public void registerContainedBean(String containedBeanName, String containingBeanName) {_		synchronized (this.containedBeanMap) {_			Set<String> containedBeans = this.containedBeanMap.get(containingBeanName)__			if (containedBeans == null) {_				containedBeans = new LinkedHashSet<String>(8)__				this.containedBeanMap.put(containingBeanName, containedBeans)__			}_			containedBeans.add(containedBeanName)__		}_		registerDependentBean(containedBeanName, containingBeanName)__	};register,a,containment,relationship,between,two,beans,e,g,between,an,inner,bean,and,its,containing,outer,bean,p,also,registers,the,containing,bean,as,dependent,on,the,contained,bean,in,terms,of,destruction,order,param,contained,bean,name,the,name,of,the,contained,inner,bean,param,containing,bean,name,the,name,of,the,containing,outer,bean,see,register,dependent,bean;public,void,register,contained,bean,string,contained,bean,name,string,containing,bean,name,synchronized,this,contained,bean,map,set,string,contained,beans,this,contained,bean,map,get,containing,bean,name,if,contained,beans,null,contained,beans,new,linked,hash,set,string,8,this,contained,bean,map,put,containing,bean,name,contained,beans,contained,beans,add,contained,bean,name,register,dependent,bean,contained,bean,name,containing,bean,name
DefaultSingletonBeanRegistry -> public void registerContainedBean(String containedBeanName, String containingBeanName);1352412938;Register a containment relationship between two beans,_e.g. between an inner bean and its containing outer bean._<p>Also registers the containing bean as dependent on the contained bean_in terms of destruction order._@param containedBeanName the name of the contained (inner) bean_@param containingBeanName the name of the containing (outer) bean_@see #registerDependentBean;public void registerContainedBean(String containedBeanName, String containingBeanName) {_		synchronized (this.containedBeanMap) {_			Set<String> containedBeans = this.containedBeanMap.get(containingBeanName)__			if (containedBeans == null) {_				containedBeans = new LinkedHashSet<String>(8)__				this.containedBeanMap.put(containingBeanName, containedBeans)__			}_			containedBeans.add(containedBeanName)__		}_		registerDependentBean(containedBeanName, containingBeanName)__	};register,a,containment,relationship,between,two,beans,e,g,between,an,inner,bean,and,its,containing,outer,bean,p,also,registers,the,containing,bean,as,dependent,on,the,contained,bean,in,terms,of,destruction,order,param,contained,bean,name,the,name,of,the,contained,inner,bean,param,containing,bean,name,the,name,of,the,containing,outer,bean,see,register,dependent,bean;public,void,register,contained,bean,string,contained,bean,name,string,containing,bean,name,synchronized,this,contained,bean,map,set,string,contained,beans,this,contained,bean,map,get,containing,bean,name,if,contained,beans,null,contained,beans,new,linked,hash,set,string,8,this,contained,bean,map,put,containing,bean,name,contained,beans,contained,beans,add,contained,bean,name,register,dependent,bean,contained,bean,name,containing,bean,name
DefaultSingletonBeanRegistry -> public void registerContainedBean(String containedBeanName, String containingBeanName);1352418897;Register a containment relationship between two beans,_e.g. between an inner bean and its containing outer bean._<p>Also registers the containing bean as dependent on the contained bean_in terms of destruction order._@param containedBeanName the name of the contained (inner) bean_@param containingBeanName the name of the containing (outer) bean_@see #registerDependentBean;public void registerContainedBean(String containedBeanName, String containingBeanName) {_		synchronized (this.containedBeanMap) {_			Set<String> containedBeans = this.containedBeanMap.get(containingBeanName)__			if (containedBeans == null) {_				containedBeans = new LinkedHashSet<String>(8)__				this.containedBeanMap.put(containingBeanName, containedBeans)__			}_			containedBeans.add(containedBeanName)__		}_		registerDependentBean(containedBeanName, containingBeanName)__	};register,a,containment,relationship,between,two,beans,e,g,between,an,inner,bean,and,its,containing,outer,bean,p,also,registers,the,containing,bean,as,dependent,on,the,contained,bean,in,terms,of,destruction,order,param,contained,bean,name,the,name,of,the,contained,inner,bean,param,containing,bean,name,the,name,of,the,containing,outer,bean,see,register,dependent,bean;public,void,register,contained,bean,string,contained,bean,name,string,containing,bean,name,synchronized,this,contained,bean,map,set,string,contained,beans,this,contained,bean,map,get,containing,bean,name,if,contained,beans,null,contained,beans,new,linked,hash,set,string,8,this,contained,bean,map,put,containing,bean,name,contained,beans,contained,beans,add,contained,bean,name,register,dependent,bean,contained,bean,name,containing,bean,name
DefaultSingletonBeanRegistry -> public void registerContainedBean(String containedBeanName, String containingBeanName);1353882772;Register a containment relationship between two beans,_e.g. between an inner bean and its containing outer bean._<p>Also registers the containing bean as dependent on the contained bean_in terms of destruction order._@param containedBeanName the name of the contained (inner) bean_@param containingBeanName the name of the containing (outer) bean_@see #registerDependentBean;public void registerContainedBean(String containedBeanName, String containingBeanName) {_		synchronized (this.containedBeanMap) {_			Set<String> containedBeans = this.containedBeanMap.get(containingBeanName)__			if (containedBeans == null) {_				containedBeans = new LinkedHashSet<String>(8)__				this.containedBeanMap.put(containingBeanName, containedBeans)__			}_			containedBeans.add(containedBeanName)__		}_		registerDependentBean(containedBeanName, containingBeanName)__	};register,a,containment,relationship,between,two,beans,e,g,between,an,inner,bean,and,its,containing,outer,bean,p,also,registers,the,containing,bean,as,dependent,on,the,contained,bean,in,terms,of,destruction,order,param,contained,bean,name,the,name,of,the,contained,inner,bean,param,containing,bean,name,the,name,of,the,containing,outer,bean,see,register,dependent,bean;public,void,register,contained,bean,string,contained,bean,name,string,containing,bean,name,synchronized,this,contained,bean,map,set,string,contained,beans,this,contained,bean,map,get,containing,bean,name,if,contained,beans,null,contained,beans,new,linked,hash,set,string,8,this,contained,bean,map,put,containing,bean,name,contained,beans,contained,beans,add,contained,bean,name,register,dependent,bean,contained,bean,name,containing,bean,name
DefaultSingletonBeanRegistry -> public void registerContainedBean(String containedBeanName, String containingBeanName);1355352386;Register a containment relationship between two beans,_e.g. between an inner bean and its containing outer bean._<p>Also registers the containing bean as dependent on the contained bean_in terms of destruction order._@param containedBeanName the name of the contained (inner) bean_@param containingBeanName the name of the containing (outer) bean_@see #registerDependentBean;public void registerContainedBean(String containedBeanName, String containingBeanName) {_		synchronized (this.containedBeanMap) {_			Set<String> containedBeans = this.containedBeanMap.get(containingBeanName)__			if (containedBeans == null) {_				containedBeans = new LinkedHashSet<String>(8)__				this.containedBeanMap.put(containingBeanName, containedBeans)__			}_			containedBeans.add(containedBeanName)__		}_		registerDependentBean(containedBeanName, containingBeanName)__	};register,a,containment,relationship,between,two,beans,e,g,between,an,inner,bean,and,its,containing,outer,bean,p,also,registers,the,containing,bean,as,dependent,on,the,contained,bean,in,terms,of,destruction,order,param,contained,bean,name,the,name,of,the,contained,inner,bean,param,containing,bean,name,the,name,of,the,containing,outer,bean,see,register,dependent,bean;public,void,register,contained,bean,string,contained,bean,name,string,containing,bean,name,synchronized,this,contained,bean,map,set,string,contained,beans,this,contained,bean,map,get,containing,bean,name,if,contained,beans,null,contained,beans,new,linked,hash,set,string,8,this,contained,bean,map,put,containing,bean,name,contained,beans,contained,beans,add,contained,bean,name,register,dependent,bean,contained,bean,name,containing,bean,name
DefaultSingletonBeanRegistry -> public void registerContainedBean(String containedBeanName, String containingBeanName);1356735495;Register a containment relationship between two beans,_e.g. between an inner bean and its containing outer bean._<p>Also registers the containing bean as dependent on the contained bean_in terms of destruction order._@param containedBeanName the name of the contained (inner) bean_@param containingBeanName the name of the containing (outer) bean_@see #registerDependentBean;public void registerContainedBean(String containedBeanName, String containingBeanName) {_		synchronized (this.containedBeanMap) {_			Set<String> containedBeans = this.containedBeanMap.get(containingBeanName)__			if (containedBeans == null) {_				containedBeans = new LinkedHashSet<String>(8)__				this.containedBeanMap.put(containingBeanName, containedBeans)__			}_			containedBeans.add(containedBeanName)__		}_		registerDependentBean(containedBeanName, containingBeanName)__	};register,a,containment,relationship,between,two,beans,e,g,between,an,inner,bean,and,its,containing,outer,bean,p,also,registers,the,containing,bean,as,dependent,on,the,contained,bean,in,terms,of,destruction,order,param,contained,bean,name,the,name,of,the,contained,inner,bean,param,containing,bean,name,the,name,of,the,containing,outer,bean,see,register,dependent,bean;public,void,register,contained,bean,string,contained,bean,name,string,containing,bean,name,synchronized,this,contained,bean,map,set,string,contained,beans,this,contained,bean,map,get,containing,bean,name,if,contained,beans,null,contained,beans,new,linked,hash,set,string,8,this,contained,bean,map,put,containing,bean,name,contained,beans,contained,beans,add,contained,bean,name,register,dependent,bean,contained,bean,name,containing,bean,name
DefaultSingletonBeanRegistry -> public void registerContainedBean(String containedBeanName, String containingBeanName);1357119239;Register a containment relationship between two beans,_e.g. between an inner bean and its containing outer bean._<p>Also registers the containing bean as dependent on the contained bean_in terms of destruction order._@param containedBeanName the name of the contained (inner) bean_@param containingBeanName the name of the containing (outer) bean_@see #registerDependentBean;public void registerContainedBean(String containedBeanName, String containingBeanName) {_		synchronized (this.containedBeanMap) {_			Set<String> containedBeans = this.containedBeanMap.get(containingBeanName)__			if (containedBeans == null) {_				containedBeans = new LinkedHashSet<String>(8)__				this.containedBeanMap.put(containingBeanName, containedBeans)__			}_			containedBeans.add(containedBeanName)__		}_		registerDependentBean(containedBeanName, containingBeanName)__	};register,a,containment,relationship,between,two,beans,e,g,between,an,inner,bean,and,its,containing,outer,bean,p,also,registers,the,containing,bean,as,dependent,on,the,contained,bean,in,terms,of,destruction,order,param,contained,bean,name,the,name,of,the,contained,inner,bean,param,containing,bean,name,the,name,of,the,containing,outer,bean,see,register,dependent,bean;public,void,register,contained,bean,string,contained,bean,name,string,containing,bean,name,synchronized,this,contained,bean,map,set,string,contained,beans,this,contained,bean,map,get,containing,bean,name,if,contained,beans,null,contained,beans,new,linked,hash,set,string,8,this,contained,bean,map,put,containing,bean,name,contained,beans,contained,beans,add,contained,bean,name,register,dependent,bean,contained,bean,name,containing,bean,name
DefaultSingletonBeanRegistry -> public void registerContainedBean(String containedBeanName, String containingBeanName);1364505266;Register a containment relationship between two beans,_e.g. between an inner bean and its containing outer bean._<p>Also registers the containing bean as dependent on the contained bean_in terms of destruction order._@param containedBeanName the name of the contained (inner) bean_@param containingBeanName the name of the containing (outer) bean_@see #registerDependentBean;public void registerContainedBean(String containedBeanName, String containingBeanName) {_		synchronized (this.containedBeanMap) {_			Set<String> containedBeans = this.containedBeanMap.get(containingBeanName)__			if (containedBeans == null) {_				containedBeans = new LinkedHashSet<String>(8)__				this.containedBeanMap.put(containingBeanName, containedBeans)__			}_			containedBeans.add(containedBeanName)__		}_		registerDependentBean(containedBeanName, containingBeanName)__	};register,a,containment,relationship,between,two,beans,e,g,between,an,inner,bean,and,its,containing,outer,bean,p,also,registers,the,containing,bean,as,dependent,on,the,contained,bean,in,terms,of,destruction,order,param,contained,bean,name,the,name,of,the,contained,inner,bean,param,containing,bean,name,the,name,of,the,containing,outer,bean,see,register,dependent,bean;public,void,register,contained,bean,string,contained,bean,name,string,containing,bean,name,synchronized,this,contained,bean,map,set,string,contained,beans,this,contained,bean,map,get,containing,bean,name,if,contained,beans,null,contained,beans,new,linked,hash,set,string,8,this,contained,bean,map,put,containing,bean,name,contained,beans,contained,beans,add,contained,bean,name,register,dependent,bean,contained,bean,name,containing,bean,name
DefaultSingletonBeanRegistry -> public void registerContainedBean(String containedBeanName, String containingBeanName);1368482696;Register a containment relationship between two beans,_e.g. between an inner bean and its containing outer bean._<p>Also registers the containing bean as dependent on the contained bean_in terms of destruction order._@param containedBeanName the name of the contained (inner) bean_@param containingBeanName the name of the containing (outer) bean_@see #registerDependentBean;public void registerContainedBean(String containedBeanName, String containingBeanName) {_		synchronized (this.containedBeanMap) {_			Set<String> containedBeans = this.containedBeanMap.get(containingBeanName)__			if (containedBeans == null) {_				containedBeans = new LinkedHashSet<String>(8)__				this.containedBeanMap.put(containingBeanName, containedBeans)__			}_			containedBeans.add(containedBeanName)__		}_		registerDependentBean(containedBeanName, containingBeanName)__	};register,a,containment,relationship,between,two,beans,e,g,between,an,inner,bean,and,its,containing,outer,bean,p,also,registers,the,containing,bean,as,dependent,on,the,contained,bean,in,terms,of,destruction,order,param,contained,bean,name,the,name,of,the,contained,inner,bean,param,containing,bean,name,the,name,of,the,containing,outer,bean,see,register,dependent,bean;public,void,register,contained,bean,string,contained,bean,name,string,containing,bean,name,synchronized,this,contained,bean,map,set,string,contained,beans,this,contained,bean,map,get,containing,bean,name,if,contained,beans,null,contained,beans,new,linked,hash,set,string,8,this,contained,bean,map,put,containing,bean,name,contained,beans,contained,beans,add,contained,bean,name,register,dependent,bean,contained,bean,name,containing,bean,name
DefaultSingletonBeanRegistry -> public void registerContainedBean(String containedBeanName, String containingBeanName);1374698947;Register a containment relationship between two beans,_e.g. between an inner bean and its containing outer bean._<p>Also registers the containing bean as dependent on the contained bean_in terms of destruction order._@param containedBeanName the name of the contained (inner) bean_@param containingBeanName the name of the containing (outer) bean_@see #registerDependentBean;public void registerContainedBean(String containedBeanName, String containingBeanName) {_		synchronized (this.containedBeanMap) {_			Set<String> containedBeans = this.containedBeanMap.get(containingBeanName)__			if (containedBeans == null) {_				containedBeans = new LinkedHashSet<String>(8)__				this.containedBeanMap.put(containingBeanName, containedBeans)__			}_			containedBeans.add(containedBeanName)__		}_		registerDependentBean(containedBeanName, containingBeanName)__	};register,a,containment,relationship,between,two,beans,e,g,between,an,inner,bean,and,its,containing,outer,bean,p,also,registers,the,containing,bean,as,dependent,on,the,contained,bean,in,terms,of,destruction,order,param,contained,bean,name,the,name,of,the,contained,inner,bean,param,containing,bean,name,the,name,of,the,containing,outer,bean,see,register,dependent,bean;public,void,register,contained,bean,string,contained,bean,name,string,containing,bean,name,synchronized,this,contained,bean,map,set,string,contained,beans,this,contained,bean,map,get,containing,bean,name,if,contained,beans,null,contained,beans,new,linked,hash,set,string,8,this,contained,bean,map,put,containing,bean,name,contained,beans,contained,beans,add,contained,bean,name,register,dependent,bean,contained,bean,name,containing,bean,name
DefaultSingletonBeanRegistry -> public void registerContainedBean(String containedBeanName, String containingBeanName);1385412762;Register a containment relationship between two beans,_e.g. between an inner bean and its containing outer bean._<p>Also registers the containing bean as dependent on the contained bean_in terms of destruction order._@param containedBeanName the name of the contained (inner) bean_@param containingBeanName the name of the containing (outer) bean_@see #registerDependentBean;public void registerContainedBean(String containedBeanName, String containingBeanName) {_		synchronized (this.containedBeanMap) {_			Set<String> containedBeans = this.containedBeanMap.get(containingBeanName)__			if (containedBeans == null) {_				containedBeans = new LinkedHashSet<String>(8)__				this.containedBeanMap.put(containingBeanName, containedBeans)__			}_			containedBeans.add(containedBeanName)__		}_		registerDependentBean(containedBeanName, containingBeanName)__	};register,a,containment,relationship,between,two,beans,e,g,between,an,inner,bean,and,its,containing,outer,bean,p,also,registers,the,containing,bean,as,dependent,on,the,contained,bean,in,terms,of,destruction,order,param,contained,bean,name,the,name,of,the,contained,inner,bean,param,containing,bean,name,the,name,of,the,containing,outer,bean,see,register,dependent,bean;public,void,register,contained,bean,string,contained,bean,name,string,containing,bean,name,synchronized,this,contained,bean,map,set,string,contained,beans,this,contained,bean,map,get,containing,bean,name,if,contained,beans,null,contained,beans,new,linked,hash,set,string,8,this,contained,bean,map,put,containing,bean,name,contained,beans,contained,beans,add,contained,bean,name,register,dependent,bean,contained,bean,name,containing,bean,name
DefaultSingletonBeanRegistry -> public void registerContainedBean(String containedBeanName, String containingBeanName);1385984377;Register a containment relationship between two beans,_e.g. between an inner bean and its containing outer bean._<p>Also registers the containing bean as dependent on the contained bean_in terms of destruction order._@param containedBeanName the name of the contained (inner) bean_@param containingBeanName the name of the containing (outer) bean_@see #registerDependentBean;public void registerContainedBean(String containedBeanName, String containingBeanName) {_		synchronized (this.containedBeanMap) {_			Set<String> containedBeans = this.containedBeanMap.get(containingBeanName)__			if (containedBeans == null) {_				containedBeans = new LinkedHashSet<String>(8)__				this.containedBeanMap.put(containingBeanName, containedBeans)__			}_			containedBeans.add(containedBeanName)__		}_		registerDependentBean(containedBeanName, containingBeanName)__	};register,a,containment,relationship,between,two,beans,e,g,between,an,inner,bean,and,its,containing,outer,bean,p,also,registers,the,containing,bean,as,dependent,on,the,contained,bean,in,terms,of,destruction,order,param,contained,bean,name,the,name,of,the,contained,inner,bean,param,containing,bean,name,the,name,of,the,containing,outer,bean,see,register,dependent,bean;public,void,register,contained,bean,string,contained,bean,name,string,containing,bean,name,synchronized,this,contained,bean,map,set,string,contained,beans,this,contained,bean,map,get,containing,bean,name,if,contained,beans,null,contained,beans,new,linked,hash,set,string,8,this,contained,bean,map,put,containing,bean,name,contained,beans,contained,beans,add,contained,bean,name,register,dependent,bean,contained,bean,name,containing,bean,name
DefaultSingletonBeanRegistry -> public void registerContainedBean(String containedBeanName, String containingBeanName);1405430015;Register a containment relationship between two beans,_e.g. between an inner bean and its containing outer bean._<p>Also registers the containing bean as dependent on the contained bean_in terms of destruction order._@param containedBeanName the name of the contained (inner) bean_@param containingBeanName the name of the containing (outer) bean_@see #registerDependentBean;public void registerContainedBean(String containedBeanName, String containingBeanName) {_		synchronized (this.containedBeanMap) {_			Set<String> containedBeans = this.containedBeanMap.get(containingBeanName)__			if (containedBeans == null) {_				containedBeans = new LinkedHashSet<String>(8)__				this.containedBeanMap.put(containingBeanName, containedBeans)__			}_			containedBeans.add(containedBeanName)__		}_		registerDependentBean(containedBeanName, containingBeanName)__	};register,a,containment,relationship,between,two,beans,e,g,between,an,inner,bean,and,its,containing,outer,bean,p,also,registers,the,containing,bean,as,dependent,on,the,contained,bean,in,terms,of,destruction,order,param,contained,bean,name,the,name,of,the,contained,inner,bean,param,containing,bean,name,the,name,of,the,containing,outer,bean,see,register,dependent,bean;public,void,register,contained,bean,string,contained,bean,name,string,containing,bean,name,synchronized,this,contained,bean,map,set,string,contained,beans,this,contained,bean,map,get,containing,bean,name,if,contained,beans,null,contained,beans,new,linked,hash,set,string,8,this,contained,bean,map,put,containing,bean,name,contained,beans,contained,beans,add,contained,bean,name,register,dependent,bean,contained,bean,name,containing,bean,name
DefaultSingletonBeanRegistry -> public void registerContainedBean(String containedBeanName, String containingBeanName);1408528936;Register a containment relationship between two beans,_e.g. between an inner bean and its containing outer bean._<p>Also registers the containing bean as dependent on the contained bean_in terms of destruction order._@param containedBeanName the name of the contained (inner) bean_@param containingBeanName the name of the containing (outer) bean_@see #registerDependentBean;public void registerContainedBean(String containedBeanName, String containingBeanName) {_		_		Set<String> containedBeans = this.containedBeanMap.get(containingBeanName)__		if (containedBeans != null && containedBeans.contains(containedBeanName)) {_			return__		}__		_		synchronized (this.containedBeanMap) {_			containedBeans = this.containedBeanMap.get(containingBeanName)__			if (containedBeans == null) {_				containedBeans = new LinkedHashSet<String>(8)__				this.containedBeanMap.put(containingBeanName, containedBeans)__			}_			containedBeans.add(containedBeanName)__		}_		registerDependentBean(containedBeanName, containingBeanName)__	};register,a,containment,relationship,between,two,beans,e,g,between,an,inner,bean,and,its,containing,outer,bean,p,also,registers,the,containing,bean,as,dependent,on,the,contained,bean,in,terms,of,destruction,order,param,contained,bean,name,the,name,of,the,contained,inner,bean,param,containing,bean,name,the,name,of,the,containing,outer,bean,see,register,dependent,bean;public,void,register,contained,bean,string,contained,bean,name,string,containing,bean,name,set,string,contained,beans,this,contained,bean,map,get,containing,bean,name,if,contained,beans,null,contained,beans,contains,contained,bean,name,return,synchronized,this,contained,bean,map,contained,beans,this,contained,bean,map,get,containing,bean,name,if,contained,beans,null,contained,beans,new,linked,hash,set,string,8,this,contained,bean,map,put,containing,bean,name,contained,beans,contained,beans,add,contained,bean,name,register,dependent,bean,contained,bean,name,containing,bean,name
DefaultSingletonBeanRegistry -> public void registerContainedBean(String containedBeanName, String containingBeanName);1408624154;Register a containment relationship between two beans,_e.g. between an inner bean and its containing outer bean._<p>Also registers the containing bean as dependent on the contained bean_in terms of destruction order._@param containedBeanName the name of the contained (inner) bean_@param containingBeanName the name of the containing (outer) bean_@see #registerDependentBean;public void registerContainedBean(String containedBeanName, String containingBeanName) {_		_		Set<String> containedBeans = this.containedBeanMap.get(containingBeanName)__		if (containedBeans != null && containedBeans.contains(containedBeanName)) {_			return__		}__		_		synchronized (this.containedBeanMap) {_			containedBeans = this.containedBeanMap.get(containingBeanName)__			if (containedBeans == null) {_				containedBeans = new LinkedHashSet<String>(8)__				this.containedBeanMap.put(containingBeanName, containedBeans)__			}_			containedBeans.add(containedBeanName)__		}_		registerDependentBean(containedBeanName, containingBeanName)__	};register,a,containment,relationship,between,two,beans,e,g,between,an,inner,bean,and,its,containing,outer,bean,p,also,registers,the,containing,bean,as,dependent,on,the,contained,bean,in,terms,of,destruction,order,param,contained,bean,name,the,name,of,the,contained,inner,bean,param,containing,bean,name,the,name,of,the,containing,outer,bean,see,register,dependent,bean;public,void,register,contained,bean,string,contained,bean,name,string,containing,bean,name,set,string,contained,beans,this,contained,bean,map,get,containing,bean,name,if,contained,beans,null,contained,beans,contains,contained,bean,name,return,synchronized,this,contained,bean,map,contained,beans,this,contained,bean,map,get,containing,bean,name,if,contained,beans,null,contained,beans,new,linked,hash,set,string,8,this,contained,bean,map,put,containing,bean,name,contained,beans,contained,beans,add,contained,bean,name,register,dependent,bean,contained,bean,name,containing,bean,name
DefaultSingletonBeanRegistry -> public void registerContainedBean(String containedBeanName, String containingBeanName);1409688815;Register a containment relationship between two beans,_e.g. between an inner bean and its containing outer bean._<p>Also registers the containing bean as dependent on the contained bean_in terms of destruction order._@param containedBeanName the name of the contained (inner) bean_@param containingBeanName the name of the containing (outer) bean_@see #registerDependentBean;public void registerContainedBean(String containedBeanName, String containingBeanName) {_		_		Set<String> containedBeans = this.containedBeanMap.get(containingBeanName)__		if (containedBeans != null && containedBeans.contains(containedBeanName)) {_			return__		}__		_		synchronized (this.containedBeanMap) {_			containedBeans = this.containedBeanMap.get(containingBeanName)__			if (containedBeans == null) {_				containedBeans = new LinkedHashSet<String>(8)__				this.containedBeanMap.put(containingBeanName, containedBeans)__			}_			containedBeans.add(containedBeanName)__		}_		registerDependentBean(containedBeanName, containingBeanName)__	};register,a,containment,relationship,between,two,beans,e,g,between,an,inner,bean,and,its,containing,outer,bean,p,also,registers,the,containing,bean,as,dependent,on,the,contained,bean,in,terms,of,destruction,order,param,contained,bean,name,the,name,of,the,contained,inner,bean,param,containing,bean,name,the,name,of,the,containing,outer,bean,see,register,dependent,bean;public,void,register,contained,bean,string,contained,bean,name,string,containing,bean,name,set,string,contained,beans,this,contained,bean,map,get,containing,bean,name,if,contained,beans,null,contained,beans,contains,contained,bean,name,return,synchronized,this,contained,bean,map,contained,beans,this,contained,bean,map,get,containing,bean,name,if,contained,beans,null,contained,beans,new,linked,hash,set,string,8,this,contained,bean,map,put,containing,bean,name,contained,beans,contained,beans,add,contained,bean,name,register,dependent,bean,contained,bean,name,containing,bean,name
DefaultSingletonBeanRegistry -> public void registerContainedBean(String containedBeanName, String containingBeanName);1417966231;Register a containment relationship between two beans,_e.g. between an inner bean and its containing outer bean._<p>Also registers the containing bean as dependent on the contained bean_in terms of destruction order._@param containedBeanName the name of the contained (inner) bean_@param containingBeanName the name of the containing (outer) bean_@see #registerDependentBean;public void registerContainedBean(String containedBeanName, String containingBeanName) {_		_		Set<String> containedBeans = this.containedBeanMap.get(containingBeanName)__		if (containedBeans != null && containedBeans.contains(containedBeanName)) {_			return__		}__		_		synchronized (this.containedBeanMap) {_			containedBeans = this.containedBeanMap.get(containingBeanName)__			if (containedBeans == null) {_				containedBeans = new LinkedHashSet<String>(8)__				this.containedBeanMap.put(containingBeanName, containedBeans)__			}_			containedBeans.add(containedBeanName)__		}_		registerDependentBean(containedBeanName, containingBeanName)__	};register,a,containment,relationship,between,two,beans,e,g,between,an,inner,bean,and,its,containing,outer,bean,p,also,registers,the,containing,bean,as,dependent,on,the,contained,bean,in,terms,of,destruction,order,param,contained,bean,name,the,name,of,the,contained,inner,bean,param,containing,bean,name,the,name,of,the,containing,outer,bean,see,register,dependent,bean;public,void,register,contained,bean,string,contained,bean,name,string,containing,bean,name,set,string,contained,beans,this,contained,bean,map,get,containing,bean,name,if,contained,beans,null,contained,beans,contains,contained,bean,name,return,synchronized,this,contained,bean,map,contained,beans,this,contained,bean,map,get,containing,bean,name,if,contained,beans,null,contained,beans,new,linked,hash,set,string,8,this,contained,bean,map,put,containing,bean,name,contained,beans,contained,beans,add,contained,bean,name,register,dependent,bean,contained,bean,name,containing,bean,name
DefaultSingletonBeanRegistry -> public void registerContainedBean(String containedBeanName, String containingBeanName);1424972106;Register a containment relationship between two beans,_e.g. between an inner bean and its containing outer bean._<p>Also registers the containing bean as dependent on the contained bean_in terms of destruction order._@param containedBeanName the name of the contained (inner) bean_@param containingBeanName the name of the containing (outer) bean_@see #registerDependentBean;public void registerContainedBean(String containedBeanName, String containingBeanName) {_		_		Set<String> containedBeans = this.containedBeanMap.get(containingBeanName)__		if (containedBeans != null && containedBeans.contains(containedBeanName)) {_			return__		}__		_		synchronized (this.containedBeanMap) {_			containedBeans = this.containedBeanMap.get(containingBeanName)__			if (containedBeans == null) {_				containedBeans = new LinkedHashSet<String>(8)__				this.containedBeanMap.put(containingBeanName, containedBeans)__			}_			containedBeans.add(containedBeanName)__		}_		registerDependentBean(containedBeanName, containingBeanName)__	};register,a,containment,relationship,between,two,beans,e,g,between,an,inner,bean,and,its,containing,outer,bean,p,also,registers,the,containing,bean,as,dependent,on,the,contained,bean,in,terms,of,destruction,order,param,contained,bean,name,the,name,of,the,contained,inner,bean,param,containing,bean,name,the,name,of,the,containing,outer,bean,see,register,dependent,bean;public,void,register,contained,bean,string,contained,bean,name,string,containing,bean,name,set,string,contained,beans,this,contained,bean,map,get,containing,bean,name,if,contained,beans,null,contained,beans,contains,contained,bean,name,return,synchronized,this,contained,bean,map,contained,beans,this,contained,bean,map,get,containing,bean,name,if,contained,beans,null,contained,beans,new,linked,hash,set,string,8,this,contained,bean,map,put,containing,bean,name,contained,beans,contained,beans,add,contained,bean,name,register,dependent,bean,contained,bean,name,containing,bean,name
DefaultSingletonBeanRegistry -> public void registerContainedBean(String containedBeanName, String containingBeanName);1447399860;Register a containment relationship between two beans,_e.g. between an inner bean and its containing outer bean._<p>Also registers the containing bean as dependent on the contained bean_in terms of destruction order._@param containedBeanName the name of the contained (inner) bean_@param containingBeanName the name of the containing (outer) bean_@see #registerDependentBean;public void registerContainedBean(String containedBeanName, String containingBeanName) {_		_		Set<String> containedBeans = this.containedBeanMap.get(containingBeanName)__		if (containedBeans != null && containedBeans.contains(containedBeanName)) {_			return__		}__		_		synchronized (this.containedBeanMap) {_			containedBeans = this.containedBeanMap.get(containingBeanName)__			if (containedBeans == null) {_				containedBeans = new LinkedHashSet<String>(8)__				this.containedBeanMap.put(containingBeanName, containedBeans)__			}_			containedBeans.add(containedBeanName)__		}_		registerDependentBean(containedBeanName, containingBeanName)__	};register,a,containment,relationship,between,two,beans,e,g,between,an,inner,bean,and,its,containing,outer,bean,p,also,registers,the,containing,bean,as,dependent,on,the,contained,bean,in,terms,of,destruction,order,param,contained,bean,name,the,name,of,the,contained,inner,bean,param,containing,bean,name,the,name,of,the,containing,outer,bean,see,register,dependent,bean;public,void,register,contained,bean,string,contained,bean,name,string,containing,bean,name,set,string,contained,beans,this,contained,bean,map,get,containing,bean,name,if,contained,beans,null,contained,beans,contains,contained,bean,name,return,synchronized,this,contained,bean,map,contained,beans,this,contained,bean,map,get,containing,bean,name,if,contained,beans,null,contained,beans,new,linked,hash,set,string,8,this,contained,bean,map,put,containing,bean,name,contained,beans,contained,beans,add,contained,bean,name,register,dependent,bean,contained,bean,name,containing,bean,name
DefaultSingletonBeanRegistry -> public void registerContainedBean(String containedBeanName, String containingBeanName);1467730834;Register a containment relationship between two beans,_e.g. between an inner bean and its containing outer bean._<p>Also registers the containing bean as dependent on the contained bean_in terms of destruction order._@param containedBeanName the name of the contained (inner) bean_@param containingBeanName the name of the containing (outer) bean_@see #registerDependentBean;public void registerContainedBean(String containedBeanName, String containingBeanName) {_		_		Set<String> containedBeans = this.containedBeanMap.get(containingBeanName)__		if (containedBeans != null && containedBeans.contains(containedBeanName)) {_			return__		}__		_		synchronized (this.containedBeanMap) {_			containedBeans = this.containedBeanMap.get(containingBeanName)__			if (containedBeans == null) {_				containedBeans = new LinkedHashSet<>(8)__				this.containedBeanMap.put(containingBeanName, containedBeans)__			}_			containedBeans.add(containedBeanName)__		}_		registerDependentBean(containedBeanName, containingBeanName)__	};register,a,containment,relationship,between,two,beans,e,g,between,an,inner,bean,and,its,containing,outer,bean,p,also,registers,the,containing,bean,as,dependent,on,the,contained,bean,in,terms,of,destruction,order,param,contained,bean,name,the,name,of,the,contained,inner,bean,param,containing,bean,name,the,name,of,the,containing,outer,bean,see,register,dependent,bean;public,void,register,contained,bean,string,contained,bean,name,string,containing,bean,name,set,string,contained,beans,this,contained,bean,map,get,containing,bean,name,if,contained,beans,null,contained,beans,contains,contained,bean,name,return,synchronized,this,contained,bean,map,contained,beans,this,contained,bean,map,get,containing,bean,name,if,contained,beans,null,contained,beans,new,linked,hash,set,8,this,contained,bean,map,put,containing,bean,name,contained,beans,contained,beans,add,contained,bean,name,register,dependent,bean,contained,bean,name,containing,bean,name
DefaultSingletonBeanRegistry -> public void registerContainedBean(String containedBeanName, String containingBeanName);1467810738;Register a containment relationship between two beans,_e.g. between an inner bean and its containing outer bean._<p>Also registers the containing bean as dependent on the contained bean_in terms of destruction order._@param containedBeanName the name of the contained (inner) bean_@param containingBeanName the name of the containing (outer) bean_@see #registerDependentBean;public void registerContainedBean(String containedBeanName, String containingBeanName) {_		_		Set<String> containedBeans = this.containedBeanMap.get(containingBeanName)__		if (containedBeans != null && containedBeans.contains(containedBeanName)) {_			return__		}__		_		synchronized (this.containedBeanMap) {_			containedBeans = this.containedBeanMap.get(containingBeanName)__			if (containedBeans == null) {_				containedBeans = new LinkedHashSet<>(8)__				this.containedBeanMap.put(containingBeanName, containedBeans)__			}_			containedBeans.add(containedBeanName)__		}_		registerDependentBean(containedBeanName, containingBeanName)__	};register,a,containment,relationship,between,two,beans,e,g,between,an,inner,bean,and,its,containing,outer,bean,p,also,registers,the,containing,bean,as,dependent,on,the,contained,bean,in,terms,of,destruction,order,param,contained,bean,name,the,name,of,the,contained,inner,bean,param,containing,bean,name,the,name,of,the,containing,outer,bean,see,register,dependent,bean;public,void,register,contained,bean,string,contained,bean,name,string,containing,bean,name,set,string,contained,beans,this,contained,bean,map,get,containing,bean,name,if,contained,beans,null,contained,beans,contains,contained,bean,name,return,synchronized,this,contained,bean,map,contained,beans,this,contained,bean,map,get,containing,bean,name,if,contained,beans,null,contained,beans,new,linked,hash,set,8,this,contained,bean,map,put,containing,bean,name,contained,beans,contained,beans,add,contained,bean,name,register,dependent,bean,contained,bean,name,containing,bean,name
DefaultSingletonBeanRegistry -> public void registerContainedBean(String containedBeanName, String containingBeanName);1469561191;Register a containment relationship between two beans,_e.g. between an inner bean and its containing outer bean._<p>Also registers the containing bean as dependent on the contained bean_in terms of destruction order._@param containedBeanName the name of the contained (inner) bean_@param containingBeanName the name of the containing (outer) bean_@see #registerDependentBean;public void registerContainedBean(String containedBeanName, String containingBeanName) {_		_		Set<String> containedBeans = this.containedBeanMap.get(containingBeanName)__		if (containedBeans != null && containedBeans.contains(containedBeanName)) {_			return__		}__		_		synchronized (this.containedBeanMap) {_			containedBeans = this.containedBeanMap.get(containingBeanName)__			if (containedBeans == null) {_				containedBeans = new LinkedHashSet<>(8)__				this.containedBeanMap.put(containingBeanName, containedBeans)__			}_			containedBeans.add(containedBeanName)__		}_		registerDependentBean(containedBeanName, containingBeanName)__	};register,a,containment,relationship,between,two,beans,e,g,between,an,inner,bean,and,its,containing,outer,bean,p,also,registers,the,containing,bean,as,dependent,on,the,contained,bean,in,terms,of,destruction,order,param,contained,bean,name,the,name,of,the,contained,inner,bean,param,containing,bean,name,the,name,of,the,containing,outer,bean,see,register,dependent,bean;public,void,register,contained,bean,string,contained,bean,name,string,containing,bean,name,set,string,contained,beans,this,contained,bean,map,get,containing,bean,name,if,contained,beans,null,contained,beans,contains,contained,bean,name,return,synchronized,this,contained,bean,map,contained,beans,this,contained,bean,map,get,containing,bean,name,if,contained,beans,null,contained,beans,new,linked,hash,set,8,this,contained,bean,map,put,containing,bean,name,contained,beans,contained,beans,add,contained,bean,name,register,dependent,bean,contained,bean,name,containing,bean,name
DefaultSingletonBeanRegistry -> public void registerContainedBean(String containedBeanName, String containingBeanName);1478538021;Register a containment relationship between two beans,_e.g. between an inner bean and its containing outer bean._<p>Also registers the containing bean as dependent on the contained bean_in terms of destruction order._@param containedBeanName the name of the contained (inner) bean_@param containingBeanName the name of the containing (outer) bean_@see #registerDependentBean;public void registerContainedBean(String containedBeanName, String containingBeanName) {_		_		Set<String> containedBeans = this.containedBeanMap.get(containingBeanName)__		if (containedBeans != null && containedBeans.contains(containedBeanName)) {_			return__		}__		_		synchronized (this.containedBeanMap) {_			containedBeans = this.containedBeanMap.get(containingBeanName)__			if (containedBeans == null) {_				containedBeans = new LinkedHashSet<>(8)__				this.containedBeanMap.put(containingBeanName, containedBeans)__			}_			containedBeans.add(containedBeanName)__		}_		registerDependentBean(containedBeanName, containingBeanName)__	};register,a,containment,relationship,between,two,beans,e,g,between,an,inner,bean,and,its,containing,outer,bean,p,also,registers,the,containing,bean,as,dependent,on,the,contained,bean,in,terms,of,destruction,order,param,contained,bean,name,the,name,of,the,contained,inner,bean,param,containing,bean,name,the,name,of,the,containing,outer,bean,see,register,dependent,bean;public,void,register,contained,bean,string,contained,bean,name,string,containing,bean,name,set,string,contained,beans,this,contained,bean,map,get,containing,bean,name,if,contained,beans,null,contained,beans,contains,contained,bean,name,return,synchronized,this,contained,bean,map,contained,beans,this,contained,bean,map,get,containing,bean,name,if,contained,beans,null,contained,beans,new,linked,hash,set,8,this,contained,bean,map,put,containing,bean,name,contained,beans,contained,beans,add,contained,bean,name,register,dependent,bean,contained,bean,name,containing,bean,name
DefaultSingletonBeanRegistry -> public void registerContainedBean(String containedBeanName, String containingBeanName);1495868221;Register a containment relationship between two beans,_e.g. between an inner bean and its containing outer bean._<p>Also registers the containing bean as dependent on the contained bean_in terms of destruction order._@param containedBeanName the name of the contained (inner) bean_@param containingBeanName the name of the containing (outer) bean_@see #registerDependentBean;public void registerContainedBean(String containedBeanName, String containingBeanName) {_		_		Set<String> containedBeans = this.containedBeanMap.get(containingBeanName)__		if (containedBeans != null && containedBeans.contains(containedBeanName)) {_			return__		}__		_		synchronized (this.containedBeanMap) {_			containedBeans = this.containedBeanMap.get(containingBeanName)__			if (containedBeans == null) {_				containedBeans = new LinkedHashSet<>(8)__				this.containedBeanMap.put(containingBeanName, containedBeans)__			}_			containedBeans.add(containedBeanName)__		}_		registerDependentBean(containedBeanName, containingBeanName)__	};register,a,containment,relationship,between,two,beans,e,g,between,an,inner,bean,and,its,containing,outer,bean,p,also,registers,the,containing,bean,as,dependent,on,the,contained,bean,in,terms,of,destruction,order,param,contained,bean,name,the,name,of,the,contained,inner,bean,param,containing,bean,name,the,name,of,the,containing,outer,bean,see,register,dependent,bean;public,void,register,contained,bean,string,contained,bean,name,string,containing,bean,name,set,string,contained,beans,this,contained,bean,map,get,containing,bean,name,if,contained,beans,null,contained,beans,contains,contained,bean,name,return,synchronized,this,contained,bean,map,contained,beans,this,contained,bean,map,get,containing,bean,name,if,contained,beans,null,contained,beans,new,linked,hash,set,8,this,contained,bean,map,put,containing,bean,name,contained,beans,contained,beans,add,contained,bean,name,register,dependent,bean,contained,bean,name,containing,bean,name
DefaultSingletonBeanRegistry -> public void registerContainedBean(String containedBeanName, String containingBeanName);1496259743;Register a containment relationship between two beans,_e.g. between an inner bean and its containing outer bean._<p>Also registers the containing bean as dependent on the contained bean_in terms of destruction order._@param containedBeanName the name of the contained (inner) bean_@param containingBeanName the name of the containing (outer) bean_@see #registerDependentBean;public void registerContainedBean(String containedBeanName, String containingBeanName) {_		_		Set<String> containedBeans = this.containedBeanMap.get(containingBeanName)__		if (containedBeans != null && containedBeans.contains(containedBeanName)) {_			return__		}__		_		synchronized (this.containedBeanMap) {_			containedBeans = this.containedBeanMap.get(containingBeanName)__			if (containedBeans == null) {_				containedBeans = new LinkedHashSet<>(8)__				this.containedBeanMap.put(containingBeanName, containedBeans)__			}_			containedBeans.add(containedBeanName)__		}_		registerDependentBean(containedBeanName, containingBeanName)__	};register,a,containment,relationship,between,two,beans,e,g,between,an,inner,bean,and,its,containing,outer,bean,p,also,registers,the,containing,bean,as,dependent,on,the,contained,bean,in,terms,of,destruction,order,param,contained,bean,name,the,name,of,the,contained,inner,bean,param,containing,bean,name,the,name,of,the,containing,outer,bean,see,register,dependent,bean;public,void,register,contained,bean,string,contained,bean,name,string,containing,bean,name,set,string,contained,beans,this,contained,bean,map,get,containing,bean,name,if,contained,beans,null,contained,beans,contains,contained,bean,name,return,synchronized,this,contained,bean,map,contained,beans,this,contained,bean,map,get,containing,bean,name,if,contained,beans,null,contained,beans,new,linked,hash,set,8,this,contained,bean,map,put,containing,bean,name,contained,beans,contained,beans,add,contained,bean,name,register,dependent,bean,contained,bean,name,containing,bean,name
DefaultSingletonBeanRegistry -> public void registerContainedBean(String containedBeanName, String containingBeanName);1496837955;Register a containment relationship between two beans,_e.g. between an inner bean and its containing outer bean._<p>Also registers the containing bean as dependent on the contained bean_in terms of destruction order._@param containedBeanName the name of the contained (inner) bean_@param containingBeanName the name of the containing (outer) bean_@see #registerDependentBean;public void registerContainedBean(String containedBeanName, String containingBeanName) {_		_		Set<String> containedBeans = this.containedBeanMap.get(containingBeanName)__		if (containedBeans != null && containedBeans.contains(containedBeanName)) {_			return__		}__		_		synchronized (this.containedBeanMap) {_			containedBeans = this.containedBeanMap.get(containingBeanName)__			if (containedBeans == null) {_				containedBeans = new LinkedHashSet<>(8)__				this.containedBeanMap.put(containingBeanName, containedBeans)__			}_			containedBeans.add(containedBeanName)__		}_		registerDependentBean(containedBeanName, containingBeanName)__	};register,a,containment,relationship,between,two,beans,e,g,between,an,inner,bean,and,its,containing,outer,bean,p,also,registers,the,containing,bean,as,dependent,on,the,contained,bean,in,terms,of,destruction,order,param,contained,bean,name,the,name,of,the,contained,inner,bean,param,containing,bean,name,the,name,of,the,containing,outer,bean,see,register,dependent,bean;public,void,register,contained,bean,string,contained,bean,name,string,containing,bean,name,set,string,contained,beans,this,contained,bean,map,get,containing,bean,name,if,contained,beans,null,contained,beans,contains,contained,bean,name,return,synchronized,this,contained,bean,map,contained,beans,this,contained,bean,map,get,containing,bean,name,if,contained,beans,null,contained,beans,new,linked,hash,set,8,this,contained,bean,map,put,containing,bean,name,contained,beans,contained,beans,add,contained,bean,name,register,dependent,bean,contained,bean,name,containing,bean,name
DefaultSingletonBeanRegistry -> public void registerContainedBean(String containedBeanName, String containingBeanName);1498780456;Register a containment relationship between two beans,_e.g. between an inner bean and its containing outer bean._<p>Also registers the containing bean as dependent on the contained bean_in terms of destruction order._@param containedBeanName the name of the contained (inner) bean_@param containingBeanName the name of the containing (outer) bean_@see #registerDependentBean;public void registerContainedBean(String containedBeanName, String containingBeanName) {_		_		Set<String> containedBeans = this.containedBeanMap.get(containingBeanName)__		if (containedBeans != null && containedBeans.contains(containedBeanName)) {_			return__		}__		_		synchronized (this.containedBeanMap) {_			containedBeans = this.containedBeanMap.get(containingBeanName)__			if (containedBeans == null) {_				containedBeans = new LinkedHashSet<>(8)__				this.containedBeanMap.put(containingBeanName, containedBeans)__			}_			containedBeans.add(containedBeanName)__		}_		registerDependentBean(containedBeanName, containingBeanName)__	};register,a,containment,relationship,between,two,beans,e,g,between,an,inner,bean,and,its,containing,outer,bean,p,also,registers,the,containing,bean,as,dependent,on,the,contained,bean,in,terms,of,destruction,order,param,contained,bean,name,the,name,of,the,contained,inner,bean,param,containing,bean,name,the,name,of,the,containing,outer,bean,see,register,dependent,bean;public,void,register,contained,bean,string,contained,bean,name,string,containing,bean,name,set,string,contained,beans,this,contained,bean,map,get,containing,bean,name,if,contained,beans,null,contained,beans,contains,contained,bean,name,return,synchronized,this,contained,bean,map,contained,beans,this,contained,bean,map,get,containing,bean,name,if,contained,beans,null,contained,beans,new,linked,hash,set,8,this,contained,bean,map,put,containing,bean,name,contained,beans,contained,beans,add,contained,bean,name,register,dependent,bean,contained,bean,name,containing,bean,name
DefaultSingletonBeanRegistry -> public void registerContainedBean(String containedBeanName, String containingBeanName);1502974979;Register a containment relationship between two beans,_e.g. between an inner bean and its containing outer bean._<p>Also registers the containing bean as dependent on the contained bean_in terms of destruction order._@param containedBeanName the name of the contained (inner) bean_@param containingBeanName the name of the containing (outer) bean_@see #registerDependentBean;public void registerContainedBean(String containedBeanName, String containingBeanName) {_		_		Set<String> containedBeans = this.containedBeanMap.get(containingBeanName)__		if (containedBeans != null && containedBeans.contains(containedBeanName)) {_			return__		}__		_		synchronized (this.containedBeanMap) {_			containedBeans = this.containedBeanMap.get(containingBeanName)__			if (containedBeans == null) {_				containedBeans = new LinkedHashSet<>(8)__				this.containedBeanMap.put(containingBeanName, containedBeans)__			}_			containedBeans.add(containedBeanName)__		}_		registerDependentBean(containedBeanName, containingBeanName)__	};register,a,containment,relationship,between,two,beans,e,g,between,an,inner,bean,and,its,containing,outer,bean,p,also,registers,the,containing,bean,as,dependent,on,the,contained,bean,in,terms,of,destruction,order,param,contained,bean,name,the,name,of,the,contained,inner,bean,param,containing,bean,name,the,name,of,the,containing,outer,bean,see,register,dependent,bean;public,void,register,contained,bean,string,contained,bean,name,string,containing,bean,name,set,string,contained,beans,this,contained,bean,map,get,containing,bean,name,if,contained,beans,null,contained,beans,contains,contained,bean,name,return,synchronized,this,contained,bean,map,contained,beans,this,contained,bean,map,get,containing,bean,name,if,contained,beans,null,contained,beans,new,linked,hash,set,8,this,contained,bean,map,put,containing,bean,name,contained,beans,contained,beans,add,contained,bean,name,register,dependent,bean,contained,bean,name,containing,bean,name
DefaultSingletonBeanRegistry -> public void registerContainedBean(String containedBeanName, String containingBeanName);1503007895;Register a containment relationship between two beans,_e.g. between an inner bean and its containing outer bean._<p>Also registers the containing bean as dependent on the contained bean_in terms of destruction order._@param containedBeanName the name of the contained (inner) bean_@param containingBeanName the name of the containing (outer) bean_@see #registerDependentBean;public void registerContainedBean(String containedBeanName, String containingBeanName) {_		_		Set<String> containedBeans = this.containedBeanMap.get(containingBeanName)__		if (containedBeans != null && containedBeans.contains(containedBeanName)) {_			return__		}__		_		synchronized (this.containedBeanMap) {_			containedBeans = this.containedBeanMap.get(containingBeanName)__			if (containedBeans == null) {_				containedBeans = new LinkedHashSet<>(8)__				this.containedBeanMap.put(containingBeanName, containedBeans)__			}_			containedBeans.add(containedBeanName)__		}_		registerDependentBean(containedBeanName, containingBeanName)__	};register,a,containment,relationship,between,two,beans,e,g,between,an,inner,bean,and,its,containing,outer,bean,p,also,registers,the,containing,bean,as,dependent,on,the,contained,bean,in,terms,of,destruction,order,param,contained,bean,name,the,name,of,the,contained,inner,bean,param,containing,bean,name,the,name,of,the,containing,outer,bean,see,register,dependent,bean;public,void,register,contained,bean,string,contained,bean,name,string,containing,bean,name,set,string,contained,beans,this,contained,bean,map,get,containing,bean,name,if,contained,beans,null,contained,beans,contains,contained,bean,name,return,synchronized,this,contained,bean,map,contained,beans,this,contained,bean,map,get,containing,bean,name,if,contained,beans,null,contained,beans,new,linked,hash,set,8,this,contained,bean,map,put,containing,bean,name,contained,beans,contained,beans,add,contained,bean,name,register,dependent,bean,contained,bean,name,containing,bean,name
DefaultSingletonBeanRegistry -> public void registerContainedBean(String containedBeanName, String containingBeanName);1518810557;Register a containment relationship between two beans,_e.g. between an inner bean and its containing outer bean._<p>Also registers the containing bean as dependent on the contained bean_in terms of destruction order._@param containedBeanName the name of the contained (inner) bean_@param containingBeanName the name of the containing (outer) bean_@see #registerDependentBean;public void registerContainedBean(String containedBeanName, String containingBeanName) {_		_		Set<String> containedBeans = this.containedBeanMap.get(containingBeanName)__		if (containedBeans != null && containedBeans.contains(containedBeanName)) {_			return__		}__		_		synchronized (this.containedBeanMap) {_			containedBeans = this.containedBeanMap.get(containingBeanName)__			if (containedBeans == null) {_				containedBeans = new LinkedHashSet<>(8)__				this.containedBeanMap.put(containingBeanName, containedBeans)__			}_			containedBeans.add(containedBeanName)__		}_		registerDependentBean(containedBeanName, containingBeanName)__	};register,a,containment,relationship,between,two,beans,e,g,between,an,inner,bean,and,its,containing,outer,bean,p,also,registers,the,containing,bean,as,dependent,on,the,contained,bean,in,terms,of,destruction,order,param,contained,bean,name,the,name,of,the,contained,inner,bean,param,containing,bean,name,the,name,of,the,containing,outer,bean,see,register,dependent,bean;public,void,register,contained,bean,string,contained,bean,name,string,containing,bean,name,set,string,contained,beans,this,contained,bean,map,get,containing,bean,name,if,contained,beans,null,contained,beans,contains,contained,bean,name,return,synchronized,this,contained,bean,map,contained,beans,this,contained,bean,map,get,containing,bean,name,if,contained,beans,null,contained,beans,new,linked,hash,set,8,this,contained,bean,map,put,containing,bean,name,contained,beans,contained,beans,add,contained,bean,name,register,dependent,bean,contained,bean,name,containing,bean,name
DefaultSingletonBeanRegistry -> public void registerContainedBean(String containedBeanName, String containingBeanName);1521822873;Register a containment relationship between two beans,_e.g. between an inner bean and its containing outer bean._<p>Also registers the containing bean as dependent on the contained bean_in terms of destruction order._@param containedBeanName the name of the contained (inner) bean_@param containingBeanName the name of the containing (outer) bean_@see #registerDependentBean;public void registerContainedBean(String containedBeanName, String containingBeanName) {_		_		Set<String> containedBeans = this.containedBeanMap.get(containingBeanName)__		if (containedBeans != null && containedBeans.contains(containedBeanName)) {_			return__		}__		_		synchronized (this.containedBeanMap) {_			containedBeans = this.containedBeanMap.computeIfAbsent(containingBeanName, k -> new LinkedHashSet<>(8))__			containedBeans.add(containedBeanName)__		}_		registerDependentBean(containedBeanName, containingBeanName)__	};register,a,containment,relationship,between,two,beans,e,g,between,an,inner,bean,and,its,containing,outer,bean,p,also,registers,the,containing,bean,as,dependent,on,the,contained,bean,in,terms,of,destruction,order,param,contained,bean,name,the,name,of,the,contained,inner,bean,param,containing,bean,name,the,name,of,the,containing,outer,bean,see,register,dependent,bean;public,void,register,contained,bean,string,contained,bean,name,string,containing,bean,name,set,string,contained,beans,this,contained,bean,map,get,containing,bean,name,if,contained,beans,null,contained,beans,contains,contained,bean,name,return,synchronized,this,contained,bean,map,contained,beans,this,contained,bean,map,compute,if,absent,containing,bean,name,k,new,linked,hash,set,8,contained,beans,add,contained,bean,name,register,dependent,bean,contained,bean,name,containing,bean,name
DefaultSingletonBeanRegistry -> public void registerContainedBean(String containedBeanName, String containingBeanName);1521905451;Register a containment relationship between two beans,_e.g. between an inner bean and its containing outer bean._<p>Also registers the containing bean as dependent on the contained bean_in terms of destruction order._@param containedBeanName the name of the contained (inner) bean_@param containingBeanName the name of the containing (outer) bean_@see #registerDependentBean;public void registerContainedBean(String containedBeanName, String containingBeanName) {_		synchronized (this.containedBeanMap) {_			Set<String> containedBeans =_					this.containedBeanMap.computeIfAbsent(containingBeanName, k -> new LinkedHashSet<>(8))__			if (!containedBeans.add(containedBeanName)) {_				return__			}_		}_		registerDependentBean(containedBeanName, containingBeanName)__	};register,a,containment,relationship,between,two,beans,e,g,between,an,inner,bean,and,its,containing,outer,bean,p,also,registers,the,containing,bean,as,dependent,on,the,contained,bean,in,terms,of,destruction,order,param,contained,bean,name,the,name,of,the,contained,inner,bean,param,containing,bean,name,the,name,of,the,containing,outer,bean,see,register,dependent,bean;public,void,register,contained,bean,string,contained,bean,name,string,containing,bean,name,synchronized,this,contained,bean,map,set,string,contained,beans,this,contained,bean,map,compute,if,absent,containing,bean,name,k,new,linked,hash,set,8,if,contained,beans,add,contained,bean,name,return,register,dependent,bean,contained,bean,name,containing,bean,name
DefaultSingletonBeanRegistry -> public void registerContainedBean(String containedBeanName, String containingBeanName);1527623493;Register a containment relationship between two beans,_e.g. between an inner bean and its containing outer bean._<p>Also registers the containing bean as dependent on the contained bean_in terms of destruction order._@param containedBeanName the name of the contained (inner) bean_@param containingBeanName the name of the containing (outer) bean_@see #registerDependentBean;public void registerContainedBean(String containedBeanName, String containingBeanName) {_		synchronized (this.containedBeanMap) {_			Set<String> containedBeans =_					this.containedBeanMap.computeIfAbsent(containingBeanName, k -> new LinkedHashSet<>(8))__			if (!containedBeans.add(containedBeanName)) {_				return__			}_		}_		registerDependentBean(containedBeanName, containingBeanName)__	};register,a,containment,relationship,between,two,beans,e,g,between,an,inner,bean,and,its,containing,outer,bean,p,also,registers,the,containing,bean,as,dependent,on,the,contained,bean,in,terms,of,destruction,order,param,contained,bean,name,the,name,of,the,contained,inner,bean,param,containing,bean,name,the,name,of,the,containing,outer,bean,see,register,dependent,bean;public,void,register,contained,bean,string,contained,bean,name,string,containing,bean,name,synchronized,this,contained,bean,map,set,string,contained,beans,this,contained,bean,map,compute,if,absent,containing,bean,name,k,new,linked,hash,set,8,if,contained,beans,add,contained,bean,name,return,register,dependent,bean,contained,bean,name,containing,bean,name
DefaultSingletonBeanRegistry -> public void registerContainedBean(String containedBeanName, String containingBeanName);1530174524;Register a containment relationship between two beans,_e.g. between an inner bean and its containing outer bean._<p>Also registers the containing bean as dependent on the contained bean_in terms of destruction order._@param containedBeanName the name of the contained (inner) bean_@param containingBeanName the name of the containing (outer) bean_@see #registerDependentBean;public void registerContainedBean(String containedBeanName, String containingBeanName) {_		synchronized (this.containedBeanMap) {_			Set<String> containedBeans =_					this.containedBeanMap.computeIfAbsent(containingBeanName, k -> new LinkedHashSet<>(8))__			if (!containedBeans.add(containedBeanName)) {_				return__			}_		}_		registerDependentBean(containedBeanName, containingBeanName)__	};register,a,containment,relationship,between,two,beans,e,g,between,an,inner,bean,and,its,containing,outer,bean,p,also,registers,the,containing,bean,as,dependent,on,the,contained,bean,in,terms,of,destruction,order,param,contained,bean,name,the,name,of,the,contained,inner,bean,param,containing,bean,name,the,name,of,the,containing,outer,bean,see,register,dependent,bean;public,void,register,contained,bean,string,contained,bean,name,string,containing,bean,name,synchronized,this,contained,bean,map,set,string,contained,beans,this,contained,bean,map,compute,if,absent,containing,bean,name,k,new,linked,hash,set,8,if,contained,beans,add,contained,bean,name,return,register,dependent,bean,contained,bean,name,containing,bean,name
DefaultSingletonBeanRegistry -> public void registerContainedBean(String containedBeanName, String containingBeanName);1532091916;Register a containment relationship between two beans,_e.g. between an inner bean and its containing outer bean._<p>Also registers the containing bean as dependent on the contained bean_in terms of destruction order._@param containedBeanName the name of the contained (inner) bean_@param containingBeanName the name of the containing (outer) bean_@see #registerDependentBean;public void registerContainedBean(String containedBeanName, String containingBeanName) {_		synchronized (this.containedBeanMap) {_			Set<String> containedBeans =_					this.containedBeanMap.computeIfAbsent(containingBeanName, k -> new LinkedHashSet<>(8))__			if (!containedBeans.add(containedBeanName)) {_				return__			}_		}_		registerDependentBean(containedBeanName, containingBeanName)__	};register,a,containment,relationship,between,two,beans,e,g,between,an,inner,bean,and,its,containing,outer,bean,p,also,registers,the,containing,bean,as,dependent,on,the,contained,bean,in,terms,of,destruction,order,param,contained,bean,name,the,name,of,the,contained,inner,bean,param,containing,bean,name,the,name,of,the,containing,outer,bean,see,register,dependent,bean;public,void,register,contained,bean,string,contained,bean,name,string,containing,bean,name,synchronized,this,contained,bean,map,set,string,contained,beans,this,contained,bean,map,compute,if,absent,containing,bean,name,k,new,linked,hash,set,8,if,contained,beans,add,contained,bean,name,return,register,dependent,bean,contained,bean,name,containing,bean,name
DefaultSingletonBeanRegistry -> public void registerContainedBean(String containedBeanName, String containingBeanName);1532706365;Register a containment relationship between two beans,_e.g. between an inner bean and its containing outer bean._<p>Also registers the containing bean as dependent on the contained bean_in terms of destruction order._@param containedBeanName the name of the contained (inner) bean_@param containingBeanName the name of the containing (outer) bean_@see #registerDependentBean;public void registerContainedBean(String containedBeanName, String containingBeanName) {_		synchronized (this.containedBeanMap) {_			Set<String> containedBeans =_					this.containedBeanMap.computeIfAbsent(containingBeanName, k -> new LinkedHashSet<>(8))__			if (!containedBeans.add(containedBeanName)) {_				return__			}_		}_		registerDependentBean(containedBeanName, containingBeanName)__	};register,a,containment,relationship,between,two,beans,e,g,between,an,inner,bean,and,its,containing,outer,bean,p,also,registers,the,containing,bean,as,dependent,on,the,contained,bean,in,terms,of,destruction,order,param,contained,bean,name,the,name,of,the,contained,inner,bean,param,containing,bean,name,the,name,of,the,containing,outer,bean,see,register,dependent,bean;public,void,register,contained,bean,string,contained,bean,name,string,containing,bean,name,synchronized,this,contained,bean,map,set,string,contained,beans,this,contained,bean,map,compute,if,absent,containing,bean,name,k,new,linked,hash,set,8,if,contained,beans,add,contained,bean,name,return,register,dependent,bean,contained,bean,name,containing,bean,name
DefaultSingletonBeanRegistry -> protected Object getSingleton(String beanName, boolean allowEarlyReference);1328020251;Return the (raw) singleton object registered under the given name._<p>Checks already instantiated singletons and also allows for an early_reference to a currently created singleton (resolving a circular reference)._@param beanName the name of the bean to look for_@param allowEarlyReference whether early references should be created or not_@return the registered singleton object, or <code>null</code> if none found;protected Object getSingleton(String beanName, boolean allowEarlyReference) {_		Object singletonObject = this.singletonObjects.get(beanName)__		if (singletonObject == null) {_			synchronized (this.singletonObjects) {_				singletonObject = this.earlySingletonObjects.get(beanName)__				if (singletonObject == null && allowEarlyReference) {_					ObjectFactory singletonFactory = this.singletonFactories.get(beanName)__					if (singletonFactory != null) {_						singletonObject = singletonFactory.getObject()__						this.earlySingletonObjects.put(beanName, singletonObject)__						this.singletonFactories.remove(beanName)__					}_				}_			}_		}_		return (singletonObject != NULL_OBJECT ? singletonObject : null)__	};return,the,raw,singleton,object,registered,under,the,given,name,p,checks,already,instantiated,singletons,and,also,allows,for,an,early,reference,to,a,currently,created,singleton,resolving,a,circular,reference,param,bean,name,the,name,of,the,bean,to,look,for,param,allow,early,reference,whether,early,references,should,be,created,or,not,return,the,registered,singleton,object,or,code,null,code,if,none,found;protected,object,get,singleton,string,bean,name,boolean,allow,early,reference,object,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,synchronized,this,singleton,objects,singleton,object,this,early,singleton,objects,get,bean,name,if,singleton,object,null,allow,early,reference,object,factory,singleton,factory,this,singleton,factories,get,bean,name,if,singleton,factory,null,singleton,object,singleton,factory,get,object,this,early,singleton,objects,put,bean,name,singleton,object,this,singleton,factories,remove,bean,name,return,singleton,object,singleton,object,null
DefaultSingletonBeanRegistry -> protected Object getSingleton(String beanName, boolean allowEarlyReference);1349872135;Return the (raw) singleton object registered under the given name._<p>Checks already instantiated singletons and also allows for an early_reference to a currently created singleton (resolving a circular reference)._@param beanName the name of the bean to look for_@param allowEarlyReference whether early references should be created or not_@return the registered singleton object, or <code>null</code> if none found;protected Object getSingleton(String beanName, boolean allowEarlyReference) {_		Object singletonObject = this.singletonObjects.get(beanName)__		if (singletonObject == null) {_			synchronized (this.singletonObjects) {_				singletonObject = this.earlySingletonObjects.get(beanName)__				if (singletonObject == null && allowEarlyReference) {_					ObjectFactory singletonFactory = this.singletonFactories.get(beanName)__					if (singletonFactory != null) {_						singletonObject = singletonFactory.getObject()__						this.earlySingletonObjects.put(beanName, singletonObject)__						this.singletonFactories.remove(beanName)__					}_				}_			}_		}_		return (singletonObject != NULL_OBJECT ? singletonObject : null)__	};return,the,raw,singleton,object,registered,under,the,given,name,p,checks,already,instantiated,singletons,and,also,allows,for,an,early,reference,to,a,currently,created,singleton,resolving,a,circular,reference,param,bean,name,the,name,of,the,bean,to,look,for,param,allow,early,reference,whether,early,references,should,be,created,or,not,return,the,registered,singleton,object,or,code,null,code,if,none,found;protected,object,get,singleton,string,bean,name,boolean,allow,early,reference,object,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,synchronized,this,singleton,objects,singleton,object,this,early,singleton,objects,get,bean,name,if,singleton,object,null,allow,early,reference,object,factory,singleton,factory,this,singleton,factories,get,bean,name,if,singleton,factory,null,singleton,object,singleton,factory,get,object,this,early,singleton,objects,put,bean,name,singleton,object,this,singleton,factories,remove,bean,name,return,singleton,object,singleton,object,null
DefaultSingletonBeanRegistry -> protected Object getSingleton(String beanName, boolean allowEarlyReference);1352412938;Return the (raw) singleton object registered under the given name._<p>Checks already instantiated singletons and also allows for an early_reference to a currently created singleton (resolving a circular reference)._@param beanName the name of the bean to look for_@param allowEarlyReference whether early references should be created or not_@return the registered singleton object, or <code>null</code> if none found;protected Object getSingleton(String beanName, boolean allowEarlyReference) {_		Object singletonObject = this.singletonObjects.get(beanName)__		if (singletonObject == null && allowEarlyReference) {_			synchronized (this.singletonObjects) {_				singletonObject = this.earlySingletonObjects.get(beanName)__				if (singletonObject == null) {_					ObjectFactory singletonFactory = this.singletonFactories.get(beanName)__					if (singletonFactory != null) {_						singletonObject = singletonFactory.getObject()__						this.earlySingletonObjects.put(beanName, singletonObject)__						this.singletonFactories.remove(beanName)__					}_				}_			}_		}_		return (singletonObject != NULL_OBJECT ? singletonObject : null)__	};return,the,raw,singleton,object,registered,under,the,given,name,p,checks,already,instantiated,singletons,and,also,allows,for,an,early,reference,to,a,currently,created,singleton,resolving,a,circular,reference,param,bean,name,the,name,of,the,bean,to,look,for,param,allow,early,reference,whether,early,references,should,be,created,or,not,return,the,registered,singleton,object,or,code,null,code,if,none,found;protected,object,get,singleton,string,bean,name,boolean,allow,early,reference,object,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,allow,early,reference,synchronized,this,singleton,objects,singleton,object,this,early,singleton,objects,get,bean,name,if,singleton,object,null,object,factory,singleton,factory,this,singleton,factories,get,bean,name,if,singleton,factory,null,singleton,object,singleton,factory,get,object,this,early,singleton,objects,put,bean,name,singleton,object,this,singleton,factories,remove,bean,name,return,singleton,object,singleton,object,null
DefaultSingletonBeanRegistry -> protected Object getSingleton(String beanName, boolean allowEarlyReference);1352418897;Return the (raw) singleton object registered under the given name._<p>Checks already instantiated singletons and also allows for an early_reference to a currently created singleton (resolving a circular reference)._@param beanName the name of the bean to look for_@param allowEarlyReference whether early references should be created or not_@return the registered singleton object, or <code>null</code> if none found;protected Object getSingleton(String beanName, boolean allowEarlyReference) {_		Object singletonObject = this.singletonObjects.get(beanName)__		if (singletonObject == null && isSingletonCurrentlyInCreation(beanName)) {_			synchronized (this.singletonObjects) {_				singletonObject = this.earlySingletonObjects.get(beanName)__				if (singletonObject == null && allowEarlyReference) {_					ObjectFactory singletonFactory = this.singletonFactories.get(beanName)__					if (singletonFactory != null) {_						singletonObject = singletonFactory.getObject()__						this.earlySingletonObjects.put(beanName, singletonObject)__						this.singletonFactories.remove(beanName)__					}_				}_			}_		}_		return (singletonObject != NULL_OBJECT ? singletonObject : null)__	};return,the,raw,singleton,object,registered,under,the,given,name,p,checks,already,instantiated,singletons,and,also,allows,for,an,early,reference,to,a,currently,created,singleton,resolving,a,circular,reference,param,bean,name,the,name,of,the,bean,to,look,for,param,allow,early,reference,whether,early,references,should,be,created,or,not,return,the,registered,singleton,object,or,code,null,code,if,none,found;protected,object,get,singleton,string,bean,name,boolean,allow,early,reference,object,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,is,singleton,currently,in,creation,bean,name,synchronized,this,singleton,objects,singleton,object,this,early,singleton,objects,get,bean,name,if,singleton,object,null,allow,early,reference,object,factory,singleton,factory,this,singleton,factories,get,bean,name,if,singleton,factory,null,singleton,object,singleton,factory,get,object,this,early,singleton,objects,put,bean,name,singleton,object,this,singleton,factories,remove,bean,name,return,singleton,object,singleton,object,null
DefaultSingletonBeanRegistry -> protected Object getSingleton(String beanName, boolean allowEarlyReference);1353882772;Return the (raw) singleton object registered under the given name._<p>Checks already instantiated singletons and also allows for an early_reference to a currently created singleton (resolving a circular reference)._@param beanName the name of the bean to look for_@param allowEarlyReference whether early references should be created or not_@return the registered singleton object, or <code>null</code> if none found;protected Object getSingleton(String beanName, boolean allowEarlyReference) {_		Object singletonObject = this.singletonObjects.get(beanName)__		if (singletonObject == null && isSingletonCurrentlyInCreation(beanName)) {_			synchronized (this.singletonObjects) {_				singletonObject = this.earlySingletonObjects.get(beanName)__				if (singletonObject == null && allowEarlyReference) {_					ObjectFactory singletonFactory = this.singletonFactories.get(beanName)__					if (singletonFactory != null) {_						singletonObject = singletonFactory.getObject()__						this.earlySingletonObjects.put(beanName, singletonObject)__						this.singletonFactories.remove(beanName)__					}_				}_			}_		}_		return (singletonObject != NULL_OBJECT ? singletonObject : null)__	};return,the,raw,singleton,object,registered,under,the,given,name,p,checks,already,instantiated,singletons,and,also,allows,for,an,early,reference,to,a,currently,created,singleton,resolving,a,circular,reference,param,bean,name,the,name,of,the,bean,to,look,for,param,allow,early,reference,whether,early,references,should,be,created,or,not,return,the,registered,singleton,object,or,code,null,code,if,none,found;protected,object,get,singleton,string,bean,name,boolean,allow,early,reference,object,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,is,singleton,currently,in,creation,bean,name,synchronized,this,singleton,objects,singleton,object,this,early,singleton,objects,get,bean,name,if,singleton,object,null,allow,early,reference,object,factory,singleton,factory,this,singleton,factories,get,bean,name,if,singleton,factory,null,singleton,object,singleton,factory,get,object,this,early,singleton,objects,put,bean,name,singleton,object,this,singleton,factories,remove,bean,name,return,singleton,object,singleton,object,null
DefaultSingletonBeanRegistry -> protected Object getSingleton(String beanName, boolean allowEarlyReference);1355352386;Return the (raw) singleton object registered under the given name._<p>Checks already instantiated singletons and also allows for an early_reference to a currently created singleton (resolving a circular reference)._@param beanName the name of the bean to look for_@param allowEarlyReference whether early references should be created or not_@return the registered singleton object, or <code>null</code> if none found;protected Object getSingleton(String beanName, boolean allowEarlyReference) {_		Object singletonObject = this.singletonObjects.get(beanName)__		if (singletonObject == null && isSingletonCurrentlyInCreation(beanName)) {_			synchronized (this.singletonObjects) {_				singletonObject = this.earlySingletonObjects.get(beanName)__				if (singletonObject == null && allowEarlyReference) {_					ObjectFactory singletonFactory = this.singletonFactories.get(beanName)__					if (singletonFactory != null) {_						singletonObject = singletonFactory.getObject()__						this.earlySingletonObjects.put(beanName, singletonObject)__						this.singletonFactories.remove(beanName)__					}_				}_			}_		}_		return (singletonObject != NULL_OBJECT ? singletonObject : null)__	};return,the,raw,singleton,object,registered,under,the,given,name,p,checks,already,instantiated,singletons,and,also,allows,for,an,early,reference,to,a,currently,created,singleton,resolving,a,circular,reference,param,bean,name,the,name,of,the,bean,to,look,for,param,allow,early,reference,whether,early,references,should,be,created,or,not,return,the,registered,singleton,object,or,code,null,code,if,none,found;protected,object,get,singleton,string,bean,name,boolean,allow,early,reference,object,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,is,singleton,currently,in,creation,bean,name,synchronized,this,singleton,objects,singleton,object,this,early,singleton,objects,get,bean,name,if,singleton,object,null,allow,early,reference,object,factory,singleton,factory,this,singleton,factories,get,bean,name,if,singleton,factory,null,singleton,object,singleton,factory,get,object,this,early,singleton,objects,put,bean,name,singleton,object,this,singleton,factories,remove,bean,name,return,singleton,object,singleton,object,null
DefaultSingletonBeanRegistry -> protected Object getSingleton(String beanName, boolean allowEarlyReference);1356735495;Return the (raw) singleton object registered under the given name._<p>Checks already instantiated singletons and also allows for an early_reference to a currently created singleton (resolving a circular reference)._@param beanName the name of the bean to look for_@param allowEarlyReference whether early references should be created or not_@return the registered singleton object, or {@code null} if none found;protected Object getSingleton(String beanName, boolean allowEarlyReference) {_		Object singletonObject = this.singletonObjects.get(beanName)__		if (singletonObject == null && isSingletonCurrentlyInCreation(beanName)) {_			synchronized (this.singletonObjects) {_				singletonObject = this.earlySingletonObjects.get(beanName)__				if (singletonObject == null && allowEarlyReference) {_					ObjectFactory singletonFactory = this.singletonFactories.get(beanName)__					if (singletonFactory != null) {_						singletonObject = singletonFactory.getObject()__						this.earlySingletonObjects.put(beanName, singletonObject)__						this.singletonFactories.remove(beanName)__					}_				}_			}_		}_		return (singletonObject != NULL_OBJECT ? singletonObject : null)__	};return,the,raw,singleton,object,registered,under,the,given,name,p,checks,already,instantiated,singletons,and,also,allows,for,an,early,reference,to,a,currently,created,singleton,resolving,a,circular,reference,param,bean,name,the,name,of,the,bean,to,look,for,param,allow,early,reference,whether,early,references,should,be,created,or,not,return,the,registered,singleton,object,or,code,null,if,none,found;protected,object,get,singleton,string,bean,name,boolean,allow,early,reference,object,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,is,singleton,currently,in,creation,bean,name,synchronized,this,singleton,objects,singleton,object,this,early,singleton,objects,get,bean,name,if,singleton,object,null,allow,early,reference,object,factory,singleton,factory,this,singleton,factories,get,bean,name,if,singleton,factory,null,singleton,object,singleton,factory,get,object,this,early,singleton,objects,put,bean,name,singleton,object,this,singleton,factories,remove,bean,name,return,singleton,object,singleton,object,null
DefaultSingletonBeanRegistry -> protected Object getSingleton(String beanName, boolean allowEarlyReference);1357119239;Return the (raw) singleton object registered under the given name._<p>Checks already instantiated singletons and also allows for an early_reference to a currently created singleton (resolving a circular reference)._@param beanName the name of the bean to look for_@param allowEarlyReference whether early references should be created or not_@return the registered singleton object, or {@code null} if none found;protected Object getSingleton(String beanName, boolean allowEarlyReference) {_		Object singletonObject = this.singletonObjects.get(beanName)__		if (singletonObject == null && isSingletonCurrentlyInCreation(beanName)) {_			synchronized (this.singletonObjects) {_				singletonObject = this.earlySingletonObjects.get(beanName)__				if (singletonObject == null && allowEarlyReference) {_					ObjectFactory singletonFactory = this.singletonFactories.get(beanName)__					if (singletonFactory != null) {_						singletonObject = singletonFactory.getObject()__						this.earlySingletonObjects.put(beanName, singletonObject)__						this.singletonFactories.remove(beanName)__					}_				}_			}_		}_		return (singletonObject != NULL_OBJECT ? singletonObject : null)__	};return,the,raw,singleton,object,registered,under,the,given,name,p,checks,already,instantiated,singletons,and,also,allows,for,an,early,reference,to,a,currently,created,singleton,resolving,a,circular,reference,param,bean,name,the,name,of,the,bean,to,look,for,param,allow,early,reference,whether,early,references,should,be,created,or,not,return,the,registered,singleton,object,or,code,null,if,none,found;protected,object,get,singleton,string,bean,name,boolean,allow,early,reference,object,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,is,singleton,currently,in,creation,bean,name,synchronized,this,singleton,objects,singleton,object,this,early,singleton,objects,get,bean,name,if,singleton,object,null,allow,early,reference,object,factory,singleton,factory,this,singleton,factories,get,bean,name,if,singleton,factory,null,singleton,object,singleton,factory,get,object,this,early,singleton,objects,put,bean,name,singleton,object,this,singleton,factories,remove,bean,name,return,singleton,object,singleton,object,null
DefaultSingletonBeanRegistry -> protected Object getSingleton(String beanName, boolean allowEarlyReference);1364505266;Return the (raw) singleton object registered under the given name._<p>Checks already instantiated singletons and also allows for an early_reference to a currently created singleton (resolving a circular reference)._@param beanName the name of the bean to look for_@param allowEarlyReference whether early references should be created or not_@return the registered singleton object, or {@code null} if none found;protected Object getSingleton(String beanName, boolean allowEarlyReference) {_		Object singletonObject = this.singletonObjects.get(beanName)__		if (singletonObject == null && isSingletonCurrentlyInCreation(beanName)) {_			synchronized (this.singletonObjects) {_				singletonObject = this.earlySingletonObjects.get(beanName)__				if (singletonObject == null && allowEarlyReference) {_					ObjectFactory singletonFactory = this.singletonFactories.get(beanName)__					if (singletonFactory != null) {_						singletonObject = singletonFactory.getObject()__						this.earlySingletonObjects.put(beanName, singletonObject)__						this.singletonFactories.remove(beanName)__					}_				}_			}_		}_		return (singletonObject != NULL_OBJECT ? singletonObject : null)__	};return,the,raw,singleton,object,registered,under,the,given,name,p,checks,already,instantiated,singletons,and,also,allows,for,an,early,reference,to,a,currently,created,singleton,resolving,a,circular,reference,param,bean,name,the,name,of,the,bean,to,look,for,param,allow,early,reference,whether,early,references,should,be,created,or,not,return,the,registered,singleton,object,or,code,null,if,none,found;protected,object,get,singleton,string,bean,name,boolean,allow,early,reference,object,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,is,singleton,currently,in,creation,bean,name,synchronized,this,singleton,objects,singleton,object,this,early,singleton,objects,get,bean,name,if,singleton,object,null,allow,early,reference,object,factory,singleton,factory,this,singleton,factories,get,bean,name,if,singleton,factory,null,singleton,object,singleton,factory,get,object,this,early,singleton,objects,put,bean,name,singleton,object,this,singleton,factories,remove,bean,name,return,singleton,object,singleton,object,null
DefaultSingletonBeanRegistry -> protected Object getSingleton(String beanName, boolean allowEarlyReference);1368482696;Return the (raw) singleton object registered under the given name._<p>Checks already instantiated singletons and also allows for an early_reference to a currently created singleton (resolving a circular reference)._@param beanName the name of the bean to look for_@param allowEarlyReference whether early references should be created or not_@return the registered singleton object, or {@code null} if none found;protected Object getSingleton(String beanName, boolean allowEarlyReference) {_		Object singletonObject = this.singletonObjects.get(beanName)__		if (singletonObject == null && isSingletonCurrentlyInCreation(beanName)) {_			synchronized (this.singletonObjects) {_				singletonObject = this.earlySingletonObjects.get(beanName)__				if (singletonObject == null && allowEarlyReference) {_					ObjectFactory singletonFactory = this.singletonFactories.get(beanName)__					if (singletonFactory != null) {_						singletonObject = singletonFactory.getObject()__						this.earlySingletonObjects.put(beanName, singletonObject)__						this.singletonFactories.remove(beanName)__					}_				}_			}_		}_		return (singletonObject != NULL_OBJECT ? singletonObject : null)__	};return,the,raw,singleton,object,registered,under,the,given,name,p,checks,already,instantiated,singletons,and,also,allows,for,an,early,reference,to,a,currently,created,singleton,resolving,a,circular,reference,param,bean,name,the,name,of,the,bean,to,look,for,param,allow,early,reference,whether,early,references,should,be,created,or,not,return,the,registered,singleton,object,or,code,null,if,none,found;protected,object,get,singleton,string,bean,name,boolean,allow,early,reference,object,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,is,singleton,currently,in,creation,bean,name,synchronized,this,singleton,objects,singleton,object,this,early,singleton,objects,get,bean,name,if,singleton,object,null,allow,early,reference,object,factory,singleton,factory,this,singleton,factories,get,bean,name,if,singleton,factory,null,singleton,object,singleton,factory,get,object,this,early,singleton,objects,put,bean,name,singleton,object,this,singleton,factories,remove,bean,name,return,singleton,object,singleton,object,null
DefaultSingletonBeanRegistry -> protected Object getSingleton(String beanName, boolean allowEarlyReference);1374698947;Return the (raw) singleton object registered under the given name._<p>Checks already instantiated singletons and also allows for an early_reference to a currently created singleton (resolving a circular reference)._@param beanName the name of the bean to look for_@param allowEarlyReference whether early references should be created or not_@return the registered singleton object, or {@code null} if none found;protected Object getSingleton(String beanName, boolean allowEarlyReference) {_		Object singletonObject = this.singletonObjects.get(beanName)__		if (singletonObject == null && isSingletonCurrentlyInCreation(beanName)) {_			synchronized (this.singletonObjects) {_				singletonObject = this.earlySingletonObjects.get(beanName)__				if (singletonObject == null && allowEarlyReference) {_					ObjectFactory singletonFactory = this.singletonFactories.get(beanName)__					if (singletonFactory != null) {_						singletonObject = singletonFactory.getObject()__						this.earlySingletonObjects.put(beanName, singletonObject)__						this.singletonFactories.remove(beanName)__					}_				}_			}_		}_		return (singletonObject != NULL_OBJECT ? singletonObject : null)__	};return,the,raw,singleton,object,registered,under,the,given,name,p,checks,already,instantiated,singletons,and,also,allows,for,an,early,reference,to,a,currently,created,singleton,resolving,a,circular,reference,param,bean,name,the,name,of,the,bean,to,look,for,param,allow,early,reference,whether,early,references,should,be,created,or,not,return,the,registered,singleton,object,or,code,null,if,none,found;protected,object,get,singleton,string,bean,name,boolean,allow,early,reference,object,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,is,singleton,currently,in,creation,bean,name,synchronized,this,singleton,objects,singleton,object,this,early,singleton,objects,get,bean,name,if,singleton,object,null,allow,early,reference,object,factory,singleton,factory,this,singleton,factories,get,bean,name,if,singleton,factory,null,singleton,object,singleton,factory,get,object,this,early,singleton,objects,put,bean,name,singleton,object,this,singleton,factories,remove,bean,name,return,singleton,object,singleton,object,null
DefaultSingletonBeanRegistry -> protected Object getSingleton(String beanName, boolean allowEarlyReference);1385412762;Return the (raw) singleton object registered under the given name._<p>Checks already instantiated singletons and also allows for an early_reference to a currently created singleton (resolving a circular reference)._@param beanName the name of the bean to look for_@param allowEarlyReference whether early references should be created or not_@return the registered singleton object, or {@code null} if none found;protected Object getSingleton(String beanName, boolean allowEarlyReference) {_		Object singletonObject = this.singletonObjects.get(beanName)__		if (singletonObject == null && isSingletonCurrentlyInCreation(beanName)) {_			synchronized (this.singletonObjects) {_				singletonObject = this.earlySingletonObjects.get(beanName)__				if (singletonObject == null && allowEarlyReference) {_					ObjectFactory<?> singletonFactory = this.singletonFactories.get(beanName)__					if (singletonFactory != null) {_						singletonObject = singletonFactory.getObject()__						this.earlySingletonObjects.put(beanName, singletonObject)__						this.singletonFactories.remove(beanName)__					}_				}_			}_		}_		return (singletonObject != NULL_OBJECT ? singletonObject : null)__	};return,the,raw,singleton,object,registered,under,the,given,name,p,checks,already,instantiated,singletons,and,also,allows,for,an,early,reference,to,a,currently,created,singleton,resolving,a,circular,reference,param,bean,name,the,name,of,the,bean,to,look,for,param,allow,early,reference,whether,early,references,should,be,created,or,not,return,the,registered,singleton,object,or,code,null,if,none,found;protected,object,get,singleton,string,bean,name,boolean,allow,early,reference,object,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,is,singleton,currently,in,creation,bean,name,synchronized,this,singleton,objects,singleton,object,this,early,singleton,objects,get,bean,name,if,singleton,object,null,allow,early,reference,object,factory,singleton,factory,this,singleton,factories,get,bean,name,if,singleton,factory,null,singleton,object,singleton,factory,get,object,this,early,singleton,objects,put,bean,name,singleton,object,this,singleton,factories,remove,bean,name,return,singleton,object,singleton,object,null
DefaultSingletonBeanRegistry -> protected Object getSingleton(String beanName, boolean allowEarlyReference);1385984377;Return the (raw) singleton object registered under the given name._<p>Checks already instantiated singletons and also allows for an early_reference to a currently created singleton (resolving a circular reference)._@param beanName the name of the bean to look for_@param allowEarlyReference whether early references should be created or not_@return the registered singleton object, or {@code null} if none found;protected Object getSingleton(String beanName, boolean allowEarlyReference) {_		Object singletonObject = this.singletonObjects.get(beanName)__		if (singletonObject == null && isSingletonCurrentlyInCreation(beanName)) {_			synchronized (this.singletonObjects) {_				singletonObject = this.earlySingletonObjects.get(beanName)__				if (singletonObject == null && allowEarlyReference) {_					ObjectFactory<?> singletonFactory = this.singletonFactories.get(beanName)__					if (singletonFactory != null) {_						singletonObject = singletonFactory.getObject()__						this.earlySingletonObjects.put(beanName, singletonObject)__						this.singletonFactories.remove(beanName)__					}_				}_			}_		}_		return (singletonObject != NULL_OBJECT ? singletonObject : null)__	};return,the,raw,singleton,object,registered,under,the,given,name,p,checks,already,instantiated,singletons,and,also,allows,for,an,early,reference,to,a,currently,created,singleton,resolving,a,circular,reference,param,bean,name,the,name,of,the,bean,to,look,for,param,allow,early,reference,whether,early,references,should,be,created,or,not,return,the,registered,singleton,object,or,code,null,if,none,found;protected,object,get,singleton,string,bean,name,boolean,allow,early,reference,object,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,is,singleton,currently,in,creation,bean,name,synchronized,this,singleton,objects,singleton,object,this,early,singleton,objects,get,bean,name,if,singleton,object,null,allow,early,reference,object,factory,singleton,factory,this,singleton,factories,get,bean,name,if,singleton,factory,null,singleton,object,singleton,factory,get,object,this,early,singleton,objects,put,bean,name,singleton,object,this,singleton,factories,remove,bean,name,return,singleton,object,singleton,object,null
DefaultSingletonBeanRegistry -> protected Object getSingleton(String beanName, boolean allowEarlyReference);1405430015;Return the (raw) singleton object registered under the given name._<p>Checks already instantiated singletons and also allows for an early_reference to a currently created singleton (resolving a circular reference)._@param beanName the name of the bean to look for_@param allowEarlyReference whether early references should be created or not_@return the registered singleton object, or {@code null} if none found;protected Object getSingleton(String beanName, boolean allowEarlyReference) {_		Object singletonObject = this.singletonObjects.get(beanName)__		if (singletonObject == null && isSingletonCurrentlyInCreation(beanName)) {_			synchronized (this.singletonObjects) {_				singletonObject = this.earlySingletonObjects.get(beanName)__				if (singletonObject == null && allowEarlyReference) {_					ObjectFactory<?> singletonFactory = this.singletonFactories.get(beanName)__					if (singletonFactory != null) {_						singletonObject = singletonFactory.getObject()__						this.earlySingletonObjects.put(beanName, singletonObject)__						this.singletonFactories.remove(beanName)__					}_				}_			}_		}_		return (singletonObject != NULL_OBJECT ? singletonObject : null)__	};return,the,raw,singleton,object,registered,under,the,given,name,p,checks,already,instantiated,singletons,and,also,allows,for,an,early,reference,to,a,currently,created,singleton,resolving,a,circular,reference,param,bean,name,the,name,of,the,bean,to,look,for,param,allow,early,reference,whether,early,references,should,be,created,or,not,return,the,registered,singleton,object,or,code,null,if,none,found;protected,object,get,singleton,string,bean,name,boolean,allow,early,reference,object,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,is,singleton,currently,in,creation,bean,name,synchronized,this,singleton,objects,singleton,object,this,early,singleton,objects,get,bean,name,if,singleton,object,null,allow,early,reference,object,factory,singleton,factory,this,singleton,factories,get,bean,name,if,singleton,factory,null,singleton,object,singleton,factory,get,object,this,early,singleton,objects,put,bean,name,singleton,object,this,singleton,factories,remove,bean,name,return,singleton,object,singleton,object,null
DefaultSingletonBeanRegistry -> protected Object getSingleton(String beanName, boolean allowEarlyReference);1408528936;Return the (raw) singleton object registered under the given name._<p>Checks already instantiated singletons and also allows for an early_reference to a currently created singleton (resolving a circular reference)._@param beanName the name of the bean to look for_@param allowEarlyReference whether early references should be created or not_@return the registered singleton object, or {@code null} if none found;protected Object getSingleton(String beanName, boolean allowEarlyReference) {_		Object singletonObject = this.singletonObjects.get(beanName)__		if (singletonObject == null && isSingletonCurrentlyInCreation(beanName)) {_			synchronized (this.singletonObjects) {_				singletonObject = this.earlySingletonObjects.get(beanName)__				if (singletonObject == null && allowEarlyReference) {_					ObjectFactory<?> singletonFactory = this.singletonFactories.get(beanName)__					if (singletonFactory != null) {_						singletonObject = singletonFactory.getObject()__						this.earlySingletonObjects.put(beanName, singletonObject)__						this.singletonFactories.remove(beanName)__					}_				}_			}_		}_		return (singletonObject != NULL_OBJECT ? singletonObject : null)__	};return,the,raw,singleton,object,registered,under,the,given,name,p,checks,already,instantiated,singletons,and,also,allows,for,an,early,reference,to,a,currently,created,singleton,resolving,a,circular,reference,param,bean,name,the,name,of,the,bean,to,look,for,param,allow,early,reference,whether,early,references,should,be,created,or,not,return,the,registered,singleton,object,or,code,null,if,none,found;protected,object,get,singleton,string,bean,name,boolean,allow,early,reference,object,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,is,singleton,currently,in,creation,bean,name,synchronized,this,singleton,objects,singleton,object,this,early,singleton,objects,get,bean,name,if,singleton,object,null,allow,early,reference,object,factory,singleton,factory,this,singleton,factories,get,bean,name,if,singleton,factory,null,singleton,object,singleton,factory,get,object,this,early,singleton,objects,put,bean,name,singleton,object,this,singleton,factories,remove,bean,name,return,singleton,object,singleton,object,null
DefaultSingletonBeanRegistry -> protected Object getSingleton(String beanName, boolean allowEarlyReference);1408624154;Return the (raw) singleton object registered under the given name._<p>Checks already instantiated singletons and also allows for an early_reference to a currently created singleton (resolving a circular reference)._@param beanName the name of the bean to look for_@param allowEarlyReference whether early references should be created or not_@return the registered singleton object, or {@code null} if none found;protected Object getSingleton(String beanName, boolean allowEarlyReference) {_		Object singletonObject = this.singletonObjects.get(beanName)__		if (singletonObject == null && isSingletonCurrentlyInCreation(beanName)) {_			synchronized (this.singletonObjects) {_				singletonObject = this.earlySingletonObjects.get(beanName)__				if (singletonObject == null && allowEarlyReference) {_					ObjectFactory<?> singletonFactory = this.singletonFactories.get(beanName)__					if (singletonFactory != null) {_						singletonObject = singletonFactory.getObject()__						this.earlySingletonObjects.put(beanName, singletonObject)__						this.singletonFactories.remove(beanName)__					}_				}_			}_		}_		return (singletonObject != NULL_OBJECT ? singletonObject : null)__	};return,the,raw,singleton,object,registered,under,the,given,name,p,checks,already,instantiated,singletons,and,also,allows,for,an,early,reference,to,a,currently,created,singleton,resolving,a,circular,reference,param,bean,name,the,name,of,the,bean,to,look,for,param,allow,early,reference,whether,early,references,should,be,created,or,not,return,the,registered,singleton,object,or,code,null,if,none,found;protected,object,get,singleton,string,bean,name,boolean,allow,early,reference,object,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,is,singleton,currently,in,creation,bean,name,synchronized,this,singleton,objects,singleton,object,this,early,singleton,objects,get,bean,name,if,singleton,object,null,allow,early,reference,object,factory,singleton,factory,this,singleton,factories,get,bean,name,if,singleton,factory,null,singleton,object,singleton,factory,get,object,this,early,singleton,objects,put,bean,name,singleton,object,this,singleton,factories,remove,bean,name,return,singleton,object,singleton,object,null
DefaultSingletonBeanRegistry -> protected Object getSingleton(String beanName, boolean allowEarlyReference);1409688815;Return the (raw) singleton object registered under the given name._<p>Checks already instantiated singletons and also allows for an early_reference to a currently created singleton (resolving a circular reference)._@param beanName the name of the bean to look for_@param allowEarlyReference whether early references should be created or not_@return the registered singleton object, or {@code null} if none found;protected Object getSingleton(String beanName, boolean allowEarlyReference) {_		Object singletonObject = this.singletonObjects.get(beanName)__		if (singletonObject == null && isSingletonCurrentlyInCreation(beanName)) {_			synchronized (this.singletonObjects) {_				singletonObject = this.earlySingletonObjects.get(beanName)__				if (singletonObject == null && allowEarlyReference) {_					ObjectFactory<?> singletonFactory = this.singletonFactories.get(beanName)__					if (singletonFactory != null) {_						singletonObject = singletonFactory.getObject()__						this.earlySingletonObjects.put(beanName, singletonObject)__						this.singletonFactories.remove(beanName)__					}_				}_			}_		}_		return (singletonObject != NULL_OBJECT ? singletonObject : null)__	};return,the,raw,singleton,object,registered,under,the,given,name,p,checks,already,instantiated,singletons,and,also,allows,for,an,early,reference,to,a,currently,created,singleton,resolving,a,circular,reference,param,bean,name,the,name,of,the,bean,to,look,for,param,allow,early,reference,whether,early,references,should,be,created,or,not,return,the,registered,singleton,object,or,code,null,if,none,found;protected,object,get,singleton,string,bean,name,boolean,allow,early,reference,object,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,is,singleton,currently,in,creation,bean,name,synchronized,this,singleton,objects,singleton,object,this,early,singleton,objects,get,bean,name,if,singleton,object,null,allow,early,reference,object,factory,singleton,factory,this,singleton,factories,get,bean,name,if,singleton,factory,null,singleton,object,singleton,factory,get,object,this,early,singleton,objects,put,bean,name,singleton,object,this,singleton,factories,remove,bean,name,return,singleton,object,singleton,object,null
DefaultSingletonBeanRegistry -> protected Object getSingleton(String beanName, boolean allowEarlyReference);1417966231;Return the (raw) singleton object registered under the given name._<p>Checks already instantiated singletons and also allows for an early_reference to a currently created singleton (resolving a circular reference)._@param beanName the name of the bean to look for_@param allowEarlyReference whether early references should be created or not_@return the registered singleton object, or {@code null} if none found;protected Object getSingleton(String beanName, boolean allowEarlyReference) {_		Object singletonObject = this.singletonObjects.get(beanName)__		if (singletonObject == null && isSingletonCurrentlyInCreation(beanName)) {_			synchronized (this.singletonObjects) {_				singletonObject = this.earlySingletonObjects.get(beanName)__				if (singletonObject == null && allowEarlyReference) {_					ObjectFactory<?> singletonFactory = this.singletonFactories.get(beanName)__					if (singletonFactory != null) {_						singletonObject = singletonFactory.getObject()__						this.earlySingletonObjects.put(beanName, singletonObject)__						this.singletonFactories.remove(beanName)__					}_				}_			}_		}_		return (singletonObject != NULL_OBJECT ? singletonObject : null)__	};return,the,raw,singleton,object,registered,under,the,given,name,p,checks,already,instantiated,singletons,and,also,allows,for,an,early,reference,to,a,currently,created,singleton,resolving,a,circular,reference,param,bean,name,the,name,of,the,bean,to,look,for,param,allow,early,reference,whether,early,references,should,be,created,or,not,return,the,registered,singleton,object,or,code,null,if,none,found;protected,object,get,singleton,string,bean,name,boolean,allow,early,reference,object,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,is,singleton,currently,in,creation,bean,name,synchronized,this,singleton,objects,singleton,object,this,early,singleton,objects,get,bean,name,if,singleton,object,null,allow,early,reference,object,factory,singleton,factory,this,singleton,factories,get,bean,name,if,singleton,factory,null,singleton,object,singleton,factory,get,object,this,early,singleton,objects,put,bean,name,singleton,object,this,singleton,factories,remove,bean,name,return,singleton,object,singleton,object,null
DefaultSingletonBeanRegistry -> protected Object getSingleton(String beanName, boolean allowEarlyReference);1424972106;Return the (raw) singleton object registered under the given name._<p>Checks already instantiated singletons and also allows for an early_reference to a currently created singleton (resolving a circular reference)._@param beanName the name of the bean to look for_@param allowEarlyReference whether early references should be created or not_@return the registered singleton object, or {@code null} if none found;protected Object getSingleton(String beanName, boolean allowEarlyReference) {_		Object singletonObject = this.singletonObjects.get(beanName)__		if (singletonObject == null && isSingletonCurrentlyInCreation(beanName)) {_			synchronized (this.singletonObjects) {_				singletonObject = this.earlySingletonObjects.get(beanName)__				if (singletonObject == null && allowEarlyReference) {_					ObjectFactory<?> singletonFactory = this.singletonFactories.get(beanName)__					if (singletonFactory != null) {_						singletonObject = singletonFactory.getObject()__						this.earlySingletonObjects.put(beanName, singletonObject)__						this.singletonFactories.remove(beanName)__					}_				}_			}_		}_		return (singletonObject != NULL_OBJECT ? singletonObject : null)__	};return,the,raw,singleton,object,registered,under,the,given,name,p,checks,already,instantiated,singletons,and,also,allows,for,an,early,reference,to,a,currently,created,singleton,resolving,a,circular,reference,param,bean,name,the,name,of,the,bean,to,look,for,param,allow,early,reference,whether,early,references,should,be,created,or,not,return,the,registered,singleton,object,or,code,null,if,none,found;protected,object,get,singleton,string,bean,name,boolean,allow,early,reference,object,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,is,singleton,currently,in,creation,bean,name,synchronized,this,singleton,objects,singleton,object,this,early,singleton,objects,get,bean,name,if,singleton,object,null,allow,early,reference,object,factory,singleton,factory,this,singleton,factories,get,bean,name,if,singleton,factory,null,singleton,object,singleton,factory,get,object,this,early,singleton,objects,put,bean,name,singleton,object,this,singleton,factories,remove,bean,name,return,singleton,object,singleton,object,null
DefaultSingletonBeanRegistry -> protected Object getSingleton(String beanName, boolean allowEarlyReference);1447399860;Return the (raw) singleton object registered under the given name._<p>Checks already instantiated singletons and also allows for an early_reference to a currently created singleton (resolving a circular reference)._@param beanName the name of the bean to look for_@param allowEarlyReference whether early references should be created or not_@return the registered singleton object, or {@code null} if none found;protected Object getSingleton(String beanName, boolean allowEarlyReference) {_		Object singletonObject = this.singletonObjects.get(beanName)__		if (singletonObject == null && isSingletonCurrentlyInCreation(beanName)) {_			synchronized (this.singletonObjects) {_				singletonObject = this.earlySingletonObjects.get(beanName)__				if (singletonObject == null && allowEarlyReference) {_					ObjectFactory<?> singletonFactory = this.singletonFactories.get(beanName)__					if (singletonFactory != null) {_						singletonObject = singletonFactory.getObject()__						this.earlySingletonObjects.put(beanName, singletonObject)__						this.singletonFactories.remove(beanName)__					}_				}_			}_		}_		return (singletonObject != NULL_OBJECT ? singletonObject : null)__	};return,the,raw,singleton,object,registered,under,the,given,name,p,checks,already,instantiated,singletons,and,also,allows,for,an,early,reference,to,a,currently,created,singleton,resolving,a,circular,reference,param,bean,name,the,name,of,the,bean,to,look,for,param,allow,early,reference,whether,early,references,should,be,created,or,not,return,the,registered,singleton,object,or,code,null,if,none,found;protected,object,get,singleton,string,bean,name,boolean,allow,early,reference,object,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,is,singleton,currently,in,creation,bean,name,synchronized,this,singleton,objects,singleton,object,this,early,singleton,objects,get,bean,name,if,singleton,object,null,allow,early,reference,object,factory,singleton,factory,this,singleton,factories,get,bean,name,if,singleton,factory,null,singleton,object,singleton,factory,get,object,this,early,singleton,objects,put,bean,name,singleton,object,this,singleton,factories,remove,bean,name,return,singleton,object,singleton,object,null
DefaultSingletonBeanRegistry -> protected Object getSingleton(String beanName, boolean allowEarlyReference);1467730834;Return the (raw) singleton object registered under the given name._<p>Checks already instantiated singletons and also allows for an early_reference to a currently created singleton (resolving a circular reference)._@param beanName the name of the bean to look for_@param allowEarlyReference whether early references should be created or not_@return the registered singleton object, or {@code null} if none found;protected Object getSingleton(String beanName, boolean allowEarlyReference) {_		Object singletonObject = this.singletonObjects.get(beanName)__		if (singletonObject == null && isSingletonCurrentlyInCreation(beanName)) {_			synchronized (this.singletonObjects) {_				singletonObject = this.earlySingletonObjects.get(beanName)__				if (singletonObject == null && allowEarlyReference) {_					ObjectFactory<?> singletonFactory = this.singletonFactories.get(beanName)__					if (singletonFactory != null) {_						singletonObject = singletonFactory.getObject()__						this.earlySingletonObjects.put(beanName, singletonObject)__						this.singletonFactories.remove(beanName)__					}_				}_			}_		}_		return (singletonObject != NULL_OBJECT ? singletonObject : null)__	};return,the,raw,singleton,object,registered,under,the,given,name,p,checks,already,instantiated,singletons,and,also,allows,for,an,early,reference,to,a,currently,created,singleton,resolving,a,circular,reference,param,bean,name,the,name,of,the,bean,to,look,for,param,allow,early,reference,whether,early,references,should,be,created,or,not,return,the,registered,singleton,object,or,code,null,if,none,found;protected,object,get,singleton,string,bean,name,boolean,allow,early,reference,object,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,is,singleton,currently,in,creation,bean,name,synchronized,this,singleton,objects,singleton,object,this,early,singleton,objects,get,bean,name,if,singleton,object,null,allow,early,reference,object,factory,singleton,factory,this,singleton,factories,get,bean,name,if,singleton,factory,null,singleton,object,singleton,factory,get,object,this,early,singleton,objects,put,bean,name,singleton,object,this,singleton,factories,remove,bean,name,return,singleton,object,singleton,object,null
DefaultSingletonBeanRegistry -> protected Object getSingleton(String beanName, boolean allowEarlyReference);1467810738;Return the (raw) singleton object registered under the given name._<p>Checks already instantiated singletons and also allows for an early_reference to a currently created singleton (resolving a circular reference)._@param beanName the name of the bean to look for_@param allowEarlyReference whether early references should be created or not_@return the registered singleton object, or {@code null} if none found;protected Object getSingleton(String beanName, boolean allowEarlyReference) {_		Object singletonObject = this.singletonObjects.get(beanName)__		if (singletonObject == null && isSingletonCurrentlyInCreation(beanName)) {_			synchronized (this.singletonObjects) {_				singletonObject = this.earlySingletonObjects.get(beanName)__				if (singletonObject == null && allowEarlyReference) {_					ObjectFactory<?> singletonFactory = this.singletonFactories.get(beanName)__					if (singletonFactory != null) {_						singletonObject = singletonFactory.getObject()__						this.earlySingletonObjects.put(beanName, singletonObject)__						this.singletonFactories.remove(beanName)__					}_				}_			}_		}_		return (singletonObject != NULL_OBJECT ? singletonObject : null)__	};return,the,raw,singleton,object,registered,under,the,given,name,p,checks,already,instantiated,singletons,and,also,allows,for,an,early,reference,to,a,currently,created,singleton,resolving,a,circular,reference,param,bean,name,the,name,of,the,bean,to,look,for,param,allow,early,reference,whether,early,references,should,be,created,or,not,return,the,registered,singleton,object,or,code,null,if,none,found;protected,object,get,singleton,string,bean,name,boolean,allow,early,reference,object,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,is,singleton,currently,in,creation,bean,name,synchronized,this,singleton,objects,singleton,object,this,early,singleton,objects,get,bean,name,if,singleton,object,null,allow,early,reference,object,factory,singleton,factory,this,singleton,factories,get,bean,name,if,singleton,factory,null,singleton,object,singleton,factory,get,object,this,early,singleton,objects,put,bean,name,singleton,object,this,singleton,factories,remove,bean,name,return,singleton,object,singleton,object,null
DefaultSingletonBeanRegistry -> protected Object getSingleton(String beanName, boolean allowEarlyReference);1469561191;Return the (raw) singleton object registered under the given name._<p>Checks already instantiated singletons and also allows for an early_reference to a currently created singleton (resolving a circular reference)._@param beanName the name of the bean to look for_@param allowEarlyReference whether early references should be created or not_@return the registered singleton object, or {@code null} if none found;protected Object getSingleton(String beanName, boolean allowEarlyReference) {_		Object singletonObject = this.singletonObjects.get(beanName)__		if (singletonObject == null && isSingletonCurrentlyInCreation(beanName)) {_			synchronized (this.singletonObjects) {_				singletonObject = this.earlySingletonObjects.get(beanName)__				if (singletonObject == null && allowEarlyReference) {_					ObjectFactory<?> singletonFactory = this.singletonFactories.get(beanName)__					if (singletonFactory != null) {_						singletonObject = singletonFactory.getObject()__						this.earlySingletonObjects.put(beanName, singletonObject)__						this.singletonFactories.remove(beanName)__					}_				}_			}_		}_		return (singletonObject != NULL_OBJECT ? singletonObject : null)__	};return,the,raw,singleton,object,registered,under,the,given,name,p,checks,already,instantiated,singletons,and,also,allows,for,an,early,reference,to,a,currently,created,singleton,resolving,a,circular,reference,param,bean,name,the,name,of,the,bean,to,look,for,param,allow,early,reference,whether,early,references,should,be,created,or,not,return,the,registered,singleton,object,or,code,null,if,none,found;protected,object,get,singleton,string,bean,name,boolean,allow,early,reference,object,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,is,singleton,currently,in,creation,bean,name,synchronized,this,singleton,objects,singleton,object,this,early,singleton,objects,get,bean,name,if,singleton,object,null,allow,early,reference,object,factory,singleton,factory,this,singleton,factories,get,bean,name,if,singleton,factory,null,singleton,object,singleton,factory,get,object,this,early,singleton,objects,put,bean,name,singleton,object,this,singleton,factories,remove,bean,name,return,singleton,object,singleton,object,null
DefaultSingletonBeanRegistry -> protected Object getSingleton(String beanName, boolean allowEarlyReference);1478538021;Return the (raw) singleton object registered under the given name._<p>Checks already instantiated singletons and also allows for an early_reference to a currently created singleton (resolving a circular reference)._@param beanName the name of the bean to look for_@param allowEarlyReference whether early references should be created or not_@return the registered singleton object, or {@code null} if none found;protected Object getSingleton(String beanName, boolean allowEarlyReference) {_		Object singletonObject = this.singletonObjects.get(beanName)__		if (singletonObject == null && isSingletonCurrentlyInCreation(beanName)) {_			synchronized (this.singletonObjects) {_				singletonObject = this.earlySingletonObjects.get(beanName)__				if (singletonObject == null && allowEarlyReference) {_					ObjectFactory<?> singletonFactory = this.singletonFactories.get(beanName)__					if (singletonFactory != null) {_						singletonObject = singletonFactory.getObject()__						this.earlySingletonObjects.put(beanName, singletonObject)__						this.singletonFactories.remove(beanName)__					}_				}_			}_		}_		return (singletonObject != NULL_OBJECT ? singletonObject : null)__	};return,the,raw,singleton,object,registered,under,the,given,name,p,checks,already,instantiated,singletons,and,also,allows,for,an,early,reference,to,a,currently,created,singleton,resolving,a,circular,reference,param,bean,name,the,name,of,the,bean,to,look,for,param,allow,early,reference,whether,early,references,should,be,created,or,not,return,the,registered,singleton,object,or,code,null,if,none,found;protected,object,get,singleton,string,bean,name,boolean,allow,early,reference,object,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,is,singleton,currently,in,creation,bean,name,synchronized,this,singleton,objects,singleton,object,this,early,singleton,objects,get,bean,name,if,singleton,object,null,allow,early,reference,object,factory,singleton,factory,this,singleton,factories,get,bean,name,if,singleton,factory,null,singleton,object,singleton,factory,get,object,this,early,singleton,objects,put,bean,name,singleton,object,this,singleton,factories,remove,bean,name,return,singleton,object,singleton,object,null
DefaultSingletonBeanRegistry -> public String[] getDependenciesForBean(String beanName);1328020251;Return the names of all beans that the specified bean depends on, if any._@param beanName the name of the bean_@return the array of names of beans which the bean depends on,_or an empty array if none;public String[] getDependenciesForBean(String beanName) {_		Set<String> dependenciesForBean = this.dependenciesForBeanMap.get(beanName)__		if (dependenciesForBean == null) {_			return new String[0]__		}_		return dependenciesForBean.toArray(new String[dependenciesForBean.size()])__	};return,the,names,of,all,beans,that,the,specified,bean,depends,on,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,names,of,beans,which,the,bean,depends,on,or,an,empty,array,if,none;public,string,get,dependencies,for,bean,string,bean,name,set,string,dependencies,for,bean,this,dependencies,for,bean,map,get,bean,name,if,dependencies,for,bean,null,return,new,string,0,return,dependencies,for,bean,to,array,new,string,dependencies,for,bean,size
DefaultSingletonBeanRegistry -> public String[] getDependenciesForBean(String beanName);1349872135;Return the names of all beans that the specified bean depends on, if any._@param beanName the name of the bean_@return the array of names of beans which the bean depends on,_or an empty array if none;public String[] getDependenciesForBean(String beanName) {_		Set<String> dependenciesForBean = this.dependenciesForBeanMap.get(beanName)__		if (dependenciesForBean == null) {_			return new String[0]__		}_		return dependenciesForBean.toArray(new String[dependenciesForBean.size()])__	};return,the,names,of,all,beans,that,the,specified,bean,depends,on,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,names,of,beans,which,the,bean,depends,on,or,an,empty,array,if,none;public,string,get,dependencies,for,bean,string,bean,name,set,string,dependencies,for,bean,this,dependencies,for,bean,map,get,bean,name,if,dependencies,for,bean,null,return,new,string,0,return,dependencies,for,bean,to,array,new,string,dependencies,for,bean,size
DefaultSingletonBeanRegistry -> public String[] getDependenciesForBean(String beanName);1352412938;Return the names of all beans that the specified bean depends on, if any._@param beanName the name of the bean_@return the array of names of beans which the bean depends on,_or an empty array if none;public String[] getDependenciesForBean(String beanName) {_		Set<String> dependenciesForBean = this.dependenciesForBeanMap.get(beanName)__		if (dependenciesForBean == null) {_			return new String[0]__		}_		return dependenciesForBean.toArray(new String[dependenciesForBean.size()])__	};return,the,names,of,all,beans,that,the,specified,bean,depends,on,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,names,of,beans,which,the,bean,depends,on,or,an,empty,array,if,none;public,string,get,dependencies,for,bean,string,bean,name,set,string,dependencies,for,bean,this,dependencies,for,bean,map,get,bean,name,if,dependencies,for,bean,null,return,new,string,0,return,dependencies,for,bean,to,array,new,string,dependencies,for,bean,size
DefaultSingletonBeanRegistry -> public String[] getDependenciesForBean(String beanName);1352418897;Return the names of all beans that the specified bean depends on, if any._@param beanName the name of the bean_@return the array of names of beans which the bean depends on,_or an empty array if none;public String[] getDependenciesForBean(String beanName) {_		Set<String> dependenciesForBean = this.dependenciesForBeanMap.get(beanName)__		if (dependenciesForBean == null) {_			return new String[0]__		}_		return dependenciesForBean.toArray(new String[dependenciesForBean.size()])__	};return,the,names,of,all,beans,that,the,specified,bean,depends,on,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,names,of,beans,which,the,bean,depends,on,or,an,empty,array,if,none;public,string,get,dependencies,for,bean,string,bean,name,set,string,dependencies,for,bean,this,dependencies,for,bean,map,get,bean,name,if,dependencies,for,bean,null,return,new,string,0,return,dependencies,for,bean,to,array,new,string,dependencies,for,bean,size
DefaultSingletonBeanRegistry -> public String[] getDependenciesForBean(String beanName);1353882772;Return the names of all beans that the specified bean depends on, if any._@param beanName the name of the bean_@return the array of names of beans which the bean depends on,_or an empty array if none;public String[] getDependenciesForBean(String beanName) {_		Set<String> dependenciesForBean = this.dependenciesForBeanMap.get(beanName)__		if (dependenciesForBean == null) {_			return new String[0]__		}_		return dependenciesForBean.toArray(new String[dependenciesForBean.size()])__	};return,the,names,of,all,beans,that,the,specified,bean,depends,on,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,names,of,beans,which,the,bean,depends,on,or,an,empty,array,if,none;public,string,get,dependencies,for,bean,string,bean,name,set,string,dependencies,for,bean,this,dependencies,for,bean,map,get,bean,name,if,dependencies,for,bean,null,return,new,string,0,return,dependencies,for,bean,to,array,new,string,dependencies,for,bean,size
DefaultSingletonBeanRegistry -> public String[] getDependenciesForBean(String beanName);1355352386;Return the names of all beans that the specified bean depends on, if any._@param beanName the name of the bean_@return the array of names of beans which the bean depends on,_or an empty array if none;public String[] getDependenciesForBean(String beanName) {_		Set<String> dependenciesForBean = this.dependenciesForBeanMap.get(beanName)__		if (dependenciesForBean == null) {_			return new String[0]__		}_		return dependenciesForBean.toArray(new String[dependenciesForBean.size()])__	};return,the,names,of,all,beans,that,the,specified,bean,depends,on,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,names,of,beans,which,the,bean,depends,on,or,an,empty,array,if,none;public,string,get,dependencies,for,bean,string,bean,name,set,string,dependencies,for,bean,this,dependencies,for,bean,map,get,bean,name,if,dependencies,for,bean,null,return,new,string,0,return,dependencies,for,bean,to,array,new,string,dependencies,for,bean,size
DefaultSingletonBeanRegistry -> public String[] getDependenciesForBean(String beanName);1356735495;Return the names of all beans that the specified bean depends on, if any._@param beanName the name of the bean_@return the array of names of beans which the bean depends on,_or an empty array if none;public String[] getDependenciesForBean(String beanName) {_		Set<String> dependenciesForBean = this.dependenciesForBeanMap.get(beanName)__		if (dependenciesForBean == null) {_			return new String[0]__		}_		return dependenciesForBean.toArray(new String[dependenciesForBean.size()])__	};return,the,names,of,all,beans,that,the,specified,bean,depends,on,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,names,of,beans,which,the,bean,depends,on,or,an,empty,array,if,none;public,string,get,dependencies,for,bean,string,bean,name,set,string,dependencies,for,bean,this,dependencies,for,bean,map,get,bean,name,if,dependencies,for,bean,null,return,new,string,0,return,dependencies,for,bean,to,array,new,string,dependencies,for,bean,size
DefaultSingletonBeanRegistry -> public String[] getDependenciesForBean(String beanName);1357119239;Return the names of all beans that the specified bean depends on, if any._@param beanName the name of the bean_@return the array of names of beans which the bean depends on,_or an empty array if none;public String[] getDependenciesForBean(String beanName) {_		Set<String> dependenciesForBean = this.dependenciesForBeanMap.get(beanName)__		if (dependenciesForBean == null) {_			return new String[0]__		}_		return dependenciesForBean.toArray(new String[dependenciesForBean.size()])__	};return,the,names,of,all,beans,that,the,specified,bean,depends,on,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,names,of,beans,which,the,bean,depends,on,or,an,empty,array,if,none;public,string,get,dependencies,for,bean,string,bean,name,set,string,dependencies,for,bean,this,dependencies,for,bean,map,get,bean,name,if,dependencies,for,bean,null,return,new,string,0,return,dependencies,for,bean,to,array,new,string,dependencies,for,bean,size
DefaultSingletonBeanRegistry -> public String[] getDependenciesForBean(String beanName);1364505266;Return the names of all beans that the specified bean depends on, if any._@param beanName the name of the bean_@return the array of names of beans which the bean depends on,_or an empty array if none;public String[] getDependenciesForBean(String beanName) {_		Set<String> dependenciesForBean = this.dependenciesForBeanMap.get(beanName)__		if (dependenciesForBean == null) {_			return new String[0]__		}_		return dependenciesForBean.toArray(new String[dependenciesForBean.size()])__	};return,the,names,of,all,beans,that,the,specified,bean,depends,on,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,names,of,beans,which,the,bean,depends,on,or,an,empty,array,if,none;public,string,get,dependencies,for,bean,string,bean,name,set,string,dependencies,for,bean,this,dependencies,for,bean,map,get,bean,name,if,dependencies,for,bean,null,return,new,string,0,return,dependencies,for,bean,to,array,new,string,dependencies,for,bean,size
DefaultSingletonBeanRegistry -> public String[] getDependenciesForBean(String beanName);1368482696;Return the names of all beans that the specified bean depends on, if any._@param beanName the name of the bean_@return the array of names of beans which the bean depends on,_or an empty array if none;public String[] getDependenciesForBean(String beanName) {_		Set<String> dependenciesForBean = this.dependenciesForBeanMap.get(beanName)__		if (dependenciesForBean == null) {_			return new String[0]__		}_		return dependenciesForBean.toArray(new String[dependenciesForBean.size()])__	};return,the,names,of,all,beans,that,the,specified,bean,depends,on,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,names,of,beans,which,the,bean,depends,on,or,an,empty,array,if,none;public,string,get,dependencies,for,bean,string,bean,name,set,string,dependencies,for,bean,this,dependencies,for,bean,map,get,bean,name,if,dependencies,for,bean,null,return,new,string,0,return,dependencies,for,bean,to,array,new,string,dependencies,for,bean,size
DefaultSingletonBeanRegistry -> public String[] getDependenciesForBean(String beanName);1374698947;Return the names of all beans that the specified bean depends on, if any._@param beanName the name of the bean_@return the array of names of beans which the bean depends on,_or an empty array if none;public String[] getDependenciesForBean(String beanName) {_		Set<String> dependenciesForBean = this.dependenciesForBeanMap.get(beanName)__		if (dependenciesForBean == null) {_			return new String[0]__		}_		return dependenciesForBean.toArray(new String[dependenciesForBean.size()])__	};return,the,names,of,all,beans,that,the,specified,bean,depends,on,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,names,of,beans,which,the,bean,depends,on,or,an,empty,array,if,none;public,string,get,dependencies,for,bean,string,bean,name,set,string,dependencies,for,bean,this,dependencies,for,bean,map,get,bean,name,if,dependencies,for,bean,null,return,new,string,0,return,dependencies,for,bean,to,array,new,string,dependencies,for,bean,size
DefaultSingletonBeanRegistry -> public String[] getDependenciesForBean(String beanName);1385412762;Return the names of all beans that the specified bean depends on, if any._@param beanName the name of the bean_@return the array of names of beans which the bean depends on,_or an empty array if none;public String[] getDependenciesForBean(String beanName) {_		Set<String> dependenciesForBean = this.dependenciesForBeanMap.get(beanName)__		if (dependenciesForBean == null) {_			return new String[0]__		}_		return dependenciesForBean.toArray(new String[dependenciesForBean.size()])__	};return,the,names,of,all,beans,that,the,specified,bean,depends,on,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,names,of,beans,which,the,bean,depends,on,or,an,empty,array,if,none;public,string,get,dependencies,for,bean,string,bean,name,set,string,dependencies,for,bean,this,dependencies,for,bean,map,get,bean,name,if,dependencies,for,bean,null,return,new,string,0,return,dependencies,for,bean,to,array,new,string,dependencies,for,bean,size
DefaultSingletonBeanRegistry -> public String[] getDependenciesForBean(String beanName);1385984377;Return the names of all beans that the specified bean depends on, if any._@param beanName the name of the bean_@return the array of names of beans which the bean depends on,_or an empty array if none;public String[] getDependenciesForBean(String beanName) {_		Set<String> dependenciesForBean = this.dependenciesForBeanMap.get(beanName)__		if (dependenciesForBean == null) {_			return new String[0]__		}_		return dependenciesForBean.toArray(new String[dependenciesForBean.size()])__	};return,the,names,of,all,beans,that,the,specified,bean,depends,on,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,names,of,beans,which,the,bean,depends,on,or,an,empty,array,if,none;public,string,get,dependencies,for,bean,string,bean,name,set,string,dependencies,for,bean,this,dependencies,for,bean,map,get,bean,name,if,dependencies,for,bean,null,return,new,string,0,return,dependencies,for,bean,to,array,new,string,dependencies,for,bean,size
DefaultSingletonBeanRegistry -> public String[] getDependenciesForBean(String beanName);1405430015;Return the names of all beans that the specified bean depends on, if any._@param beanName the name of the bean_@return the array of names of beans which the bean depends on,_or an empty array if none;public String[] getDependenciesForBean(String beanName) {_		Set<String> dependenciesForBean = this.dependenciesForBeanMap.get(beanName)__		if (dependenciesForBean == null) {_			return new String[0]__		}_		return dependenciesForBean.toArray(new String[dependenciesForBean.size()])__	};return,the,names,of,all,beans,that,the,specified,bean,depends,on,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,names,of,beans,which,the,bean,depends,on,or,an,empty,array,if,none;public,string,get,dependencies,for,bean,string,bean,name,set,string,dependencies,for,bean,this,dependencies,for,bean,map,get,bean,name,if,dependencies,for,bean,null,return,new,string,0,return,dependencies,for,bean,to,array,new,string,dependencies,for,bean,size
DefaultSingletonBeanRegistry -> public String[] getDependenciesForBean(String beanName);1408528936;Return the names of all beans that the specified bean depends on, if any._@param beanName the name of the bean_@return the array of names of beans which the bean depends on,_or an empty array if none;public String[] getDependenciesForBean(String beanName) {_		Set<String> dependenciesForBean = this.dependenciesForBeanMap.get(beanName)__		if (dependenciesForBean == null) {_			return new String[0]__		}_		return dependenciesForBean.toArray(new String[dependenciesForBean.size()])__	};return,the,names,of,all,beans,that,the,specified,bean,depends,on,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,names,of,beans,which,the,bean,depends,on,or,an,empty,array,if,none;public,string,get,dependencies,for,bean,string,bean,name,set,string,dependencies,for,bean,this,dependencies,for,bean,map,get,bean,name,if,dependencies,for,bean,null,return,new,string,0,return,dependencies,for,bean,to,array,new,string,dependencies,for,bean,size
DefaultSingletonBeanRegistry -> public String[] getDependenciesForBean(String beanName);1408624154;Return the names of all beans that the specified bean depends on, if any._@param beanName the name of the bean_@return the array of names of beans which the bean depends on,_or an empty array if none;public String[] getDependenciesForBean(String beanName) {_		Set<String> dependenciesForBean = this.dependenciesForBeanMap.get(beanName)__		if (dependenciesForBean == null) {_			return new String[0]__		}_		return dependenciesForBean.toArray(new String[dependenciesForBean.size()])__	};return,the,names,of,all,beans,that,the,specified,bean,depends,on,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,names,of,beans,which,the,bean,depends,on,or,an,empty,array,if,none;public,string,get,dependencies,for,bean,string,bean,name,set,string,dependencies,for,bean,this,dependencies,for,bean,map,get,bean,name,if,dependencies,for,bean,null,return,new,string,0,return,dependencies,for,bean,to,array,new,string,dependencies,for,bean,size
DefaultSingletonBeanRegistry -> public String[] getDependenciesForBean(String beanName);1409688815;Return the names of all beans that the specified bean depends on, if any._@param beanName the name of the bean_@return the array of names of beans which the bean depends on,_or an empty array if none;public String[] getDependenciesForBean(String beanName) {_		Set<String> dependenciesForBean = this.dependenciesForBeanMap.get(beanName)__		if (dependenciesForBean == null) {_			return new String[0]__		}_		return dependenciesForBean.toArray(new String[dependenciesForBean.size()])__	};return,the,names,of,all,beans,that,the,specified,bean,depends,on,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,names,of,beans,which,the,bean,depends,on,or,an,empty,array,if,none;public,string,get,dependencies,for,bean,string,bean,name,set,string,dependencies,for,bean,this,dependencies,for,bean,map,get,bean,name,if,dependencies,for,bean,null,return,new,string,0,return,dependencies,for,bean,to,array,new,string,dependencies,for,bean,size
DefaultSingletonBeanRegistry -> public String[] getDependenciesForBean(String beanName);1417966231;Return the names of all beans that the specified bean depends on, if any._@param beanName the name of the bean_@return the array of names of beans which the bean depends on,_or an empty array if none;public String[] getDependenciesForBean(String beanName) {_		Set<String> dependenciesForBean = this.dependenciesForBeanMap.get(beanName)__		if (dependenciesForBean == null) {_			return new String[0]__		}_		return dependenciesForBean.toArray(new String[dependenciesForBean.size()])__	};return,the,names,of,all,beans,that,the,specified,bean,depends,on,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,names,of,beans,which,the,bean,depends,on,or,an,empty,array,if,none;public,string,get,dependencies,for,bean,string,bean,name,set,string,dependencies,for,bean,this,dependencies,for,bean,map,get,bean,name,if,dependencies,for,bean,null,return,new,string,0,return,dependencies,for,bean,to,array,new,string,dependencies,for,bean,size
DefaultSingletonBeanRegistry -> public String[] getDependenciesForBean(String beanName);1424972106;Return the names of all beans that the specified bean depends on, if any._@param beanName the name of the bean_@return the array of names of beans which the bean depends on,_or an empty array if none;public String[] getDependenciesForBean(String beanName) {_		Set<String> dependenciesForBean = this.dependenciesForBeanMap.get(beanName)__		if (dependenciesForBean == null) {_			return new String[0]__		}_		return dependenciesForBean.toArray(new String[dependenciesForBean.size()])__	};return,the,names,of,all,beans,that,the,specified,bean,depends,on,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,names,of,beans,which,the,bean,depends,on,or,an,empty,array,if,none;public,string,get,dependencies,for,bean,string,bean,name,set,string,dependencies,for,bean,this,dependencies,for,bean,map,get,bean,name,if,dependencies,for,bean,null,return,new,string,0,return,dependencies,for,bean,to,array,new,string,dependencies,for,bean,size
DefaultSingletonBeanRegistry -> public String[] getDependenciesForBean(String beanName);1447399860;Return the names of all beans that the specified bean depends on, if any._@param beanName the name of the bean_@return the array of names of beans which the bean depends on,_or an empty array if none;public String[] getDependenciesForBean(String beanName) {_		Set<String> dependenciesForBean = this.dependenciesForBeanMap.get(beanName)__		if (dependenciesForBean == null) {_			return new String[0]__		}_		return dependenciesForBean.toArray(new String[dependenciesForBean.size()])__	};return,the,names,of,all,beans,that,the,specified,bean,depends,on,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,names,of,beans,which,the,bean,depends,on,or,an,empty,array,if,none;public,string,get,dependencies,for,bean,string,bean,name,set,string,dependencies,for,bean,this,dependencies,for,bean,map,get,bean,name,if,dependencies,for,bean,null,return,new,string,0,return,dependencies,for,bean,to,array,new,string,dependencies,for,bean,size
DefaultSingletonBeanRegistry -> public String[] getDependenciesForBean(String beanName);1467730834;Return the names of all beans that the specified bean depends on, if any._@param beanName the name of the bean_@return the array of names of beans which the bean depends on,_or an empty array if none;public String[] getDependenciesForBean(String beanName) {_		Set<String> dependenciesForBean = this.dependenciesForBeanMap.get(beanName)__		if (dependenciesForBean == null) {_			return new String[0]__		}_		return dependenciesForBean.toArray(new String[dependenciesForBean.size()])__	};return,the,names,of,all,beans,that,the,specified,bean,depends,on,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,names,of,beans,which,the,bean,depends,on,or,an,empty,array,if,none;public,string,get,dependencies,for,bean,string,bean,name,set,string,dependencies,for,bean,this,dependencies,for,bean,map,get,bean,name,if,dependencies,for,bean,null,return,new,string,0,return,dependencies,for,bean,to,array,new,string,dependencies,for,bean,size
DefaultSingletonBeanRegistry -> public String[] getDependenciesForBean(String beanName);1467810738;Return the names of all beans that the specified bean depends on, if any._@param beanName the name of the bean_@return the array of names of beans which the bean depends on,_or an empty array if none;public String[] getDependenciesForBean(String beanName) {_		Set<String> dependenciesForBean = this.dependenciesForBeanMap.get(beanName)__		if (dependenciesForBean == null) {_			return new String[0]__		}_		return dependenciesForBean.toArray(new String[dependenciesForBean.size()])__	};return,the,names,of,all,beans,that,the,specified,bean,depends,on,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,names,of,beans,which,the,bean,depends,on,or,an,empty,array,if,none;public,string,get,dependencies,for,bean,string,bean,name,set,string,dependencies,for,bean,this,dependencies,for,bean,map,get,bean,name,if,dependencies,for,bean,null,return,new,string,0,return,dependencies,for,bean,to,array,new,string,dependencies,for,bean,size
DefaultSingletonBeanRegistry -> public String[] getDependenciesForBean(String beanName);1469561191;Return the names of all beans that the specified bean depends on, if any._@param beanName the name of the bean_@return the array of names of beans which the bean depends on,_or an empty array if none;public String[] getDependenciesForBean(String beanName) {_		Set<String> dependenciesForBean = this.dependenciesForBeanMap.get(beanName)__		if (dependenciesForBean == null) {_			return new String[0]__		}_		return dependenciesForBean.toArray(new String[dependenciesForBean.size()])__	};return,the,names,of,all,beans,that,the,specified,bean,depends,on,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,names,of,beans,which,the,bean,depends,on,or,an,empty,array,if,none;public,string,get,dependencies,for,bean,string,bean,name,set,string,dependencies,for,bean,this,dependencies,for,bean,map,get,bean,name,if,dependencies,for,bean,null,return,new,string,0,return,dependencies,for,bean,to,array,new,string,dependencies,for,bean,size
DefaultSingletonBeanRegistry -> public String[] getDependenciesForBean(String beanName);1478538021;Return the names of all beans that the specified bean depends on, if any._@param beanName the name of the bean_@return the array of names of beans which the bean depends on,_or an empty array if none;public String[] getDependenciesForBean(String beanName) {_		Set<String> dependenciesForBean = this.dependenciesForBeanMap.get(beanName)__		if (dependenciesForBean == null) {_			return new String[0]__		}_		return dependenciesForBean.toArray(new String[dependenciesForBean.size()])__	};return,the,names,of,all,beans,that,the,specified,bean,depends,on,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,names,of,beans,which,the,bean,depends,on,or,an,empty,array,if,none;public,string,get,dependencies,for,bean,string,bean,name,set,string,dependencies,for,bean,this,dependencies,for,bean,map,get,bean,name,if,dependencies,for,bean,null,return,new,string,0,return,dependencies,for,bean,to,array,new,string,dependencies,for,bean,size
DefaultSingletonBeanRegistry -> public String[] getDependenciesForBean(String beanName);1495868221;Return the names of all beans that the specified bean depends on, if any._@param beanName the name of the bean_@return the array of names of beans which the bean depends on,_or an empty array if none;public String[] getDependenciesForBean(String beanName) {_		Set<String> dependenciesForBean = this.dependenciesForBeanMap.get(beanName)__		if (dependenciesForBean == null) {_			return new String[0]__		}_		return dependenciesForBean.toArray(new String[dependenciesForBean.size()])__	};return,the,names,of,all,beans,that,the,specified,bean,depends,on,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,names,of,beans,which,the,bean,depends,on,or,an,empty,array,if,none;public,string,get,dependencies,for,bean,string,bean,name,set,string,dependencies,for,bean,this,dependencies,for,bean,map,get,bean,name,if,dependencies,for,bean,null,return,new,string,0,return,dependencies,for,bean,to,array,new,string,dependencies,for,bean,size
DefaultSingletonBeanRegistry -> public String[] getDependenciesForBean(String beanName);1496259743;Return the names of all beans that the specified bean depends on, if any._@param beanName the name of the bean_@return the array of names of beans which the bean depends on,_or an empty array if none;public String[] getDependenciesForBean(String beanName) {_		Set<String> dependenciesForBean = this.dependenciesForBeanMap.get(beanName)__		if (dependenciesForBean == null) {_			return new String[0]__		}_		return dependenciesForBean.toArray(new String[dependenciesForBean.size()])__	};return,the,names,of,all,beans,that,the,specified,bean,depends,on,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,names,of,beans,which,the,bean,depends,on,or,an,empty,array,if,none;public,string,get,dependencies,for,bean,string,bean,name,set,string,dependencies,for,bean,this,dependencies,for,bean,map,get,bean,name,if,dependencies,for,bean,null,return,new,string,0,return,dependencies,for,bean,to,array,new,string,dependencies,for,bean,size
DefaultSingletonBeanRegistry -> public String[] getDependenciesForBean(String beanName);1496837955;Return the names of all beans that the specified bean depends on, if any._@param beanName the name of the bean_@return the array of names of beans which the bean depends on,_or an empty array if none;public String[] getDependenciesForBean(String beanName) {_		Set<String> dependenciesForBean = this.dependenciesForBeanMap.get(beanName)__		if (dependenciesForBean == null) {_			return new String[0]__		}_		return dependenciesForBean.toArray(new String[dependenciesForBean.size()])__	};return,the,names,of,all,beans,that,the,specified,bean,depends,on,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,names,of,beans,which,the,bean,depends,on,or,an,empty,array,if,none;public,string,get,dependencies,for,bean,string,bean,name,set,string,dependencies,for,bean,this,dependencies,for,bean,map,get,bean,name,if,dependencies,for,bean,null,return,new,string,0,return,dependencies,for,bean,to,array,new,string,dependencies,for,bean,size
DefaultSingletonBeanRegistry -> public String[] getDependenciesForBean(String beanName);1498780456;Return the names of all beans that the specified bean depends on, if any._@param beanName the name of the bean_@return the array of names of beans which the bean depends on,_or an empty array if none;public String[] getDependenciesForBean(String beanName) {_		Set<String> dependenciesForBean = this.dependenciesForBeanMap.get(beanName)__		if (dependenciesForBean == null) {_			return new String[0]__		}_		return dependenciesForBean.toArray(new String[dependenciesForBean.size()])__	};return,the,names,of,all,beans,that,the,specified,bean,depends,on,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,names,of,beans,which,the,bean,depends,on,or,an,empty,array,if,none;public,string,get,dependencies,for,bean,string,bean,name,set,string,dependencies,for,bean,this,dependencies,for,bean,map,get,bean,name,if,dependencies,for,bean,null,return,new,string,0,return,dependencies,for,bean,to,array,new,string,dependencies,for,bean,size
DefaultSingletonBeanRegistry -> public String[] getDependenciesForBean(String beanName);1502974979;Return the names of all beans that the specified bean depends on, if any._@param beanName the name of the bean_@return the array of names of beans which the bean depends on,_or an empty array if none;public String[] getDependenciesForBean(String beanName) {_		Set<String> dependenciesForBean = this.dependenciesForBeanMap.get(beanName)__		if (dependenciesForBean == null) {_			return new String[0]__		}_		return dependenciesForBean.toArray(new String[dependenciesForBean.size()])__	};return,the,names,of,all,beans,that,the,specified,bean,depends,on,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,names,of,beans,which,the,bean,depends,on,or,an,empty,array,if,none;public,string,get,dependencies,for,bean,string,bean,name,set,string,dependencies,for,bean,this,dependencies,for,bean,map,get,bean,name,if,dependencies,for,bean,null,return,new,string,0,return,dependencies,for,bean,to,array,new,string,dependencies,for,bean,size
DefaultSingletonBeanRegistry -> public String[] getDependenciesForBean(String beanName);1503007895;Return the names of all beans that the specified bean depends on, if any._@param beanName the name of the bean_@return the array of names of beans which the bean depends on,_or an empty array if none;public String[] getDependenciesForBean(String beanName) {_		Set<String> dependenciesForBean = this.dependenciesForBeanMap.get(beanName)__		if (dependenciesForBean == null) {_			return new String[0]__		}_		return dependenciesForBean.toArray(new String[dependenciesForBean.size()])__	};return,the,names,of,all,beans,that,the,specified,bean,depends,on,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,names,of,beans,which,the,bean,depends,on,or,an,empty,array,if,none;public,string,get,dependencies,for,bean,string,bean,name,set,string,dependencies,for,bean,this,dependencies,for,bean,map,get,bean,name,if,dependencies,for,bean,null,return,new,string,0,return,dependencies,for,bean,to,array,new,string,dependencies,for,bean,size
DefaultSingletonBeanRegistry -> public String[] getDependenciesForBean(String beanName);1518810557;Return the names of all beans that the specified bean depends on, if any._@param beanName the name of the bean_@return the array of names of beans which the bean depends on,_or an empty array if none;public String[] getDependenciesForBean(String beanName) {_		Set<String> dependenciesForBean = this.dependenciesForBeanMap.get(beanName)__		if (dependenciesForBean == null) {_			return new String[0]__		}_		return StringUtils.toStringArray(dependenciesForBean)__	};return,the,names,of,all,beans,that,the,specified,bean,depends,on,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,names,of,beans,which,the,bean,depends,on,or,an,empty,array,if,none;public,string,get,dependencies,for,bean,string,bean,name,set,string,dependencies,for,bean,this,dependencies,for,bean,map,get,bean,name,if,dependencies,for,bean,null,return,new,string,0,return,string,utils,to,string,array,dependencies,for,bean
DefaultSingletonBeanRegistry -> public String[] getDependenciesForBean(String beanName);1521822873;Return the names of all beans that the specified bean depends on, if any._@param beanName the name of the bean_@return the array of names of beans which the bean depends on,_or an empty array if none;public String[] getDependenciesForBean(String beanName) {_		Set<String> dependenciesForBean = this.dependenciesForBeanMap.get(beanName)__		if (dependenciesForBean == null) {_			return new String[0]__		}_		return StringUtils.toStringArray(dependenciesForBean)__	};return,the,names,of,all,beans,that,the,specified,bean,depends,on,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,names,of,beans,which,the,bean,depends,on,or,an,empty,array,if,none;public,string,get,dependencies,for,bean,string,bean,name,set,string,dependencies,for,bean,this,dependencies,for,bean,map,get,bean,name,if,dependencies,for,bean,null,return,new,string,0,return,string,utils,to,string,array,dependencies,for,bean
DefaultSingletonBeanRegistry -> public String[] getDependenciesForBean(String beanName);1521905451;Return the names of all beans that the specified bean depends on, if any._@param beanName the name of the bean_@return the array of names of beans which the bean depends on,_or an empty array if none;public String[] getDependenciesForBean(String beanName) {_		Set<String> dependenciesForBean = this.dependenciesForBeanMap.get(beanName)__		if (dependenciesForBean == null) {_			return new String[0]__		}_		synchronized (this.dependenciesForBeanMap) {_			return StringUtils.toStringArray(dependenciesForBean)__		}_	};return,the,names,of,all,beans,that,the,specified,bean,depends,on,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,names,of,beans,which,the,bean,depends,on,or,an,empty,array,if,none;public,string,get,dependencies,for,bean,string,bean,name,set,string,dependencies,for,bean,this,dependencies,for,bean,map,get,bean,name,if,dependencies,for,bean,null,return,new,string,0,synchronized,this,dependencies,for,bean,map,return,string,utils,to,string,array,dependencies,for,bean
DefaultSingletonBeanRegistry -> public String[] getDependenciesForBean(String beanName);1527623493;Return the names of all beans that the specified bean depends on, if any._@param beanName the name of the bean_@return the array of names of beans which the bean depends on,_or an empty array if none;public String[] getDependenciesForBean(String beanName) {_		Set<String> dependenciesForBean = this.dependenciesForBeanMap.get(beanName)__		if (dependenciesForBean == null) {_			return new String[0]__		}_		synchronized (this.dependenciesForBeanMap) {_			return StringUtils.toStringArray(dependenciesForBean)__		}_	};return,the,names,of,all,beans,that,the,specified,bean,depends,on,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,names,of,beans,which,the,bean,depends,on,or,an,empty,array,if,none;public,string,get,dependencies,for,bean,string,bean,name,set,string,dependencies,for,bean,this,dependencies,for,bean,map,get,bean,name,if,dependencies,for,bean,null,return,new,string,0,synchronized,this,dependencies,for,bean,map,return,string,utils,to,string,array,dependencies,for,bean
DefaultSingletonBeanRegistry -> public String[] getDependenciesForBean(String beanName);1530174524;Return the names of all beans that the specified bean depends on, if any._@param beanName the name of the bean_@return the array of names of beans which the bean depends on,_or an empty array if none;public String[] getDependenciesForBean(String beanName) {_		Set<String> dependenciesForBean = this.dependenciesForBeanMap.get(beanName)__		if (dependenciesForBean == null) {_			return new String[0]__		}_		synchronized (this.dependenciesForBeanMap) {_			return StringUtils.toStringArray(dependenciesForBean)__		}_	};return,the,names,of,all,beans,that,the,specified,bean,depends,on,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,names,of,beans,which,the,bean,depends,on,or,an,empty,array,if,none;public,string,get,dependencies,for,bean,string,bean,name,set,string,dependencies,for,bean,this,dependencies,for,bean,map,get,bean,name,if,dependencies,for,bean,null,return,new,string,0,synchronized,this,dependencies,for,bean,map,return,string,utils,to,string,array,dependencies,for,bean
DefaultSingletonBeanRegistry -> public String[] getDependenciesForBean(String beanName);1532091916;Return the names of all beans that the specified bean depends on, if any._@param beanName the name of the bean_@return the array of names of beans which the bean depends on,_or an empty array if none;public String[] getDependenciesForBean(String beanName) {_		Set<String> dependenciesForBean = this.dependenciesForBeanMap.get(beanName)__		if (dependenciesForBean == null) {_			return new String[0]__		}_		synchronized (this.dependenciesForBeanMap) {_			return StringUtils.toStringArray(dependenciesForBean)__		}_	};return,the,names,of,all,beans,that,the,specified,bean,depends,on,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,names,of,beans,which,the,bean,depends,on,or,an,empty,array,if,none;public,string,get,dependencies,for,bean,string,bean,name,set,string,dependencies,for,bean,this,dependencies,for,bean,map,get,bean,name,if,dependencies,for,bean,null,return,new,string,0,synchronized,this,dependencies,for,bean,map,return,string,utils,to,string,array,dependencies,for,bean
DefaultSingletonBeanRegistry -> public String[] getDependenciesForBean(String beanName);1532706365;Return the names of all beans that the specified bean depends on, if any._@param beanName the name of the bean_@return the array of names of beans which the bean depends on,_or an empty array if none;public String[] getDependenciesForBean(String beanName) {_		Set<String> dependenciesForBean = this.dependenciesForBeanMap.get(beanName)__		if (dependenciesForBean == null) {_			return new String[0]__		}_		synchronized (this.dependenciesForBeanMap) {_			return StringUtils.toStringArray(dependenciesForBean)__		}_	};return,the,names,of,all,beans,that,the,specified,bean,depends,on,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,names,of,beans,which,the,bean,depends,on,or,an,empty,array,if,none;public,string,get,dependencies,for,bean,string,bean,name,set,string,dependencies,for,bean,this,dependencies,for,bean,map,get,bean,name,if,dependencies,for,bean,null,return,new,string,0,synchronized,this,dependencies,for,bean,map,return,string,utils,to,string,array,dependencies,for,bean
DefaultSingletonBeanRegistry -> protected boolean hasDependentBean(String beanName);1328020251;Determine whether a dependent bean has been registered for the given name._@param beanName the name of the bean to check;protected boolean hasDependentBean(String beanName) {_		return this.dependentBeanMap.containsKey(beanName)__	};determine,whether,a,dependent,bean,has,been,registered,for,the,given,name,param,bean,name,the,name,of,the,bean,to,check;protected,boolean,has,dependent,bean,string,bean,name,return,this,dependent,bean,map,contains,key,bean,name
DefaultSingletonBeanRegistry -> protected boolean hasDependentBean(String beanName);1349872135;Determine whether a dependent bean has been registered for the given name._@param beanName the name of the bean to check;protected boolean hasDependentBean(String beanName) {_		return this.dependentBeanMap.containsKey(beanName)__	};determine,whether,a,dependent,bean,has,been,registered,for,the,given,name,param,bean,name,the,name,of,the,bean,to,check;protected,boolean,has,dependent,bean,string,bean,name,return,this,dependent,bean,map,contains,key,bean,name
DefaultSingletonBeanRegistry -> protected boolean hasDependentBean(String beanName);1352412938;Determine whether a dependent bean has been registered for the given name._@param beanName the name of the bean to check;protected boolean hasDependentBean(String beanName) {_		return this.dependentBeanMap.containsKey(beanName)__	};determine,whether,a,dependent,bean,has,been,registered,for,the,given,name,param,bean,name,the,name,of,the,bean,to,check;protected,boolean,has,dependent,bean,string,bean,name,return,this,dependent,bean,map,contains,key,bean,name
DefaultSingletonBeanRegistry -> protected boolean hasDependentBean(String beanName);1352418897;Determine whether a dependent bean has been registered for the given name._@param beanName the name of the bean to check;protected boolean hasDependentBean(String beanName) {_		return this.dependentBeanMap.containsKey(beanName)__	};determine,whether,a,dependent,bean,has,been,registered,for,the,given,name,param,bean,name,the,name,of,the,bean,to,check;protected,boolean,has,dependent,bean,string,bean,name,return,this,dependent,bean,map,contains,key,bean,name
DefaultSingletonBeanRegistry -> protected boolean hasDependentBean(String beanName);1353882772;Determine whether a dependent bean has been registered for the given name._@param beanName the name of the bean to check;protected boolean hasDependentBean(String beanName) {_		return this.dependentBeanMap.containsKey(beanName)__	};determine,whether,a,dependent,bean,has,been,registered,for,the,given,name,param,bean,name,the,name,of,the,bean,to,check;protected,boolean,has,dependent,bean,string,bean,name,return,this,dependent,bean,map,contains,key,bean,name
DefaultSingletonBeanRegistry -> protected boolean hasDependentBean(String beanName);1355352386;Determine whether a dependent bean has been registered for the given name._@param beanName the name of the bean to check;protected boolean hasDependentBean(String beanName) {_		return this.dependentBeanMap.containsKey(beanName)__	};determine,whether,a,dependent,bean,has,been,registered,for,the,given,name,param,bean,name,the,name,of,the,bean,to,check;protected,boolean,has,dependent,bean,string,bean,name,return,this,dependent,bean,map,contains,key,bean,name
DefaultSingletonBeanRegistry -> protected boolean hasDependentBean(String beanName);1356735495;Determine whether a dependent bean has been registered for the given name._@param beanName the name of the bean to check;protected boolean hasDependentBean(String beanName) {_		return this.dependentBeanMap.containsKey(beanName)__	};determine,whether,a,dependent,bean,has,been,registered,for,the,given,name,param,bean,name,the,name,of,the,bean,to,check;protected,boolean,has,dependent,bean,string,bean,name,return,this,dependent,bean,map,contains,key,bean,name
DefaultSingletonBeanRegistry -> protected boolean hasDependentBean(String beanName);1357119239;Determine whether a dependent bean has been registered for the given name._@param beanName the name of the bean to check;protected boolean hasDependentBean(String beanName) {_		return this.dependentBeanMap.containsKey(beanName)__	};determine,whether,a,dependent,bean,has,been,registered,for,the,given,name,param,bean,name,the,name,of,the,bean,to,check;protected,boolean,has,dependent,bean,string,bean,name,return,this,dependent,bean,map,contains,key,bean,name
DefaultSingletonBeanRegistry -> protected boolean hasDependentBean(String beanName);1364505266;Determine whether a dependent bean has been registered for the given name._@param beanName the name of the bean to check;protected boolean hasDependentBean(String beanName) {_		return this.dependentBeanMap.containsKey(beanName)__	};determine,whether,a,dependent,bean,has,been,registered,for,the,given,name,param,bean,name,the,name,of,the,bean,to,check;protected,boolean,has,dependent,bean,string,bean,name,return,this,dependent,bean,map,contains,key,bean,name
DefaultSingletonBeanRegistry -> protected boolean hasDependentBean(String beanName);1368482696;Determine whether a dependent bean has been registered for the given name._@param beanName the name of the bean to check;protected boolean hasDependentBean(String beanName) {_		return this.dependentBeanMap.containsKey(beanName)__	};determine,whether,a,dependent,bean,has,been,registered,for,the,given,name,param,bean,name,the,name,of,the,bean,to,check;protected,boolean,has,dependent,bean,string,bean,name,return,this,dependent,bean,map,contains,key,bean,name
DefaultSingletonBeanRegistry -> protected boolean hasDependentBean(String beanName);1374698947;Determine whether a dependent bean has been registered for the given name._@param beanName the name of the bean to check;protected boolean hasDependentBean(String beanName) {_		return this.dependentBeanMap.containsKey(beanName)__	};determine,whether,a,dependent,bean,has,been,registered,for,the,given,name,param,bean,name,the,name,of,the,bean,to,check;protected,boolean,has,dependent,bean,string,bean,name,return,this,dependent,bean,map,contains,key,bean,name
DefaultSingletonBeanRegistry -> protected boolean hasDependentBean(String beanName);1385412762;Determine whether a dependent bean has been registered for the given name._@param beanName the name of the bean to check;protected boolean hasDependentBean(String beanName) {_		return this.dependentBeanMap.containsKey(beanName)__	};determine,whether,a,dependent,bean,has,been,registered,for,the,given,name,param,bean,name,the,name,of,the,bean,to,check;protected,boolean,has,dependent,bean,string,bean,name,return,this,dependent,bean,map,contains,key,bean,name
DefaultSingletonBeanRegistry -> protected boolean hasDependentBean(String beanName);1385984377;Determine whether a dependent bean has been registered for the given name._@param beanName the name of the bean to check;protected boolean hasDependentBean(String beanName) {_		return this.dependentBeanMap.containsKey(beanName)__	};determine,whether,a,dependent,bean,has,been,registered,for,the,given,name,param,bean,name,the,name,of,the,bean,to,check;protected,boolean,has,dependent,bean,string,bean,name,return,this,dependent,bean,map,contains,key,bean,name
DefaultSingletonBeanRegistry -> protected boolean hasDependentBean(String beanName);1405430015;Determine whether a dependent bean has been registered for the given name._@param beanName the name of the bean to check;protected boolean hasDependentBean(String beanName) {_		return this.dependentBeanMap.containsKey(beanName)__	};determine,whether,a,dependent,bean,has,been,registered,for,the,given,name,param,bean,name,the,name,of,the,bean,to,check;protected,boolean,has,dependent,bean,string,bean,name,return,this,dependent,bean,map,contains,key,bean,name
DefaultSingletonBeanRegistry -> protected boolean hasDependentBean(String beanName);1408528936;Determine whether a dependent bean has been registered for the given name._@param beanName the name of the bean to check;protected boolean hasDependentBean(String beanName) {_		return this.dependentBeanMap.containsKey(beanName)__	};determine,whether,a,dependent,bean,has,been,registered,for,the,given,name,param,bean,name,the,name,of,the,bean,to,check;protected,boolean,has,dependent,bean,string,bean,name,return,this,dependent,bean,map,contains,key,bean,name
DefaultSingletonBeanRegistry -> protected boolean hasDependentBean(String beanName);1408624154;Determine whether a dependent bean has been registered for the given name._@param beanName the name of the bean to check;protected boolean hasDependentBean(String beanName) {_		return this.dependentBeanMap.containsKey(beanName)__	};determine,whether,a,dependent,bean,has,been,registered,for,the,given,name,param,bean,name,the,name,of,the,bean,to,check;protected,boolean,has,dependent,bean,string,bean,name,return,this,dependent,bean,map,contains,key,bean,name
DefaultSingletonBeanRegistry -> protected boolean hasDependentBean(String beanName);1409688815;Determine whether a dependent bean has been registered for the given name._@param beanName the name of the bean to check;protected boolean hasDependentBean(String beanName) {_		return this.dependentBeanMap.containsKey(beanName)__	};determine,whether,a,dependent,bean,has,been,registered,for,the,given,name,param,bean,name,the,name,of,the,bean,to,check;protected,boolean,has,dependent,bean,string,bean,name,return,this,dependent,bean,map,contains,key,bean,name
DefaultSingletonBeanRegistry -> protected boolean hasDependentBean(String beanName);1417966231;Determine whether a dependent bean has been registered for the given name._@param beanName the name of the bean to check;protected boolean hasDependentBean(String beanName) {_		return this.dependentBeanMap.containsKey(beanName)__	};determine,whether,a,dependent,bean,has,been,registered,for,the,given,name,param,bean,name,the,name,of,the,bean,to,check;protected,boolean,has,dependent,bean,string,bean,name,return,this,dependent,bean,map,contains,key,bean,name
DefaultSingletonBeanRegistry -> protected boolean hasDependentBean(String beanName);1424972106;Determine whether a dependent bean has been registered for the given name._@param beanName the name of the bean to check;protected boolean hasDependentBean(String beanName) {_		return this.dependentBeanMap.containsKey(beanName)__	};determine,whether,a,dependent,bean,has,been,registered,for,the,given,name,param,bean,name,the,name,of,the,bean,to,check;protected,boolean,has,dependent,bean,string,bean,name,return,this,dependent,bean,map,contains,key,bean,name
DefaultSingletonBeanRegistry -> protected boolean hasDependentBean(String beanName);1447399860;Determine whether a dependent bean has been registered for the given name._@param beanName the name of the bean to check;protected boolean hasDependentBean(String beanName) {_		return this.dependentBeanMap.containsKey(beanName)__	};determine,whether,a,dependent,bean,has,been,registered,for,the,given,name,param,bean,name,the,name,of,the,bean,to,check;protected,boolean,has,dependent,bean,string,bean,name,return,this,dependent,bean,map,contains,key,bean,name
DefaultSingletonBeanRegistry -> protected boolean hasDependentBean(String beanName);1467730834;Determine whether a dependent bean has been registered for the given name._@param beanName the name of the bean to check;protected boolean hasDependentBean(String beanName) {_		return this.dependentBeanMap.containsKey(beanName)__	};determine,whether,a,dependent,bean,has,been,registered,for,the,given,name,param,bean,name,the,name,of,the,bean,to,check;protected,boolean,has,dependent,bean,string,bean,name,return,this,dependent,bean,map,contains,key,bean,name
DefaultSingletonBeanRegistry -> protected boolean hasDependentBean(String beanName);1467810738;Determine whether a dependent bean has been registered for the given name._@param beanName the name of the bean to check;protected boolean hasDependentBean(String beanName) {_		return this.dependentBeanMap.containsKey(beanName)__	};determine,whether,a,dependent,bean,has,been,registered,for,the,given,name,param,bean,name,the,name,of,the,bean,to,check;protected,boolean,has,dependent,bean,string,bean,name,return,this,dependent,bean,map,contains,key,bean,name
DefaultSingletonBeanRegistry -> protected boolean hasDependentBean(String beanName);1469561191;Determine whether a dependent bean has been registered for the given name._@param beanName the name of the bean to check;protected boolean hasDependentBean(String beanName) {_		return this.dependentBeanMap.containsKey(beanName)__	};determine,whether,a,dependent,bean,has,been,registered,for,the,given,name,param,bean,name,the,name,of,the,bean,to,check;protected,boolean,has,dependent,bean,string,bean,name,return,this,dependent,bean,map,contains,key,bean,name
DefaultSingletonBeanRegistry -> protected boolean hasDependentBean(String beanName);1478538021;Determine whether a dependent bean has been registered for the given name._@param beanName the name of the bean to check;protected boolean hasDependentBean(String beanName) {_		return this.dependentBeanMap.containsKey(beanName)__	};determine,whether,a,dependent,bean,has,been,registered,for,the,given,name,param,bean,name,the,name,of,the,bean,to,check;protected,boolean,has,dependent,bean,string,bean,name,return,this,dependent,bean,map,contains,key,bean,name
DefaultSingletonBeanRegistry -> protected boolean hasDependentBean(String beanName);1495868221;Determine whether a dependent bean has been registered for the given name._@param beanName the name of the bean to check;protected boolean hasDependentBean(String beanName) {_		return this.dependentBeanMap.containsKey(beanName)__	};determine,whether,a,dependent,bean,has,been,registered,for,the,given,name,param,bean,name,the,name,of,the,bean,to,check;protected,boolean,has,dependent,bean,string,bean,name,return,this,dependent,bean,map,contains,key,bean,name
DefaultSingletonBeanRegistry -> protected boolean hasDependentBean(String beanName);1496259743;Determine whether a dependent bean has been registered for the given name._@param beanName the name of the bean to check;protected boolean hasDependentBean(String beanName) {_		return this.dependentBeanMap.containsKey(beanName)__	};determine,whether,a,dependent,bean,has,been,registered,for,the,given,name,param,bean,name,the,name,of,the,bean,to,check;protected,boolean,has,dependent,bean,string,bean,name,return,this,dependent,bean,map,contains,key,bean,name
DefaultSingletonBeanRegistry -> protected boolean hasDependentBean(String beanName);1496837955;Determine whether a dependent bean has been registered for the given name._@param beanName the name of the bean to check;protected boolean hasDependentBean(String beanName) {_		return this.dependentBeanMap.containsKey(beanName)__	};determine,whether,a,dependent,bean,has,been,registered,for,the,given,name,param,bean,name,the,name,of,the,bean,to,check;protected,boolean,has,dependent,bean,string,bean,name,return,this,dependent,bean,map,contains,key,bean,name
DefaultSingletonBeanRegistry -> protected boolean hasDependentBean(String beanName);1498780456;Determine whether a dependent bean has been registered for the given name._@param beanName the name of the bean to check;protected boolean hasDependentBean(String beanName) {_		return this.dependentBeanMap.containsKey(beanName)__	};determine,whether,a,dependent,bean,has,been,registered,for,the,given,name,param,bean,name,the,name,of,the,bean,to,check;protected,boolean,has,dependent,bean,string,bean,name,return,this,dependent,bean,map,contains,key,bean,name
DefaultSingletonBeanRegistry -> protected boolean hasDependentBean(String beanName);1502974979;Determine whether a dependent bean has been registered for the given name._@param beanName the name of the bean to check;protected boolean hasDependentBean(String beanName) {_		return this.dependentBeanMap.containsKey(beanName)__	};determine,whether,a,dependent,bean,has,been,registered,for,the,given,name,param,bean,name,the,name,of,the,bean,to,check;protected,boolean,has,dependent,bean,string,bean,name,return,this,dependent,bean,map,contains,key,bean,name
DefaultSingletonBeanRegistry -> protected boolean hasDependentBean(String beanName);1503007895;Determine whether a dependent bean has been registered for the given name._@param beanName the name of the bean to check;protected boolean hasDependentBean(String beanName) {_		return this.dependentBeanMap.containsKey(beanName)__	};determine,whether,a,dependent,bean,has,been,registered,for,the,given,name,param,bean,name,the,name,of,the,bean,to,check;protected,boolean,has,dependent,bean,string,bean,name,return,this,dependent,bean,map,contains,key,bean,name
DefaultSingletonBeanRegistry -> protected boolean hasDependentBean(String beanName);1518810557;Determine whether a dependent bean has been registered for the given name._@param beanName the name of the bean to check;protected boolean hasDependentBean(String beanName) {_		return this.dependentBeanMap.containsKey(beanName)__	};determine,whether,a,dependent,bean,has,been,registered,for,the,given,name,param,bean,name,the,name,of,the,bean,to,check;protected,boolean,has,dependent,bean,string,bean,name,return,this,dependent,bean,map,contains,key,bean,name
DefaultSingletonBeanRegistry -> protected boolean hasDependentBean(String beanName);1521822873;Determine whether a dependent bean has been registered for the given name._@param beanName the name of the bean to check;protected boolean hasDependentBean(String beanName) {_		return this.dependentBeanMap.containsKey(beanName)__	};determine,whether,a,dependent,bean,has,been,registered,for,the,given,name,param,bean,name,the,name,of,the,bean,to,check;protected,boolean,has,dependent,bean,string,bean,name,return,this,dependent,bean,map,contains,key,bean,name
DefaultSingletonBeanRegistry -> protected boolean hasDependentBean(String beanName);1521905451;Determine whether a dependent bean has been registered for the given name._@param beanName the name of the bean to check;protected boolean hasDependentBean(String beanName) {_		return this.dependentBeanMap.containsKey(beanName)__	};determine,whether,a,dependent,bean,has,been,registered,for,the,given,name,param,bean,name,the,name,of,the,bean,to,check;protected,boolean,has,dependent,bean,string,bean,name,return,this,dependent,bean,map,contains,key,bean,name
DefaultSingletonBeanRegistry -> protected boolean hasDependentBean(String beanName);1527623493;Determine whether a dependent bean has been registered for the given name._@param beanName the name of the bean to check;protected boolean hasDependentBean(String beanName) {_		return this.dependentBeanMap.containsKey(beanName)__	};determine,whether,a,dependent,bean,has,been,registered,for,the,given,name,param,bean,name,the,name,of,the,bean,to,check;protected,boolean,has,dependent,bean,string,bean,name,return,this,dependent,bean,map,contains,key,bean,name
DefaultSingletonBeanRegistry -> protected boolean hasDependentBean(String beanName);1530174524;Determine whether a dependent bean has been registered for the given name._@param beanName the name of the bean to check;protected boolean hasDependentBean(String beanName) {_		return this.dependentBeanMap.containsKey(beanName)__	};determine,whether,a,dependent,bean,has,been,registered,for,the,given,name,param,bean,name,the,name,of,the,bean,to,check;protected,boolean,has,dependent,bean,string,bean,name,return,this,dependent,bean,map,contains,key,bean,name
DefaultSingletonBeanRegistry -> protected boolean hasDependentBean(String beanName);1532091916;Determine whether a dependent bean has been registered for the given name._@param beanName the name of the bean to check;protected boolean hasDependentBean(String beanName) {_		return this.dependentBeanMap.containsKey(beanName)__	};determine,whether,a,dependent,bean,has,been,registered,for,the,given,name,param,bean,name,the,name,of,the,bean,to,check;protected,boolean,has,dependent,bean,string,bean,name,return,this,dependent,bean,map,contains,key,bean,name
DefaultSingletonBeanRegistry -> protected boolean hasDependentBean(String beanName);1532706365;Determine whether a dependent bean has been registered for the given name._@param beanName the name of the bean to check;protected boolean hasDependentBean(String beanName) {_		return this.dependentBeanMap.containsKey(beanName)__	};determine,whether,a,dependent,bean,has,been,registered,for,the,given,name,param,bean,name,the,name,of,the,bean,to,check;protected,boolean,has,dependent,bean,string,bean,name,return,this,dependent,bean,map,contains,key,bean,name
DefaultSingletonBeanRegistry -> public final Object getSingletonMutex();1424972106;Exposes the singleton mutex to subclasses and external collaborators._<p>Subclasses should synchronize on the given Object if they perform_any sort of extended singleton creation phase. In particular, subclasses_should <i>not</i> have their own mutexes involved in singleton creation,_to avoid the potential for deadlocks in lazy-init situations.;public final Object getSingletonMutex() {_		return this.singletonObjects__	};exposes,the,singleton,mutex,to,subclasses,and,external,collaborators,p,subclasses,should,synchronize,on,the,given,object,if,they,perform,any,sort,of,extended,singleton,creation,phase,in,particular,subclasses,should,i,not,i,have,their,own,mutexes,involved,in,singleton,creation,to,avoid,the,potential,for,deadlocks,in,lazy,init,situations;public,final,object,get,singleton,mutex,return,this,singleton,objects
DefaultSingletonBeanRegistry -> public final Object getSingletonMutex();1447399860;Exposes the singleton mutex to subclasses and external collaborators._<p>Subclasses should synchronize on the given Object if they perform_any sort of extended singleton creation phase. In particular, subclasses_should <i>not</i> have their own mutexes involved in singleton creation,_to avoid the potential for deadlocks in lazy-init situations.;public final Object getSingletonMutex() {_		return this.singletonObjects__	};exposes,the,singleton,mutex,to,subclasses,and,external,collaborators,p,subclasses,should,synchronize,on,the,given,object,if,they,perform,any,sort,of,extended,singleton,creation,phase,in,particular,subclasses,should,i,not,i,have,their,own,mutexes,involved,in,singleton,creation,to,avoid,the,potential,for,deadlocks,in,lazy,init,situations;public,final,object,get,singleton,mutex,return,this,singleton,objects
DefaultSingletonBeanRegistry -> public final Object getSingletonMutex();1467730834;Exposes the singleton mutex to subclasses and external collaborators._<p>Subclasses should synchronize on the given Object if they perform_any sort of extended singleton creation phase. In particular, subclasses_should <i>not</i> have their own mutexes involved in singleton creation,_to avoid the potential for deadlocks in lazy-init situations.;public final Object getSingletonMutex() {_		return this.singletonObjects__	};exposes,the,singleton,mutex,to,subclasses,and,external,collaborators,p,subclasses,should,synchronize,on,the,given,object,if,they,perform,any,sort,of,extended,singleton,creation,phase,in,particular,subclasses,should,i,not,i,have,their,own,mutexes,involved,in,singleton,creation,to,avoid,the,potential,for,deadlocks,in,lazy,init,situations;public,final,object,get,singleton,mutex,return,this,singleton,objects
DefaultSingletonBeanRegistry -> public final Object getSingletonMutex();1467810738;Exposes the singleton mutex to subclasses and external collaborators._<p>Subclasses should synchronize on the given Object if they perform_any sort of extended singleton creation phase. In particular, subclasses_should <i>not</i> have their own mutexes involved in singleton creation,_to avoid the potential for deadlocks in lazy-init situations.;public final Object getSingletonMutex() {_		return this.singletonObjects__	};exposes,the,singleton,mutex,to,subclasses,and,external,collaborators,p,subclasses,should,synchronize,on,the,given,object,if,they,perform,any,sort,of,extended,singleton,creation,phase,in,particular,subclasses,should,i,not,i,have,their,own,mutexes,involved,in,singleton,creation,to,avoid,the,potential,for,deadlocks,in,lazy,init,situations;public,final,object,get,singleton,mutex,return,this,singleton,objects
DefaultSingletonBeanRegistry -> public final Object getSingletonMutex();1469561191;Exposes the singleton mutex to subclasses and external collaborators._<p>Subclasses should synchronize on the given Object if they perform_any sort of extended singleton creation phase. In particular, subclasses_should <i>not</i> have their own mutexes involved in singleton creation,_to avoid the potential for deadlocks in lazy-init situations.;public final Object getSingletonMutex() {_		return this.singletonObjects__	};exposes,the,singleton,mutex,to,subclasses,and,external,collaborators,p,subclasses,should,synchronize,on,the,given,object,if,they,perform,any,sort,of,extended,singleton,creation,phase,in,particular,subclasses,should,i,not,i,have,their,own,mutexes,involved,in,singleton,creation,to,avoid,the,potential,for,deadlocks,in,lazy,init,situations;public,final,object,get,singleton,mutex,return,this,singleton,objects
DefaultSingletonBeanRegistry -> public final Object getSingletonMutex();1478538021;Exposes the singleton mutex to subclasses and external collaborators._<p>Subclasses should synchronize on the given Object if they perform_any sort of extended singleton creation phase. In particular, subclasses_should <i>not</i> have their own mutexes involved in singleton creation,_to avoid the potential for deadlocks in lazy-init situations.;public final Object getSingletonMutex() {_		return this.singletonObjects__	};exposes,the,singleton,mutex,to,subclasses,and,external,collaborators,p,subclasses,should,synchronize,on,the,given,object,if,they,perform,any,sort,of,extended,singleton,creation,phase,in,particular,subclasses,should,i,not,i,have,their,own,mutexes,involved,in,singleton,creation,to,avoid,the,potential,for,deadlocks,in,lazy,init,situations;public,final,object,get,singleton,mutex,return,this,singleton,objects
DefaultSingletonBeanRegistry -> public final Object getSingletonMutex();1495868221;Exposes the singleton mutex to subclasses and external collaborators._<p>Subclasses should synchronize on the given Object if they perform_any sort of extended singleton creation phase. In particular, subclasses_should <i>not</i> have their own mutexes involved in singleton creation,_to avoid the potential for deadlocks in lazy-init situations.;public final Object getSingletonMutex() {_		return this.singletonObjects__	};exposes,the,singleton,mutex,to,subclasses,and,external,collaborators,p,subclasses,should,synchronize,on,the,given,object,if,they,perform,any,sort,of,extended,singleton,creation,phase,in,particular,subclasses,should,i,not,i,have,their,own,mutexes,involved,in,singleton,creation,to,avoid,the,potential,for,deadlocks,in,lazy,init,situations;public,final,object,get,singleton,mutex,return,this,singleton,objects
DefaultSingletonBeanRegistry -> public final Object getSingletonMutex();1496259743;Exposes the singleton mutex to subclasses and external collaborators._<p>Subclasses should synchronize on the given Object if they perform_any sort of extended singleton creation phase. In particular, subclasses_should <i>not</i> have their own mutexes involved in singleton creation,_to avoid the potential for deadlocks in lazy-init situations.;public final Object getSingletonMutex() {_		return this.singletonObjects__	};exposes,the,singleton,mutex,to,subclasses,and,external,collaborators,p,subclasses,should,synchronize,on,the,given,object,if,they,perform,any,sort,of,extended,singleton,creation,phase,in,particular,subclasses,should,i,not,i,have,their,own,mutexes,involved,in,singleton,creation,to,avoid,the,potential,for,deadlocks,in,lazy,init,situations;public,final,object,get,singleton,mutex,return,this,singleton,objects
DefaultSingletonBeanRegistry -> public final Object getSingletonMutex();1496837955;Exposes the singleton mutex to subclasses and external collaborators._<p>Subclasses should synchronize on the given Object if they perform_any sort of extended singleton creation phase. In particular, subclasses_should <i>not</i> have their own mutexes involved in singleton creation,_to avoid the potential for deadlocks in lazy-init situations.;public final Object getSingletonMutex() {_		return this.singletonObjects__	};exposes,the,singleton,mutex,to,subclasses,and,external,collaborators,p,subclasses,should,synchronize,on,the,given,object,if,they,perform,any,sort,of,extended,singleton,creation,phase,in,particular,subclasses,should,i,not,i,have,their,own,mutexes,involved,in,singleton,creation,to,avoid,the,potential,for,deadlocks,in,lazy,init,situations;public,final,object,get,singleton,mutex,return,this,singleton,objects
DefaultSingletonBeanRegistry -> public final Object getSingletonMutex();1498780456;Exposes the singleton mutex to subclasses and external collaborators._<p>Subclasses should synchronize on the given Object if they perform_any sort of extended singleton creation phase. In particular, subclasses_should <i>not</i> have their own mutexes involved in singleton creation,_to avoid the potential for deadlocks in lazy-init situations.;public final Object getSingletonMutex() {_		return this.singletonObjects__	};exposes,the,singleton,mutex,to,subclasses,and,external,collaborators,p,subclasses,should,synchronize,on,the,given,object,if,they,perform,any,sort,of,extended,singleton,creation,phase,in,particular,subclasses,should,i,not,i,have,their,own,mutexes,involved,in,singleton,creation,to,avoid,the,potential,for,deadlocks,in,lazy,init,situations;public,final,object,get,singleton,mutex,return,this,singleton,objects
DefaultSingletonBeanRegistry -> public final Object getSingletonMutex();1502974979;Exposes the singleton mutex to subclasses and external collaborators._<p>Subclasses should synchronize on the given Object if they perform_any sort of extended singleton creation phase. In particular, subclasses_should <i>not</i> have their own mutexes involved in singleton creation,_to avoid the potential for deadlocks in lazy-init situations.;public final Object getSingletonMutex() {_		return this.singletonObjects__	};exposes,the,singleton,mutex,to,subclasses,and,external,collaborators,p,subclasses,should,synchronize,on,the,given,object,if,they,perform,any,sort,of,extended,singleton,creation,phase,in,particular,subclasses,should,i,not,i,have,their,own,mutexes,involved,in,singleton,creation,to,avoid,the,potential,for,deadlocks,in,lazy,init,situations;public,final,object,get,singleton,mutex,return,this,singleton,objects
DefaultSingletonBeanRegistry -> public final Object getSingletonMutex();1503007895;Exposes the singleton mutex to subclasses and external collaborators._<p>Subclasses should synchronize on the given Object if they perform_any sort of extended singleton creation phase. In particular, subclasses_should <i>not</i> have their own mutexes involved in singleton creation,_to avoid the potential for deadlocks in lazy-init situations.;public final Object getSingletonMutex() {_		return this.singletonObjects__	};exposes,the,singleton,mutex,to,subclasses,and,external,collaborators,p,subclasses,should,synchronize,on,the,given,object,if,they,perform,any,sort,of,extended,singleton,creation,phase,in,particular,subclasses,should,i,not,i,have,their,own,mutexes,involved,in,singleton,creation,to,avoid,the,potential,for,deadlocks,in,lazy,init,situations;public,final,object,get,singleton,mutex,return,this,singleton,objects
DefaultSingletonBeanRegistry -> public final Object getSingletonMutex();1518810557;Exposes the singleton mutex to subclasses and external collaborators._<p>Subclasses should synchronize on the given Object if they perform_any sort of extended singleton creation phase. In particular, subclasses_should <i>not</i> have their own mutexes involved in singleton creation,_to avoid the potential for deadlocks in lazy-init situations.;public final Object getSingletonMutex() {_		return this.singletonObjects__	};exposes,the,singleton,mutex,to,subclasses,and,external,collaborators,p,subclasses,should,synchronize,on,the,given,object,if,they,perform,any,sort,of,extended,singleton,creation,phase,in,particular,subclasses,should,i,not,i,have,their,own,mutexes,involved,in,singleton,creation,to,avoid,the,potential,for,deadlocks,in,lazy,init,situations;public,final,object,get,singleton,mutex,return,this,singleton,objects
DefaultSingletonBeanRegistry -> public final Object getSingletonMutex();1521822873;Exposes the singleton mutex to subclasses and external collaborators._<p>Subclasses should synchronize on the given Object if they perform_any sort of extended singleton creation phase. In particular, subclasses_should <i>not</i> have their own mutexes involved in singleton creation,_to avoid the potential for deadlocks in lazy-init situations.;public final Object getSingletonMutex() {_		return this.singletonObjects__	};exposes,the,singleton,mutex,to,subclasses,and,external,collaborators,p,subclasses,should,synchronize,on,the,given,object,if,they,perform,any,sort,of,extended,singleton,creation,phase,in,particular,subclasses,should,i,not,i,have,their,own,mutexes,involved,in,singleton,creation,to,avoid,the,potential,for,deadlocks,in,lazy,init,situations;public,final,object,get,singleton,mutex,return,this,singleton,objects
DefaultSingletonBeanRegistry -> public final Object getSingletonMutex();1521905451;Exposes the singleton mutex to subclasses and external collaborators._<p>Subclasses should synchronize on the given Object if they perform_any sort of extended singleton creation phase. In particular, subclasses_should <i>not</i> have their own mutexes involved in singleton creation,_to avoid the potential for deadlocks in lazy-init situations.;public final Object getSingletonMutex() {_		return this.singletonObjects__	};exposes,the,singleton,mutex,to,subclasses,and,external,collaborators,p,subclasses,should,synchronize,on,the,given,object,if,they,perform,any,sort,of,extended,singleton,creation,phase,in,particular,subclasses,should,i,not,i,have,their,own,mutexes,involved,in,singleton,creation,to,avoid,the,potential,for,deadlocks,in,lazy,init,situations;public,final,object,get,singleton,mutex,return,this,singleton,objects
DefaultSingletonBeanRegistry -> public final Object getSingletonMutex();1527623493;Exposes the singleton mutex to subclasses and external collaborators._<p>Subclasses should synchronize on the given Object if they perform_any sort of extended singleton creation phase. In particular, subclasses_should <i>not</i> have their own mutexes involved in singleton creation,_to avoid the potential for deadlocks in lazy-init situations.;public final Object getSingletonMutex() {_		return this.singletonObjects__	};exposes,the,singleton,mutex,to,subclasses,and,external,collaborators,p,subclasses,should,synchronize,on,the,given,object,if,they,perform,any,sort,of,extended,singleton,creation,phase,in,particular,subclasses,should,i,not,i,have,their,own,mutexes,involved,in,singleton,creation,to,avoid,the,potential,for,deadlocks,in,lazy,init,situations;public,final,object,get,singleton,mutex,return,this,singleton,objects
DefaultSingletonBeanRegistry -> public final Object getSingletonMutex();1530174524;Exposes the singleton mutex to subclasses and external collaborators._<p>Subclasses should synchronize on the given Object if they perform_any sort of extended singleton creation phase. In particular, subclasses_should <i>not</i> have their own mutexes involved in singleton creation,_to avoid the potential for deadlocks in lazy-init situations.;public final Object getSingletonMutex() {_		return this.singletonObjects__	};exposes,the,singleton,mutex,to,subclasses,and,external,collaborators,p,subclasses,should,synchronize,on,the,given,object,if,they,perform,any,sort,of,extended,singleton,creation,phase,in,particular,subclasses,should,i,not,i,have,their,own,mutexes,involved,in,singleton,creation,to,avoid,the,potential,for,deadlocks,in,lazy,init,situations;public,final,object,get,singleton,mutex,return,this,singleton,objects
DefaultSingletonBeanRegistry -> public final Object getSingletonMutex();1532091916;Exposes the singleton mutex to subclasses and external collaborators._<p>Subclasses should synchronize on the given Object if they perform_any sort of extended singleton creation phase. In particular, subclasses_should <i>not</i> have their own mutexes involved in singleton creation,_to avoid the potential for deadlocks in lazy-init situations.;public final Object getSingletonMutex() {_		return this.singletonObjects__	};exposes,the,singleton,mutex,to,subclasses,and,external,collaborators,p,subclasses,should,synchronize,on,the,given,object,if,they,perform,any,sort,of,extended,singleton,creation,phase,in,particular,subclasses,should,i,not,i,have,their,own,mutexes,involved,in,singleton,creation,to,avoid,the,potential,for,deadlocks,in,lazy,init,situations;public,final,object,get,singleton,mutex,return,this,singleton,objects
DefaultSingletonBeanRegistry -> public final Object getSingletonMutex();1532706365;Exposes the singleton mutex to subclasses and external collaborators._<p>Subclasses should synchronize on the given Object if they perform_any sort of extended singleton creation phase. In particular, subclasses_should <i>not</i> have their own mutexes involved in singleton creation,_to avoid the potential for deadlocks in lazy-init situations.;public final Object getSingletonMutex() {_		return this.singletonObjects__	};exposes,the,singleton,mutex,to,subclasses,and,external,collaborators,p,subclasses,should,synchronize,on,the,given,object,if,they,perform,any,sort,of,extended,singleton,creation,phase,in,particular,subclasses,should,i,not,i,have,their,own,mutexes,involved,in,singleton,creation,to,avoid,the,potential,for,deadlocks,in,lazy,init,situations;public,final,object,get,singleton,mutex,return,this,singleton,objects
DefaultSingletonBeanRegistry -> protected void beforeSingletonCreation(String beanName);1328020251;Callback before singleton creation._<p>Default implementation register the singleton as currently in creation._@param beanName the name of the singleton about to be created_@see #isSingletonCurrentlyInCreation;protected void beforeSingletonCreation(String beanName) {_		if (!this.inCreationCheckExclusions.contains(beanName) && !this.singletonsCurrentlyInCreation.add(beanName)) {_			throw new BeanCurrentlyInCreationException(beanName)__		}_	};callback,before,singleton,creation,p,default,implementation,register,the,singleton,as,currently,in,creation,param,bean,name,the,name,of,the,singleton,about,to,be,created,see,is,singleton,currently,in,creation;protected,void,before,singleton,creation,string,bean,name,if,this,in,creation,check,exclusions,contains,bean,name,this,singletons,currently,in,creation,add,bean,name,throw,new,bean,currently,in,creation,exception,bean,name
DefaultSingletonBeanRegistry -> protected void beforeSingletonCreation(String beanName);1349872135;Callback before singleton creation._<p>Default implementation register the singleton as currently in creation._@param beanName the name of the singleton about to be created_@see #isSingletonCurrentlyInCreation;protected void beforeSingletonCreation(String beanName) {_		if (!this.inCreationCheckExclusions.contains(beanName) && !this.singletonsCurrentlyInCreation.add(beanName)) {_			throw new BeanCurrentlyInCreationException(beanName)__		}_	};callback,before,singleton,creation,p,default,implementation,register,the,singleton,as,currently,in,creation,param,bean,name,the,name,of,the,singleton,about,to,be,created,see,is,singleton,currently,in,creation;protected,void,before,singleton,creation,string,bean,name,if,this,in,creation,check,exclusions,contains,bean,name,this,singletons,currently,in,creation,add,bean,name,throw,new,bean,currently,in,creation,exception,bean,name
DefaultSingletonBeanRegistry -> protected void beforeSingletonCreation(String beanName);1352412938;Callback before singleton creation._<p>Default implementation register the singleton as currently in creation._@param beanName the name of the singleton about to be created_@see #isSingletonCurrentlyInCreation;protected void beforeSingletonCreation(String beanName) {_		if (!this.inCreationCheckExclusions.contains(beanName) && !this.singletonsCurrentlyInCreation.add(beanName)) {_			throw new BeanCurrentlyInCreationException(beanName)__		}_	};callback,before,singleton,creation,p,default,implementation,register,the,singleton,as,currently,in,creation,param,bean,name,the,name,of,the,singleton,about,to,be,created,see,is,singleton,currently,in,creation;protected,void,before,singleton,creation,string,bean,name,if,this,in,creation,check,exclusions,contains,bean,name,this,singletons,currently,in,creation,add,bean,name,throw,new,bean,currently,in,creation,exception,bean,name
DefaultSingletonBeanRegistry -> protected void beforeSingletonCreation(String beanName);1352418897;Callback before singleton creation._<p>Default implementation register the singleton as currently in creation._@param beanName the name of the singleton about to be created_@see #isSingletonCurrentlyInCreation;protected void beforeSingletonCreation(String beanName) {_		if (!this.inCreationCheckExclusions.containsKey(beanName) &&_				this.singletonsCurrentlyInCreation.put(beanName, Boolean.TRUE) != null) {_			throw new BeanCurrentlyInCreationException(beanName)__		}_	};callback,before,singleton,creation,p,default,implementation,register,the,singleton,as,currently,in,creation,param,bean,name,the,name,of,the,singleton,about,to,be,created,see,is,singleton,currently,in,creation;protected,void,before,singleton,creation,string,bean,name,if,this,in,creation,check,exclusions,contains,key,bean,name,this,singletons,currently,in,creation,put,bean,name,boolean,true,null,throw,new,bean,currently,in,creation,exception,bean,name
DefaultSingletonBeanRegistry -> protected void beforeSingletonCreation(String beanName);1353882772;Callback before singleton creation._<p>Default implementation register the singleton as currently in creation._@param beanName the name of the singleton about to be created_@see #isSingletonCurrentlyInCreation;protected void beforeSingletonCreation(String beanName) {_		if (!this.inCreationCheckExclusions.containsKey(beanName) &&_				this.singletonsCurrentlyInCreation.put(beanName, Boolean.TRUE) != null) {_			throw new BeanCurrentlyInCreationException(beanName)__		}_	};callback,before,singleton,creation,p,default,implementation,register,the,singleton,as,currently,in,creation,param,bean,name,the,name,of,the,singleton,about,to,be,created,see,is,singleton,currently,in,creation;protected,void,before,singleton,creation,string,bean,name,if,this,in,creation,check,exclusions,contains,key,bean,name,this,singletons,currently,in,creation,put,bean,name,boolean,true,null,throw,new,bean,currently,in,creation,exception,bean,name
DefaultSingletonBeanRegistry -> protected void beforeSingletonCreation(String beanName);1355352386;Callback before singleton creation._<p>Default implementation register the singleton as currently in creation._@param beanName the name of the singleton about to be created_@see #isSingletonCurrentlyInCreation;protected void beforeSingletonCreation(String beanName) {_		if (!this.inCreationCheckExclusions.containsKey(beanName) &&_				this.singletonsCurrentlyInCreation.put(beanName, Boolean.TRUE) != null) {_			throw new BeanCurrentlyInCreationException(beanName)__		}_	};callback,before,singleton,creation,p,default,implementation,register,the,singleton,as,currently,in,creation,param,bean,name,the,name,of,the,singleton,about,to,be,created,see,is,singleton,currently,in,creation;protected,void,before,singleton,creation,string,bean,name,if,this,in,creation,check,exclusions,contains,key,bean,name,this,singletons,currently,in,creation,put,bean,name,boolean,true,null,throw,new,bean,currently,in,creation,exception,bean,name
DefaultSingletonBeanRegistry -> protected void beforeSingletonCreation(String beanName);1356735495;Callback before singleton creation._<p>Default implementation register the singleton as currently in creation._@param beanName the name of the singleton about to be created_@see #isSingletonCurrentlyInCreation;protected void beforeSingletonCreation(String beanName) {_		if (!this.inCreationCheckExclusions.containsKey(beanName) &&_				this.singletonsCurrentlyInCreation.put(beanName, Boolean.TRUE) != null) {_			throw new BeanCurrentlyInCreationException(beanName)__		}_	};callback,before,singleton,creation,p,default,implementation,register,the,singleton,as,currently,in,creation,param,bean,name,the,name,of,the,singleton,about,to,be,created,see,is,singleton,currently,in,creation;protected,void,before,singleton,creation,string,bean,name,if,this,in,creation,check,exclusions,contains,key,bean,name,this,singletons,currently,in,creation,put,bean,name,boolean,true,null,throw,new,bean,currently,in,creation,exception,bean,name
DefaultSingletonBeanRegistry -> protected void beforeSingletonCreation(String beanName);1357119239;Callback before singleton creation._<p>Default implementation register the singleton as currently in creation._@param beanName the name of the singleton about to be created_@see #isSingletonCurrentlyInCreation;protected void beforeSingletonCreation(String beanName) {_		if (!this.inCreationCheckExclusions.containsKey(beanName) &&_				this.singletonsCurrentlyInCreation.put(beanName, Boolean.TRUE) != null) {_			throw new BeanCurrentlyInCreationException(beanName)__		}_	};callback,before,singleton,creation,p,default,implementation,register,the,singleton,as,currently,in,creation,param,bean,name,the,name,of,the,singleton,about,to,be,created,see,is,singleton,currently,in,creation;protected,void,before,singleton,creation,string,bean,name,if,this,in,creation,check,exclusions,contains,key,bean,name,this,singletons,currently,in,creation,put,bean,name,boolean,true,null,throw,new,bean,currently,in,creation,exception,bean,name
DefaultSingletonBeanRegistry -> protected void beforeSingletonCreation(String beanName);1364505266;Callback before singleton creation._<p>The default implementation register the singleton as currently in creation._@param beanName the name of the singleton about to be created_@see #isSingletonCurrentlyInCreation;protected void beforeSingletonCreation(String beanName) {_		if (!this.inCreationCheckExclusions.contains(beanName) &&_				!this.singletonsCurrentlyInCreation.add(beanName)) {_			throw new BeanCurrentlyInCreationException(beanName)__		}_	};callback,before,singleton,creation,p,the,default,implementation,register,the,singleton,as,currently,in,creation,param,bean,name,the,name,of,the,singleton,about,to,be,created,see,is,singleton,currently,in,creation;protected,void,before,singleton,creation,string,bean,name,if,this,in,creation,check,exclusions,contains,bean,name,this,singletons,currently,in,creation,add,bean,name,throw,new,bean,currently,in,creation,exception,bean,name
DefaultSingletonBeanRegistry -> protected void beforeSingletonCreation(String beanName);1368482696;Callback before singleton creation._<p>The default implementation register the singleton as currently in creation._@param beanName the name of the singleton about to be created_@see #isSingletonCurrentlyInCreation;protected void beforeSingletonCreation(String beanName) {_		if (!this.inCreationCheckExclusions.contains(beanName) &&_				!this.singletonsCurrentlyInCreation.add(beanName)) {_			throw new BeanCurrentlyInCreationException(beanName)__		}_	};callback,before,singleton,creation,p,the,default,implementation,register,the,singleton,as,currently,in,creation,param,bean,name,the,name,of,the,singleton,about,to,be,created,see,is,singleton,currently,in,creation;protected,void,before,singleton,creation,string,bean,name,if,this,in,creation,check,exclusions,contains,bean,name,this,singletons,currently,in,creation,add,bean,name,throw,new,bean,currently,in,creation,exception,bean,name
DefaultSingletonBeanRegistry -> protected void beforeSingletonCreation(String beanName);1374698947;Callback before singleton creation._<p>The default implementation register the singleton as currently in creation._@param beanName the name of the singleton about to be created_@see #isSingletonCurrentlyInCreation;protected void beforeSingletonCreation(String beanName) {_		if (!this.inCreationCheckExclusions.contains(beanName) &&_				!this.singletonsCurrentlyInCreation.add(beanName)) {_			throw new BeanCurrentlyInCreationException(beanName)__		}_	};callback,before,singleton,creation,p,the,default,implementation,register,the,singleton,as,currently,in,creation,param,bean,name,the,name,of,the,singleton,about,to,be,created,see,is,singleton,currently,in,creation;protected,void,before,singleton,creation,string,bean,name,if,this,in,creation,check,exclusions,contains,bean,name,this,singletons,currently,in,creation,add,bean,name,throw,new,bean,currently,in,creation,exception,bean,name
DefaultSingletonBeanRegistry -> protected void beforeSingletonCreation(String beanName);1385412762;Callback before singleton creation._<p>The default implementation register the singleton as currently in creation._@param beanName the name of the singleton about to be created_@see #isSingletonCurrentlyInCreation;protected void beforeSingletonCreation(String beanName) {_		if (!this.inCreationCheckExclusions.contains(beanName) &&_				!this.singletonsCurrentlyInCreation.add(beanName)) {_			throw new BeanCurrentlyInCreationException(beanName)__		}_	};callback,before,singleton,creation,p,the,default,implementation,register,the,singleton,as,currently,in,creation,param,bean,name,the,name,of,the,singleton,about,to,be,created,see,is,singleton,currently,in,creation;protected,void,before,singleton,creation,string,bean,name,if,this,in,creation,check,exclusions,contains,bean,name,this,singletons,currently,in,creation,add,bean,name,throw,new,bean,currently,in,creation,exception,bean,name
DefaultSingletonBeanRegistry -> protected void beforeSingletonCreation(String beanName);1385984377;Callback before singleton creation._<p>The default implementation register the singleton as currently in creation._@param beanName the name of the singleton about to be created_@see #isSingletonCurrentlyInCreation;protected void beforeSingletonCreation(String beanName) {_		if (!this.inCreationCheckExclusions.contains(beanName) &&_				!this.singletonsCurrentlyInCreation.add(beanName)) {_			throw new BeanCurrentlyInCreationException(beanName)__		}_	};callback,before,singleton,creation,p,the,default,implementation,register,the,singleton,as,currently,in,creation,param,bean,name,the,name,of,the,singleton,about,to,be,created,see,is,singleton,currently,in,creation;protected,void,before,singleton,creation,string,bean,name,if,this,in,creation,check,exclusions,contains,bean,name,this,singletons,currently,in,creation,add,bean,name,throw,new,bean,currently,in,creation,exception,bean,name
DefaultSingletonBeanRegistry -> protected void beforeSingletonCreation(String beanName);1405430015;Callback before singleton creation._<p>The default implementation register the singleton as currently in creation._@param beanName the name of the singleton about to be created_@see #isSingletonCurrentlyInCreation;protected void beforeSingletonCreation(String beanName) {_		if (!this.inCreationCheckExclusions.contains(beanName) && !this.singletonsCurrentlyInCreation.add(beanName)) {_			throw new BeanCurrentlyInCreationException(beanName)__		}_	};callback,before,singleton,creation,p,the,default,implementation,register,the,singleton,as,currently,in,creation,param,bean,name,the,name,of,the,singleton,about,to,be,created,see,is,singleton,currently,in,creation;protected,void,before,singleton,creation,string,bean,name,if,this,in,creation,check,exclusions,contains,bean,name,this,singletons,currently,in,creation,add,bean,name,throw,new,bean,currently,in,creation,exception,bean,name
DefaultSingletonBeanRegistry -> protected void beforeSingletonCreation(String beanName);1408528936;Callback before singleton creation._<p>The default implementation register the singleton as currently in creation._@param beanName the name of the singleton about to be created_@see #isSingletonCurrentlyInCreation;protected void beforeSingletonCreation(String beanName) {_		if (!this.inCreationCheckExclusions.contains(beanName) && !this.singletonsCurrentlyInCreation.add(beanName)) {_			throw new BeanCurrentlyInCreationException(beanName)__		}_	};callback,before,singleton,creation,p,the,default,implementation,register,the,singleton,as,currently,in,creation,param,bean,name,the,name,of,the,singleton,about,to,be,created,see,is,singleton,currently,in,creation;protected,void,before,singleton,creation,string,bean,name,if,this,in,creation,check,exclusions,contains,bean,name,this,singletons,currently,in,creation,add,bean,name,throw,new,bean,currently,in,creation,exception,bean,name
DefaultSingletonBeanRegistry -> protected void beforeSingletonCreation(String beanName);1408624154;Callback before singleton creation._<p>The default implementation register the singleton as currently in creation._@param beanName the name of the singleton about to be created_@see #isSingletonCurrentlyInCreation;protected void beforeSingletonCreation(String beanName) {_		if (!this.inCreationCheckExclusions.contains(beanName) && !this.singletonsCurrentlyInCreation.add(beanName)) {_			throw new BeanCurrentlyInCreationException(beanName)__		}_	};callback,before,singleton,creation,p,the,default,implementation,register,the,singleton,as,currently,in,creation,param,bean,name,the,name,of,the,singleton,about,to,be,created,see,is,singleton,currently,in,creation;protected,void,before,singleton,creation,string,bean,name,if,this,in,creation,check,exclusions,contains,bean,name,this,singletons,currently,in,creation,add,bean,name,throw,new,bean,currently,in,creation,exception,bean,name
DefaultSingletonBeanRegistry -> protected void beforeSingletonCreation(String beanName);1409688815;Callback before singleton creation._<p>The default implementation register the singleton as currently in creation._@param beanName the name of the singleton about to be created_@see #isSingletonCurrentlyInCreation;protected void beforeSingletonCreation(String beanName) {_		if (!this.inCreationCheckExclusions.contains(beanName) && !this.singletonsCurrentlyInCreation.add(beanName)) {_			throw new BeanCurrentlyInCreationException(beanName)__		}_	};callback,before,singleton,creation,p,the,default,implementation,register,the,singleton,as,currently,in,creation,param,bean,name,the,name,of,the,singleton,about,to,be,created,see,is,singleton,currently,in,creation;protected,void,before,singleton,creation,string,bean,name,if,this,in,creation,check,exclusions,contains,bean,name,this,singletons,currently,in,creation,add,bean,name,throw,new,bean,currently,in,creation,exception,bean,name
DefaultSingletonBeanRegistry -> protected void beforeSingletonCreation(String beanName);1417966231;Callback before singleton creation._<p>The default implementation register the singleton as currently in creation._@param beanName the name of the singleton about to be created_@see #isSingletonCurrentlyInCreation;protected void beforeSingletonCreation(String beanName) {_		if (!this.inCreationCheckExclusions.contains(beanName) && !this.singletonsCurrentlyInCreation.add(beanName)) {_			throw new BeanCurrentlyInCreationException(beanName)__		}_	};callback,before,singleton,creation,p,the,default,implementation,register,the,singleton,as,currently,in,creation,param,bean,name,the,name,of,the,singleton,about,to,be,created,see,is,singleton,currently,in,creation;protected,void,before,singleton,creation,string,bean,name,if,this,in,creation,check,exclusions,contains,bean,name,this,singletons,currently,in,creation,add,bean,name,throw,new,bean,currently,in,creation,exception,bean,name
DefaultSingletonBeanRegistry -> protected void beforeSingletonCreation(String beanName);1424972106;Callback before singleton creation._<p>The default implementation register the singleton as currently in creation._@param beanName the name of the singleton about to be created_@see #isSingletonCurrentlyInCreation;protected void beforeSingletonCreation(String beanName) {_		if (!this.inCreationCheckExclusions.contains(beanName) && !this.singletonsCurrentlyInCreation.add(beanName)) {_			throw new BeanCurrentlyInCreationException(beanName)__		}_	};callback,before,singleton,creation,p,the,default,implementation,register,the,singleton,as,currently,in,creation,param,bean,name,the,name,of,the,singleton,about,to,be,created,see,is,singleton,currently,in,creation;protected,void,before,singleton,creation,string,bean,name,if,this,in,creation,check,exclusions,contains,bean,name,this,singletons,currently,in,creation,add,bean,name,throw,new,bean,currently,in,creation,exception,bean,name
DefaultSingletonBeanRegistry -> protected void beforeSingletonCreation(String beanName);1447399860;Callback before singleton creation._<p>The default implementation register the singleton as currently in creation._@param beanName the name of the singleton about to be created_@see #isSingletonCurrentlyInCreation;protected void beforeSingletonCreation(String beanName) {_		if (!this.inCreationCheckExclusions.contains(beanName) && !this.singletonsCurrentlyInCreation.add(beanName)) {_			throw new BeanCurrentlyInCreationException(beanName)__		}_	};callback,before,singleton,creation,p,the,default,implementation,register,the,singleton,as,currently,in,creation,param,bean,name,the,name,of,the,singleton,about,to,be,created,see,is,singleton,currently,in,creation;protected,void,before,singleton,creation,string,bean,name,if,this,in,creation,check,exclusions,contains,bean,name,this,singletons,currently,in,creation,add,bean,name,throw,new,bean,currently,in,creation,exception,bean,name
DefaultSingletonBeanRegistry -> protected void beforeSingletonCreation(String beanName);1467730834;Callback before singleton creation._<p>The default implementation register the singleton as currently in creation._@param beanName the name of the singleton about to be created_@see #isSingletonCurrentlyInCreation;protected void beforeSingletonCreation(String beanName) {_		if (!this.inCreationCheckExclusions.contains(beanName) && !this.singletonsCurrentlyInCreation.add(beanName)) {_			throw new BeanCurrentlyInCreationException(beanName)__		}_	};callback,before,singleton,creation,p,the,default,implementation,register,the,singleton,as,currently,in,creation,param,bean,name,the,name,of,the,singleton,about,to,be,created,see,is,singleton,currently,in,creation;protected,void,before,singleton,creation,string,bean,name,if,this,in,creation,check,exclusions,contains,bean,name,this,singletons,currently,in,creation,add,bean,name,throw,new,bean,currently,in,creation,exception,bean,name
DefaultSingletonBeanRegistry -> protected void beforeSingletonCreation(String beanName);1467810738;Callback before singleton creation._<p>The default implementation register the singleton as currently in creation._@param beanName the name of the singleton about to be created_@see #isSingletonCurrentlyInCreation;protected void beforeSingletonCreation(String beanName) {_		if (!this.inCreationCheckExclusions.contains(beanName) && !this.singletonsCurrentlyInCreation.add(beanName)) {_			throw new BeanCurrentlyInCreationException(beanName)__		}_	};callback,before,singleton,creation,p,the,default,implementation,register,the,singleton,as,currently,in,creation,param,bean,name,the,name,of,the,singleton,about,to,be,created,see,is,singleton,currently,in,creation;protected,void,before,singleton,creation,string,bean,name,if,this,in,creation,check,exclusions,contains,bean,name,this,singletons,currently,in,creation,add,bean,name,throw,new,bean,currently,in,creation,exception,bean,name
DefaultSingletonBeanRegistry -> protected void beforeSingletonCreation(String beanName);1469561191;Callback before singleton creation._<p>The default implementation register the singleton as currently in creation._@param beanName the name of the singleton about to be created_@see #isSingletonCurrentlyInCreation;protected void beforeSingletonCreation(String beanName) {_		if (!this.inCreationCheckExclusions.contains(beanName) && !this.singletonsCurrentlyInCreation.add(beanName)) {_			throw new BeanCurrentlyInCreationException(beanName)__		}_	};callback,before,singleton,creation,p,the,default,implementation,register,the,singleton,as,currently,in,creation,param,bean,name,the,name,of,the,singleton,about,to,be,created,see,is,singleton,currently,in,creation;protected,void,before,singleton,creation,string,bean,name,if,this,in,creation,check,exclusions,contains,bean,name,this,singletons,currently,in,creation,add,bean,name,throw,new,bean,currently,in,creation,exception,bean,name
DefaultSingletonBeanRegistry -> protected void beforeSingletonCreation(String beanName);1478538021;Callback before singleton creation._<p>The default implementation register the singleton as currently in creation._@param beanName the name of the singleton about to be created_@see #isSingletonCurrentlyInCreation;protected void beforeSingletonCreation(String beanName) {_		if (!this.inCreationCheckExclusions.contains(beanName) && !this.singletonsCurrentlyInCreation.add(beanName)) {_			throw new BeanCurrentlyInCreationException(beanName)__		}_	};callback,before,singleton,creation,p,the,default,implementation,register,the,singleton,as,currently,in,creation,param,bean,name,the,name,of,the,singleton,about,to,be,created,see,is,singleton,currently,in,creation;protected,void,before,singleton,creation,string,bean,name,if,this,in,creation,check,exclusions,contains,bean,name,this,singletons,currently,in,creation,add,bean,name,throw,new,bean,currently,in,creation,exception,bean,name
DefaultSingletonBeanRegistry -> protected void beforeSingletonCreation(String beanName);1495868221;Callback before singleton creation._<p>The default implementation register the singleton as currently in creation._@param beanName the name of the singleton about to be created_@see #isSingletonCurrentlyInCreation;protected void beforeSingletonCreation(String beanName) {_		if (!this.inCreationCheckExclusions.contains(beanName) && !this.singletonsCurrentlyInCreation.add(beanName)) {_			throw new BeanCurrentlyInCreationException(beanName)__		}_	};callback,before,singleton,creation,p,the,default,implementation,register,the,singleton,as,currently,in,creation,param,bean,name,the,name,of,the,singleton,about,to,be,created,see,is,singleton,currently,in,creation;protected,void,before,singleton,creation,string,bean,name,if,this,in,creation,check,exclusions,contains,bean,name,this,singletons,currently,in,creation,add,bean,name,throw,new,bean,currently,in,creation,exception,bean,name
DefaultSingletonBeanRegistry -> protected void beforeSingletonCreation(String beanName);1496259743;Callback before singleton creation._<p>The default implementation register the singleton as currently in creation._@param beanName the name of the singleton about to be created_@see #isSingletonCurrentlyInCreation;protected void beforeSingletonCreation(String beanName) {_		if (!this.inCreationCheckExclusions.contains(beanName) && !this.singletonsCurrentlyInCreation.add(beanName)) {_			throw new BeanCurrentlyInCreationException(beanName)__		}_	};callback,before,singleton,creation,p,the,default,implementation,register,the,singleton,as,currently,in,creation,param,bean,name,the,name,of,the,singleton,about,to,be,created,see,is,singleton,currently,in,creation;protected,void,before,singleton,creation,string,bean,name,if,this,in,creation,check,exclusions,contains,bean,name,this,singletons,currently,in,creation,add,bean,name,throw,new,bean,currently,in,creation,exception,bean,name
DefaultSingletonBeanRegistry -> protected void beforeSingletonCreation(String beanName);1496837955;Callback before singleton creation._<p>The default implementation register the singleton as currently in creation._@param beanName the name of the singleton about to be created_@see #isSingletonCurrentlyInCreation;protected void beforeSingletonCreation(String beanName) {_		if (!this.inCreationCheckExclusions.contains(beanName) && !this.singletonsCurrentlyInCreation.add(beanName)) {_			throw new BeanCurrentlyInCreationException(beanName)__		}_	};callback,before,singleton,creation,p,the,default,implementation,register,the,singleton,as,currently,in,creation,param,bean,name,the,name,of,the,singleton,about,to,be,created,see,is,singleton,currently,in,creation;protected,void,before,singleton,creation,string,bean,name,if,this,in,creation,check,exclusions,contains,bean,name,this,singletons,currently,in,creation,add,bean,name,throw,new,bean,currently,in,creation,exception,bean,name
DefaultSingletonBeanRegistry -> protected void beforeSingletonCreation(String beanName);1498780456;Callback before singleton creation._<p>The default implementation register the singleton as currently in creation._@param beanName the name of the singleton about to be created_@see #isSingletonCurrentlyInCreation;protected void beforeSingletonCreation(String beanName) {_		if (!this.inCreationCheckExclusions.contains(beanName) && !this.singletonsCurrentlyInCreation.add(beanName)) {_			throw new BeanCurrentlyInCreationException(beanName)__		}_	};callback,before,singleton,creation,p,the,default,implementation,register,the,singleton,as,currently,in,creation,param,bean,name,the,name,of,the,singleton,about,to,be,created,see,is,singleton,currently,in,creation;protected,void,before,singleton,creation,string,bean,name,if,this,in,creation,check,exclusions,contains,bean,name,this,singletons,currently,in,creation,add,bean,name,throw,new,bean,currently,in,creation,exception,bean,name
DefaultSingletonBeanRegistry -> protected void beforeSingletonCreation(String beanName);1502974979;Callback before singleton creation._<p>The default implementation register the singleton as currently in creation._@param beanName the name of the singleton about to be created_@see #isSingletonCurrentlyInCreation;protected void beforeSingletonCreation(String beanName) {_		if (!this.inCreationCheckExclusions.contains(beanName) && !this.singletonsCurrentlyInCreation.add(beanName)) {_			throw new BeanCurrentlyInCreationException(beanName)__		}_	};callback,before,singleton,creation,p,the,default,implementation,register,the,singleton,as,currently,in,creation,param,bean,name,the,name,of,the,singleton,about,to,be,created,see,is,singleton,currently,in,creation;protected,void,before,singleton,creation,string,bean,name,if,this,in,creation,check,exclusions,contains,bean,name,this,singletons,currently,in,creation,add,bean,name,throw,new,bean,currently,in,creation,exception,bean,name
DefaultSingletonBeanRegistry -> protected void beforeSingletonCreation(String beanName);1503007895;Callback before singleton creation._<p>The default implementation register the singleton as currently in creation._@param beanName the name of the singleton about to be created_@see #isSingletonCurrentlyInCreation;protected void beforeSingletonCreation(String beanName) {_		if (!this.inCreationCheckExclusions.contains(beanName) && !this.singletonsCurrentlyInCreation.add(beanName)) {_			throw new BeanCurrentlyInCreationException(beanName)__		}_	};callback,before,singleton,creation,p,the,default,implementation,register,the,singleton,as,currently,in,creation,param,bean,name,the,name,of,the,singleton,about,to,be,created,see,is,singleton,currently,in,creation;protected,void,before,singleton,creation,string,bean,name,if,this,in,creation,check,exclusions,contains,bean,name,this,singletons,currently,in,creation,add,bean,name,throw,new,bean,currently,in,creation,exception,bean,name
DefaultSingletonBeanRegistry -> protected void beforeSingletonCreation(String beanName);1518810557;Callback before singleton creation._<p>The default implementation register the singleton as currently in creation._@param beanName the name of the singleton about to be created_@see #isSingletonCurrentlyInCreation;protected void beforeSingletonCreation(String beanName) {_		if (!this.inCreationCheckExclusions.contains(beanName) && !this.singletonsCurrentlyInCreation.add(beanName)) {_			throw new BeanCurrentlyInCreationException(beanName)__		}_	};callback,before,singleton,creation,p,the,default,implementation,register,the,singleton,as,currently,in,creation,param,bean,name,the,name,of,the,singleton,about,to,be,created,see,is,singleton,currently,in,creation;protected,void,before,singleton,creation,string,bean,name,if,this,in,creation,check,exclusions,contains,bean,name,this,singletons,currently,in,creation,add,bean,name,throw,new,bean,currently,in,creation,exception,bean,name
DefaultSingletonBeanRegistry -> protected void beforeSingletonCreation(String beanName);1521822873;Callback before singleton creation._<p>The default implementation register the singleton as currently in creation._@param beanName the name of the singleton about to be created_@see #isSingletonCurrentlyInCreation;protected void beforeSingletonCreation(String beanName) {_		if (!this.inCreationCheckExclusions.contains(beanName) && !this.singletonsCurrentlyInCreation.add(beanName)) {_			throw new BeanCurrentlyInCreationException(beanName)__		}_	};callback,before,singleton,creation,p,the,default,implementation,register,the,singleton,as,currently,in,creation,param,bean,name,the,name,of,the,singleton,about,to,be,created,see,is,singleton,currently,in,creation;protected,void,before,singleton,creation,string,bean,name,if,this,in,creation,check,exclusions,contains,bean,name,this,singletons,currently,in,creation,add,bean,name,throw,new,bean,currently,in,creation,exception,bean,name
DefaultSingletonBeanRegistry -> protected void beforeSingletonCreation(String beanName);1521905451;Callback before singleton creation._<p>The default implementation register the singleton as currently in creation._@param beanName the name of the singleton about to be created_@see #isSingletonCurrentlyInCreation;protected void beforeSingletonCreation(String beanName) {_		if (!this.inCreationCheckExclusions.contains(beanName) && !this.singletonsCurrentlyInCreation.add(beanName)) {_			throw new BeanCurrentlyInCreationException(beanName)__		}_	};callback,before,singleton,creation,p,the,default,implementation,register,the,singleton,as,currently,in,creation,param,bean,name,the,name,of,the,singleton,about,to,be,created,see,is,singleton,currently,in,creation;protected,void,before,singleton,creation,string,bean,name,if,this,in,creation,check,exclusions,contains,bean,name,this,singletons,currently,in,creation,add,bean,name,throw,new,bean,currently,in,creation,exception,bean,name
DefaultSingletonBeanRegistry -> protected void beforeSingletonCreation(String beanName);1527623493;Callback before singleton creation._<p>The default implementation register the singleton as currently in creation._@param beanName the name of the singleton about to be created_@see #isSingletonCurrentlyInCreation;protected void beforeSingletonCreation(String beanName) {_		if (!this.inCreationCheckExclusions.contains(beanName) && !this.singletonsCurrentlyInCreation.add(beanName)) {_			throw new BeanCurrentlyInCreationException(beanName)__		}_	};callback,before,singleton,creation,p,the,default,implementation,register,the,singleton,as,currently,in,creation,param,bean,name,the,name,of,the,singleton,about,to,be,created,see,is,singleton,currently,in,creation;protected,void,before,singleton,creation,string,bean,name,if,this,in,creation,check,exclusions,contains,bean,name,this,singletons,currently,in,creation,add,bean,name,throw,new,bean,currently,in,creation,exception,bean,name
DefaultSingletonBeanRegistry -> protected void beforeSingletonCreation(String beanName);1530174524;Callback before singleton creation._<p>The default implementation register the singleton as currently in creation._@param beanName the name of the singleton about to be created_@see #isSingletonCurrentlyInCreation;protected void beforeSingletonCreation(String beanName) {_		if (!this.inCreationCheckExclusions.contains(beanName) && !this.singletonsCurrentlyInCreation.add(beanName)) {_			throw new BeanCurrentlyInCreationException(beanName)__		}_	};callback,before,singleton,creation,p,the,default,implementation,register,the,singleton,as,currently,in,creation,param,bean,name,the,name,of,the,singleton,about,to,be,created,see,is,singleton,currently,in,creation;protected,void,before,singleton,creation,string,bean,name,if,this,in,creation,check,exclusions,contains,bean,name,this,singletons,currently,in,creation,add,bean,name,throw,new,bean,currently,in,creation,exception,bean,name
DefaultSingletonBeanRegistry -> protected void beforeSingletonCreation(String beanName);1532091916;Callback before singleton creation._<p>The default implementation register the singleton as currently in creation._@param beanName the name of the singleton about to be created_@see #isSingletonCurrentlyInCreation;protected void beforeSingletonCreation(String beanName) {_		if (!this.inCreationCheckExclusions.contains(beanName) && !this.singletonsCurrentlyInCreation.add(beanName)) {_			throw new BeanCurrentlyInCreationException(beanName)__		}_	};callback,before,singleton,creation,p,the,default,implementation,register,the,singleton,as,currently,in,creation,param,bean,name,the,name,of,the,singleton,about,to,be,created,see,is,singleton,currently,in,creation;protected,void,before,singleton,creation,string,bean,name,if,this,in,creation,check,exclusions,contains,bean,name,this,singletons,currently,in,creation,add,bean,name,throw,new,bean,currently,in,creation,exception,bean,name
DefaultSingletonBeanRegistry -> protected void beforeSingletonCreation(String beanName);1532706365;Callback before singleton creation._<p>The default implementation register the singleton as currently in creation._@param beanName the name of the singleton about to be created_@see #isSingletonCurrentlyInCreation;protected void beforeSingletonCreation(String beanName) {_		if (!this.inCreationCheckExclusions.contains(beanName) && !this.singletonsCurrentlyInCreation.add(beanName)) {_			throw new BeanCurrentlyInCreationException(beanName)__		}_	};callback,before,singleton,creation,p,the,default,implementation,register,the,singleton,as,currently,in,creation,param,bean,name,the,name,of,the,singleton,about,to,be,created,see,is,singleton,currently,in,creation;protected,void,before,singleton,creation,string,bean,name,if,this,in,creation,check,exclusions,contains,bean,name,this,singletons,currently,in,creation,add,bean,name,throw,new,bean,currently,in,creation,exception,bean,name
DefaultSingletonBeanRegistry -> protected void addSingletonFactory(String beanName, ObjectFactory<?> singletonFactory);1385412762;Add the given singleton factory for building the specified singleton_if necessary._<p>To be called for eager registration of singletons, e.g. to be able to_resolve circular references._@param beanName the name of the bean_@param singletonFactory the factory for the singleton object;protected void addSingletonFactory(String beanName, ObjectFactory<?> singletonFactory) {_		Assert.notNull(singletonFactory, "Singleton factory must not be null")__		synchronized (this.singletonObjects) {_			if (!this.singletonObjects.containsKey(beanName)) {_				this.singletonFactories.put(beanName, singletonFactory)__				this.earlySingletonObjects.remove(beanName)__				this.registeredSingletons.add(beanName)__			}_		}_	};add,the,given,singleton,factory,for,building,the,specified,singleton,if,necessary,p,to,be,called,for,eager,registration,of,singletons,e,g,to,be,able,to,resolve,circular,references,param,bean,name,the,name,of,the,bean,param,singleton,factory,the,factory,for,the,singleton,object;protected,void,add,singleton,factory,string,bean,name,object,factory,singleton,factory,assert,not,null,singleton,factory,singleton,factory,must,not,be,null,synchronized,this,singleton,objects,if,this,singleton,objects,contains,key,bean,name,this,singleton,factories,put,bean,name,singleton,factory,this,early,singleton,objects,remove,bean,name,this,registered,singletons,add,bean,name
DefaultSingletonBeanRegistry -> protected void addSingletonFactory(String beanName, ObjectFactory<?> singletonFactory);1385984377;Add the given singleton factory for building the specified singleton_if necessary._<p>To be called for eager registration of singletons, e.g. to be able to_resolve circular references._@param beanName the name of the bean_@param singletonFactory the factory for the singleton object;protected void addSingletonFactory(String beanName, ObjectFactory<?> singletonFactory) {_		Assert.notNull(singletonFactory, "Singleton factory must not be null")__		synchronized (this.singletonObjects) {_			if (!this.singletonObjects.containsKey(beanName)) {_				this.singletonFactories.put(beanName, singletonFactory)__				this.earlySingletonObjects.remove(beanName)__				this.registeredSingletons.add(beanName)__			}_		}_	};add,the,given,singleton,factory,for,building,the,specified,singleton,if,necessary,p,to,be,called,for,eager,registration,of,singletons,e,g,to,be,able,to,resolve,circular,references,param,bean,name,the,name,of,the,bean,param,singleton,factory,the,factory,for,the,singleton,object;protected,void,add,singleton,factory,string,bean,name,object,factory,singleton,factory,assert,not,null,singleton,factory,singleton,factory,must,not,be,null,synchronized,this,singleton,objects,if,this,singleton,objects,contains,key,bean,name,this,singleton,factories,put,bean,name,singleton,factory,this,early,singleton,objects,remove,bean,name,this,registered,singletons,add,bean,name
DefaultSingletonBeanRegistry -> protected void addSingletonFactory(String beanName, ObjectFactory<?> singletonFactory);1405430015;Add the given singleton factory for building the specified singleton_if necessary._<p>To be called for eager registration of singletons, e.g. to be able to_resolve circular references._@param beanName the name of the bean_@param singletonFactory the factory for the singleton object;protected void addSingletonFactory(String beanName, ObjectFactory<?> singletonFactory) {_		Assert.notNull(singletonFactory, "Singleton factory must not be null")__		synchronized (this.singletonObjects) {_			if (!this.singletonObjects.containsKey(beanName)) {_				this.singletonFactories.put(beanName, singletonFactory)__				this.earlySingletonObjects.remove(beanName)__				this.registeredSingletons.add(beanName)__			}_		}_	};add,the,given,singleton,factory,for,building,the,specified,singleton,if,necessary,p,to,be,called,for,eager,registration,of,singletons,e,g,to,be,able,to,resolve,circular,references,param,bean,name,the,name,of,the,bean,param,singleton,factory,the,factory,for,the,singleton,object;protected,void,add,singleton,factory,string,bean,name,object,factory,singleton,factory,assert,not,null,singleton,factory,singleton,factory,must,not,be,null,synchronized,this,singleton,objects,if,this,singleton,objects,contains,key,bean,name,this,singleton,factories,put,bean,name,singleton,factory,this,early,singleton,objects,remove,bean,name,this,registered,singletons,add,bean,name
DefaultSingletonBeanRegistry -> protected void addSingletonFactory(String beanName, ObjectFactory<?> singletonFactory);1408528936;Add the given singleton factory for building the specified singleton_if necessary._<p>To be called for eager registration of singletons, e.g. to be able to_resolve circular references._@param beanName the name of the bean_@param singletonFactory the factory for the singleton object;protected void addSingletonFactory(String beanName, ObjectFactory<?> singletonFactory) {_		Assert.notNull(singletonFactory, "Singleton factory must not be null")__		synchronized (this.singletonObjects) {_			if (!this.singletonObjects.containsKey(beanName)) {_				this.singletonFactories.put(beanName, singletonFactory)__				this.earlySingletonObjects.remove(beanName)__				this.registeredSingletons.add(beanName)__			}_		}_	};add,the,given,singleton,factory,for,building,the,specified,singleton,if,necessary,p,to,be,called,for,eager,registration,of,singletons,e,g,to,be,able,to,resolve,circular,references,param,bean,name,the,name,of,the,bean,param,singleton,factory,the,factory,for,the,singleton,object;protected,void,add,singleton,factory,string,bean,name,object,factory,singleton,factory,assert,not,null,singleton,factory,singleton,factory,must,not,be,null,synchronized,this,singleton,objects,if,this,singleton,objects,contains,key,bean,name,this,singleton,factories,put,bean,name,singleton,factory,this,early,singleton,objects,remove,bean,name,this,registered,singletons,add,bean,name
DefaultSingletonBeanRegistry -> protected void addSingletonFactory(String beanName, ObjectFactory<?> singletonFactory);1408624154;Add the given singleton factory for building the specified singleton_if necessary._<p>To be called for eager registration of singletons, e.g. to be able to_resolve circular references._@param beanName the name of the bean_@param singletonFactory the factory for the singleton object;protected void addSingletonFactory(String beanName, ObjectFactory<?> singletonFactory) {_		Assert.notNull(singletonFactory, "Singleton factory must not be null")__		synchronized (this.singletonObjects) {_			if (!this.singletonObjects.containsKey(beanName)) {_				this.singletonFactories.put(beanName, singletonFactory)__				this.earlySingletonObjects.remove(beanName)__				this.registeredSingletons.add(beanName)__			}_		}_	};add,the,given,singleton,factory,for,building,the,specified,singleton,if,necessary,p,to,be,called,for,eager,registration,of,singletons,e,g,to,be,able,to,resolve,circular,references,param,bean,name,the,name,of,the,bean,param,singleton,factory,the,factory,for,the,singleton,object;protected,void,add,singleton,factory,string,bean,name,object,factory,singleton,factory,assert,not,null,singleton,factory,singleton,factory,must,not,be,null,synchronized,this,singleton,objects,if,this,singleton,objects,contains,key,bean,name,this,singleton,factories,put,bean,name,singleton,factory,this,early,singleton,objects,remove,bean,name,this,registered,singletons,add,bean,name
DefaultSingletonBeanRegistry -> protected void addSingletonFactory(String beanName, ObjectFactory<?> singletonFactory);1409688815;Add the given singleton factory for building the specified singleton_if necessary._<p>To be called for eager registration of singletons, e.g. to be able to_resolve circular references._@param beanName the name of the bean_@param singletonFactory the factory for the singleton object;protected void addSingletonFactory(String beanName, ObjectFactory<?> singletonFactory) {_		Assert.notNull(singletonFactory, "Singleton factory must not be null")__		synchronized (this.singletonObjects) {_			if (!this.singletonObjects.containsKey(beanName)) {_				this.singletonFactories.put(beanName, singletonFactory)__				this.earlySingletonObjects.remove(beanName)__				this.registeredSingletons.add(beanName)__			}_		}_	};add,the,given,singleton,factory,for,building,the,specified,singleton,if,necessary,p,to,be,called,for,eager,registration,of,singletons,e,g,to,be,able,to,resolve,circular,references,param,bean,name,the,name,of,the,bean,param,singleton,factory,the,factory,for,the,singleton,object;protected,void,add,singleton,factory,string,bean,name,object,factory,singleton,factory,assert,not,null,singleton,factory,singleton,factory,must,not,be,null,synchronized,this,singleton,objects,if,this,singleton,objects,contains,key,bean,name,this,singleton,factories,put,bean,name,singleton,factory,this,early,singleton,objects,remove,bean,name,this,registered,singletons,add,bean,name
DefaultSingletonBeanRegistry -> protected void addSingletonFactory(String beanName, ObjectFactory<?> singletonFactory);1417966231;Add the given singleton factory for building the specified singleton_if necessary._<p>To be called for eager registration of singletons, e.g. to be able to_resolve circular references._@param beanName the name of the bean_@param singletonFactory the factory for the singleton object;protected void addSingletonFactory(String beanName, ObjectFactory<?> singletonFactory) {_		Assert.notNull(singletonFactory, "Singleton factory must not be null")__		synchronized (this.singletonObjects) {_			if (!this.singletonObjects.containsKey(beanName)) {_				this.singletonFactories.put(beanName, singletonFactory)__				this.earlySingletonObjects.remove(beanName)__				this.registeredSingletons.add(beanName)__			}_		}_	};add,the,given,singleton,factory,for,building,the,specified,singleton,if,necessary,p,to,be,called,for,eager,registration,of,singletons,e,g,to,be,able,to,resolve,circular,references,param,bean,name,the,name,of,the,bean,param,singleton,factory,the,factory,for,the,singleton,object;protected,void,add,singleton,factory,string,bean,name,object,factory,singleton,factory,assert,not,null,singleton,factory,singleton,factory,must,not,be,null,synchronized,this,singleton,objects,if,this,singleton,objects,contains,key,bean,name,this,singleton,factories,put,bean,name,singleton,factory,this,early,singleton,objects,remove,bean,name,this,registered,singletons,add,bean,name
DefaultSingletonBeanRegistry -> protected void addSingletonFactory(String beanName, ObjectFactory<?> singletonFactory);1424972106;Add the given singleton factory for building the specified singleton_if necessary._<p>To be called for eager registration of singletons, e.g. to be able to_resolve circular references._@param beanName the name of the bean_@param singletonFactory the factory for the singleton object;protected void addSingletonFactory(String beanName, ObjectFactory<?> singletonFactory) {_		Assert.notNull(singletonFactory, "Singleton factory must not be null")__		synchronized (this.singletonObjects) {_			if (!this.singletonObjects.containsKey(beanName)) {_				this.singletonFactories.put(beanName, singletonFactory)__				this.earlySingletonObjects.remove(beanName)__				this.registeredSingletons.add(beanName)__			}_		}_	};add,the,given,singleton,factory,for,building,the,specified,singleton,if,necessary,p,to,be,called,for,eager,registration,of,singletons,e,g,to,be,able,to,resolve,circular,references,param,bean,name,the,name,of,the,bean,param,singleton,factory,the,factory,for,the,singleton,object;protected,void,add,singleton,factory,string,bean,name,object,factory,singleton,factory,assert,not,null,singleton,factory,singleton,factory,must,not,be,null,synchronized,this,singleton,objects,if,this,singleton,objects,contains,key,bean,name,this,singleton,factories,put,bean,name,singleton,factory,this,early,singleton,objects,remove,bean,name,this,registered,singletons,add,bean,name
DefaultSingletonBeanRegistry -> protected void addSingletonFactory(String beanName, ObjectFactory<?> singletonFactory);1447399860;Add the given singleton factory for building the specified singleton_if necessary._<p>To be called for eager registration of singletons, e.g. to be able to_resolve circular references._@param beanName the name of the bean_@param singletonFactory the factory for the singleton object;protected void addSingletonFactory(String beanName, ObjectFactory<?> singletonFactory) {_		Assert.notNull(singletonFactory, "Singleton factory must not be null")__		synchronized (this.singletonObjects) {_			if (!this.singletonObjects.containsKey(beanName)) {_				this.singletonFactories.put(beanName, singletonFactory)__				this.earlySingletonObjects.remove(beanName)__				this.registeredSingletons.add(beanName)__			}_		}_	};add,the,given,singleton,factory,for,building,the,specified,singleton,if,necessary,p,to,be,called,for,eager,registration,of,singletons,e,g,to,be,able,to,resolve,circular,references,param,bean,name,the,name,of,the,bean,param,singleton,factory,the,factory,for,the,singleton,object;protected,void,add,singleton,factory,string,bean,name,object,factory,singleton,factory,assert,not,null,singleton,factory,singleton,factory,must,not,be,null,synchronized,this,singleton,objects,if,this,singleton,objects,contains,key,bean,name,this,singleton,factories,put,bean,name,singleton,factory,this,early,singleton,objects,remove,bean,name,this,registered,singletons,add,bean,name
DefaultSingletonBeanRegistry -> protected void addSingletonFactory(String beanName, ObjectFactory<?> singletonFactory);1467730834;Add the given singleton factory for building the specified singleton_if necessary._<p>To be called for eager registration of singletons, e.g. to be able to_resolve circular references._@param beanName the name of the bean_@param singletonFactory the factory for the singleton object;protected void addSingletonFactory(String beanName, ObjectFactory<?> singletonFactory) {_		Assert.notNull(singletonFactory, "Singleton factory must not be null")__		synchronized (this.singletonObjects) {_			if (!this.singletonObjects.containsKey(beanName)) {_				this.singletonFactories.put(beanName, singletonFactory)__				this.earlySingletonObjects.remove(beanName)__				this.registeredSingletons.add(beanName)__			}_		}_	};add,the,given,singleton,factory,for,building,the,specified,singleton,if,necessary,p,to,be,called,for,eager,registration,of,singletons,e,g,to,be,able,to,resolve,circular,references,param,bean,name,the,name,of,the,bean,param,singleton,factory,the,factory,for,the,singleton,object;protected,void,add,singleton,factory,string,bean,name,object,factory,singleton,factory,assert,not,null,singleton,factory,singleton,factory,must,not,be,null,synchronized,this,singleton,objects,if,this,singleton,objects,contains,key,bean,name,this,singleton,factories,put,bean,name,singleton,factory,this,early,singleton,objects,remove,bean,name,this,registered,singletons,add,bean,name
DefaultSingletonBeanRegistry -> protected void addSingletonFactory(String beanName, ObjectFactory<?> singletonFactory);1467810738;Add the given singleton factory for building the specified singleton_if necessary._<p>To be called for eager registration of singletons, e.g. to be able to_resolve circular references._@param beanName the name of the bean_@param singletonFactory the factory for the singleton object;protected void addSingletonFactory(String beanName, ObjectFactory<?> singletonFactory) {_		Assert.notNull(singletonFactory, "Singleton factory must not be null")__		synchronized (this.singletonObjects) {_			if (!this.singletonObjects.containsKey(beanName)) {_				this.singletonFactories.put(beanName, singletonFactory)__				this.earlySingletonObjects.remove(beanName)__				this.registeredSingletons.add(beanName)__			}_		}_	};add,the,given,singleton,factory,for,building,the,specified,singleton,if,necessary,p,to,be,called,for,eager,registration,of,singletons,e,g,to,be,able,to,resolve,circular,references,param,bean,name,the,name,of,the,bean,param,singleton,factory,the,factory,for,the,singleton,object;protected,void,add,singleton,factory,string,bean,name,object,factory,singleton,factory,assert,not,null,singleton,factory,singleton,factory,must,not,be,null,synchronized,this,singleton,objects,if,this,singleton,objects,contains,key,bean,name,this,singleton,factories,put,bean,name,singleton,factory,this,early,singleton,objects,remove,bean,name,this,registered,singletons,add,bean,name
DefaultSingletonBeanRegistry -> protected void addSingletonFactory(String beanName, ObjectFactory<?> singletonFactory);1469561191;Add the given singleton factory for building the specified singleton_if necessary._<p>To be called for eager registration of singletons, e.g. to be able to_resolve circular references._@param beanName the name of the bean_@param singletonFactory the factory for the singleton object;protected void addSingletonFactory(String beanName, ObjectFactory<?> singletonFactory) {_		Assert.notNull(singletonFactory, "Singleton factory must not be null")__		synchronized (this.singletonObjects) {_			if (!this.singletonObjects.containsKey(beanName)) {_				this.singletonFactories.put(beanName, singletonFactory)__				this.earlySingletonObjects.remove(beanName)__				this.registeredSingletons.add(beanName)__			}_		}_	};add,the,given,singleton,factory,for,building,the,specified,singleton,if,necessary,p,to,be,called,for,eager,registration,of,singletons,e,g,to,be,able,to,resolve,circular,references,param,bean,name,the,name,of,the,bean,param,singleton,factory,the,factory,for,the,singleton,object;protected,void,add,singleton,factory,string,bean,name,object,factory,singleton,factory,assert,not,null,singleton,factory,singleton,factory,must,not,be,null,synchronized,this,singleton,objects,if,this,singleton,objects,contains,key,bean,name,this,singleton,factories,put,bean,name,singleton,factory,this,early,singleton,objects,remove,bean,name,this,registered,singletons,add,bean,name
DefaultSingletonBeanRegistry -> protected void addSingletonFactory(String beanName, ObjectFactory<?> singletonFactory);1478538021;Add the given singleton factory for building the specified singleton_if necessary._<p>To be called for eager registration of singletons, e.g. to be able to_resolve circular references._@param beanName the name of the bean_@param singletonFactory the factory for the singleton object;protected void addSingletonFactory(String beanName, ObjectFactory<?> singletonFactory) {_		Assert.notNull(singletonFactory, "Singleton factory must not be null")__		synchronized (this.singletonObjects) {_			if (!this.singletonObjects.containsKey(beanName)) {_				this.singletonFactories.put(beanName, singletonFactory)__				this.earlySingletonObjects.remove(beanName)__				this.registeredSingletons.add(beanName)__			}_		}_	};add,the,given,singleton,factory,for,building,the,specified,singleton,if,necessary,p,to,be,called,for,eager,registration,of,singletons,e,g,to,be,able,to,resolve,circular,references,param,bean,name,the,name,of,the,bean,param,singleton,factory,the,factory,for,the,singleton,object;protected,void,add,singleton,factory,string,bean,name,object,factory,singleton,factory,assert,not,null,singleton,factory,singleton,factory,must,not,be,null,synchronized,this,singleton,objects,if,this,singleton,objects,contains,key,bean,name,this,singleton,factories,put,bean,name,singleton,factory,this,early,singleton,objects,remove,bean,name,this,registered,singletons,add,bean,name
DefaultSingletonBeanRegistry -> protected void addSingletonFactory(String beanName, ObjectFactory<?> singletonFactory);1495868221;Add the given singleton factory for building the specified singleton_if necessary._<p>To be called for eager registration of singletons, e.g. to be able to_resolve circular references._@param beanName the name of the bean_@param singletonFactory the factory for the singleton object;protected void addSingletonFactory(String beanName, ObjectFactory<?> singletonFactory) {_		Assert.notNull(singletonFactory, "Singleton factory must not be null")__		synchronized (this.singletonObjects) {_			if (!this.singletonObjects.containsKey(beanName)) {_				this.singletonFactories.put(beanName, singletonFactory)__				this.earlySingletonObjects.remove(beanName)__				this.registeredSingletons.add(beanName)__			}_		}_	};add,the,given,singleton,factory,for,building,the,specified,singleton,if,necessary,p,to,be,called,for,eager,registration,of,singletons,e,g,to,be,able,to,resolve,circular,references,param,bean,name,the,name,of,the,bean,param,singleton,factory,the,factory,for,the,singleton,object;protected,void,add,singleton,factory,string,bean,name,object,factory,singleton,factory,assert,not,null,singleton,factory,singleton,factory,must,not,be,null,synchronized,this,singleton,objects,if,this,singleton,objects,contains,key,bean,name,this,singleton,factories,put,bean,name,singleton,factory,this,early,singleton,objects,remove,bean,name,this,registered,singletons,add,bean,name
DefaultSingletonBeanRegistry -> protected void addSingletonFactory(String beanName, ObjectFactory<?> singletonFactory);1496259743;Add the given singleton factory for building the specified singleton_if necessary._<p>To be called for eager registration of singletons, e.g. to be able to_resolve circular references._@param beanName the name of the bean_@param singletonFactory the factory for the singleton object;protected void addSingletonFactory(String beanName, ObjectFactory<?> singletonFactory) {_		Assert.notNull(singletonFactory, "Singleton factory must not be null")__		synchronized (this.singletonObjects) {_			if (!this.singletonObjects.containsKey(beanName)) {_				this.singletonFactories.put(beanName, singletonFactory)__				this.earlySingletonObjects.remove(beanName)__				this.registeredSingletons.add(beanName)__			}_		}_	};add,the,given,singleton,factory,for,building,the,specified,singleton,if,necessary,p,to,be,called,for,eager,registration,of,singletons,e,g,to,be,able,to,resolve,circular,references,param,bean,name,the,name,of,the,bean,param,singleton,factory,the,factory,for,the,singleton,object;protected,void,add,singleton,factory,string,bean,name,object,factory,singleton,factory,assert,not,null,singleton,factory,singleton,factory,must,not,be,null,synchronized,this,singleton,objects,if,this,singleton,objects,contains,key,bean,name,this,singleton,factories,put,bean,name,singleton,factory,this,early,singleton,objects,remove,bean,name,this,registered,singletons,add,bean,name
DefaultSingletonBeanRegistry -> protected void addSingletonFactory(String beanName, ObjectFactory<?> singletonFactory);1496837955;Add the given singleton factory for building the specified singleton_if necessary._<p>To be called for eager registration of singletons, e.g. to be able to_resolve circular references._@param beanName the name of the bean_@param singletonFactory the factory for the singleton object;protected void addSingletonFactory(String beanName, ObjectFactory<?> singletonFactory) {_		Assert.notNull(singletonFactory, "Singleton factory must not be null")__		synchronized (this.singletonObjects) {_			if (!this.singletonObjects.containsKey(beanName)) {_				this.singletonFactories.put(beanName, singletonFactory)__				this.earlySingletonObjects.remove(beanName)__				this.registeredSingletons.add(beanName)__			}_		}_	};add,the,given,singleton,factory,for,building,the,specified,singleton,if,necessary,p,to,be,called,for,eager,registration,of,singletons,e,g,to,be,able,to,resolve,circular,references,param,bean,name,the,name,of,the,bean,param,singleton,factory,the,factory,for,the,singleton,object;protected,void,add,singleton,factory,string,bean,name,object,factory,singleton,factory,assert,not,null,singleton,factory,singleton,factory,must,not,be,null,synchronized,this,singleton,objects,if,this,singleton,objects,contains,key,bean,name,this,singleton,factories,put,bean,name,singleton,factory,this,early,singleton,objects,remove,bean,name,this,registered,singletons,add,bean,name
DefaultSingletonBeanRegistry -> protected void addSingletonFactory(String beanName, ObjectFactory<?> singletonFactory);1498780456;Add the given singleton factory for building the specified singleton_if necessary._<p>To be called for eager registration of singletons, e.g. to be able to_resolve circular references._@param beanName the name of the bean_@param singletonFactory the factory for the singleton object;protected void addSingletonFactory(String beanName, ObjectFactory<?> singletonFactory) {_		Assert.notNull(singletonFactory, "Singleton factory must not be null")__		synchronized (this.singletonObjects) {_			if (!this.singletonObjects.containsKey(beanName)) {_				this.singletonFactories.put(beanName, singletonFactory)__				this.earlySingletonObjects.remove(beanName)__				this.registeredSingletons.add(beanName)__			}_		}_	};add,the,given,singleton,factory,for,building,the,specified,singleton,if,necessary,p,to,be,called,for,eager,registration,of,singletons,e,g,to,be,able,to,resolve,circular,references,param,bean,name,the,name,of,the,bean,param,singleton,factory,the,factory,for,the,singleton,object;protected,void,add,singleton,factory,string,bean,name,object,factory,singleton,factory,assert,not,null,singleton,factory,singleton,factory,must,not,be,null,synchronized,this,singleton,objects,if,this,singleton,objects,contains,key,bean,name,this,singleton,factories,put,bean,name,singleton,factory,this,early,singleton,objects,remove,bean,name,this,registered,singletons,add,bean,name
DefaultSingletonBeanRegistry -> protected void addSingletonFactory(String beanName, ObjectFactory<?> singletonFactory);1502974979;Add the given singleton factory for building the specified singleton_if necessary._<p>To be called for eager registration of singletons, e.g. to be able to_resolve circular references._@param beanName the name of the bean_@param singletonFactory the factory for the singleton object;protected void addSingletonFactory(String beanName, ObjectFactory<?> singletonFactory) {_		Assert.notNull(singletonFactory, "Singleton factory must not be null")__		synchronized (this.singletonObjects) {_			if (!this.singletonObjects.containsKey(beanName)) {_				this.singletonFactories.put(beanName, singletonFactory)__				this.earlySingletonObjects.remove(beanName)__				this.registeredSingletons.add(beanName)__			}_		}_	};add,the,given,singleton,factory,for,building,the,specified,singleton,if,necessary,p,to,be,called,for,eager,registration,of,singletons,e,g,to,be,able,to,resolve,circular,references,param,bean,name,the,name,of,the,bean,param,singleton,factory,the,factory,for,the,singleton,object;protected,void,add,singleton,factory,string,bean,name,object,factory,singleton,factory,assert,not,null,singleton,factory,singleton,factory,must,not,be,null,synchronized,this,singleton,objects,if,this,singleton,objects,contains,key,bean,name,this,singleton,factories,put,bean,name,singleton,factory,this,early,singleton,objects,remove,bean,name,this,registered,singletons,add,bean,name
DefaultSingletonBeanRegistry -> protected void addSingletonFactory(String beanName, ObjectFactory<?> singletonFactory);1503007895;Add the given singleton factory for building the specified singleton_if necessary._<p>To be called for eager registration of singletons, e.g. to be able to_resolve circular references._@param beanName the name of the bean_@param singletonFactory the factory for the singleton object;protected void addSingletonFactory(String beanName, ObjectFactory<?> singletonFactory) {_		Assert.notNull(singletonFactory, "Singleton factory must not be null")__		synchronized (this.singletonObjects) {_			if (!this.singletonObjects.containsKey(beanName)) {_				this.singletonFactories.put(beanName, singletonFactory)__				this.earlySingletonObjects.remove(beanName)__				this.registeredSingletons.add(beanName)__			}_		}_	};add,the,given,singleton,factory,for,building,the,specified,singleton,if,necessary,p,to,be,called,for,eager,registration,of,singletons,e,g,to,be,able,to,resolve,circular,references,param,bean,name,the,name,of,the,bean,param,singleton,factory,the,factory,for,the,singleton,object;protected,void,add,singleton,factory,string,bean,name,object,factory,singleton,factory,assert,not,null,singleton,factory,singleton,factory,must,not,be,null,synchronized,this,singleton,objects,if,this,singleton,objects,contains,key,bean,name,this,singleton,factories,put,bean,name,singleton,factory,this,early,singleton,objects,remove,bean,name,this,registered,singletons,add,bean,name
DefaultSingletonBeanRegistry -> protected void addSingletonFactory(String beanName, ObjectFactory<?> singletonFactory);1518810557;Add the given singleton factory for building the specified singleton_if necessary._<p>To be called for eager registration of singletons, e.g. to be able to_resolve circular references._@param beanName the name of the bean_@param singletonFactory the factory for the singleton object;protected void addSingletonFactory(String beanName, ObjectFactory<?> singletonFactory) {_		Assert.notNull(singletonFactory, "Singleton factory must not be null")__		synchronized (this.singletonObjects) {_			if (!this.singletonObjects.containsKey(beanName)) {_				this.singletonFactories.put(beanName, singletonFactory)__				this.earlySingletonObjects.remove(beanName)__				this.registeredSingletons.add(beanName)__			}_		}_	};add,the,given,singleton,factory,for,building,the,specified,singleton,if,necessary,p,to,be,called,for,eager,registration,of,singletons,e,g,to,be,able,to,resolve,circular,references,param,bean,name,the,name,of,the,bean,param,singleton,factory,the,factory,for,the,singleton,object;protected,void,add,singleton,factory,string,bean,name,object,factory,singleton,factory,assert,not,null,singleton,factory,singleton,factory,must,not,be,null,synchronized,this,singleton,objects,if,this,singleton,objects,contains,key,bean,name,this,singleton,factories,put,bean,name,singleton,factory,this,early,singleton,objects,remove,bean,name,this,registered,singletons,add,bean,name
DefaultSingletonBeanRegistry -> protected void addSingletonFactory(String beanName, ObjectFactory<?> singletonFactory);1521822873;Add the given singleton factory for building the specified singleton_if necessary._<p>To be called for eager registration of singletons, e.g. to be able to_resolve circular references._@param beanName the name of the bean_@param singletonFactory the factory for the singleton object;protected void addSingletonFactory(String beanName, ObjectFactory<?> singletonFactory) {_		Assert.notNull(singletonFactory, "Singleton factory must not be null")__		synchronized (this.singletonObjects) {_			if (!this.singletonObjects.containsKey(beanName)) {_				this.singletonFactories.put(beanName, singletonFactory)__				this.earlySingletonObjects.remove(beanName)__				this.registeredSingletons.add(beanName)__			}_		}_	};add,the,given,singleton,factory,for,building,the,specified,singleton,if,necessary,p,to,be,called,for,eager,registration,of,singletons,e,g,to,be,able,to,resolve,circular,references,param,bean,name,the,name,of,the,bean,param,singleton,factory,the,factory,for,the,singleton,object;protected,void,add,singleton,factory,string,bean,name,object,factory,singleton,factory,assert,not,null,singleton,factory,singleton,factory,must,not,be,null,synchronized,this,singleton,objects,if,this,singleton,objects,contains,key,bean,name,this,singleton,factories,put,bean,name,singleton,factory,this,early,singleton,objects,remove,bean,name,this,registered,singletons,add,bean,name
DefaultSingletonBeanRegistry -> protected void addSingletonFactory(String beanName, ObjectFactory<?> singletonFactory);1521905451;Add the given singleton factory for building the specified singleton_if necessary._<p>To be called for eager registration of singletons, e.g. to be able to_resolve circular references._@param beanName the name of the bean_@param singletonFactory the factory for the singleton object;protected void addSingletonFactory(String beanName, ObjectFactory<?> singletonFactory) {_		Assert.notNull(singletonFactory, "Singleton factory must not be null")__		synchronized (this.singletonObjects) {_			if (!this.singletonObjects.containsKey(beanName)) {_				this.singletonFactories.put(beanName, singletonFactory)__				this.earlySingletonObjects.remove(beanName)__				this.registeredSingletons.add(beanName)__			}_		}_	};add,the,given,singleton,factory,for,building,the,specified,singleton,if,necessary,p,to,be,called,for,eager,registration,of,singletons,e,g,to,be,able,to,resolve,circular,references,param,bean,name,the,name,of,the,bean,param,singleton,factory,the,factory,for,the,singleton,object;protected,void,add,singleton,factory,string,bean,name,object,factory,singleton,factory,assert,not,null,singleton,factory,singleton,factory,must,not,be,null,synchronized,this,singleton,objects,if,this,singleton,objects,contains,key,bean,name,this,singleton,factories,put,bean,name,singleton,factory,this,early,singleton,objects,remove,bean,name,this,registered,singletons,add,bean,name
DefaultSingletonBeanRegistry -> protected void addSingletonFactory(String beanName, ObjectFactory<?> singletonFactory);1527623493;Add the given singleton factory for building the specified singleton_if necessary._<p>To be called for eager registration of singletons, e.g. to be able to_resolve circular references._@param beanName the name of the bean_@param singletonFactory the factory for the singleton object;protected void addSingletonFactory(String beanName, ObjectFactory<?> singletonFactory) {_		Assert.notNull(singletonFactory, "Singleton factory must not be null")__		synchronized (this.singletonObjects) {_			if (!this.singletonObjects.containsKey(beanName)) {_				this.singletonFactories.put(beanName, singletonFactory)__				this.earlySingletonObjects.remove(beanName)__				this.registeredSingletons.add(beanName)__			}_		}_	};add,the,given,singleton,factory,for,building,the,specified,singleton,if,necessary,p,to,be,called,for,eager,registration,of,singletons,e,g,to,be,able,to,resolve,circular,references,param,bean,name,the,name,of,the,bean,param,singleton,factory,the,factory,for,the,singleton,object;protected,void,add,singleton,factory,string,bean,name,object,factory,singleton,factory,assert,not,null,singleton,factory,singleton,factory,must,not,be,null,synchronized,this,singleton,objects,if,this,singleton,objects,contains,key,bean,name,this,singleton,factories,put,bean,name,singleton,factory,this,early,singleton,objects,remove,bean,name,this,registered,singletons,add,bean,name
DefaultSingletonBeanRegistry -> protected void addSingletonFactory(String beanName, ObjectFactory<?> singletonFactory);1530174524;Add the given singleton factory for building the specified singleton_if necessary._<p>To be called for eager registration of singletons, e.g. to be able to_resolve circular references._@param beanName the name of the bean_@param singletonFactory the factory for the singleton object;protected void addSingletonFactory(String beanName, ObjectFactory<?> singletonFactory) {_		Assert.notNull(singletonFactory, "Singleton factory must not be null")__		synchronized (this.singletonObjects) {_			if (!this.singletonObjects.containsKey(beanName)) {_				this.singletonFactories.put(beanName, singletonFactory)__				this.earlySingletonObjects.remove(beanName)__				this.registeredSingletons.add(beanName)__			}_		}_	};add,the,given,singleton,factory,for,building,the,specified,singleton,if,necessary,p,to,be,called,for,eager,registration,of,singletons,e,g,to,be,able,to,resolve,circular,references,param,bean,name,the,name,of,the,bean,param,singleton,factory,the,factory,for,the,singleton,object;protected,void,add,singleton,factory,string,bean,name,object,factory,singleton,factory,assert,not,null,singleton,factory,singleton,factory,must,not,be,null,synchronized,this,singleton,objects,if,this,singleton,objects,contains,key,bean,name,this,singleton,factories,put,bean,name,singleton,factory,this,early,singleton,objects,remove,bean,name,this,registered,singletons,add,bean,name
DefaultSingletonBeanRegistry -> protected void addSingletonFactory(String beanName, ObjectFactory<?> singletonFactory);1532091916;Add the given singleton factory for building the specified singleton_if necessary._<p>To be called for eager registration of singletons, e.g. to be able to_resolve circular references._@param beanName the name of the bean_@param singletonFactory the factory for the singleton object;protected void addSingletonFactory(String beanName, ObjectFactory<?> singletonFactory) {_		Assert.notNull(singletonFactory, "Singleton factory must not be null")__		synchronized (this.singletonObjects) {_			if (!this.singletonObjects.containsKey(beanName)) {_				this.singletonFactories.put(beanName, singletonFactory)__				this.earlySingletonObjects.remove(beanName)__				this.registeredSingletons.add(beanName)__			}_		}_	};add,the,given,singleton,factory,for,building,the,specified,singleton,if,necessary,p,to,be,called,for,eager,registration,of,singletons,e,g,to,be,able,to,resolve,circular,references,param,bean,name,the,name,of,the,bean,param,singleton,factory,the,factory,for,the,singleton,object;protected,void,add,singleton,factory,string,bean,name,object,factory,singleton,factory,assert,not,null,singleton,factory,singleton,factory,must,not,be,null,synchronized,this,singleton,objects,if,this,singleton,objects,contains,key,bean,name,this,singleton,factories,put,bean,name,singleton,factory,this,early,singleton,objects,remove,bean,name,this,registered,singletons,add,bean,name
DefaultSingletonBeanRegistry -> protected void addSingletonFactory(String beanName, ObjectFactory<?> singletonFactory);1532706365;Add the given singleton factory for building the specified singleton_if necessary._<p>To be called for eager registration of singletons, e.g. to be able to_resolve circular references._@param beanName the name of the bean_@param singletonFactory the factory for the singleton object;protected void addSingletonFactory(String beanName, ObjectFactory<?> singletonFactory) {_		Assert.notNull(singletonFactory, "Singleton factory must not be null")__		synchronized (this.singletonObjects) {_			if (!this.singletonObjects.containsKey(beanName)) {_				this.singletonFactories.put(beanName, singletonFactory)__				this.earlySingletonObjects.remove(beanName)__				this.registeredSingletons.add(beanName)__			}_		}_	};add,the,given,singleton,factory,for,building,the,specified,singleton,if,necessary,p,to,be,called,for,eager,registration,of,singletons,e,g,to,be,able,to,resolve,circular,references,param,bean,name,the,name,of,the,bean,param,singleton,factory,the,factory,for,the,singleton,object;protected,void,add,singleton,factory,string,bean,name,object,factory,singleton,factory,assert,not,null,singleton,factory,singleton,factory,must,not,be,null,synchronized,this,singleton,objects,if,this,singleton,objects,contains,key,bean,name,this,singleton,factories,put,bean,name,singleton,factory,this,early,singleton,objects,remove,bean,name,this,registered,singletons,add,bean,name
DefaultSingletonBeanRegistry -> protected void addSingleton(String beanName, Object singletonObject);1328020251;Add the given singleton object to the singleton cache of this factory._<p>To be called for eager registration of singletons._@param beanName the name of the bean_@param singletonObject the singleton object;protected void addSingleton(String beanName, Object singletonObject) {_		synchronized (this.singletonObjects) {_			this.singletonObjects.put(beanName, (singletonObject != null ? singletonObject : NULL_OBJECT))__			this.singletonFactories.remove(beanName)__			this.earlySingletonObjects.remove(beanName)__			this.registeredSingletons.add(beanName)__		}_	};add,the,given,singleton,object,to,the,singleton,cache,of,this,factory,p,to,be,called,for,eager,registration,of,singletons,param,bean,name,the,name,of,the,bean,param,singleton,object,the,singleton,object;protected,void,add,singleton,string,bean,name,object,singleton,object,synchronized,this,singleton,objects,this,singleton,objects,put,bean,name,singleton,object,null,singleton,object,this,singleton,factories,remove,bean,name,this,early,singleton,objects,remove,bean,name,this,registered,singletons,add,bean,name
DefaultSingletonBeanRegistry -> protected void addSingleton(String beanName, Object singletonObject);1349872135;Add the given singleton object to the singleton cache of this factory._<p>To be called for eager registration of singletons._@param beanName the name of the bean_@param singletonObject the singleton object;protected void addSingleton(String beanName, Object singletonObject) {_		synchronized (this.singletonObjects) {_			this.singletonObjects.put(beanName, (singletonObject != null ? singletonObject : NULL_OBJECT))__			this.singletonFactories.remove(beanName)__			this.earlySingletonObjects.remove(beanName)__			this.registeredSingletons.add(beanName)__		}_	};add,the,given,singleton,object,to,the,singleton,cache,of,this,factory,p,to,be,called,for,eager,registration,of,singletons,param,bean,name,the,name,of,the,bean,param,singleton,object,the,singleton,object;protected,void,add,singleton,string,bean,name,object,singleton,object,synchronized,this,singleton,objects,this,singleton,objects,put,bean,name,singleton,object,null,singleton,object,this,singleton,factories,remove,bean,name,this,early,singleton,objects,remove,bean,name,this,registered,singletons,add,bean,name
DefaultSingletonBeanRegistry -> protected void addSingleton(String beanName, Object singletonObject);1352412938;Add the given singleton object to the singleton cache of this factory._<p>To be called for eager registration of singletons._@param beanName the name of the bean_@param singletonObject the singleton object;protected void addSingleton(String beanName, Object singletonObject) {_		synchronized (this.singletonObjects) {_			this.singletonObjects.put(beanName, (singletonObject != null ? singletonObject : NULL_OBJECT))__			this.singletonFactories.remove(beanName)__			this.earlySingletonObjects.remove(beanName)__			this.registeredSingletons.add(beanName)__		}_	};add,the,given,singleton,object,to,the,singleton,cache,of,this,factory,p,to,be,called,for,eager,registration,of,singletons,param,bean,name,the,name,of,the,bean,param,singleton,object,the,singleton,object;protected,void,add,singleton,string,bean,name,object,singleton,object,synchronized,this,singleton,objects,this,singleton,objects,put,bean,name,singleton,object,null,singleton,object,this,singleton,factories,remove,bean,name,this,early,singleton,objects,remove,bean,name,this,registered,singletons,add,bean,name
DefaultSingletonBeanRegistry -> protected void addSingleton(String beanName, Object singletonObject);1352418897;Add the given singleton object to the singleton cache of this factory._<p>To be called for eager registration of singletons._@param beanName the name of the bean_@param singletonObject the singleton object;protected void addSingleton(String beanName, Object singletonObject) {_		synchronized (this.singletonObjects) {_			this.singletonObjects.put(beanName, (singletonObject != null ? singletonObject : NULL_OBJECT))__			this.singletonFactories.remove(beanName)__			this.earlySingletonObjects.remove(beanName)__			this.registeredSingletons.add(beanName)__		}_	};add,the,given,singleton,object,to,the,singleton,cache,of,this,factory,p,to,be,called,for,eager,registration,of,singletons,param,bean,name,the,name,of,the,bean,param,singleton,object,the,singleton,object;protected,void,add,singleton,string,bean,name,object,singleton,object,synchronized,this,singleton,objects,this,singleton,objects,put,bean,name,singleton,object,null,singleton,object,this,singleton,factories,remove,bean,name,this,early,singleton,objects,remove,bean,name,this,registered,singletons,add,bean,name
DefaultSingletonBeanRegistry -> protected void addSingleton(String beanName, Object singletonObject);1353882772;Add the given singleton object to the singleton cache of this factory._<p>To be called for eager registration of singletons._@param beanName the name of the bean_@param singletonObject the singleton object;protected void addSingleton(String beanName, Object singletonObject) {_		synchronized (this.singletonObjects) {_			this.singletonObjects.put(beanName, (singletonObject != null ? singletonObject : NULL_OBJECT))__			this.singletonFactories.remove(beanName)__			this.earlySingletonObjects.remove(beanName)__			this.registeredSingletons.add(beanName)__		}_	};add,the,given,singleton,object,to,the,singleton,cache,of,this,factory,p,to,be,called,for,eager,registration,of,singletons,param,bean,name,the,name,of,the,bean,param,singleton,object,the,singleton,object;protected,void,add,singleton,string,bean,name,object,singleton,object,synchronized,this,singleton,objects,this,singleton,objects,put,bean,name,singleton,object,null,singleton,object,this,singleton,factories,remove,bean,name,this,early,singleton,objects,remove,bean,name,this,registered,singletons,add,bean,name
DefaultSingletonBeanRegistry -> protected void addSingleton(String beanName, Object singletonObject);1355352386;Add the given singleton object to the singleton cache of this factory._<p>To be called for eager registration of singletons._@param beanName the name of the bean_@param singletonObject the singleton object;protected void addSingleton(String beanName, Object singletonObject) {_		synchronized (this.singletonObjects) {_			this.singletonObjects.put(beanName, (singletonObject != null ? singletonObject : NULL_OBJECT))__			this.singletonFactories.remove(beanName)__			this.earlySingletonObjects.remove(beanName)__			this.registeredSingletons.add(beanName)__		}_	};add,the,given,singleton,object,to,the,singleton,cache,of,this,factory,p,to,be,called,for,eager,registration,of,singletons,param,bean,name,the,name,of,the,bean,param,singleton,object,the,singleton,object;protected,void,add,singleton,string,bean,name,object,singleton,object,synchronized,this,singleton,objects,this,singleton,objects,put,bean,name,singleton,object,null,singleton,object,this,singleton,factories,remove,bean,name,this,early,singleton,objects,remove,bean,name,this,registered,singletons,add,bean,name
DefaultSingletonBeanRegistry -> protected void addSingleton(String beanName, Object singletonObject);1356735495;Add the given singleton object to the singleton cache of this factory._<p>To be called for eager registration of singletons._@param beanName the name of the bean_@param singletonObject the singleton object;protected void addSingleton(String beanName, Object singletonObject) {_		synchronized (this.singletonObjects) {_			this.singletonObjects.put(beanName, (singletonObject != null ? singletonObject : NULL_OBJECT))__			this.singletonFactories.remove(beanName)__			this.earlySingletonObjects.remove(beanName)__			this.registeredSingletons.add(beanName)__		}_	};add,the,given,singleton,object,to,the,singleton,cache,of,this,factory,p,to,be,called,for,eager,registration,of,singletons,param,bean,name,the,name,of,the,bean,param,singleton,object,the,singleton,object;protected,void,add,singleton,string,bean,name,object,singleton,object,synchronized,this,singleton,objects,this,singleton,objects,put,bean,name,singleton,object,null,singleton,object,this,singleton,factories,remove,bean,name,this,early,singleton,objects,remove,bean,name,this,registered,singletons,add,bean,name
DefaultSingletonBeanRegistry -> protected void addSingleton(String beanName, Object singletonObject);1357119239;Add the given singleton object to the singleton cache of this factory._<p>To be called for eager registration of singletons._@param beanName the name of the bean_@param singletonObject the singleton object;protected void addSingleton(String beanName, Object singletonObject) {_		synchronized (this.singletonObjects) {_			this.singletonObjects.put(beanName, (singletonObject != null ? singletonObject : NULL_OBJECT))__			this.singletonFactories.remove(beanName)__			this.earlySingletonObjects.remove(beanName)__			this.registeredSingletons.add(beanName)__		}_	};add,the,given,singleton,object,to,the,singleton,cache,of,this,factory,p,to,be,called,for,eager,registration,of,singletons,param,bean,name,the,name,of,the,bean,param,singleton,object,the,singleton,object;protected,void,add,singleton,string,bean,name,object,singleton,object,synchronized,this,singleton,objects,this,singleton,objects,put,bean,name,singleton,object,null,singleton,object,this,singleton,factories,remove,bean,name,this,early,singleton,objects,remove,bean,name,this,registered,singletons,add,bean,name
DefaultSingletonBeanRegistry -> protected void addSingleton(String beanName, Object singletonObject);1364505266;Add the given singleton object to the singleton cache of this factory._<p>To be called for eager registration of singletons._@param beanName the name of the bean_@param singletonObject the singleton object;protected void addSingleton(String beanName, Object singletonObject) {_		synchronized (this.singletonObjects) {_			this.singletonObjects.put(beanName, (singletonObject != null ? singletonObject : NULL_OBJECT))__			this.singletonFactories.remove(beanName)__			this.earlySingletonObjects.remove(beanName)__			this.registeredSingletons.add(beanName)__		}_	};add,the,given,singleton,object,to,the,singleton,cache,of,this,factory,p,to,be,called,for,eager,registration,of,singletons,param,bean,name,the,name,of,the,bean,param,singleton,object,the,singleton,object;protected,void,add,singleton,string,bean,name,object,singleton,object,synchronized,this,singleton,objects,this,singleton,objects,put,bean,name,singleton,object,null,singleton,object,this,singleton,factories,remove,bean,name,this,early,singleton,objects,remove,bean,name,this,registered,singletons,add,bean,name
DefaultSingletonBeanRegistry -> protected void addSingleton(String beanName, Object singletonObject);1368482696;Add the given singleton object to the singleton cache of this factory._<p>To be called for eager registration of singletons._@param beanName the name of the bean_@param singletonObject the singleton object;protected void addSingleton(String beanName, Object singletonObject) {_		synchronized (this.singletonObjects) {_			this.singletonObjects.put(beanName, (singletonObject != null ? singletonObject : NULL_OBJECT))__			this.singletonFactories.remove(beanName)__			this.earlySingletonObjects.remove(beanName)__			this.registeredSingletons.add(beanName)__		}_	};add,the,given,singleton,object,to,the,singleton,cache,of,this,factory,p,to,be,called,for,eager,registration,of,singletons,param,bean,name,the,name,of,the,bean,param,singleton,object,the,singleton,object;protected,void,add,singleton,string,bean,name,object,singleton,object,synchronized,this,singleton,objects,this,singleton,objects,put,bean,name,singleton,object,null,singleton,object,this,singleton,factories,remove,bean,name,this,early,singleton,objects,remove,bean,name,this,registered,singletons,add,bean,name
DefaultSingletonBeanRegistry -> protected void addSingleton(String beanName, Object singletonObject);1374698947;Add the given singleton object to the singleton cache of this factory._<p>To be called for eager registration of singletons._@param beanName the name of the bean_@param singletonObject the singleton object;protected void addSingleton(String beanName, Object singletonObject) {_		synchronized (this.singletonObjects) {_			this.singletonObjects.put(beanName, (singletonObject != null ? singletonObject : NULL_OBJECT))__			this.singletonFactories.remove(beanName)__			this.earlySingletonObjects.remove(beanName)__			this.registeredSingletons.add(beanName)__		}_	};add,the,given,singleton,object,to,the,singleton,cache,of,this,factory,p,to,be,called,for,eager,registration,of,singletons,param,bean,name,the,name,of,the,bean,param,singleton,object,the,singleton,object;protected,void,add,singleton,string,bean,name,object,singleton,object,synchronized,this,singleton,objects,this,singleton,objects,put,bean,name,singleton,object,null,singleton,object,this,singleton,factories,remove,bean,name,this,early,singleton,objects,remove,bean,name,this,registered,singletons,add,bean,name
DefaultSingletonBeanRegistry -> protected void addSingleton(String beanName, Object singletonObject);1385412762;Add the given singleton object to the singleton cache of this factory._<p>To be called for eager registration of singletons._@param beanName the name of the bean_@param singletonObject the singleton object;protected void addSingleton(String beanName, Object singletonObject) {_		synchronized (this.singletonObjects) {_			this.singletonObjects.put(beanName, (singletonObject != null ? singletonObject : NULL_OBJECT))__			this.singletonFactories.remove(beanName)__			this.earlySingletonObjects.remove(beanName)__			this.registeredSingletons.add(beanName)__		}_	};add,the,given,singleton,object,to,the,singleton,cache,of,this,factory,p,to,be,called,for,eager,registration,of,singletons,param,bean,name,the,name,of,the,bean,param,singleton,object,the,singleton,object;protected,void,add,singleton,string,bean,name,object,singleton,object,synchronized,this,singleton,objects,this,singleton,objects,put,bean,name,singleton,object,null,singleton,object,this,singleton,factories,remove,bean,name,this,early,singleton,objects,remove,bean,name,this,registered,singletons,add,bean,name
DefaultSingletonBeanRegistry -> protected void addSingleton(String beanName, Object singletonObject);1385984377;Add the given singleton object to the singleton cache of this factory._<p>To be called for eager registration of singletons._@param beanName the name of the bean_@param singletonObject the singleton object;protected void addSingleton(String beanName, Object singletonObject) {_		synchronized (this.singletonObjects) {_			this.singletonObjects.put(beanName, (singletonObject != null ? singletonObject : NULL_OBJECT))__			this.singletonFactories.remove(beanName)__			this.earlySingletonObjects.remove(beanName)__			this.registeredSingletons.add(beanName)__		}_	};add,the,given,singleton,object,to,the,singleton,cache,of,this,factory,p,to,be,called,for,eager,registration,of,singletons,param,bean,name,the,name,of,the,bean,param,singleton,object,the,singleton,object;protected,void,add,singleton,string,bean,name,object,singleton,object,synchronized,this,singleton,objects,this,singleton,objects,put,bean,name,singleton,object,null,singleton,object,this,singleton,factories,remove,bean,name,this,early,singleton,objects,remove,bean,name,this,registered,singletons,add,bean,name
DefaultSingletonBeanRegistry -> protected void addSingleton(String beanName, Object singletonObject);1405430015;Add the given singleton object to the singleton cache of this factory._<p>To be called for eager registration of singletons._@param beanName the name of the bean_@param singletonObject the singleton object;protected void addSingleton(String beanName, Object singletonObject) {_		synchronized (this.singletonObjects) {_			this.singletonObjects.put(beanName, (singletonObject != null ? singletonObject : NULL_OBJECT))__			this.singletonFactories.remove(beanName)__			this.earlySingletonObjects.remove(beanName)__			this.registeredSingletons.add(beanName)__		}_	};add,the,given,singleton,object,to,the,singleton,cache,of,this,factory,p,to,be,called,for,eager,registration,of,singletons,param,bean,name,the,name,of,the,bean,param,singleton,object,the,singleton,object;protected,void,add,singleton,string,bean,name,object,singleton,object,synchronized,this,singleton,objects,this,singleton,objects,put,bean,name,singleton,object,null,singleton,object,this,singleton,factories,remove,bean,name,this,early,singleton,objects,remove,bean,name,this,registered,singletons,add,bean,name
DefaultSingletonBeanRegistry -> protected void addSingleton(String beanName, Object singletonObject);1408528936;Add the given singleton object to the singleton cache of this factory._<p>To be called for eager registration of singletons._@param beanName the name of the bean_@param singletonObject the singleton object;protected void addSingleton(String beanName, Object singletonObject) {_		synchronized (this.singletonObjects) {_			this.singletonObjects.put(beanName, (singletonObject != null ? singletonObject : NULL_OBJECT))__			this.singletonFactories.remove(beanName)__			this.earlySingletonObjects.remove(beanName)__			this.registeredSingletons.add(beanName)__		}_	};add,the,given,singleton,object,to,the,singleton,cache,of,this,factory,p,to,be,called,for,eager,registration,of,singletons,param,bean,name,the,name,of,the,bean,param,singleton,object,the,singleton,object;protected,void,add,singleton,string,bean,name,object,singleton,object,synchronized,this,singleton,objects,this,singleton,objects,put,bean,name,singleton,object,null,singleton,object,this,singleton,factories,remove,bean,name,this,early,singleton,objects,remove,bean,name,this,registered,singletons,add,bean,name
DefaultSingletonBeanRegistry -> protected void addSingleton(String beanName, Object singletonObject);1408624154;Add the given singleton object to the singleton cache of this factory._<p>To be called for eager registration of singletons._@param beanName the name of the bean_@param singletonObject the singleton object;protected void addSingleton(String beanName, Object singletonObject) {_		synchronized (this.singletonObjects) {_			this.singletonObjects.put(beanName, (singletonObject != null ? singletonObject : NULL_OBJECT))__			this.singletonFactories.remove(beanName)__			this.earlySingletonObjects.remove(beanName)__			this.registeredSingletons.add(beanName)__		}_	};add,the,given,singleton,object,to,the,singleton,cache,of,this,factory,p,to,be,called,for,eager,registration,of,singletons,param,bean,name,the,name,of,the,bean,param,singleton,object,the,singleton,object;protected,void,add,singleton,string,bean,name,object,singleton,object,synchronized,this,singleton,objects,this,singleton,objects,put,bean,name,singleton,object,null,singleton,object,this,singleton,factories,remove,bean,name,this,early,singleton,objects,remove,bean,name,this,registered,singletons,add,bean,name
DefaultSingletonBeanRegistry -> protected void addSingleton(String beanName, Object singletonObject);1409688815;Add the given singleton object to the singleton cache of this factory._<p>To be called for eager registration of singletons._@param beanName the name of the bean_@param singletonObject the singleton object;protected void addSingleton(String beanName, Object singletonObject) {_		synchronized (this.singletonObjects) {_			this.singletonObjects.put(beanName, (singletonObject != null ? singletonObject : NULL_OBJECT))__			this.singletonFactories.remove(beanName)__			this.earlySingletonObjects.remove(beanName)__			this.registeredSingletons.add(beanName)__		}_	};add,the,given,singleton,object,to,the,singleton,cache,of,this,factory,p,to,be,called,for,eager,registration,of,singletons,param,bean,name,the,name,of,the,bean,param,singleton,object,the,singleton,object;protected,void,add,singleton,string,bean,name,object,singleton,object,synchronized,this,singleton,objects,this,singleton,objects,put,bean,name,singleton,object,null,singleton,object,this,singleton,factories,remove,bean,name,this,early,singleton,objects,remove,bean,name,this,registered,singletons,add,bean,name
DefaultSingletonBeanRegistry -> protected void addSingleton(String beanName, Object singletonObject);1417966231;Add the given singleton object to the singleton cache of this factory._<p>To be called for eager registration of singletons._@param beanName the name of the bean_@param singletonObject the singleton object;protected void addSingleton(String beanName, Object singletonObject) {_		synchronized (this.singletonObjects) {_			this.singletonObjects.put(beanName, (singletonObject != null ? singletonObject : NULL_OBJECT))__			this.singletonFactories.remove(beanName)__			this.earlySingletonObjects.remove(beanName)__			this.registeredSingletons.add(beanName)__		}_	};add,the,given,singleton,object,to,the,singleton,cache,of,this,factory,p,to,be,called,for,eager,registration,of,singletons,param,bean,name,the,name,of,the,bean,param,singleton,object,the,singleton,object;protected,void,add,singleton,string,bean,name,object,singleton,object,synchronized,this,singleton,objects,this,singleton,objects,put,bean,name,singleton,object,null,singleton,object,this,singleton,factories,remove,bean,name,this,early,singleton,objects,remove,bean,name,this,registered,singletons,add,bean,name
DefaultSingletonBeanRegistry -> protected void addSingleton(String beanName, Object singletonObject);1424972106;Add the given singleton object to the singleton cache of this factory._<p>To be called for eager registration of singletons._@param beanName the name of the bean_@param singletonObject the singleton object;protected void addSingleton(String beanName, Object singletonObject) {_		synchronized (this.singletonObjects) {_			this.singletonObjects.put(beanName, (singletonObject != null ? singletonObject : NULL_OBJECT))__			this.singletonFactories.remove(beanName)__			this.earlySingletonObjects.remove(beanName)__			this.registeredSingletons.add(beanName)__		}_	};add,the,given,singleton,object,to,the,singleton,cache,of,this,factory,p,to,be,called,for,eager,registration,of,singletons,param,bean,name,the,name,of,the,bean,param,singleton,object,the,singleton,object;protected,void,add,singleton,string,bean,name,object,singleton,object,synchronized,this,singleton,objects,this,singleton,objects,put,bean,name,singleton,object,null,singleton,object,this,singleton,factories,remove,bean,name,this,early,singleton,objects,remove,bean,name,this,registered,singletons,add,bean,name
DefaultSingletonBeanRegistry -> protected void addSingleton(String beanName, Object singletonObject);1447399860;Add the given singleton object to the singleton cache of this factory._<p>To be called for eager registration of singletons._@param beanName the name of the bean_@param singletonObject the singleton object;protected void addSingleton(String beanName, Object singletonObject) {_		synchronized (this.singletonObjects) {_			this.singletonObjects.put(beanName, (singletonObject != null ? singletonObject : NULL_OBJECT))__			this.singletonFactories.remove(beanName)__			this.earlySingletonObjects.remove(beanName)__			this.registeredSingletons.add(beanName)__		}_	};add,the,given,singleton,object,to,the,singleton,cache,of,this,factory,p,to,be,called,for,eager,registration,of,singletons,param,bean,name,the,name,of,the,bean,param,singleton,object,the,singleton,object;protected,void,add,singleton,string,bean,name,object,singleton,object,synchronized,this,singleton,objects,this,singleton,objects,put,bean,name,singleton,object,null,singleton,object,this,singleton,factories,remove,bean,name,this,early,singleton,objects,remove,bean,name,this,registered,singletons,add,bean,name
DefaultSingletonBeanRegistry -> protected void addSingleton(String beanName, Object singletonObject);1467730834;Add the given singleton object to the singleton cache of this factory._<p>To be called for eager registration of singletons._@param beanName the name of the bean_@param singletonObject the singleton object;protected void addSingleton(String beanName, Object singletonObject) {_		synchronized (this.singletonObjects) {_			this.singletonObjects.put(beanName, (singletonObject != null ? singletonObject : NULL_OBJECT))__			this.singletonFactories.remove(beanName)__			this.earlySingletonObjects.remove(beanName)__			this.registeredSingletons.add(beanName)__		}_	};add,the,given,singleton,object,to,the,singleton,cache,of,this,factory,p,to,be,called,for,eager,registration,of,singletons,param,bean,name,the,name,of,the,bean,param,singleton,object,the,singleton,object;protected,void,add,singleton,string,bean,name,object,singleton,object,synchronized,this,singleton,objects,this,singleton,objects,put,bean,name,singleton,object,null,singleton,object,this,singleton,factories,remove,bean,name,this,early,singleton,objects,remove,bean,name,this,registered,singletons,add,bean,name
DefaultSingletonBeanRegistry -> protected void addSingleton(String beanName, Object singletonObject);1467810738;Add the given singleton object to the singleton cache of this factory._<p>To be called for eager registration of singletons._@param beanName the name of the bean_@param singletonObject the singleton object;protected void addSingleton(String beanName, Object singletonObject) {_		synchronized (this.singletonObjects) {_			this.singletonObjects.put(beanName, (singletonObject != null ? singletonObject : NULL_OBJECT))__			this.singletonFactories.remove(beanName)__			this.earlySingletonObjects.remove(beanName)__			this.registeredSingletons.add(beanName)__		}_	};add,the,given,singleton,object,to,the,singleton,cache,of,this,factory,p,to,be,called,for,eager,registration,of,singletons,param,bean,name,the,name,of,the,bean,param,singleton,object,the,singleton,object;protected,void,add,singleton,string,bean,name,object,singleton,object,synchronized,this,singleton,objects,this,singleton,objects,put,bean,name,singleton,object,null,singleton,object,this,singleton,factories,remove,bean,name,this,early,singleton,objects,remove,bean,name,this,registered,singletons,add,bean,name
DefaultSingletonBeanRegistry -> protected void addSingleton(String beanName, Object singletonObject);1469561191;Add the given singleton object to the singleton cache of this factory._<p>To be called for eager registration of singletons._@param beanName the name of the bean_@param singletonObject the singleton object;protected void addSingleton(String beanName, Object singletonObject) {_		synchronized (this.singletonObjects) {_			this.singletonObjects.put(beanName, (singletonObject != null ? singletonObject : NULL_OBJECT))__			this.singletonFactories.remove(beanName)__			this.earlySingletonObjects.remove(beanName)__			this.registeredSingletons.add(beanName)__		}_	};add,the,given,singleton,object,to,the,singleton,cache,of,this,factory,p,to,be,called,for,eager,registration,of,singletons,param,bean,name,the,name,of,the,bean,param,singleton,object,the,singleton,object;protected,void,add,singleton,string,bean,name,object,singleton,object,synchronized,this,singleton,objects,this,singleton,objects,put,bean,name,singleton,object,null,singleton,object,this,singleton,factories,remove,bean,name,this,early,singleton,objects,remove,bean,name,this,registered,singletons,add,bean,name
DefaultSingletonBeanRegistry -> protected void addSingleton(String beanName, Object singletonObject);1478538021;Add the given singleton object to the singleton cache of this factory._<p>To be called for eager registration of singletons._@param beanName the name of the bean_@param singletonObject the singleton object;protected void addSingleton(String beanName, Object singletonObject) {_		synchronized (this.singletonObjects) {_			this.singletonObjects.put(beanName, (singletonObject != null ? singletonObject : NULL_OBJECT))__			this.singletonFactories.remove(beanName)__			this.earlySingletonObjects.remove(beanName)__			this.registeredSingletons.add(beanName)__		}_	};add,the,given,singleton,object,to,the,singleton,cache,of,this,factory,p,to,be,called,for,eager,registration,of,singletons,param,bean,name,the,name,of,the,bean,param,singleton,object,the,singleton,object;protected,void,add,singleton,string,bean,name,object,singleton,object,synchronized,this,singleton,objects,this,singleton,objects,put,bean,name,singleton,object,null,singleton,object,this,singleton,factories,remove,bean,name,this,early,singleton,objects,remove,bean,name,this,registered,singletons,add,bean,name
DefaultSingletonBeanRegistry -> protected void addSingleton(String beanName, Object singletonObject);1495868221;Add the given singleton object to the singleton cache of this factory._<p>To be called for eager registration of singletons._@param beanName the name of the bean_@param singletonObject the singleton object;protected void addSingleton(String beanName, Object singletonObject) {_		synchronized (this.singletonObjects) {_			this.singletonObjects.put(beanName, (singletonObject != null ? singletonObject : NULL_OBJECT))__			this.singletonFactories.remove(beanName)__			this.earlySingletonObjects.remove(beanName)__			this.registeredSingletons.add(beanName)__		}_	};add,the,given,singleton,object,to,the,singleton,cache,of,this,factory,p,to,be,called,for,eager,registration,of,singletons,param,bean,name,the,name,of,the,bean,param,singleton,object,the,singleton,object;protected,void,add,singleton,string,bean,name,object,singleton,object,synchronized,this,singleton,objects,this,singleton,objects,put,bean,name,singleton,object,null,singleton,object,this,singleton,factories,remove,bean,name,this,early,singleton,objects,remove,bean,name,this,registered,singletons,add,bean,name
DefaultSingletonBeanRegistry -> protected void addSingleton(String beanName, Object singletonObject);1496259743;Add the given singleton object to the singleton cache of this factory._<p>To be called for eager registration of singletons._@param beanName the name of the bean_@param singletonObject the singleton object;protected void addSingleton(String beanName, Object singletonObject) {_		synchronized (this.singletonObjects) {_			this.singletonObjects.put(beanName, (singletonObject != null ? singletonObject : NULL_OBJECT))__			this.singletonFactories.remove(beanName)__			this.earlySingletonObjects.remove(beanName)__			this.registeredSingletons.add(beanName)__		}_	};add,the,given,singleton,object,to,the,singleton,cache,of,this,factory,p,to,be,called,for,eager,registration,of,singletons,param,bean,name,the,name,of,the,bean,param,singleton,object,the,singleton,object;protected,void,add,singleton,string,bean,name,object,singleton,object,synchronized,this,singleton,objects,this,singleton,objects,put,bean,name,singleton,object,null,singleton,object,this,singleton,factories,remove,bean,name,this,early,singleton,objects,remove,bean,name,this,registered,singletons,add,bean,name
DefaultSingletonBeanRegistry -> protected void addSingleton(String beanName, Object singletonObject);1503007895;Add the given singleton object to the singleton cache of this factory._<p>To be called for eager registration of singletons._@param beanName the name of the bean_@param singletonObject the singleton object;protected void addSingleton(String beanName, Object singletonObject) {_		synchronized (this.singletonObjects) {_			this.singletonObjects.put(beanName, singletonObject)__			this.singletonFactories.remove(beanName)__			this.earlySingletonObjects.remove(beanName)__			this.registeredSingletons.add(beanName)__		}_	};add,the,given,singleton,object,to,the,singleton,cache,of,this,factory,p,to,be,called,for,eager,registration,of,singletons,param,bean,name,the,name,of,the,bean,param,singleton,object,the,singleton,object;protected,void,add,singleton,string,bean,name,object,singleton,object,synchronized,this,singleton,objects,this,singleton,objects,put,bean,name,singleton,object,this,singleton,factories,remove,bean,name,this,early,singleton,objects,remove,bean,name,this,registered,singletons,add,bean,name
DefaultSingletonBeanRegistry -> protected void addSingleton(String beanName, Object singletonObject);1518810557;Add the given singleton object to the singleton cache of this factory._<p>To be called for eager registration of singletons._@param beanName the name of the bean_@param singletonObject the singleton object;protected void addSingleton(String beanName, Object singletonObject) {_		synchronized (this.singletonObjects) {_			this.singletonObjects.put(beanName, singletonObject)__			this.singletonFactories.remove(beanName)__			this.earlySingletonObjects.remove(beanName)__			this.registeredSingletons.add(beanName)__		}_	};add,the,given,singleton,object,to,the,singleton,cache,of,this,factory,p,to,be,called,for,eager,registration,of,singletons,param,bean,name,the,name,of,the,bean,param,singleton,object,the,singleton,object;protected,void,add,singleton,string,bean,name,object,singleton,object,synchronized,this,singleton,objects,this,singleton,objects,put,bean,name,singleton,object,this,singleton,factories,remove,bean,name,this,early,singleton,objects,remove,bean,name,this,registered,singletons,add,bean,name
DefaultSingletonBeanRegistry -> protected void addSingleton(String beanName, Object singletonObject);1521822873;Add the given singleton object to the singleton cache of this factory._<p>To be called for eager registration of singletons._@param beanName the name of the bean_@param singletonObject the singleton object;protected void addSingleton(String beanName, Object singletonObject) {_		synchronized (this.singletonObjects) {_			this.singletonObjects.put(beanName, singletonObject)__			this.singletonFactories.remove(beanName)__			this.earlySingletonObjects.remove(beanName)__			this.registeredSingletons.add(beanName)__		}_	};add,the,given,singleton,object,to,the,singleton,cache,of,this,factory,p,to,be,called,for,eager,registration,of,singletons,param,bean,name,the,name,of,the,bean,param,singleton,object,the,singleton,object;protected,void,add,singleton,string,bean,name,object,singleton,object,synchronized,this,singleton,objects,this,singleton,objects,put,bean,name,singleton,object,this,singleton,factories,remove,bean,name,this,early,singleton,objects,remove,bean,name,this,registered,singletons,add,bean,name
DefaultSingletonBeanRegistry -> protected void addSingleton(String beanName, Object singletonObject);1521905451;Add the given singleton object to the singleton cache of this factory._<p>To be called for eager registration of singletons._@param beanName the name of the bean_@param singletonObject the singleton object;protected void addSingleton(String beanName, Object singletonObject) {_		synchronized (this.singletonObjects) {_			this.singletonObjects.put(beanName, singletonObject)__			this.singletonFactories.remove(beanName)__			this.earlySingletonObjects.remove(beanName)__			this.registeredSingletons.add(beanName)__		}_	};add,the,given,singleton,object,to,the,singleton,cache,of,this,factory,p,to,be,called,for,eager,registration,of,singletons,param,bean,name,the,name,of,the,bean,param,singleton,object,the,singleton,object;protected,void,add,singleton,string,bean,name,object,singleton,object,synchronized,this,singleton,objects,this,singleton,objects,put,bean,name,singleton,object,this,singleton,factories,remove,bean,name,this,early,singleton,objects,remove,bean,name,this,registered,singletons,add,bean,name
DefaultSingletonBeanRegistry -> protected void addSingleton(String beanName, Object singletonObject);1527623493;Add the given singleton object to the singleton cache of this factory._<p>To be called for eager registration of singletons._@param beanName the name of the bean_@param singletonObject the singleton object;protected void addSingleton(String beanName, Object singletonObject) {_		synchronized (this.singletonObjects) {_			this.singletonObjects.put(beanName, singletonObject)__			this.singletonFactories.remove(beanName)__			this.earlySingletonObjects.remove(beanName)__			this.registeredSingletons.add(beanName)__		}_	};add,the,given,singleton,object,to,the,singleton,cache,of,this,factory,p,to,be,called,for,eager,registration,of,singletons,param,bean,name,the,name,of,the,bean,param,singleton,object,the,singleton,object;protected,void,add,singleton,string,bean,name,object,singleton,object,synchronized,this,singleton,objects,this,singleton,objects,put,bean,name,singleton,object,this,singleton,factories,remove,bean,name,this,early,singleton,objects,remove,bean,name,this,registered,singletons,add,bean,name
DefaultSingletonBeanRegistry -> protected void addSingleton(String beanName, Object singletonObject);1530174524;Add the given singleton object to the singleton cache of this factory._<p>To be called for eager registration of singletons._@param beanName the name of the bean_@param singletonObject the singleton object;protected void addSingleton(String beanName, Object singletonObject) {_		synchronized (this.singletonObjects) {_			this.singletonObjects.put(beanName, singletonObject)__			this.singletonFactories.remove(beanName)__			this.earlySingletonObjects.remove(beanName)__			this.registeredSingletons.add(beanName)__		}_	};add,the,given,singleton,object,to,the,singleton,cache,of,this,factory,p,to,be,called,for,eager,registration,of,singletons,param,bean,name,the,name,of,the,bean,param,singleton,object,the,singleton,object;protected,void,add,singleton,string,bean,name,object,singleton,object,synchronized,this,singleton,objects,this,singleton,objects,put,bean,name,singleton,object,this,singleton,factories,remove,bean,name,this,early,singleton,objects,remove,bean,name,this,registered,singletons,add,bean,name
DefaultSingletonBeanRegistry -> protected void addSingleton(String beanName, Object singletonObject);1532091916;Add the given singleton object to the singleton cache of this factory._<p>To be called for eager registration of singletons._@param beanName the name of the bean_@param singletonObject the singleton object;protected void addSingleton(String beanName, Object singletonObject) {_		synchronized (this.singletonObjects) {_			this.singletonObjects.put(beanName, singletonObject)__			this.singletonFactories.remove(beanName)__			this.earlySingletonObjects.remove(beanName)__			this.registeredSingletons.add(beanName)__		}_	};add,the,given,singleton,object,to,the,singleton,cache,of,this,factory,p,to,be,called,for,eager,registration,of,singletons,param,bean,name,the,name,of,the,bean,param,singleton,object,the,singleton,object;protected,void,add,singleton,string,bean,name,object,singleton,object,synchronized,this,singleton,objects,this,singleton,objects,put,bean,name,singleton,object,this,singleton,factories,remove,bean,name,this,early,singleton,objects,remove,bean,name,this,registered,singletons,add,bean,name
DefaultSingletonBeanRegistry -> protected void addSingleton(String beanName, Object singletonObject);1532706365;Add the given singleton object to the singleton cache of this factory._<p>To be called for eager registration of singletons._@param beanName the name of the bean_@param singletonObject the singleton object;protected void addSingleton(String beanName, Object singletonObject) {_		synchronized (this.singletonObjects) {_			this.singletonObjects.put(beanName, singletonObject)__			this.singletonFactories.remove(beanName)__			this.earlySingletonObjects.remove(beanName)__			this.registeredSingletons.add(beanName)__		}_	};add,the,given,singleton,object,to,the,singleton,cache,of,this,factory,p,to,be,called,for,eager,registration,of,singletons,param,bean,name,the,name,of,the,bean,param,singleton,object,the,singleton,object;protected,void,add,singleton,string,bean,name,object,singleton,object,synchronized,this,singleton,objects,this,singleton,objects,put,bean,name,singleton,object,this,singleton,factories,remove,bean,name,this,early,singleton,objects,remove,bean,name,this,registered,singletons,add,bean,name
DefaultSingletonBeanRegistry -> public String[] getDependentBeans(String beanName);1328020251;Return the names of all beans which depend on the specified bean, if any._@param beanName the name of the bean_@return the array of dependent bean names, or an empty array if none;public String[] getDependentBeans(String beanName) {_		Set<String> dependentBeans = this.dependentBeanMap.get(beanName)__		if (dependentBeans == null) {_			return new String[0]__		}_		return StringUtils.toStringArray(dependentBeans)__	};return,the,names,of,all,beans,which,depend,on,the,specified,bean,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,dependent,bean,names,or,an,empty,array,if,none;public,string,get,dependent,beans,string,bean,name,set,string,dependent,beans,this,dependent,bean,map,get,bean,name,if,dependent,beans,null,return,new,string,0,return,string,utils,to,string,array,dependent,beans
DefaultSingletonBeanRegistry -> public String[] getDependentBeans(String beanName);1349872135;Return the names of all beans which depend on the specified bean, if any._@param beanName the name of the bean_@return the array of dependent bean names, or an empty array if none;public String[] getDependentBeans(String beanName) {_		Set<String> dependentBeans = this.dependentBeanMap.get(beanName)__		if (dependentBeans == null) {_			return new String[0]__		}_		return StringUtils.toStringArray(dependentBeans)__	};return,the,names,of,all,beans,which,depend,on,the,specified,bean,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,dependent,bean,names,or,an,empty,array,if,none;public,string,get,dependent,beans,string,bean,name,set,string,dependent,beans,this,dependent,bean,map,get,bean,name,if,dependent,beans,null,return,new,string,0,return,string,utils,to,string,array,dependent,beans
DefaultSingletonBeanRegistry -> public String[] getDependentBeans(String beanName);1352412938;Return the names of all beans which depend on the specified bean, if any._@param beanName the name of the bean_@return the array of dependent bean names, or an empty array if none;public String[] getDependentBeans(String beanName) {_		Set<String> dependentBeans = this.dependentBeanMap.get(beanName)__		if (dependentBeans == null) {_			return new String[0]__		}_		return StringUtils.toStringArray(dependentBeans)__	};return,the,names,of,all,beans,which,depend,on,the,specified,bean,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,dependent,bean,names,or,an,empty,array,if,none;public,string,get,dependent,beans,string,bean,name,set,string,dependent,beans,this,dependent,bean,map,get,bean,name,if,dependent,beans,null,return,new,string,0,return,string,utils,to,string,array,dependent,beans
DefaultSingletonBeanRegistry -> public String[] getDependentBeans(String beanName);1352418897;Return the names of all beans which depend on the specified bean, if any._@param beanName the name of the bean_@return the array of dependent bean names, or an empty array if none;public String[] getDependentBeans(String beanName) {_		Set<String> dependentBeans = this.dependentBeanMap.get(beanName)__		if (dependentBeans == null) {_			return new String[0]__		}_		return StringUtils.toStringArray(dependentBeans)__	};return,the,names,of,all,beans,which,depend,on,the,specified,bean,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,dependent,bean,names,or,an,empty,array,if,none;public,string,get,dependent,beans,string,bean,name,set,string,dependent,beans,this,dependent,bean,map,get,bean,name,if,dependent,beans,null,return,new,string,0,return,string,utils,to,string,array,dependent,beans
DefaultSingletonBeanRegistry -> public String[] getDependentBeans(String beanName);1353882772;Return the names of all beans which depend on the specified bean, if any._@param beanName the name of the bean_@return the array of dependent bean names, or an empty array if none;public String[] getDependentBeans(String beanName) {_		Set<String> dependentBeans = this.dependentBeanMap.get(beanName)__		if (dependentBeans == null) {_			return new String[0]__		}_		return StringUtils.toStringArray(dependentBeans)__	};return,the,names,of,all,beans,which,depend,on,the,specified,bean,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,dependent,bean,names,or,an,empty,array,if,none;public,string,get,dependent,beans,string,bean,name,set,string,dependent,beans,this,dependent,bean,map,get,bean,name,if,dependent,beans,null,return,new,string,0,return,string,utils,to,string,array,dependent,beans
DefaultSingletonBeanRegistry -> public String[] getDependentBeans(String beanName);1355352386;Return the names of all beans which depend on the specified bean, if any._@param beanName the name of the bean_@return the array of dependent bean names, or an empty array if none;public String[] getDependentBeans(String beanName) {_		Set<String> dependentBeans = this.dependentBeanMap.get(beanName)__		if (dependentBeans == null) {_			return new String[0]__		}_		return StringUtils.toStringArray(dependentBeans)__	};return,the,names,of,all,beans,which,depend,on,the,specified,bean,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,dependent,bean,names,or,an,empty,array,if,none;public,string,get,dependent,beans,string,bean,name,set,string,dependent,beans,this,dependent,bean,map,get,bean,name,if,dependent,beans,null,return,new,string,0,return,string,utils,to,string,array,dependent,beans
DefaultSingletonBeanRegistry -> public String[] getDependentBeans(String beanName);1356735495;Return the names of all beans which depend on the specified bean, if any._@param beanName the name of the bean_@return the array of dependent bean names, or an empty array if none;public String[] getDependentBeans(String beanName) {_		Set<String> dependentBeans = this.dependentBeanMap.get(beanName)__		if (dependentBeans == null) {_			return new String[0]__		}_		return StringUtils.toStringArray(dependentBeans)__	};return,the,names,of,all,beans,which,depend,on,the,specified,bean,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,dependent,bean,names,or,an,empty,array,if,none;public,string,get,dependent,beans,string,bean,name,set,string,dependent,beans,this,dependent,bean,map,get,bean,name,if,dependent,beans,null,return,new,string,0,return,string,utils,to,string,array,dependent,beans
DefaultSingletonBeanRegistry -> public String[] getDependentBeans(String beanName);1357119239;Return the names of all beans which depend on the specified bean, if any._@param beanName the name of the bean_@return the array of dependent bean names, or an empty array if none;public String[] getDependentBeans(String beanName) {_		Set<String> dependentBeans = this.dependentBeanMap.get(beanName)__		if (dependentBeans == null) {_			return new String[0]__		}_		return StringUtils.toStringArray(dependentBeans)__	};return,the,names,of,all,beans,which,depend,on,the,specified,bean,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,dependent,bean,names,or,an,empty,array,if,none;public,string,get,dependent,beans,string,bean,name,set,string,dependent,beans,this,dependent,bean,map,get,bean,name,if,dependent,beans,null,return,new,string,0,return,string,utils,to,string,array,dependent,beans
DefaultSingletonBeanRegistry -> public String[] getDependentBeans(String beanName);1364505266;Return the names of all beans which depend on the specified bean, if any._@param beanName the name of the bean_@return the array of dependent bean names, or an empty array if none;public String[] getDependentBeans(String beanName) {_		Set<String> dependentBeans = this.dependentBeanMap.get(beanName)__		if (dependentBeans == null) {_			return new String[0]__		}_		return StringUtils.toStringArray(dependentBeans)__	};return,the,names,of,all,beans,which,depend,on,the,specified,bean,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,dependent,bean,names,or,an,empty,array,if,none;public,string,get,dependent,beans,string,bean,name,set,string,dependent,beans,this,dependent,bean,map,get,bean,name,if,dependent,beans,null,return,new,string,0,return,string,utils,to,string,array,dependent,beans
DefaultSingletonBeanRegistry -> public String[] getDependentBeans(String beanName);1368482696;Return the names of all beans which depend on the specified bean, if any._@param beanName the name of the bean_@return the array of dependent bean names, or an empty array if none;public String[] getDependentBeans(String beanName) {_		Set<String> dependentBeans = this.dependentBeanMap.get(beanName)__		if (dependentBeans == null) {_			return new String[0]__		}_		return StringUtils.toStringArray(dependentBeans)__	};return,the,names,of,all,beans,which,depend,on,the,specified,bean,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,dependent,bean,names,or,an,empty,array,if,none;public,string,get,dependent,beans,string,bean,name,set,string,dependent,beans,this,dependent,bean,map,get,bean,name,if,dependent,beans,null,return,new,string,0,return,string,utils,to,string,array,dependent,beans
DefaultSingletonBeanRegistry -> public String[] getDependentBeans(String beanName);1374698947;Return the names of all beans which depend on the specified bean, if any._@param beanName the name of the bean_@return the array of dependent bean names, or an empty array if none;public String[] getDependentBeans(String beanName) {_		Set<String> dependentBeans = this.dependentBeanMap.get(beanName)__		if (dependentBeans == null) {_			return new String[0]__		}_		return StringUtils.toStringArray(dependentBeans)__	};return,the,names,of,all,beans,which,depend,on,the,specified,bean,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,dependent,bean,names,or,an,empty,array,if,none;public,string,get,dependent,beans,string,bean,name,set,string,dependent,beans,this,dependent,bean,map,get,bean,name,if,dependent,beans,null,return,new,string,0,return,string,utils,to,string,array,dependent,beans
DefaultSingletonBeanRegistry -> public String[] getDependentBeans(String beanName);1385412762;Return the names of all beans which depend on the specified bean, if any._@param beanName the name of the bean_@return the array of dependent bean names, or an empty array if none;public String[] getDependentBeans(String beanName) {_		Set<String> dependentBeans = this.dependentBeanMap.get(beanName)__		if (dependentBeans == null) {_			return new String[0]__		}_		return StringUtils.toStringArray(dependentBeans)__	};return,the,names,of,all,beans,which,depend,on,the,specified,bean,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,dependent,bean,names,or,an,empty,array,if,none;public,string,get,dependent,beans,string,bean,name,set,string,dependent,beans,this,dependent,bean,map,get,bean,name,if,dependent,beans,null,return,new,string,0,return,string,utils,to,string,array,dependent,beans
DefaultSingletonBeanRegistry -> public String[] getDependentBeans(String beanName);1385984377;Return the names of all beans which depend on the specified bean, if any._@param beanName the name of the bean_@return the array of dependent bean names, or an empty array if none;public String[] getDependentBeans(String beanName) {_		Set<String> dependentBeans = this.dependentBeanMap.get(beanName)__		if (dependentBeans == null) {_			return new String[0]__		}_		return StringUtils.toStringArray(dependentBeans)__	};return,the,names,of,all,beans,which,depend,on,the,specified,bean,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,dependent,bean,names,or,an,empty,array,if,none;public,string,get,dependent,beans,string,bean,name,set,string,dependent,beans,this,dependent,bean,map,get,bean,name,if,dependent,beans,null,return,new,string,0,return,string,utils,to,string,array,dependent,beans
DefaultSingletonBeanRegistry -> public String[] getDependentBeans(String beanName);1405430015;Return the names of all beans which depend on the specified bean, if any._@param beanName the name of the bean_@return the array of dependent bean names, or an empty array if none;public String[] getDependentBeans(String beanName) {_		Set<String> dependentBeans = this.dependentBeanMap.get(beanName)__		if (dependentBeans == null) {_			return new String[0]__		}_		return StringUtils.toStringArray(dependentBeans)__	};return,the,names,of,all,beans,which,depend,on,the,specified,bean,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,dependent,bean,names,or,an,empty,array,if,none;public,string,get,dependent,beans,string,bean,name,set,string,dependent,beans,this,dependent,bean,map,get,bean,name,if,dependent,beans,null,return,new,string,0,return,string,utils,to,string,array,dependent,beans
DefaultSingletonBeanRegistry -> public String[] getDependentBeans(String beanName);1408528936;Return the names of all beans which depend on the specified bean, if any._@param beanName the name of the bean_@return the array of dependent bean names, or an empty array if none;public String[] getDependentBeans(String beanName) {_		Set<String> dependentBeans = this.dependentBeanMap.get(beanName)__		if (dependentBeans == null) {_			return new String[0]__		}_		return StringUtils.toStringArray(dependentBeans)__	};return,the,names,of,all,beans,which,depend,on,the,specified,bean,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,dependent,bean,names,or,an,empty,array,if,none;public,string,get,dependent,beans,string,bean,name,set,string,dependent,beans,this,dependent,bean,map,get,bean,name,if,dependent,beans,null,return,new,string,0,return,string,utils,to,string,array,dependent,beans
DefaultSingletonBeanRegistry -> public String[] getDependentBeans(String beanName);1408624154;Return the names of all beans which depend on the specified bean, if any._@param beanName the name of the bean_@return the array of dependent bean names, or an empty array if none;public String[] getDependentBeans(String beanName) {_		Set<String> dependentBeans = this.dependentBeanMap.get(beanName)__		if (dependentBeans == null) {_			return new String[0]__		}_		return StringUtils.toStringArray(dependentBeans)__	};return,the,names,of,all,beans,which,depend,on,the,specified,bean,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,dependent,bean,names,or,an,empty,array,if,none;public,string,get,dependent,beans,string,bean,name,set,string,dependent,beans,this,dependent,bean,map,get,bean,name,if,dependent,beans,null,return,new,string,0,return,string,utils,to,string,array,dependent,beans
DefaultSingletonBeanRegistry -> public String[] getDependentBeans(String beanName);1409688815;Return the names of all beans which depend on the specified bean, if any._@param beanName the name of the bean_@return the array of dependent bean names, or an empty array if none;public String[] getDependentBeans(String beanName) {_		Set<String> dependentBeans = this.dependentBeanMap.get(beanName)__		if (dependentBeans == null) {_			return new String[0]__		}_		return StringUtils.toStringArray(dependentBeans)__	};return,the,names,of,all,beans,which,depend,on,the,specified,bean,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,dependent,bean,names,or,an,empty,array,if,none;public,string,get,dependent,beans,string,bean,name,set,string,dependent,beans,this,dependent,bean,map,get,bean,name,if,dependent,beans,null,return,new,string,0,return,string,utils,to,string,array,dependent,beans
DefaultSingletonBeanRegistry -> public String[] getDependentBeans(String beanName);1417966231;Return the names of all beans which depend on the specified bean, if any._@param beanName the name of the bean_@return the array of dependent bean names, or an empty array if none;public String[] getDependentBeans(String beanName) {_		Set<String> dependentBeans = this.dependentBeanMap.get(beanName)__		if (dependentBeans == null) {_			return new String[0]__		}_		return StringUtils.toStringArray(dependentBeans)__	};return,the,names,of,all,beans,which,depend,on,the,specified,bean,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,dependent,bean,names,or,an,empty,array,if,none;public,string,get,dependent,beans,string,bean,name,set,string,dependent,beans,this,dependent,bean,map,get,bean,name,if,dependent,beans,null,return,new,string,0,return,string,utils,to,string,array,dependent,beans
DefaultSingletonBeanRegistry -> public String[] getDependentBeans(String beanName);1424972106;Return the names of all beans which depend on the specified bean, if any._@param beanName the name of the bean_@return the array of dependent bean names, or an empty array if none;public String[] getDependentBeans(String beanName) {_		Set<String> dependentBeans = this.dependentBeanMap.get(beanName)__		if (dependentBeans == null) {_			return new String[0]__		}_		return StringUtils.toStringArray(dependentBeans)__	};return,the,names,of,all,beans,which,depend,on,the,specified,bean,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,dependent,bean,names,or,an,empty,array,if,none;public,string,get,dependent,beans,string,bean,name,set,string,dependent,beans,this,dependent,bean,map,get,bean,name,if,dependent,beans,null,return,new,string,0,return,string,utils,to,string,array,dependent,beans
DefaultSingletonBeanRegistry -> public String[] getDependentBeans(String beanName);1447399860;Return the names of all beans which depend on the specified bean, if any._@param beanName the name of the bean_@return the array of dependent bean names, or an empty array if none;public String[] getDependentBeans(String beanName) {_		Set<String> dependentBeans = this.dependentBeanMap.get(beanName)__		if (dependentBeans == null) {_			return new String[0]__		}_		return StringUtils.toStringArray(dependentBeans)__	};return,the,names,of,all,beans,which,depend,on,the,specified,bean,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,dependent,bean,names,or,an,empty,array,if,none;public,string,get,dependent,beans,string,bean,name,set,string,dependent,beans,this,dependent,bean,map,get,bean,name,if,dependent,beans,null,return,new,string,0,return,string,utils,to,string,array,dependent,beans
DefaultSingletonBeanRegistry -> public String[] getDependentBeans(String beanName);1467730834;Return the names of all beans which depend on the specified bean, if any._@param beanName the name of the bean_@return the array of dependent bean names, or an empty array if none;public String[] getDependentBeans(String beanName) {_		Set<String> dependentBeans = this.dependentBeanMap.get(beanName)__		if (dependentBeans == null) {_			return new String[0]__		}_		return StringUtils.toStringArray(dependentBeans)__	};return,the,names,of,all,beans,which,depend,on,the,specified,bean,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,dependent,bean,names,or,an,empty,array,if,none;public,string,get,dependent,beans,string,bean,name,set,string,dependent,beans,this,dependent,bean,map,get,bean,name,if,dependent,beans,null,return,new,string,0,return,string,utils,to,string,array,dependent,beans
DefaultSingletonBeanRegistry -> public String[] getDependentBeans(String beanName);1467810738;Return the names of all beans which depend on the specified bean, if any._@param beanName the name of the bean_@return the array of dependent bean names, or an empty array if none;public String[] getDependentBeans(String beanName) {_		Set<String> dependentBeans = this.dependentBeanMap.get(beanName)__		if (dependentBeans == null) {_			return new String[0]__		}_		return StringUtils.toStringArray(dependentBeans)__	};return,the,names,of,all,beans,which,depend,on,the,specified,bean,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,dependent,bean,names,or,an,empty,array,if,none;public,string,get,dependent,beans,string,bean,name,set,string,dependent,beans,this,dependent,bean,map,get,bean,name,if,dependent,beans,null,return,new,string,0,return,string,utils,to,string,array,dependent,beans
DefaultSingletonBeanRegistry -> public String[] getDependentBeans(String beanName);1469561191;Return the names of all beans which depend on the specified bean, if any._@param beanName the name of the bean_@return the array of dependent bean names, or an empty array if none;public String[] getDependentBeans(String beanName) {_		Set<String> dependentBeans = this.dependentBeanMap.get(beanName)__		if (dependentBeans == null) {_			return new String[0]__		}_		return StringUtils.toStringArray(dependentBeans)__	};return,the,names,of,all,beans,which,depend,on,the,specified,bean,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,dependent,bean,names,or,an,empty,array,if,none;public,string,get,dependent,beans,string,bean,name,set,string,dependent,beans,this,dependent,bean,map,get,bean,name,if,dependent,beans,null,return,new,string,0,return,string,utils,to,string,array,dependent,beans
DefaultSingletonBeanRegistry -> public String[] getDependentBeans(String beanName);1478538021;Return the names of all beans which depend on the specified bean, if any._@param beanName the name of the bean_@return the array of dependent bean names, or an empty array if none;public String[] getDependentBeans(String beanName) {_		Set<String> dependentBeans = this.dependentBeanMap.get(beanName)__		if (dependentBeans == null) {_			return new String[0]__		}_		return StringUtils.toStringArray(dependentBeans)__	};return,the,names,of,all,beans,which,depend,on,the,specified,bean,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,dependent,bean,names,or,an,empty,array,if,none;public,string,get,dependent,beans,string,bean,name,set,string,dependent,beans,this,dependent,bean,map,get,bean,name,if,dependent,beans,null,return,new,string,0,return,string,utils,to,string,array,dependent,beans
DefaultSingletonBeanRegistry -> public String[] getDependentBeans(String beanName);1495868221;Return the names of all beans which depend on the specified bean, if any._@param beanName the name of the bean_@return the array of dependent bean names, or an empty array if none;public String[] getDependentBeans(String beanName) {_		Set<String> dependentBeans = this.dependentBeanMap.get(beanName)__		if (dependentBeans == null) {_			return new String[0]__		}_		return StringUtils.toStringArray(dependentBeans)__	};return,the,names,of,all,beans,which,depend,on,the,specified,bean,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,dependent,bean,names,or,an,empty,array,if,none;public,string,get,dependent,beans,string,bean,name,set,string,dependent,beans,this,dependent,bean,map,get,bean,name,if,dependent,beans,null,return,new,string,0,return,string,utils,to,string,array,dependent,beans
DefaultSingletonBeanRegistry -> public String[] getDependentBeans(String beanName);1496259743;Return the names of all beans which depend on the specified bean, if any._@param beanName the name of the bean_@return the array of dependent bean names, or an empty array if none;public String[] getDependentBeans(String beanName) {_		Set<String> dependentBeans = this.dependentBeanMap.get(beanName)__		if (dependentBeans == null) {_			return new String[0]__		}_		return StringUtils.toStringArray(dependentBeans)__	};return,the,names,of,all,beans,which,depend,on,the,specified,bean,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,dependent,bean,names,or,an,empty,array,if,none;public,string,get,dependent,beans,string,bean,name,set,string,dependent,beans,this,dependent,bean,map,get,bean,name,if,dependent,beans,null,return,new,string,0,return,string,utils,to,string,array,dependent,beans
DefaultSingletonBeanRegistry -> public String[] getDependentBeans(String beanName);1496837955;Return the names of all beans which depend on the specified bean, if any._@param beanName the name of the bean_@return the array of dependent bean names, or an empty array if none;public String[] getDependentBeans(String beanName) {_		Set<String> dependentBeans = this.dependentBeanMap.get(beanName)__		if (dependentBeans == null) {_			return new String[0]__		}_		return StringUtils.toStringArray(dependentBeans)__	};return,the,names,of,all,beans,which,depend,on,the,specified,bean,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,dependent,bean,names,or,an,empty,array,if,none;public,string,get,dependent,beans,string,bean,name,set,string,dependent,beans,this,dependent,bean,map,get,bean,name,if,dependent,beans,null,return,new,string,0,return,string,utils,to,string,array,dependent,beans
DefaultSingletonBeanRegistry -> public String[] getDependentBeans(String beanName);1498780456;Return the names of all beans which depend on the specified bean, if any._@param beanName the name of the bean_@return the array of dependent bean names, or an empty array if none;public String[] getDependentBeans(String beanName) {_		Set<String> dependentBeans = this.dependentBeanMap.get(beanName)__		if (dependentBeans == null) {_			return new String[0]__		}_		return StringUtils.toStringArray(dependentBeans)__	};return,the,names,of,all,beans,which,depend,on,the,specified,bean,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,dependent,bean,names,or,an,empty,array,if,none;public,string,get,dependent,beans,string,bean,name,set,string,dependent,beans,this,dependent,bean,map,get,bean,name,if,dependent,beans,null,return,new,string,0,return,string,utils,to,string,array,dependent,beans
DefaultSingletonBeanRegistry -> public String[] getDependentBeans(String beanName);1502974979;Return the names of all beans which depend on the specified bean, if any._@param beanName the name of the bean_@return the array of dependent bean names, or an empty array if none;public String[] getDependentBeans(String beanName) {_		Set<String> dependentBeans = this.dependentBeanMap.get(beanName)__		if (dependentBeans == null) {_			return new String[0]__		}_		return StringUtils.toStringArray(dependentBeans)__	};return,the,names,of,all,beans,which,depend,on,the,specified,bean,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,dependent,bean,names,or,an,empty,array,if,none;public,string,get,dependent,beans,string,bean,name,set,string,dependent,beans,this,dependent,bean,map,get,bean,name,if,dependent,beans,null,return,new,string,0,return,string,utils,to,string,array,dependent,beans
DefaultSingletonBeanRegistry -> public String[] getDependentBeans(String beanName);1503007895;Return the names of all beans which depend on the specified bean, if any._@param beanName the name of the bean_@return the array of dependent bean names, or an empty array if none;public String[] getDependentBeans(String beanName) {_		Set<String> dependentBeans = this.dependentBeanMap.get(beanName)__		if (dependentBeans == null) {_			return new String[0]__		}_		return StringUtils.toStringArray(dependentBeans)__	};return,the,names,of,all,beans,which,depend,on,the,specified,bean,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,dependent,bean,names,or,an,empty,array,if,none;public,string,get,dependent,beans,string,bean,name,set,string,dependent,beans,this,dependent,bean,map,get,bean,name,if,dependent,beans,null,return,new,string,0,return,string,utils,to,string,array,dependent,beans
DefaultSingletonBeanRegistry -> public String[] getDependentBeans(String beanName);1518810557;Return the names of all beans which depend on the specified bean, if any._@param beanName the name of the bean_@return the array of dependent bean names, or an empty array if none;public String[] getDependentBeans(String beanName) {_		Set<String> dependentBeans = this.dependentBeanMap.get(beanName)__		if (dependentBeans == null) {_			return new String[0]__		}_		return StringUtils.toStringArray(dependentBeans)__	};return,the,names,of,all,beans,which,depend,on,the,specified,bean,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,dependent,bean,names,or,an,empty,array,if,none;public,string,get,dependent,beans,string,bean,name,set,string,dependent,beans,this,dependent,bean,map,get,bean,name,if,dependent,beans,null,return,new,string,0,return,string,utils,to,string,array,dependent,beans
DefaultSingletonBeanRegistry -> public String[] getDependentBeans(String beanName);1521822873;Return the names of all beans which depend on the specified bean, if any._@param beanName the name of the bean_@return the array of dependent bean names, or an empty array if none;public String[] getDependentBeans(String beanName) {_		Set<String> dependentBeans = this.dependentBeanMap.get(beanName)__		if (dependentBeans == null) {_			return new String[0]__		}_		return StringUtils.toStringArray(dependentBeans)__	};return,the,names,of,all,beans,which,depend,on,the,specified,bean,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,dependent,bean,names,or,an,empty,array,if,none;public,string,get,dependent,beans,string,bean,name,set,string,dependent,beans,this,dependent,bean,map,get,bean,name,if,dependent,beans,null,return,new,string,0,return,string,utils,to,string,array,dependent,beans
DefaultSingletonBeanRegistry -> public String[] getDependentBeans(String beanName);1521905451;Return the names of all beans which depend on the specified bean, if any._@param beanName the name of the bean_@return the array of dependent bean names, or an empty array if none;public String[] getDependentBeans(String beanName) {_		Set<String> dependentBeans = this.dependentBeanMap.get(beanName)__		if (dependentBeans == null) {_			return new String[0]__		}_		synchronized (this.dependentBeanMap) {_			return StringUtils.toStringArray(dependentBeans)__		}_	};return,the,names,of,all,beans,which,depend,on,the,specified,bean,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,dependent,bean,names,or,an,empty,array,if,none;public,string,get,dependent,beans,string,bean,name,set,string,dependent,beans,this,dependent,bean,map,get,bean,name,if,dependent,beans,null,return,new,string,0,synchronized,this,dependent,bean,map,return,string,utils,to,string,array,dependent,beans
DefaultSingletonBeanRegistry -> public String[] getDependentBeans(String beanName);1527623493;Return the names of all beans which depend on the specified bean, if any._@param beanName the name of the bean_@return the array of dependent bean names, or an empty array if none;public String[] getDependentBeans(String beanName) {_		Set<String> dependentBeans = this.dependentBeanMap.get(beanName)__		if (dependentBeans == null) {_			return new String[0]__		}_		synchronized (this.dependentBeanMap) {_			return StringUtils.toStringArray(dependentBeans)__		}_	};return,the,names,of,all,beans,which,depend,on,the,specified,bean,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,dependent,bean,names,or,an,empty,array,if,none;public,string,get,dependent,beans,string,bean,name,set,string,dependent,beans,this,dependent,bean,map,get,bean,name,if,dependent,beans,null,return,new,string,0,synchronized,this,dependent,bean,map,return,string,utils,to,string,array,dependent,beans
DefaultSingletonBeanRegistry -> public String[] getDependentBeans(String beanName);1530174524;Return the names of all beans which depend on the specified bean, if any._@param beanName the name of the bean_@return the array of dependent bean names, or an empty array if none;public String[] getDependentBeans(String beanName) {_		Set<String> dependentBeans = this.dependentBeanMap.get(beanName)__		if (dependentBeans == null) {_			return new String[0]__		}_		synchronized (this.dependentBeanMap) {_			return StringUtils.toStringArray(dependentBeans)__		}_	};return,the,names,of,all,beans,which,depend,on,the,specified,bean,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,dependent,bean,names,or,an,empty,array,if,none;public,string,get,dependent,beans,string,bean,name,set,string,dependent,beans,this,dependent,bean,map,get,bean,name,if,dependent,beans,null,return,new,string,0,synchronized,this,dependent,bean,map,return,string,utils,to,string,array,dependent,beans
DefaultSingletonBeanRegistry -> public String[] getDependentBeans(String beanName);1532091916;Return the names of all beans which depend on the specified bean, if any._@param beanName the name of the bean_@return the array of dependent bean names, or an empty array if none;public String[] getDependentBeans(String beanName) {_		Set<String> dependentBeans = this.dependentBeanMap.get(beanName)__		if (dependentBeans == null) {_			return new String[0]__		}_		synchronized (this.dependentBeanMap) {_			return StringUtils.toStringArray(dependentBeans)__		}_	};return,the,names,of,all,beans,which,depend,on,the,specified,bean,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,dependent,bean,names,or,an,empty,array,if,none;public,string,get,dependent,beans,string,bean,name,set,string,dependent,beans,this,dependent,bean,map,get,bean,name,if,dependent,beans,null,return,new,string,0,synchronized,this,dependent,bean,map,return,string,utils,to,string,array,dependent,beans
DefaultSingletonBeanRegistry -> public String[] getDependentBeans(String beanName);1532706365;Return the names of all beans which depend on the specified bean, if any._@param beanName the name of the bean_@return the array of dependent bean names, or an empty array if none;public String[] getDependentBeans(String beanName) {_		Set<String> dependentBeans = this.dependentBeanMap.get(beanName)__		if (dependentBeans == null) {_			return new String[0]__		}_		synchronized (this.dependentBeanMap) {_			return StringUtils.toStringArray(dependentBeans)__		}_	};return,the,names,of,all,beans,which,depend,on,the,specified,bean,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,dependent,bean,names,or,an,empty,array,if,none;public,string,get,dependent,beans,string,bean,name,set,string,dependent,beans,this,dependent,bean,map,get,bean,name,if,dependent,beans,null,return,new,string,0,synchronized,this,dependent,bean,map,return,string,utils,to,string,array,dependent,beans
DefaultSingletonBeanRegistry -> public void destroySingleton(String beanName);1328020251;Destroy the given bean. Delegates to <code>destroyBean</code>_if a corresponding disposable bean instance is found._@param beanName the name of the bean_@see #destroyBean;public void destroySingleton(String beanName) {_		_		removeSingleton(beanName)___		_		DisposableBean disposableBean__		synchronized (this.disposableBeans) {_			disposableBean = (DisposableBean) this.disposableBeans.remove(beanName)__		}_		destroyBean(beanName, disposableBean)__	};destroy,the,given,bean,delegates,to,code,destroy,bean,code,if,a,corresponding,disposable,bean,instance,is,found,param,bean,name,the,name,of,the,bean,see,destroy,bean;public,void,destroy,singleton,string,bean,name,remove,singleton,bean,name,disposable,bean,disposable,bean,synchronized,this,disposable,beans,disposable,bean,disposable,bean,this,disposable,beans,remove,bean,name,destroy,bean,bean,name,disposable,bean
DefaultSingletonBeanRegistry -> public void destroySingleton(String beanName);1349872135;Destroy the given bean. Delegates to <code>destroyBean</code>_if a corresponding disposable bean instance is found._@param beanName the name of the bean_@see #destroyBean;public void destroySingleton(String beanName) {_		_		removeSingleton(beanName)___		_		DisposableBean disposableBean__		synchronized (this.disposableBeans) {_			disposableBean = (DisposableBean) this.disposableBeans.remove(beanName)__		}_		destroyBean(beanName, disposableBean)__	};destroy,the,given,bean,delegates,to,code,destroy,bean,code,if,a,corresponding,disposable,bean,instance,is,found,param,bean,name,the,name,of,the,bean,see,destroy,bean;public,void,destroy,singleton,string,bean,name,remove,singleton,bean,name,disposable,bean,disposable,bean,synchronized,this,disposable,beans,disposable,bean,disposable,bean,this,disposable,beans,remove,bean,name,destroy,bean,bean,name,disposable,bean
DefaultSingletonBeanRegistry -> public void destroySingleton(String beanName);1352412938;Destroy the given bean. Delegates to <code>destroyBean</code>_if a corresponding disposable bean instance is found._@param beanName the name of the bean_@see #destroyBean;public void destroySingleton(String beanName) {_		_		removeSingleton(beanName)___		_		DisposableBean disposableBean__		synchronized (this.disposableBeans) {_			disposableBean = (DisposableBean) this.disposableBeans.remove(beanName)__		}_		destroyBean(beanName, disposableBean)__	};destroy,the,given,bean,delegates,to,code,destroy,bean,code,if,a,corresponding,disposable,bean,instance,is,found,param,bean,name,the,name,of,the,bean,see,destroy,bean;public,void,destroy,singleton,string,bean,name,remove,singleton,bean,name,disposable,bean,disposable,bean,synchronized,this,disposable,beans,disposable,bean,disposable,bean,this,disposable,beans,remove,bean,name,destroy,bean,bean,name,disposable,bean
DefaultSingletonBeanRegistry -> public void destroySingleton(String beanName);1352418897;Destroy the given bean. Delegates to <code>destroyBean</code>_if a corresponding disposable bean instance is found._@param beanName the name of the bean_@see #destroyBean;public void destroySingleton(String beanName) {_		_		removeSingleton(beanName)___		_		DisposableBean disposableBean__		synchronized (this.disposableBeans) {_			disposableBean = (DisposableBean) this.disposableBeans.remove(beanName)__		}_		destroyBean(beanName, disposableBean)__	};destroy,the,given,bean,delegates,to,code,destroy,bean,code,if,a,corresponding,disposable,bean,instance,is,found,param,bean,name,the,name,of,the,bean,see,destroy,bean;public,void,destroy,singleton,string,bean,name,remove,singleton,bean,name,disposable,bean,disposable,bean,synchronized,this,disposable,beans,disposable,bean,disposable,bean,this,disposable,beans,remove,bean,name,destroy,bean,bean,name,disposable,bean
DefaultSingletonBeanRegistry -> public void destroySingleton(String beanName);1353882772;Destroy the given bean. Delegates to <code>destroyBean</code>_if a corresponding disposable bean instance is found._@param beanName the name of the bean_@see #destroyBean;public void destroySingleton(String beanName) {_		_		removeSingleton(beanName)___		_		DisposableBean disposableBean__		synchronized (this.disposableBeans) {_			disposableBean = (DisposableBean) this.disposableBeans.remove(beanName)__		}_		destroyBean(beanName, disposableBean)__	};destroy,the,given,bean,delegates,to,code,destroy,bean,code,if,a,corresponding,disposable,bean,instance,is,found,param,bean,name,the,name,of,the,bean,see,destroy,bean;public,void,destroy,singleton,string,bean,name,remove,singleton,bean,name,disposable,bean,disposable,bean,synchronized,this,disposable,beans,disposable,bean,disposable,bean,this,disposable,beans,remove,bean,name,destroy,bean,bean,name,disposable,bean
DefaultSingletonBeanRegistry -> public void destroySingleton(String beanName);1355352386;Destroy the given bean. Delegates to <code>destroyBean</code>_if a corresponding disposable bean instance is found._@param beanName the name of the bean_@see #destroyBean;public void destroySingleton(String beanName) {_		_		removeSingleton(beanName)___		_		DisposableBean disposableBean__		synchronized (this.disposableBeans) {_			disposableBean = (DisposableBean) this.disposableBeans.remove(beanName)__		}_		destroyBean(beanName, disposableBean)__	};destroy,the,given,bean,delegates,to,code,destroy,bean,code,if,a,corresponding,disposable,bean,instance,is,found,param,bean,name,the,name,of,the,bean,see,destroy,bean;public,void,destroy,singleton,string,bean,name,remove,singleton,bean,name,disposable,bean,disposable,bean,synchronized,this,disposable,beans,disposable,bean,disposable,bean,this,disposable,beans,remove,bean,name,destroy,bean,bean,name,disposable,bean
DefaultSingletonBeanRegistry -> public void destroySingleton(String beanName);1356735495;Destroy the given bean. Delegates to {@code destroyBean}_if a corresponding disposable bean instance is found._@param beanName the name of the bean_@see #destroyBean;public void destroySingleton(String beanName) {_		_		removeSingleton(beanName)___		_		DisposableBean disposableBean__		synchronized (this.disposableBeans) {_			disposableBean = (DisposableBean) this.disposableBeans.remove(beanName)__		}_		destroyBean(beanName, disposableBean)__	};destroy,the,given,bean,delegates,to,code,destroy,bean,if,a,corresponding,disposable,bean,instance,is,found,param,bean,name,the,name,of,the,bean,see,destroy,bean;public,void,destroy,singleton,string,bean,name,remove,singleton,bean,name,disposable,bean,disposable,bean,synchronized,this,disposable,beans,disposable,bean,disposable,bean,this,disposable,beans,remove,bean,name,destroy,bean,bean,name,disposable,bean
DefaultSingletonBeanRegistry -> public void destroySingleton(String beanName);1357119239;Destroy the given bean. Delegates to {@code destroyBean}_if a corresponding disposable bean instance is found._@param beanName the name of the bean_@see #destroyBean;public void destroySingleton(String beanName) {_		_		removeSingleton(beanName)___		_		DisposableBean disposableBean__		synchronized (this.disposableBeans) {_			disposableBean = (DisposableBean) this.disposableBeans.remove(beanName)__		}_		destroyBean(beanName, disposableBean)__	};destroy,the,given,bean,delegates,to,code,destroy,bean,if,a,corresponding,disposable,bean,instance,is,found,param,bean,name,the,name,of,the,bean,see,destroy,bean;public,void,destroy,singleton,string,bean,name,remove,singleton,bean,name,disposable,bean,disposable,bean,synchronized,this,disposable,beans,disposable,bean,disposable,bean,this,disposable,beans,remove,bean,name,destroy,bean,bean,name,disposable,bean
DefaultSingletonBeanRegistry -> public void destroySingleton(String beanName);1364505266;Destroy the given bean. Delegates to {@code destroyBean}_if a corresponding disposable bean instance is found._@param beanName the name of the bean_@see #destroyBean;public void destroySingleton(String beanName) {_		_		removeSingleton(beanName)___		_		DisposableBean disposableBean__		synchronized (this.disposableBeans) {_			disposableBean = (DisposableBean) this.disposableBeans.remove(beanName)__		}_		destroyBean(beanName, disposableBean)__	};destroy,the,given,bean,delegates,to,code,destroy,bean,if,a,corresponding,disposable,bean,instance,is,found,param,bean,name,the,name,of,the,bean,see,destroy,bean;public,void,destroy,singleton,string,bean,name,remove,singleton,bean,name,disposable,bean,disposable,bean,synchronized,this,disposable,beans,disposable,bean,disposable,bean,this,disposable,beans,remove,bean,name,destroy,bean,bean,name,disposable,bean
DefaultSingletonBeanRegistry -> public void destroySingleton(String beanName);1368482696;Destroy the given bean. Delegates to {@code destroyBean}_if a corresponding disposable bean instance is found._@param beanName the name of the bean_@see #destroyBean;public void destroySingleton(String beanName) {_		_		removeSingleton(beanName)___		_		DisposableBean disposableBean__		synchronized (this.disposableBeans) {_			disposableBean = (DisposableBean) this.disposableBeans.remove(beanName)__		}_		destroyBean(beanName, disposableBean)__	};destroy,the,given,bean,delegates,to,code,destroy,bean,if,a,corresponding,disposable,bean,instance,is,found,param,bean,name,the,name,of,the,bean,see,destroy,bean;public,void,destroy,singleton,string,bean,name,remove,singleton,bean,name,disposable,bean,disposable,bean,synchronized,this,disposable,beans,disposable,bean,disposable,bean,this,disposable,beans,remove,bean,name,destroy,bean,bean,name,disposable,bean
DefaultSingletonBeanRegistry -> public void destroySingleton(String beanName);1374698947;Destroy the given bean. Delegates to {@code destroyBean}_if a corresponding disposable bean instance is found._@param beanName the name of the bean_@see #destroyBean;public void destroySingleton(String beanName) {_		_		removeSingleton(beanName)___		_		DisposableBean disposableBean__		synchronized (this.disposableBeans) {_			disposableBean = (DisposableBean) this.disposableBeans.remove(beanName)__		}_		destroyBean(beanName, disposableBean)__	};destroy,the,given,bean,delegates,to,code,destroy,bean,if,a,corresponding,disposable,bean,instance,is,found,param,bean,name,the,name,of,the,bean,see,destroy,bean;public,void,destroy,singleton,string,bean,name,remove,singleton,bean,name,disposable,bean,disposable,bean,synchronized,this,disposable,beans,disposable,bean,disposable,bean,this,disposable,beans,remove,bean,name,destroy,bean,bean,name,disposable,bean
DefaultSingletonBeanRegistry -> public void destroySingleton(String beanName);1385412762;Destroy the given bean. Delegates to {@code destroyBean}_if a corresponding disposable bean instance is found._@param beanName the name of the bean_@see #destroyBean;public void destroySingleton(String beanName) {_		_		removeSingleton(beanName)___		_		DisposableBean disposableBean__		synchronized (this.disposableBeans) {_			disposableBean = (DisposableBean) this.disposableBeans.remove(beanName)__		}_		destroyBean(beanName, disposableBean)__	};destroy,the,given,bean,delegates,to,code,destroy,bean,if,a,corresponding,disposable,bean,instance,is,found,param,bean,name,the,name,of,the,bean,see,destroy,bean;public,void,destroy,singleton,string,bean,name,remove,singleton,bean,name,disposable,bean,disposable,bean,synchronized,this,disposable,beans,disposable,bean,disposable,bean,this,disposable,beans,remove,bean,name,destroy,bean,bean,name,disposable,bean
DefaultSingletonBeanRegistry -> public void destroySingleton(String beanName);1385984377;Destroy the given bean. Delegates to {@code destroyBean}_if a corresponding disposable bean instance is found._@param beanName the name of the bean_@see #destroyBean;public void destroySingleton(String beanName) {_		_		removeSingleton(beanName)___		_		DisposableBean disposableBean__		synchronized (this.disposableBeans) {_			disposableBean = (DisposableBean) this.disposableBeans.remove(beanName)__		}_		destroyBean(beanName, disposableBean)__	};destroy,the,given,bean,delegates,to,code,destroy,bean,if,a,corresponding,disposable,bean,instance,is,found,param,bean,name,the,name,of,the,bean,see,destroy,bean;public,void,destroy,singleton,string,bean,name,remove,singleton,bean,name,disposable,bean,disposable,bean,synchronized,this,disposable,beans,disposable,bean,disposable,bean,this,disposable,beans,remove,bean,name,destroy,bean,bean,name,disposable,bean
DefaultSingletonBeanRegistry -> public void destroySingleton(String beanName);1405430015;Destroy the given bean. Delegates to {@code destroyBean}_if a corresponding disposable bean instance is found._@param beanName the name of the bean_@see #destroyBean;public void destroySingleton(String beanName) {_		_		removeSingleton(beanName)___		_		DisposableBean disposableBean__		synchronized (this.disposableBeans) {_			disposableBean = (DisposableBean) this.disposableBeans.remove(beanName)__		}_		destroyBean(beanName, disposableBean)__	};destroy,the,given,bean,delegates,to,code,destroy,bean,if,a,corresponding,disposable,bean,instance,is,found,param,bean,name,the,name,of,the,bean,see,destroy,bean;public,void,destroy,singleton,string,bean,name,remove,singleton,bean,name,disposable,bean,disposable,bean,synchronized,this,disposable,beans,disposable,bean,disposable,bean,this,disposable,beans,remove,bean,name,destroy,bean,bean,name,disposable,bean
DefaultSingletonBeanRegistry -> public void destroySingleton(String beanName);1408528936;Destroy the given bean. Delegates to {@code destroyBean}_if a corresponding disposable bean instance is found._@param beanName the name of the bean_@see #destroyBean;public void destroySingleton(String beanName) {_		_		removeSingleton(beanName)___		_		DisposableBean disposableBean__		synchronized (this.disposableBeans) {_			disposableBean = (DisposableBean) this.disposableBeans.remove(beanName)__		}_		destroyBean(beanName, disposableBean)__	};destroy,the,given,bean,delegates,to,code,destroy,bean,if,a,corresponding,disposable,bean,instance,is,found,param,bean,name,the,name,of,the,bean,see,destroy,bean;public,void,destroy,singleton,string,bean,name,remove,singleton,bean,name,disposable,bean,disposable,bean,synchronized,this,disposable,beans,disposable,bean,disposable,bean,this,disposable,beans,remove,bean,name,destroy,bean,bean,name,disposable,bean
DefaultSingletonBeanRegistry -> public void destroySingleton(String beanName);1408624154;Destroy the given bean. Delegates to {@code destroyBean}_if a corresponding disposable bean instance is found._@param beanName the name of the bean_@see #destroyBean;public void destroySingleton(String beanName) {_		_		removeSingleton(beanName)___		_		DisposableBean disposableBean__		synchronized (this.disposableBeans) {_			disposableBean = (DisposableBean) this.disposableBeans.remove(beanName)__		}_		destroyBean(beanName, disposableBean)__	};destroy,the,given,bean,delegates,to,code,destroy,bean,if,a,corresponding,disposable,bean,instance,is,found,param,bean,name,the,name,of,the,bean,see,destroy,bean;public,void,destroy,singleton,string,bean,name,remove,singleton,bean,name,disposable,bean,disposable,bean,synchronized,this,disposable,beans,disposable,bean,disposable,bean,this,disposable,beans,remove,bean,name,destroy,bean,bean,name,disposable,bean
DefaultSingletonBeanRegistry -> public void destroySingleton(String beanName);1409688815;Destroy the given bean. Delegates to {@code destroyBean}_if a corresponding disposable bean instance is found._@param beanName the name of the bean_@see #destroyBean;public void destroySingleton(String beanName) {_		_		removeSingleton(beanName)___		_		DisposableBean disposableBean__		synchronized (this.disposableBeans) {_			disposableBean = (DisposableBean) this.disposableBeans.remove(beanName)__		}_		destroyBean(beanName, disposableBean)__	};destroy,the,given,bean,delegates,to,code,destroy,bean,if,a,corresponding,disposable,bean,instance,is,found,param,bean,name,the,name,of,the,bean,see,destroy,bean;public,void,destroy,singleton,string,bean,name,remove,singleton,bean,name,disposable,bean,disposable,bean,synchronized,this,disposable,beans,disposable,bean,disposable,bean,this,disposable,beans,remove,bean,name,destroy,bean,bean,name,disposable,bean
DefaultSingletonBeanRegistry -> public void destroySingleton(String beanName);1417966231;Destroy the given bean. Delegates to {@code destroyBean}_if a corresponding disposable bean instance is found._@param beanName the name of the bean_@see #destroyBean;public void destroySingleton(String beanName) {_		_		removeSingleton(beanName)___		_		DisposableBean disposableBean__		synchronized (this.disposableBeans) {_			disposableBean = (DisposableBean) this.disposableBeans.remove(beanName)__		}_		destroyBean(beanName, disposableBean)__	};destroy,the,given,bean,delegates,to,code,destroy,bean,if,a,corresponding,disposable,bean,instance,is,found,param,bean,name,the,name,of,the,bean,see,destroy,bean;public,void,destroy,singleton,string,bean,name,remove,singleton,bean,name,disposable,bean,disposable,bean,synchronized,this,disposable,beans,disposable,bean,disposable,bean,this,disposable,beans,remove,bean,name,destroy,bean,bean,name,disposable,bean
DefaultSingletonBeanRegistry -> public void destroySingleton(String beanName);1424972106;Destroy the given bean. Delegates to {@code destroyBean}_if a corresponding disposable bean instance is found._@param beanName the name of the bean_@see #destroyBean;public void destroySingleton(String beanName) {_		_		removeSingleton(beanName)___		_		DisposableBean disposableBean__		synchronized (this.disposableBeans) {_			disposableBean = (DisposableBean) this.disposableBeans.remove(beanName)__		}_		destroyBean(beanName, disposableBean)__	};destroy,the,given,bean,delegates,to,code,destroy,bean,if,a,corresponding,disposable,bean,instance,is,found,param,bean,name,the,name,of,the,bean,see,destroy,bean;public,void,destroy,singleton,string,bean,name,remove,singleton,bean,name,disposable,bean,disposable,bean,synchronized,this,disposable,beans,disposable,bean,disposable,bean,this,disposable,beans,remove,bean,name,destroy,bean,bean,name,disposable,bean
DefaultSingletonBeanRegistry -> public void destroySingleton(String beanName);1447399860;Destroy the given bean. Delegates to {@code destroyBean}_if a corresponding disposable bean instance is found._@param beanName the name of the bean_@see #destroyBean;public void destroySingleton(String beanName) {_		_		removeSingleton(beanName)___		_		DisposableBean disposableBean__		synchronized (this.disposableBeans) {_			disposableBean = (DisposableBean) this.disposableBeans.remove(beanName)__		}_		destroyBean(beanName, disposableBean)__	};destroy,the,given,bean,delegates,to,code,destroy,bean,if,a,corresponding,disposable,bean,instance,is,found,param,bean,name,the,name,of,the,bean,see,destroy,bean;public,void,destroy,singleton,string,bean,name,remove,singleton,bean,name,disposable,bean,disposable,bean,synchronized,this,disposable,beans,disposable,bean,disposable,bean,this,disposable,beans,remove,bean,name,destroy,bean,bean,name,disposable,bean
DefaultSingletonBeanRegistry -> public void destroySingleton(String beanName);1467730834;Destroy the given bean. Delegates to {@code destroyBean}_if a corresponding disposable bean instance is found._@param beanName the name of the bean_@see #destroyBean;public void destroySingleton(String beanName) {_		_		removeSingleton(beanName)___		_		DisposableBean disposableBean__		synchronized (this.disposableBeans) {_			disposableBean = (DisposableBean) this.disposableBeans.remove(beanName)__		}_		destroyBean(beanName, disposableBean)__	};destroy,the,given,bean,delegates,to,code,destroy,bean,if,a,corresponding,disposable,bean,instance,is,found,param,bean,name,the,name,of,the,bean,see,destroy,bean;public,void,destroy,singleton,string,bean,name,remove,singleton,bean,name,disposable,bean,disposable,bean,synchronized,this,disposable,beans,disposable,bean,disposable,bean,this,disposable,beans,remove,bean,name,destroy,bean,bean,name,disposable,bean
DefaultSingletonBeanRegistry -> public void destroySingleton(String beanName);1467810738;Destroy the given bean. Delegates to {@code destroyBean}_if a corresponding disposable bean instance is found._@param beanName the name of the bean_@see #destroyBean;public void destroySingleton(String beanName) {_		_		removeSingleton(beanName)___		_		DisposableBean disposableBean__		synchronized (this.disposableBeans) {_			disposableBean = (DisposableBean) this.disposableBeans.remove(beanName)__		}_		destroyBean(beanName, disposableBean)__	};destroy,the,given,bean,delegates,to,code,destroy,bean,if,a,corresponding,disposable,bean,instance,is,found,param,bean,name,the,name,of,the,bean,see,destroy,bean;public,void,destroy,singleton,string,bean,name,remove,singleton,bean,name,disposable,bean,disposable,bean,synchronized,this,disposable,beans,disposable,bean,disposable,bean,this,disposable,beans,remove,bean,name,destroy,bean,bean,name,disposable,bean
DefaultSingletonBeanRegistry -> public void destroySingleton(String beanName);1469561191;Destroy the given bean. Delegates to {@code destroyBean}_if a corresponding disposable bean instance is found._@param beanName the name of the bean_@see #destroyBean;public void destroySingleton(String beanName) {_		_		removeSingleton(beanName)___		_		DisposableBean disposableBean__		synchronized (this.disposableBeans) {_			disposableBean = (DisposableBean) this.disposableBeans.remove(beanName)__		}_		destroyBean(beanName, disposableBean)__	};destroy,the,given,bean,delegates,to,code,destroy,bean,if,a,corresponding,disposable,bean,instance,is,found,param,bean,name,the,name,of,the,bean,see,destroy,bean;public,void,destroy,singleton,string,bean,name,remove,singleton,bean,name,disposable,bean,disposable,bean,synchronized,this,disposable,beans,disposable,bean,disposable,bean,this,disposable,beans,remove,bean,name,destroy,bean,bean,name,disposable,bean
DefaultSingletonBeanRegistry -> public void destroySingleton(String beanName);1478538021;Destroy the given bean. Delegates to {@code destroyBean}_if a corresponding disposable bean instance is found._@param beanName the name of the bean_@see #destroyBean;public void destroySingleton(String beanName) {_		_		removeSingleton(beanName)___		_		DisposableBean disposableBean__		synchronized (this.disposableBeans) {_			disposableBean = (DisposableBean) this.disposableBeans.remove(beanName)__		}_		destroyBean(beanName, disposableBean)__	};destroy,the,given,bean,delegates,to,code,destroy,bean,if,a,corresponding,disposable,bean,instance,is,found,param,bean,name,the,name,of,the,bean,see,destroy,bean;public,void,destroy,singleton,string,bean,name,remove,singleton,bean,name,disposable,bean,disposable,bean,synchronized,this,disposable,beans,disposable,bean,disposable,bean,this,disposable,beans,remove,bean,name,destroy,bean,bean,name,disposable,bean
DefaultSingletonBeanRegistry -> public void destroySingleton(String beanName);1495868221;Destroy the given bean. Delegates to {@code destroyBean}_if a corresponding disposable bean instance is found._@param beanName the name of the bean_@see #destroyBean;public void destroySingleton(String beanName) {_		_		removeSingleton(beanName)___		_		DisposableBean disposableBean__		synchronized (this.disposableBeans) {_			disposableBean = (DisposableBean) this.disposableBeans.remove(beanName)__		}_		destroyBean(beanName, disposableBean)__	};destroy,the,given,bean,delegates,to,code,destroy,bean,if,a,corresponding,disposable,bean,instance,is,found,param,bean,name,the,name,of,the,bean,see,destroy,bean;public,void,destroy,singleton,string,bean,name,remove,singleton,bean,name,disposable,bean,disposable,bean,synchronized,this,disposable,beans,disposable,bean,disposable,bean,this,disposable,beans,remove,bean,name,destroy,bean,bean,name,disposable,bean
DefaultSingletonBeanRegistry -> public void destroySingleton(String beanName);1496259743;Destroy the given bean. Delegates to {@code destroyBean}_if a corresponding disposable bean instance is found._@param beanName the name of the bean_@see #destroyBean;public void destroySingleton(String beanName) {_		_		removeSingleton(beanName)___		_		DisposableBean disposableBean__		synchronized (this.disposableBeans) {_			disposableBean = (DisposableBean) this.disposableBeans.remove(beanName)__		}_		destroyBean(beanName, disposableBean)__	};destroy,the,given,bean,delegates,to,code,destroy,bean,if,a,corresponding,disposable,bean,instance,is,found,param,bean,name,the,name,of,the,bean,see,destroy,bean;public,void,destroy,singleton,string,bean,name,remove,singleton,bean,name,disposable,bean,disposable,bean,synchronized,this,disposable,beans,disposable,bean,disposable,bean,this,disposable,beans,remove,bean,name,destroy,bean,bean,name,disposable,bean
DefaultSingletonBeanRegistry -> public void destroySingleton(String beanName);1496837955;Destroy the given bean. Delegates to {@code destroyBean}_if a corresponding disposable bean instance is found._@param beanName the name of the bean_@see #destroyBean;public void destroySingleton(String beanName) {_		_		removeSingleton(beanName)___		_		DisposableBean disposableBean__		synchronized (this.disposableBeans) {_			disposableBean = (DisposableBean) this.disposableBeans.remove(beanName)__		}_		destroyBean(beanName, disposableBean)__	};destroy,the,given,bean,delegates,to,code,destroy,bean,if,a,corresponding,disposable,bean,instance,is,found,param,bean,name,the,name,of,the,bean,see,destroy,bean;public,void,destroy,singleton,string,bean,name,remove,singleton,bean,name,disposable,bean,disposable,bean,synchronized,this,disposable,beans,disposable,bean,disposable,bean,this,disposable,beans,remove,bean,name,destroy,bean,bean,name,disposable,bean
DefaultSingletonBeanRegistry -> public void destroySingleton(String beanName);1498780456;Destroy the given bean. Delegates to {@code destroyBean}_if a corresponding disposable bean instance is found._@param beanName the name of the bean_@see #destroyBean;public void destroySingleton(String beanName) {_		_		removeSingleton(beanName)___		_		DisposableBean disposableBean__		synchronized (this.disposableBeans) {_			disposableBean = (DisposableBean) this.disposableBeans.remove(beanName)__		}_		destroyBean(beanName, disposableBean)__	};destroy,the,given,bean,delegates,to,code,destroy,bean,if,a,corresponding,disposable,bean,instance,is,found,param,bean,name,the,name,of,the,bean,see,destroy,bean;public,void,destroy,singleton,string,bean,name,remove,singleton,bean,name,disposable,bean,disposable,bean,synchronized,this,disposable,beans,disposable,bean,disposable,bean,this,disposable,beans,remove,bean,name,destroy,bean,bean,name,disposable,bean
DefaultSingletonBeanRegistry -> public void destroySingleton(String beanName);1502974979;Destroy the given bean. Delegates to {@code destroyBean}_if a corresponding disposable bean instance is found._@param beanName the name of the bean_@see #destroyBean;public void destroySingleton(String beanName) {_		_		removeSingleton(beanName)___		_		DisposableBean disposableBean__		synchronized (this.disposableBeans) {_			disposableBean = (DisposableBean) this.disposableBeans.remove(beanName)__		}_		destroyBean(beanName, disposableBean)__	};destroy,the,given,bean,delegates,to,code,destroy,bean,if,a,corresponding,disposable,bean,instance,is,found,param,bean,name,the,name,of,the,bean,see,destroy,bean;public,void,destroy,singleton,string,bean,name,remove,singleton,bean,name,disposable,bean,disposable,bean,synchronized,this,disposable,beans,disposable,bean,disposable,bean,this,disposable,beans,remove,bean,name,destroy,bean,bean,name,disposable,bean
DefaultSingletonBeanRegistry -> public void destroySingleton(String beanName);1503007895;Destroy the given bean. Delegates to {@code destroyBean}_if a corresponding disposable bean instance is found._@param beanName the name of the bean_@see #destroyBean;public void destroySingleton(String beanName) {_		_		removeSingleton(beanName)___		_		DisposableBean disposableBean__		synchronized (this.disposableBeans) {_			disposableBean = (DisposableBean) this.disposableBeans.remove(beanName)__		}_		destroyBean(beanName, disposableBean)__	};destroy,the,given,bean,delegates,to,code,destroy,bean,if,a,corresponding,disposable,bean,instance,is,found,param,bean,name,the,name,of,the,bean,see,destroy,bean;public,void,destroy,singleton,string,bean,name,remove,singleton,bean,name,disposable,bean,disposable,bean,synchronized,this,disposable,beans,disposable,bean,disposable,bean,this,disposable,beans,remove,bean,name,destroy,bean,bean,name,disposable,bean
DefaultSingletonBeanRegistry -> public void destroySingleton(String beanName);1518810557;Destroy the given bean. Delegates to {@code destroyBean}_if a corresponding disposable bean instance is found._@param beanName the name of the bean_@see #destroyBean;public void destroySingleton(String beanName) {_		_		removeSingleton(beanName)___		_		DisposableBean disposableBean__		synchronized (this.disposableBeans) {_			disposableBean = (DisposableBean) this.disposableBeans.remove(beanName)__		}_		destroyBean(beanName, disposableBean)__	};destroy,the,given,bean,delegates,to,code,destroy,bean,if,a,corresponding,disposable,bean,instance,is,found,param,bean,name,the,name,of,the,bean,see,destroy,bean;public,void,destroy,singleton,string,bean,name,remove,singleton,bean,name,disposable,bean,disposable,bean,synchronized,this,disposable,beans,disposable,bean,disposable,bean,this,disposable,beans,remove,bean,name,destroy,bean,bean,name,disposable,bean
DefaultSingletonBeanRegistry -> public void destroySingleton(String beanName);1521822873;Destroy the given bean. Delegates to {@code destroyBean}_if a corresponding disposable bean instance is found._@param beanName the name of the bean_@see #destroyBean;public void destroySingleton(String beanName) {_		_		removeSingleton(beanName)___		_		DisposableBean disposableBean__		synchronized (this.disposableBeans) {_			disposableBean = (DisposableBean) this.disposableBeans.remove(beanName)__		}_		destroyBean(beanName, disposableBean)__	};destroy,the,given,bean,delegates,to,code,destroy,bean,if,a,corresponding,disposable,bean,instance,is,found,param,bean,name,the,name,of,the,bean,see,destroy,bean;public,void,destroy,singleton,string,bean,name,remove,singleton,bean,name,disposable,bean,disposable,bean,synchronized,this,disposable,beans,disposable,bean,disposable,bean,this,disposable,beans,remove,bean,name,destroy,bean,bean,name,disposable,bean
DefaultSingletonBeanRegistry -> public void destroySingleton(String beanName);1521905451;Destroy the given bean. Delegates to {@code destroyBean}_if a corresponding disposable bean instance is found._@param beanName the name of the bean_@see #destroyBean;public void destroySingleton(String beanName) {_		_		removeSingleton(beanName)___		_		DisposableBean disposableBean__		synchronized (this.disposableBeans) {_			disposableBean = (DisposableBean) this.disposableBeans.remove(beanName)__		}_		destroyBean(beanName, disposableBean)__	};destroy,the,given,bean,delegates,to,code,destroy,bean,if,a,corresponding,disposable,bean,instance,is,found,param,bean,name,the,name,of,the,bean,see,destroy,bean;public,void,destroy,singleton,string,bean,name,remove,singleton,bean,name,disposable,bean,disposable,bean,synchronized,this,disposable,beans,disposable,bean,disposable,bean,this,disposable,beans,remove,bean,name,destroy,bean,bean,name,disposable,bean
DefaultSingletonBeanRegistry -> public void destroySingleton(String beanName);1527623493;Destroy the given bean. Delegates to {@code destroyBean}_if a corresponding disposable bean instance is found._@param beanName the name of the bean_@see #destroyBean;public void destroySingleton(String beanName) {_		_		removeSingleton(beanName)___		_		DisposableBean disposableBean__		synchronized (this.disposableBeans) {_			disposableBean = (DisposableBean) this.disposableBeans.remove(beanName)__		}_		destroyBean(beanName, disposableBean)__	};destroy,the,given,bean,delegates,to,code,destroy,bean,if,a,corresponding,disposable,bean,instance,is,found,param,bean,name,the,name,of,the,bean,see,destroy,bean;public,void,destroy,singleton,string,bean,name,remove,singleton,bean,name,disposable,bean,disposable,bean,synchronized,this,disposable,beans,disposable,bean,disposable,bean,this,disposable,beans,remove,bean,name,destroy,bean,bean,name,disposable,bean
DefaultSingletonBeanRegistry -> public void destroySingleton(String beanName);1530174524;Destroy the given bean. Delegates to {@code destroyBean}_if a corresponding disposable bean instance is found._@param beanName the name of the bean_@see #destroyBean;public void destroySingleton(String beanName) {_		_		removeSingleton(beanName)___		_		DisposableBean disposableBean__		synchronized (this.disposableBeans) {_			disposableBean = (DisposableBean) this.disposableBeans.remove(beanName)__		}_		destroyBean(beanName, disposableBean)__	};destroy,the,given,bean,delegates,to,code,destroy,bean,if,a,corresponding,disposable,bean,instance,is,found,param,bean,name,the,name,of,the,bean,see,destroy,bean;public,void,destroy,singleton,string,bean,name,remove,singleton,bean,name,disposable,bean,disposable,bean,synchronized,this,disposable,beans,disposable,bean,disposable,bean,this,disposable,beans,remove,bean,name,destroy,bean,bean,name,disposable,bean
DefaultSingletonBeanRegistry -> public void destroySingleton(String beanName);1532091916;Destroy the given bean. Delegates to {@code destroyBean}_if a corresponding disposable bean instance is found._@param beanName the name of the bean_@see #destroyBean;public void destroySingleton(String beanName) {_		_		removeSingleton(beanName)___		_		DisposableBean disposableBean__		synchronized (this.disposableBeans) {_			disposableBean = (DisposableBean) this.disposableBeans.remove(beanName)__		}_		destroyBean(beanName, disposableBean)__	};destroy,the,given,bean,delegates,to,code,destroy,bean,if,a,corresponding,disposable,bean,instance,is,found,param,bean,name,the,name,of,the,bean,see,destroy,bean;public,void,destroy,singleton,string,bean,name,remove,singleton,bean,name,disposable,bean,disposable,bean,synchronized,this,disposable,beans,disposable,bean,disposable,bean,this,disposable,beans,remove,bean,name,destroy,bean,bean,name,disposable,bean
DefaultSingletonBeanRegistry -> public void destroySingleton(String beanName);1532706365;Destroy the given bean. Delegates to {@code destroyBean}_if a corresponding disposable bean instance is found._@param beanName the name of the bean_@see #destroyBean;public void destroySingleton(String beanName) {_		_		removeSingleton(beanName)___		_		DisposableBean disposableBean__		synchronized (this.disposableBeans) {_			disposableBean = (DisposableBean) this.disposableBeans.remove(beanName)__		}_		destroyBean(beanName, disposableBean)__	};destroy,the,given,bean,delegates,to,code,destroy,bean,if,a,corresponding,disposable,bean,instance,is,found,param,bean,name,the,name,of,the,bean,see,destroy,bean;public,void,destroy,singleton,string,bean,name,remove,singleton,bean,name,disposable,bean,disposable,bean,synchronized,this,disposable,beans,disposable,bean,disposable,bean,this,disposable,beans,remove,bean,name,destroy,bean,bean,name,disposable,bean
DefaultSingletonBeanRegistry -> public Object getSingleton(String beanName, ObjectFactory<?> singletonFactory);1385412762;Return the (raw) singleton object registered under the given name,_creating and registering a new one if none registered yet._@param beanName the name of the bean_@param singletonFactory the ObjectFactory to lazily create the singleton_with, if necessary_@return the registered singleton object;public Object getSingleton(String beanName, ObjectFactory<?> singletonFactory) {_		Assert.notNull(beanName, "'beanName' must not be null")__		synchronized (this.singletonObjects) {_			Object singletonObject = this.singletonObjects.get(beanName)__			if (singletonObject == null) {_				if (this.singletonsCurrentlyInDestruction) {_					throw new BeanCreationNotAllowedException(beanName,_							"Singleton bean creation not allowed while the singletons of this factory are in destruction " +_							"(Do not request a bean from a BeanFactory in a destroy method implementation!)")__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Creating shared instance of singleton bean '" + beanName + "'")__				}_				beforeSingletonCreation(beanName)__				boolean recordSuppressedExceptions = (this.suppressedExceptions == null)__				if (recordSuppressedExceptions) {_					this.suppressedExceptions = new LinkedHashSet<Exception>()__				}_				try {_					singletonObject = singletonFactory.getObject()__				}_				catch (BeanCreationException ex) {_					if (recordSuppressedExceptions) {_						for (Exception suppressedException : this.suppressedExceptions) {_							ex.addRelatedCause(suppressedException)__						}_					}_					throw ex__				}_				finally {_					if (recordSuppressedExceptions) {_						this.suppressedExceptions = null__					}_					afterSingletonCreation(beanName)__				}_				addSingleton(beanName, singletonObject)__			}_			return (singletonObject != NULL_OBJECT ? singletonObject : null)__		}_	};return,the,raw,singleton,object,registered,under,the,given,name,creating,and,registering,a,new,one,if,none,registered,yet,param,bean,name,the,name,of,the,bean,param,singleton,factory,the,object,factory,to,lazily,create,the,singleton,with,if,necessary,return,the,registered,singleton,object;public,object,get,singleton,string,bean,name,object,factory,singleton,factory,assert,not,null,bean,name,bean,name,must,not,be,null,synchronized,this,singleton,objects,object,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,if,this,singletons,currently,in,destruction,throw,new,bean,creation,not,allowed,exception,bean,name,singleton,bean,creation,not,allowed,while,the,singletons,of,this,factory,are,in,destruction,do,not,request,a,bean,from,a,bean,factory,in,a,destroy,method,implementation,if,logger,is,debug,enabled,logger,debug,creating,shared,instance,of,singleton,bean,bean,name,before,singleton,creation,bean,name,boolean,record,suppressed,exceptions,this,suppressed,exceptions,null,if,record,suppressed,exceptions,this,suppressed,exceptions,new,linked,hash,set,exception,try,singleton,object,singleton,factory,get,object,catch,bean,creation,exception,ex,if,record,suppressed,exceptions,for,exception,suppressed,exception,this,suppressed,exceptions,ex,add,related,cause,suppressed,exception,throw,ex,finally,if,record,suppressed,exceptions,this,suppressed,exceptions,null,after,singleton,creation,bean,name,add,singleton,bean,name,singleton,object,return,singleton,object,singleton,object,null
DefaultSingletonBeanRegistry -> public Object getSingleton(String beanName, ObjectFactory<?> singletonFactory);1385984377;Return the (raw) singleton object registered under the given name,_creating and registering a new one if none registered yet._@param beanName the name of the bean_@param singletonFactory the ObjectFactory to lazily create the singleton_with, if necessary_@return the registered singleton object;public Object getSingleton(String beanName, ObjectFactory<?> singletonFactory) {_		Assert.notNull(beanName, "'beanName' must not be null")__		synchronized (this.singletonObjects) {_			Object singletonObject = this.singletonObjects.get(beanName)__			if (singletonObject == null) {_				if (this.singletonsCurrentlyInDestruction) {_					throw new BeanCreationNotAllowedException(beanName,_							"Singleton bean creation not allowed while the singletons of this factory are in destruction " +_							"(Do not request a bean from a BeanFactory in a destroy method implementation!)")__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Creating shared instance of singleton bean '" + beanName + "'")__				}_				beforeSingletonCreation(beanName)__				boolean recordSuppressedExceptions = (this.suppressedExceptions == null)__				if (recordSuppressedExceptions) {_					this.suppressedExceptions = new LinkedHashSet<Exception>()__				}_				try {_					singletonObject = singletonFactory.getObject()__				}_				catch (BeanCreationException ex) {_					if (recordSuppressedExceptions) {_						for (Exception suppressedException : this.suppressedExceptions) {_							ex.addRelatedCause(suppressedException)__						}_					}_					throw ex__				}_				finally {_					if (recordSuppressedExceptions) {_						this.suppressedExceptions = null__					}_					afterSingletonCreation(beanName)__				}_				addSingleton(beanName, singletonObject)__			}_			return (singletonObject != NULL_OBJECT ? singletonObject : null)__		}_	};return,the,raw,singleton,object,registered,under,the,given,name,creating,and,registering,a,new,one,if,none,registered,yet,param,bean,name,the,name,of,the,bean,param,singleton,factory,the,object,factory,to,lazily,create,the,singleton,with,if,necessary,return,the,registered,singleton,object;public,object,get,singleton,string,bean,name,object,factory,singleton,factory,assert,not,null,bean,name,bean,name,must,not,be,null,synchronized,this,singleton,objects,object,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,if,this,singletons,currently,in,destruction,throw,new,bean,creation,not,allowed,exception,bean,name,singleton,bean,creation,not,allowed,while,the,singletons,of,this,factory,are,in,destruction,do,not,request,a,bean,from,a,bean,factory,in,a,destroy,method,implementation,if,logger,is,debug,enabled,logger,debug,creating,shared,instance,of,singleton,bean,bean,name,before,singleton,creation,bean,name,boolean,record,suppressed,exceptions,this,suppressed,exceptions,null,if,record,suppressed,exceptions,this,suppressed,exceptions,new,linked,hash,set,exception,try,singleton,object,singleton,factory,get,object,catch,bean,creation,exception,ex,if,record,suppressed,exceptions,for,exception,suppressed,exception,this,suppressed,exceptions,ex,add,related,cause,suppressed,exception,throw,ex,finally,if,record,suppressed,exceptions,this,suppressed,exceptions,null,after,singleton,creation,bean,name,add,singleton,bean,name,singleton,object,return,singleton,object,singleton,object,null
DefaultSingletonBeanRegistry -> public Object getSingleton(String beanName, ObjectFactory<?> singletonFactory);1405430015;Return the (raw) singleton object registered under the given name,_creating and registering a new one if none registered yet._@param beanName the name of the bean_@param singletonFactory the ObjectFactory to lazily create the singleton_with, if necessary_@return the registered singleton object;public Object getSingleton(String beanName, ObjectFactory<?> singletonFactory) {_		Assert.notNull(beanName, "'beanName' must not be null")__		synchronized (this.singletonObjects) {_			Object singletonObject = this.singletonObjects.get(beanName)__			if (singletonObject == null) {_				if (this.singletonsCurrentlyInDestruction) {_					throw new BeanCreationNotAllowedException(beanName,_							"Singleton bean creation not allowed while the singletons of this factory are in destruction " +_							"(Do not request a bean from a BeanFactory in a destroy method implementation!)")__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Creating shared instance of singleton bean '" + beanName + "'")__				}_				beforeSingletonCreation(beanName)__				boolean recordSuppressedExceptions = (this.suppressedExceptions == null)__				if (recordSuppressedExceptions) {_					this.suppressedExceptions = new LinkedHashSet<Exception>()__				}_				try {_					singletonObject = singletonFactory.getObject()__				}_				catch (BeanCreationException ex) {_					if (recordSuppressedExceptions) {_						for (Exception suppressedException : this.suppressedExceptions) {_							ex.addRelatedCause(suppressedException)__						}_					}_					throw ex__				}_				finally {_					if (recordSuppressedExceptions) {_						this.suppressedExceptions = null__					}_					afterSingletonCreation(beanName)__				}_				addSingleton(beanName, singletonObject)__			}_			return (singletonObject != NULL_OBJECT ? singletonObject : null)__		}_	};return,the,raw,singleton,object,registered,under,the,given,name,creating,and,registering,a,new,one,if,none,registered,yet,param,bean,name,the,name,of,the,bean,param,singleton,factory,the,object,factory,to,lazily,create,the,singleton,with,if,necessary,return,the,registered,singleton,object;public,object,get,singleton,string,bean,name,object,factory,singleton,factory,assert,not,null,bean,name,bean,name,must,not,be,null,synchronized,this,singleton,objects,object,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,if,this,singletons,currently,in,destruction,throw,new,bean,creation,not,allowed,exception,bean,name,singleton,bean,creation,not,allowed,while,the,singletons,of,this,factory,are,in,destruction,do,not,request,a,bean,from,a,bean,factory,in,a,destroy,method,implementation,if,logger,is,debug,enabled,logger,debug,creating,shared,instance,of,singleton,bean,bean,name,before,singleton,creation,bean,name,boolean,record,suppressed,exceptions,this,suppressed,exceptions,null,if,record,suppressed,exceptions,this,suppressed,exceptions,new,linked,hash,set,exception,try,singleton,object,singleton,factory,get,object,catch,bean,creation,exception,ex,if,record,suppressed,exceptions,for,exception,suppressed,exception,this,suppressed,exceptions,ex,add,related,cause,suppressed,exception,throw,ex,finally,if,record,suppressed,exceptions,this,suppressed,exceptions,null,after,singleton,creation,bean,name,add,singleton,bean,name,singleton,object,return,singleton,object,singleton,object,null
DefaultSingletonBeanRegistry -> public Object getSingleton(String beanName, ObjectFactory<?> singletonFactory);1408528936;Return the (raw) singleton object registered under the given name,_creating and registering a new one if none registered yet._@param beanName the name of the bean_@param singletonFactory the ObjectFactory to lazily create the singleton_with, if necessary_@return the registered singleton object;public Object getSingleton(String beanName, ObjectFactory<?> singletonFactory) {_		Assert.notNull(beanName, "'beanName' must not be null")__		synchronized (this.singletonObjects) {_			Object singletonObject = this.singletonObjects.get(beanName)__			if (singletonObject == null) {_				if (this.singletonsCurrentlyInDestruction) {_					throw new BeanCreationNotAllowedException(beanName,_							"Singleton bean creation not allowed while the singletons of this factory are in destruction " +_							"(Do not request a bean from a BeanFactory in a destroy method implementation!)")__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Creating shared instance of singleton bean '" + beanName + "'")__				}_				beforeSingletonCreation(beanName)__				boolean recordSuppressedExceptions = (this.suppressedExceptions == null)__				if (recordSuppressedExceptions) {_					this.suppressedExceptions = new LinkedHashSet<Exception>()__				}_				try {_					singletonObject = singletonFactory.getObject()__				}_				catch (BeanCreationException ex) {_					if (recordSuppressedExceptions) {_						for (Exception suppressedException : this.suppressedExceptions) {_							ex.addRelatedCause(suppressedException)__						}_					}_					throw ex__				}_				finally {_					if (recordSuppressedExceptions) {_						this.suppressedExceptions = null__					}_					afterSingletonCreation(beanName)__				}_				addSingleton(beanName, singletonObject)__			}_			return (singletonObject != NULL_OBJECT ? singletonObject : null)__		}_	};return,the,raw,singleton,object,registered,under,the,given,name,creating,and,registering,a,new,one,if,none,registered,yet,param,bean,name,the,name,of,the,bean,param,singleton,factory,the,object,factory,to,lazily,create,the,singleton,with,if,necessary,return,the,registered,singleton,object;public,object,get,singleton,string,bean,name,object,factory,singleton,factory,assert,not,null,bean,name,bean,name,must,not,be,null,synchronized,this,singleton,objects,object,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,if,this,singletons,currently,in,destruction,throw,new,bean,creation,not,allowed,exception,bean,name,singleton,bean,creation,not,allowed,while,the,singletons,of,this,factory,are,in,destruction,do,not,request,a,bean,from,a,bean,factory,in,a,destroy,method,implementation,if,logger,is,debug,enabled,logger,debug,creating,shared,instance,of,singleton,bean,bean,name,before,singleton,creation,bean,name,boolean,record,suppressed,exceptions,this,suppressed,exceptions,null,if,record,suppressed,exceptions,this,suppressed,exceptions,new,linked,hash,set,exception,try,singleton,object,singleton,factory,get,object,catch,bean,creation,exception,ex,if,record,suppressed,exceptions,for,exception,suppressed,exception,this,suppressed,exceptions,ex,add,related,cause,suppressed,exception,throw,ex,finally,if,record,suppressed,exceptions,this,suppressed,exceptions,null,after,singleton,creation,bean,name,add,singleton,bean,name,singleton,object,return,singleton,object,singleton,object,null
DefaultSingletonBeanRegistry -> public Object getSingleton(String beanName, ObjectFactory<?> singletonFactory);1408624154;Return the (raw) singleton object registered under the given name,_creating and registering a new one if none registered yet._@param beanName the name of the bean_@param singletonFactory the ObjectFactory to lazily create the singleton_with, if necessary_@return the registered singleton object;public Object getSingleton(String beanName, ObjectFactory<?> singletonFactory) {_		Assert.notNull(beanName, "'beanName' must not be null")__		synchronized (this.singletonObjects) {_			Object singletonObject = this.singletonObjects.get(beanName)__			if (singletonObject == null) {_				if (this.singletonsCurrentlyInDestruction) {_					throw new BeanCreationNotAllowedException(beanName,_							"Singleton bean creation not allowed while the singletons of this factory are in destruction " +_							"(Do not request a bean from a BeanFactory in a destroy method implementation!)")__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Creating shared instance of singleton bean '" + beanName + "'")__				}_				beforeSingletonCreation(beanName)__				boolean recordSuppressedExceptions = (this.suppressedExceptions == null)__				if (recordSuppressedExceptions) {_					this.suppressedExceptions = new LinkedHashSet<Exception>()__				}_				try {_					singletonObject = singletonFactory.getObject()__				}_				catch (BeanCreationException ex) {_					if (recordSuppressedExceptions) {_						for (Exception suppressedException : this.suppressedExceptions) {_							ex.addRelatedCause(suppressedException)__						}_					}_					throw ex__				}_				finally {_					if (recordSuppressedExceptions) {_						this.suppressedExceptions = null__					}_					afterSingletonCreation(beanName)__				}_				addSingleton(beanName, singletonObject)__			}_			return (singletonObject != NULL_OBJECT ? singletonObject : null)__		}_	};return,the,raw,singleton,object,registered,under,the,given,name,creating,and,registering,a,new,one,if,none,registered,yet,param,bean,name,the,name,of,the,bean,param,singleton,factory,the,object,factory,to,lazily,create,the,singleton,with,if,necessary,return,the,registered,singleton,object;public,object,get,singleton,string,bean,name,object,factory,singleton,factory,assert,not,null,bean,name,bean,name,must,not,be,null,synchronized,this,singleton,objects,object,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,if,this,singletons,currently,in,destruction,throw,new,bean,creation,not,allowed,exception,bean,name,singleton,bean,creation,not,allowed,while,the,singletons,of,this,factory,are,in,destruction,do,not,request,a,bean,from,a,bean,factory,in,a,destroy,method,implementation,if,logger,is,debug,enabled,logger,debug,creating,shared,instance,of,singleton,bean,bean,name,before,singleton,creation,bean,name,boolean,record,suppressed,exceptions,this,suppressed,exceptions,null,if,record,suppressed,exceptions,this,suppressed,exceptions,new,linked,hash,set,exception,try,singleton,object,singleton,factory,get,object,catch,bean,creation,exception,ex,if,record,suppressed,exceptions,for,exception,suppressed,exception,this,suppressed,exceptions,ex,add,related,cause,suppressed,exception,throw,ex,finally,if,record,suppressed,exceptions,this,suppressed,exceptions,null,after,singleton,creation,bean,name,add,singleton,bean,name,singleton,object,return,singleton,object,singleton,object,null
DefaultSingletonBeanRegistry -> public Object getSingleton(String beanName, ObjectFactory<?> singletonFactory);1409688815;Return the (raw) singleton object registered under the given name,_creating and registering a new one if none registered yet._@param beanName the name of the bean_@param singletonFactory the ObjectFactory to lazily create the singleton_with, if necessary_@return the registered singleton object;public Object getSingleton(String beanName, ObjectFactory<?> singletonFactory) {_		Assert.notNull(beanName, "'beanName' must not be null")__		synchronized (this.singletonObjects) {_			Object singletonObject = this.singletonObjects.get(beanName)__			if (singletonObject == null) {_				if (this.singletonsCurrentlyInDestruction) {_					throw new BeanCreationNotAllowedException(beanName,_							"Singleton bean creation not allowed while the singletons of this factory are in destruction " +_							"(Do not request a bean from a BeanFactory in a destroy method implementation!)")__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Creating shared instance of singleton bean '" + beanName + "'")__				}_				beforeSingletonCreation(beanName)__				boolean newSingleton = false__				boolean recordSuppressedExceptions = (this.suppressedExceptions == null)__				if (recordSuppressedExceptions) {_					this.suppressedExceptions = new LinkedHashSet<Exception>()__				}_				try {_					singletonObject = singletonFactory.getObject()__					newSingleton = true__				}_				catch (IllegalStateException ex) {_					_					_					singletonObject = this.singletonObjects.get(beanName)__					if (singletonObject == null) {_						throw ex__					}_				}_				catch (BeanCreationException ex) {_					if (recordSuppressedExceptions) {_						for (Exception suppressedException : this.suppressedExceptions) {_							ex.addRelatedCause(suppressedException)__						}_					}_					throw ex__				}_				finally {_					if (recordSuppressedExceptions) {_						this.suppressedExceptions = null__					}_					afterSingletonCreation(beanName)__				}_				if (newSingleton) {_					addSingleton(beanName, singletonObject)__				}_			}_			return (singletonObject != NULL_OBJECT ? singletonObject : null)__		}_	};return,the,raw,singleton,object,registered,under,the,given,name,creating,and,registering,a,new,one,if,none,registered,yet,param,bean,name,the,name,of,the,bean,param,singleton,factory,the,object,factory,to,lazily,create,the,singleton,with,if,necessary,return,the,registered,singleton,object;public,object,get,singleton,string,bean,name,object,factory,singleton,factory,assert,not,null,bean,name,bean,name,must,not,be,null,synchronized,this,singleton,objects,object,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,if,this,singletons,currently,in,destruction,throw,new,bean,creation,not,allowed,exception,bean,name,singleton,bean,creation,not,allowed,while,the,singletons,of,this,factory,are,in,destruction,do,not,request,a,bean,from,a,bean,factory,in,a,destroy,method,implementation,if,logger,is,debug,enabled,logger,debug,creating,shared,instance,of,singleton,bean,bean,name,before,singleton,creation,bean,name,boolean,new,singleton,false,boolean,record,suppressed,exceptions,this,suppressed,exceptions,null,if,record,suppressed,exceptions,this,suppressed,exceptions,new,linked,hash,set,exception,try,singleton,object,singleton,factory,get,object,new,singleton,true,catch,illegal,state,exception,ex,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,throw,ex,catch,bean,creation,exception,ex,if,record,suppressed,exceptions,for,exception,suppressed,exception,this,suppressed,exceptions,ex,add,related,cause,suppressed,exception,throw,ex,finally,if,record,suppressed,exceptions,this,suppressed,exceptions,null,after,singleton,creation,bean,name,if,new,singleton,add,singleton,bean,name,singleton,object,return,singleton,object,singleton,object,null
DefaultSingletonBeanRegistry -> public Object getSingleton(String beanName, ObjectFactory<?> singletonFactory);1417966231;Return the (raw) singleton object registered under the given name,_creating and registering a new one if none registered yet._@param beanName the name of the bean_@param singletonFactory the ObjectFactory to lazily create the singleton_with, if necessary_@return the registered singleton object;public Object getSingleton(String beanName, ObjectFactory<?> singletonFactory) {_		Assert.notNull(beanName, "'beanName' must not be null")__		synchronized (this.singletonObjects) {_			Object singletonObject = this.singletonObjects.get(beanName)__			if (singletonObject == null) {_				if (this.singletonsCurrentlyInDestruction) {_					throw new BeanCreationNotAllowedException(beanName,_							"Singleton bean creation not allowed while the singletons of this factory are in destruction " +_							"(Do not request a bean from a BeanFactory in a destroy method implementation!)")__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Creating shared instance of singleton bean '" + beanName + "'")__				}_				beforeSingletonCreation(beanName)__				boolean newSingleton = false__				boolean recordSuppressedExceptions = (this.suppressedExceptions == null)__				if (recordSuppressedExceptions) {_					this.suppressedExceptions = new LinkedHashSet<Exception>()__				}_				try {_					singletonObject = singletonFactory.getObject()__					newSingleton = true__				}_				catch (IllegalStateException ex) {_					_					_					singletonObject = this.singletonObjects.get(beanName)__					if (singletonObject == null) {_						throw ex__					}_				}_				catch (BeanCreationException ex) {_					if (recordSuppressedExceptions) {_						for (Exception suppressedException : this.suppressedExceptions) {_							ex.addRelatedCause(suppressedException)__						}_					}_					throw ex__				}_				finally {_					if (recordSuppressedExceptions) {_						this.suppressedExceptions = null__					}_					afterSingletonCreation(beanName)__				}_				if (newSingleton) {_					addSingleton(beanName, singletonObject)__				}_			}_			return (singletonObject != NULL_OBJECT ? singletonObject : null)__		}_	};return,the,raw,singleton,object,registered,under,the,given,name,creating,and,registering,a,new,one,if,none,registered,yet,param,bean,name,the,name,of,the,bean,param,singleton,factory,the,object,factory,to,lazily,create,the,singleton,with,if,necessary,return,the,registered,singleton,object;public,object,get,singleton,string,bean,name,object,factory,singleton,factory,assert,not,null,bean,name,bean,name,must,not,be,null,synchronized,this,singleton,objects,object,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,if,this,singletons,currently,in,destruction,throw,new,bean,creation,not,allowed,exception,bean,name,singleton,bean,creation,not,allowed,while,the,singletons,of,this,factory,are,in,destruction,do,not,request,a,bean,from,a,bean,factory,in,a,destroy,method,implementation,if,logger,is,debug,enabled,logger,debug,creating,shared,instance,of,singleton,bean,bean,name,before,singleton,creation,bean,name,boolean,new,singleton,false,boolean,record,suppressed,exceptions,this,suppressed,exceptions,null,if,record,suppressed,exceptions,this,suppressed,exceptions,new,linked,hash,set,exception,try,singleton,object,singleton,factory,get,object,new,singleton,true,catch,illegal,state,exception,ex,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,throw,ex,catch,bean,creation,exception,ex,if,record,suppressed,exceptions,for,exception,suppressed,exception,this,suppressed,exceptions,ex,add,related,cause,suppressed,exception,throw,ex,finally,if,record,suppressed,exceptions,this,suppressed,exceptions,null,after,singleton,creation,bean,name,if,new,singleton,add,singleton,bean,name,singleton,object,return,singleton,object,singleton,object,null
DefaultSingletonBeanRegistry -> public Object getSingleton(String beanName, ObjectFactory<?> singletonFactory);1424972106;Return the (raw) singleton object registered under the given name,_creating and registering a new one if none registered yet._@param beanName the name of the bean_@param singletonFactory the ObjectFactory to lazily create the singleton_with, if necessary_@return the registered singleton object;public Object getSingleton(String beanName, ObjectFactory<?> singletonFactory) {_		Assert.notNull(beanName, "'beanName' must not be null")__		synchronized (this.singletonObjects) {_			Object singletonObject = this.singletonObjects.get(beanName)__			if (singletonObject == null) {_				if (this.singletonsCurrentlyInDestruction) {_					throw new BeanCreationNotAllowedException(beanName,_							"Singleton bean creation not allowed while the singletons of this factory are in destruction " +_							"(Do not request a bean from a BeanFactory in a destroy method implementation!)")__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Creating shared instance of singleton bean '" + beanName + "'")__				}_				beforeSingletonCreation(beanName)__				boolean newSingleton = false__				boolean recordSuppressedExceptions = (this.suppressedExceptions == null)__				if (recordSuppressedExceptions) {_					this.suppressedExceptions = new LinkedHashSet<Exception>()__				}_				try {_					singletonObject = singletonFactory.getObject()__					newSingleton = true__				}_				catch (IllegalStateException ex) {_					_					_					singletonObject = this.singletonObjects.get(beanName)__					if (singletonObject == null) {_						throw ex__					}_				}_				catch (BeanCreationException ex) {_					if (recordSuppressedExceptions) {_						for (Exception suppressedException : this.suppressedExceptions) {_							ex.addRelatedCause(suppressedException)__						}_					}_					throw ex__				}_				finally {_					if (recordSuppressedExceptions) {_						this.suppressedExceptions = null__					}_					afterSingletonCreation(beanName)__				}_				if (newSingleton) {_					addSingleton(beanName, singletonObject)__				}_			}_			return (singletonObject != NULL_OBJECT ? singletonObject : null)__		}_	};return,the,raw,singleton,object,registered,under,the,given,name,creating,and,registering,a,new,one,if,none,registered,yet,param,bean,name,the,name,of,the,bean,param,singleton,factory,the,object,factory,to,lazily,create,the,singleton,with,if,necessary,return,the,registered,singleton,object;public,object,get,singleton,string,bean,name,object,factory,singleton,factory,assert,not,null,bean,name,bean,name,must,not,be,null,synchronized,this,singleton,objects,object,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,if,this,singletons,currently,in,destruction,throw,new,bean,creation,not,allowed,exception,bean,name,singleton,bean,creation,not,allowed,while,the,singletons,of,this,factory,are,in,destruction,do,not,request,a,bean,from,a,bean,factory,in,a,destroy,method,implementation,if,logger,is,debug,enabled,logger,debug,creating,shared,instance,of,singleton,bean,bean,name,before,singleton,creation,bean,name,boolean,new,singleton,false,boolean,record,suppressed,exceptions,this,suppressed,exceptions,null,if,record,suppressed,exceptions,this,suppressed,exceptions,new,linked,hash,set,exception,try,singleton,object,singleton,factory,get,object,new,singleton,true,catch,illegal,state,exception,ex,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,throw,ex,catch,bean,creation,exception,ex,if,record,suppressed,exceptions,for,exception,suppressed,exception,this,suppressed,exceptions,ex,add,related,cause,suppressed,exception,throw,ex,finally,if,record,suppressed,exceptions,this,suppressed,exceptions,null,after,singleton,creation,bean,name,if,new,singleton,add,singleton,bean,name,singleton,object,return,singleton,object,singleton,object,null
DefaultSingletonBeanRegistry -> public Object getSingleton(String beanName, ObjectFactory<?> singletonFactory);1447399860;Return the (raw) singleton object registered under the given name,_creating and registering a new one if none registered yet._@param beanName the name of the bean_@param singletonFactory the ObjectFactory to lazily create the singleton_with, if necessary_@return the registered singleton object;public Object getSingleton(String beanName, ObjectFactory<?> singletonFactory) {_		Assert.notNull(beanName, "'beanName' must not be null")__		synchronized (this.singletonObjects) {_			Object singletonObject = this.singletonObjects.get(beanName)__			if (singletonObject == null) {_				if (this.singletonsCurrentlyInDestruction) {_					throw new BeanCreationNotAllowedException(beanName,_							"Singleton bean creation not allowed while the singletons of this factory are in destruction " +_							"(Do not request a bean from a BeanFactory in a destroy method implementation!)")__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Creating shared instance of singleton bean '" + beanName + "'")__				}_				beforeSingletonCreation(beanName)__				boolean newSingleton = false__				boolean recordSuppressedExceptions = (this.suppressedExceptions == null)__				if (recordSuppressedExceptions) {_					this.suppressedExceptions = new LinkedHashSet<Exception>()__				}_				try {_					singletonObject = singletonFactory.getObject()__					newSingleton = true__				}_				catch (IllegalStateException ex) {_					_					_					singletonObject = this.singletonObjects.get(beanName)__					if (singletonObject == null) {_						throw ex__					}_				}_				catch (BeanCreationException ex) {_					if (recordSuppressedExceptions) {_						for (Exception suppressedException : this.suppressedExceptions) {_							ex.addRelatedCause(suppressedException)__						}_					}_					throw ex__				}_				finally {_					if (recordSuppressedExceptions) {_						this.suppressedExceptions = null__					}_					afterSingletonCreation(beanName)__				}_				if (newSingleton) {_					addSingleton(beanName, singletonObject)__				}_			}_			return (singletonObject != NULL_OBJECT ? singletonObject : null)__		}_	};return,the,raw,singleton,object,registered,under,the,given,name,creating,and,registering,a,new,one,if,none,registered,yet,param,bean,name,the,name,of,the,bean,param,singleton,factory,the,object,factory,to,lazily,create,the,singleton,with,if,necessary,return,the,registered,singleton,object;public,object,get,singleton,string,bean,name,object,factory,singleton,factory,assert,not,null,bean,name,bean,name,must,not,be,null,synchronized,this,singleton,objects,object,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,if,this,singletons,currently,in,destruction,throw,new,bean,creation,not,allowed,exception,bean,name,singleton,bean,creation,not,allowed,while,the,singletons,of,this,factory,are,in,destruction,do,not,request,a,bean,from,a,bean,factory,in,a,destroy,method,implementation,if,logger,is,debug,enabled,logger,debug,creating,shared,instance,of,singleton,bean,bean,name,before,singleton,creation,bean,name,boolean,new,singleton,false,boolean,record,suppressed,exceptions,this,suppressed,exceptions,null,if,record,suppressed,exceptions,this,suppressed,exceptions,new,linked,hash,set,exception,try,singleton,object,singleton,factory,get,object,new,singleton,true,catch,illegal,state,exception,ex,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,throw,ex,catch,bean,creation,exception,ex,if,record,suppressed,exceptions,for,exception,suppressed,exception,this,suppressed,exceptions,ex,add,related,cause,suppressed,exception,throw,ex,finally,if,record,suppressed,exceptions,this,suppressed,exceptions,null,after,singleton,creation,bean,name,if,new,singleton,add,singleton,bean,name,singleton,object,return,singleton,object,singleton,object,null
DefaultSingletonBeanRegistry -> public Object getSingleton(String beanName, ObjectFactory<?> singletonFactory);1467730834;Return the (raw) singleton object registered under the given name,_creating and registering a new one if none registered yet._@param beanName the name of the bean_@param singletonFactory the ObjectFactory to lazily create the singleton_with, if necessary_@return the registered singleton object;public Object getSingleton(String beanName, ObjectFactory<?> singletonFactory) {_		Assert.notNull(beanName, "'beanName' must not be null")__		synchronized (this.singletonObjects) {_			Object singletonObject = this.singletonObjects.get(beanName)__			if (singletonObject == null) {_				if (this.singletonsCurrentlyInDestruction) {_					throw new BeanCreationNotAllowedException(beanName,_							"Singleton bean creation not allowed while the singletons of this factory are in destruction " +_							"(Do not request a bean from a BeanFactory in a destroy method implementation!)")__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Creating shared instance of singleton bean '" + beanName + "'")__				}_				beforeSingletonCreation(beanName)__				boolean newSingleton = false__				boolean recordSuppressedExceptions = (this.suppressedExceptions == null)__				if (recordSuppressedExceptions) {_					this.suppressedExceptions = new LinkedHashSet<>()__				}_				try {_					singletonObject = singletonFactory.getObject()__					newSingleton = true__				}_				catch (IllegalStateException ex) {_					_					_					singletonObject = this.singletonObjects.get(beanName)__					if (singletonObject == null) {_						throw ex__					}_				}_				catch (BeanCreationException ex) {_					if (recordSuppressedExceptions) {_						for (Exception suppressedException : this.suppressedExceptions) {_							ex.addRelatedCause(suppressedException)__						}_					}_					throw ex__				}_				finally {_					if (recordSuppressedExceptions) {_						this.suppressedExceptions = null__					}_					afterSingletonCreation(beanName)__				}_				if (newSingleton) {_					addSingleton(beanName, singletonObject)__				}_			}_			return (singletonObject != NULL_OBJECT ? singletonObject : null)__		}_	};return,the,raw,singleton,object,registered,under,the,given,name,creating,and,registering,a,new,one,if,none,registered,yet,param,bean,name,the,name,of,the,bean,param,singleton,factory,the,object,factory,to,lazily,create,the,singleton,with,if,necessary,return,the,registered,singleton,object;public,object,get,singleton,string,bean,name,object,factory,singleton,factory,assert,not,null,bean,name,bean,name,must,not,be,null,synchronized,this,singleton,objects,object,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,if,this,singletons,currently,in,destruction,throw,new,bean,creation,not,allowed,exception,bean,name,singleton,bean,creation,not,allowed,while,the,singletons,of,this,factory,are,in,destruction,do,not,request,a,bean,from,a,bean,factory,in,a,destroy,method,implementation,if,logger,is,debug,enabled,logger,debug,creating,shared,instance,of,singleton,bean,bean,name,before,singleton,creation,bean,name,boolean,new,singleton,false,boolean,record,suppressed,exceptions,this,suppressed,exceptions,null,if,record,suppressed,exceptions,this,suppressed,exceptions,new,linked,hash,set,try,singleton,object,singleton,factory,get,object,new,singleton,true,catch,illegal,state,exception,ex,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,throw,ex,catch,bean,creation,exception,ex,if,record,suppressed,exceptions,for,exception,suppressed,exception,this,suppressed,exceptions,ex,add,related,cause,suppressed,exception,throw,ex,finally,if,record,suppressed,exceptions,this,suppressed,exceptions,null,after,singleton,creation,bean,name,if,new,singleton,add,singleton,bean,name,singleton,object,return,singleton,object,singleton,object,null
DefaultSingletonBeanRegistry -> public Object getSingleton(String beanName, ObjectFactory<?> singletonFactory);1467810738;Return the (raw) singleton object registered under the given name,_creating and registering a new one if none registered yet._@param beanName the name of the bean_@param singletonFactory the ObjectFactory to lazily create the singleton_with, if necessary_@return the registered singleton object;public Object getSingleton(String beanName, ObjectFactory<?> singletonFactory) {_		Assert.notNull(beanName, "'beanName' must not be null")__		synchronized (this.singletonObjects) {_			Object singletonObject = this.singletonObjects.get(beanName)__			if (singletonObject == null) {_				if (this.singletonsCurrentlyInDestruction) {_					throw new BeanCreationNotAllowedException(beanName,_							"Singleton bean creation not allowed while the singletons of this factory are in destruction " +_							"(Do not request a bean from a BeanFactory in a destroy method implementation!)")__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Creating shared instance of singleton bean '" + beanName + "'")__				}_				beforeSingletonCreation(beanName)__				boolean newSingleton = false__				boolean recordSuppressedExceptions = (this.suppressedExceptions == null)__				if (recordSuppressedExceptions) {_					this.suppressedExceptions = new LinkedHashSet<>()__				}_				try {_					singletonObject = singletonFactory.getObject()__					newSingleton = true__				}_				catch (IllegalStateException ex) {_					_					_					singletonObject = this.singletonObjects.get(beanName)__					if (singletonObject == null) {_						throw ex__					}_				}_				catch (BeanCreationException ex) {_					if (recordSuppressedExceptions) {_						for (Exception suppressedException : this.suppressedExceptions) {_							ex.addRelatedCause(suppressedException)__						}_					}_					throw ex__				}_				finally {_					if (recordSuppressedExceptions) {_						this.suppressedExceptions = null__					}_					afterSingletonCreation(beanName)__				}_				if (newSingleton) {_					addSingleton(beanName, singletonObject)__				}_			}_			return (singletonObject != NULL_OBJECT ? singletonObject : null)__		}_	};return,the,raw,singleton,object,registered,under,the,given,name,creating,and,registering,a,new,one,if,none,registered,yet,param,bean,name,the,name,of,the,bean,param,singleton,factory,the,object,factory,to,lazily,create,the,singleton,with,if,necessary,return,the,registered,singleton,object;public,object,get,singleton,string,bean,name,object,factory,singleton,factory,assert,not,null,bean,name,bean,name,must,not,be,null,synchronized,this,singleton,objects,object,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,if,this,singletons,currently,in,destruction,throw,new,bean,creation,not,allowed,exception,bean,name,singleton,bean,creation,not,allowed,while,the,singletons,of,this,factory,are,in,destruction,do,not,request,a,bean,from,a,bean,factory,in,a,destroy,method,implementation,if,logger,is,debug,enabled,logger,debug,creating,shared,instance,of,singleton,bean,bean,name,before,singleton,creation,bean,name,boolean,new,singleton,false,boolean,record,suppressed,exceptions,this,suppressed,exceptions,null,if,record,suppressed,exceptions,this,suppressed,exceptions,new,linked,hash,set,try,singleton,object,singleton,factory,get,object,new,singleton,true,catch,illegal,state,exception,ex,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,throw,ex,catch,bean,creation,exception,ex,if,record,suppressed,exceptions,for,exception,suppressed,exception,this,suppressed,exceptions,ex,add,related,cause,suppressed,exception,throw,ex,finally,if,record,suppressed,exceptions,this,suppressed,exceptions,null,after,singleton,creation,bean,name,if,new,singleton,add,singleton,bean,name,singleton,object,return,singleton,object,singleton,object,null
DefaultSingletonBeanRegistry -> public Object getSingleton(String beanName, ObjectFactory<?> singletonFactory);1469561191;Return the (raw) singleton object registered under the given name,_creating and registering a new one if none registered yet._@param beanName the name of the bean_@param singletonFactory the ObjectFactory to lazily create the singleton_with, if necessary_@return the registered singleton object;public Object getSingleton(String beanName, ObjectFactory<?> singletonFactory) {_		Assert.notNull(beanName, "'beanName' must not be null")__		synchronized (this.singletonObjects) {_			Object singletonObject = this.singletonObjects.get(beanName)__			if (singletonObject == null) {_				if (this.singletonsCurrentlyInDestruction) {_					throw new BeanCreationNotAllowedException(beanName,_							"Singleton bean creation not allowed while the singletons of this factory are in destruction " +_							"(Do not request a bean from a BeanFactory in a destroy method implementation!)")__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Creating shared instance of singleton bean '" + beanName + "'")__				}_				beforeSingletonCreation(beanName)__				boolean newSingleton = false__				boolean recordSuppressedExceptions = (this.suppressedExceptions == null)__				if (recordSuppressedExceptions) {_					this.suppressedExceptions = new LinkedHashSet<>()__				}_				try {_					singletonObject = singletonFactory.getObject()__					newSingleton = true__				}_				catch (IllegalStateException ex) {_					_					_					singletonObject = this.singletonObjects.get(beanName)__					if (singletonObject == null) {_						throw ex__					}_				}_				catch (BeanCreationException ex) {_					if (recordSuppressedExceptions) {_						for (Exception suppressedException : this.suppressedExceptions) {_							ex.addRelatedCause(suppressedException)__						}_					}_					throw ex__				}_				finally {_					if (recordSuppressedExceptions) {_						this.suppressedExceptions = null__					}_					afterSingletonCreation(beanName)__				}_				if (newSingleton) {_					addSingleton(beanName, singletonObject)__				}_			}_			return (singletonObject != NULL_OBJECT ? singletonObject : null)__		}_	};return,the,raw,singleton,object,registered,under,the,given,name,creating,and,registering,a,new,one,if,none,registered,yet,param,bean,name,the,name,of,the,bean,param,singleton,factory,the,object,factory,to,lazily,create,the,singleton,with,if,necessary,return,the,registered,singleton,object;public,object,get,singleton,string,bean,name,object,factory,singleton,factory,assert,not,null,bean,name,bean,name,must,not,be,null,synchronized,this,singleton,objects,object,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,if,this,singletons,currently,in,destruction,throw,new,bean,creation,not,allowed,exception,bean,name,singleton,bean,creation,not,allowed,while,the,singletons,of,this,factory,are,in,destruction,do,not,request,a,bean,from,a,bean,factory,in,a,destroy,method,implementation,if,logger,is,debug,enabled,logger,debug,creating,shared,instance,of,singleton,bean,bean,name,before,singleton,creation,bean,name,boolean,new,singleton,false,boolean,record,suppressed,exceptions,this,suppressed,exceptions,null,if,record,suppressed,exceptions,this,suppressed,exceptions,new,linked,hash,set,try,singleton,object,singleton,factory,get,object,new,singleton,true,catch,illegal,state,exception,ex,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,throw,ex,catch,bean,creation,exception,ex,if,record,suppressed,exceptions,for,exception,suppressed,exception,this,suppressed,exceptions,ex,add,related,cause,suppressed,exception,throw,ex,finally,if,record,suppressed,exceptions,this,suppressed,exceptions,null,after,singleton,creation,bean,name,if,new,singleton,add,singleton,bean,name,singleton,object,return,singleton,object,singleton,object,null
DefaultSingletonBeanRegistry -> public Object getSingleton(String beanName, ObjectFactory<?> singletonFactory);1478538021;Return the (raw) singleton object registered under the given name,_creating and registering a new one if none registered yet._@param beanName the name of the bean_@param singletonFactory the ObjectFactory to lazily create the singleton_with, if necessary_@return the registered singleton object;public Object getSingleton(String beanName, ObjectFactory<?> singletonFactory) {_		Assert.notNull(beanName, "'beanName' must not be null")__		synchronized (this.singletonObjects) {_			Object singletonObject = this.singletonObjects.get(beanName)__			if (singletonObject == null) {_				if (this.singletonsCurrentlyInDestruction) {_					throw new BeanCreationNotAllowedException(beanName,_							"Singleton bean creation not allowed while singletons of this factory are in destruction " +_							"(Do not request a bean from a BeanFactory in a destroy method implementation!)")__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Creating shared instance of singleton bean '" + beanName + "'")__				}_				beforeSingletonCreation(beanName)__				boolean newSingleton = false__				boolean recordSuppressedExceptions = (this.suppressedExceptions == null)__				if (recordSuppressedExceptions) {_					this.suppressedExceptions = new LinkedHashSet<>()__				}_				try {_					singletonObject = singletonFactory.getObject()__					newSingleton = true__				}_				catch (IllegalStateException ex) {_					_					_					singletonObject = this.singletonObjects.get(beanName)__					if (singletonObject == null) {_						throw ex__					}_				}_				catch (BeanCreationException ex) {_					if (recordSuppressedExceptions) {_						for (Exception suppressedException : this.suppressedExceptions) {_							ex.addRelatedCause(suppressedException)__						}_					}_					throw ex__				}_				finally {_					if (recordSuppressedExceptions) {_						this.suppressedExceptions = null__					}_					afterSingletonCreation(beanName)__				}_				if (newSingleton) {_					addSingleton(beanName, singletonObject)__				}_			}_			return (singletonObject != NULL_OBJECT ? singletonObject : null)__		}_	};return,the,raw,singleton,object,registered,under,the,given,name,creating,and,registering,a,new,one,if,none,registered,yet,param,bean,name,the,name,of,the,bean,param,singleton,factory,the,object,factory,to,lazily,create,the,singleton,with,if,necessary,return,the,registered,singleton,object;public,object,get,singleton,string,bean,name,object,factory,singleton,factory,assert,not,null,bean,name,bean,name,must,not,be,null,synchronized,this,singleton,objects,object,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,if,this,singletons,currently,in,destruction,throw,new,bean,creation,not,allowed,exception,bean,name,singleton,bean,creation,not,allowed,while,singletons,of,this,factory,are,in,destruction,do,not,request,a,bean,from,a,bean,factory,in,a,destroy,method,implementation,if,logger,is,debug,enabled,logger,debug,creating,shared,instance,of,singleton,bean,bean,name,before,singleton,creation,bean,name,boolean,new,singleton,false,boolean,record,suppressed,exceptions,this,suppressed,exceptions,null,if,record,suppressed,exceptions,this,suppressed,exceptions,new,linked,hash,set,try,singleton,object,singleton,factory,get,object,new,singleton,true,catch,illegal,state,exception,ex,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,throw,ex,catch,bean,creation,exception,ex,if,record,suppressed,exceptions,for,exception,suppressed,exception,this,suppressed,exceptions,ex,add,related,cause,suppressed,exception,throw,ex,finally,if,record,suppressed,exceptions,this,suppressed,exceptions,null,after,singleton,creation,bean,name,if,new,singleton,add,singleton,bean,name,singleton,object,return,singleton,object,singleton,object,null
DefaultSingletonBeanRegistry -> public Object getSingleton(String beanName, ObjectFactory<?> singletonFactory);1495868221;Return the (raw) singleton object registered under the given name,_creating and registering a new one if none registered yet._@param beanName the name of the bean_@param singletonFactory the ObjectFactory to lazily create the singleton_with, if necessary_@return the registered singleton object;public Object getSingleton(String beanName, ObjectFactory<?> singletonFactory) {_		Assert.notNull(beanName, "'beanName' must not be null")__		synchronized (this.singletonObjects) {_			Object singletonObject = this.singletonObjects.get(beanName)__			if (singletonObject == null) {_				if (this.singletonsCurrentlyInDestruction) {_					throw new BeanCreationNotAllowedException(beanName,_							"Singleton bean creation not allowed while singletons of this factory are in destruction " +_							"(Do not request a bean from a BeanFactory in a destroy method implementation!)")__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Creating shared instance of singleton bean '" + beanName + "'")__				}_				beforeSingletonCreation(beanName)__				boolean newSingleton = false__				boolean recordSuppressedExceptions = (this.suppressedExceptions == null)__				if (recordSuppressedExceptions) {_					this.suppressedExceptions = new LinkedHashSet<>()__				}_				try {_					singletonObject = singletonFactory.getObject()__					newSingleton = true__				}_				catch (IllegalStateException ex) {_					_					_					singletonObject = this.singletonObjects.get(beanName)__					if (singletonObject == null) {_						throw ex__					}_				}_				catch (BeanCreationException ex) {_					if (recordSuppressedExceptions) {_						for (Exception suppressedException : this.suppressedExceptions) {_							ex.addRelatedCause(suppressedException)__						}_					}_					throw ex__				}_				finally {_					if (recordSuppressedExceptions) {_						this.suppressedExceptions = null__					}_					afterSingletonCreation(beanName)__				}_				if (newSingleton) {_					addSingleton(beanName, singletonObject)__				}_			}_			return (singletonObject != NULL_OBJECT ? singletonObject : null)__		}_	};return,the,raw,singleton,object,registered,under,the,given,name,creating,and,registering,a,new,one,if,none,registered,yet,param,bean,name,the,name,of,the,bean,param,singleton,factory,the,object,factory,to,lazily,create,the,singleton,with,if,necessary,return,the,registered,singleton,object;public,object,get,singleton,string,bean,name,object,factory,singleton,factory,assert,not,null,bean,name,bean,name,must,not,be,null,synchronized,this,singleton,objects,object,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,if,this,singletons,currently,in,destruction,throw,new,bean,creation,not,allowed,exception,bean,name,singleton,bean,creation,not,allowed,while,singletons,of,this,factory,are,in,destruction,do,not,request,a,bean,from,a,bean,factory,in,a,destroy,method,implementation,if,logger,is,debug,enabled,logger,debug,creating,shared,instance,of,singleton,bean,bean,name,before,singleton,creation,bean,name,boolean,new,singleton,false,boolean,record,suppressed,exceptions,this,suppressed,exceptions,null,if,record,suppressed,exceptions,this,suppressed,exceptions,new,linked,hash,set,try,singleton,object,singleton,factory,get,object,new,singleton,true,catch,illegal,state,exception,ex,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,throw,ex,catch,bean,creation,exception,ex,if,record,suppressed,exceptions,for,exception,suppressed,exception,this,suppressed,exceptions,ex,add,related,cause,suppressed,exception,throw,ex,finally,if,record,suppressed,exceptions,this,suppressed,exceptions,null,after,singleton,creation,bean,name,if,new,singleton,add,singleton,bean,name,singleton,object,return,singleton,object,singleton,object,null
DefaultSingletonBeanRegistry -> public Object getSingleton(String beanName, ObjectFactory<?> singletonFactory);1496259743;Return the (raw) singleton object registered under the given name,_creating and registering a new one if none registered yet._@param beanName the name of the bean_@param singletonFactory the ObjectFactory to lazily create the singleton_with, if necessary_@return the registered singleton object;public Object getSingleton(String beanName, ObjectFactory<?> singletonFactory) {_		Assert.notNull(beanName, "'beanName' must not be null")__		synchronized (this.singletonObjects) {_			Object singletonObject = this.singletonObjects.get(beanName)__			if (singletonObject == null) {_				if (this.singletonsCurrentlyInDestruction) {_					throw new BeanCreationNotAllowedException(beanName,_							"Singleton bean creation not allowed while singletons of this factory are in destruction " +_							"(Do not request a bean from a BeanFactory in a destroy method implementation!)")__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Creating shared instance of singleton bean '" + beanName + "'")__				}_				beforeSingletonCreation(beanName)__				boolean newSingleton = false__				boolean recordSuppressedExceptions = (this.suppressedExceptions == null)__				if (recordSuppressedExceptions) {_					this.suppressedExceptions = new LinkedHashSet<>()__				}_				try {_					singletonObject = singletonFactory.getObject()__					newSingleton = true__				}_				catch (IllegalStateException ex) {_					_					_					singletonObject = this.singletonObjects.get(beanName)__					if (singletonObject == null) {_						throw ex__					}_				}_				catch (BeanCreationException ex) {_					if (recordSuppressedExceptions) {_						for (Exception suppressedException : this.suppressedExceptions) {_							ex.addRelatedCause(suppressedException)__						}_					}_					throw ex__				}_				finally {_					if (recordSuppressedExceptions) {_						this.suppressedExceptions = null__					}_					afterSingletonCreation(beanName)__				}_				if (newSingleton) {_					addSingleton(beanName, singletonObject)__				}_			}_			return (singletonObject != NULL_OBJECT ? singletonObject : null)__		}_	};return,the,raw,singleton,object,registered,under,the,given,name,creating,and,registering,a,new,one,if,none,registered,yet,param,bean,name,the,name,of,the,bean,param,singleton,factory,the,object,factory,to,lazily,create,the,singleton,with,if,necessary,return,the,registered,singleton,object;public,object,get,singleton,string,bean,name,object,factory,singleton,factory,assert,not,null,bean,name,bean,name,must,not,be,null,synchronized,this,singleton,objects,object,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,if,this,singletons,currently,in,destruction,throw,new,bean,creation,not,allowed,exception,bean,name,singleton,bean,creation,not,allowed,while,singletons,of,this,factory,are,in,destruction,do,not,request,a,bean,from,a,bean,factory,in,a,destroy,method,implementation,if,logger,is,debug,enabled,logger,debug,creating,shared,instance,of,singleton,bean,bean,name,before,singleton,creation,bean,name,boolean,new,singleton,false,boolean,record,suppressed,exceptions,this,suppressed,exceptions,null,if,record,suppressed,exceptions,this,suppressed,exceptions,new,linked,hash,set,try,singleton,object,singleton,factory,get,object,new,singleton,true,catch,illegal,state,exception,ex,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,throw,ex,catch,bean,creation,exception,ex,if,record,suppressed,exceptions,for,exception,suppressed,exception,this,suppressed,exceptions,ex,add,related,cause,suppressed,exception,throw,ex,finally,if,record,suppressed,exceptions,this,suppressed,exceptions,null,after,singleton,creation,bean,name,if,new,singleton,add,singleton,bean,name,singleton,object,return,singleton,object,singleton,object,null
DefaultSingletonBeanRegistry -> public Object getSingleton(String beanName, ObjectFactory<?> singletonFactory);1503007895;Return the (raw) singleton object registered under the given name,_creating and registering a new one if none registered yet._@param beanName the name of the bean_@param singletonFactory the ObjectFactory to lazily create the singleton_with, if necessary_@return the registered singleton object;public Object getSingleton(String beanName, ObjectFactory<?> singletonFactory) {_		Assert.notNull(beanName, "Bean name must not be null")__		synchronized (this.singletonObjects) {_			Object singletonObject = this.singletonObjects.get(beanName)__			if (singletonObject == null) {_				if (this.singletonsCurrentlyInDestruction) {_					throw new BeanCreationNotAllowedException(beanName,_							"Singleton bean creation not allowed while singletons of this factory are in destruction " +_							"(Do not request a bean from a BeanFactory in a destroy method implementation!)")__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Creating shared instance of singleton bean '" + beanName + "'")__				}_				beforeSingletonCreation(beanName)__				boolean newSingleton = false__				boolean recordSuppressedExceptions = (this.suppressedExceptions == null)__				if (recordSuppressedExceptions) {_					this.suppressedExceptions = new LinkedHashSet<>()__				}_				try {_					singletonObject = singletonFactory.getObject()__					newSingleton = true__				}_				catch (IllegalStateException ex) {_					_					_					singletonObject = this.singletonObjects.get(beanName)__					if (singletonObject == null) {_						throw ex__					}_				}_				catch (BeanCreationException ex) {_					if (recordSuppressedExceptions) {_						for (Exception suppressedException : this.suppressedExceptions) {_							ex.addRelatedCause(suppressedException)__						}_					}_					throw ex__				}_				finally {_					if (recordSuppressedExceptions) {_						this.suppressedExceptions = null__					}_					afterSingletonCreation(beanName)__				}_				if (newSingleton) {_					addSingleton(beanName, singletonObject)__				}_			}_			return singletonObject__		}_	};return,the,raw,singleton,object,registered,under,the,given,name,creating,and,registering,a,new,one,if,none,registered,yet,param,bean,name,the,name,of,the,bean,param,singleton,factory,the,object,factory,to,lazily,create,the,singleton,with,if,necessary,return,the,registered,singleton,object;public,object,get,singleton,string,bean,name,object,factory,singleton,factory,assert,not,null,bean,name,bean,name,must,not,be,null,synchronized,this,singleton,objects,object,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,if,this,singletons,currently,in,destruction,throw,new,bean,creation,not,allowed,exception,bean,name,singleton,bean,creation,not,allowed,while,singletons,of,this,factory,are,in,destruction,do,not,request,a,bean,from,a,bean,factory,in,a,destroy,method,implementation,if,logger,is,debug,enabled,logger,debug,creating,shared,instance,of,singleton,bean,bean,name,before,singleton,creation,bean,name,boolean,new,singleton,false,boolean,record,suppressed,exceptions,this,suppressed,exceptions,null,if,record,suppressed,exceptions,this,suppressed,exceptions,new,linked,hash,set,try,singleton,object,singleton,factory,get,object,new,singleton,true,catch,illegal,state,exception,ex,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,throw,ex,catch,bean,creation,exception,ex,if,record,suppressed,exceptions,for,exception,suppressed,exception,this,suppressed,exceptions,ex,add,related,cause,suppressed,exception,throw,ex,finally,if,record,suppressed,exceptions,this,suppressed,exceptions,null,after,singleton,creation,bean,name,if,new,singleton,add,singleton,bean,name,singleton,object,return,singleton,object
DefaultSingletonBeanRegistry -> public Object getSingleton(String beanName, ObjectFactory<?> singletonFactory);1518810557;Return the (raw) singleton object registered under the given name,_creating and registering a new one if none registered yet._@param beanName the name of the bean_@param singletonFactory the ObjectFactory to lazily create the singleton_with, if necessary_@return the registered singleton object;public Object getSingleton(String beanName, ObjectFactory<?> singletonFactory) {_		Assert.notNull(beanName, "Bean name must not be null")__		synchronized (this.singletonObjects) {_			Object singletonObject = this.singletonObjects.get(beanName)__			if (singletonObject == null) {_				if (this.singletonsCurrentlyInDestruction) {_					throw new BeanCreationNotAllowedException(beanName,_							"Singleton bean creation not allowed while singletons of this factory are in destruction " +_							"(Do not request a bean from a BeanFactory in a destroy method implementation!)")__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Creating shared instance of singleton bean '" + beanName + "'")__				}_				beforeSingletonCreation(beanName)__				boolean newSingleton = false__				boolean recordSuppressedExceptions = (this.suppressedExceptions == null)__				if (recordSuppressedExceptions) {_					this.suppressedExceptions = new LinkedHashSet<>()__				}_				try {_					singletonObject = singletonFactory.getObject()__					newSingleton = true__				}_				catch (IllegalStateException ex) {_					_					_					singletonObject = this.singletonObjects.get(beanName)__					if (singletonObject == null) {_						throw ex__					}_				}_				catch (BeanCreationException ex) {_					if (recordSuppressedExceptions) {_						for (Exception suppressedException : this.suppressedExceptions) {_							ex.addRelatedCause(suppressedException)__						}_					}_					throw ex__				}_				finally {_					if (recordSuppressedExceptions) {_						this.suppressedExceptions = null__					}_					afterSingletonCreation(beanName)__				}_				if (newSingleton) {_					addSingleton(beanName, singletonObject)__				}_			}_			return singletonObject__		}_	};return,the,raw,singleton,object,registered,under,the,given,name,creating,and,registering,a,new,one,if,none,registered,yet,param,bean,name,the,name,of,the,bean,param,singleton,factory,the,object,factory,to,lazily,create,the,singleton,with,if,necessary,return,the,registered,singleton,object;public,object,get,singleton,string,bean,name,object,factory,singleton,factory,assert,not,null,bean,name,bean,name,must,not,be,null,synchronized,this,singleton,objects,object,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,if,this,singletons,currently,in,destruction,throw,new,bean,creation,not,allowed,exception,bean,name,singleton,bean,creation,not,allowed,while,singletons,of,this,factory,are,in,destruction,do,not,request,a,bean,from,a,bean,factory,in,a,destroy,method,implementation,if,logger,is,debug,enabled,logger,debug,creating,shared,instance,of,singleton,bean,bean,name,before,singleton,creation,bean,name,boolean,new,singleton,false,boolean,record,suppressed,exceptions,this,suppressed,exceptions,null,if,record,suppressed,exceptions,this,suppressed,exceptions,new,linked,hash,set,try,singleton,object,singleton,factory,get,object,new,singleton,true,catch,illegal,state,exception,ex,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,throw,ex,catch,bean,creation,exception,ex,if,record,suppressed,exceptions,for,exception,suppressed,exception,this,suppressed,exceptions,ex,add,related,cause,suppressed,exception,throw,ex,finally,if,record,suppressed,exceptions,this,suppressed,exceptions,null,after,singleton,creation,bean,name,if,new,singleton,add,singleton,bean,name,singleton,object,return,singleton,object
DefaultSingletonBeanRegistry -> public Object getSingleton(String beanName, ObjectFactory<?> singletonFactory);1521822873;Return the (raw) singleton object registered under the given name,_creating and registering a new one if none registered yet._@param beanName the name of the bean_@param singletonFactory the ObjectFactory to lazily create the singleton_with, if necessary_@return the registered singleton object;public Object getSingleton(String beanName, ObjectFactory<?> singletonFactory) {_		Assert.notNull(beanName, "Bean name must not be null")__		synchronized (this.singletonObjects) {_			Object singletonObject = this.singletonObjects.get(beanName)__			if (singletonObject == null) {_				if (this.singletonsCurrentlyInDestruction) {_					throw new BeanCreationNotAllowedException(beanName,_							"Singleton bean creation not allowed while singletons of this factory are in destruction " +_							"(Do not request a bean from a BeanFactory in a destroy method implementation!)")__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Creating shared instance of singleton bean '" + beanName + "'")__				}_				beforeSingletonCreation(beanName)__				boolean newSingleton = false__				boolean recordSuppressedExceptions = (this.suppressedExceptions == null)__				if (recordSuppressedExceptions) {_					this.suppressedExceptions = new LinkedHashSet<>()__				}_				try {_					singletonObject = singletonFactory.getObject()__					newSingleton = true__				}_				catch (IllegalStateException ex) {_					_					_					singletonObject = this.singletonObjects.get(beanName)__					if (singletonObject == null) {_						throw ex__					}_				}_				catch (BeanCreationException ex) {_					if (recordSuppressedExceptions) {_						for (Exception suppressedException : this.suppressedExceptions) {_							ex.addRelatedCause(suppressedException)__						}_					}_					throw ex__				}_				finally {_					if (recordSuppressedExceptions) {_						this.suppressedExceptions = null__					}_					afterSingletonCreation(beanName)__				}_				if (newSingleton) {_					addSingleton(beanName, singletonObject)__				}_			}_			return singletonObject__		}_	};return,the,raw,singleton,object,registered,under,the,given,name,creating,and,registering,a,new,one,if,none,registered,yet,param,bean,name,the,name,of,the,bean,param,singleton,factory,the,object,factory,to,lazily,create,the,singleton,with,if,necessary,return,the,registered,singleton,object;public,object,get,singleton,string,bean,name,object,factory,singleton,factory,assert,not,null,bean,name,bean,name,must,not,be,null,synchronized,this,singleton,objects,object,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,if,this,singletons,currently,in,destruction,throw,new,bean,creation,not,allowed,exception,bean,name,singleton,bean,creation,not,allowed,while,singletons,of,this,factory,are,in,destruction,do,not,request,a,bean,from,a,bean,factory,in,a,destroy,method,implementation,if,logger,is,debug,enabled,logger,debug,creating,shared,instance,of,singleton,bean,bean,name,before,singleton,creation,bean,name,boolean,new,singleton,false,boolean,record,suppressed,exceptions,this,suppressed,exceptions,null,if,record,suppressed,exceptions,this,suppressed,exceptions,new,linked,hash,set,try,singleton,object,singleton,factory,get,object,new,singleton,true,catch,illegal,state,exception,ex,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,throw,ex,catch,bean,creation,exception,ex,if,record,suppressed,exceptions,for,exception,suppressed,exception,this,suppressed,exceptions,ex,add,related,cause,suppressed,exception,throw,ex,finally,if,record,suppressed,exceptions,this,suppressed,exceptions,null,after,singleton,creation,bean,name,if,new,singleton,add,singleton,bean,name,singleton,object,return,singleton,object
DefaultSingletonBeanRegistry -> public Object getSingleton(String beanName, ObjectFactory<?> singletonFactory);1521905451;Return the (raw) singleton object registered under the given name,_creating and registering a new one if none registered yet._@param beanName the name of the bean_@param singletonFactory the ObjectFactory to lazily create the singleton_with, if necessary_@return the registered singleton object;public Object getSingleton(String beanName, ObjectFactory<?> singletonFactory) {_		Assert.notNull(beanName, "Bean name must not be null")__		synchronized (this.singletonObjects) {_			Object singletonObject = this.singletonObjects.get(beanName)__			if (singletonObject == null) {_				if (this.singletonsCurrentlyInDestruction) {_					throw new BeanCreationNotAllowedException(beanName,_							"Singleton bean creation not allowed while singletons of this factory are in destruction " +_							"(Do not request a bean from a BeanFactory in a destroy method implementation!)")__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Creating shared instance of singleton bean '" + beanName + "'")__				}_				beforeSingletonCreation(beanName)__				boolean newSingleton = false__				boolean recordSuppressedExceptions = (this.suppressedExceptions == null)__				if (recordSuppressedExceptions) {_					this.suppressedExceptions = new LinkedHashSet<>()__				}_				try {_					singletonObject = singletonFactory.getObject()__					newSingleton = true__				}_				catch (IllegalStateException ex) {_					_					_					singletonObject = this.singletonObjects.get(beanName)__					if (singletonObject == null) {_						throw ex__					}_				}_				catch (BeanCreationException ex) {_					if (recordSuppressedExceptions) {_						for (Exception suppressedException : this.suppressedExceptions) {_							ex.addRelatedCause(suppressedException)__						}_					}_					throw ex__				}_				finally {_					if (recordSuppressedExceptions) {_						this.suppressedExceptions = null__					}_					afterSingletonCreation(beanName)__				}_				if (newSingleton) {_					addSingleton(beanName, singletonObject)__				}_			}_			return singletonObject__		}_	};return,the,raw,singleton,object,registered,under,the,given,name,creating,and,registering,a,new,one,if,none,registered,yet,param,bean,name,the,name,of,the,bean,param,singleton,factory,the,object,factory,to,lazily,create,the,singleton,with,if,necessary,return,the,registered,singleton,object;public,object,get,singleton,string,bean,name,object,factory,singleton,factory,assert,not,null,bean,name,bean,name,must,not,be,null,synchronized,this,singleton,objects,object,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,if,this,singletons,currently,in,destruction,throw,new,bean,creation,not,allowed,exception,bean,name,singleton,bean,creation,not,allowed,while,singletons,of,this,factory,are,in,destruction,do,not,request,a,bean,from,a,bean,factory,in,a,destroy,method,implementation,if,logger,is,debug,enabled,logger,debug,creating,shared,instance,of,singleton,bean,bean,name,before,singleton,creation,bean,name,boolean,new,singleton,false,boolean,record,suppressed,exceptions,this,suppressed,exceptions,null,if,record,suppressed,exceptions,this,suppressed,exceptions,new,linked,hash,set,try,singleton,object,singleton,factory,get,object,new,singleton,true,catch,illegal,state,exception,ex,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,throw,ex,catch,bean,creation,exception,ex,if,record,suppressed,exceptions,for,exception,suppressed,exception,this,suppressed,exceptions,ex,add,related,cause,suppressed,exception,throw,ex,finally,if,record,suppressed,exceptions,this,suppressed,exceptions,null,after,singleton,creation,bean,name,if,new,singleton,add,singleton,bean,name,singleton,object,return,singleton,object
DefaultSingletonBeanRegistry -> public Object getSingleton(String beanName, ObjectFactory<?> singletonFactory);1527623493;Return the (raw) singleton object registered under the given name,_creating and registering a new one if none registered yet._@param beanName the name of the bean_@param singletonFactory the ObjectFactory to lazily create the singleton_with, if necessary_@return the registered singleton object;public Object getSingleton(String beanName, ObjectFactory<?> singletonFactory) {_		Assert.notNull(beanName, "Bean name must not be null")__		synchronized (this.singletonObjects) {_			Object singletonObject = this.singletonObjects.get(beanName)__			if (singletonObject == null) {_				if (this.singletonsCurrentlyInDestruction) {_					throw new BeanCreationNotAllowedException(beanName,_							"Singleton bean creation not allowed while singletons of this factory are in destruction " +_							"(Do not request a bean from a BeanFactory in a destroy method implementation!)")__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Creating shared instance of singleton bean '" + beanName + "'")__				}_				beforeSingletonCreation(beanName)__				boolean newSingleton = false__				boolean recordSuppressedExceptions = (this.suppressedExceptions == null)__				if (recordSuppressedExceptions) {_					this.suppressedExceptions = new LinkedHashSet<>()__				}_				try {_					singletonObject = singletonFactory.getObject()__					newSingleton = true__				}_				catch (IllegalStateException ex) {_					_					_					singletonObject = this.singletonObjects.get(beanName)__					if (singletonObject == null) {_						throw ex__					}_				}_				catch (BeanCreationException ex) {_					if (recordSuppressedExceptions) {_						for (Exception suppressedException : this.suppressedExceptions) {_							ex.addRelatedCause(suppressedException)__						}_					}_					throw ex__				}_				finally {_					if (recordSuppressedExceptions) {_						this.suppressedExceptions = null__					}_					afterSingletonCreation(beanName)__				}_				if (newSingleton) {_					addSingleton(beanName, singletonObject)__				}_			}_			return singletonObject__		}_	};return,the,raw,singleton,object,registered,under,the,given,name,creating,and,registering,a,new,one,if,none,registered,yet,param,bean,name,the,name,of,the,bean,param,singleton,factory,the,object,factory,to,lazily,create,the,singleton,with,if,necessary,return,the,registered,singleton,object;public,object,get,singleton,string,bean,name,object,factory,singleton,factory,assert,not,null,bean,name,bean,name,must,not,be,null,synchronized,this,singleton,objects,object,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,if,this,singletons,currently,in,destruction,throw,new,bean,creation,not,allowed,exception,bean,name,singleton,bean,creation,not,allowed,while,singletons,of,this,factory,are,in,destruction,do,not,request,a,bean,from,a,bean,factory,in,a,destroy,method,implementation,if,logger,is,debug,enabled,logger,debug,creating,shared,instance,of,singleton,bean,bean,name,before,singleton,creation,bean,name,boolean,new,singleton,false,boolean,record,suppressed,exceptions,this,suppressed,exceptions,null,if,record,suppressed,exceptions,this,suppressed,exceptions,new,linked,hash,set,try,singleton,object,singleton,factory,get,object,new,singleton,true,catch,illegal,state,exception,ex,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,throw,ex,catch,bean,creation,exception,ex,if,record,suppressed,exceptions,for,exception,suppressed,exception,this,suppressed,exceptions,ex,add,related,cause,suppressed,exception,throw,ex,finally,if,record,suppressed,exceptions,this,suppressed,exceptions,null,after,singleton,creation,bean,name,if,new,singleton,add,singleton,bean,name,singleton,object,return,singleton,object
DefaultSingletonBeanRegistry -> public Object getSingleton(String beanName, ObjectFactory<?> singletonFactory);1530174524;Return the (raw) singleton object registered under the given name,_creating and registering a new one if none registered yet._@param beanName the name of the bean_@param singletonFactory the ObjectFactory to lazily create the singleton_with, if necessary_@return the registered singleton object;public Object getSingleton(String beanName, ObjectFactory<?> singletonFactory) {_		Assert.notNull(beanName, "Bean name must not be null")__		synchronized (this.singletonObjects) {_			Object singletonObject = this.singletonObjects.get(beanName)__			if (singletonObject == null) {_				if (this.singletonsCurrentlyInDestruction) {_					throw new BeanCreationNotAllowedException(beanName,_							"Singleton bean creation not allowed while singletons of this factory are in destruction " +_							"(Do not request a bean from a BeanFactory in a destroy method implementation!)")__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Creating shared instance of singleton bean '" + beanName + "'")__				}_				beforeSingletonCreation(beanName)__				boolean newSingleton = false__				boolean recordSuppressedExceptions = (this.suppressedExceptions == null)__				if (recordSuppressedExceptions) {_					this.suppressedExceptions = new LinkedHashSet<>()__				}_				try {_					singletonObject = singletonFactory.getObject()__					newSingleton = true__				}_				catch (IllegalStateException ex) {_					_					_					singletonObject = this.singletonObjects.get(beanName)__					if (singletonObject == null) {_						throw ex__					}_				}_				catch (BeanCreationException ex) {_					if (recordSuppressedExceptions) {_						for (Exception suppressedException : this.suppressedExceptions) {_							ex.addRelatedCause(suppressedException)__						}_					}_					throw ex__				}_				finally {_					if (recordSuppressedExceptions) {_						this.suppressedExceptions = null__					}_					afterSingletonCreation(beanName)__				}_				if (newSingleton) {_					addSingleton(beanName, singletonObject)__				}_			}_			return singletonObject__		}_	};return,the,raw,singleton,object,registered,under,the,given,name,creating,and,registering,a,new,one,if,none,registered,yet,param,bean,name,the,name,of,the,bean,param,singleton,factory,the,object,factory,to,lazily,create,the,singleton,with,if,necessary,return,the,registered,singleton,object;public,object,get,singleton,string,bean,name,object,factory,singleton,factory,assert,not,null,bean,name,bean,name,must,not,be,null,synchronized,this,singleton,objects,object,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,if,this,singletons,currently,in,destruction,throw,new,bean,creation,not,allowed,exception,bean,name,singleton,bean,creation,not,allowed,while,singletons,of,this,factory,are,in,destruction,do,not,request,a,bean,from,a,bean,factory,in,a,destroy,method,implementation,if,logger,is,debug,enabled,logger,debug,creating,shared,instance,of,singleton,bean,bean,name,before,singleton,creation,bean,name,boolean,new,singleton,false,boolean,record,suppressed,exceptions,this,suppressed,exceptions,null,if,record,suppressed,exceptions,this,suppressed,exceptions,new,linked,hash,set,try,singleton,object,singleton,factory,get,object,new,singleton,true,catch,illegal,state,exception,ex,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,throw,ex,catch,bean,creation,exception,ex,if,record,suppressed,exceptions,for,exception,suppressed,exception,this,suppressed,exceptions,ex,add,related,cause,suppressed,exception,throw,ex,finally,if,record,suppressed,exceptions,this,suppressed,exceptions,null,after,singleton,creation,bean,name,if,new,singleton,add,singleton,bean,name,singleton,object,return,singleton,object
DefaultSingletonBeanRegistry -> public Object getSingleton(String beanName, ObjectFactory<?> singletonFactory);1532091916;Return the (raw) singleton object registered under the given name,_creating and registering a new one if none registered yet._@param beanName the name of the bean_@param singletonFactory the ObjectFactory to lazily create the singleton_with, if necessary_@return the registered singleton object;public Object getSingleton(String beanName, ObjectFactory<?> singletonFactory) {_		Assert.notNull(beanName, "Bean name must not be null")__		synchronized (this.singletonObjects) {_			Object singletonObject = this.singletonObjects.get(beanName)__			if (singletonObject == null) {_				if (this.singletonsCurrentlyInDestruction) {_					throw new BeanCreationNotAllowedException(beanName,_							"Singleton bean creation not allowed while singletons of this factory are in destruction " +_							"(Do not request a bean from a BeanFactory in a destroy method implementation!)")__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Creating shared instance of singleton bean '" + beanName + "'")__				}_				beforeSingletonCreation(beanName)__				boolean newSingleton = false__				boolean recordSuppressedExceptions = (this.suppressedExceptions == null)__				if (recordSuppressedExceptions) {_					this.suppressedExceptions = new LinkedHashSet<>()__				}_				try {_					singletonObject = singletonFactory.getObject()__					newSingleton = true__				}_				catch (IllegalStateException ex) {_					_					_					singletonObject = this.singletonObjects.get(beanName)__					if (singletonObject == null) {_						throw ex__					}_				}_				catch (BeanCreationException ex) {_					if (recordSuppressedExceptions) {_						for (Exception suppressedException : this.suppressedExceptions) {_							ex.addRelatedCause(suppressedException)__						}_					}_					throw ex__				}_				finally {_					if (recordSuppressedExceptions) {_						this.suppressedExceptions = null__					}_					afterSingletonCreation(beanName)__				}_				if (newSingleton) {_					addSingleton(beanName, singletonObject)__				}_			}_			return singletonObject__		}_	};return,the,raw,singleton,object,registered,under,the,given,name,creating,and,registering,a,new,one,if,none,registered,yet,param,bean,name,the,name,of,the,bean,param,singleton,factory,the,object,factory,to,lazily,create,the,singleton,with,if,necessary,return,the,registered,singleton,object;public,object,get,singleton,string,bean,name,object,factory,singleton,factory,assert,not,null,bean,name,bean,name,must,not,be,null,synchronized,this,singleton,objects,object,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,if,this,singletons,currently,in,destruction,throw,new,bean,creation,not,allowed,exception,bean,name,singleton,bean,creation,not,allowed,while,singletons,of,this,factory,are,in,destruction,do,not,request,a,bean,from,a,bean,factory,in,a,destroy,method,implementation,if,logger,is,debug,enabled,logger,debug,creating,shared,instance,of,singleton,bean,bean,name,before,singleton,creation,bean,name,boolean,new,singleton,false,boolean,record,suppressed,exceptions,this,suppressed,exceptions,null,if,record,suppressed,exceptions,this,suppressed,exceptions,new,linked,hash,set,try,singleton,object,singleton,factory,get,object,new,singleton,true,catch,illegal,state,exception,ex,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,throw,ex,catch,bean,creation,exception,ex,if,record,suppressed,exceptions,for,exception,suppressed,exception,this,suppressed,exceptions,ex,add,related,cause,suppressed,exception,throw,ex,finally,if,record,suppressed,exceptions,this,suppressed,exceptions,null,after,singleton,creation,bean,name,if,new,singleton,add,singleton,bean,name,singleton,object,return,singleton,object
DefaultSingletonBeanRegistry -> public Object getSingleton(String beanName, ObjectFactory<?> singletonFactory);1532706365;Return the (raw) singleton object registered under the given name,_creating and registering a new one if none registered yet._@param beanName the name of the bean_@param singletonFactory the ObjectFactory to lazily create the singleton_with, if necessary_@return the registered singleton object;public Object getSingleton(String beanName, ObjectFactory<?> singletonFactory) {_		Assert.notNull(beanName, "Bean name must not be null")__		synchronized (this.singletonObjects) {_			Object singletonObject = this.singletonObjects.get(beanName)__			if (singletonObject == null) {_				if (this.singletonsCurrentlyInDestruction) {_					throw new BeanCreationNotAllowedException(beanName,_							"Singleton bean creation not allowed while singletons of this factory are in destruction " +_							"(Do not request a bean from a BeanFactory in a destroy method implementation!)")__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Creating shared instance of singleton bean '" + beanName + "'")__				}_				beforeSingletonCreation(beanName)__				boolean newSingleton = false__				boolean recordSuppressedExceptions = (this.suppressedExceptions == null)__				if (recordSuppressedExceptions) {_					this.suppressedExceptions = new LinkedHashSet<>()__				}_				try {_					singletonObject = singletonFactory.getObject()__					newSingleton = true__				}_				catch (IllegalStateException ex) {_					_					_					singletonObject = this.singletonObjects.get(beanName)__					if (singletonObject == null) {_						throw ex__					}_				}_				catch (BeanCreationException ex) {_					if (recordSuppressedExceptions) {_						for (Exception suppressedException : this.suppressedExceptions) {_							ex.addRelatedCause(suppressedException)__						}_					}_					throw ex__				}_				finally {_					if (recordSuppressedExceptions) {_						this.suppressedExceptions = null__					}_					afterSingletonCreation(beanName)__				}_				if (newSingleton) {_					addSingleton(beanName, singletonObject)__				}_			}_			return singletonObject__		}_	};return,the,raw,singleton,object,registered,under,the,given,name,creating,and,registering,a,new,one,if,none,registered,yet,param,bean,name,the,name,of,the,bean,param,singleton,factory,the,object,factory,to,lazily,create,the,singleton,with,if,necessary,return,the,registered,singleton,object;public,object,get,singleton,string,bean,name,object,factory,singleton,factory,assert,not,null,bean,name,bean,name,must,not,be,null,synchronized,this,singleton,objects,object,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,if,this,singletons,currently,in,destruction,throw,new,bean,creation,not,allowed,exception,bean,name,singleton,bean,creation,not,allowed,while,singletons,of,this,factory,are,in,destruction,do,not,request,a,bean,from,a,bean,factory,in,a,destroy,method,implementation,if,logger,is,debug,enabled,logger,debug,creating,shared,instance,of,singleton,bean,bean,name,before,singleton,creation,bean,name,boolean,new,singleton,false,boolean,record,suppressed,exceptions,this,suppressed,exceptions,null,if,record,suppressed,exceptions,this,suppressed,exceptions,new,linked,hash,set,try,singleton,object,singleton,factory,get,object,new,singleton,true,catch,illegal,state,exception,ex,singleton,object,this,singleton,objects,get,bean,name,if,singleton,object,null,throw,ex,catch,bean,creation,exception,ex,if,record,suppressed,exceptions,for,exception,suppressed,exception,this,suppressed,exceptions,ex,add,related,cause,suppressed,exception,throw,ex,finally,if,record,suppressed,exceptions,this,suppressed,exceptions,null,after,singleton,creation,bean,name,if,new,singleton,add,singleton,bean,name,singleton,object,return,singleton,object
