commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the separator to expect between bean name and property path.  * Default is a dot (".").  */ ;/**  * Set the separator to expect between bean name and property path.  * Default is a dot (".").  */ public void setBeanNameSeparator(String beanNameSeparator) {     this.beanNameSeparator = beanNameSeparator. }
true;public;1;3;/**  * Set whether to ignore invalid keys. Default is "false".  * <p>If you ignore invalid keys, keys that do not follow the 'beanName.property' format  * (or refer to invalid bean names or properties) will just be logged at debug level.  * This allows one to have arbitrary other keys in a properties file.  */ ;/**  * Set whether to ignore invalid keys. Default is "false".  * <p>If you ignore invalid keys, keys that do not follow the 'beanName.property' format  * (or refer to invalid bean names or properties) will just be logged at debug level.  * This allows one to have arbitrary other keys in a properties file.  */ public void setIgnoreInvalidKeys(boolean ignoreInvalidKeys) {     this.ignoreInvalidKeys = ignoreInvalidKeys. }
false;protected;2;20;;@Override protected void processProperties(ConfigurableListableBeanFactory beanFactory, Properties props) throws BeansException {     for (Enumeration<?> names = props.propertyNames(). names.hasMoreElements(). ) {         String key = (String) names.nextElement().         try {             processKey(beanFactory, key, props.getProperty(key)).         } catch (BeansException ex) {             String msg = "Could not process key '" + key + "' in PropertyOverrideConfigurer".             if (!this.ignoreInvalidKeys) {                 throw new BeanInitializationException(msg, ex).             }             if (logger.isDebugEnabled()) {                 logger.debug(msg, ex).             }         }     } }
true;protected;3;16;/**  * Process the given key as 'beanName.property' entry.  */ ;/**  * Process the given key as 'beanName.property' entry.  */ protected void processKey(ConfigurableListableBeanFactory factory, String key, String value) throws BeansException {     int separatorIndex = key.indexOf(this.beanNameSeparator).     if (separatorIndex == -1) {         throw new BeanInitializationException("Invalid key '" + key + "': expected 'beanName" + this.beanNameSeparator + "property'").     }     String beanName = key.substring(0, separatorIndex).     String beanProperty = key.substring(separatorIndex + 1).     this.beanNames.add(beanName).     applyPropertyValue(factory, beanName, beanProperty, value).     if (logger.isDebugEnabled()) {         logger.debug("Property '" + key + "' set to value [" + value + "]").     } }
true;protected;4;13;/**  * Apply the given property value to the corresponding bean.  */ ;/**  * Apply the given property value to the corresponding bean.  */ protected void applyPropertyValue(ConfigurableListableBeanFactory factory, String beanName, String property, String value) {     BeanDefinition bd = factory.getBeanDefinition(beanName).     BeanDefinition bdToUse = bd.     while (bd != null) {         bdToUse = bd.         bd = bd.getOriginatingBeanDefinition().     }     PropertyValue pv = new PropertyValue(property, value).     pv.setOptional(this.ignoreInvalidKeys).     bdToUse.getPropertyValues().addPropertyValue(pv). }
true;public;1;3;/**  * Were there overrides for this bean?  * Only valid after processing has occurred at least once.  * @param beanName name of the bean to query status for  * @return whether there were property overrides for the named bean  */ ;/**  * Were there overrides for this bean?  * Only valid after processing has occurred at least once.  * @param beanName name of the bean to query status for  * @return whether there were property overrides for the named bean  */ public boolean hasPropertyOverridesFor(String beanName) {     return this.beanNames.contains(beanName). }
