# id;timestamp;commentText;codeText;commentWords;codeWords
PropertyOverrideConfigurer -> public boolean hasPropertyOverridesFor(String beanName);1328020251;Were there overrides for this bean?_Only valid after processing has occurred at least once._@param beanName name of the bean to query status for_@return whether there were property overrides for_the named bean;public boolean hasPropertyOverridesFor(String beanName) {_		return this.beanNames.contains(beanName)__	};were,there,overrides,for,this,bean,only,valid,after,processing,has,occurred,at,least,once,param,bean,name,name,of,the,bean,to,query,status,for,return,whether,there,were,property,overrides,for,the,named,bean;public,boolean,has,property,overrides,for,string,bean,name,return,this,bean,names,contains,bean,name
PropertyOverrideConfigurer -> public boolean hasPropertyOverridesFor(String beanName);1355352386;Were there overrides for this bean?_Only valid after processing has occurred at least once._@param beanName name of the bean to query status for_@return whether there were property overrides for_the named bean;public boolean hasPropertyOverridesFor(String beanName) {_		return this.beanNames.containsKey(beanName)__	};were,there,overrides,for,this,bean,only,valid,after,processing,has,occurred,at,least,once,param,bean,name,name,of,the,bean,to,query,status,for,return,whether,there,were,property,overrides,for,the,named,bean;public,boolean,has,property,overrides,for,string,bean,name,return,this,bean,names,contains,key,bean,name
PropertyOverrideConfigurer -> public boolean hasPropertyOverridesFor(String beanName);1356735495;Were there overrides for this bean?_Only valid after processing has occurred at least once._@param beanName name of the bean to query status for_@return whether there were property overrides for_the named bean;public boolean hasPropertyOverridesFor(String beanName) {_		return this.beanNames.containsKey(beanName)__	};were,there,overrides,for,this,bean,only,valid,after,processing,has,occurred,at,least,once,param,bean,name,name,of,the,bean,to,query,status,for,return,whether,there,were,property,overrides,for,the,named,bean;public,boolean,has,property,overrides,for,string,bean,name,return,this,bean,names,contains,key,bean,name
PropertyOverrideConfigurer -> public boolean hasPropertyOverridesFor(String beanName);1364505266;Were there overrides for this bean?_Only valid after processing has occurred at least once._@param beanName name of the bean to query status for_@return whether there were property overrides for_the named bean;public boolean hasPropertyOverridesFor(String beanName) {_		return this.beanNames.contains(beanName)__	};were,there,overrides,for,this,bean,only,valid,after,processing,has,occurred,at,least,once,param,bean,name,name,of,the,bean,to,query,status,for,return,whether,there,were,property,overrides,for,the,named,bean;public,boolean,has,property,overrides,for,string,bean,name,return,this,bean,names,contains,bean,name
PropertyOverrideConfigurer -> public boolean hasPropertyOverridesFor(String beanName);1385412762;Were there overrides for this bean?_Only valid after processing has occurred at least once._@param beanName name of the bean to query status for_@return whether there were property overrides for_the named bean;public boolean hasPropertyOverridesFor(String beanName) {_		return this.beanNames.contains(beanName)__	};were,there,overrides,for,this,bean,only,valid,after,processing,has,occurred,at,least,once,param,bean,name,name,of,the,bean,to,query,status,for,return,whether,there,were,property,overrides,for,the,named,bean;public,boolean,has,property,overrides,for,string,bean,name,return,this,bean,names,contains,bean,name
PropertyOverrideConfigurer -> public boolean hasPropertyOverridesFor(String beanName);1469561191;Were there overrides for this bean?_Only valid after processing has occurred at least once._@param beanName name of the bean to query status for_@return whether there were property overrides for_the named bean;public boolean hasPropertyOverridesFor(String beanName) {_		return this.beanNames.contains(beanName)__	};were,there,overrides,for,this,bean,only,valid,after,processing,has,occurred,at,least,once,param,bean,name,name,of,the,bean,to,query,status,for,return,whether,there,were,property,overrides,for,the,named,bean;public,boolean,has,property,overrides,for,string,bean,name,return,this,bean,names,contains,bean,name
PropertyOverrideConfigurer -> public boolean hasPropertyOverridesFor(String beanName);1496837955;Were there overrides for this bean?_Only valid after processing has occurred at least once._@param beanName name of the bean to query status for_@return whether there were property overrides for the named bean;public boolean hasPropertyOverridesFor(String beanName) {_		return this.beanNames.contains(beanName)__	};were,there,overrides,for,this,bean,only,valid,after,processing,has,occurred,at,least,once,param,bean,name,name,of,the,bean,to,query,status,for,return,whether,there,were,property,overrides,for,the,named,bean;public,boolean,has,property,overrides,for,string,bean,name,return,this,bean,names,contains,bean,name
PropertyOverrideConfigurer -> public boolean hasPropertyOverridesFor(String beanName);1530174524;Were there overrides for this bean?_Only valid after processing has occurred at least once._@param beanName name of the bean to query status for_@return whether there were property overrides for the named bean;public boolean hasPropertyOverridesFor(String beanName) {_		return this.beanNames.contains(beanName)__	};were,there,overrides,for,this,bean,only,valid,after,processing,has,occurred,at,least,once,param,bean,name,name,of,the,bean,to,query,status,for,return,whether,there,were,property,overrides,for,the,named,bean;public,boolean,has,property,overrides,for,string,bean,name,return,this,bean,names,contains,bean,name
PropertyOverrideConfigurer -> public boolean hasPropertyOverridesFor(String beanName);1538724083;Were there overrides for this bean?_Only valid after processing has occurred at least once._@param beanName name of the bean to query status for_@return whether there were property overrides for the named bean;public boolean hasPropertyOverridesFor(String beanName) {_		return this.beanNames.contains(beanName)__	};were,there,overrides,for,this,bean,only,valid,after,processing,has,occurred,at,least,once,param,bean,name,name,of,the,bean,to,query,status,for,return,whether,there,were,property,overrides,for,the,named,bean;public,boolean,has,property,overrides,for,string,bean,name,return,this,bean,names,contains,bean,name
PropertyOverrideConfigurer -> protected void processKey(ConfigurableListableBeanFactory factory, String key, String value) 			throws BeansException;1328020251;Process the given key as 'beanName.property' entry.;protected void processKey(ConfigurableListableBeanFactory factory, String key, String value)_			throws BeansException {__		int separatorIndex = key.indexOf(this.beanNameSeparator)__		if (separatorIndex == -1) {_			throw new BeanInitializationException("Invalid key '" + key +_					"': expected 'beanName" + this.beanNameSeparator + "property'")__		}_		String beanName = key.substring(0, separatorIndex)__		String beanProperty = key.substring(separatorIndex+1)__		this.beanNames.add(beanName)__		applyPropertyValue(factory, beanName, beanProperty, value)__		if (logger.isDebugEnabled()) {_			logger.debug("Property '" + key + "' set to value [" + value + "]")__		}_	};process,the,given,key,as,bean,name,property,entry;protected,void,process,key,configurable,listable,bean,factory,factory,string,key,string,value,throws,beans,exception,int,separator,index,key,index,of,this,bean,name,separator,if,separator,index,1,throw,new,bean,initialization,exception,invalid,key,key,expected,bean,name,this,bean,name,separator,property,string,bean,name,key,substring,0,separator,index,string,bean,property,key,substring,separator,index,1,this,bean,names,add,bean,name,apply,property,value,factory,bean,name,bean,property,value,if,logger,is,debug,enabled,logger,debug,property,key,set,to,value,value
PropertyOverrideConfigurer -> protected void processKey(ConfigurableListableBeanFactory factory, String key, String value) 			throws BeansException;1355352386;Process the given key as 'beanName.property' entry.;protected void processKey(ConfigurableListableBeanFactory factory, String key, String value)_			throws BeansException {__		int separatorIndex = key.indexOf(this.beanNameSeparator)__		if (separatorIndex == -1) {_			throw new BeanInitializationException("Invalid key '" + key +_					"': expected 'beanName" + this.beanNameSeparator + "property'")__		}_		String beanName = key.substring(0, separatorIndex)__		String beanProperty = key.substring(separatorIndex+1)__		this.beanNames.put(beanName, Boolean.TRUE)__		applyPropertyValue(factory, beanName, beanProperty, value)__		if (logger.isDebugEnabled()) {_			logger.debug("Property '" + key + "' set to value [" + value + "]")__		}_	};process,the,given,key,as,bean,name,property,entry;protected,void,process,key,configurable,listable,bean,factory,factory,string,key,string,value,throws,beans,exception,int,separator,index,key,index,of,this,bean,name,separator,if,separator,index,1,throw,new,bean,initialization,exception,invalid,key,key,expected,bean,name,this,bean,name,separator,property,string,bean,name,key,substring,0,separator,index,string,bean,property,key,substring,separator,index,1,this,bean,names,put,bean,name,boolean,true,apply,property,value,factory,bean,name,bean,property,value,if,logger,is,debug,enabled,logger,debug,property,key,set,to,value,value
PropertyOverrideConfigurer -> protected void processKey(ConfigurableListableBeanFactory factory, String key, String value) 			throws BeansException;1356735495;Process the given key as 'beanName.property' entry.;protected void processKey(ConfigurableListableBeanFactory factory, String key, String value)_			throws BeansException {__		int separatorIndex = key.indexOf(this.beanNameSeparator)__		if (separatorIndex == -1) {_			throw new BeanInitializationException("Invalid key '" + key +_					"': expected 'beanName" + this.beanNameSeparator + "property'")__		}_		String beanName = key.substring(0, separatorIndex)__		String beanProperty = key.substring(separatorIndex+1)__		this.beanNames.put(beanName, Boolean.TRUE)__		applyPropertyValue(factory, beanName, beanProperty, value)__		if (logger.isDebugEnabled()) {_			logger.debug("Property '" + key + "' set to value [" + value + "]")__		}_	};process,the,given,key,as,bean,name,property,entry;protected,void,process,key,configurable,listable,bean,factory,factory,string,key,string,value,throws,beans,exception,int,separator,index,key,index,of,this,bean,name,separator,if,separator,index,1,throw,new,bean,initialization,exception,invalid,key,key,expected,bean,name,this,bean,name,separator,property,string,bean,name,key,substring,0,separator,index,string,bean,property,key,substring,separator,index,1,this,bean,names,put,bean,name,boolean,true,apply,property,value,factory,bean,name,bean,property,value,if,logger,is,debug,enabled,logger,debug,property,key,set,to,value,value
PropertyOverrideConfigurer -> protected void processKey(ConfigurableListableBeanFactory factory, String key, String value) 			throws BeansException;1364505266;Process the given key as 'beanName.property' entry.;protected void processKey(ConfigurableListableBeanFactory factory, String key, String value)_			throws BeansException {__		int separatorIndex = key.indexOf(this.beanNameSeparator)__		if (separatorIndex == -1) {_			throw new BeanInitializationException("Invalid key '" + key +_					"': expected 'beanName" + this.beanNameSeparator + "property'")__		}_		String beanName = key.substring(0, separatorIndex)__		String beanProperty = key.substring(separatorIndex+1)__		this.beanNames.add(beanName)__		applyPropertyValue(factory, beanName, beanProperty, value)__		if (logger.isDebugEnabled()) {_			logger.debug("Property '" + key + "' set to value [" + value + "]")__		}_	};process,the,given,key,as,bean,name,property,entry;protected,void,process,key,configurable,listable,bean,factory,factory,string,key,string,value,throws,beans,exception,int,separator,index,key,index,of,this,bean,name,separator,if,separator,index,1,throw,new,bean,initialization,exception,invalid,key,key,expected,bean,name,this,bean,name,separator,property,string,bean,name,key,substring,0,separator,index,string,bean,property,key,substring,separator,index,1,this,bean,names,add,bean,name,apply,property,value,factory,bean,name,bean,property,value,if,logger,is,debug,enabled,logger,debug,property,key,set,to,value,value
PropertyOverrideConfigurer -> protected void processKey(ConfigurableListableBeanFactory factory, String key, String value) 			throws BeansException;1385412762;Process the given key as 'beanName.property' entry.;protected void processKey(ConfigurableListableBeanFactory factory, String key, String value)_			throws BeansException {__		int separatorIndex = key.indexOf(this.beanNameSeparator)__		if (separatorIndex == -1) {_			throw new BeanInitializationException("Invalid key '" + key +_					"': expected 'beanName" + this.beanNameSeparator + "property'")__		}_		String beanName = key.substring(0, separatorIndex)__		String beanProperty = key.substring(separatorIndex+1)__		this.beanNames.add(beanName)__		applyPropertyValue(factory, beanName, beanProperty, value)__		if (logger.isDebugEnabled()) {_			logger.debug("Property '" + key + "' set to value [" + value + "]")__		}_	};process,the,given,key,as,bean,name,property,entry;protected,void,process,key,configurable,listable,bean,factory,factory,string,key,string,value,throws,beans,exception,int,separator,index,key,index,of,this,bean,name,separator,if,separator,index,1,throw,new,bean,initialization,exception,invalid,key,key,expected,bean,name,this,bean,name,separator,property,string,bean,name,key,substring,0,separator,index,string,bean,property,key,substring,separator,index,1,this,bean,names,add,bean,name,apply,property,value,factory,bean,name,bean,property,value,if,logger,is,debug,enabled,logger,debug,property,key,set,to,value,value
PropertyOverrideConfigurer -> protected void processKey(ConfigurableListableBeanFactory factory, String key, String value) 			throws BeansException;1469561191;Process the given key as 'beanName.property' entry.;protected void processKey(ConfigurableListableBeanFactory factory, String key, String value)_			throws BeansException {__		int separatorIndex = key.indexOf(this.beanNameSeparator)__		if (separatorIndex == -1) {_			throw new BeanInitializationException("Invalid key '" + key +_					"': expected 'beanName" + this.beanNameSeparator + "property'")__		}_		String beanName = key.substring(0, separatorIndex)__		String beanProperty = key.substring(separatorIndex+1)__		this.beanNames.add(beanName)__		applyPropertyValue(factory, beanName, beanProperty, value)__		if (logger.isDebugEnabled()) {_			logger.debug("Property '" + key + "' set to value [" + value + "]")__		}_	};process,the,given,key,as,bean,name,property,entry;protected,void,process,key,configurable,listable,bean,factory,factory,string,key,string,value,throws,beans,exception,int,separator,index,key,index,of,this,bean,name,separator,if,separator,index,1,throw,new,bean,initialization,exception,invalid,key,key,expected,bean,name,this,bean,name,separator,property,string,bean,name,key,substring,0,separator,index,string,bean,property,key,substring,separator,index,1,this,bean,names,add,bean,name,apply,property,value,factory,bean,name,bean,property,value,if,logger,is,debug,enabled,logger,debug,property,key,set,to,value,value
PropertyOverrideConfigurer -> protected void processKey(ConfigurableListableBeanFactory factory, String key, String value) 			throws BeansException;1496837955;Process the given key as 'beanName.property' entry.;protected void processKey(ConfigurableListableBeanFactory factory, String key, String value)_			throws BeansException {__		int separatorIndex = key.indexOf(this.beanNameSeparator)__		if (separatorIndex == -1) {_			throw new BeanInitializationException("Invalid key '" + key +_					"': expected 'beanName" + this.beanNameSeparator + "property'")__		}_		String beanName = key.substring(0, separatorIndex)__		String beanProperty = key.substring(separatorIndex+1)__		this.beanNames.add(beanName)__		applyPropertyValue(factory, beanName, beanProperty, value)__		if (logger.isDebugEnabled()) {_			logger.debug("Property '" + key + "' set to value [" + value + "]")__		}_	};process,the,given,key,as,bean,name,property,entry;protected,void,process,key,configurable,listable,bean,factory,factory,string,key,string,value,throws,beans,exception,int,separator,index,key,index,of,this,bean,name,separator,if,separator,index,1,throw,new,bean,initialization,exception,invalid,key,key,expected,bean,name,this,bean,name,separator,property,string,bean,name,key,substring,0,separator,index,string,bean,property,key,substring,separator,index,1,this,bean,names,add,bean,name,apply,property,value,factory,bean,name,bean,property,value,if,logger,is,debug,enabled,logger,debug,property,key,set,to,value,value
PropertyOverrideConfigurer -> protected void processKey(ConfigurableListableBeanFactory factory, String key, String value) 			throws BeansException;1530174524;Process the given key as 'beanName.property' entry.;protected void processKey(ConfigurableListableBeanFactory factory, String key, String value)_			throws BeansException {__		int separatorIndex = key.indexOf(this.beanNameSeparator)__		if (separatorIndex == -1) {_			throw new BeanInitializationException("Invalid key '" + key +_					"': expected 'beanName" + this.beanNameSeparator + "property'")__		}_		String beanName = key.substring(0, separatorIndex)__		String beanProperty = key.substring(separatorIndex+1)__		this.beanNames.add(beanName)__		applyPropertyValue(factory, beanName, beanProperty, value)__		if (logger.isDebugEnabled()) {_			logger.debug("Property '" + key + "' set to value [" + value + "]")__		}_	};process,the,given,key,as,bean,name,property,entry;protected,void,process,key,configurable,listable,bean,factory,factory,string,key,string,value,throws,beans,exception,int,separator,index,key,index,of,this,bean,name,separator,if,separator,index,1,throw,new,bean,initialization,exception,invalid,key,key,expected,bean,name,this,bean,name,separator,property,string,bean,name,key,substring,0,separator,index,string,bean,property,key,substring,separator,index,1,this,bean,names,add,bean,name,apply,property,value,factory,bean,name,bean,property,value,if,logger,is,debug,enabled,logger,debug,property,key,set,to,value,value
PropertyOverrideConfigurer -> protected void processKey(ConfigurableListableBeanFactory factory, String key, String value) 			throws BeansException;1538724083;Process the given key as 'beanName.property' entry.;protected void processKey(ConfigurableListableBeanFactory factory, String key, String value)_			throws BeansException {__		int separatorIndex = key.indexOf(this.beanNameSeparator)__		if (separatorIndex == -1) {_			throw new BeanInitializationException("Invalid key '" + key +_					"': expected 'beanName" + this.beanNameSeparator + "property'")__		}_		String beanName = key.substring(0, separatorIndex)__		String beanProperty = key.substring(separatorIndex + 1)__		this.beanNames.add(beanName)__		applyPropertyValue(factory, beanName, beanProperty, value)__		if (logger.isDebugEnabled()) {_			logger.debug("Property '" + key + "' set to value [" + value + "]")__		}_	};process,the,given,key,as,bean,name,property,entry;protected,void,process,key,configurable,listable,bean,factory,factory,string,key,string,value,throws,beans,exception,int,separator,index,key,index,of,this,bean,name,separator,if,separator,index,1,throw,new,bean,initialization,exception,invalid,key,key,expected,bean,name,this,bean,name,separator,property,string,bean,name,key,substring,0,separator,index,string,bean,property,key,substring,separator,index,1,this,bean,names,add,bean,name,apply,property,value,factory,bean,name,bean,property,value,if,logger,is,debug,enabled,logger,debug,property,key,set,to,value,value
PropertyOverrideConfigurer -> public void setBeanNameSeparator(String beanNameSeparator);1328020251;Set the separator to expect between bean name and property path._Default is a dot (".").;public void setBeanNameSeparator(String beanNameSeparator) {_		this.beanNameSeparator = beanNameSeparator__	};set,the,separator,to,expect,between,bean,name,and,property,path,default,is,a,dot;public,void,set,bean,name,separator,string,bean,name,separator,this,bean,name,separator,bean,name,separator
PropertyOverrideConfigurer -> public void setBeanNameSeparator(String beanNameSeparator);1355352386;Set the separator to expect between bean name and property path._Default is a dot (".").;public void setBeanNameSeparator(String beanNameSeparator) {_		this.beanNameSeparator = beanNameSeparator__	};set,the,separator,to,expect,between,bean,name,and,property,path,default,is,a,dot;public,void,set,bean,name,separator,string,bean,name,separator,this,bean,name,separator,bean,name,separator
PropertyOverrideConfigurer -> public void setBeanNameSeparator(String beanNameSeparator);1356735495;Set the separator to expect between bean name and property path._Default is a dot (".").;public void setBeanNameSeparator(String beanNameSeparator) {_		this.beanNameSeparator = beanNameSeparator__	};set,the,separator,to,expect,between,bean,name,and,property,path,default,is,a,dot;public,void,set,bean,name,separator,string,bean,name,separator,this,bean,name,separator,bean,name,separator
PropertyOverrideConfigurer -> public void setBeanNameSeparator(String beanNameSeparator);1364505266;Set the separator to expect between bean name and property path._Default is a dot (".").;public void setBeanNameSeparator(String beanNameSeparator) {_		this.beanNameSeparator = beanNameSeparator__	};set,the,separator,to,expect,between,bean,name,and,property,path,default,is,a,dot;public,void,set,bean,name,separator,string,bean,name,separator,this,bean,name,separator,bean,name,separator
PropertyOverrideConfigurer -> public void setBeanNameSeparator(String beanNameSeparator);1385412762;Set the separator to expect between bean name and property path._Default is a dot (".").;public void setBeanNameSeparator(String beanNameSeparator) {_		this.beanNameSeparator = beanNameSeparator__	};set,the,separator,to,expect,between,bean,name,and,property,path,default,is,a,dot;public,void,set,bean,name,separator,string,bean,name,separator,this,bean,name,separator,bean,name,separator
PropertyOverrideConfigurer -> public void setBeanNameSeparator(String beanNameSeparator);1469561191;Set the separator to expect between bean name and property path._Default is a dot (".").;public void setBeanNameSeparator(String beanNameSeparator) {_		this.beanNameSeparator = beanNameSeparator__	};set,the,separator,to,expect,between,bean,name,and,property,path,default,is,a,dot;public,void,set,bean,name,separator,string,bean,name,separator,this,bean,name,separator,bean,name,separator
PropertyOverrideConfigurer -> public void setBeanNameSeparator(String beanNameSeparator);1496837955;Set the separator to expect between bean name and property path._Default is a dot (".").;public void setBeanNameSeparator(String beanNameSeparator) {_		this.beanNameSeparator = beanNameSeparator__	};set,the,separator,to,expect,between,bean,name,and,property,path,default,is,a,dot;public,void,set,bean,name,separator,string,bean,name,separator,this,bean,name,separator,bean,name,separator
PropertyOverrideConfigurer -> public void setBeanNameSeparator(String beanNameSeparator);1530174524;Set the separator to expect between bean name and property path._Default is a dot (".").;public void setBeanNameSeparator(String beanNameSeparator) {_		this.beanNameSeparator = beanNameSeparator__	};set,the,separator,to,expect,between,bean,name,and,property,path,default,is,a,dot;public,void,set,bean,name,separator,string,bean,name,separator,this,bean,name,separator,bean,name,separator
PropertyOverrideConfigurer -> public void setBeanNameSeparator(String beanNameSeparator);1538724083;Set the separator to expect between bean name and property path._Default is a dot (".").;public void setBeanNameSeparator(String beanNameSeparator) {_		this.beanNameSeparator = beanNameSeparator__	};set,the,separator,to,expect,between,bean,name,and,property,path,default,is,a,dot;public,void,set,bean,name,separator,string,bean,name,separator,this,bean,name,separator,bean,name,separator
PropertyOverrideConfigurer -> public void setIgnoreInvalidKeys(boolean ignoreInvalidKeys);1328020251;Set whether to ignore invalid keys. Default is "false"._<p>If you ignore invalid keys, keys that do not follow the 'beanName.property' format_(or refer to invalid bean names or properties) will just be logged at debug level._This allows one to have arbitrary other keys in a properties file.;public void setIgnoreInvalidKeys(boolean ignoreInvalidKeys) {_		this.ignoreInvalidKeys = ignoreInvalidKeys__	};set,whether,to,ignore,invalid,keys,default,is,false,p,if,you,ignore,invalid,keys,keys,that,do,not,follow,the,bean,name,property,format,or,refer,to,invalid,bean,names,or,properties,will,just,be,logged,at,debug,level,this,allows,one,to,have,arbitrary,other,keys,in,a,properties,file;public,void,set,ignore,invalid,keys,boolean,ignore,invalid,keys,this,ignore,invalid,keys,ignore,invalid,keys
PropertyOverrideConfigurer -> public void setIgnoreInvalidKeys(boolean ignoreInvalidKeys);1355352386;Set whether to ignore invalid keys. Default is "false"._<p>If you ignore invalid keys, keys that do not follow the 'beanName.property' format_(or refer to invalid bean names or properties) will just be logged at debug level._This allows one to have arbitrary other keys in a properties file.;public void setIgnoreInvalidKeys(boolean ignoreInvalidKeys) {_		this.ignoreInvalidKeys = ignoreInvalidKeys__	};set,whether,to,ignore,invalid,keys,default,is,false,p,if,you,ignore,invalid,keys,keys,that,do,not,follow,the,bean,name,property,format,or,refer,to,invalid,bean,names,or,properties,will,just,be,logged,at,debug,level,this,allows,one,to,have,arbitrary,other,keys,in,a,properties,file;public,void,set,ignore,invalid,keys,boolean,ignore,invalid,keys,this,ignore,invalid,keys,ignore,invalid,keys
PropertyOverrideConfigurer -> public void setIgnoreInvalidKeys(boolean ignoreInvalidKeys);1356735495;Set whether to ignore invalid keys. Default is "false"._<p>If you ignore invalid keys, keys that do not follow the 'beanName.property' format_(or refer to invalid bean names or properties) will just be logged at debug level._This allows one to have arbitrary other keys in a properties file.;public void setIgnoreInvalidKeys(boolean ignoreInvalidKeys) {_		this.ignoreInvalidKeys = ignoreInvalidKeys__	};set,whether,to,ignore,invalid,keys,default,is,false,p,if,you,ignore,invalid,keys,keys,that,do,not,follow,the,bean,name,property,format,or,refer,to,invalid,bean,names,or,properties,will,just,be,logged,at,debug,level,this,allows,one,to,have,arbitrary,other,keys,in,a,properties,file;public,void,set,ignore,invalid,keys,boolean,ignore,invalid,keys,this,ignore,invalid,keys,ignore,invalid,keys
PropertyOverrideConfigurer -> public void setIgnoreInvalidKeys(boolean ignoreInvalidKeys);1364505266;Set whether to ignore invalid keys. Default is "false"._<p>If you ignore invalid keys, keys that do not follow the 'beanName.property' format_(or refer to invalid bean names or properties) will just be logged at debug level._This allows one to have arbitrary other keys in a properties file.;public void setIgnoreInvalidKeys(boolean ignoreInvalidKeys) {_		this.ignoreInvalidKeys = ignoreInvalidKeys__	};set,whether,to,ignore,invalid,keys,default,is,false,p,if,you,ignore,invalid,keys,keys,that,do,not,follow,the,bean,name,property,format,or,refer,to,invalid,bean,names,or,properties,will,just,be,logged,at,debug,level,this,allows,one,to,have,arbitrary,other,keys,in,a,properties,file;public,void,set,ignore,invalid,keys,boolean,ignore,invalid,keys,this,ignore,invalid,keys,ignore,invalid,keys
PropertyOverrideConfigurer -> public void setIgnoreInvalidKeys(boolean ignoreInvalidKeys);1385412762;Set whether to ignore invalid keys. Default is "false"._<p>If you ignore invalid keys, keys that do not follow the 'beanName.property' format_(or refer to invalid bean names or properties) will just be logged at debug level._This allows one to have arbitrary other keys in a properties file.;public void setIgnoreInvalidKeys(boolean ignoreInvalidKeys) {_		this.ignoreInvalidKeys = ignoreInvalidKeys__	};set,whether,to,ignore,invalid,keys,default,is,false,p,if,you,ignore,invalid,keys,keys,that,do,not,follow,the,bean,name,property,format,or,refer,to,invalid,bean,names,or,properties,will,just,be,logged,at,debug,level,this,allows,one,to,have,arbitrary,other,keys,in,a,properties,file;public,void,set,ignore,invalid,keys,boolean,ignore,invalid,keys,this,ignore,invalid,keys,ignore,invalid,keys
PropertyOverrideConfigurer -> public void setIgnoreInvalidKeys(boolean ignoreInvalidKeys);1469561191;Set whether to ignore invalid keys. Default is "false"._<p>If you ignore invalid keys, keys that do not follow the 'beanName.property' format_(or refer to invalid bean names or properties) will just be logged at debug level._This allows one to have arbitrary other keys in a properties file.;public void setIgnoreInvalidKeys(boolean ignoreInvalidKeys) {_		this.ignoreInvalidKeys = ignoreInvalidKeys__	};set,whether,to,ignore,invalid,keys,default,is,false,p,if,you,ignore,invalid,keys,keys,that,do,not,follow,the,bean,name,property,format,or,refer,to,invalid,bean,names,or,properties,will,just,be,logged,at,debug,level,this,allows,one,to,have,arbitrary,other,keys,in,a,properties,file;public,void,set,ignore,invalid,keys,boolean,ignore,invalid,keys,this,ignore,invalid,keys,ignore,invalid,keys
PropertyOverrideConfigurer -> public void setIgnoreInvalidKeys(boolean ignoreInvalidKeys);1496837955;Set whether to ignore invalid keys. Default is "false"._<p>If you ignore invalid keys, keys that do not follow the 'beanName.property' format_(or refer to invalid bean names or properties) will just be logged at debug level._This allows one to have arbitrary other keys in a properties file.;public void setIgnoreInvalidKeys(boolean ignoreInvalidKeys) {_		this.ignoreInvalidKeys = ignoreInvalidKeys__	};set,whether,to,ignore,invalid,keys,default,is,false,p,if,you,ignore,invalid,keys,keys,that,do,not,follow,the,bean,name,property,format,or,refer,to,invalid,bean,names,or,properties,will,just,be,logged,at,debug,level,this,allows,one,to,have,arbitrary,other,keys,in,a,properties,file;public,void,set,ignore,invalid,keys,boolean,ignore,invalid,keys,this,ignore,invalid,keys,ignore,invalid,keys
PropertyOverrideConfigurer -> public void setIgnoreInvalidKeys(boolean ignoreInvalidKeys);1530174524;Set whether to ignore invalid keys. Default is "false"._<p>If you ignore invalid keys, keys that do not follow the 'beanName.property' format_(or refer to invalid bean names or properties) will just be logged at debug level._This allows one to have arbitrary other keys in a properties file.;public void setIgnoreInvalidKeys(boolean ignoreInvalidKeys) {_		this.ignoreInvalidKeys = ignoreInvalidKeys__	};set,whether,to,ignore,invalid,keys,default,is,false,p,if,you,ignore,invalid,keys,keys,that,do,not,follow,the,bean,name,property,format,or,refer,to,invalid,bean,names,or,properties,will,just,be,logged,at,debug,level,this,allows,one,to,have,arbitrary,other,keys,in,a,properties,file;public,void,set,ignore,invalid,keys,boolean,ignore,invalid,keys,this,ignore,invalid,keys,ignore,invalid,keys
PropertyOverrideConfigurer -> public void setIgnoreInvalidKeys(boolean ignoreInvalidKeys);1538724083;Set whether to ignore invalid keys. Default is "false"._<p>If you ignore invalid keys, keys that do not follow the 'beanName.property' format_(or refer to invalid bean names or properties) will just be logged at debug level._This allows one to have arbitrary other keys in a properties file.;public void setIgnoreInvalidKeys(boolean ignoreInvalidKeys) {_		this.ignoreInvalidKeys = ignoreInvalidKeys__	};set,whether,to,ignore,invalid,keys,default,is,false,p,if,you,ignore,invalid,keys,keys,that,do,not,follow,the,bean,name,property,format,or,refer,to,invalid,bean,names,or,properties,will,just,be,logged,at,debug,level,this,allows,one,to,have,arbitrary,other,keys,in,a,properties,file;public,void,set,ignore,invalid,keys,boolean,ignore,invalid,keys,this,ignore,invalid,keys,ignore,invalid,keys
PropertyOverrideConfigurer -> protected void applyPropertyValue( 			ConfigurableListableBeanFactory factory, String beanName, String property, String value);1328020251;Apply the given property value to the corresponding bean.;protected void applyPropertyValue(_			ConfigurableListableBeanFactory factory, String beanName, String property, String value) {__		BeanDefinition bd = factory.getBeanDefinition(beanName)__		while (bd.getOriginatingBeanDefinition() != null) {_			bd = bd.getOriginatingBeanDefinition()__		}_		PropertyValue pv = new PropertyValue(property, value)__		pv.setOptional(this.ignoreInvalidKeys)__		bd.getPropertyValues().addPropertyValue(pv)__	};apply,the,given,property,value,to,the,corresponding,bean;protected,void,apply,property,value,configurable,listable,bean,factory,factory,string,bean,name,string,property,string,value,bean,definition,bd,factory,get,bean,definition,bean,name,while,bd,get,originating,bean,definition,null,bd,bd,get,originating,bean,definition,property,value,pv,new,property,value,property,value,pv,set,optional,this,ignore,invalid,keys,bd,get,property,values,add,property,value,pv
PropertyOverrideConfigurer -> protected void applyPropertyValue( 			ConfigurableListableBeanFactory factory, String beanName, String property, String value);1355352386;Apply the given property value to the corresponding bean.;protected void applyPropertyValue(_			ConfigurableListableBeanFactory factory, String beanName, String property, String value) {__		BeanDefinition bd = factory.getBeanDefinition(beanName)__		while (bd.getOriginatingBeanDefinition() != null) {_			bd = bd.getOriginatingBeanDefinition()__		}_		PropertyValue pv = new PropertyValue(property, value)__		pv.setOptional(this.ignoreInvalidKeys)__		bd.getPropertyValues().addPropertyValue(pv)__	};apply,the,given,property,value,to,the,corresponding,bean;protected,void,apply,property,value,configurable,listable,bean,factory,factory,string,bean,name,string,property,string,value,bean,definition,bd,factory,get,bean,definition,bean,name,while,bd,get,originating,bean,definition,null,bd,bd,get,originating,bean,definition,property,value,pv,new,property,value,property,value,pv,set,optional,this,ignore,invalid,keys,bd,get,property,values,add,property,value,pv
PropertyOverrideConfigurer -> protected void applyPropertyValue( 			ConfigurableListableBeanFactory factory, String beanName, String property, String value);1356735495;Apply the given property value to the corresponding bean.;protected void applyPropertyValue(_			ConfigurableListableBeanFactory factory, String beanName, String property, String value) {__		BeanDefinition bd = factory.getBeanDefinition(beanName)__		while (bd.getOriginatingBeanDefinition() != null) {_			bd = bd.getOriginatingBeanDefinition()__		}_		PropertyValue pv = new PropertyValue(property, value)__		pv.setOptional(this.ignoreInvalidKeys)__		bd.getPropertyValues().addPropertyValue(pv)__	};apply,the,given,property,value,to,the,corresponding,bean;protected,void,apply,property,value,configurable,listable,bean,factory,factory,string,bean,name,string,property,string,value,bean,definition,bd,factory,get,bean,definition,bean,name,while,bd,get,originating,bean,definition,null,bd,bd,get,originating,bean,definition,property,value,pv,new,property,value,property,value,pv,set,optional,this,ignore,invalid,keys,bd,get,property,values,add,property,value,pv
PropertyOverrideConfigurer -> protected void applyPropertyValue( 			ConfigurableListableBeanFactory factory, String beanName, String property, String value);1364505266;Apply the given property value to the corresponding bean.;protected void applyPropertyValue(_			ConfigurableListableBeanFactory factory, String beanName, String property, String value) {__		BeanDefinition bd = factory.getBeanDefinition(beanName)__		while (bd.getOriginatingBeanDefinition() != null) {_			bd = bd.getOriginatingBeanDefinition()__		}_		PropertyValue pv = new PropertyValue(property, value)__		pv.setOptional(this.ignoreInvalidKeys)__		bd.getPropertyValues().addPropertyValue(pv)__	};apply,the,given,property,value,to,the,corresponding,bean;protected,void,apply,property,value,configurable,listable,bean,factory,factory,string,bean,name,string,property,string,value,bean,definition,bd,factory,get,bean,definition,bean,name,while,bd,get,originating,bean,definition,null,bd,bd,get,originating,bean,definition,property,value,pv,new,property,value,property,value,pv,set,optional,this,ignore,invalid,keys,bd,get,property,values,add,property,value,pv
PropertyOverrideConfigurer -> protected void applyPropertyValue( 			ConfigurableListableBeanFactory factory, String beanName, String property, String value);1385412762;Apply the given property value to the corresponding bean.;protected void applyPropertyValue(_			ConfigurableListableBeanFactory factory, String beanName, String property, String value) {__		BeanDefinition bd = factory.getBeanDefinition(beanName)__		while (bd.getOriginatingBeanDefinition() != null) {_			bd = bd.getOriginatingBeanDefinition()__		}_		PropertyValue pv = new PropertyValue(property, value)__		pv.setOptional(this.ignoreInvalidKeys)__		bd.getPropertyValues().addPropertyValue(pv)__	};apply,the,given,property,value,to,the,corresponding,bean;protected,void,apply,property,value,configurable,listable,bean,factory,factory,string,bean,name,string,property,string,value,bean,definition,bd,factory,get,bean,definition,bean,name,while,bd,get,originating,bean,definition,null,bd,bd,get,originating,bean,definition,property,value,pv,new,property,value,property,value,pv,set,optional,this,ignore,invalid,keys,bd,get,property,values,add,property,value,pv
PropertyOverrideConfigurer -> protected void applyPropertyValue( 			ConfigurableListableBeanFactory factory, String beanName, String property, String value);1469561191;Apply the given property value to the corresponding bean.;protected void applyPropertyValue(_			ConfigurableListableBeanFactory factory, String beanName, String property, String value) {__		BeanDefinition bd = factory.getBeanDefinition(beanName)__		while (bd.getOriginatingBeanDefinition() != null) {_			bd = bd.getOriginatingBeanDefinition()__		}_		PropertyValue pv = new PropertyValue(property, value)__		pv.setOptional(this.ignoreInvalidKeys)__		bd.getPropertyValues().addPropertyValue(pv)__	};apply,the,given,property,value,to,the,corresponding,bean;protected,void,apply,property,value,configurable,listable,bean,factory,factory,string,bean,name,string,property,string,value,bean,definition,bd,factory,get,bean,definition,bean,name,while,bd,get,originating,bean,definition,null,bd,bd,get,originating,bean,definition,property,value,pv,new,property,value,property,value,pv,set,optional,this,ignore,invalid,keys,bd,get,property,values,add,property,value,pv
PropertyOverrideConfigurer -> protected void applyPropertyValue( 			ConfigurableListableBeanFactory factory, String beanName, String property, String value);1496837955;Apply the given property value to the corresponding bean.;protected void applyPropertyValue(_			ConfigurableListableBeanFactory factory, String beanName, String property, String value) {__		BeanDefinition bd = factory.getBeanDefinition(beanName)__		BeanDefinition bdToUse = bd__		while (bd != null) {_			bdToUse = bd__			bd = bd.getOriginatingBeanDefinition()__		}_		PropertyValue pv = new PropertyValue(property, value)__		pv.setOptional(this.ignoreInvalidKeys)__		bdToUse.getPropertyValues().addPropertyValue(pv)__	};apply,the,given,property,value,to,the,corresponding,bean;protected,void,apply,property,value,configurable,listable,bean,factory,factory,string,bean,name,string,property,string,value,bean,definition,bd,factory,get,bean,definition,bean,name,bean,definition,bd,to,use,bd,while,bd,null,bd,to,use,bd,bd,bd,get,originating,bean,definition,property,value,pv,new,property,value,property,value,pv,set,optional,this,ignore,invalid,keys,bd,to,use,get,property,values,add,property,value,pv
PropertyOverrideConfigurer -> protected void applyPropertyValue( 			ConfigurableListableBeanFactory factory, String beanName, String property, String value);1530174524;Apply the given property value to the corresponding bean.;protected void applyPropertyValue(_			ConfigurableListableBeanFactory factory, String beanName, String property, String value) {__		BeanDefinition bd = factory.getBeanDefinition(beanName)__		BeanDefinition bdToUse = bd__		while (bd != null) {_			bdToUse = bd__			bd = bd.getOriginatingBeanDefinition()__		}_		PropertyValue pv = new PropertyValue(property, value)__		pv.setOptional(this.ignoreInvalidKeys)__		bdToUse.getPropertyValues().addPropertyValue(pv)__	};apply,the,given,property,value,to,the,corresponding,bean;protected,void,apply,property,value,configurable,listable,bean,factory,factory,string,bean,name,string,property,string,value,bean,definition,bd,factory,get,bean,definition,bean,name,bean,definition,bd,to,use,bd,while,bd,null,bd,to,use,bd,bd,bd,get,originating,bean,definition,property,value,pv,new,property,value,property,value,pv,set,optional,this,ignore,invalid,keys,bd,to,use,get,property,values,add,property,value,pv
PropertyOverrideConfigurer -> protected void applyPropertyValue( 			ConfigurableListableBeanFactory factory, String beanName, String property, String value);1538724083;Apply the given property value to the corresponding bean.;protected void applyPropertyValue(_			ConfigurableListableBeanFactory factory, String beanName, String property, String value) {__		BeanDefinition bd = factory.getBeanDefinition(beanName)__		BeanDefinition bdToUse = bd__		while (bd != null) {_			bdToUse = bd__			bd = bd.getOriginatingBeanDefinition()__		}_		PropertyValue pv = new PropertyValue(property, value)__		pv.setOptional(this.ignoreInvalidKeys)__		bdToUse.getPropertyValues().addPropertyValue(pv)__	};apply,the,given,property,value,to,the,corresponding,bean;protected,void,apply,property,value,configurable,listable,bean,factory,factory,string,bean,name,string,property,string,value,bean,definition,bd,factory,get,bean,definition,bean,name,bean,definition,bd,to,use,bd,while,bd,null,bd,to,use,bd,bd,bd,get,originating,bean,definition,property,value,pv,new,property,value,property,value,pv,set,optional,this,ignore,invalid,keys,bd,to,use,get,property,values,add,property,value,pv
