# id;timestamp;commentText;codeText;commentWords;codeWords
DefaultBeanDefinitionDocumentReader -> @SuppressWarnings("deprecation")   	protected void doRegisterBeanDefinitions(Element root);1529093363;Register each bean definition within the given root {@code <beans/>} element.;@SuppressWarnings("deprecation")  _	protected void doRegisterBeanDefinitions(Element root) {_		_		_		_		_		_		_		BeanDefinitionParserDelegate parent = this.delegate__		this.delegate = createDelegate(getReaderContext(), root, parent)___		if (this.delegate.isDefaultNamespace(root)) {_			String profileSpec = root.getAttribute(PROFILE_ATTRIBUTE)__			if (StringUtils.hasText(profileSpec)) {_				String[] specifiedProfiles = StringUtils.tokenizeToStringArray(_						profileSpec, BeanDefinitionParserDelegate.MULTI_VALUE_ATTRIBUTE_DELIMITERS)__				if (!getReaderContext().getEnvironment().acceptsProfiles(specifiedProfiles)) {_					if (logger.isInfoEnabled()) {_						logger.info("Skipped XML bean definition file due to specified profiles [" + profileSpec +_								"] not matching: " + getReaderContext().getResource())__					}_					return__				}_			}_		}__		preProcessXml(root)__		parseBeanDefinitions(root, this.delegate)__		postProcessXml(root)___		this.delegate = parent__	};register,each,bean,definition,within,the,given,root,code,beans,element;suppress,warnings,deprecation,protected,void,do,register,bean,definitions,element,root,bean,definition,parser,delegate,parent,this,delegate,this,delegate,create,delegate,get,reader,context,root,parent,if,this,delegate,is,default,namespace,root,string,profile,spec,root,get,attribute,if,string,utils,has,text,profile,spec,string,specified,profiles,string,utils,tokenize,to,string,array,profile,spec,bean,definition,parser,delegate,if,get,reader,context,get,environment,accepts,profiles,specified,profiles,if,logger,is,info,enabled,logger,info,skipped,xml,bean,definition,file,due,to,specified,profiles,profile,spec,not,matching,get,reader,context,get,resource,return,pre,process,xml,root,parse,bean,definitions,root,this,delegate,post,process,xml,root,this,delegate,parent
DefaultBeanDefinitionDocumentReader -> @SuppressWarnings("deprecation")   	protected void doRegisterBeanDefinitions(Element root);1529405413;Register each bean definition within the given root {@code <beans/>} element.;@SuppressWarnings("deprecation")  _	protected void doRegisterBeanDefinitions(Element root) {_		_		_		_		_		_		_		BeanDefinitionParserDelegate parent = this.delegate__		this.delegate = createDelegate(getReaderContext(), root, parent)___		if (this.delegate.isDefaultNamespace(root)) {_			String profileSpec = root.getAttribute(PROFILE_ATTRIBUTE)__			if (StringUtils.hasText(profileSpec)) {_				String[] specifiedProfiles = StringUtils.tokenizeToStringArray(_						profileSpec, BeanDefinitionParserDelegate.MULTI_VALUE_ATTRIBUTE_DELIMITERS)__				_				_				if (!getReaderContext().getEnvironment().acceptsProfiles(specifiedProfiles)) {_					if (logger.isInfoEnabled()) {_						logger.info("Skipped XML bean definition file due to specified profiles [" + profileSpec +_								"] not matching: " + getReaderContext().getResource())__					}_					return__				}_			}_		}__		preProcessXml(root)__		parseBeanDefinitions(root, this.delegate)__		postProcessXml(root)___		this.delegate = parent__	};register,each,bean,definition,within,the,given,root,code,beans,element;suppress,warnings,deprecation,protected,void,do,register,bean,definitions,element,root,bean,definition,parser,delegate,parent,this,delegate,this,delegate,create,delegate,get,reader,context,root,parent,if,this,delegate,is,default,namespace,root,string,profile,spec,root,get,attribute,if,string,utils,has,text,profile,spec,string,specified,profiles,string,utils,tokenize,to,string,array,profile,spec,bean,definition,parser,delegate,if,get,reader,context,get,environment,accepts,profiles,specified,profiles,if,logger,is,info,enabled,logger,info,skipped,xml,bean,definition,file,due,to,specified,profiles,profile,spec,not,matching,get,reader,context,get,resource,return,pre,process,xml,root,parse,bean,definitions,root,this,delegate,post,process,xml,root,this,delegate,parent
DefaultBeanDefinitionDocumentReader -> @SuppressWarnings("deprecation")   	protected void doRegisterBeanDefinitions(Element root);1532091916;Register each bean definition within the given root {@code <beans/>} element.;@SuppressWarnings("deprecation")  _	protected void doRegisterBeanDefinitions(Element root) {_		_		_		_		_		_		_		BeanDefinitionParserDelegate parent = this.delegate__		this.delegate = createDelegate(getReaderContext(), root, parent)___		if (this.delegate.isDefaultNamespace(root)) {_			String profileSpec = root.getAttribute(PROFILE_ATTRIBUTE)__			if (StringUtils.hasText(profileSpec)) {_				String[] specifiedProfiles = StringUtils.tokenizeToStringArray(_						profileSpec, BeanDefinitionParserDelegate.MULTI_VALUE_ATTRIBUTE_DELIMITERS)__				_				_				if (!getReaderContext().getEnvironment().acceptsProfiles(specifiedProfiles)) {_					if (logger.isDebugEnabled()) {_						logger.debug("Skipped XML bean definition file due to specified profiles [" + profileSpec +_								"] not matching: " + getReaderContext().getResource())__					}_					return__				}_			}_		}__		preProcessXml(root)__		parseBeanDefinitions(root, this.delegate)__		postProcessXml(root)___		this.delegate = parent__	};register,each,bean,definition,within,the,given,root,code,beans,element;suppress,warnings,deprecation,protected,void,do,register,bean,definitions,element,root,bean,definition,parser,delegate,parent,this,delegate,this,delegate,create,delegate,get,reader,context,root,parent,if,this,delegate,is,default,namespace,root,string,profile,spec,root,get,attribute,if,string,utils,has,text,profile,spec,string,specified,profiles,string,utils,tokenize,to,string,array,profile,spec,bean,definition,parser,delegate,if,get,reader,context,get,environment,accepts,profiles,specified,profiles,if,logger,is,debug,enabled,logger,debug,skipped,xml,bean,definition,file,due,to,specified,profiles,profile,spec,not,matching,get,reader,context,get,resource,return,pre,process,xml,root,parse,bean,definitions,root,this,delegate,post,process,xml,root,this,delegate,parent
DefaultBeanDefinitionDocumentReader -> @SuppressWarnings("deprecation")   	protected void doRegisterBeanDefinitions(Element root);1532706365;Register each bean definition within the given root {@code <beans/>} element.;@SuppressWarnings("deprecation")  _	protected void doRegisterBeanDefinitions(Element root) {_		_		_		_		_		_		_		BeanDefinitionParserDelegate parent = this.delegate__		this.delegate = createDelegate(getReaderContext(), root, parent)___		if (this.delegate.isDefaultNamespace(root)) {_			String profileSpec = root.getAttribute(PROFILE_ATTRIBUTE)__			if (StringUtils.hasText(profileSpec)) {_				String[] specifiedProfiles = StringUtils.tokenizeToStringArray(_						profileSpec, BeanDefinitionParserDelegate.MULTI_VALUE_ATTRIBUTE_DELIMITERS)__				_				_				if (!getReaderContext().getEnvironment().acceptsProfiles(specifiedProfiles)) {_					if (logger.isDebugEnabled()) {_						logger.debug("Skipped XML bean definition file due to specified profiles [" + profileSpec +_								"] not matching: " + getReaderContext().getResource())__					}_					return__				}_			}_		}__		preProcessXml(root)__		parseBeanDefinitions(root, this.delegate)__		postProcessXml(root)___		this.delegate = parent__	};register,each,bean,definition,within,the,given,root,code,beans,element;suppress,warnings,deprecation,protected,void,do,register,bean,definitions,element,root,bean,definition,parser,delegate,parent,this,delegate,this,delegate,create,delegate,get,reader,context,root,parent,if,this,delegate,is,default,namespace,root,string,profile,spec,root,get,attribute,if,string,utils,has,text,profile,spec,string,specified,profiles,string,utils,tokenize,to,string,array,profile,spec,bean,definition,parser,delegate,if,get,reader,context,get,environment,accepts,profiles,specified,profiles,if,logger,is,debug,enabled,logger,debug,skipped,xml,bean,definition,file,due,to,specified,profiles,profile,spec,not,matching,get,reader,context,get,resource,return,pre,process,xml,root,parse,bean,definitions,root,this,delegate,post,process,xml,root,this,delegate,parent
DefaultBeanDefinitionDocumentReader -> @Nullable 	protected Object extractSource(Element ele);1496837955;Invoke the {@link org.springframework.beans.factory.parsing.SourceExtractor}_to pull the source metadata from the supplied {@link Element}.;@Nullable_	protected Object extractSource(Element ele) {_		return getReaderContext().extractSource(ele)__	};invoke,the,link,org,springframework,beans,factory,parsing,source,extractor,to,pull,the,source,metadata,from,the,supplied,link,element;nullable,protected,object,extract,source,element,ele,return,get,reader,context,extract,source,ele
DefaultBeanDefinitionDocumentReader -> @Nullable 	protected Object extractSource(Element ele);1500495740;Invoke the {@link org.springframework.beans.factory.parsing.SourceExtractor}_to pull the source metadata from the supplied {@link Element}.;@Nullable_	protected Object extractSource(Element ele) {_		return getReaderContext().extractSource(ele)__	};invoke,the,link,org,springframework,beans,factory,parsing,source,extractor,to,pull,the,source,metadata,from,the,supplied,link,element;nullable,protected,object,extract,source,element,ele,return,get,reader,context,extract,source,ele
DefaultBeanDefinitionDocumentReader -> @Nullable 	protected Object extractSource(Element ele);1519295386;Invoke the {@link org.springframework.beans.factory.parsing.SourceExtractor}_to pull the source metadata from the supplied {@link Element}.;@Nullable_	protected Object extractSource(Element ele) {_		return getReaderContext().extractSource(ele)__	};invoke,the,link,org,springframework,beans,factory,parsing,source,extractor,to,pull,the,source,metadata,from,the,supplied,link,element;nullable,protected,object,extract,source,element,ele,return,get,reader,context,extract,source,ele
DefaultBeanDefinitionDocumentReader -> @Nullable 	protected Object extractSource(Element ele);1529093363;Invoke the {@link org.springframework.beans.factory.parsing.SourceExtractor}_to pull the source metadata from the supplied {@link Element}.;@Nullable_	protected Object extractSource(Element ele) {_		return getReaderContext().extractSource(ele)__	};invoke,the,link,org,springframework,beans,factory,parsing,source,extractor,to,pull,the,source,metadata,from,the,supplied,link,element;nullable,protected,object,extract,source,element,ele,return,get,reader,context,extract,source,ele
DefaultBeanDefinitionDocumentReader -> @Nullable 	protected Object extractSource(Element ele);1529405413;Invoke the {@link org.springframework.beans.factory.parsing.SourceExtractor}_to pull the source metadata from the supplied {@link Element}.;@Nullable_	protected Object extractSource(Element ele) {_		return getReaderContext().extractSource(ele)__	};invoke,the,link,org,springframework,beans,factory,parsing,source,extractor,to,pull,the,source,metadata,from,the,supplied,link,element;nullable,protected,object,extract,source,element,ele,return,get,reader,context,extract,source,ele
DefaultBeanDefinitionDocumentReader -> @Nullable 	protected Object extractSource(Element ele);1532091916;Invoke the {@link org.springframework.beans.factory.parsing.SourceExtractor}_to pull the source metadata from the supplied {@link Element}.;@Nullable_	protected Object extractSource(Element ele) {_		return getReaderContext().extractSource(ele)__	};invoke,the,link,org,springframework,beans,factory,parsing,source,extractor,to,pull,the,source,metadata,from,the,supplied,link,element;nullable,protected,object,extract,source,element,ele,return,get,reader,context,extract,source,ele
DefaultBeanDefinitionDocumentReader -> @Nullable 	protected Object extractSource(Element ele);1532706365;Invoke the {@link org.springframework.beans.factory.parsing.SourceExtractor}_to pull the source metadata from the supplied {@link Element}.;@Nullable_	protected Object extractSource(Element ele) {_		return getReaderContext().extractSource(ele)__	};invoke,the,link,org,springframework,beans,factory,parsing,source,extractor,to,pull,the,source,metadata,from,the,supplied,link,element;nullable,protected,object,extract,source,element,ele,return,get,reader,context,extract,source,ele
DefaultBeanDefinitionDocumentReader -> protected void preProcessXml(Element root);1328020251;Allow the XML to be extensible by processing any custom element types first,_before we start to process the bean definitions. This method is a natural_extension point for any other custom pre-processing of the XML._<p>The default implementation is empty. Subclasses can override this method to_convert custom elements into standard Spring bean definitions, for example._Implementors have access to the parser's bean definition reader and the_underlying XML resource, through the corresponding accessors._@see #getReaderContext();protected void preProcessXml(Element root) {_	};allow,the,xml,to,be,extensible,by,processing,any,custom,element,types,first,before,we,start,to,process,the,bean,definitions,this,method,is,a,natural,extension,point,for,any,other,custom,pre,processing,of,the,xml,p,the,default,implementation,is,empty,subclasses,can,override,this,method,to,convert,custom,elements,into,standard,spring,bean,definitions,for,example,implementors,have,access,to,the,parser,s,bean,definition,reader,and,the,underlying,xml,resource,through,the,corresponding,accessors,see,get,reader,context;protected,void,pre,process,xml,element,root
DefaultBeanDefinitionDocumentReader -> protected void preProcessXml(Element root);1356735495;Allow the XML to be extensible by processing any custom element types first,_before we start to process the bean definitions. This method is a natural_extension point for any other custom pre-processing of the XML._<p>The default implementation is empty. Subclasses can override this method to_convert custom elements into standard Spring bean definitions, for example._Implementors have access to the parser's bean definition reader and the_underlying XML resource, through the corresponding accessors._@see #getReaderContext();protected void preProcessXml(Element root) {_	};allow,the,xml,to,be,extensible,by,processing,any,custom,element,types,first,before,we,start,to,process,the,bean,definitions,this,method,is,a,natural,extension,point,for,any,other,custom,pre,processing,of,the,xml,p,the,default,implementation,is,empty,subclasses,can,override,this,method,to,convert,custom,elements,into,standard,spring,bean,definitions,for,example,implementors,have,access,to,the,parser,s,bean,definition,reader,and,the,underlying,xml,resource,through,the,corresponding,accessors,see,get,reader,context;protected,void,pre,process,xml,element,root
DefaultBeanDefinitionDocumentReader -> protected void preProcessXml(Element root);1357119239;Allow the XML to be extensible by processing any custom element types first,_before we start to process the bean definitions. This method is a natural_extension point for any other custom pre-processing of the XML._<p>The default implementation is empty. Subclasses can override this method to_convert custom elements into standard Spring bean definitions, for example._Implementors have access to the parser's bean definition reader and the_underlying XML resource, through the corresponding accessors._@see #getReaderContext();protected void preProcessXml(Element root) {_	};allow,the,xml,to,be,extensible,by,processing,any,custom,element,types,first,before,we,start,to,process,the,bean,definitions,this,method,is,a,natural,extension,point,for,any,other,custom,pre,processing,of,the,xml,p,the,default,implementation,is,empty,subclasses,can,override,this,method,to,convert,custom,elements,into,standard,spring,bean,definitions,for,example,implementors,have,access,to,the,parser,s,bean,definition,reader,and,the,underlying,xml,resource,through,the,corresponding,accessors,see,get,reader,context;protected,void,pre,process,xml,element,root
DefaultBeanDefinitionDocumentReader -> protected void preProcessXml(Element root);1362408075;Allow the XML to be extensible by processing any custom element types first,_before we start to process the bean definitions. This method is a natural_extension point for any other custom pre-processing of the XML._<p>The default implementation is empty. Subclasses can override this method to_convert custom elements into standard Spring bean definitions, for example._Implementors have access to the parser's bean definition reader and the_underlying XML resource, through the corresponding accessors._@see #getReaderContext();protected void preProcessXml(Element root) {_	};allow,the,xml,to,be,extensible,by,processing,any,custom,element,types,first,before,we,start,to,process,the,bean,definitions,this,method,is,a,natural,extension,point,for,any,other,custom,pre,processing,of,the,xml,p,the,default,implementation,is,empty,subclasses,can,override,this,method,to,convert,custom,elements,into,standard,spring,bean,definitions,for,example,implementors,have,access,to,the,parser,s,bean,definition,reader,and,the,underlying,xml,resource,through,the,corresponding,accessors,see,get,reader,context;protected,void,pre,process,xml,element,root
DefaultBeanDefinitionDocumentReader -> protected void preProcessXml(Element root);1368482696;Allow the XML to be extensible by processing any custom element types first,_before we start to process the bean definitions. This method is a natural_extension point for any other custom pre-processing of the XML._<p>The default implementation is empty. Subclasses can override this method to_convert custom elements into standard Spring bean definitions, for example._Implementors have access to the parser's bean definition reader and the_underlying XML resource, through the corresponding accessors._@see #getReaderContext();protected void preProcessXml(Element root) {_	};allow,the,xml,to,be,extensible,by,processing,any,custom,element,types,first,before,we,start,to,process,the,bean,definitions,this,method,is,a,natural,extension,point,for,any,other,custom,pre,processing,of,the,xml,p,the,default,implementation,is,empty,subclasses,can,override,this,method,to,convert,custom,elements,into,standard,spring,bean,definitions,for,example,implementors,have,access,to,the,parser,s,bean,definition,reader,and,the,underlying,xml,resource,through,the,corresponding,accessors,see,get,reader,context;protected,void,pre,process,xml,element,root
DefaultBeanDefinitionDocumentReader -> protected void preProcessXml(Element root);1382030648;Allow the XML to be extensible by processing any custom element types first,_before we start to process the bean definitions. This method is a natural_extension point for any other custom pre-processing of the XML._<p>The default implementation is empty. Subclasses can override this method to_convert custom elements into standard Spring bean definitions, for example._Implementors have access to the parser's bean definition reader and the_underlying XML resource, through the corresponding accessors._@see #getReaderContext();protected void preProcessXml(Element root) {_	};allow,the,xml,to,be,extensible,by,processing,any,custom,element,types,first,before,we,start,to,process,the,bean,definitions,this,method,is,a,natural,extension,point,for,any,other,custom,pre,processing,of,the,xml,p,the,default,implementation,is,empty,subclasses,can,override,this,method,to,convert,custom,elements,into,standard,spring,bean,definitions,for,example,implementors,have,access,to,the,parser,s,bean,definition,reader,and,the,underlying,xml,resource,through,the,corresponding,accessors,see,get,reader,context;protected,void,pre,process,xml,element,root
DefaultBeanDefinitionDocumentReader -> protected void preProcessXml(Element root);1404933463;Allow the XML to be extensible by processing any custom element types first,_before we start to process the bean definitions. This method is a natural_extension point for any other custom pre-processing of the XML._<p>The default implementation is empty. Subclasses can override this method to_convert custom elements into standard Spring bean definitions, for example._Implementors have access to the parser's bean definition reader and the_underlying XML resource, through the corresponding accessors._@see #getReaderContext();protected void preProcessXml(Element root) {_	};allow,the,xml,to,be,extensible,by,processing,any,custom,element,types,first,before,we,start,to,process,the,bean,definitions,this,method,is,a,natural,extension,point,for,any,other,custom,pre,processing,of,the,xml,p,the,default,implementation,is,empty,subclasses,can,override,this,method,to,convert,custom,elements,into,standard,spring,bean,definitions,for,example,implementors,have,access,to,the,parser,s,bean,definition,reader,and,the,underlying,xml,resource,through,the,corresponding,accessors,see,get,reader,context;protected,void,pre,process,xml,element,root
DefaultBeanDefinitionDocumentReader -> protected void preProcessXml(Element root);1411599760;Allow the XML to be extensible by processing any custom element types first,_before we start to process the bean definitions. This method is a natural_extension point for any other custom pre-processing of the XML._<p>The default implementation is empty. Subclasses can override this method to_convert custom elements into standard Spring bean definitions, for example._Implementors have access to the parser's bean definition reader and the_underlying XML resource, through the corresponding accessors._@see #getReaderContext();protected void preProcessXml(Element root) {_	};allow,the,xml,to,be,extensible,by,processing,any,custom,element,types,first,before,we,start,to,process,the,bean,definitions,this,method,is,a,natural,extension,point,for,any,other,custom,pre,processing,of,the,xml,p,the,default,implementation,is,empty,subclasses,can,override,this,method,to,convert,custom,elements,into,standard,spring,bean,definitions,for,example,implementors,have,access,to,the,parser,s,bean,definition,reader,and,the,underlying,xml,resource,through,the,corresponding,accessors,see,get,reader,context;protected,void,pre,process,xml,element,root
DefaultBeanDefinitionDocumentReader -> protected void preProcessXml(Element root);1419966315;Allow the XML to be extensible by processing any custom element types first,_before we start to process the bean definitions. This method is a natural_extension point for any other custom pre-processing of the XML._<p>The default implementation is empty. Subclasses can override this method to_convert custom elements into standard Spring bean definitions, for example._Implementors have access to the parser's bean definition reader and the_underlying XML resource, through the corresponding accessors._@see #getReaderContext();protected void preProcessXml(Element root) {_	};allow,the,xml,to,be,extensible,by,processing,any,custom,element,types,first,before,we,start,to,process,the,bean,definitions,this,method,is,a,natural,extension,point,for,any,other,custom,pre,processing,of,the,xml,p,the,default,implementation,is,empty,subclasses,can,override,this,method,to,convert,custom,elements,into,standard,spring,bean,definitions,for,example,implementors,have,access,to,the,parser,s,bean,definition,reader,and,the,underlying,xml,resource,through,the,corresponding,accessors,see,get,reader,context;protected,void,pre,process,xml,element,root
DefaultBeanDefinitionDocumentReader -> protected void preProcessXml(Element root);1424720154;Allow the XML to be extensible by processing any custom element types first,_before we start to process the bean definitions. This method is a natural_extension point for any other custom pre-processing of the XML._<p>The default implementation is empty. Subclasses can override this method to_convert custom elements into standard Spring bean definitions, for example._Implementors have access to the parser's bean definition reader and the_underlying XML resource, through the corresponding accessors._@see #getReaderContext();protected void preProcessXml(Element root) {_	};allow,the,xml,to,be,extensible,by,processing,any,custom,element,types,first,before,we,start,to,process,the,bean,definitions,this,method,is,a,natural,extension,point,for,any,other,custom,pre,processing,of,the,xml,p,the,default,implementation,is,empty,subclasses,can,override,this,method,to,convert,custom,elements,into,standard,spring,bean,definitions,for,example,implementors,have,access,to,the,parser,s,bean,definition,reader,and,the,underlying,xml,resource,through,the,corresponding,accessors,see,get,reader,context;protected,void,pre,process,xml,element,root
DefaultBeanDefinitionDocumentReader -> protected void preProcessXml(Element root);1453749972;Allow the XML to be extensible by processing any custom element types first,_before we start to process the bean definitions. This method is a natural_extension point for any other custom pre-processing of the XML._<p>The default implementation is empty. Subclasses can override this method to_convert custom elements into standard Spring bean definitions, for example._Implementors have access to the parser's bean definition reader and the_underlying XML resource, through the corresponding accessors._@see #getReaderContext();protected void preProcessXml(Element root) {_	};allow,the,xml,to,be,extensible,by,processing,any,custom,element,types,first,before,we,start,to,process,the,bean,definitions,this,method,is,a,natural,extension,point,for,any,other,custom,pre,processing,of,the,xml,p,the,default,implementation,is,empty,subclasses,can,override,this,method,to,convert,custom,elements,into,standard,spring,bean,definitions,for,example,implementors,have,access,to,the,parser,s,bean,definition,reader,and,the,underlying,xml,resource,through,the,corresponding,accessors,see,get,reader,context;protected,void,pre,process,xml,element,root
DefaultBeanDefinitionDocumentReader -> protected void preProcessXml(Element root);1467730834;Allow the XML to be extensible by processing any custom element types first,_before we start to process the bean definitions. This method is a natural_extension point for any other custom pre-processing of the XML._<p>The default implementation is empty. Subclasses can override this method to_convert custom elements into standard Spring bean definitions, for example._Implementors have access to the parser's bean definition reader and the_underlying XML resource, through the corresponding accessors._@see #getReaderContext();protected void preProcessXml(Element root) {_	};allow,the,xml,to,be,extensible,by,processing,any,custom,element,types,first,before,we,start,to,process,the,bean,definitions,this,method,is,a,natural,extension,point,for,any,other,custom,pre,processing,of,the,xml,p,the,default,implementation,is,empty,subclasses,can,override,this,method,to,convert,custom,elements,into,standard,spring,bean,definitions,for,example,implementors,have,access,to,the,parser,s,bean,definition,reader,and,the,underlying,xml,resource,through,the,corresponding,accessors,see,get,reader,context;protected,void,pre,process,xml,element,root
DefaultBeanDefinitionDocumentReader -> protected void preProcessXml(Element root);1496837955;Allow the XML to be extensible by processing any custom element types first,_before we start to process the bean definitions. This method is a natural_extension point for any other custom pre-processing of the XML._<p>The default implementation is empty. Subclasses can override this method to_convert custom elements into standard Spring bean definitions, for example._Implementors have access to the parser's bean definition reader and the_underlying XML resource, through the corresponding accessors._@see #getReaderContext();protected void preProcessXml(Element root) {_	};allow,the,xml,to,be,extensible,by,processing,any,custom,element,types,first,before,we,start,to,process,the,bean,definitions,this,method,is,a,natural,extension,point,for,any,other,custom,pre,processing,of,the,xml,p,the,default,implementation,is,empty,subclasses,can,override,this,method,to,convert,custom,elements,into,standard,spring,bean,definitions,for,example,implementors,have,access,to,the,parser,s,bean,definition,reader,and,the,underlying,xml,resource,through,the,corresponding,accessors,see,get,reader,context;protected,void,pre,process,xml,element,root
DefaultBeanDefinitionDocumentReader -> protected void preProcessXml(Element root);1500495740;Allow the XML to be extensible by processing any custom element types first,_before we start to process the bean definitions. This method is a natural_extension point for any other custom pre-processing of the XML._<p>The default implementation is empty. Subclasses can override this method to_convert custom elements into standard Spring bean definitions, for example._Implementors have access to the parser's bean definition reader and the_underlying XML resource, through the corresponding accessors._@see #getReaderContext();protected void preProcessXml(Element root) {_	};allow,the,xml,to,be,extensible,by,processing,any,custom,element,types,first,before,we,start,to,process,the,bean,definitions,this,method,is,a,natural,extension,point,for,any,other,custom,pre,processing,of,the,xml,p,the,default,implementation,is,empty,subclasses,can,override,this,method,to,convert,custom,elements,into,standard,spring,bean,definitions,for,example,implementors,have,access,to,the,parser,s,bean,definition,reader,and,the,underlying,xml,resource,through,the,corresponding,accessors,see,get,reader,context;protected,void,pre,process,xml,element,root
DefaultBeanDefinitionDocumentReader -> protected void preProcessXml(Element root);1519295386;Allow the XML to be extensible by processing any custom element types first,_before we start to process the bean definitions. This method is a natural_extension point for any other custom pre-processing of the XML._<p>The default implementation is empty. Subclasses can override this method to_convert custom elements into standard Spring bean definitions, for example._Implementors have access to the parser's bean definition reader and the_underlying XML resource, through the corresponding accessors._@see #getReaderContext();protected void preProcessXml(Element root) {_	};allow,the,xml,to,be,extensible,by,processing,any,custom,element,types,first,before,we,start,to,process,the,bean,definitions,this,method,is,a,natural,extension,point,for,any,other,custom,pre,processing,of,the,xml,p,the,default,implementation,is,empty,subclasses,can,override,this,method,to,convert,custom,elements,into,standard,spring,bean,definitions,for,example,implementors,have,access,to,the,parser,s,bean,definition,reader,and,the,underlying,xml,resource,through,the,corresponding,accessors,see,get,reader,context;protected,void,pre,process,xml,element,root
DefaultBeanDefinitionDocumentReader -> protected void preProcessXml(Element root);1529093363;Allow the XML to be extensible by processing any custom element types first,_before we start to process the bean definitions. This method is a natural_extension point for any other custom pre-processing of the XML._<p>The default implementation is empty. Subclasses can override this method to_convert custom elements into standard Spring bean definitions, for example._Implementors have access to the parser's bean definition reader and the_underlying XML resource, through the corresponding accessors._@see #getReaderContext();protected void preProcessXml(Element root) {_	};allow,the,xml,to,be,extensible,by,processing,any,custom,element,types,first,before,we,start,to,process,the,bean,definitions,this,method,is,a,natural,extension,point,for,any,other,custom,pre,processing,of,the,xml,p,the,default,implementation,is,empty,subclasses,can,override,this,method,to,convert,custom,elements,into,standard,spring,bean,definitions,for,example,implementors,have,access,to,the,parser,s,bean,definition,reader,and,the,underlying,xml,resource,through,the,corresponding,accessors,see,get,reader,context;protected,void,pre,process,xml,element,root
DefaultBeanDefinitionDocumentReader -> protected void preProcessXml(Element root);1529405413;Allow the XML to be extensible by processing any custom element types first,_before we start to process the bean definitions. This method is a natural_extension point for any other custom pre-processing of the XML._<p>The default implementation is empty. Subclasses can override this method to_convert custom elements into standard Spring bean definitions, for example._Implementors have access to the parser's bean definition reader and the_underlying XML resource, through the corresponding accessors._@see #getReaderContext();protected void preProcessXml(Element root) {_	};allow,the,xml,to,be,extensible,by,processing,any,custom,element,types,first,before,we,start,to,process,the,bean,definitions,this,method,is,a,natural,extension,point,for,any,other,custom,pre,processing,of,the,xml,p,the,default,implementation,is,empty,subclasses,can,override,this,method,to,convert,custom,elements,into,standard,spring,bean,definitions,for,example,implementors,have,access,to,the,parser,s,bean,definition,reader,and,the,underlying,xml,resource,through,the,corresponding,accessors,see,get,reader,context;protected,void,pre,process,xml,element,root
DefaultBeanDefinitionDocumentReader -> protected void preProcessXml(Element root);1532091916;Allow the XML to be extensible by processing any custom element types first,_before we start to process the bean definitions. This method is a natural_extension point for any other custom pre-processing of the XML._<p>The default implementation is empty. Subclasses can override this method to_convert custom elements into standard Spring bean definitions, for example._Implementors have access to the parser's bean definition reader and the_underlying XML resource, through the corresponding accessors._@see #getReaderContext();protected void preProcessXml(Element root) {_	};allow,the,xml,to,be,extensible,by,processing,any,custom,element,types,first,before,we,start,to,process,the,bean,definitions,this,method,is,a,natural,extension,point,for,any,other,custom,pre,processing,of,the,xml,p,the,default,implementation,is,empty,subclasses,can,override,this,method,to,convert,custom,elements,into,standard,spring,bean,definitions,for,example,implementors,have,access,to,the,parser,s,bean,definition,reader,and,the,underlying,xml,resource,through,the,corresponding,accessors,see,get,reader,context;protected,void,pre,process,xml,element,root
DefaultBeanDefinitionDocumentReader -> protected void preProcessXml(Element root);1532706365;Allow the XML to be extensible by processing any custom element types first,_before we start to process the bean definitions. This method is a natural_extension point for any other custom pre-processing of the XML._<p>The default implementation is empty. Subclasses can override this method to_convert custom elements into standard Spring bean definitions, for example._Implementors have access to the parser's bean definition reader and the_underlying XML resource, through the corresponding accessors._@see #getReaderContext();protected void preProcessXml(Element root) {_	};allow,the,xml,to,be,extensible,by,processing,any,custom,element,types,first,before,we,start,to,process,the,bean,definitions,this,method,is,a,natural,extension,point,for,any,other,custom,pre,processing,of,the,xml,p,the,default,implementation,is,empty,subclasses,can,override,this,method,to,convert,custom,elements,into,standard,spring,bean,definitions,for,example,implementors,have,access,to,the,parser,s,bean,definition,reader,and,the,underlying,xml,resource,through,the,corresponding,accessors,see,get,reader,context;protected,void,pre,process,xml,element,root
DefaultBeanDefinitionDocumentReader -> protected void parseBeanDefinitions(Element root, BeanDefinitionParserDelegate delegate);1328020251;Parse the elements at the root level in the document:_"import", "alias", "bean"._@param root the DOM root element of the document;protected void parseBeanDefinitions(Element root, BeanDefinitionParserDelegate delegate) {_		if (delegate.isDefaultNamespace(root)) {_			NodeList nl = root.getChildNodes()__			for (int i = 0_ i < nl.getLength()_ i++) {_				Node node = nl.item(i)__				if (node instanceof Element) {_					Element ele = (Element) node__					if (delegate.isDefaultNamespace(ele)) {_						parseDefaultElement(ele, delegate)__					}_					else {_						delegate.parseCustomElement(ele)__					}_				}_			}_		}_		else {_			delegate.parseCustomElement(root)__		}_	};parse,the,elements,at,the,root,level,in,the,document,import,alias,bean,param,root,the,dom,root,element,of,the,document;protected,void,parse,bean,definitions,element,root,bean,definition,parser,delegate,delegate,if,delegate,is,default,namespace,root,node,list,nl,root,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,element,ele,element,node,if,delegate,is,default,namespace,ele,parse,default,element,ele,delegate,else,delegate,parse,custom,element,ele,else,delegate,parse,custom,element,root
DefaultBeanDefinitionDocumentReader -> protected void parseBeanDefinitions(Element root, BeanDefinitionParserDelegate delegate);1356735495;Parse the elements at the root level in the document:_"import", "alias", "bean"._@param root the DOM root element of the document;protected void parseBeanDefinitions(Element root, BeanDefinitionParserDelegate delegate) {_		if (delegate.isDefaultNamespace(root)) {_			NodeList nl = root.getChildNodes()__			for (int i = 0_ i < nl.getLength()_ i++) {_				Node node = nl.item(i)__				if (node instanceof Element) {_					Element ele = (Element) node__					if (delegate.isDefaultNamespace(ele)) {_						parseDefaultElement(ele, delegate)__					}_					else {_						delegate.parseCustomElement(ele)__					}_				}_			}_		}_		else {_			delegate.parseCustomElement(root)__		}_	};parse,the,elements,at,the,root,level,in,the,document,import,alias,bean,param,root,the,dom,root,element,of,the,document;protected,void,parse,bean,definitions,element,root,bean,definition,parser,delegate,delegate,if,delegate,is,default,namespace,root,node,list,nl,root,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,element,ele,element,node,if,delegate,is,default,namespace,ele,parse,default,element,ele,delegate,else,delegate,parse,custom,element,ele,else,delegate,parse,custom,element,root
DefaultBeanDefinitionDocumentReader -> protected void parseBeanDefinitions(Element root, BeanDefinitionParserDelegate delegate);1357119239;Parse the elements at the root level in the document:_"import", "alias", "bean"._@param root the DOM root element of the document;protected void parseBeanDefinitions(Element root, BeanDefinitionParserDelegate delegate) {_		if (delegate.isDefaultNamespace(root)) {_			NodeList nl = root.getChildNodes()__			for (int i = 0_ i < nl.getLength()_ i++) {_				Node node = nl.item(i)__				if (node instanceof Element) {_					Element ele = (Element) node__					if (delegate.isDefaultNamespace(ele)) {_						parseDefaultElement(ele, delegate)__					}_					else {_						delegate.parseCustomElement(ele)__					}_				}_			}_		}_		else {_			delegate.parseCustomElement(root)__		}_	};parse,the,elements,at,the,root,level,in,the,document,import,alias,bean,param,root,the,dom,root,element,of,the,document;protected,void,parse,bean,definitions,element,root,bean,definition,parser,delegate,delegate,if,delegate,is,default,namespace,root,node,list,nl,root,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,element,ele,element,node,if,delegate,is,default,namespace,ele,parse,default,element,ele,delegate,else,delegate,parse,custom,element,ele,else,delegate,parse,custom,element,root
DefaultBeanDefinitionDocumentReader -> protected void parseBeanDefinitions(Element root, BeanDefinitionParserDelegate delegate);1362408075;Parse the elements at the root level in the document:_"import", "alias", "bean"._@param root the DOM root element of the document;protected void parseBeanDefinitions(Element root, BeanDefinitionParserDelegate delegate) {_		if (delegate.isDefaultNamespace(root)) {_			NodeList nl = root.getChildNodes()__			for (int i = 0_ i < nl.getLength()_ i++) {_				Node node = nl.item(i)__				if (node instanceof Element) {_					Element ele = (Element) node__					if (delegate.isDefaultNamespace(ele)) {_						parseDefaultElement(ele, delegate)__					}_					else {_						delegate.parseCustomElement(ele)__					}_				}_			}_		}_		else {_			delegate.parseCustomElement(root)__		}_	};parse,the,elements,at,the,root,level,in,the,document,import,alias,bean,param,root,the,dom,root,element,of,the,document;protected,void,parse,bean,definitions,element,root,bean,definition,parser,delegate,delegate,if,delegate,is,default,namespace,root,node,list,nl,root,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,element,ele,element,node,if,delegate,is,default,namespace,ele,parse,default,element,ele,delegate,else,delegate,parse,custom,element,ele,else,delegate,parse,custom,element,root
DefaultBeanDefinitionDocumentReader -> protected void parseBeanDefinitions(Element root, BeanDefinitionParserDelegate delegate);1368482696;Parse the elements at the root level in the document:_"import", "alias", "bean"._@param root the DOM root element of the document;protected void parseBeanDefinitions(Element root, BeanDefinitionParserDelegate delegate) {_		if (delegate.isDefaultNamespace(root)) {_			NodeList nl = root.getChildNodes()__			for (int i = 0_ i < nl.getLength()_ i++) {_				Node node = nl.item(i)__				if (node instanceof Element) {_					Element ele = (Element) node__					if (delegate.isDefaultNamespace(ele)) {_						parseDefaultElement(ele, delegate)__					}_					else {_						delegate.parseCustomElement(ele)__					}_				}_			}_		}_		else {_			delegate.parseCustomElement(root)__		}_	};parse,the,elements,at,the,root,level,in,the,document,import,alias,bean,param,root,the,dom,root,element,of,the,document;protected,void,parse,bean,definitions,element,root,bean,definition,parser,delegate,delegate,if,delegate,is,default,namespace,root,node,list,nl,root,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,element,ele,element,node,if,delegate,is,default,namespace,ele,parse,default,element,ele,delegate,else,delegate,parse,custom,element,ele,else,delegate,parse,custom,element,root
DefaultBeanDefinitionDocumentReader -> protected void parseBeanDefinitions(Element root, BeanDefinitionParserDelegate delegate);1382030648;Parse the elements at the root level in the document:_"import", "alias", "bean"._@param root the DOM root element of the document;protected void parseBeanDefinitions(Element root, BeanDefinitionParserDelegate delegate) {_		if (delegate.isDefaultNamespace(root)) {_			NodeList nl = root.getChildNodes()__			for (int i = 0_ i < nl.getLength()_ i++) {_				Node node = nl.item(i)__				if (node instanceof Element) {_					Element ele = (Element) node__					if (delegate.isDefaultNamespace(ele)) {_						parseDefaultElement(ele, delegate)__					}_					else {_						delegate.parseCustomElement(ele)__					}_				}_			}_		}_		else {_			delegate.parseCustomElement(root)__		}_	};parse,the,elements,at,the,root,level,in,the,document,import,alias,bean,param,root,the,dom,root,element,of,the,document;protected,void,parse,bean,definitions,element,root,bean,definition,parser,delegate,delegate,if,delegate,is,default,namespace,root,node,list,nl,root,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,element,ele,element,node,if,delegate,is,default,namespace,ele,parse,default,element,ele,delegate,else,delegate,parse,custom,element,ele,else,delegate,parse,custom,element,root
DefaultBeanDefinitionDocumentReader -> protected void parseBeanDefinitions(Element root, BeanDefinitionParserDelegate delegate);1404933463;Parse the elements at the root level in the document:_"import", "alias", "bean"._@param root the DOM root element of the document;protected void parseBeanDefinitions(Element root, BeanDefinitionParserDelegate delegate) {_		if (delegate.isDefaultNamespace(root)) {_			NodeList nl = root.getChildNodes()__			for (int i = 0_ i < nl.getLength()_ i++) {_				Node node = nl.item(i)__				if (node instanceof Element) {_					Element ele = (Element) node__					if (delegate.isDefaultNamespace(ele)) {_						parseDefaultElement(ele, delegate)__					}_					else {_						delegate.parseCustomElement(ele)__					}_				}_			}_		}_		else {_			delegate.parseCustomElement(root)__		}_	};parse,the,elements,at,the,root,level,in,the,document,import,alias,bean,param,root,the,dom,root,element,of,the,document;protected,void,parse,bean,definitions,element,root,bean,definition,parser,delegate,delegate,if,delegate,is,default,namespace,root,node,list,nl,root,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,element,ele,element,node,if,delegate,is,default,namespace,ele,parse,default,element,ele,delegate,else,delegate,parse,custom,element,ele,else,delegate,parse,custom,element,root
DefaultBeanDefinitionDocumentReader -> protected void parseBeanDefinitions(Element root, BeanDefinitionParserDelegate delegate);1411599760;Parse the elements at the root level in the document:_"import", "alias", "bean"._@param root the DOM root element of the document;protected void parseBeanDefinitions(Element root, BeanDefinitionParserDelegate delegate) {_		if (delegate.isDefaultNamespace(root)) {_			NodeList nl = root.getChildNodes()__			for (int i = 0_ i < nl.getLength()_ i++) {_				Node node = nl.item(i)__				if (node instanceof Element) {_					Element ele = (Element) node__					if (delegate.isDefaultNamespace(ele)) {_						parseDefaultElement(ele, delegate)__					}_					else {_						delegate.parseCustomElement(ele)__					}_				}_			}_		}_		else {_			delegate.parseCustomElement(root)__		}_	};parse,the,elements,at,the,root,level,in,the,document,import,alias,bean,param,root,the,dom,root,element,of,the,document;protected,void,parse,bean,definitions,element,root,bean,definition,parser,delegate,delegate,if,delegate,is,default,namespace,root,node,list,nl,root,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,element,ele,element,node,if,delegate,is,default,namespace,ele,parse,default,element,ele,delegate,else,delegate,parse,custom,element,ele,else,delegate,parse,custom,element,root
DefaultBeanDefinitionDocumentReader -> protected void parseBeanDefinitions(Element root, BeanDefinitionParserDelegate delegate);1419966315;Parse the elements at the root level in the document:_"import", "alias", "bean"._@param root the DOM root element of the document;protected void parseBeanDefinitions(Element root, BeanDefinitionParserDelegate delegate) {_		if (delegate.isDefaultNamespace(root)) {_			NodeList nl = root.getChildNodes()__			for (int i = 0_ i < nl.getLength()_ i++) {_				Node node = nl.item(i)__				if (node instanceof Element) {_					Element ele = (Element) node__					if (delegate.isDefaultNamespace(ele)) {_						parseDefaultElement(ele, delegate)__					}_					else {_						delegate.parseCustomElement(ele)__					}_				}_			}_		}_		else {_			delegate.parseCustomElement(root)__		}_	};parse,the,elements,at,the,root,level,in,the,document,import,alias,bean,param,root,the,dom,root,element,of,the,document;protected,void,parse,bean,definitions,element,root,bean,definition,parser,delegate,delegate,if,delegate,is,default,namespace,root,node,list,nl,root,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,element,ele,element,node,if,delegate,is,default,namespace,ele,parse,default,element,ele,delegate,else,delegate,parse,custom,element,ele,else,delegate,parse,custom,element,root
DefaultBeanDefinitionDocumentReader -> protected void parseBeanDefinitions(Element root, BeanDefinitionParserDelegate delegate);1424720154;Parse the elements at the root level in the document:_"import", "alias", "bean"._@param root the DOM root element of the document;protected void parseBeanDefinitions(Element root, BeanDefinitionParserDelegate delegate) {_		if (delegate.isDefaultNamespace(root)) {_			NodeList nl = root.getChildNodes()__			for (int i = 0_ i < nl.getLength()_ i++) {_				Node node = nl.item(i)__				if (node instanceof Element) {_					Element ele = (Element) node__					if (delegate.isDefaultNamespace(ele)) {_						parseDefaultElement(ele, delegate)__					}_					else {_						delegate.parseCustomElement(ele)__					}_				}_			}_		}_		else {_			delegate.parseCustomElement(root)__		}_	};parse,the,elements,at,the,root,level,in,the,document,import,alias,bean,param,root,the,dom,root,element,of,the,document;protected,void,parse,bean,definitions,element,root,bean,definition,parser,delegate,delegate,if,delegate,is,default,namespace,root,node,list,nl,root,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,element,ele,element,node,if,delegate,is,default,namespace,ele,parse,default,element,ele,delegate,else,delegate,parse,custom,element,ele,else,delegate,parse,custom,element,root
DefaultBeanDefinitionDocumentReader -> protected void parseBeanDefinitions(Element root, BeanDefinitionParserDelegate delegate);1453749972;Parse the elements at the root level in the document:_"import", "alias", "bean"._@param root the DOM root element of the document;protected void parseBeanDefinitions(Element root, BeanDefinitionParserDelegate delegate) {_		if (delegate.isDefaultNamespace(root)) {_			NodeList nl = root.getChildNodes()__			for (int i = 0_ i < nl.getLength()_ i++) {_				Node node = nl.item(i)__				if (node instanceof Element) {_					Element ele = (Element) node__					if (delegate.isDefaultNamespace(ele)) {_						parseDefaultElement(ele, delegate)__					}_					else {_						delegate.parseCustomElement(ele)__					}_				}_			}_		}_		else {_			delegate.parseCustomElement(root)__		}_	};parse,the,elements,at,the,root,level,in,the,document,import,alias,bean,param,root,the,dom,root,element,of,the,document;protected,void,parse,bean,definitions,element,root,bean,definition,parser,delegate,delegate,if,delegate,is,default,namespace,root,node,list,nl,root,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,element,ele,element,node,if,delegate,is,default,namespace,ele,parse,default,element,ele,delegate,else,delegate,parse,custom,element,ele,else,delegate,parse,custom,element,root
DefaultBeanDefinitionDocumentReader -> protected void parseBeanDefinitions(Element root, BeanDefinitionParserDelegate delegate);1467730834;Parse the elements at the root level in the document:_"import", "alias", "bean"._@param root the DOM root element of the document;protected void parseBeanDefinitions(Element root, BeanDefinitionParserDelegate delegate) {_		if (delegate.isDefaultNamespace(root)) {_			NodeList nl = root.getChildNodes()__			for (int i = 0_ i < nl.getLength()_ i++) {_				Node node = nl.item(i)__				if (node instanceof Element) {_					Element ele = (Element) node__					if (delegate.isDefaultNamespace(ele)) {_						parseDefaultElement(ele, delegate)__					}_					else {_						delegate.parseCustomElement(ele)__					}_				}_			}_		}_		else {_			delegate.parseCustomElement(root)__		}_	};parse,the,elements,at,the,root,level,in,the,document,import,alias,bean,param,root,the,dom,root,element,of,the,document;protected,void,parse,bean,definitions,element,root,bean,definition,parser,delegate,delegate,if,delegate,is,default,namespace,root,node,list,nl,root,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,element,ele,element,node,if,delegate,is,default,namespace,ele,parse,default,element,ele,delegate,else,delegate,parse,custom,element,ele,else,delegate,parse,custom,element,root
DefaultBeanDefinitionDocumentReader -> protected void parseBeanDefinitions(Element root, BeanDefinitionParserDelegate delegate);1496837955;Parse the elements at the root level in the document:_"import", "alias", "bean"._@param root the DOM root element of the document;protected void parseBeanDefinitions(Element root, BeanDefinitionParserDelegate delegate) {_		if (delegate.isDefaultNamespace(root)) {_			NodeList nl = root.getChildNodes()__			for (int i = 0_ i < nl.getLength()_ i++) {_				Node node = nl.item(i)__				if (node instanceof Element) {_					Element ele = (Element) node__					if (delegate.isDefaultNamespace(ele)) {_						parseDefaultElement(ele, delegate)__					}_					else {_						delegate.parseCustomElement(ele)__					}_				}_			}_		}_		else {_			delegate.parseCustomElement(root)__		}_	};parse,the,elements,at,the,root,level,in,the,document,import,alias,bean,param,root,the,dom,root,element,of,the,document;protected,void,parse,bean,definitions,element,root,bean,definition,parser,delegate,delegate,if,delegate,is,default,namespace,root,node,list,nl,root,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,element,ele,element,node,if,delegate,is,default,namespace,ele,parse,default,element,ele,delegate,else,delegate,parse,custom,element,ele,else,delegate,parse,custom,element,root
DefaultBeanDefinitionDocumentReader -> protected void parseBeanDefinitions(Element root, BeanDefinitionParserDelegate delegate);1500495740;Parse the elements at the root level in the document:_"import", "alias", "bean"._@param root the DOM root element of the document;protected void parseBeanDefinitions(Element root, BeanDefinitionParserDelegate delegate) {_		if (delegate.isDefaultNamespace(root)) {_			NodeList nl = root.getChildNodes()__			for (int i = 0_ i < nl.getLength()_ i++) {_				Node node = nl.item(i)__				if (node instanceof Element) {_					Element ele = (Element) node__					if (delegate.isDefaultNamespace(ele)) {_						parseDefaultElement(ele, delegate)__					}_					else {_						delegate.parseCustomElement(ele)__					}_				}_			}_		}_		else {_			delegate.parseCustomElement(root)__		}_	};parse,the,elements,at,the,root,level,in,the,document,import,alias,bean,param,root,the,dom,root,element,of,the,document;protected,void,parse,bean,definitions,element,root,bean,definition,parser,delegate,delegate,if,delegate,is,default,namespace,root,node,list,nl,root,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,element,ele,element,node,if,delegate,is,default,namespace,ele,parse,default,element,ele,delegate,else,delegate,parse,custom,element,ele,else,delegate,parse,custom,element,root
DefaultBeanDefinitionDocumentReader -> protected void parseBeanDefinitions(Element root, BeanDefinitionParserDelegate delegate);1519295386;Parse the elements at the root level in the document:_"import", "alias", "bean"._@param root the DOM root element of the document;protected void parseBeanDefinitions(Element root, BeanDefinitionParserDelegate delegate) {_		if (delegate.isDefaultNamespace(root)) {_			NodeList nl = root.getChildNodes()__			for (int i = 0_ i < nl.getLength()_ i++) {_				Node node = nl.item(i)__				if (node instanceof Element) {_					Element ele = (Element) node__					if (delegate.isDefaultNamespace(ele)) {_						parseDefaultElement(ele, delegate)__					}_					else {_						delegate.parseCustomElement(ele)__					}_				}_			}_		}_		else {_			delegate.parseCustomElement(root)__		}_	};parse,the,elements,at,the,root,level,in,the,document,import,alias,bean,param,root,the,dom,root,element,of,the,document;protected,void,parse,bean,definitions,element,root,bean,definition,parser,delegate,delegate,if,delegate,is,default,namespace,root,node,list,nl,root,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,element,ele,element,node,if,delegate,is,default,namespace,ele,parse,default,element,ele,delegate,else,delegate,parse,custom,element,ele,else,delegate,parse,custom,element,root
DefaultBeanDefinitionDocumentReader -> protected void parseBeanDefinitions(Element root, BeanDefinitionParserDelegate delegate);1529093363;Parse the elements at the root level in the document:_"import", "alias", "bean"._@param root the DOM root element of the document;protected void parseBeanDefinitions(Element root, BeanDefinitionParserDelegate delegate) {_		if (delegate.isDefaultNamespace(root)) {_			NodeList nl = root.getChildNodes()__			for (int i = 0_ i < nl.getLength()_ i++) {_				Node node = nl.item(i)__				if (node instanceof Element) {_					Element ele = (Element) node__					if (delegate.isDefaultNamespace(ele)) {_						parseDefaultElement(ele, delegate)__					}_					else {_						delegate.parseCustomElement(ele)__					}_				}_			}_		}_		else {_			delegate.parseCustomElement(root)__		}_	};parse,the,elements,at,the,root,level,in,the,document,import,alias,bean,param,root,the,dom,root,element,of,the,document;protected,void,parse,bean,definitions,element,root,bean,definition,parser,delegate,delegate,if,delegate,is,default,namespace,root,node,list,nl,root,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,element,ele,element,node,if,delegate,is,default,namespace,ele,parse,default,element,ele,delegate,else,delegate,parse,custom,element,ele,else,delegate,parse,custom,element,root
DefaultBeanDefinitionDocumentReader -> protected void parseBeanDefinitions(Element root, BeanDefinitionParserDelegate delegate);1529405413;Parse the elements at the root level in the document:_"import", "alias", "bean"._@param root the DOM root element of the document;protected void parseBeanDefinitions(Element root, BeanDefinitionParserDelegate delegate) {_		if (delegate.isDefaultNamespace(root)) {_			NodeList nl = root.getChildNodes()__			for (int i = 0_ i < nl.getLength()_ i++) {_				Node node = nl.item(i)__				if (node instanceof Element) {_					Element ele = (Element) node__					if (delegate.isDefaultNamespace(ele)) {_						parseDefaultElement(ele, delegate)__					}_					else {_						delegate.parseCustomElement(ele)__					}_				}_			}_		}_		else {_			delegate.parseCustomElement(root)__		}_	};parse,the,elements,at,the,root,level,in,the,document,import,alias,bean,param,root,the,dom,root,element,of,the,document;protected,void,parse,bean,definitions,element,root,bean,definition,parser,delegate,delegate,if,delegate,is,default,namespace,root,node,list,nl,root,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,element,ele,element,node,if,delegate,is,default,namespace,ele,parse,default,element,ele,delegate,else,delegate,parse,custom,element,ele,else,delegate,parse,custom,element,root
DefaultBeanDefinitionDocumentReader -> protected void parseBeanDefinitions(Element root, BeanDefinitionParserDelegate delegate);1532091916;Parse the elements at the root level in the document:_"import", "alias", "bean"._@param root the DOM root element of the document;protected void parseBeanDefinitions(Element root, BeanDefinitionParserDelegate delegate) {_		if (delegate.isDefaultNamespace(root)) {_			NodeList nl = root.getChildNodes()__			for (int i = 0_ i < nl.getLength()_ i++) {_				Node node = nl.item(i)__				if (node instanceof Element) {_					Element ele = (Element) node__					if (delegate.isDefaultNamespace(ele)) {_						parseDefaultElement(ele, delegate)__					}_					else {_						delegate.parseCustomElement(ele)__					}_				}_			}_		}_		else {_			delegate.parseCustomElement(root)__		}_	};parse,the,elements,at,the,root,level,in,the,document,import,alias,bean,param,root,the,dom,root,element,of,the,document;protected,void,parse,bean,definitions,element,root,bean,definition,parser,delegate,delegate,if,delegate,is,default,namespace,root,node,list,nl,root,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,element,ele,element,node,if,delegate,is,default,namespace,ele,parse,default,element,ele,delegate,else,delegate,parse,custom,element,ele,else,delegate,parse,custom,element,root
DefaultBeanDefinitionDocumentReader -> protected void parseBeanDefinitions(Element root, BeanDefinitionParserDelegate delegate);1532706365;Parse the elements at the root level in the document:_"import", "alias", "bean"._@param root the DOM root element of the document;protected void parseBeanDefinitions(Element root, BeanDefinitionParserDelegate delegate) {_		if (delegate.isDefaultNamespace(root)) {_			NodeList nl = root.getChildNodes()__			for (int i = 0_ i < nl.getLength()_ i++) {_				Node node = nl.item(i)__				if (node instanceof Element) {_					Element ele = (Element) node__					if (delegate.isDefaultNamespace(ele)) {_						parseDefaultElement(ele, delegate)__					}_					else {_						delegate.parseCustomElement(ele)__					}_				}_			}_		}_		else {_			delegate.parseCustomElement(root)__		}_	};parse,the,elements,at,the,root,level,in,the,document,import,alias,bean,param,root,the,dom,root,element,of,the,document;protected,void,parse,bean,definitions,element,root,bean,definition,parser,delegate,delegate,if,delegate,is,default,namespace,root,node,list,nl,root,get,child,nodes,for,int,i,0,i,nl,get,length,i,node,node,nl,item,i,if,node,instanceof,element,element,ele,element,node,if,delegate,is,default,namespace,ele,parse,default,element,ele,delegate,else,delegate,parse,custom,element,ele,else,delegate,parse,custom,element,root
DefaultBeanDefinitionDocumentReader -> public void setEnvironment(Environment environment);1328020251;{@inheritDoc}_<p>Default value is {@code null}_ property is required for parsing any_{@code <beans/>} element with a {@code profile} attribute present._@see #doRegisterBeanDefinitions;public void setEnvironment(Environment environment) {_		this.environment = environment__	};inherit,doc,p,default,value,is,code,null,property,is,required,for,parsing,any,code,beans,element,with,a,code,profile,attribute,present,see,do,register,bean,definitions;public,void,set,environment,environment,environment,this,environment,environment
DefaultBeanDefinitionDocumentReader -> public void setEnvironment(Environment environment);1357119239;{@inheritDoc}_<p>Default value is {@code null}_ property is required for parsing any_{@code <beans/>} element with a {@code profile} attribute present._@see #doRegisterBeanDefinitions;public void setEnvironment(Environment environment) {_		this.environment = environment__	};inherit,doc,p,default,value,is,code,null,property,is,required,for,parsing,any,code,beans,element,with,a,code,profile,attribute,present,see,do,register,bean,definitions;public,void,set,environment,environment,environment,this,environment,environment
DefaultBeanDefinitionDocumentReader -> public void setEnvironment(Environment environment);1362408075;{@inheritDoc}_<p>Default value is {@code null}_ property is required for parsing any_{@code <beans/>} element with a {@code profile} attribute present._@see #doRegisterBeanDefinitions;public void setEnvironment(Environment environment) {_		this.environment = environment__	};inherit,doc,p,default,value,is,code,null,property,is,required,for,parsing,any,code,beans,element,with,a,code,profile,attribute,present,see,do,register,bean,definitions;public,void,set,environment,environment,environment,this,environment,environment
DefaultBeanDefinitionDocumentReader -> @Override 	public void registerBeanDefinitions(Document doc, XmlReaderContext readerContext);1356735495;{@inheritDoc}_<p>This implementation parses bean definitions according to the "spring-beans" XSD_(or DTD, historically)._<p>Opens a DOM Document_ then initializes the default settings_specified at the {@code <beans/>} level_ then parses the contained bean definitions.;@Override_	public void registerBeanDefinitions(Document doc, XmlReaderContext readerContext) {_		this.readerContext = readerContext___		logger.debug("Loading bean definitions")__		Element root = doc.getDocumentElement()___		doRegisterBeanDefinitions(root)__	};inherit,doc,p,this,implementation,parses,bean,definitions,according,to,the,spring,beans,xsd,or,dtd,historically,p,opens,a,dom,document,then,initializes,the,default,settings,specified,at,the,code,beans,level,then,parses,the,contained,bean,definitions;override,public,void,register,bean,definitions,document,doc,xml,reader,context,reader,context,this,reader,context,reader,context,logger,debug,loading,bean,definitions,element,root,doc,get,document,element,do,register,bean,definitions,root
DefaultBeanDefinitionDocumentReader -> @Override 	public void registerBeanDefinitions(Document doc, XmlReaderContext readerContext);1368482696;{@inheritDoc}_<p>This implementation parses bean definitions according to the "spring-beans" XSD_(or DTD, historically)._<p>Opens a DOM Document_ then initializes the default settings_specified at the {@code <beans/>} level_ then parses the contained bean definitions.;@Override_	public void registerBeanDefinitions(Document doc, XmlReaderContext readerContext) {_		this.readerContext = readerContext__		logger.debug("Loading bean definitions")__		Element root = doc.getDocumentElement()__		doRegisterBeanDefinitions(root)__	};inherit,doc,p,this,implementation,parses,bean,definitions,according,to,the,spring,beans,xsd,or,dtd,historically,p,opens,a,dom,document,then,initializes,the,default,settings,specified,at,the,code,beans,level,then,parses,the,contained,bean,definitions;override,public,void,register,bean,definitions,document,doc,xml,reader,context,reader,context,this,reader,context,reader,context,logger,debug,loading,bean,definitions,element,root,doc,get,document,element,do,register,bean,definitions,root
DefaultBeanDefinitionDocumentReader -> @Override 	public void registerBeanDefinitions(Document doc, XmlReaderContext readerContext);1382030648;{@inheritDoc}_<p>This implementation parses bean definitions according to the "spring-beans" XSD_(or DTD, historically)._<p>Opens a DOM Document_ then initializes the default settings_specified at the {@code <beans/>} level_ then parses the contained bean definitions.;@Override_	public void registerBeanDefinitions(Document doc, XmlReaderContext readerContext) {_		this.readerContext = readerContext__		logger.debug("Loading bean definitions")__		Element root = doc.getDocumentElement()__		doRegisterBeanDefinitions(root)__	};inherit,doc,p,this,implementation,parses,bean,definitions,according,to,the,spring,beans,xsd,or,dtd,historically,p,opens,a,dom,document,then,initializes,the,default,settings,specified,at,the,code,beans,level,then,parses,the,contained,bean,definitions;override,public,void,register,bean,definitions,document,doc,xml,reader,context,reader,context,this,reader,context,reader,context,logger,debug,loading,bean,definitions,element,root,doc,get,document,element,do,register,bean,definitions,root
DefaultBeanDefinitionDocumentReader -> @Override 	public void registerBeanDefinitions(Document doc, XmlReaderContext readerContext);1404933463;{@inheritDoc}_<p>This implementation parses bean definitions according to the "spring-beans" XSD_(or DTD, historically)._<p>Opens a DOM Document_ then initializes the default settings_specified at the {@code <beans/>} level_ then parses the contained bean definitions.;@Override_	public void registerBeanDefinitions(Document doc, XmlReaderContext readerContext) {_		this.readerContext = readerContext__		logger.debug("Loading bean definitions")__		Element root = doc.getDocumentElement()__		doRegisterBeanDefinitions(root)__	};inherit,doc,p,this,implementation,parses,bean,definitions,according,to,the,spring,beans,xsd,or,dtd,historically,p,opens,a,dom,document,then,initializes,the,default,settings,specified,at,the,code,beans,level,then,parses,the,contained,bean,definitions;override,public,void,register,bean,definitions,document,doc,xml,reader,context,reader,context,this,reader,context,reader,context,logger,debug,loading,bean,definitions,element,root,doc,get,document,element,do,register,bean,definitions,root
DefaultBeanDefinitionDocumentReader -> @Override 	public void registerBeanDefinitions(Document doc, XmlReaderContext readerContext);1411599760;This implementation parses bean definitions according to the "spring-beans" XSD_(or DTD, historically)._<p>Opens a DOM Document_ then initializes the default settings_specified at the {@code <beans/>} level_ then parses the contained bean definitions.;@Override_	public void registerBeanDefinitions(Document doc, XmlReaderContext readerContext) {_		this.readerContext = readerContext__		logger.debug("Loading bean definitions")__		Element root = doc.getDocumentElement()__		doRegisterBeanDefinitions(root)__	};this,implementation,parses,bean,definitions,according,to,the,spring,beans,xsd,or,dtd,historically,p,opens,a,dom,document,then,initializes,the,default,settings,specified,at,the,code,beans,level,then,parses,the,contained,bean,definitions;override,public,void,register,bean,definitions,document,doc,xml,reader,context,reader,context,this,reader,context,reader,context,logger,debug,loading,bean,definitions,element,root,doc,get,document,element,do,register,bean,definitions,root
DefaultBeanDefinitionDocumentReader -> @Override 	public void registerBeanDefinitions(Document doc, XmlReaderContext readerContext);1419966315;This implementation parses bean definitions according to the "spring-beans" XSD_(or DTD, historically)._<p>Opens a DOM Document_ then initializes the default settings_specified at the {@code <beans/>} level_ then parses the contained bean definitions.;@Override_	public void registerBeanDefinitions(Document doc, XmlReaderContext readerContext) {_		this.readerContext = readerContext__		logger.debug("Loading bean definitions")__		Element root = doc.getDocumentElement()__		doRegisterBeanDefinitions(root)__	};this,implementation,parses,bean,definitions,according,to,the,spring,beans,xsd,or,dtd,historically,p,opens,a,dom,document,then,initializes,the,default,settings,specified,at,the,code,beans,level,then,parses,the,contained,bean,definitions;override,public,void,register,bean,definitions,document,doc,xml,reader,context,reader,context,this,reader,context,reader,context,logger,debug,loading,bean,definitions,element,root,doc,get,document,element,do,register,bean,definitions,root
DefaultBeanDefinitionDocumentReader -> @Override 	public void registerBeanDefinitions(Document doc, XmlReaderContext readerContext);1424720154;This implementation parses bean definitions according to the "spring-beans" XSD_(or DTD, historically)._<p>Opens a DOM Document_ then initializes the default settings_specified at the {@code <beans/>} level_ then parses the contained bean definitions.;@Override_	public void registerBeanDefinitions(Document doc, XmlReaderContext readerContext) {_		this.readerContext = readerContext__		logger.debug("Loading bean definitions")__		Element root = doc.getDocumentElement()__		doRegisterBeanDefinitions(root)__	};this,implementation,parses,bean,definitions,according,to,the,spring,beans,xsd,or,dtd,historically,p,opens,a,dom,document,then,initializes,the,default,settings,specified,at,the,code,beans,level,then,parses,the,contained,bean,definitions;override,public,void,register,bean,definitions,document,doc,xml,reader,context,reader,context,this,reader,context,reader,context,logger,debug,loading,bean,definitions,element,root,doc,get,document,element,do,register,bean,definitions,root
DefaultBeanDefinitionDocumentReader -> @Override 	public void registerBeanDefinitions(Document doc, XmlReaderContext readerContext);1453749972;This implementation parses bean definitions according to the "spring-beans" XSD_(or DTD, historically)._<p>Opens a DOM Document_ then initializes the default settings_specified at the {@code <beans/>} level_ then parses the contained bean definitions.;@Override_	public void registerBeanDefinitions(Document doc, XmlReaderContext readerContext) {_		this.readerContext = readerContext__		logger.debug("Loading bean definitions")__		Element root = doc.getDocumentElement()__		doRegisterBeanDefinitions(root)__	};this,implementation,parses,bean,definitions,according,to,the,spring,beans,xsd,or,dtd,historically,p,opens,a,dom,document,then,initializes,the,default,settings,specified,at,the,code,beans,level,then,parses,the,contained,bean,definitions;override,public,void,register,bean,definitions,document,doc,xml,reader,context,reader,context,this,reader,context,reader,context,logger,debug,loading,bean,definitions,element,root,doc,get,document,element,do,register,bean,definitions,root
DefaultBeanDefinitionDocumentReader -> @Override 	public void registerBeanDefinitions(Document doc, XmlReaderContext readerContext);1467730834;This implementation parses bean definitions according to the "spring-beans" XSD_(or DTD, historically)._<p>Opens a DOM Document_ then initializes the default settings_specified at the {@code <beans/>} level_ then parses the contained bean definitions.;@Override_	public void registerBeanDefinitions(Document doc, XmlReaderContext readerContext) {_		this.readerContext = readerContext__		logger.debug("Loading bean definitions")__		Element root = doc.getDocumentElement()__		doRegisterBeanDefinitions(root)__	};this,implementation,parses,bean,definitions,according,to,the,spring,beans,xsd,or,dtd,historically,p,opens,a,dom,document,then,initializes,the,default,settings,specified,at,the,code,beans,level,then,parses,the,contained,bean,definitions;override,public,void,register,bean,definitions,document,doc,xml,reader,context,reader,context,this,reader,context,reader,context,logger,debug,loading,bean,definitions,element,root,doc,get,document,element,do,register,bean,definitions,root
DefaultBeanDefinitionDocumentReader -> @Override 	public void registerBeanDefinitions(Document doc, XmlReaderContext readerContext);1496837955;This implementation parses bean definitions according to the "spring-beans" XSD_(or DTD, historically)._<p>Opens a DOM Document_ then initializes the default settings_specified at the {@code <beans/>} level_ then parses the contained bean definitions.;@Override_	public void registerBeanDefinitions(Document doc, XmlReaderContext readerContext) {_		this.readerContext = readerContext__		logger.debug("Loading bean definitions")__		Element root = doc.getDocumentElement()__		doRegisterBeanDefinitions(root)__	};this,implementation,parses,bean,definitions,according,to,the,spring,beans,xsd,or,dtd,historically,p,opens,a,dom,document,then,initializes,the,default,settings,specified,at,the,code,beans,level,then,parses,the,contained,bean,definitions;override,public,void,register,bean,definitions,document,doc,xml,reader,context,reader,context,this,reader,context,reader,context,logger,debug,loading,bean,definitions,element,root,doc,get,document,element,do,register,bean,definitions,root
DefaultBeanDefinitionDocumentReader -> @Override 	public void registerBeanDefinitions(Document doc, XmlReaderContext readerContext);1500495740;This implementation parses bean definitions according to the "spring-beans" XSD_(or DTD, historically)._<p>Opens a DOM Document_ then initializes the default settings_specified at the {@code <beans/>} level_ then parses the contained bean definitions.;@Override_	public void registerBeanDefinitions(Document doc, XmlReaderContext readerContext) {_		this.readerContext = readerContext__		logger.debug("Loading bean definitions")__		Element root = doc.getDocumentElement()__		doRegisterBeanDefinitions(root)__	};this,implementation,parses,bean,definitions,according,to,the,spring,beans,xsd,or,dtd,historically,p,opens,a,dom,document,then,initializes,the,default,settings,specified,at,the,code,beans,level,then,parses,the,contained,bean,definitions;override,public,void,register,bean,definitions,document,doc,xml,reader,context,reader,context,this,reader,context,reader,context,logger,debug,loading,bean,definitions,element,root,doc,get,document,element,do,register,bean,definitions,root
DefaultBeanDefinitionDocumentReader -> @Override 	public void registerBeanDefinitions(Document doc, XmlReaderContext readerContext);1519295386;This implementation parses bean definitions according to the "spring-beans" XSD_(or DTD, historically)._<p>Opens a DOM Document_ then initializes the default settings_specified at the {@code <beans/>} level_ then parses the contained bean definitions.;@Override_	public void registerBeanDefinitions(Document doc, XmlReaderContext readerContext) {_		this.readerContext = readerContext__		logger.debug("Loading bean definitions")__		Element root = doc.getDocumentElement()__		doRegisterBeanDefinitions(root)__	};this,implementation,parses,bean,definitions,according,to,the,spring,beans,xsd,or,dtd,historically,p,opens,a,dom,document,then,initializes,the,default,settings,specified,at,the,code,beans,level,then,parses,the,contained,bean,definitions;override,public,void,register,bean,definitions,document,doc,xml,reader,context,reader,context,this,reader,context,reader,context,logger,debug,loading,bean,definitions,element,root,doc,get,document,element,do,register,bean,definitions,root
DefaultBeanDefinitionDocumentReader -> @Override 	public void registerBeanDefinitions(Document doc, XmlReaderContext readerContext);1529093363;This implementation parses bean definitions according to the "spring-beans" XSD_(or DTD, historically)._<p>Opens a DOM Document_ then initializes the default settings_specified at the {@code <beans/>} level_ then parses the contained bean definitions.;@Override_	public void registerBeanDefinitions(Document doc, XmlReaderContext readerContext) {_		this.readerContext = readerContext__		logger.debug("Loading bean definitions")__		Element root = doc.getDocumentElement()__		doRegisterBeanDefinitions(root)__	};this,implementation,parses,bean,definitions,according,to,the,spring,beans,xsd,or,dtd,historically,p,opens,a,dom,document,then,initializes,the,default,settings,specified,at,the,code,beans,level,then,parses,the,contained,bean,definitions;override,public,void,register,bean,definitions,document,doc,xml,reader,context,reader,context,this,reader,context,reader,context,logger,debug,loading,bean,definitions,element,root,doc,get,document,element,do,register,bean,definitions,root
DefaultBeanDefinitionDocumentReader -> @Override 	public void registerBeanDefinitions(Document doc, XmlReaderContext readerContext);1529405413;This implementation parses bean definitions according to the "spring-beans" XSD_(or DTD, historically)._<p>Opens a DOM Document_ then initializes the default settings_specified at the {@code <beans/>} level_ then parses the contained bean definitions.;@Override_	public void registerBeanDefinitions(Document doc, XmlReaderContext readerContext) {_		this.readerContext = readerContext__		logger.debug("Loading bean definitions")__		Element root = doc.getDocumentElement()__		doRegisterBeanDefinitions(root)__	};this,implementation,parses,bean,definitions,according,to,the,spring,beans,xsd,or,dtd,historically,p,opens,a,dom,document,then,initializes,the,default,settings,specified,at,the,code,beans,level,then,parses,the,contained,bean,definitions;override,public,void,register,bean,definitions,document,doc,xml,reader,context,reader,context,this,reader,context,reader,context,logger,debug,loading,bean,definitions,element,root,doc,get,document,element,do,register,bean,definitions,root
DefaultBeanDefinitionDocumentReader -> @Override 	public void registerBeanDefinitions(Document doc, XmlReaderContext readerContext);1532091916;This implementation parses bean definitions according to the "spring-beans" XSD_(or DTD, historically)._<p>Opens a DOM Document_ then initializes the default settings_specified at the {@code <beans/>} level_ then parses the contained bean definitions.;@Override_	public void registerBeanDefinitions(Document doc, XmlReaderContext readerContext) {_		this.readerContext = readerContext__		logger.debug("Loading bean definitions")__		Element root = doc.getDocumentElement()__		doRegisterBeanDefinitions(root)__	};this,implementation,parses,bean,definitions,according,to,the,spring,beans,xsd,or,dtd,historically,p,opens,a,dom,document,then,initializes,the,default,settings,specified,at,the,code,beans,level,then,parses,the,contained,bean,definitions;override,public,void,register,bean,definitions,document,doc,xml,reader,context,reader,context,this,reader,context,reader,context,logger,debug,loading,bean,definitions,element,root,doc,get,document,element,do,register,bean,definitions,root
DefaultBeanDefinitionDocumentReader -> @Override 	public void registerBeanDefinitions(Document doc, XmlReaderContext readerContext);1532706365;This implementation parses bean definitions according to the "spring-beans" XSD_(or DTD, historically)._<p>Opens a DOM Document_ then initializes the default settings_specified at the {@code <beans/>} level_ then parses the contained bean definitions.;@Override_	public void registerBeanDefinitions(Document doc, XmlReaderContext readerContext) {_		this.readerContext = readerContext__		doRegisterBeanDefinitions(doc.getDocumentElement())__	};this,implementation,parses,bean,definitions,according,to,the,spring,beans,xsd,or,dtd,historically,p,opens,a,dom,document,then,initializes,the,default,settings,specified,at,the,code,beans,level,then,parses,the,contained,bean,definitions;override,public,void,register,bean,definitions,document,doc,xml,reader,context,reader,context,this,reader,context,reader,context,do,register,bean,definitions,doc,get,document,element
DefaultBeanDefinitionDocumentReader -> @Override 	public void setEnvironment(Environment environment);1356735495;{@inheritDoc}_<p>Default value is {@code null}_ property is required for parsing any_{@code <beans/>} element with a {@code profile} attribute present._@see #doRegisterBeanDefinitions;@Override_	public void setEnvironment(Environment environment) {_		this.environment = environment__	};inherit,doc,p,default,value,is,code,null,property,is,required,for,parsing,any,code,beans,element,with,a,code,profile,attribute,present,see,do,register,bean,definitions;override,public,void,set,environment,environment,environment,this,environment,environment
DefaultBeanDefinitionDocumentReader -> @Override 	public void setEnvironment(Environment environment);1368482696;{@inheritDoc}_<p>Default value is {@code null}_ property is required for parsing any_{@code <beans/>} element with a {@code profile} attribute present._@see #doRegisterBeanDefinitions;@Override_	public void setEnvironment(Environment environment) {_		this.environment = environment__	};inherit,doc,p,default,value,is,code,null,property,is,required,for,parsing,any,code,beans,element,with,a,code,profile,attribute,present,see,do,register,bean,definitions;override,public,void,set,environment,environment,environment,this,environment,environment
DefaultBeanDefinitionDocumentReader -> @Override 	public void setEnvironment(Environment environment);1382030648;{@inheritDoc}_<p>Default value is {@code null}_ property is required for parsing any_{@code <beans/>} element with a {@code profile} attribute present._@see #doRegisterBeanDefinitions;@Override_	public void setEnvironment(Environment environment) {_		this.environment = environment__	};inherit,doc,p,default,value,is,code,null,property,is,required,for,parsing,any,code,beans,element,with,a,code,profile,attribute,present,see,do,register,bean,definitions;override,public,void,set,environment,environment,environment,this,environment,environment
DefaultBeanDefinitionDocumentReader -> @Override 	public void setEnvironment(Environment environment);1404933463;{@inheritDoc}_<p>Default value is {@code null}_ property is required for parsing any_{@code <beans/>} element with a {@code profile} attribute present._@see #doRegisterBeanDefinitions;@Override_	public void setEnvironment(Environment environment) {_		this.environment = environment__	};inherit,doc,p,default,value,is,code,null,property,is,required,for,parsing,any,code,beans,element,with,a,code,profile,attribute,present,see,do,register,bean,definitions;override,public,void,set,environment,environment,environment,this,environment,environment
DefaultBeanDefinitionDocumentReader -> protected Object extractSource(Element ele);1328020251;Invoke the {@link org.springframework.beans.factory.parsing.SourceExtractor} to pull the_source metadata from the supplied {@link Element}.;protected Object extractSource(Element ele) {_		return this.readerContext.extractSource(ele)__	};invoke,the,link,org,springframework,beans,factory,parsing,source,extractor,to,pull,the,source,metadata,from,the,supplied,link,element;protected,object,extract,source,element,ele,return,this,reader,context,extract,source,ele
DefaultBeanDefinitionDocumentReader -> protected Object extractSource(Element ele);1356735495;Invoke the {@link org.springframework.beans.factory.parsing.SourceExtractor} to pull the_source metadata from the supplied {@link Element}.;protected Object extractSource(Element ele) {_		return this.readerContext.extractSource(ele)__	};invoke,the,link,org,springframework,beans,factory,parsing,source,extractor,to,pull,the,source,metadata,from,the,supplied,link,element;protected,object,extract,source,element,ele,return,this,reader,context,extract,source,ele
DefaultBeanDefinitionDocumentReader -> protected Object extractSource(Element ele);1357119239;Invoke the {@link org.springframework.beans.factory.parsing.SourceExtractor} to pull the_source metadata from the supplied {@link Element}.;protected Object extractSource(Element ele) {_		return this.readerContext.extractSource(ele)__	};invoke,the,link,org,springframework,beans,factory,parsing,source,extractor,to,pull,the,source,metadata,from,the,supplied,link,element;protected,object,extract,source,element,ele,return,this,reader,context,extract,source,ele
DefaultBeanDefinitionDocumentReader -> protected Object extractSource(Element ele);1362408075;Invoke the {@link org.springframework.beans.factory.parsing.SourceExtractor} to pull the_source metadata from the supplied {@link Element}.;protected Object extractSource(Element ele) {_		return this.readerContext.extractSource(ele)__	};invoke,the,link,org,springframework,beans,factory,parsing,source,extractor,to,pull,the,source,metadata,from,the,supplied,link,element;protected,object,extract,source,element,ele,return,this,reader,context,extract,source,ele
DefaultBeanDefinitionDocumentReader -> protected Object extractSource(Element ele);1368482696;Invoke the {@link org.springframework.beans.factory.parsing.SourceExtractor} to pull the_source metadata from the supplied {@link Element}.;protected Object extractSource(Element ele) {_		return this.readerContext.extractSource(ele)__	};invoke,the,link,org,springframework,beans,factory,parsing,source,extractor,to,pull,the,source,metadata,from,the,supplied,link,element;protected,object,extract,source,element,ele,return,this,reader,context,extract,source,ele
DefaultBeanDefinitionDocumentReader -> protected Object extractSource(Element ele);1382030648;Invoke the {@link org.springframework.beans.factory.parsing.SourceExtractor} to pull the_source metadata from the supplied {@link Element}.;protected Object extractSource(Element ele) {_		return this.readerContext.extractSource(ele)__	};invoke,the,link,org,springframework,beans,factory,parsing,source,extractor,to,pull,the,source,metadata,from,the,supplied,link,element;protected,object,extract,source,element,ele,return,this,reader,context,extract,source,ele
DefaultBeanDefinitionDocumentReader -> protected Object extractSource(Element ele);1404933463;Invoke the {@link org.springframework.beans.factory.parsing.SourceExtractor} to pull the_source metadata from the supplied {@link Element}.;protected Object extractSource(Element ele) {_		return this.readerContext.extractSource(ele)__	};invoke,the,link,org,springframework,beans,factory,parsing,source,extractor,to,pull,the,source,metadata,from,the,supplied,link,element;protected,object,extract,source,element,ele,return,this,reader,context,extract,source,ele
DefaultBeanDefinitionDocumentReader -> protected Object extractSource(Element ele);1411599760;Invoke the {@link org.springframework.beans.factory.parsing.SourceExtractor} to pull the_source metadata from the supplied {@link Element}.;protected Object extractSource(Element ele) {_		return getReaderContext().extractSource(ele)__	};invoke,the,link,org,springframework,beans,factory,parsing,source,extractor,to,pull,the,source,metadata,from,the,supplied,link,element;protected,object,extract,source,element,ele,return,get,reader,context,extract,source,ele
DefaultBeanDefinitionDocumentReader -> protected Object extractSource(Element ele);1419966315;Invoke the {@link org.springframework.beans.factory.parsing.SourceExtractor} to pull the_source metadata from the supplied {@link Element}.;protected Object extractSource(Element ele) {_		return getReaderContext().extractSource(ele)__	};invoke,the,link,org,springframework,beans,factory,parsing,source,extractor,to,pull,the,source,metadata,from,the,supplied,link,element;protected,object,extract,source,element,ele,return,get,reader,context,extract,source,ele
DefaultBeanDefinitionDocumentReader -> protected Object extractSource(Element ele);1424720154;Invoke the {@link org.springframework.beans.factory.parsing.SourceExtractor} to pull the_source metadata from the supplied {@link Element}.;protected Object extractSource(Element ele) {_		return getReaderContext().extractSource(ele)__	};invoke,the,link,org,springframework,beans,factory,parsing,source,extractor,to,pull,the,source,metadata,from,the,supplied,link,element;protected,object,extract,source,element,ele,return,get,reader,context,extract,source,ele
DefaultBeanDefinitionDocumentReader -> protected Object extractSource(Element ele);1453749972;Invoke the {@link org.springframework.beans.factory.parsing.SourceExtractor} to pull the_source metadata from the supplied {@link Element}.;protected Object extractSource(Element ele) {_		return getReaderContext().extractSource(ele)__	};invoke,the,link,org,springframework,beans,factory,parsing,source,extractor,to,pull,the,source,metadata,from,the,supplied,link,element;protected,object,extract,source,element,ele,return,get,reader,context,extract,source,ele
DefaultBeanDefinitionDocumentReader -> protected Object extractSource(Element ele);1467730834;Invoke the {@link org.springframework.beans.factory.parsing.SourceExtractor} to pull the_source metadata from the supplied {@link Element}.;protected Object extractSource(Element ele) {_		return getReaderContext().extractSource(ele)__	};invoke,the,link,org,springframework,beans,factory,parsing,source,extractor,to,pull,the,source,metadata,from,the,supplied,link,element;protected,object,extract,source,element,ele,return,get,reader,context,extract,source,ele
DefaultBeanDefinitionDocumentReader -> protected void processAliasRegistration(Element ele);1328020251;Process the given alias element, registering the alias with the registry.;protected void processAliasRegistration(Element ele) {_		String name = ele.getAttribute(NAME_ATTRIBUTE)__		String alias = ele.getAttribute(ALIAS_ATTRIBUTE)__		boolean valid = true__		if (!StringUtils.hasText(name)) {_			getReaderContext().error("Name must not be empty", ele)__			valid = false__		}_		if (!StringUtils.hasText(alias)) {_			getReaderContext().error("Alias must not be empty", ele)__			valid = false__		}_		if (valid) {_			try {_				getReaderContext().getRegistry().registerAlias(name, alias)__			}_			catch (Exception ex) {_				getReaderContext().error("Failed to register alias '" + alias +_						"' for bean with name '" + name + "'", ele, ex)__			}_			getReaderContext().fireAliasRegistered(name, alias, extractSource(ele))__		}_	};process,the,given,alias,element,registering,the,alias,with,the,registry;protected,void,process,alias,registration,element,ele,string,name,ele,get,attribute,string,alias,ele,get,attribute,boolean,valid,true,if,string,utils,has,text,name,get,reader,context,error,name,must,not,be,empty,ele,valid,false,if,string,utils,has,text,alias,get,reader,context,error,alias,must,not,be,empty,ele,valid,false,if,valid,try,get,reader,context,get,registry,register,alias,name,alias,catch,exception,ex,get,reader,context,error,failed,to,register,alias,alias,for,bean,with,name,name,ele,ex,get,reader,context,fire,alias,registered,name,alias,extract,source,ele
DefaultBeanDefinitionDocumentReader -> protected void processAliasRegistration(Element ele);1356735495;Process the given alias element, registering the alias with the registry.;protected void processAliasRegistration(Element ele) {_		String name = ele.getAttribute(NAME_ATTRIBUTE)__		String alias = ele.getAttribute(ALIAS_ATTRIBUTE)__		boolean valid = true__		if (!StringUtils.hasText(name)) {_			getReaderContext().error("Name must not be empty", ele)__			valid = false__		}_		if (!StringUtils.hasText(alias)) {_			getReaderContext().error("Alias must not be empty", ele)__			valid = false__		}_		if (valid) {_			try {_				getReaderContext().getRegistry().registerAlias(name, alias)__			}_			catch (Exception ex) {_				getReaderContext().error("Failed to register alias '" + alias +_						"' for bean with name '" + name + "'", ele, ex)__			}_			getReaderContext().fireAliasRegistered(name, alias, extractSource(ele))__		}_	};process,the,given,alias,element,registering,the,alias,with,the,registry;protected,void,process,alias,registration,element,ele,string,name,ele,get,attribute,string,alias,ele,get,attribute,boolean,valid,true,if,string,utils,has,text,name,get,reader,context,error,name,must,not,be,empty,ele,valid,false,if,string,utils,has,text,alias,get,reader,context,error,alias,must,not,be,empty,ele,valid,false,if,valid,try,get,reader,context,get,registry,register,alias,name,alias,catch,exception,ex,get,reader,context,error,failed,to,register,alias,alias,for,bean,with,name,name,ele,ex,get,reader,context,fire,alias,registered,name,alias,extract,source,ele
DefaultBeanDefinitionDocumentReader -> protected void processAliasRegistration(Element ele);1357119239;Process the given alias element, registering the alias with the registry.;protected void processAliasRegistration(Element ele) {_		String name = ele.getAttribute(NAME_ATTRIBUTE)__		String alias = ele.getAttribute(ALIAS_ATTRIBUTE)__		boolean valid = true__		if (!StringUtils.hasText(name)) {_			getReaderContext().error("Name must not be empty", ele)__			valid = false__		}_		if (!StringUtils.hasText(alias)) {_			getReaderContext().error("Alias must not be empty", ele)__			valid = false__		}_		if (valid) {_			try {_				getReaderContext().getRegistry().registerAlias(name, alias)__			}_			catch (Exception ex) {_				getReaderContext().error("Failed to register alias '" + alias +_						"' for bean with name '" + name + "'", ele, ex)__			}_			getReaderContext().fireAliasRegistered(name, alias, extractSource(ele))__		}_	};process,the,given,alias,element,registering,the,alias,with,the,registry;protected,void,process,alias,registration,element,ele,string,name,ele,get,attribute,string,alias,ele,get,attribute,boolean,valid,true,if,string,utils,has,text,name,get,reader,context,error,name,must,not,be,empty,ele,valid,false,if,string,utils,has,text,alias,get,reader,context,error,alias,must,not,be,empty,ele,valid,false,if,valid,try,get,reader,context,get,registry,register,alias,name,alias,catch,exception,ex,get,reader,context,error,failed,to,register,alias,alias,for,bean,with,name,name,ele,ex,get,reader,context,fire,alias,registered,name,alias,extract,source,ele
DefaultBeanDefinitionDocumentReader -> protected void processAliasRegistration(Element ele);1362408075;Process the given alias element, registering the alias with the registry.;protected void processAliasRegistration(Element ele) {_		String name = ele.getAttribute(NAME_ATTRIBUTE)__		String alias = ele.getAttribute(ALIAS_ATTRIBUTE)__		boolean valid = true__		if (!StringUtils.hasText(name)) {_			getReaderContext().error("Name must not be empty", ele)__			valid = false__		}_		if (!StringUtils.hasText(alias)) {_			getReaderContext().error("Alias must not be empty", ele)__			valid = false__		}_		if (valid) {_			try {_				getReaderContext().getRegistry().registerAlias(name, alias)__			}_			catch (Exception ex) {_				getReaderContext().error("Failed to register alias '" + alias +_						"' for bean with name '" + name + "'", ele, ex)__			}_			getReaderContext().fireAliasRegistered(name, alias, extractSource(ele))__		}_	};process,the,given,alias,element,registering,the,alias,with,the,registry;protected,void,process,alias,registration,element,ele,string,name,ele,get,attribute,string,alias,ele,get,attribute,boolean,valid,true,if,string,utils,has,text,name,get,reader,context,error,name,must,not,be,empty,ele,valid,false,if,string,utils,has,text,alias,get,reader,context,error,alias,must,not,be,empty,ele,valid,false,if,valid,try,get,reader,context,get,registry,register,alias,name,alias,catch,exception,ex,get,reader,context,error,failed,to,register,alias,alias,for,bean,with,name,name,ele,ex,get,reader,context,fire,alias,registered,name,alias,extract,source,ele
DefaultBeanDefinitionDocumentReader -> protected void processAliasRegistration(Element ele);1368482696;Process the given alias element, registering the alias with the registry.;protected void processAliasRegistration(Element ele) {_		String name = ele.getAttribute(NAME_ATTRIBUTE)__		String alias = ele.getAttribute(ALIAS_ATTRIBUTE)__		boolean valid = true__		if (!StringUtils.hasText(name)) {_			getReaderContext().error("Name must not be empty", ele)__			valid = false__		}_		if (!StringUtils.hasText(alias)) {_			getReaderContext().error("Alias must not be empty", ele)__			valid = false__		}_		if (valid) {_			try {_				getReaderContext().getRegistry().registerAlias(name, alias)__			}_			catch (Exception ex) {_				getReaderContext().error("Failed to register alias '" + alias +_						"' for bean with name '" + name + "'", ele, ex)__			}_			getReaderContext().fireAliasRegistered(name, alias, extractSource(ele))__		}_	};process,the,given,alias,element,registering,the,alias,with,the,registry;protected,void,process,alias,registration,element,ele,string,name,ele,get,attribute,string,alias,ele,get,attribute,boolean,valid,true,if,string,utils,has,text,name,get,reader,context,error,name,must,not,be,empty,ele,valid,false,if,string,utils,has,text,alias,get,reader,context,error,alias,must,not,be,empty,ele,valid,false,if,valid,try,get,reader,context,get,registry,register,alias,name,alias,catch,exception,ex,get,reader,context,error,failed,to,register,alias,alias,for,bean,with,name,name,ele,ex,get,reader,context,fire,alias,registered,name,alias,extract,source,ele
DefaultBeanDefinitionDocumentReader -> protected void processAliasRegistration(Element ele);1382030648;Process the given alias element, registering the alias with the registry.;protected void processAliasRegistration(Element ele) {_		String name = ele.getAttribute(NAME_ATTRIBUTE)__		String alias = ele.getAttribute(ALIAS_ATTRIBUTE)__		boolean valid = true__		if (!StringUtils.hasText(name)) {_			getReaderContext().error("Name must not be empty", ele)__			valid = false__		}_		if (!StringUtils.hasText(alias)) {_			getReaderContext().error("Alias must not be empty", ele)__			valid = false__		}_		if (valid) {_			try {_				getReaderContext().getRegistry().registerAlias(name, alias)__			}_			catch (Exception ex) {_				getReaderContext().error("Failed to register alias '" + alias +_						"' for bean with name '" + name + "'", ele, ex)__			}_			getReaderContext().fireAliasRegistered(name, alias, extractSource(ele))__		}_	};process,the,given,alias,element,registering,the,alias,with,the,registry;protected,void,process,alias,registration,element,ele,string,name,ele,get,attribute,string,alias,ele,get,attribute,boolean,valid,true,if,string,utils,has,text,name,get,reader,context,error,name,must,not,be,empty,ele,valid,false,if,string,utils,has,text,alias,get,reader,context,error,alias,must,not,be,empty,ele,valid,false,if,valid,try,get,reader,context,get,registry,register,alias,name,alias,catch,exception,ex,get,reader,context,error,failed,to,register,alias,alias,for,bean,with,name,name,ele,ex,get,reader,context,fire,alias,registered,name,alias,extract,source,ele
DefaultBeanDefinitionDocumentReader -> protected void processAliasRegistration(Element ele);1404933463;Process the given alias element, registering the alias with the registry.;protected void processAliasRegistration(Element ele) {_		String name = ele.getAttribute(NAME_ATTRIBUTE)__		String alias = ele.getAttribute(ALIAS_ATTRIBUTE)__		boolean valid = true__		if (!StringUtils.hasText(name)) {_			getReaderContext().error("Name must not be empty", ele)__			valid = false__		}_		if (!StringUtils.hasText(alias)) {_			getReaderContext().error("Alias must not be empty", ele)__			valid = false__		}_		if (valid) {_			try {_				getReaderContext().getRegistry().registerAlias(name, alias)__			}_			catch (Exception ex) {_				getReaderContext().error("Failed to register alias '" + alias +_						"' for bean with name '" + name + "'", ele, ex)__			}_			getReaderContext().fireAliasRegistered(name, alias, extractSource(ele))__		}_	};process,the,given,alias,element,registering,the,alias,with,the,registry;protected,void,process,alias,registration,element,ele,string,name,ele,get,attribute,string,alias,ele,get,attribute,boolean,valid,true,if,string,utils,has,text,name,get,reader,context,error,name,must,not,be,empty,ele,valid,false,if,string,utils,has,text,alias,get,reader,context,error,alias,must,not,be,empty,ele,valid,false,if,valid,try,get,reader,context,get,registry,register,alias,name,alias,catch,exception,ex,get,reader,context,error,failed,to,register,alias,alias,for,bean,with,name,name,ele,ex,get,reader,context,fire,alias,registered,name,alias,extract,source,ele
DefaultBeanDefinitionDocumentReader -> protected void processAliasRegistration(Element ele);1411599760;Process the given alias element, registering the alias with the registry.;protected void processAliasRegistration(Element ele) {_		String name = ele.getAttribute(NAME_ATTRIBUTE)__		String alias = ele.getAttribute(ALIAS_ATTRIBUTE)__		boolean valid = true__		if (!StringUtils.hasText(name)) {_			getReaderContext().error("Name must not be empty", ele)__			valid = false__		}_		if (!StringUtils.hasText(alias)) {_			getReaderContext().error("Alias must not be empty", ele)__			valid = false__		}_		if (valid) {_			try {_				getReaderContext().getRegistry().registerAlias(name, alias)__			}_			catch (Exception ex) {_				getReaderContext().error("Failed to register alias '" + alias +_						"' for bean with name '" + name + "'", ele, ex)__			}_			getReaderContext().fireAliasRegistered(name, alias, extractSource(ele))__		}_	};process,the,given,alias,element,registering,the,alias,with,the,registry;protected,void,process,alias,registration,element,ele,string,name,ele,get,attribute,string,alias,ele,get,attribute,boolean,valid,true,if,string,utils,has,text,name,get,reader,context,error,name,must,not,be,empty,ele,valid,false,if,string,utils,has,text,alias,get,reader,context,error,alias,must,not,be,empty,ele,valid,false,if,valid,try,get,reader,context,get,registry,register,alias,name,alias,catch,exception,ex,get,reader,context,error,failed,to,register,alias,alias,for,bean,with,name,name,ele,ex,get,reader,context,fire,alias,registered,name,alias,extract,source,ele
DefaultBeanDefinitionDocumentReader -> protected void processAliasRegistration(Element ele);1419966315;Process the given alias element, registering the alias with the registry.;protected void processAliasRegistration(Element ele) {_		String name = ele.getAttribute(NAME_ATTRIBUTE)__		String alias = ele.getAttribute(ALIAS_ATTRIBUTE)__		boolean valid = true__		if (!StringUtils.hasText(name)) {_			getReaderContext().error("Name must not be empty", ele)__			valid = false__		}_		if (!StringUtils.hasText(alias)) {_			getReaderContext().error("Alias must not be empty", ele)__			valid = false__		}_		if (valid) {_			try {_				getReaderContext().getRegistry().registerAlias(name, alias)__			}_			catch (Exception ex) {_				getReaderContext().error("Failed to register alias '" + alias +_						"' for bean with name '" + name + "'", ele, ex)__			}_			getReaderContext().fireAliasRegistered(name, alias, extractSource(ele))__		}_	};process,the,given,alias,element,registering,the,alias,with,the,registry;protected,void,process,alias,registration,element,ele,string,name,ele,get,attribute,string,alias,ele,get,attribute,boolean,valid,true,if,string,utils,has,text,name,get,reader,context,error,name,must,not,be,empty,ele,valid,false,if,string,utils,has,text,alias,get,reader,context,error,alias,must,not,be,empty,ele,valid,false,if,valid,try,get,reader,context,get,registry,register,alias,name,alias,catch,exception,ex,get,reader,context,error,failed,to,register,alias,alias,for,bean,with,name,name,ele,ex,get,reader,context,fire,alias,registered,name,alias,extract,source,ele
DefaultBeanDefinitionDocumentReader -> protected void processAliasRegistration(Element ele);1424720154;Process the given alias element, registering the alias with the registry.;protected void processAliasRegistration(Element ele) {_		String name = ele.getAttribute(NAME_ATTRIBUTE)__		String alias = ele.getAttribute(ALIAS_ATTRIBUTE)__		boolean valid = true__		if (!StringUtils.hasText(name)) {_			getReaderContext().error("Name must not be empty", ele)__			valid = false__		}_		if (!StringUtils.hasText(alias)) {_			getReaderContext().error("Alias must not be empty", ele)__			valid = false__		}_		if (valid) {_			try {_				getReaderContext().getRegistry().registerAlias(name, alias)__			}_			catch (Exception ex) {_				getReaderContext().error("Failed to register alias '" + alias +_						"' for bean with name '" + name + "'", ele, ex)__			}_			getReaderContext().fireAliasRegistered(name, alias, extractSource(ele))__		}_	};process,the,given,alias,element,registering,the,alias,with,the,registry;protected,void,process,alias,registration,element,ele,string,name,ele,get,attribute,string,alias,ele,get,attribute,boolean,valid,true,if,string,utils,has,text,name,get,reader,context,error,name,must,not,be,empty,ele,valid,false,if,string,utils,has,text,alias,get,reader,context,error,alias,must,not,be,empty,ele,valid,false,if,valid,try,get,reader,context,get,registry,register,alias,name,alias,catch,exception,ex,get,reader,context,error,failed,to,register,alias,alias,for,bean,with,name,name,ele,ex,get,reader,context,fire,alias,registered,name,alias,extract,source,ele
DefaultBeanDefinitionDocumentReader -> protected void processAliasRegistration(Element ele);1453749972;Process the given alias element, registering the alias with the registry.;protected void processAliasRegistration(Element ele) {_		String name = ele.getAttribute(NAME_ATTRIBUTE)__		String alias = ele.getAttribute(ALIAS_ATTRIBUTE)__		boolean valid = true__		if (!StringUtils.hasText(name)) {_			getReaderContext().error("Name must not be empty", ele)__			valid = false__		}_		if (!StringUtils.hasText(alias)) {_			getReaderContext().error("Alias must not be empty", ele)__			valid = false__		}_		if (valid) {_			try {_				getReaderContext().getRegistry().registerAlias(name, alias)__			}_			catch (Exception ex) {_				getReaderContext().error("Failed to register alias '" + alias +_						"' for bean with name '" + name + "'", ele, ex)__			}_			getReaderContext().fireAliasRegistered(name, alias, extractSource(ele))__		}_	};process,the,given,alias,element,registering,the,alias,with,the,registry;protected,void,process,alias,registration,element,ele,string,name,ele,get,attribute,string,alias,ele,get,attribute,boolean,valid,true,if,string,utils,has,text,name,get,reader,context,error,name,must,not,be,empty,ele,valid,false,if,string,utils,has,text,alias,get,reader,context,error,alias,must,not,be,empty,ele,valid,false,if,valid,try,get,reader,context,get,registry,register,alias,name,alias,catch,exception,ex,get,reader,context,error,failed,to,register,alias,alias,for,bean,with,name,name,ele,ex,get,reader,context,fire,alias,registered,name,alias,extract,source,ele
DefaultBeanDefinitionDocumentReader -> protected void processAliasRegistration(Element ele);1467730834;Process the given alias element, registering the alias with the registry.;protected void processAliasRegistration(Element ele) {_		String name = ele.getAttribute(NAME_ATTRIBUTE)__		String alias = ele.getAttribute(ALIAS_ATTRIBUTE)__		boolean valid = true__		if (!StringUtils.hasText(name)) {_			getReaderContext().error("Name must not be empty", ele)__			valid = false__		}_		if (!StringUtils.hasText(alias)) {_			getReaderContext().error("Alias must not be empty", ele)__			valid = false__		}_		if (valid) {_			try {_				getReaderContext().getRegistry().registerAlias(name, alias)__			}_			catch (Exception ex) {_				getReaderContext().error("Failed to register alias '" + alias +_						"' for bean with name '" + name + "'", ele, ex)__			}_			getReaderContext().fireAliasRegistered(name, alias, extractSource(ele))__		}_	};process,the,given,alias,element,registering,the,alias,with,the,registry;protected,void,process,alias,registration,element,ele,string,name,ele,get,attribute,string,alias,ele,get,attribute,boolean,valid,true,if,string,utils,has,text,name,get,reader,context,error,name,must,not,be,empty,ele,valid,false,if,string,utils,has,text,alias,get,reader,context,error,alias,must,not,be,empty,ele,valid,false,if,valid,try,get,reader,context,get,registry,register,alias,name,alias,catch,exception,ex,get,reader,context,error,failed,to,register,alias,alias,for,bean,with,name,name,ele,ex,get,reader,context,fire,alias,registered,name,alias,extract,source,ele
DefaultBeanDefinitionDocumentReader -> protected void processAliasRegistration(Element ele);1496837955;Process the given alias element, registering the alias with the registry.;protected void processAliasRegistration(Element ele) {_		String name = ele.getAttribute(NAME_ATTRIBUTE)__		String alias = ele.getAttribute(ALIAS_ATTRIBUTE)__		boolean valid = true__		if (!StringUtils.hasText(name)) {_			getReaderContext().error("Name must not be empty", ele)__			valid = false__		}_		if (!StringUtils.hasText(alias)) {_			getReaderContext().error("Alias must not be empty", ele)__			valid = false__		}_		if (valid) {_			try {_				getReaderContext().getRegistry().registerAlias(name, alias)__			}_			catch (Exception ex) {_				getReaderContext().error("Failed to register alias '" + alias +_						"' for bean with name '" + name + "'", ele, ex)__			}_			getReaderContext().fireAliasRegistered(name, alias, extractSource(ele))__		}_	};process,the,given,alias,element,registering,the,alias,with,the,registry;protected,void,process,alias,registration,element,ele,string,name,ele,get,attribute,string,alias,ele,get,attribute,boolean,valid,true,if,string,utils,has,text,name,get,reader,context,error,name,must,not,be,empty,ele,valid,false,if,string,utils,has,text,alias,get,reader,context,error,alias,must,not,be,empty,ele,valid,false,if,valid,try,get,reader,context,get,registry,register,alias,name,alias,catch,exception,ex,get,reader,context,error,failed,to,register,alias,alias,for,bean,with,name,name,ele,ex,get,reader,context,fire,alias,registered,name,alias,extract,source,ele
DefaultBeanDefinitionDocumentReader -> protected void processAliasRegistration(Element ele);1500495740;Process the given alias element, registering the alias with the registry.;protected void processAliasRegistration(Element ele) {_		String name = ele.getAttribute(NAME_ATTRIBUTE)__		String alias = ele.getAttribute(ALIAS_ATTRIBUTE)__		boolean valid = true__		if (!StringUtils.hasText(name)) {_			getReaderContext().error("Name must not be empty", ele)__			valid = false__		}_		if (!StringUtils.hasText(alias)) {_			getReaderContext().error("Alias must not be empty", ele)__			valid = false__		}_		if (valid) {_			try {_				getReaderContext().getRegistry().registerAlias(name, alias)__			}_			catch (Exception ex) {_				getReaderContext().error("Failed to register alias '" + alias +_						"' for bean with name '" + name + "'", ele, ex)__			}_			getReaderContext().fireAliasRegistered(name, alias, extractSource(ele))__		}_	};process,the,given,alias,element,registering,the,alias,with,the,registry;protected,void,process,alias,registration,element,ele,string,name,ele,get,attribute,string,alias,ele,get,attribute,boolean,valid,true,if,string,utils,has,text,name,get,reader,context,error,name,must,not,be,empty,ele,valid,false,if,string,utils,has,text,alias,get,reader,context,error,alias,must,not,be,empty,ele,valid,false,if,valid,try,get,reader,context,get,registry,register,alias,name,alias,catch,exception,ex,get,reader,context,error,failed,to,register,alias,alias,for,bean,with,name,name,ele,ex,get,reader,context,fire,alias,registered,name,alias,extract,source,ele
DefaultBeanDefinitionDocumentReader -> protected void processAliasRegistration(Element ele);1519295386;Process the given alias element, registering the alias with the registry.;protected void processAliasRegistration(Element ele) {_		String name = ele.getAttribute(NAME_ATTRIBUTE)__		String alias = ele.getAttribute(ALIAS_ATTRIBUTE)__		boolean valid = true__		if (!StringUtils.hasText(name)) {_			getReaderContext().error("Name must not be empty", ele)__			valid = false__		}_		if (!StringUtils.hasText(alias)) {_			getReaderContext().error("Alias must not be empty", ele)__			valid = false__		}_		if (valid) {_			try {_				getReaderContext().getRegistry().registerAlias(name, alias)__			}_			catch (Exception ex) {_				getReaderContext().error("Failed to register alias '" + alias +_						"' for bean with name '" + name + "'", ele, ex)__			}_			getReaderContext().fireAliasRegistered(name, alias, extractSource(ele))__		}_	};process,the,given,alias,element,registering,the,alias,with,the,registry;protected,void,process,alias,registration,element,ele,string,name,ele,get,attribute,string,alias,ele,get,attribute,boolean,valid,true,if,string,utils,has,text,name,get,reader,context,error,name,must,not,be,empty,ele,valid,false,if,string,utils,has,text,alias,get,reader,context,error,alias,must,not,be,empty,ele,valid,false,if,valid,try,get,reader,context,get,registry,register,alias,name,alias,catch,exception,ex,get,reader,context,error,failed,to,register,alias,alias,for,bean,with,name,name,ele,ex,get,reader,context,fire,alias,registered,name,alias,extract,source,ele
DefaultBeanDefinitionDocumentReader -> protected void processAliasRegistration(Element ele);1529093363;Process the given alias element, registering the alias with the registry.;protected void processAliasRegistration(Element ele) {_		String name = ele.getAttribute(NAME_ATTRIBUTE)__		String alias = ele.getAttribute(ALIAS_ATTRIBUTE)__		boolean valid = true__		if (!StringUtils.hasText(name)) {_			getReaderContext().error("Name must not be empty", ele)__			valid = false__		}_		if (!StringUtils.hasText(alias)) {_			getReaderContext().error("Alias must not be empty", ele)__			valid = false__		}_		if (valid) {_			try {_				getReaderContext().getRegistry().registerAlias(name, alias)__			}_			catch (Exception ex) {_				getReaderContext().error("Failed to register alias '" + alias +_						"' for bean with name '" + name + "'", ele, ex)__			}_			getReaderContext().fireAliasRegistered(name, alias, extractSource(ele))__		}_	};process,the,given,alias,element,registering,the,alias,with,the,registry;protected,void,process,alias,registration,element,ele,string,name,ele,get,attribute,string,alias,ele,get,attribute,boolean,valid,true,if,string,utils,has,text,name,get,reader,context,error,name,must,not,be,empty,ele,valid,false,if,string,utils,has,text,alias,get,reader,context,error,alias,must,not,be,empty,ele,valid,false,if,valid,try,get,reader,context,get,registry,register,alias,name,alias,catch,exception,ex,get,reader,context,error,failed,to,register,alias,alias,for,bean,with,name,name,ele,ex,get,reader,context,fire,alias,registered,name,alias,extract,source,ele
DefaultBeanDefinitionDocumentReader -> protected void processAliasRegistration(Element ele);1529405413;Process the given alias element, registering the alias with the registry.;protected void processAliasRegistration(Element ele) {_		String name = ele.getAttribute(NAME_ATTRIBUTE)__		String alias = ele.getAttribute(ALIAS_ATTRIBUTE)__		boolean valid = true__		if (!StringUtils.hasText(name)) {_			getReaderContext().error("Name must not be empty", ele)__			valid = false__		}_		if (!StringUtils.hasText(alias)) {_			getReaderContext().error("Alias must not be empty", ele)__			valid = false__		}_		if (valid) {_			try {_				getReaderContext().getRegistry().registerAlias(name, alias)__			}_			catch (Exception ex) {_				getReaderContext().error("Failed to register alias '" + alias +_						"' for bean with name '" + name + "'", ele, ex)__			}_			getReaderContext().fireAliasRegistered(name, alias, extractSource(ele))__		}_	};process,the,given,alias,element,registering,the,alias,with,the,registry;protected,void,process,alias,registration,element,ele,string,name,ele,get,attribute,string,alias,ele,get,attribute,boolean,valid,true,if,string,utils,has,text,name,get,reader,context,error,name,must,not,be,empty,ele,valid,false,if,string,utils,has,text,alias,get,reader,context,error,alias,must,not,be,empty,ele,valid,false,if,valid,try,get,reader,context,get,registry,register,alias,name,alias,catch,exception,ex,get,reader,context,error,failed,to,register,alias,alias,for,bean,with,name,name,ele,ex,get,reader,context,fire,alias,registered,name,alias,extract,source,ele
DefaultBeanDefinitionDocumentReader -> protected void processAliasRegistration(Element ele);1532091916;Process the given alias element, registering the alias with the registry.;protected void processAliasRegistration(Element ele) {_		String name = ele.getAttribute(NAME_ATTRIBUTE)__		String alias = ele.getAttribute(ALIAS_ATTRIBUTE)__		boolean valid = true__		if (!StringUtils.hasText(name)) {_			getReaderContext().error("Name must not be empty", ele)__			valid = false__		}_		if (!StringUtils.hasText(alias)) {_			getReaderContext().error("Alias must not be empty", ele)__			valid = false__		}_		if (valid) {_			try {_				getReaderContext().getRegistry().registerAlias(name, alias)__			}_			catch (Exception ex) {_				getReaderContext().error("Failed to register alias '" + alias +_						"' for bean with name '" + name + "'", ele, ex)__			}_			getReaderContext().fireAliasRegistered(name, alias, extractSource(ele))__		}_	};process,the,given,alias,element,registering,the,alias,with,the,registry;protected,void,process,alias,registration,element,ele,string,name,ele,get,attribute,string,alias,ele,get,attribute,boolean,valid,true,if,string,utils,has,text,name,get,reader,context,error,name,must,not,be,empty,ele,valid,false,if,string,utils,has,text,alias,get,reader,context,error,alias,must,not,be,empty,ele,valid,false,if,valid,try,get,reader,context,get,registry,register,alias,name,alias,catch,exception,ex,get,reader,context,error,failed,to,register,alias,alias,for,bean,with,name,name,ele,ex,get,reader,context,fire,alias,registered,name,alias,extract,source,ele
DefaultBeanDefinitionDocumentReader -> protected void processAliasRegistration(Element ele);1532706365;Process the given alias element, registering the alias with the registry.;protected void processAliasRegistration(Element ele) {_		String name = ele.getAttribute(NAME_ATTRIBUTE)__		String alias = ele.getAttribute(ALIAS_ATTRIBUTE)__		boolean valid = true__		if (!StringUtils.hasText(name)) {_			getReaderContext().error("Name must not be empty", ele)__			valid = false__		}_		if (!StringUtils.hasText(alias)) {_			getReaderContext().error("Alias must not be empty", ele)__			valid = false__		}_		if (valid) {_			try {_				getReaderContext().getRegistry().registerAlias(name, alias)__			}_			catch (Exception ex) {_				getReaderContext().error("Failed to register alias '" + alias +_						"' for bean with name '" + name + "'", ele, ex)__			}_			getReaderContext().fireAliasRegistered(name, alias, extractSource(ele))__		}_	};process,the,given,alias,element,registering,the,alias,with,the,registry;protected,void,process,alias,registration,element,ele,string,name,ele,get,attribute,string,alias,ele,get,attribute,boolean,valid,true,if,string,utils,has,text,name,get,reader,context,error,name,must,not,be,empty,ele,valid,false,if,string,utils,has,text,alias,get,reader,context,error,alias,must,not,be,empty,ele,valid,false,if,valid,try,get,reader,context,get,registry,register,alias,name,alias,catch,exception,ex,get,reader,context,error,failed,to,register,alias,alias,for,bean,with,name,name,ele,ex,get,reader,context,fire,alias,registered,name,alias,extract,source,ele
DefaultBeanDefinitionDocumentReader -> protected void doRegisterBeanDefinitions(Element root);1328020251;Register each bean definition within the given root {@code <beans/>} element._@throws IllegalStateException if {@code <beans profile="..."} attribute is present_and Environment property has not been set_@see #setEnvironment;protected void doRegisterBeanDefinitions(Element root) {_		String profileSpec = root.getAttribute(PROFILE_ATTRIBUTE)__		if (StringUtils.hasText(profileSpec)) {_			Assert.state(this.environment != null, "environment property must not be null")__			String[] specifiedProfiles = StringUtils.tokenizeToStringArray(profileSpec, BeanDefinitionParserDelegate.MULTI_VALUE_ATTRIBUTE_DELIMITERS)__			if (!this.environment.acceptsProfiles(specifiedProfiles)) {_				return__			}_		}__		_		_		_		_		_		_		BeanDefinitionParserDelegate parent = this.delegate__		this.delegate = createHelper(readerContext, root, parent)___		preProcessXml(root)__		parseBeanDefinitions(root, this.delegate)__		postProcessXml(root)___		this.delegate = parent__	};register,each,bean,definition,within,the,given,root,code,beans,element,throws,illegal,state,exception,if,code,beans,profile,attribute,is,present,and,environment,property,has,not,been,set,see,set,environment;protected,void,do,register,bean,definitions,element,root,string,profile,spec,root,get,attribute,if,string,utils,has,text,profile,spec,assert,state,this,environment,null,environment,property,must,not,be,null,string,specified,profiles,string,utils,tokenize,to,string,array,profile,spec,bean,definition,parser,delegate,if,this,environment,accepts,profiles,specified,profiles,return,bean,definition,parser,delegate,parent,this,delegate,this,delegate,create,helper,reader,context,root,parent,pre,process,xml,root,parse,bean,definitions,root,this,delegate,post,process,xml,root,this,delegate,parent
DefaultBeanDefinitionDocumentReader -> protected void doRegisterBeanDefinitions(Element root);1356735495;Register each bean definition within the given root {@code <beans/>} element._@throws IllegalStateException if {@code <beans profile="..."} attribute is present_and Environment property has not been set_@see #setEnvironment;protected void doRegisterBeanDefinitions(Element root) {_		String profileSpec = root.getAttribute(PROFILE_ATTRIBUTE)__		if (StringUtils.hasText(profileSpec)) {_			Assert.state(this.environment != null, "environment property must not be null")__			String[] specifiedProfiles = StringUtils.tokenizeToStringArray(profileSpec, BeanDefinitionParserDelegate.MULTI_VALUE_ATTRIBUTE_DELIMITERS)__			if (!this.environment.acceptsProfiles(specifiedProfiles)) {_				return__			}_		}__		_		_		_		_		_		_		BeanDefinitionParserDelegate parent = this.delegate__		this.delegate = createHelper(readerContext, root, parent)___		preProcessXml(root)__		parseBeanDefinitions(root, this.delegate)__		postProcessXml(root)___		this.delegate = parent__	};register,each,bean,definition,within,the,given,root,code,beans,element,throws,illegal,state,exception,if,code,beans,profile,attribute,is,present,and,environment,property,has,not,been,set,see,set,environment;protected,void,do,register,bean,definitions,element,root,string,profile,spec,root,get,attribute,if,string,utils,has,text,profile,spec,assert,state,this,environment,null,environment,property,must,not,be,null,string,specified,profiles,string,utils,tokenize,to,string,array,profile,spec,bean,definition,parser,delegate,if,this,environment,accepts,profiles,specified,profiles,return,bean,definition,parser,delegate,parent,this,delegate,this,delegate,create,helper,reader,context,root,parent,pre,process,xml,root,parse,bean,definitions,root,this,delegate,post,process,xml,root,this,delegate,parent
DefaultBeanDefinitionDocumentReader -> protected void doRegisterBeanDefinitions(Element root);1357119239;Register each bean definition within the given root {@code <beans/>} element._@throws IllegalStateException if {@code <beans profile="..."} attribute is present_and Environment property has not been set_@see #setEnvironment;protected void doRegisterBeanDefinitions(Element root) {_		String profileSpec = root.getAttribute(PROFILE_ATTRIBUTE)__		if (StringUtils.hasText(profileSpec)) {_			Assert.state(this.environment != null, "environment property must not be null")__			String[] specifiedProfiles = StringUtils.tokenizeToStringArray(profileSpec, BeanDefinitionParserDelegate.MULTI_VALUE_ATTRIBUTE_DELIMITERS)__			if (!this.environment.acceptsProfiles(specifiedProfiles)) {_				return__			}_		}__		_		_		_		_		_		_		BeanDefinitionParserDelegate parent = this.delegate__		this.delegate = createHelper(readerContext, root, parent)___		preProcessXml(root)__		parseBeanDefinitions(root, this.delegate)__		postProcessXml(root)___		this.delegate = parent__	};register,each,bean,definition,within,the,given,root,code,beans,element,throws,illegal,state,exception,if,code,beans,profile,attribute,is,present,and,environment,property,has,not,been,set,see,set,environment;protected,void,do,register,bean,definitions,element,root,string,profile,spec,root,get,attribute,if,string,utils,has,text,profile,spec,assert,state,this,environment,null,environment,property,must,not,be,null,string,specified,profiles,string,utils,tokenize,to,string,array,profile,spec,bean,definition,parser,delegate,if,this,environment,accepts,profiles,specified,profiles,return,bean,definition,parser,delegate,parent,this,delegate,this,delegate,create,helper,reader,context,root,parent,pre,process,xml,root,parse,bean,definitions,root,this,delegate,post,process,xml,root,this,delegate,parent
DefaultBeanDefinitionDocumentReader -> protected void doRegisterBeanDefinitions(Element root);1362408075;Register each bean definition within the given root {@code <beans/>} element._@throws IllegalStateException if {@code <beans profile="..."} attribute is present_and Environment property has not been set_@see #setEnvironment;protected void doRegisterBeanDefinitions(Element root) {_		String profileSpec = root.getAttribute(PROFILE_ATTRIBUTE)__		if (StringUtils.hasText(profileSpec)) {_			Assert.state(this.environment != null, "Environment must be set for evaluating profiles")__			String[] specifiedProfiles = StringUtils.tokenizeToStringArray(_					profileSpec, BeanDefinitionParserDelegate.MULTI_VALUE_ATTRIBUTE_DELIMITERS)__			if (!this.environment.acceptsProfiles(specifiedProfiles)) {_				return__			}_		}__		_		_		_		_		_		_		BeanDefinitionParserDelegate parent = this.delegate__		this.delegate = createHelper(this.readerContext, root, parent)___		preProcessXml(root)__		parseBeanDefinitions(root, this.delegate)__		postProcessXml(root)___		this.delegate = parent__	};register,each,bean,definition,within,the,given,root,code,beans,element,throws,illegal,state,exception,if,code,beans,profile,attribute,is,present,and,environment,property,has,not,been,set,see,set,environment;protected,void,do,register,bean,definitions,element,root,string,profile,spec,root,get,attribute,if,string,utils,has,text,profile,spec,assert,state,this,environment,null,environment,must,be,set,for,evaluating,profiles,string,specified,profiles,string,utils,tokenize,to,string,array,profile,spec,bean,definition,parser,delegate,if,this,environment,accepts,profiles,specified,profiles,return,bean,definition,parser,delegate,parent,this,delegate,this,delegate,create,helper,this,reader,context,root,parent,pre,process,xml,root,parse,bean,definitions,root,this,delegate,post,process,xml,root,this,delegate,parent
DefaultBeanDefinitionDocumentReader -> protected void doRegisterBeanDefinitions(Element root);1368482696;Register each bean definition within the given root {@code <beans/>} element._@throws IllegalStateException if {@code <beans profile="..."} attribute is present_and Environment property has not been set_@see #setEnvironment;protected void doRegisterBeanDefinitions(Element root) {_		String profileSpec = root.getAttribute(PROFILE_ATTRIBUTE)__		if (StringUtils.hasText(profileSpec)) {_			Assert.state(this.environment != null, "Environment must be set for evaluating profiles")__			String[] specifiedProfiles = StringUtils.tokenizeToStringArray(_					profileSpec, BeanDefinitionParserDelegate.MULTI_VALUE_ATTRIBUTE_DELIMITERS)__			if (!this.environment.acceptsProfiles(specifiedProfiles)) {_				return__			}_		}__		_		_		_		_		_		_		BeanDefinitionParserDelegate parent = this.delegate__		this.delegate = createHelper(this.readerContext, root, parent)___		preProcessXml(root)__		parseBeanDefinitions(root, this.delegate)__		postProcessXml(root)___		this.delegate = parent__	};register,each,bean,definition,within,the,given,root,code,beans,element,throws,illegal,state,exception,if,code,beans,profile,attribute,is,present,and,environment,property,has,not,been,set,see,set,environment;protected,void,do,register,bean,definitions,element,root,string,profile,spec,root,get,attribute,if,string,utils,has,text,profile,spec,assert,state,this,environment,null,environment,must,be,set,for,evaluating,profiles,string,specified,profiles,string,utils,tokenize,to,string,array,profile,spec,bean,definition,parser,delegate,if,this,environment,accepts,profiles,specified,profiles,return,bean,definition,parser,delegate,parent,this,delegate,this,delegate,create,helper,this,reader,context,root,parent,pre,process,xml,root,parse,bean,definitions,root,this,delegate,post,process,xml,root,this,delegate,parent
DefaultBeanDefinitionDocumentReader -> protected void doRegisterBeanDefinitions(Element root);1382030648;Register each bean definition within the given root {@code <beans/>} element._@throws IllegalStateException if {@code <beans profile="..."} attribute is present_and Environment property has not been set_@see #setEnvironment;protected void doRegisterBeanDefinitions(Element root) {_		String profileSpec = root.getAttribute(PROFILE_ATTRIBUTE)__		if (StringUtils.hasText(profileSpec)) {_			Assert.state(this.environment != null, "Environment must be set for evaluating profiles")__			String[] specifiedProfiles = StringUtils.tokenizeToStringArray(_					profileSpec, BeanDefinitionParserDelegate.MULTI_VALUE_ATTRIBUTE_DELIMITERS)__			if (!this.environment.acceptsProfiles(specifiedProfiles)) {_				return__			}_		}__		_		_		_		_		_		_		BeanDefinitionParserDelegate parent = this.delegate__		this.delegate = createDelegate(this.readerContext, root, parent)___		preProcessXml(root)__		parseBeanDefinitions(root, this.delegate)__		postProcessXml(root)___		this.delegate = parent__	};register,each,bean,definition,within,the,given,root,code,beans,element,throws,illegal,state,exception,if,code,beans,profile,attribute,is,present,and,environment,property,has,not,been,set,see,set,environment;protected,void,do,register,bean,definitions,element,root,string,profile,spec,root,get,attribute,if,string,utils,has,text,profile,spec,assert,state,this,environment,null,environment,must,be,set,for,evaluating,profiles,string,specified,profiles,string,utils,tokenize,to,string,array,profile,spec,bean,definition,parser,delegate,if,this,environment,accepts,profiles,specified,profiles,return,bean,definition,parser,delegate,parent,this,delegate,this,delegate,create,delegate,this,reader,context,root,parent,pre,process,xml,root,parse,bean,definitions,root,this,delegate,post,process,xml,root,this,delegate,parent
DefaultBeanDefinitionDocumentReader -> protected void doRegisterBeanDefinitions(Element root);1404933463;Register each bean definition within the given root {@code <beans/>} element._@throws IllegalStateException if {@code <beans profile="..."} attribute is present_and Environment property has not been set_@see #setEnvironment;protected void doRegisterBeanDefinitions(Element root) {_		_		_		_		_		_		_		BeanDefinitionParserDelegate parent = this.delegate__		this.delegate = createDelegate(this.readerContext, root, parent)___		if (this.delegate.isDefaultNamespace(root)) {_			String profileSpec = root.getAttribute(PROFILE_ATTRIBUTE)__			if (StringUtils.hasText(profileSpec)) {_				Assert.state(this.environment != null, "Environment must be set for evaluating profiles")__				String[] specifiedProfiles = StringUtils.tokenizeToStringArray(_						profileSpec, BeanDefinitionParserDelegate.MULTI_VALUE_ATTRIBUTE_DELIMITERS)__				if (!this.environment.acceptsProfiles(specifiedProfiles)) {_					return__				}_			}_		}__		preProcessXml(root)__		parseBeanDefinitions(root, this.delegate)__		postProcessXml(root)___		this.delegate = parent__	};register,each,bean,definition,within,the,given,root,code,beans,element,throws,illegal,state,exception,if,code,beans,profile,attribute,is,present,and,environment,property,has,not,been,set,see,set,environment;protected,void,do,register,bean,definitions,element,root,bean,definition,parser,delegate,parent,this,delegate,this,delegate,create,delegate,this,reader,context,root,parent,if,this,delegate,is,default,namespace,root,string,profile,spec,root,get,attribute,if,string,utils,has,text,profile,spec,assert,state,this,environment,null,environment,must,be,set,for,evaluating,profiles,string,specified,profiles,string,utils,tokenize,to,string,array,profile,spec,bean,definition,parser,delegate,if,this,environment,accepts,profiles,specified,profiles,return,pre,process,xml,root,parse,bean,definitions,root,this,delegate,post,process,xml,root,this,delegate,parent
DefaultBeanDefinitionDocumentReader -> protected void doRegisterBeanDefinitions(Element root);1411599760;Register each bean definition within the given root {@code <beans/>} element.;protected void doRegisterBeanDefinitions(Element root) {_		_		_		_		_		_		_		BeanDefinitionParserDelegate parent = this.delegate__		this.delegate = createDelegate(getReaderContext(), root, parent)___		if (this.delegate.isDefaultNamespace(root)) {_			String profileSpec = root.getAttribute(PROFILE_ATTRIBUTE)__			if (StringUtils.hasText(profileSpec)) {_				String[] specifiedProfiles = StringUtils.tokenizeToStringArray(_						profileSpec, BeanDefinitionParserDelegate.MULTI_VALUE_ATTRIBUTE_DELIMITERS)__				if (!getReaderContext().getEnvironment().acceptsProfiles(specifiedProfiles)) {_					return__				}_			}_		}__		preProcessXml(root)__		parseBeanDefinitions(root, this.delegate)__		postProcessXml(root)___		this.delegate = parent__	};register,each,bean,definition,within,the,given,root,code,beans,element;protected,void,do,register,bean,definitions,element,root,bean,definition,parser,delegate,parent,this,delegate,this,delegate,create,delegate,get,reader,context,root,parent,if,this,delegate,is,default,namespace,root,string,profile,spec,root,get,attribute,if,string,utils,has,text,profile,spec,string,specified,profiles,string,utils,tokenize,to,string,array,profile,spec,bean,definition,parser,delegate,if,get,reader,context,get,environment,accepts,profiles,specified,profiles,return,pre,process,xml,root,parse,bean,definitions,root,this,delegate,post,process,xml,root,this,delegate,parent
DefaultBeanDefinitionDocumentReader -> protected void doRegisterBeanDefinitions(Element root);1419966315;Register each bean definition within the given root {@code <beans/>} element.;protected void doRegisterBeanDefinitions(Element root) {_		_		_		_		_		_		_		BeanDefinitionParserDelegate parent = this.delegate__		this.delegate = createDelegate(getReaderContext(), root, parent)___		if (this.delegate.isDefaultNamespace(root)) {_			String profileSpec = root.getAttribute(PROFILE_ATTRIBUTE)__			if (StringUtils.hasText(profileSpec)) {_				String[] specifiedProfiles = StringUtils.tokenizeToStringArray(_						profileSpec, BeanDefinitionParserDelegate.MULTI_VALUE_ATTRIBUTE_DELIMITERS)__				if (!getReaderContext().getEnvironment().acceptsProfiles(specifiedProfiles)) {_					return__				}_			}_		}__		preProcessXml(root)__		parseBeanDefinitions(root, this.delegate)__		postProcessXml(root)___		this.delegate = parent__	};register,each,bean,definition,within,the,given,root,code,beans,element;protected,void,do,register,bean,definitions,element,root,bean,definition,parser,delegate,parent,this,delegate,this,delegate,create,delegate,get,reader,context,root,parent,if,this,delegate,is,default,namespace,root,string,profile,spec,root,get,attribute,if,string,utils,has,text,profile,spec,string,specified,profiles,string,utils,tokenize,to,string,array,profile,spec,bean,definition,parser,delegate,if,get,reader,context,get,environment,accepts,profiles,specified,profiles,return,pre,process,xml,root,parse,bean,definitions,root,this,delegate,post,process,xml,root,this,delegate,parent
DefaultBeanDefinitionDocumentReader -> protected void doRegisterBeanDefinitions(Element root);1424720154;Register each bean definition within the given root {@code <beans/>} element.;protected void doRegisterBeanDefinitions(Element root) {_		_		_		_		_		_		_		BeanDefinitionParserDelegate parent = this.delegate__		this.delegate = createDelegate(getReaderContext(), root, parent)___		if (this.delegate.isDefaultNamespace(root)) {_			String profileSpec = root.getAttribute(PROFILE_ATTRIBUTE)__			if (StringUtils.hasText(profileSpec)) {_				String[] specifiedProfiles = StringUtils.tokenizeToStringArray(_						profileSpec, BeanDefinitionParserDelegate.MULTI_VALUE_ATTRIBUTE_DELIMITERS)__				if (!getReaderContext().getEnvironment().acceptsProfiles(specifiedProfiles)) {_					return__				}_			}_		}__		preProcessXml(root)__		parseBeanDefinitions(root, this.delegate)__		postProcessXml(root)___		this.delegate = parent__	};register,each,bean,definition,within,the,given,root,code,beans,element;protected,void,do,register,bean,definitions,element,root,bean,definition,parser,delegate,parent,this,delegate,this,delegate,create,delegate,get,reader,context,root,parent,if,this,delegate,is,default,namespace,root,string,profile,spec,root,get,attribute,if,string,utils,has,text,profile,spec,string,specified,profiles,string,utils,tokenize,to,string,array,profile,spec,bean,definition,parser,delegate,if,get,reader,context,get,environment,accepts,profiles,specified,profiles,return,pre,process,xml,root,parse,bean,definitions,root,this,delegate,post,process,xml,root,this,delegate,parent
DefaultBeanDefinitionDocumentReader -> protected void doRegisterBeanDefinitions(Element root);1453749972;Register each bean definition within the given root {@code <beans/>} element.;protected void doRegisterBeanDefinitions(Element root) {_		_		_		_		_		_		_		BeanDefinitionParserDelegate parent = this.delegate__		this.delegate = createDelegate(getReaderContext(), root, parent)___		if (this.delegate.isDefaultNamespace(root)) {_			String profileSpec = root.getAttribute(PROFILE_ATTRIBUTE)__			if (StringUtils.hasText(profileSpec)) {_				String[] specifiedProfiles = StringUtils.tokenizeToStringArray(_						profileSpec, BeanDefinitionParserDelegate.MULTI_VALUE_ATTRIBUTE_DELIMITERS)__				if (!getReaderContext().getEnvironment().acceptsProfiles(specifiedProfiles)) {_					if (logger.isInfoEnabled()) {_						logger.info("Skipped XML bean definition file due to specified profiles [" + profileSpec +_								"] not matching: " + getReaderContext().getResource())__					}_					return__				}_			}_		}__		preProcessXml(root)__		parseBeanDefinitions(root, this.delegate)__		postProcessXml(root)___		this.delegate = parent__	};register,each,bean,definition,within,the,given,root,code,beans,element;protected,void,do,register,bean,definitions,element,root,bean,definition,parser,delegate,parent,this,delegate,this,delegate,create,delegate,get,reader,context,root,parent,if,this,delegate,is,default,namespace,root,string,profile,spec,root,get,attribute,if,string,utils,has,text,profile,spec,string,specified,profiles,string,utils,tokenize,to,string,array,profile,spec,bean,definition,parser,delegate,if,get,reader,context,get,environment,accepts,profiles,specified,profiles,if,logger,is,info,enabled,logger,info,skipped,xml,bean,definition,file,due,to,specified,profiles,profile,spec,not,matching,get,reader,context,get,resource,return,pre,process,xml,root,parse,bean,definitions,root,this,delegate,post,process,xml,root,this,delegate,parent
DefaultBeanDefinitionDocumentReader -> protected void doRegisterBeanDefinitions(Element root);1467730834;Register each bean definition within the given root {@code <beans/>} element.;protected void doRegisterBeanDefinitions(Element root) {_		_		_		_		_		_		_		BeanDefinitionParserDelegate parent = this.delegate__		this.delegate = createDelegate(getReaderContext(), root, parent)___		if (this.delegate.isDefaultNamespace(root)) {_			String profileSpec = root.getAttribute(PROFILE_ATTRIBUTE)__			if (StringUtils.hasText(profileSpec)) {_				String[] specifiedProfiles = StringUtils.tokenizeToStringArray(_						profileSpec, BeanDefinitionParserDelegate.MULTI_VALUE_ATTRIBUTE_DELIMITERS)__				if (!getReaderContext().getEnvironment().acceptsProfiles(specifiedProfiles)) {_					if (logger.isInfoEnabled()) {_						logger.info("Skipped XML bean definition file due to specified profiles [" + profileSpec +_								"] not matching: " + getReaderContext().getResource())__					}_					return__				}_			}_		}__		preProcessXml(root)__		parseBeanDefinitions(root, this.delegate)__		postProcessXml(root)___		this.delegate = parent__	};register,each,bean,definition,within,the,given,root,code,beans,element;protected,void,do,register,bean,definitions,element,root,bean,definition,parser,delegate,parent,this,delegate,this,delegate,create,delegate,get,reader,context,root,parent,if,this,delegate,is,default,namespace,root,string,profile,spec,root,get,attribute,if,string,utils,has,text,profile,spec,string,specified,profiles,string,utils,tokenize,to,string,array,profile,spec,bean,definition,parser,delegate,if,get,reader,context,get,environment,accepts,profiles,specified,profiles,if,logger,is,info,enabled,logger,info,skipped,xml,bean,definition,file,due,to,specified,profiles,profile,spec,not,matching,get,reader,context,get,resource,return,pre,process,xml,root,parse,bean,definitions,root,this,delegate,post,process,xml,root,this,delegate,parent
DefaultBeanDefinitionDocumentReader -> protected void doRegisterBeanDefinitions(Element root);1496837955;Register each bean definition within the given root {@code <beans/>} element.;protected void doRegisterBeanDefinitions(Element root) {_		_		_		_		_		_		_		BeanDefinitionParserDelegate parent = this.delegate__		this.delegate = createDelegate(getReaderContext(), root, parent)___		if (this.delegate.isDefaultNamespace(root)) {_			String profileSpec = root.getAttribute(PROFILE_ATTRIBUTE)__			if (StringUtils.hasText(profileSpec)) {_				String[] specifiedProfiles = StringUtils.tokenizeToStringArray(_						profileSpec, BeanDefinitionParserDelegate.MULTI_VALUE_ATTRIBUTE_DELIMITERS)__				if (!getReaderContext().getEnvironment().acceptsProfiles(specifiedProfiles)) {_					if (logger.isInfoEnabled()) {_						logger.info("Skipped XML bean definition file due to specified profiles [" + profileSpec +_								"] not matching: " + getReaderContext().getResource())__					}_					return__				}_			}_		}__		preProcessXml(root)__		parseBeanDefinitions(root, this.delegate)__		postProcessXml(root)___		this.delegate = parent__	};register,each,bean,definition,within,the,given,root,code,beans,element;protected,void,do,register,bean,definitions,element,root,bean,definition,parser,delegate,parent,this,delegate,this,delegate,create,delegate,get,reader,context,root,parent,if,this,delegate,is,default,namespace,root,string,profile,spec,root,get,attribute,if,string,utils,has,text,profile,spec,string,specified,profiles,string,utils,tokenize,to,string,array,profile,spec,bean,definition,parser,delegate,if,get,reader,context,get,environment,accepts,profiles,specified,profiles,if,logger,is,info,enabled,logger,info,skipped,xml,bean,definition,file,due,to,specified,profiles,profile,spec,not,matching,get,reader,context,get,resource,return,pre,process,xml,root,parse,bean,definitions,root,this,delegate,post,process,xml,root,this,delegate,parent
DefaultBeanDefinitionDocumentReader -> protected void doRegisterBeanDefinitions(Element root);1500495740;Register each bean definition within the given root {@code <beans/>} element.;protected void doRegisterBeanDefinitions(Element root) {_		_		_		_		_		_		_		BeanDefinitionParserDelegate parent = this.delegate__		this.delegate = createDelegate(getReaderContext(), root, parent)___		if (this.delegate.isDefaultNamespace(root)) {_			String profileSpec = root.getAttribute(PROFILE_ATTRIBUTE)__			if (StringUtils.hasText(profileSpec)) {_				String[] specifiedProfiles = StringUtils.tokenizeToStringArray(_						profileSpec, BeanDefinitionParserDelegate.MULTI_VALUE_ATTRIBUTE_DELIMITERS)__				if (!getReaderContext().getEnvironment().acceptsProfiles(specifiedProfiles)) {_					if (logger.isInfoEnabled()) {_						logger.info("Skipped XML bean definition file due to specified profiles [" + profileSpec +_								"] not matching: " + getReaderContext().getResource())__					}_					return__				}_			}_		}__		preProcessXml(root)__		parseBeanDefinitions(root, this.delegate)__		postProcessXml(root)___		this.delegate = parent__	};register,each,bean,definition,within,the,given,root,code,beans,element;protected,void,do,register,bean,definitions,element,root,bean,definition,parser,delegate,parent,this,delegate,this,delegate,create,delegate,get,reader,context,root,parent,if,this,delegate,is,default,namespace,root,string,profile,spec,root,get,attribute,if,string,utils,has,text,profile,spec,string,specified,profiles,string,utils,tokenize,to,string,array,profile,spec,bean,definition,parser,delegate,if,get,reader,context,get,environment,accepts,profiles,specified,profiles,if,logger,is,info,enabled,logger,info,skipped,xml,bean,definition,file,due,to,specified,profiles,profile,spec,not,matching,get,reader,context,get,resource,return,pre,process,xml,root,parse,bean,definitions,root,this,delegate,post,process,xml,root,this,delegate,parent
DefaultBeanDefinitionDocumentReader -> protected void doRegisterBeanDefinitions(Element root);1519295386;Register each bean definition within the given root {@code <beans/>} element.;protected void doRegisterBeanDefinitions(Element root) {_		_		_		_		_		_		_		BeanDefinitionParserDelegate parent = this.delegate__		this.delegate = createDelegate(getReaderContext(), root, parent)___		if (this.delegate.isDefaultNamespace(root)) {_			String profileSpec = root.getAttribute(PROFILE_ATTRIBUTE)__			if (StringUtils.hasText(profileSpec)) {_				String[] specifiedProfiles = StringUtils.tokenizeToStringArray(_						profileSpec, BeanDefinitionParserDelegate.MULTI_VALUE_ATTRIBUTE_DELIMITERS)__				if (!getReaderContext().getEnvironment().acceptsProfiles(specifiedProfiles)) {_					if (logger.isInfoEnabled()) {_						logger.info("Skipped XML bean definition file due to specified profiles [" + profileSpec +_								"] not matching: " + getReaderContext().getResource())__					}_					return__				}_			}_		}__		preProcessXml(root)__		parseBeanDefinitions(root, this.delegate)__		postProcessXml(root)___		this.delegate = parent__	};register,each,bean,definition,within,the,given,root,code,beans,element;protected,void,do,register,bean,definitions,element,root,bean,definition,parser,delegate,parent,this,delegate,this,delegate,create,delegate,get,reader,context,root,parent,if,this,delegate,is,default,namespace,root,string,profile,spec,root,get,attribute,if,string,utils,has,text,profile,spec,string,specified,profiles,string,utils,tokenize,to,string,array,profile,spec,bean,definition,parser,delegate,if,get,reader,context,get,environment,accepts,profiles,specified,profiles,if,logger,is,info,enabled,logger,info,skipped,xml,bean,definition,file,due,to,specified,profiles,profile,spec,not,matching,get,reader,context,get,resource,return,pre,process,xml,root,parse,bean,definitions,root,this,delegate,post,process,xml,root,this,delegate,parent
DefaultBeanDefinitionDocumentReader -> protected final XmlReaderContext getReaderContext();1328020251;Return the descriptor for the XML resource that this parser works on.;protected final XmlReaderContext getReaderContext() {_		return this.readerContext__	};return,the,descriptor,for,the,xml,resource,that,this,parser,works,on;protected,final,xml,reader,context,get,reader,context,return,this,reader,context
DefaultBeanDefinitionDocumentReader -> protected final XmlReaderContext getReaderContext();1356735495;Return the descriptor for the XML resource that this parser works on.;protected final XmlReaderContext getReaderContext() {_		return this.readerContext__	};return,the,descriptor,for,the,xml,resource,that,this,parser,works,on;protected,final,xml,reader,context,get,reader,context,return,this,reader,context
DefaultBeanDefinitionDocumentReader -> protected final XmlReaderContext getReaderContext();1357119239;Return the descriptor for the XML resource that this parser works on.;protected final XmlReaderContext getReaderContext() {_		return this.readerContext__	};return,the,descriptor,for,the,xml,resource,that,this,parser,works,on;protected,final,xml,reader,context,get,reader,context,return,this,reader,context
DefaultBeanDefinitionDocumentReader -> protected final XmlReaderContext getReaderContext();1362408075;Return the descriptor for the XML resource that this parser works on.;protected final XmlReaderContext getReaderContext() {_		return this.readerContext__	};return,the,descriptor,for,the,xml,resource,that,this,parser,works,on;protected,final,xml,reader,context,get,reader,context,return,this,reader,context
DefaultBeanDefinitionDocumentReader -> protected final XmlReaderContext getReaderContext();1368482696;Return the descriptor for the XML resource that this parser works on.;protected final XmlReaderContext getReaderContext() {_		return this.readerContext__	};return,the,descriptor,for,the,xml,resource,that,this,parser,works,on;protected,final,xml,reader,context,get,reader,context,return,this,reader,context
DefaultBeanDefinitionDocumentReader -> protected final XmlReaderContext getReaderContext();1382030648;Return the descriptor for the XML resource that this parser works on.;protected final XmlReaderContext getReaderContext() {_		return this.readerContext__	};return,the,descriptor,for,the,xml,resource,that,this,parser,works,on;protected,final,xml,reader,context,get,reader,context,return,this,reader,context
DefaultBeanDefinitionDocumentReader -> protected final XmlReaderContext getReaderContext();1404933463;Return the descriptor for the XML resource that this parser works on.;protected final XmlReaderContext getReaderContext() {_		return this.readerContext__	};return,the,descriptor,for,the,xml,resource,that,this,parser,works,on;protected,final,xml,reader,context,get,reader,context,return,this,reader,context
DefaultBeanDefinitionDocumentReader -> protected final XmlReaderContext getReaderContext();1411599760;Return the descriptor for the XML resource that this parser works on.;protected final XmlReaderContext getReaderContext() {_		return this.readerContext__	};return,the,descriptor,for,the,xml,resource,that,this,parser,works,on;protected,final,xml,reader,context,get,reader,context,return,this,reader,context
DefaultBeanDefinitionDocumentReader -> protected final XmlReaderContext getReaderContext();1419966315;Return the descriptor for the XML resource that this parser works on.;protected final XmlReaderContext getReaderContext() {_		return this.readerContext__	};return,the,descriptor,for,the,xml,resource,that,this,parser,works,on;protected,final,xml,reader,context,get,reader,context,return,this,reader,context
DefaultBeanDefinitionDocumentReader -> protected final XmlReaderContext getReaderContext();1424720154;Return the descriptor for the XML resource that this parser works on.;protected final XmlReaderContext getReaderContext() {_		return this.readerContext__	};return,the,descriptor,for,the,xml,resource,that,this,parser,works,on;protected,final,xml,reader,context,get,reader,context,return,this,reader,context
DefaultBeanDefinitionDocumentReader -> protected final XmlReaderContext getReaderContext();1453749972;Return the descriptor for the XML resource that this parser works on.;protected final XmlReaderContext getReaderContext() {_		return this.readerContext__	};return,the,descriptor,for,the,xml,resource,that,this,parser,works,on;protected,final,xml,reader,context,get,reader,context,return,this,reader,context
DefaultBeanDefinitionDocumentReader -> protected final XmlReaderContext getReaderContext();1467730834;Return the descriptor for the XML resource that this parser works on.;protected final XmlReaderContext getReaderContext() {_		return this.readerContext__	};return,the,descriptor,for,the,xml,resource,that,this,parser,works,on;protected,final,xml,reader,context,get,reader,context,return,this,reader,context
DefaultBeanDefinitionDocumentReader -> protected final XmlReaderContext getReaderContext();1496837955;Return the descriptor for the XML resource that this parser works on.;protected final XmlReaderContext getReaderContext() {_		return this.readerContext__	};return,the,descriptor,for,the,xml,resource,that,this,parser,works,on;protected,final,xml,reader,context,get,reader,context,return,this,reader,context
DefaultBeanDefinitionDocumentReader -> protected final XmlReaderContext getReaderContext();1500495740;Return the descriptor for the XML resource that this parser works on.;protected final XmlReaderContext getReaderContext() {_		Assert.state(this.readerContext != null, "No XmlReaderContext available")__		return this.readerContext__	};return,the,descriptor,for,the,xml,resource,that,this,parser,works,on;protected,final,xml,reader,context,get,reader,context,assert,state,this,reader,context,null,no,xml,reader,context,available,return,this,reader,context
DefaultBeanDefinitionDocumentReader -> protected final XmlReaderContext getReaderContext();1519295386;Return the descriptor for the XML resource that this parser works on.;protected final XmlReaderContext getReaderContext() {_		Assert.state(this.readerContext != null, "No XmlReaderContext available")__		return this.readerContext__	};return,the,descriptor,for,the,xml,resource,that,this,parser,works,on;protected,final,xml,reader,context,get,reader,context,assert,state,this,reader,context,null,no,xml,reader,context,available,return,this,reader,context
DefaultBeanDefinitionDocumentReader -> protected final XmlReaderContext getReaderContext();1529093363;Return the descriptor for the XML resource that this parser works on.;protected final XmlReaderContext getReaderContext() {_		Assert.state(this.readerContext != null, "No XmlReaderContext available")__		return this.readerContext__	};return,the,descriptor,for,the,xml,resource,that,this,parser,works,on;protected,final,xml,reader,context,get,reader,context,assert,state,this,reader,context,null,no,xml,reader,context,available,return,this,reader,context
DefaultBeanDefinitionDocumentReader -> protected final XmlReaderContext getReaderContext();1529405413;Return the descriptor for the XML resource that this parser works on.;protected final XmlReaderContext getReaderContext() {_		Assert.state(this.readerContext != null, "No XmlReaderContext available")__		return this.readerContext__	};return,the,descriptor,for,the,xml,resource,that,this,parser,works,on;protected,final,xml,reader,context,get,reader,context,assert,state,this,reader,context,null,no,xml,reader,context,available,return,this,reader,context
DefaultBeanDefinitionDocumentReader -> protected final XmlReaderContext getReaderContext();1532091916;Return the descriptor for the XML resource that this parser works on.;protected final XmlReaderContext getReaderContext() {_		Assert.state(this.readerContext != null, "No XmlReaderContext available")__		return this.readerContext__	};return,the,descriptor,for,the,xml,resource,that,this,parser,works,on;protected,final,xml,reader,context,get,reader,context,assert,state,this,reader,context,null,no,xml,reader,context,available,return,this,reader,context
DefaultBeanDefinitionDocumentReader -> protected final XmlReaderContext getReaderContext();1532706365;Return the descriptor for the XML resource that this parser works on.;protected final XmlReaderContext getReaderContext() {_		Assert.state(this.readerContext != null, "No XmlReaderContext available")__		return this.readerContext__	};return,the,descriptor,for,the,xml,resource,that,this,parser,works,on;protected,final,xml,reader,context,get,reader,context,assert,state,this,reader,context,null,no,xml,reader,context,available,return,this,reader,context
DefaultBeanDefinitionDocumentReader -> protected void processBeanDefinition(Element ele, BeanDefinitionParserDelegate delegate);1328020251;Process the given bean element, parsing the bean definition_and registering it with the registry.;protected void processBeanDefinition(Element ele, BeanDefinitionParserDelegate delegate) {_		BeanDefinitionHolder bdHolder = delegate.parseBeanDefinitionElement(ele)__		if (bdHolder != null) {_			bdHolder = delegate.decorateBeanDefinitionIfRequired(ele, bdHolder)__			try {_				_				BeanDefinitionReaderUtils.registerBeanDefinition(bdHolder, getReaderContext().getRegistry())__			}_			catch (BeanDefinitionStoreException ex) {_				getReaderContext().error("Failed to register bean definition with name '" +_						bdHolder.getBeanName() + "'", ele, ex)__			}_			_			getReaderContext().fireComponentRegistered(new BeanComponentDefinition(bdHolder))__		}_	};process,the,given,bean,element,parsing,the,bean,definition,and,registering,it,with,the,registry;protected,void,process,bean,definition,element,ele,bean,definition,parser,delegate,delegate,bean,definition,holder,bd,holder,delegate,parse,bean,definition,element,ele,if,bd,holder,null,bd,holder,delegate,decorate,bean,definition,if,required,ele,bd,holder,try,bean,definition,reader,utils,register,bean,definition,bd,holder,get,reader,context,get,registry,catch,bean,definition,store,exception,ex,get,reader,context,error,failed,to,register,bean,definition,with,name,bd,holder,get,bean,name,ele,ex,get,reader,context,fire,component,registered,new,bean,component,definition,bd,holder
DefaultBeanDefinitionDocumentReader -> protected void processBeanDefinition(Element ele, BeanDefinitionParserDelegate delegate);1356735495;Process the given bean element, parsing the bean definition_and registering it with the registry.;protected void processBeanDefinition(Element ele, BeanDefinitionParserDelegate delegate) {_		BeanDefinitionHolder bdHolder = delegate.parseBeanDefinitionElement(ele)__		if (bdHolder != null) {_			bdHolder = delegate.decorateBeanDefinitionIfRequired(ele, bdHolder)__			try {_				_				BeanDefinitionReaderUtils.registerBeanDefinition(bdHolder, getReaderContext().getRegistry())__			}_			catch (BeanDefinitionStoreException ex) {_				getReaderContext().error("Failed to register bean definition with name '" +_						bdHolder.getBeanName() + "'", ele, ex)__			}_			_			getReaderContext().fireComponentRegistered(new BeanComponentDefinition(bdHolder))__		}_	};process,the,given,bean,element,parsing,the,bean,definition,and,registering,it,with,the,registry;protected,void,process,bean,definition,element,ele,bean,definition,parser,delegate,delegate,bean,definition,holder,bd,holder,delegate,parse,bean,definition,element,ele,if,bd,holder,null,bd,holder,delegate,decorate,bean,definition,if,required,ele,bd,holder,try,bean,definition,reader,utils,register,bean,definition,bd,holder,get,reader,context,get,registry,catch,bean,definition,store,exception,ex,get,reader,context,error,failed,to,register,bean,definition,with,name,bd,holder,get,bean,name,ele,ex,get,reader,context,fire,component,registered,new,bean,component,definition,bd,holder
DefaultBeanDefinitionDocumentReader -> protected void processBeanDefinition(Element ele, BeanDefinitionParserDelegate delegate);1357119239;Process the given bean element, parsing the bean definition_and registering it with the registry.;protected void processBeanDefinition(Element ele, BeanDefinitionParserDelegate delegate) {_		BeanDefinitionHolder bdHolder = delegate.parseBeanDefinitionElement(ele)__		if (bdHolder != null) {_			bdHolder = delegate.decorateBeanDefinitionIfRequired(ele, bdHolder)__			try {_				_				BeanDefinitionReaderUtils.registerBeanDefinition(bdHolder, getReaderContext().getRegistry())__			}_			catch (BeanDefinitionStoreException ex) {_				getReaderContext().error("Failed to register bean definition with name '" +_						bdHolder.getBeanName() + "'", ele, ex)__			}_			_			getReaderContext().fireComponentRegistered(new BeanComponentDefinition(bdHolder))__		}_	};process,the,given,bean,element,parsing,the,bean,definition,and,registering,it,with,the,registry;protected,void,process,bean,definition,element,ele,bean,definition,parser,delegate,delegate,bean,definition,holder,bd,holder,delegate,parse,bean,definition,element,ele,if,bd,holder,null,bd,holder,delegate,decorate,bean,definition,if,required,ele,bd,holder,try,bean,definition,reader,utils,register,bean,definition,bd,holder,get,reader,context,get,registry,catch,bean,definition,store,exception,ex,get,reader,context,error,failed,to,register,bean,definition,with,name,bd,holder,get,bean,name,ele,ex,get,reader,context,fire,component,registered,new,bean,component,definition,bd,holder
DefaultBeanDefinitionDocumentReader -> protected void processBeanDefinition(Element ele, BeanDefinitionParserDelegate delegate);1362408075;Process the given bean element, parsing the bean definition_and registering it with the registry.;protected void processBeanDefinition(Element ele, BeanDefinitionParserDelegate delegate) {_		BeanDefinitionHolder bdHolder = delegate.parseBeanDefinitionElement(ele)__		if (bdHolder != null) {_			bdHolder = delegate.decorateBeanDefinitionIfRequired(ele, bdHolder)__			try {_				_				BeanDefinitionReaderUtils.registerBeanDefinition(bdHolder, getReaderContext().getRegistry())__			}_			catch (BeanDefinitionStoreException ex) {_				getReaderContext().error("Failed to register bean definition with name '" +_						bdHolder.getBeanName() + "'", ele, ex)__			}_			_			getReaderContext().fireComponentRegistered(new BeanComponentDefinition(bdHolder))__		}_	};process,the,given,bean,element,parsing,the,bean,definition,and,registering,it,with,the,registry;protected,void,process,bean,definition,element,ele,bean,definition,parser,delegate,delegate,bean,definition,holder,bd,holder,delegate,parse,bean,definition,element,ele,if,bd,holder,null,bd,holder,delegate,decorate,bean,definition,if,required,ele,bd,holder,try,bean,definition,reader,utils,register,bean,definition,bd,holder,get,reader,context,get,registry,catch,bean,definition,store,exception,ex,get,reader,context,error,failed,to,register,bean,definition,with,name,bd,holder,get,bean,name,ele,ex,get,reader,context,fire,component,registered,new,bean,component,definition,bd,holder
DefaultBeanDefinitionDocumentReader -> protected void processBeanDefinition(Element ele, BeanDefinitionParserDelegate delegate);1368482696;Process the given bean element, parsing the bean definition_and registering it with the registry.;protected void processBeanDefinition(Element ele, BeanDefinitionParserDelegate delegate) {_		BeanDefinitionHolder bdHolder = delegate.parseBeanDefinitionElement(ele)__		if (bdHolder != null) {_			bdHolder = delegate.decorateBeanDefinitionIfRequired(ele, bdHolder)__			try {_				_				BeanDefinitionReaderUtils.registerBeanDefinition(bdHolder, getReaderContext().getRegistry())__			}_			catch (BeanDefinitionStoreException ex) {_				getReaderContext().error("Failed to register bean definition with name '" +_						bdHolder.getBeanName() + "'", ele, ex)__			}_			_			getReaderContext().fireComponentRegistered(new BeanComponentDefinition(bdHolder))__		}_	};process,the,given,bean,element,parsing,the,bean,definition,and,registering,it,with,the,registry;protected,void,process,bean,definition,element,ele,bean,definition,parser,delegate,delegate,bean,definition,holder,bd,holder,delegate,parse,bean,definition,element,ele,if,bd,holder,null,bd,holder,delegate,decorate,bean,definition,if,required,ele,bd,holder,try,bean,definition,reader,utils,register,bean,definition,bd,holder,get,reader,context,get,registry,catch,bean,definition,store,exception,ex,get,reader,context,error,failed,to,register,bean,definition,with,name,bd,holder,get,bean,name,ele,ex,get,reader,context,fire,component,registered,new,bean,component,definition,bd,holder
DefaultBeanDefinitionDocumentReader -> protected void processBeanDefinition(Element ele, BeanDefinitionParserDelegate delegate);1382030648;Process the given bean element, parsing the bean definition_and registering it with the registry.;protected void processBeanDefinition(Element ele, BeanDefinitionParserDelegate delegate) {_		BeanDefinitionHolder bdHolder = delegate.parseBeanDefinitionElement(ele)__		if (bdHolder != null) {_			bdHolder = delegate.decorateBeanDefinitionIfRequired(ele, bdHolder)__			try {_				_				BeanDefinitionReaderUtils.registerBeanDefinition(bdHolder, getReaderContext().getRegistry())__			}_			catch (BeanDefinitionStoreException ex) {_				getReaderContext().error("Failed to register bean definition with name '" +_						bdHolder.getBeanName() + "'", ele, ex)__			}_			_			getReaderContext().fireComponentRegistered(new BeanComponentDefinition(bdHolder))__		}_	};process,the,given,bean,element,parsing,the,bean,definition,and,registering,it,with,the,registry;protected,void,process,bean,definition,element,ele,bean,definition,parser,delegate,delegate,bean,definition,holder,bd,holder,delegate,parse,bean,definition,element,ele,if,bd,holder,null,bd,holder,delegate,decorate,bean,definition,if,required,ele,bd,holder,try,bean,definition,reader,utils,register,bean,definition,bd,holder,get,reader,context,get,registry,catch,bean,definition,store,exception,ex,get,reader,context,error,failed,to,register,bean,definition,with,name,bd,holder,get,bean,name,ele,ex,get,reader,context,fire,component,registered,new,bean,component,definition,bd,holder
DefaultBeanDefinitionDocumentReader -> protected void processBeanDefinition(Element ele, BeanDefinitionParserDelegate delegate);1404933463;Process the given bean element, parsing the bean definition_and registering it with the registry.;protected void processBeanDefinition(Element ele, BeanDefinitionParserDelegate delegate) {_		BeanDefinitionHolder bdHolder = delegate.parseBeanDefinitionElement(ele)__		if (bdHolder != null) {_			bdHolder = delegate.decorateBeanDefinitionIfRequired(ele, bdHolder)__			try {_				_				BeanDefinitionReaderUtils.registerBeanDefinition(bdHolder, getReaderContext().getRegistry())__			}_			catch (BeanDefinitionStoreException ex) {_				getReaderContext().error("Failed to register bean definition with name '" +_						bdHolder.getBeanName() + "'", ele, ex)__			}_			_			getReaderContext().fireComponentRegistered(new BeanComponentDefinition(bdHolder))__		}_	};process,the,given,bean,element,parsing,the,bean,definition,and,registering,it,with,the,registry;protected,void,process,bean,definition,element,ele,bean,definition,parser,delegate,delegate,bean,definition,holder,bd,holder,delegate,parse,bean,definition,element,ele,if,bd,holder,null,bd,holder,delegate,decorate,bean,definition,if,required,ele,bd,holder,try,bean,definition,reader,utils,register,bean,definition,bd,holder,get,reader,context,get,registry,catch,bean,definition,store,exception,ex,get,reader,context,error,failed,to,register,bean,definition,with,name,bd,holder,get,bean,name,ele,ex,get,reader,context,fire,component,registered,new,bean,component,definition,bd,holder
DefaultBeanDefinitionDocumentReader -> protected void processBeanDefinition(Element ele, BeanDefinitionParserDelegate delegate);1411599760;Process the given bean element, parsing the bean definition_and registering it with the registry.;protected void processBeanDefinition(Element ele, BeanDefinitionParserDelegate delegate) {_		BeanDefinitionHolder bdHolder = delegate.parseBeanDefinitionElement(ele)__		if (bdHolder != null) {_			bdHolder = delegate.decorateBeanDefinitionIfRequired(ele, bdHolder)__			try {_				_				BeanDefinitionReaderUtils.registerBeanDefinition(bdHolder, getReaderContext().getRegistry())__			}_			catch (BeanDefinitionStoreException ex) {_				getReaderContext().error("Failed to register bean definition with name '" +_						bdHolder.getBeanName() + "'", ele, ex)__			}_			_			getReaderContext().fireComponentRegistered(new BeanComponentDefinition(bdHolder))__		}_	};process,the,given,bean,element,parsing,the,bean,definition,and,registering,it,with,the,registry;protected,void,process,bean,definition,element,ele,bean,definition,parser,delegate,delegate,bean,definition,holder,bd,holder,delegate,parse,bean,definition,element,ele,if,bd,holder,null,bd,holder,delegate,decorate,bean,definition,if,required,ele,bd,holder,try,bean,definition,reader,utils,register,bean,definition,bd,holder,get,reader,context,get,registry,catch,bean,definition,store,exception,ex,get,reader,context,error,failed,to,register,bean,definition,with,name,bd,holder,get,bean,name,ele,ex,get,reader,context,fire,component,registered,new,bean,component,definition,bd,holder
DefaultBeanDefinitionDocumentReader -> protected void processBeanDefinition(Element ele, BeanDefinitionParserDelegate delegate);1419966315;Process the given bean element, parsing the bean definition_and registering it with the registry.;protected void processBeanDefinition(Element ele, BeanDefinitionParserDelegate delegate) {_		BeanDefinitionHolder bdHolder = delegate.parseBeanDefinitionElement(ele)__		if (bdHolder != null) {_			bdHolder = delegate.decorateBeanDefinitionIfRequired(ele, bdHolder)__			try {_				_				BeanDefinitionReaderUtils.registerBeanDefinition(bdHolder, getReaderContext().getRegistry())__			}_			catch (BeanDefinitionStoreException ex) {_				getReaderContext().error("Failed to register bean definition with name '" +_						bdHolder.getBeanName() + "'", ele, ex)__			}_			_			getReaderContext().fireComponentRegistered(new BeanComponentDefinition(bdHolder))__		}_	};process,the,given,bean,element,parsing,the,bean,definition,and,registering,it,with,the,registry;protected,void,process,bean,definition,element,ele,bean,definition,parser,delegate,delegate,bean,definition,holder,bd,holder,delegate,parse,bean,definition,element,ele,if,bd,holder,null,bd,holder,delegate,decorate,bean,definition,if,required,ele,bd,holder,try,bean,definition,reader,utils,register,bean,definition,bd,holder,get,reader,context,get,registry,catch,bean,definition,store,exception,ex,get,reader,context,error,failed,to,register,bean,definition,with,name,bd,holder,get,bean,name,ele,ex,get,reader,context,fire,component,registered,new,bean,component,definition,bd,holder
DefaultBeanDefinitionDocumentReader -> protected void processBeanDefinition(Element ele, BeanDefinitionParserDelegate delegate);1424720154;Process the given bean element, parsing the bean definition_and registering it with the registry.;protected void processBeanDefinition(Element ele, BeanDefinitionParserDelegate delegate) {_		BeanDefinitionHolder bdHolder = delegate.parseBeanDefinitionElement(ele)__		if (bdHolder != null) {_			bdHolder = delegate.decorateBeanDefinitionIfRequired(ele, bdHolder)__			try {_				_				BeanDefinitionReaderUtils.registerBeanDefinition(bdHolder, getReaderContext().getRegistry())__			}_			catch (BeanDefinitionStoreException ex) {_				getReaderContext().error("Failed to register bean definition with name '" +_						bdHolder.getBeanName() + "'", ele, ex)__			}_			_			getReaderContext().fireComponentRegistered(new BeanComponentDefinition(bdHolder))__		}_	};process,the,given,bean,element,parsing,the,bean,definition,and,registering,it,with,the,registry;protected,void,process,bean,definition,element,ele,bean,definition,parser,delegate,delegate,bean,definition,holder,bd,holder,delegate,parse,bean,definition,element,ele,if,bd,holder,null,bd,holder,delegate,decorate,bean,definition,if,required,ele,bd,holder,try,bean,definition,reader,utils,register,bean,definition,bd,holder,get,reader,context,get,registry,catch,bean,definition,store,exception,ex,get,reader,context,error,failed,to,register,bean,definition,with,name,bd,holder,get,bean,name,ele,ex,get,reader,context,fire,component,registered,new,bean,component,definition,bd,holder
DefaultBeanDefinitionDocumentReader -> protected void processBeanDefinition(Element ele, BeanDefinitionParserDelegate delegate);1453749972;Process the given bean element, parsing the bean definition_and registering it with the registry.;protected void processBeanDefinition(Element ele, BeanDefinitionParserDelegate delegate) {_		BeanDefinitionHolder bdHolder = delegate.parseBeanDefinitionElement(ele)__		if (bdHolder != null) {_			bdHolder = delegate.decorateBeanDefinitionIfRequired(ele, bdHolder)__			try {_				_				BeanDefinitionReaderUtils.registerBeanDefinition(bdHolder, getReaderContext().getRegistry())__			}_			catch (BeanDefinitionStoreException ex) {_				getReaderContext().error("Failed to register bean definition with name '" +_						bdHolder.getBeanName() + "'", ele, ex)__			}_			_			getReaderContext().fireComponentRegistered(new BeanComponentDefinition(bdHolder))__		}_	};process,the,given,bean,element,parsing,the,bean,definition,and,registering,it,with,the,registry;protected,void,process,bean,definition,element,ele,bean,definition,parser,delegate,delegate,bean,definition,holder,bd,holder,delegate,parse,bean,definition,element,ele,if,bd,holder,null,bd,holder,delegate,decorate,bean,definition,if,required,ele,bd,holder,try,bean,definition,reader,utils,register,bean,definition,bd,holder,get,reader,context,get,registry,catch,bean,definition,store,exception,ex,get,reader,context,error,failed,to,register,bean,definition,with,name,bd,holder,get,bean,name,ele,ex,get,reader,context,fire,component,registered,new,bean,component,definition,bd,holder
DefaultBeanDefinitionDocumentReader -> protected void processBeanDefinition(Element ele, BeanDefinitionParserDelegate delegate);1467730834;Process the given bean element, parsing the bean definition_and registering it with the registry.;protected void processBeanDefinition(Element ele, BeanDefinitionParserDelegate delegate) {_		BeanDefinitionHolder bdHolder = delegate.parseBeanDefinitionElement(ele)__		if (bdHolder != null) {_			bdHolder = delegate.decorateBeanDefinitionIfRequired(ele, bdHolder)__			try {_				_				BeanDefinitionReaderUtils.registerBeanDefinition(bdHolder, getReaderContext().getRegistry())__			}_			catch (BeanDefinitionStoreException ex) {_				getReaderContext().error("Failed to register bean definition with name '" +_						bdHolder.getBeanName() + "'", ele, ex)__			}_			_			getReaderContext().fireComponentRegistered(new BeanComponentDefinition(bdHolder))__		}_	};process,the,given,bean,element,parsing,the,bean,definition,and,registering,it,with,the,registry;protected,void,process,bean,definition,element,ele,bean,definition,parser,delegate,delegate,bean,definition,holder,bd,holder,delegate,parse,bean,definition,element,ele,if,bd,holder,null,bd,holder,delegate,decorate,bean,definition,if,required,ele,bd,holder,try,bean,definition,reader,utils,register,bean,definition,bd,holder,get,reader,context,get,registry,catch,bean,definition,store,exception,ex,get,reader,context,error,failed,to,register,bean,definition,with,name,bd,holder,get,bean,name,ele,ex,get,reader,context,fire,component,registered,new,bean,component,definition,bd,holder
DefaultBeanDefinitionDocumentReader -> protected void processBeanDefinition(Element ele, BeanDefinitionParserDelegate delegate);1496837955;Process the given bean element, parsing the bean definition_and registering it with the registry.;protected void processBeanDefinition(Element ele, BeanDefinitionParserDelegate delegate) {_		BeanDefinitionHolder bdHolder = delegate.parseBeanDefinitionElement(ele)__		if (bdHolder != null) {_			bdHolder = delegate.decorateBeanDefinitionIfRequired(ele, bdHolder)__			try {_				_				BeanDefinitionReaderUtils.registerBeanDefinition(bdHolder, getReaderContext().getRegistry())__			}_			catch (BeanDefinitionStoreException ex) {_				getReaderContext().error("Failed to register bean definition with name '" +_						bdHolder.getBeanName() + "'", ele, ex)__			}_			_			getReaderContext().fireComponentRegistered(new BeanComponentDefinition(bdHolder))__		}_	};process,the,given,bean,element,parsing,the,bean,definition,and,registering,it,with,the,registry;protected,void,process,bean,definition,element,ele,bean,definition,parser,delegate,delegate,bean,definition,holder,bd,holder,delegate,parse,bean,definition,element,ele,if,bd,holder,null,bd,holder,delegate,decorate,bean,definition,if,required,ele,bd,holder,try,bean,definition,reader,utils,register,bean,definition,bd,holder,get,reader,context,get,registry,catch,bean,definition,store,exception,ex,get,reader,context,error,failed,to,register,bean,definition,with,name,bd,holder,get,bean,name,ele,ex,get,reader,context,fire,component,registered,new,bean,component,definition,bd,holder
DefaultBeanDefinitionDocumentReader -> protected void processBeanDefinition(Element ele, BeanDefinitionParserDelegate delegate);1500495740;Process the given bean element, parsing the bean definition_and registering it with the registry.;protected void processBeanDefinition(Element ele, BeanDefinitionParserDelegate delegate) {_		BeanDefinitionHolder bdHolder = delegate.parseBeanDefinitionElement(ele)__		if (bdHolder != null) {_			bdHolder = delegate.decorateBeanDefinitionIfRequired(ele, bdHolder)__			try {_				_				BeanDefinitionReaderUtils.registerBeanDefinition(bdHolder, getReaderContext().getRegistry())__			}_			catch (BeanDefinitionStoreException ex) {_				getReaderContext().error("Failed to register bean definition with name '" +_						bdHolder.getBeanName() + "'", ele, ex)__			}_			_			getReaderContext().fireComponentRegistered(new BeanComponentDefinition(bdHolder))__		}_	};process,the,given,bean,element,parsing,the,bean,definition,and,registering,it,with,the,registry;protected,void,process,bean,definition,element,ele,bean,definition,parser,delegate,delegate,bean,definition,holder,bd,holder,delegate,parse,bean,definition,element,ele,if,bd,holder,null,bd,holder,delegate,decorate,bean,definition,if,required,ele,bd,holder,try,bean,definition,reader,utils,register,bean,definition,bd,holder,get,reader,context,get,registry,catch,bean,definition,store,exception,ex,get,reader,context,error,failed,to,register,bean,definition,with,name,bd,holder,get,bean,name,ele,ex,get,reader,context,fire,component,registered,new,bean,component,definition,bd,holder
DefaultBeanDefinitionDocumentReader -> protected void processBeanDefinition(Element ele, BeanDefinitionParserDelegate delegate);1519295386;Process the given bean element, parsing the bean definition_and registering it with the registry.;protected void processBeanDefinition(Element ele, BeanDefinitionParserDelegate delegate) {_		BeanDefinitionHolder bdHolder = delegate.parseBeanDefinitionElement(ele)__		if (bdHolder != null) {_			bdHolder = delegate.decorateBeanDefinitionIfRequired(ele, bdHolder)__			try {_				_				BeanDefinitionReaderUtils.registerBeanDefinition(bdHolder, getReaderContext().getRegistry())__			}_			catch (BeanDefinitionStoreException ex) {_				getReaderContext().error("Failed to register bean definition with name '" +_						bdHolder.getBeanName() + "'", ele, ex)__			}_			_			getReaderContext().fireComponentRegistered(new BeanComponentDefinition(bdHolder))__		}_	};process,the,given,bean,element,parsing,the,bean,definition,and,registering,it,with,the,registry;protected,void,process,bean,definition,element,ele,bean,definition,parser,delegate,delegate,bean,definition,holder,bd,holder,delegate,parse,bean,definition,element,ele,if,bd,holder,null,bd,holder,delegate,decorate,bean,definition,if,required,ele,bd,holder,try,bean,definition,reader,utils,register,bean,definition,bd,holder,get,reader,context,get,registry,catch,bean,definition,store,exception,ex,get,reader,context,error,failed,to,register,bean,definition,with,name,bd,holder,get,bean,name,ele,ex,get,reader,context,fire,component,registered,new,bean,component,definition,bd,holder
DefaultBeanDefinitionDocumentReader -> protected void processBeanDefinition(Element ele, BeanDefinitionParserDelegate delegate);1529093363;Process the given bean element, parsing the bean definition_and registering it with the registry.;protected void processBeanDefinition(Element ele, BeanDefinitionParserDelegate delegate) {_		BeanDefinitionHolder bdHolder = delegate.parseBeanDefinitionElement(ele)__		if (bdHolder != null) {_			bdHolder = delegate.decorateBeanDefinitionIfRequired(ele, bdHolder)__			try {_				_				BeanDefinitionReaderUtils.registerBeanDefinition(bdHolder, getReaderContext().getRegistry())__			}_			catch (BeanDefinitionStoreException ex) {_				getReaderContext().error("Failed to register bean definition with name '" +_						bdHolder.getBeanName() + "'", ele, ex)__			}_			_			getReaderContext().fireComponentRegistered(new BeanComponentDefinition(bdHolder))__		}_	};process,the,given,bean,element,parsing,the,bean,definition,and,registering,it,with,the,registry;protected,void,process,bean,definition,element,ele,bean,definition,parser,delegate,delegate,bean,definition,holder,bd,holder,delegate,parse,bean,definition,element,ele,if,bd,holder,null,bd,holder,delegate,decorate,bean,definition,if,required,ele,bd,holder,try,bean,definition,reader,utils,register,bean,definition,bd,holder,get,reader,context,get,registry,catch,bean,definition,store,exception,ex,get,reader,context,error,failed,to,register,bean,definition,with,name,bd,holder,get,bean,name,ele,ex,get,reader,context,fire,component,registered,new,bean,component,definition,bd,holder
DefaultBeanDefinitionDocumentReader -> protected void processBeanDefinition(Element ele, BeanDefinitionParserDelegate delegate);1529405413;Process the given bean element, parsing the bean definition_and registering it with the registry.;protected void processBeanDefinition(Element ele, BeanDefinitionParserDelegate delegate) {_		BeanDefinitionHolder bdHolder = delegate.parseBeanDefinitionElement(ele)__		if (bdHolder != null) {_			bdHolder = delegate.decorateBeanDefinitionIfRequired(ele, bdHolder)__			try {_				_				BeanDefinitionReaderUtils.registerBeanDefinition(bdHolder, getReaderContext().getRegistry())__			}_			catch (BeanDefinitionStoreException ex) {_				getReaderContext().error("Failed to register bean definition with name '" +_						bdHolder.getBeanName() + "'", ele, ex)__			}_			_			getReaderContext().fireComponentRegistered(new BeanComponentDefinition(bdHolder))__		}_	};process,the,given,bean,element,parsing,the,bean,definition,and,registering,it,with,the,registry;protected,void,process,bean,definition,element,ele,bean,definition,parser,delegate,delegate,bean,definition,holder,bd,holder,delegate,parse,bean,definition,element,ele,if,bd,holder,null,bd,holder,delegate,decorate,bean,definition,if,required,ele,bd,holder,try,bean,definition,reader,utils,register,bean,definition,bd,holder,get,reader,context,get,registry,catch,bean,definition,store,exception,ex,get,reader,context,error,failed,to,register,bean,definition,with,name,bd,holder,get,bean,name,ele,ex,get,reader,context,fire,component,registered,new,bean,component,definition,bd,holder
DefaultBeanDefinitionDocumentReader -> protected void processBeanDefinition(Element ele, BeanDefinitionParserDelegate delegate);1532091916;Process the given bean element, parsing the bean definition_and registering it with the registry.;protected void processBeanDefinition(Element ele, BeanDefinitionParserDelegate delegate) {_		BeanDefinitionHolder bdHolder = delegate.parseBeanDefinitionElement(ele)__		if (bdHolder != null) {_			bdHolder = delegate.decorateBeanDefinitionIfRequired(ele, bdHolder)__			try {_				_				BeanDefinitionReaderUtils.registerBeanDefinition(bdHolder, getReaderContext().getRegistry())__			}_			catch (BeanDefinitionStoreException ex) {_				getReaderContext().error("Failed to register bean definition with name '" +_						bdHolder.getBeanName() + "'", ele, ex)__			}_			_			getReaderContext().fireComponentRegistered(new BeanComponentDefinition(bdHolder))__		}_	};process,the,given,bean,element,parsing,the,bean,definition,and,registering,it,with,the,registry;protected,void,process,bean,definition,element,ele,bean,definition,parser,delegate,delegate,bean,definition,holder,bd,holder,delegate,parse,bean,definition,element,ele,if,bd,holder,null,bd,holder,delegate,decorate,bean,definition,if,required,ele,bd,holder,try,bean,definition,reader,utils,register,bean,definition,bd,holder,get,reader,context,get,registry,catch,bean,definition,store,exception,ex,get,reader,context,error,failed,to,register,bean,definition,with,name,bd,holder,get,bean,name,ele,ex,get,reader,context,fire,component,registered,new,bean,component,definition,bd,holder
DefaultBeanDefinitionDocumentReader -> protected void processBeanDefinition(Element ele, BeanDefinitionParserDelegate delegate);1532706365;Process the given bean element, parsing the bean definition_and registering it with the registry.;protected void processBeanDefinition(Element ele, BeanDefinitionParserDelegate delegate) {_		BeanDefinitionHolder bdHolder = delegate.parseBeanDefinitionElement(ele)__		if (bdHolder != null) {_			bdHolder = delegate.decorateBeanDefinitionIfRequired(ele, bdHolder)__			try {_				_				BeanDefinitionReaderUtils.registerBeanDefinition(bdHolder, getReaderContext().getRegistry())__			}_			catch (BeanDefinitionStoreException ex) {_				getReaderContext().error("Failed to register bean definition with name '" +_						bdHolder.getBeanName() + "'", ele, ex)__			}_			_			getReaderContext().fireComponentRegistered(new BeanComponentDefinition(bdHolder))__		}_	};process,the,given,bean,element,parsing,the,bean,definition,and,registering,it,with,the,registry;protected,void,process,bean,definition,element,ele,bean,definition,parser,delegate,delegate,bean,definition,holder,bd,holder,delegate,parse,bean,definition,element,ele,if,bd,holder,null,bd,holder,delegate,decorate,bean,definition,if,required,ele,bd,holder,try,bean,definition,reader,utils,register,bean,definition,bd,holder,get,reader,context,get,registry,catch,bean,definition,store,exception,ex,get,reader,context,error,failed,to,register,bean,definition,with,name,bd,holder,get,bean,name,ele,ex,get,reader,context,fire,component,registered,new,bean,component,definition,bd,holder
DefaultBeanDefinitionDocumentReader -> public void registerBeanDefinitions(Document doc, XmlReaderContext readerContext);1328020251;{@inheritDoc}_<p>This implementation parses bean definitions according to the "spring-beans" XSD_(or DTD, historically)._<p>Opens a DOM Document_ then initializes the default settings_specified at the {@code <beans/>} level_ then parses the contained bean definitions.;public void registerBeanDefinitions(Document doc, XmlReaderContext readerContext) {_		this.readerContext = readerContext___		logger.debug("Loading bean definitions")__		Element root = doc.getDocumentElement()___		doRegisterBeanDefinitions(root)__	};inherit,doc,p,this,implementation,parses,bean,definitions,according,to,the,spring,beans,xsd,or,dtd,historically,p,opens,a,dom,document,then,initializes,the,default,settings,specified,at,the,code,beans,level,then,parses,the,contained,bean,definitions;public,void,register,bean,definitions,document,doc,xml,reader,context,reader,context,this,reader,context,reader,context,logger,debug,loading,bean,definitions,element,root,doc,get,document,element,do,register,bean,definitions,root
DefaultBeanDefinitionDocumentReader -> public void registerBeanDefinitions(Document doc, XmlReaderContext readerContext);1357119239;{@inheritDoc}_<p>This implementation parses bean definitions according to the "spring-beans" XSD_(or DTD, historically)._<p>Opens a DOM Document_ then initializes the default settings_specified at the {@code <beans/>} level_ then parses the contained bean definitions.;public void registerBeanDefinitions(Document doc, XmlReaderContext readerContext) {_		this.readerContext = readerContext___		logger.debug("Loading bean definitions")__		Element root = doc.getDocumentElement()___		doRegisterBeanDefinitions(root)__	};inherit,doc,p,this,implementation,parses,bean,definitions,according,to,the,spring,beans,xsd,or,dtd,historically,p,opens,a,dom,document,then,initializes,the,default,settings,specified,at,the,code,beans,level,then,parses,the,contained,bean,definitions;public,void,register,bean,definitions,document,doc,xml,reader,context,reader,context,this,reader,context,reader,context,logger,debug,loading,bean,definitions,element,root,doc,get,document,element,do,register,bean,definitions,root
DefaultBeanDefinitionDocumentReader -> public void registerBeanDefinitions(Document doc, XmlReaderContext readerContext);1362408075;{@inheritDoc}_<p>This implementation parses bean definitions according to the "spring-beans" XSD_(or DTD, historically)._<p>Opens a DOM Document_ then initializes the default settings_specified at the {@code <beans/>} level_ then parses the contained bean definitions.;public void registerBeanDefinitions(Document doc, XmlReaderContext readerContext) {_		this.readerContext = readerContext__		logger.debug("Loading bean definitions")__		Element root = doc.getDocumentElement()__		doRegisterBeanDefinitions(root)__	};inherit,doc,p,this,implementation,parses,bean,definitions,according,to,the,spring,beans,xsd,or,dtd,historically,p,opens,a,dom,document,then,initializes,the,default,settings,specified,at,the,code,beans,level,then,parses,the,contained,bean,definitions;public,void,register,bean,definitions,document,doc,xml,reader,context,reader,context,this,reader,context,reader,context,logger,debug,loading,bean,definitions,element,root,doc,get,document,element,do,register,bean,definitions,root
DefaultBeanDefinitionDocumentReader -> protected void postProcessXml(Element root);1328020251;Allow the XML to be extensible by processing any custom element types last,_after we finished processing the bean definitions. This method is a natural_extension point for any other custom post-processing of the XML._<p>The default implementation is empty. Subclasses can override this method to_convert custom elements into standard Spring bean definitions, for example._Implementors have access to the parser's bean definition reader and the_underlying XML resource, through the corresponding accessors._@see #getReaderContext();protected void postProcessXml(Element root) {_	};allow,the,xml,to,be,extensible,by,processing,any,custom,element,types,last,after,we,finished,processing,the,bean,definitions,this,method,is,a,natural,extension,point,for,any,other,custom,post,processing,of,the,xml,p,the,default,implementation,is,empty,subclasses,can,override,this,method,to,convert,custom,elements,into,standard,spring,bean,definitions,for,example,implementors,have,access,to,the,parser,s,bean,definition,reader,and,the,underlying,xml,resource,through,the,corresponding,accessors,see,get,reader,context;protected,void,post,process,xml,element,root
DefaultBeanDefinitionDocumentReader -> protected void postProcessXml(Element root);1356735495;Allow the XML to be extensible by processing any custom element types last,_after we finished processing the bean definitions. This method is a natural_extension point for any other custom post-processing of the XML._<p>The default implementation is empty. Subclasses can override this method to_convert custom elements into standard Spring bean definitions, for example._Implementors have access to the parser's bean definition reader and the_underlying XML resource, through the corresponding accessors._@see #getReaderContext();protected void postProcessXml(Element root) {_	};allow,the,xml,to,be,extensible,by,processing,any,custom,element,types,last,after,we,finished,processing,the,bean,definitions,this,method,is,a,natural,extension,point,for,any,other,custom,post,processing,of,the,xml,p,the,default,implementation,is,empty,subclasses,can,override,this,method,to,convert,custom,elements,into,standard,spring,bean,definitions,for,example,implementors,have,access,to,the,parser,s,bean,definition,reader,and,the,underlying,xml,resource,through,the,corresponding,accessors,see,get,reader,context;protected,void,post,process,xml,element,root
DefaultBeanDefinitionDocumentReader -> protected void postProcessXml(Element root);1357119239;Allow the XML to be extensible by processing any custom element types last,_after we finished processing the bean definitions. This method is a natural_extension point for any other custom post-processing of the XML._<p>The default implementation is empty. Subclasses can override this method to_convert custom elements into standard Spring bean definitions, for example._Implementors have access to the parser's bean definition reader and the_underlying XML resource, through the corresponding accessors._@see #getReaderContext();protected void postProcessXml(Element root) {_	};allow,the,xml,to,be,extensible,by,processing,any,custom,element,types,last,after,we,finished,processing,the,bean,definitions,this,method,is,a,natural,extension,point,for,any,other,custom,post,processing,of,the,xml,p,the,default,implementation,is,empty,subclasses,can,override,this,method,to,convert,custom,elements,into,standard,spring,bean,definitions,for,example,implementors,have,access,to,the,parser,s,bean,definition,reader,and,the,underlying,xml,resource,through,the,corresponding,accessors,see,get,reader,context;protected,void,post,process,xml,element,root
DefaultBeanDefinitionDocumentReader -> protected void postProcessXml(Element root);1362408075;Allow the XML to be extensible by processing any custom element types last,_after we finished processing the bean definitions. This method is a natural_extension point for any other custom post-processing of the XML._<p>The default implementation is empty. Subclasses can override this method to_convert custom elements into standard Spring bean definitions, for example._Implementors have access to the parser's bean definition reader and the_underlying XML resource, through the corresponding accessors._@see #getReaderContext();protected void postProcessXml(Element root) {_	};allow,the,xml,to,be,extensible,by,processing,any,custom,element,types,last,after,we,finished,processing,the,bean,definitions,this,method,is,a,natural,extension,point,for,any,other,custom,post,processing,of,the,xml,p,the,default,implementation,is,empty,subclasses,can,override,this,method,to,convert,custom,elements,into,standard,spring,bean,definitions,for,example,implementors,have,access,to,the,parser,s,bean,definition,reader,and,the,underlying,xml,resource,through,the,corresponding,accessors,see,get,reader,context;protected,void,post,process,xml,element,root
DefaultBeanDefinitionDocumentReader -> protected void postProcessXml(Element root);1368482696;Allow the XML to be extensible by processing any custom element types last,_after we finished processing the bean definitions. This method is a natural_extension point for any other custom post-processing of the XML._<p>The default implementation is empty. Subclasses can override this method to_convert custom elements into standard Spring bean definitions, for example._Implementors have access to the parser's bean definition reader and the_underlying XML resource, through the corresponding accessors._@see #getReaderContext();protected void postProcessXml(Element root) {_	};allow,the,xml,to,be,extensible,by,processing,any,custom,element,types,last,after,we,finished,processing,the,bean,definitions,this,method,is,a,natural,extension,point,for,any,other,custom,post,processing,of,the,xml,p,the,default,implementation,is,empty,subclasses,can,override,this,method,to,convert,custom,elements,into,standard,spring,bean,definitions,for,example,implementors,have,access,to,the,parser,s,bean,definition,reader,and,the,underlying,xml,resource,through,the,corresponding,accessors,see,get,reader,context;protected,void,post,process,xml,element,root
DefaultBeanDefinitionDocumentReader -> protected void postProcessXml(Element root);1382030648;Allow the XML to be extensible by processing any custom element types last,_after we finished processing the bean definitions. This method is a natural_extension point for any other custom post-processing of the XML._<p>The default implementation is empty. Subclasses can override this method to_convert custom elements into standard Spring bean definitions, for example._Implementors have access to the parser's bean definition reader and the_underlying XML resource, through the corresponding accessors._@see #getReaderContext();protected void postProcessXml(Element root) {_	};allow,the,xml,to,be,extensible,by,processing,any,custom,element,types,last,after,we,finished,processing,the,bean,definitions,this,method,is,a,natural,extension,point,for,any,other,custom,post,processing,of,the,xml,p,the,default,implementation,is,empty,subclasses,can,override,this,method,to,convert,custom,elements,into,standard,spring,bean,definitions,for,example,implementors,have,access,to,the,parser,s,bean,definition,reader,and,the,underlying,xml,resource,through,the,corresponding,accessors,see,get,reader,context;protected,void,post,process,xml,element,root
DefaultBeanDefinitionDocumentReader -> protected void postProcessXml(Element root);1404933463;Allow the XML to be extensible by processing any custom element types last,_after we finished processing the bean definitions. This method is a natural_extension point for any other custom post-processing of the XML._<p>The default implementation is empty. Subclasses can override this method to_convert custom elements into standard Spring bean definitions, for example._Implementors have access to the parser's bean definition reader and the_underlying XML resource, through the corresponding accessors._@see #getReaderContext();protected void postProcessXml(Element root) {_	};allow,the,xml,to,be,extensible,by,processing,any,custom,element,types,last,after,we,finished,processing,the,bean,definitions,this,method,is,a,natural,extension,point,for,any,other,custom,post,processing,of,the,xml,p,the,default,implementation,is,empty,subclasses,can,override,this,method,to,convert,custom,elements,into,standard,spring,bean,definitions,for,example,implementors,have,access,to,the,parser,s,bean,definition,reader,and,the,underlying,xml,resource,through,the,corresponding,accessors,see,get,reader,context;protected,void,post,process,xml,element,root
DefaultBeanDefinitionDocumentReader -> protected void postProcessXml(Element root);1411599760;Allow the XML to be extensible by processing any custom element types last,_after we finished processing the bean definitions. This method is a natural_extension point for any other custom post-processing of the XML._<p>The default implementation is empty. Subclasses can override this method to_convert custom elements into standard Spring bean definitions, for example._Implementors have access to the parser's bean definition reader and the_underlying XML resource, through the corresponding accessors._@see #getReaderContext();protected void postProcessXml(Element root) {_	};allow,the,xml,to,be,extensible,by,processing,any,custom,element,types,last,after,we,finished,processing,the,bean,definitions,this,method,is,a,natural,extension,point,for,any,other,custom,post,processing,of,the,xml,p,the,default,implementation,is,empty,subclasses,can,override,this,method,to,convert,custom,elements,into,standard,spring,bean,definitions,for,example,implementors,have,access,to,the,parser,s,bean,definition,reader,and,the,underlying,xml,resource,through,the,corresponding,accessors,see,get,reader,context;protected,void,post,process,xml,element,root
DefaultBeanDefinitionDocumentReader -> protected void postProcessXml(Element root);1419966315;Allow the XML to be extensible by processing any custom element types last,_after we finished processing the bean definitions. This method is a natural_extension point for any other custom post-processing of the XML._<p>The default implementation is empty. Subclasses can override this method to_convert custom elements into standard Spring bean definitions, for example._Implementors have access to the parser's bean definition reader and the_underlying XML resource, through the corresponding accessors._@see #getReaderContext();protected void postProcessXml(Element root) {_	};allow,the,xml,to,be,extensible,by,processing,any,custom,element,types,last,after,we,finished,processing,the,bean,definitions,this,method,is,a,natural,extension,point,for,any,other,custom,post,processing,of,the,xml,p,the,default,implementation,is,empty,subclasses,can,override,this,method,to,convert,custom,elements,into,standard,spring,bean,definitions,for,example,implementors,have,access,to,the,parser,s,bean,definition,reader,and,the,underlying,xml,resource,through,the,corresponding,accessors,see,get,reader,context;protected,void,post,process,xml,element,root
DefaultBeanDefinitionDocumentReader -> protected void postProcessXml(Element root);1424720154;Allow the XML to be extensible by processing any custom element types last,_after we finished processing the bean definitions. This method is a natural_extension point for any other custom post-processing of the XML._<p>The default implementation is empty. Subclasses can override this method to_convert custom elements into standard Spring bean definitions, for example._Implementors have access to the parser's bean definition reader and the_underlying XML resource, through the corresponding accessors._@see #getReaderContext();protected void postProcessXml(Element root) {_	};allow,the,xml,to,be,extensible,by,processing,any,custom,element,types,last,after,we,finished,processing,the,bean,definitions,this,method,is,a,natural,extension,point,for,any,other,custom,post,processing,of,the,xml,p,the,default,implementation,is,empty,subclasses,can,override,this,method,to,convert,custom,elements,into,standard,spring,bean,definitions,for,example,implementors,have,access,to,the,parser,s,bean,definition,reader,and,the,underlying,xml,resource,through,the,corresponding,accessors,see,get,reader,context;protected,void,post,process,xml,element,root
DefaultBeanDefinitionDocumentReader -> protected void postProcessXml(Element root);1453749972;Allow the XML to be extensible by processing any custom element types last,_after we finished processing the bean definitions. This method is a natural_extension point for any other custom post-processing of the XML._<p>The default implementation is empty. Subclasses can override this method to_convert custom elements into standard Spring bean definitions, for example._Implementors have access to the parser's bean definition reader and the_underlying XML resource, through the corresponding accessors._@see #getReaderContext();protected void postProcessXml(Element root) {_	};allow,the,xml,to,be,extensible,by,processing,any,custom,element,types,last,after,we,finished,processing,the,bean,definitions,this,method,is,a,natural,extension,point,for,any,other,custom,post,processing,of,the,xml,p,the,default,implementation,is,empty,subclasses,can,override,this,method,to,convert,custom,elements,into,standard,spring,bean,definitions,for,example,implementors,have,access,to,the,parser,s,bean,definition,reader,and,the,underlying,xml,resource,through,the,corresponding,accessors,see,get,reader,context;protected,void,post,process,xml,element,root
DefaultBeanDefinitionDocumentReader -> protected void postProcessXml(Element root);1467730834;Allow the XML to be extensible by processing any custom element types last,_after we finished processing the bean definitions. This method is a natural_extension point for any other custom post-processing of the XML._<p>The default implementation is empty. Subclasses can override this method to_convert custom elements into standard Spring bean definitions, for example._Implementors have access to the parser's bean definition reader and the_underlying XML resource, through the corresponding accessors._@see #getReaderContext();protected void postProcessXml(Element root) {_	};allow,the,xml,to,be,extensible,by,processing,any,custom,element,types,last,after,we,finished,processing,the,bean,definitions,this,method,is,a,natural,extension,point,for,any,other,custom,post,processing,of,the,xml,p,the,default,implementation,is,empty,subclasses,can,override,this,method,to,convert,custom,elements,into,standard,spring,bean,definitions,for,example,implementors,have,access,to,the,parser,s,bean,definition,reader,and,the,underlying,xml,resource,through,the,corresponding,accessors,see,get,reader,context;protected,void,post,process,xml,element,root
DefaultBeanDefinitionDocumentReader -> protected void postProcessXml(Element root);1496837955;Allow the XML to be extensible by processing any custom element types last,_after we finished processing the bean definitions. This method is a natural_extension point for any other custom post-processing of the XML._<p>The default implementation is empty. Subclasses can override this method to_convert custom elements into standard Spring bean definitions, for example._Implementors have access to the parser's bean definition reader and the_underlying XML resource, through the corresponding accessors._@see #getReaderContext();protected void postProcessXml(Element root) {_	};allow,the,xml,to,be,extensible,by,processing,any,custom,element,types,last,after,we,finished,processing,the,bean,definitions,this,method,is,a,natural,extension,point,for,any,other,custom,post,processing,of,the,xml,p,the,default,implementation,is,empty,subclasses,can,override,this,method,to,convert,custom,elements,into,standard,spring,bean,definitions,for,example,implementors,have,access,to,the,parser,s,bean,definition,reader,and,the,underlying,xml,resource,through,the,corresponding,accessors,see,get,reader,context;protected,void,post,process,xml,element,root
DefaultBeanDefinitionDocumentReader -> protected void postProcessXml(Element root);1500495740;Allow the XML to be extensible by processing any custom element types last,_after we finished processing the bean definitions. This method is a natural_extension point for any other custom post-processing of the XML._<p>The default implementation is empty. Subclasses can override this method to_convert custom elements into standard Spring bean definitions, for example._Implementors have access to the parser's bean definition reader and the_underlying XML resource, through the corresponding accessors._@see #getReaderContext();protected void postProcessXml(Element root) {_	};allow,the,xml,to,be,extensible,by,processing,any,custom,element,types,last,after,we,finished,processing,the,bean,definitions,this,method,is,a,natural,extension,point,for,any,other,custom,post,processing,of,the,xml,p,the,default,implementation,is,empty,subclasses,can,override,this,method,to,convert,custom,elements,into,standard,spring,bean,definitions,for,example,implementors,have,access,to,the,parser,s,bean,definition,reader,and,the,underlying,xml,resource,through,the,corresponding,accessors,see,get,reader,context;protected,void,post,process,xml,element,root
DefaultBeanDefinitionDocumentReader -> protected void postProcessXml(Element root);1519295386;Allow the XML to be extensible by processing any custom element types last,_after we finished processing the bean definitions. This method is a natural_extension point for any other custom post-processing of the XML._<p>The default implementation is empty. Subclasses can override this method to_convert custom elements into standard Spring bean definitions, for example._Implementors have access to the parser's bean definition reader and the_underlying XML resource, through the corresponding accessors._@see #getReaderContext();protected void postProcessXml(Element root) {_	};allow,the,xml,to,be,extensible,by,processing,any,custom,element,types,last,after,we,finished,processing,the,bean,definitions,this,method,is,a,natural,extension,point,for,any,other,custom,post,processing,of,the,xml,p,the,default,implementation,is,empty,subclasses,can,override,this,method,to,convert,custom,elements,into,standard,spring,bean,definitions,for,example,implementors,have,access,to,the,parser,s,bean,definition,reader,and,the,underlying,xml,resource,through,the,corresponding,accessors,see,get,reader,context;protected,void,post,process,xml,element,root
DefaultBeanDefinitionDocumentReader -> protected void postProcessXml(Element root);1529093363;Allow the XML to be extensible by processing any custom element types last,_after we finished processing the bean definitions. This method is a natural_extension point for any other custom post-processing of the XML._<p>The default implementation is empty. Subclasses can override this method to_convert custom elements into standard Spring bean definitions, for example._Implementors have access to the parser's bean definition reader and the_underlying XML resource, through the corresponding accessors._@see #getReaderContext();protected void postProcessXml(Element root) {_	};allow,the,xml,to,be,extensible,by,processing,any,custom,element,types,last,after,we,finished,processing,the,bean,definitions,this,method,is,a,natural,extension,point,for,any,other,custom,post,processing,of,the,xml,p,the,default,implementation,is,empty,subclasses,can,override,this,method,to,convert,custom,elements,into,standard,spring,bean,definitions,for,example,implementors,have,access,to,the,parser,s,bean,definition,reader,and,the,underlying,xml,resource,through,the,corresponding,accessors,see,get,reader,context;protected,void,post,process,xml,element,root
DefaultBeanDefinitionDocumentReader -> protected void postProcessXml(Element root);1529405413;Allow the XML to be extensible by processing any custom element types last,_after we finished processing the bean definitions. This method is a natural_extension point for any other custom post-processing of the XML._<p>The default implementation is empty. Subclasses can override this method to_convert custom elements into standard Spring bean definitions, for example._Implementors have access to the parser's bean definition reader and the_underlying XML resource, through the corresponding accessors._@see #getReaderContext();protected void postProcessXml(Element root) {_	};allow,the,xml,to,be,extensible,by,processing,any,custom,element,types,last,after,we,finished,processing,the,bean,definitions,this,method,is,a,natural,extension,point,for,any,other,custom,post,processing,of,the,xml,p,the,default,implementation,is,empty,subclasses,can,override,this,method,to,convert,custom,elements,into,standard,spring,bean,definitions,for,example,implementors,have,access,to,the,parser,s,bean,definition,reader,and,the,underlying,xml,resource,through,the,corresponding,accessors,see,get,reader,context;protected,void,post,process,xml,element,root
DefaultBeanDefinitionDocumentReader -> protected void postProcessXml(Element root);1532091916;Allow the XML to be extensible by processing any custom element types last,_after we finished processing the bean definitions. This method is a natural_extension point for any other custom post-processing of the XML._<p>The default implementation is empty. Subclasses can override this method to_convert custom elements into standard Spring bean definitions, for example._Implementors have access to the parser's bean definition reader and the_underlying XML resource, through the corresponding accessors._@see #getReaderContext();protected void postProcessXml(Element root) {_	};allow,the,xml,to,be,extensible,by,processing,any,custom,element,types,last,after,we,finished,processing,the,bean,definitions,this,method,is,a,natural,extension,point,for,any,other,custom,post,processing,of,the,xml,p,the,default,implementation,is,empty,subclasses,can,override,this,method,to,convert,custom,elements,into,standard,spring,bean,definitions,for,example,implementors,have,access,to,the,parser,s,bean,definition,reader,and,the,underlying,xml,resource,through,the,corresponding,accessors,see,get,reader,context;protected,void,post,process,xml,element,root
DefaultBeanDefinitionDocumentReader -> protected void postProcessXml(Element root);1532706365;Allow the XML to be extensible by processing any custom element types last,_after we finished processing the bean definitions. This method is a natural_extension point for any other custom post-processing of the XML._<p>The default implementation is empty. Subclasses can override this method to_convert custom elements into standard Spring bean definitions, for example._Implementors have access to the parser's bean definition reader and the_underlying XML resource, through the corresponding accessors._@see #getReaderContext();protected void postProcessXml(Element root) {_	};allow,the,xml,to,be,extensible,by,processing,any,custom,element,types,last,after,we,finished,processing,the,bean,definitions,this,method,is,a,natural,extension,point,for,any,other,custom,post,processing,of,the,xml,p,the,default,implementation,is,empty,subclasses,can,override,this,method,to,convert,custom,elements,into,standard,spring,bean,definitions,for,example,implementors,have,access,to,the,parser,s,bean,definition,reader,and,the,underlying,xml,resource,through,the,corresponding,accessors,see,get,reader,context;protected,void,post,process,xml,element,root
DefaultBeanDefinitionDocumentReader -> protected void importBeanDefinitionResource(Element ele);1328020251;Parse an "import" element and load the bean definitions_from the given resource into the bean factory.;protected void importBeanDefinitionResource(Element ele) {_		String location = ele.getAttribute(RESOURCE_ATTRIBUTE)__		if (!StringUtils.hasText(location)) {_			getReaderContext().error("Resource location must not be empty", ele)__			return__		}__		_		location = environment.resolveRequiredPlaceholders(location)___		Set<Resource> actualResources = new LinkedHashSet<Resource>(4)___		_		boolean absoluteLocation = false__		try {_			absoluteLocation = ResourcePatternUtils.isUrl(location) || ResourceUtils.toURI(location).isAbsolute()__		}_		catch (URISyntaxException ex) {_			_			_		}__		_		if (absoluteLocation) {_			try {_				int importCount = getReaderContext().getReader().loadBeanDefinitions(location, actualResources)__				if (logger.isDebugEnabled()) {_					logger.debug("Imported " + importCount + " bean definitions from URL location [" + location + "]")__				}_			}_			catch (BeanDefinitionStoreException ex) {_				getReaderContext().error(_						"Failed to import bean definitions from URL location [" + location + "]", ele, ex)__			}_		}_		else {_			_			try {_				int importCount__				Resource relativeResource = getReaderContext().getResource().createRelative(location)__				if (relativeResource.exists()) {_					importCount = getReaderContext().getReader().loadBeanDefinitions(relativeResource)__					actualResources.add(relativeResource)__				}_				else {_					String baseLocation = getReaderContext().getResource().getURL().toString()__					importCount = getReaderContext().getReader().loadBeanDefinitions(_							StringUtils.applyRelativePath(baseLocation, location), actualResources)__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Imported " + importCount + " bean definitions from relative location [" + location + "]")__				}_			}_			catch (IOException ex) {_				getReaderContext().error("Failed to resolve current resource location", ele, ex)__			}_			catch (BeanDefinitionStoreException ex) {_				getReaderContext().error("Failed to import bean definitions from relative location [" + location + "]",_						ele, ex)__			}_		}_		Resource[] actResArray = actualResources.toArray(new Resource[actualResources.size()])__		getReaderContext().fireImportProcessed(location, actResArray, extractSource(ele))__	};parse,an,import,element,and,load,the,bean,definitions,from,the,given,resource,into,the,bean,factory;protected,void,import,bean,definition,resource,element,ele,string,location,ele,get,attribute,if,string,utils,has,text,location,get,reader,context,error,resource,location,must,not,be,empty,ele,return,location,environment,resolve,required,placeholders,location,set,resource,actual,resources,new,linked,hash,set,resource,4,boolean,absolute,location,false,try,absolute,location,resource,pattern,utils,is,url,location,resource,utils,to,uri,location,is,absolute,catch,urisyntax,exception,ex,if,absolute,location,try,int,import,count,get,reader,context,get,reader,load,bean,definitions,location,actual,resources,if,logger,is,debug,enabled,logger,debug,imported,import,count,bean,definitions,from,url,location,location,catch,bean,definition,store,exception,ex,get,reader,context,error,failed,to,import,bean,definitions,from,url,location,location,ele,ex,else,try,int,import,count,resource,relative,resource,get,reader,context,get,resource,create,relative,location,if,relative,resource,exists,import,count,get,reader,context,get,reader,load,bean,definitions,relative,resource,actual,resources,add,relative,resource,else,string,base,location,get,reader,context,get,resource,get,url,to,string,import,count,get,reader,context,get,reader,load,bean,definitions,string,utils,apply,relative,path,base,location,location,actual,resources,if,logger,is,debug,enabled,logger,debug,imported,import,count,bean,definitions,from,relative,location,location,catch,ioexception,ex,get,reader,context,error,failed,to,resolve,current,resource,location,ele,ex,catch,bean,definition,store,exception,ex,get,reader,context,error,failed,to,import,bean,definitions,from,relative,location,location,ele,ex,resource,act,res,array,actual,resources,to,array,new,resource,actual,resources,size,get,reader,context,fire,import,processed,location,act,res,array,extract,source,ele
DefaultBeanDefinitionDocumentReader -> protected void importBeanDefinitionResource(Element ele);1356735495;Parse an "import" element and load the bean definitions_from the given resource into the bean factory.;protected void importBeanDefinitionResource(Element ele) {_		String location = ele.getAttribute(RESOURCE_ATTRIBUTE)__		if (!StringUtils.hasText(location)) {_			getReaderContext().error("Resource location must not be empty", ele)__			return__		}__		_		location = environment.resolveRequiredPlaceholders(location)___		Set<Resource> actualResources = new LinkedHashSet<Resource>(4)___		_		boolean absoluteLocation = false__		try {_			absoluteLocation = ResourcePatternUtils.isUrl(location) || ResourceUtils.toURI(location).isAbsolute()__		}_		catch (URISyntaxException ex) {_			_			_		}__		_		if (absoluteLocation) {_			try {_				int importCount = getReaderContext().getReader().loadBeanDefinitions(location, actualResources)__				if (logger.isDebugEnabled()) {_					logger.debug("Imported " + importCount + " bean definitions from URL location [" + location + "]")__				}_			}_			catch (BeanDefinitionStoreException ex) {_				getReaderContext().error(_						"Failed to import bean definitions from URL location [" + location + "]", ele, ex)__			}_		}_		else {_			_			try {_				int importCount__				Resource relativeResource = getReaderContext().getResource().createRelative(location)__				if (relativeResource.exists()) {_					importCount = getReaderContext().getReader().loadBeanDefinitions(relativeResource)__					actualResources.add(relativeResource)__				}_				else {_					String baseLocation = getReaderContext().getResource().getURL().toString()__					importCount = getReaderContext().getReader().loadBeanDefinitions(_							StringUtils.applyRelativePath(baseLocation, location), actualResources)__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Imported " + importCount + " bean definitions from relative location [" + location + "]")__				}_			}_			catch (IOException ex) {_				getReaderContext().error("Failed to resolve current resource location", ele, ex)__			}_			catch (BeanDefinitionStoreException ex) {_				getReaderContext().error("Failed to import bean definitions from relative location [" + location + "]",_						ele, ex)__			}_		}_		Resource[] actResArray = actualResources.toArray(new Resource[actualResources.size()])__		getReaderContext().fireImportProcessed(location, actResArray, extractSource(ele))__	};parse,an,import,element,and,load,the,bean,definitions,from,the,given,resource,into,the,bean,factory;protected,void,import,bean,definition,resource,element,ele,string,location,ele,get,attribute,if,string,utils,has,text,location,get,reader,context,error,resource,location,must,not,be,empty,ele,return,location,environment,resolve,required,placeholders,location,set,resource,actual,resources,new,linked,hash,set,resource,4,boolean,absolute,location,false,try,absolute,location,resource,pattern,utils,is,url,location,resource,utils,to,uri,location,is,absolute,catch,urisyntax,exception,ex,if,absolute,location,try,int,import,count,get,reader,context,get,reader,load,bean,definitions,location,actual,resources,if,logger,is,debug,enabled,logger,debug,imported,import,count,bean,definitions,from,url,location,location,catch,bean,definition,store,exception,ex,get,reader,context,error,failed,to,import,bean,definitions,from,url,location,location,ele,ex,else,try,int,import,count,resource,relative,resource,get,reader,context,get,resource,create,relative,location,if,relative,resource,exists,import,count,get,reader,context,get,reader,load,bean,definitions,relative,resource,actual,resources,add,relative,resource,else,string,base,location,get,reader,context,get,resource,get,url,to,string,import,count,get,reader,context,get,reader,load,bean,definitions,string,utils,apply,relative,path,base,location,location,actual,resources,if,logger,is,debug,enabled,logger,debug,imported,import,count,bean,definitions,from,relative,location,location,catch,ioexception,ex,get,reader,context,error,failed,to,resolve,current,resource,location,ele,ex,catch,bean,definition,store,exception,ex,get,reader,context,error,failed,to,import,bean,definitions,from,relative,location,location,ele,ex,resource,act,res,array,actual,resources,to,array,new,resource,actual,resources,size,get,reader,context,fire,import,processed,location,act,res,array,extract,source,ele
DefaultBeanDefinitionDocumentReader -> protected void importBeanDefinitionResource(Element ele);1357119239;Parse an "import" element and load the bean definitions_from the given resource into the bean factory.;protected void importBeanDefinitionResource(Element ele) {_		String location = ele.getAttribute(RESOURCE_ATTRIBUTE)__		if (!StringUtils.hasText(location)) {_			getReaderContext().error("Resource location must not be empty", ele)__			return__		}__		_		location = environment.resolveRequiredPlaceholders(location)___		Set<Resource> actualResources = new LinkedHashSet<Resource>(4)___		_		boolean absoluteLocation = false__		try {_			absoluteLocation = ResourcePatternUtils.isUrl(location) || ResourceUtils.toURI(location).isAbsolute()__		}_		catch (URISyntaxException ex) {_			_			_		}__		_		if (absoluteLocation) {_			try {_				int importCount = getReaderContext().getReader().loadBeanDefinitions(location, actualResources)__				if (logger.isDebugEnabled()) {_					logger.debug("Imported " + importCount + " bean definitions from URL location [" + location + "]")__				}_			}_			catch (BeanDefinitionStoreException ex) {_				getReaderContext().error(_						"Failed to import bean definitions from URL location [" + location + "]", ele, ex)__			}_		}_		else {_			_			try {_				int importCount__				Resource relativeResource = getReaderContext().getResource().createRelative(location)__				if (relativeResource.exists()) {_					importCount = getReaderContext().getReader().loadBeanDefinitions(relativeResource)__					actualResources.add(relativeResource)__				}_				else {_					String baseLocation = getReaderContext().getResource().getURL().toString()__					importCount = getReaderContext().getReader().loadBeanDefinitions(_							StringUtils.applyRelativePath(baseLocation, location), actualResources)__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Imported " + importCount + " bean definitions from relative location [" + location + "]")__				}_			}_			catch (IOException ex) {_				getReaderContext().error("Failed to resolve current resource location", ele, ex)__			}_			catch (BeanDefinitionStoreException ex) {_				getReaderContext().error("Failed to import bean definitions from relative location [" + location + "]",_						ele, ex)__			}_		}_		Resource[] actResArray = actualResources.toArray(new Resource[actualResources.size()])__		getReaderContext().fireImportProcessed(location, actResArray, extractSource(ele))__	};parse,an,import,element,and,load,the,bean,definitions,from,the,given,resource,into,the,bean,factory;protected,void,import,bean,definition,resource,element,ele,string,location,ele,get,attribute,if,string,utils,has,text,location,get,reader,context,error,resource,location,must,not,be,empty,ele,return,location,environment,resolve,required,placeholders,location,set,resource,actual,resources,new,linked,hash,set,resource,4,boolean,absolute,location,false,try,absolute,location,resource,pattern,utils,is,url,location,resource,utils,to,uri,location,is,absolute,catch,urisyntax,exception,ex,if,absolute,location,try,int,import,count,get,reader,context,get,reader,load,bean,definitions,location,actual,resources,if,logger,is,debug,enabled,logger,debug,imported,import,count,bean,definitions,from,url,location,location,catch,bean,definition,store,exception,ex,get,reader,context,error,failed,to,import,bean,definitions,from,url,location,location,ele,ex,else,try,int,import,count,resource,relative,resource,get,reader,context,get,resource,create,relative,location,if,relative,resource,exists,import,count,get,reader,context,get,reader,load,bean,definitions,relative,resource,actual,resources,add,relative,resource,else,string,base,location,get,reader,context,get,resource,get,url,to,string,import,count,get,reader,context,get,reader,load,bean,definitions,string,utils,apply,relative,path,base,location,location,actual,resources,if,logger,is,debug,enabled,logger,debug,imported,import,count,bean,definitions,from,relative,location,location,catch,ioexception,ex,get,reader,context,error,failed,to,resolve,current,resource,location,ele,ex,catch,bean,definition,store,exception,ex,get,reader,context,error,failed,to,import,bean,definitions,from,relative,location,location,ele,ex,resource,act,res,array,actual,resources,to,array,new,resource,actual,resources,size,get,reader,context,fire,import,processed,location,act,res,array,extract,source,ele
DefaultBeanDefinitionDocumentReader -> protected void importBeanDefinitionResource(Element ele);1362408075;Parse an "import" element and load the bean definitions_from the given resource into the bean factory.;protected void importBeanDefinitionResource(Element ele) {_		String location = ele.getAttribute(RESOURCE_ATTRIBUTE)__		if (!StringUtils.hasText(location)) {_			getReaderContext().error("Resource location must not be empty", ele)__			return__		}__		_		location = environment.resolveRequiredPlaceholders(location)___		Set<Resource> actualResources = new LinkedHashSet<Resource>(4)___		_		boolean absoluteLocation = false__		try {_			absoluteLocation = ResourcePatternUtils.isUrl(location) || ResourceUtils.toURI(location).isAbsolute()__		}_		catch (URISyntaxException ex) {_			_			_		}__		_		if (absoluteLocation) {_			try {_				int importCount = getReaderContext().getReader().loadBeanDefinitions(location, actualResources)__				if (logger.isDebugEnabled()) {_					logger.debug("Imported " + importCount + " bean definitions from URL location [" + location + "]")__				}_			}_			catch (BeanDefinitionStoreException ex) {_				getReaderContext().error(_						"Failed to import bean definitions from URL location [" + location + "]", ele, ex)__			}_		}_		else {_			_			try {_				int importCount__				Resource relativeResource = getReaderContext().getResource().createRelative(location)__				if (relativeResource.exists()) {_					importCount = getReaderContext().getReader().loadBeanDefinitions(relativeResource)__					actualResources.add(relativeResource)__				}_				else {_					String baseLocation = getReaderContext().getResource().getURL().toString()__					importCount = getReaderContext().getReader().loadBeanDefinitions(_							StringUtils.applyRelativePath(baseLocation, location), actualResources)__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Imported " + importCount + " bean definitions from relative location [" + location + "]")__				}_			}_			catch (IOException ex) {_				getReaderContext().error("Failed to resolve current resource location", ele, ex)__			}_			catch (BeanDefinitionStoreException ex) {_				getReaderContext().error("Failed to import bean definitions from relative location [" + location + "]",_						ele, ex)__			}_		}_		Resource[] actResArray = actualResources.toArray(new Resource[actualResources.size()])__		getReaderContext().fireImportProcessed(location, actResArray, extractSource(ele))__	};parse,an,import,element,and,load,the,bean,definitions,from,the,given,resource,into,the,bean,factory;protected,void,import,bean,definition,resource,element,ele,string,location,ele,get,attribute,if,string,utils,has,text,location,get,reader,context,error,resource,location,must,not,be,empty,ele,return,location,environment,resolve,required,placeholders,location,set,resource,actual,resources,new,linked,hash,set,resource,4,boolean,absolute,location,false,try,absolute,location,resource,pattern,utils,is,url,location,resource,utils,to,uri,location,is,absolute,catch,urisyntax,exception,ex,if,absolute,location,try,int,import,count,get,reader,context,get,reader,load,bean,definitions,location,actual,resources,if,logger,is,debug,enabled,logger,debug,imported,import,count,bean,definitions,from,url,location,location,catch,bean,definition,store,exception,ex,get,reader,context,error,failed,to,import,bean,definitions,from,url,location,location,ele,ex,else,try,int,import,count,resource,relative,resource,get,reader,context,get,resource,create,relative,location,if,relative,resource,exists,import,count,get,reader,context,get,reader,load,bean,definitions,relative,resource,actual,resources,add,relative,resource,else,string,base,location,get,reader,context,get,resource,get,url,to,string,import,count,get,reader,context,get,reader,load,bean,definitions,string,utils,apply,relative,path,base,location,location,actual,resources,if,logger,is,debug,enabled,logger,debug,imported,import,count,bean,definitions,from,relative,location,location,catch,ioexception,ex,get,reader,context,error,failed,to,resolve,current,resource,location,ele,ex,catch,bean,definition,store,exception,ex,get,reader,context,error,failed,to,import,bean,definitions,from,relative,location,location,ele,ex,resource,act,res,array,actual,resources,to,array,new,resource,actual,resources,size,get,reader,context,fire,import,processed,location,act,res,array,extract,source,ele
DefaultBeanDefinitionDocumentReader -> protected void importBeanDefinitionResource(Element ele);1368482696;Parse an "import" element and load the bean definitions_from the given resource into the bean factory.;protected void importBeanDefinitionResource(Element ele) {_		String location = ele.getAttribute(RESOURCE_ATTRIBUTE)__		if (!StringUtils.hasText(location)) {_			getReaderContext().error("Resource location must not be empty", ele)__			return__		}__		_		location = environment.resolveRequiredPlaceholders(location)___		Set<Resource> actualResources = new LinkedHashSet<Resource>(4)___		_		boolean absoluteLocation = false__		try {_			absoluteLocation = ResourcePatternUtils.isUrl(location) || ResourceUtils.toURI(location).isAbsolute()__		}_		catch (URISyntaxException ex) {_			_			_		}__		_		if (absoluteLocation) {_			try {_				int importCount = getReaderContext().getReader().loadBeanDefinitions(location, actualResources)__				if (logger.isDebugEnabled()) {_					logger.debug("Imported " + importCount + " bean definitions from URL location [" + location + "]")__				}_			}_			catch (BeanDefinitionStoreException ex) {_				getReaderContext().error(_						"Failed to import bean definitions from URL location [" + location + "]", ele, ex)__			}_		}_		else {_			_			try {_				int importCount__				Resource relativeResource = getReaderContext().getResource().createRelative(location)__				if (relativeResource.exists()) {_					importCount = getReaderContext().getReader().loadBeanDefinitions(relativeResource)__					actualResources.add(relativeResource)__				}_				else {_					String baseLocation = getReaderContext().getResource().getURL().toString()__					importCount = getReaderContext().getReader().loadBeanDefinitions(_							StringUtils.applyRelativePath(baseLocation, location), actualResources)__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Imported " + importCount + " bean definitions from relative location [" + location + "]")__				}_			}_			catch (IOException ex) {_				getReaderContext().error("Failed to resolve current resource location", ele, ex)__			}_			catch (BeanDefinitionStoreException ex) {_				getReaderContext().error("Failed to import bean definitions from relative location [" + location + "]",_						ele, ex)__			}_		}_		Resource[] actResArray = actualResources.toArray(new Resource[actualResources.size()])__		getReaderContext().fireImportProcessed(location, actResArray, extractSource(ele))__	};parse,an,import,element,and,load,the,bean,definitions,from,the,given,resource,into,the,bean,factory;protected,void,import,bean,definition,resource,element,ele,string,location,ele,get,attribute,if,string,utils,has,text,location,get,reader,context,error,resource,location,must,not,be,empty,ele,return,location,environment,resolve,required,placeholders,location,set,resource,actual,resources,new,linked,hash,set,resource,4,boolean,absolute,location,false,try,absolute,location,resource,pattern,utils,is,url,location,resource,utils,to,uri,location,is,absolute,catch,urisyntax,exception,ex,if,absolute,location,try,int,import,count,get,reader,context,get,reader,load,bean,definitions,location,actual,resources,if,logger,is,debug,enabled,logger,debug,imported,import,count,bean,definitions,from,url,location,location,catch,bean,definition,store,exception,ex,get,reader,context,error,failed,to,import,bean,definitions,from,url,location,location,ele,ex,else,try,int,import,count,resource,relative,resource,get,reader,context,get,resource,create,relative,location,if,relative,resource,exists,import,count,get,reader,context,get,reader,load,bean,definitions,relative,resource,actual,resources,add,relative,resource,else,string,base,location,get,reader,context,get,resource,get,url,to,string,import,count,get,reader,context,get,reader,load,bean,definitions,string,utils,apply,relative,path,base,location,location,actual,resources,if,logger,is,debug,enabled,logger,debug,imported,import,count,bean,definitions,from,relative,location,location,catch,ioexception,ex,get,reader,context,error,failed,to,resolve,current,resource,location,ele,ex,catch,bean,definition,store,exception,ex,get,reader,context,error,failed,to,import,bean,definitions,from,relative,location,location,ele,ex,resource,act,res,array,actual,resources,to,array,new,resource,actual,resources,size,get,reader,context,fire,import,processed,location,act,res,array,extract,source,ele
DefaultBeanDefinitionDocumentReader -> protected void importBeanDefinitionResource(Element ele);1382030648;Parse an "import" element and load the bean definitions_from the given resource into the bean factory.;protected void importBeanDefinitionResource(Element ele) {_		String location = ele.getAttribute(RESOURCE_ATTRIBUTE)__		if (!StringUtils.hasText(location)) {_			getReaderContext().error("Resource location must not be empty", ele)__			return__		}__		_		location = environment.resolveRequiredPlaceholders(location)___		Set<Resource> actualResources = new LinkedHashSet<Resource>(4)___		_		boolean absoluteLocation = false__		try {_			absoluteLocation = ResourcePatternUtils.isUrl(location) || ResourceUtils.toURI(location).isAbsolute()__		}_		catch (URISyntaxException ex) {_			_			_		}__		_		if (absoluteLocation) {_			try {_				int importCount = getReaderContext().getReader().loadBeanDefinitions(location, actualResources)__				if (logger.isDebugEnabled()) {_					logger.debug("Imported " + importCount + " bean definitions from URL location [" + location + "]")__				}_			}_			catch (BeanDefinitionStoreException ex) {_				getReaderContext().error(_						"Failed to import bean definitions from URL location [" + location + "]", ele, ex)__			}_		}_		else {_			_			try {_				int importCount__				Resource relativeResource = getReaderContext().getResource().createRelative(location)__				if (relativeResource.exists()) {_					importCount = getReaderContext().getReader().loadBeanDefinitions(relativeResource)__					actualResources.add(relativeResource)__				}_				else {_					String baseLocation = getReaderContext().getResource().getURL().toString()__					importCount = getReaderContext().getReader().loadBeanDefinitions(_							StringUtils.applyRelativePath(baseLocation, location), actualResources)__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Imported " + importCount + " bean definitions from relative location [" + location + "]")__				}_			}_			catch (IOException ex) {_				getReaderContext().error("Failed to resolve current resource location", ele, ex)__			}_			catch (BeanDefinitionStoreException ex) {_				getReaderContext().error("Failed to import bean definitions from relative location [" + location + "]",_						ele, ex)__			}_		}_		Resource[] actResArray = actualResources.toArray(new Resource[actualResources.size()])__		getReaderContext().fireImportProcessed(location, actResArray, extractSource(ele))__	};parse,an,import,element,and,load,the,bean,definitions,from,the,given,resource,into,the,bean,factory;protected,void,import,bean,definition,resource,element,ele,string,location,ele,get,attribute,if,string,utils,has,text,location,get,reader,context,error,resource,location,must,not,be,empty,ele,return,location,environment,resolve,required,placeholders,location,set,resource,actual,resources,new,linked,hash,set,resource,4,boolean,absolute,location,false,try,absolute,location,resource,pattern,utils,is,url,location,resource,utils,to,uri,location,is,absolute,catch,urisyntax,exception,ex,if,absolute,location,try,int,import,count,get,reader,context,get,reader,load,bean,definitions,location,actual,resources,if,logger,is,debug,enabled,logger,debug,imported,import,count,bean,definitions,from,url,location,location,catch,bean,definition,store,exception,ex,get,reader,context,error,failed,to,import,bean,definitions,from,url,location,location,ele,ex,else,try,int,import,count,resource,relative,resource,get,reader,context,get,resource,create,relative,location,if,relative,resource,exists,import,count,get,reader,context,get,reader,load,bean,definitions,relative,resource,actual,resources,add,relative,resource,else,string,base,location,get,reader,context,get,resource,get,url,to,string,import,count,get,reader,context,get,reader,load,bean,definitions,string,utils,apply,relative,path,base,location,location,actual,resources,if,logger,is,debug,enabled,logger,debug,imported,import,count,bean,definitions,from,relative,location,location,catch,ioexception,ex,get,reader,context,error,failed,to,resolve,current,resource,location,ele,ex,catch,bean,definition,store,exception,ex,get,reader,context,error,failed,to,import,bean,definitions,from,relative,location,location,ele,ex,resource,act,res,array,actual,resources,to,array,new,resource,actual,resources,size,get,reader,context,fire,import,processed,location,act,res,array,extract,source,ele
DefaultBeanDefinitionDocumentReader -> protected void importBeanDefinitionResource(Element ele);1404933463;Parse an "import" element and load the bean definitions_from the given resource into the bean factory.;protected void importBeanDefinitionResource(Element ele) {_		String location = ele.getAttribute(RESOURCE_ATTRIBUTE)__		if (!StringUtils.hasText(location)) {_			getReaderContext().error("Resource location must not be empty", ele)__			return__		}__		_		location = environment.resolveRequiredPlaceholders(location)___		Set<Resource> actualResources = new LinkedHashSet<Resource>(4)___		_		boolean absoluteLocation = false__		try {_			absoluteLocation = ResourcePatternUtils.isUrl(location) || ResourceUtils.toURI(location).isAbsolute()__		}_		catch (URISyntaxException ex) {_			_			_		}__		_		if (absoluteLocation) {_			try {_				int importCount = getReaderContext().getReader().loadBeanDefinitions(location, actualResources)__				if (logger.isDebugEnabled()) {_					logger.debug("Imported " + importCount + " bean definitions from URL location [" + location + "]")__				}_			}_			catch (BeanDefinitionStoreException ex) {_				getReaderContext().error(_						"Failed to import bean definitions from URL location [" + location + "]", ele, ex)__			}_		}_		else {_			_			try {_				int importCount__				Resource relativeResource = getReaderContext().getResource().createRelative(location)__				if (relativeResource.exists()) {_					importCount = getReaderContext().getReader().loadBeanDefinitions(relativeResource)__					actualResources.add(relativeResource)__				}_				else {_					String baseLocation = getReaderContext().getResource().getURL().toString()__					importCount = getReaderContext().getReader().loadBeanDefinitions(_							StringUtils.applyRelativePath(baseLocation, location), actualResources)__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Imported " + importCount + " bean definitions from relative location [" + location + "]")__				}_			}_			catch (IOException ex) {_				getReaderContext().error("Failed to resolve current resource location", ele, ex)__			}_			catch (BeanDefinitionStoreException ex) {_				getReaderContext().error("Failed to import bean definitions from relative location [" + location + "]",_						ele, ex)__			}_		}_		Resource[] actResArray = actualResources.toArray(new Resource[actualResources.size()])__		getReaderContext().fireImportProcessed(location, actResArray, extractSource(ele))__	};parse,an,import,element,and,load,the,bean,definitions,from,the,given,resource,into,the,bean,factory;protected,void,import,bean,definition,resource,element,ele,string,location,ele,get,attribute,if,string,utils,has,text,location,get,reader,context,error,resource,location,must,not,be,empty,ele,return,location,environment,resolve,required,placeholders,location,set,resource,actual,resources,new,linked,hash,set,resource,4,boolean,absolute,location,false,try,absolute,location,resource,pattern,utils,is,url,location,resource,utils,to,uri,location,is,absolute,catch,urisyntax,exception,ex,if,absolute,location,try,int,import,count,get,reader,context,get,reader,load,bean,definitions,location,actual,resources,if,logger,is,debug,enabled,logger,debug,imported,import,count,bean,definitions,from,url,location,location,catch,bean,definition,store,exception,ex,get,reader,context,error,failed,to,import,bean,definitions,from,url,location,location,ele,ex,else,try,int,import,count,resource,relative,resource,get,reader,context,get,resource,create,relative,location,if,relative,resource,exists,import,count,get,reader,context,get,reader,load,bean,definitions,relative,resource,actual,resources,add,relative,resource,else,string,base,location,get,reader,context,get,resource,get,url,to,string,import,count,get,reader,context,get,reader,load,bean,definitions,string,utils,apply,relative,path,base,location,location,actual,resources,if,logger,is,debug,enabled,logger,debug,imported,import,count,bean,definitions,from,relative,location,location,catch,ioexception,ex,get,reader,context,error,failed,to,resolve,current,resource,location,ele,ex,catch,bean,definition,store,exception,ex,get,reader,context,error,failed,to,import,bean,definitions,from,relative,location,location,ele,ex,resource,act,res,array,actual,resources,to,array,new,resource,actual,resources,size,get,reader,context,fire,import,processed,location,act,res,array,extract,source,ele
DefaultBeanDefinitionDocumentReader -> protected void importBeanDefinitionResource(Element ele);1411599760;Parse an "import" element and load the bean definitions_from the given resource into the bean factory.;protected void importBeanDefinitionResource(Element ele) {_		String location = ele.getAttribute(RESOURCE_ATTRIBUTE)__		if (!StringUtils.hasText(location)) {_			getReaderContext().error("Resource location must not be empty", ele)__			return__		}__		_		location = getReaderContext().getEnvironment().resolveRequiredPlaceholders(location)___		Set<Resource> actualResources = new LinkedHashSet<Resource>(4)___		_		boolean absoluteLocation = false__		try {_			absoluteLocation = ResourcePatternUtils.isUrl(location) || ResourceUtils.toURI(location).isAbsolute()__		}_		catch (URISyntaxException ex) {_			_			_		}__		_		if (absoluteLocation) {_			try {_				int importCount = getReaderContext().getReader().loadBeanDefinitions(location, actualResources)__				if (logger.isDebugEnabled()) {_					logger.debug("Imported " + importCount + " bean definitions from URL location [" + location + "]")__				}_			}_			catch (BeanDefinitionStoreException ex) {_				getReaderContext().error(_						"Failed to import bean definitions from URL location [" + location + "]", ele, ex)__			}_		}_		else {_			_			try {_				int importCount__				Resource relativeResource = getReaderContext().getResource().createRelative(location)__				if (relativeResource.exists()) {_					importCount = getReaderContext().getReader().loadBeanDefinitions(relativeResource)__					actualResources.add(relativeResource)__				}_				else {_					String baseLocation = getReaderContext().getResource().getURL().toString()__					importCount = getReaderContext().getReader().loadBeanDefinitions(_							StringUtils.applyRelativePath(baseLocation, location), actualResources)__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Imported " + importCount + " bean definitions from relative location [" + location + "]")__				}_			}_			catch (IOException ex) {_				getReaderContext().error("Failed to resolve current resource location", ele, ex)__			}_			catch (BeanDefinitionStoreException ex) {_				getReaderContext().error("Failed to import bean definitions from relative location [" + location + "]",_						ele, ex)__			}_		}_		Resource[] actResArray = actualResources.toArray(new Resource[actualResources.size()])__		getReaderContext().fireImportProcessed(location, actResArray, extractSource(ele))__	};parse,an,import,element,and,load,the,bean,definitions,from,the,given,resource,into,the,bean,factory;protected,void,import,bean,definition,resource,element,ele,string,location,ele,get,attribute,if,string,utils,has,text,location,get,reader,context,error,resource,location,must,not,be,empty,ele,return,location,get,reader,context,get,environment,resolve,required,placeholders,location,set,resource,actual,resources,new,linked,hash,set,resource,4,boolean,absolute,location,false,try,absolute,location,resource,pattern,utils,is,url,location,resource,utils,to,uri,location,is,absolute,catch,urisyntax,exception,ex,if,absolute,location,try,int,import,count,get,reader,context,get,reader,load,bean,definitions,location,actual,resources,if,logger,is,debug,enabled,logger,debug,imported,import,count,bean,definitions,from,url,location,location,catch,bean,definition,store,exception,ex,get,reader,context,error,failed,to,import,bean,definitions,from,url,location,location,ele,ex,else,try,int,import,count,resource,relative,resource,get,reader,context,get,resource,create,relative,location,if,relative,resource,exists,import,count,get,reader,context,get,reader,load,bean,definitions,relative,resource,actual,resources,add,relative,resource,else,string,base,location,get,reader,context,get,resource,get,url,to,string,import,count,get,reader,context,get,reader,load,bean,definitions,string,utils,apply,relative,path,base,location,location,actual,resources,if,logger,is,debug,enabled,logger,debug,imported,import,count,bean,definitions,from,relative,location,location,catch,ioexception,ex,get,reader,context,error,failed,to,resolve,current,resource,location,ele,ex,catch,bean,definition,store,exception,ex,get,reader,context,error,failed,to,import,bean,definitions,from,relative,location,location,ele,ex,resource,act,res,array,actual,resources,to,array,new,resource,actual,resources,size,get,reader,context,fire,import,processed,location,act,res,array,extract,source,ele
DefaultBeanDefinitionDocumentReader -> protected void importBeanDefinitionResource(Element ele);1419966315;Parse an "import" element and load the bean definitions_from the given resource into the bean factory.;protected void importBeanDefinitionResource(Element ele) {_		String location = ele.getAttribute(RESOURCE_ATTRIBUTE)__		if (!StringUtils.hasText(location)) {_			getReaderContext().error("Resource location must not be empty", ele)__			return__		}__		_		location = getReaderContext().getEnvironment().resolveRequiredPlaceholders(location)___		Set<Resource> actualResources = new LinkedHashSet<Resource>(4)___		_		boolean absoluteLocation = false__		try {_			absoluteLocation = ResourcePatternUtils.isUrl(location) || ResourceUtils.toURI(location).isAbsolute()__		}_		catch (URISyntaxException ex) {_			_			_		}__		_		if (absoluteLocation) {_			try {_				int importCount = getReaderContext().getReader().loadBeanDefinitions(location, actualResources)__				if (logger.isDebugEnabled()) {_					logger.debug("Imported " + importCount + " bean definitions from URL location [" + location + "]")__				}_			}_			catch (BeanDefinitionStoreException ex) {_				getReaderContext().error(_						"Failed to import bean definitions from URL location [" + location + "]", ele, ex)__			}_		}_		else {_			_			try {_				int importCount__				Resource relativeResource = getReaderContext().getResource().createRelative(location)__				if (relativeResource.exists()) {_					importCount = getReaderContext().getReader().loadBeanDefinitions(relativeResource)__					actualResources.add(relativeResource)__				}_				else {_					String baseLocation = getReaderContext().getResource().getURL().toString()__					importCount = getReaderContext().getReader().loadBeanDefinitions(_							StringUtils.applyRelativePath(baseLocation, location), actualResources)__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Imported " + importCount + " bean definitions from relative location [" + location + "]")__				}_			}_			catch (IOException ex) {_				getReaderContext().error("Failed to resolve current resource location", ele, ex)__			}_			catch (BeanDefinitionStoreException ex) {_				getReaderContext().error("Failed to import bean definitions from relative location [" + location + "]",_						ele, ex)__			}_		}_		Resource[] actResArray = actualResources.toArray(new Resource[actualResources.size()])__		getReaderContext().fireImportProcessed(location, actResArray, extractSource(ele))__	};parse,an,import,element,and,load,the,bean,definitions,from,the,given,resource,into,the,bean,factory;protected,void,import,bean,definition,resource,element,ele,string,location,ele,get,attribute,if,string,utils,has,text,location,get,reader,context,error,resource,location,must,not,be,empty,ele,return,location,get,reader,context,get,environment,resolve,required,placeholders,location,set,resource,actual,resources,new,linked,hash,set,resource,4,boolean,absolute,location,false,try,absolute,location,resource,pattern,utils,is,url,location,resource,utils,to,uri,location,is,absolute,catch,urisyntax,exception,ex,if,absolute,location,try,int,import,count,get,reader,context,get,reader,load,bean,definitions,location,actual,resources,if,logger,is,debug,enabled,logger,debug,imported,import,count,bean,definitions,from,url,location,location,catch,bean,definition,store,exception,ex,get,reader,context,error,failed,to,import,bean,definitions,from,url,location,location,ele,ex,else,try,int,import,count,resource,relative,resource,get,reader,context,get,resource,create,relative,location,if,relative,resource,exists,import,count,get,reader,context,get,reader,load,bean,definitions,relative,resource,actual,resources,add,relative,resource,else,string,base,location,get,reader,context,get,resource,get,url,to,string,import,count,get,reader,context,get,reader,load,bean,definitions,string,utils,apply,relative,path,base,location,location,actual,resources,if,logger,is,debug,enabled,logger,debug,imported,import,count,bean,definitions,from,relative,location,location,catch,ioexception,ex,get,reader,context,error,failed,to,resolve,current,resource,location,ele,ex,catch,bean,definition,store,exception,ex,get,reader,context,error,failed,to,import,bean,definitions,from,relative,location,location,ele,ex,resource,act,res,array,actual,resources,to,array,new,resource,actual,resources,size,get,reader,context,fire,import,processed,location,act,res,array,extract,source,ele
DefaultBeanDefinitionDocumentReader -> protected void importBeanDefinitionResource(Element ele);1424720154;Parse an "import" element and load the bean definitions_from the given resource into the bean factory.;protected void importBeanDefinitionResource(Element ele) {_		String location = ele.getAttribute(RESOURCE_ATTRIBUTE)__		if (!StringUtils.hasText(location)) {_			getReaderContext().error("Resource location must not be empty", ele)__			return__		}__		_		location = getReaderContext().getEnvironment().resolveRequiredPlaceholders(location)___		Set<Resource> actualResources = new LinkedHashSet<Resource>(4)___		_		boolean absoluteLocation = false__		try {_			absoluteLocation = ResourcePatternUtils.isUrl(location) || ResourceUtils.toURI(location).isAbsolute()__		}_		catch (URISyntaxException ex) {_			_			_		}__		_		if (absoluteLocation) {_			try {_				int importCount = getReaderContext().getReader().loadBeanDefinitions(location, actualResources)__				if (logger.isDebugEnabled()) {_					logger.debug("Imported " + importCount + " bean definitions from URL location [" + location + "]")__				}_			}_			catch (BeanDefinitionStoreException ex) {_				getReaderContext().error(_						"Failed to import bean definitions from URL location [" + location + "]", ele, ex)__			}_		}_		else {_			_			try {_				int importCount__				Resource relativeResource = getReaderContext().getResource().createRelative(location)__				if (relativeResource.exists()) {_					importCount = getReaderContext().getReader().loadBeanDefinitions(relativeResource)__					actualResources.add(relativeResource)__				}_				else {_					String baseLocation = getReaderContext().getResource().getURL().toString()__					importCount = getReaderContext().getReader().loadBeanDefinitions(_							StringUtils.applyRelativePath(baseLocation, location), actualResources)__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Imported " + importCount + " bean definitions from relative location [" + location + "]")__				}_			}_			catch (IOException ex) {_				getReaderContext().error("Failed to resolve current resource location", ele, ex)__			}_			catch (BeanDefinitionStoreException ex) {_				getReaderContext().error("Failed to import bean definitions from relative location [" + location + "]",_						ele, ex)__			}_		}_		Resource[] actResArray = actualResources.toArray(new Resource[actualResources.size()])__		getReaderContext().fireImportProcessed(location, actResArray, extractSource(ele))__	};parse,an,import,element,and,load,the,bean,definitions,from,the,given,resource,into,the,bean,factory;protected,void,import,bean,definition,resource,element,ele,string,location,ele,get,attribute,if,string,utils,has,text,location,get,reader,context,error,resource,location,must,not,be,empty,ele,return,location,get,reader,context,get,environment,resolve,required,placeholders,location,set,resource,actual,resources,new,linked,hash,set,resource,4,boolean,absolute,location,false,try,absolute,location,resource,pattern,utils,is,url,location,resource,utils,to,uri,location,is,absolute,catch,urisyntax,exception,ex,if,absolute,location,try,int,import,count,get,reader,context,get,reader,load,bean,definitions,location,actual,resources,if,logger,is,debug,enabled,logger,debug,imported,import,count,bean,definitions,from,url,location,location,catch,bean,definition,store,exception,ex,get,reader,context,error,failed,to,import,bean,definitions,from,url,location,location,ele,ex,else,try,int,import,count,resource,relative,resource,get,reader,context,get,resource,create,relative,location,if,relative,resource,exists,import,count,get,reader,context,get,reader,load,bean,definitions,relative,resource,actual,resources,add,relative,resource,else,string,base,location,get,reader,context,get,resource,get,url,to,string,import,count,get,reader,context,get,reader,load,bean,definitions,string,utils,apply,relative,path,base,location,location,actual,resources,if,logger,is,debug,enabled,logger,debug,imported,import,count,bean,definitions,from,relative,location,location,catch,ioexception,ex,get,reader,context,error,failed,to,resolve,current,resource,location,ele,ex,catch,bean,definition,store,exception,ex,get,reader,context,error,failed,to,import,bean,definitions,from,relative,location,location,ele,ex,resource,act,res,array,actual,resources,to,array,new,resource,actual,resources,size,get,reader,context,fire,import,processed,location,act,res,array,extract,source,ele
DefaultBeanDefinitionDocumentReader -> protected void importBeanDefinitionResource(Element ele);1453749972;Parse an "import" element and load the bean definitions_from the given resource into the bean factory.;protected void importBeanDefinitionResource(Element ele) {_		String location = ele.getAttribute(RESOURCE_ATTRIBUTE)__		if (!StringUtils.hasText(location)) {_			getReaderContext().error("Resource location must not be empty", ele)__			return__		}__		_		location = getReaderContext().getEnvironment().resolveRequiredPlaceholders(location)___		Set<Resource> actualResources = new LinkedHashSet<Resource>(4)___		_		boolean absoluteLocation = false__		try {_			absoluteLocation = ResourcePatternUtils.isUrl(location) || ResourceUtils.toURI(location).isAbsolute()__		}_		catch (URISyntaxException ex) {_			_			_		}__		_		if (absoluteLocation) {_			try {_				int importCount = getReaderContext().getReader().loadBeanDefinitions(location, actualResources)__				if (logger.isDebugEnabled()) {_					logger.debug("Imported " + importCount + " bean definitions from URL location [" + location + "]")__				}_			}_			catch (BeanDefinitionStoreException ex) {_				getReaderContext().error(_						"Failed to import bean definitions from URL location [" + location + "]", ele, ex)__			}_		}_		else {_			_			try {_				int importCount__				Resource relativeResource = getReaderContext().getResource().createRelative(location)__				if (relativeResource.exists()) {_					importCount = getReaderContext().getReader().loadBeanDefinitions(relativeResource)__					actualResources.add(relativeResource)__				}_				else {_					String baseLocation = getReaderContext().getResource().getURL().toString()__					importCount = getReaderContext().getReader().loadBeanDefinitions(_							StringUtils.applyRelativePath(baseLocation, location), actualResources)__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Imported " + importCount + " bean definitions from relative location [" + location + "]")__				}_			}_			catch (IOException ex) {_				getReaderContext().error("Failed to resolve current resource location", ele, ex)__			}_			catch (BeanDefinitionStoreException ex) {_				getReaderContext().error("Failed to import bean definitions from relative location [" + location + "]",_						ele, ex)__			}_		}_		Resource[] actResArray = actualResources.toArray(new Resource[actualResources.size()])__		getReaderContext().fireImportProcessed(location, actResArray, extractSource(ele))__	};parse,an,import,element,and,load,the,bean,definitions,from,the,given,resource,into,the,bean,factory;protected,void,import,bean,definition,resource,element,ele,string,location,ele,get,attribute,if,string,utils,has,text,location,get,reader,context,error,resource,location,must,not,be,empty,ele,return,location,get,reader,context,get,environment,resolve,required,placeholders,location,set,resource,actual,resources,new,linked,hash,set,resource,4,boolean,absolute,location,false,try,absolute,location,resource,pattern,utils,is,url,location,resource,utils,to,uri,location,is,absolute,catch,urisyntax,exception,ex,if,absolute,location,try,int,import,count,get,reader,context,get,reader,load,bean,definitions,location,actual,resources,if,logger,is,debug,enabled,logger,debug,imported,import,count,bean,definitions,from,url,location,location,catch,bean,definition,store,exception,ex,get,reader,context,error,failed,to,import,bean,definitions,from,url,location,location,ele,ex,else,try,int,import,count,resource,relative,resource,get,reader,context,get,resource,create,relative,location,if,relative,resource,exists,import,count,get,reader,context,get,reader,load,bean,definitions,relative,resource,actual,resources,add,relative,resource,else,string,base,location,get,reader,context,get,resource,get,url,to,string,import,count,get,reader,context,get,reader,load,bean,definitions,string,utils,apply,relative,path,base,location,location,actual,resources,if,logger,is,debug,enabled,logger,debug,imported,import,count,bean,definitions,from,relative,location,location,catch,ioexception,ex,get,reader,context,error,failed,to,resolve,current,resource,location,ele,ex,catch,bean,definition,store,exception,ex,get,reader,context,error,failed,to,import,bean,definitions,from,relative,location,location,ele,ex,resource,act,res,array,actual,resources,to,array,new,resource,actual,resources,size,get,reader,context,fire,import,processed,location,act,res,array,extract,source,ele
DefaultBeanDefinitionDocumentReader -> protected void importBeanDefinitionResource(Element ele);1467730834;Parse an "import" element and load the bean definitions_from the given resource into the bean factory.;protected void importBeanDefinitionResource(Element ele) {_		String location = ele.getAttribute(RESOURCE_ATTRIBUTE)__		if (!StringUtils.hasText(location)) {_			getReaderContext().error("Resource location must not be empty", ele)__			return__		}__		_		location = getReaderContext().getEnvironment().resolveRequiredPlaceholders(location)___		Set<Resource> actualResources = new LinkedHashSet<>(4)___		_		boolean absoluteLocation = false__		try {_			absoluteLocation = ResourcePatternUtils.isUrl(location) || ResourceUtils.toURI(location).isAbsolute()__		}_		catch (URISyntaxException ex) {_			_			_		}__		_		if (absoluteLocation) {_			try {_				int importCount = getReaderContext().getReader().loadBeanDefinitions(location, actualResources)__				if (logger.isDebugEnabled()) {_					logger.debug("Imported " + importCount + " bean definitions from URL location [" + location + "]")__				}_			}_			catch (BeanDefinitionStoreException ex) {_				getReaderContext().error(_						"Failed to import bean definitions from URL location [" + location + "]", ele, ex)__			}_		}_		else {_			_			try {_				int importCount__				Resource relativeResource = getReaderContext().getResource().createRelative(location)__				if (relativeResource.exists()) {_					importCount = getReaderContext().getReader().loadBeanDefinitions(relativeResource)__					actualResources.add(relativeResource)__				}_				else {_					String baseLocation = getReaderContext().getResource().getURL().toString()__					importCount = getReaderContext().getReader().loadBeanDefinitions(_							StringUtils.applyRelativePath(baseLocation, location), actualResources)__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Imported " + importCount + " bean definitions from relative location [" + location + "]")__				}_			}_			catch (IOException ex) {_				getReaderContext().error("Failed to resolve current resource location", ele, ex)__			}_			catch (BeanDefinitionStoreException ex) {_				getReaderContext().error("Failed to import bean definitions from relative location [" + location + "]",_						ele, ex)__			}_		}_		Resource[] actResArray = actualResources.toArray(new Resource[actualResources.size()])__		getReaderContext().fireImportProcessed(location, actResArray, extractSource(ele))__	};parse,an,import,element,and,load,the,bean,definitions,from,the,given,resource,into,the,bean,factory;protected,void,import,bean,definition,resource,element,ele,string,location,ele,get,attribute,if,string,utils,has,text,location,get,reader,context,error,resource,location,must,not,be,empty,ele,return,location,get,reader,context,get,environment,resolve,required,placeholders,location,set,resource,actual,resources,new,linked,hash,set,4,boolean,absolute,location,false,try,absolute,location,resource,pattern,utils,is,url,location,resource,utils,to,uri,location,is,absolute,catch,urisyntax,exception,ex,if,absolute,location,try,int,import,count,get,reader,context,get,reader,load,bean,definitions,location,actual,resources,if,logger,is,debug,enabled,logger,debug,imported,import,count,bean,definitions,from,url,location,location,catch,bean,definition,store,exception,ex,get,reader,context,error,failed,to,import,bean,definitions,from,url,location,location,ele,ex,else,try,int,import,count,resource,relative,resource,get,reader,context,get,resource,create,relative,location,if,relative,resource,exists,import,count,get,reader,context,get,reader,load,bean,definitions,relative,resource,actual,resources,add,relative,resource,else,string,base,location,get,reader,context,get,resource,get,url,to,string,import,count,get,reader,context,get,reader,load,bean,definitions,string,utils,apply,relative,path,base,location,location,actual,resources,if,logger,is,debug,enabled,logger,debug,imported,import,count,bean,definitions,from,relative,location,location,catch,ioexception,ex,get,reader,context,error,failed,to,resolve,current,resource,location,ele,ex,catch,bean,definition,store,exception,ex,get,reader,context,error,failed,to,import,bean,definitions,from,relative,location,location,ele,ex,resource,act,res,array,actual,resources,to,array,new,resource,actual,resources,size,get,reader,context,fire,import,processed,location,act,res,array,extract,source,ele
DefaultBeanDefinitionDocumentReader -> protected void importBeanDefinitionResource(Element ele);1496837955;Parse an "import" element and load the bean definitions_from the given resource into the bean factory.;protected void importBeanDefinitionResource(Element ele) {_		String location = ele.getAttribute(RESOURCE_ATTRIBUTE)__		if (!StringUtils.hasText(location)) {_			getReaderContext().error("Resource location must not be empty", ele)__			return__		}__		_		location = getReaderContext().getEnvironment().resolveRequiredPlaceholders(location)___		Set<Resource> actualResources = new LinkedHashSet<>(4)___		_		boolean absoluteLocation = false__		try {_			absoluteLocation = ResourcePatternUtils.isUrl(location) || ResourceUtils.toURI(location).isAbsolute()__		}_		catch (URISyntaxException ex) {_			_			_		}__		_		if (absoluteLocation) {_			try {_				int importCount = getReaderContext().getReader().loadBeanDefinitions(location, actualResources)__				if (logger.isDebugEnabled()) {_					logger.debug("Imported " + importCount + " bean definitions from URL location [" + location + "]")__				}_			}_			catch (BeanDefinitionStoreException ex) {_				getReaderContext().error(_						"Failed to import bean definitions from URL location [" + location + "]", ele, ex)__			}_		}_		else {_			_			try {_				int importCount__				Resource relativeResource = getReaderContext().getResource().createRelative(location)__				if (relativeResource.exists()) {_					importCount = getReaderContext().getReader().loadBeanDefinitions(relativeResource)__					actualResources.add(relativeResource)__				}_				else {_					String baseLocation = getReaderContext().getResource().getURL().toString()__					importCount = getReaderContext().getReader().loadBeanDefinitions(_							StringUtils.applyRelativePath(baseLocation, location), actualResources)__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Imported " + importCount + " bean definitions from relative location [" + location + "]")__				}_			}_			catch (IOException ex) {_				getReaderContext().error("Failed to resolve current resource location", ele, ex)__			}_			catch (BeanDefinitionStoreException ex) {_				getReaderContext().error("Failed to import bean definitions from relative location [" + location + "]",_						ele, ex)__			}_		}_		Resource[] actResArray = actualResources.toArray(new Resource[actualResources.size()])__		getReaderContext().fireImportProcessed(location, actResArray, extractSource(ele))__	};parse,an,import,element,and,load,the,bean,definitions,from,the,given,resource,into,the,bean,factory;protected,void,import,bean,definition,resource,element,ele,string,location,ele,get,attribute,if,string,utils,has,text,location,get,reader,context,error,resource,location,must,not,be,empty,ele,return,location,get,reader,context,get,environment,resolve,required,placeholders,location,set,resource,actual,resources,new,linked,hash,set,4,boolean,absolute,location,false,try,absolute,location,resource,pattern,utils,is,url,location,resource,utils,to,uri,location,is,absolute,catch,urisyntax,exception,ex,if,absolute,location,try,int,import,count,get,reader,context,get,reader,load,bean,definitions,location,actual,resources,if,logger,is,debug,enabled,logger,debug,imported,import,count,bean,definitions,from,url,location,location,catch,bean,definition,store,exception,ex,get,reader,context,error,failed,to,import,bean,definitions,from,url,location,location,ele,ex,else,try,int,import,count,resource,relative,resource,get,reader,context,get,resource,create,relative,location,if,relative,resource,exists,import,count,get,reader,context,get,reader,load,bean,definitions,relative,resource,actual,resources,add,relative,resource,else,string,base,location,get,reader,context,get,resource,get,url,to,string,import,count,get,reader,context,get,reader,load,bean,definitions,string,utils,apply,relative,path,base,location,location,actual,resources,if,logger,is,debug,enabled,logger,debug,imported,import,count,bean,definitions,from,relative,location,location,catch,ioexception,ex,get,reader,context,error,failed,to,resolve,current,resource,location,ele,ex,catch,bean,definition,store,exception,ex,get,reader,context,error,failed,to,import,bean,definitions,from,relative,location,location,ele,ex,resource,act,res,array,actual,resources,to,array,new,resource,actual,resources,size,get,reader,context,fire,import,processed,location,act,res,array,extract,source,ele
DefaultBeanDefinitionDocumentReader -> protected void importBeanDefinitionResource(Element ele);1500495740;Parse an "import" element and load the bean definitions_from the given resource into the bean factory.;protected void importBeanDefinitionResource(Element ele) {_		String location = ele.getAttribute(RESOURCE_ATTRIBUTE)__		if (!StringUtils.hasText(location)) {_			getReaderContext().error("Resource location must not be empty", ele)__			return__		}__		_		location = getReaderContext().getEnvironment().resolveRequiredPlaceholders(location)___		Set<Resource> actualResources = new LinkedHashSet<>(4)___		_		boolean absoluteLocation = false__		try {_			absoluteLocation = ResourcePatternUtils.isUrl(location) || ResourceUtils.toURI(location).isAbsolute()__		}_		catch (URISyntaxException ex) {_			_			_		}__		_		if (absoluteLocation) {_			try {_				int importCount = getReaderContext().getReader().loadBeanDefinitions(location, actualResources)__				if (logger.isDebugEnabled()) {_					logger.debug("Imported " + importCount + " bean definitions from URL location [" + location + "]")__				}_			}_			catch (BeanDefinitionStoreException ex) {_				getReaderContext().error(_						"Failed to import bean definitions from URL location [" + location + "]", ele, ex)__			}_		}_		else {_			_			try {_				int importCount__				Resource relativeResource = getReaderContext().getResource().createRelative(location)__				if (relativeResource.exists()) {_					importCount = getReaderContext().getReader().loadBeanDefinitions(relativeResource)__					actualResources.add(relativeResource)__				}_				else {_					String baseLocation = getReaderContext().getResource().getURL().toString()__					importCount = getReaderContext().getReader().loadBeanDefinitions(_							StringUtils.applyRelativePath(baseLocation, location), actualResources)__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Imported " + importCount + " bean definitions from relative location [" + location + "]")__				}_			}_			catch (IOException ex) {_				getReaderContext().error("Failed to resolve current resource location", ele, ex)__			}_			catch (BeanDefinitionStoreException ex) {_				getReaderContext().error("Failed to import bean definitions from relative location [" + location + "]",_						ele, ex)__			}_		}_		Resource[] actResArray = actualResources.toArray(new Resource[actualResources.size()])__		getReaderContext().fireImportProcessed(location, actResArray, extractSource(ele))__	};parse,an,import,element,and,load,the,bean,definitions,from,the,given,resource,into,the,bean,factory;protected,void,import,bean,definition,resource,element,ele,string,location,ele,get,attribute,if,string,utils,has,text,location,get,reader,context,error,resource,location,must,not,be,empty,ele,return,location,get,reader,context,get,environment,resolve,required,placeholders,location,set,resource,actual,resources,new,linked,hash,set,4,boolean,absolute,location,false,try,absolute,location,resource,pattern,utils,is,url,location,resource,utils,to,uri,location,is,absolute,catch,urisyntax,exception,ex,if,absolute,location,try,int,import,count,get,reader,context,get,reader,load,bean,definitions,location,actual,resources,if,logger,is,debug,enabled,logger,debug,imported,import,count,bean,definitions,from,url,location,location,catch,bean,definition,store,exception,ex,get,reader,context,error,failed,to,import,bean,definitions,from,url,location,location,ele,ex,else,try,int,import,count,resource,relative,resource,get,reader,context,get,resource,create,relative,location,if,relative,resource,exists,import,count,get,reader,context,get,reader,load,bean,definitions,relative,resource,actual,resources,add,relative,resource,else,string,base,location,get,reader,context,get,resource,get,url,to,string,import,count,get,reader,context,get,reader,load,bean,definitions,string,utils,apply,relative,path,base,location,location,actual,resources,if,logger,is,debug,enabled,logger,debug,imported,import,count,bean,definitions,from,relative,location,location,catch,ioexception,ex,get,reader,context,error,failed,to,resolve,current,resource,location,ele,ex,catch,bean,definition,store,exception,ex,get,reader,context,error,failed,to,import,bean,definitions,from,relative,location,location,ele,ex,resource,act,res,array,actual,resources,to,array,new,resource,actual,resources,size,get,reader,context,fire,import,processed,location,act,res,array,extract,source,ele
DefaultBeanDefinitionDocumentReader -> protected void importBeanDefinitionResource(Element ele);1519295386;Parse an "import" element and load the bean definitions_from the given resource into the bean factory.;protected void importBeanDefinitionResource(Element ele) {_		String location = ele.getAttribute(RESOURCE_ATTRIBUTE)__		if (!StringUtils.hasText(location)) {_			getReaderContext().error("Resource location must not be empty", ele)__			return__		}__		_		location = getReaderContext().getEnvironment().resolveRequiredPlaceholders(location)___		Set<Resource> actualResources = new LinkedHashSet<>(4)___		_		boolean absoluteLocation = false__		try {_			absoluteLocation = ResourcePatternUtils.isUrl(location) || ResourceUtils.toURI(location).isAbsolute()__		}_		catch (URISyntaxException ex) {_			_			_		}__		_		if (absoluteLocation) {_			try {_				int importCount = getReaderContext().getReader().loadBeanDefinitions(location, actualResources)__				if (logger.isDebugEnabled()) {_					logger.debug("Imported " + importCount + " bean definitions from URL location [" + location + "]")__				}_			}_			catch (BeanDefinitionStoreException ex) {_				getReaderContext().error(_						"Failed to import bean definitions from URL location [" + location + "]", ele, ex)__			}_		}_		else {_			_			try {_				int importCount__				Resource relativeResource = getReaderContext().getResource().createRelative(location)__				if (relativeResource.exists()) {_					importCount = getReaderContext().getReader().loadBeanDefinitions(relativeResource)__					actualResources.add(relativeResource)__				}_				else {_					String baseLocation = getReaderContext().getResource().getURL().toString()__					importCount = getReaderContext().getReader().loadBeanDefinitions(_							StringUtils.applyRelativePath(baseLocation, location), actualResources)__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Imported " + importCount + " bean definitions from relative location [" + location + "]")__				}_			}_			catch (IOException ex) {_				getReaderContext().error("Failed to resolve current resource location", ele, ex)__			}_			catch (BeanDefinitionStoreException ex) {_				getReaderContext().error("Failed to import bean definitions from relative location [" + location + "]",_						ele, ex)__			}_		}_		Resource[] actResArray = actualResources.toArray(new Resource[0])__		getReaderContext().fireImportProcessed(location, actResArray, extractSource(ele))__	};parse,an,import,element,and,load,the,bean,definitions,from,the,given,resource,into,the,bean,factory;protected,void,import,bean,definition,resource,element,ele,string,location,ele,get,attribute,if,string,utils,has,text,location,get,reader,context,error,resource,location,must,not,be,empty,ele,return,location,get,reader,context,get,environment,resolve,required,placeholders,location,set,resource,actual,resources,new,linked,hash,set,4,boolean,absolute,location,false,try,absolute,location,resource,pattern,utils,is,url,location,resource,utils,to,uri,location,is,absolute,catch,urisyntax,exception,ex,if,absolute,location,try,int,import,count,get,reader,context,get,reader,load,bean,definitions,location,actual,resources,if,logger,is,debug,enabled,logger,debug,imported,import,count,bean,definitions,from,url,location,location,catch,bean,definition,store,exception,ex,get,reader,context,error,failed,to,import,bean,definitions,from,url,location,location,ele,ex,else,try,int,import,count,resource,relative,resource,get,reader,context,get,resource,create,relative,location,if,relative,resource,exists,import,count,get,reader,context,get,reader,load,bean,definitions,relative,resource,actual,resources,add,relative,resource,else,string,base,location,get,reader,context,get,resource,get,url,to,string,import,count,get,reader,context,get,reader,load,bean,definitions,string,utils,apply,relative,path,base,location,location,actual,resources,if,logger,is,debug,enabled,logger,debug,imported,import,count,bean,definitions,from,relative,location,location,catch,ioexception,ex,get,reader,context,error,failed,to,resolve,current,resource,location,ele,ex,catch,bean,definition,store,exception,ex,get,reader,context,error,failed,to,import,bean,definitions,from,relative,location,location,ele,ex,resource,act,res,array,actual,resources,to,array,new,resource,0,get,reader,context,fire,import,processed,location,act,res,array,extract,source,ele
DefaultBeanDefinitionDocumentReader -> protected void importBeanDefinitionResource(Element ele);1529093363;Parse an "import" element and load the bean definitions_from the given resource into the bean factory.;protected void importBeanDefinitionResource(Element ele) {_		String location = ele.getAttribute(RESOURCE_ATTRIBUTE)__		if (!StringUtils.hasText(location)) {_			getReaderContext().error("Resource location must not be empty", ele)__			return__		}__		_		location = getReaderContext().getEnvironment().resolveRequiredPlaceholders(location)___		Set<Resource> actualResources = new LinkedHashSet<>(4)___		_		boolean absoluteLocation = false__		try {_			absoluteLocation = ResourcePatternUtils.isUrl(location) || ResourceUtils.toURI(location).isAbsolute()__		}_		catch (URISyntaxException ex) {_			_			_		}__		_		if (absoluteLocation) {_			try {_				int importCount = getReaderContext().getReader().loadBeanDefinitions(location, actualResources)__				if (logger.isDebugEnabled()) {_					logger.debug("Imported " + importCount + " bean definitions from URL location [" + location + "]")__				}_			}_			catch (BeanDefinitionStoreException ex) {_				getReaderContext().error(_						"Failed to import bean definitions from URL location [" + location + "]", ele, ex)__			}_		}_		else {_			_			try {_				int importCount__				Resource relativeResource = getReaderContext().getResource().createRelative(location)__				if (relativeResource.exists()) {_					importCount = getReaderContext().getReader().loadBeanDefinitions(relativeResource)__					actualResources.add(relativeResource)__				}_				else {_					String baseLocation = getReaderContext().getResource().getURL().toString()__					importCount = getReaderContext().getReader().loadBeanDefinitions(_							StringUtils.applyRelativePath(baseLocation, location), actualResources)__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Imported " + importCount + " bean definitions from relative location [" + location + "]")__				}_			}_			catch (IOException ex) {_				getReaderContext().error("Failed to resolve current resource location", ele, ex)__			}_			catch (BeanDefinitionStoreException ex) {_				getReaderContext().error("Failed to import bean definitions from relative location [" + location + "]",_						ele, ex)__			}_		}_		Resource[] actResArray = actualResources.toArray(new Resource[0])__		getReaderContext().fireImportProcessed(location, actResArray, extractSource(ele))__	};parse,an,import,element,and,load,the,bean,definitions,from,the,given,resource,into,the,bean,factory;protected,void,import,bean,definition,resource,element,ele,string,location,ele,get,attribute,if,string,utils,has,text,location,get,reader,context,error,resource,location,must,not,be,empty,ele,return,location,get,reader,context,get,environment,resolve,required,placeholders,location,set,resource,actual,resources,new,linked,hash,set,4,boolean,absolute,location,false,try,absolute,location,resource,pattern,utils,is,url,location,resource,utils,to,uri,location,is,absolute,catch,urisyntax,exception,ex,if,absolute,location,try,int,import,count,get,reader,context,get,reader,load,bean,definitions,location,actual,resources,if,logger,is,debug,enabled,logger,debug,imported,import,count,bean,definitions,from,url,location,location,catch,bean,definition,store,exception,ex,get,reader,context,error,failed,to,import,bean,definitions,from,url,location,location,ele,ex,else,try,int,import,count,resource,relative,resource,get,reader,context,get,resource,create,relative,location,if,relative,resource,exists,import,count,get,reader,context,get,reader,load,bean,definitions,relative,resource,actual,resources,add,relative,resource,else,string,base,location,get,reader,context,get,resource,get,url,to,string,import,count,get,reader,context,get,reader,load,bean,definitions,string,utils,apply,relative,path,base,location,location,actual,resources,if,logger,is,debug,enabled,logger,debug,imported,import,count,bean,definitions,from,relative,location,location,catch,ioexception,ex,get,reader,context,error,failed,to,resolve,current,resource,location,ele,ex,catch,bean,definition,store,exception,ex,get,reader,context,error,failed,to,import,bean,definitions,from,relative,location,location,ele,ex,resource,act,res,array,actual,resources,to,array,new,resource,0,get,reader,context,fire,import,processed,location,act,res,array,extract,source,ele
DefaultBeanDefinitionDocumentReader -> protected void importBeanDefinitionResource(Element ele);1529405413;Parse an "import" element and load the bean definitions_from the given resource into the bean factory.;protected void importBeanDefinitionResource(Element ele) {_		String location = ele.getAttribute(RESOURCE_ATTRIBUTE)__		if (!StringUtils.hasText(location)) {_			getReaderContext().error("Resource location must not be empty", ele)__			return__		}__		_		location = getReaderContext().getEnvironment().resolveRequiredPlaceholders(location)___		Set<Resource> actualResources = new LinkedHashSet<>(4)___		_		boolean absoluteLocation = false__		try {_			absoluteLocation = ResourcePatternUtils.isUrl(location) || ResourceUtils.toURI(location).isAbsolute()__		}_		catch (URISyntaxException ex) {_			_			_		}__		_		if (absoluteLocation) {_			try {_				int importCount = getReaderContext().getReader().loadBeanDefinitions(location, actualResources)__				if (logger.isDebugEnabled()) {_					logger.debug("Imported " + importCount + " bean definitions from URL location [" + location + "]")__				}_			}_			catch (BeanDefinitionStoreException ex) {_				getReaderContext().error(_						"Failed to import bean definitions from URL location [" + location + "]", ele, ex)__			}_		}_		else {_			_			try {_				int importCount__				Resource relativeResource = getReaderContext().getResource().createRelative(location)__				if (relativeResource.exists()) {_					importCount = getReaderContext().getReader().loadBeanDefinitions(relativeResource)__					actualResources.add(relativeResource)__				}_				else {_					String baseLocation = getReaderContext().getResource().getURL().toString()__					importCount = getReaderContext().getReader().loadBeanDefinitions(_							StringUtils.applyRelativePath(baseLocation, location), actualResources)__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Imported " + importCount + " bean definitions from relative location [" + location + "]")__				}_			}_			catch (IOException ex) {_				getReaderContext().error("Failed to resolve current resource location", ele, ex)__			}_			catch (BeanDefinitionStoreException ex) {_				getReaderContext().error("Failed to import bean definitions from relative location [" + location + "]",_						ele, ex)__			}_		}_		Resource[] actResArray = actualResources.toArray(new Resource[0])__		getReaderContext().fireImportProcessed(location, actResArray, extractSource(ele))__	};parse,an,import,element,and,load,the,bean,definitions,from,the,given,resource,into,the,bean,factory;protected,void,import,bean,definition,resource,element,ele,string,location,ele,get,attribute,if,string,utils,has,text,location,get,reader,context,error,resource,location,must,not,be,empty,ele,return,location,get,reader,context,get,environment,resolve,required,placeholders,location,set,resource,actual,resources,new,linked,hash,set,4,boolean,absolute,location,false,try,absolute,location,resource,pattern,utils,is,url,location,resource,utils,to,uri,location,is,absolute,catch,urisyntax,exception,ex,if,absolute,location,try,int,import,count,get,reader,context,get,reader,load,bean,definitions,location,actual,resources,if,logger,is,debug,enabled,logger,debug,imported,import,count,bean,definitions,from,url,location,location,catch,bean,definition,store,exception,ex,get,reader,context,error,failed,to,import,bean,definitions,from,url,location,location,ele,ex,else,try,int,import,count,resource,relative,resource,get,reader,context,get,resource,create,relative,location,if,relative,resource,exists,import,count,get,reader,context,get,reader,load,bean,definitions,relative,resource,actual,resources,add,relative,resource,else,string,base,location,get,reader,context,get,resource,get,url,to,string,import,count,get,reader,context,get,reader,load,bean,definitions,string,utils,apply,relative,path,base,location,location,actual,resources,if,logger,is,debug,enabled,logger,debug,imported,import,count,bean,definitions,from,relative,location,location,catch,ioexception,ex,get,reader,context,error,failed,to,resolve,current,resource,location,ele,ex,catch,bean,definition,store,exception,ex,get,reader,context,error,failed,to,import,bean,definitions,from,relative,location,location,ele,ex,resource,act,res,array,actual,resources,to,array,new,resource,0,get,reader,context,fire,import,processed,location,act,res,array,extract,source,ele
DefaultBeanDefinitionDocumentReader -> protected void importBeanDefinitionResource(Element ele);1532091916;Parse an "import" element and load the bean definitions_from the given resource into the bean factory.;protected void importBeanDefinitionResource(Element ele) {_		String location = ele.getAttribute(RESOURCE_ATTRIBUTE)__		if (!StringUtils.hasText(location)) {_			getReaderContext().error("Resource location must not be empty", ele)__			return__		}__		_		location = getReaderContext().getEnvironment().resolveRequiredPlaceholders(location)___		Set<Resource> actualResources = new LinkedHashSet<>(4)___		_		boolean absoluteLocation = false__		try {_			absoluteLocation = ResourcePatternUtils.isUrl(location) || ResourceUtils.toURI(location).isAbsolute()__		}_		catch (URISyntaxException ex) {_			_			_		}__		_		if (absoluteLocation) {_			try {_				int importCount = getReaderContext().getReader().loadBeanDefinitions(location, actualResources)__				if (logger.isDebugEnabled()) {_					logger.debug("Imported " + importCount + " bean definitions from URL location [" + location + "]")__				}_			}_			catch (BeanDefinitionStoreException ex) {_				getReaderContext().error(_						"Failed to import bean definitions from URL location [" + location + "]", ele, ex)__			}_		}_		else {_			_			try {_				int importCount__				Resource relativeResource = getReaderContext().getResource().createRelative(location)__				if (relativeResource.exists()) {_					importCount = getReaderContext().getReader().loadBeanDefinitions(relativeResource)__					actualResources.add(relativeResource)__				}_				else {_					String baseLocation = getReaderContext().getResource().getURL().toString()__					importCount = getReaderContext().getReader().loadBeanDefinitions(_							StringUtils.applyRelativePath(baseLocation, location), actualResources)__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Imported " + importCount + " bean definitions from relative location [" + location + "]")__				}_			}_			catch (IOException ex) {_				getReaderContext().error("Failed to resolve current resource location", ele, ex)__			}_			catch (BeanDefinitionStoreException ex) {_				getReaderContext().error("Failed to import bean definitions from relative location [" + location + "]",_						ele, ex)__			}_		}_		Resource[] actResArray = actualResources.toArray(new Resource[0])__		getReaderContext().fireImportProcessed(location, actResArray, extractSource(ele))__	};parse,an,import,element,and,load,the,bean,definitions,from,the,given,resource,into,the,bean,factory;protected,void,import,bean,definition,resource,element,ele,string,location,ele,get,attribute,if,string,utils,has,text,location,get,reader,context,error,resource,location,must,not,be,empty,ele,return,location,get,reader,context,get,environment,resolve,required,placeholders,location,set,resource,actual,resources,new,linked,hash,set,4,boolean,absolute,location,false,try,absolute,location,resource,pattern,utils,is,url,location,resource,utils,to,uri,location,is,absolute,catch,urisyntax,exception,ex,if,absolute,location,try,int,import,count,get,reader,context,get,reader,load,bean,definitions,location,actual,resources,if,logger,is,debug,enabled,logger,debug,imported,import,count,bean,definitions,from,url,location,location,catch,bean,definition,store,exception,ex,get,reader,context,error,failed,to,import,bean,definitions,from,url,location,location,ele,ex,else,try,int,import,count,resource,relative,resource,get,reader,context,get,resource,create,relative,location,if,relative,resource,exists,import,count,get,reader,context,get,reader,load,bean,definitions,relative,resource,actual,resources,add,relative,resource,else,string,base,location,get,reader,context,get,resource,get,url,to,string,import,count,get,reader,context,get,reader,load,bean,definitions,string,utils,apply,relative,path,base,location,location,actual,resources,if,logger,is,debug,enabled,logger,debug,imported,import,count,bean,definitions,from,relative,location,location,catch,ioexception,ex,get,reader,context,error,failed,to,resolve,current,resource,location,ele,ex,catch,bean,definition,store,exception,ex,get,reader,context,error,failed,to,import,bean,definitions,from,relative,location,location,ele,ex,resource,act,res,array,actual,resources,to,array,new,resource,0,get,reader,context,fire,import,processed,location,act,res,array,extract,source,ele
DefaultBeanDefinitionDocumentReader -> protected void importBeanDefinitionResource(Element ele);1532706365;Parse an "import" element and load the bean definitions_from the given resource into the bean factory.;protected void importBeanDefinitionResource(Element ele) {_		String location = ele.getAttribute(RESOURCE_ATTRIBUTE)__		if (!StringUtils.hasText(location)) {_			getReaderContext().error("Resource location must not be empty", ele)__			return__		}__		_		location = getReaderContext().getEnvironment().resolveRequiredPlaceholders(location)___		Set<Resource> actualResources = new LinkedHashSet<>(4)___		_		boolean absoluteLocation = false__		try {_			absoluteLocation = ResourcePatternUtils.isUrl(location) || ResourceUtils.toURI(location).isAbsolute()__		}_		catch (URISyntaxException ex) {_			_			_		}__		_		if (absoluteLocation) {_			try {_				int importCount = getReaderContext().getReader().loadBeanDefinitions(location, actualResources)__				if (logger.isTraceEnabled()) {_					logger.trace("Imported " + importCount + " bean definitions from URL location [" + location + "]")__				}_			}_			catch (BeanDefinitionStoreException ex) {_				getReaderContext().error(_						"Failed to import bean definitions from URL location [" + location + "]", ele, ex)__			}_		}_		else {_			_			try {_				int importCount__				Resource relativeResource = getReaderContext().getResource().createRelative(location)__				if (relativeResource.exists()) {_					importCount = getReaderContext().getReader().loadBeanDefinitions(relativeResource)__					actualResources.add(relativeResource)__				}_				else {_					String baseLocation = getReaderContext().getResource().getURL().toString()__					importCount = getReaderContext().getReader().loadBeanDefinitions(_							StringUtils.applyRelativePath(baseLocation, location), actualResources)__				}_				if (logger.isTraceEnabled()) {_					logger.trace("Imported " + importCount + " bean definitions from relative location [" + location + "]")__				}_			}_			catch (IOException ex) {_				getReaderContext().error("Failed to resolve current resource location", ele, ex)__			}_			catch (BeanDefinitionStoreException ex) {_				getReaderContext().error(_						"Failed to import bean definitions from relative location [" + location + "]", ele, ex)__			}_		}_		Resource[] actResArray = actualResources.toArray(new Resource[0])__		getReaderContext().fireImportProcessed(location, actResArray, extractSource(ele))__	};parse,an,import,element,and,load,the,bean,definitions,from,the,given,resource,into,the,bean,factory;protected,void,import,bean,definition,resource,element,ele,string,location,ele,get,attribute,if,string,utils,has,text,location,get,reader,context,error,resource,location,must,not,be,empty,ele,return,location,get,reader,context,get,environment,resolve,required,placeholders,location,set,resource,actual,resources,new,linked,hash,set,4,boolean,absolute,location,false,try,absolute,location,resource,pattern,utils,is,url,location,resource,utils,to,uri,location,is,absolute,catch,urisyntax,exception,ex,if,absolute,location,try,int,import,count,get,reader,context,get,reader,load,bean,definitions,location,actual,resources,if,logger,is,trace,enabled,logger,trace,imported,import,count,bean,definitions,from,url,location,location,catch,bean,definition,store,exception,ex,get,reader,context,error,failed,to,import,bean,definitions,from,url,location,location,ele,ex,else,try,int,import,count,resource,relative,resource,get,reader,context,get,resource,create,relative,location,if,relative,resource,exists,import,count,get,reader,context,get,reader,load,bean,definitions,relative,resource,actual,resources,add,relative,resource,else,string,base,location,get,reader,context,get,resource,get,url,to,string,import,count,get,reader,context,get,reader,load,bean,definitions,string,utils,apply,relative,path,base,location,location,actual,resources,if,logger,is,trace,enabled,logger,trace,imported,import,count,bean,definitions,from,relative,location,location,catch,ioexception,ex,get,reader,context,error,failed,to,resolve,current,resource,location,ele,ex,catch,bean,definition,store,exception,ex,get,reader,context,error,failed,to,import,bean,definitions,from,relative,location,location,ele,ex,resource,act,res,array,actual,resources,to,array,new,resource,0,get,reader,context,fire,import,processed,location,act,res,array,extract,source,ele
