# id;timestamp;commentText;codeText;commentWords;codeWords
FactoryBean -> default boolean isSingleton();1467810608;Is the object managed by this factory a singleton? That is,_will {@link #getObject()} always return the same object_(a reference that can be cached)?_<p><b>NOTE:</b> If a FactoryBean indicates to hold a singleton object,_the object returned from {@code getObject()} might get cached_by the owning BeanFactory. Hence, do not return {@code true}_unless the FactoryBean always exposes the same reference._<p>The singleton status of the FactoryBean itself will generally_be provided by the owning BeanFactory_ usually, it has to be_defined as singleton there._<p><b>NOTE:</b> This method returning {@code false} does not_necessarily indicate that returned objects are independent instances._An implementation of the extended {@link SmartFactoryBean} interface_may explicitly indicate independent instances through its_{@link SmartFactoryBean#isPrototype()} method. Plain {@link FactoryBean}_implementations which do not implement this extended interface are_simply assumed to always return independent instances if the_{@code isSingleton()} implementation returns {@code false}._<p>The default implementation returns {@code true}, since a_{@code FactoryBean} typically manages a singleton instance._@return whether the exposed object is a singleton_@see #getObject()_@see SmartFactoryBean#isPrototype();default boolean isSingleton() {_		return true__	};is,the,object,managed,by,this,factory,a,singleton,that,is,will,link,get,object,always,return,the,same,object,a,reference,that,can,be,cached,p,b,note,b,if,a,factory,bean,indicates,to,hold,a,singleton,object,the,object,returned,from,code,get,object,might,get,cached,by,the,owning,bean,factory,hence,do,not,return,code,true,unless,the,factory,bean,always,exposes,the,same,reference,p,the,singleton,status,of,the,factory,bean,itself,will,generally,be,provided,by,the,owning,bean,factory,usually,it,has,to,be,defined,as,singleton,there,p,b,note,b,this,method,returning,code,false,does,not,necessarily,indicate,that,returned,objects,are,independent,instances,an,implementation,of,the,extended,link,smart,factory,bean,interface,may,explicitly,indicate,independent,instances,through,its,link,smart,factory,bean,is,prototype,method,plain,link,factory,bean,implementations,which,do,not,implement,this,extended,interface,are,simply,assumed,to,always,return,independent,instances,if,the,code,is,singleton,implementation,returns,code,false,p,the,default,implementation,returns,code,true,since,a,code,factory,bean,typically,manages,a,singleton,instance,return,whether,the,exposed,object,is,a,singleton,see,get,object,see,smart,factory,bean,is,prototype;default,boolean,is,singleton,return,true
FactoryBean -> default boolean isSingleton();1469442914;Is the object managed by this factory a singleton? That is,_will {@link #getObject()} always return the same object_(a reference that can be cached)?_<p><b>NOTE:</b> If a FactoryBean indicates to hold a singleton object,_the object returned from {@code getObject()} might get cached_by the owning BeanFactory. Hence, do not return {@code true}_unless the FactoryBean always exposes the same reference._<p>The singleton status of the FactoryBean itself will generally_be provided by the owning BeanFactory_ usually, it has to be_defined as singleton there._<p><b>NOTE:</b> This method returning {@code false} does not_necessarily indicate that returned objects are independent instances._An implementation of the extended {@link SmartFactoryBean} interface_may explicitly indicate independent instances through its_{@link SmartFactoryBean#isPrototype()} method. Plain {@link FactoryBean}_implementations which do not implement this extended interface are_simply assumed to always return independent instances if the_{@code isSingleton()} implementation returns {@code false}._<p>The default implementation returns {@code true}, since a_{@code FactoryBean} typically manages a singleton instance._@return whether the exposed object is a singleton_@see #getObject()_@see SmartFactoryBean#isPrototype();default boolean isSingleton() {_		return true__	};is,the,object,managed,by,this,factory,a,singleton,that,is,will,link,get,object,always,return,the,same,object,a,reference,that,can,be,cached,p,b,note,b,if,a,factory,bean,indicates,to,hold,a,singleton,object,the,object,returned,from,code,get,object,might,get,cached,by,the,owning,bean,factory,hence,do,not,return,code,true,unless,the,factory,bean,always,exposes,the,same,reference,p,the,singleton,status,of,the,factory,bean,itself,will,generally,be,provided,by,the,owning,bean,factory,usually,it,has,to,be,defined,as,singleton,there,p,b,note,b,this,method,returning,code,false,does,not,necessarily,indicate,that,returned,objects,are,independent,instances,an,implementation,of,the,extended,link,smart,factory,bean,interface,may,explicitly,indicate,independent,instances,through,its,link,smart,factory,bean,is,prototype,method,plain,link,factory,bean,implementations,which,do,not,implement,this,extended,interface,are,simply,assumed,to,always,return,independent,instances,if,the,code,is,singleton,implementation,returns,code,false,p,the,default,implementation,returns,code,true,since,a,code,factory,bean,typically,manages,a,singleton,instance,return,whether,the,exposed,object,is,a,singleton,see,get,object,see,smart,factory,bean,is,prototype;default,boolean,is,singleton,return,true
FactoryBean -> default boolean isSingleton();1482746270;Is the object managed by this factory a singleton? That is,_will {@link #getObject()} always return the same object_(a reference that can be cached)?_<p><b>NOTE:</b> If a FactoryBean indicates to hold a singleton object,_the object returned from {@code getObject()} might get cached_by the owning BeanFactory. Hence, do not return {@code true}_unless the FactoryBean always exposes the same reference._<p>The singleton status of the FactoryBean itself will generally_be provided by the owning BeanFactory_ usually, it has to be_defined as singleton there._<p><b>NOTE:</b> This method returning {@code false} does not_necessarily indicate that returned objects are independent instances._An implementation of the extended {@link SmartFactoryBean} interface_may explicitly indicate independent instances through its_{@link SmartFactoryBean#isPrototype()} method. Plain {@link FactoryBean}_implementations which do not implement this extended interface are_simply assumed to always return independent instances if the_{@code isSingleton()} implementation returns {@code false}._<p>The default implementation returns {@code true}, since a_{@code FactoryBean} typically manages a singleton instance._@return whether the exposed object is a singleton_@see #getObject()_@see SmartFactoryBean#isPrototype();default boolean isSingleton() {_		return true__	};is,the,object,managed,by,this,factory,a,singleton,that,is,will,link,get,object,always,return,the,same,object,a,reference,that,can,be,cached,p,b,note,b,if,a,factory,bean,indicates,to,hold,a,singleton,object,the,object,returned,from,code,get,object,might,get,cached,by,the,owning,bean,factory,hence,do,not,return,code,true,unless,the,factory,bean,always,exposes,the,same,reference,p,the,singleton,status,of,the,factory,bean,itself,will,generally,be,provided,by,the,owning,bean,factory,usually,it,has,to,be,defined,as,singleton,there,p,b,note,b,this,method,returning,code,false,does,not,necessarily,indicate,that,returned,objects,are,independent,instances,an,implementation,of,the,extended,link,smart,factory,bean,interface,may,explicitly,indicate,independent,instances,through,its,link,smart,factory,bean,is,prototype,method,plain,link,factory,bean,implementations,which,do,not,implement,this,extended,interface,are,simply,assumed,to,always,return,independent,instances,if,the,code,is,singleton,implementation,returns,code,false,p,the,default,implementation,returns,code,true,since,a,code,factory,bean,typically,manages,a,singleton,instance,return,whether,the,exposed,object,is,a,singleton,see,get,object,see,smart,factory,bean,is,prototype;default,boolean,is,singleton,return,true
FactoryBean -> default boolean isSingleton();1495868221;Is the object managed by this factory a singleton? That is,_will {@link #getObject()} always return the same object_(a reference that can be cached)?_<p><b>NOTE:</b> If a FactoryBean indicates to hold a singleton object,_the object returned from {@code getObject()} might get cached_by the owning BeanFactory. Hence, do not return {@code true}_unless the FactoryBean always exposes the same reference._<p>The singleton status of the FactoryBean itself will generally_be provided by the owning BeanFactory_ usually, it has to be_defined as singleton there._<p><b>NOTE:</b> This method returning {@code false} does not_necessarily indicate that returned objects are independent instances._An implementation of the extended {@link SmartFactoryBean} interface_may explicitly indicate independent instances through its_{@link SmartFactoryBean#isPrototype()} method. Plain {@link FactoryBean}_implementations which do not implement this extended interface are_simply assumed to always return independent instances if the_{@code isSingleton()} implementation returns {@code false}._<p>The default implementation returns {@code true}, since a_{@code FactoryBean} typically manages a singleton instance._@return whether the exposed object is a singleton_@see #getObject()_@see SmartFactoryBean#isPrototype();default boolean isSingleton() {_		return true__	};is,the,object,managed,by,this,factory,a,singleton,that,is,will,link,get,object,always,return,the,same,object,a,reference,that,can,be,cached,p,b,note,b,if,a,factory,bean,indicates,to,hold,a,singleton,object,the,object,returned,from,code,get,object,might,get,cached,by,the,owning,bean,factory,hence,do,not,return,code,true,unless,the,factory,bean,always,exposes,the,same,reference,p,the,singleton,status,of,the,factory,bean,itself,will,generally,be,provided,by,the,owning,bean,factory,usually,it,has,to,be,defined,as,singleton,there,p,b,note,b,this,method,returning,code,false,does,not,necessarily,indicate,that,returned,objects,are,independent,instances,an,implementation,of,the,extended,link,smart,factory,bean,interface,may,explicitly,indicate,independent,instances,through,its,link,smart,factory,bean,is,prototype,method,plain,link,factory,bean,implementations,which,do,not,implement,this,extended,interface,are,simply,assumed,to,always,return,independent,instances,if,the,code,is,singleton,implementation,returns,code,false,p,the,default,implementation,returns,code,true,since,a,code,factory,bean,typically,manages,a,singleton,instance,return,whether,the,exposed,object,is,a,singleton,see,get,object,see,smart,factory,bean,is,prototype;default,boolean,is,singleton,return,true
FactoryBean -> default boolean isSingleton();1530174524;Is the object managed by this factory a singleton? That is,_will {@link #getObject()} always return the same object_(a reference that can be cached)?_<p><b>NOTE:</b> If a FactoryBean indicates to hold a singleton object,_the object returned from {@code getObject()} might get cached_by the owning BeanFactory. Hence, do not return {@code true}_unless the FactoryBean always exposes the same reference._<p>The singleton status of the FactoryBean itself will generally_be provided by the owning BeanFactory_ usually, it has to be_defined as singleton there._<p><b>NOTE:</b> This method returning {@code false} does not_necessarily indicate that returned objects are independent instances._An implementation of the extended {@link SmartFactoryBean} interface_may explicitly indicate independent instances through its_{@link SmartFactoryBean#isPrototype()} method. Plain {@link FactoryBean}_implementations which do not implement this extended interface are_simply assumed to always return independent instances if the_{@code isSingleton()} implementation returns {@code false}._<p>The default implementation returns {@code true}, since a_{@code FactoryBean} typically manages a singleton instance._@return whether the exposed object is a singleton_@see #getObject()_@see SmartFactoryBean#isPrototype();default boolean isSingleton() {_		return true__	};is,the,object,managed,by,this,factory,a,singleton,that,is,will,link,get,object,always,return,the,same,object,a,reference,that,can,be,cached,p,b,note,b,if,a,factory,bean,indicates,to,hold,a,singleton,object,the,object,returned,from,code,get,object,might,get,cached,by,the,owning,bean,factory,hence,do,not,return,code,true,unless,the,factory,bean,always,exposes,the,same,reference,p,the,singleton,status,of,the,factory,bean,itself,will,generally,be,provided,by,the,owning,bean,factory,usually,it,has,to,be,defined,as,singleton,there,p,b,note,b,this,method,returning,code,false,does,not,necessarily,indicate,that,returned,objects,are,independent,instances,an,implementation,of,the,extended,link,smart,factory,bean,interface,may,explicitly,indicate,independent,instances,through,its,link,smart,factory,bean,is,prototype,method,plain,link,factory,bean,implementations,which,do,not,implement,this,extended,interface,are,simply,assumed,to,always,return,independent,instances,if,the,code,is,singleton,implementation,returns,code,false,p,the,default,implementation,returns,code,true,since,a,code,factory,bean,typically,manages,a,singleton,instance,return,whether,the,exposed,object,is,a,singleton,see,get,object,see,smart,factory,bean,is,prototype;default,boolean,is,singleton,return,true
FactoryBean -> boolean isSingleton()_;1328020251;Is the object managed by this factory a singleton? That is,_will {@link #getObject()} always return the same object_(a reference that can be cached)?_<p><b>NOTE:</b> If a FactoryBean indicates to hold a singleton object,_the object returned from <code>getObject()</code> might get cached_by the owning BeanFactory. Hence, do not return <code>true</code>_unless the FactoryBean always exposes the same reference._<p>The singleton status of the FactoryBean itself will generally_be provided by the owning BeanFactory_ usually, it has to be_defined as singleton there._<p><b>NOTE:</b> This method returning <code>false</code> does not_necessarily indicate that returned objects are independent instances._An implementation of the extended {@link SmartFactoryBean} interface_may explicitly indicate independent instances through its_{@link SmartFactoryBean#isPrototype()} method. Plain {@link FactoryBean}_implementations which do not implement this extended interface are_simply assumed to always return independent instances if the_<code>isSingleton()</code> implementation returns <code>false</code>._@return whether the exposed object is a singleton_@see #getObject()_@see SmartFactoryBean#isPrototype();boolean isSingleton()_;is,the,object,managed,by,this,factory,a,singleton,that,is,will,link,get,object,always,return,the,same,object,a,reference,that,can,be,cached,p,b,note,b,if,a,factory,bean,indicates,to,hold,a,singleton,object,the,object,returned,from,code,get,object,code,might,get,cached,by,the,owning,bean,factory,hence,do,not,return,code,true,code,unless,the,factory,bean,always,exposes,the,same,reference,p,the,singleton,status,of,the,factory,bean,itself,will,generally,be,provided,by,the,owning,bean,factory,usually,it,has,to,be,defined,as,singleton,there,p,b,note,b,this,method,returning,code,false,code,does,not,necessarily,indicate,that,returned,objects,are,independent,instances,an,implementation,of,the,extended,link,smart,factory,bean,interface,may,explicitly,indicate,independent,instances,through,its,link,smart,factory,bean,is,prototype,method,plain,link,factory,bean,implementations,which,do,not,implement,this,extended,interface,are,simply,assumed,to,always,return,independent,instances,if,the,code,is,singleton,code,implementation,returns,code,false,code,return,whether,the,exposed,object,is,a,singleton,see,get,object,see,smart,factory,bean,is,prototype;boolean,is,singleton
FactoryBean -> boolean isSingleton()_;1356735495;Is the object managed by this factory a singleton? That is,_will {@link #getObject()} always return the same object_(a reference that can be cached)?_<p><b>NOTE:</b> If a FactoryBean indicates to hold a singleton object,_the object returned from {@code getObject()} might get cached_by the owning BeanFactory. Hence, do not return {@code true}_unless the FactoryBean always exposes the same reference._<p>The singleton status of the FactoryBean itself will generally_be provided by the owning BeanFactory_ usually, it has to be_defined as singleton there._<p><b>NOTE:</b> This method returning {@code false} does not_necessarily indicate that returned objects are independent instances._An implementation of the extended {@link SmartFactoryBean} interface_may explicitly indicate independent instances through its_{@link SmartFactoryBean#isPrototype()} method. Plain {@link FactoryBean}_implementations which do not implement this extended interface are_simply assumed to always return independent instances if the_{@code isSingleton()} implementation returns {@code false}._@return whether the exposed object is a singleton_@see #getObject()_@see SmartFactoryBean#isPrototype();boolean isSingleton()_;is,the,object,managed,by,this,factory,a,singleton,that,is,will,link,get,object,always,return,the,same,object,a,reference,that,can,be,cached,p,b,note,b,if,a,factory,bean,indicates,to,hold,a,singleton,object,the,object,returned,from,code,get,object,might,get,cached,by,the,owning,bean,factory,hence,do,not,return,code,true,unless,the,factory,bean,always,exposes,the,same,reference,p,the,singleton,status,of,the,factory,bean,itself,will,generally,be,provided,by,the,owning,bean,factory,usually,it,has,to,be,defined,as,singleton,there,p,b,note,b,this,method,returning,code,false,does,not,necessarily,indicate,that,returned,objects,are,independent,instances,an,implementation,of,the,extended,link,smart,factory,bean,interface,may,explicitly,indicate,independent,instances,through,its,link,smart,factory,bean,is,prototype,method,plain,link,factory,bean,implementations,which,do,not,implement,this,extended,interface,are,simply,assumed,to,always,return,independent,instances,if,the,code,is,singleton,implementation,returns,code,false,return,whether,the,exposed,object,is,a,singleton,see,get,object,see,smart,factory,bean,is,prototype;boolean,is,singleton
FactoryBean -> T getObject() throws Exception_;1328020251;Return an instance (possibly shared or independent) of the object_managed by this factory._<p>As with a {@link BeanFactory}, this allows support for both the_Singleton and Prototype design pattern._<p>If this FactoryBean is not fully initialized yet at the time of_the call (for example because it is involved in a circular reference),_throw a corresponding {@link FactoryBeanNotInitializedException}._<p>As of Spring 2.0, FactoryBeans are allowed to return <code>null</code>_objects. The factory will consider this as normal value to be used_ it_will not throw a FactoryBeanNotInitializedException in this case anymore._FactoryBean implementations are encouraged to throw_FactoryBeanNotInitializedException themselves now, as appropriate._@return an instance of the bean (can be <code>null</code>)_@throws Exception in case of creation errors_@see FactoryBeanNotInitializedException;T getObject() throws Exception_;return,an,instance,possibly,shared,or,independent,of,the,object,managed,by,this,factory,p,as,with,a,link,bean,factory,this,allows,support,for,both,the,singleton,and,prototype,design,pattern,p,if,this,factory,bean,is,not,fully,initialized,yet,at,the,time,of,the,call,for,example,because,it,is,involved,in,a,circular,reference,throw,a,corresponding,link,factory,bean,not,initialized,exception,p,as,of,spring,2,0,factory,beans,are,allowed,to,return,code,null,code,objects,the,factory,will,consider,this,as,normal,value,to,be,used,it,will,not,throw,a,factory,bean,not,initialized,exception,in,this,case,anymore,factory,bean,implementations,are,encouraged,to,throw,factory,bean,not,initialized,exception,themselves,now,as,appropriate,return,an,instance,of,the,bean,can,be,code,null,code,throws,exception,in,case,of,creation,errors,see,factory,bean,not,initialized,exception;t,get,object,throws,exception
FactoryBean -> T getObject() throws Exception_;1356735495;Return an instance (possibly shared or independent) of the object_managed by this factory._<p>As with a {@link BeanFactory}, this allows support for both the_Singleton and Prototype design pattern._<p>If this FactoryBean is not fully initialized yet at the time of_the call (for example because it is involved in a circular reference),_throw a corresponding {@link FactoryBeanNotInitializedException}._<p>As of Spring 2.0, FactoryBeans are allowed to return {@code null}_objects. The factory will consider this as normal value to be used_ it_will not throw a FactoryBeanNotInitializedException in this case anymore._FactoryBean implementations are encouraged to throw_FactoryBeanNotInitializedException themselves now, as appropriate._@return an instance of the bean (can be {@code null})_@throws Exception in case of creation errors_@see FactoryBeanNotInitializedException;T getObject() throws Exception_;return,an,instance,possibly,shared,or,independent,of,the,object,managed,by,this,factory,p,as,with,a,link,bean,factory,this,allows,support,for,both,the,singleton,and,prototype,design,pattern,p,if,this,factory,bean,is,not,fully,initialized,yet,at,the,time,of,the,call,for,example,because,it,is,involved,in,a,circular,reference,throw,a,corresponding,link,factory,bean,not,initialized,exception,p,as,of,spring,2,0,factory,beans,are,allowed,to,return,code,null,objects,the,factory,will,consider,this,as,normal,value,to,be,used,it,will,not,throw,a,factory,bean,not,initialized,exception,in,this,case,anymore,factory,bean,implementations,are,encouraged,to,throw,factory,bean,not,initialized,exception,themselves,now,as,appropriate,return,an,instance,of,the,bean,can,be,code,null,throws,exception,in,case,of,creation,errors,see,factory,bean,not,initialized,exception;t,get,object,throws,exception
FactoryBean -> T getObject() throws Exception_;1467810608;Return an instance (possibly shared or independent) of the object_managed by this factory._<p>As with a {@link BeanFactory}, this allows support for both the_Singleton and Prototype design pattern._<p>If this FactoryBean is not fully initialized yet at the time of_the call (for example because it is involved in a circular reference),_throw a corresponding {@link FactoryBeanNotInitializedException}._<p>As of Spring 2.0, FactoryBeans are allowed to return {@code null}_objects. The factory will consider this as normal value to be used_ it_will not throw a FactoryBeanNotInitializedException in this case anymore._FactoryBean implementations are encouraged to throw_FactoryBeanNotInitializedException themselves now, as appropriate._@return an instance of the bean (can be {@code null})_@throws Exception in case of creation errors_@see FactoryBeanNotInitializedException;T getObject() throws Exception_;return,an,instance,possibly,shared,or,independent,of,the,object,managed,by,this,factory,p,as,with,a,link,bean,factory,this,allows,support,for,both,the,singleton,and,prototype,design,pattern,p,if,this,factory,bean,is,not,fully,initialized,yet,at,the,time,of,the,call,for,example,because,it,is,involved,in,a,circular,reference,throw,a,corresponding,link,factory,bean,not,initialized,exception,p,as,of,spring,2,0,factory,beans,are,allowed,to,return,code,null,objects,the,factory,will,consider,this,as,normal,value,to,be,used,it,will,not,throw,a,factory,bean,not,initialized,exception,in,this,case,anymore,factory,bean,implementations,are,encouraged,to,throw,factory,bean,not,initialized,exception,themselves,now,as,appropriate,return,an,instance,of,the,bean,can,be,code,null,throws,exception,in,case,of,creation,errors,see,factory,bean,not,initialized,exception;t,get,object,throws,exception
FactoryBean -> T getObject() throws Exception_;1469442914;Return an instance (possibly shared or independent) of the object_managed by this factory._<p>As with a {@link BeanFactory}, this allows support for both the_Singleton and Prototype design pattern._<p>If this FactoryBean is not fully initialized yet at the time of_the call (for example because it is involved in a circular reference),_throw a corresponding {@link FactoryBeanNotInitializedException}._<p>As of Spring 2.0, FactoryBeans are allowed to return {@code null}_objects. The factory will consider this as normal value to be used_ it_will not throw a FactoryBeanNotInitializedException in this case anymore._FactoryBean implementations are encouraged to throw_FactoryBeanNotInitializedException themselves now, as appropriate._@return an instance of the bean (can be {@code null})_@throws Exception in case of creation errors_@see FactoryBeanNotInitializedException;T getObject() throws Exception_;return,an,instance,possibly,shared,or,independent,of,the,object,managed,by,this,factory,p,as,with,a,link,bean,factory,this,allows,support,for,both,the,singleton,and,prototype,design,pattern,p,if,this,factory,bean,is,not,fully,initialized,yet,at,the,time,of,the,call,for,example,because,it,is,involved,in,a,circular,reference,throw,a,corresponding,link,factory,bean,not,initialized,exception,p,as,of,spring,2,0,factory,beans,are,allowed,to,return,code,null,objects,the,factory,will,consider,this,as,normal,value,to,be,used,it,will,not,throw,a,factory,bean,not,initialized,exception,in,this,case,anymore,factory,bean,implementations,are,encouraged,to,throw,factory,bean,not,initialized,exception,themselves,now,as,appropriate,return,an,instance,of,the,bean,can,be,code,null,throws,exception,in,case,of,creation,errors,see,factory,bean,not,initialized,exception;t,get,object,throws,exception
FactoryBean -> T getObject() throws Exception_;1482746270;Return an instance (possibly shared or independent) of the object_managed by this factory._<p>As with a {@link BeanFactory}, this allows support for both the_Singleton and Prototype design pattern._<p>If this FactoryBean is not fully initialized yet at the time of_the call (for example because it is involved in a circular reference),_throw a corresponding {@link FactoryBeanNotInitializedException}._<p>As of Spring 2.0, FactoryBeans are allowed to return {@code null}_objects. The factory will consider this as normal value to be used_ it_will not throw a FactoryBeanNotInitializedException in this case anymore._FactoryBean implementations are encouraged to throw_FactoryBeanNotInitializedException themselves now, as appropriate._@return an instance of the bean (can be {@code null})_@throws Exception in case of creation errors_@see FactoryBeanNotInitializedException;T getObject() throws Exception_;return,an,instance,possibly,shared,or,independent,of,the,object,managed,by,this,factory,p,as,with,a,link,bean,factory,this,allows,support,for,both,the,singleton,and,prototype,design,pattern,p,if,this,factory,bean,is,not,fully,initialized,yet,at,the,time,of,the,call,for,example,because,it,is,involved,in,a,circular,reference,throw,a,corresponding,link,factory,bean,not,initialized,exception,p,as,of,spring,2,0,factory,beans,are,allowed,to,return,code,null,objects,the,factory,will,consider,this,as,normal,value,to,be,used,it,will,not,throw,a,factory,bean,not,initialized,exception,in,this,case,anymore,factory,bean,implementations,are,encouraged,to,throw,factory,bean,not,initialized,exception,themselves,now,as,appropriate,return,an,instance,of,the,bean,can,be,code,null,throws,exception,in,case,of,creation,errors,see,factory,bean,not,initialized,exception;t,get,object,throws,exception
FactoryBean -> Class<?> getObjectType()_;1328020251;Return the type of object that this FactoryBean creates,_or <code>null</code> if not known in advance._<p>This allows one to check for specific types of beans without_instantiating objects, for example on autowiring._<p>In the case of implementations that are creating a singleton object,_this method should try to avoid singleton creation as far as possible__it should rather estimate the type in advance._For prototypes, returning a meaningful type here is advisable too._<p>This method can be called <i>before</i> this FactoryBean has_been fully initialized. It must not rely on state created during_initialization_ of course, it can still use such state if available._<p><b>NOTE:</b> Autowiring will simply ignore FactoryBeans that return_<code>null</code> here. Therefore it is highly recommended to implement_this method properly, using the current state of the FactoryBean._@return the type of object that this FactoryBean creates,_or <code>null</code> if not known at the time of the call_@see ListableBeanFactory#getBeansOfType;Class<?> getObjectType()_;return,the,type,of,object,that,this,factory,bean,creates,or,code,null,code,if,not,known,in,advance,p,this,allows,one,to,check,for,specific,types,of,beans,without,instantiating,objects,for,example,on,autowiring,p,in,the,case,of,implementations,that,are,creating,a,singleton,object,this,method,should,try,to,avoid,singleton,creation,as,far,as,possible,it,should,rather,estimate,the,type,in,advance,for,prototypes,returning,a,meaningful,type,here,is,advisable,too,p,this,method,can,be,called,i,before,i,this,factory,bean,has,been,fully,initialized,it,must,not,rely,on,state,created,during,initialization,of,course,it,can,still,use,such,state,if,available,p,b,note,b,autowiring,will,simply,ignore,factory,beans,that,return,code,null,code,here,therefore,it,is,highly,recommended,to,implement,this,method,properly,using,the,current,state,of,the,factory,bean,return,the,type,of,object,that,this,factory,bean,creates,or,code,null,code,if,not,known,at,the,time,of,the,call,see,listable,bean,factory,get,beans,of,type;class,get,object,type
FactoryBean -> Class<?> getObjectType()_;1356735495;Return the type of object that this FactoryBean creates,_or {@code null} if not known in advance._<p>This allows one to check for specific types of beans without_instantiating objects, for example on autowiring._<p>In the case of implementations that are creating a singleton object,_this method should try to avoid singleton creation as far as possible__it should rather estimate the type in advance._For prototypes, returning a meaningful type here is advisable too._<p>This method can be called <i>before</i> this FactoryBean has_been fully initialized. It must not rely on state created during_initialization_ of course, it can still use such state if available._<p><b>NOTE:</b> Autowiring will simply ignore FactoryBeans that return_{@code null} here. Therefore it is highly recommended to implement_this method properly, using the current state of the FactoryBean._@return the type of object that this FactoryBean creates,_or {@code null} if not known at the time of the call_@see ListableBeanFactory#getBeansOfType;Class<?> getObjectType()_;return,the,type,of,object,that,this,factory,bean,creates,or,code,null,if,not,known,in,advance,p,this,allows,one,to,check,for,specific,types,of,beans,without,instantiating,objects,for,example,on,autowiring,p,in,the,case,of,implementations,that,are,creating,a,singleton,object,this,method,should,try,to,avoid,singleton,creation,as,far,as,possible,it,should,rather,estimate,the,type,in,advance,for,prototypes,returning,a,meaningful,type,here,is,advisable,too,p,this,method,can,be,called,i,before,i,this,factory,bean,has,been,fully,initialized,it,must,not,rely,on,state,created,during,initialization,of,course,it,can,still,use,such,state,if,available,p,b,note,b,autowiring,will,simply,ignore,factory,beans,that,return,code,null,here,therefore,it,is,highly,recommended,to,implement,this,method,properly,using,the,current,state,of,the,factory,bean,return,the,type,of,object,that,this,factory,bean,creates,or,code,null,if,not,known,at,the,time,of,the,call,see,listable,bean,factory,get,beans,of,type;class,get,object,type
FactoryBean -> Class<?> getObjectType()_;1467810608;Return the type of object that this FactoryBean creates,_or {@code null} if not known in advance._<p>This allows one to check for specific types of beans without_instantiating objects, for example on autowiring._<p>In the case of implementations that are creating a singleton object,_this method should try to avoid singleton creation as far as possible__it should rather estimate the type in advance._For prototypes, returning a meaningful type here is advisable too._<p>This method can be called <i>before</i> this FactoryBean has_been fully initialized. It must not rely on state created during_initialization_ of course, it can still use such state if available._<p><b>NOTE:</b> Autowiring will simply ignore FactoryBeans that return_{@code null} here. Therefore it is highly recommended to implement_this method properly, using the current state of the FactoryBean._@return the type of object that this FactoryBean creates,_or {@code null} if not known at the time of the call_@see ListableBeanFactory#getBeansOfType;Class<?> getObjectType()_;return,the,type,of,object,that,this,factory,bean,creates,or,code,null,if,not,known,in,advance,p,this,allows,one,to,check,for,specific,types,of,beans,without,instantiating,objects,for,example,on,autowiring,p,in,the,case,of,implementations,that,are,creating,a,singleton,object,this,method,should,try,to,avoid,singleton,creation,as,far,as,possible,it,should,rather,estimate,the,type,in,advance,for,prototypes,returning,a,meaningful,type,here,is,advisable,too,p,this,method,can,be,called,i,before,i,this,factory,bean,has,been,fully,initialized,it,must,not,rely,on,state,created,during,initialization,of,course,it,can,still,use,such,state,if,available,p,b,note,b,autowiring,will,simply,ignore,factory,beans,that,return,code,null,here,therefore,it,is,highly,recommended,to,implement,this,method,properly,using,the,current,state,of,the,factory,bean,return,the,type,of,object,that,this,factory,bean,creates,or,code,null,if,not,known,at,the,time,of,the,call,see,listable,bean,factory,get,beans,of,type;class,get,object,type
FactoryBean -> Class<?> getObjectType()_;1469442914;Return the type of object that this FactoryBean creates,_or {@code null} if not known in advance._<p>This allows one to check for specific types of beans without_instantiating objects, for example on autowiring._<p>In the case of implementations that are creating a singleton object,_this method should try to avoid singleton creation as far as possible__it should rather estimate the type in advance._For prototypes, returning a meaningful type here is advisable too._<p>This method can be called <i>before</i> this FactoryBean has_been fully initialized. It must not rely on state created during_initialization_ of course, it can still use such state if available._<p><b>NOTE:</b> Autowiring will simply ignore FactoryBeans that return_{@code null} here. Therefore it is highly recommended to implement_this method properly, using the current state of the FactoryBean._@return the type of object that this FactoryBean creates,_or {@code null} if not known at the time of the call_@see ListableBeanFactory#getBeansOfType;Class<?> getObjectType()_;return,the,type,of,object,that,this,factory,bean,creates,or,code,null,if,not,known,in,advance,p,this,allows,one,to,check,for,specific,types,of,beans,without,instantiating,objects,for,example,on,autowiring,p,in,the,case,of,implementations,that,are,creating,a,singleton,object,this,method,should,try,to,avoid,singleton,creation,as,far,as,possible,it,should,rather,estimate,the,type,in,advance,for,prototypes,returning,a,meaningful,type,here,is,advisable,too,p,this,method,can,be,called,i,before,i,this,factory,bean,has,been,fully,initialized,it,must,not,rely,on,state,created,during,initialization,of,course,it,can,still,use,such,state,if,available,p,b,note,b,autowiring,will,simply,ignore,factory,beans,that,return,code,null,here,therefore,it,is,highly,recommended,to,implement,this,method,properly,using,the,current,state,of,the,factory,bean,return,the,type,of,object,that,this,factory,bean,creates,or,code,null,if,not,known,at,the,time,of,the,call,see,listable,bean,factory,get,beans,of,type;class,get,object,type
FactoryBean -> Class<?> getObjectType()_;1482746270;Return the type of object that this FactoryBean creates,_or {@code null} if not known in advance._<p>This allows one to check for specific types of beans without_instantiating objects, for example on autowiring._<p>In the case of implementations that are creating a singleton object,_this method should try to avoid singleton creation as far as possible__it should rather estimate the type in advance._For prototypes, returning a meaningful type here is advisable too._<p>This method can be called <i>before</i> this FactoryBean has_been fully initialized. It must not rely on state created during_initialization_ of course, it can still use such state if available._<p><b>NOTE:</b> Autowiring will simply ignore FactoryBeans that return_{@code null} here. Therefore it is highly recommended to implement_this method properly, using the current state of the FactoryBean._@return the type of object that this FactoryBean creates,_or {@code null} if not known at the time of the call_@see ListableBeanFactory#getBeansOfType;Class<?> getObjectType()_;return,the,type,of,object,that,this,factory,bean,creates,or,code,null,if,not,known,in,advance,p,this,allows,one,to,check,for,specific,types,of,beans,without,instantiating,objects,for,example,on,autowiring,p,in,the,case,of,implementations,that,are,creating,a,singleton,object,this,method,should,try,to,avoid,singleton,creation,as,far,as,possible,it,should,rather,estimate,the,type,in,advance,for,prototypes,returning,a,meaningful,type,here,is,advisable,too,p,this,method,can,be,called,i,before,i,this,factory,bean,has,been,fully,initialized,it,must,not,rely,on,state,created,during,initialization,of,course,it,can,still,use,such,state,if,available,p,b,note,b,autowiring,will,simply,ignore,factory,beans,that,return,code,null,here,therefore,it,is,highly,recommended,to,implement,this,method,properly,using,the,current,state,of,the,factory,bean,return,the,type,of,object,that,this,factory,bean,creates,or,code,null,if,not,known,at,the,time,of,the,call,see,listable,bean,factory,get,beans,of,type;class,get,object,type
FactoryBean -> @Nullable 	Class<?> getObjectType()_;1495868221;Return the type of object that this FactoryBean creates,_or {@code null} if not known in advance._<p>This allows one to check for specific types of beans without_instantiating objects, for example on autowiring._<p>In the case of implementations that are creating a singleton object,_this method should try to avoid singleton creation as far as possible__it should rather estimate the type in advance._For prototypes, returning a meaningful type here is advisable too._<p>This method can be called <i>before</i> this FactoryBean has_been fully initialized. It must not rely on state created during_initialization_ of course, it can still use such state if available._<p><b>NOTE:</b> Autowiring will simply ignore FactoryBeans that return_{@code null} here. Therefore it is highly recommended to implement_this method properly, using the current state of the FactoryBean._@return the type of object that this FactoryBean creates,_or {@code null} if not known at the time of the call_@see ListableBeanFactory#getBeansOfType;@Nullable_	Class<?> getObjectType()_;return,the,type,of,object,that,this,factory,bean,creates,or,code,null,if,not,known,in,advance,p,this,allows,one,to,check,for,specific,types,of,beans,without,instantiating,objects,for,example,on,autowiring,p,in,the,case,of,implementations,that,are,creating,a,singleton,object,this,method,should,try,to,avoid,singleton,creation,as,far,as,possible,it,should,rather,estimate,the,type,in,advance,for,prototypes,returning,a,meaningful,type,here,is,advisable,too,p,this,method,can,be,called,i,before,i,this,factory,bean,has,been,fully,initialized,it,must,not,rely,on,state,created,during,initialization,of,course,it,can,still,use,such,state,if,available,p,b,note,b,autowiring,will,simply,ignore,factory,beans,that,return,code,null,here,therefore,it,is,highly,recommended,to,implement,this,method,properly,using,the,current,state,of,the,factory,bean,return,the,type,of,object,that,this,factory,bean,creates,or,code,null,if,not,known,at,the,time,of,the,call,see,listable,bean,factory,get,beans,of,type;nullable,class,get,object,type
FactoryBean -> @Nullable 	Class<?> getObjectType()_;1530174524;Return the type of object that this FactoryBean creates,_or {@code null} if not known in advance._<p>This allows one to check for specific types of beans without_instantiating objects, for example on autowiring._<p>In the case of implementations that are creating a singleton object,_this method should try to avoid singleton creation as far as possible__it should rather estimate the type in advance._For prototypes, returning a meaningful type here is advisable too._<p>This method can be called <i>before</i> this FactoryBean has_been fully initialized. It must not rely on state created during_initialization_ of course, it can still use such state if available._<p><b>NOTE:</b> Autowiring will simply ignore FactoryBeans that return_{@code null} here. Therefore it is highly recommended to implement_this method properly, using the current state of the FactoryBean._@return the type of object that this FactoryBean creates,_or {@code null} if not known at the time of the call_@see ListableBeanFactory#getBeansOfType;@Nullable_	Class<?> getObjectType()_;return,the,type,of,object,that,this,factory,bean,creates,or,code,null,if,not,known,in,advance,p,this,allows,one,to,check,for,specific,types,of,beans,without,instantiating,objects,for,example,on,autowiring,p,in,the,case,of,implementations,that,are,creating,a,singleton,object,this,method,should,try,to,avoid,singleton,creation,as,far,as,possible,it,should,rather,estimate,the,type,in,advance,for,prototypes,returning,a,meaningful,type,here,is,advisable,too,p,this,method,can,be,called,i,before,i,this,factory,bean,has,been,fully,initialized,it,must,not,rely,on,state,created,during,initialization,of,course,it,can,still,use,such,state,if,available,p,b,note,b,autowiring,will,simply,ignore,factory,beans,that,return,code,null,here,therefore,it,is,highly,recommended,to,implement,this,method,properly,using,the,current,state,of,the,factory,bean,return,the,type,of,object,that,this,factory,bean,creates,or,code,null,if,not,known,at,the,time,of,the,call,see,listable,bean,factory,get,beans,of,type;nullable,class,get,object,type
FactoryBean -> @Nullable 	T getObject() throws Exception_;1495868221;Return an instance (possibly shared or independent) of the object_managed by this factory._<p>As with a {@link BeanFactory}, this allows support for both the_Singleton and Prototype design pattern._<p>If this FactoryBean is not fully initialized yet at the time of_the call (for example because it is involved in a circular reference),_throw a corresponding {@link FactoryBeanNotInitializedException}._<p>As of Spring 2.0, FactoryBeans are allowed to return {@code null}_objects. The factory will consider this as normal value to be used_ it_will not throw a FactoryBeanNotInitializedException in this case anymore._FactoryBean implementations are encouraged to throw_FactoryBeanNotInitializedException themselves now, as appropriate._@return an instance of the bean (can be {@code null})_@throws Exception in case of creation errors_@see FactoryBeanNotInitializedException;@Nullable_	T getObject() throws Exception_;return,an,instance,possibly,shared,or,independent,of,the,object,managed,by,this,factory,p,as,with,a,link,bean,factory,this,allows,support,for,both,the,singleton,and,prototype,design,pattern,p,if,this,factory,bean,is,not,fully,initialized,yet,at,the,time,of,the,call,for,example,because,it,is,involved,in,a,circular,reference,throw,a,corresponding,link,factory,bean,not,initialized,exception,p,as,of,spring,2,0,factory,beans,are,allowed,to,return,code,null,objects,the,factory,will,consider,this,as,normal,value,to,be,used,it,will,not,throw,a,factory,bean,not,initialized,exception,in,this,case,anymore,factory,bean,implementations,are,encouraged,to,throw,factory,bean,not,initialized,exception,themselves,now,as,appropriate,return,an,instance,of,the,bean,can,be,code,null,throws,exception,in,case,of,creation,errors,see,factory,bean,not,initialized,exception;nullable,t,get,object,throws,exception
FactoryBean -> @Nullable 	T getObject() throws Exception_;1530174524;Return an instance (possibly shared or independent) of the object_managed by this factory._<p>As with a {@link BeanFactory}, this allows support for both the_Singleton and Prototype design pattern._<p>If this FactoryBean is not fully initialized yet at the time of_the call (for example because it is involved in a circular reference),_throw a corresponding {@link FactoryBeanNotInitializedException}._<p>As of Spring 2.0, FactoryBeans are allowed to return {@code null}_objects. The factory will consider this as normal value to be used_ it_will not throw a FactoryBeanNotInitializedException in this case anymore._FactoryBean implementations are encouraged to throw_FactoryBeanNotInitializedException themselves now, as appropriate._@return an instance of the bean (can be {@code null})_@throws Exception in case of creation errors_@see FactoryBeanNotInitializedException;@Nullable_	T getObject() throws Exception_;return,an,instance,possibly,shared,or,independent,of,the,object,managed,by,this,factory,p,as,with,a,link,bean,factory,this,allows,support,for,both,the,singleton,and,prototype,design,pattern,p,if,this,factory,bean,is,not,fully,initialized,yet,at,the,time,of,the,call,for,example,because,it,is,involved,in,a,circular,reference,throw,a,corresponding,link,factory,bean,not,initialized,exception,p,as,of,spring,2,0,factory,beans,are,allowed,to,return,code,null,objects,the,factory,will,consider,this,as,normal,value,to,be,used,it,will,not,throw,a,factory,bean,not,initialized,exception,in,this,case,anymore,factory,bean,implementations,are,encouraged,to,throw,factory,bean,not,initialized,exception,themselves,now,as,appropriate,return,an,instance,of,the,bean,can,be,code,null,throws,exception,in,case,of,creation,errors,see,factory,bean,not,initialized,exception;nullable,t,get,object,throws,exception
