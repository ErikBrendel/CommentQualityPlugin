commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the system property mode by the name of the corresponding constant,  * e.g. "SYSTEM_PROPERTIES_MODE_OVERRIDE".  * @param constantName name of the constant  * @see #setSystemPropertiesMode  */ ;/**  * Set the system property mode by the name of the corresponding constant,  * e.g. "SYSTEM_PROPERTIES_MODE_OVERRIDE".  * @param constantName name of the constant  * @see #setSystemPropertiesMode  */ public void setSystemPropertiesModeName(String constantName) throws IllegalArgumentException {     this.systemPropertiesMode = constants.asNumber(constantName).intValue(). }
true;public;1;3;/**  * Set how to check system properties: as fallback, as override, or never.  * For example, will resolve ${user.dir} to the "user.dir" system property.  * <p>The default is "fallback": If not being able to resolve a placeholder  * with the specified properties, a system property will be tried.  * "override" will check for a system property first, before trying the  * specified properties. "never" will not check system properties at all.  * @see #SYSTEM_PROPERTIES_MODE_NEVER  * @see #SYSTEM_PROPERTIES_MODE_FALLBACK  * @see #SYSTEM_PROPERTIES_MODE_OVERRIDE  * @see #setSystemPropertiesModeName  */ ;/**  * Set how to check system properties: as fallback, as override, or never.  * For example, will resolve ${user.dir} to the "user.dir" system property.  * <p>The default is "fallback": If not being able to resolve a placeholder  * with the specified properties, a system property will be tried.  * "override" will check for a system property first, before trying the  * specified properties. "never" will not check system properties at all.  * @see #SYSTEM_PROPERTIES_MODE_NEVER  * @see #SYSTEM_PROPERTIES_MODE_FALLBACK  * @see #SYSTEM_PROPERTIES_MODE_OVERRIDE  * @see #setSystemPropertiesModeName  */ public void setSystemPropertiesMode(int systemPropertiesMode) {     this.systemPropertiesMode = systemPropertiesMode. }
true;public;1;3;/**  * Set whether to search for a matching system environment variable  * if no matching system property has been found. Only applied when  * "systemPropertyMode" is active (i.e. "fallback" or "override"), right  * after checking JVM system properties.  * <p>Default is "true". Switch this setting off to never resolve placeholders  * against system environment variables. Note that it is generally recommended  * to pass external values in as JVM system properties: This can easily be  * achieved in a startup script, even for existing environment variables.  * @see #setSystemPropertiesMode  * @see System#getProperty(String)  * @see System#getenv(String)  */ ;/**  * Set whether to search for a matching system environment variable  * if no matching system property has been found. Only applied when  * "systemPropertyMode" is active (i.e. "fallback" or "override"), right  * after checking JVM system properties.  * <p>Default is "true". Switch this setting off to never resolve placeholders  * against system environment variables. Note that it is generally recommended  * to pass external values in as JVM system properties: This can easily be  * achieved in a startup script, even for existing environment variables.  * @see #setSystemPropertiesMode  * @see System#getProperty(String)  * @see System#getenv(String)  */ public void setSearchSystemEnvironment(boolean searchSystemEnvironment) {     this.searchSystemEnvironment = searchSystemEnvironment. }
true;protected;3;14;/**  * Resolve the given placeholder using the given properties, performing  * a system properties check according to the given mode.  * <p>The default implementation delegates to {@code resolvePlaceholder  * (placeholder, props)} before/after the system properties check.  * <p>Subclasses can override this for custom resolution strategies,  * including customized points for the system properties check.  * @param placeholder the placeholder to resolve  * @param props the merged properties of this configurer  * @param systemPropertiesMode the system properties mode,  * according to the constants in this class  * @return the resolved value, of null if none  * @see #setSystemPropertiesMode  * @see System#getProperty  * @see #resolvePlaceholder(String, java.util.Properties)  */ ;/**  * Resolve the given placeholder using the given properties, performing  * a system properties check according to the given mode.  * <p>The default implementation delegates to {@code resolvePlaceholder  * (placeholder, props)} before/after the system properties check.  * <p>Subclasses can override this for custom resolution strategies,  * including customized points for the system properties check.  * @param placeholder the placeholder to resolve  * @param props the merged properties of this configurer  * @param systemPropertiesMode the system properties mode,  * according to the constants in this class  * @return the resolved value, of null if none  * @see #setSystemPropertiesMode  * @see System#getProperty  * @see #resolvePlaceholder(String, java.util.Properties)  */ @Nullable protected String resolvePlaceholder(String placeholder, Properties props, int systemPropertiesMode) {     String propVal = null.     if (systemPropertiesMode == SYSTEM_PROPERTIES_MODE_OVERRIDE) {         propVal = resolveSystemProperty(placeholder).     }     if (propVal == null) {         propVal = resolvePlaceholder(placeholder, props).     }     if (propVal == null && systemPropertiesMode == SYSTEM_PROPERTIES_MODE_FALLBACK) {         propVal = resolveSystemProperty(placeholder).     }     return propVal. }
true;protected;2;4;/**  * Resolve the given placeholder using the given properties.  * The default implementation simply checks for a corresponding property key.  * <p>Subclasses can override this for customized placeholder-to-key mappings  * or custom resolution strategies, possibly just using the given properties  * as fallback.  * <p>Note that system properties will still be checked before respectively  * after this method is invoked, according to the system properties mode.  * @param placeholder the placeholder to resolve  * @param props the merged properties of this configurer  * @return the resolved value, of {@code null} if none  * @see #setSystemPropertiesMode  */ ;/**  * Resolve the given placeholder using the given properties.  * The default implementation simply checks for a corresponding property key.  * <p>Subclasses can override this for customized placeholder-to-key mappings  * or custom resolution strategies, possibly just using the given properties  * as fallback.  * <p>Note that system properties will still be checked before respectively  * after this method is invoked, according to the system properties mode.  * @param placeholder the placeholder to resolve  * @param props the merged properties of this configurer  * @return the resolved value, of {@code null} if none  * @see #setSystemPropertiesMode  */ @Nullable protected String resolvePlaceholder(String placeholder, Properties props) {     return props.getProperty(placeholder). }
true;protected;1;16;/**  * Resolve the given key as JVM system property, and optionally also as  * system environment variable if no matching system property has been found.  * @param key the placeholder to resolve as system property key  * @return the system property value, or {@code null} if not found  * @see #setSearchSystemEnvironment  * @see System#getProperty(String)  * @see System#getenv(String)  */ ;/**  * Resolve the given key as JVM system property, and optionally also as  * system environment variable if no matching system property has been found.  * @param key the placeholder to resolve as system property key  * @return the system property value, or {@code null} if not found  * @see #setSearchSystemEnvironment  * @see System#getProperty(String)  * @see System#getenv(String)  */ @Nullable protected String resolveSystemProperty(String key) {     try {         String value = System.getProperty(key).         if (value == null && this.searchSystemEnvironment) {             value = System.getenv(key).         }         return value.     } catch (Throwable ex) {         if (logger.isDebugEnabled()) {             logger.debug("Could not access system property '" + key + "': " + ex).         }         return null.     } }
true;protected;2;7;/**  * Visit each bean definition in the given bean factory and attempt to replace ${...} property  * placeholders with values from the given properties.  */ ;/**  * Visit each bean definition in the given bean factory and attempt to replace ${...} property  * placeholders with values from the given properties.  */ @Override protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess, Properties props) throws BeansException {     StringValueResolver valueResolver = new PlaceholderResolvingStringValueResolver(props).     doProcessProperties(beanFactoryToProcess, valueResolver). }
false;public;1;9;;@Override @Nullable public String resolveStringValue(String strVal) throws BeansException {     String resolved = this.helper.replacePlaceholders(strVal, this.resolver).     if (trimValues) {         resolved = resolved.trim().     }     return (resolved.equals(nullValue) ? null : resolved). }
false;public;1;6;;@Override @Nullable public String resolvePlaceholder(String placeholderName) {     return PropertyPlaceholderConfigurer.this.resolvePlaceholder(placeholderName, this.props, systemPropertiesMode). }
