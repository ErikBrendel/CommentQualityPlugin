# id;timestamp;commentText;codeText;commentWords;codeWords
PropertyPlaceholderConfigurer -> @Nullable 	protected String resolveSystemProperty(String key);1495868221;Resolve the given key as JVM system property, and optionally also as_system environment variable if no matching system property has been found._@param key the placeholder to resolve as system property key_@return the system property value, or {@code null} if not found_@see #setSearchSystemEnvironment_@see System#getProperty(String)_@see System#getenv(String);@Nullable_	protected String resolveSystemProperty(String key) {_		try {_			String value = System.getProperty(key)__			if (value == null && this.searchSystemEnvironment) {_				value = System.getenv(key)__			}_			return value__		}_		catch (Throwable ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Could not access system property '" + key + "': " + ex)__			}_			return null__		}_	};resolve,the,given,key,as,jvm,system,property,and,optionally,also,as,system,environment,variable,if,no,matching,system,property,has,been,found,param,key,the,placeholder,to,resolve,as,system,property,key,return,the,system,property,value,or,code,null,if,not,found,see,set,search,system,environment,see,system,get,property,string,see,system,getenv,string;nullable,protected,string,resolve,system,property,string,key,try,string,value,system,get,property,key,if,value,null,this,search,system,environment,value,system,getenv,key,return,value,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,could,not,access,system,property,key,ex,return,null
PropertyPlaceholderConfigurer -> @Nullable 	protected String resolveSystemProperty(String key);1496242568;Resolve the given key as JVM system property, and optionally also as_system environment variable if no matching system property has been found._@param key the placeholder to resolve as system property key_@return the system property value, or {@code null} if not found_@see #setSearchSystemEnvironment_@see System#getProperty(String)_@see System#getenv(String);@Nullable_	protected String resolveSystemProperty(String key) {_		try {_			String value = System.getProperty(key)__			if (value == null && this.searchSystemEnvironment) {_				value = System.getenv(key)__			}_			return value__		}_		catch (Throwable ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Could not access system property '" + key + "': " + ex)__			}_			return null__		}_	};resolve,the,given,key,as,jvm,system,property,and,optionally,also,as,system,environment,variable,if,no,matching,system,property,has,been,found,param,key,the,placeholder,to,resolve,as,system,property,key,return,the,system,property,value,or,code,null,if,not,found,see,set,search,system,environment,see,system,get,property,string,see,system,getenv,string;nullable,protected,string,resolve,system,property,string,key,try,string,value,system,get,property,key,if,value,null,this,search,system,environment,value,system,getenv,key,return,value,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,could,not,access,system,property,key,ex,return,null
PropertyPlaceholderConfigurer -> @Nullable 	protected String resolveSystemProperty(String key);1496837955;Resolve the given key as JVM system property, and optionally also as_system environment variable if no matching system property has been found._@param key the placeholder to resolve as system property key_@return the system property value, or {@code null} if not found_@see #setSearchSystemEnvironment_@see System#getProperty(String)_@see System#getenv(String);@Nullable_	protected String resolveSystemProperty(String key) {_		try {_			String value = System.getProperty(key)__			if (value == null && this.searchSystemEnvironment) {_				value = System.getenv(key)__			}_			return value__		}_		catch (Throwable ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Could not access system property '" + key + "': " + ex)__			}_			return null__		}_	};resolve,the,given,key,as,jvm,system,property,and,optionally,also,as,system,environment,variable,if,no,matching,system,property,has,been,found,param,key,the,placeholder,to,resolve,as,system,property,key,return,the,system,property,value,or,code,null,if,not,found,see,set,search,system,environment,see,system,get,property,string,see,system,getenv,string;nullable,protected,string,resolve,system,property,string,key,try,string,value,system,get,property,key,if,value,null,this,search,system,environment,value,system,getenv,key,return,value,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,could,not,access,system,property,key,ex,return,null
PropertyPlaceholderConfigurer -> @Nullable 	protected String resolveSystemProperty(String key);1502974979;Resolve the given key as JVM system property, and optionally also as_system environment variable if no matching system property has been found._@param key the placeholder to resolve as system property key_@return the system property value, or {@code null} if not found_@see #setSearchSystemEnvironment_@see System#getProperty(String)_@see System#getenv(String);@Nullable_	protected String resolveSystemProperty(String key) {_		try {_			String value = System.getProperty(key)__			if (value == null && this.searchSystemEnvironment) {_				value = System.getenv(key)__			}_			return value__		}_		catch (Throwable ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Could not access system property '" + key + "': " + ex)__			}_			return null__		}_	};resolve,the,given,key,as,jvm,system,property,and,optionally,also,as,system,environment,variable,if,no,matching,system,property,has,been,found,param,key,the,placeholder,to,resolve,as,system,property,key,return,the,system,property,value,or,code,null,if,not,found,see,set,search,system,environment,see,system,get,property,string,see,system,getenv,string;nullable,protected,string,resolve,system,property,string,key,try,string,value,system,get,property,key,if,value,null,this,search,system,environment,value,system,getenv,key,return,value,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,could,not,access,system,property,key,ex,return,null
PropertyPlaceholderConfigurer -> @Nullable 	protected String resolveSystemProperty(String key);1530174524;Resolve the given key as JVM system property, and optionally also as_system environment variable if no matching system property has been found._@param key the placeholder to resolve as system property key_@return the system property value, or {@code null} if not found_@see #setSearchSystemEnvironment_@see System#getProperty(String)_@see System#getenv(String);@Nullable_	protected String resolveSystemProperty(String key) {_		try {_			String value = System.getProperty(key)__			if (value == null && this.searchSystemEnvironment) {_				value = System.getenv(key)__			}_			return value__		}_		catch (Throwable ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Could not access system property '" + key + "': " + ex)__			}_			return null__		}_	};resolve,the,given,key,as,jvm,system,property,and,optionally,also,as,system,environment,variable,if,no,matching,system,property,has,been,found,param,key,the,placeholder,to,resolve,as,system,property,key,return,the,system,property,value,or,code,null,if,not,found,see,set,search,system,environment,see,system,get,property,string,see,system,getenv,string;nullable,protected,string,resolve,system,property,string,key,try,string,value,system,get,property,key,if,value,null,this,search,system,environment,value,system,getenv,key,return,value,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,could,not,access,system,property,key,ex,return,null
PropertyPlaceholderConfigurer -> @Nullable 	protected String resolveSystemProperty(String key);1530174524;Resolve the given key as JVM system property, and optionally also as_system environment variable if no matching system property has been found._@param key the placeholder to resolve as system property key_@return the system property value, or {@code null} if not found_@see #setSearchSystemEnvironment_@see System#getProperty(String)_@see System#getenv(String);@Nullable_	protected String resolveSystemProperty(String key) {_		try {_			String value = System.getProperty(key)__			if (value == null && this.searchSystemEnvironment) {_				value = System.getenv(key)__			}_			return value__		}_		catch (Throwable ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Could not access system property '" + key + "': " + ex)__			}_			return null__		}_	};resolve,the,given,key,as,jvm,system,property,and,optionally,also,as,system,environment,variable,if,no,matching,system,property,has,been,found,param,key,the,placeholder,to,resolve,as,system,property,key,return,the,system,property,value,or,code,null,if,not,found,see,set,search,system,environment,see,system,get,property,string,see,system,getenv,string;nullable,protected,string,resolve,system,property,string,key,try,string,value,system,get,property,key,if,value,null,this,search,system,environment,value,system,getenv,key,return,value,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,could,not,access,system,property,key,ex,return,null
PropertyPlaceholderConfigurer -> @Nullable 	protected String resolveSystemProperty(String key);1546963894;Resolve the given key as JVM system property, and optionally also as_system environment variable if no matching system property has been found._@param key the placeholder to resolve as system property key_@return the system property value, or {@code null} if not found_@see #setSearchSystemEnvironment_@see System#getProperty(String)_@see System#getenv(String);@Nullable_	protected String resolveSystemProperty(String key) {_		try {_			String value = System.getProperty(key)__			if (value == null && this.searchSystemEnvironment) {_				value = System.getenv(key)__			}_			return value__		}_		catch (Throwable ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Could not access system property '" + key + "': " + ex)__			}_			return null__		}_	};resolve,the,given,key,as,jvm,system,property,and,optionally,also,as,system,environment,variable,if,no,matching,system,property,has,been,found,param,key,the,placeholder,to,resolve,as,system,property,key,return,the,system,property,value,or,code,null,if,not,found,see,set,search,system,environment,see,system,get,property,string,see,system,getenv,string;nullable,protected,string,resolve,system,property,string,key,try,string,value,system,get,property,key,if,value,null,this,search,system,environment,value,system,getenv,key,return,value,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,could,not,access,system,property,key,ex,return,null
PropertyPlaceholderConfigurer -> @Nullable 	protected String resolveSystemProperty(String key);1546981033;Resolve the given key as JVM system property, and optionally also as_system environment variable if no matching system property has been found._@param key the placeholder to resolve as system property key_@return the system property value, or {@code null} if not found_@see #setSearchSystemEnvironment_@see System#getProperty(String)_@see System#getenv(String);@Nullable_	protected String resolveSystemProperty(String key) {_		try {_			String value = System.getProperty(key)__			if (value == null && this.searchSystemEnvironment) {_				value = System.getenv(key)__			}_			return value__		}_		catch (Throwable ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Could not access system property '" + key + "': " + ex)__			}_			return null__		}_	};resolve,the,given,key,as,jvm,system,property,and,optionally,also,as,system,environment,variable,if,no,matching,system,property,has,been,found,param,key,the,placeholder,to,resolve,as,system,property,key,return,the,system,property,value,or,code,null,if,not,found,see,set,search,system,environment,see,system,get,property,string,see,system,getenv,string;nullable,protected,string,resolve,system,property,string,key,try,string,value,system,get,property,key,if,value,null,this,search,system,environment,value,system,getenv,key,return,value,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,could,not,access,system,property,key,ex,return,null
PropertyPlaceholderConfigurer -> @Nullable 	protected String resolveSystemProperty(String key);1549465224;Resolve the given key as JVM system property, and optionally also as_system environment variable if no matching system property has been found._@param key the placeholder to resolve as system property key_@return the system property value, or {@code null} if not found_@see #setSearchSystemEnvironment_@see System#getProperty(String)_@see System#getenv(String);@Nullable_	protected String resolveSystemProperty(String key) {_		try {_			String value = System.getProperty(key)__			if (value == null && this.searchSystemEnvironment) {_				value = System.getenv(key)__			}_			return value__		}_		catch (Throwable ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Could not access system property '" + key + "': " + ex)__			}_			return null__		}_	};resolve,the,given,key,as,jvm,system,property,and,optionally,also,as,system,environment,variable,if,no,matching,system,property,has,been,found,param,key,the,placeholder,to,resolve,as,system,property,key,return,the,system,property,value,or,code,null,if,not,found,see,set,search,system,environment,see,system,get,property,string,see,system,getenv,string;nullable,protected,string,resolve,system,property,string,key,try,string,value,system,get,property,key,if,value,null,this,search,system,environment,value,system,getenv,key,return,value,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,could,not,access,system,property,key,ex,return,null
PropertyPlaceholderConfigurer -> @Nullable 	protected String resolveSystemProperty(String key);1549554785;Resolve the given key as JVM system property, and optionally also as_system environment variable if no matching system property has been found._@param key the placeholder to resolve as system property key_@return the system property value, or {@code null} if not found_@see #setSearchSystemEnvironment_@see System#getProperty(String)_@see System#getenv(String);@Nullable_	protected String resolveSystemProperty(String key) {_		try {_			String value = System.getProperty(key)__			if (value == null && this.searchSystemEnvironment) {_				value = System.getenv(key)__			}_			return value__		}_		catch (Throwable ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Could not access system property '" + key + "': " + ex)__			}_			return null__		}_	};resolve,the,given,key,as,jvm,system,property,and,optionally,also,as,system,environment,variable,if,no,matching,system,property,has,been,found,param,key,the,placeholder,to,resolve,as,system,property,key,return,the,system,property,value,or,code,null,if,not,found,see,set,search,system,environment,see,system,get,property,string,see,system,getenv,string;nullable,protected,string,resolve,system,property,string,key,try,string,value,system,get,property,key,if,value,null,this,search,system,environment,value,system,getenv,key,return,value,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,could,not,access,system,property,key,ex,return,null
PropertyPlaceholderConfigurer -> protected String resolveSystemProperty(String key);1328020251;Resolve the given key as JVM system property, and optionally also as_system environment variable if no matching system property has been found._@param key the placeholder to resolve as system property key_@return the system property value, or <code>null</code> if not found_@see #setSearchSystemEnvironment_@see java.lang.System#getProperty(String)_@see java.lang.System#getenv(String);protected String resolveSystemProperty(String key) {_		try {_			String value = System.getProperty(key)__			if (value == null && this.searchSystemEnvironment) {_				value = System.getenv(key)__			}_			return value__		}_		catch (Throwable ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Could not access system property '" + key + "': " + ex)__			}_			return null__		}_	};resolve,the,given,key,as,jvm,system,property,and,optionally,also,as,system,environment,variable,if,no,matching,system,property,has,been,found,param,key,the,placeholder,to,resolve,as,system,property,key,return,the,system,property,value,or,code,null,code,if,not,found,see,set,search,system,environment,see,java,lang,system,get,property,string,see,java,lang,system,getenv,string;protected,string,resolve,system,property,string,key,try,string,value,system,get,property,key,if,value,null,this,search,system,environment,value,system,getenv,key,return,value,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,could,not,access,system,property,key,ex,return,null
PropertyPlaceholderConfigurer -> protected String resolveSystemProperty(String key);1355313310;Resolve the given key as JVM system property, and optionally also as_system environment variable if no matching system property has been found._@param key the placeholder to resolve as system property key_@return the system property value, or <code>null</code> if not found_@see #setSearchSystemEnvironment_@see java.lang.System#getProperty(String)_@see java.lang.System#getenv(String);protected String resolveSystemProperty(String key) {_		try {_			String value = System.getProperty(key)__			if (value == null && this.searchSystemEnvironment) {_				value = System.getenv(key)__			}_			return value__		}_		catch (Throwable ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Could not access system property '" + key + "': " + ex)__			}_			return null__		}_	};resolve,the,given,key,as,jvm,system,property,and,optionally,also,as,system,environment,variable,if,no,matching,system,property,has,been,found,param,key,the,placeholder,to,resolve,as,system,property,key,return,the,system,property,value,or,code,null,code,if,not,found,see,set,search,system,environment,see,java,lang,system,get,property,string,see,java,lang,system,getenv,string;protected,string,resolve,system,property,string,key,try,string,value,system,get,property,key,if,value,null,this,search,system,environment,value,system,getenv,key,return,value,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,could,not,access,system,property,key,ex,return,null
PropertyPlaceholderConfigurer -> protected String resolveSystemProperty(String key);1356735495;Resolve the given key as JVM system property, and optionally also as_system environment variable if no matching system property has been found._@param key the placeholder to resolve as system property key_@return the system property value, or {@code null} if not found_@see #setSearchSystemEnvironment_@see System#getProperty(String)_@see System#getenv(String);protected String resolveSystemProperty(String key) {_		try {_			String value = System.getProperty(key)__			if (value == null && this.searchSystemEnvironment) {_				value = System.getenv(key)__			}_			return value__		}_		catch (Throwable ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Could not access system property '" + key + "': " + ex)__			}_			return null__		}_	};resolve,the,given,key,as,jvm,system,property,and,optionally,also,as,system,environment,variable,if,no,matching,system,property,has,been,found,param,key,the,placeholder,to,resolve,as,system,property,key,return,the,system,property,value,or,code,null,if,not,found,see,set,search,system,environment,see,system,get,property,string,see,system,getenv,string;protected,string,resolve,system,property,string,key,try,string,value,system,get,property,key,if,value,null,this,search,system,environment,value,system,getenv,key,return,value,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,could,not,access,system,property,key,ex,return,null
PropertyPlaceholderConfigurer -> protected String resolveSystemProperty(String key);1357119239;Resolve the given key as JVM system property, and optionally also as_system environment variable if no matching system property has been found._@param key the placeholder to resolve as system property key_@return the system property value, or {@code null} if not found_@see #setSearchSystemEnvironment_@see System#getProperty(String)_@see System#getenv(String);protected String resolveSystemProperty(String key) {_		try {_			String value = System.getProperty(key)__			if (value == null && this.searchSystemEnvironment) {_				value = System.getenv(key)__			}_			return value__		}_		catch (Throwable ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Could not access system property '" + key + "': " + ex)__			}_			return null__		}_	};resolve,the,given,key,as,jvm,system,property,and,optionally,also,as,system,environment,variable,if,no,matching,system,property,has,been,found,param,key,the,placeholder,to,resolve,as,system,property,key,return,the,system,property,value,or,code,null,if,not,found,see,set,search,system,environment,see,system,get,property,string,see,system,getenv,string;protected,string,resolve,system,property,string,key,try,string,value,system,get,property,key,if,value,null,this,search,system,environment,value,system,getenv,key,return,value,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,could,not,access,system,property,key,ex,return,null
PropertyPlaceholderConfigurer -> protected String resolveSystemProperty(String key);1368482696;Resolve the given key as JVM system property, and optionally also as_system environment variable if no matching system property has been found._@param key the placeholder to resolve as system property key_@return the system property value, or {@code null} if not found_@see #setSearchSystemEnvironment_@see System#getProperty(String)_@see System#getenv(String);protected String resolveSystemProperty(String key) {_		try {_			String value = System.getProperty(key)__			if (value == null && this.searchSystemEnvironment) {_				value = System.getenv(key)__			}_			return value__		}_		catch (Throwable ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Could not access system property '" + key + "': " + ex)__			}_			return null__		}_	};resolve,the,given,key,as,jvm,system,property,and,optionally,also,as,system,environment,variable,if,no,matching,system,property,has,been,found,param,key,the,placeholder,to,resolve,as,system,property,key,return,the,system,property,value,or,code,null,if,not,found,see,set,search,system,environment,see,system,get,property,string,see,system,getenv,string;protected,string,resolve,system,property,string,key,try,string,value,system,get,property,key,if,value,null,this,search,system,environment,value,system,getenv,key,return,value,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,could,not,access,system,property,key,ex,return,null
PropertyPlaceholderConfigurer -> protected String resolveSystemProperty(String key);1389804257;Resolve the given key as JVM system property, and optionally also as_system environment variable if no matching system property has been found._@param key the placeholder to resolve as system property key_@return the system property value, or {@code null} if not found_@see #setSearchSystemEnvironment_@see System#getProperty(String)_@see System#getenv(String);protected String resolveSystemProperty(String key) {_		try {_			String value = System.getProperty(key)__			if (value == null && this.searchSystemEnvironment) {_				value = System.getenv(key)__			}_			return value__		}_		catch (Throwable ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Could not access system property '" + key + "': " + ex)__			}_			return null__		}_	};resolve,the,given,key,as,jvm,system,property,and,optionally,also,as,system,environment,variable,if,no,matching,system,property,has,been,found,param,key,the,placeholder,to,resolve,as,system,property,key,return,the,system,property,value,or,code,null,if,not,found,see,set,search,system,environment,see,system,get,property,string,see,system,getenv,string;protected,string,resolve,system,property,string,key,try,string,value,system,get,property,key,if,value,null,this,search,system,environment,value,system,getenv,key,return,value,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,could,not,access,system,property,key,ex,return,null
PropertyPlaceholderConfigurer -> protected String resolveSystemProperty(String key);1390576922;Resolve the given key as JVM system property, and optionally also as_system environment variable if no matching system property has been found._@param key the placeholder to resolve as system property key_@return the system property value, or {@code null} if not found_@see #setSearchSystemEnvironment_@see System#getProperty(String)_@see System#getenv(String);protected String resolveSystemProperty(String key) {_		try {_			String value = System.getProperty(key)__			if (value == null && this.searchSystemEnvironment) {_				value = System.getenv(key)__			}_			return value__		}_		catch (Throwable ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Could not access system property '" + key + "': " + ex)__			}_			return null__		}_	};resolve,the,given,key,as,jvm,system,property,and,optionally,also,as,system,environment,variable,if,no,matching,system,property,has,been,found,param,key,the,placeholder,to,resolve,as,system,property,key,return,the,system,property,value,or,code,null,if,not,found,see,set,search,system,environment,see,system,get,property,string,see,system,getenv,string;protected,string,resolve,system,property,string,key,try,string,value,system,get,property,key,if,value,null,this,search,system,environment,value,system,getenv,key,return,value,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,could,not,access,system,property,key,ex,return,null
PropertyPlaceholderConfigurer -> protected String resolveSystemProperty(String key);1425578217;Resolve the given key as JVM system property, and optionally also as_system environment variable if no matching system property has been found._@param key the placeholder to resolve as system property key_@return the system property value, or {@code null} if not found_@see #setSearchSystemEnvironment_@see System#getProperty(String)_@see System#getenv(String);protected String resolveSystemProperty(String key) {_		try {_			String value = System.getProperty(key)__			if (value == null && this.searchSystemEnvironment) {_				value = System.getenv(key)__			}_			return value__		}_		catch (Throwable ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Could not access system property '" + key + "': " + ex)__			}_			return null__		}_	};resolve,the,given,key,as,jvm,system,property,and,optionally,also,as,system,environment,variable,if,no,matching,system,property,has,been,found,param,key,the,placeholder,to,resolve,as,system,property,key,return,the,system,property,value,or,code,null,if,not,found,see,set,search,system,environment,see,system,get,property,string,see,system,getenv,string;protected,string,resolve,system,property,string,key,try,string,value,system,get,property,key,if,value,null,this,search,system,environment,value,system,getenv,key,return,value,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,could,not,access,system,property,key,ex,return,null
PropertyPlaceholderConfigurer -> protected String resolveSystemProperty(String key);1455905979;Resolve the given key as JVM system property, and optionally also as_system environment variable if no matching system property has been found._@param key the placeholder to resolve as system property key_@return the system property value, or {@code null} if not found_@see #setSearchSystemEnvironment_@see System#getProperty(String)_@see System#getenv(String);protected String resolveSystemProperty(String key) {_		try {_			String value = System.getProperty(key)__			if (value == null && this.searchSystemEnvironment) {_				value = System.getenv(key)__			}_			return value__		}_		catch (Throwable ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Could not access system property '" + key + "': " + ex)__			}_			return null__		}_	};resolve,the,given,key,as,jvm,system,property,and,optionally,also,as,system,environment,variable,if,no,matching,system,property,has,been,found,param,key,the,placeholder,to,resolve,as,system,property,key,return,the,system,property,value,or,code,null,if,not,found,see,set,search,system,environment,see,system,get,property,string,see,system,getenv,string;protected,string,resolve,system,property,string,key,try,string,value,system,get,property,key,if,value,null,this,search,system,environment,value,system,getenv,key,return,value,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,could,not,access,system,property,key,ex,return,null
PropertyPlaceholderConfigurer -> protected String resolveSystemProperty(String key);1467726769;Resolve the given key as JVM system property, and optionally also as_system environment variable if no matching system property has been found._@param key the placeholder to resolve as system property key_@return the system property value, or {@code null} if not found_@see #setSearchSystemEnvironment_@see System#getProperty(String)_@see System#getenv(String);protected String resolveSystemProperty(String key) {_		try {_			String value = System.getProperty(key)__			if (value == null && this.searchSystemEnvironment) {_				value = System.getenv(key)__			}_			return value__		}_		catch (Throwable ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Could not access system property '" + key + "': " + ex)__			}_			return null__		}_	};resolve,the,given,key,as,jvm,system,property,and,optionally,also,as,system,environment,variable,if,no,matching,system,property,has,been,found,param,key,the,placeholder,to,resolve,as,system,property,key,return,the,system,property,value,or,code,null,if,not,found,see,set,search,system,environment,see,system,get,property,string,see,system,getenv,string;protected,string,resolve,system,property,string,key,try,string,value,system,get,property,key,if,value,null,this,search,system,environment,value,system,getenv,key,return,value,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,could,not,access,system,property,key,ex,return,null
PropertyPlaceholderConfigurer -> protected String resolveSystemProperty(String key);1490722023;Resolve the given key as JVM system property, and optionally also as_system environment variable if no matching system property has been found._@param key the placeholder to resolve as system property key_@return the system property value, or {@code null} if not found_@see #setSearchSystemEnvironment_@see System#getProperty(String)_@see System#getenv(String);protected String resolveSystemProperty(String key) {_		try {_			String value = System.getProperty(key)__			if (value == null && this.searchSystemEnvironment) {_				value = System.getenv(key)__			}_			return value__		}_		catch (Throwable ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Could not access system property '" + key + "': " + ex)__			}_			return null__		}_	};resolve,the,given,key,as,jvm,system,property,and,optionally,also,as,system,environment,variable,if,no,matching,system,property,has,been,found,param,key,the,placeholder,to,resolve,as,system,property,key,return,the,system,property,value,or,code,null,if,not,found,see,set,search,system,environment,see,system,get,property,string,see,system,getenv,string;protected,string,resolve,system,property,string,key,try,string,value,system,get,property,key,if,value,null,this,search,system,environment,value,system,getenv,key,return,value,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,could,not,access,system,property,key,ex,return,null
PropertyPlaceholderConfigurer -> public void setSystemPropertiesModeName(String constantName) throws IllegalArgumentException;1328020251;Set the system property mode by the name of the corresponding constant,_e.g. "SYSTEM_PROPERTIES_MODE_OVERRIDE"._@param constantName name of the constant_@throws java.lang.IllegalArgumentException if an invalid constant was specified_@see #setSystemPropertiesMode;public void setSystemPropertiesModeName(String constantName) throws IllegalArgumentException {_		this.systemPropertiesMode = constants.asNumber(constantName).intValue()__	};set,the,system,property,mode,by,the,name,of,the,corresponding,constant,e,g,param,constant,name,name,of,the,constant,throws,java,lang,illegal,argument,exception,if,an,invalid,constant,was,specified,see,set,system,properties,mode;public,void,set,system,properties,mode,name,string,constant,name,throws,illegal,argument,exception,this,system,properties,mode,constants,as,number,constant,name,int,value
PropertyPlaceholderConfigurer -> public void setSystemPropertiesModeName(String constantName) throws IllegalArgumentException;1355313310;Set the system property mode by the name of the corresponding constant,_e.g. "SYSTEM_PROPERTIES_MODE_OVERRIDE"._@param constantName name of the constant_@throws java.lang.IllegalArgumentException if an invalid constant was specified_@see #setSystemPropertiesMode;public void setSystemPropertiesModeName(String constantName) throws IllegalArgumentException {_		this.systemPropertiesMode = constants.asNumber(constantName).intValue()__	};set,the,system,property,mode,by,the,name,of,the,corresponding,constant,e,g,param,constant,name,name,of,the,constant,throws,java,lang,illegal,argument,exception,if,an,invalid,constant,was,specified,see,set,system,properties,mode;public,void,set,system,properties,mode,name,string,constant,name,throws,illegal,argument,exception,this,system,properties,mode,constants,as,number,constant,name,int,value
PropertyPlaceholderConfigurer -> public void setSystemPropertiesModeName(String constantName) throws IllegalArgumentException;1356735495;Set the system property mode by the name of the corresponding constant,_e.g. "SYSTEM_PROPERTIES_MODE_OVERRIDE"._@param constantName name of the constant_@throws java.lang.IllegalArgumentException if an invalid constant was specified_@see #setSystemPropertiesMode;public void setSystemPropertiesModeName(String constantName) throws IllegalArgumentException {_		this.systemPropertiesMode = constants.asNumber(constantName).intValue()__	};set,the,system,property,mode,by,the,name,of,the,corresponding,constant,e,g,param,constant,name,name,of,the,constant,throws,java,lang,illegal,argument,exception,if,an,invalid,constant,was,specified,see,set,system,properties,mode;public,void,set,system,properties,mode,name,string,constant,name,throws,illegal,argument,exception,this,system,properties,mode,constants,as,number,constant,name,int,value
PropertyPlaceholderConfigurer -> public void setSystemPropertiesModeName(String constantName) throws IllegalArgumentException;1357119239;Set the system property mode by the name of the corresponding constant,_e.g. "SYSTEM_PROPERTIES_MODE_OVERRIDE"._@param constantName name of the constant_@throws java.lang.IllegalArgumentException if an invalid constant was specified_@see #setSystemPropertiesMode;public void setSystemPropertiesModeName(String constantName) throws IllegalArgumentException {_		this.systemPropertiesMode = constants.asNumber(constantName).intValue()__	};set,the,system,property,mode,by,the,name,of,the,corresponding,constant,e,g,param,constant,name,name,of,the,constant,throws,java,lang,illegal,argument,exception,if,an,invalid,constant,was,specified,see,set,system,properties,mode;public,void,set,system,properties,mode,name,string,constant,name,throws,illegal,argument,exception,this,system,properties,mode,constants,as,number,constant,name,int,value
PropertyPlaceholderConfigurer -> public void setSystemPropertiesModeName(String constantName) throws IllegalArgumentException;1368482696;Set the system property mode by the name of the corresponding constant,_e.g. "SYSTEM_PROPERTIES_MODE_OVERRIDE"._@param constantName name of the constant_@throws java.lang.IllegalArgumentException if an invalid constant was specified_@see #setSystemPropertiesMode;public void setSystemPropertiesModeName(String constantName) throws IllegalArgumentException {_		this.systemPropertiesMode = constants.asNumber(constantName).intValue()__	};set,the,system,property,mode,by,the,name,of,the,corresponding,constant,e,g,param,constant,name,name,of,the,constant,throws,java,lang,illegal,argument,exception,if,an,invalid,constant,was,specified,see,set,system,properties,mode;public,void,set,system,properties,mode,name,string,constant,name,throws,illegal,argument,exception,this,system,properties,mode,constants,as,number,constant,name,int,value
PropertyPlaceholderConfigurer -> public void setSystemPropertiesModeName(String constantName) throws IllegalArgumentException;1389804257;Set the system property mode by the name of the corresponding constant,_e.g. "SYSTEM_PROPERTIES_MODE_OVERRIDE"._@param constantName name of the constant_@throws java.lang.IllegalArgumentException if an invalid constant was specified_@see #setSystemPropertiesMode;public void setSystemPropertiesModeName(String constantName) throws IllegalArgumentException {_		this.systemPropertiesMode = constants.asNumber(constantName).intValue()__	};set,the,system,property,mode,by,the,name,of,the,corresponding,constant,e,g,param,constant,name,name,of,the,constant,throws,java,lang,illegal,argument,exception,if,an,invalid,constant,was,specified,see,set,system,properties,mode;public,void,set,system,properties,mode,name,string,constant,name,throws,illegal,argument,exception,this,system,properties,mode,constants,as,number,constant,name,int,value
PropertyPlaceholderConfigurer -> public void setSystemPropertiesModeName(String constantName) throws IllegalArgumentException;1390576922;Set the system property mode by the name of the corresponding constant,_e.g. "SYSTEM_PROPERTIES_MODE_OVERRIDE"._@param constantName name of the constant_@throws java.lang.IllegalArgumentException if an invalid constant was specified_@see #setSystemPropertiesMode;public void setSystemPropertiesModeName(String constantName) throws IllegalArgumentException {_		this.systemPropertiesMode = constants.asNumber(constantName).intValue()__	};set,the,system,property,mode,by,the,name,of,the,corresponding,constant,e,g,param,constant,name,name,of,the,constant,throws,java,lang,illegal,argument,exception,if,an,invalid,constant,was,specified,see,set,system,properties,mode;public,void,set,system,properties,mode,name,string,constant,name,throws,illegal,argument,exception,this,system,properties,mode,constants,as,number,constant,name,int,value
PropertyPlaceholderConfigurer -> public void setSystemPropertiesModeName(String constantName) throws IllegalArgumentException;1425578217;Set the system property mode by the name of the corresponding constant,_e.g. "SYSTEM_PROPERTIES_MODE_OVERRIDE"._@param constantName name of the constant_@throws java.lang.IllegalArgumentException if an invalid constant was specified_@see #setSystemPropertiesMode;public void setSystemPropertiesModeName(String constantName) throws IllegalArgumentException {_		this.systemPropertiesMode = constants.asNumber(constantName).intValue()__	};set,the,system,property,mode,by,the,name,of,the,corresponding,constant,e,g,param,constant,name,name,of,the,constant,throws,java,lang,illegal,argument,exception,if,an,invalid,constant,was,specified,see,set,system,properties,mode;public,void,set,system,properties,mode,name,string,constant,name,throws,illegal,argument,exception,this,system,properties,mode,constants,as,number,constant,name,int,value
PropertyPlaceholderConfigurer -> public void setSystemPropertiesModeName(String constantName) throws IllegalArgumentException;1455905979;Set the system property mode by the name of the corresponding constant,_e.g. "SYSTEM_PROPERTIES_MODE_OVERRIDE"._@param constantName name of the constant_@throws java.lang.IllegalArgumentException if an invalid constant was specified_@see #setSystemPropertiesMode;public void setSystemPropertiesModeName(String constantName) throws IllegalArgumentException {_		this.systemPropertiesMode = constants.asNumber(constantName).intValue()__	};set,the,system,property,mode,by,the,name,of,the,corresponding,constant,e,g,param,constant,name,name,of,the,constant,throws,java,lang,illegal,argument,exception,if,an,invalid,constant,was,specified,see,set,system,properties,mode;public,void,set,system,properties,mode,name,string,constant,name,throws,illegal,argument,exception,this,system,properties,mode,constants,as,number,constant,name,int,value
PropertyPlaceholderConfigurer -> public void setSystemPropertiesModeName(String constantName) throws IllegalArgumentException;1467726769;Set the system property mode by the name of the corresponding constant,_e.g. "SYSTEM_PROPERTIES_MODE_OVERRIDE"._@param constantName name of the constant_@throws java.lang.IllegalArgumentException if an invalid constant was specified_@see #setSystemPropertiesMode;public void setSystemPropertiesModeName(String constantName) throws IllegalArgumentException {_		this.systemPropertiesMode = constants.asNumber(constantName).intValue()__	};set,the,system,property,mode,by,the,name,of,the,corresponding,constant,e,g,param,constant,name,name,of,the,constant,throws,java,lang,illegal,argument,exception,if,an,invalid,constant,was,specified,see,set,system,properties,mode;public,void,set,system,properties,mode,name,string,constant,name,throws,illegal,argument,exception,this,system,properties,mode,constants,as,number,constant,name,int,value
PropertyPlaceholderConfigurer -> public void setSystemPropertiesModeName(String constantName) throws IllegalArgumentException;1490722023;Set the system property mode by the name of the corresponding constant,_e.g. "SYSTEM_PROPERTIES_MODE_OVERRIDE"._@param constantName name of the constant_@throws java.lang.IllegalArgumentException if an invalid constant was specified_@see #setSystemPropertiesMode;public void setSystemPropertiesModeName(String constantName) throws IllegalArgumentException {_		this.systemPropertiesMode = constants.asNumber(constantName).intValue()__	};set,the,system,property,mode,by,the,name,of,the,corresponding,constant,e,g,param,constant,name,name,of,the,constant,throws,java,lang,illegal,argument,exception,if,an,invalid,constant,was,specified,see,set,system,properties,mode;public,void,set,system,properties,mode,name,string,constant,name,throws,illegal,argument,exception,this,system,properties,mode,constants,as,number,constant,name,int,value
PropertyPlaceholderConfigurer -> public void setSystemPropertiesModeName(String constantName) throws IllegalArgumentException;1495868221;Set the system property mode by the name of the corresponding constant,_e.g. "SYSTEM_PROPERTIES_MODE_OVERRIDE"._@param constantName name of the constant_@throws java.lang.IllegalArgumentException if an invalid constant was specified_@see #setSystemPropertiesMode;public void setSystemPropertiesModeName(String constantName) throws IllegalArgumentException {_		this.systemPropertiesMode = constants.asNumber(constantName).intValue()__	};set,the,system,property,mode,by,the,name,of,the,corresponding,constant,e,g,param,constant,name,name,of,the,constant,throws,java,lang,illegal,argument,exception,if,an,invalid,constant,was,specified,see,set,system,properties,mode;public,void,set,system,properties,mode,name,string,constant,name,throws,illegal,argument,exception,this,system,properties,mode,constants,as,number,constant,name,int,value
PropertyPlaceholderConfigurer -> public void setSystemPropertiesModeName(String constantName) throws IllegalArgumentException;1496242568;Set the system property mode by the name of the corresponding constant,_e.g. "SYSTEM_PROPERTIES_MODE_OVERRIDE"._@param constantName name of the constant_@throws java.lang.IllegalArgumentException if an invalid constant was specified_@see #setSystemPropertiesMode;public void setSystemPropertiesModeName(String constantName) throws IllegalArgumentException {_		this.systemPropertiesMode = constants.asNumber(constantName).intValue()__	};set,the,system,property,mode,by,the,name,of,the,corresponding,constant,e,g,param,constant,name,name,of,the,constant,throws,java,lang,illegal,argument,exception,if,an,invalid,constant,was,specified,see,set,system,properties,mode;public,void,set,system,properties,mode,name,string,constant,name,throws,illegal,argument,exception,this,system,properties,mode,constants,as,number,constant,name,int,value
PropertyPlaceholderConfigurer -> public void setSystemPropertiesModeName(String constantName) throws IllegalArgumentException;1496837955;Set the system property mode by the name of the corresponding constant,_e.g. "SYSTEM_PROPERTIES_MODE_OVERRIDE"._@param constantName name of the constant_@throws java.lang.IllegalArgumentException if an invalid constant was specified_@see #setSystemPropertiesMode;public void setSystemPropertiesModeName(String constantName) throws IllegalArgumentException {_		this.systemPropertiesMode = constants.asNumber(constantName).intValue()__	};set,the,system,property,mode,by,the,name,of,the,corresponding,constant,e,g,param,constant,name,name,of,the,constant,throws,java,lang,illegal,argument,exception,if,an,invalid,constant,was,specified,see,set,system,properties,mode;public,void,set,system,properties,mode,name,string,constant,name,throws,illegal,argument,exception,this,system,properties,mode,constants,as,number,constant,name,int,value
PropertyPlaceholderConfigurer -> public void setSystemPropertiesModeName(String constantName) throws IllegalArgumentException;1502974979;Set the system property mode by the name of the corresponding constant,_e.g. "SYSTEM_PROPERTIES_MODE_OVERRIDE"._@param constantName name of the constant_@throws java.lang.IllegalArgumentException if an invalid constant was specified_@see #setSystemPropertiesMode;public void setSystemPropertiesModeName(String constantName) throws IllegalArgumentException {_		this.systemPropertiesMode = constants.asNumber(constantName).intValue()__	};set,the,system,property,mode,by,the,name,of,the,corresponding,constant,e,g,param,constant,name,name,of,the,constant,throws,java,lang,illegal,argument,exception,if,an,invalid,constant,was,specified,see,set,system,properties,mode;public,void,set,system,properties,mode,name,string,constant,name,throws,illegal,argument,exception,this,system,properties,mode,constants,as,number,constant,name,int,value
PropertyPlaceholderConfigurer -> public void setSystemPropertiesModeName(String constantName) throws IllegalArgumentException;1530174524;Set the system property mode by the name of the corresponding constant,_e.g. "SYSTEM_PROPERTIES_MODE_OVERRIDE"._@param constantName name of the constant_@throws java.lang.IllegalArgumentException if an invalid constant was specified_@see #setSystemPropertiesMode;public void setSystemPropertiesModeName(String constantName) throws IllegalArgumentException {_		this.systemPropertiesMode = constants.asNumber(constantName).intValue()__	};set,the,system,property,mode,by,the,name,of,the,corresponding,constant,e,g,param,constant,name,name,of,the,constant,throws,java,lang,illegal,argument,exception,if,an,invalid,constant,was,specified,see,set,system,properties,mode;public,void,set,system,properties,mode,name,string,constant,name,throws,illegal,argument,exception,this,system,properties,mode,constants,as,number,constant,name,int,value
PropertyPlaceholderConfigurer -> public void setSystemPropertiesModeName(String constantName) throws IllegalArgumentException;1530174524;Set the system property mode by the name of the corresponding constant,_e.g. "SYSTEM_PROPERTIES_MODE_OVERRIDE"._@param constantName name of the constant_@throws java.lang.IllegalArgumentException if an invalid constant was specified_@see #setSystemPropertiesMode;public void setSystemPropertiesModeName(String constantName) throws IllegalArgumentException {_		this.systemPropertiesMode = constants.asNumber(constantName).intValue()__	};set,the,system,property,mode,by,the,name,of,the,corresponding,constant,e,g,param,constant,name,name,of,the,constant,throws,java,lang,illegal,argument,exception,if,an,invalid,constant,was,specified,see,set,system,properties,mode;public,void,set,system,properties,mode,name,string,constant,name,throws,illegal,argument,exception,this,system,properties,mode,constants,as,number,constant,name,int,value
PropertyPlaceholderConfigurer -> public void setSystemPropertiesModeName(String constantName) throws IllegalArgumentException;1546963894;Set the system property mode by the name of the corresponding constant,_e.g. "SYSTEM_PROPERTIES_MODE_OVERRIDE"._@param constantName name of the constant_@see #setSystemPropertiesMode;public void setSystemPropertiesModeName(String constantName) throws IllegalArgumentException {_		this.systemPropertiesMode = constants.asNumber(constantName).intValue()__	};set,the,system,property,mode,by,the,name,of,the,corresponding,constant,e,g,param,constant,name,name,of,the,constant,see,set,system,properties,mode;public,void,set,system,properties,mode,name,string,constant,name,throws,illegal,argument,exception,this,system,properties,mode,constants,as,number,constant,name,int,value
PropertyPlaceholderConfigurer -> public void setSystemPropertiesModeName(String constantName) throws IllegalArgumentException;1546981033;Set the system property mode by the name of the corresponding constant,_e.g. "SYSTEM_PROPERTIES_MODE_OVERRIDE"._@param constantName name of the constant_@see #setSystemPropertiesMode;public void setSystemPropertiesModeName(String constantName) throws IllegalArgumentException {_		this.systemPropertiesMode = constants.asNumber(constantName).intValue()__	};set,the,system,property,mode,by,the,name,of,the,corresponding,constant,e,g,param,constant,name,name,of,the,constant,see,set,system,properties,mode;public,void,set,system,properties,mode,name,string,constant,name,throws,illegal,argument,exception,this,system,properties,mode,constants,as,number,constant,name,int,value
PropertyPlaceholderConfigurer -> public void setSystemPropertiesModeName(String constantName) throws IllegalArgumentException;1549465224;Set the system property mode by the name of the corresponding constant,_e.g. "SYSTEM_PROPERTIES_MODE_OVERRIDE"._@param constantName name of the constant_@see #setSystemPropertiesMode;public void setSystemPropertiesModeName(String constantName) throws IllegalArgumentException {_		this.systemPropertiesMode = constants.asNumber(constantName).intValue()__	};set,the,system,property,mode,by,the,name,of,the,corresponding,constant,e,g,param,constant,name,name,of,the,constant,see,set,system,properties,mode;public,void,set,system,properties,mode,name,string,constant,name,throws,illegal,argument,exception,this,system,properties,mode,constants,as,number,constant,name,int,value
PropertyPlaceholderConfigurer -> public void setSystemPropertiesModeName(String constantName) throws IllegalArgumentException;1549554785;Set the system property mode by the name of the corresponding constant,_e.g. "SYSTEM_PROPERTIES_MODE_OVERRIDE"._@param constantName name of the constant_@see #setSystemPropertiesMode;public void setSystemPropertiesModeName(String constantName) throws IllegalArgumentException {_		this.systemPropertiesMode = constants.asNumber(constantName).intValue()__	};set,the,system,property,mode,by,the,name,of,the,corresponding,constant,e,g,param,constant,name,name,of,the,constant,see,set,system,properties,mode;public,void,set,system,properties,mode,name,string,constant,name,throws,illegal,argument,exception,this,system,properties,mode,constants,as,number,constant,name,int,value
PropertyPlaceholderConfigurer -> public void setSystemPropertiesMode(int systemPropertiesMode);1328020251;Set how to check system properties: as fallback, as override, or never._For example, will resolve ${user.dir} to the "user.dir" system property._<p>The default is "fallback": If not being able to resolve a placeholder_with the specified properties, a system property will be tried._"override" will check for a system property first, before trying the_specified properties. "never" will not check system properties at all._@see #SYSTEM_PROPERTIES_MODE_NEVER_@see #SYSTEM_PROPERTIES_MODE_FALLBACK_@see #SYSTEM_PROPERTIES_MODE_OVERRIDE_@see #setSystemPropertiesModeName;public void setSystemPropertiesMode(int systemPropertiesMode) {_		this.systemPropertiesMode = systemPropertiesMode__	};set,how,to,check,system,properties,as,fallback,as,override,or,never,for,example,will,resolve,user,dir,to,the,user,dir,system,property,p,the,default,is,fallback,if,not,being,able,to,resolve,a,placeholder,with,the,specified,properties,a,system,property,will,be,tried,override,will,check,for,a,system,property,first,before,trying,the,specified,properties,never,will,not,check,system,properties,at,all,see,see,see,see,set,system,properties,mode,name;public,void,set,system,properties,mode,int,system,properties,mode,this,system,properties,mode,system,properties,mode
PropertyPlaceholderConfigurer -> public void setSystemPropertiesMode(int systemPropertiesMode);1355313310;Set how to check system properties: as fallback, as override, or never._For example, will resolve ${user.dir} to the "user.dir" system property._<p>The default is "fallback": If not being able to resolve a placeholder_with the specified properties, a system property will be tried._"override" will check for a system property first, before trying the_specified properties. "never" will not check system properties at all._@see #SYSTEM_PROPERTIES_MODE_NEVER_@see #SYSTEM_PROPERTIES_MODE_FALLBACK_@see #SYSTEM_PROPERTIES_MODE_OVERRIDE_@see #setSystemPropertiesModeName;public void setSystemPropertiesMode(int systemPropertiesMode) {_		this.systemPropertiesMode = systemPropertiesMode__	};set,how,to,check,system,properties,as,fallback,as,override,or,never,for,example,will,resolve,user,dir,to,the,user,dir,system,property,p,the,default,is,fallback,if,not,being,able,to,resolve,a,placeholder,with,the,specified,properties,a,system,property,will,be,tried,override,will,check,for,a,system,property,first,before,trying,the,specified,properties,never,will,not,check,system,properties,at,all,see,see,see,see,set,system,properties,mode,name;public,void,set,system,properties,mode,int,system,properties,mode,this,system,properties,mode,system,properties,mode
PropertyPlaceholderConfigurer -> public void setSystemPropertiesMode(int systemPropertiesMode);1356735495;Set how to check system properties: as fallback, as override, or never._For example, will resolve ${user.dir} to the "user.dir" system property._<p>The default is "fallback": If not being able to resolve a placeholder_with the specified properties, a system property will be tried._"override" will check for a system property first, before trying the_specified properties. "never" will not check system properties at all._@see #SYSTEM_PROPERTIES_MODE_NEVER_@see #SYSTEM_PROPERTIES_MODE_FALLBACK_@see #SYSTEM_PROPERTIES_MODE_OVERRIDE_@see #setSystemPropertiesModeName;public void setSystemPropertiesMode(int systemPropertiesMode) {_		this.systemPropertiesMode = systemPropertiesMode__	};set,how,to,check,system,properties,as,fallback,as,override,or,never,for,example,will,resolve,user,dir,to,the,user,dir,system,property,p,the,default,is,fallback,if,not,being,able,to,resolve,a,placeholder,with,the,specified,properties,a,system,property,will,be,tried,override,will,check,for,a,system,property,first,before,trying,the,specified,properties,never,will,not,check,system,properties,at,all,see,see,see,see,set,system,properties,mode,name;public,void,set,system,properties,mode,int,system,properties,mode,this,system,properties,mode,system,properties,mode
PropertyPlaceholderConfigurer -> public void setSystemPropertiesMode(int systemPropertiesMode);1357119239;Set how to check system properties: as fallback, as override, or never._For example, will resolve ${user.dir} to the "user.dir" system property._<p>The default is "fallback": If not being able to resolve a placeholder_with the specified properties, a system property will be tried._"override" will check for a system property first, before trying the_specified properties. "never" will not check system properties at all._@see #SYSTEM_PROPERTIES_MODE_NEVER_@see #SYSTEM_PROPERTIES_MODE_FALLBACK_@see #SYSTEM_PROPERTIES_MODE_OVERRIDE_@see #setSystemPropertiesModeName;public void setSystemPropertiesMode(int systemPropertiesMode) {_		this.systemPropertiesMode = systemPropertiesMode__	};set,how,to,check,system,properties,as,fallback,as,override,or,never,for,example,will,resolve,user,dir,to,the,user,dir,system,property,p,the,default,is,fallback,if,not,being,able,to,resolve,a,placeholder,with,the,specified,properties,a,system,property,will,be,tried,override,will,check,for,a,system,property,first,before,trying,the,specified,properties,never,will,not,check,system,properties,at,all,see,see,see,see,set,system,properties,mode,name;public,void,set,system,properties,mode,int,system,properties,mode,this,system,properties,mode,system,properties,mode
PropertyPlaceholderConfigurer -> public void setSystemPropertiesMode(int systemPropertiesMode);1368482696;Set how to check system properties: as fallback, as override, or never._For example, will resolve ${user.dir} to the "user.dir" system property._<p>The default is "fallback": If not being able to resolve a placeholder_with the specified properties, a system property will be tried._"override" will check for a system property first, before trying the_specified properties. "never" will not check system properties at all._@see #SYSTEM_PROPERTIES_MODE_NEVER_@see #SYSTEM_PROPERTIES_MODE_FALLBACK_@see #SYSTEM_PROPERTIES_MODE_OVERRIDE_@see #setSystemPropertiesModeName;public void setSystemPropertiesMode(int systemPropertiesMode) {_		this.systemPropertiesMode = systemPropertiesMode__	};set,how,to,check,system,properties,as,fallback,as,override,or,never,for,example,will,resolve,user,dir,to,the,user,dir,system,property,p,the,default,is,fallback,if,not,being,able,to,resolve,a,placeholder,with,the,specified,properties,a,system,property,will,be,tried,override,will,check,for,a,system,property,first,before,trying,the,specified,properties,never,will,not,check,system,properties,at,all,see,see,see,see,set,system,properties,mode,name;public,void,set,system,properties,mode,int,system,properties,mode,this,system,properties,mode,system,properties,mode
PropertyPlaceholderConfigurer -> public void setSystemPropertiesMode(int systemPropertiesMode);1389804257;Set how to check system properties: as fallback, as override, or never._For example, will resolve ${user.dir} to the "user.dir" system property._<p>The default is "fallback": If not being able to resolve a placeholder_with the specified properties, a system property will be tried._"override" will check for a system property first, before trying the_specified properties. "never" will not check system properties at all._@see #SYSTEM_PROPERTIES_MODE_NEVER_@see #SYSTEM_PROPERTIES_MODE_FALLBACK_@see #SYSTEM_PROPERTIES_MODE_OVERRIDE_@see #setSystemPropertiesModeName;public void setSystemPropertiesMode(int systemPropertiesMode) {_		this.systemPropertiesMode = systemPropertiesMode__	};set,how,to,check,system,properties,as,fallback,as,override,or,never,for,example,will,resolve,user,dir,to,the,user,dir,system,property,p,the,default,is,fallback,if,not,being,able,to,resolve,a,placeholder,with,the,specified,properties,a,system,property,will,be,tried,override,will,check,for,a,system,property,first,before,trying,the,specified,properties,never,will,not,check,system,properties,at,all,see,see,see,see,set,system,properties,mode,name;public,void,set,system,properties,mode,int,system,properties,mode,this,system,properties,mode,system,properties,mode
PropertyPlaceholderConfigurer -> public void setSystemPropertiesMode(int systemPropertiesMode);1390576922;Set how to check system properties: as fallback, as override, or never._For example, will resolve ${user.dir} to the "user.dir" system property._<p>The default is "fallback": If not being able to resolve a placeholder_with the specified properties, a system property will be tried._"override" will check for a system property first, before trying the_specified properties. "never" will not check system properties at all._@see #SYSTEM_PROPERTIES_MODE_NEVER_@see #SYSTEM_PROPERTIES_MODE_FALLBACK_@see #SYSTEM_PROPERTIES_MODE_OVERRIDE_@see #setSystemPropertiesModeName;public void setSystemPropertiesMode(int systemPropertiesMode) {_		this.systemPropertiesMode = systemPropertiesMode__	};set,how,to,check,system,properties,as,fallback,as,override,or,never,for,example,will,resolve,user,dir,to,the,user,dir,system,property,p,the,default,is,fallback,if,not,being,able,to,resolve,a,placeholder,with,the,specified,properties,a,system,property,will,be,tried,override,will,check,for,a,system,property,first,before,trying,the,specified,properties,never,will,not,check,system,properties,at,all,see,see,see,see,set,system,properties,mode,name;public,void,set,system,properties,mode,int,system,properties,mode,this,system,properties,mode,system,properties,mode
PropertyPlaceholderConfigurer -> public void setSystemPropertiesMode(int systemPropertiesMode);1425578217;Set how to check system properties: as fallback, as override, or never._For example, will resolve ${user.dir} to the "user.dir" system property._<p>The default is "fallback": If not being able to resolve a placeholder_with the specified properties, a system property will be tried._"override" will check for a system property first, before trying the_specified properties. "never" will not check system properties at all._@see #SYSTEM_PROPERTIES_MODE_NEVER_@see #SYSTEM_PROPERTIES_MODE_FALLBACK_@see #SYSTEM_PROPERTIES_MODE_OVERRIDE_@see #setSystemPropertiesModeName;public void setSystemPropertiesMode(int systemPropertiesMode) {_		this.systemPropertiesMode = systemPropertiesMode__	};set,how,to,check,system,properties,as,fallback,as,override,or,never,for,example,will,resolve,user,dir,to,the,user,dir,system,property,p,the,default,is,fallback,if,not,being,able,to,resolve,a,placeholder,with,the,specified,properties,a,system,property,will,be,tried,override,will,check,for,a,system,property,first,before,trying,the,specified,properties,never,will,not,check,system,properties,at,all,see,see,see,see,set,system,properties,mode,name;public,void,set,system,properties,mode,int,system,properties,mode,this,system,properties,mode,system,properties,mode
PropertyPlaceholderConfigurer -> public void setSystemPropertiesMode(int systemPropertiesMode);1455905979;Set how to check system properties: as fallback, as override, or never._For example, will resolve ${user.dir} to the "user.dir" system property._<p>The default is "fallback": If not being able to resolve a placeholder_with the specified properties, a system property will be tried._"override" will check for a system property first, before trying the_specified properties. "never" will not check system properties at all._@see #SYSTEM_PROPERTIES_MODE_NEVER_@see #SYSTEM_PROPERTIES_MODE_FALLBACK_@see #SYSTEM_PROPERTIES_MODE_OVERRIDE_@see #setSystemPropertiesModeName;public void setSystemPropertiesMode(int systemPropertiesMode) {_		this.systemPropertiesMode = systemPropertiesMode__	};set,how,to,check,system,properties,as,fallback,as,override,or,never,for,example,will,resolve,user,dir,to,the,user,dir,system,property,p,the,default,is,fallback,if,not,being,able,to,resolve,a,placeholder,with,the,specified,properties,a,system,property,will,be,tried,override,will,check,for,a,system,property,first,before,trying,the,specified,properties,never,will,not,check,system,properties,at,all,see,see,see,see,set,system,properties,mode,name;public,void,set,system,properties,mode,int,system,properties,mode,this,system,properties,mode,system,properties,mode
PropertyPlaceholderConfigurer -> public void setSystemPropertiesMode(int systemPropertiesMode);1467726769;Set how to check system properties: as fallback, as override, or never._For example, will resolve ${user.dir} to the "user.dir" system property._<p>The default is "fallback": If not being able to resolve a placeholder_with the specified properties, a system property will be tried._"override" will check for a system property first, before trying the_specified properties. "never" will not check system properties at all._@see #SYSTEM_PROPERTIES_MODE_NEVER_@see #SYSTEM_PROPERTIES_MODE_FALLBACK_@see #SYSTEM_PROPERTIES_MODE_OVERRIDE_@see #setSystemPropertiesModeName;public void setSystemPropertiesMode(int systemPropertiesMode) {_		this.systemPropertiesMode = systemPropertiesMode__	};set,how,to,check,system,properties,as,fallback,as,override,or,never,for,example,will,resolve,user,dir,to,the,user,dir,system,property,p,the,default,is,fallback,if,not,being,able,to,resolve,a,placeholder,with,the,specified,properties,a,system,property,will,be,tried,override,will,check,for,a,system,property,first,before,trying,the,specified,properties,never,will,not,check,system,properties,at,all,see,see,see,see,set,system,properties,mode,name;public,void,set,system,properties,mode,int,system,properties,mode,this,system,properties,mode,system,properties,mode
PropertyPlaceholderConfigurer -> public void setSystemPropertiesMode(int systemPropertiesMode);1490722023;Set how to check system properties: as fallback, as override, or never._For example, will resolve ${user.dir} to the "user.dir" system property._<p>The default is "fallback": If not being able to resolve a placeholder_with the specified properties, a system property will be tried._"override" will check for a system property first, before trying the_specified properties. "never" will not check system properties at all._@see #SYSTEM_PROPERTIES_MODE_NEVER_@see #SYSTEM_PROPERTIES_MODE_FALLBACK_@see #SYSTEM_PROPERTIES_MODE_OVERRIDE_@see #setSystemPropertiesModeName;public void setSystemPropertiesMode(int systemPropertiesMode) {_		this.systemPropertiesMode = systemPropertiesMode__	};set,how,to,check,system,properties,as,fallback,as,override,or,never,for,example,will,resolve,user,dir,to,the,user,dir,system,property,p,the,default,is,fallback,if,not,being,able,to,resolve,a,placeholder,with,the,specified,properties,a,system,property,will,be,tried,override,will,check,for,a,system,property,first,before,trying,the,specified,properties,never,will,not,check,system,properties,at,all,see,see,see,see,set,system,properties,mode,name;public,void,set,system,properties,mode,int,system,properties,mode,this,system,properties,mode,system,properties,mode
PropertyPlaceholderConfigurer -> public void setSystemPropertiesMode(int systemPropertiesMode);1495868221;Set how to check system properties: as fallback, as override, or never._For example, will resolve ${user.dir} to the "user.dir" system property._<p>The default is "fallback": If not being able to resolve a placeholder_with the specified properties, a system property will be tried._"override" will check for a system property first, before trying the_specified properties. "never" will not check system properties at all._@see #SYSTEM_PROPERTIES_MODE_NEVER_@see #SYSTEM_PROPERTIES_MODE_FALLBACK_@see #SYSTEM_PROPERTIES_MODE_OVERRIDE_@see #setSystemPropertiesModeName;public void setSystemPropertiesMode(int systemPropertiesMode) {_		this.systemPropertiesMode = systemPropertiesMode__	};set,how,to,check,system,properties,as,fallback,as,override,or,never,for,example,will,resolve,user,dir,to,the,user,dir,system,property,p,the,default,is,fallback,if,not,being,able,to,resolve,a,placeholder,with,the,specified,properties,a,system,property,will,be,tried,override,will,check,for,a,system,property,first,before,trying,the,specified,properties,never,will,not,check,system,properties,at,all,see,see,see,see,set,system,properties,mode,name;public,void,set,system,properties,mode,int,system,properties,mode,this,system,properties,mode,system,properties,mode
PropertyPlaceholderConfigurer -> public void setSystemPropertiesMode(int systemPropertiesMode);1496242568;Set how to check system properties: as fallback, as override, or never._For example, will resolve ${user.dir} to the "user.dir" system property._<p>The default is "fallback": If not being able to resolve a placeholder_with the specified properties, a system property will be tried._"override" will check for a system property first, before trying the_specified properties. "never" will not check system properties at all._@see #SYSTEM_PROPERTIES_MODE_NEVER_@see #SYSTEM_PROPERTIES_MODE_FALLBACK_@see #SYSTEM_PROPERTIES_MODE_OVERRIDE_@see #setSystemPropertiesModeName;public void setSystemPropertiesMode(int systemPropertiesMode) {_		this.systemPropertiesMode = systemPropertiesMode__	};set,how,to,check,system,properties,as,fallback,as,override,or,never,for,example,will,resolve,user,dir,to,the,user,dir,system,property,p,the,default,is,fallback,if,not,being,able,to,resolve,a,placeholder,with,the,specified,properties,a,system,property,will,be,tried,override,will,check,for,a,system,property,first,before,trying,the,specified,properties,never,will,not,check,system,properties,at,all,see,see,see,see,set,system,properties,mode,name;public,void,set,system,properties,mode,int,system,properties,mode,this,system,properties,mode,system,properties,mode
PropertyPlaceholderConfigurer -> public void setSystemPropertiesMode(int systemPropertiesMode);1496837955;Set how to check system properties: as fallback, as override, or never._For example, will resolve ${user.dir} to the "user.dir" system property._<p>The default is "fallback": If not being able to resolve a placeholder_with the specified properties, a system property will be tried._"override" will check for a system property first, before trying the_specified properties. "never" will not check system properties at all._@see #SYSTEM_PROPERTIES_MODE_NEVER_@see #SYSTEM_PROPERTIES_MODE_FALLBACK_@see #SYSTEM_PROPERTIES_MODE_OVERRIDE_@see #setSystemPropertiesModeName;public void setSystemPropertiesMode(int systemPropertiesMode) {_		this.systemPropertiesMode = systemPropertiesMode__	};set,how,to,check,system,properties,as,fallback,as,override,or,never,for,example,will,resolve,user,dir,to,the,user,dir,system,property,p,the,default,is,fallback,if,not,being,able,to,resolve,a,placeholder,with,the,specified,properties,a,system,property,will,be,tried,override,will,check,for,a,system,property,first,before,trying,the,specified,properties,never,will,not,check,system,properties,at,all,see,see,see,see,set,system,properties,mode,name;public,void,set,system,properties,mode,int,system,properties,mode,this,system,properties,mode,system,properties,mode
PropertyPlaceholderConfigurer -> public void setSystemPropertiesMode(int systemPropertiesMode);1502974979;Set how to check system properties: as fallback, as override, or never._For example, will resolve ${user.dir} to the "user.dir" system property._<p>The default is "fallback": If not being able to resolve a placeholder_with the specified properties, a system property will be tried._"override" will check for a system property first, before trying the_specified properties. "never" will not check system properties at all._@see #SYSTEM_PROPERTIES_MODE_NEVER_@see #SYSTEM_PROPERTIES_MODE_FALLBACK_@see #SYSTEM_PROPERTIES_MODE_OVERRIDE_@see #setSystemPropertiesModeName;public void setSystemPropertiesMode(int systemPropertiesMode) {_		this.systemPropertiesMode = systemPropertiesMode__	};set,how,to,check,system,properties,as,fallback,as,override,or,never,for,example,will,resolve,user,dir,to,the,user,dir,system,property,p,the,default,is,fallback,if,not,being,able,to,resolve,a,placeholder,with,the,specified,properties,a,system,property,will,be,tried,override,will,check,for,a,system,property,first,before,trying,the,specified,properties,never,will,not,check,system,properties,at,all,see,see,see,see,set,system,properties,mode,name;public,void,set,system,properties,mode,int,system,properties,mode,this,system,properties,mode,system,properties,mode
PropertyPlaceholderConfigurer -> public void setSystemPropertiesMode(int systemPropertiesMode);1530174524;Set how to check system properties: as fallback, as override, or never._For example, will resolve ${user.dir} to the "user.dir" system property._<p>The default is "fallback": If not being able to resolve a placeholder_with the specified properties, a system property will be tried._"override" will check for a system property first, before trying the_specified properties. "never" will not check system properties at all._@see #SYSTEM_PROPERTIES_MODE_NEVER_@see #SYSTEM_PROPERTIES_MODE_FALLBACK_@see #SYSTEM_PROPERTIES_MODE_OVERRIDE_@see #setSystemPropertiesModeName;public void setSystemPropertiesMode(int systemPropertiesMode) {_		this.systemPropertiesMode = systemPropertiesMode__	};set,how,to,check,system,properties,as,fallback,as,override,or,never,for,example,will,resolve,user,dir,to,the,user,dir,system,property,p,the,default,is,fallback,if,not,being,able,to,resolve,a,placeholder,with,the,specified,properties,a,system,property,will,be,tried,override,will,check,for,a,system,property,first,before,trying,the,specified,properties,never,will,not,check,system,properties,at,all,see,see,see,see,set,system,properties,mode,name;public,void,set,system,properties,mode,int,system,properties,mode,this,system,properties,mode,system,properties,mode
PropertyPlaceholderConfigurer -> public void setSystemPropertiesMode(int systemPropertiesMode);1530174524;Set how to check system properties: as fallback, as override, or never._For example, will resolve ${user.dir} to the "user.dir" system property._<p>The default is "fallback": If not being able to resolve a placeholder_with the specified properties, a system property will be tried._"override" will check for a system property first, before trying the_specified properties. "never" will not check system properties at all._@see #SYSTEM_PROPERTIES_MODE_NEVER_@see #SYSTEM_PROPERTIES_MODE_FALLBACK_@see #SYSTEM_PROPERTIES_MODE_OVERRIDE_@see #setSystemPropertiesModeName;public void setSystemPropertiesMode(int systemPropertiesMode) {_		this.systemPropertiesMode = systemPropertiesMode__	};set,how,to,check,system,properties,as,fallback,as,override,or,never,for,example,will,resolve,user,dir,to,the,user,dir,system,property,p,the,default,is,fallback,if,not,being,able,to,resolve,a,placeholder,with,the,specified,properties,a,system,property,will,be,tried,override,will,check,for,a,system,property,first,before,trying,the,specified,properties,never,will,not,check,system,properties,at,all,see,see,see,see,set,system,properties,mode,name;public,void,set,system,properties,mode,int,system,properties,mode,this,system,properties,mode,system,properties,mode
PropertyPlaceholderConfigurer -> public void setSystemPropertiesMode(int systemPropertiesMode);1546963894;Set how to check system properties: as fallback, as override, or never._For example, will resolve ${user.dir} to the "user.dir" system property._<p>The default is "fallback": If not being able to resolve a placeholder_with the specified properties, a system property will be tried._"override" will check for a system property first, before trying the_specified properties. "never" will not check system properties at all._@see #SYSTEM_PROPERTIES_MODE_NEVER_@see #SYSTEM_PROPERTIES_MODE_FALLBACK_@see #SYSTEM_PROPERTIES_MODE_OVERRIDE_@see #setSystemPropertiesModeName;public void setSystemPropertiesMode(int systemPropertiesMode) {_		this.systemPropertiesMode = systemPropertiesMode__	};set,how,to,check,system,properties,as,fallback,as,override,or,never,for,example,will,resolve,user,dir,to,the,user,dir,system,property,p,the,default,is,fallback,if,not,being,able,to,resolve,a,placeholder,with,the,specified,properties,a,system,property,will,be,tried,override,will,check,for,a,system,property,first,before,trying,the,specified,properties,never,will,not,check,system,properties,at,all,see,see,see,see,set,system,properties,mode,name;public,void,set,system,properties,mode,int,system,properties,mode,this,system,properties,mode,system,properties,mode
PropertyPlaceholderConfigurer -> public void setSystemPropertiesMode(int systemPropertiesMode);1546981033;Set how to check system properties: as fallback, as override, or never._For example, will resolve ${user.dir} to the "user.dir" system property._<p>The default is "fallback": If not being able to resolve a placeholder_with the specified properties, a system property will be tried._"override" will check for a system property first, before trying the_specified properties. "never" will not check system properties at all._@see #SYSTEM_PROPERTIES_MODE_NEVER_@see #SYSTEM_PROPERTIES_MODE_FALLBACK_@see #SYSTEM_PROPERTIES_MODE_OVERRIDE_@see #setSystemPropertiesModeName;public void setSystemPropertiesMode(int systemPropertiesMode) {_		this.systemPropertiesMode = systemPropertiesMode__	};set,how,to,check,system,properties,as,fallback,as,override,or,never,for,example,will,resolve,user,dir,to,the,user,dir,system,property,p,the,default,is,fallback,if,not,being,able,to,resolve,a,placeholder,with,the,specified,properties,a,system,property,will,be,tried,override,will,check,for,a,system,property,first,before,trying,the,specified,properties,never,will,not,check,system,properties,at,all,see,see,see,see,set,system,properties,mode,name;public,void,set,system,properties,mode,int,system,properties,mode,this,system,properties,mode,system,properties,mode
PropertyPlaceholderConfigurer -> public void setSystemPropertiesMode(int systemPropertiesMode);1549465224;Set how to check system properties: as fallback, as override, or never._For example, will resolve ${user.dir} to the "user.dir" system property._<p>The default is "fallback": If not being able to resolve a placeholder_with the specified properties, a system property will be tried._"override" will check for a system property first, before trying the_specified properties. "never" will not check system properties at all._@see #SYSTEM_PROPERTIES_MODE_NEVER_@see #SYSTEM_PROPERTIES_MODE_FALLBACK_@see #SYSTEM_PROPERTIES_MODE_OVERRIDE_@see #setSystemPropertiesModeName;public void setSystemPropertiesMode(int systemPropertiesMode) {_		this.systemPropertiesMode = systemPropertiesMode__	};set,how,to,check,system,properties,as,fallback,as,override,or,never,for,example,will,resolve,user,dir,to,the,user,dir,system,property,p,the,default,is,fallback,if,not,being,able,to,resolve,a,placeholder,with,the,specified,properties,a,system,property,will,be,tried,override,will,check,for,a,system,property,first,before,trying,the,specified,properties,never,will,not,check,system,properties,at,all,see,see,see,see,set,system,properties,mode,name;public,void,set,system,properties,mode,int,system,properties,mode,this,system,properties,mode,system,properties,mode
PropertyPlaceholderConfigurer -> public void setSystemPropertiesMode(int systemPropertiesMode);1549554785;Set how to check system properties: as fallback, as override, or never._For example, will resolve ${user.dir} to the "user.dir" system property._<p>The default is "fallback": If not being able to resolve a placeholder_with the specified properties, a system property will be tried._"override" will check for a system property first, before trying the_specified properties. "never" will not check system properties at all._@see #SYSTEM_PROPERTIES_MODE_NEVER_@see #SYSTEM_PROPERTIES_MODE_FALLBACK_@see #SYSTEM_PROPERTIES_MODE_OVERRIDE_@see #setSystemPropertiesModeName;public void setSystemPropertiesMode(int systemPropertiesMode) {_		this.systemPropertiesMode = systemPropertiesMode__	};set,how,to,check,system,properties,as,fallback,as,override,or,never,for,example,will,resolve,user,dir,to,the,user,dir,system,property,p,the,default,is,fallback,if,not,being,able,to,resolve,a,placeholder,with,the,specified,properties,a,system,property,will,be,tried,override,will,check,for,a,system,property,first,before,trying,the,specified,properties,never,will,not,check,system,properties,at,all,see,see,see,see,set,system,properties,mode,name;public,void,set,system,properties,mode,int,system,properties,mode,this,system,properties,mode,system,properties,mode
PropertyPlaceholderConfigurer -> @Deprecated 	protected String parseStringValue(String strVal, Properties props, Set<?> visitedPlaceholders);1328020251;Parse the given String value for placeholder resolution._@param strVal the String value to parse_@param props the Properties to resolve placeholders against_@param visitedPlaceholders the placeholders that have already been visited_during the current resolution attempt (ignored in this version of the code)_@deprecated as of Spring 3.0, in favor of using {@link #resolvePlaceholder}_with {@link org.springframework.util.PropertyPlaceholderHelper}._Only retained for compatibility with Spring 2.5 extensions.;@Deprecated_	protected String parseStringValue(String strVal, Properties props, Set<?> visitedPlaceholders) {_		PropertyPlaceholderHelper helper = new PropertyPlaceholderHelper(_				placeholderPrefix, placeholderSuffix, valueSeparator, ignoreUnresolvablePlaceholders)__		PlaceholderResolver resolver = new PropertyPlaceholderConfigurerResolver(props)__		return helper.replacePlaceholders(strVal, resolver)__	};parse,the,given,string,value,for,placeholder,resolution,param,str,val,the,string,value,to,parse,param,props,the,properties,to,resolve,placeholders,against,param,visited,placeholders,the,placeholders,that,have,already,been,visited,during,the,current,resolution,attempt,ignored,in,this,version,of,the,code,deprecated,as,of,spring,3,0,in,favor,of,using,link,resolve,placeholder,with,link,org,springframework,util,property,placeholder,helper,only,retained,for,compatibility,with,spring,2,5,extensions;deprecated,protected,string,parse,string,value,string,str,val,properties,props,set,visited,placeholders,property,placeholder,helper,helper,new,property,placeholder,helper,placeholder,prefix,placeholder,suffix,value,separator,ignore,unresolvable,placeholders,placeholder,resolver,resolver,new,property,placeholder,configurer,resolver,props,return,helper,replace,placeholders,str,val,resolver
PropertyPlaceholderConfigurer -> @Deprecated 	protected String parseStringValue(String strVal, Properties props, Set<?> visitedPlaceholders);1355313310;Parse the given String value for placeholder resolution._@param strVal the String value to parse_@param props the Properties to resolve placeholders against_@param visitedPlaceholders the placeholders that have already been visited_during the current resolution attempt (ignored in this version of the code)_@deprecated as of Spring 3.0, in favor of using {@link #resolvePlaceholder}_with {@link org.springframework.util.PropertyPlaceholderHelper}._Only retained for compatibility with Spring 2.5 extensions.;@Deprecated_	protected String parseStringValue(String strVal, Properties props, Set<?> visitedPlaceholders) {_		PropertyPlaceholderHelper helper = new PropertyPlaceholderHelper(_				placeholderPrefix, placeholderSuffix, valueSeparator, ignoreUnresolvablePlaceholders)__		PlaceholderResolver resolver = new PropertyPlaceholderConfigurerResolver(props)__		return helper.replacePlaceholders(strVal, resolver)__	};parse,the,given,string,value,for,placeholder,resolution,param,str,val,the,string,value,to,parse,param,props,the,properties,to,resolve,placeholders,against,param,visited,placeholders,the,placeholders,that,have,already,been,visited,during,the,current,resolution,attempt,ignored,in,this,version,of,the,code,deprecated,as,of,spring,3,0,in,favor,of,using,link,resolve,placeholder,with,link,org,springframework,util,property,placeholder,helper,only,retained,for,compatibility,with,spring,2,5,extensions;deprecated,protected,string,parse,string,value,string,str,val,properties,props,set,visited,placeholders,property,placeholder,helper,helper,new,property,placeholder,helper,placeholder,prefix,placeholder,suffix,value,separator,ignore,unresolvable,placeholders,placeholder,resolver,resolver,new,property,placeholder,configurer,resolver,props,return,helper,replace,placeholders,str,val,resolver
PropertyPlaceholderConfigurer -> @Deprecated 	protected String parseStringValue(String strVal, Properties props, Set<?> visitedPlaceholders);1356735495;Parse the given String value for placeholder resolution._@param strVal the String value to parse_@param props the Properties to resolve placeholders against_@param visitedPlaceholders the placeholders that have already been visited_during the current resolution attempt (ignored in this version of the code)_@deprecated as of Spring 3.0, in favor of using {@link #resolvePlaceholder}_with {@link org.springframework.util.PropertyPlaceholderHelper}._Only retained for compatibility with Spring 2.5 extensions.;@Deprecated_	protected String parseStringValue(String strVal, Properties props, Set<?> visitedPlaceholders) {_		PropertyPlaceholderHelper helper = new PropertyPlaceholderHelper(_				placeholderPrefix, placeholderSuffix, valueSeparator, ignoreUnresolvablePlaceholders)__		PlaceholderResolver resolver = new PropertyPlaceholderConfigurerResolver(props)__		return helper.replacePlaceholders(strVal, resolver)__	};parse,the,given,string,value,for,placeholder,resolution,param,str,val,the,string,value,to,parse,param,props,the,properties,to,resolve,placeholders,against,param,visited,placeholders,the,placeholders,that,have,already,been,visited,during,the,current,resolution,attempt,ignored,in,this,version,of,the,code,deprecated,as,of,spring,3,0,in,favor,of,using,link,resolve,placeholder,with,link,org,springframework,util,property,placeholder,helper,only,retained,for,compatibility,with,spring,2,5,extensions;deprecated,protected,string,parse,string,value,string,str,val,properties,props,set,visited,placeholders,property,placeholder,helper,helper,new,property,placeholder,helper,placeholder,prefix,placeholder,suffix,value,separator,ignore,unresolvable,placeholders,placeholder,resolver,resolver,new,property,placeholder,configurer,resolver,props,return,helper,replace,placeholders,str,val,resolver
PropertyPlaceholderConfigurer -> @Deprecated 	protected String parseStringValue(String strVal, Properties props, Set<?> visitedPlaceholders);1357119239;Parse the given String value for placeholder resolution._@param strVal the String value to parse_@param props the Properties to resolve placeholders against_@param visitedPlaceholders the placeholders that have already been visited_during the current resolution attempt (ignored in this version of the code)_@deprecated as of Spring 3.0, in favor of using {@link #resolvePlaceholder}_with {@link org.springframework.util.PropertyPlaceholderHelper}._Only retained for compatibility with Spring 2.5 extensions.;@Deprecated_	protected String parseStringValue(String strVal, Properties props, Set<?> visitedPlaceholders) {_		PropertyPlaceholderHelper helper = new PropertyPlaceholderHelper(_				placeholderPrefix, placeholderSuffix, valueSeparator, ignoreUnresolvablePlaceholders)__		PlaceholderResolver resolver = new PropertyPlaceholderConfigurerResolver(props)__		return helper.replacePlaceholders(strVal, resolver)__	};parse,the,given,string,value,for,placeholder,resolution,param,str,val,the,string,value,to,parse,param,props,the,properties,to,resolve,placeholders,against,param,visited,placeholders,the,placeholders,that,have,already,been,visited,during,the,current,resolution,attempt,ignored,in,this,version,of,the,code,deprecated,as,of,spring,3,0,in,favor,of,using,link,resolve,placeholder,with,link,org,springframework,util,property,placeholder,helper,only,retained,for,compatibility,with,spring,2,5,extensions;deprecated,protected,string,parse,string,value,string,str,val,properties,props,set,visited,placeholders,property,placeholder,helper,helper,new,property,placeholder,helper,placeholder,prefix,placeholder,suffix,value,separator,ignore,unresolvable,placeholders,placeholder,resolver,resolver,new,property,placeholder,configurer,resolver,props,return,helper,replace,placeholders,str,val,resolver
PropertyPlaceholderConfigurer -> @Deprecated 	protected String parseStringValue(String strVal, Properties props, Set<?> visitedPlaceholders);1368482696;Parse the given String value for placeholder resolution._@param strVal the String value to parse_@param props the Properties to resolve placeholders against_@param visitedPlaceholders the placeholders that have already been visited_during the current resolution attempt (ignored in this version of the code)_@deprecated as of Spring 3.0, in favor of using {@link #resolvePlaceholder}_with {@link org.springframework.util.PropertyPlaceholderHelper}._Only retained for compatibility with Spring 2.5 extensions.;@Deprecated_	protected String parseStringValue(String strVal, Properties props, Set<?> visitedPlaceholders) {_		PropertyPlaceholderHelper helper = new PropertyPlaceholderHelper(_				placeholderPrefix, placeholderSuffix, valueSeparator, ignoreUnresolvablePlaceholders)__		PlaceholderResolver resolver = new PropertyPlaceholderConfigurerResolver(props)__		return helper.replacePlaceholders(strVal, resolver)__	};parse,the,given,string,value,for,placeholder,resolution,param,str,val,the,string,value,to,parse,param,props,the,properties,to,resolve,placeholders,against,param,visited,placeholders,the,placeholders,that,have,already,been,visited,during,the,current,resolution,attempt,ignored,in,this,version,of,the,code,deprecated,as,of,spring,3,0,in,favor,of,using,link,resolve,placeholder,with,link,org,springframework,util,property,placeholder,helper,only,retained,for,compatibility,with,spring,2,5,extensions;deprecated,protected,string,parse,string,value,string,str,val,properties,props,set,visited,placeholders,property,placeholder,helper,helper,new,property,placeholder,helper,placeholder,prefix,placeholder,suffix,value,separator,ignore,unresolvable,placeholders,placeholder,resolver,resolver,new,property,placeholder,configurer,resolver,props,return,helper,replace,placeholders,str,val,resolver
PropertyPlaceholderConfigurer -> @Deprecated 	protected String parseStringValue(String strVal, Properties props, Set<?> visitedPlaceholders);1389804257;Parse the given String value for placeholder resolution._@param strVal the String value to parse_@param props the Properties to resolve placeholders against_@param visitedPlaceholders the placeholders that have already been visited_during the current resolution attempt (ignored in this version of the code)_@deprecated as of Spring 3.0, in favor of using {@link #resolvePlaceholder}_with {@link org.springframework.util.PropertyPlaceholderHelper}._Only retained for compatibility with Spring 2.5 extensions.;@Deprecated_	protected String parseStringValue(String strVal, Properties props, Set<?> visitedPlaceholders) {_		PropertyPlaceholderHelper helper = new PropertyPlaceholderHelper(_				placeholderPrefix, placeholderSuffix, valueSeparator, ignoreUnresolvablePlaceholders)__		PlaceholderResolver resolver = new PropertyPlaceholderConfigurerResolver(props)__		return helper.replacePlaceholders(strVal, resolver)__	};parse,the,given,string,value,for,placeholder,resolution,param,str,val,the,string,value,to,parse,param,props,the,properties,to,resolve,placeholders,against,param,visited,placeholders,the,placeholders,that,have,already,been,visited,during,the,current,resolution,attempt,ignored,in,this,version,of,the,code,deprecated,as,of,spring,3,0,in,favor,of,using,link,resolve,placeholder,with,link,org,springframework,util,property,placeholder,helper,only,retained,for,compatibility,with,spring,2,5,extensions;deprecated,protected,string,parse,string,value,string,str,val,properties,props,set,visited,placeholders,property,placeholder,helper,helper,new,property,placeholder,helper,placeholder,prefix,placeholder,suffix,value,separator,ignore,unresolvable,placeholders,placeholder,resolver,resolver,new,property,placeholder,configurer,resolver,props,return,helper,replace,placeholders,str,val,resolver
PropertyPlaceholderConfigurer -> @Deprecated 	protected String parseStringValue(String strVal, Properties props, Set<?> visitedPlaceholders);1390576922;Parse the given String value for placeholder resolution._@param strVal the String value to parse_@param props the Properties to resolve placeholders against_@param visitedPlaceholders the placeholders that have already been visited_during the current resolution attempt (ignored in this version of the code)_@deprecated as of Spring 3.0, in favor of using {@link #resolvePlaceholder}_with {@link org.springframework.util.PropertyPlaceholderHelper}._Only retained for compatibility with Spring 2.5 extensions.;@Deprecated_	protected String parseStringValue(String strVal, Properties props, Set<?> visitedPlaceholders) {_		PropertyPlaceholderHelper helper = new PropertyPlaceholderHelper(_				placeholderPrefix, placeholderSuffix, valueSeparator, ignoreUnresolvablePlaceholders)__		PlaceholderResolver resolver = new PropertyPlaceholderConfigurerResolver(props)__		return helper.replacePlaceholders(strVal, resolver)__	};parse,the,given,string,value,for,placeholder,resolution,param,str,val,the,string,value,to,parse,param,props,the,properties,to,resolve,placeholders,against,param,visited,placeholders,the,placeholders,that,have,already,been,visited,during,the,current,resolution,attempt,ignored,in,this,version,of,the,code,deprecated,as,of,spring,3,0,in,favor,of,using,link,resolve,placeholder,with,link,org,springframework,util,property,placeholder,helper,only,retained,for,compatibility,with,spring,2,5,extensions;deprecated,protected,string,parse,string,value,string,str,val,properties,props,set,visited,placeholders,property,placeholder,helper,helper,new,property,placeholder,helper,placeholder,prefix,placeholder,suffix,value,separator,ignore,unresolvable,placeholders,placeholder,resolver,resolver,new,property,placeholder,configurer,resolver,props,return,helper,replace,placeholders,str,val,resolver
PropertyPlaceholderConfigurer -> @Deprecated 	protected String parseStringValue(String strVal, Properties props, Set<?> visitedPlaceholders);1425578217;Parse the given String value for placeholder resolution._@param strVal the String value to parse_@param props the Properties to resolve placeholders against_@param visitedPlaceholders the placeholders that have already been visited_during the current resolution attempt (ignored in this version of the code)_@deprecated as of Spring 3.0, in favor of using {@link #resolvePlaceholder}_with {@link org.springframework.util.PropertyPlaceholderHelper}._Only retained for compatibility with Spring 2.5 extensions.;@Deprecated_	protected String parseStringValue(String strVal, Properties props, Set<?> visitedPlaceholders) {_		PropertyPlaceholderHelper helper = new PropertyPlaceholderHelper(_				placeholderPrefix, placeholderSuffix, valueSeparator, ignoreUnresolvablePlaceholders)__		PlaceholderResolver resolver = new PropertyPlaceholderConfigurerResolver(props)__		return helper.replacePlaceholders(strVal, resolver)__	};parse,the,given,string,value,for,placeholder,resolution,param,str,val,the,string,value,to,parse,param,props,the,properties,to,resolve,placeholders,against,param,visited,placeholders,the,placeholders,that,have,already,been,visited,during,the,current,resolution,attempt,ignored,in,this,version,of,the,code,deprecated,as,of,spring,3,0,in,favor,of,using,link,resolve,placeholder,with,link,org,springframework,util,property,placeholder,helper,only,retained,for,compatibility,with,spring,2,5,extensions;deprecated,protected,string,parse,string,value,string,str,val,properties,props,set,visited,placeholders,property,placeholder,helper,helper,new,property,placeholder,helper,placeholder,prefix,placeholder,suffix,value,separator,ignore,unresolvable,placeholders,placeholder,resolver,resolver,new,property,placeholder,configurer,resolver,props,return,helper,replace,placeholders,str,val,resolver
PropertyPlaceholderConfigurer -> @Deprecated 	protected String parseStringValue(String strVal, Properties props, Set<?> visitedPlaceholders);1455905979;Parse the given String value for placeholder resolution._@param strVal the String value to parse_@param props the Properties to resolve placeholders against_@param visitedPlaceholders the placeholders that have already been visited_during the current resolution attempt (ignored in this version of the code)_@deprecated as of Spring 3.0, in favor of using {@link #resolvePlaceholder}_with {@link org.springframework.util.PropertyPlaceholderHelper}._Only retained for compatibility with Spring 2.5 extensions.;@Deprecated_	protected String parseStringValue(String strVal, Properties props, Set<?> visitedPlaceholders) {_		PropertyPlaceholderHelper helper = new PropertyPlaceholderHelper(_				placeholderPrefix, placeholderSuffix, valueSeparator, ignoreUnresolvablePlaceholders)__		PlaceholderResolver resolver = new PropertyPlaceholderConfigurerResolver(props)__		return helper.replacePlaceholders(strVal, resolver)__	};parse,the,given,string,value,for,placeholder,resolution,param,str,val,the,string,value,to,parse,param,props,the,properties,to,resolve,placeholders,against,param,visited,placeholders,the,placeholders,that,have,already,been,visited,during,the,current,resolution,attempt,ignored,in,this,version,of,the,code,deprecated,as,of,spring,3,0,in,favor,of,using,link,resolve,placeholder,with,link,org,springframework,util,property,placeholder,helper,only,retained,for,compatibility,with,spring,2,5,extensions;deprecated,protected,string,parse,string,value,string,str,val,properties,props,set,visited,placeholders,property,placeholder,helper,helper,new,property,placeholder,helper,placeholder,prefix,placeholder,suffix,value,separator,ignore,unresolvable,placeholders,placeholder,resolver,resolver,new,property,placeholder,configurer,resolver,props,return,helper,replace,placeholders,str,val,resolver
PropertyPlaceholderConfigurer -> @Nullable 	protected String resolvePlaceholder(String placeholder, Properties props, int systemPropertiesMode);1496837955;Resolve the given placeholder using the given properties, performing_a system properties check according to the given mode._<p>The default implementation delegates to {@code resolvePlaceholder_(placeholder, props)} before/after the system properties check._<p>Subclasses can override this for custom resolution strategies,_including customized points for the system properties check._@param placeholder the placeholder to resolve_@param props the merged properties of this configurer_@param systemPropertiesMode the system properties mode,_according to the constants in this class_@return the resolved value, of null if none_@see #setSystemPropertiesMode_@see System#getProperty_@see #resolvePlaceholder(String, java.util.Properties);@Nullable_	protected String resolvePlaceholder(String placeholder, Properties props, int systemPropertiesMode) {_		String propVal = null__		if (systemPropertiesMode == SYSTEM_PROPERTIES_MODE_OVERRIDE) {_			propVal = resolveSystemProperty(placeholder)__		}_		if (propVal == null) {_			propVal = resolvePlaceholder(placeholder, props)__		}_		if (propVal == null && systemPropertiesMode == SYSTEM_PROPERTIES_MODE_FALLBACK) {_			propVal = resolveSystemProperty(placeholder)__		}_		return propVal__	};resolve,the,given,placeholder,using,the,given,properties,performing,a,system,properties,check,according,to,the,given,mode,p,the,default,implementation,delegates,to,code,resolve,placeholder,placeholder,props,before,after,the,system,properties,check,p,subclasses,can,override,this,for,custom,resolution,strategies,including,customized,points,for,the,system,properties,check,param,placeholder,the,placeholder,to,resolve,param,props,the,merged,properties,of,this,configurer,param,system,properties,mode,the,system,properties,mode,according,to,the,constants,in,this,class,return,the,resolved,value,of,null,if,none,see,set,system,properties,mode,see,system,get,property,see,resolve,placeholder,string,java,util,properties;nullable,protected,string,resolve,placeholder,string,placeholder,properties,props,int,system,properties,mode,string,prop,val,null,if,system,properties,mode,prop,val,resolve,system,property,placeholder,if,prop,val,null,prop,val,resolve,placeholder,placeholder,props,if,prop,val,null,system,properties,mode,prop,val,resolve,system,property,placeholder,return,prop,val
PropertyPlaceholderConfigurer -> @Nullable 	protected String resolvePlaceholder(String placeholder, Properties props, int systemPropertiesMode);1502974979;Resolve the given placeholder using the given properties, performing_a system properties check according to the given mode._<p>The default implementation delegates to {@code resolvePlaceholder_(placeholder, props)} before/after the system properties check._<p>Subclasses can override this for custom resolution strategies,_including customized points for the system properties check._@param placeholder the placeholder to resolve_@param props the merged properties of this configurer_@param systemPropertiesMode the system properties mode,_according to the constants in this class_@return the resolved value, of null if none_@see #setSystemPropertiesMode_@see System#getProperty_@see #resolvePlaceholder(String, java.util.Properties);@Nullable_	protected String resolvePlaceholder(String placeholder, Properties props, int systemPropertiesMode) {_		String propVal = null__		if (systemPropertiesMode == SYSTEM_PROPERTIES_MODE_OVERRIDE) {_			propVal = resolveSystemProperty(placeholder)__		}_		if (propVal == null) {_			propVal = resolvePlaceholder(placeholder, props)__		}_		if (propVal == null && systemPropertiesMode == SYSTEM_PROPERTIES_MODE_FALLBACK) {_			propVal = resolveSystemProperty(placeholder)__		}_		return propVal__	};resolve,the,given,placeholder,using,the,given,properties,performing,a,system,properties,check,according,to,the,given,mode,p,the,default,implementation,delegates,to,code,resolve,placeholder,placeholder,props,before,after,the,system,properties,check,p,subclasses,can,override,this,for,custom,resolution,strategies,including,customized,points,for,the,system,properties,check,param,placeholder,the,placeholder,to,resolve,param,props,the,merged,properties,of,this,configurer,param,system,properties,mode,the,system,properties,mode,according,to,the,constants,in,this,class,return,the,resolved,value,of,null,if,none,see,set,system,properties,mode,see,system,get,property,see,resolve,placeholder,string,java,util,properties;nullable,protected,string,resolve,placeholder,string,placeholder,properties,props,int,system,properties,mode,string,prop,val,null,if,system,properties,mode,prop,val,resolve,system,property,placeholder,if,prop,val,null,prop,val,resolve,placeholder,placeholder,props,if,prop,val,null,system,properties,mode,prop,val,resolve,system,property,placeholder,return,prop,val
PropertyPlaceholderConfigurer -> @Nullable 	protected String resolvePlaceholder(String placeholder, Properties props, int systemPropertiesMode);1530174524;Resolve the given placeholder using the given properties, performing_a system properties check according to the given mode._<p>The default implementation delegates to {@code resolvePlaceholder_(placeholder, props)} before/after the system properties check._<p>Subclasses can override this for custom resolution strategies,_including customized points for the system properties check._@param placeholder the placeholder to resolve_@param props the merged properties of this configurer_@param systemPropertiesMode the system properties mode,_according to the constants in this class_@return the resolved value, of null if none_@see #setSystemPropertiesMode_@see System#getProperty_@see #resolvePlaceholder(String, java.util.Properties);@Nullable_	protected String resolvePlaceholder(String placeholder, Properties props, int systemPropertiesMode) {_		String propVal = null__		if (systemPropertiesMode == SYSTEM_PROPERTIES_MODE_OVERRIDE) {_			propVal = resolveSystemProperty(placeholder)__		}_		if (propVal == null) {_			propVal = resolvePlaceholder(placeholder, props)__		}_		if (propVal == null && systemPropertiesMode == SYSTEM_PROPERTIES_MODE_FALLBACK) {_			propVal = resolveSystemProperty(placeholder)__		}_		return propVal__	};resolve,the,given,placeholder,using,the,given,properties,performing,a,system,properties,check,according,to,the,given,mode,p,the,default,implementation,delegates,to,code,resolve,placeholder,placeholder,props,before,after,the,system,properties,check,p,subclasses,can,override,this,for,custom,resolution,strategies,including,customized,points,for,the,system,properties,check,param,placeholder,the,placeholder,to,resolve,param,props,the,merged,properties,of,this,configurer,param,system,properties,mode,the,system,properties,mode,according,to,the,constants,in,this,class,return,the,resolved,value,of,null,if,none,see,set,system,properties,mode,see,system,get,property,see,resolve,placeholder,string,java,util,properties;nullable,protected,string,resolve,placeholder,string,placeholder,properties,props,int,system,properties,mode,string,prop,val,null,if,system,properties,mode,prop,val,resolve,system,property,placeholder,if,prop,val,null,prop,val,resolve,placeholder,placeholder,props,if,prop,val,null,system,properties,mode,prop,val,resolve,system,property,placeholder,return,prop,val
PropertyPlaceholderConfigurer -> @Nullable 	protected String resolvePlaceholder(String placeholder, Properties props, int systemPropertiesMode);1530174524;Resolve the given placeholder using the given properties, performing_a system properties check according to the given mode._<p>The default implementation delegates to {@code resolvePlaceholder_(placeholder, props)} before/after the system properties check._<p>Subclasses can override this for custom resolution strategies,_including customized points for the system properties check._@param placeholder the placeholder to resolve_@param props the merged properties of this configurer_@param systemPropertiesMode the system properties mode,_according to the constants in this class_@return the resolved value, of null if none_@see #setSystemPropertiesMode_@see System#getProperty_@see #resolvePlaceholder(String, java.util.Properties);@Nullable_	protected String resolvePlaceholder(String placeholder, Properties props, int systemPropertiesMode) {_		String propVal = null__		if (systemPropertiesMode == SYSTEM_PROPERTIES_MODE_OVERRIDE) {_			propVal = resolveSystemProperty(placeholder)__		}_		if (propVal == null) {_			propVal = resolvePlaceholder(placeholder, props)__		}_		if (propVal == null && systemPropertiesMode == SYSTEM_PROPERTIES_MODE_FALLBACK) {_			propVal = resolveSystemProperty(placeholder)__		}_		return propVal__	};resolve,the,given,placeholder,using,the,given,properties,performing,a,system,properties,check,according,to,the,given,mode,p,the,default,implementation,delegates,to,code,resolve,placeholder,placeholder,props,before,after,the,system,properties,check,p,subclasses,can,override,this,for,custom,resolution,strategies,including,customized,points,for,the,system,properties,check,param,placeholder,the,placeholder,to,resolve,param,props,the,merged,properties,of,this,configurer,param,system,properties,mode,the,system,properties,mode,according,to,the,constants,in,this,class,return,the,resolved,value,of,null,if,none,see,set,system,properties,mode,see,system,get,property,see,resolve,placeholder,string,java,util,properties;nullable,protected,string,resolve,placeholder,string,placeholder,properties,props,int,system,properties,mode,string,prop,val,null,if,system,properties,mode,prop,val,resolve,system,property,placeholder,if,prop,val,null,prop,val,resolve,placeholder,placeholder,props,if,prop,val,null,system,properties,mode,prop,val,resolve,system,property,placeholder,return,prop,val
PropertyPlaceholderConfigurer -> @Nullable 	protected String resolvePlaceholder(String placeholder, Properties props, int systemPropertiesMode);1546963894;Resolve the given placeholder using the given properties, performing_a system properties check according to the given mode._<p>The default implementation delegates to {@code resolvePlaceholder_(placeholder, props)} before/after the system properties check._<p>Subclasses can override this for custom resolution strategies,_including customized points for the system properties check._@param placeholder the placeholder to resolve_@param props the merged properties of this configurer_@param systemPropertiesMode the system properties mode,_according to the constants in this class_@return the resolved value, of null if none_@see #setSystemPropertiesMode_@see System#getProperty_@see #resolvePlaceholder(String, java.util.Properties);@Nullable_	protected String resolvePlaceholder(String placeholder, Properties props, int systemPropertiesMode) {_		String propVal = null__		if (systemPropertiesMode == SYSTEM_PROPERTIES_MODE_OVERRIDE) {_			propVal = resolveSystemProperty(placeholder)__		}_		if (propVal == null) {_			propVal = resolvePlaceholder(placeholder, props)__		}_		if (propVal == null && systemPropertiesMode == SYSTEM_PROPERTIES_MODE_FALLBACK) {_			propVal = resolveSystemProperty(placeholder)__		}_		return propVal__	};resolve,the,given,placeholder,using,the,given,properties,performing,a,system,properties,check,according,to,the,given,mode,p,the,default,implementation,delegates,to,code,resolve,placeholder,placeholder,props,before,after,the,system,properties,check,p,subclasses,can,override,this,for,custom,resolution,strategies,including,customized,points,for,the,system,properties,check,param,placeholder,the,placeholder,to,resolve,param,props,the,merged,properties,of,this,configurer,param,system,properties,mode,the,system,properties,mode,according,to,the,constants,in,this,class,return,the,resolved,value,of,null,if,none,see,set,system,properties,mode,see,system,get,property,see,resolve,placeholder,string,java,util,properties;nullable,protected,string,resolve,placeholder,string,placeholder,properties,props,int,system,properties,mode,string,prop,val,null,if,system,properties,mode,prop,val,resolve,system,property,placeholder,if,prop,val,null,prop,val,resolve,placeholder,placeholder,props,if,prop,val,null,system,properties,mode,prop,val,resolve,system,property,placeholder,return,prop,val
PropertyPlaceholderConfigurer -> @Nullable 	protected String resolvePlaceholder(String placeholder, Properties props, int systemPropertiesMode);1546981033;Resolve the given placeholder using the given properties, performing_a system properties check according to the given mode._<p>The default implementation delegates to {@code resolvePlaceholder_(placeholder, props)} before/after the system properties check._<p>Subclasses can override this for custom resolution strategies,_including customized points for the system properties check._@param placeholder the placeholder to resolve_@param props the merged properties of this configurer_@param systemPropertiesMode the system properties mode,_according to the constants in this class_@return the resolved value, of null if none_@see #setSystemPropertiesMode_@see System#getProperty_@see #resolvePlaceholder(String, java.util.Properties);@Nullable_	protected String resolvePlaceholder(String placeholder, Properties props, int systemPropertiesMode) {_		String propVal = null__		if (systemPropertiesMode == SYSTEM_PROPERTIES_MODE_OVERRIDE) {_			propVal = resolveSystemProperty(placeholder)__		}_		if (propVal == null) {_			propVal = resolvePlaceholder(placeholder, props)__		}_		if (propVal == null && systemPropertiesMode == SYSTEM_PROPERTIES_MODE_FALLBACK) {_			propVal = resolveSystemProperty(placeholder)__		}_		return propVal__	};resolve,the,given,placeholder,using,the,given,properties,performing,a,system,properties,check,according,to,the,given,mode,p,the,default,implementation,delegates,to,code,resolve,placeholder,placeholder,props,before,after,the,system,properties,check,p,subclasses,can,override,this,for,custom,resolution,strategies,including,customized,points,for,the,system,properties,check,param,placeholder,the,placeholder,to,resolve,param,props,the,merged,properties,of,this,configurer,param,system,properties,mode,the,system,properties,mode,according,to,the,constants,in,this,class,return,the,resolved,value,of,null,if,none,see,set,system,properties,mode,see,system,get,property,see,resolve,placeholder,string,java,util,properties;nullable,protected,string,resolve,placeholder,string,placeholder,properties,props,int,system,properties,mode,string,prop,val,null,if,system,properties,mode,prop,val,resolve,system,property,placeholder,if,prop,val,null,prop,val,resolve,placeholder,placeholder,props,if,prop,val,null,system,properties,mode,prop,val,resolve,system,property,placeholder,return,prop,val
PropertyPlaceholderConfigurer -> @Nullable 	protected String resolvePlaceholder(String placeholder, Properties props, int systemPropertiesMode);1549465224;Resolve the given placeholder using the given properties, performing_a system properties check according to the given mode._<p>The default implementation delegates to {@code resolvePlaceholder_(placeholder, props)} before/after the system properties check._<p>Subclasses can override this for custom resolution strategies,_including customized points for the system properties check._@param placeholder the placeholder to resolve_@param props the merged properties of this configurer_@param systemPropertiesMode the system properties mode,_according to the constants in this class_@return the resolved value, of null if none_@see #setSystemPropertiesMode_@see System#getProperty_@see #resolvePlaceholder(String, java.util.Properties);@Nullable_	protected String resolvePlaceholder(String placeholder, Properties props, int systemPropertiesMode) {_		String propVal = null__		if (systemPropertiesMode == SYSTEM_PROPERTIES_MODE_OVERRIDE) {_			propVal = resolveSystemProperty(placeholder)__		}_		if (propVal == null) {_			propVal = resolvePlaceholder(placeholder, props)__		}_		if (propVal == null && systemPropertiesMode == SYSTEM_PROPERTIES_MODE_FALLBACK) {_			propVal = resolveSystemProperty(placeholder)__		}_		return propVal__	};resolve,the,given,placeholder,using,the,given,properties,performing,a,system,properties,check,according,to,the,given,mode,p,the,default,implementation,delegates,to,code,resolve,placeholder,placeholder,props,before,after,the,system,properties,check,p,subclasses,can,override,this,for,custom,resolution,strategies,including,customized,points,for,the,system,properties,check,param,placeholder,the,placeholder,to,resolve,param,props,the,merged,properties,of,this,configurer,param,system,properties,mode,the,system,properties,mode,according,to,the,constants,in,this,class,return,the,resolved,value,of,null,if,none,see,set,system,properties,mode,see,system,get,property,see,resolve,placeholder,string,java,util,properties;nullable,protected,string,resolve,placeholder,string,placeholder,properties,props,int,system,properties,mode,string,prop,val,null,if,system,properties,mode,prop,val,resolve,system,property,placeholder,if,prop,val,null,prop,val,resolve,placeholder,placeholder,props,if,prop,val,null,system,properties,mode,prop,val,resolve,system,property,placeholder,return,prop,val
PropertyPlaceholderConfigurer -> @Nullable 	protected String resolvePlaceholder(String placeholder, Properties props, int systemPropertiesMode);1549554785;Resolve the given placeholder using the given properties, performing_a system properties check according to the given mode._<p>The default implementation delegates to {@code resolvePlaceholder_(placeholder, props)} before/after the system properties check._<p>Subclasses can override this for custom resolution strategies,_including customized points for the system properties check._@param placeholder the placeholder to resolve_@param props the merged properties of this configurer_@param systemPropertiesMode the system properties mode,_according to the constants in this class_@return the resolved value, of null if none_@see #setSystemPropertiesMode_@see System#getProperty_@see #resolvePlaceholder(String, java.util.Properties);@Nullable_	protected String resolvePlaceholder(String placeholder, Properties props, int systemPropertiesMode) {_		String propVal = null__		if (systemPropertiesMode == SYSTEM_PROPERTIES_MODE_OVERRIDE) {_			propVal = resolveSystemProperty(placeholder)__		}_		if (propVal == null) {_			propVal = resolvePlaceholder(placeholder, props)__		}_		if (propVal == null && systemPropertiesMode == SYSTEM_PROPERTIES_MODE_FALLBACK) {_			propVal = resolveSystemProperty(placeholder)__		}_		return propVal__	};resolve,the,given,placeholder,using,the,given,properties,performing,a,system,properties,check,according,to,the,given,mode,p,the,default,implementation,delegates,to,code,resolve,placeholder,placeholder,props,before,after,the,system,properties,check,p,subclasses,can,override,this,for,custom,resolution,strategies,including,customized,points,for,the,system,properties,check,param,placeholder,the,placeholder,to,resolve,param,props,the,merged,properties,of,this,configurer,param,system,properties,mode,the,system,properties,mode,according,to,the,constants,in,this,class,return,the,resolved,value,of,null,if,none,see,set,system,properties,mode,see,system,get,property,see,resolve,placeholder,string,java,util,properties;nullable,protected,string,resolve,placeholder,string,placeholder,properties,props,int,system,properties,mode,string,prop,val,null,if,system,properties,mode,prop,val,resolve,system,property,placeholder,if,prop,val,null,prop,val,resolve,placeholder,placeholder,props,if,prop,val,null,system,properties,mode,prop,val,resolve,system,property,placeholder,return,prop,val
PropertyPlaceholderConfigurer -> protected String resolvePlaceholder(String placeholder, Properties props);1328020251;Resolve the given placeholder using the given properties._The default implementation simply checks for a corresponding property key._<p>Subclasses can override this for customized placeholder-to-key mappings_or custom resolution strategies, possibly just using the given properties_as fallback._<p>Note that system properties will still be checked before respectively_after this method is invoked, according to the system properties mode._@param placeholder the placeholder to resolve_@param props the merged properties of this configurer_@return the resolved value, of <code>null</code> if none_@see #setSystemPropertiesMode;protected String resolvePlaceholder(String placeholder, Properties props) {_		return props.getProperty(placeholder)__	};resolve,the,given,placeholder,using,the,given,properties,the,default,implementation,simply,checks,for,a,corresponding,property,key,p,subclasses,can,override,this,for,customized,placeholder,to,key,mappings,or,custom,resolution,strategies,possibly,just,using,the,given,properties,as,fallback,p,note,that,system,properties,will,still,be,checked,before,respectively,after,this,method,is,invoked,according,to,the,system,properties,mode,param,placeholder,the,placeholder,to,resolve,param,props,the,merged,properties,of,this,configurer,return,the,resolved,value,of,code,null,code,if,none,see,set,system,properties,mode;protected,string,resolve,placeholder,string,placeholder,properties,props,return,props,get,property,placeholder
PropertyPlaceholderConfigurer -> protected String resolvePlaceholder(String placeholder, Properties props);1355313310;Resolve the given placeholder using the given properties._The default implementation simply checks for a corresponding property key._<p>Subclasses can override this for customized placeholder-to-key mappings_or custom resolution strategies, possibly just using the given properties_as fallback._<p>Note that system properties will still be checked before respectively_after this method is invoked, according to the system properties mode._@param placeholder the placeholder to resolve_@param props the merged properties of this configurer_@return the resolved value, of <code>null</code> if none_@see #setSystemPropertiesMode;protected String resolvePlaceholder(String placeholder, Properties props) {_		return props.getProperty(placeholder)__	};resolve,the,given,placeholder,using,the,given,properties,the,default,implementation,simply,checks,for,a,corresponding,property,key,p,subclasses,can,override,this,for,customized,placeholder,to,key,mappings,or,custom,resolution,strategies,possibly,just,using,the,given,properties,as,fallback,p,note,that,system,properties,will,still,be,checked,before,respectively,after,this,method,is,invoked,according,to,the,system,properties,mode,param,placeholder,the,placeholder,to,resolve,param,props,the,merged,properties,of,this,configurer,return,the,resolved,value,of,code,null,code,if,none,see,set,system,properties,mode;protected,string,resolve,placeholder,string,placeholder,properties,props,return,props,get,property,placeholder
PropertyPlaceholderConfigurer -> protected String resolvePlaceholder(String placeholder, Properties props);1356735495;Resolve the given placeholder using the given properties._The default implementation simply checks for a corresponding property key._<p>Subclasses can override this for customized placeholder-to-key mappings_or custom resolution strategies, possibly just using the given properties_as fallback._<p>Note that system properties will still be checked before respectively_after this method is invoked, according to the system properties mode._@param placeholder the placeholder to resolve_@param props the merged properties of this configurer_@return the resolved value, of {@code null} if none_@see #setSystemPropertiesMode;protected String resolvePlaceholder(String placeholder, Properties props) {_		return props.getProperty(placeholder)__	};resolve,the,given,placeholder,using,the,given,properties,the,default,implementation,simply,checks,for,a,corresponding,property,key,p,subclasses,can,override,this,for,customized,placeholder,to,key,mappings,or,custom,resolution,strategies,possibly,just,using,the,given,properties,as,fallback,p,note,that,system,properties,will,still,be,checked,before,respectively,after,this,method,is,invoked,according,to,the,system,properties,mode,param,placeholder,the,placeholder,to,resolve,param,props,the,merged,properties,of,this,configurer,return,the,resolved,value,of,code,null,if,none,see,set,system,properties,mode;protected,string,resolve,placeholder,string,placeholder,properties,props,return,props,get,property,placeholder
PropertyPlaceholderConfigurer -> protected String resolvePlaceholder(String placeholder, Properties props);1357119239;Resolve the given placeholder using the given properties._The default implementation simply checks for a corresponding property key._<p>Subclasses can override this for customized placeholder-to-key mappings_or custom resolution strategies, possibly just using the given properties_as fallback._<p>Note that system properties will still be checked before respectively_after this method is invoked, according to the system properties mode._@param placeholder the placeholder to resolve_@param props the merged properties of this configurer_@return the resolved value, of {@code null} if none_@see #setSystemPropertiesMode;protected String resolvePlaceholder(String placeholder, Properties props) {_		return props.getProperty(placeholder)__	};resolve,the,given,placeholder,using,the,given,properties,the,default,implementation,simply,checks,for,a,corresponding,property,key,p,subclasses,can,override,this,for,customized,placeholder,to,key,mappings,or,custom,resolution,strategies,possibly,just,using,the,given,properties,as,fallback,p,note,that,system,properties,will,still,be,checked,before,respectively,after,this,method,is,invoked,according,to,the,system,properties,mode,param,placeholder,the,placeholder,to,resolve,param,props,the,merged,properties,of,this,configurer,return,the,resolved,value,of,code,null,if,none,see,set,system,properties,mode;protected,string,resolve,placeholder,string,placeholder,properties,props,return,props,get,property,placeholder
PropertyPlaceholderConfigurer -> protected String resolvePlaceholder(String placeholder, Properties props);1368482696;Resolve the given placeholder using the given properties._The default implementation simply checks for a corresponding property key._<p>Subclasses can override this for customized placeholder-to-key mappings_or custom resolution strategies, possibly just using the given properties_as fallback._<p>Note that system properties will still be checked before respectively_after this method is invoked, according to the system properties mode._@param placeholder the placeholder to resolve_@param props the merged properties of this configurer_@return the resolved value, of {@code null} if none_@see #setSystemPropertiesMode;protected String resolvePlaceholder(String placeholder, Properties props) {_		return props.getProperty(placeholder)__	};resolve,the,given,placeholder,using,the,given,properties,the,default,implementation,simply,checks,for,a,corresponding,property,key,p,subclasses,can,override,this,for,customized,placeholder,to,key,mappings,or,custom,resolution,strategies,possibly,just,using,the,given,properties,as,fallback,p,note,that,system,properties,will,still,be,checked,before,respectively,after,this,method,is,invoked,according,to,the,system,properties,mode,param,placeholder,the,placeholder,to,resolve,param,props,the,merged,properties,of,this,configurer,return,the,resolved,value,of,code,null,if,none,see,set,system,properties,mode;protected,string,resolve,placeholder,string,placeholder,properties,props,return,props,get,property,placeholder
PropertyPlaceholderConfigurer -> protected String resolvePlaceholder(String placeholder, Properties props);1389804257;Resolve the given placeholder using the given properties._The default implementation simply checks for a corresponding property key._<p>Subclasses can override this for customized placeholder-to-key mappings_or custom resolution strategies, possibly just using the given properties_as fallback._<p>Note that system properties will still be checked before respectively_after this method is invoked, according to the system properties mode._@param placeholder the placeholder to resolve_@param props the merged properties of this configurer_@return the resolved value, of {@code null} if none_@see #setSystemPropertiesMode;protected String resolvePlaceholder(String placeholder, Properties props) {_		return props.getProperty(placeholder)__	};resolve,the,given,placeholder,using,the,given,properties,the,default,implementation,simply,checks,for,a,corresponding,property,key,p,subclasses,can,override,this,for,customized,placeholder,to,key,mappings,or,custom,resolution,strategies,possibly,just,using,the,given,properties,as,fallback,p,note,that,system,properties,will,still,be,checked,before,respectively,after,this,method,is,invoked,according,to,the,system,properties,mode,param,placeholder,the,placeholder,to,resolve,param,props,the,merged,properties,of,this,configurer,return,the,resolved,value,of,code,null,if,none,see,set,system,properties,mode;protected,string,resolve,placeholder,string,placeholder,properties,props,return,props,get,property,placeholder
PropertyPlaceholderConfigurer -> protected String resolvePlaceholder(String placeholder, Properties props);1390576922;Resolve the given placeholder using the given properties._The default implementation simply checks for a corresponding property key._<p>Subclasses can override this for customized placeholder-to-key mappings_or custom resolution strategies, possibly just using the given properties_as fallback._<p>Note that system properties will still be checked before respectively_after this method is invoked, according to the system properties mode._@param placeholder the placeholder to resolve_@param props the merged properties of this configurer_@return the resolved value, of {@code null} if none_@see #setSystemPropertiesMode;protected String resolvePlaceholder(String placeholder, Properties props) {_		return props.getProperty(placeholder)__	};resolve,the,given,placeholder,using,the,given,properties,the,default,implementation,simply,checks,for,a,corresponding,property,key,p,subclasses,can,override,this,for,customized,placeholder,to,key,mappings,or,custom,resolution,strategies,possibly,just,using,the,given,properties,as,fallback,p,note,that,system,properties,will,still,be,checked,before,respectively,after,this,method,is,invoked,according,to,the,system,properties,mode,param,placeholder,the,placeholder,to,resolve,param,props,the,merged,properties,of,this,configurer,return,the,resolved,value,of,code,null,if,none,see,set,system,properties,mode;protected,string,resolve,placeholder,string,placeholder,properties,props,return,props,get,property,placeholder
PropertyPlaceholderConfigurer -> protected String resolvePlaceholder(String placeholder, Properties props);1425578217;Resolve the given placeholder using the given properties._The default implementation simply checks for a corresponding property key._<p>Subclasses can override this for customized placeholder-to-key mappings_or custom resolution strategies, possibly just using the given properties_as fallback._<p>Note that system properties will still be checked before respectively_after this method is invoked, according to the system properties mode._@param placeholder the placeholder to resolve_@param props the merged properties of this configurer_@return the resolved value, of {@code null} if none_@see #setSystemPropertiesMode;protected String resolvePlaceholder(String placeholder, Properties props) {_		return props.getProperty(placeholder)__	};resolve,the,given,placeholder,using,the,given,properties,the,default,implementation,simply,checks,for,a,corresponding,property,key,p,subclasses,can,override,this,for,customized,placeholder,to,key,mappings,or,custom,resolution,strategies,possibly,just,using,the,given,properties,as,fallback,p,note,that,system,properties,will,still,be,checked,before,respectively,after,this,method,is,invoked,according,to,the,system,properties,mode,param,placeholder,the,placeholder,to,resolve,param,props,the,merged,properties,of,this,configurer,return,the,resolved,value,of,code,null,if,none,see,set,system,properties,mode;protected,string,resolve,placeholder,string,placeholder,properties,props,return,props,get,property,placeholder
PropertyPlaceholderConfigurer -> protected String resolvePlaceholder(String placeholder, Properties props);1455905979;Resolve the given placeholder using the given properties._The default implementation simply checks for a corresponding property key._<p>Subclasses can override this for customized placeholder-to-key mappings_or custom resolution strategies, possibly just using the given properties_as fallback._<p>Note that system properties will still be checked before respectively_after this method is invoked, according to the system properties mode._@param placeholder the placeholder to resolve_@param props the merged properties of this configurer_@return the resolved value, of {@code null} if none_@see #setSystemPropertiesMode;protected String resolvePlaceholder(String placeholder, Properties props) {_		return props.getProperty(placeholder)__	};resolve,the,given,placeholder,using,the,given,properties,the,default,implementation,simply,checks,for,a,corresponding,property,key,p,subclasses,can,override,this,for,customized,placeholder,to,key,mappings,or,custom,resolution,strategies,possibly,just,using,the,given,properties,as,fallback,p,note,that,system,properties,will,still,be,checked,before,respectively,after,this,method,is,invoked,according,to,the,system,properties,mode,param,placeholder,the,placeholder,to,resolve,param,props,the,merged,properties,of,this,configurer,return,the,resolved,value,of,code,null,if,none,see,set,system,properties,mode;protected,string,resolve,placeholder,string,placeholder,properties,props,return,props,get,property,placeholder
PropertyPlaceholderConfigurer -> protected String resolvePlaceholder(String placeholder, Properties props);1467726769;Resolve the given placeholder using the given properties._The default implementation simply checks for a corresponding property key._<p>Subclasses can override this for customized placeholder-to-key mappings_or custom resolution strategies, possibly just using the given properties_as fallback._<p>Note that system properties will still be checked before respectively_after this method is invoked, according to the system properties mode._@param placeholder the placeholder to resolve_@param props the merged properties of this configurer_@return the resolved value, of {@code null} if none_@see #setSystemPropertiesMode;protected String resolvePlaceholder(String placeholder, Properties props) {_		return props.getProperty(placeholder)__	};resolve,the,given,placeholder,using,the,given,properties,the,default,implementation,simply,checks,for,a,corresponding,property,key,p,subclasses,can,override,this,for,customized,placeholder,to,key,mappings,or,custom,resolution,strategies,possibly,just,using,the,given,properties,as,fallback,p,note,that,system,properties,will,still,be,checked,before,respectively,after,this,method,is,invoked,according,to,the,system,properties,mode,param,placeholder,the,placeholder,to,resolve,param,props,the,merged,properties,of,this,configurer,return,the,resolved,value,of,code,null,if,none,see,set,system,properties,mode;protected,string,resolve,placeholder,string,placeholder,properties,props,return,props,get,property,placeholder
PropertyPlaceholderConfigurer -> protected String resolvePlaceholder(String placeholder, Properties props);1490722023;Resolve the given placeholder using the given properties._The default implementation simply checks for a corresponding property key._<p>Subclasses can override this for customized placeholder-to-key mappings_or custom resolution strategies, possibly just using the given properties_as fallback._<p>Note that system properties will still be checked before respectively_after this method is invoked, according to the system properties mode._@param placeholder the placeholder to resolve_@param props the merged properties of this configurer_@return the resolved value, of {@code null} if none_@see #setSystemPropertiesMode;protected String resolvePlaceholder(String placeholder, Properties props) {_		return props.getProperty(placeholder)__	};resolve,the,given,placeholder,using,the,given,properties,the,default,implementation,simply,checks,for,a,corresponding,property,key,p,subclasses,can,override,this,for,customized,placeholder,to,key,mappings,or,custom,resolution,strategies,possibly,just,using,the,given,properties,as,fallback,p,note,that,system,properties,will,still,be,checked,before,respectively,after,this,method,is,invoked,according,to,the,system,properties,mode,param,placeholder,the,placeholder,to,resolve,param,props,the,merged,properties,of,this,configurer,return,the,resolved,value,of,code,null,if,none,see,set,system,properties,mode;protected,string,resolve,placeholder,string,placeholder,properties,props,return,props,get,property,placeholder
PropertyPlaceholderConfigurer -> protected String resolvePlaceholder(String placeholder, Properties props, int systemPropertiesMode);1328020251;Resolve the given placeholder using the given properties, performing_a system properties check according to the given mode._<p>The default implementation delegates to <code>resolvePlaceholder_(placeholder, props)</code> before/after the system properties check._<p>Subclasses can override this for custom resolution strategies,_including customized points for the system properties check._@param placeholder the placeholder to resolve_@param props the merged properties of this configurer_@param systemPropertiesMode the system properties mode,_according to the constants in this class_@return the resolved value, of null if none_@see #setSystemPropertiesMode_@see System#getProperty_@see #resolvePlaceholder(String, java.util.Properties);protected String resolvePlaceholder(String placeholder, Properties props, int systemPropertiesMode) {_		String propVal = null__		if (systemPropertiesMode == SYSTEM_PROPERTIES_MODE_OVERRIDE) {_			propVal = resolveSystemProperty(placeholder)__		}_		if (propVal == null) {_			propVal = resolvePlaceholder(placeholder, props)__		}_		if (propVal == null && systemPropertiesMode == SYSTEM_PROPERTIES_MODE_FALLBACK) {_			propVal = resolveSystemProperty(placeholder)__		}_		return propVal__	};resolve,the,given,placeholder,using,the,given,properties,performing,a,system,properties,check,according,to,the,given,mode,p,the,default,implementation,delegates,to,code,resolve,placeholder,placeholder,props,code,before,after,the,system,properties,check,p,subclasses,can,override,this,for,custom,resolution,strategies,including,customized,points,for,the,system,properties,check,param,placeholder,the,placeholder,to,resolve,param,props,the,merged,properties,of,this,configurer,param,system,properties,mode,the,system,properties,mode,according,to,the,constants,in,this,class,return,the,resolved,value,of,null,if,none,see,set,system,properties,mode,see,system,get,property,see,resolve,placeholder,string,java,util,properties;protected,string,resolve,placeholder,string,placeholder,properties,props,int,system,properties,mode,string,prop,val,null,if,system,properties,mode,prop,val,resolve,system,property,placeholder,if,prop,val,null,prop,val,resolve,placeholder,placeholder,props,if,prop,val,null,system,properties,mode,prop,val,resolve,system,property,placeholder,return,prop,val
PropertyPlaceholderConfigurer -> protected String resolvePlaceholder(String placeholder, Properties props, int systemPropertiesMode);1355313310;Resolve the given placeholder using the given properties, performing_a system properties check according to the given mode._<p>The default implementation delegates to <code>resolvePlaceholder_(placeholder, props)</code> before/after the system properties check._<p>Subclasses can override this for custom resolution strategies,_including customized points for the system properties check._@param placeholder the placeholder to resolve_@param props the merged properties of this configurer_@param systemPropertiesMode the system properties mode,_according to the constants in this class_@return the resolved value, of null if none_@see #setSystemPropertiesMode_@see System#getProperty_@see #resolvePlaceholder(String, java.util.Properties);protected String resolvePlaceholder(String placeholder, Properties props, int systemPropertiesMode) {_		String propVal = null__		if (systemPropertiesMode == SYSTEM_PROPERTIES_MODE_OVERRIDE) {_			propVal = resolveSystemProperty(placeholder)__		}_		if (propVal == null) {_			propVal = resolvePlaceholder(placeholder, props)__		}_		if (propVal == null && systemPropertiesMode == SYSTEM_PROPERTIES_MODE_FALLBACK) {_			propVal = resolveSystemProperty(placeholder)__		}_		return propVal__	};resolve,the,given,placeholder,using,the,given,properties,performing,a,system,properties,check,according,to,the,given,mode,p,the,default,implementation,delegates,to,code,resolve,placeholder,placeholder,props,code,before,after,the,system,properties,check,p,subclasses,can,override,this,for,custom,resolution,strategies,including,customized,points,for,the,system,properties,check,param,placeholder,the,placeholder,to,resolve,param,props,the,merged,properties,of,this,configurer,param,system,properties,mode,the,system,properties,mode,according,to,the,constants,in,this,class,return,the,resolved,value,of,null,if,none,see,set,system,properties,mode,see,system,get,property,see,resolve,placeholder,string,java,util,properties;protected,string,resolve,placeholder,string,placeholder,properties,props,int,system,properties,mode,string,prop,val,null,if,system,properties,mode,prop,val,resolve,system,property,placeholder,if,prop,val,null,prop,val,resolve,placeholder,placeholder,props,if,prop,val,null,system,properties,mode,prop,val,resolve,system,property,placeholder,return,prop,val
PropertyPlaceholderConfigurer -> protected String resolvePlaceholder(String placeholder, Properties props, int systemPropertiesMode);1356735495;Resolve the given placeholder using the given properties, performing_a system properties check according to the given mode._<p>The default implementation delegates to {@code resolvePlaceholder_(placeholder, props)} before/after the system properties check._<p>Subclasses can override this for custom resolution strategies,_including customized points for the system properties check._@param placeholder the placeholder to resolve_@param props the merged properties of this configurer_@param systemPropertiesMode the system properties mode,_according to the constants in this class_@return the resolved value, of null if none_@see #setSystemPropertiesMode_@see System#getProperty_@see #resolvePlaceholder(String, java.util.Properties);protected String resolvePlaceholder(String placeholder, Properties props, int systemPropertiesMode) {_		String propVal = null__		if (systemPropertiesMode == SYSTEM_PROPERTIES_MODE_OVERRIDE) {_			propVal = resolveSystemProperty(placeholder)__		}_		if (propVal == null) {_			propVal = resolvePlaceholder(placeholder, props)__		}_		if (propVal == null && systemPropertiesMode == SYSTEM_PROPERTIES_MODE_FALLBACK) {_			propVal = resolveSystemProperty(placeholder)__		}_		return propVal__	};resolve,the,given,placeholder,using,the,given,properties,performing,a,system,properties,check,according,to,the,given,mode,p,the,default,implementation,delegates,to,code,resolve,placeholder,placeholder,props,before,after,the,system,properties,check,p,subclasses,can,override,this,for,custom,resolution,strategies,including,customized,points,for,the,system,properties,check,param,placeholder,the,placeholder,to,resolve,param,props,the,merged,properties,of,this,configurer,param,system,properties,mode,the,system,properties,mode,according,to,the,constants,in,this,class,return,the,resolved,value,of,null,if,none,see,set,system,properties,mode,see,system,get,property,see,resolve,placeholder,string,java,util,properties;protected,string,resolve,placeholder,string,placeholder,properties,props,int,system,properties,mode,string,prop,val,null,if,system,properties,mode,prop,val,resolve,system,property,placeholder,if,prop,val,null,prop,val,resolve,placeholder,placeholder,props,if,prop,val,null,system,properties,mode,prop,val,resolve,system,property,placeholder,return,prop,val
PropertyPlaceholderConfigurer -> protected String resolvePlaceholder(String placeholder, Properties props, int systemPropertiesMode);1357119239;Resolve the given placeholder using the given properties, performing_a system properties check according to the given mode._<p>The default implementation delegates to {@code resolvePlaceholder_(placeholder, props)} before/after the system properties check._<p>Subclasses can override this for custom resolution strategies,_including customized points for the system properties check._@param placeholder the placeholder to resolve_@param props the merged properties of this configurer_@param systemPropertiesMode the system properties mode,_according to the constants in this class_@return the resolved value, of null if none_@see #setSystemPropertiesMode_@see System#getProperty_@see #resolvePlaceholder(String, java.util.Properties);protected String resolvePlaceholder(String placeholder, Properties props, int systemPropertiesMode) {_		String propVal = null__		if (systemPropertiesMode == SYSTEM_PROPERTIES_MODE_OVERRIDE) {_			propVal = resolveSystemProperty(placeholder)__		}_		if (propVal == null) {_			propVal = resolvePlaceholder(placeholder, props)__		}_		if (propVal == null && systemPropertiesMode == SYSTEM_PROPERTIES_MODE_FALLBACK) {_			propVal = resolveSystemProperty(placeholder)__		}_		return propVal__	};resolve,the,given,placeholder,using,the,given,properties,performing,a,system,properties,check,according,to,the,given,mode,p,the,default,implementation,delegates,to,code,resolve,placeholder,placeholder,props,before,after,the,system,properties,check,p,subclasses,can,override,this,for,custom,resolution,strategies,including,customized,points,for,the,system,properties,check,param,placeholder,the,placeholder,to,resolve,param,props,the,merged,properties,of,this,configurer,param,system,properties,mode,the,system,properties,mode,according,to,the,constants,in,this,class,return,the,resolved,value,of,null,if,none,see,set,system,properties,mode,see,system,get,property,see,resolve,placeholder,string,java,util,properties;protected,string,resolve,placeholder,string,placeholder,properties,props,int,system,properties,mode,string,prop,val,null,if,system,properties,mode,prop,val,resolve,system,property,placeholder,if,prop,val,null,prop,val,resolve,placeholder,placeholder,props,if,prop,val,null,system,properties,mode,prop,val,resolve,system,property,placeholder,return,prop,val
PropertyPlaceholderConfigurer -> protected String resolvePlaceholder(String placeholder, Properties props, int systemPropertiesMode);1368482696;Resolve the given placeholder using the given properties, performing_a system properties check according to the given mode._<p>The default implementation delegates to {@code resolvePlaceholder_(placeholder, props)} before/after the system properties check._<p>Subclasses can override this for custom resolution strategies,_including customized points for the system properties check._@param placeholder the placeholder to resolve_@param props the merged properties of this configurer_@param systemPropertiesMode the system properties mode,_according to the constants in this class_@return the resolved value, of null if none_@see #setSystemPropertiesMode_@see System#getProperty_@see #resolvePlaceholder(String, java.util.Properties);protected String resolvePlaceholder(String placeholder, Properties props, int systemPropertiesMode) {_		String propVal = null__		if (systemPropertiesMode == SYSTEM_PROPERTIES_MODE_OVERRIDE) {_			propVal = resolveSystemProperty(placeholder)__		}_		if (propVal == null) {_			propVal = resolvePlaceholder(placeholder, props)__		}_		if (propVal == null && systemPropertiesMode == SYSTEM_PROPERTIES_MODE_FALLBACK) {_			propVal = resolveSystemProperty(placeholder)__		}_		return propVal__	};resolve,the,given,placeholder,using,the,given,properties,performing,a,system,properties,check,according,to,the,given,mode,p,the,default,implementation,delegates,to,code,resolve,placeholder,placeholder,props,before,after,the,system,properties,check,p,subclasses,can,override,this,for,custom,resolution,strategies,including,customized,points,for,the,system,properties,check,param,placeholder,the,placeholder,to,resolve,param,props,the,merged,properties,of,this,configurer,param,system,properties,mode,the,system,properties,mode,according,to,the,constants,in,this,class,return,the,resolved,value,of,null,if,none,see,set,system,properties,mode,see,system,get,property,see,resolve,placeholder,string,java,util,properties;protected,string,resolve,placeholder,string,placeholder,properties,props,int,system,properties,mode,string,prop,val,null,if,system,properties,mode,prop,val,resolve,system,property,placeholder,if,prop,val,null,prop,val,resolve,placeholder,placeholder,props,if,prop,val,null,system,properties,mode,prop,val,resolve,system,property,placeholder,return,prop,val
PropertyPlaceholderConfigurer -> protected String resolvePlaceholder(String placeholder, Properties props, int systemPropertiesMode);1389804257;Resolve the given placeholder using the given properties, performing_a system properties check according to the given mode._<p>The default implementation delegates to {@code resolvePlaceholder_(placeholder, props)} before/after the system properties check._<p>Subclasses can override this for custom resolution strategies,_including customized points for the system properties check._@param placeholder the placeholder to resolve_@param props the merged properties of this configurer_@param systemPropertiesMode the system properties mode,_according to the constants in this class_@return the resolved value, of null if none_@see #setSystemPropertiesMode_@see System#getProperty_@see #resolvePlaceholder(String, java.util.Properties);protected String resolvePlaceholder(String placeholder, Properties props, int systemPropertiesMode) {_		String propVal = null__		if (systemPropertiesMode == SYSTEM_PROPERTIES_MODE_OVERRIDE) {_			propVal = resolveSystemProperty(placeholder)__		}_		if (propVal == null) {_			propVal = resolvePlaceholder(placeholder, props)__		}_		if (propVal == null && systemPropertiesMode == SYSTEM_PROPERTIES_MODE_FALLBACK) {_			propVal = resolveSystemProperty(placeholder)__		}_		return propVal__	};resolve,the,given,placeholder,using,the,given,properties,performing,a,system,properties,check,according,to,the,given,mode,p,the,default,implementation,delegates,to,code,resolve,placeholder,placeholder,props,before,after,the,system,properties,check,p,subclasses,can,override,this,for,custom,resolution,strategies,including,customized,points,for,the,system,properties,check,param,placeholder,the,placeholder,to,resolve,param,props,the,merged,properties,of,this,configurer,param,system,properties,mode,the,system,properties,mode,according,to,the,constants,in,this,class,return,the,resolved,value,of,null,if,none,see,set,system,properties,mode,see,system,get,property,see,resolve,placeholder,string,java,util,properties;protected,string,resolve,placeholder,string,placeholder,properties,props,int,system,properties,mode,string,prop,val,null,if,system,properties,mode,prop,val,resolve,system,property,placeholder,if,prop,val,null,prop,val,resolve,placeholder,placeholder,props,if,prop,val,null,system,properties,mode,prop,val,resolve,system,property,placeholder,return,prop,val
PropertyPlaceholderConfigurer -> protected String resolvePlaceholder(String placeholder, Properties props, int systemPropertiesMode);1390576922;Resolve the given placeholder using the given properties, performing_a system properties check according to the given mode._<p>The default implementation delegates to {@code resolvePlaceholder_(placeholder, props)} before/after the system properties check._<p>Subclasses can override this for custom resolution strategies,_including customized points for the system properties check._@param placeholder the placeholder to resolve_@param props the merged properties of this configurer_@param systemPropertiesMode the system properties mode,_according to the constants in this class_@return the resolved value, of null if none_@see #setSystemPropertiesMode_@see System#getProperty_@see #resolvePlaceholder(String, java.util.Properties);protected String resolvePlaceholder(String placeholder, Properties props, int systemPropertiesMode) {_		String propVal = null__		if (systemPropertiesMode == SYSTEM_PROPERTIES_MODE_OVERRIDE) {_			propVal = resolveSystemProperty(placeholder)__		}_		if (propVal == null) {_			propVal = resolvePlaceholder(placeholder, props)__		}_		if (propVal == null && systemPropertiesMode == SYSTEM_PROPERTIES_MODE_FALLBACK) {_			propVal = resolveSystemProperty(placeholder)__		}_		return propVal__	};resolve,the,given,placeholder,using,the,given,properties,performing,a,system,properties,check,according,to,the,given,mode,p,the,default,implementation,delegates,to,code,resolve,placeholder,placeholder,props,before,after,the,system,properties,check,p,subclasses,can,override,this,for,custom,resolution,strategies,including,customized,points,for,the,system,properties,check,param,placeholder,the,placeholder,to,resolve,param,props,the,merged,properties,of,this,configurer,param,system,properties,mode,the,system,properties,mode,according,to,the,constants,in,this,class,return,the,resolved,value,of,null,if,none,see,set,system,properties,mode,see,system,get,property,see,resolve,placeholder,string,java,util,properties;protected,string,resolve,placeholder,string,placeholder,properties,props,int,system,properties,mode,string,prop,val,null,if,system,properties,mode,prop,val,resolve,system,property,placeholder,if,prop,val,null,prop,val,resolve,placeholder,placeholder,props,if,prop,val,null,system,properties,mode,prop,val,resolve,system,property,placeholder,return,prop,val
PropertyPlaceholderConfigurer -> protected String resolvePlaceholder(String placeholder, Properties props, int systemPropertiesMode);1425578217;Resolve the given placeholder using the given properties, performing_a system properties check according to the given mode._<p>The default implementation delegates to {@code resolvePlaceholder_(placeholder, props)} before/after the system properties check._<p>Subclasses can override this for custom resolution strategies,_including customized points for the system properties check._@param placeholder the placeholder to resolve_@param props the merged properties of this configurer_@param systemPropertiesMode the system properties mode,_according to the constants in this class_@return the resolved value, of null if none_@see #setSystemPropertiesMode_@see System#getProperty_@see #resolvePlaceholder(String, java.util.Properties);protected String resolvePlaceholder(String placeholder, Properties props, int systemPropertiesMode) {_		String propVal = null__		if (systemPropertiesMode == SYSTEM_PROPERTIES_MODE_OVERRIDE) {_			propVal = resolveSystemProperty(placeholder)__		}_		if (propVal == null) {_			propVal = resolvePlaceholder(placeholder, props)__		}_		if (propVal == null && systemPropertiesMode == SYSTEM_PROPERTIES_MODE_FALLBACK) {_			propVal = resolveSystemProperty(placeholder)__		}_		return propVal__	};resolve,the,given,placeholder,using,the,given,properties,performing,a,system,properties,check,according,to,the,given,mode,p,the,default,implementation,delegates,to,code,resolve,placeholder,placeholder,props,before,after,the,system,properties,check,p,subclasses,can,override,this,for,custom,resolution,strategies,including,customized,points,for,the,system,properties,check,param,placeholder,the,placeholder,to,resolve,param,props,the,merged,properties,of,this,configurer,param,system,properties,mode,the,system,properties,mode,according,to,the,constants,in,this,class,return,the,resolved,value,of,null,if,none,see,set,system,properties,mode,see,system,get,property,see,resolve,placeholder,string,java,util,properties;protected,string,resolve,placeholder,string,placeholder,properties,props,int,system,properties,mode,string,prop,val,null,if,system,properties,mode,prop,val,resolve,system,property,placeholder,if,prop,val,null,prop,val,resolve,placeholder,placeholder,props,if,prop,val,null,system,properties,mode,prop,val,resolve,system,property,placeholder,return,prop,val
PropertyPlaceholderConfigurer -> protected String resolvePlaceholder(String placeholder, Properties props, int systemPropertiesMode);1455905979;Resolve the given placeholder using the given properties, performing_a system properties check according to the given mode._<p>The default implementation delegates to {@code resolvePlaceholder_(placeholder, props)} before/after the system properties check._<p>Subclasses can override this for custom resolution strategies,_including customized points for the system properties check._@param placeholder the placeholder to resolve_@param props the merged properties of this configurer_@param systemPropertiesMode the system properties mode,_according to the constants in this class_@return the resolved value, of null if none_@see #setSystemPropertiesMode_@see System#getProperty_@see #resolvePlaceholder(String, java.util.Properties);protected String resolvePlaceholder(String placeholder, Properties props, int systemPropertiesMode) {_		String propVal = null__		if (systemPropertiesMode == SYSTEM_PROPERTIES_MODE_OVERRIDE) {_			propVal = resolveSystemProperty(placeholder)__		}_		if (propVal == null) {_			propVal = resolvePlaceholder(placeholder, props)__		}_		if (propVal == null && systemPropertiesMode == SYSTEM_PROPERTIES_MODE_FALLBACK) {_			propVal = resolveSystemProperty(placeholder)__		}_		return propVal__	};resolve,the,given,placeholder,using,the,given,properties,performing,a,system,properties,check,according,to,the,given,mode,p,the,default,implementation,delegates,to,code,resolve,placeholder,placeholder,props,before,after,the,system,properties,check,p,subclasses,can,override,this,for,custom,resolution,strategies,including,customized,points,for,the,system,properties,check,param,placeholder,the,placeholder,to,resolve,param,props,the,merged,properties,of,this,configurer,param,system,properties,mode,the,system,properties,mode,according,to,the,constants,in,this,class,return,the,resolved,value,of,null,if,none,see,set,system,properties,mode,see,system,get,property,see,resolve,placeholder,string,java,util,properties;protected,string,resolve,placeholder,string,placeholder,properties,props,int,system,properties,mode,string,prop,val,null,if,system,properties,mode,prop,val,resolve,system,property,placeholder,if,prop,val,null,prop,val,resolve,placeholder,placeholder,props,if,prop,val,null,system,properties,mode,prop,val,resolve,system,property,placeholder,return,prop,val
PropertyPlaceholderConfigurer -> protected String resolvePlaceholder(String placeholder, Properties props, int systemPropertiesMode);1467726769;Resolve the given placeholder using the given properties, performing_a system properties check according to the given mode._<p>The default implementation delegates to {@code resolvePlaceholder_(placeholder, props)} before/after the system properties check._<p>Subclasses can override this for custom resolution strategies,_including customized points for the system properties check._@param placeholder the placeholder to resolve_@param props the merged properties of this configurer_@param systemPropertiesMode the system properties mode,_according to the constants in this class_@return the resolved value, of null if none_@see #setSystemPropertiesMode_@see System#getProperty_@see #resolvePlaceholder(String, java.util.Properties);protected String resolvePlaceholder(String placeholder, Properties props, int systemPropertiesMode) {_		String propVal = null__		if (systemPropertiesMode == SYSTEM_PROPERTIES_MODE_OVERRIDE) {_			propVal = resolveSystemProperty(placeholder)__		}_		if (propVal == null) {_			propVal = resolvePlaceholder(placeholder, props)__		}_		if (propVal == null && systemPropertiesMode == SYSTEM_PROPERTIES_MODE_FALLBACK) {_			propVal = resolveSystemProperty(placeholder)__		}_		return propVal__	};resolve,the,given,placeholder,using,the,given,properties,performing,a,system,properties,check,according,to,the,given,mode,p,the,default,implementation,delegates,to,code,resolve,placeholder,placeholder,props,before,after,the,system,properties,check,p,subclasses,can,override,this,for,custom,resolution,strategies,including,customized,points,for,the,system,properties,check,param,placeholder,the,placeholder,to,resolve,param,props,the,merged,properties,of,this,configurer,param,system,properties,mode,the,system,properties,mode,according,to,the,constants,in,this,class,return,the,resolved,value,of,null,if,none,see,set,system,properties,mode,see,system,get,property,see,resolve,placeholder,string,java,util,properties;protected,string,resolve,placeholder,string,placeholder,properties,props,int,system,properties,mode,string,prop,val,null,if,system,properties,mode,prop,val,resolve,system,property,placeholder,if,prop,val,null,prop,val,resolve,placeholder,placeholder,props,if,prop,val,null,system,properties,mode,prop,val,resolve,system,property,placeholder,return,prop,val
PropertyPlaceholderConfigurer -> protected String resolvePlaceholder(String placeholder, Properties props, int systemPropertiesMode);1490722023;Resolve the given placeholder using the given properties, performing_a system properties check according to the given mode._<p>The default implementation delegates to {@code resolvePlaceholder_(placeholder, props)} before/after the system properties check._<p>Subclasses can override this for custom resolution strategies,_including customized points for the system properties check._@param placeholder the placeholder to resolve_@param props the merged properties of this configurer_@param systemPropertiesMode the system properties mode,_according to the constants in this class_@return the resolved value, of null if none_@see #setSystemPropertiesMode_@see System#getProperty_@see #resolvePlaceholder(String, java.util.Properties);protected String resolvePlaceholder(String placeholder, Properties props, int systemPropertiesMode) {_		String propVal = null__		if (systemPropertiesMode == SYSTEM_PROPERTIES_MODE_OVERRIDE) {_			propVal = resolveSystemProperty(placeholder)__		}_		if (propVal == null) {_			propVal = resolvePlaceholder(placeholder, props)__		}_		if (propVal == null && systemPropertiesMode == SYSTEM_PROPERTIES_MODE_FALLBACK) {_			propVal = resolveSystemProperty(placeholder)__		}_		return propVal__	};resolve,the,given,placeholder,using,the,given,properties,performing,a,system,properties,check,according,to,the,given,mode,p,the,default,implementation,delegates,to,code,resolve,placeholder,placeholder,props,before,after,the,system,properties,check,p,subclasses,can,override,this,for,custom,resolution,strategies,including,customized,points,for,the,system,properties,check,param,placeholder,the,placeholder,to,resolve,param,props,the,merged,properties,of,this,configurer,param,system,properties,mode,the,system,properties,mode,according,to,the,constants,in,this,class,return,the,resolved,value,of,null,if,none,see,set,system,properties,mode,see,system,get,property,see,resolve,placeholder,string,java,util,properties;protected,string,resolve,placeholder,string,placeholder,properties,props,int,system,properties,mode,string,prop,val,null,if,system,properties,mode,prop,val,resolve,system,property,placeholder,if,prop,val,null,prop,val,resolve,placeholder,placeholder,props,if,prop,val,null,system,properties,mode,prop,val,resolve,system,property,placeholder,return,prop,val
PropertyPlaceholderConfigurer -> protected String resolvePlaceholder(String placeholder, Properties props, int systemPropertiesMode);1495868221;Resolve the given placeholder using the given properties, performing_a system properties check according to the given mode._<p>The default implementation delegates to {@code resolvePlaceholder_(placeholder, props)} before/after the system properties check._<p>Subclasses can override this for custom resolution strategies,_including customized points for the system properties check._@param placeholder the placeholder to resolve_@param props the merged properties of this configurer_@param systemPropertiesMode the system properties mode,_according to the constants in this class_@return the resolved value, of null if none_@see #setSystemPropertiesMode_@see System#getProperty_@see #resolvePlaceholder(String, java.util.Properties);protected String resolvePlaceholder(String placeholder, Properties props, int systemPropertiesMode) {_		String propVal = null__		if (systemPropertiesMode == SYSTEM_PROPERTIES_MODE_OVERRIDE) {_			propVal = resolveSystemProperty(placeholder)__		}_		if (propVal == null) {_			propVal = resolvePlaceholder(placeholder, props)__		}_		if (propVal == null && systemPropertiesMode == SYSTEM_PROPERTIES_MODE_FALLBACK) {_			propVal = resolveSystemProperty(placeholder)__		}_		return propVal__	};resolve,the,given,placeholder,using,the,given,properties,performing,a,system,properties,check,according,to,the,given,mode,p,the,default,implementation,delegates,to,code,resolve,placeholder,placeholder,props,before,after,the,system,properties,check,p,subclasses,can,override,this,for,custom,resolution,strategies,including,customized,points,for,the,system,properties,check,param,placeholder,the,placeholder,to,resolve,param,props,the,merged,properties,of,this,configurer,param,system,properties,mode,the,system,properties,mode,according,to,the,constants,in,this,class,return,the,resolved,value,of,null,if,none,see,set,system,properties,mode,see,system,get,property,see,resolve,placeholder,string,java,util,properties;protected,string,resolve,placeholder,string,placeholder,properties,props,int,system,properties,mode,string,prop,val,null,if,system,properties,mode,prop,val,resolve,system,property,placeholder,if,prop,val,null,prop,val,resolve,placeholder,placeholder,props,if,prop,val,null,system,properties,mode,prop,val,resolve,system,property,placeholder,return,prop,val
PropertyPlaceholderConfigurer -> protected String resolvePlaceholder(String placeholder, Properties props, int systemPropertiesMode);1496242568;Resolve the given placeholder using the given properties, performing_a system properties check according to the given mode._<p>The default implementation delegates to {@code resolvePlaceholder_(placeholder, props)} before/after the system properties check._<p>Subclasses can override this for custom resolution strategies,_including customized points for the system properties check._@param placeholder the placeholder to resolve_@param props the merged properties of this configurer_@param systemPropertiesMode the system properties mode,_according to the constants in this class_@return the resolved value, of null if none_@see #setSystemPropertiesMode_@see System#getProperty_@see #resolvePlaceholder(String, java.util.Properties);protected String resolvePlaceholder(String placeholder, Properties props, int systemPropertiesMode) {_		String propVal = null__		if (systemPropertiesMode == SYSTEM_PROPERTIES_MODE_OVERRIDE) {_			propVal = resolveSystemProperty(placeholder)__		}_		if (propVal == null) {_			propVal = resolvePlaceholder(placeholder, props)__		}_		if (propVal == null && systemPropertiesMode == SYSTEM_PROPERTIES_MODE_FALLBACK) {_			propVal = resolveSystemProperty(placeholder)__		}_		return propVal__	};resolve,the,given,placeholder,using,the,given,properties,performing,a,system,properties,check,according,to,the,given,mode,p,the,default,implementation,delegates,to,code,resolve,placeholder,placeholder,props,before,after,the,system,properties,check,p,subclasses,can,override,this,for,custom,resolution,strategies,including,customized,points,for,the,system,properties,check,param,placeholder,the,placeholder,to,resolve,param,props,the,merged,properties,of,this,configurer,param,system,properties,mode,the,system,properties,mode,according,to,the,constants,in,this,class,return,the,resolved,value,of,null,if,none,see,set,system,properties,mode,see,system,get,property,see,resolve,placeholder,string,java,util,properties;protected,string,resolve,placeholder,string,placeholder,properties,props,int,system,properties,mode,string,prop,val,null,if,system,properties,mode,prop,val,resolve,system,property,placeholder,if,prop,val,null,prop,val,resolve,placeholder,placeholder,props,if,prop,val,null,system,properties,mode,prop,val,resolve,system,property,placeholder,return,prop,val
PropertyPlaceholderConfigurer -> public void setSearchSystemEnvironment(boolean searchSystemEnvironment);1328020251;Set whether to search for a matching system environment variable_if no matching system property has been found. Only applied when_"systemPropertyMode" is active (i.e. "fallback" or "override"), right_after checking JVM system properties._<p>Default is "true". Switch this setting off to never resolve placeholders_against system environment variables. Note that it is generally recommended_to pass external values in as JVM system properties: This can easily be_achieved in a startup script, even for existing environment variables._<p><b>NOTE:</b> Access to environment variables does not work on the_Sun VM 1.4, where the corresponding {@link System#getenv} support was_disabled - before it eventually got re-enabled for the Sun VM 1.5._Please upgrade to 1.5 (or higher) if you intend to rely on the_environment variable support._@see #setSystemPropertiesMode_@see java.lang.System#getProperty(String)_@see java.lang.System#getenv(String);public void setSearchSystemEnvironment(boolean searchSystemEnvironment) {_		this.searchSystemEnvironment = searchSystemEnvironment__	};set,whether,to,search,for,a,matching,system,environment,variable,if,no,matching,system,property,has,been,found,only,applied,when,system,property,mode,is,active,i,e,fallback,or,override,right,after,checking,jvm,system,properties,p,default,is,true,switch,this,setting,off,to,never,resolve,placeholders,against,system,environment,variables,note,that,it,is,generally,recommended,to,pass,external,values,in,as,jvm,system,properties,this,can,easily,be,achieved,in,a,startup,script,even,for,existing,environment,variables,p,b,note,b,access,to,environment,variables,does,not,work,on,the,sun,vm,1,4,where,the,corresponding,link,system,getenv,support,was,disabled,before,it,eventually,got,re,enabled,for,the,sun,vm,1,5,please,upgrade,to,1,5,or,higher,if,you,intend,to,rely,on,the,environment,variable,support,see,set,system,properties,mode,see,java,lang,system,get,property,string,see,java,lang,system,getenv,string;public,void,set,search,system,environment,boolean,search,system,environment,this,search,system,environment,search,system,environment
PropertyPlaceholderConfigurer -> public void setSearchSystemEnvironment(boolean searchSystemEnvironment);1355313310;Set whether to search for a matching system environment variable_if no matching system property has been found. Only applied when_"systemPropertyMode" is active (i.e. "fallback" or "override"), right_after checking JVM system properties._<p>Default is "true". Switch this setting off to never resolve placeholders_against system environment variables. Note that it is generally recommended_to pass external values in as JVM system properties: This can easily be_achieved in a startup script, even for existing environment variables._<p><b>NOTE:</b> Access to environment variables does not work on the_Sun VM 1.4, where the corresponding {@link System#getenv} support was_disabled - before it eventually got re-enabled for the Sun VM 1.5._Please upgrade to 1.5 (or higher) if you intend to rely on the_environment variable support._@see #setSystemPropertiesMode_@see java.lang.System#getProperty(String)_@see java.lang.System#getenv(String);public void setSearchSystemEnvironment(boolean searchSystemEnvironment) {_		this.searchSystemEnvironment = searchSystemEnvironment__	};set,whether,to,search,for,a,matching,system,environment,variable,if,no,matching,system,property,has,been,found,only,applied,when,system,property,mode,is,active,i,e,fallback,or,override,right,after,checking,jvm,system,properties,p,default,is,true,switch,this,setting,off,to,never,resolve,placeholders,against,system,environment,variables,note,that,it,is,generally,recommended,to,pass,external,values,in,as,jvm,system,properties,this,can,easily,be,achieved,in,a,startup,script,even,for,existing,environment,variables,p,b,note,b,access,to,environment,variables,does,not,work,on,the,sun,vm,1,4,where,the,corresponding,link,system,getenv,support,was,disabled,before,it,eventually,got,re,enabled,for,the,sun,vm,1,5,please,upgrade,to,1,5,or,higher,if,you,intend,to,rely,on,the,environment,variable,support,see,set,system,properties,mode,see,java,lang,system,get,property,string,see,java,lang,system,getenv,string;public,void,set,search,system,environment,boolean,search,system,environment,this,search,system,environment,search,system,environment
PropertyPlaceholderConfigurer -> public void setSearchSystemEnvironment(boolean searchSystemEnvironment);1356735495;Set whether to search for a matching system environment variable_if no matching system property has been found. Only applied when_"systemPropertyMode" is active (i.e. "fallback" or "override"), right_after checking JVM system properties._<p>Default is "true". Switch this setting off to never resolve placeholders_against system environment variables. Note that it is generally recommended_to pass external values in as JVM system properties: This can easily be_achieved in a startup script, even for existing environment variables._<p><b>NOTE:</b> Access to environment variables does not work on the_Sun VM 1.4, where the corresponding {@link System#getenv} support was_disabled - before it eventually got re-enabled for the Sun VM 1.5._Please upgrade to 1.5 (or higher) if you intend to rely on the_environment variable support._@see #setSystemPropertiesMode_@see java.lang.System#getProperty(String)_@see java.lang.System#getenv(String);public void setSearchSystemEnvironment(boolean searchSystemEnvironment) {_		this.searchSystemEnvironment = searchSystemEnvironment__	};set,whether,to,search,for,a,matching,system,environment,variable,if,no,matching,system,property,has,been,found,only,applied,when,system,property,mode,is,active,i,e,fallback,or,override,right,after,checking,jvm,system,properties,p,default,is,true,switch,this,setting,off,to,never,resolve,placeholders,against,system,environment,variables,note,that,it,is,generally,recommended,to,pass,external,values,in,as,jvm,system,properties,this,can,easily,be,achieved,in,a,startup,script,even,for,existing,environment,variables,p,b,note,b,access,to,environment,variables,does,not,work,on,the,sun,vm,1,4,where,the,corresponding,link,system,getenv,support,was,disabled,before,it,eventually,got,re,enabled,for,the,sun,vm,1,5,please,upgrade,to,1,5,or,higher,if,you,intend,to,rely,on,the,environment,variable,support,see,set,system,properties,mode,see,java,lang,system,get,property,string,see,java,lang,system,getenv,string;public,void,set,search,system,environment,boolean,search,system,environment,this,search,system,environment,search,system,environment
PropertyPlaceholderConfigurer -> public void setSearchSystemEnvironment(boolean searchSystemEnvironment);1357119239;Set whether to search for a matching system environment variable_if no matching system property has been found. Only applied when_"systemPropertyMode" is active (i.e. "fallback" or "override"), right_after checking JVM system properties._<p>Default is "true". Switch this setting off to never resolve placeholders_against system environment variables. Note that it is generally recommended_to pass external values in as JVM system properties: This can easily be_achieved in a startup script, even for existing environment variables._<p><b>NOTE:</b> Access to environment variables does not work on the_Sun VM 1.4, where the corresponding {@link System#getenv} support was_disabled - before it eventually got re-enabled for the Sun VM 1.5._Please upgrade to 1.5 (or higher) if you intend to rely on the_environment variable support._@see #setSystemPropertiesMode_@see java.lang.System#getProperty(String)_@see java.lang.System#getenv(String);public void setSearchSystemEnvironment(boolean searchSystemEnvironment) {_		this.searchSystemEnvironment = searchSystemEnvironment__	};set,whether,to,search,for,a,matching,system,environment,variable,if,no,matching,system,property,has,been,found,only,applied,when,system,property,mode,is,active,i,e,fallback,or,override,right,after,checking,jvm,system,properties,p,default,is,true,switch,this,setting,off,to,never,resolve,placeholders,against,system,environment,variables,note,that,it,is,generally,recommended,to,pass,external,values,in,as,jvm,system,properties,this,can,easily,be,achieved,in,a,startup,script,even,for,existing,environment,variables,p,b,note,b,access,to,environment,variables,does,not,work,on,the,sun,vm,1,4,where,the,corresponding,link,system,getenv,support,was,disabled,before,it,eventually,got,re,enabled,for,the,sun,vm,1,5,please,upgrade,to,1,5,or,higher,if,you,intend,to,rely,on,the,environment,variable,support,see,set,system,properties,mode,see,java,lang,system,get,property,string,see,java,lang,system,getenv,string;public,void,set,search,system,environment,boolean,search,system,environment,this,search,system,environment,search,system,environment
PropertyPlaceholderConfigurer -> public void setSearchSystemEnvironment(boolean searchSystemEnvironment);1368482696;Set whether to search for a matching system environment variable_if no matching system property has been found. Only applied when_"systemPropertyMode" is active (i.e. "fallback" or "override"), right_after checking JVM system properties._<p>Default is "true". Switch this setting off to never resolve placeholders_against system environment variables. Note that it is generally recommended_to pass external values in as JVM system properties: This can easily be_achieved in a startup script, even for existing environment variables._<p><b>NOTE:</b> Access to environment variables does not work on the_Sun VM 1.4, where the corresponding {@link System#getenv} support was_disabled - before it eventually got re-enabled for the Sun VM 1.5._Please upgrade to 1.5 (or higher) if you intend to rely on the_environment variable support._@see #setSystemPropertiesMode_@see java.lang.System#getProperty(String)_@see java.lang.System#getenv(String);public void setSearchSystemEnvironment(boolean searchSystemEnvironment) {_		this.searchSystemEnvironment = searchSystemEnvironment__	};set,whether,to,search,for,a,matching,system,environment,variable,if,no,matching,system,property,has,been,found,only,applied,when,system,property,mode,is,active,i,e,fallback,or,override,right,after,checking,jvm,system,properties,p,default,is,true,switch,this,setting,off,to,never,resolve,placeholders,against,system,environment,variables,note,that,it,is,generally,recommended,to,pass,external,values,in,as,jvm,system,properties,this,can,easily,be,achieved,in,a,startup,script,even,for,existing,environment,variables,p,b,note,b,access,to,environment,variables,does,not,work,on,the,sun,vm,1,4,where,the,corresponding,link,system,getenv,support,was,disabled,before,it,eventually,got,re,enabled,for,the,sun,vm,1,5,please,upgrade,to,1,5,or,higher,if,you,intend,to,rely,on,the,environment,variable,support,see,set,system,properties,mode,see,java,lang,system,get,property,string,see,java,lang,system,getenv,string;public,void,set,search,system,environment,boolean,search,system,environment,this,search,system,environment,search,system,environment
PropertyPlaceholderConfigurer -> public void setSearchSystemEnvironment(boolean searchSystemEnvironment);1389804257;Set whether to search for a matching system environment variable_if no matching system property has been found. Only applied when_"systemPropertyMode" is active (i.e. "fallback" or "override"), right_after checking JVM system properties._<p>Default is "true". Switch this setting off to never resolve placeholders_against system environment variables. Note that it is generally recommended_to pass external values in as JVM system properties: This can easily be_achieved in a startup script, even for existing environment variables._<p><b>NOTE:</b> Access to environment variables does not work on the_Sun VM 1.4, where the corresponding {@link System#getenv} support was_disabled - before it eventually got re-enabled for the Sun VM 1.5._Please upgrade to 1.5 (or higher) if you intend to rely on the_environment variable support._@see #setSystemPropertiesMode_@see java.lang.System#getProperty(String)_@see java.lang.System#getenv(String);public void setSearchSystemEnvironment(boolean searchSystemEnvironment) {_		this.searchSystemEnvironment = searchSystemEnvironment__	};set,whether,to,search,for,a,matching,system,environment,variable,if,no,matching,system,property,has,been,found,only,applied,when,system,property,mode,is,active,i,e,fallback,or,override,right,after,checking,jvm,system,properties,p,default,is,true,switch,this,setting,off,to,never,resolve,placeholders,against,system,environment,variables,note,that,it,is,generally,recommended,to,pass,external,values,in,as,jvm,system,properties,this,can,easily,be,achieved,in,a,startup,script,even,for,existing,environment,variables,p,b,note,b,access,to,environment,variables,does,not,work,on,the,sun,vm,1,4,where,the,corresponding,link,system,getenv,support,was,disabled,before,it,eventually,got,re,enabled,for,the,sun,vm,1,5,please,upgrade,to,1,5,or,higher,if,you,intend,to,rely,on,the,environment,variable,support,see,set,system,properties,mode,see,java,lang,system,get,property,string,see,java,lang,system,getenv,string;public,void,set,search,system,environment,boolean,search,system,environment,this,search,system,environment,search,system,environment
PropertyPlaceholderConfigurer -> public void setSearchSystemEnvironment(boolean searchSystemEnvironment);1390576922;Set whether to search for a matching system environment variable_if no matching system property has been found. Only applied when_"systemPropertyMode" is active (i.e. "fallback" or "override"), right_after checking JVM system properties._<p>Default is "true". Switch this setting off to never resolve placeholders_against system environment variables. Note that it is generally recommended_to pass external values in as JVM system properties: This can easily be_achieved in a startup script, even for existing environment variables._<p><b>NOTE:</b> Access to environment variables does not work on the_Sun VM 1.4, where the corresponding {@link System#getenv} support was_disabled - before it eventually got re-enabled for the Sun VM 1.5._Please upgrade to 1.5 (or higher) if you intend to rely on the_environment variable support._@see #setSystemPropertiesMode_@see java.lang.System#getProperty(String)_@see java.lang.System#getenv(String);public void setSearchSystemEnvironment(boolean searchSystemEnvironment) {_		this.searchSystemEnvironment = searchSystemEnvironment__	};set,whether,to,search,for,a,matching,system,environment,variable,if,no,matching,system,property,has,been,found,only,applied,when,system,property,mode,is,active,i,e,fallback,or,override,right,after,checking,jvm,system,properties,p,default,is,true,switch,this,setting,off,to,never,resolve,placeholders,against,system,environment,variables,note,that,it,is,generally,recommended,to,pass,external,values,in,as,jvm,system,properties,this,can,easily,be,achieved,in,a,startup,script,even,for,existing,environment,variables,p,b,note,b,access,to,environment,variables,does,not,work,on,the,sun,vm,1,4,where,the,corresponding,link,system,getenv,support,was,disabled,before,it,eventually,got,re,enabled,for,the,sun,vm,1,5,please,upgrade,to,1,5,or,higher,if,you,intend,to,rely,on,the,environment,variable,support,see,set,system,properties,mode,see,java,lang,system,get,property,string,see,java,lang,system,getenv,string;public,void,set,search,system,environment,boolean,search,system,environment,this,search,system,environment,search,system,environment
PropertyPlaceholderConfigurer -> public void setSearchSystemEnvironment(boolean searchSystemEnvironment);1425578217;Set whether to search for a matching system environment variable_if no matching system property has been found. Only applied when_"systemPropertyMode" is active (i.e. "fallback" or "override"), right_after checking JVM system properties._<p>Default is "true". Switch this setting off to never resolve placeholders_against system environment variables. Note that it is generally recommended_to pass external values in as JVM system properties: This can easily be_achieved in a startup script, even for existing environment variables._<p><b>NOTE:</b> Access to environment variables does not work on the_Sun VM 1.4, where the corresponding {@link System#getenv} support was_disabled - before it eventually got re-enabled for the Sun VM 1.5._Please upgrade to 1.5 (or higher) if you intend to rely on the_environment variable support._@see #setSystemPropertiesMode_@see java.lang.System#getProperty(String)_@see java.lang.System#getenv(String);public void setSearchSystemEnvironment(boolean searchSystemEnvironment) {_		this.searchSystemEnvironment = searchSystemEnvironment__	};set,whether,to,search,for,a,matching,system,environment,variable,if,no,matching,system,property,has,been,found,only,applied,when,system,property,mode,is,active,i,e,fallback,or,override,right,after,checking,jvm,system,properties,p,default,is,true,switch,this,setting,off,to,never,resolve,placeholders,against,system,environment,variables,note,that,it,is,generally,recommended,to,pass,external,values,in,as,jvm,system,properties,this,can,easily,be,achieved,in,a,startup,script,even,for,existing,environment,variables,p,b,note,b,access,to,environment,variables,does,not,work,on,the,sun,vm,1,4,where,the,corresponding,link,system,getenv,support,was,disabled,before,it,eventually,got,re,enabled,for,the,sun,vm,1,5,please,upgrade,to,1,5,or,higher,if,you,intend,to,rely,on,the,environment,variable,support,see,set,system,properties,mode,see,java,lang,system,get,property,string,see,java,lang,system,getenv,string;public,void,set,search,system,environment,boolean,search,system,environment,this,search,system,environment,search,system,environment
PropertyPlaceholderConfigurer -> public void setSearchSystemEnvironment(boolean searchSystemEnvironment);1455905979;Set whether to search for a matching system environment variable_if no matching system property has been found. Only applied when_"systemPropertyMode" is active (i.e. "fallback" or "override"), right_after checking JVM system properties._<p>Default is "true". Switch this setting off to never resolve placeholders_against system environment variables. Note that it is generally recommended_to pass external values in as JVM system properties: This can easily be_achieved in a startup script, even for existing environment variables._<p><b>NOTE:</b> Access to environment variables does not work on the_Sun VM 1.4, where the corresponding {@link System#getenv} support was_disabled - before it eventually got re-enabled for the Sun VM 1.5._Please upgrade to 1.5 (or higher) if you intend to rely on the_environment variable support._@see #setSystemPropertiesMode_@see java.lang.System#getProperty(String)_@see java.lang.System#getenv(String);public void setSearchSystemEnvironment(boolean searchSystemEnvironment) {_		this.searchSystemEnvironment = searchSystemEnvironment__	};set,whether,to,search,for,a,matching,system,environment,variable,if,no,matching,system,property,has,been,found,only,applied,when,system,property,mode,is,active,i,e,fallback,or,override,right,after,checking,jvm,system,properties,p,default,is,true,switch,this,setting,off,to,never,resolve,placeholders,against,system,environment,variables,note,that,it,is,generally,recommended,to,pass,external,values,in,as,jvm,system,properties,this,can,easily,be,achieved,in,a,startup,script,even,for,existing,environment,variables,p,b,note,b,access,to,environment,variables,does,not,work,on,the,sun,vm,1,4,where,the,corresponding,link,system,getenv,support,was,disabled,before,it,eventually,got,re,enabled,for,the,sun,vm,1,5,please,upgrade,to,1,5,or,higher,if,you,intend,to,rely,on,the,environment,variable,support,see,set,system,properties,mode,see,java,lang,system,get,property,string,see,java,lang,system,getenv,string;public,void,set,search,system,environment,boolean,search,system,environment,this,search,system,environment,search,system,environment
PropertyPlaceholderConfigurer -> public void setSearchSystemEnvironment(boolean searchSystemEnvironment);1467726769;Set whether to search for a matching system environment variable_if no matching system property has been found. Only applied when_"systemPropertyMode" is active (i.e. "fallback" or "override"), right_after checking JVM system properties._<p>Default is "true". Switch this setting off to never resolve placeholders_against system environment variables. Note that it is generally recommended_to pass external values in as JVM system properties: This can easily be_achieved in a startup script, even for existing environment variables._<p><b>NOTE:</b> Access to environment variables does not work on the_Sun VM 1.4, where the corresponding {@link System#getenv} support was_disabled - before it eventually got re-enabled for the Sun VM 1.5._Please upgrade to 1.5 (or higher) if you intend to rely on the_environment variable support._@see #setSystemPropertiesMode_@see java.lang.System#getProperty(String)_@see java.lang.System#getenv(String);public void setSearchSystemEnvironment(boolean searchSystemEnvironment) {_		this.searchSystemEnvironment = searchSystemEnvironment__	};set,whether,to,search,for,a,matching,system,environment,variable,if,no,matching,system,property,has,been,found,only,applied,when,system,property,mode,is,active,i,e,fallback,or,override,right,after,checking,jvm,system,properties,p,default,is,true,switch,this,setting,off,to,never,resolve,placeholders,against,system,environment,variables,note,that,it,is,generally,recommended,to,pass,external,values,in,as,jvm,system,properties,this,can,easily,be,achieved,in,a,startup,script,even,for,existing,environment,variables,p,b,note,b,access,to,environment,variables,does,not,work,on,the,sun,vm,1,4,where,the,corresponding,link,system,getenv,support,was,disabled,before,it,eventually,got,re,enabled,for,the,sun,vm,1,5,please,upgrade,to,1,5,or,higher,if,you,intend,to,rely,on,the,environment,variable,support,see,set,system,properties,mode,see,java,lang,system,get,property,string,see,java,lang,system,getenv,string;public,void,set,search,system,environment,boolean,search,system,environment,this,search,system,environment,search,system,environment
PropertyPlaceholderConfigurer -> public void setSearchSystemEnvironment(boolean searchSystemEnvironment);1490722023;Set whether to search for a matching system environment variable_if no matching system property has been found. Only applied when_"systemPropertyMode" is active (i.e. "fallback" or "override"), right_after checking JVM system properties._<p>Default is "true". Switch this setting off to never resolve placeholders_against system environment variables. Note that it is generally recommended_to pass external values in as JVM system properties: This can easily be_achieved in a startup script, even for existing environment variables._<p><b>NOTE:</b> Access to environment variables does not work on the_Sun VM 1.4, where the corresponding {@link System#getenv} support was_disabled - before it eventually got re-enabled for the Sun VM 1.5._Please upgrade to 1.5 (or higher) if you intend to rely on the_environment variable support._@see #setSystemPropertiesMode_@see java.lang.System#getProperty(String)_@see java.lang.System#getenv(String);public void setSearchSystemEnvironment(boolean searchSystemEnvironment) {_		this.searchSystemEnvironment = searchSystemEnvironment__	};set,whether,to,search,for,a,matching,system,environment,variable,if,no,matching,system,property,has,been,found,only,applied,when,system,property,mode,is,active,i,e,fallback,or,override,right,after,checking,jvm,system,properties,p,default,is,true,switch,this,setting,off,to,never,resolve,placeholders,against,system,environment,variables,note,that,it,is,generally,recommended,to,pass,external,values,in,as,jvm,system,properties,this,can,easily,be,achieved,in,a,startup,script,even,for,existing,environment,variables,p,b,note,b,access,to,environment,variables,does,not,work,on,the,sun,vm,1,4,where,the,corresponding,link,system,getenv,support,was,disabled,before,it,eventually,got,re,enabled,for,the,sun,vm,1,5,please,upgrade,to,1,5,or,higher,if,you,intend,to,rely,on,the,environment,variable,support,see,set,system,properties,mode,see,java,lang,system,get,property,string,see,java,lang,system,getenv,string;public,void,set,search,system,environment,boolean,search,system,environment,this,search,system,environment,search,system,environment
PropertyPlaceholderConfigurer -> public void setSearchSystemEnvironment(boolean searchSystemEnvironment);1495868221;Set whether to search for a matching system environment variable_if no matching system property has been found. Only applied when_"systemPropertyMode" is active (i.e. "fallback" or "override"), right_after checking JVM system properties._<p>Default is "true". Switch this setting off to never resolve placeholders_against system environment variables. Note that it is generally recommended_to pass external values in as JVM system properties: This can easily be_achieved in a startup script, even for existing environment variables._<p><b>NOTE:</b> Access to environment variables does not work on the_Sun VM 1.4, where the corresponding {@link System#getenv} support was_disabled - before it eventually got re-enabled for the Sun VM 1.5._Please upgrade to 1.5 (or higher) if you intend to rely on the_environment variable support._@see #setSystemPropertiesMode_@see java.lang.System#getProperty(String)_@see java.lang.System#getenv(String);public void setSearchSystemEnvironment(boolean searchSystemEnvironment) {_		this.searchSystemEnvironment = searchSystemEnvironment__	};set,whether,to,search,for,a,matching,system,environment,variable,if,no,matching,system,property,has,been,found,only,applied,when,system,property,mode,is,active,i,e,fallback,or,override,right,after,checking,jvm,system,properties,p,default,is,true,switch,this,setting,off,to,never,resolve,placeholders,against,system,environment,variables,note,that,it,is,generally,recommended,to,pass,external,values,in,as,jvm,system,properties,this,can,easily,be,achieved,in,a,startup,script,even,for,existing,environment,variables,p,b,note,b,access,to,environment,variables,does,not,work,on,the,sun,vm,1,4,where,the,corresponding,link,system,getenv,support,was,disabled,before,it,eventually,got,re,enabled,for,the,sun,vm,1,5,please,upgrade,to,1,5,or,higher,if,you,intend,to,rely,on,the,environment,variable,support,see,set,system,properties,mode,see,java,lang,system,get,property,string,see,java,lang,system,getenv,string;public,void,set,search,system,environment,boolean,search,system,environment,this,search,system,environment,search,system,environment
PropertyPlaceholderConfigurer -> public void setSearchSystemEnvironment(boolean searchSystemEnvironment);1496242568;Set whether to search for a matching system environment variable_if no matching system property has been found. Only applied when_"systemPropertyMode" is active (i.e. "fallback" or "override"), right_after checking JVM system properties._<p>Default is "true". Switch this setting off to never resolve placeholders_against system environment variables. Note that it is generally recommended_to pass external values in as JVM system properties: This can easily be_achieved in a startup script, even for existing environment variables._<p><b>NOTE:</b> Access to environment variables does not work on the_Sun VM 1.4, where the corresponding {@link System#getenv} support was_disabled - before it eventually got re-enabled for the Sun VM 1.5._Please upgrade to 1.5 (or higher) if you intend to rely on the_environment variable support._@see #setSystemPropertiesMode_@see java.lang.System#getProperty(String)_@see java.lang.System#getenv(String);public void setSearchSystemEnvironment(boolean searchSystemEnvironment) {_		this.searchSystemEnvironment = searchSystemEnvironment__	};set,whether,to,search,for,a,matching,system,environment,variable,if,no,matching,system,property,has,been,found,only,applied,when,system,property,mode,is,active,i,e,fallback,or,override,right,after,checking,jvm,system,properties,p,default,is,true,switch,this,setting,off,to,never,resolve,placeholders,against,system,environment,variables,note,that,it,is,generally,recommended,to,pass,external,values,in,as,jvm,system,properties,this,can,easily,be,achieved,in,a,startup,script,even,for,existing,environment,variables,p,b,note,b,access,to,environment,variables,does,not,work,on,the,sun,vm,1,4,where,the,corresponding,link,system,getenv,support,was,disabled,before,it,eventually,got,re,enabled,for,the,sun,vm,1,5,please,upgrade,to,1,5,or,higher,if,you,intend,to,rely,on,the,environment,variable,support,see,set,system,properties,mode,see,java,lang,system,get,property,string,see,java,lang,system,getenv,string;public,void,set,search,system,environment,boolean,search,system,environment,this,search,system,environment,search,system,environment
PropertyPlaceholderConfigurer -> public void setSearchSystemEnvironment(boolean searchSystemEnvironment);1496837955;Set whether to search for a matching system environment variable_if no matching system property has been found. Only applied when_"systemPropertyMode" is active (i.e. "fallback" or "override"), right_after checking JVM system properties._<p>Default is "true". Switch this setting off to never resolve placeholders_against system environment variables. Note that it is generally recommended_to pass external values in as JVM system properties: This can easily be_achieved in a startup script, even for existing environment variables._<p><b>NOTE:</b> Access to environment variables does not work on the_Sun VM 1.4, where the corresponding {@link System#getenv} support was_disabled - before it eventually got re-enabled for the Sun VM 1.5._Please upgrade to 1.5 (or higher) if you intend to rely on the_environment variable support._@see #setSystemPropertiesMode_@see java.lang.System#getProperty(String)_@see java.lang.System#getenv(String);public void setSearchSystemEnvironment(boolean searchSystemEnvironment) {_		this.searchSystemEnvironment = searchSystemEnvironment__	};set,whether,to,search,for,a,matching,system,environment,variable,if,no,matching,system,property,has,been,found,only,applied,when,system,property,mode,is,active,i,e,fallback,or,override,right,after,checking,jvm,system,properties,p,default,is,true,switch,this,setting,off,to,never,resolve,placeholders,against,system,environment,variables,note,that,it,is,generally,recommended,to,pass,external,values,in,as,jvm,system,properties,this,can,easily,be,achieved,in,a,startup,script,even,for,existing,environment,variables,p,b,note,b,access,to,environment,variables,does,not,work,on,the,sun,vm,1,4,where,the,corresponding,link,system,getenv,support,was,disabled,before,it,eventually,got,re,enabled,for,the,sun,vm,1,5,please,upgrade,to,1,5,or,higher,if,you,intend,to,rely,on,the,environment,variable,support,see,set,system,properties,mode,see,java,lang,system,get,property,string,see,java,lang,system,getenv,string;public,void,set,search,system,environment,boolean,search,system,environment,this,search,system,environment,search,system,environment
PropertyPlaceholderConfigurer -> public void setSearchSystemEnvironment(boolean searchSystemEnvironment);1502974979;Set whether to search for a matching system environment variable_if no matching system property has been found. Only applied when_"systemPropertyMode" is active (i.e. "fallback" or "override"), right_after checking JVM system properties._<p>Default is "true". Switch this setting off to never resolve placeholders_against system environment variables. Note that it is generally recommended_to pass external values in as JVM system properties: This can easily be_achieved in a startup script, even for existing environment variables._<p><b>NOTE:</b> Access to environment variables does not work on the_Sun VM 1.4, where the corresponding {@link System#getenv} support was_disabled - before it eventually got re-enabled for the Sun VM 1.5._Please upgrade to 1.5 (or higher) if you intend to rely on the_environment variable support._@see #setSystemPropertiesMode_@see java.lang.System#getProperty(String)_@see java.lang.System#getenv(String);public void setSearchSystemEnvironment(boolean searchSystemEnvironment) {_		this.searchSystemEnvironment = searchSystemEnvironment__	};set,whether,to,search,for,a,matching,system,environment,variable,if,no,matching,system,property,has,been,found,only,applied,when,system,property,mode,is,active,i,e,fallback,or,override,right,after,checking,jvm,system,properties,p,default,is,true,switch,this,setting,off,to,never,resolve,placeholders,against,system,environment,variables,note,that,it,is,generally,recommended,to,pass,external,values,in,as,jvm,system,properties,this,can,easily,be,achieved,in,a,startup,script,even,for,existing,environment,variables,p,b,note,b,access,to,environment,variables,does,not,work,on,the,sun,vm,1,4,where,the,corresponding,link,system,getenv,support,was,disabled,before,it,eventually,got,re,enabled,for,the,sun,vm,1,5,please,upgrade,to,1,5,or,higher,if,you,intend,to,rely,on,the,environment,variable,support,see,set,system,properties,mode,see,java,lang,system,get,property,string,see,java,lang,system,getenv,string;public,void,set,search,system,environment,boolean,search,system,environment,this,search,system,environment,search,system,environment
PropertyPlaceholderConfigurer -> public void setSearchSystemEnvironment(boolean searchSystemEnvironment);1530174524;Set whether to search for a matching system environment variable_if no matching system property has been found. Only applied when_"systemPropertyMode" is active (i.e. "fallback" or "override"), right_after checking JVM system properties._<p>Default is "true". Switch this setting off to never resolve placeholders_against system environment variables. Note that it is generally recommended_to pass external values in as JVM system properties: This can easily be_achieved in a startup script, even for existing environment variables._<p><b>NOTE:</b> Access to environment variables does not work on the_Sun VM 1.4, where the corresponding {@link System#getenv} support was_disabled - before it eventually got re-enabled for the Sun VM 1.5._Please upgrade to 1.5 (or higher) if you intend to rely on the_environment variable support._@see #setSystemPropertiesMode_@see java.lang.System#getProperty(String)_@see java.lang.System#getenv(String);public void setSearchSystemEnvironment(boolean searchSystemEnvironment) {_		this.searchSystemEnvironment = searchSystemEnvironment__	};set,whether,to,search,for,a,matching,system,environment,variable,if,no,matching,system,property,has,been,found,only,applied,when,system,property,mode,is,active,i,e,fallback,or,override,right,after,checking,jvm,system,properties,p,default,is,true,switch,this,setting,off,to,never,resolve,placeholders,against,system,environment,variables,note,that,it,is,generally,recommended,to,pass,external,values,in,as,jvm,system,properties,this,can,easily,be,achieved,in,a,startup,script,even,for,existing,environment,variables,p,b,note,b,access,to,environment,variables,does,not,work,on,the,sun,vm,1,4,where,the,corresponding,link,system,getenv,support,was,disabled,before,it,eventually,got,re,enabled,for,the,sun,vm,1,5,please,upgrade,to,1,5,or,higher,if,you,intend,to,rely,on,the,environment,variable,support,see,set,system,properties,mode,see,java,lang,system,get,property,string,see,java,lang,system,getenv,string;public,void,set,search,system,environment,boolean,search,system,environment,this,search,system,environment,search,system,environment
PropertyPlaceholderConfigurer -> public void setSearchSystemEnvironment(boolean searchSystemEnvironment);1530174524;Set whether to search for a matching system environment variable_if no matching system property has been found. Only applied when_"systemPropertyMode" is active (i.e. "fallback" or "override"), right_after checking JVM system properties._<p>Default is "true". Switch this setting off to never resolve placeholders_against system environment variables. Note that it is generally recommended_to pass external values in as JVM system properties: This can easily be_achieved in a startup script, even for existing environment variables._<p><b>NOTE:</b> Access to environment variables does not work on the_Sun VM 1.4, where the corresponding {@link System#getenv} support was_disabled - before it eventually got re-enabled for the Sun VM 1.5._Please upgrade to 1.5 (or higher) if you intend to rely on the_environment variable support._@see #setSystemPropertiesMode_@see java.lang.System#getProperty(String)_@see java.lang.System#getenv(String);public void setSearchSystemEnvironment(boolean searchSystemEnvironment) {_		this.searchSystemEnvironment = searchSystemEnvironment__	};set,whether,to,search,for,a,matching,system,environment,variable,if,no,matching,system,property,has,been,found,only,applied,when,system,property,mode,is,active,i,e,fallback,or,override,right,after,checking,jvm,system,properties,p,default,is,true,switch,this,setting,off,to,never,resolve,placeholders,against,system,environment,variables,note,that,it,is,generally,recommended,to,pass,external,values,in,as,jvm,system,properties,this,can,easily,be,achieved,in,a,startup,script,even,for,existing,environment,variables,p,b,note,b,access,to,environment,variables,does,not,work,on,the,sun,vm,1,4,where,the,corresponding,link,system,getenv,support,was,disabled,before,it,eventually,got,re,enabled,for,the,sun,vm,1,5,please,upgrade,to,1,5,or,higher,if,you,intend,to,rely,on,the,environment,variable,support,see,set,system,properties,mode,see,java,lang,system,get,property,string,see,java,lang,system,getenv,string;public,void,set,search,system,environment,boolean,search,system,environment,this,search,system,environment,search,system,environment
PropertyPlaceholderConfigurer -> public void setSearchSystemEnvironment(boolean searchSystemEnvironment);1546963894;Set whether to search for a matching system environment variable_if no matching system property has been found. Only applied when_"systemPropertyMode" is active (i.e. "fallback" or "override"), right_after checking JVM system properties._<p>Default is "true". Switch this setting off to never resolve placeholders_against system environment variables. Note that it is generally recommended_to pass external values in as JVM system properties: This can easily be_achieved in a startup script, even for existing environment variables._@see #setSystemPropertiesMode_@see java.lang.System#getProperty(String)_@see java.lang.System#getenv(String);public void setSearchSystemEnvironment(boolean searchSystemEnvironment) {_		this.searchSystemEnvironment = searchSystemEnvironment__	};set,whether,to,search,for,a,matching,system,environment,variable,if,no,matching,system,property,has,been,found,only,applied,when,system,property,mode,is,active,i,e,fallback,or,override,right,after,checking,jvm,system,properties,p,default,is,true,switch,this,setting,off,to,never,resolve,placeholders,against,system,environment,variables,note,that,it,is,generally,recommended,to,pass,external,values,in,as,jvm,system,properties,this,can,easily,be,achieved,in,a,startup,script,even,for,existing,environment,variables,see,set,system,properties,mode,see,java,lang,system,get,property,string,see,java,lang,system,getenv,string;public,void,set,search,system,environment,boolean,search,system,environment,this,search,system,environment,search,system,environment
PropertyPlaceholderConfigurer -> public void setSearchSystemEnvironment(boolean searchSystemEnvironment);1546981033;Set whether to search for a matching system environment variable_if no matching system property has been found. Only applied when_"systemPropertyMode" is active (i.e. "fallback" or "override"), right_after checking JVM system properties._<p>Default is "true". Switch this setting off to never resolve placeholders_against system environment variables. Note that it is generally recommended_to pass external values in as JVM system properties: This can easily be_achieved in a startup script, even for existing environment variables._@see #setSystemPropertiesMode_@see System#getProperty(String)_@see System#getenv(String);public void setSearchSystemEnvironment(boolean searchSystemEnvironment) {_		this.searchSystemEnvironment = searchSystemEnvironment__	};set,whether,to,search,for,a,matching,system,environment,variable,if,no,matching,system,property,has,been,found,only,applied,when,system,property,mode,is,active,i,e,fallback,or,override,right,after,checking,jvm,system,properties,p,default,is,true,switch,this,setting,off,to,never,resolve,placeholders,against,system,environment,variables,note,that,it,is,generally,recommended,to,pass,external,values,in,as,jvm,system,properties,this,can,easily,be,achieved,in,a,startup,script,even,for,existing,environment,variables,see,set,system,properties,mode,see,system,get,property,string,see,system,getenv,string;public,void,set,search,system,environment,boolean,search,system,environment,this,search,system,environment,search,system,environment
PropertyPlaceholderConfigurer -> public void setSearchSystemEnvironment(boolean searchSystemEnvironment);1549465224;Set whether to search for a matching system environment variable_if no matching system property has been found. Only applied when_"systemPropertyMode" is active (i.e. "fallback" or "override"), right_after checking JVM system properties._<p>Default is "true". Switch this setting off to never resolve placeholders_against system environment variables. Note that it is generally recommended_to pass external values in as JVM system properties: This can easily be_achieved in a startup script, even for existing environment variables._@see #setSystemPropertiesMode_@see System#getProperty(String)_@see System#getenv(String);public void setSearchSystemEnvironment(boolean searchSystemEnvironment) {_		this.searchSystemEnvironment = searchSystemEnvironment__	};set,whether,to,search,for,a,matching,system,environment,variable,if,no,matching,system,property,has,been,found,only,applied,when,system,property,mode,is,active,i,e,fallback,or,override,right,after,checking,jvm,system,properties,p,default,is,true,switch,this,setting,off,to,never,resolve,placeholders,against,system,environment,variables,note,that,it,is,generally,recommended,to,pass,external,values,in,as,jvm,system,properties,this,can,easily,be,achieved,in,a,startup,script,even,for,existing,environment,variables,see,set,system,properties,mode,see,system,get,property,string,see,system,getenv,string;public,void,set,search,system,environment,boolean,search,system,environment,this,search,system,environment,search,system,environment
PropertyPlaceholderConfigurer -> public void setSearchSystemEnvironment(boolean searchSystemEnvironment);1549554785;Set whether to search for a matching system environment variable_if no matching system property has been found. Only applied when_"systemPropertyMode" is active (i.e. "fallback" or "override"), right_after checking JVM system properties._<p>Default is "true". Switch this setting off to never resolve placeholders_against system environment variables. Note that it is generally recommended_to pass external values in as JVM system properties: This can easily be_achieved in a startup script, even for existing environment variables._@see #setSystemPropertiesMode_@see System#getProperty(String)_@see System#getenv(String);public void setSearchSystemEnvironment(boolean searchSystemEnvironment) {_		this.searchSystemEnvironment = searchSystemEnvironment__	};set,whether,to,search,for,a,matching,system,environment,variable,if,no,matching,system,property,has,been,found,only,applied,when,system,property,mode,is,active,i,e,fallback,or,override,right,after,checking,jvm,system,properties,p,default,is,true,switch,this,setting,off,to,never,resolve,placeholders,against,system,environment,variables,note,that,it,is,generally,recommended,to,pass,external,values,in,as,jvm,system,properties,this,can,easily,be,achieved,in,a,startup,script,even,for,existing,environment,variables,see,set,system,properties,mode,see,system,get,property,string,see,system,getenv,string;public,void,set,search,system,environment,boolean,search,system,environment,this,search,system,environment,search,system,environment
PropertyPlaceholderConfigurer -> @Override 	protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess, Properties props) 			throws BeansException;1328020251;Visit each bean definition in the given bean factory and attempt to replace ${...} property_placeholders with values from the given properties.;@Override_	protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess, Properties props)_			throws BeansException {__		StringValueResolver valueResolver = new PlaceholderResolvingStringValueResolver(props)___		this.doProcessProperties(beanFactoryToProcess, valueResolver)__	};visit,each,bean,definition,in,the,given,bean,factory,and,attempt,to,replace,property,placeholders,with,values,from,the,given,properties;override,protected,void,process,properties,configurable,listable,bean,factory,bean,factory,to,process,properties,props,throws,beans,exception,string,value,resolver,value,resolver,new,placeholder,resolving,string,value,resolver,props,this,do,process,properties,bean,factory,to,process,value,resolver
PropertyPlaceholderConfigurer -> @Override 	protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess, Properties props) 			throws BeansException;1355313310;Visit each bean definition in the given bean factory and attempt to replace ${...} property_placeholders with values from the given properties.;@Override_	protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess, Properties props)_			throws BeansException {__		StringValueResolver valueResolver = new PlaceholderResolvingStringValueResolver(props)___		this.doProcessProperties(beanFactoryToProcess, valueResolver)__	};visit,each,bean,definition,in,the,given,bean,factory,and,attempt,to,replace,property,placeholders,with,values,from,the,given,properties;override,protected,void,process,properties,configurable,listable,bean,factory,bean,factory,to,process,properties,props,throws,beans,exception,string,value,resolver,value,resolver,new,placeholder,resolving,string,value,resolver,props,this,do,process,properties,bean,factory,to,process,value,resolver
PropertyPlaceholderConfigurer -> @Override 	protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess, Properties props) 			throws BeansException;1356735495;Visit each bean definition in the given bean factory and attempt to replace ${...} property_placeholders with values from the given properties.;@Override_	protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess, Properties props)_			throws BeansException {__		StringValueResolver valueResolver = new PlaceholderResolvingStringValueResolver(props)___		this.doProcessProperties(beanFactoryToProcess, valueResolver)__	};visit,each,bean,definition,in,the,given,bean,factory,and,attempt,to,replace,property,placeholders,with,values,from,the,given,properties;override,protected,void,process,properties,configurable,listable,bean,factory,bean,factory,to,process,properties,props,throws,beans,exception,string,value,resolver,value,resolver,new,placeholder,resolving,string,value,resolver,props,this,do,process,properties,bean,factory,to,process,value,resolver
PropertyPlaceholderConfigurer -> @Override 	protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess, Properties props) 			throws BeansException;1357119239;Visit each bean definition in the given bean factory and attempt to replace ${...} property_placeholders with values from the given properties.;@Override_	protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess, Properties props)_			throws BeansException {__		StringValueResolver valueResolver = new PlaceholderResolvingStringValueResolver(props)___		this.doProcessProperties(beanFactoryToProcess, valueResolver)__	};visit,each,bean,definition,in,the,given,bean,factory,and,attempt,to,replace,property,placeholders,with,values,from,the,given,properties;override,protected,void,process,properties,configurable,listable,bean,factory,bean,factory,to,process,properties,props,throws,beans,exception,string,value,resolver,value,resolver,new,placeholder,resolving,string,value,resolver,props,this,do,process,properties,bean,factory,to,process,value,resolver
PropertyPlaceholderConfigurer -> @Override 	protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess, Properties props) 			throws BeansException;1368482696;Visit each bean definition in the given bean factory and attempt to replace ${...} property_placeholders with values from the given properties.;@Override_	protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess, Properties props)_			throws BeansException {__		StringValueResolver valueResolver = new PlaceholderResolvingStringValueResolver(props)___		this.doProcessProperties(beanFactoryToProcess, valueResolver)__	};visit,each,bean,definition,in,the,given,bean,factory,and,attempt,to,replace,property,placeholders,with,values,from,the,given,properties;override,protected,void,process,properties,configurable,listable,bean,factory,bean,factory,to,process,properties,props,throws,beans,exception,string,value,resolver,value,resolver,new,placeholder,resolving,string,value,resolver,props,this,do,process,properties,bean,factory,to,process,value,resolver
PropertyPlaceholderConfigurer -> @Override 	protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess, Properties props) 			throws BeansException;1389804257;Visit each bean definition in the given bean factory and attempt to replace ${...} property_placeholders with values from the given properties.;@Override_	protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess, Properties props)_			throws BeansException {__		StringValueResolver valueResolver = new PlaceholderResolvingStringValueResolver(props)___		this.doProcessProperties(beanFactoryToProcess, valueResolver)__	};visit,each,bean,definition,in,the,given,bean,factory,and,attempt,to,replace,property,placeholders,with,values,from,the,given,properties;override,protected,void,process,properties,configurable,listable,bean,factory,bean,factory,to,process,properties,props,throws,beans,exception,string,value,resolver,value,resolver,new,placeholder,resolving,string,value,resolver,props,this,do,process,properties,bean,factory,to,process,value,resolver
PropertyPlaceholderConfigurer -> @Override 	protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess, Properties props) 			throws BeansException;1390576922;Visit each bean definition in the given bean factory and attempt to replace ${...} property_placeholders with values from the given properties.;@Override_	protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess, Properties props)_			throws BeansException {__		StringValueResolver valueResolver = new PlaceholderResolvingStringValueResolver(props)___		this.doProcessProperties(beanFactoryToProcess, valueResolver)__	};visit,each,bean,definition,in,the,given,bean,factory,and,attempt,to,replace,property,placeholders,with,values,from,the,given,properties;override,protected,void,process,properties,configurable,listable,bean,factory,bean,factory,to,process,properties,props,throws,beans,exception,string,value,resolver,value,resolver,new,placeholder,resolving,string,value,resolver,props,this,do,process,properties,bean,factory,to,process,value,resolver
PropertyPlaceholderConfigurer -> @Override 	protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess, Properties props) 			throws BeansException;1425578217;Visit each bean definition in the given bean factory and attempt to replace ${...} property_placeholders with values from the given properties.;@Override_	protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess, Properties props)_			throws BeansException {__		StringValueResolver valueResolver = new PlaceholderResolvingStringValueResolver(props)__		doProcessProperties(beanFactoryToProcess, valueResolver)__	};visit,each,bean,definition,in,the,given,bean,factory,and,attempt,to,replace,property,placeholders,with,values,from,the,given,properties;override,protected,void,process,properties,configurable,listable,bean,factory,bean,factory,to,process,properties,props,throws,beans,exception,string,value,resolver,value,resolver,new,placeholder,resolving,string,value,resolver,props,do,process,properties,bean,factory,to,process,value,resolver
PropertyPlaceholderConfigurer -> @Override 	protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess, Properties props) 			throws BeansException;1455905979;Visit each bean definition in the given bean factory and attempt to replace ${...} property_placeholders with values from the given properties.;@Override_	protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess, Properties props)_			throws BeansException {__		StringValueResolver valueResolver = new PlaceholderResolvingStringValueResolver(props)__		doProcessProperties(beanFactoryToProcess, valueResolver)__	};visit,each,bean,definition,in,the,given,bean,factory,and,attempt,to,replace,property,placeholders,with,values,from,the,given,properties;override,protected,void,process,properties,configurable,listable,bean,factory,bean,factory,to,process,properties,props,throws,beans,exception,string,value,resolver,value,resolver,new,placeholder,resolving,string,value,resolver,props,do,process,properties,bean,factory,to,process,value,resolver
PropertyPlaceholderConfigurer -> @Override 	protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess, Properties props) 			throws BeansException;1467726769;Visit each bean definition in the given bean factory and attempt to replace ${...} property_placeholders with values from the given properties.;@Override_	protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess, Properties props)_			throws BeansException {__		StringValueResolver valueResolver = new PlaceholderResolvingStringValueResolver(props)__		doProcessProperties(beanFactoryToProcess, valueResolver)__	};visit,each,bean,definition,in,the,given,bean,factory,and,attempt,to,replace,property,placeholders,with,values,from,the,given,properties;override,protected,void,process,properties,configurable,listable,bean,factory,bean,factory,to,process,properties,props,throws,beans,exception,string,value,resolver,value,resolver,new,placeholder,resolving,string,value,resolver,props,do,process,properties,bean,factory,to,process,value,resolver
PropertyPlaceholderConfigurer -> @Override 	protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess, Properties props) 			throws BeansException;1490722023;Visit each bean definition in the given bean factory and attempt to replace ${...} property_placeholders with values from the given properties.;@Override_	protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess, Properties props)_			throws BeansException {__		StringValueResolver valueResolver = new PlaceholderResolvingStringValueResolver(props)__		doProcessProperties(beanFactoryToProcess, valueResolver)__	};visit,each,bean,definition,in,the,given,bean,factory,and,attempt,to,replace,property,placeholders,with,values,from,the,given,properties;override,protected,void,process,properties,configurable,listable,bean,factory,bean,factory,to,process,properties,props,throws,beans,exception,string,value,resolver,value,resolver,new,placeholder,resolving,string,value,resolver,props,do,process,properties,bean,factory,to,process,value,resolver
PropertyPlaceholderConfigurer -> @Override 	protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess, Properties props) 			throws BeansException;1495868221;Visit each bean definition in the given bean factory and attempt to replace ${...} property_placeholders with values from the given properties.;@Override_	protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess, Properties props)_			throws BeansException {__		StringValueResolver valueResolver = new PlaceholderResolvingStringValueResolver(props)__		doProcessProperties(beanFactoryToProcess, valueResolver)__	};visit,each,bean,definition,in,the,given,bean,factory,and,attempt,to,replace,property,placeholders,with,values,from,the,given,properties;override,protected,void,process,properties,configurable,listable,bean,factory,bean,factory,to,process,properties,props,throws,beans,exception,string,value,resolver,value,resolver,new,placeholder,resolving,string,value,resolver,props,do,process,properties,bean,factory,to,process,value,resolver
PropertyPlaceholderConfigurer -> @Override 	protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess, Properties props) 			throws BeansException;1496242568;Visit each bean definition in the given bean factory and attempt to replace ${...} property_placeholders with values from the given properties.;@Override_	protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess, Properties props)_			throws BeansException {__		StringValueResolver valueResolver = new PlaceholderResolvingStringValueResolver(props)__		doProcessProperties(beanFactoryToProcess, valueResolver)__	};visit,each,bean,definition,in,the,given,bean,factory,and,attempt,to,replace,property,placeholders,with,values,from,the,given,properties;override,protected,void,process,properties,configurable,listable,bean,factory,bean,factory,to,process,properties,props,throws,beans,exception,string,value,resolver,value,resolver,new,placeholder,resolving,string,value,resolver,props,do,process,properties,bean,factory,to,process,value,resolver
PropertyPlaceholderConfigurer -> @Override 	protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess, Properties props) 			throws BeansException;1496837955;Visit each bean definition in the given bean factory and attempt to replace ${...} property_placeholders with values from the given properties.;@Override_	protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess, Properties props)_			throws BeansException {__		StringValueResolver valueResolver = new PlaceholderResolvingStringValueResolver(props)__		doProcessProperties(beanFactoryToProcess, valueResolver)__	};visit,each,bean,definition,in,the,given,bean,factory,and,attempt,to,replace,property,placeholders,with,values,from,the,given,properties;override,protected,void,process,properties,configurable,listable,bean,factory,bean,factory,to,process,properties,props,throws,beans,exception,string,value,resolver,value,resolver,new,placeholder,resolving,string,value,resolver,props,do,process,properties,bean,factory,to,process,value,resolver
PropertyPlaceholderConfigurer -> @Override 	protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess, Properties props) 			throws BeansException;1502974979;Visit each bean definition in the given bean factory and attempt to replace ${...} property_placeholders with values from the given properties.;@Override_	protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess, Properties props)_			throws BeansException {__		StringValueResolver valueResolver = new PlaceholderResolvingStringValueResolver(props)__		doProcessProperties(beanFactoryToProcess, valueResolver)__	};visit,each,bean,definition,in,the,given,bean,factory,and,attempt,to,replace,property,placeholders,with,values,from,the,given,properties;override,protected,void,process,properties,configurable,listable,bean,factory,bean,factory,to,process,properties,props,throws,beans,exception,string,value,resolver,value,resolver,new,placeholder,resolving,string,value,resolver,props,do,process,properties,bean,factory,to,process,value,resolver
PropertyPlaceholderConfigurer -> @Override 	protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess, Properties props) 			throws BeansException;1530174524;Visit each bean definition in the given bean factory and attempt to replace ${...} property_placeholders with values from the given properties.;@Override_	protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess, Properties props)_			throws BeansException {__		StringValueResolver valueResolver = new PlaceholderResolvingStringValueResolver(props)__		doProcessProperties(beanFactoryToProcess, valueResolver)__	};visit,each,bean,definition,in,the,given,bean,factory,and,attempt,to,replace,property,placeholders,with,values,from,the,given,properties;override,protected,void,process,properties,configurable,listable,bean,factory,bean,factory,to,process,properties,props,throws,beans,exception,string,value,resolver,value,resolver,new,placeholder,resolving,string,value,resolver,props,do,process,properties,bean,factory,to,process,value,resolver
PropertyPlaceholderConfigurer -> @Override 	protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess, Properties props) 			throws BeansException;1530174524;Visit each bean definition in the given bean factory and attempt to replace ${...} property_placeholders with values from the given properties.;@Override_	protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess, Properties props)_			throws BeansException {__		StringValueResolver valueResolver = new PlaceholderResolvingStringValueResolver(props)__		doProcessProperties(beanFactoryToProcess, valueResolver)__	};visit,each,bean,definition,in,the,given,bean,factory,and,attempt,to,replace,property,placeholders,with,values,from,the,given,properties;override,protected,void,process,properties,configurable,listable,bean,factory,bean,factory,to,process,properties,props,throws,beans,exception,string,value,resolver,value,resolver,new,placeholder,resolving,string,value,resolver,props,do,process,properties,bean,factory,to,process,value,resolver
PropertyPlaceholderConfigurer -> @Override 	protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess, Properties props) 			throws BeansException;1546963894;Visit each bean definition in the given bean factory and attempt to replace ${...} property_placeholders with values from the given properties.;@Override_	protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess, Properties props)_			throws BeansException {__		StringValueResolver valueResolver = new PlaceholderResolvingStringValueResolver(props)__		doProcessProperties(beanFactoryToProcess, valueResolver)__	};visit,each,bean,definition,in,the,given,bean,factory,and,attempt,to,replace,property,placeholders,with,values,from,the,given,properties;override,protected,void,process,properties,configurable,listable,bean,factory,bean,factory,to,process,properties,props,throws,beans,exception,string,value,resolver,value,resolver,new,placeholder,resolving,string,value,resolver,props,do,process,properties,bean,factory,to,process,value,resolver
PropertyPlaceholderConfigurer -> @Override 	protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess, Properties props) 			throws BeansException;1546981033;Visit each bean definition in the given bean factory and attempt to replace ${...} property_placeholders with values from the given properties.;@Override_	protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess, Properties props)_			throws BeansException {__		StringValueResolver valueResolver = new PlaceholderResolvingStringValueResolver(props)__		doProcessProperties(beanFactoryToProcess, valueResolver)__	};visit,each,bean,definition,in,the,given,bean,factory,and,attempt,to,replace,property,placeholders,with,values,from,the,given,properties;override,protected,void,process,properties,configurable,listable,bean,factory,bean,factory,to,process,properties,props,throws,beans,exception,string,value,resolver,value,resolver,new,placeholder,resolving,string,value,resolver,props,do,process,properties,bean,factory,to,process,value,resolver
PropertyPlaceholderConfigurer -> @Override 	protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess, Properties props) 			throws BeansException;1549465224;Visit each bean definition in the given bean factory and attempt to replace ${...} property_placeholders with values from the given properties.;@Override_	protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess, Properties props)_			throws BeansException {__		StringValueResolver valueResolver = new PlaceholderResolvingStringValueResolver(props)__		doProcessProperties(beanFactoryToProcess, valueResolver)__	};visit,each,bean,definition,in,the,given,bean,factory,and,attempt,to,replace,property,placeholders,with,values,from,the,given,properties;override,protected,void,process,properties,configurable,listable,bean,factory,bean,factory,to,process,properties,props,throws,beans,exception,string,value,resolver,value,resolver,new,placeholder,resolving,string,value,resolver,props,do,process,properties,bean,factory,to,process,value,resolver
PropertyPlaceholderConfigurer -> @Override 	protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess, Properties props) 			throws BeansException;1549554785;Visit each bean definition in the given bean factory and attempt to replace ${...} property_placeholders with values from the given properties.;@Override_	protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess, Properties props)_			throws BeansException {__		StringValueResolver valueResolver = new PlaceholderResolvingStringValueResolver(props)__		doProcessProperties(beanFactoryToProcess, valueResolver)__	};visit,each,bean,definition,in,the,given,bean,factory,and,attempt,to,replace,property,placeholders,with,values,from,the,given,properties;override,protected,void,process,properties,configurable,listable,bean,factory,bean,factory,to,process,properties,props,throws,beans,exception,string,value,resolver,value,resolver,new,placeholder,resolving,string,value,resolver,props,do,process,properties,bean,factory,to,process,value,resolver
PropertyPlaceholderConfigurer -> @Nullable 	protected String resolvePlaceholder(String placeholder, Properties props);1495868221;Resolve the given placeholder using the given properties._The default implementation simply checks for a corresponding property key._<p>Subclasses can override this for customized placeholder-to-key mappings_or custom resolution strategies, possibly just using the given properties_as fallback._<p>Note that system properties will still be checked before respectively_after this method is invoked, according to the system properties mode._@param placeholder the placeholder to resolve_@param props the merged properties of this configurer_@return the resolved value, of {@code null} if none_@see #setSystemPropertiesMode;@Nullable_	protected String resolvePlaceholder(String placeholder, Properties props) {_		return props.getProperty(placeholder)__	};resolve,the,given,placeholder,using,the,given,properties,the,default,implementation,simply,checks,for,a,corresponding,property,key,p,subclasses,can,override,this,for,customized,placeholder,to,key,mappings,or,custom,resolution,strategies,possibly,just,using,the,given,properties,as,fallback,p,note,that,system,properties,will,still,be,checked,before,respectively,after,this,method,is,invoked,according,to,the,system,properties,mode,param,placeholder,the,placeholder,to,resolve,param,props,the,merged,properties,of,this,configurer,return,the,resolved,value,of,code,null,if,none,see,set,system,properties,mode;nullable,protected,string,resolve,placeholder,string,placeholder,properties,props,return,props,get,property,placeholder
PropertyPlaceholderConfigurer -> @Nullable 	protected String resolvePlaceholder(String placeholder, Properties props);1496242568;Resolve the given placeholder using the given properties._The default implementation simply checks for a corresponding property key._<p>Subclasses can override this for customized placeholder-to-key mappings_or custom resolution strategies, possibly just using the given properties_as fallback._<p>Note that system properties will still be checked before respectively_after this method is invoked, according to the system properties mode._@param placeholder the placeholder to resolve_@param props the merged properties of this configurer_@return the resolved value, of {@code null} if none_@see #setSystemPropertiesMode;@Nullable_	protected String resolvePlaceholder(String placeholder, Properties props) {_		return props.getProperty(placeholder)__	};resolve,the,given,placeholder,using,the,given,properties,the,default,implementation,simply,checks,for,a,corresponding,property,key,p,subclasses,can,override,this,for,customized,placeholder,to,key,mappings,or,custom,resolution,strategies,possibly,just,using,the,given,properties,as,fallback,p,note,that,system,properties,will,still,be,checked,before,respectively,after,this,method,is,invoked,according,to,the,system,properties,mode,param,placeholder,the,placeholder,to,resolve,param,props,the,merged,properties,of,this,configurer,return,the,resolved,value,of,code,null,if,none,see,set,system,properties,mode;nullable,protected,string,resolve,placeholder,string,placeholder,properties,props,return,props,get,property,placeholder
PropertyPlaceholderConfigurer -> @Nullable 	protected String resolvePlaceholder(String placeholder, Properties props);1496837955;Resolve the given placeholder using the given properties._The default implementation simply checks for a corresponding property key._<p>Subclasses can override this for customized placeholder-to-key mappings_or custom resolution strategies, possibly just using the given properties_as fallback._<p>Note that system properties will still be checked before respectively_after this method is invoked, according to the system properties mode._@param placeholder the placeholder to resolve_@param props the merged properties of this configurer_@return the resolved value, of {@code null} if none_@see #setSystemPropertiesMode;@Nullable_	protected String resolvePlaceholder(String placeholder, Properties props) {_		return props.getProperty(placeholder)__	};resolve,the,given,placeholder,using,the,given,properties,the,default,implementation,simply,checks,for,a,corresponding,property,key,p,subclasses,can,override,this,for,customized,placeholder,to,key,mappings,or,custom,resolution,strategies,possibly,just,using,the,given,properties,as,fallback,p,note,that,system,properties,will,still,be,checked,before,respectively,after,this,method,is,invoked,according,to,the,system,properties,mode,param,placeholder,the,placeholder,to,resolve,param,props,the,merged,properties,of,this,configurer,return,the,resolved,value,of,code,null,if,none,see,set,system,properties,mode;nullable,protected,string,resolve,placeholder,string,placeholder,properties,props,return,props,get,property,placeholder
PropertyPlaceholderConfigurer -> @Nullable 	protected String resolvePlaceholder(String placeholder, Properties props);1502974979;Resolve the given placeholder using the given properties._The default implementation simply checks for a corresponding property key._<p>Subclasses can override this for customized placeholder-to-key mappings_or custom resolution strategies, possibly just using the given properties_as fallback._<p>Note that system properties will still be checked before respectively_after this method is invoked, according to the system properties mode._@param placeholder the placeholder to resolve_@param props the merged properties of this configurer_@return the resolved value, of {@code null} if none_@see #setSystemPropertiesMode;@Nullable_	protected String resolvePlaceholder(String placeholder, Properties props) {_		return props.getProperty(placeholder)__	};resolve,the,given,placeholder,using,the,given,properties,the,default,implementation,simply,checks,for,a,corresponding,property,key,p,subclasses,can,override,this,for,customized,placeholder,to,key,mappings,or,custom,resolution,strategies,possibly,just,using,the,given,properties,as,fallback,p,note,that,system,properties,will,still,be,checked,before,respectively,after,this,method,is,invoked,according,to,the,system,properties,mode,param,placeholder,the,placeholder,to,resolve,param,props,the,merged,properties,of,this,configurer,return,the,resolved,value,of,code,null,if,none,see,set,system,properties,mode;nullable,protected,string,resolve,placeholder,string,placeholder,properties,props,return,props,get,property,placeholder
PropertyPlaceholderConfigurer -> @Nullable 	protected String resolvePlaceholder(String placeholder, Properties props);1530174524;Resolve the given placeholder using the given properties._The default implementation simply checks for a corresponding property key._<p>Subclasses can override this for customized placeholder-to-key mappings_or custom resolution strategies, possibly just using the given properties_as fallback._<p>Note that system properties will still be checked before respectively_after this method is invoked, according to the system properties mode._@param placeholder the placeholder to resolve_@param props the merged properties of this configurer_@return the resolved value, of {@code null} if none_@see #setSystemPropertiesMode;@Nullable_	protected String resolvePlaceholder(String placeholder, Properties props) {_		return props.getProperty(placeholder)__	};resolve,the,given,placeholder,using,the,given,properties,the,default,implementation,simply,checks,for,a,corresponding,property,key,p,subclasses,can,override,this,for,customized,placeholder,to,key,mappings,or,custom,resolution,strategies,possibly,just,using,the,given,properties,as,fallback,p,note,that,system,properties,will,still,be,checked,before,respectively,after,this,method,is,invoked,according,to,the,system,properties,mode,param,placeholder,the,placeholder,to,resolve,param,props,the,merged,properties,of,this,configurer,return,the,resolved,value,of,code,null,if,none,see,set,system,properties,mode;nullable,protected,string,resolve,placeholder,string,placeholder,properties,props,return,props,get,property,placeholder
PropertyPlaceholderConfigurer -> @Nullable 	protected String resolvePlaceholder(String placeholder, Properties props);1530174524;Resolve the given placeholder using the given properties._The default implementation simply checks for a corresponding property key._<p>Subclasses can override this for customized placeholder-to-key mappings_or custom resolution strategies, possibly just using the given properties_as fallback._<p>Note that system properties will still be checked before respectively_after this method is invoked, according to the system properties mode._@param placeholder the placeholder to resolve_@param props the merged properties of this configurer_@return the resolved value, of {@code null} if none_@see #setSystemPropertiesMode;@Nullable_	protected String resolvePlaceholder(String placeholder, Properties props) {_		return props.getProperty(placeholder)__	};resolve,the,given,placeholder,using,the,given,properties,the,default,implementation,simply,checks,for,a,corresponding,property,key,p,subclasses,can,override,this,for,customized,placeholder,to,key,mappings,or,custom,resolution,strategies,possibly,just,using,the,given,properties,as,fallback,p,note,that,system,properties,will,still,be,checked,before,respectively,after,this,method,is,invoked,according,to,the,system,properties,mode,param,placeholder,the,placeholder,to,resolve,param,props,the,merged,properties,of,this,configurer,return,the,resolved,value,of,code,null,if,none,see,set,system,properties,mode;nullable,protected,string,resolve,placeholder,string,placeholder,properties,props,return,props,get,property,placeholder
PropertyPlaceholderConfigurer -> @Nullable 	protected String resolvePlaceholder(String placeholder, Properties props);1546963894;Resolve the given placeholder using the given properties._The default implementation simply checks for a corresponding property key._<p>Subclasses can override this for customized placeholder-to-key mappings_or custom resolution strategies, possibly just using the given properties_as fallback._<p>Note that system properties will still be checked before respectively_after this method is invoked, according to the system properties mode._@param placeholder the placeholder to resolve_@param props the merged properties of this configurer_@return the resolved value, of {@code null} if none_@see #setSystemPropertiesMode;@Nullable_	protected String resolvePlaceholder(String placeholder, Properties props) {_		return props.getProperty(placeholder)__	};resolve,the,given,placeholder,using,the,given,properties,the,default,implementation,simply,checks,for,a,corresponding,property,key,p,subclasses,can,override,this,for,customized,placeholder,to,key,mappings,or,custom,resolution,strategies,possibly,just,using,the,given,properties,as,fallback,p,note,that,system,properties,will,still,be,checked,before,respectively,after,this,method,is,invoked,according,to,the,system,properties,mode,param,placeholder,the,placeholder,to,resolve,param,props,the,merged,properties,of,this,configurer,return,the,resolved,value,of,code,null,if,none,see,set,system,properties,mode;nullable,protected,string,resolve,placeholder,string,placeholder,properties,props,return,props,get,property,placeholder
PropertyPlaceholderConfigurer -> @Nullable 	protected String resolvePlaceholder(String placeholder, Properties props);1546981033;Resolve the given placeholder using the given properties._The default implementation simply checks for a corresponding property key._<p>Subclasses can override this for customized placeholder-to-key mappings_or custom resolution strategies, possibly just using the given properties_as fallback._<p>Note that system properties will still be checked before respectively_after this method is invoked, according to the system properties mode._@param placeholder the placeholder to resolve_@param props the merged properties of this configurer_@return the resolved value, of {@code null} if none_@see #setSystemPropertiesMode;@Nullable_	protected String resolvePlaceholder(String placeholder, Properties props) {_		return props.getProperty(placeholder)__	};resolve,the,given,placeholder,using,the,given,properties,the,default,implementation,simply,checks,for,a,corresponding,property,key,p,subclasses,can,override,this,for,customized,placeholder,to,key,mappings,or,custom,resolution,strategies,possibly,just,using,the,given,properties,as,fallback,p,note,that,system,properties,will,still,be,checked,before,respectively,after,this,method,is,invoked,according,to,the,system,properties,mode,param,placeholder,the,placeholder,to,resolve,param,props,the,merged,properties,of,this,configurer,return,the,resolved,value,of,code,null,if,none,see,set,system,properties,mode;nullable,protected,string,resolve,placeholder,string,placeholder,properties,props,return,props,get,property,placeholder
PropertyPlaceholderConfigurer -> @Nullable 	protected String resolvePlaceholder(String placeholder, Properties props);1549465224;Resolve the given placeholder using the given properties._The default implementation simply checks for a corresponding property key._<p>Subclasses can override this for customized placeholder-to-key mappings_or custom resolution strategies, possibly just using the given properties_as fallback._<p>Note that system properties will still be checked before respectively_after this method is invoked, according to the system properties mode._@param placeholder the placeholder to resolve_@param props the merged properties of this configurer_@return the resolved value, of {@code null} if none_@see #setSystemPropertiesMode;@Nullable_	protected String resolvePlaceholder(String placeholder, Properties props) {_		return props.getProperty(placeholder)__	};resolve,the,given,placeholder,using,the,given,properties,the,default,implementation,simply,checks,for,a,corresponding,property,key,p,subclasses,can,override,this,for,customized,placeholder,to,key,mappings,or,custom,resolution,strategies,possibly,just,using,the,given,properties,as,fallback,p,note,that,system,properties,will,still,be,checked,before,respectively,after,this,method,is,invoked,according,to,the,system,properties,mode,param,placeholder,the,placeholder,to,resolve,param,props,the,merged,properties,of,this,configurer,return,the,resolved,value,of,code,null,if,none,see,set,system,properties,mode;nullable,protected,string,resolve,placeholder,string,placeholder,properties,props,return,props,get,property,placeholder
PropertyPlaceholderConfigurer -> @Nullable 	protected String resolvePlaceholder(String placeholder, Properties props);1549554785;Resolve the given placeholder using the given properties._The default implementation simply checks for a corresponding property key._<p>Subclasses can override this for customized placeholder-to-key mappings_or custom resolution strategies, possibly just using the given properties_as fallback._<p>Note that system properties will still be checked before respectively_after this method is invoked, according to the system properties mode._@param placeholder the placeholder to resolve_@param props the merged properties of this configurer_@return the resolved value, of {@code null} if none_@see #setSystemPropertiesMode;@Nullable_	protected String resolvePlaceholder(String placeholder, Properties props) {_		return props.getProperty(placeholder)__	};resolve,the,given,placeholder,using,the,given,properties,the,default,implementation,simply,checks,for,a,corresponding,property,key,p,subclasses,can,override,this,for,customized,placeholder,to,key,mappings,or,custom,resolution,strategies,possibly,just,using,the,given,properties,as,fallback,p,note,that,system,properties,will,still,be,checked,before,respectively,after,this,method,is,invoked,according,to,the,system,properties,mode,param,placeholder,the,placeholder,to,resolve,param,props,the,merged,properties,of,this,configurer,return,the,resolved,value,of,code,null,if,none,see,set,system,properties,mode;nullable,protected,string,resolve,placeholder,string,placeholder,properties,props,return,props,get,property,placeholder
