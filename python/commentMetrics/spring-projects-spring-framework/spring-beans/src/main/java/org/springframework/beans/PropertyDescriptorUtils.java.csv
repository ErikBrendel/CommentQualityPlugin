# id;timestamp;commentText;codeText;commentWords;codeWords
PropertyDescriptorUtils -> public static boolean equals(PropertyDescriptor pd, PropertyDescriptor otherPd);1410905010;Compare the given {@code PropertyDescriptors} and return {@code true} if_they are equivalent, i.e. their read method, write method, property type,_property editor and flags are equivalent._@see java.beans.PropertyDescriptor#equals(Object);public static boolean equals(PropertyDescriptor pd, PropertyDescriptor otherPd) {_		return (ObjectUtils.nullSafeEquals(pd.getReadMethod(), otherPd.getReadMethod()) &&_				ObjectUtils.nullSafeEquals(pd.getWriteMethod(), otherPd.getWriteMethod()) &&_				ObjectUtils.nullSafeEquals(pd.getPropertyType(), otherPd.getPropertyType()) &&_				ObjectUtils.nullSafeEquals(pd.getPropertyEditorClass(), otherPd.getPropertyEditorClass()) &&_				pd.isBound() == otherPd.isBound() && pd.isConstrained() == otherPd.isConstrained())__	};compare,the,given,code,property,descriptors,and,return,code,true,if,they,are,equivalent,i,e,their,read,method,write,method,property,type,property,editor,and,flags,are,equivalent,see,java,beans,property,descriptor,equals,object;public,static,boolean,equals,property,descriptor,pd,property,descriptor,other,pd,return,object,utils,null,safe,equals,pd,get,read,method,other,pd,get,read,method,object,utils,null,safe,equals,pd,get,write,method,other,pd,get,write,method,object,utils,null,safe,equals,pd,get,property,type,other,pd,get,property,type,object,utils,null,safe,equals,pd,get,property,editor,class,other,pd,get,property,editor,class,pd,is,bound,other,pd,is,bound,pd,is,constrained,other,pd,is,constrained
PropertyDescriptorUtils -> public static boolean equals(PropertyDescriptor pd, PropertyDescriptor otherPd);1496837955;Compare the given {@code PropertyDescriptors} and return {@code true} if_they are equivalent, i.e. their read method, write method, property type,_property editor and flags are equivalent._@see java.beans.PropertyDescriptor#equals(Object);public static boolean equals(PropertyDescriptor pd, PropertyDescriptor otherPd) {_		return (ObjectUtils.nullSafeEquals(pd.getReadMethod(), otherPd.getReadMethod()) &&_				ObjectUtils.nullSafeEquals(pd.getWriteMethod(), otherPd.getWriteMethod()) &&_				ObjectUtils.nullSafeEquals(pd.getPropertyType(), otherPd.getPropertyType()) &&_				ObjectUtils.nullSafeEquals(pd.getPropertyEditorClass(), otherPd.getPropertyEditorClass()) &&_				pd.isBound() == otherPd.isBound() && pd.isConstrained() == otherPd.isConstrained())__	};compare,the,given,code,property,descriptors,and,return,code,true,if,they,are,equivalent,i,e,their,read,method,write,method,property,type,property,editor,and,flags,are,equivalent,see,java,beans,property,descriptor,equals,object;public,static,boolean,equals,property,descriptor,pd,property,descriptor,other,pd,return,object,utils,null,safe,equals,pd,get,read,method,other,pd,get,read,method,object,utils,null,safe,equals,pd,get,write,method,other,pd,get,write,method,object,utils,null,safe,equals,pd,get,property,type,other,pd,get,property,type,object,utils,null,safe,equals,pd,get,property,editor,class,other,pd,get,property,editor,class,pd,is,bound,other,pd,is,bound,pd,is,constrained,other,pd,is,constrained
PropertyDescriptorUtils -> public static boolean equals(PropertyDescriptor pd, PropertyDescriptor otherPd);1519560860;Compare the given {@code PropertyDescriptors} and return {@code true} if_they are equivalent, i.e. their read method, write method, property type,_property editor and flags are equivalent._@see java.beans.PropertyDescriptor#equals(Object);public static boolean equals(PropertyDescriptor pd, PropertyDescriptor otherPd) {_		return (ObjectUtils.nullSafeEquals(pd.getReadMethod(), otherPd.getReadMethod()) &&_				ObjectUtils.nullSafeEquals(pd.getWriteMethod(), otherPd.getWriteMethod()) &&_				ObjectUtils.nullSafeEquals(pd.getPropertyType(), otherPd.getPropertyType()) &&_				ObjectUtils.nullSafeEquals(pd.getPropertyEditorClass(), otherPd.getPropertyEditorClass()) &&_				pd.isBound() == otherPd.isBound() && pd.isConstrained() == otherPd.isConstrained())__	};compare,the,given,code,property,descriptors,and,return,code,true,if,they,are,equivalent,i,e,their,read,method,write,method,property,type,property,editor,and,flags,are,equivalent,see,java,beans,property,descriptor,equals,object;public,static,boolean,equals,property,descriptor,pd,property,descriptor,other,pd,return,object,utils,null,safe,equals,pd,get,read,method,other,pd,get,read,method,object,utils,null,safe,equals,pd,get,write,method,other,pd,get,write,method,object,utils,null,safe,equals,pd,get,property,type,other,pd,get,property,type,object,utils,null,safe,equals,pd,get,property,editor,class,other,pd,get,property,editor,class,pd,is,bound,other,pd,is,bound,pd,is,constrained,other,pd,is,constrained
PropertyDescriptorUtils -> public static boolean equals(PropertyDescriptor pd, PropertyDescriptor otherPd);1530174524;Compare the given {@code PropertyDescriptors} and return {@code true} if_they are equivalent, i.e. their read method, write method, property type,_property editor and flags are equivalent._@see java.beans.PropertyDescriptor#equals(Object);public static boolean equals(PropertyDescriptor pd, PropertyDescriptor otherPd) {_		return (ObjectUtils.nullSafeEquals(pd.getReadMethod(), otherPd.getReadMethod()) &&_				ObjectUtils.nullSafeEquals(pd.getWriteMethod(), otherPd.getWriteMethod()) &&_				ObjectUtils.nullSafeEquals(pd.getPropertyType(), otherPd.getPropertyType()) &&_				ObjectUtils.nullSafeEquals(pd.getPropertyEditorClass(), otherPd.getPropertyEditorClass()) &&_				pd.isBound() == otherPd.isBound() && pd.isConstrained() == otherPd.isConstrained())__	};compare,the,given,code,property,descriptors,and,return,code,true,if,they,are,equivalent,i,e,their,read,method,write,method,property,type,property,editor,and,flags,are,equivalent,see,java,beans,property,descriptor,equals,object;public,static,boolean,equals,property,descriptor,pd,property,descriptor,other,pd,return,object,utils,null,safe,equals,pd,get,read,method,other,pd,get,read,method,object,utils,null,safe,equals,pd,get,write,method,other,pd,get,write,method,object,utils,null,safe,equals,pd,get,property,type,other,pd,get,property,type,object,utils,null,safe,equals,pd,get,property,editor,class,other,pd,get,property,editor,class,pd,is,bound,other,pd,is,bound,pd,is,constrained,other,pd,is,constrained
PropertyDescriptorUtils -> public static boolean equals(PropertyDescriptor pd, PropertyDescriptor otherPd);1530405080;Compare the given {@code PropertyDescriptors} and return {@code true} if_they are equivalent, i.e. their read method, write method, property type,_property editor and flags are equivalent._@see java.beans.PropertyDescriptor#equals(Object);public static boolean equals(PropertyDescriptor pd, PropertyDescriptor otherPd) {_		return (ObjectUtils.nullSafeEquals(pd.getReadMethod(), otherPd.getReadMethod()) &&_				ObjectUtils.nullSafeEquals(pd.getWriteMethod(), otherPd.getWriteMethod()) &&_				ObjectUtils.nullSafeEquals(pd.getPropertyType(), otherPd.getPropertyType()) &&_				ObjectUtils.nullSafeEquals(pd.getPropertyEditorClass(), otherPd.getPropertyEditorClass()) &&_				pd.isBound() == otherPd.isBound() && pd.isConstrained() == otherPd.isConstrained())__	};compare,the,given,code,property,descriptors,and,return,code,true,if,they,are,equivalent,i,e,their,read,method,write,method,property,type,property,editor,and,flags,are,equivalent,see,java,beans,property,descriptor,equals,object;public,static,boolean,equals,property,descriptor,pd,property,descriptor,other,pd,return,object,utils,null,safe,equals,pd,get,read,method,other,pd,get,read,method,object,utils,null,safe,equals,pd,get,write,method,other,pd,get,write,method,object,utils,null,safe,equals,pd,get,property,type,other,pd,get,property,type,object,utils,null,safe,equals,pd,get,property,editor,class,other,pd,get,property,editor,class,pd,is,bound,other,pd,is,bound,pd,is,constrained,other,pd,is,constrained
PropertyDescriptorUtils -> public static void copyNonMethodProperties(PropertyDescriptor source, PropertyDescriptor target) 			throws IntrospectionException;1410905010;See {@link java.beans.FeatureDescriptor}.;public static void copyNonMethodProperties(PropertyDescriptor source, PropertyDescriptor target)_			throws IntrospectionException {__		target.setExpert(source.isExpert())__		target.setHidden(source.isHidden())__		target.setPreferred(source.isPreferred())__		target.setName(source.getName())__		target.setShortDescription(source.getShortDescription())__		target.setDisplayName(source.getDisplayName())___		_		Enumeration<String> keys = source.attributeNames()__		while (keys.hasMoreElements()) {_			String key = keys.nextElement()__			target.setValue(key, source.getValue(key))__		}__		_		target.setPropertyEditorClass(source.getPropertyEditorClass())__		target.setBound(source.isBound())__		target.setConstrained(source.isConstrained())__	};see,link,java,beans,feature,descriptor;public,static,void,copy,non,method,properties,property,descriptor,source,property,descriptor,target,throws,introspection,exception,target,set,expert,source,is,expert,target,set,hidden,source,is,hidden,target,set,preferred,source,is,preferred,target,set,name,source,get,name,target,set,short,description,source,get,short,description,target,set,display,name,source,get,display,name,enumeration,string,keys,source,attribute,names,while,keys,has,more,elements,string,key,keys,next,element,target,set,value,key,source,get,value,key,target,set,property,editor,class,source,get,property,editor,class,target,set,bound,source,is,bound,target,set,constrained,source,is,constrained
PropertyDescriptorUtils -> public static void copyNonMethodProperties(PropertyDescriptor source, PropertyDescriptor target) 			throws IntrospectionException;1496837955;See {@link java.beans.FeatureDescriptor}.;public static void copyNonMethodProperties(PropertyDescriptor source, PropertyDescriptor target)_			throws IntrospectionException {__		target.setExpert(source.isExpert())__		target.setHidden(source.isHidden())__		target.setPreferred(source.isPreferred())__		target.setName(source.getName())__		target.setShortDescription(source.getShortDescription())__		target.setDisplayName(source.getDisplayName())___		_		Enumeration<String> keys = source.attributeNames()__		while (keys.hasMoreElements()) {_			String key = keys.nextElement()__			target.setValue(key, source.getValue(key))__		}__		_		target.setPropertyEditorClass(source.getPropertyEditorClass())__		target.setBound(source.isBound())__		target.setConstrained(source.isConstrained())__	};see,link,java,beans,feature,descriptor;public,static,void,copy,non,method,properties,property,descriptor,source,property,descriptor,target,throws,introspection,exception,target,set,expert,source,is,expert,target,set,hidden,source,is,hidden,target,set,preferred,source,is,preferred,target,set,name,source,get,name,target,set,short,description,source,get,short,description,target,set,display,name,source,get,display,name,enumeration,string,keys,source,attribute,names,while,keys,has,more,elements,string,key,keys,next,element,target,set,value,key,source,get,value,key,target,set,property,editor,class,source,get,property,editor,class,target,set,bound,source,is,bound,target,set,constrained,source,is,constrained
PropertyDescriptorUtils -> public static void copyNonMethodProperties(PropertyDescriptor source, PropertyDescriptor target) 			throws IntrospectionException;1519560860;See {@link java.beans.FeatureDescriptor}.;public static void copyNonMethodProperties(PropertyDescriptor source, PropertyDescriptor target)_			throws IntrospectionException {__		target.setExpert(source.isExpert())__		target.setHidden(source.isHidden())__		target.setPreferred(source.isPreferred())__		target.setName(source.getName())__		target.setShortDescription(source.getShortDescription())__		target.setDisplayName(source.getDisplayName())___		_		Enumeration<String> keys = source.attributeNames()__		while (keys.hasMoreElements()) {_			String key = keys.nextElement()__			target.setValue(key, source.getValue(key))__		}__		_		target.setPropertyEditorClass(source.getPropertyEditorClass())__		target.setBound(source.isBound())__		target.setConstrained(source.isConstrained())__	};see,link,java,beans,feature,descriptor;public,static,void,copy,non,method,properties,property,descriptor,source,property,descriptor,target,throws,introspection,exception,target,set,expert,source,is,expert,target,set,hidden,source,is,hidden,target,set,preferred,source,is,preferred,target,set,name,source,get,name,target,set,short,description,source,get,short,description,target,set,display,name,source,get,display,name,enumeration,string,keys,source,attribute,names,while,keys,has,more,elements,string,key,keys,next,element,target,set,value,key,source,get,value,key,target,set,property,editor,class,source,get,property,editor,class,target,set,bound,source,is,bound,target,set,constrained,source,is,constrained
PropertyDescriptorUtils -> public static void copyNonMethodProperties(PropertyDescriptor source, PropertyDescriptor target) 			throws IntrospectionException;1530174524;See {@link java.beans.FeatureDescriptor}.;public static void copyNonMethodProperties(PropertyDescriptor source, PropertyDescriptor target)_			throws IntrospectionException {__		target.setExpert(source.isExpert())__		target.setHidden(source.isHidden())__		target.setPreferred(source.isPreferred())__		target.setName(source.getName())__		target.setShortDescription(source.getShortDescription())__		target.setDisplayName(source.getDisplayName())___		_		Enumeration<String> keys = source.attributeNames()__		while (keys.hasMoreElements()) {_			String key = keys.nextElement()__			target.setValue(key, source.getValue(key))__		}__		_		target.setPropertyEditorClass(source.getPropertyEditorClass())__		target.setBound(source.isBound())__		target.setConstrained(source.isConstrained())__	};see,link,java,beans,feature,descriptor;public,static,void,copy,non,method,properties,property,descriptor,source,property,descriptor,target,throws,introspection,exception,target,set,expert,source,is,expert,target,set,hidden,source,is,hidden,target,set,preferred,source,is,preferred,target,set,name,source,get,name,target,set,short,description,source,get,short,description,target,set,display,name,source,get,display,name,enumeration,string,keys,source,attribute,names,while,keys,has,more,elements,string,key,keys,next,element,target,set,value,key,source,get,value,key,target,set,property,editor,class,source,get,property,editor,class,target,set,bound,source,is,bound,target,set,constrained,source,is,constrained
PropertyDescriptorUtils -> @Nullable 	public static Class<?> findIndexedPropertyType(String name, @Nullable Class<?> propertyType, 			@Nullable Method indexedReadMethod, @Nullable Method indexedWriteMethod) throws IntrospectionException;1496837955;See {@link java.beans.IndexedPropertyDescriptor#findIndexedPropertyType}.;@Nullable_	public static Class<?> findIndexedPropertyType(String name, @Nullable Class<?> propertyType,_			@Nullable Method indexedReadMethod, @Nullable Method indexedWriteMethod) throws IntrospectionException {__		Class<?> indexedPropertyType = null___		if (indexedReadMethod != null) {_			Class<?> params[] = indexedReadMethod.getParameterTypes()__			if (params.length != 1) {_				throw new IntrospectionException("Bad indexed read method arg count: " + indexedReadMethod)__			}_			if (params[0] != Integer.TYPE) {_				throw new IntrospectionException("Non int index to indexed read method: " + indexedReadMethod)__			}_			indexedPropertyType = indexedReadMethod.getReturnType()__			if (indexedPropertyType == Void.TYPE) {_				throw new IntrospectionException("Indexed read method returns void: " + indexedReadMethod)__			}_		}__		if (indexedWriteMethod != null) {_			Class<?> params[] = indexedWriteMethod.getParameterTypes()__			if (params.length != 2) {_				throw new IntrospectionException("Bad indexed write method arg count: " + indexedWriteMethod)__			}_			if (params[0] != Integer.TYPE) {_				throw new IntrospectionException("Non int index to indexed write method: " + indexedWriteMethod)__			}_			if (indexedPropertyType != null) {_				if (indexedPropertyType.isAssignableFrom(params[1])) {_					_					indexedPropertyType = params[1]__				}_				else if (params[1].isAssignableFrom(indexedPropertyType)) {_					_				}_				else {_					throw new IntrospectionException("Type mismatch between indexed read and write methods: " +_							indexedReadMethod + " - " + indexedWriteMethod)__				}_			}_			else {_				indexedPropertyType = params[1]__			}_		}__		if (propertyType != null && (!propertyType.isArray() ||_				propertyType.getComponentType() != indexedPropertyType)) {_			throw new IntrospectionException("Type mismatch between indexed and non-indexed methods: " +_					indexedReadMethod + " - " + indexedWriteMethod)__		}__		return indexedPropertyType__	};see,link,java,beans,indexed,property,descriptor,find,indexed,property,type;nullable,public,static,class,find,indexed,property,type,string,name,nullable,class,property,type,nullable,method,indexed,read,method,nullable,method,indexed,write,method,throws,introspection,exception,class,indexed,property,type,null,if,indexed,read,method,null,class,params,indexed,read,method,get,parameter,types,if,params,length,1,throw,new,introspection,exception,bad,indexed,read,method,arg,count,indexed,read,method,if,params,0,integer,type,throw,new,introspection,exception,non,int,index,to,indexed,read,method,indexed,read,method,indexed,property,type,indexed,read,method,get,return,type,if,indexed,property,type,void,type,throw,new,introspection,exception,indexed,read,method,returns,void,indexed,read,method,if,indexed,write,method,null,class,params,indexed,write,method,get,parameter,types,if,params,length,2,throw,new,introspection,exception,bad,indexed,write,method,arg,count,indexed,write,method,if,params,0,integer,type,throw,new,introspection,exception,non,int,index,to,indexed,write,method,indexed,write,method,if,indexed,property,type,null,if,indexed,property,type,is,assignable,from,params,1,indexed,property,type,params,1,else,if,params,1,is,assignable,from,indexed,property,type,else,throw,new,introspection,exception,type,mismatch,between,indexed,read,and,write,methods,indexed,read,method,indexed,write,method,else,indexed,property,type,params,1,if,property,type,null,property,type,is,array,property,type,get,component,type,indexed,property,type,throw,new,introspection,exception,type,mismatch,between,indexed,and,non,indexed,methods,indexed,read,method,indexed,write,method,return,indexed,property,type
PropertyDescriptorUtils -> @Nullable 	public static Class<?> findIndexedPropertyType(String name, @Nullable Class<?> propertyType, 			@Nullable Method indexedReadMethod, @Nullable Method indexedWriteMethod) throws IntrospectionException;1519560860;See {@link java.beans.IndexedPropertyDescriptor#findIndexedPropertyType}.;@Nullable_	public static Class<?> findIndexedPropertyType(String name, @Nullable Class<?> propertyType,_			@Nullable Method indexedReadMethod, @Nullable Method indexedWriteMethod) throws IntrospectionException {__		Class<?> indexedPropertyType = null___		if (indexedReadMethod != null) {_			Class<?>[] params = indexedReadMethod.getParameterTypes()__			if (params.length != 1) {_				throw new IntrospectionException("Bad indexed read method arg count: " + indexedReadMethod)__			}_			if (params[0] != Integer.TYPE) {_				throw new IntrospectionException("Non int index to indexed read method: " + indexedReadMethod)__			}_			indexedPropertyType = indexedReadMethod.getReturnType()__			if (indexedPropertyType == Void.TYPE) {_				throw new IntrospectionException("Indexed read method returns void: " + indexedReadMethod)__			}_		}__		if (indexedWriteMethod != null) {_			Class<?>[] params = indexedWriteMethod.getParameterTypes()__			if (params.length != 2) {_				throw new IntrospectionException("Bad indexed write method arg count: " + indexedWriteMethod)__			}_			if (params[0] != Integer.TYPE) {_				throw new IntrospectionException("Non int index to indexed write method: " + indexedWriteMethod)__			}_			if (indexedPropertyType != null) {_				if (indexedPropertyType.isAssignableFrom(params[1])) {_					_					indexedPropertyType = params[1]__				}_				else if (params[1].isAssignableFrom(indexedPropertyType)) {_					_				}_				else {_					throw new IntrospectionException("Type mismatch between indexed read and write methods: " +_							indexedReadMethod + " - " + indexedWriteMethod)__				}_			}_			else {_				indexedPropertyType = params[1]__			}_		}__		if (propertyType != null && (!propertyType.isArray() ||_				propertyType.getComponentType() != indexedPropertyType)) {_			throw new IntrospectionException("Type mismatch between indexed and non-indexed methods: " +_					indexedReadMethod + " - " + indexedWriteMethod)__		}__		return indexedPropertyType__	};see,link,java,beans,indexed,property,descriptor,find,indexed,property,type;nullable,public,static,class,find,indexed,property,type,string,name,nullable,class,property,type,nullable,method,indexed,read,method,nullable,method,indexed,write,method,throws,introspection,exception,class,indexed,property,type,null,if,indexed,read,method,null,class,params,indexed,read,method,get,parameter,types,if,params,length,1,throw,new,introspection,exception,bad,indexed,read,method,arg,count,indexed,read,method,if,params,0,integer,type,throw,new,introspection,exception,non,int,index,to,indexed,read,method,indexed,read,method,indexed,property,type,indexed,read,method,get,return,type,if,indexed,property,type,void,type,throw,new,introspection,exception,indexed,read,method,returns,void,indexed,read,method,if,indexed,write,method,null,class,params,indexed,write,method,get,parameter,types,if,params,length,2,throw,new,introspection,exception,bad,indexed,write,method,arg,count,indexed,write,method,if,params,0,integer,type,throw,new,introspection,exception,non,int,index,to,indexed,write,method,indexed,write,method,if,indexed,property,type,null,if,indexed,property,type,is,assignable,from,params,1,indexed,property,type,params,1,else,if,params,1,is,assignable,from,indexed,property,type,else,throw,new,introspection,exception,type,mismatch,between,indexed,read,and,write,methods,indexed,read,method,indexed,write,method,else,indexed,property,type,params,1,if,property,type,null,property,type,is,array,property,type,get,component,type,indexed,property,type,throw,new,introspection,exception,type,mismatch,between,indexed,and,non,indexed,methods,indexed,read,method,indexed,write,method,return,indexed,property,type
PropertyDescriptorUtils -> @Nullable 	public static Class<?> findIndexedPropertyType(String name, @Nullable Class<?> propertyType, 			@Nullable Method indexedReadMethod, @Nullable Method indexedWriteMethod) throws IntrospectionException;1530174524;See {@link java.beans.IndexedPropertyDescriptor#findIndexedPropertyType}.;@Nullable_	public static Class<?> findIndexedPropertyType(String name, @Nullable Class<?> propertyType,_			@Nullable Method indexedReadMethod, @Nullable Method indexedWriteMethod) throws IntrospectionException {__		Class<?> indexedPropertyType = null___		if (indexedReadMethod != null) {_			Class<?>[] params = indexedReadMethod.getParameterTypes()__			if (params.length != 1) {_				throw new IntrospectionException("Bad indexed read method arg count: " + indexedReadMethod)__			}_			if (params[0] != Integer.TYPE) {_				throw new IntrospectionException("Non int index to indexed read method: " + indexedReadMethod)__			}_			indexedPropertyType = indexedReadMethod.getReturnType()__			if (indexedPropertyType == Void.TYPE) {_				throw new IntrospectionException("Indexed read method returns void: " + indexedReadMethod)__			}_		}__		if (indexedWriteMethod != null) {_			Class<?>[] params = indexedWriteMethod.getParameterTypes()__			if (params.length != 2) {_				throw new IntrospectionException("Bad indexed write method arg count: " + indexedWriteMethod)__			}_			if (params[0] != Integer.TYPE) {_				throw new IntrospectionException("Non int index to indexed write method: " + indexedWriteMethod)__			}_			if (indexedPropertyType != null) {_				if (indexedPropertyType.isAssignableFrom(params[1])) {_					_					indexedPropertyType = params[1]__				}_				else if (params[1].isAssignableFrom(indexedPropertyType)) {_					_				}_				else {_					throw new IntrospectionException("Type mismatch between indexed read and write methods: " +_							indexedReadMethod + " - " + indexedWriteMethod)__				}_			}_			else {_				indexedPropertyType = params[1]__			}_		}__		if (propertyType != null && (!propertyType.isArray() ||_				propertyType.getComponentType() != indexedPropertyType)) {_			throw new IntrospectionException("Type mismatch between indexed and non-indexed methods: " +_					indexedReadMethod + " - " + indexedWriteMethod)__		}__		return indexedPropertyType__	};see,link,java,beans,indexed,property,descriptor,find,indexed,property,type;nullable,public,static,class,find,indexed,property,type,string,name,nullable,class,property,type,nullable,method,indexed,read,method,nullable,method,indexed,write,method,throws,introspection,exception,class,indexed,property,type,null,if,indexed,read,method,null,class,params,indexed,read,method,get,parameter,types,if,params,length,1,throw,new,introspection,exception,bad,indexed,read,method,arg,count,indexed,read,method,if,params,0,integer,type,throw,new,introspection,exception,non,int,index,to,indexed,read,method,indexed,read,method,indexed,property,type,indexed,read,method,get,return,type,if,indexed,property,type,void,type,throw,new,introspection,exception,indexed,read,method,returns,void,indexed,read,method,if,indexed,write,method,null,class,params,indexed,write,method,get,parameter,types,if,params,length,2,throw,new,introspection,exception,bad,indexed,write,method,arg,count,indexed,write,method,if,params,0,integer,type,throw,new,introspection,exception,non,int,index,to,indexed,write,method,indexed,write,method,if,indexed,property,type,null,if,indexed,property,type,is,assignable,from,params,1,indexed,property,type,params,1,else,if,params,1,is,assignable,from,indexed,property,type,else,throw,new,introspection,exception,type,mismatch,between,indexed,read,and,write,methods,indexed,read,method,indexed,write,method,else,indexed,property,type,params,1,if,property,type,null,property,type,is,array,property,type,get,component,type,indexed,property,type,throw,new,introspection,exception,type,mismatch,between,indexed,and,non,indexed,methods,indexed,read,method,indexed,write,method,return,indexed,property,type
PropertyDescriptorUtils -> @Nullable 	public static Class<?> findIndexedPropertyType(String name, @Nullable Class<?> propertyType, 			@Nullable Method indexedReadMethod, @Nullable Method indexedWriteMethod) throws IntrospectionException;1530405080;See {@link java.beans.IndexedPropertyDescriptor#findIndexedPropertyType}.;@Nullable_	public static Class<?> findIndexedPropertyType(String name, @Nullable Class<?> propertyType,_			@Nullable Method indexedReadMethod, @Nullable Method indexedWriteMethod) throws IntrospectionException {__		Class<?> indexedPropertyType = null___		if (indexedReadMethod != null) {_			Class<?>[] params = indexedReadMethod.getParameterTypes()__			if (params.length != 1) {_				throw new IntrospectionException("Bad indexed read method arg count: " + indexedReadMethod)__			}_			if (params[0] != Integer.TYPE) {_				throw new IntrospectionException("Non int index to indexed read method: " + indexedReadMethod)__			}_			indexedPropertyType = indexedReadMethod.getReturnType()__			if (indexedPropertyType == Void.TYPE) {_				throw new IntrospectionException("Indexed read method returns void: " + indexedReadMethod)__			}_		}__		if (indexedWriteMethod != null) {_			Class<?>[] params = indexedWriteMethod.getParameterTypes()__			if (params.length != 2) {_				throw new IntrospectionException("Bad indexed write method arg count: " + indexedWriteMethod)__			}_			if (params[0] != Integer.TYPE) {_				throw new IntrospectionException("Non int index to indexed write method: " + indexedWriteMethod)__			}_			if (indexedPropertyType != null) {_				if (indexedPropertyType.isAssignableFrom(params[1])) {_					_					indexedPropertyType = params[1]__				}_				else if (params[1].isAssignableFrom(indexedPropertyType)) {_					_				}_				else {_					throw new IntrospectionException("Type mismatch between indexed read and write methods: " +_							indexedReadMethod + " - " + indexedWriteMethod)__				}_			}_			else {_				indexedPropertyType = params[1]__			}_		}__		if (propertyType != null && (!propertyType.isArray() ||_				propertyType.getComponentType() != indexedPropertyType)) {_			throw new IntrospectionException("Type mismatch between indexed and non-indexed methods: " +_					indexedReadMethod + " - " + indexedWriteMethod)__		}__		return indexedPropertyType__	};see,link,java,beans,indexed,property,descriptor,find,indexed,property,type;nullable,public,static,class,find,indexed,property,type,string,name,nullable,class,property,type,nullable,method,indexed,read,method,nullable,method,indexed,write,method,throws,introspection,exception,class,indexed,property,type,null,if,indexed,read,method,null,class,params,indexed,read,method,get,parameter,types,if,params,length,1,throw,new,introspection,exception,bad,indexed,read,method,arg,count,indexed,read,method,if,params,0,integer,type,throw,new,introspection,exception,non,int,index,to,indexed,read,method,indexed,read,method,indexed,property,type,indexed,read,method,get,return,type,if,indexed,property,type,void,type,throw,new,introspection,exception,indexed,read,method,returns,void,indexed,read,method,if,indexed,write,method,null,class,params,indexed,write,method,get,parameter,types,if,params,length,2,throw,new,introspection,exception,bad,indexed,write,method,arg,count,indexed,write,method,if,params,0,integer,type,throw,new,introspection,exception,non,int,index,to,indexed,write,method,indexed,write,method,if,indexed,property,type,null,if,indexed,property,type,is,assignable,from,params,1,indexed,property,type,params,1,else,if,params,1,is,assignable,from,indexed,property,type,else,throw,new,introspection,exception,type,mismatch,between,indexed,read,and,write,methods,indexed,read,method,indexed,write,method,else,indexed,property,type,params,1,if,property,type,null,property,type,is,array,property,type,get,component,type,indexed,property,type,throw,new,introspection,exception,type,mismatch,between,indexed,and,non,indexed,methods,indexed,read,method,indexed,write,method,return,indexed,property,type
PropertyDescriptorUtils -> @Nullable 	public static Class<?> findPropertyType(@Nullable Method readMethod, @Nullable Method writeMethod) 			throws IntrospectionException;1496837955;See {@link java.beans.PropertyDescriptor#findPropertyType}.;@Nullable_	public static Class<?> findPropertyType(@Nullable Method readMethod, @Nullable Method writeMethod)_			throws IntrospectionException {__		Class<?> propertyType = null___		if (readMethod != null) {_			Class<?>[] params = readMethod.getParameterTypes()__			if (params.length != 0) {_				throw new IntrospectionException("Bad read method arg count: " + readMethod)__			}_			propertyType = readMethod.getReturnType()__			if (propertyType == Void.TYPE) {_				throw new IntrospectionException("Read method returns void: " + readMethod)__			}_		}__		if (writeMethod != null) {_			Class<?> params[] = writeMethod.getParameterTypes()__			if (params.length != 1) {_				throw new IntrospectionException("Bad write method arg count: " + writeMethod)__			}_			if (propertyType != null) {_				if (propertyType.isAssignableFrom(params[0])) {_					_					propertyType = params[0]__				}_				else if (params[0].isAssignableFrom(propertyType)) {_					_				}_				else {_					throw new IntrospectionException(_							"Type mismatch between read and write methods: " + readMethod + " - " + writeMethod)__				}_			}_			else {_				propertyType = params[0]__			}_		}__		return propertyType__	};see,link,java,beans,property,descriptor,find,property,type;nullable,public,static,class,find,property,type,nullable,method,read,method,nullable,method,write,method,throws,introspection,exception,class,property,type,null,if,read,method,null,class,params,read,method,get,parameter,types,if,params,length,0,throw,new,introspection,exception,bad,read,method,arg,count,read,method,property,type,read,method,get,return,type,if,property,type,void,type,throw,new,introspection,exception,read,method,returns,void,read,method,if,write,method,null,class,params,write,method,get,parameter,types,if,params,length,1,throw,new,introspection,exception,bad,write,method,arg,count,write,method,if,property,type,null,if,property,type,is,assignable,from,params,0,property,type,params,0,else,if,params,0,is,assignable,from,property,type,else,throw,new,introspection,exception,type,mismatch,between,read,and,write,methods,read,method,write,method,else,property,type,params,0,return,property,type
PropertyDescriptorUtils -> @Nullable 	public static Class<?> findPropertyType(@Nullable Method readMethod, @Nullable Method writeMethod) 			throws IntrospectionException;1519560860;See {@link java.beans.PropertyDescriptor#findPropertyType}.;@Nullable_	public static Class<?> findPropertyType(@Nullable Method readMethod, @Nullable Method writeMethod)_			throws IntrospectionException {__		Class<?> propertyType = null___		if (readMethod != null) {_			Class<?>[] params = readMethod.getParameterTypes()__			if (params.length != 0) {_				throw new IntrospectionException("Bad read method arg count: " + readMethod)__			}_			propertyType = readMethod.getReturnType()__			if (propertyType == Void.TYPE) {_				throw new IntrospectionException("Read method returns void: " + readMethod)__			}_		}__		if (writeMethod != null) {_			Class<?>[] params = writeMethod.getParameterTypes()__			if (params.length != 1) {_				throw new IntrospectionException("Bad write method arg count: " + writeMethod)__			}_			if (propertyType != null) {_				if (propertyType.isAssignableFrom(params[0])) {_					_					propertyType = params[0]__				}_				else if (params[0].isAssignableFrom(propertyType)) {_					_				}_				else {_					throw new IntrospectionException(_							"Type mismatch between read and write methods: " + readMethod + " - " + writeMethod)__				}_			}_			else {_				propertyType = params[0]__			}_		}__		return propertyType__	};see,link,java,beans,property,descriptor,find,property,type;nullable,public,static,class,find,property,type,nullable,method,read,method,nullable,method,write,method,throws,introspection,exception,class,property,type,null,if,read,method,null,class,params,read,method,get,parameter,types,if,params,length,0,throw,new,introspection,exception,bad,read,method,arg,count,read,method,property,type,read,method,get,return,type,if,property,type,void,type,throw,new,introspection,exception,read,method,returns,void,read,method,if,write,method,null,class,params,write,method,get,parameter,types,if,params,length,1,throw,new,introspection,exception,bad,write,method,arg,count,write,method,if,property,type,null,if,property,type,is,assignable,from,params,0,property,type,params,0,else,if,params,0,is,assignable,from,property,type,else,throw,new,introspection,exception,type,mismatch,between,read,and,write,methods,read,method,write,method,else,property,type,params,0,return,property,type
PropertyDescriptorUtils -> @Nullable 	public static Class<?> findPropertyType(@Nullable Method readMethod, @Nullable Method writeMethod) 			throws IntrospectionException;1530174524;See {@link java.beans.PropertyDescriptor#findPropertyType}.;@Nullable_	public static Class<?> findPropertyType(@Nullable Method readMethod, @Nullable Method writeMethod)_			throws IntrospectionException {__		Class<?> propertyType = null___		if (readMethod != null) {_			Class<?>[] params = readMethod.getParameterTypes()__			if (params.length != 0) {_				throw new IntrospectionException("Bad read method arg count: " + readMethod)__			}_			propertyType = readMethod.getReturnType()__			if (propertyType == Void.TYPE) {_				throw new IntrospectionException("Read method returns void: " + readMethod)__			}_		}__		if (writeMethod != null) {_			Class<?>[] params = writeMethod.getParameterTypes()__			if (params.length != 1) {_				throw new IntrospectionException("Bad write method arg count: " + writeMethod)__			}_			if (propertyType != null) {_				if (propertyType.isAssignableFrom(params[0])) {_					_					propertyType = params[0]__				}_				else if (params[0].isAssignableFrom(propertyType)) {_					_				}_				else {_					throw new IntrospectionException(_							"Type mismatch between read and write methods: " + readMethod + " - " + writeMethod)__				}_			}_			else {_				propertyType = params[0]__			}_		}__		return propertyType__	};see,link,java,beans,property,descriptor,find,property,type;nullable,public,static,class,find,property,type,nullable,method,read,method,nullable,method,write,method,throws,introspection,exception,class,property,type,null,if,read,method,null,class,params,read,method,get,parameter,types,if,params,length,0,throw,new,introspection,exception,bad,read,method,arg,count,read,method,property,type,read,method,get,return,type,if,property,type,void,type,throw,new,introspection,exception,read,method,returns,void,read,method,if,write,method,null,class,params,write,method,get,parameter,types,if,params,length,1,throw,new,introspection,exception,bad,write,method,arg,count,write,method,if,property,type,null,if,property,type,is,assignable,from,params,0,property,type,params,0,else,if,params,0,is,assignable,from,property,type,else,throw,new,introspection,exception,type,mismatch,between,read,and,write,methods,read,method,write,method,else,property,type,params,0,return,property,type
PropertyDescriptorUtils -> @Nullable 	public static Class<?> findPropertyType(@Nullable Method readMethod, @Nullable Method writeMethod) 			throws IntrospectionException;1530405080;See {@link java.beans.PropertyDescriptor#findPropertyType}.;@Nullable_	public static Class<?> findPropertyType(@Nullable Method readMethod, @Nullable Method writeMethod)_			throws IntrospectionException {__		Class<?> propertyType = null___		if (readMethod != null) {_			Class<?>[] params = readMethod.getParameterTypes()__			if (params.length != 0) {_				throw new IntrospectionException("Bad read method arg count: " + readMethod)__			}_			propertyType = readMethod.getReturnType()__			if (propertyType == Void.TYPE) {_				throw new IntrospectionException("Read method returns void: " + readMethod)__			}_		}__		if (writeMethod != null) {_			Class<?>[] params = writeMethod.getParameterTypes()__			if (params.length != 1) {_				throw new IntrospectionException("Bad write method arg count: " + writeMethod)__			}_			if (propertyType != null) {_				if (propertyType.isAssignableFrom(params[0])) {_					_					propertyType = params[0]__				}_				else if (params[0].isAssignableFrom(propertyType)) {_					_				}_				else {_					throw new IntrospectionException(_							"Type mismatch between read and write methods: " + readMethod + " - " + writeMethod)__				}_			}_			else {_				propertyType = params[0]__			}_		}__		return propertyType__	};see,link,java,beans,property,descriptor,find,property,type;nullable,public,static,class,find,property,type,nullable,method,read,method,nullable,method,write,method,throws,introspection,exception,class,property,type,null,if,read,method,null,class,params,read,method,get,parameter,types,if,params,length,0,throw,new,introspection,exception,bad,read,method,arg,count,read,method,property,type,read,method,get,return,type,if,property,type,void,type,throw,new,introspection,exception,read,method,returns,void,read,method,if,write,method,null,class,params,write,method,get,parameter,types,if,params,length,1,throw,new,introspection,exception,bad,write,method,arg,count,write,method,if,property,type,null,if,property,type,is,assignable,from,params,0,property,type,params,0,else,if,params,0,is,assignable,from,property,type,else,throw,new,introspection,exception,type,mismatch,between,read,and,write,methods,read,method,write,method,else,property,type,params,0,return,property,type
