# id;timestamp;commentText;codeText;commentWords;codeWords
DefaultNamespaceHandlerResolver -> public DefaultNamespaceHandlerResolver(ClassLoader classLoader, String handlerMappingsLocation);1328020251;Create a new <code>DefaultNamespaceHandlerResolver</code> using the_supplied mapping file location._@param classLoader the {@link ClassLoader} instance used to load mapping resources_may be <code>null</code>, in which case the thread context ClassLoader will be used)_@param handlerMappingsLocation the mapping file location;public DefaultNamespaceHandlerResolver(ClassLoader classLoader, String handlerMappingsLocation) {_		Assert.notNull(handlerMappingsLocation, "Handler mappings location must not be null")__		this.classLoader = (classLoader != null ? classLoader : ClassUtils.getDefaultClassLoader())__		this.handlerMappingsLocation = handlerMappingsLocation__	};create,a,new,code,default,namespace,handler,resolver,code,using,the,supplied,mapping,file,location,param,class,loader,the,link,class,loader,instance,used,to,load,mapping,resources,may,be,code,null,code,in,which,case,the,thread,context,class,loader,will,be,used,param,handler,mappings,location,the,mapping,file,location;public,default,namespace,handler,resolver,class,loader,class,loader,string,handler,mappings,location,assert,not,null,handler,mappings,location,handler,mappings,location,must,not,be,null,this,class,loader,class,loader,null,class,loader,class,utils,get,default,class,loader,this,handler,mappings,location,handler,mappings,location
DefaultNamespaceHandlerResolver -> public DefaultNamespaceHandlerResolver(ClassLoader classLoader, String handlerMappingsLocation);1355352386;Create a new <code>DefaultNamespaceHandlerResolver</code> using the_supplied mapping file location._@param classLoader the {@link ClassLoader} instance used to load mapping resources_may be <code>null</code>, in which case the thread context ClassLoader will be used)_@param handlerMappingsLocation the mapping file location;public DefaultNamespaceHandlerResolver(ClassLoader classLoader, String handlerMappingsLocation) {_		Assert.notNull(handlerMappingsLocation, "Handler mappings location must not be null")__		this.classLoader = (classLoader != null ? classLoader : ClassUtils.getDefaultClassLoader())__		this.handlerMappingsLocation = handlerMappingsLocation__	};create,a,new,code,default,namespace,handler,resolver,code,using,the,supplied,mapping,file,location,param,class,loader,the,link,class,loader,instance,used,to,load,mapping,resources,may,be,code,null,code,in,which,case,the,thread,context,class,loader,will,be,used,param,handler,mappings,location,the,mapping,file,location;public,default,namespace,handler,resolver,class,loader,class,loader,string,handler,mappings,location,assert,not,null,handler,mappings,location,handler,mappings,location,must,not,be,null,this,class,loader,class,loader,null,class,loader,class,utils,get,default,class,loader,this,handler,mappings,location,handler,mappings,location
DefaultNamespaceHandlerResolver -> public DefaultNamespaceHandlerResolver(ClassLoader classLoader, String handlerMappingsLocation);1356735495;Create a new {@code DefaultNamespaceHandlerResolver} using the_supplied mapping file location._@param classLoader the {@link ClassLoader} instance used to load mapping resources_may be {@code null}, in which case the thread context ClassLoader will be used)_@param handlerMappingsLocation the mapping file location;public DefaultNamespaceHandlerResolver(ClassLoader classLoader, String handlerMappingsLocation) {_		Assert.notNull(handlerMappingsLocation, "Handler mappings location must not be null")__		this.classLoader = (classLoader != null ? classLoader : ClassUtils.getDefaultClassLoader())__		this.handlerMappingsLocation = handlerMappingsLocation__	};create,a,new,code,default,namespace,handler,resolver,using,the,supplied,mapping,file,location,param,class,loader,the,link,class,loader,instance,used,to,load,mapping,resources,may,be,code,null,in,which,case,the,thread,context,class,loader,will,be,used,param,handler,mappings,location,the,mapping,file,location;public,default,namespace,handler,resolver,class,loader,class,loader,string,handler,mappings,location,assert,not,null,handler,mappings,location,handler,mappings,location,must,not,be,null,this,class,loader,class,loader,null,class,loader,class,utils,get,default,class,loader,this,handler,mappings,location,handler,mappings,location
DefaultNamespaceHandlerResolver -> public DefaultNamespaceHandlerResolver(ClassLoader classLoader, String handlerMappingsLocation);1357119239;Create a new {@code DefaultNamespaceHandlerResolver} using the_supplied mapping file location._@param classLoader the {@link ClassLoader} instance used to load mapping resources_may be {@code null}, in which case the thread context ClassLoader will be used)_@param handlerMappingsLocation the mapping file location;public DefaultNamespaceHandlerResolver(ClassLoader classLoader, String handlerMappingsLocation) {_		Assert.notNull(handlerMappingsLocation, "Handler mappings location must not be null")__		this.classLoader = (classLoader != null ? classLoader : ClassUtils.getDefaultClassLoader())__		this.handlerMappingsLocation = handlerMappingsLocation__	};create,a,new,code,default,namespace,handler,resolver,using,the,supplied,mapping,file,location,param,class,loader,the,link,class,loader,instance,used,to,load,mapping,resources,may,be,code,null,in,which,case,the,thread,context,class,loader,will,be,used,param,handler,mappings,location,the,mapping,file,location;public,default,namespace,handler,resolver,class,loader,class,loader,string,handler,mappings,location,assert,not,null,handler,mappings,location,handler,mappings,location,must,not,be,null,this,class,loader,class,loader,null,class,loader,class,utils,get,default,class,loader,this,handler,mappings,location,handler,mappings,location
DefaultNamespaceHandlerResolver -> public DefaultNamespaceHandlerResolver(ClassLoader classLoader, String handlerMappingsLocation);1368482696;Create a new {@code DefaultNamespaceHandlerResolver} using the_supplied mapping file location._@param classLoader the {@link ClassLoader} instance used to load mapping resources_may be {@code null}, in which case the thread context ClassLoader will be used)_@param handlerMappingsLocation the mapping file location;public DefaultNamespaceHandlerResolver(ClassLoader classLoader, String handlerMappingsLocation) {_		Assert.notNull(handlerMappingsLocation, "Handler mappings location must not be null")__		this.classLoader = (classLoader != null ? classLoader : ClassUtils.getDefaultClassLoader())__		this.handlerMappingsLocation = handlerMappingsLocation__	};create,a,new,code,default,namespace,handler,resolver,using,the,supplied,mapping,file,location,param,class,loader,the,link,class,loader,instance,used,to,load,mapping,resources,may,be,code,null,in,which,case,the,thread,context,class,loader,will,be,used,param,handler,mappings,location,the,mapping,file,location;public,default,namespace,handler,resolver,class,loader,class,loader,string,handler,mappings,location,assert,not,null,handler,mappings,location,handler,mappings,location,must,not,be,null,this,class,loader,class,loader,null,class,loader,class,utils,get,default,class,loader,this,handler,mappings,location,handler,mappings,location
DefaultNamespaceHandlerResolver -> public DefaultNamespaceHandlerResolver(ClassLoader classLoader, String handlerMappingsLocation);1467730834;Create a new {@code DefaultNamespaceHandlerResolver} using the_supplied mapping file location._@param classLoader the {@link ClassLoader} instance used to load mapping resources_may be {@code null}, in which case the thread context ClassLoader will be used)_@param handlerMappingsLocation the mapping file location;public DefaultNamespaceHandlerResolver(ClassLoader classLoader, String handlerMappingsLocation) {_		Assert.notNull(handlerMappingsLocation, "Handler mappings location must not be null")__		this.classLoader = (classLoader != null ? classLoader : ClassUtils.getDefaultClassLoader())__		this.handlerMappingsLocation = handlerMappingsLocation__	};create,a,new,code,default,namespace,handler,resolver,using,the,supplied,mapping,file,location,param,class,loader,the,link,class,loader,instance,used,to,load,mapping,resources,may,be,code,null,in,which,case,the,thread,context,class,loader,will,be,used,param,handler,mappings,location,the,mapping,file,location;public,default,namespace,handler,resolver,class,loader,class,loader,string,handler,mappings,location,assert,not,null,handler,mappings,location,handler,mappings,location,must,not,be,null,this,class,loader,class,loader,null,class,loader,class,utils,get,default,class,loader,this,handler,mappings,location,handler,mappings,location
DefaultNamespaceHandlerResolver -> public DefaultNamespaceHandlerResolver(ClassLoader classLoader);1328020251;Create a new <code>DefaultNamespaceHandlerResolver</code> using the_default mapping file location._@param classLoader the {@link ClassLoader} instance used to load mapping resources_(may be <code>null</code>, in which case the thread context ClassLoader will be used)_@see #DEFAULT_HANDLER_MAPPINGS_LOCATION;public DefaultNamespaceHandlerResolver(ClassLoader classLoader) {_		this(classLoader, DEFAULT_HANDLER_MAPPINGS_LOCATION)__	};create,a,new,code,default,namespace,handler,resolver,code,using,the,default,mapping,file,location,param,class,loader,the,link,class,loader,instance,used,to,load,mapping,resources,may,be,code,null,code,in,which,case,the,thread,context,class,loader,will,be,used,see;public,default,namespace,handler,resolver,class,loader,class,loader,this,class,loader
DefaultNamespaceHandlerResolver -> public DefaultNamespaceHandlerResolver(ClassLoader classLoader);1355352386;Create a new <code>DefaultNamespaceHandlerResolver</code> using the_default mapping file location._@param classLoader the {@link ClassLoader} instance used to load mapping resources_(may be <code>null</code>, in which case the thread context ClassLoader will be used)_@see #DEFAULT_HANDLER_MAPPINGS_LOCATION;public DefaultNamespaceHandlerResolver(ClassLoader classLoader) {_		this(classLoader, DEFAULT_HANDLER_MAPPINGS_LOCATION)__	};create,a,new,code,default,namespace,handler,resolver,code,using,the,default,mapping,file,location,param,class,loader,the,link,class,loader,instance,used,to,load,mapping,resources,may,be,code,null,code,in,which,case,the,thread,context,class,loader,will,be,used,see;public,default,namespace,handler,resolver,class,loader,class,loader,this,class,loader
DefaultNamespaceHandlerResolver -> public DefaultNamespaceHandlerResolver(ClassLoader classLoader);1356735495;Create a new {@code DefaultNamespaceHandlerResolver} using the_default mapping file location._@param classLoader the {@link ClassLoader} instance used to load mapping resources_(may be {@code null}, in which case the thread context ClassLoader will be used)_@see #DEFAULT_HANDLER_MAPPINGS_LOCATION;public DefaultNamespaceHandlerResolver(ClassLoader classLoader) {_		this(classLoader, DEFAULT_HANDLER_MAPPINGS_LOCATION)__	};create,a,new,code,default,namespace,handler,resolver,using,the,default,mapping,file,location,param,class,loader,the,link,class,loader,instance,used,to,load,mapping,resources,may,be,code,null,in,which,case,the,thread,context,class,loader,will,be,used,see;public,default,namespace,handler,resolver,class,loader,class,loader,this,class,loader
DefaultNamespaceHandlerResolver -> public DefaultNamespaceHandlerResolver(ClassLoader classLoader);1357119239;Create a new {@code DefaultNamespaceHandlerResolver} using the_default mapping file location._@param classLoader the {@link ClassLoader} instance used to load mapping resources_(may be {@code null}, in which case the thread context ClassLoader will be used)_@see #DEFAULT_HANDLER_MAPPINGS_LOCATION;public DefaultNamespaceHandlerResolver(ClassLoader classLoader) {_		this(classLoader, DEFAULT_HANDLER_MAPPINGS_LOCATION)__	};create,a,new,code,default,namespace,handler,resolver,using,the,default,mapping,file,location,param,class,loader,the,link,class,loader,instance,used,to,load,mapping,resources,may,be,code,null,in,which,case,the,thread,context,class,loader,will,be,used,see;public,default,namespace,handler,resolver,class,loader,class,loader,this,class,loader
DefaultNamespaceHandlerResolver -> public DefaultNamespaceHandlerResolver(ClassLoader classLoader);1368482696;Create a new {@code DefaultNamespaceHandlerResolver} using the_default mapping file location._@param classLoader the {@link ClassLoader} instance used to load mapping resources_(may be {@code null}, in which case the thread context ClassLoader will be used)_@see #DEFAULT_HANDLER_MAPPINGS_LOCATION;public DefaultNamespaceHandlerResolver(ClassLoader classLoader) {_		this(classLoader, DEFAULT_HANDLER_MAPPINGS_LOCATION)__	};create,a,new,code,default,namespace,handler,resolver,using,the,default,mapping,file,location,param,class,loader,the,link,class,loader,instance,used,to,load,mapping,resources,may,be,code,null,in,which,case,the,thread,context,class,loader,will,be,used,see;public,default,namespace,handler,resolver,class,loader,class,loader,this,class,loader
DefaultNamespaceHandlerResolver -> public DefaultNamespaceHandlerResolver(ClassLoader classLoader);1467730834;Create a new {@code DefaultNamespaceHandlerResolver} using the_default mapping file location._@param classLoader the {@link ClassLoader} instance used to load mapping resources_(may be {@code null}, in which case the thread context ClassLoader will be used)_@see #DEFAULT_HANDLER_MAPPINGS_LOCATION;public DefaultNamespaceHandlerResolver(ClassLoader classLoader) {_		this(classLoader, DEFAULT_HANDLER_MAPPINGS_LOCATION)__	};create,a,new,code,default,namespace,handler,resolver,using,the,default,mapping,file,location,param,class,loader,the,link,class,loader,instance,used,to,load,mapping,resources,may,be,code,null,in,which,case,the,thread,context,class,loader,will,be,used,see;public,default,namespace,handler,resolver,class,loader,class,loader,this,class,loader
DefaultNamespaceHandlerResolver -> private Map<String, Object> getHandlerMappings();1328020251;Load the specified NamespaceHandler mappings lazily.;private Map<String, Object> getHandlerMappings() {_		if (this.handlerMappings == null) {_			synchronized (this) {_				if (this.handlerMappings == null) {_					try {_						Properties mappings =_								PropertiesLoaderUtils.loadAllProperties(this.handlerMappingsLocation, this.classLoader)__						if (logger.isDebugEnabled()) {_							logger.debug("Loaded NamespaceHandler mappings: " + mappings)__						}_						Map<String, Object> handlerMappings = new ConcurrentHashMap<String, Object>()__						CollectionUtils.mergePropertiesIntoMap(mappings, handlerMappings)__						this.handlerMappings = handlerMappings__					}_					catch (IOException ex) {_						throw new IllegalStateException(_								"Unable to load NamespaceHandler mappings from location [" + this.handlerMappingsLocation + "]", ex)__					}_				}_			}_		}_		return this.handlerMappings__	};load,the,specified,namespace,handler,mappings,lazily;private,map,string,object,get,handler,mappings,if,this,handler,mappings,null,synchronized,this,if,this,handler,mappings,null,try,properties,mappings,properties,loader,utils,load,all,properties,this,handler,mappings,location,this,class,loader,if,logger,is,debug,enabled,logger,debug,loaded,namespace,handler,mappings,mappings,map,string,object,handler,mappings,new,concurrent,hash,map,string,object,collection,utils,merge,properties,into,map,mappings,handler,mappings,this,handler,mappings,handler,mappings,catch,ioexception,ex,throw,new,illegal,state,exception,unable,to,load,namespace,handler,mappings,from,location,this,handler,mappings,location,ex,return,this,handler,mappings
DefaultNamespaceHandlerResolver -> private Map<String, Object> getHandlerMappings();1355352386;Load the specified NamespaceHandler mappings lazily.;private Map<String, Object> getHandlerMappings() {_		if (this.handlerMappings == null) {_			synchronized (this) {_				if (this.handlerMappings == null) {_					try {_						Properties mappings =_								PropertiesLoaderUtils.loadAllProperties(this.handlerMappingsLocation, this.classLoader)__						if (logger.isDebugEnabled()) {_							logger.debug("Loaded NamespaceHandler mappings: " + mappings)__						}_						Map<String, Object> handlerMappings = new ConcurrentHashMap<String, Object>(mappings.size())__						CollectionUtils.mergePropertiesIntoMap(mappings, handlerMappings)__						this.handlerMappings = handlerMappings__					}_					catch (IOException ex) {_						throw new IllegalStateException(_								"Unable to load NamespaceHandler mappings from location [" + this.handlerMappingsLocation + "]", ex)__					}_				}_			}_		}_		return this.handlerMappings__	};load,the,specified,namespace,handler,mappings,lazily;private,map,string,object,get,handler,mappings,if,this,handler,mappings,null,synchronized,this,if,this,handler,mappings,null,try,properties,mappings,properties,loader,utils,load,all,properties,this,handler,mappings,location,this,class,loader,if,logger,is,debug,enabled,logger,debug,loaded,namespace,handler,mappings,mappings,map,string,object,handler,mappings,new,concurrent,hash,map,string,object,mappings,size,collection,utils,merge,properties,into,map,mappings,handler,mappings,this,handler,mappings,handler,mappings,catch,ioexception,ex,throw,new,illegal,state,exception,unable,to,load,namespace,handler,mappings,from,location,this,handler,mappings,location,ex,return,this,handler,mappings
DefaultNamespaceHandlerResolver -> private Map<String, Object> getHandlerMappings();1356735495;Load the specified NamespaceHandler mappings lazily.;private Map<String, Object> getHandlerMappings() {_		if (this.handlerMappings == null) {_			synchronized (this) {_				if (this.handlerMappings == null) {_					try {_						Properties mappings =_								PropertiesLoaderUtils.loadAllProperties(this.handlerMappingsLocation, this.classLoader)__						if (logger.isDebugEnabled()) {_							logger.debug("Loaded NamespaceHandler mappings: " + mappings)__						}_						Map<String, Object> handlerMappings = new ConcurrentHashMap<String, Object>(mappings.size())__						CollectionUtils.mergePropertiesIntoMap(mappings, handlerMappings)__						this.handlerMappings = handlerMappings__					}_					catch (IOException ex) {_						throw new IllegalStateException(_								"Unable to load NamespaceHandler mappings from location [" + this.handlerMappingsLocation + "]", ex)__					}_				}_			}_		}_		return this.handlerMappings__	};load,the,specified,namespace,handler,mappings,lazily;private,map,string,object,get,handler,mappings,if,this,handler,mappings,null,synchronized,this,if,this,handler,mappings,null,try,properties,mappings,properties,loader,utils,load,all,properties,this,handler,mappings,location,this,class,loader,if,logger,is,debug,enabled,logger,debug,loaded,namespace,handler,mappings,mappings,map,string,object,handler,mappings,new,concurrent,hash,map,string,object,mappings,size,collection,utils,merge,properties,into,map,mappings,handler,mappings,this,handler,mappings,handler,mappings,catch,ioexception,ex,throw,new,illegal,state,exception,unable,to,load,namespace,handler,mappings,from,location,this,handler,mappings,location,ex,return,this,handler,mappings
DefaultNamespaceHandlerResolver -> private Map<String, Object> getHandlerMappings();1357119239;Load the specified NamespaceHandler mappings lazily.;private Map<String, Object> getHandlerMappings() {_		if (this.handlerMappings == null) {_			synchronized (this) {_				if (this.handlerMappings == null) {_					try {_						Properties mappings =_								PropertiesLoaderUtils.loadAllProperties(this.handlerMappingsLocation, this.classLoader)__						if (logger.isDebugEnabled()) {_							logger.debug("Loaded NamespaceHandler mappings: " + mappings)__						}_						Map<String, Object> handlerMappings = new ConcurrentHashMap<String, Object>(mappings.size())__						CollectionUtils.mergePropertiesIntoMap(mappings, handlerMappings)__						this.handlerMappings = handlerMappings__					}_					catch (IOException ex) {_						throw new IllegalStateException(_								"Unable to load NamespaceHandler mappings from location [" + this.handlerMappingsLocation + "]", ex)__					}_				}_			}_		}_		return this.handlerMappings__	};load,the,specified,namespace,handler,mappings,lazily;private,map,string,object,get,handler,mappings,if,this,handler,mappings,null,synchronized,this,if,this,handler,mappings,null,try,properties,mappings,properties,loader,utils,load,all,properties,this,handler,mappings,location,this,class,loader,if,logger,is,debug,enabled,logger,debug,loaded,namespace,handler,mappings,mappings,map,string,object,handler,mappings,new,concurrent,hash,map,string,object,mappings,size,collection,utils,merge,properties,into,map,mappings,handler,mappings,this,handler,mappings,handler,mappings,catch,ioexception,ex,throw,new,illegal,state,exception,unable,to,load,namespace,handler,mappings,from,location,this,handler,mappings,location,ex,return,this,handler,mappings
DefaultNamespaceHandlerResolver -> private Map<String, Object> getHandlerMappings();1368482696;Load the specified NamespaceHandler mappings lazily.;private Map<String, Object> getHandlerMappings() {_		if (this.handlerMappings == null) {_			synchronized (this) {_				if (this.handlerMappings == null) {_					try {_						Properties mappings =_								PropertiesLoaderUtils.loadAllProperties(this.handlerMappingsLocation, this.classLoader)__						if (logger.isDebugEnabled()) {_							logger.debug("Loaded NamespaceHandler mappings: " + mappings)__						}_						Map<String, Object> handlerMappings = new ConcurrentHashMap<String, Object>(mappings.size())__						CollectionUtils.mergePropertiesIntoMap(mappings, handlerMappings)__						this.handlerMappings = handlerMappings__					}_					catch (IOException ex) {_						throw new IllegalStateException(_								"Unable to load NamespaceHandler mappings from location [" + this.handlerMappingsLocation + "]", ex)__					}_				}_			}_		}_		return this.handlerMappings__	};load,the,specified,namespace,handler,mappings,lazily;private,map,string,object,get,handler,mappings,if,this,handler,mappings,null,synchronized,this,if,this,handler,mappings,null,try,properties,mappings,properties,loader,utils,load,all,properties,this,handler,mappings,location,this,class,loader,if,logger,is,debug,enabled,logger,debug,loaded,namespace,handler,mappings,mappings,map,string,object,handler,mappings,new,concurrent,hash,map,string,object,mappings,size,collection,utils,merge,properties,into,map,mappings,handler,mappings,this,handler,mappings,handler,mappings,catch,ioexception,ex,throw,new,illegal,state,exception,unable,to,load,namespace,handler,mappings,from,location,this,handler,mappings,location,ex,return,this,handler,mappings
DefaultNamespaceHandlerResolver -> private Map<String, Object> getHandlerMappings();1467730834;Load the specified NamespaceHandler mappings lazily.;private Map<String, Object> getHandlerMappings() {_		if (this.handlerMappings == null) {_			synchronized (this) {_				if (this.handlerMappings == null) {_					try {_						Properties mappings =_								PropertiesLoaderUtils.loadAllProperties(this.handlerMappingsLocation, this.classLoader)__						if (logger.isDebugEnabled()) {_							logger.debug("Loaded NamespaceHandler mappings: " + mappings)__						}_						Map<String, Object> handlerMappings = new ConcurrentHashMap<>(mappings.size())__						CollectionUtils.mergePropertiesIntoMap(mappings, handlerMappings)__						this.handlerMappings = handlerMappings__					}_					catch (IOException ex) {_						throw new IllegalStateException(_								"Unable to load NamespaceHandler mappings from location [" + this.handlerMappingsLocation + "]", ex)__					}_				}_			}_		}_		return this.handlerMappings__	};load,the,specified,namespace,handler,mappings,lazily;private,map,string,object,get,handler,mappings,if,this,handler,mappings,null,synchronized,this,if,this,handler,mappings,null,try,properties,mappings,properties,loader,utils,load,all,properties,this,handler,mappings,location,this,class,loader,if,logger,is,debug,enabled,logger,debug,loaded,namespace,handler,mappings,mappings,map,string,object,handler,mappings,new,concurrent,hash,map,mappings,size,collection,utils,merge,properties,into,map,mappings,handler,mappings,this,handler,mappings,handler,mappings,catch,ioexception,ex,throw,new,illegal,state,exception,unable,to,load,namespace,handler,mappings,from,location,this,handler,mappings,location,ex,return,this,handler,mappings
DefaultNamespaceHandlerResolver -> private Map<String, Object> getHandlerMappings();1495868221;Load the specified NamespaceHandler mappings lazily.;private Map<String, Object> getHandlerMappings() {_		if (this.handlerMappings == null) {_			synchronized (this) {_				if (this.handlerMappings == null) {_					try {_						Properties mappings =_								PropertiesLoaderUtils.loadAllProperties(this.handlerMappingsLocation, this.classLoader)__						if (logger.isDebugEnabled()) {_							logger.debug("Loaded NamespaceHandler mappings: " + mappings)__						}_						Map<String, Object> handlerMappings = new ConcurrentHashMap<>(mappings.size())__						CollectionUtils.mergePropertiesIntoMap(mappings, handlerMappings)__						this.handlerMappings = handlerMappings__					}_					catch (IOException ex) {_						throw new IllegalStateException(_								"Unable to load NamespaceHandler mappings from location [" + this.handlerMappingsLocation + "]", ex)__					}_				}_			}_		}_		return this.handlerMappings__	};load,the,specified,namespace,handler,mappings,lazily;private,map,string,object,get,handler,mappings,if,this,handler,mappings,null,synchronized,this,if,this,handler,mappings,null,try,properties,mappings,properties,loader,utils,load,all,properties,this,handler,mappings,location,this,class,loader,if,logger,is,debug,enabled,logger,debug,loaded,namespace,handler,mappings,mappings,map,string,object,handler,mappings,new,concurrent,hash,map,mappings,size,collection,utils,merge,properties,into,map,mappings,handler,mappings,this,handler,mappings,handler,mappings,catch,ioexception,ex,throw,new,illegal,state,exception,unable,to,load,namespace,handler,mappings,from,location,this,handler,mappings,location,ex,return,this,handler,mappings
DefaultNamespaceHandlerResolver -> private Map<String, Object> getHandlerMappings();1498780456;Load the specified NamespaceHandler mappings lazily.;private Map<String, Object> getHandlerMappings() {_		Map<String, Object> handlerMappings = this.handlerMappings__		if (handlerMappings == null) {_			synchronized (this) {_				handlerMappings = this.handlerMappings__				if (handlerMappings == null) {_					try {_						Properties mappings =_								PropertiesLoaderUtils.loadAllProperties(this.handlerMappingsLocation, this.classLoader)__						if (logger.isDebugEnabled()) {_							logger.debug("Loaded NamespaceHandler mappings: " + mappings)__						}_						Map<String, Object> mappingsToUse = new ConcurrentHashMap<>(mappings.size())__						CollectionUtils.mergePropertiesIntoMap(mappings, mappingsToUse)__						handlerMappings = mappingsToUse__						this.handlerMappings = handlerMappings__					}_					catch (IOException ex) {_						throw new IllegalStateException(_								"Unable to load NamespaceHandler mappings from location [" + this.handlerMappingsLocation + "]", ex)__					}_				}_			}_		}_		return handlerMappings__	};load,the,specified,namespace,handler,mappings,lazily;private,map,string,object,get,handler,mappings,map,string,object,handler,mappings,this,handler,mappings,if,handler,mappings,null,synchronized,this,handler,mappings,this,handler,mappings,if,handler,mappings,null,try,properties,mappings,properties,loader,utils,load,all,properties,this,handler,mappings,location,this,class,loader,if,logger,is,debug,enabled,logger,debug,loaded,namespace,handler,mappings,mappings,map,string,object,mappings,to,use,new,concurrent,hash,map,mappings,size,collection,utils,merge,properties,into,map,mappings,mappings,to,use,handler,mappings,mappings,to,use,this,handler,mappings,handler,mappings,catch,ioexception,ex,throw,new,illegal,state,exception,unable,to,load,namespace,handler,mappings,from,location,this,handler,mappings,location,ex,return,handler,mappings
DefaultNamespaceHandlerResolver -> private Map<String, Object> getHandlerMappings();1502974979;Load the specified NamespaceHandler mappings lazily.;private Map<String, Object> getHandlerMappings() {_		Map<String, Object> handlerMappings = this.handlerMappings__		if (handlerMappings == null) {_			synchronized (this) {_				handlerMappings = this.handlerMappings__				if (handlerMappings == null) {_					try {_						Properties mappings =_								PropertiesLoaderUtils.loadAllProperties(this.handlerMappingsLocation, this.classLoader)__						if (logger.isDebugEnabled()) {_							logger.debug("Loaded NamespaceHandler mappings: " + mappings)__						}_						Map<String, Object> mappingsToUse = new ConcurrentHashMap<>(mappings.size())__						CollectionUtils.mergePropertiesIntoMap(mappings, mappingsToUse)__						handlerMappings = mappingsToUse__						this.handlerMappings = handlerMappings__					}_					catch (IOException ex) {_						throw new IllegalStateException(_								"Unable to load NamespaceHandler mappings from location [" + this.handlerMappingsLocation + "]", ex)__					}_				}_			}_		}_		return handlerMappings__	};load,the,specified,namespace,handler,mappings,lazily;private,map,string,object,get,handler,mappings,map,string,object,handler,mappings,this,handler,mappings,if,handler,mappings,null,synchronized,this,handler,mappings,this,handler,mappings,if,handler,mappings,null,try,properties,mappings,properties,loader,utils,load,all,properties,this,handler,mappings,location,this,class,loader,if,logger,is,debug,enabled,logger,debug,loaded,namespace,handler,mappings,mappings,map,string,object,mappings,to,use,new,concurrent,hash,map,mappings,size,collection,utils,merge,properties,into,map,mappings,mappings,to,use,handler,mappings,mappings,to,use,this,handler,mappings,handler,mappings,catch,ioexception,ex,throw,new,illegal,state,exception,unable,to,load,namespace,handler,mappings,from,location,this,handler,mappings,location,ex,return,handler,mappings
DefaultNamespaceHandlerResolver -> private Map<String, Object> getHandlerMappings();1516217097;Load the specified NamespaceHandler mappings lazily.;private Map<String, Object> getHandlerMappings() {_		Map<String, Object> handlerMappings = this.handlerMappings__		if (handlerMappings == null) {_			synchronized (this) {_				handlerMappings = this.handlerMappings__				if (handlerMappings == null) {_					try {_						Properties mappings =_								PropertiesLoaderUtils.loadAllProperties(this.handlerMappingsLocation, this.classLoader)__						if (logger.isDebugEnabled()) {_							logger.debug("Loaded NamespaceHandler mappings: " + mappings)__						}_						Map<String, Object> mappingsToUse = new ConcurrentHashMap<>(mappings.size())__						CollectionUtils.mergePropertiesIntoMap(mappings, mappingsToUse)__						handlerMappings = mappingsToUse__						this.handlerMappings = handlerMappings__					}_					catch (IOException ex) {_						throw new IllegalStateException(_								"Unable to load NamespaceHandler mappings from location [" + this.handlerMappingsLocation + "]", ex)__					}_				}_			}_		}_		return handlerMappings__	};load,the,specified,namespace,handler,mappings,lazily;private,map,string,object,get,handler,mappings,map,string,object,handler,mappings,this,handler,mappings,if,handler,mappings,null,synchronized,this,handler,mappings,this,handler,mappings,if,handler,mappings,null,try,properties,mappings,properties,loader,utils,load,all,properties,this,handler,mappings,location,this,class,loader,if,logger,is,debug,enabled,logger,debug,loaded,namespace,handler,mappings,mappings,map,string,object,mappings,to,use,new,concurrent,hash,map,mappings,size,collection,utils,merge,properties,into,map,mappings,mappings,to,use,handler,mappings,mappings,to,use,this,handler,mappings,handler,mappings,catch,ioexception,ex,throw,new,illegal,state,exception,unable,to,load,namespace,handler,mappings,from,location,this,handler,mappings,location,ex,return,handler,mappings
DefaultNamespaceHandlerResolver -> private Map<String, Object> getHandlerMappings();1530174524;Load the specified NamespaceHandler mappings lazily.;private Map<String, Object> getHandlerMappings() {_		Map<String, Object> handlerMappings = this.handlerMappings__		if (handlerMappings == null) {_			synchronized (this) {_				handlerMappings = this.handlerMappings__				if (handlerMappings == null) {_					try {_						Properties mappings =_								PropertiesLoaderUtils.loadAllProperties(this.handlerMappingsLocation, this.classLoader)__						if (logger.isDebugEnabled()) {_							logger.debug("Loaded NamespaceHandler mappings: " + mappings)__						}_						Map<String, Object> mappingsToUse = new ConcurrentHashMap<>(mappings.size())__						CollectionUtils.mergePropertiesIntoMap(mappings, mappingsToUse)__						handlerMappings = mappingsToUse__						this.handlerMappings = handlerMappings__					}_					catch (IOException ex) {_						throw new IllegalStateException(_								"Unable to load NamespaceHandler mappings from location [" + this.handlerMappingsLocation + "]", ex)__					}_				}_			}_		}_		return handlerMappings__	};load,the,specified,namespace,handler,mappings,lazily;private,map,string,object,get,handler,mappings,map,string,object,handler,mappings,this,handler,mappings,if,handler,mappings,null,synchronized,this,handler,mappings,this,handler,mappings,if,handler,mappings,null,try,properties,mappings,properties,loader,utils,load,all,properties,this,handler,mappings,location,this,class,loader,if,logger,is,debug,enabled,logger,debug,loaded,namespace,handler,mappings,mappings,map,string,object,mappings,to,use,new,concurrent,hash,map,mappings,size,collection,utils,merge,properties,into,map,mappings,mappings,to,use,handler,mappings,mappings,to,use,this,handler,mappings,handler,mappings,catch,ioexception,ex,throw,new,illegal,state,exception,unable,to,load,namespace,handler,mappings,from,location,this,handler,mappings,location,ex,return,handler,mappings
DefaultNamespaceHandlerResolver -> private Map<String, Object> getHandlerMappings();1532706365;Load the specified NamespaceHandler mappings lazily.;private Map<String, Object> getHandlerMappings() {_		Map<String, Object> handlerMappings = this.handlerMappings__		if (handlerMappings == null) {_			synchronized (this) {_				handlerMappings = this.handlerMappings__				if (handlerMappings == null) {_					if (logger.isTraceEnabled()) {_						logger.trace("Loading NamespaceHandler mappings from [" + this.handlerMappingsLocation + "]")__					}_					try {_						Properties mappings =_								PropertiesLoaderUtils.loadAllProperties(this.handlerMappingsLocation, this.classLoader)__						if (logger.isTraceEnabled()) {_							logger.trace("Loaded NamespaceHandler mappings: " + mappings)__						}_						Map<String, Object> mappingsToUse = new ConcurrentHashMap<>(mappings.size())__						CollectionUtils.mergePropertiesIntoMap(mappings, mappingsToUse)__						handlerMappings = mappingsToUse__						this.handlerMappings = handlerMappings__					}_					catch (IOException ex) {_						throw new IllegalStateException(_								"Unable to load NamespaceHandler mappings from location [" + this.handlerMappingsLocation + "]", ex)__					}_				}_			}_		}_		return handlerMappings__	};load,the,specified,namespace,handler,mappings,lazily;private,map,string,object,get,handler,mappings,map,string,object,handler,mappings,this,handler,mappings,if,handler,mappings,null,synchronized,this,handler,mappings,this,handler,mappings,if,handler,mappings,null,if,logger,is,trace,enabled,logger,trace,loading,namespace,handler,mappings,from,this,handler,mappings,location,try,properties,mappings,properties,loader,utils,load,all,properties,this,handler,mappings,location,this,class,loader,if,logger,is,trace,enabled,logger,trace,loaded,namespace,handler,mappings,mappings,map,string,object,mappings,to,use,new,concurrent,hash,map,mappings,size,collection,utils,merge,properties,into,map,mappings,mappings,to,use,handler,mappings,mappings,to,use,this,handler,mappings,handler,mappings,catch,ioexception,ex,throw,new,illegal,state,exception,unable,to,load,namespace,handler,mappings,from,location,this,handler,mappings,location,ex,return,handler,mappings
DefaultNamespaceHandlerResolver -> private Map<String, Object> getHandlerMappings();1532710698;Load the specified NamespaceHandler mappings lazily.;private Map<String, Object> getHandlerMappings() {_		Map<String, Object> handlerMappings = this.handlerMappings__		if (handlerMappings == null) {_			synchronized (this) {_				handlerMappings = this.handlerMappings__				if (handlerMappings == null) {_					if (logger.isTraceEnabled()) {_						logger.trace("Loading NamespaceHandler mappings from [" + this.handlerMappingsLocation + "]")__					}_					try {_						Properties mappings =_								PropertiesLoaderUtils.loadAllProperties(this.handlerMappingsLocation, this.classLoader)__						if (logger.isTraceEnabled()) {_							logger.trace("Loaded NamespaceHandler mappings: " + mappings)__						}_						handlerMappings = new ConcurrentHashMap<>(mappings.size())__						CollectionUtils.mergePropertiesIntoMap(mappings, handlerMappings)__						this.handlerMappings = handlerMappings__					}_					catch (IOException ex) {_						throw new IllegalStateException(_								"Unable to load NamespaceHandler mappings from location [" + this.handlerMappingsLocation + "]", ex)__					}_				}_			}_		}_		return handlerMappings__	};load,the,specified,namespace,handler,mappings,lazily;private,map,string,object,get,handler,mappings,map,string,object,handler,mappings,this,handler,mappings,if,handler,mappings,null,synchronized,this,handler,mappings,this,handler,mappings,if,handler,mappings,null,if,logger,is,trace,enabled,logger,trace,loading,namespace,handler,mappings,from,this,handler,mappings,location,try,properties,mappings,properties,loader,utils,load,all,properties,this,handler,mappings,location,this,class,loader,if,logger,is,trace,enabled,logger,trace,loaded,namespace,handler,mappings,mappings,handler,mappings,new,concurrent,hash,map,mappings,size,collection,utils,merge,properties,into,map,mappings,handler,mappings,this,handler,mappings,handler,mappings,catch,ioexception,ex,throw,new,illegal,state,exception,unable,to,load,namespace,handler,mappings,from,location,this,handler,mappings,location,ex,return,handler,mappings
DefaultNamespaceHandlerResolver -> @Override 	@Nullable 	public NamespaceHandler resolve(String namespaceUri);1502974979;Locate the {@link NamespaceHandler} for the supplied namespace URI_from the configured mappings._@param namespaceUri the relevant namespace URI_@return the located {@link NamespaceHandler}, or {@code null} if none found;@Override_	@Nullable_	public NamespaceHandler resolve(String namespaceUri) {_		Map<String, Object> handlerMappings = getHandlerMappings()__		Object handlerOrClassName = handlerMappings.get(namespaceUri)__		if (handlerOrClassName == null) {_			return null__		}_		else if (handlerOrClassName instanceof NamespaceHandler) {_			return (NamespaceHandler) handlerOrClassName__		}_		else {_			String className = (String) handlerOrClassName__			try {_				Class<?> handlerClass = ClassUtils.forName(className, this.classLoader)__				if (!NamespaceHandler.class.isAssignableFrom(handlerClass)) {_					throw new FatalBeanException("Class [" + className + "] for namespace [" + namespaceUri +_							"] does not implement the [" + NamespaceHandler.class.getName() + "] interface")__				}_				NamespaceHandler namespaceHandler = (NamespaceHandler) BeanUtils.instantiateClass(handlerClass)__				namespaceHandler.init()__				handlerMappings.put(namespaceUri, namespaceHandler)__				return namespaceHandler__			}_			catch (ClassNotFoundException ex) {_				throw new FatalBeanException("NamespaceHandler class [" + className + "] for namespace [" +_						namespaceUri + "] not found", ex)__			}_			catch (LinkageError err) {_				throw new FatalBeanException("Invalid NamespaceHandler class [" + className + "] for namespace [" +_						namespaceUri + "]: problem with handler class file or dependent class", err)__			}_		}_	};locate,the,link,namespace,handler,for,the,supplied,namespace,uri,from,the,configured,mappings,param,namespace,uri,the,relevant,namespace,uri,return,the,located,link,namespace,handler,or,code,null,if,none,found;override,nullable,public,namespace,handler,resolve,string,namespace,uri,map,string,object,handler,mappings,get,handler,mappings,object,handler,or,class,name,handler,mappings,get,namespace,uri,if,handler,or,class,name,null,return,null,else,if,handler,or,class,name,instanceof,namespace,handler,return,namespace,handler,handler,or,class,name,else,string,class,name,string,handler,or,class,name,try,class,handler,class,class,utils,for,name,class,name,this,class,loader,if,namespace,handler,class,is,assignable,from,handler,class,throw,new,fatal,bean,exception,class,class,name,for,namespace,namespace,uri,does,not,implement,the,namespace,handler,class,get,name,interface,namespace,handler,namespace,handler,namespace,handler,bean,utils,instantiate,class,handler,class,namespace,handler,init,handler,mappings,put,namespace,uri,namespace,handler,return,namespace,handler,catch,class,not,found,exception,ex,throw,new,fatal,bean,exception,namespace,handler,class,class,name,for,namespace,namespace,uri,not,found,ex,catch,linkage,error,err,throw,new,fatal,bean,exception,invalid,namespace,handler,class,class,name,for,namespace,namespace,uri,problem,with,handler,class,file,or,dependent,class,err
DefaultNamespaceHandlerResolver -> @Override 	@Nullable 	public NamespaceHandler resolve(String namespaceUri);1516217097;Locate the {@link NamespaceHandler} for the supplied namespace URI_from the configured mappings._@param namespaceUri the relevant namespace URI_@return the located {@link NamespaceHandler}, or {@code null} if none found;@Override_	@Nullable_	public NamespaceHandler resolve(String namespaceUri) {_		Map<String, Object> handlerMappings = getHandlerMappings()__		Object handlerOrClassName = handlerMappings.get(namespaceUri)__		if (handlerOrClassName == null) {_			return null__		}_		else if (handlerOrClassName instanceof NamespaceHandler) {_			return (NamespaceHandler) handlerOrClassName__		}_		else {_			String className = (String) handlerOrClassName__			try {_				Class<?> handlerClass = ClassUtils.forName(className, this.classLoader)__				if (!NamespaceHandler.class.isAssignableFrom(handlerClass)) {_					throw new FatalBeanException("Class [" + className + "] for namespace [" + namespaceUri +_							"] does not implement the [" + NamespaceHandler.class.getName() + "] interface")__				}_				NamespaceHandler namespaceHandler = (NamespaceHandler) BeanUtils.instantiateClass(handlerClass)__				namespaceHandler.init()__				handlerMappings.put(namespaceUri, namespaceHandler)__				return namespaceHandler__			}_			catch (ClassNotFoundException ex) {_				throw new FatalBeanException("Could not find NamespaceHandler class [" + className +_						"] for namespace [" + namespaceUri + "]", ex)__			}_			catch (LinkageError err) {_				throw new FatalBeanException("Unresolvable class definition for NamespaceHandler class [" +_						className + "] for namespace [" + namespaceUri + "]", err)__			}_		}_	};locate,the,link,namespace,handler,for,the,supplied,namespace,uri,from,the,configured,mappings,param,namespace,uri,the,relevant,namespace,uri,return,the,located,link,namespace,handler,or,code,null,if,none,found;override,nullable,public,namespace,handler,resolve,string,namespace,uri,map,string,object,handler,mappings,get,handler,mappings,object,handler,or,class,name,handler,mappings,get,namespace,uri,if,handler,or,class,name,null,return,null,else,if,handler,or,class,name,instanceof,namespace,handler,return,namespace,handler,handler,or,class,name,else,string,class,name,string,handler,or,class,name,try,class,handler,class,class,utils,for,name,class,name,this,class,loader,if,namespace,handler,class,is,assignable,from,handler,class,throw,new,fatal,bean,exception,class,class,name,for,namespace,namespace,uri,does,not,implement,the,namespace,handler,class,get,name,interface,namespace,handler,namespace,handler,namespace,handler,bean,utils,instantiate,class,handler,class,namespace,handler,init,handler,mappings,put,namespace,uri,namespace,handler,return,namespace,handler,catch,class,not,found,exception,ex,throw,new,fatal,bean,exception,could,not,find,namespace,handler,class,class,name,for,namespace,namespace,uri,ex,catch,linkage,error,err,throw,new,fatal,bean,exception,unresolvable,class,definition,for,namespace,handler,class,class,name,for,namespace,namespace,uri,err
DefaultNamespaceHandlerResolver -> @Override 	@Nullable 	public NamespaceHandler resolve(String namespaceUri);1530174524;Locate the {@link NamespaceHandler} for the supplied namespace URI_from the configured mappings._@param namespaceUri the relevant namespace URI_@return the located {@link NamespaceHandler}, or {@code null} if none found;@Override_	@Nullable_	public NamespaceHandler resolve(String namespaceUri) {_		Map<String, Object> handlerMappings = getHandlerMappings()__		Object handlerOrClassName = handlerMappings.get(namespaceUri)__		if (handlerOrClassName == null) {_			return null__		}_		else if (handlerOrClassName instanceof NamespaceHandler) {_			return (NamespaceHandler) handlerOrClassName__		}_		else {_			String className = (String) handlerOrClassName__			try {_				Class<?> handlerClass = ClassUtils.forName(className, this.classLoader)__				if (!NamespaceHandler.class.isAssignableFrom(handlerClass)) {_					throw new FatalBeanException("Class [" + className + "] for namespace [" + namespaceUri +_							"] does not implement the [" + NamespaceHandler.class.getName() + "] interface")__				}_				NamespaceHandler namespaceHandler = (NamespaceHandler) BeanUtils.instantiateClass(handlerClass)__				namespaceHandler.init()__				handlerMappings.put(namespaceUri, namespaceHandler)__				return namespaceHandler__			}_			catch (ClassNotFoundException ex) {_				throw new FatalBeanException("Could not find NamespaceHandler class [" + className +_						"] for namespace [" + namespaceUri + "]", ex)__			}_			catch (LinkageError err) {_				throw new FatalBeanException("Unresolvable class definition for NamespaceHandler class [" +_						className + "] for namespace [" + namespaceUri + "]", err)__			}_		}_	};locate,the,link,namespace,handler,for,the,supplied,namespace,uri,from,the,configured,mappings,param,namespace,uri,the,relevant,namespace,uri,return,the,located,link,namespace,handler,or,code,null,if,none,found;override,nullable,public,namespace,handler,resolve,string,namespace,uri,map,string,object,handler,mappings,get,handler,mappings,object,handler,or,class,name,handler,mappings,get,namespace,uri,if,handler,or,class,name,null,return,null,else,if,handler,or,class,name,instanceof,namespace,handler,return,namespace,handler,handler,or,class,name,else,string,class,name,string,handler,or,class,name,try,class,handler,class,class,utils,for,name,class,name,this,class,loader,if,namespace,handler,class,is,assignable,from,handler,class,throw,new,fatal,bean,exception,class,class,name,for,namespace,namespace,uri,does,not,implement,the,namespace,handler,class,get,name,interface,namespace,handler,namespace,handler,namespace,handler,bean,utils,instantiate,class,handler,class,namespace,handler,init,handler,mappings,put,namespace,uri,namespace,handler,return,namespace,handler,catch,class,not,found,exception,ex,throw,new,fatal,bean,exception,could,not,find,namespace,handler,class,class,name,for,namespace,namespace,uri,ex,catch,linkage,error,err,throw,new,fatal,bean,exception,unresolvable,class,definition,for,namespace,handler,class,class,name,for,namespace,namespace,uri,err
DefaultNamespaceHandlerResolver -> @Override 	@Nullable 	public NamespaceHandler resolve(String namespaceUri);1532706365;Locate the {@link NamespaceHandler} for the supplied namespace URI_from the configured mappings._@param namespaceUri the relevant namespace URI_@return the located {@link NamespaceHandler}, or {@code null} if none found;@Override_	@Nullable_	public NamespaceHandler resolve(String namespaceUri) {_		Map<String, Object> handlerMappings = getHandlerMappings()__		Object handlerOrClassName = handlerMappings.get(namespaceUri)__		if (handlerOrClassName == null) {_			return null__		}_		else if (handlerOrClassName instanceof NamespaceHandler) {_			return (NamespaceHandler) handlerOrClassName__		}_		else {_			String className = (String) handlerOrClassName__			try {_				Class<?> handlerClass = ClassUtils.forName(className, this.classLoader)__				if (!NamespaceHandler.class.isAssignableFrom(handlerClass)) {_					throw new FatalBeanException("Class [" + className + "] for namespace [" + namespaceUri +_							"] does not implement the [" + NamespaceHandler.class.getName() + "] interface")__				}_				NamespaceHandler namespaceHandler = (NamespaceHandler) BeanUtils.instantiateClass(handlerClass)__				namespaceHandler.init()__				handlerMappings.put(namespaceUri, namespaceHandler)__				return namespaceHandler__			}_			catch (ClassNotFoundException ex) {_				throw new FatalBeanException("Could not find NamespaceHandler class [" + className +_						"] for namespace [" + namespaceUri + "]", ex)__			}_			catch (LinkageError err) {_				throw new FatalBeanException("Unresolvable class definition for NamespaceHandler class [" +_						className + "] for namespace [" + namespaceUri + "]", err)__			}_		}_	};locate,the,link,namespace,handler,for,the,supplied,namespace,uri,from,the,configured,mappings,param,namespace,uri,the,relevant,namespace,uri,return,the,located,link,namespace,handler,or,code,null,if,none,found;override,nullable,public,namespace,handler,resolve,string,namespace,uri,map,string,object,handler,mappings,get,handler,mappings,object,handler,or,class,name,handler,mappings,get,namespace,uri,if,handler,or,class,name,null,return,null,else,if,handler,or,class,name,instanceof,namespace,handler,return,namespace,handler,handler,or,class,name,else,string,class,name,string,handler,or,class,name,try,class,handler,class,class,utils,for,name,class,name,this,class,loader,if,namespace,handler,class,is,assignable,from,handler,class,throw,new,fatal,bean,exception,class,class,name,for,namespace,namespace,uri,does,not,implement,the,namespace,handler,class,get,name,interface,namespace,handler,namespace,handler,namespace,handler,bean,utils,instantiate,class,handler,class,namespace,handler,init,handler,mappings,put,namespace,uri,namespace,handler,return,namespace,handler,catch,class,not,found,exception,ex,throw,new,fatal,bean,exception,could,not,find,namespace,handler,class,class,name,for,namespace,namespace,uri,ex,catch,linkage,error,err,throw,new,fatal,bean,exception,unresolvable,class,definition,for,namespace,handler,class,class,name,for,namespace,namespace,uri,err
DefaultNamespaceHandlerResolver -> @Override 	@Nullable 	public NamespaceHandler resolve(String namespaceUri);1532710698;Locate the {@link NamespaceHandler} for the supplied namespace URI_from the configured mappings._@param namespaceUri the relevant namespace URI_@return the located {@link NamespaceHandler}, or {@code null} if none found;@Override_	@Nullable_	public NamespaceHandler resolve(String namespaceUri) {_		Map<String, Object> handlerMappings = getHandlerMappings()__		Object handlerOrClassName = handlerMappings.get(namespaceUri)__		if (handlerOrClassName == null) {_			return null__		}_		else if (handlerOrClassName instanceof NamespaceHandler) {_			return (NamespaceHandler) handlerOrClassName__		}_		else {_			String className = (String) handlerOrClassName__			try {_				Class<?> handlerClass = ClassUtils.forName(className, this.classLoader)__				if (!NamespaceHandler.class.isAssignableFrom(handlerClass)) {_					throw new FatalBeanException("Class [" + className + "] for namespace [" + namespaceUri +_							"] does not implement the [" + NamespaceHandler.class.getName() + "] interface")__				}_				NamespaceHandler namespaceHandler = (NamespaceHandler) BeanUtils.instantiateClass(handlerClass)__				namespaceHandler.init()__				handlerMappings.put(namespaceUri, namespaceHandler)__				return namespaceHandler__			}_			catch (ClassNotFoundException ex) {_				throw new FatalBeanException("Could not find NamespaceHandler class [" + className +_						"] for namespace [" + namespaceUri + "]", ex)__			}_			catch (LinkageError err) {_				throw new FatalBeanException("Unresolvable class definition for NamespaceHandler class [" +_						className + "] for namespace [" + namespaceUri + "]", err)__			}_		}_	};locate,the,link,namespace,handler,for,the,supplied,namespace,uri,from,the,configured,mappings,param,namespace,uri,the,relevant,namespace,uri,return,the,located,link,namespace,handler,or,code,null,if,none,found;override,nullable,public,namespace,handler,resolve,string,namespace,uri,map,string,object,handler,mappings,get,handler,mappings,object,handler,or,class,name,handler,mappings,get,namespace,uri,if,handler,or,class,name,null,return,null,else,if,handler,or,class,name,instanceof,namespace,handler,return,namespace,handler,handler,or,class,name,else,string,class,name,string,handler,or,class,name,try,class,handler,class,class,utils,for,name,class,name,this,class,loader,if,namespace,handler,class,is,assignable,from,handler,class,throw,new,fatal,bean,exception,class,class,name,for,namespace,namespace,uri,does,not,implement,the,namespace,handler,class,get,name,interface,namespace,handler,namespace,handler,namespace,handler,bean,utils,instantiate,class,handler,class,namespace,handler,init,handler,mappings,put,namespace,uri,namespace,handler,return,namespace,handler,catch,class,not,found,exception,ex,throw,new,fatal,bean,exception,could,not,find,namespace,handler,class,class,name,for,namespace,namespace,uri,ex,catch,linkage,error,err,throw,new,fatal,bean,exception,unresolvable,class,definition,for,namespace,handler,class,class,name,for,namespace,namespace,uri,err
DefaultNamespaceHandlerResolver -> public DefaultNamespaceHandlerResolver();1328020251;Create a new <code>DefaultNamespaceHandlerResolver</code> using the_default mapping file location._<p>This constructor will result in the thread context ClassLoader being used_to load resources._@see #DEFAULT_HANDLER_MAPPINGS_LOCATION;public DefaultNamespaceHandlerResolver() {_		this(null, DEFAULT_HANDLER_MAPPINGS_LOCATION)__	};create,a,new,code,default,namespace,handler,resolver,code,using,the,default,mapping,file,location,p,this,constructor,will,result,in,the,thread,context,class,loader,being,used,to,load,resources,see;public,default,namespace,handler,resolver,this,null
DefaultNamespaceHandlerResolver -> public DefaultNamespaceHandlerResolver();1355352386;Create a new <code>DefaultNamespaceHandlerResolver</code> using the_default mapping file location._<p>This constructor will result in the thread context ClassLoader being used_to load resources._@see #DEFAULT_HANDLER_MAPPINGS_LOCATION;public DefaultNamespaceHandlerResolver() {_		this(null, DEFAULT_HANDLER_MAPPINGS_LOCATION)__	};create,a,new,code,default,namespace,handler,resolver,code,using,the,default,mapping,file,location,p,this,constructor,will,result,in,the,thread,context,class,loader,being,used,to,load,resources,see;public,default,namespace,handler,resolver,this,null
DefaultNamespaceHandlerResolver -> public DefaultNamespaceHandlerResolver();1356735495;Create a new {@code DefaultNamespaceHandlerResolver} using the_default mapping file location._<p>This constructor will result in the thread context ClassLoader being used_to load resources._@see #DEFAULT_HANDLER_MAPPINGS_LOCATION;public DefaultNamespaceHandlerResolver() {_		this(null, DEFAULT_HANDLER_MAPPINGS_LOCATION)__	};create,a,new,code,default,namespace,handler,resolver,using,the,default,mapping,file,location,p,this,constructor,will,result,in,the,thread,context,class,loader,being,used,to,load,resources,see;public,default,namespace,handler,resolver,this,null
DefaultNamespaceHandlerResolver -> public DefaultNamespaceHandlerResolver();1357119239;Create a new {@code DefaultNamespaceHandlerResolver} using the_default mapping file location._<p>This constructor will result in the thread context ClassLoader being used_to load resources._@see #DEFAULT_HANDLER_MAPPINGS_LOCATION;public DefaultNamespaceHandlerResolver() {_		this(null, DEFAULT_HANDLER_MAPPINGS_LOCATION)__	};create,a,new,code,default,namespace,handler,resolver,using,the,default,mapping,file,location,p,this,constructor,will,result,in,the,thread,context,class,loader,being,used,to,load,resources,see;public,default,namespace,handler,resolver,this,null
DefaultNamespaceHandlerResolver -> public DefaultNamespaceHandlerResolver();1368482696;Create a new {@code DefaultNamespaceHandlerResolver} using the_default mapping file location._<p>This constructor will result in the thread context ClassLoader being used_to load resources._@see #DEFAULT_HANDLER_MAPPINGS_LOCATION;public DefaultNamespaceHandlerResolver() {_		this(null, DEFAULT_HANDLER_MAPPINGS_LOCATION)__	};create,a,new,code,default,namespace,handler,resolver,using,the,default,mapping,file,location,p,this,constructor,will,result,in,the,thread,context,class,loader,being,used,to,load,resources,see;public,default,namespace,handler,resolver,this,null
DefaultNamespaceHandlerResolver -> public DefaultNamespaceHandlerResolver();1467730834;Create a new {@code DefaultNamespaceHandlerResolver} using the_default mapping file location._<p>This constructor will result in the thread context ClassLoader being used_to load resources._@see #DEFAULT_HANDLER_MAPPINGS_LOCATION;public DefaultNamespaceHandlerResolver() {_		this(null, DEFAULT_HANDLER_MAPPINGS_LOCATION)__	};create,a,new,code,default,namespace,handler,resolver,using,the,default,mapping,file,location,p,this,constructor,will,result,in,the,thread,context,class,loader,being,used,to,load,resources,see;public,default,namespace,handler,resolver,this,null
DefaultNamespaceHandlerResolver -> public DefaultNamespaceHandlerResolver();1495868221;Create a new {@code DefaultNamespaceHandlerResolver} using the_default mapping file location._<p>This constructor will result in the thread context ClassLoader being used_to load resources._@see #DEFAULT_HANDLER_MAPPINGS_LOCATION;public DefaultNamespaceHandlerResolver() {_		this(null, DEFAULT_HANDLER_MAPPINGS_LOCATION)__	};create,a,new,code,default,namespace,handler,resolver,using,the,default,mapping,file,location,p,this,constructor,will,result,in,the,thread,context,class,loader,being,used,to,load,resources,see;public,default,namespace,handler,resolver,this,null
DefaultNamespaceHandlerResolver -> public DefaultNamespaceHandlerResolver();1498780456;Create a new {@code DefaultNamespaceHandlerResolver} using the_default mapping file location._<p>This constructor will result in the thread context ClassLoader being used_to load resources._@see #DEFAULT_HANDLER_MAPPINGS_LOCATION;public DefaultNamespaceHandlerResolver() {_		this(null, DEFAULT_HANDLER_MAPPINGS_LOCATION)__	};create,a,new,code,default,namespace,handler,resolver,using,the,default,mapping,file,location,p,this,constructor,will,result,in,the,thread,context,class,loader,being,used,to,load,resources,see;public,default,namespace,handler,resolver,this,null
DefaultNamespaceHandlerResolver -> public DefaultNamespaceHandlerResolver();1502974979;Create a new {@code DefaultNamespaceHandlerResolver} using the_default mapping file location._<p>This constructor will result in the thread context ClassLoader being used_to load resources._@see #DEFAULT_HANDLER_MAPPINGS_LOCATION;public DefaultNamespaceHandlerResolver() {_		this(null, DEFAULT_HANDLER_MAPPINGS_LOCATION)__	};create,a,new,code,default,namespace,handler,resolver,using,the,default,mapping,file,location,p,this,constructor,will,result,in,the,thread,context,class,loader,being,used,to,load,resources,see;public,default,namespace,handler,resolver,this,null
DefaultNamespaceHandlerResolver -> public DefaultNamespaceHandlerResolver();1516217097;Create a new {@code DefaultNamespaceHandlerResolver} using the_default mapping file location._<p>This constructor will result in the thread context ClassLoader being used_to load resources._@see #DEFAULT_HANDLER_MAPPINGS_LOCATION;public DefaultNamespaceHandlerResolver() {_		this(null, DEFAULT_HANDLER_MAPPINGS_LOCATION)__	};create,a,new,code,default,namespace,handler,resolver,using,the,default,mapping,file,location,p,this,constructor,will,result,in,the,thread,context,class,loader,being,used,to,load,resources,see;public,default,namespace,handler,resolver,this,null
DefaultNamespaceHandlerResolver -> public DefaultNamespaceHandlerResolver();1530174524;Create a new {@code DefaultNamespaceHandlerResolver} using the_default mapping file location._<p>This constructor will result in the thread context ClassLoader being used_to load resources._@see #DEFAULT_HANDLER_MAPPINGS_LOCATION;public DefaultNamespaceHandlerResolver() {_		this(null, DEFAULT_HANDLER_MAPPINGS_LOCATION)__	};create,a,new,code,default,namespace,handler,resolver,using,the,default,mapping,file,location,p,this,constructor,will,result,in,the,thread,context,class,loader,being,used,to,load,resources,see;public,default,namespace,handler,resolver,this,null
DefaultNamespaceHandlerResolver -> public DefaultNamespaceHandlerResolver();1532706365;Create a new {@code DefaultNamespaceHandlerResolver} using the_default mapping file location._<p>This constructor will result in the thread context ClassLoader being used_to load resources._@see #DEFAULT_HANDLER_MAPPINGS_LOCATION;public DefaultNamespaceHandlerResolver() {_		this(null, DEFAULT_HANDLER_MAPPINGS_LOCATION)__	};create,a,new,code,default,namespace,handler,resolver,using,the,default,mapping,file,location,p,this,constructor,will,result,in,the,thread,context,class,loader,being,used,to,load,resources,see;public,default,namespace,handler,resolver,this,null
DefaultNamespaceHandlerResolver -> public DefaultNamespaceHandlerResolver();1532710698;Create a new {@code DefaultNamespaceHandlerResolver} using the_default mapping file location._<p>This constructor will result in the thread context ClassLoader being used_to load resources._@see #DEFAULT_HANDLER_MAPPINGS_LOCATION;public DefaultNamespaceHandlerResolver() {_		this(null, DEFAULT_HANDLER_MAPPINGS_LOCATION)__	};create,a,new,code,default,namespace,handler,resolver,using,the,default,mapping,file,location,p,this,constructor,will,result,in,the,thread,context,class,loader,being,used,to,load,resources,see;public,default,namespace,handler,resolver,this,null
DefaultNamespaceHandlerResolver -> public NamespaceHandler resolve(String namespaceUri);1328020251;Locate the {@link NamespaceHandler} for the supplied namespace URI_from the configured mappings._@param namespaceUri the relevant namespace URI_@return the located {@link NamespaceHandler}, or <code>null</code> if none found;public NamespaceHandler resolve(String namespaceUri) {_		Map<String, Object> handlerMappings = getHandlerMappings()__		Object handlerOrClassName = handlerMappings.get(namespaceUri)__		if (handlerOrClassName == null) {_			return null__		}_		else if (handlerOrClassName instanceof NamespaceHandler) {_			return (NamespaceHandler) handlerOrClassName__		}_		else {_			String className = (String) handlerOrClassName__			try {_				Class<?> handlerClass = ClassUtils.forName(className, this.classLoader)__				if (!NamespaceHandler.class.isAssignableFrom(handlerClass)) {_					throw new FatalBeanException("Class [" + className + "] for namespace [" + namespaceUri +_							"] does not implement the [" + NamespaceHandler.class.getName() + "] interface")__				}_				NamespaceHandler namespaceHandler = (NamespaceHandler) BeanUtils.instantiateClass(handlerClass)__				namespaceHandler.init()__				handlerMappings.put(namespaceUri, namespaceHandler)__				return namespaceHandler__			}_			catch (ClassNotFoundException ex) {_				throw new FatalBeanException("NamespaceHandler class [" + className + "] for namespace [" +_						namespaceUri + "] not found", ex)__			}_			catch (LinkageError err) {_				throw new FatalBeanException("Invalid NamespaceHandler class [" + className + "] for namespace [" +_						namespaceUri + "]: problem with handler class file or dependent class", err)__			}_		}_	};locate,the,link,namespace,handler,for,the,supplied,namespace,uri,from,the,configured,mappings,param,namespace,uri,the,relevant,namespace,uri,return,the,located,link,namespace,handler,or,code,null,code,if,none,found;public,namespace,handler,resolve,string,namespace,uri,map,string,object,handler,mappings,get,handler,mappings,object,handler,or,class,name,handler,mappings,get,namespace,uri,if,handler,or,class,name,null,return,null,else,if,handler,or,class,name,instanceof,namespace,handler,return,namespace,handler,handler,or,class,name,else,string,class,name,string,handler,or,class,name,try,class,handler,class,class,utils,for,name,class,name,this,class,loader,if,namespace,handler,class,is,assignable,from,handler,class,throw,new,fatal,bean,exception,class,class,name,for,namespace,namespace,uri,does,not,implement,the,namespace,handler,class,get,name,interface,namespace,handler,namespace,handler,namespace,handler,bean,utils,instantiate,class,handler,class,namespace,handler,init,handler,mappings,put,namespace,uri,namespace,handler,return,namespace,handler,catch,class,not,found,exception,ex,throw,new,fatal,bean,exception,namespace,handler,class,class,name,for,namespace,namespace,uri,not,found,ex,catch,linkage,error,err,throw,new,fatal,bean,exception,invalid,namespace,handler,class,class,name,for,namespace,namespace,uri,problem,with,handler,class,file,or,dependent,class,err
DefaultNamespaceHandlerResolver -> public NamespaceHandler resolve(String namespaceUri);1355352386;Locate the {@link NamespaceHandler} for the supplied namespace URI_from the configured mappings._@param namespaceUri the relevant namespace URI_@return the located {@link NamespaceHandler}, or <code>null</code> if none found;public NamespaceHandler resolve(String namespaceUri) {_		Map<String, Object> handlerMappings = getHandlerMappings()__		Object handlerOrClassName = handlerMappings.get(namespaceUri)__		if (handlerOrClassName == null) {_			return null__		}_		else if (handlerOrClassName instanceof NamespaceHandler) {_			return (NamespaceHandler) handlerOrClassName__		}_		else {_			String className = (String) handlerOrClassName__			try {_				Class<?> handlerClass = ClassUtils.forName(className, this.classLoader)__				if (!NamespaceHandler.class.isAssignableFrom(handlerClass)) {_					throw new FatalBeanException("Class [" + className + "] for namespace [" + namespaceUri +_							"] does not implement the [" + NamespaceHandler.class.getName() + "] interface")__				}_				NamespaceHandler namespaceHandler = (NamespaceHandler) BeanUtils.instantiateClass(handlerClass)__				namespaceHandler.init()__				handlerMappings.put(namespaceUri, namespaceHandler)__				return namespaceHandler__			}_			catch (ClassNotFoundException ex) {_				throw new FatalBeanException("NamespaceHandler class [" + className + "] for namespace [" +_						namespaceUri + "] not found", ex)__			}_			catch (LinkageError err) {_				throw new FatalBeanException("Invalid NamespaceHandler class [" + className + "] for namespace [" +_						namespaceUri + "]: problem with handler class file or dependent class", err)__			}_		}_	};locate,the,link,namespace,handler,for,the,supplied,namespace,uri,from,the,configured,mappings,param,namespace,uri,the,relevant,namespace,uri,return,the,located,link,namespace,handler,or,code,null,code,if,none,found;public,namespace,handler,resolve,string,namespace,uri,map,string,object,handler,mappings,get,handler,mappings,object,handler,or,class,name,handler,mappings,get,namespace,uri,if,handler,or,class,name,null,return,null,else,if,handler,or,class,name,instanceof,namespace,handler,return,namespace,handler,handler,or,class,name,else,string,class,name,string,handler,or,class,name,try,class,handler,class,class,utils,for,name,class,name,this,class,loader,if,namespace,handler,class,is,assignable,from,handler,class,throw,new,fatal,bean,exception,class,class,name,for,namespace,namespace,uri,does,not,implement,the,namespace,handler,class,get,name,interface,namespace,handler,namespace,handler,namespace,handler,bean,utils,instantiate,class,handler,class,namespace,handler,init,handler,mappings,put,namespace,uri,namespace,handler,return,namespace,handler,catch,class,not,found,exception,ex,throw,new,fatal,bean,exception,namespace,handler,class,class,name,for,namespace,namespace,uri,not,found,ex,catch,linkage,error,err,throw,new,fatal,bean,exception,invalid,namespace,handler,class,class,name,for,namespace,namespace,uri,problem,with,handler,class,file,or,dependent,class,err
DefaultNamespaceHandlerResolver -> public NamespaceHandler resolve(String namespaceUri);1357119239;Locate the {@link NamespaceHandler} for the supplied namespace URI_from the configured mappings._@param namespaceUri the relevant namespace URI_@return the located {@link NamespaceHandler}, or {@code null} if none found;public NamespaceHandler resolve(String namespaceUri) {_		Map<String, Object> handlerMappings = getHandlerMappings()__		Object handlerOrClassName = handlerMappings.get(namespaceUri)__		if (handlerOrClassName == null) {_			return null__		}_		else if (handlerOrClassName instanceof NamespaceHandler) {_			return (NamespaceHandler) handlerOrClassName__		}_		else {_			String className = (String) handlerOrClassName__			try {_				Class<?> handlerClass = ClassUtils.forName(className, this.classLoader)__				if (!NamespaceHandler.class.isAssignableFrom(handlerClass)) {_					throw new FatalBeanException("Class [" + className + "] for namespace [" + namespaceUri +_							"] does not implement the [" + NamespaceHandler.class.getName() + "] interface")__				}_				NamespaceHandler namespaceHandler = (NamespaceHandler) BeanUtils.instantiateClass(handlerClass)__				namespaceHandler.init()__				handlerMappings.put(namespaceUri, namespaceHandler)__				return namespaceHandler__			}_			catch (ClassNotFoundException ex) {_				throw new FatalBeanException("NamespaceHandler class [" + className + "] for namespace [" +_						namespaceUri + "] not found", ex)__			}_			catch (LinkageError err) {_				throw new FatalBeanException("Invalid NamespaceHandler class [" + className + "] for namespace [" +_						namespaceUri + "]: problem with handler class file or dependent class", err)__			}_		}_	};locate,the,link,namespace,handler,for,the,supplied,namespace,uri,from,the,configured,mappings,param,namespace,uri,the,relevant,namespace,uri,return,the,located,link,namespace,handler,or,code,null,if,none,found;public,namespace,handler,resolve,string,namespace,uri,map,string,object,handler,mappings,get,handler,mappings,object,handler,or,class,name,handler,mappings,get,namespace,uri,if,handler,or,class,name,null,return,null,else,if,handler,or,class,name,instanceof,namespace,handler,return,namespace,handler,handler,or,class,name,else,string,class,name,string,handler,or,class,name,try,class,handler,class,class,utils,for,name,class,name,this,class,loader,if,namespace,handler,class,is,assignable,from,handler,class,throw,new,fatal,bean,exception,class,class,name,for,namespace,namespace,uri,does,not,implement,the,namespace,handler,class,get,name,interface,namespace,handler,namespace,handler,namespace,handler,bean,utils,instantiate,class,handler,class,namespace,handler,init,handler,mappings,put,namespace,uri,namespace,handler,return,namespace,handler,catch,class,not,found,exception,ex,throw,new,fatal,bean,exception,namespace,handler,class,class,name,for,namespace,namespace,uri,not,found,ex,catch,linkage,error,err,throw,new,fatal,bean,exception,invalid,namespace,handler,class,class,name,for,namespace,namespace,uri,problem,with,handler,class,file,or,dependent,class,err
DefaultNamespaceHandlerResolver -> @Override 	public NamespaceHandler resolve(String namespaceUri);1356735495;Locate the {@link NamespaceHandler} for the supplied namespace URI_from the configured mappings._@param namespaceUri the relevant namespace URI_@return the located {@link NamespaceHandler}, or {@code null} if none found;@Override_	public NamespaceHandler resolve(String namespaceUri) {_		Map<String, Object> handlerMappings = getHandlerMappings()__		Object handlerOrClassName = handlerMappings.get(namespaceUri)__		if (handlerOrClassName == null) {_			return null__		}_		else if (handlerOrClassName instanceof NamespaceHandler) {_			return (NamespaceHandler) handlerOrClassName__		}_		else {_			String className = (String) handlerOrClassName__			try {_				Class<?> handlerClass = ClassUtils.forName(className, this.classLoader)__				if (!NamespaceHandler.class.isAssignableFrom(handlerClass)) {_					throw new FatalBeanException("Class [" + className + "] for namespace [" + namespaceUri +_							"] does not implement the [" + NamespaceHandler.class.getName() + "] interface")__				}_				NamespaceHandler namespaceHandler = (NamespaceHandler) BeanUtils.instantiateClass(handlerClass)__				namespaceHandler.init()__				handlerMappings.put(namespaceUri, namespaceHandler)__				return namespaceHandler__			}_			catch (ClassNotFoundException ex) {_				throw new FatalBeanException("NamespaceHandler class [" + className + "] for namespace [" +_						namespaceUri + "] not found", ex)__			}_			catch (LinkageError err) {_				throw new FatalBeanException("Invalid NamespaceHandler class [" + className + "] for namespace [" +_						namespaceUri + "]: problem with handler class file or dependent class", err)__			}_		}_	};locate,the,link,namespace,handler,for,the,supplied,namespace,uri,from,the,configured,mappings,param,namespace,uri,the,relevant,namespace,uri,return,the,located,link,namespace,handler,or,code,null,if,none,found;override,public,namespace,handler,resolve,string,namespace,uri,map,string,object,handler,mappings,get,handler,mappings,object,handler,or,class,name,handler,mappings,get,namespace,uri,if,handler,or,class,name,null,return,null,else,if,handler,or,class,name,instanceof,namespace,handler,return,namespace,handler,handler,or,class,name,else,string,class,name,string,handler,or,class,name,try,class,handler,class,class,utils,for,name,class,name,this,class,loader,if,namespace,handler,class,is,assignable,from,handler,class,throw,new,fatal,bean,exception,class,class,name,for,namespace,namespace,uri,does,not,implement,the,namespace,handler,class,get,name,interface,namespace,handler,namespace,handler,namespace,handler,bean,utils,instantiate,class,handler,class,namespace,handler,init,handler,mappings,put,namespace,uri,namespace,handler,return,namespace,handler,catch,class,not,found,exception,ex,throw,new,fatal,bean,exception,namespace,handler,class,class,name,for,namespace,namespace,uri,not,found,ex,catch,linkage,error,err,throw,new,fatal,bean,exception,invalid,namespace,handler,class,class,name,for,namespace,namespace,uri,problem,with,handler,class,file,or,dependent,class,err
DefaultNamespaceHandlerResolver -> @Override 	public NamespaceHandler resolve(String namespaceUri);1368482696;Locate the {@link NamespaceHandler} for the supplied namespace URI_from the configured mappings._@param namespaceUri the relevant namespace URI_@return the located {@link NamespaceHandler}, or {@code null} if none found;@Override_	public NamespaceHandler resolve(String namespaceUri) {_		Map<String, Object> handlerMappings = getHandlerMappings()__		Object handlerOrClassName = handlerMappings.get(namespaceUri)__		if (handlerOrClassName == null) {_			return null__		}_		else if (handlerOrClassName instanceof NamespaceHandler) {_			return (NamespaceHandler) handlerOrClassName__		}_		else {_			String className = (String) handlerOrClassName__			try {_				Class<?> handlerClass = ClassUtils.forName(className, this.classLoader)__				if (!NamespaceHandler.class.isAssignableFrom(handlerClass)) {_					throw new FatalBeanException("Class [" + className + "] for namespace [" + namespaceUri +_							"] does not implement the [" + NamespaceHandler.class.getName() + "] interface")__				}_				NamespaceHandler namespaceHandler = (NamespaceHandler) BeanUtils.instantiateClass(handlerClass)__				namespaceHandler.init()__				handlerMappings.put(namespaceUri, namespaceHandler)__				return namespaceHandler__			}_			catch (ClassNotFoundException ex) {_				throw new FatalBeanException("NamespaceHandler class [" + className + "] for namespace [" +_						namespaceUri + "] not found", ex)__			}_			catch (LinkageError err) {_				throw new FatalBeanException("Invalid NamespaceHandler class [" + className + "] for namespace [" +_						namespaceUri + "]: problem with handler class file or dependent class", err)__			}_		}_	};locate,the,link,namespace,handler,for,the,supplied,namespace,uri,from,the,configured,mappings,param,namespace,uri,the,relevant,namespace,uri,return,the,located,link,namespace,handler,or,code,null,if,none,found;override,public,namespace,handler,resolve,string,namespace,uri,map,string,object,handler,mappings,get,handler,mappings,object,handler,or,class,name,handler,mappings,get,namespace,uri,if,handler,or,class,name,null,return,null,else,if,handler,or,class,name,instanceof,namespace,handler,return,namespace,handler,handler,or,class,name,else,string,class,name,string,handler,or,class,name,try,class,handler,class,class,utils,for,name,class,name,this,class,loader,if,namespace,handler,class,is,assignable,from,handler,class,throw,new,fatal,bean,exception,class,class,name,for,namespace,namespace,uri,does,not,implement,the,namespace,handler,class,get,name,interface,namespace,handler,namespace,handler,namespace,handler,bean,utils,instantiate,class,handler,class,namespace,handler,init,handler,mappings,put,namespace,uri,namespace,handler,return,namespace,handler,catch,class,not,found,exception,ex,throw,new,fatal,bean,exception,namespace,handler,class,class,name,for,namespace,namespace,uri,not,found,ex,catch,linkage,error,err,throw,new,fatal,bean,exception,invalid,namespace,handler,class,class,name,for,namespace,namespace,uri,problem,with,handler,class,file,or,dependent,class,err
DefaultNamespaceHandlerResolver -> @Override 	public NamespaceHandler resolve(String namespaceUri);1467730834;Locate the {@link NamespaceHandler} for the supplied namespace URI_from the configured mappings._@param namespaceUri the relevant namespace URI_@return the located {@link NamespaceHandler}, or {@code null} if none found;@Override_	public NamespaceHandler resolve(String namespaceUri) {_		Map<String, Object> handlerMappings = getHandlerMappings()__		Object handlerOrClassName = handlerMappings.get(namespaceUri)__		if (handlerOrClassName == null) {_			return null__		}_		else if (handlerOrClassName instanceof NamespaceHandler) {_			return (NamespaceHandler) handlerOrClassName__		}_		else {_			String className = (String) handlerOrClassName__			try {_				Class<?> handlerClass = ClassUtils.forName(className, this.classLoader)__				if (!NamespaceHandler.class.isAssignableFrom(handlerClass)) {_					throw new FatalBeanException("Class [" + className + "] for namespace [" + namespaceUri +_							"] does not implement the [" + NamespaceHandler.class.getName() + "] interface")__				}_				NamespaceHandler namespaceHandler = (NamespaceHandler) BeanUtils.instantiateClass(handlerClass)__				namespaceHandler.init()__				handlerMappings.put(namespaceUri, namespaceHandler)__				return namespaceHandler__			}_			catch (ClassNotFoundException ex) {_				throw new FatalBeanException("NamespaceHandler class [" + className + "] for namespace [" +_						namespaceUri + "] not found", ex)__			}_			catch (LinkageError err) {_				throw new FatalBeanException("Invalid NamespaceHandler class [" + className + "] for namespace [" +_						namespaceUri + "]: problem with handler class file or dependent class", err)__			}_		}_	};locate,the,link,namespace,handler,for,the,supplied,namespace,uri,from,the,configured,mappings,param,namespace,uri,the,relevant,namespace,uri,return,the,located,link,namespace,handler,or,code,null,if,none,found;override,public,namespace,handler,resolve,string,namespace,uri,map,string,object,handler,mappings,get,handler,mappings,object,handler,or,class,name,handler,mappings,get,namespace,uri,if,handler,or,class,name,null,return,null,else,if,handler,or,class,name,instanceof,namespace,handler,return,namespace,handler,handler,or,class,name,else,string,class,name,string,handler,or,class,name,try,class,handler,class,class,utils,for,name,class,name,this,class,loader,if,namespace,handler,class,is,assignable,from,handler,class,throw,new,fatal,bean,exception,class,class,name,for,namespace,namespace,uri,does,not,implement,the,namespace,handler,class,get,name,interface,namespace,handler,namespace,handler,namespace,handler,bean,utils,instantiate,class,handler,class,namespace,handler,init,handler,mappings,put,namespace,uri,namespace,handler,return,namespace,handler,catch,class,not,found,exception,ex,throw,new,fatal,bean,exception,namespace,handler,class,class,name,for,namespace,namespace,uri,not,found,ex,catch,linkage,error,err,throw,new,fatal,bean,exception,invalid,namespace,handler,class,class,name,for,namespace,namespace,uri,problem,with,handler,class,file,or,dependent,class,err
DefaultNamespaceHandlerResolver -> @Override 	public NamespaceHandler resolve(String namespaceUri);1495868221;Locate the {@link NamespaceHandler} for the supplied namespace URI_from the configured mappings._@param namespaceUri the relevant namespace URI_@return the located {@link NamespaceHandler}, or {@code null} if none found;@Override_	public NamespaceHandler resolve(String namespaceUri) {_		Map<String, Object> handlerMappings = getHandlerMappings()__		Object handlerOrClassName = handlerMappings.get(namespaceUri)__		if (handlerOrClassName == null) {_			return null__		}_		else if (handlerOrClassName instanceof NamespaceHandler) {_			return (NamespaceHandler) handlerOrClassName__		}_		else {_			String className = (String) handlerOrClassName__			try {_				Class<?> handlerClass = ClassUtils.forName(className, this.classLoader)__				if (!NamespaceHandler.class.isAssignableFrom(handlerClass)) {_					throw new FatalBeanException("Class [" + className + "] for namespace [" + namespaceUri +_							"] does not implement the [" + NamespaceHandler.class.getName() + "] interface")__				}_				NamespaceHandler namespaceHandler = (NamespaceHandler) BeanUtils.instantiateClass(handlerClass)__				namespaceHandler.init()__				handlerMappings.put(namespaceUri, namespaceHandler)__				return namespaceHandler__			}_			catch (ClassNotFoundException ex) {_				throw new FatalBeanException("NamespaceHandler class [" + className + "] for namespace [" +_						namespaceUri + "] not found", ex)__			}_			catch (LinkageError err) {_				throw new FatalBeanException("Invalid NamespaceHandler class [" + className + "] for namespace [" +_						namespaceUri + "]: problem with handler class file or dependent class", err)__			}_		}_	};locate,the,link,namespace,handler,for,the,supplied,namespace,uri,from,the,configured,mappings,param,namespace,uri,the,relevant,namespace,uri,return,the,located,link,namespace,handler,or,code,null,if,none,found;override,public,namespace,handler,resolve,string,namespace,uri,map,string,object,handler,mappings,get,handler,mappings,object,handler,or,class,name,handler,mappings,get,namespace,uri,if,handler,or,class,name,null,return,null,else,if,handler,or,class,name,instanceof,namespace,handler,return,namespace,handler,handler,or,class,name,else,string,class,name,string,handler,or,class,name,try,class,handler,class,class,utils,for,name,class,name,this,class,loader,if,namespace,handler,class,is,assignable,from,handler,class,throw,new,fatal,bean,exception,class,class,name,for,namespace,namespace,uri,does,not,implement,the,namespace,handler,class,get,name,interface,namespace,handler,namespace,handler,namespace,handler,bean,utils,instantiate,class,handler,class,namespace,handler,init,handler,mappings,put,namespace,uri,namespace,handler,return,namespace,handler,catch,class,not,found,exception,ex,throw,new,fatal,bean,exception,namespace,handler,class,class,name,for,namespace,namespace,uri,not,found,ex,catch,linkage,error,err,throw,new,fatal,bean,exception,invalid,namespace,handler,class,class,name,for,namespace,namespace,uri,problem,with,handler,class,file,or,dependent,class,err
DefaultNamespaceHandlerResolver -> @Override 	public NamespaceHandler resolve(String namespaceUri);1498780456;Locate the {@link NamespaceHandler} for the supplied namespace URI_from the configured mappings._@param namespaceUri the relevant namespace URI_@return the located {@link NamespaceHandler}, or {@code null} if none found;@Override_	public NamespaceHandler resolve(String namespaceUri) {_		Map<String, Object> handlerMappings = getHandlerMappings()__		Object handlerOrClassName = handlerMappings.get(namespaceUri)__		if (handlerOrClassName == null) {_			return null__		}_		else if (handlerOrClassName instanceof NamespaceHandler) {_			return (NamespaceHandler) handlerOrClassName__		}_		else {_			String className = (String) handlerOrClassName__			try {_				Class<?> handlerClass = ClassUtils.forName(className, this.classLoader)__				if (!NamespaceHandler.class.isAssignableFrom(handlerClass)) {_					throw new FatalBeanException("Class [" + className + "] for namespace [" + namespaceUri +_							"] does not implement the [" + NamespaceHandler.class.getName() + "] interface")__				}_				NamespaceHandler namespaceHandler = (NamespaceHandler) BeanUtils.instantiateClass(handlerClass)__				namespaceHandler.init()__				handlerMappings.put(namespaceUri, namespaceHandler)__				return namespaceHandler__			}_			catch (ClassNotFoundException ex) {_				throw new FatalBeanException("NamespaceHandler class [" + className + "] for namespace [" +_						namespaceUri + "] not found", ex)__			}_			catch (LinkageError err) {_				throw new FatalBeanException("Invalid NamespaceHandler class [" + className + "] for namespace [" +_						namespaceUri + "]: problem with handler class file or dependent class", err)__			}_		}_	};locate,the,link,namespace,handler,for,the,supplied,namespace,uri,from,the,configured,mappings,param,namespace,uri,the,relevant,namespace,uri,return,the,located,link,namespace,handler,or,code,null,if,none,found;override,public,namespace,handler,resolve,string,namespace,uri,map,string,object,handler,mappings,get,handler,mappings,object,handler,or,class,name,handler,mappings,get,namespace,uri,if,handler,or,class,name,null,return,null,else,if,handler,or,class,name,instanceof,namespace,handler,return,namespace,handler,handler,or,class,name,else,string,class,name,string,handler,or,class,name,try,class,handler,class,class,utils,for,name,class,name,this,class,loader,if,namespace,handler,class,is,assignable,from,handler,class,throw,new,fatal,bean,exception,class,class,name,for,namespace,namespace,uri,does,not,implement,the,namespace,handler,class,get,name,interface,namespace,handler,namespace,handler,namespace,handler,bean,utils,instantiate,class,handler,class,namespace,handler,init,handler,mappings,put,namespace,uri,namespace,handler,return,namespace,handler,catch,class,not,found,exception,ex,throw,new,fatal,bean,exception,namespace,handler,class,class,name,for,namespace,namespace,uri,not,found,ex,catch,linkage,error,err,throw,new,fatal,bean,exception,invalid,namespace,handler,class,class,name,for,namespace,namespace,uri,problem,with,handler,class,file,or,dependent,class,err
DefaultNamespaceHandlerResolver -> public DefaultNamespaceHandlerResolver(@Nullable ClassLoader classLoader);1495868221;Create a new {@code DefaultNamespaceHandlerResolver} using the_default mapping file location._@param classLoader the {@link ClassLoader} instance used to load mapping resources_(may be {@code null}, in which case the thread context ClassLoader will be used)_@see #DEFAULT_HANDLER_MAPPINGS_LOCATION;public DefaultNamespaceHandlerResolver(@Nullable ClassLoader classLoader) {_		this(classLoader, DEFAULT_HANDLER_MAPPINGS_LOCATION)__	};create,a,new,code,default,namespace,handler,resolver,using,the,default,mapping,file,location,param,class,loader,the,link,class,loader,instance,used,to,load,mapping,resources,may,be,code,null,in,which,case,the,thread,context,class,loader,will,be,used,see;public,default,namespace,handler,resolver,nullable,class,loader,class,loader,this,class,loader
DefaultNamespaceHandlerResolver -> public DefaultNamespaceHandlerResolver(@Nullable ClassLoader classLoader);1498780456;Create a new {@code DefaultNamespaceHandlerResolver} using the_default mapping file location._@param classLoader the {@link ClassLoader} instance used to load mapping resources_(may be {@code null}, in which case the thread context ClassLoader will be used)_@see #DEFAULT_HANDLER_MAPPINGS_LOCATION;public DefaultNamespaceHandlerResolver(@Nullable ClassLoader classLoader) {_		this(classLoader, DEFAULT_HANDLER_MAPPINGS_LOCATION)__	};create,a,new,code,default,namespace,handler,resolver,using,the,default,mapping,file,location,param,class,loader,the,link,class,loader,instance,used,to,load,mapping,resources,may,be,code,null,in,which,case,the,thread,context,class,loader,will,be,used,see;public,default,namespace,handler,resolver,nullable,class,loader,class,loader,this,class,loader
DefaultNamespaceHandlerResolver -> public DefaultNamespaceHandlerResolver(@Nullable ClassLoader classLoader);1502974979;Create a new {@code DefaultNamespaceHandlerResolver} using the_default mapping file location._@param classLoader the {@link ClassLoader} instance used to load mapping resources_(may be {@code null}, in which case the thread context ClassLoader will be used)_@see #DEFAULT_HANDLER_MAPPINGS_LOCATION;public DefaultNamespaceHandlerResolver(@Nullable ClassLoader classLoader) {_		this(classLoader, DEFAULT_HANDLER_MAPPINGS_LOCATION)__	};create,a,new,code,default,namespace,handler,resolver,using,the,default,mapping,file,location,param,class,loader,the,link,class,loader,instance,used,to,load,mapping,resources,may,be,code,null,in,which,case,the,thread,context,class,loader,will,be,used,see;public,default,namespace,handler,resolver,nullable,class,loader,class,loader,this,class,loader
DefaultNamespaceHandlerResolver -> public DefaultNamespaceHandlerResolver(@Nullable ClassLoader classLoader);1516217097;Create a new {@code DefaultNamespaceHandlerResolver} using the_default mapping file location._@param classLoader the {@link ClassLoader} instance used to load mapping resources_(may be {@code null}, in which case the thread context ClassLoader will be used)_@see #DEFAULT_HANDLER_MAPPINGS_LOCATION;public DefaultNamespaceHandlerResolver(@Nullable ClassLoader classLoader) {_		this(classLoader, DEFAULT_HANDLER_MAPPINGS_LOCATION)__	};create,a,new,code,default,namespace,handler,resolver,using,the,default,mapping,file,location,param,class,loader,the,link,class,loader,instance,used,to,load,mapping,resources,may,be,code,null,in,which,case,the,thread,context,class,loader,will,be,used,see;public,default,namespace,handler,resolver,nullable,class,loader,class,loader,this,class,loader
DefaultNamespaceHandlerResolver -> public DefaultNamespaceHandlerResolver(@Nullable ClassLoader classLoader);1530174524;Create a new {@code DefaultNamespaceHandlerResolver} using the_default mapping file location._@param classLoader the {@link ClassLoader} instance used to load mapping resources_(may be {@code null}, in which case the thread context ClassLoader will be used)_@see #DEFAULT_HANDLER_MAPPINGS_LOCATION;public DefaultNamespaceHandlerResolver(@Nullable ClassLoader classLoader) {_		this(classLoader, DEFAULT_HANDLER_MAPPINGS_LOCATION)__	};create,a,new,code,default,namespace,handler,resolver,using,the,default,mapping,file,location,param,class,loader,the,link,class,loader,instance,used,to,load,mapping,resources,may,be,code,null,in,which,case,the,thread,context,class,loader,will,be,used,see;public,default,namespace,handler,resolver,nullable,class,loader,class,loader,this,class,loader
DefaultNamespaceHandlerResolver -> public DefaultNamespaceHandlerResolver(@Nullable ClassLoader classLoader);1532706365;Create a new {@code DefaultNamespaceHandlerResolver} using the_default mapping file location._@param classLoader the {@link ClassLoader} instance used to load mapping resources_(may be {@code null}, in which case the thread context ClassLoader will be used)_@see #DEFAULT_HANDLER_MAPPINGS_LOCATION;public DefaultNamespaceHandlerResolver(@Nullable ClassLoader classLoader) {_		this(classLoader, DEFAULT_HANDLER_MAPPINGS_LOCATION)__	};create,a,new,code,default,namespace,handler,resolver,using,the,default,mapping,file,location,param,class,loader,the,link,class,loader,instance,used,to,load,mapping,resources,may,be,code,null,in,which,case,the,thread,context,class,loader,will,be,used,see;public,default,namespace,handler,resolver,nullable,class,loader,class,loader,this,class,loader
DefaultNamespaceHandlerResolver -> public DefaultNamespaceHandlerResolver(@Nullable ClassLoader classLoader);1532710698;Create a new {@code DefaultNamespaceHandlerResolver} using the_default mapping file location._@param classLoader the {@link ClassLoader} instance used to load mapping resources_(may be {@code null}, in which case the thread context ClassLoader will be used)_@see #DEFAULT_HANDLER_MAPPINGS_LOCATION;public DefaultNamespaceHandlerResolver(@Nullable ClassLoader classLoader) {_		this(classLoader, DEFAULT_HANDLER_MAPPINGS_LOCATION)__	};create,a,new,code,default,namespace,handler,resolver,using,the,default,mapping,file,location,param,class,loader,the,link,class,loader,instance,used,to,load,mapping,resources,may,be,code,null,in,which,case,the,thread,context,class,loader,will,be,used,see;public,default,namespace,handler,resolver,nullable,class,loader,class,loader,this,class,loader
DefaultNamespaceHandlerResolver -> public DefaultNamespaceHandlerResolver(@Nullable ClassLoader classLoader, String handlerMappingsLocation);1495868221;Create a new {@code DefaultNamespaceHandlerResolver} using the_supplied mapping file location._@param classLoader the {@link ClassLoader} instance used to load mapping resources_may be {@code null}, in which case the thread context ClassLoader will be used)_@param handlerMappingsLocation the mapping file location;public DefaultNamespaceHandlerResolver(@Nullable ClassLoader classLoader, String handlerMappingsLocation) {_		Assert.notNull(handlerMappingsLocation, "Handler mappings location must not be null")__		this.classLoader = (classLoader != null ? classLoader : ClassUtils.getDefaultClassLoader())__		this.handlerMappingsLocation = handlerMappingsLocation__	};create,a,new,code,default,namespace,handler,resolver,using,the,supplied,mapping,file,location,param,class,loader,the,link,class,loader,instance,used,to,load,mapping,resources,may,be,code,null,in,which,case,the,thread,context,class,loader,will,be,used,param,handler,mappings,location,the,mapping,file,location;public,default,namespace,handler,resolver,nullable,class,loader,class,loader,string,handler,mappings,location,assert,not,null,handler,mappings,location,handler,mappings,location,must,not,be,null,this,class,loader,class,loader,null,class,loader,class,utils,get,default,class,loader,this,handler,mappings,location,handler,mappings,location
DefaultNamespaceHandlerResolver -> public DefaultNamespaceHandlerResolver(@Nullable ClassLoader classLoader, String handlerMappingsLocation);1498780456;Create a new {@code DefaultNamespaceHandlerResolver} using the_supplied mapping file location._@param classLoader the {@link ClassLoader} instance used to load mapping resources_may be {@code null}, in which case the thread context ClassLoader will be used)_@param handlerMappingsLocation the mapping file location;public DefaultNamespaceHandlerResolver(@Nullable ClassLoader classLoader, String handlerMappingsLocation) {_		Assert.notNull(handlerMappingsLocation, "Handler mappings location must not be null")__		this.classLoader = (classLoader != null ? classLoader : ClassUtils.getDefaultClassLoader())__		this.handlerMappingsLocation = handlerMappingsLocation__	};create,a,new,code,default,namespace,handler,resolver,using,the,supplied,mapping,file,location,param,class,loader,the,link,class,loader,instance,used,to,load,mapping,resources,may,be,code,null,in,which,case,the,thread,context,class,loader,will,be,used,param,handler,mappings,location,the,mapping,file,location;public,default,namespace,handler,resolver,nullable,class,loader,class,loader,string,handler,mappings,location,assert,not,null,handler,mappings,location,handler,mappings,location,must,not,be,null,this,class,loader,class,loader,null,class,loader,class,utils,get,default,class,loader,this,handler,mappings,location,handler,mappings,location
DefaultNamespaceHandlerResolver -> public DefaultNamespaceHandlerResolver(@Nullable ClassLoader classLoader, String handlerMappingsLocation);1502974979;Create a new {@code DefaultNamespaceHandlerResolver} using the_supplied mapping file location._@param classLoader the {@link ClassLoader} instance used to load mapping resources_may be {@code null}, in which case the thread context ClassLoader will be used)_@param handlerMappingsLocation the mapping file location;public DefaultNamespaceHandlerResolver(@Nullable ClassLoader classLoader, String handlerMappingsLocation) {_		Assert.notNull(handlerMappingsLocation, "Handler mappings location must not be null")__		this.classLoader = (classLoader != null ? classLoader : ClassUtils.getDefaultClassLoader())__		this.handlerMappingsLocation = handlerMappingsLocation__	};create,a,new,code,default,namespace,handler,resolver,using,the,supplied,mapping,file,location,param,class,loader,the,link,class,loader,instance,used,to,load,mapping,resources,may,be,code,null,in,which,case,the,thread,context,class,loader,will,be,used,param,handler,mappings,location,the,mapping,file,location;public,default,namespace,handler,resolver,nullable,class,loader,class,loader,string,handler,mappings,location,assert,not,null,handler,mappings,location,handler,mappings,location,must,not,be,null,this,class,loader,class,loader,null,class,loader,class,utils,get,default,class,loader,this,handler,mappings,location,handler,mappings,location
DefaultNamespaceHandlerResolver -> public DefaultNamespaceHandlerResolver(@Nullable ClassLoader classLoader, String handlerMappingsLocation);1516217097;Create a new {@code DefaultNamespaceHandlerResolver} using the_supplied mapping file location._@param classLoader the {@link ClassLoader} instance used to load mapping resources_may be {@code null}, in which case the thread context ClassLoader will be used)_@param handlerMappingsLocation the mapping file location;public DefaultNamespaceHandlerResolver(@Nullable ClassLoader classLoader, String handlerMappingsLocation) {_		Assert.notNull(handlerMappingsLocation, "Handler mappings location must not be null")__		this.classLoader = (classLoader != null ? classLoader : ClassUtils.getDefaultClassLoader())__		this.handlerMappingsLocation = handlerMappingsLocation__	};create,a,new,code,default,namespace,handler,resolver,using,the,supplied,mapping,file,location,param,class,loader,the,link,class,loader,instance,used,to,load,mapping,resources,may,be,code,null,in,which,case,the,thread,context,class,loader,will,be,used,param,handler,mappings,location,the,mapping,file,location;public,default,namespace,handler,resolver,nullable,class,loader,class,loader,string,handler,mappings,location,assert,not,null,handler,mappings,location,handler,mappings,location,must,not,be,null,this,class,loader,class,loader,null,class,loader,class,utils,get,default,class,loader,this,handler,mappings,location,handler,mappings,location
DefaultNamespaceHandlerResolver -> public DefaultNamespaceHandlerResolver(@Nullable ClassLoader classLoader, String handlerMappingsLocation);1530174524;Create a new {@code DefaultNamespaceHandlerResolver} using the_supplied mapping file location._@param classLoader the {@link ClassLoader} instance used to load mapping resources_may be {@code null}, in which case the thread context ClassLoader will be used)_@param handlerMappingsLocation the mapping file location;public DefaultNamespaceHandlerResolver(@Nullable ClassLoader classLoader, String handlerMappingsLocation) {_		Assert.notNull(handlerMappingsLocation, "Handler mappings location must not be null")__		this.classLoader = (classLoader != null ? classLoader : ClassUtils.getDefaultClassLoader())__		this.handlerMappingsLocation = handlerMappingsLocation__	};create,a,new,code,default,namespace,handler,resolver,using,the,supplied,mapping,file,location,param,class,loader,the,link,class,loader,instance,used,to,load,mapping,resources,may,be,code,null,in,which,case,the,thread,context,class,loader,will,be,used,param,handler,mappings,location,the,mapping,file,location;public,default,namespace,handler,resolver,nullable,class,loader,class,loader,string,handler,mappings,location,assert,not,null,handler,mappings,location,handler,mappings,location,must,not,be,null,this,class,loader,class,loader,null,class,loader,class,utils,get,default,class,loader,this,handler,mappings,location,handler,mappings,location
DefaultNamespaceHandlerResolver -> public DefaultNamespaceHandlerResolver(@Nullable ClassLoader classLoader, String handlerMappingsLocation);1532706365;Create a new {@code DefaultNamespaceHandlerResolver} using the_supplied mapping file location._@param classLoader the {@link ClassLoader} instance used to load mapping resources_may be {@code null}, in which case the thread context ClassLoader will be used)_@param handlerMappingsLocation the mapping file location;public DefaultNamespaceHandlerResolver(@Nullable ClassLoader classLoader, String handlerMappingsLocation) {_		Assert.notNull(handlerMappingsLocation, "Handler mappings location must not be null")__		this.classLoader = (classLoader != null ? classLoader : ClassUtils.getDefaultClassLoader())__		this.handlerMappingsLocation = handlerMappingsLocation__	};create,a,new,code,default,namespace,handler,resolver,using,the,supplied,mapping,file,location,param,class,loader,the,link,class,loader,instance,used,to,load,mapping,resources,may,be,code,null,in,which,case,the,thread,context,class,loader,will,be,used,param,handler,mappings,location,the,mapping,file,location;public,default,namespace,handler,resolver,nullable,class,loader,class,loader,string,handler,mappings,location,assert,not,null,handler,mappings,location,handler,mappings,location,must,not,be,null,this,class,loader,class,loader,null,class,loader,class,utils,get,default,class,loader,this,handler,mappings,location,handler,mappings,location
DefaultNamespaceHandlerResolver -> public DefaultNamespaceHandlerResolver(@Nullable ClassLoader classLoader, String handlerMappingsLocation);1532710698;Create a new {@code DefaultNamespaceHandlerResolver} using the_supplied mapping file location._@param classLoader the {@link ClassLoader} instance used to load mapping resources_may be {@code null}, in which case the thread context ClassLoader will be used)_@param handlerMappingsLocation the mapping file location;public DefaultNamespaceHandlerResolver(@Nullable ClassLoader classLoader, String handlerMappingsLocation) {_		Assert.notNull(handlerMappingsLocation, "Handler mappings location must not be null")__		this.classLoader = (classLoader != null ? classLoader : ClassUtils.getDefaultClassLoader())__		this.handlerMappingsLocation = handlerMappingsLocation__	};create,a,new,code,default,namespace,handler,resolver,using,the,supplied,mapping,file,location,param,class,loader,the,link,class,loader,instance,used,to,load,mapping,resources,may,be,code,null,in,which,case,the,thread,context,class,loader,will,be,used,param,handler,mappings,location,the,mapping,file,location;public,default,namespace,handler,resolver,nullable,class,loader,class,loader,string,handler,mappings,location,assert,not,null,handler,mappings,location,handler,mappings,location,must,not,be,null,this,class,loader,class,loader,null,class,loader,class,utils,get,default,class,loader,this,handler,mappings,location,handler,mappings,location
