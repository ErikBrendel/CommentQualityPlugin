# id;timestamp;commentText;codeText;commentWords;codeWords
BeanDefinitionReaderUtils -> public static AbstractBeanDefinition createBeanDefinition( 			String parentName, String className, ClassLoader classLoader) throws ClassNotFoundException;1328020251;Create a new GenericBeanDefinition for the given parent name and class name,_eagerly loading the bean class if a ClassLoader has been specified._@param parentName the name of the parent bean, if any_@param className the name of the bean class, if any_@param classLoader the ClassLoader to use for loading bean classes_(can be <code>null</code> to just register bean classes by name)_@return the bean definition_@throws ClassNotFoundException if the bean class could not be loaded;public static AbstractBeanDefinition createBeanDefinition(_			String parentName, String className, ClassLoader classLoader) throws ClassNotFoundException {__		GenericBeanDefinition bd = new GenericBeanDefinition()__		bd.setParentName(parentName)__		if (className != null) {_			if (classLoader != null) {_				bd.setBeanClass(ClassUtils.forName(className, classLoader))__			}_			else {_				bd.setBeanClassName(className)__			}_		}_		return bd__	};create,a,new,generic,bean,definition,for,the,given,parent,name,and,class,name,eagerly,loading,the,bean,class,if,a,class,loader,has,been,specified,param,parent,name,the,name,of,the,parent,bean,if,any,param,class,name,the,name,of,the,bean,class,if,any,param,class,loader,the,class,loader,to,use,for,loading,bean,classes,can,be,code,null,code,to,just,register,bean,classes,by,name,return,the,bean,definition,throws,class,not,found,exception,if,the,bean,class,could,not,be,loaded;public,static,abstract,bean,definition,create,bean,definition,string,parent,name,string,class,name,class,loader,class,loader,throws,class,not,found,exception,generic,bean,definition,bd,new,generic,bean,definition,bd,set,parent,name,parent,name,if,class,name,null,if,class,loader,null,bd,set,bean,class,class,utils,for,name,class,name,class,loader,else,bd,set,bean,class,name,class,name,return,bd
BeanDefinitionReaderUtils -> public static AbstractBeanDefinition createBeanDefinition( 			String parentName, String className, ClassLoader classLoader) throws ClassNotFoundException;1356735495;Create a new GenericBeanDefinition for the given parent name and class name,_eagerly loading the bean class if a ClassLoader has been specified._@param parentName the name of the parent bean, if any_@param className the name of the bean class, if any_@param classLoader the ClassLoader to use for loading bean classes_(can be {@code null} to just register bean classes by name)_@return the bean definition_@throws ClassNotFoundException if the bean class could not be loaded;public static AbstractBeanDefinition createBeanDefinition(_			String parentName, String className, ClassLoader classLoader) throws ClassNotFoundException {__		GenericBeanDefinition bd = new GenericBeanDefinition()__		bd.setParentName(parentName)__		if (className != null) {_			if (classLoader != null) {_				bd.setBeanClass(ClassUtils.forName(className, classLoader))__			}_			else {_				bd.setBeanClassName(className)__			}_		}_		return bd__	};create,a,new,generic,bean,definition,for,the,given,parent,name,and,class,name,eagerly,loading,the,bean,class,if,a,class,loader,has,been,specified,param,parent,name,the,name,of,the,parent,bean,if,any,param,class,name,the,name,of,the,bean,class,if,any,param,class,loader,the,class,loader,to,use,for,loading,bean,classes,can,be,code,null,to,just,register,bean,classes,by,name,return,the,bean,definition,throws,class,not,found,exception,if,the,bean,class,could,not,be,loaded;public,static,abstract,bean,definition,create,bean,definition,string,parent,name,string,class,name,class,loader,class,loader,throws,class,not,found,exception,generic,bean,definition,bd,new,generic,bean,definition,bd,set,parent,name,parent,name,if,class,name,null,if,class,loader,null,bd,set,bean,class,class,utils,for,name,class,name,class,loader,else,bd,set,bean,class,name,class,name,return,bd
BeanDefinitionReaderUtils -> public static AbstractBeanDefinition createBeanDefinition( 			String parentName, String className, ClassLoader classLoader) throws ClassNotFoundException;1421766121;Create a new GenericBeanDefinition for the given parent name and class name,_eagerly loading the bean class if a ClassLoader has been specified._@param parentName the name of the parent bean, if any_@param className the name of the bean class, if any_@param classLoader the ClassLoader to use for loading bean classes_(can be {@code null} to just register bean classes by name)_@return the bean definition_@throws ClassNotFoundException if the bean class could not be loaded;public static AbstractBeanDefinition createBeanDefinition(_			String parentName, String className, ClassLoader classLoader) throws ClassNotFoundException {__		GenericBeanDefinition bd = new GenericBeanDefinition()__		bd.setParentName(parentName)__		if (className != null) {_			if (classLoader != null) {_				bd.setBeanClass(ClassUtils.forName(className, classLoader))__			}_			else {_				bd.setBeanClassName(className)__			}_		}_		return bd__	};create,a,new,generic,bean,definition,for,the,given,parent,name,and,class,name,eagerly,loading,the,bean,class,if,a,class,loader,has,been,specified,param,parent,name,the,name,of,the,parent,bean,if,any,param,class,name,the,name,of,the,bean,class,if,any,param,class,loader,the,class,loader,to,use,for,loading,bean,classes,can,be,code,null,to,just,register,bean,classes,by,name,return,the,bean,definition,throws,class,not,found,exception,if,the,bean,class,could,not,be,loaded;public,static,abstract,bean,definition,create,bean,definition,string,parent,name,string,class,name,class,loader,class,loader,throws,class,not,found,exception,generic,bean,definition,bd,new,generic,bean,definition,bd,set,parent,name,parent,name,if,class,name,null,if,class,loader,null,bd,set,bean,class,class,utils,for,name,class,name,class,loader,else,bd,set,bean,class,name,class,name,return,bd
BeanDefinitionReaderUtils -> public static AbstractBeanDefinition createBeanDefinition( 			String parentName, String className, ClassLoader classLoader) throws ClassNotFoundException;1482260272;Create a new GenericBeanDefinition for the given parent name and class name,_eagerly loading the bean class if a ClassLoader has been specified._@param parentName the name of the parent bean, if any_@param className the name of the bean class, if any_@param classLoader the ClassLoader to use for loading bean classes_(can be {@code null} to just register bean classes by name)_@return the bean definition_@throws ClassNotFoundException if the bean class could not be loaded;public static AbstractBeanDefinition createBeanDefinition(_			String parentName, String className, ClassLoader classLoader) throws ClassNotFoundException {__		GenericBeanDefinition bd = new GenericBeanDefinition()__		bd.setParentName(parentName)__		if (className != null) {_			if (classLoader != null) {_				bd.setBeanClass(ClassUtils.forName(className, classLoader))__			}_			else {_				bd.setBeanClassName(className)__			}_		}_		return bd__	};create,a,new,generic,bean,definition,for,the,given,parent,name,and,class,name,eagerly,loading,the,bean,class,if,a,class,loader,has,been,specified,param,parent,name,the,name,of,the,parent,bean,if,any,param,class,name,the,name,of,the,bean,class,if,any,param,class,loader,the,class,loader,to,use,for,loading,bean,classes,can,be,code,null,to,just,register,bean,classes,by,name,return,the,bean,definition,throws,class,not,found,exception,if,the,bean,class,could,not,be,loaded;public,static,abstract,bean,definition,create,bean,definition,string,parent,name,string,class,name,class,loader,class,loader,throws,class,not,found,exception,generic,bean,definition,bd,new,generic,bean,definition,bd,set,parent,name,parent,name,if,class,name,null,if,class,loader,null,bd,set,bean,class,class,utils,for,name,class,name,class,loader,else,bd,set,bean,class,name,class,name,return,bd
BeanDefinitionReaderUtils -> public static String registerWithGeneratedName( 			AbstractBeanDefinition definition, BeanDefinitionRegistry registry) 			throws BeanDefinitionStoreException;1328020251;Register the given bean definition with a generated name,_unique within the given bean factory._@param definition the bean definition to generate a bean name for_@param registry the bean factory to register with_@return the generated bean name_@throws BeanDefinitionStoreException if no unique name can be generated_for the given bean definition or the definition cannot be registered;public static String registerWithGeneratedName(_			AbstractBeanDefinition definition, BeanDefinitionRegistry registry)_			throws BeanDefinitionStoreException {__		String generatedName = generateBeanName(definition, registry, false)__		registry.registerBeanDefinition(generatedName, definition)__		return generatedName__	};register,the,given,bean,definition,with,a,generated,name,unique,within,the,given,bean,factory,param,definition,the,bean,definition,to,generate,a,bean,name,for,param,registry,the,bean,factory,to,register,with,return,the,generated,bean,name,throws,bean,definition,store,exception,if,no,unique,name,can,be,generated,for,the,given,bean,definition,or,the,definition,cannot,be,registered;public,static,string,register,with,generated,name,abstract,bean,definition,definition,bean,definition,registry,registry,throws,bean,definition,store,exception,string,generated,name,generate,bean,name,definition,registry,false,registry,register,bean,definition,generated,name,definition,return,generated,name
BeanDefinitionReaderUtils -> public static String registerWithGeneratedName( 			AbstractBeanDefinition definition, BeanDefinitionRegistry registry) 			throws BeanDefinitionStoreException;1356735495;Register the given bean definition with a generated name,_unique within the given bean factory._@param definition the bean definition to generate a bean name for_@param registry the bean factory to register with_@return the generated bean name_@throws BeanDefinitionStoreException if no unique name can be generated_for the given bean definition or the definition cannot be registered;public static String registerWithGeneratedName(_			AbstractBeanDefinition definition, BeanDefinitionRegistry registry)_			throws BeanDefinitionStoreException {__		String generatedName = generateBeanName(definition, registry, false)__		registry.registerBeanDefinition(generatedName, definition)__		return generatedName__	};register,the,given,bean,definition,with,a,generated,name,unique,within,the,given,bean,factory,param,definition,the,bean,definition,to,generate,a,bean,name,for,param,registry,the,bean,factory,to,register,with,return,the,generated,bean,name,throws,bean,definition,store,exception,if,no,unique,name,can,be,generated,for,the,given,bean,definition,or,the,definition,cannot,be,registered;public,static,string,register,with,generated,name,abstract,bean,definition,definition,bean,definition,registry,registry,throws,bean,definition,store,exception,string,generated,name,generate,bean,name,definition,registry,false,registry,register,bean,definition,generated,name,definition,return,generated,name
BeanDefinitionReaderUtils -> public static String registerWithGeneratedName( 			AbstractBeanDefinition definition, BeanDefinitionRegistry registry) 			throws BeanDefinitionStoreException;1421766121;Register the given bean definition with a generated name,_unique within the given bean factory._@param definition the bean definition to generate a bean name for_@param registry the bean factory to register with_@return the generated bean name_@throws BeanDefinitionStoreException if no unique name can be generated_for the given bean definition or the definition cannot be registered;public static String registerWithGeneratedName(_			AbstractBeanDefinition definition, BeanDefinitionRegistry registry)_			throws BeanDefinitionStoreException {__		String generatedName = generateBeanName(definition, registry, false)__		registry.registerBeanDefinition(generatedName, definition)__		return generatedName__	};register,the,given,bean,definition,with,a,generated,name,unique,within,the,given,bean,factory,param,definition,the,bean,definition,to,generate,a,bean,name,for,param,registry,the,bean,factory,to,register,with,return,the,generated,bean,name,throws,bean,definition,store,exception,if,no,unique,name,can,be,generated,for,the,given,bean,definition,or,the,definition,cannot,be,registered;public,static,string,register,with,generated,name,abstract,bean,definition,definition,bean,definition,registry,registry,throws,bean,definition,store,exception,string,generated,name,generate,bean,name,definition,registry,false,registry,register,bean,definition,generated,name,definition,return,generated,name
BeanDefinitionReaderUtils -> public static String registerWithGeneratedName( 			AbstractBeanDefinition definition, BeanDefinitionRegistry registry) 			throws BeanDefinitionStoreException;1482260272;Register the given bean definition with a generated name,_unique within the given bean factory._@param definition the bean definition to generate a bean name for_@param registry the bean factory to register with_@return the generated bean name_@throws BeanDefinitionStoreException if no unique name can be generated_for the given bean definition or the definition cannot be registered;public static String registerWithGeneratedName(_			AbstractBeanDefinition definition, BeanDefinitionRegistry registry)_			throws BeanDefinitionStoreException {__		String generatedName = generateBeanName(definition, registry, false)__		registry.registerBeanDefinition(generatedName, definition)__		return generatedName__	};register,the,given,bean,definition,with,a,generated,name,unique,within,the,given,bean,factory,param,definition,the,bean,definition,to,generate,a,bean,name,for,param,registry,the,bean,factory,to,register,with,return,the,generated,bean,name,throws,bean,definition,store,exception,if,no,unique,name,can,be,generated,for,the,given,bean,definition,or,the,definition,cannot,be,registered;public,static,string,register,with,generated,name,abstract,bean,definition,definition,bean,definition,registry,registry,throws,bean,definition,store,exception,string,generated,name,generate,bean,name,definition,registry,false,registry,register,bean,definition,generated,name,definition,return,generated,name
BeanDefinitionReaderUtils -> public static String registerWithGeneratedName( 			AbstractBeanDefinition definition, BeanDefinitionRegistry registry) 			throws BeanDefinitionStoreException;1495868221;Register the given bean definition with a generated name,_unique within the given bean factory._@param definition the bean definition to generate a bean name for_@param registry the bean factory to register with_@return the generated bean name_@throws BeanDefinitionStoreException if no unique name can be generated_for the given bean definition or the definition cannot be registered;public static String registerWithGeneratedName(_			AbstractBeanDefinition definition, BeanDefinitionRegistry registry)_			throws BeanDefinitionStoreException {__		String generatedName = generateBeanName(definition, registry, false)__		registry.registerBeanDefinition(generatedName, definition)__		return generatedName__	};register,the,given,bean,definition,with,a,generated,name,unique,within,the,given,bean,factory,param,definition,the,bean,definition,to,generate,a,bean,name,for,param,registry,the,bean,factory,to,register,with,return,the,generated,bean,name,throws,bean,definition,store,exception,if,no,unique,name,can,be,generated,for,the,given,bean,definition,or,the,definition,cannot,be,registered;public,static,string,register,with,generated,name,abstract,bean,definition,definition,bean,definition,registry,registry,throws,bean,definition,store,exception,string,generated,name,generate,bean,name,definition,registry,false,registry,register,bean,definition,generated,name,definition,return,generated,name
BeanDefinitionReaderUtils -> public static String registerWithGeneratedName( 			AbstractBeanDefinition definition, BeanDefinitionRegistry registry) 			throws BeanDefinitionStoreException;1530174524;Register the given bean definition with a generated name,_unique within the given bean factory._@param definition the bean definition to generate a bean name for_@param registry the bean factory to register with_@return the generated bean name_@throws BeanDefinitionStoreException if no unique name can be generated_for the given bean definition or the definition cannot be registered;public static String registerWithGeneratedName(_			AbstractBeanDefinition definition, BeanDefinitionRegistry registry)_			throws BeanDefinitionStoreException {__		String generatedName = generateBeanName(definition, registry, false)__		registry.registerBeanDefinition(generatedName, definition)__		return generatedName__	};register,the,given,bean,definition,with,a,generated,name,unique,within,the,given,bean,factory,param,definition,the,bean,definition,to,generate,a,bean,name,for,param,registry,the,bean,factory,to,register,with,return,the,generated,bean,name,throws,bean,definition,store,exception,if,no,unique,name,can,be,generated,for,the,given,bean,definition,or,the,definition,cannot,be,registered;public,static,string,register,with,generated,name,abstract,bean,definition,definition,bean,definition,registry,registry,throws,bean,definition,store,exception,string,generated,name,generate,bean,name,definition,registry,false,registry,register,bean,definition,generated,name,definition,return,generated,name
BeanDefinitionReaderUtils -> public static String registerWithGeneratedName( 			AbstractBeanDefinition definition, BeanDefinitionRegistry registry) 			throws BeanDefinitionStoreException;1530405080;Register the given bean definition with a generated name,_unique within the given bean factory._@param definition the bean definition to generate a bean name for_@param registry the bean factory to register with_@return the generated bean name_@throws BeanDefinitionStoreException if no unique name can be generated_for the given bean definition or the definition cannot be registered;public static String registerWithGeneratedName(_			AbstractBeanDefinition definition, BeanDefinitionRegistry registry)_			throws BeanDefinitionStoreException {__		String generatedName = generateBeanName(definition, registry, false)__		registry.registerBeanDefinition(generatedName, definition)__		return generatedName__	};register,the,given,bean,definition,with,a,generated,name,unique,within,the,given,bean,factory,param,definition,the,bean,definition,to,generate,a,bean,name,for,param,registry,the,bean,factory,to,register,with,return,the,generated,bean,name,throws,bean,definition,store,exception,if,no,unique,name,can,be,generated,for,the,given,bean,definition,or,the,definition,cannot,be,registered;public,static,string,register,with,generated,name,abstract,bean,definition,definition,bean,definition,registry,registry,throws,bean,definition,store,exception,string,generated,name,generate,bean,name,definition,registry,false,registry,register,bean,definition,generated,name,definition,return,generated,name
BeanDefinitionReaderUtils -> public static String registerWithGeneratedName( 			AbstractBeanDefinition definition, BeanDefinitionRegistry registry) 			throws BeanDefinitionStoreException;1536757150;Register the given bean definition with a generated name,_unique within the given bean factory._@param definition the bean definition to generate a bean name for_@param registry the bean factory to register with_@return the generated bean name_@throws BeanDefinitionStoreException if no unique name can be generated_for the given bean definition or the definition cannot be registered;public static String registerWithGeneratedName(_			AbstractBeanDefinition definition, BeanDefinitionRegistry registry)_			throws BeanDefinitionStoreException {__		String generatedName = generateBeanName(definition, registry, false)__		registry.registerBeanDefinition(generatedName, definition)__		return generatedName__	};register,the,given,bean,definition,with,a,generated,name,unique,within,the,given,bean,factory,param,definition,the,bean,definition,to,generate,a,bean,name,for,param,registry,the,bean,factory,to,register,with,return,the,generated,bean,name,throws,bean,definition,store,exception,if,no,unique,name,can,be,generated,for,the,given,bean,definition,or,the,definition,cannot,be,registered;public,static,string,register,with,generated,name,abstract,bean,definition,definition,bean,definition,registry,registry,throws,bean,definition,store,exception,string,generated,name,generate,bean,name,definition,registry,false,registry,register,bean,definition,generated,name,definition,return,generated,name
BeanDefinitionReaderUtils -> public static void registerBeanDefinition( 			BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry) 			throws BeanDefinitionStoreException;1328020251;Register the given bean definition with the given bean factory._@param definitionHolder the bean definition including name and aliases_@param registry the bean factory to register with_@throws BeanDefinitionStoreException if registration failed;public static void registerBeanDefinition(_			BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry)_			throws BeanDefinitionStoreException {__		_		String beanName = definitionHolder.getBeanName()__		registry.registerBeanDefinition(beanName, definitionHolder.getBeanDefinition())___		_		String[] aliases = definitionHolder.getAliases()__		if (aliases != null) {_			for (String aliase : aliases) {_				registry.registerAlias(beanName, aliase)__			}_		}_	};register,the,given,bean,definition,with,the,given,bean,factory,param,definition,holder,the,bean,definition,including,name,and,aliases,param,registry,the,bean,factory,to,register,with,throws,bean,definition,store,exception,if,registration,failed;public,static,void,register,bean,definition,bean,definition,holder,definition,holder,bean,definition,registry,registry,throws,bean,definition,store,exception,string,bean,name,definition,holder,get,bean,name,registry,register,bean,definition,bean,name,definition,holder,get,bean,definition,string,aliases,definition,holder,get,aliases,if,aliases,null,for,string,aliase,aliases,registry,register,alias,bean,name,aliase
BeanDefinitionReaderUtils -> public static void registerBeanDefinition( 			BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry) 			throws BeanDefinitionStoreException;1356735495;Register the given bean definition with the given bean factory._@param definitionHolder the bean definition including name and aliases_@param registry the bean factory to register with_@throws BeanDefinitionStoreException if registration failed;public static void registerBeanDefinition(_			BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry)_			throws BeanDefinitionStoreException {__		_		String beanName = definitionHolder.getBeanName()__		registry.registerBeanDefinition(beanName, definitionHolder.getBeanDefinition())___		_		String[] aliases = definitionHolder.getAliases()__		if (aliases != null) {_			for (String aliase : aliases) {_				registry.registerAlias(beanName, aliase)__			}_		}_	};register,the,given,bean,definition,with,the,given,bean,factory,param,definition,holder,the,bean,definition,including,name,and,aliases,param,registry,the,bean,factory,to,register,with,throws,bean,definition,store,exception,if,registration,failed;public,static,void,register,bean,definition,bean,definition,holder,definition,holder,bean,definition,registry,registry,throws,bean,definition,store,exception,string,bean,name,definition,holder,get,bean,name,registry,register,bean,definition,bean,name,definition,holder,get,bean,definition,string,aliases,definition,holder,get,aliases,if,aliases,null,for,string,aliase,aliases,registry,register,alias,bean,name,aliase
BeanDefinitionReaderUtils -> public static void registerBeanDefinition( 			BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry) 			throws BeanDefinitionStoreException;1421766121;Register the given bean definition with the given bean factory._@param definitionHolder the bean definition including name and aliases_@param registry the bean factory to register with_@throws BeanDefinitionStoreException if registration failed;public static void registerBeanDefinition(_			BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry)_			throws BeanDefinitionStoreException {__		_		String beanName = definitionHolder.getBeanName()__		registry.registerBeanDefinition(beanName, definitionHolder.getBeanDefinition())___		_		String[] aliases = definitionHolder.getAliases()__		if (aliases != null) {_			for (String alias : aliases) {_				registry.registerAlias(beanName, alias)__			}_		}_	};register,the,given,bean,definition,with,the,given,bean,factory,param,definition,holder,the,bean,definition,including,name,and,aliases,param,registry,the,bean,factory,to,register,with,throws,bean,definition,store,exception,if,registration,failed;public,static,void,register,bean,definition,bean,definition,holder,definition,holder,bean,definition,registry,registry,throws,bean,definition,store,exception,string,bean,name,definition,holder,get,bean,name,registry,register,bean,definition,bean,name,definition,holder,get,bean,definition,string,aliases,definition,holder,get,aliases,if,aliases,null,for,string,alias,aliases,registry,register,alias,bean,name,alias
BeanDefinitionReaderUtils -> public static void registerBeanDefinition( 			BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry) 			throws BeanDefinitionStoreException;1482260272;Register the given bean definition with the given bean factory._@param definitionHolder the bean definition including name and aliases_@param registry the bean factory to register with_@throws BeanDefinitionStoreException if registration failed;public static void registerBeanDefinition(_			BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry)_			throws BeanDefinitionStoreException {__		_		String beanName = definitionHolder.getBeanName()__		registry.registerBeanDefinition(beanName, definitionHolder.getBeanDefinition())___		_		String[] aliases = definitionHolder.getAliases()__		if (aliases != null) {_			for (String alias : aliases) {_				registry.registerAlias(beanName, alias)__			}_		}_	};register,the,given,bean,definition,with,the,given,bean,factory,param,definition,holder,the,bean,definition,including,name,and,aliases,param,registry,the,bean,factory,to,register,with,throws,bean,definition,store,exception,if,registration,failed;public,static,void,register,bean,definition,bean,definition,holder,definition,holder,bean,definition,registry,registry,throws,bean,definition,store,exception,string,bean,name,definition,holder,get,bean,name,registry,register,bean,definition,bean,name,definition,holder,get,bean,definition,string,aliases,definition,holder,get,aliases,if,aliases,null,for,string,alias,aliases,registry,register,alias,bean,name,alias
BeanDefinitionReaderUtils -> public static void registerBeanDefinition( 			BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry) 			throws BeanDefinitionStoreException;1495868221;Register the given bean definition with the given bean factory._@param definitionHolder the bean definition including name and aliases_@param registry the bean factory to register with_@throws BeanDefinitionStoreException if registration failed;public static void registerBeanDefinition(_			BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry)_			throws BeanDefinitionStoreException {__		_		String beanName = definitionHolder.getBeanName()__		registry.registerBeanDefinition(beanName, definitionHolder.getBeanDefinition())___		_		String[] aliases = definitionHolder.getAliases()__		if (aliases != null) {_			for (String alias : aliases) {_				registry.registerAlias(beanName, alias)__			}_		}_	};register,the,given,bean,definition,with,the,given,bean,factory,param,definition,holder,the,bean,definition,including,name,and,aliases,param,registry,the,bean,factory,to,register,with,throws,bean,definition,store,exception,if,registration,failed;public,static,void,register,bean,definition,bean,definition,holder,definition,holder,bean,definition,registry,registry,throws,bean,definition,store,exception,string,bean,name,definition,holder,get,bean,name,registry,register,bean,definition,bean,name,definition,holder,get,bean,definition,string,aliases,definition,holder,get,aliases,if,aliases,null,for,string,alias,aliases,registry,register,alias,bean,name,alias
BeanDefinitionReaderUtils -> public static void registerBeanDefinition( 			BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry) 			throws BeanDefinitionStoreException;1530174524;Register the given bean definition with the given bean factory._@param definitionHolder the bean definition including name and aliases_@param registry the bean factory to register with_@throws BeanDefinitionStoreException if registration failed;public static void registerBeanDefinition(_			BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry)_			throws BeanDefinitionStoreException {__		_		String beanName = definitionHolder.getBeanName()__		registry.registerBeanDefinition(beanName, definitionHolder.getBeanDefinition())___		_		String[] aliases = definitionHolder.getAliases()__		if (aliases != null) {_			for (String alias : aliases) {_				registry.registerAlias(beanName, alias)__			}_		}_	};register,the,given,bean,definition,with,the,given,bean,factory,param,definition,holder,the,bean,definition,including,name,and,aliases,param,registry,the,bean,factory,to,register,with,throws,bean,definition,store,exception,if,registration,failed;public,static,void,register,bean,definition,bean,definition,holder,definition,holder,bean,definition,registry,registry,throws,bean,definition,store,exception,string,bean,name,definition,holder,get,bean,name,registry,register,bean,definition,bean,name,definition,holder,get,bean,definition,string,aliases,definition,holder,get,aliases,if,aliases,null,for,string,alias,aliases,registry,register,alias,bean,name,alias
BeanDefinitionReaderUtils -> public static void registerBeanDefinition( 			BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry) 			throws BeanDefinitionStoreException;1530405080;Register the given bean definition with the given bean factory._@param definitionHolder the bean definition including name and aliases_@param registry the bean factory to register with_@throws BeanDefinitionStoreException if registration failed;public static void registerBeanDefinition(_			BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry)_			throws BeanDefinitionStoreException {__		_		String beanName = definitionHolder.getBeanName()__		registry.registerBeanDefinition(beanName, definitionHolder.getBeanDefinition())___		_		String[] aliases = definitionHolder.getAliases()__		if (aliases != null) {_			for (String alias : aliases) {_				registry.registerAlias(beanName, alias)__			}_		}_	};register,the,given,bean,definition,with,the,given,bean,factory,param,definition,holder,the,bean,definition,including,name,and,aliases,param,registry,the,bean,factory,to,register,with,throws,bean,definition,store,exception,if,registration,failed;public,static,void,register,bean,definition,bean,definition,holder,definition,holder,bean,definition,registry,registry,throws,bean,definition,store,exception,string,bean,name,definition,holder,get,bean,name,registry,register,bean,definition,bean,name,definition,holder,get,bean,definition,string,aliases,definition,holder,get,aliases,if,aliases,null,for,string,alias,aliases,registry,register,alias,bean,name,alias
BeanDefinitionReaderUtils -> public static void registerBeanDefinition( 			BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry) 			throws BeanDefinitionStoreException;1536757150;Register the given bean definition with the given bean factory._@param definitionHolder the bean definition including name and aliases_@param registry the bean factory to register with_@throws BeanDefinitionStoreException if registration failed;public static void registerBeanDefinition(_			BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry)_			throws BeanDefinitionStoreException {__		_		String beanName = definitionHolder.getBeanName()__		registry.registerBeanDefinition(beanName, definitionHolder.getBeanDefinition())___		_		String[] aliases = definitionHolder.getAliases()__		if (aliases != null) {_			for (String alias : aliases) {_				registry.registerAlias(beanName, alias)__			}_		}_	};register,the,given,bean,definition,with,the,given,bean,factory,param,definition,holder,the,bean,definition,including,name,and,aliases,param,registry,the,bean,factory,to,register,with,throws,bean,definition,store,exception,if,registration,failed;public,static,void,register,bean,definition,bean,definition,holder,definition,holder,bean,definition,registry,registry,throws,bean,definition,store,exception,string,bean,name,definition,holder,get,bean,name,registry,register,bean,definition,bean,name,definition,holder,get,bean,definition,string,aliases,definition,holder,get,aliases,if,aliases,null,for,string,alias,aliases,registry,register,alias,bean,name,alias
BeanDefinitionReaderUtils -> public static String generateBeanName( 			BeanDefinition definition, BeanDefinitionRegistry registry, boolean isInnerBean) 			throws BeanDefinitionStoreException;1328020251;Generate a bean name for the given bean definition, unique within the_given bean factory._@param definition the bean definition to generate a bean name for_@param registry the bean factory that the definition is going to be_registered with (to check for existing bean names)_@param isInnerBean whether the given bean definition will be registered_as inner bean or as top-level bean (allowing for special name generation_for inner beans versus top-level beans)_@return the generated bean name_@throws BeanDefinitionStoreException if no unique name can be generated_for the given bean definition;public static String generateBeanName(_			BeanDefinition definition, BeanDefinitionRegistry registry, boolean isInnerBean)_			throws BeanDefinitionStoreException {__		String generatedBeanName = definition.getBeanClassName()__		if (generatedBeanName == null) {_			if (definition.getParentName() != null) {_				generatedBeanName = definition.getParentName() + "$child"__			}_			else if (definition.getFactoryBeanName() != null) {_				generatedBeanName = definition.getFactoryBeanName() + "$created"__			}_		}_		if (!StringUtils.hasText(generatedBeanName)) {_			throw new BeanDefinitionStoreException("Unnamed bean definition specifies neither " +_					"'class' nor 'parent' nor 'factory-bean' - can't generate bean name")__		}__		String id = generatedBeanName__		if (isInnerBean) {_			_			id = generatedBeanName + GENERATED_BEAN_NAME_SEPARATOR + ObjectUtils.getIdentityHexString(definition)__		}_		else {_			_			_			int counter = -1__			while (counter == -1 || registry.containsBeanDefinition(id)) {_				counter++__				id = generatedBeanName + GENERATED_BEAN_NAME_SEPARATOR + counter__			}_		}_		return id__	};generate,a,bean,name,for,the,given,bean,definition,unique,within,the,given,bean,factory,param,definition,the,bean,definition,to,generate,a,bean,name,for,param,registry,the,bean,factory,that,the,definition,is,going,to,be,registered,with,to,check,for,existing,bean,names,param,is,inner,bean,whether,the,given,bean,definition,will,be,registered,as,inner,bean,or,as,top,level,bean,allowing,for,special,name,generation,for,inner,beans,versus,top,level,beans,return,the,generated,bean,name,throws,bean,definition,store,exception,if,no,unique,name,can,be,generated,for,the,given,bean,definition;public,static,string,generate,bean,name,bean,definition,definition,bean,definition,registry,registry,boolean,is,inner,bean,throws,bean,definition,store,exception,string,generated,bean,name,definition,get,bean,class,name,if,generated,bean,name,null,if,definition,get,parent,name,null,generated,bean,name,definition,get,parent,name,child,else,if,definition,get,factory,bean,name,null,generated,bean,name,definition,get,factory,bean,name,created,if,string,utils,has,text,generated,bean,name,throw,new,bean,definition,store,exception,unnamed,bean,definition,specifies,neither,class,nor,parent,nor,factory,bean,can,t,generate,bean,name,string,id,generated,bean,name,if,is,inner,bean,id,generated,bean,name,object,utils,get,identity,hex,string,definition,else,int,counter,1,while,counter,1,registry,contains,bean,definition,id,counter,id,generated,bean,name,counter,return,id
BeanDefinitionReaderUtils -> public static String generateBeanName( 			BeanDefinition definition, BeanDefinitionRegistry registry, boolean isInnerBean) 			throws BeanDefinitionStoreException;1356735495;Generate a bean name for the given bean definition, unique within the_given bean factory._@param definition the bean definition to generate a bean name for_@param registry the bean factory that the definition is going to be_registered with (to check for existing bean names)_@param isInnerBean whether the given bean definition will be registered_as inner bean or as top-level bean (allowing for special name generation_for inner beans versus top-level beans)_@return the generated bean name_@throws BeanDefinitionStoreException if no unique name can be generated_for the given bean definition;public static String generateBeanName(_			BeanDefinition definition, BeanDefinitionRegistry registry, boolean isInnerBean)_			throws BeanDefinitionStoreException {__		String generatedBeanName = definition.getBeanClassName()__		if (generatedBeanName == null) {_			if (definition.getParentName() != null) {_				generatedBeanName = definition.getParentName() + "$child"__			}_			else if (definition.getFactoryBeanName() != null) {_				generatedBeanName = definition.getFactoryBeanName() + "$created"__			}_		}_		if (!StringUtils.hasText(generatedBeanName)) {_			throw new BeanDefinitionStoreException("Unnamed bean definition specifies neither " +_					"'class' nor 'parent' nor 'factory-bean' - can't generate bean name")__		}__		String id = generatedBeanName__		if (isInnerBean) {_			_			id = generatedBeanName + GENERATED_BEAN_NAME_SEPARATOR + ObjectUtils.getIdentityHexString(definition)__		}_		else {_			_			_			int counter = -1__			while (counter == -1 || registry.containsBeanDefinition(id)) {_				counter++__				id = generatedBeanName + GENERATED_BEAN_NAME_SEPARATOR + counter__			}_		}_		return id__	};generate,a,bean,name,for,the,given,bean,definition,unique,within,the,given,bean,factory,param,definition,the,bean,definition,to,generate,a,bean,name,for,param,registry,the,bean,factory,that,the,definition,is,going,to,be,registered,with,to,check,for,existing,bean,names,param,is,inner,bean,whether,the,given,bean,definition,will,be,registered,as,inner,bean,or,as,top,level,bean,allowing,for,special,name,generation,for,inner,beans,versus,top,level,beans,return,the,generated,bean,name,throws,bean,definition,store,exception,if,no,unique,name,can,be,generated,for,the,given,bean,definition;public,static,string,generate,bean,name,bean,definition,definition,bean,definition,registry,registry,boolean,is,inner,bean,throws,bean,definition,store,exception,string,generated,bean,name,definition,get,bean,class,name,if,generated,bean,name,null,if,definition,get,parent,name,null,generated,bean,name,definition,get,parent,name,child,else,if,definition,get,factory,bean,name,null,generated,bean,name,definition,get,factory,bean,name,created,if,string,utils,has,text,generated,bean,name,throw,new,bean,definition,store,exception,unnamed,bean,definition,specifies,neither,class,nor,parent,nor,factory,bean,can,t,generate,bean,name,string,id,generated,bean,name,if,is,inner,bean,id,generated,bean,name,object,utils,get,identity,hex,string,definition,else,int,counter,1,while,counter,1,registry,contains,bean,definition,id,counter,id,generated,bean,name,counter,return,id
BeanDefinitionReaderUtils -> public static String generateBeanName( 			BeanDefinition definition, BeanDefinitionRegistry registry, boolean isInnerBean) 			throws BeanDefinitionStoreException;1421766121;Generate a bean name for the given bean definition, unique within the_given bean factory._@param definition the bean definition to generate a bean name for_@param registry the bean factory that the definition is going to be_registered with (to check for existing bean names)_@param isInnerBean whether the given bean definition will be registered_as inner bean or as top-level bean (allowing for special name generation_for inner beans versus top-level beans)_@return the generated bean name_@throws BeanDefinitionStoreException if no unique name can be generated_for the given bean definition;public static String generateBeanName(_			BeanDefinition definition, BeanDefinitionRegistry registry, boolean isInnerBean)_			throws BeanDefinitionStoreException {__		String generatedBeanName = definition.getBeanClassName()__		if (generatedBeanName == null) {_			if (definition.getParentName() != null) {_				generatedBeanName = definition.getParentName() + "$child"__			}_			else if (definition.getFactoryBeanName() != null) {_				generatedBeanName = definition.getFactoryBeanName() + "$created"__			}_		}_		if (!StringUtils.hasText(generatedBeanName)) {_			throw new BeanDefinitionStoreException("Unnamed bean definition specifies neither " +_					"'class' nor 'parent' nor 'factory-bean' - can't generate bean name")__		}__		String id = generatedBeanName__		if (isInnerBean) {_			_			id = generatedBeanName + GENERATED_BEAN_NAME_SEPARATOR + ObjectUtils.getIdentityHexString(definition)__		}_		else {_			_			_			int counter = -1__			while (counter == -1 || registry.containsBeanDefinition(id)) {_				counter++__				id = generatedBeanName + GENERATED_BEAN_NAME_SEPARATOR + counter__			}_		}_		return id__	};generate,a,bean,name,for,the,given,bean,definition,unique,within,the,given,bean,factory,param,definition,the,bean,definition,to,generate,a,bean,name,for,param,registry,the,bean,factory,that,the,definition,is,going,to,be,registered,with,to,check,for,existing,bean,names,param,is,inner,bean,whether,the,given,bean,definition,will,be,registered,as,inner,bean,or,as,top,level,bean,allowing,for,special,name,generation,for,inner,beans,versus,top,level,beans,return,the,generated,bean,name,throws,bean,definition,store,exception,if,no,unique,name,can,be,generated,for,the,given,bean,definition;public,static,string,generate,bean,name,bean,definition,definition,bean,definition,registry,registry,boolean,is,inner,bean,throws,bean,definition,store,exception,string,generated,bean,name,definition,get,bean,class,name,if,generated,bean,name,null,if,definition,get,parent,name,null,generated,bean,name,definition,get,parent,name,child,else,if,definition,get,factory,bean,name,null,generated,bean,name,definition,get,factory,bean,name,created,if,string,utils,has,text,generated,bean,name,throw,new,bean,definition,store,exception,unnamed,bean,definition,specifies,neither,class,nor,parent,nor,factory,bean,can,t,generate,bean,name,string,id,generated,bean,name,if,is,inner,bean,id,generated,bean,name,object,utils,get,identity,hex,string,definition,else,int,counter,1,while,counter,1,registry,contains,bean,definition,id,counter,id,generated,bean,name,counter,return,id
BeanDefinitionReaderUtils -> public static String generateBeanName( 			BeanDefinition definition, BeanDefinitionRegistry registry, boolean isInnerBean) 			throws BeanDefinitionStoreException;1482260272;Generate a bean name for the given bean definition, unique within the_given bean factory._@param definition the bean definition to generate a bean name for_@param registry the bean factory that the definition is going to be_registered with (to check for existing bean names)_@param isInnerBean whether the given bean definition will be registered_as inner bean or as top-level bean (allowing for special name generation_for inner beans versus top-level beans)_@return the generated bean name_@throws BeanDefinitionStoreException if no unique name can be generated_for the given bean definition;public static String generateBeanName(_			BeanDefinition definition, BeanDefinitionRegistry registry, boolean isInnerBean)_			throws BeanDefinitionStoreException {__		String generatedBeanName = definition.getBeanClassName()__		if (generatedBeanName == null) {_			if (definition.getParentName() != null) {_				generatedBeanName = definition.getParentName() + "$child"__			}_			else if (definition.getFactoryBeanName() != null) {_				generatedBeanName = definition.getFactoryBeanName() + "$created"__			}_		}_		if (!StringUtils.hasText(generatedBeanName)) {_			throw new BeanDefinitionStoreException("Unnamed bean definition specifies neither " +_					"'class' nor 'parent' nor 'factory-bean' - can't generate bean name")__		}__		String id = generatedBeanName__		if (isInnerBean) {_			_			id = generatedBeanName + GENERATED_BEAN_NAME_SEPARATOR + ObjectUtils.getIdentityHexString(definition)__		}_		else {_			_			_			int counter = -1__			while (counter == -1 || registry.containsBeanDefinition(id)) {_				counter++__				id = generatedBeanName + GENERATED_BEAN_NAME_SEPARATOR + counter__			}_		}_		return id__	};generate,a,bean,name,for,the,given,bean,definition,unique,within,the,given,bean,factory,param,definition,the,bean,definition,to,generate,a,bean,name,for,param,registry,the,bean,factory,that,the,definition,is,going,to,be,registered,with,to,check,for,existing,bean,names,param,is,inner,bean,whether,the,given,bean,definition,will,be,registered,as,inner,bean,or,as,top,level,bean,allowing,for,special,name,generation,for,inner,beans,versus,top,level,beans,return,the,generated,bean,name,throws,bean,definition,store,exception,if,no,unique,name,can,be,generated,for,the,given,bean,definition;public,static,string,generate,bean,name,bean,definition,definition,bean,definition,registry,registry,boolean,is,inner,bean,throws,bean,definition,store,exception,string,generated,bean,name,definition,get,bean,class,name,if,generated,bean,name,null,if,definition,get,parent,name,null,generated,bean,name,definition,get,parent,name,child,else,if,definition,get,factory,bean,name,null,generated,bean,name,definition,get,factory,bean,name,created,if,string,utils,has,text,generated,bean,name,throw,new,bean,definition,store,exception,unnamed,bean,definition,specifies,neither,class,nor,parent,nor,factory,bean,can,t,generate,bean,name,string,id,generated,bean,name,if,is,inner,bean,id,generated,bean,name,object,utils,get,identity,hex,string,definition,else,int,counter,1,while,counter,1,registry,contains,bean,definition,id,counter,id,generated,bean,name,counter,return,id
BeanDefinitionReaderUtils -> public static String generateBeanName( 			BeanDefinition definition, BeanDefinitionRegistry registry, boolean isInnerBean) 			throws BeanDefinitionStoreException;1495868221;Generate a bean name for the given bean definition, unique within the_given bean factory._@param definition the bean definition to generate a bean name for_@param registry the bean factory that the definition is going to be_registered with (to check for existing bean names)_@param isInnerBean whether the given bean definition will be registered_as inner bean or as top-level bean (allowing for special name generation_for inner beans versus top-level beans)_@return the generated bean name_@throws BeanDefinitionStoreException if no unique name can be generated_for the given bean definition;public static String generateBeanName(_			BeanDefinition definition, BeanDefinitionRegistry registry, boolean isInnerBean)_			throws BeanDefinitionStoreException {__		String generatedBeanName = definition.getBeanClassName()__		if (generatedBeanName == null) {_			if (definition.getParentName() != null) {_				generatedBeanName = definition.getParentName() + "$child"__			}_			else if (definition.getFactoryBeanName() != null) {_				generatedBeanName = definition.getFactoryBeanName() + "$created"__			}_		}_		if (!StringUtils.hasText(generatedBeanName)) {_			throw new BeanDefinitionStoreException("Unnamed bean definition specifies neither " +_					"'class' nor 'parent' nor 'factory-bean' - can't generate bean name")__		}__		String id = generatedBeanName__		if (isInnerBean) {_			_			id = generatedBeanName + GENERATED_BEAN_NAME_SEPARATOR + ObjectUtils.getIdentityHexString(definition)__		}_		else {_			_			_			int counter = -1__			while (counter == -1 || registry.containsBeanDefinition(id)) {_				counter++__				id = generatedBeanName + GENERATED_BEAN_NAME_SEPARATOR + counter__			}_		}_		return id__	};generate,a,bean,name,for,the,given,bean,definition,unique,within,the,given,bean,factory,param,definition,the,bean,definition,to,generate,a,bean,name,for,param,registry,the,bean,factory,that,the,definition,is,going,to,be,registered,with,to,check,for,existing,bean,names,param,is,inner,bean,whether,the,given,bean,definition,will,be,registered,as,inner,bean,or,as,top,level,bean,allowing,for,special,name,generation,for,inner,beans,versus,top,level,beans,return,the,generated,bean,name,throws,bean,definition,store,exception,if,no,unique,name,can,be,generated,for,the,given,bean,definition;public,static,string,generate,bean,name,bean,definition,definition,bean,definition,registry,registry,boolean,is,inner,bean,throws,bean,definition,store,exception,string,generated,bean,name,definition,get,bean,class,name,if,generated,bean,name,null,if,definition,get,parent,name,null,generated,bean,name,definition,get,parent,name,child,else,if,definition,get,factory,bean,name,null,generated,bean,name,definition,get,factory,bean,name,created,if,string,utils,has,text,generated,bean,name,throw,new,bean,definition,store,exception,unnamed,bean,definition,specifies,neither,class,nor,parent,nor,factory,bean,can,t,generate,bean,name,string,id,generated,bean,name,if,is,inner,bean,id,generated,bean,name,object,utils,get,identity,hex,string,definition,else,int,counter,1,while,counter,1,registry,contains,bean,definition,id,counter,id,generated,bean,name,counter,return,id
BeanDefinitionReaderUtils -> public static String generateBeanName( 			BeanDefinition definition, BeanDefinitionRegistry registry, boolean isInnerBean) 			throws BeanDefinitionStoreException;1530174524;Generate a bean name for the given bean definition, unique within the_given bean factory._@param definition the bean definition to generate a bean name for_@param registry the bean factory that the definition is going to be_registered with (to check for existing bean names)_@param isInnerBean whether the given bean definition will be registered_as inner bean or as top-level bean (allowing for special name generation_for inner beans versus top-level beans)_@return the generated bean name_@throws BeanDefinitionStoreException if no unique name can be generated_for the given bean definition;public static String generateBeanName(_			BeanDefinition definition, BeanDefinitionRegistry registry, boolean isInnerBean)_			throws BeanDefinitionStoreException {__		String generatedBeanName = definition.getBeanClassName()__		if (generatedBeanName == null) {_			if (definition.getParentName() != null) {_				generatedBeanName = definition.getParentName() + "$child"__			}_			else if (definition.getFactoryBeanName() != null) {_				generatedBeanName = definition.getFactoryBeanName() + "$created"__			}_		}_		if (!StringUtils.hasText(generatedBeanName)) {_			throw new BeanDefinitionStoreException("Unnamed bean definition specifies neither " +_					"'class' nor 'parent' nor 'factory-bean' - can't generate bean name")__		}__		String id = generatedBeanName__		if (isInnerBean) {_			_			id = generatedBeanName + GENERATED_BEAN_NAME_SEPARATOR + ObjectUtils.getIdentityHexString(definition)__		}_		else {_			_			_			int counter = -1__			while (counter == -1 || registry.containsBeanDefinition(id)) {_				counter++__				id = generatedBeanName + GENERATED_BEAN_NAME_SEPARATOR + counter__			}_		}_		return id__	};generate,a,bean,name,for,the,given,bean,definition,unique,within,the,given,bean,factory,param,definition,the,bean,definition,to,generate,a,bean,name,for,param,registry,the,bean,factory,that,the,definition,is,going,to,be,registered,with,to,check,for,existing,bean,names,param,is,inner,bean,whether,the,given,bean,definition,will,be,registered,as,inner,bean,or,as,top,level,bean,allowing,for,special,name,generation,for,inner,beans,versus,top,level,beans,return,the,generated,bean,name,throws,bean,definition,store,exception,if,no,unique,name,can,be,generated,for,the,given,bean,definition;public,static,string,generate,bean,name,bean,definition,definition,bean,definition,registry,registry,boolean,is,inner,bean,throws,bean,definition,store,exception,string,generated,bean,name,definition,get,bean,class,name,if,generated,bean,name,null,if,definition,get,parent,name,null,generated,bean,name,definition,get,parent,name,child,else,if,definition,get,factory,bean,name,null,generated,bean,name,definition,get,factory,bean,name,created,if,string,utils,has,text,generated,bean,name,throw,new,bean,definition,store,exception,unnamed,bean,definition,specifies,neither,class,nor,parent,nor,factory,bean,can,t,generate,bean,name,string,id,generated,bean,name,if,is,inner,bean,id,generated,bean,name,object,utils,get,identity,hex,string,definition,else,int,counter,1,while,counter,1,registry,contains,bean,definition,id,counter,id,generated,bean,name,counter,return,id
BeanDefinitionReaderUtils -> public static String generateBeanName( 			BeanDefinition definition, BeanDefinitionRegistry registry, boolean isInnerBean) 			throws BeanDefinitionStoreException;1530405080;Generate a bean name for the given bean definition, unique within the_given bean factory._@param definition the bean definition to generate a bean name for_@param registry the bean factory that the definition is going to be_registered with (to check for existing bean names)_@param isInnerBean whether the given bean definition will be registered_as inner bean or as top-level bean (allowing for special name generation_for inner beans versus top-level beans)_@return the generated bean name_@throws BeanDefinitionStoreException if no unique name can be generated_for the given bean definition;public static String generateBeanName(_			BeanDefinition definition, BeanDefinitionRegistry registry, boolean isInnerBean)_			throws BeanDefinitionStoreException {__		String generatedBeanName = definition.getBeanClassName()__		if (generatedBeanName == null) {_			if (definition.getParentName() != null) {_				generatedBeanName = definition.getParentName() + "$child"__			}_			else if (definition.getFactoryBeanName() != null) {_				generatedBeanName = definition.getFactoryBeanName() + "$created"__			}_		}_		if (!StringUtils.hasText(generatedBeanName)) {_			throw new BeanDefinitionStoreException("Unnamed bean definition specifies neither " +_					"'class' nor 'parent' nor 'factory-bean' - can't generate bean name")__		}__		String id = generatedBeanName__		if (isInnerBean) {_			_			id = generatedBeanName + GENERATED_BEAN_NAME_SEPARATOR + ObjectUtils.getIdentityHexString(definition)__		}_		else {_			_			_			int counter = -1__			while (counter == -1 || registry.containsBeanDefinition(id)) {_				counter++__				id = generatedBeanName + GENERATED_BEAN_NAME_SEPARATOR + counter__			}_		}_		return id__	};generate,a,bean,name,for,the,given,bean,definition,unique,within,the,given,bean,factory,param,definition,the,bean,definition,to,generate,a,bean,name,for,param,registry,the,bean,factory,that,the,definition,is,going,to,be,registered,with,to,check,for,existing,bean,names,param,is,inner,bean,whether,the,given,bean,definition,will,be,registered,as,inner,bean,or,as,top,level,bean,allowing,for,special,name,generation,for,inner,beans,versus,top,level,beans,return,the,generated,bean,name,throws,bean,definition,store,exception,if,no,unique,name,can,be,generated,for,the,given,bean,definition;public,static,string,generate,bean,name,bean,definition,definition,bean,definition,registry,registry,boolean,is,inner,bean,throws,bean,definition,store,exception,string,generated,bean,name,definition,get,bean,class,name,if,generated,bean,name,null,if,definition,get,parent,name,null,generated,bean,name,definition,get,parent,name,child,else,if,definition,get,factory,bean,name,null,generated,bean,name,definition,get,factory,bean,name,created,if,string,utils,has,text,generated,bean,name,throw,new,bean,definition,store,exception,unnamed,bean,definition,specifies,neither,class,nor,parent,nor,factory,bean,can,t,generate,bean,name,string,id,generated,bean,name,if,is,inner,bean,id,generated,bean,name,object,utils,get,identity,hex,string,definition,else,int,counter,1,while,counter,1,registry,contains,bean,definition,id,counter,id,generated,bean,name,counter,return,id
BeanDefinitionReaderUtils -> public static String generateBeanName( 			BeanDefinition definition, BeanDefinitionRegistry registry, boolean isInnerBean) 			throws BeanDefinitionStoreException;1536757150;Generate a bean name for the given bean definition, unique within the_given bean factory._@param definition the bean definition to generate a bean name for_@param registry the bean factory that the definition is going to be_registered with (to check for existing bean names)_@param isInnerBean whether the given bean definition will be registered_as inner bean or as top-level bean (allowing for special name generation_for inner beans versus top-level beans)_@return the generated bean name_@throws BeanDefinitionStoreException if no unique name can be generated_for the given bean definition;public static String generateBeanName(_			BeanDefinition definition, BeanDefinitionRegistry registry, boolean isInnerBean)_			throws BeanDefinitionStoreException {__		String generatedBeanName = definition.getBeanClassName()__		if (generatedBeanName == null) {_			if (definition.getParentName() != null) {_				generatedBeanName = definition.getParentName() + "$child"__			}_			else if (definition.getFactoryBeanName() != null) {_				generatedBeanName = definition.getFactoryBeanName() + "$created"__			}_		}_		if (!StringUtils.hasText(generatedBeanName)) {_			throw new BeanDefinitionStoreException("Unnamed bean definition specifies neither " +_					"'class' nor 'parent' nor 'factory-bean' - can't generate bean name")__		}__		String id = generatedBeanName__		if (isInnerBean) {_			_			id = generatedBeanName + GENERATED_BEAN_NAME_SEPARATOR + ObjectUtils.getIdentityHexString(definition)__		}_		else {_			_			return uniqueBeanName(generatedBeanName, registry)__		}_		return id__	};generate,a,bean,name,for,the,given,bean,definition,unique,within,the,given,bean,factory,param,definition,the,bean,definition,to,generate,a,bean,name,for,param,registry,the,bean,factory,that,the,definition,is,going,to,be,registered,with,to,check,for,existing,bean,names,param,is,inner,bean,whether,the,given,bean,definition,will,be,registered,as,inner,bean,or,as,top,level,bean,allowing,for,special,name,generation,for,inner,beans,versus,top,level,beans,return,the,generated,bean,name,throws,bean,definition,store,exception,if,no,unique,name,can,be,generated,for,the,given,bean,definition;public,static,string,generate,bean,name,bean,definition,definition,bean,definition,registry,registry,boolean,is,inner,bean,throws,bean,definition,store,exception,string,generated,bean,name,definition,get,bean,class,name,if,generated,bean,name,null,if,definition,get,parent,name,null,generated,bean,name,definition,get,parent,name,child,else,if,definition,get,factory,bean,name,null,generated,bean,name,definition,get,factory,bean,name,created,if,string,utils,has,text,generated,bean,name,throw,new,bean,definition,store,exception,unnamed,bean,definition,specifies,neither,class,nor,parent,nor,factory,bean,can,t,generate,bean,name,string,id,generated,bean,name,if,is,inner,bean,id,generated,bean,name,object,utils,get,identity,hex,string,definition,else,return,unique,bean,name,generated,bean,name,registry,return,id
BeanDefinitionReaderUtils -> public static String generateBeanName(BeanDefinition beanDefinition, BeanDefinitionRegistry registry) 			throws BeanDefinitionStoreException;1328020251;Generate a bean name for the given top-level bean definition,_unique within the given bean factory._@param beanDefinition the bean definition to generate a bean name for_@param registry the bean factory that the definition is going to be_registered with (to check for existing bean names)_@return the generated bean name_@throws BeanDefinitionStoreException if no unique name can be generated_for the given bean definition;public static String generateBeanName(BeanDefinition beanDefinition, BeanDefinitionRegistry registry)_			throws BeanDefinitionStoreException {__		return generateBeanName(beanDefinition, registry, false)__	};generate,a,bean,name,for,the,given,top,level,bean,definition,unique,within,the,given,bean,factory,param,bean,definition,the,bean,definition,to,generate,a,bean,name,for,param,registry,the,bean,factory,that,the,definition,is,going,to,be,registered,with,to,check,for,existing,bean,names,return,the,generated,bean,name,throws,bean,definition,store,exception,if,no,unique,name,can,be,generated,for,the,given,bean,definition;public,static,string,generate,bean,name,bean,definition,bean,definition,bean,definition,registry,registry,throws,bean,definition,store,exception,return,generate,bean,name,bean,definition,registry,false
BeanDefinitionReaderUtils -> public static String generateBeanName(BeanDefinition beanDefinition, BeanDefinitionRegistry registry) 			throws BeanDefinitionStoreException;1356735495;Generate a bean name for the given top-level bean definition,_unique within the given bean factory._@param beanDefinition the bean definition to generate a bean name for_@param registry the bean factory that the definition is going to be_registered with (to check for existing bean names)_@return the generated bean name_@throws BeanDefinitionStoreException if no unique name can be generated_for the given bean definition;public static String generateBeanName(BeanDefinition beanDefinition, BeanDefinitionRegistry registry)_			throws BeanDefinitionStoreException {__		return generateBeanName(beanDefinition, registry, false)__	};generate,a,bean,name,for,the,given,top,level,bean,definition,unique,within,the,given,bean,factory,param,bean,definition,the,bean,definition,to,generate,a,bean,name,for,param,registry,the,bean,factory,that,the,definition,is,going,to,be,registered,with,to,check,for,existing,bean,names,return,the,generated,bean,name,throws,bean,definition,store,exception,if,no,unique,name,can,be,generated,for,the,given,bean,definition;public,static,string,generate,bean,name,bean,definition,bean,definition,bean,definition,registry,registry,throws,bean,definition,store,exception,return,generate,bean,name,bean,definition,registry,false
BeanDefinitionReaderUtils -> public static String generateBeanName(BeanDefinition beanDefinition, BeanDefinitionRegistry registry) 			throws BeanDefinitionStoreException;1421766121;Generate a bean name for the given top-level bean definition,_unique within the given bean factory._@param beanDefinition the bean definition to generate a bean name for_@param registry the bean factory that the definition is going to be_registered with (to check for existing bean names)_@return the generated bean name_@throws BeanDefinitionStoreException if no unique name can be generated_for the given bean definition;public static String generateBeanName(BeanDefinition beanDefinition, BeanDefinitionRegistry registry)_			throws BeanDefinitionStoreException {__		return generateBeanName(beanDefinition, registry, false)__	};generate,a,bean,name,for,the,given,top,level,bean,definition,unique,within,the,given,bean,factory,param,bean,definition,the,bean,definition,to,generate,a,bean,name,for,param,registry,the,bean,factory,that,the,definition,is,going,to,be,registered,with,to,check,for,existing,bean,names,return,the,generated,bean,name,throws,bean,definition,store,exception,if,no,unique,name,can,be,generated,for,the,given,bean,definition;public,static,string,generate,bean,name,bean,definition,bean,definition,bean,definition,registry,registry,throws,bean,definition,store,exception,return,generate,bean,name,bean,definition,registry,false
BeanDefinitionReaderUtils -> public static String generateBeanName(BeanDefinition beanDefinition, BeanDefinitionRegistry registry) 			throws BeanDefinitionStoreException;1482260272;Generate a bean name for the given top-level bean definition,_unique within the given bean factory._@param beanDefinition the bean definition to generate a bean name for_@param registry the bean factory that the definition is going to be_registered with (to check for existing bean names)_@return the generated bean name_@throws BeanDefinitionStoreException if no unique name can be generated_for the given bean definition_@see #generateBeanName(BeanDefinition, BeanDefinitionRegistry, boolean);public static String generateBeanName(BeanDefinition beanDefinition, BeanDefinitionRegistry registry)_			throws BeanDefinitionStoreException {__		return generateBeanName(beanDefinition, registry, false)__	};generate,a,bean,name,for,the,given,top,level,bean,definition,unique,within,the,given,bean,factory,param,bean,definition,the,bean,definition,to,generate,a,bean,name,for,param,registry,the,bean,factory,that,the,definition,is,going,to,be,registered,with,to,check,for,existing,bean,names,return,the,generated,bean,name,throws,bean,definition,store,exception,if,no,unique,name,can,be,generated,for,the,given,bean,definition,see,generate,bean,name,bean,definition,bean,definition,registry,boolean;public,static,string,generate,bean,name,bean,definition,bean,definition,bean,definition,registry,registry,throws,bean,definition,store,exception,return,generate,bean,name,bean,definition,registry,false
BeanDefinitionReaderUtils -> public static String generateBeanName(BeanDefinition beanDefinition, BeanDefinitionRegistry registry) 			throws BeanDefinitionStoreException;1495868221;Generate a bean name for the given top-level bean definition,_unique within the given bean factory._@param beanDefinition the bean definition to generate a bean name for_@param registry the bean factory that the definition is going to be_registered with (to check for existing bean names)_@return the generated bean name_@throws BeanDefinitionStoreException if no unique name can be generated_for the given bean definition_@see #generateBeanName(BeanDefinition, BeanDefinitionRegistry, boolean);public static String generateBeanName(BeanDefinition beanDefinition, BeanDefinitionRegistry registry)_			throws BeanDefinitionStoreException {__		return generateBeanName(beanDefinition, registry, false)__	};generate,a,bean,name,for,the,given,top,level,bean,definition,unique,within,the,given,bean,factory,param,bean,definition,the,bean,definition,to,generate,a,bean,name,for,param,registry,the,bean,factory,that,the,definition,is,going,to,be,registered,with,to,check,for,existing,bean,names,return,the,generated,bean,name,throws,bean,definition,store,exception,if,no,unique,name,can,be,generated,for,the,given,bean,definition,see,generate,bean,name,bean,definition,bean,definition,registry,boolean;public,static,string,generate,bean,name,bean,definition,bean,definition,bean,definition,registry,registry,throws,bean,definition,store,exception,return,generate,bean,name,bean,definition,registry,false
BeanDefinitionReaderUtils -> public static String generateBeanName(BeanDefinition beanDefinition, BeanDefinitionRegistry registry) 			throws BeanDefinitionStoreException;1530174524;Generate a bean name for the given top-level bean definition,_unique within the given bean factory._@param beanDefinition the bean definition to generate a bean name for_@param registry the bean factory that the definition is going to be_registered with (to check for existing bean names)_@return the generated bean name_@throws BeanDefinitionStoreException if no unique name can be generated_for the given bean definition_@see #generateBeanName(BeanDefinition, BeanDefinitionRegistry, boolean);public static String generateBeanName(BeanDefinition beanDefinition, BeanDefinitionRegistry registry)_			throws BeanDefinitionStoreException {__		return generateBeanName(beanDefinition, registry, false)__	};generate,a,bean,name,for,the,given,top,level,bean,definition,unique,within,the,given,bean,factory,param,bean,definition,the,bean,definition,to,generate,a,bean,name,for,param,registry,the,bean,factory,that,the,definition,is,going,to,be,registered,with,to,check,for,existing,bean,names,return,the,generated,bean,name,throws,bean,definition,store,exception,if,no,unique,name,can,be,generated,for,the,given,bean,definition,see,generate,bean,name,bean,definition,bean,definition,registry,boolean;public,static,string,generate,bean,name,bean,definition,bean,definition,bean,definition,registry,registry,throws,bean,definition,store,exception,return,generate,bean,name,bean,definition,registry,false
BeanDefinitionReaderUtils -> public static String generateBeanName(BeanDefinition beanDefinition, BeanDefinitionRegistry registry) 			throws BeanDefinitionStoreException;1530405080;Generate a bean name for the given top-level bean definition,_unique within the given bean factory._@param beanDefinition the bean definition to generate a bean name for_@param registry the bean factory that the definition is going to be_registered with (to check for existing bean names)_@return the generated bean name_@throws BeanDefinitionStoreException if no unique name can be generated_for the given bean definition_@see #generateBeanName(BeanDefinition, BeanDefinitionRegistry, boolean);public static String generateBeanName(BeanDefinition beanDefinition, BeanDefinitionRegistry registry)_			throws BeanDefinitionStoreException {__		return generateBeanName(beanDefinition, registry, false)__	};generate,a,bean,name,for,the,given,top,level,bean,definition,unique,within,the,given,bean,factory,param,bean,definition,the,bean,definition,to,generate,a,bean,name,for,param,registry,the,bean,factory,that,the,definition,is,going,to,be,registered,with,to,check,for,existing,bean,names,return,the,generated,bean,name,throws,bean,definition,store,exception,if,no,unique,name,can,be,generated,for,the,given,bean,definition,see,generate,bean,name,bean,definition,bean,definition,registry,boolean;public,static,string,generate,bean,name,bean,definition,bean,definition,bean,definition,registry,registry,throws,bean,definition,store,exception,return,generate,bean,name,bean,definition,registry,false
BeanDefinitionReaderUtils -> public static String generateBeanName(BeanDefinition beanDefinition, BeanDefinitionRegistry registry) 			throws BeanDefinitionStoreException;1536757150;Generate a bean name for the given top-level bean definition,_unique within the given bean factory._@param beanDefinition the bean definition to generate a bean name for_@param registry the bean factory that the definition is going to be_registered with (to check for existing bean names)_@return the generated bean name_@throws BeanDefinitionStoreException if no unique name can be generated_for the given bean definition_@see #generateBeanName(BeanDefinition, BeanDefinitionRegistry, boolean);public static String generateBeanName(BeanDefinition beanDefinition, BeanDefinitionRegistry registry)_			throws BeanDefinitionStoreException {__		return generateBeanName(beanDefinition, registry, false)__	};generate,a,bean,name,for,the,given,top,level,bean,definition,unique,within,the,given,bean,factory,param,bean,definition,the,bean,definition,to,generate,a,bean,name,for,param,registry,the,bean,factory,that,the,definition,is,going,to,be,registered,with,to,check,for,existing,bean,names,return,the,generated,bean,name,throws,bean,definition,store,exception,if,no,unique,name,can,be,generated,for,the,given,bean,definition,see,generate,bean,name,bean,definition,bean,definition,registry,boolean;public,static,string,generate,bean,name,bean,definition,bean,definition,bean,definition,registry,registry,throws,bean,definition,store,exception,return,generate,bean,name,bean,definition,registry,false
BeanDefinitionReaderUtils -> public static AbstractBeanDefinition createBeanDefinition( 			@Nullable String parentName, @Nullable String className, @Nullable ClassLoader classLoader) throws ClassNotFoundException;1495868221;Create a new GenericBeanDefinition for the given parent name and class name,_eagerly loading the bean class if a ClassLoader has been specified._@param parentName the name of the parent bean, if any_@param className the name of the bean class, if any_@param classLoader the ClassLoader to use for loading bean classes_(can be {@code null} to just register bean classes by name)_@return the bean definition_@throws ClassNotFoundException if the bean class could not be loaded;public static AbstractBeanDefinition createBeanDefinition(_			@Nullable String parentName, @Nullable String className, @Nullable ClassLoader classLoader) throws ClassNotFoundException {__		GenericBeanDefinition bd = new GenericBeanDefinition()__		bd.setParentName(parentName)__		if (className != null) {_			if (classLoader != null) {_				bd.setBeanClass(ClassUtils.forName(className, classLoader))__			}_			else {_				bd.setBeanClassName(className)__			}_		}_		return bd__	};create,a,new,generic,bean,definition,for,the,given,parent,name,and,class,name,eagerly,loading,the,bean,class,if,a,class,loader,has,been,specified,param,parent,name,the,name,of,the,parent,bean,if,any,param,class,name,the,name,of,the,bean,class,if,any,param,class,loader,the,class,loader,to,use,for,loading,bean,classes,can,be,code,null,to,just,register,bean,classes,by,name,return,the,bean,definition,throws,class,not,found,exception,if,the,bean,class,could,not,be,loaded;public,static,abstract,bean,definition,create,bean,definition,nullable,string,parent,name,nullable,string,class,name,nullable,class,loader,class,loader,throws,class,not,found,exception,generic,bean,definition,bd,new,generic,bean,definition,bd,set,parent,name,parent,name,if,class,name,null,if,class,loader,null,bd,set,bean,class,class,utils,for,name,class,name,class,loader,else,bd,set,bean,class,name,class,name,return,bd
BeanDefinitionReaderUtils -> public static AbstractBeanDefinition createBeanDefinition( 			@Nullable String parentName, @Nullable String className, @Nullable ClassLoader classLoader) throws ClassNotFoundException;1530174524;Create a new GenericBeanDefinition for the given parent name and class name,_eagerly loading the bean class if a ClassLoader has been specified._@param parentName the name of the parent bean, if any_@param className the name of the bean class, if any_@param classLoader the ClassLoader to use for loading bean classes_(can be {@code null} to just register bean classes by name)_@return the bean definition_@throws ClassNotFoundException if the bean class could not be loaded;public static AbstractBeanDefinition createBeanDefinition(_			@Nullable String parentName, @Nullable String className, @Nullable ClassLoader classLoader) throws ClassNotFoundException {__		GenericBeanDefinition bd = new GenericBeanDefinition()__		bd.setParentName(parentName)__		if (className != null) {_			if (classLoader != null) {_				bd.setBeanClass(ClassUtils.forName(className, classLoader))__			}_			else {_				bd.setBeanClassName(className)__			}_		}_		return bd__	};create,a,new,generic,bean,definition,for,the,given,parent,name,and,class,name,eagerly,loading,the,bean,class,if,a,class,loader,has,been,specified,param,parent,name,the,name,of,the,parent,bean,if,any,param,class,name,the,name,of,the,bean,class,if,any,param,class,loader,the,class,loader,to,use,for,loading,bean,classes,can,be,code,null,to,just,register,bean,classes,by,name,return,the,bean,definition,throws,class,not,found,exception,if,the,bean,class,could,not,be,loaded;public,static,abstract,bean,definition,create,bean,definition,nullable,string,parent,name,nullable,string,class,name,nullable,class,loader,class,loader,throws,class,not,found,exception,generic,bean,definition,bd,new,generic,bean,definition,bd,set,parent,name,parent,name,if,class,name,null,if,class,loader,null,bd,set,bean,class,class,utils,for,name,class,name,class,loader,else,bd,set,bean,class,name,class,name,return,bd
BeanDefinitionReaderUtils -> public static AbstractBeanDefinition createBeanDefinition( 			@Nullable String parentName, @Nullable String className, @Nullable ClassLoader classLoader) throws ClassNotFoundException;1530405080;Create a new GenericBeanDefinition for the given parent name and class name,_eagerly loading the bean class if a ClassLoader has been specified._@param parentName the name of the parent bean, if any_@param className the name of the bean class, if any_@param classLoader the ClassLoader to use for loading bean classes_(can be {@code null} to just register bean classes by name)_@return the bean definition_@throws ClassNotFoundException if the bean class could not be loaded;public static AbstractBeanDefinition createBeanDefinition(_			@Nullable String parentName, @Nullable String className, @Nullable ClassLoader classLoader) throws ClassNotFoundException {__		GenericBeanDefinition bd = new GenericBeanDefinition()__		bd.setParentName(parentName)__		if (className != null) {_			if (classLoader != null) {_				bd.setBeanClass(ClassUtils.forName(className, classLoader))__			}_			else {_				bd.setBeanClassName(className)__			}_		}_		return bd__	};create,a,new,generic,bean,definition,for,the,given,parent,name,and,class,name,eagerly,loading,the,bean,class,if,a,class,loader,has,been,specified,param,parent,name,the,name,of,the,parent,bean,if,any,param,class,name,the,name,of,the,bean,class,if,any,param,class,loader,the,class,loader,to,use,for,loading,bean,classes,can,be,code,null,to,just,register,bean,classes,by,name,return,the,bean,definition,throws,class,not,found,exception,if,the,bean,class,could,not,be,loaded;public,static,abstract,bean,definition,create,bean,definition,nullable,string,parent,name,nullable,string,class,name,nullable,class,loader,class,loader,throws,class,not,found,exception,generic,bean,definition,bd,new,generic,bean,definition,bd,set,parent,name,parent,name,if,class,name,null,if,class,loader,null,bd,set,bean,class,class,utils,for,name,class,name,class,loader,else,bd,set,bean,class,name,class,name,return,bd
BeanDefinitionReaderUtils -> public static AbstractBeanDefinition createBeanDefinition( 			@Nullable String parentName, @Nullable String className, @Nullable ClassLoader classLoader) throws ClassNotFoundException;1536757150;Create a new GenericBeanDefinition for the given parent name and class name,_eagerly loading the bean class if a ClassLoader has been specified._@param parentName the name of the parent bean, if any_@param className the name of the bean class, if any_@param classLoader the ClassLoader to use for loading bean classes_(can be {@code null} to just register bean classes by name)_@return the bean definition_@throws ClassNotFoundException if the bean class could not be loaded;public static AbstractBeanDefinition createBeanDefinition(_			@Nullable String parentName, @Nullable String className, @Nullable ClassLoader classLoader) throws ClassNotFoundException {__		GenericBeanDefinition bd = new GenericBeanDefinition()__		bd.setParentName(parentName)__		if (className != null) {_			if (classLoader != null) {_				bd.setBeanClass(ClassUtils.forName(className, classLoader))__			}_			else {_				bd.setBeanClassName(className)__			}_		}_		return bd__	};create,a,new,generic,bean,definition,for,the,given,parent,name,and,class,name,eagerly,loading,the,bean,class,if,a,class,loader,has,been,specified,param,parent,name,the,name,of,the,parent,bean,if,any,param,class,name,the,name,of,the,bean,class,if,any,param,class,loader,the,class,loader,to,use,for,loading,bean,classes,can,be,code,null,to,just,register,bean,classes,by,name,return,the,bean,definition,throws,class,not,found,exception,if,the,bean,class,could,not,be,loaded;public,static,abstract,bean,definition,create,bean,definition,nullable,string,parent,name,nullable,string,class,name,nullable,class,loader,class,loader,throws,class,not,found,exception,generic,bean,definition,bd,new,generic,bean,definition,bd,set,parent,name,parent,name,if,class,name,null,if,class,loader,null,bd,set,bean,class,class,utils,for,name,class,name,class,loader,else,bd,set,bean,class,name,class,name,return,bd
