# id;timestamp;commentText;codeText;commentWords;codeWords
PropertyAccessorUtils -> private static int getNestedPropertySeparatorIndex(String propertyPath, boolean last);1328020251;Determine the first (or last) nested property separator in the_given property path, ignoring dots in keys (like "map[my.key]")._@param propertyPath the property path to check_@param last whether to return the last separator rather than the first_@return the index of the nested property separator, or -1 if none;private static int getNestedPropertySeparatorIndex(String propertyPath, boolean last) {_		boolean inKey = false__		int length = propertyPath.length()__		int i = (last ? length - 1 : 0)__		while (last ? i >= 0 : i < length) {_			switch (propertyPath.charAt(i)) {_				case PropertyAccessor.PROPERTY_KEY_PREFIX_CHAR:_				case PropertyAccessor.PROPERTY_KEY_SUFFIX_CHAR:_					inKey = !inKey__					break__				case PropertyAccessor.NESTED_PROPERTY_SEPARATOR_CHAR:_					if (!inKey) {_						return i__					}_			}_			if (last) {_				i--__			}_			else {_				i++__			}_		}_		return -1__	};determine,the,first,or,last,nested,property,separator,in,the,given,property,path,ignoring,dots,in,keys,like,map,my,key,param,property,path,the,property,path,to,check,param,last,whether,to,return,the,last,separator,rather,than,the,first,return,the,index,of,the,nested,property,separator,or,1,if,none;private,static,int,get,nested,property,separator,index,string,property,path,boolean,last,boolean,in,key,false,int,length,property,path,length,int,i,last,length,1,0,while,last,i,0,i,length,switch,property,path,char,at,i,case,property,accessor,case,property,accessor,in,key,in,key,break,case,property,accessor,if,in,key,return,i,if,last,i,else,i,return,1
PropertyAccessorUtils -> private static int getNestedPropertySeparatorIndex(String propertyPath, boolean last);1356735495;Determine the first (or last) nested property separator in the_given property path, ignoring dots in keys (like "map[my.key]")._@param propertyPath the property path to check_@param last whether to return the last separator rather than the first_@return the index of the nested property separator, or -1 if none;private static int getNestedPropertySeparatorIndex(String propertyPath, boolean last) {_		boolean inKey = false__		int length = propertyPath.length()__		int i = (last ? length - 1 : 0)__		while (last ? i >= 0 : i < length) {_			switch (propertyPath.charAt(i)) {_				case PropertyAccessor.PROPERTY_KEY_PREFIX_CHAR:_				case PropertyAccessor.PROPERTY_KEY_SUFFIX_CHAR:_					inKey = !inKey__					break__				case PropertyAccessor.NESTED_PROPERTY_SEPARATOR_CHAR:_					if (!inKey) {_						return i__					}_			}_			if (last) {_				i--__			}_			else {_				i++__			}_		}_		return -1__	};determine,the,first,or,last,nested,property,separator,in,the,given,property,path,ignoring,dots,in,keys,like,map,my,key,param,property,path,the,property,path,to,check,param,last,whether,to,return,the,last,separator,rather,than,the,first,return,the,index,of,the,nested,property,separator,or,1,if,none;private,static,int,get,nested,property,separator,index,string,property,path,boolean,last,boolean,in,key,false,int,length,property,path,length,int,i,last,length,1,0,while,last,i,0,i,length,switch,property,path,char,at,i,case,property,accessor,case,property,accessor,in,key,in,key,break,case,property,accessor,if,in,key,return,i,if,last,i,else,i,return,1
PropertyAccessorUtils -> private static int getNestedPropertySeparatorIndex(String propertyPath, boolean last);1496837955;Determine the first (or last) nested property separator in the_given property path, ignoring dots in keys (like "map[my.key]")._@param propertyPath the property path to check_@param last whether to return the last separator rather than the first_@return the index of the nested property separator, or -1 if none;private static int getNestedPropertySeparatorIndex(String propertyPath, boolean last) {_		boolean inKey = false__		int length = propertyPath.length()__		int i = (last ? length - 1 : 0)__		while (last ? i >= 0 : i < length) {_			switch (propertyPath.charAt(i)) {_				case PropertyAccessor.PROPERTY_KEY_PREFIX_CHAR:_				case PropertyAccessor.PROPERTY_KEY_SUFFIX_CHAR:_					inKey = !inKey__					break__				case PropertyAccessor.NESTED_PROPERTY_SEPARATOR_CHAR:_					if (!inKey) {_						return i__					}_			}_			if (last) {_				i--__			}_			else {_				i++__			}_		}_		return -1__	};determine,the,first,or,last,nested,property,separator,in,the,given,property,path,ignoring,dots,in,keys,like,map,my,key,param,property,path,the,property,path,to,check,param,last,whether,to,return,the,last,separator,rather,than,the,first,return,the,index,of,the,nested,property,separator,or,1,if,none;private,static,int,get,nested,property,separator,index,string,property,path,boolean,last,boolean,in,key,false,int,length,property,path,length,int,i,last,length,1,0,while,last,i,0,i,length,switch,property,path,char,at,i,case,property,accessor,case,property,accessor,in,key,in,key,break,case,property,accessor,if,in,key,return,i,if,last,i,else,i,return,1
PropertyAccessorUtils -> public static boolean isNestedOrIndexedProperty(String propertyPath);1328020251;Check whether the given property path indicates an indexed or nested property._@param propertyPath the property path to check_@return whether the path indicates an indexed or nested property;public static boolean isNestedOrIndexedProperty(String propertyPath) {_		if (propertyPath == null) {_			return false__		}_		for (int i = 0_ i < propertyPath.length()_ i++) {_			char ch = propertyPath.charAt(i)__			if (ch == PropertyAccessor.NESTED_PROPERTY_SEPARATOR_CHAR ||_					ch == PropertyAccessor.PROPERTY_KEY_PREFIX_CHAR) {_				return true__			}_		}_		return false__	};check,whether,the,given,property,path,indicates,an,indexed,or,nested,property,param,property,path,the,property,path,to,check,return,whether,the,path,indicates,an,indexed,or,nested,property;public,static,boolean,is,nested,or,indexed,property,string,property,path,if,property,path,null,return,false,for,int,i,0,i,property,path,length,i,char,ch,property,path,char,at,i,if,ch,property,accessor,ch,property,accessor,return,true,return,false
PropertyAccessorUtils -> public static boolean isNestedOrIndexedProperty(String propertyPath);1356735495;Check whether the given property path indicates an indexed or nested property._@param propertyPath the property path to check_@return whether the path indicates an indexed or nested property;public static boolean isNestedOrIndexedProperty(String propertyPath) {_		if (propertyPath == null) {_			return false__		}_		for (int i = 0_ i < propertyPath.length()_ i++) {_			char ch = propertyPath.charAt(i)__			if (ch == PropertyAccessor.NESTED_PROPERTY_SEPARATOR_CHAR ||_					ch == PropertyAccessor.PROPERTY_KEY_PREFIX_CHAR) {_				return true__			}_		}_		return false__	};check,whether,the,given,property,path,indicates,an,indexed,or,nested,property,param,property,path,the,property,path,to,check,return,whether,the,path,indicates,an,indexed,or,nested,property;public,static,boolean,is,nested,or,indexed,property,string,property,path,if,property,path,null,return,false,for,int,i,0,i,property,path,length,i,char,ch,property,path,char,at,i,if,ch,property,accessor,ch,property,accessor,return,true,return,false
PropertyAccessorUtils -> public static int getLastNestedPropertySeparatorIndex(String propertyPath);1328020251;Determine the first nested property separator in the_given property path, ignoring dots in keys (like "map[my.key]")._@param propertyPath the property path to check_@return the index of the nested property separator, or -1 if none;public static int getLastNestedPropertySeparatorIndex(String propertyPath) {_		return getNestedPropertySeparatorIndex(propertyPath, true)__	};determine,the,first,nested,property,separator,in,the,given,property,path,ignoring,dots,in,keys,like,map,my,key,param,property,path,the,property,path,to,check,return,the,index,of,the,nested,property,separator,or,1,if,none;public,static,int,get,last,nested,property,separator,index,string,property,path,return,get,nested,property,separator,index,property,path,true
PropertyAccessorUtils -> public static int getLastNestedPropertySeparatorIndex(String propertyPath);1356735495;Determine the first nested property separator in the_given property path, ignoring dots in keys (like "map[my.key]")._@param propertyPath the property path to check_@return the index of the nested property separator, or -1 if none;public static int getLastNestedPropertySeparatorIndex(String propertyPath) {_		return getNestedPropertySeparatorIndex(propertyPath, true)__	};determine,the,first,nested,property,separator,in,the,given,property,path,ignoring,dots,in,keys,like,map,my,key,param,property,path,the,property,path,to,check,return,the,index,of,the,nested,property,separator,or,1,if,none;public,static,int,get,last,nested,property,separator,index,string,property,path,return,get,nested,property,separator,index,property,path,true
PropertyAccessorUtils -> public static int getLastNestedPropertySeparatorIndex(String propertyPath);1496837955;Determine the first nested property separator in the_given property path, ignoring dots in keys (like "map[my.key]")._@param propertyPath the property path to check_@return the index of the nested property separator, or -1 if none;public static int getLastNestedPropertySeparatorIndex(String propertyPath) {_		return getNestedPropertySeparatorIndex(propertyPath, true)__	};determine,the,first,nested,property,separator,in,the,given,property,path,ignoring,dots,in,keys,like,map,my,key,param,property,path,the,property,path,to,check,return,the,index,of,the,nested,property,separator,or,1,if,none;public,static,int,get,last,nested,property,separator,index,string,property,path,return,get,nested,property,separator,index,property,path,true
PropertyAccessorUtils -> public static String[] canonicalPropertyNames(String[] propertyNames);1328020251;Determine the canonical names for the given property paths._@param propertyNames the bean property paths (as array)_@return the canonical representation of the property paths_(as array of the same size)_@see #canonicalPropertyName(String);public static String[] canonicalPropertyNames(String[] propertyNames) {_		if (propertyNames == null) {_			return null__		}_		String[] result = new String[propertyNames.length]__		for (int i = 0_ i < propertyNames.length_ i++) {_			result[i] = canonicalPropertyName(propertyNames[i])__		}_		return result__	};determine,the,canonical,names,for,the,given,property,paths,param,property,names,the,bean,property,paths,as,array,return,the,canonical,representation,of,the,property,paths,as,array,of,the,same,size,see,canonical,property,name,string;public,static,string,canonical,property,names,string,property,names,if,property,names,null,return,null,string,result,new,string,property,names,length,for,int,i,0,i,property,names,length,i,result,i,canonical,property,name,property,names,i,return,result
PropertyAccessorUtils -> public static String[] canonicalPropertyNames(String[] propertyNames);1356735495;Determine the canonical names for the given property paths._@param propertyNames the bean property paths (as array)_@return the canonical representation of the property paths_(as array of the same size)_@see #canonicalPropertyName(String);public static String[] canonicalPropertyNames(String[] propertyNames) {_		if (propertyNames == null) {_			return null__		}_		String[] result = new String[propertyNames.length]__		for (int i = 0_ i < propertyNames.length_ i++) {_			result[i] = canonicalPropertyName(propertyNames[i])__		}_		return result__	};determine,the,canonical,names,for,the,given,property,paths,param,property,names,the,bean,property,paths,as,array,return,the,canonical,representation,of,the,property,paths,as,array,of,the,same,size,see,canonical,property,name,string;public,static,string,canonical,property,names,string,property,names,if,property,names,null,return,null,string,result,new,string,property,names,length,for,int,i,0,i,property,names,length,i,result,i,canonical,property,name,property,names,i,return,result
PropertyAccessorUtils -> public static int getFirstNestedPropertySeparatorIndex(String propertyPath);1328020251;Determine the first nested property separator in the_given property path, ignoring dots in keys (like "map[my.key]")._@param propertyPath the property path to check_@return the index of the nested property separator, or -1 if none;public static int getFirstNestedPropertySeparatorIndex(String propertyPath) {_		return getNestedPropertySeparatorIndex(propertyPath, false)__	};determine,the,first,nested,property,separator,in,the,given,property,path,ignoring,dots,in,keys,like,map,my,key,param,property,path,the,property,path,to,check,return,the,index,of,the,nested,property,separator,or,1,if,none;public,static,int,get,first,nested,property,separator,index,string,property,path,return,get,nested,property,separator,index,property,path,false
PropertyAccessorUtils -> public static int getFirstNestedPropertySeparatorIndex(String propertyPath);1356735495;Determine the first nested property separator in the_given property path, ignoring dots in keys (like "map[my.key]")._@param propertyPath the property path to check_@return the index of the nested property separator, or -1 if none;public static int getFirstNestedPropertySeparatorIndex(String propertyPath) {_		return getNestedPropertySeparatorIndex(propertyPath, false)__	};determine,the,first,nested,property,separator,in,the,given,property,path,ignoring,dots,in,keys,like,map,my,key,param,property,path,the,property,path,to,check,return,the,index,of,the,nested,property,separator,or,1,if,none;public,static,int,get,first,nested,property,separator,index,string,property,path,return,get,nested,property,separator,index,property,path,false
PropertyAccessorUtils -> public static int getFirstNestedPropertySeparatorIndex(String propertyPath);1496837955;Determine the first nested property separator in the_given property path, ignoring dots in keys (like "map[my.key]")._@param propertyPath the property path to check_@return the index of the nested property separator, or -1 if none;public static int getFirstNestedPropertySeparatorIndex(String propertyPath) {_		return getNestedPropertySeparatorIndex(propertyPath, false)__	};determine,the,first,nested,property,separator,in,the,given,property,path,ignoring,dots,in,keys,like,map,my,key,param,property,path,the,property,path,to,check,return,the,index,of,the,nested,property,separator,or,1,if,none;public,static,int,get,first,nested,property,separator,index,string,property,path,return,get,nested,property,separator,index,property,path,false
PropertyAccessorUtils -> public static boolean matchesProperty(String registeredPath, String propertyPath);1328020251;Determine whether the given registered path matches the given property path,_either indicating the property itself or an indexed element of the property._@param propertyPath the property path (typically without index)_@param registeredPath the registered path (potentially with index)_@return whether the paths match;public static boolean matchesProperty(String registeredPath, String propertyPath) {_		if (!registeredPath.startsWith(propertyPath)) {_			return false__		}_		if (registeredPath.length() == propertyPath.length()) {_			return true__		}_		if (registeredPath.charAt(propertyPath.length()) != PropertyAccessor.PROPERTY_KEY_PREFIX_CHAR) {_			return false__		}_		return (registeredPath.indexOf(PropertyAccessor.PROPERTY_KEY_SUFFIX_CHAR, propertyPath.length() + 1) ==_				registeredPath.length() - 1)__	};determine,whether,the,given,registered,path,matches,the,given,property,path,either,indicating,the,property,itself,or,an,indexed,element,of,the,property,param,property,path,the,property,path,typically,without,index,param,registered,path,the,registered,path,potentially,with,index,return,whether,the,paths,match;public,static,boolean,matches,property,string,registered,path,string,property,path,if,registered,path,starts,with,property,path,return,false,if,registered,path,length,property,path,length,return,true,if,registered,path,char,at,property,path,length,property,accessor,return,false,return,registered,path,index,of,property,accessor,property,path,length,1,registered,path,length,1
PropertyAccessorUtils -> public static boolean matchesProperty(String registeredPath, String propertyPath);1356735495;Determine whether the given registered path matches the given property path,_either indicating the property itself or an indexed element of the property._@param propertyPath the property path (typically without index)_@param registeredPath the registered path (potentially with index)_@return whether the paths match;public static boolean matchesProperty(String registeredPath, String propertyPath) {_		if (!registeredPath.startsWith(propertyPath)) {_			return false__		}_		if (registeredPath.length() == propertyPath.length()) {_			return true__		}_		if (registeredPath.charAt(propertyPath.length()) != PropertyAccessor.PROPERTY_KEY_PREFIX_CHAR) {_			return false__		}_		return (registeredPath.indexOf(PropertyAccessor.PROPERTY_KEY_SUFFIX_CHAR, propertyPath.length() + 1) ==_				registeredPath.length() - 1)__	};determine,whether,the,given,registered,path,matches,the,given,property,path,either,indicating,the,property,itself,or,an,indexed,element,of,the,property,param,property,path,the,property,path,typically,without,index,param,registered,path,the,registered,path,potentially,with,index,return,whether,the,paths,match;public,static,boolean,matches,property,string,registered,path,string,property,path,if,registered,path,starts,with,property,path,return,false,if,registered,path,length,property,path,length,return,true,if,registered,path,char,at,property,path,length,property,accessor,return,false,return,registered,path,index,of,property,accessor,property,path,length,1,registered,path,length,1
PropertyAccessorUtils -> public static boolean matchesProperty(String registeredPath, String propertyPath);1496837955;Determine whether the given registered path matches the given property path,_either indicating the property itself or an indexed element of the property._@param propertyPath the property path (typically without index)_@param registeredPath the registered path (potentially with index)_@return whether the paths match;public static boolean matchesProperty(String registeredPath, String propertyPath) {_		if (!registeredPath.startsWith(propertyPath)) {_			return false__		}_		if (registeredPath.length() == propertyPath.length()) {_			return true__		}_		if (registeredPath.charAt(propertyPath.length()) != PropertyAccessor.PROPERTY_KEY_PREFIX_CHAR) {_			return false__		}_		return (registeredPath.indexOf(PropertyAccessor.PROPERTY_KEY_SUFFIX_CHAR, propertyPath.length() + 1) ==_				registeredPath.length() - 1)__	};determine,whether,the,given,registered,path,matches,the,given,property,path,either,indicating,the,property,itself,or,an,indexed,element,of,the,property,param,property,path,the,property,path,typically,without,index,param,registered,path,the,registered,path,potentially,with,index,return,whether,the,paths,match;public,static,boolean,matches,property,string,registered,path,string,property,path,if,registered,path,starts,with,property,path,return,false,if,registered,path,length,property,path,length,return,true,if,registered,path,char,at,property,path,length,property,accessor,return,false,return,registered,path,index,of,property,accessor,property,path,length,1,registered,path,length,1
PropertyAccessorUtils -> public static String getPropertyName(String propertyPath);1328020251;Return the actual property name for the given property path._@param propertyPath the property path to determine the property name_for (can include property keys, for example for specifying a map entry)_@return the actual property name, without any key elements;public static String getPropertyName(String propertyPath) {_		int separatorIndex = (propertyPath.endsWith(PropertyAccessor.PROPERTY_KEY_SUFFIX) ?_				propertyPath.indexOf(PropertyAccessor.PROPERTY_KEY_PREFIX_CHAR) : -1)__		return (separatorIndex != -1 ? propertyPath.substring(0, separatorIndex) : propertyPath)__	};return,the,actual,property,name,for,the,given,property,path,param,property,path,the,property,path,to,determine,the,property,name,for,can,include,property,keys,for,example,for,specifying,a,map,entry,return,the,actual,property,name,without,any,key,elements;public,static,string,get,property,name,string,property,path,int,separator,index,property,path,ends,with,property,accessor,property,path,index,of,property,accessor,1,return,separator,index,1,property,path,substring,0,separator,index,property,path
PropertyAccessorUtils -> public static String getPropertyName(String propertyPath);1356735495;Return the actual property name for the given property path._@param propertyPath the property path to determine the property name_for (can include property keys, for example for specifying a map entry)_@return the actual property name, without any key elements;public static String getPropertyName(String propertyPath) {_		int separatorIndex = (propertyPath.endsWith(PropertyAccessor.PROPERTY_KEY_SUFFIX) ?_				propertyPath.indexOf(PropertyAccessor.PROPERTY_KEY_PREFIX_CHAR) : -1)__		return (separatorIndex != -1 ? propertyPath.substring(0, separatorIndex) : propertyPath)__	};return,the,actual,property,name,for,the,given,property,path,param,property,path,the,property,path,to,determine,the,property,name,for,can,include,property,keys,for,example,for,specifying,a,map,entry,return,the,actual,property,name,without,any,key,elements;public,static,string,get,property,name,string,property,path,int,separator,index,property,path,ends,with,property,accessor,property,path,index,of,property,accessor,1,return,separator,index,1,property,path,substring,0,separator,index,property,path
PropertyAccessorUtils -> public static String getPropertyName(String propertyPath);1496837955;Return the actual property name for the given property path._@param propertyPath the property path to determine the property name_for (can include property keys, for example for specifying a map entry)_@return the actual property name, without any key elements;public static String getPropertyName(String propertyPath) {_		int separatorIndex = (propertyPath.endsWith(PropertyAccessor.PROPERTY_KEY_SUFFIX) ?_				propertyPath.indexOf(PropertyAccessor.PROPERTY_KEY_PREFIX_CHAR) : -1)__		return (separatorIndex != -1 ? propertyPath.substring(0, separatorIndex) : propertyPath)__	};return,the,actual,property,name,for,the,given,property,path,param,property,path,the,property,path,to,determine,the,property,name,for,can,include,property,keys,for,example,for,specifying,a,map,entry,return,the,actual,property,name,without,any,key,elements;public,static,string,get,property,name,string,property,path,int,separator,index,property,path,ends,with,property,accessor,property,path,index,of,property,accessor,1,return,separator,index,1,property,path,substring,0,separator,index,property,path
PropertyAccessorUtils -> public static String canonicalPropertyName(String propertyName);1328020251;Determine the canonical name for the given property path._Removes surrounding quotes from map keys:<br>_<code>map['key']</code> -> <code>map[key]</code><br>_<code>map["key"]</code> -> <code>map[key]</code>_@param propertyName the bean property path_@return the canonical representation of the property path;public static String canonicalPropertyName(String propertyName) {_		if (propertyName == null) {_			return ""__		}__		StringBuilder sb = new StringBuilder(propertyName)__		int searchIndex = 0__		while (searchIndex != -1) {_			int keyStart = sb.indexOf(PropertyAccessor.PROPERTY_KEY_PREFIX, searchIndex)__			searchIndex = -1__			if (keyStart != -1) {_				int keyEnd = sb.indexOf(_						PropertyAccessor.PROPERTY_KEY_SUFFIX, keyStart + PropertyAccessor.PROPERTY_KEY_PREFIX.length())__				if (keyEnd != -1) {_					String key = sb.substring(keyStart + PropertyAccessor.PROPERTY_KEY_PREFIX.length(), keyEnd)__					if ((key.startsWith("'") && key.endsWith("'")) || (key.startsWith("\"") && key.endsWith("\""))) {_						sb.delete(keyStart + 1, keyStart + 2)__						sb.delete(keyEnd - 2, keyEnd - 1)__						keyEnd = keyEnd - 2__					}_					searchIndex = keyEnd + PropertyAccessor.PROPERTY_KEY_SUFFIX.length()__				}_			}_		}_		return sb.toString()__	};determine,the,canonical,name,for,the,given,property,path,removes,surrounding,quotes,from,map,keys,br,code,map,key,code,code,map,key,code,br,code,map,key,code,code,map,key,code,param,property,name,the,bean,property,path,return,the,canonical,representation,of,the,property,path;public,static,string,canonical,property,name,string,property,name,if,property,name,null,return,string,builder,sb,new,string,builder,property,name,int,search,index,0,while,search,index,1,int,key,start,sb,index,of,property,accessor,search,index,search,index,1,if,key,start,1,int,key,end,sb,index,of,property,accessor,key,start,property,accessor,length,if,key,end,1,string,key,sb,substring,key,start,property,accessor,length,key,end,if,key,starts,with,key,ends,with,key,starts,with,key,ends,with,sb,delete,key,start,1,key,start,2,sb,delete,key,end,2,key,end,1,key,end,key,end,2,search,index,key,end,property,accessor,length,return,sb,to,string
PropertyAccessorUtils -> public static String canonicalPropertyName(String propertyName);1356735495;Determine the canonical name for the given property path._Removes surrounding quotes from map keys:<br>_{@code map['key']} -> {@code map[key]}<br>_{@code map["key"]} -> {@code map[key]}_@param propertyName the bean property path_@return the canonical representation of the property path;public static String canonicalPropertyName(String propertyName) {_		if (propertyName == null) {_			return ""__		}__		StringBuilder sb = new StringBuilder(propertyName)__		int searchIndex = 0__		while (searchIndex != -1) {_			int keyStart = sb.indexOf(PropertyAccessor.PROPERTY_KEY_PREFIX, searchIndex)__			searchIndex = -1__			if (keyStart != -1) {_				int keyEnd = sb.indexOf(_						PropertyAccessor.PROPERTY_KEY_SUFFIX, keyStart + PropertyAccessor.PROPERTY_KEY_PREFIX.length())__				if (keyEnd != -1) {_					String key = sb.substring(keyStart + PropertyAccessor.PROPERTY_KEY_PREFIX.length(), keyEnd)__					if ((key.startsWith("'") && key.endsWith("'")) || (key.startsWith("\"") && key.endsWith("\""))) {_						sb.delete(keyStart + 1, keyStart + 2)__						sb.delete(keyEnd - 2, keyEnd - 1)__						keyEnd = keyEnd - 2__					}_					searchIndex = keyEnd + PropertyAccessor.PROPERTY_KEY_SUFFIX.length()__				}_			}_		}_		return sb.toString()__	};determine,the,canonical,name,for,the,given,property,path,removes,surrounding,quotes,from,map,keys,br,code,map,key,code,map,key,br,code,map,key,code,map,key,param,property,name,the,bean,property,path,return,the,canonical,representation,of,the,property,path;public,static,string,canonical,property,name,string,property,name,if,property,name,null,return,string,builder,sb,new,string,builder,property,name,int,search,index,0,while,search,index,1,int,key,start,sb,index,of,property,accessor,search,index,search,index,1,if,key,start,1,int,key,end,sb,index,of,property,accessor,key,start,property,accessor,length,if,key,end,1,string,key,sb,substring,key,start,property,accessor,length,key,end,if,key,starts,with,key,ends,with,key,starts,with,key,ends,with,sb,delete,key,start,1,key,start,2,sb,delete,key,end,2,key,end,1,key,end,key,end,2,search,index,key,end,property,accessor,length,return,sb,to,string
