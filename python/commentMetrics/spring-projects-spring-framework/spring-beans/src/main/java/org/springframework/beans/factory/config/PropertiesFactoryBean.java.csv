commented;modifiers;parameterAmount;loc;comment;code
true;public,final;1;3;/**  * Set whether a shared 'singleton' Properties instance should be  * created, or rather a new Properties instance on each request.  * <p>Default is "true" (a shared singleton).  */ ;/**  * Set whether a shared 'singleton' Properties instance should be  * created, or rather a new Properties instance on each request.  * <p>Default is "true" (a shared singleton).  */ public final void setSingleton(boolean singleton) {     this.singleton = singleton. }
false;public,final;0;4;;@Override public final boolean isSingleton() {     return this.singleton. }
false;public,final;0;6;;@Override public final void afterPropertiesSet() throws IOException {     if (this.singleton) {         this.singletonInstance = createProperties().     } }
false;public,final;0;10;;@Override @Nullable public final Properties getObject() throws IOException {     if (this.singleton) {         return this.singletonInstance.     } else {         return createProperties().     } }
false;public;0;4;;@Override public Class<Properties> getObjectType() {     return Properties.class. }
true;protected;0;3;/**  * Template method that subclasses may override to construct the object  * returned by this factory. The default implementation returns the  * plain merged Properties instance.  * <p>Invoked on initialization of this FactoryBean in case of a  * shared singleton. else, on each {@link #getObject()} call.  * @return the object returned by this factory  * @throws IOException if an exception occurred during properties loading  * @see #mergeProperties()  */ ;/**  * Template method that subclasses may override to construct the object  * returned by this factory. The default implementation returns the  * plain merged Properties instance.  * <p>Invoked on initialization of this FactoryBean in case of a  * shared singleton. else, on each {@link #getObject()} call.  * @return the object returned by this factory  * @throws IOException if an exception occurred during properties loading  * @see #mergeProperties()  */ protected Properties createProperties() throws IOException {     return mergeProperties(). }
