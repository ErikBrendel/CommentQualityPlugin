# id;timestamp;commentText;codeText;commentWords;codeWords
ExtendedBeanInfo -> public ExtendedBeanInfo(BeanInfo delegate) throws IntrospectionException;1328020251;Wrap the given delegate {@link BeanInfo} instance and find any non-void returning_setter methods, creating and adding a {@link PropertyDescriptor} for each.__<p>Note that the wrapped {@code BeanInfo} is modified by this process.__@see #getPropertyDescriptors()_@throws IntrospectionException if any problems occur creating and adding new {@code PropertyDescriptors};public ExtendedBeanInfo(BeanInfo delegate) throws IntrospectionException {_		this.delegate = delegate___		_		_		_		_		__		ALL_METHODS:_		for (MethodDescriptor md : delegate.getMethodDescriptors()) {_			Method method = md.getMethod()___			_			if (ReflectionUtils.isObjectMethod(method) && !method.getName().startsWith("get")) {_				continue ALL_METHODS__			}__			_			if (method.getName().startsWith("set") && method.getParameterTypes().length == 1) {_				String propertyName = propertyNameFor(method)__				if(propertyName.length() == 0) {_					continue ALL_METHODS__				}_				for (PropertyDescriptor pd : delegate.getPropertyDescriptors()) {_					Method readMethod = pd.getReadMethod()__					Method writeMethod = pd.getWriteMethod()__					_					if (writeMethod != null_							&& writeMethod.getName().equals(method.getName())) {_						_						this.addOrUpdatePropertyDescriptor(pd, propertyName, readMethod, writeMethod)__						continue ALL_METHODS__					}_					_					if (readMethod != null_							&& readMethod.getName().equals(getterMethodNameFor(propertyName))_							&& readMethod.getReturnType().equals(method.getParameterTypes()[0])) {_						this.addOrUpdatePropertyDescriptor(pd, propertyName, readMethod, method)__						continue ALL_METHODS__					}_				}_				_				_				this.addOrUpdatePropertyDescriptor(null, propertyName, null, method)__				continue ALL_METHODS__			}__			_			if (method.getName().startsWith("set") && method.getParameterTypes().length == 2 && method.getParameterTypes()[0].equals(int.class)) {_				String propertyName = propertyNameFor(method)__				if(propertyName.length() == 0) {_					continue ALL_METHODS__				}_				DELEGATE_PD:_				for (PropertyDescriptor pd : delegate.getPropertyDescriptors()) {_					if (!(pd instanceof IndexedPropertyDescriptor)) {_						continue DELEGATE_PD__					}_					IndexedPropertyDescriptor ipd = (IndexedPropertyDescriptor) pd__					Method readMethod = ipd.getReadMethod()__					Method writeMethod = ipd.getWriteMethod()__					Method indexedReadMethod = ipd.getIndexedReadMethod()__					Method indexedWriteMethod = ipd.getIndexedWriteMethod()__					_					if (indexedWriteMethod != null_							&& indexedWriteMethod.getName().equals(method.getName())) {_						_						this.addOrUpdatePropertyDescriptor(pd, propertyName, readMethod, writeMethod, indexedReadMethod, indexedWriteMethod)__						continue ALL_METHODS__					}_					_					if (indexedReadMethod != null_							&& indexedReadMethod.getName().equals(getterMethodNameFor(propertyName))_							&& indexedReadMethod.getReturnType().equals(method.getParameterTypes()[1])) {_						this.addOrUpdatePropertyDescriptor(pd, propertyName, readMethod, writeMethod, indexedReadMethod, method)__						continue ALL_METHODS__					}_				}_				_				_				this.addOrUpdatePropertyDescriptor(null, propertyName, null, null, null, method)__				continue ALL_METHODS__			}__			_			for (PropertyDescriptor pd : delegate.getPropertyDescriptors()) {_				_				for (PropertyDescriptor existingPD : this.propertyDescriptors) {_					if (method.equals(pd.getReadMethod())_							&& existingPD.getName().equals(pd.getName())) {_						if (existingPD.getReadMethod() == null) {_							_							this.addOrUpdatePropertyDescriptor(pd, pd.getName(), method, pd.getWriteMethod())__						}_						_						continue ALL_METHODS__					}_				}_				if (method == pd.getReadMethod()_						|| (pd instanceof IndexedPropertyDescriptor && method == ((IndexedPropertyDescriptor) pd).getIndexedReadMethod())) {_					_					if (pd instanceof IndexedPropertyDescriptor) {_						this.addOrUpdatePropertyDescriptor(pd, pd.getName(), pd.getReadMethod(), pd.getWriteMethod(), ((IndexedPropertyDescriptor)pd).getIndexedReadMethod(), ((IndexedPropertyDescriptor)pd).getIndexedWriteMethod())__					} else {_						this.addOrUpdatePropertyDescriptor(pd, pd.getName(), pd.getReadMethod(), pd.getWriteMethod())__					}_					continue ALL_METHODS__				}_			}_		}_	};wrap,the,given,delegate,link,bean,info,instance,and,find,any,non,void,returning,setter,methods,creating,and,adding,a,link,property,descriptor,for,each,p,note,that,the,wrapped,code,bean,info,is,modified,by,this,process,see,get,property,descriptors,throws,introspection,exception,if,any,problems,occur,creating,and,adding,new,code,property,descriptors;public,extended,bean,info,bean,info,delegate,throws,introspection,exception,this,delegate,delegate,for,method,descriptor,md,delegate,get,method,descriptors,method,method,md,get,method,if,reflection,utils,is,object,method,method,method,get,name,starts,with,get,continue,if,method,get,name,starts,with,set,method,get,parameter,types,length,1,string,property,name,property,name,for,method,if,property,name,length,0,continue,for,property,descriptor,pd,delegate,get,property,descriptors,method,read,method,pd,get,read,method,method,write,method,pd,get,write,method,if,write,method,null,write,method,get,name,equals,method,get,name,this,add,or,update,property,descriptor,pd,property,name,read,method,write,method,continue,if,read,method,null,read,method,get,name,equals,getter,method,name,for,property,name,read,method,get,return,type,equals,method,get,parameter,types,0,this,add,or,update,property,descriptor,pd,property,name,read,method,method,continue,this,add,or,update,property,descriptor,null,property,name,null,method,continue,if,method,get,name,starts,with,set,method,get,parameter,types,length,2,method,get,parameter,types,0,equals,int,class,string,property,name,property,name,for,method,if,property,name,length,0,continue,for,property,descriptor,pd,delegate,get,property,descriptors,if,pd,instanceof,indexed,property,descriptor,continue,indexed,property,descriptor,ipd,indexed,property,descriptor,pd,method,read,method,ipd,get,read,method,method,write,method,ipd,get,write,method,method,indexed,read,method,ipd,get,indexed,read,method,method,indexed,write,method,ipd,get,indexed,write,method,if,indexed,write,method,null,indexed,write,method,get,name,equals,method,get,name,this,add,or,update,property,descriptor,pd,property,name,read,method,write,method,indexed,read,method,indexed,write,method,continue,if,indexed,read,method,null,indexed,read,method,get,name,equals,getter,method,name,for,property,name,indexed,read,method,get,return,type,equals,method,get,parameter,types,1,this,add,or,update,property,descriptor,pd,property,name,read,method,write,method,indexed,read,method,method,continue,this,add,or,update,property,descriptor,null,property,name,null,null,null,method,continue,for,property,descriptor,pd,delegate,get,property,descriptors,for,property,descriptor,existing,pd,this,property,descriptors,if,method,equals,pd,get,read,method,existing,pd,get,name,equals,pd,get,name,if,existing,pd,get,read,method,null,this,add,or,update,property,descriptor,pd,pd,get,name,method,pd,get,write,method,continue,if,method,pd,get,read,method,pd,instanceof,indexed,property,descriptor,method,indexed,property,descriptor,pd,get,indexed,read,method,if,pd,instanceof,indexed,property,descriptor,this,add,or,update,property,descriptor,pd,pd,get,name,pd,get,read,method,pd,get,write,method,indexed,property,descriptor,pd,get,indexed,read,method,indexed,property,descriptor,pd,get,indexed,write,method,else,this,add,or,update,property,descriptor,pd,pd,get,name,pd,get,read,method,pd,get,write,method,continue
ExtendedBeanInfo -> public ExtendedBeanInfo(BeanInfo delegate) throws IntrospectionException;1329142650;Wrap the given delegate {@link BeanInfo} instance and find any non-void returning_setter methods, creating and adding a {@link PropertyDescriptor} for each.__<p>Note that the wrapped {@code BeanInfo} is modified by this process.__@see #getPropertyDescriptors()_@throws IntrospectionException if any problems occur creating and adding new {@code PropertyDescriptors};public ExtendedBeanInfo(BeanInfo delegate) throws IntrospectionException {_		this.delegate = delegate___		ALL_METHODS:_		for (MethodDescriptor md : delegate.getMethodDescriptors()) {_			Method method = md.getMethod()___			_			if (ReflectionUtils.isObjectMethod(method) && !method.getName().startsWith("get")) {_				continue ALL_METHODS__			}__			_			if (method.getName().startsWith("set") && method.getParameterTypes().length == 1) {_				String propertyName = propertyNameFor(method)__				if(propertyName.length() == 0) {_					continue ALL_METHODS__				}_				for (PropertyDescriptor pd : delegate.getPropertyDescriptors()) {_					Method readMethod = pd.getReadMethod()__					Method writeMethod = pd.getWriteMethod()__					_					if (writeMethod != null_							&& writeMethod.getName().equals(method.getName())) {_						_						this.addOrUpdatePropertyDescriptor(pd, propertyName, readMethod, writeMethod)__						continue ALL_METHODS__					}_					_					if (readMethod != null_							&& readMethod.getName().equals(getterMethodNameFor(propertyName))_							&& readMethod.getReturnType().equals(method.getParameterTypes()[0])) {_						this.addOrUpdatePropertyDescriptor(pd, propertyName, readMethod, method)__						continue ALL_METHODS__					}_				}_				_				_				this.addOrUpdatePropertyDescriptor(null, propertyName, null, method)__				continue ALL_METHODS__			}__			_			if (method.getName().startsWith("set") && method.getParameterTypes().length == 2 && method.getParameterTypes()[0].equals(int.class)) {_				String propertyName = propertyNameFor(method)__				if(propertyName.length() == 0) {_					continue ALL_METHODS__				}_				DELEGATE_PD:_				for (PropertyDescriptor pd : delegate.getPropertyDescriptors()) {_					if (!(pd instanceof IndexedPropertyDescriptor)) {_						continue DELEGATE_PD__					}_					IndexedPropertyDescriptor ipd = (IndexedPropertyDescriptor) pd__					Method readMethod = ipd.getReadMethod()__					Method writeMethod = ipd.getWriteMethod()__					Method indexedReadMethod = ipd.getIndexedReadMethod()__					Method indexedWriteMethod = ipd.getIndexedWriteMethod()__					_					if (!(indexedWriteMethod != null_							&& indexedWriteMethod.getName().equals(method.getName()))) {_						indexedWriteMethod = method__					}_					_					this.addOrUpdatePropertyDescriptor(pd, propertyName, readMethod, writeMethod, indexedReadMethod, indexedWriteMethod)__					continue ALL_METHODS__				}_				_				_				this.addOrUpdatePropertyDescriptor(null, propertyName, null, null, null, method)__				continue ALL_METHODS__			}__			_			for (PropertyDescriptor pd : delegate.getPropertyDescriptors()) {_				_				String propertyName = pd.getName()__				Method readMethod = pd.getReadMethod()__				Method mostSpecificReadMethod = ClassUtils.getMostSpecificMethod(readMethod, method.getDeclaringClass())__				for (PropertyDescriptor existingPD : this.propertyDescriptors) {_					if (method.equals(mostSpecificReadMethod)_							&& existingPD.getName().equals(propertyName)) {_						if (existingPD.getReadMethod() == null) {_							_							this.addOrUpdatePropertyDescriptor(pd, propertyName, method, pd.getWriteMethod())__						}_						_						continue ALL_METHODS__					}_				}_				if (method.equals(mostSpecificReadMethod)_						|| (pd instanceof IndexedPropertyDescriptor && method.equals(((IndexedPropertyDescriptor) pd).getIndexedReadMethod()))) {_					_					if (pd instanceof IndexedPropertyDescriptor) {_						this.addOrUpdatePropertyDescriptor(pd, propertyName, readMethod, pd.getWriteMethod(), ((IndexedPropertyDescriptor)pd).getIndexedReadMethod(), ((IndexedPropertyDescriptor)pd).getIndexedWriteMethod())__					} else {_						this.addOrUpdatePropertyDescriptor(pd, propertyName, readMethod, pd.getWriteMethod())__					}_					continue ALL_METHODS__				}_			}_		}_	};wrap,the,given,delegate,link,bean,info,instance,and,find,any,non,void,returning,setter,methods,creating,and,adding,a,link,property,descriptor,for,each,p,note,that,the,wrapped,code,bean,info,is,modified,by,this,process,see,get,property,descriptors,throws,introspection,exception,if,any,problems,occur,creating,and,adding,new,code,property,descriptors;public,extended,bean,info,bean,info,delegate,throws,introspection,exception,this,delegate,delegate,for,method,descriptor,md,delegate,get,method,descriptors,method,method,md,get,method,if,reflection,utils,is,object,method,method,method,get,name,starts,with,get,continue,if,method,get,name,starts,with,set,method,get,parameter,types,length,1,string,property,name,property,name,for,method,if,property,name,length,0,continue,for,property,descriptor,pd,delegate,get,property,descriptors,method,read,method,pd,get,read,method,method,write,method,pd,get,write,method,if,write,method,null,write,method,get,name,equals,method,get,name,this,add,or,update,property,descriptor,pd,property,name,read,method,write,method,continue,if,read,method,null,read,method,get,name,equals,getter,method,name,for,property,name,read,method,get,return,type,equals,method,get,parameter,types,0,this,add,or,update,property,descriptor,pd,property,name,read,method,method,continue,this,add,or,update,property,descriptor,null,property,name,null,method,continue,if,method,get,name,starts,with,set,method,get,parameter,types,length,2,method,get,parameter,types,0,equals,int,class,string,property,name,property,name,for,method,if,property,name,length,0,continue,for,property,descriptor,pd,delegate,get,property,descriptors,if,pd,instanceof,indexed,property,descriptor,continue,indexed,property,descriptor,ipd,indexed,property,descriptor,pd,method,read,method,ipd,get,read,method,method,write,method,ipd,get,write,method,method,indexed,read,method,ipd,get,indexed,read,method,method,indexed,write,method,ipd,get,indexed,write,method,if,indexed,write,method,null,indexed,write,method,get,name,equals,method,get,name,indexed,write,method,method,this,add,or,update,property,descriptor,pd,property,name,read,method,write,method,indexed,read,method,indexed,write,method,continue,this,add,or,update,property,descriptor,null,property,name,null,null,null,method,continue,for,property,descriptor,pd,delegate,get,property,descriptors,string,property,name,pd,get,name,method,read,method,pd,get,read,method,method,most,specific,read,method,class,utils,get,most,specific,method,read,method,method,get,declaring,class,for,property,descriptor,existing,pd,this,property,descriptors,if,method,equals,most,specific,read,method,existing,pd,get,name,equals,property,name,if,existing,pd,get,read,method,null,this,add,or,update,property,descriptor,pd,property,name,method,pd,get,write,method,continue,if,method,equals,most,specific,read,method,pd,instanceof,indexed,property,descriptor,method,equals,indexed,property,descriptor,pd,get,indexed,read,method,if,pd,instanceof,indexed,property,descriptor,this,add,or,update,property,descriptor,pd,property,name,read,method,pd,get,write,method,indexed,property,descriptor,pd,get,indexed,read,method,indexed,property,descriptor,pd,get,indexed,write,method,else,this,add,or,update,property,descriptor,pd,property,name,read,method,pd,get,write,method,continue
ExtendedBeanInfo -> public ExtendedBeanInfo(BeanInfo delegate) throws IntrospectionException;1347201894;Wrap the given delegate {@link BeanInfo} instance and find any non-void returning_setter methods, creating and adding a {@link PropertyDescriptor} for each.__<p>Note that the wrapped {@code BeanInfo} is modified by this process.__@see #getPropertyDescriptors()_@throws IntrospectionException if any problems occur creating and adding new {@code PropertyDescriptors};public ExtendedBeanInfo(BeanInfo delegate) throws IntrospectionException {_		this.delegate = delegate___		ALL_METHODS:_		for (MethodDescriptor md : delegate.getMethodDescriptors()) {_			Method method = resolveMethod(md.getMethod())___			_			if (ReflectionUtils.isObjectMethod(method) && !method.getName().startsWith("get")) {_				continue ALL_METHODS__			}__			_			if (method.getName().startsWith("set") && method.getParameterTypes().length == 1) {_				String propertyName = propertyNameFor(method)__				if(propertyName.length() == 0) {_					continue ALL_METHODS__				}_				for (PropertyDescriptor pd : delegate.getPropertyDescriptors()) {_					Method readMethod = readMethodFor(pd)__					Method writeMethod = writeMethodFor(pd)__					_					if (writeMethod != null_							&& writeMethod.getName().equals(method.getName())) {_						_						this.addOrUpdatePropertyDescriptor(pd, propertyName, readMethod, writeMethod)__						continue ALL_METHODS__					}_					_					if (readMethod != null_							&& readMethod.getName().equals(getterMethodNameFor(propertyName))_							&& readMethod.getReturnType().equals(method.getParameterTypes()[0])) {_						this.addOrUpdatePropertyDescriptor(pd, propertyName, readMethod, method)__						continue ALL_METHODS__					}_				}_				_				_				this.addOrUpdatePropertyDescriptor(null, propertyName, null, method)__				continue ALL_METHODS__			}__			_			if (method.getName().startsWith("set") && method.getParameterTypes().length == 2 && method.getParameterTypes()[0].equals(int.class)) {_				String propertyName = propertyNameFor(method)__				if(propertyName.length() == 0) {_					continue ALL_METHODS__				}_				DELEGATE_PD:_				for (PropertyDescriptor pd : delegate.getPropertyDescriptors()) {_					if (!(pd instanceof IndexedPropertyDescriptor)) {_						continue DELEGATE_PD__					}_					IndexedPropertyDescriptor ipd = (IndexedPropertyDescriptor) pd__					Method readMethod = readMethodFor(ipd)__					Method writeMethod = writeMethodFor(ipd)__					Method indexedReadMethod = indexedReadMethodFor(ipd)__					Method indexedWriteMethod = indexedWriteMethodFor(ipd)__					_					if (!(indexedWriteMethod != null_							&& indexedWriteMethod.getName().equals(method.getName()))) {_						indexedWriteMethod = method__					}_					_					this.addOrUpdatePropertyDescriptor(pd, propertyName, readMethod, writeMethod, indexedReadMethod, indexedWriteMethod)__					continue ALL_METHODS__				}_				_				_				this.addOrUpdatePropertyDescriptor(null, propertyName, null, null, null, method)__				continue ALL_METHODS__			}__			_			for (PropertyDescriptor pd : delegate.getPropertyDescriptors()) {_				_				String propertyName = pd.getName()__				Method readMethod = readMethodFor(pd)__				Method mostSpecificReadMethod = ClassUtils.getMostSpecificMethod(readMethod, method.getDeclaringClass())__				for (PropertyDescriptor existingPD : this.propertyDescriptors) {_					if (method.equals(mostSpecificReadMethod)_							&& existingPD.getName().equals(propertyName)) {_						if (readMethodFor(existingPD) == null) {_							_							this.addOrUpdatePropertyDescriptor(pd, propertyName, method, writeMethodFor(pd))__						}_						_						continue ALL_METHODS__					}_				}_				if (method.equals(mostSpecificReadMethod)_						|| (pd instanceof IndexedPropertyDescriptor && method.equals(indexedReadMethodFor((IndexedPropertyDescriptor) pd)))) {_					_					if (pd instanceof IndexedPropertyDescriptor) {_						this.addOrUpdatePropertyDescriptor(pd, propertyName, readMethod, writeMethodFor(pd), indexedReadMethodFor((IndexedPropertyDescriptor)pd), indexedWriteMethodFor((IndexedPropertyDescriptor)pd))__					} else {_						this.addOrUpdatePropertyDescriptor(pd, propertyName, readMethod, writeMethodFor(pd))__					}_					continue ALL_METHODS__				}_			}_		}_	};wrap,the,given,delegate,link,bean,info,instance,and,find,any,non,void,returning,setter,methods,creating,and,adding,a,link,property,descriptor,for,each,p,note,that,the,wrapped,code,bean,info,is,modified,by,this,process,see,get,property,descriptors,throws,introspection,exception,if,any,problems,occur,creating,and,adding,new,code,property,descriptors;public,extended,bean,info,bean,info,delegate,throws,introspection,exception,this,delegate,delegate,for,method,descriptor,md,delegate,get,method,descriptors,method,method,resolve,method,md,get,method,if,reflection,utils,is,object,method,method,method,get,name,starts,with,get,continue,if,method,get,name,starts,with,set,method,get,parameter,types,length,1,string,property,name,property,name,for,method,if,property,name,length,0,continue,for,property,descriptor,pd,delegate,get,property,descriptors,method,read,method,read,method,for,pd,method,write,method,write,method,for,pd,if,write,method,null,write,method,get,name,equals,method,get,name,this,add,or,update,property,descriptor,pd,property,name,read,method,write,method,continue,if,read,method,null,read,method,get,name,equals,getter,method,name,for,property,name,read,method,get,return,type,equals,method,get,parameter,types,0,this,add,or,update,property,descriptor,pd,property,name,read,method,method,continue,this,add,or,update,property,descriptor,null,property,name,null,method,continue,if,method,get,name,starts,with,set,method,get,parameter,types,length,2,method,get,parameter,types,0,equals,int,class,string,property,name,property,name,for,method,if,property,name,length,0,continue,for,property,descriptor,pd,delegate,get,property,descriptors,if,pd,instanceof,indexed,property,descriptor,continue,indexed,property,descriptor,ipd,indexed,property,descriptor,pd,method,read,method,read,method,for,ipd,method,write,method,write,method,for,ipd,method,indexed,read,method,indexed,read,method,for,ipd,method,indexed,write,method,indexed,write,method,for,ipd,if,indexed,write,method,null,indexed,write,method,get,name,equals,method,get,name,indexed,write,method,method,this,add,or,update,property,descriptor,pd,property,name,read,method,write,method,indexed,read,method,indexed,write,method,continue,this,add,or,update,property,descriptor,null,property,name,null,null,null,method,continue,for,property,descriptor,pd,delegate,get,property,descriptors,string,property,name,pd,get,name,method,read,method,read,method,for,pd,method,most,specific,read,method,class,utils,get,most,specific,method,read,method,method,get,declaring,class,for,property,descriptor,existing,pd,this,property,descriptors,if,method,equals,most,specific,read,method,existing,pd,get,name,equals,property,name,if,read,method,for,existing,pd,null,this,add,or,update,property,descriptor,pd,property,name,method,write,method,for,pd,continue,if,method,equals,most,specific,read,method,pd,instanceof,indexed,property,descriptor,method,equals,indexed,read,method,for,indexed,property,descriptor,pd,if,pd,instanceof,indexed,property,descriptor,this,add,or,update,property,descriptor,pd,property,name,read,method,write,method,for,pd,indexed,read,method,for,indexed,property,descriptor,pd,indexed,write,method,for,indexed,property,descriptor,pd,else,this,add,or,update,property,descriptor,pd,property,name,read,method,write,method,for,pd,continue
ExtendedBeanInfo -> public ExtendedBeanInfo(BeanInfo delegate) throws IntrospectionException;1347220671;Wrap the given delegate {@link BeanInfo} instance and find any non-void returning_setter methods, creating and adding a {@link PropertyDescriptor} for each.__<p>Note that the wrapped {@code BeanInfo} is modified by this process.__@see #getPropertyDescriptors()_@throws IntrospectionException if any problems occur creating and adding new {@code PropertyDescriptors};public ExtendedBeanInfo(BeanInfo delegate) throws IntrospectionException {_		this.delegate = delegate___		ALL_METHODS:_		for (MethodDescriptor md : delegate.getMethodDescriptors()) {_			Method method = resolveMethod(md.getMethod())___			_			if (ReflectionUtils.isObjectMethod(method) && !method.getName().startsWith("get")) {_				continue ALL_METHODS__			}__			_			if (method.getName().startsWith("set") && method.getParameterTypes().length == 1) {_				String propertyName = propertyNameFor(method)__				if(propertyName.length() == 0) {_					continue ALL_METHODS__				}_				for (PropertyDescriptor pd : delegate.getPropertyDescriptors()) {_					Method readMethod = readMethodFor(pd)__					Method writeMethod = writeMethodFor(pd)__					_					if (writeMethod != null_							&& writeMethod.getName().equals(method.getName())) {_						_						this.addOrUpdatePropertyDescriptor(pd, propertyName, readMethod, writeMethod)__						continue ALL_METHODS__					}_					_					if (readMethod != null_							&& readMethod.getName().equals(getterMethodNameFor(propertyName))_							&& readMethod.getReturnType().equals(method.getParameterTypes()[0])) {_						this.addOrUpdatePropertyDescriptor(pd, propertyName, readMethod, method)__						continue ALL_METHODS__					}_				}_				_				_				this.addOrUpdatePropertyDescriptor(null, propertyName, null, method)__				continue ALL_METHODS__			}__			_			if (method.getName().startsWith("set") && method.getParameterTypes().length == 2 && method.getParameterTypes()[0].equals(int.class)) {_				String propertyName = propertyNameFor(method)__				if(propertyName.length() == 0) {_					continue ALL_METHODS__				}_				DELEGATE_PD:_				for (PropertyDescriptor pd : delegate.getPropertyDescriptors()) {_					if (!(pd instanceof IndexedPropertyDescriptor)) {_						continue DELEGATE_PD__					}_					IndexedPropertyDescriptor ipd = (IndexedPropertyDescriptor) pd__					Method readMethod = readMethodFor(ipd)__					Method writeMethod = writeMethodFor(ipd)__					Method indexedReadMethod = indexedReadMethodFor(ipd)__					Method indexedWriteMethod = indexedWriteMethodFor(ipd)__					_					if (!(indexedWriteMethod != null_							&& indexedWriteMethod.getName().equals(method.getName()))) {_						indexedWriteMethod = method__					}_					_					this.addOrUpdatePropertyDescriptor(pd, propertyName, readMethod, writeMethod, indexedReadMethod, indexedWriteMethod)__					continue ALL_METHODS__				}_				_				_				this.addOrUpdatePropertyDescriptor(null, propertyName, null, null, null, method)__				continue ALL_METHODS__			}__			_			for (PropertyDescriptor pd : delegate.getPropertyDescriptors()) {_				_				String propertyName = pd.getName()__				Method readMethod = readMethodFor(pd)__				Method mostSpecificReadMethod = ClassUtils.getMostSpecificMethod(readMethod, method.getDeclaringClass())__				for (PropertyDescriptor existingPD : this.propertyDescriptors) {_					if (method.equals(mostSpecificReadMethod)_							&& existingPD.getName().equals(propertyName)) {_						if (readMethodFor(existingPD) == null) {_							_							this.addOrUpdatePropertyDescriptor(pd, propertyName, method, writeMethodFor(pd))__						}_						_						continue ALL_METHODS__					}_				}_				if (method.equals(mostSpecificReadMethod)_						|| (pd instanceof IndexedPropertyDescriptor && method.equals(indexedReadMethodFor((IndexedPropertyDescriptor) pd)))) {_					_					if (pd instanceof IndexedPropertyDescriptor) {_						this.addOrUpdatePropertyDescriptor(pd, propertyName, readMethod, writeMethodFor(pd), indexedReadMethodFor((IndexedPropertyDescriptor)pd), indexedWriteMethodFor((IndexedPropertyDescriptor)pd))__					} else {_						this.addOrUpdatePropertyDescriptor(pd, propertyName, readMethod, writeMethodFor(pd))__					}_					continue ALL_METHODS__				}_			}_		}_	};wrap,the,given,delegate,link,bean,info,instance,and,find,any,non,void,returning,setter,methods,creating,and,adding,a,link,property,descriptor,for,each,p,note,that,the,wrapped,code,bean,info,is,modified,by,this,process,see,get,property,descriptors,throws,introspection,exception,if,any,problems,occur,creating,and,adding,new,code,property,descriptors;public,extended,bean,info,bean,info,delegate,throws,introspection,exception,this,delegate,delegate,for,method,descriptor,md,delegate,get,method,descriptors,method,method,resolve,method,md,get,method,if,reflection,utils,is,object,method,method,method,get,name,starts,with,get,continue,if,method,get,name,starts,with,set,method,get,parameter,types,length,1,string,property,name,property,name,for,method,if,property,name,length,0,continue,for,property,descriptor,pd,delegate,get,property,descriptors,method,read,method,read,method,for,pd,method,write,method,write,method,for,pd,if,write,method,null,write,method,get,name,equals,method,get,name,this,add,or,update,property,descriptor,pd,property,name,read,method,write,method,continue,if,read,method,null,read,method,get,name,equals,getter,method,name,for,property,name,read,method,get,return,type,equals,method,get,parameter,types,0,this,add,or,update,property,descriptor,pd,property,name,read,method,method,continue,this,add,or,update,property,descriptor,null,property,name,null,method,continue,if,method,get,name,starts,with,set,method,get,parameter,types,length,2,method,get,parameter,types,0,equals,int,class,string,property,name,property,name,for,method,if,property,name,length,0,continue,for,property,descriptor,pd,delegate,get,property,descriptors,if,pd,instanceof,indexed,property,descriptor,continue,indexed,property,descriptor,ipd,indexed,property,descriptor,pd,method,read,method,read,method,for,ipd,method,write,method,write,method,for,ipd,method,indexed,read,method,indexed,read,method,for,ipd,method,indexed,write,method,indexed,write,method,for,ipd,if,indexed,write,method,null,indexed,write,method,get,name,equals,method,get,name,indexed,write,method,method,this,add,or,update,property,descriptor,pd,property,name,read,method,write,method,indexed,read,method,indexed,write,method,continue,this,add,or,update,property,descriptor,null,property,name,null,null,null,method,continue,for,property,descriptor,pd,delegate,get,property,descriptors,string,property,name,pd,get,name,method,read,method,read,method,for,pd,method,most,specific,read,method,class,utils,get,most,specific,method,read,method,method,get,declaring,class,for,property,descriptor,existing,pd,this,property,descriptors,if,method,equals,most,specific,read,method,existing,pd,get,name,equals,property,name,if,read,method,for,existing,pd,null,this,add,or,update,property,descriptor,pd,property,name,method,write,method,for,pd,continue,if,method,equals,most,specific,read,method,pd,instanceof,indexed,property,descriptor,method,equals,indexed,read,method,for,indexed,property,descriptor,pd,if,pd,instanceof,indexed,property,descriptor,this,add,or,update,property,descriptor,pd,property,name,read,method,write,method,for,pd,indexed,read,method,for,indexed,property,descriptor,pd,indexed,write,method,for,indexed,property,descriptor,pd,else,this,add,or,update,property,descriptor,pd,property,name,read,method,write,method,for,pd,continue
ExtendedBeanInfo -> public ExtendedBeanInfo(BeanInfo delegate) throws IntrospectionException;1349838650;Wrap the given delegate {@link BeanInfo} instance and find any non-void returning_setter methods, creating and adding a {@link PropertyDescriptor} for each.__<p>Note that the wrapped {@code BeanInfo} is modified by this process.__@see #getPropertyDescriptors()_@throws IntrospectionException if any problems occur creating and adding new {@code PropertyDescriptors};public ExtendedBeanInfo(BeanInfo delegate) throws IntrospectionException {_		this.delegate = delegate___		ALL_METHODS:_		for (MethodDescriptor md : delegate.getMethodDescriptors()) {_			Method method = resolveMethod(md.getMethod())___			_			if (ReflectionUtils.isObjectMethod(method) && !method.getName().startsWith("get")) {_				continue ALL_METHODS__			}__			_			if (method.getName().startsWith("set") && method.getParameterTypes().length == 1) {_				String propertyName = propertyNameFor(method)__				if(propertyName.length() == 0) {_					continue ALL_METHODS__				}_				for (PropertyDescriptor pd : delegate.getPropertyDescriptors()) {_					Method readMethod = readMethodFor(pd)__					Method writeMethod = writeMethodFor(pd)__					_					if (writeMethod != null_							&& writeMethod.getName().equals(method.getName())) {_						_						this.addOrUpdatePropertyDescriptor(pd, propertyName, readMethod, writeMethod)__						continue ALL_METHODS__					}_					_					if (readMethod != null_							&& readMethod.getName().equals(getterMethodNameFor(propertyName))_							&& readMethod.getReturnType().equals(method.getParameterTypes()[0])) {_						this.addOrUpdatePropertyDescriptor(pd, propertyName, readMethod, method)__						continue ALL_METHODS__					}_				}_				_				_				this.addOrUpdatePropertyDescriptor(null, propertyName, null, method)__				continue ALL_METHODS__			}__			_			if (method.getName().startsWith("set") && method.getParameterTypes().length == 2 && method.getParameterTypes()[0].equals(int.class)) {_				String propertyName = propertyNameFor(method)__				if(propertyName.length() == 0) {_					continue ALL_METHODS__				}_				DELEGATE_PD:_				for (PropertyDescriptor pd : delegate.getPropertyDescriptors()) {_					if (!(pd instanceof IndexedPropertyDescriptor)) {_						continue DELEGATE_PD__					}_					IndexedPropertyDescriptor ipd = (IndexedPropertyDescriptor) pd__					Method readMethod = readMethodFor(ipd)__					Method writeMethod = writeMethodFor(ipd)__					Method indexedReadMethod = indexedReadMethodFor(ipd)__					Method indexedWriteMethod = indexedWriteMethodFor(ipd)__					_					if (!(indexedWriteMethod != null_							&& indexedWriteMethod.getName().equals(method.getName()))) {_						indexedWriteMethod = method__					}_					_					this.addOrUpdatePropertyDescriptor(pd, propertyName, readMethod, writeMethod, indexedReadMethod, indexedWriteMethod)__					continue ALL_METHODS__				}_				_				_				this.addOrUpdatePropertyDescriptor(null, propertyName, null, null, null, method)__				continue ALL_METHODS__			}__			_			for (PropertyDescriptor pd : delegate.getPropertyDescriptors()) {_				_				String propertyName = pd.getName()__				Method readMethod = readMethodFor(pd)__				Method mostSpecificReadMethod = ClassUtils.getMostSpecificMethod(readMethod, method.getDeclaringClass())__				for (PropertyDescriptor existingPD : this.propertyDescriptors) {_					if (method.equals(mostSpecificReadMethod)_							&& existingPD.getName().equals(propertyName)) {_						if (readMethodFor(existingPD) == null) {_							_							this.addOrUpdatePropertyDescriptor(pd, propertyName, method, writeMethodFor(pd))__						}_						_						continue ALL_METHODS__					}_				}_				if (method.equals(mostSpecificReadMethod)_						|| (pd instanceof IndexedPropertyDescriptor && method.equals(indexedReadMethodFor((IndexedPropertyDescriptor) pd)))) {_					_					if (pd instanceof IndexedPropertyDescriptor) {_						this.addOrUpdatePropertyDescriptor(pd, propertyName, readMethod, writeMethodFor(pd), indexedReadMethodFor((IndexedPropertyDescriptor)pd), indexedWriteMethodFor((IndexedPropertyDescriptor)pd))__					} else {_						this.addOrUpdatePropertyDescriptor(pd, propertyName, readMethod, writeMethodFor(pd))__					}_					continue ALL_METHODS__				}_			}_		}_	};wrap,the,given,delegate,link,bean,info,instance,and,find,any,non,void,returning,setter,methods,creating,and,adding,a,link,property,descriptor,for,each,p,note,that,the,wrapped,code,bean,info,is,modified,by,this,process,see,get,property,descriptors,throws,introspection,exception,if,any,problems,occur,creating,and,adding,new,code,property,descriptors;public,extended,bean,info,bean,info,delegate,throws,introspection,exception,this,delegate,delegate,for,method,descriptor,md,delegate,get,method,descriptors,method,method,resolve,method,md,get,method,if,reflection,utils,is,object,method,method,method,get,name,starts,with,get,continue,if,method,get,name,starts,with,set,method,get,parameter,types,length,1,string,property,name,property,name,for,method,if,property,name,length,0,continue,for,property,descriptor,pd,delegate,get,property,descriptors,method,read,method,read,method,for,pd,method,write,method,write,method,for,pd,if,write,method,null,write,method,get,name,equals,method,get,name,this,add,or,update,property,descriptor,pd,property,name,read,method,write,method,continue,if,read,method,null,read,method,get,name,equals,getter,method,name,for,property,name,read,method,get,return,type,equals,method,get,parameter,types,0,this,add,or,update,property,descriptor,pd,property,name,read,method,method,continue,this,add,or,update,property,descriptor,null,property,name,null,method,continue,if,method,get,name,starts,with,set,method,get,parameter,types,length,2,method,get,parameter,types,0,equals,int,class,string,property,name,property,name,for,method,if,property,name,length,0,continue,for,property,descriptor,pd,delegate,get,property,descriptors,if,pd,instanceof,indexed,property,descriptor,continue,indexed,property,descriptor,ipd,indexed,property,descriptor,pd,method,read,method,read,method,for,ipd,method,write,method,write,method,for,ipd,method,indexed,read,method,indexed,read,method,for,ipd,method,indexed,write,method,indexed,write,method,for,ipd,if,indexed,write,method,null,indexed,write,method,get,name,equals,method,get,name,indexed,write,method,method,this,add,or,update,property,descriptor,pd,property,name,read,method,write,method,indexed,read,method,indexed,write,method,continue,this,add,or,update,property,descriptor,null,property,name,null,null,null,method,continue,for,property,descriptor,pd,delegate,get,property,descriptors,string,property,name,pd,get,name,method,read,method,read,method,for,pd,method,most,specific,read,method,class,utils,get,most,specific,method,read,method,method,get,declaring,class,for,property,descriptor,existing,pd,this,property,descriptors,if,method,equals,most,specific,read,method,existing,pd,get,name,equals,property,name,if,read,method,for,existing,pd,null,this,add,or,update,property,descriptor,pd,property,name,method,write,method,for,pd,continue,if,method,equals,most,specific,read,method,pd,instanceof,indexed,property,descriptor,method,equals,indexed,read,method,for,indexed,property,descriptor,pd,if,pd,instanceof,indexed,property,descriptor,this,add,or,update,property,descriptor,pd,property,name,read,method,write,method,for,pd,indexed,read,method,for,indexed,property,descriptor,pd,indexed,write,method,for,indexed,property,descriptor,pd,else,this,add,or,update,property,descriptor,pd,property,name,read,method,write,method,for,pd,continue
ExtendedBeanInfo -> public ExtendedBeanInfo(BeanInfo delegate) throws IntrospectionException;1353842900;Wrap the given {@link BeanInfo} instance_ copy all its existing property descriptors_locally, wrapping each in a custom {@link SimpleIndexedPropertyDescriptor indexed} or_{@link SimpleNonIndexedPropertyDescriptor non-indexed} {@code PropertyDescriptor}_variant that bypasses default JDK weak/soft reference management_ then search_through its method descriptors to find any non-void returning write methods and_update or create the corresponding {@link PropertyDescriptor} for each one found._@param delegate the wrapped {@code BeanInfo}, which is never modified_@throws IntrospectionException if any problems occur creating and adding new_property descriptors_@see #getPropertyDescriptors();public ExtendedBeanInfo(BeanInfo delegate) throws IntrospectionException {_		this.delegate = delegate___		for (PropertyDescriptor pd : delegate.getPropertyDescriptors()) {_			this.propertyDescriptors.add(pd instanceof IndexedPropertyDescriptor ?_					new SimpleIndexedPropertyDescriptor((IndexedPropertyDescriptor) pd) :_					new SimpleNonIndexedPropertyDescriptor(pd))__		}__		for (Method method : findNonVoidWriteMethods(delegate.getMethodDescriptors())) {_			handleNonVoidWriteMethod(method)__		}_	};wrap,the,given,link,bean,info,instance,copy,all,its,existing,property,descriptors,locally,wrapping,each,in,a,custom,link,simple,indexed,property,descriptor,indexed,or,link,simple,non,indexed,property,descriptor,non,indexed,code,property,descriptor,variant,that,bypasses,default,jdk,weak,soft,reference,management,then,search,through,its,method,descriptors,to,find,any,non,void,returning,write,methods,and,update,or,create,the,corresponding,link,property,descriptor,for,each,one,found,param,delegate,the,wrapped,code,bean,info,which,is,never,modified,throws,introspection,exception,if,any,problems,occur,creating,and,adding,new,property,descriptors,see,get,property,descriptors;public,extended,bean,info,bean,info,delegate,throws,introspection,exception,this,delegate,delegate,for,property,descriptor,pd,delegate,get,property,descriptors,this,property,descriptors,add,pd,instanceof,indexed,property,descriptor,new,simple,indexed,property,descriptor,indexed,property,descriptor,pd,new,simple,non,indexed,property,descriptor,pd,for,method,method,find,non,void,write,methods,delegate,get,method,descriptors,handle,non,void,write,method,method
ExtendedBeanInfo -> public ExtendedBeanInfo(BeanInfo delegate) throws IntrospectionException;1355966262;Wrap the given {@link BeanInfo} instance_ copy all its existing property descriptors_locally, wrapping each in a custom {@link SimpleIndexedPropertyDescriptor indexed} or_{@link SimpleNonIndexedPropertyDescriptor non-indexed} {@code PropertyDescriptor}_variant that bypasses default JDK weak/soft reference management_ then search_through its method descriptors to find any non-void returning write methods and_update or create the corresponding {@link PropertyDescriptor} for each one found._@param delegate the wrapped {@code BeanInfo}, which is never modified_@throws IntrospectionException if any problems occur creating and adding new_property descriptors_@see #getPropertyDescriptors();public ExtendedBeanInfo(BeanInfo delegate) throws IntrospectionException {_		this.delegate = delegate___		for (PropertyDescriptor pd : delegate.getPropertyDescriptors()) {_			this.propertyDescriptors.add(pd instanceof IndexedPropertyDescriptor ?_					new SimpleIndexedPropertyDescriptor((IndexedPropertyDescriptor) pd) :_					new SimpleNonIndexedPropertyDescriptor(pd))__		}__		for (Method method : findNonVoidWriteMethods(delegate.getMethodDescriptors())) {_			handleNonVoidWriteMethod(method)__		}_	};wrap,the,given,link,bean,info,instance,copy,all,its,existing,property,descriptors,locally,wrapping,each,in,a,custom,link,simple,indexed,property,descriptor,indexed,or,link,simple,non,indexed,property,descriptor,non,indexed,code,property,descriptor,variant,that,bypasses,default,jdk,weak,soft,reference,management,then,search,through,its,method,descriptors,to,find,any,non,void,returning,write,methods,and,update,or,create,the,corresponding,link,property,descriptor,for,each,one,found,param,delegate,the,wrapped,code,bean,info,which,is,never,modified,throws,introspection,exception,if,any,problems,occur,creating,and,adding,new,property,descriptors,see,get,property,descriptors;public,extended,bean,info,bean,info,delegate,throws,introspection,exception,this,delegate,delegate,for,property,descriptor,pd,delegate,get,property,descriptors,this,property,descriptors,add,pd,instanceof,indexed,property,descriptor,new,simple,indexed,property,descriptor,indexed,property,descriptor,pd,new,simple,non,indexed,property,descriptor,pd,for,method,method,find,non,void,write,methods,delegate,get,method,descriptors,handle,non,void,write,method,method
ExtendedBeanInfo -> public ExtendedBeanInfo(BeanInfo delegate) throws IntrospectionException;1356735495;Wrap the given {@link BeanInfo} instance_ copy all its existing property descriptors_locally, wrapping each in a custom {@link SimpleIndexedPropertyDescriptor indexed} or_{@link SimpleNonIndexedPropertyDescriptor non-indexed} {@code PropertyDescriptor}_variant that bypasses default JDK weak/soft reference management_ then search_through its method descriptors to find any non-void returning write methods and_update or create the corresponding {@link PropertyDescriptor} for each one found._@param delegate the wrapped {@code BeanInfo}, which is never modified_@throws IntrospectionException if any problems occur creating and adding new_property descriptors_@see #getPropertyDescriptors();public ExtendedBeanInfo(BeanInfo delegate) throws IntrospectionException {_		this.delegate = delegate___		for (PropertyDescriptor pd : delegate.getPropertyDescriptors()) {_			this.propertyDescriptors.add(pd instanceof IndexedPropertyDescriptor ?_					new SimpleIndexedPropertyDescriptor((IndexedPropertyDescriptor) pd) :_					new SimpleNonIndexedPropertyDescriptor(pd))__		}__		for (Method method : findNonVoidWriteMethods(delegate.getMethodDescriptors())) {_			handleNonVoidWriteMethod(method)__		}_	};wrap,the,given,link,bean,info,instance,copy,all,its,existing,property,descriptors,locally,wrapping,each,in,a,custom,link,simple,indexed,property,descriptor,indexed,or,link,simple,non,indexed,property,descriptor,non,indexed,code,property,descriptor,variant,that,bypasses,default,jdk,weak,soft,reference,management,then,search,through,its,method,descriptors,to,find,any,non,void,returning,write,methods,and,update,or,create,the,corresponding,link,property,descriptor,for,each,one,found,param,delegate,the,wrapped,code,bean,info,which,is,never,modified,throws,introspection,exception,if,any,problems,occur,creating,and,adding,new,property,descriptors,see,get,property,descriptors;public,extended,bean,info,bean,info,delegate,throws,introspection,exception,this,delegate,delegate,for,property,descriptor,pd,delegate,get,property,descriptors,this,property,descriptors,add,pd,instanceof,indexed,property,descriptor,new,simple,indexed,property,descriptor,indexed,property,descriptor,pd,new,simple,non,indexed,property,descriptor,pd,for,method,method,find,non,void,write,methods,delegate,get,method,descriptors,handle,non,void,write,method,method
ExtendedBeanInfo -> public ExtendedBeanInfo(BeanInfo delegate) throws IntrospectionException;1357119239;Wrap the given {@link BeanInfo} instance_ copy all its existing property descriptors_locally, wrapping each in a custom {@link SimpleIndexedPropertyDescriptor indexed} or_{@link SimpleNonIndexedPropertyDescriptor non-indexed} {@code PropertyDescriptor}_variant that bypasses default JDK weak/soft reference management_ then search_through its method descriptors to find any non-void returning write methods and_update or create the corresponding {@link PropertyDescriptor} for each one found._@param delegate the wrapped {@code BeanInfo}, which is never modified_@throws IntrospectionException if any problems occur creating and adding new_property descriptors_@see #getPropertyDescriptors();public ExtendedBeanInfo(BeanInfo delegate) throws IntrospectionException {_		this.delegate = delegate___		for (PropertyDescriptor pd : delegate.getPropertyDescriptors()) {_			this.propertyDescriptors.add(pd instanceof IndexedPropertyDescriptor ?_					new SimpleIndexedPropertyDescriptor((IndexedPropertyDescriptor) pd) :_					new SimpleNonIndexedPropertyDescriptor(pd))__		}__		for (Method method : findNonVoidWriteMethods(delegate.getMethodDescriptors())) {_			handleNonVoidWriteMethod(method)__		}_	};wrap,the,given,link,bean,info,instance,copy,all,its,existing,property,descriptors,locally,wrapping,each,in,a,custom,link,simple,indexed,property,descriptor,indexed,or,link,simple,non,indexed,property,descriptor,non,indexed,code,property,descriptor,variant,that,bypasses,default,jdk,weak,soft,reference,management,then,search,through,its,method,descriptors,to,find,any,non,void,returning,write,methods,and,update,or,create,the,corresponding,link,property,descriptor,for,each,one,found,param,delegate,the,wrapped,code,bean,info,which,is,never,modified,throws,introspection,exception,if,any,problems,occur,creating,and,adding,new,property,descriptors,see,get,property,descriptors;public,extended,bean,info,bean,info,delegate,throws,introspection,exception,this,delegate,delegate,for,property,descriptor,pd,delegate,get,property,descriptors,this,property,descriptors,add,pd,instanceof,indexed,property,descriptor,new,simple,indexed,property,descriptor,indexed,property,descriptor,pd,new,simple,non,indexed,property,descriptor,pd,for,method,method,find,non,void,write,methods,delegate,get,method,descriptors,handle,non,void,write,method,method
ExtendedBeanInfo -> public ExtendedBeanInfo(BeanInfo delegate) throws IntrospectionException;1357119417;Wrap the given {@link BeanInfo} instance_ copy all its existing property descriptors_locally, wrapping each in a custom {@link SimpleIndexedPropertyDescriptor indexed} or_{@link SimpleNonIndexedPropertyDescriptor non-indexed} {@code PropertyDescriptor}_variant that bypasses default JDK weak/soft reference management_ then search_through its method descriptors to find any non-void returning write methods and_update or create the corresponding {@link PropertyDescriptor} for each one found._@param delegate the wrapped {@code BeanInfo}, which is never modified_@throws IntrospectionException if any problems occur creating and adding new_property descriptors_@see #getPropertyDescriptors();public ExtendedBeanInfo(BeanInfo delegate) throws IntrospectionException {_		this.delegate = delegate___		for (PropertyDescriptor pd : delegate.getPropertyDescriptors()) {_			this.propertyDescriptors.add(pd instanceof IndexedPropertyDescriptor ?_					new SimpleIndexedPropertyDescriptor((IndexedPropertyDescriptor) pd) :_					new SimpleNonIndexedPropertyDescriptor(pd))__		}__		for (Method method : findCandidateWriteMethods(delegate.getMethodDescriptors())) {_			handleCandidateWriteMethod(method)__		}_	};wrap,the,given,link,bean,info,instance,copy,all,its,existing,property,descriptors,locally,wrapping,each,in,a,custom,link,simple,indexed,property,descriptor,indexed,or,link,simple,non,indexed,property,descriptor,non,indexed,code,property,descriptor,variant,that,bypasses,default,jdk,weak,soft,reference,management,then,search,through,its,method,descriptors,to,find,any,non,void,returning,write,methods,and,update,or,create,the,corresponding,link,property,descriptor,for,each,one,found,param,delegate,the,wrapped,code,bean,info,which,is,never,modified,throws,introspection,exception,if,any,problems,occur,creating,and,adding,new,property,descriptors,see,get,property,descriptors;public,extended,bean,info,bean,info,delegate,throws,introspection,exception,this,delegate,delegate,for,property,descriptor,pd,delegate,get,property,descriptors,this,property,descriptors,add,pd,instanceof,indexed,property,descriptor,new,simple,indexed,property,descriptor,indexed,property,descriptor,pd,new,simple,non,indexed,property,descriptor,pd,for,method,method,find,candidate,write,methods,delegate,get,method,descriptors,handle,candidate,write,method,method
ExtendedBeanInfo -> public ExtendedBeanInfo(BeanInfo delegate) throws IntrospectionException;1362408075;Wrap the given {@link BeanInfo} instance_ copy all its existing property descriptors_locally, wrapping each in a custom {@link SimpleIndexedPropertyDescriptor indexed} or_{@link SimpleNonIndexedPropertyDescriptor non-indexed} {@code PropertyDescriptor}_variant that bypasses default JDK weak/soft reference management_ then search_through its method descriptors to find any non-void returning write methods and_update or create the corresponding {@link PropertyDescriptor} for each one found._@param delegate the wrapped {@code BeanInfo}, which is never modified_@throws IntrospectionException if any problems occur creating and adding new_property descriptors_@see #getPropertyDescriptors();public ExtendedBeanInfo(BeanInfo delegate) throws IntrospectionException {_		this.delegate = delegate___		for (PropertyDescriptor pd : delegate.getPropertyDescriptors()) {_			this.propertyDescriptors.add(pd instanceof IndexedPropertyDescriptor ?_					new SimpleIndexedPropertyDescriptor((IndexedPropertyDescriptor) pd) :_					new SimpleNonIndexedPropertyDescriptor(pd))__		}__		for (Method method : findCandidateWriteMethods(delegate.getMethodDescriptors())) {_			handleCandidateWriteMethod(method)__		}_	};wrap,the,given,link,bean,info,instance,copy,all,its,existing,property,descriptors,locally,wrapping,each,in,a,custom,link,simple,indexed,property,descriptor,indexed,or,link,simple,non,indexed,property,descriptor,non,indexed,code,property,descriptor,variant,that,bypasses,default,jdk,weak,soft,reference,management,then,search,through,its,method,descriptors,to,find,any,non,void,returning,write,methods,and,update,or,create,the,corresponding,link,property,descriptor,for,each,one,found,param,delegate,the,wrapped,code,bean,info,which,is,never,modified,throws,introspection,exception,if,any,problems,occur,creating,and,adding,new,property,descriptors,see,get,property,descriptors;public,extended,bean,info,bean,info,delegate,throws,introspection,exception,this,delegate,delegate,for,property,descriptor,pd,delegate,get,property,descriptors,this,property,descriptors,add,pd,instanceof,indexed,property,descriptor,new,simple,indexed,property,descriptor,indexed,property,descriptor,pd,new,simple,non,indexed,property,descriptor,pd,for,method,method,find,candidate,write,methods,delegate,get,method,descriptors,handle,candidate,write,method,method
ExtendedBeanInfo -> public ExtendedBeanInfo(BeanInfo delegate) throws IntrospectionException;1367955086;Wrap the given {@link BeanInfo} instance_ copy all its existing property descriptors_locally, wrapping each in a custom {@link SimpleIndexedPropertyDescriptor indexed} or_{@link SimpleNonIndexedPropertyDescriptor non-indexed} {@code PropertyDescriptor}_variant that bypasses default JDK weak/soft reference management_ then search_through its method descriptors to find any non-void returning write methods and_update or create the corresponding {@link PropertyDescriptor} for each one found._@param delegate the wrapped {@code BeanInfo}, which is never modified_@throws IntrospectionException if any problems occur creating and adding new_property descriptors_@see #getPropertyDescriptors();public ExtendedBeanInfo(BeanInfo delegate) throws IntrospectionException {_		this.delegate = delegate___		for (PropertyDescriptor pd : delegate.getPropertyDescriptors()) {_			this.propertyDescriptors.add(pd instanceof IndexedPropertyDescriptor ?_					new SimpleIndexedPropertyDescriptor((IndexedPropertyDescriptor) pd) :_					new SimpleNonIndexedPropertyDescriptor(pd))__		}__		for (Method method : findCandidateWriteMethods(delegate.getMethodDescriptors())) {_			handleCandidateWriteMethod(method)__		}_	};wrap,the,given,link,bean,info,instance,copy,all,its,existing,property,descriptors,locally,wrapping,each,in,a,custom,link,simple,indexed,property,descriptor,indexed,or,link,simple,non,indexed,property,descriptor,non,indexed,code,property,descriptor,variant,that,bypasses,default,jdk,weak,soft,reference,management,then,search,through,its,method,descriptors,to,find,any,non,void,returning,write,methods,and,update,or,create,the,corresponding,link,property,descriptor,for,each,one,found,param,delegate,the,wrapped,code,bean,info,which,is,never,modified,throws,introspection,exception,if,any,problems,occur,creating,and,adding,new,property,descriptors,see,get,property,descriptors;public,extended,bean,info,bean,info,delegate,throws,introspection,exception,this,delegate,delegate,for,property,descriptor,pd,delegate,get,property,descriptors,this,property,descriptors,add,pd,instanceof,indexed,property,descriptor,new,simple,indexed,property,descriptor,indexed,property,descriptor,pd,new,simple,non,indexed,property,descriptor,pd,for,method,method,find,candidate,write,methods,delegate,get,method,descriptors,handle,candidate,write,method,method
ExtendedBeanInfo -> public ExtendedBeanInfo(BeanInfo delegate) throws IntrospectionException;1368482696;Wrap the given {@link BeanInfo} instance_ copy all its existing property descriptors_locally, wrapping each in a custom {@link SimpleIndexedPropertyDescriptor indexed} or_{@link SimpleNonIndexedPropertyDescriptor non-indexed} {@code PropertyDescriptor}_variant that bypasses default JDK weak/soft reference management_ then search_through its method descriptors to find any non-void returning write methods and_update or create the corresponding {@link PropertyDescriptor} for each one found._@param delegate the wrapped {@code BeanInfo}, which is never modified_@throws IntrospectionException if any problems occur creating and adding new_property descriptors_@see #getPropertyDescriptors();public ExtendedBeanInfo(BeanInfo delegate) throws IntrospectionException {_		this.delegate = delegate___		for (PropertyDescriptor pd : delegate.getPropertyDescriptors()) {_			this.propertyDescriptors.add(pd instanceof IndexedPropertyDescriptor ?_					new SimpleIndexedPropertyDescriptor((IndexedPropertyDescriptor) pd) :_					new SimpleNonIndexedPropertyDescriptor(pd))__		}__		for (Method method : findCandidateWriteMethods(delegate.getMethodDescriptors())) {_			handleCandidateWriteMethod(method)__		}_	};wrap,the,given,link,bean,info,instance,copy,all,its,existing,property,descriptors,locally,wrapping,each,in,a,custom,link,simple,indexed,property,descriptor,indexed,or,link,simple,non,indexed,property,descriptor,non,indexed,code,property,descriptor,variant,that,bypasses,default,jdk,weak,soft,reference,management,then,search,through,its,method,descriptors,to,find,any,non,void,returning,write,methods,and,update,or,create,the,corresponding,link,property,descriptor,for,each,one,found,param,delegate,the,wrapped,code,bean,info,which,is,never,modified,throws,introspection,exception,if,any,problems,occur,creating,and,adding,new,property,descriptors,see,get,property,descriptors;public,extended,bean,info,bean,info,delegate,throws,introspection,exception,this,delegate,delegate,for,property,descriptor,pd,delegate,get,property,descriptors,this,property,descriptors,add,pd,instanceof,indexed,property,descriptor,new,simple,indexed,property,descriptor,indexed,property,descriptor,pd,new,simple,non,indexed,property,descriptor,pd,for,method,method,find,candidate,write,methods,delegate,get,method,descriptors,handle,candidate,write,method,method
ExtendedBeanInfo -> public ExtendedBeanInfo(BeanInfo delegate) throws IntrospectionException;1378146384;Wrap the given {@link BeanInfo} instance_ copy all its existing property descriptors_locally, wrapping each in a custom {@link SimpleIndexedPropertyDescriptor indexed}_or {@link SimplePropertyDescriptor non-indexed} {@code PropertyDescriptor}_variant that bypasses default JDK weak/soft reference management_ then search_through its method descriptors to find any non-void returning write methods and_update or create the corresponding {@link PropertyDescriptor} for each one found._@param delegate the wrapped {@code BeanInfo}, which is never modified_@throws IntrospectionException if any problems occur creating and adding new_property descriptors_@see #getPropertyDescriptors();public ExtendedBeanInfo(BeanInfo delegate) throws IntrospectionException {_		this.delegate = delegate__		for (PropertyDescriptor pd : delegate.getPropertyDescriptors()) {_			this.propertyDescriptors.add(pd instanceof IndexedPropertyDescriptor ?_					new SimpleIndexedPropertyDescriptor((IndexedPropertyDescriptor) pd) :_					new SimplePropertyDescriptor(pd))__		}_		MethodDescriptor[] methodDescriptors = delegate.getMethodDescriptors()__		if (methodDescriptors != null) {_			for (Method method : findCandidateWriteMethods(methodDescriptors)) {_				handleCandidateWriteMethod(method)__			}_		}_	};wrap,the,given,link,bean,info,instance,copy,all,its,existing,property,descriptors,locally,wrapping,each,in,a,custom,link,simple,indexed,property,descriptor,indexed,or,link,simple,property,descriptor,non,indexed,code,property,descriptor,variant,that,bypasses,default,jdk,weak,soft,reference,management,then,search,through,its,method,descriptors,to,find,any,non,void,returning,write,methods,and,update,or,create,the,corresponding,link,property,descriptor,for,each,one,found,param,delegate,the,wrapped,code,bean,info,which,is,never,modified,throws,introspection,exception,if,any,problems,occur,creating,and,adding,new,property,descriptors,see,get,property,descriptors;public,extended,bean,info,bean,info,delegate,throws,introspection,exception,this,delegate,delegate,for,property,descriptor,pd,delegate,get,property,descriptors,this,property,descriptors,add,pd,instanceof,indexed,property,descriptor,new,simple,indexed,property,descriptor,indexed,property,descriptor,pd,new,simple,property,descriptor,pd,method,descriptor,method,descriptors,delegate,get,method,descriptors,if,method,descriptors,null,for,method,method,find,candidate,write,methods,method,descriptors,handle,candidate,write,method,method
ExtendedBeanInfo -> public ExtendedBeanInfo(BeanInfo delegate) throws IntrospectionException;1386711257;Wrap the given {@link BeanInfo} instance_ copy all its existing property descriptors_locally, wrapping each in a custom {@link SimpleIndexedPropertyDescriptor indexed}_or {@link SimplePropertyDescriptor non-indexed} {@code PropertyDescriptor}_variant that bypasses default JDK weak/soft reference management_ then search_through its method descriptors to find any non-void returning write methods and_update or create the corresponding {@link PropertyDescriptor} for each one found._@param delegate the wrapped {@code BeanInfo}, which is never modified_@throws IntrospectionException if any problems occur creating and adding new_property descriptors_@see #getPropertyDescriptors();public ExtendedBeanInfo(BeanInfo delegate) throws IntrospectionException {_		this.delegate = delegate__		for (PropertyDescriptor pd : delegate.getPropertyDescriptors()) {_			this.propertyDescriptors.add(pd instanceof IndexedPropertyDescriptor ?_					new SimpleIndexedPropertyDescriptor((IndexedPropertyDescriptor) pd) :_					new SimplePropertyDescriptor(pd))__		}_		MethodDescriptor[] methodDescriptors = delegate.getMethodDescriptors()__		if (methodDescriptors != null) {_			for (Method method : findCandidateWriteMethods(methodDescriptors)) {_				handleCandidateWriteMethod(method)__			}_		}_	};wrap,the,given,link,bean,info,instance,copy,all,its,existing,property,descriptors,locally,wrapping,each,in,a,custom,link,simple,indexed,property,descriptor,indexed,or,link,simple,property,descriptor,non,indexed,code,property,descriptor,variant,that,bypasses,default,jdk,weak,soft,reference,management,then,search,through,its,method,descriptors,to,find,any,non,void,returning,write,methods,and,update,or,create,the,corresponding,link,property,descriptor,for,each,one,found,param,delegate,the,wrapped,code,bean,info,which,is,never,modified,throws,introspection,exception,if,any,problems,occur,creating,and,adding,new,property,descriptors,see,get,property,descriptors;public,extended,bean,info,bean,info,delegate,throws,introspection,exception,this,delegate,delegate,for,property,descriptor,pd,delegate,get,property,descriptors,this,property,descriptors,add,pd,instanceof,indexed,property,descriptor,new,simple,indexed,property,descriptor,indexed,property,descriptor,pd,new,simple,property,descriptor,pd,method,descriptor,method,descriptors,delegate,get,method,descriptors,if,method,descriptors,null,for,method,method,find,candidate,write,methods,method,descriptors,handle,candidate,write,method,method
ExtendedBeanInfo -> public ExtendedBeanInfo(BeanInfo delegate) throws IntrospectionException;1409688933;Wrap the given {@link BeanInfo} instance_ copy all its existing property descriptors_locally, wrapping each in a custom {@link SimpleIndexedPropertyDescriptor indexed}_or {@link SimplePropertyDescriptor non-indexed} {@code PropertyDescriptor}_variant that bypasses default JDK weak/soft reference management_ then search_through its method descriptors to find any non-void returning write methods and_update or create the corresponding {@link PropertyDescriptor} for each one found._@param delegate the wrapped {@code BeanInfo}, which is never modified_@throws IntrospectionException if any problems occur creating and adding new_property descriptors_@see #getPropertyDescriptors();public ExtendedBeanInfo(BeanInfo delegate) throws IntrospectionException {_		this.delegate = delegate__		for (PropertyDescriptor pd : delegate.getPropertyDescriptors()) {_			this.propertyDescriptors.add(pd instanceof IndexedPropertyDescriptor ?_					new SimpleIndexedPropertyDescriptor((IndexedPropertyDescriptor) pd) :_					new SimplePropertyDescriptor(pd))__		}_		MethodDescriptor[] methodDescriptors = delegate.getMethodDescriptors()__		if (methodDescriptors != null) {_			for (Method method : findCandidateWriteMethods(methodDescriptors)) {_				handleCandidateWriteMethod(method)__			}_		}_	};wrap,the,given,link,bean,info,instance,copy,all,its,existing,property,descriptors,locally,wrapping,each,in,a,custom,link,simple,indexed,property,descriptor,indexed,or,link,simple,property,descriptor,non,indexed,code,property,descriptor,variant,that,bypasses,default,jdk,weak,soft,reference,management,then,search,through,its,method,descriptors,to,find,any,non,void,returning,write,methods,and,update,or,create,the,corresponding,link,property,descriptor,for,each,one,found,param,delegate,the,wrapped,code,bean,info,which,is,never,modified,throws,introspection,exception,if,any,problems,occur,creating,and,adding,new,property,descriptors,see,get,property,descriptors;public,extended,bean,info,bean,info,delegate,throws,introspection,exception,this,delegate,delegate,for,property,descriptor,pd,delegate,get,property,descriptors,this,property,descriptors,add,pd,instanceof,indexed,property,descriptor,new,simple,indexed,property,descriptor,indexed,property,descriptor,pd,new,simple,property,descriptor,pd,method,descriptor,method,descriptors,delegate,get,method,descriptors,if,method,descriptors,null,for,method,method,find,candidate,write,methods,method,descriptors,handle,candidate,write,method,method
ExtendedBeanInfo -> public ExtendedBeanInfo(BeanInfo delegate) throws IntrospectionException;1410903610;Wrap the given {@link BeanInfo} instance_ copy all its existing property descriptors_locally, wrapping each in a custom {@link SimpleIndexedPropertyDescriptor indexed}_or {@link SimplePropertyDescriptor non-indexed} {@code PropertyDescriptor}_variant that bypasses default JDK weak/soft reference management_ then search_through its method descriptors to find any non-void returning write methods and_update or create the corresponding {@link PropertyDescriptor} for each one found._@param delegate the wrapped {@code BeanInfo}, which is never modified_@throws IntrospectionException if any problems occur creating and adding new_property descriptors_@see #getPropertyDescriptors();public ExtendedBeanInfo(BeanInfo delegate) throws IntrospectionException {_		this.delegate = delegate__		for (PropertyDescriptor pd : delegate.getPropertyDescriptors()) {_			this.propertyDescriptors.add(pd instanceof IndexedPropertyDescriptor ?_					new SimpleIndexedPropertyDescriptor((IndexedPropertyDescriptor) pd) :_					new SimplePropertyDescriptor(pd))__		}_		MethodDescriptor[] methodDescriptors = delegate.getMethodDescriptors()__		if (methodDescriptors != null) {_			for (Method method : findCandidateWriteMethods(methodDescriptors)) {_				handleCandidateWriteMethod(method)__			}_		}_	};wrap,the,given,link,bean,info,instance,copy,all,its,existing,property,descriptors,locally,wrapping,each,in,a,custom,link,simple,indexed,property,descriptor,indexed,or,link,simple,property,descriptor,non,indexed,code,property,descriptor,variant,that,bypasses,default,jdk,weak,soft,reference,management,then,search,through,its,method,descriptors,to,find,any,non,void,returning,write,methods,and,update,or,create,the,corresponding,link,property,descriptor,for,each,one,found,param,delegate,the,wrapped,code,bean,info,which,is,never,modified,throws,introspection,exception,if,any,problems,occur,creating,and,adding,new,property,descriptors,see,get,property,descriptors;public,extended,bean,info,bean,info,delegate,throws,introspection,exception,this,delegate,delegate,for,property,descriptor,pd,delegate,get,property,descriptors,this,property,descriptors,add,pd,instanceof,indexed,property,descriptor,new,simple,indexed,property,descriptor,indexed,property,descriptor,pd,new,simple,property,descriptor,pd,method,descriptor,method,descriptors,delegate,get,method,descriptors,if,method,descriptors,null,for,method,method,find,candidate,write,methods,method,descriptors,handle,candidate,write,method,method
ExtendedBeanInfo -> public ExtendedBeanInfo(BeanInfo delegate) throws IntrospectionException;1417048908;Wrap the given {@link BeanInfo} instance_ copy all its existing property descriptors_locally, wrapping each in a custom {@link SimpleIndexedPropertyDescriptor indexed}_or {@link SimplePropertyDescriptor non-indexed} {@code PropertyDescriptor}_variant that bypasses default JDK weak/soft reference management_ then search_through its method descriptors to find any non-void returning write methods and_update or create the corresponding {@link PropertyDescriptor} for each one found._@param delegate the wrapped {@code BeanInfo}, which is never modified_@throws IntrospectionException if any problems occur creating and adding new_property descriptors_@see #getPropertyDescriptors();public ExtendedBeanInfo(BeanInfo delegate) throws IntrospectionException {_		this.delegate = delegate__		for (PropertyDescriptor pd : delegate.getPropertyDescriptors()) {_			try {_				this.propertyDescriptors.add(pd instanceof IndexedPropertyDescriptor ?_						new SimpleIndexedPropertyDescriptor((IndexedPropertyDescriptor) pd) :_						new SimplePropertyDescriptor(pd))__			}_			catch (IntrospectionException ex) {_				_				if (logger.isDebugEnabled()) {_					logger.debug("Ignoring invalid bean property '" + pd.getName() + "': " + ex.getMessage())__				}_			}_		}_		MethodDescriptor[] methodDescriptors = delegate.getMethodDescriptors()__		if (methodDescriptors != null) {_			for (Method method : findCandidateWriteMethods(methodDescriptors)) {_				try {_					handleCandidateWriteMethod(method)__				}_				catch (IntrospectionException ex) {_					_					if (logger.isDebugEnabled()) {_						logger.debug("Ignoring candidate write method [" + method + "]: " + ex.getMessage())__					}_				}_			}_		}_	};wrap,the,given,link,bean,info,instance,copy,all,its,existing,property,descriptors,locally,wrapping,each,in,a,custom,link,simple,indexed,property,descriptor,indexed,or,link,simple,property,descriptor,non,indexed,code,property,descriptor,variant,that,bypasses,default,jdk,weak,soft,reference,management,then,search,through,its,method,descriptors,to,find,any,non,void,returning,write,methods,and,update,or,create,the,corresponding,link,property,descriptor,for,each,one,found,param,delegate,the,wrapped,code,bean,info,which,is,never,modified,throws,introspection,exception,if,any,problems,occur,creating,and,adding,new,property,descriptors,see,get,property,descriptors;public,extended,bean,info,bean,info,delegate,throws,introspection,exception,this,delegate,delegate,for,property,descriptor,pd,delegate,get,property,descriptors,try,this,property,descriptors,add,pd,instanceof,indexed,property,descriptor,new,simple,indexed,property,descriptor,indexed,property,descriptor,pd,new,simple,property,descriptor,pd,catch,introspection,exception,ex,if,logger,is,debug,enabled,logger,debug,ignoring,invalid,bean,property,pd,get,name,ex,get,message,method,descriptor,method,descriptors,delegate,get,method,descriptors,if,method,descriptors,null,for,method,method,find,candidate,write,methods,method,descriptors,try,handle,candidate,write,method,method,catch,introspection,exception,ex,if,logger,is,debug,enabled,logger,debug,ignoring,candidate,write,method,method,ex,get,message
ExtendedBeanInfo -> public ExtendedBeanInfo(BeanInfo delegate) throws IntrospectionException;1432125256;Wrap the given {@link BeanInfo} instance_ copy all its existing property descriptors_locally, wrapping each in a custom {@link SimpleIndexedPropertyDescriptor indexed}_or {@link SimplePropertyDescriptor non-indexed} {@code PropertyDescriptor}_variant that bypasses default JDK weak/soft reference management_ then search_through its method descriptors to find any non-void returning write methods and_update or create the corresponding {@link PropertyDescriptor} for each one found._@param delegate the wrapped {@code BeanInfo}, which is never modified_@throws IntrospectionException if any problems occur creating and adding new_property descriptors_@see #getPropertyDescriptors();public ExtendedBeanInfo(BeanInfo delegate) throws IntrospectionException {_		this.delegate = delegate__		for (PropertyDescriptor pd : delegate.getPropertyDescriptors()) {_			try {_				this.propertyDescriptors.add(pd instanceof IndexedPropertyDescriptor ?_						new SimpleIndexedPropertyDescriptor((IndexedPropertyDescriptor) pd) :_						new SimplePropertyDescriptor(pd))__			}_			catch (IntrospectionException ex) {_				_				if (logger.isDebugEnabled()) {_					logger.debug("Ignoring invalid bean property '" + pd.getName() + "': " + ex.getMessage())__				}_			}_		}_		MethodDescriptor[] methodDescriptors = delegate.getMethodDescriptors()__		if (methodDescriptors != null) {_			for (Method method : findCandidateWriteMethods(methodDescriptors)) {_				try {_					handleCandidateWriteMethod(method)__				}_				catch (IntrospectionException ex) {_					_					if (logger.isDebugEnabled()) {_						logger.debug("Ignoring candidate write method [" + method + "]: " + ex.getMessage())__					}_				}_			}_		}_	};wrap,the,given,link,bean,info,instance,copy,all,its,existing,property,descriptors,locally,wrapping,each,in,a,custom,link,simple,indexed,property,descriptor,indexed,or,link,simple,property,descriptor,non,indexed,code,property,descriptor,variant,that,bypasses,default,jdk,weak,soft,reference,management,then,search,through,its,method,descriptors,to,find,any,non,void,returning,write,methods,and,update,or,create,the,corresponding,link,property,descriptor,for,each,one,found,param,delegate,the,wrapped,code,bean,info,which,is,never,modified,throws,introspection,exception,if,any,problems,occur,creating,and,adding,new,property,descriptors,see,get,property,descriptors;public,extended,bean,info,bean,info,delegate,throws,introspection,exception,this,delegate,delegate,for,property,descriptor,pd,delegate,get,property,descriptors,try,this,property,descriptors,add,pd,instanceof,indexed,property,descriptor,new,simple,indexed,property,descriptor,indexed,property,descriptor,pd,new,simple,property,descriptor,pd,catch,introspection,exception,ex,if,logger,is,debug,enabled,logger,debug,ignoring,invalid,bean,property,pd,get,name,ex,get,message,method,descriptor,method,descriptors,delegate,get,method,descriptors,if,method,descriptors,null,for,method,method,find,candidate,write,methods,method,descriptors,try,handle,candidate,write,method,method,catch,introspection,exception,ex,if,logger,is,debug,enabled,logger,debug,ignoring,candidate,write,method,method,ex,get,message
ExtendedBeanInfo -> public ExtendedBeanInfo(BeanInfo delegate) throws IntrospectionException;1467730834;Wrap the given {@link BeanInfo} instance_ copy all its existing property descriptors_locally, wrapping each in a custom {@link SimpleIndexedPropertyDescriptor indexed}_or {@link SimplePropertyDescriptor non-indexed} {@code PropertyDescriptor}_variant that bypasses default JDK weak/soft reference management_ then search_through its method descriptors to find any non-void returning write methods and_update or create the corresponding {@link PropertyDescriptor} for each one found._@param delegate the wrapped {@code BeanInfo}, which is never modified_@throws IntrospectionException if any problems occur creating and adding new_property descriptors_@see #getPropertyDescriptors();public ExtendedBeanInfo(BeanInfo delegate) throws IntrospectionException {_		this.delegate = delegate__		for (PropertyDescriptor pd : delegate.getPropertyDescriptors()) {_			try {_				this.propertyDescriptors.add(pd instanceof IndexedPropertyDescriptor ?_						new SimpleIndexedPropertyDescriptor((IndexedPropertyDescriptor) pd) :_						new SimplePropertyDescriptor(pd))__			}_			catch (IntrospectionException ex) {_				_				if (logger.isDebugEnabled()) {_					logger.debug("Ignoring invalid bean property '" + pd.getName() + "': " + ex.getMessage())__				}_			}_		}_		MethodDescriptor[] methodDescriptors = delegate.getMethodDescriptors()__		if (methodDescriptors != null) {_			for (Method method : findCandidateWriteMethods(methodDescriptors)) {_				try {_					handleCandidateWriteMethod(method)__				}_				catch (IntrospectionException ex) {_					_					if (logger.isDebugEnabled()) {_						logger.debug("Ignoring candidate write method [" + method + "]: " + ex.getMessage())__					}_				}_			}_		}_	};wrap,the,given,link,bean,info,instance,copy,all,its,existing,property,descriptors,locally,wrapping,each,in,a,custom,link,simple,indexed,property,descriptor,indexed,or,link,simple,property,descriptor,non,indexed,code,property,descriptor,variant,that,bypasses,default,jdk,weak,soft,reference,management,then,search,through,its,method,descriptors,to,find,any,non,void,returning,write,methods,and,update,or,create,the,corresponding,link,property,descriptor,for,each,one,found,param,delegate,the,wrapped,code,bean,info,which,is,never,modified,throws,introspection,exception,if,any,problems,occur,creating,and,adding,new,property,descriptors,see,get,property,descriptors;public,extended,bean,info,bean,info,delegate,throws,introspection,exception,this,delegate,delegate,for,property,descriptor,pd,delegate,get,property,descriptors,try,this,property,descriptors,add,pd,instanceof,indexed,property,descriptor,new,simple,indexed,property,descriptor,indexed,property,descriptor,pd,new,simple,property,descriptor,pd,catch,introspection,exception,ex,if,logger,is,debug,enabled,logger,debug,ignoring,invalid,bean,property,pd,get,name,ex,get,message,method,descriptor,method,descriptors,delegate,get,method,descriptors,if,method,descriptors,null,for,method,method,find,candidate,write,methods,method,descriptors,try,handle,candidate,write,method,method,catch,introspection,exception,ex,if,logger,is,debug,enabled,logger,debug,ignoring,candidate,write,method,method,ex,get,message
ExtendedBeanInfo -> public ExtendedBeanInfo(BeanInfo delegate) throws IntrospectionException;1467846264;Wrap the given {@link BeanInfo} instance_ copy all its existing property descriptors_locally, wrapping each in a custom {@link SimpleIndexedPropertyDescriptor indexed}_or {@link SimplePropertyDescriptor non-indexed} {@code PropertyDescriptor}_variant that bypasses default JDK weak/soft reference management_ then search_through its method descriptors to find any non-void returning write methods and_update or create the corresponding {@link PropertyDescriptor} for each one found._@param delegate the wrapped {@code BeanInfo}, which is never modified_@throws IntrospectionException if any problems occur creating and adding new_property descriptors_@see #getPropertyDescriptors();public ExtendedBeanInfo(BeanInfo delegate) throws IntrospectionException {_		this.delegate = delegate__		for (PropertyDescriptor pd : delegate.getPropertyDescriptors()) {_			try {_				this.propertyDescriptors.add(pd instanceof IndexedPropertyDescriptor ?_						new SimpleIndexedPropertyDescriptor((IndexedPropertyDescriptor) pd) :_						new SimplePropertyDescriptor(pd))__			}_			catch (IntrospectionException ex) {_				_				if (logger.isDebugEnabled()) {_					logger.debug("Ignoring invalid bean property '" + pd.getName() + "': " + ex.getMessage())__				}_			}_		}_		MethodDescriptor[] methodDescriptors = delegate.getMethodDescriptors()__		if (methodDescriptors != null) {_			for (Method method : findCandidateWriteMethods(methodDescriptors)) {_				try {_					handleCandidateWriteMethod(method)__				}_				catch (IntrospectionException ex) {_					_					if (logger.isDebugEnabled()) {_						logger.debug("Ignoring candidate write method [" + method + "]: " + ex.getMessage())__					}_				}_			}_		}_	};wrap,the,given,link,bean,info,instance,copy,all,its,existing,property,descriptors,locally,wrapping,each,in,a,custom,link,simple,indexed,property,descriptor,indexed,or,link,simple,property,descriptor,non,indexed,code,property,descriptor,variant,that,bypasses,default,jdk,weak,soft,reference,management,then,search,through,its,method,descriptors,to,find,any,non,void,returning,write,methods,and,update,or,create,the,corresponding,link,property,descriptor,for,each,one,found,param,delegate,the,wrapped,code,bean,info,which,is,never,modified,throws,introspection,exception,if,any,problems,occur,creating,and,adding,new,property,descriptors,see,get,property,descriptors;public,extended,bean,info,bean,info,delegate,throws,introspection,exception,this,delegate,delegate,for,property,descriptor,pd,delegate,get,property,descriptors,try,this,property,descriptors,add,pd,instanceof,indexed,property,descriptor,new,simple,indexed,property,descriptor,indexed,property,descriptor,pd,new,simple,property,descriptor,pd,catch,introspection,exception,ex,if,logger,is,debug,enabled,logger,debug,ignoring,invalid,bean,property,pd,get,name,ex,get,message,method,descriptor,method,descriptors,delegate,get,method,descriptors,if,method,descriptors,null,for,method,method,find,candidate,write,methods,method,descriptors,try,handle,candidate,write,method,method,catch,introspection,exception,ex,if,logger,is,debug,enabled,logger,debug,ignoring,candidate,write,method,method,ex,get,message
ExtendedBeanInfo -> public ExtendedBeanInfo(BeanInfo delegate) throws IntrospectionException;1495868221;Wrap the given {@link BeanInfo} instance_ copy all its existing property descriptors_locally, wrapping each in a custom {@link SimpleIndexedPropertyDescriptor indexed}_or {@link SimplePropertyDescriptor non-indexed} {@code PropertyDescriptor}_variant that bypasses default JDK weak/soft reference management_ then search_through its method descriptors to find any non-void returning write methods and_update or create the corresponding {@link PropertyDescriptor} for each one found._@param delegate the wrapped {@code BeanInfo}, which is never modified_@throws IntrospectionException if any problems occur creating and adding new_property descriptors_@see #getPropertyDescriptors();public ExtendedBeanInfo(BeanInfo delegate) throws IntrospectionException {_		this.delegate = delegate__		for (PropertyDescriptor pd : delegate.getPropertyDescriptors()) {_			try {_				this.propertyDescriptors.add(pd instanceof IndexedPropertyDescriptor ?_						new SimpleIndexedPropertyDescriptor((IndexedPropertyDescriptor) pd) :_						new SimplePropertyDescriptor(pd))__			}_			catch (IntrospectionException ex) {_				_				if (logger.isDebugEnabled()) {_					logger.debug("Ignoring invalid bean property '" + pd.getName() + "': " + ex.getMessage())__				}_			}_		}_		MethodDescriptor[] methodDescriptors = delegate.getMethodDescriptors()__		if (methodDescriptors != null) {_			for (Method method : findCandidateWriteMethods(methodDescriptors)) {_				try {_					handleCandidateWriteMethod(method)__				}_				catch (IntrospectionException ex) {_					_					if (logger.isDebugEnabled()) {_						logger.debug("Ignoring candidate write method [" + method + "]: " + ex.getMessage())__					}_				}_			}_		}_	};wrap,the,given,link,bean,info,instance,copy,all,its,existing,property,descriptors,locally,wrapping,each,in,a,custom,link,simple,indexed,property,descriptor,indexed,or,link,simple,property,descriptor,non,indexed,code,property,descriptor,variant,that,bypasses,default,jdk,weak,soft,reference,management,then,search,through,its,method,descriptors,to,find,any,non,void,returning,write,methods,and,update,or,create,the,corresponding,link,property,descriptor,for,each,one,found,param,delegate,the,wrapped,code,bean,info,which,is,never,modified,throws,introspection,exception,if,any,problems,occur,creating,and,adding,new,property,descriptors,see,get,property,descriptors;public,extended,bean,info,bean,info,delegate,throws,introspection,exception,this,delegate,delegate,for,property,descriptor,pd,delegate,get,property,descriptors,try,this,property,descriptors,add,pd,instanceof,indexed,property,descriptor,new,simple,indexed,property,descriptor,indexed,property,descriptor,pd,new,simple,property,descriptor,pd,catch,introspection,exception,ex,if,logger,is,debug,enabled,logger,debug,ignoring,invalid,bean,property,pd,get,name,ex,get,message,method,descriptor,method,descriptors,delegate,get,method,descriptors,if,method,descriptors,null,for,method,method,find,candidate,write,methods,method,descriptors,try,handle,candidate,write,method,method,catch,introspection,exception,ex,if,logger,is,debug,enabled,logger,debug,ignoring,candidate,write,method,method,ex,get,message
ExtendedBeanInfo -> public ExtendedBeanInfo(BeanInfo delegate) throws IntrospectionException;1496259743;Wrap the given {@link BeanInfo} instance_ copy all its existing property descriptors_locally, wrapping each in a custom {@link SimpleIndexedPropertyDescriptor indexed}_or {@link SimplePropertyDescriptor non-indexed} {@code PropertyDescriptor}_variant that bypasses default JDK weak/soft reference management_ then search_through its method descriptors to find any non-void returning write methods and_update or create the corresponding {@link PropertyDescriptor} for each one found._@param delegate the wrapped {@code BeanInfo}, which is never modified_@throws IntrospectionException if any problems occur creating and adding new_property descriptors_@see #getPropertyDescriptors();public ExtendedBeanInfo(BeanInfo delegate) throws IntrospectionException {_		this.delegate = delegate__		for (PropertyDescriptor pd : delegate.getPropertyDescriptors()) {_			try {_				this.propertyDescriptors.add(pd instanceof IndexedPropertyDescriptor ?_						new SimpleIndexedPropertyDescriptor((IndexedPropertyDescriptor) pd) :_						new SimplePropertyDescriptor(pd))__			}_			catch (IntrospectionException ex) {_				_				if (logger.isDebugEnabled()) {_					logger.debug("Ignoring invalid bean property '" + pd.getName() + "': " + ex.getMessage())__				}_			}_		}_		MethodDescriptor[] methodDescriptors = delegate.getMethodDescriptors()__		if (methodDescriptors != null) {_			for (Method method : findCandidateWriteMethods(methodDescriptors)) {_				try {_					handleCandidateWriteMethod(method)__				}_				catch (IntrospectionException ex) {_					_					if (logger.isDebugEnabled()) {_						logger.debug("Ignoring candidate write method [" + method + "]: " + ex.getMessage())__					}_				}_			}_		}_	};wrap,the,given,link,bean,info,instance,copy,all,its,existing,property,descriptors,locally,wrapping,each,in,a,custom,link,simple,indexed,property,descriptor,indexed,or,link,simple,property,descriptor,non,indexed,code,property,descriptor,variant,that,bypasses,default,jdk,weak,soft,reference,management,then,search,through,its,method,descriptors,to,find,any,non,void,returning,write,methods,and,update,or,create,the,corresponding,link,property,descriptor,for,each,one,found,param,delegate,the,wrapped,code,bean,info,which,is,never,modified,throws,introspection,exception,if,any,problems,occur,creating,and,adding,new,property,descriptors,see,get,property,descriptors;public,extended,bean,info,bean,info,delegate,throws,introspection,exception,this,delegate,delegate,for,property,descriptor,pd,delegate,get,property,descriptors,try,this,property,descriptors,add,pd,instanceof,indexed,property,descriptor,new,simple,indexed,property,descriptor,indexed,property,descriptor,pd,new,simple,property,descriptor,pd,catch,introspection,exception,ex,if,logger,is,debug,enabled,logger,debug,ignoring,invalid,bean,property,pd,get,name,ex,get,message,method,descriptor,method,descriptors,delegate,get,method,descriptors,if,method,descriptors,null,for,method,method,find,candidate,write,methods,method,descriptors,try,handle,candidate,write,method,method,catch,introspection,exception,ex,if,logger,is,debug,enabled,logger,debug,ignoring,candidate,write,method,method,ex,get,message
ExtendedBeanInfo -> public ExtendedBeanInfo(BeanInfo delegate) throws IntrospectionException;1497341397;Wrap the given {@link BeanInfo} instance_ copy all its existing property descriptors_locally, wrapping each in a custom {@link SimpleIndexedPropertyDescriptor indexed}_or {@link SimplePropertyDescriptor non-indexed} {@code PropertyDescriptor}_variant that bypasses default JDK weak/soft reference management_ then search_through its method descriptors to find any non-void returning write methods and_update or create the corresponding {@link PropertyDescriptor} for each one found._@param delegate the wrapped {@code BeanInfo}, which is never modified_@throws IntrospectionException if any problems occur creating and adding new_property descriptors_@see #getPropertyDescriptors();public ExtendedBeanInfo(BeanInfo delegate) throws IntrospectionException {_		this.delegate = delegate__		for (PropertyDescriptor pd : delegate.getPropertyDescriptors()) {_			try {_				this.propertyDescriptors.add(pd instanceof IndexedPropertyDescriptor ?_						new SimpleIndexedPropertyDescriptor((IndexedPropertyDescriptor) pd) :_						new SimplePropertyDescriptor(pd))__			}_			catch (IntrospectionException ex) {_				_				if (logger.isDebugEnabled()) {_					logger.debug("Ignoring invalid bean property '" + pd.getName() + "': " + ex.getMessage())__				}_			}_		}_		MethodDescriptor[] methodDescriptors = delegate.getMethodDescriptors()__		if (methodDescriptors != null) {_			for (Method method : findCandidateWriteMethods(methodDescriptors)) {_				try {_					handleCandidateWriteMethod(method)__				}_				catch (IntrospectionException ex) {_					_					if (logger.isDebugEnabled()) {_						logger.debug("Ignoring candidate write method [" + method + "]: " + ex.getMessage())__					}_				}_			}_		}_	};wrap,the,given,link,bean,info,instance,copy,all,its,existing,property,descriptors,locally,wrapping,each,in,a,custom,link,simple,indexed,property,descriptor,indexed,or,link,simple,property,descriptor,non,indexed,code,property,descriptor,variant,that,bypasses,default,jdk,weak,soft,reference,management,then,search,through,its,method,descriptors,to,find,any,non,void,returning,write,methods,and,update,or,create,the,corresponding,link,property,descriptor,for,each,one,found,param,delegate,the,wrapped,code,bean,info,which,is,never,modified,throws,introspection,exception,if,any,problems,occur,creating,and,adding,new,property,descriptors,see,get,property,descriptors;public,extended,bean,info,bean,info,delegate,throws,introspection,exception,this,delegate,delegate,for,property,descriptor,pd,delegate,get,property,descriptors,try,this,property,descriptors,add,pd,instanceof,indexed,property,descriptor,new,simple,indexed,property,descriptor,indexed,property,descriptor,pd,new,simple,property,descriptor,pd,catch,introspection,exception,ex,if,logger,is,debug,enabled,logger,debug,ignoring,invalid,bean,property,pd,get,name,ex,get,message,method,descriptor,method,descriptors,delegate,get,method,descriptors,if,method,descriptors,null,for,method,method,find,candidate,write,methods,method,descriptors,try,handle,candidate,write,method,method,catch,introspection,exception,ex,if,logger,is,debug,enabled,logger,debug,ignoring,candidate,write,method,method,ex,get,message
ExtendedBeanInfo -> public ExtendedBeanInfo(BeanInfo delegate) throws IntrospectionException;1498780456;Wrap the given {@link BeanInfo} instance_ copy all its existing property descriptors_locally, wrapping each in a custom {@link SimpleIndexedPropertyDescriptor indexed}_or {@link SimplePropertyDescriptor non-indexed} {@code PropertyDescriptor}_variant that bypasses default JDK weak/soft reference management_ then search_through its method descriptors to find any non-void returning write methods and_update or create the corresponding {@link PropertyDescriptor} for each one found._@param delegate the wrapped {@code BeanInfo}, which is never modified_@throws IntrospectionException if any problems occur creating and adding new_property descriptors_@see #getPropertyDescriptors();public ExtendedBeanInfo(BeanInfo delegate) throws IntrospectionException {_		this.delegate = delegate__		for (PropertyDescriptor pd : delegate.getPropertyDescriptors()) {_			try {_				this.propertyDescriptors.add(pd instanceof IndexedPropertyDescriptor ?_						new SimpleIndexedPropertyDescriptor((IndexedPropertyDescriptor) pd) :_						new SimplePropertyDescriptor(pd))__			}_			catch (IntrospectionException ex) {_				_				if (logger.isDebugEnabled()) {_					logger.debug("Ignoring invalid bean property '" + pd.getName() + "': " + ex.getMessage())__				}_			}_		}_		MethodDescriptor[] methodDescriptors = delegate.getMethodDescriptors()__		if (methodDescriptors != null) {_			for (Method method : findCandidateWriteMethods(methodDescriptors)) {_				try {_					handleCandidateWriteMethod(method)__				}_				catch (IntrospectionException ex) {_					_					if (logger.isDebugEnabled()) {_						logger.debug("Ignoring candidate write method [" + method + "]: " + ex.getMessage())__					}_				}_			}_		}_	};wrap,the,given,link,bean,info,instance,copy,all,its,existing,property,descriptors,locally,wrapping,each,in,a,custom,link,simple,indexed,property,descriptor,indexed,or,link,simple,property,descriptor,non,indexed,code,property,descriptor,variant,that,bypasses,default,jdk,weak,soft,reference,management,then,search,through,its,method,descriptors,to,find,any,non,void,returning,write,methods,and,update,or,create,the,corresponding,link,property,descriptor,for,each,one,found,param,delegate,the,wrapped,code,bean,info,which,is,never,modified,throws,introspection,exception,if,any,problems,occur,creating,and,adding,new,property,descriptors,see,get,property,descriptors;public,extended,bean,info,bean,info,delegate,throws,introspection,exception,this,delegate,delegate,for,property,descriptor,pd,delegate,get,property,descriptors,try,this,property,descriptors,add,pd,instanceof,indexed,property,descriptor,new,simple,indexed,property,descriptor,indexed,property,descriptor,pd,new,simple,property,descriptor,pd,catch,introspection,exception,ex,if,logger,is,debug,enabled,logger,debug,ignoring,invalid,bean,property,pd,get,name,ex,get,message,method,descriptor,method,descriptors,delegate,get,method,descriptors,if,method,descriptors,null,for,method,method,find,candidate,write,methods,method,descriptors,try,handle,candidate,write,method,method,catch,introspection,exception,ex,if,logger,is,debug,enabled,logger,debug,ignoring,candidate,write,method,method,ex,get,message
ExtendedBeanInfo -> public ExtendedBeanInfo(BeanInfo delegate) throws IntrospectionException;1500448076;Wrap the given {@link BeanInfo} instance_ copy all its existing property descriptors_locally, wrapping each in a custom {@link SimpleIndexedPropertyDescriptor indexed}_or {@link SimplePropertyDescriptor non-indexed} {@code PropertyDescriptor}_variant that bypasses default JDK weak/soft reference management_ then search_through its method descriptors to find any non-void returning write methods and_update or create the corresponding {@link PropertyDescriptor} for each one found._@param delegate the wrapped {@code BeanInfo}, which is never modified_@throws IntrospectionException if any problems occur creating and adding new_property descriptors_@see #getPropertyDescriptors();public ExtendedBeanInfo(BeanInfo delegate) throws IntrospectionException {_		this.delegate = delegate__		for (PropertyDescriptor pd : delegate.getPropertyDescriptors()) {_			try {_				this.propertyDescriptors.add(pd instanceof IndexedPropertyDescriptor ?_						new SimpleIndexedPropertyDescriptor((IndexedPropertyDescriptor) pd) :_						new SimplePropertyDescriptor(pd))__			}_			catch (IntrospectionException ex) {_				_				if (logger.isDebugEnabled()) {_					logger.debug("Ignoring invalid bean property '" + pd.getName() + "': " + ex.getMessage())__				}_			}_		}_		MethodDescriptor[] methodDescriptors = delegate.getMethodDescriptors()__		if (methodDescriptors != null) {_			for (Method method : findCandidateWriteMethods(methodDescriptors)) {_				try {_					handleCandidateWriteMethod(method)__				}_				catch (IntrospectionException ex) {_					_					if (logger.isDebugEnabled()) {_						logger.debug("Ignoring candidate write method [" + method + "]: " + ex.getMessage())__					}_				}_			}_		}_	};wrap,the,given,link,bean,info,instance,copy,all,its,existing,property,descriptors,locally,wrapping,each,in,a,custom,link,simple,indexed,property,descriptor,indexed,or,link,simple,property,descriptor,non,indexed,code,property,descriptor,variant,that,bypasses,default,jdk,weak,soft,reference,management,then,search,through,its,method,descriptors,to,find,any,non,void,returning,write,methods,and,update,or,create,the,corresponding,link,property,descriptor,for,each,one,found,param,delegate,the,wrapped,code,bean,info,which,is,never,modified,throws,introspection,exception,if,any,problems,occur,creating,and,adding,new,property,descriptors,see,get,property,descriptors;public,extended,bean,info,bean,info,delegate,throws,introspection,exception,this,delegate,delegate,for,property,descriptor,pd,delegate,get,property,descriptors,try,this,property,descriptors,add,pd,instanceof,indexed,property,descriptor,new,simple,indexed,property,descriptor,indexed,property,descriptor,pd,new,simple,property,descriptor,pd,catch,introspection,exception,ex,if,logger,is,debug,enabled,logger,debug,ignoring,invalid,bean,property,pd,get,name,ex,get,message,method,descriptor,method,descriptors,delegate,get,method,descriptors,if,method,descriptors,null,for,method,method,find,candidate,write,methods,method,descriptors,try,handle,candidate,write,method,method,catch,introspection,exception,ex,if,logger,is,debug,enabled,logger,debug,ignoring,candidate,write,method,method,ex,get,message
ExtendedBeanInfo -> public ExtendedBeanInfo(BeanInfo delegate) throws IntrospectionException;1519295386;Wrap the given {@link BeanInfo} instance_ copy all its existing property descriptors_locally, wrapping each in a custom {@link SimpleIndexedPropertyDescriptor indexed}_or {@link SimplePropertyDescriptor non-indexed} {@code PropertyDescriptor}_variant that bypasses default JDK weak/soft reference management_ then search_through its method descriptors to find any non-void returning write methods and_update or create the corresponding {@link PropertyDescriptor} for each one found._@param delegate the wrapped {@code BeanInfo}, which is never modified_@throws IntrospectionException if any problems occur creating and adding new_property descriptors_@see #getPropertyDescriptors();public ExtendedBeanInfo(BeanInfo delegate) throws IntrospectionException {_		this.delegate = delegate__		for (PropertyDescriptor pd : delegate.getPropertyDescriptors()) {_			try {_				this.propertyDescriptors.add(pd instanceof IndexedPropertyDescriptor ?_						new SimpleIndexedPropertyDescriptor((IndexedPropertyDescriptor) pd) :_						new SimplePropertyDescriptor(pd))__			}_			catch (IntrospectionException ex) {_				_				if (logger.isDebugEnabled()) {_					logger.debug("Ignoring invalid bean property '" + pd.getName() + "': " + ex.getMessage())__				}_			}_		}_		MethodDescriptor[] methodDescriptors = delegate.getMethodDescriptors()__		if (methodDescriptors != null) {_			for (Method method : findCandidateWriteMethods(methodDescriptors)) {_				try {_					handleCandidateWriteMethod(method)__				}_				catch (IntrospectionException ex) {_					_					if (logger.isDebugEnabled()) {_						logger.debug("Ignoring candidate write method [" + method + "]: " + ex.getMessage())__					}_				}_			}_		}_	};wrap,the,given,link,bean,info,instance,copy,all,its,existing,property,descriptors,locally,wrapping,each,in,a,custom,link,simple,indexed,property,descriptor,indexed,or,link,simple,property,descriptor,non,indexed,code,property,descriptor,variant,that,bypasses,default,jdk,weak,soft,reference,management,then,search,through,its,method,descriptors,to,find,any,non,void,returning,write,methods,and,update,or,create,the,corresponding,link,property,descriptor,for,each,one,found,param,delegate,the,wrapped,code,bean,info,which,is,never,modified,throws,introspection,exception,if,any,problems,occur,creating,and,adding,new,property,descriptors,see,get,property,descriptors;public,extended,bean,info,bean,info,delegate,throws,introspection,exception,this,delegate,delegate,for,property,descriptor,pd,delegate,get,property,descriptors,try,this,property,descriptors,add,pd,instanceof,indexed,property,descriptor,new,simple,indexed,property,descriptor,indexed,property,descriptor,pd,new,simple,property,descriptor,pd,catch,introspection,exception,ex,if,logger,is,debug,enabled,logger,debug,ignoring,invalid,bean,property,pd,get,name,ex,get,message,method,descriptor,method,descriptors,delegate,get,method,descriptors,if,method,descriptors,null,for,method,method,find,candidate,write,methods,method,descriptors,try,handle,candidate,write,method,method,catch,introspection,exception,ex,if,logger,is,debug,enabled,logger,debug,ignoring,candidate,write,method,method,ex,get,message
ExtendedBeanInfo -> public ExtendedBeanInfo(BeanInfo delegate) throws IntrospectionException;1530174524;Wrap the given {@link BeanInfo} instance_ copy all its existing property descriptors_locally, wrapping each in a custom {@link SimpleIndexedPropertyDescriptor indexed}_or {@link SimplePropertyDescriptor non-indexed} {@code PropertyDescriptor}_variant that bypasses default JDK weak/soft reference management_ then search_through its method descriptors to find any non-void returning write methods and_update or create the corresponding {@link PropertyDescriptor} for each one found._@param delegate the wrapped {@code BeanInfo}, which is never modified_@throws IntrospectionException if any problems occur creating and adding new_property descriptors_@see #getPropertyDescriptors();public ExtendedBeanInfo(BeanInfo delegate) throws IntrospectionException {_		this.delegate = delegate__		for (PropertyDescriptor pd : delegate.getPropertyDescriptors()) {_			try {_				this.propertyDescriptors.add(pd instanceof IndexedPropertyDescriptor ?_						new SimpleIndexedPropertyDescriptor((IndexedPropertyDescriptor) pd) :_						new SimplePropertyDescriptor(pd))__			}_			catch (IntrospectionException ex) {_				_				if (logger.isDebugEnabled()) {_					logger.debug("Ignoring invalid bean property '" + pd.getName() + "': " + ex.getMessage())__				}_			}_		}_		MethodDescriptor[] methodDescriptors = delegate.getMethodDescriptors()__		if (methodDescriptors != null) {_			for (Method method : findCandidateWriteMethods(methodDescriptors)) {_				try {_					handleCandidateWriteMethod(method)__				}_				catch (IntrospectionException ex) {_					_					if (logger.isDebugEnabled()) {_						logger.debug("Ignoring candidate write method [" + method + "]: " + ex.getMessage())__					}_				}_			}_		}_	};wrap,the,given,link,bean,info,instance,copy,all,its,existing,property,descriptors,locally,wrapping,each,in,a,custom,link,simple,indexed,property,descriptor,indexed,or,link,simple,property,descriptor,non,indexed,code,property,descriptor,variant,that,bypasses,default,jdk,weak,soft,reference,management,then,search,through,its,method,descriptors,to,find,any,non,void,returning,write,methods,and,update,or,create,the,corresponding,link,property,descriptor,for,each,one,found,param,delegate,the,wrapped,code,bean,info,which,is,never,modified,throws,introspection,exception,if,any,problems,occur,creating,and,adding,new,property,descriptors,see,get,property,descriptors;public,extended,bean,info,bean,info,delegate,throws,introspection,exception,this,delegate,delegate,for,property,descriptor,pd,delegate,get,property,descriptors,try,this,property,descriptors,add,pd,instanceof,indexed,property,descriptor,new,simple,indexed,property,descriptor,indexed,property,descriptor,pd,new,simple,property,descriptor,pd,catch,introspection,exception,ex,if,logger,is,debug,enabled,logger,debug,ignoring,invalid,bean,property,pd,get,name,ex,get,message,method,descriptor,method,descriptors,delegate,get,method,descriptors,if,method,descriptors,null,for,method,method,find,candidate,write,methods,method,descriptors,try,handle,candidate,write,method,method,catch,introspection,exception,ex,if,logger,is,debug,enabled,logger,debug,ignoring,candidate,write,method,method,ex,get,message
PropertyDescriptorUtils -> public static boolean equals(PropertyDescriptor pd1, Object obj);1353842900;Compare the given {@link PropertyDescriptor} against the given {@link Object} and_return {@code true} if they are objects are equivalent, i.e. both are {@code_PropertyDescriptor}s whose read method, write method, property types, property_editor and flags are equivalent.__@see PropertyDescriptor#equals(Object);public static boolean equals(PropertyDescriptor pd1, Object obj) {_		if (pd1 == obj) {_			return true__		}_		if (obj != null && obj instanceof PropertyDescriptor) {_			PropertyDescriptor pd2 = (PropertyDescriptor) obj__			if (!compareMethods(pd1.getReadMethod(), pd2.getReadMethod())) {_				return false__			}__			if (!compareMethods(pd1.getWriteMethod(), pd2.getWriteMethod())) {_				return false__			}__			if (pd1.getPropertyType() == pd2.getPropertyType()_					&& pd1.getPropertyEditorClass() == pd2.getPropertyEditorClass()_					&& pd1.isBound() == pd2.isBound()_					&& pd1.isConstrained() == pd2.isConstrained()) {_				return true__			}_		}_		return false__	};compare,the,given,link,property,descriptor,against,the,given,link,object,and,return,code,true,if,they,are,objects,are,equivalent,i,e,both,are,code,property,descriptor,s,whose,read,method,write,method,property,types,property,editor,and,flags,are,equivalent,see,property,descriptor,equals,object;public,static,boolean,equals,property,descriptor,pd1,object,obj,if,pd1,obj,return,true,if,obj,null,obj,instanceof,property,descriptor,property,descriptor,pd2,property,descriptor,obj,if,compare,methods,pd1,get,read,method,pd2,get,read,method,return,false,if,compare,methods,pd1,get,write,method,pd2,get,write,method,return,false,if,pd1,get,property,type,pd2,get,property,type,pd1,get,property,editor,class,pd2,get,property,editor,class,pd1,is,bound,pd2,is,bound,pd1,is,constrained,pd2,is,constrained,return,true,return,false
PropertyDescriptorUtils -> public static boolean equals(PropertyDescriptor pd1, Object obj);1355966262;Compare the given {@link PropertyDescriptor} against the given {@link Object} and_return {@code true} if they are objects are equivalent, i.e. both are {@code_PropertyDescriptor}s whose read method, write method, property types, property_editor and flags are equivalent.__@see PropertyDescriptor#equals(Object);public static boolean equals(PropertyDescriptor pd1, Object obj) {_		if (pd1 == obj) {_			return true__		}_		if (obj != null && obj instanceof PropertyDescriptor) {_			PropertyDescriptor pd2 = (PropertyDescriptor) obj__			if (!compareMethods(pd1.getReadMethod(), pd2.getReadMethod())) {_				return false__			}__			if (!compareMethods(pd1.getWriteMethod(), pd2.getWriteMethod())) {_				return false__			}__			if (pd1.getPropertyType() == pd2.getPropertyType()_					&& pd1.getPropertyEditorClass() == pd2.getPropertyEditorClass()_					&& pd1.isBound() == pd2.isBound()_					&& pd1.isConstrained() == pd2.isConstrained()) {_				return true__			}_		}_		return false__	};compare,the,given,link,property,descriptor,against,the,given,link,object,and,return,code,true,if,they,are,objects,are,equivalent,i,e,both,are,code,property,descriptor,s,whose,read,method,write,method,property,types,property,editor,and,flags,are,equivalent,see,property,descriptor,equals,object;public,static,boolean,equals,property,descriptor,pd1,object,obj,if,pd1,obj,return,true,if,obj,null,obj,instanceof,property,descriptor,property,descriptor,pd2,property,descriptor,obj,if,compare,methods,pd1,get,read,method,pd2,get,read,method,return,false,if,compare,methods,pd1,get,write,method,pd2,get,write,method,return,false,if,pd1,get,property,type,pd2,get,property,type,pd1,get,property,editor,class,pd2,get,property,editor,class,pd1,is,bound,pd2,is,bound,pd1,is,constrained,pd2,is,constrained,return,true,return,false
PropertyDescriptorUtils -> public static boolean equals(PropertyDescriptor pd1, Object obj);1356735495;Compare the given {@link PropertyDescriptor} against the given {@link Object} and_return {@code true} if they are objects are equivalent, i.e. both are {@code_PropertyDescriptor}s whose read method, write method, property types, property_editor and flags are equivalent.__@see PropertyDescriptor#equals(Object);public static boolean equals(PropertyDescriptor pd1, Object obj) {_		if (pd1 == obj) {_			return true__		}_		if (obj != null && obj instanceof PropertyDescriptor) {_			PropertyDescriptor pd2 = (PropertyDescriptor) obj__			if (!compareMethods(pd1.getReadMethod(), pd2.getReadMethod())) {_				return false__			}__			if (!compareMethods(pd1.getWriteMethod(), pd2.getWriteMethod())) {_				return false__			}__			if (pd1.getPropertyType() == pd2.getPropertyType()_					&& pd1.getPropertyEditorClass() == pd2.getPropertyEditorClass()_					&& pd1.isBound() == pd2.isBound()_					&& pd1.isConstrained() == pd2.isConstrained()) {_				return true__			}_		}_		return false__	};compare,the,given,link,property,descriptor,against,the,given,link,object,and,return,code,true,if,they,are,objects,are,equivalent,i,e,both,are,code,property,descriptor,s,whose,read,method,write,method,property,types,property,editor,and,flags,are,equivalent,see,property,descriptor,equals,object;public,static,boolean,equals,property,descriptor,pd1,object,obj,if,pd1,obj,return,true,if,obj,null,obj,instanceof,property,descriptor,property,descriptor,pd2,property,descriptor,obj,if,compare,methods,pd1,get,read,method,pd2,get,read,method,return,false,if,compare,methods,pd1,get,write,method,pd2,get,write,method,return,false,if,pd1,get,property,type,pd2,get,property,type,pd1,get,property,editor,class,pd2,get,property,editor,class,pd1,is,bound,pd2,is,bound,pd1,is,constrained,pd2,is,constrained,return,true,return,false
PropertyDescriptorUtils -> public static boolean equals(PropertyDescriptor pd1, Object obj);1357119239;Compare the given {@link PropertyDescriptor} against the given {@link Object} and_return {@code true} if they are objects are equivalent, i.e. both are {@code_PropertyDescriptor}s whose read method, write method, property types, property_editor and flags are equivalent.__@see PropertyDescriptor#equals(Object);public static boolean equals(PropertyDescriptor pd1, Object obj) {_		if (pd1 == obj) {_			return true__		}_		if (obj != null && obj instanceof PropertyDescriptor) {_			PropertyDescriptor pd2 = (PropertyDescriptor) obj__			if (!compareMethods(pd1.getReadMethod(), pd2.getReadMethod())) {_				return false__			}__			if (!compareMethods(pd1.getWriteMethod(), pd2.getWriteMethod())) {_				return false__			}__			if (pd1.getPropertyType() == pd2.getPropertyType()_					&& pd1.getPropertyEditorClass() == pd2.getPropertyEditorClass()_					&& pd1.isBound() == pd2.isBound()_					&& pd1.isConstrained() == pd2.isConstrained()) {_				return true__			}_		}_		return false__	};compare,the,given,link,property,descriptor,against,the,given,link,object,and,return,code,true,if,they,are,objects,are,equivalent,i,e,both,are,code,property,descriptor,s,whose,read,method,write,method,property,types,property,editor,and,flags,are,equivalent,see,property,descriptor,equals,object;public,static,boolean,equals,property,descriptor,pd1,object,obj,if,pd1,obj,return,true,if,obj,null,obj,instanceof,property,descriptor,property,descriptor,pd2,property,descriptor,obj,if,compare,methods,pd1,get,read,method,pd2,get,read,method,return,false,if,compare,methods,pd1,get,write,method,pd2,get,write,method,return,false,if,pd1,get,property,type,pd2,get,property,type,pd1,get,property,editor,class,pd2,get,property,editor,class,pd1,is,bound,pd2,is,bound,pd1,is,constrained,pd2,is,constrained,return,true,return,false
PropertyDescriptorUtils -> public static boolean equals(PropertyDescriptor pd1, Object obj);1357119417;Compare the given {@link PropertyDescriptor} against the given {@link Object} and_return {@code true} if they are objects are equivalent, i.e. both are {@code_PropertyDescriptor}s whose read method, write method, property types, property_editor and flags are equivalent.__@see PropertyDescriptor#equals(Object);public static boolean equals(PropertyDescriptor pd1, Object obj) {_		if (pd1 == obj) {_			return true__		}_		if (obj != null && obj instanceof PropertyDescriptor) {_			PropertyDescriptor pd2 = (PropertyDescriptor) obj__			if (!compareMethods(pd1.getReadMethod(), pd2.getReadMethod())) {_				return false__			}__			if (!compareMethods(pd1.getWriteMethod(), pd2.getWriteMethod())) {_				return false__			}__			if (pd1.getPropertyType() == pd2.getPropertyType()_					&& pd1.getPropertyEditorClass() == pd2.getPropertyEditorClass()_					&& pd1.isBound() == pd2.isBound()_					&& pd1.isConstrained() == pd2.isConstrained()) {_				return true__			}_		}_		return false__	};compare,the,given,link,property,descriptor,against,the,given,link,object,and,return,code,true,if,they,are,objects,are,equivalent,i,e,both,are,code,property,descriptor,s,whose,read,method,write,method,property,types,property,editor,and,flags,are,equivalent,see,property,descriptor,equals,object;public,static,boolean,equals,property,descriptor,pd1,object,obj,if,pd1,obj,return,true,if,obj,null,obj,instanceof,property,descriptor,property,descriptor,pd2,property,descriptor,obj,if,compare,methods,pd1,get,read,method,pd2,get,read,method,return,false,if,compare,methods,pd1,get,write,method,pd2,get,write,method,return,false,if,pd1,get,property,type,pd2,get,property,type,pd1,get,property,editor,class,pd2,get,property,editor,class,pd1,is,bound,pd2,is,bound,pd1,is,constrained,pd2,is,constrained,return,true,return,false
PropertyDescriptorUtils -> public static boolean equals(PropertyDescriptor pd1, Object obj);1362408075;Compare the given {@link PropertyDescriptor} against the given {@link Object} and_return {@code true} if they are objects are equivalent, i.e. both are {@code_PropertyDescriptor}s whose read method, write method, property types, property_editor and flags are equivalent.__@see PropertyDescriptor#equals(Object);public static boolean equals(PropertyDescriptor pd1, Object obj) {_		if (pd1 == obj) {_			return true__		}_		if (obj != null && obj instanceof PropertyDescriptor) {_			PropertyDescriptor pd2 = (PropertyDescriptor) obj__			if (!compareMethods(pd1.getReadMethod(), pd2.getReadMethod())) {_				return false__			}__			if (!compareMethods(pd1.getWriteMethod(), pd2.getWriteMethod())) {_				return false__			}__			if (pd1.getPropertyType() == pd2.getPropertyType()_					&& pd1.getPropertyEditorClass() == pd2.getPropertyEditorClass()_					&& pd1.isBound() == pd2.isBound()_					&& pd1.isConstrained() == pd2.isConstrained()) {_				return true__			}_		}_		return false__	};compare,the,given,link,property,descriptor,against,the,given,link,object,and,return,code,true,if,they,are,objects,are,equivalent,i,e,both,are,code,property,descriptor,s,whose,read,method,write,method,property,types,property,editor,and,flags,are,equivalent,see,property,descriptor,equals,object;public,static,boolean,equals,property,descriptor,pd1,object,obj,if,pd1,obj,return,true,if,obj,null,obj,instanceof,property,descriptor,property,descriptor,pd2,property,descriptor,obj,if,compare,methods,pd1,get,read,method,pd2,get,read,method,return,false,if,compare,methods,pd1,get,write,method,pd2,get,write,method,return,false,if,pd1,get,property,type,pd2,get,property,type,pd1,get,property,editor,class,pd2,get,property,editor,class,pd1,is,bound,pd2,is,bound,pd1,is,constrained,pd2,is,constrained,return,true,return,false
PropertyDescriptorUtils -> public static boolean equals(PropertyDescriptor pd1, Object obj);1367955086;Compare the given {@link PropertyDescriptor} against the given {@link Object} and_return {@code true} if they are objects are equivalent, i.e. both are {@code_PropertyDescriptor}s whose read method, write method, property types, property_editor and flags are equivalent.__@see PropertyDescriptor#equals(Object);public static boolean equals(PropertyDescriptor pd1, Object obj) {_		if (pd1 == obj) {_			return true__		}_		if (obj != null && obj instanceof PropertyDescriptor) {_			PropertyDescriptor pd2 = (PropertyDescriptor) obj__			if (!compareMethods(pd1.getReadMethod(), pd2.getReadMethod())) {_				return false__			}__			if (!compareMethods(pd1.getWriteMethod(), pd2.getWriteMethod())) {_				return false__			}__			if (pd1.getPropertyType() == pd2.getPropertyType()_					&& pd1.getPropertyEditorClass() == pd2.getPropertyEditorClass()_					&& pd1.isBound() == pd2.isBound()_					&& pd1.isConstrained() == pd2.isConstrained()) {_				return true__			}_		}_		return false__	};compare,the,given,link,property,descriptor,against,the,given,link,object,and,return,code,true,if,they,are,objects,are,equivalent,i,e,both,are,code,property,descriptor,s,whose,read,method,write,method,property,types,property,editor,and,flags,are,equivalent,see,property,descriptor,equals,object;public,static,boolean,equals,property,descriptor,pd1,object,obj,if,pd1,obj,return,true,if,obj,null,obj,instanceof,property,descriptor,property,descriptor,pd2,property,descriptor,obj,if,compare,methods,pd1,get,read,method,pd2,get,read,method,return,false,if,compare,methods,pd1,get,write,method,pd2,get,write,method,return,false,if,pd1,get,property,type,pd2,get,property,type,pd1,get,property,editor,class,pd2,get,property,editor,class,pd1,is,bound,pd2,is,bound,pd1,is,constrained,pd2,is,constrained,return,true,return,false
PropertyDescriptorUtils -> public static boolean equals(PropertyDescriptor pd1, Object obj);1368482696;Compare the given {@link PropertyDescriptor} against the given {@link Object} and_return {@code true} if they are objects are equivalent, i.e. both are {@code_PropertyDescriptor}s whose read method, write method, property types, property_editor and flags are equivalent.__@see PropertyDescriptor#equals(Object);public static boolean equals(PropertyDescriptor pd1, Object obj) {_		if (pd1 == obj) {_			return true__		}_		if (obj != null && obj instanceof PropertyDescriptor) {_			PropertyDescriptor pd2 = (PropertyDescriptor) obj__			if (!compareMethods(pd1.getReadMethod(), pd2.getReadMethod())) {_				return false__			}__			if (!compareMethods(pd1.getWriteMethod(), pd2.getWriteMethod())) {_				return false__			}__			if (pd1.getPropertyType() == pd2.getPropertyType()_					&& pd1.getPropertyEditorClass() == pd2.getPropertyEditorClass()_					&& pd1.isBound() == pd2.isBound()_					&& pd1.isConstrained() == pd2.isConstrained()) {_				return true__			}_		}_		return false__	};compare,the,given,link,property,descriptor,against,the,given,link,object,and,return,code,true,if,they,are,objects,are,equivalent,i,e,both,are,code,property,descriptor,s,whose,read,method,write,method,property,types,property,editor,and,flags,are,equivalent,see,property,descriptor,equals,object;public,static,boolean,equals,property,descriptor,pd1,object,obj,if,pd1,obj,return,true,if,obj,null,obj,instanceof,property,descriptor,property,descriptor,pd2,property,descriptor,obj,if,compare,methods,pd1,get,read,method,pd2,get,read,method,return,false,if,compare,methods,pd1,get,write,method,pd2,get,write,method,return,false,if,pd1,get,property,type,pd2,get,property,type,pd1,get,property,editor,class,pd2,get,property,editor,class,pd1,is,bound,pd2,is,bound,pd1,is,constrained,pd2,is,constrained,return,true,return,false
PropertyDescriptorUtils -> public static boolean equals(PropertyDescriptor pd1, Object obj);1378146384;Compare the given {@link PropertyDescriptor} against the given {@link Object} and_return {@code true} if they are objects are equivalent, i.e. both are {@code_PropertyDescriptor}s whose read method, write method, property types, property_editor and flags are equivalent._@see PropertyDescriptor#equals(Object);public static boolean equals(PropertyDescriptor pd1, Object obj) {_		if (pd1 == obj) {_			return true__		}_		if (obj != null && obj instanceof PropertyDescriptor) {_			PropertyDescriptor pd2 = (PropertyDescriptor) obj__			if (!compareMethods(pd1.getReadMethod(), pd2.getReadMethod())) {_				return false__			}__			if (!compareMethods(pd1.getWriteMethod(), pd2.getWriteMethod())) {_				return false__			}__			if (pd1.getPropertyType() == pd2.getPropertyType()_					&& pd1.getPropertyEditorClass() == pd2.getPropertyEditorClass()_					&& pd1.isBound() == pd2.isBound()_					&& pd1.isConstrained() == pd2.isConstrained()) {_				return true__			}_		}_		return false__	};compare,the,given,link,property,descriptor,against,the,given,link,object,and,return,code,true,if,they,are,objects,are,equivalent,i,e,both,are,code,property,descriptor,s,whose,read,method,write,method,property,types,property,editor,and,flags,are,equivalent,see,property,descriptor,equals,object;public,static,boolean,equals,property,descriptor,pd1,object,obj,if,pd1,obj,return,true,if,obj,null,obj,instanceof,property,descriptor,property,descriptor,pd2,property,descriptor,obj,if,compare,methods,pd1,get,read,method,pd2,get,read,method,return,false,if,compare,methods,pd1,get,write,method,pd2,get,write,method,return,false,if,pd1,get,property,type,pd2,get,property,type,pd1,get,property,editor,class,pd2,get,property,editor,class,pd1,is,bound,pd2,is,bound,pd1,is,constrained,pd2,is,constrained,return,true,return,false
PropertyDescriptorUtils -> public static boolean equals(PropertyDescriptor pd1, Object obj);1386711257;Compare the given {@link PropertyDescriptor} against the given {@link Object} and_return {@code true} if they are objects are equivalent, i.e. both are {@code_PropertyDescriptor}s whose read method, write method, property types, property_editor and flags are equivalent._@see PropertyDescriptor#equals(Object);public static boolean equals(PropertyDescriptor pd1, Object obj) {_		if (pd1 == obj) {_			return true__		}_		if (obj != null && obj instanceof PropertyDescriptor) {_			PropertyDescriptor pd2 = (PropertyDescriptor) obj__			if (!compareMethods(pd1.getReadMethod(), pd2.getReadMethod())) {_				return false__			}_			if (!compareMethods(pd1.getWriteMethod(), pd2.getWriteMethod())) {_				return false__			}_			if (pd1.getPropertyType() == pd2.getPropertyType() &&_					pd1.getPropertyEditorClass() == pd2.getPropertyEditorClass() &&_					pd1.isBound() == pd2.isBound() && pd1.isConstrained() == pd2.isConstrained()) {_				return true__			}_		}_		return false__	};compare,the,given,link,property,descriptor,against,the,given,link,object,and,return,code,true,if,they,are,objects,are,equivalent,i,e,both,are,code,property,descriptor,s,whose,read,method,write,method,property,types,property,editor,and,flags,are,equivalent,see,property,descriptor,equals,object;public,static,boolean,equals,property,descriptor,pd1,object,obj,if,pd1,obj,return,true,if,obj,null,obj,instanceof,property,descriptor,property,descriptor,pd2,property,descriptor,obj,if,compare,methods,pd1,get,read,method,pd2,get,read,method,return,false,if,compare,methods,pd1,get,write,method,pd2,get,write,method,return,false,if,pd1,get,property,type,pd2,get,property,type,pd1,get,property,editor,class,pd2,get,property,editor,class,pd1,is,bound,pd2,is,bound,pd1,is,constrained,pd2,is,constrained,return,true,return,false
ExtendedBeanInfo -> public ExtendedBeanInfo(BeanInfo delegate);1530405080;Wrap the given {@link BeanInfo} instance_ copy all its existing property descriptors_locally, wrapping each in a custom {@link SimpleIndexedPropertyDescriptor indexed}_or {@link SimplePropertyDescriptor non-indexed} {@code PropertyDescriptor}_variant that bypasses default JDK weak/soft reference management_ then search_through its method descriptors to find any non-void returning write methods and_update or create the corresponding {@link PropertyDescriptor} for each one found._@param delegate the wrapped {@code BeanInfo}, which is never modified_@see #getPropertyDescriptors();public ExtendedBeanInfo(BeanInfo delegate) {_		this.delegate = delegate__		for (PropertyDescriptor pd : delegate.getPropertyDescriptors()) {_			try {_				this.propertyDescriptors.add(pd instanceof IndexedPropertyDescriptor ?_						new SimpleIndexedPropertyDescriptor((IndexedPropertyDescriptor) pd) :_						new SimplePropertyDescriptor(pd))__			}_			catch (IntrospectionException ex) {_				_				if (logger.isDebugEnabled()) {_					logger.debug("Ignoring invalid bean property '" + pd.getName() + "': " + ex.getMessage())__				}_			}_		}_		MethodDescriptor[] methodDescriptors = delegate.getMethodDescriptors()__		if (methodDescriptors != null) {_			for (Method method : findCandidateWriteMethods(methodDescriptors)) {_				try {_					handleCandidateWriteMethod(method)__				}_				catch (IntrospectionException ex) {_					_					if (logger.isDebugEnabled()) {_						logger.debug("Ignoring candidate write method [" + method + "]: " + ex.getMessage())__					}_				}_			}_		}_	};wrap,the,given,link,bean,info,instance,copy,all,its,existing,property,descriptors,locally,wrapping,each,in,a,custom,link,simple,indexed,property,descriptor,indexed,or,link,simple,property,descriptor,non,indexed,code,property,descriptor,variant,that,bypasses,default,jdk,weak,soft,reference,management,then,search,through,its,method,descriptors,to,find,any,non,void,returning,write,methods,and,update,or,create,the,corresponding,link,property,descriptor,for,each,one,found,param,delegate,the,wrapped,code,bean,info,which,is,never,modified,see,get,property,descriptors;public,extended,bean,info,bean,info,delegate,this,delegate,delegate,for,property,descriptor,pd,delegate,get,property,descriptors,try,this,property,descriptors,add,pd,instanceof,indexed,property,descriptor,new,simple,indexed,property,descriptor,indexed,property,descriptor,pd,new,simple,property,descriptor,pd,catch,introspection,exception,ex,if,logger,is,debug,enabled,logger,debug,ignoring,invalid,bean,property,pd,get,name,ex,get,message,method,descriptor,method,descriptors,delegate,get,method,descriptors,if,method,descriptors,null,for,method,method,find,candidate,write,methods,method,descriptors,try,handle,candidate,write,method,method,catch,introspection,exception,ex,if,logger,is,debug,enabled,logger,debug,ignoring,candidate,write,method,method,ex,get,message
ExtendedBeanInfo -> public ExtendedBeanInfo(BeanInfo delegate);1542899558;Wrap the given {@link BeanInfo} instance_ copy all its existing property descriptors_locally, wrapping each in a custom {@link SimpleIndexedPropertyDescriptor indexed}_or {@link SimplePropertyDescriptor non-indexed} {@code PropertyDescriptor}_variant that bypasses default JDK weak/soft reference management_ then search_through its method descriptors to find any non-void returning write methods and_update or create the corresponding {@link PropertyDescriptor} for each one found._@param delegate the wrapped {@code BeanInfo}, which is never modified_@see #getPropertyDescriptors();public ExtendedBeanInfo(BeanInfo delegate) {_		this.delegate = delegate__		for (PropertyDescriptor pd : delegate.getPropertyDescriptors()) {_			try {_				this.propertyDescriptors.add(pd instanceof IndexedPropertyDescriptor ?_						new SimpleIndexedPropertyDescriptor((IndexedPropertyDescriptor) pd) :_						new SimplePropertyDescriptor(pd))__			}_			catch (IntrospectionException ex) {_				_				if (logger.isDebugEnabled()) {_					logger.debug("Ignoring invalid bean property '" + pd.getName() + "': " + ex.getMessage())__				}_			}_		}_		MethodDescriptor[] methodDescriptors = delegate.getMethodDescriptors()__		if (methodDescriptors != null) {_			for (Method method : findCandidateWriteMethods(methodDescriptors)) {_				try {_					handleCandidateWriteMethod(method)__				}_				catch (IntrospectionException ex) {_					_					if (logger.isDebugEnabled()) {_						logger.debug("Ignoring candidate write method [" + method + "]: " + ex.getMessage())__					}_				}_			}_		}_	};wrap,the,given,link,bean,info,instance,copy,all,its,existing,property,descriptors,locally,wrapping,each,in,a,custom,link,simple,indexed,property,descriptor,indexed,or,link,simple,property,descriptor,non,indexed,code,property,descriptor,variant,that,bypasses,default,jdk,weak,soft,reference,management,then,search,through,its,method,descriptors,to,find,any,non,void,returning,write,methods,and,update,or,create,the,corresponding,link,property,descriptor,for,each,one,found,param,delegate,the,wrapped,code,bean,info,which,is,never,modified,see,get,property,descriptors;public,extended,bean,info,bean,info,delegate,this,delegate,delegate,for,property,descriptor,pd,delegate,get,property,descriptors,try,this,property,descriptors,add,pd,instanceof,indexed,property,descriptor,new,simple,indexed,property,descriptor,indexed,property,descriptor,pd,new,simple,property,descriptor,pd,catch,introspection,exception,ex,if,logger,is,debug,enabled,logger,debug,ignoring,invalid,bean,property,pd,get,name,ex,get,message,method,descriptor,method,descriptors,delegate,get,method,descriptors,if,method,descriptors,null,for,method,method,find,candidate,write,methods,method,descriptors,try,handle,candidate,write,method,method,catch,introspection,exception,ex,if,logger,is,debug,enabled,logger,debug,ignoring,candidate,write,method,method,ex,get,message
ExtendedBeanInfo -> @Override 	public PropertyDescriptor[] getPropertyDescriptors();1356735495;Return the set of {@link PropertyDescriptor}s from the wrapped {@link BeanInfo}_object as well as {@code PropertyDescriptor}s for each non-void returning setter_method found during construction._@see #ExtendedBeanInfo(BeanInfo);@Override_	public PropertyDescriptor[] getPropertyDescriptors() {_		return this.propertyDescriptors.toArray(_				new PropertyDescriptor[this.propertyDescriptors.size()])__	};return,the,set,of,link,property,descriptor,s,from,the,wrapped,link,bean,info,object,as,well,as,code,property,descriptor,s,for,each,non,void,returning,setter,method,found,during,construction,see,extended,bean,info,bean,info;override,public,property,descriptor,get,property,descriptors,return,this,property,descriptors,to,array,new,property,descriptor,this,property,descriptors,size
ExtendedBeanInfo -> @Override 	public PropertyDescriptor[] getPropertyDescriptors();1368482696;Return the set of {@link PropertyDescriptor}s from the wrapped {@link BeanInfo}_object as well as {@code PropertyDescriptor}s for each non-void returning setter_method found during construction._@see #ExtendedBeanInfo(BeanInfo);@Override_	public PropertyDescriptor[] getPropertyDescriptors() {_		return this.propertyDescriptors.toArray(_				new PropertyDescriptor[this.propertyDescriptors.size()])__	};return,the,set,of,link,property,descriptor,s,from,the,wrapped,link,bean,info,object,as,well,as,code,property,descriptor,s,for,each,non,void,returning,setter,method,found,during,construction,see,extended,bean,info,bean,info;override,public,property,descriptor,get,property,descriptors,return,this,property,descriptors,to,array,new,property,descriptor,this,property,descriptors,size
ExtendedBeanInfo -> @Override 	public PropertyDescriptor[] getPropertyDescriptors();1378146384;Return the set of {@link PropertyDescriptor}s from the wrapped {@link BeanInfo}_object as well as {@code PropertyDescriptor}s for each non-void returning setter_method found during construction._@see #ExtendedBeanInfo(BeanInfo);@Override_	public PropertyDescriptor[] getPropertyDescriptors() {_		return this.propertyDescriptors.toArray(new PropertyDescriptor[this.propertyDescriptors.size()])__	};return,the,set,of,link,property,descriptor,s,from,the,wrapped,link,bean,info,object,as,well,as,code,property,descriptor,s,for,each,non,void,returning,setter,method,found,during,construction,see,extended,bean,info,bean,info;override,public,property,descriptor,get,property,descriptors,return,this,property,descriptors,to,array,new,property,descriptor,this,property,descriptors,size
ExtendedBeanInfo -> @Override 	public PropertyDescriptor[] getPropertyDescriptors();1386711257;Return the set of {@link PropertyDescriptor}s from the wrapped {@link BeanInfo}_object as well as {@code PropertyDescriptor}s for each non-void returning setter_method found during construction._@see #ExtendedBeanInfo(BeanInfo);@Override_	public PropertyDescriptor[] getPropertyDescriptors() {_		return this.propertyDescriptors.toArray(new PropertyDescriptor[this.propertyDescriptors.size()])__	};return,the,set,of,link,property,descriptor,s,from,the,wrapped,link,bean,info,object,as,well,as,code,property,descriptor,s,for,each,non,void,returning,setter,method,found,during,construction,see,extended,bean,info,bean,info;override,public,property,descriptor,get,property,descriptors,return,this,property,descriptors,to,array,new,property,descriptor,this,property,descriptors,size
ExtendedBeanInfo -> @Override 	public PropertyDescriptor[] getPropertyDescriptors();1409688933;Return the set of {@link PropertyDescriptor}s from the wrapped {@link BeanInfo}_object as well as {@code PropertyDescriptor}s for each non-void returning setter_method found during construction._@see #ExtendedBeanInfo(BeanInfo);@Override_	public PropertyDescriptor[] getPropertyDescriptors() {_		return this.propertyDescriptors.toArray(new PropertyDescriptor[this.propertyDescriptors.size()])__	};return,the,set,of,link,property,descriptor,s,from,the,wrapped,link,bean,info,object,as,well,as,code,property,descriptor,s,for,each,non,void,returning,setter,method,found,during,construction,see,extended,bean,info,bean,info;override,public,property,descriptor,get,property,descriptors,return,this,property,descriptors,to,array,new,property,descriptor,this,property,descriptors,size
ExtendedBeanInfo -> @Override 	public PropertyDescriptor[] getPropertyDescriptors();1410903610;Return the set of {@link PropertyDescriptor}s from the wrapped {@link BeanInfo}_object as well as {@code PropertyDescriptor}s for each non-void returning setter_method found during construction._@see #ExtendedBeanInfo(BeanInfo);@Override_	public PropertyDescriptor[] getPropertyDescriptors() {_		return this.propertyDescriptors.toArray(new PropertyDescriptor[this.propertyDescriptors.size()])__	};return,the,set,of,link,property,descriptor,s,from,the,wrapped,link,bean,info,object,as,well,as,code,property,descriptor,s,for,each,non,void,returning,setter,method,found,during,construction,see,extended,bean,info,bean,info;override,public,property,descriptor,get,property,descriptors,return,this,property,descriptors,to,array,new,property,descriptor,this,property,descriptors,size
ExtendedBeanInfo -> @Override 	public PropertyDescriptor[] getPropertyDescriptors();1417048908;Return the set of {@link PropertyDescriptor}s from the wrapped {@link BeanInfo}_object as well as {@code PropertyDescriptor}s for each non-void returning setter_method found during construction._@see #ExtendedBeanInfo(BeanInfo);@Override_	public PropertyDescriptor[] getPropertyDescriptors() {_		return this.propertyDescriptors.toArray(new PropertyDescriptor[this.propertyDescriptors.size()])__	};return,the,set,of,link,property,descriptor,s,from,the,wrapped,link,bean,info,object,as,well,as,code,property,descriptor,s,for,each,non,void,returning,setter,method,found,during,construction,see,extended,bean,info,bean,info;override,public,property,descriptor,get,property,descriptors,return,this,property,descriptors,to,array,new,property,descriptor,this,property,descriptors,size
ExtendedBeanInfo -> @Override 	public PropertyDescriptor[] getPropertyDescriptors();1432125256;Return the set of {@link PropertyDescriptor}s from the wrapped {@link BeanInfo}_object as well as {@code PropertyDescriptor}s for each non-void returning setter_method found during construction._@see #ExtendedBeanInfo(BeanInfo);@Override_	public PropertyDescriptor[] getPropertyDescriptors() {_		return this.propertyDescriptors.toArray(new PropertyDescriptor[this.propertyDescriptors.size()])__	};return,the,set,of,link,property,descriptor,s,from,the,wrapped,link,bean,info,object,as,well,as,code,property,descriptor,s,for,each,non,void,returning,setter,method,found,during,construction,see,extended,bean,info,bean,info;override,public,property,descriptor,get,property,descriptors,return,this,property,descriptors,to,array,new,property,descriptor,this,property,descriptors,size
ExtendedBeanInfo -> @Override 	public PropertyDescriptor[] getPropertyDescriptors();1467730834;Return the set of {@link PropertyDescriptor}s from the wrapped {@link BeanInfo}_object as well as {@code PropertyDescriptor}s for each non-void returning setter_method found during construction._@see #ExtendedBeanInfo(BeanInfo);@Override_	public PropertyDescriptor[] getPropertyDescriptors() {_		return this.propertyDescriptors.toArray(new PropertyDescriptor[this.propertyDescriptors.size()])__	};return,the,set,of,link,property,descriptor,s,from,the,wrapped,link,bean,info,object,as,well,as,code,property,descriptor,s,for,each,non,void,returning,setter,method,found,during,construction,see,extended,bean,info,bean,info;override,public,property,descriptor,get,property,descriptors,return,this,property,descriptors,to,array,new,property,descriptor,this,property,descriptors,size
ExtendedBeanInfo -> @Override 	public PropertyDescriptor[] getPropertyDescriptors();1467846264;Return the set of {@link PropertyDescriptor}s from the wrapped {@link BeanInfo}_object as well as {@code PropertyDescriptor}s for each non-void returning setter_method found during construction._@see #ExtendedBeanInfo(BeanInfo);@Override_	public PropertyDescriptor[] getPropertyDescriptors() {_		return this.propertyDescriptors.toArray(new PropertyDescriptor[this.propertyDescriptors.size()])__	};return,the,set,of,link,property,descriptor,s,from,the,wrapped,link,bean,info,object,as,well,as,code,property,descriptor,s,for,each,non,void,returning,setter,method,found,during,construction,see,extended,bean,info,bean,info;override,public,property,descriptor,get,property,descriptors,return,this,property,descriptors,to,array,new,property,descriptor,this,property,descriptors,size
ExtendedBeanInfo -> @Override 	public PropertyDescriptor[] getPropertyDescriptors();1495868221;Return the set of {@link PropertyDescriptor}s from the wrapped {@link BeanInfo}_object as well as {@code PropertyDescriptor}s for each non-void returning setter_method found during construction._@see #ExtendedBeanInfo(BeanInfo);@Override_	public PropertyDescriptor[] getPropertyDescriptors() {_		return this.propertyDescriptors.toArray(new PropertyDescriptor[this.propertyDescriptors.size()])__	};return,the,set,of,link,property,descriptor,s,from,the,wrapped,link,bean,info,object,as,well,as,code,property,descriptor,s,for,each,non,void,returning,setter,method,found,during,construction,see,extended,bean,info,bean,info;override,public,property,descriptor,get,property,descriptors,return,this,property,descriptors,to,array,new,property,descriptor,this,property,descriptors,size
ExtendedBeanInfo -> @Override 	public PropertyDescriptor[] getPropertyDescriptors();1496259743;Return the set of {@link PropertyDescriptor}s from the wrapped {@link BeanInfo}_object as well as {@code PropertyDescriptor}s for each non-void returning setter_method found during construction._@see #ExtendedBeanInfo(BeanInfo);@Override_	public PropertyDescriptor[] getPropertyDescriptors() {_		return this.propertyDescriptors.toArray(new PropertyDescriptor[this.propertyDescriptors.size()])__	};return,the,set,of,link,property,descriptor,s,from,the,wrapped,link,bean,info,object,as,well,as,code,property,descriptor,s,for,each,non,void,returning,setter,method,found,during,construction,see,extended,bean,info,bean,info;override,public,property,descriptor,get,property,descriptors,return,this,property,descriptors,to,array,new,property,descriptor,this,property,descriptors,size
ExtendedBeanInfo -> @Override 	public PropertyDescriptor[] getPropertyDescriptors();1497341397;Return the set of {@link PropertyDescriptor}s from the wrapped {@link BeanInfo}_object as well as {@code PropertyDescriptor}s for each non-void returning setter_method found during construction._@see #ExtendedBeanInfo(BeanInfo);@Override_	public PropertyDescriptor[] getPropertyDescriptors() {_		return this.propertyDescriptors.toArray(new PropertyDescriptor[this.propertyDescriptors.size()])__	};return,the,set,of,link,property,descriptor,s,from,the,wrapped,link,bean,info,object,as,well,as,code,property,descriptor,s,for,each,non,void,returning,setter,method,found,during,construction,see,extended,bean,info,bean,info;override,public,property,descriptor,get,property,descriptors,return,this,property,descriptors,to,array,new,property,descriptor,this,property,descriptors,size
ExtendedBeanInfo -> @Override 	public PropertyDescriptor[] getPropertyDescriptors();1498780456;Return the set of {@link PropertyDescriptor}s from the wrapped {@link BeanInfo}_object as well as {@code PropertyDescriptor}s for each non-void returning setter_method found during construction._@see #ExtendedBeanInfo(BeanInfo);@Override_	public PropertyDescriptor[] getPropertyDescriptors() {_		return this.propertyDescriptors.toArray(new PropertyDescriptor[this.propertyDescriptors.size()])__	};return,the,set,of,link,property,descriptor,s,from,the,wrapped,link,bean,info,object,as,well,as,code,property,descriptor,s,for,each,non,void,returning,setter,method,found,during,construction,see,extended,bean,info,bean,info;override,public,property,descriptor,get,property,descriptors,return,this,property,descriptors,to,array,new,property,descriptor,this,property,descriptors,size
ExtendedBeanInfo -> @Override 	public PropertyDescriptor[] getPropertyDescriptors();1500448076;Return the set of {@link PropertyDescriptor}s from the wrapped {@link BeanInfo}_object as well as {@code PropertyDescriptor}s for each non-void returning setter_method found during construction._@see #ExtendedBeanInfo(BeanInfo);@Override_	public PropertyDescriptor[] getPropertyDescriptors() {_		return this.propertyDescriptors.toArray(new PropertyDescriptor[this.propertyDescriptors.size()])__	};return,the,set,of,link,property,descriptor,s,from,the,wrapped,link,bean,info,object,as,well,as,code,property,descriptor,s,for,each,non,void,returning,setter,method,found,during,construction,see,extended,bean,info,bean,info;override,public,property,descriptor,get,property,descriptors,return,this,property,descriptors,to,array,new,property,descriptor,this,property,descriptors,size
ExtendedBeanInfo -> @Override 	public PropertyDescriptor[] getPropertyDescriptors();1519295386;Return the set of {@link PropertyDescriptor}s from the wrapped {@link BeanInfo}_object as well as {@code PropertyDescriptor}s for each non-void returning setter_method found during construction._@see #ExtendedBeanInfo(BeanInfo);@Override_	public PropertyDescriptor[] getPropertyDescriptors() {_		return this.propertyDescriptors.toArray(new PropertyDescriptor[0])__	};return,the,set,of,link,property,descriptor,s,from,the,wrapped,link,bean,info,object,as,well,as,code,property,descriptor,s,for,each,non,void,returning,setter,method,found,during,construction,see,extended,bean,info,bean,info;override,public,property,descriptor,get,property,descriptors,return,this,property,descriptors,to,array,new,property,descriptor,0
ExtendedBeanInfo -> @Override 	public PropertyDescriptor[] getPropertyDescriptors();1530174524;Return the set of {@link PropertyDescriptor PropertyDescriptors} from the wrapped_{@link BeanInfo} object as well as {@code PropertyDescriptor BeanInfo} object as well as {@code PropertyDescriptors}_for each non-void returning setter method found during construction._@see #ExtendedBeanInfo(BeanInfo);@Override_	public PropertyDescriptor[] getPropertyDescriptors() {_		return this.propertyDescriptors.toArray(new PropertyDescriptor[0])__	};return,the,set,of,link,property,descriptor,property,descriptors,from,the,wrapped,link,bean,info,object,as,well,as,code,property,descriptor,bean,info,object,as,well,as,code,property,descriptors,for,each,non,void,returning,setter,method,found,during,construction,see,extended,bean,info,bean,info;override,public,property,descriptor,get,property,descriptors,return,this,property,descriptors,to,array,new,property,descriptor,0
ExtendedBeanInfo -> @Override 	public PropertyDescriptor[] getPropertyDescriptors();1530405080;Return the set of {@link PropertyDescriptor PropertyDescriptors} from the wrapped_{@link BeanInfo} object as well as {@code PropertyDescriptors} for each non-void_returning setter method found during construction._@see #ExtendedBeanInfo(BeanInfo);@Override_	public PropertyDescriptor[] getPropertyDescriptors() {_		return this.propertyDescriptors.toArray(new PropertyDescriptor[0])__	};return,the,set,of,link,property,descriptor,property,descriptors,from,the,wrapped,link,bean,info,object,as,well,as,code,property,descriptors,for,each,non,void,returning,setter,method,found,during,construction,see,extended,bean,info,bean,info;override,public,property,descriptor,get,property,descriptors,return,this,property,descriptors,to,array,new,property,descriptor,0
ExtendedBeanInfo -> @Override 	public PropertyDescriptor[] getPropertyDescriptors();1542899558;Return the set of {@link PropertyDescriptor PropertyDescriptors} from the wrapped_{@link BeanInfo} object as well as {@code PropertyDescriptors} for each non-void_returning setter method found during construction._@see #ExtendedBeanInfo(BeanInfo);@Override_	public PropertyDescriptor[] getPropertyDescriptors() {_		return this.propertyDescriptors.toArray(new PropertyDescriptor[0])__	};return,the,set,of,link,property,descriptor,property,descriptors,from,the,wrapped,link,bean,info,object,as,well,as,code,property,descriptors,for,each,non,void,returning,setter,method,found,during,construction,see,extended,bean,info,bean,info;override,public,property,descriptor,get,property,descriptors,return,this,property,descriptors,to,array,new,property,descriptor,0
ExtendedBeanInfo -> public PropertyDescriptor[] getPropertyDescriptors();1328020251;Return the set of {@link PropertyDescriptor}s from the wrapped {@link BeanInfo}_object as well as {@code PropertyDescriptor}s for each non-void returning setter_method found during construction._@see #ExtendedBeanInfo(BeanInfo);public PropertyDescriptor[] getPropertyDescriptors() {_		return this.propertyDescriptors.toArray(new PropertyDescriptor[this.propertyDescriptors.size()])__	};return,the,set,of,link,property,descriptor,s,from,the,wrapped,link,bean,info,object,as,well,as,code,property,descriptor,s,for,each,non,void,returning,setter,method,found,during,construction,see,extended,bean,info,bean,info;public,property,descriptor,get,property,descriptors,return,this,property,descriptors,to,array,new,property,descriptor,this,property,descriptors,size
ExtendedBeanInfo -> public PropertyDescriptor[] getPropertyDescriptors();1329142650;Return the set of {@link PropertyDescriptor}s from the wrapped {@link BeanInfo}_object as well as {@code PropertyDescriptor}s for each non-void returning setter_method found during construction._@see #ExtendedBeanInfo(BeanInfo);public PropertyDescriptor[] getPropertyDescriptors() {_		return this.propertyDescriptors.toArray(new PropertyDescriptor[this.propertyDescriptors.size()])__	};return,the,set,of,link,property,descriptor,s,from,the,wrapped,link,bean,info,object,as,well,as,code,property,descriptor,s,for,each,non,void,returning,setter,method,found,during,construction,see,extended,bean,info,bean,info;public,property,descriptor,get,property,descriptors,return,this,property,descriptors,to,array,new,property,descriptor,this,property,descriptors,size
ExtendedBeanInfo -> public PropertyDescriptor[] getPropertyDescriptors();1347201894;Return the set of {@link PropertyDescriptor}s from the wrapped {@link BeanInfo}_object as well as {@code PropertyDescriptor}s for each non-void returning setter_method found during construction._@see #ExtendedBeanInfo(BeanInfo);public PropertyDescriptor[] getPropertyDescriptors() {_		return this.propertyDescriptors.toArray(new PropertyDescriptor[this.propertyDescriptors.size()])__	};return,the,set,of,link,property,descriptor,s,from,the,wrapped,link,bean,info,object,as,well,as,code,property,descriptor,s,for,each,non,void,returning,setter,method,found,during,construction,see,extended,bean,info,bean,info;public,property,descriptor,get,property,descriptors,return,this,property,descriptors,to,array,new,property,descriptor,this,property,descriptors,size
ExtendedBeanInfo -> public PropertyDescriptor[] getPropertyDescriptors();1347220671;Return the set of {@link PropertyDescriptor}s from the wrapped {@link BeanInfo}_object as well as {@code PropertyDescriptor}s for each non-void returning setter_method found during construction._@see #ExtendedBeanInfo(BeanInfo);public PropertyDescriptor[] getPropertyDescriptors() {_		return this.propertyDescriptors.toArray(new PropertyDescriptor[this.propertyDescriptors.size()])__	};return,the,set,of,link,property,descriptor,s,from,the,wrapped,link,bean,info,object,as,well,as,code,property,descriptor,s,for,each,non,void,returning,setter,method,found,during,construction,see,extended,bean,info,bean,info;public,property,descriptor,get,property,descriptors,return,this,property,descriptors,to,array,new,property,descriptor,this,property,descriptors,size
ExtendedBeanInfo -> public PropertyDescriptor[] getPropertyDescriptors();1349838650;Return the set of {@link PropertyDescriptor}s from the wrapped {@link BeanInfo}_object as well as {@code PropertyDescriptor}s for each non-void returning setter_method found during construction._@see #ExtendedBeanInfo(BeanInfo);public PropertyDescriptor[] getPropertyDescriptors() {_		return this.propertyDescriptors.toArray(new PropertyDescriptor[this.propertyDescriptors.size()])__	};return,the,set,of,link,property,descriptor,s,from,the,wrapped,link,bean,info,object,as,well,as,code,property,descriptor,s,for,each,non,void,returning,setter,method,found,during,construction,see,extended,bean,info,bean,info;public,property,descriptor,get,property,descriptors,return,this,property,descriptors,to,array,new,property,descriptor,this,property,descriptors,size
ExtendedBeanInfo -> public PropertyDescriptor[] getPropertyDescriptors();1353842900;Return the set of {@link PropertyDescriptor}s from the wrapped {@link BeanInfo}_object as well as {@code PropertyDescriptor}s for each non-void returning setter_method found during construction._@see #ExtendedBeanInfo(BeanInfo);public PropertyDescriptor[] getPropertyDescriptors() {_		return this.propertyDescriptors.toArray(_				new PropertyDescriptor[this.propertyDescriptors.size()])__	};return,the,set,of,link,property,descriptor,s,from,the,wrapped,link,bean,info,object,as,well,as,code,property,descriptor,s,for,each,non,void,returning,setter,method,found,during,construction,see,extended,bean,info,bean,info;public,property,descriptor,get,property,descriptors,return,this,property,descriptors,to,array,new,property,descriptor,this,property,descriptors,size
ExtendedBeanInfo -> public PropertyDescriptor[] getPropertyDescriptors();1355966262;Return the set of {@link PropertyDescriptor}s from the wrapped {@link BeanInfo}_object as well as {@code PropertyDescriptor}s for each non-void returning setter_method found during construction._@see #ExtendedBeanInfo(BeanInfo);public PropertyDescriptor[] getPropertyDescriptors() {_		return this.propertyDescriptors.toArray(_				new PropertyDescriptor[this.propertyDescriptors.size()])__	};return,the,set,of,link,property,descriptor,s,from,the,wrapped,link,bean,info,object,as,well,as,code,property,descriptor,s,for,each,non,void,returning,setter,method,found,during,construction,see,extended,bean,info,bean,info;public,property,descriptor,get,property,descriptors,return,this,property,descriptors,to,array,new,property,descriptor,this,property,descriptors,size
ExtendedBeanInfo -> public PropertyDescriptor[] getPropertyDescriptors();1357119239;Return the set of {@link PropertyDescriptor}s from the wrapped {@link BeanInfo}_object as well as {@code PropertyDescriptor}s for each non-void returning setter_method found during construction._@see #ExtendedBeanInfo(BeanInfo);public PropertyDescriptor[] getPropertyDescriptors() {_		return this.propertyDescriptors.toArray(_				new PropertyDescriptor[this.propertyDescriptors.size()])__	};return,the,set,of,link,property,descriptor,s,from,the,wrapped,link,bean,info,object,as,well,as,code,property,descriptor,s,for,each,non,void,returning,setter,method,found,during,construction,see,extended,bean,info,bean,info;public,property,descriptor,get,property,descriptors,return,this,property,descriptors,to,array,new,property,descriptor,this,property,descriptors,size
ExtendedBeanInfo -> public PropertyDescriptor[] getPropertyDescriptors();1357119417;Return the set of {@link PropertyDescriptor}s from the wrapped {@link BeanInfo}_object as well as {@code PropertyDescriptor}s for each non-void returning setter_method found during construction._@see #ExtendedBeanInfo(BeanInfo);public PropertyDescriptor[] getPropertyDescriptors() {_		return this.propertyDescriptors.toArray(_				new PropertyDescriptor[this.propertyDescriptors.size()])__	};return,the,set,of,link,property,descriptor,s,from,the,wrapped,link,bean,info,object,as,well,as,code,property,descriptor,s,for,each,non,void,returning,setter,method,found,during,construction,see,extended,bean,info,bean,info;public,property,descriptor,get,property,descriptors,return,this,property,descriptors,to,array,new,property,descriptor,this,property,descriptors,size
ExtendedBeanInfo -> public PropertyDescriptor[] getPropertyDescriptors();1362408075;Return the set of {@link PropertyDescriptor}s from the wrapped {@link BeanInfo}_object as well as {@code PropertyDescriptor}s for each non-void returning setter_method found during construction._@see #ExtendedBeanInfo(BeanInfo);public PropertyDescriptor[] getPropertyDescriptors() {_		return this.propertyDescriptors.toArray(_				new PropertyDescriptor[this.propertyDescriptors.size()])__	};return,the,set,of,link,property,descriptor,s,from,the,wrapped,link,bean,info,object,as,well,as,code,property,descriptor,s,for,each,non,void,returning,setter,method,found,during,construction,see,extended,bean,info,bean,info;public,property,descriptor,get,property,descriptors,return,this,property,descriptors,to,array,new,property,descriptor,this,property,descriptors,size
ExtendedBeanInfo -> public PropertyDescriptor[] getPropertyDescriptors();1367955086;Return the set of {@link PropertyDescriptor}s from the wrapped {@link BeanInfo}_object as well as {@code PropertyDescriptor}s for each non-void returning setter_method found during construction._@see #ExtendedBeanInfo(BeanInfo);public PropertyDescriptor[] getPropertyDescriptors() {_		return this.propertyDescriptors.toArray(_				new PropertyDescriptor[this.propertyDescriptors.size()])__	};return,the,set,of,link,property,descriptor,s,from,the,wrapped,link,bean,info,object,as,well,as,code,property,descriptor,s,for,each,non,void,returning,setter,method,found,during,construction,see,extended,bean,info,bean,info;public,property,descriptor,get,property,descriptors,return,this,property,descriptors,to,array,new,property,descriptor,this,property,descriptors,size
