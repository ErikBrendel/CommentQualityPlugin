commented;modifiers;parameterAmount;loc;comment;code
false;private;1;14;;private List<Method> findCandidateWriteMethods(MethodDescriptor[] methodDescriptors) {     List<Method> matches = new ArrayList<>().     for (MethodDescriptor methodDescriptor : methodDescriptors) {         Method method = methodDescriptor.getMethod().         if (isCandidateWriteMethod(method)) {             matches.add(method).         }     }     // Sort non-void returning write methods to guard against the ill effects of     // non-deterministic sorting of methods returned from Class#getDeclaredMethods     // under JDK 7. See http://bugs.sun.com/view_bug.do?bug_id=7023180     matches.sort((m1, m2) -> m2.toString().compareTo(m1.toString())).     return matches. }
false;public,static;1;8;;public static boolean isCandidateWriteMethod(Method method) {     String methodName = method.getName().     Class<?>[] parameterTypes = method.getParameterTypes().     int nParams = parameterTypes.length.     return (methodName.length() > 3 && methodName.startsWith("set") && Modifier.isPublic(method.getModifiers()) && (!void.class.isAssignableFrom(method.getReturnType()) || Modifier.isStatic(method.getModifiers())) && (nParams == 1 || (nParams == 2 && int.class == parameterTypes[0]))). }
false;private;1;31;;private void handleCandidateWriteMethod(Method method) throws IntrospectionException {     int nParams = method.getParameterCount().     String propertyName = propertyNameFor(method).     Class<?> propertyType = method.getParameterTypes()[nParams - 1].     PropertyDescriptor existingPd = findExistingPropertyDescriptor(propertyName, propertyType).     if (nParams == 1) {         if (existingPd == null) {             this.propertyDescriptors.add(new SimplePropertyDescriptor(propertyName, null, method)).         } else {             existingPd.setWriteMethod(method).         }     } else if (nParams == 2) {         if (existingPd == null) {             this.propertyDescriptors.add(new SimpleIndexedPropertyDescriptor(propertyName, null, null, null, method)).         } else if (existingPd instanceof IndexedPropertyDescriptor) {             ((IndexedPropertyDescriptor) existingPd).setIndexedWriteMethod(method).         } else {             this.propertyDescriptors.remove(existingPd).             this.propertyDescriptors.add(new SimpleIndexedPropertyDescriptor(propertyName, existingPd.getReadMethod(), existingPd.getWriteMethod(), null, method)).         }     } else {         throw new IllegalArgumentException("Write method must have exactly 1 or 2 parameters: " + method).     } }
false;private;2;23;;@Nullable private PropertyDescriptor findExistingPropertyDescriptor(String propertyName, Class<?> propertyType) {     for (PropertyDescriptor pd : this.propertyDescriptors) {         final Class<?> candidateType.         final String candidateName = pd.getName().         if (pd instanceof IndexedPropertyDescriptor) {             IndexedPropertyDescriptor ipd = (IndexedPropertyDescriptor) pd.             candidateType = ipd.getIndexedPropertyType().             if (candidateName.equals(propertyName) && (candidateType.equals(propertyType) || candidateType.equals(propertyType.getComponentType()))) {                 return pd.             }         } else {             candidateType = pd.getPropertyType().             if (candidateName.equals(propertyName) && (candidateType.equals(propertyType) || propertyType.equals(candidateType.getComponentType()))) {                 return pd.             }         }     }     return null. }
false;private;1;3;;private String propertyNameFor(Method method) {     return Introspector.decapitalize(method.getName().substring(3, method.getName().length())). }
true;public;0;4;/**  * Return the set of {@link PropertyDescriptor PropertyDescriptors} from the wrapped  * {@link BeanInfo} object as well as {@code PropertyDescriptors} for each non-void  * returning setter method found during construction.  * @see #ExtendedBeanInfo(BeanInfo)  */ ;/**  * Return the set of {@link PropertyDescriptor PropertyDescriptors} from the wrapped  * {@link BeanInfo} object as well as {@code PropertyDescriptors} for each non-void  * returning setter method found during construction.  * @see #ExtendedBeanInfo(BeanInfo)  */ @Override public PropertyDescriptor[] getPropertyDescriptors() {     return this.propertyDescriptors.toArray(new PropertyDescriptor[0]). }
false;public;0;4;;@Override public BeanInfo[] getAdditionalBeanInfo() {     return this.delegate.getAdditionalBeanInfo(). }
false;public;0;4;;@Override public BeanDescriptor getBeanDescriptor() {     return this.delegate.getBeanDescriptor(). }
false;public;0;4;;@Override public int getDefaultEventIndex() {     return this.delegate.getDefaultEventIndex(). }
false;public;0;4;;@Override public int getDefaultPropertyIndex() {     return this.delegate.getDefaultPropertyIndex(). }
false;public;0;4;;@Override public EventSetDescriptor[] getEventSetDescriptors() {     return this.delegate.getEventSetDescriptors(). }
false;public;1;4;;@Override public Image getIcon(int iconKind) {     return this.delegate.getIcon(iconKind). }
false;public;0;4;;@Override public MethodDescriptor[] getMethodDescriptors() {     return this.delegate.getMethodDescriptors(). }
false;public;0;5;;@Override @Nullable public Method getReadMethod() {     return this.readMethod. }
false;public;1;4;;@Override public void setReadMethod(@Nullable Method readMethod) {     this.readMethod = readMethod. }
false;public;0;5;;@Override @Nullable public Method getWriteMethod() {     return this.writeMethod. }
false;public;1;4;;@Override public void setWriteMethod(@Nullable Method writeMethod) {     this.writeMethod = writeMethod. }
false;public;0;13;;@Override @Nullable public Class<?> getPropertyType() {     if (this.propertyType == null) {         try {             this.propertyType = PropertyDescriptorUtils.findPropertyType(this.readMethod, this.writeMethod).         } catch (IntrospectionException ex) {         // Ignore, as does PropertyDescriptor#getPropertyType         }     }     return this.propertyType. }
false;public;0;5;;@Override @Nullable public Class<?> getPropertyEditorClass() {     return this.propertyEditorClass. }
false;public;1;4;;@Override public void setPropertyEditorClass(@Nullable Class<?> propertyEditorClass) {     this.propertyEditorClass = propertyEditorClass. }
false;public;1;5;;@Override public boolean equals(Object other) {     return (this == other || (other instanceof PropertyDescriptor && PropertyDescriptorUtils.equals(this, (PropertyDescriptor) other))). }
false;public;0;4;;@Override public int hashCode() {     return (ObjectUtils.nullSafeHashCode(getReadMethod()) * 29 + ObjectUtils.nullSafeHashCode(getWriteMethod())). }
false;public;0;5;;@Override public String toString() {     return String.format("%s[name=%s, propertyType=%s, readMethod=%s, writeMethod=%s]", getClass().getSimpleName(), getName(), getPropertyType(), this.readMethod, this.writeMethod). }
false;public;0;5;;@Override @Nullable public Method getReadMethod() {     return this.readMethod. }
false;public;1;4;;@Override public void setReadMethod(@Nullable Method readMethod) {     this.readMethod = readMethod. }
false;public;0;5;;@Override @Nullable public Method getWriteMethod() {     return this.writeMethod. }
false;public;1;4;;@Override public void setWriteMethod(@Nullable Method writeMethod) {     this.writeMethod = writeMethod. }
false;public;0;13;;@Override @Nullable public Class<?> getPropertyType() {     if (this.propertyType == null) {         try {             this.propertyType = PropertyDescriptorUtils.findPropertyType(this.readMethod, this.writeMethod).         } catch (IntrospectionException ex) {         // Ignore, as does IndexedPropertyDescriptor#getPropertyType         }     }     return this.propertyType. }
false;public;0;5;;@Override @Nullable public Method getIndexedReadMethod() {     return this.indexedReadMethod. }
false;public;1;4;;@Override public void setIndexedReadMethod(@Nullable Method indexedReadMethod) throws IntrospectionException {     this.indexedReadMethod = indexedReadMethod. }
false;public;0;5;;@Override @Nullable public Method getIndexedWriteMethod() {     return this.indexedWriteMethod. }
false;public;1;4;;@Override public void setIndexedWriteMethod(@Nullable Method indexedWriteMethod) throws IntrospectionException {     this.indexedWriteMethod = indexedWriteMethod. }
false;public;0;14;;@Override @Nullable public Class<?> getIndexedPropertyType() {     if (this.indexedPropertyType == null) {         try {             this.indexedPropertyType = PropertyDescriptorUtils.findIndexedPropertyType(getName(), getPropertyType(), this.indexedReadMethod, this.indexedWriteMethod).         } catch (IntrospectionException ex) {         // Ignore, as does IndexedPropertyDescriptor#getIndexedPropertyType         }     }     return this.indexedPropertyType. }
false;public;0;5;;@Override @Nullable public Class<?> getPropertyEditorClass() {     return this.propertyEditorClass. }
false;public;1;4;;@Override public void setPropertyEditorClass(@Nullable Class<?> propertyEditorClass) {     this.propertyEditorClass = propertyEditorClass. }
true;public;1;14;/* 		 * See java.beans.IndexedPropertyDescriptor#equals(java.lang.Object) 		 */ ;/* 		 * See java.beans.IndexedPropertyDescriptor#equals(java.lang.Object) 		 */ @Override public boolean equals(Object other) {     if (this == other) {         return true.     }     if (!(other instanceof IndexedPropertyDescriptor)) {         return false.     }     IndexedPropertyDescriptor otherPd = (IndexedPropertyDescriptor) other.     return (ObjectUtils.nullSafeEquals(getIndexedReadMethod(), otherPd.getIndexedReadMethod()) && ObjectUtils.nullSafeEquals(getIndexedWriteMethod(), otherPd.getIndexedWriteMethod()) && ObjectUtils.nullSafeEquals(getIndexedPropertyType(), otherPd.getIndexedPropertyType()) && PropertyDescriptorUtils.equals(this, otherPd)). }
false;public;0;8;;@Override public int hashCode() {     int hashCode = ObjectUtils.nullSafeHashCode(getReadMethod()).     hashCode = 29 * hashCode + ObjectUtils.nullSafeHashCode(getWriteMethod()).     hashCode = 29 * hashCode + ObjectUtils.nullSafeHashCode(getIndexedReadMethod()).     hashCode = 29 * hashCode + ObjectUtils.nullSafeHashCode(getIndexedWriteMethod()).     return hashCode. }
false;public;0;7;;@Override public String toString() {     return String.format("%s[name=%s, propertyType=%s, indexedPropertyType=%s, " + "readMethod=%s, writeMethod=%s, indexedReadMethod=%s, indexedWriteMethod=%s]", getClass().getSimpleName(), getName(), getPropertyType(), getIndexedPropertyType(), this.readMethod, this.writeMethod, this.indexedReadMethod, this.indexedWriteMethod). }
false;public;2;15;;@Override public int compare(PropertyDescriptor desc1, PropertyDescriptor desc2) {     String left = desc1.getName().     String right = desc2.getName().     for (int i = 0. i < left.length(). i++) {         if (right.length() == i) {             return 1.         }         int result = left.getBytes()[i] - right.getBytes()[i].         if (result != 0) {             return result.         }     }     return left.length() - right.length(). }
