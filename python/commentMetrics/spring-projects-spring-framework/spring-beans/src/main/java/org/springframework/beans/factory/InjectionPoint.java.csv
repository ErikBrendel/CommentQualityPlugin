commented;modifiers;parameterAmount;loc;comment;code
true;public;0;4;/**  * Return the wrapped MethodParameter, if any.  * <p>Note: Either MethodParameter or Field is available.  * @return the MethodParameter, or {@code null} if none  */ ;/**  * Return the wrapped MethodParameter, if any.  * <p>Note: Either MethodParameter or Field is available.  * @return the MethodParameter, or {@code null} if none  */ @Nullable public MethodParameter getMethodParameter() {     return this.methodParameter. }
true;public;0;4;/**  * Return the wrapped Field, if any.  * <p>Note: Either MethodParameter or Field is available.  * @return the Field, or {@code null} if none  */ ;/**  * Return the wrapped Field, if any.  * <p>Note: Either MethodParameter or Field is available.  * @return the Field, or {@code null} if none  */ @Nullable public Field getField() {     return this.field. }
true;protected,final;0;4;/**  * Return the wrapped MethodParameter, assuming it is present.  * @return the MethodParameter (never {@code null})  * @throws IllegalStateException if no MethodParameter is available  * @since 5.0  */ ;/**  * Return the wrapped MethodParameter, assuming it is present.  * @return the MethodParameter (never {@code null})  * @throws IllegalStateException if no MethodParameter is available  * @since 5.0  */ protected final MethodParameter obtainMethodParameter() {     Assert.state(this.methodParameter != null, "Neither Field nor MethodParameter").     return this.methodParameter. }
true;public;0;13;/**  * Obtain the annotations associated with the wrapped field or method/constructor parameter.  */ ;/**  * Obtain the annotations associated with the wrapped field or method/constructor parameter.  */ public Annotation[] getAnnotations() {     if (this.field != null) {         Annotation[] fieldAnnotations = this.fieldAnnotations.         if (fieldAnnotations == null) {             fieldAnnotations = this.field.getAnnotations().             this.fieldAnnotations = fieldAnnotations.         }         return fieldAnnotations.     } else {         return obtainMethodParameter().getParameterAnnotations().     } }
true;public;1;5;/**  * Retrieve a field/parameter annotation of the given type, if any.  * @param annotationType the annotation type to retrieve  * @return the annotation instance, or {@code null} if none found  * @since 4.3.9  */ ;/**  * Retrieve a field/parameter annotation of the given type, if any.  * @param annotationType the annotation type to retrieve  * @return the annotation instance, or {@code null} if none found  * @since 4.3.9  */ @Nullable public <A extends Annotation> A getAnnotation(Class<A> annotationType) {     return (this.field != null ? this.field.getAnnotation(annotationType) : obtainMethodParameter().getParameterAnnotation(annotationType)). }
true;public;0;3;/**  * Return the type declared by the underlying field or method/constructor parameter,  * indicating the injection type.  */ ;/**  * Return the type declared by the underlying field or method/constructor parameter,  * indicating the injection type.  */ public Class<?> getDeclaredType() {     return (this.field != null ? this.field.getType() : obtainMethodParameter().getParameterType()). }
true;public;0;3;/**  * Returns the wrapped member, containing the injection point.  * @return the Field / Method / Constructor as Member  */ ;/**  * Returns the wrapped member, containing the injection point.  * @return the Field / Method / Constructor as Member  */ public Member getMember() {     return (this.field != null ? this.field : obtainMethodParameter().getMember()). }
true;public;0;3;/**  * Return the wrapped annotated element.  * <p>Note: In case of a method/constructor parameter, this exposes  * the annotations declared on the method or constructor itself  * (i.e. at the method/constructor level, not at the parameter level).  * Use {@link #getAnnotations()} to obtain parameter-level annotations in  * such a scenario, transparently with corresponding field annotations.  * @return the Field / Method / Constructor as AnnotatedElement  */ ;/**  * Return the wrapped annotated element.  * <p>Note: In case of a method/constructor parameter, this exposes  * the annotations declared on the method or constructor itself  * (i.e. at the method/constructor level, not at the parameter level).  * Use {@link #getAnnotations()} to obtain parameter-level annotations in  * such a scenario, transparently with corresponding field annotations.  * @return the Field / Method / Constructor as AnnotatedElement  */ public AnnotatedElement getAnnotatedElement() {     return (this.field != null ? this.field : obtainMethodParameter().getAnnotatedElement()). }
false;public;1;12;;@Override public boolean equals(Object other) {     if (this == other) {         return true.     }     if (getClass() != other.getClass()) {         return false.     }     InjectionPoint otherPoint = (InjectionPoint) other.     return (ObjectUtils.nullSafeEquals(this.field, otherPoint.field) && ObjectUtils.nullSafeEquals(this.methodParameter, otherPoint.methodParameter)). }
false;public;0;4;;@Override public int hashCode() {     return (this.field != null ? this.field.hashCode() : ObjectUtils.nullSafeHashCode(this.methodParameter)). }
false;public;0;4;;@Override public String toString() {     return (this.field != null ? "field '" + this.field.getName() + "'" : String.valueOf(this.methodParameter)). }
