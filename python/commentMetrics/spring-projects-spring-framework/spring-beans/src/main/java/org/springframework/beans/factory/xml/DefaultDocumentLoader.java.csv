# id;timestamp;commentText;codeText;commentWords;codeWords
DefaultDocumentLoader -> protected DocumentBuilder createDocumentBuilder(DocumentBuilderFactory factory, 			@Nullable EntityResolver entityResolver, @Nullable ErrorHandler errorHandler) 			throws ParserConfigurationException;1496837955;Create a JAXP DocumentBuilder that this bean definition reader_will use for parsing XML documents. Can be overridden in subclasses,_adding further initialization of the builder._@param factory the JAXP DocumentBuilderFactory that the DocumentBuilder_should be created with_@param entityResolver the SAX EntityResolver to use_@param errorHandler the SAX ErrorHandler to use_@return the JAXP DocumentBuilder_@throws ParserConfigurationException if thrown by JAXP methods;protected DocumentBuilder createDocumentBuilder(DocumentBuilderFactory factory,_			@Nullable EntityResolver entityResolver, @Nullable ErrorHandler errorHandler)_			throws ParserConfigurationException {__		DocumentBuilder docBuilder = factory.newDocumentBuilder()__		if (entityResolver != null) {_			docBuilder.setEntityResolver(entityResolver)__		}_		if (errorHandler != null) {_			docBuilder.setErrorHandler(errorHandler)__		}_		return docBuilder__	};create,a,jaxp,document,builder,that,this,bean,definition,reader,will,use,for,parsing,xml,documents,can,be,overridden,in,subclasses,adding,further,initialization,of,the,builder,param,factory,the,jaxp,document,builder,factory,that,the,document,builder,should,be,created,with,param,entity,resolver,the,sax,entity,resolver,to,use,param,error,handler,the,sax,error,handler,to,use,return,the,jaxp,document,builder,throws,parser,configuration,exception,if,thrown,by,jaxp,methods;protected,document,builder,create,document,builder,document,builder,factory,factory,nullable,entity,resolver,entity,resolver,nullable,error,handler,error,handler,throws,parser,configuration,exception,document,builder,doc,builder,factory,new,document,builder,if,entity,resolver,null,doc,builder,set,entity,resolver,entity,resolver,if,error,handler,null,doc,builder,set,error,handler,error,handler,return,doc,builder
DefaultDocumentLoader -> protected DocumentBuilder createDocumentBuilder(DocumentBuilderFactory factory, 			@Nullable EntityResolver entityResolver, @Nullable ErrorHandler errorHandler) 			throws ParserConfigurationException;1532706365;Create a JAXP DocumentBuilder that this bean definition reader_will use for parsing XML documents. Can be overridden in subclasses,_adding further initialization of the builder._@param factory the JAXP DocumentBuilderFactory that the DocumentBuilder_should be created with_@param entityResolver the SAX EntityResolver to use_@param errorHandler the SAX ErrorHandler to use_@return the JAXP DocumentBuilder_@throws ParserConfigurationException if thrown by JAXP methods;protected DocumentBuilder createDocumentBuilder(DocumentBuilderFactory factory,_			@Nullable EntityResolver entityResolver, @Nullable ErrorHandler errorHandler)_			throws ParserConfigurationException {__		DocumentBuilder docBuilder = factory.newDocumentBuilder()__		if (entityResolver != null) {_			docBuilder.setEntityResolver(entityResolver)__		}_		if (errorHandler != null) {_			docBuilder.setErrorHandler(errorHandler)__		}_		return docBuilder__	};create,a,jaxp,document,builder,that,this,bean,definition,reader,will,use,for,parsing,xml,documents,can,be,overridden,in,subclasses,adding,further,initialization,of,the,builder,param,factory,the,jaxp,document,builder,factory,that,the,document,builder,should,be,created,with,param,entity,resolver,the,sax,entity,resolver,to,use,param,error,handler,the,sax,error,handler,to,use,return,the,jaxp,document,builder,throws,parser,configuration,exception,if,thrown,by,jaxp,methods;protected,document,builder,create,document,builder,document,builder,factory,factory,nullable,entity,resolver,entity,resolver,nullable,error,handler,error,handler,throws,parser,configuration,exception,document,builder,doc,builder,factory,new,document,builder,if,entity,resolver,null,doc,builder,set,entity,resolver,entity,resolver,if,error,handler,null,doc,builder,set,error,handler,error,handler,return,doc,builder
DefaultDocumentLoader -> protected DocumentBuilderFactory createDocumentBuilderFactory(int validationMode, boolean namespaceAware) 			throws ParserConfigurationException;1328020251;Create the {@link DocumentBuilderFactory} instance._@param validationMode the type of validation: {@link XmlValidationModeDetector#VALIDATION_DTD DTD}_or {@link XmlValidationModeDetector#VALIDATION_XSD XSD})_@param namespaceAware whether the returned factory is to provide support for XML namespaces_@return the JAXP DocumentBuilderFactory_@throws ParserConfigurationException if we failed to build a proper DocumentBuilderFactory;protected DocumentBuilderFactory createDocumentBuilderFactory(int validationMode, boolean namespaceAware)_			throws ParserConfigurationException {__		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance()__		factory.setNamespaceAware(namespaceAware)___		if (validationMode != XmlValidationModeDetector.VALIDATION_NONE) {_			factory.setValidating(true)___			if (validationMode == XmlValidationModeDetector.VALIDATION_XSD) {_				_				factory.setNamespaceAware(true)__				try {_					factory.setAttribute(SCHEMA_LANGUAGE_ATTRIBUTE, XSD_SCHEMA_LANGUAGE)__				}_				catch (IllegalArgumentException ex) {_					ParserConfigurationException pcex = new ParserConfigurationException(_							"Unable to validate using XSD: Your JAXP provider [" + factory +_							"] does not support XML Schema. Are you running on Java 1.4 with Apache Crimson? " +_							"Upgrade to Apache Xerces (or Java 1.5) for full XSD support.")__					pcex.initCause(ex)__					throw pcex__				}_			}_		}__		return factory__	};create,the,link,document,builder,factory,instance,param,validation,mode,the,type,of,validation,link,xml,validation,mode,detector,dtd,or,link,xml,validation,mode,detector,xsd,param,namespace,aware,whether,the,returned,factory,is,to,provide,support,for,xml,namespaces,return,the,jaxp,document,builder,factory,throws,parser,configuration,exception,if,we,failed,to,build,a,proper,document,builder,factory;protected,document,builder,factory,create,document,builder,factory,int,validation,mode,boolean,namespace,aware,throws,parser,configuration,exception,document,builder,factory,factory,document,builder,factory,new,instance,factory,set,namespace,aware,namespace,aware,if,validation,mode,xml,validation,mode,detector,factory,set,validating,true,if,validation,mode,xml,validation,mode,detector,factory,set,namespace,aware,true,try,factory,set,attribute,catch,illegal,argument,exception,ex,parser,configuration,exception,pcex,new,parser,configuration,exception,unable,to,validate,using,xsd,your,jaxp,provider,factory,does,not,support,xml,schema,are,you,running,on,java,1,4,with,apache,crimson,upgrade,to,apache,xerces,or,java,1,5,for,full,xsd,support,pcex,init,cause,ex,throw,pcex,return,factory
DefaultDocumentLoader -> protected DocumentBuilderFactory createDocumentBuilderFactory(int validationMode, boolean namespaceAware) 			throws ParserConfigurationException;1356735495;Create the {@link DocumentBuilderFactory} instance._@param validationMode the type of validation: {@link XmlValidationModeDetector#VALIDATION_DTD DTD}_or {@link XmlValidationModeDetector#VALIDATION_XSD XSD})_@param namespaceAware whether the returned factory is to provide support for XML namespaces_@return the JAXP DocumentBuilderFactory_@throws ParserConfigurationException if we failed to build a proper DocumentBuilderFactory;protected DocumentBuilderFactory createDocumentBuilderFactory(int validationMode, boolean namespaceAware)_			throws ParserConfigurationException {__		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance()__		factory.setNamespaceAware(namespaceAware)___		if (validationMode != XmlValidationModeDetector.VALIDATION_NONE) {_			factory.setValidating(true)___			if (validationMode == XmlValidationModeDetector.VALIDATION_XSD) {_				_				factory.setNamespaceAware(true)__				try {_					factory.setAttribute(SCHEMA_LANGUAGE_ATTRIBUTE, XSD_SCHEMA_LANGUAGE)__				}_				catch (IllegalArgumentException ex) {_					ParserConfigurationException pcex = new ParserConfigurationException(_							"Unable to validate using XSD: Your JAXP provider [" + factory +_							"] does not support XML Schema. Are you running on Java 1.4 with Apache Crimson? " +_							"Upgrade to Apache Xerces (or Java 1.5) for full XSD support.")__					pcex.initCause(ex)__					throw pcex__				}_			}_		}__		return factory__	};create,the,link,document,builder,factory,instance,param,validation,mode,the,type,of,validation,link,xml,validation,mode,detector,dtd,or,link,xml,validation,mode,detector,xsd,param,namespace,aware,whether,the,returned,factory,is,to,provide,support,for,xml,namespaces,return,the,jaxp,document,builder,factory,throws,parser,configuration,exception,if,we,failed,to,build,a,proper,document,builder,factory;protected,document,builder,factory,create,document,builder,factory,int,validation,mode,boolean,namespace,aware,throws,parser,configuration,exception,document,builder,factory,factory,document,builder,factory,new,instance,factory,set,namespace,aware,namespace,aware,if,validation,mode,xml,validation,mode,detector,factory,set,validating,true,if,validation,mode,xml,validation,mode,detector,factory,set,namespace,aware,true,try,factory,set,attribute,catch,illegal,argument,exception,ex,parser,configuration,exception,pcex,new,parser,configuration,exception,unable,to,validate,using,xsd,your,jaxp,provider,factory,does,not,support,xml,schema,are,you,running,on,java,1,4,with,apache,crimson,upgrade,to,apache,xerces,or,java,1,5,for,full,xsd,support,pcex,init,cause,ex,throw,pcex,return,factory
DefaultDocumentLoader -> protected DocumentBuilderFactory createDocumentBuilderFactory(int validationMode, boolean namespaceAware) 			throws ParserConfigurationException;1357119239;Create the {@link DocumentBuilderFactory} instance._@param validationMode the type of validation: {@link XmlValidationModeDetector#VALIDATION_DTD DTD}_or {@link XmlValidationModeDetector#VALIDATION_XSD XSD})_@param namespaceAware whether the returned factory is to provide support for XML namespaces_@return the JAXP DocumentBuilderFactory_@throws ParserConfigurationException if we failed to build a proper DocumentBuilderFactory;protected DocumentBuilderFactory createDocumentBuilderFactory(int validationMode, boolean namespaceAware)_			throws ParserConfigurationException {__		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance()__		factory.setNamespaceAware(namespaceAware)___		if (validationMode != XmlValidationModeDetector.VALIDATION_NONE) {_			factory.setValidating(true)___			if (validationMode == XmlValidationModeDetector.VALIDATION_XSD) {_				_				factory.setNamespaceAware(true)__				try {_					factory.setAttribute(SCHEMA_LANGUAGE_ATTRIBUTE, XSD_SCHEMA_LANGUAGE)__				}_				catch (IllegalArgumentException ex) {_					ParserConfigurationException pcex = new ParserConfigurationException(_							"Unable to validate using XSD: Your JAXP provider [" + factory +_							"] does not support XML Schema. Are you running on Java 1.4 with Apache Crimson? " +_							"Upgrade to Apache Xerces (or Java 1.5) for full XSD support.")__					pcex.initCause(ex)__					throw pcex__				}_			}_		}__		return factory__	};create,the,link,document,builder,factory,instance,param,validation,mode,the,type,of,validation,link,xml,validation,mode,detector,dtd,or,link,xml,validation,mode,detector,xsd,param,namespace,aware,whether,the,returned,factory,is,to,provide,support,for,xml,namespaces,return,the,jaxp,document,builder,factory,throws,parser,configuration,exception,if,we,failed,to,build,a,proper,document,builder,factory;protected,document,builder,factory,create,document,builder,factory,int,validation,mode,boolean,namespace,aware,throws,parser,configuration,exception,document,builder,factory,factory,document,builder,factory,new,instance,factory,set,namespace,aware,namespace,aware,if,validation,mode,xml,validation,mode,detector,factory,set,validating,true,if,validation,mode,xml,validation,mode,detector,factory,set,namespace,aware,true,try,factory,set,attribute,catch,illegal,argument,exception,ex,parser,configuration,exception,pcex,new,parser,configuration,exception,unable,to,validate,using,xsd,your,jaxp,provider,factory,does,not,support,xml,schema,are,you,running,on,java,1,4,with,apache,crimson,upgrade,to,apache,xerces,or,java,1,5,for,full,xsd,support,pcex,init,cause,ex,throw,pcex,return,factory
DefaultDocumentLoader -> protected DocumentBuilderFactory createDocumentBuilderFactory(int validationMode, boolean namespaceAware) 			throws ParserConfigurationException;1368482696;Create the {@link DocumentBuilderFactory} instance._@param validationMode the type of validation: {@link XmlValidationModeDetector#VALIDATION_DTD DTD}_or {@link XmlValidationModeDetector#VALIDATION_XSD XSD})_@param namespaceAware whether the returned factory is to provide support for XML namespaces_@return the JAXP DocumentBuilderFactory_@throws ParserConfigurationException if we failed to build a proper DocumentBuilderFactory;protected DocumentBuilderFactory createDocumentBuilderFactory(int validationMode, boolean namespaceAware)_			throws ParserConfigurationException {__		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance()__		factory.setNamespaceAware(namespaceAware)___		if (validationMode != XmlValidationModeDetector.VALIDATION_NONE) {_			factory.setValidating(true)___			if (validationMode == XmlValidationModeDetector.VALIDATION_XSD) {_				_				factory.setNamespaceAware(true)__				try {_					factory.setAttribute(SCHEMA_LANGUAGE_ATTRIBUTE, XSD_SCHEMA_LANGUAGE)__				}_				catch (IllegalArgumentException ex) {_					ParserConfigurationException pcex = new ParserConfigurationException(_							"Unable to validate using XSD: Your JAXP provider [" + factory +_							"] does not support XML Schema. Are you running on Java 1.4 with Apache Crimson? " +_							"Upgrade to Apache Xerces (or Java 1.5) for full XSD support.")__					pcex.initCause(ex)__					throw pcex__				}_			}_		}__		return factory__	};create,the,link,document,builder,factory,instance,param,validation,mode,the,type,of,validation,link,xml,validation,mode,detector,dtd,or,link,xml,validation,mode,detector,xsd,param,namespace,aware,whether,the,returned,factory,is,to,provide,support,for,xml,namespaces,return,the,jaxp,document,builder,factory,throws,parser,configuration,exception,if,we,failed,to,build,a,proper,document,builder,factory;protected,document,builder,factory,create,document,builder,factory,int,validation,mode,boolean,namespace,aware,throws,parser,configuration,exception,document,builder,factory,factory,document,builder,factory,new,instance,factory,set,namespace,aware,namespace,aware,if,validation,mode,xml,validation,mode,detector,factory,set,validating,true,if,validation,mode,xml,validation,mode,detector,factory,set,namespace,aware,true,try,factory,set,attribute,catch,illegal,argument,exception,ex,parser,configuration,exception,pcex,new,parser,configuration,exception,unable,to,validate,using,xsd,your,jaxp,provider,factory,does,not,support,xml,schema,are,you,running,on,java,1,4,with,apache,crimson,upgrade,to,apache,xerces,or,java,1,5,for,full,xsd,support,pcex,init,cause,ex,throw,pcex,return,factory
DefaultDocumentLoader -> protected DocumentBuilderFactory createDocumentBuilderFactory(int validationMode, boolean namespaceAware) 			throws ParserConfigurationException;1372363092;Create the {@link DocumentBuilderFactory} instance._@param validationMode the type of validation: {@link XmlValidationModeDetector#VALIDATION_DTD DTD}_or {@link XmlValidationModeDetector#VALIDATION_XSD XSD})_@param namespaceAware whether the returned factory is to provide support for XML namespaces_@return the JAXP DocumentBuilderFactory_@throws ParserConfigurationException if we failed to build a proper DocumentBuilderFactory;protected DocumentBuilderFactory createDocumentBuilderFactory(int validationMode, boolean namespaceAware)_			throws ParserConfigurationException {__		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance()__		factory.setNamespaceAware(namespaceAware)___		if (validationMode != XmlValidationModeDetector.VALIDATION_NONE) {_			factory.setFeature("http://apache.org/xml/features/validation/schema", false)__			factory.setValidating(true)__			if (validationMode == XmlValidationModeDetector.VALIDATION_XSD) {_				_				factory.setNamespaceAware(true)__				try {_					factory.setAttribute(SCHEMA_LANGUAGE_ATTRIBUTE, XSD_SCHEMA_LANGUAGE)__				}_				catch (IllegalArgumentException ex) {_					ParserConfigurationException pcex = new ParserConfigurationException(_							"Unable to validate using XSD: Your JAXP provider [" + factory +_							"] does not support XML Schema. Are you running on Java 1.4 with Apache Crimson? " +_							"Upgrade to Apache Xerces (or Java 1.5) for full XSD support.")__					pcex.initCause(ex)__					throw pcex__				}_			}_		}__		return factory__	};create,the,link,document,builder,factory,instance,param,validation,mode,the,type,of,validation,link,xml,validation,mode,detector,dtd,or,link,xml,validation,mode,detector,xsd,param,namespace,aware,whether,the,returned,factory,is,to,provide,support,for,xml,namespaces,return,the,jaxp,document,builder,factory,throws,parser,configuration,exception,if,we,failed,to,build,a,proper,document,builder,factory;protected,document,builder,factory,create,document,builder,factory,int,validation,mode,boolean,namespace,aware,throws,parser,configuration,exception,document,builder,factory,factory,document,builder,factory,new,instance,factory,set,namespace,aware,namespace,aware,if,validation,mode,xml,validation,mode,detector,factory,set,feature,http,apache,org,xml,features,validation,schema,false,factory,set,validating,true,if,validation,mode,xml,validation,mode,detector,factory,set,namespace,aware,true,try,factory,set,attribute,catch,illegal,argument,exception,ex,parser,configuration,exception,pcex,new,parser,configuration,exception,unable,to,validate,using,xsd,your,jaxp,provider,factory,does,not,support,xml,schema,are,you,running,on,java,1,4,with,apache,crimson,upgrade,to,apache,xerces,or,java,1,5,for,full,xsd,support,pcex,init,cause,ex,throw,pcex,return,factory
DefaultDocumentLoader -> protected DocumentBuilderFactory createDocumentBuilderFactory(int validationMode, boolean namespaceAware) 			throws ParserConfigurationException;1372946100;Create the {@link DocumentBuilderFactory} instance._@param validationMode the type of validation: {@link XmlValidationModeDetector#VALIDATION_DTD DTD}_or {@link XmlValidationModeDetector#VALIDATION_XSD XSD})_@param namespaceAware whether the returned factory is to provide support for XML namespaces_@return the JAXP DocumentBuilderFactory_@throws ParserConfigurationException if we failed to build a proper DocumentBuilderFactory;protected DocumentBuilderFactory createDocumentBuilderFactory(int validationMode, boolean namespaceAware)_			throws ParserConfigurationException {__		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance()__		factory.setNamespaceAware(namespaceAware)___		if (validationMode != XmlValidationModeDetector.VALIDATION_NONE) {_			factory.setValidating(true)__			if (validationMode == XmlValidationModeDetector.VALIDATION_XSD) {_				_				factory.setNamespaceAware(true)__				try {_					factory.setAttribute(SCHEMA_LANGUAGE_ATTRIBUTE, XSD_SCHEMA_LANGUAGE)__				}_				catch (IllegalArgumentException ex) {_					ParserConfigurationException pcex = new ParserConfigurationException(_							"Unable to validate using XSD: Your JAXP provider [" + factory +_							"] does not support XML Schema. Are you running on Java 1.4 with Apache Crimson? " +_							"Upgrade to Apache Xerces (or Java 1.5) for full XSD support.")__					pcex.initCause(ex)__					throw pcex__				}_			}_		}__		return factory__	};create,the,link,document,builder,factory,instance,param,validation,mode,the,type,of,validation,link,xml,validation,mode,detector,dtd,or,link,xml,validation,mode,detector,xsd,param,namespace,aware,whether,the,returned,factory,is,to,provide,support,for,xml,namespaces,return,the,jaxp,document,builder,factory,throws,parser,configuration,exception,if,we,failed,to,build,a,proper,document,builder,factory;protected,document,builder,factory,create,document,builder,factory,int,validation,mode,boolean,namespace,aware,throws,parser,configuration,exception,document,builder,factory,factory,document,builder,factory,new,instance,factory,set,namespace,aware,namespace,aware,if,validation,mode,xml,validation,mode,detector,factory,set,validating,true,if,validation,mode,xml,validation,mode,detector,factory,set,namespace,aware,true,try,factory,set,attribute,catch,illegal,argument,exception,ex,parser,configuration,exception,pcex,new,parser,configuration,exception,unable,to,validate,using,xsd,your,jaxp,provider,factory,does,not,support,xml,schema,are,you,running,on,java,1,4,with,apache,crimson,upgrade,to,apache,xerces,or,java,1,5,for,full,xsd,support,pcex,init,cause,ex,throw,pcex,return,factory
DefaultDocumentLoader -> protected DocumentBuilderFactory createDocumentBuilderFactory(int validationMode, boolean namespaceAware) 			throws ParserConfigurationException;1496837955;Create the {@link DocumentBuilderFactory} instance._@param validationMode the type of validation: {@link XmlValidationModeDetector#VALIDATION_DTD DTD}_or {@link XmlValidationModeDetector#VALIDATION_XSD XSD})_@param namespaceAware whether the returned factory is to provide support for XML namespaces_@return the JAXP DocumentBuilderFactory_@throws ParserConfigurationException if we failed to build a proper DocumentBuilderFactory;protected DocumentBuilderFactory createDocumentBuilderFactory(int validationMode, boolean namespaceAware)_			throws ParserConfigurationException {__		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance()__		factory.setNamespaceAware(namespaceAware)___		if (validationMode != XmlValidationModeDetector.VALIDATION_NONE) {_			factory.setValidating(true)__			if (validationMode == XmlValidationModeDetector.VALIDATION_XSD) {_				_				factory.setNamespaceAware(true)__				try {_					factory.setAttribute(SCHEMA_LANGUAGE_ATTRIBUTE, XSD_SCHEMA_LANGUAGE)__				}_				catch (IllegalArgumentException ex) {_					ParserConfigurationException pcex = new ParserConfigurationException(_							"Unable to validate using XSD: Your JAXP provider [" + factory +_							"] does not support XML Schema. Are you running on Java 1.4 with Apache Crimson? " +_							"Upgrade to Apache Xerces (or Java 1.5) for full XSD support.")__					pcex.initCause(ex)__					throw pcex__				}_			}_		}__		return factory__	};create,the,link,document,builder,factory,instance,param,validation,mode,the,type,of,validation,link,xml,validation,mode,detector,dtd,or,link,xml,validation,mode,detector,xsd,param,namespace,aware,whether,the,returned,factory,is,to,provide,support,for,xml,namespaces,return,the,jaxp,document,builder,factory,throws,parser,configuration,exception,if,we,failed,to,build,a,proper,document,builder,factory;protected,document,builder,factory,create,document,builder,factory,int,validation,mode,boolean,namespace,aware,throws,parser,configuration,exception,document,builder,factory,factory,document,builder,factory,new,instance,factory,set,namespace,aware,namespace,aware,if,validation,mode,xml,validation,mode,detector,factory,set,validating,true,if,validation,mode,xml,validation,mode,detector,factory,set,namespace,aware,true,try,factory,set,attribute,catch,illegal,argument,exception,ex,parser,configuration,exception,pcex,new,parser,configuration,exception,unable,to,validate,using,xsd,your,jaxp,provider,factory,does,not,support,xml,schema,are,you,running,on,java,1,4,with,apache,crimson,upgrade,to,apache,xerces,or,java,1,5,for,full,xsd,support,pcex,init,cause,ex,throw,pcex,return,factory
DefaultDocumentLoader -> protected DocumentBuilderFactory createDocumentBuilderFactory(int validationMode, boolean namespaceAware) 			throws ParserConfigurationException;1532706365;Create the {@link DocumentBuilderFactory} instance._@param validationMode the type of validation: {@link XmlValidationModeDetector#VALIDATION_DTD DTD}_or {@link XmlValidationModeDetector#VALIDATION_XSD XSD})_@param namespaceAware whether the returned factory is to provide support for XML namespaces_@return the JAXP DocumentBuilderFactory_@throws ParserConfigurationException if we failed to build a proper DocumentBuilderFactory;protected DocumentBuilderFactory createDocumentBuilderFactory(int validationMode, boolean namespaceAware)_			throws ParserConfigurationException {__		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance()__		factory.setNamespaceAware(namespaceAware)___		if (validationMode != XmlValidationModeDetector.VALIDATION_NONE) {_			factory.setValidating(true)__			if (validationMode == XmlValidationModeDetector.VALIDATION_XSD) {_				_				factory.setNamespaceAware(true)__				try {_					factory.setAttribute(SCHEMA_LANGUAGE_ATTRIBUTE, XSD_SCHEMA_LANGUAGE)__				}_				catch (IllegalArgumentException ex) {_					ParserConfigurationException pcex = new ParserConfigurationException(_							"Unable to validate using XSD: Your JAXP provider [" + factory +_							"] does not support XML Schema. Are you running on Java 1.4 with Apache Crimson? " +_							"Upgrade to Apache Xerces (or Java 1.5) for full XSD support.")__					pcex.initCause(ex)__					throw pcex__				}_			}_		}__		return factory__	};create,the,link,document,builder,factory,instance,param,validation,mode,the,type,of,validation,link,xml,validation,mode,detector,dtd,or,link,xml,validation,mode,detector,xsd,param,namespace,aware,whether,the,returned,factory,is,to,provide,support,for,xml,namespaces,return,the,jaxp,document,builder,factory,throws,parser,configuration,exception,if,we,failed,to,build,a,proper,document,builder,factory;protected,document,builder,factory,create,document,builder,factory,int,validation,mode,boolean,namespace,aware,throws,parser,configuration,exception,document,builder,factory,factory,document,builder,factory,new,instance,factory,set,namespace,aware,namespace,aware,if,validation,mode,xml,validation,mode,detector,factory,set,validating,true,if,validation,mode,xml,validation,mode,detector,factory,set,namespace,aware,true,try,factory,set,attribute,catch,illegal,argument,exception,ex,parser,configuration,exception,pcex,new,parser,configuration,exception,unable,to,validate,using,xsd,your,jaxp,provider,factory,does,not,support,xml,schema,are,you,running,on,java,1,4,with,apache,crimson,upgrade,to,apache,xerces,or,java,1,5,for,full,xsd,support,pcex,init,cause,ex,throw,pcex,return,factory
DefaultDocumentLoader -> @Override 	public Document loadDocument(InputSource inputSource, EntityResolver entityResolver, 			ErrorHandler errorHandler, int validationMode, boolean namespaceAware) throws Exception;1356735495;Load the {@link Document} at the supplied {@link InputSource} using the standard JAXP-configured_XML parser.;@Override_	public Document loadDocument(InputSource inputSource, EntityResolver entityResolver,_			ErrorHandler errorHandler, int validationMode, boolean namespaceAware) throws Exception {__		DocumentBuilderFactory factory = createDocumentBuilderFactory(validationMode, namespaceAware)__		if (logger.isDebugEnabled()) {_			logger.debug("Using JAXP provider [" + factory.getClass().getName() + "]")__		}_		DocumentBuilder builder = createDocumentBuilder(factory, entityResolver, errorHandler)__		return builder.parse(inputSource)__	};load,the,link,document,at,the,supplied,link,input,source,using,the,standard,jaxp,configured,xml,parser;override,public,document,load,document,input,source,input,source,entity,resolver,entity,resolver,error,handler,error,handler,int,validation,mode,boolean,namespace,aware,throws,exception,document,builder,factory,factory,create,document,builder,factory,validation,mode,namespace,aware,if,logger,is,debug,enabled,logger,debug,using,jaxp,provider,factory,get,class,get,name,document,builder,builder,create,document,builder,factory,entity,resolver,error,handler,return,builder,parse,input,source
DefaultDocumentLoader -> @Override 	public Document loadDocument(InputSource inputSource, EntityResolver entityResolver, 			ErrorHandler errorHandler, int validationMode, boolean namespaceAware) throws Exception;1368482696;Load the {@link Document} at the supplied {@link InputSource} using the standard JAXP-configured_XML parser.;@Override_	public Document loadDocument(InputSource inputSource, EntityResolver entityResolver,_			ErrorHandler errorHandler, int validationMode, boolean namespaceAware) throws Exception {__		DocumentBuilderFactory factory = createDocumentBuilderFactory(validationMode, namespaceAware)__		if (logger.isDebugEnabled()) {_			logger.debug("Using JAXP provider [" + factory.getClass().getName() + "]")__		}_		DocumentBuilder builder = createDocumentBuilder(factory, entityResolver, errorHandler)__		return builder.parse(inputSource)__	};load,the,link,document,at,the,supplied,link,input,source,using,the,standard,jaxp,configured,xml,parser;override,public,document,load,document,input,source,input,source,entity,resolver,entity,resolver,error,handler,error,handler,int,validation,mode,boolean,namespace,aware,throws,exception,document,builder,factory,factory,create,document,builder,factory,validation,mode,namespace,aware,if,logger,is,debug,enabled,logger,debug,using,jaxp,provider,factory,get,class,get,name,document,builder,builder,create,document,builder,factory,entity,resolver,error,handler,return,builder,parse,input,source
DefaultDocumentLoader -> @Override 	public Document loadDocument(InputSource inputSource, EntityResolver entityResolver, 			ErrorHandler errorHandler, int validationMode, boolean namespaceAware) throws Exception;1372363092;Load the {@link Document} at the supplied {@link InputSource} using the standard JAXP-configured_XML parser.;@Override_	public Document loadDocument(InputSource inputSource, EntityResolver entityResolver,_			ErrorHandler errorHandler, int validationMode, boolean namespaceAware) throws Exception {__		DocumentBuilderFactory factory = createDocumentBuilderFactory(validationMode, namespaceAware)__		if (logger.isDebugEnabled()) {_			logger.debug("Using JAXP provider [" + factory.getClass().getName() + "]")__		}_		DocumentBuilder builder = createDocumentBuilder(factory, entityResolver, errorHandler)__		return builder.parse(inputSource)__	};load,the,link,document,at,the,supplied,link,input,source,using,the,standard,jaxp,configured,xml,parser;override,public,document,load,document,input,source,input,source,entity,resolver,entity,resolver,error,handler,error,handler,int,validation,mode,boolean,namespace,aware,throws,exception,document,builder,factory,factory,create,document,builder,factory,validation,mode,namespace,aware,if,logger,is,debug,enabled,logger,debug,using,jaxp,provider,factory,get,class,get,name,document,builder,builder,create,document,builder,factory,entity,resolver,error,handler,return,builder,parse,input,source
DefaultDocumentLoader -> @Override 	public Document loadDocument(InputSource inputSource, EntityResolver entityResolver, 			ErrorHandler errorHandler, int validationMode, boolean namespaceAware) throws Exception;1372946100;Load the {@link Document} at the supplied {@link InputSource} using the standard JAXP-configured_XML parser.;@Override_	public Document loadDocument(InputSource inputSource, EntityResolver entityResolver,_			ErrorHandler errorHandler, int validationMode, boolean namespaceAware) throws Exception {__		DocumentBuilderFactory factory = createDocumentBuilderFactory(validationMode, namespaceAware)__		if (logger.isDebugEnabled()) {_			logger.debug("Using JAXP provider [" + factory.getClass().getName() + "]")__		}_		DocumentBuilder builder = createDocumentBuilder(factory, entityResolver, errorHandler)__		return builder.parse(inputSource)__	};load,the,link,document,at,the,supplied,link,input,source,using,the,standard,jaxp,configured,xml,parser;override,public,document,load,document,input,source,input,source,entity,resolver,entity,resolver,error,handler,error,handler,int,validation,mode,boolean,namespace,aware,throws,exception,document,builder,factory,factory,create,document,builder,factory,validation,mode,namespace,aware,if,logger,is,debug,enabled,logger,debug,using,jaxp,provider,factory,get,class,get,name,document,builder,builder,create,document,builder,factory,entity,resolver,error,handler,return,builder,parse,input,source
DefaultDocumentLoader -> @Override 	public Document loadDocument(InputSource inputSource, EntityResolver entityResolver, 			ErrorHandler errorHandler, int validationMode, boolean namespaceAware) throws Exception;1496837955;Load the {@link Document} at the supplied {@link InputSource} using the standard JAXP-configured_XML parser.;@Override_	public Document loadDocument(InputSource inputSource, EntityResolver entityResolver,_			ErrorHandler errorHandler, int validationMode, boolean namespaceAware) throws Exception {__		DocumentBuilderFactory factory = createDocumentBuilderFactory(validationMode, namespaceAware)__		if (logger.isDebugEnabled()) {_			logger.debug("Using JAXP provider [" + factory.getClass().getName() + "]")__		}_		DocumentBuilder builder = createDocumentBuilder(factory, entityResolver, errorHandler)__		return builder.parse(inputSource)__	};load,the,link,document,at,the,supplied,link,input,source,using,the,standard,jaxp,configured,xml,parser;override,public,document,load,document,input,source,input,source,entity,resolver,entity,resolver,error,handler,error,handler,int,validation,mode,boolean,namespace,aware,throws,exception,document,builder,factory,factory,create,document,builder,factory,validation,mode,namespace,aware,if,logger,is,debug,enabled,logger,debug,using,jaxp,provider,factory,get,class,get,name,document,builder,builder,create,document,builder,factory,entity,resolver,error,handler,return,builder,parse,input,source
DefaultDocumentLoader -> @Override 	public Document loadDocument(InputSource inputSource, EntityResolver entityResolver, 			ErrorHandler errorHandler, int validationMode, boolean namespaceAware) throws Exception;1532706365;Load the {@link Document} at the supplied {@link InputSource} using the standard JAXP-configured_XML parser.;@Override_	public Document loadDocument(InputSource inputSource, EntityResolver entityResolver,_			ErrorHandler errorHandler, int validationMode, boolean namespaceAware) throws Exception {__		DocumentBuilderFactory factory = createDocumentBuilderFactory(validationMode, namespaceAware)__		if (logger.isTraceEnabled()) {_			logger.trace("Using JAXP provider [" + factory.getClass().getName() + "]")__		}_		DocumentBuilder builder = createDocumentBuilder(factory, entityResolver, errorHandler)__		return builder.parse(inputSource)__	};load,the,link,document,at,the,supplied,link,input,source,using,the,standard,jaxp,configured,xml,parser;override,public,document,load,document,input,source,input,source,entity,resolver,entity,resolver,error,handler,error,handler,int,validation,mode,boolean,namespace,aware,throws,exception,document,builder,factory,factory,create,document,builder,factory,validation,mode,namespace,aware,if,logger,is,trace,enabled,logger,trace,using,jaxp,provider,factory,get,class,get,name,document,builder,builder,create,document,builder,factory,entity,resolver,error,handler,return,builder,parse,input,source
DefaultDocumentLoader -> public Document loadDocument(InputSource inputSource, EntityResolver entityResolver, 			ErrorHandler errorHandler, int validationMode, boolean namespaceAware) throws Exception;1328020251;Load the {@link Document} at the supplied {@link InputSource} using the standard JAXP-configured_XML parser.;public Document loadDocument(InputSource inputSource, EntityResolver entityResolver,_			ErrorHandler errorHandler, int validationMode, boolean namespaceAware) throws Exception {__		DocumentBuilderFactory factory = createDocumentBuilderFactory(validationMode, namespaceAware)__		if (logger.isDebugEnabled()) {_			logger.debug("Using JAXP provider [" + factory.getClass().getName() + "]")__		}_		DocumentBuilder builder = createDocumentBuilder(factory, entityResolver, errorHandler)__		return builder.parse(inputSource)__	};load,the,link,document,at,the,supplied,link,input,source,using,the,standard,jaxp,configured,xml,parser;public,document,load,document,input,source,input,source,entity,resolver,entity,resolver,error,handler,error,handler,int,validation,mode,boolean,namespace,aware,throws,exception,document,builder,factory,factory,create,document,builder,factory,validation,mode,namespace,aware,if,logger,is,debug,enabled,logger,debug,using,jaxp,provider,factory,get,class,get,name,document,builder,builder,create,document,builder,factory,entity,resolver,error,handler,return,builder,parse,input,source
DefaultDocumentLoader -> public Document loadDocument(InputSource inputSource, EntityResolver entityResolver, 			ErrorHandler errorHandler, int validationMode, boolean namespaceAware) throws Exception;1357119239;Load the {@link Document} at the supplied {@link InputSource} using the standard JAXP-configured_XML parser.;public Document loadDocument(InputSource inputSource, EntityResolver entityResolver,_			ErrorHandler errorHandler, int validationMode, boolean namespaceAware) throws Exception {__		DocumentBuilderFactory factory = createDocumentBuilderFactory(validationMode, namespaceAware)__		if (logger.isDebugEnabled()) {_			logger.debug("Using JAXP provider [" + factory.getClass().getName() + "]")__		}_		DocumentBuilder builder = createDocumentBuilder(factory, entityResolver, errorHandler)__		return builder.parse(inputSource)__	};load,the,link,document,at,the,supplied,link,input,source,using,the,standard,jaxp,configured,xml,parser;public,document,load,document,input,source,input,source,entity,resolver,entity,resolver,error,handler,error,handler,int,validation,mode,boolean,namespace,aware,throws,exception,document,builder,factory,factory,create,document,builder,factory,validation,mode,namespace,aware,if,logger,is,debug,enabled,logger,debug,using,jaxp,provider,factory,get,class,get,name,document,builder,builder,create,document,builder,factory,entity,resolver,error,handler,return,builder,parse,input,source
DefaultDocumentLoader -> protected DocumentBuilder createDocumentBuilder( 			DocumentBuilderFactory factory, EntityResolver entityResolver, ErrorHandler errorHandler) 			throws ParserConfigurationException;1328020251;Create a JAXP DocumentBuilder that this bean definition reader_will use for parsing XML documents. Can be overridden in subclasses,_adding further initialization of the builder._@param factory the JAXP DocumentBuilderFactory that the DocumentBuilder_should be created with_@param entityResolver the SAX EntityResolver to use_@param errorHandler the SAX ErrorHandler to use_@return the JAXP DocumentBuilder_@throws ParserConfigurationException if thrown by JAXP methods;protected DocumentBuilder createDocumentBuilder(_			DocumentBuilderFactory factory, EntityResolver entityResolver, ErrorHandler errorHandler)_			throws ParserConfigurationException {__		DocumentBuilder docBuilder = factory.newDocumentBuilder()__		if (entityResolver != null) {_			docBuilder.setEntityResolver(entityResolver)__		}_		if (errorHandler != null) {_			docBuilder.setErrorHandler(errorHandler)__		}_		return docBuilder__	};create,a,jaxp,document,builder,that,this,bean,definition,reader,will,use,for,parsing,xml,documents,can,be,overridden,in,subclasses,adding,further,initialization,of,the,builder,param,factory,the,jaxp,document,builder,factory,that,the,document,builder,should,be,created,with,param,entity,resolver,the,sax,entity,resolver,to,use,param,error,handler,the,sax,error,handler,to,use,return,the,jaxp,document,builder,throws,parser,configuration,exception,if,thrown,by,jaxp,methods;protected,document,builder,create,document,builder,document,builder,factory,factory,entity,resolver,entity,resolver,error,handler,error,handler,throws,parser,configuration,exception,document,builder,doc,builder,factory,new,document,builder,if,entity,resolver,null,doc,builder,set,entity,resolver,entity,resolver,if,error,handler,null,doc,builder,set,error,handler,error,handler,return,doc,builder
DefaultDocumentLoader -> protected DocumentBuilder createDocumentBuilder( 			DocumentBuilderFactory factory, EntityResolver entityResolver, ErrorHandler errorHandler) 			throws ParserConfigurationException;1356735495;Create a JAXP DocumentBuilder that this bean definition reader_will use for parsing XML documents. Can be overridden in subclasses,_adding further initialization of the builder._@param factory the JAXP DocumentBuilderFactory that the DocumentBuilder_should be created with_@param entityResolver the SAX EntityResolver to use_@param errorHandler the SAX ErrorHandler to use_@return the JAXP DocumentBuilder_@throws ParserConfigurationException if thrown by JAXP methods;protected DocumentBuilder createDocumentBuilder(_			DocumentBuilderFactory factory, EntityResolver entityResolver, ErrorHandler errorHandler)_			throws ParserConfigurationException {__		DocumentBuilder docBuilder = factory.newDocumentBuilder()__		if (entityResolver != null) {_			docBuilder.setEntityResolver(entityResolver)__		}_		if (errorHandler != null) {_			docBuilder.setErrorHandler(errorHandler)__		}_		return docBuilder__	};create,a,jaxp,document,builder,that,this,bean,definition,reader,will,use,for,parsing,xml,documents,can,be,overridden,in,subclasses,adding,further,initialization,of,the,builder,param,factory,the,jaxp,document,builder,factory,that,the,document,builder,should,be,created,with,param,entity,resolver,the,sax,entity,resolver,to,use,param,error,handler,the,sax,error,handler,to,use,return,the,jaxp,document,builder,throws,parser,configuration,exception,if,thrown,by,jaxp,methods;protected,document,builder,create,document,builder,document,builder,factory,factory,entity,resolver,entity,resolver,error,handler,error,handler,throws,parser,configuration,exception,document,builder,doc,builder,factory,new,document,builder,if,entity,resolver,null,doc,builder,set,entity,resolver,entity,resolver,if,error,handler,null,doc,builder,set,error,handler,error,handler,return,doc,builder
DefaultDocumentLoader -> protected DocumentBuilder createDocumentBuilder( 			DocumentBuilderFactory factory, EntityResolver entityResolver, ErrorHandler errorHandler) 			throws ParserConfigurationException;1357119239;Create a JAXP DocumentBuilder that this bean definition reader_will use for parsing XML documents. Can be overridden in subclasses,_adding further initialization of the builder._@param factory the JAXP DocumentBuilderFactory that the DocumentBuilder_should be created with_@param entityResolver the SAX EntityResolver to use_@param errorHandler the SAX ErrorHandler to use_@return the JAXP DocumentBuilder_@throws ParserConfigurationException if thrown by JAXP methods;protected DocumentBuilder createDocumentBuilder(_			DocumentBuilderFactory factory, EntityResolver entityResolver, ErrorHandler errorHandler)_			throws ParserConfigurationException {__		DocumentBuilder docBuilder = factory.newDocumentBuilder()__		if (entityResolver != null) {_			docBuilder.setEntityResolver(entityResolver)__		}_		if (errorHandler != null) {_			docBuilder.setErrorHandler(errorHandler)__		}_		return docBuilder__	};create,a,jaxp,document,builder,that,this,bean,definition,reader,will,use,for,parsing,xml,documents,can,be,overridden,in,subclasses,adding,further,initialization,of,the,builder,param,factory,the,jaxp,document,builder,factory,that,the,document,builder,should,be,created,with,param,entity,resolver,the,sax,entity,resolver,to,use,param,error,handler,the,sax,error,handler,to,use,return,the,jaxp,document,builder,throws,parser,configuration,exception,if,thrown,by,jaxp,methods;protected,document,builder,create,document,builder,document,builder,factory,factory,entity,resolver,entity,resolver,error,handler,error,handler,throws,parser,configuration,exception,document,builder,doc,builder,factory,new,document,builder,if,entity,resolver,null,doc,builder,set,entity,resolver,entity,resolver,if,error,handler,null,doc,builder,set,error,handler,error,handler,return,doc,builder
DefaultDocumentLoader -> protected DocumentBuilder createDocumentBuilder( 			DocumentBuilderFactory factory, EntityResolver entityResolver, ErrorHandler errorHandler) 			throws ParserConfigurationException;1368482696;Create a JAXP DocumentBuilder that this bean definition reader_will use for parsing XML documents. Can be overridden in subclasses,_adding further initialization of the builder._@param factory the JAXP DocumentBuilderFactory that the DocumentBuilder_should be created with_@param entityResolver the SAX EntityResolver to use_@param errorHandler the SAX ErrorHandler to use_@return the JAXP DocumentBuilder_@throws ParserConfigurationException if thrown by JAXP methods;protected DocumentBuilder createDocumentBuilder(_			DocumentBuilderFactory factory, EntityResolver entityResolver, ErrorHandler errorHandler)_			throws ParserConfigurationException {__		DocumentBuilder docBuilder = factory.newDocumentBuilder()__		if (entityResolver != null) {_			docBuilder.setEntityResolver(entityResolver)__		}_		if (errorHandler != null) {_			docBuilder.setErrorHandler(errorHandler)__		}_		return docBuilder__	};create,a,jaxp,document,builder,that,this,bean,definition,reader,will,use,for,parsing,xml,documents,can,be,overridden,in,subclasses,adding,further,initialization,of,the,builder,param,factory,the,jaxp,document,builder,factory,that,the,document,builder,should,be,created,with,param,entity,resolver,the,sax,entity,resolver,to,use,param,error,handler,the,sax,error,handler,to,use,return,the,jaxp,document,builder,throws,parser,configuration,exception,if,thrown,by,jaxp,methods;protected,document,builder,create,document,builder,document,builder,factory,factory,entity,resolver,entity,resolver,error,handler,error,handler,throws,parser,configuration,exception,document,builder,doc,builder,factory,new,document,builder,if,entity,resolver,null,doc,builder,set,entity,resolver,entity,resolver,if,error,handler,null,doc,builder,set,error,handler,error,handler,return,doc,builder
DefaultDocumentLoader -> protected DocumentBuilder createDocumentBuilder( 			DocumentBuilderFactory factory, EntityResolver entityResolver, ErrorHandler errorHandler) 			throws ParserConfigurationException;1372363092;Create a JAXP DocumentBuilder that this bean definition reader_will use for parsing XML documents. Can be overridden in subclasses,_adding further initialization of the builder._@param factory the JAXP DocumentBuilderFactory that the DocumentBuilder_should be created with_@param entityResolver the SAX EntityResolver to use_@param errorHandler the SAX ErrorHandler to use_@return the JAXP DocumentBuilder_@throws ParserConfigurationException if thrown by JAXP methods;protected DocumentBuilder createDocumentBuilder(_			DocumentBuilderFactory factory, EntityResolver entityResolver, ErrorHandler errorHandler)_			throws ParserConfigurationException {__		DocumentBuilder docBuilder = factory.newDocumentBuilder()__		if (entityResolver != null) {_			docBuilder.setEntityResolver(entityResolver)__		}_		if (errorHandler != null) {_			docBuilder.setErrorHandler(errorHandler)__		}_		return docBuilder__	};create,a,jaxp,document,builder,that,this,bean,definition,reader,will,use,for,parsing,xml,documents,can,be,overridden,in,subclasses,adding,further,initialization,of,the,builder,param,factory,the,jaxp,document,builder,factory,that,the,document,builder,should,be,created,with,param,entity,resolver,the,sax,entity,resolver,to,use,param,error,handler,the,sax,error,handler,to,use,return,the,jaxp,document,builder,throws,parser,configuration,exception,if,thrown,by,jaxp,methods;protected,document,builder,create,document,builder,document,builder,factory,factory,entity,resolver,entity,resolver,error,handler,error,handler,throws,parser,configuration,exception,document,builder,doc,builder,factory,new,document,builder,if,entity,resolver,null,doc,builder,set,entity,resolver,entity,resolver,if,error,handler,null,doc,builder,set,error,handler,error,handler,return,doc,builder
DefaultDocumentLoader -> protected DocumentBuilder createDocumentBuilder( 			DocumentBuilderFactory factory, EntityResolver entityResolver, ErrorHandler errorHandler) 			throws ParserConfigurationException;1372946100;Create a JAXP DocumentBuilder that this bean definition reader_will use for parsing XML documents. Can be overridden in subclasses,_adding further initialization of the builder._@param factory the JAXP DocumentBuilderFactory that the DocumentBuilder_should be created with_@param entityResolver the SAX EntityResolver to use_@param errorHandler the SAX ErrorHandler to use_@return the JAXP DocumentBuilder_@throws ParserConfigurationException if thrown by JAXP methods;protected DocumentBuilder createDocumentBuilder(_			DocumentBuilderFactory factory, EntityResolver entityResolver, ErrorHandler errorHandler)_			throws ParserConfigurationException {__		DocumentBuilder docBuilder = factory.newDocumentBuilder()__		if (entityResolver != null) {_			docBuilder.setEntityResolver(entityResolver)__		}_		if (errorHandler != null) {_			docBuilder.setErrorHandler(errorHandler)__		}_		return docBuilder__	};create,a,jaxp,document,builder,that,this,bean,definition,reader,will,use,for,parsing,xml,documents,can,be,overridden,in,subclasses,adding,further,initialization,of,the,builder,param,factory,the,jaxp,document,builder,factory,that,the,document,builder,should,be,created,with,param,entity,resolver,the,sax,entity,resolver,to,use,param,error,handler,the,sax,error,handler,to,use,return,the,jaxp,document,builder,throws,parser,configuration,exception,if,thrown,by,jaxp,methods;protected,document,builder,create,document,builder,document,builder,factory,factory,entity,resolver,entity,resolver,error,handler,error,handler,throws,parser,configuration,exception,document,builder,doc,builder,factory,new,document,builder,if,entity,resolver,null,doc,builder,set,entity,resolver,entity,resolver,if,error,handler,null,doc,builder,set,error,handler,error,handler,return,doc,builder
