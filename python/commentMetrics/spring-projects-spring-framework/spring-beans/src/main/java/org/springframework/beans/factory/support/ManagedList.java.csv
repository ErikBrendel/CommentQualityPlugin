commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the configuration source {@code Object} for this metadata element.  * <p>The exact type of the object will depend on the configuration mechanism used.  */ ;/**  * Set the configuration source {@code Object} for this metadata element.  * <p>The exact type of the object will depend on the configuration mechanism used.  */ public void setSource(@Nullable Object source) {     this.source = source. }
false;public;0;5;;@Override @Nullable public Object getSource() {     return this.source. }
true;public;1;3;/**  * Set the default element type name (class name) to be used for this list.  */ ;/**  * Set the default element type name (class name) to be used for this list.  */ public void setElementTypeName(String elementTypeName) {     this.elementTypeName = elementTypeName. }
true;public;0;4;/**  * Return the default element type name (class name) to be used for this list.  */ ;/**  * Return the default element type name (class name) to be used for this list.  */ @Nullable public String getElementTypeName() {     return this.elementTypeName. }
true;public;1;3;/**  * Set whether merging should be enabled for this collection,  * in case of a 'parent' collection value being present.  */ ;/**  * Set whether merging should be enabled for this collection,  * in case of a 'parent' collection value being present.  */ public void setMergeEnabled(boolean mergeEnabled) {     this.mergeEnabled = mergeEnabled. }
false;public;0;4;;@Override public boolean isMergeEnabled() {     return this.mergeEnabled. }
false;public;1;17;;@Override @SuppressWarnings("unchecked") public List<E> merge(@Nullable Object parent) {     if (!this.mergeEnabled) {         throw new IllegalStateException("Not allowed to merge when the 'mergeEnabled' property is set to 'false'").     }     if (parent == null) {         return this.     }     if (!(parent instanceof List)) {         throw new IllegalArgumentException("Cannot merge with object of type [" + parent.getClass() + "]").     }     List<E> merged = new ManagedList<>().     merged.addAll((List<E>) parent).     merged.addAll(this).     return merged. }
