# id;timestamp;commentText;codeText;commentWords;codeWords
PropertiesBeanDefinitionReader -> public int loadBeanDefinitions(EncodedResource encodedResource) throws BeanDefinitionStoreException;1328020251;Load bean definitions from the specified properties file._@param encodedResource the resource descriptor for the properties file,_allowing to specify an encoding to use for parsing the file_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int loadBeanDefinitions(EncodedResource encodedResource) throws BeanDefinitionStoreException {_		return loadBeanDefinitions(encodedResource, null)__	};load,bean,definitions,from,the,specified,properties,file,param,encoded,resource,the,resource,descriptor,for,the,properties,file,allowing,to,specify,an,encoding,to,use,for,parsing,the,file,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,load,bean,definitions,encoded,resource,encoded,resource,throws,bean,definition,store,exception,return,load,bean,definitions,encoded,resource,null
PropertiesBeanDefinitionReader -> public int loadBeanDefinitions(EncodedResource encodedResource) throws BeanDefinitionStoreException;1356735495;Load bean definitions from the specified properties file._@param encodedResource the resource descriptor for the properties file,_allowing to specify an encoding to use for parsing the file_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int loadBeanDefinitions(EncodedResource encodedResource) throws BeanDefinitionStoreException {_		return loadBeanDefinitions(encodedResource, null)__	};load,bean,definitions,from,the,specified,properties,file,param,encoded,resource,the,resource,descriptor,for,the,properties,file,allowing,to,specify,an,encoding,to,use,for,parsing,the,file,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,load,bean,definitions,encoded,resource,encoded,resource,throws,bean,definition,store,exception,return,load,bean,definitions,encoded,resource,null
PropertiesBeanDefinitionReader -> public int loadBeanDefinitions(EncodedResource encodedResource) throws BeanDefinitionStoreException;1357119239;Load bean definitions from the specified properties file._@param encodedResource the resource descriptor for the properties file,_allowing to specify an encoding to use for parsing the file_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int loadBeanDefinitions(EncodedResource encodedResource) throws BeanDefinitionStoreException {_		return loadBeanDefinitions(encodedResource, null)__	};load,bean,definitions,from,the,specified,properties,file,param,encoded,resource,the,resource,descriptor,for,the,properties,file,allowing,to,specify,an,encoding,to,use,for,parsing,the,file,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,load,bean,definitions,encoded,resource,encoded,resource,throws,bean,definition,store,exception,return,load,bean,definitions,encoded,resource,null
PropertiesBeanDefinitionReader -> public int loadBeanDefinitions(EncodedResource encodedResource) throws BeanDefinitionStoreException;1362408075;Load bean definitions from the specified properties file._@param encodedResource the resource descriptor for the properties file,_allowing to specify an encoding to use for parsing the file_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int loadBeanDefinitions(EncodedResource encodedResource) throws BeanDefinitionStoreException {_		return loadBeanDefinitions(encodedResource, null)__	};load,bean,definitions,from,the,specified,properties,file,param,encoded,resource,the,resource,descriptor,for,the,properties,file,allowing,to,specify,an,encoding,to,use,for,parsing,the,file,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,load,bean,definitions,encoded,resource,encoded,resource,throws,bean,definition,store,exception,return,load,bean,definitions,encoded,resource,null
PropertiesBeanDefinitionReader -> public int loadBeanDefinitions(EncodedResource encodedResource) throws BeanDefinitionStoreException;1368482696;Load bean definitions from the specified properties file._@param encodedResource the resource descriptor for the properties file,_allowing to specify an encoding to use for parsing the file_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int loadBeanDefinitions(EncodedResource encodedResource) throws BeanDefinitionStoreException {_		return loadBeanDefinitions(encodedResource, null)__	};load,bean,definitions,from,the,specified,properties,file,param,encoded,resource,the,resource,descriptor,for,the,properties,file,allowing,to,specify,an,encoding,to,use,for,parsing,the,file,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,load,bean,definitions,encoded,resource,encoded,resource,throws,bean,definition,store,exception,return,load,bean,definitions,encoded,resource,null
PropertiesBeanDefinitionReader -> public int loadBeanDefinitions(EncodedResource encodedResource) throws BeanDefinitionStoreException;1385412762;Load bean definitions from the specified properties file._@param encodedResource the resource descriptor for the properties file,_allowing to specify an encoding to use for parsing the file_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int loadBeanDefinitions(EncodedResource encodedResource) throws BeanDefinitionStoreException {_		return loadBeanDefinitions(encodedResource, null)__	};load,bean,definitions,from,the,specified,properties,file,param,encoded,resource,the,resource,descriptor,for,the,properties,file,allowing,to,specify,an,encoding,to,use,for,parsing,the,file,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,load,bean,definitions,encoded,resource,encoded,resource,throws,bean,definition,store,exception,return,load,bean,definitions,encoded,resource,null
PropertiesBeanDefinitionReader -> public int loadBeanDefinitions(EncodedResource encodedResource) throws BeanDefinitionStoreException;1467730834;Load bean definitions from the specified properties file._@param encodedResource the resource descriptor for the properties file,_allowing to specify an encoding to use for parsing the file_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int loadBeanDefinitions(EncodedResource encodedResource) throws BeanDefinitionStoreException {_		return loadBeanDefinitions(encodedResource, null)__	};load,bean,definitions,from,the,specified,properties,file,param,encoded,resource,the,resource,descriptor,for,the,properties,file,allowing,to,specify,an,encoding,to,use,for,parsing,the,file,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,load,bean,definitions,encoded,resource,encoded,resource,throws,bean,definition,store,exception,return,load,bean,definitions,encoded,resource,null
PropertiesBeanDefinitionReader -> public int loadBeanDefinitions(EncodedResource encodedResource) throws BeanDefinitionStoreException;1495868221;Load bean definitions from the specified properties file._@param encodedResource the resource descriptor for the properties file,_allowing to specify an encoding to use for parsing the file_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int loadBeanDefinitions(EncodedResource encodedResource) throws BeanDefinitionStoreException {_		return loadBeanDefinitions(encodedResource, null)__	};load,bean,definitions,from,the,specified,properties,file,param,encoded,resource,the,resource,descriptor,for,the,properties,file,allowing,to,specify,an,encoding,to,use,for,parsing,the,file,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,load,bean,definitions,encoded,resource,encoded,resource,throws,bean,definition,store,exception,return,load,bean,definitions,encoded,resource,null
PropertiesBeanDefinitionReader -> public int loadBeanDefinitions(EncodedResource encodedResource) throws BeanDefinitionStoreException;1496837955;Load bean definitions from the specified properties file._@param encodedResource the resource descriptor for the properties file,_allowing to specify an encoding to use for parsing the file_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int loadBeanDefinitions(EncodedResource encodedResource) throws BeanDefinitionStoreException {_		return loadBeanDefinitions(encodedResource, null)__	};load,bean,definitions,from,the,specified,properties,file,param,encoded,resource,the,resource,descriptor,for,the,properties,file,allowing,to,specify,an,encoding,to,use,for,parsing,the,file,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,load,bean,definitions,encoded,resource,encoded,resource,throws,bean,definition,store,exception,return,load,bean,definitions,encoded,resource,null
PropertiesBeanDefinitionReader -> public int loadBeanDefinitions(EncodedResource encodedResource) throws BeanDefinitionStoreException;1498780456;Load bean definitions from the specified properties file._@param encodedResource the resource descriptor for the properties file,_allowing to specify an encoding to use for parsing the file_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int loadBeanDefinitions(EncodedResource encodedResource) throws BeanDefinitionStoreException {_		return loadBeanDefinitions(encodedResource, null)__	};load,bean,definitions,from,the,specified,properties,file,param,encoded,resource,the,resource,descriptor,for,the,properties,file,allowing,to,specify,an,encoding,to,use,for,parsing,the,file,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,load,bean,definitions,encoded,resource,encoded,resource,throws,bean,definition,store,exception,return,load,bean,definitions,encoded,resource,null
PropertiesBeanDefinitionReader -> public int loadBeanDefinitions(EncodedResource encodedResource) throws BeanDefinitionStoreException;1518167602;Load bean definitions from the specified properties file._@param encodedResource the resource descriptor for the properties file,_allowing to specify an encoding to use for parsing the file_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int loadBeanDefinitions(EncodedResource encodedResource) throws BeanDefinitionStoreException {_		return loadBeanDefinitions(encodedResource, null)__	};load,bean,definitions,from,the,specified,properties,file,param,encoded,resource,the,resource,descriptor,for,the,properties,file,allowing,to,specify,an,encoding,to,use,for,parsing,the,file,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,load,bean,definitions,encoded,resource,encoded,resource,throws,bean,definition,store,exception,return,load,bean,definitions,encoded,resource,null
PropertiesBeanDefinitionReader -> public int loadBeanDefinitions(EncodedResource encodedResource) throws BeanDefinitionStoreException;1518167818;Load bean definitions from the specified properties file._@param encodedResource the resource descriptor for the properties file,_allowing to specify an encoding to use for parsing the file_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int loadBeanDefinitions(EncodedResource encodedResource) throws BeanDefinitionStoreException {_		return loadBeanDefinitions(encodedResource, null)__	};load,bean,definitions,from,the,specified,properties,file,param,encoded,resource,the,resource,descriptor,for,the,properties,file,allowing,to,specify,an,encoding,to,use,for,parsing,the,file,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,load,bean,definitions,encoded,resource,encoded,resource,throws,bean,definition,store,exception,return,load,bean,definitions,encoded,resource,null
PropertiesBeanDefinitionReader -> public int loadBeanDefinitions(EncodedResource encodedResource) throws BeanDefinitionStoreException;1530174524;Load bean definitions from the specified properties file._@param encodedResource the resource descriptor for the properties file,_allowing to specify an encoding to use for parsing the file_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int loadBeanDefinitions(EncodedResource encodedResource) throws BeanDefinitionStoreException {_		return loadBeanDefinitions(encodedResource, null)__	};load,bean,definitions,from,the,specified,properties,file,param,encoded,resource,the,resource,descriptor,for,the,properties,file,allowing,to,specify,an,encoding,to,use,for,parsing,the,file,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,load,bean,definitions,encoded,resource,encoded,resource,throws,bean,definition,store,exception,return,load,bean,definitions,encoded,resource,null
PropertiesBeanDefinitionReader -> public int loadBeanDefinitions(EncodedResource encodedResource) throws BeanDefinitionStoreException;1532706365;Load bean definitions from the specified properties file._@param encodedResource the resource descriptor for the properties file,_allowing to specify an encoding to use for parsing the file_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int loadBeanDefinitions(EncodedResource encodedResource) throws BeanDefinitionStoreException {_		return loadBeanDefinitions(encodedResource, null)__	};load,bean,definitions,from,the,specified,properties,file,param,encoded,resource,the,resource,descriptor,for,the,properties,file,allowing,to,specify,an,encoding,to,use,for,parsing,the,file,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,load,bean,definitions,encoded,resource,encoded,resource,throws,bean,definition,store,exception,return,load,bean,definitions,encoded,resource,null
PropertiesBeanDefinitionReader -> public int loadBeanDefinitions(EncodedResource encodedResource) throws BeanDefinitionStoreException;1538724083;Load bean definitions from the specified properties file._@param encodedResource the resource descriptor for the properties file,_allowing to specify an encoding to use for parsing the file_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int loadBeanDefinitions(EncodedResource encodedResource) throws BeanDefinitionStoreException {_		return loadBeanDefinitions(encodedResource, null)__	};load,bean,definitions,from,the,specified,properties,file,param,encoded,resource,the,resource,descriptor,for,the,properties,file,allowing,to,specify,an,encoding,to,use,for,parsing,the,file,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,load,bean,definitions,encoded,resource,encoded,resource,throws,bean,definition,store,exception,return,load,bean,definitions,encoded,resource,null
PropertiesBeanDefinitionReader -> @Override 	public int loadBeanDefinitions(Resource resource) throws BeanDefinitionStoreException;1356735495;Load bean definitions from the specified properties file,_using all property keys (i.e. not filtering by prefix)._@param resource the resource descriptor for the properties file_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors_@see #loadBeanDefinitions(org.springframework.core.io.Resource, String);@Override_	public int loadBeanDefinitions(Resource resource) throws BeanDefinitionStoreException {_		return loadBeanDefinitions(new EncodedResource(resource), null)__	};load,bean,definitions,from,the,specified,properties,file,using,all,property,keys,i,e,not,filtering,by,prefix,param,resource,the,resource,descriptor,for,the,properties,file,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors,see,load,bean,definitions,org,springframework,core,io,resource,string;override,public,int,load,bean,definitions,resource,resource,throws,bean,definition,store,exception,return,load,bean,definitions,new,encoded,resource,resource,null
PropertiesBeanDefinitionReader -> @Override 	public int loadBeanDefinitions(Resource resource) throws BeanDefinitionStoreException;1368482696;Load bean definitions from the specified properties file,_using all property keys (i.e. not filtering by prefix)._@param resource the resource descriptor for the properties file_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors_@see #loadBeanDefinitions(org.springframework.core.io.Resource, String);@Override_	public int loadBeanDefinitions(Resource resource) throws BeanDefinitionStoreException {_		return loadBeanDefinitions(new EncodedResource(resource), null)__	};load,bean,definitions,from,the,specified,properties,file,using,all,property,keys,i,e,not,filtering,by,prefix,param,resource,the,resource,descriptor,for,the,properties,file,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors,see,load,bean,definitions,org,springframework,core,io,resource,string;override,public,int,load,bean,definitions,resource,resource,throws,bean,definition,store,exception,return,load,bean,definitions,new,encoded,resource,resource,null
PropertiesBeanDefinitionReader -> @Override 	public int loadBeanDefinitions(Resource resource) throws BeanDefinitionStoreException;1385412762;Load bean definitions from the specified properties file,_using all property keys (i.e. not filtering by prefix)._@param resource the resource descriptor for the properties file_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors_@see #loadBeanDefinitions(org.springframework.core.io.Resource, String);@Override_	public int loadBeanDefinitions(Resource resource) throws BeanDefinitionStoreException {_		return loadBeanDefinitions(new EncodedResource(resource), null)__	};load,bean,definitions,from,the,specified,properties,file,using,all,property,keys,i,e,not,filtering,by,prefix,param,resource,the,resource,descriptor,for,the,properties,file,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors,see,load,bean,definitions,org,springframework,core,io,resource,string;override,public,int,load,bean,definitions,resource,resource,throws,bean,definition,store,exception,return,load,bean,definitions,new,encoded,resource,resource,null
PropertiesBeanDefinitionReader -> @Override 	public int loadBeanDefinitions(Resource resource) throws BeanDefinitionStoreException;1467730834;Load bean definitions from the specified properties file,_using all property keys (i.e. not filtering by prefix)._@param resource the resource descriptor for the properties file_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors_@see #loadBeanDefinitions(org.springframework.core.io.Resource, String);@Override_	public int loadBeanDefinitions(Resource resource) throws BeanDefinitionStoreException {_		return loadBeanDefinitions(new EncodedResource(resource), null)__	};load,bean,definitions,from,the,specified,properties,file,using,all,property,keys,i,e,not,filtering,by,prefix,param,resource,the,resource,descriptor,for,the,properties,file,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors,see,load,bean,definitions,org,springframework,core,io,resource,string;override,public,int,load,bean,definitions,resource,resource,throws,bean,definition,store,exception,return,load,bean,definitions,new,encoded,resource,resource,null
PropertiesBeanDefinitionReader -> @Override 	public int loadBeanDefinitions(Resource resource) throws BeanDefinitionStoreException;1495868221;Load bean definitions from the specified properties file,_using all property keys (i.e. not filtering by prefix)._@param resource the resource descriptor for the properties file_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors_@see #loadBeanDefinitions(org.springframework.core.io.Resource, String);@Override_	public int loadBeanDefinitions(Resource resource) throws BeanDefinitionStoreException {_		return loadBeanDefinitions(new EncodedResource(resource), null)__	};load,bean,definitions,from,the,specified,properties,file,using,all,property,keys,i,e,not,filtering,by,prefix,param,resource,the,resource,descriptor,for,the,properties,file,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors,see,load,bean,definitions,org,springframework,core,io,resource,string;override,public,int,load,bean,definitions,resource,resource,throws,bean,definition,store,exception,return,load,bean,definitions,new,encoded,resource,resource,null
PropertiesBeanDefinitionReader -> @Override 	public int loadBeanDefinitions(Resource resource) throws BeanDefinitionStoreException;1496837955;Load bean definitions from the specified properties file,_using all property keys (i.e. not filtering by prefix)._@param resource the resource descriptor for the properties file_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors_@see #loadBeanDefinitions(org.springframework.core.io.Resource, String);@Override_	public int loadBeanDefinitions(Resource resource) throws BeanDefinitionStoreException {_		return loadBeanDefinitions(new EncodedResource(resource), null)__	};load,bean,definitions,from,the,specified,properties,file,using,all,property,keys,i,e,not,filtering,by,prefix,param,resource,the,resource,descriptor,for,the,properties,file,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors,see,load,bean,definitions,org,springframework,core,io,resource,string;override,public,int,load,bean,definitions,resource,resource,throws,bean,definition,store,exception,return,load,bean,definitions,new,encoded,resource,resource,null
PropertiesBeanDefinitionReader -> @Override 	public int loadBeanDefinitions(Resource resource) throws BeanDefinitionStoreException;1498780456;Load bean definitions from the specified properties file,_using all property keys (i.e. not filtering by prefix)._@param resource the resource descriptor for the properties file_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors_@see #loadBeanDefinitions(org.springframework.core.io.Resource, String);@Override_	public int loadBeanDefinitions(Resource resource) throws BeanDefinitionStoreException {_		return loadBeanDefinitions(new EncodedResource(resource), null)__	};load,bean,definitions,from,the,specified,properties,file,using,all,property,keys,i,e,not,filtering,by,prefix,param,resource,the,resource,descriptor,for,the,properties,file,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors,see,load,bean,definitions,org,springframework,core,io,resource,string;override,public,int,load,bean,definitions,resource,resource,throws,bean,definition,store,exception,return,load,bean,definitions,new,encoded,resource,resource,null
PropertiesBeanDefinitionReader -> @Override 	public int loadBeanDefinitions(Resource resource) throws BeanDefinitionStoreException;1518167602;Load bean definitions from the specified properties file,_using all property keys (i.e. not filtering by prefix)._@param resource the resource descriptor for the properties file_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors_@see #loadBeanDefinitions(org.springframework.core.io.Resource, String);@Override_	public int loadBeanDefinitions(Resource resource) throws BeanDefinitionStoreException {_		return loadBeanDefinitions(new EncodedResource(resource), null)__	};load,bean,definitions,from,the,specified,properties,file,using,all,property,keys,i,e,not,filtering,by,prefix,param,resource,the,resource,descriptor,for,the,properties,file,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors,see,load,bean,definitions,org,springframework,core,io,resource,string;override,public,int,load,bean,definitions,resource,resource,throws,bean,definition,store,exception,return,load,bean,definitions,new,encoded,resource,resource,null
PropertiesBeanDefinitionReader -> @Override 	public int loadBeanDefinitions(Resource resource) throws BeanDefinitionStoreException;1518167818;Load bean definitions from the specified properties file,_using all property keys (i.e. not filtering by prefix)._@param resource the resource descriptor for the properties file_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors_@see #loadBeanDefinitions(org.springframework.core.io.Resource, String);@Override_	public int loadBeanDefinitions(Resource resource) throws BeanDefinitionStoreException {_		return loadBeanDefinitions(new EncodedResource(resource), null)__	};load,bean,definitions,from,the,specified,properties,file,using,all,property,keys,i,e,not,filtering,by,prefix,param,resource,the,resource,descriptor,for,the,properties,file,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors,see,load,bean,definitions,org,springframework,core,io,resource,string;override,public,int,load,bean,definitions,resource,resource,throws,bean,definition,store,exception,return,load,bean,definitions,new,encoded,resource,resource,null
PropertiesBeanDefinitionReader -> @Override 	public int loadBeanDefinitions(Resource resource) throws BeanDefinitionStoreException;1530174524;Load bean definitions from the specified properties file,_using all property keys (i.e. not filtering by prefix)._@param resource the resource descriptor for the properties file_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors_@see #loadBeanDefinitions(org.springframework.core.io.Resource, String);@Override_	public int loadBeanDefinitions(Resource resource) throws BeanDefinitionStoreException {_		return loadBeanDefinitions(new EncodedResource(resource), null)__	};load,bean,definitions,from,the,specified,properties,file,using,all,property,keys,i,e,not,filtering,by,prefix,param,resource,the,resource,descriptor,for,the,properties,file,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors,see,load,bean,definitions,org,springframework,core,io,resource,string;override,public,int,load,bean,definitions,resource,resource,throws,bean,definition,store,exception,return,load,bean,definitions,new,encoded,resource,resource,null
PropertiesBeanDefinitionReader -> @Override 	public int loadBeanDefinitions(Resource resource) throws BeanDefinitionStoreException;1532706365;Load bean definitions from the specified properties file,_using all property keys (i.e. not filtering by prefix)._@param resource the resource descriptor for the properties file_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors_@see #loadBeanDefinitions(org.springframework.core.io.Resource, String);@Override_	public int loadBeanDefinitions(Resource resource) throws BeanDefinitionStoreException {_		return loadBeanDefinitions(new EncodedResource(resource), null)__	};load,bean,definitions,from,the,specified,properties,file,using,all,property,keys,i,e,not,filtering,by,prefix,param,resource,the,resource,descriptor,for,the,properties,file,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors,see,load,bean,definitions,org,springframework,core,io,resource,string;override,public,int,load,bean,definitions,resource,resource,throws,bean,definition,store,exception,return,load,bean,definitions,new,encoded,resource,resource,null
PropertiesBeanDefinitionReader -> @Override 	public int loadBeanDefinitions(Resource resource) throws BeanDefinitionStoreException;1538724083;Load bean definitions from the specified properties file,_using all property keys (i.e. not filtering by prefix)._@param resource the resource descriptor for the properties file_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors_@see #loadBeanDefinitions(org.springframework.core.io.Resource, String);@Override_	public int loadBeanDefinitions(Resource resource) throws BeanDefinitionStoreException {_		return loadBeanDefinitions(new EncodedResource(resource), null)__	};load,bean,definitions,from,the,specified,properties,file,using,all,property,keys,i,e,not,filtering,by,prefix,param,resource,the,resource,descriptor,for,the,properties,file,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors,see,load,bean,definitions,org,springframework,core,io,resource,string;override,public,int,load,bean,definitions,resource,resource,throws,bean,definition,store,exception,return,load,bean,definitions,new,encoded,resource,resource,null
PropertiesBeanDefinitionReader -> public int registerBeanDefinitions(ResourceBundle rb, String prefix) throws BeanDefinitionStoreException;1328020251;Register bean definitions contained in a ResourceBundle._<p>Similar syntax as for a Map. This method is useful to enable_standard Java internationalization support._@param rb the ResourceBundle to load from_@param prefix a filter within the keys in the map: e.g. 'beans.'_(can be empty or <code>null</code>)_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int registerBeanDefinitions(ResourceBundle rb, String prefix) throws BeanDefinitionStoreException {_		_		Map<String, Object> map = new HashMap<String, Object>()__		Enumeration keys = rb.getKeys()__		while (keys.hasMoreElements()) {_			String key = (String) keys.nextElement()__			map.put(key, rb.getObject(key))__		}_		return registerBeanDefinitions(map, prefix)__	};register,bean,definitions,contained,in,a,resource,bundle,p,similar,syntax,as,for,a,map,this,method,is,useful,to,enable,standard,java,internationalization,support,param,rb,the,resource,bundle,to,load,from,param,prefix,a,filter,within,the,keys,in,the,map,e,g,beans,can,be,empty,or,code,null,code,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,register,bean,definitions,resource,bundle,rb,string,prefix,throws,bean,definition,store,exception,map,string,object,map,new,hash,map,string,object,enumeration,keys,rb,get,keys,while,keys,has,more,elements,string,key,string,keys,next,element,map,put,key,rb,get,object,key,return,register,bean,definitions,map,prefix
PropertiesBeanDefinitionReader -> public int registerBeanDefinitions(ResourceBundle rb, String prefix) throws BeanDefinitionStoreException;1356735495;Register bean definitions contained in a ResourceBundle._<p>Similar syntax as for a Map. This method is useful to enable_standard Java internationalization support._@param rb the ResourceBundle to load from_@param prefix a filter within the keys in the map: e.g. 'beans.'_(can be empty or {@code null})_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int registerBeanDefinitions(ResourceBundle rb, String prefix) throws BeanDefinitionStoreException {_		_		Map<String, Object> map = new HashMap<String, Object>()__		Enumeration keys = rb.getKeys()__		while (keys.hasMoreElements()) {_			String key = (String) keys.nextElement()__			map.put(key, rb.getObject(key))__		}_		return registerBeanDefinitions(map, prefix)__	};register,bean,definitions,contained,in,a,resource,bundle,p,similar,syntax,as,for,a,map,this,method,is,useful,to,enable,standard,java,internationalization,support,param,rb,the,resource,bundle,to,load,from,param,prefix,a,filter,within,the,keys,in,the,map,e,g,beans,can,be,empty,or,code,null,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,register,bean,definitions,resource,bundle,rb,string,prefix,throws,bean,definition,store,exception,map,string,object,map,new,hash,map,string,object,enumeration,keys,rb,get,keys,while,keys,has,more,elements,string,key,string,keys,next,element,map,put,key,rb,get,object,key,return,register,bean,definitions,map,prefix
PropertiesBeanDefinitionReader -> public int registerBeanDefinitions(ResourceBundle rb, String prefix) throws BeanDefinitionStoreException;1357119239;Register bean definitions contained in a ResourceBundle._<p>Similar syntax as for a Map. This method is useful to enable_standard Java internationalization support._@param rb the ResourceBundle to load from_@param prefix a filter within the keys in the map: e.g. 'beans.'_(can be empty or {@code null})_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int registerBeanDefinitions(ResourceBundle rb, String prefix) throws BeanDefinitionStoreException {_		_		Map<String, Object> map = new HashMap<String, Object>()__		Enumeration keys = rb.getKeys()__		while (keys.hasMoreElements()) {_			String key = (String) keys.nextElement()__			map.put(key, rb.getObject(key))__		}_		return registerBeanDefinitions(map, prefix)__	};register,bean,definitions,contained,in,a,resource,bundle,p,similar,syntax,as,for,a,map,this,method,is,useful,to,enable,standard,java,internationalization,support,param,rb,the,resource,bundle,to,load,from,param,prefix,a,filter,within,the,keys,in,the,map,e,g,beans,can,be,empty,or,code,null,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,register,bean,definitions,resource,bundle,rb,string,prefix,throws,bean,definition,store,exception,map,string,object,map,new,hash,map,string,object,enumeration,keys,rb,get,keys,while,keys,has,more,elements,string,key,string,keys,next,element,map,put,key,rb,get,object,key,return,register,bean,definitions,map,prefix
PropertiesBeanDefinitionReader -> public int registerBeanDefinitions(ResourceBundle rb, String prefix) throws BeanDefinitionStoreException;1362408075;Register bean definitions contained in a ResourceBundle._<p>Similar syntax as for a Map. This method is useful to enable_standard Java internationalization support._@param rb the ResourceBundle to load from_@param prefix a filter within the keys in the map: e.g. 'beans.'_(can be empty or {@code null})_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int registerBeanDefinitions(ResourceBundle rb, String prefix) throws BeanDefinitionStoreException {_		_		Map<String, Object> map = new HashMap<String, Object>()__		Enumeration keys = rb.getKeys()__		while (keys.hasMoreElements()) {_			String key = (String) keys.nextElement()__			map.put(key, rb.getObject(key))__		}_		return registerBeanDefinitions(map, prefix)__	};register,bean,definitions,contained,in,a,resource,bundle,p,similar,syntax,as,for,a,map,this,method,is,useful,to,enable,standard,java,internationalization,support,param,rb,the,resource,bundle,to,load,from,param,prefix,a,filter,within,the,keys,in,the,map,e,g,beans,can,be,empty,or,code,null,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,register,bean,definitions,resource,bundle,rb,string,prefix,throws,bean,definition,store,exception,map,string,object,map,new,hash,map,string,object,enumeration,keys,rb,get,keys,while,keys,has,more,elements,string,key,string,keys,next,element,map,put,key,rb,get,object,key,return,register,bean,definitions,map,prefix
PropertiesBeanDefinitionReader -> public int registerBeanDefinitions(ResourceBundle rb, String prefix) throws BeanDefinitionStoreException;1368482696;Register bean definitions contained in a ResourceBundle._<p>Similar syntax as for a Map. This method is useful to enable_standard Java internationalization support._@param rb the ResourceBundle to load from_@param prefix a filter within the keys in the map: e.g. 'beans.'_(can be empty or {@code null})_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int registerBeanDefinitions(ResourceBundle rb, String prefix) throws BeanDefinitionStoreException {_		_		Map<String, Object> map = new HashMap<String, Object>()__		Enumeration keys = rb.getKeys()__		while (keys.hasMoreElements()) {_			String key = (String) keys.nextElement()__			map.put(key, rb.getObject(key))__		}_		return registerBeanDefinitions(map, prefix)__	};register,bean,definitions,contained,in,a,resource,bundle,p,similar,syntax,as,for,a,map,this,method,is,useful,to,enable,standard,java,internationalization,support,param,rb,the,resource,bundle,to,load,from,param,prefix,a,filter,within,the,keys,in,the,map,e,g,beans,can,be,empty,or,code,null,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,register,bean,definitions,resource,bundle,rb,string,prefix,throws,bean,definition,store,exception,map,string,object,map,new,hash,map,string,object,enumeration,keys,rb,get,keys,while,keys,has,more,elements,string,key,string,keys,next,element,map,put,key,rb,get,object,key,return,register,bean,definitions,map,prefix
PropertiesBeanDefinitionReader -> public int registerBeanDefinitions(ResourceBundle rb, String prefix) throws BeanDefinitionStoreException;1385412762;Register bean definitions contained in a ResourceBundle._<p>Similar syntax as for a Map. This method is useful to enable_standard Java internationalization support._@param rb the ResourceBundle to load from_@param prefix a filter within the keys in the map: e.g. 'beans.'_(can be empty or {@code null})_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int registerBeanDefinitions(ResourceBundle rb, String prefix) throws BeanDefinitionStoreException {_		_		Map<String, Object> map = new HashMap<String, Object>()__		Enumeration<String> keys = rb.getKeys()__		while (keys.hasMoreElements()) {_			String key = keys.nextElement()__			map.put(key, rb.getObject(key))__		}_		return registerBeanDefinitions(map, prefix)__	};register,bean,definitions,contained,in,a,resource,bundle,p,similar,syntax,as,for,a,map,this,method,is,useful,to,enable,standard,java,internationalization,support,param,rb,the,resource,bundle,to,load,from,param,prefix,a,filter,within,the,keys,in,the,map,e,g,beans,can,be,empty,or,code,null,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,register,bean,definitions,resource,bundle,rb,string,prefix,throws,bean,definition,store,exception,map,string,object,map,new,hash,map,string,object,enumeration,string,keys,rb,get,keys,while,keys,has,more,elements,string,key,keys,next,element,map,put,key,rb,get,object,key,return,register,bean,definitions,map,prefix
PropertiesBeanDefinitionReader -> public int registerBeanDefinitions(ResourceBundle rb, String prefix) throws BeanDefinitionStoreException;1467730834;Register bean definitions contained in a ResourceBundle._<p>Similar syntax as for a Map. This method is useful to enable_standard Java internationalization support._@param rb the ResourceBundle to load from_@param prefix a filter within the keys in the map: e.g. 'beans.'_(can be empty or {@code null})_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int registerBeanDefinitions(ResourceBundle rb, String prefix) throws BeanDefinitionStoreException {_		_		Map<String, Object> map = new HashMap<>()__		Enumeration<String> keys = rb.getKeys()__		while (keys.hasMoreElements()) {_			String key = keys.nextElement()__			map.put(key, rb.getObject(key))__		}_		return registerBeanDefinitions(map, prefix)__	};register,bean,definitions,contained,in,a,resource,bundle,p,similar,syntax,as,for,a,map,this,method,is,useful,to,enable,standard,java,internationalization,support,param,rb,the,resource,bundle,to,load,from,param,prefix,a,filter,within,the,keys,in,the,map,e,g,beans,can,be,empty,or,code,null,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,register,bean,definitions,resource,bundle,rb,string,prefix,throws,bean,definition,store,exception,map,string,object,map,new,hash,map,enumeration,string,keys,rb,get,keys,while,keys,has,more,elements,string,key,keys,next,element,map,put,key,rb,get,object,key,return,register,bean,definitions,map,prefix
PropertiesBeanDefinitionReader -> public void setDefaultParentBean(String defaultParentBean);1328020251;Set the default parent bean for this bean factory._If a child bean definition handled by this factory provides neither_a parent nor a class attribute, this default value gets used._<p>Can be used e.g. for view definition files, to define a parent_with a default view class and common attributes for all views._View definitions that define their own parent or carry their own_class can still override this._<p>Strictly speaking, the rule that a default parent setting does_not apply to a bean definition that carries a class is there for_backwards compatiblity reasons. It still matches the typical use case.;public void setDefaultParentBean(String defaultParentBean) {_		this.defaultParentBean = defaultParentBean__	};set,the,default,parent,bean,for,this,bean,factory,if,a,child,bean,definition,handled,by,this,factory,provides,neither,a,parent,nor,a,class,attribute,this,default,value,gets,used,p,can,be,used,e,g,for,view,definition,files,to,define,a,parent,with,a,default,view,class,and,common,attributes,for,all,views,view,definitions,that,define,their,own,parent,or,carry,their,own,class,can,still,override,this,p,strictly,speaking,the,rule,that,a,default,parent,setting,does,not,apply,to,a,bean,definition,that,carries,a,class,is,there,for,backwards,compatiblity,reasons,it,still,matches,the,typical,use,case;public,void,set,default,parent,bean,string,default,parent,bean,this,default,parent,bean,default,parent,bean
PropertiesBeanDefinitionReader -> public void setDefaultParentBean(String defaultParentBean);1356735495;Set the default parent bean for this bean factory._If a child bean definition handled by this factory provides neither_a parent nor a class attribute, this default value gets used._<p>Can be used e.g. for view definition files, to define a parent_with a default view class and common attributes for all views._View definitions that define their own parent or carry their own_class can still override this._<p>Strictly speaking, the rule that a default parent setting does_not apply to a bean definition that carries a class is there for_backwards compatiblity reasons. It still matches the typical use case.;public void setDefaultParentBean(String defaultParentBean) {_		this.defaultParentBean = defaultParentBean__	};set,the,default,parent,bean,for,this,bean,factory,if,a,child,bean,definition,handled,by,this,factory,provides,neither,a,parent,nor,a,class,attribute,this,default,value,gets,used,p,can,be,used,e,g,for,view,definition,files,to,define,a,parent,with,a,default,view,class,and,common,attributes,for,all,views,view,definitions,that,define,their,own,parent,or,carry,their,own,class,can,still,override,this,p,strictly,speaking,the,rule,that,a,default,parent,setting,does,not,apply,to,a,bean,definition,that,carries,a,class,is,there,for,backwards,compatiblity,reasons,it,still,matches,the,typical,use,case;public,void,set,default,parent,bean,string,default,parent,bean,this,default,parent,bean,default,parent,bean
PropertiesBeanDefinitionReader -> public void setDefaultParentBean(String defaultParentBean);1357119239;Set the default parent bean for this bean factory._If a child bean definition handled by this factory provides neither_a parent nor a class attribute, this default value gets used._<p>Can be used e.g. for view definition files, to define a parent_with a default view class and common attributes for all views._View definitions that define their own parent or carry their own_class can still override this._<p>Strictly speaking, the rule that a default parent setting does_not apply to a bean definition that carries a class is there for_backwards compatiblity reasons. It still matches the typical use case.;public void setDefaultParentBean(String defaultParentBean) {_		this.defaultParentBean = defaultParentBean__	};set,the,default,parent,bean,for,this,bean,factory,if,a,child,bean,definition,handled,by,this,factory,provides,neither,a,parent,nor,a,class,attribute,this,default,value,gets,used,p,can,be,used,e,g,for,view,definition,files,to,define,a,parent,with,a,default,view,class,and,common,attributes,for,all,views,view,definitions,that,define,their,own,parent,or,carry,their,own,class,can,still,override,this,p,strictly,speaking,the,rule,that,a,default,parent,setting,does,not,apply,to,a,bean,definition,that,carries,a,class,is,there,for,backwards,compatiblity,reasons,it,still,matches,the,typical,use,case;public,void,set,default,parent,bean,string,default,parent,bean,this,default,parent,bean,default,parent,bean
PropertiesBeanDefinitionReader -> public void setDefaultParentBean(String defaultParentBean);1362408075;Set the default parent bean for this bean factory._If a child bean definition handled by this factory provides neither_a parent nor a class attribute, this default value gets used._<p>Can be used e.g. for view definition files, to define a parent_with a default view class and common attributes for all views._View definitions that define their own parent or carry their own_class can still override this._<p>Strictly speaking, the rule that a default parent setting does_not apply to a bean definition that carries a class is there for_backwards compatibility reasons. It still matches the typical use case.;public void setDefaultParentBean(String defaultParentBean) {_		this.defaultParentBean = defaultParentBean__	};set,the,default,parent,bean,for,this,bean,factory,if,a,child,bean,definition,handled,by,this,factory,provides,neither,a,parent,nor,a,class,attribute,this,default,value,gets,used,p,can,be,used,e,g,for,view,definition,files,to,define,a,parent,with,a,default,view,class,and,common,attributes,for,all,views,view,definitions,that,define,their,own,parent,or,carry,their,own,class,can,still,override,this,p,strictly,speaking,the,rule,that,a,default,parent,setting,does,not,apply,to,a,bean,definition,that,carries,a,class,is,there,for,backwards,compatibility,reasons,it,still,matches,the,typical,use,case;public,void,set,default,parent,bean,string,default,parent,bean,this,default,parent,bean,default,parent,bean
PropertiesBeanDefinitionReader -> public void setDefaultParentBean(String defaultParentBean);1368482696;Set the default parent bean for this bean factory._If a child bean definition handled by this factory provides neither_a parent nor a class attribute, this default value gets used._<p>Can be used e.g. for view definition files, to define a parent_with a default view class and common attributes for all views._View definitions that define their own parent or carry their own_class can still override this._<p>Strictly speaking, the rule that a default parent setting does_not apply to a bean definition that carries a class is there for_backwards compatibility reasons. It still matches the typical use case.;public void setDefaultParentBean(String defaultParentBean) {_		this.defaultParentBean = defaultParentBean__	};set,the,default,parent,bean,for,this,bean,factory,if,a,child,bean,definition,handled,by,this,factory,provides,neither,a,parent,nor,a,class,attribute,this,default,value,gets,used,p,can,be,used,e,g,for,view,definition,files,to,define,a,parent,with,a,default,view,class,and,common,attributes,for,all,views,view,definitions,that,define,their,own,parent,or,carry,their,own,class,can,still,override,this,p,strictly,speaking,the,rule,that,a,default,parent,setting,does,not,apply,to,a,bean,definition,that,carries,a,class,is,there,for,backwards,compatibility,reasons,it,still,matches,the,typical,use,case;public,void,set,default,parent,bean,string,default,parent,bean,this,default,parent,bean,default,parent,bean
PropertiesBeanDefinitionReader -> public void setDefaultParentBean(String defaultParentBean);1385412762;Set the default parent bean for this bean factory._If a child bean definition handled by this factory provides neither_a parent nor a class attribute, this default value gets used._<p>Can be used e.g. for view definition files, to define a parent_with a default view class and common attributes for all views._View definitions that define their own parent or carry their own_class can still override this._<p>Strictly speaking, the rule that a default parent setting does_not apply to a bean definition that carries a class is there for_backwards compatibility reasons. It still matches the typical use case.;public void setDefaultParentBean(String defaultParentBean) {_		this.defaultParentBean = defaultParentBean__	};set,the,default,parent,bean,for,this,bean,factory,if,a,child,bean,definition,handled,by,this,factory,provides,neither,a,parent,nor,a,class,attribute,this,default,value,gets,used,p,can,be,used,e,g,for,view,definition,files,to,define,a,parent,with,a,default,view,class,and,common,attributes,for,all,views,view,definitions,that,define,their,own,parent,or,carry,their,own,class,can,still,override,this,p,strictly,speaking,the,rule,that,a,default,parent,setting,does,not,apply,to,a,bean,definition,that,carries,a,class,is,there,for,backwards,compatibility,reasons,it,still,matches,the,typical,use,case;public,void,set,default,parent,bean,string,default,parent,bean,this,default,parent,bean,default,parent,bean
PropertiesBeanDefinitionReader -> public void setDefaultParentBean(String defaultParentBean);1467730834;Set the default parent bean for this bean factory._If a child bean definition handled by this factory provides neither_a parent nor a class attribute, this default value gets used._<p>Can be used e.g. for view definition files, to define a parent_with a default view class and common attributes for all views._View definitions that define their own parent or carry their own_class can still override this._<p>Strictly speaking, the rule that a default parent setting does_not apply to a bean definition that carries a class is there for_backwards compatibility reasons. It still matches the typical use case.;public void setDefaultParentBean(String defaultParentBean) {_		this.defaultParentBean = defaultParentBean__	};set,the,default,parent,bean,for,this,bean,factory,if,a,child,bean,definition,handled,by,this,factory,provides,neither,a,parent,nor,a,class,attribute,this,default,value,gets,used,p,can,be,used,e,g,for,view,definition,files,to,define,a,parent,with,a,default,view,class,and,common,attributes,for,all,views,view,definitions,that,define,their,own,parent,or,carry,their,own,class,can,still,override,this,p,strictly,speaking,the,rule,that,a,default,parent,setting,does,not,apply,to,a,bean,definition,that,carries,a,class,is,there,for,backwards,compatibility,reasons,it,still,matches,the,typical,use,case;public,void,set,default,parent,bean,string,default,parent,bean,this,default,parent,bean,default,parent,bean
PropertiesBeanDefinitionReader -> public void setDefaultParentBean(String defaultParentBean);1495868221;Set the default parent bean for this bean factory._If a child bean definition handled by this factory provides neither_a parent nor a class attribute, this default value gets used._<p>Can be used e.g. for view definition files, to define a parent_with a default view class and common attributes for all views._View definitions that define their own parent or carry their own_class can still override this._<p>Strictly speaking, the rule that a default parent setting does_not apply to a bean definition that carries a class is there for_backwards compatibility reasons. It still matches the typical use case.;public void setDefaultParentBean(String defaultParentBean) {_		this.defaultParentBean = defaultParentBean__	};set,the,default,parent,bean,for,this,bean,factory,if,a,child,bean,definition,handled,by,this,factory,provides,neither,a,parent,nor,a,class,attribute,this,default,value,gets,used,p,can,be,used,e,g,for,view,definition,files,to,define,a,parent,with,a,default,view,class,and,common,attributes,for,all,views,view,definitions,that,define,their,own,parent,or,carry,their,own,class,can,still,override,this,p,strictly,speaking,the,rule,that,a,default,parent,setting,does,not,apply,to,a,bean,definition,that,carries,a,class,is,there,for,backwards,compatibility,reasons,it,still,matches,the,typical,use,case;public,void,set,default,parent,bean,string,default,parent,bean,this,default,parent,bean,default,parent,bean
PropertiesBeanDefinitionReader -> public void setDefaultParentBean(String defaultParentBean);1496837955;Set the default parent bean for this bean factory._If a child bean definition handled by this factory provides neither_a parent nor a class attribute, this default value gets used._<p>Can be used e.g. for view definition files, to define a parent_with a default view class and common attributes for all views._View definitions that define their own parent or carry their own_class can still override this._<p>Strictly speaking, the rule that a default parent setting does_not apply to a bean definition that carries a class is there for_backwards compatibility reasons. It still matches the typical use case.;public void setDefaultParentBean(String defaultParentBean) {_		this.defaultParentBean = defaultParentBean__	};set,the,default,parent,bean,for,this,bean,factory,if,a,child,bean,definition,handled,by,this,factory,provides,neither,a,parent,nor,a,class,attribute,this,default,value,gets,used,p,can,be,used,e,g,for,view,definition,files,to,define,a,parent,with,a,default,view,class,and,common,attributes,for,all,views,view,definitions,that,define,their,own,parent,or,carry,their,own,class,can,still,override,this,p,strictly,speaking,the,rule,that,a,default,parent,setting,does,not,apply,to,a,bean,definition,that,carries,a,class,is,there,for,backwards,compatibility,reasons,it,still,matches,the,typical,use,case;public,void,set,default,parent,bean,string,default,parent,bean,this,default,parent,bean,default,parent,bean
PropertiesBeanDefinitionReader -> private Object readValue(Map.Entry entry);1328020251;Reads the value of the entry. Correctly interprets bean references for_values that are prefixed with an asterisk.;private Object readValue(Map.Entry entry) {_		Object val = entry.getValue()__		if (val instanceof String) {_			String strVal = (String) val__			_			if (strVal.startsWith(REF_PREFIX)) {_				_				String targetName = strVal.substring(1)__				if (targetName.startsWith(REF_PREFIX)) {_					_					val = targetName__				}_				else {_					val = new RuntimeBeanReference(targetName)__				}_			}_		}_		return val__	};reads,the,value,of,the,entry,correctly,interprets,bean,references,for,values,that,are,prefixed,with,an,asterisk;private,object,read,value,map,entry,entry,object,val,entry,get,value,if,val,instanceof,string,string,str,val,string,val,if,str,val,starts,with,string,target,name,str,val,substring,1,if,target,name,starts,with,val,target,name,else,val,new,runtime,bean,reference,target,name,return,val
PropertiesBeanDefinitionReader -> private Object readValue(Map.Entry entry);1356735495;Reads the value of the entry. Correctly interprets bean references for_values that are prefixed with an asterisk.;private Object readValue(Map.Entry entry) {_		Object val = entry.getValue()__		if (val instanceof String) {_			String strVal = (String) val__			_			if (strVal.startsWith(REF_PREFIX)) {_				_				String targetName = strVal.substring(1)__				if (targetName.startsWith(REF_PREFIX)) {_					_					val = targetName__				}_				else {_					val = new RuntimeBeanReference(targetName)__				}_			}_		}_		return val__	};reads,the,value,of,the,entry,correctly,interprets,bean,references,for,values,that,are,prefixed,with,an,asterisk;private,object,read,value,map,entry,entry,object,val,entry,get,value,if,val,instanceof,string,string,str,val,string,val,if,str,val,starts,with,string,target,name,str,val,substring,1,if,target,name,starts,with,val,target,name,else,val,new,runtime,bean,reference,target,name,return,val
PropertiesBeanDefinitionReader -> private Object readValue(Map.Entry entry);1357119239;Reads the value of the entry. Correctly interprets bean references for_values that are prefixed with an asterisk.;private Object readValue(Map.Entry entry) {_		Object val = entry.getValue()__		if (val instanceof String) {_			String strVal = (String) val__			_			if (strVal.startsWith(REF_PREFIX)) {_				_				String targetName = strVal.substring(1)__				if (targetName.startsWith(REF_PREFIX)) {_					_					val = targetName__				}_				else {_					val = new RuntimeBeanReference(targetName)__				}_			}_		}_		return val__	};reads,the,value,of,the,entry,correctly,interprets,bean,references,for,values,that,are,prefixed,with,an,asterisk;private,object,read,value,map,entry,entry,object,val,entry,get,value,if,val,instanceof,string,string,str,val,string,val,if,str,val,starts,with,string,target,name,str,val,substring,1,if,target,name,starts,with,val,target,name,else,val,new,runtime,bean,reference,target,name,return,val
PropertiesBeanDefinitionReader -> private Object readValue(Map.Entry entry);1362408075;Reads the value of the entry. Correctly interprets bean references for_values that are prefixed with an asterisk.;private Object readValue(Map.Entry entry) {_		Object val = entry.getValue()__		if (val instanceof String) {_			String strVal = (String) val__			_			if (strVal.startsWith(REF_PREFIX)) {_				_				String targetName = strVal.substring(1)__				if (targetName.startsWith(REF_PREFIX)) {_					_					val = targetName__				}_				else {_					val = new RuntimeBeanReference(targetName)__				}_			}_		}_		return val__	};reads,the,value,of,the,entry,correctly,interprets,bean,references,for,values,that,are,prefixed,with,an,asterisk;private,object,read,value,map,entry,entry,object,val,entry,get,value,if,val,instanceof,string,string,str,val,string,val,if,str,val,starts,with,string,target,name,str,val,substring,1,if,target,name,starts,with,val,target,name,else,val,new,runtime,bean,reference,target,name,return,val
PropertiesBeanDefinitionReader -> private Object readValue(Map.Entry entry);1368482696;Reads the value of the entry. Correctly interprets bean references for_values that are prefixed with an asterisk.;private Object readValue(Map.Entry entry) {_		Object val = entry.getValue()__		if (val instanceof String) {_			String strVal = (String) val__			_			if (strVal.startsWith(REF_PREFIX)) {_				_				String targetName = strVal.substring(1)__				if (targetName.startsWith(REF_PREFIX)) {_					_					val = targetName__				}_				else {_					val = new RuntimeBeanReference(targetName)__				}_			}_		}_		return val__	};reads,the,value,of,the,entry,correctly,interprets,bean,references,for,values,that,are,prefixed,with,an,asterisk;private,object,read,value,map,entry,entry,object,val,entry,get,value,if,val,instanceof,string,string,str,val,string,val,if,str,val,starts,with,string,target,name,str,val,substring,1,if,target,name,starts,with,val,target,name,else,val,new,runtime,bean,reference,target,name,return,val
PropertiesBeanDefinitionReader -> public int registerBeanDefinitions(Map<?, ?> map, @Nullable String prefix, String resourceDescription) 			throws BeansException;1495868221;Register bean definitions contained in a Map._Ignore ineligible properties._@param map Map name -> property (String or Object). Property values_will be strings if coming from a Properties file etc. Property names_(keys) <b>must</b> be strings. Class keys must be Strings._@param prefix a filter within the keys in the map: e.g. 'beans.'_(can be empty or {@code null})_@param resourceDescription description of the resource that the_Map came from (for logging purposes)_@return the number of bean definitions found_@throws BeansException in case of loading or parsing errors_@see #registerBeanDefinitions(Map, String);public int registerBeanDefinitions(Map<?, ?> map, @Nullable String prefix, String resourceDescription)_			throws BeansException {__		if (prefix == null) {_			prefix = ""__		}_		int beanCount = 0___		for (Object key : map.keySet()) {_			if (!(key instanceof String)) {_				throw new IllegalArgumentException("Illegal key [" + key + "]: only Strings allowed")__			}_			String keyString = (String) key__			if (keyString.startsWith(prefix)) {_				_				String nameAndProperty = keyString.substring(prefix.length())__				_				int sepIdx = -1__				int propKeyIdx = nameAndProperty.indexOf(PropertyAccessor.PROPERTY_KEY_PREFIX)__				if (propKeyIdx != -1) {_					sepIdx = nameAndProperty.lastIndexOf(SEPARATOR, propKeyIdx)__				}_				else {_					sepIdx = nameAndProperty.lastIndexOf(SEPARATOR)__				}_				if (sepIdx != -1) {_					String beanName = nameAndProperty.substring(0, sepIdx)__					if (logger.isDebugEnabled()) {_						logger.debug("Found bean name '" + beanName + "'")__					}_					if (!getRegistry().containsBeanDefinition(beanName)) {_						_						registerBeanDefinition(beanName, map, prefix + beanName, resourceDescription)__						++beanCount__					}_				}_				else {_					_					_					if (logger.isDebugEnabled()) {_						logger.debug("Invalid bean name and property [" + nameAndProperty + "]")__					}_				}_			}_		}__		return beanCount__	};register,bean,definitions,contained,in,a,map,ignore,ineligible,properties,param,map,map,name,property,string,or,object,property,values,will,be,strings,if,coming,from,a,properties,file,etc,property,names,keys,b,must,b,be,strings,class,keys,must,be,strings,param,prefix,a,filter,within,the,keys,in,the,map,e,g,beans,can,be,empty,or,code,null,param,resource,description,description,of,the,resource,that,the,map,came,from,for,logging,purposes,return,the,number,of,bean,definitions,found,throws,beans,exception,in,case,of,loading,or,parsing,errors,see,register,bean,definitions,map,string;public,int,register,bean,definitions,map,map,nullable,string,prefix,string,resource,description,throws,beans,exception,if,prefix,null,prefix,int,bean,count,0,for,object,key,map,key,set,if,key,instanceof,string,throw,new,illegal,argument,exception,illegal,key,key,only,strings,allowed,string,key,string,string,key,if,key,string,starts,with,prefix,string,name,and,property,key,string,substring,prefix,length,int,sep,idx,1,int,prop,key,idx,name,and,property,index,of,property,accessor,if,prop,key,idx,1,sep,idx,name,and,property,last,index,of,separator,prop,key,idx,else,sep,idx,name,and,property,last,index,of,separator,if,sep,idx,1,string,bean,name,name,and,property,substring,0,sep,idx,if,logger,is,debug,enabled,logger,debug,found,bean,name,bean,name,if,get,registry,contains,bean,definition,bean,name,register,bean,definition,bean,name,map,prefix,bean,name,resource,description,bean,count,else,if,logger,is,debug,enabled,logger,debug,invalid,bean,name,and,property,name,and,property,return,bean,count
PropertiesBeanDefinitionReader -> public int registerBeanDefinitions(Map<?, ?> map, @Nullable String prefix, String resourceDescription) 			throws BeansException;1496837955;Register bean definitions contained in a Map._Ignore ineligible properties._@param map Map name -> property (String or Object). Property values_will be strings if coming from a Properties file etc. Property names_(keys) <b>must</b> be strings. Class keys must be Strings._@param prefix a filter within the keys in the map: e.g. 'beans.'_(can be empty or {@code null})_@param resourceDescription description of the resource that the_Map came from (for logging purposes)_@return the number of bean definitions found_@throws BeansException in case of loading or parsing errors_@see #registerBeanDefinitions(Map, String);public int registerBeanDefinitions(Map<?, ?> map, @Nullable String prefix, String resourceDescription)_			throws BeansException {__		if (prefix == null) {_			prefix = ""__		}_		int beanCount = 0___		for (Object key : map.keySet()) {_			if (!(key instanceof String)) {_				throw new IllegalArgumentException("Illegal key [" + key + "]: only Strings allowed")__			}_			String keyString = (String) key__			if (keyString.startsWith(prefix)) {_				_				String nameAndProperty = keyString.substring(prefix.length())__				_				int sepIdx = -1__				int propKeyIdx = nameAndProperty.indexOf(PropertyAccessor.PROPERTY_KEY_PREFIX)__				if (propKeyIdx != -1) {_					sepIdx = nameAndProperty.lastIndexOf(SEPARATOR, propKeyIdx)__				}_				else {_					sepIdx = nameAndProperty.lastIndexOf(SEPARATOR)__				}_				if (sepIdx != -1) {_					String beanName = nameAndProperty.substring(0, sepIdx)__					if (logger.isDebugEnabled()) {_						logger.debug("Found bean name '" + beanName + "'")__					}_					if (!getRegistry().containsBeanDefinition(beanName)) {_						_						registerBeanDefinition(beanName, map, prefix + beanName, resourceDescription)__						++beanCount__					}_				}_				else {_					_					_					if (logger.isDebugEnabled()) {_						logger.debug("Invalid bean name and property [" + nameAndProperty + "]")__					}_				}_			}_		}__		return beanCount__	};register,bean,definitions,contained,in,a,map,ignore,ineligible,properties,param,map,map,name,property,string,or,object,property,values,will,be,strings,if,coming,from,a,properties,file,etc,property,names,keys,b,must,b,be,strings,class,keys,must,be,strings,param,prefix,a,filter,within,the,keys,in,the,map,e,g,beans,can,be,empty,or,code,null,param,resource,description,description,of,the,resource,that,the,map,came,from,for,logging,purposes,return,the,number,of,bean,definitions,found,throws,beans,exception,in,case,of,loading,or,parsing,errors,see,register,bean,definitions,map,string;public,int,register,bean,definitions,map,map,nullable,string,prefix,string,resource,description,throws,beans,exception,if,prefix,null,prefix,int,bean,count,0,for,object,key,map,key,set,if,key,instanceof,string,throw,new,illegal,argument,exception,illegal,key,key,only,strings,allowed,string,key,string,string,key,if,key,string,starts,with,prefix,string,name,and,property,key,string,substring,prefix,length,int,sep,idx,1,int,prop,key,idx,name,and,property,index,of,property,accessor,if,prop,key,idx,1,sep,idx,name,and,property,last,index,of,separator,prop,key,idx,else,sep,idx,name,and,property,last,index,of,separator,if,sep,idx,1,string,bean,name,name,and,property,substring,0,sep,idx,if,logger,is,debug,enabled,logger,debug,found,bean,name,bean,name,if,get,registry,contains,bean,definition,bean,name,register,bean,definition,bean,name,map,prefix,bean,name,resource,description,bean,count,else,if,logger,is,debug,enabled,logger,debug,invalid,bean,name,and,property,name,and,property,return,bean,count
PropertiesBeanDefinitionReader -> public int registerBeanDefinitions(Map<?, ?> map, @Nullable String prefix, String resourceDescription) 			throws BeansException;1498780456;Register bean definitions contained in a Map._Ignore ineligible properties._@param map Map name -> property (String or Object). Property values_will be strings if coming from a Properties file etc. Property names_(keys) <b>must</b> be strings. Class keys must be Strings._@param prefix a filter within the keys in the map: e.g. 'beans.'_(can be empty or {@code null})_@param resourceDescription description of the resource that the_Map came from (for logging purposes)_@return the number of bean definitions found_@throws BeansException in case of loading or parsing errors_@see #registerBeanDefinitions(Map, String);public int registerBeanDefinitions(Map<?, ?> map, @Nullable String prefix, String resourceDescription)_			throws BeansException {__		if (prefix == null) {_			prefix = ""__		}_		int beanCount = 0___		for (Object key : map.keySet()) {_			if (!(key instanceof String)) {_				throw new IllegalArgumentException("Illegal key [" + key + "]: only Strings allowed")__			}_			String keyString = (String) key__			if (keyString.startsWith(prefix)) {_				_				String nameAndProperty = keyString.substring(prefix.length())__				_				int sepIdx = -1__				int propKeyIdx = nameAndProperty.indexOf(PropertyAccessor.PROPERTY_KEY_PREFIX)__				if (propKeyIdx != -1) {_					sepIdx = nameAndProperty.lastIndexOf(SEPARATOR, propKeyIdx)__				}_				else {_					sepIdx = nameAndProperty.lastIndexOf(SEPARATOR)__				}_				if (sepIdx != -1) {_					String beanName = nameAndProperty.substring(0, sepIdx)__					if (logger.isDebugEnabled()) {_						logger.debug("Found bean name '" + beanName + "'")__					}_					if (!getRegistry().containsBeanDefinition(beanName)) {_						_						registerBeanDefinition(beanName, map, prefix + beanName, resourceDescription)__						++beanCount__					}_				}_				else {_					_					_					if (logger.isDebugEnabled()) {_						logger.debug("Invalid bean name and property [" + nameAndProperty + "]")__					}_				}_			}_		}__		return beanCount__	};register,bean,definitions,contained,in,a,map,ignore,ineligible,properties,param,map,map,name,property,string,or,object,property,values,will,be,strings,if,coming,from,a,properties,file,etc,property,names,keys,b,must,b,be,strings,class,keys,must,be,strings,param,prefix,a,filter,within,the,keys,in,the,map,e,g,beans,can,be,empty,or,code,null,param,resource,description,description,of,the,resource,that,the,map,came,from,for,logging,purposes,return,the,number,of,bean,definitions,found,throws,beans,exception,in,case,of,loading,or,parsing,errors,see,register,bean,definitions,map,string;public,int,register,bean,definitions,map,map,nullable,string,prefix,string,resource,description,throws,beans,exception,if,prefix,null,prefix,int,bean,count,0,for,object,key,map,key,set,if,key,instanceof,string,throw,new,illegal,argument,exception,illegal,key,key,only,strings,allowed,string,key,string,string,key,if,key,string,starts,with,prefix,string,name,and,property,key,string,substring,prefix,length,int,sep,idx,1,int,prop,key,idx,name,and,property,index,of,property,accessor,if,prop,key,idx,1,sep,idx,name,and,property,last,index,of,separator,prop,key,idx,else,sep,idx,name,and,property,last,index,of,separator,if,sep,idx,1,string,bean,name,name,and,property,substring,0,sep,idx,if,logger,is,debug,enabled,logger,debug,found,bean,name,bean,name,if,get,registry,contains,bean,definition,bean,name,register,bean,definition,bean,name,map,prefix,bean,name,resource,description,bean,count,else,if,logger,is,debug,enabled,logger,debug,invalid,bean,name,and,property,name,and,property,return,bean,count
PropertiesBeanDefinitionReader -> public int registerBeanDefinitions(Map<?, ?> map, @Nullable String prefix, String resourceDescription) 			throws BeansException;1518167602;Register bean definitions contained in a Map._Ignore ineligible properties._@param map Map name -> property (String or Object). Property values_will be strings if coming from a Properties file etc. Property names_(keys) <b>must</b> be strings. Class keys must be Strings._@param prefix a filter within the keys in the map: e.g. 'beans.'_(can be empty or {@code null})_@param resourceDescription description of the resource that the_Map came from (for logging purposes)_@return the number of bean definitions found_@throws BeansException in case of loading or parsing errors_@see #registerBeanDefinitions(Map, String);public int registerBeanDefinitions(Map<?, ?> map, @Nullable String prefix, String resourceDescription)_			throws BeansException {__		if (prefix == null) {_			prefix = ""__		}_		int beanCount = 0___		for (Object key : map.keySet()) {_			if (!(key instanceof String)) {_				throw new IllegalArgumentException("Illegal key [" + key + "]: only Strings allowed")__			}_			String keyString = (String) key__			if (keyString.startsWith(prefix)) {_				_				String nameAndProperty = keyString.substring(prefix.length())__				_				int sepIdx = -1__				int propKeyIdx = nameAndProperty.indexOf(PropertyAccessor.PROPERTY_KEY_PREFIX)__				if (propKeyIdx != -1) {_					sepIdx = nameAndProperty.lastIndexOf(SEPARATOR, propKeyIdx)__				}_				else {_					sepIdx = nameAndProperty.lastIndexOf(SEPARATOR)__				}_				if (sepIdx != -1) {_					String beanName = nameAndProperty.substring(0, sepIdx)__					if (logger.isDebugEnabled()) {_						logger.debug("Found bean name '" + beanName + "'")__					}_					if (!getRegistry().containsBeanDefinition(beanName)) {_						_						registerBeanDefinition(beanName, map, prefix + beanName, resourceDescription)__						++beanCount__					}_				}_				else {_					_					_					if (logger.isDebugEnabled()) {_						logger.debug("Invalid bean name and property [" + nameAndProperty + "]")__					}_				}_			}_		}__		return beanCount__	};register,bean,definitions,contained,in,a,map,ignore,ineligible,properties,param,map,map,name,property,string,or,object,property,values,will,be,strings,if,coming,from,a,properties,file,etc,property,names,keys,b,must,b,be,strings,class,keys,must,be,strings,param,prefix,a,filter,within,the,keys,in,the,map,e,g,beans,can,be,empty,or,code,null,param,resource,description,description,of,the,resource,that,the,map,came,from,for,logging,purposes,return,the,number,of,bean,definitions,found,throws,beans,exception,in,case,of,loading,or,parsing,errors,see,register,bean,definitions,map,string;public,int,register,bean,definitions,map,map,nullable,string,prefix,string,resource,description,throws,beans,exception,if,prefix,null,prefix,int,bean,count,0,for,object,key,map,key,set,if,key,instanceof,string,throw,new,illegal,argument,exception,illegal,key,key,only,strings,allowed,string,key,string,string,key,if,key,string,starts,with,prefix,string,name,and,property,key,string,substring,prefix,length,int,sep,idx,1,int,prop,key,idx,name,and,property,index,of,property,accessor,if,prop,key,idx,1,sep,idx,name,and,property,last,index,of,separator,prop,key,idx,else,sep,idx,name,and,property,last,index,of,separator,if,sep,idx,1,string,bean,name,name,and,property,substring,0,sep,idx,if,logger,is,debug,enabled,logger,debug,found,bean,name,bean,name,if,get,registry,contains,bean,definition,bean,name,register,bean,definition,bean,name,map,prefix,bean,name,resource,description,bean,count,else,if,logger,is,debug,enabled,logger,debug,invalid,bean,name,and,property,name,and,property,return,bean,count
PropertiesBeanDefinitionReader -> public int registerBeanDefinitions(Map<?, ?> map, @Nullable String prefix, String resourceDescription) 			throws BeansException;1518167818;Register bean definitions contained in a Map._Ignore ineligible properties._@param map Map name -> property (String or Object). Property values_will be strings if coming from a Properties file etc. Property names_(keys) <b>must</b> be strings. Class keys must be Strings._@param prefix a filter within the keys in the map: e.g. 'beans.'_(can be empty or {@code null})_@param resourceDescription description of the resource that the_Map came from (for logging purposes)_@return the number of bean definitions found_@throws BeansException in case of loading or parsing errors_@see #registerBeanDefinitions(Map, String);public int registerBeanDefinitions(Map<?, ?> map, @Nullable String prefix, String resourceDescription)_			throws BeansException {__		if (prefix == null) {_			prefix = ""__		}_		int beanCount = 0___		for (Object key : map.keySet()) {_			if (!(key instanceof String)) {_				throw new IllegalArgumentException("Illegal key [" + key + "]: only Strings allowed")__			}_			String keyString = (String) key__			if (keyString.startsWith(prefix)) {_				_				String nameAndProperty = keyString.substring(prefix.length())__				_				int sepIdx = -1__				int propKeyIdx = nameAndProperty.indexOf(PropertyAccessor.PROPERTY_KEY_PREFIX)__				if (propKeyIdx != -1) {_					sepIdx = nameAndProperty.lastIndexOf(SEPARATOR, propKeyIdx)__				}_				else {_					sepIdx = nameAndProperty.lastIndexOf(SEPARATOR)__				}_				if (sepIdx != -1) {_					String beanName = nameAndProperty.substring(0, sepIdx)__					if (logger.isDebugEnabled()) {_						logger.debug("Found bean name '" + beanName + "'")__					}_					if (!getRegistry().containsBeanDefinition(beanName)) {_						_						registerBeanDefinition(beanName, map, prefix + beanName, resourceDescription)__						++beanCount__					}_				}_				else {_					_					_					if (logger.isDebugEnabled()) {_						logger.debug("Invalid bean name and property [" + nameAndProperty + "]")__					}_				}_			}_		}__		return beanCount__	};register,bean,definitions,contained,in,a,map,ignore,ineligible,properties,param,map,map,name,property,string,or,object,property,values,will,be,strings,if,coming,from,a,properties,file,etc,property,names,keys,b,must,b,be,strings,class,keys,must,be,strings,param,prefix,a,filter,within,the,keys,in,the,map,e,g,beans,can,be,empty,or,code,null,param,resource,description,description,of,the,resource,that,the,map,came,from,for,logging,purposes,return,the,number,of,bean,definitions,found,throws,beans,exception,in,case,of,loading,or,parsing,errors,see,register,bean,definitions,map,string;public,int,register,bean,definitions,map,map,nullable,string,prefix,string,resource,description,throws,beans,exception,if,prefix,null,prefix,int,bean,count,0,for,object,key,map,key,set,if,key,instanceof,string,throw,new,illegal,argument,exception,illegal,key,key,only,strings,allowed,string,key,string,string,key,if,key,string,starts,with,prefix,string,name,and,property,key,string,substring,prefix,length,int,sep,idx,1,int,prop,key,idx,name,and,property,index,of,property,accessor,if,prop,key,idx,1,sep,idx,name,and,property,last,index,of,separator,prop,key,idx,else,sep,idx,name,and,property,last,index,of,separator,if,sep,idx,1,string,bean,name,name,and,property,substring,0,sep,idx,if,logger,is,debug,enabled,logger,debug,found,bean,name,bean,name,if,get,registry,contains,bean,definition,bean,name,register,bean,definition,bean,name,map,prefix,bean,name,resource,description,bean,count,else,if,logger,is,debug,enabled,logger,debug,invalid,bean,name,and,property,name,and,property,return,bean,count
PropertiesBeanDefinitionReader -> public int registerBeanDefinitions(Map<?, ?> map, @Nullable String prefix, String resourceDescription) 			throws BeansException;1530174524;Register bean definitions contained in a Map._Ignore ineligible properties._@param map a map of {@code name} to {@code property} (String or Object). Property_values will be strings if coming from a Properties file etc. Property names_(keys) <b>must</b> be Strings. Class keys must be Strings._@param prefix a filter within the keys in the map: e.g. 'beans.'_(can be empty or {@code null})_@param resourceDescription description of the resource that the_Map came from (for logging purposes)_@return the number of bean definitions found_@throws BeansException in case of loading or parsing errors_@see #registerBeanDefinitions(Map, String);public int registerBeanDefinitions(Map<?, ?> map, @Nullable String prefix, String resourceDescription)_			throws BeansException {__		if (prefix == null) {_			prefix = ""__		}_		int beanCount = 0___		for (Object key : map.keySet()) {_			if (!(key instanceof String)) {_				throw new IllegalArgumentException("Illegal key [" + key + "]: only Strings allowed")__			}_			String keyString = (String) key__			if (keyString.startsWith(prefix)) {_				_				String nameAndProperty = keyString.substring(prefix.length())__				_				int sepIdx = -1__				int propKeyIdx = nameAndProperty.indexOf(PropertyAccessor.PROPERTY_KEY_PREFIX)__				if (propKeyIdx != -1) {_					sepIdx = nameAndProperty.lastIndexOf(SEPARATOR, propKeyIdx)__				}_				else {_					sepIdx = nameAndProperty.lastIndexOf(SEPARATOR)__				}_				if (sepIdx != -1) {_					String beanName = nameAndProperty.substring(0, sepIdx)__					if (logger.isDebugEnabled()) {_						logger.debug("Found bean name '" + beanName + "'")__					}_					if (!getRegistry().containsBeanDefinition(beanName)) {_						_						registerBeanDefinition(beanName, map, prefix + beanName, resourceDescription)__						++beanCount__					}_				}_				else {_					_					_					if (logger.isDebugEnabled()) {_						logger.debug("Invalid bean name and property [" + nameAndProperty + "]")__					}_				}_			}_		}__		return beanCount__	};register,bean,definitions,contained,in,a,map,ignore,ineligible,properties,param,map,a,map,of,code,name,to,code,property,string,or,object,property,values,will,be,strings,if,coming,from,a,properties,file,etc,property,names,keys,b,must,b,be,strings,class,keys,must,be,strings,param,prefix,a,filter,within,the,keys,in,the,map,e,g,beans,can,be,empty,or,code,null,param,resource,description,description,of,the,resource,that,the,map,came,from,for,logging,purposes,return,the,number,of,bean,definitions,found,throws,beans,exception,in,case,of,loading,or,parsing,errors,see,register,bean,definitions,map,string;public,int,register,bean,definitions,map,map,nullable,string,prefix,string,resource,description,throws,beans,exception,if,prefix,null,prefix,int,bean,count,0,for,object,key,map,key,set,if,key,instanceof,string,throw,new,illegal,argument,exception,illegal,key,key,only,strings,allowed,string,key,string,string,key,if,key,string,starts,with,prefix,string,name,and,property,key,string,substring,prefix,length,int,sep,idx,1,int,prop,key,idx,name,and,property,index,of,property,accessor,if,prop,key,idx,1,sep,idx,name,and,property,last,index,of,separator,prop,key,idx,else,sep,idx,name,and,property,last,index,of,separator,if,sep,idx,1,string,bean,name,name,and,property,substring,0,sep,idx,if,logger,is,debug,enabled,logger,debug,found,bean,name,bean,name,if,get,registry,contains,bean,definition,bean,name,register,bean,definition,bean,name,map,prefix,bean,name,resource,description,bean,count,else,if,logger,is,debug,enabled,logger,debug,invalid,bean,name,and,property,name,and,property,return,bean,count
PropertiesBeanDefinitionReader -> public int registerBeanDefinitions(Map<?, ?> map, @Nullable String prefix, String resourceDescription) 			throws BeansException;1532706365;Register bean definitions contained in a Map._Ignore ineligible properties._@param map a map of {@code name} to {@code property} (String or Object). Property_values will be strings if coming from a Properties file etc. Property names_(keys) <b>must</b> be Strings. Class keys must be Strings._@param prefix a filter within the keys in the map: e.g. 'beans.'_(can be empty or {@code null})_@param resourceDescription description of the resource that the_Map came from (for logging purposes)_@return the number of bean definitions found_@throws BeansException in case of loading or parsing errors_@see #registerBeanDefinitions(Map, String);public int registerBeanDefinitions(Map<?, ?> map, @Nullable String prefix, String resourceDescription)_			throws BeansException {__		if (prefix == null) {_			prefix = ""__		}_		int beanCount = 0___		for (Object key : map.keySet()) {_			if (!(key instanceof String)) {_				throw new IllegalArgumentException("Illegal key [" + key + "]: only Strings allowed")__			}_			String keyString = (String) key__			if (keyString.startsWith(prefix)) {_				_				String nameAndProperty = keyString.substring(prefix.length())__				_				int sepIdx = -1__				int propKeyIdx = nameAndProperty.indexOf(PropertyAccessor.PROPERTY_KEY_PREFIX)__				if (propKeyIdx != -1) {_					sepIdx = nameAndProperty.lastIndexOf(SEPARATOR, propKeyIdx)__				}_				else {_					sepIdx = nameAndProperty.lastIndexOf(SEPARATOR)__				}_				if (sepIdx != -1) {_					String beanName = nameAndProperty.substring(0, sepIdx)__					if (logger.isTraceEnabled()) {_						logger.trace("Found bean name '" + beanName + "'")__					}_					if (!getRegistry().containsBeanDefinition(beanName)) {_						_						registerBeanDefinition(beanName, map, prefix + beanName, resourceDescription)__						++beanCount__					}_				}_				else {_					_					_					if (logger.isDebugEnabled()) {_						logger.debug("Invalid bean name and property [" + nameAndProperty + "]")__					}_				}_			}_		}__		return beanCount__	};register,bean,definitions,contained,in,a,map,ignore,ineligible,properties,param,map,a,map,of,code,name,to,code,property,string,or,object,property,values,will,be,strings,if,coming,from,a,properties,file,etc,property,names,keys,b,must,b,be,strings,class,keys,must,be,strings,param,prefix,a,filter,within,the,keys,in,the,map,e,g,beans,can,be,empty,or,code,null,param,resource,description,description,of,the,resource,that,the,map,came,from,for,logging,purposes,return,the,number,of,bean,definitions,found,throws,beans,exception,in,case,of,loading,or,parsing,errors,see,register,bean,definitions,map,string;public,int,register,bean,definitions,map,map,nullable,string,prefix,string,resource,description,throws,beans,exception,if,prefix,null,prefix,int,bean,count,0,for,object,key,map,key,set,if,key,instanceof,string,throw,new,illegal,argument,exception,illegal,key,key,only,strings,allowed,string,key,string,string,key,if,key,string,starts,with,prefix,string,name,and,property,key,string,substring,prefix,length,int,sep,idx,1,int,prop,key,idx,name,and,property,index,of,property,accessor,if,prop,key,idx,1,sep,idx,name,and,property,last,index,of,separator,prop,key,idx,else,sep,idx,name,and,property,last,index,of,separator,if,sep,idx,1,string,bean,name,name,and,property,substring,0,sep,idx,if,logger,is,trace,enabled,logger,trace,found,bean,name,bean,name,if,get,registry,contains,bean,definition,bean,name,register,bean,definition,bean,name,map,prefix,bean,name,resource,description,bean,count,else,if,logger,is,debug,enabled,logger,debug,invalid,bean,name,and,property,name,and,property,return,bean,count
PropertiesBeanDefinitionReader -> public int registerBeanDefinitions(Map<?, ?> map, @Nullable String prefix, String resourceDescription) 			throws BeansException;1538724083;Register bean definitions contained in a Map._Ignore ineligible properties._@param map a map of {@code name} to {@code property} (String or Object). Property_values will be strings if coming from a Properties file etc. Property names_(keys) <b>must</b> be Strings. Class keys must be Strings._@param prefix a filter within the keys in the map: e.g. 'beans.'_(can be empty or {@code null})_@param resourceDescription description of the resource that the_Map came from (for logging purposes)_@return the number of bean definitions found_@throws BeansException in case of loading or parsing errors_@see #registerBeanDefinitions(Map, String);public int registerBeanDefinitions(Map<?, ?> map, @Nullable String prefix, String resourceDescription)_			throws BeansException {__		if (prefix == null) {_			prefix = ""__		}_		int beanCount = 0___		for (Object key : map.keySet()) {_			if (!(key instanceof String)) {_				throw new IllegalArgumentException("Illegal key [" + key + "]: only Strings allowed")__			}_			String keyString = (String) key__			if (keyString.startsWith(prefix)) {_				_				String nameAndProperty = keyString.substring(prefix.length())__				_				int sepIdx = -1__				int propKeyIdx = nameAndProperty.indexOf(PropertyAccessor.PROPERTY_KEY_PREFIX)__				if (propKeyIdx != -1) {_					sepIdx = nameAndProperty.lastIndexOf(SEPARATOR, propKeyIdx)__				}_				else {_					sepIdx = nameAndProperty.lastIndexOf(SEPARATOR)__				}_				if (sepIdx != -1) {_					String beanName = nameAndProperty.substring(0, sepIdx)__					if (logger.isTraceEnabled()) {_						logger.trace("Found bean name '" + beanName + "'")__					}_					if (!getRegistry().containsBeanDefinition(beanName)) {_						_						registerBeanDefinition(beanName, map, prefix + beanName, resourceDescription)__						++beanCount__					}_				}_				else {_					_					_					if (logger.isDebugEnabled()) {_						logger.debug("Invalid bean name and property [" + nameAndProperty + "]")__					}_				}_			}_		}__		return beanCount__	};register,bean,definitions,contained,in,a,map,ignore,ineligible,properties,param,map,a,map,of,code,name,to,code,property,string,or,object,property,values,will,be,strings,if,coming,from,a,properties,file,etc,property,names,keys,b,must,b,be,strings,class,keys,must,be,strings,param,prefix,a,filter,within,the,keys,in,the,map,e,g,beans,can,be,empty,or,code,null,param,resource,description,description,of,the,resource,that,the,map,came,from,for,logging,purposes,return,the,number,of,bean,definitions,found,throws,beans,exception,in,case,of,loading,or,parsing,errors,see,register,bean,definitions,map,string;public,int,register,bean,definitions,map,map,nullable,string,prefix,string,resource,description,throws,beans,exception,if,prefix,null,prefix,int,bean,count,0,for,object,key,map,key,set,if,key,instanceof,string,throw,new,illegal,argument,exception,illegal,key,key,only,strings,allowed,string,key,string,string,key,if,key,string,starts,with,prefix,string,name,and,property,key,string,substring,prefix,length,int,sep,idx,1,int,prop,key,idx,name,and,property,index,of,property,accessor,if,prop,key,idx,1,sep,idx,name,and,property,last,index,of,separator,prop,key,idx,else,sep,idx,name,and,property,last,index,of,separator,if,sep,idx,1,string,bean,name,name,and,property,substring,0,sep,idx,if,logger,is,trace,enabled,logger,trace,found,bean,name,bean,name,if,get,registry,contains,bean,definition,bean,name,register,bean,definition,bean,name,map,prefix,bean,name,resource,description,bean,count,else,if,logger,is,debug,enabled,logger,debug,invalid,bean,name,and,property,name,and,property,return,bean,count
PropertiesBeanDefinitionReader -> protected void registerBeanDefinition(String beanName, Map<?, ?> map, String prefix, String resourceDescription) 			throws BeansException;1328020251;Get all property values, given a prefix (which will be stripped)_and add the bean they define to the factory with the given name_@param beanName name of the bean to define_@param map Map containing string pairs_@param prefix prefix of each entry, which will be stripped_@param resourceDescription description of the resource that the_Map came from (for logging purposes)_@throws BeansException if the bean definition could not be parsed or registered;protected void registerBeanDefinition(String beanName, Map<?, ?> map, String prefix, String resourceDescription)_			throws BeansException {__		String className = null__		String parent = null__		String scope = GenericBeanDefinition.SCOPE_SINGLETON__		boolean isAbstract = false__		boolean lazyInit = false___		ConstructorArgumentValues cas = new ConstructorArgumentValues()__		MutablePropertyValues pvs = new MutablePropertyValues()___		for (Map.Entry entry : map.entrySet()) {_			String key = StringUtils.trimWhitespace((String) entry.getKey())__			if (key.startsWith(prefix + SEPARATOR)) {_				String property = key.substring(prefix.length() + SEPARATOR.length())__				if (CLASS_KEY.equals(property)) {_					className = StringUtils.trimWhitespace((String) entry.getValue())__				}_				else if (PARENT_KEY.equals(property)) {_					parent = StringUtils.trimWhitespace((String) entry.getValue())__				}_				else if (ABSTRACT_KEY.equals(property)) {_					String val = StringUtils.trimWhitespace((String) entry.getValue())__					isAbstract = TRUE_VALUE.equals(val)__				}_				else if (SCOPE_KEY.equals(property)) {_					_					scope = StringUtils.trimWhitespace((String) entry.getValue())__				}_				else if (SINGLETON_KEY.equals(property)) {_					_					String val = StringUtils.trimWhitespace((String) entry.getValue())__					scope = ((val == null || TRUE_VALUE.equals(val) ? GenericBeanDefinition.SCOPE_SINGLETON :_							GenericBeanDefinition.SCOPE_PROTOTYPE))__				}_				else if (LAZY_INIT_KEY.equals(property)) {_					String val = StringUtils.trimWhitespace((String) entry.getValue())__					lazyInit = TRUE_VALUE.equals(val)__				}_				else if (property.startsWith(CONSTRUCTOR_ARG_PREFIX)) {_					if (property.endsWith(REF_SUFFIX)) {_						int index = Integer.parseInt(property.substring(1, property.length() - REF_SUFFIX.length()))__						cas.addIndexedArgumentValue(index, new RuntimeBeanReference(entry.getValue().toString()))__					}_					else {_						int index = Integer.parseInt(property.substring(1))__						cas.addIndexedArgumentValue(index, readValue(entry))__					}_				}_				else if (property.endsWith(REF_SUFFIX)) {_					_					_					property = property.substring(0, property.length() - REF_SUFFIX.length())__					String ref = StringUtils.trimWhitespace((String) entry.getValue())___					_					_					Object val = new RuntimeBeanReference(ref)__					pvs.add(property, val)__				}_				else {_					_					pvs.add(property, readValue(entry))__				}_			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug("Registering bean definition for bean name '" + beanName + "' with " + pvs)__		}__		_		_		_		if (parent == null && className == null && !beanName.equals(this.defaultParentBean)) {_			parent = this.defaultParentBean__		}__		try {_			AbstractBeanDefinition bd = BeanDefinitionReaderUtils.createBeanDefinition(_					parent, className, getBeanClassLoader())__			bd.setScope(scope)__			bd.setAbstract(isAbstract)__			bd.setLazyInit(lazyInit)__			bd.setConstructorArgumentValues(cas)__			bd.setPropertyValues(pvs)__			getRegistry().registerBeanDefinition(beanName, bd)__		}_		catch (ClassNotFoundException ex) {_			throw new CannotLoadBeanClassException(resourceDescription, beanName, className, ex)__		}_		catch (LinkageError err) {_			throw new CannotLoadBeanClassException(resourceDescription, beanName, className, err)__		}_	};get,all,property,values,given,a,prefix,which,will,be,stripped,and,add,the,bean,they,define,to,the,factory,with,the,given,name,param,bean,name,name,of,the,bean,to,define,param,map,map,containing,string,pairs,param,prefix,prefix,of,each,entry,which,will,be,stripped,param,resource,description,description,of,the,resource,that,the,map,came,from,for,logging,purposes,throws,beans,exception,if,the,bean,definition,could,not,be,parsed,or,registered;protected,void,register,bean,definition,string,bean,name,map,map,string,prefix,string,resource,description,throws,beans,exception,string,class,name,null,string,parent,null,string,scope,generic,bean,definition,boolean,is,abstract,false,boolean,lazy,init,false,constructor,argument,values,cas,new,constructor,argument,values,mutable,property,values,pvs,new,mutable,property,values,for,map,entry,entry,map,entry,set,string,key,string,utils,trim,whitespace,string,entry,get,key,if,key,starts,with,prefix,separator,string,property,key,substring,prefix,length,separator,length,if,equals,property,class,name,string,utils,trim,whitespace,string,entry,get,value,else,if,equals,property,parent,string,utils,trim,whitespace,string,entry,get,value,else,if,equals,property,string,val,string,utils,trim,whitespace,string,entry,get,value,is,abstract,equals,val,else,if,equals,property,scope,string,utils,trim,whitespace,string,entry,get,value,else,if,equals,property,string,val,string,utils,trim,whitespace,string,entry,get,value,scope,val,null,equals,val,generic,bean,definition,generic,bean,definition,else,if,equals,property,string,val,string,utils,trim,whitespace,string,entry,get,value,lazy,init,equals,val,else,if,property,starts,with,if,property,ends,with,int,index,integer,parse,int,property,substring,1,property,length,length,cas,add,indexed,argument,value,index,new,runtime,bean,reference,entry,get,value,to,string,else,int,index,integer,parse,int,property,substring,1,cas,add,indexed,argument,value,index,read,value,entry,else,if,property,ends,with,property,property,substring,0,property,length,length,string,ref,string,utils,trim,whitespace,string,entry,get,value,object,val,new,runtime,bean,reference,ref,pvs,add,property,val,else,pvs,add,property,read,value,entry,if,logger,is,debug,enabled,logger,debug,registering,bean,definition,for,bean,name,bean,name,with,pvs,if,parent,null,class,name,null,bean,name,equals,this,default,parent,bean,parent,this,default,parent,bean,try,abstract,bean,definition,bd,bean,definition,reader,utils,create,bean,definition,parent,class,name,get,bean,class,loader,bd,set,scope,scope,bd,set,abstract,is,abstract,bd,set,lazy,init,lazy,init,bd,set,constructor,argument,values,cas,bd,set,property,values,pvs,get,registry,register,bean,definition,bean,name,bd,catch,class,not,found,exception,ex,throw,new,cannot,load,bean,class,exception,resource,description,bean,name,class,name,ex,catch,linkage,error,err,throw,new,cannot,load,bean,class,exception,resource,description,bean,name,class,name,err
PropertiesBeanDefinitionReader -> protected void registerBeanDefinition(String beanName, Map<?, ?> map, String prefix, String resourceDescription) 			throws BeansException;1356735495;Get all property values, given a prefix (which will be stripped)_and add the bean they define to the factory with the given name_@param beanName name of the bean to define_@param map Map containing string pairs_@param prefix prefix of each entry, which will be stripped_@param resourceDescription description of the resource that the_Map came from (for logging purposes)_@throws BeansException if the bean definition could not be parsed or registered;protected void registerBeanDefinition(String beanName, Map<?, ?> map, String prefix, String resourceDescription)_			throws BeansException {__		String className = null__		String parent = null__		String scope = GenericBeanDefinition.SCOPE_SINGLETON__		boolean isAbstract = false__		boolean lazyInit = false___		ConstructorArgumentValues cas = new ConstructorArgumentValues()__		MutablePropertyValues pvs = new MutablePropertyValues()___		for (Map.Entry entry : map.entrySet()) {_			String key = StringUtils.trimWhitespace((String) entry.getKey())__			if (key.startsWith(prefix + SEPARATOR)) {_				String property = key.substring(prefix.length() + SEPARATOR.length())__				if (CLASS_KEY.equals(property)) {_					className = StringUtils.trimWhitespace((String) entry.getValue())__				}_				else if (PARENT_KEY.equals(property)) {_					parent = StringUtils.trimWhitespace((String) entry.getValue())__				}_				else if (ABSTRACT_KEY.equals(property)) {_					String val = StringUtils.trimWhitespace((String) entry.getValue())__					isAbstract = TRUE_VALUE.equals(val)__				}_				else if (SCOPE_KEY.equals(property)) {_					_					scope = StringUtils.trimWhitespace((String) entry.getValue())__				}_				else if (SINGLETON_KEY.equals(property)) {_					_					String val = StringUtils.trimWhitespace((String) entry.getValue())__					scope = ((val == null || TRUE_VALUE.equals(val) ? GenericBeanDefinition.SCOPE_SINGLETON :_							GenericBeanDefinition.SCOPE_PROTOTYPE))__				}_				else if (LAZY_INIT_KEY.equals(property)) {_					String val = StringUtils.trimWhitespace((String) entry.getValue())__					lazyInit = TRUE_VALUE.equals(val)__				}_				else if (property.startsWith(CONSTRUCTOR_ARG_PREFIX)) {_					if (property.endsWith(REF_SUFFIX)) {_						int index = Integer.parseInt(property.substring(1, property.length() - REF_SUFFIX.length()))__						cas.addIndexedArgumentValue(index, new RuntimeBeanReference(entry.getValue().toString()))__					}_					else {_						int index = Integer.parseInt(property.substring(1))__						cas.addIndexedArgumentValue(index, readValue(entry))__					}_				}_				else if (property.endsWith(REF_SUFFIX)) {_					_					_					property = property.substring(0, property.length() - REF_SUFFIX.length())__					String ref = StringUtils.trimWhitespace((String) entry.getValue())___					_					_					Object val = new RuntimeBeanReference(ref)__					pvs.add(property, val)__				}_				else {_					_					pvs.add(property, readValue(entry))__				}_			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug("Registering bean definition for bean name '" + beanName + "' with " + pvs)__		}__		_		_		_		if (parent == null && className == null && !beanName.equals(this.defaultParentBean)) {_			parent = this.defaultParentBean__		}__		try {_			AbstractBeanDefinition bd = BeanDefinitionReaderUtils.createBeanDefinition(_					parent, className, getBeanClassLoader())__			bd.setScope(scope)__			bd.setAbstract(isAbstract)__			bd.setLazyInit(lazyInit)__			bd.setConstructorArgumentValues(cas)__			bd.setPropertyValues(pvs)__			getRegistry().registerBeanDefinition(beanName, bd)__		}_		catch (ClassNotFoundException ex) {_			throw new CannotLoadBeanClassException(resourceDescription, beanName, className, ex)__		}_		catch (LinkageError err) {_			throw new CannotLoadBeanClassException(resourceDescription, beanName, className, err)__		}_	};get,all,property,values,given,a,prefix,which,will,be,stripped,and,add,the,bean,they,define,to,the,factory,with,the,given,name,param,bean,name,name,of,the,bean,to,define,param,map,map,containing,string,pairs,param,prefix,prefix,of,each,entry,which,will,be,stripped,param,resource,description,description,of,the,resource,that,the,map,came,from,for,logging,purposes,throws,beans,exception,if,the,bean,definition,could,not,be,parsed,or,registered;protected,void,register,bean,definition,string,bean,name,map,map,string,prefix,string,resource,description,throws,beans,exception,string,class,name,null,string,parent,null,string,scope,generic,bean,definition,boolean,is,abstract,false,boolean,lazy,init,false,constructor,argument,values,cas,new,constructor,argument,values,mutable,property,values,pvs,new,mutable,property,values,for,map,entry,entry,map,entry,set,string,key,string,utils,trim,whitespace,string,entry,get,key,if,key,starts,with,prefix,separator,string,property,key,substring,prefix,length,separator,length,if,equals,property,class,name,string,utils,trim,whitespace,string,entry,get,value,else,if,equals,property,parent,string,utils,trim,whitespace,string,entry,get,value,else,if,equals,property,string,val,string,utils,trim,whitespace,string,entry,get,value,is,abstract,equals,val,else,if,equals,property,scope,string,utils,trim,whitespace,string,entry,get,value,else,if,equals,property,string,val,string,utils,trim,whitespace,string,entry,get,value,scope,val,null,equals,val,generic,bean,definition,generic,bean,definition,else,if,equals,property,string,val,string,utils,trim,whitespace,string,entry,get,value,lazy,init,equals,val,else,if,property,starts,with,if,property,ends,with,int,index,integer,parse,int,property,substring,1,property,length,length,cas,add,indexed,argument,value,index,new,runtime,bean,reference,entry,get,value,to,string,else,int,index,integer,parse,int,property,substring,1,cas,add,indexed,argument,value,index,read,value,entry,else,if,property,ends,with,property,property,substring,0,property,length,length,string,ref,string,utils,trim,whitespace,string,entry,get,value,object,val,new,runtime,bean,reference,ref,pvs,add,property,val,else,pvs,add,property,read,value,entry,if,logger,is,debug,enabled,logger,debug,registering,bean,definition,for,bean,name,bean,name,with,pvs,if,parent,null,class,name,null,bean,name,equals,this,default,parent,bean,parent,this,default,parent,bean,try,abstract,bean,definition,bd,bean,definition,reader,utils,create,bean,definition,parent,class,name,get,bean,class,loader,bd,set,scope,scope,bd,set,abstract,is,abstract,bd,set,lazy,init,lazy,init,bd,set,constructor,argument,values,cas,bd,set,property,values,pvs,get,registry,register,bean,definition,bean,name,bd,catch,class,not,found,exception,ex,throw,new,cannot,load,bean,class,exception,resource,description,bean,name,class,name,ex,catch,linkage,error,err,throw,new,cannot,load,bean,class,exception,resource,description,bean,name,class,name,err
PropertiesBeanDefinitionReader -> protected void registerBeanDefinition(String beanName, Map<?, ?> map, String prefix, String resourceDescription) 			throws BeansException;1357119239;Get all property values, given a prefix (which will be stripped)_and add the bean they define to the factory with the given name_@param beanName name of the bean to define_@param map Map containing string pairs_@param prefix prefix of each entry, which will be stripped_@param resourceDescription description of the resource that the_Map came from (for logging purposes)_@throws BeansException if the bean definition could not be parsed or registered;protected void registerBeanDefinition(String beanName, Map<?, ?> map, String prefix, String resourceDescription)_			throws BeansException {__		String className = null__		String parent = null__		String scope = GenericBeanDefinition.SCOPE_SINGLETON__		boolean isAbstract = false__		boolean lazyInit = false___		ConstructorArgumentValues cas = new ConstructorArgumentValues()__		MutablePropertyValues pvs = new MutablePropertyValues()___		for (Map.Entry entry : map.entrySet()) {_			String key = StringUtils.trimWhitespace((String) entry.getKey())__			if (key.startsWith(prefix + SEPARATOR)) {_				String property = key.substring(prefix.length() + SEPARATOR.length())__				if (CLASS_KEY.equals(property)) {_					className = StringUtils.trimWhitespace((String) entry.getValue())__				}_				else if (PARENT_KEY.equals(property)) {_					parent = StringUtils.trimWhitespace((String) entry.getValue())__				}_				else if (ABSTRACT_KEY.equals(property)) {_					String val = StringUtils.trimWhitespace((String) entry.getValue())__					isAbstract = TRUE_VALUE.equals(val)__				}_				else if (SCOPE_KEY.equals(property)) {_					_					scope = StringUtils.trimWhitespace((String) entry.getValue())__				}_				else if (SINGLETON_KEY.equals(property)) {_					_					String val = StringUtils.trimWhitespace((String) entry.getValue())__					scope = ((val == null || TRUE_VALUE.equals(val) ? GenericBeanDefinition.SCOPE_SINGLETON :_							GenericBeanDefinition.SCOPE_PROTOTYPE))__				}_				else if (LAZY_INIT_KEY.equals(property)) {_					String val = StringUtils.trimWhitespace((String) entry.getValue())__					lazyInit = TRUE_VALUE.equals(val)__				}_				else if (property.startsWith(CONSTRUCTOR_ARG_PREFIX)) {_					if (property.endsWith(REF_SUFFIX)) {_						int index = Integer.parseInt(property.substring(1, property.length() - REF_SUFFIX.length()))__						cas.addIndexedArgumentValue(index, new RuntimeBeanReference(entry.getValue().toString()))__					}_					else {_						int index = Integer.parseInt(property.substring(1))__						cas.addIndexedArgumentValue(index, readValue(entry))__					}_				}_				else if (property.endsWith(REF_SUFFIX)) {_					_					_					property = property.substring(0, property.length() - REF_SUFFIX.length())__					String ref = StringUtils.trimWhitespace((String) entry.getValue())___					_					_					Object val = new RuntimeBeanReference(ref)__					pvs.add(property, val)__				}_				else {_					_					pvs.add(property, readValue(entry))__				}_			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug("Registering bean definition for bean name '" + beanName + "' with " + pvs)__		}__		_		_		_		if (parent == null && className == null && !beanName.equals(this.defaultParentBean)) {_			parent = this.defaultParentBean__		}__		try {_			AbstractBeanDefinition bd = BeanDefinitionReaderUtils.createBeanDefinition(_					parent, className, getBeanClassLoader())__			bd.setScope(scope)__			bd.setAbstract(isAbstract)__			bd.setLazyInit(lazyInit)__			bd.setConstructorArgumentValues(cas)__			bd.setPropertyValues(pvs)__			getRegistry().registerBeanDefinition(beanName, bd)__		}_		catch (ClassNotFoundException ex) {_			throw new CannotLoadBeanClassException(resourceDescription, beanName, className, ex)__		}_		catch (LinkageError err) {_			throw new CannotLoadBeanClassException(resourceDescription, beanName, className, err)__		}_	};get,all,property,values,given,a,prefix,which,will,be,stripped,and,add,the,bean,they,define,to,the,factory,with,the,given,name,param,bean,name,name,of,the,bean,to,define,param,map,map,containing,string,pairs,param,prefix,prefix,of,each,entry,which,will,be,stripped,param,resource,description,description,of,the,resource,that,the,map,came,from,for,logging,purposes,throws,beans,exception,if,the,bean,definition,could,not,be,parsed,or,registered;protected,void,register,bean,definition,string,bean,name,map,map,string,prefix,string,resource,description,throws,beans,exception,string,class,name,null,string,parent,null,string,scope,generic,bean,definition,boolean,is,abstract,false,boolean,lazy,init,false,constructor,argument,values,cas,new,constructor,argument,values,mutable,property,values,pvs,new,mutable,property,values,for,map,entry,entry,map,entry,set,string,key,string,utils,trim,whitespace,string,entry,get,key,if,key,starts,with,prefix,separator,string,property,key,substring,prefix,length,separator,length,if,equals,property,class,name,string,utils,trim,whitespace,string,entry,get,value,else,if,equals,property,parent,string,utils,trim,whitespace,string,entry,get,value,else,if,equals,property,string,val,string,utils,trim,whitespace,string,entry,get,value,is,abstract,equals,val,else,if,equals,property,scope,string,utils,trim,whitespace,string,entry,get,value,else,if,equals,property,string,val,string,utils,trim,whitespace,string,entry,get,value,scope,val,null,equals,val,generic,bean,definition,generic,bean,definition,else,if,equals,property,string,val,string,utils,trim,whitespace,string,entry,get,value,lazy,init,equals,val,else,if,property,starts,with,if,property,ends,with,int,index,integer,parse,int,property,substring,1,property,length,length,cas,add,indexed,argument,value,index,new,runtime,bean,reference,entry,get,value,to,string,else,int,index,integer,parse,int,property,substring,1,cas,add,indexed,argument,value,index,read,value,entry,else,if,property,ends,with,property,property,substring,0,property,length,length,string,ref,string,utils,trim,whitespace,string,entry,get,value,object,val,new,runtime,bean,reference,ref,pvs,add,property,val,else,pvs,add,property,read,value,entry,if,logger,is,debug,enabled,logger,debug,registering,bean,definition,for,bean,name,bean,name,with,pvs,if,parent,null,class,name,null,bean,name,equals,this,default,parent,bean,parent,this,default,parent,bean,try,abstract,bean,definition,bd,bean,definition,reader,utils,create,bean,definition,parent,class,name,get,bean,class,loader,bd,set,scope,scope,bd,set,abstract,is,abstract,bd,set,lazy,init,lazy,init,bd,set,constructor,argument,values,cas,bd,set,property,values,pvs,get,registry,register,bean,definition,bean,name,bd,catch,class,not,found,exception,ex,throw,new,cannot,load,bean,class,exception,resource,description,bean,name,class,name,ex,catch,linkage,error,err,throw,new,cannot,load,bean,class,exception,resource,description,bean,name,class,name,err
PropertiesBeanDefinitionReader -> protected void registerBeanDefinition(String beanName, Map<?, ?> map, String prefix, String resourceDescription) 			throws BeansException;1362408075;Get all property values, given a prefix (which will be stripped)_and add the bean they define to the factory with the given name_@param beanName name of the bean to define_@param map Map containing string pairs_@param prefix prefix of each entry, which will be stripped_@param resourceDescription description of the resource that the_Map came from (for logging purposes)_@throws BeansException if the bean definition could not be parsed or registered;protected void registerBeanDefinition(String beanName, Map<?, ?> map, String prefix, String resourceDescription)_			throws BeansException {__		String className = null__		String parent = null__		String scope = GenericBeanDefinition.SCOPE_SINGLETON__		boolean isAbstract = false__		boolean lazyInit = false___		ConstructorArgumentValues cas = new ConstructorArgumentValues()__		MutablePropertyValues pvs = new MutablePropertyValues()___		for (Map.Entry entry : map.entrySet()) {_			String key = StringUtils.trimWhitespace((String) entry.getKey())__			if (key.startsWith(prefix + SEPARATOR)) {_				String property = key.substring(prefix.length() + SEPARATOR.length())__				if (CLASS_KEY.equals(property)) {_					className = StringUtils.trimWhitespace((String) entry.getValue())__				}_				else if (PARENT_KEY.equals(property)) {_					parent = StringUtils.trimWhitespace((String) entry.getValue())__				}_				else if (ABSTRACT_KEY.equals(property)) {_					String val = StringUtils.trimWhitespace((String) entry.getValue())__					isAbstract = TRUE_VALUE.equals(val)__				}_				else if (SCOPE_KEY.equals(property)) {_					_					scope = StringUtils.trimWhitespace((String) entry.getValue())__				}_				else if (SINGLETON_KEY.equals(property)) {_					_					String val = StringUtils.trimWhitespace((String) entry.getValue())__					scope = ((val == null || TRUE_VALUE.equals(val) ? GenericBeanDefinition.SCOPE_SINGLETON :_							GenericBeanDefinition.SCOPE_PROTOTYPE))__				}_				else if (LAZY_INIT_KEY.equals(property)) {_					String val = StringUtils.trimWhitespace((String) entry.getValue())__					lazyInit = TRUE_VALUE.equals(val)__				}_				else if (property.startsWith(CONSTRUCTOR_ARG_PREFIX)) {_					if (property.endsWith(REF_SUFFIX)) {_						int index = Integer.parseInt(property.substring(1, property.length() - REF_SUFFIX.length()))__						cas.addIndexedArgumentValue(index, new RuntimeBeanReference(entry.getValue().toString()))__					}_					else {_						int index = Integer.parseInt(property.substring(1))__						cas.addIndexedArgumentValue(index, readValue(entry))__					}_				}_				else if (property.endsWith(REF_SUFFIX)) {_					_					_					property = property.substring(0, property.length() - REF_SUFFIX.length())__					String ref = StringUtils.trimWhitespace((String) entry.getValue())___					_					_					Object val = new RuntimeBeanReference(ref)__					pvs.add(property, val)__				}_				else {_					_					pvs.add(property, readValue(entry))__				}_			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug("Registering bean definition for bean name '" + beanName + "' with " + pvs)__		}__		_		_		_		if (parent == null && className == null && !beanName.equals(this.defaultParentBean)) {_			parent = this.defaultParentBean__		}__		try {_			AbstractBeanDefinition bd = BeanDefinitionReaderUtils.createBeanDefinition(_					parent, className, getBeanClassLoader())__			bd.setScope(scope)__			bd.setAbstract(isAbstract)__			bd.setLazyInit(lazyInit)__			bd.setConstructorArgumentValues(cas)__			bd.setPropertyValues(pvs)__			getRegistry().registerBeanDefinition(beanName, bd)__		}_		catch (ClassNotFoundException ex) {_			throw new CannotLoadBeanClassException(resourceDescription, beanName, className, ex)__		}_		catch (LinkageError err) {_			throw new CannotLoadBeanClassException(resourceDescription, beanName, className, err)__		}_	};get,all,property,values,given,a,prefix,which,will,be,stripped,and,add,the,bean,they,define,to,the,factory,with,the,given,name,param,bean,name,name,of,the,bean,to,define,param,map,map,containing,string,pairs,param,prefix,prefix,of,each,entry,which,will,be,stripped,param,resource,description,description,of,the,resource,that,the,map,came,from,for,logging,purposes,throws,beans,exception,if,the,bean,definition,could,not,be,parsed,or,registered;protected,void,register,bean,definition,string,bean,name,map,map,string,prefix,string,resource,description,throws,beans,exception,string,class,name,null,string,parent,null,string,scope,generic,bean,definition,boolean,is,abstract,false,boolean,lazy,init,false,constructor,argument,values,cas,new,constructor,argument,values,mutable,property,values,pvs,new,mutable,property,values,for,map,entry,entry,map,entry,set,string,key,string,utils,trim,whitespace,string,entry,get,key,if,key,starts,with,prefix,separator,string,property,key,substring,prefix,length,separator,length,if,equals,property,class,name,string,utils,trim,whitespace,string,entry,get,value,else,if,equals,property,parent,string,utils,trim,whitespace,string,entry,get,value,else,if,equals,property,string,val,string,utils,trim,whitespace,string,entry,get,value,is,abstract,equals,val,else,if,equals,property,scope,string,utils,trim,whitespace,string,entry,get,value,else,if,equals,property,string,val,string,utils,trim,whitespace,string,entry,get,value,scope,val,null,equals,val,generic,bean,definition,generic,bean,definition,else,if,equals,property,string,val,string,utils,trim,whitespace,string,entry,get,value,lazy,init,equals,val,else,if,property,starts,with,if,property,ends,with,int,index,integer,parse,int,property,substring,1,property,length,length,cas,add,indexed,argument,value,index,new,runtime,bean,reference,entry,get,value,to,string,else,int,index,integer,parse,int,property,substring,1,cas,add,indexed,argument,value,index,read,value,entry,else,if,property,ends,with,property,property,substring,0,property,length,length,string,ref,string,utils,trim,whitespace,string,entry,get,value,object,val,new,runtime,bean,reference,ref,pvs,add,property,val,else,pvs,add,property,read,value,entry,if,logger,is,debug,enabled,logger,debug,registering,bean,definition,for,bean,name,bean,name,with,pvs,if,parent,null,class,name,null,bean,name,equals,this,default,parent,bean,parent,this,default,parent,bean,try,abstract,bean,definition,bd,bean,definition,reader,utils,create,bean,definition,parent,class,name,get,bean,class,loader,bd,set,scope,scope,bd,set,abstract,is,abstract,bd,set,lazy,init,lazy,init,bd,set,constructor,argument,values,cas,bd,set,property,values,pvs,get,registry,register,bean,definition,bean,name,bd,catch,class,not,found,exception,ex,throw,new,cannot,load,bean,class,exception,resource,description,bean,name,class,name,ex,catch,linkage,error,err,throw,new,cannot,load,bean,class,exception,resource,description,bean,name,class,name,err
PropertiesBeanDefinitionReader -> protected void registerBeanDefinition(String beanName, Map<?, ?> map, String prefix, String resourceDescription) 			throws BeansException;1368482696;Get all property values, given a prefix (which will be stripped)_and add the bean they define to the factory with the given name_@param beanName name of the bean to define_@param map Map containing string pairs_@param prefix prefix of each entry, which will be stripped_@param resourceDescription description of the resource that the_Map came from (for logging purposes)_@throws BeansException if the bean definition could not be parsed or registered;protected void registerBeanDefinition(String beanName, Map<?, ?> map, String prefix, String resourceDescription)_			throws BeansException {__		String className = null__		String parent = null__		String scope = GenericBeanDefinition.SCOPE_SINGLETON__		boolean isAbstract = false__		boolean lazyInit = false___		ConstructorArgumentValues cas = new ConstructorArgumentValues()__		MutablePropertyValues pvs = new MutablePropertyValues()___		for (Map.Entry entry : map.entrySet()) {_			String key = StringUtils.trimWhitespace((String) entry.getKey())__			if (key.startsWith(prefix + SEPARATOR)) {_				String property = key.substring(prefix.length() + SEPARATOR.length())__				if (CLASS_KEY.equals(property)) {_					className = StringUtils.trimWhitespace((String) entry.getValue())__				}_				else if (PARENT_KEY.equals(property)) {_					parent = StringUtils.trimWhitespace((String) entry.getValue())__				}_				else if (ABSTRACT_KEY.equals(property)) {_					String val = StringUtils.trimWhitespace((String) entry.getValue())__					isAbstract = TRUE_VALUE.equals(val)__				}_				else if (SCOPE_KEY.equals(property)) {_					_					scope = StringUtils.trimWhitespace((String) entry.getValue())__				}_				else if (SINGLETON_KEY.equals(property)) {_					_					String val = StringUtils.trimWhitespace((String) entry.getValue())__					scope = ((val == null || TRUE_VALUE.equals(val) ? GenericBeanDefinition.SCOPE_SINGLETON :_							GenericBeanDefinition.SCOPE_PROTOTYPE))__				}_				else if (LAZY_INIT_KEY.equals(property)) {_					String val = StringUtils.trimWhitespace((String) entry.getValue())__					lazyInit = TRUE_VALUE.equals(val)__				}_				else if (property.startsWith(CONSTRUCTOR_ARG_PREFIX)) {_					if (property.endsWith(REF_SUFFIX)) {_						int index = Integer.parseInt(property.substring(1, property.length() - REF_SUFFIX.length()))__						cas.addIndexedArgumentValue(index, new RuntimeBeanReference(entry.getValue().toString()))__					}_					else {_						int index = Integer.parseInt(property.substring(1))__						cas.addIndexedArgumentValue(index, readValue(entry))__					}_				}_				else if (property.endsWith(REF_SUFFIX)) {_					_					_					property = property.substring(0, property.length() - REF_SUFFIX.length())__					String ref = StringUtils.trimWhitespace((String) entry.getValue())___					_					_					Object val = new RuntimeBeanReference(ref)__					pvs.add(property, val)__				}_				else {_					_					pvs.add(property, readValue(entry))__				}_			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug("Registering bean definition for bean name '" + beanName + "' with " + pvs)__		}__		_		_		_		if (parent == null && className == null && !beanName.equals(this.defaultParentBean)) {_			parent = this.defaultParentBean__		}__		try {_			AbstractBeanDefinition bd = BeanDefinitionReaderUtils.createBeanDefinition(_					parent, className, getBeanClassLoader())__			bd.setScope(scope)__			bd.setAbstract(isAbstract)__			bd.setLazyInit(lazyInit)__			bd.setConstructorArgumentValues(cas)__			bd.setPropertyValues(pvs)__			getRegistry().registerBeanDefinition(beanName, bd)__		}_		catch (ClassNotFoundException ex) {_			throw new CannotLoadBeanClassException(resourceDescription, beanName, className, ex)__		}_		catch (LinkageError err) {_			throw new CannotLoadBeanClassException(resourceDescription, beanName, className, err)__		}_	};get,all,property,values,given,a,prefix,which,will,be,stripped,and,add,the,bean,they,define,to,the,factory,with,the,given,name,param,bean,name,name,of,the,bean,to,define,param,map,map,containing,string,pairs,param,prefix,prefix,of,each,entry,which,will,be,stripped,param,resource,description,description,of,the,resource,that,the,map,came,from,for,logging,purposes,throws,beans,exception,if,the,bean,definition,could,not,be,parsed,or,registered;protected,void,register,bean,definition,string,bean,name,map,map,string,prefix,string,resource,description,throws,beans,exception,string,class,name,null,string,parent,null,string,scope,generic,bean,definition,boolean,is,abstract,false,boolean,lazy,init,false,constructor,argument,values,cas,new,constructor,argument,values,mutable,property,values,pvs,new,mutable,property,values,for,map,entry,entry,map,entry,set,string,key,string,utils,trim,whitespace,string,entry,get,key,if,key,starts,with,prefix,separator,string,property,key,substring,prefix,length,separator,length,if,equals,property,class,name,string,utils,trim,whitespace,string,entry,get,value,else,if,equals,property,parent,string,utils,trim,whitespace,string,entry,get,value,else,if,equals,property,string,val,string,utils,trim,whitespace,string,entry,get,value,is,abstract,equals,val,else,if,equals,property,scope,string,utils,trim,whitespace,string,entry,get,value,else,if,equals,property,string,val,string,utils,trim,whitespace,string,entry,get,value,scope,val,null,equals,val,generic,bean,definition,generic,bean,definition,else,if,equals,property,string,val,string,utils,trim,whitespace,string,entry,get,value,lazy,init,equals,val,else,if,property,starts,with,if,property,ends,with,int,index,integer,parse,int,property,substring,1,property,length,length,cas,add,indexed,argument,value,index,new,runtime,bean,reference,entry,get,value,to,string,else,int,index,integer,parse,int,property,substring,1,cas,add,indexed,argument,value,index,read,value,entry,else,if,property,ends,with,property,property,substring,0,property,length,length,string,ref,string,utils,trim,whitespace,string,entry,get,value,object,val,new,runtime,bean,reference,ref,pvs,add,property,val,else,pvs,add,property,read,value,entry,if,logger,is,debug,enabled,logger,debug,registering,bean,definition,for,bean,name,bean,name,with,pvs,if,parent,null,class,name,null,bean,name,equals,this,default,parent,bean,parent,this,default,parent,bean,try,abstract,bean,definition,bd,bean,definition,reader,utils,create,bean,definition,parent,class,name,get,bean,class,loader,bd,set,scope,scope,bd,set,abstract,is,abstract,bd,set,lazy,init,lazy,init,bd,set,constructor,argument,values,cas,bd,set,property,values,pvs,get,registry,register,bean,definition,bean,name,bd,catch,class,not,found,exception,ex,throw,new,cannot,load,bean,class,exception,resource,description,bean,name,class,name,ex,catch,linkage,error,err,throw,new,cannot,load,bean,class,exception,resource,description,bean,name,class,name,err
PropertiesBeanDefinitionReader -> protected void registerBeanDefinition(String beanName, Map<?, ?> map, String prefix, String resourceDescription) 			throws BeansException;1385412762;Get all property values, given a prefix (which will be stripped)_and add the bean they define to the factory with the given name_@param beanName name of the bean to define_@param map Map containing string pairs_@param prefix prefix of each entry, which will be stripped_@param resourceDescription description of the resource that the_Map came from (for logging purposes)_@throws BeansException if the bean definition could not be parsed or registered;protected void registerBeanDefinition(String beanName, Map<?, ?> map, String prefix, String resourceDescription)_			throws BeansException {__		String className = null__		String parent = null__		String scope = GenericBeanDefinition.SCOPE_SINGLETON__		boolean isAbstract = false__		boolean lazyInit = false___		ConstructorArgumentValues cas = new ConstructorArgumentValues()__		MutablePropertyValues pvs = new MutablePropertyValues()___		for (Map.Entry<?, ?> entry : map.entrySet()) {_			String key = StringUtils.trimWhitespace((String) entry.getKey())__			if (key.startsWith(prefix + SEPARATOR)) {_				String property = key.substring(prefix.length() + SEPARATOR.length())__				if (CLASS_KEY.equals(property)) {_					className = StringUtils.trimWhitespace((String) entry.getValue())__				}_				else if (PARENT_KEY.equals(property)) {_					parent = StringUtils.trimWhitespace((String) entry.getValue())__				}_				else if (ABSTRACT_KEY.equals(property)) {_					String val = StringUtils.trimWhitespace((String) entry.getValue())__					isAbstract = TRUE_VALUE.equals(val)__				}_				else if (SCOPE_KEY.equals(property)) {_					_					scope = StringUtils.trimWhitespace((String) entry.getValue())__				}_				else if (SINGLETON_KEY.equals(property)) {_					_					String val = StringUtils.trimWhitespace((String) entry.getValue())__					scope = ((val == null || TRUE_VALUE.equals(val) ? GenericBeanDefinition.SCOPE_SINGLETON :_							GenericBeanDefinition.SCOPE_PROTOTYPE))__				}_				else if (LAZY_INIT_KEY.equals(property)) {_					String val = StringUtils.trimWhitespace((String) entry.getValue())__					lazyInit = TRUE_VALUE.equals(val)__				}_				else if (property.startsWith(CONSTRUCTOR_ARG_PREFIX)) {_					if (property.endsWith(REF_SUFFIX)) {_						int index = Integer.parseInt(property.substring(1, property.length() - REF_SUFFIX.length()))__						cas.addIndexedArgumentValue(index, new RuntimeBeanReference(entry.getValue().toString()))__					}_					else {_						int index = Integer.parseInt(property.substring(1))__						cas.addIndexedArgumentValue(index, readValue(entry))__					}_				}_				else if (property.endsWith(REF_SUFFIX)) {_					_					_					property = property.substring(0, property.length() - REF_SUFFIX.length())__					String ref = StringUtils.trimWhitespace((String) entry.getValue())___					_					_					Object val = new RuntimeBeanReference(ref)__					pvs.add(property, val)__				}_				else {_					_					pvs.add(property, readValue(entry))__				}_			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug("Registering bean definition for bean name '" + beanName + "' with " + pvs)__		}__		_		_		_		if (parent == null && className == null && !beanName.equals(this.defaultParentBean)) {_			parent = this.defaultParentBean__		}__		try {_			AbstractBeanDefinition bd = BeanDefinitionReaderUtils.createBeanDefinition(_					parent, className, getBeanClassLoader())__			bd.setScope(scope)__			bd.setAbstract(isAbstract)__			bd.setLazyInit(lazyInit)__			bd.setConstructorArgumentValues(cas)__			bd.setPropertyValues(pvs)__			getRegistry().registerBeanDefinition(beanName, bd)__		}_		catch (ClassNotFoundException ex) {_			throw new CannotLoadBeanClassException(resourceDescription, beanName, className, ex)__		}_		catch (LinkageError err) {_			throw new CannotLoadBeanClassException(resourceDescription, beanName, className, err)__		}_	};get,all,property,values,given,a,prefix,which,will,be,stripped,and,add,the,bean,they,define,to,the,factory,with,the,given,name,param,bean,name,name,of,the,bean,to,define,param,map,map,containing,string,pairs,param,prefix,prefix,of,each,entry,which,will,be,stripped,param,resource,description,description,of,the,resource,that,the,map,came,from,for,logging,purposes,throws,beans,exception,if,the,bean,definition,could,not,be,parsed,or,registered;protected,void,register,bean,definition,string,bean,name,map,map,string,prefix,string,resource,description,throws,beans,exception,string,class,name,null,string,parent,null,string,scope,generic,bean,definition,boolean,is,abstract,false,boolean,lazy,init,false,constructor,argument,values,cas,new,constructor,argument,values,mutable,property,values,pvs,new,mutable,property,values,for,map,entry,entry,map,entry,set,string,key,string,utils,trim,whitespace,string,entry,get,key,if,key,starts,with,prefix,separator,string,property,key,substring,prefix,length,separator,length,if,equals,property,class,name,string,utils,trim,whitespace,string,entry,get,value,else,if,equals,property,parent,string,utils,trim,whitespace,string,entry,get,value,else,if,equals,property,string,val,string,utils,trim,whitespace,string,entry,get,value,is,abstract,equals,val,else,if,equals,property,scope,string,utils,trim,whitespace,string,entry,get,value,else,if,equals,property,string,val,string,utils,trim,whitespace,string,entry,get,value,scope,val,null,equals,val,generic,bean,definition,generic,bean,definition,else,if,equals,property,string,val,string,utils,trim,whitespace,string,entry,get,value,lazy,init,equals,val,else,if,property,starts,with,if,property,ends,with,int,index,integer,parse,int,property,substring,1,property,length,length,cas,add,indexed,argument,value,index,new,runtime,bean,reference,entry,get,value,to,string,else,int,index,integer,parse,int,property,substring,1,cas,add,indexed,argument,value,index,read,value,entry,else,if,property,ends,with,property,property,substring,0,property,length,length,string,ref,string,utils,trim,whitespace,string,entry,get,value,object,val,new,runtime,bean,reference,ref,pvs,add,property,val,else,pvs,add,property,read,value,entry,if,logger,is,debug,enabled,logger,debug,registering,bean,definition,for,bean,name,bean,name,with,pvs,if,parent,null,class,name,null,bean,name,equals,this,default,parent,bean,parent,this,default,parent,bean,try,abstract,bean,definition,bd,bean,definition,reader,utils,create,bean,definition,parent,class,name,get,bean,class,loader,bd,set,scope,scope,bd,set,abstract,is,abstract,bd,set,lazy,init,lazy,init,bd,set,constructor,argument,values,cas,bd,set,property,values,pvs,get,registry,register,bean,definition,bean,name,bd,catch,class,not,found,exception,ex,throw,new,cannot,load,bean,class,exception,resource,description,bean,name,class,name,ex,catch,linkage,error,err,throw,new,cannot,load,bean,class,exception,resource,description,bean,name,class,name,err
PropertiesBeanDefinitionReader -> protected void registerBeanDefinition(String beanName, Map<?, ?> map, String prefix, String resourceDescription) 			throws BeansException;1467730834;Get all property values, given a prefix (which will be stripped)_and add the bean they define to the factory with the given name_@param beanName name of the bean to define_@param map Map containing string pairs_@param prefix prefix of each entry, which will be stripped_@param resourceDescription description of the resource that the_Map came from (for logging purposes)_@throws BeansException if the bean definition could not be parsed or registered;protected void registerBeanDefinition(String beanName, Map<?, ?> map, String prefix, String resourceDescription)_			throws BeansException {__		String className = null__		String parent = null__		String scope = GenericBeanDefinition.SCOPE_SINGLETON__		boolean isAbstract = false__		boolean lazyInit = false___		ConstructorArgumentValues cas = new ConstructorArgumentValues()__		MutablePropertyValues pvs = new MutablePropertyValues()___		for (Map.Entry<?, ?> entry : map.entrySet()) {_			String key = StringUtils.trimWhitespace((String) entry.getKey())__			if (key.startsWith(prefix + SEPARATOR)) {_				String property = key.substring(prefix.length() + SEPARATOR.length())__				if (CLASS_KEY.equals(property)) {_					className = StringUtils.trimWhitespace((String) entry.getValue())__				}_				else if (PARENT_KEY.equals(property)) {_					parent = StringUtils.trimWhitespace((String) entry.getValue())__				}_				else if (ABSTRACT_KEY.equals(property)) {_					String val = StringUtils.trimWhitespace((String) entry.getValue())__					isAbstract = TRUE_VALUE.equals(val)__				}_				else if (SCOPE_KEY.equals(property)) {_					_					scope = StringUtils.trimWhitespace((String) entry.getValue())__				}_				else if (SINGLETON_KEY.equals(property)) {_					_					String val = StringUtils.trimWhitespace((String) entry.getValue())__					scope = ((val == null || TRUE_VALUE.equals(val) ? GenericBeanDefinition.SCOPE_SINGLETON :_							GenericBeanDefinition.SCOPE_PROTOTYPE))__				}_				else if (LAZY_INIT_KEY.equals(property)) {_					String val = StringUtils.trimWhitespace((String) entry.getValue())__					lazyInit = TRUE_VALUE.equals(val)__				}_				else if (property.startsWith(CONSTRUCTOR_ARG_PREFIX)) {_					if (property.endsWith(REF_SUFFIX)) {_						int index = Integer.parseInt(property.substring(1, property.length() - REF_SUFFIX.length()))__						cas.addIndexedArgumentValue(index, new RuntimeBeanReference(entry.getValue().toString()))__					}_					else {_						int index = Integer.parseInt(property.substring(1))__						cas.addIndexedArgumentValue(index, readValue(entry))__					}_				}_				else if (property.endsWith(REF_SUFFIX)) {_					_					_					property = property.substring(0, property.length() - REF_SUFFIX.length())__					String ref = StringUtils.trimWhitespace((String) entry.getValue())___					_					_					Object val = new RuntimeBeanReference(ref)__					pvs.add(property, val)__				}_				else {_					_					pvs.add(property, readValue(entry))__				}_			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug("Registering bean definition for bean name '" + beanName + "' with " + pvs)__		}__		_		_		_		if (parent == null && className == null && !beanName.equals(this.defaultParentBean)) {_			parent = this.defaultParentBean__		}__		try {_			AbstractBeanDefinition bd = BeanDefinitionReaderUtils.createBeanDefinition(_					parent, className, getBeanClassLoader())__			bd.setScope(scope)__			bd.setAbstract(isAbstract)__			bd.setLazyInit(lazyInit)__			bd.setConstructorArgumentValues(cas)__			bd.setPropertyValues(pvs)__			getRegistry().registerBeanDefinition(beanName, bd)__		}_		catch (ClassNotFoundException ex) {_			throw new CannotLoadBeanClassException(resourceDescription, beanName, className, ex)__		}_		catch (LinkageError err) {_			throw new CannotLoadBeanClassException(resourceDescription, beanName, className, err)__		}_	};get,all,property,values,given,a,prefix,which,will,be,stripped,and,add,the,bean,they,define,to,the,factory,with,the,given,name,param,bean,name,name,of,the,bean,to,define,param,map,map,containing,string,pairs,param,prefix,prefix,of,each,entry,which,will,be,stripped,param,resource,description,description,of,the,resource,that,the,map,came,from,for,logging,purposes,throws,beans,exception,if,the,bean,definition,could,not,be,parsed,or,registered;protected,void,register,bean,definition,string,bean,name,map,map,string,prefix,string,resource,description,throws,beans,exception,string,class,name,null,string,parent,null,string,scope,generic,bean,definition,boolean,is,abstract,false,boolean,lazy,init,false,constructor,argument,values,cas,new,constructor,argument,values,mutable,property,values,pvs,new,mutable,property,values,for,map,entry,entry,map,entry,set,string,key,string,utils,trim,whitespace,string,entry,get,key,if,key,starts,with,prefix,separator,string,property,key,substring,prefix,length,separator,length,if,equals,property,class,name,string,utils,trim,whitespace,string,entry,get,value,else,if,equals,property,parent,string,utils,trim,whitespace,string,entry,get,value,else,if,equals,property,string,val,string,utils,trim,whitespace,string,entry,get,value,is,abstract,equals,val,else,if,equals,property,scope,string,utils,trim,whitespace,string,entry,get,value,else,if,equals,property,string,val,string,utils,trim,whitespace,string,entry,get,value,scope,val,null,equals,val,generic,bean,definition,generic,bean,definition,else,if,equals,property,string,val,string,utils,trim,whitespace,string,entry,get,value,lazy,init,equals,val,else,if,property,starts,with,if,property,ends,with,int,index,integer,parse,int,property,substring,1,property,length,length,cas,add,indexed,argument,value,index,new,runtime,bean,reference,entry,get,value,to,string,else,int,index,integer,parse,int,property,substring,1,cas,add,indexed,argument,value,index,read,value,entry,else,if,property,ends,with,property,property,substring,0,property,length,length,string,ref,string,utils,trim,whitespace,string,entry,get,value,object,val,new,runtime,bean,reference,ref,pvs,add,property,val,else,pvs,add,property,read,value,entry,if,logger,is,debug,enabled,logger,debug,registering,bean,definition,for,bean,name,bean,name,with,pvs,if,parent,null,class,name,null,bean,name,equals,this,default,parent,bean,parent,this,default,parent,bean,try,abstract,bean,definition,bd,bean,definition,reader,utils,create,bean,definition,parent,class,name,get,bean,class,loader,bd,set,scope,scope,bd,set,abstract,is,abstract,bd,set,lazy,init,lazy,init,bd,set,constructor,argument,values,cas,bd,set,property,values,pvs,get,registry,register,bean,definition,bean,name,bd,catch,class,not,found,exception,ex,throw,new,cannot,load,bean,class,exception,resource,description,bean,name,class,name,ex,catch,linkage,error,err,throw,new,cannot,load,bean,class,exception,resource,description,bean,name,class,name,err
PropertiesBeanDefinitionReader -> protected void registerBeanDefinition(String beanName, Map<?, ?> map, String prefix, String resourceDescription) 			throws BeansException;1495868221;Get all property values, given a prefix (which will be stripped)_and add the bean they define to the factory with the given name_@param beanName name of the bean to define_@param map Map containing string pairs_@param prefix prefix of each entry, which will be stripped_@param resourceDescription description of the resource that the_Map came from (for logging purposes)_@throws BeansException if the bean definition could not be parsed or registered;protected void registerBeanDefinition(String beanName, Map<?, ?> map, String prefix, String resourceDescription)_			throws BeansException {__		String className = null__		String parent = null__		String scope = GenericBeanDefinition.SCOPE_SINGLETON__		boolean isAbstract = false__		boolean lazyInit = false___		ConstructorArgumentValues cas = new ConstructorArgumentValues()__		MutablePropertyValues pvs = new MutablePropertyValues()___		for (Map.Entry<?, ?> entry : map.entrySet()) {_			String key = StringUtils.trimWhitespace((String) entry.getKey())__			if (key.startsWith(prefix + SEPARATOR)) {_				String property = key.substring(prefix.length() + SEPARATOR.length())__				if (CLASS_KEY.equals(property)) {_					className = StringUtils.trimWhitespace((String) entry.getValue())__				}_				else if (PARENT_KEY.equals(property)) {_					parent = StringUtils.trimWhitespace((String) entry.getValue())__				}_				else if (ABSTRACT_KEY.equals(property)) {_					String val = StringUtils.trimWhitespace((String) entry.getValue())__					isAbstract = TRUE_VALUE.equals(val)__				}_				else if (SCOPE_KEY.equals(property)) {_					_					scope = StringUtils.trimWhitespace((String) entry.getValue())__				}_				else if (SINGLETON_KEY.equals(property)) {_					_					String val = StringUtils.trimWhitespace((String) entry.getValue())__					scope = ((val == null || TRUE_VALUE.equals(val) ? GenericBeanDefinition.SCOPE_SINGLETON :_							GenericBeanDefinition.SCOPE_PROTOTYPE))__				}_				else if (LAZY_INIT_KEY.equals(property)) {_					String val = StringUtils.trimWhitespace((String) entry.getValue())__					lazyInit = TRUE_VALUE.equals(val)__				}_				else if (property.startsWith(CONSTRUCTOR_ARG_PREFIX)) {_					if (property.endsWith(REF_SUFFIX)) {_						int index = Integer.parseInt(property.substring(1, property.length() - REF_SUFFIX.length()))__						cas.addIndexedArgumentValue(index, new RuntimeBeanReference(entry.getValue().toString()))__					}_					else {_						int index = Integer.parseInt(property.substring(1))__						cas.addIndexedArgumentValue(index, readValue(entry))__					}_				}_				else if (property.endsWith(REF_SUFFIX)) {_					_					_					property = property.substring(0, property.length() - REF_SUFFIX.length())__					String ref = StringUtils.trimWhitespace((String) entry.getValue())___					_					_					Object val = new RuntimeBeanReference(ref)__					pvs.add(property, val)__				}_				else {_					_					pvs.add(property, readValue(entry))__				}_			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug("Registering bean definition for bean name '" + beanName + "' with " + pvs)__		}__		_		_		_		if (parent == null && className == null && !beanName.equals(this.defaultParentBean)) {_			parent = this.defaultParentBean__		}__		try {_			AbstractBeanDefinition bd = BeanDefinitionReaderUtils.createBeanDefinition(_					parent, className, getBeanClassLoader())__			bd.setScope(scope)__			bd.setAbstract(isAbstract)__			bd.setLazyInit(lazyInit)__			bd.setConstructorArgumentValues(cas)__			bd.setPropertyValues(pvs)__			getRegistry().registerBeanDefinition(beanName, bd)__		}_		catch (ClassNotFoundException ex) {_			throw new CannotLoadBeanClassException(resourceDescription, beanName, className, ex)__		}_		catch (LinkageError err) {_			throw new CannotLoadBeanClassException(resourceDescription, beanName, className, err)__		}_	};get,all,property,values,given,a,prefix,which,will,be,stripped,and,add,the,bean,they,define,to,the,factory,with,the,given,name,param,bean,name,name,of,the,bean,to,define,param,map,map,containing,string,pairs,param,prefix,prefix,of,each,entry,which,will,be,stripped,param,resource,description,description,of,the,resource,that,the,map,came,from,for,logging,purposes,throws,beans,exception,if,the,bean,definition,could,not,be,parsed,or,registered;protected,void,register,bean,definition,string,bean,name,map,map,string,prefix,string,resource,description,throws,beans,exception,string,class,name,null,string,parent,null,string,scope,generic,bean,definition,boolean,is,abstract,false,boolean,lazy,init,false,constructor,argument,values,cas,new,constructor,argument,values,mutable,property,values,pvs,new,mutable,property,values,for,map,entry,entry,map,entry,set,string,key,string,utils,trim,whitespace,string,entry,get,key,if,key,starts,with,prefix,separator,string,property,key,substring,prefix,length,separator,length,if,equals,property,class,name,string,utils,trim,whitespace,string,entry,get,value,else,if,equals,property,parent,string,utils,trim,whitespace,string,entry,get,value,else,if,equals,property,string,val,string,utils,trim,whitespace,string,entry,get,value,is,abstract,equals,val,else,if,equals,property,scope,string,utils,trim,whitespace,string,entry,get,value,else,if,equals,property,string,val,string,utils,trim,whitespace,string,entry,get,value,scope,val,null,equals,val,generic,bean,definition,generic,bean,definition,else,if,equals,property,string,val,string,utils,trim,whitespace,string,entry,get,value,lazy,init,equals,val,else,if,property,starts,with,if,property,ends,with,int,index,integer,parse,int,property,substring,1,property,length,length,cas,add,indexed,argument,value,index,new,runtime,bean,reference,entry,get,value,to,string,else,int,index,integer,parse,int,property,substring,1,cas,add,indexed,argument,value,index,read,value,entry,else,if,property,ends,with,property,property,substring,0,property,length,length,string,ref,string,utils,trim,whitespace,string,entry,get,value,object,val,new,runtime,bean,reference,ref,pvs,add,property,val,else,pvs,add,property,read,value,entry,if,logger,is,debug,enabled,logger,debug,registering,bean,definition,for,bean,name,bean,name,with,pvs,if,parent,null,class,name,null,bean,name,equals,this,default,parent,bean,parent,this,default,parent,bean,try,abstract,bean,definition,bd,bean,definition,reader,utils,create,bean,definition,parent,class,name,get,bean,class,loader,bd,set,scope,scope,bd,set,abstract,is,abstract,bd,set,lazy,init,lazy,init,bd,set,constructor,argument,values,cas,bd,set,property,values,pvs,get,registry,register,bean,definition,bean,name,bd,catch,class,not,found,exception,ex,throw,new,cannot,load,bean,class,exception,resource,description,bean,name,class,name,ex,catch,linkage,error,err,throw,new,cannot,load,bean,class,exception,resource,description,bean,name,class,name,err
PropertiesBeanDefinitionReader -> protected void registerBeanDefinition(String beanName, Map<?, ?> map, String prefix, String resourceDescription) 			throws BeansException;1496837955;Get all property values, given a prefix (which will be stripped)_and add the bean they define to the factory with the given name_@param beanName name of the bean to define_@param map Map containing string pairs_@param prefix prefix of each entry, which will be stripped_@param resourceDescription description of the resource that the_Map came from (for logging purposes)_@throws BeansException if the bean definition could not be parsed or registered;protected void registerBeanDefinition(String beanName, Map<?, ?> map, String prefix, String resourceDescription)_			throws BeansException {__		String className = null__		String parent = null__		String scope = GenericBeanDefinition.SCOPE_SINGLETON__		boolean isAbstract = false__		boolean lazyInit = false___		ConstructorArgumentValues cas = new ConstructorArgumentValues()__		MutablePropertyValues pvs = new MutablePropertyValues()___		for (Map.Entry<?, ?> entry : map.entrySet()) {_			String key = StringUtils.trimWhitespace((String) entry.getKey())__			if (key.startsWith(prefix + SEPARATOR)) {_				String property = key.substring(prefix.length() + SEPARATOR.length())__				if (CLASS_KEY.equals(property)) {_					className = StringUtils.trimWhitespace((String) entry.getValue())__				}_				else if (PARENT_KEY.equals(property)) {_					parent = StringUtils.trimWhitespace((String) entry.getValue())__				}_				else if (ABSTRACT_KEY.equals(property)) {_					String val = StringUtils.trimWhitespace((String) entry.getValue())__					isAbstract = TRUE_VALUE.equals(val)__				}_				else if (SCOPE_KEY.equals(property)) {_					_					scope = StringUtils.trimWhitespace((String) entry.getValue())__				}_				else if (SINGLETON_KEY.equals(property)) {_					_					String val = StringUtils.trimWhitespace((String) entry.getValue())__					scope = ("".equals(val) || TRUE_VALUE.equals(val) ? GenericBeanDefinition.SCOPE_SINGLETON :_							GenericBeanDefinition.SCOPE_PROTOTYPE)__				}_				else if (LAZY_INIT_KEY.equals(property)) {_					String val = StringUtils.trimWhitespace((String) entry.getValue())__					lazyInit = TRUE_VALUE.equals(val)__				}_				else if (property.startsWith(CONSTRUCTOR_ARG_PREFIX)) {_					if (property.endsWith(REF_SUFFIX)) {_						int index = Integer.parseInt(property.substring(1, property.length() - REF_SUFFIX.length()))__						cas.addIndexedArgumentValue(index, new RuntimeBeanReference(entry.getValue().toString()))__					}_					else {_						int index = Integer.parseInt(property.substring(1))__						cas.addIndexedArgumentValue(index, readValue(entry))__					}_				}_				else if (property.endsWith(REF_SUFFIX)) {_					_					_					property = property.substring(0, property.length() - REF_SUFFIX.length())__					String ref = StringUtils.trimWhitespace((String) entry.getValue())___					_					_					Object val = new RuntimeBeanReference(ref)__					pvs.add(property, val)__				}_				else {_					_					pvs.add(property, readValue(entry))__				}_			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug("Registering bean definition for bean name '" + beanName + "' with " + pvs)__		}__		_		_		_		if (parent == null && className == null && !beanName.equals(this.defaultParentBean)) {_			parent = this.defaultParentBean__		}__		try {_			AbstractBeanDefinition bd = BeanDefinitionReaderUtils.createBeanDefinition(_					parent, className, getBeanClassLoader())__			bd.setScope(scope)__			bd.setAbstract(isAbstract)__			bd.setLazyInit(lazyInit)__			bd.setConstructorArgumentValues(cas)__			bd.setPropertyValues(pvs)__			getRegistry().registerBeanDefinition(beanName, bd)__		}_		catch (ClassNotFoundException ex) {_			throw new CannotLoadBeanClassException(resourceDescription, beanName, className, ex)__		}_		catch (LinkageError err) {_			throw new CannotLoadBeanClassException(resourceDescription, beanName, className, err)__		}_	};get,all,property,values,given,a,prefix,which,will,be,stripped,and,add,the,bean,they,define,to,the,factory,with,the,given,name,param,bean,name,name,of,the,bean,to,define,param,map,map,containing,string,pairs,param,prefix,prefix,of,each,entry,which,will,be,stripped,param,resource,description,description,of,the,resource,that,the,map,came,from,for,logging,purposes,throws,beans,exception,if,the,bean,definition,could,not,be,parsed,or,registered;protected,void,register,bean,definition,string,bean,name,map,map,string,prefix,string,resource,description,throws,beans,exception,string,class,name,null,string,parent,null,string,scope,generic,bean,definition,boolean,is,abstract,false,boolean,lazy,init,false,constructor,argument,values,cas,new,constructor,argument,values,mutable,property,values,pvs,new,mutable,property,values,for,map,entry,entry,map,entry,set,string,key,string,utils,trim,whitespace,string,entry,get,key,if,key,starts,with,prefix,separator,string,property,key,substring,prefix,length,separator,length,if,equals,property,class,name,string,utils,trim,whitespace,string,entry,get,value,else,if,equals,property,parent,string,utils,trim,whitespace,string,entry,get,value,else,if,equals,property,string,val,string,utils,trim,whitespace,string,entry,get,value,is,abstract,equals,val,else,if,equals,property,scope,string,utils,trim,whitespace,string,entry,get,value,else,if,equals,property,string,val,string,utils,trim,whitespace,string,entry,get,value,scope,equals,val,equals,val,generic,bean,definition,generic,bean,definition,else,if,equals,property,string,val,string,utils,trim,whitespace,string,entry,get,value,lazy,init,equals,val,else,if,property,starts,with,if,property,ends,with,int,index,integer,parse,int,property,substring,1,property,length,length,cas,add,indexed,argument,value,index,new,runtime,bean,reference,entry,get,value,to,string,else,int,index,integer,parse,int,property,substring,1,cas,add,indexed,argument,value,index,read,value,entry,else,if,property,ends,with,property,property,substring,0,property,length,length,string,ref,string,utils,trim,whitespace,string,entry,get,value,object,val,new,runtime,bean,reference,ref,pvs,add,property,val,else,pvs,add,property,read,value,entry,if,logger,is,debug,enabled,logger,debug,registering,bean,definition,for,bean,name,bean,name,with,pvs,if,parent,null,class,name,null,bean,name,equals,this,default,parent,bean,parent,this,default,parent,bean,try,abstract,bean,definition,bd,bean,definition,reader,utils,create,bean,definition,parent,class,name,get,bean,class,loader,bd,set,scope,scope,bd,set,abstract,is,abstract,bd,set,lazy,init,lazy,init,bd,set,constructor,argument,values,cas,bd,set,property,values,pvs,get,registry,register,bean,definition,bean,name,bd,catch,class,not,found,exception,ex,throw,new,cannot,load,bean,class,exception,resource,description,bean,name,class,name,ex,catch,linkage,error,err,throw,new,cannot,load,bean,class,exception,resource,description,bean,name,class,name,err
PropertiesBeanDefinitionReader -> protected void registerBeanDefinition(String beanName, Map<?, ?> map, String prefix, String resourceDescription) 			throws BeansException;1498780456;Get all property values, given a prefix (which will be stripped)_and add the bean they define to the factory with the given name_@param beanName name of the bean to define_@param map Map containing string pairs_@param prefix prefix of each entry, which will be stripped_@param resourceDescription description of the resource that the_Map came from (for logging purposes)_@throws BeansException if the bean definition could not be parsed or registered;protected void registerBeanDefinition(String beanName, Map<?, ?> map, String prefix, String resourceDescription)_			throws BeansException {__		String className = null__		String parent = null__		String scope = GenericBeanDefinition.SCOPE_SINGLETON__		boolean isAbstract = false__		boolean lazyInit = false___		ConstructorArgumentValues cas = new ConstructorArgumentValues()__		MutablePropertyValues pvs = new MutablePropertyValues()___		for (Map.Entry<?, ?> entry : map.entrySet()) {_			String key = StringUtils.trimWhitespace((String) entry.getKey())__			if (key.startsWith(prefix + SEPARATOR)) {_				String property = key.substring(prefix.length() + SEPARATOR.length())__				if (CLASS_KEY.equals(property)) {_					className = StringUtils.trimWhitespace((String) entry.getValue())__				}_				else if (PARENT_KEY.equals(property)) {_					parent = StringUtils.trimWhitespace((String) entry.getValue())__				}_				else if (ABSTRACT_KEY.equals(property)) {_					String val = StringUtils.trimWhitespace((String) entry.getValue())__					isAbstract = TRUE_VALUE.equals(val)__				}_				else if (SCOPE_KEY.equals(property)) {_					_					scope = StringUtils.trimWhitespace((String) entry.getValue())__				}_				else if (SINGLETON_KEY.equals(property)) {_					_					String val = StringUtils.trimWhitespace((String) entry.getValue())__					scope = ("".equals(val) || TRUE_VALUE.equals(val) ? GenericBeanDefinition.SCOPE_SINGLETON :_							GenericBeanDefinition.SCOPE_PROTOTYPE)__				}_				else if (LAZY_INIT_KEY.equals(property)) {_					String val = StringUtils.trimWhitespace((String) entry.getValue())__					lazyInit = TRUE_VALUE.equals(val)__				}_				else if (property.startsWith(CONSTRUCTOR_ARG_PREFIX)) {_					if (property.endsWith(REF_SUFFIX)) {_						int index = Integer.parseInt(property.substring(1, property.length() - REF_SUFFIX.length()))__						cas.addIndexedArgumentValue(index, new RuntimeBeanReference(entry.getValue().toString()))__					}_					else {_						int index = Integer.parseInt(property.substring(1))__						cas.addIndexedArgumentValue(index, readValue(entry))__					}_				}_				else if (property.endsWith(REF_SUFFIX)) {_					_					_					property = property.substring(0, property.length() - REF_SUFFIX.length())__					String ref = StringUtils.trimWhitespace((String) entry.getValue())___					_					_					Object val = new RuntimeBeanReference(ref)__					pvs.add(property, val)__				}_				else {_					_					pvs.add(property, readValue(entry))__				}_			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug("Registering bean definition for bean name '" + beanName + "' with " + pvs)__		}__		_		_		_		if (parent == null && className == null && !beanName.equals(this.defaultParentBean)) {_			parent = this.defaultParentBean__		}__		try {_			AbstractBeanDefinition bd = BeanDefinitionReaderUtils.createBeanDefinition(_					parent, className, getBeanClassLoader())__			bd.setScope(scope)__			bd.setAbstract(isAbstract)__			bd.setLazyInit(lazyInit)__			bd.setConstructorArgumentValues(cas)__			bd.setPropertyValues(pvs)__			getRegistry().registerBeanDefinition(beanName, bd)__		}_		catch (ClassNotFoundException ex) {_			throw new CannotLoadBeanClassException(resourceDescription, beanName, className, ex)__		}_		catch (LinkageError err) {_			throw new CannotLoadBeanClassException(resourceDescription, beanName, className, err)__		}_	};get,all,property,values,given,a,prefix,which,will,be,stripped,and,add,the,bean,they,define,to,the,factory,with,the,given,name,param,bean,name,name,of,the,bean,to,define,param,map,map,containing,string,pairs,param,prefix,prefix,of,each,entry,which,will,be,stripped,param,resource,description,description,of,the,resource,that,the,map,came,from,for,logging,purposes,throws,beans,exception,if,the,bean,definition,could,not,be,parsed,or,registered;protected,void,register,bean,definition,string,bean,name,map,map,string,prefix,string,resource,description,throws,beans,exception,string,class,name,null,string,parent,null,string,scope,generic,bean,definition,boolean,is,abstract,false,boolean,lazy,init,false,constructor,argument,values,cas,new,constructor,argument,values,mutable,property,values,pvs,new,mutable,property,values,for,map,entry,entry,map,entry,set,string,key,string,utils,trim,whitespace,string,entry,get,key,if,key,starts,with,prefix,separator,string,property,key,substring,prefix,length,separator,length,if,equals,property,class,name,string,utils,trim,whitespace,string,entry,get,value,else,if,equals,property,parent,string,utils,trim,whitespace,string,entry,get,value,else,if,equals,property,string,val,string,utils,trim,whitespace,string,entry,get,value,is,abstract,equals,val,else,if,equals,property,scope,string,utils,trim,whitespace,string,entry,get,value,else,if,equals,property,string,val,string,utils,trim,whitespace,string,entry,get,value,scope,equals,val,equals,val,generic,bean,definition,generic,bean,definition,else,if,equals,property,string,val,string,utils,trim,whitespace,string,entry,get,value,lazy,init,equals,val,else,if,property,starts,with,if,property,ends,with,int,index,integer,parse,int,property,substring,1,property,length,length,cas,add,indexed,argument,value,index,new,runtime,bean,reference,entry,get,value,to,string,else,int,index,integer,parse,int,property,substring,1,cas,add,indexed,argument,value,index,read,value,entry,else,if,property,ends,with,property,property,substring,0,property,length,length,string,ref,string,utils,trim,whitespace,string,entry,get,value,object,val,new,runtime,bean,reference,ref,pvs,add,property,val,else,pvs,add,property,read,value,entry,if,logger,is,debug,enabled,logger,debug,registering,bean,definition,for,bean,name,bean,name,with,pvs,if,parent,null,class,name,null,bean,name,equals,this,default,parent,bean,parent,this,default,parent,bean,try,abstract,bean,definition,bd,bean,definition,reader,utils,create,bean,definition,parent,class,name,get,bean,class,loader,bd,set,scope,scope,bd,set,abstract,is,abstract,bd,set,lazy,init,lazy,init,bd,set,constructor,argument,values,cas,bd,set,property,values,pvs,get,registry,register,bean,definition,bean,name,bd,catch,class,not,found,exception,ex,throw,new,cannot,load,bean,class,exception,resource,description,bean,name,class,name,ex,catch,linkage,error,err,throw,new,cannot,load,bean,class,exception,resource,description,bean,name,class,name,err
PropertiesBeanDefinitionReader -> protected void registerBeanDefinition(String beanName, Map<?, ?> map, String prefix, String resourceDescription) 			throws BeansException;1518167602;Get all property values, given a prefix (which will be stripped)_and add the bean they define to the factory with the given name_@param beanName name of the bean to define_@param map Map containing string pairs_@param prefix prefix of each entry, which will be stripped_@param resourceDescription description of the resource that the_Map came from (for logging purposes)_@throws BeansException if the bean definition could not be parsed or registered;protected void registerBeanDefinition(String beanName, Map<?, ?> map, String prefix, String resourceDescription)_			throws BeansException {__		String className = null__		String parent = null__		String scope = GenericBeanDefinition.SCOPE_SINGLETON__		boolean isAbstract = false__		boolean lazyInit = false___		ConstructorArgumentValues cas = new ConstructorArgumentValues()__		MutablePropertyValues pvs = new MutablePropertyValues()___		for (Map.Entry<?, ?> entry : map.entrySet()) {_			String key = StringUtils.trimWhitespace((String) entry.getKey())__			if (key.startsWith(prefix + SEPARATOR)) {_				String property = key.substring(prefix.length() + SEPARATOR.length())__				if (CLASS_KEY.equals(property)) {_					className = StringUtils.trimWhitespace((String) entry.getValue())__				}_				else if (PARENT_KEY.equals(property)) {_					parent = StringUtils.trimWhitespace((String) entry.getValue())__				}_				else if (ABSTRACT_KEY.equals(property)) {_					String val = StringUtils.trimWhitespace((String) entry.getValue())__					isAbstract = TRUE_VALUE.equals(val)__				}_				else if (SCOPE_KEY.equals(property)) {_					_					scope = StringUtils.trimWhitespace((String) entry.getValue())__				}_				else if (SINGLETON_KEY.equals(property)) {_					_					String val = StringUtils.trimWhitespace((String) entry.getValue())__					scope = ("".equals(val) || TRUE_VALUE.equals(val) ? GenericBeanDefinition.SCOPE_SINGLETON :_							GenericBeanDefinition.SCOPE_PROTOTYPE)__				}_				else if (LAZY_INIT_KEY.equals(property)) {_					String val = StringUtils.trimWhitespace((String) entry.getValue())__					lazyInit = TRUE_VALUE.equals(val)__				}_				else if (property.startsWith(CONSTRUCTOR_ARG_PREFIX)) {_					if (property.endsWith(REF_SUFFIX)) {_						int index = Integer.parseInt(property.substring(1, property.length() - REF_SUFFIX.length()))__						cas.addIndexedArgumentValue(index, new RuntimeBeanReference(entry.getValue().toString()))__					}_					else {_						int index = Integer.parseInt(property.substring(1))__						cas.addIndexedArgumentValue(index, readValue(entry))__					}_				}_				else if (property.endsWith(REF_SUFFIX)) {_					_					_					property = property.substring(0, property.length() - REF_SUFFIX.length())__					String ref = StringUtils.trimWhitespace((String) entry.getValue())___					_					_					Object val = new RuntimeBeanReference(ref)__					pvs.add(property, val)__				}_				else {_					_					pvs.add(property, readValue(entry))__				}_			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug("Registering bean definition for bean name '" + beanName + "' with " + pvs)__		}__		_		_		_		if (parent == null && className == null && !beanName.equals(this.defaultParentBean)) {_			parent = this.defaultParentBean__		}__		try {_			AbstractBeanDefinition bd = BeanDefinitionReaderUtils.createBeanDefinition(_					parent, className, getBeanClassLoader())__			bd.setScope(scope)__			bd.setAbstract(isAbstract)__			bd.setLazyInit(lazyInit)__			bd.setConstructorArgumentValues(cas)__			bd.setPropertyValues(pvs)__			getRegistry().registerBeanDefinition(beanName, bd)__		}_		catch (ClassNotFoundException ex) {_			throw new CannotLoadBeanClassException(resourceDescription, beanName, className, ex)__		}_		catch (LinkageError err) {_			throw new CannotLoadBeanClassException(resourceDescription, beanName, className, err)__		}_	};get,all,property,values,given,a,prefix,which,will,be,stripped,and,add,the,bean,they,define,to,the,factory,with,the,given,name,param,bean,name,name,of,the,bean,to,define,param,map,map,containing,string,pairs,param,prefix,prefix,of,each,entry,which,will,be,stripped,param,resource,description,description,of,the,resource,that,the,map,came,from,for,logging,purposes,throws,beans,exception,if,the,bean,definition,could,not,be,parsed,or,registered;protected,void,register,bean,definition,string,bean,name,map,map,string,prefix,string,resource,description,throws,beans,exception,string,class,name,null,string,parent,null,string,scope,generic,bean,definition,boolean,is,abstract,false,boolean,lazy,init,false,constructor,argument,values,cas,new,constructor,argument,values,mutable,property,values,pvs,new,mutable,property,values,for,map,entry,entry,map,entry,set,string,key,string,utils,trim,whitespace,string,entry,get,key,if,key,starts,with,prefix,separator,string,property,key,substring,prefix,length,separator,length,if,equals,property,class,name,string,utils,trim,whitespace,string,entry,get,value,else,if,equals,property,parent,string,utils,trim,whitespace,string,entry,get,value,else,if,equals,property,string,val,string,utils,trim,whitespace,string,entry,get,value,is,abstract,equals,val,else,if,equals,property,scope,string,utils,trim,whitespace,string,entry,get,value,else,if,equals,property,string,val,string,utils,trim,whitespace,string,entry,get,value,scope,equals,val,equals,val,generic,bean,definition,generic,bean,definition,else,if,equals,property,string,val,string,utils,trim,whitespace,string,entry,get,value,lazy,init,equals,val,else,if,property,starts,with,if,property,ends,with,int,index,integer,parse,int,property,substring,1,property,length,length,cas,add,indexed,argument,value,index,new,runtime,bean,reference,entry,get,value,to,string,else,int,index,integer,parse,int,property,substring,1,cas,add,indexed,argument,value,index,read,value,entry,else,if,property,ends,with,property,property,substring,0,property,length,length,string,ref,string,utils,trim,whitespace,string,entry,get,value,object,val,new,runtime,bean,reference,ref,pvs,add,property,val,else,pvs,add,property,read,value,entry,if,logger,is,debug,enabled,logger,debug,registering,bean,definition,for,bean,name,bean,name,with,pvs,if,parent,null,class,name,null,bean,name,equals,this,default,parent,bean,parent,this,default,parent,bean,try,abstract,bean,definition,bd,bean,definition,reader,utils,create,bean,definition,parent,class,name,get,bean,class,loader,bd,set,scope,scope,bd,set,abstract,is,abstract,bd,set,lazy,init,lazy,init,bd,set,constructor,argument,values,cas,bd,set,property,values,pvs,get,registry,register,bean,definition,bean,name,bd,catch,class,not,found,exception,ex,throw,new,cannot,load,bean,class,exception,resource,description,bean,name,class,name,ex,catch,linkage,error,err,throw,new,cannot,load,bean,class,exception,resource,description,bean,name,class,name,err
PropertiesBeanDefinitionReader -> protected void registerBeanDefinition(String beanName, Map<?, ?> map, String prefix, String resourceDescription) 			throws BeansException;1518167818;Get all property values, given a prefix (which will be stripped)_and add the bean they define to the factory with the given name_@param beanName name of the bean to define_@param map Map containing string pairs_@param prefix prefix of each entry, which will be stripped_@param resourceDescription description of the resource that the_Map came from (for logging purposes)_@throws BeansException if the bean definition could not be parsed or registered;protected void registerBeanDefinition(String beanName, Map<?, ?> map, String prefix, String resourceDescription)_			throws BeansException {__		String className = null__		String parent = null__		String scope = GenericBeanDefinition.SCOPE_SINGLETON__		boolean isAbstract = false__		boolean lazyInit = false___		ConstructorArgumentValues cas = new ConstructorArgumentValues()__		MutablePropertyValues pvs = new MutablePropertyValues()___		for (Map.Entry<?, ?> entry : map.entrySet()) {_			String key = StringUtils.trimWhitespace((String) entry.getKey())__			if (key.startsWith(prefix + SEPARATOR)) {_				String property = key.substring(prefix.length() + SEPARATOR.length())__				if (CLASS_KEY.equals(property)) {_					className = StringUtils.trimWhitespace((String) entry.getValue())__				}_				else if (PARENT_KEY.equals(property)) {_					parent = StringUtils.trimWhitespace((String) entry.getValue())__				}_				else if (ABSTRACT_KEY.equals(property)) {_					String val = StringUtils.trimWhitespace((String) entry.getValue())__					isAbstract = TRUE_VALUE.equals(val)__				}_				else if (SCOPE_KEY.equals(property)) {_					_					scope = StringUtils.trimWhitespace((String) entry.getValue())__				}_				else if (SINGLETON_KEY.equals(property)) {_					_					String val = StringUtils.trimWhitespace((String) entry.getValue())__					scope = ("".equals(val) || TRUE_VALUE.equals(val) ? GenericBeanDefinition.SCOPE_SINGLETON :_							GenericBeanDefinition.SCOPE_PROTOTYPE)__				}_				else if (LAZY_INIT_KEY.equals(property)) {_					String val = StringUtils.trimWhitespace((String) entry.getValue())__					lazyInit = TRUE_VALUE.equals(val)__				}_				else if (property.startsWith(CONSTRUCTOR_ARG_PREFIX)) {_					if (property.endsWith(REF_SUFFIX)) {_						int index = Integer.parseInt(property.substring(1, property.length() - REF_SUFFIX.length()))__						cas.addIndexedArgumentValue(index, new RuntimeBeanReference(entry.getValue().toString()))__					}_					else {_						int index = Integer.parseInt(property.substring(1))__						cas.addIndexedArgumentValue(index, readValue(entry))__					}_				}_				else if (property.endsWith(REF_SUFFIX)) {_					_					_					property = property.substring(0, property.length() - REF_SUFFIX.length())__					String ref = StringUtils.trimWhitespace((String) entry.getValue())___					_					_					Object val = new RuntimeBeanReference(ref)__					pvs.add(property, val)__				}_				else {_					_					pvs.add(property, readValue(entry))__				}_			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug("Registering bean definition for bean name '" + beanName + "' with " + pvs)__		}__		_		_		_		if (parent == null && className == null && !beanName.equals(this.defaultParentBean)) {_			parent = this.defaultParentBean__		}__		try {_			AbstractBeanDefinition bd = BeanDefinitionReaderUtils.createBeanDefinition(_					parent, className, getBeanClassLoader())__			bd.setScope(scope)__			bd.setAbstract(isAbstract)__			bd.setLazyInit(lazyInit)__			bd.setConstructorArgumentValues(cas)__			bd.setPropertyValues(pvs)__			getRegistry().registerBeanDefinition(beanName, bd)__		}_		catch (ClassNotFoundException ex) {_			throw new CannotLoadBeanClassException(resourceDescription, beanName, className, ex)__		}_		catch (LinkageError err) {_			throw new CannotLoadBeanClassException(resourceDescription, beanName, className, err)__		}_	};get,all,property,values,given,a,prefix,which,will,be,stripped,and,add,the,bean,they,define,to,the,factory,with,the,given,name,param,bean,name,name,of,the,bean,to,define,param,map,map,containing,string,pairs,param,prefix,prefix,of,each,entry,which,will,be,stripped,param,resource,description,description,of,the,resource,that,the,map,came,from,for,logging,purposes,throws,beans,exception,if,the,bean,definition,could,not,be,parsed,or,registered;protected,void,register,bean,definition,string,bean,name,map,map,string,prefix,string,resource,description,throws,beans,exception,string,class,name,null,string,parent,null,string,scope,generic,bean,definition,boolean,is,abstract,false,boolean,lazy,init,false,constructor,argument,values,cas,new,constructor,argument,values,mutable,property,values,pvs,new,mutable,property,values,for,map,entry,entry,map,entry,set,string,key,string,utils,trim,whitespace,string,entry,get,key,if,key,starts,with,prefix,separator,string,property,key,substring,prefix,length,separator,length,if,equals,property,class,name,string,utils,trim,whitespace,string,entry,get,value,else,if,equals,property,parent,string,utils,trim,whitespace,string,entry,get,value,else,if,equals,property,string,val,string,utils,trim,whitespace,string,entry,get,value,is,abstract,equals,val,else,if,equals,property,scope,string,utils,trim,whitespace,string,entry,get,value,else,if,equals,property,string,val,string,utils,trim,whitespace,string,entry,get,value,scope,equals,val,equals,val,generic,bean,definition,generic,bean,definition,else,if,equals,property,string,val,string,utils,trim,whitespace,string,entry,get,value,lazy,init,equals,val,else,if,property,starts,with,if,property,ends,with,int,index,integer,parse,int,property,substring,1,property,length,length,cas,add,indexed,argument,value,index,new,runtime,bean,reference,entry,get,value,to,string,else,int,index,integer,parse,int,property,substring,1,cas,add,indexed,argument,value,index,read,value,entry,else,if,property,ends,with,property,property,substring,0,property,length,length,string,ref,string,utils,trim,whitespace,string,entry,get,value,object,val,new,runtime,bean,reference,ref,pvs,add,property,val,else,pvs,add,property,read,value,entry,if,logger,is,debug,enabled,logger,debug,registering,bean,definition,for,bean,name,bean,name,with,pvs,if,parent,null,class,name,null,bean,name,equals,this,default,parent,bean,parent,this,default,parent,bean,try,abstract,bean,definition,bd,bean,definition,reader,utils,create,bean,definition,parent,class,name,get,bean,class,loader,bd,set,scope,scope,bd,set,abstract,is,abstract,bd,set,lazy,init,lazy,init,bd,set,constructor,argument,values,cas,bd,set,property,values,pvs,get,registry,register,bean,definition,bean,name,bd,catch,class,not,found,exception,ex,throw,new,cannot,load,bean,class,exception,resource,description,bean,name,class,name,ex,catch,linkage,error,err,throw,new,cannot,load,bean,class,exception,resource,description,bean,name,class,name,err
PropertiesBeanDefinitionReader -> protected void registerBeanDefinition(String beanName, Map<?, ?> map, String prefix, String resourceDescription) 			throws BeansException;1530174524;Get all property values, given a prefix (which will be stripped)_and add the bean they define to the factory with the given name._@param beanName name of the bean to define_@param map a Map containing string pairs_@param prefix prefix of each entry, which will be stripped_@param resourceDescription description of the resource that the_Map came from (for logging purposes)_@throws BeansException if the bean definition could not be parsed or registered;protected void registerBeanDefinition(String beanName, Map<?, ?> map, String prefix, String resourceDescription)_			throws BeansException {__		String className = null__		String parent = null__		String scope = GenericBeanDefinition.SCOPE_SINGLETON__		boolean isAbstract = false__		boolean lazyInit = false___		ConstructorArgumentValues cas = new ConstructorArgumentValues()__		MutablePropertyValues pvs = new MutablePropertyValues()___		for (Map.Entry<?, ?> entry : map.entrySet()) {_			String key = StringUtils.trimWhitespace((String) entry.getKey())__			if (key.startsWith(prefix + SEPARATOR)) {_				String property = key.substring(prefix.length() + SEPARATOR.length())__				if (CLASS_KEY.equals(property)) {_					className = StringUtils.trimWhitespace((String) entry.getValue())__				}_				else if (PARENT_KEY.equals(property)) {_					parent = StringUtils.trimWhitespace((String) entry.getValue())__				}_				else if (ABSTRACT_KEY.equals(property)) {_					String val = StringUtils.trimWhitespace((String) entry.getValue())__					isAbstract = TRUE_VALUE.equals(val)__				}_				else if (SCOPE_KEY.equals(property)) {_					_					scope = StringUtils.trimWhitespace((String) entry.getValue())__				}_				else if (SINGLETON_KEY.equals(property)) {_					_					String val = StringUtils.trimWhitespace((String) entry.getValue())__					scope = ("".equals(val) || TRUE_VALUE.equals(val) ? GenericBeanDefinition.SCOPE_SINGLETON :_							GenericBeanDefinition.SCOPE_PROTOTYPE)__				}_				else if (LAZY_INIT_KEY.equals(property)) {_					String val = StringUtils.trimWhitespace((String) entry.getValue())__					lazyInit = TRUE_VALUE.equals(val)__				}_				else if (property.startsWith(CONSTRUCTOR_ARG_PREFIX)) {_					if (property.endsWith(REF_SUFFIX)) {_						int index = Integer.parseInt(property.substring(1, property.length() - REF_SUFFIX.length()))__						cas.addIndexedArgumentValue(index, new RuntimeBeanReference(entry.getValue().toString()))__					}_					else {_						int index = Integer.parseInt(property.substring(1))__						cas.addIndexedArgumentValue(index, readValue(entry))__					}_				}_				else if (property.endsWith(REF_SUFFIX)) {_					_					_					property = property.substring(0, property.length() - REF_SUFFIX.length())__					String ref = StringUtils.trimWhitespace((String) entry.getValue())___					_					_					Object val = new RuntimeBeanReference(ref)__					pvs.add(property, val)__				}_				else {_					_					pvs.add(property, readValue(entry))__				}_			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug("Registering bean definition for bean name '" + beanName + "' with " + pvs)__		}__		_		_		_		if (parent == null && className == null && !beanName.equals(this.defaultParentBean)) {_			parent = this.defaultParentBean__		}__		try {_			AbstractBeanDefinition bd = BeanDefinitionReaderUtils.createBeanDefinition(_					parent, className, getBeanClassLoader())__			bd.setScope(scope)__			bd.setAbstract(isAbstract)__			bd.setLazyInit(lazyInit)__			bd.setConstructorArgumentValues(cas)__			bd.setPropertyValues(pvs)__			getRegistry().registerBeanDefinition(beanName, bd)__		}_		catch (ClassNotFoundException ex) {_			throw new CannotLoadBeanClassException(resourceDescription, beanName, className, ex)__		}_		catch (LinkageError err) {_			throw new CannotLoadBeanClassException(resourceDescription, beanName, className, err)__		}_	};get,all,property,values,given,a,prefix,which,will,be,stripped,and,add,the,bean,they,define,to,the,factory,with,the,given,name,param,bean,name,name,of,the,bean,to,define,param,map,a,map,containing,string,pairs,param,prefix,prefix,of,each,entry,which,will,be,stripped,param,resource,description,description,of,the,resource,that,the,map,came,from,for,logging,purposes,throws,beans,exception,if,the,bean,definition,could,not,be,parsed,or,registered;protected,void,register,bean,definition,string,bean,name,map,map,string,prefix,string,resource,description,throws,beans,exception,string,class,name,null,string,parent,null,string,scope,generic,bean,definition,boolean,is,abstract,false,boolean,lazy,init,false,constructor,argument,values,cas,new,constructor,argument,values,mutable,property,values,pvs,new,mutable,property,values,for,map,entry,entry,map,entry,set,string,key,string,utils,trim,whitespace,string,entry,get,key,if,key,starts,with,prefix,separator,string,property,key,substring,prefix,length,separator,length,if,equals,property,class,name,string,utils,trim,whitespace,string,entry,get,value,else,if,equals,property,parent,string,utils,trim,whitespace,string,entry,get,value,else,if,equals,property,string,val,string,utils,trim,whitespace,string,entry,get,value,is,abstract,equals,val,else,if,equals,property,scope,string,utils,trim,whitespace,string,entry,get,value,else,if,equals,property,string,val,string,utils,trim,whitespace,string,entry,get,value,scope,equals,val,equals,val,generic,bean,definition,generic,bean,definition,else,if,equals,property,string,val,string,utils,trim,whitespace,string,entry,get,value,lazy,init,equals,val,else,if,property,starts,with,if,property,ends,with,int,index,integer,parse,int,property,substring,1,property,length,length,cas,add,indexed,argument,value,index,new,runtime,bean,reference,entry,get,value,to,string,else,int,index,integer,parse,int,property,substring,1,cas,add,indexed,argument,value,index,read,value,entry,else,if,property,ends,with,property,property,substring,0,property,length,length,string,ref,string,utils,trim,whitespace,string,entry,get,value,object,val,new,runtime,bean,reference,ref,pvs,add,property,val,else,pvs,add,property,read,value,entry,if,logger,is,debug,enabled,logger,debug,registering,bean,definition,for,bean,name,bean,name,with,pvs,if,parent,null,class,name,null,bean,name,equals,this,default,parent,bean,parent,this,default,parent,bean,try,abstract,bean,definition,bd,bean,definition,reader,utils,create,bean,definition,parent,class,name,get,bean,class,loader,bd,set,scope,scope,bd,set,abstract,is,abstract,bd,set,lazy,init,lazy,init,bd,set,constructor,argument,values,cas,bd,set,property,values,pvs,get,registry,register,bean,definition,bean,name,bd,catch,class,not,found,exception,ex,throw,new,cannot,load,bean,class,exception,resource,description,bean,name,class,name,ex,catch,linkage,error,err,throw,new,cannot,load,bean,class,exception,resource,description,bean,name,class,name,err
PropertiesBeanDefinitionReader -> protected void registerBeanDefinition(String beanName, Map<?, ?> map, String prefix, String resourceDescription) 			throws BeansException;1532706365;Get all property values, given a prefix (which will be stripped)_and add the bean they define to the factory with the given name._@param beanName name of the bean to define_@param map a Map containing string pairs_@param prefix prefix of each entry, which will be stripped_@param resourceDescription description of the resource that the_Map came from (for logging purposes)_@throws BeansException if the bean definition could not be parsed or registered;protected void registerBeanDefinition(String beanName, Map<?, ?> map, String prefix, String resourceDescription)_			throws BeansException {__		String className = null__		String parent = null__		String scope = GenericBeanDefinition.SCOPE_SINGLETON__		boolean isAbstract = false__		boolean lazyInit = false___		ConstructorArgumentValues cas = new ConstructorArgumentValues()__		MutablePropertyValues pvs = new MutablePropertyValues()___		for (Map.Entry<?, ?> entry : map.entrySet()) {_			String key = StringUtils.trimWhitespace((String) entry.getKey())__			if (key.startsWith(prefix + SEPARATOR)) {_				String property = key.substring(prefix.length() + SEPARATOR.length())__				if (CLASS_KEY.equals(property)) {_					className = StringUtils.trimWhitespace((String) entry.getValue())__				}_				else if (PARENT_KEY.equals(property)) {_					parent = StringUtils.trimWhitespace((String) entry.getValue())__				}_				else if (ABSTRACT_KEY.equals(property)) {_					String val = StringUtils.trimWhitespace((String) entry.getValue())__					isAbstract = TRUE_VALUE.equals(val)__				}_				else if (SCOPE_KEY.equals(property)) {_					_					scope = StringUtils.trimWhitespace((String) entry.getValue())__				}_				else if (SINGLETON_KEY.equals(property)) {_					_					String val = StringUtils.trimWhitespace((String) entry.getValue())__					scope = ("".equals(val) || TRUE_VALUE.equals(val) ? GenericBeanDefinition.SCOPE_SINGLETON :_							GenericBeanDefinition.SCOPE_PROTOTYPE)__				}_				else if (LAZY_INIT_KEY.equals(property)) {_					String val = StringUtils.trimWhitespace((String) entry.getValue())__					lazyInit = TRUE_VALUE.equals(val)__				}_				else if (property.startsWith(CONSTRUCTOR_ARG_PREFIX)) {_					if (property.endsWith(REF_SUFFIX)) {_						int index = Integer.parseInt(property.substring(1, property.length() - REF_SUFFIX.length()))__						cas.addIndexedArgumentValue(index, new RuntimeBeanReference(entry.getValue().toString()))__					}_					else {_						int index = Integer.parseInt(property.substring(1))__						cas.addIndexedArgumentValue(index, readValue(entry))__					}_				}_				else if (property.endsWith(REF_SUFFIX)) {_					_					_					property = property.substring(0, property.length() - REF_SUFFIX.length())__					String ref = StringUtils.trimWhitespace((String) entry.getValue())___					_					_					Object val = new RuntimeBeanReference(ref)__					pvs.add(property, val)__				}_				else {_					_					pvs.add(property, readValue(entry))__				}_			}_		}__		if (logger.isTraceEnabled()) {_			logger.trace("Registering bean definition for bean name '" + beanName + "' with " + pvs)__		}__		_		_		_		if (parent == null && className == null && !beanName.equals(this.defaultParentBean)) {_			parent = this.defaultParentBean__		}__		try {_			AbstractBeanDefinition bd = BeanDefinitionReaderUtils.createBeanDefinition(_					parent, className, getBeanClassLoader())__			bd.setScope(scope)__			bd.setAbstract(isAbstract)__			bd.setLazyInit(lazyInit)__			bd.setConstructorArgumentValues(cas)__			bd.setPropertyValues(pvs)__			getRegistry().registerBeanDefinition(beanName, bd)__		}_		catch (ClassNotFoundException ex) {_			throw new CannotLoadBeanClassException(resourceDescription, beanName, className, ex)__		}_		catch (LinkageError err) {_			throw new CannotLoadBeanClassException(resourceDescription, beanName, className, err)__		}_	};get,all,property,values,given,a,prefix,which,will,be,stripped,and,add,the,bean,they,define,to,the,factory,with,the,given,name,param,bean,name,name,of,the,bean,to,define,param,map,a,map,containing,string,pairs,param,prefix,prefix,of,each,entry,which,will,be,stripped,param,resource,description,description,of,the,resource,that,the,map,came,from,for,logging,purposes,throws,beans,exception,if,the,bean,definition,could,not,be,parsed,or,registered;protected,void,register,bean,definition,string,bean,name,map,map,string,prefix,string,resource,description,throws,beans,exception,string,class,name,null,string,parent,null,string,scope,generic,bean,definition,boolean,is,abstract,false,boolean,lazy,init,false,constructor,argument,values,cas,new,constructor,argument,values,mutable,property,values,pvs,new,mutable,property,values,for,map,entry,entry,map,entry,set,string,key,string,utils,trim,whitespace,string,entry,get,key,if,key,starts,with,prefix,separator,string,property,key,substring,prefix,length,separator,length,if,equals,property,class,name,string,utils,trim,whitespace,string,entry,get,value,else,if,equals,property,parent,string,utils,trim,whitespace,string,entry,get,value,else,if,equals,property,string,val,string,utils,trim,whitespace,string,entry,get,value,is,abstract,equals,val,else,if,equals,property,scope,string,utils,trim,whitespace,string,entry,get,value,else,if,equals,property,string,val,string,utils,trim,whitespace,string,entry,get,value,scope,equals,val,equals,val,generic,bean,definition,generic,bean,definition,else,if,equals,property,string,val,string,utils,trim,whitespace,string,entry,get,value,lazy,init,equals,val,else,if,property,starts,with,if,property,ends,with,int,index,integer,parse,int,property,substring,1,property,length,length,cas,add,indexed,argument,value,index,new,runtime,bean,reference,entry,get,value,to,string,else,int,index,integer,parse,int,property,substring,1,cas,add,indexed,argument,value,index,read,value,entry,else,if,property,ends,with,property,property,substring,0,property,length,length,string,ref,string,utils,trim,whitespace,string,entry,get,value,object,val,new,runtime,bean,reference,ref,pvs,add,property,val,else,pvs,add,property,read,value,entry,if,logger,is,trace,enabled,logger,trace,registering,bean,definition,for,bean,name,bean,name,with,pvs,if,parent,null,class,name,null,bean,name,equals,this,default,parent,bean,parent,this,default,parent,bean,try,abstract,bean,definition,bd,bean,definition,reader,utils,create,bean,definition,parent,class,name,get,bean,class,loader,bd,set,scope,scope,bd,set,abstract,is,abstract,bd,set,lazy,init,lazy,init,bd,set,constructor,argument,values,cas,bd,set,property,values,pvs,get,registry,register,bean,definition,bean,name,bd,catch,class,not,found,exception,ex,throw,new,cannot,load,bean,class,exception,resource,description,bean,name,class,name,ex,catch,linkage,error,err,throw,new,cannot,load,bean,class,exception,resource,description,bean,name,class,name,err
PropertiesBeanDefinitionReader -> protected void registerBeanDefinition(String beanName, Map<?, ?> map, String prefix, String resourceDescription) 			throws BeansException;1538724083;Get all property values, given a prefix (which will be stripped)_and add the bean they define to the factory with the given name._@param beanName name of the bean to define_@param map a Map containing string pairs_@param prefix prefix of each entry, which will be stripped_@param resourceDescription description of the resource that the_Map came from (for logging purposes)_@throws BeansException if the bean definition could not be parsed or registered;protected void registerBeanDefinition(String beanName, Map<?, ?> map, String prefix, String resourceDescription)_			throws BeansException {__		String className = null__		String parent = null__		String scope = GenericBeanDefinition.SCOPE_SINGLETON__		boolean isAbstract = false__		boolean lazyInit = false___		ConstructorArgumentValues cas = new ConstructorArgumentValues()__		MutablePropertyValues pvs = new MutablePropertyValues()___		for (Map.Entry<?, ?> entry : map.entrySet()) {_			String key = StringUtils.trimWhitespace((String) entry.getKey())__			if (key.startsWith(prefix + SEPARATOR)) {_				String property = key.substring(prefix.length() + SEPARATOR.length())__				if (CLASS_KEY.equals(property)) {_					className = StringUtils.trimWhitespace((String) entry.getValue())__				}_				else if (PARENT_KEY.equals(property)) {_					parent = StringUtils.trimWhitespace((String) entry.getValue())__				}_				else if (ABSTRACT_KEY.equals(property)) {_					String val = StringUtils.trimWhitespace((String) entry.getValue())__					isAbstract = TRUE_VALUE.equals(val)__				}_				else if (SCOPE_KEY.equals(property)) {_					_					scope = StringUtils.trimWhitespace((String) entry.getValue())__				}_				else if (SINGLETON_KEY.equals(property)) {_					_					String val = StringUtils.trimWhitespace((String) entry.getValue())__					scope = ("".equals(val) || TRUE_VALUE.equals(val) ? GenericBeanDefinition.SCOPE_SINGLETON :_							GenericBeanDefinition.SCOPE_PROTOTYPE)__				}_				else if (LAZY_INIT_KEY.equals(property)) {_					String val = StringUtils.trimWhitespace((String) entry.getValue())__					lazyInit = TRUE_VALUE.equals(val)__				}_				else if (property.startsWith(CONSTRUCTOR_ARG_PREFIX)) {_					if (property.endsWith(REF_SUFFIX)) {_						int index = Integer.parseInt(property.substring(1, property.length() - REF_SUFFIX.length()))__						cas.addIndexedArgumentValue(index, new RuntimeBeanReference(entry.getValue().toString()))__					}_					else {_						int index = Integer.parseInt(property.substring(1))__						cas.addIndexedArgumentValue(index, readValue(entry))__					}_				}_				else if (property.endsWith(REF_SUFFIX)) {_					_					_					property = property.substring(0, property.length() - REF_SUFFIX.length())__					String ref = StringUtils.trimWhitespace((String) entry.getValue())___					_					_					Object val = new RuntimeBeanReference(ref)__					pvs.add(property, val)__				}_				else {_					_					pvs.add(property, readValue(entry))__				}_			}_		}__		if (logger.isTraceEnabled()) {_			logger.trace("Registering bean definition for bean name '" + beanName + "' with " + pvs)__		}__		_		_		_		if (parent == null && className == null && !beanName.equals(this.defaultParentBean)) {_			parent = this.defaultParentBean__		}__		try {_			AbstractBeanDefinition bd = BeanDefinitionReaderUtils.createBeanDefinition(_					parent, className, getBeanClassLoader())__			bd.setScope(scope)__			bd.setAbstract(isAbstract)__			bd.setLazyInit(lazyInit)__			bd.setConstructorArgumentValues(cas)__			bd.setPropertyValues(pvs)__			getRegistry().registerBeanDefinition(beanName, bd)__		}_		catch (ClassNotFoundException ex) {_			throw new CannotLoadBeanClassException(resourceDescription, beanName, className, ex)__		}_		catch (LinkageError err) {_			throw new CannotLoadBeanClassException(resourceDescription, beanName, className, err)__		}_	};get,all,property,values,given,a,prefix,which,will,be,stripped,and,add,the,bean,they,define,to,the,factory,with,the,given,name,param,bean,name,name,of,the,bean,to,define,param,map,a,map,containing,string,pairs,param,prefix,prefix,of,each,entry,which,will,be,stripped,param,resource,description,description,of,the,resource,that,the,map,came,from,for,logging,purposes,throws,beans,exception,if,the,bean,definition,could,not,be,parsed,or,registered;protected,void,register,bean,definition,string,bean,name,map,map,string,prefix,string,resource,description,throws,beans,exception,string,class,name,null,string,parent,null,string,scope,generic,bean,definition,boolean,is,abstract,false,boolean,lazy,init,false,constructor,argument,values,cas,new,constructor,argument,values,mutable,property,values,pvs,new,mutable,property,values,for,map,entry,entry,map,entry,set,string,key,string,utils,trim,whitespace,string,entry,get,key,if,key,starts,with,prefix,separator,string,property,key,substring,prefix,length,separator,length,if,equals,property,class,name,string,utils,trim,whitespace,string,entry,get,value,else,if,equals,property,parent,string,utils,trim,whitespace,string,entry,get,value,else,if,equals,property,string,val,string,utils,trim,whitespace,string,entry,get,value,is,abstract,equals,val,else,if,equals,property,scope,string,utils,trim,whitespace,string,entry,get,value,else,if,equals,property,string,val,string,utils,trim,whitespace,string,entry,get,value,scope,equals,val,equals,val,generic,bean,definition,generic,bean,definition,else,if,equals,property,string,val,string,utils,trim,whitespace,string,entry,get,value,lazy,init,equals,val,else,if,property,starts,with,if,property,ends,with,int,index,integer,parse,int,property,substring,1,property,length,length,cas,add,indexed,argument,value,index,new,runtime,bean,reference,entry,get,value,to,string,else,int,index,integer,parse,int,property,substring,1,cas,add,indexed,argument,value,index,read,value,entry,else,if,property,ends,with,property,property,substring,0,property,length,length,string,ref,string,utils,trim,whitespace,string,entry,get,value,object,val,new,runtime,bean,reference,ref,pvs,add,property,val,else,pvs,add,property,read,value,entry,if,logger,is,trace,enabled,logger,trace,registering,bean,definition,for,bean,name,bean,name,with,pvs,if,parent,null,class,name,null,bean,name,equals,this,default,parent,bean,parent,this,default,parent,bean,try,abstract,bean,definition,bd,bean,definition,reader,utils,create,bean,definition,parent,class,name,get,bean,class,loader,bd,set,scope,scope,bd,set,abstract,is,abstract,bd,set,lazy,init,lazy,init,bd,set,constructor,argument,values,cas,bd,set,property,values,pvs,get,registry,register,bean,definition,bean,name,bd,catch,class,not,found,exception,ex,throw,new,cannot,load,bean,class,exception,resource,description,bean,name,class,name,ex,catch,linkage,error,err,throw,new,cannot,load,bean,class,exception,resource,description,bean,name,class,name,err
PropertiesBeanDefinitionReader -> public int registerBeanDefinitions(Map map, String prefix, String resourceDescription) 			throws BeansException;1328020251;Register bean definitions contained in a Map._Ignore ineligible properties._@param map Map name -> property (String or Object). Property values_will be strings if coming from a Properties file etc. Property names_(keys) <b>must</b> be strings. Class keys must be Strings._@param prefix a filter within the keys in the map: e.g. 'beans.'_(can be empty or <code>null</code>)_@param resourceDescription description of the resource that the_Map came from (for logging purposes)_@return the number of bean definitions found_@throws BeansException in case of loading or parsing errors_@see #registerBeanDefinitions(Map, String);public int registerBeanDefinitions(Map map, String prefix, String resourceDescription)_			throws BeansException {__		if (prefix == null) {_			prefix = ""__		}_		int beanCount = 0___		for (Object key : map.keySet()) {_			if (!(key instanceof String)) {_				throw new IllegalArgumentException("Illegal key [" + key + "]: only Strings allowed")__			}_			String keyString = (String) key__			if (keyString.startsWith(prefix)) {_				_				String nameAndProperty = keyString.substring(prefix.length())__				_				int sepIdx = -1__				int propKeyIdx = nameAndProperty.indexOf(PropertyAccessor.PROPERTY_KEY_PREFIX)__				if (propKeyIdx != -1) {_					sepIdx = nameAndProperty.lastIndexOf(SEPARATOR, propKeyIdx)__				}_				else {_					sepIdx = nameAndProperty.lastIndexOf(SEPARATOR)__				}_				if (sepIdx != -1) {_					String beanName = nameAndProperty.substring(0, sepIdx)__					if (logger.isDebugEnabled()) {_						logger.debug("Found bean name '" + beanName + "'")__					}_					if (!getRegistry().containsBeanDefinition(beanName)) {_						_						registerBeanDefinition(beanName, map, prefix + beanName, resourceDescription)__						++beanCount__					}_				}_				else {_					_					_					if (logger.isDebugEnabled()) {_						logger.debug("Invalid bean name and property [" + nameAndProperty + "]")__					}_				}_			}_		}__		return beanCount__	};register,bean,definitions,contained,in,a,map,ignore,ineligible,properties,param,map,map,name,property,string,or,object,property,values,will,be,strings,if,coming,from,a,properties,file,etc,property,names,keys,b,must,b,be,strings,class,keys,must,be,strings,param,prefix,a,filter,within,the,keys,in,the,map,e,g,beans,can,be,empty,or,code,null,code,param,resource,description,description,of,the,resource,that,the,map,came,from,for,logging,purposes,return,the,number,of,bean,definitions,found,throws,beans,exception,in,case,of,loading,or,parsing,errors,see,register,bean,definitions,map,string;public,int,register,bean,definitions,map,map,string,prefix,string,resource,description,throws,beans,exception,if,prefix,null,prefix,int,bean,count,0,for,object,key,map,key,set,if,key,instanceof,string,throw,new,illegal,argument,exception,illegal,key,key,only,strings,allowed,string,key,string,string,key,if,key,string,starts,with,prefix,string,name,and,property,key,string,substring,prefix,length,int,sep,idx,1,int,prop,key,idx,name,and,property,index,of,property,accessor,if,prop,key,idx,1,sep,idx,name,and,property,last,index,of,separator,prop,key,idx,else,sep,idx,name,and,property,last,index,of,separator,if,sep,idx,1,string,bean,name,name,and,property,substring,0,sep,idx,if,logger,is,debug,enabled,logger,debug,found,bean,name,bean,name,if,get,registry,contains,bean,definition,bean,name,register,bean,definition,bean,name,map,prefix,bean,name,resource,description,bean,count,else,if,logger,is,debug,enabled,logger,debug,invalid,bean,name,and,property,name,and,property,return,bean,count
PropertiesBeanDefinitionReader -> public int registerBeanDefinitions(Map map, String prefix, String resourceDescription) 			throws BeansException;1356735495;Register bean definitions contained in a Map._Ignore ineligible properties._@param map Map name -> property (String or Object). Property values_will be strings if coming from a Properties file etc. Property names_(keys) <b>must</b> be strings. Class keys must be Strings._@param prefix a filter within the keys in the map: e.g. 'beans.'_(can be empty or {@code null})_@param resourceDescription description of the resource that the_Map came from (for logging purposes)_@return the number of bean definitions found_@throws BeansException in case of loading or parsing errors_@see #registerBeanDefinitions(Map, String);public int registerBeanDefinitions(Map map, String prefix, String resourceDescription)_			throws BeansException {__		if (prefix == null) {_			prefix = ""__		}_		int beanCount = 0___		for (Object key : map.keySet()) {_			if (!(key instanceof String)) {_				throw new IllegalArgumentException("Illegal key [" + key + "]: only Strings allowed")__			}_			String keyString = (String) key__			if (keyString.startsWith(prefix)) {_				_				String nameAndProperty = keyString.substring(prefix.length())__				_				int sepIdx = -1__				int propKeyIdx = nameAndProperty.indexOf(PropertyAccessor.PROPERTY_KEY_PREFIX)__				if (propKeyIdx != -1) {_					sepIdx = nameAndProperty.lastIndexOf(SEPARATOR, propKeyIdx)__				}_				else {_					sepIdx = nameAndProperty.lastIndexOf(SEPARATOR)__				}_				if (sepIdx != -1) {_					String beanName = nameAndProperty.substring(0, sepIdx)__					if (logger.isDebugEnabled()) {_						logger.debug("Found bean name '" + beanName + "'")__					}_					if (!getRegistry().containsBeanDefinition(beanName)) {_						_						registerBeanDefinition(beanName, map, prefix + beanName, resourceDescription)__						++beanCount__					}_				}_				else {_					_					_					if (logger.isDebugEnabled()) {_						logger.debug("Invalid bean name and property [" + nameAndProperty + "]")__					}_				}_			}_		}__		return beanCount__	};register,bean,definitions,contained,in,a,map,ignore,ineligible,properties,param,map,map,name,property,string,or,object,property,values,will,be,strings,if,coming,from,a,properties,file,etc,property,names,keys,b,must,b,be,strings,class,keys,must,be,strings,param,prefix,a,filter,within,the,keys,in,the,map,e,g,beans,can,be,empty,or,code,null,param,resource,description,description,of,the,resource,that,the,map,came,from,for,logging,purposes,return,the,number,of,bean,definitions,found,throws,beans,exception,in,case,of,loading,or,parsing,errors,see,register,bean,definitions,map,string;public,int,register,bean,definitions,map,map,string,prefix,string,resource,description,throws,beans,exception,if,prefix,null,prefix,int,bean,count,0,for,object,key,map,key,set,if,key,instanceof,string,throw,new,illegal,argument,exception,illegal,key,key,only,strings,allowed,string,key,string,string,key,if,key,string,starts,with,prefix,string,name,and,property,key,string,substring,prefix,length,int,sep,idx,1,int,prop,key,idx,name,and,property,index,of,property,accessor,if,prop,key,idx,1,sep,idx,name,and,property,last,index,of,separator,prop,key,idx,else,sep,idx,name,and,property,last,index,of,separator,if,sep,idx,1,string,bean,name,name,and,property,substring,0,sep,idx,if,logger,is,debug,enabled,logger,debug,found,bean,name,bean,name,if,get,registry,contains,bean,definition,bean,name,register,bean,definition,bean,name,map,prefix,bean,name,resource,description,bean,count,else,if,logger,is,debug,enabled,logger,debug,invalid,bean,name,and,property,name,and,property,return,bean,count
PropertiesBeanDefinitionReader -> public int registerBeanDefinitions(Map map, String prefix, String resourceDescription) 			throws BeansException;1357119239;Register bean definitions contained in a Map._Ignore ineligible properties._@param map Map name -> property (String or Object). Property values_will be strings if coming from a Properties file etc. Property names_(keys) <b>must</b> be strings. Class keys must be Strings._@param prefix a filter within the keys in the map: e.g. 'beans.'_(can be empty or {@code null})_@param resourceDescription description of the resource that the_Map came from (for logging purposes)_@return the number of bean definitions found_@throws BeansException in case of loading or parsing errors_@see #registerBeanDefinitions(Map, String);public int registerBeanDefinitions(Map map, String prefix, String resourceDescription)_			throws BeansException {__		if (prefix == null) {_			prefix = ""__		}_		int beanCount = 0___		for (Object key : map.keySet()) {_			if (!(key instanceof String)) {_				throw new IllegalArgumentException("Illegal key [" + key + "]: only Strings allowed")__			}_			String keyString = (String) key__			if (keyString.startsWith(prefix)) {_				_				String nameAndProperty = keyString.substring(prefix.length())__				_				int sepIdx = -1__				int propKeyIdx = nameAndProperty.indexOf(PropertyAccessor.PROPERTY_KEY_PREFIX)__				if (propKeyIdx != -1) {_					sepIdx = nameAndProperty.lastIndexOf(SEPARATOR, propKeyIdx)__				}_				else {_					sepIdx = nameAndProperty.lastIndexOf(SEPARATOR)__				}_				if (sepIdx != -1) {_					String beanName = nameAndProperty.substring(0, sepIdx)__					if (logger.isDebugEnabled()) {_						logger.debug("Found bean name '" + beanName + "'")__					}_					if (!getRegistry().containsBeanDefinition(beanName)) {_						_						registerBeanDefinition(beanName, map, prefix + beanName, resourceDescription)__						++beanCount__					}_				}_				else {_					_					_					if (logger.isDebugEnabled()) {_						logger.debug("Invalid bean name and property [" + nameAndProperty + "]")__					}_				}_			}_		}__		return beanCount__	};register,bean,definitions,contained,in,a,map,ignore,ineligible,properties,param,map,map,name,property,string,or,object,property,values,will,be,strings,if,coming,from,a,properties,file,etc,property,names,keys,b,must,b,be,strings,class,keys,must,be,strings,param,prefix,a,filter,within,the,keys,in,the,map,e,g,beans,can,be,empty,or,code,null,param,resource,description,description,of,the,resource,that,the,map,came,from,for,logging,purposes,return,the,number,of,bean,definitions,found,throws,beans,exception,in,case,of,loading,or,parsing,errors,see,register,bean,definitions,map,string;public,int,register,bean,definitions,map,map,string,prefix,string,resource,description,throws,beans,exception,if,prefix,null,prefix,int,bean,count,0,for,object,key,map,key,set,if,key,instanceof,string,throw,new,illegal,argument,exception,illegal,key,key,only,strings,allowed,string,key,string,string,key,if,key,string,starts,with,prefix,string,name,and,property,key,string,substring,prefix,length,int,sep,idx,1,int,prop,key,idx,name,and,property,index,of,property,accessor,if,prop,key,idx,1,sep,idx,name,and,property,last,index,of,separator,prop,key,idx,else,sep,idx,name,and,property,last,index,of,separator,if,sep,idx,1,string,bean,name,name,and,property,substring,0,sep,idx,if,logger,is,debug,enabled,logger,debug,found,bean,name,bean,name,if,get,registry,contains,bean,definition,bean,name,register,bean,definition,bean,name,map,prefix,bean,name,resource,description,bean,count,else,if,logger,is,debug,enabled,logger,debug,invalid,bean,name,and,property,name,and,property,return,bean,count
PropertiesBeanDefinitionReader -> public int registerBeanDefinitions(Map map, String prefix, String resourceDescription) 			throws BeansException;1362408075;Register bean definitions contained in a Map._Ignore ineligible properties._@param map Map name -> property (String or Object). Property values_will be strings if coming from a Properties file etc. Property names_(keys) <b>must</b> be strings. Class keys must be Strings._@param prefix a filter within the keys in the map: e.g. 'beans.'_(can be empty or {@code null})_@param resourceDescription description of the resource that the_Map came from (for logging purposes)_@return the number of bean definitions found_@throws BeansException in case of loading or parsing errors_@see #registerBeanDefinitions(Map, String);public int registerBeanDefinitions(Map map, String prefix, String resourceDescription)_			throws BeansException {__		if (prefix == null) {_			prefix = ""__		}_		int beanCount = 0___		for (Object key : map.keySet()) {_			if (!(key instanceof String)) {_				throw new IllegalArgumentException("Illegal key [" + key + "]: only Strings allowed")__			}_			String keyString = (String) key__			if (keyString.startsWith(prefix)) {_				_				String nameAndProperty = keyString.substring(prefix.length())__				_				int sepIdx = -1__				int propKeyIdx = nameAndProperty.indexOf(PropertyAccessor.PROPERTY_KEY_PREFIX)__				if (propKeyIdx != -1) {_					sepIdx = nameAndProperty.lastIndexOf(SEPARATOR, propKeyIdx)__				}_				else {_					sepIdx = nameAndProperty.lastIndexOf(SEPARATOR)__				}_				if (sepIdx != -1) {_					String beanName = nameAndProperty.substring(0, sepIdx)__					if (logger.isDebugEnabled()) {_						logger.debug("Found bean name '" + beanName + "'")__					}_					if (!getRegistry().containsBeanDefinition(beanName)) {_						_						registerBeanDefinition(beanName, map, prefix + beanName, resourceDescription)__						++beanCount__					}_				}_				else {_					_					_					if (logger.isDebugEnabled()) {_						logger.debug("Invalid bean name and property [" + nameAndProperty + "]")__					}_				}_			}_		}__		return beanCount__	};register,bean,definitions,contained,in,a,map,ignore,ineligible,properties,param,map,map,name,property,string,or,object,property,values,will,be,strings,if,coming,from,a,properties,file,etc,property,names,keys,b,must,b,be,strings,class,keys,must,be,strings,param,prefix,a,filter,within,the,keys,in,the,map,e,g,beans,can,be,empty,or,code,null,param,resource,description,description,of,the,resource,that,the,map,came,from,for,logging,purposes,return,the,number,of,bean,definitions,found,throws,beans,exception,in,case,of,loading,or,parsing,errors,see,register,bean,definitions,map,string;public,int,register,bean,definitions,map,map,string,prefix,string,resource,description,throws,beans,exception,if,prefix,null,prefix,int,bean,count,0,for,object,key,map,key,set,if,key,instanceof,string,throw,new,illegal,argument,exception,illegal,key,key,only,strings,allowed,string,key,string,string,key,if,key,string,starts,with,prefix,string,name,and,property,key,string,substring,prefix,length,int,sep,idx,1,int,prop,key,idx,name,and,property,index,of,property,accessor,if,prop,key,idx,1,sep,idx,name,and,property,last,index,of,separator,prop,key,idx,else,sep,idx,name,and,property,last,index,of,separator,if,sep,idx,1,string,bean,name,name,and,property,substring,0,sep,idx,if,logger,is,debug,enabled,logger,debug,found,bean,name,bean,name,if,get,registry,contains,bean,definition,bean,name,register,bean,definition,bean,name,map,prefix,bean,name,resource,description,bean,count,else,if,logger,is,debug,enabled,logger,debug,invalid,bean,name,and,property,name,and,property,return,bean,count
PropertiesBeanDefinitionReader -> public int registerBeanDefinitions(Map map, String prefix, String resourceDescription) 			throws BeansException;1368482696;Register bean definitions contained in a Map._Ignore ineligible properties._@param map Map name -> property (String or Object). Property values_will be strings if coming from a Properties file etc. Property names_(keys) <b>must</b> be strings. Class keys must be Strings._@param prefix a filter within the keys in the map: e.g. 'beans.'_(can be empty or {@code null})_@param resourceDescription description of the resource that the_Map came from (for logging purposes)_@return the number of bean definitions found_@throws BeansException in case of loading or parsing errors_@see #registerBeanDefinitions(Map, String);public int registerBeanDefinitions(Map map, String prefix, String resourceDescription)_			throws BeansException {__		if (prefix == null) {_			prefix = ""__		}_		int beanCount = 0___		for (Object key : map.keySet()) {_			if (!(key instanceof String)) {_				throw new IllegalArgumentException("Illegal key [" + key + "]: only Strings allowed")__			}_			String keyString = (String) key__			if (keyString.startsWith(prefix)) {_				_				String nameAndProperty = keyString.substring(prefix.length())__				_				int sepIdx = -1__				int propKeyIdx = nameAndProperty.indexOf(PropertyAccessor.PROPERTY_KEY_PREFIX)__				if (propKeyIdx != -1) {_					sepIdx = nameAndProperty.lastIndexOf(SEPARATOR, propKeyIdx)__				}_				else {_					sepIdx = nameAndProperty.lastIndexOf(SEPARATOR)__				}_				if (sepIdx != -1) {_					String beanName = nameAndProperty.substring(0, sepIdx)__					if (logger.isDebugEnabled()) {_						logger.debug("Found bean name '" + beanName + "'")__					}_					if (!getRegistry().containsBeanDefinition(beanName)) {_						_						registerBeanDefinition(beanName, map, prefix + beanName, resourceDescription)__						++beanCount__					}_				}_				else {_					_					_					if (logger.isDebugEnabled()) {_						logger.debug("Invalid bean name and property [" + nameAndProperty + "]")__					}_				}_			}_		}__		return beanCount__	};register,bean,definitions,contained,in,a,map,ignore,ineligible,properties,param,map,map,name,property,string,or,object,property,values,will,be,strings,if,coming,from,a,properties,file,etc,property,names,keys,b,must,b,be,strings,class,keys,must,be,strings,param,prefix,a,filter,within,the,keys,in,the,map,e,g,beans,can,be,empty,or,code,null,param,resource,description,description,of,the,resource,that,the,map,came,from,for,logging,purposes,return,the,number,of,bean,definitions,found,throws,beans,exception,in,case,of,loading,or,parsing,errors,see,register,bean,definitions,map,string;public,int,register,bean,definitions,map,map,string,prefix,string,resource,description,throws,beans,exception,if,prefix,null,prefix,int,bean,count,0,for,object,key,map,key,set,if,key,instanceof,string,throw,new,illegal,argument,exception,illegal,key,key,only,strings,allowed,string,key,string,string,key,if,key,string,starts,with,prefix,string,name,and,property,key,string,substring,prefix,length,int,sep,idx,1,int,prop,key,idx,name,and,property,index,of,property,accessor,if,prop,key,idx,1,sep,idx,name,and,property,last,index,of,separator,prop,key,idx,else,sep,idx,name,and,property,last,index,of,separator,if,sep,idx,1,string,bean,name,name,and,property,substring,0,sep,idx,if,logger,is,debug,enabled,logger,debug,found,bean,name,bean,name,if,get,registry,contains,bean,definition,bean,name,register,bean,definition,bean,name,map,prefix,bean,name,resource,description,bean,count,else,if,logger,is,debug,enabled,logger,debug,invalid,bean,name,and,property,name,and,property,return,bean,count
PropertiesBeanDefinitionReader -> private Object readValue(Map.Entry<? ,?> entry);1385412762;Reads the value of the entry. Correctly interprets bean references for_values that are prefixed with an asterisk.;private Object readValue(Map.Entry<? ,?> entry) {_		Object val = entry.getValue()__		if (val instanceof String) {_			String strVal = (String) val__			_			if (strVal.startsWith(REF_PREFIX)) {_				_				String targetName = strVal.substring(1)__				if (targetName.startsWith(REF_PREFIX)) {_					_					val = targetName__				}_				else {_					val = new RuntimeBeanReference(targetName)__				}_			}_		}_		return val__	};reads,the,value,of,the,entry,correctly,interprets,bean,references,for,values,that,are,prefixed,with,an,asterisk;private,object,read,value,map,entry,entry,object,val,entry,get,value,if,val,instanceof,string,string,str,val,string,val,if,str,val,starts,with,string,target,name,str,val,substring,1,if,target,name,starts,with,val,target,name,else,val,new,runtime,bean,reference,target,name,return,val
PropertiesBeanDefinitionReader -> private Object readValue(Map.Entry<? ,?> entry);1467730834;Reads the value of the entry. Correctly interprets bean references for_values that are prefixed with an asterisk.;private Object readValue(Map.Entry<? ,?> entry) {_		Object val = entry.getValue()__		if (val instanceof String) {_			String strVal = (String) val__			_			if (strVal.startsWith(REF_PREFIX)) {_				_				String targetName = strVal.substring(1)__				if (targetName.startsWith(REF_PREFIX)) {_					_					val = targetName__				}_				else {_					val = new RuntimeBeanReference(targetName)__				}_			}_		}_		return val__	};reads,the,value,of,the,entry,correctly,interprets,bean,references,for,values,that,are,prefixed,with,an,asterisk;private,object,read,value,map,entry,entry,object,val,entry,get,value,if,val,instanceof,string,string,str,val,string,val,if,str,val,starts,with,string,target,name,str,val,substring,1,if,target,name,starts,with,val,target,name,else,val,new,runtime,bean,reference,target,name,return,val
PropertiesBeanDefinitionReader -> private Object readValue(Map.Entry<? ,?> entry);1495868221;Reads the value of the entry. Correctly interprets bean references for_values that are prefixed with an asterisk.;private Object readValue(Map.Entry<? ,?> entry) {_		Object val = entry.getValue()__		if (val instanceof String) {_			String strVal = (String) val__			_			if (strVal.startsWith(REF_PREFIX)) {_				_				String targetName = strVal.substring(1)__				if (targetName.startsWith(REF_PREFIX)) {_					_					val = targetName__				}_				else {_					val = new RuntimeBeanReference(targetName)__				}_			}_		}_		return val__	};reads,the,value,of,the,entry,correctly,interprets,bean,references,for,values,that,are,prefixed,with,an,asterisk;private,object,read,value,map,entry,entry,object,val,entry,get,value,if,val,instanceof,string,string,str,val,string,val,if,str,val,starts,with,string,target,name,str,val,substring,1,if,target,name,starts,with,val,target,name,else,val,new,runtime,bean,reference,target,name,return,val
PropertiesBeanDefinitionReader -> private Object readValue(Map.Entry<? ,?> entry);1496837955;Reads the value of the entry. Correctly interprets bean references for_values that are prefixed with an asterisk.;private Object readValue(Map.Entry<? ,?> entry) {_		Object val = entry.getValue()__		if (val instanceof String) {_			String strVal = (String) val__			_			if (strVal.startsWith(REF_PREFIX)) {_				_				String targetName = strVal.substring(1)__				if (targetName.startsWith(REF_PREFIX)) {_					_					val = targetName__				}_				else {_					val = new RuntimeBeanReference(targetName)__				}_			}_		}_		return val__	};reads,the,value,of,the,entry,correctly,interprets,bean,references,for,values,that,are,prefixed,with,an,asterisk;private,object,read,value,map,entry,entry,object,val,entry,get,value,if,val,instanceof,string,string,str,val,string,val,if,str,val,starts,with,string,target,name,str,val,substring,1,if,target,name,starts,with,val,target,name,else,val,new,runtime,bean,reference,target,name,return,val
PropertiesBeanDefinitionReader -> private Object readValue(Map.Entry<? ,?> entry);1498780456;Reads the value of the entry. Correctly interprets bean references for_values that are prefixed with an asterisk.;private Object readValue(Map.Entry<? ,?> entry) {_		Object val = entry.getValue()__		if (val instanceof String) {_			String strVal = (String) val__			_			if (strVal.startsWith(REF_PREFIX)) {_				_				String targetName = strVal.substring(1)__				if (targetName.startsWith(REF_PREFIX)) {_					_					val = targetName__				}_				else {_					val = new RuntimeBeanReference(targetName)__				}_			}_		}_		return val__	};reads,the,value,of,the,entry,correctly,interprets,bean,references,for,values,that,are,prefixed,with,an,asterisk;private,object,read,value,map,entry,entry,object,val,entry,get,value,if,val,instanceof,string,string,str,val,string,val,if,str,val,starts,with,string,target,name,str,val,substring,1,if,target,name,starts,with,val,target,name,else,val,new,runtime,bean,reference,target,name,return,val
PropertiesBeanDefinitionReader -> private Object readValue(Map.Entry<? ,?> entry);1518167602;Reads the value of the entry. Correctly interprets bean references for_values that are prefixed with an asterisk.;private Object readValue(Map.Entry<? ,?> entry) {_		Object val = entry.getValue()__		if (val instanceof String) {_			String strVal = (String) val__			_			if (strVal.startsWith(REF_PREFIX)) {_				_				String targetName = strVal.substring(1)__				if (targetName.startsWith(REF_PREFIX)) {_					_					val = targetName__				}_				else {_					val = new RuntimeBeanReference(targetName)__				}_			}_		}_		return val__	};reads,the,value,of,the,entry,correctly,interprets,bean,references,for,values,that,are,prefixed,with,an,asterisk;private,object,read,value,map,entry,entry,object,val,entry,get,value,if,val,instanceof,string,string,str,val,string,val,if,str,val,starts,with,string,target,name,str,val,substring,1,if,target,name,starts,with,val,target,name,else,val,new,runtime,bean,reference,target,name,return,val
PropertiesBeanDefinitionReader -> private Object readValue(Map.Entry<? ,?> entry);1518167818;Reads the value of the entry. Correctly interprets bean references for_values that are prefixed with an asterisk.;private Object readValue(Map.Entry<? ,?> entry) {_		Object val = entry.getValue()__		if (val instanceof String) {_			String strVal = (String) val__			_			if (strVal.startsWith(REF_PREFIX)) {_				_				String targetName = strVal.substring(1)__				if (targetName.startsWith(REF_PREFIX)) {_					_					val = targetName__				}_				else {_					val = new RuntimeBeanReference(targetName)__				}_			}_		}_		return val__	};reads,the,value,of,the,entry,correctly,interprets,bean,references,for,values,that,are,prefixed,with,an,asterisk;private,object,read,value,map,entry,entry,object,val,entry,get,value,if,val,instanceof,string,string,str,val,string,val,if,str,val,starts,with,string,target,name,str,val,substring,1,if,target,name,starts,with,val,target,name,else,val,new,runtime,bean,reference,target,name,return,val
PropertiesBeanDefinitionReader -> private Object readValue(Map.Entry<? ,?> entry);1530174524;Reads the value of the entry. Correctly interprets bean references for_values that are prefixed with an asterisk.;private Object readValue(Map.Entry<? ,?> entry) {_		Object val = entry.getValue()__		if (val instanceof String) {_			String strVal = (String) val__			_			if (strVal.startsWith(REF_PREFIX)) {_				_				String targetName = strVal.substring(1)__				if (targetName.startsWith(REF_PREFIX)) {_					_					val = targetName__				}_				else {_					val = new RuntimeBeanReference(targetName)__				}_			}_		}_		return val__	};reads,the,value,of,the,entry,correctly,interprets,bean,references,for,values,that,are,prefixed,with,an,asterisk;private,object,read,value,map,entry,entry,object,val,entry,get,value,if,val,instanceof,string,string,str,val,string,val,if,str,val,starts,with,string,target,name,str,val,substring,1,if,target,name,starts,with,val,target,name,else,val,new,runtime,bean,reference,target,name,return,val
PropertiesBeanDefinitionReader -> private Object readValue(Map.Entry<? ,?> entry);1532706365;Reads the value of the entry. Correctly interprets bean references for_values that are prefixed with an asterisk.;private Object readValue(Map.Entry<? ,?> entry) {_		Object val = entry.getValue()__		if (val instanceof String) {_			String strVal = (String) val__			_			if (strVal.startsWith(REF_PREFIX)) {_				_				String targetName = strVal.substring(1)__				if (targetName.startsWith(REF_PREFIX)) {_					_					val = targetName__				}_				else {_					val = new RuntimeBeanReference(targetName)__				}_			}_		}_		return val__	};reads,the,value,of,the,entry,correctly,interprets,bean,references,for,values,that,are,prefixed,with,an,asterisk;private,object,read,value,map,entry,entry,object,val,entry,get,value,if,val,instanceof,string,string,str,val,string,val,if,str,val,starts,with,string,target,name,str,val,substring,1,if,target,name,starts,with,val,target,name,else,val,new,runtime,bean,reference,target,name,return,val
PropertiesBeanDefinitionReader -> public int registerBeanDefinitions(ResourceBundle rb, @Nullable String prefix) throws BeanDefinitionStoreException;1495868221;Register bean definitions contained in a ResourceBundle._<p>Similar syntax as for a Map. This method is useful to enable_standard Java internationalization support._@param rb the ResourceBundle to load from_@param prefix a filter within the keys in the map: e.g. 'beans.'_(can be empty or {@code null})_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int registerBeanDefinitions(ResourceBundle rb, @Nullable String prefix) throws BeanDefinitionStoreException {_		_		Map<String, Object> map = new HashMap<>()__		Enumeration<String> keys = rb.getKeys()__		while (keys.hasMoreElements()) {_			String key = keys.nextElement()__			map.put(key, rb.getObject(key))__		}_		return registerBeanDefinitions(map, prefix)__	};register,bean,definitions,contained,in,a,resource,bundle,p,similar,syntax,as,for,a,map,this,method,is,useful,to,enable,standard,java,internationalization,support,param,rb,the,resource,bundle,to,load,from,param,prefix,a,filter,within,the,keys,in,the,map,e,g,beans,can,be,empty,or,code,null,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,register,bean,definitions,resource,bundle,rb,nullable,string,prefix,throws,bean,definition,store,exception,map,string,object,map,new,hash,map,enumeration,string,keys,rb,get,keys,while,keys,has,more,elements,string,key,keys,next,element,map,put,key,rb,get,object,key,return,register,bean,definitions,map,prefix
PropertiesBeanDefinitionReader -> public int registerBeanDefinitions(ResourceBundle rb, @Nullable String prefix) throws BeanDefinitionStoreException;1496837955;Register bean definitions contained in a ResourceBundle._<p>Similar syntax as for a Map. This method is useful to enable_standard Java internationalization support._@param rb the ResourceBundle to load from_@param prefix a filter within the keys in the map: e.g. 'beans.'_(can be empty or {@code null})_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int registerBeanDefinitions(ResourceBundle rb, @Nullable String prefix) throws BeanDefinitionStoreException {_		_		Map<String, Object> map = new HashMap<>()__		Enumeration<String> keys = rb.getKeys()__		while (keys.hasMoreElements()) {_			String key = keys.nextElement()__			map.put(key, rb.getObject(key))__		}_		return registerBeanDefinitions(map, prefix)__	};register,bean,definitions,contained,in,a,resource,bundle,p,similar,syntax,as,for,a,map,this,method,is,useful,to,enable,standard,java,internationalization,support,param,rb,the,resource,bundle,to,load,from,param,prefix,a,filter,within,the,keys,in,the,map,e,g,beans,can,be,empty,or,code,null,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,register,bean,definitions,resource,bundle,rb,nullable,string,prefix,throws,bean,definition,store,exception,map,string,object,map,new,hash,map,enumeration,string,keys,rb,get,keys,while,keys,has,more,elements,string,key,keys,next,element,map,put,key,rb,get,object,key,return,register,bean,definitions,map,prefix
PropertiesBeanDefinitionReader -> public int registerBeanDefinitions(ResourceBundle rb, @Nullable String prefix) throws BeanDefinitionStoreException;1498780456;Register bean definitions contained in a ResourceBundle._<p>Similar syntax as for a Map. This method is useful to enable_standard Java internationalization support._@param rb the ResourceBundle to load from_@param prefix a filter within the keys in the map: e.g. 'beans.'_(can be empty or {@code null})_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int registerBeanDefinitions(ResourceBundle rb, @Nullable String prefix) throws BeanDefinitionStoreException {_		_		Map<String, Object> map = new HashMap<>()__		Enumeration<String> keys = rb.getKeys()__		while (keys.hasMoreElements()) {_			String key = keys.nextElement()__			map.put(key, rb.getObject(key))__		}_		return registerBeanDefinitions(map, prefix)__	};register,bean,definitions,contained,in,a,resource,bundle,p,similar,syntax,as,for,a,map,this,method,is,useful,to,enable,standard,java,internationalization,support,param,rb,the,resource,bundle,to,load,from,param,prefix,a,filter,within,the,keys,in,the,map,e,g,beans,can,be,empty,or,code,null,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,register,bean,definitions,resource,bundle,rb,nullable,string,prefix,throws,bean,definition,store,exception,map,string,object,map,new,hash,map,enumeration,string,keys,rb,get,keys,while,keys,has,more,elements,string,key,keys,next,element,map,put,key,rb,get,object,key,return,register,bean,definitions,map,prefix
PropertiesBeanDefinitionReader -> public int registerBeanDefinitions(ResourceBundle rb, @Nullable String prefix) throws BeanDefinitionStoreException;1518167602;Register bean definitions contained in a ResourceBundle._<p>Similar syntax as for a Map. This method is useful to enable_standard Java internationalization support._@param rb the ResourceBundle to load from_@param prefix a filter within the keys in the map: e.g. 'beans.'_(can be empty or {@code null})_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int registerBeanDefinitions(ResourceBundle rb, @Nullable String prefix) throws BeanDefinitionStoreException {_		_		Map<String, Object> map = new HashMap<>()__		Enumeration<String> keys = rb.getKeys()__		while (keys.hasMoreElements()) {_			String key = keys.nextElement()__			map.put(key, rb.getObject(key))__		}_		return registerBeanDefinitions(map, prefix)__	};register,bean,definitions,contained,in,a,resource,bundle,p,similar,syntax,as,for,a,map,this,method,is,useful,to,enable,standard,java,internationalization,support,param,rb,the,resource,bundle,to,load,from,param,prefix,a,filter,within,the,keys,in,the,map,e,g,beans,can,be,empty,or,code,null,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,register,bean,definitions,resource,bundle,rb,nullable,string,prefix,throws,bean,definition,store,exception,map,string,object,map,new,hash,map,enumeration,string,keys,rb,get,keys,while,keys,has,more,elements,string,key,keys,next,element,map,put,key,rb,get,object,key,return,register,bean,definitions,map,prefix
PropertiesBeanDefinitionReader -> public int registerBeanDefinitions(ResourceBundle rb, @Nullable String prefix) throws BeanDefinitionStoreException;1518167818;Register bean definitions contained in a ResourceBundle._<p>Similar syntax as for a Map. This method is useful to enable_standard Java internationalization support._@param rb the ResourceBundle to load from_@param prefix a filter within the keys in the map: e.g. 'beans.'_(can be empty or {@code null})_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int registerBeanDefinitions(ResourceBundle rb, @Nullable String prefix) throws BeanDefinitionStoreException {_		_		Map<String, Object> map = new HashMap<>()__		Enumeration<String> keys = rb.getKeys()__		while (keys.hasMoreElements()) {_			String key = keys.nextElement()__			map.put(key, rb.getObject(key))__		}_		return registerBeanDefinitions(map, prefix)__	};register,bean,definitions,contained,in,a,resource,bundle,p,similar,syntax,as,for,a,map,this,method,is,useful,to,enable,standard,java,internationalization,support,param,rb,the,resource,bundle,to,load,from,param,prefix,a,filter,within,the,keys,in,the,map,e,g,beans,can,be,empty,or,code,null,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,register,bean,definitions,resource,bundle,rb,nullable,string,prefix,throws,bean,definition,store,exception,map,string,object,map,new,hash,map,enumeration,string,keys,rb,get,keys,while,keys,has,more,elements,string,key,keys,next,element,map,put,key,rb,get,object,key,return,register,bean,definitions,map,prefix
PropertiesBeanDefinitionReader -> public int registerBeanDefinitions(ResourceBundle rb, @Nullable String prefix) throws BeanDefinitionStoreException;1530174524;Register bean definitions contained in a ResourceBundle._<p>Similar syntax as for a Map. This method is useful to enable_standard Java internationalization support._@param rb the ResourceBundle to load from_@param prefix a filter within the keys in the map: e.g. 'beans.'_(can be empty or {@code null})_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int registerBeanDefinitions(ResourceBundle rb, @Nullable String prefix) throws BeanDefinitionStoreException {_		_		Map<String, Object> map = new HashMap<>()__		Enumeration<String> keys = rb.getKeys()__		while (keys.hasMoreElements()) {_			String key = keys.nextElement()__			map.put(key, rb.getObject(key))__		}_		return registerBeanDefinitions(map, prefix)__	};register,bean,definitions,contained,in,a,resource,bundle,p,similar,syntax,as,for,a,map,this,method,is,useful,to,enable,standard,java,internationalization,support,param,rb,the,resource,bundle,to,load,from,param,prefix,a,filter,within,the,keys,in,the,map,e,g,beans,can,be,empty,or,code,null,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,register,bean,definitions,resource,bundle,rb,nullable,string,prefix,throws,bean,definition,store,exception,map,string,object,map,new,hash,map,enumeration,string,keys,rb,get,keys,while,keys,has,more,elements,string,key,keys,next,element,map,put,key,rb,get,object,key,return,register,bean,definitions,map,prefix
PropertiesBeanDefinitionReader -> public int registerBeanDefinitions(ResourceBundle rb, @Nullable String prefix) throws BeanDefinitionStoreException;1532706365;Register bean definitions contained in a ResourceBundle._<p>Similar syntax as for a Map. This method is useful to enable_standard Java internationalization support._@param rb the ResourceBundle to load from_@param prefix a filter within the keys in the map: e.g. 'beans.'_(can be empty or {@code null})_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int registerBeanDefinitions(ResourceBundle rb, @Nullable String prefix) throws BeanDefinitionStoreException {_		_		Map<String, Object> map = new HashMap<>()__		Enumeration<String> keys = rb.getKeys()__		while (keys.hasMoreElements()) {_			String key = keys.nextElement()__			map.put(key, rb.getObject(key))__		}_		return registerBeanDefinitions(map, prefix)__	};register,bean,definitions,contained,in,a,resource,bundle,p,similar,syntax,as,for,a,map,this,method,is,useful,to,enable,standard,java,internationalization,support,param,rb,the,resource,bundle,to,load,from,param,prefix,a,filter,within,the,keys,in,the,map,e,g,beans,can,be,empty,or,code,null,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,register,bean,definitions,resource,bundle,rb,nullable,string,prefix,throws,bean,definition,store,exception,map,string,object,map,new,hash,map,enumeration,string,keys,rb,get,keys,while,keys,has,more,elements,string,key,keys,next,element,map,put,key,rb,get,object,key,return,register,bean,definitions,map,prefix
PropertiesBeanDefinitionReader -> public int registerBeanDefinitions(ResourceBundle rb, @Nullable String prefix) throws BeanDefinitionStoreException;1538724083;Register bean definitions contained in a ResourceBundle._<p>Similar syntax as for a Map. This method is useful to enable_standard Java internationalization support._@param rb the ResourceBundle to load from_@param prefix a filter within the keys in the map: e.g. 'beans.'_(can be empty or {@code null})_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int registerBeanDefinitions(ResourceBundle rb, @Nullable String prefix) throws BeanDefinitionStoreException {_		_		Map<String, Object> map = new HashMap<>()__		Enumeration<String> keys = rb.getKeys()__		while (keys.hasMoreElements()) {_			String key = keys.nextElement()__			map.put(key, rb.getObject(key))__		}_		return registerBeanDefinitions(map, prefix)__	};register,bean,definitions,contained,in,a,resource,bundle,p,similar,syntax,as,for,a,map,this,method,is,useful,to,enable,standard,java,internationalization,support,param,rb,the,resource,bundle,to,load,from,param,prefix,a,filter,within,the,keys,in,the,map,e,g,beans,can,be,empty,or,code,null,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,register,bean,definitions,resource,bundle,rb,nullable,string,prefix,throws,bean,definition,store,exception,map,string,object,map,new,hash,map,enumeration,string,keys,rb,get,keys,while,keys,has,more,elements,string,key,keys,next,element,map,put,key,rb,get,object,key,return,register,bean,definitions,map,prefix
PropertiesBeanDefinitionReader -> public void setPropertiesPersister(@Nullable PropertiesPersister propertiesPersister);1496837955;Set the PropertiesPersister to use for parsing properties files._The default is DefaultPropertiesPersister._@see org.springframework.util.DefaultPropertiesPersister;public void setPropertiesPersister(@Nullable PropertiesPersister propertiesPersister) {_		this.propertiesPersister =_				(propertiesPersister != null ? propertiesPersister : new DefaultPropertiesPersister())__	};set,the,properties,persister,to,use,for,parsing,properties,files,the,default,is,default,properties,persister,see,org,springframework,util,default,properties,persister;public,void,set,properties,persister,nullable,properties,persister,properties,persister,this,properties,persister,properties,persister,null,properties,persister,new,default,properties,persister
PropertiesBeanDefinitionReader -> public void setPropertiesPersister(@Nullable PropertiesPersister propertiesPersister);1498780456;Set the PropertiesPersister to use for parsing properties files._The default is DefaultPropertiesPersister._@see org.springframework.util.DefaultPropertiesPersister;public void setPropertiesPersister(@Nullable PropertiesPersister propertiesPersister) {_		this.propertiesPersister =_				(propertiesPersister != null ? propertiesPersister : new DefaultPropertiesPersister())__	};set,the,properties,persister,to,use,for,parsing,properties,files,the,default,is,default,properties,persister,see,org,springframework,util,default,properties,persister;public,void,set,properties,persister,nullable,properties,persister,properties,persister,this,properties,persister,properties,persister,null,properties,persister,new,default,properties,persister
PropertiesBeanDefinitionReader -> public void setPropertiesPersister(@Nullable PropertiesPersister propertiesPersister);1518167602;Set the PropertiesPersister to use for parsing properties files._The default is DefaultPropertiesPersister._@see org.springframework.util.DefaultPropertiesPersister;public void setPropertiesPersister(@Nullable PropertiesPersister propertiesPersister) {_		this.propertiesPersister =_				(propertiesPersister != null ? propertiesPersister : new DefaultPropertiesPersister())__	};set,the,properties,persister,to,use,for,parsing,properties,files,the,default,is,default,properties,persister,see,org,springframework,util,default,properties,persister;public,void,set,properties,persister,nullable,properties,persister,properties,persister,this,properties,persister,properties,persister,null,properties,persister,new,default,properties,persister
PropertiesBeanDefinitionReader -> public void setPropertiesPersister(@Nullable PropertiesPersister propertiesPersister);1518167818;Set the PropertiesPersister to use for parsing properties files._The default is DefaultPropertiesPersister._@see org.springframework.util.DefaultPropertiesPersister;public void setPropertiesPersister(@Nullable PropertiesPersister propertiesPersister) {_		this.propertiesPersister =_				(propertiesPersister != null ? propertiesPersister : new DefaultPropertiesPersister())__	};set,the,properties,persister,to,use,for,parsing,properties,files,the,default,is,default,properties,persister,see,org,springframework,util,default,properties,persister;public,void,set,properties,persister,nullable,properties,persister,properties,persister,this,properties,persister,properties,persister,null,properties,persister,new,default,properties,persister
PropertiesBeanDefinitionReader -> public void setPropertiesPersister(@Nullable PropertiesPersister propertiesPersister);1530174524;Set the PropertiesPersister to use for parsing properties files._The default is DefaultPropertiesPersister._@see org.springframework.util.DefaultPropertiesPersister;public void setPropertiesPersister(@Nullable PropertiesPersister propertiesPersister) {_		this.propertiesPersister =_				(propertiesPersister != null ? propertiesPersister : new DefaultPropertiesPersister())__	};set,the,properties,persister,to,use,for,parsing,properties,files,the,default,is,default,properties,persister,see,org,springframework,util,default,properties,persister;public,void,set,properties,persister,nullable,properties,persister,properties,persister,this,properties,persister,properties,persister,null,properties,persister,new,default,properties,persister
PropertiesBeanDefinitionReader -> public void setPropertiesPersister(@Nullable PropertiesPersister propertiesPersister);1532706365;Set the PropertiesPersister to use for parsing properties files._The default is DefaultPropertiesPersister._@see org.springframework.util.DefaultPropertiesPersister;public void setPropertiesPersister(@Nullable PropertiesPersister propertiesPersister) {_		this.propertiesPersister =_				(propertiesPersister != null ? propertiesPersister : new DefaultPropertiesPersister())__	};set,the,properties,persister,to,use,for,parsing,properties,files,the,default,is,default,properties,persister,see,org,springframework,util,default,properties,persister;public,void,set,properties,persister,nullable,properties,persister,properties,persister,this,properties,persister,properties,persister,null,properties,persister,new,default,properties,persister
PropertiesBeanDefinitionReader -> public void setPropertiesPersister(@Nullable PropertiesPersister propertiesPersister);1538724083;Set the PropertiesPersister to use for parsing properties files._The default is DefaultPropertiesPersister._@see org.springframework.util.DefaultPropertiesPersister;public void setPropertiesPersister(@Nullable PropertiesPersister propertiesPersister) {_		this.propertiesPersister =_				(propertiesPersister != null ? propertiesPersister : new DefaultPropertiesPersister())__	};set,the,properties,persister,to,use,for,parsing,properties,files,the,default,is,default,properties,persister,see,org,springframework,util,default,properties,persister;public,void,set,properties,persister,nullable,properties,persister,properties,persister,this,properties,persister,properties,persister,null,properties,persister,new,default,properties,persister
PropertiesBeanDefinitionReader -> public int loadBeanDefinitions(EncodedResource encodedResource, @Nullable String prefix) 			throws BeanDefinitionStoreException;1495868221;Load bean definitions from the specified properties file._@param encodedResource the resource descriptor for the properties file,_allowing to specify an encoding to use for parsing the file_@param prefix a filter within the keys in the map: e.g. 'beans.'_(can be empty or {@code null})_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int loadBeanDefinitions(EncodedResource encodedResource, @Nullable String prefix)_			throws BeanDefinitionStoreException {__		Properties props = new Properties()__		try {_			InputStream is = encodedResource.getResource().getInputStream()__			try {_				if (encodedResource.getEncoding() != null) {_					getPropertiesPersister().load(props, new InputStreamReader(is, encodedResource.getEncoding()))__				}_				else {_					getPropertiesPersister().load(props, is)__				}_			}_			finally {_				is.close()__			}_			return registerBeanDefinitions(props, prefix, encodedResource.getResource().getDescription())__		}_		catch (IOException ex) {_			throw new BeanDefinitionStoreException("Could not parse properties from " + encodedResource.getResource(), ex)__		}_	};load,bean,definitions,from,the,specified,properties,file,param,encoded,resource,the,resource,descriptor,for,the,properties,file,allowing,to,specify,an,encoding,to,use,for,parsing,the,file,param,prefix,a,filter,within,the,keys,in,the,map,e,g,beans,can,be,empty,or,code,null,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,load,bean,definitions,encoded,resource,encoded,resource,nullable,string,prefix,throws,bean,definition,store,exception,properties,props,new,properties,try,input,stream,is,encoded,resource,get,resource,get,input,stream,try,if,encoded,resource,get,encoding,null,get,properties,persister,load,props,new,input,stream,reader,is,encoded,resource,get,encoding,else,get,properties,persister,load,props,is,finally,is,close,return,register,bean,definitions,props,prefix,encoded,resource,get,resource,get,description,catch,ioexception,ex,throw,new,bean,definition,store,exception,could,not,parse,properties,from,encoded,resource,get,resource,ex
PropertiesBeanDefinitionReader -> public int loadBeanDefinitions(EncodedResource encodedResource, @Nullable String prefix) 			throws BeanDefinitionStoreException;1496837955;Load bean definitions from the specified properties file._@param encodedResource the resource descriptor for the properties file,_allowing to specify an encoding to use for parsing the file_@param prefix a filter within the keys in the map: e.g. 'beans.'_(can be empty or {@code null})_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int loadBeanDefinitions(EncodedResource encodedResource, @Nullable String prefix)_			throws BeanDefinitionStoreException {__		Properties props = new Properties()__		try {_			InputStream is = encodedResource.getResource().getInputStream()__			try {_				if (encodedResource.getEncoding() != null) {_					getPropertiesPersister().load(props, new InputStreamReader(is, encodedResource.getEncoding()))__				}_				else {_					getPropertiesPersister().load(props, is)__				}_			}_			finally {_				is.close()__			}_			return registerBeanDefinitions(props, prefix, encodedResource.getResource().getDescription())__		}_		catch (IOException ex) {_			throw new BeanDefinitionStoreException("Could not parse properties from " + encodedResource.getResource(), ex)__		}_	};load,bean,definitions,from,the,specified,properties,file,param,encoded,resource,the,resource,descriptor,for,the,properties,file,allowing,to,specify,an,encoding,to,use,for,parsing,the,file,param,prefix,a,filter,within,the,keys,in,the,map,e,g,beans,can,be,empty,or,code,null,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,load,bean,definitions,encoded,resource,encoded,resource,nullable,string,prefix,throws,bean,definition,store,exception,properties,props,new,properties,try,input,stream,is,encoded,resource,get,resource,get,input,stream,try,if,encoded,resource,get,encoding,null,get,properties,persister,load,props,new,input,stream,reader,is,encoded,resource,get,encoding,else,get,properties,persister,load,props,is,finally,is,close,return,register,bean,definitions,props,prefix,encoded,resource,get,resource,get,description,catch,ioexception,ex,throw,new,bean,definition,store,exception,could,not,parse,properties,from,encoded,resource,get,resource,ex
PropertiesBeanDefinitionReader -> public int loadBeanDefinitions(EncodedResource encodedResource, @Nullable String prefix) 			throws BeanDefinitionStoreException;1498780456;Load bean definitions from the specified properties file._@param encodedResource the resource descriptor for the properties file,_allowing to specify an encoding to use for parsing the file_@param prefix a filter within the keys in the map: e.g. 'beans.'_(can be empty or {@code null})_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int loadBeanDefinitions(EncodedResource encodedResource, @Nullable String prefix)_			throws BeanDefinitionStoreException {__		Properties props = new Properties()__		try {_			InputStream is = encodedResource.getResource().getInputStream()__			try {_				if (encodedResource.getEncoding() != null) {_					getPropertiesPersister().load(props, new InputStreamReader(is, encodedResource.getEncoding()))__				}_				else {_					getPropertiesPersister().load(props, is)__				}_			}_			finally {_				is.close()__			}_			return registerBeanDefinitions(props, prefix, encodedResource.getResource().getDescription())__		}_		catch (IOException ex) {_			throw new BeanDefinitionStoreException("Could not parse properties from " + encodedResource.getResource(), ex)__		}_	};load,bean,definitions,from,the,specified,properties,file,param,encoded,resource,the,resource,descriptor,for,the,properties,file,allowing,to,specify,an,encoding,to,use,for,parsing,the,file,param,prefix,a,filter,within,the,keys,in,the,map,e,g,beans,can,be,empty,or,code,null,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,load,bean,definitions,encoded,resource,encoded,resource,nullable,string,prefix,throws,bean,definition,store,exception,properties,props,new,properties,try,input,stream,is,encoded,resource,get,resource,get,input,stream,try,if,encoded,resource,get,encoding,null,get,properties,persister,load,props,new,input,stream,reader,is,encoded,resource,get,encoding,else,get,properties,persister,load,props,is,finally,is,close,return,register,bean,definitions,props,prefix,encoded,resource,get,resource,get,description,catch,ioexception,ex,throw,new,bean,definition,store,exception,could,not,parse,properties,from,encoded,resource,get,resource,ex
PropertiesBeanDefinitionReader -> public int loadBeanDefinitions(EncodedResource encodedResource, @Nullable String prefix) 			throws BeanDefinitionStoreException;1518167602;Load bean definitions from the specified properties file._@param encodedResource the resource descriptor for the properties file,_allowing to specify an encoding to use for parsing the file_@param prefix a filter within the keys in the map: e.g. 'beans.'_(can be empty or {@code null})_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int loadBeanDefinitions(EncodedResource encodedResource, @Nullable String prefix)_			throws BeanDefinitionStoreException {__		Properties props = new Properties()__		try {_			try (InputStream is = encodedResource.getResource().getInputStream()) {_				if (encodedResource.getEncoding() != null) {_					getPropertiesPersister().load(props, new InputStreamReader(is, encodedResource.getEncoding()))__				}_				else {_					getPropertiesPersister().load(props, is)__				}_			}_			return registerBeanDefinitions(props, prefix, encodedResource.getResource().getDescription())__		}_		catch (IOException ex) {_			throw new BeanDefinitionStoreException("Could not parse properties from " + encodedResource.getResource(), ex)__		}_	};load,bean,definitions,from,the,specified,properties,file,param,encoded,resource,the,resource,descriptor,for,the,properties,file,allowing,to,specify,an,encoding,to,use,for,parsing,the,file,param,prefix,a,filter,within,the,keys,in,the,map,e,g,beans,can,be,empty,or,code,null,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,load,bean,definitions,encoded,resource,encoded,resource,nullable,string,prefix,throws,bean,definition,store,exception,properties,props,new,properties,try,try,input,stream,is,encoded,resource,get,resource,get,input,stream,if,encoded,resource,get,encoding,null,get,properties,persister,load,props,new,input,stream,reader,is,encoded,resource,get,encoding,else,get,properties,persister,load,props,is,return,register,bean,definitions,props,prefix,encoded,resource,get,resource,get,description,catch,ioexception,ex,throw,new,bean,definition,store,exception,could,not,parse,properties,from,encoded,resource,get,resource,ex
PropertiesBeanDefinitionReader -> public int loadBeanDefinitions(EncodedResource encodedResource, @Nullable String prefix) 			throws BeanDefinitionStoreException;1518167818;Load bean definitions from the specified properties file._@param encodedResource the resource descriptor for the properties file,_allowing to specify an encoding to use for parsing the file_@param prefix a filter within the keys in the map: e.g. 'beans.'_(can be empty or {@code null})_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int loadBeanDefinitions(EncodedResource encodedResource, @Nullable String prefix)_			throws BeanDefinitionStoreException {__		Properties props = new Properties()__		try {_			try (InputStream is = encodedResource.getResource().getInputStream()) {_				if (encodedResource.getEncoding() != null) {_					getPropertiesPersister().load(props, new InputStreamReader(is, encodedResource.getEncoding()))__				}_				else {_					getPropertiesPersister().load(props, is)__				}_			}_			return registerBeanDefinitions(props, prefix, encodedResource.getResource().getDescription())__		}_		catch (IOException ex) {_			throw new BeanDefinitionStoreException("Could not parse properties from " + encodedResource.getResource(), ex)__		}_	};load,bean,definitions,from,the,specified,properties,file,param,encoded,resource,the,resource,descriptor,for,the,properties,file,allowing,to,specify,an,encoding,to,use,for,parsing,the,file,param,prefix,a,filter,within,the,keys,in,the,map,e,g,beans,can,be,empty,or,code,null,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,load,bean,definitions,encoded,resource,encoded,resource,nullable,string,prefix,throws,bean,definition,store,exception,properties,props,new,properties,try,try,input,stream,is,encoded,resource,get,resource,get,input,stream,if,encoded,resource,get,encoding,null,get,properties,persister,load,props,new,input,stream,reader,is,encoded,resource,get,encoding,else,get,properties,persister,load,props,is,return,register,bean,definitions,props,prefix,encoded,resource,get,resource,get,description,catch,ioexception,ex,throw,new,bean,definition,store,exception,could,not,parse,properties,from,encoded,resource,get,resource,ex
PropertiesBeanDefinitionReader -> public int loadBeanDefinitions(EncodedResource encodedResource, @Nullable String prefix) 			throws BeanDefinitionStoreException;1530174524;Load bean definitions from the specified properties file._@param encodedResource the resource descriptor for the properties file,_allowing to specify an encoding to use for parsing the file_@param prefix a filter within the keys in the map: e.g. 'beans.'_(can be empty or {@code null})_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int loadBeanDefinitions(EncodedResource encodedResource, @Nullable String prefix)_			throws BeanDefinitionStoreException {__		Properties props = new Properties()__		try {_			try (InputStream is = encodedResource.getResource().getInputStream()) {_				if (encodedResource.getEncoding() != null) {_					getPropertiesPersister().load(props, new InputStreamReader(is, encodedResource.getEncoding()))__				}_				else {_					getPropertiesPersister().load(props, is)__				}_			}_			return registerBeanDefinitions(props, prefix, encodedResource.getResource().getDescription())__		}_		catch (IOException ex) {_			throw new BeanDefinitionStoreException("Could not parse properties from " + encodedResource.getResource(), ex)__		}_	};load,bean,definitions,from,the,specified,properties,file,param,encoded,resource,the,resource,descriptor,for,the,properties,file,allowing,to,specify,an,encoding,to,use,for,parsing,the,file,param,prefix,a,filter,within,the,keys,in,the,map,e,g,beans,can,be,empty,or,code,null,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,load,bean,definitions,encoded,resource,encoded,resource,nullable,string,prefix,throws,bean,definition,store,exception,properties,props,new,properties,try,try,input,stream,is,encoded,resource,get,resource,get,input,stream,if,encoded,resource,get,encoding,null,get,properties,persister,load,props,new,input,stream,reader,is,encoded,resource,get,encoding,else,get,properties,persister,load,props,is,return,register,bean,definitions,props,prefix,encoded,resource,get,resource,get,description,catch,ioexception,ex,throw,new,bean,definition,store,exception,could,not,parse,properties,from,encoded,resource,get,resource,ex
PropertiesBeanDefinitionReader -> public int loadBeanDefinitions(EncodedResource encodedResource, @Nullable String prefix) 			throws BeanDefinitionStoreException;1532706365;Load bean definitions from the specified properties file._@param encodedResource the resource descriptor for the properties file,_allowing to specify an encoding to use for parsing the file_@param prefix a filter within the keys in the map: e.g. 'beans.'_(can be empty or {@code null})_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int loadBeanDefinitions(EncodedResource encodedResource, @Nullable String prefix)_			throws BeanDefinitionStoreException {__		if (logger.isTraceEnabled()) {_			logger.trace("Loading properties bean definitions from " + encodedResource)__		}__		Properties props = new Properties()__		try {_			try (InputStream is = encodedResource.getResource().getInputStream()) {_				if (encodedResource.getEncoding() != null) {_					getPropertiesPersister().load(props, new InputStreamReader(is, encodedResource.getEncoding()))__				}_				else {_					getPropertiesPersister().load(props, is)__				}_			}__			int count = registerBeanDefinitions(props, prefix, encodedResource.getResource().getDescription())__			if (logger.isDebugEnabled()) {_				logger.debug("Loaded " + count + " bean definitions from " + encodedResource)__			}_			return count__		}_		catch (IOException ex) {_			throw new BeanDefinitionStoreException("Could not parse properties from " + encodedResource.getResource(), ex)__		}_	};load,bean,definitions,from,the,specified,properties,file,param,encoded,resource,the,resource,descriptor,for,the,properties,file,allowing,to,specify,an,encoding,to,use,for,parsing,the,file,param,prefix,a,filter,within,the,keys,in,the,map,e,g,beans,can,be,empty,or,code,null,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,load,bean,definitions,encoded,resource,encoded,resource,nullable,string,prefix,throws,bean,definition,store,exception,if,logger,is,trace,enabled,logger,trace,loading,properties,bean,definitions,from,encoded,resource,properties,props,new,properties,try,try,input,stream,is,encoded,resource,get,resource,get,input,stream,if,encoded,resource,get,encoding,null,get,properties,persister,load,props,new,input,stream,reader,is,encoded,resource,get,encoding,else,get,properties,persister,load,props,is,int,count,register,bean,definitions,props,prefix,encoded,resource,get,resource,get,description,if,logger,is,debug,enabled,logger,debug,loaded,count,bean,definitions,from,encoded,resource,return,count,catch,ioexception,ex,throw,new,bean,definition,store,exception,could,not,parse,properties,from,encoded,resource,get,resource,ex
PropertiesBeanDefinitionReader -> public int loadBeanDefinitions(EncodedResource encodedResource, @Nullable String prefix) 			throws BeanDefinitionStoreException;1538724083;Load bean definitions from the specified properties file._@param encodedResource the resource descriptor for the properties file,_allowing to specify an encoding to use for parsing the file_@param prefix a filter within the keys in the map: e.g. 'beans.'_(can be empty or {@code null})_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int loadBeanDefinitions(EncodedResource encodedResource, @Nullable String prefix)_			throws BeanDefinitionStoreException {__		if (logger.isTraceEnabled()) {_			logger.trace("Loading properties bean definitions from " + encodedResource)__		}__		Properties props = new Properties()__		try {_			try (InputStream is = encodedResource.getResource().getInputStream()) {_				if (encodedResource.getEncoding() != null) {_					getPropertiesPersister().load(props, new InputStreamReader(is, encodedResource.getEncoding()))__				}_				else {_					getPropertiesPersister().load(props, is)__				}_			}__			int count = registerBeanDefinitions(props, prefix, encodedResource.getResource().getDescription())__			if (logger.isDebugEnabled()) {_				logger.debug("Loaded " + count + " bean definitions from " + encodedResource)__			}_			return count__		}_		catch (IOException ex) {_			throw new BeanDefinitionStoreException("Could not parse properties from " + encodedResource.getResource(), ex)__		}_	};load,bean,definitions,from,the,specified,properties,file,param,encoded,resource,the,resource,descriptor,for,the,properties,file,allowing,to,specify,an,encoding,to,use,for,parsing,the,file,param,prefix,a,filter,within,the,keys,in,the,map,e,g,beans,can,be,empty,or,code,null,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,load,bean,definitions,encoded,resource,encoded,resource,nullable,string,prefix,throws,bean,definition,store,exception,if,logger,is,trace,enabled,logger,trace,loading,properties,bean,definitions,from,encoded,resource,properties,props,new,properties,try,try,input,stream,is,encoded,resource,get,resource,get,input,stream,if,encoded,resource,get,encoding,null,get,properties,persister,load,props,new,input,stream,reader,is,encoded,resource,get,encoding,else,get,properties,persister,load,props,is,int,count,register,bean,definitions,props,prefix,encoded,resource,get,resource,get,description,if,logger,is,debug,enabled,logger,debug,loaded,count,bean,definitions,from,encoded,resource,return,count,catch,ioexception,ex,throw,new,bean,definition,store,exception,could,not,parse,properties,from,encoded,resource,get,resource,ex
PropertiesBeanDefinitionReader -> public int registerBeanDefinitions(Map map) throws BeansException;1328020251;Register bean definitions contained in a Map,_using all property keys (i.e. not filtering by prefix)._@param map Map: name -> property (String or Object). Property values_will be strings if coming from a Properties file etc. Property names_(keys) <b>must</b> be Strings. Class keys must be Strings._@return the number of bean definitions found_@throws BeansException in case of loading or parsing errors_@see #registerBeanDefinitions(java.util.Map, String, String);public int registerBeanDefinitions(Map map) throws BeansException {_		return registerBeanDefinitions(map, null)__	};register,bean,definitions,contained,in,a,map,using,all,property,keys,i,e,not,filtering,by,prefix,param,map,map,name,property,string,or,object,property,values,will,be,strings,if,coming,from,a,properties,file,etc,property,names,keys,b,must,b,be,strings,class,keys,must,be,strings,return,the,number,of,bean,definitions,found,throws,beans,exception,in,case,of,loading,or,parsing,errors,see,register,bean,definitions,java,util,map,string,string;public,int,register,bean,definitions,map,map,throws,beans,exception,return,register,bean,definitions,map,null
PropertiesBeanDefinitionReader -> public int registerBeanDefinitions(Map map) throws BeansException;1356735495;Register bean definitions contained in a Map,_using all property keys (i.e. not filtering by prefix)._@param map Map: name -> property (String or Object). Property values_will be strings if coming from a Properties file etc. Property names_(keys) <b>must</b> be Strings. Class keys must be Strings._@return the number of bean definitions found_@throws BeansException in case of loading or parsing errors_@see #registerBeanDefinitions(java.util.Map, String, String);public int registerBeanDefinitions(Map map) throws BeansException {_		return registerBeanDefinitions(map, null)__	};register,bean,definitions,contained,in,a,map,using,all,property,keys,i,e,not,filtering,by,prefix,param,map,map,name,property,string,or,object,property,values,will,be,strings,if,coming,from,a,properties,file,etc,property,names,keys,b,must,b,be,strings,class,keys,must,be,strings,return,the,number,of,bean,definitions,found,throws,beans,exception,in,case,of,loading,or,parsing,errors,see,register,bean,definitions,java,util,map,string,string;public,int,register,bean,definitions,map,map,throws,beans,exception,return,register,bean,definitions,map,null
PropertiesBeanDefinitionReader -> public int registerBeanDefinitions(Map map) throws BeansException;1357119239;Register bean definitions contained in a Map,_using all property keys (i.e. not filtering by prefix)._@param map Map: name -> property (String or Object). Property values_will be strings if coming from a Properties file etc. Property names_(keys) <b>must</b> be Strings. Class keys must be Strings._@return the number of bean definitions found_@throws BeansException in case of loading or parsing errors_@see #registerBeanDefinitions(java.util.Map, String, String);public int registerBeanDefinitions(Map map) throws BeansException {_		return registerBeanDefinitions(map, null)__	};register,bean,definitions,contained,in,a,map,using,all,property,keys,i,e,not,filtering,by,prefix,param,map,map,name,property,string,or,object,property,values,will,be,strings,if,coming,from,a,properties,file,etc,property,names,keys,b,must,b,be,strings,class,keys,must,be,strings,return,the,number,of,bean,definitions,found,throws,beans,exception,in,case,of,loading,or,parsing,errors,see,register,bean,definitions,java,util,map,string,string;public,int,register,bean,definitions,map,map,throws,beans,exception,return,register,bean,definitions,map,null
PropertiesBeanDefinitionReader -> public int registerBeanDefinitions(Map map) throws BeansException;1362408075;Register bean definitions contained in a Map,_using all property keys (i.e. not filtering by prefix)._@param map Map: name -> property (String or Object). Property values_will be strings if coming from a Properties file etc. Property names_(keys) <b>must</b> be Strings. Class keys must be Strings._@return the number of bean definitions found_@throws BeansException in case of loading or parsing errors_@see #registerBeanDefinitions(java.util.Map, String, String);public int registerBeanDefinitions(Map map) throws BeansException {_		return registerBeanDefinitions(map, null)__	};register,bean,definitions,contained,in,a,map,using,all,property,keys,i,e,not,filtering,by,prefix,param,map,map,name,property,string,or,object,property,values,will,be,strings,if,coming,from,a,properties,file,etc,property,names,keys,b,must,b,be,strings,class,keys,must,be,strings,return,the,number,of,bean,definitions,found,throws,beans,exception,in,case,of,loading,or,parsing,errors,see,register,bean,definitions,java,util,map,string,string;public,int,register,bean,definitions,map,map,throws,beans,exception,return,register,bean,definitions,map,null
PropertiesBeanDefinitionReader -> public int registerBeanDefinitions(Map map) throws BeansException;1368482696;Register bean definitions contained in a Map,_using all property keys (i.e. not filtering by prefix)._@param map Map: name -> property (String or Object). Property values_will be strings if coming from a Properties file etc. Property names_(keys) <b>must</b> be Strings. Class keys must be Strings._@return the number of bean definitions found_@throws BeansException in case of loading or parsing errors_@see #registerBeanDefinitions(java.util.Map, String, String);public int registerBeanDefinitions(Map map) throws BeansException {_		return registerBeanDefinitions(map, null)__	};register,bean,definitions,contained,in,a,map,using,all,property,keys,i,e,not,filtering,by,prefix,param,map,map,name,property,string,or,object,property,values,will,be,strings,if,coming,from,a,properties,file,etc,property,names,keys,b,must,b,be,strings,class,keys,must,be,strings,return,the,number,of,bean,definitions,found,throws,beans,exception,in,case,of,loading,or,parsing,errors,see,register,bean,definitions,java,util,map,string,string;public,int,register,bean,definitions,map,map,throws,beans,exception,return,register,bean,definitions,map,null
PropertiesBeanDefinitionReader -> public int registerBeanDefinitions(Map map, String prefix) throws BeansException;1328020251;Register bean definitions contained in a Map._Ignore ineligible properties._@param map Map name -> property (String or Object). Property values_will be strings if coming from a Properties file etc. Property names_(keys) <b>must</b> be Strings. Class keys must be Strings._@param prefix a filter within the keys in the map: e.g. 'beans.'_(can be empty or <code>null</code>)_@return the number of bean definitions found_@throws BeansException in case of loading or parsing errors;public int registerBeanDefinitions(Map map, String prefix) throws BeansException {_		return registerBeanDefinitions(map, prefix, "Map " + map)__	};register,bean,definitions,contained,in,a,map,ignore,ineligible,properties,param,map,map,name,property,string,or,object,property,values,will,be,strings,if,coming,from,a,properties,file,etc,property,names,keys,b,must,b,be,strings,class,keys,must,be,strings,param,prefix,a,filter,within,the,keys,in,the,map,e,g,beans,can,be,empty,or,code,null,code,return,the,number,of,bean,definitions,found,throws,beans,exception,in,case,of,loading,or,parsing,errors;public,int,register,bean,definitions,map,map,string,prefix,throws,beans,exception,return,register,bean,definitions,map,prefix,map,map
PropertiesBeanDefinitionReader -> public int registerBeanDefinitions(Map map, String prefix) throws BeansException;1356735495;Register bean definitions contained in a Map._Ignore ineligible properties._@param map Map name -> property (String or Object). Property values_will be strings if coming from a Properties file etc. Property names_(keys) <b>must</b> be Strings. Class keys must be Strings._@param prefix a filter within the keys in the map: e.g. 'beans.'_(can be empty or {@code null})_@return the number of bean definitions found_@throws BeansException in case of loading or parsing errors;public int registerBeanDefinitions(Map map, String prefix) throws BeansException {_		return registerBeanDefinitions(map, prefix, "Map " + map)__	};register,bean,definitions,contained,in,a,map,ignore,ineligible,properties,param,map,map,name,property,string,or,object,property,values,will,be,strings,if,coming,from,a,properties,file,etc,property,names,keys,b,must,b,be,strings,class,keys,must,be,strings,param,prefix,a,filter,within,the,keys,in,the,map,e,g,beans,can,be,empty,or,code,null,return,the,number,of,bean,definitions,found,throws,beans,exception,in,case,of,loading,or,parsing,errors;public,int,register,bean,definitions,map,map,string,prefix,throws,beans,exception,return,register,bean,definitions,map,prefix,map,map
PropertiesBeanDefinitionReader -> public int registerBeanDefinitions(Map map, String prefix) throws BeansException;1357119239;Register bean definitions contained in a Map._Ignore ineligible properties._@param map Map name -> property (String or Object). Property values_will be strings if coming from a Properties file etc. Property names_(keys) <b>must</b> be Strings. Class keys must be Strings._@param prefix a filter within the keys in the map: e.g. 'beans.'_(can be empty or {@code null})_@return the number of bean definitions found_@throws BeansException in case of loading or parsing errors;public int registerBeanDefinitions(Map map, String prefix) throws BeansException {_		return registerBeanDefinitions(map, prefix, "Map " + map)__	};register,bean,definitions,contained,in,a,map,ignore,ineligible,properties,param,map,map,name,property,string,or,object,property,values,will,be,strings,if,coming,from,a,properties,file,etc,property,names,keys,b,must,b,be,strings,class,keys,must,be,strings,param,prefix,a,filter,within,the,keys,in,the,map,e,g,beans,can,be,empty,or,code,null,return,the,number,of,bean,definitions,found,throws,beans,exception,in,case,of,loading,or,parsing,errors;public,int,register,bean,definitions,map,map,string,prefix,throws,beans,exception,return,register,bean,definitions,map,prefix,map,map
PropertiesBeanDefinitionReader -> public int registerBeanDefinitions(Map map, String prefix) throws BeansException;1362408075;Register bean definitions contained in a Map._Ignore ineligible properties._@param map Map name -> property (String or Object). Property values_will be strings if coming from a Properties file etc. Property names_(keys) <b>must</b> be Strings. Class keys must be Strings._@param prefix a filter within the keys in the map: e.g. 'beans.'_(can be empty or {@code null})_@return the number of bean definitions found_@throws BeansException in case of loading or parsing errors;public int registerBeanDefinitions(Map map, String prefix) throws BeansException {_		return registerBeanDefinitions(map, prefix, "Map " + map)__	};register,bean,definitions,contained,in,a,map,ignore,ineligible,properties,param,map,map,name,property,string,or,object,property,values,will,be,strings,if,coming,from,a,properties,file,etc,property,names,keys,b,must,b,be,strings,class,keys,must,be,strings,param,prefix,a,filter,within,the,keys,in,the,map,e,g,beans,can,be,empty,or,code,null,return,the,number,of,bean,definitions,found,throws,beans,exception,in,case,of,loading,or,parsing,errors;public,int,register,bean,definitions,map,map,string,prefix,throws,beans,exception,return,register,bean,definitions,map,prefix,map,map
PropertiesBeanDefinitionReader -> public int registerBeanDefinitions(Map map, String prefix) throws BeansException;1368482696;Register bean definitions contained in a Map._Ignore ineligible properties._@param map Map name -> property (String or Object). Property values_will be strings if coming from a Properties file etc. Property names_(keys) <b>must</b> be Strings. Class keys must be Strings._@param prefix a filter within the keys in the map: e.g. 'beans.'_(can be empty or {@code null})_@return the number of bean definitions found_@throws BeansException in case of loading or parsing errors;public int registerBeanDefinitions(Map map, String prefix) throws BeansException {_		return registerBeanDefinitions(map, prefix, "Map " + map)__	};register,bean,definitions,contained,in,a,map,ignore,ineligible,properties,param,map,map,name,property,string,or,object,property,values,will,be,strings,if,coming,from,a,properties,file,etc,property,names,keys,b,must,b,be,strings,class,keys,must,be,strings,param,prefix,a,filter,within,the,keys,in,the,map,e,g,beans,can,be,empty,or,code,null,return,the,number,of,bean,definitions,found,throws,beans,exception,in,case,of,loading,or,parsing,errors;public,int,register,bean,definitions,map,map,string,prefix,throws,beans,exception,return,register,bean,definitions,map,prefix,map,map
PropertiesBeanDefinitionReader -> public void setDefaultParentBean(@Nullable String defaultParentBean);1498780456;Set the default parent bean for this bean factory._If a child bean definition handled by this factory provides neither_a parent nor a class attribute, this default value gets used._<p>Can be used e.g. for view definition files, to define a parent_with a default view class and common attributes for all views._View definitions that define their own parent or carry their own_class can still override this._<p>Strictly speaking, the rule that a default parent setting does_not apply to a bean definition that carries a class is there for_backwards compatibility reasons. It still matches the typical use case.;public void setDefaultParentBean(@Nullable String defaultParentBean) {_		this.defaultParentBean = defaultParentBean__	};set,the,default,parent,bean,for,this,bean,factory,if,a,child,bean,definition,handled,by,this,factory,provides,neither,a,parent,nor,a,class,attribute,this,default,value,gets,used,p,can,be,used,e,g,for,view,definition,files,to,define,a,parent,with,a,default,view,class,and,common,attributes,for,all,views,view,definitions,that,define,their,own,parent,or,carry,their,own,class,can,still,override,this,p,strictly,speaking,the,rule,that,a,default,parent,setting,does,not,apply,to,a,bean,definition,that,carries,a,class,is,there,for,backwards,compatibility,reasons,it,still,matches,the,typical,use,case;public,void,set,default,parent,bean,nullable,string,default,parent,bean,this,default,parent,bean,default,parent,bean
PropertiesBeanDefinitionReader -> public void setDefaultParentBean(@Nullable String defaultParentBean);1518167602;Set the default parent bean for this bean factory._If a child bean definition handled by this factory provides neither_a parent nor a class attribute, this default value gets used._<p>Can be used e.g. for view definition files, to define a parent_with a default view class and common attributes for all views._View definitions that define their own parent or carry their own_class can still override this._<p>Strictly speaking, the rule that a default parent setting does_not apply to a bean definition that carries a class is there for_backwards compatibility reasons. It still matches the typical use case.;public void setDefaultParentBean(@Nullable String defaultParentBean) {_		this.defaultParentBean = defaultParentBean__	};set,the,default,parent,bean,for,this,bean,factory,if,a,child,bean,definition,handled,by,this,factory,provides,neither,a,parent,nor,a,class,attribute,this,default,value,gets,used,p,can,be,used,e,g,for,view,definition,files,to,define,a,parent,with,a,default,view,class,and,common,attributes,for,all,views,view,definitions,that,define,their,own,parent,or,carry,their,own,class,can,still,override,this,p,strictly,speaking,the,rule,that,a,default,parent,setting,does,not,apply,to,a,bean,definition,that,carries,a,class,is,there,for,backwards,compatibility,reasons,it,still,matches,the,typical,use,case;public,void,set,default,parent,bean,nullable,string,default,parent,bean,this,default,parent,bean,default,parent,bean
PropertiesBeanDefinitionReader -> public void setDefaultParentBean(@Nullable String defaultParentBean);1518167818;Set the default parent bean for this bean factory._If a child bean definition handled by this factory provides neither_a parent nor a class attribute, this default value gets used._<p>Can be used e.g. for view definition files, to define a parent_with a default view class and common attributes for all views._View definitions that define their own parent or carry their own_class can still override this._<p>Strictly speaking, the rule that a default parent setting does_not apply to a bean definition that carries a class is there for_backwards compatibility reasons. It still matches the typical use case.;public void setDefaultParentBean(@Nullable String defaultParentBean) {_		this.defaultParentBean = defaultParentBean__	};set,the,default,parent,bean,for,this,bean,factory,if,a,child,bean,definition,handled,by,this,factory,provides,neither,a,parent,nor,a,class,attribute,this,default,value,gets,used,p,can,be,used,e,g,for,view,definition,files,to,define,a,parent,with,a,default,view,class,and,common,attributes,for,all,views,view,definitions,that,define,their,own,parent,or,carry,their,own,class,can,still,override,this,p,strictly,speaking,the,rule,that,a,default,parent,setting,does,not,apply,to,a,bean,definition,that,carries,a,class,is,there,for,backwards,compatibility,reasons,it,still,matches,the,typical,use,case;public,void,set,default,parent,bean,nullable,string,default,parent,bean,this,default,parent,bean,default,parent,bean
PropertiesBeanDefinitionReader -> public void setDefaultParentBean(@Nullable String defaultParentBean);1530174524;Set the default parent bean for this bean factory._If a child bean definition handled by this factory provides neither_a parent nor a class attribute, this default value gets used._<p>Can be used e.g. for view definition files, to define a parent_with a default view class and common attributes for all views._View definitions that define their own parent or carry their own_class can still override this._<p>Strictly speaking, the rule that a default parent setting does_not apply to a bean definition that carries a class is there for_backwards compatibility reasons. It still matches the typical use case.;public void setDefaultParentBean(@Nullable String defaultParentBean) {_		this.defaultParentBean = defaultParentBean__	};set,the,default,parent,bean,for,this,bean,factory,if,a,child,bean,definition,handled,by,this,factory,provides,neither,a,parent,nor,a,class,attribute,this,default,value,gets,used,p,can,be,used,e,g,for,view,definition,files,to,define,a,parent,with,a,default,view,class,and,common,attributes,for,all,views,view,definitions,that,define,their,own,parent,or,carry,their,own,class,can,still,override,this,p,strictly,speaking,the,rule,that,a,default,parent,setting,does,not,apply,to,a,bean,definition,that,carries,a,class,is,there,for,backwards,compatibility,reasons,it,still,matches,the,typical,use,case;public,void,set,default,parent,bean,nullable,string,default,parent,bean,this,default,parent,bean,default,parent,bean
PropertiesBeanDefinitionReader -> public void setDefaultParentBean(@Nullable String defaultParentBean);1532706365;Set the default parent bean for this bean factory._If a child bean definition handled by this factory provides neither_a parent nor a class attribute, this default value gets used._<p>Can be used e.g. for view definition files, to define a parent_with a default view class and common attributes for all views._View definitions that define their own parent or carry their own_class can still override this._<p>Strictly speaking, the rule that a default parent setting does_not apply to a bean definition that carries a class is there for_backwards compatibility reasons. It still matches the typical use case.;public void setDefaultParentBean(@Nullable String defaultParentBean) {_		this.defaultParentBean = defaultParentBean__	};set,the,default,parent,bean,for,this,bean,factory,if,a,child,bean,definition,handled,by,this,factory,provides,neither,a,parent,nor,a,class,attribute,this,default,value,gets,used,p,can,be,used,e,g,for,view,definition,files,to,define,a,parent,with,a,default,view,class,and,common,attributes,for,all,views,view,definitions,that,define,their,own,parent,or,carry,their,own,class,can,still,override,this,p,strictly,speaking,the,rule,that,a,default,parent,setting,does,not,apply,to,a,bean,definition,that,carries,a,class,is,there,for,backwards,compatibility,reasons,it,still,matches,the,typical,use,case;public,void,set,default,parent,bean,nullable,string,default,parent,bean,this,default,parent,bean,default,parent,bean
PropertiesBeanDefinitionReader -> public void setDefaultParentBean(@Nullable String defaultParentBean);1538724083;Set the default parent bean for this bean factory._If a child bean definition handled by this factory provides neither_a parent nor a class attribute, this default value gets used._<p>Can be used e.g. for view definition files, to define a parent_with a default view class and common attributes for all views._View definitions that define their own parent or carry their own_class can still override this._<p>Strictly speaking, the rule that a default parent setting does_not apply to a bean definition that carries a class is there for_backwards compatibility reasons. It still matches the typical use case.;public void setDefaultParentBean(@Nullable String defaultParentBean) {_		this.defaultParentBean = defaultParentBean__	};set,the,default,parent,bean,for,this,bean,factory,if,a,child,bean,definition,handled,by,this,factory,provides,neither,a,parent,nor,a,class,attribute,this,default,value,gets,used,p,can,be,used,e,g,for,view,definition,files,to,define,a,parent,with,a,default,view,class,and,common,attributes,for,all,views,view,definitions,that,define,their,own,parent,or,carry,their,own,class,can,still,override,this,p,strictly,speaking,the,rule,that,a,default,parent,setting,does,not,apply,to,a,bean,definition,that,carries,a,class,is,there,for,backwards,compatibility,reasons,it,still,matches,the,typical,use,case;public,void,set,default,parent,bean,nullable,string,default,parent,bean,this,default,parent,bean,default,parent,bean
PropertiesBeanDefinitionReader -> @Nullable 	public String getDefaultParentBean();1498780456;Return the default parent bean for this bean factory.;@Nullable_	public String getDefaultParentBean() {_		return this.defaultParentBean__	};return,the,default,parent,bean,for,this,bean,factory;nullable,public,string,get,default,parent,bean,return,this,default,parent,bean
PropertiesBeanDefinitionReader -> @Nullable 	public String getDefaultParentBean();1518167602;Return the default parent bean for this bean factory.;@Nullable_	public String getDefaultParentBean() {_		return this.defaultParentBean__	};return,the,default,parent,bean,for,this,bean,factory;nullable,public,string,get,default,parent,bean,return,this,default,parent,bean
PropertiesBeanDefinitionReader -> @Nullable 	public String getDefaultParentBean();1518167818;Return the default parent bean for this bean factory.;@Nullable_	public String getDefaultParentBean() {_		return this.defaultParentBean__	};return,the,default,parent,bean,for,this,bean,factory;nullable,public,string,get,default,parent,bean,return,this,default,parent,bean
PropertiesBeanDefinitionReader -> @Nullable 	public String getDefaultParentBean();1530174524;Return the default parent bean for this bean factory.;@Nullable_	public String getDefaultParentBean() {_		return this.defaultParentBean__	};return,the,default,parent,bean,for,this,bean,factory;nullable,public,string,get,default,parent,bean,return,this,default,parent,bean
PropertiesBeanDefinitionReader -> @Nullable 	public String getDefaultParentBean();1532706365;Return the default parent bean for this bean factory.;@Nullable_	public String getDefaultParentBean() {_		return this.defaultParentBean__	};return,the,default,parent,bean,for,this,bean,factory;nullable,public,string,get,default,parent,bean,return,this,default,parent,bean
PropertiesBeanDefinitionReader -> @Nullable 	public String getDefaultParentBean();1538724083;Return the default parent bean for this bean factory.;@Nullable_	public String getDefaultParentBean() {_		return this.defaultParentBean__	};return,the,default,parent,bean,for,this,bean,factory;nullable,public,string,get,default,parent,bean,return,this,default,parent,bean
PropertiesBeanDefinitionReader -> public int loadBeanDefinitions(Resource resource, @Nullable String prefix) throws BeanDefinitionStoreException;1495868221;Load bean definitions from the specified properties file._@param resource the resource descriptor for the properties file_@param prefix a filter within the keys in the map: e.g. 'beans.'_(can be empty or {@code null})_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int loadBeanDefinitions(Resource resource, @Nullable String prefix) throws BeanDefinitionStoreException {_		return loadBeanDefinitions(new EncodedResource(resource), prefix)__	};load,bean,definitions,from,the,specified,properties,file,param,resource,the,resource,descriptor,for,the,properties,file,param,prefix,a,filter,within,the,keys,in,the,map,e,g,beans,can,be,empty,or,code,null,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,load,bean,definitions,resource,resource,nullable,string,prefix,throws,bean,definition,store,exception,return,load,bean,definitions,new,encoded,resource,resource,prefix
PropertiesBeanDefinitionReader -> public int loadBeanDefinitions(Resource resource, @Nullable String prefix) throws BeanDefinitionStoreException;1496837955;Load bean definitions from the specified properties file._@param resource the resource descriptor for the properties file_@param prefix a filter within the keys in the map: e.g. 'beans.'_(can be empty or {@code null})_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int loadBeanDefinitions(Resource resource, @Nullable String prefix) throws BeanDefinitionStoreException {_		return loadBeanDefinitions(new EncodedResource(resource), prefix)__	};load,bean,definitions,from,the,specified,properties,file,param,resource,the,resource,descriptor,for,the,properties,file,param,prefix,a,filter,within,the,keys,in,the,map,e,g,beans,can,be,empty,or,code,null,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,load,bean,definitions,resource,resource,nullable,string,prefix,throws,bean,definition,store,exception,return,load,bean,definitions,new,encoded,resource,resource,prefix
PropertiesBeanDefinitionReader -> public int loadBeanDefinitions(Resource resource, @Nullable String prefix) throws BeanDefinitionStoreException;1498780456;Load bean definitions from the specified properties file._@param resource the resource descriptor for the properties file_@param prefix a filter within the keys in the map: e.g. 'beans.'_(can be empty or {@code null})_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int loadBeanDefinitions(Resource resource, @Nullable String prefix) throws BeanDefinitionStoreException {_		return loadBeanDefinitions(new EncodedResource(resource), prefix)__	};load,bean,definitions,from,the,specified,properties,file,param,resource,the,resource,descriptor,for,the,properties,file,param,prefix,a,filter,within,the,keys,in,the,map,e,g,beans,can,be,empty,or,code,null,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,load,bean,definitions,resource,resource,nullable,string,prefix,throws,bean,definition,store,exception,return,load,bean,definitions,new,encoded,resource,resource,prefix
PropertiesBeanDefinitionReader -> public int loadBeanDefinitions(Resource resource, @Nullable String prefix) throws BeanDefinitionStoreException;1518167602;Load bean definitions from the specified properties file._@param resource the resource descriptor for the properties file_@param prefix a filter within the keys in the map: e.g. 'beans.'_(can be empty or {@code null})_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int loadBeanDefinitions(Resource resource, @Nullable String prefix) throws BeanDefinitionStoreException {_		return loadBeanDefinitions(new EncodedResource(resource), prefix)__	};load,bean,definitions,from,the,specified,properties,file,param,resource,the,resource,descriptor,for,the,properties,file,param,prefix,a,filter,within,the,keys,in,the,map,e,g,beans,can,be,empty,or,code,null,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,load,bean,definitions,resource,resource,nullable,string,prefix,throws,bean,definition,store,exception,return,load,bean,definitions,new,encoded,resource,resource,prefix
PropertiesBeanDefinitionReader -> public int loadBeanDefinitions(Resource resource, @Nullable String prefix) throws BeanDefinitionStoreException;1518167818;Load bean definitions from the specified properties file._@param resource the resource descriptor for the properties file_@param prefix a filter within the keys in the map: e.g. 'beans.'_(can be empty or {@code null})_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int loadBeanDefinitions(Resource resource, @Nullable String prefix) throws BeanDefinitionStoreException {_		return loadBeanDefinitions(new EncodedResource(resource), prefix)__	};load,bean,definitions,from,the,specified,properties,file,param,resource,the,resource,descriptor,for,the,properties,file,param,prefix,a,filter,within,the,keys,in,the,map,e,g,beans,can,be,empty,or,code,null,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,load,bean,definitions,resource,resource,nullable,string,prefix,throws,bean,definition,store,exception,return,load,bean,definitions,new,encoded,resource,resource,prefix
PropertiesBeanDefinitionReader -> public int loadBeanDefinitions(Resource resource, @Nullable String prefix) throws BeanDefinitionStoreException;1530174524;Load bean definitions from the specified properties file._@param resource the resource descriptor for the properties file_@param prefix a filter within the keys in the map: e.g. 'beans.'_(can be empty or {@code null})_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int loadBeanDefinitions(Resource resource, @Nullable String prefix) throws BeanDefinitionStoreException {_		return loadBeanDefinitions(new EncodedResource(resource), prefix)__	};load,bean,definitions,from,the,specified,properties,file,param,resource,the,resource,descriptor,for,the,properties,file,param,prefix,a,filter,within,the,keys,in,the,map,e,g,beans,can,be,empty,or,code,null,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,load,bean,definitions,resource,resource,nullable,string,prefix,throws,bean,definition,store,exception,return,load,bean,definitions,new,encoded,resource,resource,prefix
PropertiesBeanDefinitionReader -> public int loadBeanDefinitions(Resource resource, @Nullable String prefix) throws BeanDefinitionStoreException;1532706365;Load bean definitions from the specified properties file._@param resource the resource descriptor for the properties file_@param prefix a filter within the keys in the map: e.g. 'beans.'_(can be empty or {@code null})_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int loadBeanDefinitions(Resource resource, @Nullable String prefix) throws BeanDefinitionStoreException {_		return loadBeanDefinitions(new EncodedResource(resource), prefix)__	};load,bean,definitions,from,the,specified,properties,file,param,resource,the,resource,descriptor,for,the,properties,file,param,prefix,a,filter,within,the,keys,in,the,map,e,g,beans,can,be,empty,or,code,null,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,load,bean,definitions,resource,resource,nullable,string,prefix,throws,bean,definition,store,exception,return,load,bean,definitions,new,encoded,resource,resource,prefix
PropertiesBeanDefinitionReader -> public int loadBeanDefinitions(Resource resource, @Nullable String prefix) throws BeanDefinitionStoreException;1538724083;Load bean definitions from the specified properties file._@param resource the resource descriptor for the properties file_@param prefix a filter within the keys in the map: e.g. 'beans.'_(can be empty or {@code null})_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int loadBeanDefinitions(Resource resource, @Nullable String prefix) throws BeanDefinitionStoreException {_		return loadBeanDefinitions(new EncodedResource(resource), prefix)__	};load,bean,definitions,from,the,specified,properties,file,param,resource,the,resource,descriptor,for,the,properties,file,param,prefix,a,filter,within,the,keys,in,the,map,e,g,beans,can,be,empty,or,code,null,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,load,bean,definitions,resource,resource,nullable,string,prefix,throws,bean,definition,store,exception,return,load,bean,definitions,new,encoded,resource,resource,prefix
PropertiesBeanDefinitionReader -> public String getDefaultParentBean();1328020251;Return the default parent bean for this bean factory.;public String getDefaultParentBean() {_		return this.defaultParentBean__	};return,the,default,parent,bean,for,this,bean,factory;public,string,get,default,parent,bean,return,this,default,parent,bean
PropertiesBeanDefinitionReader -> public String getDefaultParentBean();1356735495;Return the default parent bean for this bean factory.;public String getDefaultParentBean() {_		return this.defaultParentBean__	};return,the,default,parent,bean,for,this,bean,factory;public,string,get,default,parent,bean,return,this,default,parent,bean
PropertiesBeanDefinitionReader -> public String getDefaultParentBean();1357119239;Return the default parent bean for this bean factory.;public String getDefaultParentBean() {_		return this.defaultParentBean__	};return,the,default,parent,bean,for,this,bean,factory;public,string,get,default,parent,bean,return,this,default,parent,bean
PropertiesBeanDefinitionReader -> public String getDefaultParentBean();1362408075;Return the default parent bean for this bean factory.;public String getDefaultParentBean() {_		return this.defaultParentBean__	};return,the,default,parent,bean,for,this,bean,factory;public,string,get,default,parent,bean,return,this,default,parent,bean
PropertiesBeanDefinitionReader -> public String getDefaultParentBean();1368482696;Return the default parent bean for this bean factory.;public String getDefaultParentBean() {_		return this.defaultParentBean__	};return,the,default,parent,bean,for,this,bean,factory;public,string,get,default,parent,bean,return,this,default,parent,bean
PropertiesBeanDefinitionReader -> public String getDefaultParentBean();1385412762;Return the default parent bean for this bean factory.;public String getDefaultParentBean() {_		return this.defaultParentBean__	};return,the,default,parent,bean,for,this,bean,factory;public,string,get,default,parent,bean,return,this,default,parent,bean
PropertiesBeanDefinitionReader -> public String getDefaultParentBean();1467730834;Return the default parent bean for this bean factory.;public String getDefaultParentBean() {_		return this.defaultParentBean__	};return,the,default,parent,bean,for,this,bean,factory;public,string,get,default,parent,bean,return,this,default,parent,bean
PropertiesBeanDefinitionReader -> public String getDefaultParentBean();1495868221;Return the default parent bean for this bean factory.;public String getDefaultParentBean() {_		return this.defaultParentBean__	};return,the,default,parent,bean,for,this,bean,factory;public,string,get,default,parent,bean,return,this,default,parent,bean
PropertiesBeanDefinitionReader -> public String getDefaultParentBean();1496837955;Return the default parent bean for this bean factory.;public String getDefaultParentBean() {_		return this.defaultParentBean__	};return,the,default,parent,bean,for,this,bean,factory;public,string,get,default,parent,bean,return,this,default,parent,bean
PropertiesBeanDefinitionReader -> public int registerBeanDefinitions(Map<?, ?> map) throws BeansException;1385412762;Register bean definitions contained in a Map,_using all property keys (i.e. not filtering by prefix)._@param map Map: name -> property (String or Object). Property values_will be strings if coming from a Properties file etc. Property names_(keys) <b>must</b> be Strings. Class keys must be Strings._@return the number of bean definitions found_@throws BeansException in case of loading or parsing errors_@see #registerBeanDefinitions(java.util.Map, String, String);public int registerBeanDefinitions(Map<?, ?> map) throws BeansException {_		return registerBeanDefinitions(map, null)__	};register,bean,definitions,contained,in,a,map,using,all,property,keys,i,e,not,filtering,by,prefix,param,map,map,name,property,string,or,object,property,values,will,be,strings,if,coming,from,a,properties,file,etc,property,names,keys,b,must,b,be,strings,class,keys,must,be,strings,return,the,number,of,bean,definitions,found,throws,beans,exception,in,case,of,loading,or,parsing,errors,see,register,bean,definitions,java,util,map,string,string;public,int,register,bean,definitions,map,map,throws,beans,exception,return,register,bean,definitions,map,null
PropertiesBeanDefinitionReader -> public int registerBeanDefinitions(Map<?, ?> map) throws BeansException;1467730834;Register bean definitions contained in a Map,_using all property keys (i.e. not filtering by prefix)._@param map Map: name -> property (String or Object). Property values_will be strings if coming from a Properties file etc. Property names_(keys) <b>must</b> be Strings. Class keys must be Strings._@return the number of bean definitions found_@throws BeansException in case of loading or parsing errors_@see #registerBeanDefinitions(java.util.Map, String, String);public int registerBeanDefinitions(Map<?, ?> map) throws BeansException {_		return registerBeanDefinitions(map, null)__	};register,bean,definitions,contained,in,a,map,using,all,property,keys,i,e,not,filtering,by,prefix,param,map,map,name,property,string,or,object,property,values,will,be,strings,if,coming,from,a,properties,file,etc,property,names,keys,b,must,b,be,strings,class,keys,must,be,strings,return,the,number,of,bean,definitions,found,throws,beans,exception,in,case,of,loading,or,parsing,errors,see,register,bean,definitions,java,util,map,string,string;public,int,register,bean,definitions,map,map,throws,beans,exception,return,register,bean,definitions,map,null
PropertiesBeanDefinitionReader -> public int registerBeanDefinitions(Map<?, ?> map) throws BeansException;1495868221;Register bean definitions contained in a Map,_using all property keys (i.e. not filtering by prefix)._@param map Map: name -> property (String or Object). Property values_will be strings if coming from a Properties file etc. Property names_(keys) <b>must</b> be Strings. Class keys must be Strings._@return the number of bean definitions found_@throws BeansException in case of loading or parsing errors_@see #registerBeanDefinitions(java.util.Map, String, String);public int registerBeanDefinitions(Map<?, ?> map) throws BeansException {_		return registerBeanDefinitions(map, null)__	};register,bean,definitions,contained,in,a,map,using,all,property,keys,i,e,not,filtering,by,prefix,param,map,map,name,property,string,or,object,property,values,will,be,strings,if,coming,from,a,properties,file,etc,property,names,keys,b,must,b,be,strings,class,keys,must,be,strings,return,the,number,of,bean,definitions,found,throws,beans,exception,in,case,of,loading,or,parsing,errors,see,register,bean,definitions,java,util,map,string,string;public,int,register,bean,definitions,map,map,throws,beans,exception,return,register,bean,definitions,map,null
PropertiesBeanDefinitionReader -> public int registerBeanDefinitions(Map<?, ?> map) throws BeansException;1496837955;Register bean definitions contained in a Map,_using all property keys (i.e. not filtering by prefix)._@param map Map: name -> property (String or Object). Property values_will be strings if coming from a Properties file etc. Property names_(keys) <b>must</b> be Strings. Class keys must be Strings._@return the number of bean definitions found_@throws BeansException in case of loading or parsing errors_@see #registerBeanDefinitions(java.util.Map, String, String);public int registerBeanDefinitions(Map<?, ?> map) throws BeansException {_		return registerBeanDefinitions(map, null)__	};register,bean,definitions,contained,in,a,map,using,all,property,keys,i,e,not,filtering,by,prefix,param,map,map,name,property,string,or,object,property,values,will,be,strings,if,coming,from,a,properties,file,etc,property,names,keys,b,must,b,be,strings,class,keys,must,be,strings,return,the,number,of,bean,definitions,found,throws,beans,exception,in,case,of,loading,or,parsing,errors,see,register,bean,definitions,java,util,map,string,string;public,int,register,bean,definitions,map,map,throws,beans,exception,return,register,bean,definitions,map,null
PropertiesBeanDefinitionReader -> public int registerBeanDefinitions(Map<?, ?> map) throws BeansException;1498780456;Register bean definitions contained in a Map,_using all property keys (i.e. not filtering by prefix)._@param map Map: name -> property (String or Object). Property values_will be strings if coming from a Properties file etc. Property names_(keys) <b>must</b> be Strings. Class keys must be Strings._@return the number of bean definitions found_@throws BeansException in case of loading or parsing errors_@see #registerBeanDefinitions(java.util.Map, String, String);public int registerBeanDefinitions(Map<?, ?> map) throws BeansException {_		return registerBeanDefinitions(map, null)__	};register,bean,definitions,contained,in,a,map,using,all,property,keys,i,e,not,filtering,by,prefix,param,map,map,name,property,string,or,object,property,values,will,be,strings,if,coming,from,a,properties,file,etc,property,names,keys,b,must,b,be,strings,class,keys,must,be,strings,return,the,number,of,bean,definitions,found,throws,beans,exception,in,case,of,loading,or,parsing,errors,see,register,bean,definitions,java,util,map,string,string;public,int,register,bean,definitions,map,map,throws,beans,exception,return,register,bean,definitions,map,null
PropertiesBeanDefinitionReader -> public int registerBeanDefinitions(Map<?, ?> map) throws BeansException;1518167602;Register bean definitions contained in a Map,_using all property keys (i.e. not filtering by prefix)._@param map Map: name -> property (String or Object). Property values_will be strings if coming from a Properties file etc. Property names_(keys) <b>must</b> be Strings. Class keys must be Strings._@return the number of bean definitions found_@throws BeansException in case of loading or parsing errors_@see #registerBeanDefinitions(java.util.Map, String, String);public int registerBeanDefinitions(Map<?, ?> map) throws BeansException {_		return registerBeanDefinitions(map, null)__	};register,bean,definitions,contained,in,a,map,using,all,property,keys,i,e,not,filtering,by,prefix,param,map,map,name,property,string,or,object,property,values,will,be,strings,if,coming,from,a,properties,file,etc,property,names,keys,b,must,b,be,strings,class,keys,must,be,strings,return,the,number,of,bean,definitions,found,throws,beans,exception,in,case,of,loading,or,parsing,errors,see,register,bean,definitions,java,util,map,string,string;public,int,register,bean,definitions,map,map,throws,beans,exception,return,register,bean,definitions,map,null
PropertiesBeanDefinitionReader -> public int registerBeanDefinitions(Map<?, ?> map) throws BeansException;1518167818;Register bean definitions contained in a Map,_using all property keys (i.e. not filtering by prefix)._@param map Map: name -> property (String or Object). Property values_will be strings if coming from a Properties file etc. Property names_(keys) <b>must</b> be Strings. Class keys must be Strings._@return the number of bean definitions found_@throws BeansException in case of loading or parsing errors_@see #registerBeanDefinitions(java.util.Map, String, String);public int registerBeanDefinitions(Map<?, ?> map) throws BeansException {_		return registerBeanDefinitions(map, null)__	};register,bean,definitions,contained,in,a,map,using,all,property,keys,i,e,not,filtering,by,prefix,param,map,map,name,property,string,or,object,property,values,will,be,strings,if,coming,from,a,properties,file,etc,property,names,keys,b,must,b,be,strings,class,keys,must,be,strings,return,the,number,of,bean,definitions,found,throws,beans,exception,in,case,of,loading,or,parsing,errors,see,register,bean,definitions,java,util,map,string,string;public,int,register,bean,definitions,map,map,throws,beans,exception,return,register,bean,definitions,map,null
PropertiesBeanDefinitionReader -> public int registerBeanDefinitions(Map<?, ?> map) throws BeansException;1530174524;Register bean definitions contained in a Map, using all property keys (i.e. not_filtering by prefix)._@param map a map of {@code name} to {@code property} (String or Object). Property_values will be strings if coming from a Properties file etc. Property names_(keys) <b>must</b> be Strings. Class keys must be Strings._@return the number of bean definitions found_@throws BeansException in case of loading or parsing errors_@see #registerBeanDefinitions(java.util.Map, String, String);public int registerBeanDefinitions(Map<?, ?> map) throws BeansException {_		return registerBeanDefinitions(map, null)__	};register,bean,definitions,contained,in,a,map,using,all,property,keys,i,e,not,filtering,by,prefix,param,map,a,map,of,code,name,to,code,property,string,or,object,property,values,will,be,strings,if,coming,from,a,properties,file,etc,property,names,keys,b,must,b,be,strings,class,keys,must,be,strings,return,the,number,of,bean,definitions,found,throws,beans,exception,in,case,of,loading,or,parsing,errors,see,register,bean,definitions,java,util,map,string,string;public,int,register,bean,definitions,map,map,throws,beans,exception,return,register,bean,definitions,map,null
PropertiesBeanDefinitionReader -> public int registerBeanDefinitions(Map<?, ?> map) throws BeansException;1532706365;Register bean definitions contained in a Map, using all property keys (i.e. not_filtering by prefix)._@param map a map of {@code name} to {@code property} (String or Object). Property_values will be strings if coming from a Properties file etc. Property names_(keys) <b>must</b> be Strings. Class keys must be Strings._@return the number of bean definitions found_@throws BeansException in case of loading or parsing errors_@see #registerBeanDefinitions(java.util.Map, String, String);public int registerBeanDefinitions(Map<?, ?> map) throws BeansException {_		return registerBeanDefinitions(map, null)__	};register,bean,definitions,contained,in,a,map,using,all,property,keys,i,e,not,filtering,by,prefix,param,map,a,map,of,code,name,to,code,property,string,or,object,property,values,will,be,strings,if,coming,from,a,properties,file,etc,property,names,keys,b,must,b,be,strings,class,keys,must,be,strings,return,the,number,of,bean,definitions,found,throws,beans,exception,in,case,of,loading,or,parsing,errors,see,register,bean,definitions,java,util,map,string,string;public,int,register,bean,definitions,map,map,throws,beans,exception,return,register,bean,definitions,map,null
PropertiesBeanDefinitionReader -> public int registerBeanDefinitions(Map<?, ?> map) throws BeansException;1538724083;Register bean definitions contained in a Map, using all property keys (i.e. not_filtering by prefix)._@param map a map of {@code name} to {@code property} (String or Object). Property_values will be strings if coming from a Properties file etc. Property names_(keys) <b>must</b> be Strings. Class keys must be Strings._@return the number of bean definitions found_@throws BeansException in case of loading or parsing errors_@see #registerBeanDefinitions(java.util.Map, String, String);public int registerBeanDefinitions(Map<?, ?> map) throws BeansException {_		return registerBeanDefinitions(map, null)__	};register,bean,definitions,contained,in,a,map,using,all,property,keys,i,e,not,filtering,by,prefix,param,map,a,map,of,code,name,to,code,property,string,or,object,property,values,will,be,strings,if,coming,from,a,properties,file,etc,property,names,keys,b,must,b,be,strings,class,keys,must,be,strings,return,the,number,of,bean,definitions,found,throws,beans,exception,in,case,of,loading,or,parsing,errors,see,register,bean,definitions,java,util,map,string,string;public,int,register,bean,definitions,map,map,throws,beans,exception,return,register,bean,definitions,map,null
PropertiesBeanDefinitionReader -> public int loadBeanDefinitions(Resource resource, String prefix) throws BeanDefinitionStoreException;1328020251;Load bean definitions from the specified properties file._@param resource the resource descriptor for the properties file_@param prefix a filter within the keys in the map: e.g. 'beans.'_(can be empty or <code>null</code>)_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int loadBeanDefinitions(Resource resource, String prefix) throws BeanDefinitionStoreException {_		return loadBeanDefinitions(new EncodedResource(resource), prefix)__	};load,bean,definitions,from,the,specified,properties,file,param,resource,the,resource,descriptor,for,the,properties,file,param,prefix,a,filter,within,the,keys,in,the,map,e,g,beans,can,be,empty,or,code,null,code,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,load,bean,definitions,resource,resource,string,prefix,throws,bean,definition,store,exception,return,load,bean,definitions,new,encoded,resource,resource,prefix
PropertiesBeanDefinitionReader -> public int loadBeanDefinitions(Resource resource, String prefix) throws BeanDefinitionStoreException;1356735495;Load bean definitions from the specified properties file._@param resource the resource descriptor for the properties file_@param prefix a filter within the keys in the map: e.g. 'beans.'_(can be empty or {@code null})_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int loadBeanDefinitions(Resource resource, String prefix) throws BeanDefinitionStoreException {_		return loadBeanDefinitions(new EncodedResource(resource), prefix)__	};load,bean,definitions,from,the,specified,properties,file,param,resource,the,resource,descriptor,for,the,properties,file,param,prefix,a,filter,within,the,keys,in,the,map,e,g,beans,can,be,empty,or,code,null,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,load,bean,definitions,resource,resource,string,prefix,throws,bean,definition,store,exception,return,load,bean,definitions,new,encoded,resource,resource,prefix
PropertiesBeanDefinitionReader -> public int loadBeanDefinitions(Resource resource, String prefix) throws BeanDefinitionStoreException;1357119239;Load bean definitions from the specified properties file._@param resource the resource descriptor for the properties file_@param prefix a filter within the keys in the map: e.g. 'beans.'_(can be empty or {@code null})_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int loadBeanDefinitions(Resource resource, String prefix) throws BeanDefinitionStoreException {_		return loadBeanDefinitions(new EncodedResource(resource), prefix)__	};load,bean,definitions,from,the,specified,properties,file,param,resource,the,resource,descriptor,for,the,properties,file,param,prefix,a,filter,within,the,keys,in,the,map,e,g,beans,can,be,empty,or,code,null,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,load,bean,definitions,resource,resource,string,prefix,throws,bean,definition,store,exception,return,load,bean,definitions,new,encoded,resource,resource,prefix
PropertiesBeanDefinitionReader -> public int loadBeanDefinitions(Resource resource, String prefix) throws BeanDefinitionStoreException;1362408075;Load bean definitions from the specified properties file._@param resource the resource descriptor for the properties file_@param prefix a filter within the keys in the map: e.g. 'beans.'_(can be empty or {@code null})_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int loadBeanDefinitions(Resource resource, String prefix) throws BeanDefinitionStoreException {_		return loadBeanDefinitions(new EncodedResource(resource), prefix)__	};load,bean,definitions,from,the,specified,properties,file,param,resource,the,resource,descriptor,for,the,properties,file,param,prefix,a,filter,within,the,keys,in,the,map,e,g,beans,can,be,empty,or,code,null,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,load,bean,definitions,resource,resource,string,prefix,throws,bean,definition,store,exception,return,load,bean,definitions,new,encoded,resource,resource,prefix
PropertiesBeanDefinitionReader -> public int loadBeanDefinitions(Resource resource, String prefix) throws BeanDefinitionStoreException;1368482696;Load bean definitions from the specified properties file._@param resource the resource descriptor for the properties file_@param prefix a filter within the keys in the map: e.g. 'beans.'_(can be empty or {@code null})_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int loadBeanDefinitions(Resource resource, String prefix) throws BeanDefinitionStoreException {_		return loadBeanDefinitions(new EncodedResource(resource), prefix)__	};load,bean,definitions,from,the,specified,properties,file,param,resource,the,resource,descriptor,for,the,properties,file,param,prefix,a,filter,within,the,keys,in,the,map,e,g,beans,can,be,empty,or,code,null,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,load,bean,definitions,resource,resource,string,prefix,throws,bean,definition,store,exception,return,load,bean,definitions,new,encoded,resource,resource,prefix
PropertiesBeanDefinitionReader -> public int loadBeanDefinitions(Resource resource, String prefix) throws BeanDefinitionStoreException;1385412762;Load bean definitions from the specified properties file._@param resource the resource descriptor for the properties file_@param prefix a filter within the keys in the map: e.g. 'beans.'_(can be empty or {@code null})_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int loadBeanDefinitions(Resource resource, String prefix) throws BeanDefinitionStoreException {_		return loadBeanDefinitions(new EncodedResource(resource), prefix)__	};load,bean,definitions,from,the,specified,properties,file,param,resource,the,resource,descriptor,for,the,properties,file,param,prefix,a,filter,within,the,keys,in,the,map,e,g,beans,can,be,empty,or,code,null,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,load,bean,definitions,resource,resource,string,prefix,throws,bean,definition,store,exception,return,load,bean,definitions,new,encoded,resource,resource,prefix
PropertiesBeanDefinitionReader -> public int loadBeanDefinitions(Resource resource, String prefix) throws BeanDefinitionStoreException;1467730834;Load bean definitions from the specified properties file._@param resource the resource descriptor for the properties file_@param prefix a filter within the keys in the map: e.g. 'beans.'_(can be empty or {@code null})_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int loadBeanDefinitions(Resource resource, String prefix) throws BeanDefinitionStoreException {_		return loadBeanDefinitions(new EncodedResource(resource), prefix)__	};load,bean,definitions,from,the,specified,properties,file,param,resource,the,resource,descriptor,for,the,properties,file,param,prefix,a,filter,within,the,keys,in,the,map,e,g,beans,can,be,empty,or,code,null,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,load,bean,definitions,resource,resource,string,prefix,throws,bean,definition,store,exception,return,load,bean,definitions,new,encoded,resource,resource,prefix
PropertiesBeanDefinitionReader -> public PropertiesBeanDefinitionReader(BeanDefinitionRegistry registry);1328020251;Create new PropertiesBeanDefinitionReader for the given bean factory._@param registry the BeanFactory to load bean definitions into,_in the form of a BeanDefinitionRegistry;public PropertiesBeanDefinitionReader(BeanDefinitionRegistry registry) {_		super(registry)__	};create,new,properties,bean,definition,reader,for,the,given,bean,factory,param,registry,the,bean,factory,to,load,bean,definitions,into,in,the,form,of,a,bean,definition,registry;public,properties,bean,definition,reader,bean,definition,registry,registry,super,registry
PropertiesBeanDefinitionReader -> public PropertiesBeanDefinitionReader(BeanDefinitionRegistry registry);1356735495;Create new PropertiesBeanDefinitionReader for the given bean factory._@param registry the BeanFactory to load bean definitions into,_in the form of a BeanDefinitionRegistry;public PropertiesBeanDefinitionReader(BeanDefinitionRegistry registry) {_		super(registry)__	};create,new,properties,bean,definition,reader,for,the,given,bean,factory,param,registry,the,bean,factory,to,load,bean,definitions,into,in,the,form,of,a,bean,definition,registry;public,properties,bean,definition,reader,bean,definition,registry,registry,super,registry
PropertiesBeanDefinitionReader -> public PropertiesBeanDefinitionReader(BeanDefinitionRegistry registry);1357119239;Create new PropertiesBeanDefinitionReader for the given bean factory._@param registry the BeanFactory to load bean definitions into,_in the form of a BeanDefinitionRegistry;public PropertiesBeanDefinitionReader(BeanDefinitionRegistry registry) {_		super(registry)__	};create,new,properties,bean,definition,reader,for,the,given,bean,factory,param,registry,the,bean,factory,to,load,bean,definitions,into,in,the,form,of,a,bean,definition,registry;public,properties,bean,definition,reader,bean,definition,registry,registry,super,registry
PropertiesBeanDefinitionReader -> public PropertiesBeanDefinitionReader(BeanDefinitionRegistry registry);1362408075;Create new PropertiesBeanDefinitionReader for the given bean factory._@param registry the BeanFactory to load bean definitions into,_in the form of a BeanDefinitionRegistry;public PropertiesBeanDefinitionReader(BeanDefinitionRegistry registry) {_		super(registry)__	};create,new,properties,bean,definition,reader,for,the,given,bean,factory,param,registry,the,bean,factory,to,load,bean,definitions,into,in,the,form,of,a,bean,definition,registry;public,properties,bean,definition,reader,bean,definition,registry,registry,super,registry
PropertiesBeanDefinitionReader -> public PropertiesBeanDefinitionReader(BeanDefinitionRegistry registry);1368482696;Create new PropertiesBeanDefinitionReader for the given bean factory._@param registry the BeanFactory to load bean definitions into,_in the form of a BeanDefinitionRegistry;public PropertiesBeanDefinitionReader(BeanDefinitionRegistry registry) {_		super(registry)__	};create,new,properties,bean,definition,reader,for,the,given,bean,factory,param,registry,the,bean,factory,to,load,bean,definitions,into,in,the,form,of,a,bean,definition,registry;public,properties,bean,definition,reader,bean,definition,registry,registry,super,registry
PropertiesBeanDefinitionReader -> public PropertiesBeanDefinitionReader(BeanDefinitionRegistry registry);1385412762;Create new PropertiesBeanDefinitionReader for the given bean factory._@param registry the BeanFactory to load bean definitions into,_in the form of a BeanDefinitionRegistry;public PropertiesBeanDefinitionReader(BeanDefinitionRegistry registry) {_		super(registry)__	};create,new,properties,bean,definition,reader,for,the,given,bean,factory,param,registry,the,bean,factory,to,load,bean,definitions,into,in,the,form,of,a,bean,definition,registry;public,properties,bean,definition,reader,bean,definition,registry,registry,super,registry
PropertiesBeanDefinitionReader -> public PropertiesBeanDefinitionReader(BeanDefinitionRegistry registry);1467730834;Create new PropertiesBeanDefinitionReader for the given bean factory._@param registry the BeanFactory to load bean definitions into,_in the form of a BeanDefinitionRegistry;public PropertiesBeanDefinitionReader(BeanDefinitionRegistry registry) {_		super(registry)__	};create,new,properties,bean,definition,reader,for,the,given,bean,factory,param,registry,the,bean,factory,to,load,bean,definitions,into,in,the,form,of,a,bean,definition,registry;public,properties,bean,definition,reader,bean,definition,registry,registry,super,registry
PropertiesBeanDefinitionReader -> public PropertiesBeanDefinitionReader(BeanDefinitionRegistry registry);1495868221;Create new PropertiesBeanDefinitionReader for the given bean factory._@param registry the BeanFactory to load bean definitions into,_in the form of a BeanDefinitionRegistry;public PropertiesBeanDefinitionReader(BeanDefinitionRegistry registry) {_		super(registry)__	};create,new,properties,bean,definition,reader,for,the,given,bean,factory,param,registry,the,bean,factory,to,load,bean,definitions,into,in,the,form,of,a,bean,definition,registry;public,properties,bean,definition,reader,bean,definition,registry,registry,super,registry
PropertiesBeanDefinitionReader -> public PropertiesBeanDefinitionReader(BeanDefinitionRegistry registry);1496837955;Create new PropertiesBeanDefinitionReader for the given bean factory._@param registry the BeanFactory to load bean definitions into,_in the form of a BeanDefinitionRegistry;public PropertiesBeanDefinitionReader(BeanDefinitionRegistry registry) {_		super(registry)__	};create,new,properties,bean,definition,reader,for,the,given,bean,factory,param,registry,the,bean,factory,to,load,bean,definitions,into,in,the,form,of,a,bean,definition,registry;public,properties,bean,definition,reader,bean,definition,registry,registry,super,registry
PropertiesBeanDefinitionReader -> public PropertiesBeanDefinitionReader(BeanDefinitionRegistry registry);1498780456;Create new PropertiesBeanDefinitionReader for the given bean factory._@param registry the BeanFactory to load bean definitions into,_in the form of a BeanDefinitionRegistry;public PropertiesBeanDefinitionReader(BeanDefinitionRegistry registry) {_		super(registry)__	};create,new,properties,bean,definition,reader,for,the,given,bean,factory,param,registry,the,bean,factory,to,load,bean,definitions,into,in,the,form,of,a,bean,definition,registry;public,properties,bean,definition,reader,bean,definition,registry,registry,super,registry
PropertiesBeanDefinitionReader -> public PropertiesBeanDefinitionReader(BeanDefinitionRegistry registry);1518167602;Create new PropertiesBeanDefinitionReader for the given bean factory._@param registry the BeanFactory to load bean definitions into,_in the form of a BeanDefinitionRegistry;public PropertiesBeanDefinitionReader(BeanDefinitionRegistry registry) {_		super(registry)__	};create,new,properties,bean,definition,reader,for,the,given,bean,factory,param,registry,the,bean,factory,to,load,bean,definitions,into,in,the,form,of,a,bean,definition,registry;public,properties,bean,definition,reader,bean,definition,registry,registry,super,registry
PropertiesBeanDefinitionReader -> public PropertiesBeanDefinitionReader(BeanDefinitionRegistry registry);1518167818;Create new PropertiesBeanDefinitionReader for the given bean factory._@param registry the BeanFactory to load bean definitions into,_in the form of a BeanDefinitionRegistry;public PropertiesBeanDefinitionReader(BeanDefinitionRegistry registry) {_		super(registry)__	};create,new,properties,bean,definition,reader,for,the,given,bean,factory,param,registry,the,bean,factory,to,load,bean,definitions,into,in,the,form,of,a,bean,definition,registry;public,properties,bean,definition,reader,bean,definition,registry,registry,super,registry
PropertiesBeanDefinitionReader -> public PropertiesBeanDefinitionReader(BeanDefinitionRegistry registry);1530174524;Create new PropertiesBeanDefinitionReader for the given bean factory._@param registry the BeanFactory to load bean definitions into,_in the form of a BeanDefinitionRegistry;public PropertiesBeanDefinitionReader(BeanDefinitionRegistry registry) {_		super(registry)__	};create,new,properties,bean,definition,reader,for,the,given,bean,factory,param,registry,the,bean,factory,to,load,bean,definitions,into,in,the,form,of,a,bean,definition,registry;public,properties,bean,definition,reader,bean,definition,registry,registry,super,registry
PropertiesBeanDefinitionReader -> public PropertiesBeanDefinitionReader(BeanDefinitionRegistry registry);1532706365;Create new PropertiesBeanDefinitionReader for the given bean factory._@param registry the BeanFactory to load bean definitions into,_in the form of a BeanDefinitionRegistry;public PropertiesBeanDefinitionReader(BeanDefinitionRegistry registry) {_		super(registry)__	};create,new,properties,bean,definition,reader,for,the,given,bean,factory,param,registry,the,bean,factory,to,load,bean,definitions,into,in,the,form,of,a,bean,definition,registry;public,properties,bean,definition,reader,bean,definition,registry,registry,super,registry
PropertiesBeanDefinitionReader -> public PropertiesBeanDefinitionReader(BeanDefinitionRegistry registry);1538724083;Create new PropertiesBeanDefinitionReader for the given bean factory._@param registry the BeanFactory to load bean definitions into,_in the form of a BeanDefinitionRegistry;public PropertiesBeanDefinitionReader(BeanDefinitionRegistry registry) {_		super(registry)__	};create,new,properties,bean,definition,reader,for,the,given,bean,factory,param,registry,the,bean,factory,to,load,bean,definitions,into,in,the,form,of,a,bean,definition,registry;public,properties,bean,definition,reader,bean,definition,registry,registry,super,registry
PropertiesBeanDefinitionReader -> public int registerBeanDefinitions(ResourceBundle rb) throws BeanDefinitionStoreException;1328020251;Register bean definitions contained in a resource bundle,_using all property keys (i.e. not filtering by prefix)._@param rb the ResourceBundle to load from_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors_@see #registerBeanDefinitions(java.util.ResourceBundle, String);public int registerBeanDefinitions(ResourceBundle rb) throws BeanDefinitionStoreException {_		return registerBeanDefinitions(rb, null)__	};register,bean,definitions,contained,in,a,resource,bundle,using,all,property,keys,i,e,not,filtering,by,prefix,param,rb,the,resource,bundle,to,load,from,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors,see,register,bean,definitions,java,util,resource,bundle,string;public,int,register,bean,definitions,resource,bundle,rb,throws,bean,definition,store,exception,return,register,bean,definitions,rb,null
PropertiesBeanDefinitionReader -> public int registerBeanDefinitions(ResourceBundle rb) throws BeanDefinitionStoreException;1356735495;Register bean definitions contained in a resource bundle,_using all property keys (i.e. not filtering by prefix)._@param rb the ResourceBundle to load from_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors_@see #registerBeanDefinitions(java.util.ResourceBundle, String);public int registerBeanDefinitions(ResourceBundle rb) throws BeanDefinitionStoreException {_		return registerBeanDefinitions(rb, null)__	};register,bean,definitions,contained,in,a,resource,bundle,using,all,property,keys,i,e,not,filtering,by,prefix,param,rb,the,resource,bundle,to,load,from,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors,see,register,bean,definitions,java,util,resource,bundle,string;public,int,register,bean,definitions,resource,bundle,rb,throws,bean,definition,store,exception,return,register,bean,definitions,rb,null
PropertiesBeanDefinitionReader -> public int registerBeanDefinitions(ResourceBundle rb) throws BeanDefinitionStoreException;1357119239;Register bean definitions contained in a resource bundle,_using all property keys (i.e. not filtering by prefix)._@param rb the ResourceBundle to load from_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors_@see #registerBeanDefinitions(java.util.ResourceBundle, String);public int registerBeanDefinitions(ResourceBundle rb) throws BeanDefinitionStoreException {_		return registerBeanDefinitions(rb, null)__	};register,bean,definitions,contained,in,a,resource,bundle,using,all,property,keys,i,e,not,filtering,by,prefix,param,rb,the,resource,bundle,to,load,from,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors,see,register,bean,definitions,java,util,resource,bundle,string;public,int,register,bean,definitions,resource,bundle,rb,throws,bean,definition,store,exception,return,register,bean,definitions,rb,null
PropertiesBeanDefinitionReader -> public int registerBeanDefinitions(ResourceBundle rb) throws BeanDefinitionStoreException;1362408075;Register bean definitions contained in a resource bundle,_using all property keys (i.e. not filtering by prefix)._@param rb the ResourceBundle to load from_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors_@see #registerBeanDefinitions(java.util.ResourceBundle, String);public int registerBeanDefinitions(ResourceBundle rb) throws BeanDefinitionStoreException {_		return registerBeanDefinitions(rb, null)__	};register,bean,definitions,contained,in,a,resource,bundle,using,all,property,keys,i,e,not,filtering,by,prefix,param,rb,the,resource,bundle,to,load,from,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors,see,register,bean,definitions,java,util,resource,bundle,string;public,int,register,bean,definitions,resource,bundle,rb,throws,bean,definition,store,exception,return,register,bean,definitions,rb,null
PropertiesBeanDefinitionReader -> public int registerBeanDefinitions(ResourceBundle rb) throws BeanDefinitionStoreException;1368482696;Register bean definitions contained in a resource bundle,_using all property keys (i.e. not filtering by prefix)._@param rb the ResourceBundle to load from_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors_@see #registerBeanDefinitions(java.util.ResourceBundle, String);public int registerBeanDefinitions(ResourceBundle rb) throws BeanDefinitionStoreException {_		return registerBeanDefinitions(rb, null)__	};register,bean,definitions,contained,in,a,resource,bundle,using,all,property,keys,i,e,not,filtering,by,prefix,param,rb,the,resource,bundle,to,load,from,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors,see,register,bean,definitions,java,util,resource,bundle,string;public,int,register,bean,definitions,resource,bundle,rb,throws,bean,definition,store,exception,return,register,bean,definitions,rb,null
PropertiesBeanDefinitionReader -> public int registerBeanDefinitions(ResourceBundle rb) throws BeanDefinitionStoreException;1385412762;Register bean definitions contained in a resource bundle,_using all property keys (i.e. not filtering by prefix)._@param rb the ResourceBundle to load from_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors_@see #registerBeanDefinitions(java.util.ResourceBundle, String);public int registerBeanDefinitions(ResourceBundle rb) throws BeanDefinitionStoreException {_		return registerBeanDefinitions(rb, null)__	};register,bean,definitions,contained,in,a,resource,bundle,using,all,property,keys,i,e,not,filtering,by,prefix,param,rb,the,resource,bundle,to,load,from,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors,see,register,bean,definitions,java,util,resource,bundle,string;public,int,register,bean,definitions,resource,bundle,rb,throws,bean,definition,store,exception,return,register,bean,definitions,rb,null
PropertiesBeanDefinitionReader -> public int registerBeanDefinitions(ResourceBundle rb) throws BeanDefinitionStoreException;1467730834;Register bean definitions contained in a resource bundle,_using all property keys (i.e. not filtering by prefix)._@param rb the ResourceBundle to load from_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors_@see #registerBeanDefinitions(java.util.ResourceBundle, String);public int registerBeanDefinitions(ResourceBundle rb) throws BeanDefinitionStoreException {_		return registerBeanDefinitions(rb, null)__	};register,bean,definitions,contained,in,a,resource,bundle,using,all,property,keys,i,e,not,filtering,by,prefix,param,rb,the,resource,bundle,to,load,from,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors,see,register,bean,definitions,java,util,resource,bundle,string;public,int,register,bean,definitions,resource,bundle,rb,throws,bean,definition,store,exception,return,register,bean,definitions,rb,null
PropertiesBeanDefinitionReader -> public int registerBeanDefinitions(ResourceBundle rb) throws BeanDefinitionStoreException;1495868221;Register bean definitions contained in a resource bundle,_using all property keys (i.e. not filtering by prefix)._@param rb the ResourceBundle to load from_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors_@see #registerBeanDefinitions(java.util.ResourceBundle, String);public int registerBeanDefinitions(ResourceBundle rb) throws BeanDefinitionStoreException {_		return registerBeanDefinitions(rb, null)__	};register,bean,definitions,contained,in,a,resource,bundle,using,all,property,keys,i,e,not,filtering,by,prefix,param,rb,the,resource,bundle,to,load,from,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors,see,register,bean,definitions,java,util,resource,bundle,string;public,int,register,bean,definitions,resource,bundle,rb,throws,bean,definition,store,exception,return,register,bean,definitions,rb,null
PropertiesBeanDefinitionReader -> public int registerBeanDefinitions(ResourceBundle rb) throws BeanDefinitionStoreException;1496837955;Register bean definitions contained in a resource bundle,_using all property keys (i.e. not filtering by prefix)._@param rb the ResourceBundle to load from_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors_@see #registerBeanDefinitions(java.util.ResourceBundle, String);public int registerBeanDefinitions(ResourceBundle rb) throws BeanDefinitionStoreException {_		return registerBeanDefinitions(rb, null)__	};register,bean,definitions,contained,in,a,resource,bundle,using,all,property,keys,i,e,not,filtering,by,prefix,param,rb,the,resource,bundle,to,load,from,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors,see,register,bean,definitions,java,util,resource,bundle,string;public,int,register,bean,definitions,resource,bundle,rb,throws,bean,definition,store,exception,return,register,bean,definitions,rb,null
PropertiesBeanDefinitionReader -> public int registerBeanDefinitions(ResourceBundle rb) throws BeanDefinitionStoreException;1498780456;Register bean definitions contained in a resource bundle,_using all property keys (i.e. not filtering by prefix)._@param rb the ResourceBundle to load from_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors_@see #registerBeanDefinitions(java.util.ResourceBundle, String);public int registerBeanDefinitions(ResourceBundle rb) throws BeanDefinitionStoreException {_		return registerBeanDefinitions(rb, null)__	};register,bean,definitions,contained,in,a,resource,bundle,using,all,property,keys,i,e,not,filtering,by,prefix,param,rb,the,resource,bundle,to,load,from,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors,see,register,bean,definitions,java,util,resource,bundle,string;public,int,register,bean,definitions,resource,bundle,rb,throws,bean,definition,store,exception,return,register,bean,definitions,rb,null
PropertiesBeanDefinitionReader -> public int registerBeanDefinitions(ResourceBundle rb) throws BeanDefinitionStoreException;1518167602;Register bean definitions contained in a resource bundle,_using all property keys (i.e. not filtering by prefix)._@param rb the ResourceBundle to load from_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors_@see #registerBeanDefinitions(java.util.ResourceBundle, String);public int registerBeanDefinitions(ResourceBundle rb) throws BeanDefinitionStoreException {_		return registerBeanDefinitions(rb, null)__	};register,bean,definitions,contained,in,a,resource,bundle,using,all,property,keys,i,e,not,filtering,by,prefix,param,rb,the,resource,bundle,to,load,from,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors,see,register,bean,definitions,java,util,resource,bundle,string;public,int,register,bean,definitions,resource,bundle,rb,throws,bean,definition,store,exception,return,register,bean,definitions,rb,null
PropertiesBeanDefinitionReader -> public int registerBeanDefinitions(ResourceBundle rb) throws BeanDefinitionStoreException;1518167818;Register bean definitions contained in a resource bundle,_using all property keys (i.e. not filtering by prefix)._@param rb the ResourceBundle to load from_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors_@see #registerBeanDefinitions(java.util.ResourceBundle, String);public int registerBeanDefinitions(ResourceBundle rb) throws BeanDefinitionStoreException {_		return registerBeanDefinitions(rb, null)__	};register,bean,definitions,contained,in,a,resource,bundle,using,all,property,keys,i,e,not,filtering,by,prefix,param,rb,the,resource,bundle,to,load,from,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors,see,register,bean,definitions,java,util,resource,bundle,string;public,int,register,bean,definitions,resource,bundle,rb,throws,bean,definition,store,exception,return,register,bean,definitions,rb,null
PropertiesBeanDefinitionReader -> public int registerBeanDefinitions(ResourceBundle rb) throws BeanDefinitionStoreException;1530174524;Register bean definitions contained in a resource bundle,_using all property keys (i.e. not filtering by prefix)._@param rb the ResourceBundle to load from_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors_@see #registerBeanDefinitions(java.util.ResourceBundle, String);public int registerBeanDefinitions(ResourceBundle rb) throws BeanDefinitionStoreException {_		return registerBeanDefinitions(rb, null)__	};register,bean,definitions,contained,in,a,resource,bundle,using,all,property,keys,i,e,not,filtering,by,prefix,param,rb,the,resource,bundle,to,load,from,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors,see,register,bean,definitions,java,util,resource,bundle,string;public,int,register,bean,definitions,resource,bundle,rb,throws,bean,definition,store,exception,return,register,bean,definitions,rb,null
PropertiesBeanDefinitionReader -> public int registerBeanDefinitions(ResourceBundle rb) throws BeanDefinitionStoreException;1532706365;Register bean definitions contained in a resource bundle,_using all property keys (i.e. not filtering by prefix)._@param rb the ResourceBundle to load from_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors_@see #registerBeanDefinitions(java.util.ResourceBundle, String);public int registerBeanDefinitions(ResourceBundle rb) throws BeanDefinitionStoreException {_		return registerBeanDefinitions(rb, null)__	};register,bean,definitions,contained,in,a,resource,bundle,using,all,property,keys,i,e,not,filtering,by,prefix,param,rb,the,resource,bundle,to,load,from,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors,see,register,bean,definitions,java,util,resource,bundle,string;public,int,register,bean,definitions,resource,bundle,rb,throws,bean,definition,store,exception,return,register,bean,definitions,rb,null
PropertiesBeanDefinitionReader -> public int registerBeanDefinitions(ResourceBundle rb) throws BeanDefinitionStoreException;1538724083;Register bean definitions contained in a resource bundle,_using all property keys (i.e. not filtering by prefix)._@param rb the ResourceBundle to load from_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors_@see #registerBeanDefinitions(java.util.ResourceBundle, String);public int registerBeanDefinitions(ResourceBundle rb) throws BeanDefinitionStoreException {_		return registerBeanDefinitions(rb, null)__	};register,bean,definitions,contained,in,a,resource,bundle,using,all,property,keys,i,e,not,filtering,by,prefix,param,rb,the,resource,bundle,to,load,from,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors,see,register,bean,definitions,java,util,resource,bundle,string;public,int,register,bean,definitions,resource,bundle,rb,throws,bean,definition,store,exception,return,register,bean,definitions,rb,null
PropertiesBeanDefinitionReader -> public void setPropertiesPersister(PropertiesPersister propertiesPersister);1328020251;Set the PropertiesPersister to use for parsing properties files._The default is DefaultPropertiesPersister._@see org.springframework.util.DefaultPropertiesPersister;public void setPropertiesPersister(PropertiesPersister propertiesPersister) {_		this.propertiesPersister =_				(propertiesPersister != null ? propertiesPersister : new DefaultPropertiesPersister())__	};set,the,properties,persister,to,use,for,parsing,properties,files,the,default,is,default,properties,persister,see,org,springframework,util,default,properties,persister;public,void,set,properties,persister,properties,persister,properties,persister,this,properties,persister,properties,persister,null,properties,persister,new,default,properties,persister
PropertiesBeanDefinitionReader -> public void setPropertiesPersister(PropertiesPersister propertiesPersister);1356735495;Set the PropertiesPersister to use for parsing properties files._The default is DefaultPropertiesPersister._@see org.springframework.util.DefaultPropertiesPersister;public void setPropertiesPersister(PropertiesPersister propertiesPersister) {_		this.propertiesPersister =_				(propertiesPersister != null ? propertiesPersister : new DefaultPropertiesPersister())__	};set,the,properties,persister,to,use,for,parsing,properties,files,the,default,is,default,properties,persister,see,org,springframework,util,default,properties,persister;public,void,set,properties,persister,properties,persister,properties,persister,this,properties,persister,properties,persister,null,properties,persister,new,default,properties,persister
PropertiesBeanDefinitionReader -> public void setPropertiesPersister(PropertiesPersister propertiesPersister);1357119239;Set the PropertiesPersister to use for parsing properties files._The default is DefaultPropertiesPersister._@see org.springframework.util.DefaultPropertiesPersister;public void setPropertiesPersister(PropertiesPersister propertiesPersister) {_		this.propertiesPersister =_				(propertiesPersister != null ? propertiesPersister : new DefaultPropertiesPersister())__	};set,the,properties,persister,to,use,for,parsing,properties,files,the,default,is,default,properties,persister,see,org,springframework,util,default,properties,persister;public,void,set,properties,persister,properties,persister,properties,persister,this,properties,persister,properties,persister,null,properties,persister,new,default,properties,persister
PropertiesBeanDefinitionReader -> public void setPropertiesPersister(PropertiesPersister propertiesPersister);1362408075;Set the PropertiesPersister to use for parsing properties files._The default is DefaultPropertiesPersister._@see org.springframework.util.DefaultPropertiesPersister;public void setPropertiesPersister(PropertiesPersister propertiesPersister) {_		this.propertiesPersister =_				(propertiesPersister != null ? propertiesPersister : new DefaultPropertiesPersister())__	};set,the,properties,persister,to,use,for,parsing,properties,files,the,default,is,default,properties,persister,see,org,springframework,util,default,properties,persister;public,void,set,properties,persister,properties,persister,properties,persister,this,properties,persister,properties,persister,null,properties,persister,new,default,properties,persister
PropertiesBeanDefinitionReader -> public void setPropertiesPersister(PropertiesPersister propertiesPersister);1368482696;Set the PropertiesPersister to use for parsing properties files._The default is DefaultPropertiesPersister._@see org.springframework.util.DefaultPropertiesPersister;public void setPropertiesPersister(PropertiesPersister propertiesPersister) {_		this.propertiesPersister =_				(propertiesPersister != null ? propertiesPersister : new DefaultPropertiesPersister())__	};set,the,properties,persister,to,use,for,parsing,properties,files,the,default,is,default,properties,persister,see,org,springframework,util,default,properties,persister;public,void,set,properties,persister,properties,persister,properties,persister,this,properties,persister,properties,persister,null,properties,persister,new,default,properties,persister
PropertiesBeanDefinitionReader -> public void setPropertiesPersister(PropertiesPersister propertiesPersister);1385412762;Set the PropertiesPersister to use for parsing properties files._The default is DefaultPropertiesPersister._@see org.springframework.util.DefaultPropertiesPersister;public void setPropertiesPersister(PropertiesPersister propertiesPersister) {_		this.propertiesPersister =_				(propertiesPersister != null ? propertiesPersister : new DefaultPropertiesPersister())__	};set,the,properties,persister,to,use,for,parsing,properties,files,the,default,is,default,properties,persister,see,org,springframework,util,default,properties,persister;public,void,set,properties,persister,properties,persister,properties,persister,this,properties,persister,properties,persister,null,properties,persister,new,default,properties,persister
PropertiesBeanDefinitionReader -> public void setPropertiesPersister(PropertiesPersister propertiesPersister);1467730834;Set the PropertiesPersister to use for parsing properties files._The default is DefaultPropertiesPersister._@see org.springframework.util.DefaultPropertiesPersister;public void setPropertiesPersister(PropertiesPersister propertiesPersister) {_		this.propertiesPersister =_				(propertiesPersister != null ? propertiesPersister : new DefaultPropertiesPersister())__	};set,the,properties,persister,to,use,for,parsing,properties,files,the,default,is,default,properties,persister,see,org,springframework,util,default,properties,persister;public,void,set,properties,persister,properties,persister,properties,persister,this,properties,persister,properties,persister,null,properties,persister,new,default,properties,persister
PropertiesBeanDefinitionReader -> public void setPropertiesPersister(PropertiesPersister propertiesPersister);1495868221;Set the PropertiesPersister to use for parsing properties files._The default is DefaultPropertiesPersister._@see org.springframework.util.DefaultPropertiesPersister;public void setPropertiesPersister(PropertiesPersister propertiesPersister) {_		this.propertiesPersister =_				(propertiesPersister != null ? propertiesPersister : new DefaultPropertiesPersister())__	};set,the,properties,persister,to,use,for,parsing,properties,files,the,default,is,default,properties,persister,see,org,springframework,util,default,properties,persister;public,void,set,properties,persister,properties,persister,properties,persister,this,properties,persister,properties,persister,null,properties,persister,new,default,properties,persister
PropertiesBeanDefinitionReader -> public int registerBeanDefinitions(Map<?, ?> map, @Nullable String prefix) throws BeansException;1495868221;Register bean definitions contained in a Map._Ignore ineligible properties._@param map Map name -> property (String or Object). Property values_will be strings if coming from a Properties file etc. Property names_(keys) <b>must</b> be Strings. Class keys must be Strings._@param prefix a filter within the keys in the map: e.g. 'beans.'_(can be empty or {@code null})_@return the number of bean definitions found_@throws BeansException in case of loading or parsing errors;public int registerBeanDefinitions(Map<?, ?> map, @Nullable String prefix) throws BeansException {_		return registerBeanDefinitions(map, prefix, "Map " + map)__	};register,bean,definitions,contained,in,a,map,ignore,ineligible,properties,param,map,map,name,property,string,or,object,property,values,will,be,strings,if,coming,from,a,properties,file,etc,property,names,keys,b,must,b,be,strings,class,keys,must,be,strings,param,prefix,a,filter,within,the,keys,in,the,map,e,g,beans,can,be,empty,or,code,null,return,the,number,of,bean,definitions,found,throws,beans,exception,in,case,of,loading,or,parsing,errors;public,int,register,bean,definitions,map,map,nullable,string,prefix,throws,beans,exception,return,register,bean,definitions,map,prefix,map,map
PropertiesBeanDefinitionReader -> public int registerBeanDefinitions(Map<?, ?> map, @Nullable String prefix) throws BeansException;1496837955;Register bean definitions contained in a Map._Ignore ineligible properties._@param map Map name -> property (String or Object). Property values_will be strings if coming from a Properties file etc. Property names_(keys) <b>must</b> be Strings. Class keys must be Strings._@param prefix a filter within the keys in the map: e.g. 'beans.'_(can be empty or {@code null})_@return the number of bean definitions found_@throws BeansException in case of loading or parsing errors;public int registerBeanDefinitions(Map<?, ?> map, @Nullable String prefix) throws BeansException {_		return registerBeanDefinitions(map, prefix, "Map " + map)__	};register,bean,definitions,contained,in,a,map,ignore,ineligible,properties,param,map,map,name,property,string,or,object,property,values,will,be,strings,if,coming,from,a,properties,file,etc,property,names,keys,b,must,b,be,strings,class,keys,must,be,strings,param,prefix,a,filter,within,the,keys,in,the,map,e,g,beans,can,be,empty,or,code,null,return,the,number,of,bean,definitions,found,throws,beans,exception,in,case,of,loading,or,parsing,errors;public,int,register,bean,definitions,map,map,nullable,string,prefix,throws,beans,exception,return,register,bean,definitions,map,prefix,map,map
PropertiesBeanDefinitionReader -> public int registerBeanDefinitions(Map<?, ?> map, @Nullable String prefix) throws BeansException;1498780456;Register bean definitions contained in a Map._Ignore ineligible properties._@param map Map name -> property (String or Object). Property values_will be strings if coming from a Properties file etc. Property names_(keys) <b>must</b> be Strings. Class keys must be Strings._@param prefix a filter within the keys in the map: e.g. 'beans.'_(can be empty or {@code null})_@return the number of bean definitions found_@throws BeansException in case of loading or parsing errors;public int registerBeanDefinitions(Map<?, ?> map, @Nullable String prefix) throws BeansException {_		return registerBeanDefinitions(map, prefix, "Map " + map)__	};register,bean,definitions,contained,in,a,map,ignore,ineligible,properties,param,map,map,name,property,string,or,object,property,values,will,be,strings,if,coming,from,a,properties,file,etc,property,names,keys,b,must,b,be,strings,class,keys,must,be,strings,param,prefix,a,filter,within,the,keys,in,the,map,e,g,beans,can,be,empty,or,code,null,return,the,number,of,bean,definitions,found,throws,beans,exception,in,case,of,loading,or,parsing,errors;public,int,register,bean,definitions,map,map,nullable,string,prefix,throws,beans,exception,return,register,bean,definitions,map,prefix,map,map
PropertiesBeanDefinitionReader -> public int registerBeanDefinitions(Map<?, ?> map, @Nullable String prefix) throws BeansException;1518167602;Register bean definitions contained in a Map._Ignore ineligible properties._@param map Map name -> property (String or Object). Property values_will be strings if coming from a Properties file etc. Property names_(keys) <b>must</b> be Strings. Class keys must be Strings._@param prefix a filter within the keys in the map: e.g. 'beans.'_(can be empty or {@code null})_@return the number of bean definitions found_@throws BeansException in case of loading or parsing errors;public int registerBeanDefinitions(Map<?, ?> map, @Nullable String prefix) throws BeansException {_		return registerBeanDefinitions(map, prefix, "Map " + map)__	};register,bean,definitions,contained,in,a,map,ignore,ineligible,properties,param,map,map,name,property,string,or,object,property,values,will,be,strings,if,coming,from,a,properties,file,etc,property,names,keys,b,must,b,be,strings,class,keys,must,be,strings,param,prefix,a,filter,within,the,keys,in,the,map,e,g,beans,can,be,empty,or,code,null,return,the,number,of,bean,definitions,found,throws,beans,exception,in,case,of,loading,or,parsing,errors;public,int,register,bean,definitions,map,map,nullable,string,prefix,throws,beans,exception,return,register,bean,definitions,map,prefix,map,map
PropertiesBeanDefinitionReader -> public int registerBeanDefinitions(Map<?, ?> map, @Nullable String prefix) throws BeansException;1518167818;Register bean definitions contained in a Map._Ignore ineligible properties._@param map Map name -> property (String or Object). Property values_will be strings if coming from a Properties file etc. Property names_(keys) <b>must</b> be Strings. Class keys must be Strings._@param prefix a filter within the keys in the map: e.g. 'beans.'_(can be empty or {@code null})_@return the number of bean definitions found_@throws BeansException in case of loading or parsing errors;public int registerBeanDefinitions(Map<?, ?> map, @Nullable String prefix) throws BeansException {_		return registerBeanDefinitions(map, prefix, "Map " + map)__	};register,bean,definitions,contained,in,a,map,ignore,ineligible,properties,param,map,map,name,property,string,or,object,property,values,will,be,strings,if,coming,from,a,properties,file,etc,property,names,keys,b,must,b,be,strings,class,keys,must,be,strings,param,prefix,a,filter,within,the,keys,in,the,map,e,g,beans,can,be,empty,or,code,null,return,the,number,of,bean,definitions,found,throws,beans,exception,in,case,of,loading,or,parsing,errors;public,int,register,bean,definitions,map,map,nullable,string,prefix,throws,beans,exception,return,register,bean,definitions,map,prefix,map,map
PropertiesBeanDefinitionReader -> public int registerBeanDefinitions(Map<?, ?> map, @Nullable String prefix) throws BeansException;1530174524;Register bean definitions contained in a Map._Ignore ineligible properties._@param map a map of {@code name} to {@code property} (String or Object). Property_values will be strings if coming from a Properties file etc. Property names_(keys) <b>must</b> be Strings. Class keys must be Strings._@param prefix a filter within the keys in the map: e.g. 'beans.'_(can be empty or {@code null})_@return the number of bean definitions found_@throws BeansException in case of loading or parsing errors;public int registerBeanDefinitions(Map<?, ?> map, @Nullable String prefix) throws BeansException {_		return registerBeanDefinitions(map, prefix, "Map " + map)__	};register,bean,definitions,contained,in,a,map,ignore,ineligible,properties,param,map,a,map,of,code,name,to,code,property,string,or,object,property,values,will,be,strings,if,coming,from,a,properties,file,etc,property,names,keys,b,must,b,be,strings,class,keys,must,be,strings,param,prefix,a,filter,within,the,keys,in,the,map,e,g,beans,can,be,empty,or,code,null,return,the,number,of,bean,definitions,found,throws,beans,exception,in,case,of,loading,or,parsing,errors;public,int,register,bean,definitions,map,map,nullable,string,prefix,throws,beans,exception,return,register,bean,definitions,map,prefix,map,map
PropertiesBeanDefinitionReader -> public int registerBeanDefinitions(Map<?, ?> map, @Nullable String prefix) throws BeansException;1532706365;Register bean definitions contained in a Map._Ignore ineligible properties._@param map a map of {@code name} to {@code property} (String or Object). Property_values will be strings if coming from a Properties file etc. Property names_(keys) <b>must</b> be Strings. Class keys must be Strings._@param prefix a filter within the keys in the map: e.g. 'beans.'_(can be empty or {@code null})_@return the number of bean definitions found_@throws BeansException in case of loading or parsing errors;public int registerBeanDefinitions(Map<?, ?> map, @Nullable String prefix) throws BeansException {_		return registerBeanDefinitions(map, prefix, "Map " + map)__	};register,bean,definitions,contained,in,a,map,ignore,ineligible,properties,param,map,a,map,of,code,name,to,code,property,string,or,object,property,values,will,be,strings,if,coming,from,a,properties,file,etc,property,names,keys,b,must,b,be,strings,class,keys,must,be,strings,param,prefix,a,filter,within,the,keys,in,the,map,e,g,beans,can,be,empty,or,code,null,return,the,number,of,bean,definitions,found,throws,beans,exception,in,case,of,loading,or,parsing,errors;public,int,register,bean,definitions,map,map,nullable,string,prefix,throws,beans,exception,return,register,bean,definitions,map,prefix,map,map
PropertiesBeanDefinitionReader -> public int registerBeanDefinitions(Map<?, ?> map, @Nullable String prefix) throws BeansException;1538724083;Register bean definitions contained in a Map._Ignore ineligible properties._@param map a map of {@code name} to {@code property} (String or Object). Property_values will be strings if coming from a Properties file etc. Property names_(keys) <b>must</b> be Strings. Class keys must be Strings._@param prefix a filter within the keys in the map: e.g. 'beans.'_(can be empty or {@code null})_@return the number of bean definitions found_@throws BeansException in case of loading or parsing errors;public int registerBeanDefinitions(Map<?, ?> map, @Nullable String prefix) throws BeansException {_		return registerBeanDefinitions(map, prefix, "Map " + map)__	};register,bean,definitions,contained,in,a,map,ignore,ineligible,properties,param,map,a,map,of,code,name,to,code,property,string,or,object,property,values,will,be,strings,if,coming,from,a,properties,file,etc,property,names,keys,b,must,b,be,strings,class,keys,must,be,strings,param,prefix,a,filter,within,the,keys,in,the,map,e,g,beans,can,be,empty,or,code,null,return,the,number,of,bean,definitions,found,throws,beans,exception,in,case,of,loading,or,parsing,errors;public,int,register,bean,definitions,map,map,nullable,string,prefix,throws,beans,exception,return,register,bean,definitions,map,prefix,map,map
PropertiesBeanDefinitionReader -> public PropertiesPersister getPropertiesPersister();1328020251;Return the PropertiesPersister to use for parsing properties files.;public PropertiesPersister getPropertiesPersister() {_		return this.propertiesPersister__	};return,the,properties,persister,to,use,for,parsing,properties,files;public,properties,persister,get,properties,persister,return,this,properties,persister
PropertiesBeanDefinitionReader -> public PropertiesPersister getPropertiesPersister();1356735495;Return the PropertiesPersister to use for parsing properties files.;public PropertiesPersister getPropertiesPersister() {_		return this.propertiesPersister__	};return,the,properties,persister,to,use,for,parsing,properties,files;public,properties,persister,get,properties,persister,return,this,properties,persister
PropertiesBeanDefinitionReader -> public PropertiesPersister getPropertiesPersister();1357119239;Return the PropertiesPersister to use for parsing properties files.;public PropertiesPersister getPropertiesPersister() {_		return this.propertiesPersister__	};return,the,properties,persister,to,use,for,parsing,properties,files;public,properties,persister,get,properties,persister,return,this,properties,persister
PropertiesBeanDefinitionReader -> public PropertiesPersister getPropertiesPersister();1362408075;Return the PropertiesPersister to use for parsing properties files.;public PropertiesPersister getPropertiesPersister() {_		return this.propertiesPersister__	};return,the,properties,persister,to,use,for,parsing,properties,files;public,properties,persister,get,properties,persister,return,this,properties,persister
PropertiesBeanDefinitionReader -> public PropertiesPersister getPropertiesPersister();1368482696;Return the PropertiesPersister to use for parsing properties files.;public PropertiesPersister getPropertiesPersister() {_		return this.propertiesPersister__	};return,the,properties,persister,to,use,for,parsing,properties,files;public,properties,persister,get,properties,persister,return,this,properties,persister
PropertiesBeanDefinitionReader -> public PropertiesPersister getPropertiesPersister();1385412762;Return the PropertiesPersister to use for parsing properties files.;public PropertiesPersister getPropertiesPersister() {_		return this.propertiesPersister__	};return,the,properties,persister,to,use,for,parsing,properties,files;public,properties,persister,get,properties,persister,return,this,properties,persister
PropertiesBeanDefinitionReader -> public PropertiesPersister getPropertiesPersister();1467730834;Return the PropertiesPersister to use for parsing properties files.;public PropertiesPersister getPropertiesPersister() {_		return this.propertiesPersister__	};return,the,properties,persister,to,use,for,parsing,properties,files;public,properties,persister,get,properties,persister,return,this,properties,persister
PropertiesBeanDefinitionReader -> public PropertiesPersister getPropertiesPersister();1495868221;Return the PropertiesPersister to use for parsing properties files.;public PropertiesPersister getPropertiesPersister() {_		return this.propertiesPersister__	};return,the,properties,persister,to,use,for,parsing,properties,files;public,properties,persister,get,properties,persister,return,this,properties,persister
PropertiesBeanDefinitionReader -> public PropertiesPersister getPropertiesPersister();1496837955;Return the PropertiesPersister to use for parsing properties files.;public PropertiesPersister getPropertiesPersister() {_		return this.propertiesPersister__	};return,the,properties,persister,to,use,for,parsing,properties,files;public,properties,persister,get,properties,persister,return,this,properties,persister
PropertiesBeanDefinitionReader -> public PropertiesPersister getPropertiesPersister();1498780456;Return the PropertiesPersister to use for parsing properties files.;public PropertiesPersister getPropertiesPersister() {_		return this.propertiesPersister__	};return,the,properties,persister,to,use,for,parsing,properties,files;public,properties,persister,get,properties,persister,return,this,properties,persister
PropertiesBeanDefinitionReader -> public PropertiesPersister getPropertiesPersister();1518167602;Return the PropertiesPersister to use for parsing properties files.;public PropertiesPersister getPropertiesPersister() {_		return this.propertiesPersister__	};return,the,properties,persister,to,use,for,parsing,properties,files;public,properties,persister,get,properties,persister,return,this,properties,persister
PropertiesBeanDefinitionReader -> public PropertiesPersister getPropertiesPersister();1518167818;Return the PropertiesPersister to use for parsing properties files.;public PropertiesPersister getPropertiesPersister() {_		return this.propertiesPersister__	};return,the,properties,persister,to,use,for,parsing,properties,files;public,properties,persister,get,properties,persister,return,this,properties,persister
PropertiesBeanDefinitionReader -> public PropertiesPersister getPropertiesPersister();1530174524;Return the PropertiesPersister to use for parsing properties files.;public PropertiesPersister getPropertiesPersister() {_		return this.propertiesPersister__	};return,the,properties,persister,to,use,for,parsing,properties,files;public,properties,persister,get,properties,persister,return,this,properties,persister
PropertiesBeanDefinitionReader -> public PropertiesPersister getPropertiesPersister();1532706365;Return the PropertiesPersister to use for parsing properties files.;public PropertiesPersister getPropertiesPersister() {_		return this.propertiesPersister__	};return,the,properties,persister,to,use,for,parsing,properties,files;public,properties,persister,get,properties,persister,return,this,properties,persister
PropertiesBeanDefinitionReader -> public PropertiesPersister getPropertiesPersister();1538724083;Return the PropertiesPersister to use for parsing properties files.;public PropertiesPersister getPropertiesPersister() {_		return this.propertiesPersister__	};return,the,properties,persister,to,use,for,parsing,properties,files;public,properties,persister,get,properties,persister,return,this,properties,persister
PropertiesBeanDefinitionReader -> public int loadBeanDefinitions(EncodedResource encodedResource, String prefix) 			throws BeanDefinitionStoreException;1328020251;Load bean definitions from the specified properties file._@param encodedResource the resource descriptor for the properties file,_allowing to specify an encoding to use for parsing the file_@param prefix a filter within the keys in the map: e.g. 'beans.'_(can be empty or <code>null</code>)_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int loadBeanDefinitions(EncodedResource encodedResource, String prefix)_			throws BeanDefinitionStoreException {__		Properties props = new Properties()__		try {_			InputStream is = encodedResource.getResource().getInputStream()__			try {_				if (encodedResource.getEncoding() != null) {_					getPropertiesPersister().load(props, new InputStreamReader(is, encodedResource.getEncoding()))__				}_				else {_					getPropertiesPersister().load(props, is)__				}_			}_			finally {_				is.close()__			}_			return registerBeanDefinitions(props, prefix, encodedResource.getResource().getDescription())__		}_		catch (IOException ex) {_			throw new BeanDefinitionStoreException("Could not parse properties from " + encodedResource.getResource(), ex)__		}_	};load,bean,definitions,from,the,specified,properties,file,param,encoded,resource,the,resource,descriptor,for,the,properties,file,allowing,to,specify,an,encoding,to,use,for,parsing,the,file,param,prefix,a,filter,within,the,keys,in,the,map,e,g,beans,can,be,empty,or,code,null,code,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,load,bean,definitions,encoded,resource,encoded,resource,string,prefix,throws,bean,definition,store,exception,properties,props,new,properties,try,input,stream,is,encoded,resource,get,resource,get,input,stream,try,if,encoded,resource,get,encoding,null,get,properties,persister,load,props,new,input,stream,reader,is,encoded,resource,get,encoding,else,get,properties,persister,load,props,is,finally,is,close,return,register,bean,definitions,props,prefix,encoded,resource,get,resource,get,description,catch,ioexception,ex,throw,new,bean,definition,store,exception,could,not,parse,properties,from,encoded,resource,get,resource,ex
PropertiesBeanDefinitionReader -> public int loadBeanDefinitions(EncodedResource encodedResource, String prefix) 			throws BeanDefinitionStoreException;1356735495;Load bean definitions from the specified properties file._@param encodedResource the resource descriptor for the properties file,_allowing to specify an encoding to use for parsing the file_@param prefix a filter within the keys in the map: e.g. 'beans.'_(can be empty or {@code null})_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int loadBeanDefinitions(EncodedResource encodedResource, String prefix)_			throws BeanDefinitionStoreException {__		Properties props = new Properties()__		try {_			InputStream is = encodedResource.getResource().getInputStream()__			try {_				if (encodedResource.getEncoding() != null) {_					getPropertiesPersister().load(props, new InputStreamReader(is, encodedResource.getEncoding()))__				}_				else {_					getPropertiesPersister().load(props, is)__				}_			}_			finally {_				is.close()__			}_			return registerBeanDefinitions(props, prefix, encodedResource.getResource().getDescription())__		}_		catch (IOException ex) {_			throw new BeanDefinitionStoreException("Could not parse properties from " + encodedResource.getResource(), ex)__		}_	};load,bean,definitions,from,the,specified,properties,file,param,encoded,resource,the,resource,descriptor,for,the,properties,file,allowing,to,specify,an,encoding,to,use,for,parsing,the,file,param,prefix,a,filter,within,the,keys,in,the,map,e,g,beans,can,be,empty,or,code,null,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,load,bean,definitions,encoded,resource,encoded,resource,string,prefix,throws,bean,definition,store,exception,properties,props,new,properties,try,input,stream,is,encoded,resource,get,resource,get,input,stream,try,if,encoded,resource,get,encoding,null,get,properties,persister,load,props,new,input,stream,reader,is,encoded,resource,get,encoding,else,get,properties,persister,load,props,is,finally,is,close,return,register,bean,definitions,props,prefix,encoded,resource,get,resource,get,description,catch,ioexception,ex,throw,new,bean,definition,store,exception,could,not,parse,properties,from,encoded,resource,get,resource,ex
PropertiesBeanDefinitionReader -> public int loadBeanDefinitions(EncodedResource encodedResource, String prefix) 			throws BeanDefinitionStoreException;1357119239;Load bean definitions from the specified properties file._@param encodedResource the resource descriptor for the properties file,_allowing to specify an encoding to use for parsing the file_@param prefix a filter within the keys in the map: e.g. 'beans.'_(can be empty or {@code null})_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int loadBeanDefinitions(EncodedResource encodedResource, String prefix)_			throws BeanDefinitionStoreException {__		Properties props = new Properties()__		try {_			InputStream is = encodedResource.getResource().getInputStream()__			try {_				if (encodedResource.getEncoding() != null) {_					getPropertiesPersister().load(props, new InputStreamReader(is, encodedResource.getEncoding()))__				}_				else {_					getPropertiesPersister().load(props, is)__				}_			}_			finally {_				is.close()__			}_			return registerBeanDefinitions(props, prefix, encodedResource.getResource().getDescription())__		}_		catch (IOException ex) {_			throw new BeanDefinitionStoreException("Could not parse properties from " + encodedResource.getResource(), ex)__		}_	};load,bean,definitions,from,the,specified,properties,file,param,encoded,resource,the,resource,descriptor,for,the,properties,file,allowing,to,specify,an,encoding,to,use,for,parsing,the,file,param,prefix,a,filter,within,the,keys,in,the,map,e,g,beans,can,be,empty,or,code,null,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,load,bean,definitions,encoded,resource,encoded,resource,string,prefix,throws,bean,definition,store,exception,properties,props,new,properties,try,input,stream,is,encoded,resource,get,resource,get,input,stream,try,if,encoded,resource,get,encoding,null,get,properties,persister,load,props,new,input,stream,reader,is,encoded,resource,get,encoding,else,get,properties,persister,load,props,is,finally,is,close,return,register,bean,definitions,props,prefix,encoded,resource,get,resource,get,description,catch,ioexception,ex,throw,new,bean,definition,store,exception,could,not,parse,properties,from,encoded,resource,get,resource,ex
PropertiesBeanDefinitionReader -> public int loadBeanDefinitions(EncodedResource encodedResource, String prefix) 			throws BeanDefinitionStoreException;1362408075;Load bean definitions from the specified properties file._@param encodedResource the resource descriptor for the properties file,_allowing to specify an encoding to use for parsing the file_@param prefix a filter within the keys in the map: e.g. 'beans.'_(can be empty or {@code null})_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int loadBeanDefinitions(EncodedResource encodedResource, String prefix)_			throws BeanDefinitionStoreException {__		Properties props = new Properties()__		try {_			InputStream is = encodedResource.getResource().getInputStream()__			try {_				if (encodedResource.getEncoding() != null) {_					getPropertiesPersister().load(props, new InputStreamReader(is, encodedResource.getEncoding()))__				}_				else {_					getPropertiesPersister().load(props, is)__				}_			}_			finally {_				is.close()__			}_			return registerBeanDefinitions(props, prefix, encodedResource.getResource().getDescription())__		}_		catch (IOException ex) {_			throw new BeanDefinitionStoreException("Could not parse properties from " + encodedResource.getResource(), ex)__		}_	};load,bean,definitions,from,the,specified,properties,file,param,encoded,resource,the,resource,descriptor,for,the,properties,file,allowing,to,specify,an,encoding,to,use,for,parsing,the,file,param,prefix,a,filter,within,the,keys,in,the,map,e,g,beans,can,be,empty,or,code,null,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,load,bean,definitions,encoded,resource,encoded,resource,string,prefix,throws,bean,definition,store,exception,properties,props,new,properties,try,input,stream,is,encoded,resource,get,resource,get,input,stream,try,if,encoded,resource,get,encoding,null,get,properties,persister,load,props,new,input,stream,reader,is,encoded,resource,get,encoding,else,get,properties,persister,load,props,is,finally,is,close,return,register,bean,definitions,props,prefix,encoded,resource,get,resource,get,description,catch,ioexception,ex,throw,new,bean,definition,store,exception,could,not,parse,properties,from,encoded,resource,get,resource,ex
PropertiesBeanDefinitionReader -> public int loadBeanDefinitions(EncodedResource encodedResource, String prefix) 			throws BeanDefinitionStoreException;1368482696;Load bean definitions from the specified properties file._@param encodedResource the resource descriptor for the properties file,_allowing to specify an encoding to use for parsing the file_@param prefix a filter within the keys in the map: e.g. 'beans.'_(can be empty or {@code null})_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int loadBeanDefinitions(EncodedResource encodedResource, String prefix)_			throws BeanDefinitionStoreException {__		Properties props = new Properties()__		try {_			InputStream is = encodedResource.getResource().getInputStream()__			try {_				if (encodedResource.getEncoding() != null) {_					getPropertiesPersister().load(props, new InputStreamReader(is, encodedResource.getEncoding()))__				}_				else {_					getPropertiesPersister().load(props, is)__				}_			}_			finally {_				is.close()__			}_			return registerBeanDefinitions(props, prefix, encodedResource.getResource().getDescription())__		}_		catch (IOException ex) {_			throw new BeanDefinitionStoreException("Could not parse properties from " + encodedResource.getResource(), ex)__		}_	};load,bean,definitions,from,the,specified,properties,file,param,encoded,resource,the,resource,descriptor,for,the,properties,file,allowing,to,specify,an,encoding,to,use,for,parsing,the,file,param,prefix,a,filter,within,the,keys,in,the,map,e,g,beans,can,be,empty,or,code,null,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,load,bean,definitions,encoded,resource,encoded,resource,string,prefix,throws,bean,definition,store,exception,properties,props,new,properties,try,input,stream,is,encoded,resource,get,resource,get,input,stream,try,if,encoded,resource,get,encoding,null,get,properties,persister,load,props,new,input,stream,reader,is,encoded,resource,get,encoding,else,get,properties,persister,load,props,is,finally,is,close,return,register,bean,definitions,props,prefix,encoded,resource,get,resource,get,description,catch,ioexception,ex,throw,new,bean,definition,store,exception,could,not,parse,properties,from,encoded,resource,get,resource,ex
PropertiesBeanDefinitionReader -> public int loadBeanDefinitions(EncodedResource encodedResource, String prefix) 			throws BeanDefinitionStoreException;1385412762;Load bean definitions from the specified properties file._@param encodedResource the resource descriptor for the properties file,_allowing to specify an encoding to use for parsing the file_@param prefix a filter within the keys in the map: e.g. 'beans.'_(can be empty or {@code null})_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int loadBeanDefinitions(EncodedResource encodedResource, String prefix)_			throws BeanDefinitionStoreException {__		Properties props = new Properties()__		try {_			InputStream is = encodedResource.getResource().getInputStream()__			try {_				if (encodedResource.getEncoding() != null) {_					getPropertiesPersister().load(props, new InputStreamReader(is, encodedResource.getEncoding()))__				}_				else {_					getPropertiesPersister().load(props, is)__				}_			}_			finally {_				is.close()__			}_			return registerBeanDefinitions(props, prefix, encodedResource.getResource().getDescription())__		}_		catch (IOException ex) {_			throw new BeanDefinitionStoreException("Could not parse properties from " + encodedResource.getResource(), ex)__		}_	};load,bean,definitions,from,the,specified,properties,file,param,encoded,resource,the,resource,descriptor,for,the,properties,file,allowing,to,specify,an,encoding,to,use,for,parsing,the,file,param,prefix,a,filter,within,the,keys,in,the,map,e,g,beans,can,be,empty,or,code,null,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,load,bean,definitions,encoded,resource,encoded,resource,string,prefix,throws,bean,definition,store,exception,properties,props,new,properties,try,input,stream,is,encoded,resource,get,resource,get,input,stream,try,if,encoded,resource,get,encoding,null,get,properties,persister,load,props,new,input,stream,reader,is,encoded,resource,get,encoding,else,get,properties,persister,load,props,is,finally,is,close,return,register,bean,definitions,props,prefix,encoded,resource,get,resource,get,description,catch,ioexception,ex,throw,new,bean,definition,store,exception,could,not,parse,properties,from,encoded,resource,get,resource,ex
PropertiesBeanDefinitionReader -> public int loadBeanDefinitions(EncodedResource encodedResource, String prefix) 			throws BeanDefinitionStoreException;1467730834;Load bean definitions from the specified properties file._@param encodedResource the resource descriptor for the properties file,_allowing to specify an encoding to use for parsing the file_@param prefix a filter within the keys in the map: e.g. 'beans.'_(can be empty or {@code null})_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors;public int loadBeanDefinitions(EncodedResource encodedResource, String prefix)_			throws BeanDefinitionStoreException {__		Properties props = new Properties()__		try {_			InputStream is = encodedResource.getResource().getInputStream()__			try {_				if (encodedResource.getEncoding() != null) {_					getPropertiesPersister().load(props, new InputStreamReader(is, encodedResource.getEncoding()))__				}_				else {_					getPropertiesPersister().load(props, is)__				}_			}_			finally {_				is.close()__			}_			return registerBeanDefinitions(props, prefix, encodedResource.getResource().getDescription())__		}_		catch (IOException ex) {_			throw new BeanDefinitionStoreException("Could not parse properties from " + encodedResource.getResource(), ex)__		}_	};load,bean,definitions,from,the,specified,properties,file,param,encoded,resource,the,resource,descriptor,for,the,properties,file,allowing,to,specify,an,encoding,to,use,for,parsing,the,file,param,prefix,a,filter,within,the,keys,in,the,map,e,g,beans,can,be,empty,or,code,null,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors;public,int,load,bean,definitions,encoded,resource,encoded,resource,string,prefix,throws,bean,definition,store,exception,properties,props,new,properties,try,input,stream,is,encoded,resource,get,resource,get,input,stream,try,if,encoded,resource,get,encoding,null,get,properties,persister,load,props,new,input,stream,reader,is,encoded,resource,get,encoding,else,get,properties,persister,load,props,is,finally,is,close,return,register,bean,definitions,props,prefix,encoded,resource,get,resource,get,description,catch,ioexception,ex,throw,new,bean,definition,store,exception,could,not,parse,properties,from,encoded,resource,get,resource,ex
PropertiesBeanDefinitionReader -> public int registerBeanDefinitions(Map<?, ?> map, String prefix, String resourceDescription) 			throws BeansException;1385412762;Register bean definitions contained in a Map._Ignore ineligible properties._@param map Map name -> property (String or Object). Property values_will be strings if coming from a Properties file etc. Property names_(keys) <b>must</b> be strings. Class keys must be Strings._@param prefix a filter within the keys in the map: e.g. 'beans.'_(can be empty or {@code null})_@param resourceDescription description of the resource that the_Map came from (for logging purposes)_@return the number of bean definitions found_@throws BeansException in case of loading or parsing errors_@see #registerBeanDefinitions(Map, String);public int registerBeanDefinitions(Map<?, ?> map, String prefix, String resourceDescription)_			throws BeansException {__		if (prefix == null) {_			prefix = ""__		}_		int beanCount = 0___		for (Object key : map.keySet()) {_			if (!(key instanceof String)) {_				throw new IllegalArgumentException("Illegal key [" + key + "]: only Strings allowed")__			}_			String keyString = (String) key__			if (keyString.startsWith(prefix)) {_				_				String nameAndProperty = keyString.substring(prefix.length())__				_				int sepIdx = -1__				int propKeyIdx = nameAndProperty.indexOf(PropertyAccessor.PROPERTY_KEY_PREFIX)__				if (propKeyIdx != -1) {_					sepIdx = nameAndProperty.lastIndexOf(SEPARATOR, propKeyIdx)__				}_				else {_					sepIdx = nameAndProperty.lastIndexOf(SEPARATOR)__				}_				if (sepIdx != -1) {_					String beanName = nameAndProperty.substring(0, sepIdx)__					if (logger.isDebugEnabled()) {_						logger.debug("Found bean name '" + beanName + "'")__					}_					if (!getRegistry().containsBeanDefinition(beanName)) {_						_						registerBeanDefinition(beanName, map, prefix + beanName, resourceDescription)__						++beanCount__					}_				}_				else {_					_					_					if (logger.isDebugEnabled()) {_						logger.debug("Invalid bean name and property [" + nameAndProperty + "]")__					}_				}_			}_		}__		return beanCount__	};register,bean,definitions,contained,in,a,map,ignore,ineligible,properties,param,map,map,name,property,string,or,object,property,values,will,be,strings,if,coming,from,a,properties,file,etc,property,names,keys,b,must,b,be,strings,class,keys,must,be,strings,param,prefix,a,filter,within,the,keys,in,the,map,e,g,beans,can,be,empty,or,code,null,param,resource,description,description,of,the,resource,that,the,map,came,from,for,logging,purposes,return,the,number,of,bean,definitions,found,throws,beans,exception,in,case,of,loading,or,parsing,errors,see,register,bean,definitions,map,string;public,int,register,bean,definitions,map,map,string,prefix,string,resource,description,throws,beans,exception,if,prefix,null,prefix,int,bean,count,0,for,object,key,map,key,set,if,key,instanceof,string,throw,new,illegal,argument,exception,illegal,key,key,only,strings,allowed,string,key,string,string,key,if,key,string,starts,with,prefix,string,name,and,property,key,string,substring,prefix,length,int,sep,idx,1,int,prop,key,idx,name,and,property,index,of,property,accessor,if,prop,key,idx,1,sep,idx,name,and,property,last,index,of,separator,prop,key,idx,else,sep,idx,name,and,property,last,index,of,separator,if,sep,idx,1,string,bean,name,name,and,property,substring,0,sep,idx,if,logger,is,debug,enabled,logger,debug,found,bean,name,bean,name,if,get,registry,contains,bean,definition,bean,name,register,bean,definition,bean,name,map,prefix,bean,name,resource,description,bean,count,else,if,logger,is,debug,enabled,logger,debug,invalid,bean,name,and,property,name,and,property,return,bean,count
PropertiesBeanDefinitionReader -> public int registerBeanDefinitions(Map<?, ?> map, String prefix, String resourceDescription) 			throws BeansException;1467730834;Register bean definitions contained in a Map._Ignore ineligible properties._@param map Map name -> property (String or Object). Property values_will be strings if coming from a Properties file etc. Property names_(keys) <b>must</b> be strings. Class keys must be Strings._@param prefix a filter within the keys in the map: e.g. 'beans.'_(can be empty or {@code null})_@param resourceDescription description of the resource that the_Map came from (for logging purposes)_@return the number of bean definitions found_@throws BeansException in case of loading or parsing errors_@see #registerBeanDefinitions(Map, String);public int registerBeanDefinitions(Map<?, ?> map, String prefix, String resourceDescription)_			throws BeansException {__		if (prefix == null) {_			prefix = ""__		}_		int beanCount = 0___		for (Object key : map.keySet()) {_			if (!(key instanceof String)) {_				throw new IllegalArgumentException("Illegal key [" + key + "]: only Strings allowed")__			}_			String keyString = (String) key__			if (keyString.startsWith(prefix)) {_				_				String nameAndProperty = keyString.substring(prefix.length())__				_				int sepIdx = -1__				int propKeyIdx = nameAndProperty.indexOf(PropertyAccessor.PROPERTY_KEY_PREFIX)__				if (propKeyIdx != -1) {_					sepIdx = nameAndProperty.lastIndexOf(SEPARATOR, propKeyIdx)__				}_				else {_					sepIdx = nameAndProperty.lastIndexOf(SEPARATOR)__				}_				if (sepIdx != -1) {_					String beanName = nameAndProperty.substring(0, sepIdx)__					if (logger.isDebugEnabled()) {_						logger.debug("Found bean name '" + beanName + "'")__					}_					if (!getRegistry().containsBeanDefinition(beanName)) {_						_						registerBeanDefinition(beanName, map, prefix + beanName, resourceDescription)__						++beanCount__					}_				}_				else {_					_					_					if (logger.isDebugEnabled()) {_						logger.debug("Invalid bean name and property [" + nameAndProperty + "]")__					}_				}_			}_		}__		return beanCount__	};register,bean,definitions,contained,in,a,map,ignore,ineligible,properties,param,map,map,name,property,string,or,object,property,values,will,be,strings,if,coming,from,a,properties,file,etc,property,names,keys,b,must,b,be,strings,class,keys,must,be,strings,param,prefix,a,filter,within,the,keys,in,the,map,e,g,beans,can,be,empty,or,code,null,param,resource,description,description,of,the,resource,that,the,map,came,from,for,logging,purposes,return,the,number,of,bean,definitions,found,throws,beans,exception,in,case,of,loading,or,parsing,errors,see,register,bean,definitions,map,string;public,int,register,bean,definitions,map,map,string,prefix,string,resource,description,throws,beans,exception,if,prefix,null,prefix,int,bean,count,0,for,object,key,map,key,set,if,key,instanceof,string,throw,new,illegal,argument,exception,illegal,key,key,only,strings,allowed,string,key,string,string,key,if,key,string,starts,with,prefix,string,name,and,property,key,string,substring,prefix,length,int,sep,idx,1,int,prop,key,idx,name,and,property,index,of,property,accessor,if,prop,key,idx,1,sep,idx,name,and,property,last,index,of,separator,prop,key,idx,else,sep,idx,name,and,property,last,index,of,separator,if,sep,idx,1,string,bean,name,name,and,property,substring,0,sep,idx,if,logger,is,debug,enabled,logger,debug,found,bean,name,bean,name,if,get,registry,contains,bean,definition,bean,name,register,bean,definition,bean,name,map,prefix,bean,name,resource,description,bean,count,else,if,logger,is,debug,enabled,logger,debug,invalid,bean,name,and,property,name,and,property,return,bean,count
PropertiesBeanDefinitionReader -> public int loadBeanDefinitions(Resource resource) throws BeanDefinitionStoreException;1328020251;Load bean definitions from the specified properties file,_using all property keys (i.e. not filtering by prefix)._@param resource the resource descriptor for the properties file_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors_@see #loadBeanDefinitions(org.springframework.core.io.Resource, String);public int loadBeanDefinitions(Resource resource) throws BeanDefinitionStoreException {_		return loadBeanDefinitions(new EncodedResource(resource), null)__	};load,bean,definitions,from,the,specified,properties,file,using,all,property,keys,i,e,not,filtering,by,prefix,param,resource,the,resource,descriptor,for,the,properties,file,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors,see,load,bean,definitions,org,springframework,core,io,resource,string;public,int,load,bean,definitions,resource,resource,throws,bean,definition,store,exception,return,load,bean,definitions,new,encoded,resource,resource,null
PropertiesBeanDefinitionReader -> public int loadBeanDefinitions(Resource resource) throws BeanDefinitionStoreException;1357119239;Load bean definitions from the specified properties file,_using all property keys (i.e. not filtering by prefix)._@param resource the resource descriptor for the properties file_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors_@see #loadBeanDefinitions(org.springframework.core.io.Resource, String);public int loadBeanDefinitions(Resource resource) throws BeanDefinitionStoreException {_		return loadBeanDefinitions(new EncodedResource(resource), null)__	};load,bean,definitions,from,the,specified,properties,file,using,all,property,keys,i,e,not,filtering,by,prefix,param,resource,the,resource,descriptor,for,the,properties,file,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors,see,load,bean,definitions,org,springframework,core,io,resource,string;public,int,load,bean,definitions,resource,resource,throws,bean,definition,store,exception,return,load,bean,definitions,new,encoded,resource,resource,null
PropertiesBeanDefinitionReader -> public int loadBeanDefinitions(Resource resource) throws BeanDefinitionStoreException;1362408075;Load bean definitions from the specified properties file,_using all property keys (i.e. not filtering by prefix)._@param resource the resource descriptor for the properties file_@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors_@see #loadBeanDefinitions(org.springframework.core.io.Resource, String);public int loadBeanDefinitions(Resource resource) throws BeanDefinitionStoreException {_		return loadBeanDefinitions(new EncodedResource(resource), null)__	};load,bean,definitions,from,the,specified,properties,file,using,all,property,keys,i,e,not,filtering,by,prefix,param,resource,the,resource,descriptor,for,the,properties,file,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors,see,load,bean,definitions,org,springframework,core,io,resource,string;public,int,load,bean,definitions,resource,resource,throws,bean,definition,store,exception,return,load,bean,definitions,new,encoded,resource,resource,null
PropertiesBeanDefinitionReader -> public int registerBeanDefinitions(Map<?, ?> map, String prefix) throws BeansException;1385412762;Register bean definitions contained in a Map._Ignore ineligible properties._@param map Map name -> property (String or Object). Property values_will be strings if coming from a Properties file etc. Property names_(keys) <b>must</b> be Strings. Class keys must be Strings._@param prefix a filter within the keys in the map: e.g. 'beans.'_(can be empty or {@code null})_@return the number of bean definitions found_@throws BeansException in case of loading or parsing errors;public int registerBeanDefinitions(Map<?, ?> map, String prefix) throws BeansException {_		return registerBeanDefinitions(map, prefix, "Map " + map)__	};register,bean,definitions,contained,in,a,map,ignore,ineligible,properties,param,map,map,name,property,string,or,object,property,values,will,be,strings,if,coming,from,a,properties,file,etc,property,names,keys,b,must,b,be,strings,class,keys,must,be,strings,param,prefix,a,filter,within,the,keys,in,the,map,e,g,beans,can,be,empty,or,code,null,return,the,number,of,bean,definitions,found,throws,beans,exception,in,case,of,loading,or,parsing,errors;public,int,register,bean,definitions,map,map,string,prefix,throws,beans,exception,return,register,bean,definitions,map,prefix,map,map
PropertiesBeanDefinitionReader -> public int registerBeanDefinitions(Map<?, ?> map, String prefix) throws BeansException;1467730834;Register bean definitions contained in a Map._Ignore ineligible properties._@param map Map name -> property (String or Object). Property values_will be strings if coming from a Properties file etc. Property names_(keys) <b>must</b> be Strings. Class keys must be Strings._@param prefix a filter within the keys in the map: e.g. 'beans.'_(can be empty or {@code null})_@return the number of bean definitions found_@throws BeansException in case of loading or parsing errors;public int registerBeanDefinitions(Map<?, ?> map, String prefix) throws BeansException {_		return registerBeanDefinitions(map, prefix, "Map " + map)__	};register,bean,definitions,contained,in,a,map,ignore,ineligible,properties,param,map,map,name,property,string,or,object,property,values,will,be,strings,if,coming,from,a,properties,file,etc,property,names,keys,b,must,b,be,strings,class,keys,must,be,strings,param,prefix,a,filter,within,the,keys,in,the,map,e,g,beans,can,be,empty,or,code,null,return,the,number,of,bean,definitions,found,throws,beans,exception,in,case,of,loading,or,parsing,errors;public,int,register,bean,definitions,map,map,string,prefix,throws,beans,exception,return,register,bean,definitions,map,prefix,map,map
