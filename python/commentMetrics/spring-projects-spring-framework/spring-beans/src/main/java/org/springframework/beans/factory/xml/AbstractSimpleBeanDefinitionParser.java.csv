commented;modifiers;parameterAmount;loc;comment;code
true;protected;3;14;/**  * Parse the supplied {@link Element} and populate the supplied  * {@link BeanDefinitionBuilder} as required.  * <p>This implementation maps any attributes present on the  * supplied element to {@link org.springframework.beans.PropertyValue}  * instances, and  * {@link BeanDefinitionBuilder#addPropertyValue(String, Object) adds them}  * to the  * {@link org.springframework.beans.factory.config.BeanDefinition builder}.  * <p>The {@link #extractPropertyName(String)} method is used to  * reconcile the name of an attribute with the name of a JavaBean  * property.  * @param element the XML element being parsed  * @param builder used to define the {@code BeanDefinition}  * @see #extractPropertyName(String)  */ ;/**  * Parse the supplied {@link Element} and populate the supplied  * {@link BeanDefinitionBuilder} as required.  * <p>This implementation maps any attributes present on the  * supplied element to {@link org.springframework.beans.PropertyValue}  * instances, and  * {@link BeanDefinitionBuilder#addPropertyValue(String, Object) adds them}  * to the  * {@link org.springframework.beans.factory.config.BeanDefinition builder}.  * <p>The {@link #extractPropertyName(String)} method is used to  * reconcile the name of an attribute with the name of a JavaBean  * property.  * @param element the XML element being parsed  * @param builder used to define the {@code BeanDefinition}  * @see #extractPropertyName(String)  */ @Override protected void doParse(Element element, ParserContext parserContext, BeanDefinitionBuilder builder) {     NamedNodeMap attributes = element.getAttributes().     for (int x = 0. x < attributes.getLength(). x++) {         Attr attribute = (Attr) attributes.item(x).         if (isEligibleAttribute(attribute, parserContext)) {             String propertyName = extractPropertyName(attribute.getLocalName()).             Assert.state(StringUtils.hasText(propertyName), "Illegal property name returned from 'extractPropertyName(String)': cannot be null or empty.").             builder.addPropertyValue(propertyName, attribute.getValue()).         }     }     postProcess(builder, element). }
true;protected;2;5;/**  * Determine whether the given attribute is eligible for being  * turned into a corresponding bean property value.  * <p>The default implementation considers any attribute as eligible,  * except for the "id" attribute and namespace declaration attributes.  * @param attribute the XML attribute to check  * @param parserContext the {@code ParserContext}  * @see #isEligibleAttribute(String)  */ ;/**  * Determine whether the given attribute is eligible for being  * turned into a corresponding bean property value.  * <p>The default implementation considers any attribute as eligible,  * except for the "id" attribute and namespace declaration attributes.  * @param attribute the XML attribute to check  * @param parserContext the {@code ParserContext}  * @see #isEligibleAttribute(String)  */ protected boolean isEligibleAttribute(Attr attribute, ParserContext parserContext) {     String fullName = attribute.getName().     return (!fullName.equals("xmlns") && !fullName.startsWith("xmlns:") && isEligibleAttribute(parserContext.getDelegate().getLocalName(attribute))). }
true;protected;1;3;/**  * Determine whether the given attribute is eligible for being  * turned into a corresponding bean property value.  * <p>The default implementation considers any attribute as eligible,  * except for the "id" attribute.  * @param attributeName the attribute name taken straight from the  * XML element being parsed (never {@code null})  */ ;/**  * Determine whether the given attribute is eligible for being  * turned into a corresponding bean property value.  * <p>The default implementation considers any attribute as eligible,  * except for the "id" attribute.  * @param attributeName the attribute name taken straight from the  * XML element being parsed (never {@code null})  */ protected boolean isEligibleAttribute(String attributeName) {     return !ID_ATTRIBUTE.equals(attributeName). }
true;protected;1;3;/**  * Extract a JavaBean property name from the supplied attribute name.  * <p>The default implementation uses the  * {@link Conventions#attributeNameToPropertyName(String)}  * method to perform the extraction.  * <p>The name returned must obey the standard JavaBean property name  * conventions. For example for a class with a setter method  * '{@code setBingoHallFavourite(String)}', the name returned had  * better be '{@code bingoHallFavourite}' (with that exact casing).  * @param attributeName the attribute name taken straight from the  * XML element being parsed (never {@code null})  * @return the extracted JavaBean property name (must never be {@code null})  */ ;/**  * Extract a JavaBean property name from the supplied attribute name.  * <p>The default implementation uses the  * {@link Conventions#attributeNameToPropertyName(String)}  * method to perform the extraction.  * <p>The name returned must obey the standard JavaBean property name  * conventions. For example for a class with a setter method  * '{@code setBingoHallFavourite(String)}', the name returned had  * better be '{@code bingoHallFavourite}' (with that exact casing).  * @param attributeName the attribute name taken straight from the  * XML element being parsed (never {@code null})  * @return the extracted JavaBean property name (must never be {@code null})  */ protected String extractPropertyName(String attributeName) {     return Conventions.attributeNameToPropertyName(attributeName). }
true;protected;2;2;/**  * Hook method that derived classes can implement to inspect/change a  * bean definition after parsing is complete.  * <p>The default implementation does nothing.  * @param beanDefinition the parsed (and probably totally defined) bean definition being built  * @param element the XML element that was the source of the bean definition's metadata  */ ;/**  * Hook method that derived classes can implement to inspect/change a  * bean definition after parsing is complete.  * <p>The default implementation does nothing.  * @param beanDefinition the parsed (and probably totally defined) bean definition being built  * @param element the XML element that was the source of the bean definition's metadata  */ protected void postProcess(BeanDefinitionBuilder beanDefinition, Element element) { }
