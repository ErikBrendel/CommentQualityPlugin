# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractSimpleBeanDefinitionParser -> protected void postProcess(BeanDefinitionBuilder beanDefinition, Element element);1328020251;Hook method that derived classes can implement to inspect/change a_bean definition after parsing is complete._<p>The default implementation does nothing._@param beanDefinition the parsed (and probably totally defined) bean definition being built_@param element the XML element that was the source of the bean definition's metadata;protected void postProcess(BeanDefinitionBuilder beanDefinition, Element element) {_	};hook,method,that,derived,classes,can,implement,to,inspect,change,a,bean,definition,after,parsing,is,complete,p,the,default,implementation,does,nothing,param,bean,definition,the,parsed,and,probably,totally,defined,bean,definition,being,built,param,element,the,xml,element,that,was,the,source,of,the,bean,definition,s,metadata;protected,void,post,process,bean,definition,builder,bean,definition,element,element
AbstractSimpleBeanDefinitionParser -> protected void postProcess(BeanDefinitionBuilder beanDefinition, Element element);1356735495;Hook method that derived classes can implement to inspect/change a_bean definition after parsing is complete._<p>The default implementation does nothing._@param beanDefinition the parsed (and probably totally defined) bean definition being built_@param element the XML element that was the source of the bean definition's metadata;protected void postProcess(BeanDefinitionBuilder beanDefinition, Element element) {_	};hook,method,that,derived,classes,can,implement,to,inspect,change,a,bean,definition,after,parsing,is,complete,p,the,default,implementation,does,nothing,param,bean,definition,the,parsed,and,probably,totally,defined,bean,definition,being,built,param,element,the,xml,element,that,was,the,source,of,the,bean,definition,s,metadata;protected,void,post,process,bean,definition,builder,bean,definition,element,element
AbstractSimpleBeanDefinitionParser -> protected void postProcess(BeanDefinitionBuilder beanDefinition, Element element);1405696918;Hook method that derived classes can implement to inspect/change a_bean definition after parsing is complete._<p>The default implementation does nothing._@param beanDefinition the parsed (and probably totally defined) bean definition being built_@param element the XML element that was the source of the bean definition's metadata;protected void postProcess(BeanDefinitionBuilder beanDefinition, Element element) {_	};hook,method,that,derived,classes,can,implement,to,inspect,change,a,bean,definition,after,parsing,is,complete,p,the,default,implementation,does,nothing,param,bean,definition,the,parsed,and,probably,totally,defined,bean,definition,being,built,param,element,the,xml,element,that,was,the,source,of,the,bean,definition,s,metadata;protected,void,post,process,bean,definition,builder,bean,definition,element,element
AbstractSimpleBeanDefinitionParser -> protected void postProcess(BeanDefinitionBuilder beanDefinition, Element element);1419966315;Hook method that derived classes can implement to inspect/change a_bean definition after parsing is complete._<p>The default implementation does nothing._@param beanDefinition the parsed (and probably totally defined) bean definition being built_@param element the XML element that was the source of the bean definition's metadata;protected void postProcess(BeanDefinitionBuilder beanDefinition, Element element) {_	};hook,method,that,derived,classes,can,implement,to,inspect,change,a,bean,definition,after,parsing,is,complete,p,the,default,implementation,does,nothing,param,bean,definition,the,parsed,and,probably,totally,defined,bean,definition,being,built,param,element,the,xml,element,that,was,the,source,of,the,bean,definition,s,metadata;protected,void,post,process,bean,definition,builder,bean,definition,element,element
AbstractSimpleBeanDefinitionParser -> protected void postProcess(BeanDefinitionBuilder beanDefinition, Element element);1447323728;Hook method that derived classes can implement to inspect/change a_bean definition after parsing is complete._<p>The default implementation does nothing._@param beanDefinition the parsed (and probably totally defined) bean definition being built_@param element the XML element that was the source of the bean definition's metadata;protected void postProcess(BeanDefinitionBuilder beanDefinition, Element element) {_	};hook,method,that,derived,classes,can,implement,to,inspect,change,a,bean,definition,after,parsing,is,complete,p,the,default,implementation,does,nothing,param,bean,definition,the,parsed,and,probably,totally,defined,bean,definition,being,built,param,element,the,xml,element,that,was,the,source,of,the,bean,definition,s,metadata;protected,void,post,process,bean,definition,builder,bean,definition,element,element
AbstractSimpleBeanDefinitionParser -> protected String extractPropertyName(String attributeName);1328020251;Extract a JavaBean property name from the supplied attribute name._<p>The default implementation uses the_{@link Conventions#attributeNameToPropertyName(String)}_method to perform the extraction._<p>The name returned must obey the standard JavaBean property name_conventions. For example for a class with a setter method_'<code>setBingoHallFavourite(String)</code>', the name returned had_better be '<code>bingoHallFavourite</code>' (with that exact casing)._@param attributeName the attribute name taken straight from the_XML element being parsed (never <code>null</code>)_@return the extracted JavaBean property name (must never be <code>null</code>);protected String extractPropertyName(String attributeName) {_		return Conventions.attributeNameToPropertyName(attributeName)__	};extract,a,java,bean,property,name,from,the,supplied,attribute,name,p,the,default,implementation,uses,the,link,conventions,attribute,name,to,property,name,string,method,to,perform,the,extraction,p,the,name,returned,must,obey,the,standard,java,bean,property,name,conventions,for,example,for,a,class,with,a,setter,method,code,set,bingo,hall,favourite,string,code,the,name,returned,had,better,be,code,bingo,hall,favourite,code,with,that,exact,casing,param,attribute,name,the,attribute,name,taken,straight,from,the,xml,element,being,parsed,never,code,null,code,return,the,extracted,java,bean,property,name,must,never,be,code,null,code;protected,string,extract,property,name,string,attribute,name,return,conventions,attribute,name,to,property,name,attribute,name
AbstractSimpleBeanDefinitionParser -> protected String extractPropertyName(String attributeName);1356735495;Extract a JavaBean property name from the supplied attribute name._<p>The default implementation uses the_{@link Conventions#attributeNameToPropertyName(String)}_method to perform the extraction._<p>The name returned must obey the standard JavaBean property name_conventions. For example for a class with a setter method_'{@code setBingoHallFavourite(String)}', the name returned had_better be '{@code bingoHallFavourite}' (with that exact casing)._@param attributeName the attribute name taken straight from the_XML element being parsed (never {@code null})_@return the extracted JavaBean property name (must never be {@code null});protected String extractPropertyName(String attributeName) {_		return Conventions.attributeNameToPropertyName(attributeName)__	};extract,a,java,bean,property,name,from,the,supplied,attribute,name,p,the,default,implementation,uses,the,link,conventions,attribute,name,to,property,name,string,method,to,perform,the,extraction,p,the,name,returned,must,obey,the,standard,java,bean,property,name,conventions,for,example,for,a,class,with,a,setter,method,code,set,bingo,hall,favourite,string,the,name,returned,had,better,be,code,bingo,hall,favourite,with,that,exact,casing,param,attribute,name,the,attribute,name,taken,straight,from,the,xml,element,being,parsed,never,code,null,return,the,extracted,java,bean,property,name,must,never,be,code,null;protected,string,extract,property,name,string,attribute,name,return,conventions,attribute,name,to,property,name,attribute,name
AbstractSimpleBeanDefinitionParser -> protected String extractPropertyName(String attributeName);1405696918;Extract a JavaBean property name from the supplied attribute name._<p>The default implementation uses the_{@link Conventions#attributeNameToPropertyName(String)}_method to perform the extraction._<p>The name returned must obey the standard JavaBean property name_conventions. For example for a class with a setter method_'{@code setBingoHallFavourite(String)}', the name returned had_better be '{@code bingoHallFavourite}' (with that exact casing)._@param attributeName the attribute name taken straight from the_XML element being parsed (never {@code null})_@return the extracted JavaBean property name (must never be {@code null});protected String extractPropertyName(String attributeName) {_		return Conventions.attributeNameToPropertyName(attributeName)__	};extract,a,java,bean,property,name,from,the,supplied,attribute,name,p,the,default,implementation,uses,the,link,conventions,attribute,name,to,property,name,string,method,to,perform,the,extraction,p,the,name,returned,must,obey,the,standard,java,bean,property,name,conventions,for,example,for,a,class,with,a,setter,method,code,set,bingo,hall,favourite,string,the,name,returned,had,better,be,code,bingo,hall,favourite,with,that,exact,casing,param,attribute,name,the,attribute,name,taken,straight,from,the,xml,element,being,parsed,never,code,null,return,the,extracted,java,bean,property,name,must,never,be,code,null;protected,string,extract,property,name,string,attribute,name,return,conventions,attribute,name,to,property,name,attribute,name
AbstractSimpleBeanDefinitionParser -> protected String extractPropertyName(String attributeName);1419966315;Extract a JavaBean property name from the supplied attribute name._<p>The default implementation uses the_{@link Conventions#attributeNameToPropertyName(String)}_method to perform the extraction._<p>The name returned must obey the standard JavaBean property name_conventions. For example for a class with a setter method_'{@code setBingoHallFavourite(String)}', the name returned had_better be '{@code bingoHallFavourite}' (with that exact casing)._@param attributeName the attribute name taken straight from the_XML element being parsed (never {@code null})_@return the extracted JavaBean property name (must never be {@code null});protected String extractPropertyName(String attributeName) {_		return Conventions.attributeNameToPropertyName(attributeName)__	};extract,a,java,bean,property,name,from,the,supplied,attribute,name,p,the,default,implementation,uses,the,link,conventions,attribute,name,to,property,name,string,method,to,perform,the,extraction,p,the,name,returned,must,obey,the,standard,java,bean,property,name,conventions,for,example,for,a,class,with,a,setter,method,code,set,bingo,hall,favourite,string,the,name,returned,had,better,be,code,bingo,hall,favourite,with,that,exact,casing,param,attribute,name,the,attribute,name,taken,straight,from,the,xml,element,being,parsed,never,code,null,return,the,extracted,java,bean,property,name,must,never,be,code,null;protected,string,extract,property,name,string,attribute,name,return,conventions,attribute,name,to,property,name,attribute,name
AbstractSimpleBeanDefinitionParser -> protected String extractPropertyName(String attributeName);1447323728;Extract a JavaBean property name from the supplied attribute name._<p>The default implementation uses the_{@link Conventions#attributeNameToPropertyName(String)}_method to perform the extraction._<p>The name returned must obey the standard JavaBean property name_conventions. For example for a class with a setter method_'{@code setBingoHallFavourite(String)}', the name returned had_better be '{@code bingoHallFavourite}' (with that exact casing)._@param attributeName the attribute name taken straight from the_XML element being parsed (never {@code null})_@return the extracted JavaBean property name (must never be {@code null});protected String extractPropertyName(String attributeName) {_		return Conventions.attributeNameToPropertyName(attributeName)__	};extract,a,java,bean,property,name,from,the,supplied,attribute,name,p,the,default,implementation,uses,the,link,conventions,attribute,name,to,property,name,string,method,to,perform,the,extraction,p,the,name,returned,must,obey,the,standard,java,bean,property,name,conventions,for,example,for,a,class,with,a,setter,method,code,set,bingo,hall,favourite,string,the,name,returned,had,better,be,code,bingo,hall,favourite,with,that,exact,casing,param,attribute,name,the,attribute,name,taken,straight,from,the,xml,element,being,parsed,never,code,null,return,the,extracted,java,bean,property,name,must,never,be,code,null;protected,string,extract,property,name,string,attribute,name,return,conventions,attribute,name,to,property,name,attribute,name
AbstractSimpleBeanDefinitionParser -> protected boolean isEligibleAttribute(String attributeName);1328020251;Determine whether the given attribute is eligible for being_turned into a corresponding bean property value._<p>The default implementation considers any attribute as eligible,_except for the "id" attribute._@param attributeName the attribute name taken straight from the_XML element being parsed (never <code>null</code>);protected boolean isEligibleAttribute(String attributeName) {_		return !ID_ATTRIBUTE.equals(attributeName)__	};determine,whether,the,given,attribute,is,eligible,for,being,turned,into,a,corresponding,bean,property,value,p,the,default,implementation,considers,any,attribute,as,eligible,except,for,the,id,attribute,param,attribute,name,the,attribute,name,taken,straight,from,the,xml,element,being,parsed,never,code,null,code;protected,boolean,is,eligible,attribute,string,attribute,name,return,equals,attribute,name
AbstractSimpleBeanDefinitionParser -> protected boolean isEligibleAttribute(String attributeName);1356735495;Determine whether the given attribute is eligible for being_turned into a corresponding bean property value._<p>The default implementation considers any attribute as eligible,_except for the "id" attribute._@param attributeName the attribute name taken straight from the_XML element being parsed (never {@code null});protected boolean isEligibleAttribute(String attributeName) {_		return !ID_ATTRIBUTE.equals(attributeName)__	};determine,whether,the,given,attribute,is,eligible,for,being,turned,into,a,corresponding,bean,property,value,p,the,default,implementation,considers,any,attribute,as,eligible,except,for,the,id,attribute,param,attribute,name,the,attribute,name,taken,straight,from,the,xml,element,being,parsed,never,code,null;protected,boolean,is,eligible,attribute,string,attribute,name,return,equals,attribute,name
AbstractSimpleBeanDefinitionParser -> protected boolean isEligibleAttribute(String attributeName);1405696918;Determine whether the given attribute is eligible for being_turned into a corresponding bean property value._<p>The default implementation considers any attribute as eligible,_except for the "id" attribute._@param attributeName the attribute name taken straight from the_XML element being parsed (never {@code null});protected boolean isEligibleAttribute(String attributeName) {_		return !ID_ATTRIBUTE.equals(attributeName)__	};determine,whether,the,given,attribute,is,eligible,for,being,turned,into,a,corresponding,bean,property,value,p,the,default,implementation,considers,any,attribute,as,eligible,except,for,the,id,attribute,param,attribute,name,the,attribute,name,taken,straight,from,the,xml,element,being,parsed,never,code,null;protected,boolean,is,eligible,attribute,string,attribute,name,return,equals,attribute,name
AbstractSimpleBeanDefinitionParser -> protected boolean isEligibleAttribute(String attributeName);1419966315;Determine whether the given attribute is eligible for being_turned into a corresponding bean property value._<p>The default implementation considers any attribute as eligible,_except for the "id" attribute._@param attributeName the attribute name taken straight from the_XML element being parsed (never {@code null});protected boolean isEligibleAttribute(String attributeName) {_		return !ID_ATTRIBUTE.equals(attributeName)__	};determine,whether,the,given,attribute,is,eligible,for,being,turned,into,a,corresponding,bean,property,value,p,the,default,implementation,considers,any,attribute,as,eligible,except,for,the,id,attribute,param,attribute,name,the,attribute,name,taken,straight,from,the,xml,element,being,parsed,never,code,null;protected,boolean,is,eligible,attribute,string,attribute,name,return,equals,attribute,name
AbstractSimpleBeanDefinitionParser -> protected boolean isEligibleAttribute(String attributeName);1447323728;Determine whether the given attribute is eligible for being_turned into a corresponding bean property value._<p>The default implementation considers any attribute as eligible,_except for the "id" attribute._@param attributeName the attribute name taken straight from the_XML element being parsed (never {@code null});protected boolean isEligibleAttribute(String attributeName) {_		return !ID_ATTRIBUTE.equals(attributeName)__	};determine,whether,the,given,attribute,is,eligible,for,being,turned,into,a,corresponding,bean,property,value,p,the,default,implementation,considers,any,attribute,as,eligible,except,for,the,id,attribute,param,attribute,name,the,attribute,name,taken,straight,from,the,xml,element,being,parsed,never,code,null;protected,boolean,is,eligible,attribute,string,attribute,name,return,equals,attribute,name
AbstractSimpleBeanDefinitionParser -> protected boolean isEligibleAttribute(Attr attribute, ParserContext parserContext);1328020251;Determine whether the given attribute is eligible for being_turned into a corresponding bean property value._<p>The default implementation considers any attribute as eligible,_except for the "id" attribute and namespace declaration attributes._@param attribute the XML attribute to check_@param parserContext the <code>ParserContext</code>_@see #isEligibleAttribute(String);protected boolean isEligibleAttribute(Attr attribute, ParserContext parserContext) {_		boolean eligible = isEligibleAttribute(attribute)__		if(!eligible) {_			String fullName = attribute.getName()__			eligible = (!fullName.equals("xmlns") && !fullName.startsWith("xmlns:") &&_					isEligibleAttribute(parserContext.getDelegate().getLocalName(attribute)))__		}_		return eligible__	};determine,whether,the,given,attribute,is,eligible,for,being,turned,into,a,corresponding,bean,property,value,p,the,default,implementation,considers,any,attribute,as,eligible,except,for,the,id,attribute,and,namespace,declaration,attributes,param,attribute,the,xml,attribute,to,check,param,parser,context,the,code,parser,context,code,see,is,eligible,attribute,string;protected,boolean,is,eligible,attribute,attr,attribute,parser,context,parser,context,boolean,eligible,is,eligible,attribute,attribute,if,eligible,string,full,name,attribute,get,name,eligible,full,name,equals,xmlns,full,name,starts,with,xmlns,is,eligible,attribute,parser,context,get,delegate,get,local,name,attribute,return,eligible
AbstractSimpleBeanDefinitionParser -> protected boolean isEligibleAttribute(Attr attribute, ParserContext parserContext);1356735495;Determine whether the given attribute is eligible for being_turned into a corresponding bean property value._<p>The default implementation considers any attribute as eligible,_except for the "id" attribute and namespace declaration attributes._@param attribute the XML attribute to check_@param parserContext the {@code ParserContext}_@see #isEligibleAttribute(String);protected boolean isEligibleAttribute(Attr attribute, ParserContext parserContext) {_		boolean eligible = isEligibleAttribute(attribute)__		if(!eligible) {_			String fullName = attribute.getName()__			eligible = (!fullName.equals("xmlns") && !fullName.startsWith("xmlns:") &&_					isEligibleAttribute(parserContext.getDelegate().getLocalName(attribute)))__		}_		return eligible__	};determine,whether,the,given,attribute,is,eligible,for,being,turned,into,a,corresponding,bean,property,value,p,the,default,implementation,considers,any,attribute,as,eligible,except,for,the,id,attribute,and,namespace,declaration,attributes,param,attribute,the,xml,attribute,to,check,param,parser,context,the,code,parser,context,see,is,eligible,attribute,string;protected,boolean,is,eligible,attribute,attr,attribute,parser,context,parser,context,boolean,eligible,is,eligible,attribute,attribute,if,eligible,string,full,name,attribute,get,name,eligible,full,name,equals,xmlns,full,name,starts,with,xmlns,is,eligible,attribute,parser,context,get,delegate,get,local,name,attribute,return,eligible
AbstractSimpleBeanDefinitionParser -> protected boolean isEligibleAttribute(Attr attribute, ParserContext parserContext);1405696918;Determine whether the given attribute is eligible for being_turned into a corresponding bean property value._<p>The default implementation considers any attribute as eligible,_except for the "id" attribute and namespace declaration attributes._@param attribute the XML attribute to check_@param parserContext the {@code ParserContext}_@see #isEligibleAttribute(String);protected boolean isEligibleAttribute(Attr attribute, ParserContext parserContext) {_		boolean eligible = isEligibleAttribute(attribute)__		if (!eligible) {_			String fullName = attribute.getName()__			eligible = (!fullName.equals("xmlns") && !fullName.startsWith("xmlns:") &&_					isEligibleAttribute(parserContext.getDelegate().getLocalName(attribute)))__		}_		return eligible__	};determine,whether,the,given,attribute,is,eligible,for,being,turned,into,a,corresponding,bean,property,value,p,the,default,implementation,considers,any,attribute,as,eligible,except,for,the,id,attribute,and,namespace,declaration,attributes,param,attribute,the,xml,attribute,to,check,param,parser,context,the,code,parser,context,see,is,eligible,attribute,string;protected,boolean,is,eligible,attribute,attr,attribute,parser,context,parser,context,boolean,eligible,is,eligible,attribute,attribute,if,eligible,string,full,name,attribute,get,name,eligible,full,name,equals,xmlns,full,name,starts,with,xmlns,is,eligible,attribute,parser,context,get,delegate,get,local,name,attribute,return,eligible
AbstractSimpleBeanDefinitionParser -> protected boolean isEligibleAttribute(Attr attribute, ParserContext parserContext);1419966315;Determine whether the given attribute is eligible for being_turned into a corresponding bean property value._<p>The default implementation considers any attribute as eligible,_except for the "id" attribute and namespace declaration attributes._@param attribute the XML attribute to check_@param parserContext the {@code ParserContext}_@see #isEligibleAttribute(String);protected boolean isEligibleAttribute(Attr attribute, ParserContext parserContext) {_		String fullName = attribute.getName()__		return (!fullName.equals("xmlns") && !fullName.startsWith("xmlns:") &&_				isEligibleAttribute(parserContext.getDelegate().getLocalName(attribute)))__	};determine,whether,the,given,attribute,is,eligible,for,being,turned,into,a,corresponding,bean,property,value,p,the,default,implementation,considers,any,attribute,as,eligible,except,for,the,id,attribute,and,namespace,declaration,attributes,param,attribute,the,xml,attribute,to,check,param,parser,context,the,code,parser,context,see,is,eligible,attribute,string;protected,boolean,is,eligible,attribute,attr,attribute,parser,context,parser,context,string,full,name,attribute,get,name,return,full,name,equals,xmlns,full,name,starts,with,xmlns,is,eligible,attribute,parser,context,get,delegate,get,local,name,attribute
AbstractSimpleBeanDefinitionParser -> protected boolean isEligibleAttribute(Attr attribute, ParserContext parserContext);1447323728;Determine whether the given attribute is eligible for being_turned into a corresponding bean property value._<p>The default implementation considers any attribute as eligible,_except for the "id" attribute and namespace declaration attributes._@param attribute the XML attribute to check_@param parserContext the {@code ParserContext}_@see #isEligibleAttribute(String);protected boolean isEligibleAttribute(Attr attribute, ParserContext parserContext) {_		String fullName = attribute.getName()__		return (!fullName.equals("xmlns") && !fullName.startsWith("xmlns:") &&_				isEligibleAttribute(parserContext.getDelegate().getLocalName(attribute)))__	};determine,whether,the,given,attribute,is,eligible,for,being,turned,into,a,corresponding,bean,property,value,p,the,default,implementation,considers,any,attribute,as,eligible,except,for,the,id,attribute,and,namespace,declaration,attributes,param,attribute,the,xml,attribute,to,check,param,parser,context,the,code,parser,context,see,is,eligible,attribute,string;protected,boolean,is,eligible,attribute,attr,attribute,parser,context,parser,context,string,full,name,attribute,get,name,return,full,name,equals,xmlns,full,name,starts,with,xmlns,is,eligible,attribute,parser,context,get,delegate,get,local,name,attribute
AbstractSimpleBeanDefinitionParser -> @Override 	protected void doParse(Element element, ParserContext parserContext, BeanDefinitionBuilder builder);1328020251;Parse the supplied {@link Element} and populate the supplied_{@link BeanDefinitionBuilder} as required._<p>This implementation maps any attributes present on the_supplied element to {@link org.springframework.beans.PropertyValue}_instances, and_{@link BeanDefinitionBuilder#addPropertyValue(String, Object) adds them}_to the_{@link org.springframework.beans.factory.config.BeanDefinition builder}._<p>The {@link #extractPropertyName(String)} method is used to_reconcile the name of an attribute with the name of a JavaBean_property._@param element the XML element being parsed_@param builder used to define the <code>BeanDefinition</code>_@see #extractPropertyName(String);@Override_	protected void doParse(Element element, ParserContext parserContext, BeanDefinitionBuilder builder) {_		NamedNodeMap attributes = element.getAttributes()__		for (int x = 0_ x < attributes.getLength()_ x++) {_			Attr attribute = (Attr) attributes.item(x)__			if (isEligibleAttribute(attribute, parserContext)) {_				String propertyName = extractPropertyName(attribute.getLocalName())__				Assert.state(StringUtils.hasText(propertyName),_						"Illegal property name returned from 'extractPropertyName(String)': cannot be null or empty.")__				builder.addPropertyValue(propertyName, attribute.getValue())__			}_		}_		postProcess(builder, element)__	};parse,the,supplied,link,element,and,populate,the,supplied,link,bean,definition,builder,as,required,p,this,implementation,maps,any,attributes,present,on,the,supplied,element,to,link,org,springframework,beans,property,value,instances,and,link,bean,definition,builder,add,property,value,string,object,adds,them,to,the,link,org,springframework,beans,factory,config,bean,definition,builder,p,the,link,extract,property,name,string,method,is,used,to,reconcile,the,name,of,an,attribute,with,the,name,of,a,java,bean,property,param,element,the,xml,element,being,parsed,param,builder,used,to,define,the,code,bean,definition,code,see,extract,property,name,string;override,protected,void,do,parse,element,element,parser,context,parser,context,bean,definition,builder,builder,named,node,map,attributes,element,get,attributes,for,int,x,0,x,attributes,get,length,x,attr,attribute,attr,attributes,item,x,if,is,eligible,attribute,attribute,parser,context,string,property,name,extract,property,name,attribute,get,local,name,assert,state,string,utils,has,text,property,name,illegal,property,name,returned,from,extract,property,name,string,cannot,be,null,or,empty,builder,add,property,value,property,name,attribute,get,value,post,process,builder,element
AbstractSimpleBeanDefinitionParser -> @Override 	protected void doParse(Element element, ParserContext parserContext, BeanDefinitionBuilder builder);1356735495;Parse the supplied {@link Element} and populate the supplied_{@link BeanDefinitionBuilder} as required._<p>This implementation maps any attributes present on the_supplied element to {@link org.springframework.beans.PropertyValue}_instances, and_{@link BeanDefinitionBuilder#addPropertyValue(String, Object) adds them}_to the_{@link org.springframework.beans.factory.config.BeanDefinition builder}._<p>The {@link #extractPropertyName(String)} method is used to_reconcile the name of an attribute with the name of a JavaBean_property._@param element the XML element being parsed_@param builder used to define the {@code BeanDefinition}_@see #extractPropertyName(String);@Override_	protected void doParse(Element element, ParserContext parserContext, BeanDefinitionBuilder builder) {_		NamedNodeMap attributes = element.getAttributes()__		for (int x = 0_ x < attributes.getLength()_ x++) {_			Attr attribute = (Attr) attributes.item(x)__			if (isEligibleAttribute(attribute, parserContext)) {_				String propertyName = extractPropertyName(attribute.getLocalName())__				Assert.state(StringUtils.hasText(propertyName),_						"Illegal property name returned from 'extractPropertyName(String)': cannot be null or empty.")__				builder.addPropertyValue(propertyName, attribute.getValue())__			}_		}_		postProcess(builder, element)__	};parse,the,supplied,link,element,and,populate,the,supplied,link,bean,definition,builder,as,required,p,this,implementation,maps,any,attributes,present,on,the,supplied,element,to,link,org,springframework,beans,property,value,instances,and,link,bean,definition,builder,add,property,value,string,object,adds,them,to,the,link,org,springframework,beans,factory,config,bean,definition,builder,p,the,link,extract,property,name,string,method,is,used,to,reconcile,the,name,of,an,attribute,with,the,name,of,a,java,bean,property,param,element,the,xml,element,being,parsed,param,builder,used,to,define,the,code,bean,definition,see,extract,property,name,string;override,protected,void,do,parse,element,element,parser,context,parser,context,bean,definition,builder,builder,named,node,map,attributes,element,get,attributes,for,int,x,0,x,attributes,get,length,x,attr,attribute,attr,attributes,item,x,if,is,eligible,attribute,attribute,parser,context,string,property,name,extract,property,name,attribute,get,local,name,assert,state,string,utils,has,text,property,name,illegal,property,name,returned,from,extract,property,name,string,cannot,be,null,or,empty,builder,add,property,value,property,name,attribute,get,value,post,process,builder,element
AbstractSimpleBeanDefinitionParser -> @Override 	protected void doParse(Element element, ParserContext parserContext, BeanDefinitionBuilder builder);1405696918;Parse the supplied {@link Element} and populate the supplied_{@link BeanDefinitionBuilder} as required._<p>This implementation maps any attributes present on the_supplied element to {@link org.springframework.beans.PropertyValue}_instances, and_{@link BeanDefinitionBuilder#addPropertyValue(String, Object) adds them}_to the_{@link org.springframework.beans.factory.config.BeanDefinition builder}._<p>The {@link #extractPropertyName(String)} method is used to_reconcile the name of an attribute with the name of a JavaBean_property._@param element the XML element being parsed_@param builder used to define the {@code BeanDefinition}_@see #extractPropertyName(String);@Override_	protected void doParse(Element element, ParserContext parserContext, BeanDefinitionBuilder builder) {_		NamedNodeMap attributes = element.getAttributes()__		for (int x = 0_ x < attributes.getLength()_ x++) {_			Attr attribute = (Attr) attributes.item(x)__			if (isEligibleAttribute(attribute, parserContext)) {_				String propertyName = extractPropertyName(attribute.getLocalName())__				Assert.state(StringUtils.hasText(propertyName),_						"Illegal property name returned from 'extractPropertyName(String)': cannot be null or empty.")__				builder.addPropertyValue(propertyName, attribute.getValue())__			}_		}_		postProcess(builder, element)__	};parse,the,supplied,link,element,and,populate,the,supplied,link,bean,definition,builder,as,required,p,this,implementation,maps,any,attributes,present,on,the,supplied,element,to,link,org,springframework,beans,property,value,instances,and,link,bean,definition,builder,add,property,value,string,object,adds,them,to,the,link,org,springframework,beans,factory,config,bean,definition,builder,p,the,link,extract,property,name,string,method,is,used,to,reconcile,the,name,of,an,attribute,with,the,name,of,a,java,bean,property,param,element,the,xml,element,being,parsed,param,builder,used,to,define,the,code,bean,definition,see,extract,property,name,string;override,protected,void,do,parse,element,element,parser,context,parser,context,bean,definition,builder,builder,named,node,map,attributes,element,get,attributes,for,int,x,0,x,attributes,get,length,x,attr,attribute,attr,attributes,item,x,if,is,eligible,attribute,attribute,parser,context,string,property,name,extract,property,name,attribute,get,local,name,assert,state,string,utils,has,text,property,name,illegal,property,name,returned,from,extract,property,name,string,cannot,be,null,or,empty,builder,add,property,value,property,name,attribute,get,value,post,process,builder,element
AbstractSimpleBeanDefinitionParser -> @Override 	protected void doParse(Element element, ParserContext parserContext, BeanDefinitionBuilder builder);1419966315;Parse the supplied {@link Element} and populate the supplied_{@link BeanDefinitionBuilder} as required._<p>This implementation maps any attributes present on the_supplied element to {@link org.springframework.beans.PropertyValue}_instances, and_{@link BeanDefinitionBuilder#addPropertyValue(String, Object) adds them}_to the_{@link org.springframework.beans.factory.config.BeanDefinition builder}._<p>The {@link #extractPropertyName(String)} method is used to_reconcile the name of an attribute with the name of a JavaBean_property._@param element the XML element being parsed_@param builder used to define the {@code BeanDefinition}_@see #extractPropertyName(String);@Override_	protected void doParse(Element element, ParserContext parserContext, BeanDefinitionBuilder builder) {_		NamedNodeMap attributes = element.getAttributes()__		for (int x = 0_ x < attributes.getLength()_ x++) {_			Attr attribute = (Attr) attributes.item(x)__			if (isEligibleAttribute(attribute, parserContext)) {_				String propertyName = extractPropertyName(attribute.getLocalName())__				Assert.state(StringUtils.hasText(propertyName),_						"Illegal property name returned from 'extractPropertyName(String)': cannot be null or empty.")__				builder.addPropertyValue(propertyName, attribute.getValue())__			}_		}_		postProcess(builder, element)__	};parse,the,supplied,link,element,and,populate,the,supplied,link,bean,definition,builder,as,required,p,this,implementation,maps,any,attributes,present,on,the,supplied,element,to,link,org,springframework,beans,property,value,instances,and,link,bean,definition,builder,add,property,value,string,object,adds,them,to,the,link,org,springframework,beans,factory,config,bean,definition,builder,p,the,link,extract,property,name,string,method,is,used,to,reconcile,the,name,of,an,attribute,with,the,name,of,a,java,bean,property,param,element,the,xml,element,being,parsed,param,builder,used,to,define,the,code,bean,definition,see,extract,property,name,string;override,protected,void,do,parse,element,element,parser,context,parser,context,bean,definition,builder,builder,named,node,map,attributes,element,get,attributes,for,int,x,0,x,attributes,get,length,x,attr,attribute,attr,attributes,item,x,if,is,eligible,attribute,attribute,parser,context,string,property,name,extract,property,name,attribute,get,local,name,assert,state,string,utils,has,text,property,name,illegal,property,name,returned,from,extract,property,name,string,cannot,be,null,or,empty,builder,add,property,value,property,name,attribute,get,value,post,process,builder,element
AbstractSimpleBeanDefinitionParser -> @Override 	protected void doParse(Element element, ParserContext parserContext, BeanDefinitionBuilder builder);1447323728;Parse the supplied {@link Element} and populate the supplied_{@link BeanDefinitionBuilder} as required._<p>This implementation maps any attributes present on the_supplied element to {@link org.springframework.beans.PropertyValue}_instances, and_{@link BeanDefinitionBuilder#addPropertyValue(String, Object) adds them}_to the_{@link org.springframework.beans.factory.config.BeanDefinition builder}._<p>The {@link #extractPropertyName(String)} method is used to_reconcile the name of an attribute with the name of a JavaBean_property._@param element the XML element being parsed_@param builder used to define the {@code BeanDefinition}_@see #extractPropertyName(String);@Override_	protected void doParse(Element element, ParserContext parserContext, BeanDefinitionBuilder builder) {_		NamedNodeMap attributes = element.getAttributes()__		for (int x = 0_ x < attributes.getLength()_ x++) {_			Attr attribute = (Attr) attributes.item(x)__			if (isEligibleAttribute(attribute, parserContext)) {_				String propertyName = extractPropertyName(attribute.getLocalName())__				Assert.state(StringUtils.hasText(propertyName),_						"Illegal property name returned from 'extractPropertyName(String)': cannot be null or empty.")__				builder.addPropertyValue(propertyName, attribute.getValue())__			}_		}_		postProcess(builder, element)__	};parse,the,supplied,link,element,and,populate,the,supplied,link,bean,definition,builder,as,required,p,this,implementation,maps,any,attributes,present,on,the,supplied,element,to,link,org,springframework,beans,property,value,instances,and,link,bean,definition,builder,add,property,value,string,object,adds,them,to,the,link,org,springframework,beans,factory,config,bean,definition,builder,p,the,link,extract,property,name,string,method,is,used,to,reconcile,the,name,of,an,attribute,with,the,name,of,a,java,bean,property,param,element,the,xml,element,being,parsed,param,builder,used,to,define,the,code,bean,definition,see,extract,property,name,string;override,protected,void,do,parse,element,element,parser,context,parser,context,bean,definition,builder,builder,named,node,map,attributes,element,get,attributes,for,int,x,0,x,attributes,get,length,x,attr,attribute,attr,attributes,item,x,if,is,eligible,attribute,attribute,parser,context,string,property,name,extract,property,name,attribute,get,local,name,assert,state,string,utils,has,text,property,name,illegal,property,name,returned,from,extract,property,name,string,cannot,be,null,or,empty,builder,add,property,value,property,name,attribute,get,value,post,process,builder,element
AbstractSimpleBeanDefinitionParser -> @Deprecated 	protected boolean isEligibleAttribute(Attr attribute);1328020251;Determine whether the given attribute is eligible for being_turned into a corresponding bean property value._<p>The default implementation considers any attribute as eligible,_except for the "id" attribute and namespace declaration attributes._@param attribute the XML attribute to check_@see #isEligibleAttribute(String)_@deprecated in favour of {@link #isEligibleAttribute(org.w3c.dom.Attr, ParserContext)};@Deprecated_	protected boolean isEligibleAttribute(Attr attribute) {_		return false__	};determine,whether,the,given,attribute,is,eligible,for,being,turned,into,a,corresponding,bean,property,value,p,the,default,implementation,considers,any,attribute,as,eligible,except,for,the,id,attribute,and,namespace,declaration,attributes,param,attribute,the,xml,attribute,to,check,see,is,eligible,attribute,string,deprecated,in,favour,of,link,is,eligible,attribute,org,w3c,dom,attr,parser,context;deprecated,protected,boolean,is,eligible,attribute,attr,attribute,return,false
AbstractSimpleBeanDefinitionParser -> @Deprecated 	protected boolean isEligibleAttribute(Attr attribute);1356735495;Determine whether the given attribute is eligible for being_turned into a corresponding bean property value._<p>The default implementation considers any attribute as eligible,_except for the "id" attribute and namespace declaration attributes._@param attribute the XML attribute to check_@see #isEligibleAttribute(String)_@deprecated in favour of {@link #isEligibleAttribute(org.w3c.dom.Attr, ParserContext)};@Deprecated_	protected boolean isEligibleAttribute(Attr attribute) {_		return false__	};determine,whether,the,given,attribute,is,eligible,for,being,turned,into,a,corresponding,bean,property,value,p,the,default,implementation,considers,any,attribute,as,eligible,except,for,the,id,attribute,and,namespace,declaration,attributes,param,attribute,the,xml,attribute,to,check,see,is,eligible,attribute,string,deprecated,in,favour,of,link,is,eligible,attribute,org,w3c,dom,attr,parser,context;deprecated,protected,boolean,is,eligible,attribute,attr,attribute,return,false
AbstractSimpleBeanDefinitionParser -> @Deprecated 	protected boolean isEligibleAttribute(Attr attribute);1405696918;Determine whether the given attribute is eligible for being_turned into a corresponding bean property value._<p>The default implementation considers any attribute as eligible,_except for the "id" attribute and namespace declaration attributes._@param attribute the XML attribute to check_@see #isEligibleAttribute(String)_@deprecated in favour of {@link #isEligibleAttribute(org.w3c.dom.Attr, ParserContext)};@Deprecated_	protected boolean isEligibleAttribute(Attr attribute) {_		return false__	};determine,whether,the,given,attribute,is,eligible,for,being,turned,into,a,corresponding,bean,property,value,p,the,default,implementation,considers,any,attribute,as,eligible,except,for,the,id,attribute,and,namespace,declaration,attributes,param,attribute,the,xml,attribute,to,check,see,is,eligible,attribute,string,deprecated,in,favour,of,link,is,eligible,attribute,org,w3c,dom,attr,parser,context;deprecated,protected,boolean,is,eligible,attribute,attr,attribute,return,false
