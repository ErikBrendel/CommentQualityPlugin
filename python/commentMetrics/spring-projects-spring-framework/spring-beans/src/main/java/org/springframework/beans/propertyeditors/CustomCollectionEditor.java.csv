# id;timestamp;commentText;codeText;commentWords;codeWords
CustomCollectionEditor -> @Override 	public String getAsText();1328020251;This implementation returns <code>null</code> to indicate that_there is no appropriate text representation.;@Override_	public String getAsText() {_		return null__	};this,implementation,returns,code,null,code,to,indicate,that,there,is,no,appropriate,text,representation;override,public,string,get,as,text,return,null
CustomCollectionEditor -> @Override 	public String getAsText();1356735495;This implementation returns {@code null} to indicate that_there is no appropriate text representation.;@Override_	public String getAsText() {_		return null__	};this,implementation,returns,code,null,to,indicate,that,there,is,no,appropriate,text,representation;override,public,string,get,as,text,return,null
CustomCollectionEditor -> @Override 	public String getAsText();1385412762;This implementation returns {@code null} to indicate that_there is no appropriate text representation.;@Override_	public String getAsText() {_		return null__	};this,implementation,returns,code,null,to,indicate,that,there,is,no,appropriate,text,representation;override,public,string,get,as,text,return,null
CustomCollectionEditor -> @Override 	public String getAsText();1432125256;This implementation returns {@code null} to indicate that_there is no appropriate text representation.;@Override_	public String getAsText() {_		return null__	};this,implementation,returns,code,null,to,indicate,that,there,is,no,appropriate,text,representation;override,public,string,get,as,text,return,null
CustomCollectionEditor -> @Override 	public String getAsText();1467730834;This implementation returns {@code null} to indicate that_there is no appropriate text representation.;@Override_	public String getAsText() {_		return null__	};this,implementation,returns,code,null,to,indicate,that,there,is,no,appropriate,text,representation;override,public,string,get,as,text,return,null
CustomCollectionEditor -> @Override 	public String getAsText();1468948866;This implementation returns {@code null} to indicate that_there is no appropriate text representation.;@Override_	public String getAsText() {_		return null__	};this,implementation,returns,code,null,to,indicate,that,there,is,no,appropriate,text,representation;override,public,string,get,as,text,return,null
CustomCollectionEditor -> @Override 	@Nullable 	public String getAsText();1495868221;This implementation returns {@code null} to indicate that_there is no appropriate text representation.;@Override_	@Nullable_	public String getAsText() {_		return null__	};this,implementation,returns,code,null,to,indicate,that,there,is,no,appropriate,text,representation;override,nullable,public,string,get,as,text,return,null
CustomCollectionEditor -> @Override 	@Nullable 	public String getAsText();1496837955;This implementation returns {@code null} to indicate that_there is no appropriate text representation.;@Override_	@Nullable_	public String getAsText() {_		return null__	};this,implementation,returns,code,null,to,indicate,that,there,is,no,appropriate,text,representation;override,nullable,public,string,get,as,text,return,null
CustomCollectionEditor -> @Override 	public void setAsText(String text) throws IllegalArgumentException;1328020251;Convert the given text value to a Collection with a single element.;@Override_	public void setAsText(String text) throws IllegalArgumentException {_		setValue(text)__	};convert,the,given,text,value,to,a,collection,with,a,single,element;override,public,void,set,as,text,string,text,throws,illegal,argument,exception,set,value,text
CustomCollectionEditor -> @Override 	public void setAsText(String text) throws IllegalArgumentException;1356735495;Convert the given text value to a Collection with a single element.;@Override_	public void setAsText(String text) throws IllegalArgumentException {_		setValue(text)__	};convert,the,given,text,value,to,a,collection,with,a,single,element;override,public,void,set,as,text,string,text,throws,illegal,argument,exception,set,value,text
CustomCollectionEditor -> @Override 	public void setAsText(String text) throws IllegalArgumentException;1385412762;Convert the given text value to a Collection with a single element.;@Override_	public void setAsText(String text) throws IllegalArgumentException {_		setValue(text)__	};convert,the,given,text,value,to,a,collection,with,a,single,element;override,public,void,set,as,text,string,text,throws,illegal,argument,exception,set,value,text
CustomCollectionEditor -> @Override 	public void setAsText(String text) throws IllegalArgumentException;1432125256;Convert the given text value to a Collection with a single element.;@Override_	public void setAsText(String text) throws IllegalArgumentException {_		setValue(text)__	};convert,the,given,text,value,to,a,collection,with,a,single,element;override,public,void,set,as,text,string,text,throws,illegal,argument,exception,set,value,text
CustomCollectionEditor -> @Override 	public void setAsText(String text) throws IllegalArgumentException;1467730834;Convert the given text value to a Collection with a single element.;@Override_	public void setAsText(String text) throws IllegalArgumentException {_		setValue(text)__	};convert,the,given,text,value,to,a,collection,with,a,single,element;override,public,void,set,as,text,string,text,throws,illegal,argument,exception,set,value,text
CustomCollectionEditor -> @Override 	public void setAsText(String text) throws IllegalArgumentException;1468948866;Convert the given text value to a Collection with a single element.;@Override_	public void setAsText(String text) throws IllegalArgumentException {_		setValue(text)__	};convert,the,given,text,value,to,a,collection,with,a,single,element;override,public,void,set,as,text,string,text,throws,illegal,argument,exception,set,value,text
CustomCollectionEditor -> @Override 	public void setAsText(String text) throws IllegalArgumentException;1495868221;Convert the given text value to a Collection with a single element.;@Override_	public void setAsText(String text) throws IllegalArgumentException {_		setValue(text)__	};convert,the,given,text,value,to,a,collection,with,a,single,element;override,public,void,set,as,text,string,text,throws,illegal,argument,exception,set,value,text
CustomCollectionEditor -> @Override 	public void setAsText(String text) throws IllegalArgumentException;1496837955;Convert the given text value to a Collection with a single element.;@Override_	public void setAsText(String text) throws IllegalArgumentException {_		setValue(text)__	};convert,the,given,text,value,to,a,collection,with,a,single,element;override,public,void,set,as,text,string,text,throws,illegal,argument,exception,set,value,text
CustomCollectionEditor -> public CustomCollectionEditor(Class collectionType);1328020251;Create a new CustomCollectionEditor for the given target type,_keeping an incoming <code>null</code> as-is._@param collectionType the target type, which needs to be a_sub-interface of Collection or a concrete Collection class_@see java.util.Collection_@see java.util.ArrayList_@see java.util.TreeSet_@see java.util.LinkedHashSet;public CustomCollectionEditor(Class collectionType) {_		this(collectionType, false)__	};create,a,new,custom,collection,editor,for,the,given,target,type,keeping,an,incoming,code,null,code,as,is,param,collection,type,the,target,type,which,needs,to,be,a,sub,interface,of,collection,or,a,concrete,collection,class,see,java,util,collection,see,java,util,array,list,see,java,util,tree,set,see,java,util,linked,hash,set;public,custom,collection,editor,class,collection,type,this,collection,type,false
CustomCollectionEditor -> public CustomCollectionEditor(Class collectionType);1356735495;Create a new CustomCollectionEditor for the given target type,_keeping an incoming {@code null} as-is._@param collectionType the target type, which needs to be a_sub-interface of Collection or a concrete Collection class_@see java.util.Collection_@see java.util.ArrayList_@see java.util.TreeSet_@see java.util.LinkedHashSet;public CustomCollectionEditor(Class collectionType) {_		this(collectionType, false)__	};create,a,new,custom,collection,editor,for,the,given,target,type,keeping,an,incoming,code,null,as,is,param,collection,type,the,target,type,which,needs,to,be,a,sub,interface,of,collection,or,a,concrete,collection,class,see,java,util,collection,see,java,util,array,list,see,java,util,tree,set,see,java,util,linked,hash,set;public,custom,collection,editor,class,collection,type,this,collection,type,false
CustomCollectionEditor -> @SuppressWarnings("rawtypes") 	public CustomCollectionEditor(Class<? extends Collection> collectionType, boolean nullAsEmptyCollection);1385412762;Create a new CustomCollectionEditor for the given target type._<p>If the incoming value is of the given type, it will be used as-is._If it is a different Collection type or an array, it will be converted_to a default implementation of the given Collection type._If the value is anything else, a target Collection with that single_value will be created._<p>The default Collection implementations are: ArrayList for List,_TreeSet for SortedSet, and LinkedHashSet for Set._@param collectionType the target type, which needs to be a_sub-interface of Collection or a concrete Collection class_@param nullAsEmptyCollection whether to convert an incoming {@code null}_value to an empty Collection (of the appropriate type)_@see java.util.Collection_@see java.util.ArrayList_@see java.util.TreeSet_@see java.util.LinkedHashSet;@SuppressWarnings("rawtypes")_	public CustomCollectionEditor(Class<? extends Collection> collectionType, boolean nullAsEmptyCollection) {_		if (collectionType == null) {_			throw new IllegalArgumentException("Collection type is required")__		}_		if (!Collection.class.isAssignableFrom(collectionType)) {_			throw new IllegalArgumentException(_					"Collection type [" + collectionType.getName() + "] does not implement [java.util.Collection]")__		}_		this.collectionType = collectionType__		this.nullAsEmptyCollection = nullAsEmptyCollection__	};create,a,new,custom,collection,editor,for,the,given,target,type,p,if,the,incoming,value,is,of,the,given,type,it,will,be,used,as,is,if,it,is,a,different,collection,type,or,an,array,it,will,be,converted,to,a,default,implementation,of,the,given,collection,type,if,the,value,is,anything,else,a,target,collection,with,that,single,value,will,be,created,p,the,default,collection,implementations,are,array,list,for,list,tree,set,for,sorted,set,and,linked,hash,set,for,set,param,collection,type,the,target,type,which,needs,to,be,a,sub,interface,of,collection,or,a,concrete,collection,class,param,null,as,empty,collection,whether,to,convert,an,incoming,code,null,value,to,an,empty,collection,of,the,appropriate,type,see,java,util,collection,see,java,util,array,list,see,java,util,tree,set,see,java,util,linked,hash,set;suppress,warnings,rawtypes,public,custom,collection,editor,class,extends,collection,collection,type,boolean,null,as,empty,collection,if,collection,type,null,throw,new,illegal,argument,exception,collection,type,is,required,if,collection,class,is,assignable,from,collection,type,throw,new,illegal,argument,exception,collection,type,collection,type,get,name,does,not,implement,java,util,collection,this,collection,type,collection,type,this,null,as,empty,collection,null,as,empty,collection
CustomCollectionEditor -> @SuppressWarnings("rawtypes") 	public CustomCollectionEditor(Class<? extends Collection> collectionType, boolean nullAsEmptyCollection);1432125256;Create a new CustomCollectionEditor for the given target type._<p>If the incoming value is of the given type, it will be used as-is._If it is a different Collection type or an array, it will be converted_to a default implementation of the given Collection type._If the value is anything else, a target Collection with that single_value will be created._<p>The default Collection implementations are: ArrayList for List,_TreeSet for SortedSet, and LinkedHashSet for Set._@param collectionType the target type, which needs to be a_sub-interface of Collection or a concrete Collection class_@param nullAsEmptyCollection whether to convert an incoming {@code null}_value to an empty Collection (of the appropriate type)_@see java.util.Collection_@see java.util.ArrayList_@see java.util.TreeSet_@see java.util.LinkedHashSet;@SuppressWarnings("rawtypes")_	public CustomCollectionEditor(Class<? extends Collection> collectionType, boolean nullAsEmptyCollection) {_		if (collectionType == null) {_			throw new IllegalArgumentException("Collection type is required")__		}_		if (!Collection.class.isAssignableFrom(collectionType)) {_			throw new IllegalArgumentException(_					"Collection type [" + collectionType.getName() + "] does not implement [java.util.Collection]")__		}_		this.collectionType = collectionType__		this.nullAsEmptyCollection = nullAsEmptyCollection__	};create,a,new,custom,collection,editor,for,the,given,target,type,p,if,the,incoming,value,is,of,the,given,type,it,will,be,used,as,is,if,it,is,a,different,collection,type,or,an,array,it,will,be,converted,to,a,default,implementation,of,the,given,collection,type,if,the,value,is,anything,else,a,target,collection,with,that,single,value,will,be,created,p,the,default,collection,implementations,are,array,list,for,list,tree,set,for,sorted,set,and,linked,hash,set,for,set,param,collection,type,the,target,type,which,needs,to,be,a,sub,interface,of,collection,or,a,concrete,collection,class,param,null,as,empty,collection,whether,to,convert,an,incoming,code,null,value,to,an,empty,collection,of,the,appropriate,type,see,java,util,collection,see,java,util,array,list,see,java,util,tree,set,see,java,util,linked,hash,set;suppress,warnings,rawtypes,public,custom,collection,editor,class,extends,collection,collection,type,boolean,null,as,empty,collection,if,collection,type,null,throw,new,illegal,argument,exception,collection,type,is,required,if,collection,class,is,assignable,from,collection,type,throw,new,illegal,argument,exception,collection,type,collection,type,get,name,does,not,implement,java,util,collection,this,collection,type,collection,type,this,null,as,empty,collection,null,as,empty,collection
CustomCollectionEditor -> @SuppressWarnings("rawtypes") 	public CustomCollectionEditor(Class<? extends Collection> collectionType, boolean nullAsEmptyCollection);1467730834;Create a new CustomCollectionEditor for the given target type._<p>If the incoming value is of the given type, it will be used as-is._If it is a different Collection type or an array, it will be converted_to a default implementation of the given Collection type._If the value is anything else, a target Collection with that single_value will be created._<p>The default Collection implementations are: ArrayList for List,_TreeSet for SortedSet, and LinkedHashSet for Set._@param collectionType the target type, which needs to be a_sub-interface of Collection or a concrete Collection class_@param nullAsEmptyCollection whether to convert an incoming {@code null}_value to an empty Collection (of the appropriate type)_@see java.util.Collection_@see java.util.ArrayList_@see java.util.TreeSet_@see java.util.LinkedHashSet;@SuppressWarnings("rawtypes")_	public CustomCollectionEditor(Class<? extends Collection> collectionType, boolean nullAsEmptyCollection) {_		if (collectionType == null) {_			throw new IllegalArgumentException("Collection type is required")__		}_		if (!Collection.class.isAssignableFrom(collectionType)) {_			throw new IllegalArgumentException(_					"Collection type [" + collectionType.getName() + "] does not implement [java.util.Collection]")__		}_		this.collectionType = collectionType__		this.nullAsEmptyCollection = nullAsEmptyCollection__	};create,a,new,custom,collection,editor,for,the,given,target,type,p,if,the,incoming,value,is,of,the,given,type,it,will,be,used,as,is,if,it,is,a,different,collection,type,or,an,array,it,will,be,converted,to,a,default,implementation,of,the,given,collection,type,if,the,value,is,anything,else,a,target,collection,with,that,single,value,will,be,created,p,the,default,collection,implementations,are,array,list,for,list,tree,set,for,sorted,set,and,linked,hash,set,for,set,param,collection,type,the,target,type,which,needs,to,be,a,sub,interface,of,collection,or,a,concrete,collection,class,param,null,as,empty,collection,whether,to,convert,an,incoming,code,null,value,to,an,empty,collection,of,the,appropriate,type,see,java,util,collection,see,java,util,array,list,see,java,util,tree,set,see,java,util,linked,hash,set;suppress,warnings,rawtypes,public,custom,collection,editor,class,extends,collection,collection,type,boolean,null,as,empty,collection,if,collection,type,null,throw,new,illegal,argument,exception,collection,type,is,required,if,collection,class,is,assignable,from,collection,type,throw,new,illegal,argument,exception,collection,type,collection,type,get,name,does,not,implement,java,util,collection,this,collection,type,collection,type,this,null,as,empty,collection,null,as,empty,collection
CustomCollectionEditor -> @SuppressWarnings("rawtypes") 	public CustomCollectionEditor(Class<? extends Collection> collectionType, boolean nullAsEmptyCollection);1468948866;Create a new CustomCollectionEditor for the given target type._<p>If the incoming value is of the given type, it will be used as-is._If it is a different Collection type or an array, it will be converted_to a default implementation of the given Collection type._If the value is anything else, a target Collection with that single_value will be created._<p>The default Collection implementations are: ArrayList for List,_TreeSet for SortedSet, and LinkedHashSet for Set._@param collectionType the target type, which needs to be a_sub-interface of Collection or a concrete Collection class_@param nullAsEmptyCollection whether to convert an incoming {@code null}_value to an empty Collection (of the appropriate type)_@see java.util.Collection_@see java.util.ArrayList_@see java.util.TreeSet_@see java.util.LinkedHashSet;@SuppressWarnings("rawtypes")_	public CustomCollectionEditor(Class<? extends Collection> collectionType, boolean nullAsEmptyCollection) {_		if (collectionType == null) {_			throw new IllegalArgumentException("Collection type is required")__		}_		if (!Collection.class.isAssignableFrom(collectionType)) {_			throw new IllegalArgumentException(_					"Collection type [" + collectionType.getName() + "] does not implement [java.util.Collection]")__		}_		this.collectionType = collectionType__		this.nullAsEmptyCollection = nullAsEmptyCollection__	};create,a,new,custom,collection,editor,for,the,given,target,type,p,if,the,incoming,value,is,of,the,given,type,it,will,be,used,as,is,if,it,is,a,different,collection,type,or,an,array,it,will,be,converted,to,a,default,implementation,of,the,given,collection,type,if,the,value,is,anything,else,a,target,collection,with,that,single,value,will,be,created,p,the,default,collection,implementations,are,array,list,for,list,tree,set,for,sorted,set,and,linked,hash,set,for,set,param,collection,type,the,target,type,which,needs,to,be,a,sub,interface,of,collection,or,a,concrete,collection,class,param,null,as,empty,collection,whether,to,convert,an,incoming,code,null,value,to,an,empty,collection,of,the,appropriate,type,see,java,util,collection,see,java,util,array,list,see,java,util,tree,set,see,java,util,linked,hash,set;suppress,warnings,rawtypes,public,custom,collection,editor,class,extends,collection,collection,type,boolean,null,as,empty,collection,if,collection,type,null,throw,new,illegal,argument,exception,collection,type,is,required,if,collection,class,is,assignable,from,collection,type,throw,new,illegal,argument,exception,collection,type,collection,type,get,name,does,not,implement,java,util,collection,this,collection,type,collection,type,this,null,as,empty,collection,null,as,empty,collection
CustomCollectionEditor -> @SuppressWarnings("rawtypes") 	public CustomCollectionEditor(Class<? extends Collection> collectionType, boolean nullAsEmptyCollection);1495868221;Create a new CustomCollectionEditor for the given target type._<p>If the incoming value is of the given type, it will be used as-is._If it is a different Collection type or an array, it will be converted_to a default implementation of the given Collection type._If the value is anything else, a target Collection with that single_value will be created._<p>The default Collection implementations are: ArrayList for List,_TreeSet for SortedSet, and LinkedHashSet for Set._@param collectionType the target type, which needs to be a_sub-interface of Collection or a concrete Collection class_@param nullAsEmptyCollection whether to convert an incoming {@code null}_value to an empty Collection (of the appropriate type)_@see java.util.Collection_@see java.util.ArrayList_@see java.util.TreeSet_@see java.util.LinkedHashSet;@SuppressWarnings("rawtypes")_	public CustomCollectionEditor(Class<? extends Collection> collectionType, boolean nullAsEmptyCollection) {_		if (collectionType == null) {_			throw new IllegalArgumentException("Collection type is required")__		}_		if (!Collection.class.isAssignableFrom(collectionType)) {_			throw new IllegalArgumentException(_					"Collection type [" + collectionType.getName() + "] does not implement [java.util.Collection]")__		}_		this.collectionType = collectionType__		this.nullAsEmptyCollection = nullAsEmptyCollection__	};create,a,new,custom,collection,editor,for,the,given,target,type,p,if,the,incoming,value,is,of,the,given,type,it,will,be,used,as,is,if,it,is,a,different,collection,type,or,an,array,it,will,be,converted,to,a,default,implementation,of,the,given,collection,type,if,the,value,is,anything,else,a,target,collection,with,that,single,value,will,be,created,p,the,default,collection,implementations,are,array,list,for,list,tree,set,for,sorted,set,and,linked,hash,set,for,set,param,collection,type,the,target,type,which,needs,to,be,a,sub,interface,of,collection,or,a,concrete,collection,class,param,null,as,empty,collection,whether,to,convert,an,incoming,code,null,value,to,an,empty,collection,of,the,appropriate,type,see,java,util,collection,see,java,util,array,list,see,java,util,tree,set,see,java,util,linked,hash,set;suppress,warnings,rawtypes,public,custom,collection,editor,class,extends,collection,collection,type,boolean,null,as,empty,collection,if,collection,type,null,throw,new,illegal,argument,exception,collection,type,is,required,if,collection,class,is,assignable,from,collection,type,throw,new,illegal,argument,exception,collection,type,collection,type,get,name,does,not,implement,java,util,collection,this,collection,type,collection,type,this,null,as,empty,collection,null,as,empty,collection
CustomCollectionEditor -> @SuppressWarnings("rawtypes") 	public CustomCollectionEditor(Class<? extends Collection> collectionType, boolean nullAsEmptyCollection);1496837955;Create a new CustomCollectionEditor for the given target type._<p>If the incoming value is of the given type, it will be used as-is._If it is a different Collection type or an array, it will be converted_to a default implementation of the given Collection type._If the value is anything else, a target Collection with that single_value will be created._<p>The default Collection implementations are: ArrayList for List,_TreeSet for SortedSet, and LinkedHashSet for Set._@param collectionType the target type, which needs to be a_sub-interface of Collection or a concrete Collection class_@param nullAsEmptyCollection whether to convert an incoming {@code null}_value to an empty Collection (of the appropriate type)_@see java.util.Collection_@see java.util.ArrayList_@see java.util.TreeSet_@see java.util.LinkedHashSet;@SuppressWarnings("rawtypes")_	public CustomCollectionEditor(Class<? extends Collection> collectionType, boolean nullAsEmptyCollection) {_		Assert.notNull(collectionType, "Collection type is required")__		if (!Collection.class.isAssignableFrom(collectionType)) {_			throw new IllegalArgumentException(_					"Collection type [" + collectionType.getName() + "] does not implement [java.util.Collection]")__		}_		this.collectionType = collectionType__		this.nullAsEmptyCollection = nullAsEmptyCollection__	};create,a,new,custom,collection,editor,for,the,given,target,type,p,if,the,incoming,value,is,of,the,given,type,it,will,be,used,as,is,if,it,is,a,different,collection,type,or,an,array,it,will,be,converted,to,a,default,implementation,of,the,given,collection,type,if,the,value,is,anything,else,a,target,collection,with,that,single,value,will,be,created,p,the,default,collection,implementations,are,array,list,for,list,tree,set,for,sorted,set,and,linked,hash,set,for,set,param,collection,type,the,target,type,which,needs,to,be,a,sub,interface,of,collection,or,a,concrete,collection,class,param,null,as,empty,collection,whether,to,convert,an,incoming,code,null,value,to,an,empty,collection,of,the,appropriate,type,see,java,util,collection,see,java,util,array,list,see,java,util,tree,set,see,java,util,linked,hash,set;suppress,warnings,rawtypes,public,custom,collection,editor,class,extends,collection,collection,type,boolean,null,as,empty,collection,assert,not,null,collection,type,collection,type,is,required,if,collection,class,is,assignable,from,collection,type,throw,new,illegal,argument,exception,collection,type,collection,type,get,name,does,not,implement,java,util,collection,this,collection,type,collection,type,this,null,as,empty,collection,null,as,empty,collection
CustomCollectionEditor -> @Override 	public void setValue(Object value);1385412762;Convert the given value to a Collection of the target type.;@Override_	public void setValue(Object value) {_		if (value == null && this.nullAsEmptyCollection) {_			super.setValue(createCollection(this.collectionType, 0))__		}_		else if (value == null || (this.collectionType.isInstance(value) && !alwaysCreateNewCollection())) {_			_			super.setValue(value)__		}_		else if (value instanceof Collection) {_			_			Collection<?> source = (Collection<?>) value__			Collection<Object> target = createCollection(this.collectionType, source.size())__			for (Object elem : source) {_				target.add(convertElement(elem))__			}_			super.setValue(target)__		}_		else if (value.getClass().isArray()) {_			_			int length = Array.getLength(value)__			Collection<Object> target = createCollection(this.collectionType, length)__			for (int i = 0_ i < length_ i++) {_				target.add(convertElement(Array.get(value, i)))__			}_			super.setValue(target)__		}_		else {_			_			Collection<Object> target = createCollection(this.collectionType, 1)__			target.add(convertElement(value))__			super.setValue(target)__		}_	};convert,the,given,value,to,a,collection,of,the,target,type;override,public,void,set,value,object,value,if,value,null,this,null,as,empty,collection,super,set,value,create,collection,this,collection,type,0,else,if,value,null,this,collection,type,is,instance,value,always,create,new,collection,super,set,value,value,else,if,value,instanceof,collection,collection,source,collection,value,collection,object,target,create,collection,this,collection,type,source,size,for,object,elem,source,target,add,convert,element,elem,super,set,value,target,else,if,value,get,class,is,array,int,length,array,get,length,value,collection,object,target,create,collection,this,collection,type,length,for,int,i,0,i,length,i,target,add,convert,element,array,get,value,i,super,set,value,target,else,collection,object,target,create,collection,this,collection,type,1,target,add,convert,element,value,super,set,value,target
CustomCollectionEditor -> @Override 	public void setValue(Object value);1432125256;Convert the given value to a Collection of the target type.;@Override_	public void setValue(Object value) {_		if (value == null && this.nullAsEmptyCollection) {_			super.setValue(createCollection(this.collectionType, 0))__		}_		else if (value == null || (this.collectionType.isInstance(value) && !alwaysCreateNewCollection())) {_			_			super.setValue(value)__		}_		else if (value instanceof Collection) {_			_			Collection<?> source = (Collection<?>) value__			Collection<Object> target = createCollection(this.collectionType, source.size())__			for (Object elem : source) {_				target.add(convertElement(elem))__			}_			super.setValue(target)__		}_		else if (value.getClass().isArray()) {_			_			int length = Array.getLength(value)__			Collection<Object> target = createCollection(this.collectionType, length)__			for (int i = 0_ i < length_ i++) {_				target.add(convertElement(Array.get(value, i)))__			}_			super.setValue(target)__		}_		else {_			_			Collection<Object> target = createCollection(this.collectionType, 1)__			target.add(convertElement(value))__			super.setValue(target)__		}_	};convert,the,given,value,to,a,collection,of,the,target,type;override,public,void,set,value,object,value,if,value,null,this,null,as,empty,collection,super,set,value,create,collection,this,collection,type,0,else,if,value,null,this,collection,type,is,instance,value,always,create,new,collection,super,set,value,value,else,if,value,instanceof,collection,collection,source,collection,value,collection,object,target,create,collection,this,collection,type,source,size,for,object,elem,source,target,add,convert,element,elem,super,set,value,target,else,if,value,get,class,is,array,int,length,array,get,length,value,collection,object,target,create,collection,this,collection,type,length,for,int,i,0,i,length,i,target,add,convert,element,array,get,value,i,super,set,value,target,else,collection,object,target,create,collection,this,collection,type,1,target,add,convert,element,value,super,set,value,target
CustomCollectionEditor -> @Override 	public void setValue(Object value);1467730834;Convert the given value to a Collection of the target type.;@Override_	public void setValue(Object value) {_		if (value == null && this.nullAsEmptyCollection) {_			super.setValue(createCollection(this.collectionType, 0))__		}_		else if (value == null || (this.collectionType.isInstance(value) && !alwaysCreateNewCollection())) {_			_			super.setValue(value)__		}_		else if (value instanceof Collection) {_			_			Collection<?> source = (Collection<?>) value__			Collection<Object> target = createCollection(this.collectionType, source.size())__			for (Object elem : source) {_				target.add(convertElement(elem))__			}_			super.setValue(target)__		}_		else if (value.getClass().isArray()) {_			_			int length = Array.getLength(value)__			Collection<Object> target = createCollection(this.collectionType, length)__			for (int i = 0_ i < length_ i++) {_				target.add(convertElement(Array.get(value, i)))__			}_			super.setValue(target)__		}_		else {_			_			Collection<Object> target = createCollection(this.collectionType, 1)__			target.add(convertElement(value))__			super.setValue(target)__		}_	};convert,the,given,value,to,a,collection,of,the,target,type;override,public,void,set,value,object,value,if,value,null,this,null,as,empty,collection,super,set,value,create,collection,this,collection,type,0,else,if,value,null,this,collection,type,is,instance,value,always,create,new,collection,super,set,value,value,else,if,value,instanceof,collection,collection,source,collection,value,collection,object,target,create,collection,this,collection,type,source,size,for,object,elem,source,target,add,convert,element,elem,super,set,value,target,else,if,value,get,class,is,array,int,length,array,get,length,value,collection,object,target,create,collection,this,collection,type,length,for,int,i,0,i,length,i,target,add,convert,element,array,get,value,i,super,set,value,target,else,collection,object,target,create,collection,this,collection,type,1,target,add,convert,element,value,super,set,value,target
CustomCollectionEditor -> @Override 	public void setValue(Object value);1468948866;Convert the given value to a Collection of the target type.;@Override_	public void setValue(Object value) {_		if (value == null && this.nullAsEmptyCollection) {_			super.setValue(createCollection(this.collectionType, 0))__		}_		else if (value == null || (this.collectionType.isInstance(value) && !alwaysCreateNewCollection())) {_			_			super.setValue(value)__		}_		else if (value instanceof Collection) {_			_			Collection<?> source = (Collection<?>) value__			Collection<Object> target = createCollection(this.collectionType, source.size())__			for (Object elem : source) {_				target.add(convertElement(elem))__			}_			super.setValue(target)__		}_		else if (value.getClass().isArray()) {_			_			int length = Array.getLength(value)__			Collection<Object> target = createCollection(this.collectionType, length)__			for (int i = 0_ i < length_ i++) {_				target.add(convertElement(Array.get(value, i)))__			}_			super.setValue(target)__		}_		else {_			_			Collection<Object> target = createCollection(this.collectionType, 1)__			target.add(convertElement(value))__			super.setValue(target)__		}_	};convert,the,given,value,to,a,collection,of,the,target,type;override,public,void,set,value,object,value,if,value,null,this,null,as,empty,collection,super,set,value,create,collection,this,collection,type,0,else,if,value,null,this,collection,type,is,instance,value,always,create,new,collection,super,set,value,value,else,if,value,instanceof,collection,collection,source,collection,value,collection,object,target,create,collection,this,collection,type,source,size,for,object,elem,source,target,add,convert,element,elem,super,set,value,target,else,if,value,get,class,is,array,int,length,array,get,length,value,collection,object,target,create,collection,this,collection,type,length,for,int,i,0,i,length,i,target,add,convert,element,array,get,value,i,super,set,value,target,else,collection,object,target,create,collection,this,collection,type,1,target,add,convert,element,value,super,set,value,target
CustomCollectionEditor -> @Override 	public void setValue(Object value);1495868221;Convert the given value to a Collection of the target type.;@Override_	public void setValue(Object value) {_		if (value == null && this.nullAsEmptyCollection) {_			super.setValue(createCollection(this.collectionType, 0))__		}_		else if (value == null || (this.collectionType.isInstance(value) && !alwaysCreateNewCollection())) {_			_			super.setValue(value)__		}_		else if (value instanceof Collection) {_			_			Collection<?> source = (Collection<?>) value__			Collection<Object> target = createCollection(this.collectionType, source.size())__			for (Object elem : source) {_				target.add(convertElement(elem))__			}_			super.setValue(target)__		}_		else if (value.getClass().isArray()) {_			_			int length = Array.getLength(value)__			Collection<Object> target = createCollection(this.collectionType, length)__			for (int i = 0_ i < length_ i++) {_				target.add(convertElement(Array.get(value, i)))__			}_			super.setValue(target)__		}_		else {_			_			Collection<Object> target = createCollection(this.collectionType, 1)__			target.add(convertElement(value))__			super.setValue(target)__		}_	};convert,the,given,value,to,a,collection,of,the,target,type;override,public,void,set,value,object,value,if,value,null,this,null,as,empty,collection,super,set,value,create,collection,this,collection,type,0,else,if,value,null,this,collection,type,is,instance,value,always,create,new,collection,super,set,value,value,else,if,value,instanceof,collection,collection,source,collection,value,collection,object,target,create,collection,this,collection,type,source,size,for,object,elem,source,target,add,convert,element,elem,super,set,value,target,else,if,value,get,class,is,array,int,length,array,get,length,value,collection,object,target,create,collection,this,collection,type,length,for,int,i,0,i,length,i,target,add,convert,element,array,get,value,i,super,set,value,target,else,collection,object,target,create,collection,this,collection,type,1,target,add,convert,element,value,super,set,value,target
CustomCollectionEditor -> protected boolean alwaysCreateNewCollection();1328020251;Return whether to always create a new Collection,_even if the type of the passed-in Collection already matches._<p>Default is "false"_ can be overridden to enforce creation of a_new Collection, for example to convert elements in any case._@see #convertElement;protected boolean alwaysCreateNewCollection() {_		return false__	};return,whether,to,always,create,a,new,collection,even,if,the,type,of,the,passed,in,collection,already,matches,p,default,is,false,can,be,overridden,to,enforce,creation,of,a,new,collection,for,example,to,convert,elements,in,any,case,see,convert,element;protected,boolean,always,create,new,collection,return,false
CustomCollectionEditor -> protected boolean alwaysCreateNewCollection();1356735495;Return whether to always create a new Collection,_even if the type of the passed-in Collection already matches._<p>Default is "false"_ can be overridden to enforce creation of a_new Collection, for example to convert elements in any case._@see #convertElement;protected boolean alwaysCreateNewCollection() {_		return false__	};return,whether,to,always,create,a,new,collection,even,if,the,type,of,the,passed,in,collection,already,matches,p,default,is,false,can,be,overridden,to,enforce,creation,of,a,new,collection,for,example,to,convert,elements,in,any,case,see,convert,element;protected,boolean,always,create,new,collection,return,false
CustomCollectionEditor -> protected boolean alwaysCreateNewCollection();1385412762;Return whether to always create a new Collection,_even if the type of the passed-in Collection already matches._<p>Default is "false"_ can be overridden to enforce creation of a_new Collection, for example to convert elements in any case._@see #convertElement;protected boolean alwaysCreateNewCollection() {_		return false__	};return,whether,to,always,create,a,new,collection,even,if,the,type,of,the,passed,in,collection,already,matches,p,default,is,false,can,be,overridden,to,enforce,creation,of,a,new,collection,for,example,to,convert,elements,in,any,case,see,convert,element;protected,boolean,always,create,new,collection,return,false
CustomCollectionEditor -> protected boolean alwaysCreateNewCollection();1432125256;Return whether to always create a new Collection,_even if the type of the passed-in Collection already matches._<p>Default is "false"_ can be overridden to enforce creation of a_new Collection, for example to convert elements in any case._@see #convertElement;protected boolean alwaysCreateNewCollection() {_		return false__	};return,whether,to,always,create,a,new,collection,even,if,the,type,of,the,passed,in,collection,already,matches,p,default,is,false,can,be,overridden,to,enforce,creation,of,a,new,collection,for,example,to,convert,elements,in,any,case,see,convert,element;protected,boolean,always,create,new,collection,return,false
CustomCollectionEditor -> protected boolean alwaysCreateNewCollection();1467730834;Return whether to always create a new Collection,_even if the type of the passed-in Collection already matches._<p>Default is "false"_ can be overridden to enforce creation of a_new Collection, for example to convert elements in any case._@see #convertElement;protected boolean alwaysCreateNewCollection() {_		return false__	};return,whether,to,always,create,a,new,collection,even,if,the,type,of,the,passed,in,collection,already,matches,p,default,is,false,can,be,overridden,to,enforce,creation,of,a,new,collection,for,example,to,convert,elements,in,any,case,see,convert,element;protected,boolean,always,create,new,collection,return,false
CustomCollectionEditor -> protected boolean alwaysCreateNewCollection();1468948866;Return whether to always create a new Collection,_even if the type of the passed-in Collection already matches._<p>Default is "false"_ can be overridden to enforce creation of a_new Collection, for example to convert elements in any case._@see #convertElement;protected boolean alwaysCreateNewCollection() {_		return false__	};return,whether,to,always,create,a,new,collection,even,if,the,type,of,the,passed,in,collection,already,matches,p,default,is,false,can,be,overridden,to,enforce,creation,of,a,new,collection,for,example,to,convert,elements,in,any,case,see,convert,element;protected,boolean,always,create,new,collection,return,false
CustomCollectionEditor -> protected boolean alwaysCreateNewCollection();1495868221;Return whether to always create a new Collection,_even if the type of the passed-in Collection already matches._<p>Default is "false"_ can be overridden to enforce creation of a_new Collection, for example to convert elements in any case._@see #convertElement;protected boolean alwaysCreateNewCollection() {_		return false__	};return,whether,to,always,create,a,new,collection,even,if,the,type,of,the,passed,in,collection,already,matches,p,default,is,false,can,be,overridden,to,enforce,creation,of,a,new,collection,for,example,to,convert,elements,in,any,case,see,convert,element;protected,boolean,always,create,new,collection,return,false
CustomCollectionEditor -> protected boolean alwaysCreateNewCollection();1496837955;Return whether to always create a new Collection,_even if the type of the passed-in Collection already matches._<p>Default is "false"_ can be overridden to enforce creation of a_new Collection, for example to convert elements in any case._@see #convertElement;protected boolean alwaysCreateNewCollection() {_		return false__	};return,whether,to,always,create,a,new,collection,even,if,the,type,of,the,passed,in,collection,already,matches,p,default,is,false,can,be,overridden,to,enforce,creation,of,a,new,collection,for,example,to,convert,elements,in,any,case,see,convert,element;protected,boolean,always,create,new,collection,return,false
CustomCollectionEditor -> @SuppressWarnings("rawtypes") 	public CustomCollectionEditor(Class<? extends Collection> collectionType);1385412762;Create a new CustomCollectionEditor for the given target type,_keeping an incoming {@code null} as-is._@param collectionType the target type, which needs to be a_sub-interface of Collection or a concrete Collection class_@see java.util.Collection_@see java.util.ArrayList_@see java.util.TreeSet_@see java.util.LinkedHashSet;@SuppressWarnings("rawtypes")_	public CustomCollectionEditor(Class<? extends Collection> collectionType) {_		this(collectionType, false)__	};create,a,new,custom,collection,editor,for,the,given,target,type,keeping,an,incoming,code,null,as,is,param,collection,type,the,target,type,which,needs,to,be,a,sub,interface,of,collection,or,a,concrete,collection,class,see,java,util,collection,see,java,util,array,list,see,java,util,tree,set,see,java,util,linked,hash,set;suppress,warnings,rawtypes,public,custom,collection,editor,class,extends,collection,collection,type,this,collection,type,false
CustomCollectionEditor -> @SuppressWarnings("rawtypes") 	public CustomCollectionEditor(Class<? extends Collection> collectionType);1432125256;Create a new CustomCollectionEditor for the given target type,_keeping an incoming {@code null} as-is._@param collectionType the target type, which needs to be a_sub-interface of Collection or a concrete Collection class_@see java.util.Collection_@see java.util.ArrayList_@see java.util.TreeSet_@see java.util.LinkedHashSet;@SuppressWarnings("rawtypes")_	public CustomCollectionEditor(Class<? extends Collection> collectionType) {_		this(collectionType, false)__	};create,a,new,custom,collection,editor,for,the,given,target,type,keeping,an,incoming,code,null,as,is,param,collection,type,the,target,type,which,needs,to,be,a,sub,interface,of,collection,or,a,concrete,collection,class,see,java,util,collection,see,java,util,array,list,see,java,util,tree,set,see,java,util,linked,hash,set;suppress,warnings,rawtypes,public,custom,collection,editor,class,extends,collection,collection,type,this,collection,type,false
CustomCollectionEditor -> @SuppressWarnings("rawtypes") 	public CustomCollectionEditor(Class<? extends Collection> collectionType);1467730834;Create a new CustomCollectionEditor for the given target type,_keeping an incoming {@code null} as-is._@param collectionType the target type, which needs to be a_sub-interface of Collection or a concrete Collection class_@see java.util.Collection_@see java.util.ArrayList_@see java.util.TreeSet_@see java.util.LinkedHashSet;@SuppressWarnings("rawtypes")_	public CustomCollectionEditor(Class<? extends Collection> collectionType) {_		this(collectionType, false)__	};create,a,new,custom,collection,editor,for,the,given,target,type,keeping,an,incoming,code,null,as,is,param,collection,type,the,target,type,which,needs,to,be,a,sub,interface,of,collection,or,a,concrete,collection,class,see,java,util,collection,see,java,util,array,list,see,java,util,tree,set,see,java,util,linked,hash,set;suppress,warnings,rawtypes,public,custom,collection,editor,class,extends,collection,collection,type,this,collection,type,false
CustomCollectionEditor -> @SuppressWarnings("rawtypes") 	public CustomCollectionEditor(Class<? extends Collection> collectionType);1468948866;Create a new CustomCollectionEditor for the given target type,_keeping an incoming {@code null} as-is._@param collectionType the target type, which needs to be a_sub-interface of Collection or a concrete Collection class_@see java.util.Collection_@see java.util.ArrayList_@see java.util.TreeSet_@see java.util.LinkedHashSet;@SuppressWarnings("rawtypes")_	public CustomCollectionEditor(Class<? extends Collection> collectionType) {_		this(collectionType, false)__	};create,a,new,custom,collection,editor,for,the,given,target,type,keeping,an,incoming,code,null,as,is,param,collection,type,the,target,type,which,needs,to,be,a,sub,interface,of,collection,or,a,concrete,collection,class,see,java,util,collection,see,java,util,array,list,see,java,util,tree,set,see,java,util,linked,hash,set;suppress,warnings,rawtypes,public,custom,collection,editor,class,extends,collection,collection,type,this,collection,type,false
CustomCollectionEditor -> @SuppressWarnings("rawtypes") 	public CustomCollectionEditor(Class<? extends Collection> collectionType);1495868221;Create a new CustomCollectionEditor for the given target type,_keeping an incoming {@code null} as-is._@param collectionType the target type, which needs to be a_sub-interface of Collection or a concrete Collection class_@see java.util.Collection_@see java.util.ArrayList_@see java.util.TreeSet_@see java.util.LinkedHashSet;@SuppressWarnings("rawtypes")_	public CustomCollectionEditor(Class<? extends Collection> collectionType) {_		this(collectionType, false)__	};create,a,new,custom,collection,editor,for,the,given,target,type,keeping,an,incoming,code,null,as,is,param,collection,type,the,target,type,which,needs,to,be,a,sub,interface,of,collection,or,a,concrete,collection,class,see,java,util,collection,see,java,util,array,list,see,java,util,tree,set,see,java,util,linked,hash,set;suppress,warnings,rawtypes,public,custom,collection,editor,class,extends,collection,collection,type,this,collection,type,false
CustomCollectionEditor -> @SuppressWarnings("rawtypes") 	public CustomCollectionEditor(Class<? extends Collection> collectionType);1496837955;Create a new CustomCollectionEditor for the given target type,_keeping an incoming {@code null} as-is._@param collectionType the target type, which needs to be a_sub-interface of Collection or a concrete Collection class_@see java.util.Collection_@see java.util.ArrayList_@see java.util.TreeSet_@see java.util.LinkedHashSet;@SuppressWarnings("rawtypes")_	public CustomCollectionEditor(Class<? extends Collection> collectionType) {_		this(collectionType, false)__	};create,a,new,custom,collection,editor,for,the,given,target,type,keeping,an,incoming,code,null,as,is,param,collection,type,the,target,type,which,needs,to,be,a,sub,interface,of,collection,or,a,concrete,collection,class,see,java,util,collection,see,java,util,array,list,see,java,util,tree,set,see,java,util,linked,hash,set;suppress,warnings,rawtypes,public,custom,collection,editor,class,extends,collection,collection,type,this,collection,type,false
CustomCollectionEditor -> protected Collection createCollection(Class collectionType, int initialCapacity);1328020251;Create a Collection of the given type, with the given_initial capacity (if supported by the Collection type)._@param collectionType a sub-interface of Collection_@param initialCapacity the initial capacity_@return the new Collection instance;protected Collection createCollection(Class collectionType, int initialCapacity) {_		if (!collectionType.isInterface()) {_			try {_				return (Collection) collectionType.newInstance()__			}_			catch (Exception ex) {_				throw new IllegalArgumentException(_						"Could not instantiate collection class [" + collectionType.getName() + "]: " + ex.getMessage())__			}_		}_		else if (List.class.equals(collectionType)) {_			return new ArrayList(initialCapacity)__		}_		else if (SortedSet.class.equals(collectionType)) {_			return new TreeSet()__		}_		else {_			return new LinkedHashSet(initialCapacity)__		}_	};create,a,collection,of,the,given,type,with,the,given,initial,capacity,if,supported,by,the,collection,type,param,collection,type,a,sub,interface,of,collection,param,initial,capacity,the,initial,capacity,return,the,new,collection,instance;protected,collection,create,collection,class,collection,type,int,initial,capacity,if,collection,type,is,interface,try,return,collection,collection,type,new,instance,catch,exception,ex,throw,new,illegal,argument,exception,could,not,instantiate,collection,class,collection,type,get,name,ex,get,message,else,if,list,class,equals,collection,type,return,new,array,list,initial,capacity,else,if,sorted,set,class,equals,collection,type,return,new,tree,set,else,return,new,linked,hash,set,initial,capacity
CustomCollectionEditor -> protected Collection createCollection(Class collectionType, int initialCapacity);1356735495;Create a Collection of the given type, with the given_initial capacity (if supported by the Collection type)._@param collectionType a sub-interface of Collection_@param initialCapacity the initial capacity_@return the new Collection instance;protected Collection createCollection(Class collectionType, int initialCapacity) {_		if (!collectionType.isInterface()) {_			try {_				return (Collection) collectionType.newInstance()__			}_			catch (Exception ex) {_				throw new IllegalArgumentException(_						"Could not instantiate collection class [" + collectionType.getName() + "]: " + ex.getMessage())__			}_		}_		else if (List.class.equals(collectionType)) {_			return new ArrayList(initialCapacity)__		}_		else if (SortedSet.class.equals(collectionType)) {_			return new TreeSet()__		}_		else {_			return new LinkedHashSet(initialCapacity)__		}_	};create,a,collection,of,the,given,type,with,the,given,initial,capacity,if,supported,by,the,collection,type,param,collection,type,a,sub,interface,of,collection,param,initial,capacity,the,initial,capacity,return,the,new,collection,instance;protected,collection,create,collection,class,collection,type,int,initial,capacity,if,collection,type,is,interface,try,return,collection,collection,type,new,instance,catch,exception,ex,throw,new,illegal,argument,exception,could,not,instantiate,collection,class,collection,type,get,name,ex,get,message,else,if,list,class,equals,collection,type,return,new,array,list,initial,capacity,else,if,sorted,set,class,equals,collection,type,return,new,tree,set,else,return,new,linked,hash,set,initial,capacity
CustomCollectionEditor -> @SuppressWarnings({ "rawtypes", "unchecked" }) 	protected Collection<Object> createCollection(Class<? extends Collection> collectionType, int initialCapacity);1385412762;Create a Collection of the given type, with the given_initial capacity (if supported by the Collection type)._@param collectionType a sub-interface of Collection_@param initialCapacity the initial capacity_@return the new Collection instance;@SuppressWarnings({ "rawtypes", "unchecked" })_	protected Collection<Object> createCollection(Class<? extends Collection> collectionType, int initialCapacity) {_		if (!collectionType.isInterface()) {_			try {_				return collectionType.newInstance()__			}_			catch (Exception ex) {_				throw new IllegalArgumentException(_						"Could not instantiate collection class [" + collectionType.getName() + "]: " + ex.getMessage())__			}_		}_		else if (List.class.equals(collectionType)) {_			return new ArrayList<Object>(initialCapacity)__		}_		else if (SortedSet.class.equals(collectionType)) {_			return new TreeSet<Object>()__		}_		else {_			return new LinkedHashSet<Object>(initialCapacity)__		}_	};create,a,collection,of,the,given,type,with,the,given,initial,capacity,if,supported,by,the,collection,type,param,collection,type,a,sub,interface,of,collection,param,initial,capacity,the,initial,capacity,return,the,new,collection,instance;suppress,warnings,rawtypes,unchecked,protected,collection,object,create,collection,class,extends,collection,collection,type,int,initial,capacity,if,collection,type,is,interface,try,return,collection,type,new,instance,catch,exception,ex,throw,new,illegal,argument,exception,could,not,instantiate,collection,class,collection,type,get,name,ex,get,message,else,if,list,class,equals,collection,type,return,new,array,list,object,initial,capacity,else,if,sorted,set,class,equals,collection,type,return,new,tree,set,object,else,return,new,linked,hash,set,object,initial,capacity
CustomCollectionEditor -> @SuppressWarnings({ "rawtypes", "unchecked" }) 	protected Collection<Object> createCollection(Class<? extends Collection> collectionType, int initialCapacity);1432125256;Create a Collection of the given type, with the given_initial capacity (if supported by the Collection type)._@param collectionType a sub-interface of Collection_@param initialCapacity the initial capacity_@return the new Collection instance;@SuppressWarnings({ "rawtypes", "unchecked" })_	protected Collection<Object> createCollection(Class<? extends Collection> collectionType, int initialCapacity) {_		if (!collectionType.isInterface()) {_			try {_				return collectionType.newInstance()__			}_			catch (Exception ex) {_				throw new IllegalArgumentException(_						"Could not instantiate collection class [" + collectionType.getName() + "]: " + ex.getMessage())__			}_		}_		else if (List.class == collectionType) {_			return new ArrayList<Object>(initialCapacity)__		}_		else if (SortedSet.class == collectionType) {_			return new TreeSet<Object>()__		}_		else {_			return new LinkedHashSet<Object>(initialCapacity)__		}_	};create,a,collection,of,the,given,type,with,the,given,initial,capacity,if,supported,by,the,collection,type,param,collection,type,a,sub,interface,of,collection,param,initial,capacity,the,initial,capacity,return,the,new,collection,instance;suppress,warnings,rawtypes,unchecked,protected,collection,object,create,collection,class,extends,collection,collection,type,int,initial,capacity,if,collection,type,is,interface,try,return,collection,type,new,instance,catch,exception,ex,throw,new,illegal,argument,exception,could,not,instantiate,collection,class,collection,type,get,name,ex,get,message,else,if,list,class,collection,type,return,new,array,list,object,initial,capacity,else,if,sorted,set,class,collection,type,return,new,tree,set,object,else,return,new,linked,hash,set,object,initial,capacity
CustomCollectionEditor -> @SuppressWarnings({ "rawtypes", "unchecked" }) 	protected Collection<Object> createCollection(Class<? extends Collection> collectionType, int initialCapacity);1467730834;Create a Collection of the given type, with the given_initial capacity (if supported by the Collection type)._@param collectionType a sub-interface of Collection_@param initialCapacity the initial capacity_@return the new Collection instance;@SuppressWarnings({ "rawtypes", "unchecked" })_	protected Collection<Object> createCollection(Class<? extends Collection> collectionType, int initialCapacity) {_		if (!collectionType.isInterface()) {_			try {_				return collectionType.newInstance()__			}_			catch (Exception ex) {_				throw new IllegalArgumentException(_						"Could not instantiate collection class [" + collectionType.getName() + "]: " + ex.getMessage())__			}_		}_		else if (List.class == collectionType) {_			return new ArrayList<>(initialCapacity)__		}_		else if (SortedSet.class == collectionType) {_			return new TreeSet<>()__		}_		else {_			return new LinkedHashSet<>(initialCapacity)__		}_	};create,a,collection,of,the,given,type,with,the,given,initial,capacity,if,supported,by,the,collection,type,param,collection,type,a,sub,interface,of,collection,param,initial,capacity,the,initial,capacity,return,the,new,collection,instance;suppress,warnings,rawtypes,unchecked,protected,collection,object,create,collection,class,extends,collection,collection,type,int,initial,capacity,if,collection,type,is,interface,try,return,collection,type,new,instance,catch,exception,ex,throw,new,illegal,argument,exception,could,not,instantiate,collection,class,collection,type,get,name,ex,get,message,else,if,list,class,collection,type,return,new,array,list,initial,capacity,else,if,sorted,set,class,collection,type,return,new,tree,set,else,return,new,linked,hash,set,initial,capacity
CustomCollectionEditor -> @SuppressWarnings({ "rawtypes", "unchecked" }) 	protected Collection<Object> createCollection(Class<? extends Collection> collectionType, int initialCapacity);1468948866;Create a Collection of the given type, with the given_initial capacity (if supported by the Collection type)._@param collectionType a sub-interface of Collection_@param initialCapacity the initial capacity_@return the new Collection instance;@SuppressWarnings({ "rawtypes", "unchecked" })_	protected Collection<Object> createCollection(Class<? extends Collection> collectionType, int initialCapacity) {_		if (!collectionType.isInterface()) {_			try {_				return ReflectionUtils.accessibleConstructor(collectionType).newInstance()__			}_			catch (Throwable ex) {_				throw new IllegalArgumentException(_						"Could not instantiate collection class: " + collectionType.getName(), ex)__			}_		}_		else if (List.class == collectionType) {_			return new ArrayList<>(initialCapacity)__		}_		else if (SortedSet.class == collectionType) {_			return new TreeSet<>()__		}_		else {_			return new LinkedHashSet<>(initialCapacity)__		}_	};create,a,collection,of,the,given,type,with,the,given,initial,capacity,if,supported,by,the,collection,type,param,collection,type,a,sub,interface,of,collection,param,initial,capacity,the,initial,capacity,return,the,new,collection,instance;suppress,warnings,rawtypes,unchecked,protected,collection,object,create,collection,class,extends,collection,collection,type,int,initial,capacity,if,collection,type,is,interface,try,return,reflection,utils,accessible,constructor,collection,type,new,instance,catch,throwable,ex,throw,new,illegal,argument,exception,could,not,instantiate,collection,class,collection,type,get,name,ex,else,if,list,class,collection,type,return,new,array,list,initial,capacity,else,if,sorted,set,class,collection,type,return,new,tree,set,else,return,new,linked,hash,set,initial,capacity
CustomCollectionEditor -> @SuppressWarnings({ "rawtypes", "unchecked" }) 	protected Collection<Object> createCollection(Class<? extends Collection> collectionType, int initialCapacity);1495868221;Create a Collection of the given type, with the given_initial capacity (if supported by the Collection type)._@param collectionType a sub-interface of Collection_@param initialCapacity the initial capacity_@return the new Collection instance;@SuppressWarnings({ "rawtypes", "unchecked" })_	protected Collection<Object> createCollection(Class<? extends Collection> collectionType, int initialCapacity) {_		if (!collectionType.isInterface()) {_			try {_				return ReflectionUtils.accessibleConstructor(collectionType).newInstance()__			}_			catch (Throwable ex) {_				throw new IllegalArgumentException(_						"Could not instantiate collection class: " + collectionType.getName(), ex)__			}_		}_		else if (List.class == collectionType) {_			return new ArrayList<>(initialCapacity)__		}_		else if (SortedSet.class == collectionType) {_			return new TreeSet<>()__		}_		else {_			return new LinkedHashSet<>(initialCapacity)__		}_	};create,a,collection,of,the,given,type,with,the,given,initial,capacity,if,supported,by,the,collection,type,param,collection,type,a,sub,interface,of,collection,param,initial,capacity,the,initial,capacity,return,the,new,collection,instance;suppress,warnings,rawtypes,unchecked,protected,collection,object,create,collection,class,extends,collection,collection,type,int,initial,capacity,if,collection,type,is,interface,try,return,reflection,utils,accessible,constructor,collection,type,new,instance,catch,throwable,ex,throw,new,illegal,argument,exception,could,not,instantiate,collection,class,collection,type,get,name,ex,else,if,list,class,collection,type,return,new,array,list,initial,capacity,else,if,sorted,set,class,collection,type,return,new,tree,set,else,return,new,linked,hash,set,initial,capacity
CustomCollectionEditor -> @SuppressWarnings({ "rawtypes", "unchecked" }) 	protected Collection<Object> createCollection(Class<? extends Collection> collectionType, int initialCapacity);1496837955;Create a Collection of the given type, with the given_initial capacity (if supported by the Collection type)._@param collectionType a sub-interface of Collection_@param initialCapacity the initial capacity_@return the new Collection instance;@SuppressWarnings({ "rawtypes", "unchecked" })_	protected Collection<Object> createCollection(Class<? extends Collection> collectionType, int initialCapacity) {_		if (!collectionType.isInterface()) {_			try {_				return ReflectionUtils.accessibleConstructor(collectionType).newInstance()__			}_			catch (Throwable ex) {_				throw new IllegalArgumentException(_						"Could not instantiate collection class: " + collectionType.getName(), ex)__			}_		}_		else if (List.class == collectionType) {_			return new ArrayList<>(initialCapacity)__		}_		else if (SortedSet.class == collectionType) {_			return new TreeSet<>()__		}_		else {_			return new LinkedHashSet<>(initialCapacity)__		}_	};create,a,collection,of,the,given,type,with,the,given,initial,capacity,if,supported,by,the,collection,type,param,collection,type,a,sub,interface,of,collection,param,initial,capacity,the,initial,capacity,return,the,new,collection,instance;suppress,warnings,rawtypes,unchecked,protected,collection,object,create,collection,class,extends,collection,collection,type,int,initial,capacity,if,collection,type,is,interface,try,return,reflection,utils,accessible,constructor,collection,type,new,instance,catch,throwable,ex,throw,new,illegal,argument,exception,could,not,instantiate,collection,class,collection,type,get,name,ex,else,if,list,class,collection,type,return,new,array,list,initial,capacity,else,if,sorted,set,class,collection,type,return,new,tree,set,else,return,new,linked,hash,set,initial,capacity
CustomCollectionEditor -> @Override 	@SuppressWarnings("unchecked") 	public void setValue(Object value);1328020251;Convert the given value to a Collection of the target type.;@Override_	@SuppressWarnings("unchecked")_	public void setValue(Object value) {_		if (value == null && this.nullAsEmptyCollection) {_			super.setValue(createCollection(this.collectionType, 0))__		}_		else if (value == null || (this.collectionType.isInstance(value) && !alwaysCreateNewCollection())) {_			_			super.setValue(value)__		}_		else if (value instanceof Collection) {_			_			Collection source = (Collection) value__			Collection target = createCollection(this.collectionType, source.size())__			for (Object elem : source) {_				target.add(convertElement(elem))__			}_			super.setValue(target)__		}_		else if (value.getClass().isArray()) {_			_			int length = Array.getLength(value)__			Collection target = createCollection(this.collectionType, length)__			for (int i = 0_ i < length_ i++) {_				target.add(convertElement(Array.get(value, i)))__			}_			super.setValue(target)__		}_		else {_			_			Collection target = createCollection(this.collectionType, 1)__			target.add(convertElement(value))__			super.setValue(target)__		}_	};convert,the,given,value,to,a,collection,of,the,target,type;override,suppress,warnings,unchecked,public,void,set,value,object,value,if,value,null,this,null,as,empty,collection,super,set,value,create,collection,this,collection,type,0,else,if,value,null,this,collection,type,is,instance,value,always,create,new,collection,super,set,value,value,else,if,value,instanceof,collection,collection,source,collection,value,collection,target,create,collection,this,collection,type,source,size,for,object,elem,source,target,add,convert,element,elem,super,set,value,target,else,if,value,get,class,is,array,int,length,array,get,length,value,collection,target,create,collection,this,collection,type,length,for,int,i,0,i,length,i,target,add,convert,element,array,get,value,i,super,set,value,target,else,collection,target,create,collection,this,collection,type,1,target,add,convert,element,value,super,set,value,target
CustomCollectionEditor -> @Override 	@SuppressWarnings("unchecked") 	public void setValue(Object value);1356735495;Convert the given value to a Collection of the target type.;@Override_	@SuppressWarnings("unchecked")_	public void setValue(Object value) {_		if (value == null && this.nullAsEmptyCollection) {_			super.setValue(createCollection(this.collectionType, 0))__		}_		else if (value == null || (this.collectionType.isInstance(value) && !alwaysCreateNewCollection())) {_			_			super.setValue(value)__		}_		else if (value instanceof Collection) {_			_			Collection source = (Collection) value__			Collection target = createCollection(this.collectionType, source.size())__			for (Object elem : source) {_				target.add(convertElement(elem))__			}_			super.setValue(target)__		}_		else if (value.getClass().isArray()) {_			_			int length = Array.getLength(value)__			Collection target = createCollection(this.collectionType, length)__			for (int i = 0_ i < length_ i++) {_				target.add(convertElement(Array.get(value, i)))__			}_			super.setValue(target)__		}_		else {_			_			Collection target = createCollection(this.collectionType, 1)__			target.add(convertElement(value))__			super.setValue(target)__		}_	};convert,the,given,value,to,a,collection,of,the,target,type;override,suppress,warnings,unchecked,public,void,set,value,object,value,if,value,null,this,null,as,empty,collection,super,set,value,create,collection,this,collection,type,0,else,if,value,null,this,collection,type,is,instance,value,always,create,new,collection,super,set,value,value,else,if,value,instanceof,collection,collection,source,collection,value,collection,target,create,collection,this,collection,type,source,size,for,object,elem,source,target,add,convert,element,elem,super,set,value,target,else,if,value,get,class,is,array,int,length,array,get,length,value,collection,target,create,collection,this,collection,type,length,for,int,i,0,i,length,i,target,add,convert,element,array,get,value,i,super,set,value,target,else,collection,target,create,collection,this,collection,type,1,target,add,convert,element,value,super,set,value,target
CustomCollectionEditor -> public CustomCollectionEditor(Class collectionType, boolean nullAsEmptyCollection);1328020251;Create a new CustomCollectionEditor for the given target type._<p>If the incoming value is of the given type, it will be used as-is._If it is a different Collection type or an array, it will be converted_to a default implementation of the given Collection type._If the value is anything else, a target Collection with that single_value will be created._<p>The default Collection implementations are: ArrayList for List,_TreeSet for SortedSet, and LinkedHashSet for Set._@param collectionType the target type, which needs to be a_sub-interface of Collection or a concrete Collection class_@param nullAsEmptyCollection whether to convert an incoming <code>null</code>_value to an empty Collection (of the appropriate type)_@see java.util.Collection_@see java.util.ArrayList_@see java.util.TreeSet_@see java.util.LinkedHashSet;public CustomCollectionEditor(Class collectionType, boolean nullAsEmptyCollection) {_		if (collectionType == null) {_			throw new IllegalArgumentException("Collection type is required")__		}_		if (!Collection.class.isAssignableFrom(collectionType)) {_			throw new IllegalArgumentException(_					"Collection type [" + collectionType.getName() + "] does not implement [java.util.Collection]")__		}_		this.collectionType = collectionType__		this.nullAsEmptyCollection = nullAsEmptyCollection__	};create,a,new,custom,collection,editor,for,the,given,target,type,p,if,the,incoming,value,is,of,the,given,type,it,will,be,used,as,is,if,it,is,a,different,collection,type,or,an,array,it,will,be,converted,to,a,default,implementation,of,the,given,collection,type,if,the,value,is,anything,else,a,target,collection,with,that,single,value,will,be,created,p,the,default,collection,implementations,are,array,list,for,list,tree,set,for,sorted,set,and,linked,hash,set,for,set,param,collection,type,the,target,type,which,needs,to,be,a,sub,interface,of,collection,or,a,concrete,collection,class,param,null,as,empty,collection,whether,to,convert,an,incoming,code,null,code,value,to,an,empty,collection,of,the,appropriate,type,see,java,util,collection,see,java,util,array,list,see,java,util,tree,set,see,java,util,linked,hash,set;public,custom,collection,editor,class,collection,type,boolean,null,as,empty,collection,if,collection,type,null,throw,new,illegal,argument,exception,collection,type,is,required,if,collection,class,is,assignable,from,collection,type,throw,new,illegal,argument,exception,collection,type,collection,type,get,name,does,not,implement,java,util,collection,this,collection,type,collection,type,this,null,as,empty,collection,null,as,empty,collection
CustomCollectionEditor -> public CustomCollectionEditor(Class collectionType, boolean nullAsEmptyCollection);1356735495;Create a new CustomCollectionEditor for the given target type._<p>If the incoming value is of the given type, it will be used as-is._If it is a different Collection type or an array, it will be converted_to a default implementation of the given Collection type._If the value is anything else, a target Collection with that single_value will be created._<p>The default Collection implementations are: ArrayList for List,_TreeSet for SortedSet, and LinkedHashSet for Set._@param collectionType the target type, which needs to be a_sub-interface of Collection or a concrete Collection class_@param nullAsEmptyCollection whether to convert an incoming {@code null}_value to an empty Collection (of the appropriate type)_@see java.util.Collection_@see java.util.ArrayList_@see java.util.TreeSet_@see java.util.LinkedHashSet;public CustomCollectionEditor(Class collectionType, boolean nullAsEmptyCollection) {_		if (collectionType == null) {_			throw new IllegalArgumentException("Collection type is required")__		}_		if (!Collection.class.isAssignableFrom(collectionType)) {_			throw new IllegalArgumentException(_					"Collection type [" + collectionType.getName() + "] does not implement [java.util.Collection]")__		}_		this.collectionType = collectionType__		this.nullAsEmptyCollection = nullAsEmptyCollection__	};create,a,new,custom,collection,editor,for,the,given,target,type,p,if,the,incoming,value,is,of,the,given,type,it,will,be,used,as,is,if,it,is,a,different,collection,type,or,an,array,it,will,be,converted,to,a,default,implementation,of,the,given,collection,type,if,the,value,is,anything,else,a,target,collection,with,that,single,value,will,be,created,p,the,default,collection,implementations,are,array,list,for,list,tree,set,for,sorted,set,and,linked,hash,set,for,set,param,collection,type,the,target,type,which,needs,to,be,a,sub,interface,of,collection,or,a,concrete,collection,class,param,null,as,empty,collection,whether,to,convert,an,incoming,code,null,value,to,an,empty,collection,of,the,appropriate,type,see,java,util,collection,see,java,util,array,list,see,java,util,tree,set,see,java,util,linked,hash,set;public,custom,collection,editor,class,collection,type,boolean,null,as,empty,collection,if,collection,type,null,throw,new,illegal,argument,exception,collection,type,is,required,if,collection,class,is,assignable,from,collection,type,throw,new,illegal,argument,exception,collection,type,collection,type,get,name,does,not,implement,java,util,collection,this,collection,type,collection,type,this,null,as,empty,collection,null,as,empty,collection
CustomCollectionEditor -> protected Object convertElement(Object element);1328020251;Hook to convert each encountered Collection/array element._The default implementation simply returns the passed-in element as-is._<p>Can be overridden to perform conversion of certain elements,_for example String to Integer if a String array comes in and_should be converted to a Set of Integer objects._<p>Only called if actually creating a new Collection!_This is by default not the case if the type of the passed-in Collection_already matches. Override {@link #alwaysCreateNewCollection()} to_enforce creating a new Collection in every case._@param element the source element_@return the element to be used in the target Collection_@see #alwaysCreateNewCollection();protected Object convertElement(Object element) {_		return element__	};hook,to,convert,each,encountered,collection,array,element,the,default,implementation,simply,returns,the,passed,in,element,as,is,p,can,be,overridden,to,perform,conversion,of,certain,elements,for,example,string,to,integer,if,a,string,array,comes,in,and,should,be,converted,to,a,set,of,integer,objects,p,only,called,if,actually,creating,a,new,collection,this,is,by,default,not,the,case,if,the,type,of,the,passed,in,collection,already,matches,override,link,always,create,new,collection,to,enforce,creating,a,new,collection,in,every,case,param,element,the,source,element,return,the,element,to,be,used,in,the,target,collection,see,always,create,new,collection;protected,object,convert,element,object,element,return,element
CustomCollectionEditor -> protected Object convertElement(Object element);1356735495;Hook to convert each encountered Collection/array element._The default implementation simply returns the passed-in element as-is._<p>Can be overridden to perform conversion of certain elements,_for example String to Integer if a String array comes in and_should be converted to a Set of Integer objects._<p>Only called if actually creating a new Collection!_This is by default not the case if the type of the passed-in Collection_already matches. Override {@link #alwaysCreateNewCollection()} to_enforce creating a new Collection in every case._@param element the source element_@return the element to be used in the target Collection_@see #alwaysCreateNewCollection();protected Object convertElement(Object element) {_		return element__	};hook,to,convert,each,encountered,collection,array,element,the,default,implementation,simply,returns,the,passed,in,element,as,is,p,can,be,overridden,to,perform,conversion,of,certain,elements,for,example,string,to,integer,if,a,string,array,comes,in,and,should,be,converted,to,a,set,of,integer,objects,p,only,called,if,actually,creating,a,new,collection,this,is,by,default,not,the,case,if,the,type,of,the,passed,in,collection,already,matches,override,link,always,create,new,collection,to,enforce,creating,a,new,collection,in,every,case,param,element,the,source,element,return,the,element,to,be,used,in,the,target,collection,see,always,create,new,collection;protected,object,convert,element,object,element,return,element
CustomCollectionEditor -> protected Object convertElement(Object element);1385412762;Hook to convert each encountered Collection/array element._The default implementation simply returns the passed-in element as-is._<p>Can be overridden to perform conversion of certain elements,_for example String to Integer if a String array comes in and_should be converted to a Set of Integer objects._<p>Only called if actually creating a new Collection!_This is by default not the case if the type of the passed-in Collection_already matches. Override {@link #alwaysCreateNewCollection()} to_enforce creating a new Collection in every case._@param element the source element_@return the element to be used in the target Collection_@see #alwaysCreateNewCollection();protected Object convertElement(Object element) {_		return element__	};hook,to,convert,each,encountered,collection,array,element,the,default,implementation,simply,returns,the,passed,in,element,as,is,p,can,be,overridden,to,perform,conversion,of,certain,elements,for,example,string,to,integer,if,a,string,array,comes,in,and,should,be,converted,to,a,set,of,integer,objects,p,only,called,if,actually,creating,a,new,collection,this,is,by,default,not,the,case,if,the,type,of,the,passed,in,collection,already,matches,override,link,always,create,new,collection,to,enforce,creating,a,new,collection,in,every,case,param,element,the,source,element,return,the,element,to,be,used,in,the,target,collection,see,always,create,new,collection;protected,object,convert,element,object,element,return,element
CustomCollectionEditor -> protected Object convertElement(Object element);1432125256;Hook to convert each encountered Collection/array element._The default implementation simply returns the passed-in element as-is._<p>Can be overridden to perform conversion of certain elements,_for example String to Integer if a String array comes in and_should be converted to a Set of Integer objects._<p>Only called if actually creating a new Collection!_This is by default not the case if the type of the passed-in Collection_already matches. Override {@link #alwaysCreateNewCollection()} to_enforce creating a new Collection in every case._@param element the source element_@return the element to be used in the target Collection_@see #alwaysCreateNewCollection();protected Object convertElement(Object element) {_		return element__	};hook,to,convert,each,encountered,collection,array,element,the,default,implementation,simply,returns,the,passed,in,element,as,is,p,can,be,overridden,to,perform,conversion,of,certain,elements,for,example,string,to,integer,if,a,string,array,comes,in,and,should,be,converted,to,a,set,of,integer,objects,p,only,called,if,actually,creating,a,new,collection,this,is,by,default,not,the,case,if,the,type,of,the,passed,in,collection,already,matches,override,link,always,create,new,collection,to,enforce,creating,a,new,collection,in,every,case,param,element,the,source,element,return,the,element,to,be,used,in,the,target,collection,see,always,create,new,collection;protected,object,convert,element,object,element,return,element
CustomCollectionEditor -> protected Object convertElement(Object element);1467730834;Hook to convert each encountered Collection/array element._The default implementation simply returns the passed-in element as-is._<p>Can be overridden to perform conversion of certain elements,_for example String to Integer if a String array comes in and_should be converted to a Set of Integer objects._<p>Only called if actually creating a new Collection!_This is by default not the case if the type of the passed-in Collection_already matches. Override {@link #alwaysCreateNewCollection()} to_enforce creating a new Collection in every case._@param element the source element_@return the element to be used in the target Collection_@see #alwaysCreateNewCollection();protected Object convertElement(Object element) {_		return element__	};hook,to,convert,each,encountered,collection,array,element,the,default,implementation,simply,returns,the,passed,in,element,as,is,p,can,be,overridden,to,perform,conversion,of,certain,elements,for,example,string,to,integer,if,a,string,array,comes,in,and,should,be,converted,to,a,set,of,integer,objects,p,only,called,if,actually,creating,a,new,collection,this,is,by,default,not,the,case,if,the,type,of,the,passed,in,collection,already,matches,override,link,always,create,new,collection,to,enforce,creating,a,new,collection,in,every,case,param,element,the,source,element,return,the,element,to,be,used,in,the,target,collection,see,always,create,new,collection;protected,object,convert,element,object,element,return,element
CustomCollectionEditor -> protected Object convertElement(Object element);1468948866;Hook to convert each encountered Collection/array element._The default implementation simply returns the passed-in element as-is._<p>Can be overridden to perform conversion of certain elements,_for example String to Integer if a String array comes in and_should be converted to a Set of Integer objects._<p>Only called if actually creating a new Collection!_This is by default not the case if the type of the passed-in Collection_already matches. Override {@link #alwaysCreateNewCollection()} to_enforce creating a new Collection in every case._@param element the source element_@return the element to be used in the target Collection_@see #alwaysCreateNewCollection();protected Object convertElement(Object element) {_		return element__	};hook,to,convert,each,encountered,collection,array,element,the,default,implementation,simply,returns,the,passed,in,element,as,is,p,can,be,overridden,to,perform,conversion,of,certain,elements,for,example,string,to,integer,if,a,string,array,comes,in,and,should,be,converted,to,a,set,of,integer,objects,p,only,called,if,actually,creating,a,new,collection,this,is,by,default,not,the,case,if,the,type,of,the,passed,in,collection,already,matches,override,link,always,create,new,collection,to,enforce,creating,a,new,collection,in,every,case,param,element,the,source,element,return,the,element,to,be,used,in,the,target,collection,see,always,create,new,collection;protected,object,convert,element,object,element,return,element
CustomCollectionEditor -> protected Object convertElement(Object element);1495868221;Hook to convert each encountered Collection/array element._The default implementation simply returns the passed-in element as-is._<p>Can be overridden to perform conversion of certain elements,_for example String to Integer if a String array comes in and_should be converted to a Set of Integer objects._<p>Only called if actually creating a new Collection!_This is by default not the case if the type of the passed-in Collection_already matches. Override {@link #alwaysCreateNewCollection()} to_enforce creating a new Collection in every case._@param element the source element_@return the element to be used in the target Collection_@see #alwaysCreateNewCollection();protected Object convertElement(Object element) {_		return element__	};hook,to,convert,each,encountered,collection,array,element,the,default,implementation,simply,returns,the,passed,in,element,as,is,p,can,be,overridden,to,perform,conversion,of,certain,elements,for,example,string,to,integer,if,a,string,array,comes,in,and,should,be,converted,to,a,set,of,integer,objects,p,only,called,if,actually,creating,a,new,collection,this,is,by,default,not,the,case,if,the,type,of,the,passed,in,collection,already,matches,override,link,always,create,new,collection,to,enforce,creating,a,new,collection,in,every,case,param,element,the,source,element,return,the,element,to,be,used,in,the,target,collection,see,always,create,new,collection;protected,object,convert,element,object,element,return,element
CustomCollectionEditor -> protected Object convertElement(Object element);1496837955;Hook to convert each encountered Collection/array element._The default implementation simply returns the passed-in element as-is._<p>Can be overridden to perform conversion of certain elements,_for example String to Integer if a String array comes in and_should be converted to a Set of Integer objects._<p>Only called if actually creating a new Collection!_This is by default not the case if the type of the passed-in Collection_already matches. Override {@link #alwaysCreateNewCollection()} to_enforce creating a new Collection in every case._@param element the source element_@return the element to be used in the target Collection_@see #alwaysCreateNewCollection();protected Object convertElement(Object element) {_		return element__	};hook,to,convert,each,encountered,collection,array,element,the,default,implementation,simply,returns,the,passed,in,element,as,is,p,can,be,overridden,to,perform,conversion,of,certain,elements,for,example,string,to,integer,if,a,string,array,comes,in,and,should,be,converted,to,a,set,of,integer,objects,p,only,called,if,actually,creating,a,new,collection,this,is,by,default,not,the,case,if,the,type,of,the,passed,in,collection,already,matches,override,link,always,create,new,collection,to,enforce,creating,a,new,collection,in,every,case,param,element,the,source,element,return,the,element,to,be,used,in,the,target,collection,see,always,create,new,collection;protected,object,convert,element,object,element,return,element
