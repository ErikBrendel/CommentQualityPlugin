commented;modifiers;parameterAmount;loc;comment;code
true;public;1;4;/**  * Convert the given text value to a Collection with a single element.  */ ;/**  * Convert the given text value to a Collection with a single element.  */ @Override public void setAsText(String text) throws IllegalArgumentException {     setValue(text). }
true;public;1;34;/**  * Convert the given value to a Collection of the target type.  */ ;/**  * Convert the given value to a Collection of the target type.  */ @Override public void setValue(@Nullable Object value) {     if (value == null && this.nullAsEmptyCollection) {         super.setValue(createCollection(this.collectionType, 0)).     } else if (value == null || (this.collectionType.isInstance(value) && !alwaysCreateNewCollection())) {         // Use the source value as-is, as it matches the target type.         super.setValue(value).     } else if (value instanceof Collection) {         // Convert Collection elements.         Collection<?> source = (Collection<?>) value.         Collection<Object> target = createCollection(this.collectionType, source.size()).         for (Object elem : source) {             target.add(convertElement(elem)).         }         super.setValue(target).     } else if (value.getClass().isArray()) {         // Convert array elements to Collection elements.         int length = Array.getLength(value).         Collection<Object> target = createCollection(this.collectionType, length).         for (int i = 0. i < length. i++) {             target.add(convertElement(Array.get(value, i))).         }         super.setValue(target).     } else {         // A plain value: convert it to a Collection with a single element.         Collection<Object> target = createCollection(this.collectionType, 1).         target.add(convertElement(value)).         super.setValue(target).     } }
true;protected;2;21;/**  * Create a Collection of the given type, with the given  * initial capacity (if supported by the Collection type).  * @param collectionType a sub-interface of Collection  * @param initialCapacity the initial capacity  * @return the new Collection instance  */ ;/**  * Create a Collection of the given type, with the given  * initial capacity (if supported by the Collection type).  * @param collectionType a sub-interface of Collection  * @param initialCapacity the initial capacity  * @return the new Collection instance  */ @SuppressWarnings({ "rawtypes", "unchecked" }) protected Collection<Object> createCollection(Class<? extends Collection> collectionType, int initialCapacity) {     if (!collectionType.isInterface()) {         try {             return ReflectionUtils.accessibleConstructor(collectionType).newInstance().         } catch (Throwable ex) {             throw new IllegalArgumentException("Could not instantiate collection class: " + collectionType.getName(), ex).         }     } else if (List.class == collectionType) {         return new ArrayList<>(initialCapacity).     } else if (SortedSet.class == collectionType) {         return new TreeSet<>().     } else {         return new LinkedHashSet<>(initialCapacity).     } }
true;protected;0;3;/**  * Return whether to always create a new Collection,  * even if the type of the passed-in Collection already matches.  * <p>Default is "false". can be overridden to enforce creation of a  * new Collection, for example to convert elements in any case.  * @see #convertElement  */ ;/**  * Return whether to always create a new Collection,  * even if the type of the passed-in Collection already matches.  * <p>Default is "false". can be overridden to enforce creation of a  * new Collection, for example to convert elements in any case.  * @see #convertElement  */ protected boolean alwaysCreateNewCollection() {     return false. }
true;protected;1;3;/**  * Hook to convert each encountered Collection/array element.  * The default implementation simply returns the passed-in element as-is.  * <p>Can be overridden to perform conversion of certain elements,  * for example String to Integer if a String array comes in and  * should be converted to a Set of Integer objects.  * <p>Only called if actually creating a new Collection!  * This is by default not the case if the type of the passed-in Collection  * already matches. Override {@link #alwaysCreateNewCollection()} to  * enforce creating a new Collection in every case.  * @param element the source element  * @return the element to be used in the target Collection  * @see #alwaysCreateNewCollection()  */ ;/**  * Hook to convert each encountered Collection/array element.  * The default implementation simply returns the passed-in element as-is.  * <p>Can be overridden to perform conversion of certain elements,  * for example String to Integer if a String array comes in and  * should be converted to a Set of Integer objects.  * <p>Only called if actually creating a new Collection!  * This is by default not the case if the type of the passed-in Collection  * already matches. Override {@link #alwaysCreateNewCollection()} to  * enforce creating a new Collection in every case.  * @param element the source element  * @return the element to be used in the target Collection  * @see #alwaysCreateNewCollection()  */ protected Object convertElement(Object element) {     return element. }
true;public;0;5;/**  * This implementation returns {@code null} to indicate that  * there is no appropriate text representation.  */ ;/**  * This implementation returns {@code null} to indicate that  * there is no appropriate text representation.  */ @Override @Nullable public String getAsText() {     return null. }
