commented;modifiers;parameterAmount;loc;comment;code
true;public;2;6;/**  * Parses the supplied {@link Element} by delegating to the {@link BeanDefinitionParser} that is  * registered for that {@link Element}.  */ ;/**  * Parses the supplied {@link Element} by delegating to the {@link BeanDefinitionParser} that is  * registered for that {@link Element}.  */ @Override @Nullable public BeanDefinition parse(Element element, ParserContext parserContext) {     BeanDefinitionParser parser = findParserForElement(element, parserContext).     return (parser != null ? parser.parse(element, parserContext) : null). }
true;private;2;10;/**  * Locates the {@link BeanDefinitionParser} from the register implementations using  * the local name of the supplied {@link Element}.  */ ;/**  * Locates the {@link BeanDefinitionParser} from the register implementations using  * the local name of the supplied {@link Element}.  */ @Nullable private BeanDefinitionParser findParserForElement(Element element, ParserContext parserContext) {     String localName = parserContext.getDelegate().getLocalName(element).     BeanDefinitionParser parser = this.parsers.get(localName).     if (parser == null) {         parserContext.getReaderContext().fatal("Cannot locate BeanDefinitionParser for element [" + localName + "]", element).     }     return parser. }
true;public;3;8;/**  * Decorates the supplied {@link Node} by delegating to the {@link BeanDefinitionDecorator} that  * is registered to handle that {@link Node}.  */ ;/**  * Decorates the supplied {@link Node} by delegating to the {@link BeanDefinitionDecorator} that  * is registered to handle that {@link Node}.  */ @Override @Nullable public BeanDefinitionHolder decorate(Node node, BeanDefinitionHolder definition, ParserContext parserContext) {     BeanDefinitionDecorator decorator = findDecoratorForNode(node, parserContext).     return (decorator != null ? decorator.decorate(node, definition, parserContext) : null). }
true;private;2;20;/**  * Locates the {@link BeanDefinitionParser} from the register implementations using  * the local name of the supplied {@link Node}. Supports both {@link Element Elements}  * and {@link Attr Attrs}.  */ ;/**  * Locates the {@link BeanDefinitionParser} from the register implementations using  * the local name of the supplied {@link Node}. Supports both {@link Element Elements}  * and {@link Attr Attrs}.  */ @Nullable private BeanDefinitionDecorator findDecoratorForNode(Node node, ParserContext parserContext) {     BeanDefinitionDecorator decorator = null.     String localName = parserContext.getDelegate().getLocalName(node).     if (node instanceof Element) {         decorator = this.decorators.get(localName).     } else if (node instanceof Attr) {         decorator = this.attributeDecorators.get(localName).     } else {         parserContext.getReaderContext().fatal("Cannot decorate based on Nodes of type [" + node.getClass().getName() + "]", node).     }     if (decorator == null) {         parserContext.getReaderContext().fatal("Cannot locate BeanDefinitionDecorator for " + (node instanceof Element ? "element" : "attribute") + " [" + localName + "]", node).     }     return decorator. }
true;protected,final;2;3;/**  * Subclasses can call this to register the supplied {@link BeanDefinitionParser} to  * handle the specified element. The element name is the local (non-namespace qualified)  * name.  */ ;/**  * Subclasses can call this to register the supplied {@link BeanDefinitionParser} to  * handle the specified element. The element name is the local (non-namespace qualified)  * name.  */ protected final void registerBeanDefinitionParser(String elementName, BeanDefinitionParser parser) {     this.parsers.put(elementName, parser). }
true;protected,final;2;3;/**  * Subclasses can call this to register the supplied {@link BeanDefinitionDecorator} to  * handle the specified element. The element name is the local (non-namespace qualified)  * name.  */ ;/**  * Subclasses can call this to register the supplied {@link BeanDefinitionDecorator} to  * handle the specified element. The element name is the local (non-namespace qualified)  * name.  */ protected final void registerBeanDefinitionDecorator(String elementName, BeanDefinitionDecorator dec) {     this.decorators.put(elementName, dec). }
true;protected,final;2;3;/**  * Subclasses can call this to register the supplied {@link BeanDefinitionDecorator} to  * handle the specified attribute. The attribute name is the local (non-namespace qualified)  * name.  */ ;/**  * Subclasses can call this to register the supplied {@link BeanDefinitionDecorator} to  * handle the specified attribute. The attribute name is the local (non-namespace qualified)  * name.  */ protected final void registerBeanDefinitionDecoratorForAttribute(String attrName, BeanDefinitionDecorator dec) {     this.attributeDecorators.put(attrName, dec). }
