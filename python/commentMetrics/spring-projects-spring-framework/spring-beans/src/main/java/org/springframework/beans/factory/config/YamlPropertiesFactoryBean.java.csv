commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set if a singleton should be created, or a new object on each request  * otherwise. Default is {@code true} (a singleton).  */ ;/**  * Set if a singleton should be created, or a new object on each request  * otherwise. Default is {@code true} (a singleton).  */ public void setSingleton(boolean singleton) {     this.singleton = singleton. }
false;public;0;4;;@Override public boolean isSingleton() {     return this.singleton. }
false;public;0;6;;@Override public void afterPropertiesSet() {     if (isSingleton()) {         this.properties = createProperties().     } }
false;public;0;5;;@Override @Nullable public Properties getObject() {     return (this.properties != null ? this.properties : createProperties()). }
false;public;0;4;;@Override public Class<?> getObjectType() {     return Properties.class. }
true;protected;0;5;/**  * Template method that subclasses may override to construct the object  * returned by this factory. The default implementation returns a  * properties with the content of all resources.  * <p>Invoked lazily the first time {@link #getObject()} is invoked in  * case of a shared singleton. else, on each {@link #getObject()} call.  * @return the object returned by this factory  * @see #process(MatchCallback) ()  */ ;/**  * Template method that subclasses may override to construct the object  * returned by this factory. The default implementation returns a  * properties with the content of all resources.  * <p>Invoked lazily the first time {@link #getObject()} is invoked in  * case of a shared singleton. else, on each {@link #getObject()} call.  * @return the object returned by this factory  * @see #process(MatchCallback) ()  */ protected Properties createProperties() {     Properties result = CollectionFactory.createStringAdaptingProperties().     process((properties, map) -> result.putAll(properties)).     return result. }
