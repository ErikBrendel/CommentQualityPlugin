# id;timestamp;commentText;codeText;commentWords;codeWords
YamlProcessor -> protected void process(MatchCallback callback);1399543340;Provide an opportunity for subclasses to process the Yaml parsed from the supplied_resources. Each resource is parsed in turn and the documents inside checked against_the {@link #setDocumentMatchers(DocumentMatcher...) matchers}. If a document_matches it is passed into the callback, along with its representation as_Properties. Depending on the {@link #setResolutionMethod(ResolutionMethod)} not all_of the documents will be parsed._@param callback a callback to delegate to once matching documents are found;protected void process(MatchCallback callback) {_		Yaml yaml = new Yaml()__		for (Resource resource : this.resources) {_			boolean found = process(callback, yaml, resource)__			if (this.resolutionMethod == ResolutionMethod.FIRST_FOUND && found) {_				return__			}_		}_	};provide,an,opportunity,for,subclasses,to,process,the,yaml,parsed,from,the,supplied,resources,each,resource,is,parsed,in,turn,and,the,documents,inside,checked,against,the,link,set,document,matchers,document,matcher,matchers,if,a,document,matches,it,is,passed,into,the,callback,along,with,its,representation,as,properties,depending,on,the,link,set,resolution,method,resolution,method,not,all,of,the,documents,will,be,parsed,param,callback,a,callback,to,delegate,to,once,matching,documents,are,found;protected,void,process,match,callback,callback,yaml,yaml,new,yaml,for,resource,resource,this,resources,boolean,found,process,callback,yaml,resource,if,this,resolution,method,resolution,method,found,return
YamlProcessor -> protected void process(MatchCallback callback);1404773971;Provide an opportunity for subclasses to process the Yaml parsed from the supplied_resources. Each resource is parsed in turn and the documents inside checked against_the {@link #setDocumentMatchers(DocumentMatcher...) matchers}. If a document_matches it is passed into the callback, along with its representation as_Properties. Depending on the {@link #setResolutionMethod(ResolutionMethod)} not all_of the documents will be parsed._@param callback a callback to delegate to once matching documents are found;protected void process(MatchCallback callback) {_		Yaml yaml = new Yaml()__		for (Resource resource : this.resources) {_			boolean found = process(callback, yaml, resource)__			if (this.resolutionMethod == ResolutionMethod.FIRST_FOUND && found) {_				return__			}_		}_	};provide,an,opportunity,for,subclasses,to,process,the,yaml,parsed,from,the,supplied,resources,each,resource,is,parsed,in,turn,and,the,documents,inside,checked,against,the,link,set,document,matchers,document,matcher,matchers,if,a,document,matches,it,is,passed,into,the,callback,along,with,its,representation,as,properties,depending,on,the,link,set,resolution,method,resolution,method,not,all,of,the,documents,will,be,parsed,param,callback,a,callback,to,delegate,to,once,matching,documents,are,found;protected,void,process,match,callback,callback,yaml,yaml,new,yaml,for,resource,resource,this,resources,boolean,found,process,callback,yaml,resource,if,this,resolution,method,resolution,method,found,return
YamlProcessor -> protected void process(MatchCallback callback);1409784938;Provide an opportunity for subclasses to process the Yaml parsed from the supplied_resources. Each resource is parsed in turn and the documents inside checked against_the {@link #setDocumentMatchers(DocumentMatcher...) matchers}. If a document_matches it is passed into the callback, along with its representation as_Properties. Depending on the {@link #setResolutionMethod(ResolutionMethod)} not all_of the documents will be parsed._@param callback a callback to delegate to once matching documents are found;protected void process(MatchCallback callback) {_		Yaml yaml = new Yaml()__		for (Resource resource : this.resources) {_			boolean found = process(callback, yaml, resource)__			if (this.resolutionMethod == ResolutionMethod.FIRST_FOUND && found) {_				return__			}_		}_	};provide,an,opportunity,for,subclasses,to,process,the,yaml,parsed,from,the,supplied,resources,each,resource,is,parsed,in,turn,and,the,documents,inside,checked,against,the,link,set,document,matchers,document,matcher,matchers,if,a,document,matches,it,is,passed,into,the,callback,along,with,its,representation,as,properties,depending,on,the,link,set,resolution,method,resolution,method,not,all,of,the,documents,will,be,parsed,param,callback,a,callback,to,delegate,to,once,matching,documents,are,found;protected,void,process,match,callback,callback,yaml,yaml,new,yaml,for,resource,resource,this,resources,boolean,found,process,callback,yaml,resource,if,this,resolution,method,resolution,method,found,return
YamlProcessor -> protected void process(MatchCallback callback);1413295115;Provide an opportunity for subclasses to process the Yaml parsed from the supplied_resources. Each resource is parsed in turn and the documents inside checked against_the {@link #setDocumentMatchers(DocumentMatcher...) matchers}. If a document_matches it is passed into the callback, along with its representation as_Properties. Depending on the {@link #setResolutionMethod(ResolutionMethod)} not all_of the documents will be parsed._@param callback a callback to delegate to once matching documents are found;protected void process(MatchCallback callback) {_		Yaml yaml = new Yaml(new StrictMapAppenderConstructor())__		for (Resource resource : this.resources) {_			boolean found = process(callback, yaml, resource)__			if (this.resolutionMethod == ResolutionMethod.FIRST_FOUND && found) {_				return__			}_		}_	};provide,an,opportunity,for,subclasses,to,process,the,yaml,parsed,from,the,supplied,resources,each,resource,is,parsed,in,turn,and,the,documents,inside,checked,against,the,link,set,document,matchers,document,matcher,matchers,if,a,document,matches,it,is,passed,into,the,callback,along,with,its,representation,as,properties,depending,on,the,link,set,resolution,method,resolution,method,not,all,of,the,documents,will,be,parsed,param,callback,a,callback,to,delegate,to,once,matching,documents,are,found;protected,void,process,match,callback,callback,yaml,yaml,new,yaml,new,strict,map,appender,constructor,for,resource,resource,this,resources,boolean,found,process,callback,yaml,resource,if,this,resolution,method,resolution,method,found,return
YamlProcessor -> protected void process(MatchCallback callback);1417446162;Provide an opportunity for subclasses to process the Yaml parsed from the supplied_resources. Each resource is parsed in turn and the documents inside checked against_the {@link #setDocumentMatchers(DocumentMatcher...) matchers}. If a document_matches it is passed into the callback, along with its representation as_Properties. Depending on the {@link #setResolutionMethod(ResolutionMethod)} not all_of the documents will be parsed._@param callback a callback to delegate to once matching documents are found;protected void process(MatchCallback callback) {_		Yaml yaml = new Yaml(new StrictMapAppenderConstructor())__		for (Resource resource : this.resources) {_			boolean found = process(callback, yaml, resource)__			if (this.resolutionMethod == ResolutionMethod.FIRST_FOUND && found) {_				return__			}_		}_	};provide,an,opportunity,for,subclasses,to,process,the,yaml,parsed,from,the,supplied,resources,each,resource,is,parsed,in,turn,and,the,documents,inside,checked,against,the,link,set,document,matchers,document,matcher,matchers,if,a,document,matches,it,is,passed,into,the,callback,along,with,its,representation,as,properties,depending,on,the,link,set,resolution,method,resolution,method,not,all,of,the,documents,will,be,parsed,param,callback,a,callback,to,delegate,to,once,matching,documents,are,found;protected,void,process,match,callback,callback,yaml,yaml,new,yaml,new,strict,map,appender,constructor,for,resource,resource,this,resources,boolean,found,process,callback,yaml,resource,if,this,resolution,method,resolution,method,found,return
YamlProcessor -> protected void process(MatchCallback callback);1417569454;Provide an opportunity for subclasses to process the Yaml parsed from the supplied_resources. Each resource is parsed in turn and the documents inside checked against_the {@link #setDocumentMatchers(DocumentMatcher...) matchers}. If a document_matches it is passed into the callback, along with its representation as_Properties. Depending on the {@link #setResolutionMethod(ResolutionMethod)} not all_of the documents will be parsed._@param callback a callback to delegate to once matching documents are found;protected void process(MatchCallback callback) {_		Yaml yaml = new Yaml(new StrictMapAppenderConstructor())__		for (Resource resource : this.resources) {_			boolean found = process(callback, yaml, resource)__			if (this.resolutionMethod == ResolutionMethod.FIRST_FOUND && found) {_				return__			}_		}_	};provide,an,opportunity,for,subclasses,to,process,the,yaml,parsed,from,the,supplied,resources,each,resource,is,parsed,in,turn,and,the,documents,inside,checked,against,the,link,set,document,matchers,document,matcher,matchers,if,a,document,matches,it,is,passed,into,the,callback,along,with,its,representation,as,properties,depending,on,the,link,set,resolution,method,resolution,method,not,all,of,the,documents,will,be,parsed,param,callback,a,callback,to,delegate,to,once,matching,documents,are,found;protected,void,process,match,callback,callback,yaml,yaml,new,yaml,new,strict,map,appender,constructor,for,resource,resource,this,resources,boolean,found,process,callback,yaml,resource,if,this,resolution,method,resolution,method,found,return
YamlProcessor -> protected void process(MatchCallback callback);1417981938;Provide an opportunity for subclasses to process the Yaml parsed from the supplied_resources. Each resource is parsed in turn and the documents inside checked against_the {@link #setDocumentMatchers(DocumentMatcher...) matchers}. If a document_matches it is passed into the callback, along with its representation as_Properties. Depending on the {@link #setResolutionMethod(ResolutionMethod)} not all_of the documents will be parsed._@param callback a callback to delegate to once matching documents are found;protected void process(MatchCallback callback) {_		Yaml yaml = new Yaml(new StrictMapAppenderConstructor())__		for (Resource resource : this.resources) {_			boolean found = process(callback, yaml, resource)__			if (this.resolutionMethod == ResolutionMethod.FIRST_FOUND && found) {_				return__			}_		}_	};provide,an,opportunity,for,subclasses,to,process,the,yaml,parsed,from,the,supplied,resources,each,resource,is,parsed,in,turn,and,the,documents,inside,checked,against,the,link,set,document,matchers,document,matcher,matchers,if,a,document,matches,it,is,passed,into,the,callback,along,with,its,representation,as,properties,depending,on,the,link,set,resolution,method,resolution,method,not,all,of,the,documents,will,be,parsed,param,callback,a,callback,to,delegate,to,once,matching,documents,are,found;protected,void,process,match,callback,callback,yaml,yaml,new,yaml,new,strict,map,appender,constructor,for,resource,resource,this,resources,boolean,found,process,callback,yaml,resource,if,this,resolution,method,resolution,method,found,return
YamlProcessor -> protected void process(MatchCallback callback);1422872934;Provide an opportunity for subclasses to process the Yaml parsed from the supplied_resources. Each resource is parsed in turn and the documents inside checked against_the {@link #setDocumentMatchers(DocumentMatcher...) matchers}. If a document_matches it is passed into the callback, along with its representation as_Properties. Depending on the {@link #setResolutionMethod(ResolutionMethod)} not all_of the documents will be parsed._@param callback a callback to delegate to once matching documents are found_@see #createYaml();protected void process(MatchCallback callback) {_		Yaml yaml = createYaml()__		for (Resource resource : this.resources) {_			boolean found = process(callback, yaml, resource)__			if (this.resolutionMethod == ResolutionMethod.FIRST_FOUND && found) {_				return__			}_		}_	};provide,an,opportunity,for,subclasses,to,process,the,yaml,parsed,from,the,supplied,resources,each,resource,is,parsed,in,turn,and,the,documents,inside,checked,against,the,link,set,document,matchers,document,matcher,matchers,if,a,document,matches,it,is,passed,into,the,callback,along,with,its,representation,as,properties,depending,on,the,link,set,resolution,method,resolution,method,not,all,of,the,documents,will,be,parsed,param,callback,a,callback,to,delegate,to,once,matching,documents,are,found,see,create,yaml;protected,void,process,match,callback,callback,yaml,yaml,create,yaml,for,resource,resource,this,resources,boolean,found,process,callback,yaml,resource,if,this,resolution,method,resolution,method,found,return
YamlProcessor -> protected void process(MatchCallback callback);1435614457;Provide an opportunity for subclasses to process the Yaml parsed from the supplied_resources. Each resource is parsed in turn and the documents inside checked against_the {@link #setDocumentMatchers(DocumentMatcher...) matchers}. If a document_matches it is passed into the callback, along with its representation as_Properties. Depending on the {@link #setResolutionMethod(ResolutionMethod)} not all_of the documents will be parsed._@param callback a callback to delegate to once matching documents are found_@see #createYaml();protected void process(MatchCallback callback) {_		Yaml yaml = createYaml()__		for (Resource resource : this.resources) {_			boolean found = process(callback, yaml, resource)__			if (this.resolutionMethod == ResolutionMethod.FIRST_FOUND && found) {_				return__			}_		}_	};provide,an,opportunity,for,subclasses,to,process,the,yaml,parsed,from,the,supplied,resources,each,resource,is,parsed,in,turn,and,the,documents,inside,checked,against,the,link,set,document,matchers,document,matcher,matchers,if,a,document,matches,it,is,passed,into,the,callback,along,with,its,representation,as,properties,depending,on,the,link,set,resolution,method,resolution,method,not,all,of,the,documents,will,be,parsed,param,callback,a,callback,to,delegate,to,once,matching,documents,are,found,see,create,yaml;protected,void,process,match,callback,callback,yaml,yaml,create,yaml,for,resource,resource,this,resources,boolean,found,process,callback,yaml,resource,if,this,resolution,method,resolution,method,found,return
YamlProcessor -> protected void process(MatchCallback callback);1441370327;Provide an opportunity for subclasses to process the Yaml parsed from the supplied_resources. Each resource is parsed in turn and the documents inside checked against_the {@link #setDocumentMatchers(DocumentMatcher...) matchers}. If a document_matches it is passed into the callback, along with its representation as_Properties. Depending on the {@link #setResolutionMethod(ResolutionMethod)} not all_of the documents will be parsed._@param callback a callback to delegate to once matching documents are found_@see #createYaml();protected void process(MatchCallback callback) {_		Yaml yaml = createYaml()__		for (Resource resource : this.resources) {_			boolean found = process(callback, yaml, resource)__			if (this.resolutionMethod == ResolutionMethod.FIRST_FOUND && found) {_				return__			}_		}_	};provide,an,opportunity,for,subclasses,to,process,the,yaml,parsed,from,the,supplied,resources,each,resource,is,parsed,in,turn,and,the,documents,inside,checked,against,the,link,set,document,matchers,document,matcher,matchers,if,a,document,matches,it,is,passed,into,the,callback,along,with,its,representation,as,properties,depending,on,the,link,set,resolution,method,resolution,method,not,all,of,the,documents,will,be,parsed,param,callback,a,callback,to,delegate,to,once,matching,documents,are,found,see,create,yaml;protected,void,process,match,callback,callback,yaml,yaml,create,yaml,for,resource,resource,this,resources,boolean,found,process,callback,yaml,resource,if,this,resolution,method,resolution,method,found,return
YamlProcessor -> protected void process(MatchCallback callback);1443127890;Provide an opportunity for subclasses to process the Yaml parsed from the supplied_resources. Each resource is parsed in turn and the documents inside checked against_the {@link #setDocumentMatchers(DocumentMatcher...) matchers}. If a document_matches it is passed into the callback, along with its representation as Properties._Depending on the {@link #setResolutionMethod(ResolutionMethod)} not all of the_documents will be parsed._@param callback a callback to delegate to once matching documents are found_@see #createYaml();protected void process(MatchCallback callback) {_		Yaml yaml = createYaml()__		for (Resource resource : this.resources) {_			boolean found = process(callback, yaml, resource)__			if (this.resolutionMethod == ResolutionMethod.FIRST_FOUND && found) {_				return__			}_		}_	};provide,an,opportunity,for,subclasses,to,process,the,yaml,parsed,from,the,supplied,resources,each,resource,is,parsed,in,turn,and,the,documents,inside,checked,against,the,link,set,document,matchers,document,matcher,matchers,if,a,document,matches,it,is,passed,into,the,callback,along,with,its,representation,as,properties,depending,on,the,link,set,resolution,method,resolution,method,not,all,of,the,documents,will,be,parsed,param,callback,a,callback,to,delegate,to,once,matching,documents,are,found,see,create,yaml;protected,void,process,match,callback,callback,yaml,yaml,create,yaml,for,resource,resource,this,resources,boolean,found,process,callback,yaml,resource,if,this,resolution,method,resolution,method,found,return
YamlProcessor -> protected void process(MatchCallback callback);1449164463;Provide an opportunity for subclasses to process the Yaml parsed from the supplied_resources. Each resource is parsed in turn and the documents inside checked against_the {@link #setDocumentMatchers(DocumentMatcher...) matchers}. If a document_matches it is passed into the callback, along with its representation as Properties._Depending on the {@link #setResolutionMethod(ResolutionMethod)} not all of the_documents will be parsed._@param callback a callback to delegate to once matching documents are found_@see #createYaml();protected void process(MatchCallback callback) {_		Yaml yaml = createYaml()__		for (Resource resource : this.resources) {_			boolean found = process(callback, yaml, resource)__			if (this.resolutionMethod == ResolutionMethod.FIRST_FOUND && found) {_				return__			}_		}_	};provide,an,opportunity,for,subclasses,to,process,the,yaml,parsed,from,the,supplied,resources,each,resource,is,parsed,in,turn,and,the,documents,inside,checked,against,the,link,set,document,matchers,document,matcher,matchers,if,a,document,matches,it,is,passed,into,the,callback,along,with,its,representation,as,properties,depending,on,the,link,set,resolution,method,resolution,method,not,all,of,the,documents,will,be,parsed,param,callback,a,callback,to,delegate,to,once,matching,documents,are,found,see,create,yaml;protected,void,process,match,callback,callback,yaml,yaml,create,yaml,for,resource,resource,this,resources,boolean,found,process,callback,yaml,resource,if,this,resolution,method,resolution,method,found,return
YamlProcessor -> protected void process(MatchCallback callback);1467730834;Provide an opportunity for subclasses to process the Yaml parsed from the supplied_resources. Each resource is parsed in turn and the documents inside checked against_the {@link #setDocumentMatchers(DocumentMatcher...) matchers}. If a document_matches it is passed into the callback, along with its representation as Properties._Depending on the {@link #setResolutionMethod(ResolutionMethod)} not all of the_documents will be parsed._@param callback a callback to delegate to once matching documents are found_@see #createYaml();protected void process(MatchCallback callback) {_		Yaml yaml = createYaml()__		for (Resource resource : this.resources) {_			boolean found = process(callback, yaml, resource)__			if (this.resolutionMethod == ResolutionMethod.FIRST_FOUND && found) {_				return__			}_		}_	};provide,an,opportunity,for,subclasses,to,process,the,yaml,parsed,from,the,supplied,resources,each,resource,is,parsed,in,turn,and,the,documents,inside,checked,against,the,link,set,document,matchers,document,matcher,matchers,if,a,document,matches,it,is,passed,into,the,callback,along,with,its,representation,as,properties,depending,on,the,link,set,resolution,method,resolution,method,not,all,of,the,documents,will,be,parsed,param,callback,a,callback,to,delegate,to,once,matching,documents,are,found,see,create,yaml;protected,void,process,match,callback,callback,yaml,yaml,create,yaml,for,resource,resource,this,resources,boolean,found,process,callback,yaml,resource,if,this,resolution,method,resolution,method,found,return
YamlProcessor -> protected void process(MatchCallback callback);1474830340;Provide an opportunity for subclasses to process the Yaml parsed from the supplied_resources. Each resource is parsed in turn and the documents inside checked against_the {@link #setDocumentMatchers(DocumentMatcher...) matchers}. If a document_matches it is passed into the callback, along with its representation as Properties._Depending on the {@link #setResolutionMethod(ResolutionMethod)} not all of the_documents will be parsed._@param callback a callback to delegate to once matching documents are found_@see #createYaml();protected void process(MatchCallback callback) {_		Yaml yaml = createYaml()__		for (Resource resource : this.resources) {_			boolean found = process(callback, yaml, resource)__			if (this.resolutionMethod == ResolutionMethod.FIRST_FOUND && found) {_				return__			}_		}_	};provide,an,opportunity,for,subclasses,to,process,the,yaml,parsed,from,the,supplied,resources,each,resource,is,parsed,in,turn,and,the,documents,inside,checked,against,the,link,set,document,matchers,document,matcher,matchers,if,a,document,matches,it,is,passed,into,the,callback,along,with,its,representation,as,properties,depending,on,the,link,set,resolution,method,resolution,method,not,all,of,the,documents,will,be,parsed,param,callback,a,callback,to,delegate,to,once,matching,documents,are,found,see,create,yaml;protected,void,process,match,callback,callback,yaml,yaml,create,yaml,for,resource,resource,this,resources,boolean,found,process,callback,yaml,resource,if,this,resolution,method,resolution,method,found,return
YamlProcessor -> protected void process(MatchCallback callback);1477045587;Provide an opportunity for subclasses to process the Yaml parsed from the supplied_resources. Each resource is parsed in turn and the documents inside checked against_the {@link #setDocumentMatchers(DocumentMatcher...) matchers}. If a document_matches it is passed into the callback, along with its representation as Properties._Depending on the {@link #setResolutionMethod(ResolutionMethod)} not all of the_documents will be parsed._@param callback a callback to delegate to once matching documents are found_@see #createYaml();protected void process(MatchCallback callback) {_		Yaml yaml = createYaml()__		for (Resource resource : this.resources) {_			boolean found = process(callback, yaml, resource)__			if (this.resolutionMethod == ResolutionMethod.FIRST_FOUND && found) {_				return__			}_		}_	};provide,an,opportunity,for,subclasses,to,process,the,yaml,parsed,from,the,supplied,resources,each,resource,is,parsed,in,turn,and,the,documents,inside,checked,against,the,link,set,document,matchers,document,matcher,matchers,if,a,document,matches,it,is,passed,into,the,callback,along,with,its,representation,as,properties,depending,on,the,link,set,resolution,method,resolution,method,not,all,of,the,documents,will,be,parsed,param,callback,a,callback,to,delegate,to,once,matching,documents,are,found,see,create,yaml;protected,void,process,match,callback,callback,yaml,yaml,create,yaml,for,resource,resource,this,resources,boolean,found,process,callback,yaml,resource,if,this,resolution,method,resolution,method,found,return
YamlProcessor -> protected void process(MatchCallback callback);1496259743;Provide an opportunity for subclasses to process the Yaml parsed from the supplied_resources. Each resource is parsed in turn and the documents inside checked against_the {@link #setDocumentMatchers(DocumentMatcher...) matchers}. If a document_matches it is passed into the callback, along with its representation as Properties._Depending on the {@link #setResolutionMethod(ResolutionMethod)} not all of the_documents will be parsed._@param callback a callback to delegate to once matching documents are found_@see #createYaml();protected void process(MatchCallback callback) {_		Yaml yaml = createYaml()__		for (Resource resource : this.resources) {_			boolean found = process(callback, yaml, resource)__			if (this.resolutionMethod == ResolutionMethod.FIRST_FOUND && found) {_				return__			}_		}_	};provide,an,opportunity,for,subclasses,to,process,the,yaml,parsed,from,the,supplied,resources,each,resource,is,parsed,in,turn,and,the,documents,inside,checked,against,the,link,set,document,matchers,document,matcher,matchers,if,a,document,matches,it,is,passed,into,the,callback,along,with,its,representation,as,properties,depending,on,the,link,set,resolution,method,resolution,method,not,all,of,the,documents,will,be,parsed,param,callback,a,callback,to,delegate,to,once,matching,documents,are,found,see,create,yaml;protected,void,process,match,callback,callback,yaml,yaml,create,yaml,for,resource,resource,this,resources,boolean,found,process,callback,yaml,resource,if,this,resolution,method,resolution,method,found,return
YamlProcessor -> protected void process(MatchCallback callback);1497250713;Provide an opportunity for subclasses to process the Yaml parsed from the supplied_resources. Each resource is parsed in turn and the documents inside checked against_the {@link #setDocumentMatchers(DocumentMatcher...) matchers}. If a document_matches it is passed into the callback, along with its representation as Properties._Depending on the {@link #setResolutionMethod(ResolutionMethod)} not all of the_documents will be parsed._@param callback a callback to delegate to once matching documents are found_@see #createYaml();protected void process(MatchCallback callback) {_		Yaml yaml = createYaml()__		for (Resource resource : this.resources) {_			boolean found = process(callback, yaml, resource)__			if (this.resolutionMethod == ResolutionMethod.FIRST_FOUND && found) {_				return__			}_		}_	};provide,an,opportunity,for,subclasses,to,process,the,yaml,parsed,from,the,supplied,resources,each,resource,is,parsed,in,turn,and,the,documents,inside,checked,against,the,link,set,document,matchers,document,matcher,matchers,if,a,document,matches,it,is,passed,into,the,callback,along,with,its,representation,as,properties,depending,on,the,link,set,resolution,method,resolution,method,not,all,of,the,documents,will,be,parsed,param,callback,a,callback,to,delegate,to,once,matching,documents,are,found,see,create,yaml;protected,void,process,match,callback,callback,yaml,yaml,create,yaml,for,resource,resource,this,resources,boolean,found,process,callback,yaml,resource,if,this,resolution,method,resolution,method,found,return
YamlProcessor -> protected void process(MatchCallback callback);1522103912;Provide an opportunity for subclasses to process the Yaml parsed from the supplied_resources. Each resource is parsed in turn and the documents inside checked against_the {@link #setDocumentMatchers(DocumentMatcher...) matchers}. If a document_matches it is passed into the callback, along with its representation as Properties._Depending on the {@link #setResolutionMethod(ResolutionMethod)} not all of the_documents will be parsed._@param callback a callback to delegate to once matching documents are found_@see #createYaml();protected void process(MatchCallback callback) {_		Yaml yaml = createYaml()__		for (Resource resource : this.resources) {_			boolean found = process(callback, yaml, resource)__			if (this.resolutionMethod == ResolutionMethod.FIRST_FOUND && found) {_				return__			}_		}_	};provide,an,opportunity,for,subclasses,to,process,the,yaml,parsed,from,the,supplied,resources,each,resource,is,parsed,in,turn,and,the,documents,inside,checked,against,the,link,set,document,matchers,document,matcher,matchers,if,a,document,matches,it,is,passed,into,the,callback,along,with,its,representation,as,properties,depending,on,the,link,set,resolution,method,resolution,method,not,all,of,the,documents,will,be,parsed,param,callback,a,callback,to,delegate,to,once,matching,documents,are,found,see,create,yaml;protected,void,process,match,callback,callback,yaml,yaml,create,yaml,for,resource,resource,this,resources,boolean,found,process,callback,yaml,resource,if,this,resolution,method,resolution,method,found,return
YamlProcessor -> protected void process(MatchCallback callback);1524990608;Provide an opportunity for subclasses to process the Yaml parsed from the supplied_resources. Each resource is parsed in turn and the documents inside checked against_the {@link #setDocumentMatchers(DocumentMatcher...) matchers}. If a document_matches it is passed into the callback, along with its representation as Properties._Depending on the {@link #setResolutionMethod(ResolutionMethod)} not all of the_documents will be parsed._@param callback a callback to delegate to once matching documents are found_@see #createYaml();protected void process(MatchCallback callback) {_		Yaml yaml = createYaml()__		for (Resource resource : this.resources) {_			boolean found = process(callback, yaml, resource)__			if (this.resolutionMethod == ResolutionMethod.FIRST_FOUND && found) {_				return__			}_		}_	};provide,an,opportunity,for,subclasses,to,process,the,yaml,parsed,from,the,supplied,resources,each,resource,is,parsed,in,turn,and,the,documents,inside,checked,against,the,link,set,document,matchers,document,matcher,matchers,if,a,document,matches,it,is,passed,into,the,callback,along,with,its,representation,as,properties,depending,on,the,link,set,resolution,method,resolution,method,not,all,of,the,documents,will,be,parsed,param,callback,a,callback,to,delegate,to,once,matching,documents,are,found,see,create,yaml;protected,void,process,match,callback,callback,yaml,yaml,create,yaml,for,resource,resource,this,resources,boolean,found,process,callback,yaml,resource,if,this,resolution,method,resolution,method,found,return
YamlProcessor -> protected void process(MatchCallback callback);1525517231;Provide an opportunity for subclasses to process the Yaml parsed from the supplied_resources. Each resource is parsed in turn and the documents inside checked against_the {@link #setDocumentMatchers(DocumentMatcher...) matchers}. If a document_matches it is passed into the callback, along with its representation as Properties._Depending on the {@link #setResolutionMethod(ResolutionMethod)} not all of the_documents will be parsed._@param callback a callback to delegate to once matching documents are found_@see #createYaml();protected void process(MatchCallback callback) {_		Yaml yaml = createYaml()__		for (Resource resource : this.resources) {_			boolean found = process(callback, yaml, resource)__			if (this.resolutionMethod == ResolutionMethod.FIRST_FOUND && found) {_				return__			}_		}_	};provide,an,opportunity,for,subclasses,to,process,the,yaml,parsed,from,the,supplied,resources,each,resource,is,parsed,in,turn,and,the,documents,inside,checked,against,the,link,set,document,matchers,document,matcher,matchers,if,a,document,matches,it,is,passed,into,the,callback,along,with,its,representation,as,properties,depending,on,the,link,set,resolution,method,resolution,method,not,all,of,the,documents,will,be,parsed,param,callback,a,callback,to,delegate,to,once,matching,documents,are,found,see,create,yaml;protected,void,process,match,callback,callback,yaml,yaml,create,yaml,for,resource,resource,this,resources,boolean,found,process,callback,yaml,resource,if,this,resolution,method,resolution,method,found,return
YamlProcessor -> protected void process(MatchCallback callback);1528313220;Provide an opportunity for subclasses to process the Yaml parsed from the supplied_resources. Each resource is parsed in turn and the documents inside checked against_the {@link #setDocumentMatchers(DocumentMatcher...) matchers}. If a document_matches it is passed into the callback, along with its representation as Properties._Depending on the {@link #setResolutionMethod(ResolutionMethod)} not all of the_documents will be parsed._@param callback a callback to delegate to once matching documents are found_@see #createYaml();protected void process(MatchCallback callback) {_		Yaml yaml = createYaml()__		for (Resource resource : this.resources) {_			boolean found = process(callback, yaml, resource)__			if (this.resolutionMethod == ResolutionMethod.FIRST_FOUND && found) {_				return__			}_		}_	};provide,an,opportunity,for,subclasses,to,process,the,yaml,parsed,from,the,supplied,resources,each,resource,is,parsed,in,turn,and,the,documents,inside,checked,against,the,link,set,document,matchers,document,matcher,matchers,if,a,document,matches,it,is,passed,into,the,callback,along,with,its,representation,as,properties,depending,on,the,link,set,resolution,method,resolution,method,not,all,of,the,documents,will,be,parsed,param,callback,a,callback,to,delegate,to,once,matching,documents,are,found,see,create,yaml;protected,void,process,match,callback,callback,yaml,yaml,create,yaml,for,resource,resource,this,resources,boolean,found,process,callback,yaml,resource,if,this,resolution,method,resolution,method,found,return
YamlProcessor -> protected void process(MatchCallback callback);1528737477;Provide an opportunity for subclasses to process the Yaml parsed from the supplied_resources. Each resource is parsed in turn and the documents inside checked against_the {@link #setDocumentMatchers(DocumentMatcher...) matchers}. If a document_matches it is passed into the callback, along with its representation as Properties._Depending on the {@link #setResolutionMethod(ResolutionMethod)} not all of the_documents will be parsed._@param callback a callback to delegate to once matching documents are found_@see #createYaml();protected void process(MatchCallback callback) {_		Yaml yaml = createYaml()__		for (Resource resource : this.resources) {_			boolean found = process(callback, yaml, resource)__			if (this.resolutionMethod == ResolutionMethod.FIRST_FOUND && found) {_				return__			}_		}_	};provide,an,opportunity,for,subclasses,to,process,the,yaml,parsed,from,the,supplied,resources,each,resource,is,parsed,in,turn,and,the,documents,inside,checked,against,the,link,set,document,matchers,document,matcher,matchers,if,a,document,matches,it,is,passed,into,the,callback,along,with,its,representation,as,properties,depending,on,the,link,set,resolution,method,resolution,method,not,all,of,the,documents,will,be,parsed,param,callback,a,callback,to,delegate,to,once,matching,documents,are,found,see,create,yaml;protected,void,process,match,callback,callback,yaml,yaml,create,yaml,for,resource,resource,this,resources,boolean,found,process,callback,yaml,resource,if,this,resolution,method,resolution,method,found,return
YamlProcessor -> protected void process(MatchCallback callback);1530174524;Provide an opportunity for subclasses to process the Yaml parsed from the supplied_resources. Each resource is parsed in turn and the documents inside checked against_the {@link #setDocumentMatchers(DocumentMatcher...) matchers}. If a document_matches it is passed into the callback, along with its representation as Properties._Depending on the {@link #setResolutionMethod(ResolutionMethod)} not all of the_documents will be parsed._@param callback a callback to delegate to once matching documents are found_@see #createYaml();protected void process(MatchCallback callback) {_		Yaml yaml = createYaml()__		for (Resource resource : this.resources) {_			boolean found = process(callback, yaml, resource)__			if (this.resolutionMethod == ResolutionMethod.FIRST_FOUND && found) {_				return__			}_		}_	};provide,an,opportunity,for,subclasses,to,process,the,yaml,parsed,from,the,supplied,resources,each,resource,is,parsed,in,turn,and,the,documents,inside,checked,against,the,link,set,document,matchers,document,matcher,matchers,if,a,document,matches,it,is,passed,into,the,callback,along,with,its,representation,as,properties,depending,on,the,link,set,resolution,method,resolution,method,not,all,of,the,documents,will,be,parsed,param,callback,a,callback,to,delegate,to,once,matching,documents,are,found,see,create,yaml;protected,void,process,match,callback,callback,yaml,yaml,create,yaml,for,resource,resource,this,resources,boolean,found,process,callback,yaml,resource,if,this,resolution,method,resolution,method,found,return
YamlProcessor -> MatchStatus -> public static MatchStatus getMostSpecific(MatchStatus a, MatchStatus b);1399543340;Compare two {@link MatchStatus} items, returning the most specific status.;public static MatchStatus getMostSpecific(MatchStatus a, MatchStatus b) {_			return a.ordinal() < b.ordinal() ? a : b__		};compare,two,link,match,status,items,returning,the,most,specific,status;public,static,match,status,get,most,specific,match,status,a,match,status,b,return,a,ordinal,b,ordinal,a,b
YamlProcessor -> MatchStatus -> public static MatchStatus getMostSpecific(MatchStatus a, MatchStatus b);1404773971;Compare two {@link MatchStatus} items, returning the most specific status.;public static MatchStatus getMostSpecific(MatchStatus a, MatchStatus b) {_			return a.ordinal() < b.ordinal() ? a : b__		};compare,two,link,match,status,items,returning,the,most,specific,status;public,static,match,status,get,most,specific,match,status,a,match,status,b,return,a,ordinal,b,ordinal,a,b
YamlProcessor -> MatchStatus -> public static MatchStatus getMostSpecific(MatchStatus a, MatchStatus b);1409784938;Compare two {@link MatchStatus} items, returning the most specific status.;public static MatchStatus getMostSpecific(MatchStatus a, MatchStatus b) {_			return (a.ordinal() < b.ordinal() ? a : b)__		};compare,two,link,match,status,items,returning,the,most,specific,status;public,static,match,status,get,most,specific,match,status,a,match,status,b,return,a,ordinal,b,ordinal,a,b
YamlProcessor -> MatchStatus -> public static MatchStatus getMostSpecific(MatchStatus a, MatchStatus b);1413295115;Compare two {@link MatchStatus} items, returning the most specific status.;public static MatchStatus getMostSpecific(MatchStatus a, MatchStatus b) {_			return (a.ordinal() < b.ordinal() ? a : b)__		};compare,two,link,match,status,items,returning,the,most,specific,status;public,static,match,status,get,most,specific,match,status,a,match,status,b,return,a,ordinal,b,ordinal,a,b
YamlProcessor -> MatchStatus -> public static MatchStatus getMostSpecific(MatchStatus a, MatchStatus b);1417446162;Compare two {@link MatchStatus} items, returning the most specific status.;public static MatchStatus getMostSpecific(MatchStatus a, MatchStatus b) {_			return (a.ordinal() < b.ordinal() ? a : b)__		};compare,two,link,match,status,items,returning,the,most,specific,status;public,static,match,status,get,most,specific,match,status,a,match,status,b,return,a,ordinal,b,ordinal,a,b
YamlProcessor -> MatchStatus -> public static MatchStatus getMostSpecific(MatchStatus a, MatchStatus b);1417569454;Compare two {@link MatchStatus} items, returning the most specific status.;public static MatchStatus getMostSpecific(MatchStatus a, MatchStatus b) {_			return (a.ordinal() < b.ordinal() ? a : b)__		};compare,two,link,match,status,items,returning,the,most,specific,status;public,static,match,status,get,most,specific,match,status,a,match,status,b,return,a,ordinal,b,ordinal,a,b
YamlProcessor -> MatchStatus -> public static MatchStatus getMostSpecific(MatchStatus a, MatchStatus b);1417981938;Compare two {@link MatchStatus} items, returning the most specific status.;public static MatchStatus getMostSpecific(MatchStatus a, MatchStatus b) {_			return (a.ordinal() < b.ordinal() ? a : b)__		};compare,two,link,match,status,items,returning,the,most,specific,status;public,static,match,status,get,most,specific,match,status,a,match,status,b,return,a,ordinal,b,ordinal,a,b
YamlProcessor -> MatchStatus -> public static MatchStatus getMostSpecific(MatchStatus a, MatchStatus b);1422872934;Compare two {@link MatchStatus} items, returning the most specific status.;public static MatchStatus getMostSpecific(MatchStatus a, MatchStatus b) {_			return (a.ordinal() < b.ordinal() ? a : b)__		};compare,two,link,match,status,items,returning,the,most,specific,status;public,static,match,status,get,most,specific,match,status,a,match,status,b,return,a,ordinal,b,ordinal,a,b
YamlProcessor -> MatchStatus -> public static MatchStatus getMostSpecific(MatchStatus a, MatchStatus b);1435614457;Compare two {@link MatchStatus} items, returning the most specific status.;public static MatchStatus getMostSpecific(MatchStatus a, MatchStatus b) {_			return (a.ordinal() < b.ordinal() ? a : b)__		};compare,two,link,match,status,items,returning,the,most,specific,status;public,static,match,status,get,most,specific,match,status,a,match,status,b,return,a,ordinal,b,ordinal,a,b
YamlProcessor -> MatchStatus -> public static MatchStatus getMostSpecific(MatchStatus a, MatchStatus b);1441370327;Compare two {@link MatchStatus} items, returning the most specific status.;public static MatchStatus getMostSpecific(MatchStatus a, MatchStatus b) {_			return (a.ordinal() < b.ordinal() ? a : b)__		};compare,two,link,match,status,items,returning,the,most,specific,status;public,static,match,status,get,most,specific,match,status,a,match,status,b,return,a,ordinal,b,ordinal,a,b
YamlProcessor -> MatchStatus -> public static MatchStatus getMostSpecific(MatchStatus a, MatchStatus b);1443127890;Compare two {@link MatchStatus} items, returning the most specific status.;public static MatchStatus getMostSpecific(MatchStatus a, MatchStatus b) {_			return (a.ordinal() < b.ordinal() ? a : b)__		};compare,two,link,match,status,items,returning,the,most,specific,status;public,static,match,status,get,most,specific,match,status,a,match,status,b,return,a,ordinal,b,ordinal,a,b
YamlProcessor -> MatchStatus -> public static MatchStatus getMostSpecific(MatchStatus a, MatchStatus b);1449164463;Compare two {@link MatchStatus} items, returning the most specific status.;public static MatchStatus getMostSpecific(MatchStatus a, MatchStatus b) {_			return (a.ordinal() < b.ordinal() ? a : b)__		};compare,two,link,match,status,items,returning,the,most,specific,status;public,static,match,status,get,most,specific,match,status,a,match,status,b,return,a,ordinal,b,ordinal,a,b
YamlProcessor -> MatchStatus -> public static MatchStatus getMostSpecific(MatchStatus a, MatchStatus b);1467730834;Compare two {@link MatchStatus} items, returning the most specific status.;public static MatchStatus getMostSpecific(MatchStatus a, MatchStatus b) {_			return (a.ordinal() < b.ordinal() ? a : b)__		};compare,two,link,match,status,items,returning,the,most,specific,status;public,static,match,status,get,most,specific,match,status,a,match,status,b,return,a,ordinal,b,ordinal,a,b
YamlProcessor -> MatchStatus -> public static MatchStatus getMostSpecific(MatchStatus a, MatchStatus b);1474830340;Compare two {@link MatchStatus} items, returning the most specific status.;public static MatchStatus getMostSpecific(MatchStatus a, MatchStatus b) {_			return (a.ordinal() < b.ordinal() ? a : b)__		};compare,two,link,match,status,items,returning,the,most,specific,status;public,static,match,status,get,most,specific,match,status,a,match,status,b,return,a,ordinal,b,ordinal,a,b
YamlProcessor -> MatchStatus -> public static MatchStatus getMostSpecific(MatchStatus a, MatchStatus b);1477045587;Compare two {@link MatchStatus} items, returning the most specific status.;public static MatchStatus getMostSpecific(MatchStatus a, MatchStatus b) {_			return (a.ordinal() < b.ordinal() ? a : b)__		};compare,two,link,match,status,items,returning,the,most,specific,status;public,static,match,status,get,most,specific,match,status,a,match,status,b,return,a,ordinal,b,ordinal,a,b
YamlProcessor -> MatchStatus -> public static MatchStatus getMostSpecific(MatchStatus a, MatchStatus b);1496259743;Compare two {@link MatchStatus} items, returning the most specific status.;public static MatchStatus getMostSpecific(MatchStatus a, MatchStatus b) {_			return (a.ordinal() < b.ordinal() ? a : b)__		};compare,two,link,match,status,items,returning,the,most,specific,status;public,static,match,status,get,most,specific,match,status,a,match,status,b,return,a,ordinal,b,ordinal,a,b
YamlProcessor -> MatchStatus -> public static MatchStatus getMostSpecific(MatchStatus a, MatchStatus b);1497250713;Compare two {@link MatchStatus} items, returning the most specific status.;public static MatchStatus getMostSpecific(MatchStatus a, MatchStatus b) {_			return (a.ordinal() < b.ordinal() ? a : b)__		};compare,two,link,match,status,items,returning,the,most,specific,status;public,static,match,status,get,most,specific,match,status,a,match,status,b,return,a,ordinal,b,ordinal,a,b
YamlProcessor -> MatchStatus -> public static MatchStatus getMostSpecific(MatchStatus a, MatchStatus b);1522103912;Compare two {@link MatchStatus} items, returning the most specific status.;public static MatchStatus getMostSpecific(MatchStatus a, MatchStatus b) {_			return (a.ordinal() < b.ordinal() ? a : b)__		};compare,two,link,match,status,items,returning,the,most,specific,status;public,static,match,status,get,most,specific,match,status,a,match,status,b,return,a,ordinal,b,ordinal,a,b
YamlProcessor -> MatchStatus -> public static MatchStatus getMostSpecific(MatchStatus a, MatchStatus b);1524990608;Compare two {@link MatchStatus} items, returning the most specific status.;public static MatchStatus getMostSpecific(MatchStatus a, MatchStatus b) {_			return (a.ordinal() < b.ordinal() ? a : b)__		};compare,two,link,match,status,items,returning,the,most,specific,status;public,static,match,status,get,most,specific,match,status,a,match,status,b,return,a,ordinal,b,ordinal,a,b
YamlProcessor -> MatchStatus -> public static MatchStatus getMostSpecific(MatchStatus a, MatchStatus b);1525517231;Compare two {@link MatchStatus} items, returning the most specific status.;public static MatchStatus getMostSpecific(MatchStatus a, MatchStatus b) {_			return (a.ordinal() < b.ordinal() ? a : b)__		};compare,two,link,match,status,items,returning,the,most,specific,status;public,static,match,status,get,most,specific,match,status,a,match,status,b,return,a,ordinal,b,ordinal,a,b
YamlProcessor -> MatchStatus -> public static MatchStatus getMostSpecific(MatchStatus a, MatchStatus b);1528313220;Compare two {@link MatchStatus} items, returning the most specific status.;public static MatchStatus getMostSpecific(MatchStatus a, MatchStatus b) {_			return (a.ordinal() < b.ordinal() ? a : b)__		};compare,two,link,match,status,items,returning,the,most,specific,status;public,static,match,status,get,most,specific,match,status,a,match,status,b,return,a,ordinal,b,ordinal,a,b
YamlProcessor -> MatchStatus -> public static MatchStatus getMostSpecific(MatchStatus a, MatchStatus b);1528737477;Compare two {@link MatchStatus} items, returning the most specific status.;public static MatchStatus getMostSpecific(MatchStatus a, MatchStatus b) {_			return (a.ordinal() < b.ordinal() ? a : b)__		};compare,two,link,match,status,items,returning,the,most,specific,status;public,static,match,status,get,most,specific,match,status,a,match,status,b,return,a,ordinal,b,ordinal,a,b
YamlProcessor -> MatchStatus -> public static MatchStatus getMostSpecific(MatchStatus a, MatchStatus b);1530174524;Compare two {@link MatchStatus} items, returning the most specific status.;public static MatchStatus getMostSpecific(MatchStatus a, MatchStatus b) {_			return (a.ordinal() < b.ordinal() ? a : b)__		};compare,two,link,match,status,items,returning,the,most,specific,status;public,static,match,status,get,most,specific,match,status,a,match,status,b,return,a,ordinal,b,ordinal,a,b
YamlProcessor -> MatchCallback -> void process(Properties properties, Map<String, Object> map)_;1399543340;Process the properties._@param properties the properties to process_@param map a mutable result map;void process(Properties properties, Map<String, Object> map)_;process,the,properties,param,properties,the,properties,to,process,param,map,a,mutable,result,map;void,process,properties,properties,map,string,object,map
YamlProcessor -> MatchCallback -> void process(Properties properties, Map<String, Object> map)_;1404773971;Process the properties._@param properties the properties to process_@param map a mutable result map;void process(Properties properties, Map<String, Object> map)_;process,the,properties,param,properties,the,properties,to,process,param,map,a,mutable,result,map;void,process,properties,properties,map,string,object,map
YamlProcessor -> MatchCallback -> void process(Properties properties, Map<String, Object> map)_;1409784938;Process the properties._@param properties the properties to process_@param map a mutable result map;void process(Properties properties, Map<String, Object> map)_;process,the,properties,param,properties,the,properties,to,process,param,map,a,mutable,result,map;void,process,properties,properties,map,string,object,map
YamlProcessor -> MatchCallback -> void process(Properties properties, Map<String, Object> map)_;1413295115;Process the properties._@param properties the properties to process_@param map a mutable result map;void process(Properties properties, Map<String, Object> map)_;process,the,properties,param,properties,the,properties,to,process,param,map,a,mutable,result,map;void,process,properties,properties,map,string,object,map
YamlProcessor -> MatchCallback -> void process(Properties properties, Map<String, Object> map)_;1417446162;Process the properties._@param properties the properties to process_@param map a mutable result map;void process(Properties properties, Map<String, Object> map)_;process,the,properties,param,properties,the,properties,to,process,param,map,a,mutable,result,map;void,process,properties,properties,map,string,object,map
YamlProcessor -> MatchCallback -> void process(Properties properties, Map<String, Object> map)_;1417569454;Process the properties._@param properties the properties to process_@param map a mutable result map;void process(Properties properties, Map<String, Object> map)_;process,the,properties,param,properties,the,properties,to,process,param,map,a,mutable,result,map;void,process,properties,properties,map,string,object,map
YamlProcessor -> MatchCallback -> void process(Properties properties, Map<String, Object> map)_;1417981938;Process the properties._@param properties the properties to process_@param map a mutable result map;void process(Properties properties, Map<String, Object> map)_;process,the,properties,param,properties,the,properties,to,process,param,map,a,mutable,result,map;void,process,properties,properties,map,string,object,map
YamlProcessor -> MatchCallback -> void process(Properties properties, Map<String, Object> map)_;1422872934;Process the properties._@param properties the properties to process_@param map a mutable result map;void process(Properties properties, Map<String, Object> map)_;process,the,properties,param,properties,the,properties,to,process,param,map,a,mutable,result,map;void,process,properties,properties,map,string,object,map
YamlProcessor -> MatchCallback -> void process(Properties properties, Map<String, Object> map)_;1435614457;Process the properties._@param properties the properties to process_@param map a mutable result map;void process(Properties properties, Map<String, Object> map)_;process,the,properties,param,properties,the,properties,to,process,param,map,a,mutable,result,map;void,process,properties,properties,map,string,object,map
YamlProcessor -> MatchCallback -> void process(Properties properties, Map<String, Object> map)_;1441370327;Process the properties._@param properties the properties to process_@param map a mutable result map;void process(Properties properties, Map<String, Object> map)_;process,the,properties,param,properties,the,properties,to,process,param,map,a,mutable,result,map;void,process,properties,properties,map,string,object,map
YamlProcessor -> MatchCallback -> void process(Properties properties, Map<String, Object> map)_;1443127890;Process the properties._@param properties the properties to process_@param map a mutable result map;void process(Properties properties, Map<String, Object> map)_;process,the,properties,param,properties,the,properties,to,process,param,map,a,mutable,result,map;void,process,properties,properties,map,string,object,map
YamlProcessor -> MatchCallback -> void process(Properties properties, Map<String, Object> map)_;1449164463;Process the properties._@param properties the properties to process_@param map a mutable result map;void process(Properties properties, Map<String, Object> map)_;process,the,properties,param,properties,the,properties,to,process,param,map,a,mutable,result,map;void,process,properties,properties,map,string,object,map
YamlProcessor -> MatchCallback -> void process(Properties properties, Map<String, Object> map)_;1467730834;Process the properties._@param properties the properties to process_@param map a mutable result map;void process(Properties properties, Map<String, Object> map)_;process,the,properties,param,properties,the,properties,to,process,param,map,a,mutable,result,map;void,process,properties,properties,map,string,object,map
YamlProcessor -> MatchCallback -> void process(Properties properties, Map<String, Object> map)_;1474830340;Process the given representation of the parsing results._@param properties the properties to process (as a flattened_representation with indexed keys in case of a collection or map)_@param map the result map (preserving the original value structure_in the YAML document);void process(Properties properties, Map<String, Object> map)_;process,the,given,representation,of,the,parsing,results,param,properties,the,properties,to,process,as,a,flattened,representation,with,indexed,keys,in,case,of,a,collection,or,map,param,map,the,result,map,preserving,the,original,value,structure,in,the,yaml,document;void,process,properties,properties,map,string,object,map
YamlProcessor -> MatchCallback -> void process(Properties properties, Map<String, Object> map)_;1477045587;Process the given representation of the parsing results._@param properties the properties to process (as a flattened_representation with indexed keys in case of a collection or map)_@param map the result map (preserving the original value structure_in the YAML document);void process(Properties properties, Map<String, Object> map)_;process,the,given,representation,of,the,parsing,results,param,properties,the,properties,to,process,as,a,flattened,representation,with,indexed,keys,in,case,of,a,collection,or,map,param,map,the,result,map,preserving,the,original,value,structure,in,the,yaml,document;void,process,properties,properties,map,string,object,map
YamlProcessor -> MatchCallback -> void process(Properties properties, Map<String, Object> map)_;1496259743;Process the given representation of the parsing results._@param properties the properties to process (as a flattened_representation with indexed keys in case of a collection or map)_@param map the result map (preserving the original value structure_in the YAML document);void process(Properties properties, Map<String, Object> map)_;process,the,given,representation,of,the,parsing,results,param,properties,the,properties,to,process,as,a,flattened,representation,with,indexed,keys,in,case,of,a,collection,or,map,param,map,the,result,map,preserving,the,original,value,structure,in,the,yaml,document;void,process,properties,properties,map,string,object,map
YamlProcessor -> MatchCallback -> void process(Properties properties, Map<String, Object> map)_;1497250713;Process the given representation of the parsing results._@param properties the properties to process (as a flattened_representation with indexed keys in case of a collection or map)_@param map the result map (preserving the original value structure_in the YAML document);void process(Properties properties, Map<String, Object> map)_;process,the,given,representation,of,the,parsing,results,param,properties,the,properties,to,process,as,a,flattened,representation,with,indexed,keys,in,case,of,a,collection,or,map,param,map,the,result,map,preserving,the,original,value,structure,in,the,yaml,document;void,process,properties,properties,map,string,object,map
YamlProcessor -> MatchCallback -> void process(Properties properties, Map<String, Object> map)_;1522103912;Process the given representation of the parsing results._@param properties the properties to process (as a flattened_representation with indexed keys in case of a collection or map)_@param map the result map (preserving the original value structure_in the YAML document);void process(Properties properties, Map<String, Object> map)_;process,the,given,representation,of,the,parsing,results,param,properties,the,properties,to,process,as,a,flattened,representation,with,indexed,keys,in,case,of,a,collection,or,map,param,map,the,result,map,preserving,the,original,value,structure,in,the,yaml,document;void,process,properties,properties,map,string,object,map
YamlProcessor -> MatchCallback -> void process(Properties properties, Map<String, Object> map)_;1524990608;Process the given representation of the parsing results._@param properties the properties to process (as a flattened_representation with indexed keys in case of a collection or map)_@param map the result map (preserving the original value structure_in the YAML document);void process(Properties properties, Map<String, Object> map)_;process,the,given,representation,of,the,parsing,results,param,properties,the,properties,to,process,as,a,flattened,representation,with,indexed,keys,in,case,of,a,collection,or,map,param,map,the,result,map,preserving,the,original,value,structure,in,the,yaml,document;void,process,properties,properties,map,string,object,map
YamlProcessor -> MatchCallback -> void process(Properties properties, Map<String, Object> map)_;1525517231;Process the given representation of the parsing results._@param properties the properties to process (as a flattened_representation with indexed keys in case of a collection or map)_@param map the result map (preserving the original value structure_in the YAML document);void process(Properties properties, Map<String, Object> map)_;process,the,given,representation,of,the,parsing,results,param,properties,the,properties,to,process,as,a,flattened,representation,with,indexed,keys,in,case,of,a,collection,or,map,param,map,the,result,map,preserving,the,original,value,structure,in,the,yaml,document;void,process,properties,properties,map,string,object,map
YamlProcessor -> MatchCallback -> void process(Properties properties, Map<String, Object> map)_;1528313220;Process the given representation of the parsing results._@param properties the properties to process (as a flattened_representation with indexed keys in case of a collection or map)_@param map the result map (preserving the original value structure_in the YAML document);void process(Properties properties, Map<String, Object> map)_;process,the,given,representation,of,the,parsing,results,param,properties,the,properties,to,process,as,a,flattened,representation,with,indexed,keys,in,case,of,a,collection,or,map,param,map,the,result,map,preserving,the,original,value,structure,in,the,yaml,document;void,process,properties,properties,map,string,object,map
YamlProcessor -> MatchCallback -> void process(Properties properties, Map<String, Object> map)_;1528737477;Process the given representation of the parsing results._@param properties the properties to process (as a flattened_representation with indexed keys in case of a collection or map)_@param map the result map (preserving the original value structure_in the YAML document);void process(Properties properties, Map<String, Object> map)_;process,the,given,representation,of,the,parsing,results,param,properties,the,properties,to,process,as,a,flattened,representation,with,indexed,keys,in,case,of,a,collection,or,map,param,map,the,result,map,preserving,the,original,value,structure,in,the,yaml,document;void,process,properties,properties,map,string,object,map
YamlProcessor -> MatchCallback -> void process(Properties properties, Map<String, Object> map)_;1530174524;Process the given representation of the parsing results._@param properties the properties to process (as a flattened_representation with indexed keys in case of a collection or map)_@param map the result map (preserving the original value structure_in the YAML document);void process(Properties properties, Map<String, Object> map)_;process,the,given,representation,of,the,parsing,results,param,properties,the,properties,to,process,as,a,flattened,representation,with,indexed,keys,in,case,of,a,collection,or,map,param,map,the,result,map,preserving,the,original,value,structure,in,the,yaml,document;void,process,properties,properties,map,string,object,map
YamlProcessor -> public void setDocumentMatchers(DocumentMatcher... matchers);1399543340;A map of document matchers allowing callers to selectively use only_some of the documents in a YAML resource. In YAML documents are_separated by <code>---<code> lines, and each document is converted_to properties before the match is made. E.g.__<pre class="code">_environment: dev_url: http://dev.bar.com_name: Developer Setup_---_environment: prod_url:http://foo.bar.com_name: My Cool App_</pre>__when mapped with_<code>documentMatchers = YamlProcessor.mapMatcher({"environment": "prod"})</code>_would end up as__<pre class="code">_environment=prod_url=http://foo.bar.com_name=My Cool App_url=http://dev.bar.com_</pre>_@param matchers a map of keys to value patterns (regular expressions);public void setDocumentMatchers(DocumentMatcher... matchers) {_		this.documentMatchers = Collections_				.unmodifiableList(new ArrayList<DocumentMatcher>(Arrays.asList(matchers)))__	};a,map,of,document,matchers,allowing,callers,to,selectively,use,only,some,of,the,documents,in,a,yaml,resource,in,yaml,documents,are,separated,by,code,code,lines,and,each,document,is,converted,to,properties,before,the,match,is,made,e,g,pre,class,code,environment,dev,url,http,dev,bar,com,name,developer,setup,environment,prod,url,http,foo,bar,com,name,my,cool,app,pre,when,mapped,with,code,document,matchers,yaml,processor,map,matcher,environment,prod,code,would,end,up,as,pre,class,code,environment,prod,url,http,foo,bar,com,name,my,cool,app,url,http,dev,bar,com,pre,param,matchers,a,map,of,keys,to,value,patterns,regular,expressions;public,void,set,document,matchers,document,matcher,matchers,this,document,matchers,collections,unmodifiable,list,new,array,list,document,matcher,arrays,as,list,matchers
YamlProcessor -> public void setDocumentMatchers(DocumentMatcher... matchers);1404773971;A map of document matchers allowing callers to selectively use only_some of the documents in a YAML resource. In YAML documents are_separated by <code>---<code> lines, and each document is converted_to properties before the match is made. E.g.__<pre class="code">_environment: dev_url: http://dev.bar.com_name: Developer Setup_---_environment: prod_url:http://foo.bar.com_name: My Cool App_</pre>__when mapped with_<code>documentMatchers = YamlProcessor.mapMatcher({"environment": "prod"})</code>_would end up as__<pre class="code">_environment=prod_url=http://foo.bar.com_name=My Cool App_url=http://dev.bar.com_</pre>_@param matchers a map of keys to value patterns (regular expressions);public void setDocumentMatchers(DocumentMatcher... matchers) {_		this.documentMatchers = Collections_				.unmodifiableList(new ArrayList<DocumentMatcher>(Arrays.asList(matchers)))__	};a,map,of,document,matchers,allowing,callers,to,selectively,use,only,some,of,the,documents,in,a,yaml,resource,in,yaml,documents,are,separated,by,code,code,lines,and,each,document,is,converted,to,properties,before,the,match,is,made,e,g,pre,class,code,environment,dev,url,http,dev,bar,com,name,developer,setup,environment,prod,url,http,foo,bar,com,name,my,cool,app,pre,when,mapped,with,code,document,matchers,yaml,processor,map,matcher,environment,prod,code,would,end,up,as,pre,class,code,environment,prod,url,http,foo,bar,com,name,my,cool,app,url,http,dev,bar,com,pre,param,matchers,a,map,of,keys,to,value,patterns,regular,expressions;public,void,set,document,matchers,document,matcher,matchers,this,document,matchers,collections,unmodifiable,list,new,array,list,document,matcher,arrays,as,list,matchers
YamlProcessor -> public void setDocumentMatchers(DocumentMatcher... matchers);1409784938;A map of document matchers allowing callers to selectively use only_some of the documents in a YAML resource. In YAML documents are_separated by <code>---<code> lines, and each document is converted_to properties before the match is made. E.g.__<pre class="code">_environment: dev_url: http://dev.bar.com_name: Developer Setup_---_environment: prod_url:http://foo.bar.com_name: My Cool App_</pre>__when mapped with_<code>documentMatchers = YamlProcessor.mapMatcher({"environment": "prod"})</code>_would end up as__<pre class="code">_environment=prod_url=http://foo.bar.com_name=My Cool App_url=http://dev.bar.com_</pre>_@param matchers a map of keys to value patterns (regular expressions);public void setDocumentMatchers(DocumentMatcher... matchers) {_		this.documentMatchers = Arrays.asList(matchers)__	};a,map,of,document,matchers,allowing,callers,to,selectively,use,only,some,of,the,documents,in,a,yaml,resource,in,yaml,documents,are,separated,by,code,code,lines,and,each,document,is,converted,to,properties,before,the,match,is,made,e,g,pre,class,code,environment,dev,url,http,dev,bar,com,name,developer,setup,environment,prod,url,http,foo,bar,com,name,my,cool,app,pre,when,mapped,with,code,document,matchers,yaml,processor,map,matcher,environment,prod,code,would,end,up,as,pre,class,code,environment,prod,url,http,foo,bar,com,name,my,cool,app,url,http,dev,bar,com,pre,param,matchers,a,map,of,keys,to,value,patterns,regular,expressions;public,void,set,document,matchers,document,matcher,matchers,this,document,matchers,arrays,as,list,matchers
YamlProcessor -> public void setDocumentMatchers(DocumentMatcher... matchers);1413295115;A map of document matchers allowing callers to selectively use only_some of the documents in a YAML resource. In YAML documents are_separated by <code>---<code> lines, and each document is converted_to properties before the match is made. E.g.__<pre class="code">_environment: dev_url: http://dev.bar.com_name: Developer Setup_---_environment: prod_url:http://foo.bar.com_name: My Cool App_</pre>__when mapped with_<code>documentMatchers = YamlProcessor.mapMatcher({"environment": "prod"})</code>_would end up as__<pre class="code">_environment=prod_url=http://foo.bar.com_name=My Cool App_url=http://dev.bar.com_</pre>_@param matchers a map of keys to value patterns (regular expressions);public void setDocumentMatchers(DocumentMatcher... matchers) {_		this.documentMatchers = Arrays.asList(matchers)__	};a,map,of,document,matchers,allowing,callers,to,selectively,use,only,some,of,the,documents,in,a,yaml,resource,in,yaml,documents,are,separated,by,code,code,lines,and,each,document,is,converted,to,properties,before,the,match,is,made,e,g,pre,class,code,environment,dev,url,http,dev,bar,com,name,developer,setup,environment,prod,url,http,foo,bar,com,name,my,cool,app,pre,when,mapped,with,code,document,matchers,yaml,processor,map,matcher,environment,prod,code,would,end,up,as,pre,class,code,environment,prod,url,http,foo,bar,com,name,my,cool,app,url,http,dev,bar,com,pre,param,matchers,a,map,of,keys,to,value,patterns,regular,expressions;public,void,set,document,matchers,document,matcher,matchers,this,document,matchers,arrays,as,list,matchers
YamlProcessor -> public void setDocumentMatchers(DocumentMatcher... matchers);1417446162;A map of document matchers allowing callers to selectively use only_some of the documents in a YAML resource. In YAML documents are_separated by <code>---<code> lines, and each document is converted_to properties before the match is made. E.g.__<pre class="code">_environment: dev_url: http://dev.bar.com_name: Developer Setup_---_environment: prod_url:http://foo.bar.com_name: My Cool App_</pre>__when mapped with_<code>documentMatchers = YamlProcessor.mapMatcher({"environment": "prod"})</code>_would end up as__<pre class="code">_environment=prod_url=http://foo.bar.com_name=My Cool App_url=http://dev.bar.com_</pre>_@param matchers a map of keys to value patterns (regular expressions);public void setDocumentMatchers(DocumentMatcher... matchers) {_		this.documentMatchers = Arrays.asList(matchers)__	};a,map,of,document,matchers,allowing,callers,to,selectively,use,only,some,of,the,documents,in,a,yaml,resource,in,yaml,documents,are,separated,by,code,code,lines,and,each,document,is,converted,to,properties,before,the,match,is,made,e,g,pre,class,code,environment,dev,url,http,dev,bar,com,name,developer,setup,environment,prod,url,http,foo,bar,com,name,my,cool,app,pre,when,mapped,with,code,document,matchers,yaml,processor,map,matcher,environment,prod,code,would,end,up,as,pre,class,code,environment,prod,url,http,foo,bar,com,name,my,cool,app,url,http,dev,bar,com,pre,param,matchers,a,map,of,keys,to,value,patterns,regular,expressions;public,void,set,document,matchers,document,matcher,matchers,this,document,matchers,arrays,as,list,matchers
YamlProcessor -> public void setDocumentMatchers(DocumentMatcher... matchers);1417569454;A map of document matchers allowing callers to selectively use only_some of the documents in a YAML resource. In YAML documents are_separated by <code>---<code> lines, and each document is converted_to properties before the match is made. E.g.__<pre class="code">_environment: dev_url: http://dev.bar.com_name: Developer Setup_---_environment: prod_url:http://foo.bar.com_name: My Cool App_</pre>__when mapped with_<code>documentMatchers = YamlProcessor.mapMatcher({"environment": "prod"})</code>_would end up as__<pre class="code">_environment=prod_url=http://foo.bar.com_name=My Cool App_url=http://dev.bar.com_</pre>_@param matchers a map of keys to value patterns (regular expressions);public void setDocumentMatchers(DocumentMatcher... matchers) {_		this.documentMatchers = Arrays.asList(matchers)__	};a,map,of,document,matchers,allowing,callers,to,selectively,use,only,some,of,the,documents,in,a,yaml,resource,in,yaml,documents,are,separated,by,code,code,lines,and,each,document,is,converted,to,properties,before,the,match,is,made,e,g,pre,class,code,environment,dev,url,http,dev,bar,com,name,developer,setup,environment,prod,url,http,foo,bar,com,name,my,cool,app,pre,when,mapped,with,code,document,matchers,yaml,processor,map,matcher,environment,prod,code,would,end,up,as,pre,class,code,environment,prod,url,http,foo,bar,com,name,my,cool,app,url,http,dev,bar,com,pre,param,matchers,a,map,of,keys,to,value,patterns,regular,expressions;public,void,set,document,matchers,document,matcher,matchers,this,document,matchers,arrays,as,list,matchers
YamlProcessor -> public void setDocumentMatchers(DocumentMatcher... matchers);1417981938;A map of document matchers allowing callers to selectively use only_some of the documents in a YAML resource. In YAML documents are_separated by <code>---<code> lines, and each document is converted_to properties before the match is made. E.g.__<pre class="code">_environment: dev_url: http://dev.bar.com_name: Developer Setup_---_environment: prod_url:http://foo.bar.com_name: My Cool App_</pre>__when mapped with_<code>documentMatchers = YamlProcessor.mapMatcher({"environment": "prod"})</code>_would end up as__<pre class="code">_environment=prod_url=http://foo.bar.com_name=My Cool App_url=http://dev.bar.com_</pre>_@param matchers a map of keys to value patterns (regular expressions);public void setDocumentMatchers(DocumentMatcher... matchers) {_		this.documentMatchers = Arrays.asList(matchers)__	};a,map,of,document,matchers,allowing,callers,to,selectively,use,only,some,of,the,documents,in,a,yaml,resource,in,yaml,documents,are,separated,by,code,code,lines,and,each,document,is,converted,to,properties,before,the,match,is,made,e,g,pre,class,code,environment,dev,url,http,dev,bar,com,name,developer,setup,environment,prod,url,http,foo,bar,com,name,my,cool,app,pre,when,mapped,with,code,document,matchers,yaml,processor,map,matcher,environment,prod,code,would,end,up,as,pre,class,code,environment,prod,url,http,foo,bar,com,name,my,cool,app,url,http,dev,bar,com,pre,param,matchers,a,map,of,keys,to,value,patterns,regular,expressions;public,void,set,document,matchers,document,matcher,matchers,this,document,matchers,arrays,as,list,matchers
YamlProcessor -> public void setDocumentMatchers(DocumentMatcher... matchers);1422872934;A map of document matchers allowing callers to selectively use only_some of the documents in a YAML resource. In YAML documents are_separated by <code>---<code> lines, and each document is converted_to properties before the match is made. E.g.__<pre class="code">_environment: dev_url: http://dev.bar.com_name: Developer Setup_---_environment: prod_url:http://foo.bar.com_name: My Cool App_</pre>__when mapped with_<code>documentMatchers = YamlProcessor.mapMatcher({"environment": "prod"})</code>_would end up as__<pre class="code">_environment=prod_url=http://foo.bar.com_name=My Cool App_url=http://dev.bar.com_</pre>_@param matchers a map of keys to value patterns (regular expressions);public void setDocumentMatchers(DocumentMatcher... matchers) {_		this.documentMatchers = Arrays.asList(matchers)__	};a,map,of,document,matchers,allowing,callers,to,selectively,use,only,some,of,the,documents,in,a,yaml,resource,in,yaml,documents,are,separated,by,code,code,lines,and,each,document,is,converted,to,properties,before,the,match,is,made,e,g,pre,class,code,environment,dev,url,http,dev,bar,com,name,developer,setup,environment,prod,url,http,foo,bar,com,name,my,cool,app,pre,when,mapped,with,code,document,matchers,yaml,processor,map,matcher,environment,prod,code,would,end,up,as,pre,class,code,environment,prod,url,http,foo,bar,com,name,my,cool,app,url,http,dev,bar,com,pre,param,matchers,a,map,of,keys,to,value,patterns,regular,expressions;public,void,set,document,matchers,document,matcher,matchers,this,document,matchers,arrays,as,list,matchers
YamlProcessor -> public void setDocumentMatchers(DocumentMatcher... matchers);1435614457;A map of document matchers allowing callers to selectively use only_some of the documents in a YAML resource. In YAML documents are_separated by <code>---<code> lines, and each document is converted_to properties before the match is made. E.g.__<pre class="code">_environment: dev_url: http://dev.bar.com_name: Developer Setup_---_environment: prod_url:http://foo.bar.com_name: My Cool App_</pre>__when mapped with_<code>documentMatchers = YamlProcessor.mapMatcher({"environment": "prod"})</code>_would end up as__<pre class="code">_environment=prod_url=http://foo.bar.com_name=My Cool App_url=http://dev.bar.com_</pre>_@param matchers a map of keys to value patterns (regular expressions);public void setDocumentMatchers(DocumentMatcher... matchers) {_		this.documentMatchers = Arrays.asList(matchers)__	};a,map,of,document,matchers,allowing,callers,to,selectively,use,only,some,of,the,documents,in,a,yaml,resource,in,yaml,documents,are,separated,by,code,code,lines,and,each,document,is,converted,to,properties,before,the,match,is,made,e,g,pre,class,code,environment,dev,url,http,dev,bar,com,name,developer,setup,environment,prod,url,http,foo,bar,com,name,my,cool,app,pre,when,mapped,with,code,document,matchers,yaml,processor,map,matcher,environment,prod,code,would,end,up,as,pre,class,code,environment,prod,url,http,foo,bar,com,name,my,cool,app,url,http,dev,bar,com,pre,param,matchers,a,map,of,keys,to,value,patterns,regular,expressions;public,void,set,document,matchers,document,matcher,matchers,this,document,matchers,arrays,as,list,matchers
YamlProcessor -> public void setDocumentMatchers(DocumentMatcher... matchers);1441370327;A map of document matchers allowing callers to selectively use only_some of the documents in a YAML resource. In YAML documents are_separated by <code>---<code> lines, and each document is converted_to properties before the match is made. E.g.__<pre class="code">_environment: dev_url: http://dev.bar.com_name: Developer Setup_---_environment: prod_url:http://foo.bar.com_name: My Cool App_</pre>__when mapped with_<code>documentMatchers = YamlProcessor.mapMatcher({"environment": "prod"})</code>_would end up as__<pre class="code">_environment=prod_url=http://foo.bar.com_name=My Cool App_url=http://dev.bar.com_</pre>_@param matchers a map of keys to value patterns (regular expressions);public void setDocumentMatchers(DocumentMatcher... matchers) {_		this.documentMatchers = Arrays.asList(matchers)__	};a,map,of,document,matchers,allowing,callers,to,selectively,use,only,some,of,the,documents,in,a,yaml,resource,in,yaml,documents,are,separated,by,code,code,lines,and,each,document,is,converted,to,properties,before,the,match,is,made,e,g,pre,class,code,environment,dev,url,http,dev,bar,com,name,developer,setup,environment,prod,url,http,foo,bar,com,name,my,cool,app,pre,when,mapped,with,code,document,matchers,yaml,processor,map,matcher,environment,prod,code,would,end,up,as,pre,class,code,environment,prod,url,http,foo,bar,com,name,my,cool,app,url,http,dev,bar,com,pre,param,matchers,a,map,of,keys,to,value,patterns,regular,expressions;public,void,set,document,matchers,document,matcher,matchers,this,document,matchers,arrays,as,list,matchers
YamlProcessor -> public void setDocumentMatchers(DocumentMatcher... matchers);1443127890;A map of document matchers allowing callers to selectively use only_some of the documents in a YAML resource. In YAML documents are_separated by <code>---<code> lines, and each document is converted_to properties before the match is made. E.g._<pre class="code">_environment: dev_url: http://dev.bar.com_name: Developer Setup_---_environment: prod_url:http://foo.bar.com_name: My Cool App_</pre>_when mapped with_<code>documentMatchers = YamlProcessor.mapMatcher({"environment": "prod"})</code>_would end up as_<pre class="code">_environment=prod_url=http://foo.bar.com_name=My Cool App_url=http://dev.bar.com_</pre>_@param matchers a map of keys to value patterns (regular expressions);public void setDocumentMatchers(DocumentMatcher... matchers) {_		this.documentMatchers = Arrays.asList(matchers)__	};a,map,of,document,matchers,allowing,callers,to,selectively,use,only,some,of,the,documents,in,a,yaml,resource,in,yaml,documents,are,separated,by,code,code,lines,and,each,document,is,converted,to,properties,before,the,match,is,made,e,g,pre,class,code,environment,dev,url,http,dev,bar,com,name,developer,setup,environment,prod,url,http,foo,bar,com,name,my,cool,app,pre,when,mapped,with,code,document,matchers,yaml,processor,map,matcher,environment,prod,code,would,end,up,as,pre,class,code,environment,prod,url,http,foo,bar,com,name,my,cool,app,url,http,dev,bar,com,pre,param,matchers,a,map,of,keys,to,value,patterns,regular,expressions;public,void,set,document,matchers,document,matcher,matchers,this,document,matchers,arrays,as,list,matchers
YamlProcessor -> public void setDocumentMatchers(DocumentMatcher... matchers);1449164463;A map of document matchers allowing callers to selectively use only_some of the documents in a YAML resource. In YAML documents are_separated by <code>---<code> lines, and each document is converted_to properties before the match is made. E.g._<pre class="code">_environment: dev_url: http://dev.bar.com_name: Developer Setup_---_environment: prod_url:http://foo.bar.com_name: My Cool App_</pre>_when mapped with_<code>documentMatchers = YamlProcessor.mapMatcher({"environment": "prod"})</code>_would end up as_<pre class="code">_environment=prod_url=http://foo.bar.com_name=My Cool App_url=http://dev.bar.com_</pre>_@param matchers a map of keys to value patterns (regular expressions);public void setDocumentMatchers(DocumentMatcher... matchers) {_		this.documentMatchers = Arrays.asList(matchers)__	};a,map,of,document,matchers,allowing,callers,to,selectively,use,only,some,of,the,documents,in,a,yaml,resource,in,yaml,documents,are,separated,by,code,code,lines,and,each,document,is,converted,to,properties,before,the,match,is,made,e,g,pre,class,code,environment,dev,url,http,dev,bar,com,name,developer,setup,environment,prod,url,http,foo,bar,com,name,my,cool,app,pre,when,mapped,with,code,document,matchers,yaml,processor,map,matcher,environment,prod,code,would,end,up,as,pre,class,code,environment,prod,url,http,foo,bar,com,name,my,cool,app,url,http,dev,bar,com,pre,param,matchers,a,map,of,keys,to,value,patterns,regular,expressions;public,void,set,document,matchers,document,matcher,matchers,this,document,matchers,arrays,as,list,matchers
YamlProcessor -> public void setDocumentMatchers(DocumentMatcher... matchers);1467730834;A map of document matchers allowing callers to selectively use only_some of the documents in a YAML resource. In YAML documents are_separated by <code>---<code> lines, and each document is converted_to properties before the match is made. E.g._<pre class="code">_environment: dev_url: http://dev.bar.com_name: Developer Setup_---_environment: prod_url:http://foo.bar.com_name: My Cool App_</pre>_when mapped with_<code>documentMatchers = YamlProcessor.mapMatcher({"environment": "prod"})</code>_would end up as_<pre class="code">_environment=prod_url=http://foo.bar.com_name=My Cool App_url=http://dev.bar.com_</pre>_@param matchers a map of keys to value patterns (regular expressions);public void setDocumentMatchers(DocumentMatcher... matchers) {_		this.documentMatchers = Arrays.asList(matchers)__	};a,map,of,document,matchers,allowing,callers,to,selectively,use,only,some,of,the,documents,in,a,yaml,resource,in,yaml,documents,are,separated,by,code,code,lines,and,each,document,is,converted,to,properties,before,the,match,is,made,e,g,pre,class,code,environment,dev,url,http,dev,bar,com,name,developer,setup,environment,prod,url,http,foo,bar,com,name,my,cool,app,pre,when,mapped,with,code,document,matchers,yaml,processor,map,matcher,environment,prod,code,would,end,up,as,pre,class,code,environment,prod,url,http,foo,bar,com,name,my,cool,app,url,http,dev,bar,com,pre,param,matchers,a,map,of,keys,to,value,patterns,regular,expressions;public,void,set,document,matchers,document,matcher,matchers,this,document,matchers,arrays,as,list,matchers
YamlProcessor -> public void setDocumentMatchers(DocumentMatcher... matchers);1474830340;A map of document matchers allowing callers to selectively use only_some of the documents in a YAML resource. In YAML documents are_separated by <code>---<code> lines, and each document is converted_to properties before the match is made. E.g._<pre class="code">_environment: dev_url: http://dev.bar.com_name: Developer Setup_---_environment: prod_url:http://foo.bar.com_name: My Cool App_</pre>_when mapped with_<code>documentMatchers = YamlProcessor.mapMatcher({"environment": "prod"})</code>_would end up as_<pre class="code">_environment=prod_url=http://foo.bar.com_name=My Cool App_url=http://dev.bar.com_</pre>_@param matchers a map of keys to value patterns (regular expressions);public void setDocumentMatchers(DocumentMatcher... matchers) {_		this.documentMatchers = Arrays.asList(matchers)__	};a,map,of,document,matchers,allowing,callers,to,selectively,use,only,some,of,the,documents,in,a,yaml,resource,in,yaml,documents,are,separated,by,code,code,lines,and,each,document,is,converted,to,properties,before,the,match,is,made,e,g,pre,class,code,environment,dev,url,http,dev,bar,com,name,developer,setup,environment,prod,url,http,foo,bar,com,name,my,cool,app,pre,when,mapped,with,code,document,matchers,yaml,processor,map,matcher,environment,prod,code,would,end,up,as,pre,class,code,environment,prod,url,http,foo,bar,com,name,my,cool,app,url,http,dev,bar,com,pre,param,matchers,a,map,of,keys,to,value,patterns,regular,expressions;public,void,set,document,matchers,document,matcher,matchers,this,document,matchers,arrays,as,list,matchers
YamlProcessor -> public void setDocumentMatchers(DocumentMatcher... matchers);1477045587;A map of document matchers allowing callers to selectively use only_some of the documents in a YAML resource. In YAML documents are_separated by <code>---<code> lines, and each document is converted_to properties before the match is made. E.g._<pre class="code">_environment: dev_url: http://dev.bar.com_name: Developer Setup_---_environment: prod_url:http://foo.bar.com_name: My Cool App_</pre>_when mapped with_<code>documentMatchers = YamlProcessor.mapMatcher({"environment": "prod"})</code>_would end up as_<pre class="code">_environment=prod_url=http://foo.bar.com_name=My Cool App_url=http://dev.bar.com_</pre>_@param matchers a map of keys to value patterns (regular expressions);public void setDocumentMatchers(DocumentMatcher... matchers) {_		this.documentMatchers = Arrays.asList(matchers)__	};a,map,of,document,matchers,allowing,callers,to,selectively,use,only,some,of,the,documents,in,a,yaml,resource,in,yaml,documents,are,separated,by,code,code,lines,and,each,document,is,converted,to,properties,before,the,match,is,made,e,g,pre,class,code,environment,dev,url,http,dev,bar,com,name,developer,setup,environment,prod,url,http,foo,bar,com,name,my,cool,app,pre,when,mapped,with,code,document,matchers,yaml,processor,map,matcher,environment,prod,code,would,end,up,as,pre,class,code,environment,prod,url,http,foo,bar,com,name,my,cool,app,url,http,dev,bar,com,pre,param,matchers,a,map,of,keys,to,value,patterns,regular,expressions;public,void,set,document,matchers,document,matcher,matchers,this,document,matchers,arrays,as,list,matchers
YamlProcessor -> public void setDocumentMatchers(DocumentMatcher... matchers);1496259743;A map of document matchers allowing callers to selectively use only_some of the documents in a YAML resource. In YAML documents are_separated by <code>---<code> lines, and each document is converted_to properties before the match is made. E.g._<pre class="code">_environment: dev_url: http://dev.bar.com_name: Developer Setup_---_environment: prod_url:http://foo.bar.com_name: My Cool App_</pre>_when mapped with_<code>documentMatchers = YamlProcessor.mapMatcher({"environment": "prod"})</code>_would end up as_<pre class="code">_environment=prod_url=http://foo.bar.com_name=My Cool App_url=http://dev.bar.com_</pre>_@param matchers a map of keys to value patterns (regular expressions);public void setDocumentMatchers(DocumentMatcher... matchers) {_		this.documentMatchers = Arrays.asList(matchers)__	};a,map,of,document,matchers,allowing,callers,to,selectively,use,only,some,of,the,documents,in,a,yaml,resource,in,yaml,documents,are,separated,by,code,code,lines,and,each,document,is,converted,to,properties,before,the,match,is,made,e,g,pre,class,code,environment,dev,url,http,dev,bar,com,name,developer,setup,environment,prod,url,http,foo,bar,com,name,my,cool,app,pre,when,mapped,with,code,document,matchers,yaml,processor,map,matcher,environment,prod,code,would,end,up,as,pre,class,code,environment,prod,url,http,foo,bar,com,name,my,cool,app,url,http,dev,bar,com,pre,param,matchers,a,map,of,keys,to,value,patterns,regular,expressions;public,void,set,document,matchers,document,matcher,matchers,this,document,matchers,arrays,as,list,matchers
YamlProcessor -> public void setDocumentMatchers(DocumentMatcher... matchers);1497250713;A map of document matchers allowing callers to selectively use only_some of the documents in a YAML resource. In YAML documents are_separated by <code>---<code> lines, and each document is converted_to properties before the match is made. E.g._<pre class="code">_environment: dev_url: http://dev.bar.com_name: Developer Setup_---_environment: prod_url:http://foo.bar.com_name: My Cool App_</pre>_when mapped with_<code>documentMatchers = YamlProcessor.mapMatcher({"environment": "prod"})</code>_would end up as_<pre class="code">_environment=prod_url=http://foo.bar.com_name=My Cool App_url=http://dev.bar.com_</pre>_@param matchers a map of keys to value patterns (regular expressions);public void setDocumentMatchers(DocumentMatcher... matchers) {_		this.documentMatchers = Arrays.asList(matchers)__	};a,map,of,document,matchers,allowing,callers,to,selectively,use,only,some,of,the,documents,in,a,yaml,resource,in,yaml,documents,are,separated,by,code,code,lines,and,each,document,is,converted,to,properties,before,the,match,is,made,e,g,pre,class,code,environment,dev,url,http,dev,bar,com,name,developer,setup,environment,prod,url,http,foo,bar,com,name,my,cool,app,pre,when,mapped,with,code,document,matchers,yaml,processor,map,matcher,environment,prod,code,would,end,up,as,pre,class,code,environment,prod,url,http,foo,bar,com,name,my,cool,app,url,http,dev,bar,com,pre,param,matchers,a,map,of,keys,to,value,patterns,regular,expressions;public,void,set,document,matchers,document,matcher,matchers,this,document,matchers,arrays,as,list,matchers
YamlProcessor -> public void setDocumentMatchers(DocumentMatcher... matchers);1522103912;A map of document matchers allowing callers to selectively use only_some of the documents in a YAML resource. In YAML documents are_separated by <code>---<code> lines, and each document is converted_to properties before the match is made. E.g._<pre class="code">_environment: dev_url: http://dev.bar.com_name: Developer Setup_---_environment: prod_url:http://foo.bar.com_name: My Cool App_</pre>_when mapped with_<code>documentMatchers = YamlProcessor.mapMatcher({"environment": "prod"})</code>_would end up as_<pre class="code">_environment=prod_url=http://foo.bar.com_name=My Cool App_url=http://dev.bar.com_</pre>_@param matchers a map of keys to value patterns (regular expressions);public void setDocumentMatchers(DocumentMatcher... matchers) {_		this.documentMatchers = Arrays.asList(matchers)__	};a,map,of,document,matchers,allowing,callers,to,selectively,use,only,some,of,the,documents,in,a,yaml,resource,in,yaml,documents,are,separated,by,code,code,lines,and,each,document,is,converted,to,properties,before,the,match,is,made,e,g,pre,class,code,environment,dev,url,http,dev,bar,com,name,developer,setup,environment,prod,url,http,foo,bar,com,name,my,cool,app,pre,when,mapped,with,code,document,matchers,yaml,processor,map,matcher,environment,prod,code,would,end,up,as,pre,class,code,environment,prod,url,http,foo,bar,com,name,my,cool,app,url,http,dev,bar,com,pre,param,matchers,a,map,of,keys,to,value,patterns,regular,expressions;public,void,set,document,matchers,document,matcher,matchers,this,document,matchers,arrays,as,list,matchers
YamlProcessor -> public void setDocumentMatchers(DocumentMatcher... matchers);1524990608;A map of document matchers allowing callers to selectively use only_some of the documents in a YAML resource. In YAML documents are_separated by <code>---<code> lines, and each document is converted_to properties before the match is made. E.g._<pre class="code">_environment: dev_url: http://dev.bar.com_name: Developer Setup_---_environment: prod_url:http://foo.bar.com_name: My Cool App_</pre>_when mapped with_<code>documentMatchers = YamlProcessor.mapMatcher({"environment": "prod"})</code>_would end up as_<pre class="code">_environment=prod_url=http://foo.bar.com_name=My Cool App_url=http://dev.bar.com_</pre>_@param matchers a map of keys to value patterns (regular expressions);public void setDocumentMatchers(DocumentMatcher... matchers) {_		this.documentMatchers = Arrays.asList(matchers)__	};a,map,of,document,matchers,allowing,callers,to,selectively,use,only,some,of,the,documents,in,a,yaml,resource,in,yaml,documents,are,separated,by,code,code,lines,and,each,document,is,converted,to,properties,before,the,match,is,made,e,g,pre,class,code,environment,dev,url,http,dev,bar,com,name,developer,setup,environment,prod,url,http,foo,bar,com,name,my,cool,app,pre,when,mapped,with,code,document,matchers,yaml,processor,map,matcher,environment,prod,code,would,end,up,as,pre,class,code,environment,prod,url,http,foo,bar,com,name,my,cool,app,url,http,dev,bar,com,pre,param,matchers,a,map,of,keys,to,value,patterns,regular,expressions;public,void,set,document,matchers,document,matcher,matchers,this,document,matchers,arrays,as,list,matchers
YamlProcessor -> public void setDocumentMatchers(DocumentMatcher... matchers);1525517231;A map of document matchers allowing callers to selectively use only_some of the documents in a YAML resource. In YAML documents are_separated by <code>---<code> lines, and each document is converted_to properties before the match is made. E.g._<pre class="code">_environment: dev_url: http://dev.bar.com_name: Developer Setup_---_environment: prod_url:http://foo.bar.com_name: My Cool App_</pre>_when mapped with_<code>documentMatchers = YamlProcessor.mapMatcher({"environment": "prod"})</code>_would end up as_<pre class="code">_environment=prod_url=http://foo.bar.com_name=My Cool App_url=http://dev.bar.com_</pre>_@param matchers a map of keys to value patterns (regular expressions);public void setDocumentMatchers(DocumentMatcher... matchers) {_		this.documentMatchers = Arrays.asList(matchers)__	};a,map,of,document,matchers,allowing,callers,to,selectively,use,only,some,of,the,documents,in,a,yaml,resource,in,yaml,documents,are,separated,by,code,code,lines,and,each,document,is,converted,to,properties,before,the,match,is,made,e,g,pre,class,code,environment,dev,url,http,dev,bar,com,name,developer,setup,environment,prod,url,http,foo,bar,com,name,my,cool,app,pre,when,mapped,with,code,document,matchers,yaml,processor,map,matcher,environment,prod,code,would,end,up,as,pre,class,code,environment,prod,url,http,foo,bar,com,name,my,cool,app,url,http,dev,bar,com,pre,param,matchers,a,map,of,keys,to,value,patterns,regular,expressions;public,void,set,document,matchers,document,matcher,matchers,this,document,matchers,arrays,as,list,matchers
YamlProcessor -> public void setDocumentMatchers(DocumentMatcher... matchers);1528313220;A map of document matchers allowing callers to selectively use only_some of the documents in a YAML resource. In YAML documents are_separated by <code>---<code> lines, and each document is converted_to properties before the match is made. E.g._<pre class="code">_environment: dev_url: http://dev.bar.com_name: Developer Setup_---_environment: prod_url:http://foo.bar.com_name: My Cool App_</pre>_when mapped with_<pre class="code">_setDocumentMatchers(properties ->_("prod".equals(properties.getProperty("environment")) ? MatchStatus.FOUND : MatchStatus.NOT_FOUND))__</pre>_would end up as_<pre class="code">_environment=prod_url=http://foo.bar.com_name=My Cool App_</pre>;public void setDocumentMatchers(DocumentMatcher... matchers) {_		this.documentMatchers = Arrays.asList(matchers)__	};a,map,of,document,matchers,allowing,callers,to,selectively,use,only,some,of,the,documents,in,a,yaml,resource,in,yaml,documents,are,separated,by,code,code,lines,and,each,document,is,converted,to,properties,before,the,match,is,made,e,g,pre,class,code,environment,dev,url,http,dev,bar,com,name,developer,setup,environment,prod,url,http,foo,bar,com,name,my,cool,app,pre,when,mapped,with,pre,class,code,set,document,matchers,properties,prod,equals,properties,get,property,environment,match,status,found,match,status,pre,would,end,up,as,pre,class,code,environment,prod,url,http,foo,bar,com,name,my,cool,app,pre;public,void,set,document,matchers,document,matcher,matchers,this,document,matchers,arrays,as,list,matchers
YamlProcessor -> public void setDocumentMatchers(DocumentMatcher... matchers);1528737477;A map of document matchers allowing callers to selectively use only_some of the documents in a YAML resource. In YAML documents are_separated by <code>---<code> lines, and each document is converted_to properties before the match is made. E.g._<pre class="code">_environment: dev_url: http://dev.bar.com_name: Developer Setup_---_environment: prod_url:http://foo.bar.com_name: My Cool App_</pre>_when mapped with_<pre class="code">_setDocumentMatchers(properties ->_("prod".equals(properties.getProperty("environment")) ? MatchStatus.FOUND : MatchStatus.NOT_FOUND))__</pre>_would end up as_<pre class="code">_environment=prod_url=http://foo.bar.com_name=My Cool App_</pre>;public void setDocumentMatchers(DocumentMatcher... matchers) {_		this.documentMatchers = Arrays.asList(matchers)__	};a,map,of,document,matchers,allowing,callers,to,selectively,use,only,some,of,the,documents,in,a,yaml,resource,in,yaml,documents,are,separated,by,code,code,lines,and,each,document,is,converted,to,properties,before,the,match,is,made,e,g,pre,class,code,environment,dev,url,http,dev,bar,com,name,developer,setup,environment,prod,url,http,foo,bar,com,name,my,cool,app,pre,when,mapped,with,pre,class,code,set,document,matchers,properties,prod,equals,properties,get,property,environment,match,status,found,match,status,pre,would,end,up,as,pre,class,code,environment,prod,url,http,foo,bar,com,name,my,cool,app,pre;public,void,set,document,matchers,document,matcher,matchers,this,document,matchers,arrays,as,list,matchers
YamlProcessor -> public void setDocumentMatchers(DocumentMatcher... matchers);1530174524;A map of document matchers allowing callers to selectively use only_some of the documents in a YAML resource. In YAML documents are_separated by {@code ---} lines, and each document is converted_to properties before the match is made. E.g._<pre class="code">_environment: dev_url: http://dev.bar.com_name: Developer Setup_---_environment: prod_url:http://foo.bar.com_name: My Cool App_</pre>_when mapped with_<pre class="code">_setDocumentMatchers(properties ->_("prod".equals(properties.getProperty("environment")) ? MatchStatus.FOUND : MatchStatus.NOT_FOUND))__</pre>_would end up as_<pre class="code">_environment=prod_url=http://foo.bar.com_name=My Cool App_</pre>;public void setDocumentMatchers(DocumentMatcher... matchers) {_		this.documentMatchers = Arrays.asList(matchers)__	};a,map,of,document,matchers,allowing,callers,to,selectively,use,only,some,of,the,documents,in,a,yaml,resource,in,yaml,documents,are,separated,by,code,lines,and,each,document,is,converted,to,properties,before,the,match,is,made,e,g,pre,class,code,environment,dev,url,http,dev,bar,com,name,developer,setup,environment,prod,url,http,foo,bar,com,name,my,cool,app,pre,when,mapped,with,pre,class,code,set,document,matchers,properties,prod,equals,properties,get,property,environment,match,status,found,match,status,pre,would,end,up,as,pre,class,code,environment,prod,url,http,foo,bar,com,name,my,cool,app,pre;public,void,set,document,matchers,document,matcher,matchers,this,document,matchers,arrays,as,list,matchers
YamlProcessor -> DocumentMatcher -> MatchStatus matches(Properties properties)_;1399543340;Test if the given properties match._@param properties the properties to test_@return the status of the match.;MatchStatus matches(Properties properties)_;test,if,the,given,properties,match,param,properties,the,properties,to,test,return,the,status,of,the,match;match,status,matches,properties,properties
YamlProcessor -> DocumentMatcher -> MatchStatus matches(Properties properties)_;1404773971;Test if the given properties match._@param properties the properties to test_@return the status of the match.;MatchStatus matches(Properties properties)_;test,if,the,given,properties,match,param,properties,the,properties,to,test,return,the,status,of,the,match;match,status,matches,properties,properties
YamlProcessor -> DocumentMatcher -> MatchStatus matches(Properties properties)_;1409784938;Test if the given properties match._@param properties the properties to test_@return the status of the match.;MatchStatus matches(Properties properties)_;test,if,the,given,properties,match,param,properties,the,properties,to,test,return,the,status,of,the,match;match,status,matches,properties,properties
YamlProcessor -> DocumentMatcher -> MatchStatus matches(Properties properties)_;1413295115;Test if the given properties match._@param properties the properties to test_@return the status of the match.;MatchStatus matches(Properties properties)_;test,if,the,given,properties,match,param,properties,the,properties,to,test,return,the,status,of,the,match;match,status,matches,properties,properties
YamlProcessor -> DocumentMatcher -> MatchStatus matches(Properties properties)_;1417446162;Test if the given properties match._@param properties the properties to test_@return the status of the match.;MatchStatus matches(Properties properties)_;test,if,the,given,properties,match,param,properties,the,properties,to,test,return,the,status,of,the,match;match,status,matches,properties,properties
YamlProcessor -> DocumentMatcher -> MatchStatus matches(Properties properties)_;1417569454;Test if the given properties match._@param properties the properties to test_@return the status of the match.;MatchStatus matches(Properties properties)_;test,if,the,given,properties,match,param,properties,the,properties,to,test,return,the,status,of,the,match;match,status,matches,properties,properties
YamlProcessor -> DocumentMatcher -> MatchStatus matches(Properties properties)_;1417981938;Test if the given properties match._@param properties the properties to test_@return the status of the match.;MatchStatus matches(Properties properties)_;test,if,the,given,properties,match,param,properties,the,properties,to,test,return,the,status,of,the,match;match,status,matches,properties,properties
YamlProcessor -> DocumentMatcher -> MatchStatus matches(Properties properties)_;1422872934;Test if the given properties match._@param properties the properties to test_@return the status of the match.;MatchStatus matches(Properties properties)_;test,if,the,given,properties,match,param,properties,the,properties,to,test,return,the,status,of,the,match;match,status,matches,properties,properties
YamlProcessor -> DocumentMatcher -> MatchStatus matches(Properties properties)_;1435614457;Test if the given properties match._@param properties the properties to test_@return the status of the match.;MatchStatus matches(Properties properties)_;test,if,the,given,properties,match,param,properties,the,properties,to,test,return,the,status,of,the,match;match,status,matches,properties,properties
YamlProcessor -> DocumentMatcher -> MatchStatus matches(Properties properties)_;1441370327;Test if the given properties match._@param properties the properties to test_@return the status of the match.;MatchStatus matches(Properties properties)_;test,if,the,given,properties,match,param,properties,the,properties,to,test,return,the,status,of,the,match;match,status,matches,properties,properties
YamlProcessor -> DocumentMatcher -> MatchStatus matches(Properties properties)_;1443127890;Test if the given properties match._@param properties the properties to test_@return the status of the match.;MatchStatus matches(Properties properties)_;test,if,the,given,properties,match,param,properties,the,properties,to,test,return,the,status,of,the,match;match,status,matches,properties,properties
YamlProcessor -> DocumentMatcher -> MatchStatus matches(Properties properties)_;1449164463;Test if the given properties match._@param properties the properties to test_@return the status of the match;MatchStatus matches(Properties properties)_;test,if,the,given,properties,match,param,properties,the,properties,to,test,return,the,status,of,the,match;match,status,matches,properties,properties
YamlProcessor -> DocumentMatcher -> MatchStatus matches(Properties properties)_;1467730834;Test if the given properties match._@param properties the properties to test_@return the status of the match;MatchStatus matches(Properties properties)_;test,if,the,given,properties,match,param,properties,the,properties,to,test,return,the,status,of,the,match;match,status,matches,properties,properties
YamlProcessor -> DocumentMatcher -> MatchStatus matches(Properties properties)_;1474830340;Test if the given properties match._@param properties the properties to test_@return the status of the match;MatchStatus matches(Properties properties)_;test,if,the,given,properties,match,param,properties,the,properties,to,test,return,the,status,of,the,match;match,status,matches,properties,properties
YamlProcessor -> DocumentMatcher -> MatchStatus matches(Properties properties)_;1477045587;Test if the given properties match._@param properties the properties to test_@return the status of the match;MatchStatus matches(Properties properties)_;test,if,the,given,properties,match,param,properties,the,properties,to,test,return,the,status,of,the,match;match,status,matches,properties,properties
YamlProcessor -> DocumentMatcher -> MatchStatus matches(Properties properties)_;1496259743;Test if the given properties match._@param properties the properties to test_@return the status of the match;MatchStatus matches(Properties properties)_;test,if,the,given,properties,match,param,properties,the,properties,to,test,return,the,status,of,the,match;match,status,matches,properties,properties
YamlProcessor -> DocumentMatcher -> MatchStatus matches(Properties properties)_;1497250713;Test if the given properties match._@param properties the properties to test_@return the status of the match;MatchStatus matches(Properties properties)_;test,if,the,given,properties,match,param,properties,the,properties,to,test,return,the,status,of,the,match;match,status,matches,properties,properties
YamlProcessor -> DocumentMatcher -> MatchStatus matches(Properties properties)_;1522103912;Test if the given properties match._@param properties the properties to test_@return the status of the match;MatchStatus matches(Properties properties)_;test,if,the,given,properties,match,param,properties,the,properties,to,test,return,the,status,of,the,match;match,status,matches,properties,properties
YamlProcessor -> DocumentMatcher -> MatchStatus matches(Properties properties)_;1524990608;Test if the given properties match._@param properties the properties to test_@return the status of the match;MatchStatus matches(Properties properties)_;test,if,the,given,properties,match,param,properties,the,properties,to,test,return,the,status,of,the,match;match,status,matches,properties,properties
YamlProcessor -> DocumentMatcher -> MatchStatus matches(Properties properties)_;1525517231;Test if the given properties match._@param properties the properties to test_@return the status of the match;MatchStatus matches(Properties properties)_;test,if,the,given,properties,match,param,properties,the,properties,to,test,return,the,status,of,the,match;match,status,matches,properties,properties
YamlProcessor -> DocumentMatcher -> MatchStatus matches(Properties properties)_;1528313220;Test if the given properties match._@param properties the properties to test_@return the status of the match;MatchStatus matches(Properties properties)_;test,if,the,given,properties,match,param,properties,the,properties,to,test,return,the,status,of,the,match;match,status,matches,properties,properties
YamlProcessor -> DocumentMatcher -> MatchStatus matches(Properties properties)_;1528737477;Test if the given properties match._@param properties the properties to test_@return the status of the match;MatchStatus matches(Properties properties)_;test,if,the,given,properties,match,param,properties,the,properties,to,test,return,the,status,of,the,match;match,status,matches,properties,properties
YamlProcessor -> DocumentMatcher -> MatchStatus matches(Properties properties)_;1530174524;Test if the given properties match._@param properties the properties to test_@return the status of the match;MatchStatus matches(Properties properties)_;test,if,the,given,properties,match,param,properties,the,properties,to,test,return,the,status,of,the,match;match,status,matches,properties,properties
YamlProcessor -> public void setResolutionMethod(ResolutionMethod resolutionMethod);1399543340;Method to use for resolving resources. Each resource will be converted to a Map, so_this property is used to decide which map entries to keep in the final output from_this factory._@param resolutionMethod the resolution method to set (defaults to_{@link ResolutionMethod#OVERRIDE}).;public void setResolutionMethod(ResolutionMethod resolutionMethod) {_		Assert.notNull(resolutionMethod, "ResolutionMethod must not be null")__		this.resolutionMethod = resolutionMethod__	};method,to,use,for,resolving,resources,each,resource,will,be,converted,to,a,map,so,this,property,is,used,to,decide,which,map,entries,to,keep,in,the,final,output,from,this,factory,param,resolution,method,the,resolution,method,to,set,defaults,to,link,resolution,method,override;public,void,set,resolution,method,resolution,method,resolution,method,assert,not,null,resolution,method,resolution,method,must,not,be,null,this,resolution,method,resolution,method
YamlProcessor -> public void setResolutionMethod(ResolutionMethod resolutionMethod);1404773971;Method to use for resolving resources. Each resource will be converted to a Map, so_this property is used to decide which map entries to keep in the final output from_this factory._@param resolutionMethod the resolution method to set (defaults to_{@link ResolutionMethod#OVERRIDE}).;public void setResolutionMethod(ResolutionMethod resolutionMethod) {_		Assert.notNull(resolutionMethod, "ResolutionMethod must not be null")__		this.resolutionMethod = resolutionMethod__	};method,to,use,for,resolving,resources,each,resource,will,be,converted,to,a,map,so,this,property,is,used,to,decide,which,map,entries,to,keep,in,the,final,output,from,this,factory,param,resolution,method,the,resolution,method,to,set,defaults,to,link,resolution,method,override;public,void,set,resolution,method,resolution,method,resolution,method,assert,not,null,resolution,method,resolution,method,must,not,be,null,this,resolution,method,resolution,method
YamlProcessor -> public void setResolutionMethod(ResolutionMethod resolutionMethod);1409784938;Method to use for resolving resources. Each resource will be converted to a Map, so_this property is used to decide which map entries to keep in the final output from_this factory._@param resolutionMethod the resolution method to set (defaults to_{@link ResolutionMethod#OVERRIDE}).;public void setResolutionMethod(ResolutionMethod resolutionMethod) {_		Assert.notNull(resolutionMethod, "ResolutionMethod must not be null")__		this.resolutionMethod = resolutionMethod__	};method,to,use,for,resolving,resources,each,resource,will,be,converted,to,a,map,so,this,property,is,used,to,decide,which,map,entries,to,keep,in,the,final,output,from,this,factory,param,resolution,method,the,resolution,method,to,set,defaults,to,link,resolution,method,override;public,void,set,resolution,method,resolution,method,resolution,method,assert,not,null,resolution,method,resolution,method,must,not,be,null,this,resolution,method,resolution,method
YamlProcessor -> public void setResolutionMethod(ResolutionMethod resolutionMethod);1413295115;Method to use for resolving resources. Each resource will be converted to a Map, so_this property is used to decide which map entries to keep in the final output from_this factory._@param resolutionMethod the resolution method to set (defaults to_{@link ResolutionMethod#OVERRIDE}).;public void setResolutionMethod(ResolutionMethod resolutionMethod) {_		Assert.notNull(resolutionMethod, "ResolutionMethod must not be null")__		this.resolutionMethod = resolutionMethod__	};method,to,use,for,resolving,resources,each,resource,will,be,converted,to,a,map,so,this,property,is,used,to,decide,which,map,entries,to,keep,in,the,final,output,from,this,factory,param,resolution,method,the,resolution,method,to,set,defaults,to,link,resolution,method,override;public,void,set,resolution,method,resolution,method,resolution,method,assert,not,null,resolution,method,resolution,method,must,not,be,null,this,resolution,method,resolution,method
YamlProcessor -> public void setResolutionMethod(ResolutionMethod resolutionMethod);1417446162;Method to use for resolving resources. Each resource will be converted to a Map, so_this property is used to decide which map entries to keep in the final output from_this factory._@param resolutionMethod the resolution method to set (defaults to_{@link ResolutionMethod#OVERRIDE}).;public void setResolutionMethod(ResolutionMethod resolutionMethod) {_		Assert.notNull(resolutionMethod, "ResolutionMethod must not be null")__		this.resolutionMethod = resolutionMethod__	};method,to,use,for,resolving,resources,each,resource,will,be,converted,to,a,map,so,this,property,is,used,to,decide,which,map,entries,to,keep,in,the,final,output,from,this,factory,param,resolution,method,the,resolution,method,to,set,defaults,to,link,resolution,method,override;public,void,set,resolution,method,resolution,method,resolution,method,assert,not,null,resolution,method,resolution,method,must,not,be,null,this,resolution,method,resolution,method
YamlProcessor -> public void setResolutionMethod(ResolutionMethod resolutionMethod);1417569454;Method to use for resolving resources. Each resource will be converted to a Map, so_this property is used to decide which map entries to keep in the final output from_this factory._@param resolutionMethod the resolution method to set (defaults to_{@link ResolutionMethod#OVERRIDE}).;public void setResolutionMethod(ResolutionMethod resolutionMethod) {_		Assert.notNull(resolutionMethod, "ResolutionMethod must not be null")__		this.resolutionMethod = resolutionMethod__	};method,to,use,for,resolving,resources,each,resource,will,be,converted,to,a,map,so,this,property,is,used,to,decide,which,map,entries,to,keep,in,the,final,output,from,this,factory,param,resolution,method,the,resolution,method,to,set,defaults,to,link,resolution,method,override;public,void,set,resolution,method,resolution,method,resolution,method,assert,not,null,resolution,method,resolution,method,must,not,be,null,this,resolution,method,resolution,method
YamlProcessor -> public void setResolutionMethod(ResolutionMethod resolutionMethod);1417981938;Method to use for resolving resources. Each resource will be converted to a Map, so_this property is used to decide which map entries to keep in the final output from_this factory._@param resolutionMethod the resolution method to set (defaults to_{@link ResolutionMethod#OVERRIDE}).;public void setResolutionMethod(ResolutionMethod resolutionMethod) {_		Assert.notNull(resolutionMethod, "ResolutionMethod must not be null")__		this.resolutionMethod = resolutionMethod__	};method,to,use,for,resolving,resources,each,resource,will,be,converted,to,a,map,so,this,property,is,used,to,decide,which,map,entries,to,keep,in,the,final,output,from,this,factory,param,resolution,method,the,resolution,method,to,set,defaults,to,link,resolution,method,override;public,void,set,resolution,method,resolution,method,resolution,method,assert,not,null,resolution,method,resolution,method,must,not,be,null,this,resolution,method,resolution,method
YamlProcessor -> public void setResolutionMethod(ResolutionMethod resolutionMethod);1422872934;Method to use for resolving resources. Each resource will be converted to a Map, so_this property is used to decide which map entries to keep in the final output from_this factory._@param resolutionMethod the resolution method to set (defaults to_{@link ResolutionMethod#OVERRIDE}).;public void setResolutionMethod(ResolutionMethod resolutionMethod) {_		Assert.notNull(resolutionMethod, "ResolutionMethod must not be null")__		this.resolutionMethod = resolutionMethod__	};method,to,use,for,resolving,resources,each,resource,will,be,converted,to,a,map,so,this,property,is,used,to,decide,which,map,entries,to,keep,in,the,final,output,from,this,factory,param,resolution,method,the,resolution,method,to,set,defaults,to,link,resolution,method,override;public,void,set,resolution,method,resolution,method,resolution,method,assert,not,null,resolution,method,resolution,method,must,not,be,null,this,resolution,method,resolution,method
YamlProcessor -> public void setResolutionMethod(ResolutionMethod resolutionMethod);1435614457;Method to use for resolving resources. Each resource will be converted to a Map, so_this property is used to decide which map entries to keep in the final output from_this factory._@param resolutionMethod the resolution method to set (defaults to_{@link ResolutionMethod#OVERRIDE}).;public void setResolutionMethod(ResolutionMethod resolutionMethod) {_		Assert.notNull(resolutionMethod, "ResolutionMethod must not be null")__		this.resolutionMethod = resolutionMethod__	};method,to,use,for,resolving,resources,each,resource,will,be,converted,to,a,map,so,this,property,is,used,to,decide,which,map,entries,to,keep,in,the,final,output,from,this,factory,param,resolution,method,the,resolution,method,to,set,defaults,to,link,resolution,method,override;public,void,set,resolution,method,resolution,method,resolution,method,assert,not,null,resolution,method,resolution,method,must,not,be,null,this,resolution,method,resolution,method
YamlProcessor -> public void setResolutionMethod(ResolutionMethod resolutionMethod);1441370327;Method to use for resolving resources. Each resource will be converted to a Map, so_this property is used to decide which map entries to keep in the final output from_this factory._@param resolutionMethod the resolution method to set (defaults to_{@link ResolutionMethod#OVERRIDE}).;public void setResolutionMethod(ResolutionMethod resolutionMethod) {_		Assert.notNull(resolutionMethod, "ResolutionMethod must not be null")__		this.resolutionMethod = resolutionMethod__	};method,to,use,for,resolving,resources,each,resource,will,be,converted,to,a,map,so,this,property,is,used,to,decide,which,map,entries,to,keep,in,the,final,output,from,this,factory,param,resolution,method,the,resolution,method,to,set,defaults,to,link,resolution,method,override;public,void,set,resolution,method,resolution,method,resolution,method,assert,not,null,resolution,method,resolution,method,must,not,be,null,this,resolution,method,resolution,method
YamlProcessor -> public void setResolutionMethod(ResolutionMethod resolutionMethod);1443127890;Method to use for resolving resources. Each resource will be converted to a Map,_so this property is used to decide which map entries to keep in the final output_from this factory._@param resolutionMethod the resolution method to set (defaults to_{@link ResolutionMethod#OVERRIDE}).;public void setResolutionMethod(ResolutionMethod resolutionMethod) {_		Assert.notNull(resolutionMethod, "ResolutionMethod must not be null")__		this.resolutionMethod = resolutionMethod__	};method,to,use,for,resolving,resources,each,resource,will,be,converted,to,a,map,so,this,property,is,used,to,decide,which,map,entries,to,keep,in,the,final,output,from,this,factory,param,resolution,method,the,resolution,method,to,set,defaults,to,link,resolution,method,override;public,void,set,resolution,method,resolution,method,resolution,method,assert,not,null,resolution,method,resolution,method,must,not,be,null,this,resolution,method,resolution,method
YamlProcessor -> public void setResolutionMethod(ResolutionMethod resolutionMethod);1449164463;Method to use for resolving resources. Each resource will be converted to a Map,_so this property is used to decide which map entries to keep in the final output_from this factory._@param resolutionMethod the resolution method to set (defaults to_{@link ResolutionMethod#OVERRIDE}).;public void setResolutionMethod(ResolutionMethod resolutionMethod) {_		Assert.notNull(resolutionMethod, "ResolutionMethod must not be null")__		this.resolutionMethod = resolutionMethod__	};method,to,use,for,resolving,resources,each,resource,will,be,converted,to,a,map,so,this,property,is,used,to,decide,which,map,entries,to,keep,in,the,final,output,from,this,factory,param,resolution,method,the,resolution,method,to,set,defaults,to,link,resolution,method,override;public,void,set,resolution,method,resolution,method,resolution,method,assert,not,null,resolution,method,resolution,method,must,not,be,null,this,resolution,method,resolution,method
YamlProcessor -> public void setResolutionMethod(ResolutionMethod resolutionMethod);1467730834;Method to use for resolving resources. Each resource will be converted to a Map,_so this property is used to decide which map entries to keep in the final output_from this factory._@param resolutionMethod the resolution method to set (defaults to_{@link ResolutionMethod#OVERRIDE}).;public void setResolutionMethod(ResolutionMethod resolutionMethod) {_		Assert.notNull(resolutionMethod, "ResolutionMethod must not be null")__		this.resolutionMethod = resolutionMethod__	};method,to,use,for,resolving,resources,each,resource,will,be,converted,to,a,map,so,this,property,is,used,to,decide,which,map,entries,to,keep,in,the,final,output,from,this,factory,param,resolution,method,the,resolution,method,to,set,defaults,to,link,resolution,method,override;public,void,set,resolution,method,resolution,method,resolution,method,assert,not,null,resolution,method,resolution,method,must,not,be,null,this,resolution,method,resolution,method
YamlProcessor -> public void setResolutionMethod(ResolutionMethod resolutionMethod);1474830340;Method to use for resolving resources. Each resource will be converted to a Map,_so this property is used to decide which map entries to keep in the final output_from this factory._@param resolutionMethod the resolution method to set (defaults to_{@link ResolutionMethod#OVERRIDE}).;public void setResolutionMethod(ResolutionMethod resolutionMethod) {_		Assert.notNull(resolutionMethod, "ResolutionMethod must not be null")__		this.resolutionMethod = resolutionMethod__	};method,to,use,for,resolving,resources,each,resource,will,be,converted,to,a,map,so,this,property,is,used,to,decide,which,map,entries,to,keep,in,the,final,output,from,this,factory,param,resolution,method,the,resolution,method,to,set,defaults,to,link,resolution,method,override;public,void,set,resolution,method,resolution,method,resolution,method,assert,not,null,resolution,method,resolution,method,must,not,be,null,this,resolution,method,resolution,method
YamlProcessor -> public void setResolutionMethod(ResolutionMethod resolutionMethod);1477045587;Method to use for resolving resources. Each resource will be converted to a Map,_so this property is used to decide which map entries to keep in the final output_from this factory._@param resolutionMethod the resolution method to set (defaults to_{@link ResolutionMethod#OVERRIDE}).;public void setResolutionMethod(ResolutionMethod resolutionMethod) {_		Assert.notNull(resolutionMethod, "ResolutionMethod must not be null")__		this.resolutionMethod = resolutionMethod__	};method,to,use,for,resolving,resources,each,resource,will,be,converted,to,a,map,so,this,property,is,used,to,decide,which,map,entries,to,keep,in,the,final,output,from,this,factory,param,resolution,method,the,resolution,method,to,set,defaults,to,link,resolution,method,override;public,void,set,resolution,method,resolution,method,resolution,method,assert,not,null,resolution,method,resolution,method,must,not,be,null,this,resolution,method,resolution,method
YamlProcessor -> public void setResolutionMethod(ResolutionMethod resolutionMethod);1496259743;Method to use for resolving resources. Each resource will be converted to a Map,_so this property is used to decide which map entries to keep in the final output_from this factory._@param resolutionMethod the resolution method to set (defaults to_{@link ResolutionMethod#OVERRIDE}).;public void setResolutionMethod(ResolutionMethod resolutionMethod) {_		Assert.notNull(resolutionMethod, "ResolutionMethod must not be null")__		this.resolutionMethod = resolutionMethod__	};method,to,use,for,resolving,resources,each,resource,will,be,converted,to,a,map,so,this,property,is,used,to,decide,which,map,entries,to,keep,in,the,final,output,from,this,factory,param,resolution,method,the,resolution,method,to,set,defaults,to,link,resolution,method,override;public,void,set,resolution,method,resolution,method,resolution,method,assert,not,null,resolution,method,resolution,method,must,not,be,null,this,resolution,method,resolution,method
YamlProcessor -> public void setResolutionMethod(ResolutionMethod resolutionMethod);1497250713;Method to use for resolving resources. Each resource will be converted to a Map,_so this property is used to decide which map entries to keep in the final output_from this factory._@param resolutionMethod the resolution method to set (defaults to_{@link ResolutionMethod#OVERRIDE}).;public void setResolutionMethod(ResolutionMethod resolutionMethod) {_		Assert.notNull(resolutionMethod, "ResolutionMethod must not be null")__		this.resolutionMethod = resolutionMethod__	};method,to,use,for,resolving,resources,each,resource,will,be,converted,to,a,map,so,this,property,is,used,to,decide,which,map,entries,to,keep,in,the,final,output,from,this,factory,param,resolution,method,the,resolution,method,to,set,defaults,to,link,resolution,method,override;public,void,set,resolution,method,resolution,method,resolution,method,assert,not,null,resolution,method,resolution,method,must,not,be,null,this,resolution,method,resolution,method
YamlProcessor -> public void setResolutionMethod(ResolutionMethod resolutionMethod);1522103912;Method to use for resolving resources. Each resource will be converted to a Map,_so this property is used to decide which map entries to keep in the final output_from this factory._@param resolutionMethod the resolution method to set (defaults to_{@link ResolutionMethod#OVERRIDE}).;public void setResolutionMethod(ResolutionMethod resolutionMethod) {_		Assert.notNull(resolutionMethod, "ResolutionMethod must not be null")__		this.resolutionMethod = resolutionMethod__	};method,to,use,for,resolving,resources,each,resource,will,be,converted,to,a,map,so,this,property,is,used,to,decide,which,map,entries,to,keep,in,the,final,output,from,this,factory,param,resolution,method,the,resolution,method,to,set,defaults,to,link,resolution,method,override;public,void,set,resolution,method,resolution,method,resolution,method,assert,not,null,resolution,method,resolution,method,must,not,be,null,this,resolution,method,resolution,method
YamlProcessor -> public void setResolutionMethod(ResolutionMethod resolutionMethod);1524990608;Method to use for resolving resources. Each resource will be converted to a Map,_so this property is used to decide which map entries to keep in the final output_from this factory._@param resolutionMethod the resolution method to set (defaults to_{@link ResolutionMethod#OVERRIDE}).;public void setResolutionMethod(ResolutionMethod resolutionMethod) {_		Assert.notNull(resolutionMethod, "ResolutionMethod must not be null")__		this.resolutionMethod = resolutionMethod__	};method,to,use,for,resolving,resources,each,resource,will,be,converted,to,a,map,so,this,property,is,used,to,decide,which,map,entries,to,keep,in,the,final,output,from,this,factory,param,resolution,method,the,resolution,method,to,set,defaults,to,link,resolution,method,override;public,void,set,resolution,method,resolution,method,resolution,method,assert,not,null,resolution,method,resolution,method,must,not,be,null,this,resolution,method,resolution,method
YamlProcessor -> public void setResolutionMethod(ResolutionMethod resolutionMethod);1525517231;Method to use for resolving resources. Each resource will be converted to a Map,_so this property is used to decide which map entries to keep in the final output_from this factory._@param resolutionMethod the resolution method to set (defaults to_{@link ResolutionMethod#OVERRIDE}).;public void setResolutionMethod(ResolutionMethod resolutionMethod) {_		Assert.notNull(resolutionMethod, "ResolutionMethod must not be null")__		this.resolutionMethod = resolutionMethod__	};method,to,use,for,resolving,resources,each,resource,will,be,converted,to,a,map,so,this,property,is,used,to,decide,which,map,entries,to,keep,in,the,final,output,from,this,factory,param,resolution,method,the,resolution,method,to,set,defaults,to,link,resolution,method,override;public,void,set,resolution,method,resolution,method,resolution,method,assert,not,null,resolution,method,resolution,method,must,not,be,null,this,resolution,method,resolution,method
YamlProcessor -> public void setResolutionMethod(ResolutionMethod resolutionMethod);1528313220;Method to use for resolving resources. Each resource will be converted to a Map,_so this property is used to decide which map entries to keep in the final output_from this factory. Default is {@link ResolutionMethod#OVERRIDE}.;public void setResolutionMethod(ResolutionMethod resolutionMethod) {_		Assert.notNull(resolutionMethod, "ResolutionMethod must not be null")__		this.resolutionMethod = resolutionMethod__	};method,to,use,for,resolving,resources,each,resource,will,be,converted,to,a,map,so,this,property,is,used,to,decide,which,map,entries,to,keep,in,the,final,output,from,this,factory,default,is,link,resolution,method,override;public,void,set,resolution,method,resolution,method,resolution,method,assert,not,null,resolution,method,resolution,method,must,not,be,null,this,resolution,method,resolution,method
YamlProcessor -> public void setResolutionMethod(ResolutionMethod resolutionMethod);1528737477;Method to use for resolving resources. Each resource will be converted to a Map,_so this property is used to decide which map entries to keep in the final output_from this factory. Default is {@link ResolutionMethod#OVERRIDE}.;public void setResolutionMethod(ResolutionMethod resolutionMethod) {_		Assert.notNull(resolutionMethod, "ResolutionMethod must not be null")__		this.resolutionMethod = resolutionMethod__	};method,to,use,for,resolving,resources,each,resource,will,be,converted,to,a,map,so,this,property,is,used,to,decide,which,map,entries,to,keep,in,the,final,output,from,this,factory,default,is,link,resolution,method,override;public,void,set,resolution,method,resolution,method,resolution,method,assert,not,null,resolution,method,resolution,method,must,not,be,null,this,resolution,method,resolution,method
YamlProcessor -> public void setResolutionMethod(ResolutionMethod resolutionMethod);1530174524;Method to use for resolving resources. Each resource will be converted to a Map,_so this property is used to decide which map entries to keep in the final output_from this factory. Default is {@link ResolutionMethod#OVERRIDE}.;public void setResolutionMethod(ResolutionMethod resolutionMethod) {_		Assert.notNull(resolutionMethod, "ResolutionMethod must not be null")__		this.resolutionMethod = resolutionMethod__	};method,to,use,for,resolving,resources,each,resource,will,be,converted,to,a,map,so,this,property,is,used,to,decide,which,map,entries,to,keep,in,the,final,output,from,this,factory,default,is,link,resolution,method,override;public,void,set,resolution,method,resolution,method,resolution,method,assert,not,null,resolution,method,resolution,method,must,not,be,null,this,resolution,method,resolution,method
YamlProcessor -> public void setResources(Resource... resources);1404773971;Set locations of YAML {@link Resource resources} to be loaded._@see ResolutionMethod;public void setResources(Resource... resources) {_		this.resources = (resources == null ? null : resources.clone())__	};set,locations,of,yaml,link,resource,resources,to,be,loaded,see,resolution,method;public,void,set,resources,resource,resources,this,resources,resources,null,null,resources,clone
YamlProcessor -> public void setResources(Resource... resources);1409784938;Set locations of YAML {@link Resource resources} to be loaded._@see ResolutionMethod;public void setResources(Resource... resources) {_		this.resources = resources__	};set,locations,of,yaml,link,resource,resources,to,be,loaded,see,resolution,method;public,void,set,resources,resource,resources,this,resources,resources
YamlProcessor -> public void setResources(Resource... resources);1413295115;Set locations of YAML {@link Resource resources} to be loaded._@see ResolutionMethod;public void setResources(Resource... resources) {_		this.resources = resources__	};set,locations,of,yaml,link,resource,resources,to,be,loaded,see,resolution,method;public,void,set,resources,resource,resources,this,resources,resources
YamlProcessor -> public void setResources(Resource... resources);1417446162;Set locations of YAML {@link Resource resources} to be loaded._@see ResolutionMethod;public void setResources(Resource... resources) {_		this.resources = resources__	};set,locations,of,yaml,link,resource,resources,to,be,loaded,see,resolution,method;public,void,set,resources,resource,resources,this,resources,resources
YamlProcessor -> public void setResources(Resource... resources);1417569454;Set locations of YAML {@link Resource resources} to be loaded._@see ResolutionMethod;public void setResources(Resource... resources) {_		this.resources = resources__	};set,locations,of,yaml,link,resource,resources,to,be,loaded,see,resolution,method;public,void,set,resources,resource,resources,this,resources,resources
YamlProcessor -> public void setResources(Resource... resources);1417981938;Set locations of YAML {@link Resource resources} to be loaded._@see ResolutionMethod;public void setResources(Resource... resources) {_		this.resources = resources__	};set,locations,of,yaml,link,resource,resources,to,be,loaded,see,resolution,method;public,void,set,resources,resource,resources,this,resources,resources
YamlProcessor -> public void setResources(Resource... resources);1422872934;Set locations of YAML {@link Resource resources} to be loaded._@see ResolutionMethod;public void setResources(Resource... resources) {_		this.resources = resources__	};set,locations,of,yaml,link,resource,resources,to,be,loaded,see,resolution,method;public,void,set,resources,resource,resources,this,resources,resources
YamlProcessor -> public void setResources(Resource... resources);1435614457;Set locations of YAML {@link Resource resources} to be loaded._@see ResolutionMethod;public void setResources(Resource... resources) {_		this.resources = resources__	};set,locations,of,yaml,link,resource,resources,to,be,loaded,see,resolution,method;public,void,set,resources,resource,resources,this,resources,resources
YamlProcessor -> public void setResources(Resource... resources);1441370327;Set locations of YAML {@link Resource resources} to be loaded._@see ResolutionMethod;public void setResources(Resource... resources) {_		this.resources = resources__	};set,locations,of,yaml,link,resource,resources,to,be,loaded,see,resolution,method;public,void,set,resources,resource,resources,this,resources,resources
YamlProcessor -> public void setResources(Resource... resources);1443127890;Set locations of YAML {@link Resource resources} to be loaded._@see ResolutionMethod;public void setResources(Resource... resources) {_		this.resources = resources__	};set,locations,of,yaml,link,resource,resources,to,be,loaded,see,resolution,method;public,void,set,resources,resource,resources,this,resources,resources
YamlProcessor -> public void setResources(Resource... resources);1449164463;Set locations of YAML {@link Resource resources} to be loaded._@see ResolutionMethod;public void setResources(Resource... resources) {_		this.resources = resources__	};set,locations,of,yaml,link,resource,resources,to,be,loaded,see,resolution,method;public,void,set,resources,resource,resources,this,resources,resources
YamlProcessor -> public void setResources(Resource... resources);1467730834;Set locations of YAML {@link Resource resources} to be loaded._@see ResolutionMethod;public void setResources(Resource... resources) {_		this.resources = resources__	};set,locations,of,yaml,link,resource,resources,to,be,loaded,see,resolution,method;public,void,set,resources,resource,resources,this,resources,resources
YamlProcessor -> public void setResources(Resource... resources);1474830340;Set locations of YAML {@link Resource resources} to be loaded._@see ResolutionMethod;public void setResources(Resource... resources) {_		this.resources = resources__	};set,locations,of,yaml,link,resource,resources,to,be,loaded,see,resolution,method;public,void,set,resources,resource,resources,this,resources,resources
YamlProcessor -> public void setResources(Resource... resources);1477045587;Set locations of YAML {@link Resource resources} to be loaded._@see ResolutionMethod;public void setResources(Resource... resources) {_		this.resources = resources__	};set,locations,of,yaml,link,resource,resources,to,be,loaded,see,resolution,method;public,void,set,resources,resource,resources,this,resources,resources
YamlProcessor -> public void setResources(Resource... resources);1496259743;Set locations of YAML {@link Resource resources} to be loaded._@see ResolutionMethod;public void setResources(Resource... resources) {_		this.resources = resources__	};set,locations,of,yaml,link,resource,resources,to,be,loaded,see,resolution,method;public,void,set,resources,resource,resources,this,resources,resources
YamlProcessor -> public void setResources(Resource... resources);1497250713;Set locations of YAML {@link Resource resources} to be loaded._@see ResolutionMethod;public void setResources(Resource... resources) {_		this.resources = resources__	};set,locations,of,yaml,link,resource,resources,to,be,loaded,see,resolution,method;public,void,set,resources,resource,resources,this,resources,resources
YamlProcessor -> public void setResources(Resource... resources);1522103912;Set locations of YAML {@link Resource resources} to be loaded._@see ResolutionMethod;public void setResources(Resource... resources) {_		this.resources = resources__	};set,locations,of,yaml,link,resource,resources,to,be,loaded,see,resolution,method;public,void,set,resources,resource,resources,this,resources,resources
YamlProcessor -> public void setResources(Resource... resources);1524990608;Set locations of YAML {@link Resource resources} to be loaded._@see ResolutionMethod;public void setResources(Resource... resources) {_		this.resources = resources__	};set,locations,of,yaml,link,resource,resources,to,be,loaded,see,resolution,method;public,void,set,resources,resource,resources,this,resources,resources
YamlProcessor -> public void setResources(Resource... resources);1525517231;Set locations of YAML {@link Resource resources} to be loaded._@see ResolutionMethod;public void setResources(Resource... resources) {_		this.resources = resources__	};set,locations,of,yaml,link,resource,resources,to,be,loaded,see,resolution,method;public,void,set,resources,resource,resources,this,resources,resources
YamlProcessor -> public void setResources(Resource... resources);1528313220;Set locations of YAML {@link Resource resources} to be loaded._@see ResolutionMethod;public void setResources(Resource... resources) {_		this.resources = resources__	};set,locations,of,yaml,link,resource,resources,to,be,loaded,see,resolution,method;public,void,set,resources,resource,resources,this,resources,resources
YamlProcessor -> public void setResources(Resource... resources);1528737477;Set locations of YAML {@link Resource resources} to be loaded._@see ResolutionMethod;public void setResources(Resource... resources) {_		this.resources = resources__	};set,locations,of,yaml,link,resource,resources,to,be,loaded,see,resolution,method;public,void,set,resources,resource,resources,this,resources,resources
YamlProcessor -> public void setResources(Resource... resources);1530174524;Set locations of YAML {@link Resource resources} to be loaded._@see ResolutionMethod;public void setResources(Resource... resources) {_		this.resources = resources__	};set,locations,of,yaml,link,resource,resources,to,be,loaded,see,resolution,method;public,void,set,resources,resource,resources,this,resources,resources
YamlProcessor -> public void setMatchDefault(boolean matchDefault);1399543340;Flag indicating that a document for which all the_{@link #setDocumentMatchers(DocumentMatcher...) document matchers} abstain will_nevertheless match._@param matchDefault the flag to set (default true);public void setMatchDefault(boolean matchDefault) {_		this.matchDefault = matchDefault__	};flag,indicating,that,a,document,for,which,all,the,link,set,document,matchers,document,matcher,document,matchers,abstain,will,nevertheless,match,param,match,default,the,flag,to,set,default,true;public,void,set,match,default,boolean,match,default,this,match,default,match,default
YamlProcessor -> public void setMatchDefault(boolean matchDefault);1404773971;Flag indicating that a document for which all the_{@link #setDocumentMatchers(DocumentMatcher...) document matchers} abstain will_nevertheless match._@param matchDefault the flag to set (default true);public void setMatchDefault(boolean matchDefault) {_		this.matchDefault = matchDefault__	};flag,indicating,that,a,document,for,which,all,the,link,set,document,matchers,document,matcher,document,matchers,abstain,will,nevertheless,match,param,match,default,the,flag,to,set,default,true;public,void,set,match,default,boolean,match,default,this,match,default,match,default
YamlProcessor -> public void setMatchDefault(boolean matchDefault);1409784938;Flag indicating that a document for which all the_{@link #setDocumentMatchers(DocumentMatcher...) document matchers} abstain will_nevertheless match._@param matchDefault the flag to set (default true);public void setMatchDefault(boolean matchDefault) {_		this.matchDefault = matchDefault__	};flag,indicating,that,a,document,for,which,all,the,link,set,document,matchers,document,matcher,document,matchers,abstain,will,nevertheless,match,param,match,default,the,flag,to,set,default,true;public,void,set,match,default,boolean,match,default,this,match,default,match,default
YamlProcessor -> public void setMatchDefault(boolean matchDefault);1413295115;Flag indicating that a document for which all the_{@link #setDocumentMatchers(DocumentMatcher...) document matchers} abstain will_nevertheless match._@param matchDefault the flag to set (default true);public void setMatchDefault(boolean matchDefault) {_		this.matchDefault = matchDefault__	};flag,indicating,that,a,document,for,which,all,the,link,set,document,matchers,document,matcher,document,matchers,abstain,will,nevertheless,match,param,match,default,the,flag,to,set,default,true;public,void,set,match,default,boolean,match,default,this,match,default,match,default
YamlProcessor -> public void setMatchDefault(boolean matchDefault);1417446162;Flag indicating that a document for which all the_{@link #setDocumentMatchers(DocumentMatcher...) document matchers} abstain will_nevertheless match._@param matchDefault the flag to set (default true);public void setMatchDefault(boolean matchDefault) {_		this.matchDefault = matchDefault__	};flag,indicating,that,a,document,for,which,all,the,link,set,document,matchers,document,matcher,document,matchers,abstain,will,nevertheless,match,param,match,default,the,flag,to,set,default,true;public,void,set,match,default,boolean,match,default,this,match,default,match,default
YamlProcessor -> public void setMatchDefault(boolean matchDefault);1417569454;Flag indicating that a document for which all the_{@link #setDocumentMatchers(DocumentMatcher...) document matchers} abstain will_nevertheless match._@param matchDefault the flag to set (default true);public void setMatchDefault(boolean matchDefault) {_		this.matchDefault = matchDefault__	};flag,indicating,that,a,document,for,which,all,the,link,set,document,matchers,document,matcher,document,matchers,abstain,will,nevertheless,match,param,match,default,the,flag,to,set,default,true;public,void,set,match,default,boolean,match,default,this,match,default,match,default
YamlProcessor -> public void setMatchDefault(boolean matchDefault);1417981938;Flag indicating that a document for which all the_{@link #setDocumentMatchers(DocumentMatcher...) document matchers} abstain will_nevertheless match._@param matchDefault the flag to set (default true);public void setMatchDefault(boolean matchDefault) {_		this.matchDefault = matchDefault__	};flag,indicating,that,a,document,for,which,all,the,link,set,document,matchers,document,matcher,document,matchers,abstain,will,nevertheless,match,param,match,default,the,flag,to,set,default,true;public,void,set,match,default,boolean,match,default,this,match,default,match,default
YamlProcessor -> public void setMatchDefault(boolean matchDefault);1422872934;Flag indicating that a document for which all the_{@link #setDocumentMatchers(DocumentMatcher...) document matchers} abstain will_nevertheless match._@param matchDefault the flag to set (default true);public void setMatchDefault(boolean matchDefault) {_		this.matchDefault = matchDefault__	};flag,indicating,that,a,document,for,which,all,the,link,set,document,matchers,document,matcher,document,matchers,abstain,will,nevertheless,match,param,match,default,the,flag,to,set,default,true;public,void,set,match,default,boolean,match,default,this,match,default,match,default
YamlProcessor -> public void setMatchDefault(boolean matchDefault);1435614457;Flag indicating that a document for which all the_{@link #setDocumentMatchers(DocumentMatcher...) document matchers} abstain will_nevertheless match._@param matchDefault the flag to set (default true);public void setMatchDefault(boolean matchDefault) {_		this.matchDefault = matchDefault__	};flag,indicating,that,a,document,for,which,all,the,link,set,document,matchers,document,matcher,document,matchers,abstain,will,nevertheless,match,param,match,default,the,flag,to,set,default,true;public,void,set,match,default,boolean,match,default,this,match,default,match,default
YamlProcessor -> public void setMatchDefault(boolean matchDefault);1441370327;Flag indicating that a document for which all the_{@link #setDocumentMatchers(DocumentMatcher...) document matchers} abstain will_nevertheless match._@param matchDefault the flag to set (default true);public void setMatchDefault(boolean matchDefault) {_		this.matchDefault = matchDefault__	};flag,indicating,that,a,document,for,which,all,the,link,set,document,matchers,document,matcher,document,matchers,abstain,will,nevertheless,match,param,match,default,the,flag,to,set,default,true;public,void,set,match,default,boolean,match,default,this,match,default,match,default
YamlProcessor -> public void setMatchDefault(boolean matchDefault);1443127890;Flag indicating that a document for which all the_{@link #setDocumentMatchers(DocumentMatcher...) document matchers} abstain will_nevertheless match._@param matchDefault the flag to set (default true);public void setMatchDefault(boolean matchDefault) {_		this.matchDefault = matchDefault__	};flag,indicating,that,a,document,for,which,all,the,link,set,document,matchers,document,matcher,document,matchers,abstain,will,nevertheless,match,param,match,default,the,flag,to,set,default,true;public,void,set,match,default,boolean,match,default,this,match,default,match,default
YamlProcessor -> public void setMatchDefault(boolean matchDefault);1449164463;Flag indicating that a document for which all the_{@link #setDocumentMatchers(DocumentMatcher...) document matchers} abstain will_nevertheless match._@param matchDefault the flag to set (default true);public void setMatchDefault(boolean matchDefault) {_		this.matchDefault = matchDefault__	};flag,indicating,that,a,document,for,which,all,the,link,set,document,matchers,document,matcher,document,matchers,abstain,will,nevertheless,match,param,match,default,the,flag,to,set,default,true;public,void,set,match,default,boolean,match,default,this,match,default,match,default
YamlProcessor -> public void setMatchDefault(boolean matchDefault);1467730834;Flag indicating that a document for which all the_{@link #setDocumentMatchers(DocumentMatcher...) document matchers} abstain will_nevertheless match._@param matchDefault the flag to set (default true);public void setMatchDefault(boolean matchDefault) {_		this.matchDefault = matchDefault__	};flag,indicating,that,a,document,for,which,all,the,link,set,document,matchers,document,matcher,document,matchers,abstain,will,nevertheless,match,param,match,default,the,flag,to,set,default,true;public,void,set,match,default,boolean,match,default,this,match,default,match,default
YamlProcessor -> public void setMatchDefault(boolean matchDefault);1474830340;Flag indicating that a document for which all the_{@link #setDocumentMatchers(DocumentMatcher...) document matchers} abstain will_nevertheless match._@param matchDefault the flag to set (default true);public void setMatchDefault(boolean matchDefault) {_		this.matchDefault = matchDefault__	};flag,indicating,that,a,document,for,which,all,the,link,set,document,matchers,document,matcher,document,matchers,abstain,will,nevertheless,match,param,match,default,the,flag,to,set,default,true;public,void,set,match,default,boolean,match,default,this,match,default,match,default
YamlProcessor -> public void setMatchDefault(boolean matchDefault);1477045587;Flag indicating that a document for which all the_{@link #setDocumentMatchers(DocumentMatcher...) document matchers} abstain will_nevertheless match._@param matchDefault the flag to set (default true);public void setMatchDefault(boolean matchDefault) {_		this.matchDefault = matchDefault__	};flag,indicating,that,a,document,for,which,all,the,link,set,document,matchers,document,matcher,document,matchers,abstain,will,nevertheless,match,param,match,default,the,flag,to,set,default,true;public,void,set,match,default,boolean,match,default,this,match,default,match,default
YamlProcessor -> public void setMatchDefault(boolean matchDefault);1496259743;Flag indicating that a document for which all the_{@link #setDocumentMatchers(DocumentMatcher...) document matchers} abstain will_nevertheless match._@param matchDefault the flag to set (default true);public void setMatchDefault(boolean matchDefault) {_		this.matchDefault = matchDefault__	};flag,indicating,that,a,document,for,which,all,the,link,set,document,matchers,document,matcher,document,matchers,abstain,will,nevertheless,match,param,match,default,the,flag,to,set,default,true;public,void,set,match,default,boolean,match,default,this,match,default,match,default
YamlProcessor -> public void setMatchDefault(boolean matchDefault);1497250713;Flag indicating that a document for which all the_{@link #setDocumentMatchers(DocumentMatcher...) document matchers} abstain will_nevertheless match._@param matchDefault the flag to set (default true);public void setMatchDefault(boolean matchDefault) {_		this.matchDefault = matchDefault__	};flag,indicating,that,a,document,for,which,all,the,link,set,document,matchers,document,matcher,document,matchers,abstain,will,nevertheless,match,param,match,default,the,flag,to,set,default,true;public,void,set,match,default,boolean,match,default,this,match,default,match,default
YamlProcessor -> public void setMatchDefault(boolean matchDefault);1522103912;Flag indicating that a document for which all the_{@link #setDocumentMatchers(DocumentMatcher...) document matchers} abstain will_nevertheless match._@param matchDefault the flag to set (default true);public void setMatchDefault(boolean matchDefault) {_		this.matchDefault = matchDefault__	};flag,indicating,that,a,document,for,which,all,the,link,set,document,matchers,document,matcher,document,matchers,abstain,will,nevertheless,match,param,match,default,the,flag,to,set,default,true;public,void,set,match,default,boolean,match,default,this,match,default,match,default
YamlProcessor -> public void setMatchDefault(boolean matchDefault);1524990608;Flag indicating that a document for which all the_{@link #setDocumentMatchers(DocumentMatcher...) document matchers} abstain will_nevertheless match._@param matchDefault the flag to set (default true);public void setMatchDefault(boolean matchDefault) {_		this.matchDefault = matchDefault__	};flag,indicating,that,a,document,for,which,all,the,link,set,document,matchers,document,matcher,document,matchers,abstain,will,nevertheless,match,param,match,default,the,flag,to,set,default,true;public,void,set,match,default,boolean,match,default,this,match,default,match,default
YamlProcessor -> public void setMatchDefault(boolean matchDefault);1525517231;Flag indicating that a document for which all the_{@link #setDocumentMatchers(DocumentMatcher...) document matchers} abstain will_nevertheless match._@param matchDefault the flag to set (default true);public void setMatchDefault(boolean matchDefault) {_		this.matchDefault = matchDefault__	};flag,indicating,that,a,document,for,which,all,the,link,set,document,matchers,document,matcher,document,matchers,abstain,will,nevertheless,match,param,match,default,the,flag,to,set,default,true;public,void,set,match,default,boolean,match,default,this,match,default,match,default
YamlProcessor -> public void setMatchDefault(boolean matchDefault);1528313220;Flag indicating that a document for which all the_{@link #setDocumentMatchers(DocumentMatcher...) document matchers} abstain will_nevertheless match. Default is {@code true}.;public void setMatchDefault(boolean matchDefault) {_		this.matchDefault = matchDefault__	};flag,indicating,that,a,document,for,which,all,the,link,set,document,matchers,document,matcher,document,matchers,abstain,will,nevertheless,match,default,is,code,true;public,void,set,match,default,boolean,match,default,this,match,default,match,default
YamlProcessor -> public void setMatchDefault(boolean matchDefault);1528737477;Flag indicating that a document for which all the_{@link #setDocumentMatchers(DocumentMatcher...) document matchers} abstain will_nevertheless match. Default is {@code true}.;public void setMatchDefault(boolean matchDefault) {_		this.matchDefault = matchDefault__	};flag,indicating,that,a,document,for,which,all,the,link,set,document,matchers,document,matcher,document,matchers,abstain,will,nevertheless,match,default,is,code,true;public,void,set,match,default,boolean,match,default,this,match,default,match,default
YamlProcessor -> public void setMatchDefault(boolean matchDefault);1530174524;Flag indicating that a document for which all the_{@link #setDocumentMatchers(DocumentMatcher...) document matchers} abstain will_nevertheless match. Default is {@code true}.;public void setMatchDefault(boolean matchDefault) {_		this.matchDefault = matchDefault__	};flag,indicating,that,a,document,for,which,all,the,link,set,document,matchers,document,matcher,document,matchers,abstain,will,nevertheless,match,default,is,code,true;public,void,set,match,default,boolean,match,default,this,match,default,match,default
YamlProcessor -> protected Yaml createYaml();1422872934;Create the {@link Yaml} instance to use.;protected Yaml createYaml() {_		return new Yaml(new StrictMapAppenderConstructor())__	};create,the,link,yaml,instance,to,use;protected,yaml,create,yaml,return,new,yaml,new,strict,map,appender,constructor
YamlProcessor -> protected Yaml createYaml();1435614457;Create the {@link Yaml} instance to use.;protected Yaml createYaml() {_		return new Yaml(new StrictMapAppenderConstructor())__	};create,the,link,yaml,instance,to,use;protected,yaml,create,yaml,return,new,yaml,new,strict,map,appender,constructor
YamlProcessor -> protected Yaml createYaml();1441370327;Create the {@link Yaml} instance to use.;protected Yaml createYaml() {_		return new Yaml(new StrictMapAppenderConstructor())__	};create,the,link,yaml,instance,to,use;protected,yaml,create,yaml,return,new,yaml,new,strict,map,appender,constructor
YamlProcessor -> protected Yaml createYaml();1443127890;Create the {@link Yaml} instance to use.;protected Yaml createYaml() {_		return new Yaml(new StrictMapAppenderConstructor())__	};create,the,link,yaml,instance,to,use;protected,yaml,create,yaml,return,new,yaml,new,strict,map,appender,constructor
YamlProcessor -> protected Yaml createYaml();1449164463;Create the {@link Yaml} instance to use.;protected Yaml createYaml() {_		return new Yaml(new StrictMapAppenderConstructor())__	};create,the,link,yaml,instance,to,use;protected,yaml,create,yaml,return,new,yaml,new,strict,map,appender,constructor
YamlProcessor -> protected Yaml createYaml();1467730834;Create the {@link Yaml} instance to use.;protected Yaml createYaml() {_		return new Yaml(new StrictMapAppenderConstructor())__	};create,the,link,yaml,instance,to,use;protected,yaml,create,yaml,return,new,yaml,new,strict,map,appender,constructor
YamlProcessor -> protected Yaml createYaml();1474830340;Create the {@link Yaml} instance to use.;protected Yaml createYaml() {_		return new Yaml(new StrictMapAppenderConstructor())__	};create,the,link,yaml,instance,to,use;protected,yaml,create,yaml,return,new,yaml,new,strict,map,appender,constructor
YamlProcessor -> protected Yaml createYaml();1477045587;Create the {@link Yaml} instance to use.;protected Yaml createYaml() {_		return new Yaml(new StrictMapAppenderConstructor())__	};create,the,link,yaml,instance,to,use;protected,yaml,create,yaml,return,new,yaml,new,strict,map,appender,constructor
YamlProcessor -> protected Yaml createYaml();1496259743;Create the {@link Yaml} instance to use.;protected Yaml createYaml() {_		return new Yaml(new StrictMapAppenderConstructor())__	};create,the,link,yaml,instance,to,use;protected,yaml,create,yaml,return,new,yaml,new,strict,map,appender,constructor
YamlProcessor -> protected Yaml createYaml();1497250713;Create the {@link Yaml} instance to use.;protected Yaml createYaml() {_		return new Yaml(new StrictMapAppenderConstructor())__	};create,the,link,yaml,instance,to,use;protected,yaml,create,yaml,return,new,yaml,new,strict,map,appender,constructor
YamlProcessor -> protected Yaml createYaml();1522103912;Create the {@link Yaml} instance to use.;protected Yaml createYaml() {_		return new Yaml(new StrictMapAppenderConstructor())__	};create,the,link,yaml,instance,to,use;protected,yaml,create,yaml,return,new,yaml,new,strict,map,appender,constructor
YamlProcessor -> protected Yaml createYaml();1524990608;Create the {@link Yaml} instance to use.;protected Yaml createYaml() {_		return new Yaml(new StrictMapAppenderConstructor())__	};create,the,link,yaml,instance,to,use;protected,yaml,create,yaml,return,new,yaml,new,strict,map,appender,constructor
YamlProcessor -> protected Yaml createYaml();1525517231;Create the {@link Yaml} instance to use._<p>The default implementation sets the "allowDuplicateKeys" flag to {@code false},_enabling built-in duplicate key handling in SnakeYAML 1.18+._@see LoaderOptions#setAllowDuplicateKeys(boolean);protected Yaml createYaml() {_		LoaderOptions options = new LoaderOptions()__		options.setAllowDuplicateKeys(false)__		return new Yaml(options)__	};create,the,link,yaml,instance,to,use,p,the,default,implementation,sets,the,allow,duplicate,keys,flag,to,code,false,enabling,built,in,duplicate,key,handling,in,snake,yaml,1,18,see,loader,options,set,allow,duplicate,keys,boolean;protected,yaml,create,yaml,loader,options,options,new,loader,options,options,set,allow,duplicate,keys,false,return,new,yaml,options
YamlProcessor -> protected Yaml createYaml();1528313220;Create the {@link Yaml} instance to use._<p>The default implementation sets the "allowDuplicateKeys" flag to {@code false},_enabling built-in duplicate key handling in SnakeYAML 1.18+._@see LoaderOptions#setAllowDuplicateKeys(boolean);protected Yaml createYaml() {_		LoaderOptions options = new LoaderOptions()__		options.setAllowDuplicateKeys(false)__		return new Yaml(options)__	};create,the,link,yaml,instance,to,use,p,the,default,implementation,sets,the,allow,duplicate,keys,flag,to,code,false,enabling,built,in,duplicate,key,handling,in,snake,yaml,1,18,see,loader,options,set,allow,duplicate,keys,boolean;protected,yaml,create,yaml,loader,options,options,new,loader,options,options,set,allow,duplicate,keys,false,return,new,yaml,options
YamlProcessor -> protected Yaml createYaml();1528737477;Create the {@link Yaml} instance to use._<p>The default implementation sets the "allowDuplicateKeys" flag to {@code false},_enabling built-in duplicate key handling in SnakeYAML 1.18+._@see LoaderOptions#setAllowDuplicateKeys(boolean);protected Yaml createYaml() {_		LoaderOptions options = new LoaderOptions()__		options.setAllowDuplicateKeys(false)__		return new Yaml(options)__	};create,the,link,yaml,instance,to,use,p,the,default,implementation,sets,the,allow,duplicate,keys,flag,to,code,false,enabling,built,in,duplicate,key,handling,in,snake,yaml,1,18,see,loader,options,set,allow,duplicate,keys,boolean;protected,yaml,create,yaml,loader,options,options,new,loader,options,options,set,allow,duplicate,keys,false,return,new,yaml,options
YamlProcessor -> protected Yaml createYaml();1530174524;Create the {@link Yaml} instance to use._<p>The default implementation sets the "allowDuplicateKeys" flag to {@code false},_enabling built-in duplicate key handling in SnakeYAML 1.18+._@see LoaderOptions#setAllowDuplicateKeys(boolean);protected Yaml createYaml() {_		LoaderOptions options = new LoaderOptions()__		options.setAllowDuplicateKeys(false)__		return new Yaml(options)__	};create,the,link,yaml,instance,to,use,p,the,default,implementation,sets,the,allow,duplicate,keys,flag,to,code,false,enabling,built,in,duplicate,key,handling,in,snake,yaml,1,18,see,loader,options,set,allow,duplicate,keys,boolean;protected,yaml,create,yaml,loader,options,options,new,loader,options,options,set,allow,duplicate,keys,false,return,new,yaml,options
YamlProcessor -> protected final Map<String, Object> getFlattenedMap(Map<String, Object> source);1417569454;Return a flattened version of the given map, recursively following any nested Map_or Collection values. Entries from the resulting map retain the same order as the_source. When called with the Map from a {@link MatchCallback} the result will_contain the same values as the {@link MatchCallback} Properties._@param source the source map_@return a flattened map_@since 4.2.3;protected final Map<String, Object> getFlattenedMap(Map<String, Object> source) {_		Map<String, Object> result = new LinkedHashMap<String, Object>()__		buildFlattenedMap(result, source, null)__		return result__	};return,a,flattened,version,of,the,given,map,recursively,following,any,nested,map,or,collection,values,entries,from,the,resulting,map,retain,the,same,order,as,the,source,when,called,with,the,map,from,a,link,match,callback,the,result,will,contain,the,same,values,as,the,link,match,callback,properties,param,source,the,source,map,return,a,flattened,map,since,4,2,3;protected,final,map,string,object,get,flattened,map,map,string,object,source,map,string,object,result,new,linked,hash,map,string,object,build,flattened,map,result,source,null,return,result
YamlProcessor -> protected final Map<String, Object> getFlattenedMap(Map<String, Object> source);1417981938;Return a flattened version of the given map, recursively following any nested Map_or Collection values. Entries from the resulting map retain the same order as the_source. When called with the Map from a {@link MatchCallback} the result will_contain the same values as the {@link MatchCallback} Properties._@param source the source map_@return a flattened map_@since 4.1.3;protected final Map<String, Object> getFlattenedMap(Map<String, Object> source) {_		Map<String, Object> result = new LinkedHashMap<String, Object>()__		buildFlattenedMap(result, source, null)__		return result__	};return,a,flattened,version,of,the,given,map,recursively,following,any,nested,map,or,collection,values,entries,from,the,resulting,map,retain,the,same,order,as,the,source,when,called,with,the,map,from,a,link,match,callback,the,result,will,contain,the,same,values,as,the,link,match,callback,properties,param,source,the,source,map,return,a,flattened,map,since,4,1,3;protected,final,map,string,object,get,flattened,map,map,string,object,source,map,string,object,result,new,linked,hash,map,string,object,build,flattened,map,result,source,null,return,result
YamlProcessor -> protected final Map<String, Object> getFlattenedMap(Map<String, Object> source);1422872934;Return a flattened version of the given map, recursively following any nested Map_or Collection values. Entries from the resulting map retain the same order as the_source. When called with the Map from a {@link MatchCallback} the result will_contain the same values as the {@link MatchCallback} Properties._@param source the source map_@return a flattened map_@since 4.1.3;protected final Map<String, Object> getFlattenedMap(Map<String, Object> source) {_		Map<String, Object> result = new LinkedHashMap<String, Object>()__		buildFlattenedMap(result, source, null)__		return result__	};return,a,flattened,version,of,the,given,map,recursively,following,any,nested,map,or,collection,values,entries,from,the,resulting,map,retain,the,same,order,as,the,source,when,called,with,the,map,from,a,link,match,callback,the,result,will,contain,the,same,values,as,the,link,match,callback,properties,param,source,the,source,map,return,a,flattened,map,since,4,1,3;protected,final,map,string,object,get,flattened,map,map,string,object,source,map,string,object,result,new,linked,hash,map,string,object,build,flattened,map,result,source,null,return,result
YamlProcessor -> protected final Map<String, Object> getFlattenedMap(Map<String, Object> source);1435614457;Return a flattened version of the given map, recursively following any nested Map_or Collection values. Entries from the resulting map retain the same order as the_source. When called with the Map from a {@link MatchCallback} the result will_contain the same values as the {@link MatchCallback} Properties._@param source the source map_@return a flattened map_@since 4.1.3;protected final Map<String, Object> getFlattenedMap(Map<String, Object> source) {_		Map<String, Object> result = new LinkedHashMap<String, Object>()__		buildFlattenedMap(result, source, null)__		return result__	};return,a,flattened,version,of,the,given,map,recursively,following,any,nested,map,or,collection,values,entries,from,the,resulting,map,retain,the,same,order,as,the,source,when,called,with,the,map,from,a,link,match,callback,the,result,will,contain,the,same,values,as,the,link,match,callback,properties,param,source,the,source,map,return,a,flattened,map,since,4,1,3;protected,final,map,string,object,get,flattened,map,map,string,object,source,map,string,object,result,new,linked,hash,map,string,object,build,flattened,map,result,source,null,return,result
YamlProcessor -> protected final Map<String, Object> getFlattenedMap(Map<String, Object> source);1441370327;Return a flattened version of the given map, recursively following any nested Map_or Collection values. Entries from the resulting map retain the same order as the_source. When called with the Map from a {@link MatchCallback} the result will_contain the same values as the {@link MatchCallback} Properties._@param source the source map_@return a flattened map_@since 4.1.3;protected final Map<String, Object> getFlattenedMap(Map<String, Object> source) {_		Map<String, Object> result = new LinkedHashMap<String, Object>()__		buildFlattenedMap(result, source, null)__		return result__	};return,a,flattened,version,of,the,given,map,recursively,following,any,nested,map,or,collection,values,entries,from,the,resulting,map,retain,the,same,order,as,the,source,when,called,with,the,map,from,a,link,match,callback,the,result,will,contain,the,same,values,as,the,link,match,callback,properties,param,source,the,source,map,return,a,flattened,map,since,4,1,3;protected,final,map,string,object,get,flattened,map,map,string,object,source,map,string,object,result,new,linked,hash,map,string,object,build,flattened,map,result,source,null,return,result
YamlProcessor -> protected final Map<String, Object> getFlattenedMap(Map<String, Object> source);1443127890;Return a flattened version of the given map, recursively following any nested Map_or Collection values. Entries from the resulting map retain the same order as the_source. When called with the Map from a {@link MatchCallback} the result will_contain the same values as the {@link MatchCallback} Properties._@param source the source map_@return a flattened map_@since 4.1.3;protected final Map<String, Object> getFlattenedMap(Map<String, Object> source) {_		Map<String, Object> result = new LinkedHashMap<String, Object>()__		buildFlattenedMap(result, source, null)__		return result__	};return,a,flattened,version,of,the,given,map,recursively,following,any,nested,map,or,collection,values,entries,from,the,resulting,map,retain,the,same,order,as,the,source,when,called,with,the,map,from,a,link,match,callback,the,result,will,contain,the,same,values,as,the,link,match,callback,properties,param,source,the,source,map,return,a,flattened,map,since,4,1,3;protected,final,map,string,object,get,flattened,map,map,string,object,source,map,string,object,result,new,linked,hash,map,string,object,build,flattened,map,result,source,null,return,result
YamlProcessor -> protected final Map<String, Object> getFlattenedMap(Map<String, Object> source);1449164463;Return a flattened version of the given map, recursively following any nested Map_or Collection values. Entries from the resulting map retain the same order as the_source. When called with the Map from a {@link MatchCallback} the result will_contain the same values as the {@link MatchCallback} Properties._@param source the source map_@return a flattened map_@since 4.1.3;protected final Map<String, Object> getFlattenedMap(Map<String, Object> source) {_		Map<String, Object> result = new LinkedHashMap<String, Object>()__		buildFlattenedMap(result, source, null)__		return result__	};return,a,flattened,version,of,the,given,map,recursively,following,any,nested,map,or,collection,values,entries,from,the,resulting,map,retain,the,same,order,as,the,source,when,called,with,the,map,from,a,link,match,callback,the,result,will,contain,the,same,values,as,the,link,match,callback,properties,param,source,the,source,map,return,a,flattened,map,since,4,1,3;protected,final,map,string,object,get,flattened,map,map,string,object,source,map,string,object,result,new,linked,hash,map,string,object,build,flattened,map,result,source,null,return,result
YamlProcessor -> protected final Map<String, Object> getFlattenedMap(Map<String, Object> source);1467730834;Return a flattened version of the given map, recursively following any nested Map_or Collection values. Entries from the resulting map retain the same order as the_source. When called with the Map from a {@link MatchCallback} the result will_contain the same values as the {@link MatchCallback} Properties._@param source the source map_@return a flattened map_@since 4.1.3;protected final Map<String, Object> getFlattenedMap(Map<String, Object> source) {_		Map<String, Object> result = new LinkedHashMap<>()__		buildFlattenedMap(result, source, null)__		return result__	};return,a,flattened,version,of,the,given,map,recursively,following,any,nested,map,or,collection,values,entries,from,the,resulting,map,retain,the,same,order,as,the,source,when,called,with,the,map,from,a,link,match,callback,the,result,will,contain,the,same,values,as,the,link,match,callback,properties,param,source,the,source,map,return,a,flattened,map,since,4,1,3;protected,final,map,string,object,get,flattened,map,map,string,object,source,map,string,object,result,new,linked,hash,map,build,flattened,map,result,source,null,return,result
YamlProcessor -> protected final Map<String, Object> getFlattenedMap(Map<String, Object> source);1474830340;Return a flattened version of the given map, recursively following any nested Map_or Collection values. Entries from the resulting map retain the same order as the_source. When called with the Map from a {@link MatchCallback} the result will_contain the same values as the {@link MatchCallback} Properties._@param source the source map_@return a flattened map_@since 4.1.3;protected final Map<String, Object> getFlattenedMap(Map<String, Object> source) {_		Map<String, Object> result = new LinkedHashMap<>()__		buildFlattenedMap(result, source, null)__		return result__	};return,a,flattened,version,of,the,given,map,recursively,following,any,nested,map,or,collection,values,entries,from,the,resulting,map,retain,the,same,order,as,the,source,when,called,with,the,map,from,a,link,match,callback,the,result,will,contain,the,same,values,as,the,link,match,callback,properties,param,source,the,source,map,return,a,flattened,map,since,4,1,3;protected,final,map,string,object,get,flattened,map,map,string,object,source,map,string,object,result,new,linked,hash,map,build,flattened,map,result,source,null,return,result
YamlProcessor -> protected final Map<String, Object> getFlattenedMap(Map<String, Object> source);1477045587;Return a flattened version of the given map, recursively following any nested Map_or Collection values. Entries from the resulting map retain the same order as the_source. When called with the Map from a {@link MatchCallback} the result will_contain the same values as the {@link MatchCallback} Properties._@param source the source map_@return a flattened map_@since 4.1.3;protected final Map<String, Object> getFlattenedMap(Map<String, Object> source) {_		Map<String, Object> result = new LinkedHashMap<>()__		buildFlattenedMap(result, source, null)__		return result__	};return,a,flattened,version,of,the,given,map,recursively,following,any,nested,map,or,collection,values,entries,from,the,resulting,map,retain,the,same,order,as,the,source,when,called,with,the,map,from,a,link,match,callback,the,result,will,contain,the,same,values,as,the,link,match,callback,properties,param,source,the,source,map,return,a,flattened,map,since,4,1,3;protected,final,map,string,object,get,flattened,map,map,string,object,source,map,string,object,result,new,linked,hash,map,build,flattened,map,result,source,null,return,result
YamlProcessor -> protected final Map<String, Object> getFlattenedMap(Map<String, Object> source);1496259743;Return a flattened version of the given map, recursively following any nested Map_or Collection values. Entries from the resulting map retain the same order as the_source. When called with the Map from a {@link MatchCallback} the result will_contain the same values as the {@link MatchCallback} Properties._@param source the source map_@return a flattened map_@since 4.1.3;protected final Map<String, Object> getFlattenedMap(Map<String, Object> source) {_		Map<String, Object> result = new LinkedHashMap<>()__		buildFlattenedMap(result, source, null)__		return result__	};return,a,flattened,version,of,the,given,map,recursively,following,any,nested,map,or,collection,values,entries,from,the,resulting,map,retain,the,same,order,as,the,source,when,called,with,the,map,from,a,link,match,callback,the,result,will,contain,the,same,values,as,the,link,match,callback,properties,param,source,the,source,map,return,a,flattened,map,since,4,1,3;protected,final,map,string,object,get,flattened,map,map,string,object,source,map,string,object,result,new,linked,hash,map,build,flattened,map,result,source,null,return,result
YamlProcessor -> protected final Map<String, Object> getFlattenedMap(Map<String, Object> source);1497250713;Return a flattened version of the given map, recursively following any nested Map_or Collection values. Entries from the resulting map retain the same order as the_source. When called with the Map from a {@link MatchCallback} the result will_contain the same values as the {@link MatchCallback} Properties._@param source the source map_@return a flattened map_@since 4.1.3;protected final Map<String, Object> getFlattenedMap(Map<String, Object> source) {_		Map<String, Object> result = new LinkedHashMap<>()__		buildFlattenedMap(result, source, null)__		return result__	};return,a,flattened,version,of,the,given,map,recursively,following,any,nested,map,or,collection,values,entries,from,the,resulting,map,retain,the,same,order,as,the,source,when,called,with,the,map,from,a,link,match,callback,the,result,will,contain,the,same,values,as,the,link,match,callback,properties,param,source,the,source,map,return,a,flattened,map,since,4,1,3;protected,final,map,string,object,get,flattened,map,map,string,object,source,map,string,object,result,new,linked,hash,map,build,flattened,map,result,source,null,return,result
YamlProcessor -> protected final Map<String, Object> getFlattenedMap(Map<String, Object> source);1522103912;Return a flattened version of the given map, recursively following any nested Map_or Collection values. Entries from the resulting map retain the same order as the_source. When called with the Map from a {@link MatchCallback} the result will_contain the same values as the {@link MatchCallback} Properties._@param source the source map_@return a flattened map_@since 4.1.3;protected final Map<String, Object> getFlattenedMap(Map<String, Object> source) {_		Map<String, Object> result = new LinkedHashMap<>()__		buildFlattenedMap(result, source, null)__		return result__	};return,a,flattened,version,of,the,given,map,recursively,following,any,nested,map,or,collection,values,entries,from,the,resulting,map,retain,the,same,order,as,the,source,when,called,with,the,map,from,a,link,match,callback,the,result,will,contain,the,same,values,as,the,link,match,callback,properties,param,source,the,source,map,return,a,flattened,map,since,4,1,3;protected,final,map,string,object,get,flattened,map,map,string,object,source,map,string,object,result,new,linked,hash,map,build,flattened,map,result,source,null,return,result
YamlProcessor -> protected final Map<String, Object> getFlattenedMap(Map<String, Object> source);1524990608;Return a flattened version of the given map, recursively following any nested Map_or Collection values. Entries from the resulting map retain the same order as the_source. When called with the Map from a {@link MatchCallback} the result will_contain the same values as the {@link MatchCallback} Properties._@param source the source map_@return a flattened map_@since 4.1.3;protected final Map<String, Object> getFlattenedMap(Map<String, Object> source) {_		Map<String, Object> result = new LinkedHashMap<>()__		buildFlattenedMap(result, source, null)__		return result__	};return,a,flattened,version,of,the,given,map,recursively,following,any,nested,map,or,collection,values,entries,from,the,resulting,map,retain,the,same,order,as,the,source,when,called,with,the,map,from,a,link,match,callback,the,result,will,contain,the,same,values,as,the,link,match,callback,properties,param,source,the,source,map,return,a,flattened,map,since,4,1,3;protected,final,map,string,object,get,flattened,map,map,string,object,source,map,string,object,result,new,linked,hash,map,build,flattened,map,result,source,null,return,result
YamlProcessor -> protected final Map<String, Object> getFlattenedMap(Map<String, Object> source);1525517231;Return a flattened version of the given map, recursively following any nested Map_or Collection values. Entries from the resulting map retain the same order as the_source. When called with the Map from a {@link MatchCallback} the result will_contain the same values as the {@link MatchCallback} Properties._@param source the source map_@return a flattened map_@since 4.1.3;protected final Map<String, Object> getFlattenedMap(Map<String, Object> source) {_		Map<String, Object> result = new LinkedHashMap<>()__		buildFlattenedMap(result, source, null)__		return result__	};return,a,flattened,version,of,the,given,map,recursively,following,any,nested,map,or,collection,values,entries,from,the,resulting,map,retain,the,same,order,as,the,source,when,called,with,the,map,from,a,link,match,callback,the,result,will,contain,the,same,values,as,the,link,match,callback,properties,param,source,the,source,map,return,a,flattened,map,since,4,1,3;protected,final,map,string,object,get,flattened,map,map,string,object,source,map,string,object,result,new,linked,hash,map,build,flattened,map,result,source,null,return,result
YamlProcessor -> protected final Map<String, Object> getFlattenedMap(Map<String, Object> source);1528313220;Return a flattened version of the given map, recursively following any nested Map_or Collection values. Entries from the resulting map retain the same order as the_source. When called with the Map from a {@link MatchCallback} the result will_contain the same values as the {@link MatchCallback} Properties._@param source the source map_@return a flattened map_@since 4.1.3;protected final Map<String, Object> getFlattenedMap(Map<String, Object> source) {_		Map<String, Object> result = new LinkedHashMap<>()__		buildFlattenedMap(result, source, null)__		return result__	};return,a,flattened,version,of,the,given,map,recursively,following,any,nested,map,or,collection,values,entries,from,the,resulting,map,retain,the,same,order,as,the,source,when,called,with,the,map,from,a,link,match,callback,the,result,will,contain,the,same,values,as,the,link,match,callback,properties,param,source,the,source,map,return,a,flattened,map,since,4,1,3;protected,final,map,string,object,get,flattened,map,map,string,object,source,map,string,object,result,new,linked,hash,map,build,flattened,map,result,source,null,return,result
YamlProcessor -> protected final Map<String, Object> getFlattenedMap(Map<String, Object> source);1528737477;Return a flattened version of the given map, recursively following any nested Map_or Collection values. Entries from the resulting map retain the same order as the_source. When called with the Map from a {@link MatchCallback} the result will_contain the same values as the {@link MatchCallback} Properties._@param source the source map_@return a flattened map_@since 4.1.3;protected final Map<String, Object> getFlattenedMap(Map<String, Object> source) {_		Map<String, Object> result = new LinkedHashMap<>()__		buildFlattenedMap(result, source, null)__		return result__	};return,a,flattened,version,of,the,given,map,recursively,following,any,nested,map,or,collection,values,entries,from,the,resulting,map,retain,the,same,order,as,the,source,when,called,with,the,map,from,a,link,match,callback,the,result,will,contain,the,same,values,as,the,link,match,callback,properties,param,source,the,source,map,return,a,flattened,map,since,4,1,3;protected,final,map,string,object,get,flattened,map,map,string,object,source,map,string,object,result,new,linked,hash,map,build,flattened,map,result,source,null,return,result
YamlProcessor -> protected final Map<String, Object> getFlattenedMap(Map<String, Object> source);1530174524;Return a flattened version of the given map, recursively following any nested Map_or Collection values. Entries from the resulting map retain the same order as the_source. When called with the Map from a {@link MatchCallback} the result will_contain the same values as the {@link MatchCallback} Properties._@param source the source map_@return a flattened map_@since 4.1.3;protected final Map<String, Object> getFlattenedMap(Map<String, Object> source) {_		Map<String, Object> result = new LinkedHashMap<>()__		buildFlattenedMap(result, source, null)__		return result__	};return,a,flattened,version,of,the,given,map,recursively,following,any,nested,map,or,collection,values,entries,from,the,resulting,map,retain,the,same,order,as,the,source,when,called,with,the,map,from,a,link,match,callback,the,result,will,contain,the,same,values,as,the,link,match,callback,properties,param,source,the,source,map,return,a,flattened,map,since,4,1,3;protected,final,map,string,object,get,flattened,map,map,string,object,source,map,string,object,result,new,linked,hash,map,build,flattened,map,result,source,null,return,result
