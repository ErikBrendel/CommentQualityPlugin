# id;timestamp;commentText;codeText;commentWords;codeWords
ArgumentConvertingMethodInvoker -> protected Method doFindMatchingMethod(Object[] arguments);1328020251;Actually find a method with matching parameter type, i.e. where each_argument value is assignable to the corresponding parameter type._@param arguments the argument values to match against method parameters_@return a matching method, or <code>null</code> if none;protected Method doFindMatchingMethod(Object[] arguments) {_		TypeConverter converter = getTypeConverter()__		if (converter != null) {_			String targetMethod = getTargetMethod()__			Method matchingMethod = null__			int argCount = arguments.length__			Method[] candidates = ReflectionUtils.getAllDeclaredMethods(getTargetClass())__			int minTypeDiffWeight = Integer.MAX_VALUE__			Object[] argumentsToUse = null__			for (Method candidate : candidates) {_				if (candidate.getName().equals(targetMethod)) {_					_					Class[] paramTypes = candidate.getParameterTypes()__					if (paramTypes.length == argCount) {_						Object[] convertedArguments = new Object[argCount]__						boolean match = true__						for (int j = 0_ j < argCount && match_ j++) {_							_							try {_								convertedArguments[j] = converter.convertIfNecessary(arguments[j], paramTypes[j])__							}_							catch (TypeMismatchException ex) {_								_								match = false__							}_						}_						if (match) {_							int typeDiffWeight = getTypeDifferenceWeight(paramTypes, convertedArguments)__							if (typeDiffWeight < minTypeDiffWeight) {_								minTypeDiffWeight = typeDiffWeight__								matchingMethod = candidate__								argumentsToUse = convertedArguments__							}_						}_					}_				}_			}_			if (matchingMethod != null) {_				setArguments(argumentsToUse)__				return matchingMethod__			}_		}_		return null__	};actually,find,a,method,with,matching,parameter,type,i,e,where,each,argument,value,is,assignable,to,the,corresponding,parameter,type,param,arguments,the,argument,values,to,match,against,method,parameters,return,a,matching,method,or,code,null,code,if,none;protected,method,do,find,matching,method,object,arguments,type,converter,converter,get,type,converter,if,converter,null,string,target,method,get,target,method,method,matching,method,null,int,arg,count,arguments,length,method,candidates,reflection,utils,get,all,declared,methods,get,target,class,int,min,type,diff,weight,integer,object,arguments,to,use,null,for,method,candidate,candidates,if,candidate,get,name,equals,target,method,class,param,types,candidate,get,parameter,types,if,param,types,length,arg,count,object,converted,arguments,new,object,arg,count,boolean,match,true,for,int,j,0,j,arg,count,match,j,try,converted,arguments,j,converter,convert,if,necessary,arguments,j,param,types,j,catch,type,mismatch,exception,ex,match,false,if,match,int,type,diff,weight,get,type,difference,weight,param,types,converted,arguments,if,type,diff,weight,min,type,diff,weight,min,type,diff,weight,type,diff,weight,matching,method,candidate,arguments,to,use,converted,arguments,if,matching,method,null,set,arguments,arguments,to,use,return,matching,method,return,null
ArgumentConvertingMethodInvoker -> protected Method doFindMatchingMethod(Object[] arguments);1356735495;Actually find a method with matching parameter type, i.e. where each_argument value is assignable to the corresponding parameter type._@param arguments the argument values to match against method parameters_@return a matching method, or {@code null} if none;protected Method doFindMatchingMethod(Object[] arguments) {_		TypeConverter converter = getTypeConverter()__		if (converter != null) {_			String targetMethod = getTargetMethod()__			Method matchingMethod = null__			int argCount = arguments.length__			Method[] candidates = ReflectionUtils.getAllDeclaredMethods(getTargetClass())__			int minTypeDiffWeight = Integer.MAX_VALUE__			Object[] argumentsToUse = null__			for (Method candidate : candidates) {_				if (candidate.getName().equals(targetMethod)) {_					_					Class[] paramTypes = candidate.getParameterTypes()__					if (paramTypes.length == argCount) {_						Object[] convertedArguments = new Object[argCount]__						boolean match = true__						for (int j = 0_ j < argCount && match_ j++) {_							_							try {_								convertedArguments[j] = converter.convertIfNecessary(arguments[j], paramTypes[j])__							}_							catch (TypeMismatchException ex) {_								_								match = false__							}_						}_						if (match) {_							int typeDiffWeight = getTypeDifferenceWeight(paramTypes, convertedArguments)__							if (typeDiffWeight < minTypeDiffWeight) {_								minTypeDiffWeight = typeDiffWeight__								matchingMethod = candidate__								argumentsToUse = convertedArguments__							}_						}_					}_				}_			}_			if (matchingMethod != null) {_				setArguments(argumentsToUse)__				return matchingMethod__			}_		}_		return null__	};actually,find,a,method,with,matching,parameter,type,i,e,where,each,argument,value,is,assignable,to,the,corresponding,parameter,type,param,arguments,the,argument,values,to,match,against,method,parameters,return,a,matching,method,or,code,null,if,none;protected,method,do,find,matching,method,object,arguments,type,converter,converter,get,type,converter,if,converter,null,string,target,method,get,target,method,method,matching,method,null,int,arg,count,arguments,length,method,candidates,reflection,utils,get,all,declared,methods,get,target,class,int,min,type,diff,weight,integer,object,arguments,to,use,null,for,method,candidate,candidates,if,candidate,get,name,equals,target,method,class,param,types,candidate,get,parameter,types,if,param,types,length,arg,count,object,converted,arguments,new,object,arg,count,boolean,match,true,for,int,j,0,j,arg,count,match,j,try,converted,arguments,j,converter,convert,if,necessary,arguments,j,param,types,j,catch,type,mismatch,exception,ex,match,false,if,match,int,type,diff,weight,get,type,difference,weight,param,types,converted,arguments,if,type,diff,weight,min,type,diff,weight,min,type,diff,weight,type,diff,weight,matching,method,candidate,arguments,to,use,converted,arguments,if,matching,method,null,set,arguments,arguments,to,use,return,matching,method,return,null
ArgumentConvertingMethodInvoker -> protected Method doFindMatchingMethod(Object[] arguments);1385412762;Actually find a method with matching parameter type, i.e. where each_argument value is assignable to the corresponding parameter type._@param arguments the argument values to match against method parameters_@return a matching method, or {@code null} if none;protected Method doFindMatchingMethod(Object[] arguments) {_		TypeConverter converter = getTypeConverter()__		if (converter != null) {_			String targetMethod = getTargetMethod()__			Method matchingMethod = null__			int argCount = arguments.length__			Method[] candidates = ReflectionUtils.getAllDeclaredMethods(getTargetClass())__			int minTypeDiffWeight = Integer.MAX_VALUE__			Object[] argumentsToUse = null__			for (Method candidate : candidates) {_				if (candidate.getName().equals(targetMethod)) {_					_					Class<?>[] paramTypes = candidate.getParameterTypes()__					if (paramTypes.length == argCount) {_						Object[] convertedArguments = new Object[argCount]__						boolean match = true__						for (int j = 0_ j < argCount && match_ j++) {_							_							try {_								convertedArguments[j] = converter.convertIfNecessary(arguments[j], paramTypes[j])__							}_							catch (TypeMismatchException ex) {_								_								match = false__							}_						}_						if (match) {_							int typeDiffWeight = getTypeDifferenceWeight(paramTypes, convertedArguments)__							if (typeDiffWeight < minTypeDiffWeight) {_								minTypeDiffWeight = typeDiffWeight__								matchingMethod = candidate__								argumentsToUse = convertedArguments__							}_						}_					}_				}_			}_			if (matchingMethod != null) {_				setArguments(argumentsToUse)__				return matchingMethod__			}_		}_		return null__	};actually,find,a,method,with,matching,parameter,type,i,e,where,each,argument,value,is,assignable,to,the,corresponding,parameter,type,param,arguments,the,argument,values,to,match,against,method,parameters,return,a,matching,method,or,code,null,if,none;protected,method,do,find,matching,method,object,arguments,type,converter,converter,get,type,converter,if,converter,null,string,target,method,get,target,method,method,matching,method,null,int,arg,count,arguments,length,method,candidates,reflection,utils,get,all,declared,methods,get,target,class,int,min,type,diff,weight,integer,object,arguments,to,use,null,for,method,candidate,candidates,if,candidate,get,name,equals,target,method,class,param,types,candidate,get,parameter,types,if,param,types,length,arg,count,object,converted,arguments,new,object,arg,count,boolean,match,true,for,int,j,0,j,arg,count,match,j,try,converted,arguments,j,converter,convert,if,necessary,arguments,j,param,types,j,catch,type,mismatch,exception,ex,match,false,if,match,int,type,diff,weight,get,type,difference,weight,param,types,converted,arguments,if,type,diff,weight,min,type,diff,weight,min,type,diff,weight,type,diff,weight,matching,method,candidate,arguments,to,use,converted,arguments,if,matching,method,null,set,arguments,arguments,to,use,return,matching,method,return,null
ArgumentConvertingMethodInvoker -> public TypeConverter getTypeConverter();1328020251;Return the TypeConverter used for argument type conversion._<p>Can be cast to {@link org.springframework.beans.PropertyEditorRegistry}_if direct access to the underlying PropertyEditors is desired_(provided that the present TypeConverter actually implements the_PropertyEditorRegistry interface).;public TypeConverter getTypeConverter() {_		if (this.typeConverter == null && this.useDefaultConverter) {_			this.typeConverter = getDefaultTypeConverter()__		}_		return this.typeConverter__	};return,the,type,converter,used,for,argument,type,conversion,p,can,be,cast,to,link,org,springframework,beans,property,editor,registry,if,direct,access,to,the,underlying,property,editors,is,desired,provided,that,the,present,type,converter,actually,implements,the,property,editor,registry,interface;public,type,converter,get,type,converter,if,this,type,converter,null,this,use,default,converter,this,type,converter,get,default,type,converter,return,this,type,converter
ArgumentConvertingMethodInvoker -> public TypeConverter getTypeConverter();1356735495;Return the TypeConverter used for argument type conversion._<p>Can be cast to {@link org.springframework.beans.PropertyEditorRegistry}_if direct access to the underlying PropertyEditors is desired_(provided that the present TypeConverter actually implements the_PropertyEditorRegistry interface).;public TypeConverter getTypeConverter() {_		if (this.typeConverter == null && this.useDefaultConverter) {_			this.typeConverter = getDefaultTypeConverter()__		}_		return this.typeConverter__	};return,the,type,converter,used,for,argument,type,conversion,p,can,be,cast,to,link,org,springframework,beans,property,editor,registry,if,direct,access,to,the,underlying,property,editors,is,desired,provided,that,the,present,type,converter,actually,implements,the,property,editor,registry,interface;public,type,converter,get,type,converter,if,this,type,converter,null,this,use,default,converter,this,type,converter,get,default,type,converter,return,this,type,converter
ArgumentConvertingMethodInvoker -> public TypeConverter getTypeConverter();1385412762;Return the TypeConverter used for argument type conversion._<p>Can be cast to {@link org.springframework.beans.PropertyEditorRegistry}_if direct access to the underlying PropertyEditors is desired_(provided that the present TypeConverter actually implements the_PropertyEditorRegistry interface).;public TypeConverter getTypeConverter() {_		if (this.typeConverter == null && this.useDefaultConverter) {_			this.typeConverter = getDefaultTypeConverter()__		}_		return this.typeConverter__	};return,the,type,converter,used,for,argument,type,conversion,p,can,be,cast,to,link,org,springframework,beans,property,editor,registry,if,direct,access,to,the,underlying,property,editors,is,desired,provided,that,the,present,type,converter,actually,implements,the,property,editor,registry,interface;public,type,converter,get,type,converter,if,this,type,converter,null,this,use,default,converter,this,type,converter,get,default,type,converter,return,this,type,converter
ArgumentConvertingMethodInvoker -> public TypeConverter getTypeConverter();1495868221;Return the TypeConverter used for argument type conversion._<p>Can be cast to {@link org.springframework.beans.PropertyEditorRegistry}_if direct access to the underlying PropertyEditors is desired_(provided that the present TypeConverter actually implements the_PropertyEditorRegistry interface).;public TypeConverter getTypeConverter() {_		if (this.typeConverter == null && this.useDefaultConverter) {_			this.typeConverter = getDefaultTypeConverter()__		}_		return this.typeConverter__	};return,the,type,converter,used,for,argument,type,conversion,p,can,be,cast,to,link,org,springframework,beans,property,editor,registry,if,direct,access,to,the,underlying,property,editors,is,desired,provided,that,the,present,type,converter,actually,implements,the,property,editor,registry,interface;public,type,converter,get,type,converter,if,this,type,converter,null,this,use,default,converter,this,type,converter,get,default,type,converter,return,this,type,converter
ArgumentConvertingMethodInvoker -> public void registerCustomEditor(Class<?> requiredType, PropertyEditor propertyEditor);1385412762;Register the given custom property editor for all properties of the given type._<p>Typically used in conjunction with the default_{@link org.springframework.beans.SimpleTypeConverter}_ will work with any_TypeConverter that implements the PropertyEditorRegistry interface as well._@param requiredType type of the property_@param propertyEditor editor to register_@see #setTypeConverter_@see org.springframework.beans.PropertyEditorRegistry#registerCustomEditor;public void registerCustomEditor(Class<?> requiredType, PropertyEditor propertyEditor) {_		TypeConverter converter = getTypeConverter()__		if (!(converter instanceof PropertyEditorRegistry)) {_			throw new IllegalStateException(_					"TypeConverter does not implement PropertyEditorRegistry interface: " + converter)__		}_		((PropertyEditorRegistry) converter).registerCustomEditor(requiredType, propertyEditor)__	};register,the,given,custom,property,editor,for,all,properties,of,the,given,type,p,typically,used,in,conjunction,with,the,default,link,org,springframework,beans,simple,type,converter,will,work,with,any,type,converter,that,implements,the,property,editor,registry,interface,as,well,param,required,type,type,of,the,property,param,property,editor,editor,to,register,see,set,type,converter,see,org,springframework,beans,property,editor,registry,register,custom,editor;public,void,register,custom,editor,class,required,type,property,editor,property,editor,type,converter,converter,get,type,converter,if,converter,instanceof,property,editor,registry,throw,new,illegal,state,exception,type,converter,does,not,implement,property,editor,registry,interface,converter,property,editor,registry,converter,register,custom,editor,required,type,property,editor
ArgumentConvertingMethodInvoker -> public void registerCustomEditor(Class<?> requiredType, PropertyEditor propertyEditor);1495868221;Register the given custom property editor for all properties of the given type._<p>Typically used in conjunction with the default_{@link org.springframework.beans.SimpleTypeConverter}_ will work with any_TypeConverter that implements the PropertyEditorRegistry interface as well._@param requiredType type of the property_@param propertyEditor editor to register_@see #setTypeConverter_@see org.springframework.beans.PropertyEditorRegistry#registerCustomEditor;public void registerCustomEditor(Class<?> requiredType, PropertyEditor propertyEditor) {_		TypeConverter converter = getTypeConverter()__		if (!(converter instanceof PropertyEditorRegistry)) {_			throw new IllegalStateException(_					"TypeConverter does not implement PropertyEditorRegistry interface: " + converter)__		}_		((PropertyEditorRegistry) converter).registerCustomEditor(requiredType, propertyEditor)__	};register,the,given,custom,property,editor,for,all,properties,of,the,given,type,p,typically,used,in,conjunction,with,the,default,link,org,springframework,beans,simple,type,converter,will,work,with,any,type,converter,that,implements,the,property,editor,registry,interface,as,well,param,required,type,type,of,the,property,param,property,editor,editor,to,register,see,set,type,converter,see,org,springframework,beans,property,editor,registry,register,custom,editor;public,void,register,custom,editor,class,required,type,property,editor,property,editor,type,converter,converter,get,type,converter,if,converter,instanceof,property,editor,registry,throw,new,illegal,state,exception,type,converter,does,not,implement,property,editor,registry,interface,converter,property,editor,registry,converter,register,custom,editor,required,type,property,editor
ArgumentConvertingMethodInvoker -> public void registerCustomEditor(Class<?> requiredType, PropertyEditor propertyEditor);1496837955;Register the given custom property editor for all properties of the given type._<p>Typically used in conjunction with the default_{@link org.springframework.beans.SimpleTypeConverter}_ will work with any_TypeConverter that implements the PropertyEditorRegistry interface as well._@param requiredType type of the property_@param propertyEditor editor to register_@see #setTypeConverter_@see org.springframework.beans.PropertyEditorRegistry#registerCustomEditor;public void registerCustomEditor(Class<?> requiredType, PropertyEditor propertyEditor) {_		TypeConverter converter = getTypeConverter()__		if (!(converter instanceof PropertyEditorRegistry)) {_			throw new IllegalStateException(_					"TypeConverter does not implement PropertyEditorRegistry interface: " + converter)__		}_		((PropertyEditorRegistry) converter).registerCustomEditor(requiredType, propertyEditor)__	};register,the,given,custom,property,editor,for,all,properties,of,the,given,type,p,typically,used,in,conjunction,with,the,default,link,org,springframework,beans,simple,type,converter,will,work,with,any,type,converter,that,implements,the,property,editor,registry,interface,as,well,param,required,type,type,of,the,property,param,property,editor,editor,to,register,see,set,type,converter,see,org,springframework,beans,property,editor,registry,register,custom,editor;public,void,register,custom,editor,class,required,type,property,editor,property,editor,type,converter,converter,get,type,converter,if,converter,instanceof,property,editor,registry,throw,new,illegal,state,exception,type,converter,does,not,implement,property,editor,registry,interface,converter,property,editor,registry,converter,register,custom,editor,required,type,property,editor
ArgumentConvertingMethodInvoker -> public void registerCustomEditor(Class<?> requiredType, PropertyEditor propertyEditor);1498780456;Register the given custom property editor for all properties of the given type._<p>Typically used in conjunction with the default_{@link org.springframework.beans.SimpleTypeConverter}_ will work with any_TypeConverter that implements the PropertyEditorRegistry interface as well._@param requiredType type of the property_@param propertyEditor editor to register_@see #setTypeConverter_@see org.springframework.beans.PropertyEditorRegistry#registerCustomEditor;public void registerCustomEditor(Class<?> requiredType, PropertyEditor propertyEditor) {_		TypeConverter converter = getTypeConverter()__		if (!(converter instanceof PropertyEditorRegistry)) {_			throw new IllegalStateException(_					"TypeConverter does not implement PropertyEditorRegistry interface: " + converter)__		}_		((PropertyEditorRegistry) converter).registerCustomEditor(requiredType, propertyEditor)__	};register,the,given,custom,property,editor,for,all,properties,of,the,given,type,p,typically,used,in,conjunction,with,the,default,link,org,springframework,beans,simple,type,converter,will,work,with,any,type,converter,that,implements,the,property,editor,registry,interface,as,well,param,required,type,type,of,the,property,param,property,editor,editor,to,register,see,set,type,converter,see,org,springframework,beans,property,editor,registry,register,custom,editor;public,void,register,custom,editor,class,required,type,property,editor,property,editor,type,converter,converter,get,type,converter,if,converter,instanceof,property,editor,registry,throw,new,illegal,state,exception,type,converter,does,not,implement,property,editor,registry,interface,converter,property,editor,registry,converter,register,custom,editor,required,type,property,editor
ArgumentConvertingMethodInvoker -> public void registerCustomEditor(Class<?> requiredType, PropertyEditor propertyEditor);1500448076;Register the given custom property editor for all properties of the given type._<p>Typically used in conjunction with the default_{@link org.springframework.beans.SimpleTypeConverter}_ will work with any_TypeConverter that implements the PropertyEditorRegistry interface as well._@param requiredType type of the property_@param propertyEditor editor to register_@see #setTypeConverter_@see org.springframework.beans.PropertyEditorRegistry#registerCustomEditor;public void registerCustomEditor(Class<?> requiredType, PropertyEditor propertyEditor) {_		TypeConverter converter = getTypeConverter()__		if (!(converter instanceof PropertyEditorRegistry)) {_			throw new IllegalStateException(_					"TypeConverter does not implement PropertyEditorRegistry interface: " + converter)__		}_		((PropertyEditorRegistry) converter).registerCustomEditor(requiredType, propertyEditor)__	};register,the,given,custom,property,editor,for,all,properties,of,the,given,type,p,typically,used,in,conjunction,with,the,default,link,org,springframework,beans,simple,type,converter,will,work,with,any,type,converter,that,implements,the,property,editor,registry,interface,as,well,param,required,type,type,of,the,property,param,property,editor,editor,to,register,see,set,type,converter,see,org,springframework,beans,property,editor,registry,register,custom,editor;public,void,register,custom,editor,class,required,type,property,editor,property,editor,type,converter,converter,get,type,converter,if,converter,instanceof,property,editor,registry,throw,new,illegal,state,exception,type,converter,does,not,implement,property,editor,registry,interface,converter,property,editor,registry,converter,register,custom,editor,required,type,property,editor
ArgumentConvertingMethodInvoker -> @Nullable 	public TypeConverter getTypeConverter();1496837955;Return the TypeConverter used for argument type conversion._<p>Can be cast to {@link org.springframework.beans.PropertyEditorRegistry}_if direct access to the underlying PropertyEditors is desired_(provided that the present TypeConverter actually implements the_PropertyEditorRegistry interface).;@Nullable_	public TypeConverter getTypeConverter() {_		if (this.typeConverter == null && this.useDefaultConverter) {_			this.typeConverter = getDefaultTypeConverter()__		}_		return this.typeConverter__	};return,the,type,converter,used,for,argument,type,conversion,p,can,be,cast,to,link,org,springframework,beans,property,editor,registry,if,direct,access,to,the,underlying,property,editors,is,desired,provided,that,the,present,type,converter,actually,implements,the,property,editor,registry,interface;nullable,public,type,converter,get,type,converter,if,this,type,converter,null,this,use,default,converter,this,type,converter,get,default,type,converter,return,this,type,converter
ArgumentConvertingMethodInvoker -> @Nullable 	public TypeConverter getTypeConverter();1498780456;Return the TypeConverter used for argument type conversion._<p>Can be cast to {@link org.springframework.beans.PropertyEditorRegistry}_if direct access to the underlying PropertyEditors is desired_(provided that the present TypeConverter actually implements the_PropertyEditorRegistry interface).;@Nullable_	public TypeConverter getTypeConverter() {_		if (this.typeConverter == null && this.useDefaultConverter) {_			this.typeConverter = getDefaultTypeConverter()__		}_		return this.typeConverter__	};return,the,type,converter,used,for,argument,type,conversion,p,can,be,cast,to,link,org,springframework,beans,property,editor,registry,if,direct,access,to,the,underlying,property,editors,is,desired,provided,that,the,present,type,converter,actually,implements,the,property,editor,registry,interface;nullable,public,type,converter,get,type,converter,if,this,type,converter,null,this,use,default,converter,this,type,converter,get,default,type,converter,return,this,type,converter
ArgumentConvertingMethodInvoker -> @Nullable 	public TypeConverter getTypeConverter();1500448076;Return the TypeConverter used for argument type conversion._<p>Can be cast to {@link org.springframework.beans.PropertyEditorRegistry}_if direct access to the underlying PropertyEditors is desired_(provided that the present TypeConverter actually implements the_PropertyEditorRegistry interface).;@Nullable_	public TypeConverter getTypeConverter() {_		if (this.typeConverter == null && this.useDefaultConverter) {_			this.typeConverter = getDefaultTypeConverter()__		}_		return this.typeConverter__	};return,the,type,converter,used,for,argument,type,conversion,p,can,be,cast,to,link,org,springframework,beans,property,editor,registry,if,direct,access,to,the,underlying,property,editors,is,desired,provided,that,the,present,type,converter,actually,implements,the,property,editor,registry,interface;nullable,public,type,converter,get,type,converter,if,this,type,converter,null,this,use,default,converter,this,type,converter,get,default,type,converter,return,this,type,converter
ArgumentConvertingMethodInvoker -> public void setTypeConverter(TypeConverter typeConverter);1328020251;Set a TypeConverter to use for argument type conversion._<p>Default is a {@link org.springframework.beans.SimpleTypeConverter}._Can be overridden with any TypeConverter implementation, typically_a pre-configured SimpleTypeConverter or a BeanWrapperImpl instance._@see org.springframework.beans.SimpleTypeConverter_@see org.springframework.beans.BeanWrapperImpl;public void setTypeConverter(TypeConverter typeConverter) {_		this.typeConverter = typeConverter__		this.useDefaultConverter = false__	};set,a,type,converter,to,use,for,argument,type,conversion,p,default,is,a,link,org,springframework,beans,simple,type,converter,can,be,overridden,with,any,type,converter,implementation,typically,a,pre,configured,simple,type,converter,or,a,bean,wrapper,impl,instance,see,org,springframework,beans,simple,type,converter,see,org,springframework,beans,bean,wrapper,impl;public,void,set,type,converter,type,converter,type,converter,this,type,converter,type,converter,this,use,default,converter,false
ArgumentConvertingMethodInvoker -> public void setTypeConverter(TypeConverter typeConverter);1356735495;Set a TypeConverter to use for argument type conversion._<p>Default is a {@link org.springframework.beans.SimpleTypeConverter}._Can be overridden with any TypeConverter implementation, typically_a pre-configured SimpleTypeConverter or a BeanWrapperImpl instance._@see org.springframework.beans.SimpleTypeConverter_@see org.springframework.beans.BeanWrapperImpl;public void setTypeConverter(TypeConverter typeConverter) {_		this.typeConverter = typeConverter__		this.useDefaultConverter = false__	};set,a,type,converter,to,use,for,argument,type,conversion,p,default,is,a,link,org,springframework,beans,simple,type,converter,can,be,overridden,with,any,type,converter,implementation,typically,a,pre,configured,simple,type,converter,or,a,bean,wrapper,impl,instance,see,org,springframework,beans,simple,type,converter,see,org,springframework,beans,bean,wrapper,impl;public,void,set,type,converter,type,converter,type,converter,this,type,converter,type,converter,this,use,default,converter,false
ArgumentConvertingMethodInvoker -> public void setTypeConverter(TypeConverter typeConverter);1385412762;Set a TypeConverter to use for argument type conversion._<p>Default is a {@link org.springframework.beans.SimpleTypeConverter}._Can be overridden with any TypeConverter implementation, typically_a pre-configured SimpleTypeConverter or a BeanWrapperImpl instance._@see org.springframework.beans.SimpleTypeConverter_@see org.springframework.beans.BeanWrapperImpl;public void setTypeConverter(TypeConverter typeConverter) {_		this.typeConverter = typeConverter__		this.useDefaultConverter = false__	};set,a,type,converter,to,use,for,argument,type,conversion,p,default,is,a,link,org,springframework,beans,simple,type,converter,can,be,overridden,with,any,type,converter,implementation,typically,a,pre,configured,simple,type,converter,or,a,bean,wrapper,impl,instance,see,org,springframework,beans,simple,type,converter,see,org,springframework,beans,bean,wrapper,impl;public,void,set,type,converter,type,converter,type,converter,this,type,converter,type,converter,this,use,default,converter,false
ArgumentConvertingMethodInvoker -> public void setTypeConverter(TypeConverter typeConverter);1495868221;Set a TypeConverter to use for argument type conversion._<p>Default is a {@link org.springframework.beans.SimpleTypeConverter}._Can be overridden with any TypeConverter implementation, typically_a pre-configured SimpleTypeConverter or a BeanWrapperImpl instance._@see org.springframework.beans.SimpleTypeConverter_@see org.springframework.beans.BeanWrapperImpl;public void setTypeConverter(TypeConverter typeConverter) {_		this.typeConverter = typeConverter__		this.useDefaultConverter = false__	};set,a,type,converter,to,use,for,argument,type,conversion,p,default,is,a,link,org,springframework,beans,simple,type,converter,can,be,overridden,with,any,type,converter,implementation,typically,a,pre,configured,simple,type,converter,or,a,bean,wrapper,impl,instance,see,org,springframework,beans,simple,type,converter,see,org,springframework,beans,bean,wrapper,impl;public,void,set,type,converter,type,converter,type,converter,this,type,converter,type,converter,this,use,default,converter,false
ArgumentConvertingMethodInvoker -> public void setTypeConverter(TypeConverter typeConverter);1496837955;Set a TypeConverter to use for argument type conversion._<p>Default is a {@link org.springframework.beans.SimpleTypeConverter}._Can be overridden with any TypeConverter implementation, typically_a pre-configured SimpleTypeConverter or a BeanWrapperImpl instance._@see org.springframework.beans.SimpleTypeConverter_@see org.springframework.beans.BeanWrapperImpl;public void setTypeConverter(TypeConverter typeConverter) {_		this.typeConverter = typeConverter__		this.useDefaultConverter = false__	};set,a,type,converter,to,use,for,argument,type,conversion,p,default,is,a,link,org,springframework,beans,simple,type,converter,can,be,overridden,with,any,type,converter,implementation,typically,a,pre,configured,simple,type,converter,or,a,bean,wrapper,impl,instance,see,org,springframework,beans,simple,type,converter,see,org,springframework,beans,bean,wrapper,impl;public,void,set,type,converter,type,converter,type,converter,this,type,converter,type,converter,this,use,default,converter,false
ArgumentConvertingMethodInvoker -> public void setTypeConverter(TypeConverter typeConverter);1498780456;Set a TypeConverter to use for argument type conversion._<p>Default is a {@link org.springframework.beans.SimpleTypeConverter}._Can be overridden with any TypeConverter implementation, typically_a pre-configured SimpleTypeConverter or a BeanWrapperImpl instance._@see org.springframework.beans.SimpleTypeConverter_@see org.springframework.beans.BeanWrapperImpl;public void setTypeConverter(TypeConverter typeConverter) {_		this.typeConverter = typeConverter__		this.useDefaultConverter = false__	};set,a,type,converter,to,use,for,argument,type,conversion,p,default,is,a,link,org,springframework,beans,simple,type,converter,can,be,overridden,with,any,type,converter,implementation,typically,a,pre,configured,simple,type,converter,or,a,bean,wrapper,impl,instance,see,org,springframework,beans,simple,type,converter,see,org,springframework,beans,bean,wrapper,impl;public,void,set,type,converter,type,converter,type,converter,this,type,converter,type,converter,this,use,default,converter,false
ArgumentConvertingMethodInvoker -> protected TypeConverter getDefaultTypeConverter();1328020251;Obtain the default TypeConverter for this method invoker._<p>Called if no explicit TypeConverter has been specified._The default implementation builds a_{@link org.springframework.beans.SimpleTypeConverter}._Can be overridden in subclasses.;protected TypeConverter getDefaultTypeConverter() {_		return new SimpleTypeConverter()__	};obtain,the,default,type,converter,for,this,method,invoker,p,called,if,no,explicit,type,converter,has,been,specified,the,default,implementation,builds,a,link,org,springframework,beans,simple,type,converter,can,be,overridden,in,subclasses;protected,type,converter,get,default,type,converter,return,new,simple,type,converter
ArgumentConvertingMethodInvoker -> protected TypeConverter getDefaultTypeConverter();1356735495;Obtain the default TypeConverter for this method invoker._<p>Called if no explicit TypeConverter has been specified._The default implementation builds a_{@link org.springframework.beans.SimpleTypeConverter}._Can be overridden in subclasses.;protected TypeConverter getDefaultTypeConverter() {_		return new SimpleTypeConverter()__	};obtain,the,default,type,converter,for,this,method,invoker,p,called,if,no,explicit,type,converter,has,been,specified,the,default,implementation,builds,a,link,org,springframework,beans,simple,type,converter,can,be,overridden,in,subclasses;protected,type,converter,get,default,type,converter,return,new,simple,type,converter
ArgumentConvertingMethodInvoker -> protected TypeConverter getDefaultTypeConverter();1385412762;Obtain the default TypeConverter for this method invoker._<p>Called if no explicit TypeConverter has been specified._The default implementation builds a_{@link org.springframework.beans.SimpleTypeConverter}._Can be overridden in subclasses.;protected TypeConverter getDefaultTypeConverter() {_		return new SimpleTypeConverter()__	};obtain,the,default,type,converter,for,this,method,invoker,p,called,if,no,explicit,type,converter,has,been,specified,the,default,implementation,builds,a,link,org,springframework,beans,simple,type,converter,can,be,overridden,in,subclasses;protected,type,converter,get,default,type,converter,return,new,simple,type,converter
ArgumentConvertingMethodInvoker -> protected TypeConverter getDefaultTypeConverter();1495868221;Obtain the default TypeConverter for this method invoker._<p>Called if no explicit TypeConverter has been specified._The default implementation builds a_{@link org.springframework.beans.SimpleTypeConverter}._Can be overridden in subclasses.;protected TypeConverter getDefaultTypeConverter() {_		return new SimpleTypeConverter()__	};obtain,the,default,type,converter,for,this,method,invoker,p,called,if,no,explicit,type,converter,has,been,specified,the,default,implementation,builds,a,link,org,springframework,beans,simple,type,converter,can,be,overridden,in,subclasses;protected,type,converter,get,default,type,converter,return,new,simple,type,converter
ArgumentConvertingMethodInvoker -> protected TypeConverter getDefaultTypeConverter();1496837955;Obtain the default TypeConverter for this method invoker._<p>Called if no explicit TypeConverter has been specified._The default implementation builds a_{@link org.springframework.beans.SimpleTypeConverter}._Can be overridden in subclasses.;protected TypeConverter getDefaultTypeConverter() {_		return new SimpleTypeConverter()__	};obtain,the,default,type,converter,for,this,method,invoker,p,called,if,no,explicit,type,converter,has,been,specified,the,default,implementation,builds,a,link,org,springframework,beans,simple,type,converter,can,be,overridden,in,subclasses;protected,type,converter,get,default,type,converter,return,new,simple,type,converter
ArgumentConvertingMethodInvoker -> protected TypeConverter getDefaultTypeConverter();1498780456;Obtain the default TypeConverter for this method invoker._<p>Called if no explicit TypeConverter has been specified._The default implementation builds a_{@link org.springframework.beans.SimpleTypeConverter}._Can be overridden in subclasses.;protected TypeConverter getDefaultTypeConverter() {_		return new SimpleTypeConverter()__	};obtain,the,default,type,converter,for,this,method,invoker,p,called,if,no,explicit,type,converter,has,been,specified,the,default,implementation,builds,a,link,org,springframework,beans,simple,type,converter,can,be,overridden,in,subclasses;protected,type,converter,get,default,type,converter,return,new,simple,type,converter
ArgumentConvertingMethodInvoker -> protected TypeConverter getDefaultTypeConverter();1500448076;Obtain the default TypeConverter for this method invoker._<p>Called if no explicit TypeConverter has been specified._The default implementation builds a_{@link org.springframework.beans.SimpleTypeConverter}._Can be overridden in subclasses.;protected TypeConverter getDefaultTypeConverter() {_		return new SimpleTypeConverter()__	};obtain,the,default,type,converter,for,this,method,invoker,p,called,if,no,explicit,type,converter,has,been,specified,the,default,implementation,builds,a,link,org,springframework,beans,simple,type,converter,can,be,overridden,in,subclasses;protected,type,converter,get,default,type,converter,return,new,simple,type,converter
ArgumentConvertingMethodInvoker -> public void registerCustomEditor(Class requiredType, PropertyEditor propertyEditor);1328020251;Register the given custom property editor for all properties of the given type._<p>Typically used in conjunction with the default_{@link org.springframework.beans.SimpleTypeConverter}_ will work with any_TypeConverter that implements the PropertyEditorRegistry interface as well._@param requiredType type of the property_@param propertyEditor editor to register_@see #setTypeConverter_@see org.springframework.beans.PropertyEditorRegistry#registerCustomEditor;public void registerCustomEditor(Class requiredType, PropertyEditor propertyEditor) {_		TypeConverter converter = getTypeConverter()__		if (!(converter instanceof PropertyEditorRegistry)) {_			throw new IllegalStateException(_					"TypeConverter does not implement PropertyEditorRegistry interface: " + converter)__		}_		((PropertyEditorRegistry) converter).registerCustomEditor(requiredType, propertyEditor)__	};register,the,given,custom,property,editor,for,all,properties,of,the,given,type,p,typically,used,in,conjunction,with,the,default,link,org,springframework,beans,simple,type,converter,will,work,with,any,type,converter,that,implements,the,property,editor,registry,interface,as,well,param,required,type,type,of,the,property,param,property,editor,editor,to,register,see,set,type,converter,see,org,springframework,beans,property,editor,registry,register,custom,editor;public,void,register,custom,editor,class,required,type,property,editor,property,editor,type,converter,converter,get,type,converter,if,converter,instanceof,property,editor,registry,throw,new,illegal,state,exception,type,converter,does,not,implement,property,editor,registry,interface,converter,property,editor,registry,converter,register,custom,editor,required,type,property,editor
ArgumentConvertingMethodInvoker -> public void registerCustomEditor(Class requiredType, PropertyEditor propertyEditor);1356735495;Register the given custom property editor for all properties of the given type._<p>Typically used in conjunction with the default_{@link org.springframework.beans.SimpleTypeConverter}_ will work with any_TypeConverter that implements the PropertyEditorRegistry interface as well._@param requiredType type of the property_@param propertyEditor editor to register_@see #setTypeConverter_@see org.springframework.beans.PropertyEditorRegistry#registerCustomEditor;public void registerCustomEditor(Class requiredType, PropertyEditor propertyEditor) {_		TypeConverter converter = getTypeConverter()__		if (!(converter instanceof PropertyEditorRegistry)) {_			throw new IllegalStateException(_					"TypeConverter does not implement PropertyEditorRegistry interface: " + converter)__		}_		((PropertyEditorRegistry) converter).registerCustomEditor(requiredType, propertyEditor)__	};register,the,given,custom,property,editor,for,all,properties,of,the,given,type,p,typically,used,in,conjunction,with,the,default,link,org,springframework,beans,simple,type,converter,will,work,with,any,type,converter,that,implements,the,property,editor,registry,interface,as,well,param,required,type,type,of,the,property,param,property,editor,editor,to,register,see,set,type,converter,see,org,springframework,beans,property,editor,registry,register,custom,editor;public,void,register,custom,editor,class,required,type,property,editor,property,editor,type,converter,converter,get,type,converter,if,converter,instanceof,property,editor,registry,throw,new,illegal,state,exception,type,converter,does,not,implement,property,editor,registry,interface,converter,property,editor,registry,converter,register,custom,editor,required,type,property,editor
ArgumentConvertingMethodInvoker -> @Override 	protected Method findMatchingMethod();1328020251;This implementation looks for a method with matching parameter types._@see #doFindMatchingMethod;@Override_	protected Method findMatchingMethod() {_		Method matchingMethod = super.findMatchingMethod()__		_		if (matchingMethod == null) {_			_			matchingMethod = doFindMatchingMethod(getArguments())__		}_		if (matchingMethod == null) {_			_			matchingMethod = doFindMatchingMethod(new Object[] {getArguments()})__		}_		return matchingMethod__	};this,implementation,looks,for,a,method,with,matching,parameter,types,see,do,find,matching,method;override,protected,method,find,matching,method,method,matching,method,super,find,matching,method,if,matching,method,null,matching,method,do,find,matching,method,get,arguments,if,matching,method,null,matching,method,do,find,matching,method,new,object,get,arguments,return,matching,method
ArgumentConvertingMethodInvoker -> @Override 	protected Method findMatchingMethod();1356735495;This implementation looks for a method with matching parameter types._@see #doFindMatchingMethod;@Override_	protected Method findMatchingMethod() {_		Method matchingMethod = super.findMatchingMethod()__		_		if (matchingMethod == null) {_			_			matchingMethod = doFindMatchingMethod(getArguments())__		}_		if (matchingMethod == null) {_			_			matchingMethod = doFindMatchingMethod(new Object[] {getArguments()})__		}_		return matchingMethod__	};this,implementation,looks,for,a,method,with,matching,parameter,types,see,do,find,matching,method;override,protected,method,find,matching,method,method,matching,method,super,find,matching,method,if,matching,method,null,matching,method,do,find,matching,method,get,arguments,if,matching,method,null,matching,method,do,find,matching,method,new,object,get,arguments,return,matching,method
ArgumentConvertingMethodInvoker -> @Override 	protected Method findMatchingMethod();1385412762;This implementation looks for a method with matching parameter types._@see #doFindMatchingMethod;@Override_	protected Method findMatchingMethod() {_		Method matchingMethod = super.findMatchingMethod()__		_		if (matchingMethod == null) {_			_			matchingMethod = doFindMatchingMethod(getArguments())__		}_		if (matchingMethod == null) {_			_			matchingMethod = doFindMatchingMethod(new Object[] {getArguments()})__		}_		return matchingMethod__	};this,implementation,looks,for,a,method,with,matching,parameter,types,see,do,find,matching,method;override,protected,method,find,matching,method,method,matching,method,super,find,matching,method,if,matching,method,null,matching,method,do,find,matching,method,get,arguments,if,matching,method,null,matching,method,do,find,matching,method,new,object,get,arguments,return,matching,method
ArgumentConvertingMethodInvoker -> @Override 	protected Method findMatchingMethod();1495868221;This implementation looks for a method with matching parameter types._@see #doFindMatchingMethod;@Override_	protected Method findMatchingMethod() {_		Method matchingMethod = super.findMatchingMethod()__		_		if (matchingMethod == null) {_			_			matchingMethod = doFindMatchingMethod(getArguments())__		}_		if (matchingMethod == null) {_			_			matchingMethod = doFindMatchingMethod(new Object[] {getArguments()})__		}_		return matchingMethod__	};this,implementation,looks,for,a,method,with,matching,parameter,types,see,do,find,matching,method;override,protected,method,find,matching,method,method,matching,method,super,find,matching,method,if,matching,method,null,matching,method,do,find,matching,method,get,arguments,if,matching,method,null,matching,method,do,find,matching,method,new,object,get,arguments,return,matching,method
ArgumentConvertingMethodInvoker -> @Override 	protected Method findMatchingMethod();1496837955;This implementation looks for a method with matching parameter types._@see #doFindMatchingMethod;@Override_	protected Method findMatchingMethod() {_		Method matchingMethod = super.findMatchingMethod()__		_		if (matchingMethod == null) {_			_			matchingMethod = doFindMatchingMethod(getArguments())__		}_		if (matchingMethod == null) {_			_			matchingMethod = doFindMatchingMethod(new Object[] {getArguments()})__		}_		return matchingMethod__	};this,implementation,looks,for,a,method,with,matching,parameter,types,see,do,find,matching,method;override,protected,method,find,matching,method,method,matching,method,super,find,matching,method,if,matching,method,null,matching,method,do,find,matching,method,get,arguments,if,matching,method,null,matching,method,do,find,matching,method,new,object,get,arguments,return,matching,method
ArgumentConvertingMethodInvoker -> @Override 	protected Method findMatchingMethod();1498780456;This implementation looks for a method with matching parameter types._@see #doFindMatchingMethod;@Override_	protected Method findMatchingMethod() {_		Method matchingMethod = super.findMatchingMethod()__		_		if (matchingMethod == null) {_			_			matchingMethod = doFindMatchingMethod(getArguments())__		}_		if (matchingMethod == null) {_			_			matchingMethod = doFindMatchingMethod(new Object[] {getArguments()})__		}_		return matchingMethod__	};this,implementation,looks,for,a,method,with,matching,parameter,types,see,do,find,matching,method;override,protected,method,find,matching,method,method,matching,method,super,find,matching,method,if,matching,method,null,matching,method,do,find,matching,method,get,arguments,if,matching,method,null,matching,method,do,find,matching,method,new,object,get,arguments,return,matching,method
ArgumentConvertingMethodInvoker -> @Override 	protected Method findMatchingMethod();1500448076;This implementation looks for a method with matching parameter types._@see #doFindMatchingMethod;@Override_	protected Method findMatchingMethod() {_		Method matchingMethod = super.findMatchingMethod()__		_		if (matchingMethod == null) {_			_			matchingMethod = doFindMatchingMethod(getArguments())__		}_		if (matchingMethod == null) {_			_			matchingMethod = doFindMatchingMethod(new Object[] {getArguments()})__		}_		return matchingMethod__	};this,implementation,looks,for,a,method,with,matching,parameter,types,see,do,find,matching,method;override,protected,method,find,matching,method,method,matching,method,super,find,matching,method,if,matching,method,null,matching,method,do,find,matching,method,get,arguments,if,matching,method,null,matching,method,do,find,matching,method,new,object,get,arguments,return,matching,method
ArgumentConvertingMethodInvoker -> @Nullable 	protected Method doFindMatchingMethod(Object[] arguments);1495868221;Actually find a method with matching parameter type, i.e. where each_argument value is assignable to the corresponding parameter type._@param arguments the argument values to match against method parameters_@return a matching method, or {@code null} if none;@Nullable_	protected Method doFindMatchingMethod(Object[] arguments) {_		TypeConverter converter = getTypeConverter()__		if (converter != null) {_			String targetMethod = getTargetMethod()__			Method matchingMethod = null__			int argCount = arguments.length__			Method[] candidates = ReflectionUtils.getAllDeclaredMethods(getTargetClass())__			int minTypeDiffWeight = Integer.MAX_VALUE__			Object[] argumentsToUse = null__			for (Method candidate : candidates) {_				if (candidate.getName().equals(targetMethod)) {_					_					Class<?>[] paramTypes = candidate.getParameterTypes()__					if (paramTypes.length == argCount) {_						Object[] convertedArguments = new Object[argCount]__						boolean match = true__						for (int j = 0_ j < argCount && match_ j++) {_							_							try {_								convertedArguments[j] = converter.convertIfNecessary(arguments[j], paramTypes[j])__							}_							catch (TypeMismatchException ex) {_								_								match = false__							}_						}_						if (match) {_							int typeDiffWeight = getTypeDifferenceWeight(paramTypes, convertedArguments)__							if (typeDiffWeight < minTypeDiffWeight) {_								minTypeDiffWeight = typeDiffWeight__								matchingMethod = candidate__								argumentsToUse = convertedArguments__							}_						}_					}_				}_			}_			if (matchingMethod != null) {_				setArguments(argumentsToUse)__				return matchingMethod__			}_		}_		return null__	};actually,find,a,method,with,matching,parameter,type,i,e,where,each,argument,value,is,assignable,to,the,corresponding,parameter,type,param,arguments,the,argument,values,to,match,against,method,parameters,return,a,matching,method,or,code,null,if,none;nullable,protected,method,do,find,matching,method,object,arguments,type,converter,converter,get,type,converter,if,converter,null,string,target,method,get,target,method,method,matching,method,null,int,arg,count,arguments,length,method,candidates,reflection,utils,get,all,declared,methods,get,target,class,int,min,type,diff,weight,integer,object,arguments,to,use,null,for,method,candidate,candidates,if,candidate,get,name,equals,target,method,class,param,types,candidate,get,parameter,types,if,param,types,length,arg,count,object,converted,arguments,new,object,arg,count,boolean,match,true,for,int,j,0,j,arg,count,match,j,try,converted,arguments,j,converter,convert,if,necessary,arguments,j,param,types,j,catch,type,mismatch,exception,ex,match,false,if,match,int,type,diff,weight,get,type,difference,weight,param,types,converted,arguments,if,type,diff,weight,min,type,diff,weight,min,type,diff,weight,type,diff,weight,matching,method,candidate,arguments,to,use,converted,arguments,if,matching,method,null,set,arguments,arguments,to,use,return,matching,method,return,null
ArgumentConvertingMethodInvoker -> @Nullable 	protected Method doFindMatchingMethod(Object[] arguments);1496837955;Actually find a method with matching parameter type, i.e. where each_argument value is assignable to the corresponding parameter type._@param arguments the argument values to match against method parameters_@return a matching method, or {@code null} if none;@Nullable_	protected Method doFindMatchingMethod(Object[] arguments) {_		TypeConverter converter = getTypeConverter()__		if (converter != null) {_			String targetMethod = getTargetMethod()__			Method matchingMethod = null__			int argCount = arguments.length__			Class<?> targetClass = getTargetClass()__			Assert.state(targetClass != null, "No target class set")__			Method[] candidates = ReflectionUtils.getAllDeclaredMethods(targetClass)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Object[] argumentsToUse = null__			for (Method candidate : candidates) {_				if (candidate.getName().equals(targetMethod)) {_					_					Class<?>[] paramTypes = candidate.getParameterTypes()__					if (paramTypes.length == argCount) {_						Object[] convertedArguments = new Object[argCount]__						boolean match = true__						for (int j = 0_ j < argCount && match_ j++) {_							_							try {_								convertedArguments[j] = converter.convertIfNecessary(arguments[j], paramTypes[j])__							}_							catch (TypeMismatchException ex) {_								_								match = false__							}_						}_						if (match) {_							int typeDiffWeight = getTypeDifferenceWeight(paramTypes, convertedArguments)__							if (typeDiffWeight < minTypeDiffWeight) {_								minTypeDiffWeight = typeDiffWeight__								matchingMethod = candidate__								argumentsToUse = convertedArguments__							}_						}_					}_				}_			}_			if (matchingMethod != null) {_				setArguments(argumentsToUse)__				return matchingMethod__			}_		}_		return null__	};actually,find,a,method,with,matching,parameter,type,i,e,where,each,argument,value,is,assignable,to,the,corresponding,parameter,type,param,arguments,the,argument,values,to,match,against,method,parameters,return,a,matching,method,or,code,null,if,none;nullable,protected,method,do,find,matching,method,object,arguments,type,converter,converter,get,type,converter,if,converter,null,string,target,method,get,target,method,method,matching,method,null,int,arg,count,arguments,length,class,target,class,get,target,class,assert,state,target,class,null,no,target,class,set,method,candidates,reflection,utils,get,all,declared,methods,target,class,int,min,type,diff,weight,integer,object,arguments,to,use,null,for,method,candidate,candidates,if,candidate,get,name,equals,target,method,class,param,types,candidate,get,parameter,types,if,param,types,length,arg,count,object,converted,arguments,new,object,arg,count,boolean,match,true,for,int,j,0,j,arg,count,match,j,try,converted,arguments,j,converter,convert,if,necessary,arguments,j,param,types,j,catch,type,mismatch,exception,ex,match,false,if,match,int,type,diff,weight,get,type,difference,weight,param,types,converted,arguments,if,type,diff,weight,min,type,diff,weight,min,type,diff,weight,type,diff,weight,matching,method,candidate,arguments,to,use,converted,arguments,if,matching,method,null,set,arguments,arguments,to,use,return,matching,method,return,null
ArgumentConvertingMethodInvoker -> @Nullable 	protected Method doFindMatchingMethod(Object[] arguments);1498780456;Actually find a method with matching parameter type, i.e. where each_argument value is assignable to the corresponding parameter type._@param arguments the argument values to match against method parameters_@return a matching method, or {@code null} if none;@Nullable_	protected Method doFindMatchingMethod(Object[] arguments) {_		TypeConverter converter = getTypeConverter()__		if (converter != null) {_			String targetMethod = getTargetMethod()__			Method matchingMethod = null__			int argCount = arguments.length__			Class<?> targetClass = getTargetClass()__			Assert.state(targetClass != null, "No target class set")__			Method[] candidates = ReflectionUtils.getAllDeclaredMethods(targetClass)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Object[] argumentsToUse = null__			for (Method candidate : candidates) {_				if (candidate.getName().equals(targetMethod)) {_					_					Class<?>[] paramTypes = candidate.getParameterTypes()__					if (paramTypes.length == argCount) {_						Object[] convertedArguments = new Object[argCount]__						boolean match = true__						for (int j = 0_ j < argCount && match_ j++) {_							_							try {_								convertedArguments[j] = converter.convertIfNecessary(arguments[j], paramTypes[j])__							}_							catch (TypeMismatchException ex) {_								_								match = false__							}_						}_						if (match) {_							int typeDiffWeight = getTypeDifferenceWeight(paramTypes, convertedArguments)__							if (typeDiffWeight < minTypeDiffWeight) {_								minTypeDiffWeight = typeDiffWeight__								matchingMethod = candidate__								argumentsToUse = convertedArguments__							}_						}_					}_				}_			}_			if (matchingMethod != null) {_				setArguments(argumentsToUse)__				return matchingMethod__			}_		}_		return null__	};actually,find,a,method,with,matching,parameter,type,i,e,where,each,argument,value,is,assignable,to,the,corresponding,parameter,type,param,arguments,the,argument,values,to,match,against,method,parameters,return,a,matching,method,or,code,null,if,none;nullable,protected,method,do,find,matching,method,object,arguments,type,converter,converter,get,type,converter,if,converter,null,string,target,method,get,target,method,method,matching,method,null,int,arg,count,arguments,length,class,target,class,get,target,class,assert,state,target,class,null,no,target,class,set,method,candidates,reflection,utils,get,all,declared,methods,target,class,int,min,type,diff,weight,integer,object,arguments,to,use,null,for,method,candidate,candidates,if,candidate,get,name,equals,target,method,class,param,types,candidate,get,parameter,types,if,param,types,length,arg,count,object,converted,arguments,new,object,arg,count,boolean,match,true,for,int,j,0,j,arg,count,match,j,try,converted,arguments,j,converter,convert,if,necessary,arguments,j,param,types,j,catch,type,mismatch,exception,ex,match,false,if,match,int,type,diff,weight,get,type,difference,weight,param,types,converted,arguments,if,type,diff,weight,min,type,diff,weight,min,type,diff,weight,type,diff,weight,matching,method,candidate,arguments,to,use,converted,arguments,if,matching,method,null,set,arguments,arguments,to,use,return,matching,method,return,null
ArgumentConvertingMethodInvoker -> @Nullable 	protected Method doFindMatchingMethod(Object[] arguments);1500448076;Actually find a method with matching parameter type, i.e. where each_argument value is assignable to the corresponding parameter type._@param arguments the argument values to match against method parameters_@return a matching method, or {@code null} if none;@Nullable_	protected Method doFindMatchingMethod(Object[] arguments) {_		TypeConverter converter = getTypeConverter()__		if (converter != null) {_			String targetMethod = getTargetMethod()__			Method matchingMethod = null__			int argCount = arguments.length__			Class<?> targetClass = getTargetClass()__			Assert.state(targetClass != null, "No target class set")__			Method[] candidates = ReflectionUtils.getAllDeclaredMethods(targetClass)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Object[] argumentsToUse = null__			for (Method candidate : candidates) {_				if (candidate.getName().equals(targetMethod)) {_					_					Class<?>[] paramTypes = candidate.getParameterTypes()__					if (paramTypes.length == argCount) {_						Object[] convertedArguments = new Object[argCount]__						boolean match = true__						for (int j = 0_ j < argCount && match_ j++) {_							_							try {_								convertedArguments[j] = converter.convertIfNecessary(arguments[j], paramTypes[j])__							}_							catch (TypeMismatchException ex) {_								_								match = false__							}_						}_						if (match) {_							int typeDiffWeight = getTypeDifferenceWeight(paramTypes, convertedArguments)__							if (typeDiffWeight < minTypeDiffWeight) {_								minTypeDiffWeight = typeDiffWeight__								matchingMethod = candidate__								argumentsToUse = convertedArguments__							}_						}_					}_				}_			}_			if (matchingMethod != null) {_				setArguments(argumentsToUse)__				return matchingMethod__			}_		}_		return null__	};actually,find,a,method,with,matching,parameter,type,i,e,where,each,argument,value,is,assignable,to,the,corresponding,parameter,type,param,arguments,the,argument,values,to,match,against,method,parameters,return,a,matching,method,or,code,null,if,none;nullable,protected,method,do,find,matching,method,object,arguments,type,converter,converter,get,type,converter,if,converter,null,string,target,method,get,target,method,method,matching,method,null,int,arg,count,arguments,length,class,target,class,get,target,class,assert,state,target,class,null,no,target,class,set,method,candidates,reflection,utils,get,all,declared,methods,target,class,int,min,type,diff,weight,integer,object,arguments,to,use,null,for,method,candidate,candidates,if,candidate,get,name,equals,target,method,class,param,types,candidate,get,parameter,types,if,param,types,length,arg,count,object,converted,arguments,new,object,arg,count,boolean,match,true,for,int,j,0,j,arg,count,match,j,try,converted,arguments,j,converter,convert,if,necessary,arguments,j,param,types,j,catch,type,mismatch,exception,ex,match,false,if,match,int,type,diff,weight,get,type,difference,weight,param,types,converted,arguments,if,type,diff,weight,min,type,diff,weight,min,type,diff,weight,type,diff,weight,matching,method,candidate,arguments,to,use,converted,arguments,if,matching,method,null,set,arguments,arguments,to,use,return,matching,method,return,null
