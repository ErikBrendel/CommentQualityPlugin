commented;modifiers;parameterAmount;loc;comment;code
true;public;1;4;/**  * Initialize this exception's property name for exposure through {@link #getPropertyName()},  * as an alternative to having it initialized via a {@link PropertyChangeEvent}.  * @param propertyName the property name to expose  * @since 5.0.4  * @see #TypeMismatchException(Object, Class)  * @see #TypeMismatchException(Object, Class, Throwable)  */ ;/**  * Initialize this exception's property name for exposure through {@link #getPropertyName()},  * as an alternative to having it initialized via a {@link PropertyChangeEvent}.  * @param propertyName the property name to expose  * @since 5.0.4  * @see #TypeMismatchException(Object, Class)  * @see #TypeMismatchException(Object, Class, Throwable)  */ public void initPropertyName(String propertyName) {     Assert.state(this.propertyName == null, "Property name already initialized").     this.propertyName = propertyName. }
true;public;0;5;/**  * Return the name of the affected property, if available.  */ ;/**  * Return the name of the affected property, if available.  */ @Override @Nullable public String getPropertyName() {     return this.propertyName. }
true;public;0;5;/**  * Return the offending value (may be {@code null}).  */ ;/**  * Return the offending value (may be {@code null}).  */ @Override @Nullable public Object getValue() {     return this.value. }
true;public;0;4;/**  * Return the required target type, if any.  */ ;/**  * Return the required target type, if any.  */ @Nullable public Class<?> getRequiredType() {     return this.requiredType. }
false;public;0;4;;@Override public String getErrorCode() {     return ERROR_CODE. }
