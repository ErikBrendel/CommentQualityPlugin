# id;timestamp;commentText;codeText;commentWords;codeWords
TypeMismatchException -> @Override 	public Object getValue();1328020251;Return the offending value (may be <code>null</code>);@Override_	public Object getValue() {_		return this.value__	};return,the,offending,value,may,be,code,null,code;override,public,object,get,value,return,this,value
TypeMismatchException -> @Override 	public Object getValue();1356735495;Return the offending value (may be {@code null});@Override_	public Object getValue() {_		return this.value__	};return,the,offending,value,may,be,code,null;override,public,object,get,value,return,this,value
TypeMismatchException -> @Override 	public Object getValue();1357119239;Return the offending value (may be {@code null});@Override_	public Object getValue() {_		return this.value__	};return,the,offending,value,may,be,code,null;override,public,object,get,value,return,this,value
TypeMismatchException -> @Override 	public Object getValue();1368482696;Return the offending value (may be {@code null});@Override_	public Object getValue() {_		return this.value__	};return,the,offending,value,may,be,code,null;override,public,object,get,value,return,this,value
TypeMismatchException -> @Override 	public Object getValue();1385412762;Return the offending value (may be {@code null});@Override_	public Object getValue() {_		return this.value__	};return,the,offending,value,may,be,code,null;override,public,object,get,value,return,this,value
TypeMismatchException -> @Override 	public Object getValue();1448982611;Return the offending value (may be {@code null}).;@Override_	public Object getValue() {_		return this.value__	};return,the,offending,value,may,be,code,null;override,public,object,get,value,return,this,value
TypeMismatchException -> @Override 	public Object getValue();1477690745;Return the offending value (may be {@code null}).;@Override_	public Object getValue() {_		return this.value__	};return,the,offending,value,may,be,code,null;override,public,object,get,value,return,this,value
TypeMismatchException -> @Override 	public Object getValue();1495868221;Return the offending value (may be {@code null}).;@Override_	public Object getValue() {_		return this.value__	};return,the,offending,value,may,be,code,null;override,public,object,get,value,return,this,value
TypeMismatchException -> @Override 	public Object getValue();1496837955;Return the offending value (may be {@code null}).;@Override_	public Object getValue() {_		return this.value__	};return,the,offending,value,may,be,code,null;override,public,object,get,value,return,this,value
TypeMismatchException -> public TypeMismatchException(PropertyChangeEvent propertyChangeEvent, Class requiredType);1328020251;Create a new TypeMismatchException._@param propertyChangeEvent the PropertyChangeEvent that resulted in the problem_@param requiredType the required target type;public TypeMismatchException(PropertyChangeEvent propertyChangeEvent, Class requiredType) {_		this(propertyChangeEvent, requiredType, null)__	};create,a,new,type,mismatch,exception,param,property,change,event,the,property,change,event,that,resulted,in,the,problem,param,required,type,the,required,target,type;public,type,mismatch,exception,property,change,event,property,change,event,class,required,type,this,property,change,event,required,type,null
TypeMismatchException -> public TypeMismatchException(PropertyChangeEvent propertyChangeEvent, Class requiredType);1356735495;Create a new TypeMismatchException._@param propertyChangeEvent the PropertyChangeEvent that resulted in the problem_@param requiredType the required target type;public TypeMismatchException(PropertyChangeEvent propertyChangeEvent, Class requiredType) {_		this(propertyChangeEvent, requiredType, null)__	};create,a,new,type,mismatch,exception,param,property,change,event,the,property,change,event,that,resulted,in,the,problem,param,required,type,the,required,target,type;public,type,mismatch,exception,property,change,event,property,change,event,class,required,type,this,property,change,event,required,type,null
TypeMismatchException -> public TypeMismatchException(PropertyChangeEvent propertyChangeEvent, Class requiredType);1357119239;Create a new TypeMismatchException._@param propertyChangeEvent the PropertyChangeEvent that resulted in the problem_@param requiredType the required target type;public TypeMismatchException(PropertyChangeEvent propertyChangeEvent, Class requiredType) {_		this(propertyChangeEvent, requiredType, null)__	};create,a,new,type,mismatch,exception,param,property,change,event,the,property,change,event,that,resulted,in,the,problem,param,required,type,the,required,target,type;public,type,mismatch,exception,property,change,event,property,change,event,class,required,type,this,property,change,event,required,type,null
TypeMismatchException -> public TypeMismatchException(PropertyChangeEvent propertyChangeEvent, Class requiredType);1368482696;Create a new TypeMismatchException._@param propertyChangeEvent the PropertyChangeEvent that resulted in the problem_@param requiredType the required target type;public TypeMismatchException(PropertyChangeEvent propertyChangeEvent, Class requiredType) {_		this(propertyChangeEvent, requiredType, null)__	};create,a,new,type,mismatch,exception,param,property,change,event,the,property,change,event,that,resulted,in,the,problem,param,required,type,the,required,target,type;public,type,mismatch,exception,property,change,event,property,change,event,class,required,type,this,property,change,event,required,type,null
TypeMismatchException -> public TypeMismatchException(PropertyChangeEvent propertyChangeEvent, Class requiredType, Throwable cause);1328020251;Create a new TypeMismatchException._@param propertyChangeEvent the PropertyChangeEvent that resulted in the problem_@param requiredType the required target type (or <code>null</code> if not known)_@param cause the root cause (may be <code>null</code>);public TypeMismatchException(PropertyChangeEvent propertyChangeEvent, Class requiredType, Throwable cause) {_		super(propertyChangeEvent,_				"Failed to convert property value of type '" +_				ClassUtils.getDescriptiveType(propertyChangeEvent.getNewValue()) + "'" +_				(requiredType != null ?_				 " to required type '" + ClassUtils.getQualifiedName(requiredType) + "'" : "") +_				(propertyChangeEvent.getPropertyName() != null ?_				 " for property '" + propertyChangeEvent.getPropertyName() + "'" : ""),_				cause)__		this.value = propertyChangeEvent.getNewValue()__		this.requiredType = requiredType__	};create,a,new,type,mismatch,exception,param,property,change,event,the,property,change,event,that,resulted,in,the,problem,param,required,type,the,required,target,type,or,code,null,code,if,not,known,param,cause,the,root,cause,may,be,code,null,code;public,type,mismatch,exception,property,change,event,property,change,event,class,required,type,throwable,cause,super,property,change,event,failed,to,convert,property,value,of,type,class,utils,get,descriptive,type,property,change,event,get,new,value,required,type,null,to,required,type,class,utils,get,qualified,name,required,type,property,change,event,get,property,name,null,for,property,property,change,event,get,property,name,cause,this,value,property,change,event,get,new,value,this,required,type,required,type
TypeMismatchException -> public TypeMismatchException(PropertyChangeEvent propertyChangeEvent, Class requiredType, Throwable cause);1356735495;Create a new TypeMismatchException._@param propertyChangeEvent the PropertyChangeEvent that resulted in the problem_@param requiredType the required target type (or {@code null} if not known)_@param cause the root cause (may be {@code null});public TypeMismatchException(PropertyChangeEvent propertyChangeEvent, Class requiredType, Throwable cause) {_		super(propertyChangeEvent,_				"Failed to convert property value of type '" +_				ClassUtils.getDescriptiveType(propertyChangeEvent.getNewValue()) + "'" +_				(requiredType != null ?_				 " to required type '" + ClassUtils.getQualifiedName(requiredType) + "'" : "") +_				(propertyChangeEvent.getPropertyName() != null ?_				 " for property '" + propertyChangeEvent.getPropertyName() + "'" : ""),_				cause)__		this.value = propertyChangeEvent.getNewValue()__		this.requiredType = requiredType__	};create,a,new,type,mismatch,exception,param,property,change,event,the,property,change,event,that,resulted,in,the,problem,param,required,type,the,required,target,type,or,code,null,if,not,known,param,cause,the,root,cause,may,be,code,null;public,type,mismatch,exception,property,change,event,property,change,event,class,required,type,throwable,cause,super,property,change,event,failed,to,convert,property,value,of,type,class,utils,get,descriptive,type,property,change,event,get,new,value,required,type,null,to,required,type,class,utils,get,qualified,name,required,type,property,change,event,get,property,name,null,for,property,property,change,event,get,property,name,cause,this,value,property,change,event,get,new,value,this,required,type,required,type
TypeMismatchException -> public TypeMismatchException(PropertyChangeEvent propertyChangeEvent, Class requiredType, Throwable cause);1357119239;Create a new TypeMismatchException._@param propertyChangeEvent the PropertyChangeEvent that resulted in the problem_@param requiredType the required target type (or {@code null} if not known)_@param cause the root cause (may be {@code null});public TypeMismatchException(PropertyChangeEvent propertyChangeEvent, Class requiredType, Throwable cause) {_		super(propertyChangeEvent,_				"Failed to convert property value of type '" +_				ClassUtils.getDescriptiveType(propertyChangeEvent.getNewValue()) + "'" +_				(requiredType != null ?_				 " to required type '" + ClassUtils.getQualifiedName(requiredType) + "'" : "") +_				(propertyChangeEvent.getPropertyName() != null ?_				 " for property '" + propertyChangeEvent.getPropertyName() + "'" : ""),_				cause)__		this.value = propertyChangeEvent.getNewValue()__		this.requiredType = requiredType__	};create,a,new,type,mismatch,exception,param,property,change,event,the,property,change,event,that,resulted,in,the,problem,param,required,type,the,required,target,type,or,code,null,if,not,known,param,cause,the,root,cause,may,be,code,null;public,type,mismatch,exception,property,change,event,property,change,event,class,required,type,throwable,cause,super,property,change,event,failed,to,convert,property,value,of,type,class,utils,get,descriptive,type,property,change,event,get,new,value,required,type,null,to,required,type,class,utils,get,qualified,name,required,type,property,change,event,get,property,name,null,for,property,property,change,event,get,property,name,cause,this,value,property,change,event,get,new,value,this,required,type,required,type
TypeMismatchException -> public TypeMismatchException(PropertyChangeEvent propertyChangeEvent, Class requiredType, Throwable cause);1368482696;Create a new TypeMismatchException._@param propertyChangeEvent the PropertyChangeEvent that resulted in the problem_@param requiredType the required target type (or {@code null} if not known)_@param cause the root cause (may be {@code null});public TypeMismatchException(PropertyChangeEvent propertyChangeEvent, Class requiredType, Throwable cause) {_		super(propertyChangeEvent,_				"Failed to convert property value of type '" +_				ClassUtils.getDescriptiveType(propertyChangeEvent.getNewValue()) + "'" +_				(requiredType != null ?_				 " to required type '" + ClassUtils.getQualifiedName(requiredType) + "'" : "") +_				(propertyChangeEvent.getPropertyName() != null ?_				 " for property '" + propertyChangeEvent.getPropertyName() + "'" : ""),_				cause)__		this.value = propertyChangeEvent.getNewValue()__		this.requiredType = requiredType__	};create,a,new,type,mismatch,exception,param,property,change,event,the,property,change,event,that,resulted,in,the,problem,param,required,type,the,required,target,type,or,code,null,if,not,known,param,cause,the,root,cause,may,be,code,null;public,type,mismatch,exception,property,change,event,property,change,event,class,required,type,throwable,cause,super,property,change,event,failed,to,convert,property,value,of,type,class,utils,get,descriptive,type,property,change,event,get,new,value,required,type,null,to,required,type,class,utils,get,qualified,name,required,type,property,change,event,get,property,name,null,for,property,property,change,event,get,property,name,cause,this,value,property,change,event,get,new,value,this,required,type,required,type
TypeMismatchException -> @Override 	@Nullable 	public Object getValue();1498780456;Return the offending value (may be {@code null}).;@Override_	@Nullable_	public Object getValue() {_		return this.value__	};return,the,offending,value,may,be,code,null;override,nullable,public,object,get,value,return,this,value
TypeMismatchException -> @Override 	@Nullable 	public Object getValue();1517567636;Return the offending value (may be {@code null}).;@Override_	@Nullable_	public Object getValue() {_		return this.value__	};return,the,offending,value,may,be,code,null;override,nullable,public,object,get,value,return,this,value
TypeMismatchException -> @Override 	@Nullable 	public Object getValue();1519859718;Return the offending value (may be {@code null}).;@Override_	@Nullable_	public Object getValue() {_		return this.value__	};return,the,offending,value,may,be,code,null;override,nullable,public,object,get,value,return,this,value
TypeMismatchException -> @Override 	@Nullable 	public Object getValue();1519860578;Return the offending value (may be {@code null}).;@Override_	@Nullable_	public Object getValue() {_		return this.value__	};return,the,offending,value,may,be,code,null;override,nullable,public,object,get,value,return,this,value
TypeMismatchException -> @Override 	@Nullable 	public Object getValue();1530174524;Return the offending value (may be {@code null}).;@Override_	@Nullable_	public Object getValue() {_		return this.value__	};return,the,offending,value,may,be,code,null;override,nullable,public,object,get,value,return,this,value
TypeMismatchException -> public TypeMismatchException(Object value, Class requiredType);1328020251;Create a new TypeMismatchException without PropertyChangeEvent._@param value the offending value that couldn't be converted (may be <code>null</code>)_@param requiredType the required target type (or <code>null</code> if not known);public TypeMismatchException(Object value, Class requiredType) {_		this(value, requiredType, null)__	};create,a,new,type,mismatch,exception,without,property,change,event,param,value,the,offending,value,that,couldn,t,be,converted,may,be,code,null,code,param,required,type,the,required,target,type,or,code,null,code,if,not,known;public,type,mismatch,exception,object,value,class,required,type,this,value,required,type,null
TypeMismatchException -> public TypeMismatchException(Object value, Class requiredType);1356735495;Create a new TypeMismatchException without PropertyChangeEvent._@param value the offending value that couldn't be converted (may be {@code null})_@param requiredType the required target type (or {@code null} if not known);public TypeMismatchException(Object value, Class requiredType) {_		this(value, requiredType, null)__	};create,a,new,type,mismatch,exception,without,property,change,event,param,value,the,offending,value,that,couldn,t,be,converted,may,be,code,null,param,required,type,the,required,target,type,or,code,null,if,not,known;public,type,mismatch,exception,object,value,class,required,type,this,value,required,type,null
TypeMismatchException -> public TypeMismatchException(Object value, Class requiredType);1357119239;Create a new TypeMismatchException without PropertyChangeEvent._@param value the offending value that couldn't be converted (may be {@code null})_@param requiredType the required target type (or {@code null} if not known);public TypeMismatchException(Object value, Class requiredType) {_		this(value, requiredType, null)__	};create,a,new,type,mismatch,exception,without,property,change,event,param,value,the,offending,value,that,couldn,t,be,converted,may,be,code,null,param,required,type,the,required,target,type,or,code,null,if,not,known;public,type,mismatch,exception,object,value,class,required,type,this,value,required,type,null
TypeMismatchException -> public TypeMismatchException(Object value, Class requiredType);1368482696;Create a new TypeMismatchException without PropertyChangeEvent._@param value the offending value that couldn't be converted (may be {@code null})_@param requiredType the required target type (or {@code null} if not known);public TypeMismatchException(Object value, Class requiredType) {_		this(value, requiredType, null)__	};create,a,new,type,mismatch,exception,without,property,change,event,param,value,the,offending,value,that,couldn,t,be,converted,may,be,code,null,param,required,type,the,required,target,type,or,code,null,if,not,known;public,type,mismatch,exception,object,value,class,required,type,this,value,required,type,null
TypeMismatchException -> public TypeMismatchException(PropertyChangeEvent propertyChangeEvent, Class<?> requiredType, Throwable cause);1385412762;Create a new TypeMismatchException._@param propertyChangeEvent the PropertyChangeEvent that resulted in the problem_@param requiredType the required target type (or {@code null} if not known)_@param cause the root cause (may be {@code null});public TypeMismatchException(PropertyChangeEvent propertyChangeEvent, Class<?> requiredType, Throwable cause) {_		super(propertyChangeEvent,_				"Failed to convert property value of type '" +_				ClassUtils.getDescriptiveType(propertyChangeEvent.getNewValue()) + "'" +_				(requiredType != null ?_				 " to required type '" + ClassUtils.getQualifiedName(requiredType) + "'" : "") +_				(propertyChangeEvent.getPropertyName() != null ?_				 " for property '" + propertyChangeEvent.getPropertyName() + "'" : ""),_				cause)__		this.value = propertyChangeEvent.getNewValue()__		this.requiredType = requiredType__	};create,a,new,type,mismatch,exception,param,property,change,event,the,property,change,event,that,resulted,in,the,problem,param,required,type,the,required,target,type,or,code,null,if,not,known,param,cause,the,root,cause,may,be,code,null;public,type,mismatch,exception,property,change,event,property,change,event,class,required,type,throwable,cause,super,property,change,event,failed,to,convert,property,value,of,type,class,utils,get,descriptive,type,property,change,event,get,new,value,required,type,null,to,required,type,class,utils,get,qualified,name,required,type,property,change,event,get,property,name,null,for,property,property,change,event,get,property,name,cause,this,value,property,change,event,get,new,value,this,required,type,required,type
TypeMismatchException -> public TypeMismatchException(PropertyChangeEvent propertyChangeEvent, Class<?> requiredType, Throwable cause);1448982611;Create a new TypeMismatchException._@param propertyChangeEvent the PropertyChangeEvent that resulted in the problem_@param requiredType the required target type (or {@code null} if not known)_@param cause the root cause (may be {@code null});public TypeMismatchException(PropertyChangeEvent propertyChangeEvent, Class<?> requiredType, Throwable cause) {_		super(propertyChangeEvent,_				"Failed to convert property value of type [" +_				ClassUtils.getDescriptiveType(propertyChangeEvent.getNewValue()) + "]" +_				(requiredType != null ?_				 " to required type [" + ClassUtils.getQualifiedName(requiredType) + "]" : "") +_				(propertyChangeEvent.getPropertyName() != null ?_				 " for property '" + propertyChangeEvent.getPropertyName() + "'" : ""),_				cause)__		this.value = propertyChangeEvent.getNewValue()__		this.requiredType = requiredType__	};create,a,new,type,mismatch,exception,param,property,change,event,the,property,change,event,that,resulted,in,the,problem,param,required,type,the,required,target,type,or,code,null,if,not,known,param,cause,the,root,cause,may,be,code,null;public,type,mismatch,exception,property,change,event,property,change,event,class,required,type,throwable,cause,super,property,change,event,failed,to,convert,property,value,of,type,class,utils,get,descriptive,type,property,change,event,get,new,value,required,type,null,to,required,type,class,utils,get,qualified,name,required,type,property,change,event,get,property,name,null,for,property,property,change,event,get,property,name,cause,this,value,property,change,event,get,new,value,this,required,type,required,type
TypeMismatchException -> public TypeMismatchException(PropertyChangeEvent propertyChangeEvent, Class<?> requiredType, Throwable cause);1477690745;Create a new TypeMismatchException._@param propertyChangeEvent the PropertyChangeEvent that resulted in the problem_@param requiredType the required target type (or {@code null} if not known)_@param cause the root cause (may be {@code null});public TypeMismatchException(PropertyChangeEvent propertyChangeEvent, Class<?> requiredType, Throwable cause) {_		super(propertyChangeEvent,_				"Failed to convert property value of type '" +_				ClassUtils.getDescriptiveType(propertyChangeEvent.getNewValue()) + "'" +_				(requiredType != null ?_				 " to required type '" + ClassUtils.getQualifiedName(requiredType) + "'" : "") +_				(propertyChangeEvent.getPropertyName() != null ?_				 " for property '" + propertyChangeEvent.getPropertyName() + "'" : ""),_				cause)__		this.value = propertyChangeEvent.getNewValue()__		this.requiredType = requiredType__	};create,a,new,type,mismatch,exception,param,property,change,event,the,property,change,event,that,resulted,in,the,problem,param,required,type,the,required,target,type,or,code,null,if,not,known,param,cause,the,root,cause,may,be,code,null;public,type,mismatch,exception,property,change,event,property,change,event,class,required,type,throwable,cause,super,property,change,event,failed,to,convert,property,value,of,type,class,utils,get,descriptive,type,property,change,event,get,new,value,required,type,null,to,required,type,class,utils,get,qualified,name,required,type,property,change,event,get,property,name,null,for,property,property,change,event,get,property,name,cause,this,value,property,change,event,get,new,value,this,required,type,required,type
TypeMismatchException -> public TypeMismatchException(PropertyChangeEvent propertyChangeEvent, @Nullable Class<?> requiredType, 			@Nullable Throwable cause);1496837955;Create a new TypeMismatchException._@param propertyChangeEvent the PropertyChangeEvent that resulted in the problem_@param requiredType the required target type (or {@code null} if not known)_@param cause the root cause (may be {@code null});public TypeMismatchException(PropertyChangeEvent propertyChangeEvent, @Nullable Class<?> requiredType,_			@Nullable Throwable cause) {__		super(propertyChangeEvent,_				"Failed to convert property value of type '" +_				ClassUtils.getDescriptiveType(propertyChangeEvent.getNewValue()) + "'" +_				(requiredType != null ?_				 " to required type '" + ClassUtils.getQualifiedName(requiredType) + "'" : "") +_				(propertyChangeEvent.getPropertyName() != null ?_				 " for property '" + propertyChangeEvent.getPropertyName() + "'" : ""),_				cause)__		this.value = propertyChangeEvent.getNewValue()__		this.requiredType = requiredType__	};create,a,new,type,mismatch,exception,param,property,change,event,the,property,change,event,that,resulted,in,the,problem,param,required,type,the,required,target,type,or,code,null,if,not,known,param,cause,the,root,cause,may,be,code,null;public,type,mismatch,exception,property,change,event,property,change,event,nullable,class,required,type,nullable,throwable,cause,super,property,change,event,failed,to,convert,property,value,of,type,class,utils,get,descriptive,type,property,change,event,get,new,value,required,type,null,to,required,type,class,utils,get,qualified,name,required,type,property,change,event,get,property,name,null,for,property,property,change,event,get,property,name,cause,this,value,property,change,event,get,new,value,this,required,type,required,type
TypeMismatchException -> public TypeMismatchException(PropertyChangeEvent propertyChangeEvent, @Nullable Class<?> requiredType, 			@Nullable Throwable cause);1498780456;Create a new TypeMismatchException._@param propertyChangeEvent the PropertyChangeEvent that resulted in the problem_@param requiredType the required target type (or {@code null} if not known)_@param cause the root cause (may be {@code null});public TypeMismatchException(PropertyChangeEvent propertyChangeEvent, @Nullable Class<?> requiredType,_			@Nullable Throwable cause) {__		super(propertyChangeEvent,_				"Failed to convert property value of type '" +_				ClassUtils.getDescriptiveType(propertyChangeEvent.getNewValue()) + "'" +_				(requiredType != null ?_				 " to required type '" + ClassUtils.getQualifiedName(requiredType) + "'" : "") +_				(propertyChangeEvent.getPropertyName() != null ?_				 " for property '" + propertyChangeEvent.getPropertyName() + "'" : ""),_				cause)__		this.value = propertyChangeEvent.getNewValue()__		this.requiredType = requiredType__	};create,a,new,type,mismatch,exception,param,property,change,event,the,property,change,event,that,resulted,in,the,problem,param,required,type,the,required,target,type,or,code,null,if,not,known,param,cause,the,root,cause,may,be,code,null;public,type,mismatch,exception,property,change,event,property,change,event,nullable,class,required,type,nullable,throwable,cause,super,property,change,event,failed,to,convert,property,value,of,type,class,utils,get,descriptive,type,property,change,event,get,new,value,required,type,null,to,required,type,class,utils,get,qualified,name,required,type,property,change,event,get,property,name,null,for,property,property,change,event,get,property,name,cause,this,value,property,change,event,get,new,value,this,required,type,required,type
TypeMismatchException -> public TypeMismatchException(PropertyChangeEvent propertyChangeEvent, @Nullable Class<?> requiredType, 			@Nullable Throwable cause);1517567636;Create a new TypeMismatchException._@param propertyChangeEvent the PropertyChangeEvent that resulted in the problem_@param requiredType the required target type (or {@code null} if not known)_@param cause the root cause (may be {@code null});public TypeMismatchException(PropertyChangeEvent propertyChangeEvent, @Nullable Class<?> requiredType,_			@Nullable Throwable cause) {__		super(propertyChangeEvent,_				"Failed to convert property value of type '" +_				ClassUtils.getDescriptiveType(propertyChangeEvent.getNewValue()) + "'" +_				(requiredType != null ?_				 " to required type '" + ClassUtils.getQualifiedName(requiredType) + "'" : "") +_				(propertyChangeEvent.getPropertyName() != null ?_				 " for property '" + propertyChangeEvent.getPropertyName() + "'" : ""),_				cause)__		this.propertyName = propertyChangeEvent.getPropertyName()__		this.value = propertyChangeEvent.getNewValue()__		this.requiredType = requiredType__	};create,a,new,type,mismatch,exception,param,property,change,event,the,property,change,event,that,resulted,in,the,problem,param,required,type,the,required,target,type,or,code,null,if,not,known,param,cause,the,root,cause,may,be,code,null;public,type,mismatch,exception,property,change,event,property,change,event,nullable,class,required,type,nullable,throwable,cause,super,property,change,event,failed,to,convert,property,value,of,type,class,utils,get,descriptive,type,property,change,event,get,new,value,required,type,null,to,required,type,class,utils,get,qualified,name,required,type,property,change,event,get,property,name,null,for,property,property,change,event,get,property,name,cause,this,property,name,property,change,event,get,property,name,this,value,property,change,event,get,new,value,this,required,type,required,type
TypeMismatchException -> public TypeMismatchException(PropertyChangeEvent propertyChangeEvent, @Nullable Class<?> requiredType, 			@Nullable Throwable cause);1519859718;Create a new TypeMismatchException._@param propertyChangeEvent the PropertyChangeEvent that resulted in the problem_@param requiredType the required target type (or {@code null} if not known)_@param cause the root cause (may be {@code null});public TypeMismatchException(PropertyChangeEvent propertyChangeEvent, @Nullable Class<?> requiredType,_			@Nullable Throwable cause) {__		super(propertyChangeEvent,_				"Failed to convert property value of type '" +_				ClassUtils.getDescriptiveType(propertyChangeEvent.getNewValue()) + "'" +_				(requiredType != null ?_				 " to required type '" + ClassUtils.getQualifiedName(requiredType) + "'" : "") +_				(propertyChangeEvent.getPropertyName() != null ?_				 " for property '" + propertyChangeEvent.getPropertyName() + "'" : ""),_				cause)__		this.propertyName = propertyChangeEvent.getPropertyName()__		this.value = propertyChangeEvent.getNewValue()__		this.requiredType = requiredType__	};create,a,new,type,mismatch,exception,param,property,change,event,the,property,change,event,that,resulted,in,the,problem,param,required,type,the,required,target,type,or,code,null,if,not,known,param,cause,the,root,cause,may,be,code,null;public,type,mismatch,exception,property,change,event,property,change,event,nullable,class,required,type,nullable,throwable,cause,super,property,change,event,failed,to,convert,property,value,of,type,class,utils,get,descriptive,type,property,change,event,get,new,value,required,type,null,to,required,type,class,utils,get,qualified,name,required,type,property,change,event,get,property,name,null,for,property,property,change,event,get,property,name,cause,this,property,name,property,change,event,get,property,name,this,value,property,change,event,get,new,value,this,required,type,required,type
TypeMismatchException -> public TypeMismatchException(PropertyChangeEvent propertyChangeEvent, @Nullable Class<?> requiredType, 			@Nullable Throwable cause);1519860578;Create a new {@code TypeMismatchException}._@param propertyChangeEvent the PropertyChangeEvent that resulted in the problem_@param requiredType the required target type (or {@code null} if not known)_@param cause the root cause (may be {@code null});public TypeMismatchException(PropertyChangeEvent propertyChangeEvent, @Nullable Class<?> requiredType,_			@Nullable Throwable cause) {__		super(propertyChangeEvent,_				"Failed to convert property value of type '" +_				ClassUtils.getDescriptiveType(propertyChangeEvent.getNewValue()) + "'" +_				(requiredType != null ?_				 " to required type '" + ClassUtils.getQualifiedName(requiredType) + "'" : "") +_				(propertyChangeEvent.getPropertyName() != null ?_				 " for property '" + propertyChangeEvent.getPropertyName() + "'" : ""),_				cause)__		this.propertyName = propertyChangeEvent.getPropertyName()__		this.value = propertyChangeEvent.getNewValue()__		this.requiredType = requiredType__	};create,a,new,code,type,mismatch,exception,param,property,change,event,the,property,change,event,that,resulted,in,the,problem,param,required,type,the,required,target,type,or,code,null,if,not,known,param,cause,the,root,cause,may,be,code,null;public,type,mismatch,exception,property,change,event,property,change,event,nullable,class,required,type,nullable,throwable,cause,super,property,change,event,failed,to,convert,property,value,of,type,class,utils,get,descriptive,type,property,change,event,get,new,value,required,type,null,to,required,type,class,utils,get,qualified,name,required,type,property,change,event,get,property,name,null,for,property,property,change,event,get,property,name,cause,this,property,name,property,change,event,get,property,name,this,value,property,change,event,get,new,value,this,required,type,required,type
TypeMismatchException -> public TypeMismatchException(PropertyChangeEvent propertyChangeEvent, @Nullable Class<?> requiredType, 			@Nullable Throwable cause);1530174524;Create a new {@code TypeMismatchException}._@param propertyChangeEvent the PropertyChangeEvent that resulted in the problem_@param requiredType the required target type (or {@code null} if not known)_@param cause the root cause (may be {@code null});public TypeMismatchException(PropertyChangeEvent propertyChangeEvent, @Nullable Class<?> requiredType,_			@Nullable Throwable cause) {__		super(propertyChangeEvent,_				"Failed to convert property value of type '" +_				ClassUtils.getDescriptiveType(propertyChangeEvent.getNewValue()) + "'" +_				(requiredType != null ?_				" to required type '" + ClassUtils.getQualifiedName(requiredType) + "'" : "") +_				(propertyChangeEvent.getPropertyName() != null ?_				" for property '" + propertyChangeEvent.getPropertyName() + "'" : ""),_				cause)__		this.propertyName = propertyChangeEvent.getPropertyName()__		this.value = propertyChangeEvent.getNewValue()__		this.requiredType = requiredType__	};create,a,new,code,type,mismatch,exception,param,property,change,event,the,property,change,event,that,resulted,in,the,problem,param,required,type,the,required,target,type,or,code,null,if,not,known,param,cause,the,root,cause,may,be,code,null;public,type,mismatch,exception,property,change,event,property,change,event,nullable,class,required,type,nullable,throwable,cause,super,property,change,event,failed,to,convert,property,value,of,type,class,utils,get,descriptive,type,property,change,event,get,new,value,required,type,null,to,required,type,class,utils,get,qualified,name,required,type,property,change,event,get,property,name,null,for,property,property,change,event,get,property,name,cause,this,property,name,property,change,event,get,property,name,this,value,property,change,event,get,new,value,this,required,type,required,type
TypeMismatchException -> @Override 	@Nullable 	public String getPropertyName();1519860578;Return the name of the affected property, if available.;@Override_	@Nullable_	public String getPropertyName() {_		return this.propertyName__	};return,the,name,of,the,affected,property,if,available;override,nullable,public,string,get,property,name,return,this,property,name
TypeMismatchException -> @Override 	@Nullable 	public String getPropertyName();1530174524;Return the name of the affected property, if available.;@Override_	@Nullable_	public String getPropertyName() {_		return this.propertyName__	};return,the,name,of,the,affected,property,if,available;override,nullable,public,string,get,property,name,return,this,property,name
TypeMismatchException -> public Class getRequiredType();1328020251;Return the required target type, if any.;public Class getRequiredType() {_		return this.requiredType__	};return,the,required,target,type,if,any;public,class,get,required,type,return,this,required,type
TypeMismatchException -> public Class getRequiredType();1356735495;Return the required target type, if any.;public Class getRequiredType() {_		return this.requiredType__	};return,the,required,target,type,if,any;public,class,get,required,type,return,this,required,type
TypeMismatchException -> public Class getRequiredType();1357119239;Return the required target type, if any.;public Class getRequiredType() {_		return this.requiredType__	};return,the,required,target,type,if,any;public,class,get,required,type,return,this,required,type
TypeMismatchException -> public Class getRequiredType();1368482696;Return the required target type, if any.;public Class getRequiredType() {_		return this.requiredType__	};return,the,required,target,type,if,any;public,class,get,required,type,return,this,required,type
TypeMismatchException -> public TypeMismatchException(@Nullable Object value, @Nullable Class<?> requiredType);1495868221;Create a new TypeMismatchException without PropertyChangeEvent._@param value the offending value that couldn't be converted (may be {@code null})_@param requiredType the required target type (or {@code null} if not known);public TypeMismatchException(@Nullable Object value, @Nullable Class<?> requiredType) {_		this(value, requiredType, null)__	};create,a,new,type,mismatch,exception,without,property,change,event,param,value,the,offending,value,that,couldn,t,be,converted,may,be,code,null,param,required,type,the,required,target,type,or,code,null,if,not,known;public,type,mismatch,exception,nullable,object,value,nullable,class,required,type,this,value,required,type,null
TypeMismatchException -> public TypeMismatchException(@Nullable Object value, @Nullable Class<?> requiredType);1496837955;Create a new TypeMismatchException without PropertyChangeEvent._@param value the offending value that couldn't be converted (may be {@code null})_@param requiredType the required target type (or {@code null} if not known);public TypeMismatchException(@Nullable Object value, @Nullable Class<?> requiredType) {_		this(value, requiredType, null)__	};create,a,new,type,mismatch,exception,without,property,change,event,param,value,the,offending,value,that,couldn,t,be,converted,may,be,code,null,param,required,type,the,required,target,type,or,code,null,if,not,known;public,type,mismatch,exception,nullable,object,value,nullable,class,required,type,this,value,required,type,null
TypeMismatchException -> public TypeMismatchException(@Nullable Object value, @Nullable Class<?> requiredType);1498780456;Create a new TypeMismatchException without PropertyChangeEvent._@param value the offending value that couldn't be converted (may be {@code null})_@param requiredType the required target type (or {@code null} if not known);public TypeMismatchException(@Nullable Object value, @Nullable Class<?> requiredType) {_		this(value, requiredType, null)__	};create,a,new,type,mismatch,exception,without,property,change,event,param,value,the,offending,value,that,couldn,t,be,converted,may,be,code,null,param,required,type,the,required,target,type,or,code,null,if,not,known;public,type,mismatch,exception,nullable,object,value,nullable,class,required,type,this,value,required,type,null
TypeMismatchException -> public TypeMismatchException(@Nullable Object value, @Nullable Class<?> requiredType);1517567636;Create a new TypeMismatchException without PropertyChangeEvent._@param value the offending value that couldn't be converted (may be {@code null})_@param requiredType the required target type (or {@code null} if not known)_@see #initPropertyName;public TypeMismatchException(@Nullable Object value, @Nullable Class<?> requiredType) {_		this(value, requiredType, null)__	};create,a,new,type,mismatch,exception,without,property,change,event,param,value,the,offending,value,that,couldn,t,be,converted,may,be,code,null,param,required,type,the,required,target,type,or,code,null,if,not,known,see,init,property,name;public,type,mismatch,exception,nullable,object,value,nullable,class,required,type,this,value,required,type,null
TypeMismatchException -> public TypeMismatchException(@Nullable Object value, @Nullable Class<?> requiredType);1519859718;Create a new TypeMismatchException without PropertyChangeEvent._@param value the offending value that couldn't be converted (may be {@code null})_@param requiredType the required target type (or {@code null} if not known)_@see #initPropertyName;public TypeMismatchException(@Nullable Object value, @Nullable Class<?> requiredType) {_		this(value, requiredType, null)__	};create,a,new,type,mismatch,exception,without,property,change,event,param,value,the,offending,value,that,couldn,t,be,converted,may,be,code,null,param,required,type,the,required,target,type,or,code,null,if,not,known,see,init,property,name;public,type,mismatch,exception,nullable,object,value,nullable,class,required,type,this,value,required,type,null
TypeMismatchException -> public TypeMismatchException(@Nullable Object value, @Nullable Class<?> requiredType);1519860578;Create a new {@code TypeMismatchException} without a {@code PropertyChangeEvent}._@param value the offending value that couldn't be converted (may be {@code null})_@param requiredType the required target type (or {@code null} if not known)_@see #initPropertyName;public TypeMismatchException(@Nullable Object value, @Nullable Class<?> requiredType) {_		this(value, requiredType, null)__	};create,a,new,code,type,mismatch,exception,without,a,code,property,change,event,param,value,the,offending,value,that,couldn,t,be,converted,may,be,code,null,param,required,type,the,required,target,type,or,code,null,if,not,known,see,init,property,name;public,type,mismatch,exception,nullable,object,value,nullable,class,required,type,this,value,required,type,null
TypeMismatchException -> public TypeMismatchException(@Nullable Object value, @Nullable Class<?> requiredType);1530174524;Create a new {@code TypeMismatchException} without a {@code PropertyChangeEvent}._@param value the offending value that couldn't be converted (may be {@code null})_@param requiredType the required target type (or {@code null} if not known)_@see #initPropertyName;public TypeMismatchException(@Nullable Object value, @Nullable Class<?> requiredType) {_		this(value, requiredType, null)__	};create,a,new,code,type,mismatch,exception,without,a,code,property,change,event,param,value,the,offending,value,that,couldn,t,be,converted,may,be,code,null,param,required,type,the,required,target,type,or,code,null,if,not,known,see,init,property,name;public,type,mismatch,exception,nullable,object,value,nullable,class,required,type,this,value,required,type,null
TypeMismatchException -> public void initPropertyName(String propertyName);1517567636;Initialize this exception's property name for exposure through {@link #getPropertyName()},_as an alternative to having it initialized via a {@link PropertyChangeEvent}._@param propertyName the property name to expose_@since 5.0.4_@see #TypeMismatchException(Object, Class)_@see #TypeMismatchException(Object, Class, Throwable);public void initPropertyName(String propertyName) {_		Assert.state(this.propertyName == null, "Property name already initialized")__		this.propertyName = propertyName__	};initialize,this,exception,s,property,name,for,exposure,through,link,get,property,name,as,an,alternative,to,having,it,initialized,via,a,link,property,change,event,param,property,name,the,property,name,to,expose,since,5,0,4,see,type,mismatch,exception,object,class,see,type,mismatch,exception,object,class,throwable;public,void,init,property,name,string,property,name,assert,state,this,property,name,null,property,name,already,initialized,this,property,name,property,name
TypeMismatchException -> public void initPropertyName(String propertyName);1519859718;Initialize this exception's property name for exposure through {@link #getPropertyName()},_as an alternative to having it initialized via a {@link PropertyChangeEvent}._@param propertyName the property name to expose_@since 5.0.4_@see #TypeMismatchException(Object, Class)_@see #TypeMismatchException(Object, Class, Throwable);public void initPropertyName(String propertyName) {_		Assert.state(this.propertyName == null, "Property name already initialized")__		this.propertyName = propertyName__	};initialize,this,exception,s,property,name,for,exposure,through,link,get,property,name,as,an,alternative,to,having,it,initialized,via,a,link,property,change,event,param,property,name,the,property,name,to,expose,since,5,0,4,see,type,mismatch,exception,object,class,see,type,mismatch,exception,object,class,throwable;public,void,init,property,name,string,property,name,assert,state,this,property,name,null,property,name,already,initialized,this,property,name,property,name
TypeMismatchException -> public void initPropertyName(String propertyName);1519860578;Initialize this exception's property name for exposure through {@link #getPropertyName()},_as an alternative to having it initialized via a {@link PropertyChangeEvent}._@param propertyName the property name to expose_@since 5.0.4_@see #TypeMismatchException(Object, Class)_@see #TypeMismatchException(Object, Class, Throwable);public void initPropertyName(String propertyName) {_		Assert.state(this.propertyName == null, "Property name already initialized")__		this.propertyName = propertyName__	};initialize,this,exception,s,property,name,for,exposure,through,link,get,property,name,as,an,alternative,to,having,it,initialized,via,a,link,property,change,event,param,property,name,the,property,name,to,expose,since,5,0,4,see,type,mismatch,exception,object,class,see,type,mismatch,exception,object,class,throwable;public,void,init,property,name,string,property,name,assert,state,this,property,name,null,property,name,already,initialized,this,property,name,property,name
TypeMismatchException -> public void initPropertyName(String propertyName);1530174524;Initialize this exception's property name for exposure through {@link #getPropertyName()},_as an alternative to having it initialized via a {@link PropertyChangeEvent}._@param propertyName the property name to expose_@since 5.0.4_@see #TypeMismatchException(Object, Class)_@see #TypeMismatchException(Object, Class, Throwable);public void initPropertyName(String propertyName) {_		Assert.state(this.propertyName == null, "Property name already initialized")__		this.propertyName = propertyName__	};initialize,this,exception,s,property,name,for,exposure,through,link,get,property,name,as,an,alternative,to,having,it,initialized,via,a,link,property,change,event,param,property,name,the,property,name,to,expose,since,5,0,4,see,type,mismatch,exception,object,class,see,type,mismatch,exception,object,class,throwable;public,void,init,property,name,string,property,name,assert,state,this,property,name,null,property,name,already,initialized,this,property,name,property,name
TypeMismatchException -> @Nullable 	public Class<?> getRequiredType();1495868221;Return the required target type, if any.;@Nullable_	public Class<?> getRequiredType() {_		return this.requiredType__	};return,the,required,target,type,if,any;nullable,public,class,get,required,type,return,this,required,type
TypeMismatchException -> @Nullable 	public Class<?> getRequiredType();1496837955;Return the required target type, if any.;@Nullable_	public Class<?> getRequiredType() {_		return this.requiredType__	};return,the,required,target,type,if,any;nullable,public,class,get,required,type,return,this,required,type
TypeMismatchException -> @Nullable 	public Class<?> getRequiredType();1498780456;Return the required target type, if any.;@Nullable_	public Class<?> getRequiredType() {_		return this.requiredType__	};return,the,required,target,type,if,any;nullable,public,class,get,required,type,return,this,required,type
TypeMismatchException -> @Nullable 	public Class<?> getRequiredType();1517567636;Return the required target type, if any.;@Nullable_	public Class<?> getRequiredType() {_		return this.requiredType__	};return,the,required,target,type,if,any;nullable,public,class,get,required,type,return,this,required,type
TypeMismatchException -> @Nullable 	public Class<?> getRequiredType();1519859718;Return the required target type, if any.;@Nullable_	public Class<?> getRequiredType() {_		return this.requiredType__	};return,the,required,target,type,if,any;nullable,public,class,get,required,type,return,this,required,type
TypeMismatchException -> @Nullable 	public Class<?> getRequiredType();1519860578;Return the required target type, if any.;@Nullable_	public Class<?> getRequiredType() {_		return this.requiredType__	};return,the,required,target,type,if,any;nullable,public,class,get,required,type,return,this,required,type
TypeMismatchException -> @Nullable 	public Class<?> getRequiredType();1530174524;Return the required target type, if any.;@Nullable_	public Class<?> getRequiredType() {_		return this.requiredType__	};return,the,required,target,type,if,any;nullable,public,class,get,required,type,return,this,required,type
TypeMismatchException -> public TypeMismatchException(Object value, Class<?> requiredType);1385412762;Create a new TypeMismatchException without PropertyChangeEvent._@param value the offending value that couldn't be converted (may be {@code null})_@param requiredType the required target type (or {@code null} if not known);public TypeMismatchException(Object value, Class<?> requiredType) {_		this(value, requiredType, null)__	};create,a,new,type,mismatch,exception,without,property,change,event,param,value,the,offending,value,that,couldn,t,be,converted,may,be,code,null,param,required,type,the,required,target,type,or,code,null,if,not,known;public,type,mismatch,exception,object,value,class,required,type,this,value,required,type,null
TypeMismatchException -> public TypeMismatchException(Object value, Class<?> requiredType);1448982611;Create a new TypeMismatchException without PropertyChangeEvent._@param value the offending value that couldn't be converted (may be {@code null})_@param requiredType the required target type (or {@code null} if not known);public TypeMismatchException(Object value, Class<?> requiredType) {_		this(value, requiredType, null)__	};create,a,new,type,mismatch,exception,without,property,change,event,param,value,the,offending,value,that,couldn,t,be,converted,may,be,code,null,param,required,type,the,required,target,type,or,code,null,if,not,known;public,type,mismatch,exception,object,value,class,required,type,this,value,required,type,null
TypeMismatchException -> public TypeMismatchException(Object value, Class<?> requiredType);1477690745;Create a new TypeMismatchException without PropertyChangeEvent._@param value the offending value that couldn't be converted (may be {@code null})_@param requiredType the required target type (or {@code null} if not known);public TypeMismatchException(Object value, Class<?> requiredType) {_		this(value, requiredType, null)__	};create,a,new,type,mismatch,exception,without,property,change,event,param,value,the,offending,value,that,couldn,t,be,converted,may,be,code,null,param,required,type,the,required,target,type,or,code,null,if,not,known;public,type,mismatch,exception,object,value,class,required,type,this,value,required,type,null
TypeMismatchException -> public TypeMismatchException(Object value, Class requiredType, Throwable cause);1328020251;Create a new TypeMismatchException without PropertyChangeEvent._@param value the offending value that couldn't be converted (may be <code>null</code>)_@param requiredType the required target type (or <code>null</code> if not known)_@param cause the root cause (may be <code>null</code>);public TypeMismatchException(Object value, Class requiredType, Throwable cause) {_		super("Failed to convert value of type '" + ClassUtils.getDescriptiveType(value) + "'" +_				(requiredType != null ? " to required type '" + ClassUtils.getQualifiedName(requiredType) + "'" : ""),_				cause)__		this.value = value__		this.requiredType = requiredType__	};create,a,new,type,mismatch,exception,without,property,change,event,param,value,the,offending,value,that,couldn,t,be,converted,may,be,code,null,code,param,required,type,the,required,target,type,or,code,null,code,if,not,known,param,cause,the,root,cause,may,be,code,null,code;public,type,mismatch,exception,object,value,class,required,type,throwable,cause,super,failed,to,convert,value,of,type,class,utils,get,descriptive,type,value,required,type,null,to,required,type,class,utils,get,qualified,name,required,type,cause,this,value,value,this,required,type,required,type
TypeMismatchException -> public TypeMismatchException(Object value, Class requiredType, Throwable cause);1356735495;Create a new TypeMismatchException without PropertyChangeEvent._@param value the offending value that couldn't be converted (may be {@code null})_@param requiredType the required target type (or {@code null} if not known)_@param cause the root cause (may be {@code null});public TypeMismatchException(Object value, Class requiredType, Throwable cause) {_		super("Failed to convert value of type '" + ClassUtils.getDescriptiveType(value) + "'" +_				(requiredType != null ? " to required type '" + ClassUtils.getQualifiedName(requiredType) + "'" : ""),_				cause)__		this.value = value__		this.requiredType = requiredType__	};create,a,new,type,mismatch,exception,without,property,change,event,param,value,the,offending,value,that,couldn,t,be,converted,may,be,code,null,param,required,type,the,required,target,type,or,code,null,if,not,known,param,cause,the,root,cause,may,be,code,null;public,type,mismatch,exception,object,value,class,required,type,throwable,cause,super,failed,to,convert,value,of,type,class,utils,get,descriptive,type,value,required,type,null,to,required,type,class,utils,get,qualified,name,required,type,cause,this,value,value,this,required,type,required,type
TypeMismatchException -> public TypeMismatchException(Object value, Class requiredType, Throwable cause);1357119239;Create a new TypeMismatchException without PropertyChangeEvent._@param value the offending value that couldn't be converted (may be {@code null})_@param requiredType the required target type (or {@code null} if not known)_@param cause the root cause (may be {@code null});public TypeMismatchException(Object value, Class requiredType, Throwable cause) {_		super("Failed to convert value of type '" + ClassUtils.getDescriptiveType(value) + "'" +_				(requiredType != null ? " to required type '" + ClassUtils.getQualifiedName(requiredType) + "'" : ""),_				cause)__		this.value = value__		this.requiredType = requiredType__	};create,a,new,type,mismatch,exception,without,property,change,event,param,value,the,offending,value,that,couldn,t,be,converted,may,be,code,null,param,required,type,the,required,target,type,or,code,null,if,not,known,param,cause,the,root,cause,may,be,code,null;public,type,mismatch,exception,object,value,class,required,type,throwable,cause,super,failed,to,convert,value,of,type,class,utils,get,descriptive,type,value,required,type,null,to,required,type,class,utils,get,qualified,name,required,type,cause,this,value,value,this,required,type,required,type
TypeMismatchException -> public TypeMismatchException(Object value, Class requiredType, Throwable cause);1368482696;Create a new TypeMismatchException without PropertyChangeEvent._@param value the offending value that couldn't be converted (may be {@code null})_@param requiredType the required target type (or {@code null} if not known)_@param cause the root cause (may be {@code null});public TypeMismatchException(Object value, Class requiredType, Throwable cause) {_		super("Failed to convert value of type '" + ClassUtils.getDescriptiveType(value) + "'" +_				(requiredType != null ? " to required type '" + ClassUtils.getQualifiedName(requiredType) + "'" : ""),_				cause)__		this.value = value__		this.requiredType = requiredType__	};create,a,new,type,mismatch,exception,without,property,change,event,param,value,the,offending,value,that,couldn,t,be,converted,may,be,code,null,param,required,type,the,required,target,type,or,code,null,if,not,known,param,cause,the,root,cause,may,be,code,null;public,type,mismatch,exception,object,value,class,required,type,throwable,cause,super,failed,to,convert,value,of,type,class,utils,get,descriptive,type,value,required,type,null,to,required,type,class,utils,get,qualified,name,required,type,cause,this,value,value,this,required,type,required,type
TypeMismatchException -> public TypeMismatchException(PropertyChangeEvent propertyChangeEvent, Class<?> requiredType);1385412762;Create a new TypeMismatchException._@param propertyChangeEvent the PropertyChangeEvent that resulted in the problem_@param requiredType the required target type;public TypeMismatchException(PropertyChangeEvent propertyChangeEvent, Class<?> requiredType) {_		this(propertyChangeEvent, requiredType, null)__	};create,a,new,type,mismatch,exception,param,property,change,event,the,property,change,event,that,resulted,in,the,problem,param,required,type,the,required,target,type;public,type,mismatch,exception,property,change,event,property,change,event,class,required,type,this,property,change,event,required,type,null
TypeMismatchException -> public TypeMismatchException(PropertyChangeEvent propertyChangeEvent, Class<?> requiredType);1448982611;Create a new TypeMismatchException._@param propertyChangeEvent the PropertyChangeEvent that resulted in the problem_@param requiredType the required target type;public TypeMismatchException(PropertyChangeEvent propertyChangeEvent, Class<?> requiredType) {_		this(propertyChangeEvent, requiredType, null)__	};create,a,new,type,mismatch,exception,param,property,change,event,the,property,change,event,that,resulted,in,the,problem,param,required,type,the,required,target,type;public,type,mismatch,exception,property,change,event,property,change,event,class,required,type,this,property,change,event,required,type,null
TypeMismatchException -> public TypeMismatchException(PropertyChangeEvent propertyChangeEvent, Class<?> requiredType);1477690745;Create a new TypeMismatchException._@param propertyChangeEvent the PropertyChangeEvent that resulted in the problem_@param requiredType the required target type;public TypeMismatchException(PropertyChangeEvent propertyChangeEvent, Class<?> requiredType) {_		this(propertyChangeEvent, requiredType, null)__	};create,a,new,type,mismatch,exception,param,property,change,event,the,property,change,event,that,resulted,in,the,problem,param,required,type,the,required,target,type;public,type,mismatch,exception,property,change,event,property,change,event,class,required,type,this,property,change,event,required,type,null
TypeMismatchException -> public TypeMismatchException(PropertyChangeEvent propertyChangeEvent, Class<?> requiredType);1495868221;Create a new TypeMismatchException._@param propertyChangeEvent the PropertyChangeEvent that resulted in the problem_@param requiredType the required target type;public TypeMismatchException(PropertyChangeEvent propertyChangeEvent, Class<?> requiredType) {_		this(propertyChangeEvent, requiredType, null)__	};create,a,new,type,mismatch,exception,param,property,change,event,the,property,change,event,that,resulted,in,the,problem,param,required,type,the,required,target,type;public,type,mismatch,exception,property,change,event,property,change,event,class,required,type,this,property,change,event,required,type,null
TypeMismatchException -> public TypeMismatchException(PropertyChangeEvent propertyChangeEvent, Class<?> requiredType);1496837955;Create a new TypeMismatchException._@param propertyChangeEvent the PropertyChangeEvent that resulted in the problem_@param requiredType the required target type;public TypeMismatchException(PropertyChangeEvent propertyChangeEvent, Class<?> requiredType) {_		this(propertyChangeEvent, requiredType, null)__	};create,a,new,type,mismatch,exception,param,property,change,event,the,property,change,event,that,resulted,in,the,problem,param,required,type,the,required,target,type;public,type,mismatch,exception,property,change,event,property,change,event,class,required,type,this,property,change,event,required,type,null
TypeMismatchException -> public TypeMismatchException(PropertyChangeEvent propertyChangeEvent, Class<?> requiredType);1498780456;Create a new TypeMismatchException._@param propertyChangeEvent the PropertyChangeEvent that resulted in the problem_@param requiredType the required target type;public TypeMismatchException(PropertyChangeEvent propertyChangeEvent, Class<?> requiredType) {_		this(propertyChangeEvent, requiredType, null)__	};create,a,new,type,mismatch,exception,param,property,change,event,the,property,change,event,that,resulted,in,the,problem,param,required,type,the,required,target,type;public,type,mismatch,exception,property,change,event,property,change,event,class,required,type,this,property,change,event,required,type,null
TypeMismatchException -> public TypeMismatchException(PropertyChangeEvent propertyChangeEvent, Class<?> requiredType);1517567636;Create a new TypeMismatchException._@param propertyChangeEvent the PropertyChangeEvent that resulted in the problem_@param requiredType the required target type;public TypeMismatchException(PropertyChangeEvent propertyChangeEvent, Class<?> requiredType) {_		this(propertyChangeEvent, requiredType, null)__	};create,a,new,type,mismatch,exception,param,property,change,event,the,property,change,event,that,resulted,in,the,problem,param,required,type,the,required,target,type;public,type,mismatch,exception,property,change,event,property,change,event,class,required,type,this,property,change,event,required,type,null
TypeMismatchException -> public TypeMismatchException(PropertyChangeEvent propertyChangeEvent, Class<?> requiredType);1519859718;Create a new TypeMismatchException._@param propertyChangeEvent the PropertyChangeEvent that resulted in the problem_@param requiredType the required target type;public TypeMismatchException(PropertyChangeEvent propertyChangeEvent, Class<?> requiredType) {_		this(propertyChangeEvent, requiredType, null)__	};create,a,new,type,mismatch,exception,param,property,change,event,the,property,change,event,that,resulted,in,the,problem,param,required,type,the,required,target,type;public,type,mismatch,exception,property,change,event,property,change,event,class,required,type,this,property,change,event,required,type,null
TypeMismatchException -> public TypeMismatchException(PropertyChangeEvent propertyChangeEvent, Class<?> requiredType);1519860578;Create a new {@code TypeMismatchException}._@param propertyChangeEvent the PropertyChangeEvent that resulted in the problem_@param requiredType the required target type;public TypeMismatchException(PropertyChangeEvent propertyChangeEvent, Class<?> requiredType) {_		this(propertyChangeEvent, requiredType, null)__	};create,a,new,code,type,mismatch,exception,param,property,change,event,the,property,change,event,that,resulted,in,the,problem,param,required,type,the,required,target,type;public,type,mismatch,exception,property,change,event,property,change,event,class,required,type,this,property,change,event,required,type,null
TypeMismatchException -> public TypeMismatchException(PropertyChangeEvent propertyChangeEvent, Class<?> requiredType);1530174524;Create a new {@code TypeMismatchException}._@param propertyChangeEvent the PropertyChangeEvent that resulted in the problem_@param requiredType the required target type;public TypeMismatchException(PropertyChangeEvent propertyChangeEvent, Class<?> requiredType) {_		this(propertyChangeEvent, requiredType, null)__	};create,a,new,code,type,mismatch,exception,param,property,change,event,the,property,change,event,that,resulted,in,the,problem,param,required,type,the,required,target,type;public,type,mismatch,exception,property,change,event,property,change,event,class,required,type,this,property,change,event,required,type,null
TypeMismatchException -> public TypeMismatchException(Object value, Class<?> requiredType, Throwable cause);1385412762;Create a new TypeMismatchException without PropertyChangeEvent._@param value the offending value that couldn't be converted (may be {@code null})_@param requiredType the required target type (or {@code null} if not known)_@param cause the root cause (may be {@code null});public TypeMismatchException(Object value, Class<?> requiredType, Throwable cause) {_		super("Failed to convert value of type '" + ClassUtils.getDescriptiveType(value) + "'" +_				(requiredType != null ? " to required type '" + ClassUtils.getQualifiedName(requiredType) + "'" : ""),_				cause)__		this.value = value__		this.requiredType = requiredType__	};create,a,new,type,mismatch,exception,without,property,change,event,param,value,the,offending,value,that,couldn,t,be,converted,may,be,code,null,param,required,type,the,required,target,type,or,code,null,if,not,known,param,cause,the,root,cause,may,be,code,null;public,type,mismatch,exception,object,value,class,required,type,throwable,cause,super,failed,to,convert,value,of,type,class,utils,get,descriptive,type,value,required,type,null,to,required,type,class,utils,get,qualified,name,required,type,cause,this,value,value,this,required,type,required,type
TypeMismatchException -> public TypeMismatchException(Object value, Class<?> requiredType, Throwable cause);1448982611;Create a new TypeMismatchException without PropertyChangeEvent._@param value the offending value that couldn't be converted (may be {@code null})_@param requiredType the required target type (or {@code null} if not known)_@param cause the root cause (may be {@code null});public TypeMismatchException(Object value, Class<?> requiredType, Throwable cause) {_		super("Failed to convert value of type [" + ClassUtils.getDescriptiveType(value) + "]" +_				(requiredType != null ? " to required type [" + ClassUtils.getQualifiedName(requiredType) + "]" : ""),_				cause)__		this.value = value__		this.requiredType = requiredType__	};create,a,new,type,mismatch,exception,without,property,change,event,param,value,the,offending,value,that,couldn,t,be,converted,may,be,code,null,param,required,type,the,required,target,type,or,code,null,if,not,known,param,cause,the,root,cause,may,be,code,null;public,type,mismatch,exception,object,value,class,required,type,throwable,cause,super,failed,to,convert,value,of,type,class,utils,get,descriptive,type,value,required,type,null,to,required,type,class,utils,get,qualified,name,required,type,cause,this,value,value,this,required,type,required,type
TypeMismatchException -> public TypeMismatchException(Object value, Class<?> requiredType, Throwable cause);1477690745;Create a new TypeMismatchException without PropertyChangeEvent._@param value the offending value that couldn't be converted (may be {@code null})_@param requiredType the required target type (or {@code null} if not known)_@param cause the root cause (may be {@code null});public TypeMismatchException(Object value, Class<?> requiredType, Throwable cause) {_		super("Failed to convert value of type '" + ClassUtils.getDescriptiveType(value) + "'" +_				(requiredType != null ? " to required type '" + ClassUtils.getQualifiedName(requiredType) + "'" : ""),_				cause)__		this.value = value__		this.requiredType = requiredType__	};create,a,new,type,mismatch,exception,without,property,change,event,param,value,the,offending,value,that,couldn,t,be,converted,may,be,code,null,param,required,type,the,required,target,type,or,code,null,if,not,known,param,cause,the,root,cause,may,be,code,null;public,type,mismatch,exception,object,value,class,required,type,throwable,cause,super,failed,to,convert,value,of,type,class,utils,get,descriptive,type,value,required,type,null,to,required,type,class,utils,get,qualified,name,required,type,cause,this,value,value,this,required,type,required,type
TypeMismatchException -> public Class<?> getRequiredType();1385412762;Return the required target type, if any.;public Class<?> getRequiredType() {_		return this.requiredType__	};return,the,required,target,type,if,any;public,class,get,required,type,return,this,required,type
TypeMismatchException -> public Class<?> getRequiredType();1448982611;Return the required target type, if any.;public Class<?> getRequiredType() {_		return this.requiredType__	};return,the,required,target,type,if,any;public,class,get,required,type,return,this,required,type
TypeMismatchException -> public Class<?> getRequiredType();1477690745;Return the required target type, if any.;public Class<?> getRequiredType() {_		return this.requiredType__	};return,the,required,target,type,if,any;public,class,get,required,type,return,this,required,type
TypeMismatchException -> public TypeMismatchException(@Nullable Object value, @Nullable Class<?> requiredType, @Nullable Throwable cause);1495868221;Create a new TypeMismatchException without PropertyChangeEvent._@param value the offending value that couldn't be converted (may be {@code null})_@param requiredType the required target type (or {@code null} if not known)_@param cause the root cause (may be {@code null});public TypeMismatchException(@Nullable Object value, @Nullable Class<?> requiredType, @Nullable Throwable cause) {_		super("Failed to convert value of type '" + ClassUtils.getDescriptiveType(value) + "'" +_				(requiredType != null ? " to required type '" + ClassUtils.getQualifiedName(requiredType) + "'" : ""),_				cause)__		this.value = value__		this.requiredType = requiredType__	};create,a,new,type,mismatch,exception,without,property,change,event,param,value,the,offending,value,that,couldn,t,be,converted,may,be,code,null,param,required,type,the,required,target,type,or,code,null,if,not,known,param,cause,the,root,cause,may,be,code,null;public,type,mismatch,exception,nullable,object,value,nullable,class,required,type,nullable,throwable,cause,super,failed,to,convert,value,of,type,class,utils,get,descriptive,type,value,required,type,null,to,required,type,class,utils,get,qualified,name,required,type,cause,this,value,value,this,required,type,required,type
TypeMismatchException -> public TypeMismatchException(@Nullable Object value, @Nullable Class<?> requiredType, @Nullable Throwable cause);1496837955;Create a new TypeMismatchException without PropertyChangeEvent._@param value the offending value that couldn't be converted (may be {@code null})_@param requiredType the required target type (or {@code null} if not known)_@param cause the root cause (may be {@code null});public TypeMismatchException(@Nullable Object value, @Nullable Class<?> requiredType, @Nullable Throwable cause) {_		super("Failed to convert value of type '" + ClassUtils.getDescriptiveType(value) + "'" +_				(requiredType != null ? " to required type '" + ClassUtils.getQualifiedName(requiredType) + "'" : ""),_				cause)__		this.value = value__		this.requiredType = requiredType__	};create,a,new,type,mismatch,exception,without,property,change,event,param,value,the,offending,value,that,couldn,t,be,converted,may,be,code,null,param,required,type,the,required,target,type,or,code,null,if,not,known,param,cause,the,root,cause,may,be,code,null;public,type,mismatch,exception,nullable,object,value,nullable,class,required,type,nullable,throwable,cause,super,failed,to,convert,value,of,type,class,utils,get,descriptive,type,value,required,type,null,to,required,type,class,utils,get,qualified,name,required,type,cause,this,value,value,this,required,type,required,type
TypeMismatchException -> public TypeMismatchException(@Nullable Object value, @Nullable Class<?> requiredType, @Nullable Throwable cause);1498780456;Create a new TypeMismatchException without PropertyChangeEvent._@param value the offending value that couldn't be converted (may be {@code null})_@param requiredType the required target type (or {@code null} if not known)_@param cause the root cause (may be {@code null});public TypeMismatchException(@Nullable Object value, @Nullable Class<?> requiredType, @Nullable Throwable cause) {_		super("Failed to convert value of type '" + ClassUtils.getDescriptiveType(value) + "'" +_				(requiredType != null ? " to required type '" + ClassUtils.getQualifiedName(requiredType) + "'" : ""),_				cause)__		this.value = value__		this.requiredType = requiredType__	};create,a,new,type,mismatch,exception,without,property,change,event,param,value,the,offending,value,that,couldn,t,be,converted,may,be,code,null,param,required,type,the,required,target,type,or,code,null,if,not,known,param,cause,the,root,cause,may,be,code,null;public,type,mismatch,exception,nullable,object,value,nullable,class,required,type,nullable,throwable,cause,super,failed,to,convert,value,of,type,class,utils,get,descriptive,type,value,required,type,null,to,required,type,class,utils,get,qualified,name,required,type,cause,this,value,value,this,required,type,required,type
TypeMismatchException -> public TypeMismatchException(@Nullable Object value, @Nullable Class<?> requiredType, @Nullable Throwable cause);1517567636;Create a new TypeMismatchException without PropertyChangeEvent._@param value the offending value that couldn't be converted (may be {@code null})_@param requiredType the required target type (or {@code null} if not known)_@param cause the root cause (may be {@code null})_@see #initPropertyName;public TypeMismatchException(@Nullable Object value, @Nullable Class<?> requiredType, @Nullable Throwable cause) {_		super("Failed to convert value of type '" + ClassUtils.getDescriptiveType(value) + "'" +_				(requiredType != null ? " to required type '" + ClassUtils.getQualifiedName(requiredType) + "'" : ""),_				cause)__		this.value = value__		this.requiredType = requiredType__	};create,a,new,type,mismatch,exception,without,property,change,event,param,value,the,offending,value,that,couldn,t,be,converted,may,be,code,null,param,required,type,the,required,target,type,or,code,null,if,not,known,param,cause,the,root,cause,may,be,code,null,see,init,property,name;public,type,mismatch,exception,nullable,object,value,nullable,class,required,type,nullable,throwable,cause,super,failed,to,convert,value,of,type,class,utils,get,descriptive,type,value,required,type,null,to,required,type,class,utils,get,qualified,name,required,type,cause,this,value,value,this,required,type,required,type
TypeMismatchException -> public TypeMismatchException(@Nullable Object value, @Nullable Class<?> requiredType, @Nullable Throwable cause);1519859718;Create a new TypeMismatchException without PropertyChangeEvent._@param value the offending value that couldn't be converted (may be {@code null})_@param requiredType the required target type (or {@code null} if not known)_@param cause the root cause (may be {@code null})_@see #initPropertyName;public TypeMismatchException(@Nullable Object value, @Nullable Class<?> requiredType, @Nullable Throwable cause) {_		super("Failed to convert value of type '" + ClassUtils.getDescriptiveType(value) + "'" +_				(requiredType != null ? " to required type '" + ClassUtils.getQualifiedName(requiredType) + "'" : ""),_				cause)__		this.value = value__		this.requiredType = requiredType__	};create,a,new,type,mismatch,exception,without,property,change,event,param,value,the,offending,value,that,couldn,t,be,converted,may,be,code,null,param,required,type,the,required,target,type,or,code,null,if,not,known,param,cause,the,root,cause,may,be,code,null,see,init,property,name;public,type,mismatch,exception,nullable,object,value,nullable,class,required,type,nullable,throwable,cause,super,failed,to,convert,value,of,type,class,utils,get,descriptive,type,value,required,type,null,to,required,type,class,utils,get,qualified,name,required,type,cause,this,value,value,this,required,type,required,type
TypeMismatchException -> public TypeMismatchException(@Nullable Object value, @Nullable Class<?> requiredType, @Nullable Throwable cause);1519860578;Create a new {@code TypeMismatchException} without a {@code PropertyChangeEvent}._@param value the offending value that couldn't be converted (may be {@code null})_@param requiredType the required target type (or {@code null} if not known)_@param cause the root cause (may be {@code null})_@see #initPropertyName;public TypeMismatchException(@Nullable Object value, @Nullable Class<?> requiredType, @Nullable Throwable cause) {_		super("Failed to convert value of type '" + ClassUtils.getDescriptiveType(value) + "'" +_				(requiredType != null ? " to required type '" + ClassUtils.getQualifiedName(requiredType) + "'" : ""),_				cause)__		this.value = value__		this.requiredType = requiredType__	};create,a,new,code,type,mismatch,exception,without,a,code,property,change,event,param,value,the,offending,value,that,couldn,t,be,converted,may,be,code,null,param,required,type,the,required,target,type,or,code,null,if,not,known,param,cause,the,root,cause,may,be,code,null,see,init,property,name;public,type,mismatch,exception,nullable,object,value,nullable,class,required,type,nullable,throwable,cause,super,failed,to,convert,value,of,type,class,utils,get,descriptive,type,value,required,type,null,to,required,type,class,utils,get,qualified,name,required,type,cause,this,value,value,this,required,type,required,type
TypeMismatchException -> public TypeMismatchException(@Nullable Object value, @Nullable Class<?> requiredType, @Nullable Throwable cause);1530174524;Create a new {@code TypeMismatchException} without a {@code PropertyChangeEvent}._@param value the offending value that couldn't be converted (may be {@code null})_@param requiredType the required target type (or {@code null} if not known)_@param cause the root cause (may be {@code null})_@see #initPropertyName;public TypeMismatchException(@Nullable Object value, @Nullable Class<?> requiredType, @Nullable Throwable cause) {_		super("Failed to convert value of type '" + ClassUtils.getDescriptiveType(value) + "'" +_				(requiredType != null ? " to required type '" + ClassUtils.getQualifiedName(requiredType) + "'" : ""),_				cause)__		this.value = value__		this.requiredType = requiredType__	};create,a,new,code,type,mismatch,exception,without,a,code,property,change,event,param,value,the,offending,value,that,couldn,t,be,converted,may,be,code,null,param,required,type,the,required,target,type,or,code,null,if,not,known,param,cause,the,root,cause,may,be,code,null,see,init,property,name;public,type,mismatch,exception,nullable,object,value,nullable,class,required,type,nullable,throwable,cause,super,failed,to,convert,value,of,type,class,utils,get,descriptive,type,value,required,type,null,to,required,type,class,utils,get,qualified,name,required,type,cause,this,value,value,this,required,type,required,type
