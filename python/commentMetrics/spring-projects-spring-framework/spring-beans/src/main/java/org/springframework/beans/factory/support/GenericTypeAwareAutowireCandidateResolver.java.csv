# id;timestamp;commentText;codeText;commentWords;codeWords
GenericTypeAwareAutowireCandidateResolver -> @Override 	public Object getSuggestedValue(DependencyDescriptor descriptor);1381788683;This implementation always returns {@code null},_leaving suggested value support up to subclasses.;@Override_	public Object getSuggestedValue(DependencyDescriptor descriptor) {_		return null__	};this,implementation,always,returns,code,null,leaving,suggested,value,support,up,to,subclasses;override,public,object,get,suggested,value,dependency,descriptor,descriptor,return,null
GenericTypeAwareAutowireCandidateResolver -> @Override 	public Object getSuggestedValue(DependencyDescriptor descriptor);1382716358;This implementation always returns {@code null},_leaving suggested value support up to subclasses.;@Override_	public Object getSuggestedValue(DependencyDescriptor descriptor) {_		return null__	};this,implementation,always,returns,code,null,leaving,suggested,value,support,up,to,subclasses;override,public,object,get,suggested,value,dependency,descriptor,descriptor,return,null
GenericTypeAwareAutowireCandidateResolver -> @Override 	public Object getSuggestedValue(DependencyDescriptor descriptor);1382826936;This implementation always returns {@code null},_leaving suggested value support up to subclasses.;@Override_	public Object getSuggestedValue(DependencyDescriptor descriptor) {_		return null__	};this,implementation,always,returns,code,null,leaving,suggested,value,support,up,to,subclasses;override,public,object,get,suggested,value,dependency,descriptor,descriptor,return,null
GenericTypeAwareAutowireCandidateResolver -> @Override 	public Object getSuggestedValue(DependencyDescriptor descriptor);1383166924;This implementation always returns {@code null},_leaving suggested value support up to subclasses.;@Override_	public Object getSuggestedValue(DependencyDescriptor descriptor) {_		return null__	};this,implementation,always,returns,code,null,leaving,suggested,value,support,up,to,subclasses;override,public,object,get,suggested,value,dependency,descriptor,descriptor,return,null
GenericTypeAwareAutowireCandidateResolver -> @Override 	public Object getSuggestedValue(DependencyDescriptor descriptor);1385507478;This implementation always returns {@code null}, leaving suggested value support up_to subclasses.;@Override_	public Object getSuggestedValue(DependencyDescriptor descriptor) {_		return null__	};this,implementation,always,returns,code,null,leaving,suggested,value,support,up,to,subclasses;override,public,object,get,suggested,value,dependency,descriptor,descriptor,return,null
GenericTypeAwareAutowireCandidateResolver -> @Override 	public Object getSuggestedValue(DependencyDescriptor descriptor);1386541456;This implementation always returns {@code null}, leaving suggested value support up_to subclasses.;@Override_	public Object getSuggestedValue(DependencyDescriptor descriptor) {_		return null__	};this,implementation,always,returns,code,null,leaving,suggested,value,support,up,to,subclasses;override,public,object,get,suggested,value,dependency,descriptor,descriptor,return,null
GenericTypeAwareAutowireCandidateResolver -> @Override 	public Object getSuggestedValue(DependencyDescriptor descriptor);1391279320;This implementation always returns {@code null}, leaving suggested value support up_to subclasses.;@Override_	public Object getSuggestedValue(DependencyDescriptor descriptor) {_		return null__	};this,implementation,always,returns,code,null,leaving,suggested,value,support,up,to,subclasses;override,public,object,get,suggested,value,dependency,descriptor,descriptor,return,null
GenericTypeAwareAutowireCandidateResolver -> @Override 	public Object getSuggestedValue(DependencyDescriptor descriptor);1471445956;This implementation always returns {@code null}, leaving suggested value support up_to subclasses.;@Override_	public Object getSuggestedValue(DependencyDescriptor descriptor) {_		return null__	};this,implementation,always,returns,code,null,leaving,suggested,value,support,up,to,subclasses;override,public,object,get,suggested,value,dependency,descriptor,descriptor,return,null
GenericTypeAwareAutowireCandidateResolver -> @Override 	public Object getSuggestedValue(DependencyDescriptor descriptor);1482012648;This implementation always returns {@code null}, leaving suggested value support up_to subclasses.;@Override_	public Object getSuggestedValue(DependencyDescriptor descriptor) {_		return null__	};this,implementation,always,returns,code,null,leaving,suggested,value,support,up,to,subclasses;override,public,object,get,suggested,value,dependency,descriptor,descriptor,return,null
GenericTypeAwareAutowireCandidateResolver -> protected boolean checkGenericTypeMatch(BeanDefinitionHolder bdHolder, DependencyDescriptor descriptor);1382716358;Match the given dependency type with its generic type information_against the given candidate bean definition.;protected boolean checkGenericTypeMatch(BeanDefinitionHolder bdHolder, DependencyDescriptor descriptor) {_		ResolvableType dependencyType = descriptor.getResolvableType()__		if (!dependencyType.hasGenerics()) {_			_			return true__		}_		ResolvableType targetType = null__		RootBeanDefinition rbd = null__		if (bdHolder.getBeanDefinition() instanceof RootBeanDefinition) {_			rbd = (RootBeanDefinition) bdHolder.getBeanDefinition()__		}_		if (rbd != null && rbd.getResolvedFactoryMethod() != null) {_			_			_			targetType = ResolvableType.forMethodReturnType(rbd.getResolvedFactoryMethod())__		}_		if (targetType == null) {_			_			if (this.beanFactory != null) {_				Class<?> beanType = this.beanFactory.getType(bdHolder.getBeanName())__				if (beanType != null) {_					targetType = ResolvableType.forClass(ClassUtils.getUserClass(beanType))__				}_			}_			_			_			if (targetType == null && rbd != null && rbd.hasBeanClass() && rbd.getFactoryMethodName() == null) {_				Class<?> beanClass = rbd.getBeanClass()__				if (!FactoryBean.class.isAssignableFrom(beanClass)) {_					targetType = ResolvableType.forClass(ClassUtils.getUserClass(beanClass))__				}_			}_		}_		if (targetType == null) {_			return true__		}_		if (descriptor.fallbackMatchAllowed() && targetType.hasUnresolvableGenerics()) {_			return descriptor.getDependencyType().isAssignableFrom(targetType.getRawClass())__		}_		return dependencyType.isAssignableFrom(targetType)__	};match,the,given,dependency,type,with,its,generic,type,information,against,the,given,candidate,bean,definition;protected,boolean,check,generic,type,match,bean,definition,holder,bd,holder,dependency,descriptor,descriptor,resolvable,type,dependency,type,descriptor,get,resolvable,type,if,dependency,type,has,generics,return,true,resolvable,type,target,type,null,root,bean,definition,rbd,null,if,bd,holder,get,bean,definition,instanceof,root,bean,definition,rbd,root,bean,definition,bd,holder,get,bean,definition,if,rbd,null,rbd,get,resolved,factory,method,null,target,type,resolvable,type,for,method,return,type,rbd,get,resolved,factory,method,if,target,type,null,if,this,bean,factory,null,class,bean,type,this,bean,factory,get,type,bd,holder,get,bean,name,if,bean,type,null,target,type,resolvable,type,for,class,class,utils,get,user,class,bean,type,if,target,type,null,rbd,null,rbd,has,bean,class,rbd,get,factory,method,name,null,class,bean,class,rbd,get,bean,class,if,factory,bean,class,is,assignable,from,bean,class,target,type,resolvable,type,for,class,class,utils,get,user,class,bean,class,if,target,type,null,return,true,if,descriptor,fallback,match,allowed,target,type,has,unresolvable,generics,return,descriptor,get,dependency,type,is,assignable,from,target,type,get,raw,class,return,dependency,type,is,assignable,from,target,type
GenericTypeAwareAutowireCandidateResolver -> protected boolean checkGenericTypeMatch(BeanDefinitionHolder bdHolder, DependencyDescriptor descriptor);1382826936;Match the given dependency type with its generic type information_against the given candidate bean definition.;protected boolean checkGenericTypeMatch(BeanDefinitionHolder bdHolder, DependencyDescriptor descriptor) {_		ResolvableType dependencyType = descriptor.getResolvableType()__		if (dependencyType.getType() instanceof Class) {_			_			return true__		}_		ResolvableType targetType = null__		RootBeanDefinition rbd = null__		if (bdHolder.getBeanDefinition() instanceof RootBeanDefinition) {_			rbd = (RootBeanDefinition) bdHolder.getBeanDefinition()__		}_		if (rbd != null && rbd.getFactoryMethodName() != null) {_			_			_			Class<?> preResolved = rbd.resolvedFactoryMethodReturnType__			if (preResolved != null) {_				targetType = ResolvableType.forClass(preResolved)__			}_			else {_				Method resolvedFactoryMethod = rbd.getResolvedFactoryMethod()__				if (resolvedFactoryMethod != null) {_					targetType = ResolvableType.forMethodReturnType(resolvedFactoryMethod)__				}_			}_		}_		if (targetType == null) {_			_			if (this.beanFactory != null) {_				Class<?> beanType = this.beanFactory.getType(bdHolder.getBeanName())__				if (beanType != null) {_					targetType = ResolvableType.forClass(ClassUtils.getUserClass(beanType))__				}_			}_			_			_			if (targetType == null && rbd != null && rbd.hasBeanClass() && rbd.getFactoryMethodName() == null) {_				Class<?> beanClass = rbd.getBeanClass()__				if (!FactoryBean.class.isAssignableFrom(beanClass)) {_					targetType = ResolvableType.forClass(ClassUtils.getUserClass(beanClass))__				}_			}_		}_		if (targetType == null) {_			return true__		}_		if (descriptor.fallbackMatchAllowed() && targetType.hasUnresolvableGenerics()) {_			return descriptor.getDependencyType().isAssignableFrom(targetType.getRawClass())__		}_		return dependencyType.isAssignableFrom(targetType)__	};match,the,given,dependency,type,with,its,generic,type,information,against,the,given,candidate,bean,definition;protected,boolean,check,generic,type,match,bean,definition,holder,bd,holder,dependency,descriptor,descriptor,resolvable,type,dependency,type,descriptor,get,resolvable,type,if,dependency,type,get,type,instanceof,class,return,true,resolvable,type,target,type,null,root,bean,definition,rbd,null,if,bd,holder,get,bean,definition,instanceof,root,bean,definition,rbd,root,bean,definition,bd,holder,get,bean,definition,if,rbd,null,rbd,get,factory,method,name,null,class,pre,resolved,rbd,resolved,factory,method,return,type,if,pre,resolved,null,target,type,resolvable,type,for,class,pre,resolved,else,method,resolved,factory,method,rbd,get,resolved,factory,method,if,resolved,factory,method,null,target,type,resolvable,type,for,method,return,type,resolved,factory,method,if,target,type,null,if,this,bean,factory,null,class,bean,type,this,bean,factory,get,type,bd,holder,get,bean,name,if,bean,type,null,target,type,resolvable,type,for,class,class,utils,get,user,class,bean,type,if,target,type,null,rbd,null,rbd,has,bean,class,rbd,get,factory,method,name,null,class,bean,class,rbd,get,bean,class,if,factory,bean,class,is,assignable,from,bean,class,target,type,resolvable,type,for,class,class,utils,get,user,class,bean,class,if,target,type,null,return,true,if,descriptor,fallback,match,allowed,target,type,has,unresolvable,generics,return,descriptor,get,dependency,type,is,assignable,from,target,type,get,raw,class,return,dependency,type,is,assignable,from,target,type
GenericTypeAwareAutowireCandidateResolver -> protected boolean checkGenericTypeMatch(BeanDefinitionHolder bdHolder, DependencyDescriptor descriptor);1383166924;Match the given dependency type with its generic type information_against the given candidate bean definition.;protected boolean checkGenericTypeMatch(BeanDefinitionHolder bdHolder, DependencyDescriptor descriptor) {_		ResolvableType dependencyType = descriptor.getResolvableType()__		if (dependencyType.getType() instanceof Class) {_			_			return true__		}_		ResolvableType targetType = null__		RootBeanDefinition rbd = null__		if (bdHolder.getBeanDefinition() instanceof RootBeanDefinition) {_			rbd = (RootBeanDefinition) bdHolder.getBeanDefinition()__		}_		if (rbd != null && rbd.getFactoryMethodName() != null) {_			_			_			Class<?> preResolved = rbd.resolvedFactoryMethodReturnType__			if (preResolved != null) {_				targetType = ResolvableType.forClass(preResolved)__			}_			else {_				Method resolvedFactoryMethod = rbd.getResolvedFactoryMethod()__				if (resolvedFactoryMethod != null) {_					if (descriptor.getDependencyType().isAssignableFrom(resolvedFactoryMethod.getReturnType())) {_						_						_						_						targetType = ResolvableType.forMethodReturnType(resolvedFactoryMethod)__					}_				}_			}_		}_		if (targetType == null) {_			_			if (this.beanFactory != null) {_				Class<?> beanType = this.beanFactory.getType(bdHolder.getBeanName())__				if (beanType != null) {_					targetType = ResolvableType.forClass(ClassUtils.getUserClass(beanType))__				}_			}_			_			_			if (targetType == null && rbd != null && rbd.hasBeanClass() && rbd.getFactoryMethodName() == null) {_				Class<?> beanClass = rbd.getBeanClass()__				if (!FactoryBean.class.isAssignableFrom(beanClass)) {_					targetType = ResolvableType.forClass(ClassUtils.getUserClass(beanClass))__				}_			}_		}_		if (targetType == null) {_			return true__		}_		if (descriptor.fallbackMatchAllowed() && targetType.hasUnresolvableGenerics()) {_			return descriptor.getDependencyType().isAssignableFrom(targetType.getRawClass())__		}_		return dependencyType.isAssignableFrom(targetType)__	};match,the,given,dependency,type,with,its,generic,type,information,against,the,given,candidate,bean,definition;protected,boolean,check,generic,type,match,bean,definition,holder,bd,holder,dependency,descriptor,descriptor,resolvable,type,dependency,type,descriptor,get,resolvable,type,if,dependency,type,get,type,instanceof,class,return,true,resolvable,type,target,type,null,root,bean,definition,rbd,null,if,bd,holder,get,bean,definition,instanceof,root,bean,definition,rbd,root,bean,definition,bd,holder,get,bean,definition,if,rbd,null,rbd,get,factory,method,name,null,class,pre,resolved,rbd,resolved,factory,method,return,type,if,pre,resolved,null,target,type,resolvable,type,for,class,pre,resolved,else,method,resolved,factory,method,rbd,get,resolved,factory,method,if,resolved,factory,method,null,if,descriptor,get,dependency,type,is,assignable,from,resolved,factory,method,get,return,type,target,type,resolvable,type,for,method,return,type,resolved,factory,method,if,target,type,null,if,this,bean,factory,null,class,bean,type,this,bean,factory,get,type,bd,holder,get,bean,name,if,bean,type,null,target,type,resolvable,type,for,class,class,utils,get,user,class,bean,type,if,target,type,null,rbd,null,rbd,has,bean,class,rbd,get,factory,method,name,null,class,bean,class,rbd,get,bean,class,if,factory,bean,class,is,assignable,from,bean,class,target,type,resolvable,type,for,class,class,utils,get,user,class,bean,class,if,target,type,null,return,true,if,descriptor,fallback,match,allowed,target,type,has,unresolvable,generics,return,descriptor,get,dependency,type,is,assignable,from,target,type,get,raw,class,return,dependency,type,is,assignable,from,target,type
GenericTypeAwareAutowireCandidateResolver -> protected boolean checkGenericTypeMatch(BeanDefinitionHolder bdHolder, DependencyDescriptor descriptor);1385507478;Match the given dependency type with its generic type information against the given_candidate bean definition.;protected boolean checkGenericTypeMatch(BeanDefinitionHolder bdHolder, DependencyDescriptor descriptor) {_		ResolvableType dependencyType = descriptor.getResolvableType()__		if (dependencyType.getType() instanceof Class) {_			_			return true__		}_		ResolvableType targetType = null__		RootBeanDefinition rbd = null__		if (bdHolder.getBeanDefinition() instanceof RootBeanDefinition) {_			rbd = (RootBeanDefinition) bdHolder.getBeanDefinition()__		}_		if (rbd != null && rbd.getFactoryMethodName() != null) {_			_			_			Class<?> preResolved = rbd.resolvedFactoryMethodReturnType__			if (preResolved != null) {_				targetType = ResolvableType.forClass(preResolved)__			}_			else {_				Method resolvedFactoryMethod = rbd.getResolvedFactoryMethod()__				if (resolvedFactoryMethod != null) {_					if (descriptor.getDependencyType().isAssignableFrom(resolvedFactoryMethod.getReturnType())) {_						_						_						_						targetType = ResolvableType.forMethodReturnType(resolvedFactoryMethod)__					}_				}_			}_		}_		if (targetType == null) {_			_			if (this.beanFactory != null) {_				Class<?> beanType = this.beanFactory.getType(bdHolder.getBeanName())__				if (beanType != null) {_					targetType = ResolvableType.forClass(ClassUtils.getUserClass(beanType))__				}_			}_			_			_			if (targetType == null && rbd != null && rbd.hasBeanClass() && rbd.getFactoryMethodName() == null) {_				Class<?> beanClass = rbd.getBeanClass()__				if (!FactoryBean.class.isAssignableFrom(beanClass)) {_					targetType = ResolvableType.forClass(ClassUtils.getUserClass(beanClass))__				}_			}_		}_		if (targetType == null) {_			return true__		}_		if (descriptor.fallbackMatchAllowed() && targetType.hasUnresolvableGenerics()) {_			return descriptor.getDependencyType().isAssignableFrom(targetType.getRawClass())__		}_		return dependencyType.isAssignableFrom(targetType)__	};match,the,given,dependency,type,with,its,generic,type,information,against,the,given,candidate,bean,definition;protected,boolean,check,generic,type,match,bean,definition,holder,bd,holder,dependency,descriptor,descriptor,resolvable,type,dependency,type,descriptor,get,resolvable,type,if,dependency,type,get,type,instanceof,class,return,true,resolvable,type,target,type,null,root,bean,definition,rbd,null,if,bd,holder,get,bean,definition,instanceof,root,bean,definition,rbd,root,bean,definition,bd,holder,get,bean,definition,if,rbd,null,rbd,get,factory,method,name,null,class,pre,resolved,rbd,resolved,factory,method,return,type,if,pre,resolved,null,target,type,resolvable,type,for,class,pre,resolved,else,method,resolved,factory,method,rbd,get,resolved,factory,method,if,resolved,factory,method,null,if,descriptor,get,dependency,type,is,assignable,from,resolved,factory,method,get,return,type,target,type,resolvable,type,for,method,return,type,resolved,factory,method,if,target,type,null,if,this,bean,factory,null,class,bean,type,this,bean,factory,get,type,bd,holder,get,bean,name,if,bean,type,null,target,type,resolvable,type,for,class,class,utils,get,user,class,bean,type,if,target,type,null,rbd,null,rbd,has,bean,class,rbd,get,factory,method,name,null,class,bean,class,rbd,get,bean,class,if,factory,bean,class,is,assignable,from,bean,class,target,type,resolvable,type,for,class,class,utils,get,user,class,bean,class,if,target,type,null,return,true,if,descriptor,fallback,match,allowed,target,type,has,unresolvable,generics,return,descriptor,get,dependency,type,is,assignable,from,target,type,get,raw,class,return,dependency,type,is,assignable,from,target,type
GenericTypeAwareAutowireCandidateResolver -> protected boolean checkGenericTypeMatch(BeanDefinitionHolder bdHolder, DependencyDescriptor descriptor);1386541456;Match the given dependency type with its generic type information against the given_candidate bean definition.;protected boolean checkGenericTypeMatch(BeanDefinitionHolder bdHolder, DependencyDescriptor descriptor) {_		ResolvableType dependencyType = descriptor.getResolvableType()__		if (dependencyType.getType() instanceof Class) {_			_			return true__		}_		ResolvableType targetType = null__		RootBeanDefinition rbd = null__		if (bdHolder.getBeanDefinition() instanceof RootBeanDefinition) {_			rbd = (RootBeanDefinition) bdHolder.getBeanDefinition()__		}_		if (rbd != null) {_			_			targetType = getReturnTypeForFactoryMethod(rbd, descriptor)__			if (targetType == null) {_				RootBeanDefinition dbd = getResolvedDecoratedDefinition(rbd)__				if (dbd != null) {_					targetType = getReturnTypeForFactoryMethod(dbd, descriptor)__				}_			}_		}_		if (targetType == null) {_			_			if (this.beanFactory != null) {_				Class<?> beanType = this.beanFactory.getType(bdHolder.getBeanName())__				if (beanType != null) {_					targetType = ResolvableType.forClass(ClassUtils.getUserClass(beanType))__				}_			}_			_			_			if (targetType == null && rbd != null && rbd.hasBeanClass() && rbd.getFactoryMethodName() == null) {_				Class<?> beanClass = rbd.getBeanClass()__				if (!FactoryBean.class.isAssignableFrom(beanClass)) {_					targetType = ResolvableType.forClass(ClassUtils.getUserClass(beanClass))__				}_			}_		}_		if (targetType == null) {_			return true__		}_		if (descriptor.fallbackMatchAllowed() && targetType.hasUnresolvableGenerics()) {_			return descriptor.getDependencyType().isAssignableFrom(targetType.getRawClass())__		}_		return dependencyType.isAssignableFrom(targetType)__	};match,the,given,dependency,type,with,its,generic,type,information,against,the,given,candidate,bean,definition;protected,boolean,check,generic,type,match,bean,definition,holder,bd,holder,dependency,descriptor,descriptor,resolvable,type,dependency,type,descriptor,get,resolvable,type,if,dependency,type,get,type,instanceof,class,return,true,resolvable,type,target,type,null,root,bean,definition,rbd,null,if,bd,holder,get,bean,definition,instanceof,root,bean,definition,rbd,root,bean,definition,bd,holder,get,bean,definition,if,rbd,null,target,type,get,return,type,for,factory,method,rbd,descriptor,if,target,type,null,root,bean,definition,dbd,get,resolved,decorated,definition,rbd,if,dbd,null,target,type,get,return,type,for,factory,method,dbd,descriptor,if,target,type,null,if,this,bean,factory,null,class,bean,type,this,bean,factory,get,type,bd,holder,get,bean,name,if,bean,type,null,target,type,resolvable,type,for,class,class,utils,get,user,class,bean,type,if,target,type,null,rbd,null,rbd,has,bean,class,rbd,get,factory,method,name,null,class,bean,class,rbd,get,bean,class,if,factory,bean,class,is,assignable,from,bean,class,target,type,resolvable,type,for,class,class,utils,get,user,class,bean,class,if,target,type,null,return,true,if,descriptor,fallback,match,allowed,target,type,has,unresolvable,generics,return,descriptor,get,dependency,type,is,assignable,from,target,type,get,raw,class,return,dependency,type,is,assignable,from,target,type
GenericTypeAwareAutowireCandidateResolver -> protected boolean checkGenericTypeMatch(BeanDefinitionHolder bdHolder, DependencyDescriptor descriptor);1391279320;Match the given dependency type with its generic type information against the given_candidate bean definition.;protected boolean checkGenericTypeMatch(BeanDefinitionHolder bdHolder, DependencyDescriptor descriptor) {_		ResolvableType dependencyType = descriptor.getResolvableType()__		if (dependencyType.getType() instanceof Class) {_			_			return true__		}_		ResolvableType targetType = null__		RootBeanDefinition rbd = null__		if (bdHolder.getBeanDefinition() instanceof RootBeanDefinition) {_			rbd = (RootBeanDefinition) bdHolder.getBeanDefinition()__		}_		if (rbd != null) {_			_			targetType = getReturnTypeForFactoryMethod(rbd, descriptor)__			if (targetType == null) {_				RootBeanDefinition dbd = getResolvedDecoratedDefinition(rbd)__				if (dbd != null) {_					targetType = getReturnTypeForFactoryMethod(dbd, descriptor)__				}_			}_		}_		if (targetType == null) {_			_			if (this.beanFactory != null) {_				Class<?> beanType = this.beanFactory.getType(bdHolder.getBeanName())__				if (beanType != null) {_					targetType = ResolvableType.forClass(ClassUtils.getUserClass(beanType))__				}_			}_			_			_			if (targetType == null && rbd != null && rbd.hasBeanClass() && rbd.getFactoryMethodName() == null) {_				Class<?> beanClass = rbd.getBeanClass()__				if (!FactoryBean.class.isAssignableFrom(beanClass)) {_					targetType = ResolvableType.forClass(ClassUtils.getUserClass(beanClass))__				}_			}_		}_		if (targetType == null || (descriptor.fallbackMatchAllowed() && targetType.hasUnresolvableGenerics())) {_			return true__		}_		_		return dependencyType.isAssignableFrom(targetType)__	};match,the,given,dependency,type,with,its,generic,type,information,against,the,given,candidate,bean,definition;protected,boolean,check,generic,type,match,bean,definition,holder,bd,holder,dependency,descriptor,descriptor,resolvable,type,dependency,type,descriptor,get,resolvable,type,if,dependency,type,get,type,instanceof,class,return,true,resolvable,type,target,type,null,root,bean,definition,rbd,null,if,bd,holder,get,bean,definition,instanceof,root,bean,definition,rbd,root,bean,definition,bd,holder,get,bean,definition,if,rbd,null,target,type,get,return,type,for,factory,method,rbd,descriptor,if,target,type,null,root,bean,definition,dbd,get,resolved,decorated,definition,rbd,if,dbd,null,target,type,get,return,type,for,factory,method,dbd,descriptor,if,target,type,null,if,this,bean,factory,null,class,bean,type,this,bean,factory,get,type,bd,holder,get,bean,name,if,bean,type,null,target,type,resolvable,type,for,class,class,utils,get,user,class,bean,type,if,target,type,null,rbd,null,rbd,has,bean,class,rbd,get,factory,method,name,null,class,bean,class,rbd,get,bean,class,if,factory,bean,class,is,assignable,from,bean,class,target,type,resolvable,type,for,class,class,utils,get,user,class,bean,class,if,target,type,null,descriptor,fallback,match,allowed,target,type,has,unresolvable,generics,return,true,return,dependency,type,is,assignable,from,target,type
GenericTypeAwareAutowireCandidateResolver -> protected boolean checkGenericTypeMatch(BeanDefinitionHolder bdHolder, DependencyDescriptor descriptor);1471445956;Match the given dependency type with its generic type information against the given_candidate bean definition.;protected boolean checkGenericTypeMatch(BeanDefinitionHolder bdHolder, DependencyDescriptor descriptor) {_		ResolvableType dependencyType = descriptor.getResolvableType()__		if (dependencyType.getType() instanceof Class) {_			_			return true__		}__		ResolvableType targetType = null__		boolean cacheType = false__		RootBeanDefinition rbd = null__		if (bdHolder.getBeanDefinition() instanceof RootBeanDefinition) {_			rbd = (RootBeanDefinition) bdHolder.getBeanDefinition()__		}_		if (rbd != null) {_			targetType = rbd.targetType__			if (targetType == null) {_				cacheType = true__				_				targetType = getReturnTypeForFactoryMethod(rbd, descriptor)__				if (targetType == null) {_					RootBeanDefinition dbd = getResolvedDecoratedDefinition(rbd)__					if (dbd != null) {_						targetType = dbd.targetType__						if (targetType == null) {_							targetType = getReturnTypeForFactoryMethod(dbd, descriptor)__						}_					}_				}_			}_		}__		if (targetType == null) {_			_			if (this.beanFactory != null) {_				Class<?> beanType = this.beanFactory.getType(bdHolder.getBeanName())__				if (beanType != null) {_					targetType = ResolvableType.forClass(ClassUtils.getUserClass(beanType))__				}_			}_			_			_			if (targetType == null && rbd != null && rbd.hasBeanClass() && rbd.getFactoryMethodName() == null) {_				Class<?> beanClass = rbd.getBeanClass()__				if (!FactoryBean.class.isAssignableFrom(beanClass)) {_					targetType = ResolvableType.forClass(ClassUtils.getUserClass(beanClass))__				}_			}_		}__		if (targetType == null) {_			return true__		}_		if (cacheType) {_			rbd.targetType = targetType__		}_		if (descriptor.fallbackMatchAllowed() && targetType.hasUnresolvableGenerics()) {_			return true__		}_		_		return dependencyType.isAssignableFrom(targetType)__	};match,the,given,dependency,type,with,its,generic,type,information,against,the,given,candidate,bean,definition;protected,boolean,check,generic,type,match,bean,definition,holder,bd,holder,dependency,descriptor,descriptor,resolvable,type,dependency,type,descriptor,get,resolvable,type,if,dependency,type,get,type,instanceof,class,return,true,resolvable,type,target,type,null,boolean,cache,type,false,root,bean,definition,rbd,null,if,bd,holder,get,bean,definition,instanceof,root,bean,definition,rbd,root,bean,definition,bd,holder,get,bean,definition,if,rbd,null,target,type,rbd,target,type,if,target,type,null,cache,type,true,target,type,get,return,type,for,factory,method,rbd,descriptor,if,target,type,null,root,bean,definition,dbd,get,resolved,decorated,definition,rbd,if,dbd,null,target,type,dbd,target,type,if,target,type,null,target,type,get,return,type,for,factory,method,dbd,descriptor,if,target,type,null,if,this,bean,factory,null,class,bean,type,this,bean,factory,get,type,bd,holder,get,bean,name,if,bean,type,null,target,type,resolvable,type,for,class,class,utils,get,user,class,bean,type,if,target,type,null,rbd,null,rbd,has,bean,class,rbd,get,factory,method,name,null,class,bean,class,rbd,get,bean,class,if,factory,bean,class,is,assignable,from,bean,class,target,type,resolvable,type,for,class,class,utils,get,user,class,bean,class,if,target,type,null,return,true,if,cache,type,rbd,target,type,target,type,if,descriptor,fallback,match,allowed,target,type,has,unresolvable,generics,return,true,return,dependency,type,is,assignable,from,target,type
GenericTypeAwareAutowireCandidateResolver -> protected boolean checkGenericTypeMatch(BeanDefinitionHolder bdHolder, DependencyDescriptor descriptor);1482012648;Match the given dependency type with its generic type information against the given_candidate bean definition.;protected boolean checkGenericTypeMatch(BeanDefinitionHolder bdHolder, DependencyDescriptor descriptor) {_		ResolvableType dependencyType = descriptor.getResolvableType()__		if (dependencyType.getType() instanceof Class) {_			_			return true__		}__		ResolvableType targetType = null__		boolean cacheType = false__		RootBeanDefinition rbd = null__		if (bdHolder.getBeanDefinition() instanceof RootBeanDefinition) {_			rbd = (RootBeanDefinition) bdHolder.getBeanDefinition()__		}_		if (rbd != null) {_			targetType = rbd.targetType__			if (targetType == null) {_				cacheType = true__				_				targetType = getReturnTypeForFactoryMethod(rbd, descriptor)__				if (targetType == null) {_					RootBeanDefinition dbd = getResolvedDecoratedDefinition(rbd)__					if (dbd != null) {_						targetType = dbd.targetType__						if (targetType == null) {_							targetType = getReturnTypeForFactoryMethod(dbd, descriptor)__						}_					}_				}_			}_		}__		if (targetType == null) {_			_			if (this.beanFactory != null) {_				Class<?> beanType = this.beanFactory.getType(bdHolder.getBeanName())__				if (beanType != null) {_					targetType = ResolvableType.forClass(ClassUtils.getUserClass(beanType))__				}_			}_			_			_			if (targetType == null && rbd != null && rbd.hasBeanClass() && rbd.getFactoryMethodName() == null) {_				Class<?> beanClass = rbd.getBeanClass()__				if (!FactoryBean.class.isAssignableFrom(beanClass)) {_					targetType = ResolvableType.forClass(ClassUtils.getUserClass(beanClass))__				}_			}_		}__		if (targetType == null) {_			return true__		}_		if (cacheType) {_			rbd.targetType = targetType__		}_		if (descriptor.fallbackMatchAllowed() && targetType.hasUnresolvableGenerics()) {_			return true__		}_		_		return dependencyType.isAssignableFrom(targetType)__	};match,the,given,dependency,type,with,its,generic,type,information,against,the,given,candidate,bean,definition;protected,boolean,check,generic,type,match,bean,definition,holder,bd,holder,dependency,descriptor,descriptor,resolvable,type,dependency,type,descriptor,get,resolvable,type,if,dependency,type,get,type,instanceof,class,return,true,resolvable,type,target,type,null,boolean,cache,type,false,root,bean,definition,rbd,null,if,bd,holder,get,bean,definition,instanceof,root,bean,definition,rbd,root,bean,definition,bd,holder,get,bean,definition,if,rbd,null,target,type,rbd,target,type,if,target,type,null,cache,type,true,target,type,get,return,type,for,factory,method,rbd,descriptor,if,target,type,null,root,bean,definition,dbd,get,resolved,decorated,definition,rbd,if,dbd,null,target,type,dbd,target,type,if,target,type,null,target,type,get,return,type,for,factory,method,dbd,descriptor,if,target,type,null,if,this,bean,factory,null,class,bean,type,this,bean,factory,get,type,bd,holder,get,bean,name,if,bean,type,null,target,type,resolvable,type,for,class,class,utils,get,user,class,bean,type,if,target,type,null,rbd,null,rbd,has,bean,class,rbd,get,factory,method,name,null,class,bean,class,rbd,get,bean,class,if,factory,bean,class,is,assignable,from,bean,class,target,type,resolvable,type,for,class,class,utils,get,user,class,bean,class,if,target,type,null,return,true,if,cache,type,rbd,target,type,target,type,if,descriptor,fallback,match,allowed,target,type,has,unresolvable,generics,return,true,return,dependency,type,is,assignable,from,target,type
GenericTypeAwareAutowireCandidateResolver -> protected boolean checkGenericTypeMatch(BeanDefinitionHolder bdHolder, DependencyDescriptor descriptor);1493811736;Match the given dependency type with its generic type information against the given_candidate bean definition.;protected boolean checkGenericTypeMatch(BeanDefinitionHolder bdHolder, DependencyDescriptor descriptor) {_		ResolvableType dependencyType = descriptor.getResolvableType()__		if (dependencyType.getType() instanceof Class) {_			_			return true__		}__		ResolvableType targetType = null__		boolean cacheType = false__		RootBeanDefinition rbd = null__		if (bdHolder.getBeanDefinition() instanceof RootBeanDefinition) {_			rbd = (RootBeanDefinition) bdHolder.getBeanDefinition()__		}_		if (rbd != null) {_			targetType = rbd.targetType__			if (targetType == null) {_				cacheType = true__				_				targetType = getReturnTypeForFactoryMethod(rbd, descriptor)__				if (targetType == null) {_					RootBeanDefinition dbd = getResolvedDecoratedDefinition(rbd)__					if (dbd != null) {_						targetType = dbd.targetType__						if (targetType == null) {_							targetType = getReturnTypeForFactoryMethod(dbd, descriptor)__						}_					}_				}_			}_		}__		if (targetType == null) {_			_			if (this.beanFactory != null) {_				Class<?> beanType = this.beanFactory.getType(bdHolder.getBeanName())__				if (beanType != null) {_					targetType = ResolvableType.forClass(ClassUtils.getUserClass(beanType))__				}_			}_			_			_			if (targetType == null && rbd != null && rbd.hasBeanClass() && rbd.getFactoryMethodName() == null) {_				Class<?> beanClass = rbd.getBeanClass()__				if (!FactoryBean.class.isAssignableFrom(beanClass)) {_					targetType = ResolvableType.forClass(ClassUtils.getUserClass(beanClass))__				}_			}_		}__		if (targetType == null) {_			return true__		}_		if (cacheType) {_			rbd.targetType = targetType__		}_		if (descriptor.fallbackMatchAllowed() && targetType.hasUnresolvableGenerics()) {_			return true__		}_		_		return dependencyType.isAssignableFrom(targetType)__	};match,the,given,dependency,type,with,its,generic,type,information,against,the,given,candidate,bean,definition;protected,boolean,check,generic,type,match,bean,definition,holder,bd,holder,dependency,descriptor,descriptor,resolvable,type,dependency,type,descriptor,get,resolvable,type,if,dependency,type,get,type,instanceof,class,return,true,resolvable,type,target,type,null,boolean,cache,type,false,root,bean,definition,rbd,null,if,bd,holder,get,bean,definition,instanceof,root,bean,definition,rbd,root,bean,definition,bd,holder,get,bean,definition,if,rbd,null,target,type,rbd,target,type,if,target,type,null,cache,type,true,target,type,get,return,type,for,factory,method,rbd,descriptor,if,target,type,null,root,bean,definition,dbd,get,resolved,decorated,definition,rbd,if,dbd,null,target,type,dbd,target,type,if,target,type,null,target,type,get,return,type,for,factory,method,dbd,descriptor,if,target,type,null,if,this,bean,factory,null,class,bean,type,this,bean,factory,get,type,bd,holder,get,bean,name,if,bean,type,null,target,type,resolvable,type,for,class,class,utils,get,user,class,bean,type,if,target,type,null,rbd,null,rbd,has,bean,class,rbd,get,factory,method,name,null,class,bean,class,rbd,get,bean,class,if,factory,bean,class,is,assignable,from,bean,class,target,type,resolvable,type,for,class,class,utils,get,user,class,bean,class,if,target,type,null,return,true,if,cache,type,rbd,target,type,target,type,if,descriptor,fallback,match,allowed,target,type,has,unresolvable,generics,return,true,return,dependency,type,is,assignable,from,target,type
GenericTypeAwareAutowireCandidateResolver -> protected boolean checkGenericTypeMatch(BeanDefinitionHolder bdHolder, DependencyDescriptor descriptor);1495868221;Match the given dependency type with its generic type information against the given_candidate bean definition.;protected boolean checkGenericTypeMatch(BeanDefinitionHolder bdHolder, DependencyDescriptor descriptor) {_		ResolvableType dependencyType = descriptor.getResolvableType()__		if (dependencyType.getType() instanceof Class) {_			_			return true__		}__		ResolvableType targetType = null__		boolean cacheType = false__		RootBeanDefinition rbd = null__		if (bdHolder.getBeanDefinition() instanceof RootBeanDefinition) {_			rbd = (RootBeanDefinition) bdHolder.getBeanDefinition()__		}_		if (rbd != null) {_			targetType = rbd.targetType__			if (targetType == null) {_				cacheType = true__				_				targetType = getReturnTypeForFactoryMethod(rbd, descriptor)__				if (targetType == null) {_					RootBeanDefinition dbd = getResolvedDecoratedDefinition(rbd)__					if (dbd != null) {_						targetType = dbd.targetType__						if (targetType == null) {_							targetType = getReturnTypeForFactoryMethod(dbd, descriptor)__						}_					}_				}_			}_		}__		if (targetType == null) {_			_			if (this.beanFactory != null) {_				Class<?> beanType = this.beanFactory.getType(bdHolder.getBeanName())__				if (beanType != null) {_					targetType = ResolvableType.forClass(ClassUtils.getUserClass(beanType))__				}_			}_			_			_			if (targetType == null && rbd != null && rbd.hasBeanClass() && rbd.getFactoryMethodName() == null) {_				Class<?> beanClass = rbd.getBeanClass()__				if (!FactoryBean.class.isAssignableFrom(beanClass)) {_					targetType = ResolvableType.forClass(ClassUtils.getUserClass(beanClass))__				}_			}_		}__		if (targetType == null) {_			return true__		}_		if (cacheType) {_			rbd.targetType = targetType__		}_		if (descriptor.fallbackMatchAllowed() && targetType.hasUnresolvableGenerics()) {_			return true__		}_		_		return dependencyType.isAssignableFrom(targetType)__	};match,the,given,dependency,type,with,its,generic,type,information,against,the,given,candidate,bean,definition;protected,boolean,check,generic,type,match,bean,definition,holder,bd,holder,dependency,descriptor,descriptor,resolvable,type,dependency,type,descriptor,get,resolvable,type,if,dependency,type,get,type,instanceof,class,return,true,resolvable,type,target,type,null,boolean,cache,type,false,root,bean,definition,rbd,null,if,bd,holder,get,bean,definition,instanceof,root,bean,definition,rbd,root,bean,definition,bd,holder,get,bean,definition,if,rbd,null,target,type,rbd,target,type,if,target,type,null,cache,type,true,target,type,get,return,type,for,factory,method,rbd,descriptor,if,target,type,null,root,bean,definition,dbd,get,resolved,decorated,definition,rbd,if,dbd,null,target,type,dbd,target,type,if,target,type,null,target,type,get,return,type,for,factory,method,dbd,descriptor,if,target,type,null,if,this,bean,factory,null,class,bean,type,this,bean,factory,get,type,bd,holder,get,bean,name,if,bean,type,null,target,type,resolvable,type,for,class,class,utils,get,user,class,bean,type,if,target,type,null,rbd,null,rbd,has,bean,class,rbd,get,factory,method,name,null,class,bean,class,rbd,get,bean,class,if,factory,bean,class,is,assignable,from,bean,class,target,type,resolvable,type,for,class,class,utils,get,user,class,bean,class,if,target,type,null,return,true,if,cache,type,rbd,target,type,target,type,if,descriptor,fallback,match,allowed,target,type,has,unresolvable,generics,return,true,return,dependency,type,is,assignable,from,target,type
GenericTypeAwareAutowireCandidateResolver -> protected boolean checkGenericTypeMatch(BeanDefinitionHolder bdHolder, DependencyDescriptor descriptor);1496837955;Match the given dependency type with its generic type information against the given_candidate bean definition.;protected boolean checkGenericTypeMatch(BeanDefinitionHolder bdHolder, DependencyDescriptor descriptor) {_		ResolvableType dependencyType = descriptor.getResolvableType()__		if (dependencyType.getType() instanceof Class) {_			_			return true__		}__		ResolvableType targetType = null__		boolean cacheType = false__		RootBeanDefinition rbd = null__		if (bdHolder.getBeanDefinition() instanceof RootBeanDefinition) {_			rbd = (RootBeanDefinition) bdHolder.getBeanDefinition()__		}_		if (rbd != null) {_			targetType = rbd.targetType__			if (targetType == null) {_				cacheType = true__				_				targetType = getReturnTypeForFactoryMethod(rbd, descriptor)__				if (targetType == null) {_					RootBeanDefinition dbd = getResolvedDecoratedDefinition(rbd)__					if (dbd != null) {_						targetType = dbd.targetType__						if (targetType == null) {_							targetType = getReturnTypeForFactoryMethod(dbd, descriptor)__						}_					}_				}_			}_		}__		if (targetType == null) {_			_			if (this.beanFactory != null) {_				Class<?> beanType = this.beanFactory.getType(bdHolder.getBeanName())__				if (beanType != null) {_					targetType = ResolvableType.forClass(ClassUtils.getUserClass(beanType))__				}_			}_			_			_			if (targetType == null && rbd != null && rbd.hasBeanClass() && rbd.getFactoryMethodName() == null) {_				Class<?> beanClass = rbd.getBeanClass()__				if (!FactoryBean.class.isAssignableFrom(beanClass)) {_					targetType = ResolvableType.forClass(ClassUtils.getUserClass(beanClass))__				}_			}_		}__		if (targetType == null) {_			return true__		}_		if (cacheType) {_			rbd.targetType = targetType__		}_		if (descriptor.fallbackMatchAllowed() && targetType.hasUnresolvableGenerics()) {_			return true__		}_		_		return dependencyType.isAssignableFrom(targetType)__	};match,the,given,dependency,type,with,its,generic,type,information,against,the,given,candidate,bean,definition;protected,boolean,check,generic,type,match,bean,definition,holder,bd,holder,dependency,descriptor,descriptor,resolvable,type,dependency,type,descriptor,get,resolvable,type,if,dependency,type,get,type,instanceof,class,return,true,resolvable,type,target,type,null,boolean,cache,type,false,root,bean,definition,rbd,null,if,bd,holder,get,bean,definition,instanceof,root,bean,definition,rbd,root,bean,definition,bd,holder,get,bean,definition,if,rbd,null,target,type,rbd,target,type,if,target,type,null,cache,type,true,target,type,get,return,type,for,factory,method,rbd,descriptor,if,target,type,null,root,bean,definition,dbd,get,resolved,decorated,definition,rbd,if,dbd,null,target,type,dbd,target,type,if,target,type,null,target,type,get,return,type,for,factory,method,dbd,descriptor,if,target,type,null,if,this,bean,factory,null,class,bean,type,this,bean,factory,get,type,bd,holder,get,bean,name,if,bean,type,null,target,type,resolvable,type,for,class,class,utils,get,user,class,bean,type,if,target,type,null,rbd,null,rbd,has,bean,class,rbd,get,factory,method,name,null,class,bean,class,rbd,get,bean,class,if,factory,bean,class,is,assignable,from,bean,class,target,type,resolvable,type,for,class,class,utils,get,user,class,bean,class,if,target,type,null,return,true,if,cache,type,rbd,target,type,target,type,if,descriptor,fallback,match,allowed,target,type,has,unresolvable,generics,return,true,return,dependency,type,is,assignable,from,target,type
GenericTypeAwareAutowireCandidateResolver -> protected boolean checkGenericTypeMatch(BeanDefinitionHolder bdHolder, DependencyDescriptor descriptor);1498780456;Match the given dependency type with its generic type information against the given_candidate bean definition.;protected boolean checkGenericTypeMatch(BeanDefinitionHolder bdHolder, DependencyDescriptor descriptor) {_		ResolvableType dependencyType = descriptor.getResolvableType()__		if (dependencyType.getType() instanceof Class) {_			_			return true__		}__		ResolvableType targetType = null__		boolean cacheType = false__		RootBeanDefinition rbd = null__		if (bdHolder.getBeanDefinition() instanceof RootBeanDefinition) {_			rbd = (RootBeanDefinition) bdHolder.getBeanDefinition()__		}_		if (rbd != null) {_			targetType = rbd.targetType__			if (targetType == null) {_				cacheType = true__				_				targetType = getReturnTypeForFactoryMethod(rbd, descriptor)__				if (targetType == null) {_					RootBeanDefinition dbd = getResolvedDecoratedDefinition(rbd)__					if (dbd != null) {_						targetType = dbd.targetType__						if (targetType == null) {_							targetType = getReturnTypeForFactoryMethod(dbd, descriptor)__						}_					}_				}_			}_		}__		if (targetType == null) {_			_			if (this.beanFactory != null) {_				Class<?> beanType = this.beanFactory.getType(bdHolder.getBeanName())__				if (beanType != null) {_					targetType = ResolvableType.forClass(ClassUtils.getUserClass(beanType))__				}_			}_			_			_			if (targetType == null && rbd != null && rbd.hasBeanClass() && rbd.getFactoryMethodName() == null) {_				Class<?> beanClass = rbd.getBeanClass()__				if (!FactoryBean.class.isAssignableFrom(beanClass)) {_					targetType = ResolvableType.forClass(ClassUtils.getUserClass(beanClass))__				}_			}_		}__		if (targetType == null) {_			return true__		}_		if (cacheType) {_			rbd.targetType = targetType__		}_		if (descriptor.fallbackMatchAllowed() && targetType.hasUnresolvableGenerics()) {_			return true__		}_		_		return dependencyType.isAssignableFrom(targetType)__	};match,the,given,dependency,type,with,its,generic,type,information,against,the,given,candidate,bean,definition;protected,boolean,check,generic,type,match,bean,definition,holder,bd,holder,dependency,descriptor,descriptor,resolvable,type,dependency,type,descriptor,get,resolvable,type,if,dependency,type,get,type,instanceof,class,return,true,resolvable,type,target,type,null,boolean,cache,type,false,root,bean,definition,rbd,null,if,bd,holder,get,bean,definition,instanceof,root,bean,definition,rbd,root,bean,definition,bd,holder,get,bean,definition,if,rbd,null,target,type,rbd,target,type,if,target,type,null,cache,type,true,target,type,get,return,type,for,factory,method,rbd,descriptor,if,target,type,null,root,bean,definition,dbd,get,resolved,decorated,definition,rbd,if,dbd,null,target,type,dbd,target,type,if,target,type,null,target,type,get,return,type,for,factory,method,dbd,descriptor,if,target,type,null,if,this,bean,factory,null,class,bean,type,this,bean,factory,get,type,bd,holder,get,bean,name,if,bean,type,null,target,type,resolvable,type,for,class,class,utils,get,user,class,bean,type,if,target,type,null,rbd,null,rbd,has,bean,class,rbd,get,factory,method,name,null,class,bean,class,rbd,get,bean,class,if,factory,bean,class,is,assignable,from,bean,class,target,type,resolvable,type,for,class,class,utils,get,user,class,bean,class,if,target,type,null,return,true,if,cache,type,rbd,target,type,target,type,if,descriptor,fallback,match,allowed,target,type,has,unresolvable,generics,return,true,return,dependency,type,is,assignable,from,target,type
GenericTypeAwareAutowireCandidateResolver -> protected boolean checkGenericTypeMatch(BeanDefinitionHolder bdHolder, DependencyDescriptor descriptor);1536855799;Match the given dependency type with its generic type information against the given_candidate bean definition.;protected boolean checkGenericTypeMatch(BeanDefinitionHolder bdHolder, DependencyDescriptor descriptor) {_		ResolvableType dependencyType = descriptor.getResolvableType()__		if (dependencyType.getType() instanceof Class) {_			_			return true__		}__		ResolvableType targetType = null__		boolean cacheType = false__		RootBeanDefinition rbd = null__		if (bdHolder.getBeanDefinition() instanceof RootBeanDefinition) {_			rbd = (RootBeanDefinition) bdHolder.getBeanDefinition()__		}_		if (rbd != null) {_			targetType = rbd.targetType__			if (targetType == null) {_				cacheType = true__				_				targetType = getReturnTypeForFactoryMethod(rbd, descriptor)__				if (targetType == null) {_					RootBeanDefinition dbd = getResolvedDecoratedDefinition(rbd)__					if (dbd != null) {_						targetType = dbd.targetType__						if (targetType == null) {_							targetType = getReturnTypeForFactoryMethod(dbd, descriptor)__						}_					}_				}_			}_		}__		if (targetType == null) {_			_			if (this.beanFactory != null) {_				Class<?> beanType = this.beanFactory.getType(bdHolder.getBeanName())__				if (beanType != null) {_					targetType = ResolvableType.forClass(ClassUtils.getUserClass(beanType))__				}_			}_			_			_			if (targetType == null && rbd != null && rbd.hasBeanClass() && rbd.getFactoryMethodName() == null) {_				Class<?> beanClass = rbd.getBeanClass()__				if (!FactoryBean.class.isAssignableFrom(beanClass)) {_					targetType = ResolvableType.forClass(ClassUtils.getUserClass(beanClass))__				}_			}_		}__		if (targetType == null) {_			return true__		}_		if (cacheType) {_			rbd.targetType = targetType__		}_		if (descriptor.fallbackMatchAllowed() &&_				(targetType.hasUnresolvableGenerics() || targetType.resolve() == Properties.class)) {_			_			_			_			return true__		}_		_		return dependencyType.isAssignableFrom(targetType)__	};match,the,given,dependency,type,with,its,generic,type,information,against,the,given,candidate,bean,definition;protected,boolean,check,generic,type,match,bean,definition,holder,bd,holder,dependency,descriptor,descriptor,resolvable,type,dependency,type,descriptor,get,resolvable,type,if,dependency,type,get,type,instanceof,class,return,true,resolvable,type,target,type,null,boolean,cache,type,false,root,bean,definition,rbd,null,if,bd,holder,get,bean,definition,instanceof,root,bean,definition,rbd,root,bean,definition,bd,holder,get,bean,definition,if,rbd,null,target,type,rbd,target,type,if,target,type,null,cache,type,true,target,type,get,return,type,for,factory,method,rbd,descriptor,if,target,type,null,root,bean,definition,dbd,get,resolved,decorated,definition,rbd,if,dbd,null,target,type,dbd,target,type,if,target,type,null,target,type,get,return,type,for,factory,method,dbd,descriptor,if,target,type,null,if,this,bean,factory,null,class,bean,type,this,bean,factory,get,type,bd,holder,get,bean,name,if,bean,type,null,target,type,resolvable,type,for,class,class,utils,get,user,class,bean,type,if,target,type,null,rbd,null,rbd,has,bean,class,rbd,get,factory,method,name,null,class,bean,class,rbd,get,bean,class,if,factory,bean,class,is,assignable,from,bean,class,target,type,resolvable,type,for,class,class,utils,get,user,class,bean,class,if,target,type,null,return,true,if,cache,type,rbd,target,type,target,type,if,descriptor,fallback,match,allowed,target,type,has,unresolvable,generics,target,type,resolve,properties,class,return,true,return,dependency,type,is,assignable,from,target,type
GenericTypeAwareAutowireCandidateResolver -> @Override 	public Object getLazyResolutionProxyIfNecessary(DependencyDescriptor descriptor, String beanName);1381788683;This implementation always returns {@code null},_leaving lazy resolution support up to subclasses.;@Override_	public Object getLazyResolutionProxyIfNecessary(DependencyDescriptor descriptor, String beanName) {_		return null__	};this,implementation,always,returns,code,null,leaving,lazy,resolution,support,up,to,subclasses;override,public,object,get,lazy,resolution,proxy,if,necessary,dependency,descriptor,descriptor,string,bean,name,return,null
GenericTypeAwareAutowireCandidateResolver -> @Override 	public Object getLazyResolutionProxyIfNecessary(DependencyDescriptor descriptor, String beanName);1382716358;This implementation always returns {@code null},_leaving lazy resolution support up to subclasses.;@Override_	public Object getLazyResolutionProxyIfNecessary(DependencyDescriptor descriptor, String beanName) {_		return null__	};this,implementation,always,returns,code,null,leaving,lazy,resolution,support,up,to,subclasses;override,public,object,get,lazy,resolution,proxy,if,necessary,dependency,descriptor,descriptor,string,bean,name,return,null
GenericTypeAwareAutowireCandidateResolver -> @Override 	public Object getLazyResolutionProxyIfNecessary(DependencyDescriptor descriptor, String beanName);1382826936;This implementation always returns {@code null},_leaving lazy resolution support up to subclasses.;@Override_	public Object getLazyResolutionProxyIfNecessary(DependencyDescriptor descriptor, String beanName) {_		return null__	};this,implementation,always,returns,code,null,leaving,lazy,resolution,support,up,to,subclasses;override,public,object,get,lazy,resolution,proxy,if,necessary,dependency,descriptor,descriptor,string,bean,name,return,null
GenericTypeAwareAutowireCandidateResolver -> @Override 	public Object getLazyResolutionProxyIfNecessary(DependencyDescriptor descriptor, String beanName);1383166924;This implementation always returns {@code null},_leaving lazy resolution support up to subclasses.;@Override_	public Object getLazyResolutionProxyIfNecessary(DependencyDescriptor descriptor, String beanName) {_		return null__	};this,implementation,always,returns,code,null,leaving,lazy,resolution,support,up,to,subclasses;override,public,object,get,lazy,resolution,proxy,if,necessary,dependency,descriptor,descriptor,string,bean,name,return,null
GenericTypeAwareAutowireCandidateResolver -> @Override 	public Object getLazyResolutionProxyIfNecessary(DependencyDescriptor descriptor, String beanName);1385507478;This implementation always returns {@code null}, leaving lazy resolution support up_to subclasses.;@Override_	public Object getLazyResolutionProxyIfNecessary(DependencyDescriptor descriptor, String beanName) {_		return null__	};this,implementation,always,returns,code,null,leaving,lazy,resolution,support,up,to,subclasses;override,public,object,get,lazy,resolution,proxy,if,necessary,dependency,descriptor,descriptor,string,bean,name,return,null
GenericTypeAwareAutowireCandidateResolver -> @Override 	public Object getLazyResolutionProxyIfNecessary(DependencyDescriptor descriptor, String beanName);1386541456;This implementation always returns {@code null}, leaving lazy resolution support up_to subclasses.;@Override_	public Object getLazyResolutionProxyIfNecessary(DependencyDescriptor descriptor, String beanName) {_		return null__	};this,implementation,always,returns,code,null,leaving,lazy,resolution,support,up,to,subclasses;override,public,object,get,lazy,resolution,proxy,if,necessary,dependency,descriptor,descriptor,string,bean,name,return,null
GenericTypeAwareAutowireCandidateResolver -> @Override 	public Object getLazyResolutionProxyIfNecessary(DependencyDescriptor descriptor, String beanName);1391279320;This implementation always returns {@code null}, leaving lazy resolution support up_to subclasses.;@Override_	public Object getLazyResolutionProxyIfNecessary(DependencyDescriptor descriptor, String beanName) {_		return null__	};this,implementation,always,returns,code,null,leaving,lazy,resolution,support,up,to,subclasses;override,public,object,get,lazy,resolution,proxy,if,necessary,dependency,descriptor,descriptor,string,bean,name,return,null
GenericTypeAwareAutowireCandidateResolver -> @Override 	public Object getLazyResolutionProxyIfNecessary(DependencyDescriptor descriptor, String beanName);1471445956;This implementation always returns {@code null}, leaving lazy resolution support up_to subclasses.;@Override_	public Object getLazyResolutionProxyIfNecessary(DependencyDescriptor descriptor, String beanName) {_		return null__	};this,implementation,always,returns,code,null,leaving,lazy,resolution,support,up,to,subclasses;override,public,object,get,lazy,resolution,proxy,if,necessary,dependency,descriptor,descriptor,string,bean,name,return,null
GenericTypeAwareAutowireCandidateResolver -> @Override 	public Object getLazyResolutionProxyIfNecessary(DependencyDescriptor descriptor, String beanName);1482012648;This implementation always returns {@code null}, leaving lazy resolution support up_to subclasses.;@Override_	public Object getLazyResolutionProxyIfNecessary(DependencyDescriptor descriptor, String beanName) {_		return null__	};this,implementation,always,returns,code,null,leaving,lazy,resolution,support,up,to,subclasses;override,public,object,get,lazy,resolution,proxy,if,necessary,dependency,descriptor,descriptor,string,bean,name,return,null
