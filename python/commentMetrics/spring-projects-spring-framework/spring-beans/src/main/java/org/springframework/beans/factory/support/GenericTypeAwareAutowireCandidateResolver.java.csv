commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void setBeanFactory(BeanFactory beanFactory) {     this.beanFactory = beanFactory. }
false;protected,final;0;4;;@Nullable protected final BeanFactory getBeanFactory() {     return this.beanFactory. }
false;public;2;8;;@Override public boolean isAutowireCandidate(BeanDefinitionHolder bdHolder, DependencyDescriptor descriptor) {     if (!super.isAutowireCandidate(bdHolder, descriptor)) {         // If explicitly false, do not proceed with any other checks...         return false.     }     return checkGenericTypeMatch(bdHolder, descriptor). }
true;protected;2;65;/**  * Match the given dependency type with its generic type information against the given  * candidate bean definition.  */ ;/**  * Match the given dependency type with its generic type information against the given  * candidate bean definition.  */ protected boolean checkGenericTypeMatch(BeanDefinitionHolder bdHolder, DependencyDescriptor descriptor) {     ResolvableType dependencyType = descriptor.getResolvableType().     if (dependencyType.getType() instanceof Class) {         // No generic type -> we know it's a Class type-match, so no need to check again.         return true.     }     ResolvableType targetType = null.     boolean cacheType = false.     RootBeanDefinition rbd = null.     if (bdHolder.getBeanDefinition() instanceof RootBeanDefinition) {         rbd = (RootBeanDefinition) bdHolder.getBeanDefinition().     }     if (rbd != null) {         targetType = rbd.targetType.         if (targetType == null) {             cacheType = true.             // First, check factory method return type, if applicable             targetType = getReturnTypeForFactoryMethod(rbd, descriptor).             if (targetType == null) {                 RootBeanDefinition dbd = getResolvedDecoratedDefinition(rbd).                 if (dbd != null) {                     targetType = dbd.targetType.                     if (targetType == null) {                         targetType = getReturnTypeForFactoryMethod(dbd, descriptor).                     }                 }             }         }     }     if (targetType == null) {         // Regular case: straight bean instance, with BeanFactory available.         if (this.beanFactory != null) {             Class<?> beanType = this.beanFactory.getType(bdHolder.getBeanName()).             if (beanType != null) {                 targetType = ResolvableType.forClass(ClassUtils.getUserClass(beanType)).             }         }         // -> best-effort match against the target class if applicable.         if (targetType == null && rbd != null && rbd.hasBeanClass() && rbd.getFactoryMethodName() == null) {             Class<?> beanClass = rbd.getBeanClass().             if (!FactoryBean.class.isAssignableFrom(beanClass)) {                 targetType = ResolvableType.forClass(ClassUtils.getUserClass(beanClass)).             }         }     }     if (targetType == null) {         return true.     }     if (cacheType) {         rbd.targetType = targetType.     }     if (descriptor.fallbackMatchAllowed() && (targetType.hasUnresolvableGenerics() || targetType.resolve() == Properties.class)) {         // Map<Object,Object>, java.util.Properties is usually perceived as a Map<String,String>).         return true.     }     // Full check for complex generic type match...     return dependencyType.isAssignableFrom(targetType). }
false;protected;1;14;;@Nullable protected RootBeanDefinition getResolvedDecoratedDefinition(RootBeanDefinition rbd) {     BeanDefinitionHolder decDef = rbd.getDecoratedDefinition().     if (decDef != null && this.beanFactory instanceof ConfigurableListableBeanFactory) {         ConfigurableListableBeanFactory clbf = (ConfigurableListableBeanFactory) this.beanFactory.         if (clbf.containsBeanDefinition(decDef.getBeanName())) {             BeanDefinition dbd = clbf.getMergedBeanDefinition(decDef.getBeanName()).             if (dbd instanceof RootBeanDefinition) {                 return (RootBeanDefinition) dbd.             }         }     }     return null. }
false;protected;2;22;;@Nullable protected ResolvableType getReturnTypeForFactoryMethod(RootBeanDefinition rbd, DependencyDescriptor descriptor) {     // Should typically be set for any kind of factory method, since the BeanFactory     // pre-resolves them before reaching out to the AutowireCandidateResolver...     ResolvableType returnType = rbd.factoryMethodReturnType.     if (returnType == null) {         Method factoryMethod = rbd.getResolvedFactoryMethod().         if (factoryMethod != null) {             returnType = ResolvableType.forMethodReturnType(factoryMethod).         }     }     if (returnType != null) {         Class<?> resolvedClass = returnType.resolve().         if (resolvedClass != null && descriptor.getDependencyType().isAssignableFrom(resolvedClass)) {             // in case of a singleton instance having been registered with the container already.             return returnType.         }     }     return null. }
