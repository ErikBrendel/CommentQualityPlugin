commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Override public void init() {     registerBeanDefinitionParser("constant", new ConstantBeanDefinitionParser()).     registerBeanDefinitionParser("property-path", new PropertyPathBeanDefinitionParser()).     registerBeanDefinitionParser("list", new ListBeanDefinitionParser()).     registerBeanDefinitionParser("set", new SetBeanDefinitionParser()).     registerBeanDefinitionParser("map", new MapBeanDefinitionParser()).     registerBeanDefinitionParser("properties", new PropertiesBeanDefinitionParser()). }
false;protected;1;4;;@Override protected Class<?> getBeanClass(Element element) {     return FieldRetrievingFactoryBean.class. }
false;protected;3;8;;@Override protected String resolveId(Element element, AbstractBeanDefinition definition, ParserContext parserContext) {     String id = super.resolveId(element, definition, parserContext).     if (!StringUtils.hasText(id)) {         id = element.getAttribute("static-field").     }     return id. }
false;protected;1;4;;@Override protected Class<?> getBeanClass(Element element) {     return PropertyPathFactoryBean.class. }
false;protected;3;18;;@Override protected void doParse(Element element, ParserContext parserContext, BeanDefinitionBuilder builder) {     String path = element.getAttribute("path").     if (!StringUtils.hasText(path)) {         parserContext.getReaderContext().error("Attribute 'path' must not be empty", element).         return.     }     int dotIndex = path.indexOf('.').     if (dotIndex == -1) {         parserContext.getReaderContext().error("Attribute 'path' must follow pattern 'beanName.propertyName'", element).         return.     }     String beanName = path.substring(0, dotIndex).     String propertyPath = path.substring(dotIndex + 1).     builder.addPropertyValue("targetBeanName", beanName).     builder.addPropertyValue("propertyPath", propertyPath). }
false;protected;3;8;;@Override protected String resolveId(Element element, AbstractBeanDefinition definition, ParserContext parserContext) {     String id = super.resolveId(element, definition, parserContext).     if (!StringUtils.hasText(id)) {         id = element.getAttribute("path").     }     return id. }
false;protected;1;4;;@Override protected Class<?> getBeanClass(Element element) {     return ListFactoryBean.class. }
false;protected;3;15;;@Override protected void doParse(Element element, ParserContext parserContext, BeanDefinitionBuilder builder) {     List<Object> parsedList = parserContext.getDelegate().parseListElement(element, builder.getRawBeanDefinition()).     builder.addPropertyValue("sourceList", parsedList).     String listClass = element.getAttribute("list-class").     if (StringUtils.hasText(listClass)) {         builder.addPropertyValue("targetListClass", listClass).     }     String scope = element.getAttribute(SCOPE_ATTRIBUTE).     if (StringUtils.hasLength(scope)) {         builder.setScope(scope).     } }
false;protected;1;4;;@Override protected Class<?> getBeanClass(Element element) {     return SetFactoryBean.class. }
false;protected;3;15;;@Override protected void doParse(Element element, ParserContext parserContext, BeanDefinitionBuilder builder) {     Set<Object> parsedSet = parserContext.getDelegate().parseSetElement(element, builder.getRawBeanDefinition()).     builder.addPropertyValue("sourceSet", parsedSet).     String setClass = element.getAttribute("set-class").     if (StringUtils.hasText(setClass)) {         builder.addPropertyValue("targetSetClass", setClass).     }     String scope = element.getAttribute(SCOPE_ATTRIBUTE).     if (StringUtils.hasLength(scope)) {         builder.setScope(scope).     } }
false;protected;1;4;;@Override protected Class<?> getBeanClass(Element element) {     return MapFactoryBean.class. }
false;protected;3;15;;@Override protected void doParse(Element element, ParserContext parserContext, BeanDefinitionBuilder builder) {     Map<Object, Object> parsedMap = parserContext.getDelegate().parseMapElement(element, builder.getRawBeanDefinition()).     builder.addPropertyValue("sourceMap", parsedMap).     String mapClass = element.getAttribute("map-class").     if (StringUtils.hasText(mapClass)) {         builder.addPropertyValue("targetMapClass", mapClass).     }     String scope = element.getAttribute(SCOPE_ATTRIBUTE).     if (StringUtils.hasLength(scope)) {         builder.setScope(scope).     } }
false;protected;1;4;;@Override protected Class<?> getBeanClass(Element element) {     return PropertiesFactoryBean.class. }
false;protected;3;23;;@Override protected void doParse(Element element, ParserContext parserContext, BeanDefinitionBuilder builder) {     Properties parsedProps = parserContext.getDelegate().parsePropsElement(element).     builder.addPropertyValue("properties", parsedProps).     String location = element.getAttribute("location").     if (StringUtils.hasLength(location)) {         location = parserContext.getReaderContext().getEnvironment().resolvePlaceholders(location).         String[] locations = StringUtils.commaDelimitedListToStringArray(location).         builder.addPropertyValue("locations", locations).     }     builder.addPropertyValue("ignoreResourceNotFound", Boolean.valueOf(element.getAttribute("ignore-resource-not-found"))).     builder.addPropertyValue("localOverride", Boolean.valueOf(element.getAttribute("local-override"))).     String scope = element.getAttribute(SCOPE_ATTRIBUTE).     if (StringUtils.hasLength(scope)) {         builder.setScope(scope).     } }
