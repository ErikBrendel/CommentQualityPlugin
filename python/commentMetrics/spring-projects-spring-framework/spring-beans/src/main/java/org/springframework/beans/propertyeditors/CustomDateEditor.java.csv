commented;modifiers;parameterAmount;loc;comment;code
true;public;1;19;/**  * Parse the Date from the given text, using the specified DateFormat.  */ ;/**  * Parse the Date from the given text, using the specified DateFormat.  */ @Override public void setAsText(@Nullable String text) throws IllegalArgumentException {     if (this.allowEmpty && !StringUtils.hasText(text)) {         // Treat empty String as null value.         setValue(null).     } else if (text != null && this.exactDateLength >= 0 && text.length() != this.exactDateLength) {         throw new IllegalArgumentException("Could not parse date: it is not exactly" + this.exactDateLength + "characters long").     } else {         try {             setValue(this.dateFormat.parse(text)).         } catch (ParseException ex) {             throw new IllegalArgumentException("Could not parse date: " + ex.getMessage(), ex).         }     } }
true;public;0;5;/**  * Format the Date as String, using the specified DateFormat.  */ ;/**  * Format the Date as String, using the specified DateFormat.  */ @Override public String getAsText() {     Date value = (Date) getValue().     return (value != null ? this.dateFormat.format(value) : ""). }
