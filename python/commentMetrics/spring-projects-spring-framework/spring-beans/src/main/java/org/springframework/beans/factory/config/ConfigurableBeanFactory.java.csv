# id;timestamp;commentText;codeText;commentWords;codeWords
ConfigurableBeanFactory -> void setTempClassLoader(@Nullable ClassLoader tempClassLoader)_;1496259743;Specify a temporary ClassLoader to use for type matching purposes._Default is none, simply using the standard bean ClassLoader._<p>A temporary ClassLoader is usually just specified if_<i>load-time weaving</i> is involved, to make sure that actual bean_classes are loaded as lazily as possible. The temporary loader is_then removed once the BeanFactory completes its bootstrap phase._@since 2.5;void setTempClassLoader(@Nullable ClassLoader tempClassLoader)_;specify,a,temporary,class,loader,to,use,for,type,matching,purposes,default,is,none,simply,using,the,standard,bean,class,loader,p,a,temporary,class,loader,is,usually,just,specified,if,i,load,time,weaving,i,is,involved,to,make,sure,that,actual,bean,classes,are,loaded,as,lazily,as,possible,the,temporary,loader,is,then,removed,once,the,bean,factory,completes,its,bootstrap,phase,since,2,5;void,set,temp,class,loader,nullable,class,loader,temp,class,loader
ConfigurableBeanFactory -> void setTempClassLoader(@Nullable ClassLoader tempClassLoader)_;1496837955;Specify a temporary ClassLoader to use for type matching purposes._Default is none, simply using the standard bean ClassLoader._<p>A temporary ClassLoader is usually just specified if_<i>load-time weaving</i> is involved, to make sure that actual bean_classes are loaded as lazily as possible. The temporary loader is_then removed once the BeanFactory completes its bootstrap phase._@since 2.5;void setTempClassLoader(@Nullable ClassLoader tempClassLoader)_;specify,a,temporary,class,loader,to,use,for,type,matching,purposes,default,is,none,simply,using,the,standard,bean,class,loader,p,a,temporary,class,loader,is,usually,just,specified,if,i,load,time,weaving,i,is,involved,to,make,sure,that,actual,bean,classes,are,loaded,as,lazily,as,possible,the,temporary,loader,is,then,removed,once,the,bean,factory,completes,its,bootstrap,phase,since,2,5;void,set,temp,class,loader,nullable,class,loader,temp,class,loader
ConfigurableBeanFactory -> void setTempClassLoader(@Nullable ClassLoader tempClassLoader)_;1498780456;Specify a temporary ClassLoader to use for type matching purposes._Default is none, simply using the standard bean ClassLoader._<p>A temporary ClassLoader is usually just specified if_<i>load-time weaving</i> is involved, to make sure that actual bean_classes are loaded as lazily as possible. The temporary loader is_then removed once the BeanFactory completes its bootstrap phase._@since 2.5;void setTempClassLoader(@Nullable ClassLoader tempClassLoader)_;specify,a,temporary,class,loader,to,use,for,type,matching,purposes,default,is,none,simply,using,the,standard,bean,class,loader,p,a,temporary,class,loader,is,usually,just,specified,if,i,load,time,weaving,i,is,involved,to,make,sure,that,actual,bean,classes,are,loaded,as,lazily,as,possible,the,temporary,loader,is,then,removed,once,the,bean,factory,completes,its,bootstrap,phase,since,2,5;void,set,temp,class,loader,nullable,class,loader,temp,class,loader
ConfigurableBeanFactory -> void setTempClassLoader(@Nullable ClassLoader tempClassLoader)_;1527623466;Specify a temporary ClassLoader to use for type matching purposes._Default is none, simply using the standard bean ClassLoader._<p>A temporary ClassLoader is usually just specified if_<i>load-time weaving</i> is involved, to make sure that actual bean_classes are loaded as lazily as possible. The temporary loader is_then removed once the BeanFactory completes its bootstrap phase._@since 2.5;void setTempClassLoader(@Nullable ClassLoader tempClassLoader)_;specify,a,temporary,class,loader,to,use,for,type,matching,purposes,default,is,none,simply,using,the,standard,bean,class,loader,p,a,temporary,class,loader,is,usually,just,specified,if,i,load,time,weaving,i,is,involved,to,make,sure,that,actual,bean,classes,are,loaded,as,lazily,as,possible,the,temporary,loader,is,then,removed,once,the,bean,factory,completes,its,bootstrap,phase,since,2,5;void,set,temp,class,loader,nullable,class,loader,temp,class,loader
ConfigurableBeanFactory -> void setTempClassLoader(@Nullable ClassLoader tempClassLoader)_;1530174524;Specify a temporary ClassLoader to use for type matching purposes._Default is none, simply using the standard bean ClassLoader._<p>A temporary ClassLoader is usually just specified if_<i>load-time weaving</i> is involved, to make sure that actual bean_classes are loaded as lazily as possible. The temporary loader is_then removed once the BeanFactory completes its bootstrap phase._@since 2.5;void setTempClassLoader(@Nullable ClassLoader tempClassLoader)_;specify,a,temporary,class,loader,to,use,for,type,matching,purposes,default,is,none,simply,using,the,standard,bean,class,loader,p,a,temporary,class,loader,is,usually,just,specified,if,i,load,time,weaving,i,is,involved,to,make,sure,that,actual,bean,classes,are,loaded,as,lazily,as,possible,the,temporary,loader,is,then,removed,once,the,bean,factory,completes,its,bootstrap,phase,since,2,5;void,set,temp,class,loader,nullable,class,loader,temp,class,loader
ConfigurableBeanFactory -> void setParentBeanFactory(BeanFactory parentBeanFactory) throws IllegalStateException_;1328020251;Set the parent of this bean factory._<p>Note that the parent cannot be changed: It should only be set outside_a constructor if it isn't available at the time of factory instantiation._@param parentBeanFactory the parent BeanFactory_@throws IllegalStateException if this factory is already associated with_a parent BeanFactory_@see #getParentBeanFactory();void setParentBeanFactory(BeanFactory parentBeanFactory) throws IllegalStateException_;set,the,parent,of,this,bean,factory,p,note,that,the,parent,cannot,be,changed,it,should,only,be,set,outside,a,constructor,if,it,isn,t,available,at,the,time,of,factory,instantiation,param,parent,bean,factory,the,parent,bean,factory,throws,illegal,state,exception,if,this,factory,is,already,associated,with,a,parent,bean,factory,see,get,parent,bean,factory;void,set,parent,bean,factory,bean,factory,parent,bean,factory,throws,illegal,state,exception
ConfigurableBeanFactory -> void setParentBeanFactory(BeanFactory parentBeanFactory) throws IllegalStateException_;1352418897;Set the parent of this bean factory._<p>Note that the parent cannot be changed: It should only be set outside_a constructor if it isn't available at the time of factory instantiation._@param parentBeanFactory the parent BeanFactory_@throws IllegalStateException if this factory is already associated with_a parent BeanFactory_@see #getParentBeanFactory();void setParentBeanFactory(BeanFactory parentBeanFactory) throws IllegalStateException_;set,the,parent,of,this,bean,factory,p,note,that,the,parent,cannot,be,changed,it,should,only,be,set,outside,a,constructor,if,it,isn,t,available,at,the,time,of,factory,instantiation,param,parent,bean,factory,the,parent,bean,factory,throws,illegal,state,exception,if,this,factory,is,already,associated,with,a,parent,bean,factory,see,get,parent,bean,factory;void,set,parent,bean,factory,bean,factory,parent,bean,factory,throws,illegal,state,exception
ConfigurableBeanFactory -> void setParentBeanFactory(BeanFactory parentBeanFactory) throws IllegalStateException_;1356735495;Set the parent of this bean factory._<p>Note that the parent cannot be changed: It should only be set outside_a constructor if it isn't available at the time of factory instantiation._@param parentBeanFactory the parent BeanFactory_@throws IllegalStateException if this factory is already associated with_a parent BeanFactory_@see #getParentBeanFactory();void setParentBeanFactory(BeanFactory parentBeanFactory) throws IllegalStateException_;set,the,parent,of,this,bean,factory,p,note,that,the,parent,cannot,be,changed,it,should,only,be,set,outside,a,constructor,if,it,isn,t,available,at,the,time,of,factory,instantiation,param,parent,bean,factory,the,parent,bean,factory,throws,illegal,state,exception,if,this,factory,is,already,associated,with,a,parent,bean,factory,see,get,parent,bean,factory;void,set,parent,bean,factory,bean,factory,parent,bean,factory,throws,illegal,state,exception
ConfigurableBeanFactory -> void setParentBeanFactory(BeanFactory parentBeanFactory) throws IllegalStateException_;1460227762;Set the parent of this bean factory._<p>Note that the parent cannot be changed: It should only be set outside_a constructor if it isn't available at the time of factory instantiation._@param parentBeanFactory the parent BeanFactory_@throws IllegalStateException if this factory is already associated with_a parent BeanFactory_@see #getParentBeanFactory();void setParentBeanFactory(BeanFactory parentBeanFactory) throws IllegalStateException_;set,the,parent,of,this,bean,factory,p,note,that,the,parent,cannot,be,changed,it,should,only,be,set,outside,a,constructor,if,it,isn,t,available,at,the,time,of,factory,instantiation,param,parent,bean,factory,the,parent,bean,factory,throws,illegal,state,exception,if,this,factory,is,already,associated,with,a,parent,bean,factory,see,get,parent,bean,factory;void,set,parent,bean,factory,bean,factory,parent,bean,factory,throws,illegal,state,exception
ConfigurableBeanFactory -> void setParentBeanFactory(BeanFactory parentBeanFactory) throws IllegalStateException_;1495868221;Set the parent of this bean factory._<p>Note that the parent cannot be changed: It should only be set outside_a constructor if it isn't available at the time of factory instantiation._@param parentBeanFactory the parent BeanFactory_@throws IllegalStateException if this factory is already associated with_a parent BeanFactory_@see #getParentBeanFactory();void setParentBeanFactory(BeanFactory parentBeanFactory) throws IllegalStateException_;set,the,parent,of,this,bean,factory,p,note,that,the,parent,cannot,be,changed,it,should,only,be,set,outside,a,constructor,if,it,isn,t,available,at,the,time,of,factory,instantiation,param,parent,bean,factory,the,parent,bean,factory,throws,illegal,state,exception,if,this,factory,is,already,associated,with,a,parent,bean,factory,see,get,parent,bean,factory;void,set,parent,bean,factory,bean,factory,parent,bean,factory,throws,illegal,state,exception
ConfigurableBeanFactory -> void setParentBeanFactory(BeanFactory parentBeanFactory) throws IllegalStateException_;1496259743;Set the parent of this bean factory._<p>Note that the parent cannot be changed: It should only be set outside_a constructor if it isn't available at the time of factory instantiation._@param parentBeanFactory the parent BeanFactory_@throws IllegalStateException if this factory is already associated with_a parent BeanFactory_@see #getParentBeanFactory();void setParentBeanFactory(BeanFactory parentBeanFactory) throws IllegalStateException_;set,the,parent,of,this,bean,factory,p,note,that,the,parent,cannot,be,changed,it,should,only,be,set,outside,a,constructor,if,it,isn,t,available,at,the,time,of,factory,instantiation,param,parent,bean,factory,the,parent,bean,factory,throws,illegal,state,exception,if,this,factory,is,already,associated,with,a,parent,bean,factory,see,get,parent,bean,factory;void,set,parent,bean,factory,bean,factory,parent,bean,factory,throws,illegal,state,exception
ConfigurableBeanFactory -> void setParentBeanFactory(BeanFactory parentBeanFactory) throws IllegalStateException_;1496837955;Set the parent of this bean factory._<p>Note that the parent cannot be changed: It should only be set outside_a constructor if it isn't available at the time of factory instantiation._@param parentBeanFactory the parent BeanFactory_@throws IllegalStateException if this factory is already associated with_a parent BeanFactory_@see #getParentBeanFactory();void setParentBeanFactory(BeanFactory parentBeanFactory) throws IllegalStateException_;set,the,parent,of,this,bean,factory,p,note,that,the,parent,cannot,be,changed,it,should,only,be,set,outside,a,constructor,if,it,isn,t,available,at,the,time,of,factory,instantiation,param,parent,bean,factory,the,parent,bean,factory,throws,illegal,state,exception,if,this,factory,is,already,associated,with,a,parent,bean,factory,see,get,parent,bean,factory;void,set,parent,bean,factory,bean,factory,parent,bean,factory,throws,illegal,state,exception
ConfigurableBeanFactory -> void setParentBeanFactory(BeanFactory parentBeanFactory) throws IllegalStateException_;1498780456;Set the parent of this bean factory._<p>Note that the parent cannot be changed: It should only be set outside_a constructor if it isn't available at the time of factory instantiation._@param parentBeanFactory the parent BeanFactory_@throws IllegalStateException if this factory is already associated with_a parent BeanFactory_@see #getParentBeanFactory();void setParentBeanFactory(BeanFactory parentBeanFactory) throws IllegalStateException_;set,the,parent,of,this,bean,factory,p,note,that,the,parent,cannot,be,changed,it,should,only,be,set,outside,a,constructor,if,it,isn,t,available,at,the,time,of,factory,instantiation,param,parent,bean,factory,the,parent,bean,factory,throws,illegal,state,exception,if,this,factory,is,already,associated,with,a,parent,bean,factory,see,get,parent,bean,factory;void,set,parent,bean,factory,bean,factory,parent,bean,factory,throws,illegal,state,exception
ConfigurableBeanFactory -> void setParentBeanFactory(BeanFactory parentBeanFactory) throws IllegalStateException_;1527623466;Set the parent of this bean factory._<p>Note that the parent cannot be changed: It should only be set outside_a constructor if it isn't available at the time of factory instantiation._@param parentBeanFactory the parent BeanFactory_@throws IllegalStateException if this factory is already associated with_a parent BeanFactory_@see #getParentBeanFactory();void setParentBeanFactory(BeanFactory parentBeanFactory) throws IllegalStateException_;set,the,parent,of,this,bean,factory,p,note,that,the,parent,cannot,be,changed,it,should,only,be,set,outside,a,constructor,if,it,isn,t,available,at,the,time,of,factory,instantiation,param,parent,bean,factory,the,parent,bean,factory,throws,illegal,state,exception,if,this,factory,is,already,associated,with,a,parent,bean,factory,see,get,parent,bean,factory;void,set,parent,bean,factory,bean,factory,parent,bean,factory,throws,illegal,state,exception
ConfigurableBeanFactory -> void setParentBeanFactory(BeanFactory parentBeanFactory) throws IllegalStateException_;1530174524;Set the parent of this bean factory._<p>Note that the parent cannot be changed: It should only be set outside_a constructor if it isn't available at the time of factory instantiation._@param parentBeanFactory the parent BeanFactory_@throws IllegalStateException if this factory is already associated with_a parent BeanFactory_@see #getParentBeanFactory();void setParentBeanFactory(BeanFactory parentBeanFactory) throws IllegalStateException_;set,the,parent,of,this,bean,factory,p,note,that,the,parent,cannot,be,changed,it,should,only,be,set,outside,a,constructor,if,it,isn,t,available,at,the,time,of,factory,instantiation,param,parent,bean,factory,the,parent,bean,factory,throws,illegal,state,exception,if,this,factory,is,already,associated,with,a,parent,bean,factory,see,get,parent,bean,factory;void,set,parent,bean,factory,bean,factory,parent,bean,factory,throws,illegal,state,exception
ConfigurableBeanFactory -> void setConversionService(ConversionService conversionService)_;1328020251;Specify a Spring 3.0 ConversionService to use for converting_property values, as an alternative to JavaBeans PropertyEditors._@since 3.0;void setConversionService(ConversionService conversionService)_;specify,a,spring,3,0,conversion,service,to,use,for,converting,property,values,as,an,alternative,to,java,beans,property,editors,since,3,0;void,set,conversion,service,conversion,service,conversion,service
ConfigurableBeanFactory -> void setConversionService(ConversionService conversionService)_;1352418897;Specify a Spring 3.0 ConversionService to use for converting_property values, as an alternative to JavaBeans PropertyEditors._@since 3.0;void setConversionService(ConversionService conversionService)_;specify,a,spring,3,0,conversion,service,to,use,for,converting,property,values,as,an,alternative,to,java,beans,property,editors,since,3,0;void,set,conversion,service,conversion,service,conversion,service
ConfigurableBeanFactory -> void setConversionService(ConversionService conversionService)_;1356735495;Specify a Spring 3.0 ConversionService to use for converting_property values, as an alternative to JavaBeans PropertyEditors._@since 3.0;void setConversionService(ConversionService conversionService)_;specify,a,spring,3,0,conversion,service,to,use,for,converting,property,values,as,an,alternative,to,java,beans,property,editors,since,3,0;void,set,conversion,service,conversion,service,conversion,service
ConfigurableBeanFactory -> void setConversionService(ConversionService conversionService)_;1460227762;Specify a Spring 3.0 ConversionService to use for converting_property values, as an alternative to JavaBeans PropertyEditors._@since 3.0;void setConversionService(ConversionService conversionService)_;specify,a,spring,3,0,conversion,service,to,use,for,converting,property,values,as,an,alternative,to,java,beans,property,editors,since,3,0;void,set,conversion,service,conversion,service,conversion,service
ConfigurableBeanFactory -> void setConversionService(ConversionService conversionService)_;1495868221;Specify a Spring 3.0 ConversionService to use for converting_property values, as an alternative to JavaBeans PropertyEditors._@since 3.0;void setConversionService(ConversionService conversionService)_;specify,a,spring,3,0,conversion,service,to,use,for,converting,property,values,as,an,alternative,to,java,beans,property,editors,since,3,0;void,set,conversion,service,conversion,service,conversion,service
ConfigurableBeanFactory -> void setConversionService(ConversionService conversionService)_;1496259743;Specify a Spring 3.0 ConversionService to use for converting_property values, as an alternative to JavaBeans PropertyEditors._@since 3.0;void setConversionService(ConversionService conversionService)_;specify,a,spring,3,0,conversion,service,to,use,for,converting,property,values,as,an,alternative,to,java,beans,property,editors,since,3,0;void,set,conversion,service,conversion,service,conversion,service
ConfigurableBeanFactory -> Scope getRegisteredScope(String scopeName)_;1328020251;Return the Scope implementation for the given scope name, if any._<p>This will only return explicitly registered scopes._Built-in scopes such as "singleton" and "prototype" won't be exposed._@param scopeName the name of the scope_@return the registered Scope implementation, or <code>null</code> if none_@see #registerScope;Scope getRegisteredScope(String scopeName)_;return,the,scope,implementation,for,the,given,scope,name,if,any,p,this,will,only,return,explicitly,registered,scopes,built,in,scopes,such,as,singleton,and,prototype,won,t,be,exposed,param,scope,name,the,name,of,the,scope,return,the,registered,scope,implementation,or,code,null,code,if,none,see,register,scope;scope,get,registered,scope,string,scope,name
ConfigurableBeanFactory -> Scope getRegisteredScope(String scopeName)_;1352418897;Return the Scope implementation for the given scope name, if any._<p>This will only return explicitly registered scopes._Built-in scopes such as "singleton" and "prototype" won't be exposed._@param scopeName the name of the scope_@return the registered Scope implementation, or <code>null</code> if none_@see #registerScope;Scope getRegisteredScope(String scopeName)_;return,the,scope,implementation,for,the,given,scope,name,if,any,p,this,will,only,return,explicitly,registered,scopes,built,in,scopes,such,as,singleton,and,prototype,won,t,be,exposed,param,scope,name,the,name,of,the,scope,return,the,registered,scope,implementation,or,code,null,code,if,none,see,register,scope;scope,get,registered,scope,string,scope,name
ConfigurableBeanFactory -> Scope getRegisteredScope(String scopeName)_;1356735495;Return the Scope implementation for the given scope name, if any._<p>This will only return explicitly registered scopes._Built-in scopes such as "singleton" and "prototype" won't be exposed._@param scopeName the name of the scope_@return the registered Scope implementation, or {@code null} if none_@see #registerScope;Scope getRegisteredScope(String scopeName)_;return,the,scope,implementation,for,the,given,scope,name,if,any,p,this,will,only,return,explicitly,registered,scopes,built,in,scopes,such,as,singleton,and,prototype,won,t,be,exposed,param,scope,name,the,name,of,the,scope,return,the,registered,scope,implementation,or,code,null,if,none,see,register,scope;scope,get,registered,scope,string,scope,name
ConfigurableBeanFactory -> Scope getRegisteredScope(String scopeName)_;1460227762;Return the Scope implementation for the given scope name, if any._<p>This will only return explicitly registered scopes._Built-in scopes such as "singleton" and "prototype" won't be exposed._@param scopeName the name of the scope_@return the registered Scope implementation, or {@code null} if none_@see #registerScope;Scope getRegisteredScope(String scopeName)_;return,the,scope,implementation,for,the,given,scope,name,if,any,p,this,will,only,return,explicitly,registered,scopes,built,in,scopes,such,as,singleton,and,prototype,won,t,be,exposed,param,scope,name,the,name,of,the,scope,return,the,registered,scope,implementation,or,code,null,if,none,see,register,scope;scope,get,registered,scope,string,scope,name
ConfigurableBeanFactory -> void registerDependentBean(String beanName, String dependentBeanName)_;1328020251;Register a dependent bean for the given bean,_to be destroyed before the given bean is destroyed._@param beanName the name of the bean_@param dependentBeanName the name of the dependent bean_@since 2.5;void registerDependentBean(String beanName, String dependentBeanName)_;register,a,dependent,bean,for,the,given,bean,to,be,destroyed,before,the,given,bean,is,destroyed,param,bean,name,the,name,of,the,bean,param,dependent,bean,name,the,name,of,the,dependent,bean,since,2,5;void,register,dependent,bean,string,bean,name,string,dependent,bean,name
ConfigurableBeanFactory -> void registerDependentBean(String beanName, String dependentBeanName)_;1352418897;Register a dependent bean for the given bean,_to be destroyed before the given bean is destroyed._@param beanName the name of the bean_@param dependentBeanName the name of the dependent bean_@since 2.5;void registerDependentBean(String beanName, String dependentBeanName)_;register,a,dependent,bean,for,the,given,bean,to,be,destroyed,before,the,given,bean,is,destroyed,param,bean,name,the,name,of,the,bean,param,dependent,bean,name,the,name,of,the,dependent,bean,since,2,5;void,register,dependent,bean,string,bean,name,string,dependent,bean,name
ConfigurableBeanFactory -> void registerDependentBean(String beanName, String dependentBeanName)_;1356735495;Register a dependent bean for the given bean,_to be destroyed before the given bean is destroyed._@param beanName the name of the bean_@param dependentBeanName the name of the dependent bean_@since 2.5;void registerDependentBean(String beanName, String dependentBeanName)_;register,a,dependent,bean,for,the,given,bean,to,be,destroyed,before,the,given,bean,is,destroyed,param,bean,name,the,name,of,the,bean,param,dependent,bean,name,the,name,of,the,dependent,bean,since,2,5;void,register,dependent,bean,string,bean,name,string,dependent,bean,name
ConfigurableBeanFactory -> void registerDependentBean(String beanName, String dependentBeanName)_;1460227762;Register a dependent bean for the given bean,_to be destroyed before the given bean is destroyed._@param beanName the name of the bean_@param dependentBeanName the name of the dependent bean_@since 2.5;void registerDependentBean(String beanName, String dependentBeanName)_;register,a,dependent,bean,for,the,given,bean,to,be,destroyed,before,the,given,bean,is,destroyed,param,bean,name,the,name,of,the,bean,param,dependent,bean,name,the,name,of,the,dependent,bean,since,2,5;void,register,dependent,bean,string,bean,name,string,dependent,bean,name
ConfigurableBeanFactory -> void registerDependentBean(String beanName, String dependentBeanName)_;1495868221;Register a dependent bean for the given bean,_to be destroyed before the given bean is destroyed._@param beanName the name of the bean_@param dependentBeanName the name of the dependent bean_@since 2.5;void registerDependentBean(String beanName, String dependentBeanName)_;register,a,dependent,bean,for,the,given,bean,to,be,destroyed,before,the,given,bean,is,destroyed,param,bean,name,the,name,of,the,bean,param,dependent,bean,name,the,name,of,the,dependent,bean,since,2,5;void,register,dependent,bean,string,bean,name,string,dependent,bean,name
ConfigurableBeanFactory -> void registerDependentBean(String beanName, String dependentBeanName)_;1496259743;Register a dependent bean for the given bean,_to be destroyed before the given bean is destroyed._@param beanName the name of the bean_@param dependentBeanName the name of the dependent bean_@since 2.5;void registerDependentBean(String beanName, String dependentBeanName)_;register,a,dependent,bean,for,the,given,bean,to,be,destroyed,before,the,given,bean,is,destroyed,param,bean,name,the,name,of,the,bean,param,dependent,bean,name,the,name,of,the,dependent,bean,since,2,5;void,register,dependent,bean,string,bean,name,string,dependent,bean,name
ConfigurableBeanFactory -> void registerDependentBean(String beanName, String dependentBeanName)_;1496837955;Register a dependent bean for the given bean,_to be destroyed before the given bean is destroyed._@param beanName the name of the bean_@param dependentBeanName the name of the dependent bean_@since 2.5;void registerDependentBean(String beanName, String dependentBeanName)_;register,a,dependent,bean,for,the,given,bean,to,be,destroyed,before,the,given,bean,is,destroyed,param,bean,name,the,name,of,the,bean,param,dependent,bean,name,the,name,of,the,dependent,bean,since,2,5;void,register,dependent,bean,string,bean,name,string,dependent,bean,name
ConfigurableBeanFactory -> void registerDependentBean(String beanName, String dependentBeanName)_;1498780456;Register a dependent bean for the given bean,_to be destroyed before the given bean is destroyed._@param beanName the name of the bean_@param dependentBeanName the name of the dependent bean_@since 2.5;void registerDependentBean(String beanName, String dependentBeanName)_;register,a,dependent,bean,for,the,given,bean,to,be,destroyed,before,the,given,bean,is,destroyed,param,bean,name,the,name,of,the,bean,param,dependent,bean,name,the,name,of,the,dependent,bean,since,2,5;void,register,dependent,bean,string,bean,name,string,dependent,bean,name
ConfigurableBeanFactory -> void registerDependentBean(String beanName, String dependentBeanName)_;1527623466;Register a dependent bean for the given bean,_to be destroyed before the given bean is destroyed._@param beanName the name of the bean_@param dependentBeanName the name of the dependent bean_@since 2.5;void registerDependentBean(String beanName, String dependentBeanName)_;register,a,dependent,bean,for,the,given,bean,to,be,destroyed,before,the,given,bean,is,destroyed,param,bean,name,the,name,of,the,bean,param,dependent,bean,name,the,name,of,the,dependent,bean,since,2,5;void,register,dependent,bean,string,bean,name,string,dependent,bean,name
ConfigurableBeanFactory -> void registerDependentBean(String beanName, String dependentBeanName)_;1530174524;Register a dependent bean for the given bean,_to be destroyed before the given bean is destroyed._@param beanName the name of the bean_@param dependentBeanName the name of the dependent bean_@since 2.5;void registerDependentBean(String beanName, String dependentBeanName)_;register,a,dependent,bean,for,the,given,bean,to,be,destroyed,before,the,given,bean,is,destroyed,param,bean,name,the,name,of,the,bean,param,dependent,bean,name,the,name,of,the,dependent,bean,since,2,5;void,register,dependent,bean,string,bean,name,string,dependent,bean,name
ConfigurableBeanFactory -> ClassLoader getTempClassLoader()_;1328020251;Return the temporary ClassLoader to use for type matching purposes,_if any._@since 2.5;ClassLoader getTempClassLoader()_;return,the,temporary,class,loader,to,use,for,type,matching,purposes,if,any,since,2,5;class,loader,get,temp,class,loader
ConfigurableBeanFactory -> ClassLoader getTempClassLoader()_;1352418897;Return the temporary ClassLoader to use for type matching purposes,_if any._@since 2.5;ClassLoader getTempClassLoader()_;return,the,temporary,class,loader,to,use,for,type,matching,purposes,if,any,since,2,5;class,loader,get,temp,class,loader
ConfigurableBeanFactory -> ClassLoader getTempClassLoader()_;1356735495;Return the temporary ClassLoader to use for type matching purposes,_if any._@since 2.5;ClassLoader getTempClassLoader()_;return,the,temporary,class,loader,to,use,for,type,matching,purposes,if,any,since,2,5;class,loader,get,temp,class,loader
ConfigurableBeanFactory -> ClassLoader getTempClassLoader()_;1460227762;Return the temporary ClassLoader to use for type matching purposes,_if any._@since 2.5;ClassLoader getTempClassLoader()_;return,the,temporary,class,loader,to,use,for,type,matching,purposes,if,any,since,2,5;class,loader,get,temp,class,loader
ConfigurableBeanFactory -> void addPropertyEditorRegistrar(PropertyEditorRegistrar registrar)_;1328020251;Add a PropertyEditorRegistrar to be applied to all bean creation processes._<p>Such a registrar creates new PropertyEditor instances and registers them_on the given registry, fresh for each bean creation attempt. This avoids_the need for synchronization on custom editors_ hence, it is generally_preferable to use this method instead of {@link #registerCustomEditor}._@param registrar the PropertyEditorRegistrar to register;void addPropertyEditorRegistrar(PropertyEditorRegistrar registrar)_;add,a,property,editor,registrar,to,be,applied,to,all,bean,creation,processes,p,such,a,registrar,creates,new,property,editor,instances,and,registers,them,on,the,given,registry,fresh,for,each,bean,creation,attempt,this,avoids,the,need,for,synchronization,on,custom,editors,hence,it,is,generally,preferable,to,use,this,method,instead,of,link,register,custom,editor,param,registrar,the,property,editor,registrar,to,register;void,add,property,editor,registrar,property,editor,registrar,registrar
ConfigurableBeanFactory -> void addPropertyEditorRegistrar(PropertyEditorRegistrar registrar)_;1352418897;Add a PropertyEditorRegistrar to be applied to all bean creation processes._<p>Such a registrar creates new PropertyEditor instances and registers them_on the given registry, fresh for each bean creation attempt. This avoids_the need for synchronization on custom editors_ hence, it is generally_preferable to use this method instead of {@link #registerCustomEditor}._@param registrar the PropertyEditorRegistrar to register;void addPropertyEditorRegistrar(PropertyEditorRegistrar registrar)_;add,a,property,editor,registrar,to,be,applied,to,all,bean,creation,processes,p,such,a,registrar,creates,new,property,editor,instances,and,registers,them,on,the,given,registry,fresh,for,each,bean,creation,attempt,this,avoids,the,need,for,synchronization,on,custom,editors,hence,it,is,generally,preferable,to,use,this,method,instead,of,link,register,custom,editor,param,registrar,the,property,editor,registrar,to,register;void,add,property,editor,registrar,property,editor,registrar,registrar
ConfigurableBeanFactory -> void addPropertyEditorRegistrar(PropertyEditorRegistrar registrar)_;1356735495;Add a PropertyEditorRegistrar to be applied to all bean creation processes._<p>Such a registrar creates new PropertyEditor instances and registers them_on the given registry, fresh for each bean creation attempt. This avoids_the need for synchronization on custom editors_ hence, it is generally_preferable to use this method instead of {@link #registerCustomEditor}._@param registrar the PropertyEditorRegistrar to register;void addPropertyEditorRegistrar(PropertyEditorRegistrar registrar)_;add,a,property,editor,registrar,to,be,applied,to,all,bean,creation,processes,p,such,a,registrar,creates,new,property,editor,instances,and,registers,them,on,the,given,registry,fresh,for,each,bean,creation,attempt,this,avoids,the,need,for,synchronization,on,custom,editors,hence,it,is,generally,preferable,to,use,this,method,instead,of,link,register,custom,editor,param,registrar,the,property,editor,registrar,to,register;void,add,property,editor,registrar,property,editor,registrar,registrar
ConfigurableBeanFactory -> void addPropertyEditorRegistrar(PropertyEditorRegistrar registrar)_;1460227762;Add a PropertyEditorRegistrar to be applied to all bean creation processes._<p>Such a registrar creates new PropertyEditor instances and registers them_on the given registry, fresh for each bean creation attempt. This avoids_the need for synchronization on custom editors_ hence, it is generally_preferable to use this method instead of {@link #registerCustomEditor}._@param registrar the PropertyEditorRegistrar to register;void addPropertyEditorRegistrar(PropertyEditorRegistrar registrar)_;add,a,property,editor,registrar,to,be,applied,to,all,bean,creation,processes,p,such,a,registrar,creates,new,property,editor,instances,and,registers,them,on,the,given,registry,fresh,for,each,bean,creation,attempt,this,avoids,the,need,for,synchronization,on,custom,editors,hence,it,is,generally,preferable,to,use,this,method,instead,of,link,register,custom,editor,param,registrar,the,property,editor,registrar,to,register;void,add,property,editor,registrar,property,editor,registrar,registrar
ConfigurableBeanFactory -> void addPropertyEditorRegistrar(PropertyEditorRegistrar registrar)_;1495868221;Add a PropertyEditorRegistrar to be applied to all bean creation processes._<p>Such a registrar creates new PropertyEditor instances and registers them_on the given registry, fresh for each bean creation attempt. This avoids_the need for synchronization on custom editors_ hence, it is generally_preferable to use this method instead of {@link #registerCustomEditor}._@param registrar the PropertyEditorRegistrar to register;void addPropertyEditorRegistrar(PropertyEditorRegistrar registrar)_;add,a,property,editor,registrar,to,be,applied,to,all,bean,creation,processes,p,such,a,registrar,creates,new,property,editor,instances,and,registers,them,on,the,given,registry,fresh,for,each,bean,creation,attempt,this,avoids,the,need,for,synchronization,on,custom,editors,hence,it,is,generally,preferable,to,use,this,method,instead,of,link,register,custom,editor,param,registrar,the,property,editor,registrar,to,register;void,add,property,editor,registrar,property,editor,registrar,registrar
ConfigurableBeanFactory -> void addPropertyEditorRegistrar(PropertyEditorRegistrar registrar)_;1496259743;Add a PropertyEditorRegistrar to be applied to all bean creation processes._<p>Such a registrar creates new PropertyEditor instances and registers them_on the given registry, fresh for each bean creation attempt. This avoids_the need for synchronization on custom editors_ hence, it is generally_preferable to use this method instead of {@link #registerCustomEditor}._@param registrar the PropertyEditorRegistrar to register;void addPropertyEditorRegistrar(PropertyEditorRegistrar registrar)_;add,a,property,editor,registrar,to,be,applied,to,all,bean,creation,processes,p,such,a,registrar,creates,new,property,editor,instances,and,registers,them,on,the,given,registry,fresh,for,each,bean,creation,attempt,this,avoids,the,need,for,synchronization,on,custom,editors,hence,it,is,generally,preferable,to,use,this,method,instead,of,link,register,custom,editor,param,registrar,the,property,editor,registrar,to,register;void,add,property,editor,registrar,property,editor,registrar,registrar
ConfigurableBeanFactory -> void addPropertyEditorRegistrar(PropertyEditorRegistrar registrar)_;1496837955;Add a PropertyEditorRegistrar to be applied to all bean creation processes._<p>Such a registrar creates new PropertyEditor instances and registers them_on the given registry, fresh for each bean creation attempt. This avoids_the need for synchronization on custom editors_ hence, it is generally_preferable to use this method instead of {@link #registerCustomEditor}._@param registrar the PropertyEditorRegistrar to register;void addPropertyEditorRegistrar(PropertyEditorRegistrar registrar)_;add,a,property,editor,registrar,to,be,applied,to,all,bean,creation,processes,p,such,a,registrar,creates,new,property,editor,instances,and,registers,them,on,the,given,registry,fresh,for,each,bean,creation,attempt,this,avoids,the,need,for,synchronization,on,custom,editors,hence,it,is,generally,preferable,to,use,this,method,instead,of,link,register,custom,editor,param,registrar,the,property,editor,registrar,to,register;void,add,property,editor,registrar,property,editor,registrar,registrar
ConfigurableBeanFactory -> void addPropertyEditorRegistrar(PropertyEditorRegistrar registrar)_;1498780456;Add a PropertyEditorRegistrar to be applied to all bean creation processes._<p>Such a registrar creates new PropertyEditor instances and registers them_on the given registry, fresh for each bean creation attempt. This avoids_the need for synchronization on custom editors_ hence, it is generally_preferable to use this method instead of {@link #registerCustomEditor}._@param registrar the PropertyEditorRegistrar to register;void addPropertyEditorRegistrar(PropertyEditorRegistrar registrar)_;add,a,property,editor,registrar,to,be,applied,to,all,bean,creation,processes,p,such,a,registrar,creates,new,property,editor,instances,and,registers,them,on,the,given,registry,fresh,for,each,bean,creation,attempt,this,avoids,the,need,for,synchronization,on,custom,editors,hence,it,is,generally,preferable,to,use,this,method,instead,of,link,register,custom,editor,param,registrar,the,property,editor,registrar,to,register;void,add,property,editor,registrar,property,editor,registrar,registrar
ConfigurableBeanFactory -> void addPropertyEditorRegistrar(PropertyEditorRegistrar registrar)_;1527623466;Add a PropertyEditorRegistrar to be applied to all bean creation processes._<p>Such a registrar creates new PropertyEditor instances and registers them_on the given registry, fresh for each bean creation attempt. This avoids_the need for synchronization on custom editors_ hence, it is generally_preferable to use this method instead of {@link #registerCustomEditor}._@param registrar the PropertyEditorRegistrar to register;void addPropertyEditorRegistrar(PropertyEditorRegistrar registrar)_;add,a,property,editor,registrar,to,be,applied,to,all,bean,creation,processes,p,such,a,registrar,creates,new,property,editor,instances,and,registers,them,on,the,given,registry,fresh,for,each,bean,creation,attempt,this,avoids,the,need,for,synchronization,on,custom,editors,hence,it,is,generally,preferable,to,use,this,method,instead,of,link,register,custom,editor,param,registrar,the,property,editor,registrar,to,register;void,add,property,editor,registrar,property,editor,registrar,registrar
ConfigurableBeanFactory -> void addPropertyEditorRegistrar(PropertyEditorRegistrar registrar)_;1530174524;Add a PropertyEditorRegistrar to be applied to all bean creation processes._<p>Such a registrar creates new PropertyEditor instances and registers them_on the given registry, fresh for each bean creation attempt. This avoids_the need for synchronization on custom editors_ hence, it is generally_preferable to use this method instead of {@link #registerCustomEditor}._@param registrar the PropertyEditorRegistrar to register;void addPropertyEditorRegistrar(PropertyEditorRegistrar registrar)_;add,a,property,editor,registrar,to,be,applied,to,all,bean,creation,processes,p,such,a,registrar,creates,new,property,editor,instances,and,registers,them,on,the,given,registry,fresh,for,each,bean,creation,attempt,this,avoids,the,need,for,synchronization,on,custom,editors,hence,it,is,generally,preferable,to,use,this,method,instead,of,link,register,custom,editor,param,registrar,the,property,editor,registrar,to,register;void,add,property,editor,registrar,property,editor,registrar,registrar
ConfigurableBeanFactory -> ConversionService getConversionService()_;1328020251;Return the associated ConversionService, if any._@since 3.0;ConversionService getConversionService()_;return,the,associated,conversion,service,if,any,since,3,0;conversion,service,get,conversion,service
ConfigurableBeanFactory -> ConversionService getConversionService()_;1352418897;Return the associated ConversionService, if any._@since 3.0;ConversionService getConversionService()_;return,the,associated,conversion,service,if,any,since,3,0;conversion,service,get,conversion,service
ConfigurableBeanFactory -> ConversionService getConversionService()_;1356735495;Return the associated ConversionService, if any._@since 3.0;ConversionService getConversionService()_;return,the,associated,conversion,service,if,any,since,3,0;conversion,service,get,conversion,service
ConfigurableBeanFactory -> ConversionService getConversionService()_;1460227762;Return the associated ConversionService, if any._@since 3.0;ConversionService getConversionService()_;return,the,associated,conversion,service,if,any,since,3,0;conversion,service,get,conversion,service
ConfigurableBeanFactory -> void setCacheBeanMetadata(boolean cacheBeanMetadata)_;1328020251;Set whether to cache bean metadata such as given bean definitions_(in merged fashion) and resolved bean classes. Default is on._<p>Turn this flag off to enable hot-refreshing of bean definition objects_and in particular bean classes. If this flag is off, any creation of a bean_instance will re-query the bean class loader for newly resolved classes.;void setCacheBeanMetadata(boolean cacheBeanMetadata)_;set,whether,to,cache,bean,metadata,such,as,given,bean,definitions,in,merged,fashion,and,resolved,bean,classes,default,is,on,p,turn,this,flag,off,to,enable,hot,refreshing,of,bean,definition,objects,and,in,particular,bean,classes,if,this,flag,is,off,any,creation,of,a,bean,instance,will,re,query,the,bean,class,loader,for,newly,resolved,classes;void,set,cache,bean,metadata,boolean,cache,bean,metadata
ConfigurableBeanFactory -> void setCacheBeanMetadata(boolean cacheBeanMetadata)_;1352418897;Set whether to cache bean metadata such as given bean definitions_(in merged fashion) and resolved bean classes. Default is on._<p>Turn this flag off to enable hot-refreshing of bean definition objects_and in particular bean classes. If this flag is off, any creation of a bean_instance will re-query the bean class loader for newly resolved classes.;void setCacheBeanMetadata(boolean cacheBeanMetadata)_;set,whether,to,cache,bean,metadata,such,as,given,bean,definitions,in,merged,fashion,and,resolved,bean,classes,default,is,on,p,turn,this,flag,off,to,enable,hot,refreshing,of,bean,definition,objects,and,in,particular,bean,classes,if,this,flag,is,off,any,creation,of,a,bean,instance,will,re,query,the,bean,class,loader,for,newly,resolved,classes;void,set,cache,bean,metadata,boolean,cache,bean,metadata
ConfigurableBeanFactory -> void setCacheBeanMetadata(boolean cacheBeanMetadata)_;1356735495;Set whether to cache bean metadata such as given bean definitions_(in merged fashion) and resolved bean classes. Default is on._<p>Turn this flag off to enable hot-refreshing of bean definition objects_and in particular bean classes. If this flag is off, any creation of a bean_instance will re-query the bean class loader for newly resolved classes.;void setCacheBeanMetadata(boolean cacheBeanMetadata)_;set,whether,to,cache,bean,metadata,such,as,given,bean,definitions,in,merged,fashion,and,resolved,bean,classes,default,is,on,p,turn,this,flag,off,to,enable,hot,refreshing,of,bean,definition,objects,and,in,particular,bean,classes,if,this,flag,is,off,any,creation,of,a,bean,instance,will,re,query,the,bean,class,loader,for,newly,resolved,classes;void,set,cache,bean,metadata,boolean,cache,bean,metadata
ConfigurableBeanFactory -> void setCacheBeanMetadata(boolean cacheBeanMetadata)_;1460227762;Set whether to cache bean metadata such as given bean definitions_(in merged fashion) and resolved bean classes. Default is on._<p>Turn this flag off to enable hot-refreshing of bean definition objects_and in particular bean classes. If this flag is off, any creation of a bean_instance will re-query the bean class loader for newly resolved classes.;void setCacheBeanMetadata(boolean cacheBeanMetadata)_;set,whether,to,cache,bean,metadata,such,as,given,bean,definitions,in,merged,fashion,and,resolved,bean,classes,default,is,on,p,turn,this,flag,off,to,enable,hot,refreshing,of,bean,definition,objects,and,in,particular,bean,classes,if,this,flag,is,off,any,creation,of,a,bean,instance,will,re,query,the,bean,class,loader,for,newly,resolved,classes;void,set,cache,bean,metadata,boolean,cache,bean,metadata
ConfigurableBeanFactory -> void setCacheBeanMetadata(boolean cacheBeanMetadata)_;1495868221;Set whether to cache bean metadata such as given bean definitions_(in merged fashion) and resolved bean classes. Default is on._<p>Turn this flag off to enable hot-refreshing of bean definition objects_and in particular bean classes. If this flag is off, any creation of a bean_instance will re-query the bean class loader for newly resolved classes.;void setCacheBeanMetadata(boolean cacheBeanMetadata)_;set,whether,to,cache,bean,metadata,such,as,given,bean,definitions,in,merged,fashion,and,resolved,bean,classes,default,is,on,p,turn,this,flag,off,to,enable,hot,refreshing,of,bean,definition,objects,and,in,particular,bean,classes,if,this,flag,is,off,any,creation,of,a,bean,instance,will,re,query,the,bean,class,loader,for,newly,resolved,classes;void,set,cache,bean,metadata,boolean,cache,bean,metadata
ConfigurableBeanFactory -> void setCacheBeanMetadata(boolean cacheBeanMetadata)_;1496259743;Set whether to cache bean metadata such as given bean definitions_(in merged fashion) and resolved bean classes. Default is on._<p>Turn this flag off to enable hot-refreshing of bean definition objects_and in particular bean classes. If this flag is off, any creation of a bean_instance will re-query the bean class loader for newly resolved classes.;void setCacheBeanMetadata(boolean cacheBeanMetadata)_;set,whether,to,cache,bean,metadata,such,as,given,bean,definitions,in,merged,fashion,and,resolved,bean,classes,default,is,on,p,turn,this,flag,off,to,enable,hot,refreshing,of,bean,definition,objects,and,in,particular,bean,classes,if,this,flag,is,off,any,creation,of,a,bean,instance,will,re,query,the,bean,class,loader,for,newly,resolved,classes;void,set,cache,bean,metadata,boolean,cache,bean,metadata
ConfigurableBeanFactory -> void setCacheBeanMetadata(boolean cacheBeanMetadata)_;1496837955;Set whether to cache bean metadata such as given bean definitions_(in merged fashion) and resolved bean classes. Default is on._<p>Turn this flag off to enable hot-refreshing of bean definition objects_and in particular bean classes. If this flag is off, any creation of a bean_instance will re-query the bean class loader for newly resolved classes.;void setCacheBeanMetadata(boolean cacheBeanMetadata)_;set,whether,to,cache,bean,metadata,such,as,given,bean,definitions,in,merged,fashion,and,resolved,bean,classes,default,is,on,p,turn,this,flag,off,to,enable,hot,refreshing,of,bean,definition,objects,and,in,particular,bean,classes,if,this,flag,is,off,any,creation,of,a,bean,instance,will,re,query,the,bean,class,loader,for,newly,resolved,classes;void,set,cache,bean,metadata,boolean,cache,bean,metadata
ConfigurableBeanFactory -> void setCacheBeanMetadata(boolean cacheBeanMetadata)_;1498780456;Set whether to cache bean metadata such as given bean definitions_(in merged fashion) and resolved bean classes. Default is on._<p>Turn this flag off to enable hot-refreshing of bean definition objects_and in particular bean classes. If this flag is off, any creation of a bean_instance will re-query the bean class loader for newly resolved classes.;void setCacheBeanMetadata(boolean cacheBeanMetadata)_;set,whether,to,cache,bean,metadata,such,as,given,bean,definitions,in,merged,fashion,and,resolved,bean,classes,default,is,on,p,turn,this,flag,off,to,enable,hot,refreshing,of,bean,definition,objects,and,in,particular,bean,classes,if,this,flag,is,off,any,creation,of,a,bean,instance,will,re,query,the,bean,class,loader,for,newly,resolved,classes;void,set,cache,bean,metadata,boolean,cache,bean,metadata
ConfigurableBeanFactory -> void setCacheBeanMetadata(boolean cacheBeanMetadata)_;1527623466;Set whether to cache bean metadata such as given bean definitions_(in merged fashion) and resolved bean classes. Default is on._<p>Turn this flag off to enable hot-refreshing of bean definition objects_and in particular bean classes. If this flag is off, any creation of a bean_instance will re-query the bean class loader for newly resolved classes.;void setCacheBeanMetadata(boolean cacheBeanMetadata)_;set,whether,to,cache,bean,metadata,such,as,given,bean,definitions,in,merged,fashion,and,resolved,bean,classes,default,is,on,p,turn,this,flag,off,to,enable,hot,refreshing,of,bean,definition,objects,and,in,particular,bean,classes,if,this,flag,is,off,any,creation,of,a,bean,instance,will,re,query,the,bean,class,loader,for,newly,resolved,classes;void,set,cache,bean,metadata,boolean,cache,bean,metadata
ConfigurableBeanFactory -> void setCacheBeanMetadata(boolean cacheBeanMetadata)_;1530174524;Set whether to cache bean metadata such as given bean definitions_(in merged fashion) and resolved bean classes. Default is on._<p>Turn this flag off to enable hot-refreshing of bean definition objects_and in particular bean classes. If this flag is off, any creation of a bean_instance will re-query the bean class loader for newly resolved classes.;void setCacheBeanMetadata(boolean cacheBeanMetadata)_;set,whether,to,cache,bean,metadata,such,as,given,bean,definitions,in,merged,fashion,and,resolved,bean,classes,default,is,on,p,turn,this,flag,off,to,enable,hot,refreshing,of,bean,definition,objects,and,in,particular,bean,classes,if,this,flag,is,off,any,creation,of,a,bean,instance,will,re,query,the,bean,class,loader,for,newly,resolved,classes;void,set,cache,bean,metadata,boolean,cache,bean,metadata
ConfigurableBeanFactory -> String[] getDependentBeans(String beanName)_;1328020251;Return the names of all beans which depend on the specified bean, if any._@param beanName the name of the bean_@return the array of dependent bean names, or an empty array if none_@since 2.5;String[] getDependentBeans(String beanName)_;return,the,names,of,all,beans,which,depend,on,the,specified,bean,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,dependent,bean,names,or,an,empty,array,if,none,since,2,5;string,get,dependent,beans,string,bean,name
ConfigurableBeanFactory -> String[] getDependentBeans(String beanName)_;1352418897;Return the names of all beans which depend on the specified bean, if any._@param beanName the name of the bean_@return the array of dependent bean names, or an empty array if none_@since 2.5;String[] getDependentBeans(String beanName)_;return,the,names,of,all,beans,which,depend,on,the,specified,bean,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,dependent,bean,names,or,an,empty,array,if,none,since,2,5;string,get,dependent,beans,string,bean,name
ConfigurableBeanFactory -> String[] getDependentBeans(String beanName)_;1356735495;Return the names of all beans which depend on the specified bean, if any._@param beanName the name of the bean_@return the array of dependent bean names, or an empty array if none_@since 2.5;String[] getDependentBeans(String beanName)_;return,the,names,of,all,beans,which,depend,on,the,specified,bean,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,dependent,bean,names,or,an,empty,array,if,none,since,2,5;string,get,dependent,beans,string,bean,name
ConfigurableBeanFactory -> String[] getDependentBeans(String beanName)_;1460227762;Return the names of all beans which depend on the specified bean, if any._@param beanName the name of the bean_@return the array of dependent bean names, or an empty array if none_@since 2.5;String[] getDependentBeans(String beanName)_;return,the,names,of,all,beans,which,depend,on,the,specified,bean,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,dependent,bean,names,or,an,empty,array,if,none,since,2,5;string,get,dependent,beans,string,bean,name
ConfigurableBeanFactory -> String[] getDependentBeans(String beanName)_;1495868221;Return the names of all beans which depend on the specified bean, if any._@param beanName the name of the bean_@return the array of dependent bean names, or an empty array if none_@since 2.5;String[] getDependentBeans(String beanName)_;return,the,names,of,all,beans,which,depend,on,the,specified,bean,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,dependent,bean,names,or,an,empty,array,if,none,since,2,5;string,get,dependent,beans,string,bean,name
ConfigurableBeanFactory -> String[] getDependentBeans(String beanName)_;1496259743;Return the names of all beans which depend on the specified bean, if any._@param beanName the name of the bean_@return the array of dependent bean names, or an empty array if none_@since 2.5;String[] getDependentBeans(String beanName)_;return,the,names,of,all,beans,which,depend,on,the,specified,bean,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,dependent,bean,names,or,an,empty,array,if,none,since,2,5;string,get,dependent,beans,string,bean,name
ConfigurableBeanFactory -> String[] getDependentBeans(String beanName)_;1496837955;Return the names of all beans which depend on the specified bean, if any._@param beanName the name of the bean_@return the array of dependent bean names, or an empty array if none_@since 2.5;String[] getDependentBeans(String beanName)_;return,the,names,of,all,beans,which,depend,on,the,specified,bean,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,dependent,bean,names,or,an,empty,array,if,none,since,2,5;string,get,dependent,beans,string,bean,name
ConfigurableBeanFactory -> String[] getDependentBeans(String beanName)_;1498780456;Return the names of all beans which depend on the specified bean, if any._@param beanName the name of the bean_@return the array of dependent bean names, or an empty array if none_@since 2.5;String[] getDependentBeans(String beanName)_;return,the,names,of,all,beans,which,depend,on,the,specified,bean,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,dependent,bean,names,or,an,empty,array,if,none,since,2,5;string,get,dependent,beans,string,bean,name
ConfigurableBeanFactory -> String[] getDependentBeans(String beanName)_;1527623466;Return the names of all beans which depend on the specified bean, if any._@param beanName the name of the bean_@return the array of dependent bean names, or an empty array if none_@since 2.5;String[] getDependentBeans(String beanName)_;return,the,names,of,all,beans,which,depend,on,the,specified,bean,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,dependent,bean,names,or,an,empty,array,if,none,since,2,5;string,get,dependent,beans,string,bean,name
ConfigurableBeanFactory -> String[] getDependentBeans(String beanName)_;1530174524;Return the names of all beans which depend on the specified bean, if any._@param beanName the name of the bean_@return the array of dependent bean names, or an empty array if none_@since 2.5;String[] getDependentBeans(String beanName)_;return,the,names,of,all,beans,which,depend,on,the,specified,bean,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,dependent,bean,names,or,an,empty,array,if,none,since,2,5;string,get,dependent,beans,string,bean,name
ConfigurableBeanFactory -> @Nullable 	BeanExpressionResolver getBeanExpressionResolver()_;1496837955;Return the resolution strategy for expressions in bean definition values._@since 3.0;@Nullable_	BeanExpressionResolver getBeanExpressionResolver()_;return,the,resolution,strategy,for,expressions,in,bean,definition,values,since,3,0;nullable,bean,expression,resolver,get,bean,expression,resolver
ConfigurableBeanFactory -> @Nullable 	BeanExpressionResolver getBeanExpressionResolver()_;1498780456;Return the resolution strategy for expressions in bean definition values._@since 3.0;@Nullable_	BeanExpressionResolver getBeanExpressionResolver()_;return,the,resolution,strategy,for,expressions,in,bean,definition,values,since,3,0;nullable,bean,expression,resolver,get,bean,expression,resolver
ConfigurableBeanFactory -> @Nullable 	BeanExpressionResolver getBeanExpressionResolver()_;1527623466;Return the resolution strategy for expressions in bean definition values._@since 3.0;@Nullable_	BeanExpressionResolver getBeanExpressionResolver()_;return,the,resolution,strategy,for,expressions,in,bean,definition,values,since,3,0;nullable,bean,expression,resolver,get,bean,expression,resolver
ConfigurableBeanFactory -> @Nullable 	BeanExpressionResolver getBeanExpressionResolver()_;1530174524;Return the resolution strategy for expressions in bean definition values._@since 3.0;@Nullable_	BeanExpressionResolver getBeanExpressionResolver()_;return,the,resolution,strategy,for,expressions,in,bean,definition,values,since,3,0;nullable,bean,expression,resolver,get,bean,expression,resolver
ConfigurableBeanFactory -> boolean hasEmbeddedValueResolver()_;1460227762;Determine whether an embedded value resolver has been registered with this_bean factory, to be applied through {@link #resolveEmbeddedValue(String)}._@since 4.3;boolean hasEmbeddedValueResolver()_;determine,whether,an,embedded,value,resolver,has,been,registered,with,this,bean,factory,to,be,applied,through,link,resolve,embedded,value,string,since,4,3;boolean,has,embedded,value,resolver
ConfigurableBeanFactory -> boolean hasEmbeddedValueResolver()_;1495868221;Determine whether an embedded value resolver has been registered with this_bean factory, to be applied through {@link #resolveEmbeddedValue(String)}._@since 4.3;boolean hasEmbeddedValueResolver()_;determine,whether,an,embedded,value,resolver,has,been,registered,with,this,bean,factory,to,be,applied,through,link,resolve,embedded,value,string,since,4,3;boolean,has,embedded,value,resolver
ConfigurableBeanFactory -> boolean hasEmbeddedValueResolver()_;1496259743;Determine whether an embedded value resolver has been registered with this_bean factory, to be applied through {@link #resolveEmbeddedValue(String)}._@since 4.3;boolean hasEmbeddedValueResolver()_;determine,whether,an,embedded,value,resolver,has,been,registered,with,this,bean,factory,to,be,applied,through,link,resolve,embedded,value,string,since,4,3;boolean,has,embedded,value,resolver
ConfigurableBeanFactory -> boolean hasEmbeddedValueResolver()_;1496837955;Determine whether an embedded value resolver has been registered with this_bean factory, to be applied through {@link #resolveEmbeddedValue(String)}._@since 4.3;boolean hasEmbeddedValueResolver()_;determine,whether,an,embedded,value,resolver,has,been,registered,with,this,bean,factory,to,be,applied,through,link,resolve,embedded,value,string,since,4,3;boolean,has,embedded,value,resolver
ConfigurableBeanFactory -> boolean hasEmbeddedValueResolver()_;1498780456;Determine whether an embedded value resolver has been registered with this_bean factory, to be applied through {@link #resolveEmbeddedValue(String)}._@since 4.3;boolean hasEmbeddedValueResolver()_;determine,whether,an,embedded,value,resolver,has,been,registered,with,this,bean,factory,to,be,applied,through,link,resolve,embedded,value,string,since,4,3;boolean,has,embedded,value,resolver
ConfigurableBeanFactory -> boolean hasEmbeddedValueResolver()_;1527623466;Determine whether an embedded value resolver has been registered with this_bean factory, to be applied through {@link #resolveEmbeddedValue(String)}._@since 4.3;boolean hasEmbeddedValueResolver()_;determine,whether,an,embedded,value,resolver,has,been,registered,with,this,bean,factory,to,be,applied,through,link,resolve,embedded,value,string,since,4,3;boolean,has,embedded,value,resolver
ConfigurableBeanFactory -> boolean hasEmbeddedValueResolver()_;1530174524;Determine whether an embedded value resolver has been registered with this_bean factory, to be applied through {@link #resolveEmbeddedValue(String)}._@since 4.3;boolean hasEmbeddedValueResolver()_;determine,whether,an,embedded,value,resolver,has,been,registered,with,this,bean,factory,to,be,applied,through,link,resolve,embedded,value,string,since,4,3;boolean,has,embedded,value,resolver
ConfigurableBeanFactory -> boolean isFactoryBean(String name) throws NoSuchBeanDefinitionException_;1328020251;Determine whether the bean with the given name is a FactoryBean._@param name the name of the bean to check_@return whether the bean is a FactoryBean_(<code>false</code> means the bean exists but is not a FactoryBean)_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 2.5;boolean isFactoryBean(String name) throws NoSuchBeanDefinitionException_;determine,whether,the,bean,with,the,given,name,is,a,factory,bean,param,name,the,name,of,the,bean,to,check,return,whether,the,bean,is,a,factory,bean,code,false,code,means,the,bean,exists,but,is,not,a,factory,bean,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,2,5;boolean,is,factory,bean,string,name,throws,no,such,bean,definition,exception
ConfigurableBeanFactory -> boolean isFactoryBean(String name) throws NoSuchBeanDefinitionException_;1352418897;Determine whether the bean with the given name is a FactoryBean._@param name the name of the bean to check_@return whether the bean is a FactoryBean_(<code>false</code> means the bean exists but is not a FactoryBean)_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 2.5;boolean isFactoryBean(String name) throws NoSuchBeanDefinitionException_;determine,whether,the,bean,with,the,given,name,is,a,factory,bean,param,name,the,name,of,the,bean,to,check,return,whether,the,bean,is,a,factory,bean,code,false,code,means,the,bean,exists,but,is,not,a,factory,bean,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,2,5;boolean,is,factory,bean,string,name,throws,no,such,bean,definition,exception
ConfigurableBeanFactory -> boolean isFactoryBean(String name) throws NoSuchBeanDefinitionException_;1356735495;Determine whether the bean with the given name is a FactoryBean._@param name the name of the bean to check_@return whether the bean is a FactoryBean_({@code false} means the bean exists but is not a FactoryBean)_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 2.5;boolean isFactoryBean(String name) throws NoSuchBeanDefinitionException_;determine,whether,the,bean,with,the,given,name,is,a,factory,bean,param,name,the,name,of,the,bean,to,check,return,whether,the,bean,is,a,factory,bean,code,false,means,the,bean,exists,but,is,not,a,factory,bean,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,2,5;boolean,is,factory,bean,string,name,throws,no,such,bean,definition,exception
ConfigurableBeanFactory -> boolean isFactoryBean(String name) throws NoSuchBeanDefinitionException_;1460227762;Determine whether the bean with the given name is a FactoryBean._@param name the name of the bean to check_@return whether the bean is a FactoryBean_({@code false} means the bean exists but is not a FactoryBean)_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 2.5;boolean isFactoryBean(String name) throws NoSuchBeanDefinitionException_;determine,whether,the,bean,with,the,given,name,is,a,factory,bean,param,name,the,name,of,the,bean,to,check,return,whether,the,bean,is,a,factory,bean,code,false,means,the,bean,exists,but,is,not,a,factory,bean,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,2,5;boolean,is,factory,bean,string,name,throws,no,such,bean,definition,exception
ConfigurableBeanFactory -> boolean isFactoryBean(String name) throws NoSuchBeanDefinitionException_;1495868221;Determine whether the bean with the given name is a FactoryBean._@param name the name of the bean to check_@return whether the bean is a FactoryBean_({@code false} means the bean exists but is not a FactoryBean)_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 2.5;boolean isFactoryBean(String name) throws NoSuchBeanDefinitionException_;determine,whether,the,bean,with,the,given,name,is,a,factory,bean,param,name,the,name,of,the,bean,to,check,return,whether,the,bean,is,a,factory,bean,code,false,means,the,bean,exists,but,is,not,a,factory,bean,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,2,5;boolean,is,factory,bean,string,name,throws,no,such,bean,definition,exception
ConfigurableBeanFactory -> boolean isFactoryBean(String name) throws NoSuchBeanDefinitionException_;1496259743;Determine whether the bean with the given name is a FactoryBean._@param name the name of the bean to check_@return whether the bean is a FactoryBean_({@code false} means the bean exists but is not a FactoryBean)_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 2.5;boolean isFactoryBean(String name) throws NoSuchBeanDefinitionException_;determine,whether,the,bean,with,the,given,name,is,a,factory,bean,param,name,the,name,of,the,bean,to,check,return,whether,the,bean,is,a,factory,bean,code,false,means,the,bean,exists,but,is,not,a,factory,bean,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,2,5;boolean,is,factory,bean,string,name,throws,no,such,bean,definition,exception
ConfigurableBeanFactory -> boolean isFactoryBean(String name) throws NoSuchBeanDefinitionException_;1496837955;Determine whether the bean with the given name is a FactoryBean._@param name the name of the bean to check_@return whether the bean is a FactoryBean_({@code false} means the bean exists but is not a FactoryBean)_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 2.5;boolean isFactoryBean(String name) throws NoSuchBeanDefinitionException_;determine,whether,the,bean,with,the,given,name,is,a,factory,bean,param,name,the,name,of,the,bean,to,check,return,whether,the,bean,is,a,factory,bean,code,false,means,the,bean,exists,but,is,not,a,factory,bean,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,2,5;boolean,is,factory,bean,string,name,throws,no,such,bean,definition,exception
ConfigurableBeanFactory -> boolean isFactoryBean(String name) throws NoSuchBeanDefinitionException_;1498780456;Determine whether the bean with the given name is a FactoryBean._@param name the name of the bean to check_@return whether the bean is a FactoryBean_({@code false} means the bean exists but is not a FactoryBean)_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 2.5;boolean isFactoryBean(String name) throws NoSuchBeanDefinitionException_;determine,whether,the,bean,with,the,given,name,is,a,factory,bean,param,name,the,name,of,the,bean,to,check,return,whether,the,bean,is,a,factory,bean,code,false,means,the,bean,exists,but,is,not,a,factory,bean,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,2,5;boolean,is,factory,bean,string,name,throws,no,such,bean,definition,exception
ConfigurableBeanFactory -> boolean isFactoryBean(String name) throws NoSuchBeanDefinitionException_;1527623466;Determine whether the bean with the given name is a FactoryBean._@param name the name of the bean to check_@return whether the bean is a FactoryBean_({@code false} means the bean exists but is not a FactoryBean)_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 2.5;boolean isFactoryBean(String name) throws NoSuchBeanDefinitionException_;determine,whether,the,bean,with,the,given,name,is,a,factory,bean,param,name,the,name,of,the,bean,to,check,return,whether,the,bean,is,a,factory,bean,code,false,means,the,bean,exists,but,is,not,a,factory,bean,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,2,5;boolean,is,factory,bean,string,name,throws,no,such,bean,definition,exception
ConfigurableBeanFactory -> boolean isFactoryBean(String name) throws NoSuchBeanDefinitionException_;1530174524;Determine whether the bean with the given name is a FactoryBean._@param name the name of the bean to check_@return whether the bean is a FactoryBean_({@code false} means the bean exists but is not a FactoryBean)_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 2.5;boolean isFactoryBean(String name) throws NoSuchBeanDefinitionException_;determine,whether,the,bean,with,the,given,name,is,a,factory,bean,param,name,the,name,of,the,bean,to,check,return,whether,the,bean,is,a,factory,bean,code,false,means,the,bean,exists,but,is,not,a,factory,bean,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,2,5;boolean,is,factory,bean,string,name,throws,no,such,bean,definition,exception
ConfigurableBeanFactory -> void destroyBean(String beanName, Object beanInstance)_;1328020251;Destroy the given bean instance (usually a prototype instance_obtained from this factory) according to its bean definition._<p>Any exception that arises during destruction should be caught_and logged instead of propagated to the caller of this method._@param beanName the name of the bean definition_@param beanInstance the bean instance to destroy;void destroyBean(String beanName, Object beanInstance)_;destroy,the,given,bean,instance,usually,a,prototype,instance,obtained,from,this,factory,according,to,its,bean,definition,p,any,exception,that,arises,during,destruction,should,be,caught,and,logged,instead,of,propagated,to,the,caller,of,this,method,param,bean,name,the,name,of,the,bean,definition,param,bean,instance,the,bean,instance,to,destroy;void,destroy,bean,string,bean,name,object,bean,instance
ConfigurableBeanFactory -> void destroyBean(String beanName, Object beanInstance)_;1352418897;Destroy the given bean instance (usually a prototype instance_obtained from this factory) according to its bean definition._<p>Any exception that arises during destruction should be caught_and logged instead of propagated to the caller of this method._@param beanName the name of the bean definition_@param beanInstance the bean instance to destroy;void destroyBean(String beanName, Object beanInstance)_;destroy,the,given,bean,instance,usually,a,prototype,instance,obtained,from,this,factory,according,to,its,bean,definition,p,any,exception,that,arises,during,destruction,should,be,caught,and,logged,instead,of,propagated,to,the,caller,of,this,method,param,bean,name,the,name,of,the,bean,definition,param,bean,instance,the,bean,instance,to,destroy;void,destroy,bean,string,bean,name,object,bean,instance
ConfigurableBeanFactory -> void destroyBean(String beanName, Object beanInstance)_;1356735495;Destroy the given bean instance (usually a prototype instance_obtained from this factory) according to its bean definition._<p>Any exception that arises during destruction should be caught_and logged instead of propagated to the caller of this method._@param beanName the name of the bean definition_@param beanInstance the bean instance to destroy;void destroyBean(String beanName, Object beanInstance)_;destroy,the,given,bean,instance,usually,a,prototype,instance,obtained,from,this,factory,according,to,its,bean,definition,p,any,exception,that,arises,during,destruction,should,be,caught,and,logged,instead,of,propagated,to,the,caller,of,this,method,param,bean,name,the,name,of,the,bean,definition,param,bean,instance,the,bean,instance,to,destroy;void,destroy,bean,string,bean,name,object,bean,instance
ConfigurableBeanFactory -> void destroyBean(String beanName, Object beanInstance)_;1460227762;Destroy the given bean instance (usually a prototype instance_obtained from this factory) according to its bean definition._<p>Any exception that arises during destruction should be caught_and logged instead of propagated to the caller of this method._@param beanName the name of the bean definition_@param beanInstance the bean instance to destroy;void destroyBean(String beanName, Object beanInstance)_;destroy,the,given,bean,instance,usually,a,prototype,instance,obtained,from,this,factory,according,to,its,bean,definition,p,any,exception,that,arises,during,destruction,should,be,caught,and,logged,instead,of,propagated,to,the,caller,of,this,method,param,bean,name,the,name,of,the,bean,definition,param,bean,instance,the,bean,instance,to,destroy;void,destroy,bean,string,bean,name,object,bean,instance
ConfigurableBeanFactory -> void destroyBean(String beanName, Object beanInstance)_;1495868221;Destroy the given bean instance (usually a prototype instance_obtained from this factory) according to its bean definition._<p>Any exception that arises during destruction should be caught_and logged instead of propagated to the caller of this method._@param beanName the name of the bean definition_@param beanInstance the bean instance to destroy;void destroyBean(String beanName, Object beanInstance)_;destroy,the,given,bean,instance,usually,a,prototype,instance,obtained,from,this,factory,according,to,its,bean,definition,p,any,exception,that,arises,during,destruction,should,be,caught,and,logged,instead,of,propagated,to,the,caller,of,this,method,param,bean,name,the,name,of,the,bean,definition,param,bean,instance,the,bean,instance,to,destroy;void,destroy,bean,string,bean,name,object,bean,instance
ConfigurableBeanFactory -> void destroyBean(String beanName, Object beanInstance)_;1496259743;Destroy the given bean instance (usually a prototype instance_obtained from this factory) according to its bean definition._<p>Any exception that arises during destruction should be caught_and logged instead of propagated to the caller of this method._@param beanName the name of the bean definition_@param beanInstance the bean instance to destroy;void destroyBean(String beanName, Object beanInstance)_;destroy,the,given,bean,instance,usually,a,prototype,instance,obtained,from,this,factory,according,to,its,bean,definition,p,any,exception,that,arises,during,destruction,should,be,caught,and,logged,instead,of,propagated,to,the,caller,of,this,method,param,bean,name,the,name,of,the,bean,definition,param,bean,instance,the,bean,instance,to,destroy;void,destroy,bean,string,bean,name,object,bean,instance
ConfigurableBeanFactory -> void destroyBean(String beanName, Object beanInstance)_;1496837955;Destroy the given bean instance (usually a prototype instance_obtained from this factory) according to its bean definition._<p>Any exception that arises during destruction should be caught_and logged instead of propagated to the caller of this method._@param beanName the name of the bean definition_@param beanInstance the bean instance to destroy;void destroyBean(String beanName, Object beanInstance)_;destroy,the,given,bean,instance,usually,a,prototype,instance,obtained,from,this,factory,according,to,its,bean,definition,p,any,exception,that,arises,during,destruction,should,be,caught,and,logged,instead,of,propagated,to,the,caller,of,this,method,param,bean,name,the,name,of,the,bean,definition,param,bean,instance,the,bean,instance,to,destroy;void,destroy,bean,string,bean,name,object,bean,instance
ConfigurableBeanFactory -> void destroyBean(String beanName, Object beanInstance)_;1498780456;Destroy the given bean instance (usually a prototype instance_obtained from this factory) according to its bean definition._<p>Any exception that arises during destruction should be caught_and logged instead of propagated to the caller of this method._@param beanName the name of the bean definition_@param beanInstance the bean instance to destroy;void destroyBean(String beanName, Object beanInstance)_;destroy,the,given,bean,instance,usually,a,prototype,instance,obtained,from,this,factory,according,to,its,bean,definition,p,any,exception,that,arises,during,destruction,should,be,caught,and,logged,instead,of,propagated,to,the,caller,of,this,method,param,bean,name,the,name,of,the,bean,definition,param,bean,instance,the,bean,instance,to,destroy;void,destroy,bean,string,bean,name,object,bean,instance
ConfigurableBeanFactory -> void destroyBean(String beanName, Object beanInstance)_;1527623466;Destroy the given bean instance (usually a prototype instance_obtained from this factory) according to its bean definition._<p>Any exception that arises during destruction should be caught_and logged instead of propagated to the caller of this method._@param beanName the name of the bean definition_@param beanInstance the bean instance to destroy;void destroyBean(String beanName, Object beanInstance)_;destroy,the,given,bean,instance,usually,a,prototype,instance,obtained,from,this,factory,according,to,its,bean,definition,p,any,exception,that,arises,during,destruction,should,be,caught,and,logged,instead,of,propagated,to,the,caller,of,this,method,param,bean,name,the,name,of,the,bean,definition,param,bean,instance,the,bean,instance,to,destroy;void,destroy,bean,string,bean,name,object,bean,instance
ConfigurableBeanFactory -> void destroyBean(String beanName, Object beanInstance)_;1530174524;Destroy the given bean instance (usually a prototype instance_obtained from this factory) according to its bean definition._<p>Any exception that arises during destruction should be caught_and logged instead of propagated to the caller of this method._@param beanName the name of the bean definition_@param beanInstance the bean instance to destroy;void destroyBean(String beanName, Object beanInstance)_;destroy,the,given,bean,instance,usually,a,prototype,instance,obtained,from,this,factory,according,to,its,bean,definition,p,any,exception,that,arises,during,destruction,should,be,caught,and,logged,instead,of,propagated,to,the,caller,of,this,method,param,bean,name,the,name,of,the,bean,definition,param,bean,instance,the,bean,instance,to,destroy;void,destroy,bean,string,bean,name,object,bean,instance
ConfigurableBeanFactory -> @Nullable 	Scope getRegisteredScope(String scopeName)_;1495868221;Return the Scope implementation for the given scope name, if any._<p>This will only return explicitly registered scopes._Built-in scopes such as "singleton" and "prototype" won't be exposed._@param scopeName the name of the scope_@return the registered Scope implementation, or {@code null} if none_@see #registerScope;@Nullable_	Scope getRegisteredScope(String scopeName)_;return,the,scope,implementation,for,the,given,scope,name,if,any,p,this,will,only,return,explicitly,registered,scopes,built,in,scopes,such,as,singleton,and,prototype,won,t,be,exposed,param,scope,name,the,name,of,the,scope,return,the,registered,scope,implementation,or,code,null,if,none,see,register,scope;nullable,scope,get,registered,scope,string,scope,name
ConfigurableBeanFactory -> @Nullable 	Scope getRegisteredScope(String scopeName)_;1496259743;Return the Scope implementation for the given scope name, if any._<p>This will only return explicitly registered scopes._Built-in scopes such as "singleton" and "prototype" won't be exposed._@param scopeName the name of the scope_@return the registered Scope implementation, or {@code null} if none_@see #registerScope;@Nullable_	Scope getRegisteredScope(String scopeName)_;return,the,scope,implementation,for,the,given,scope,name,if,any,p,this,will,only,return,explicitly,registered,scopes,built,in,scopes,such,as,singleton,and,prototype,won,t,be,exposed,param,scope,name,the,name,of,the,scope,return,the,registered,scope,implementation,or,code,null,if,none,see,register,scope;nullable,scope,get,registered,scope,string,scope,name
ConfigurableBeanFactory -> @Nullable 	Scope getRegisteredScope(String scopeName)_;1496837955;Return the Scope implementation for the given scope name, if any._<p>This will only return explicitly registered scopes._Built-in scopes such as "singleton" and "prototype" won't be exposed._@param scopeName the name of the scope_@return the registered Scope implementation, or {@code null} if none_@see #registerScope;@Nullable_	Scope getRegisteredScope(String scopeName)_;return,the,scope,implementation,for,the,given,scope,name,if,any,p,this,will,only,return,explicitly,registered,scopes,built,in,scopes,such,as,singleton,and,prototype,won,t,be,exposed,param,scope,name,the,name,of,the,scope,return,the,registered,scope,implementation,or,code,null,if,none,see,register,scope;nullable,scope,get,registered,scope,string,scope,name
ConfigurableBeanFactory -> @Nullable 	Scope getRegisteredScope(String scopeName)_;1498780456;Return the Scope implementation for the given scope name, if any._<p>This will only return explicitly registered scopes._Built-in scopes such as "singleton" and "prototype" won't be exposed._@param scopeName the name of the scope_@return the registered Scope implementation, or {@code null} if none_@see #registerScope;@Nullable_	Scope getRegisteredScope(String scopeName)_;return,the,scope,implementation,for,the,given,scope,name,if,any,p,this,will,only,return,explicitly,registered,scopes,built,in,scopes,such,as,singleton,and,prototype,won,t,be,exposed,param,scope,name,the,name,of,the,scope,return,the,registered,scope,implementation,or,code,null,if,none,see,register,scope;nullable,scope,get,registered,scope,string,scope,name
ConfigurableBeanFactory -> @Nullable 	Scope getRegisteredScope(String scopeName)_;1527623466;Return the Scope implementation for the given scope name, if any._<p>This will only return explicitly registered scopes._Built-in scopes such as "singleton" and "prototype" won't be exposed._@param scopeName the name of the scope_@return the registered Scope implementation, or {@code null} if none_@see #registerScope;@Nullable_	Scope getRegisteredScope(String scopeName)_;return,the,scope,implementation,for,the,given,scope,name,if,any,p,this,will,only,return,explicitly,registered,scopes,built,in,scopes,such,as,singleton,and,prototype,won,t,be,exposed,param,scope,name,the,name,of,the,scope,return,the,registered,scope,implementation,or,code,null,if,none,see,register,scope;nullable,scope,get,registered,scope,string,scope,name
ConfigurableBeanFactory -> @Nullable 	Scope getRegisteredScope(String scopeName)_;1530174524;Return the Scope implementation for the given scope name, if any._<p>This will only return explicitly registered scopes._Built-in scopes such as "singleton" and "prototype" won't be exposed._@param scopeName the name of the scope_@return the registered Scope implementation, or {@code null} if none_@see #registerScope;@Nullable_	Scope getRegisteredScope(String scopeName)_;return,the,scope,implementation,for,the,given,scope,name,if,any,p,this,will,only,return,explicitly,registered,scopes,built,in,scopes,such,as,singleton,and,prototype,won,t,be,exposed,param,scope,name,the,name,of,the,scope,return,the,registered,scope,implementation,or,code,null,if,none,see,register,scope;nullable,scope,get,registered,scope,string,scope,name
ConfigurableBeanFactory -> @Nullable 	String resolveEmbeddedValue(String value)_;1495868221;Resolve the given embedded value, e.g. an annotation attribute._@param value the value to resolve_@return the resolved value (may be the original value as-is)_@since 3.0;@Nullable_	String resolveEmbeddedValue(String value)_;resolve,the,given,embedded,value,e,g,an,annotation,attribute,param,value,the,value,to,resolve,return,the,resolved,value,may,be,the,original,value,as,is,since,3,0;nullable,string,resolve,embedded,value,string,value
ConfigurableBeanFactory -> @Nullable 	String resolveEmbeddedValue(String value)_;1496259743;Resolve the given embedded value, e.g. an annotation attribute._@param value the value to resolve_@return the resolved value (may be the original value as-is)_@since 3.0;@Nullable_	String resolveEmbeddedValue(String value)_;resolve,the,given,embedded,value,e,g,an,annotation,attribute,param,value,the,value,to,resolve,return,the,resolved,value,may,be,the,original,value,as,is,since,3,0;nullable,string,resolve,embedded,value,string,value
ConfigurableBeanFactory -> @Nullable 	String resolveEmbeddedValue(String value)_;1496837955;Resolve the given embedded value, e.g. an annotation attribute._@param value the value to resolve_@return the resolved value (may be the original value as-is)_@since 3.0;@Nullable_	String resolveEmbeddedValue(String value)_;resolve,the,given,embedded,value,e,g,an,annotation,attribute,param,value,the,value,to,resolve,return,the,resolved,value,may,be,the,original,value,as,is,since,3,0;nullable,string,resolve,embedded,value,string,value
ConfigurableBeanFactory -> @Nullable 	String resolveEmbeddedValue(String value)_;1498780456;Resolve the given embedded value, e.g. an annotation attribute._@param value the value to resolve_@return the resolved value (may be the original value as-is)_@since 3.0;@Nullable_	String resolveEmbeddedValue(String value)_;resolve,the,given,embedded,value,e,g,an,annotation,attribute,param,value,the,value,to,resolve,return,the,resolved,value,may,be,the,original,value,as,is,since,3,0;nullable,string,resolve,embedded,value,string,value
ConfigurableBeanFactory -> @Nullable 	String resolveEmbeddedValue(String value)_;1527623466;Resolve the given embedded value, e.g. an annotation attribute._@param value the value to resolve_@return the resolved value (may be the original value as-is)_@since 3.0;@Nullable_	String resolveEmbeddedValue(String value)_;resolve,the,given,embedded,value,e,g,an,annotation,attribute,param,value,the,value,to,resolve,return,the,resolved,value,may,be,the,original,value,as,is,since,3,0;nullable,string,resolve,embedded,value,string,value
ConfigurableBeanFactory -> @Nullable 	String resolveEmbeddedValue(String value)_;1530174524;Resolve the given embedded value, e.g. an annotation attribute._@param value the value to resolve_@return the resolved value (may be the original value as-is)_@since 3.0;@Nullable_	String resolveEmbeddedValue(String value)_;resolve,the,given,embedded,value,e,g,an,annotation,attribute,param,value,the,value,to,resolve,return,the,resolved,value,may,be,the,original,value,as,is,since,3,0;nullable,string,resolve,embedded,value,string,value
ConfigurableBeanFactory -> void addEmbeddedValueResolver(StringValueResolver valueResolver)_;1328020251;Add a String resolver for embedded values such as annotation attributes._@param valueResolver the String resolver to apply to embedded values_@since 3.0;void addEmbeddedValueResolver(StringValueResolver valueResolver)_;add,a,string,resolver,for,embedded,values,such,as,annotation,attributes,param,value,resolver,the,string,resolver,to,apply,to,embedded,values,since,3,0;void,add,embedded,value,resolver,string,value,resolver,value,resolver
ConfigurableBeanFactory -> void addEmbeddedValueResolver(StringValueResolver valueResolver)_;1352418897;Add a String resolver for embedded values such as annotation attributes._@param valueResolver the String resolver to apply to embedded values_@since 3.0;void addEmbeddedValueResolver(StringValueResolver valueResolver)_;add,a,string,resolver,for,embedded,values,such,as,annotation,attributes,param,value,resolver,the,string,resolver,to,apply,to,embedded,values,since,3,0;void,add,embedded,value,resolver,string,value,resolver,value,resolver
ConfigurableBeanFactory -> void addEmbeddedValueResolver(StringValueResolver valueResolver)_;1356735495;Add a String resolver for embedded values such as annotation attributes._@param valueResolver the String resolver to apply to embedded values_@since 3.0;void addEmbeddedValueResolver(StringValueResolver valueResolver)_;add,a,string,resolver,for,embedded,values,such,as,annotation,attributes,param,value,resolver,the,string,resolver,to,apply,to,embedded,values,since,3,0;void,add,embedded,value,resolver,string,value,resolver,value,resolver
ConfigurableBeanFactory -> void addEmbeddedValueResolver(StringValueResolver valueResolver)_;1460227762;Add a String resolver for embedded values such as annotation attributes._@param valueResolver the String resolver to apply to embedded values_@since 3.0;void addEmbeddedValueResolver(StringValueResolver valueResolver)_;add,a,string,resolver,for,embedded,values,such,as,annotation,attributes,param,value,resolver,the,string,resolver,to,apply,to,embedded,values,since,3,0;void,add,embedded,value,resolver,string,value,resolver,value,resolver
ConfigurableBeanFactory -> void addEmbeddedValueResolver(StringValueResolver valueResolver)_;1495868221;Add a String resolver for embedded values such as annotation attributes._@param valueResolver the String resolver to apply to embedded values_@since 3.0;void addEmbeddedValueResolver(StringValueResolver valueResolver)_;add,a,string,resolver,for,embedded,values,such,as,annotation,attributes,param,value,resolver,the,string,resolver,to,apply,to,embedded,values,since,3,0;void,add,embedded,value,resolver,string,value,resolver,value,resolver
ConfigurableBeanFactory -> void addEmbeddedValueResolver(StringValueResolver valueResolver)_;1496259743;Add a String resolver for embedded values such as annotation attributes._@param valueResolver the String resolver to apply to embedded values_@since 3.0;void addEmbeddedValueResolver(StringValueResolver valueResolver)_;add,a,string,resolver,for,embedded,values,such,as,annotation,attributes,param,value,resolver,the,string,resolver,to,apply,to,embedded,values,since,3,0;void,add,embedded,value,resolver,string,value,resolver,value,resolver
ConfigurableBeanFactory -> void addEmbeddedValueResolver(StringValueResolver valueResolver)_;1496837955;Add a String resolver for embedded values such as annotation attributes._@param valueResolver the String resolver to apply to embedded values_@since 3.0;void addEmbeddedValueResolver(StringValueResolver valueResolver)_;add,a,string,resolver,for,embedded,values,such,as,annotation,attributes,param,value,resolver,the,string,resolver,to,apply,to,embedded,values,since,3,0;void,add,embedded,value,resolver,string,value,resolver,value,resolver
ConfigurableBeanFactory -> void addEmbeddedValueResolver(StringValueResolver valueResolver)_;1498780456;Add a String resolver for embedded values such as annotation attributes._@param valueResolver the String resolver to apply to embedded values_@since 3.0;void addEmbeddedValueResolver(StringValueResolver valueResolver)_;add,a,string,resolver,for,embedded,values,such,as,annotation,attributes,param,value,resolver,the,string,resolver,to,apply,to,embedded,values,since,3,0;void,add,embedded,value,resolver,string,value,resolver,value,resolver
ConfigurableBeanFactory -> void addEmbeddedValueResolver(StringValueResolver valueResolver)_;1527623466;Add a String resolver for embedded values such as annotation attributes._@param valueResolver the String resolver to apply to embedded values_@since 3.0;void addEmbeddedValueResolver(StringValueResolver valueResolver)_;add,a,string,resolver,for,embedded,values,such,as,annotation,attributes,param,value,resolver,the,string,resolver,to,apply,to,embedded,values,since,3,0;void,add,embedded,value,resolver,string,value,resolver,value,resolver
ConfigurableBeanFactory -> void addEmbeddedValueResolver(StringValueResolver valueResolver)_;1530174524;Add a String resolver for embedded values such as annotation attributes._@param valueResolver the String resolver to apply to embedded values_@since 3.0;void addEmbeddedValueResolver(StringValueResolver valueResolver)_;add,a,string,resolver,for,embedded,values,such,as,annotation,attributes,param,value,resolver,the,string,resolver,to,apply,to,embedded,values,since,3,0;void,add,embedded,value,resolver,string,value,resolver,value,resolver
ConfigurableBeanFactory -> void copyRegisteredEditorsTo(PropertyEditorRegistry registry)_;1328020251;Initialize the given PropertyEditorRegistry with the custom editors_that have been registered with this BeanFactory._@param registry the PropertyEditorRegistry to initialize;void copyRegisteredEditorsTo(PropertyEditorRegistry registry)_;initialize,the,given,property,editor,registry,with,the,custom,editors,that,have,been,registered,with,this,bean,factory,param,registry,the,property,editor,registry,to,initialize;void,copy,registered,editors,to,property,editor,registry,registry
ConfigurableBeanFactory -> void copyRegisteredEditorsTo(PropertyEditorRegistry registry)_;1352418897;Initialize the given PropertyEditorRegistry with the custom editors_that have been registered with this BeanFactory._@param registry the PropertyEditorRegistry to initialize;void copyRegisteredEditorsTo(PropertyEditorRegistry registry)_;initialize,the,given,property,editor,registry,with,the,custom,editors,that,have,been,registered,with,this,bean,factory,param,registry,the,property,editor,registry,to,initialize;void,copy,registered,editors,to,property,editor,registry,registry
ConfigurableBeanFactory -> void copyRegisteredEditorsTo(PropertyEditorRegistry registry)_;1356735495;Initialize the given PropertyEditorRegistry with the custom editors_that have been registered with this BeanFactory._@param registry the PropertyEditorRegistry to initialize;void copyRegisteredEditorsTo(PropertyEditorRegistry registry)_;initialize,the,given,property,editor,registry,with,the,custom,editors,that,have,been,registered,with,this,bean,factory,param,registry,the,property,editor,registry,to,initialize;void,copy,registered,editors,to,property,editor,registry,registry
ConfigurableBeanFactory -> void copyRegisteredEditorsTo(PropertyEditorRegistry registry)_;1460227762;Initialize the given PropertyEditorRegistry with the custom editors_that have been registered with this BeanFactory._@param registry the PropertyEditorRegistry to initialize;void copyRegisteredEditorsTo(PropertyEditorRegistry registry)_;initialize,the,given,property,editor,registry,with,the,custom,editors,that,have,been,registered,with,this,bean,factory,param,registry,the,property,editor,registry,to,initialize;void,copy,registered,editors,to,property,editor,registry,registry
ConfigurableBeanFactory -> void copyRegisteredEditorsTo(PropertyEditorRegistry registry)_;1495868221;Initialize the given PropertyEditorRegistry with the custom editors_that have been registered with this BeanFactory._@param registry the PropertyEditorRegistry to initialize;void copyRegisteredEditorsTo(PropertyEditorRegistry registry)_;initialize,the,given,property,editor,registry,with,the,custom,editors,that,have,been,registered,with,this,bean,factory,param,registry,the,property,editor,registry,to,initialize;void,copy,registered,editors,to,property,editor,registry,registry
ConfigurableBeanFactory -> void copyRegisteredEditorsTo(PropertyEditorRegistry registry)_;1496259743;Initialize the given PropertyEditorRegistry with the custom editors_that have been registered with this BeanFactory._@param registry the PropertyEditorRegistry to initialize;void copyRegisteredEditorsTo(PropertyEditorRegistry registry)_;initialize,the,given,property,editor,registry,with,the,custom,editors,that,have,been,registered,with,this,bean,factory,param,registry,the,property,editor,registry,to,initialize;void,copy,registered,editors,to,property,editor,registry,registry
ConfigurableBeanFactory -> void copyRegisteredEditorsTo(PropertyEditorRegistry registry)_;1496837955;Initialize the given PropertyEditorRegistry with the custom editors_that have been registered with this BeanFactory._@param registry the PropertyEditorRegistry to initialize;void copyRegisteredEditorsTo(PropertyEditorRegistry registry)_;initialize,the,given,property,editor,registry,with,the,custom,editors,that,have,been,registered,with,this,bean,factory,param,registry,the,property,editor,registry,to,initialize;void,copy,registered,editors,to,property,editor,registry,registry
ConfigurableBeanFactory -> void copyRegisteredEditorsTo(PropertyEditorRegistry registry)_;1498780456;Initialize the given PropertyEditorRegistry with the custom editors_that have been registered with this BeanFactory._@param registry the PropertyEditorRegistry to initialize;void copyRegisteredEditorsTo(PropertyEditorRegistry registry)_;initialize,the,given,property,editor,registry,with,the,custom,editors,that,have,been,registered,with,this,bean,factory,param,registry,the,property,editor,registry,to,initialize;void,copy,registered,editors,to,property,editor,registry,registry
ConfigurableBeanFactory -> void copyRegisteredEditorsTo(PropertyEditorRegistry registry)_;1527623466;Initialize the given PropertyEditorRegistry with the custom editors_that have been registered with this BeanFactory._@param registry the PropertyEditorRegistry to initialize;void copyRegisteredEditorsTo(PropertyEditorRegistry registry)_;initialize,the,given,property,editor,registry,with,the,custom,editors,that,have,been,registered,with,this,bean,factory,param,registry,the,property,editor,registry,to,initialize;void,copy,registered,editors,to,property,editor,registry,registry
ConfigurableBeanFactory -> void copyRegisteredEditorsTo(PropertyEditorRegistry registry)_;1530174524;Initialize the given PropertyEditorRegistry with the custom editors_that have been registered with this BeanFactory._@param registry the PropertyEditorRegistry to initialize;void copyRegisteredEditorsTo(PropertyEditorRegistry registry)_;initialize,the,given,property,editor,registry,with,the,custom,editors,that,have,been,registered,with,this,bean,factory,param,registry,the,property,editor,registry,to,initialize;void,copy,registered,editors,to,property,editor,registry,registry
ConfigurableBeanFactory -> void copyConfigurationFrom(ConfigurableBeanFactory otherFactory)_;1328020251;Copy all relevant configuration from the given other factory._<p>Should include all standard configuration settings as well as_BeanPostProcessors, Scopes, and factory-specific internal settings._Should not include any metadata of actual bean definitions,_such as BeanDefinition objects and bean name aliases._@param otherFactory the other BeanFactory to copy from;void copyConfigurationFrom(ConfigurableBeanFactory otherFactory)_;copy,all,relevant,configuration,from,the,given,other,factory,p,should,include,all,standard,configuration,settings,as,well,as,bean,post,processors,scopes,and,factory,specific,internal,settings,should,not,include,any,metadata,of,actual,bean,definitions,such,as,bean,definition,objects,and,bean,name,aliases,param,other,factory,the,other,bean,factory,to,copy,from;void,copy,configuration,from,configurable,bean,factory,other,factory
ConfigurableBeanFactory -> void copyConfigurationFrom(ConfigurableBeanFactory otherFactory)_;1352418897;Copy all relevant configuration from the given other factory._<p>Should include all standard configuration settings as well as_BeanPostProcessors, Scopes, and factory-specific internal settings._Should not include any metadata of actual bean definitions,_such as BeanDefinition objects and bean name aliases._@param otherFactory the other BeanFactory to copy from;void copyConfigurationFrom(ConfigurableBeanFactory otherFactory)_;copy,all,relevant,configuration,from,the,given,other,factory,p,should,include,all,standard,configuration,settings,as,well,as,bean,post,processors,scopes,and,factory,specific,internal,settings,should,not,include,any,metadata,of,actual,bean,definitions,such,as,bean,definition,objects,and,bean,name,aliases,param,other,factory,the,other,bean,factory,to,copy,from;void,copy,configuration,from,configurable,bean,factory,other,factory
ConfigurableBeanFactory -> void copyConfigurationFrom(ConfigurableBeanFactory otherFactory)_;1356735495;Copy all relevant configuration from the given other factory._<p>Should include all standard configuration settings as well as_BeanPostProcessors, Scopes, and factory-specific internal settings._Should not include any metadata of actual bean definitions,_such as BeanDefinition objects and bean name aliases._@param otherFactory the other BeanFactory to copy from;void copyConfigurationFrom(ConfigurableBeanFactory otherFactory)_;copy,all,relevant,configuration,from,the,given,other,factory,p,should,include,all,standard,configuration,settings,as,well,as,bean,post,processors,scopes,and,factory,specific,internal,settings,should,not,include,any,metadata,of,actual,bean,definitions,such,as,bean,definition,objects,and,bean,name,aliases,param,other,factory,the,other,bean,factory,to,copy,from;void,copy,configuration,from,configurable,bean,factory,other,factory
ConfigurableBeanFactory -> void copyConfigurationFrom(ConfigurableBeanFactory otherFactory)_;1460227762;Copy all relevant configuration from the given other factory._<p>Should include all standard configuration settings as well as_BeanPostProcessors, Scopes, and factory-specific internal settings._Should not include any metadata of actual bean definitions,_such as BeanDefinition objects and bean name aliases._@param otherFactory the other BeanFactory to copy from;void copyConfigurationFrom(ConfigurableBeanFactory otherFactory)_;copy,all,relevant,configuration,from,the,given,other,factory,p,should,include,all,standard,configuration,settings,as,well,as,bean,post,processors,scopes,and,factory,specific,internal,settings,should,not,include,any,metadata,of,actual,bean,definitions,such,as,bean,definition,objects,and,bean,name,aliases,param,other,factory,the,other,bean,factory,to,copy,from;void,copy,configuration,from,configurable,bean,factory,other,factory
ConfigurableBeanFactory -> void copyConfigurationFrom(ConfigurableBeanFactory otherFactory)_;1495868221;Copy all relevant configuration from the given other factory._<p>Should include all standard configuration settings as well as_BeanPostProcessors, Scopes, and factory-specific internal settings._Should not include any metadata of actual bean definitions,_such as BeanDefinition objects and bean name aliases._@param otherFactory the other BeanFactory to copy from;void copyConfigurationFrom(ConfigurableBeanFactory otherFactory)_;copy,all,relevant,configuration,from,the,given,other,factory,p,should,include,all,standard,configuration,settings,as,well,as,bean,post,processors,scopes,and,factory,specific,internal,settings,should,not,include,any,metadata,of,actual,bean,definitions,such,as,bean,definition,objects,and,bean,name,aliases,param,other,factory,the,other,bean,factory,to,copy,from;void,copy,configuration,from,configurable,bean,factory,other,factory
ConfigurableBeanFactory -> void copyConfigurationFrom(ConfigurableBeanFactory otherFactory)_;1496259743;Copy all relevant configuration from the given other factory._<p>Should include all standard configuration settings as well as_BeanPostProcessors, Scopes, and factory-specific internal settings._Should not include any metadata of actual bean definitions,_such as BeanDefinition objects and bean name aliases._@param otherFactory the other BeanFactory to copy from;void copyConfigurationFrom(ConfigurableBeanFactory otherFactory)_;copy,all,relevant,configuration,from,the,given,other,factory,p,should,include,all,standard,configuration,settings,as,well,as,bean,post,processors,scopes,and,factory,specific,internal,settings,should,not,include,any,metadata,of,actual,bean,definitions,such,as,bean,definition,objects,and,bean,name,aliases,param,other,factory,the,other,bean,factory,to,copy,from;void,copy,configuration,from,configurable,bean,factory,other,factory
ConfigurableBeanFactory -> void copyConfigurationFrom(ConfigurableBeanFactory otherFactory)_;1496837955;Copy all relevant configuration from the given other factory._<p>Should include all standard configuration settings as well as_BeanPostProcessors, Scopes, and factory-specific internal settings._Should not include any metadata of actual bean definitions,_such as BeanDefinition objects and bean name aliases._@param otherFactory the other BeanFactory to copy from;void copyConfigurationFrom(ConfigurableBeanFactory otherFactory)_;copy,all,relevant,configuration,from,the,given,other,factory,p,should,include,all,standard,configuration,settings,as,well,as,bean,post,processors,scopes,and,factory,specific,internal,settings,should,not,include,any,metadata,of,actual,bean,definitions,such,as,bean,definition,objects,and,bean,name,aliases,param,other,factory,the,other,bean,factory,to,copy,from;void,copy,configuration,from,configurable,bean,factory,other,factory
ConfigurableBeanFactory -> void copyConfigurationFrom(ConfigurableBeanFactory otherFactory)_;1498780456;Copy all relevant configuration from the given other factory._<p>Should include all standard configuration settings as well as_BeanPostProcessors, Scopes, and factory-specific internal settings._Should not include any metadata of actual bean definitions,_such as BeanDefinition objects and bean name aliases._@param otherFactory the other BeanFactory to copy from;void copyConfigurationFrom(ConfigurableBeanFactory otherFactory)_;copy,all,relevant,configuration,from,the,given,other,factory,p,should,include,all,standard,configuration,settings,as,well,as,bean,post,processors,scopes,and,factory,specific,internal,settings,should,not,include,any,metadata,of,actual,bean,definitions,such,as,bean,definition,objects,and,bean,name,aliases,param,other,factory,the,other,bean,factory,to,copy,from;void,copy,configuration,from,configurable,bean,factory,other,factory
ConfigurableBeanFactory -> void copyConfigurationFrom(ConfigurableBeanFactory otherFactory)_;1527623466;Copy all relevant configuration from the given other factory._<p>Should include all standard configuration settings as well as_BeanPostProcessors, Scopes, and factory-specific internal settings._Should not include any metadata of actual bean definitions,_such as BeanDefinition objects and bean name aliases._@param otherFactory the other BeanFactory to copy from;void copyConfigurationFrom(ConfigurableBeanFactory otherFactory)_;copy,all,relevant,configuration,from,the,given,other,factory,p,should,include,all,standard,configuration,settings,as,well,as,bean,post,processors,scopes,and,factory,specific,internal,settings,should,not,include,any,metadata,of,actual,bean,definitions,such,as,bean,definition,objects,and,bean,name,aliases,param,other,factory,the,other,bean,factory,to,copy,from;void,copy,configuration,from,configurable,bean,factory,other,factory
ConfigurableBeanFactory -> void copyConfigurationFrom(ConfigurableBeanFactory otherFactory)_;1530174524;Copy all relevant configuration from the given other factory._<p>Should include all standard configuration settings as well as_BeanPostProcessors, Scopes, and factory-specific internal settings._Should not include any metadata of actual bean definitions,_such as BeanDefinition objects and bean name aliases._@param otherFactory the other BeanFactory to copy from;void copyConfigurationFrom(ConfigurableBeanFactory otherFactory)_;copy,all,relevant,configuration,from,the,given,other,factory,p,should,include,all,standard,configuration,settings,as,well,as,bean,post,processors,scopes,and,factory,specific,internal,settings,should,not,include,any,metadata,of,actual,bean,definitions,such,as,bean,definition,objects,and,bean,name,aliases,param,other,factory,the,other,bean,factory,to,copy,from;void,copy,configuration,from,configurable,bean,factory,other,factory
ConfigurableBeanFactory -> void destroyScopedBean(String beanName)_;1328020251;Destroy the specified scoped bean in the current target scope, if any._<p>Any exception that arises during destruction should be caught_and logged instead of propagated to the caller of this method._@param beanName the name of the scoped bean;void destroyScopedBean(String beanName)_;destroy,the,specified,scoped,bean,in,the,current,target,scope,if,any,p,any,exception,that,arises,during,destruction,should,be,caught,and,logged,instead,of,propagated,to,the,caller,of,this,method,param,bean,name,the,name,of,the,scoped,bean;void,destroy,scoped,bean,string,bean,name
ConfigurableBeanFactory -> void destroyScopedBean(String beanName)_;1352418897;Destroy the specified scoped bean in the current target scope, if any._<p>Any exception that arises during destruction should be caught_and logged instead of propagated to the caller of this method._@param beanName the name of the scoped bean;void destroyScopedBean(String beanName)_;destroy,the,specified,scoped,bean,in,the,current,target,scope,if,any,p,any,exception,that,arises,during,destruction,should,be,caught,and,logged,instead,of,propagated,to,the,caller,of,this,method,param,bean,name,the,name,of,the,scoped,bean;void,destroy,scoped,bean,string,bean,name
ConfigurableBeanFactory -> void destroyScopedBean(String beanName)_;1356735495;Destroy the specified scoped bean in the current target scope, if any._<p>Any exception that arises during destruction should be caught_and logged instead of propagated to the caller of this method._@param beanName the name of the scoped bean;void destroyScopedBean(String beanName)_;destroy,the,specified,scoped,bean,in,the,current,target,scope,if,any,p,any,exception,that,arises,during,destruction,should,be,caught,and,logged,instead,of,propagated,to,the,caller,of,this,method,param,bean,name,the,name,of,the,scoped,bean;void,destroy,scoped,bean,string,bean,name
ConfigurableBeanFactory -> void destroyScopedBean(String beanName)_;1460227762;Destroy the specified scoped bean in the current target scope, if any._<p>Any exception that arises during destruction should be caught_and logged instead of propagated to the caller of this method._@param beanName the name of the scoped bean;void destroyScopedBean(String beanName)_;destroy,the,specified,scoped,bean,in,the,current,target,scope,if,any,p,any,exception,that,arises,during,destruction,should,be,caught,and,logged,instead,of,propagated,to,the,caller,of,this,method,param,bean,name,the,name,of,the,scoped,bean;void,destroy,scoped,bean,string,bean,name
ConfigurableBeanFactory -> void destroyScopedBean(String beanName)_;1495868221;Destroy the specified scoped bean in the current target scope, if any._<p>Any exception that arises during destruction should be caught_and logged instead of propagated to the caller of this method._@param beanName the name of the scoped bean;void destroyScopedBean(String beanName)_;destroy,the,specified,scoped,bean,in,the,current,target,scope,if,any,p,any,exception,that,arises,during,destruction,should,be,caught,and,logged,instead,of,propagated,to,the,caller,of,this,method,param,bean,name,the,name,of,the,scoped,bean;void,destroy,scoped,bean,string,bean,name
ConfigurableBeanFactory -> void destroyScopedBean(String beanName)_;1496259743;Destroy the specified scoped bean in the current target scope, if any._<p>Any exception that arises during destruction should be caught_and logged instead of propagated to the caller of this method._@param beanName the name of the scoped bean;void destroyScopedBean(String beanName)_;destroy,the,specified,scoped,bean,in,the,current,target,scope,if,any,p,any,exception,that,arises,during,destruction,should,be,caught,and,logged,instead,of,propagated,to,the,caller,of,this,method,param,bean,name,the,name,of,the,scoped,bean;void,destroy,scoped,bean,string,bean,name
ConfigurableBeanFactory -> void destroyScopedBean(String beanName)_;1496837955;Destroy the specified scoped bean in the current target scope, if any._<p>Any exception that arises during destruction should be caught_and logged instead of propagated to the caller of this method._@param beanName the name of the scoped bean;void destroyScopedBean(String beanName)_;destroy,the,specified,scoped,bean,in,the,current,target,scope,if,any,p,any,exception,that,arises,during,destruction,should,be,caught,and,logged,instead,of,propagated,to,the,caller,of,this,method,param,bean,name,the,name,of,the,scoped,bean;void,destroy,scoped,bean,string,bean,name
ConfigurableBeanFactory -> void destroyScopedBean(String beanName)_;1498780456;Destroy the specified scoped bean in the current target scope, if any._<p>Any exception that arises during destruction should be caught_and logged instead of propagated to the caller of this method._@param beanName the name of the scoped bean;void destroyScopedBean(String beanName)_;destroy,the,specified,scoped,bean,in,the,current,target,scope,if,any,p,any,exception,that,arises,during,destruction,should,be,caught,and,logged,instead,of,propagated,to,the,caller,of,this,method,param,bean,name,the,name,of,the,scoped,bean;void,destroy,scoped,bean,string,bean,name
ConfigurableBeanFactory -> void destroyScopedBean(String beanName)_;1527623466;Destroy the specified scoped bean in the current target scope, if any._<p>Any exception that arises during destruction should be caught_and logged instead of propagated to the caller of this method._@param beanName the name of the scoped bean;void destroyScopedBean(String beanName)_;destroy,the,specified,scoped,bean,in,the,current,target,scope,if,any,p,any,exception,that,arises,during,destruction,should,be,caught,and,logged,instead,of,propagated,to,the,caller,of,this,method,param,bean,name,the,name,of,the,scoped,bean;void,destroy,scoped,bean,string,bean,name
ConfigurableBeanFactory -> void destroyScopedBean(String beanName)_;1530174524;Destroy the specified scoped bean in the current target scope, if any._<p>Any exception that arises during destruction should be caught_and logged instead of propagated to the caller of this method._@param beanName the name of the scoped bean;void destroyScopedBean(String beanName)_;destroy,the,specified,scoped,bean,in,the,current,target,scope,if,any,p,any,exception,that,arises,during,destruction,should,be,caught,and,logged,instead,of,propagated,to,the,caller,of,this,method,param,bean,name,the,name,of,the,scoped,bean;void,destroy,scoped,bean,string,bean,name
ConfigurableBeanFactory -> @Nullable 	ConversionService getConversionService()_;1495868221;Return the associated ConversionService, if any._@since 3.0;@Nullable_	ConversionService getConversionService()_;return,the,associated,conversion,service,if,any,since,3,0;nullable,conversion,service,get,conversion,service
ConfigurableBeanFactory -> @Nullable 	ConversionService getConversionService()_;1496259743;Return the associated ConversionService, if any._@since 3.0;@Nullable_	ConversionService getConversionService()_;return,the,associated,conversion,service,if,any,since,3,0;nullable,conversion,service,get,conversion,service
ConfigurableBeanFactory -> @Nullable 	ConversionService getConversionService()_;1496837955;Return the associated ConversionService, if any._@since 3.0;@Nullable_	ConversionService getConversionService()_;return,the,associated,conversion,service,if,any,since,3,0;nullable,conversion,service,get,conversion,service
ConfigurableBeanFactory -> @Nullable 	ConversionService getConversionService()_;1498780456;Return the associated ConversionService, if any._@since 3.0;@Nullable_	ConversionService getConversionService()_;return,the,associated,conversion,service,if,any,since,3,0;nullable,conversion,service,get,conversion,service
ConfigurableBeanFactory -> @Nullable 	ConversionService getConversionService()_;1527623466;Return the associated ConversionService, if any._@since 3.0;@Nullable_	ConversionService getConversionService()_;return,the,associated,conversion,service,if,any,since,3,0;nullable,conversion,service,get,conversion,service
ConfigurableBeanFactory -> @Nullable 	ConversionService getConversionService()_;1530174524;Return the associated ConversionService, if any._@since 3.0;@Nullable_	ConversionService getConversionService()_;return,the,associated,conversion,service,if,any,since,3,0;nullable,conversion,service,get,conversion,service
ConfigurableBeanFactory -> void setBeanClassLoader(@Nullable ClassLoader beanClassLoader)_;1495868221;Set the class loader to use for loading bean classes._Default is the thread context class loader._<p>Note that this class loader will only apply to bean definitions_that do not carry a resolved bean class yet. This is the case as of_Spring 2.0 by default: Bean definitions only carry bean class names,_to be resolved once the factory processes the bean definition._@param beanClassLoader the class loader to use,_or {@code null} to suggest the default class loader;void setBeanClassLoader(@Nullable ClassLoader beanClassLoader)_;set,the,class,loader,to,use,for,loading,bean,classes,default,is,the,thread,context,class,loader,p,note,that,this,class,loader,will,only,apply,to,bean,definitions,that,do,not,carry,a,resolved,bean,class,yet,this,is,the,case,as,of,spring,2,0,by,default,bean,definitions,only,carry,bean,class,names,to,be,resolved,once,the,factory,processes,the,bean,definition,param,bean,class,loader,the,class,loader,to,use,or,code,null,to,suggest,the,default,class,loader;void,set,bean,class,loader,nullable,class,loader,bean,class,loader
ConfigurableBeanFactory -> void setBeanClassLoader(@Nullable ClassLoader beanClassLoader)_;1496259743;Set the class loader to use for loading bean classes._Default is the thread context class loader._<p>Note that this class loader will only apply to bean definitions_that do not carry a resolved bean class yet. This is the case as of_Spring 2.0 by default: Bean definitions only carry bean class names,_to be resolved once the factory processes the bean definition._@param beanClassLoader the class loader to use,_or {@code null} to suggest the default class loader;void setBeanClassLoader(@Nullable ClassLoader beanClassLoader)_;set,the,class,loader,to,use,for,loading,bean,classes,default,is,the,thread,context,class,loader,p,note,that,this,class,loader,will,only,apply,to,bean,definitions,that,do,not,carry,a,resolved,bean,class,yet,this,is,the,case,as,of,spring,2,0,by,default,bean,definitions,only,carry,bean,class,names,to,be,resolved,once,the,factory,processes,the,bean,definition,param,bean,class,loader,the,class,loader,to,use,or,code,null,to,suggest,the,default,class,loader;void,set,bean,class,loader,nullable,class,loader,bean,class,loader
ConfigurableBeanFactory -> void setBeanClassLoader(@Nullable ClassLoader beanClassLoader)_;1496837955;Set the class loader to use for loading bean classes._Default is the thread context class loader._<p>Note that this class loader will only apply to bean definitions_that do not carry a resolved bean class yet. This is the case as of_Spring 2.0 by default: Bean definitions only carry bean class names,_to be resolved once the factory processes the bean definition._@param beanClassLoader the class loader to use,_or {@code null} to suggest the default class loader;void setBeanClassLoader(@Nullable ClassLoader beanClassLoader)_;set,the,class,loader,to,use,for,loading,bean,classes,default,is,the,thread,context,class,loader,p,note,that,this,class,loader,will,only,apply,to,bean,definitions,that,do,not,carry,a,resolved,bean,class,yet,this,is,the,case,as,of,spring,2,0,by,default,bean,definitions,only,carry,bean,class,names,to,be,resolved,once,the,factory,processes,the,bean,definition,param,bean,class,loader,the,class,loader,to,use,or,code,null,to,suggest,the,default,class,loader;void,set,bean,class,loader,nullable,class,loader,bean,class,loader
ConfigurableBeanFactory -> void setBeanClassLoader(@Nullable ClassLoader beanClassLoader)_;1498780456;Set the class loader to use for loading bean classes._Default is the thread context class loader._<p>Note that this class loader will only apply to bean definitions_that do not carry a resolved bean class yet. This is the case as of_Spring 2.0 by default: Bean definitions only carry bean class names,_to be resolved once the factory processes the bean definition._@param beanClassLoader the class loader to use,_or {@code null} to suggest the default class loader;void setBeanClassLoader(@Nullable ClassLoader beanClassLoader)_;set,the,class,loader,to,use,for,loading,bean,classes,default,is,the,thread,context,class,loader,p,note,that,this,class,loader,will,only,apply,to,bean,definitions,that,do,not,carry,a,resolved,bean,class,yet,this,is,the,case,as,of,spring,2,0,by,default,bean,definitions,only,carry,bean,class,names,to,be,resolved,once,the,factory,processes,the,bean,definition,param,bean,class,loader,the,class,loader,to,use,or,code,null,to,suggest,the,default,class,loader;void,set,bean,class,loader,nullable,class,loader,bean,class,loader
ConfigurableBeanFactory -> void setBeanClassLoader(@Nullable ClassLoader beanClassLoader)_;1527623466;Set the class loader to use for loading bean classes._Default is the thread context class loader._<p>Note that this class loader will only apply to bean definitions_that do not carry a resolved bean class yet. This is the case as of_Spring 2.0 by default: Bean definitions only carry bean class names,_to be resolved once the factory processes the bean definition._@param beanClassLoader the class loader to use,_or {@code null} to suggest the default class loader;void setBeanClassLoader(@Nullable ClassLoader beanClassLoader)_;set,the,class,loader,to,use,for,loading,bean,classes,default,is,the,thread,context,class,loader,p,note,that,this,class,loader,will,only,apply,to,bean,definitions,that,do,not,carry,a,resolved,bean,class,yet,this,is,the,case,as,of,spring,2,0,by,default,bean,definitions,only,carry,bean,class,names,to,be,resolved,once,the,factory,processes,the,bean,definition,param,bean,class,loader,the,class,loader,to,use,or,code,null,to,suggest,the,default,class,loader;void,set,bean,class,loader,nullable,class,loader,bean,class,loader
ConfigurableBeanFactory -> void setBeanClassLoader(@Nullable ClassLoader beanClassLoader)_;1530174524;Set the class loader to use for loading bean classes._Default is the thread context class loader._<p>Note that this class loader will only apply to bean definitions_that do not carry a resolved bean class yet. This is the case as of_Spring 2.0 by default: Bean definitions only carry bean class names,_to be resolved once the factory processes the bean definition._@param beanClassLoader the class loader to use,_or {@code null} to suggest the default class loader;void setBeanClassLoader(@Nullable ClassLoader beanClassLoader)_;set,the,class,loader,to,use,for,loading,bean,classes,default,is,the,thread,context,class,loader,p,note,that,this,class,loader,will,only,apply,to,bean,definitions,that,do,not,carry,a,resolved,bean,class,yet,this,is,the,case,as,of,spring,2,0,by,default,bean,definitions,only,carry,bean,class,names,to,be,resolved,once,the,factory,processes,the,bean,definition,param,bean,class,loader,the,class,loader,to,use,or,code,null,to,suggest,the,default,class,loader;void,set,bean,class,loader,nullable,class,loader,bean,class,loader
ConfigurableBeanFactory -> TypeConverter getTypeConverter()_;1328020251;Obtain a type converter as used by this BeanFactory. This may be a fresh_instance for each call, since TypeConverters are usually <i>not</i> thread-safe._<p>If the default PropertyEditor mechanism is active, the returned_TypeConverter will be aware of all custom editors that have been registered._@since 2.5;TypeConverter getTypeConverter()_;obtain,a,type,converter,as,used,by,this,bean,factory,this,may,be,a,fresh,instance,for,each,call,since,type,converters,are,usually,i,not,i,thread,safe,p,if,the,default,property,editor,mechanism,is,active,the,returned,type,converter,will,be,aware,of,all,custom,editors,that,have,been,registered,since,2,5;type,converter,get,type,converter
ConfigurableBeanFactory -> TypeConverter getTypeConverter()_;1352418897;Obtain a type converter as used by this BeanFactory. This may be a fresh_instance for each call, since TypeConverters are usually <i>not</i> thread-safe._<p>If the default PropertyEditor mechanism is active, the returned_TypeConverter will be aware of all custom editors that have been registered._@since 2.5;TypeConverter getTypeConverter()_;obtain,a,type,converter,as,used,by,this,bean,factory,this,may,be,a,fresh,instance,for,each,call,since,type,converters,are,usually,i,not,i,thread,safe,p,if,the,default,property,editor,mechanism,is,active,the,returned,type,converter,will,be,aware,of,all,custom,editors,that,have,been,registered,since,2,5;type,converter,get,type,converter
ConfigurableBeanFactory -> TypeConverter getTypeConverter()_;1356735495;Obtain a type converter as used by this BeanFactory. This may be a fresh_instance for each call, since TypeConverters are usually <i>not</i> thread-safe._<p>If the default PropertyEditor mechanism is active, the returned_TypeConverter will be aware of all custom editors that have been registered._@since 2.5;TypeConverter getTypeConverter()_;obtain,a,type,converter,as,used,by,this,bean,factory,this,may,be,a,fresh,instance,for,each,call,since,type,converters,are,usually,i,not,i,thread,safe,p,if,the,default,property,editor,mechanism,is,active,the,returned,type,converter,will,be,aware,of,all,custom,editors,that,have,been,registered,since,2,5;type,converter,get,type,converter
ConfigurableBeanFactory -> TypeConverter getTypeConverter()_;1460227762;Obtain a type converter as used by this BeanFactory. This may be a fresh_instance for each call, since TypeConverters are usually <i>not</i> thread-safe._<p>If the default PropertyEditor mechanism is active, the returned_TypeConverter will be aware of all custom editors that have been registered._@since 2.5;TypeConverter getTypeConverter()_;obtain,a,type,converter,as,used,by,this,bean,factory,this,may,be,a,fresh,instance,for,each,call,since,type,converters,are,usually,i,not,i,thread,safe,p,if,the,default,property,editor,mechanism,is,active,the,returned,type,converter,will,be,aware,of,all,custom,editors,that,have,been,registered,since,2,5;type,converter,get,type,converter
ConfigurableBeanFactory -> TypeConverter getTypeConverter()_;1495868221;Obtain a type converter as used by this BeanFactory. This may be a fresh_instance for each call, since TypeConverters are usually <i>not</i> thread-safe._<p>If the default PropertyEditor mechanism is active, the returned_TypeConverter will be aware of all custom editors that have been registered._@since 2.5;TypeConverter getTypeConverter()_;obtain,a,type,converter,as,used,by,this,bean,factory,this,may,be,a,fresh,instance,for,each,call,since,type,converters,are,usually,i,not,i,thread,safe,p,if,the,default,property,editor,mechanism,is,active,the,returned,type,converter,will,be,aware,of,all,custom,editors,that,have,been,registered,since,2,5;type,converter,get,type,converter
ConfigurableBeanFactory -> TypeConverter getTypeConverter()_;1496259743;Obtain a type converter as used by this BeanFactory. This may be a fresh_instance for each call, since TypeConverters are usually <i>not</i> thread-safe._<p>If the default PropertyEditor mechanism is active, the returned_TypeConverter will be aware of all custom editors that have been registered._@since 2.5;TypeConverter getTypeConverter()_;obtain,a,type,converter,as,used,by,this,bean,factory,this,may,be,a,fresh,instance,for,each,call,since,type,converters,are,usually,i,not,i,thread,safe,p,if,the,default,property,editor,mechanism,is,active,the,returned,type,converter,will,be,aware,of,all,custom,editors,that,have,been,registered,since,2,5;type,converter,get,type,converter
ConfigurableBeanFactory -> TypeConverter getTypeConverter()_;1496837955;Obtain a type converter as used by this BeanFactory. This may be a fresh_instance for each call, since TypeConverters are usually <i>not</i> thread-safe._<p>If the default PropertyEditor mechanism is active, the returned_TypeConverter will be aware of all custom editors that have been registered._@since 2.5;TypeConverter getTypeConverter()_;obtain,a,type,converter,as,used,by,this,bean,factory,this,may,be,a,fresh,instance,for,each,call,since,type,converters,are,usually,i,not,i,thread,safe,p,if,the,default,property,editor,mechanism,is,active,the,returned,type,converter,will,be,aware,of,all,custom,editors,that,have,been,registered,since,2,5;type,converter,get,type,converter
ConfigurableBeanFactory -> TypeConverter getTypeConverter()_;1498780456;Obtain a type converter as used by this BeanFactory. This may be a fresh_instance for each call, since TypeConverters are usually <i>not</i> thread-safe._<p>If the default PropertyEditor mechanism is active, the returned_TypeConverter will be aware of all custom editors that have been registered._@since 2.5;TypeConverter getTypeConverter()_;obtain,a,type,converter,as,used,by,this,bean,factory,this,may,be,a,fresh,instance,for,each,call,since,type,converters,are,usually,i,not,i,thread,safe,p,if,the,default,property,editor,mechanism,is,active,the,returned,type,converter,will,be,aware,of,all,custom,editors,that,have,been,registered,since,2,5;type,converter,get,type,converter
ConfigurableBeanFactory -> TypeConverter getTypeConverter()_;1527623466;Obtain a type converter as used by this BeanFactory. This may be a fresh_instance for each call, since TypeConverters are usually <i>not</i> thread-safe._<p>If the default PropertyEditor mechanism is active, the returned_TypeConverter will be aware of all custom editors that have been registered._@since 2.5;TypeConverter getTypeConverter()_;obtain,a,type,converter,as,used,by,this,bean,factory,this,may,be,a,fresh,instance,for,each,call,since,type,converters,are,usually,i,not,i,thread,safe,p,if,the,default,property,editor,mechanism,is,active,the,returned,type,converter,will,be,aware,of,all,custom,editors,that,have,been,registered,since,2,5;type,converter,get,type,converter
ConfigurableBeanFactory -> TypeConverter getTypeConverter()_;1530174524;Obtain a type converter as used by this BeanFactory. This may be a fresh_instance for each call, since TypeConverters are usually <i>not</i> thread-safe._<p>If the default PropertyEditor mechanism is active, the returned_TypeConverter will be aware of all custom editors that have been registered._@since 2.5;TypeConverter getTypeConverter()_;obtain,a,type,converter,as,used,by,this,bean,factory,this,may,be,a,fresh,instance,for,each,call,since,type,converters,are,usually,i,not,i,thread,safe,p,if,the,default,property,editor,mechanism,is,active,the,returned,type,converter,will,be,aware,of,all,custom,editors,that,have,been,registered,since,2,5;type,converter,get,type,converter
ConfigurableBeanFactory -> AccessControlContext getAccessControlContext()_;1328020251;Provides a security access control context relevant to this factory._@return the applicable AccessControlContext (never <code>null</code>)_@since 3.0;AccessControlContext getAccessControlContext()_;provides,a,security,access,control,context,relevant,to,this,factory,return,the,applicable,access,control,context,never,code,null,code,since,3,0;access,control,context,get,access,control,context
ConfigurableBeanFactory -> AccessControlContext getAccessControlContext()_;1352418897;Provides a security access control context relevant to this factory._@return the applicable AccessControlContext (never <code>null</code>)_@since 3.0;AccessControlContext getAccessControlContext()_;provides,a,security,access,control,context,relevant,to,this,factory,return,the,applicable,access,control,context,never,code,null,code,since,3,0;access,control,context,get,access,control,context
ConfigurableBeanFactory -> AccessControlContext getAccessControlContext()_;1356735495;Provides a security access control context relevant to this factory._@return the applicable AccessControlContext (never {@code null})_@since 3.0;AccessControlContext getAccessControlContext()_;provides,a,security,access,control,context,relevant,to,this,factory,return,the,applicable,access,control,context,never,code,null,since,3,0;access,control,context,get,access,control,context
ConfigurableBeanFactory -> AccessControlContext getAccessControlContext()_;1460227762;Provides a security access control context relevant to this factory._@return the applicable AccessControlContext (never {@code null})_@since 3.0;AccessControlContext getAccessControlContext()_;provides,a,security,access,control,context,relevant,to,this,factory,return,the,applicable,access,control,context,never,code,null,since,3,0;access,control,context,get,access,control,context
ConfigurableBeanFactory -> AccessControlContext getAccessControlContext()_;1495868221;Provides a security access control context relevant to this factory._@return the applicable AccessControlContext (never {@code null})_@since 3.0;AccessControlContext getAccessControlContext()_;provides,a,security,access,control,context,relevant,to,this,factory,return,the,applicable,access,control,context,never,code,null,since,3,0;access,control,context,get,access,control,context
ConfigurableBeanFactory -> AccessControlContext getAccessControlContext()_;1496259743;Provides a security access control context relevant to this factory._@return the applicable AccessControlContext (never {@code null})_@since 3.0;AccessControlContext getAccessControlContext()_;provides,a,security,access,control,context,relevant,to,this,factory,return,the,applicable,access,control,context,never,code,null,since,3,0;access,control,context,get,access,control,context
ConfigurableBeanFactory -> AccessControlContext getAccessControlContext()_;1496837955;Provides a security access control context relevant to this factory._@return the applicable AccessControlContext (never {@code null})_@since 3.0;AccessControlContext getAccessControlContext()_;provides,a,security,access,control,context,relevant,to,this,factory,return,the,applicable,access,control,context,never,code,null,since,3,0;access,control,context,get,access,control,context
ConfigurableBeanFactory -> AccessControlContext getAccessControlContext()_;1498780456;Provides a security access control context relevant to this factory._@return the applicable AccessControlContext (never {@code null})_@since 3.0;AccessControlContext getAccessControlContext()_;provides,a,security,access,control,context,relevant,to,this,factory,return,the,applicable,access,control,context,never,code,null,since,3,0;access,control,context,get,access,control,context
ConfigurableBeanFactory -> AccessControlContext getAccessControlContext()_;1527623466;Provides a security access control context relevant to this factory._@return the applicable AccessControlContext (never {@code null})_@since 3.0;AccessControlContext getAccessControlContext()_;provides,a,security,access,control,context,relevant,to,this,factory,return,the,applicable,access,control,context,never,code,null,since,3,0;access,control,context,get,access,control,context
ConfigurableBeanFactory -> AccessControlContext getAccessControlContext()_;1530174524;Provides a security access control context relevant to this factory._@return the applicable AccessControlContext (never {@code null})_@since 3.0;AccessControlContext getAccessControlContext()_;provides,a,security,access,control,context,relevant,to,this,factory,return,the,applicable,access,control,context,never,code,null,since,3,0;access,control,context,get,access,control,context
ConfigurableBeanFactory -> void setCurrentlyInCreation(String beanName, boolean inCreation)_;1328020251;Explicitly control in-creation status of the specified bean. For_container internal use only._@param beanName the name of the bean_@param inCreation whether the bean is currently in creation_@since 3.1;void setCurrentlyInCreation(String beanName, boolean inCreation)_;explicitly,control,in,creation,status,of,the,specified,bean,for,container,internal,use,only,param,bean,name,the,name,of,the,bean,param,in,creation,whether,the,bean,is,currently,in,creation,since,3,1;void,set,currently,in,creation,string,bean,name,boolean,in,creation
ConfigurableBeanFactory -> void setCurrentlyInCreation(String beanName, boolean inCreation)_;1352418897;Explicitly control the current in-creation status of the specified bean._For container-internal use only._@param beanName the name of the bean_@param inCreation whether the bean is currently in creation_@since 3.1;void setCurrentlyInCreation(String beanName, boolean inCreation)_;explicitly,control,the,current,in,creation,status,of,the,specified,bean,for,container,internal,use,only,param,bean,name,the,name,of,the,bean,param,in,creation,whether,the,bean,is,currently,in,creation,since,3,1;void,set,currently,in,creation,string,bean,name,boolean,in,creation
ConfigurableBeanFactory -> void setCurrentlyInCreation(String beanName, boolean inCreation)_;1356735495;Explicitly control the current in-creation status of the specified bean._For container-internal use only._@param beanName the name of the bean_@param inCreation whether the bean is currently in creation_@since 3.1;void setCurrentlyInCreation(String beanName, boolean inCreation)_;explicitly,control,the,current,in,creation,status,of,the,specified,bean,for,container,internal,use,only,param,bean,name,the,name,of,the,bean,param,in,creation,whether,the,bean,is,currently,in,creation,since,3,1;void,set,currently,in,creation,string,bean,name,boolean,in,creation
ConfigurableBeanFactory -> void setCurrentlyInCreation(String beanName, boolean inCreation)_;1460227762;Explicitly control the current in-creation status of the specified bean._For container-internal use only._@param beanName the name of the bean_@param inCreation whether the bean is currently in creation_@since 3.1;void setCurrentlyInCreation(String beanName, boolean inCreation)_;explicitly,control,the,current,in,creation,status,of,the,specified,bean,for,container,internal,use,only,param,bean,name,the,name,of,the,bean,param,in,creation,whether,the,bean,is,currently,in,creation,since,3,1;void,set,currently,in,creation,string,bean,name,boolean,in,creation
ConfigurableBeanFactory -> void setCurrentlyInCreation(String beanName, boolean inCreation)_;1495868221;Explicitly control the current in-creation status of the specified bean._For container-internal use only._@param beanName the name of the bean_@param inCreation whether the bean is currently in creation_@since 3.1;void setCurrentlyInCreation(String beanName, boolean inCreation)_;explicitly,control,the,current,in,creation,status,of,the,specified,bean,for,container,internal,use,only,param,bean,name,the,name,of,the,bean,param,in,creation,whether,the,bean,is,currently,in,creation,since,3,1;void,set,currently,in,creation,string,bean,name,boolean,in,creation
ConfigurableBeanFactory -> void setCurrentlyInCreation(String beanName, boolean inCreation)_;1496259743;Explicitly control the current in-creation status of the specified bean._For container-internal use only._@param beanName the name of the bean_@param inCreation whether the bean is currently in creation_@since 3.1;void setCurrentlyInCreation(String beanName, boolean inCreation)_;explicitly,control,the,current,in,creation,status,of,the,specified,bean,for,container,internal,use,only,param,bean,name,the,name,of,the,bean,param,in,creation,whether,the,bean,is,currently,in,creation,since,3,1;void,set,currently,in,creation,string,bean,name,boolean,in,creation
ConfigurableBeanFactory -> void setCurrentlyInCreation(String beanName, boolean inCreation)_;1496837955;Explicitly control the current in-creation status of the specified bean._For container-internal use only._@param beanName the name of the bean_@param inCreation whether the bean is currently in creation_@since 3.1;void setCurrentlyInCreation(String beanName, boolean inCreation)_;explicitly,control,the,current,in,creation,status,of,the,specified,bean,for,container,internal,use,only,param,bean,name,the,name,of,the,bean,param,in,creation,whether,the,bean,is,currently,in,creation,since,3,1;void,set,currently,in,creation,string,bean,name,boolean,in,creation
ConfigurableBeanFactory -> void setCurrentlyInCreation(String beanName, boolean inCreation)_;1498780456;Explicitly control the current in-creation status of the specified bean._For container-internal use only._@param beanName the name of the bean_@param inCreation whether the bean is currently in creation_@since 3.1;void setCurrentlyInCreation(String beanName, boolean inCreation)_;explicitly,control,the,current,in,creation,status,of,the,specified,bean,for,container,internal,use,only,param,bean,name,the,name,of,the,bean,param,in,creation,whether,the,bean,is,currently,in,creation,since,3,1;void,set,currently,in,creation,string,bean,name,boolean,in,creation
ConfigurableBeanFactory -> void setCurrentlyInCreation(String beanName, boolean inCreation)_;1527623466;Explicitly control the current in-creation status of the specified bean._For container-internal use only._@param beanName the name of the bean_@param inCreation whether the bean is currently in creation_@since 3.1;void setCurrentlyInCreation(String beanName, boolean inCreation)_;explicitly,control,the,current,in,creation,status,of,the,specified,bean,for,container,internal,use,only,param,bean,name,the,name,of,the,bean,param,in,creation,whether,the,bean,is,currently,in,creation,since,3,1;void,set,currently,in,creation,string,bean,name,boolean,in,creation
ConfigurableBeanFactory -> void setCurrentlyInCreation(String beanName, boolean inCreation)_;1530174524;Explicitly control the current in-creation status of the specified bean._For container-internal use only._@param beanName the name of the bean_@param inCreation whether the bean is currently in creation_@since 3.1;void setCurrentlyInCreation(String beanName, boolean inCreation)_;explicitly,control,the,current,in,creation,status,of,the,specified,bean,for,container,internal,use,only,param,bean,name,the,name,of,the,bean,param,in,creation,whether,the,bean,is,currently,in,creation,since,3,1;void,set,currently,in,creation,string,bean,name,boolean,in,creation
ConfigurableBeanFactory -> void setTempClassLoader(ClassLoader tempClassLoader)_;1328020251;Specify a temporary ClassLoader to use for type matching purposes._Default is none, simply using the standard bean ClassLoader._<p>A temporary ClassLoader is usually just specified if_<i>load-time weaving</i> is involved, to make sure that actual bean_classes are loaded as lazily as possible. The temporary loader is_then removed once the BeanFactory completes its bootstrap phase._@since 2.5;void setTempClassLoader(ClassLoader tempClassLoader)_;specify,a,temporary,class,loader,to,use,for,type,matching,purposes,default,is,none,simply,using,the,standard,bean,class,loader,p,a,temporary,class,loader,is,usually,just,specified,if,i,load,time,weaving,i,is,involved,to,make,sure,that,actual,bean,classes,are,loaded,as,lazily,as,possible,the,temporary,loader,is,then,removed,once,the,bean,factory,completes,its,bootstrap,phase,since,2,5;void,set,temp,class,loader,class,loader,temp,class,loader
ConfigurableBeanFactory -> void setTempClassLoader(ClassLoader tempClassLoader)_;1352418897;Specify a temporary ClassLoader to use for type matching purposes._Default is none, simply using the standard bean ClassLoader._<p>A temporary ClassLoader is usually just specified if_<i>load-time weaving</i> is involved, to make sure that actual bean_classes are loaded as lazily as possible. The temporary loader is_then removed once the BeanFactory completes its bootstrap phase._@since 2.5;void setTempClassLoader(ClassLoader tempClassLoader)_;specify,a,temporary,class,loader,to,use,for,type,matching,purposes,default,is,none,simply,using,the,standard,bean,class,loader,p,a,temporary,class,loader,is,usually,just,specified,if,i,load,time,weaving,i,is,involved,to,make,sure,that,actual,bean,classes,are,loaded,as,lazily,as,possible,the,temporary,loader,is,then,removed,once,the,bean,factory,completes,its,bootstrap,phase,since,2,5;void,set,temp,class,loader,class,loader,temp,class,loader
ConfigurableBeanFactory -> void setTempClassLoader(ClassLoader tempClassLoader)_;1356735495;Specify a temporary ClassLoader to use for type matching purposes._Default is none, simply using the standard bean ClassLoader._<p>A temporary ClassLoader is usually just specified if_<i>load-time weaving</i> is involved, to make sure that actual bean_classes are loaded as lazily as possible. The temporary loader is_then removed once the BeanFactory completes its bootstrap phase._@since 2.5;void setTempClassLoader(ClassLoader tempClassLoader)_;specify,a,temporary,class,loader,to,use,for,type,matching,purposes,default,is,none,simply,using,the,standard,bean,class,loader,p,a,temporary,class,loader,is,usually,just,specified,if,i,load,time,weaving,i,is,involved,to,make,sure,that,actual,bean,classes,are,loaded,as,lazily,as,possible,the,temporary,loader,is,then,removed,once,the,bean,factory,completes,its,bootstrap,phase,since,2,5;void,set,temp,class,loader,class,loader,temp,class,loader
ConfigurableBeanFactory -> void setTempClassLoader(ClassLoader tempClassLoader)_;1460227762;Specify a temporary ClassLoader to use for type matching purposes._Default is none, simply using the standard bean ClassLoader._<p>A temporary ClassLoader is usually just specified if_<i>load-time weaving</i> is involved, to make sure that actual bean_classes are loaded as lazily as possible. The temporary loader is_then removed once the BeanFactory completes its bootstrap phase._@since 2.5;void setTempClassLoader(ClassLoader tempClassLoader)_;specify,a,temporary,class,loader,to,use,for,type,matching,purposes,default,is,none,simply,using,the,standard,bean,class,loader,p,a,temporary,class,loader,is,usually,just,specified,if,i,load,time,weaving,i,is,involved,to,make,sure,that,actual,bean,classes,are,loaded,as,lazily,as,possible,the,temporary,loader,is,then,removed,once,the,bean,factory,completes,its,bootstrap,phase,since,2,5;void,set,temp,class,loader,class,loader,temp,class,loader
ConfigurableBeanFactory -> void setTempClassLoader(ClassLoader tempClassLoader)_;1495868221;Specify a temporary ClassLoader to use for type matching purposes._Default is none, simply using the standard bean ClassLoader._<p>A temporary ClassLoader is usually just specified if_<i>load-time weaving</i> is involved, to make sure that actual bean_classes are loaded as lazily as possible. The temporary loader is_then removed once the BeanFactory completes its bootstrap phase._@since 2.5;void setTempClassLoader(ClassLoader tempClassLoader)_;specify,a,temporary,class,loader,to,use,for,type,matching,purposes,default,is,none,simply,using,the,standard,bean,class,loader,p,a,temporary,class,loader,is,usually,just,specified,if,i,load,time,weaving,i,is,involved,to,make,sure,that,actual,bean,classes,are,loaded,as,lazily,as,possible,the,temporary,loader,is,then,removed,once,the,bean,factory,completes,its,bootstrap,phase,since,2,5;void,set,temp,class,loader,class,loader,temp,class,loader
ConfigurableBeanFactory -> String[] getRegisteredScopeNames()_;1328020251;Return the names of all currently registered scopes._<p>This will only return the names of explicitly registered scopes._Built-in scopes such as "singleton" and "prototype" won't be exposed._@return the array of scope names, or an empty array if none_@see #registerScope;String[] getRegisteredScopeNames()_;return,the,names,of,all,currently,registered,scopes,p,this,will,only,return,the,names,of,explicitly,registered,scopes,built,in,scopes,such,as,singleton,and,prototype,won,t,be,exposed,return,the,array,of,scope,names,or,an,empty,array,if,none,see,register,scope;string,get,registered,scope,names
ConfigurableBeanFactory -> String[] getRegisteredScopeNames()_;1352418897;Return the names of all currently registered scopes._<p>This will only return the names of explicitly registered scopes._Built-in scopes such as "singleton" and "prototype" won't be exposed._@return the array of scope names, or an empty array if none_@see #registerScope;String[] getRegisteredScopeNames()_;return,the,names,of,all,currently,registered,scopes,p,this,will,only,return,the,names,of,explicitly,registered,scopes,built,in,scopes,such,as,singleton,and,prototype,won,t,be,exposed,return,the,array,of,scope,names,or,an,empty,array,if,none,see,register,scope;string,get,registered,scope,names
ConfigurableBeanFactory -> String[] getRegisteredScopeNames()_;1356735495;Return the names of all currently registered scopes._<p>This will only return the names of explicitly registered scopes._Built-in scopes such as "singleton" and "prototype" won't be exposed._@return the array of scope names, or an empty array if none_@see #registerScope;String[] getRegisteredScopeNames()_;return,the,names,of,all,currently,registered,scopes,p,this,will,only,return,the,names,of,explicitly,registered,scopes,built,in,scopes,such,as,singleton,and,prototype,won,t,be,exposed,return,the,array,of,scope,names,or,an,empty,array,if,none,see,register,scope;string,get,registered,scope,names
ConfigurableBeanFactory -> String[] getRegisteredScopeNames()_;1460227762;Return the names of all currently registered scopes._<p>This will only return the names of explicitly registered scopes._Built-in scopes such as "singleton" and "prototype" won't be exposed._@return the array of scope names, or an empty array if none_@see #registerScope;String[] getRegisteredScopeNames()_;return,the,names,of,all,currently,registered,scopes,p,this,will,only,return,the,names,of,explicitly,registered,scopes,built,in,scopes,such,as,singleton,and,prototype,won,t,be,exposed,return,the,array,of,scope,names,or,an,empty,array,if,none,see,register,scope;string,get,registered,scope,names
ConfigurableBeanFactory -> String[] getRegisteredScopeNames()_;1495868221;Return the names of all currently registered scopes._<p>This will only return the names of explicitly registered scopes._Built-in scopes such as "singleton" and "prototype" won't be exposed._@return the array of scope names, or an empty array if none_@see #registerScope;String[] getRegisteredScopeNames()_;return,the,names,of,all,currently,registered,scopes,p,this,will,only,return,the,names,of,explicitly,registered,scopes,built,in,scopes,such,as,singleton,and,prototype,won,t,be,exposed,return,the,array,of,scope,names,or,an,empty,array,if,none,see,register,scope;string,get,registered,scope,names
ConfigurableBeanFactory -> String[] getRegisteredScopeNames()_;1496259743;Return the names of all currently registered scopes._<p>This will only return the names of explicitly registered scopes._Built-in scopes such as "singleton" and "prototype" won't be exposed._@return the array of scope names, or an empty array if none_@see #registerScope;String[] getRegisteredScopeNames()_;return,the,names,of,all,currently,registered,scopes,p,this,will,only,return,the,names,of,explicitly,registered,scopes,built,in,scopes,such,as,singleton,and,prototype,won,t,be,exposed,return,the,array,of,scope,names,or,an,empty,array,if,none,see,register,scope;string,get,registered,scope,names
ConfigurableBeanFactory -> String[] getRegisteredScopeNames()_;1496837955;Return the names of all currently registered scopes._<p>This will only return the names of explicitly registered scopes._Built-in scopes such as "singleton" and "prototype" won't be exposed._@return the array of scope names, or an empty array if none_@see #registerScope;String[] getRegisteredScopeNames()_;return,the,names,of,all,currently,registered,scopes,p,this,will,only,return,the,names,of,explicitly,registered,scopes,built,in,scopes,such,as,singleton,and,prototype,won,t,be,exposed,return,the,array,of,scope,names,or,an,empty,array,if,none,see,register,scope;string,get,registered,scope,names
ConfigurableBeanFactory -> String[] getRegisteredScopeNames()_;1498780456;Return the names of all currently registered scopes._<p>This will only return the names of explicitly registered scopes._Built-in scopes such as "singleton" and "prototype" won't be exposed._@return the array of scope names, or an empty array if none_@see #registerScope;String[] getRegisteredScopeNames()_;return,the,names,of,all,currently,registered,scopes,p,this,will,only,return,the,names,of,explicitly,registered,scopes,built,in,scopes,such,as,singleton,and,prototype,won,t,be,exposed,return,the,array,of,scope,names,or,an,empty,array,if,none,see,register,scope;string,get,registered,scope,names
ConfigurableBeanFactory -> String[] getRegisteredScopeNames()_;1527623466;Return the names of all currently registered scopes._<p>This will only return the names of explicitly registered scopes._Built-in scopes such as "singleton" and "prototype" won't be exposed._@return the array of scope names, or an empty array if none_@see #registerScope;String[] getRegisteredScopeNames()_;return,the,names,of,all,currently,registered,scopes,p,this,will,only,return,the,names,of,explicitly,registered,scopes,built,in,scopes,such,as,singleton,and,prototype,won,t,be,exposed,return,the,array,of,scope,names,or,an,empty,array,if,none,see,register,scope;string,get,registered,scope,names
ConfigurableBeanFactory -> String[] getRegisteredScopeNames()_;1530174524;Return the names of all currently registered scopes._<p>This will only return the names of explicitly registered scopes._Built-in scopes such as "singleton" and "prototype" won't be exposed._@return the array of scope names, or an empty array if none_@see #registerScope;String[] getRegisteredScopeNames()_;return,the,names,of,all,currently,registered,scopes,p,this,will,only,return,the,names,of,explicitly,registered,scopes,built,in,scopes,such,as,singleton,and,prototype,won,t,be,exposed,return,the,array,of,scope,names,or,an,empty,array,if,none,see,register,scope;string,get,registered,scope,names
ConfigurableBeanFactory -> String resolveEmbeddedValue(String value)_;1328020251;Resolve the given embedded value, e.g. an annotation attribute._@param value the value to resolve_@return the resolved value (may be the original value as-is)_@since 3.0;String resolveEmbeddedValue(String value)_;resolve,the,given,embedded,value,e,g,an,annotation,attribute,param,value,the,value,to,resolve,return,the,resolved,value,may,be,the,original,value,as,is,since,3,0;string,resolve,embedded,value,string,value
ConfigurableBeanFactory -> String resolveEmbeddedValue(String value)_;1352418897;Resolve the given embedded value, e.g. an annotation attribute._@param value the value to resolve_@return the resolved value (may be the original value as-is)_@since 3.0;String resolveEmbeddedValue(String value)_;resolve,the,given,embedded,value,e,g,an,annotation,attribute,param,value,the,value,to,resolve,return,the,resolved,value,may,be,the,original,value,as,is,since,3,0;string,resolve,embedded,value,string,value
ConfigurableBeanFactory -> String resolveEmbeddedValue(String value)_;1356735495;Resolve the given embedded value, e.g. an annotation attribute._@param value the value to resolve_@return the resolved value (may be the original value as-is)_@since 3.0;String resolveEmbeddedValue(String value)_;resolve,the,given,embedded,value,e,g,an,annotation,attribute,param,value,the,value,to,resolve,return,the,resolved,value,may,be,the,original,value,as,is,since,3,0;string,resolve,embedded,value,string,value
ConfigurableBeanFactory -> String resolveEmbeddedValue(String value)_;1460227762;Resolve the given embedded value, e.g. an annotation attribute._@param value the value to resolve_@return the resolved value (may be the original value as-is)_@since 3.0;String resolveEmbeddedValue(String value)_;resolve,the,given,embedded,value,e,g,an,annotation,attribute,param,value,the,value,to,resolve,return,the,resolved,value,may,be,the,original,value,as,is,since,3,0;string,resolve,embedded,value,string,value
ConfigurableBeanFactory -> boolean isCurrentlyInCreation(String beanName)_;1328020251;Determine whether the specified bean is currently in creation._@param beanName the name of the bean_@return whether the bean is currently in creation_@since 2.5;boolean isCurrentlyInCreation(String beanName)_;determine,whether,the,specified,bean,is,currently,in,creation,param,bean,name,the,name,of,the,bean,return,whether,the,bean,is,currently,in,creation,since,2,5;boolean,is,currently,in,creation,string,bean,name
ConfigurableBeanFactory -> boolean isCurrentlyInCreation(String beanName)_;1352418897;Determine whether the specified bean is currently in creation._@param beanName the name of the bean_@return whether the bean is currently in creation_@since 2.5;boolean isCurrentlyInCreation(String beanName)_;determine,whether,the,specified,bean,is,currently,in,creation,param,bean,name,the,name,of,the,bean,return,whether,the,bean,is,currently,in,creation,since,2,5;boolean,is,currently,in,creation,string,bean,name
ConfigurableBeanFactory -> boolean isCurrentlyInCreation(String beanName)_;1356735495;Determine whether the specified bean is currently in creation._@param beanName the name of the bean_@return whether the bean is currently in creation_@since 2.5;boolean isCurrentlyInCreation(String beanName)_;determine,whether,the,specified,bean,is,currently,in,creation,param,bean,name,the,name,of,the,bean,return,whether,the,bean,is,currently,in,creation,since,2,5;boolean,is,currently,in,creation,string,bean,name
ConfigurableBeanFactory -> boolean isCurrentlyInCreation(String beanName)_;1460227762;Determine whether the specified bean is currently in creation._@param beanName the name of the bean_@return whether the bean is currently in creation_@since 2.5;boolean isCurrentlyInCreation(String beanName)_;determine,whether,the,specified,bean,is,currently,in,creation,param,bean,name,the,name,of,the,bean,return,whether,the,bean,is,currently,in,creation,since,2,5;boolean,is,currently,in,creation,string,bean,name
ConfigurableBeanFactory -> boolean isCurrentlyInCreation(String beanName)_;1495868221;Determine whether the specified bean is currently in creation._@param beanName the name of the bean_@return whether the bean is currently in creation_@since 2.5;boolean isCurrentlyInCreation(String beanName)_;determine,whether,the,specified,bean,is,currently,in,creation,param,bean,name,the,name,of,the,bean,return,whether,the,bean,is,currently,in,creation,since,2,5;boolean,is,currently,in,creation,string,bean,name
ConfigurableBeanFactory -> boolean isCurrentlyInCreation(String beanName)_;1496259743;Determine whether the specified bean is currently in creation._@param beanName the name of the bean_@return whether the bean is currently in creation_@since 2.5;boolean isCurrentlyInCreation(String beanName)_;determine,whether,the,specified,bean,is,currently,in,creation,param,bean,name,the,name,of,the,bean,return,whether,the,bean,is,currently,in,creation,since,2,5;boolean,is,currently,in,creation,string,bean,name
ConfigurableBeanFactory -> boolean isCurrentlyInCreation(String beanName)_;1496837955;Determine whether the specified bean is currently in creation._@param beanName the name of the bean_@return whether the bean is currently in creation_@since 2.5;boolean isCurrentlyInCreation(String beanName)_;determine,whether,the,specified,bean,is,currently,in,creation,param,bean,name,the,name,of,the,bean,return,whether,the,bean,is,currently,in,creation,since,2,5;boolean,is,currently,in,creation,string,bean,name
ConfigurableBeanFactory -> boolean isCurrentlyInCreation(String beanName)_;1498780456;Determine whether the specified bean is currently in creation._@param beanName the name of the bean_@return whether the bean is currently in creation_@since 2.5;boolean isCurrentlyInCreation(String beanName)_;determine,whether,the,specified,bean,is,currently,in,creation,param,bean,name,the,name,of,the,bean,return,whether,the,bean,is,currently,in,creation,since,2,5;boolean,is,currently,in,creation,string,bean,name
ConfigurableBeanFactory -> boolean isCurrentlyInCreation(String beanName)_;1527623466;Determine whether the specified bean is currently in creation._@param beanName the name of the bean_@return whether the bean is currently in creation_@since 2.5;boolean isCurrentlyInCreation(String beanName)_;determine,whether,the,specified,bean,is,currently,in,creation,param,bean,name,the,name,of,the,bean,return,whether,the,bean,is,currently,in,creation,since,2,5;boolean,is,currently,in,creation,string,bean,name
ConfigurableBeanFactory -> boolean isCurrentlyInCreation(String beanName)_;1530174524;Determine whether the specified bean is currently in creation._@param beanName the name of the bean_@return whether the bean is currently in creation_@since 2.5;boolean isCurrentlyInCreation(String beanName)_;determine,whether,the,specified,bean,is,currently,in,creation,param,bean,name,the,name,of,the,bean,return,whether,the,bean,is,currently,in,creation,since,2,5;boolean,is,currently,in,creation,string,bean,name
ConfigurableBeanFactory -> void setBeanExpressionResolver(@Nullable BeanExpressionResolver resolver)_;1496837955;Specify the resolution strategy for expressions in bean definition values._<p>There is no expression support active in a BeanFactory by default._An ApplicationContext will typically set a standard expression strategy_here, supporting "#{...}" expressions in a Unified EL compatible style._@since 3.0;void setBeanExpressionResolver(@Nullable BeanExpressionResolver resolver)_;specify,the,resolution,strategy,for,expressions,in,bean,definition,values,p,there,is,no,expression,support,active,in,a,bean,factory,by,default,an,application,context,will,typically,set,a,standard,expression,strategy,here,supporting,expressions,in,a,unified,el,compatible,style,since,3,0;void,set,bean,expression,resolver,nullable,bean,expression,resolver,resolver
ConfigurableBeanFactory -> void setBeanExpressionResolver(@Nullable BeanExpressionResolver resolver)_;1498780456;Specify the resolution strategy for expressions in bean definition values._<p>There is no expression support active in a BeanFactory by default._An ApplicationContext will typically set a standard expression strategy_here, supporting "#{...}" expressions in a Unified EL compatible style._@since 3.0;void setBeanExpressionResolver(@Nullable BeanExpressionResolver resolver)_;specify,the,resolution,strategy,for,expressions,in,bean,definition,values,p,there,is,no,expression,support,active,in,a,bean,factory,by,default,an,application,context,will,typically,set,a,standard,expression,strategy,here,supporting,expressions,in,a,unified,el,compatible,style,since,3,0;void,set,bean,expression,resolver,nullable,bean,expression,resolver,resolver
ConfigurableBeanFactory -> void setBeanExpressionResolver(@Nullable BeanExpressionResolver resolver)_;1527623466;Specify the resolution strategy for expressions in bean definition values._<p>There is no expression support active in a BeanFactory by default._An ApplicationContext will typically set a standard expression strategy_here, supporting "#{...}" expressions in a Unified EL compatible style._@since 3.0;void setBeanExpressionResolver(@Nullable BeanExpressionResolver resolver)_;specify,the,resolution,strategy,for,expressions,in,bean,definition,values,p,there,is,no,expression,support,active,in,a,bean,factory,by,default,an,application,context,will,typically,set,a,standard,expression,strategy,here,supporting,expressions,in,a,unified,el,compatible,style,since,3,0;void,set,bean,expression,resolver,nullable,bean,expression,resolver,resolver
ConfigurableBeanFactory -> void setBeanExpressionResolver(@Nullable BeanExpressionResolver resolver)_;1530174524;Specify the resolution strategy for expressions in bean definition values._<p>There is no expression support active in a BeanFactory by default._An ApplicationContext will typically set a standard expression strategy_here, supporting "#{...}" expressions in a Unified EL compatible style._@since 3.0;void setBeanExpressionResolver(@Nullable BeanExpressionResolver resolver)_;specify,the,resolution,strategy,for,expressions,in,bean,definition,values,p,there,is,no,expression,support,active,in,a,bean,factory,by,default,an,application,context,will,typically,set,a,standard,expression,strategy,here,supporting,expressions,in,a,unified,el,compatible,style,since,3,0;void,set,bean,expression,resolver,nullable,bean,expression,resolver,resolver
ConfigurableBeanFactory -> void addBeanPostProcessor(BeanPostProcessor beanPostProcessor)_;1328020251;Add a new BeanPostProcessor that will get applied to beans created_by this factory. To be invoked during factory configuration._<p>Note: Post-processors submitted here will be applied in the order of_registration_ any ordering semantics expressed through implementing the_{@link org.springframework.core.Ordered} interface will be ignored. Note_that autodetected post-processors (e.g. as beans in an ApplicationContext)_will always be applied after programmatically registered ones._@param beanPostProcessor the post-processor to register;void addBeanPostProcessor(BeanPostProcessor beanPostProcessor)_;add,a,new,bean,post,processor,that,will,get,applied,to,beans,created,by,this,factory,to,be,invoked,during,factory,configuration,p,note,post,processors,submitted,here,will,be,applied,in,the,order,of,registration,any,ordering,semantics,expressed,through,implementing,the,link,org,springframework,core,ordered,interface,will,be,ignored,note,that,autodetected,post,processors,e,g,as,beans,in,an,application,context,will,always,be,applied,after,programmatically,registered,ones,param,bean,post,processor,the,post,processor,to,register;void,add,bean,post,processor,bean,post,processor,bean,post,processor
ConfigurableBeanFactory -> void addBeanPostProcessor(BeanPostProcessor beanPostProcessor)_;1352418897;Add a new BeanPostProcessor that will get applied to beans created_by this factory. To be invoked during factory configuration._<p>Note: Post-processors submitted here will be applied in the order of_registration_ any ordering semantics expressed through implementing the_{@link org.springframework.core.Ordered} interface will be ignored. Note_that autodetected post-processors (e.g. as beans in an ApplicationContext)_will always be applied after programmatically registered ones._@param beanPostProcessor the post-processor to register;void addBeanPostProcessor(BeanPostProcessor beanPostProcessor)_;add,a,new,bean,post,processor,that,will,get,applied,to,beans,created,by,this,factory,to,be,invoked,during,factory,configuration,p,note,post,processors,submitted,here,will,be,applied,in,the,order,of,registration,any,ordering,semantics,expressed,through,implementing,the,link,org,springframework,core,ordered,interface,will,be,ignored,note,that,autodetected,post,processors,e,g,as,beans,in,an,application,context,will,always,be,applied,after,programmatically,registered,ones,param,bean,post,processor,the,post,processor,to,register;void,add,bean,post,processor,bean,post,processor,bean,post,processor
ConfigurableBeanFactory -> void addBeanPostProcessor(BeanPostProcessor beanPostProcessor)_;1356735495;Add a new BeanPostProcessor that will get applied to beans created_by this factory. To be invoked during factory configuration._<p>Note: Post-processors submitted here will be applied in the order of_registration_ any ordering semantics expressed through implementing the_{@link org.springframework.core.Ordered} interface will be ignored. Note_that autodetected post-processors (e.g. as beans in an ApplicationContext)_will always be applied after programmatically registered ones._@param beanPostProcessor the post-processor to register;void addBeanPostProcessor(BeanPostProcessor beanPostProcessor)_;add,a,new,bean,post,processor,that,will,get,applied,to,beans,created,by,this,factory,to,be,invoked,during,factory,configuration,p,note,post,processors,submitted,here,will,be,applied,in,the,order,of,registration,any,ordering,semantics,expressed,through,implementing,the,link,org,springframework,core,ordered,interface,will,be,ignored,note,that,autodetected,post,processors,e,g,as,beans,in,an,application,context,will,always,be,applied,after,programmatically,registered,ones,param,bean,post,processor,the,post,processor,to,register;void,add,bean,post,processor,bean,post,processor,bean,post,processor
ConfigurableBeanFactory -> void addBeanPostProcessor(BeanPostProcessor beanPostProcessor)_;1460227762;Add a new BeanPostProcessor that will get applied to beans created_by this factory. To be invoked during factory configuration._<p>Note: Post-processors submitted here will be applied in the order of_registration_ any ordering semantics expressed through implementing the_{@link org.springframework.core.Ordered} interface will be ignored. Note_that autodetected post-processors (e.g. as beans in an ApplicationContext)_will always be applied after programmatically registered ones._@param beanPostProcessor the post-processor to register;void addBeanPostProcessor(BeanPostProcessor beanPostProcessor)_;add,a,new,bean,post,processor,that,will,get,applied,to,beans,created,by,this,factory,to,be,invoked,during,factory,configuration,p,note,post,processors,submitted,here,will,be,applied,in,the,order,of,registration,any,ordering,semantics,expressed,through,implementing,the,link,org,springframework,core,ordered,interface,will,be,ignored,note,that,autodetected,post,processors,e,g,as,beans,in,an,application,context,will,always,be,applied,after,programmatically,registered,ones,param,bean,post,processor,the,post,processor,to,register;void,add,bean,post,processor,bean,post,processor,bean,post,processor
ConfigurableBeanFactory -> void addBeanPostProcessor(BeanPostProcessor beanPostProcessor)_;1495868221;Add a new BeanPostProcessor that will get applied to beans created_by this factory. To be invoked during factory configuration._<p>Note: Post-processors submitted here will be applied in the order of_registration_ any ordering semantics expressed through implementing the_{@link org.springframework.core.Ordered} interface will be ignored. Note_that autodetected post-processors (e.g. as beans in an ApplicationContext)_will always be applied after programmatically registered ones._@param beanPostProcessor the post-processor to register;void addBeanPostProcessor(BeanPostProcessor beanPostProcessor)_;add,a,new,bean,post,processor,that,will,get,applied,to,beans,created,by,this,factory,to,be,invoked,during,factory,configuration,p,note,post,processors,submitted,here,will,be,applied,in,the,order,of,registration,any,ordering,semantics,expressed,through,implementing,the,link,org,springframework,core,ordered,interface,will,be,ignored,note,that,autodetected,post,processors,e,g,as,beans,in,an,application,context,will,always,be,applied,after,programmatically,registered,ones,param,bean,post,processor,the,post,processor,to,register;void,add,bean,post,processor,bean,post,processor,bean,post,processor
ConfigurableBeanFactory -> void addBeanPostProcessor(BeanPostProcessor beanPostProcessor)_;1496259743;Add a new BeanPostProcessor that will get applied to beans created_by this factory. To be invoked during factory configuration._<p>Note: Post-processors submitted here will be applied in the order of_registration_ any ordering semantics expressed through implementing the_{@link org.springframework.core.Ordered} interface will be ignored. Note_that autodetected post-processors (e.g. as beans in an ApplicationContext)_will always be applied after programmatically registered ones._@param beanPostProcessor the post-processor to register;void addBeanPostProcessor(BeanPostProcessor beanPostProcessor)_;add,a,new,bean,post,processor,that,will,get,applied,to,beans,created,by,this,factory,to,be,invoked,during,factory,configuration,p,note,post,processors,submitted,here,will,be,applied,in,the,order,of,registration,any,ordering,semantics,expressed,through,implementing,the,link,org,springframework,core,ordered,interface,will,be,ignored,note,that,autodetected,post,processors,e,g,as,beans,in,an,application,context,will,always,be,applied,after,programmatically,registered,ones,param,bean,post,processor,the,post,processor,to,register;void,add,bean,post,processor,bean,post,processor,bean,post,processor
ConfigurableBeanFactory -> void addBeanPostProcessor(BeanPostProcessor beanPostProcessor)_;1496837955;Add a new BeanPostProcessor that will get applied to beans created_by this factory. To be invoked during factory configuration._<p>Note: Post-processors submitted here will be applied in the order of_registration_ any ordering semantics expressed through implementing the_{@link org.springframework.core.Ordered} interface will be ignored. Note_that autodetected post-processors (e.g. as beans in an ApplicationContext)_will always be applied after programmatically registered ones._@param beanPostProcessor the post-processor to register;void addBeanPostProcessor(BeanPostProcessor beanPostProcessor)_;add,a,new,bean,post,processor,that,will,get,applied,to,beans,created,by,this,factory,to,be,invoked,during,factory,configuration,p,note,post,processors,submitted,here,will,be,applied,in,the,order,of,registration,any,ordering,semantics,expressed,through,implementing,the,link,org,springframework,core,ordered,interface,will,be,ignored,note,that,autodetected,post,processors,e,g,as,beans,in,an,application,context,will,always,be,applied,after,programmatically,registered,ones,param,bean,post,processor,the,post,processor,to,register;void,add,bean,post,processor,bean,post,processor,bean,post,processor
ConfigurableBeanFactory -> void addBeanPostProcessor(BeanPostProcessor beanPostProcessor)_;1498780456;Add a new BeanPostProcessor that will get applied to beans created_by this factory. To be invoked during factory configuration._<p>Note: Post-processors submitted here will be applied in the order of_registration_ any ordering semantics expressed through implementing the_{@link org.springframework.core.Ordered} interface will be ignored. Note_that autodetected post-processors (e.g. as beans in an ApplicationContext)_will always be applied after programmatically registered ones._@param beanPostProcessor the post-processor to register;void addBeanPostProcessor(BeanPostProcessor beanPostProcessor)_;add,a,new,bean,post,processor,that,will,get,applied,to,beans,created,by,this,factory,to,be,invoked,during,factory,configuration,p,note,post,processors,submitted,here,will,be,applied,in,the,order,of,registration,any,ordering,semantics,expressed,through,implementing,the,link,org,springframework,core,ordered,interface,will,be,ignored,note,that,autodetected,post,processors,e,g,as,beans,in,an,application,context,will,always,be,applied,after,programmatically,registered,ones,param,bean,post,processor,the,post,processor,to,register;void,add,bean,post,processor,bean,post,processor,bean,post,processor
ConfigurableBeanFactory -> void addBeanPostProcessor(BeanPostProcessor beanPostProcessor)_;1527623466;Add a new BeanPostProcessor that will get applied to beans created_by this factory. To be invoked during factory configuration._<p>Note: Post-processors submitted here will be applied in the order of_registration_ any ordering semantics expressed through implementing the_{@link org.springframework.core.Ordered} interface will be ignored. Note_that autodetected post-processors (e.g. as beans in an ApplicationContext)_will always be applied after programmatically registered ones._@param beanPostProcessor the post-processor to register;void addBeanPostProcessor(BeanPostProcessor beanPostProcessor)_;add,a,new,bean,post,processor,that,will,get,applied,to,beans,created,by,this,factory,to,be,invoked,during,factory,configuration,p,note,post,processors,submitted,here,will,be,applied,in,the,order,of,registration,any,ordering,semantics,expressed,through,implementing,the,link,org,springframework,core,ordered,interface,will,be,ignored,note,that,autodetected,post,processors,e,g,as,beans,in,an,application,context,will,always,be,applied,after,programmatically,registered,ones,param,bean,post,processor,the,post,processor,to,register;void,add,bean,post,processor,bean,post,processor,bean,post,processor
ConfigurableBeanFactory -> void addBeanPostProcessor(BeanPostProcessor beanPostProcessor)_;1530174524;Add a new BeanPostProcessor that will get applied to beans created_by this factory. To be invoked during factory configuration._<p>Note: Post-processors submitted here will be applied in the order of_registration_ any ordering semantics expressed through implementing the_{@link org.springframework.core.Ordered} interface will be ignored. Note_that autodetected post-processors (e.g. as beans in an ApplicationContext)_will always be applied after programmatically registered ones._@param beanPostProcessor the post-processor to register;void addBeanPostProcessor(BeanPostProcessor beanPostProcessor)_;add,a,new,bean,post,processor,that,will,get,applied,to,beans,created,by,this,factory,to,be,invoked,during,factory,configuration,p,note,post,processors,submitted,here,will,be,applied,in,the,order,of,registration,any,ordering,semantics,expressed,through,implementing,the,link,org,springframework,core,ordered,interface,will,be,ignored,note,that,autodetected,post,processors,e,g,as,beans,in,an,application,context,will,always,be,applied,after,programmatically,registered,ones,param,bean,post,processor,the,post,processor,to,register;void,add,bean,post,processor,bean,post,processor,bean,post,processor
ConfigurableBeanFactory -> @Nullable 	ClassLoader getTempClassLoader()_;1495868221;Return the temporary ClassLoader to use for type matching purposes,_if any._@since 2.5;@Nullable_	ClassLoader getTempClassLoader()_;return,the,temporary,class,loader,to,use,for,type,matching,purposes,if,any,since,2,5;nullable,class,loader,get,temp,class,loader
ConfigurableBeanFactory -> @Nullable 	ClassLoader getTempClassLoader()_;1496259743;Return the temporary ClassLoader to use for type matching purposes,_if any._@since 2.5;@Nullable_	ClassLoader getTempClassLoader()_;return,the,temporary,class,loader,to,use,for,type,matching,purposes,if,any,since,2,5;nullable,class,loader,get,temp,class,loader
ConfigurableBeanFactory -> @Nullable 	ClassLoader getTempClassLoader()_;1496837955;Return the temporary ClassLoader to use for type matching purposes,_if any._@since 2.5;@Nullable_	ClassLoader getTempClassLoader()_;return,the,temporary,class,loader,to,use,for,type,matching,purposes,if,any,since,2,5;nullable,class,loader,get,temp,class,loader
ConfigurableBeanFactory -> @Nullable 	ClassLoader getTempClassLoader()_;1498780456;Return the temporary ClassLoader to use for type matching purposes,_if any._@since 2.5;@Nullable_	ClassLoader getTempClassLoader()_;return,the,temporary,class,loader,to,use,for,type,matching,purposes,if,any,since,2,5;nullable,class,loader,get,temp,class,loader
ConfigurableBeanFactory -> @Nullable 	ClassLoader getTempClassLoader()_;1527623466;Return the temporary ClassLoader to use for type matching purposes,_if any._@since 2.5;@Nullable_	ClassLoader getTempClassLoader()_;return,the,temporary,class,loader,to,use,for,type,matching,purposes,if,any,since,2,5;nullable,class,loader,get,temp,class,loader
ConfigurableBeanFactory -> @Nullable 	ClassLoader getTempClassLoader()_;1530174524;Return the temporary ClassLoader to use for type matching purposes,_if any._@since 2.5;@Nullable_	ClassLoader getTempClassLoader()_;return,the,temporary,class,loader,to,use,for,type,matching,purposes,if,any,since,2,5;nullable,class,loader,get,temp,class,loader
ConfigurableBeanFactory -> BeanExpressionResolver getBeanExpressionResolver()_;1328020251;Return the resolution strategy for expressions in bean definition values._@since 3.0;BeanExpressionResolver getBeanExpressionResolver()_;return,the,resolution,strategy,for,expressions,in,bean,definition,values,since,3,0;bean,expression,resolver,get,bean,expression,resolver
ConfigurableBeanFactory -> BeanExpressionResolver getBeanExpressionResolver()_;1352418897;Return the resolution strategy for expressions in bean definition values._@since 3.0;BeanExpressionResolver getBeanExpressionResolver()_;return,the,resolution,strategy,for,expressions,in,bean,definition,values,since,3,0;bean,expression,resolver,get,bean,expression,resolver
ConfigurableBeanFactory -> BeanExpressionResolver getBeanExpressionResolver()_;1356735495;Return the resolution strategy for expressions in bean definition values._@since 3.0;BeanExpressionResolver getBeanExpressionResolver()_;return,the,resolution,strategy,for,expressions,in,bean,definition,values,since,3,0;bean,expression,resolver,get,bean,expression,resolver
ConfigurableBeanFactory -> BeanExpressionResolver getBeanExpressionResolver()_;1460227762;Return the resolution strategy for expressions in bean definition values._@since 3.0;BeanExpressionResolver getBeanExpressionResolver()_;return,the,resolution,strategy,for,expressions,in,bean,definition,values,since,3,0;bean,expression,resolver,get,bean,expression,resolver
ConfigurableBeanFactory -> BeanExpressionResolver getBeanExpressionResolver()_;1495868221;Return the resolution strategy for expressions in bean definition values._@since 3.0;BeanExpressionResolver getBeanExpressionResolver()_;return,the,resolution,strategy,for,expressions,in,bean,definition,values,since,3,0;bean,expression,resolver,get,bean,expression,resolver
ConfigurableBeanFactory -> BeanExpressionResolver getBeanExpressionResolver()_;1496259743;Return the resolution strategy for expressions in bean definition values._@since 3.0;BeanExpressionResolver getBeanExpressionResolver()_;return,the,resolution,strategy,for,expressions,in,bean,definition,values,since,3,0;bean,expression,resolver,get,bean,expression,resolver
ConfigurableBeanFactory -> void registerAlias(String beanName, String alias) throws BeanDefinitionStoreException_;1328020251;Given a bean name, create an alias. We typically use this method to_support names that are illegal within XML ids (used for bean names)._<p>Typically invoked during factory configuration, but can also be_used for runtime registration of aliases. Therefore, a factory_implementation should synchronize alias access._@param beanName the canonical name of the target bean_@param alias the alias to be registered for the bean_@throws BeanDefinitionStoreException if the alias is already in use;void registerAlias(String beanName, String alias) throws BeanDefinitionStoreException_;given,a,bean,name,create,an,alias,we,typically,use,this,method,to,support,names,that,are,illegal,within,xml,ids,used,for,bean,names,p,typically,invoked,during,factory,configuration,but,can,also,be,used,for,runtime,registration,of,aliases,therefore,a,factory,implementation,should,synchronize,alias,access,param,bean,name,the,canonical,name,of,the,target,bean,param,alias,the,alias,to,be,registered,for,the,bean,throws,bean,definition,store,exception,if,the,alias,is,already,in,use;void,register,alias,string,bean,name,string,alias,throws,bean,definition,store,exception
ConfigurableBeanFactory -> void registerAlias(String beanName, String alias) throws BeanDefinitionStoreException_;1352418897;Given a bean name, create an alias. We typically use this method to_support names that are illegal within XML ids (used for bean names)._<p>Typically invoked during factory configuration, but can also be_used for runtime registration of aliases. Therefore, a factory_implementation should synchronize alias access._@param beanName the canonical name of the target bean_@param alias the alias to be registered for the bean_@throws BeanDefinitionStoreException if the alias is already in use;void registerAlias(String beanName, String alias) throws BeanDefinitionStoreException_;given,a,bean,name,create,an,alias,we,typically,use,this,method,to,support,names,that,are,illegal,within,xml,ids,used,for,bean,names,p,typically,invoked,during,factory,configuration,but,can,also,be,used,for,runtime,registration,of,aliases,therefore,a,factory,implementation,should,synchronize,alias,access,param,bean,name,the,canonical,name,of,the,target,bean,param,alias,the,alias,to,be,registered,for,the,bean,throws,bean,definition,store,exception,if,the,alias,is,already,in,use;void,register,alias,string,bean,name,string,alias,throws,bean,definition,store,exception
ConfigurableBeanFactory -> void registerAlias(String beanName, String alias) throws BeanDefinitionStoreException_;1356735495;Given a bean name, create an alias. We typically use this method to_support names that are illegal within XML ids (used for bean names)._<p>Typically invoked during factory configuration, but can also be_used for runtime registration of aliases. Therefore, a factory_implementation should synchronize alias access._@param beanName the canonical name of the target bean_@param alias the alias to be registered for the bean_@throws BeanDefinitionStoreException if the alias is already in use;void registerAlias(String beanName, String alias) throws BeanDefinitionStoreException_;given,a,bean,name,create,an,alias,we,typically,use,this,method,to,support,names,that,are,illegal,within,xml,ids,used,for,bean,names,p,typically,invoked,during,factory,configuration,but,can,also,be,used,for,runtime,registration,of,aliases,therefore,a,factory,implementation,should,synchronize,alias,access,param,bean,name,the,canonical,name,of,the,target,bean,param,alias,the,alias,to,be,registered,for,the,bean,throws,bean,definition,store,exception,if,the,alias,is,already,in,use;void,register,alias,string,bean,name,string,alias,throws,bean,definition,store,exception
ConfigurableBeanFactory -> void registerAlias(String beanName, String alias) throws BeanDefinitionStoreException_;1460227762;Given a bean name, create an alias. We typically use this method to_support names that are illegal within XML ids (used for bean names)._<p>Typically invoked during factory configuration, but can also be_used for runtime registration of aliases. Therefore, a factory_implementation should synchronize alias access._@param beanName the canonical name of the target bean_@param alias the alias to be registered for the bean_@throws BeanDefinitionStoreException if the alias is already in use;void registerAlias(String beanName, String alias) throws BeanDefinitionStoreException_;given,a,bean,name,create,an,alias,we,typically,use,this,method,to,support,names,that,are,illegal,within,xml,ids,used,for,bean,names,p,typically,invoked,during,factory,configuration,but,can,also,be,used,for,runtime,registration,of,aliases,therefore,a,factory,implementation,should,synchronize,alias,access,param,bean,name,the,canonical,name,of,the,target,bean,param,alias,the,alias,to,be,registered,for,the,bean,throws,bean,definition,store,exception,if,the,alias,is,already,in,use;void,register,alias,string,bean,name,string,alias,throws,bean,definition,store,exception
ConfigurableBeanFactory -> void registerAlias(String beanName, String alias) throws BeanDefinitionStoreException_;1495868221;Given a bean name, create an alias. We typically use this method to_support names that are illegal within XML ids (used for bean names)._<p>Typically invoked during factory configuration, but can also be_used for runtime registration of aliases. Therefore, a factory_implementation should synchronize alias access._@param beanName the canonical name of the target bean_@param alias the alias to be registered for the bean_@throws BeanDefinitionStoreException if the alias is already in use;void registerAlias(String beanName, String alias) throws BeanDefinitionStoreException_;given,a,bean,name,create,an,alias,we,typically,use,this,method,to,support,names,that,are,illegal,within,xml,ids,used,for,bean,names,p,typically,invoked,during,factory,configuration,but,can,also,be,used,for,runtime,registration,of,aliases,therefore,a,factory,implementation,should,synchronize,alias,access,param,bean,name,the,canonical,name,of,the,target,bean,param,alias,the,alias,to,be,registered,for,the,bean,throws,bean,definition,store,exception,if,the,alias,is,already,in,use;void,register,alias,string,bean,name,string,alias,throws,bean,definition,store,exception
ConfigurableBeanFactory -> void registerAlias(String beanName, String alias) throws BeanDefinitionStoreException_;1496259743;Given a bean name, create an alias. We typically use this method to_support names that are illegal within XML ids (used for bean names)._<p>Typically invoked during factory configuration, but can also be_used for runtime registration of aliases. Therefore, a factory_implementation should synchronize alias access._@param beanName the canonical name of the target bean_@param alias the alias to be registered for the bean_@throws BeanDefinitionStoreException if the alias is already in use;void registerAlias(String beanName, String alias) throws BeanDefinitionStoreException_;given,a,bean,name,create,an,alias,we,typically,use,this,method,to,support,names,that,are,illegal,within,xml,ids,used,for,bean,names,p,typically,invoked,during,factory,configuration,but,can,also,be,used,for,runtime,registration,of,aliases,therefore,a,factory,implementation,should,synchronize,alias,access,param,bean,name,the,canonical,name,of,the,target,bean,param,alias,the,alias,to,be,registered,for,the,bean,throws,bean,definition,store,exception,if,the,alias,is,already,in,use;void,register,alias,string,bean,name,string,alias,throws,bean,definition,store,exception
ConfigurableBeanFactory -> void registerAlias(String beanName, String alias) throws BeanDefinitionStoreException_;1496837955;Given a bean name, create an alias. We typically use this method to_support names that are illegal within XML ids (used for bean names)._<p>Typically invoked during factory configuration, but can also be_used for runtime registration of aliases. Therefore, a factory_implementation should synchronize alias access._@param beanName the canonical name of the target bean_@param alias the alias to be registered for the bean_@throws BeanDefinitionStoreException if the alias is already in use;void registerAlias(String beanName, String alias) throws BeanDefinitionStoreException_;given,a,bean,name,create,an,alias,we,typically,use,this,method,to,support,names,that,are,illegal,within,xml,ids,used,for,bean,names,p,typically,invoked,during,factory,configuration,but,can,also,be,used,for,runtime,registration,of,aliases,therefore,a,factory,implementation,should,synchronize,alias,access,param,bean,name,the,canonical,name,of,the,target,bean,param,alias,the,alias,to,be,registered,for,the,bean,throws,bean,definition,store,exception,if,the,alias,is,already,in,use;void,register,alias,string,bean,name,string,alias,throws,bean,definition,store,exception
ConfigurableBeanFactory -> void registerAlias(String beanName, String alias) throws BeanDefinitionStoreException_;1498780456;Given a bean name, create an alias. We typically use this method to_support names that are illegal within XML ids (used for bean names)._<p>Typically invoked during factory configuration, but can also be_used for runtime registration of aliases. Therefore, a factory_implementation should synchronize alias access._@param beanName the canonical name of the target bean_@param alias the alias to be registered for the bean_@throws BeanDefinitionStoreException if the alias is already in use;void registerAlias(String beanName, String alias) throws BeanDefinitionStoreException_;given,a,bean,name,create,an,alias,we,typically,use,this,method,to,support,names,that,are,illegal,within,xml,ids,used,for,bean,names,p,typically,invoked,during,factory,configuration,but,can,also,be,used,for,runtime,registration,of,aliases,therefore,a,factory,implementation,should,synchronize,alias,access,param,bean,name,the,canonical,name,of,the,target,bean,param,alias,the,alias,to,be,registered,for,the,bean,throws,bean,definition,store,exception,if,the,alias,is,already,in,use;void,register,alias,string,bean,name,string,alias,throws,bean,definition,store,exception
ConfigurableBeanFactory -> void registerAlias(String beanName, String alias) throws BeanDefinitionStoreException_;1527623466;Given a bean name, create an alias. We typically use this method to_support names that are illegal within XML ids (used for bean names)._<p>Typically invoked during factory configuration, but can also be_used for runtime registration of aliases. Therefore, a factory_implementation should synchronize alias access._@param beanName the canonical name of the target bean_@param alias the alias to be registered for the bean_@throws BeanDefinitionStoreException if the alias is already in use;void registerAlias(String beanName, String alias) throws BeanDefinitionStoreException_;given,a,bean,name,create,an,alias,we,typically,use,this,method,to,support,names,that,are,illegal,within,xml,ids,used,for,bean,names,p,typically,invoked,during,factory,configuration,but,can,also,be,used,for,runtime,registration,of,aliases,therefore,a,factory,implementation,should,synchronize,alias,access,param,bean,name,the,canonical,name,of,the,target,bean,param,alias,the,alias,to,be,registered,for,the,bean,throws,bean,definition,store,exception,if,the,alias,is,already,in,use;void,register,alias,string,bean,name,string,alias,throws,bean,definition,store,exception
ConfigurableBeanFactory -> void registerAlias(String beanName, String alias) throws BeanDefinitionStoreException_;1530174524;Given a bean name, create an alias. We typically use this method to_support names that are illegal within XML ids (used for bean names)._<p>Typically invoked during factory configuration, but can also be_used for runtime registration of aliases. Therefore, a factory_implementation should synchronize alias access._@param beanName the canonical name of the target bean_@param alias the alias to be registered for the bean_@throws BeanDefinitionStoreException if the alias is already in use;void registerAlias(String beanName, String alias) throws BeanDefinitionStoreException_;given,a,bean,name,create,an,alias,we,typically,use,this,method,to,support,names,that,are,illegal,within,xml,ids,used,for,bean,names,p,typically,invoked,during,factory,configuration,but,can,also,be,used,for,runtime,registration,of,aliases,therefore,a,factory,implementation,should,synchronize,alias,access,param,bean,name,the,canonical,name,of,the,target,bean,param,alias,the,alias,to,be,registered,for,the,bean,throws,bean,definition,store,exception,if,the,alias,is,already,in,use;void,register,alias,string,bean,name,string,alias,throws,bean,definition,store,exception
ConfigurableBeanFactory -> String[] getDependenciesForBean(String beanName)_;1328020251;Return the names of all beans that the specified bean depends on, if any._@param beanName the name of the bean_@return the array of names of beans which the bean depends on,_or an empty array if none_@since 2.5;String[] getDependenciesForBean(String beanName)_;return,the,names,of,all,beans,that,the,specified,bean,depends,on,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,names,of,beans,which,the,bean,depends,on,or,an,empty,array,if,none,since,2,5;string,get,dependencies,for,bean,string,bean,name
ConfigurableBeanFactory -> String[] getDependenciesForBean(String beanName)_;1352418897;Return the names of all beans that the specified bean depends on, if any._@param beanName the name of the bean_@return the array of names of beans which the bean depends on,_or an empty array if none_@since 2.5;String[] getDependenciesForBean(String beanName)_;return,the,names,of,all,beans,that,the,specified,bean,depends,on,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,names,of,beans,which,the,bean,depends,on,or,an,empty,array,if,none,since,2,5;string,get,dependencies,for,bean,string,bean,name
ConfigurableBeanFactory -> String[] getDependenciesForBean(String beanName)_;1356735495;Return the names of all beans that the specified bean depends on, if any._@param beanName the name of the bean_@return the array of names of beans which the bean depends on,_or an empty array if none_@since 2.5;String[] getDependenciesForBean(String beanName)_;return,the,names,of,all,beans,that,the,specified,bean,depends,on,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,names,of,beans,which,the,bean,depends,on,or,an,empty,array,if,none,since,2,5;string,get,dependencies,for,bean,string,bean,name
ConfigurableBeanFactory -> String[] getDependenciesForBean(String beanName)_;1460227762;Return the names of all beans that the specified bean depends on, if any._@param beanName the name of the bean_@return the array of names of beans which the bean depends on,_or an empty array if none_@since 2.5;String[] getDependenciesForBean(String beanName)_;return,the,names,of,all,beans,that,the,specified,bean,depends,on,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,names,of,beans,which,the,bean,depends,on,or,an,empty,array,if,none,since,2,5;string,get,dependencies,for,bean,string,bean,name
ConfigurableBeanFactory -> String[] getDependenciesForBean(String beanName)_;1495868221;Return the names of all beans that the specified bean depends on, if any._@param beanName the name of the bean_@return the array of names of beans which the bean depends on,_or an empty array if none_@since 2.5;String[] getDependenciesForBean(String beanName)_;return,the,names,of,all,beans,that,the,specified,bean,depends,on,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,names,of,beans,which,the,bean,depends,on,or,an,empty,array,if,none,since,2,5;string,get,dependencies,for,bean,string,bean,name
ConfigurableBeanFactory -> String[] getDependenciesForBean(String beanName)_;1496259743;Return the names of all beans that the specified bean depends on, if any._@param beanName the name of the bean_@return the array of names of beans which the bean depends on,_or an empty array if none_@since 2.5;String[] getDependenciesForBean(String beanName)_;return,the,names,of,all,beans,that,the,specified,bean,depends,on,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,names,of,beans,which,the,bean,depends,on,or,an,empty,array,if,none,since,2,5;string,get,dependencies,for,bean,string,bean,name
ConfigurableBeanFactory -> String[] getDependenciesForBean(String beanName)_;1496837955;Return the names of all beans that the specified bean depends on, if any._@param beanName the name of the bean_@return the array of names of beans which the bean depends on,_or an empty array if none_@since 2.5;String[] getDependenciesForBean(String beanName)_;return,the,names,of,all,beans,that,the,specified,bean,depends,on,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,names,of,beans,which,the,bean,depends,on,or,an,empty,array,if,none,since,2,5;string,get,dependencies,for,bean,string,bean,name
ConfigurableBeanFactory -> String[] getDependenciesForBean(String beanName)_;1498780456;Return the names of all beans that the specified bean depends on, if any._@param beanName the name of the bean_@return the array of names of beans which the bean depends on,_or an empty array if none_@since 2.5;String[] getDependenciesForBean(String beanName)_;return,the,names,of,all,beans,that,the,specified,bean,depends,on,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,names,of,beans,which,the,bean,depends,on,or,an,empty,array,if,none,since,2,5;string,get,dependencies,for,bean,string,bean,name
ConfigurableBeanFactory -> String[] getDependenciesForBean(String beanName)_;1527623466;Return the names of all beans that the specified bean depends on, if any._@param beanName the name of the bean_@return the array of names of beans which the bean depends on,_or an empty array if none_@since 2.5;String[] getDependenciesForBean(String beanName)_;return,the,names,of,all,beans,that,the,specified,bean,depends,on,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,names,of,beans,which,the,bean,depends,on,or,an,empty,array,if,none,since,2,5;string,get,dependencies,for,bean,string,bean,name
ConfigurableBeanFactory -> String[] getDependenciesForBean(String beanName)_;1530174524;Return the names of all beans that the specified bean depends on, if any._@param beanName the name of the bean_@return the array of names of beans which the bean depends on,_or an empty array if none_@since 2.5;String[] getDependenciesForBean(String beanName)_;return,the,names,of,all,beans,that,the,specified,bean,depends,on,if,any,param,bean,name,the,name,of,the,bean,return,the,array,of,names,of,beans,which,the,bean,depends,on,or,an,empty,array,if,none,since,2,5;string,get,dependencies,for,bean,string,bean,name
ConfigurableBeanFactory -> @Nullable 	ClassLoader getBeanClassLoader()_;1498780456;Return this factory's class loader for loading bean classes.;@Nullable_	ClassLoader getBeanClassLoader()_;return,this,factory,s,class,loader,for,loading,bean,classes;nullable,class,loader,get,bean,class,loader
ConfigurableBeanFactory -> @Nullable 	ClassLoader getBeanClassLoader()_;1527623466;Return this factory's class loader for loading bean classes_(only {@code null} if even the system ClassLoader isn't accessible)._@see org.springframework.util.ClassUtils#forName(String, ClassLoader);@Nullable_	ClassLoader getBeanClassLoader()_;return,this,factory,s,class,loader,for,loading,bean,classes,only,code,null,if,even,the,system,class,loader,isn,t,accessible,see,org,springframework,util,class,utils,for,name,string,class,loader;nullable,class,loader,get,bean,class,loader
ConfigurableBeanFactory -> @Nullable 	ClassLoader getBeanClassLoader()_;1530174524;Return this factory's class loader for loading bean classes_(only {@code null} if even the system ClassLoader isn't accessible)._@see org.springframework.util.ClassUtils#forName(String, ClassLoader);@Nullable_	ClassLoader getBeanClassLoader()_;return,this,factory,s,class,loader,for,loading,bean,classes,only,code,null,if,even,the,system,class,loader,isn,t,accessible,see,org,springframework,util,class,utils,for,name,string,class,loader;nullable,class,loader,get,bean,class,loader
ConfigurableBeanFactory -> void setConversionService(@Nullable ConversionService conversionService)_;1496837955;Specify a Spring 3.0 ConversionService to use for converting_property values, as an alternative to JavaBeans PropertyEditors._@since 3.0;void setConversionService(@Nullable ConversionService conversionService)_;specify,a,spring,3,0,conversion,service,to,use,for,converting,property,values,as,an,alternative,to,java,beans,property,editors,since,3,0;void,set,conversion,service,nullable,conversion,service,conversion,service
ConfigurableBeanFactory -> void setConversionService(@Nullable ConversionService conversionService)_;1498780456;Specify a Spring 3.0 ConversionService to use for converting_property values, as an alternative to JavaBeans PropertyEditors._@since 3.0;void setConversionService(@Nullable ConversionService conversionService)_;specify,a,spring,3,0,conversion,service,to,use,for,converting,property,values,as,an,alternative,to,java,beans,property,editors,since,3,0;void,set,conversion,service,nullable,conversion,service,conversion,service
ConfigurableBeanFactory -> void setConversionService(@Nullable ConversionService conversionService)_;1527623466;Specify a Spring 3.0 ConversionService to use for converting_property values, as an alternative to JavaBeans PropertyEditors._@since 3.0;void setConversionService(@Nullable ConversionService conversionService)_;specify,a,spring,3,0,conversion,service,to,use,for,converting,property,values,as,an,alternative,to,java,beans,property,editors,since,3,0;void,set,conversion,service,nullable,conversion,service,conversion,service
ConfigurableBeanFactory -> void setConversionService(@Nullable ConversionService conversionService)_;1530174524;Specify a Spring 3.0 ConversionService to use for converting_property values, as an alternative to JavaBeans PropertyEditors._@since 3.0;void setConversionService(@Nullable ConversionService conversionService)_;specify,a,spring,3,0,conversion,service,to,use,for,converting,property,values,as,an,alternative,to,java,beans,property,editors,since,3,0;void,set,conversion,service,nullable,conversion,service,conversion,service
ConfigurableBeanFactory -> void resolveAliases(StringValueResolver valueResolver)_;1328020251;Resolve all alias target names and aliases registered in this_factory, applying the given StringValueResolver to them._<p>The value resolver may for example resolve placeholders_in target bean names and even in alias names._@param valueResolver the StringValueResolver to apply_@since 2.5;void resolveAliases(StringValueResolver valueResolver)_;resolve,all,alias,target,names,and,aliases,registered,in,this,factory,applying,the,given,string,value,resolver,to,them,p,the,value,resolver,may,for,example,resolve,placeholders,in,target,bean,names,and,even,in,alias,names,param,value,resolver,the,string,value,resolver,to,apply,since,2,5;void,resolve,aliases,string,value,resolver,value,resolver
ConfigurableBeanFactory -> void resolveAliases(StringValueResolver valueResolver)_;1352418897;Resolve all alias target names and aliases registered in this_factory, applying the given StringValueResolver to them._<p>The value resolver may for example resolve placeholders_in target bean names and even in alias names._@param valueResolver the StringValueResolver to apply_@since 2.5;void resolveAliases(StringValueResolver valueResolver)_;resolve,all,alias,target,names,and,aliases,registered,in,this,factory,applying,the,given,string,value,resolver,to,them,p,the,value,resolver,may,for,example,resolve,placeholders,in,target,bean,names,and,even,in,alias,names,param,value,resolver,the,string,value,resolver,to,apply,since,2,5;void,resolve,aliases,string,value,resolver,value,resolver
ConfigurableBeanFactory -> void resolveAliases(StringValueResolver valueResolver)_;1356735495;Resolve all alias target names and aliases registered in this_factory, applying the given StringValueResolver to them._<p>The value resolver may for example resolve placeholders_in target bean names and even in alias names._@param valueResolver the StringValueResolver to apply_@since 2.5;void resolveAliases(StringValueResolver valueResolver)_;resolve,all,alias,target,names,and,aliases,registered,in,this,factory,applying,the,given,string,value,resolver,to,them,p,the,value,resolver,may,for,example,resolve,placeholders,in,target,bean,names,and,even,in,alias,names,param,value,resolver,the,string,value,resolver,to,apply,since,2,5;void,resolve,aliases,string,value,resolver,value,resolver
ConfigurableBeanFactory -> void resolveAliases(StringValueResolver valueResolver)_;1460227762;Resolve all alias target names and aliases registered in this_factory, applying the given StringValueResolver to them._<p>The value resolver may for example resolve placeholders_in target bean names and even in alias names._@param valueResolver the StringValueResolver to apply_@since 2.5;void resolveAliases(StringValueResolver valueResolver)_;resolve,all,alias,target,names,and,aliases,registered,in,this,factory,applying,the,given,string,value,resolver,to,them,p,the,value,resolver,may,for,example,resolve,placeholders,in,target,bean,names,and,even,in,alias,names,param,value,resolver,the,string,value,resolver,to,apply,since,2,5;void,resolve,aliases,string,value,resolver,value,resolver
ConfigurableBeanFactory -> void resolveAliases(StringValueResolver valueResolver)_;1495868221;Resolve all alias target names and aliases registered in this_factory, applying the given StringValueResolver to them._<p>The value resolver may for example resolve placeholders_in target bean names and even in alias names._@param valueResolver the StringValueResolver to apply_@since 2.5;void resolveAliases(StringValueResolver valueResolver)_;resolve,all,alias,target,names,and,aliases,registered,in,this,factory,applying,the,given,string,value,resolver,to,them,p,the,value,resolver,may,for,example,resolve,placeholders,in,target,bean,names,and,even,in,alias,names,param,value,resolver,the,string,value,resolver,to,apply,since,2,5;void,resolve,aliases,string,value,resolver,value,resolver
ConfigurableBeanFactory -> void resolveAliases(StringValueResolver valueResolver)_;1496259743;Resolve all alias target names and aliases registered in this_factory, applying the given StringValueResolver to them._<p>The value resolver may for example resolve placeholders_in target bean names and even in alias names._@param valueResolver the StringValueResolver to apply_@since 2.5;void resolveAliases(StringValueResolver valueResolver)_;resolve,all,alias,target,names,and,aliases,registered,in,this,factory,applying,the,given,string,value,resolver,to,them,p,the,value,resolver,may,for,example,resolve,placeholders,in,target,bean,names,and,even,in,alias,names,param,value,resolver,the,string,value,resolver,to,apply,since,2,5;void,resolve,aliases,string,value,resolver,value,resolver
ConfigurableBeanFactory -> void resolveAliases(StringValueResolver valueResolver)_;1496837955;Resolve all alias target names and aliases registered in this_factory, applying the given StringValueResolver to them._<p>The value resolver may for example resolve placeholders_in target bean names and even in alias names._@param valueResolver the StringValueResolver to apply_@since 2.5;void resolveAliases(StringValueResolver valueResolver)_;resolve,all,alias,target,names,and,aliases,registered,in,this,factory,applying,the,given,string,value,resolver,to,them,p,the,value,resolver,may,for,example,resolve,placeholders,in,target,bean,names,and,even,in,alias,names,param,value,resolver,the,string,value,resolver,to,apply,since,2,5;void,resolve,aliases,string,value,resolver,value,resolver
ConfigurableBeanFactory -> void resolveAliases(StringValueResolver valueResolver)_;1498780456;Resolve all alias target names and aliases registered in this_factory, applying the given StringValueResolver to them._<p>The value resolver may for example resolve placeholders_in target bean names and even in alias names._@param valueResolver the StringValueResolver to apply_@since 2.5;void resolveAliases(StringValueResolver valueResolver)_;resolve,all,alias,target,names,and,aliases,registered,in,this,factory,applying,the,given,string,value,resolver,to,them,p,the,value,resolver,may,for,example,resolve,placeholders,in,target,bean,names,and,even,in,alias,names,param,value,resolver,the,string,value,resolver,to,apply,since,2,5;void,resolve,aliases,string,value,resolver,value,resolver
ConfigurableBeanFactory -> void resolveAliases(StringValueResolver valueResolver)_;1527623466;Resolve all alias target names and aliases registered in this_factory, applying the given StringValueResolver to them._<p>The value resolver may for example resolve placeholders_in target bean names and even in alias names._@param valueResolver the StringValueResolver to apply_@since 2.5;void resolveAliases(StringValueResolver valueResolver)_;resolve,all,alias,target,names,and,aliases,registered,in,this,factory,applying,the,given,string,value,resolver,to,them,p,the,value,resolver,may,for,example,resolve,placeholders,in,target,bean,names,and,even,in,alias,names,param,value,resolver,the,string,value,resolver,to,apply,since,2,5;void,resolve,aliases,string,value,resolver,value,resolver
ConfigurableBeanFactory -> void resolveAliases(StringValueResolver valueResolver)_;1530174524;Resolve all alias target names and aliases registered in this_factory, applying the given StringValueResolver to them._<p>The value resolver may for example resolve placeholders_in target bean names and even in alias names._@param valueResolver the StringValueResolver to apply_@since 2.5;void resolveAliases(StringValueResolver valueResolver)_;resolve,all,alias,target,names,and,aliases,registered,in,this,factory,applying,the,given,string,value,resolver,to,them,p,the,value,resolver,may,for,example,resolve,placeholders,in,target,bean,names,and,even,in,alias,names,param,value,resolver,the,string,value,resolver,to,apply,since,2,5;void,resolve,aliases,string,value,resolver,value,resolver
ConfigurableBeanFactory -> void setBeanExpressionResolver(BeanExpressionResolver resolver)_;1328020251;Specify the resolution strategy for expressions in bean definition values._<p>There is no expression support active in a BeanFactory by default._An ApplicationContext will typically set a standard expression strategy_here, supporting "#{...}" expressions in a Unified EL compatible style._@since 3.0;void setBeanExpressionResolver(BeanExpressionResolver resolver)_;specify,the,resolution,strategy,for,expressions,in,bean,definition,values,p,there,is,no,expression,support,active,in,a,bean,factory,by,default,an,application,context,will,typically,set,a,standard,expression,strategy,here,supporting,expressions,in,a,unified,el,compatible,style,since,3,0;void,set,bean,expression,resolver,bean,expression,resolver,resolver
ConfigurableBeanFactory -> void setBeanExpressionResolver(BeanExpressionResolver resolver)_;1352418897;Specify the resolution strategy for expressions in bean definition values._<p>There is no expression support active in a BeanFactory by default._An ApplicationContext will typically set a standard expression strategy_here, supporting "#{...}" expressions in a Unified EL compatible style._@since 3.0;void setBeanExpressionResolver(BeanExpressionResolver resolver)_;specify,the,resolution,strategy,for,expressions,in,bean,definition,values,p,there,is,no,expression,support,active,in,a,bean,factory,by,default,an,application,context,will,typically,set,a,standard,expression,strategy,here,supporting,expressions,in,a,unified,el,compatible,style,since,3,0;void,set,bean,expression,resolver,bean,expression,resolver,resolver
ConfigurableBeanFactory -> void setBeanExpressionResolver(BeanExpressionResolver resolver)_;1356735495;Specify the resolution strategy for expressions in bean definition values._<p>There is no expression support active in a BeanFactory by default._An ApplicationContext will typically set a standard expression strategy_here, supporting "#{...}" expressions in a Unified EL compatible style._@since 3.0;void setBeanExpressionResolver(BeanExpressionResolver resolver)_;specify,the,resolution,strategy,for,expressions,in,bean,definition,values,p,there,is,no,expression,support,active,in,a,bean,factory,by,default,an,application,context,will,typically,set,a,standard,expression,strategy,here,supporting,expressions,in,a,unified,el,compatible,style,since,3,0;void,set,bean,expression,resolver,bean,expression,resolver,resolver
ConfigurableBeanFactory -> void setBeanExpressionResolver(BeanExpressionResolver resolver)_;1460227762;Specify the resolution strategy for expressions in bean definition values._<p>There is no expression support active in a BeanFactory by default._An ApplicationContext will typically set a standard expression strategy_here, supporting "#{...}" expressions in a Unified EL compatible style._@since 3.0;void setBeanExpressionResolver(BeanExpressionResolver resolver)_;specify,the,resolution,strategy,for,expressions,in,bean,definition,values,p,there,is,no,expression,support,active,in,a,bean,factory,by,default,an,application,context,will,typically,set,a,standard,expression,strategy,here,supporting,expressions,in,a,unified,el,compatible,style,since,3,0;void,set,bean,expression,resolver,bean,expression,resolver,resolver
ConfigurableBeanFactory -> void setBeanExpressionResolver(BeanExpressionResolver resolver)_;1495868221;Specify the resolution strategy for expressions in bean definition values._<p>There is no expression support active in a BeanFactory by default._An ApplicationContext will typically set a standard expression strategy_here, supporting "#{...}" expressions in a Unified EL compatible style._@since 3.0;void setBeanExpressionResolver(BeanExpressionResolver resolver)_;specify,the,resolution,strategy,for,expressions,in,bean,definition,values,p,there,is,no,expression,support,active,in,a,bean,factory,by,default,an,application,context,will,typically,set,a,standard,expression,strategy,here,supporting,expressions,in,a,unified,el,compatible,style,since,3,0;void,set,bean,expression,resolver,bean,expression,resolver,resolver
ConfigurableBeanFactory -> void setBeanExpressionResolver(BeanExpressionResolver resolver)_;1496259743;Specify the resolution strategy for expressions in bean definition values._<p>There is no expression support active in a BeanFactory by default._An ApplicationContext will typically set a standard expression strategy_here, supporting "#{...}" expressions in a Unified EL compatible style._@since 3.0;void setBeanExpressionResolver(BeanExpressionResolver resolver)_;specify,the,resolution,strategy,for,expressions,in,bean,definition,values,p,there,is,no,expression,support,active,in,a,bean,factory,by,default,an,application,context,will,typically,set,a,standard,expression,strategy,here,supporting,expressions,in,a,unified,el,compatible,style,since,3,0;void,set,bean,expression,resolver,bean,expression,resolver,resolver
ConfigurableBeanFactory -> void destroySingletons()_;1328020251;Destroy all singleton beans in this factory, including inner beans that have_been registered as disposable. To be called on shutdown of a factory._<p>Any exception that arises during destruction should be caught_and logged instead of propagated to the caller of this method.;void destroySingletons()_;destroy,all,singleton,beans,in,this,factory,including,inner,beans,that,have,been,registered,as,disposable,to,be,called,on,shutdown,of,a,factory,p,any,exception,that,arises,during,destruction,should,be,caught,and,logged,instead,of,propagated,to,the,caller,of,this,method;void,destroy,singletons
ConfigurableBeanFactory -> void destroySingletons()_;1352418897;Destroy all singleton beans in this factory, including inner beans that have_been registered as disposable. To be called on shutdown of a factory._<p>Any exception that arises during destruction should be caught_and logged instead of propagated to the caller of this method.;void destroySingletons()_;destroy,all,singleton,beans,in,this,factory,including,inner,beans,that,have,been,registered,as,disposable,to,be,called,on,shutdown,of,a,factory,p,any,exception,that,arises,during,destruction,should,be,caught,and,logged,instead,of,propagated,to,the,caller,of,this,method;void,destroy,singletons
ConfigurableBeanFactory -> void destroySingletons()_;1356735495;Destroy all singleton beans in this factory, including inner beans that have_been registered as disposable. To be called on shutdown of a factory._<p>Any exception that arises during destruction should be caught_and logged instead of propagated to the caller of this method.;void destroySingletons()_;destroy,all,singleton,beans,in,this,factory,including,inner,beans,that,have,been,registered,as,disposable,to,be,called,on,shutdown,of,a,factory,p,any,exception,that,arises,during,destruction,should,be,caught,and,logged,instead,of,propagated,to,the,caller,of,this,method;void,destroy,singletons
ConfigurableBeanFactory -> void destroySingletons()_;1460227762;Destroy all singleton beans in this factory, including inner beans that have_been registered as disposable. To be called on shutdown of a factory._<p>Any exception that arises during destruction should be caught_and logged instead of propagated to the caller of this method.;void destroySingletons()_;destroy,all,singleton,beans,in,this,factory,including,inner,beans,that,have,been,registered,as,disposable,to,be,called,on,shutdown,of,a,factory,p,any,exception,that,arises,during,destruction,should,be,caught,and,logged,instead,of,propagated,to,the,caller,of,this,method;void,destroy,singletons
ConfigurableBeanFactory -> void destroySingletons()_;1495868221;Destroy all singleton beans in this factory, including inner beans that have_been registered as disposable. To be called on shutdown of a factory._<p>Any exception that arises during destruction should be caught_and logged instead of propagated to the caller of this method.;void destroySingletons()_;destroy,all,singleton,beans,in,this,factory,including,inner,beans,that,have,been,registered,as,disposable,to,be,called,on,shutdown,of,a,factory,p,any,exception,that,arises,during,destruction,should,be,caught,and,logged,instead,of,propagated,to,the,caller,of,this,method;void,destroy,singletons
ConfigurableBeanFactory -> void destroySingletons()_;1496259743;Destroy all singleton beans in this factory, including inner beans that have_been registered as disposable. To be called on shutdown of a factory._<p>Any exception that arises during destruction should be caught_and logged instead of propagated to the caller of this method.;void destroySingletons()_;destroy,all,singleton,beans,in,this,factory,including,inner,beans,that,have,been,registered,as,disposable,to,be,called,on,shutdown,of,a,factory,p,any,exception,that,arises,during,destruction,should,be,caught,and,logged,instead,of,propagated,to,the,caller,of,this,method;void,destroy,singletons
ConfigurableBeanFactory -> void destroySingletons()_;1496837955;Destroy all singleton beans in this factory, including inner beans that have_been registered as disposable. To be called on shutdown of a factory._<p>Any exception that arises during destruction should be caught_and logged instead of propagated to the caller of this method.;void destroySingletons()_;destroy,all,singleton,beans,in,this,factory,including,inner,beans,that,have,been,registered,as,disposable,to,be,called,on,shutdown,of,a,factory,p,any,exception,that,arises,during,destruction,should,be,caught,and,logged,instead,of,propagated,to,the,caller,of,this,method;void,destroy,singletons
ConfigurableBeanFactory -> void destroySingletons()_;1498780456;Destroy all singleton beans in this factory, including inner beans that have_been registered as disposable. To be called on shutdown of a factory._<p>Any exception that arises during destruction should be caught_and logged instead of propagated to the caller of this method.;void destroySingletons()_;destroy,all,singleton,beans,in,this,factory,including,inner,beans,that,have,been,registered,as,disposable,to,be,called,on,shutdown,of,a,factory,p,any,exception,that,arises,during,destruction,should,be,caught,and,logged,instead,of,propagated,to,the,caller,of,this,method;void,destroy,singletons
ConfigurableBeanFactory -> void destroySingletons()_;1527623466;Destroy all singleton beans in this factory, including inner beans that have_been registered as disposable. To be called on shutdown of a factory._<p>Any exception that arises during destruction should be caught_and logged instead of propagated to the caller of this method.;void destroySingletons()_;destroy,all,singleton,beans,in,this,factory,including,inner,beans,that,have,been,registered,as,disposable,to,be,called,on,shutdown,of,a,factory,p,any,exception,that,arises,during,destruction,should,be,caught,and,logged,instead,of,propagated,to,the,caller,of,this,method;void,destroy,singletons
ConfigurableBeanFactory -> void destroySingletons()_;1530174524;Destroy all singleton beans in this factory, including inner beans that have_been registered as disposable. To be called on shutdown of a factory._<p>Any exception that arises during destruction should be caught_and logged instead of propagated to the caller of this method.;void destroySingletons()_;destroy,all,singleton,beans,in,this,factory,including,inner,beans,that,have,been,registered,as,disposable,to,be,called,on,shutdown,of,a,factory,p,any,exception,that,arises,during,destruction,should,be,caught,and,logged,instead,of,propagated,to,the,caller,of,this,method;void,destroy,singletons
ConfigurableBeanFactory -> void setBeanClassLoader(ClassLoader beanClassLoader)_;1328020251;Set the class loader to use for loading bean classes._Default is the thread context class loader._<p>Note that this class loader will only apply to bean definitions_that do not carry a resolved bean class yet. This is the case as of_Spring 2.0 by default: Bean definitions only carry bean class names,_to be resolved once the factory processes the bean definition._@param beanClassLoader the class loader to use,_or <code>null</code> to suggest the default class loader;void setBeanClassLoader(ClassLoader beanClassLoader)_;set,the,class,loader,to,use,for,loading,bean,classes,default,is,the,thread,context,class,loader,p,note,that,this,class,loader,will,only,apply,to,bean,definitions,that,do,not,carry,a,resolved,bean,class,yet,this,is,the,case,as,of,spring,2,0,by,default,bean,definitions,only,carry,bean,class,names,to,be,resolved,once,the,factory,processes,the,bean,definition,param,bean,class,loader,the,class,loader,to,use,or,code,null,code,to,suggest,the,default,class,loader;void,set,bean,class,loader,class,loader,bean,class,loader
ConfigurableBeanFactory -> void setBeanClassLoader(ClassLoader beanClassLoader)_;1352418897;Set the class loader to use for loading bean classes._Default is the thread context class loader._<p>Note that this class loader will only apply to bean definitions_that do not carry a resolved bean class yet. This is the case as of_Spring 2.0 by default: Bean definitions only carry bean class names,_to be resolved once the factory processes the bean definition._@param beanClassLoader the class loader to use,_or <code>null</code> to suggest the default class loader;void setBeanClassLoader(ClassLoader beanClassLoader)_;set,the,class,loader,to,use,for,loading,bean,classes,default,is,the,thread,context,class,loader,p,note,that,this,class,loader,will,only,apply,to,bean,definitions,that,do,not,carry,a,resolved,bean,class,yet,this,is,the,case,as,of,spring,2,0,by,default,bean,definitions,only,carry,bean,class,names,to,be,resolved,once,the,factory,processes,the,bean,definition,param,bean,class,loader,the,class,loader,to,use,or,code,null,code,to,suggest,the,default,class,loader;void,set,bean,class,loader,class,loader,bean,class,loader
ConfigurableBeanFactory -> void setBeanClassLoader(ClassLoader beanClassLoader)_;1356735495;Set the class loader to use for loading bean classes._Default is the thread context class loader._<p>Note that this class loader will only apply to bean definitions_that do not carry a resolved bean class yet. This is the case as of_Spring 2.0 by default: Bean definitions only carry bean class names,_to be resolved once the factory processes the bean definition._@param beanClassLoader the class loader to use,_or {@code null} to suggest the default class loader;void setBeanClassLoader(ClassLoader beanClassLoader)_;set,the,class,loader,to,use,for,loading,bean,classes,default,is,the,thread,context,class,loader,p,note,that,this,class,loader,will,only,apply,to,bean,definitions,that,do,not,carry,a,resolved,bean,class,yet,this,is,the,case,as,of,spring,2,0,by,default,bean,definitions,only,carry,bean,class,names,to,be,resolved,once,the,factory,processes,the,bean,definition,param,bean,class,loader,the,class,loader,to,use,or,code,null,to,suggest,the,default,class,loader;void,set,bean,class,loader,class,loader,bean,class,loader
ConfigurableBeanFactory -> void setBeanClassLoader(ClassLoader beanClassLoader)_;1460227762;Set the class loader to use for loading bean classes._Default is the thread context class loader._<p>Note that this class loader will only apply to bean definitions_that do not carry a resolved bean class yet. This is the case as of_Spring 2.0 by default: Bean definitions only carry bean class names,_to be resolved once the factory processes the bean definition._@param beanClassLoader the class loader to use,_or {@code null} to suggest the default class loader;void setBeanClassLoader(ClassLoader beanClassLoader)_;set,the,class,loader,to,use,for,loading,bean,classes,default,is,the,thread,context,class,loader,p,note,that,this,class,loader,will,only,apply,to,bean,definitions,that,do,not,carry,a,resolved,bean,class,yet,this,is,the,case,as,of,spring,2,0,by,default,bean,definitions,only,carry,bean,class,names,to,be,resolved,once,the,factory,processes,the,bean,definition,param,bean,class,loader,the,class,loader,to,use,or,code,null,to,suggest,the,default,class,loader;void,set,bean,class,loader,class,loader,bean,class,loader
ConfigurableBeanFactory -> void registerScope(String scopeName, Scope scope)_;1328020251;Register the given scope, backed by the given Scope implementation._@param scopeName the scope identifier_@param scope the backing Scope implementation;void registerScope(String scopeName, Scope scope)_;register,the,given,scope,backed,by,the,given,scope,implementation,param,scope,name,the,scope,identifier,param,scope,the,backing,scope,implementation;void,register,scope,string,scope,name,scope,scope
ConfigurableBeanFactory -> void registerScope(String scopeName, Scope scope)_;1352418897;Register the given scope, backed by the given Scope implementation._@param scopeName the scope identifier_@param scope the backing Scope implementation;void registerScope(String scopeName, Scope scope)_;register,the,given,scope,backed,by,the,given,scope,implementation,param,scope,name,the,scope,identifier,param,scope,the,backing,scope,implementation;void,register,scope,string,scope,name,scope,scope
ConfigurableBeanFactory -> void registerScope(String scopeName, Scope scope)_;1356735495;Register the given scope, backed by the given Scope implementation._@param scopeName the scope identifier_@param scope the backing Scope implementation;void registerScope(String scopeName, Scope scope)_;register,the,given,scope,backed,by,the,given,scope,implementation,param,scope,name,the,scope,identifier,param,scope,the,backing,scope,implementation;void,register,scope,string,scope,name,scope,scope
ConfigurableBeanFactory -> void registerScope(String scopeName, Scope scope)_;1460227762;Register the given scope, backed by the given Scope implementation._@param scopeName the scope identifier_@param scope the backing Scope implementation;void registerScope(String scopeName, Scope scope)_;register,the,given,scope,backed,by,the,given,scope,implementation,param,scope,name,the,scope,identifier,param,scope,the,backing,scope,implementation;void,register,scope,string,scope,name,scope,scope
ConfigurableBeanFactory -> void registerScope(String scopeName, Scope scope)_;1495868221;Register the given scope, backed by the given Scope implementation._@param scopeName the scope identifier_@param scope the backing Scope implementation;void registerScope(String scopeName, Scope scope)_;register,the,given,scope,backed,by,the,given,scope,implementation,param,scope,name,the,scope,identifier,param,scope,the,backing,scope,implementation;void,register,scope,string,scope,name,scope,scope
ConfigurableBeanFactory -> void registerScope(String scopeName, Scope scope)_;1496259743;Register the given scope, backed by the given Scope implementation._@param scopeName the scope identifier_@param scope the backing Scope implementation;void registerScope(String scopeName, Scope scope)_;register,the,given,scope,backed,by,the,given,scope,implementation,param,scope,name,the,scope,identifier,param,scope,the,backing,scope,implementation;void,register,scope,string,scope,name,scope,scope
ConfigurableBeanFactory -> void registerScope(String scopeName, Scope scope)_;1496837955;Register the given scope, backed by the given Scope implementation._@param scopeName the scope identifier_@param scope the backing Scope implementation;void registerScope(String scopeName, Scope scope)_;register,the,given,scope,backed,by,the,given,scope,implementation,param,scope,name,the,scope,identifier,param,scope,the,backing,scope,implementation;void,register,scope,string,scope,name,scope,scope
ConfigurableBeanFactory -> void registerScope(String scopeName, Scope scope)_;1498780456;Register the given scope, backed by the given Scope implementation._@param scopeName the scope identifier_@param scope the backing Scope implementation;void registerScope(String scopeName, Scope scope)_;register,the,given,scope,backed,by,the,given,scope,implementation,param,scope,name,the,scope,identifier,param,scope,the,backing,scope,implementation;void,register,scope,string,scope,name,scope,scope
ConfigurableBeanFactory -> void registerScope(String scopeName, Scope scope)_;1527623466;Register the given scope, backed by the given Scope implementation._@param scopeName the scope identifier_@param scope the backing Scope implementation;void registerScope(String scopeName, Scope scope)_;register,the,given,scope,backed,by,the,given,scope,implementation,param,scope,name,the,scope,identifier,param,scope,the,backing,scope,implementation;void,register,scope,string,scope,name,scope,scope
ConfigurableBeanFactory -> void registerScope(String scopeName, Scope scope)_;1530174524;Register the given scope, backed by the given Scope implementation._@param scopeName the scope identifier_@param scope the backing Scope implementation;void registerScope(String scopeName, Scope scope)_;register,the,given,scope,backed,by,the,given,scope,implementation,param,scope,name,the,scope,identifier,param,scope,the,backing,scope,implementation;void,register,scope,string,scope,name,scope,scope
ConfigurableBeanFactory -> ClassLoader getBeanClassLoader()_;1328020251;Return this factory's class loader for loading bean classes.;ClassLoader getBeanClassLoader()_;return,this,factory,s,class,loader,for,loading,bean,classes;class,loader,get,bean,class,loader
ConfigurableBeanFactory -> ClassLoader getBeanClassLoader()_;1352418897;Return this factory's class loader for loading bean classes.;ClassLoader getBeanClassLoader()_;return,this,factory,s,class,loader,for,loading,bean,classes;class,loader,get,bean,class,loader
ConfigurableBeanFactory -> ClassLoader getBeanClassLoader()_;1356735495;Return this factory's class loader for loading bean classes.;ClassLoader getBeanClassLoader()_;return,this,factory,s,class,loader,for,loading,bean,classes;class,loader,get,bean,class,loader
ConfigurableBeanFactory -> ClassLoader getBeanClassLoader()_;1460227762;Return this factory's class loader for loading bean classes.;ClassLoader getBeanClassLoader()_;return,this,factory,s,class,loader,for,loading,bean,classes;class,loader,get,bean,class,loader
ConfigurableBeanFactory -> ClassLoader getBeanClassLoader()_;1495868221;Return this factory's class loader for loading bean classes.;ClassLoader getBeanClassLoader()_;return,this,factory,s,class,loader,for,loading,bean,classes;class,loader,get,bean,class,loader
ConfigurableBeanFactory -> ClassLoader getBeanClassLoader()_;1496259743;Return this factory's class loader for loading bean classes.;ClassLoader getBeanClassLoader()_;return,this,factory,s,class,loader,for,loading,bean,classes;class,loader,get,bean,class,loader
ConfigurableBeanFactory -> ClassLoader getBeanClassLoader()_;1496837955;Return this factory's class loader for loading bean classes.;ClassLoader getBeanClassLoader()_;return,this,factory,s,class,loader,for,loading,bean,classes;class,loader,get,bean,class,loader
ConfigurableBeanFactory -> void registerCustomEditor(Class<?> requiredType, Class<? extends PropertyEditor> propertyEditorClass)_;1328020251;Register the given custom property editor for all properties of the_given type. To be invoked during factory configuration._<p>Note that this method will register a shared custom editor instance__access to that instance will be synchronized for thread-safety. It is_generally preferable to use {@link #addPropertyEditorRegistrar} instead_of this method, to avoid for the need for synchronization on custom editors._@param requiredType type of the property_@param propertyEditorClass the {@link PropertyEditor} class to register;void registerCustomEditor(Class<?> requiredType, Class<? extends PropertyEditor> propertyEditorClass)_;register,the,given,custom,property,editor,for,all,properties,of,the,given,type,to,be,invoked,during,factory,configuration,p,note,that,this,method,will,register,a,shared,custom,editor,instance,access,to,that,instance,will,be,synchronized,for,thread,safety,it,is,generally,preferable,to,use,link,add,property,editor,registrar,instead,of,this,method,to,avoid,for,the,need,for,synchronization,on,custom,editors,param,required,type,type,of,the,property,param,property,editor,class,the,link,property,editor,class,to,register;void,register,custom,editor,class,required,type,class,extends,property,editor,property,editor,class
ConfigurableBeanFactory -> void registerCustomEditor(Class<?> requiredType, Class<? extends PropertyEditor> propertyEditorClass)_;1352418897;Register the given custom property editor for all properties of the_given type. To be invoked during factory configuration._<p>Note that this method will register a shared custom editor instance__access to that instance will be synchronized for thread-safety. It is_generally preferable to use {@link #addPropertyEditorRegistrar} instead_of this method, to avoid for the need for synchronization on custom editors._@param requiredType type of the property_@param propertyEditorClass the {@link PropertyEditor} class to register;void registerCustomEditor(Class<?> requiredType, Class<? extends PropertyEditor> propertyEditorClass)_;register,the,given,custom,property,editor,for,all,properties,of,the,given,type,to,be,invoked,during,factory,configuration,p,note,that,this,method,will,register,a,shared,custom,editor,instance,access,to,that,instance,will,be,synchronized,for,thread,safety,it,is,generally,preferable,to,use,link,add,property,editor,registrar,instead,of,this,method,to,avoid,for,the,need,for,synchronization,on,custom,editors,param,required,type,type,of,the,property,param,property,editor,class,the,link,property,editor,class,to,register;void,register,custom,editor,class,required,type,class,extends,property,editor,property,editor,class
ConfigurableBeanFactory -> void registerCustomEditor(Class<?> requiredType, Class<? extends PropertyEditor> propertyEditorClass)_;1356735495;Register the given custom property editor for all properties of the_given type. To be invoked during factory configuration._<p>Note that this method will register a shared custom editor instance__access to that instance will be synchronized for thread-safety. It is_generally preferable to use {@link #addPropertyEditorRegistrar} instead_of this method, to avoid for the need for synchronization on custom editors._@param requiredType type of the property_@param propertyEditorClass the {@link PropertyEditor} class to register;void registerCustomEditor(Class<?> requiredType, Class<? extends PropertyEditor> propertyEditorClass)_;register,the,given,custom,property,editor,for,all,properties,of,the,given,type,to,be,invoked,during,factory,configuration,p,note,that,this,method,will,register,a,shared,custom,editor,instance,access,to,that,instance,will,be,synchronized,for,thread,safety,it,is,generally,preferable,to,use,link,add,property,editor,registrar,instead,of,this,method,to,avoid,for,the,need,for,synchronization,on,custom,editors,param,required,type,type,of,the,property,param,property,editor,class,the,link,property,editor,class,to,register;void,register,custom,editor,class,required,type,class,extends,property,editor,property,editor,class
ConfigurableBeanFactory -> void registerCustomEditor(Class<?> requiredType, Class<? extends PropertyEditor> propertyEditorClass)_;1460227762;Register the given custom property editor for all properties of the_given type. To be invoked during factory configuration._<p>Note that this method will register a shared custom editor instance__access to that instance will be synchronized for thread-safety. It is_generally preferable to use {@link #addPropertyEditorRegistrar} instead_of this method, to avoid for the need for synchronization on custom editors._@param requiredType type of the property_@param propertyEditorClass the {@link PropertyEditor} class to register;void registerCustomEditor(Class<?> requiredType, Class<? extends PropertyEditor> propertyEditorClass)_;register,the,given,custom,property,editor,for,all,properties,of,the,given,type,to,be,invoked,during,factory,configuration,p,note,that,this,method,will,register,a,shared,custom,editor,instance,access,to,that,instance,will,be,synchronized,for,thread,safety,it,is,generally,preferable,to,use,link,add,property,editor,registrar,instead,of,this,method,to,avoid,for,the,need,for,synchronization,on,custom,editors,param,required,type,type,of,the,property,param,property,editor,class,the,link,property,editor,class,to,register;void,register,custom,editor,class,required,type,class,extends,property,editor,property,editor,class
ConfigurableBeanFactory -> void registerCustomEditor(Class<?> requiredType, Class<? extends PropertyEditor> propertyEditorClass)_;1495868221;Register the given custom property editor for all properties of the_given type. To be invoked during factory configuration._<p>Note that this method will register a shared custom editor instance__access to that instance will be synchronized for thread-safety. It is_generally preferable to use {@link #addPropertyEditorRegistrar} instead_of this method, to avoid for the need for synchronization on custom editors._@param requiredType type of the property_@param propertyEditorClass the {@link PropertyEditor} class to register;void registerCustomEditor(Class<?> requiredType, Class<? extends PropertyEditor> propertyEditorClass)_;register,the,given,custom,property,editor,for,all,properties,of,the,given,type,to,be,invoked,during,factory,configuration,p,note,that,this,method,will,register,a,shared,custom,editor,instance,access,to,that,instance,will,be,synchronized,for,thread,safety,it,is,generally,preferable,to,use,link,add,property,editor,registrar,instead,of,this,method,to,avoid,for,the,need,for,synchronization,on,custom,editors,param,required,type,type,of,the,property,param,property,editor,class,the,link,property,editor,class,to,register;void,register,custom,editor,class,required,type,class,extends,property,editor,property,editor,class
ConfigurableBeanFactory -> void registerCustomEditor(Class<?> requiredType, Class<? extends PropertyEditor> propertyEditorClass)_;1496259743;Register the given custom property editor for all properties of the_given type. To be invoked during factory configuration._<p>Note that this method will register a shared custom editor instance__access to that instance will be synchronized for thread-safety. It is_generally preferable to use {@link #addPropertyEditorRegistrar} instead_of this method, to avoid for the need for synchronization on custom editors._@param requiredType type of the property_@param propertyEditorClass the {@link PropertyEditor} class to register;void registerCustomEditor(Class<?> requiredType, Class<? extends PropertyEditor> propertyEditorClass)_;register,the,given,custom,property,editor,for,all,properties,of,the,given,type,to,be,invoked,during,factory,configuration,p,note,that,this,method,will,register,a,shared,custom,editor,instance,access,to,that,instance,will,be,synchronized,for,thread,safety,it,is,generally,preferable,to,use,link,add,property,editor,registrar,instead,of,this,method,to,avoid,for,the,need,for,synchronization,on,custom,editors,param,required,type,type,of,the,property,param,property,editor,class,the,link,property,editor,class,to,register;void,register,custom,editor,class,required,type,class,extends,property,editor,property,editor,class
ConfigurableBeanFactory -> void registerCustomEditor(Class<?> requiredType, Class<? extends PropertyEditor> propertyEditorClass)_;1496837955;Register the given custom property editor for all properties of the_given type. To be invoked during factory configuration._<p>Note that this method will register a shared custom editor instance__access to that instance will be synchronized for thread-safety. It is_generally preferable to use {@link #addPropertyEditorRegistrar} instead_of this method, to avoid for the need for synchronization on custom editors._@param requiredType type of the property_@param propertyEditorClass the {@link PropertyEditor} class to register;void registerCustomEditor(Class<?> requiredType, Class<? extends PropertyEditor> propertyEditorClass)_;register,the,given,custom,property,editor,for,all,properties,of,the,given,type,to,be,invoked,during,factory,configuration,p,note,that,this,method,will,register,a,shared,custom,editor,instance,access,to,that,instance,will,be,synchronized,for,thread,safety,it,is,generally,preferable,to,use,link,add,property,editor,registrar,instead,of,this,method,to,avoid,for,the,need,for,synchronization,on,custom,editors,param,required,type,type,of,the,property,param,property,editor,class,the,link,property,editor,class,to,register;void,register,custom,editor,class,required,type,class,extends,property,editor,property,editor,class
ConfigurableBeanFactory -> void registerCustomEditor(Class<?> requiredType, Class<? extends PropertyEditor> propertyEditorClass)_;1498780456;Register the given custom property editor for all properties of the_given type. To be invoked during factory configuration._<p>Note that this method will register a shared custom editor instance__access to that instance will be synchronized for thread-safety. It is_generally preferable to use {@link #addPropertyEditorRegistrar} instead_of this method, to avoid for the need for synchronization on custom editors._@param requiredType type of the property_@param propertyEditorClass the {@link PropertyEditor} class to register;void registerCustomEditor(Class<?> requiredType, Class<? extends PropertyEditor> propertyEditorClass)_;register,the,given,custom,property,editor,for,all,properties,of,the,given,type,to,be,invoked,during,factory,configuration,p,note,that,this,method,will,register,a,shared,custom,editor,instance,access,to,that,instance,will,be,synchronized,for,thread,safety,it,is,generally,preferable,to,use,link,add,property,editor,registrar,instead,of,this,method,to,avoid,for,the,need,for,synchronization,on,custom,editors,param,required,type,type,of,the,property,param,property,editor,class,the,link,property,editor,class,to,register;void,register,custom,editor,class,required,type,class,extends,property,editor,property,editor,class
ConfigurableBeanFactory -> void registerCustomEditor(Class<?> requiredType, Class<? extends PropertyEditor> propertyEditorClass)_;1527623466;Register the given custom property editor for all properties of the_given type. To be invoked during factory configuration._<p>Note that this method will register a shared custom editor instance__access to that instance will be synchronized for thread-safety. It is_generally preferable to use {@link #addPropertyEditorRegistrar} instead_of this method, to avoid for the need for synchronization on custom editors._@param requiredType type of the property_@param propertyEditorClass the {@link PropertyEditor} class to register;void registerCustomEditor(Class<?> requiredType, Class<? extends PropertyEditor> propertyEditorClass)_;register,the,given,custom,property,editor,for,all,properties,of,the,given,type,to,be,invoked,during,factory,configuration,p,note,that,this,method,will,register,a,shared,custom,editor,instance,access,to,that,instance,will,be,synchronized,for,thread,safety,it,is,generally,preferable,to,use,link,add,property,editor,registrar,instead,of,this,method,to,avoid,for,the,need,for,synchronization,on,custom,editors,param,required,type,type,of,the,property,param,property,editor,class,the,link,property,editor,class,to,register;void,register,custom,editor,class,required,type,class,extends,property,editor,property,editor,class
ConfigurableBeanFactory -> void registerCustomEditor(Class<?> requiredType, Class<? extends PropertyEditor> propertyEditorClass)_;1530174524;Register the given custom property editor for all properties of the_given type. To be invoked during factory configuration._<p>Note that this method will register a shared custom editor instance__access to that instance will be synchronized for thread-safety. It is_generally preferable to use {@link #addPropertyEditorRegistrar} instead_of this method, to avoid for the need for synchronization on custom editors._@param requiredType type of the property_@param propertyEditorClass the {@link PropertyEditor} class to register;void registerCustomEditor(Class<?> requiredType, Class<? extends PropertyEditor> propertyEditorClass)_;register,the,given,custom,property,editor,for,all,properties,of,the,given,type,to,be,invoked,during,factory,configuration,p,note,that,this,method,will,register,a,shared,custom,editor,instance,access,to,that,instance,will,be,synchronized,for,thread,safety,it,is,generally,preferable,to,use,link,add,property,editor,registrar,instead,of,this,method,to,avoid,for,the,need,for,synchronization,on,custom,editors,param,required,type,type,of,the,property,param,property,editor,class,the,link,property,editor,class,to,register;void,register,custom,editor,class,required,type,class,extends,property,editor,property,editor,class
ConfigurableBeanFactory -> int getBeanPostProcessorCount()_;1328020251;Return the current number of registered BeanPostProcessors, if any.;int getBeanPostProcessorCount()_;return,the,current,number,of,registered,bean,post,processors,if,any;int,get,bean,post,processor,count
ConfigurableBeanFactory -> int getBeanPostProcessorCount()_;1352418897;Return the current number of registered BeanPostProcessors, if any.;int getBeanPostProcessorCount()_;return,the,current,number,of,registered,bean,post,processors,if,any;int,get,bean,post,processor,count
ConfigurableBeanFactory -> int getBeanPostProcessorCount()_;1356735495;Return the current number of registered BeanPostProcessors, if any.;int getBeanPostProcessorCount()_;return,the,current,number,of,registered,bean,post,processors,if,any;int,get,bean,post,processor,count
ConfigurableBeanFactory -> int getBeanPostProcessorCount()_;1460227762;Return the current number of registered BeanPostProcessors, if any.;int getBeanPostProcessorCount()_;return,the,current,number,of,registered,bean,post,processors,if,any;int,get,bean,post,processor,count
ConfigurableBeanFactory -> int getBeanPostProcessorCount()_;1495868221;Return the current number of registered BeanPostProcessors, if any.;int getBeanPostProcessorCount()_;return,the,current,number,of,registered,bean,post,processors,if,any;int,get,bean,post,processor,count
ConfigurableBeanFactory -> int getBeanPostProcessorCount()_;1496259743;Return the current number of registered BeanPostProcessors, if any.;int getBeanPostProcessorCount()_;return,the,current,number,of,registered,bean,post,processors,if,any;int,get,bean,post,processor,count
ConfigurableBeanFactory -> int getBeanPostProcessorCount()_;1496837955;Return the current number of registered BeanPostProcessors, if any.;int getBeanPostProcessorCount()_;return,the,current,number,of,registered,bean,post,processors,if,any;int,get,bean,post,processor,count
ConfigurableBeanFactory -> int getBeanPostProcessorCount()_;1498780456;Return the current number of registered BeanPostProcessors, if any.;int getBeanPostProcessorCount()_;return,the,current,number,of,registered,bean,post,processors,if,any;int,get,bean,post,processor,count
ConfigurableBeanFactory -> int getBeanPostProcessorCount()_;1527623466;Return the current number of registered BeanPostProcessors, if any.;int getBeanPostProcessorCount()_;return,the,current,number,of,registered,bean,post,processors,if,any;int,get,bean,post,processor,count
ConfigurableBeanFactory -> int getBeanPostProcessorCount()_;1530174524;Return the current number of registered BeanPostProcessors, if any.;int getBeanPostProcessorCount()_;return,the,current,number,of,registered,bean,post,processors,if,any;int,get,bean,post,processor,count
ConfigurableBeanFactory -> BeanDefinition getMergedBeanDefinition(String beanName) throws NoSuchBeanDefinitionException_;1328020251;Return a merged BeanDefinition for the given bean name,_merging a child bean definition with its parent if necessary._Considers bean definitions in ancestor factories as well._@param beanName the name of the bean to retrieve the merged definition for_@return a (potentially merged) BeanDefinition for the given bean_@throws NoSuchBeanDefinitionException if there is no bean definition with the given name_@since 2.5;BeanDefinition getMergedBeanDefinition(String beanName) throws NoSuchBeanDefinitionException_;return,a,merged,bean,definition,for,the,given,bean,name,merging,a,child,bean,definition,with,its,parent,if,necessary,considers,bean,definitions,in,ancestor,factories,as,well,param,bean,name,the,name,of,the,bean,to,retrieve,the,merged,definition,for,return,a,potentially,merged,bean,definition,for,the,given,bean,throws,no,such,bean,definition,exception,if,there,is,no,bean,definition,with,the,given,name,since,2,5;bean,definition,get,merged,bean,definition,string,bean,name,throws,no,such,bean,definition,exception
ConfigurableBeanFactory -> BeanDefinition getMergedBeanDefinition(String beanName) throws NoSuchBeanDefinitionException_;1352418897;Return a merged BeanDefinition for the given bean name,_merging a child bean definition with its parent if necessary._Considers bean definitions in ancestor factories as well._@param beanName the name of the bean to retrieve the merged definition for_@return a (potentially merged) BeanDefinition for the given bean_@throws NoSuchBeanDefinitionException if there is no bean definition with the given name_@since 2.5;BeanDefinition getMergedBeanDefinition(String beanName) throws NoSuchBeanDefinitionException_;return,a,merged,bean,definition,for,the,given,bean,name,merging,a,child,bean,definition,with,its,parent,if,necessary,considers,bean,definitions,in,ancestor,factories,as,well,param,bean,name,the,name,of,the,bean,to,retrieve,the,merged,definition,for,return,a,potentially,merged,bean,definition,for,the,given,bean,throws,no,such,bean,definition,exception,if,there,is,no,bean,definition,with,the,given,name,since,2,5;bean,definition,get,merged,bean,definition,string,bean,name,throws,no,such,bean,definition,exception
ConfigurableBeanFactory -> BeanDefinition getMergedBeanDefinition(String beanName) throws NoSuchBeanDefinitionException_;1356735495;Return a merged BeanDefinition for the given bean name,_merging a child bean definition with its parent if necessary._Considers bean definitions in ancestor factories as well._@param beanName the name of the bean to retrieve the merged definition for_@return a (potentially merged) BeanDefinition for the given bean_@throws NoSuchBeanDefinitionException if there is no bean definition with the given name_@since 2.5;BeanDefinition getMergedBeanDefinition(String beanName) throws NoSuchBeanDefinitionException_;return,a,merged,bean,definition,for,the,given,bean,name,merging,a,child,bean,definition,with,its,parent,if,necessary,considers,bean,definitions,in,ancestor,factories,as,well,param,bean,name,the,name,of,the,bean,to,retrieve,the,merged,definition,for,return,a,potentially,merged,bean,definition,for,the,given,bean,throws,no,such,bean,definition,exception,if,there,is,no,bean,definition,with,the,given,name,since,2,5;bean,definition,get,merged,bean,definition,string,bean,name,throws,no,such,bean,definition,exception
ConfigurableBeanFactory -> BeanDefinition getMergedBeanDefinition(String beanName) throws NoSuchBeanDefinitionException_;1460227762;Return a merged BeanDefinition for the given bean name,_merging a child bean definition with its parent if necessary._Considers bean definitions in ancestor factories as well._@param beanName the name of the bean to retrieve the merged definition for_@return a (potentially merged) BeanDefinition for the given bean_@throws NoSuchBeanDefinitionException if there is no bean definition with the given name_@since 2.5;BeanDefinition getMergedBeanDefinition(String beanName) throws NoSuchBeanDefinitionException_;return,a,merged,bean,definition,for,the,given,bean,name,merging,a,child,bean,definition,with,its,parent,if,necessary,considers,bean,definitions,in,ancestor,factories,as,well,param,bean,name,the,name,of,the,bean,to,retrieve,the,merged,definition,for,return,a,potentially,merged,bean,definition,for,the,given,bean,throws,no,such,bean,definition,exception,if,there,is,no,bean,definition,with,the,given,name,since,2,5;bean,definition,get,merged,bean,definition,string,bean,name,throws,no,such,bean,definition,exception
ConfigurableBeanFactory -> BeanDefinition getMergedBeanDefinition(String beanName) throws NoSuchBeanDefinitionException_;1495868221;Return a merged BeanDefinition for the given bean name,_merging a child bean definition with its parent if necessary._Considers bean definitions in ancestor factories as well._@param beanName the name of the bean to retrieve the merged definition for_@return a (potentially merged) BeanDefinition for the given bean_@throws NoSuchBeanDefinitionException if there is no bean definition with the given name_@since 2.5;BeanDefinition getMergedBeanDefinition(String beanName) throws NoSuchBeanDefinitionException_;return,a,merged,bean,definition,for,the,given,bean,name,merging,a,child,bean,definition,with,its,parent,if,necessary,considers,bean,definitions,in,ancestor,factories,as,well,param,bean,name,the,name,of,the,bean,to,retrieve,the,merged,definition,for,return,a,potentially,merged,bean,definition,for,the,given,bean,throws,no,such,bean,definition,exception,if,there,is,no,bean,definition,with,the,given,name,since,2,5;bean,definition,get,merged,bean,definition,string,bean,name,throws,no,such,bean,definition,exception
ConfigurableBeanFactory -> BeanDefinition getMergedBeanDefinition(String beanName) throws NoSuchBeanDefinitionException_;1496259743;Return a merged BeanDefinition for the given bean name,_merging a child bean definition with its parent if necessary._Considers bean definitions in ancestor factories as well._@param beanName the name of the bean to retrieve the merged definition for_@return a (potentially merged) BeanDefinition for the given bean_@throws NoSuchBeanDefinitionException if there is no bean definition with the given name_@since 2.5;BeanDefinition getMergedBeanDefinition(String beanName) throws NoSuchBeanDefinitionException_;return,a,merged,bean,definition,for,the,given,bean,name,merging,a,child,bean,definition,with,its,parent,if,necessary,considers,bean,definitions,in,ancestor,factories,as,well,param,bean,name,the,name,of,the,bean,to,retrieve,the,merged,definition,for,return,a,potentially,merged,bean,definition,for,the,given,bean,throws,no,such,bean,definition,exception,if,there,is,no,bean,definition,with,the,given,name,since,2,5;bean,definition,get,merged,bean,definition,string,bean,name,throws,no,such,bean,definition,exception
ConfigurableBeanFactory -> BeanDefinition getMergedBeanDefinition(String beanName) throws NoSuchBeanDefinitionException_;1496837955;Return a merged BeanDefinition for the given bean name,_merging a child bean definition with its parent if necessary._Considers bean definitions in ancestor factories as well._@param beanName the name of the bean to retrieve the merged definition for_@return a (potentially merged) BeanDefinition for the given bean_@throws NoSuchBeanDefinitionException if there is no bean definition with the given name_@since 2.5;BeanDefinition getMergedBeanDefinition(String beanName) throws NoSuchBeanDefinitionException_;return,a,merged,bean,definition,for,the,given,bean,name,merging,a,child,bean,definition,with,its,parent,if,necessary,considers,bean,definitions,in,ancestor,factories,as,well,param,bean,name,the,name,of,the,bean,to,retrieve,the,merged,definition,for,return,a,potentially,merged,bean,definition,for,the,given,bean,throws,no,such,bean,definition,exception,if,there,is,no,bean,definition,with,the,given,name,since,2,5;bean,definition,get,merged,bean,definition,string,bean,name,throws,no,such,bean,definition,exception
ConfigurableBeanFactory -> BeanDefinition getMergedBeanDefinition(String beanName) throws NoSuchBeanDefinitionException_;1498780456;Return a merged BeanDefinition for the given bean name,_merging a child bean definition with its parent if necessary._Considers bean definitions in ancestor factories as well._@param beanName the name of the bean to retrieve the merged definition for_@return a (potentially merged) BeanDefinition for the given bean_@throws NoSuchBeanDefinitionException if there is no bean definition with the given name_@since 2.5;BeanDefinition getMergedBeanDefinition(String beanName) throws NoSuchBeanDefinitionException_;return,a,merged,bean,definition,for,the,given,bean,name,merging,a,child,bean,definition,with,its,parent,if,necessary,considers,bean,definitions,in,ancestor,factories,as,well,param,bean,name,the,name,of,the,bean,to,retrieve,the,merged,definition,for,return,a,potentially,merged,bean,definition,for,the,given,bean,throws,no,such,bean,definition,exception,if,there,is,no,bean,definition,with,the,given,name,since,2,5;bean,definition,get,merged,bean,definition,string,bean,name,throws,no,such,bean,definition,exception
ConfigurableBeanFactory -> BeanDefinition getMergedBeanDefinition(String beanName) throws NoSuchBeanDefinitionException_;1527623466;Return a merged BeanDefinition for the given bean name,_merging a child bean definition with its parent if necessary._Considers bean definitions in ancestor factories as well._@param beanName the name of the bean to retrieve the merged definition for_@return a (potentially merged) BeanDefinition for the given bean_@throws NoSuchBeanDefinitionException if there is no bean definition with the given name_@since 2.5;BeanDefinition getMergedBeanDefinition(String beanName) throws NoSuchBeanDefinitionException_;return,a,merged,bean,definition,for,the,given,bean,name,merging,a,child,bean,definition,with,its,parent,if,necessary,considers,bean,definitions,in,ancestor,factories,as,well,param,bean,name,the,name,of,the,bean,to,retrieve,the,merged,definition,for,return,a,potentially,merged,bean,definition,for,the,given,bean,throws,no,such,bean,definition,exception,if,there,is,no,bean,definition,with,the,given,name,since,2,5;bean,definition,get,merged,bean,definition,string,bean,name,throws,no,such,bean,definition,exception
ConfigurableBeanFactory -> BeanDefinition getMergedBeanDefinition(String beanName) throws NoSuchBeanDefinitionException_;1530174524;Return a merged BeanDefinition for the given bean name,_merging a child bean definition with its parent if necessary._Considers bean definitions in ancestor factories as well._@param beanName the name of the bean to retrieve the merged definition for_@return a (potentially merged) BeanDefinition for the given bean_@throws NoSuchBeanDefinitionException if there is no bean definition with the given name_@since 2.5;BeanDefinition getMergedBeanDefinition(String beanName) throws NoSuchBeanDefinitionException_;return,a,merged,bean,definition,for,the,given,bean,name,merging,a,child,bean,definition,with,its,parent,if,necessary,considers,bean,definitions,in,ancestor,factories,as,well,param,bean,name,the,name,of,the,bean,to,retrieve,the,merged,definition,for,return,a,potentially,merged,bean,definition,for,the,given,bean,throws,no,such,bean,definition,exception,if,there,is,no,bean,definition,with,the,given,name,since,2,5;bean,definition,get,merged,bean,definition,string,bean,name,throws,no,such,bean,definition,exception
ConfigurableBeanFactory -> boolean isCacheBeanMetadata()_;1328020251;Return whether to cache bean metadata such as given bean definitions_(in merged fashion) and resolved bean classes.;boolean isCacheBeanMetadata()_;return,whether,to,cache,bean,metadata,such,as,given,bean,definitions,in,merged,fashion,and,resolved,bean,classes;boolean,is,cache,bean,metadata
ConfigurableBeanFactory -> boolean isCacheBeanMetadata()_;1352418897;Return whether to cache bean metadata such as given bean definitions_(in merged fashion) and resolved bean classes.;boolean isCacheBeanMetadata()_;return,whether,to,cache,bean,metadata,such,as,given,bean,definitions,in,merged,fashion,and,resolved,bean,classes;boolean,is,cache,bean,metadata
ConfigurableBeanFactory -> boolean isCacheBeanMetadata()_;1356735495;Return whether to cache bean metadata such as given bean definitions_(in merged fashion) and resolved bean classes.;boolean isCacheBeanMetadata()_;return,whether,to,cache,bean,metadata,such,as,given,bean,definitions,in,merged,fashion,and,resolved,bean,classes;boolean,is,cache,bean,metadata
ConfigurableBeanFactory -> boolean isCacheBeanMetadata()_;1460227762;Return whether to cache bean metadata such as given bean definitions_(in merged fashion) and resolved bean classes.;boolean isCacheBeanMetadata()_;return,whether,to,cache,bean,metadata,such,as,given,bean,definitions,in,merged,fashion,and,resolved,bean,classes;boolean,is,cache,bean,metadata
ConfigurableBeanFactory -> boolean isCacheBeanMetadata()_;1495868221;Return whether to cache bean metadata such as given bean definitions_(in merged fashion) and resolved bean classes.;boolean isCacheBeanMetadata()_;return,whether,to,cache,bean,metadata,such,as,given,bean,definitions,in,merged,fashion,and,resolved,bean,classes;boolean,is,cache,bean,metadata
ConfigurableBeanFactory -> boolean isCacheBeanMetadata()_;1496259743;Return whether to cache bean metadata such as given bean definitions_(in merged fashion) and resolved bean classes.;boolean isCacheBeanMetadata()_;return,whether,to,cache,bean,metadata,such,as,given,bean,definitions,in,merged,fashion,and,resolved,bean,classes;boolean,is,cache,bean,metadata
ConfigurableBeanFactory -> boolean isCacheBeanMetadata()_;1496837955;Return whether to cache bean metadata such as given bean definitions_(in merged fashion) and resolved bean classes.;boolean isCacheBeanMetadata()_;return,whether,to,cache,bean,metadata,such,as,given,bean,definitions,in,merged,fashion,and,resolved,bean,classes;boolean,is,cache,bean,metadata
ConfigurableBeanFactory -> boolean isCacheBeanMetadata()_;1498780456;Return whether to cache bean metadata such as given bean definitions_(in merged fashion) and resolved bean classes.;boolean isCacheBeanMetadata()_;return,whether,to,cache,bean,metadata,such,as,given,bean,definitions,in,merged,fashion,and,resolved,bean,classes;boolean,is,cache,bean,metadata
ConfigurableBeanFactory -> boolean isCacheBeanMetadata()_;1527623466;Return whether to cache bean metadata such as given bean definitions_(in merged fashion) and resolved bean classes.;boolean isCacheBeanMetadata()_;return,whether,to,cache,bean,metadata,such,as,given,bean,definitions,in,merged,fashion,and,resolved,bean,classes;boolean,is,cache,bean,metadata
ConfigurableBeanFactory -> boolean isCacheBeanMetadata()_;1530174524;Return whether to cache bean metadata such as given bean definitions_(in merged fashion) and resolved bean classes.;boolean isCacheBeanMetadata()_;return,whether,to,cache,bean,metadata,such,as,given,bean,definitions,in,merged,fashion,and,resolved,bean,classes;boolean,is,cache,bean,metadata
ConfigurableBeanFactory -> void setTypeConverter(TypeConverter typeConverter)_;1328020251;Set a custom type converter that this BeanFactory should use for converting_bean property values, constructor argument values, etc._<p>This will override the default PropertyEditor mechanism and hence make_any custom editors or custom editor registrars irrelevant._@see #addPropertyEditorRegistrar_@see #registerCustomEditor_@since 2.5;void setTypeConverter(TypeConverter typeConverter)_;set,a,custom,type,converter,that,this,bean,factory,should,use,for,converting,bean,property,values,constructor,argument,values,etc,p,this,will,override,the,default,property,editor,mechanism,and,hence,make,any,custom,editors,or,custom,editor,registrars,irrelevant,see,add,property,editor,registrar,see,register,custom,editor,since,2,5;void,set,type,converter,type,converter,type,converter
ConfigurableBeanFactory -> void setTypeConverter(TypeConverter typeConverter)_;1352418897;Set a custom type converter that this BeanFactory should use for converting_bean property values, constructor argument values, etc._<p>This will override the default PropertyEditor mechanism and hence make_any custom editors or custom editor registrars irrelevant._@see #addPropertyEditorRegistrar_@see #registerCustomEditor_@since 2.5;void setTypeConverter(TypeConverter typeConverter)_;set,a,custom,type,converter,that,this,bean,factory,should,use,for,converting,bean,property,values,constructor,argument,values,etc,p,this,will,override,the,default,property,editor,mechanism,and,hence,make,any,custom,editors,or,custom,editor,registrars,irrelevant,see,add,property,editor,registrar,see,register,custom,editor,since,2,5;void,set,type,converter,type,converter,type,converter
ConfigurableBeanFactory -> void setTypeConverter(TypeConverter typeConverter)_;1356735495;Set a custom type converter that this BeanFactory should use for converting_bean property values, constructor argument values, etc._<p>This will override the default PropertyEditor mechanism and hence make_any custom editors or custom editor registrars irrelevant._@see #addPropertyEditorRegistrar_@see #registerCustomEditor_@since 2.5;void setTypeConverter(TypeConverter typeConverter)_;set,a,custom,type,converter,that,this,bean,factory,should,use,for,converting,bean,property,values,constructor,argument,values,etc,p,this,will,override,the,default,property,editor,mechanism,and,hence,make,any,custom,editors,or,custom,editor,registrars,irrelevant,see,add,property,editor,registrar,see,register,custom,editor,since,2,5;void,set,type,converter,type,converter,type,converter
ConfigurableBeanFactory -> void setTypeConverter(TypeConverter typeConverter)_;1460227762;Set a custom type converter that this BeanFactory should use for converting_bean property values, constructor argument values, etc._<p>This will override the default PropertyEditor mechanism and hence make_any custom editors or custom editor registrars irrelevant._@see #addPropertyEditorRegistrar_@see #registerCustomEditor_@since 2.5;void setTypeConverter(TypeConverter typeConverter)_;set,a,custom,type,converter,that,this,bean,factory,should,use,for,converting,bean,property,values,constructor,argument,values,etc,p,this,will,override,the,default,property,editor,mechanism,and,hence,make,any,custom,editors,or,custom,editor,registrars,irrelevant,see,add,property,editor,registrar,see,register,custom,editor,since,2,5;void,set,type,converter,type,converter,type,converter
ConfigurableBeanFactory -> void setTypeConverter(TypeConverter typeConverter)_;1495868221;Set a custom type converter that this BeanFactory should use for converting_bean property values, constructor argument values, etc._<p>This will override the default PropertyEditor mechanism and hence make_any custom editors or custom editor registrars irrelevant._@see #addPropertyEditorRegistrar_@see #registerCustomEditor_@since 2.5;void setTypeConverter(TypeConverter typeConverter)_;set,a,custom,type,converter,that,this,bean,factory,should,use,for,converting,bean,property,values,constructor,argument,values,etc,p,this,will,override,the,default,property,editor,mechanism,and,hence,make,any,custom,editors,or,custom,editor,registrars,irrelevant,see,add,property,editor,registrar,see,register,custom,editor,since,2,5;void,set,type,converter,type,converter,type,converter
ConfigurableBeanFactory -> void setTypeConverter(TypeConverter typeConverter)_;1496259743;Set a custom type converter that this BeanFactory should use for converting_bean property values, constructor argument values, etc._<p>This will override the default PropertyEditor mechanism and hence make_any custom editors or custom editor registrars irrelevant._@see #addPropertyEditorRegistrar_@see #registerCustomEditor_@since 2.5;void setTypeConverter(TypeConverter typeConverter)_;set,a,custom,type,converter,that,this,bean,factory,should,use,for,converting,bean,property,values,constructor,argument,values,etc,p,this,will,override,the,default,property,editor,mechanism,and,hence,make,any,custom,editors,or,custom,editor,registrars,irrelevant,see,add,property,editor,registrar,see,register,custom,editor,since,2,5;void,set,type,converter,type,converter,type,converter
ConfigurableBeanFactory -> void setTypeConverter(TypeConverter typeConverter)_;1496837955;Set a custom type converter that this BeanFactory should use for converting_bean property values, constructor argument values, etc._<p>This will override the default PropertyEditor mechanism and hence make_any custom editors or custom editor registrars irrelevant._@see #addPropertyEditorRegistrar_@see #registerCustomEditor_@since 2.5;void setTypeConverter(TypeConverter typeConverter)_;set,a,custom,type,converter,that,this,bean,factory,should,use,for,converting,bean,property,values,constructor,argument,values,etc,p,this,will,override,the,default,property,editor,mechanism,and,hence,make,any,custom,editors,or,custom,editor,registrars,irrelevant,see,add,property,editor,registrar,see,register,custom,editor,since,2,5;void,set,type,converter,type,converter,type,converter
ConfigurableBeanFactory -> void setTypeConverter(TypeConverter typeConverter)_;1498780456;Set a custom type converter that this BeanFactory should use for converting_bean property values, constructor argument values, etc._<p>This will override the default PropertyEditor mechanism and hence make_any custom editors or custom editor registrars irrelevant._@see #addPropertyEditorRegistrar_@see #registerCustomEditor_@since 2.5;void setTypeConverter(TypeConverter typeConverter)_;set,a,custom,type,converter,that,this,bean,factory,should,use,for,converting,bean,property,values,constructor,argument,values,etc,p,this,will,override,the,default,property,editor,mechanism,and,hence,make,any,custom,editors,or,custom,editor,registrars,irrelevant,see,add,property,editor,registrar,see,register,custom,editor,since,2,5;void,set,type,converter,type,converter,type,converter
ConfigurableBeanFactory -> void setTypeConverter(TypeConverter typeConverter)_;1527623466;Set a custom type converter that this BeanFactory should use for converting_bean property values, constructor argument values, etc._<p>This will override the default PropertyEditor mechanism and hence make_any custom editors or custom editor registrars irrelevant._@see #addPropertyEditorRegistrar_@see #registerCustomEditor_@since 2.5;void setTypeConverter(TypeConverter typeConverter)_;set,a,custom,type,converter,that,this,bean,factory,should,use,for,converting,bean,property,values,constructor,argument,values,etc,p,this,will,override,the,default,property,editor,mechanism,and,hence,make,any,custom,editors,or,custom,editor,registrars,irrelevant,see,add,property,editor,registrar,see,register,custom,editor,since,2,5;void,set,type,converter,type,converter,type,converter
ConfigurableBeanFactory -> void setTypeConverter(TypeConverter typeConverter)_;1530174524;Set a custom type converter that this BeanFactory should use for converting_bean property values, constructor argument values, etc._<p>This will override the default PropertyEditor mechanism and hence make_any custom editors or custom editor registrars irrelevant._@since 2.5_@see #addPropertyEditorRegistrar_@see #registerCustomEditor;void setTypeConverter(TypeConverter typeConverter)_;set,a,custom,type,converter,that,this,bean,factory,should,use,for,converting,bean,property,values,constructor,argument,values,etc,p,this,will,override,the,default,property,editor,mechanism,and,hence,make,any,custom,editors,or,custom,editor,registrars,irrelevant,since,2,5,see,add,property,editor,registrar,see,register,custom,editor;void,set,type,converter,type,converter,type,converter
