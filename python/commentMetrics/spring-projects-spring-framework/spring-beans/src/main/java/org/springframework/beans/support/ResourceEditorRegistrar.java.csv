commented;modifiers;parameterAmount;loc;comment;code
true;public;1;22;/**  * Populate the given {@code registry} with the following resource editors:  * ResourceEditor, InputStreamEditor, InputSourceEditor, FileEditor, URLEditor,  * URIEditor, ClassEditor, ClassArrayEditor.  * <p>If this registrar has been configured with a {@link ResourcePatternResolver},  * a ResourceArrayPropertyEditor will be registered as well.  * @see org.springframework.core.io.ResourceEditor  * @see org.springframework.beans.propertyeditors.InputStreamEditor  * @see org.springframework.beans.propertyeditors.InputSourceEditor  * @see org.springframework.beans.propertyeditors.FileEditor  * @see org.springframework.beans.propertyeditors.URLEditor  * @see org.springframework.beans.propertyeditors.URIEditor  * @see org.springframework.beans.propertyeditors.ClassEditor  * @see org.springframework.beans.propertyeditors.ClassArrayEditor  * @see org.springframework.core.io.support.ResourceArrayPropertyEditor  */ ;/**  * Populate the given {@code registry} with the following resource editors:  * ResourceEditor, InputStreamEditor, InputSourceEditor, FileEditor, URLEditor,  * URIEditor, ClassEditor, ClassArrayEditor.  * <p>If this registrar has been configured with a {@link ResourcePatternResolver},  * a ResourceArrayPropertyEditor will be registered as well.  * @see org.springframework.core.io.ResourceEditor  * @see org.springframework.beans.propertyeditors.InputStreamEditor  * @see org.springframework.beans.propertyeditors.InputSourceEditor  * @see org.springframework.beans.propertyeditors.FileEditor  * @see org.springframework.beans.propertyeditors.URLEditor  * @see org.springframework.beans.propertyeditors.URIEditor  * @see org.springframework.beans.propertyeditors.ClassEditor  * @see org.springframework.beans.propertyeditors.ClassArrayEditor  * @see org.springframework.core.io.support.ResourceArrayPropertyEditor  */ @Override public void registerCustomEditors(PropertyEditorRegistry registry) {     ResourceEditor baseEditor = new ResourceEditor(this.resourceLoader, this.propertyResolver).     doRegisterEditor(registry, Resource.class, baseEditor).     doRegisterEditor(registry, ContextResource.class, baseEditor).     doRegisterEditor(registry, InputStream.class, new InputStreamEditor(baseEditor)).     doRegisterEditor(registry, InputSource.class, new InputSourceEditor(baseEditor)).     doRegisterEditor(registry, File.class, new FileEditor(baseEditor)).     doRegisterEditor(registry, Path.class, new PathEditor(baseEditor)).     doRegisterEditor(registry, Reader.class, new ReaderEditor(baseEditor)).     doRegisterEditor(registry, URL.class, new URLEditor(baseEditor)).     ClassLoader classLoader = this.resourceLoader.getClassLoader().     doRegisterEditor(registry, URI.class, new URIEditor(classLoader)).     doRegisterEditor(registry, Class.class, new ClassEditor(classLoader)).     doRegisterEditor(registry, Class[].class, new ClassArrayEditor(classLoader)).     if (this.resourceLoader instanceof ResourcePatternResolver) {         doRegisterEditor(registry, Resource[].class, new ResourceArrayPropertyEditor((ResourcePatternResolver) this.resourceLoader, this.propertyResolver)).     } }
true;private;3;8;/**  * Override default editor, if possible (since that's what we really mean to do here).  * otherwise register as a custom editor.  */ ;/**  * Override default editor, if possible (since that's what we really mean to do here).  * otherwise register as a custom editor.  */ private void doRegisterEditor(PropertyEditorRegistry registry, Class<?> requiredType, PropertyEditor editor) {     if (registry instanceof PropertyEditorRegistrySupport) {         ((PropertyEditorRegistrySupport) registry).overrideDefaultEditor(requiredType, editor).     } else {         registry.registerCustomEditor(requiredType, editor).     } }
