commented;modifiers;parameterAmount;loc;comment;code
false;public;2;32;;@Override @Nullable public InputSource resolveEntity(String publicId, @Nullable String systemId) throws IOException {     if (logger.isTraceEnabled()) {         logger.trace("Trying to resolve XML entity with public id [" + publicId + "] and system id [" + systemId + "]").     }     if (systemId != null) {         String resourceLocation = getSchemaMappings().get(systemId).         if (resourceLocation != null) {             Resource resource = new ClassPathResource(resourceLocation, this.classLoader).             try {                 InputSource source = new InputSource(resource.getInputStream()).                 source.setPublicId(publicId).                 source.setSystemId(systemId).                 if (logger.isTraceEnabled()) {                     logger.trace("Found XML schema [" + systemId + "] in classpath: " + resourceLocation).                 }                 return source.             } catch (FileNotFoundException ex) {                 if (logger.isDebugEnabled()) {                     logger.debug("Could not find XML schema [" + systemId + "]: " + resource, ex).                 }             }         }     }     // Fall back to the parser's default behavior.     return null. }
true;private;0;28;/**  * Load the specified schema mappings lazily.  */ ;/**  * Load the specified schema mappings lazily.  */ private Map<String, String> getSchemaMappings() {     Map<String, String> schemaMappings = this.schemaMappings.     if (schemaMappings == null) {         synchronized (this) {             schemaMappings = this.schemaMappings.             if (schemaMappings == null) {                 if (logger.isTraceEnabled()) {                     logger.trace("Loading schema mappings from [" + this.schemaMappingsLocation + "]").                 }                 try {                     Properties mappings = PropertiesLoaderUtils.loadAllProperties(this.schemaMappingsLocation, this.classLoader).                     if (logger.isTraceEnabled()) {                         logger.trace("Loaded schema mappings: " + mappings).                     }                     schemaMappings = new ConcurrentHashMap<>(mappings.size()).                     CollectionUtils.mergePropertiesIntoMap(mappings, schemaMappings).                     this.schemaMappings = schemaMappings.                 } catch (IOException ex) {                     throw new IllegalStateException("Unable to load schema mappings from location [" + this.schemaMappingsLocation + "]", ex).                 }             }         }     }     return schemaMappings. }
false;public;0;4;;@Override public String toString() {     return "EntityResolver using schema mappings " + getSchemaMappings(). }
