# id;timestamp;commentText;codeText;commentWords;codeWords
PluggableSchemaResolver -> public PluggableSchemaResolver(@Nullable ClassLoader classLoader, String schemaMappingsLocation);1495868221;Loads the schema URL -> schema file location mappings using the given_mapping file pattern._@param classLoader the ClassLoader to use for loading_(can be {@code null}) to use the default ClassLoader)_@param schemaMappingsLocation the location of the file that defines schema mappings_(must not be empty)_@see PropertiesLoaderUtils#loadAllProperties(String, ClassLoader);public PluggableSchemaResolver(@Nullable ClassLoader classLoader, String schemaMappingsLocation) {_		Assert.hasText(schemaMappingsLocation, "'schemaMappingsLocation' must not be empty")__		this.classLoader = classLoader__		this.schemaMappingsLocation = schemaMappingsLocation__	};loads,the,schema,url,schema,file,location,mappings,using,the,given,mapping,file,pattern,param,class,loader,the,class,loader,to,use,for,loading,can,be,code,null,to,use,the,default,class,loader,param,schema,mappings,location,the,location,of,the,file,that,defines,schema,mappings,must,not,be,empty,see,properties,loader,utils,load,all,properties,string,class,loader;public,pluggable,schema,resolver,nullable,class,loader,class,loader,string,schema,mappings,location,assert,has,text,schema,mappings,location,schema,mappings,location,must,not,be,empty,this,class,loader,class,loader,this,schema,mappings,location,schema,mappings,location
PluggableSchemaResolver -> public PluggableSchemaResolver(@Nullable ClassLoader classLoader, String schemaMappingsLocation);1496837955;Loads the schema URL -> schema file location mappings using the given_mapping file pattern._@param classLoader the ClassLoader to use for loading_(can be {@code null}) to use the default ClassLoader)_@param schemaMappingsLocation the location of the file that defines schema mappings_(must not be empty)_@see PropertiesLoaderUtils#loadAllProperties(String, ClassLoader);public PluggableSchemaResolver(@Nullable ClassLoader classLoader, String schemaMappingsLocation) {_		Assert.hasText(schemaMappingsLocation, "'schemaMappingsLocation' must not be empty")__		this.classLoader = classLoader__		this.schemaMappingsLocation = schemaMappingsLocation__	};loads,the,schema,url,schema,file,location,mappings,using,the,given,mapping,file,pattern,param,class,loader,the,class,loader,to,use,for,loading,can,be,code,null,to,use,the,default,class,loader,param,schema,mappings,location,the,location,of,the,file,that,defines,schema,mappings,must,not,be,empty,see,properties,loader,utils,load,all,properties,string,class,loader;public,pluggable,schema,resolver,nullable,class,loader,class,loader,string,schema,mappings,location,assert,has,text,schema,mappings,location,schema,mappings,location,must,not,be,empty,this,class,loader,class,loader,this,schema,mappings,location,schema,mappings,location
PluggableSchemaResolver -> public PluggableSchemaResolver(@Nullable ClassLoader classLoader, String schemaMappingsLocation);1498780456;Loads the schema URL -> schema file location mappings using the given_mapping file pattern._@param classLoader the ClassLoader to use for loading_(can be {@code null}) to use the default ClassLoader)_@param schemaMappingsLocation the location of the file that defines schema mappings_(must not be empty)_@see PropertiesLoaderUtils#loadAllProperties(String, ClassLoader);public PluggableSchemaResolver(@Nullable ClassLoader classLoader, String schemaMappingsLocation) {_		Assert.hasText(schemaMappingsLocation, "'schemaMappingsLocation' must not be empty")__		this.classLoader = classLoader__		this.schemaMappingsLocation = schemaMappingsLocation__	};loads,the,schema,url,schema,file,location,mappings,using,the,given,mapping,file,pattern,param,class,loader,the,class,loader,to,use,for,loading,can,be,code,null,to,use,the,default,class,loader,param,schema,mappings,location,the,location,of,the,file,that,defines,schema,mappings,must,not,be,empty,see,properties,loader,utils,load,all,properties,string,class,loader;public,pluggable,schema,resolver,nullable,class,loader,class,loader,string,schema,mappings,location,assert,has,text,schema,mappings,location,schema,mappings,location,must,not,be,empty,this,class,loader,class,loader,this,schema,mappings,location,schema,mappings,location
PluggableSchemaResolver -> public PluggableSchemaResolver(@Nullable ClassLoader classLoader, String schemaMappingsLocation);1530174524;Loads the schema URL -> schema file location mappings using the given_mapping file pattern._@param classLoader the ClassLoader to use for loading_(can be {@code null}) to use the default ClassLoader)_@param schemaMappingsLocation the location of the file that defines schema mappings_(must not be empty)_@see PropertiesLoaderUtils#loadAllProperties(String, ClassLoader);public PluggableSchemaResolver(@Nullable ClassLoader classLoader, String schemaMappingsLocation) {_		Assert.hasText(schemaMappingsLocation, "'schemaMappingsLocation' must not be empty")__		this.classLoader = classLoader__		this.schemaMappingsLocation = schemaMappingsLocation__	};loads,the,schema,url,schema,file,location,mappings,using,the,given,mapping,file,pattern,param,class,loader,the,class,loader,to,use,for,loading,can,be,code,null,to,use,the,default,class,loader,param,schema,mappings,location,the,location,of,the,file,that,defines,schema,mappings,must,not,be,empty,see,properties,loader,utils,load,all,properties,string,class,loader;public,pluggable,schema,resolver,nullable,class,loader,class,loader,string,schema,mappings,location,assert,has,text,schema,mappings,location,schema,mappings,location,must,not,be,empty,this,class,loader,class,loader,this,schema,mappings,location,schema,mappings,location
PluggableSchemaResolver -> public PluggableSchemaResolver(@Nullable ClassLoader classLoader, String schemaMappingsLocation);1532706365;Loads the schema URL -> schema file location mappings using the given_mapping file pattern._@param classLoader the ClassLoader to use for loading_(can be {@code null}) to use the default ClassLoader)_@param schemaMappingsLocation the location of the file that defines schema mappings_(must not be empty)_@see PropertiesLoaderUtils#loadAllProperties(String, ClassLoader);public PluggableSchemaResolver(@Nullable ClassLoader classLoader, String schemaMappingsLocation) {_		Assert.hasText(schemaMappingsLocation, "'schemaMappingsLocation' must not be empty")__		this.classLoader = classLoader__		this.schemaMappingsLocation = schemaMappingsLocation__	};loads,the,schema,url,schema,file,location,mappings,using,the,given,mapping,file,pattern,param,class,loader,the,class,loader,to,use,for,loading,can,be,code,null,to,use,the,default,class,loader,param,schema,mappings,location,the,location,of,the,file,that,defines,schema,mappings,must,not,be,empty,see,properties,loader,utils,load,all,properties,string,class,loader;public,pluggable,schema,resolver,nullable,class,loader,class,loader,string,schema,mappings,location,assert,has,text,schema,mappings,location,schema,mappings,location,must,not,be,empty,this,class,loader,class,loader,this,schema,mappings,location,schema,mappings,location
PluggableSchemaResolver -> public PluggableSchemaResolver(@Nullable ClassLoader classLoader, String schemaMappingsLocation);1532710698;Loads the schema URL -> schema file location mappings using the given_mapping file pattern._@param classLoader the ClassLoader to use for loading_(can be {@code null}) to use the default ClassLoader)_@param schemaMappingsLocation the location of the file that defines schema mappings_(must not be empty)_@see PropertiesLoaderUtils#loadAllProperties(String, ClassLoader);public PluggableSchemaResolver(@Nullable ClassLoader classLoader, String schemaMappingsLocation) {_		Assert.hasText(schemaMappingsLocation, "'schemaMappingsLocation' must not be empty")__		this.classLoader = classLoader__		this.schemaMappingsLocation = schemaMappingsLocation__	};loads,the,schema,url,schema,file,location,mappings,using,the,given,mapping,file,pattern,param,class,loader,the,class,loader,to,use,for,loading,can,be,code,null,to,use,the,default,class,loader,param,schema,mappings,location,the,location,of,the,file,that,defines,schema,mappings,must,not,be,empty,see,properties,loader,utils,load,all,properties,string,class,loader;public,pluggable,schema,resolver,nullable,class,loader,class,loader,string,schema,mappings,location,assert,has,text,schema,mappings,location,schema,mappings,location,must,not,be,empty,this,class,loader,class,loader,this,schema,mappings,location,schema,mappings,location
PluggableSchemaResolver -> public PluggableSchemaResolver(@Nullable ClassLoader classLoader, String schemaMappingsLocation);1551199835;Loads the schema URL -> schema file location mappings using the given_mapping file pattern._@param classLoader the ClassLoader to use for loading_(can be {@code null}) to use the default ClassLoader)_@param schemaMappingsLocation the location of the file that defines schema mappings_(must not be empty)_@see PropertiesLoaderUtils#loadAllProperties(String, ClassLoader);public PluggableSchemaResolver(@Nullable ClassLoader classLoader, String schemaMappingsLocation) {_		Assert.hasText(schemaMappingsLocation, "'schemaMappingsLocation' must not be empty")__		this.classLoader = classLoader__		this.schemaMappingsLocation = schemaMappingsLocation__	};loads,the,schema,url,schema,file,location,mappings,using,the,given,mapping,file,pattern,param,class,loader,the,class,loader,to,use,for,loading,can,be,code,null,to,use,the,default,class,loader,param,schema,mappings,location,the,location,of,the,file,that,defines,schema,mappings,must,not,be,empty,see,properties,loader,utils,load,all,properties,string,class,loader;public,pluggable,schema,resolver,nullable,class,loader,class,loader,string,schema,mappings,location,assert,has,text,schema,mappings,location,schema,mappings,location,must,not,be,empty,this,class,loader,class,loader,this,schema,mappings,location,schema,mappings,location
PluggableSchemaResolver -> public PluggableSchemaResolver(@Nullable ClassLoader classLoader, String schemaMappingsLocation);1551272591;Loads the schema URL -> schema file location mappings using the given_mapping file pattern._@param classLoader the ClassLoader to use for loading_(can be {@code null}) to use the default ClassLoader)_@param schemaMappingsLocation the location of the file that defines schema mappings_(must not be empty)_@see PropertiesLoaderUtils#loadAllProperties(String, ClassLoader);public PluggableSchemaResolver(@Nullable ClassLoader classLoader, String schemaMappingsLocation) {_		Assert.hasText(schemaMappingsLocation, "'schemaMappingsLocation' must not be empty")__		this.classLoader = classLoader__		this.schemaMappingsLocation = schemaMappingsLocation__	};loads,the,schema,url,schema,file,location,mappings,using,the,given,mapping,file,pattern,param,class,loader,the,class,loader,to,use,for,loading,can,be,code,null,to,use,the,default,class,loader,param,schema,mappings,location,the,location,of,the,file,that,defines,schema,mappings,must,not,be,empty,see,properties,loader,utils,load,all,properties,string,class,loader;public,pluggable,schema,resolver,nullable,class,loader,class,loader,string,schema,mappings,location,assert,has,text,schema,mappings,location,schema,mappings,location,must,not,be,empty,this,class,loader,class,loader,this,schema,mappings,location,schema,mappings,location
PluggableSchemaResolver -> public PluggableSchemaResolver(ClassLoader classLoader);1328020251;Loads the schema URL -> schema file location mappings using the default_mapping file pattern "META-INF/spring.schemas"._@param classLoader the ClassLoader to use for loading_(can be <code>null</code>) to use the default ClassLoader)_@see PropertiesLoaderUtils#loadAllProperties(String, ClassLoader);public PluggableSchemaResolver(ClassLoader classLoader) {_		this.classLoader = classLoader__		this.schemaMappingsLocation = DEFAULT_SCHEMA_MAPPINGS_LOCATION__	};loads,the,schema,url,schema,file,location,mappings,using,the,default,mapping,file,pattern,meta,inf,spring,schemas,param,class,loader,the,class,loader,to,use,for,loading,can,be,code,null,code,to,use,the,default,class,loader,see,properties,loader,utils,load,all,properties,string,class,loader;public,pluggable,schema,resolver,class,loader,class,loader,this,class,loader,class,loader,this,schema,mappings,location
PluggableSchemaResolver -> public PluggableSchemaResolver(ClassLoader classLoader);1355352386;Loads the schema URL -> schema file location mappings using the default_mapping file pattern "META-INF/spring.schemas"._@param classLoader the ClassLoader to use for loading_(can be <code>null</code>) to use the default ClassLoader)_@see PropertiesLoaderUtils#loadAllProperties(String, ClassLoader);public PluggableSchemaResolver(ClassLoader classLoader) {_		this.classLoader = classLoader__		this.schemaMappingsLocation = DEFAULT_SCHEMA_MAPPINGS_LOCATION__	};loads,the,schema,url,schema,file,location,mappings,using,the,default,mapping,file,pattern,meta,inf,spring,schemas,param,class,loader,the,class,loader,to,use,for,loading,can,be,code,null,code,to,use,the,default,class,loader,see,properties,loader,utils,load,all,properties,string,class,loader;public,pluggable,schema,resolver,class,loader,class,loader,this,class,loader,class,loader,this,schema,mappings,location
PluggableSchemaResolver -> public PluggableSchemaResolver(ClassLoader classLoader);1356735495;Loads the schema URL -> schema file location mappings using the default_mapping file pattern "META-INF/spring.schemas"._@param classLoader the ClassLoader to use for loading_(can be {@code null}) to use the default ClassLoader)_@see PropertiesLoaderUtils#loadAllProperties(String, ClassLoader);public PluggableSchemaResolver(ClassLoader classLoader) {_		this.classLoader = classLoader__		this.schemaMappingsLocation = DEFAULT_SCHEMA_MAPPINGS_LOCATION__	};loads,the,schema,url,schema,file,location,mappings,using,the,default,mapping,file,pattern,meta,inf,spring,schemas,param,class,loader,the,class,loader,to,use,for,loading,can,be,code,null,to,use,the,default,class,loader,see,properties,loader,utils,load,all,properties,string,class,loader;public,pluggable,schema,resolver,class,loader,class,loader,this,class,loader,class,loader,this,schema,mappings,location
PluggableSchemaResolver -> public PluggableSchemaResolver(ClassLoader classLoader);1357119239;Loads the schema URL -> schema file location mappings using the default_mapping file pattern "META-INF/spring.schemas"._@param classLoader the ClassLoader to use for loading_(can be {@code null}) to use the default ClassLoader)_@see PropertiesLoaderUtils#loadAllProperties(String, ClassLoader);public PluggableSchemaResolver(ClassLoader classLoader) {_		this.classLoader = classLoader__		this.schemaMappingsLocation = DEFAULT_SCHEMA_MAPPINGS_LOCATION__	};loads,the,schema,url,schema,file,location,mappings,using,the,default,mapping,file,pattern,meta,inf,spring,schemas,param,class,loader,the,class,loader,to,use,for,loading,can,be,code,null,to,use,the,default,class,loader,see,properties,loader,utils,load,all,properties,string,class,loader;public,pluggable,schema,resolver,class,loader,class,loader,this,class,loader,class,loader,this,schema,mappings,location
PluggableSchemaResolver -> public PluggableSchemaResolver(ClassLoader classLoader);1368482696;Loads the schema URL -> schema file location mappings using the default_mapping file pattern "META-INF/spring.schemas"._@param classLoader the ClassLoader to use for loading_(can be {@code null}) to use the default ClassLoader)_@see PropertiesLoaderUtils#loadAllProperties(String, ClassLoader);public PluggableSchemaResolver(ClassLoader classLoader) {_		this.classLoader = classLoader__		this.schemaMappingsLocation = DEFAULT_SCHEMA_MAPPINGS_LOCATION__	};loads,the,schema,url,schema,file,location,mappings,using,the,default,mapping,file,pattern,meta,inf,spring,schemas,param,class,loader,the,class,loader,to,use,for,loading,can,be,code,null,to,use,the,default,class,loader,see,properties,loader,utils,load,all,properties,string,class,loader;public,pluggable,schema,resolver,class,loader,class,loader,this,class,loader,class,loader,this,schema,mappings,location
PluggableSchemaResolver -> public PluggableSchemaResolver(ClassLoader classLoader);1467730834;Loads the schema URL -> schema file location mappings using the default_mapping file pattern "META-INF/spring.schemas"._@param classLoader the ClassLoader to use for loading_(can be {@code null}) to use the default ClassLoader)_@see PropertiesLoaderUtils#loadAllProperties(String, ClassLoader);public PluggableSchemaResolver(ClassLoader classLoader) {_		this.classLoader = classLoader__		this.schemaMappingsLocation = DEFAULT_SCHEMA_MAPPINGS_LOCATION__	};loads,the,schema,url,schema,file,location,mappings,using,the,default,mapping,file,pattern,meta,inf,spring,schemas,param,class,loader,the,class,loader,to,use,for,loading,can,be,code,null,to,use,the,default,class,loader,see,properties,loader,utils,load,all,properties,string,class,loader;public,pluggable,schema,resolver,class,loader,class,loader,this,class,loader,class,loader,this,schema,mappings,location
PluggableSchemaResolver -> public PluggableSchemaResolver(ClassLoader classLoader, String schemaMappingsLocation);1328020251;Loads the schema URL -> schema file location mappings using the given_mapping file pattern._@param classLoader the ClassLoader to use for loading_(can be <code>null</code>) to use the default ClassLoader)_@param schemaMappingsLocation the location of the file that defines schema mappings_(must not be empty)_@see PropertiesLoaderUtils#loadAllProperties(String, ClassLoader);public PluggableSchemaResolver(ClassLoader classLoader, String schemaMappingsLocation) {_		Assert.hasText(schemaMappingsLocation, "'schemaMappingsLocation' must not be empty")__		this.classLoader = classLoader__		this.schemaMappingsLocation = schemaMappingsLocation__	};loads,the,schema,url,schema,file,location,mappings,using,the,given,mapping,file,pattern,param,class,loader,the,class,loader,to,use,for,loading,can,be,code,null,code,to,use,the,default,class,loader,param,schema,mappings,location,the,location,of,the,file,that,defines,schema,mappings,must,not,be,empty,see,properties,loader,utils,load,all,properties,string,class,loader;public,pluggable,schema,resolver,class,loader,class,loader,string,schema,mappings,location,assert,has,text,schema,mappings,location,schema,mappings,location,must,not,be,empty,this,class,loader,class,loader,this,schema,mappings,location,schema,mappings,location
PluggableSchemaResolver -> public PluggableSchemaResolver(ClassLoader classLoader, String schemaMappingsLocation);1355352386;Loads the schema URL -> schema file location mappings using the given_mapping file pattern._@param classLoader the ClassLoader to use for loading_(can be <code>null</code>) to use the default ClassLoader)_@param schemaMappingsLocation the location of the file that defines schema mappings_(must not be empty)_@see PropertiesLoaderUtils#loadAllProperties(String, ClassLoader);public PluggableSchemaResolver(ClassLoader classLoader, String schemaMappingsLocation) {_		Assert.hasText(schemaMappingsLocation, "'schemaMappingsLocation' must not be empty")__		this.classLoader = classLoader__		this.schemaMappingsLocation = schemaMappingsLocation__	};loads,the,schema,url,schema,file,location,mappings,using,the,given,mapping,file,pattern,param,class,loader,the,class,loader,to,use,for,loading,can,be,code,null,code,to,use,the,default,class,loader,param,schema,mappings,location,the,location,of,the,file,that,defines,schema,mappings,must,not,be,empty,see,properties,loader,utils,load,all,properties,string,class,loader;public,pluggable,schema,resolver,class,loader,class,loader,string,schema,mappings,location,assert,has,text,schema,mappings,location,schema,mappings,location,must,not,be,empty,this,class,loader,class,loader,this,schema,mappings,location,schema,mappings,location
PluggableSchemaResolver -> public PluggableSchemaResolver(ClassLoader classLoader, String schemaMappingsLocation);1356735495;Loads the schema URL -> schema file location mappings using the given_mapping file pattern._@param classLoader the ClassLoader to use for loading_(can be {@code null}) to use the default ClassLoader)_@param schemaMappingsLocation the location of the file that defines schema mappings_(must not be empty)_@see PropertiesLoaderUtils#loadAllProperties(String, ClassLoader);public PluggableSchemaResolver(ClassLoader classLoader, String schemaMappingsLocation) {_		Assert.hasText(schemaMappingsLocation, "'schemaMappingsLocation' must not be empty")__		this.classLoader = classLoader__		this.schemaMappingsLocation = schemaMappingsLocation__	};loads,the,schema,url,schema,file,location,mappings,using,the,given,mapping,file,pattern,param,class,loader,the,class,loader,to,use,for,loading,can,be,code,null,to,use,the,default,class,loader,param,schema,mappings,location,the,location,of,the,file,that,defines,schema,mappings,must,not,be,empty,see,properties,loader,utils,load,all,properties,string,class,loader;public,pluggable,schema,resolver,class,loader,class,loader,string,schema,mappings,location,assert,has,text,schema,mappings,location,schema,mappings,location,must,not,be,empty,this,class,loader,class,loader,this,schema,mappings,location,schema,mappings,location
PluggableSchemaResolver -> public PluggableSchemaResolver(ClassLoader classLoader, String schemaMappingsLocation);1357119239;Loads the schema URL -> schema file location mappings using the given_mapping file pattern._@param classLoader the ClassLoader to use for loading_(can be {@code null}) to use the default ClassLoader)_@param schemaMappingsLocation the location of the file that defines schema mappings_(must not be empty)_@see PropertiesLoaderUtils#loadAllProperties(String, ClassLoader);public PluggableSchemaResolver(ClassLoader classLoader, String schemaMappingsLocation) {_		Assert.hasText(schemaMappingsLocation, "'schemaMappingsLocation' must not be empty")__		this.classLoader = classLoader__		this.schemaMappingsLocation = schemaMappingsLocation__	};loads,the,schema,url,schema,file,location,mappings,using,the,given,mapping,file,pattern,param,class,loader,the,class,loader,to,use,for,loading,can,be,code,null,to,use,the,default,class,loader,param,schema,mappings,location,the,location,of,the,file,that,defines,schema,mappings,must,not,be,empty,see,properties,loader,utils,load,all,properties,string,class,loader;public,pluggable,schema,resolver,class,loader,class,loader,string,schema,mappings,location,assert,has,text,schema,mappings,location,schema,mappings,location,must,not,be,empty,this,class,loader,class,loader,this,schema,mappings,location,schema,mappings,location
PluggableSchemaResolver -> public PluggableSchemaResolver(ClassLoader classLoader, String schemaMappingsLocation);1368482696;Loads the schema URL -> schema file location mappings using the given_mapping file pattern._@param classLoader the ClassLoader to use for loading_(can be {@code null}) to use the default ClassLoader)_@param schemaMappingsLocation the location of the file that defines schema mappings_(must not be empty)_@see PropertiesLoaderUtils#loadAllProperties(String, ClassLoader);public PluggableSchemaResolver(ClassLoader classLoader, String schemaMappingsLocation) {_		Assert.hasText(schemaMappingsLocation, "'schemaMappingsLocation' must not be empty")__		this.classLoader = classLoader__		this.schemaMappingsLocation = schemaMappingsLocation__	};loads,the,schema,url,schema,file,location,mappings,using,the,given,mapping,file,pattern,param,class,loader,the,class,loader,to,use,for,loading,can,be,code,null,to,use,the,default,class,loader,param,schema,mappings,location,the,location,of,the,file,that,defines,schema,mappings,must,not,be,empty,see,properties,loader,utils,load,all,properties,string,class,loader;public,pluggable,schema,resolver,class,loader,class,loader,string,schema,mappings,location,assert,has,text,schema,mappings,location,schema,mappings,location,must,not,be,empty,this,class,loader,class,loader,this,schema,mappings,location,schema,mappings,location
PluggableSchemaResolver -> public PluggableSchemaResolver(ClassLoader classLoader, String schemaMappingsLocation);1467730834;Loads the schema URL -> schema file location mappings using the given_mapping file pattern._@param classLoader the ClassLoader to use for loading_(can be {@code null}) to use the default ClassLoader)_@param schemaMappingsLocation the location of the file that defines schema mappings_(must not be empty)_@see PropertiesLoaderUtils#loadAllProperties(String, ClassLoader);public PluggableSchemaResolver(ClassLoader classLoader, String schemaMappingsLocation) {_		Assert.hasText(schemaMappingsLocation, "'schemaMappingsLocation' must not be empty")__		this.classLoader = classLoader__		this.schemaMappingsLocation = schemaMappingsLocation__	};loads,the,schema,url,schema,file,location,mappings,using,the,given,mapping,file,pattern,param,class,loader,the,class,loader,to,use,for,loading,can,be,code,null,to,use,the,default,class,loader,param,schema,mappings,location,the,location,of,the,file,that,defines,schema,mappings,must,not,be,empty,see,properties,loader,utils,load,all,properties,string,class,loader;public,pluggable,schema,resolver,class,loader,class,loader,string,schema,mappings,location,assert,has,text,schema,mappings,location,schema,mappings,location,must,not,be,empty,this,class,loader,class,loader,this,schema,mappings,location,schema,mappings,location
PluggableSchemaResolver -> public PluggableSchemaResolver(@Nullable ClassLoader classLoader);1495868221;Loads the schema URL -> schema file location mappings using the default_mapping file pattern "META-INF/spring.schemas"._@param classLoader the ClassLoader to use for loading_(can be {@code null}) to use the default ClassLoader)_@see PropertiesLoaderUtils#loadAllProperties(String, ClassLoader);public PluggableSchemaResolver(@Nullable ClassLoader classLoader) {_		this.classLoader = classLoader__		this.schemaMappingsLocation = DEFAULT_SCHEMA_MAPPINGS_LOCATION__	};loads,the,schema,url,schema,file,location,mappings,using,the,default,mapping,file,pattern,meta,inf,spring,schemas,param,class,loader,the,class,loader,to,use,for,loading,can,be,code,null,to,use,the,default,class,loader,see,properties,loader,utils,load,all,properties,string,class,loader;public,pluggable,schema,resolver,nullable,class,loader,class,loader,this,class,loader,class,loader,this,schema,mappings,location
PluggableSchemaResolver -> public PluggableSchemaResolver(@Nullable ClassLoader classLoader);1496837955;Loads the schema URL -> schema file location mappings using the default_mapping file pattern "META-INF/spring.schemas"._@param classLoader the ClassLoader to use for loading_(can be {@code null}) to use the default ClassLoader)_@see PropertiesLoaderUtils#loadAllProperties(String, ClassLoader);public PluggableSchemaResolver(@Nullable ClassLoader classLoader) {_		this.classLoader = classLoader__		this.schemaMappingsLocation = DEFAULT_SCHEMA_MAPPINGS_LOCATION__	};loads,the,schema,url,schema,file,location,mappings,using,the,default,mapping,file,pattern,meta,inf,spring,schemas,param,class,loader,the,class,loader,to,use,for,loading,can,be,code,null,to,use,the,default,class,loader,see,properties,loader,utils,load,all,properties,string,class,loader;public,pluggable,schema,resolver,nullable,class,loader,class,loader,this,class,loader,class,loader,this,schema,mappings,location
PluggableSchemaResolver -> public PluggableSchemaResolver(@Nullable ClassLoader classLoader);1498780456;Loads the schema URL -> schema file location mappings using the default_mapping file pattern "META-INF/spring.schemas"._@param classLoader the ClassLoader to use for loading_(can be {@code null}) to use the default ClassLoader)_@see PropertiesLoaderUtils#loadAllProperties(String, ClassLoader);public PluggableSchemaResolver(@Nullable ClassLoader classLoader) {_		this.classLoader = classLoader__		this.schemaMappingsLocation = DEFAULT_SCHEMA_MAPPINGS_LOCATION__	};loads,the,schema,url,schema,file,location,mappings,using,the,default,mapping,file,pattern,meta,inf,spring,schemas,param,class,loader,the,class,loader,to,use,for,loading,can,be,code,null,to,use,the,default,class,loader,see,properties,loader,utils,load,all,properties,string,class,loader;public,pluggable,schema,resolver,nullable,class,loader,class,loader,this,class,loader,class,loader,this,schema,mappings,location
PluggableSchemaResolver -> public PluggableSchemaResolver(@Nullable ClassLoader classLoader);1530174524;Loads the schema URL -> schema file location mappings using the default_mapping file pattern "META-INF/spring.schemas"._@param classLoader the ClassLoader to use for loading_(can be {@code null}) to use the default ClassLoader)_@see PropertiesLoaderUtils#loadAllProperties(String, ClassLoader);public PluggableSchemaResolver(@Nullable ClassLoader classLoader) {_		this.classLoader = classLoader__		this.schemaMappingsLocation = DEFAULT_SCHEMA_MAPPINGS_LOCATION__	};loads,the,schema,url,schema,file,location,mappings,using,the,default,mapping,file,pattern,meta,inf,spring,schemas,param,class,loader,the,class,loader,to,use,for,loading,can,be,code,null,to,use,the,default,class,loader,see,properties,loader,utils,load,all,properties,string,class,loader;public,pluggable,schema,resolver,nullable,class,loader,class,loader,this,class,loader,class,loader,this,schema,mappings,location
PluggableSchemaResolver -> public PluggableSchemaResolver(@Nullable ClassLoader classLoader);1532706365;Loads the schema URL -> schema file location mappings using the default_mapping file pattern "META-INF/spring.schemas"._@param classLoader the ClassLoader to use for loading_(can be {@code null}) to use the default ClassLoader)_@see PropertiesLoaderUtils#loadAllProperties(String, ClassLoader);public PluggableSchemaResolver(@Nullable ClassLoader classLoader) {_		this.classLoader = classLoader__		this.schemaMappingsLocation = DEFAULT_SCHEMA_MAPPINGS_LOCATION__	};loads,the,schema,url,schema,file,location,mappings,using,the,default,mapping,file,pattern,meta,inf,spring,schemas,param,class,loader,the,class,loader,to,use,for,loading,can,be,code,null,to,use,the,default,class,loader,see,properties,loader,utils,load,all,properties,string,class,loader;public,pluggable,schema,resolver,nullable,class,loader,class,loader,this,class,loader,class,loader,this,schema,mappings,location
PluggableSchemaResolver -> public PluggableSchemaResolver(@Nullable ClassLoader classLoader);1532710698;Loads the schema URL -> schema file location mappings using the default_mapping file pattern "META-INF/spring.schemas"._@param classLoader the ClassLoader to use for loading_(can be {@code null}) to use the default ClassLoader)_@see PropertiesLoaderUtils#loadAllProperties(String, ClassLoader);public PluggableSchemaResolver(@Nullable ClassLoader classLoader) {_		this.classLoader = classLoader__		this.schemaMappingsLocation = DEFAULT_SCHEMA_MAPPINGS_LOCATION__	};loads,the,schema,url,schema,file,location,mappings,using,the,default,mapping,file,pattern,meta,inf,spring,schemas,param,class,loader,the,class,loader,to,use,for,loading,can,be,code,null,to,use,the,default,class,loader,see,properties,loader,utils,load,all,properties,string,class,loader;public,pluggable,schema,resolver,nullable,class,loader,class,loader,this,class,loader,class,loader,this,schema,mappings,location
PluggableSchemaResolver -> public PluggableSchemaResolver(@Nullable ClassLoader classLoader);1551199835;Loads the schema URL -> schema file location mappings using the default_mapping file pattern "META-INF/spring.schemas"._@param classLoader the ClassLoader to use for loading_(can be {@code null}) to use the default ClassLoader)_@see PropertiesLoaderUtils#loadAllProperties(String, ClassLoader);public PluggableSchemaResolver(@Nullable ClassLoader classLoader) {_		this.classLoader = classLoader__		this.schemaMappingsLocation = DEFAULT_SCHEMA_MAPPINGS_LOCATION__	};loads,the,schema,url,schema,file,location,mappings,using,the,default,mapping,file,pattern,meta,inf,spring,schemas,param,class,loader,the,class,loader,to,use,for,loading,can,be,code,null,to,use,the,default,class,loader,see,properties,loader,utils,load,all,properties,string,class,loader;public,pluggable,schema,resolver,nullable,class,loader,class,loader,this,class,loader,class,loader,this,schema,mappings,location
PluggableSchemaResolver -> public PluggableSchemaResolver(@Nullable ClassLoader classLoader);1551272591;Loads the schema URL -> schema file location mappings using the default_mapping file pattern "META-INF/spring.schemas"._@param classLoader the ClassLoader to use for loading_(can be {@code null}) to use the default ClassLoader)_@see PropertiesLoaderUtils#loadAllProperties(String, ClassLoader);public PluggableSchemaResolver(@Nullable ClassLoader classLoader) {_		this.classLoader = classLoader__		this.schemaMappingsLocation = DEFAULT_SCHEMA_MAPPINGS_LOCATION__	};loads,the,schema,url,schema,file,location,mappings,using,the,default,mapping,file,pattern,meta,inf,spring,schemas,param,class,loader,the,class,loader,to,use,for,loading,can,be,code,null,to,use,the,default,class,loader,see,properties,loader,utils,load,all,properties,string,class,loader;public,pluggable,schema,resolver,nullable,class,loader,class,loader,this,class,loader,class,loader,this,schema,mappings,location
PluggableSchemaResolver -> private Map<String, String> getSchemaMappings();1328020251;Load the specified schema mappings lazily.;private Map<String, String> getSchemaMappings() {_		if (this.schemaMappings == null) {_			synchronized (this) {_				if (this.schemaMappings == null) {_					if (logger.isDebugEnabled()) {_						logger.debug("Loading schema mappings from [" + this.schemaMappingsLocation + "]")__					}_					try {_						Properties mappings =_								PropertiesLoaderUtils.loadAllProperties(this.schemaMappingsLocation, this.classLoader)__						if (logger.isDebugEnabled()) {_							logger.debug("Loaded schema mappings: " + mappings)__						}_						Map<String, String> schemaMappings = new ConcurrentHashMap<String, String>()__						CollectionUtils.mergePropertiesIntoMap(mappings, schemaMappings)__						this.schemaMappings = schemaMappings__					}_					catch (IOException ex) {_						throw new IllegalStateException(_								"Unable to load schema mappings from location [" + this.schemaMappingsLocation + "]", ex)__					}_				}_			}_		}_		return this.schemaMappings__	};load,the,specified,schema,mappings,lazily;private,map,string,string,get,schema,mappings,if,this,schema,mappings,null,synchronized,this,if,this,schema,mappings,null,if,logger,is,debug,enabled,logger,debug,loading,schema,mappings,from,this,schema,mappings,location,try,properties,mappings,properties,loader,utils,load,all,properties,this,schema,mappings,location,this,class,loader,if,logger,is,debug,enabled,logger,debug,loaded,schema,mappings,mappings,map,string,string,schema,mappings,new,concurrent,hash,map,string,string,collection,utils,merge,properties,into,map,mappings,schema,mappings,this,schema,mappings,schema,mappings,catch,ioexception,ex,throw,new,illegal,state,exception,unable,to,load,schema,mappings,from,location,this,schema,mappings,location,ex,return,this,schema,mappings
PluggableSchemaResolver -> private Map<String, String> getSchemaMappings();1355352386;Load the specified schema mappings lazily.;private Map<String, String> getSchemaMappings() {_		if (this.schemaMappings == null) {_			synchronized (this) {_				if (this.schemaMappings == null) {_					if (logger.isDebugEnabled()) {_						logger.debug("Loading schema mappings from [" + this.schemaMappingsLocation + "]")__					}_					try {_						Properties mappings =_								PropertiesLoaderUtils.loadAllProperties(this.schemaMappingsLocation, this.classLoader)__						if (logger.isDebugEnabled()) {_							logger.debug("Loaded schema mappings: " + mappings)__						}_						Map<String, String> schemaMappings = new ConcurrentHashMap<String, String>(mappings.size())__						CollectionUtils.mergePropertiesIntoMap(mappings, schemaMappings)__						this.schemaMappings = schemaMappings__					}_					catch (IOException ex) {_						throw new IllegalStateException(_								"Unable to load schema mappings from location [" + this.schemaMappingsLocation + "]", ex)__					}_				}_			}_		}_		return this.schemaMappings__	};load,the,specified,schema,mappings,lazily;private,map,string,string,get,schema,mappings,if,this,schema,mappings,null,synchronized,this,if,this,schema,mappings,null,if,logger,is,debug,enabled,logger,debug,loading,schema,mappings,from,this,schema,mappings,location,try,properties,mappings,properties,loader,utils,load,all,properties,this,schema,mappings,location,this,class,loader,if,logger,is,debug,enabled,logger,debug,loaded,schema,mappings,mappings,map,string,string,schema,mappings,new,concurrent,hash,map,string,string,mappings,size,collection,utils,merge,properties,into,map,mappings,schema,mappings,this,schema,mappings,schema,mappings,catch,ioexception,ex,throw,new,illegal,state,exception,unable,to,load,schema,mappings,from,location,this,schema,mappings,location,ex,return,this,schema,mappings
PluggableSchemaResolver -> private Map<String, String> getSchemaMappings();1356735495;Load the specified schema mappings lazily.;private Map<String, String> getSchemaMappings() {_		if (this.schemaMappings == null) {_			synchronized (this) {_				if (this.schemaMappings == null) {_					if (logger.isDebugEnabled()) {_						logger.debug("Loading schema mappings from [" + this.schemaMappingsLocation + "]")__					}_					try {_						Properties mappings =_								PropertiesLoaderUtils.loadAllProperties(this.schemaMappingsLocation, this.classLoader)__						if (logger.isDebugEnabled()) {_							logger.debug("Loaded schema mappings: " + mappings)__						}_						Map<String, String> schemaMappings = new ConcurrentHashMap<String, String>(mappings.size())__						CollectionUtils.mergePropertiesIntoMap(mappings, schemaMappings)__						this.schemaMappings = schemaMappings__					}_					catch (IOException ex) {_						throw new IllegalStateException(_								"Unable to load schema mappings from location [" + this.schemaMappingsLocation + "]", ex)__					}_				}_			}_		}_		return this.schemaMappings__	};load,the,specified,schema,mappings,lazily;private,map,string,string,get,schema,mappings,if,this,schema,mappings,null,synchronized,this,if,this,schema,mappings,null,if,logger,is,debug,enabled,logger,debug,loading,schema,mappings,from,this,schema,mappings,location,try,properties,mappings,properties,loader,utils,load,all,properties,this,schema,mappings,location,this,class,loader,if,logger,is,debug,enabled,logger,debug,loaded,schema,mappings,mappings,map,string,string,schema,mappings,new,concurrent,hash,map,string,string,mappings,size,collection,utils,merge,properties,into,map,mappings,schema,mappings,this,schema,mappings,schema,mappings,catch,ioexception,ex,throw,new,illegal,state,exception,unable,to,load,schema,mappings,from,location,this,schema,mappings,location,ex,return,this,schema,mappings
PluggableSchemaResolver -> private Map<String, String> getSchemaMappings();1357119239;Load the specified schema mappings lazily.;private Map<String, String> getSchemaMappings() {_		if (this.schemaMappings == null) {_			synchronized (this) {_				if (this.schemaMappings == null) {_					if (logger.isDebugEnabled()) {_						logger.debug("Loading schema mappings from [" + this.schemaMappingsLocation + "]")__					}_					try {_						Properties mappings =_								PropertiesLoaderUtils.loadAllProperties(this.schemaMappingsLocation, this.classLoader)__						if (logger.isDebugEnabled()) {_							logger.debug("Loaded schema mappings: " + mappings)__						}_						Map<String, String> schemaMappings = new ConcurrentHashMap<String, String>(mappings.size())__						CollectionUtils.mergePropertiesIntoMap(mappings, schemaMappings)__						this.schemaMappings = schemaMappings__					}_					catch (IOException ex) {_						throw new IllegalStateException(_								"Unable to load schema mappings from location [" + this.schemaMappingsLocation + "]", ex)__					}_				}_			}_		}_		return this.schemaMappings__	};load,the,specified,schema,mappings,lazily;private,map,string,string,get,schema,mappings,if,this,schema,mappings,null,synchronized,this,if,this,schema,mappings,null,if,logger,is,debug,enabled,logger,debug,loading,schema,mappings,from,this,schema,mappings,location,try,properties,mappings,properties,loader,utils,load,all,properties,this,schema,mappings,location,this,class,loader,if,logger,is,debug,enabled,logger,debug,loaded,schema,mappings,mappings,map,string,string,schema,mappings,new,concurrent,hash,map,string,string,mappings,size,collection,utils,merge,properties,into,map,mappings,schema,mappings,this,schema,mappings,schema,mappings,catch,ioexception,ex,throw,new,illegal,state,exception,unable,to,load,schema,mappings,from,location,this,schema,mappings,location,ex,return,this,schema,mappings
PluggableSchemaResolver -> private Map<String, String> getSchemaMappings();1368482696;Load the specified schema mappings lazily.;private Map<String, String> getSchemaMappings() {_		if (this.schemaMappings == null) {_			synchronized (this) {_				if (this.schemaMappings == null) {_					if (logger.isDebugEnabled()) {_						logger.debug("Loading schema mappings from [" + this.schemaMappingsLocation + "]")__					}_					try {_						Properties mappings =_								PropertiesLoaderUtils.loadAllProperties(this.schemaMappingsLocation, this.classLoader)__						if (logger.isDebugEnabled()) {_							logger.debug("Loaded schema mappings: " + mappings)__						}_						Map<String, String> schemaMappings = new ConcurrentHashMap<String, String>(mappings.size())__						CollectionUtils.mergePropertiesIntoMap(mappings, schemaMappings)__						this.schemaMappings = schemaMappings__					}_					catch (IOException ex) {_						throw new IllegalStateException(_								"Unable to load schema mappings from location [" + this.schemaMappingsLocation + "]", ex)__					}_				}_			}_		}_		return this.schemaMappings__	};load,the,specified,schema,mappings,lazily;private,map,string,string,get,schema,mappings,if,this,schema,mappings,null,synchronized,this,if,this,schema,mappings,null,if,logger,is,debug,enabled,logger,debug,loading,schema,mappings,from,this,schema,mappings,location,try,properties,mappings,properties,loader,utils,load,all,properties,this,schema,mappings,location,this,class,loader,if,logger,is,debug,enabled,logger,debug,loaded,schema,mappings,mappings,map,string,string,schema,mappings,new,concurrent,hash,map,string,string,mappings,size,collection,utils,merge,properties,into,map,mappings,schema,mappings,this,schema,mappings,schema,mappings,catch,ioexception,ex,throw,new,illegal,state,exception,unable,to,load,schema,mappings,from,location,this,schema,mappings,location,ex,return,this,schema,mappings
PluggableSchemaResolver -> private Map<String, String> getSchemaMappings();1467730834;Load the specified schema mappings lazily.;private Map<String, String> getSchemaMappings() {_		if (this.schemaMappings == null) {_			synchronized (this) {_				if (this.schemaMappings == null) {_					if (logger.isDebugEnabled()) {_						logger.debug("Loading schema mappings from [" + this.schemaMappingsLocation + "]")__					}_					try {_						Properties mappings =_								PropertiesLoaderUtils.loadAllProperties(this.schemaMappingsLocation, this.classLoader)__						if (logger.isDebugEnabled()) {_							logger.debug("Loaded schema mappings: " + mappings)__						}_						Map<String, String> schemaMappings = new ConcurrentHashMap<>(mappings.size())__						CollectionUtils.mergePropertiesIntoMap(mappings, schemaMappings)__						this.schemaMappings = schemaMappings__					}_					catch (IOException ex) {_						throw new IllegalStateException(_								"Unable to load schema mappings from location [" + this.schemaMappingsLocation + "]", ex)__					}_				}_			}_		}_		return this.schemaMappings__	};load,the,specified,schema,mappings,lazily;private,map,string,string,get,schema,mappings,if,this,schema,mappings,null,synchronized,this,if,this,schema,mappings,null,if,logger,is,debug,enabled,logger,debug,loading,schema,mappings,from,this,schema,mappings,location,try,properties,mappings,properties,loader,utils,load,all,properties,this,schema,mappings,location,this,class,loader,if,logger,is,debug,enabled,logger,debug,loaded,schema,mappings,mappings,map,string,string,schema,mappings,new,concurrent,hash,map,mappings,size,collection,utils,merge,properties,into,map,mappings,schema,mappings,this,schema,mappings,schema,mappings,catch,ioexception,ex,throw,new,illegal,state,exception,unable,to,load,schema,mappings,from,location,this,schema,mappings,location,ex,return,this,schema,mappings
PluggableSchemaResolver -> private Map<String, String> getSchemaMappings();1495868221;Load the specified schema mappings lazily.;private Map<String, String> getSchemaMappings() {_		if (this.schemaMappings == null) {_			synchronized (this) {_				if (this.schemaMappings == null) {_					if (logger.isDebugEnabled()) {_						logger.debug("Loading schema mappings from [" + this.schemaMappingsLocation + "]")__					}_					try {_						Properties mappings =_								PropertiesLoaderUtils.loadAllProperties(this.schemaMappingsLocation, this.classLoader)__						if (logger.isDebugEnabled()) {_							logger.debug("Loaded schema mappings: " + mappings)__						}_						Map<String, String> schemaMappings = new ConcurrentHashMap<>(mappings.size())__						CollectionUtils.mergePropertiesIntoMap(mappings, schemaMappings)__						this.schemaMappings = schemaMappings__					}_					catch (IOException ex) {_						throw new IllegalStateException(_								"Unable to load schema mappings from location [" + this.schemaMappingsLocation + "]", ex)__					}_				}_			}_		}_		return this.schemaMappings__	};load,the,specified,schema,mappings,lazily;private,map,string,string,get,schema,mappings,if,this,schema,mappings,null,synchronized,this,if,this,schema,mappings,null,if,logger,is,debug,enabled,logger,debug,loading,schema,mappings,from,this,schema,mappings,location,try,properties,mappings,properties,loader,utils,load,all,properties,this,schema,mappings,location,this,class,loader,if,logger,is,debug,enabled,logger,debug,loaded,schema,mappings,mappings,map,string,string,schema,mappings,new,concurrent,hash,map,mappings,size,collection,utils,merge,properties,into,map,mappings,schema,mappings,this,schema,mappings,schema,mappings,catch,ioexception,ex,throw,new,illegal,state,exception,unable,to,load,schema,mappings,from,location,this,schema,mappings,location,ex,return,this,schema,mappings
PluggableSchemaResolver -> private Map<String, String> getSchemaMappings();1496837955;Load the specified schema mappings lazily.;private Map<String, String> getSchemaMappings() {_		if (this.schemaMappings == null) {_			synchronized (this) {_				if (this.schemaMappings == null) {_					if (logger.isDebugEnabled()) {_						logger.debug("Loading schema mappings from [" + this.schemaMappingsLocation + "]")__					}_					try {_						Properties mappings =_								PropertiesLoaderUtils.loadAllProperties(this.schemaMappingsLocation, this.classLoader)__						if (logger.isDebugEnabled()) {_							logger.debug("Loaded schema mappings: " + mappings)__						}_						Map<String, String> schemaMappings = new ConcurrentHashMap<>(mappings.size())__						CollectionUtils.mergePropertiesIntoMap(mappings, schemaMappings)__						this.schemaMappings = schemaMappings__					}_					catch (IOException ex) {_						throw new IllegalStateException(_								"Unable to load schema mappings from location [" + this.schemaMappingsLocation + "]", ex)__					}_				}_			}_		}_		return this.schemaMappings__	};load,the,specified,schema,mappings,lazily;private,map,string,string,get,schema,mappings,if,this,schema,mappings,null,synchronized,this,if,this,schema,mappings,null,if,logger,is,debug,enabled,logger,debug,loading,schema,mappings,from,this,schema,mappings,location,try,properties,mappings,properties,loader,utils,load,all,properties,this,schema,mappings,location,this,class,loader,if,logger,is,debug,enabled,logger,debug,loaded,schema,mappings,mappings,map,string,string,schema,mappings,new,concurrent,hash,map,mappings,size,collection,utils,merge,properties,into,map,mappings,schema,mappings,this,schema,mappings,schema,mappings,catch,ioexception,ex,throw,new,illegal,state,exception,unable,to,load,schema,mappings,from,location,this,schema,mappings,location,ex,return,this,schema,mappings
PluggableSchemaResolver -> private Map<String, String> getSchemaMappings();1498780456;Load the specified schema mappings lazily.;private Map<String, String> getSchemaMappings() {_		Map<String, String> schemaMappings = this.schemaMappings__		if (schemaMappings == null) {_			synchronized (this) {_				schemaMappings = this.schemaMappings__				if (schemaMappings == null) {_					if (logger.isDebugEnabled()) {_						logger.debug("Loading schema mappings from [" + this.schemaMappingsLocation + "]")__					}_					try {_						Properties mappings =_								PropertiesLoaderUtils.loadAllProperties(this.schemaMappingsLocation, this.classLoader)__						if (logger.isDebugEnabled()) {_							logger.debug("Loaded schema mappings: " + mappings)__						}_						Map<String, String> mappingsToUse = new ConcurrentHashMap<>(mappings.size())__						CollectionUtils.mergePropertiesIntoMap(mappings, mappingsToUse)__						schemaMappings = mappingsToUse__						this.schemaMappings = schemaMappings__					}_					catch (IOException ex) {_						throw new IllegalStateException(_								"Unable to load schema mappings from location [" + this.schemaMappingsLocation + "]", ex)__					}_				}_			}_		}_		return schemaMappings__	};load,the,specified,schema,mappings,lazily;private,map,string,string,get,schema,mappings,map,string,string,schema,mappings,this,schema,mappings,if,schema,mappings,null,synchronized,this,schema,mappings,this,schema,mappings,if,schema,mappings,null,if,logger,is,debug,enabled,logger,debug,loading,schema,mappings,from,this,schema,mappings,location,try,properties,mappings,properties,loader,utils,load,all,properties,this,schema,mappings,location,this,class,loader,if,logger,is,debug,enabled,logger,debug,loaded,schema,mappings,mappings,map,string,string,mappings,to,use,new,concurrent,hash,map,mappings,size,collection,utils,merge,properties,into,map,mappings,mappings,to,use,schema,mappings,mappings,to,use,this,schema,mappings,schema,mappings,catch,ioexception,ex,throw,new,illegal,state,exception,unable,to,load,schema,mappings,from,location,this,schema,mappings,location,ex,return,schema,mappings
PluggableSchemaResolver -> private Map<String, String> getSchemaMappings();1530174524;Load the specified schema mappings lazily.;private Map<String, String> getSchemaMappings() {_		Map<String, String> schemaMappings = this.schemaMappings__		if (schemaMappings == null) {_			synchronized (this) {_				schemaMappings = this.schemaMappings__				if (schemaMappings == null) {_					if (logger.isDebugEnabled()) {_						logger.debug("Loading schema mappings from [" + this.schemaMappingsLocation + "]")__					}_					try {_						Properties mappings =_								PropertiesLoaderUtils.loadAllProperties(this.schemaMappingsLocation, this.classLoader)__						if (logger.isDebugEnabled()) {_							logger.debug("Loaded schema mappings: " + mappings)__						}_						Map<String, String> mappingsToUse = new ConcurrentHashMap<>(mappings.size())__						CollectionUtils.mergePropertiesIntoMap(mappings, mappingsToUse)__						schemaMappings = mappingsToUse__						this.schemaMappings = schemaMappings__					}_					catch (IOException ex) {_						throw new IllegalStateException(_								"Unable to load schema mappings from location [" + this.schemaMappingsLocation + "]", ex)__					}_				}_			}_		}_		return schemaMappings__	};load,the,specified,schema,mappings,lazily;private,map,string,string,get,schema,mappings,map,string,string,schema,mappings,this,schema,mappings,if,schema,mappings,null,synchronized,this,schema,mappings,this,schema,mappings,if,schema,mappings,null,if,logger,is,debug,enabled,logger,debug,loading,schema,mappings,from,this,schema,mappings,location,try,properties,mappings,properties,loader,utils,load,all,properties,this,schema,mappings,location,this,class,loader,if,logger,is,debug,enabled,logger,debug,loaded,schema,mappings,mappings,map,string,string,mappings,to,use,new,concurrent,hash,map,mappings,size,collection,utils,merge,properties,into,map,mappings,mappings,to,use,schema,mappings,mappings,to,use,this,schema,mappings,schema,mappings,catch,ioexception,ex,throw,new,illegal,state,exception,unable,to,load,schema,mappings,from,location,this,schema,mappings,location,ex,return,schema,mappings
PluggableSchemaResolver -> private Map<String, String> getSchemaMappings();1532706365;Load the specified schema mappings lazily.;private Map<String, String> getSchemaMappings() {_		Map<String, String> schemaMappings = this.schemaMappings__		if (schemaMappings == null) {_			synchronized (this) {_				schemaMappings = this.schemaMappings__				if (schemaMappings == null) {_					if (logger.isTraceEnabled()) {_						logger.trace("Loading schema mappings from [" + this.schemaMappingsLocation + "]")__					}_					try {_						Properties mappings =_								PropertiesLoaderUtils.loadAllProperties(this.schemaMappingsLocation, this.classLoader)__						if (logger.isTraceEnabled()) {_							logger.trace("Loaded schema mappings: " + mappings)__						}_						Map<String, String> mappingsToUse = new ConcurrentHashMap<>(mappings.size())__						CollectionUtils.mergePropertiesIntoMap(mappings, mappingsToUse)__						schemaMappings = mappingsToUse__						this.schemaMappings = schemaMappings__					}_					catch (IOException ex) {_						throw new IllegalStateException(_								"Unable to load schema mappings from location [" + this.schemaMappingsLocation + "]", ex)__					}_				}_			}_		}_		return schemaMappings__	};load,the,specified,schema,mappings,lazily;private,map,string,string,get,schema,mappings,map,string,string,schema,mappings,this,schema,mappings,if,schema,mappings,null,synchronized,this,schema,mappings,this,schema,mappings,if,schema,mappings,null,if,logger,is,trace,enabled,logger,trace,loading,schema,mappings,from,this,schema,mappings,location,try,properties,mappings,properties,loader,utils,load,all,properties,this,schema,mappings,location,this,class,loader,if,logger,is,trace,enabled,logger,trace,loaded,schema,mappings,mappings,map,string,string,mappings,to,use,new,concurrent,hash,map,mappings,size,collection,utils,merge,properties,into,map,mappings,mappings,to,use,schema,mappings,mappings,to,use,this,schema,mappings,schema,mappings,catch,ioexception,ex,throw,new,illegal,state,exception,unable,to,load,schema,mappings,from,location,this,schema,mappings,location,ex,return,schema,mappings
PluggableSchemaResolver -> private Map<String, String> getSchemaMappings();1532710698;Load the specified schema mappings lazily.;private Map<String, String> getSchemaMappings() {_		Map<String, String> schemaMappings = this.schemaMappings__		if (schemaMappings == null) {_			synchronized (this) {_				schemaMappings = this.schemaMappings__				if (schemaMappings == null) {_					if (logger.isTraceEnabled()) {_						logger.trace("Loading schema mappings from [" + this.schemaMappingsLocation + "]")__					}_					try {_						Properties mappings =_								PropertiesLoaderUtils.loadAllProperties(this.schemaMappingsLocation, this.classLoader)__						if (logger.isTraceEnabled()) {_							logger.trace("Loaded schema mappings: " + mappings)__						}_						schemaMappings = new ConcurrentHashMap<>(mappings.size())__						CollectionUtils.mergePropertiesIntoMap(mappings, schemaMappings)__						this.schemaMappings = schemaMappings__					}_					catch (IOException ex) {_						throw new IllegalStateException(_								"Unable to load schema mappings from location [" + this.schemaMappingsLocation + "]", ex)__					}_				}_			}_		}_		return schemaMappings__	};load,the,specified,schema,mappings,lazily;private,map,string,string,get,schema,mappings,map,string,string,schema,mappings,this,schema,mappings,if,schema,mappings,null,synchronized,this,schema,mappings,this,schema,mappings,if,schema,mappings,null,if,logger,is,trace,enabled,logger,trace,loading,schema,mappings,from,this,schema,mappings,location,try,properties,mappings,properties,loader,utils,load,all,properties,this,schema,mappings,location,this,class,loader,if,logger,is,trace,enabled,logger,trace,loaded,schema,mappings,mappings,schema,mappings,new,concurrent,hash,map,mappings,size,collection,utils,merge,properties,into,map,mappings,schema,mappings,this,schema,mappings,schema,mappings,catch,ioexception,ex,throw,new,illegal,state,exception,unable,to,load,schema,mappings,from,location,this,schema,mappings,location,ex,return,schema,mappings
PluggableSchemaResolver -> private Map<String, String> getSchemaMappings();1551199835;Load the specified schema mappings lazily.;private Map<String, String> getSchemaMappings() {_		Map<String, String> schemaMappings = this.schemaMappings__		if (schemaMappings == null) {_			synchronized (this) {_				schemaMappings = this.schemaMappings__				if (schemaMappings == null) {_					if (logger.isTraceEnabled()) {_						logger.trace("Loading schema mappings from [" + this.schemaMappingsLocation + "]")__					}_					try {_						Properties mappings =_								PropertiesLoaderUtils.loadAllProperties(this.schemaMappingsLocation, this.classLoader)__						if (logger.isTraceEnabled()) {_							logger.trace("Loaded schema mappings: " + mappings)__						}_						schemaMappings = new ConcurrentHashMap<>(mappings.size())__						CollectionUtils.mergePropertiesIntoMap(mappings, schemaMappings)__						this.schemaMappings = schemaMappings__					}_					catch (IOException ex) {_						throw new IllegalStateException(_								"Unable to load schema mappings from location [" + this.schemaMappingsLocation + "]", ex)__					}_				}_			}_		}_		return schemaMappings__	};load,the,specified,schema,mappings,lazily;private,map,string,string,get,schema,mappings,map,string,string,schema,mappings,this,schema,mappings,if,schema,mappings,null,synchronized,this,schema,mappings,this,schema,mappings,if,schema,mappings,null,if,logger,is,trace,enabled,logger,trace,loading,schema,mappings,from,this,schema,mappings,location,try,properties,mappings,properties,loader,utils,load,all,properties,this,schema,mappings,location,this,class,loader,if,logger,is,trace,enabled,logger,trace,loaded,schema,mappings,mappings,schema,mappings,new,concurrent,hash,map,mappings,size,collection,utils,merge,properties,into,map,mappings,schema,mappings,this,schema,mappings,schema,mappings,catch,ioexception,ex,throw,new,illegal,state,exception,unable,to,load,schema,mappings,from,location,this,schema,mappings,location,ex,return,schema,mappings
PluggableSchemaResolver -> private Map<String, String> getSchemaMappings();1551272591;Load the specified schema mappings lazily.;private Map<String, String> getSchemaMappings() {_		Map<String, String> schemaMappings = this.schemaMappings__		if (schemaMappings == null) {_			synchronized (this) {_				schemaMappings = this.schemaMappings__				if (schemaMappings == null) {_					if (logger.isTraceEnabled()) {_						logger.trace("Loading schema mappings from [" + this.schemaMappingsLocation + "]")__					}_					try {_						Properties mappings =_								PropertiesLoaderUtils.loadAllProperties(this.schemaMappingsLocation, this.classLoader)__						if (logger.isTraceEnabled()) {_							logger.trace("Loaded schema mappings: " + mappings)__						}_						schemaMappings = new ConcurrentHashMap<>(mappings.size())__						CollectionUtils.mergePropertiesIntoMap(mappings, schemaMappings)__						this.schemaMappings = schemaMappings__					}_					catch (IOException ex) {_						throw new IllegalStateException(_								"Unable to load schema mappings from location [" + this.schemaMappingsLocation + "]", ex)__					}_				}_			}_		}_		return schemaMappings__	};load,the,specified,schema,mappings,lazily;private,map,string,string,get,schema,mappings,map,string,string,schema,mappings,this,schema,mappings,if,schema,mappings,null,synchronized,this,schema,mappings,this,schema,mappings,if,schema,mappings,null,if,logger,is,trace,enabled,logger,trace,loading,schema,mappings,from,this,schema,mappings,location,try,properties,mappings,properties,loader,utils,load,all,properties,this,schema,mappings,location,this,class,loader,if,logger,is,trace,enabled,logger,trace,loaded,schema,mappings,mappings,schema,mappings,new,concurrent,hash,map,mappings,size,collection,utils,merge,properties,into,map,mappings,schema,mappings,this,schema,mappings,schema,mappings,catch,ioexception,ex,throw,new,illegal,state,exception,unable,to,load,schema,mappings,from,location,this,schema,mappings,location,ex,return,schema,mappings
