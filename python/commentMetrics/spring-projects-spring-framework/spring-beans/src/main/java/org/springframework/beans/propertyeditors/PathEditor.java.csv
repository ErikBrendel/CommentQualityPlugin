commented;modifiers;parameterAmount;loc;comment;code
false;public;1;37;;@Override public void setAsText(String text) throws IllegalArgumentException {     boolean nioPathCandidate = !text.startsWith(ResourceLoader.CLASSPATH_URL_PREFIX).     if (nioPathCandidate && !text.startsWith("/")) {         try {             URI uri = new URI(text).             if (uri.getScheme() != null) {                 nioPathCandidate = false.                 // Let's try NIO file system providers via Paths.get(URI)                 setValue(Paths.get(uri).normalize()).                 return.             }         } catch (URISyntaxException | FileSystemNotFoundException ex) {         // Not a valid URI (let's try as Spring resource location),         // or a URI scheme not registered for NIO (let's try URL         // protocol handlers via Spring's resource mechanism).         }     }     this.resourceEditor.setAsText(text).     Resource resource = (Resource) this.resourceEditor.getValue().     if (resource == null) {         setValue(null).     } else if (!resource.exists() && nioPathCandidate) {         setValue(Paths.get(text).normalize()).     } else {         try {             setValue(resource.getFile().toPath()).         } catch (IOException ex) {             throw new IllegalArgumentException("Failed to retrieve file for " + resource, ex).         }     } }
false;public;0;5;;@Override public String getAsText() {     Path value = (Path) getValue().     return (value != null ? value.toString() : ""). }
