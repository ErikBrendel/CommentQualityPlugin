commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Return the name of the method to be overridden.  */ ;/**  * Return the name of the method to be overridden.  */ public String getMethodName() {     return this.methodName. }
true;protected;1;3;/**  * Set whether the overridden method is <em>overloaded</em> (i.e., whether argument  * type matching needs to occur to disambiguate methods of the same name).  * <p>Default is {@code true}. can be switched to {@code false} to optimize  * runtime performance.  */ ;/**  * Set whether the overridden method is <em>overloaded</em> (i.e., whether argument  * type matching needs to occur to disambiguate methods of the same name).  * <p>Default is {@code true}. can be switched to {@code false} to optimize  * runtime performance.  */ protected void setOverloaded(boolean overloaded) {     this.overloaded = overloaded. }
true;protected;0;3;/**  * Return whether the overridden method is <em>overloaded</em> (i.e., whether argument  * type matching needs to occur to disambiguate methods of the same name).  */ ;/**  * Return whether the overridden method is <em>overloaded</em> (i.e., whether argument  * type matching needs to occur to disambiguate methods of the same name).  */ protected boolean isOverloaded() {     return this.overloaded. }
true;public;1;3;/**  * Set the configuration source {@code Object} for this metadata element.  * <p>The exact type of the object will depend on the configuration mechanism used.  */ ;/**  * Set the configuration source {@code Object} for this metadata element.  * <p>The exact type of the object will depend on the configuration mechanism used.  */ public void setSource(@Nullable Object source) {     this.source = source. }
false;public;0;5;;@Override @Nullable public Object getSource() {     return this.source. }
true;public,abstract;1;1;/**  * Subclasses must override this to indicate whether they <em>match</em> the  * given method. This allows for argument list checking as well as method  * name checking.  * @param method the method to check  * @return whether this override matches the given method  */ ;/**  * Subclasses must override this to indicate whether they <em>match</em> the  * given method. This allows for argument list checking as well as method  * name checking.  * @param method the method to check  * @return whether this override matches the given method  */ public abstract boolean matches(Method method).
false;public;1;12;;@Override public boolean equals(Object other) {     if (this == other) {         return true.     }     if (!(other instanceof MethodOverride)) {         return false.     }     MethodOverride that = (MethodOverride) other.     return (ObjectUtils.nullSafeEquals(this.methodName, that.methodName) && ObjectUtils.nullSafeEquals(this.source, that.source)). }
false;public;0;6;;@Override public int hashCode() {     int hashCode = ObjectUtils.nullSafeHashCode(this.methodName).     hashCode = 29 * hashCode + ObjectUtils.nullSafeHashCode(this.source).     return hashCode. }
