commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the order value of this object for sorting purposes.  * @see PriorityOrdered  */ ;/**  * Set the order value of this object for sorting purposes.  * @see PriorityOrdered  */ public void setOrder(int order) {     this.order = order. }
false;public;0;4;;@Override public int getOrder() {     return this.order. }
true;public;1;15;/**  * {@linkplain #mergeProperties Merge}, {@linkplain #convertProperties convert} and  * {@linkplain #processProperties process} properties against the given bean factory.  * @throws BeanInitializationException if any properties cannot be loaded  */ ;/**  * {@linkplain #mergeProperties Merge}, {@linkplain #convertProperties convert} and  * {@linkplain #processProperties process} properties against the given bean factory.  * @throws BeanInitializationException if any properties cannot be loaded  */ @Override public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {     try {         Properties mergedProps = mergeProperties().         // Convert the merged properties, if necessary.         convertProperties(mergedProps).         // Let the subclass process the properties.         processProperties(beanFactory, mergedProps).     } catch (IOException ex) {         throw new BeanInitializationException("Could not load properties", ex).     } }
true;protected;1;11;/**  * Convert the given merged properties, converting property values  * if necessary. The result will then be processed.  * <p>The default implementation will invoke {@link #convertPropertyValue}  * for each property value, replacing the original with the converted value.  * @param props the Properties to convert  * @see #processProperties  */ ;/**  * Convert the given merged properties, converting property values  * if necessary. The result will then be processed.  * <p>The default implementation will invoke {@link #convertPropertyValue}  * for each property value, replacing the original with the converted value.  * @param props the Properties to convert  * @see #processProperties  */ protected void convertProperties(Properties props) {     Enumeration<?> propertyNames = props.propertyNames().     while (propertyNames.hasMoreElements()) {         String propertyName = (String) propertyNames.nextElement().         String propertyValue = props.getProperty(propertyName).         String convertedValue = convertProperty(propertyName, propertyValue).         if (!ObjectUtils.nullSafeEquals(propertyValue, convertedValue)) {             props.setProperty(propertyName, convertedValue).         }     } }
true;protected;2;3;/**  * Convert the given property from the properties source to the value  * which should be applied.  * <p>The default implementation calls {@link #convertPropertyValue(String)}.  * @param propertyName the name of the property that the value is defined for  * @param propertyValue the original value from the properties source  * @return the converted value, to be used for processing  * @see #convertPropertyValue(String)  */ ;/**  * Convert the given property from the properties source to the value  * which should be applied.  * <p>The default implementation calls {@link #convertPropertyValue(String)}.  * @param propertyName the name of the property that the value is defined for  * @param propertyValue the original value from the properties source  * @return the converted value, to be used for processing  * @see #convertPropertyValue(String)  */ protected String convertProperty(String propertyName, String propertyValue) {     return convertPropertyValue(propertyValue). }
true;protected;1;3;/**  * Convert the given property value from the properties source to the value  * which should be applied.  * <p>The default implementation simply returns the original value.  * Can be overridden in subclasses, for example to detect  * encrypted values and decrypt them accordingly.  * @param originalValue the original value from the properties source  * (properties file or local "properties")  * @return the converted value, to be used for processing  * @see #setProperties  * @see #setLocations  * @see #setLocation  * @see #convertProperty(String, String)  */ ;/**  * Convert the given property value from the properties source to the value  * which should be applied.  * <p>The default implementation simply returns the original value.  * Can be overridden in subclasses, for example to detect  * encrypted values and decrypt them accordingly.  * @param originalValue the original value from the properties source  * (properties file or local "properties")  * @return the converted value, to be used for processing  * @see #setProperties  * @see #setLocations  * @see #setLocation  * @see #convertProperty(String, String)  */ protected String convertPropertyValue(String originalValue) {     return originalValue. }
true;protected,abstract;2;2;/**  * Apply the given Properties to the given BeanFactory.  * @param beanFactory the BeanFactory used by the application context  * @param props the Properties to apply  * @throws org.springframework.beans.BeansException in case of errors  */ ;/**  * Apply the given Properties to the given BeanFactory.  * @param beanFactory the BeanFactory used by the application context  * @param props the Properties to apply  * @throws org.springframework.beans.BeansException in case of errors  */ protected abstract void processProperties(ConfigurableListableBeanFactory beanFactory, Properties props) throws BeansException.
