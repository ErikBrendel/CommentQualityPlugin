# id;timestamp;commentText;codeText;commentWords;codeWords
PropertyResourceConfigurer -> protected String convertProperty(String propertyName, String propertyValue);1328020251;Convert the given property from the properties source to the value_which should be applied._<p>The default implementation calls {@link #convertPropertyValue(String)}._@param propertyName the name of the property that the value is defined for_@param propertyValue the original value from the properties source_@return the converted value, to be used for processing_@see #convertPropertyValue(String);protected String convertProperty(String propertyName, String propertyValue) {_		return convertPropertyValue(propertyValue)__	};convert,the,given,property,from,the,properties,source,to,the,value,which,should,be,applied,p,the,default,implementation,calls,link,convert,property,value,string,param,property,name,the,name,of,the,property,that,the,value,is,defined,for,param,property,value,the,original,value,from,the,properties,source,return,the,converted,value,to,be,used,for,processing,see,convert,property,value,string;protected,string,convert,property,string,property,name,string,property,value,return,convert,property,value,property,value
PropertyResourceConfigurer -> protected String convertProperty(String propertyName, String propertyValue);1356735495;Convert the given property from the properties source to the value_which should be applied._<p>The default implementation calls {@link #convertPropertyValue(String)}._@param propertyName the name of the property that the value is defined for_@param propertyValue the original value from the properties source_@return the converted value, to be used for processing_@see #convertPropertyValue(String);protected String convertProperty(String propertyName, String propertyValue) {_		return convertPropertyValue(propertyValue)__	};convert,the,given,property,from,the,properties,source,to,the,value,which,should,be,applied,p,the,default,implementation,calls,link,convert,property,value,string,param,property,name,the,name,of,the,property,that,the,value,is,defined,for,param,property,value,the,original,value,from,the,properties,source,return,the,converted,value,to,be,used,for,processing,see,convert,property,value,string;protected,string,convert,property,string,property,name,string,property,value,return,convert,property,value,property,value
PropertyResourceConfigurer -> protected String convertProperty(String propertyName, String propertyValue);1357119239;Convert the given property from the properties source to the value_which should be applied._<p>The default implementation calls {@link #convertPropertyValue(String)}._@param propertyName the name of the property that the value is defined for_@param propertyValue the original value from the properties source_@return the converted value, to be used for processing_@see #convertPropertyValue(String);protected String convertProperty(String propertyName, String propertyValue) {_		return convertPropertyValue(propertyValue)__	};convert,the,given,property,from,the,properties,source,to,the,value,which,should,be,applied,p,the,default,implementation,calls,link,convert,property,value,string,param,property,name,the,name,of,the,property,that,the,value,is,defined,for,param,property,value,the,original,value,from,the,properties,source,return,the,converted,value,to,be,used,for,processing,see,convert,property,value,string;protected,string,convert,property,string,property,name,string,property,value,return,convert,property,value,property,value
PropertyResourceConfigurer -> protected String convertProperty(String propertyName, String propertyValue);1368482696;Convert the given property from the properties source to the value_which should be applied._<p>The default implementation calls {@link #convertPropertyValue(String)}._@param propertyName the name of the property that the value is defined for_@param propertyValue the original value from the properties source_@return the converted value, to be used for processing_@see #convertPropertyValue(String);protected String convertProperty(String propertyName, String propertyValue) {_		return convertPropertyValue(propertyValue)__	};convert,the,given,property,from,the,properties,source,to,the,value,which,should,be,applied,p,the,default,implementation,calls,link,convert,property,value,string,param,property,name,the,name,of,the,property,that,the,value,is,defined,for,param,property,value,the,original,value,from,the,properties,source,return,the,converted,value,to,be,used,for,processing,see,convert,property,value,string;protected,string,convert,property,string,property,name,string,property,value,return,convert,property,value,property,value
PropertyResourceConfigurer -> protected abstract void processProperties(ConfigurableListableBeanFactory beanFactory, Properties props) 			throws BeansException_;1328020251;Apply the given Properties to the given BeanFactory._@param beanFactory the BeanFactory used by the application context_@param props the Properties to apply_@throws org.springframework.beans.BeansException in case of errors;protected abstract void processProperties(ConfigurableListableBeanFactory beanFactory, Properties props)_			throws BeansException_;apply,the,given,properties,to,the,given,bean,factory,param,bean,factory,the,bean,factory,used,by,the,application,context,param,props,the,properties,to,apply,throws,org,springframework,beans,beans,exception,in,case,of,errors;protected,abstract,void,process,properties,configurable,listable,bean,factory,bean,factory,properties,props,throws,beans,exception
PropertyResourceConfigurer -> protected abstract void processProperties(ConfigurableListableBeanFactory beanFactory, Properties props) 			throws BeansException_;1356735495;Apply the given Properties to the given BeanFactory._@param beanFactory the BeanFactory used by the application context_@param props the Properties to apply_@throws org.springframework.beans.BeansException in case of errors;protected abstract void processProperties(ConfigurableListableBeanFactory beanFactory, Properties props)_			throws BeansException_;apply,the,given,properties,to,the,given,bean,factory,param,bean,factory,the,bean,factory,used,by,the,application,context,param,props,the,properties,to,apply,throws,org,springframework,beans,beans,exception,in,case,of,errors;protected,abstract,void,process,properties,configurable,listable,bean,factory,bean,factory,properties,props,throws,beans,exception
PropertyResourceConfigurer -> protected abstract void processProperties(ConfigurableListableBeanFactory beanFactory, Properties props) 			throws BeansException_;1357119239;Apply the given Properties to the given BeanFactory._@param beanFactory the BeanFactory used by the application context_@param props the Properties to apply_@throws org.springframework.beans.BeansException in case of errors;protected abstract void processProperties(ConfigurableListableBeanFactory beanFactory, Properties props)_			throws BeansException_;apply,the,given,properties,to,the,given,bean,factory,param,bean,factory,the,bean,factory,used,by,the,application,context,param,props,the,properties,to,apply,throws,org,springframework,beans,beans,exception,in,case,of,errors;protected,abstract,void,process,properties,configurable,listable,bean,factory,bean,factory,properties,props,throws,beans,exception
PropertyResourceConfigurer -> protected abstract void processProperties(ConfigurableListableBeanFactory beanFactory, Properties props) 			throws BeansException_;1368482696;Apply the given Properties to the given BeanFactory._@param beanFactory the BeanFactory used by the application context_@param props the Properties to apply_@throws org.springframework.beans.BeansException in case of errors;protected abstract void processProperties(ConfigurableListableBeanFactory beanFactory, Properties props)_			throws BeansException_;apply,the,given,properties,to,the,given,bean,factory,param,bean,factory,the,bean,factory,used,by,the,application,context,param,props,the,properties,to,apply,throws,org,springframework,beans,beans,exception,in,case,of,errors;protected,abstract,void,process,properties,configurable,listable,bean,factory,bean,factory,properties,props,throws,beans,exception
PropertyResourceConfigurer -> protected void convertProperties(Properties props);1328020251;Convert the given merged properties, converting property values_if necessary. The result will then be processed._<p>The default implementation will invoke {@link #convertPropertyValue}_for each property value, replacing the original with the converted value._@param props the Properties to convert_@see #processProperties;protected void convertProperties(Properties props) {_		Enumeration<?> propertyNames = props.propertyNames()__		while (propertyNames.hasMoreElements()) {_			String propertyName = (String) propertyNames.nextElement()__			String propertyValue = props.getProperty(propertyName)__			String convertedValue = convertProperty(propertyName, propertyValue)__			if (!ObjectUtils.nullSafeEquals(propertyValue, convertedValue)) {_				props.setProperty(propertyName, convertedValue)__			}_		}_	};convert,the,given,merged,properties,converting,property,values,if,necessary,the,result,will,then,be,processed,p,the,default,implementation,will,invoke,link,convert,property,value,for,each,property,value,replacing,the,original,with,the,converted,value,param,props,the,properties,to,convert,see,process,properties;protected,void,convert,properties,properties,props,enumeration,property,names,props,property,names,while,property,names,has,more,elements,string,property,name,string,property,names,next,element,string,property,value,props,get,property,property,name,string,converted,value,convert,property,property,name,property,value,if,object,utils,null,safe,equals,property,value,converted,value,props,set,property,property,name,converted,value
PropertyResourceConfigurer -> protected void convertProperties(Properties props);1356735495;Convert the given merged properties, converting property values_if necessary. The result will then be processed._<p>The default implementation will invoke {@link #convertPropertyValue}_for each property value, replacing the original with the converted value._@param props the Properties to convert_@see #processProperties;protected void convertProperties(Properties props) {_		Enumeration<?> propertyNames = props.propertyNames()__		while (propertyNames.hasMoreElements()) {_			String propertyName = (String) propertyNames.nextElement()__			String propertyValue = props.getProperty(propertyName)__			String convertedValue = convertProperty(propertyName, propertyValue)__			if (!ObjectUtils.nullSafeEquals(propertyValue, convertedValue)) {_				props.setProperty(propertyName, convertedValue)__			}_		}_	};convert,the,given,merged,properties,converting,property,values,if,necessary,the,result,will,then,be,processed,p,the,default,implementation,will,invoke,link,convert,property,value,for,each,property,value,replacing,the,original,with,the,converted,value,param,props,the,properties,to,convert,see,process,properties;protected,void,convert,properties,properties,props,enumeration,property,names,props,property,names,while,property,names,has,more,elements,string,property,name,string,property,names,next,element,string,property,value,props,get,property,property,name,string,converted,value,convert,property,property,name,property,value,if,object,utils,null,safe,equals,property,value,converted,value,props,set,property,property,name,converted,value
PropertyResourceConfigurer -> protected void convertProperties(Properties props);1357119239;Convert the given merged properties, converting property values_if necessary. The result will then be processed._<p>The default implementation will invoke {@link #convertPropertyValue}_for each property value, replacing the original with the converted value._@param props the Properties to convert_@see #processProperties;protected void convertProperties(Properties props) {_		Enumeration<?> propertyNames = props.propertyNames()__		while (propertyNames.hasMoreElements()) {_			String propertyName = (String) propertyNames.nextElement()__			String propertyValue = props.getProperty(propertyName)__			String convertedValue = convertProperty(propertyName, propertyValue)__			if (!ObjectUtils.nullSafeEquals(propertyValue, convertedValue)) {_				props.setProperty(propertyName, convertedValue)__			}_		}_	};convert,the,given,merged,properties,converting,property,values,if,necessary,the,result,will,then,be,processed,p,the,default,implementation,will,invoke,link,convert,property,value,for,each,property,value,replacing,the,original,with,the,converted,value,param,props,the,properties,to,convert,see,process,properties;protected,void,convert,properties,properties,props,enumeration,property,names,props,property,names,while,property,names,has,more,elements,string,property,name,string,property,names,next,element,string,property,value,props,get,property,property,name,string,converted,value,convert,property,property,name,property,value,if,object,utils,null,safe,equals,property,value,converted,value,props,set,property,property,name,converted,value
PropertyResourceConfigurer -> protected void convertProperties(Properties props);1368482696;Convert the given merged properties, converting property values_if necessary. The result will then be processed._<p>The default implementation will invoke {@link #convertPropertyValue}_for each property value, replacing the original with the converted value._@param props the Properties to convert_@see #processProperties;protected void convertProperties(Properties props) {_		Enumeration<?> propertyNames = props.propertyNames()__		while (propertyNames.hasMoreElements()) {_			String propertyName = (String) propertyNames.nextElement()__			String propertyValue = props.getProperty(propertyName)__			String convertedValue = convertProperty(propertyName, propertyValue)__			if (!ObjectUtils.nullSafeEquals(propertyValue, convertedValue)) {_				props.setProperty(propertyName, convertedValue)__			}_		}_	};convert,the,given,merged,properties,converting,property,values,if,necessary,the,result,will,then,be,processed,p,the,default,implementation,will,invoke,link,convert,property,value,for,each,property,value,replacing,the,original,with,the,converted,value,param,props,the,properties,to,convert,see,process,properties;protected,void,convert,properties,properties,props,enumeration,property,names,props,property,names,while,property,names,has,more,elements,string,property,name,string,property,names,next,element,string,property,value,props,get,property,property,name,string,converted,value,convert,property,property,name,property,value,if,object,utils,null,safe,equals,property,value,converted,value,props,set,property,property,name,converted,value
PropertyResourceConfigurer -> public void setOrder(int order);1328020251;Set the order value of this object for sorting purposes._@see PriorityOrdered;public void setOrder(int order) {_		this.order = order__	};set,the,order,value,of,this,object,for,sorting,purposes,see,priority,ordered;public,void,set,order,int,order,this,order,order
PropertyResourceConfigurer -> public void setOrder(int order);1356735495;Set the order value of this object for sorting purposes._@see PriorityOrdered;public void setOrder(int order) {_		this.order = order__	};set,the,order,value,of,this,object,for,sorting,purposes,see,priority,ordered;public,void,set,order,int,order,this,order,order
PropertyResourceConfigurer -> public void setOrder(int order);1357119239;Set the order value of this object for sorting purposes._@see PriorityOrdered;public void setOrder(int order) {_		this.order = order__	};set,the,order,value,of,this,object,for,sorting,purposes,see,priority,ordered;public,void,set,order,int,order,this,order,order
PropertyResourceConfigurer -> public void setOrder(int order);1368482696;Set the order value of this object for sorting purposes._@see PriorityOrdered;public void setOrder(int order) {_		this.order = order__	};set,the,order,value,of,this,object,for,sorting,purposes,see,priority,ordered;public,void,set,order,int,order,this,order,order
PropertyResourceConfigurer -> protected String convertPropertyValue(String originalValue);1328020251;Convert the given property value from the properties source to the value_which should be applied._<p>The default implementation simply returns the original value._Can be overridden in subclasses, for example to detect_encrypted values and decrypt them accordingly._@param originalValue the original value from the properties source_(properties file or local "properties")_@return the converted value, to be used for processing_@see #setProperties_@see #setLocations_@see #setLocation_@see #convertProperty(String, String);protected String convertPropertyValue(String originalValue) {_		return originalValue__	};convert,the,given,property,value,from,the,properties,source,to,the,value,which,should,be,applied,p,the,default,implementation,simply,returns,the,original,value,can,be,overridden,in,subclasses,for,example,to,detect,encrypted,values,and,decrypt,them,accordingly,param,original,value,the,original,value,from,the,properties,source,properties,file,or,local,properties,return,the,converted,value,to,be,used,for,processing,see,set,properties,see,set,locations,see,set,location,see,convert,property,string,string;protected,string,convert,property,value,string,original,value,return,original,value
PropertyResourceConfigurer -> protected String convertPropertyValue(String originalValue);1356735495;Convert the given property value from the properties source to the value_which should be applied._<p>The default implementation simply returns the original value._Can be overridden in subclasses, for example to detect_encrypted values and decrypt them accordingly._@param originalValue the original value from the properties source_(properties file or local "properties")_@return the converted value, to be used for processing_@see #setProperties_@see #setLocations_@see #setLocation_@see #convertProperty(String, String);protected String convertPropertyValue(String originalValue) {_		return originalValue__	};convert,the,given,property,value,from,the,properties,source,to,the,value,which,should,be,applied,p,the,default,implementation,simply,returns,the,original,value,can,be,overridden,in,subclasses,for,example,to,detect,encrypted,values,and,decrypt,them,accordingly,param,original,value,the,original,value,from,the,properties,source,properties,file,or,local,properties,return,the,converted,value,to,be,used,for,processing,see,set,properties,see,set,locations,see,set,location,see,convert,property,string,string;protected,string,convert,property,value,string,original,value,return,original,value
PropertyResourceConfigurer -> protected String convertPropertyValue(String originalValue);1357119239;Convert the given property value from the properties source to the value_which should be applied._<p>The default implementation simply returns the original value._Can be overridden in subclasses, for example to detect_encrypted values and decrypt them accordingly._@param originalValue the original value from the properties source_(properties file or local "properties")_@return the converted value, to be used for processing_@see #setProperties_@see #setLocations_@see #setLocation_@see #convertProperty(String, String);protected String convertPropertyValue(String originalValue) {_		return originalValue__	};convert,the,given,property,value,from,the,properties,source,to,the,value,which,should,be,applied,p,the,default,implementation,simply,returns,the,original,value,can,be,overridden,in,subclasses,for,example,to,detect,encrypted,values,and,decrypt,them,accordingly,param,original,value,the,original,value,from,the,properties,source,properties,file,or,local,properties,return,the,converted,value,to,be,used,for,processing,see,set,properties,see,set,locations,see,set,location,see,convert,property,string,string;protected,string,convert,property,value,string,original,value,return,original,value
PropertyResourceConfigurer -> protected String convertPropertyValue(String originalValue);1368482696;Convert the given property value from the properties source to the value_which should be applied._<p>The default implementation simply returns the original value._Can be overridden in subclasses, for example to detect_encrypted values and decrypt them accordingly._@param originalValue the original value from the properties source_(properties file or local "properties")_@return the converted value, to be used for processing_@see #setProperties_@see #setLocations_@see #setLocation_@see #convertProperty(String, String);protected String convertPropertyValue(String originalValue) {_		return originalValue__	};convert,the,given,property,value,from,the,properties,source,to,the,value,which,should,be,applied,p,the,default,implementation,simply,returns,the,original,value,can,be,overridden,in,subclasses,for,example,to,detect,encrypted,values,and,decrypt,them,accordingly,param,original,value,the,original,value,from,the,properties,source,properties,file,or,local,properties,return,the,converted,value,to,be,used,for,processing,see,set,properties,see,set,locations,see,set,location,see,convert,property,string,string;protected,string,convert,property,value,string,original,value,return,original,value
PropertyResourceConfigurer -> public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException;1328020251;{@linkplain #mergeProperties Merge}, {@linkplain #convertProperties convert} and_{@linkplain #processProperties process} properties against the given bean factory._@throws BeanInitializationException if any properties cannot be loaded;public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {_		try {_			Properties mergedProps = mergeProperties()___			_			convertProperties(mergedProps)___			_			processProperties(beanFactory, mergedProps)__		}_		catch (IOException ex) {_			throw new BeanInitializationException("Could not load properties", ex)__		}_	};linkplain,merge,properties,merge,linkplain,convert,properties,convert,and,linkplain,process,properties,process,properties,against,the,given,bean,factory,throws,bean,initialization,exception,if,any,properties,cannot,be,loaded;public,void,post,process,bean,factory,configurable,listable,bean,factory,bean,factory,throws,beans,exception,try,properties,merged,props,merge,properties,convert,properties,merged,props,process,properties,bean,factory,merged,props,catch,ioexception,ex,throw,new,bean,initialization,exception,could,not,load,properties,ex
PropertyResourceConfigurer -> public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException;1357119239;{@linkplain #mergeProperties Merge}, {@linkplain #convertProperties convert} and_{@linkplain #processProperties process} properties against the given bean factory._@throws BeanInitializationException if any properties cannot be loaded;public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {_		try {_			Properties mergedProps = mergeProperties()___			_			convertProperties(mergedProps)___			_			processProperties(beanFactory, mergedProps)__		}_		catch (IOException ex) {_			throw new BeanInitializationException("Could not load properties", ex)__		}_	};linkplain,merge,properties,merge,linkplain,convert,properties,convert,and,linkplain,process,properties,process,properties,against,the,given,bean,factory,throws,bean,initialization,exception,if,any,properties,cannot,be,loaded;public,void,post,process,bean,factory,configurable,listable,bean,factory,bean,factory,throws,beans,exception,try,properties,merged,props,merge,properties,convert,properties,merged,props,process,properties,bean,factory,merged,props,catch,ioexception,ex,throw,new,bean,initialization,exception,could,not,load,properties,ex
PropertyResourceConfigurer -> @Override 	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException;1356735495;{@linkplain #mergeProperties Merge}, {@linkplain #convertProperties convert} and_{@linkplain #processProperties process} properties against the given bean factory._@throws BeanInitializationException if any properties cannot be loaded;@Override_	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {_		try {_			Properties mergedProps = mergeProperties()___			_			convertProperties(mergedProps)___			_			processProperties(beanFactory, mergedProps)__		}_		catch (IOException ex) {_			throw new BeanInitializationException("Could not load properties", ex)__		}_	};linkplain,merge,properties,merge,linkplain,convert,properties,convert,and,linkplain,process,properties,process,properties,against,the,given,bean,factory,throws,bean,initialization,exception,if,any,properties,cannot,be,loaded;override,public,void,post,process,bean,factory,configurable,listable,bean,factory,bean,factory,throws,beans,exception,try,properties,merged,props,merge,properties,convert,properties,merged,props,process,properties,bean,factory,merged,props,catch,ioexception,ex,throw,new,bean,initialization,exception,could,not,load,properties,ex
PropertyResourceConfigurer -> @Override 	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException;1368482696;{@linkplain #mergeProperties Merge}, {@linkplain #convertProperties convert} and_{@linkplain #processProperties process} properties against the given bean factory._@throws BeanInitializationException if any properties cannot be loaded;@Override_	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {_		try {_			Properties mergedProps = mergeProperties()___			_			convertProperties(mergedProps)___			_			processProperties(beanFactory, mergedProps)__		}_		catch (IOException ex) {_			throw new BeanInitializationException("Could not load properties", ex)__		}_	};linkplain,merge,properties,merge,linkplain,convert,properties,convert,and,linkplain,process,properties,process,properties,against,the,given,bean,factory,throws,bean,initialization,exception,if,any,properties,cannot,be,loaded;override,public,void,post,process,bean,factory,configurable,listable,bean,factory,bean,factory,throws,beans,exception,try,properties,merged,props,merge,properties,convert,properties,merged,props,process,properties,bean,factory,merged,props,catch,ioexception,ex,throw,new,bean,initialization,exception,could,not,load,properties,ex
