commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the source Set, typically populated via XML "set" elements.  */ ;/**  * Set the source Set, typically populated via XML "set" elements.  */ public void setSourceSet(Set<?> sourceSet) {     this.sourceSet = sourceSet. }
true;public;1;10;/**  * Set the class to use for the target Set. Can be populated with a fully  * qualified class name when defined in a Spring application context.  * <p>Default is a linked HashSet, keeping the registration order.  * @see java.util.LinkedHashSet  */ ;/**  * Set the class to use for the target Set. Can be populated with a fully  * qualified class name when defined in a Spring application context.  * <p>Default is a linked HashSet, keeping the registration order.  * @see java.util.LinkedHashSet  */ @SuppressWarnings("rawtypes") public void setTargetSetClass(@Nullable Class<? extends Set> targetSetClass) {     if (targetSetClass == null) {         throw new IllegalArgumentException("'targetSetClass' must not be null").     }     if (!Set.class.isAssignableFrom(targetSetClass)) {         throw new IllegalArgumentException("'targetSetClass' must implement [java.util.Set]").     }     this.targetSetClass = targetSetClass. }
false;public;0;5;;@Override @SuppressWarnings("rawtypes") public Class<Set> getObjectType() {     return Set.class. }
false;protected;0;28;;@Override @SuppressWarnings("unchecked") protected Set<Object> createInstance() {     if (this.sourceSet == null) {         throw new IllegalArgumentException("'sourceSet' is required").     }     Set<Object> result = null.     if (this.targetSetClass != null) {         result = BeanUtils.instantiateClass(this.targetSetClass).     } else {         result = new LinkedHashSet<>(this.sourceSet.size()).     }     Class<?> valueType = null.     if (this.targetSetClass != null) {         valueType = ResolvableType.forClass(this.targetSetClass).asCollection().resolveGeneric().     }     if (valueType != null) {         TypeConverter converter = getBeanTypeConverter().         for (Object elem : this.sourceSet) {             result.add(converter.convertIfNecessary(elem, valueType)).         }     } else {         result.addAll(this.sourceSet).     }     return result. }
