# id;timestamp;commentText;codeText;commentWords;codeWords
SingletonBeanRegistry -> int getSingletonCount()_;1328020251;Return the number of singleton beans registered in this registry._<p>Only checks already instantiated singletons_ does not count_singleton bean definitions which have not been instantiated yet._<p>The main purpose of this method is to check manually registered singletons_(see {@link #registerSingleton}). Can also be used to count the number of_singletons defined by a bean definition that have already been created._@return the number of singleton beans_@see #registerSingleton_@see org.springframework.beans.factory.support.BeanDefinitionRegistry#getBeanDefinitionCount_@see org.springframework.beans.factory.ListableBeanFactory#getBeanDefinitionCount;int getSingletonCount()_;return,the,number,of,singleton,beans,registered,in,this,registry,p,only,checks,already,instantiated,singletons,does,not,count,singleton,bean,definitions,which,have,not,been,instantiated,yet,p,the,main,purpose,of,this,method,is,to,check,manually,registered,singletons,see,link,register,singleton,can,also,be,used,to,count,the,number,of,singletons,defined,by,a,bean,definition,that,have,already,been,created,return,the,number,of,singleton,beans,see,register,singleton,see,org,springframework,beans,factory,support,bean,definition,registry,get,bean,definition,count,see,org,springframework,beans,factory,listable,bean,factory,get,bean,definition,count;int,get,singleton,count
SingletonBeanRegistry -> int getSingletonCount()_;1356735495;Return the number of singleton beans registered in this registry._<p>Only checks already instantiated singletons_ does not count_singleton bean definitions which have not been instantiated yet._<p>The main purpose of this method is to check manually registered singletons_(see {@link #registerSingleton}). Can also be used to count the number of_singletons defined by a bean definition that have already been created._@return the number of singleton beans_@see #registerSingleton_@see org.springframework.beans.factory.support.BeanDefinitionRegistry#getBeanDefinitionCount_@see org.springframework.beans.factory.ListableBeanFactory#getBeanDefinitionCount;int getSingletonCount()_;return,the,number,of,singleton,beans,registered,in,this,registry,p,only,checks,already,instantiated,singletons,does,not,count,singleton,bean,definitions,which,have,not,been,instantiated,yet,p,the,main,purpose,of,this,method,is,to,check,manually,registered,singletons,see,link,register,singleton,can,also,be,used,to,count,the,number,of,singletons,defined,by,a,bean,definition,that,have,already,been,created,return,the,number,of,singleton,beans,see,register,singleton,see,org,springframework,beans,factory,support,bean,definition,registry,get,bean,definition,count,see,org,springframework,beans,factory,listable,bean,factory,get,bean,definition,count;int,get,singleton,count
SingletonBeanRegistry -> int getSingletonCount()_;1424972106;Return the number of singleton beans registered in this registry._<p>Only checks already instantiated singletons_ does not count_singleton bean definitions which have not been instantiated yet._<p>The main purpose of this method is to check manually registered singletons_(see {@link #registerSingleton}). Can also be used to count the number of_singletons defined by a bean definition that have already been created._@return the number of singleton beans_@see #registerSingleton_@see org.springframework.beans.factory.support.BeanDefinitionRegistry#getBeanDefinitionCount_@see org.springframework.beans.factory.ListableBeanFactory#getBeanDefinitionCount;int getSingletonCount()_;return,the,number,of,singleton,beans,registered,in,this,registry,p,only,checks,already,instantiated,singletons,does,not,count,singleton,bean,definitions,which,have,not,been,instantiated,yet,p,the,main,purpose,of,this,method,is,to,check,manually,registered,singletons,see,link,register,singleton,can,also,be,used,to,count,the,number,of,singletons,defined,by,a,bean,definition,that,have,already,been,created,return,the,number,of,singleton,beans,see,register,singleton,see,org,springframework,beans,factory,support,bean,definition,registry,get,bean,definition,count,see,org,springframework,beans,factory,listable,bean,factory,get,bean,definition,count;int,get,singleton,count
SingletonBeanRegistry -> int getSingletonCount()_;1495868221;Return the number of singleton beans registered in this registry._<p>Only checks already instantiated singletons_ does not count_singleton bean definitions which have not been instantiated yet._<p>The main purpose of this method is to check manually registered singletons_(see {@link #registerSingleton}). Can also be used to count the number of_singletons defined by a bean definition that have already been created._@return the number of singleton beans_@see #registerSingleton_@see org.springframework.beans.factory.support.BeanDefinitionRegistry#getBeanDefinitionCount_@see org.springframework.beans.factory.ListableBeanFactory#getBeanDefinitionCount;int getSingletonCount()_;return,the,number,of,singleton,beans,registered,in,this,registry,p,only,checks,already,instantiated,singletons,does,not,count,singleton,bean,definitions,which,have,not,been,instantiated,yet,p,the,main,purpose,of,this,method,is,to,check,manually,registered,singletons,see,link,register,singleton,can,also,be,used,to,count,the,number,of,singletons,defined,by,a,bean,definition,that,have,already,been,created,return,the,number,of,singleton,beans,see,register,singleton,see,org,springframework,beans,factory,support,bean,definition,registry,get,bean,definition,count,see,org,springframework,beans,factory,listable,bean,factory,get,bean,definition,count;int,get,singleton,count
SingletonBeanRegistry -> String[] getSingletonNames()_;1328020251;Return the names of singleton beans registered in this registry._<p>Only checks already instantiated singletons_ does not return names_for singleton bean definitions which have not been instantiated yet._<p>The main purpose of this method is to check manually registered singletons_(see {@link #registerSingleton}). Can also be used to check which singletons_defined by a bean definition have already been created._@return the list of names as a String array (never <code>null</code>)_@see #registerSingleton_@see org.springframework.beans.factory.support.BeanDefinitionRegistry#getBeanDefinitionNames_@see org.springframework.beans.factory.ListableBeanFactory#getBeanDefinitionNames;String[] getSingletonNames()_;return,the,names,of,singleton,beans,registered,in,this,registry,p,only,checks,already,instantiated,singletons,does,not,return,names,for,singleton,bean,definitions,which,have,not,been,instantiated,yet,p,the,main,purpose,of,this,method,is,to,check,manually,registered,singletons,see,link,register,singleton,can,also,be,used,to,check,which,singletons,defined,by,a,bean,definition,have,already,been,created,return,the,list,of,names,as,a,string,array,never,code,null,code,see,register,singleton,see,org,springframework,beans,factory,support,bean,definition,registry,get,bean,definition,names,see,org,springframework,beans,factory,listable,bean,factory,get,bean,definition,names;string,get,singleton,names
SingletonBeanRegistry -> String[] getSingletonNames()_;1356735495;Return the names of singleton beans registered in this registry._<p>Only checks already instantiated singletons_ does not return names_for singleton bean definitions which have not been instantiated yet._<p>The main purpose of this method is to check manually registered singletons_(see {@link #registerSingleton}). Can also be used to check which singletons_defined by a bean definition have already been created._@return the list of names as a String array (never {@code null})_@see #registerSingleton_@see org.springframework.beans.factory.support.BeanDefinitionRegistry#getBeanDefinitionNames_@see org.springframework.beans.factory.ListableBeanFactory#getBeanDefinitionNames;String[] getSingletonNames()_;return,the,names,of,singleton,beans,registered,in,this,registry,p,only,checks,already,instantiated,singletons,does,not,return,names,for,singleton,bean,definitions,which,have,not,been,instantiated,yet,p,the,main,purpose,of,this,method,is,to,check,manually,registered,singletons,see,link,register,singleton,can,also,be,used,to,check,which,singletons,defined,by,a,bean,definition,have,already,been,created,return,the,list,of,names,as,a,string,array,never,code,null,see,register,singleton,see,org,springframework,beans,factory,support,bean,definition,registry,get,bean,definition,names,see,org,springframework,beans,factory,listable,bean,factory,get,bean,definition,names;string,get,singleton,names
SingletonBeanRegistry -> String[] getSingletonNames()_;1424972106;Return the names of singleton beans registered in this registry._<p>Only checks already instantiated singletons_ does not return names_for singleton bean definitions which have not been instantiated yet._<p>The main purpose of this method is to check manually registered singletons_(see {@link #registerSingleton}). Can also be used to check which singletons_defined by a bean definition have already been created._@return the list of names as a String array (never {@code null})_@see #registerSingleton_@see org.springframework.beans.factory.support.BeanDefinitionRegistry#getBeanDefinitionNames_@see org.springframework.beans.factory.ListableBeanFactory#getBeanDefinitionNames;String[] getSingletonNames()_;return,the,names,of,singleton,beans,registered,in,this,registry,p,only,checks,already,instantiated,singletons,does,not,return,names,for,singleton,bean,definitions,which,have,not,been,instantiated,yet,p,the,main,purpose,of,this,method,is,to,check,manually,registered,singletons,see,link,register,singleton,can,also,be,used,to,check,which,singletons,defined,by,a,bean,definition,have,already,been,created,return,the,list,of,names,as,a,string,array,never,code,null,see,register,singleton,see,org,springframework,beans,factory,support,bean,definition,registry,get,bean,definition,names,see,org,springframework,beans,factory,listable,bean,factory,get,bean,definition,names;string,get,singleton,names
SingletonBeanRegistry -> String[] getSingletonNames()_;1495868221;Return the names of singleton beans registered in this registry._<p>Only checks already instantiated singletons_ does not return names_for singleton bean definitions which have not been instantiated yet._<p>The main purpose of this method is to check manually registered singletons_(see {@link #registerSingleton}). Can also be used to check which singletons_defined by a bean definition have already been created._@return the list of names as a String array (never {@code null})_@see #registerSingleton_@see org.springframework.beans.factory.support.BeanDefinitionRegistry#getBeanDefinitionNames_@see org.springframework.beans.factory.ListableBeanFactory#getBeanDefinitionNames;String[] getSingletonNames()_;return,the,names,of,singleton,beans,registered,in,this,registry,p,only,checks,already,instantiated,singletons,does,not,return,names,for,singleton,bean,definitions,which,have,not,been,instantiated,yet,p,the,main,purpose,of,this,method,is,to,check,manually,registered,singletons,see,link,register,singleton,can,also,be,used,to,check,which,singletons,defined,by,a,bean,definition,have,already,been,created,return,the,list,of,names,as,a,string,array,never,code,null,see,register,singleton,see,org,springframework,beans,factory,support,bean,definition,registry,get,bean,definition,names,see,org,springframework,beans,factory,listable,bean,factory,get,bean,definition,names;string,get,singleton,names
SingletonBeanRegistry -> void registerSingleton(String beanName, Object singletonObject)_;1328020251;Register the given existing object as singleton in the bean registry,_under the given bean name._<p>The given instance is supposed to be fully initialized_ the registry_will not perform any initialization callbacks (in particular, it won't_call InitializingBean's <code>afterPropertiesSet</code> method)._The given instance will not receive any destruction callbacks_(like DisposableBean's <code>destroy</code> method) either._<p>When running within a full BeanFactory: <b>Register a bean definition_instead of an existing instance if your bean is supposed to receive_initialization and/or destruction callbacks.</b>_<p>Typically invoked during registry configuration, but can also be used_for runtime registration of singletons. As a consequence, a registry_implementation should synchronize singleton access_ it will have to do_this anyway if it supports a BeanFactory's lazy initialization of singletons._@param beanName the name of the bean_@param singletonObject the existing singleton object_@see org.springframework.beans.factory.InitializingBean#afterPropertiesSet_@see org.springframework.beans.factory.DisposableBean#destroy_@see org.springframework.beans.factory.support.BeanDefinitionRegistry#registerBeanDefinition;void registerSingleton(String beanName, Object singletonObject)_;register,the,given,existing,object,as,singleton,in,the,bean,registry,under,the,given,bean,name,p,the,given,instance,is,supposed,to,be,fully,initialized,the,registry,will,not,perform,any,initialization,callbacks,in,particular,it,won,t,call,initializing,bean,s,code,after,properties,set,code,method,the,given,instance,will,not,receive,any,destruction,callbacks,like,disposable,bean,s,code,destroy,code,method,either,p,when,running,within,a,full,bean,factory,b,register,a,bean,definition,instead,of,an,existing,instance,if,your,bean,is,supposed,to,receive,initialization,and,or,destruction,callbacks,b,p,typically,invoked,during,registry,configuration,but,can,also,be,used,for,runtime,registration,of,singletons,as,a,consequence,a,registry,implementation,should,synchronize,singleton,access,it,will,have,to,do,this,anyway,if,it,supports,a,bean,factory,s,lazy,initialization,of,singletons,param,bean,name,the,name,of,the,bean,param,singleton,object,the,existing,singleton,object,see,org,springframework,beans,factory,initializing,bean,after,properties,set,see,org,springframework,beans,factory,disposable,bean,destroy,see,org,springframework,beans,factory,support,bean,definition,registry,register,bean,definition;void,register,singleton,string,bean,name,object,singleton,object
SingletonBeanRegistry -> void registerSingleton(String beanName, Object singletonObject)_;1356735495;Register the given existing object as singleton in the bean registry,_under the given bean name._<p>The given instance is supposed to be fully initialized_ the registry_will not perform any initialization callbacks (in particular, it won't_call InitializingBean's {@code afterPropertiesSet} method)._The given instance will not receive any destruction callbacks_(like DisposableBean's {@code destroy} method) either._<p>When running within a full BeanFactory: <b>Register a bean definition_instead of an existing instance if your bean is supposed to receive_initialization and/or destruction callbacks.</b>_<p>Typically invoked during registry configuration, but can also be used_for runtime registration of singletons. As a consequence, a registry_implementation should synchronize singleton access_ it will have to do_this anyway if it supports a BeanFactory's lazy initialization of singletons._@param beanName the name of the bean_@param singletonObject the existing singleton object_@see org.springframework.beans.factory.InitializingBean#afterPropertiesSet_@see org.springframework.beans.factory.DisposableBean#destroy_@see org.springframework.beans.factory.support.BeanDefinitionRegistry#registerBeanDefinition;void registerSingleton(String beanName, Object singletonObject)_;register,the,given,existing,object,as,singleton,in,the,bean,registry,under,the,given,bean,name,p,the,given,instance,is,supposed,to,be,fully,initialized,the,registry,will,not,perform,any,initialization,callbacks,in,particular,it,won,t,call,initializing,bean,s,code,after,properties,set,method,the,given,instance,will,not,receive,any,destruction,callbacks,like,disposable,bean,s,code,destroy,method,either,p,when,running,within,a,full,bean,factory,b,register,a,bean,definition,instead,of,an,existing,instance,if,your,bean,is,supposed,to,receive,initialization,and,or,destruction,callbacks,b,p,typically,invoked,during,registry,configuration,but,can,also,be,used,for,runtime,registration,of,singletons,as,a,consequence,a,registry,implementation,should,synchronize,singleton,access,it,will,have,to,do,this,anyway,if,it,supports,a,bean,factory,s,lazy,initialization,of,singletons,param,bean,name,the,name,of,the,bean,param,singleton,object,the,existing,singleton,object,see,org,springframework,beans,factory,initializing,bean,after,properties,set,see,org,springframework,beans,factory,disposable,bean,destroy,see,org,springframework,beans,factory,support,bean,definition,registry,register,bean,definition;void,register,singleton,string,bean,name,object,singleton,object
SingletonBeanRegistry -> void registerSingleton(String beanName, Object singletonObject)_;1424972106;Register the given existing object as singleton in the bean registry,_under the given bean name._<p>The given instance is supposed to be fully initialized_ the registry_will not perform any initialization callbacks (in particular, it won't_call InitializingBean's {@code afterPropertiesSet} method)._The given instance will not receive any destruction callbacks_(like DisposableBean's {@code destroy} method) either._<p>When running within a full BeanFactory: <b>Register a bean definition_instead of an existing instance if your bean is supposed to receive_initialization and/or destruction callbacks.</b>_<p>Typically invoked during registry configuration, but can also be used_for runtime registration of singletons. As a consequence, a registry_implementation should synchronize singleton access_ it will have to do_this anyway if it supports a BeanFactory's lazy initialization of singletons._@param beanName the name of the bean_@param singletonObject the existing singleton object_@see org.springframework.beans.factory.InitializingBean#afterPropertiesSet_@see org.springframework.beans.factory.DisposableBean#destroy_@see org.springframework.beans.factory.support.BeanDefinitionRegistry#registerBeanDefinition;void registerSingleton(String beanName, Object singletonObject)_;register,the,given,existing,object,as,singleton,in,the,bean,registry,under,the,given,bean,name,p,the,given,instance,is,supposed,to,be,fully,initialized,the,registry,will,not,perform,any,initialization,callbacks,in,particular,it,won,t,call,initializing,bean,s,code,after,properties,set,method,the,given,instance,will,not,receive,any,destruction,callbacks,like,disposable,bean,s,code,destroy,method,either,p,when,running,within,a,full,bean,factory,b,register,a,bean,definition,instead,of,an,existing,instance,if,your,bean,is,supposed,to,receive,initialization,and,or,destruction,callbacks,b,p,typically,invoked,during,registry,configuration,but,can,also,be,used,for,runtime,registration,of,singletons,as,a,consequence,a,registry,implementation,should,synchronize,singleton,access,it,will,have,to,do,this,anyway,if,it,supports,a,bean,factory,s,lazy,initialization,of,singletons,param,bean,name,the,name,of,the,bean,param,singleton,object,the,existing,singleton,object,see,org,springframework,beans,factory,initializing,bean,after,properties,set,see,org,springframework,beans,factory,disposable,bean,destroy,see,org,springframework,beans,factory,support,bean,definition,registry,register,bean,definition;void,register,singleton,string,bean,name,object,singleton,object
SingletonBeanRegistry -> void registerSingleton(String beanName, Object singletonObject)_;1495868221;Register the given existing object as singleton in the bean registry,_under the given bean name._<p>The given instance is supposed to be fully initialized_ the registry_will not perform any initialization callbacks (in particular, it won't_call InitializingBean's {@code afterPropertiesSet} method)._The given instance will not receive any destruction callbacks_(like DisposableBean's {@code destroy} method) either._<p>When running within a full BeanFactory: <b>Register a bean definition_instead of an existing instance if your bean is supposed to receive_initialization and/or destruction callbacks.</b>_<p>Typically invoked during registry configuration, but can also be used_for runtime registration of singletons. As a consequence, a registry_implementation should synchronize singleton access_ it will have to do_this anyway if it supports a BeanFactory's lazy initialization of singletons._@param beanName the name of the bean_@param singletonObject the existing singleton object_@see org.springframework.beans.factory.InitializingBean#afterPropertiesSet_@see org.springframework.beans.factory.DisposableBean#destroy_@see org.springframework.beans.factory.support.BeanDefinitionRegistry#registerBeanDefinition;void registerSingleton(String beanName, Object singletonObject)_;register,the,given,existing,object,as,singleton,in,the,bean,registry,under,the,given,bean,name,p,the,given,instance,is,supposed,to,be,fully,initialized,the,registry,will,not,perform,any,initialization,callbacks,in,particular,it,won,t,call,initializing,bean,s,code,after,properties,set,method,the,given,instance,will,not,receive,any,destruction,callbacks,like,disposable,bean,s,code,destroy,method,either,p,when,running,within,a,full,bean,factory,b,register,a,bean,definition,instead,of,an,existing,instance,if,your,bean,is,supposed,to,receive,initialization,and,or,destruction,callbacks,b,p,typically,invoked,during,registry,configuration,but,can,also,be,used,for,runtime,registration,of,singletons,as,a,consequence,a,registry,implementation,should,synchronize,singleton,access,it,will,have,to,do,this,anyway,if,it,supports,a,bean,factory,s,lazy,initialization,of,singletons,param,bean,name,the,name,of,the,bean,param,singleton,object,the,existing,singleton,object,see,org,springframework,beans,factory,initializing,bean,after,properties,set,see,org,springframework,beans,factory,disposable,bean,destroy,see,org,springframework,beans,factory,support,bean,definition,registry,register,bean,definition;void,register,singleton,string,bean,name,object,singleton,object
SingletonBeanRegistry -> boolean containsSingleton(String beanName)_;1328020251;Check if this registry contains a singleton instance with the given name._<p>Only checks already instantiated singletons_ does not return <code>true</code>_for singleton bean definitions which have not been instantiated yet._<p>The main purpose of this method is to check manually registered singletons_(see {@link #registerSingleton}). Can also be used to check whether a_singleton defined by a bean definition has already been created._<p>To check whether a bean factory contains a bean definition with a given name,_use ListableBeanFactory's <code>containsBeanDefinition</code>. Calling both_<code>containsBeanDefinition</code> and <code>containsSingleton</code> answers_whether a specific bean factory contains a local bean instance with the given name._<p>Use BeanFactory's <code>containsBean</code> for general checks whether the_factory knows about a bean with a given name (whether manually registered singleton_instance or created by bean definition), also checking ancestor factories._<p><b>NOTE:</b> This lookup method is not aware of FactoryBean prefixes or aliases._You need to resolve the canonical bean name first before checking the singleton status._@param beanName the name of the bean to look for_@return if this bean factory contains a singleton instance with the given name_@see #registerSingleton_@see org.springframework.beans.factory.ListableBeanFactory#containsBeanDefinition_@see org.springframework.beans.factory.BeanFactory#containsBean;boolean containsSingleton(String beanName)_;check,if,this,registry,contains,a,singleton,instance,with,the,given,name,p,only,checks,already,instantiated,singletons,does,not,return,code,true,code,for,singleton,bean,definitions,which,have,not,been,instantiated,yet,p,the,main,purpose,of,this,method,is,to,check,manually,registered,singletons,see,link,register,singleton,can,also,be,used,to,check,whether,a,singleton,defined,by,a,bean,definition,has,already,been,created,p,to,check,whether,a,bean,factory,contains,a,bean,definition,with,a,given,name,use,listable,bean,factory,s,code,contains,bean,definition,code,calling,both,code,contains,bean,definition,code,and,code,contains,singleton,code,answers,whether,a,specific,bean,factory,contains,a,local,bean,instance,with,the,given,name,p,use,bean,factory,s,code,contains,bean,code,for,general,checks,whether,the,factory,knows,about,a,bean,with,a,given,name,whether,manually,registered,singleton,instance,or,created,by,bean,definition,also,checking,ancestor,factories,p,b,note,b,this,lookup,method,is,not,aware,of,factory,bean,prefixes,or,aliases,you,need,to,resolve,the,canonical,bean,name,first,before,checking,the,singleton,status,param,bean,name,the,name,of,the,bean,to,look,for,return,if,this,bean,factory,contains,a,singleton,instance,with,the,given,name,see,register,singleton,see,org,springframework,beans,factory,listable,bean,factory,contains,bean,definition,see,org,springframework,beans,factory,bean,factory,contains,bean;boolean,contains,singleton,string,bean,name
SingletonBeanRegistry -> boolean containsSingleton(String beanName)_;1356735495;Check if this registry contains a singleton instance with the given name._<p>Only checks already instantiated singletons_ does not return {@code true}_for singleton bean definitions which have not been instantiated yet._<p>The main purpose of this method is to check manually registered singletons_(see {@link #registerSingleton}). Can also be used to check whether a_singleton defined by a bean definition has already been created._<p>To check whether a bean factory contains a bean definition with a given name,_use ListableBeanFactory's {@code containsBeanDefinition}. Calling both_{@code containsBeanDefinition} and {@code containsSingleton} answers_whether a specific bean factory contains a local bean instance with the given name._<p>Use BeanFactory's {@code containsBean} for general checks whether the_factory knows about a bean with a given name (whether manually registered singleton_instance or created by bean definition), also checking ancestor factories._<p><b>NOTE:</b> This lookup method is not aware of FactoryBean prefixes or aliases._You need to resolve the canonical bean name first before checking the singleton status._@param beanName the name of the bean to look for_@return if this bean factory contains a singleton instance with the given name_@see #registerSingleton_@see org.springframework.beans.factory.ListableBeanFactory#containsBeanDefinition_@see org.springframework.beans.factory.BeanFactory#containsBean;boolean containsSingleton(String beanName)_;check,if,this,registry,contains,a,singleton,instance,with,the,given,name,p,only,checks,already,instantiated,singletons,does,not,return,code,true,for,singleton,bean,definitions,which,have,not,been,instantiated,yet,p,the,main,purpose,of,this,method,is,to,check,manually,registered,singletons,see,link,register,singleton,can,also,be,used,to,check,whether,a,singleton,defined,by,a,bean,definition,has,already,been,created,p,to,check,whether,a,bean,factory,contains,a,bean,definition,with,a,given,name,use,listable,bean,factory,s,code,contains,bean,definition,calling,both,code,contains,bean,definition,and,code,contains,singleton,answers,whether,a,specific,bean,factory,contains,a,local,bean,instance,with,the,given,name,p,use,bean,factory,s,code,contains,bean,for,general,checks,whether,the,factory,knows,about,a,bean,with,a,given,name,whether,manually,registered,singleton,instance,or,created,by,bean,definition,also,checking,ancestor,factories,p,b,note,b,this,lookup,method,is,not,aware,of,factory,bean,prefixes,or,aliases,you,need,to,resolve,the,canonical,bean,name,first,before,checking,the,singleton,status,param,bean,name,the,name,of,the,bean,to,look,for,return,if,this,bean,factory,contains,a,singleton,instance,with,the,given,name,see,register,singleton,see,org,springframework,beans,factory,listable,bean,factory,contains,bean,definition,see,org,springframework,beans,factory,bean,factory,contains,bean;boolean,contains,singleton,string,bean,name
SingletonBeanRegistry -> boolean containsSingleton(String beanName)_;1424972106;Check if this registry contains a singleton instance with the given name._<p>Only checks already instantiated singletons_ does not return {@code true}_for singleton bean definitions which have not been instantiated yet._<p>The main purpose of this method is to check manually registered singletons_(see {@link #registerSingleton}). Can also be used to check whether a_singleton defined by a bean definition has already been created._<p>To check whether a bean factory contains a bean definition with a given name,_use ListableBeanFactory's {@code containsBeanDefinition}. Calling both_{@code containsBeanDefinition} and {@code containsSingleton} answers_whether a specific bean factory contains a local bean instance with the given name._<p>Use BeanFactory's {@code containsBean} for general checks whether the_factory knows about a bean with a given name (whether manually registered singleton_instance or created by bean definition), also checking ancestor factories._<p><b>NOTE:</b> This lookup method is not aware of FactoryBean prefixes or aliases._You need to resolve the canonical bean name first before checking the singleton status._@param beanName the name of the bean to look for_@return if this bean factory contains a singleton instance with the given name_@see #registerSingleton_@see org.springframework.beans.factory.ListableBeanFactory#containsBeanDefinition_@see org.springframework.beans.factory.BeanFactory#containsBean;boolean containsSingleton(String beanName)_;check,if,this,registry,contains,a,singleton,instance,with,the,given,name,p,only,checks,already,instantiated,singletons,does,not,return,code,true,for,singleton,bean,definitions,which,have,not,been,instantiated,yet,p,the,main,purpose,of,this,method,is,to,check,manually,registered,singletons,see,link,register,singleton,can,also,be,used,to,check,whether,a,singleton,defined,by,a,bean,definition,has,already,been,created,p,to,check,whether,a,bean,factory,contains,a,bean,definition,with,a,given,name,use,listable,bean,factory,s,code,contains,bean,definition,calling,both,code,contains,bean,definition,and,code,contains,singleton,answers,whether,a,specific,bean,factory,contains,a,local,bean,instance,with,the,given,name,p,use,bean,factory,s,code,contains,bean,for,general,checks,whether,the,factory,knows,about,a,bean,with,a,given,name,whether,manually,registered,singleton,instance,or,created,by,bean,definition,also,checking,ancestor,factories,p,b,note,b,this,lookup,method,is,not,aware,of,factory,bean,prefixes,or,aliases,you,need,to,resolve,the,canonical,bean,name,first,before,checking,the,singleton,status,param,bean,name,the,name,of,the,bean,to,look,for,return,if,this,bean,factory,contains,a,singleton,instance,with,the,given,name,see,register,singleton,see,org,springframework,beans,factory,listable,bean,factory,contains,bean,definition,see,org,springframework,beans,factory,bean,factory,contains,bean;boolean,contains,singleton,string,bean,name
SingletonBeanRegistry -> boolean containsSingleton(String beanName)_;1495868221;Check if this registry contains a singleton instance with the given name._<p>Only checks already instantiated singletons_ does not return {@code true}_for singleton bean definitions which have not been instantiated yet._<p>The main purpose of this method is to check manually registered singletons_(see {@link #registerSingleton}). Can also be used to check whether a_singleton defined by a bean definition has already been created._<p>To check whether a bean factory contains a bean definition with a given name,_use ListableBeanFactory's {@code containsBeanDefinition}. Calling both_{@code containsBeanDefinition} and {@code containsSingleton} answers_whether a specific bean factory contains a local bean instance with the given name._<p>Use BeanFactory's {@code containsBean} for general checks whether the_factory knows about a bean with a given name (whether manually registered singleton_instance or created by bean definition), also checking ancestor factories._<p><b>NOTE:</b> This lookup method is not aware of FactoryBean prefixes or aliases._You need to resolve the canonical bean name first before checking the singleton status._@param beanName the name of the bean to look for_@return if this bean factory contains a singleton instance with the given name_@see #registerSingleton_@see org.springframework.beans.factory.ListableBeanFactory#containsBeanDefinition_@see org.springframework.beans.factory.BeanFactory#containsBean;boolean containsSingleton(String beanName)_;check,if,this,registry,contains,a,singleton,instance,with,the,given,name,p,only,checks,already,instantiated,singletons,does,not,return,code,true,for,singleton,bean,definitions,which,have,not,been,instantiated,yet,p,the,main,purpose,of,this,method,is,to,check,manually,registered,singletons,see,link,register,singleton,can,also,be,used,to,check,whether,a,singleton,defined,by,a,bean,definition,has,already,been,created,p,to,check,whether,a,bean,factory,contains,a,bean,definition,with,a,given,name,use,listable,bean,factory,s,code,contains,bean,definition,calling,both,code,contains,bean,definition,and,code,contains,singleton,answers,whether,a,specific,bean,factory,contains,a,local,bean,instance,with,the,given,name,p,use,bean,factory,s,code,contains,bean,for,general,checks,whether,the,factory,knows,about,a,bean,with,a,given,name,whether,manually,registered,singleton,instance,or,created,by,bean,definition,also,checking,ancestor,factories,p,b,note,b,this,lookup,method,is,not,aware,of,factory,bean,prefixes,or,aliases,you,need,to,resolve,the,canonical,bean,name,first,before,checking,the,singleton,status,param,bean,name,the,name,of,the,bean,to,look,for,return,if,this,bean,factory,contains,a,singleton,instance,with,the,given,name,see,register,singleton,see,org,springframework,beans,factory,listable,bean,factory,contains,bean,definition,see,org,springframework,beans,factory,bean,factory,contains,bean;boolean,contains,singleton,string,bean,name
SingletonBeanRegistry -> Object getSingletonMutex()_;1424972106;Return the singleton mutex used by this registry (for external collaborators)._@return the mutex object (never {@code null})_@since 4.2;Object getSingletonMutex()_;return,the,singleton,mutex,used,by,this,registry,for,external,collaborators,return,the,mutex,object,never,code,null,since,4,2;object,get,singleton,mutex
SingletonBeanRegistry -> Object getSingletonMutex()_;1495868221;Return the singleton mutex used by this registry (for external collaborators)._@return the mutex object (never {@code null})_@since 4.2;Object getSingletonMutex()_;return,the,singleton,mutex,used,by,this,registry,for,external,collaborators,return,the,mutex,object,never,code,null,since,4,2;object,get,singleton,mutex
SingletonBeanRegistry -> Object getSingleton(String beanName)_;1328020251;Return the (raw) singleton object registered under the given name._<p>Only checks already instantiated singletons_ does not return an Object_for singleton bean definitions which have not been instantiated yet._<p>The main purpose of this method is to access manually registered singletons_(see {@link #registerSingleton}). Can also be used to access a singleton_defined by a bean definition that already been created, in a raw fashion._<p><b>NOTE:</b> This lookup method is not aware of FactoryBean prefixes or aliases._You need to resolve the canonical bean name first before obtaining the singleton instance._@param beanName the name of the bean to look for_@return the registered singleton object, or <code>null</code> if none found_@see ConfigurableListableBeanFactory#getBeanDefinition;Object getSingleton(String beanName)_;return,the,raw,singleton,object,registered,under,the,given,name,p,only,checks,already,instantiated,singletons,does,not,return,an,object,for,singleton,bean,definitions,which,have,not,been,instantiated,yet,p,the,main,purpose,of,this,method,is,to,access,manually,registered,singletons,see,link,register,singleton,can,also,be,used,to,access,a,singleton,defined,by,a,bean,definition,that,already,been,created,in,a,raw,fashion,p,b,note,b,this,lookup,method,is,not,aware,of,factory,bean,prefixes,or,aliases,you,need,to,resolve,the,canonical,bean,name,first,before,obtaining,the,singleton,instance,param,bean,name,the,name,of,the,bean,to,look,for,return,the,registered,singleton,object,or,code,null,code,if,none,found,see,configurable,listable,bean,factory,get,bean,definition;object,get,singleton,string,bean,name
SingletonBeanRegistry -> Object getSingleton(String beanName)_;1356735495;Return the (raw) singleton object registered under the given name._<p>Only checks already instantiated singletons_ does not return an Object_for singleton bean definitions which have not been instantiated yet._<p>The main purpose of this method is to access manually registered singletons_(see {@link #registerSingleton}). Can also be used to access a singleton_defined by a bean definition that already been created, in a raw fashion._<p><b>NOTE:</b> This lookup method is not aware of FactoryBean prefixes or aliases._You need to resolve the canonical bean name first before obtaining the singleton instance._@param beanName the name of the bean to look for_@return the registered singleton object, or {@code null} if none found_@see ConfigurableListableBeanFactory#getBeanDefinition;Object getSingleton(String beanName)_;return,the,raw,singleton,object,registered,under,the,given,name,p,only,checks,already,instantiated,singletons,does,not,return,an,object,for,singleton,bean,definitions,which,have,not,been,instantiated,yet,p,the,main,purpose,of,this,method,is,to,access,manually,registered,singletons,see,link,register,singleton,can,also,be,used,to,access,a,singleton,defined,by,a,bean,definition,that,already,been,created,in,a,raw,fashion,p,b,note,b,this,lookup,method,is,not,aware,of,factory,bean,prefixes,or,aliases,you,need,to,resolve,the,canonical,bean,name,first,before,obtaining,the,singleton,instance,param,bean,name,the,name,of,the,bean,to,look,for,return,the,registered,singleton,object,or,code,null,if,none,found,see,configurable,listable,bean,factory,get,bean,definition;object,get,singleton,string,bean,name
SingletonBeanRegistry -> Object getSingleton(String beanName)_;1424972106;Return the (raw) singleton object registered under the given name._<p>Only checks already instantiated singletons_ does not return an Object_for singleton bean definitions which have not been instantiated yet._<p>The main purpose of this method is to access manually registered singletons_(see {@link #registerSingleton}). Can also be used to access a singleton_defined by a bean definition that already been created, in a raw fashion._<p><b>NOTE:</b> This lookup method is not aware of FactoryBean prefixes or aliases._You need to resolve the canonical bean name first before obtaining the singleton instance._@param beanName the name of the bean to look for_@return the registered singleton object, or {@code null} if none found_@see ConfigurableListableBeanFactory#getBeanDefinition;Object getSingleton(String beanName)_;return,the,raw,singleton,object,registered,under,the,given,name,p,only,checks,already,instantiated,singletons,does,not,return,an,object,for,singleton,bean,definitions,which,have,not,been,instantiated,yet,p,the,main,purpose,of,this,method,is,to,access,manually,registered,singletons,see,link,register,singleton,can,also,be,used,to,access,a,singleton,defined,by,a,bean,definition,that,already,been,created,in,a,raw,fashion,p,b,note,b,this,lookup,method,is,not,aware,of,factory,bean,prefixes,or,aliases,you,need,to,resolve,the,canonical,bean,name,first,before,obtaining,the,singleton,instance,param,bean,name,the,name,of,the,bean,to,look,for,return,the,registered,singleton,object,or,code,null,if,none,found,see,configurable,listable,bean,factory,get,bean,definition;object,get,singleton,string,bean,name
