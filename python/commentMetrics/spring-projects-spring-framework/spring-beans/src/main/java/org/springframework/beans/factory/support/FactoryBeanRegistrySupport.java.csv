# id;timestamp;commentText;codeText;commentWords;codeWords
FactoryBeanRegistrySupport -> @Override 	protected void removeSingleton(String beanName);1328020251;Overridden to clear the FactoryBean object cache as well.;@Override_	protected void removeSingleton(String beanName) {_		super.removeSingleton(beanName)__		this.factoryBeanObjectCache.remove(beanName)__	};overridden,to,clear,the,factory,bean,object,cache,as,well;override,protected,void,remove,singleton,string,bean,name,super,remove,singleton,bean,name,this,factory,bean,object,cache,remove,bean,name
FactoryBeanRegistrySupport -> @Override 	protected void removeSingleton(String beanName);1355352386;Overridden to clear the FactoryBean object cache as well.;@Override_	protected void removeSingleton(String beanName) {_		super.removeSingleton(beanName)__		this.factoryBeanObjectCache.remove(beanName)__	};overridden,to,clear,the,factory,bean,object,cache,as,well;override,protected,void,remove,singleton,string,bean,name,super,remove,singleton,bean,name,this,factory,bean,object,cache,remove,bean,name
FactoryBeanRegistrySupport -> @Override 	protected void removeSingleton(String beanName);1356735495;Overridden to clear the FactoryBean object cache as well.;@Override_	protected void removeSingleton(String beanName) {_		super.removeSingleton(beanName)__		this.factoryBeanObjectCache.remove(beanName)__	};overridden,to,clear,the,factory,bean,object,cache,as,well;override,protected,void,remove,singleton,string,bean,name,super,remove,singleton,bean,name,this,factory,bean,object,cache,remove,bean,name
FactoryBeanRegistrySupport -> @Override 	protected void removeSingleton(String beanName);1357119239;Overridden to clear the FactoryBean object cache as well.;@Override_	protected void removeSingleton(String beanName) {_		super.removeSingleton(beanName)__		this.factoryBeanObjectCache.remove(beanName)__	};overridden,to,clear,the,factory,bean,object,cache,as,well;override,protected,void,remove,singleton,string,bean,name,super,remove,singleton,bean,name,this,factory,bean,object,cache,remove,bean,name
FactoryBeanRegistrySupport -> @Override 	protected void removeSingleton(String beanName);1368482696;Overridden to clear the FactoryBean object cache as well.;@Override_	protected void removeSingleton(String beanName) {_		super.removeSingleton(beanName)__		this.factoryBeanObjectCache.remove(beanName)__	};overridden,to,clear,the,factory,bean,object,cache,as,well;override,protected,void,remove,singleton,string,bean,name,super,remove,singleton,bean,name,this,factory,bean,object,cache,remove,bean,name
FactoryBeanRegistrySupport -> @Override 	protected void removeSingleton(String beanName);1385412762;Overridden to clear the FactoryBean object cache as well.;@Override_	protected void removeSingleton(String beanName) {_		super.removeSingleton(beanName)__		this.factoryBeanObjectCache.remove(beanName)__	};overridden,to,clear,the,factory,bean,object,cache,as,well;override,protected,void,remove,singleton,string,bean,name,super,remove,singleton,bean,name,this,factory,bean,object,cache,remove,bean,name
FactoryBeanRegistrySupport -> @Override 	protected void removeSingleton(String beanName);1386678412;Overridden to clear the FactoryBean object cache as well.;@Override_	protected void removeSingleton(String beanName) {_		super.removeSingleton(beanName)__		this.factoryBeanObjectCache.remove(beanName)__	};overridden,to,clear,the,factory,bean,object,cache,as,well;override,protected,void,remove,singleton,string,bean,name,super,remove,singleton,bean,name,this,factory,bean,object,cache,remove,bean,name
FactoryBeanRegistrySupport -> @Override 	protected void removeSingleton(String beanName);1404251417;Overridden to clear the FactoryBean object cache as well.;@Override_	protected void removeSingleton(String beanName) {_		super.removeSingleton(beanName)__		this.factoryBeanObjectCache.remove(beanName)__	};overridden,to,clear,the,factory,bean,object,cache,as,well;override,protected,void,remove,singleton,string,bean,name,super,remove,singleton,bean,name,this,factory,bean,object,cache,remove,bean,name
FactoryBeanRegistrySupport -> @Override 	protected void removeSingleton(String beanName);1467730834;Overridden to clear the FactoryBean object cache as well.;@Override_	protected void removeSingleton(String beanName) {_		super.removeSingleton(beanName)__		this.factoryBeanObjectCache.remove(beanName)__	};overridden,to,clear,the,factory,bean,object,cache,as,well;override,protected,void,remove,singleton,string,bean,name,super,remove,singleton,bean,name,this,factory,bean,object,cache,remove,bean,name
FactoryBeanRegistrySupport -> @Override 	protected void removeSingleton(String beanName);1495868221;Overridden to clear the FactoryBean object cache as well.;@Override_	protected void removeSingleton(String beanName) {_		super.removeSingleton(beanName)__		this.factoryBeanObjectCache.remove(beanName)__	};overridden,to,clear,the,factory,bean,object,cache,as,well;override,protected,void,remove,singleton,string,bean,name,super,remove,singleton,bean,name,this,factory,bean,object,cache,remove,bean,name
FactoryBeanRegistrySupport -> @Override 	protected void removeSingleton(String beanName);1496837955;Overridden to clear the FactoryBean object cache as well.;@Override_	protected void removeSingleton(String beanName) {_		super.removeSingleton(beanName)__		this.factoryBeanObjectCache.remove(beanName)__	};overridden,to,clear,the,factory,bean,object,cache,as,well;override,protected,void,remove,singleton,string,bean,name,super,remove,singleton,bean,name,this,factory,bean,object,cache,remove,bean,name
FactoryBeanRegistrySupport -> @Override 	protected void removeSingleton(String beanName);1498849035;Overridden to clear the FactoryBean object cache as well.;@Override_	protected void removeSingleton(String beanName) {_		super.removeSingleton(beanName)__		this.factoryBeanObjectCache.remove(beanName)__	};overridden,to,clear,the,factory,bean,object,cache,as,well;override,protected,void,remove,singleton,string,bean,name,super,remove,singleton,bean,name,this,factory,bean,object,cache,remove,bean,name
FactoryBeanRegistrySupport -> @Override 	protected void removeSingleton(String beanName);1503007895;Overridden to clear the FactoryBean object cache as well.;@Override_	protected void removeSingleton(String beanName) {_		super.removeSingleton(beanName)__		this.factoryBeanObjectCache.remove(beanName)__	};overridden,to,clear,the,factory,bean,object,cache,as,well;override,protected,void,remove,singleton,string,bean,name,super,remove,singleton,bean,name,this,factory,bean,object,cache,remove,bean,name
FactoryBeanRegistrySupport -> @Override 	protected void removeSingleton(String beanName);1518260986;Overridden to clear the FactoryBean object cache as well.;@Override_	protected void removeSingleton(String beanName) {_		super.removeSingleton(beanName)__		this.factoryBeanObjectCache.remove(beanName)__	};overridden,to,clear,the,factory,bean,object,cache,as,well;override,protected,void,remove,singleton,string,bean,name,super,remove,singleton,bean,name,this,factory,bean,object,cache,remove,bean,name
FactoryBeanRegistrySupport -> @Override 	protected void removeSingleton(String beanName);1521822873;Overridden to clear the FactoryBean object cache as well.;@Override_	protected void removeSingleton(String beanName) {_		synchronized (getSingletonMutex()) {_			super.removeSingleton(beanName)__			this.factoryBeanObjectCache.remove(beanName)__		}_	};overridden,to,clear,the,factory,bean,object,cache,as,well;override,protected,void,remove,singleton,string,bean,name,synchronized,get,singleton,mutex,super,remove,singleton,bean,name,this,factory,bean,object,cache,remove,bean,name
FactoryBeanRegistrySupport -> @Override 	protected void removeSingleton(String beanName);1522103043;Overridden to clear the FactoryBean object cache as well.;@Override_	protected void removeSingleton(String beanName) {_		synchronized (getSingletonMutex()) {_			super.removeSingleton(beanName)__			this.factoryBeanObjectCache.remove(beanName)__		}_	};overridden,to,clear,the,factory,bean,object,cache,as,well;override,protected,void,remove,singleton,string,bean,name,synchronized,get,singleton,mutex,super,remove,singleton,bean,name,this,factory,bean,object,cache,remove,bean,name
FactoryBeanRegistrySupport -> @Override 	protected void removeSingleton(String beanName);1525267300;Overridden to clear the FactoryBean object cache as well.;@Override_	protected void removeSingleton(String beanName) {_		synchronized (getSingletonMutex()) {_			super.removeSingleton(beanName)__			this.factoryBeanObjectCache.remove(beanName)__		}_	};overridden,to,clear,the,factory,bean,object,cache,as,well;override,protected,void,remove,singleton,string,bean,name,synchronized,get,singleton,mutex,super,remove,singleton,bean,name,this,factory,bean,object,cache,remove,bean,name
FactoryBeanRegistrySupport -> @Override 	protected void removeSingleton(String beanName);1530174524;Overridden to clear the FactoryBean object cache as well.;@Override_	protected void removeSingleton(String beanName) {_		synchronized (getSingletonMutex()) {_			super.removeSingleton(beanName)__			this.factoryBeanObjectCache.remove(beanName)__		}_	};overridden,to,clear,the,factory,bean,object,cache,as,well;override,protected,void,remove,singleton,string,bean,name,synchronized,get,singleton,mutex,super,remove,singleton,bean,name,this,factory,bean,object,cache,remove,bean,name
FactoryBeanRegistrySupport -> @Override 	protected void removeSingleton(String beanName);1532091916;Overridden to clear the FactoryBean object cache as well.;@Override_	protected void removeSingleton(String beanName) {_		synchronized (getSingletonMutex()) {_			super.removeSingleton(beanName)__			this.factoryBeanObjectCache.remove(beanName)__		}_	};overridden,to,clear,the,factory,bean,object,cache,as,well;override,protected,void,remove,singleton,string,bean,name,synchronized,get,singleton,mutex,super,remove,singleton,bean,name,this,factory,bean,object,cache,remove,bean,name
FactoryBeanRegistrySupport -> protected Object getCachedObjectForFactoryBean(String beanName);1328020251;Obtain an object to expose from the given FactoryBean, if available_in cached form. Quick check for minimal synchronization._@param beanName the name of the bean_@return the object obtained from the FactoryBean,_or <code>null</code> if not available;protected Object getCachedObjectForFactoryBean(String beanName) {_		Object object = this.factoryBeanObjectCache.get(beanName)__		return (object != NULL_OBJECT ? object : null)__	};obtain,an,object,to,expose,from,the,given,factory,bean,if,available,in,cached,form,quick,check,for,minimal,synchronization,param,bean,name,the,name,of,the,bean,return,the,object,obtained,from,the,factory,bean,or,code,null,code,if,not,available;protected,object,get,cached,object,for,factory,bean,string,bean,name,object,object,this,factory,bean,object,cache,get,bean,name,return,object,object,null
FactoryBeanRegistrySupport -> protected Object getCachedObjectForFactoryBean(String beanName);1355352386;Obtain an object to expose from the given FactoryBean, if available_in cached form. Quick check for minimal synchronization._@param beanName the name of the bean_@return the object obtained from the FactoryBean,_or <code>null</code> if not available;protected Object getCachedObjectForFactoryBean(String beanName) {_		Object object = this.factoryBeanObjectCache.get(beanName)__		return (object != NULL_OBJECT ? object : null)__	};obtain,an,object,to,expose,from,the,given,factory,bean,if,available,in,cached,form,quick,check,for,minimal,synchronization,param,bean,name,the,name,of,the,bean,return,the,object,obtained,from,the,factory,bean,or,code,null,code,if,not,available;protected,object,get,cached,object,for,factory,bean,string,bean,name,object,object,this,factory,bean,object,cache,get,bean,name,return,object,object,null
FactoryBeanRegistrySupport -> protected Object getCachedObjectForFactoryBean(String beanName);1356735495;Obtain an object to expose from the given FactoryBean, if available_in cached form. Quick check for minimal synchronization._@param beanName the name of the bean_@return the object obtained from the FactoryBean,_or {@code null} if not available;protected Object getCachedObjectForFactoryBean(String beanName) {_		Object object = this.factoryBeanObjectCache.get(beanName)__		return (object != NULL_OBJECT ? object : null)__	};obtain,an,object,to,expose,from,the,given,factory,bean,if,available,in,cached,form,quick,check,for,minimal,synchronization,param,bean,name,the,name,of,the,bean,return,the,object,obtained,from,the,factory,bean,or,code,null,if,not,available;protected,object,get,cached,object,for,factory,bean,string,bean,name,object,object,this,factory,bean,object,cache,get,bean,name,return,object,object,null
FactoryBeanRegistrySupport -> protected Object getCachedObjectForFactoryBean(String beanName);1357119239;Obtain an object to expose from the given FactoryBean, if available_in cached form. Quick check for minimal synchronization._@param beanName the name of the bean_@return the object obtained from the FactoryBean,_or {@code null} if not available;protected Object getCachedObjectForFactoryBean(String beanName) {_		Object object = this.factoryBeanObjectCache.get(beanName)__		return (object != NULL_OBJECT ? object : null)__	};obtain,an,object,to,expose,from,the,given,factory,bean,if,available,in,cached,form,quick,check,for,minimal,synchronization,param,bean,name,the,name,of,the,bean,return,the,object,obtained,from,the,factory,bean,or,code,null,if,not,available;protected,object,get,cached,object,for,factory,bean,string,bean,name,object,object,this,factory,bean,object,cache,get,bean,name,return,object,object,null
FactoryBeanRegistrySupport -> protected Object getCachedObjectForFactoryBean(String beanName);1368482696;Obtain an object to expose from the given FactoryBean, if available_in cached form. Quick check for minimal synchronization._@param beanName the name of the bean_@return the object obtained from the FactoryBean,_or {@code null} if not available;protected Object getCachedObjectForFactoryBean(String beanName) {_		Object object = this.factoryBeanObjectCache.get(beanName)__		return (object != NULL_OBJECT ? object : null)__	};obtain,an,object,to,expose,from,the,given,factory,bean,if,available,in,cached,form,quick,check,for,minimal,synchronization,param,bean,name,the,name,of,the,bean,return,the,object,obtained,from,the,factory,bean,or,code,null,if,not,available;protected,object,get,cached,object,for,factory,bean,string,bean,name,object,object,this,factory,bean,object,cache,get,bean,name,return,object,object,null
FactoryBeanRegistrySupport -> protected Object getCachedObjectForFactoryBean(String beanName);1385412762;Obtain an object to expose from the given FactoryBean, if available_in cached form. Quick check for minimal synchronization._@param beanName the name of the bean_@return the object obtained from the FactoryBean,_or {@code null} if not available;protected Object getCachedObjectForFactoryBean(String beanName) {_		Object object = this.factoryBeanObjectCache.get(beanName)__		return (object != NULL_OBJECT ? object : null)__	};obtain,an,object,to,expose,from,the,given,factory,bean,if,available,in,cached,form,quick,check,for,minimal,synchronization,param,bean,name,the,name,of,the,bean,return,the,object,obtained,from,the,factory,bean,or,code,null,if,not,available;protected,object,get,cached,object,for,factory,bean,string,bean,name,object,object,this,factory,bean,object,cache,get,bean,name,return,object,object,null
FactoryBeanRegistrySupport -> protected Object getCachedObjectForFactoryBean(String beanName);1386678412;Obtain an object to expose from the given FactoryBean, if available_in cached form. Quick check for minimal synchronization._@param beanName the name of the bean_@return the object obtained from the FactoryBean,_or {@code null} if not available;protected Object getCachedObjectForFactoryBean(String beanName) {_		Object object = this.factoryBeanObjectCache.get(beanName)__		return (object != NULL_OBJECT ? object : null)__	};obtain,an,object,to,expose,from,the,given,factory,bean,if,available,in,cached,form,quick,check,for,minimal,synchronization,param,bean,name,the,name,of,the,bean,return,the,object,obtained,from,the,factory,bean,or,code,null,if,not,available;protected,object,get,cached,object,for,factory,bean,string,bean,name,object,object,this,factory,bean,object,cache,get,bean,name,return,object,object,null
FactoryBeanRegistrySupport -> protected Object getCachedObjectForFactoryBean(String beanName);1404251417;Obtain an object to expose from the given FactoryBean, if available_in cached form. Quick check for minimal synchronization._@param beanName the name of the bean_@return the object obtained from the FactoryBean,_or {@code null} if not available;protected Object getCachedObjectForFactoryBean(String beanName) {_		Object object = this.factoryBeanObjectCache.get(beanName)__		return (object != NULL_OBJECT ? object : null)__	};obtain,an,object,to,expose,from,the,given,factory,bean,if,available,in,cached,form,quick,check,for,minimal,synchronization,param,bean,name,the,name,of,the,bean,return,the,object,obtained,from,the,factory,bean,or,code,null,if,not,available;protected,object,get,cached,object,for,factory,bean,string,bean,name,object,object,this,factory,bean,object,cache,get,bean,name,return,object,object,null
FactoryBeanRegistrySupport -> protected Object getCachedObjectForFactoryBean(String beanName);1467730834;Obtain an object to expose from the given FactoryBean, if available_in cached form. Quick check for minimal synchronization._@param beanName the name of the bean_@return the object obtained from the FactoryBean,_or {@code null} if not available;protected Object getCachedObjectForFactoryBean(String beanName) {_		Object object = this.factoryBeanObjectCache.get(beanName)__		return (object != NULL_OBJECT ? object : null)__	};obtain,an,object,to,expose,from,the,given,factory,bean,if,available,in,cached,form,quick,check,for,minimal,synchronization,param,bean,name,the,name,of,the,bean,return,the,object,obtained,from,the,factory,bean,or,code,null,if,not,available;protected,object,get,cached,object,for,factory,bean,string,bean,name,object,object,this,factory,bean,object,cache,get,bean,name,return,object,object,null
FactoryBeanRegistrySupport -> protected FactoryBean<?> getFactoryBean(String beanName, Object beanInstance) throws BeansException;1386678412;Get a FactoryBean for the given bean if possible._@param beanName the name of the bean_@param beanInstance the corresponding bean instance_@return the bean instance as FactoryBean_@throws BeansException if the given bean cannot be exposed as a FactoryBean;protected FactoryBean<?> getFactoryBean(String beanName, Object beanInstance) throws BeansException {_		if (!(beanInstance instanceof FactoryBean)) {_			throw new BeanCreationException(beanName,_					"Bean instance of type [" + beanInstance.getClass() + "] is not a FactoryBean")__		}_		return (FactoryBean<?>) beanInstance__	};get,a,factory,bean,for,the,given,bean,if,possible,param,bean,name,the,name,of,the,bean,param,bean,instance,the,corresponding,bean,instance,return,the,bean,instance,as,factory,bean,throws,beans,exception,if,the,given,bean,cannot,be,exposed,as,a,factory,bean;protected,factory,bean,get,factory,bean,string,bean,name,object,bean,instance,throws,beans,exception,if,bean,instance,instanceof,factory,bean,throw,new,bean,creation,exception,bean,name,bean,instance,of,type,bean,instance,get,class,is,not,a,factory,bean,return,factory,bean,bean,instance
FactoryBeanRegistrySupport -> protected FactoryBean<?> getFactoryBean(String beanName, Object beanInstance) throws BeansException;1404251417;Get a FactoryBean for the given bean if possible._@param beanName the name of the bean_@param beanInstance the corresponding bean instance_@return the bean instance as FactoryBean_@throws BeansException if the given bean cannot be exposed as a FactoryBean;protected FactoryBean<?> getFactoryBean(String beanName, Object beanInstance) throws BeansException {_		if (!(beanInstance instanceof FactoryBean)) {_			throw new BeanCreationException(beanName,_					"Bean instance of type [" + beanInstance.getClass() + "] is not a FactoryBean")__		}_		return (FactoryBean<?>) beanInstance__	};get,a,factory,bean,for,the,given,bean,if,possible,param,bean,name,the,name,of,the,bean,param,bean,instance,the,corresponding,bean,instance,return,the,bean,instance,as,factory,bean,throws,beans,exception,if,the,given,bean,cannot,be,exposed,as,a,factory,bean;protected,factory,bean,get,factory,bean,string,bean,name,object,bean,instance,throws,beans,exception,if,bean,instance,instanceof,factory,bean,throw,new,bean,creation,exception,bean,name,bean,instance,of,type,bean,instance,get,class,is,not,a,factory,bean,return,factory,bean,bean,instance
FactoryBeanRegistrySupport -> protected FactoryBean<?> getFactoryBean(String beanName, Object beanInstance) throws BeansException;1467730834;Get a FactoryBean for the given bean if possible._@param beanName the name of the bean_@param beanInstance the corresponding bean instance_@return the bean instance as FactoryBean_@throws BeansException if the given bean cannot be exposed as a FactoryBean;protected FactoryBean<?> getFactoryBean(String beanName, Object beanInstance) throws BeansException {_		if (!(beanInstance instanceof FactoryBean)) {_			throw new BeanCreationException(beanName,_					"Bean instance of type [" + beanInstance.getClass() + "] is not a FactoryBean")__		}_		return (FactoryBean<?>) beanInstance__	};get,a,factory,bean,for,the,given,bean,if,possible,param,bean,name,the,name,of,the,bean,param,bean,instance,the,corresponding,bean,instance,return,the,bean,instance,as,factory,bean,throws,beans,exception,if,the,given,bean,cannot,be,exposed,as,a,factory,bean;protected,factory,bean,get,factory,bean,string,bean,name,object,bean,instance,throws,beans,exception,if,bean,instance,instanceof,factory,bean,throw,new,bean,creation,exception,bean,name,bean,instance,of,type,bean,instance,get,class,is,not,a,factory,bean,return,factory,bean,bean,instance
FactoryBeanRegistrySupport -> protected FactoryBean<?> getFactoryBean(String beanName, Object beanInstance) throws BeansException;1495868221;Get a FactoryBean for the given bean if possible._@param beanName the name of the bean_@param beanInstance the corresponding bean instance_@return the bean instance as FactoryBean_@throws BeansException if the given bean cannot be exposed as a FactoryBean;protected FactoryBean<?> getFactoryBean(String beanName, Object beanInstance) throws BeansException {_		if (!(beanInstance instanceof FactoryBean)) {_			throw new BeanCreationException(beanName,_					"Bean instance of type [" + beanInstance.getClass() + "] is not a FactoryBean")__		}_		return (FactoryBean<?>) beanInstance__	};get,a,factory,bean,for,the,given,bean,if,possible,param,bean,name,the,name,of,the,bean,param,bean,instance,the,corresponding,bean,instance,return,the,bean,instance,as,factory,bean,throws,beans,exception,if,the,given,bean,cannot,be,exposed,as,a,factory,bean;protected,factory,bean,get,factory,bean,string,bean,name,object,bean,instance,throws,beans,exception,if,bean,instance,instanceof,factory,bean,throw,new,bean,creation,exception,bean,name,bean,instance,of,type,bean,instance,get,class,is,not,a,factory,bean,return,factory,bean,bean,instance
FactoryBeanRegistrySupport -> protected FactoryBean<?> getFactoryBean(String beanName, Object beanInstance) throws BeansException;1496837955;Get a FactoryBean for the given bean if possible._@param beanName the name of the bean_@param beanInstance the corresponding bean instance_@return the bean instance as FactoryBean_@throws BeansException if the given bean cannot be exposed as a FactoryBean;protected FactoryBean<?> getFactoryBean(String beanName, Object beanInstance) throws BeansException {_		if (!(beanInstance instanceof FactoryBean)) {_			throw new BeanCreationException(beanName,_					"Bean instance of type [" + beanInstance.getClass() + "] is not a FactoryBean")__		}_		return (FactoryBean<?>) beanInstance__	};get,a,factory,bean,for,the,given,bean,if,possible,param,bean,name,the,name,of,the,bean,param,bean,instance,the,corresponding,bean,instance,return,the,bean,instance,as,factory,bean,throws,beans,exception,if,the,given,bean,cannot,be,exposed,as,a,factory,bean;protected,factory,bean,get,factory,bean,string,bean,name,object,bean,instance,throws,beans,exception,if,bean,instance,instanceof,factory,bean,throw,new,bean,creation,exception,bean,name,bean,instance,of,type,bean,instance,get,class,is,not,a,factory,bean,return,factory,bean,bean,instance
FactoryBeanRegistrySupport -> protected FactoryBean<?> getFactoryBean(String beanName, Object beanInstance) throws BeansException;1498849035;Get a FactoryBean for the given bean if possible._@param beanName the name of the bean_@param beanInstance the corresponding bean instance_@return the bean instance as FactoryBean_@throws BeansException if the given bean cannot be exposed as a FactoryBean;protected FactoryBean<?> getFactoryBean(String beanName, Object beanInstance) throws BeansException {_		if (!(beanInstance instanceof FactoryBean)) {_			throw new BeanCreationException(beanName,_					"Bean instance of type [" + beanInstance.getClass() + "] is not a FactoryBean")__		}_		return (FactoryBean<?>) beanInstance__	};get,a,factory,bean,for,the,given,bean,if,possible,param,bean,name,the,name,of,the,bean,param,bean,instance,the,corresponding,bean,instance,return,the,bean,instance,as,factory,bean,throws,beans,exception,if,the,given,bean,cannot,be,exposed,as,a,factory,bean;protected,factory,bean,get,factory,bean,string,bean,name,object,bean,instance,throws,beans,exception,if,bean,instance,instanceof,factory,bean,throw,new,bean,creation,exception,bean,name,bean,instance,of,type,bean,instance,get,class,is,not,a,factory,bean,return,factory,bean,bean,instance
FactoryBeanRegistrySupport -> protected FactoryBean<?> getFactoryBean(String beanName, Object beanInstance) throws BeansException;1503007895;Get a FactoryBean for the given bean if possible._@param beanName the name of the bean_@param beanInstance the corresponding bean instance_@return the bean instance as FactoryBean_@throws BeansException if the given bean cannot be exposed as a FactoryBean;protected FactoryBean<?> getFactoryBean(String beanName, Object beanInstance) throws BeansException {_		if (!(beanInstance instanceof FactoryBean)) {_			throw new BeanCreationException(beanName,_					"Bean instance of type [" + beanInstance.getClass() + "] is not a FactoryBean")__		}_		return (FactoryBean<?>) beanInstance__	};get,a,factory,bean,for,the,given,bean,if,possible,param,bean,name,the,name,of,the,bean,param,bean,instance,the,corresponding,bean,instance,return,the,bean,instance,as,factory,bean,throws,beans,exception,if,the,given,bean,cannot,be,exposed,as,a,factory,bean;protected,factory,bean,get,factory,bean,string,bean,name,object,bean,instance,throws,beans,exception,if,bean,instance,instanceof,factory,bean,throw,new,bean,creation,exception,bean,name,bean,instance,of,type,bean,instance,get,class,is,not,a,factory,bean,return,factory,bean,bean,instance
FactoryBeanRegistrySupport -> protected FactoryBean<?> getFactoryBean(String beanName, Object beanInstance) throws BeansException;1518260986;Get a FactoryBean for the given bean if possible._@param beanName the name of the bean_@param beanInstance the corresponding bean instance_@return the bean instance as FactoryBean_@throws BeansException if the given bean cannot be exposed as a FactoryBean;protected FactoryBean<?> getFactoryBean(String beanName, Object beanInstance) throws BeansException {_		if (!(beanInstance instanceof FactoryBean)) {_			throw new BeanCreationException(beanName,_					"Bean instance of type [" + beanInstance.getClass() + "] is not a FactoryBean")__		}_		return (FactoryBean<?>) beanInstance__	};get,a,factory,bean,for,the,given,bean,if,possible,param,bean,name,the,name,of,the,bean,param,bean,instance,the,corresponding,bean,instance,return,the,bean,instance,as,factory,bean,throws,beans,exception,if,the,given,bean,cannot,be,exposed,as,a,factory,bean;protected,factory,bean,get,factory,bean,string,bean,name,object,bean,instance,throws,beans,exception,if,bean,instance,instanceof,factory,bean,throw,new,bean,creation,exception,bean,name,bean,instance,of,type,bean,instance,get,class,is,not,a,factory,bean,return,factory,bean,bean,instance
FactoryBeanRegistrySupport -> protected FactoryBean<?> getFactoryBean(String beanName, Object beanInstance) throws BeansException;1521822873;Get a FactoryBean for the given bean if possible._@param beanName the name of the bean_@param beanInstance the corresponding bean instance_@return the bean instance as FactoryBean_@throws BeansException if the given bean cannot be exposed as a FactoryBean;protected FactoryBean<?> getFactoryBean(String beanName, Object beanInstance) throws BeansException {_		if (!(beanInstance instanceof FactoryBean)) {_			throw new BeanCreationException(beanName,_					"Bean instance of type [" + beanInstance.getClass() + "] is not a FactoryBean")__		}_		return (FactoryBean<?>) beanInstance__	};get,a,factory,bean,for,the,given,bean,if,possible,param,bean,name,the,name,of,the,bean,param,bean,instance,the,corresponding,bean,instance,return,the,bean,instance,as,factory,bean,throws,beans,exception,if,the,given,bean,cannot,be,exposed,as,a,factory,bean;protected,factory,bean,get,factory,bean,string,bean,name,object,bean,instance,throws,beans,exception,if,bean,instance,instanceof,factory,bean,throw,new,bean,creation,exception,bean,name,bean,instance,of,type,bean,instance,get,class,is,not,a,factory,bean,return,factory,bean,bean,instance
FactoryBeanRegistrySupport -> protected FactoryBean<?> getFactoryBean(String beanName, Object beanInstance) throws BeansException;1522103043;Get a FactoryBean for the given bean if possible._@param beanName the name of the bean_@param beanInstance the corresponding bean instance_@return the bean instance as FactoryBean_@throws BeansException if the given bean cannot be exposed as a FactoryBean;protected FactoryBean<?> getFactoryBean(String beanName, Object beanInstance) throws BeansException {_		if (!(beanInstance instanceof FactoryBean)) {_			throw new BeanCreationException(beanName,_					"Bean instance of type [" + beanInstance.getClass() + "] is not a FactoryBean")__		}_		return (FactoryBean<?>) beanInstance__	};get,a,factory,bean,for,the,given,bean,if,possible,param,bean,name,the,name,of,the,bean,param,bean,instance,the,corresponding,bean,instance,return,the,bean,instance,as,factory,bean,throws,beans,exception,if,the,given,bean,cannot,be,exposed,as,a,factory,bean;protected,factory,bean,get,factory,bean,string,bean,name,object,bean,instance,throws,beans,exception,if,bean,instance,instanceof,factory,bean,throw,new,bean,creation,exception,bean,name,bean,instance,of,type,bean,instance,get,class,is,not,a,factory,bean,return,factory,bean,bean,instance
FactoryBeanRegistrySupport -> protected FactoryBean<?> getFactoryBean(String beanName, Object beanInstance) throws BeansException;1525267300;Get a FactoryBean for the given bean if possible._@param beanName the name of the bean_@param beanInstance the corresponding bean instance_@return the bean instance as FactoryBean_@throws BeansException if the given bean cannot be exposed as a FactoryBean;protected FactoryBean<?> getFactoryBean(String beanName, Object beanInstance) throws BeansException {_		if (!(beanInstance instanceof FactoryBean)) {_			throw new BeanCreationException(beanName,_					"Bean instance of type [" + beanInstance.getClass() + "] is not a FactoryBean")__		}_		return (FactoryBean<?>) beanInstance__	};get,a,factory,bean,for,the,given,bean,if,possible,param,bean,name,the,name,of,the,bean,param,bean,instance,the,corresponding,bean,instance,return,the,bean,instance,as,factory,bean,throws,beans,exception,if,the,given,bean,cannot,be,exposed,as,a,factory,bean;protected,factory,bean,get,factory,bean,string,bean,name,object,bean,instance,throws,beans,exception,if,bean,instance,instanceof,factory,bean,throw,new,bean,creation,exception,bean,name,bean,instance,of,type,bean,instance,get,class,is,not,a,factory,bean,return,factory,bean,bean,instance
FactoryBeanRegistrySupport -> protected FactoryBean<?> getFactoryBean(String beanName, Object beanInstance) throws BeansException;1530174524;Get a FactoryBean for the given bean if possible._@param beanName the name of the bean_@param beanInstance the corresponding bean instance_@return the bean instance as FactoryBean_@throws BeansException if the given bean cannot be exposed as a FactoryBean;protected FactoryBean<?> getFactoryBean(String beanName, Object beanInstance) throws BeansException {_		if (!(beanInstance instanceof FactoryBean)) {_			throw new BeanCreationException(beanName,_					"Bean instance of type [" + beanInstance.getClass() + "] is not a FactoryBean")__		}_		return (FactoryBean<?>) beanInstance__	};get,a,factory,bean,for,the,given,bean,if,possible,param,bean,name,the,name,of,the,bean,param,bean,instance,the,corresponding,bean,instance,return,the,bean,instance,as,factory,bean,throws,beans,exception,if,the,given,bean,cannot,be,exposed,as,a,factory,bean;protected,factory,bean,get,factory,bean,string,bean,name,object,bean,instance,throws,beans,exception,if,bean,instance,instanceof,factory,bean,throw,new,bean,creation,exception,bean,name,bean,instance,of,type,bean,instance,get,class,is,not,a,factory,bean,return,factory,bean,bean,instance
FactoryBeanRegistrySupport -> protected FactoryBean<?> getFactoryBean(String beanName, Object beanInstance) throws BeansException;1532091916;Get a FactoryBean for the given bean if possible._@param beanName the name of the bean_@param beanInstance the corresponding bean instance_@return the bean instance as FactoryBean_@throws BeansException if the given bean cannot be exposed as a FactoryBean;protected FactoryBean<?> getFactoryBean(String beanName, Object beanInstance) throws BeansException {_		if (!(beanInstance instanceof FactoryBean)) {_			throw new BeanCreationException(beanName,_					"Bean instance of type [" + beanInstance.getClass() + "] is not a FactoryBean")__		}_		return (FactoryBean<?>) beanInstance__	};get,a,factory,bean,for,the,given,bean,if,possible,param,bean,name,the,name,of,the,bean,param,bean,instance,the,corresponding,bean,instance,return,the,bean,instance,as,factory,bean,throws,beans,exception,if,the,given,bean,cannot,be,exposed,as,a,factory,bean;protected,factory,bean,get,factory,bean,string,bean,name,object,bean,instance,throws,beans,exception,if,bean,instance,instanceof,factory,bean,throw,new,bean,creation,exception,bean,name,bean,instance,of,type,bean,instance,get,class,is,not,a,factory,bean,return,factory,bean,bean,instance
FactoryBeanRegistrySupport -> @Override 	public void destroySingletons();1498849035;Overridden to clear the FactoryBean object cache as well.;@Override_	public void destroySingletons() {_		super.destroySingletons()__		this.factoryBeanObjectCache.clear()__	};overridden,to,clear,the,factory,bean,object,cache,as,well;override,public,void,destroy,singletons,super,destroy,singletons,this,factory,bean,object,cache,clear
FactoryBeanRegistrySupport -> @Override 	public void destroySingletons();1503007895;Overridden to clear the FactoryBean object cache as well.;@Override_	public void destroySingletons() {_		super.destroySingletons()__		this.factoryBeanObjectCache.clear()__	};overridden,to,clear,the,factory,bean,object,cache,as,well;override,public,void,destroy,singletons,super,destroy,singletons,this,factory,bean,object,cache,clear
FactoryBeanRegistrySupport -> @Override 	public void destroySingletons();1518260986;Overridden to clear the FactoryBean object cache as well.;@Override_	public void destroySingletons() {_		super.destroySingletons()__		this.factoryBeanObjectCache.clear()__	};overridden,to,clear,the,factory,bean,object,cache,as,well;override,public,void,destroy,singletons,super,destroy,singletons,this,factory,bean,object,cache,clear
FactoryBeanRegistrySupport -> @Nullable 	protected Object getCachedObjectForFactoryBean(String beanName);1495868221;Obtain an object to expose from the given FactoryBean, if available_in cached form. Quick check for minimal synchronization._@param beanName the name of the bean_@return the object obtained from the FactoryBean,_or {@code null} if not available;@Nullable_	protected Object getCachedObjectForFactoryBean(String beanName) {_		Object object = this.factoryBeanObjectCache.get(beanName)__		return (object != NULL_OBJECT ? object : null)__	};obtain,an,object,to,expose,from,the,given,factory,bean,if,available,in,cached,form,quick,check,for,minimal,synchronization,param,bean,name,the,name,of,the,bean,return,the,object,obtained,from,the,factory,bean,or,code,null,if,not,available;nullable,protected,object,get,cached,object,for,factory,bean,string,bean,name,object,object,this,factory,bean,object,cache,get,bean,name,return,object,object,null
FactoryBeanRegistrySupport -> @Nullable 	protected Object getCachedObjectForFactoryBean(String beanName);1496837955;Obtain an object to expose from the given FactoryBean, if available_in cached form. Quick check for minimal synchronization._@param beanName the name of the bean_@return the object obtained from the FactoryBean,_or {@code null} if not available;@Nullable_	protected Object getCachedObjectForFactoryBean(String beanName) {_		Object object = this.factoryBeanObjectCache.get(beanName)__		return (object != NULL_OBJECT ? object : null)__	};obtain,an,object,to,expose,from,the,given,factory,bean,if,available,in,cached,form,quick,check,for,minimal,synchronization,param,bean,name,the,name,of,the,bean,return,the,object,obtained,from,the,factory,bean,or,code,null,if,not,available;nullable,protected,object,get,cached,object,for,factory,bean,string,bean,name,object,object,this,factory,bean,object,cache,get,bean,name,return,object,object,null
FactoryBeanRegistrySupport -> @Nullable 	protected Object getCachedObjectForFactoryBean(String beanName);1498849035;Obtain an object to expose from the given FactoryBean, if available_in cached form. Quick check for minimal synchronization._@param beanName the name of the bean_@return the object obtained from the FactoryBean,_or {@code null} if not available;@Nullable_	protected Object getCachedObjectForFactoryBean(String beanName) {_		Object object = this.factoryBeanObjectCache.get(beanName)__		return (object != NULL_OBJECT ? object : null)__	};obtain,an,object,to,expose,from,the,given,factory,bean,if,available,in,cached,form,quick,check,for,minimal,synchronization,param,bean,name,the,name,of,the,bean,return,the,object,obtained,from,the,factory,bean,or,code,null,if,not,available;nullable,protected,object,get,cached,object,for,factory,bean,string,bean,name,object,object,this,factory,bean,object,cache,get,bean,name,return,object,object,null
FactoryBeanRegistrySupport -> @Nullable 	protected Object getCachedObjectForFactoryBean(String beanName);1503007895;Obtain an object to expose from the given FactoryBean, if available_in cached form. Quick check for minimal synchronization._@param beanName the name of the bean_@return the object obtained from the FactoryBean,_or {@code null} if not available;@Nullable_	protected Object getCachedObjectForFactoryBean(String beanName) {_		return this.factoryBeanObjectCache.get(beanName)__	};obtain,an,object,to,expose,from,the,given,factory,bean,if,available,in,cached,form,quick,check,for,minimal,synchronization,param,bean,name,the,name,of,the,bean,return,the,object,obtained,from,the,factory,bean,or,code,null,if,not,available;nullable,protected,object,get,cached,object,for,factory,bean,string,bean,name,return,this,factory,bean,object,cache,get,bean,name
FactoryBeanRegistrySupport -> @Nullable 	protected Object getCachedObjectForFactoryBean(String beanName);1518260986;Obtain an object to expose from the given FactoryBean, if available_in cached form. Quick check for minimal synchronization._@param beanName the name of the bean_@return the object obtained from the FactoryBean,_or {@code null} if not available;@Nullable_	protected Object getCachedObjectForFactoryBean(String beanName) {_		return this.factoryBeanObjectCache.get(beanName)__	};obtain,an,object,to,expose,from,the,given,factory,bean,if,available,in,cached,form,quick,check,for,minimal,synchronization,param,bean,name,the,name,of,the,bean,return,the,object,obtained,from,the,factory,bean,or,code,null,if,not,available;nullable,protected,object,get,cached,object,for,factory,bean,string,bean,name,return,this,factory,bean,object,cache,get,bean,name
FactoryBeanRegistrySupport -> @Nullable 	protected Object getCachedObjectForFactoryBean(String beanName);1521822873;Obtain an object to expose from the given FactoryBean, if available_in cached form. Quick check for minimal synchronization._@param beanName the name of the bean_@return the object obtained from the FactoryBean,_or {@code null} if not available;@Nullable_	protected Object getCachedObjectForFactoryBean(String beanName) {_		return this.factoryBeanObjectCache.get(beanName)__	};obtain,an,object,to,expose,from,the,given,factory,bean,if,available,in,cached,form,quick,check,for,minimal,synchronization,param,bean,name,the,name,of,the,bean,return,the,object,obtained,from,the,factory,bean,or,code,null,if,not,available;nullable,protected,object,get,cached,object,for,factory,bean,string,bean,name,return,this,factory,bean,object,cache,get,bean,name
FactoryBeanRegistrySupport -> @Nullable 	protected Object getCachedObjectForFactoryBean(String beanName);1522103043;Obtain an object to expose from the given FactoryBean, if available_in cached form. Quick check for minimal synchronization._@param beanName the name of the bean_@return the object obtained from the FactoryBean,_or {@code null} if not available;@Nullable_	protected Object getCachedObjectForFactoryBean(String beanName) {_		return this.factoryBeanObjectCache.get(beanName)__	};obtain,an,object,to,expose,from,the,given,factory,bean,if,available,in,cached,form,quick,check,for,minimal,synchronization,param,bean,name,the,name,of,the,bean,return,the,object,obtained,from,the,factory,bean,or,code,null,if,not,available;nullable,protected,object,get,cached,object,for,factory,bean,string,bean,name,return,this,factory,bean,object,cache,get,bean,name
FactoryBeanRegistrySupport -> @Nullable 	protected Object getCachedObjectForFactoryBean(String beanName);1525267300;Obtain an object to expose from the given FactoryBean, if available_in cached form. Quick check for minimal synchronization._@param beanName the name of the bean_@return the object obtained from the FactoryBean,_or {@code null} if not available;@Nullable_	protected Object getCachedObjectForFactoryBean(String beanName) {_		return this.factoryBeanObjectCache.get(beanName)__	};obtain,an,object,to,expose,from,the,given,factory,bean,if,available,in,cached,form,quick,check,for,minimal,synchronization,param,bean,name,the,name,of,the,bean,return,the,object,obtained,from,the,factory,bean,or,code,null,if,not,available;nullable,protected,object,get,cached,object,for,factory,bean,string,bean,name,return,this,factory,bean,object,cache,get,bean,name
FactoryBeanRegistrySupport -> @Nullable 	protected Object getCachedObjectForFactoryBean(String beanName);1530174524;Obtain an object to expose from the given FactoryBean, if available_in cached form. Quick check for minimal synchronization._@param beanName the name of the bean_@return the object obtained from the FactoryBean,_or {@code null} if not available;@Nullable_	protected Object getCachedObjectForFactoryBean(String beanName) {_		return this.factoryBeanObjectCache.get(beanName)__	};obtain,an,object,to,expose,from,the,given,factory,bean,if,available,in,cached,form,quick,check,for,minimal,synchronization,param,bean,name,the,name,of,the,bean,return,the,object,obtained,from,the,factory,bean,or,code,null,if,not,available;nullable,protected,object,get,cached,object,for,factory,bean,string,bean,name,return,this,factory,bean,object,cache,get,bean,name
FactoryBeanRegistrySupport -> @Nullable 	protected Object getCachedObjectForFactoryBean(String beanName);1532091916;Obtain an object to expose from the given FactoryBean, if available_in cached form. Quick check for minimal synchronization._@param beanName the name of the bean_@return the object obtained from the FactoryBean,_or {@code null} if not available;@Nullable_	protected Object getCachedObjectForFactoryBean(String beanName) {_		return this.factoryBeanObjectCache.get(beanName)__	};obtain,an,object,to,expose,from,the,given,factory,bean,if,available,in,cached,form,quick,check,for,minimal,synchronization,param,bean,name,the,name,of,the,bean,return,the,object,obtained,from,the,factory,bean,or,code,null,if,not,available;nullable,protected,object,get,cached,object,for,factory,bean,string,bean,name,return,this,factory,bean,object,cache,get,bean,name
FactoryBeanRegistrySupport -> @Nullable 	private Object doGetObjectFromFactoryBean(final FactoryBean<?> factory, final String beanName) 			throws BeanCreationException;1496837955;Obtain an object to expose from the given FactoryBean._@param factory the FactoryBean instance_@param beanName the name of the bean_@return the object obtained from the FactoryBean_@throws BeanCreationException if FactoryBean object creation failed_@see org.springframework.beans.factory.FactoryBean#getObject();@Nullable_	private Object doGetObjectFromFactoryBean(final FactoryBean<?> factory, final String beanName)_			throws BeanCreationException {__		Object object__		try {_			if (System.getSecurityManager() != null) {_				AccessControlContext acc = getAccessControlContext()__				try {_					object = AccessController.doPrivileged((PrivilegedExceptionAction<Object>) () ->_							factory.getObject(), acc)__				}_				catch (PrivilegedActionException pae) {_					throw pae.getException()__				}_			}_			else {_				object = factory.getObject()__			}_		}_		catch (FactoryBeanNotInitializedException ex) {_			throw new BeanCurrentlyInCreationException(beanName, ex.toString())__		}_		catch (Throwable ex) {_			throw new BeanCreationException(beanName, "FactoryBean threw exception on object creation", ex)__		}__		_		_		if (object == null && isSingletonCurrentlyInCreation(beanName)) {_			throw new BeanCurrentlyInCreationException(_					beanName, "FactoryBean which is currently in creation returned null from getObject")__		}_		return object__	};obtain,an,object,to,expose,from,the,given,factory,bean,param,factory,the,factory,bean,instance,param,bean,name,the,name,of,the,bean,return,the,object,obtained,from,the,factory,bean,throws,bean,creation,exception,if,factory,bean,object,creation,failed,see,org,springframework,beans,factory,factory,bean,get,object;nullable,private,object,do,get,object,from,factory,bean,final,factory,bean,factory,final,string,bean,name,throws,bean,creation,exception,object,object,try,if,system,get,security,manager,null,access,control,context,acc,get,access,control,context,try,object,access,controller,do,privileged,privileged,exception,action,object,factory,get,object,acc,catch,privileged,action,exception,pae,throw,pae,get,exception,else,object,factory,get,object,catch,factory,bean,not,initialized,exception,ex,throw,new,bean,currently,in,creation,exception,bean,name,ex,to,string,catch,throwable,ex,throw,new,bean,creation,exception,bean,name,factory,bean,threw,exception,on,object,creation,ex,if,object,null,is,singleton,currently,in,creation,bean,name,throw,new,bean,currently,in,creation,exception,bean,name,factory,bean,which,is,currently,in,creation,returned,null,from,get,object,return,object
FactoryBeanRegistrySupport -> @Nullable 	private Object doGetObjectFromFactoryBean(final FactoryBean<?> factory, final String beanName) 			throws BeanCreationException;1498849035;Obtain an object to expose from the given FactoryBean._@param factory the FactoryBean instance_@param beanName the name of the bean_@return the object obtained from the FactoryBean_@throws BeanCreationException if FactoryBean object creation failed_@see org.springframework.beans.factory.FactoryBean#getObject();@Nullable_	private Object doGetObjectFromFactoryBean(final FactoryBean<?> factory, final String beanName)_			throws BeanCreationException {__		Object object__		try {_			if (System.getSecurityManager() != null) {_				AccessControlContext acc = getAccessControlContext()__				try {_					object = AccessController.doPrivileged((PrivilegedExceptionAction<Object>) () ->_							factory.getObject(), acc)__				}_				catch (PrivilegedActionException pae) {_					throw pae.getException()__				}_			}_			else {_				object = factory.getObject()__			}_		}_		catch (FactoryBeanNotInitializedException ex) {_			throw new BeanCurrentlyInCreationException(beanName, ex.toString())__		}_		catch (Throwable ex) {_			throw new BeanCreationException(beanName, "FactoryBean threw exception on object creation", ex)__		}__		_		_		if (object == null && isSingletonCurrentlyInCreation(beanName)) {_			throw new BeanCurrentlyInCreationException(_					beanName, "FactoryBean which is currently in creation returned null from getObject")__		}_		return object__	};obtain,an,object,to,expose,from,the,given,factory,bean,param,factory,the,factory,bean,instance,param,bean,name,the,name,of,the,bean,return,the,object,obtained,from,the,factory,bean,throws,bean,creation,exception,if,factory,bean,object,creation,failed,see,org,springframework,beans,factory,factory,bean,get,object;nullable,private,object,do,get,object,from,factory,bean,final,factory,bean,factory,final,string,bean,name,throws,bean,creation,exception,object,object,try,if,system,get,security,manager,null,access,control,context,acc,get,access,control,context,try,object,access,controller,do,privileged,privileged,exception,action,object,factory,get,object,acc,catch,privileged,action,exception,pae,throw,pae,get,exception,else,object,factory,get,object,catch,factory,bean,not,initialized,exception,ex,throw,new,bean,currently,in,creation,exception,bean,name,ex,to,string,catch,throwable,ex,throw,new,bean,creation,exception,bean,name,factory,bean,threw,exception,on,object,creation,ex,if,object,null,is,singleton,currently,in,creation,bean,name,throw,new,bean,currently,in,creation,exception,bean,name,factory,bean,which,is,currently,in,creation,returned,null,from,get,object,return,object
FactoryBeanRegistrySupport -> @Nullable 	protected Object postProcessObjectFromFactoryBean(Object object, String beanName) throws BeansException;1496837955;Post-process the given object that has been obtained from the FactoryBean._The resulting object will get exposed for bean references._<p>The default implementation simply returns the given object as-is._Subclasses may override this, for example, to apply post-processors._@param object the object obtained from the FactoryBean._@param beanName the name of the bean_@return the object to expose_@throws org.springframework.beans.BeansException if any post-processing failed;@Nullable_	protected Object postProcessObjectFromFactoryBean(Object object, String beanName) throws BeansException {_		return object__	};post,process,the,given,object,that,has,been,obtained,from,the,factory,bean,the,resulting,object,will,get,exposed,for,bean,references,p,the,default,implementation,simply,returns,the,given,object,as,is,subclasses,may,override,this,for,example,to,apply,post,processors,param,object,the,object,obtained,from,the,factory,bean,param,bean,name,the,name,of,the,bean,return,the,object,to,expose,throws,org,springframework,beans,beans,exception,if,any,post,processing,failed;nullable,protected,object,post,process,object,from,factory,bean,object,object,string,bean,name,throws,beans,exception,return,object
FactoryBeanRegistrySupport -> @Nullable 	protected Object postProcessObjectFromFactoryBean(Object object, String beanName) throws BeansException;1498849035;Post-process the given object that has been obtained from the FactoryBean._The resulting object will get exposed for bean references._<p>The default implementation simply returns the given object as-is._Subclasses may override this, for example, to apply post-processors._@param object the object obtained from the FactoryBean._@param beanName the name of the bean_@return the object to expose_@throws org.springframework.beans.BeansException if any post-processing failed;@Nullable_	protected Object postProcessObjectFromFactoryBean(Object object, String beanName) throws BeansException {_		return object__	};post,process,the,given,object,that,has,been,obtained,from,the,factory,bean,the,resulting,object,will,get,exposed,for,bean,references,p,the,default,implementation,simply,returns,the,given,object,as,is,subclasses,may,override,this,for,example,to,apply,post,processors,param,object,the,object,obtained,from,the,factory,bean,param,bean,name,the,name,of,the,bean,return,the,object,to,expose,throws,org,springframework,beans,beans,exception,if,any,post,processing,failed;nullable,protected,object,post,process,object,from,factory,bean,object,object,string,bean,name,throws,beans,exception,return,object
FactoryBeanRegistrySupport -> private Object doGetObjectFromFactoryBean( 			final FactoryBean factory, final String beanName, final boolean shouldPostProcess) 			throws BeanCreationException;1328020251;Obtain an object to expose from the given FactoryBean._@param factory the FactoryBean instance_@param beanName the name of the bean_@param shouldPostProcess whether the bean is subject for post-processing_@return the object obtained from the FactoryBean_@throws BeanCreationException if FactoryBean object creation failed_@see org.springframework.beans.factory.FactoryBean#getObject();private Object doGetObjectFromFactoryBean(_			final FactoryBean factory, final String beanName, final boolean shouldPostProcess)_			throws BeanCreationException {__		Object object__		try {_			if (System.getSecurityManager() != null) {_				AccessControlContext acc = getAccessControlContext()__				try {_					object = AccessController.doPrivileged(new PrivilegedExceptionAction<Object>() {_						public Object run() throws Exception {_								return factory.getObject()__							}_						}, acc)__				}_				catch (PrivilegedActionException pae) {_					throw pae.getException()__				}_			}_			else {_				object = factory.getObject()__			}_		}_		catch (FactoryBeanNotInitializedException ex) {_			throw new BeanCurrentlyInCreationException(beanName, ex.toString())__		}_		catch (Throwable ex) {_			throw new BeanCreationException(beanName, "FactoryBean threw exception on object creation", ex)__		}__		_		_		_		if (object == null && isSingletonCurrentlyInCreation(beanName)) {_			throw new BeanCurrentlyInCreationException(_					beanName, "FactoryBean which is currently in creation returned null from getObject")__		}__		if (object != null && shouldPostProcess) {_			try {_				object = postProcessObjectFromFactoryBean(object, beanName)__			}_			catch (Throwable ex) {_				throw new BeanCreationException(beanName, "Post-processing of the FactoryBean's object failed", ex)__			}_		}__		return object__	};obtain,an,object,to,expose,from,the,given,factory,bean,param,factory,the,factory,bean,instance,param,bean,name,the,name,of,the,bean,param,should,post,process,whether,the,bean,is,subject,for,post,processing,return,the,object,obtained,from,the,factory,bean,throws,bean,creation,exception,if,factory,bean,object,creation,failed,see,org,springframework,beans,factory,factory,bean,get,object;private,object,do,get,object,from,factory,bean,final,factory,bean,factory,final,string,bean,name,final,boolean,should,post,process,throws,bean,creation,exception,object,object,try,if,system,get,security,manager,null,access,control,context,acc,get,access,control,context,try,object,access,controller,do,privileged,new,privileged,exception,action,object,public,object,run,throws,exception,return,factory,get,object,acc,catch,privileged,action,exception,pae,throw,pae,get,exception,else,object,factory,get,object,catch,factory,bean,not,initialized,exception,ex,throw,new,bean,currently,in,creation,exception,bean,name,ex,to,string,catch,throwable,ex,throw,new,bean,creation,exception,bean,name,factory,bean,threw,exception,on,object,creation,ex,if,object,null,is,singleton,currently,in,creation,bean,name,throw,new,bean,currently,in,creation,exception,bean,name,factory,bean,which,is,currently,in,creation,returned,null,from,get,object,if,object,null,should,post,process,try,object,post,process,object,from,factory,bean,object,bean,name,catch,throwable,ex,throw,new,bean,creation,exception,bean,name,post,processing,of,the,factory,bean,s,object,failed,ex,return,object
FactoryBeanRegistrySupport -> private Object doGetObjectFromFactoryBean( 			final FactoryBean factory, final String beanName, final boolean shouldPostProcess) 			throws BeanCreationException;1355352386;Obtain an object to expose from the given FactoryBean._@param factory the FactoryBean instance_@param beanName the name of the bean_@param shouldPostProcess whether the bean is subject for post-processing_@return the object obtained from the FactoryBean_@throws BeanCreationException if FactoryBean object creation failed_@see org.springframework.beans.factory.FactoryBean#getObject();private Object doGetObjectFromFactoryBean(_			final FactoryBean factory, final String beanName, final boolean shouldPostProcess)_			throws BeanCreationException {__		Object object__		try {_			if (System.getSecurityManager() != null) {_				AccessControlContext acc = getAccessControlContext()__				try {_					object = AccessController.doPrivileged(new PrivilegedExceptionAction<Object>() {_						public Object run() throws Exception {_								return factory.getObject()__							}_						}, acc)__				}_				catch (PrivilegedActionException pae) {_					throw pae.getException()__				}_			}_			else {_				object = factory.getObject()__			}_		}_		catch (FactoryBeanNotInitializedException ex) {_			throw new BeanCurrentlyInCreationException(beanName, ex.toString())__		}_		catch (Throwable ex) {_			throw new BeanCreationException(beanName, "FactoryBean threw exception on object creation", ex)__		}__		_		_		_		if (object == null && isSingletonCurrentlyInCreation(beanName)) {_			throw new BeanCurrentlyInCreationException(_					beanName, "FactoryBean which is currently in creation returned null from getObject")__		}__		if (object != null && shouldPostProcess) {_			try {_				object = postProcessObjectFromFactoryBean(object, beanName)__			}_			catch (Throwable ex) {_				throw new BeanCreationException(beanName, "Post-processing of the FactoryBean's object failed", ex)__			}_		}__		return object__	};obtain,an,object,to,expose,from,the,given,factory,bean,param,factory,the,factory,bean,instance,param,bean,name,the,name,of,the,bean,param,should,post,process,whether,the,bean,is,subject,for,post,processing,return,the,object,obtained,from,the,factory,bean,throws,bean,creation,exception,if,factory,bean,object,creation,failed,see,org,springframework,beans,factory,factory,bean,get,object;private,object,do,get,object,from,factory,bean,final,factory,bean,factory,final,string,bean,name,final,boolean,should,post,process,throws,bean,creation,exception,object,object,try,if,system,get,security,manager,null,access,control,context,acc,get,access,control,context,try,object,access,controller,do,privileged,new,privileged,exception,action,object,public,object,run,throws,exception,return,factory,get,object,acc,catch,privileged,action,exception,pae,throw,pae,get,exception,else,object,factory,get,object,catch,factory,bean,not,initialized,exception,ex,throw,new,bean,currently,in,creation,exception,bean,name,ex,to,string,catch,throwable,ex,throw,new,bean,creation,exception,bean,name,factory,bean,threw,exception,on,object,creation,ex,if,object,null,is,singleton,currently,in,creation,bean,name,throw,new,bean,currently,in,creation,exception,bean,name,factory,bean,which,is,currently,in,creation,returned,null,from,get,object,if,object,null,should,post,process,try,object,post,process,object,from,factory,bean,object,bean,name,catch,throwable,ex,throw,new,bean,creation,exception,bean,name,post,processing,of,the,factory,bean,s,object,failed,ex,return,object
FactoryBeanRegistrySupport -> private Object doGetObjectFromFactoryBean( 			final FactoryBean factory, final String beanName, final boolean shouldPostProcess) 			throws BeanCreationException;1356735495;Obtain an object to expose from the given FactoryBean._@param factory the FactoryBean instance_@param beanName the name of the bean_@param shouldPostProcess whether the bean is subject for post-processing_@return the object obtained from the FactoryBean_@throws BeanCreationException if FactoryBean object creation failed_@see org.springframework.beans.factory.FactoryBean#getObject();private Object doGetObjectFromFactoryBean(_			final FactoryBean factory, final String beanName, final boolean shouldPostProcess)_			throws BeanCreationException {__		Object object__		try {_			if (System.getSecurityManager() != null) {_				AccessControlContext acc = getAccessControlContext()__				try {_					object = AccessController.doPrivileged(new PrivilegedExceptionAction<Object>() {_						@Override_						public Object run() throws Exception {_								return factory.getObject()__							}_						}, acc)__				}_				catch (PrivilegedActionException pae) {_					throw pae.getException()__				}_			}_			else {_				object = factory.getObject()__			}_		}_		catch (FactoryBeanNotInitializedException ex) {_			throw new BeanCurrentlyInCreationException(beanName, ex.toString())__		}_		catch (Throwable ex) {_			throw new BeanCreationException(beanName, "FactoryBean threw exception on object creation", ex)__		}___		_		_		if (object == null && isSingletonCurrentlyInCreation(beanName)) {_			throw new BeanCurrentlyInCreationException(_					beanName, "FactoryBean which is currently in creation returned null from getObject")__		}__		if (object != null && shouldPostProcess) {_			try {_				object = postProcessObjectFromFactoryBean(object, beanName)__			}_			catch (Throwable ex) {_				throw new BeanCreationException(beanName, "Post-processing of the FactoryBean's object failed", ex)__			}_		}__		return object__	};obtain,an,object,to,expose,from,the,given,factory,bean,param,factory,the,factory,bean,instance,param,bean,name,the,name,of,the,bean,param,should,post,process,whether,the,bean,is,subject,for,post,processing,return,the,object,obtained,from,the,factory,bean,throws,bean,creation,exception,if,factory,bean,object,creation,failed,see,org,springframework,beans,factory,factory,bean,get,object;private,object,do,get,object,from,factory,bean,final,factory,bean,factory,final,string,bean,name,final,boolean,should,post,process,throws,bean,creation,exception,object,object,try,if,system,get,security,manager,null,access,control,context,acc,get,access,control,context,try,object,access,controller,do,privileged,new,privileged,exception,action,object,override,public,object,run,throws,exception,return,factory,get,object,acc,catch,privileged,action,exception,pae,throw,pae,get,exception,else,object,factory,get,object,catch,factory,bean,not,initialized,exception,ex,throw,new,bean,currently,in,creation,exception,bean,name,ex,to,string,catch,throwable,ex,throw,new,bean,creation,exception,bean,name,factory,bean,threw,exception,on,object,creation,ex,if,object,null,is,singleton,currently,in,creation,bean,name,throw,new,bean,currently,in,creation,exception,bean,name,factory,bean,which,is,currently,in,creation,returned,null,from,get,object,if,object,null,should,post,process,try,object,post,process,object,from,factory,bean,object,bean,name,catch,throwable,ex,throw,new,bean,creation,exception,bean,name,post,processing,of,the,factory,bean,s,object,failed,ex,return,object
FactoryBeanRegistrySupport -> private Object doGetObjectFromFactoryBean( 			final FactoryBean factory, final String beanName, final boolean shouldPostProcess) 			throws BeanCreationException;1357119239;Obtain an object to expose from the given FactoryBean._@param factory the FactoryBean instance_@param beanName the name of the bean_@param shouldPostProcess whether the bean is subject for post-processing_@return the object obtained from the FactoryBean_@throws BeanCreationException if FactoryBean object creation failed_@see org.springframework.beans.factory.FactoryBean#getObject();private Object doGetObjectFromFactoryBean(_			final FactoryBean factory, final String beanName, final boolean shouldPostProcess)_			throws BeanCreationException {__		Object object__		try {_			if (System.getSecurityManager() != null) {_				AccessControlContext acc = getAccessControlContext()__				try {_					object = AccessController.doPrivileged(new PrivilegedExceptionAction<Object>() {_						public Object run() throws Exception {_								return factory.getObject()__							}_						}, acc)__				}_				catch (PrivilegedActionException pae) {_					throw pae.getException()__				}_			}_			else {_				object = factory.getObject()__			}_		}_		catch (FactoryBeanNotInitializedException ex) {_			throw new BeanCurrentlyInCreationException(beanName, ex.toString())__		}_		catch (Throwable ex) {_			throw new BeanCreationException(beanName, "FactoryBean threw exception on object creation", ex)__		}___		_		_		if (object == null && isSingletonCurrentlyInCreation(beanName)) {_			throw new BeanCurrentlyInCreationException(_					beanName, "FactoryBean which is currently in creation returned null from getObject")__		}__		if (object != null && shouldPostProcess) {_			try {_				object = postProcessObjectFromFactoryBean(object, beanName)__			}_			catch (Throwable ex) {_				throw new BeanCreationException(beanName, "Post-processing of the FactoryBean's object failed", ex)__			}_		}__		return object__	};obtain,an,object,to,expose,from,the,given,factory,bean,param,factory,the,factory,bean,instance,param,bean,name,the,name,of,the,bean,param,should,post,process,whether,the,bean,is,subject,for,post,processing,return,the,object,obtained,from,the,factory,bean,throws,bean,creation,exception,if,factory,bean,object,creation,failed,see,org,springframework,beans,factory,factory,bean,get,object;private,object,do,get,object,from,factory,bean,final,factory,bean,factory,final,string,bean,name,final,boolean,should,post,process,throws,bean,creation,exception,object,object,try,if,system,get,security,manager,null,access,control,context,acc,get,access,control,context,try,object,access,controller,do,privileged,new,privileged,exception,action,object,public,object,run,throws,exception,return,factory,get,object,acc,catch,privileged,action,exception,pae,throw,pae,get,exception,else,object,factory,get,object,catch,factory,bean,not,initialized,exception,ex,throw,new,bean,currently,in,creation,exception,bean,name,ex,to,string,catch,throwable,ex,throw,new,bean,creation,exception,bean,name,factory,bean,threw,exception,on,object,creation,ex,if,object,null,is,singleton,currently,in,creation,bean,name,throw,new,bean,currently,in,creation,exception,bean,name,factory,bean,which,is,currently,in,creation,returned,null,from,get,object,if,object,null,should,post,process,try,object,post,process,object,from,factory,bean,object,bean,name,catch,throwable,ex,throw,new,bean,creation,exception,bean,name,post,processing,of,the,factory,bean,s,object,failed,ex,return,object
FactoryBeanRegistrySupport -> private Object doGetObjectFromFactoryBean( 			final FactoryBean factory, final String beanName, final boolean shouldPostProcess) 			throws BeanCreationException;1368482696;Obtain an object to expose from the given FactoryBean._@param factory the FactoryBean instance_@param beanName the name of the bean_@param shouldPostProcess whether the bean is subject for post-processing_@return the object obtained from the FactoryBean_@throws BeanCreationException if FactoryBean object creation failed_@see org.springframework.beans.factory.FactoryBean#getObject();private Object doGetObjectFromFactoryBean(_			final FactoryBean factory, final String beanName, final boolean shouldPostProcess)_			throws BeanCreationException {__		Object object__		try {_			if (System.getSecurityManager() != null) {_				AccessControlContext acc = getAccessControlContext()__				try {_					object = AccessController.doPrivileged(new PrivilegedExceptionAction<Object>() {_						@Override_						public Object run() throws Exception {_								return factory.getObject()__							}_						}, acc)__				}_				catch (PrivilegedActionException pae) {_					throw pae.getException()__				}_			}_			else {_				object = factory.getObject()__			}_		}_		catch (FactoryBeanNotInitializedException ex) {_			throw new BeanCurrentlyInCreationException(beanName, ex.toString())__		}_		catch (Throwable ex) {_			throw new BeanCreationException(beanName, "FactoryBean threw exception on object creation", ex)__		}___		_		_		if (object == null && isSingletonCurrentlyInCreation(beanName)) {_			throw new BeanCurrentlyInCreationException(_					beanName, "FactoryBean which is currently in creation returned null from getObject")__		}__		if (object != null && shouldPostProcess) {_			try {_				object = postProcessObjectFromFactoryBean(object, beanName)__			}_			catch (Throwable ex) {_				throw new BeanCreationException(beanName, "Post-processing of the FactoryBean's object failed", ex)__			}_		}__		return object__	};obtain,an,object,to,expose,from,the,given,factory,bean,param,factory,the,factory,bean,instance,param,bean,name,the,name,of,the,bean,param,should,post,process,whether,the,bean,is,subject,for,post,processing,return,the,object,obtained,from,the,factory,bean,throws,bean,creation,exception,if,factory,bean,object,creation,failed,see,org,springframework,beans,factory,factory,bean,get,object;private,object,do,get,object,from,factory,bean,final,factory,bean,factory,final,string,bean,name,final,boolean,should,post,process,throws,bean,creation,exception,object,object,try,if,system,get,security,manager,null,access,control,context,acc,get,access,control,context,try,object,access,controller,do,privileged,new,privileged,exception,action,object,override,public,object,run,throws,exception,return,factory,get,object,acc,catch,privileged,action,exception,pae,throw,pae,get,exception,else,object,factory,get,object,catch,factory,bean,not,initialized,exception,ex,throw,new,bean,currently,in,creation,exception,bean,name,ex,to,string,catch,throwable,ex,throw,new,bean,creation,exception,bean,name,factory,bean,threw,exception,on,object,creation,ex,if,object,null,is,singleton,currently,in,creation,bean,name,throw,new,bean,currently,in,creation,exception,bean,name,factory,bean,which,is,currently,in,creation,returned,null,from,get,object,if,object,null,should,post,process,try,object,post,process,object,from,factory,bean,object,bean,name,catch,throwable,ex,throw,new,bean,creation,exception,bean,name,post,processing,of,the,factory,bean,s,object,failed,ex,return,object
FactoryBeanRegistrySupport -> protected Object getObjectFromFactoryBean(FactoryBean<?> factory, String beanName, boolean shouldPostProcess);1385412762;Obtain an object to expose from the given FactoryBean._@param factory the FactoryBean instance_@param beanName the name of the bean_@param shouldPostProcess whether the bean is subject for post-processing_@return the object obtained from the FactoryBean_@throws BeanCreationException if FactoryBean object creation failed_@see org.springframework.beans.factory.FactoryBean#getObject();protected Object getObjectFromFactoryBean(FactoryBean<?> factory, String beanName, boolean shouldPostProcess) {_		if (factory.isSingleton() && containsSingleton(beanName)) {_			synchronized (getSingletonMutex()) {_				Object object = this.factoryBeanObjectCache.get(beanName)__				if (object == null) {_					object = doGetObjectFromFactoryBean(factory, beanName, shouldPostProcess)__					this.factoryBeanObjectCache.put(beanName, (object != null ? object : NULL_OBJECT))__				}_				return (object != NULL_OBJECT ? object : null)__			}_		}_		else {_			return doGetObjectFromFactoryBean(factory, beanName, shouldPostProcess)__		}_	};obtain,an,object,to,expose,from,the,given,factory,bean,param,factory,the,factory,bean,instance,param,bean,name,the,name,of,the,bean,param,should,post,process,whether,the,bean,is,subject,for,post,processing,return,the,object,obtained,from,the,factory,bean,throws,bean,creation,exception,if,factory,bean,object,creation,failed,see,org,springframework,beans,factory,factory,bean,get,object;protected,object,get,object,from,factory,bean,factory,bean,factory,string,bean,name,boolean,should,post,process,if,factory,is,singleton,contains,singleton,bean,name,synchronized,get,singleton,mutex,object,object,this,factory,bean,object,cache,get,bean,name,if,object,null,object,do,get,object,from,factory,bean,factory,bean,name,should,post,process,this,factory,bean,object,cache,put,bean,name,object,null,object,return,object,object,null,else,return,do,get,object,from,factory,bean,factory,bean,name,should,post,process
FactoryBeanRegistrySupport -> protected Object getObjectFromFactoryBean(FactoryBean<?> factory, String beanName, boolean shouldPostProcess);1386678412;Obtain an object to expose from the given FactoryBean._@param factory the FactoryBean instance_@param beanName the name of the bean_@param shouldPostProcess whether the bean is subject for post-processing_@return the object obtained from the FactoryBean_@throws BeanCreationException if FactoryBean object creation failed_@see org.springframework.beans.factory.FactoryBean#getObject();protected Object getObjectFromFactoryBean(FactoryBean<?> factory, String beanName, boolean shouldPostProcess) {_		if (factory.isSingleton() && containsSingleton(beanName)) {_			synchronized (getSingletonMutex()) {_				Object object = this.factoryBeanObjectCache.get(beanName)__				if (object == null) {_					object = doGetObjectFromFactoryBean(factory, beanName, shouldPostProcess)__					this.factoryBeanObjectCache.put(beanName, (object != null ? object : NULL_OBJECT))__				}_				return (object != NULL_OBJECT ? object : null)__			}_		}_		else {_			return doGetObjectFromFactoryBean(factory, beanName, shouldPostProcess)__		}_	};obtain,an,object,to,expose,from,the,given,factory,bean,param,factory,the,factory,bean,instance,param,bean,name,the,name,of,the,bean,param,should,post,process,whether,the,bean,is,subject,for,post,processing,return,the,object,obtained,from,the,factory,bean,throws,bean,creation,exception,if,factory,bean,object,creation,failed,see,org,springframework,beans,factory,factory,bean,get,object;protected,object,get,object,from,factory,bean,factory,bean,factory,string,bean,name,boolean,should,post,process,if,factory,is,singleton,contains,singleton,bean,name,synchronized,get,singleton,mutex,object,object,this,factory,bean,object,cache,get,bean,name,if,object,null,object,do,get,object,from,factory,bean,factory,bean,name,should,post,process,this,factory,bean,object,cache,put,bean,name,object,null,object,return,object,object,null,else,return,do,get,object,from,factory,bean,factory,bean,name,should,post,process
FactoryBeanRegistrySupport -> protected Object getObjectFromFactoryBean(FactoryBean<?> factory, String beanName, boolean shouldPostProcess);1404251417;Obtain an object to expose from the given FactoryBean._@param factory the FactoryBean instance_@param beanName the name of the bean_@param shouldPostProcess whether the bean is subject to post-processing_@return the object obtained from the FactoryBean_@throws BeanCreationException if FactoryBean object creation failed_@see org.springframework.beans.factory.FactoryBean#getObject();protected Object getObjectFromFactoryBean(FactoryBean<?> factory, String beanName, boolean shouldPostProcess) {_		if (factory.isSingleton() && containsSingleton(beanName)) {_			synchronized (getSingletonMutex()) {_				Object object = this.factoryBeanObjectCache.get(beanName)__				if (object == null) {_					object = doGetObjectFromFactoryBean(factory, beanName)__					_					_					Object alreadyThere = this.factoryBeanObjectCache.get(beanName)__					if (alreadyThere != null) {_						object = alreadyThere__					}_					else {_						if (object != null && shouldPostProcess) {_							try {_								object = postProcessObjectFromFactoryBean(object, beanName)__							}_							catch (Throwable ex) {_								throw new BeanCreationException(beanName,_										"Post-processing of FactoryBean's singleton object failed", ex)__							}_						}_						this.factoryBeanObjectCache.put(beanName, (object != null ? object : NULL_OBJECT))__					}_				}_				return (object != NULL_OBJECT ? object : null)__			}_		}_		else {_			Object object = doGetObjectFromFactoryBean(factory, beanName)__			if (object != null && shouldPostProcess) {_				try {_					object = postProcessObjectFromFactoryBean(object, beanName)__				}_				catch (Throwable ex) {_					throw new BeanCreationException(beanName, "Post-processing of FactoryBean's object failed", ex)__				}_			}_			return object__		}_	};obtain,an,object,to,expose,from,the,given,factory,bean,param,factory,the,factory,bean,instance,param,bean,name,the,name,of,the,bean,param,should,post,process,whether,the,bean,is,subject,to,post,processing,return,the,object,obtained,from,the,factory,bean,throws,bean,creation,exception,if,factory,bean,object,creation,failed,see,org,springframework,beans,factory,factory,bean,get,object;protected,object,get,object,from,factory,bean,factory,bean,factory,string,bean,name,boolean,should,post,process,if,factory,is,singleton,contains,singleton,bean,name,synchronized,get,singleton,mutex,object,object,this,factory,bean,object,cache,get,bean,name,if,object,null,object,do,get,object,from,factory,bean,factory,bean,name,object,already,there,this,factory,bean,object,cache,get,bean,name,if,already,there,null,object,already,there,else,if,object,null,should,post,process,try,object,post,process,object,from,factory,bean,object,bean,name,catch,throwable,ex,throw,new,bean,creation,exception,bean,name,post,processing,of,factory,bean,s,singleton,object,failed,ex,this,factory,bean,object,cache,put,bean,name,object,null,object,return,object,object,null,else,object,object,do,get,object,from,factory,bean,factory,bean,name,if,object,null,should,post,process,try,object,post,process,object,from,factory,bean,object,bean,name,catch,throwable,ex,throw,new,bean,creation,exception,bean,name,post,processing,of,factory,bean,s,object,failed,ex,return,object
FactoryBeanRegistrySupport -> protected Object getObjectFromFactoryBean(FactoryBean<?> factory, String beanName, boolean shouldPostProcess);1467730834;Obtain an object to expose from the given FactoryBean._@param factory the FactoryBean instance_@param beanName the name of the bean_@param shouldPostProcess whether the bean is subject to post-processing_@return the object obtained from the FactoryBean_@throws BeanCreationException if FactoryBean object creation failed_@see org.springframework.beans.factory.FactoryBean#getObject();protected Object getObjectFromFactoryBean(FactoryBean<?> factory, String beanName, boolean shouldPostProcess) {_		if (factory.isSingleton() && containsSingleton(beanName)) {_			synchronized (getSingletonMutex()) {_				Object object = this.factoryBeanObjectCache.get(beanName)__				if (object == null) {_					object = doGetObjectFromFactoryBean(factory, beanName)__					_					_					Object alreadyThere = this.factoryBeanObjectCache.get(beanName)__					if (alreadyThere != null) {_						object = alreadyThere__					}_					else {_						if (object != null && shouldPostProcess) {_							try {_								object = postProcessObjectFromFactoryBean(object, beanName)__							}_							catch (Throwable ex) {_								throw new BeanCreationException(beanName,_										"Post-processing of FactoryBean's singleton object failed", ex)__							}_						}_						this.factoryBeanObjectCache.put(beanName, (object != null ? object : NULL_OBJECT))__					}_				}_				return (object != NULL_OBJECT ? object : null)__			}_		}_		else {_			Object object = doGetObjectFromFactoryBean(factory, beanName)__			if (object != null && shouldPostProcess) {_				try {_					object = postProcessObjectFromFactoryBean(object, beanName)__				}_				catch (Throwable ex) {_					throw new BeanCreationException(beanName, "Post-processing of FactoryBean's object failed", ex)__				}_			}_			return object__		}_	};obtain,an,object,to,expose,from,the,given,factory,bean,param,factory,the,factory,bean,instance,param,bean,name,the,name,of,the,bean,param,should,post,process,whether,the,bean,is,subject,to,post,processing,return,the,object,obtained,from,the,factory,bean,throws,bean,creation,exception,if,factory,bean,object,creation,failed,see,org,springframework,beans,factory,factory,bean,get,object;protected,object,get,object,from,factory,bean,factory,bean,factory,string,bean,name,boolean,should,post,process,if,factory,is,singleton,contains,singleton,bean,name,synchronized,get,singleton,mutex,object,object,this,factory,bean,object,cache,get,bean,name,if,object,null,object,do,get,object,from,factory,bean,factory,bean,name,object,already,there,this,factory,bean,object,cache,get,bean,name,if,already,there,null,object,already,there,else,if,object,null,should,post,process,try,object,post,process,object,from,factory,bean,object,bean,name,catch,throwable,ex,throw,new,bean,creation,exception,bean,name,post,processing,of,factory,bean,s,singleton,object,failed,ex,this,factory,bean,object,cache,put,bean,name,object,null,object,return,object,object,null,else,object,object,do,get,object,from,factory,bean,factory,bean,name,if,object,null,should,post,process,try,object,post,process,object,from,factory,bean,object,bean,name,catch,throwable,ex,throw,new,bean,creation,exception,bean,name,post,processing,of,factory,bean,s,object,failed,ex,return,object
FactoryBeanRegistrySupport -> protected Object getObjectFromFactoryBean(FactoryBean<?> factory, String beanName, boolean shouldPostProcess);1495868221;Obtain an object to expose from the given FactoryBean._@param factory the FactoryBean instance_@param beanName the name of the bean_@param shouldPostProcess whether the bean is subject to post-processing_@return the object obtained from the FactoryBean_@throws BeanCreationException if FactoryBean object creation failed_@see org.springframework.beans.factory.FactoryBean#getObject();protected Object getObjectFromFactoryBean(FactoryBean<?> factory, String beanName, boolean shouldPostProcess) {_		if (factory.isSingleton() && containsSingleton(beanName)) {_			synchronized (getSingletonMutex()) {_				Object object = this.factoryBeanObjectCache.get(beanName)__				if (object == null) {_					object = doGetObjectFromFactoryBean(factory, beanName)__					_					_					Object alreadyThere = this.factoryBeanObjectCache.get(beanName)__					if (alreadyThere != null) {_						object = alreadyThere__					}_					else {_						if (object != null && shouldPostProcess) {_							try {_								object = postProcessObjectFromFactoryBean(object, beanName)__							}_							catch (Throwable ex) {_								throw new BeanCreationException(beanName,_										"Post-processing of FactoryBean's singleton object failed", ex)__							}_						}_						this.factoryBeanObjectCache.put(beanName, (object != null ? object : NULL_OBJECT))__					}_				}_				return (object != NULL_OBJECT ? object : null)__			}_		}_		else {_			Object object = doGetObjectFromFactoryBean(factory, beanName)__			if (object != null && shouldPostProcess) {_				try {_					object = postProcessObjectFromFactoryBean(object, beanName)__				}_				catch (Throwable ex) {_					throw new BeanCreationException(beanName, "Post-processing of FactoryBean's object failed", ex)__				}_			}_			return object__		}_	};obtain,an,object,to,expose,from,the,given,factory,bean,param,factory,the,factory,bean,instance,param,bean,name,the,name,of,the,bean,param,should,post,process,whether,the,bean,is,subject,to,post,processing,return,the,object,obtained,from,the,factory,bean,throws,bean,creation,exception,if,factory,bean,object,creation,failed,see,org,springframework,beans,factory,factory,bean,get,object;protected,object,get,object,from,factory,bean,factory,bean,factory,string,bean,name,boolean,should,post,process,if,factory,is,singleton,contains,singleton,bean,name,synchronized,get,singleton,mutex,object,object,this,factory,bean,object,cache,get,bean,name,if,object,null,object,do,get,object,from,factory,bean,factory,bean,name,object,already,there,this,factory,bean,object,cache,get,bean,name,if,already,there,null,object,already,there,else,if,object,null,should,post,process,try,object,post,process,object,from,factory,bean,object,bean,name,catch,throwable,ex,throw,new,bean,creation,exception,bean,name,post,processing,of,factory,bean,s,singleton,object,failed,ex,this,factory,bean,object,cache,put,bean,name,object,null,object,return,object,object,null,else,object,object,do,get,object,from,factory,bean,factory,bean,name,if,object,null,should,post,process,try,object,post,process,object,from,factory,bean,object,bean,name,catch,throwable,ex,throw,new,bean,creation,exception,bean,name,post,processing,of,factory,bean,s,object,failed,ex,return,object
FactoryBeanRegistrySupport -> protected Object getObjectFromFactoryBean(FactoryBean<?> factory, String beanName, boolean shouldPostProcess);1503007895;Obtain an object to expose from the given FactoryBean._@param factory the FactoryBean instance_@param beanName the name of the bean_@param shouldPostProcess whether the bean is subject to post-processing_@return the object obtained from the FactoryBean_@throws BeanCreationException if FactoryBean object creation failed_@see org.springframework.beans.factory.FactoryBean#getObject();protected Object getObjectFromFactoryBean(FactoryBean<?> factory, String beanName, boolean shouldPostProcess) {_		if (factory.isSingleton() && containsSingleton(beanName)) {_			synchronized (getSingletonMutex()) {_				Object object = this.factoryBeanObjectCache.get(beanName)__				if (object == null) {_					object = doGetObjectFromFactoryBean(factory, beanName)__					_					_					Object alreadyThere = this.factoryBeanObjectCache.get(beanName)__					if (alreadyThere != null) {_						object = alreadyThere__					}_					else {_						if (shouldPostProcess) {_							try {_								object = postProcessObjectFromFactoryBean(object, beanName)__							}_							catch (Throwable ex) {_								throw new BeanCreationException(beanName,_										"Post-processing of FactoryBean's singleton object failed", ex)__							}_						}_						this.factoryBeanObjectCache.put(beanName, object)__					}_				}_				return object__			}_		}_		else {_			Object object = doGetObjectFromFactoryBean(factory, beanName)__			if (shouldPostProcess) {_				try {_					object = postProcessObjectFromFactoryBean(object, beanName)__				}_				catch (Throwable ex) {_					throw new BeanCreationException(beanName, "Post-processing of FactoryBean's object failed", ex)__				}_			}_			return object__		}_	};obtain,an,object,to,expose,from,the,given,factory,bean,param,factory,the,factory,bean,instance,param,bean,name,the,name,of,the,bean,param,should,post,process,whether,the,bean,is,subject,to,post,processing,return,the,object,obtained,from,the,factory,bean,throws,bean,creation,exception,if,factory,bean,object,creation,failed,see,org,springframework,beans,factory,factory,bean,get,object;protected,object,get,object,from,factory,bean,factory,bean,factory,string,bean,name,boolean,should,post,process,if,factory,is,singleton,contains,singleton,bean,name,synchronized,get,singleton,mutex,object,object,this,factory,bean,object,cache,get,bean,name,if,object,null,object,do,get,object,from,factory,bean,factory,bean,name,object,already,there,this,factory,bean,object,cache,get,bean,name,if,already,there,null,object,already,there,else,if,should,post,process,try,object,post,process,object,from,factory,bean,object,bean,name,catch,throwable,ex,throw,new,bean,creation,exception,bean,name,post,processing,of,factory,bean,s,singleton,object,failed,ex,this,factory,bean,object,cache,put,bean,name,object,return,object,else,object,object,do,get,object,from,factory,bean,factory,bean,name,if,should,post,process,try,object,post,process,object,from,factory,bean,object,bean,name,catch,throwable,ex,throw,new,bean,creation,exception,bean,name,post,processing,of,factory,bean,s,object,failed,ex,return,object
FactoryBeanRegistrySupport -> protected Object getObjectFromFactoryBean(FactoryBean<?> factory, String beanName, boolean shouldPostProcess);1518260986;Obtain an object to expose from the given FactoryBean._@param factory the FactoryBean instance_@param beanName the name of the bean_@param shouldPostProcess whether the bean is subject to post-processing_@return the object obtained from the FactoryBean_@throws BeanCreationException if FactoryBean object creation failed_@see org.springframework.beans.factory.FactoryBean#getObject();protected Object getObjectFromFactoryBean(FactoryBean<?> factory, String beanName, boolean shouldPostProcess) {_		if (factory.isSingleton() && containsSingleton(beanName)) {_			synchronized (getSingletonMutex()) {_				Object object = this.factoryBeanObjectCache.get(beanName)__				if (object == null) {_					object = doGetObjectFromFactoryBean(factory, beanName)__					_					_					Object alreadyThere = this.factoryBeanObjectCache.get(beanName)__					if (alreadyThere != null) {_						object = alreadyThere__					}_					else {_						if (shouldPostProcess) {_							try {_								object = postProcessObjectFromFactoryBean(object, beanName)__							}_							catch (Throwable ex) {_								throw new BeanCreationException(beanName,_										"Post-processing of FactoryBean's singleton object failed", ex)__							}_						}_						this.factoryBeanObjectCache.put(beanName, object)__					}_				}_				return object__			}_		}_		else {_			Object object = doGetObjectFromFactoryBean(factory, beanName)__			if (shouldPostProcess) {_				try {_					object = postProcessObjectFromFactoryBean(object, beanName)__				}_				catch (Throwable ex) {_					throw new BeanCreationException(beanName, "Post-processing of FactoryBean's object failed", ex)__				}_			}_			return object__		}_	};obtain,an,object,to,expose,from,the,given,factory,bean,param,factory,the,factory,bean,instance,param,bean,name,the,name,of,the,bean,param,should,post,process,whether,the,bean,is,subject,to,post,processing,return,the,object,obtained,from,the,factory,bean,throws,bean,creation,exception,if,factory,bean,object,creation,failed,see,org,springframework,beans,factory,factory,bean,get,object;protected,object,get,object,from,factory,bean,factory,bean,factory,string,bean,name,boolean,should,post,process,if,factory,is,singleton,contains,singleton,bean,name,synchronized,get,singleton,mutex,object,object,this,factory,bean,object,cache,get,bean,name,if,object,null,object,do,get,object,from,factory,bean,factory,bean,name,object,already,there,this,factory,bean,object,cache,get,bean,name,if,already,there,null,object,already,there,else,if,should,post,process,try,object,post,process,object,from,factory,bean,object,bean,name,catch,throwable,ex,throw,new,bean,creation,exception,bean,name,post,processing,of,factory,bean,s,singleton,object,failed,ex,this,factory,bean,object,cache,put,bean,name,object,return,object,else,object,object,do,get,object,from,factory,bean,factory,bean,name,if,should,post,process,try,object,post,process,object,from,factory,bean,object,bean,name,catch,throwable,ex,throw,new,bean,creation,exception,bean,name,post,processing,of,factory,bean,s,object,failed,ex,return,object
FactoryBeanRegistrySupport -> protected Object getObjectFromFactoryBean(FactoryBean<?> factory, String beanName, boolean shouldPostProcess);1521822873;Obtain an object to expose from the given FactoryBean._@param factory the FactoryBean instance_@param beanName the name of the bean_@param shouldPostProcess whether the bean is subject to post-processing_@return the object obtained from the FactoryBean_@throws BeanCreationException if FactoryBean object creation failed_@see org.springframework.beans.factory.FactoryBean#getObject();protected Object getObjectFromFactoryBean(FactoryBean<?> factory, String beanName, boolean shouldPostProcess) {_		if (factory.isSingleton() && containsSingleton(beanName)) {_			synchronized (getSingletonMutex()) {_				Object object = this.factoryBeanObjectCache.get(beanName)__				if (object == null) {_					object = doGetObjectFromFactoryBean(factory, beanName)__					_					_					Object alreadyThere = this.factoryBeanObjectCache.get(beanName)__					if (alreadyThere != null) {_						object = alreadyThere__					}_					else {_						if (shouldPostProcess) {_							try {_								object = postProcessObjectFromFactoryBean(object, beanName)__							}_							catch (Throwable ex) {_								throw new BeanCreationException(beanName,_										"Post-processing of FactoryBean's singleton object failed", ex)__							}_						}_						this.factoryBeanObjectCache.put(beanName, object)__					}_				}_				return object__			}_		}_		else {_			Object object = doGetObjectFromFactoryBean(factory, beanName)__			if (shouldPostProcess) {_				try {_					object = postProcessObjectFromFactoryBean(object, beanName)__				}_				catch (Throwable ex) {_					throw new BeanCreationException(beanName, "Post-processing of FactoryBean's object failed", ex)__				}_			}_			return object__		}_	};obtain,an,object,to,expose,from,the,given,factory,bean,param,factory,the,factory,bean,instance,param,bean,name,the,name,of,the,bean,param,should,post,process,whether,the,bean,is,subject,to,post,processing,return,the,object,obtained,from,the,factory,bean,throws,bean,creation,exception,if,factory,bean,object,creation,failed,see,org,springframework,beans,factory,factory,bean,get,object;protected,object,get,object,from,factory,bean,factory,bean,factory,string,bean,name,boolean,should,post,process,if,factory,is,singleton,contains,singleton,bean,name,synchronized,get,singleton,mutex,object,object,this,factory,bean,object,cache,get,bean,name,if,object,null,object,do,get,object,from,factory,bean,factory,bean,name,object,already,there,this,factory,bean,object,cache,get,bean,name,if,already,there,null,object,already,there,else,if,should,post,process,try,object,post,process,object,from,factory,bean,object,bean,name,catch,throwable,ex,throw,new,bean,creation,exception,bean,name,post,processing,of,factory,bean,s,singleton,object,failed,ex,this,factory,bean,object,cache,put,bean,name,object,return,object,else,object,object,do,get,object,from,factory,bean,factory,bean,name,if,should,post,process,try,object,post,process,object,from,factory,bean,object,bean,name,catch,throwable,ex,throw,new,bean,creation,exception,bean,name,post,processing,of,factory,bean,s,object,failed,ex,return,object
FactoryBeanRegistrySupport -> protected Object getObjectFromFactoryBean(FactoryBean<?> factory, String beanName, boolean shouldPostProcess);1522103043;Obtain an object to expose from the given FactoryBean._@param factory the FactoryBean instance_@param beanName the name of the bean_@param shouldPostProcess whether the bean is subject to post-processing_@return the object obtained from the FactoryBean_@throws BeanCreationException if FactoryBean object creation failed_@see org.springframework.beans.factory.FactoryBean#getObject();protected Object getObjectFromFactoryBean(FactoryBean<?> factory, String beanName, boolean shouldPostProcess) {_		if (factory.isSingleton() && containsSingleton(beanName)) {_			synchronized (getSingletonMutex()) {_				Object object = this.factoryBeanObjectCache.get(beanName)__				if (object == null) {_					object = doGetObjectFromFactoryBean(factory, beanName)__					_					_					Object alreadyThere = this.factoryBeanObjectCache.get(beanName)__					if (alreadyThere != null) {_						object = alreadyThere__					}_					else {_						if (shouldPostProcess) {_							try {_								object = postProcessObjectFromFactoryBean(object, beanName)__							}_							catch (Throwable ex) {_								throw new BeanCreationException(beanName,_										"Post-processing of FactoryBean's singleton object failed", ex)__							}_						}_						if (containsSingleton(beanName)) {_							this.factoryBeanObjectCache.put(beanName, object)__						}_					}_				}_				return object__			}_		}_		else {_			Object object = doGetObjectFromFactoryBean(factory, beanName)__			if (shouldPostProcess) {_				try {_					object = postProcessObjectFromFactoryBean(object, beanName)__				}_				catch (Throwable ex) {_					throw new BeanCreationException(beanName, "Post-processing of FactoryBean's object failed", ex)__				}_			}_			return object__		}_	};obtain,an,object,to,expose,from,the,given,factory,bean,param,factory,the,factory,bean,instance,param,bean,name,the,name,of,the,bean,param,should,post,process,whether,the,bean,is,subject,to,post,processing,return,the,object,obtained,from,the,factory,bean,throws,bean,creation,exception,if,factory,bean,object,creation,failed,see,org,springframework,beans,factory,factory,bean,get,object;protected,object,get,object,from,factory,bean,factory,bean,factory,string,bean,name,boolean,should,post,process,if,factory,is,singleton,contains,singleton,bean,name,synchronized,get,singleton,mutex,object,object,this,factory,bean,object,cache,get,bean,name,if,object,null,object,do,get,object,from,factory,bean,factory,bean,name,object,already,there,this,factory,bean,object,cache,get,bean,name,if,already,there,null,object,already,there,else,if,should,post,process,try,object,post,process,object,from,factory,bean,object,bean,name,catch,throwable,ex,throw,new,bean,creation,exception,bean,name,post,processing,of,factory,bean,s,singleton,object,failed,ex,if,contains,singleton,bean,name,this,factory,bean,object,cache,put,bean,name,object,return,object,else,object,object,do,get,object,from,factory,bean,factory,bean,name,if,should,post,process,try,object,post,process,object,from,factory,bean,object,bean,name,catch,throwable,ex,throw,new,bean,creation,exception,bean,name,post,processing,of,factory,bean,s,object,failed,ex,return,object
FactoryBeanRegistrySupport -> protected Object getObjectFromFactoryBean(FactoryBean<?> factory, String beanName, boolean shouldPostProcess);1525267300;Obtain an object to expose from the given FactoryBean._@param factory the FactoryBean instance_@param beanName the name of the bean_@param shouldPostProcess whether the bean is subject to post-processing_@return the object obtained from the FactoryBean_@throws BeanCreationException if FactoryBean object creation failed_@see org.springframework.beans.factory.FactoryBean#getObject();protected Object getObjectFromFactoryBean(FactoryBean<?> factory, String beanName, boolean shouldPostProcess) {_		if (factory.isSingleton() && containsSingleton(beanName)) {_			synchronized (getSingletonMutex()) {_				Object object = this.factoryBeanObjectCache.get(beanName)__				if (object == null) {_					object = doGetObjectFromFactoryBean(factory, beanName)__					_					_					Object alreadyThere = this.factoryBeanObjectCache.get(beanName)__					if (alreadyThere != null) {_						object = alreadyThere__					}_					else {_						if (shouldPostProcess) {_							if (isSingletonCurrentlyInCreation(beanName)) {_								_								return object__							}_							beforeSingletonCreation(beanName)__							try {_								object = postProcessObjectFromFactoryBean(object, beanName)__							}_							catch (Throwable ex) {_								throw new BeanCreationException(beanName,_										"Post-processing of FactoryBean's singleton object failed", ex)__							}_							finally {_								afterSingletonCreation(beanName)__							}_						}_						if (containsSingleton(beanName)) {_							this.factoryBeanObjectCache.put(beanName, object)__						}_					}_				}_				return object__			}_		}_		else {_			Object object = doGetObjectFromFactoryBean(factory, beanName)__			if (shouldPostProcess) {_				try {_					object = postProcessObjectFromFactoryBean(object, beanName)__				}_				catch (Throwable ex) {_					throw new BeanCreationException(beanName, "Post-processing of FactoryBean's object failed", ex)__				}_			}_			return object__		}_	};obtain,an,object,to,expose,from,the,given,factory,bean,param,factory,the,factory,bean,instance,param,bean,name,the,name,of,the,bean,param,should,post,process,whether,the,bean,is,subject,to,post,processing,return,the,object,obtained,from,the,factory,bean,throws,bean,creation,exception,if,factory,bean,object,creation,failed,see,org,springframework,beans,factory,factory,bean,get,object;protected,object,get,object,from,factory,bean,factory,bean,factory,string,bean,name,boolean,should,post,process,if,factory,is,singleton,contains,singleton,bean,name,synchronized,get,singleton,mutex,object,object,this,factory,bean,object,cache,get,bean,name,if,object,null,object,do,get,object,from,factory,bean,factory,bean,name,object,already,there,this,factory,bean,object,cache,get,bean,name,if,already,there,null,object,already,there,else,if,should,post,process,if,is,singleton,currently,in,creation,bean,name,return,object,before,singleton,creation,bean,name,try,object,post,process,object,from,factory,bean,object,bean,name,catch,throwable,ex,throw,new,bean,creation,exception,bean,name,post,processing,of,factory,bean,s,singleton,object,failed,ex,finally,after,singleton,creation,bean,name,if,contains,singleton,bean,name,this,factory,bean,object,cache,put,bean,name,object,return,object,else,object,object,do,get,object,from,factory,bean,factory,bean,name,if,should,post,process,try,object,post,process,object,from,factory,bean,object,bean,name,catch,throwable,ex,throw,new,bean,creation,exception,bean,name,post,processing,of,factory,bean,s,object,failed,ex,return,object
FactoryBeanRegistrySupport -> protected Object getObjectFromFactoryBean(FactoryBean<?> factory, String beanName, boolean shouldPostProcess);1530174524;Obtain an object to expose from the given FactoryBean._@param factory the FactoryBean instance_@param beanName the name of the bean_@param shouldPostProcess whether the bean is subject to post-processing_@return the object obtained from the FactoryBean_@throws BeanCreationException if FactoryBean object creation failed_@see org.springframework.beans.factory.FactoryBean#getObject();protected Object getObjectFromFactoryBean(FactoryBean<?> factory, String beanName, boolean shouldPostProcess) {_		if (factory.isSingleton() && containsSingleton(beanName)) {_			synchronized (getSingletonMutex()) {_				Object object = this.factoryBeanObjectCache.get(beanName)__				if (object == null) {_					object = doGetObjectFromFactoryBean(factory, beanName)__					_					_					Object alreadyThere = this.factoryBeanObjectCache.get(beanName)__					if (alreadyThere != null) {_						object = alreadyThere__					}_					else {_						if (shouldPostProcess) {_							if (isSingletonCurrentlyInCreation(beanName)) {_								_								return object__							}_							beforeSingletonCreation(beanName)__							try {_								object = postProcessObjectFromFactoryBean(object, beanName)__							}_							catch (Throwable ex) {_								throw new BeanCreationException(beanName,_										"Post-processing of FactoryBean's singleton object failed", ex)__							}_							finally {_								afterSingletonCreation(beanName)__							}_						}_						if (containsSingleton(beanName)) {_							this.factoryBeanObjectCache.put(beanName, object)__						}_					}_				}_				return object__			}_		}_		else {_			Object object = doGetObjectFromFactoryBean(factory, beanName)__			if (shouldPostProcess) {_				try {_					object = postProcessObjectFromFactoryBean(object, beanName)__				}_				catch (Throwable ex) {_					throw new BeanCreationException(beanName, "Post-processing of FactoryBean's object failed", ex)__				}_			}_			return object__		}_	};obtain,an,object,to,expose,from,the,given,factory,bean,param,factory,the,factory,bean,instance,param,bean,name,the,name,of,the,bean,param,should,post,process,whether,the,bean,is,subject,to,post,processing,return,the,object,obtained,from,the,factory,bean,throws,bean,creation,exception,if,factory,bean,object,creation,failed,see,org,springframework,beans,factory,factory,bean,get,object;protected,object,get,object,from,factory,bean,factory,bean,factory,string,bean,name,boolean,should,post,process,if,factory,is,singleton,contains,singleton,bean,name,synchronized,get,singleton,mutex,object,object,this,factory,bean,object,cache,get,bean,name,if,object,null,object,do,get,object,from,factory,bean,factory,bean,name,object,already,there,this,factory,bean,object,cache,get,bean,name,if,already,there,null,object,already,there,else,if,should,post,process,if,is,singleton,currently,in,creation,bean,name,return,object,before,singleton,creation,bean,name,try,object,post,process,object,from,factory,bean,object,bean,name,catch,throwable,ex,throw,new,bean,creation,exception,bean,name,post,processing,of,factory,bean,s,singleton,object,failed,ex,finally,after,singleton,creation,bean,name,if,contains,singleton,bean,name,this,factory,bean,object,cache,put,bean,name,object,return,object,else,object,object,do,get,object,from,factory,bean,factory,bean,name,if,should,post,process,try,object,post,process,object,from,factory,bean,object,bean,name,catch,throwable,ex,throw,new,bean,creation,exception,bean,name,post,processing,of,factory,bean,s,object,failed,ex,return,object
FactoryBeanRegistrySupport -> protected Object getObjectFromFactoryBean(FactoryBean<?> factory, String beanName, boolean shouldPostProcess);1532091916;Obtain an object to expose from the given FactoryBean._@param factory the FactoryBean instance_@param beanName the name of the bean_@param shouldPostProcess whether the bean is subject to post-processing_@return the object obtained from the FactoryBean_@throws BeanCreationException if FactoryBean object creation failed_@see org.springframework.beans.factory.FactoryBean#getObject();protected Object getObjectFromFactoryBean(FactoryBean<?> factory, String beanName, boolean shouldPostProcess) {_		if (factory.isSingleton() && containsSingleton(beanName)) {_			synchronized (getSingletonMutex()) {_				Object object = this.factoryBeanObjectCache.get(beanName)__				if (object == null) {_					object = doGetObjectFromFactoryBean(factory, beanName)__					_					_					Object alreadyThere = this.factoryBeanObjectCache.get(beanName)__					if (alreadyThere != null) {_						object = alreadyThere__					}_					else {_						if (shouldPostProcess) {_							if (isSingletonCurrentlyInCreation(beanName)) {_								_								return object__							}_							beforeSingletonCreation(beanName)__							try {_								object = postProcessObjectFromFactoryBean(object, beanName)__							}_							catch (Throwable ex) {_								throw new BeanCreationException(beanName,_										"Post-processing of FactoryBean's singleton object failed", ex)__							}_							finally {_								afterSingletonCreation(beanName)__							}_						}_						if (containsSingleton(beanName)) {_							this.factoryBeanObjectCache.put(beanName, object)__						}_					}_				}_				return object__			}_		}_		else {_			Object object = doGetObjectFromFactoryBean(factory, beanName)__			if (shouldPostProcess) {_				try {_					object = postProcessObjectFromFactoryBean(object, beanName)__				}_				catch (Throwable ex) {_					throw new BeanCreationException(beanName, "Post-processing of FactoryBean's object failed", ex)__				}_			}_			return object__		}_	};obtain,an,object,to,expose,from,the,given,factory,bean,param,factory,the,factory,bean,instance,param,bean,name,the,name,of,the,bean,param,should,post,process,whether,the,bean,is,subject,to,post,processing,return,the,object,obtained,from,the,factory,bean,throws,bean,creation,exception,if,factory,bean,object,creation,failed,see,org,springframework,beans,factory,factory,bean,get,object;protected,object,get,object,from,factory,bean,factory,bean,factory,string,bean,name,boolean,should,post,process,if,factory,is,singleton,contains,singleton,bean,name,synchronized,get,singleton,mutex,object,object,this,factory,bean,object,cache,get,bean,name,if,object,null,object,do,get,object,from,factory,bean,factory,bean,name,object,already,there,this,factory,bean,object,cache,get,bean,name,if,already,there,null,object,already,there,else,if,should,post,process,if,is,singleton,currently,in,creation,bean,name,return,object,before,singleton,creation,bean,name,try,object,post,process,object,from,factory,bean,object,bean,name,catch,throwable,ex,throw,new,bean,creation,exception,bean,name,post,processing,of,factory,bean,s,singleton,object,failed,ex,finally,after,singleton,creation,bean,name,if,contains,singleton,bean,name,this,factory,bean,object,cache,put,bean,name,object,return,object,else,object,object,do,get,object,from,factory,bean,factory,bean,name,if,should,post,process,try,object,post,process,object,from,factory,bean,object,bean,name,catch,throwable,ex,throw,new,bean,creation,exception,bean,name,post,processing,of,factory,bean,s,object,failed,ex,return,object
FactoryBeanRegistrySupport -> protected Class getTypeForFactoryBean(final FactoryBean factoryBean);1328020251;Determine the type for the given FactoryBean._@param factoryBean the FactoryBean instance to check_@return the FactoryBean's object type,_or <code>null</code> if the type cannot be determined yet;protected Class getTypeForFactoryBean(final FactoryBean factoryBean) {_		try {_			if (System.getSecurityManager() != null) {_				return AccessController.doPrivileged(new PrivilegedAction<Class>() {_					public Class run() {_						return factoryBean.getObjectType()__					}_				}, getAccessControlContext())__			}_			else {_				return factoryBean.getObjectType()__			}_		}_		catch (Throwable ex) {_			_			logger.warn("FactoryBean threw exception from getObjectType, despite the contract saying " +_					"that it should return null if the type of its object cannot be determined yet", ex)__			return null__		}_	};determine,the,type,for,the,given,factory,bean,param,factory,bean,the,factory,bean,instance,to,check,return,the,factory,bean,s,object,type,or,code,null,code,if,the,type,cannot,be,determined,yet;protected,class,get,type,for,factory,bean,final,factory,bean,factory,bean,try,if,system,get,security,manager,null,return,access,controller,do,privileged,new,privileged,action,class,public,class,run,return,factory,bean,get,object,type,get,access,control,context,else,return,factory,bean,get,object,type,catch,throwable,ex,logger,warn,factory,bean,threw,exception,from,get,object,type,despite,the,contract,saying,that,it,should,return,null,if,the,type,of,its,object,cannot,be,determined,yet,ex,return,null
FactoryBeanRegistrySupport -> protected Class getTypeForFactoryBean(final FactoryBean factoryBean);1355352386;Determine the type for the given FactoryBean._@param factoryBean the FactoryBean instance to check_@return the FactoryBean's object type,_or <code>null</code> if the type cannot be determined yet;protected Class getTypeForFactoryBean(final FactoryBean factoryBean) {_		try {_			if (System.getSecurityManager() != null) {_				return AccessController.doPrivileged(new PrivilegedAction<Class>() {_					public Class run() {_						return factoryBean.getObjectType()__					}_				}, getAccessControlContext())__			}_			else {_				return factoryBean.getObjectType()__			}_		}_		catch (Throwable ex) {_			_			logger.warn("FactoryBean threw exception from getObjectType, despite the contract saying " +_					"that it should return null if the type of its object cannot be determined yet", ex)__			return null__		}_	};determine,the,type,for,the,given,factory,bean,param,factory,bean,the,factory,bean,instance,to,check,return,the,factory,bean,s,object,type,or,code,null,code,if,the,type,cannot,be,determined,yet;protected,class,get,type,for,factory,bean,final,factory,bean,factory,bean,try,if,system,get,security,manager,null,return,access,controller,do,privileged,new,privileged,action,class,public,class,run,return,factory,bean,get,object,type,get,access,control,context,else,return,factory,bean,get,object,type,catch,throwable,ex,logger,warn,factory,bean,threw,exception,from,get,object,type,despite,the,contract,saying,that,it,should,return,null,if,the,type,of,its,object,cannot,be,determined,yet,ex,return,null
FactoryBeanRegistrySupport -> protected Class getTypeForFactoryBean(final FactoryBean factoryBean);1356735495;Determine the type for the given FactoryBean._@param factoryBean the FactoryBean instance to check_@return the FactoryBean's object type,_or {@code null} if the type cannot be determined yet;protected Class getTypeForFactoryBean(final FactoryBean factoryBean) {_		try {_			if (System.getSecurityManager() != null) {_				return AccessController.doPrivileged(new PrivilegedAction<Class>() {_					@Override_					public Class run() {_						return factoryBean.getObjectType()__					}_				}, getAccessControlContext())__			}_			else {_				return factoryBean.getObjectType()__			}_		}_		catch (Throwable ex) {_			_			logger.warn("FactoryBean threw exception from getObjectType, despite the contract saying " +_					"that it should return null if the type of its object cannot be determined yet", ex)__			return null__		}_	};determine,the,type,for,the,given,factory,bean,param,factory,bean,the,factory,bean,instance,to,check,return,the,factory,bean,s,object,type,or,code,null,if,the,type,cannot,be,determined,yet;protected,class,get,type,for,factory,bean,final,factory,bean,factory,bean,try,if,system,get,security,manager,null,return,access,controller,do,privileged,new,privileged,action,class,override,public,class,run,return,factory,bean,get,object,type,get,access,control,context,else,return,factory,bean,get,object,type,catch,throwable,ex,logger,warn,factory,bean,threw,exception,from,get,object,type,despite,the,contract,saying,that,it,should,return,null,if,the,type,of,its,object,cannot,be,determined,yet,ex,return,null
FactoryBeanRegistrySupport -> protected Class getTypeForFactoryBean(final FactoryBean factoryBean);1357119239;Determine the type for the given FactoryBean._@param factoryBean the FactoryBean instance to check_@return the FactoryBean's object type,_or {@code null} if the type cannot be determined yet;protected Class getTypeForFactoryBean(final FactoryBean factoryBean) {_		try {_			if (System.getSecurityManager() != null) {_				return AccessController.doPrivileged(new PrivilegedAction<Class>() {_					public Class run() {_						return factoryBean.getObjectType()__					}_				}, getAccessControlContext())__			}_			else {_				return factoryBean.getObjectType()__			}_		}_		catch (Throwable ex) {_			_			logger.warn("FactoryBean threw exception from getObjectType, despite the contract saying " +_					"that it should return null if the type of its object cannot be determined yet", ex)__			return null__		}_	};determine,the,type,for,the,given,factory,bean,param,factory,bean,the,factory,bean,instance,to,check,return,the,factory,bean,s,object,type,or,code,null,if,the,type,cannot,be,determined,yet;protected,class,get,type,for,factory,bean,final,factory,bean,factory,bean,try,if,system,get,security,manager,null,return,access,controller,do,privileged,new,privileged,action,class,public,class,run,return,factory,bean,get,object,type,get,access,control,context,else,return,factory,bean,get,object,type,catch,throwable,ex,logger,warn,factory,bean,threw,exception,from,get,object,type,despite,the,contract,saying,that,it,should,return,null,if,the,type,of,its,object,cannot,be,determined,yet,ex,return,null
FactoryBeanRegistrySupport -> protected Class getTypeForFactoryBean(final FactoryBean factoryBean);1368482696;Determine the type for the given FactoryBean._@param factoryBean the FactoryBean instance to check_@return the FactoryBean's object type,_or {@code null} if the type cannot be determined yet;protected Class getTypeForFactoryBean(final FactoryBean factoryBean) {_		try {_			if (System.getSecurityManager() != null) {_				return AccessController.doPrivileged(new PrivilegedAction<Class>() {_					@Override_					public Class run() {_						return factoryBean.getObjectType()__					}_				}, getAccessControlContext())__			}_			else {_				return factoryBean.getObjectType()__			}_		}_		catch (Throwable ex) {_			_			logger.warn("FactoryBean threw exception from getObjectType, despite the contract saying " +_					"that it should return null if the type of its object cannot be determined yet", ex)__			return null__		}_	};determine,the,type,for,the,given,factory,bean,param,factory,bean,the,factory,bean,instance,to,check,return,the,factory,bean,s,object,type,or,code,null,if,the,type,cannot,be,determined,yet;protected,class,get,type,for,factory,bean,final,factory,bean,factory,bean,try,if,system,get,security,manager,null,return,access,controller,do,privileged,new,privileged,action,class,override,public,class,run,return,factory,bean,get,object,type,get,access,control,context,else,return,factory,bean,get,object,type,catch,throwable,ex,logger,warn,factory,bean,threw,exception,from,get,object,type,despite,the,contract,saying,that,it,should,return,null,if,the,type,of,its,object,cannot,be,determined,yet,ex,return,null
FactoryBeanRegistrySupport -> protected Object postProcessObjectFromFactoryBean(Object object, String beanName) throws BeansException;1328020251;Post-process the given object that has been obtained from the FactoryBean._The resulting object will get exposed for bean references._<p>The default implementation simply returns the given object as-is._Subclasses may override this, for example, to apply post-processors._@param object the object obtained from the FactoryBean._@param beanName the name of the bean_@return the object to expose_@throws org.springframework.beans.BeansException if any post-processing failed;protected Object postProcessObjectFromFactoryBean(Object object, String beanName) throws BeansException {_		return object__	};post,process,the,given,object,that,has,been,obtained,from,the,factory,bean,the,resulting,object,will,get,exposed,for,bean,references,p,the,default,implementation,simply,returns,the,given,object,as,is,subclasses,may,override,this,for,example,to,apply,post,processors,param,object,the,object,obtained,from,the,factory,bean,param,bean,name,the,name,of,the,bean,return,the,object,to,expose,throws,org,springframework,beans,beans,exception,if,any,post,processing,failed;protected,object,post,process,object,from,factory,bean,object,object,string,bean,name,throws,beans,exception,return,object
FactoryBeanRegistrySupport -> protected Object postProcessObjectFromFactoryBean(Object object, String beanName) throws BeansException;1355352386;Post-process the given object that has been obtained from the FactoryBean._The resulting object will get exposed for bean references._<p>The default implementation simply returns the given object as-is._Subclasses may override this, for example, to apply post-processors._@param object the object obtained from the FactoryBean._@param beanName the name of the bean_@return the object to expose_@throws org.springframework.beans.BeansException if any post-processing failed;protected Object postProcessObjectFromFactoryBean(Object object, String beanName) throws BeansException {_		return object__	};post,process,the,given,object,that,has,been,obtained,from,the,factory,bean,the,resulting,object,will,get,exposed,for,bean,references,p,the,default,implementation,simply,returns,the,given,object,as,is,subclasses,may,override,this,for,example,to,apply,post,processors,param,object,the,object,obtained,from,the,factory,bean,param,bean,name,the,name,of,the,bean,return,the,object,to,expose,throws,org,springframework,beans,beans,exception,if,any,post,processing,failed;protected,object,post,process,object,from,factory,bean,object,object,string,bean,name,throws,beans,exception,return,object
FactoryBeanRegistrySupport -> protected Object postProcessObjectFromFactoryBean(Object object, String beanName) throws BeansException;1356735495;Post-process the given object that has been obtained from the FactoryBean._The resulting object will get exposed for bean references._<p>The default implementation simply returns the given object as-is._Subclasses may override this, for example, to apply post-processors._@param object the object obtained from the FactoryBean._@param beanName the name of the bean_@return the object to expose_@throws org.springframework.beans.BeansException if any post-processing failed;protected Object postProcessObjectFromFactoryBean(Object object, String beanName) throws BeansException {_		return object__	};post,process,the,given,object,that,has,been,obtained,from,the,factory,bean,the,resulting,object,will,get,exposed,for,bean,references,p,the,default,implementation,simply,returns,the,given,object,as,is,subclasses,may,override,this,for,example,to,apply,post,processors,param,object,the,object,obtained,from,the,factory,bean,param,bean,name,the,name,of,the,bean,return,the,object,to,expose,throws,org,springframework,beans,beans,exception,if,any,post,processing,failed;protected,object,post,process,object,from,factory,bean,object,object,string,bean,name,throws,beans,exception,return,object
FactoryBeanRegistrySupport -> protected Object postProcessObjectFromFactoryBean(Object object, String beanName) throws BeansException;1357119239;Post-process the given object that has been obtained from the FactoryBean._The resulting object will get exposed for bean references._<p>The default implementation simply returns the given object as-is._Subclasses may override this, for example, to apply post-processors._@param object the object obtained from the FactoryBean._@param beanName the name of the bean_@return the object to expose_@throws org.springframework.beans.BeansException if any post-processing failed;protected Object postProcessObjectFromFactoryBean(Object object, String beanName) throws BeansException {_		return object__	};post,process,the,given,object,that,has,been,obtained,from,the,factory,bean,the,resulting,object,will,get,exposed,for,bean,references,p,the,default,implementation,simply,returns,the,given,object,as,is,subclasses,may,override,this,for,example,to,apply,post,processors,param,object,the,object,obtained,from,the,factory,bean,param,bean,name,the,name,of,the,bean,return,the,object,to,expose,throws,org,springframework,beans,beans,exception,if,any,post,processing,failed;protected,object,post,process,object,from,factory,bean,object,object,string,bean,name,throws,beans,exception,return,object
FactoryBeanRegistrySupport -> protected Object postProcessObjectFromFactoryBean(Object object, String beanName) throws BeansException;1368482696;Post-process the given object that has been obtained from the FactoryBean._The resulting object will get exposed for bean references._<p>The default implementation simply returns the given object as-is._Subclasses may override this, for example, to apply post-processors._@param object the object obtained from the FactoryBean._@param beanName the name of the bean_@return the object to expose_@throws org.springframework.beans.BeansException if any post-processing failed;protected Object postProcessObjectFromFactoryBean(Object object, String beanName) throws BeansException {_		return object__	};post,process,the,given,object,that,has,been,obtained,from,the,factory,bean,the,resulting,object,will,get,exposed,for,bean,references,p,the,default,implementation,simply,returns,the,given,object,as,is,subclasses,may,override,this,for,example,to,apply,post,processors,param,object,the,object,obtained,from,the,factory,bean,param,bean,name,the,name,of,the,bean,return,the,object,to,expose,throws,org,springframework,beans,beans,exception,if,any,post,processing,failed;protected,object,post,process,object,from,factory,bean,object,object,string,bean,name,throws,beans,exception,return,object
FactoryBeanRegistrySupport -> protected Object postProcessObjectFromFactoryBean(Object object, String beanName) throws BeansException;1385412762;Post-process the given object that has been obtained from the FactoryBean._The resulting object will get exposed for bean references._<p>The default implementation simply returns the given object as-is._Subclasses may override this, for example, to apply post-processors._@param object the object obtained from the FactoryBean._@param beanName the name of the bean_@return the object to expose_@throws org.springframework.beans.BeansException if any post-processing failed;protected Object postProcessObjectFromFactoryBean(Object object, String beanName) throws BeansException {_		return object__	};post,process,the,given,object,that,has,been,obtained,from,the,factory,bean,the,resulting,object,will,get,exposed,for,bean,references,p,the,default,implementation,simply,returns,the,given,object,as,is,subclasses,may,override,this,for,example,to,apply,post,processors,param,object,the,object,obtained,from,the,factory,bean,param,bean,name,the,name,of,the,bean,return,the,object,to,expose,throws,org,springframework,beans,beans,exception,if,any,post,processing,failed;protected,object,post,process,object,from,factory,bean,object,object,string,bean,name,throws,beans,exception,return,object
FactoryBeanRegistrySupport -> protected Object postProcessObjectFromFactoryBean(Object object, String beanName) throws BeansException;1386678412;Post-process the given object that has been obtained from the FactoryBean._The resulting object will get exposed for bean references._<p>The default implementation simply returns the given object as-is._Subclasses may override this, for example, to apply post-processors._@param object the object obtained from the FactoryBean._@param beanName the name of the bean_@return the object to expose_@throws org.springframework.beans.BeansException if any post-processing failed;protected Object postProcessObjectFromFactoryBean(Object object, String beanName) throws BeansException {_		return object__	};post,process,the,given,object,that,has,been,obtained,from,the,factory,bean,the,resulting,object,will,get,exposed,for,bean,references,p,the,default,implementation,simply,returns,the,given,object,as,is,subclasses,may,override,this,for,example,to,apply,post,processors,param,object,the,object,obtained,from,the,factory,bean,param,bean,name,the,name,of,the,bean,return,the,object,to,expose,throws,org,springframework,beans,beans,exception,if,any,post,processing,failed;protected,object,post,process,object,from,factory,bean,object,object,string,bean,name,throws,beans,exception,return,object
FactoryBeanRegistrySupport -> protected Object postProcessObjectFromFactoryBean(Object object, String beanName) throws BeansException;1404251417;Post-process the given object that has been obtained from the FactoryBean._The resulting object will get exposed for bean references._<p>The default implementation simply returns the given object as-is._Subclasses may override this, for example, to apply post-processors._@param object the object obtained from the FactoryBean._@param beanName the name of the bean_@return the object to expose_@throws org.springframework.beans.BeansException if any post-processing failed;protected Object postProcessObjectFromFactoryBean(Object object, String beanName) throws BeansException {_		return object__	};post,process,the,given,object,that,has,been,obtained,from,the,factory,bean,the,resulting,object,will,get,exposed,for,bean,references,p,the,default,implementation,simply,returns,the,given,object,as,is,subclasses,may,override,this,for,example,to,apply,post,processors,param,object,the,object,obtained,from,the,factory,bean,param,bean,name,the,name,of,the,bean,return,the,object,to,expose,throws,org,springframework,beans,beans,exception,if,any,post,processing,failed;protected,object,post,process,object,from,factory,bean,object,object,string,bean,name,throws,beans,exception,return,object
FactoryBeanRegistrySupport -> protected Object postProcessObjectFromFactoryBean(Object object, String beanName) throws BeansException;1467730834;Post-process the given object that has been obtained from the FactoryBean._The resulting object will get exposed for bean references._<p>The default implementation simply returns the given object as-is._Subclasses may override this, for example, to apply post-processors._@param object the object obtained from the FactoryBean._@param beanName the name of the bean_@return the object to expose_@throws org.springframework.beans.BeansException if any post-processing failed;protected Object postProcessObjectFromFactoryBean(Object object, String beanName) throws BeansException {_		return object__	};post,process,the,given,object,that,has,been,obtained,from,the,factory,bean,the,resulting,object,will,get,exposed,for,bean,references,p,the,default,implementation,simply,returns,the,given,object,as,is,subclasses,may,override,this,for,example,to,apply,post,processors,param,object,the,object,obtained,from,the,factory,bean,param,bean,name,the,name,of,the,bean,return,the,object,to,expose,throws,org,springframework,beans,beans,exception,if,any,post,processing,failed;protected,object,post,process,object,from,factory,bean,object,object,string,bean,name,throws,beans,exception,return,object
FactoryBeanRegistrySupport -> protected Object postProcessObjectFromFactoryBean(Object object, String beanName) throws BeansException;1495868221;Post-process the given object that has been obtained from the FactoryBean._The resulting object will get exposed for bean references._<p>The default implementation simply returns the given object as-is._Subclasses may override this, for example, to apply post-processors._@param object the object obtained from the FactoryBean._@param beanName the name of the bean_@return the object to expose_@throws org.springframework.beans.BeansException if any post-processing failed;protected Object postProcessObjectFromFactoryBean(Object object, String beanName) throws BeansException {_		return object__	};post,process,the,given,object,that,has,been,obtained,from,the,factory,bean,the,resulting,object,will,get,exposed,for,bean,references,p,the,default,implementation,simply,returns,the,given,object,as,is,subclasses,may,override,this,for,example,to,apply,post,processors,param,object,the,object,obtained,from,the,factory,bean,param,bean,name,the,name,of,the,bean,return,the,object,to,expose,throws,org,springframework,beans,beans,exception,if,any,post,processing,failed;protected,object,post,process,object,from,factory,bean,object,object,string,bean,name,throws,beans,exception,return,object
FactoryBeanRegistrySupport -> protected Object postProcessObjectFromFactoryBean(Object object, String beanName) throws BeansException;1503007895;Post-process the given object that has been obtained from the FactoryBean._The resulting object will get exposed for bean references._<p>The default implementation simply returns the given object as-is._Subclasses may override this, for example, to apply post-processors._@param object the object obtained from the FactoryBean._@param beanName the name of the bean_@return the object to expose_@throws org.springframework.beans.BeansException if any post-processing failed;protected Object postProcessObjectFromFactoryBean(Object object, String beanName) throws BeansException {_		return object__	};post,process,the,given,object,that,has,been,obtained,from,the,factory,bean,the,resulting,object,will,get,exposed,for,bean,references,p,the,default,implementation,simply,returns,the,given,object,as,is,subclasses,may,override,this,for,example,to,apply,post,processors,param,object,the,object,obtained,from,the,factory,bean,param,bean,name,the,name,of,the,bean,return,the,object,to,expose,throws,org,springframework,beans,beans,exception,if,any,post,processing,failed;protected,object,post,process,object,from,factory,bean,object,object,string,bean,name,throws,beans,exception,return,object
FactoryBeanRegistrySupport -> protected Object postProcessObjectFromFactoryBean(Object object, String beanName) throws BeansException;1518260986;Post-process the given object that has been obtained from the FactoryBean._The resulting object will get exposed for bean references._<p>The default implementation simply returns the given object as-is._Subclasses may override this, for example, to apply post-processors._@param object the object obtained from the FactoryBean._@param beanName the name of the bean_@return the object to expose_@throws org.springframework.beans.BeansException if any post-processing failed;protected Object postProcessObjectFromFactoryBean(Object object, String beanName) throws BeansException {_		return object__	};post,process,the,given,object,that,has,been,obtained,from,the,factory,bean,the,resulting,object,will,get,exposed,for,bean,references,p,the,default,implementation,simply,returns,the,given,object,as,is,subclasses,may,override,this,for,example,to,apply,post,processors,param,object,the,object,obtained,from,the,factory,bean,param,bean,name,the,name,of,the,bean,return,the,object,to,expose,throws,org,springframework,beans,beans,exception,if,any,post,processing,failed;protected,object,post,process,object,from,factory,bean,object,object,string,bean,name,throws,beans,exception,return,object
FactoryBeanRegistrySupport -> protected Object postProcessObjectFromFactoryBean(Object object, String beanName) throws BeansException;1521822873;Post-process the given object that has been obtained from the FactoryBean._The resulting object will get exposed for bean references._<p>The default implementation simply returns the given object as-is._Subclasses may override this, for example, to apply post-processors._@param object the object obtained from the FactoryBean._@param beanName the name of the bean_@return the object to expose_@throws org.springframework.beans.BeansException if any post-processing failed;protected Object postProcessObjectFromFactoryBean(Object object, String beanName) throws BeansException {_		return object__	};post,process,the,given,object,that,has,been,obtained,from,the,factory,bean,the,resulting,object,will,get,exposed,for,bean,references,p,the,default,implementation,simply,returns,the,given,object,as,is,subclasses,may,override,this,for,example,to,apply,post,processors,param,object,the,object,obtained,from,the,factory,bean,param,bean,name,the,name,of,the,bean,return,the,object,to,expose,throws,org,springframework,beans,beans,exception,if,any,post,processing,failed;protected,object,post,process,object,from,factory,bean,object,object,string,bean,name,throws,beans,exception,return,object
FactoryBeanRegistrySupport -> protected Object postProcessObjectFromFactoryBean(Object object, String beanName) throws BeansException;1522103043;Post-process the given object that has been obtained from the FactoryBean._The resulting object will get exposed for bean references._<p>The default implementation simply returns the given object as-is._Subclasses may override this, for example, to apply post-processors._@param object the object obtained from the FactoryBean._@param beanName the name of the bean_@return the object to expose_@throws org.springframework.beans.BeansException if any post-processing failed;protected Object postProcessObjectFromFactoryBean(Object object, String beanName) throws BeansException {_		return object__	};post,process,the,given,object,that,has,been,obtained,from,the,factory,bean,the,resulting,object,will,get,exposed,for,bean,references,p,the,default,implementation,simply,returns,the,given,object,as,is,subclasses,may,override,this,for,example,to,apply,post,processors,param,object,the,object,obtained,from,the,factory,bean,param,bean,name,the,name,of,the,bean,return,the,object,to,expose,throws,org,springframework,beans,beans,exception,if,any,post,processing,failed;protected,object,post,process,object,from,factory,bean,object,object,string,bean,name,throws,beans,exception,return,object
FactoryBeanRegistrySupport -> protected Object postProcessObjectFromFactoryBean(Object object, String beanName) throws BeansException;1525267300;Post-process the given object that has been obtained from the FactoryBean._The resulting object will get exposed for bean references._<p>The default implementation simply returns the given object as-is._Subclasses may override this, for example, to apply post-processors._@param object the object obtained from the FactoryBean._@param beanName the name of the bean_@return the object to expose_@throws org.springframework.beans.BeansException if any post-processing failed;protected Object postProcessObjectFromFactoryBean(Object object, String beanName) throws BeansException {_		return object__	};post,process,the,given,object,that,has,been,obtained,from,the,factory,bean,the,resulting,object,will,get,exposed,for,bean,references,p,the,default,implementation,simply,returns,the,given,object,as,is,subclasses,may,override,this,for,example,to,apply,post,processors,param,object,the,object,obtained,from,the,factory,bean,param,bean,name,the,name,of,the,bean,return,the,object,to,expose,throws,org,springframework,beans,beans,exception,if,any,post,processing,failed;protected,object,post,process,object,from,factory,bean,object,object,string,bean,name,throws,beans,exception,return,object
FactoryBeanRegistrySupport -> protected Object postProcessObjectFromFactoryBean(Object object, String beanName) throws BeansException;1530174524;Post-process the given object that has been obtained from the FactoryBean._The resulting object will get exposed for bean references._<p>The default implementation simply returns the given object as-is._Subclasses may override this, for example, to apply post-processors._@param object the object obtained from the FactoryBean._@param beanName the name of the bean_@return the object to expose_@throws org.springframework.beans.BeansException if any post-processing failed;protected Object postProcessObjectFromFactoryBean(Object object, String beanName) throws BeansException {_		return object__	};post,process,the,given,object,that,has,been,obtained,from,the,factory,bean,the,resulting,object,will,get,exposed,for,bean,references,p,the,default,implementation,simply,returns,the,given,object,as,is,subclasses,may,override,this,for,example,to,apply,post,processors,param,object,the,object,obtained,from,the,factory,bean,param,bean,name,the,name,of,the,bean,return,the,object,to,expose,throws,org,springframework,beans,beans,exception,if,any,post,processing,failed;protected,object,post,process,object,from,factory,bean,object,object,string,bean,name,throws,beans,exception,return,object
FactoryBeanRegistrySupport -> protected Object postProcessObjectFromFactoryBean(Object object, String beanName) throws BeansException;1532091916;Post-process the given object that has been obtained from the FactoryBean._The resulting object will get exposed for bean references._<p>The default implementation simply returns the given object as-is._Subclasses may override this, for example, to apply post-processors._@param object the object obtained from the FactoryBean._@param beanName the name of the bean_@return the object to expose_@throws org.springframework.beans.BeansException if any post-processing failed;protected Object postProcessObjectFromFactoryBean(Object object, String beanName) throws BeansException {_		return object__	};post,process,the,given,object,that,has,been,obtained,from,the,factory,bean,the,resulting,object,will,get,exposed,for,bean,references,p,the,default,implementation,simply,returns,the,given,object,as,is,subclasses,may,override,this,for,example,to,apply,post,processors,param,object,the,object,obtained,from,the,factory,bean,param,bean,name,the,name,of,the,bean,return,the,object,to,expose,throws,org,springframework,beans,beans,exception,if,any,post,processing,failed;protected,object,post,process,object,from,factory,bean,object,object,string,bean,name,throws,beans,exception,return,object
FactoryBeanRegistrySupport -> protected FactoryBean getFactoryBean(String beanName, Object beanInstance) throws BeansException;1328020251;Get a FactoryBean for the given bean if possible._@param beanName the name of the bean_@param beanInstance the corresponding bean instance_@return the bean instance as FactoryBean_@throws BeansException if the given bean cannot be exposed as a FactoryBean;protected FactoryBean getFactoryBean(String beanName, Object beanInstance) throws BeansException {_		if (!(beanInstance instanceof FactoryBean)) {_			throw new BeanCreationException(beanName,_					"Bean instance of type [" + beanInstance.getClass() + "] is not a FactoryBean")__		}_		return (FactoryBean) beanInstance__	};get,a,factory,bean,for,the,given,bean,if,possible,param,bean,name,the,name,of,the,bean,param,bean,instance,the,corresponding,bean,instance,return,the,bean,instance,as,factory,bean,throws,beans,exception,if,the,given,bean,cannot,be,exposed,as,a,factory,bean;protected,factory,bean,get,factory,bean,string,bean,name,object,bean,instance,throws,beans,exception,if,bean,instance,instanceof,factory,bean,throw,new,bean,creation,exception,bean,name,bean,instance,of,type,bean,instance,get,class,is,not,a,factory,bean,return,factory,bean,bean,instance
FactoryBeanRegistrySupport -> protected FactoryBean getFactoryBean(String beanName, Object beanInstance) throws BeansException;1355352386;Get a FactoryBean for the given bean if possible._@param beanName the name of the bean_@param beanInstance the corresponding bean instance_@return the bean instance as FactoryBean_@throws BeansException if the given bean cannot be exposed as a FactoryBean;protected FactoryBean getFactoryBean(String beanName, Object beanInstance) throws BeansException {_		if (!(beanInstance instanceof FactoryBean)) {_			throw new BeanCreationException(beanName,_					"Bean instance of type [" + beanInstance.getClass() + "] is not a FactoryBean")__		}_		return (FactoryBean) beanInstance__	};get,a,factory,bean,for,the,given,bean,if,possible,param,bean,name,the,name,of,the,bean,param,bean,instance,the,corresponding,bean,instance,return,the,bean,instance,as,factory,bean,throws,beans,exception,if,the,given,bean,cannot,be,exposed,as,a,factory,bean;protected,factory,bean,get,factory,bean,string,bean,name,object,bean,instance,throws,beans,exception,if,bean,instance,instanceof,factory,bean,throw,new,bean,creation,exception,bean,name,bean,instance,of,type,bean,instance,get,class,is,not,a,factory,bean,return,factory,bean,bean,instance
FactoryBeanRegistrySupport -> protected FactoryBean getFactoryBean(String beanName, Object beanInstance) throws BeansException;1356735495;Get a FactoryBean for the given bean if possible._@param beanName the name of the bean_@param beanInstance the corresponding bean instance_@return the bean instance as FactoryBean_@throws BeansException if the given bean cannot be exposed as a FactoryBean;protected FactoryBean getFactoryBean(String beanName, Object beanInstance) throws BeansException {_		if (!(beanInstance instanceof FactoryBean)) {_			throw new BeanCreationException(beanName,_					"Bean instance of type [" + beanInstance.getClass() + "] is not a FactoryBean")__		}_		return (FactoryBean) beanInstance__	};get,a,factory,bean,for,the,given,bean,if,possible,param,bean,name,the,name,of,the,bean,param,bean,instance,the,corresponding,bean,instance,return,the,bean,instance,as,factory,bean,throws,beans,exception,if,the,given,bean,cannot,be,exposed,as,a,factory,bean;protected,factory,bean,get,factory,bean,string,bean,name,object,bean,instance,throws,beans,exception,if,bean,instance,instanceof,factory,bean,throw,new,bean,creation,exception,bean,name,bean,instance,of,type,bean,instance,get,class,is,not,a,factory,bean,return,factory,bean,bean,instance
FactoryBeanRegistrySupport -> protected FactoryBean getFactoryBean(String beanName, Object beanInstance) throws BeansException;1357119239;Get a FactoryBean for the given bean if possible._@param beanName the name of the bean_@param beanInstance the corresponding bean instance_@return the bean instance as FactoryBean_@throws BeansException if the given bean cannot be exposed as a FactoryBean;protected FactoryBean getFactoryBean(String beanName, Object beanInstance) throws BeansException {_		if (!(beanInstance instanceof FactoryBean)) {_			throw new BeanCreationException(beanName,_					"Bean instance of type [" + beanInstance.getClass() + "] is not a FactoryBean")__		}_		return (FactoryBean) beanInstance__	};get,a,factory,bean,for,the,given,bean,if,possible,param,bean,name,the,name,of,the,bean,param,bean,instance,the,corresponding,bean,instance,return,the,bean,instance,as,factory,bean,throws,beans,exception,if,the,given,bean,cannot,be,exposed,as,a,factory,bean;protected,factory,bean,get,factory,bean,string,bean,name,object,bean,instance,throws,beans,exception,if,bean,instance,instanceof,factory,bean,throw,new,bean,creation,exception,bean,name,bean,instance,of,type,bean,instance,get,class,is,not,a,factory,bean,return,factory,bean,bean,instance
FactoryBeanRegistrySupport -> protected FactoryBean getFactoryBean(String beanName, Object beanInstance) throws BeansException;1368482696;Get a FactoryBean for the given bean if possible._@param beanName the name of the bean_@param beanInstance the corresponding bean instance_@return the bean instance as FactoryBean_@throws BeansException if the given bean cannot be exposed as a FactoryBean;protected FactoryBean getFactoryBean(String beanName, Object beanInstance) throws BeansException {_		if (!(beanInstance instanceof FactoryBean)) {_			throw new BeanCreationException(beanName,_					"Bean instance of type [" + beanInstance.getClass() + "] is not a FactoryBean")__		}_		return (FactoryBean) beanInstance__	};get,a,factory,bean,for,the,given,bean,if,possible,param,bean,name,the,name,of,the,bean,param,bean,instance,the,corresponding,bean,instance,return,the,bean,instance,as,factory,bean,throws,beans,exception,if,the,given,bean,cannot,be,exposed,as,a,factory,bean;protected,factory,bean,get,factory,bean,string,bean,name,object,bean,instance,throws,beans,exception,if,bean,instance,instanceof,factory,bean,throw,new,bean,creation,exception,bean,name,bean,instance,of,type,bean,instance,get,class,is,not,a,factory,bean,return,factory,bean,bean,instance
FactoryBeanRegistrySupport -> @Nullable 	protected Object getObjectFromFactoryBean(FactoryBean<?> factory, String beanName, boolean shouldPostProcess);1496837955;Obtain an object to expose from the given FactoryBean._@param factory the FactoryBean instance_@param beanName the name of the bean_@param shouldPostProcess whether the bean is subject to post-processing_@return the object obtained from the FactoryBean_@throws BeanCreationException if FactoryBean object creation failed_@see org.springframework.beans.factory.FactoryBean#getObject();@Nullable_	protected Object getObjectFromFactoryBean(FactoryBean<?> factory, String beanName, boolean shouldPostProcess) {_		if (factory.isSingleton() && containsSingleton(beanName)) {_			synchronized (getSingletonMutex()) {_				Object object = this.factoryBeanObjectCache.get(beanName)__				if (object == null) {_					object = doGetObjectFromFactoryBean(factory, beanName)__					_					_					Object alreadyThere = this.factoryBeanObjectCache.get(beanName)__					if (alreadyThere != null) {_						object = alreadyThere__					}_					else {_						if (object != null && shouldPostProcess) {_							try {_								object = postProcessObjectFromFactoryBean(object, beanName)__							}_							catch (Throwable ex) {_								throw new BeanCreationException(beanName,_										"Post-processing of FactoryBean's singleton object failed", ex)__							}_						}_						this.factoryBeanObjectCache.put(beanName, (object != null ? object : NULL_OBJECT))__					}_				}_				return (object != NULL_OBJECT ? object : null)__			}_		}_		else {_			Object object = doGetObjectFromFactoryBean(factory, beanName)__			if (object != null && shouldPostProcess) {_				try {_					object = postProcessObjectFromFactoryBean(object, beanName)__				}_				catch (Throwable ex) {_					throw new BeanCreationException(beanName, "Post-processing of FactoryBean's object failed", ex)__				}_			}_			return object__		}_	};obtain,an,object,to,expose,from,the,given,factory,bean,param,factory,the,factory,bean,instance,param,bean,name,the,name,of,the,bean,param,should,post,process,whether,the,bean,is,subject,to,post,processing,return,the,object,obtained,from,the,factory,bean,throws,bean,creation,exception,if,factory,bean,object,creation,failed,see,org,springframework,beans,factory,factory,bean,get,object;nullable,protected,object,get,object,from,factory,bean,factory,bean,factory,string,bean,name,boolean,should,post,process,if,factory,is,singleton,contains,singleton,bean,name,synchronized,get,singleton,mutex,object,object,this,factory,bean,object,cache,get,bean,name,if,object,null,object,do,get,object,from,factory,bean,factory,bean,name,object,already,there,this,factory,bean,object,cache,get,bean,name,if,already,there,null,object,already,there,else,if,object,null,should,post,process,try,object,post,process,object,from,factory,bean,object,bean,name,catch,throwable,ex,throw,new,bean,creation,exception,bean,name,post,processing,of,factory,bean,s,singleton,object,failed,ex,this,factory,bean,object,cache,put,bean,name,object,null,object,return,object,object,null,else,object,object,do,get,object,from,factory,bean,factory,bean,name,if,object,null,should,post,process,try,object,post,process,object,from,factory,bean,object,bean,name,catch,throwable,ex,throw,new,bean,creation,exception,bean,name,post,processing,of,factory,bean,s,object,failed,ex,return,object
FactoryBeanRegistrySupport -> @Nullable 	protected Object getObjectFromFactoryBean(FactoryBean<?> factory, String beanName, boolean shouldPostProcess);1498849035;Obtain an object to expose from the given FactoryBean._@param factory the FactoryBean instance_@param beanName the name of the bean_@param shouldPostProcess whether the bean is subject to post-processing_@return the object obtained from the FactoryBean_@throws BeanCreationException if FactoryBean object creation failed_@see org.springframework.beans.factory.FactoryBean#getObject();@Nullable_	protected Object getObjectFromFactoryBean(FactoryBean<?> factory, String beanName, boolean shouldPostProcess) {_		if (factory.isSingleton() && containsSingleton(beanName)) {_			synchronized (getSingletonMutex()) {_				Object object = this.factoryBeanObjectCache.get(beanName)__				if (object == null) {_					object = doGetObjectFromFactoryBean(factory, beanName)__					_					_					Object alreadyThere = this.factoryBeanObjectCache.get(beanName)__					if (alreadyThere != null) {_						object = alreadyThere__					}_					else {_						if (object != null && shouldPostProcess) {_							try {_								object = postProcessObjectFromFactoryBean(object, beanName)__							}_							catch (Throwable ex) {_								throw new BeanCreationException(beanName,_										"Post-processing of FactoryBean's singleton object failed", ex)__							}_						}_						this.factoryBeanObjectCache.put(beanName, (object != null ? object : NULL_OBJECT))__					}_				}_				return (object != NULL_OBJECT ? object : null)__			}_		}_		else {_			Object object = doGetObjectFromFactoryBean(factory, beanName)__			if (object != null && shouldPostProcess) {_				try {_					object = postProcessObjectFromFactoryBean(object, beanName)__				}_				catch (Throwable ex) {_					throw new BeanCreationException(beanName, "Post-processing of FactoryBean's object failed", ex)__				}_			}_			return object__		}_	};obtain,an,object,to,expose,from,the,given,factory,bean,param,factory,the,factory,bean,instance,param,bean,name,the,name,of,the,bean,param,should,post,process,whether,the,bean,is,subject,to,post,processing,return,the,object,obtained,from,the,factory,bean,throws,bean,creation,exception,if,factory,bean,object,creation,failed,see,org,springframework,beans,factory,factory,bean,get,object;nullable,protected,object,get,object,from,factory,bean,factory,bean,factory,string,bean,name,boolean,should,post,process,if,factory,is,singleton,contains,singleton,bean,name,synchronized,get,singleton,mutex,object,object,this,factory,bean,object,cache,get,bean,name,if,object,null,object,do,get,object,from,factory,bean,factory,bean,name,object,already,there,this,factory,bean,object,cache,get,bean,name,if,already,there,null,object,already,there,else,if,object,null,should,post,process,try,object,post,process,object,from,factory,bean,object,bean,name,catch,throwable,ex,throw,new,bean,creation,exception,bean,name,post,processing,of,factory,bean,s,singleton,object,failed,ex,this,factory,bean,object,cache,put,bean,name,object,null,object,return,object,object,null,else,object,object,do,get,object,from,factory,bean,factory,bean,name,if,object,null,should,post,process,try,object,post,process,object,from,factory,bean,object,bean,name,catch,throwable,ex,throw,new,bean,creation,exception,bean,name,post,processing,of,factory,bean,s,object,failed,ex,return,object
FactoryBeanRegistrySupport -> protected Class<?> getTypeForFactoryBean(final FactoryBean<?> factoryBean);1385412762;Determine the type for the given FactoryBean._@param factoryBean the FactoryBean instance to check_@return the FactoryBean's object type,_or {@code null} if the type cannot be determined yet;protected Class<?> getTypeForFactoryBean(final FactoryBean<?> factoryBean) {_		try {_			if (System.getSecurityManager() != null) {_				return AccessController.doPrivileged(new PrivilegedAction<Class<?>>() {_					@Override_					public Class<?> run() {_						return factoryBean.getObjectType()__					}_				}, getAccessControlContext())__			}_			else {_				return factoryBean.getObjectType()__			}_		}_		catch (Throwable ex) {_			_			logger.warn("FactoryBean threw exception from getObjectType, despite the contract saying " +_					"that it should return null if the type of its object cannot be determined yet", ex)__			return null__		}_	};determine,the,type,for,the,given,factory,bean,param,factory,bean,the,factory,bean,instance,to,check,return,the,factory,bean,s,object,type,or,code,null,if,the,type,cannot,be,determined,yet;protected,class,get,type,for,factory,bean,final,factory,bean,factory,bean,try,if,system,get,security,manager,null,return,access,controller,do,privileged,new,privileged,action,class,override,public,class,run,return,factory,bean,get,object,type,get,access,control,context,else,return,factory,bean,get,object,type,catch,throwable,ex,logger,warn,factory,bean,threw,exception,from,get,object,type,despite,the,contract,saying,that,it,should,return,null,if,the,type,of,its,object,cannot,be,determined,yet,ex,return,null
FactoryBeanRegistrySupport -> protected Class<?> getTypeForFactoryBean(final FactoryBean<?> factoryBean);1386678412;Determine the type for the given FactoryBean._@param factoryBean the FactoryBean instance to check_@return the FactoryBean's object type,_or {@code null} if the type cannot be determined yet;protected Class<?> getTypeForFactoryBean(final FactoryBean<?> factoryBean) {_		try {_			if (System.getSecurityManager() != null) {_				return AccessController.doPrivileged(new PrivilegedAction<Class<?>>() {_					@Override_					public Class<?> run() {_						return factoryBean.getObjectType()__					}_				}, getAccessControlContext())__			}_			else {_				return factoryBean.getObjectType()__			}_		}_		catch (Throwable ex) {_			_			logger.warn("FactoryBean threw exception from getObjectType, despite the contract saying " +_					"that it should return null if the type of its object cannot be determined yet", ex)__			return null__		}_	};determine,the,type,for,the,given,factory,bean,param,factory,bean,the,factory,bean,instance,to,check,return,the,factory,bean,s,object,type,or,code,null,if,the,type,cannot,be,determined,yet;protected,class,get,type,for,factory,bean,final,factory,bean,factory,bean,try,if,system,get,security,manager,null,return,access,controller,do,privileged,new,privileged,action,class,override,public,class,run,return,factory,bean,get,object,type,get,access,control,context,else,return,factory,bean,get,object,type,catch,throwable,ex,logger,warn,factory,bean,threw,exception,from,get,object,type,despite,the,contract,saying,that,it,should,return,null,if,the,type,of,its,object,cannot,be,determined,yet,ex,return,null
FactoryBeanRegistrySupport -> protected Class<?> getTypeForFactoryBean(final FactoryBean<?> factoryBean);1404251417;Determine the type for the given FactoryBean._@param factoryBean the FactoryBean instance to check_@return the FactoryBean's object type,_or {@code null} if the type cannot be determined yet;protected Class<?> getTypeForFactoryBean(final FactoryBean<?> factoryBean) {_		try {_			if (System.getSecurityManager() != null) {_				return AccessController.doPrivileged(new PrivilegedAction<Class<?>>() {_					@Override_					public Class<?> run() {_						return factoryBean.getObjectType()__					}_				}, getAccessControlContext())__			}_			else {_				return factoryBean.getObjectType()__			}_		}_		catch (Throwable ex) {_			_			logger.warn("FactoryBean threw exception from getObjectType, despite the contract saying " +_					"that it should return null if the type of its object cannot be determined yet", ex)__			return null__		}_	};determine,the,type,for,the,given,factory,bean,param,factory,bean,the,factory,bean,instance,to,check,return,the,factory,bean,s,object,type,or,code,null,if,the,type,cannot,be,determined,yet;protected,class,get,type,for,factory,bean,final,factory,bean,factory,bean,try,if,system,get,security,manager,null,return,access,controller,do,privileged,new,privileged,action,class,override,public,class,run,return,factory,bean,get,object,type,get,access,control,context,else,return,factory,bean,get,object,type,catch,throwable,ex,logger,warn,factory,bean,threw,exception,from,get,object,type,despite,the,contract,saying,that,it,should,return,null,if,the,type,of,its,object,cannot,be,determined,yet,ex,return,null
FactoryBeanRegistrySupport -> protected Class<?> getTypeForFactoryBean(final FactoryBean<?> factoryBean);1467730834;Determine the type for the given FactoryBean._@param factoryBean the FactoryBean instance to check_@return the FactoryBean's object type,_or {@code null} if the type cannot be determined yet;protected Class<?> getTypeForFactoryBean(final FactoryBean<?> factoryBean) {_		try {_			if (System.getSecurityManager() != null) {_				return AccessController.doPrivileged(new PrivilegedAction<Class<?>>() {_					@Override_					public Class<?> run() {_						return factoryBean.getObjectType()__					}_				}, getAccessControlContext())__			}_			else {_				return factoryBean.getObjectType()__			}_		}_		catch (Throwable ex) {_			_			logger.warn("FactoryBean threw exception from getObjectType, despite the contract saying " +_					"that it should return null if the type of its object cannot be determined yet", ex)__			return null__		}_	};determine,the,type,for,the,given,factory,bean,param,factory,bean,the,factory,bean,instance,to,check,return,the,factory,bean,s,object,type,or,code,null,if,the,type,cannot,be,determined,yet;protected,class,get,type,for,factory,bean,final,factory,bean,factory,bean,try,if,system,get,security,manager,null,return,access,controller,do,privileged,new,privileged,action,class,override,public,class,run,return,factory,bean,get,object,type,get,access,control,context,else,return,factory,bean,get,object,type,catch,throwable,ex,logger,warn,factory,bean,threw,exception,from,get,object,type,despite,the,contract,saying,that,it,should,return,null,if,the,type,of,its,object,cannot,be,determined,yet,ex,return,null
FactoryBeanRegistrySupport -> private Object doGetObjectFromFactoryBean(final FactoryBean<?> factory, final String beanName) 			throws BeanCreationException;1404251417;Obtain an object to expose from the given FactoryBean._@param factory the FactoryBean instance_@param beanName the name of the bean_@return the object obtained from the FactoryBean_@throws BeanCreationException if FactoryBean object creation failed_@see org.springframework.beans.factory.FactoryBean#getObject();private Object doGetObjectFromFactoryBean(final FactoryBean<?> factory, final String beanName)_			throws BeanCreationException {__		Object object__		try {_			if (System.getSecurityManager() != null) {_				AccessControlContext acc = getAccessControlContext()__				try {_					object = AccessController.doPrivileged(new PrivilegedExceptionAction<Object>() {_						@Override_						public Object run() throws Exception {_								return factory.getObject()__							}_						}, acc)__				}_				catch (PrivilegedActionException pae) {_					throw pae.getException()__				}_			}_			else {_				object = factory.getObject()__			}_		}_		catch (FactoryBeanNotInitializedException ex) {_			throw new BeanCurrentlyInCreationException(beanName, ex.toString())__		}_		catch (Throwable ex) {_			throw new BeanCreationException(beanName, "FactoryBean threw exception on object creation", ex)__		}__		_		_		if (object == null && isSingletonCurrentlyInCreation(beanName)) {_			throw new BeanCurrentlyInCreationException(_					beanName, "FactoryBean which is currently in creation returned null from getObject")__		}_		return object__	};obtain,an,object,to,expose,from,the,given,factory,bean,param,factory,the,factory,bean,instance,param,bean,name,the,name,of,the,bean,return,the,object,obtained,from,the,factory,bean,throws,bean,creation,exception,if,factory,bean,object,creation,failed,see,org,springframework,beans,factory,factory,bean,get,object;private,object,do,get,object,from,factory,bean,final,factory,bean,factory,final,string,bean,name,throws,bean,creation,exception,object,object,try,if,system,get,security,manager,null,access,control,context,acc,get,access,control,context,try,object,access,controller,do,privileged,new,privileged,exception,action,object,override,public,object,run,throws,exception,return,factory,get,object,acc,catch,privileged,action,exception,pae,throw,pae,get,exception,else,object,factory,get,object,catch,factory,bean,not,initialized,exception,ex,throw,new,bean,currently,in,creation,exception,bean,name,ex,to,string,catch,throwable,ex,throw,new,bean,creation,exception,bean,name,factory,bean,threw,exception,on,object,creation,ex,if,object,null,is,singleton,currently,in,creation,bean,name,throw,new,bean,currently,in,creation,exception,bean,name,factory,bean,which,is,currently,in,creation,returned,null,from,get,object,return,object
FactoryBeanRegistrySupport -> private Object doGetObjectFromFactoryBean(final FactoryBean<?> factory, final String beanName) 			throws BeanCreationException;1467730834;Obtain an object to expose from the given FactoryBean._@param factory the FactoryBean instance_@param beanName the name of the bean_@return the object obtained from the FactoryBean_@throws BeanCreationException if FactoryBean object creation failed_@see org.springframework.beans.factory.FactoryBean#getObject();private Object doGetObjectFromFactoryBean(final FactoryBean<?> factory, final String beanName)_			throws BeanCreationException {__		Object object__		try {_			if (System.getSecurityManager() != null) {_				AccessControlContext acc = getAccessControlContext()__				try {_					object = AccessController.doPrivileged(new PrivilegedExceptionAction<Object>() {_						@Override_						public Object run() throws Exception {_								return factory.getObject()__							}_						}, acc)__				}_				catch (PrivilegedActionException pae) {_					throw pae.getException()__				}_			}_			else {_				object = factory.getObject()__			}_		}_		catch (FactoryBeanNotInitializedException ex) {_			throw new BeanCurrentlyInCreationException(beanName, ex.toString())__		}_		catch (Throwable ex) {_			throw new BeanCreationException(beanName, "FactoryBean threw exception on object creation", ex)__		}__		_		_		if (object == null && isSingletonCurrentlyInCreation(beanName)) {_			throw new BeanCurrentlyInCreationException(_					beanName, "FactoryBean which is currently in creation returned null from getObject")__		}_		return object__	};obtain,an,object,to,expose,from,the,given,factory,bean,param,factory,the,factory,bean,instance,param,bean,name,the,name,of,the,bean,return,the,object,obtained,from,the,factory,bean,throws,bean,creation,exception,if,factory,bean,object,creation,failed,see,org,springframework,beans,factory,factory,bean,get,object;private,object,do,get,object,from,factory,bean,final,factory,bean,factory,final,string,bean,name,throws,bean,creation,exception,object,object,try,if,system,get,security,manager,null,access,control,context,acc,get,access,control,context,try,object,access,controller,do,privileged,new,privileged,exception,action,object,override,public,object,run,throws,exception,return,factory,get,object,acc,catch,privileged,action,exception,pae,throw,pae,get,exception,else,object,factory,get,object,catch,factory,bean,not,initialized,exception,ex,throw,new,bean,currently,in,creation,exception,bean,name,ex,to,string,catch,throwable,ex,throw,new,bean,creation,exception,bean,name,factory,bean,threw,exception,on,object,creation,ex,if,object,null,is,singleton,currently,in,creation,bean,name,throw,new,bean,currently,in,creation,exception,bean,name,factory,bean,which,is,currently,in,creation,returned,null,from,get,object,return,object
FactoryBeanRegistrySupport -> private Object doGetObjectFromFactoryBean(final FactoryBean<?> factory, final String beanName) 			throws BeanCreationException;1495868221;Obtain an object to expose from the given FactoryBean._@param factory the FactoryBean instance_@param beanName the name of the bean_@return the object obtained from the FactoryBean_@throws BeanCreationException if FactoryBean object creation failed_@see org.springframework.beans.factory.FactoryBean#getObject();private Object doGetObjectFromFactoryBean(final FactoryBean<?> factory, final String beanName)_			throws BeanCreationException {__		Object object__		try {_			if (System.getSecurityManager() != null) {_				AccessControlContext acc = getAccessControlContext()__				try {_					object = AccessController.doPrivileged(new PrivilegedExceptionAction<Object>() {_						@Override_						public Object run() throws Exception {_								return factory.getObject()__							}_						}, acc)__				}_				catch (PrivilegedActionException pae) {_					throw pae.getException()__				}_			}_			else {_				object = factory.getObject()__			}_		}_		catch (FactoryBeanNotInitializedException ex) {_			throw new BeanCurrentlyInCreationException(beanName, ex.toString())__		}_		catch (Throwable ex) {_			throw new BeanCreationException(beanName, "FactoryBean threw exception on object creation", ex)__		}__		_		_		if (object == null && isSingletonCurrentlyInCreation(beanName)) {_			throw new BeanCurrentlyInCreationException(_					beanName, "FactoryBean which is currently in creation returned null from getObject")__		}_		return object__	};obtain,an,object,to,expose,from,the,given,factory,bean,param,factory,the,factory,bean,instance,param,bean,name,the,name,of,the,bean,return,the,object,obtained,from,the,factory,bean,throws,bean,creation,exception,if,factory,bean,object,creation,failed,see,org,springframework,beans,factory,factory,bean,get,object;private,object,do,get,object,from,factory,bean,final,factory,bean,factory,final,string,bean,name,throws,bean,creation,exception,object,object,try,if,system,get,security,manager,null,access,control,context,acc,get,access,control,context,try,object,access,controller,do,privileged,new,privileged,exception,action,object,override,public,object,run,throws,exception,return,factory,get,object,acc,catch,privileged,action,exception,pae,throw,pae,get,exception,else,object,factory,get,object,catch,factory,bean,not,initialized,exception,ex,throw,new,bean,currently,in,creation,exception,bean,name,ex,to,string,catch,throwable,ex,throw,new,bean,creation,exception,bean,name,factory,bean,threw,exception,on,object,creation,ex,if,object,null,is,singleton,currently,in,creation,bean,name,throw,new,bean,currently,in,creation,exception,bean,name,factory,bean,which,is,currently,in,creation,returned,null,from,get,object,return,object
FactoryBeanRegistrySupport -> private Object doGetObjectFromFactoryBean(final FactoryBean<?> factory, final String beanName) 			throws BeanCreationException;1503007895;Obtain an object to expose from the given FactoryBean._@param factory the FactoryBean instance_@param beanName the name of the bean_@return the object obtained from the FactoryBean_@throws BeanCreationException if FactoryBean object creation failed_@see org.springframework.beans.factory.FactoryBean#getObject();private Object doGetObjectFromFactoryBean(final FactoryBean<?> factory, final String beanName)_			throws BeanCreationException {__		Object object__		try {_			if (System.getSecurityManager() != null) {_				AccessControlContext acc = getAccessControlContext()__				try {_					object = AccessController.doPrivileged((PrivilegedExceptionAction<Object>) () ->_							factory.getObject(), acc)__				}_				catch (PrivilegedActionException pae) {_					throw pae.getException()__				}_			}_			else {_				object = factory.getObject()__			}_		}_		catch (FactoryBeanNotInitializedException ex) {_			throw new BeanCurrentlyInCreationException(beanName, ex.toString())__		}_		catch (Throwable ex) {_			throw new BeanCreationException(beanName, "FactoryBean threw exception on object creation", ex)__		}__		_		_		if (object == null) {_			if (isSingletonCurrentlyInCreation(beanName)) {_				throw new BeanCurrentlyInCreationException(_						beanName, "FactoryBean which is currently in creation returned null from getObject")__			}_			object = new NullBean()__		}_		return object__	};obtain,an,object,to,expose,from,the,given,factory,bean,param,factory,the,factory,bean,instance,param,bean,name,the,name,of,the,bean,return,the,object,obtained,from,the,factory,bean,throws,bean,creation,exception,if,factory,bean,object,creation,failed,see,org,springframework,beans,factory,factory,bean,get,object;private,object,do,get,object,from,factory,bean,final,factory,bean,factory,final,string,bean,name,throws,bean,creation,exception,object,object,try,if,system,get,security,manager,null,access,control,context,acc,get,access,control,context,try,object,access,controller,do,privileged,privileged,exception,action,object,factory,get,object,acc,catch,privileged,action,exception,pae,throw,pae,get,exception,else,object,factory,get,object,catch,factory,bean,not,initialized,exception,ex,throw,new,bean,currently,in,creation,exception,bean,name,ex,to,string,catch,throwable,ex,throw,new,bean,creation,exception,bean,name,factory,bean,threw,exception,on,object,creation,ex,if,object,null,if,is,singleton,currently,in,creation,bean,name,throw,new,bean,currently,in,creation,exception,bean,name,factory,bean,which,is,currently,in,creation,returned,null,from,get,object,object,new,null,bean,return,object
FactoryBeanRegistrySupport -> private Object doGetObjectFromFactoryBean(final FactoryBean<?> factory, final String beanName) 			throws BeanCreationException;1518260986;Obtain an object to expose from the given FactoryBean._@param factory the FactoryBean instance_@param beanName the name of the bean_@return the object obtained from the FactoryBean_@throws BeanCreationException if FactoryBean object creation failed_@see org.springframework.beans.factory.FactoryBean#getObject();private Object doGetObjectFromFactoryBean(final FactoryBean<?> factory, final String beanName)_			throws BeanCreationException {__		Object object__		try {_			if (System.getSecurityManager() != null) {_				AccessControlContext acc = getAccessControlContext()__				try {_					object = AccessController.doPrivileged((PrivilegedExceptionAction<Object>) factory::getObject, acc)__				}_				catch (PrivilegedActionException pae) {_					throw pae.getException()__				}_			}_			else {_				object = factory.getObject()__			}_		}_		catch (FactoryBeanNotInitializedException ex) {_			throw new BeanCurrentlyInCreationException(beanName, ex.toString())__		}_		catch (Throwable ex) {_			throw new BeanCreationException(beanName, "FactoryBean threw exception on object creation", ex)__		}__		_		_		if (object == null) {_			if (isSingletonCurrentlyInCreation(beanName)) {_				throw new BeanCurrentlyInCreationException(_						beanName, "FactoryBean which is currently in creation returned null from getObject")__			}_			object = new NullBean()__		}_		return object__	};obtain,an,object,to,expose,from,the,given,factory,bean,param,factory,the,factory,bean,instance,param,bean,name,the,name,of,the,bean,return,the,object,obtained,from,the,factory,bean,throws,bean,creation,exception,if,factory,bean,object,creation,failed,see,org,springframework,beans,factory,factory,bean,get,object;private,object,do,get,object,from,factory,bean,final,factory,bean,factory,final,string,bean,name,throws,bean,creation,exception,object,object,try,if,system,get,security,manager,null,access,control,context,acc,get,access,control,context,try,object,access,controller,do,privileged,privileged,exception,action,object,factory,get,object,acc,catch,privileged,action,exception,pae,throw,pae,get,exception,else,object,factory,get,object,catch,factory,bean,not,initialized,exception,ex,throw,new,bean,currently,in,creation,exception,bean,name,ex,to,string,catch,throwable,ex,throw,new,bean,creation,exception,bean,name,factory,bean,threw,exception,on,object,creation,ex,if,object,null,if,is,singleton,currently,in,creation,bean,name,throw,new,bean,currently,in,creation,exception,bean,name,factory,bean,which,is,currently,in,creation,returned,null,from,get,object,object,new,null,bean,return,object
FactoryBeanRegistrySupport -> private Object doGetObjectFromFactoryBean(final FactoryBean<?> factory, final String beanName) 			throws BeanCreationException;1521822873;Obtain an object to expose from the given FactoryBean._@param factory the FactoryBean instance_@param beanName the name of the bean_@return the object obtained from the FactoryBean_@throws BeanCreationException if FactoryBean object creation failed_@see org.springframework.beans.factory.FactoryBean#getObject();private Object doGetObjectFromFactoryBean(final FactoryBean<?> factory, final String beanName)_			throws BeanCreationException {__		Object object__		try {_			if (System.getSecurityManager() != null) {_				AccessControlContext acc = getAccessControlContext()__				try {_					object = AccessController.doPrivileged((PrivilegedExceptionAction<Object>) factory::getObject, acc)__				}_				catch (PrivilegedActionException pae) {_					throw pae.getException()__				}_			}_			else {_				object = factory.getObject()__			}_		}_		catch (FactoryBeanNotInitializedException ex) {_			throw new BeanCurrentlyInCreationException(beanName, ex.toString())__		}_		catch (Throwable ex) {_			throw new BeanCreationException(beanName, "FactoryBean threw exception on object creation", ex)__		}__		_		_		if (object == null) {_			if (isSingletonCurrentlyInCreation(beanName)) {_				throw new BeanCurrentlyInCreationException(_						beanName, "FactoryBean which is currently in creation returned null from getObject")__			}_			object = new NullBean()__		}_		return object__	};obtain,an,object,to,expose,from,the,given,factory,bean,param,factory,the,factory,bean,instance,param,bean,name,the,name,of,the,bean,return,the,object,obtained,from,the,factory,bean,throws,bean,creation,exception,if,factory,bean,object,creation,failed,see,org,springframework,beans,factory,factory,bean,get,object;private,object,do,get,object,from,factory,bean,final,factory,bean,factory,final,string,bean,name,throws,bean,creation,exception,object,object,try,if,system,get,security,manager,null,access,control,context,acc,get,access,control,context,try,object,access,controller,do,privileged,privileged,exception,action,object,factory,get,object,acc,catch,privileged,action,exception,pae,throw,pae,get,exception,else,object,factory,get,object,catch,factory,bean,not,initialized,exception,ex,throw,new,bean,currently,in,creation,exception,bean,name,ex,to,string,catch,throwable,ex,throw,new,bean,creation,exception,bean,name,factory,bean,threw,exception,on,object,creation,ex,if,object,null,if,is,singleton,currently,in,creation,bean,name,throw,new,bean,currently,in,creation,exception,bean,name,factory,bean,which,is,currently,in,creation,returned,null,from,get,object,object,new,null,bean,return,object
FactoryBeanRegistrySupport -> private Object doGetObjectFromFactoryBean(final FactoryBean<?> factory, final String beanName) 			throws BeanCreationException;1522103043;Obtain an object to expose from the given FactoryBean._@param factory the FactoryBean instance_@param beanName the name of the bean_@return the object obtained from the FactoryBean_@throws BeanCreationException if FactoryBean object creation failed_@see org.springframework.beans.factory.FactoryBean#getObject();private Object doGetObjectFromFactoryBean(final FactoryBean<?> factory, final String beanName)_			throws BeanCreationException {__		Object object__		try {_			if (System.getSecurityManager() != null) {_				AccessControlContext acc = getAccessControlContext()__				try {_					object = AccessController.doPrivileged((PrivilegedExceptionAction<Object>) factory::getObject, acc)__				}_				catch (PrivilegedActionException pae) {_					throw pae.getException()__				}_			}_			else {_				object = factory.getObject()__			}_		}_		catch (FactoryBeanNotInitializedException ex) {_			throw new BeanCurrentlyInCreationException(beanName, ex.toString())__		}_		catch (Throwable ex) {_			throw new BeanCreationException(beanName, "FactoryBean threw exception on object creation", ex)__		}__		_		_		if (object == null) {_			if (isSingletonCurrentlyInCreation(beanName)) {_				throw new BeanCurrentlyInCreationException(_						beanName, "FactoryBean which is currently in creation returned null from getObject")__			}_			object = new NullBean()__		}_		return object__	};obtain,an,object,to,expose,from,the,given,factory,bean,param,factory,the,factory,bean,instance,param,bean,name,the,name,of,the,bean,return,the,object,obtained,from,the,factory,bean,throws,bean,creation,exception,if,factory,bean,object,creation,failed,see,org,springframework,beans,factory,factory,bean,get,object;private,object,do,get,object,from,factory,bean,final,factory,bean,factory,final,string,bean,name,throws,bean,creation,exception,object,object,try,if,system,get,security,manager,null,access,control,context,acc,get,access,control,context,try,object,access,controller,do,privileged,privileged,exception,action,object,factory,get,object,acc,catch,privileged,action,exception,pae,throw,pae,get,exception,else,object,factory,get,object,catch,factory,bean,not,initialized,exception,ex,throw,new,bean,currently,in,creation,exception,bean,name,ex,to,string,catch,throwable,ex,throw,new,bean,creation,exception,bean,name,factory,bean,threw,exception,on,object,creation,ex,if,object,null,if,is,singleton,currently,in,creation,bean,name,throw,new,bean,currently,in,creation,exception,bean,name,factory,bean,which,is,currently,in,creation,returned,null,from,get,object,object,new,null,bean,return,object
FactoryBeanRegistrySupport -> private Object doGetObjectFromFactoryBean(final FactoryBean<?> factory, final String beanName) 			throws BeanCreationException;1525267300;Obtain an object to expose from the given FactoryBean._@param factory the FactoryBean instance_@param beanName the name of the bean_@return the object obtained from the FactoryBean_@throws BeanCreationException if FactoryBean object creation failed_@see org.springframework.beans.factory.FactoryBean#getObject();private Object doGetObjectFromFactoryBean(final FactoryBean<?> factory, final String beanName)_			throws BeanCreationException {__		Object object__		try {_			if (System.getSecurityManager() != null) {_				AccessControlContext acc = getAccessControlContext()__				try {_					object = AccessController.doPrivileged((PrivilegedExceptionAction<Object>) factory::getObject, acc)__				}_				catch (PrivilegedActionException pae) {_					throw pae.getException()__				}_			}_			else {_				object = factory.getObject()__			}_		}_		catch (FactoryBeanNotInitializedException ex) {_			throw new BeanCurrentlyInCreationException(beanName, ex.toString())__		}_		catch (Throwable ex) {_			throw new BeanCreationException(beanName, "FactoryBean threw exception on object creation", ex)__		}__		_		_		if (object == null) {_			if (isSingletonCurrentlyInCreation(beanName)) {_				throw new BeanCurrentlyInCreationException(_						beanName, "FactoryBean which is currently in creation returned null from getObject")__			}_			object = new NullBean()__		}_		return object__	};obtain,an,object,to,expose,from,the,given,factory,bean,param,factory,the,factory,bean,instance,param,bean,name,the,name,of,the,bean,return,the,object,obtained,from,the,factory,bean,throws,bean,creation,exception,if,factory,bean,object,creation,failed,see,org,springframework,beans,factory,factory,bean,get,object;private,object,do,get,object,from,factory,bean,final,factory,bean,factory,final,string,bean,name,throws,bean,creation,exception,object,object,try,if,system,get,security,manager,null,access,control,context,acc,get,access,control,context,try,object,access,controller,do,privileged,privileged,exception,action,object,factory,get,object,acc,catch,privileged,action,exception,pae,throw,pae,get,exception,else,object,factory,get,object,catch,factory,bean,not,initialized,exception,ex,throw,new,bean,currently,in,creation,exception,bean,name,ex,to,string,catch,throwable,ex,throw,new,bean,creation,exception,bean,name,factory,bean,threw,exception,on,object,creation,ex,if,object,null,if,is,singleton,currently,in,creation,bean,name,throw,new,bean,currently,in,creation,exception,bean,name,factory,bean,which,is,currently,in,creation,returned,null,from,get,object,object,new,null,bean,return,object
FactoryBeanRegistrySupport -> private Object doGetObjectFromFactoryBean(final FactoryBean<?> factory, final String beanName) 			throws BeanCreationException;1530174524;Obtain an object to expose from the given FactoryBean._@param factory the FactoryBean instance_@param beanName the name of the bean_@return the object obtained from the FactoryBean_@throws BeanCreationException if FactoryBean object creation failed_@see org.springframework.beans.factory.FactoryBean#getObject();private Object doGetObjectFromFactoryBean(final FactoryBean<?> factory, final String beanName)_			throws BeanCreationException {__		Object object__		try {_			if (System.getSecurityManager() != null) {_				AccessControlContext acc = getAccessControlContext()__				try {_					object = AccessController.doPrivileged((PrivilegedExceptionAction<Object>) factory::getObject, acc)__				}_				catch (PrivilegedActionException pae) {_					throw pae.getException()__				}_			}_			else {_				object = factory.getObject()__			}_		}_		catch (FactoryBeanNotInitializedException ex) {_			throw new BeanCurrentlyInCreationException(beanName, ex.toString())__		}_		catch (Throwable ex) {_			throw new BeanCreationException(beanName, "FactoryBean threw exception on object creation", ex)__		}__		_		_		if (object == null) {_			if (isSingletonCurrentlyInCreation(beanName)) {_				throw new BeanCurrentlyInCreationException(_						beanName, "FactoryBean which is currently in creation returned null from getObject")__			}_			object = new NullBean()__		}_		return object__	};obtain,an,object,to,expose,from,the,given,factory,bean,param,factory,the,factory,bean,instance,param,bean,name,the,name,of,the,bean,return,the,object,obtained,from,the,factory,bean,throws,bean,creation,exception,if,factory,bean,object,creation,failed,see,org,springframework,beans,factory,factory,bean,get,object;private,object,do,get,object,from,factory,bean,final,factory,bean,factory,final,string,bean,name,throws,bean,creation,exception,object,object,try,if,system,get,security,manager,null,access,control,context,acc,get,access,control,context,try,object,access,controller,do,privileged,privileged,exception,action,object,factory,get,object,acc,catch,privileged,action,exception,pae,throw,pae,get,exception,else,object,factory,get,object,catch,factory,bean,not,initialized,exception,ex,throw,new,bean,currently,in,creation,exception,bean,name,ex,to,string,catch,throwable,ex,throw,new,bean,creation,exception,bean,name,factory,bean,threw,exception,on,object,creation,ex,if,object,null,if,is,singleton,currently,in,creation,bean,name,throw,new,bean,currently,in,creation,exception,bean,name,factory,bean,which,is,currently,in,creation,returned,null,from,get,object,object,new,null,bean,return,object
FactoryBeanRegistrySupport -> private Object doGetObjectFromFactoryBean(final FactoryBean<?> factory, final String beanName) 			throws BeanCreationException;1532091916;Obtain an object to expose from the given FactoryBean._@param factory the FactoryBean instance_@param beanName the name of the bean_@return the object obtained from the FactoryBean_@throws BeanCreationException if FactoryBean object creation failed_@see org.springframework.beans.factory.FactoryBean#getObject();private Object doGetObjectFromFactoryBean(final FactoryBean<?> factory, final String beanName)_			throws BeanCreationException {__		Object object__		try {_			if (System.getSecurityManager() != null) {_				AccessControlContext acc = getAccessControlContext()__				try {_					object = AccessController.doPrivileged((PrivilegedExceptionAction<Object>) factory::getObject, acc)__				}_				catch (PrivilegedActionException pae) {_					throw pae.getException()__				}_			}_			else {_				object = factory.getObject()__			}_		}_		catch (FactoryBeanNotInitializedException ex) {_			throw new BeanCurrentlyInCreationException(beanName, ex.toString())__		}_		catch (Throwable ex) {_			throw new BeanCreationException(beanName, "FactoryBean threw exception on object creation", ex)__		}__		_		_		if (object == null) {_			if (isSingletonCurrentlyInCreation(beanName)) {_				throw new BeanCurrentlyInCreationException(_						beanName, "FactoryBean which is currently in creation returned null from getObject")__			}_			object = new NullBean()__		}_		return object__	};obtain,an,object,to,expose,from,the,given,factory,bean,param,factory,the,factory,bean,instance,param,bean,name,the,name,of,the,bean,return,the,object,obtained,from,the,factory,bean,throws,bean,creation,exception,if,factory,bean,object,creation,failed,see,org,springframework,beans,factory,factory,bean,get,object;private,object,do,get,object,from,factory,bean,final,factory,bean,factory,final,string,bean,name,throws,bean,creation,exception,object,object,try,if,system,get,security,manager,null,access,control,context,acc,get,access,control,context,try,object,access,controller,do,privileged,privileged,exception,action,object,factory,get,object,acc,catch,privileged,action,exception,pae,throw,pae,get,exception,else,object,factory,get,object,catch,factory,bean,not,initialized,exception,ex,throw,new,bean,currently,in,creation,exception,bean,name,ex,to,string,catch,throwable,ex,throw,new,bean,creation,exception,bean,name,factory,bean,threw,exception,on,object,creation,ex,if,object,null,if,is,singleton,currently,in,creation,bean,name,throw,new,bean,currently,in,creation,exception,bean,name,factory,bean,which,is,currently,in,creation,returned,null,from,get,object,object,new,null,bean,return,object
FactoryBeanRegistrySupport -> @Override 	protected void clearSingletonCache();1521822873;Overridden to clear the FactoryBean object cache as well.;@Override_	protected void clearSingletonCache() {_		synchronized (getSingletonMutex()) {_			super.clearSingletonCache()__			this.factoryBeanObjectCache.clear()__		}_	};overridden,to,clear,the,factory,bean,object,cache,as,well;override,protected,void,clear,singleton,cache,synchronized,get,singleton,mutex,super,clear,singleton,cache,this,factory,bean,object,cache,clear
FactoryBeanRegistrySupport -> @Override 	protected void clearSingletonCache();1522103043;Overridden to clear the FactoryBean object cache as well.;@Override_	protected void clearSingletonCache() {_		synchronized (getSingletonMutex()) {_			super.clearSingletonCache()__			this.factoryBeanObjectCache.clear()__		}_	};overridden,to,clear,the,factory,bean,object,cache,as,well;override,protected,void,clear,singleton,cache,synchronized,get,singleton,mutex,super,clear,singleton,cache,this,factory,bean,object,cache,clear
FactoryBeanRegistrySupport -> @Override 	protected void clearSingletonCache();1525267300;Overridden to clear the FactoryBean object cache as well.;@Override_	protected void clearSingletonCache() {_		synchronized (getSingletonMutex()) {_			super.clearSingletonCache()__			this.factoryBeanObjectCache.clear()__		}_	};overridden,to,clear,the,factory,bean,object,cache,as,well;override,protected,void,clear,singleton,cache,synchronized,get,singleton,mutex,super,clear,singleton,cache,this,factory,bean,object,cache,clear
FactoryBeanRegistrySupport -> @Override 	protected void clearSingletonCache();1530174524;Overridden to clear the FactoryBean object cache as well.;@Override_	protected void clearSingletonCache() {_		synchronized (getSingletonMutex()) {_			super.clearSingletonCache()__			this.factoryBeanObjectCache.clear()__		}_	};overridden,to,clear,the,factory,bean,object,cache,as,well;override,protected,void,clear,singleton,cache,synchronized,get,singleton,mutex,super,clear,singleton,cache,this,factory,bean,object,cache,clear
FactoryBeanRegistrySupport -> @Override 	protected void clearSingletonCache();1532091916;Overridden to clear the FactoryBean object cache as well.;@Override_	protected void clearSingletonCache() {_		synchronized (getSingletonMutex()) {_			super.clearSingletonCache()__			this.factoryBeanObjectCache.clear()__		}_	};overridden,to,clear,the,factory,bean,object,cache,as,well;override,protected,void,clear,singleton,cache,synchronized,get,singleton,mutex,super,clear,singleton,cache,this,factory,bean,object,cache,clear
FactoryBeanRegistrySupport -> protected Object getObjectFromFactoryBean(FactoryBean factory, String beanName, boolean shouldPostProcess);1328020251;Obtain an object to expose from the given FactoryBean._@param factory the FactoryBean instance_@param beanName the name of the bean_@param shouldPostProcess whether the bean is subject for post-processing_@return the object obtained from the FactoryBean_@throws BeanCreationException if FactoryBean object creation failed_@see org.springframework.beans.factory.FactoryBean#getObject();protected Object getObjectFromFactoryBean(FactoryBean factory, String beanName, boolean shouldPostProcess) {_		if (factory.isSingleton() && containsSingleton(beanName)) {_			synchronized (getSingletonMutex()) {_				Object object = this.factoryBeanObjectCache.get(beanName)__				if (object == null) {_					object = doGetObjectFromFactoryBean(factory, beanName, shouldPostProcess)__					this.factoryBeanObjectCache.put(beanName, (object != null ? object : NULL_OBJECT))__				}_				return (object != NULL_OBJECT ? object : null)__			}_		}_		else {_			return doGetObjectFromFactoryBean(factory, beanName, shouldPostProcess)__		}_	};obtain,an,object,to,expose,from,the,given,factory,bean,param,factory,the,factory,bean,instance,param,bean,name,the,name,of,the,bean,param,should,post,process,whether,the,bean,is,subject,for,post,processing,return,the,object,obtained,from,the,factory,bean,throws,bean,creation,exception,if,factory,bean,object,creation,failed,see,org,springframework,beans,factory,factory,bean,get,object;protected,object,get,object,from,factory,bean,factory,bean,factory,string,bean,name,boolean,should,post,process,if,factory,is,singleton,contains,singleton,bean,name,synchronized,get,singleton,mutex,object,object,this,factory,bean,object,cache,get,bean,name,if,object,null,object,do,get,object,from,factory,bean,factory,bean,name,should,post,process,this,factory,bean,object,cache,put,bean,name,object,null,object,return,object,object,null,else,return,do,get,object,from,factory,bean,factory,bean,name,should,post,process
FactoryBeanRegistrySupport -> protected Object getObjectFromFactoryBean(FactoryBean factory, String beanName, boolean shouldPostProcess);1355352386;Obtain an object to expose from the given FactoryBean._@param factory the FactoryBean instance_@param beanName the name of the bean_@param shouldPostProcess whether the bean is subject for post-processing_@return the object obtained from the FactoryBean_@throws BeanCreationException if FactoryBean object creation failed_@see org.springframework.beans.factory.FactoryBean#getObject();protected Object getObjectFromFactoryBean(FactoryBean factory, String beanName, boolean shouldPostProcess) {_		if (factory.isSingleton() && containsSingleton(beanName)) {_			synchronized (getSingletonMutex()) {_				Object object = this.factoryBeanObjectCache.get(beanName)__				if (object == null) {_					object = doGetObjectFromFactoryBean(factory, beanName, shouldPostProcess)__					this.factoryBeanObjectCache.put(beanName, (object != null ? object : NULL_OBJECT))__				}_				return (object != NULL_OBJECT ? object : null)__			}_		}_		else {_			return doGetObjectFromFactoryBean(factory, beanName, shouldPostProcess)__		}_	};obtain,an,object,to,expose,from,the,given,factory,bean,param,factory,the,factory,bean,instance,param,bean,name,the,name,of,the,bean,param,should,post,process,whether,the,bean,is,subject,for,post,processing,return,the,object,obtained,from,the,factory,bean,throws,bean,creation,exception,if,factory,bean,object,creation,failed,see,org,springframework,beans,factory,factory,bean,get,object;protected,object,get,object,from,factory,bean,factory,bean,factory,string,bean,name,boolean,should,post,process,if,factory,is,singleton,contains,singleton,bean,name,synchronized,get,singleton,mutex,object,object,this,factory,bean,object,cache,get,bean,name,if,object,null,object,do,get,object,from,factory,bean,factory,bean,name,should,post,process,this,factory,bean,object,cache,put,bean,name,object,null,object,return,object,object,null,else,return,do,get,object,from,factory,bean,factory,bean,name,should,post,process
FactoryBeanRegistrySupport -> protected Object getObjectFromFactoryBean(FactoryBean factory, String beanName, boolean shouldPostProcess);1356735495;Obtain an object to expose from the given FactoryBean._@param factory the FactoryBean instance_@param beanName the name of the bean_@param shouldPostProcess whether the bean is subject for post-processing_@return the object obtained from the FactoryBean_@throws BeanCreationException if FactoryBean object creation failed_@see org.springframework.beans.factory.FactoryBean#getObject();protected Object getObjectFromFactoryBean(FactoryBean factory, String beanName, boolean shouldPostProcess) {_		if (factory.isSingleton() && containsSingleton(beanName)) {_			synchronized (getSingletonMutex()) {_				Object object = this.factoryBeanObjectCache.get(beanName)__				if (object == null) {_					object = doGetObjectFromFactoryBean(factory, beanName, shouldPostProcess)__					this.factoryBeanObjectCache.put(beanName, (object != null ? object : NULL_OBJECT))__				}_				return (object != NULL_OBJECT ? object : null)__			}_		}_		else {_			return doGetObjectFromFactoryBean(factory, beanName, shouldPostProcess)__		}_	};obtain,an,object,to,expose,from,the,given,factory,bean,param,factory,the,factory,bean,instance,param,bean,name,the,name,of,the,bean,param,should,post,process,whether,the,bean,is,subject,for,post,processing,return,the,object,obtained,from,the,factory,bean,throws,bean,creation,exception,if,factory,bean,object,creation,failed,see,org,springframework,beans,factory,factory,bean,get,object;protected,object,get,object,from,factory,bean,factory,bean,factory,string,bean,name,boolean,should,post,process,if,factory,is,singleton,contains,singleton,bean,name,synchronized,get,singleton,mutex,object,object,this,factory,bean,object,cache,get,bean,name,if,object,null,object,do,get,object,from,factory,bean,factory,bean,name,should,post,process,this,factory,bean,object,cache,put,bean,name,object,null,object,return,object,object,null,else,return,do,get,object,from,factory,bean,factory,bean,name,should,post,process
FactoryBeanRegistrySupport -> protected Object getObjectFromFactoryBean(FactoryBean factory, String beanName, boolean shouldPostProcess);1357119239;Obtain an object to expose from the given FactoryBean._@param factory the FactoryBean instance_@param beanName the name of the bean_@param shouldPostProcess whether the bean is subject for post-processing_@return the object obtained from the FactoryBean_@throws BeanCreationException if FactoryBean object creation failed_@see org.springframework.beans.factory.FactoryBean#getObject();protected Object getObjectFromFactoryBean(FactoryBean factory, String beanName, boolean shouldPostProcess) {_		if (factory.isSingleton() && containsSingleton(beanName)) {_			synchronized (getSingletonMutex()) {_				Object object = this.factoryBeanObjectCache.get(beanName)__				if (object == null) {_					object = doGetObjectFromFactoryBean(factory, beanName, shouldPostProcess)__					this.factoryBeanObjectCache.put(beanName, (object != null ? object : NULL_OBJECT))__				}_				return (object != NULL_OBJECT ? object : null)__			}_		}_		else {_			return doGetObjectFromFactoryBean(factory, beanName, shouldPostProcess)__		}_	};obtain,an,object,to,expose,from,the,given,factory,bean,param,factory,the,factory,bean,instance,param,bean,name,the,name,of,the,bean,param,should,post,process,whether,the,bean,is,subject,for,post,processing,return,the,object,obtained,from,the,factory,bean,throws,bean,creation,exception,if,factory,bean,object,creation,failed,see,org,springframework,beans,factory,factory,bean,get,object;protected,object,get,object,from,factory,bean,factory,bean,factory,string,bean,name,boolean,should,post,process,if,factory,is,singleton,contains,singleton,bean,name,synchronized,get,singleton,mutex,object,object,this,factory,bean,object,cache,get,bean,name,if,object,null,object,do,get,object,from,factory,bean,factory,bean,name,should,post,process,this,factory,bean,object,cache,put,bean,name,object,null,object,return,object,object,null,else,return,do,get,object,from,factory,bean,factory,bean,name,should,post,process
FactoryBeanRegistrySupport -> protected Object getObjectFromFactoryBean(FactoryBean factory, String beanName, boolean shouldPostProcess);1368482696;Obtain an object to expose from the given FactoryBean._@param factory the FactoryBean instance_@param beanName the name of the bean_@param shouldPostProcess whether the bean is subject for post-processing_@return the object obtained from the FactoryBean_@throws BeanCreationException if FactoryBean object creation failed_@see org.springframework.beans.factory.FactoryBean#getObject();protected Object getObjectFromFactoryBean(FactoryBean factory, String beanName, boolean shouldPostProcess) {_		if (factory.isSingleton() && containsSingleton(beanName)) {_			synchronized (getSingletonMutex()) {_				Object object = this.factoryBeanObjectCache.get(beanName)__				if (object == null) {_					object = doGetObjectFromFactoryBean(factory, beanName, shouldPostProcess)__					this.factoryBeanObjectCache.put(beanName, (object != null ? object : NULL_OBJECT))__				}_				return (object != NULL_OBJECT ? object : null)__			}_		}_		else {_			return doGetObjectFromFactoryBean(factory, beanName, shouldPostProcess)__		}_	};obtain,an,object,to,expose,from,the,given,factory,bean,param,factory,the,factory,bean,instance,param,bean,name,the,name,of,the,bean,param,should,post,process,whether,the,bean,is,subject,for,post,processing,return,the,object,obtained,from,the,factory,bean,throws,bean,creation,exception,if,factory,bean,object,creation,failed,see,org,springframework,beans,factory,factory,bean,get,object;protected,object,get,object,from,factory,bean,factory,bean,factory,string,bean,name,boolean,should,post,process,if,factory,is,singleton,contains,singleton,bean,name,synchronized,get,singleton,mutex,object,object,this,factory,bean,object,cache,get,bean,name,if,object,null,object,do,get,object,from,factory,bean,factory,bean,name,should,post,process,this,factory,bean,object,cache,put,bean,name,object,null,object,return,object,object,null,else,return,do,get,object,from,factory,bean,factory,bean,name,should,post,process
FactoryBeanRegistrySupport -> private Object doGetObjectFromFactoryBean( 			final FactoryBean<?> factory, final String beanName, final boolean shouldPostProcess) 			throws BeanCreationException;1385412762;Obtain an object to expose from the given FactoryBean._@param factory the FactoryBean instance_@param beanName the name of the bean_@param shouldPostProcess whether the bean is subject for post-processing_@return the object obtained from the FactoryBean_@throws BeanCreationException if FactoryBean object creation failed_@see org.springframework.beans.factory.FactoryBean#getObject();private Object doGetObjectFromFactoryBean(_			final FactoryBean<?> factory, final String beanName, final boolean shouldPostProcess)_			throws BeanCreationException {__		Object object__		try {_			if (System.getSecurityManager() != null) {_				AccessControlContext acc = getAccessControlContext()__				try {_					object = AccessController.doPrivileged(new PrivilegedExceptionAction<Object>() {_						@Override_						public Object run() throws Exception {_								return factory.getObject()__							}_						}, acc)__				}_				catch (PrivilegedActionException pae) {_					throw pae.getException()__				}_			}_			else {_				object = factory.getObject()__			}_		}_		catch (FactoryBeanNotInitializedException ex) {_			throw new BeanCurrentlyInCreationException(beanName, ex.toString())__		}_		catch (Throwable ex) {_			throw new BeanCreationException(beanName, "FactoryBean threw exception on object creation", ex)__		}___		_		_		if (object == null && isSingletonCurrentlyInCreation(beanName)) {_			throw new BeanCurrentlyInCreationException(_					beanName, "FactoryBean which is currently in creation returned null from getObject")__		}__		if (object != null && shouldPostProcess) {_			try {_				object = postProcessObjectFromFactoryBean(object, beanName)__			}_			catch (Throwable ex) {_				throw new BeanCreationException(beanName, "Post-processing of the FactoryBean's object failed", ex)__			}_		}__		return object__	};obtain,an,object,to,expose,from,the,given,factory,bean,param,factory,the,factory,bean,instance,param,bean,name,the,name,of,the,bean,param,should,post,process,whether,the,bean,is,subject,for,post,processing,return,the,object,obtained,from,the,factory,bean,throws,bean,creation,exception,if,factory,bean,object,creation,failed,see,org,springframework,beans,factory,factory,bean,get,object;private,object,do,get,object,from,factory,bean,final,factory,bean,factory,final,string,bean,name,final,boolean,should,post,process,throws,bean,creation,exception,object,object,try,if,system,get,security,manager,null,access,control,context,acc,get,access,control,context,try,object,access,controller,do,privileged,new,privileged,exception,action,object,override,public,object,run,throws,exception,return,factory,get,object,acc,catch,privileged,action,exception,pae,throw,pae,get,exception,else,object,factory,get,object,catch,factory,bean,not,initialized,exception,ex,throw,new,bean,currently,in,creation,exception,bean,name,ex,to,string,catch,throwable,ex,throw,new,bean,creation,exception,bean,name,factory,bean,threw,exception,on,object,creation,ex,if,object,null,is,singleton,currently,in,creation,bean,name,throw,new,bean,currently,in,creation,exception,bean,name,factory,bean,which,is,currently,in,creation,returned,null,from,get,object,if,object,null,should,post,process,try,object,post,process,object,from,factory,bean,object,bean,name,catch,throwable,ex,throw,new,bean,creation,exception,bean,name,post,processing,of,the,factory,bean,s,object,failed,ex,return,object
FactoryBeanRegistrySupport -> private Object doGetObjectFromFactoryBean( 			final FactoryBean<?> factory, final String beanName, final boolean shouldPostProcess) 			throws BeanCreationException;1386678412;Obtain an object to expose from the given FactoryBean._@param factory the FactoryBean instance_@param beanName the name of the bean_@param shouldPostProcess whether the bean is subject for post-processing_@return the object obtained from the FactoryBean_@throws BeanCreationException if FactoryBean object creation failed_@see org.springframework.beans.factory.FactoryBean#getObject();private Object doGetObjectFromFactoryBean(_			final FactoryBean<?> factory, final String beanName, final boolean shouldPostProcess)_			throws BeanCreationException {__		Object object__		try {_			if (System.getSecurityManager() != null) {_				AccessControlContext acc = getAccessControlContext()__				try {_					object = AccessController.doPrivileged(new PrivilegedExceptionAction<Object>() {_						@Override_						public Object run() throws Exception {_								return factory.getObject()__							}_						}, acc)__				}_				catch (PrivilegedActionException pae) {_					throw pae.getException()__				}_			}_			else {_				object = factory.getObject()__			}_		}_		catch (FactoryBeanNotInitializedException ex) {_			throw new BeanCurrentlyInCreationException(beanName, ex.toString())__		}_		catch (Throwable ex) {_			throw new BeanCreationException(beanName, "FactoryBean threw exception on object creation", ex)__		}___		_		_		if (object == null && isSingletonCurrentlyInCreation(beanName)) {_			throw new BeanCurrentlyInCreationException(_					beanName, "FactoryBean which is currently in creation returned null from getObject")__		}__		if (object != null && shouldPostProcess) {_			try {_				object = postProcessObjectFromFactoryBean(object, beanName)__			}_			catch (Throwable ex) {_				throw new BeanCreationException(beanName, "Post-processing of the FactoryBean's object failed", ex)__			}_		}__		return object__	};obtain,an,object,to,expose,from,the,given,factory,bean,param,factory,the,factory,bean,instance,param,bean,name,the,name,of,the,bean,param,should,post,process,whether,the,bean,is,subject,for,post,processing,return,the,object,obtained,from,the,factory,bean,throws,bean,creation,exception,if,factory,bean,object,creation,failed,see,org,springframework,beans,factory,factory,bean,get,object;private,object,do,get,object,from,factory,bean,final,factory,bean,factory,final,string,bean,name,final,boolean,should,post,process,throws,bean,creation,exception,object,object,try,if,system,get,security,manager,null,access,control,context,acc,get,access,control,context,try,object,access,controller,do,privileged,new,privileged,exception,action,object,override,public,object,run,throws,exception,return,factory,get,object,acc,catch,privileged,action,exception,pae,throw,pae,get,exception,else,object,factory,get,object,catch,factory,bean,not,initialized,exception,ex,throw,new,bean,currently,in,creation,exception,bean,name,ex,to,string,catch,throwable,ex,throw,new,bean,creation,exception,bean,name,factory,bean,threw,exception,on,object,creation,ex,if,object,null,is,singleton,currently,in,creation,bean,name,throw,new,bean,currently,in,creation,exception,bean,name,factory,bean,which,is,currently,in,creation,returned,null,from,get,object,if,object,null,should,post,process,try,object,post,process,object,from,factory,bean,object,bean,name,catch,throwable,ex,throw,new,bean,creation,exception,bean,name,post,processing,of,the,factory,bean,s,object,failed,ex,return,object
FactoryBeanRegistrySupport -> @Nullable 	protected Class<?> getTypeForFactoryBean(final FactoryBean<?> factoryBean);1495868221;Determine the type for the given FactoryBean._@param factoryBean the FactoryBean instance to check_@return the FactoryBean's object type,_or {@code null} if the type cannot be determined yet;@Nullable_	protected Class<?> getTypeForFactoryBean(final FactoryBean<?> factoryBean) {_		try {_			if (System.getSecurityManager() != null) {_				return AccessController.doPrivileged(new PrivilegedAction<Class<?>>() {_					@Override_					public Class<?> run() {_						return factoryBean.getObjectType()__					}_				}, getAccessControlContext())__			}_			else {_				return factoryBean.getObjectType()__			}_		}_		catch (Throwable ex) {_			_			logger.warn("FactoryBean threw exception from getObjectType, despite the contract saying " +_					"that it should return null if the type of its object cannot be determined yet", ex)__			return null__		}_	};determine,the,type,for,the,given,factory,bean,param,factory,bean,the,factory,bean,instance,to,check,return,the,factory,bean,s,object,type,or,code,null,if,the,type,cannot,be,determined,yet;nullable,protected,class,get,type,for,factory,bean,final,factory,bean,factory,bean,try,if,system,get,security,manager,null,return,access,controller,do,privileged,new,privileged,action,class,override,public,class,run,return,factory,bean,get,object,type,get,access,control,context,else,return,factory,bean,get,object,type,catch,throwable,ex,logger,warn,factory,bean,threw,exception,from,get,object,type,despite,the,contract,saying,that,it,should,return,null,if,the,type,of,its,object,cannot,be,determined,yet,ex,return,null
FactoryBeanRegistrySupport -> @Nullable 	protected Class<?> getTypeForFactoryBean(final FactoryBean<?> factoryBean);1496837955;Determine the type for the given FactoryBean._@param factoryBean the FactoryBean instance to check_@return the FactoryBean's object type,_or {@code null} if the type cannot be determined yet;@Nullable_	protected Class<?> getTypeForFactoryBean(final FactoryBean<?> factoryBean) {_		try {_			if (System.getSecurityManager() != null) {_				return AccessController.doPrivileged((PrivilegedAction<Class<?>>) () ->_						factoryBean.getObjectType(), getAccessControlContext())__			}_			else {_				return factoryBean.getObjectType()__			}_		}_		catch (Throwable ex) {_			_			logger.warn("FactoryBean threw exception from getObjectType, despite the contract saying " +_					"that it should return null if the type of its object cannot be determined yet", ex)__			return null__		}_	};determine,the,type,for,the,given,factory,bean,param,factory,bean,the,factory,bean,instance,to,check,return,the,factory,bean,s,object,type,or,code,null,if,the,type,cannot,be,determined,yet;nullable,protected,class,get,type,for,factory,bean,final,factory,bean,factory,bean,try,if,system,get,security,manager,null,return,access,controller,do,privileged,privileged,action,class,factory,bean,get,object,type,get,access,control,context,else,return,factory,bean,get,object,type,catch,throwable,ex,logger,warn,factory,bean,threw,exception,from,get,object,type,despite,the,contract,saying,that,it,should,return,null,if,the,type,of,its,object,cannot,be,determined,yet,ex,return,null
FactoryBeanRegistrySupport -> @Nullable 	protected Class<?> getTypeForFactoryBean(final FactoryBean<?> factoryBean);1498849035;Determine the type for the given FactoryBean._@param factoryBean the FactoryBean instance to check_@return the FactoryBean's object type,_or {@code null} if the type cannot be determined yet;@Nullable_	protected Class<?> getTypeForFactoryBean(final FactoryBean<?> factoryBean) {_		try {_			if (System.getSecurityManager() != null) {_				return AccessController.doPrivileged((PrivilegedAction<Class<?>>) () ->_						factoryBean.getObjectType(), getAccessControlContext())__			}_			else {_				return factoryBean.getObjectType()__			}_		}_		catch (Throwable ex) {_			_			logger.warn("FactoryBean threw exception from getObjectType, despite the contract saying " +_					"that it should return null if the type of its object cannot be determined yet", ex)__			return null__		}_	};determine,the,type,for,the,given,factory,bean,param,factory,bean,the,factory,bean,instance,to,check,return,the,factory,bean,s,object,type,or,code,null,if,the,type,cannot,be,determined,yet;nullable,protected,class,get,type,for,factory,bean,final,factory,bean,factory,bean,try,if,system,get,security,manager,null,return,access,controller,do,privileged,privileged,action,class,factory,bean,get,object,type,get,access,control,context,else,return,factory,bean,get,object,type,catch,throwable,ex,logger,warn,factory,bean,threw,exception,from,get,object,type,despite,the,contract,saying,that,it,should,return,null,if,the,type,of,its,object,cannot,be,determined,yet,ex,return,null
FactoryBeanRegistrySupport -> @Nullable 	protected Class<?> getTypeForFactoryBean(final FactoryBean<?> factoryBean);1503007895;Determine the type for the given FactoryBean._@param factoryBean the FactoryBean instance to check_@return the FactoryBean's object type,_or {@code null} if the type cannot be determined yet;@Nullable_	protected Class<?> getTypeForFactoryBean(final FactoryBean<?> factoryBean) {_		try {_			if (System.getSecurityManager() != null) {_				return AccessController.doPrivileged((PrivilegedAction<Class<?>>) () ->_						factoryBean.getObjectType(), getAccessControlContext())__			}_			else {_				return factoryBean.getObjectType()__			}_		}_		catch (Throwable ex) {_			_			logger.warn("FactoryBean threw exception from getObjectType, despite the contract saying " +_					"that it should return null if the type of its object cannot be determined yet", ex)__			return null__		}_	};determine,the,type,for,the,given,factory,bean,param,factory,bean,the,factory,bean,instance,to,check,return,the,factory,bean,s,object,type,or,code,null,if,the,type,cannot,be,determined,yet;nullable,protected,class,get,type,for,factory,bean,final,factory,bean,factory,bean,try,if,system,get,security,manager,null,return,access,controller,do,privileged,privileged,action,class,factory,bean,get,object,type,get,access,control,context,else,return,factory,bean,get,object,type,catch,throwable,ex,logger,warn,factory,bean,threw,exception,from,get,object,type,despite,the,contract,saying,that,it,should,return,null,if,the,type,of,its,object,cannot,be,determined,yet,ex,return,null
FactoryBeanRegistrySupport -> @Nullable 	protected Class<?> getTypeForFactoryBean(final FactoryBean<?> factoryBean);1518260986;Determine the type for the given FactoryBean._@param factoryBean the FactoryBean instance to check_@return the FactoryBean's object type,_or {@code null} if the type cannot be determined yet;@Nullable_	protected Class<?> getTypeForFactoryBean(final FactoryBean<?> factoryBean) {_		try {_			if (System.getSecurityManager() != null) {_				return AccessController.doPrivileged((PrivilegedAction<Class<?>>)_						factoryBean::getObjectType, getAccessControlContext())__			}_			else {_				return factoryBean.getObjectType()__			}_		}_		catch (Throwable ex) {_			_			logger.warn("FactoryBean threw exception from getObjectType, despite the contract saying " +_					"that it should return null if the type of its object cannot be determined yet", ex)__			return null__		}_	};determine,the,type,for,the,given,factory,bean,param,factory,bean,the,factory,bean,instance,to,check,return,the,factory,bean,s,object,type,or,code,null,if,the,type,cannot,be,determined,yet;nullable,protected,class,get,type,for,factory,bean,final,factory,bean,factory,bean,try,if,system,get,security,manager,null,return,access,controller,do,privileged,privileged,action,class,factory,bean,get,object,type,get,access,control,context,else,return,factory,bean,get,object,type,catch,throwable,ex,logger,warn,factory,bean,threw,exception,from,get,object,type,despite,the,contract,saying,that,it,should,return,null,if,the,type,of,its,object,cannot,be,determined,yet,ex,return,null
FactoryBeanRegistrySupport -> @Nullable 	protected Class<?> getTypeForFactoryBean(final FactoryBean<?> factoryBean);1521822873;Determine the type for the given FactoryBean._@param factoryBean the FactoryBean instance to check_@return the FactoryBean's object type,_or {@code null} if the type cannot be determined yet;@Nullable_	protected Class<?> getTypeForFactoryBean(final FactoryBean<?> factoryBean) {_		try {_			if (System.getSecurityManager() != null) {_				return AccessController.doPrivileged((PrivilegedAction<Class<?>>)_						factoryBean::getObjectType, getAccessControlContext())__			}_			else {_				return factoryBean.getObjectType()__			}_		}_		catch (Throwable ex) {_			_			logger.warn("FactoryBean threw exception from getObjectType, despite the contract saying " +_					"that it should return null if the type of its object cannot be determined yet", ex)__			return null__		}_	};determine,the,type,for,the,given,factory,bean,param,factory,bean,the,factory,bean,instance,to,check,return,the,factory,bean,s,object,type,or,code,null,if,the,type,cannot,be,determined,yet;nullable,protected,class,get,type,for,factory,bean,final,factory,bean,factory,bean,try,if,system,get,security,manager,null,return,access,controller,do,privileged,privileged,action,class,factory,bean,get,object,type,get,access,control,context,else,return,factory,bean,get,object,type,catch,throwable,ex,logger,warn,factory,bean,threw,exception,from,get,object,type,despite,the,contract,saying,that,it,should,return,null,if,the,type,of,its,object,cannot,be,determined,yet,ex,return,null
FactoryBeanRegistrySupport -> @Nullable 	protected Class<?> getTypeForFactoryBean(final FactoryBean<?> factoryBean);1522103043;Determine the type for the given FactoryBean._@param factoryBean the FactoryBean instance to check_@return the FactoryBean's object type,_or {@code null} if the type cannot be determined yet;@Nullable_	protected Class<?> getTypeForFactoryBean(final FactoryBean<?> factoryBean) {_		try {_			if (System.getSecurityManager() != null) {_				return AccessController.doPrivileged((PrivilegedAction<Class<?>>)_						factoryBean::getObjectType, getAccessControlContext())__			}_			else {_				return factoryBean.getObjectType()__			}_		}_		catch (Throwable ex) {_			_			logger.warn("FactoryBean threw exception from getObjectType, despite the contract saying " +_					"that it should return null if the type of its object cannot be determined yet", ex)__			return null__		}_	};determine,the,type,for,the,given,factory,bean,param,factory,bean,the,factory,bean,instance,to,check,return,the,factory,bean,s,object,type,or,code,null,if,the,type,cannot,be,determined,yet;nullable,protected,class,get,type,for,factory,bean,final,factory,bean,factory,bean,try,if,system,get,security,manager,null,return,access,controller,do,privileged,privileged,action,class,factory,bean,get,object,type,get,access,control,context,else,return,factory,bean,get,object,type,catch,throwable,ex,logger,warn,factory,bean,threw,exception,from,get,object,type,despite,the,contract,saying,that,it,should,return,null,if,the,type,of,its,object,cannot,be,determined,yet,ex,return,null
FactoryBeanRegistrySupport -> @Nullable 	protected Class<?> getTypeForFactoryBean(final FactoryBean<?> factoryBean);1525267300;Determine the type for the given FactoryBean._@param factoryBean the FactoryBean instance to check_@return the FactoryBean's object type,_or {@code null} if the type cannot be determined yet;@Nullable_	protected Class<?> getTypeForFactoryBean(final FactoryBean<?> factoryBean) {_		try {_			if (System.getSecurityManager() != null) {_				return AccessController.doPrivileged((PrivilegedAction<Class<?>>)_						factoryBean::getObjectType, getAccessControlContext())__			}_			else {_				return factoryBean.getObjectType()__			}_		}_		catch (Throwable ex) {_			_			logger.warn("FactoryBean threw exception from getObjectType, despite the contract saying " +_					"that it should return null if the type of its object cannot be determined yet", ex)__			return null__		}_	};determine,the,type,for,the,given,factory,bean,param,factory,bean,the,factory,bean,instance,to,check,return,the,factory,bean,s,object,type,or,code,null,if,the,type,cannot,be,determined,yet;nullable,protected,class,get,type,for,factory,bean,final,factory,bean,factory,bean,try,if,system,get,security,manager,null,return,access,controller,do,privileged,privileged,action,class,factory,bean,get,object,type,get,access,control,context,else,return,factory,bean,get,object,type,catch,throwable,ex,logger,warn,factory,bean,threw,exception,from,get,object,type,despite,the,contract,saying,that,it,should,return,null,if,the,type,of,its,object,cannot,be,determined,yet,ex,return,null
FactoryBeanRegistrySupport -> @Nullable 	protected Class<?> getTypeForFactoryBean(final FactoryBean<?> factoryBean);1530174524;Determine the type for the given FactoryBean._@param factoryBean the FactoryBean instance to check_@return the FactoryBean's object type,_or {@code null} if the type cannot be determined yet;@Nullable_	protected Class<?> getTypeForFactoryBean(final FactoryBean<?> factoryBean) {_		try {_			if (System.getSecurityManager() != null) {_				return AccessController.doPrivileged((PrivilegedAction<Class<?>>)_						factoryBean::getObjectType, getAccessControlContext())__			}_			else {_				return factoryBean.getObjectType()__			}_		}_		catch (Throwable ex) {_			_			logger.warn("FactoryBean threw exception from getObjectType, despite the contract saying " +_					"that it should return null if the type of its object cannot be determined yet", ex)__			return null__		}_	};determine,the,type,for,the,given,factory,bean,param,factory,bean,the,factory,bean,instance,to,check,return,the,factory,bean,s,object,type,or,code,null,if,the,type,cannot,be,determined,yet;nullable,protected,class,get,type,for,factory,bean,final,factory,bean,factory,bean,try,if,system,get,security,manager,null,return,access,controller,do,privileged,privileged,action,class,factory,bean,get,object,type,get,access,control,context,else,return,factory,bean,get,object,type,catch,throwable,ex,logger,warn,factory,bean,threw,exception,from,get,object,type,despite,the,contract,saying,that,it,should,return,null,if,the,type,of,its,object,cannot,be,determined,yet,ex,return,null
FactoryBeanRegistrySupport -> @Nullable 	protected Class<?> getTypeForFactoryBean(final FactoryBean<?> factoryBean);1532091916;Determine the type for the given FactoryBean._@param factoryBean the FactoryBean instance to check_@return the FactoryBean's object type,_or {@code null} if the type cannot be determined yet;@Nullable_	protected Class<?> getTypeForFactoryBean(final FactoryBean<?> factoryBean) {_		try {_			if (System.getSecurityManager() != null) {_				return AccessController.doPrivileged((PrivilegedAction<Class<?>>)_						factoryBean::getObjectType, getAccessControlContext())__			}_			else {_				return factoryBean.getObjectType()__			}_		}_		catch (Throwable ex) {_			_			logger.info("FactoryBean threw exception from getObjectType, despite the contract saying " +_					"that it should return null if the type of its object cannot be determined yet", ex)__			return null__		}_	};determine,the,type,for,the,given,factory,bean,param,factory,bean,the,factory,bean,instance,to,check,return,the,factory,bean,s,object,type,or,code,null,if,the,type,cannot,be,determined,yet;nullable,protected,class,get,type,for,factory,bean,final,factory,bean,factory,bean,try,if,system,get,security,manager,null,return,access,controller,do,privileged,privileged,action,class,factory,bean,get,object,type,get,access,control,context,else,return,factory,bean,get,object,type,catch,throwable,ex,logger,info,factory,bean,threw,exception,from,get,object,type,despite,the,contract,saying,that,it,should,return,null,if,the,type,of,its,object,cannot,be,determined,yet,ex,return,null
FactoryBeanRegistrySupport -> protected AccessControlContext getAccessControlContext();1328020251;Returns the security context for this bean factory. If a security manager_is set, interaction with the user code will be executed using the privileged_of the security context returned by this method._@see AccessController#getContext();protected AccessControlContext getAccessControlContext() {_		return AccessController.getContext()__	};returns,the,security,context,for,this,bean,factory,if,a,security,manager,is,set,interaction,with,the,user,code,will,be,executed,using,the,privileged,of,the,security,context,returned,by,this,method,see,access,controller,get,context;protected,access,control,context,get,access,control,context,return,access,controller,get,context
FactoryBeanRegistrySupport -> protected AccessControlContext getAccessControlContext();1355352386;Returns the security context for this bean factory. If a security manager_is set, interaction with the user code will be executed using the privileged_of the security context returned by this method._@see AccessController#getContext();protected AccessControlContext getAccessControlContext() {_		return AccessController.getContext()__	};returns,the,security,context,for,this,bean,factory,if,a,security,manager,is,set,interaction,with,the,user,code,will,be,executed,using,the,privileged,of,the,security,context,returned,by,this,method,see,access,controller,get,context;protected,access,control,context,get,access,control,context,return,access,controller,get,context
FactoryBeanRegistrySupport -> protected AccessControlContext getAccessControlContext();1356735495;Returns the security context for this bean factory. If a security manager_is set, interaction with the user code will be executed using the privileged_of the security context returned by this method._@see AccessController#getContext();protected AccessControlContext getAccessControlContext() {_		return AccessController.getContext()__	};returns,the,security,context,for,this,bean,factory,if,a,security,manager,is,set,interaction,with,the,user,code,will,be,executed,using,the,privileged,of,the,security,context,returned,by,this,method,see,access,controller,get,context;protected,access,control,context,get,access,control,context,return,access,controller,get,context
FactoryBeanRegistrySupport -> protected AccessControlContext getAccessControlContext();1357119239;Returns the security context for this bean factory. If a security manager_is set, interaction with the user code will be executed using the privileged_of the security context returned by this method._@see AccessController#getContext();protected AccessControlContext getAccessControlContext() {_		return AccessController.getContext()__	};returns,the,security,context,for,this,bean,factory,if,a,security,manager,is,set,interaction,with,the,user,code,will,be,executed,using,the,privileged,of,the,security,context,returned,by,this,method,see,access,controller,get,context;protected,access,control,context,get,access,control,context,return,access,controller,get,context
FactoryBeanRegistrySupport -> protected AccessControlContext getAccessControlContext();1368482696;Returns the security context for this bean factory. If a security manager_is set, interaction with the user code will be executed using the privileged_of the security context returned by this method._@see AccessController#getContext();protected AccessControlContext getAccessControlContext() {_		return AccessController.getContext()__	};returns,the,security,context,for,this,bean,factory,if,a,security,manager,is,set,interaction,with,the,user,code,will,be,executed,using,the,privileged,of,the,security,context,returned,by,this,method,see,access,controller,get,context;protected,access,control,context,get,access,control,context,return,access,controller,get,context
FactoryBeanRegistrySupport -> protected AccessControlContext getAccessControlContext();1385412762;Returns the security context for this bean factory. If a security manager_is set, interaction with the user code will be executed using the privileged_of the security context returned by this method._@see AccessController#getContext();protected AccessControlContext getAccessControlContext() {_		return AccessController.getContext()__	};returns,the,security,context,for,this,bean,factory,if,a,security,manager,is,set,interaction,with,the,user,code,will,be,executed,using,the,privileged,of,the,security,context,returned,by,this,method,see,access,controller,get,context;protected,access,control,context,get,access,control,context,return,access,controller,get,context
FactoryBeanRegistrySupport -> protected AccessControlContext getAccessControlContext();1386678412;Returns the security context for this bean factory. If a security manager_is set, interaction with the user code will be executed using the privileged_of the security context returned by this method._@see AccessController#getContext();protected AccessControlContext getAccessControlContext() {_		return AccessController.getContext()__	};returns,the,security,context,for,this,bean,factory,if,a,security,manager,is,set,interaction,with,the,user,code,will,be,executed,using,the,privileged,of,the,security,context,returned,by,this,method,see,access,controller,get,context;protected,access,control,context,get,access,control,context,return,access,controller,get,context
FactoryBeanRegistrySupport -> protected AccessControlContext getAccessControlContext();1404251417;Returns the security context for this bean factory. If a security manager_is set, interaction with the user code will be executed using the privileged_of the security context returned by this method._@see AccessController#getContext();protected AccessControlContext getAccessControlContext() {_		return AccessController.getContext()__	};returns,the,security,context,for,this,bean,factory,if,a,security,manager,is,set,interaction,with,the,user,code,will,be,executed,using,the,privileged,of,the,security,context,returned,by,this,method,see,access,controller,get,context;protected,access,control,context,get,access,control,context,return,access,controller,get,context
FactoryBeanRegistrySupport -> protected AccessControlContext getAccessControlContext();1467730834;Returns the security context for this bean factory. If a security manager_is set, interaction with the user code will be executed using the privileged_of the security context returned by this method._@see AccessController#getContext();protected AccessControlContext getAccessControlContext() {_		return AccessController.getContext()__	};returns,the,security,context,for,this,bean,factory,if,a,security,manager,is,set,interaction,with,the,user,code,will,be,executed,using,the,privileged,of,the,security,context,returned,by,this,method,see,access,controller,get,context;protected,access,control,context,get,access,control,context,return,access,controller,get,context
FactoryBeanRegistrySupport -> protected AccessControlContext getAccessControlContext();1495868221;Returns the security context for this bean factory. If a security manager_is set, interaction with the user code will be executed using the privileged_of the security context returned by this method._@see AccessController#getContext();protected AccessControlContext getAccessControlContext() {_		return AccessController.getContext()__	};returns,the,security,context,for,this,bean,factory,if,a,security,manager,is,set,interaction,with,the,user,code,will,be,executed,using,the,privileged,of,the,security,context,returned,by,this,method,see,access,controller,get,context;protected,access,control,context,get,access,control,context,return,access,controller,get,context
FactoryBeanRegistrySupport -> protected AccessControlContext getAccessControlContext();1496837955;Returns the security context for this bean factory. If a security manager_is set, interaction with the user code will be executed using the privileged_of the security context returned by this method._@see AccessController#getContext();protected AccessControlContext getAccessControlContext() {_		return AccessController.getContext()__	};returns,the,security,context,for,this,bean,factory,if,a,security,manager,is,set,interaction,with,the,user,code,will,be,executed,using,the,privileged,of,the,security,context,returned,by,this,method,see,access,controller,get,context;protected,access,control,context,get,access,control,context,return,access,controller,get,context
FactoryBeanRegistrySupport -> protected AccessControlContext getAccessControlContext();1498849035;Return the security context for this bean factory. If a security manager_is set, interaction with the user code will be executed using the privileged_of the security context returned by this method._@see AccessController#getContext();protected AccessControlContext getAccessControlContext() {_		return AccessController.getContext()__	};return,the,security,context,for,this,bean,factory,if,a,security,manager,is,set,interaction,with,the,user,code,will,be,executed,using,the,privileged,of,the,security,context,returned,by,this,method,see,access,controller,get,context;protected,access,control,context,get,access,control,context,return,access,controller,get,context
FactoryBeanRegistrySupport -> protected AccessControlContext getAccessControlContext();1503007895;Return the security context for this bean factory. If a security manager_is set, interaction with the user code will be executed using the privileged_of the security context returned by this method._@see AccessController#getContext();protected AccessControlContext getAccessControlContext() {_		return AccessController.getContext()__	};return,the,security,context,for,this,bean,factory,if,a,security,manager,is,set,interaction,with,the,user,code,will,be,executed,using,the,privileged,of,the,security,context,returned,by,this,method,see,access,controller,get,context;protected,access,control,context,get,access,control,context,return,access,controller,get,context
FactoryBeanRegistrySupport -> protected AccessControlContext getAccessControlContext();1518260986;Return the security context for this bean factory. If a security manager_is set, interaction with the user code will be executed using the privileged_of the security context returned by this method._@see AccessController#getContext();protected AccessControlContext getAccessControlContext() {_		return AccessController.getContext()__	};return,the,security,context,for,this,bean,factory,if,a,security,manager,is,set,interaction,with,the,user,code,will,be,executed,using,the,privileged,of,the,security,context,returned,by,this,method,see,access,controller,get,context;protected,access,control,context,get,access,control,context,return,access,controller,get,context
FactoryBeanRegistrySupport -> protected AccessControlContext getAccessControlContext();1521822873;Return the security context for this bean factory. If a security manager_is set, interaction with the user code will be executed using the privileged_of the security context returned by this method._@see AccessController#getContext();protected AccessControlContext getAccessControlContext() {_		return AccessController.getContext()__	};return,the,security,context,for,this,bean,factory,if,a,security,manager,is,set,interaction,with,the,user,code,will,be,executed,using,the,privileged,of,the,security,context,returned,by,this,method,see,access,controller,get,context;protected,access,control,context,get,access,control,context,return,access,controller,get,context
FactoryBeanRegistrySupport -> protected AccessControlContext getAccessControlContext();1522103043;Return the security context for this bean factory. If a security manager_is set, interaction with the user code will be executed using the privileged_of the security context returned by this method._@see AccessController#getContext();protected AccessControlContext getAccessControlContext() {_		return AccessController.getContext()__	};return,the,security,context,for,this,bean,factory,if,a,security,manager,is,set,interaction,with,the,user,code,will,be,executed,using,the,privileged,of,the,security,context,returned,by,this,method,see,access,controller,get,context;protected,access,control,context,get,access,control,context,return,access,controller,get,context
FactoryBeanRegistrySupport -> protected AccessControlContext getAccessControlContext();1525267300;Return the security context for this bean factory. If a security manager_is set, interaction with the user code will be executed using the privileged_of the security context returned by this method._@see AccessController#getContext();protected AccessControlContext getAccessControlContext() {_		return AccessController.getContext()__	};return,the,security,context,for,this,bean,factory,if,a,security,manager,is,set,interaction,with,the,user,code,will,be,executed,using,the,privileged,of,the,security,context,returned,by,this,method,see,access,controller,get,context;protected,access,control,context,get,access,control,context,return,access,controller,get,context
FactoryBeanRegistrySupport -> protected AccessControlContext getAccessControlContext();1530174524;Return the security context for this bean factory. If a security manager_is set, interaction with the user code will be executed using the privileged_of the security context returned by this method._@see AccessController#getContext();protected AccessControlContext getAccessControlContext() {_		return AccessController.getContext()__	};return,the,security,context,for,this,bean,factory,if,a,security,manager,is,set,interaction,with,the,user,code,will,be,executed,using,the,privileged,of,the,security,context,returned,by,this,method,see,access,controller,get,context;protected,access,control,context,get,access,control,context,return,access,controller,get,context
FactoryBeanRegistrySupport -> protected AccessControlContext getAccessControlContext();1532091916;Return the security context for this bean factory. If a security manager_is set, interaction with the user code will be executed using the privileged_of the security context returned by this method._@see AccessController#getContext();protected AccessControlContext getAccessControlContext() {_		return AccessController.getContext()__	};return,the,security,context,for,this,bean,factory,if,a,security,manager,is,set,interaction,with,the,user,code,will,be,executed,using,the,privileged,of,the,security,context,returned,by,this,method,see,access,controller,get,context;protected,access,control,context,get,access,control,context,return,access,controller,get,context
