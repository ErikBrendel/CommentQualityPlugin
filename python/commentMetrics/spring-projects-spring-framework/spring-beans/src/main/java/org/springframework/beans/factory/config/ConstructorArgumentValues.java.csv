# id;timestamp;commentText;codeText;commentWords;codeWords
ConstructorArgumentValues -> public void addIndexedArgumentValue(int index, Object value);1328020251;Add an argument value for the given index in the constructor argument list._@param index the index in the constructor argument list_@param value the argument value;public void addIndexedArgumentValue(int index, Object value) {_		addIndexedArgumentValue(index, new ValueHolder(value))__	};add,an,argument,value,for,the,given,index,in,the,constructor,argument,list,param,index,the,index,in,the,constructor,argument,list,param,value,the,argument,value;public,void,add,indexed,argument,value,int,index,object,value,add,indexed,argument,value,index,new,value,holder,value
ConstructorArgumentValues -> public void addIndexedArgumentValue(int index, Object value);1356735495;Add an argument value for the given index in the constructor argument list._@param index the index in the constructor argument list_@param value the argument value;public void addIndexedArgumentValue(int index, Object value) {_		addIndexedArgumentValue(index, new ValueHolder(value))__	};add,an,argument,value,for,the,given,index,in,the,constructor,argument,list,param,index,the,index,in,the,constructor,argument,list,param,value,the,argument,value;public,void,add,indexed,argument,value,int,index,object,value,add,indexed,argument,value,index,new,value,holder,value
ConstructorArgumentValues -> public void addIndexedArgumentValue(int index, Object value);1357119239;Add an argument value for the given index in the constructor argument list._@param index the index in the constructor argument list_@param value the argument value;public void addIndexedArgumentValue(int index, Object value) {_		addIndexedArgumentValue(index, new ValueHolder(value))__	};add,an,argument,value,for,the,given,index,in,the,constructor,argument,list,param,index,the,index,in,the,constructor,argument,list,param,value,the,argument,value;public,void,add,indexed,argument,value,int,index,object,value,add,indexed,argument,value,index,new,value,holder,value
ConstructorArgumentValues -> public void addIndexedArgumentValue(int index, Object value);1368482696;Add an argument value for the given index in the constructor argument list._@param index the index in the constructor argument list_@param value the argument value;public void addIndexedArgumentValue(int index, Object value) {_		addIndexedArgumentValue(index, new ValueHolder(value))__	};add,an,argument,value,for,the,given,index,in,the,constructor,argument,list,param,index,the,index,in,the,constructor,argument,list,param,value,the,argument,value;public,void,add,indexed,argument,value,int,index,object,value,add,indexed,argument,value,index,new,value,holder,value
ConstructorArgumentValues -> public void addIndexedArgumentValue(int index, Object value);1382789137;Add an argument value for the given index in the constructor argument list._@param index the index in the constructor argument list_@param value the argument value;public void addIndexedArgumentValue(int index, Object value) {_		addIndexedArgumentValue(index, new ValueHolder(value))__	};add,an,argument,value,for,the,given,index,in,the,constructor,argument,list,param,index,the,index,in,the,constructor,argument,list,param,value,the,argument,value;public,void,add,indexed,argument,value,int,index,object,value,add,indexed,argument,value,index,new,value,holder,value
ConstructorArgumentValues -> public void addIndexedArgumentValue(int index, Object value);1458323493;Add an argument value for the given index in the constructor argument list._@param index the index in the constructor argument list_@param value the argument value;public void addIndexedArgumentValue(int index, Object value) {_		addIndexedArgumentValue(index, new ValueHolder(value))__	};add,an,argument,value,for,the,given,index,in,the,constructor,argument,list,param,index,the,index,in,the,constructor,argument,list,param,value,the,argument,value;public,void,add,indexed,argument,value,int,index,object,value,add,indexed,argument,value,index,new,value,holder,value
ConstructorArgumentValues -> public void addIndexedArgumentValue(int index, Object value);1467730834;Add an argument value for the given index in the constructor argument list._@param index the index in the constructor argument list_@param value the argument value;public void addIndexedArgumentValue(int index, Object value) {_		addIndexedArgumentValue(index, new ValueHolder(value))__	};add,an,argument,value,for,the,given,index,in,the,constructor,argument,list,param,index,the,index,in,the,constructor,argument,list,param,value,the,argument,value;public,void,add,indexed,argument,value,int,index,object,value,add,indexed,argument,value,index,new,value,holder,value
ConstructorArgumentValues -> public void addIndexedArgumentValue(int index, Object value);1495868221;Add an argument value for the given index in the constructor argument list._@param index the index in the constructor argument list_@param value the argument value;public void addIndexedArgumentValue(int index, Object value) {_		addIndexedArgumentValue(index, new ValueHolder(value))__	};add,an,argument,value,for,the,given,index,in,the,constructor,argument,list,param,index,the,index,in,the,constructor,argument,list,param,value,the,argument,value;public,void,add,indexed,argument,value,int,index,object,value,add,indexed,argument,value,index,new,value,holder,value
ConstructorArgumentValues -> public void addIndexedArgumentValue(int index, Object value);1496259743;Add an argument value for the given index in the constructor argument list._@param index the index in the constructor argument list_@param value the argument value;public void addIndexedArgumentValue(int index, Object value) {_		addIndexedArgumentValue(index, new ValueHolder(value))__	};add,an,argument,value,for,the,given,index,in,the,constructor,argument,list,param,index,the,index,in,the,constructor,argument,list,param,value,the,argument,value;public,void,add,indexed,argument,value,int,index,object,value,add,indexed,argument,value,index,new,value,holder,value
ConstructorArgumentValues -> ValueHolder -> public synchronized Object getConvertedValue();1328020251;Return the converted value of the constructor argument,_after processed type conversion.;public synchronized Object getConvertedValue() {_			return this.convertedValue__		};return,the,converted,value,of,the,constructor,argument,after,processed,type,conversion;public,synchronized,object,get,converted,value,return,this,converted,value
ConstructorArgumentValues -> ValueHolder -> public synchronized Object getConvertedValue();1356735495;Return the converted value of the constructor argument,_after processed type conversion.;public synchronized Object getConvertedValue() {_			return this.convertedValue__		};return,the,converted,value,of,the,constructor,argument,after,processed,type,conversion;public,synchronized,object,get,converted,value,return,this,converted,value
ConstructorArgumentValues -> ValueHolder -> public synchronized Object getConvertedValue();1357119239;Return the converted value of the constructor argument,_after processed type conversion.;public synchronized Object getConvertedValue() {_			return this.convertedValue__		};return,the,converted,value,of,the,constructor,argument,after,processed,type,conversion;public,synchronized,object,get,converted,value,return,this,converted,value
ConstructorArgumentValues -> ValueHolder -> public synchronized Object getConvertedValue();1368482696;Return the converted value of the constructor argument,_after processed type conversion.;public synchronized Object getConvertedValue() {_			return this.convertedValue__		};return,the,converted,value,of,the,constructor,argument,after,processed,type,conversion;public,synchronized,object,get,converted,value,return,this,converted,value
ConstructorArgumentValues -> ValueHolder -> public synchronized Object getConvertedValue();1382789137;Return the converted value of the constructor argument,_after processed type conversion.;public synchronized Object getConvertedValue() {_			return this.convertedValue__		};return,the,converted,value,of,the,constructor,argument,after,processed,type,conversion;public,synchronized,object,get,converted,value,return,this,converted,value
ConstructorArgumentValues -> ValueHolder -> public synchronized Object getConvertedValue();1458323493;Return the converted value of the constructor argument,_after processed type conversion.;public synchronized Object getConvertedValue() {_			return this.convertedValue__		};return,the,converted,value,of,the,constructor,argument,after,processed,type,conversion;public,synchronized,object,get,converted,value,return,this,converted,value
ConstructorArgumentValues -> ValueHolder -> public synchronized Object getConvertedValue();1467730834;Return the converted value of the constructor argument,_after processed type conversion.;public synchronized Object getConvertedValue() {_			return this.convertedValue__		};return,the,converted,value,of,the,constructor,argument,after,processed,type,conversion;public,synchronized,object,get,converted,value,return,this,converted,value
ConstructorArgumentValues -> ValueHolder -> public synchronized Object getConvertedValue();1495868221;Return the converted value of the constructor argument,_after processed type conversion.;public synchronized Object getConvertedValue() {_			return this.convertedValue__		};return,the,converted,value,of,the,constructor,argument,after,processed,type,conversion;public,synchronized,object,get,converted,value,return,this,converted,value
ConstructorArgumentValues -> ValueHolder -> public synchronized Object getConvertedValue();1496259743;Return the converted value of the constructor argument,_after processed type conversion.;public synchronized Object getConvertedValue() {_			return this.convertedValue__		};return,the,converted,value,of,the,constructor,argument,after,processed,type,conversion;public,synchronized,object,get,converted,value,return,this,converted,value
ConstructorArgumentValues -> ValueHolder -> public synchronized Object getConvertedValue();1496837955;Return the converted value of the constructor argument,_after processed type conversion.;public synchronized Object getConvertedValue() {_			return this.convertedValue__		};return,the,converted,value,of,the,constructor,argument,after,processed,type,conversion;public,synchronized,object,get,converted,value,return,this,converted,value
ConstructorArgumentValues -> ValueHolder -> public synchronized Object getConvertedValue();1497250713;Return the converted value of the constructor argument,_after processed type conversion.;public synchronized Object getConvertedValue() {_			return this.convertedValue__		};return,the,converted,value,of,the,constructor,argument,after,processed,type,conversion;public,synchronized,object,get,converted,value,return,this,converted,value
ConstructorArgumentValues -> ValueHolder -> public ValueHolder(@Nullable Object value, @Nullable String type, @Nullable String name);1496837955;Create a new ValueHolder for the given value, type and name._@param value the argument value_@param type the type of the constructor argument_@param name the name of the constructor argument;public ValueHolder(@Nullable Object value, @Nullable String type, @Nullable String name) {_			this.value = value__			this.type = type__			this.name = name__		};create,a,new,value,holder,for,the,given,value,type,and,name,param,value,the,argument,value,param,type,the,type,of,the,constructor,argument,param,name,the,name,of,the,constructor,argument;public,value,holder,nullable,object,value,nullable,string,type,nullable,string,name,this,value,value,this,type,type,this,name,name
ConstructorArgumentValues -> ValueHolder -> public ValueHolder(@Nullable Object value, @Nullable String type, @Nullable String name);1497250713;Create a new ValueHolder for the given value, type and name._@param value the argument value_@param type the type of the constructor argument_@param name the name of the constructor argument;public ValueHolder(@Nullable Object value, @Nullable String type, @Nullable String name) {_			this.value = value__			this.type = type__			this.name = name__		};create,a,new,value,holder,for,the,given,value,type,and,name,param,value,the,argument,value,param,type,the,type,of,the,constructor,argument,param,name,the,name,of,the,constructor,argument;public,value,holder,nullable,object,value,nullable,string,type,nullable,string,name,this,value,value,this,type,type,this,name,name
ConstructorArgumentValues -> ValueHolder -> public ValueHolder(@Nullable Object value, @Nullable String type, @Nullable String name);1498780456;Create a new ValueHolder for the given value, type and name._@param value the argument value_@param type the type of the constructor argument_@param name the name of the constructor argument;public ValueHolder(@Nullable Object value, @Nullable String type, @Nullable String name) {_			this.value = value__			this.type = type__			this.name = name__		};create,a,new,value,holder,for,the,given,value,type,and,name,param,value,the,argument,value,param,type,the,type,of,the,constructor,argument,param,name,the,name,of,the,constructor,argument;public,value,holder,nullable,object,value,nullable,string,type,nullable,string,name,this,value,value,this,type,type,this,name,name
ConstructorArgumentValues -> ValueHolder -> public ValueHolder(@Nullable Object value, @Nullable String type, @Nullable String name);1500448076;Create a new ValueHolder for the given value, type and name._@param value the argument value_@param type the type of the constructor argument_@param name the name of the constructor argument;public ValueHolder(@Nullable Object value, @Nullable String type, @Nullable String name) {_			this.value = value__			this.type = type__			this.name = name__		};create,a,new,value,holder,for,the,given,value,type,and,name,param,value,the,argument,value,param,type,the,type,of,the,constructor,argument,param,name,the,name,of,the,constructor,argument;public,value,holder,nullable,object,value,nullable,string,type,nullable,string,name,this,value,value,this,type,type,this,name,name
ConstructorArgumentValues -> ValueHolder -> public ValueHolder(@Nullable Object value, @Nullable String type, @Nullable String name);1531945062;Create a new ValueHolder for the given value, type and name._@param value the argument value_@param type the type of the constructor argument_@param name the name of the constructor argument;public ValueHolder(@Nullable Object value, @Nullable String type, @Nullable String name) {_			this.value = value__			this.type = type__			this.name = name__		};create,a,new,value,holder,for,the,given,value,type,and,name,param,value,the,argument,value,param,type,the,type,of,the,constructor,argument,param,name,the,name,of,the,constructor,argument;public,value,holder,nullable,object,value,nullable,string,type,nullable,string,name,this,value,value,this,type,type,this,name,name
ConstructorArgumentValues -> ValueHolder -> public ValueHolder(@Nullable Object value, @Nullable String type, @Nullable String name);1532981251;Create a new ValueHolder for the given value, type and name._@param value the argument value_@param type the type of the constructor argument_@param name the name of the constructor argument;public ValueHolder(@Nullable Object value, @Nullable String type, @Nullable String name) {_			this.value = value__			this.type = type__			this.name = name__		};create,a,new,value,holder,for,the,given,value,type,and,name,param,value,the,argument,value,param,type,the,type,of,the,constructor,argument,param,name,the,name,of,the,constructor,argument;public,value,holder,nullable,object,value,nullable,string,type,nullable,string,name,this,value,value,this,type,type,this,name,name
ConstructorArgumentValues -> ValueHolder -> public ValueHolder(@Nullable Object value, @Nullable String type, @Nullable String name);1549554785;Create a new ValueHolder for the given value, type and name._@param value the argument value_@param type the type of the constructor argument_@param name the name of the constructor argument;public ValueHolder(@Nullable Object value, @Nullable String type, @Nullable String name) {_			this.value = value__			this.type = type__			this.name = name__		};create,a,new,value,holder,for,the,given,value,type,and,name,param,value,the,argument,value,param,type,the,type,of,the,constructor,argument,param,name,the,name,of,the,constructor,argument;public,value,holder,nullable,object,value,nullable,string,type,nullable,string,name,this,value,value,this,type,type,this,name,name
ConstructorArgumentValues -> ValueHolder -> public void setType(String type);1328020251;Set the type of the constructor argument.;public void setType(String type) {_			this.type = type__		};set,the,type,of,the,constructor,argument;public,void,set,type,string,type,this,type,type
ConstructorArgumentValues -> ValueHolder -> public void setType(String type);1356735495;Set the type of the constructor argument.;public void setType(String type) {_			this.type = type__		};set,the,type,of,the,constructor,argument;public,void,set,type,string,type,this,type,type
ConstructorArgumentValues -> ValueHolder -> public void setType(String type);1357119239;Set the type of the constructor argument.;public void setType(String type) {_			this.type = type__		};set,the,type,of,the,constructor,argument;public,void,set,type,string,type,this,type,type
ConstructorArgumentValues -> ValueHolder -> public void setType(String type);1368482696;Set the type of the constructor argument.;public void setType(String type) {_			this.type = type__		};set,the,type,of,the,constructor,argument;public,void,set,type,string,type,this,type,type
ConstructorArgumentValues -> ValueHolder -> public void setType(String type);1382789137;Set the type of the constructor argument.;public void setType(String type) {_			this.type = type__		};set,the,type,of,the,constructor,argument;public,void,set,type,string,type,this,type,type
ConstructorArgumentValues -> ValueHolder -> public void setType(String type);1458323493;Set the type of the constructor argument.;public void setType(String type) {_			this.type = type__		};set,the,type,of,the,constructor,argument;public,void,set,type,string,type,this,type,type
ConstructorArgumentValues -> ValueHolder -> public void setType(String type);1467730834;Set the type of the constructor argument.;public void setType(String type) {_			this.type = type__		};set,the,type,of,the,constructor,argument;public,void,set,type,string,type,this,type,type
ConstructorArgumentValues -> ValueHolder -> public void setType(String type);1495868221;Set the type of the constructor argument.;public void setType(String type) {_			this.type = type__		};set,the,type,of,the,constructor,argument;public,void,set,type,string,type,this,type,type
ConstructorArgumentValues -> ValueHolder -> public void setType(String type);1496259743;Set the type of the constructor argument.;public void setType(String type) {_			this.type = type__		};set,the,type,of,the,constructor,argument;public,void,set,type,string,type,this,type,type
ConstructorArgumentValues -> ValueHolder -> public void setValue(Object value);1328020251;Set the value for the constructor argument._@see PropertyPlaceholderConfigurer;public void setValue(Object value) {_			this.value = value__		};set,the,value,for,the,constructor,argument,see,property,placeholder,configurer;public,void,set,value,object,value,this,value,value
ConstructorArgumentValues -> ValueHolder -> public void setValue(Object value);1356735495;Set the value for the constructor argument._@see PropertyPlaceholderConfigurer;public void setValue(Object value) {_			this.value = value__		};set,the,value,for,the,constructor,argument,see,property,placeholder,configurer;public,void,set,value,object,value,this,value,value
ConstructorArgumentValues -> ValueHolder -> public void setValue(Object value);1357119239;Set the value for the constructor argument._@see PropertyPlaceholderConfigurer;public void setValue(Object value) {_			this.value = value__		};set,the,value,for,the,constructor,argument,see,property,placeholder,configurer;public,void,set,value,object,value,this,value,value
ConstructorArgumentValues -> ValueHolder -> public void setValue(Object value);1368482696;Set the value for the constructor argument._@see PropertyPlaceholderConfigurer;public void setValue(Object value) {_			this.value = value__		};set,the,value,for,the,constructor,argument,see,property,placeholder,configurer;public,void,set,value,object,value,this,value,value
ConstructorArgumentValues -> ValueHolder -> public void setValue(Object value);1382789137;Set the value for the constructor argument._@see PropertyPlaceholderConfigurer;public void setValue(Object value) {_			this.value = value__		};set,the,value,for,the,constructor,argument,see,property,placeholder,configurer;public,void,set,value,object,value,this,value,value
ConstructorArgumentValues -> ValueHolder -> public void setValue(Object value);1458323493;Set the value for the constructor argument._@see PropertyPlaceholderConfigurer;public void setValue(Object value) {_			this.value = value__		};set,the,value,for,the,constructor,argument,see,property,placeholder,configurer;public,void,set,value,object,value,this,value,value
ConstructorArgumentValues -> ValueHolder -> public void setValue(Object value);1467730834;Set the value for the constructor argument._@see PropertyPlaceholderConfigurer;public void setValue(Object value) {_			this.value = value__		};set,the,value,for,the,constructor,argument,see,property,placeholder,configurer;public,void,set,value,object,value,this,value,value
ConstructorArgumentValues -> ValueHolder -> public void setValue(Object value);1495868221;Set the value for the constructor argument._@see PropertyPlaceholderConfigurer;public void setValue(Object value) {_			this.value = value__		};set,the,value,for,the,constructor,argument,see,property,placeholder,configurer;public,void,set,value,object,value,this,value,value
ConstructorArgumentValues -> ValueHolder -> public void setValue(Object value);1496259743;Set the value for the constructor argument._@see PropertyPlaceholderConfigurer;public void setValue(Object value) {_			this.value = value__		};set,the,value,for,the,constructor,argument,see,property,placeholder,configurer;public,void,set,value,object,value,this,value,value
ConstructorArgumentValues -> public void addIndexedArgumentValue(int index, Object value, String type);1328020251;Add an argument value for the given index in the constructor argument list._@param index the index in the constructor argument list_@param value the argument value_@param type the type of the constructor argument;public void addIndexedArgumentValue(int index, Object value, String type) {_		addIndexedArgumentValue(index, new ValueHolder(value, type))__	};add,an,argument,value,for,the,given,index,in,the,constructor,argument,list,param,index,the,index,in,the,constructor,argument,list,param,value,the,argument,value,param,type,the,type,of,the,constructor,argument;public,void,add,indexed,argument,value,int,index,object,value,string,type,add,indexed,argument,value,index,new,value,holder,value,type
ConstructorArgumentValues -> public void addIndexedArgumentValue(int index, Object value, String type);1356735495;Add an argument value for the given index in the constructor argument list._@param index the index in the constructor argument list_@param value the argument value_@param type the type of the constructor argument;public void addIndexedArgumentValue(int index, Object value, String type) {_		addIndexedArgumentValue(index, new ValueHolder(value, type))__	};add,an,argument,value,for,the,given,index,in,the,constructor,argument,list,param,index,the,index,in,the,constructor,argument,list,param,value,the,argument,value,param,type,the,type,of,the,constructor,argument;public,void,add,indexed,argument,value,int,index,object,value,string,type,add,indexed,argument,value,index,new,value,holder,value,type
ConstructorArgumentValues -> public void addIndexedArgumentValue(int index, Object value, String type);1357119239;Add an argument value for the given index in the constructor argument list._@param index the index in the constructor argument list_@param value the argument value_@param type the type of the constructor argument;public void addIndexedArgumentValue(int index, Object value, String type) {_		addIndexedArgumentValue(index, new ValueHolder(value, type))__	};add,an,argument,value,for,the,given,index,in,the,constructor,argument,list,param,index,the,index,in,the,constructor,argument,list,param,value,the,argument,value,param,type,the,type,of,the,constructor,argument;public,void,add,indexed,argument,value,int,index,object,value,string,type,add,indexed,argument,value,index,new,value,holder,value,type
ConstructorArgumentValues -> public void addIndexedArgumentValue(int index, Object value, String type);1368482696;Add an argument value for the given index in the constructor argument list._@param index the index in the constructor argument list_@param value the argument value_@param type the type of the constructor argument;public void addIndexedArgumentValue(int index, Object value, String type) {_		addIndexedArgumentValue(index, new ValueHolder(value, type))__	};add,an,argument,value,for,the,given,index,in,the,constructor,argument,list,param,index,the,index,in,the,constructor,argument,list,param,value,the,argument,value,param,type,the,type,of,the,constructor,argument;public,void,add,indexed,argument,value,int,index,object,value,string,type,add,indexed,argument,value,index,new,value,holder,value,type
ConstructorArgumentValues -> public void addIndexedArgumentValue(int index, Object value, String type);1382789137;Add an argument value for the given index in the constructor argument list._@param index the index in the constructor argument list_@param value the argument value_@param type the type of the constructor argument;public void addIndexedArgumentValue(int index, Object value, String type) {_		addIndexedArgumentValue(index, new ValueHolder(value, type))__	};add,an,argument,value,for,the,given,index,in,the,constructor,argument,list,param,index,the,index,in,the,constructor,argument,list,param,value,the,argument,value,param,type,the,type,of,the,constructor,argument;public,void,add,indexed,argument,value,int,index,object,value,string,type,add,indexed,argument,value,index,new,value,holder,value,type
ConstructorArgumentValues -> public void addIndexedArgumentValue(int index, Object value, String type);1458323493;Add an argument value for the given index in the constructor argument list._@param index the index in the constructor argument list_@param value the argument value_@param type the type of the constructor argument;public void addIndexedArgumentValue(int index, Object value, String type) {_		addIndexedArgumentValue(index, new ValueHolder(value, type))__	};add,an,argument,value,for,the,given,index,in,the,constructor,argument,list,param,index,the,index,in,the,constructor,argument,list,param,value,the,argument,value,param,type,the,type,of,the,constructor,argument;public,void,add,indexed,argument,value,int,index,object,value,string,type,add,indexed,argument,value,index,new,value,holder,value,type
ConstructorArgumentValues -> public void addIndexedArgumentValue(int index, Object value, String type);1467730834;Add an argument value for the given index in the constructor argument list._@param index the index in the constructor argument list_@param value the argument value_@param type the type of the constructor argument;public void addIndexedArgumentValue(int index, Object value, String type) {_		addIndexedArgumentValue(index, new ValueHolder(value, type))__	};add,an,argument,value,for,the,given,index,in,the,constructor,argument,list,param,index,the,index,in,the,constructor,argument,list,param,value,the,argument,value,param,type,the,type,of,the,constructor,argument;public,void,add,indexed,argument,value,int,index,object,value,string,type,add,indexed,argument,value,index,new,value,holder,value,type
ConstructorArgumentValues -> public void addIndexedArgumentValue(int index, Object value, String type);1495868221;Add an argument value for the given index in the constructor argument list._@param index the index in the constructor argument list_@param value the argument value_@param type the type of the constructor argument;public void addIndexedArgumentValue(int index, Object value, String type) {_		addIndexedArgumentValue(index, new ValueHolder(value, type))__	};add,an,argument,value,for,the,given,index,in,the,constructor,argument,list,param,index,the,index,in,the,constructor,argument,list,param,value,the,argument,value,param,type,the,type,of,the,constructor,argument;public,void,add,indexed,argument,value,int,index,object,value,string,type,add,indexed,argument,value,index,new,value,holder,value,type
ConstructorArgumentValues -> public void addIndexedArgumentValue(int index, Object value, String type);1496259743;Add an argument value for the given index in the constructor argument list._@param index the index in the constructor argument list_@param value the argument value_@param type the type of the constructor argument;public void addIndexedArgumentValue(int index, Object value, String type) {_		addIndexedArgumentValue(index, new ValueHolder(value, type))__	};add,an,argument,value,for,the,given,index,in,the,constructor,argument,list,param,index,the,index,in,the,constructor,argument,list,param,value,the,argument,value,param,type,the,type,of,the,constructor,argument;public,void,add,indexed,argument,value,int,index,object,value,string,type,add,indexed,argument,value,index,new,value,holder,value,type
ConstructorArgumentValues -> ValueHolder -> public void setType(@Nullable String type);1496837955;Set the type of the constructor argument.;public void setType(@Nullable String type) {_			this.type = type__		};set,the,type,of,the,constructor,argument;public,void,set,type,nullable,string,type,this,type,type
ConstructorArgumentValues -> ValueHolder -> public void setType(@Nullable String type);1497250713;Set the type of the constructor argument.;public void setType(@Nullable String type) {_			this.type = type__		};set,the,type,of,the,constructor,argument;public,void,set,type,nullable,string,type,this,type,type
ConstructorArgumentValues -> ValueHolder -> public void setType(@Nullable String type);1498780456;Set the type of the constructor argument.;public void setType(@Nullable String type) {_			this.type = type__		};set,the,type,of,the,constructor,argument;public,void,set,type,nullable,string,type,this,type,type
ConstructorArgumentValues -> ValueHolder -> public void setType(@Nullable String type);1500448076;Set the type of the constructor argument.;public void setType(@Nullable String type) {_			this.type = type__		};set,the,type,of,the,constructor,argument;public,void,set,type,nullable,string,type,this,type,type
ConstructorArgumentValues -> ValueHolder -> public void setType(@Nullable String type);1531945062;Set the type of the constructor argument.;public void setType(@Nullable String type) {_			this.type = type__		};set,the,type,of,the,constructor,argument;public,void,set,type,nullable,string,type,this,type,type
ConstructorArgumentValues -> ValueHolder -> public void setType(@Nullable String type);1532981251;Set the type of the constructor argument.;public void setType(@Nullable String type) {_			this.type = type__		};set,the,type,of,the,constructor,argument;public,void,set,type,nullable,string,type,this,type,type
ConstructorArgumentValues -> ValueHolder -> public void setType(@Nullable String type);1549554785;Set the type of the constructor argument.;public void setType(@Nullable String type) {_			this.type = type__		};set,the,type,of,the,constructor,argument;public,void,set,type,nullable,string,type,this,type,type
ConstructorArgumentValues -> public ValueHolder getArgumentValue(int index, Class requiredType, String requiredName);1328020251;Look for an argument value that either corresponds to the given index_in the constructor argument list or generically matches by type._@param index the index in the constructor argument list_@param requiredType the type to match_@param requiredName the name to match_@return the ValueHolder for the argument, or <code>null</code> if none set;public ValueHolder getArgumentValue(int index, Class requiredType, String requiredName) {_		return getArgumentValue(index, requiredType, requiredName, null)__	};look,for,an,argument,value,that,either,corresponds,to,the,given,index,in,the,constructor,argument,list,or,generically,matches,by,type,param,index,the,index,in,the,constructor,argument,list,param,required,type,the,type,to,match,param,required,name,the,name,to,match,return,the,value,holder,for,the,argument,or,code,null,code,if,none,set;public,value,holder,get,argument,value,int,index,class,required,type,string,required,name,return,get,argument,value,index,required,type,required,name,null
ConstructorArgumentValues -> public ValueHolder getArgumentValue(int index, Class requiredType, String requiredName);1356735495;Look for an argument value that either corresponds to the given index_in the constructor argument list or generically matches by type._@param index the index in the constructor argument list_@param requiredType the type to match_@param requiredName the name to match_@return the ValueHolder for the argument, or {@code null} if none set;public ValueHolder getArgumentValue(int index, Class requiredType, String requiredName) {_		return getArgumentValue(index, requiredType, requiredName, null)__	};look,for,an,argument,value,that,either,corresponds,to,the,given,index,in,the,constructor,argument,list,or,generically,matches,by,type,param,index,the,index,in,the,constructor,argument,list,param,required,type,the,type,to,match,param,required,name,the,name,to,match,return,the,value,holder,for,the,argument,or,code,null,if,none,set;public,value,holder,get,argument,value,int,index,class,required,type,string,required,name,return,get,argument,value,index,required,type,required,name,null
ConstructorArgumentValues -> public ValueHolder getArgumentValue(int index, Class requiredType, String requiredName);1357119239;Look for an argument value that either corresponds to the given index_in the constructor argument list or generically matches by type._@param index the index in the constructor argument list_@param requiredType the type to match_@param requiredName the name to match_@return the ValueHolder for the argument, or {@code null} if none set;public ValueHolder getArgumentValue(int index, Class requiredType, String requiredName) {_		return getArgumentValue(index, requiredType, requiredName, null)__	};look,for,an,argument,value,that,either,corresponds,to,the,given,index,in,the,constructor,argument,list,or,generically,matches,by,type,param,index,the,index,in,the,constructor,argument,list,param,required,type,the,type,to,match,param,required,name,the,name,to,match,return,the,value,holder,for,the,argument,or,code,null,if,none,set;public,value,holder,get,argument,value,int,index,class,required,type,string,required,name,return,get,argument,value,index,required,type,required,name,null
ConstructorArgumentValues -> public ValueHolder getArgumentValue(int index, Class requiredType, String requiredName);1368482696;Look for an argument value that either corresponds to the given index_in the constructor argument list or generically matches by type._@param index the index in the constructor argument list_@param requiredType the type to match_@param requiredName the name to match_@return the ValueHolder for the argument, or {@code null} if none set;public ValueHolder getArgumentValue(int index, Class requiredType, String requiredName) {_		return getArgumentValue(index, requiredType, requiredName, null)__	};look,for,an,argument,value,that,either,corresponds,to,the,given,index,in,the,constructor,argument,list,or,generically,matches,by,type,param,index,the,index,in,the,constructor,argument,list,param,required,type,the,type,to,match,param,required,name,the,name,to,match,return,the,value,holder,for,the,argument,or,code,null,if,none,set;public,value,holder,get,argument,value,int,index,class,required,type,string,required,name,return,get,argument,value,index,required,type,required,name,null
ConstructorArgumentValues -> ValueHolder -> public void setSource(Object source);1328020251;Set the configuration source <code>Object</code> for this metadata element._<p>The exact type of the object will depend on the configuration mechanism used.;public void setSource(Object source) {_			this.source = source__		};set,the,configuration,source,code,object,code,for,this,metadata,element,p,the,exact,type,of,the,object,will,depend,on,the,configuration,mechanism,used;public,void,set,source,object,source,this,source,source
ConstructorArgumentValues -> ValueHolder -> public void setSource(Object source);1356735495;Set the configuration source {@code Object} for this metadata element._<p>The exact type of the object will depend on the configuration mechanism used.;public void setSource(Object source) {_			this.source = source__		};set,the,configuration,source,code,object,for,this,metadata,element,p,the,exact,type,of,the,object,will,depend,on,the,configuration,mechanism,used;public,void,set,source,object,source,this,source,source
ConstructorArgumentValues -> ValueHolder -> public void setSource(Object source);1357119239;Set the configuration source {@code Object} for this metadata element._<p>The exact type of the object will depend on the configuration mechanism used.;public void setSource(Object source) {_			this.source = source__		};set,the,configuration,source,code,object,for,this,metadata,element,p,the,exact,type,of,the,object,will,depend,on,the,configuration,mechanism,used;public,void,set,source,object,source,this,source,source
ConstructorArgumentValues -> ValueHolder -> public void setSource(Object source);1368482696;Set the configuration source {@code Object} for this metadata element._<p>The exact type of the object will depend on the configuration mechanism used.;public void setSource(Object source) {_			this.source = source__		};set,the,configuration,source,code,object,for,this,metadata,element,p,the,exact,type,of,the,object,will,depend,on,the,configuration,mechanism,used;public,void,set,source,object,source,this,source,source
ConstructorArgumentValues -> ValueHolder -> public void setSource(Object source);1382789137;Set the configuration source {@code Object} for this metadata element._<p>The exact type of the object will depend on the configuration mechanism used.;public void setSource(Object source) {_			this.source = source__		};set,the,configuration,source,code,object,for,this,metadata,element,p,the,exact,type,of,the,object,will,depend,on,the,configuration,mechanism,used;public,void,set,source,object,source,this,source,source
ConstructorArgumentValues -> ValueHolder -> public void setSource(Object source);1458323493;Set the configuration source {@code Object} for this metadata element._<p>The exact type of the object will depend on the configuration mechanism used.;public void setSource(Object source) {_			this.source = source__		};set,the,configuration,source,code,object,for,this,metadata,element,p,the,exact,type,of,the,object,will,depend,on,the,configuration,mechanism,used;public,void,set,source,object,source,this,source,source
ConstructorArgumentValues -> ValueHolder -> public void setSource(Object source);1467730834;Set the configuration source {@code Object} for this metadata element._<p>The exact type of the object will depend on the configuration mechanism used.;public void setSource(Object source) {_			this.source = source__		};set,the,configuration,source,code,object,for,this,metadata,element,p,the,exact,type,of,the,object,will,depend,on,the,configuration,mechanism,used;public,void,set,source,object,source,this,source,source
ConstructorArgumentValues -> ValueHolder -> public void setSource(Object source);1495868221;Set the configuration source {@code Object} for this metadata element._<p>The exact type of the object will depend on the configuration mechanism used.;public void setSource(Object source) {_			this.source = source__		};set,the,configuration,source,code,object,for,this,metadata,element,p,the,exact,type,of,the,object,will,depend,on,the,configuration,mechanism,used;public,void,set,source,object,source,this,source,source
ConstructorArgumentValues -> ValueHolder -> public void setSource(Object source);1496259743;Set the configuration source {@code Object} for this metadata element._<p>The exact type of the object will depend on the configuration mechanism used.;public void setSource(Object source) {_			this.source = source__		};set,the,configuration,source,code,object,for,this,metadata,element,p,the,exact,type,of,the,object,will,depend,on,the,configuration,mechanism,used;public,void,set,source,object,source,this,source,source
ConstructorArgumentValues -> @Nullable 	public ValueHolder getArgumentValue(int index, Class<?> requiredType, String requiredName);1495868221;Look for an argument value that either corresponds to the given index_in the constructor argument list or generically matches by type._@param index the index in the constructor argument list_@param requiredType the parameter type to match_@param requiredName the parameter name to match_@return the ValueHolder for the argument, or {@code null} if none set;@Nullable_	public ValueHolder getArgumentValue(int index, Class<?> requiredType, String requiredName) {_		return getArgumentValue(index, requiredType, requiredName, null)__	};look,for,an,argument,value,that,either,corresponds,to,the,given,index,in,the,constructor,argument,list,or,generically,matches,by,type,param,index,the,index,in,the,constructor,argument,list,param,required,type,the,parameter,type,to,match,param,required,name,the,parameter,name,to,match,return,the,value,holder,for,the,argument,or,code,null,if,none,set;nullable,public,value,holder,get,argument,value,int,index,class,required,type,string,required,name,return,get,argument,value,index,required,type,required,name,null
ConstructorArgumentValues -> @Nullable 	public ValueHolder getArgumentValue(int index, Class<?> requiredType, String requiredName);1496259743;Look for an argument value that either corresponds to the given index_in the constructor argument list or generically matches by type._@param index the index in the constructor argument list_@param requiredType the parameter type to match_@param requiredName the parameter name to match_@return the ValueHolder for the argument, or {@code null} if none set;@Nullable_	public ValueHolder getArgumentValue(int index, Class<?> requiredType, String requiredName) {_		return getArgumentValue(index, requiredType, requiredName, null)__	};look,for,an,argument,value,that,either,corresponds,to,the,given,index,in,the,constructor,argument,list,or,generically,matches,by,type,param,index,the,index,in,the,constructor,argument,list,param,required,type,the,parameter,type,to,match,param,required,name,the,parameter,name,to,match,return,the,value,holder,for,the,argument,or,code,null,if,none,set;nullable,public,value,holder,get,argument,value,int,index,class,required,type,string,required,name,return,get,argument,value,index,required,type,required,name,null
ConstructorArgumentValues -> @Nullable 	public ValueHolder getArgumentValue(int index, Class<?> requiredType, String requiredName);1496837955;Look for an argument value that either corresponds to the given index_in the constructor argument list or generically matches by type._@param index the index in the constructor argument list_@param requiredType the parameter type to match_@param requiredName the parameter name to match_@return the ValueHolder for the argument, or {@code null} if none set;@Nullable_	public ValueHolder getArgumentValue(int index, Class<?> requiredType, String requiredName) {_		return getArgumentValue(index, requiredType, requiredName, null)__	};look,for,an,argument,value,that,either,corresponds,to,the,given,index,in,the,constructor,argument,list,or,generically,matches,by,type,param,index,the,index,in,the,constructor,argument,list,param,required,type,the,parameter,type,to,match,param,required,name,the,parameter,name,to,match,return,the,value,holder,for,the,argument,or,code,null,if,none,set;nullable,public,value,holder,get,argument,value,int,index,class,required,type,string,required,name,return,get,argument,value,index,required,type,required,name,null
ConstructorArgumentValues -> @Nullable 	public ValueHolder getArgumentValue(int index, Class<?> requiredType, String requiredName);1497250713;Look for an argument value that either corresponds to the given index_in the constructor argument list or generically matches by type._@param index the index in the constructor argument list_@param requiredType the parameter type to match_@param requiredName the parameter name to match_@return the ValueHolder for the argument, or {@code null} if none set;@Nullable_	public ValueHolder getArgumentValue(int index, Class<?> requiredType, String requiredName) {_		return getArgumentValue(index, requiredType, requiredName, null)__	};look,for,an,argument,value,that,either,corresponds,to,the,given,index,in,the,constructor,argument,list,or,generically,matches,by,type,param,index,the,index,in,the,constructor,argument,list,param,required,type,the,parameter,type,to,match,param,required,name,the,parameter,name,to,match,return,the,value,holder,for,the,argument,or,code,null,if,none,set;nullable,public,value,holder,get,argument,value,int,index,class,required,type,string,required,name,return,get,argument,value,index,required,type,required,name,null
ConstructorArgumentValues -> @Nullable 	public ValueHolder getArgumentValue(int index, Class<?> requiredType, String requiredName);1498780456;Look for an argument value that either corresponds to the given index_in the constructor argument list or generically matches by type._@param index the index in the constructor argument list_@param requiredType the parameter type to match_@param requiredName the parameter name to match_@return the ValueHolder for the argument, or {@code null} if none set;@Nullable_	public ValueHolder getArgumentValue(int index, Class<?> requiredType, String requiredName) {_		return getArgumentValue(index, requiredType, requiredName, null)__	};look,for,an,argument,value,that,either,corresponds,to,the,given,index,in,the,constructor,argument,list,or,generically,matches,by,type,param,index,the,index,in,the,constructor,argument,list,param,required,type,the,parameter,type,to,match,param,required,name,the,parameter,name,to,match,return,the,value,holder,for,the,argument,or,code,null,if,none,set;nullable,public,value,holder,get,argument,value,int,index,class,required,type,string,required,name,return,get,argument,value,index,required,type,required,name,null
ConstructorArgumentValues -> @Nullable 	public ValueHolder getArgumentValue(int index, Class<?> requiredType, String requiredName);1500448076;Look for an argument value that either corresponds to the given index_in the constructor argument list or generically matches by type._@param index the index in the constructor argument list_@param requiredType the parameter type to match_@param requiredName the parameter name to match_@return the ValueHolder for the argument, or {@code null} if none set;@Nullable_	public ValueHolder getArgumentValue(int index, Class<?> requiredType, String requiredName) {_		return getArgumentValue(index, requiredType, requiredName, null)__	};look,for,an,argument,value,that,either,corresponds,to,the,given,index,in,the,constructor,argument,list,or,generically,matches,by,type,param,index,the,index,in,the,constructor,argument,list,param,required,type,the,parameter,type,to,match,param,required,name,the,parameter,name,to,match,return,the,value,holder,for,the,argument,or,code,null,if,none,set;nullable,public,value,holder,get,argument,value,int,index,class,required,type,string,required,name,return,get,argument,value,index,required,type,required,name,null
ConstructorArgumentValues -> @Nullable 	public ValueHolder getArgumentValue(int index, Class<?> requiredType, String requiredName);1531945062;Look for an argument value that either corresponds to the given index_in the constructor argument list or generically matches by type._@param index the index in the constructor argument list_@param requiredType the parameter type to match_@param requiredName the parameter name to match_@return the ValueHolder for the argument, or {@code null} if none set;@Nullable_	public ValueHolder getArgumentValue(int index, Class<?> requiredType, String requiredName) {_		return getArgumentValue(index, requiredType, requiredName, null)__	};look,for,an,argument,value,that,either,corresponds,to,the,given,index,in,the,constructor,argument,list,or,generically,matches,by,type,param,index,the,index,in,the,constructor,argument,list,param,required,type,the,parameter,type,to,match,param,required,name,the,parameter,name,to,match,return,the,value,holder,for,the,argument,or,code,null,if,none,set;nullable,public,value,holder,get,argument,value,int,index,class,required,type,string,required,name,return,get,argument,value,index,required,type,required,name,null
ConstructorArgumentValues -> @Nullable 	public ValueHolder getArgumentValue(int index, Class<?> requiredType, String requiredName);1532981251;Look for an argument value that either corresponds to the given index_in the constructor argument list or generically matches by type._@param index the index in the constructor argument list_@param requiredType the parameter type to match_@param requiredName the parameter name to match_@return the ValueHolder for the argument, or {@code null} if none set;@Nullable_	public ValueHolder getArgumentValue(int index, Class<?> requiredType, String requiredName) {_		return getArgumentValue(index, requiredType, requiredName, null)__	};look,for,an,argument,value,that,either,corresponds,to,the,given,index,in,the,constructor,argument,list,or,generically,matches,by,type,param,index,the,index,in,the,constructor,argument,list,param,required,type,the,parameter,type,to,match,param,required,name,the,parameter,name,to,match,return,the,value,holder,for,the,argument,or,code,null,if,none,set;nullable,public,value,holder,get,argument,value,int,index,class,required,type,string,required,name,return,get,argument,value,index,required,type,required,name,null
ConstructorArgumentValues -> @Nullable 	public ValueHolder getArgumentValue(int index, Class<?> requiredType, String requiredName);1549554785;Look for an argument value that either corresponds to the given index_in the constructor argument list or generically matches by type._@param index the index in the constructor argument list_@param requiredType the parameter type to match_@param requiredName the parameter name to match_@return the ValueHolder for the argument, or {@code null} if none set;@Nullable_	public ValueHolder getArgumentValue(int index, Class<?> requiredType, String requiredName) {_		return getArgumentValue(index, requiredType, requiredName, null)__	};look,for,an,argument,value,that,either,corresponds,to,the,given,index,in,the,constructor,argument,list,or,generically,matches,by,type,param,index,the,index,in,the,constructor,argument,list,param,required,type,the,parameter,type,to,match,param,required,name,the,parameter,name,to,match,return,the,value,holder,for,the,argument,or,code,null,if,none,set;nullable,public,value,holder,get,argument,value,int,index,class,required,type,string,required,name,return,get,argument,value,index,required,type,required,name,null
ConstructorArgumentValues -> public boolean hasIndexedArgumentValue(int index);1328020251;Check whether an argument value has been registered for the given index._@param index the index in the constructor argument list;public boolean hasIndexedArgumentValue(int index) {_		return this.indexedArgumentValues.containsKey(index)__	};check,whether,an,argument,value,has,been,registered,for,the,given,index,param,index,the,index,in,the,constructor,argument,list;public,boolean,has,indexed,argument,value,int,index,return,this,indexed,argument,values,contains,key,index
ConstructorArgumentValues -> public boolean hasIndexedArgumentValue(int index);1356735495;Check whether an argument value has been registered for the given index._@param index the index in the constructor argument list;public boolean hasIndexedArgumentValue(int index) {_		return this.indexedArgumentValues.containsKey(index)__	};check,whether,an,argument,value,has,been,registered,for,the,given,index,param,index,the,index,in,the,constructor,argument,list;public,boolean,has,indexed,argument,value,int,index,return,this,indexed,argument,values,contains,key,index
ConstructorArgumentValues -> public boolean hasIndexedArgumentValue(int index);1357119239;Check whether an argument value has been registered for the given index._@param index the index in the constructor argument list;public boolean hasIndexedArgumentValue(int index) {_		return this.indexedArgumentValues.containsKey(index)__	};check,whether,an,argument,value,has,been,registered,for,the,given,index,param,index,the,index,in,the,constructor,argument,list;public,boolean,has,indexed,argument,value,int,index,return,this,indexed,argument,values,contains,key,index
ConstructorArgumentValues -> public boolean hasIndexedArgumentValue(int index);1368482696;Check whether an argument value has been registered for the given index._@param index the index in the constructor argument list;public boolean hasIndexedArgumentValue(int index) {_		return this.indexedArgumentValues.containsKey(index)__	};check,whether,an,argument,value,has,been,registered,for,the,given,index,param,index,the,index,in,the,constructor,argument,list;public,boolean,has,indexed,argument,value,int,index,return,this,indexed,argument,values,contains,key,index
ConstructorArgumentValues -> public boolean hasIndexedArgumentValue(int index);1382789137;Check whether an argument value has been registered for the given index._@param index the index in the constructor argument list;public boolean hasIndexedArgumentValue(int index) {_		return this.indexedArgumentValues.containsKey(index)__	};check,whether,an,argument,value,has,been,registered,for,the,given,index,param,index,the,index,in,the,constructor,argument,list;public,boolean,has,indexed,argument,value,int,index,return,this,indexed,argument,values,contains,key,index
ConstructorArgumentValues -> public boolean hasIndexedArgumentValue(int index);1458323493;Check whether an argument value has been registered for the given index._@param index the index in the constructor argument list;public boolean hasIndexedArgumentValue(int index) {_		return this.indexedArgumentValues.containsKey(index)__	};check,whether,an,argument,value,has,been,registered,for,the,given,index,param,index,the,index,in,the,constructor,argument,list;public,boolean,has,indexed,argument,value,int,index,return,this,indexed,argument,values,contains,key,index
ConstructorArgumentValues -> public boolean hasIndexedArgumentValue(int index);1467730834;Check whether an argument value has been registered for the given index._@param index the index in the constructor argument list;public boolean hasIndexedArgumentValue(int index) {_		return this.indexedArgumentValues.containsKey(index)__	};check,whether,an,argument,value,has,been,registered,for,the,given,index,param,index,the,index,in,the,constructor,argument,list;public,boolean,has,indexed,argument,value,int,index,return,this,indexed,argument,values,contains,key,index
ConstructorArgumentValues -> public boolean hasIndexedArgumentValue(int index);1495868221;Check whether an argument value has been registered for the given index._@param index the index in the constructor argument list;public boolean hasIndexedArgumentValue(int index) {_		return this.indexedArgumentValues.containsKey(index)__	};check,whether,an,argument,value,has,been,registered,for,the,given,index,param,index,the,index,in,the,constructor,argument,list;public,boolean,has,indexed,argument,value,int,index,return,this,indexed,argument,values,contains,key,index
ConstructorArgumentValues -> public boolean hasIndexedArgumentValue(int index);1496259743;Check whether an argument value has been registered for the given index._@param index the index in the constructor argument list;public boolean hasIndexedArgumentValue(int index) {_		return this.indexedArgumentValues.containsKey(index)__	};check,whether,an,argument,value,has,been,registered,for,the,given,index,param,index,the,index,in,the,constructor,argument,list;public,boolean,has,indexed,argument,value,int,index,return,this,indexed,argument,values,contains,key,index
ConstructorArgumentValues -> public boolean hasIndexedArgumentValue(int index);1496837955;Check whether an argument value has been registered for the given index._@param index the index in the constructor argument list;public boolean hasIndexedArgumentValue(int index) {_		return this.indexedArgumentValues.containsKey(index)__	};check,whether,an,argument,value,has,been,registered,for,the,given,index,param,index,the,index,in,the,constructor,argument,list;public,boolean,has,indexed,argument,value,int,index,return,this,indexed,argument,values,contains,key,index
ConstructorArgumentValues -> public boolean hasIndexedArgumentValue(int index);1497250713;Check whether an argument value has been registered for the given index._@param index the index in the constructor argument list;public boolean hasIndexedArgumentValue(int index) {_		return this.indexedArgumentValues.containsKey(index)__	};check,whether,an,argument,value,has,been,registered,for,the,given,index,param,index,the,index,in,the,constructor,argument,list;public,boolean,has,indexed,argument,value,int,index,return,this,indexed,argument,values,contains,key,index
ConstructorArgumentValues -> public boolean hasIndexedArgumentValue(int index);1498780456;Check whether an argument value has been registered for the given index._@param index the index in the constructor argument list;public boolean hasIndexedArgumentValue(int index) {_		return this.indexedArgumentValues.containsKey(index)__	};check,whether,an,argument,value,has,been,registered,for,the,given,index,param,index,the,index,in,the,constructor,argument,list;public,boolean,has,indexed,argument,value,int,index,return,this,indexed,argument,values,contains,key,index
ConstructorArgumentValues -> public boolean hasIndexedArgumentValue(int index);1500448076;Check whether an argument value has been registered for the given index._@param index the index in the constructor argument list;public boolean hasIndexedArgumentValue(int index) {_		return this.indexedArgumentValues.containsKey(index)__	};check,whether,an,argument,value,has,been,registered,for,the,given,index,param,index,the,index,in,the,constructor,argument,list;public,boolean,has,indexed,argument,value,int,index,return,this,indexed,argument,values,contains,key,index
ConstructorArgumentValues -> public boolean hasIndexedArgumentValue(int index);1531945062;Check whether an argument value has been registered for the given index._@param index the index in the constructor argument list;public boolean hasIndexedArgumentValue(int index) {_		return this.indexedArgumentValues.containsKey(index)__	};check,whether,an,argument,value,has,been,registered,for,the,given,index,param,index,the,index,in,the,constructor,argument,list;public,boolean,has,indexed,argument,value,int,index,return,this,indexed,argument,values,contains,key,index
ConstructorArgumentValues -> public boolean hasIndexedArgumentValue(int index);1532981251;Check whether an argument value has been registered for the given index._@param index the index in the constructor argument list;public boolean hasIndexedArgumentValue(int index) {_		return this.indexedArgumentValues.containsKey(index)__	};check,whether,an,argument,value,has,been,registered,for,the,given,index,param,index,the,index,in,the,constructor,argument,list;public,boolean,has,indexed,argument,value,int,index,return,this,indexed,argument,values,contains,key,index
ConstructorArgumentValues -> public boolean hasIndexedArgumentValue(int index);1549554785;Check whether an argument value has been registered for the given index._@param index the index in the constructor argument list;public boolean hasIndexedArgumentValue(int index) {_		return this.indexedArgumentValues.containsKey(index)__	};check,whether,an,argument,value,has,been,registered,for,the,given,index,param,index,the,index,in,the,constructor,argument,list;public,boolean,has,indexed,argument,value,int,index,return,this,indexed,argument,values,contains,key,index
ConstructorArgumentValues -> public void addGenericArgumentValue(Object value);1328020251;Add a generic argument value to be matched by type._<p>Note: A single generic argument value will just be used once,_rather than matched multiple times._@param value the argument value;public void addGenericArgumentValue(Object value) {_		this.genericArgumentValues.add(new ValueHolder(value))__	};add,a,generic,argument,value,to,be,matched,by,type,p,note,a,single,generic,argument,value,will,just,be,used,once,rather,than,matched,multiple,times,param,value,the,argument,value;public,void,add,generic,argument,value,object,value,this,generic,argument,values,add,new,value,holder,value
ConstructorArgumentValues -> public void addGenericArgumentValue(Object value);1356735495;Add a generic argument value to be matched by type._<p>Note: A single generic argument value will just be used once,_rather than matched multiple times._@param value the argument value;public void addGenericArgumentValue(Object value) {_		this.genericArgumentValues.add(new ValueHolder(value))__	};add,a,generic,argument,value,to,be,matched,by,type,p,note,a,single,generic,argument,value,will,just,be,used,once,rather,than,matched,multiple,times,param,value,the,argument,value;public,void,add,generic,argument,value,object,value,this,generic,argument,values,add,new,value,holder,value
ConstructorArgumentValues -> public void addGenericArgumentValue(Object value);1357119239;Add a generic argument value to be matched by type._<p>Note: A single generic argument value will just be used once,_rather than matched multiple times._@param value the argument value;public void addGenericArgumentValue(Object value) {_		this.genericArgumentValues.add(new ValueHolder(value))__	};add,a,generic,argument,value,to,be,matched,by,type,p,note,a,single,generic,argument,value,will,just,be,used,once,rather,than,matched,multiple,times,param,value,the,argument,value;public,void,add,generic,argument,value,object,value,this,generic,argument,values,add,new,value,holder,value
ConstructorArgumentValues -> public void addGenericArgumentValue(Object value);1368482696;Add a generic argument value to be matched by type._<p>Note: A single generic argument value will just be used once,_rather than matched multiple times._@param value the argument value;public void addGenericArgumentValue(Object value) {_		this.genericArgumentValues.add(new ValueHolder(value))__	};add,a,generic,argument,value,to,be,matched,by,type,p,note,a,single,generic,argument,value,will,just,be,used,once,rather,than,matched,multiple,times,param,value,the,argument,value;public,void,add,generic,argument,value,object,value,this,generic,argument,values,add,new,value,holder,value
ConstructorArgumentValues -> public void addGenericArgumentValue(Object value);1382789137;Add a generic argument value to be matched by type._<p>Note: A single generic argument value will just be used once,_rather than matched multiple times._@param value the argument value;public void addGenericArgumentValue(Object value) {_		this.genericArgumentValues.add(new ValueHolder(value))__	};add,a,generic,argument,value,to,be,matched,by,type,p,note,a,single,generic,argument,value,will,just,be,used,once,rather,than,matched,multiple,times,param,value,the,argument,value;public,void,add,generic,argument,value,object,value,this,generic,argument,values,add,new,value,holder,value
ConstructorArgumentValues -> public void addGenericArgumentValue(Object value);1458323493;Add a generic argument value to be matched by type._<p>Note: A single generic argument value will just be used once,_rather than matched multiple times._@param value the argument value;public void addGenericArgumentValue(Object value) {_		this.genericArgumentValues.add(new ValueHolder(value))__	};add,a,generic,argument,value,to,be,matched,by,type,p,note,a,single,generic,argument,value,will,just,be,used,once,rather,than,matched,multiple,times,param,value,the,argument,value;public,void,add,generic,argument,value,object,value,this,generic,argument,values,add,new,value,holder,value
ConstructorArgumentValues -> public void addGenericArgumentValue(Object value);1467730834;Add a generic argument value to be matched by type._<p>Note: A single generic argument value will just be used once,_rather than matched multiple times._@param value the argument value;public void addGenericArgumentValue(Object value) {_		this.genericArgumentValues.add(new ValueHolder(value))__	};add,a,generic,argument,value,to,be,matched,by,type,p,note,a,single,generic,argument,value,will,just,be,used,once,rather,than,matched,multiple,times,param,value,the,argument,value;public,void,add,generic,argument,value,object,value,this,generic,argument,values,add,new,value,holder,value
ConstructorArgumentValues -> public void addGenericArgumentValue(Object value);1495868221;Add a generic argument value to be matched by type._<p>Note: A single generic argument value will just be used once,_rather than matched multiple times._@param value the argument value;public void addGenericArgumentValue(Object value) {_		this.genericArgumentValues.add(new ValueHolder(value))__	};add,a,generic,argument,value,to,be,matched,by,type,p,note,a,single,generic,argument,value,will,just,be,used,once,rather,than,matched,multiple,times,param,value,the,argument,value;public,void,add,generic,argument,value,object,value,this,generic,argument,values,add,new,value,holder,value
ConstructorArgumentValues -> public void addGenericArgumentValue(Object value);1496259743;Add a generic argument value to be matched by type._<p>Note: A single generic argument value will just be used once,_rather than matched multiple times._@param value the argument value;public void addGenericArgumentValue(Object value) {_		this.genericArgumentValues.add(new ValueHolder(value))__	};add,a,generic,argument,value,to,be,matched,by,type,p,note,a,single,generic,argument,value,will,just,be,used,once,rather,than,matched,multiple,times,param,value,the,argument,value;public,void,add,generic,argument,value,object,value,this,generic,argument,values,add,new,value,holder,value
ConstructorArgumentValues -> public void addGenericArgumentValue(Object value);1496837955;Add a generic argument value to be matched by type._<p>Note: A single generic argument value will just be used once,_rather than matched multiple times._@param value the argument value;public void addGenericArgumentValue(Object value) {_		this.genericArgumentValues.add(new ValueHolder(value))__	};add,a,generic,argument,value,to,be,matched,by,type,p,note,a,single,generic,argument,value,will,just,be,used,once,rather,than,matched,multiple,times,param,value,the,argument,value;public,void,add,generic,argument,value,object,value,this,generic,argument,values,add,new,value,holder,value
ConstructorArgumentValues -> public void addGenericArgumentValue(Object value);1497250713;Add a generic argument value to be matched by type._<p>Note: A single generic argument value will just be used once,_rather than matched multiple times._@param value the argument value;public void addGenericArgumentValue(Object value) {_		this.genericArgumentValues.add(new ValueHolder(value))__	};add,a,generic,argument,value,to,be,matched,by,type,p,note,a,single,generic,argument,value,will,just,be,used,once,rather,than,matched,multiple,times,param,value,the,argument,value;public,void,add,generic,argument,value,object,value,this,generic,argument,values,add,new,value,holder,value
ConstructorArgumentValues -> public void addGenericArgumentValue(Object value);1498780456;Add a generic argument value to be matched by type._<p>Note: A single generic argument value will just be used once,_rather than matched multiple times._@param value the argument value;public void addGenericArgumentValue(Object value) {_		this.genericArgumentValues.add(new ValueHolder(value))__	};add,a,generic,argument,value,to,be,matched,by,type,p,note,a,single,generic,argument,value,will,just,be,used,once,rather,than,matched,multiple,times,param,value,the,argument,value;public,void,add,generic,argument,value,object,value,this,generic,argument,values,add,new,value,holder,value
ConstructorArgumentValues -> public void addGenericArgumentValue(Object value);1500448076;Add a generic argument value to be matched by type._<p>Note: A single generic argument value will just be used once,_rather than matched multiple times._@param value the argument value;public void addGenericArgumentValue(Object value) {_		this.genericArgumentValues.add(new ValueHolder(value))__	};add,a,generic,argument,value,to,be,matched,by,type,p,note,a,single,generic,argument,value,will,just,be,used,once,rather,than,matched,multiple,times,param,value,the,argument,value;public,void,add,generic,argument,value,object,value,this,generic,argument,values,add,new,value,holder,value
ConstructorArgumentValues -> public void addGenericArgumentValue(Object value);1531945062;Add a generic argument value to be matched by type._<p>Note: A single generic argument value will just be used once,_rather than matched multiple times._@param value the argument value;public void addGenericArgumentValue(Object value) {_		this.genericArgumentValues.add(new ValueHolder(value))__	};add,a,generic,argument,value,to,be,matched,by,type,p,note,a,single,generic,argument,value,will,just,be,used,once,rather,than,matched,multiple,times,param,value,the,argument,value;public,void,add,generic,argument,value,object,value,this,generic,argument,values,add,new,value,holder,value
ConstructorArgumentValues -> public void addGenericArgumentValue(Object value);1532981251;Add a generic argument value to be matched by type._<p>Note: A single generic argument value will just be used once,_rather than matched multiple times._@param value the argument value;public void addGenericArgumentValue(Object value) {_		this.genericArgumentValues.add(new ValueHolder(value))__	};add,a,generic,argument,value,to,be,matched,by,type,p,note,a,single,generic,argument,value,will,just,be,used,once,rather,than,matched,multiple,times,param,value,the,argument,value;public,void,add,generic,argument,value,object,value,this,generic,argument,values,add,new,value,holder,value
ConstructorArgumentValues -> public void addGenericArgumentValue(Object value);1549554785;Add a generic argument value to be matched by type._<p>Note: A single generic argument value will just be used once,_rather than matched multiple times._@param value the argument value;public void addGenericArgumentValue(Object value) {_		this.genericArgumentValues.add(new ValueHolder(value))__	};add,a,generic,argument,value,to,be,matched,by,type,p,note,a,single,generic,argument,value,will,just,be,used,once,rather,than,matched,multiple,times,param,value,the,argument,value;public,void,add,generic,argument,value,object,value,this,generic,argument,values,add,new,value,holder,value
ConstructorArgumentValues -> private void addOrMergeIndexedArgumentValue(Integer key, ValueHolder newValue);1328020251;Add an argument value for the given index in the constructor argument list,_merging the new value (typically a collection) with the current value_if demanded: see {@link org.springframework.beans.Mergeable}._@param key the index in the constructor argument list_@param newValue the argument value in the form of a ValueHolder;private void addOrMergeIndexedArgumentValue(Integer key, ValueHolder newValue) {_		ValueHolder currentValue = this.indexedArgumentValues.get(key)__		if (currentValue != null && newValue.getValue() instanceof Mergeable) {_			Mergeable mergeable = (Mergeable) newValue.getValue()__			if (mergeable.isMergeEnabled()) {_				newValue.setValue(mergeable.merge(currentValue.getValue()))__			}_		}_		this.indexedArgumentValues.put(key, newValue)__	};add,an,argument,value,for,the,given,index,in,the,constructor,argument,list,merging,the,new,value,typically,a,collection,with,the,current,value,if,demanded,see,link,org,springframework,beans,mergeable,param,key,the,index,in,the,constructor,argument,list,param,new,value,the,argument,value,in,the,form,of,a,value,holder;private,void,add,or,merge,indexed,argument,value,integer,key,value,holder,new,value,value,holder,current,value,this,indexed,argument,values,get,key,if,current,value,null,new,value,get,value,instanceof,mergeable,mergeable,mergeable,mergeable,new,value,get,value,if,mergeable,is,merge,enabled,new,value,set,value,mergeable,merge,current,value,get,value,this,indexed,argument,values,put,key,new,value
ConstructorArgumentValues -> private void addOrMergeIndexedArgumentValue(Integer key, ValueHolder newValue);1356735495;Add an argument value for the given index in the constructor argument list,_merging the new value (typically a collection) with the current value_if demanded: see {@link org.springframework.beans.Mergeable}._@param key the index in the constructor argument list_@param newValue the argument value in the form of a ValueHolder;private void addOrMergeIndexedArgumentValue(Integer key, ValueHolder newValue) {_		ValueHolder currentValue = this.indexedArgumentValues.get(key)__		if (currentValue != null && newValue.getValue() instanceof Mergeable) {_			Mergeable mergeable = (Mergeable) newValue.getValue()__			if (mergeable.isMergeEnabled()) {_				newValue.setValue(mergeable.merge(currentValue.getValue()))__			}_		}_		this.indexedArgumentValues.put(key, newValue)__	};add,an,argument,value,for,the,given,index,in,the,constructor,argument,list,merging,the,new,value,typically,a,collection,with,the,current,value,if,demanded,see,link,org,springframework,beans,mergeable,param,key,the,index,in,the,constructor,argument,list,param,new,value,the,argument,value,in,the,form,of,a,value,holder;private,void,add,or,merge,indexed,argument,value,integer,key,value,holder,new,value,value,holder,current,value,this,indexed,argument,values,get,key,if,current,value,null,new,value,get,value,instanceof,mergeable,mergeable,mergeable,mergeable,new,value,get,value,if,mergeable,is,merge,enabled,new,value,set,value,mergeable,merge,current,value,get,value,this,indexed,argument,values,put,key,new,value
ConstructorArgumentValues -> private void addOrMergeIndexedArgumentValue(Integer key, ValueHolder newValue);1357119239;Add an argument value for the given index in the constructor argument list,_merging the new value (typically a collection) with the current value_if demanded: see {@link org.springframework.beans.Mergeable}._@param key the index in the constructor argument list_@param newValue the argument value in the form of a ValueHolder;private void addOrMergeIndexedArgumentValue(Integer key, ValueHolder newValue) {_		ValueHolder currentValue = this.indexedArgumentValues.get(key)__		if (currentValue != null && newValue.getValue() instanceof Mergeable) {_			Mergeable mergeable = (Mergeable) newValue.getValue()__			if (mergeable.isMergeEnabled()) {_				newValue.setValue(mergeable.merge(currentValue.getValue()))__			}_		}_		this.indexedArgumentValues.put(key, newValue)__	};add,an,argument,value,for,the,given,index,in,the,constructor,argument,list,merging,the,new,value,typically,a,collection,with,the,current,value,if,demanded,see,link,org,springframework,beans,mergeable,param,key,the,index,in,the,constructor,argument,list,param,new,value,the,argument,value,in,the,form,of,a,value,holder;private,void,add,or,merge,indexed,argument,value,integer,key,value,holder,new,value,value,holder,current,value,this,indexed,argument,values,get,key,if,current,value,null,new,value,get,value,instanceof,mergeable,mergeable,mergeable,mergeable,new,value,get,value,if,mergeable,is,merge,enabled,new,value,set,value,mergeable,merge,current,value,get,value,this,indexed,argument,values,put,key,new,value
ConstructorArgumentValues -> private void addOrMergeIndexedArgumentValue(Integer key, ValueHolder newValue);1368482696;Add an argument value for the given index in the constructor argument list,_merging the new value (typically a collection) with the current value_if demanded: see {@link org.springframework.beans.Mergeable}._@param key the index in the constructor argument list_@param newValue the argument value in the form of a ValueHolder;private void addOrMergeIndexedArgumentValue(Integer key, ValueHolder newValue) {_		ValueHolder currentValue = this.indexedArgumentValues.get(key)__		if (currentValue != null && newValue.getValue() instanceof Mergeable) {_			Mergeable mergeable = (Mergeable) newValue.getValue()__			if (mergeable.isMergeEnabled()) {_				newValue.setValue(mergeable.merge(currentValue.getValue()))__			}_		}_		this.indexedArgumentValues.put(key, newValue)__	};add,an,argument,value,for,the,given,index,in,the,constructor,argument,list,merging,the,new,value,typically,a,collection,with,the,current,value,if,demanded,see,link,org,springframework,beans,mergeable,param,key,the,index,in,the,constructor,argument,list,param,new,value,the,argument,value,in,the,form,of,a,value,holder;private,void,add,or,merge,indexed,argument,value,integer,key,value,holder,new,value,value,holder,current,value,this,indexed,argument,values,get,key,if,current,value,null,new,value,get,value,instanceof,mergeable,mergeable,mergeable,mergeable,new,value,get,value,if,mergeable,is,merge,enabled,new,value,set,value,mergeable,merge,current,value,get,value,this,indexed,argument,values,put,key,new,value
ConstructorArgumentValues -> private void addOrMergeIndexedArgumentValue(Integer key, ValueHolder newValue);1382789137;Add an argument value for the given index in the constructor argument list,_merging the new value (typically a collection) with the current value_if demanded: see {@link org.springframework.beans.Mergeable}._@param key the index in the constructor argument list_@param newValue the argument value in the form of a ValueHolder;private void addOrMergeIndexedArgumentValue(Integer key, ValueHolder newValue) {_		ValueHolder currentValue = this.indexedArgumentValues.get(key)__		if (currentValue != null && newValue.getValue() instanceof Mergeable) {_			Mergeable mergeable = (Mergeable) newValue.getValue()__			if (mergeable.isMergeEnabled()) {_				newValue.setValue(mergeable.merge(currentValue.getValue()))__			}_		}_		this.indexedArgumentValues.put(key, newValue)__	};add,an,argument,value,for,the,given,index,in,the,constructor,argument,list,merging,the,new,value,typically,a,collection,with,the,current,value,if,demanded,see,link,org,springframework,beans,mergeable,param,key,the,index,in,the,constructor,argument,list,param,new,value,the,argument,value,in,the,form,of,a,value,holder;private,void,add,or,merge,indexed,argument,value,integer,key,value,holder,new,value,value,holder,current,value,this,indexed,argument,values,get,key,if,current,value,null,new,value,get,value,instanceof,mergeable,mergeable,mergeable,mergeable,new,value,get,value,if,mergeable,is,merge,enabled,new,value,set,value,mergeable,merge,current,value,get,value,this,indexed,argument,values,put,key,new,value
ConstructorArgumentValues -> private void addOrMergeIndexedArgumentValue(Integer key, ValueHolder newValue);1458323493;Add an argument value for the given index in the constructor argument list,_merging the new value (typically a collection) with the current value_if demanded: see {@link org.springframework.beans.Mergeable}._@param key the index in the constructor argument list_@param newValue the argument value in the form of a ValueHolder;private void addOrMergeIndexedArgumentValue(Integer key, ValueHolder newValue) {_		ValueHolder currentValue = this.indexedArgumentValues.get(key)__		if (currentValue != null && newValue.getValue() instanceof Mergeable) {_			Mergeable mergeable = (Mergeable) newValue.getValue()__			if (mergeable.isMergeEnabled()) {_				newValue.setValue(mergeable.merge(currentValue.getValue()))__			}_		}_		this.indexedArgumentValues.put(key, newValue)__	};add,an,argument,value,for,the,given,index,in,the,constructor,argument,list,merging,the,new,value,typically,a,collection,with,the,current,value,if,demanded,see,link,org,springframework,beans,mergeable,param,key,the,index,in,the,constructor,argument,list,param,new,value,the,argument,value,in,the,form,of,a,value,holder;private,void,add,or,merge,indexed,argument,value,integer,key,value,holder,new,value,value,holder,current,value,this,indexed,argument,values,get,key,if,current,value,null,new,value,get,value,instanceof,mergeable,mergeable,mergeable,mergeable,new,value,get,value,if,mergeable,is,merge,enabled,new,value,set,value,mergeable,merge,current,value,get,value,this,indexed,argument,values,put,key,new,value
ConstructorArgumentValues -> private void addOrMergeIndexedArgumentValue(Integer key, ValueHolder newValue);1467730834;Add an argument value for the given index in the constructor argument list,_merging the new value (typically a collection) with the current value_if demanded: see {@link org.springframework.beans.Mergeable}._@param key the index in the constructor argument list_@param newValue the argument value in the form of a ValueHolder;private void addOrMergeIndexedArgumentValue(Integer key, ValueHolder newValue) {_		ValueHolder currentValue = this.indexedArgumentValues.get(key)__		if (currentValue != null && newValue.getValue() instanceof Mergeable) {_			Mergeable mergeable = (Mergeable) newValue.getValue()__			if (mergeable.isMergeEnabled()) {_				newValue.setValue(mergeable.merge(currentValue.getValue()))__			}_		}_		this.indexedArgumentValues.put(key, newValue)__	};add,an,argument,value,for,the,given,index,in,the,constructor,argument,list,merging,the,new,value,typically,a,collection,with,the,current,value,if,demanded,see,link,org,springframework,beans,mergeable,param,key,the,index,in,the,constructor,argument,list,param,new,value,the,argument,value,in,the,form,of,a,value,holder;private,void,add,or,merge,indexed,argument,value,integer,key,value,holder,new,value,value,holder,current,value,this,indexed,argument,values,get,key,if,current,value,null,new,value,get,value,instanceof,mergeable,mergeable,mergeable,mergeable,new,value,get,value,if,mergeable,is,merge,enabled,new,value,set,value,mergeable,merge,current,value,get,value,this,indexed,argument,values,put,key,new,value
ConstructorArgumentValues -> private void addOrMergeIndexedArgumentValue(Integer key, ValueHolder newValue);1495868221;Add an argument value for the given index in the constructor argument list,_merging the new value (typically a collection) with the current value_if demanded: see {@link org.springframework.beans.Mergeable}._@param key the index in the constructor argument list_@param newValue the argument value in the form of a ValueHolder;private void addOrMergeIndexedArgumentValue(Integer key, ValueHolder newValue) {_		ValueHolder currentValue = this.indexedArgumentValues.get(key)__		if (currentValue != null && newValue.getValue() instanceof Mergeable) {_			Mergeable mergeable = (Mergeable) newValue.getValue()__			if (mergeable.isMergeEnabled()) {_				newValue.setValue(mergeable.merge(currentValue.getValue()))__			}_		}_		this.indexedArgumentValues.put(key, newValue)__	};add,an,argument,value,for,the,given,index,in,the,constructor,argument,list,merging,the,new,value,typically,a,collection,with,the,current,value,if,demanded,see,link,org,springframework,beans,mergeable,param,key,the,index,in,the,constructor,argument,list,param,new,value,the,argument,value,in,the,form,of,a,value,holder;private,void,add,or,merge,indexed,argument,value,integer,key,value,holder,new,value,value,holder,current,value,this,indexed,argument,values,get,key,if,current,value,null,new,value,get,value,instanceof,mergeable,mergeable,mergeable,mergeable,new,value,get,value,if,mergeable,is,merge,enabled,new,value,set,value,mergeable,merge,current,value,get,value,this,indexed,argument,values,put,key,new,value
ConstructorArgumentValues -> private void addOrMergeIndexedArgumentValue(Integer key, ValueHolder newValue);1496259743;Add an argument value for the given index in the constructor argument list,_merging the new value (typically a collection) with the current value_if demanded: see {@link org.springframework.beans.Mergeable}._@param key the index in the constructor argument list_@param newValue the argument value in the form of a ValueHolder;private void addOrMergeIndexedArgumentValue(Integer key, ValueHolder newValue) {_		ValueHolder currentValue = this.indexedArgumentValues.get(key)__		if (currentValue != null && newValue.getValue() instanceof Mergeable) {_			Mergeable mergeable = (Mergeable) newValue.getValue()__			if (mergeable.isMergeEnabled()) {_				newValue.setValue(mergeable.merge(currentValue.getValue()))__			}_		}_		this.indexedArgumentValues.put(key, newValue)__	};add,an,argument,value,for,the,given,index,in,the,constructor,argument,list,merging,the,new,value,typically,a,collection,with,the,current,value,if,demanded,see,link,org,springframework,beans,mergeable,param,key,the,index,in,the,constructor,argument,list,param,new,value,the,argument,value,in,the,form,of,a,value,holder;private,void,add,or,merge,indexed,argument,value,integer,key,value,holder,new,value,value,holder,current,value,this,indexed,argument,values,get,key,if,current,value,null,new,value,get,value,instanceof,mergeable,mergeable,mergeable,mergeable,new,value,get,value,if,mergeable,is,merge,enabled,new,value,set,value,mergeable,merge,current,value,get,value,this,indexed,argument,values,put,key,new,value
ConstructorArgumentValues -> private void addOrMergeIndexedArgumentValue(Integer key, ValueHolder newValue);1496837955;Add an argument value for the given index in the constructor argument list,_merging the new value (typically a collection) with the current value_if demanded: see {@link org.springframework.beans.Mergeable}._@param key the index in the constructor argument list_@param newValue the argument value in the form of a ValueHolder;private void addOrMergeIndexedArgumentValue(Integer key, ValueHolder newValue) {_		ValueHolder currentValue = this.indexedArgumentValues.get(key)__		if (currentValue != null && newValue.getValue() instanceof Mergeable) {_			Mergeable mergeable = (Mergeable) newValue.getValue()__			if (mergeable.isMergeEnabled()) {_				newValue.setValue(mergeable.merge(currentValue.getValue()))__			}_		}_		this.indexedArgumentValues.put(key, newValue)__	};add,an,argument,value,for,the,given,index,in,the,constructor,argument,list,merging,the,new,value,typically,a,collection,with,the,current,value,if,demanded,see,link,org,springframework,beans,mergeable,param,key,the,index,in,the,constructor,argument,list,param,new,value,the,argument,value,in,the,form,of,a,value,holder;private,void,add,or,merge,indexed,argument,value,integer,key,value,holder,new,value,value,holder,current,value,this,indexed,argument,values,get,key,if,current,value,null,new,value,get,value,instanceof,mergeable,mergeable,mergeable,mergeable,new,value,get,value,if,mergeable,is,merge,enabled,new,value,set,value,mergeable,merge,current,value,get,value,this,indexed,argument,values,put,key,new,value
ConstructorArgumentValues -> private void addOrMergeIndexedArgumentValue(Integer key, ValueHolder newValue);1497250713;Add an argument value for the given index in the constructor argument list,_merging the new value (typically a collection) with the current value_if demanded: see {@link org.springframework.beans.Mergeable}._@param key the index in the constructor argument list_@param newValue the argument value in the form of a ValueHolder;private void addOrMergeIndexedArgumentValue(Integer key, ValueHolder newValue) {_		ValueHolder currentValue = this.indexedArgumentValues.get(key)__		if (currentValue != null && newValue.getValue() instanceof Mergeable) {_			Mergeable mergeable = (Mergeable) newValue.getValue()__			if (mergeable.isMergeEnabled()) {_				newValue.setValue(mergeable.merge(currentValue.getValue()))__			}_		}_		this.indexedArgumentValues.put(key, newValue)__	};add,an,argument,value,for,the,given,index,in,the,constructor,argument,list,merging,the,new,value,typically,a,collection,with,the,current,value,if,demanded,see,link,org,springframework,beans,mergeable,param,key,the,index,in,the,constructor,argument,list,param,new,value,the,argument,value,in,the,form,of,a,value,holder;private,void,add,or,merge,indexed,argument,value,integer,key,value,holder,new,value,value,holder,current,value,this,indexed,argument,values,get,key,if,current,value,null,new,value,get,value,instanceof,mergeable,mergeable,mergeable,mergeable,new,value,get,value,if,mergeable,is,merge,enabled,new,value,set,value,mergeable,merge,current,value,get,value,this,indexed,argument,values,put,key,new,value
ConstructorArgumentValues -> private void addOrMergeIndexedArgumentValue(Integer key, ValueHolder newValue);1498780456;Add an argument value for the given index in the constructor argument list,_merging the new value (typically a collection) with the current value_if demanded: see {@link org.springframework.beans.Mergeable}._@param key the index in the constructor argument list_@param newValue the argument value in the form of a ValueHolder;private void addOrMergeIndexedArgumentValue(Integer key, ValueHolder newValue) {_		ValueHolder currentValue = this.indexedArgumentValues.get(key)__		if (currentValue != null && newValue.getValue() instanceof Mergeable) {_			Mergeable mergeable = (Mergeable) newValue.getValue()__			if (mergeable.isMergeEnabled()) {_				newValue.setValue(mergeable.merge(currentValue.getValue()))__			}_		}_		this.indexedArgumentValues.put(key, newValue)__	};add,an,argument,value,for,the,given,index,in,the,constructor,argument,list,merging,the,new,value,typically,a,collection,with,the,current,value,if,demanded,see,link,org,springframework,beans,mergeable,param,key,the,index,in,the,constructor,argument,list,param,new,value,the,argument,value,in,the,form,of,a,value,holder;private,void,add,or,merge,indexed,argument,value,integer,key,value,holder,new,value,value,holder,current,value,this,indexed,argument,values,get,key,if,current,value,null,new,value,get,value,instanceof,mergeable,mergeable,mergeable,mergeable,new,value,get,value,if,mergeable,is,merge,enabled,new,value,set,value,mergeable,merge,current,value,get,value,this,indexed,argument,values,put,key,new,value
ConstructorArgumentValues -> private void addOrMergeIndexedArgumentValue(Integer key, ValueHolder newValue);1500448076;Add an argument value for the given index in the constructor argument list,_merging the new value (typically a collection) with the current value_if demanded: see {@link org.springframework.beans.Mergeable}._@param key the index in the constructor argument list_@param newValue the argument value in the form of a ValueHolder;private void addOrMergeIndexedArgumentValue(Integer key, ValueHolder newValue) {_		ValueHolder currentValue = this.indexedArgumentValues.get(key)__		if (currentValue != null && newValue.getValue() instanceof Mergeable) {_			Mergeable mergeable = (Mergeable) newValue.getValue()__			if (mergeable.isMergeEnabled()) {_				newValue.setValue(mergeable.merge(currentValue.getValue()))__			}_		}_		this.indexedArgumentValues.put(key, newValue)__	};add,an,argument,value,for,the,given,index,in,the,constructor,argument,list,merging,the,new,value,typically,a,collection,with,the,current,value,if,demanded,see,link,org,springframework,beans,mergeable,param,key,the,index,in,the,constructor,argument,list,param,new,value,the,argument,value,in,the,form,of,a,value,holder;private,void,add,or,merge,indexed,argument,value,integer,key,value,holder,new,value,value,holder,current,value,this,indexed,argument,values,get,key,if,current,value,null,new,value,get,value,instanceof,mergeable,mergeable,mergeable,mergeable,new,value,get,value,if,mergeable,is,merge,enabled,new,value,set,value,mergeable,merge,current,value,get,value,this,indexed,argument,values,put,key,new,value
ConstructorArgumentValues -> private void addOrMergeIndexedArgumentValue(Integer key, ValueHolder newValue);1531945062;Add an argument value for the given index in the constructor argument list,_merging the new value (typically a collection) with the current value_if demanded: see {@link org.springframework.beans.Mergeable}._@param key the index in the constructor argument list_@param newValue the argument value in the form of a ValueHolder;private void addOrMergeIndexedArgumentValue(Integer key, ValueHolder newValue) {_		ValueHolder currentValue = this.indexedArgumentValues.get(key)__		if (currentValue != null && newValue.getValue() instanceof Mergeable) {_			Mergeable mergeable = (Mergeable) newValue.getValue()__			if (mergeable.isMergeEnabled()) {_				newValue.setValue(mergeable.merge(currentValue.getValue()))__			}_		}_		this.indexedArgumentValues.put(key, newValue)__	};add,an,argument,value,for,the,given,index,in,the,constructor,argument,list,merging,the,new,value,typically,a,collection,with,the,current,value,if,demanded,see,link,org,springframework,beans,mergeable,param,key,the,index,in,the,constructor,argument,list,param,new,value,the,argument,value,in,the,form,of,a,value,holder;private,void,add,or,merge,indexed,argument,value,integer,key,value,holder,new,value,value,holder,current,value,this,indexed,argument,values,get,key,if,current,value,null,new,value,get,value,instanceof,mergeable,mergeable,mergeable,mergeable,new,value,get,value,if,mergeable,is,merge,enabled,new,value,set,value,mergeable,merge,current,value,get,value,this,indexed,argument,values,put,key,new,value
ConstructorArgumentValues -> private void addOrMergeIndexedArgumentValue(Integer key, ValueHolder newValue);1532981251;Add an argument value for the given index in the constructor argument list,_merging the new value (typically a collection) with the current value_if demanded: see {@link org.springframework.beans.Mergeable}._@param key the index in the constructor argument list_@param newValue the argument value in the form of a ValueHolder;private void addOrMergeIndexedArgumentValue(Integer key, ValueHolder newValue) {_		ValueHolder currentValue = this.indexedArgumentValues.get(key)__		if (currentValue != null && newValue.getValue() instanceof Mergeable) {_			Mergeable mergeable = (Mergeable) newValue.getValue()__			if (mergeable.isMergeEnabled()) {_				newValue.setValue(mergeable.merge(currentValue.getValue()))__			}_		}_		this.indexedArgumentValues.put(key, newValue)__	};add,an,argument,value,for,the,given,index,in,the,constructor,argument,list,merging,the,new,value,typically,a,collection,with,the,current,value,if,demanded,see,link,org,springframework,beans,mergeable,param,key,the,index,in,the,constructor,argument,list,param,new,value,the,argument,value,in,the,form,of,a,value,holder;private,void,add,or,merge,indexed,argument,value,integer,key,value,holder,new,value,value,holder,current,value,this,indexed,argument,values,get,key,if,current,value,null,new,value,get,value,instanceof,mergeable,mergeable,mergeable,mergeable,new,value,get,value,if,mergeable,is,merge,enabled,new,value,set,value,mergeable,merge,current,value,get,value,this,indexed,argument,values,put,key,new,value
ConstructorArgumentValues -> private void addOrMergeIndexedArgumentValue(Integer key, ValueHolder newValue);1549554785;Add an argument value for the given index in the constructor argument list,_merging the new value (typically a collection) with the current value_if demanded: see {@link org.springframework.beans.Mergeable}._@param key the index in the constructor argument list_@param newValue the argument value in the form of a ValueHolder;private void addOrMergeIndexedArgumentValue(Integer key, ValueHolder newValue) {_		ValueHolder currentValue = this.indexedArgumentValues.get(key)__		if (currentValue != null && newValue.getValue() instanceof Mergeable) {_			Mergeable mergeable = (Mergeable) newValue.getValue()__			if (mergeable.isMergeEnabled()) {_				newValue.setValue(mergeable.merge(currentValue.getValue()))__			}_		}_		this.indexedArgumentValues.put(key, newValue)__	};add,an,argument,value,for,the,given,index,in,the,constructor,argument,list,merging,the,new,value,typically,a,collection,with,the,current,value,if,demanded,see,link,org,springframework,beans,mergeable,param,key,the,index,in,the,constructor,argument,list,param,new,value,the,argument,value,in,the,form,of,a,value,holder;private,void,add,or,merge,indexed,argument,value,integer,key,value,holder,new,value,value,holder,current,value,this,indexed,argument,values,get,key,if,current,value,null,new,value,get,value,instanceof,mergeable,mergeable,mergeable,mergeable,new,value,get,value,if,mergeable,is,merge,enabled,new,value,set,value,mergeable,merge,current,value,get,value,this,indexed,argument,values,put,key,new,value
ConstructorArgumentValues -> public ValueHolder getArgumentValue(int index, Class<?> requiredType, String requiredName, Set<ValueHolder> usedValueHolders);1382789137;Look for an argument value that either corresponds to the given index_in the constructor argument list or generically matches by type._@param index the index in the constructor argument list_@param requiredType the parameter type to match (can be {@code null}_to find an untyped argument value)_@param requiredName the parameter name to match (can be {@code null}_to find an unnamed argument value)_@param usedValueHolders a Set of ValueHolder objects that have already_been used in the current resolution process and should therefore not_be returned again (allowing to return the next generic argument match_in case of multiple generic argument values of the same type)_@return the ValueHolder for the argument, or {@code null} if none set;public ValueHolder getArgumentValue(int index, Class<?> requiredType, String requiredName, Set<ValueHolder> usedValueHolders) {_		Assert.isTrue(index >= 0, "Index must not be negative")__		ValueHolder valueHolder = getIndexedArgumentValue(index, requiredType, requiredName)__		if (valueHolder == null) {_			valueHolder = getGenericArgumentValue(requiredType, requiredName, usedValueHolders)__		}_		return valueHolder__	};look,for,an,argument,value,that,either,corresponds,to,the,given,index,in,the,constructor,argument,list,or,generically,matches,by,type,param,index,the,index,in,the,constructor,argument,list,param,required,type,the,parameter,type,to,match,can,be,code,null,to,find,an,untyped,argument,value,param,required,name,the,parameter,name,to,match,can,be,code,null,to,find,an,unnamed,argument,value,param,used,value,holders,a,set,of,value,holder,objects,that,have,already,been,used,in,the,current,resolution,process,and,should,therefore,not,be,returned,again,allowing,to,return,the,next,generic,argument,match,in,case,of,multiple,generic,argument,values,of,the,same,type,return,the,value,holder,for,the,argument,or,code,null,if,none,set;public,value,holder,get,argument,value,int,index,class,required,type,string,required,name,set,value,holder,used,value,holders,assert,is,true,index,0,index,must,not,be,negative,value,holder,value,holder,get,indexed,argument,value,index,required,type,required,name,if,value,holder,null,value,holder,get,generic,argument,value,required,type,required,name,used,value,holders,return,value,holder
ConstructorArgumentValues -> public ValueHolder getArgumentValue(int index, Class<?> requiredType, String requiredName, Set<ValueHolder> usedValueHolders);1458323493;Look for an argument value that either corresponds to the given index_in the constructor argument list or generically matches by type._@param index the index in the constructor argument list_@param requiredType the parameter type to match (can be {@code null}_to find an untyped argument value)_@param requiredName the parameter name to match (can be {@code null}_to find an unnamed argument value, or empty String to match any name)_@param usedValueHolders a Set of ValueHolder objects that have already_been used in the current resolution process and should therefore not_be returned again (allowing to return the next generic argument match_in case of multiple generic argument values of the same type)_@return the ValueHolder for the argument, or {@code null} if none set;public ValueHolder getArgumentValue(int index, Class<?> requiredType, String requiredName, Set<ValueHolder> usedValueHolders) {_		Assert.isTrue(index >= 0, "Index must not be negative")__		ValueHolder valueHolder = getIndexedArgumentValue(index, requiredType, requiredName)__		if (valueHolder == null) {_			valueHolder = getGenericArgumentValue(requiredType, requiredName, usedValueHolders)__		}_		return valueHolder__	};look,for,an,argument,value,that,either,corresponds,to,the,given,index,in,the,constructor,argument,list,or,generically,matches,by,type,param,index,the,index,in,the,constructor,argument,list,param,required,type,the,parameter,type,to,match,can,be,code,null,to,find,an,untyped,argument,value,param,required,name,the,parameter,name,to,match,can,be,code,null,to,find,an,unnamed,argument,value,or,empty,string,to,match,any,name,param,used,value,holders,a,set,of,value,holder,objects,that,have,already,been,used,in,the,current,resolution,process,and,should,therefore,not,be,returned,again,allowing,to,return,the,next,generic,argument,match,in,case,of,multiple,generic,argument,values,of,the,same,type,return,the,value,holder,for,the,argument,or,code,null,if,none,set;public,value,holder,get,argument,value,int,index,class,required,type,string,required,name,set,value,holder,used,value,holders,assert,is,true,index,0,index,must,not,be,negative,value,holder,value,holder,get,indexed,argument,value,index,required,type,required,name,if,value,holder,null,value,holder,get,generic,argument,value,required,type,required,name,used,value,holders,return,value,holder
ConstructorArgumentValues -> public ValueHolder getArgumentValue(int index, Class<?> requiredType, String requiredName, Set<ValueHolder> usedValueHolders);1467730834;Look for an argument value that either corresponds to the given index_in the constructor argument list or generically matches by type._@param index the index in the constructor argument list_@param requiredType the parameter type to match (can be {@code null}_to find an untyped argument value)_@param requiredName the parameter name to match (can be {@code null}_to find an unnamed argument value, or empty String to match any name)_@param usedValueHolders a Set of ValueHolder objects that have already_been used in the current resolution process and should therefore not_be returned again (allowing to return the next generic argument match_in case of multiple generic argument values of the same type)_@return the ValueHolder for the argument, or {@code null} if none set;public ValueHolder getArgumentValue(int index, Class<?> requiredType, String requiredName, Set<ValueHolder> usedValueHolders) {_		Assert.isTrue(index >= 0, "Index must not be negative")__		ValueHolder valueHolder = getIndexedArgumentValue(index, requiredType, requiredName)__		if (valueHolder == null) {_			valueHolder = getGenericArgumentValue(requiredType, requiredName, usedValueHolders)__		}_		return valueHolder__	};look,for,an,argument,value,that,either,corresponds,to,the,given,index,in,the,constructor,argument,list,or,generically,matches,by,type,param,index,the,index,in,the,constructor,argument,list,param,required,type,the,parameter,type,to,match,can,be,code,null,to,find,an,untyped,argument,value,param,required,name,the,parameter,name,to,match,can,be,code,null,to,find,an,unnamed,argument,value,or,empty,string,to,match,any,name,param,used,value,holders,a,set,of,value,holder,objects,that,have,already,been,used,in,the,current,resolution,process,and,should,therefore,not,be,returned,again,allowing,to,return,the,next,generic,argument,match,in,case,of,multiple,generic,argument,values,of,the,same,type,return,the,value,holder,for,the,argument,or,code,null,if,none,set;public,value,holder,get,argument,value,int,index,class,required,type,string,required,name,set,value,holder,used,value,holders,assert,is,true,index,0,index,must,not,be,negative,value,holder,value,holder,get,indexed,argument,value,index,required,type,required,name,if,value,holder,null,value,holder,get,generic,argument,value,required,type,required,name,used,value,holders,return,value,holder
ConstructorArgumentValues -> ValueHolder -> public ValueHolder(Object value, String type, String name);1328020251;Create a new ValueHolder for the given value, type and name._@param value the argument value_@param type the type of the constructor argument_@param name the name of the constructor argument;public ValueHolder(Object value, String type, String name) {_			this.value = value__			this.type = type__			this.name = name__		};create,a,new,value,holder,for,the,given,value,type,and,name,param,value,the,argument,value,param,type,the,type,of,the,constructor,argument,param,name,the,name,of,the,constructor,argument;public,value,holder,object,value,string,type,string,name,this,value,value,this,type,type,this,name,name
ConstructorArgumentValues -> ValueHolder -> public ValueHolder(Object value, String type, String name);1356735495;Create a new ValueHolder for the given value, type and name._@param value the argument value_@param type the type of the constructor argument_@param name the name of the constructor argument;public ValueHolder(Object value, String type, String name) {_			this.value = value__			this.type = type__			this.name = name__		};create,a,new,value,holder,for,the,given,value,type,and,name,param,value,the,argument,value,param,type,the,type,of,the,constructor,argument,param,name,the,name,of,the,constructor,argument;public,value,holder,object,value,string,type,string,name,this,value,value,this,type,type,this,name,name
ConstructorArgumentValues -> ValueHolder -> public ValueHolder(Object value, String type, String name);1357119239;Create a new ValueHolder for the given value, type and name._@param value the argument value_@param type the type of the constructor argument_@param name the name of the constructor argument;public ValueHolder(Object value, String type, String name) {_			this.value = value__			this.type = type__			this.name = name__		};create,a,new,value,holder,for,the,given,value,type,and,name,param,value,the,argument,value,param,type,the,type,of,the,constructor,argument,param,name,the,name,of,the,constructor,argument;public,value,holder,object,value,string,type,string,name,this,value,value,this,type,type,this,name,name
ConstructorArgumentValues -> ValueHolder -> public ValueHolder(Object value, String type, String name);1368482696;Create a new ValueHolder for the given value, type and name._@param value the argument value_@param type the type of the constructor argument_@param name the name of the constructor argument;public ValueHolder(Object value, String type, String name) {_			this.value = value__			this.type = type__			this.name = name__		};create,a,new,value,holder,for,the,given,value,type,and,name,param,value,the,argument,value,param,type,the,type,of,the,constructor,argument,param,name,the,name,of,the,constructor,argument;public,value,holder,object,value,string,type,string,name,this,value,value,this,type,type,this,name,name
ConstructorArgumentValues -> ValueHolder -> public ValueHolder(Object value, String type, String name);1382789137;Create a new ValueHolder for the given value, type and name._@param value the argument value_@param type the type of the constructor argument_@param name the name of the constructor argument;public ValueHolder(Object value, String type, String name) {_			this.value = value__			this.type = type__			this.name = name__		};create,a,new,value,holder,for,the,given,value,type,and,name,param,value,the,argument,value,param,type,the,type,of,the,constructor,argument,param,name,the,name,of,the,constructor,argument;public,value,holder,object,value,string,type,string,name,this,value,value,this,type,type,this,name,name
ConstructorArgumentValues -> ValueHolder -> public ValueHolder(Object value, String type, String name);1458323493;Create a new ValueHolder for the given value, type and name._@param value the argument value_@param type the type of the constructor argument_@param name the name of the constructor argument;public ValueHolder(Object value, String type, String name) {_			this.value = value__			this.type = type__			this.name = name__		};create,a,new,value,holder,for,the,given,value,type,and,name,param,value,the,argument,value,param,type,the,type,of,the,constructor,argument,param,name,the,name,of,the,constructor,argument;public,value,holder,object,value,string,type,string,name,this,value,value,this,type,type,this,name,name
ConstructorArgumentValues -> ValueHolder -> public ValueHolder(Object value, String type, String name);1467730834;Create a new ValueHolder for the given value, type and name._@param value the argument value_@param type the type of the constructor argument_@param name the name of the constructor argument;public ValueHolder(Object value, String type, String name) {_			this.value = value__			this.type = type__			this.name = name__		};create,a,new,value,holder,for,the,given,value,type,and,name,param,value,the,argument,value,param,type,the,type,of,the,constructor,argument,param,name,the,name,of,the,constructor,argument;public,value,holder,object,value,string,type,string,name,this,value,value,this,type,type,this,name,name
ConstructorArgumentValues -> ValueHolder -> public ValueHolder(Object value, String type, String name);1495868221;Create a new ValueHolder for the given value, type and name._@param value the argument value_@param type the type of the constructor argument_@param name the name of the constructor argument;public ValueHolder(Object value, String type, String name) {_			this.value = value__			this.type = type__			this.name = name__		};create,a,new,value,holder,for,the,given,value,type,and,name,param,value,the,argument,value,param,type,the,type,of,the,constructor,argument,param,name,the,name,of,the,constructor,argument;public,value,holder,object,value,string,type,string,name,this,value,value,this,type,type,this,name,name
ConstructorArgumentValues -> ValueHolder -> public ValueHolder(Object value, String type, String name);1496259743;Create a new ValueHolder for the given value, type and name._@param value the argument value_@param type the type of the constructor argument_@param name the name of the constructor argument;public ValueHolder(Object value, String type, String name) {_			this.value = value__			this.type = type__			this.name = name__		};create,a,new,value,holder,for,the,given,value,type,and,name,param,value,the,argument,value,param,type,the,type,of,the,constructor,argument,param,name,the,name,of,the,constructor,argument;public,value,holder,object,value,string,type,string,name,this,value,value,this,type,type,this,name,name
ConstructorArgumentValues -> public void addArgumentValues(ConstructorArgumentValues other);1328020251;Copy all given argument values into this object, using separate holder_instances to keep the values independent from the original object._<p>Note: Identical ValueHolder instances will only be registered once,_to allow for merging and re-merging of argument value definitions. Distinct_ValueHolder instances carrying the same content are of course allowed.;public void addArgumentValues(ConstructorArgumentValues other) {_		if (other != null) {_			for (Map.Entry<Integer, ValueHolder> entry : other.indexedArgumentValues.entrySet()) {_				addOrMergeIndexedArgumentValue(entry.getKey(), entry.getValue().copy())__			}_			for (ValueHolder valueHolder : other.genericArgumentValues) {_				if (!this.genericArgumentValues.contains(valueHolder)) {_					addOrMergeGenericArgumentValue(valueHolder.copy())__				}_			}_		}_	};copy,all,given,argument,values,into,this,object,using,separate,holder,instances,to,keep,the,values,independent,from,the,original,object,p,note,identical,value,holder,instances,will,only,be,registered,once,to,allow,for,merging,and,re,merging,of,argument,value,definitions,distinct,value,holder,instances,carrying,the,same,content,are,of,course,allowed;public,void,add,argument,values,constructor,argument,values,other,if,other,null,for,map,entry,integer,value,holder,entry,other,indexed,argument,values,entry,set,add,or,merge,indexed,argument,value,entry,get,key,entry,get,value,copy,for,value,holder,value,holder,other,generic,argument,values,if,this,generic,argument,values,contains,value,holder,add,or,merge,generic,argument,value,value,holder,copy
ConstructorArgumentValues -> public void addArgumentValues(ConstructorArgumentValues other);1356735495;Copy all given argument values into this object, using separate holder_instances to keep the values independent from the original object._<p>Note: Identical ValueHolder instances will only be registered once,_to allow for merging and re-merging of argument value definitions. Distinct_ValueHolder instances carrying the same content are of course allowed.;public void addArgumentValues(ConstructorArgumentValues other) {_		if (other != null) {_			for (Map.Entry<Integer, ValueHolder> entry : other.indexedArgumentValues.entrySet()) {_				addOrMergeIndexedArgumentValue(entry.getKey(), entry.getValue().copy())__			}_			for (ValueHolder valueHolder : other.genericArgumentValues) {_				if (!this.genericArgumentValues.contains(valueHolder)) {_					addOrMergeGenericArgumentValue(valueHolder.copy())__				}_			}_		}_	};copy,all,given,argument,values,into,this,object,using,separate,holder,instances,to,keep,the,values,independent,from,the,original,object,p,note,identical,value,holder,instances,will,only,be,registered,once,to,allow,for,merging,and,re,merging,of,argument,value,definitions,distinct,value,holder,instances,carrying,the,same,content,are,of,course,allowed;public,void,add,argument,values,constructor,argument,values,other,if,other,null,for,map,entry,integer,value,holder,entry,other,indexed,argument,values,entry,set,add,or,merge,indexed,argument,value,entry,get,key,entry,get,value,copy,for,value,holder,value,holder,other,generic,argument,values,if,this,generic,argument,values,contains,value,holder,add,or,merge,generic,argument,value,value,holder,copy
ConstructorArgumentValues -> public void addArgumentValues(ConstructorArgumentValues other);1357119239;Copy all given argument values into this object, using separate holder_instances to keep the values independent from the original object._<p>Note: Identical ValueHolder instances will only be registered once,_to allow for merging and re-merging of argument value definitions. Distinct_ValueHolder instances carrying the same content are of course allowed.;public void addArgumentValues(ConstructorArgumentValues other) {_		if (other != null) {_			for (Map.Entry<Integer, ValueHolder> entry : other.indexedArgumentValues.entrySet()) {_				addOrMergeIndexedArgumentValue(entry.getKey(), entry.getValue().copy())__			}_			for (ValueHolder valueHolder : other.genericArgumentValues) {_				if (!this.genericArgumentValues.contains(valueHolder)) {_					addOrMergeGenericArgumentValue(valueHolder.copy())__				}_			}_		}_	};copy,all,given,argument,values,into,this,object,using,separate,holder,instances,to,keep,the,values,independent,from,the,original,object,p,note,identical,value,holder,instances,will,only,be,registered,once,to,allow,for,merging,and,re,merging,of,argument,value,definitions,distinct,value,holder,instances,carrying,the,same,content,are,of,course,allowed;public,void,add,argument,values,constructor,argument,values,other,if,other,null,for,map,entry,integer,value,holder,entry,other,indexed,argument,values,entry,set,add,or,merge,indexed,argument,value,entry,get,key,entry,get,value,copy,for,value,holder,value,holder,other,generic,argument,values,if,this,generic,argument,values,contains,value,holder,add,or,merge,generic,argument,value,value,holder,copy
ConstructorArgumentValues -> public void addArgumentValues(ConstructorArgumentValues other);1368482696;Copy all given argument values into this object, using separate holder_instances to keep the values independent from the original object._<p>Note: Identical ValueHolder instances will only be registered once,_to allow for merging and re-merging of argument value definitions. Distinct_ValueHolder instances carrying the same content are of course allowed.;public void addArgumentValues(ConstructorArgumentValues other) {_		if (other != null) {_			for (Map.Entry<Integer, ValueHolder> entry : other.indexedArgumentValues.entrySet()) {_				addOrMergeIndexedArgumentValue(entry.getKey(), entry.getValue().copy())__			}_			for (ValueHolder valueHolder : other.genericArgumentValues) {_				if (!this.genericArgumentValues.contains(valueHolder)) {_					addOrMergeGenericArgumentValue(valueHolder.copy())__				}_			}_		}_	};copy,all,given,argument,values,into,this,object,using,separate,holder,instances,to,keep,the,values,independent,from,the,original,object,p,note,identical,value,holder,instances,will,only,be,registered,once,to,allow,for,merging,and,re,merging,of,argument,value,definitions,distinct,value,holder,instances,carrying,the,same,content,are,of,course,allowed;public,void,add,argument,values,constructor,argument,values,other,if,other,null,for,map,entry,integer,value,holder,entry,other,indexed,argument,values,entry,set,add,or,merge,indexed,argument,value,entry,get,key,entry,get,value,copy,for,value,holder,value,holder,other,generic,argument,values,if,this,generic,argument,values,contains,value,holder,add,or,merge,generic,argument,value,value,holder,copy
ConstructorArgumentValues -> public void addArgumentValues(ConstructorArgumentValues other);1382789137;Copy all given argument values into this object, using separate holder_instances to keep the values independent from the original object._<p>Note: Identical ValueHolder instances will only be registered once,_to allow for merging and re-merging of argument value definitions. Distinct_ValueHolder instances carrying the same content are of course allowed.;public void addArgumentValues(ConstructorArgumentValues other) {_		if (other != null) {_			for (Map.Entry<Integer, ValueHolder> entry : other.indexedArgumentValues.entrySet()) {_				addOrMergeIndexedArgumentValue(entry.getKey(), entry.getValue().copy())__			}_			for (ValueHolder valueHolder : other.genericArgumentValues) {_				if (!this.genericArgumentValues.contains(valueHolder)) {_					addOrMergeGenericArgumentValue(valueHolder.copy())__				}_			}_		}_	};copy,all,given,argument,values,into,this,object,using,separate,holder,instances,to,keep,the,values,independent,from,the,original,object,p,note,identical,value,holder,instances,will,only,be,registered,once,to,allow,for,merging,and,re,merging,of,argument,value,definitions,distinct,value,holder,instances,carrying,the,same,content,are,of,course,allowed;public,void,add,argument,values,constructor,argument,values,other,if,other,null,for,map,entry,integer,value,holder,entry,other,indexed,argument,values,entry,set,add,or,merge,indexed,argument,value,entry,get,key,entry,get,value,copy,for,value,holder,value,holder,other,generic,argument,values,if,this,generic,argument,values,contains,value,holder,add,or,merge,generic,argument,value,value,holder,copy
ConstructorArgumentValues -> public void addArgumentValues(ConstructorArgumentValues other);1458323493;Copy all given argument values into this object, using separate holder_instances to keep the values independent from the original object._<p>Note: Identical ValueHolder instances will only be registered once,_to allow for merging and re-merging of argument value definitions. Distinct_ValueHolder instances carrying the same content are of course allowed.;public void addArgumentValues(ConstructorArgumentValues other) {_		if (other != null) {_			for (Map.Entry<Integer, ValueHolder> entry : other.indexedArgumentValues.entrySet()) {_				addOrMergeIndexedArgumentValue(entry.getKey(), entry.getValue().copy())__			}_			for (ValueHolder valueHolder : other.genericArgumentValues) {_				if (!this.genericArgumentValues.contains(valueHolder)) {_					addOrMergeGenericArgumentValue(valueHolder.copy())__				}_			}_		}_	};copy,all,given,argument,values,into,this,object,using,separate,holder,instances,to,keep,the,values,independent,from,the,original,object,p,note,identical,value,holder,instances,will,only,be,registered,once,to,allow,for,merging,and,re,merging,of,argument,value,definitions,distinct,value,holder,instances,carrying,the,same,content,are,of,course,allowed;public,void,add,argument,values,constructor,argument,values,other,if,other,null,for,map,entry,integer,value,holder,entry,other,indexed,argument,values,entry,set,add,or,merge,indexed,argument,value,entry,get,key,entry,get,value,copy,for,value,holder,value,holder,other,generic,argument,values,if,this,generic,argument,values,contains,value,holder,add,or,merge,generic,argument,value,value,holder,copy
ConstructorArgumentValues -> public void addArgumentValues(ConstructorArgumentValues other);1467730834;Copy all given argument values into this object, using separate holder_instances to keep the values independent from the original object._<p>Note: Identical ValueHolder instances will only be registered once,_to allow for merging and re-merging of argument value definitions. Distinct_ValueHolder instances carrying the same content are of course allowed.;public void addArgumentValues(ConstructorArgumentValues other) {_		if (other != null) {_			for (Map.Entry<Integer, ValueHolder> entry : other.indexedArgumentValues.entrySet()) {_				addOrMergeIndexedArgumentValue(entry.getKey(), entry.getValue().copy())__			}_			for (ValueHolder valueHolder : other.genericArgumentValues) {_				if (!this.genericArgumentValues.contains(valueHolder)) {_					addOrMergeGenericArgumentValue(valueHolder.copy())__				}_			}_		}_	};copy,all,given,argument,values,into,this,object,using,separate,holder,instances,to,keep,the,values,independent,from,the,original,object,p,note,identical,value,holder,instances,will,only,be,registered,once,to,allow,for,merging,and,re,merging,of,argument,value,definitions,distinct,value,holder,instances,carrying,the,same,content,are,of,course,allowed;public,void,add,argument,values,constructor,argument,values,other,if,other,null,for,map,entry,integer,value,holder,entry,other,indexed,argument,values,entry,set,add,or,merge,indexed,argument,value,entry,get,key,entry,get,value,copy,for,value,holder,value,holder,other,generic,argument,values,if,this,generic,argument,values,contains,value,holder,add,or,merge,generic,argument,value,value,holder,copy
ConstructorArgumentValues -> public void addArgumentValues(ConstructorArgumentValues other);1495868221;Copy all given argument values into this object, using separate holder_instances to keep the values independent from the original object._<p>Note: Identical ValueHolder instances will only be registered once,_to allow for merging and re-merging of argument value definitions. Distinct_ValueHolder instances carrying the same content are of course allowed.;public void addArgumentValues(ConstructorArgumentValues other) {_		if (other != null) {_			for (Map.Entry<Integer, ValueHolder> entry : other.indexedArgumentValues.entrySet()) {_				addOrMergeIndexedArgumentValue(entry.getKey(), entry.getValue().copy())__			}_			for (ValueHolder valueHolder : other.genericArgumentValues) {_				if (!this.genericArgumentValues.contains(valueHolder)) {_					addOrMergeGenericArgumentValue(valueHolder.copy())__				}_			}_		}_	};copy,all,given,argument,values,into,this,object,using,separate,holder,instances,to,keep,the,values,independent,from,the,original,object,p,note,identical,value,holder,instances,will,only,be,registered,once,to,allow,for,merging,and,re,merging,of,argument,value,definitions,distinct,value,holder,instances,carrying,the,same,content,are,of,course,allowed;public,void,add,argument,values,constructor,argument,values,other,if,other,null,for,map,entry,integer,value,holder,entry,other,indexed,argument,values,entry,set,add,or,merge,indexed,argument,value,entry,get,key,entry,get,value,copy,for,value,holder,value,holder,other,generic,argument,values,if,this,generic,argument,values,contains,value,holder,add,or,merge,generic,argument,value,value,holder,copy
ConstructorArgumentValues -> public void addArgumentValues(ConstructorArgumentValues other);1496259743;Copy all given argument values into this object, using separate holder_instances to keep the values independent from the original object._<p>Note: Identical ValueHolder instances will only be registered once,_to allow for merging and re-merging of argument value definitions. Distinct_ValueHolder instances carrying the same content are of course allowed.;public void addArgumentValues(ConstructorArgumentValues other) {_		if (other != null) {_			for (Map.Entry<Integer, ValueHolder> entry : other.indexedArgumentValues.entrySet()) {_				addOrMergeIndexedArgumentValue(entry.getKey(), entry.getValue().copy())__			}_			for (ValueHolder valueHolder : other.genericArgumentValues) {_				if (!this.genericArgumentValues.contains(valueHolder)) {_					addOrMergeGenericArgumentValue(valueHolder.copy())__				}_			}_		}_	};copy,all,given,argument,values,into,this,object,using,separate,holder,instances,to,keep,the,values,independent,from,the,original,object,p,note,identical,value,holder,instances,will,only,be,registered,once,to,allow,for,merging,and,re,merging,of,argument,value,definitions,distinct,value,holder,instances,carrying,the,same,content,are,of,course,allowed;public,void,add,argument,values,constructor,argument,values,other,if,other,null,for,map,entry,integer,value,holder,entry,other,indexed,argument,values,entry,set,add,or,merge,indexed,argument,value,entry,get,key,entry,get,value,copy,for,value,holder,value,holder,other,generic,argument,values,if,this,generic,argument,values,contains,value,holder,add,or,merge,generic,argument,value,value,holder,copy
ConstructorArgumentValues -> ValueHolder -> public ValueHolder(Object value);1328020251;Create a new ValueHolder for the given value._@param value the argument value;public ValueHolder(Object value) {_			this.value = value__		};create,a,new,value,holder,for,the,given,value,param,value,the,argument,value;public,value,holder,object,value,this,value,value
ConstructorArgumentValues -> ValueHolder -> public ValueHolder(Object value);1356735495;Create a new ValueHolder for the given value._@param value the argument value;public ValueHolder(Object value) {_			this.value = value__		};create,a,new,value,holder,for,the,given,value,param,value,the,argument,value;public,value,holder,object,value,this,value,value
ConstructorArgumentValues -> ValueHolder -> public ValueHolder(Object value);1357119239;Create a new ValueHolder for the given value._@param value the argument value;public ValueHolder(Object value) {_			this.value = value__		};create,a,new,value,holder,for,the,given,value,param,value,the,argument,value;public,value,holder,object,value,this,value,value
ConstructorArgumentValues -> ValueHolder -> public ValueHolder(Object value);1368482696;Create a new ValueHolder for the given value._@param value the argument value;public ValueHolder(Object value) {_			this.value = value__		};create,a,new,value,holder,for,the,given,value,param,value,the,argument,value;public,value,holder,object,value,this,value,value
ConstructorArgumentValues -> ValueHolder -> public ValueHolder(Object value);1382789137;Create a new ValueHolder for the given value._@param value the argument value;public ValueHolder(Object value) {_			this.value = value__		};create,a,new,value,holder,for,the,given,value,param,value,the,argument,value;public,value,holder,object,value,this,value,value
ConstructorArgumentValues -> ValueHolder -> public ValueHolder(Object value);1458323493;Create a new ValueHolder for the given value._@param value the argument value;public ValueHolder(Object value) {_			this.value = value__		};create,a,new,value,holder,for,the,given,value,param,value,the,argument,value;public,value,holder,object,value,this,value,value
ConstructorArgumentValues -> ValueHolder -> public ValueHolder(Object value);1467730834;Create a new ValueHolder for the given value._@param value the argument value;public ValueHolder(Object value) {_			this.value = value__		};create,a,new,value,holder,for,the,given,value,param,value,the,argument,value;public,value,holder,object,value,this,value,value
ConstructorArgumentValues -> ValueHolder -> public ValueHolder(Object value);1495868221;Create a new ValueHolder for the given value._@param value the argument value;public ValueHolder(Object value) {_			this.value = value__		};create,a,new,value,holder,for,the,given,value,param,value,the,argument,value;public,value,holder,object,value,this,value,value
ConstructorArgumentValues -> ValueHolder -> public ValueHolder(Object value);1496259743;Create a new ValueHolder for the given value._@param value the argument value;public ValueHolder(Object value) {_			this.value = value__		};create,a,new,value,holder,for,the,given,value,param,value,the,argument,value;public,value,holder,object,value,this,value,value
ConstructorArgumentValues -> @Nullable 	public ValueHolder getGenericArgumentValue(@Nullable Class<?> requiredType, @Nullable String requiredName, @Nullable Set<ValueHolder> usedValueHolders);1496259743;Look for the next generic argument value that matches the given type,_ignoring argument values that have already been used in the current_resolution process._@param requiredType the type to match (can be {@code null} to find_an arbitrary next generic argument value)_@param requiredName the name to match (can be {@code null} to not_match argument values by name, or empty String to match any name)_@param usedValueHolders a Set of ValueHolder objects that have already been used_in the current resolution process and should therefore not be returned again_@return the ValueHolder for the argument, or {@code null} if none found;@Nullable_	public ValueHolder getGenericArgumentValue(@Nullable Class<?> requiredType, @Nullable String requiredName, @Nullable Set<ValueHolder> usedValueHolders) {_		for (ValueHolder valueHolder : this.genericArgumentValues) {_			if (usedValueHolders != null && usedValueHolders.contains(valueHolder)) {_				continue__			}_			if (valueHolder.getName() != null && !"".equals(requiredName) &&_					(requiredName == null || !valueHolder.getName().equals(requiredName))) {_				continue__			}_			if (valueHolder.getType() != null &&_					(requiredType == null || !ClassUtils.matchesTypeName(requiredType, valueHolder.getType()))) {_				continue__			}_			if (requiredType != null && valueHolder.getType() == null && valueHolder.getName() == null &&_					!ClassUtils.isAssignableValue(requiredType, valueHolder.getValue())) {_				continue__			}_			return valueHolder__		}_		return null__	};look,for,the,next,generic,argument,value,that,matches,the,given,type,ignoring,argument,values,that,have,already,been,used,in,the,current,resolution,process,param,required,type,the,type,to,match,can,be,code,null,to,find,an,arbitrary,next,generic,argument,value,param,required,name,the,name,to,match,can,be,code,null,to,not,match,argument,values,by,name,or,empty,string,to,match,any,name,param,used,value,holders,a,set,of,value,holder,objects,that,have,already,been,used,in,the,current,resolution,process,and,should,therefore,not,be,returned,again,return,the,value,holder,for,the,argument,or,code,null,if,none,found;nullable,public,value,holder,get,generic,argument,value,nullable,class,required,type,nullable,string,required,name,nullable,set,value,holder,used,value,holders,for,value,holder,value,holder,this,generic,argument,values,if,used,value,holders,null,used,value,holders,contains,value,holder,continue,if,value,holder,get,name,null,equals,required,name,required,name,null,value,holder,get,name,equals,required,name,continue,if,value,holder,get,type,null,required,type,null,class,utils,matches,type,name,required,type,value,holder,get,type,continue,if,required,type,null,value,holder,get,type,null,value,holder,get,name,null,class,utils,is,assignable,value,required,type,value,holder,get,value,continue,return,value,holder,return,null
ConstructorArgumentValues -> @Nullable 	public ValueHolder getGenericArgumentValue(@Nullable Class<?> requiredType, @Nullable String requiredName, @Nullable Set<ValueHolder> usedValueHolders);1496837955;Look for the next generic argument value that matches the given type,_ignoring argument values that have already been used in the current_resolution process._@param requiredType the type to match (can be {@code null} to find_an arbitrary next generic argument value)_@param requiredName the name to match (can be {@code null} to not_match argument values by name, or empty String to match any name)_@param usedValueHolders a Set of ValueHolder objects that have already been used_in the current resolution process and should therefore not be returned again_@return the ValueHolder for the argument, or {@code null} if none found;@Nullable_	public ValueHolder getGenericArgumentValue(@Nullable Class<?> requiredType, @Nullable String requiredName, @Nullable Set<ValueHolder> usedValueHolders) {_		for (ValueHolder valueHolder : this.genericArgumentValues) {_			if (usedValueHolders != null && usedValueHolders.contains(valueHolder)) {_				continue__			}_			if (valueHolder.getName() != null && !"".equals(requiredName) &&_					(requiredName == null || !valueHolder.getName().equals(requiredName))) {_				continue__			}_			if (valueHolder.getType() != null &&_					(requiredType == null || !ClassUtils.matchesTypeName(requiredType, valueHolder.getType()))) {_				continue__			}_			if (requiredType != null && valueHolder.getType() == null && valueHolder.getName() == null &&_					!ClassUtils.isAssignableValue(requiredType, valueHolder.getValue())) {_				continue__			}_			return valueHolder__		}_		return null__	};look,for,the,next,generic,argument,value,that,matches,the,given,type,ignoring,argument,values,that,have,already,been,used,in,the,current,resolution,process,param,required,type,the,type,to,match,can,be,code,null,to,find,an,arbitrary,next,generic,argument,value,param,required,name,the,name,to,match,can,be,code,null,to,not,match,argument,values,by,name,or,empty,string,to,match,any,name,param,used,value,holders,a,set,of,value,holder,objects,that,have,already,been,used,in,the,current,resolution,process,and,should,therefore,not,be,returned,again,return,the,value,holder,for,the,argument,or,code,null,if,none,found;nullable,public,value,holder,get,generic,argument,value,nullable,class,required,type,nullable,string,required,name,nullable,set,value,holder,used,value,holders,for,value,holder,value,holder,this,generic,argument,values,if,used,value,holders,null,used,value,holders,contains,value,holder,continue,if,value,holder,get,name,null,equals,required,name,required,name,null,value,holder,get,name,equals,required,name,continue,if,value,holder,get,type,null,required,type,null,class,utils,matches,type,name,required,type,value,holder,get,type,continue,if,required,type,null,value,holder,get,type,null,value,holder,get,name,null,class,utils,is,assignable,value,required,type,value,holder,get,value,continue,return,value,holder,return,null
ConstructorArgumentValues -> @Nullable 	public ValueHolder getGenericArgumentValue(@Nullable Class<?> requiredType, @Nullable String requiredName, @Nullable Set<ValueHolder> usedValueHolders);1497250713;Look for the next generic argument value that matches the given type,_ignoring argument values that have already been used in the current_resolution process._@param requiredType the type to match (can be {@code null} to find_an arbitrary next generic argument value)_@param requiredName the name to match (can be {@code null} to not_match argument values by name, or empty String to match any name)_@param usedValueHolders a Set of ValueHolder objects that have already been used_in the current resolution process and should therefore not be returned again_@return the ValueHolder for the argument, or {@code null} if none found;@Nullable_	public ValueHolder getGenericArgumentValue(@Nullable Class<?> requiredType, @Nullable String requiredName, @Nullable Set<ValueHolder> usedValueHolders) {_		for (ValueHolder valueHolder : this.genericArgumentValues) {_			if (usedValueHolders != null && usedValueHolders.contains(valueHolder)) {_				continue__			}_			if (valueHolder.getName() != null && !"".equals(requiredName) &&_					(requiredName == null || !valueHolder.getName().equals(requiredName))) {_				continue__			}_			if (valueHolder.getType() != null &&_					(requiredType == null || !ClassUtils.matchesTypeName(requiredType, valueHolder.getType()))) {_				continue__			}_			if (requiredType != null && valueHolder.getType() == null && valueHolder.getName() == null &&_					!ClassUtils.isAssignableValue(requiredType, valueHolder.getValue())) {_				continue__			}_			return valueHolder__		}_		return null__	};look,for,the,next,generic,argument,value,that,matches,the,given,type,ignoring,argument,values,that,have,already,been,used,in,the,current,resolution,process,param,required,type,the,type,to,match,can,be,code,null,to,find,an,arbitrary,next,generic,argument,value,param,required,name,the,name,to,match,can,be,code,null,to,not,match,argument,values,by,name,or,empty,string,to,match,any,name,param,used,value,holders,a,set,of,value,holder,objects,that,have,already,been,used,in,the,current,resolution,process,and,should,therefore,not,be,returned,again,return,the,value,holder,for,the,argument,or,code,null,if,none,found;nullable,public,value,holder,get,generic,argument,value,nullable,class,required,type,nullable,string,required,name,nullable,set,value,holder,used,value,holders,for,value,holder,value,holder,this,generic,argument,values,if,used,value,holders,null,used,value,holders,contains,value,holder,continue,if,value,holder,get,name,null,equals,required,name,required,name,null,value,holder,get,name,equals,required,name,continue,if,value,holder,get,type,null,required,type,null,class,utils,matches,type,name,required,type,value,holder,get,type,continue,if,required,type,null,value,holder,get,type,null,value,holder,get,name,null,class,utils,is,assignable,value,required,type,value,holder,get,value,continue,return,value,holder,return,null
ConstructorArgumentValues -> @Nullable 	public ValueHolder getGenericArgumentValue(@Nullable Class<?> requiredType, @Nullable String requiredName, @Nullable Set<ValueHolder> usedValueHolders);1498780456;Look for the next generic argument value that matches the given type,_ignoring argument values that have already been used in the current_resolution process._@param requiredType the type to match (can be {@code null} to find_an arbitrary next generic argument value)_@param requiredName the name to match (can be {@code null} to not_match argument values by name, or empty String to match any name)_@param usedValueHolders a Set of ValueHolder objects that have already been used_in the current resolution process and should therefore not be returned again_@return the ValueHolder for the argument, or {@code null} if none found;@Nullable_	public ValueHolder getGenericArgumentValue(@Nullable Class<?> requiredType, @Nullable String requiredName, @Nullable Set<ValueHolder> usedValueHolders) {_		for (ValueHolder valueHolder : this.genericArgumentValues) {_			if (usedValueHolders != null && usedValueHolders.contains(valueHolder)) {_				continue__			}_			if (valueHolder.getName() != null && !"".equals(requiredName) &&_					(requiredName == null || !valueHolder.getName().equals(requiredName))) {_				continue__			}_			if (valueHolder.getType() != null &&_					(requiredType == null || !ClassUtils.matchesTypeName(requiredType, valueHolder.getType()))) {_				continue__			}_			if (requiredType != null && valueHolder.getType() == null && valueHolder.getName() == null &&_					!ClassUtils.isAssignableValue(requiredType, valueHolder.getValue())) {_				continue__			}_			return valueHolder__		}_		return null__	};look,for,the,next,generic,argument,value,that,matches,the,given,type,ignoring,argument,values,that,have,already,been,used,in,the,current,resolution,process,param,required,type,the,type,to,match,can,be,code,null,to,find,an,arbitrary,next,generic,argument,value,param,required,name,the,name,to,match,can,be,code,null,to,not,match,argument,values,by,name,or,empty,string,to,match,any,name,param,used,value,holders,a,set,of,value,holder,objects,that,have,already,been,used,in,the,current,resolution,process,and,should,therefore,not,be,returned,again,return,the,value,holder,for,the,argument,or,code,null,if,none,found;nullable,public,value,holder,get,generic,argument,value,nullable,class,required,type,nullable,string,required,name,nullable,set,value,holder,used,value,holders,for,value,holder,value,holder,this,generic,argument,values,if,used,value,holders,null,used,value,holders,contains,value,holder,continue,if,value,holder,get,name,null,equals,required,name,required,name,null,value,holder,get,name,equals,required,name,continue,if,value,holder,get,type,null,required,type,null,class,utils,matches,type,name,required,type,value,holder,get,type,continue,if,required,type,null,value,holder,get,type,null,value,holder,get,name,null,class,utils,is,assignable,value,required,type,value,holder,get,value,continue,return,value,holder,return,null
ConstructorArgumentValues -> @Nullable 	public ValueHolder getGenericArgumentValue(@Nullable Class<?> requiredType, @Nullable String requiredName, @Nullable Set<ValueHolder> usedValueHolders);1500448076;Look for the next generic argument value that matches the given type,_ignoring argument values that have already been used in the current_resolution process._@param requiredType the type to match (can be {@code null} to find_an arbitrary next generic argument value)_@param requiredName the name to match (can be {@code null} to not_match argument values by name, or empty String to match any name)_@param usedValueHolders a Set of ValueHolder objects that have already been used_in the current resolution process and should therefore not be returned again_@return the ValueHolder for the argument, or {@code null} if none found;@Nullable_	public ValueHolder getGenericArgumentValue(@Nullable Class<?> requiredType, @Nullable String requiredName, @Nullable Set<ValueHolder> usedValueHolders) {_		for (ValueHolder valueHolder : this.genericArgumentValues) {_			if (usedValueHolders != null && usedValueHolders.contains(valueHolder)) {_				continue__			}_			if (valueHolder.getName() != null && !"".equals(requiredName) &&_					(requiredName == null || !valueHolder.getName().equals(requiredName))) {_				continue__			}_			if (valueHolder.getType() != null &&_					(requiredType == null || !ClassUtils.matchesTypeName(requiredType, valueHolder.getType()))) {_				continue__			}_			if (requiredType != null && valueHolder.getType() == null && valueHolder.getName() == null &&_					!ClassUtils.isAssignableValue(requiredType, valueHolder.getValue())) {_				continue__			}_			return valueHolder__		}_		return null__	};look,for,the,next,generic,argument,value,that,matches,the,given,type,ignoring,argument,values,that,have,already,been,used,in,the,current,resolution,process,param,required,type,the,type,to,match,can,be,code,null,to,find,an,arbitrary,next,generic,argument,value,param,required,name,the,name,to,match,can,be,code,null,to,not,match,argument,values,by,name,or,empty,string,to,match,any,name,param,used,value,holders,a,set,of,value,holder,objects,that,have,already,been,used,in,the,current,resolution,process,and,should,therefore,not,be,returned,again,return,the,value,holder,for,the,argument,or,code,null,if,none,found;nullable,public,value,holder,get,generic,argument,value,nullable,class,required,type,nullable,string,required,name,nullable,set,value,holder,used,value,holders,for,value,holder,value,holder,this,generic,argument,values,if,used,value,holders,null,used,value,holders,contains,value,holder,continue,if,value,holder,get,name,null,equals,required,name,required,name,null,value,holder,get,name,equals,required,name,continue,if,value,holder,get,type,null,required,type,null,class,utils,matches,type,name,required,type,value,holder,get,type,continue,if,required,type,null,value,holder,get,type,null,value,holder,get,name,null,class,utils,is,assignable,value,required,type,value,holder,get,value,continue,return,value,holder,return,null
ConstructorArgumentValues -> @Nullable 	public ValueHolder getGenericArgumentValue(@Nullable Class<?> requiredType, @Nullable String requiredName, @Nullable Set<ValueHolder> usedValueHolders);1531945062;Look for the next generic argument value that matches the given type,_ignoring argument values that have already been used in the current_resolution process._@param requiredType the type to match (can be {@code null} to find_an arbitrary next generic argument value)_@param requiredName the name to match (can be {@code null} to not_match argument values by name, or empty String to match any name)_@param usedValueHolders a Set of ValueHolder objects that have already been used_in the current resolution process and should therefore not be returned again_@return the ValueHolder for the argument, or {@code null} if none found;@Nullable_	public ValueHolder getGenericArgumentValue(@Nullable Class<?> requiredType, @Nullable String requiredName, @Nullable Set<ValueHolder> usedValueHolders) {_		for (ValueHolder valueHolder : this.genericArgumentValues) {_			if (usedValueHolders != null && usedValueHolders.contains(valueHolder)) {_				continue__			}_			if (valueHolder.getName() != null && !"".equals(requiredName) &&_					(requiredName == null || !valueHolder.getName().equals(requiredName))) {_				continue__			}_			if (valueHolder.getType() != null &&_					(requiredType == null || !ClassUtils.matchesTypeName(requiredType, valueHolder.getType()))) {_				continue__			}_			if (requiredType != null && valueHolder.getType() == null && valueHolder.getName() == null &&_					!ClassUtils.isAssignableValue(requiredType, valueHolder.getValue())) {_				continue__			}_			return valueHolder__		}_		return null__	};look,for,the,next,generic,argument,value,that,matches,the,given,type,ignoring,argument,values,that,have,already,been,used,in,the,current,resolution,process,param,required,type,the,type,to,match,can,be,code,null,to,find,an,arbitrary,next,generic,argument,value,param,required,name,the,name,to,match,can,be,code,null,to,not,match,argument,values,by,name,or,empty,string,to,match,any,name,param,used,value,holders,a,set,of,value,holder,objects,that,have,already,been,used,in,the,current,resolution,process,and,should,therefore,not,be,returned,again,return,the,value,holder,for,the,argument,or,code,null,if,none,found;nullable,public,value,holder,get,generic,argument,value,nullable,class,required,type,nullable,string,required,name,nullable,set,value,holder,used,value,holders,for,value,holder,value,holder,this,generic,argument,values,if,used,value,holders,null,used,value,holders,contains,value,holder,continue,if,value,holder,get,name,null,equals,required,name,required,name,null,value,holder,get,name,equals,required,name,continue,if,value,holder,get,type,null,required,type,null,class,utils,matches,type,name,required,type,value,holder,get,type,continue,if,required,type,null,value,holder,get,type,null,value,holder,get,name,null,class,utils,is,assignable,value,required,type,value,holder,get,value,continue,return,value,holder,return,null
ConstructorArgumentValues -> @Nullable 	public ValueHolder getGenericArgumentValue(@Nullable Class<?> requiredType, @Nullable String requiredName, @Nullable Set<ValueHolder> usedValueHolders);1532981251;Look for the next generic argument value that matches the given type,_ignoring argument values that have already been used in the current_resolution process._@param requiredType the type to match (can be {@code null} to find_an arbitrary next generic argument value)_@param requiredName the name to match (can be {@code null} to not_match argument values by name, or empty String to match any name)_@param usedValueHolders a Set of ValueHolder objects that have already been used_in the current resolution process and should therefore not be returned again_@return the ValueHolder for the argument, or {@code null} if none found;@Nullable_	public ValueHolder getGenericArgumentValue(@Nullable Class<?> requiredType, @Nullable String requiredName, @Nullable Set<ValueHolder> usedValueHolders) {_		for (ValueHolder valueHolder : this.genericArgumentValues) {_			if (usedValueHolders != null && usedValueHolders.contains(valueHolder)) {_				continue__			}_			if (valueHolder.getName() != null && !"".equals(requiredName) &&_					(requiredName == null || !valueHolder.getName().equals(requiredName))) {_				continue__			}_			if (valueHolder.getType() != null &&_					(requiredType == null || !ClassUtils.matchesTypeName(requiredType, valueHolder.getType()))) {_				continue__			}_			if (requiredType != null && valueHolder.getType() == null && valueHolder.getName() == null &&_					!ClassUtils.isAssignableValue(requiredType, valueHolder.getValue())) {_				continue__			}_			return valueHolder__		}_		return null__	};look,for,the,next,generic,argument,value,that,matches,the,given,type,ignoring,argument,values,that,have,already,been,used,in,the,current,resolution,process,param,required,type,the,type,to,match,can,be,code,null,to,find,an,arbitrary,next,generic,argument,value,param,required,name,the,name,to,match,can,be,code,null,to,not,match,argument,values,by,name,or,empty,string,to,match,any,name,param,used,value,holders,a,set,of,value,holder,objects,that,have,already,been,used,in,the,current,resolution,process,and,should,therefore,not,be,returned,again,return,the,value,holder,for,the,argument,or,code,null,if,none,found;nullable,public,value,holder,get,generic,argument,value,nullable,class,required,type,nullable,string,required,name,nullable,set,value,holder,used,value,holders,for,value,holder,value,holder,this,generic,argument,values,if,used,value,holders,null,used,value,holders,contains,value,holder,continue,if,value,holder,get,name,null,equals,required,name,required,name,null,value,holder,get,name,equals,required,name,continue,if,value,holder,get,type,null,required,type,null,class,utils,matches,type,name,required,type,value,holder,get,type,continue,if,required,type,null,value,holder,get,type,null,value,holder,get,name,null,class,utils,is,assignable,value,required,type,value,holder,get,value,continue,return,value,holder,return,null
ConstructorArgumentValues -> @Nullable 	public ValueHolder getGenericArgumentValue(@Nullable Class<?> requiredType, @Nullable String requiredName, @Nullable Set<ValueHolder> usedValueHolders);1549554785;Look for the next generic argument value that matches the given type,_ignoring argument values that have already been used in the current_resolution process._@param requiredType the type to match (can be {@code null} to find_an arbitrary next generic argument value)_@param requiredName the name to match (can be {@code null} to not_match argument values by name, or empty String to match any name)_@param usedValueHolders a Set of ValueHolder objects that have already been used_in the current resolution process and should therefore not be returned again_@return the ValueHolder for the argument, or {@code null} if none found;@Nullable_	public ValueHolder getGenericArgumentValue(@Nullable Class<?> requiredType, @Nullable String requiredName, @Nullable Set<ValueHolder> usedValueHolders) {_		for (ValueHolder valueHolder : this.genericArgumentValues) {_			if (usedValueHolders != null && usedValueHolders.contains(valueHolder)) {_				continue__			}_			if (valueHolder.getName() != null && !"".equals(requiredName) &&_					(requiredName == null || !valueHolder.getName().equals(requiredName))) {_				continue__			}_			if (valueHolder.getType() != null &&_					(requiredType == null || !ClassUtils.matchesTypeName(requiredType, valueHolder.getType()))) {_				continue__			}_			if (requiredType != null && valueHolder.getType() == null && valueHolder.getName() == null &&_					!ClassUtils.isAssignableValue(requiredType, valueHolder.getValue())) {_				continue__			}_			return valueHolder__		}_		return null__	};look,for,the,next,generic,argument,value,that,matches,the,given,type,ignoring,argument,values,that,have,already,been,used,in,the,current,resolution,process,param,required,type,the,type,to,match,can,be,code,null,to,find,an,arbitrary,next,generic,argument,value,param,required,name,the,name,to,match,can,be,code,null,to,not,match,argument,values,by,name,or,empty,string,to,match,any,name,param,used,value,holders,a,set,of,value,holder,objects,that,have,already,been,used,in,the,current,resolution,process,and,should,therefore,not,be,returned,again,return,the,value,holder,for,the,argument,or,code,null,if,none,found;nullable,public,value,holder,get,generic,argument,value,nullable,class,required,type,nullable,string,required,name,nullable,set,value,holder,used,value,holders,for,value,holder,value,holder,this,generic,argument,values,if,used,value,holders,null,used,value,holders,contains,value,holder,continue,if,value,holder,get,name,null,equals,required,name,required,name,null,value,holder,get,name,equals,required,name,continue,if,value,holder,get,type,null,required,type,null,class,utils,matches,type,name,required,type,value,holder,get,type,continue,if,required,type,null,value,holder,get,type,null,value,holder,get,name,null,class,utils,is,assignable,value,required,type,value,holder,get,value,continue,return,value,holder,return,null
ConstructorArgumentValues -> public void addIndexedArgumentValue(int index, @Nullable Object value);1496837955;Add an argument value for the given index in the constructor argument list._@param index the index in the constructor argument list_@param value the argument value;public void addIndexedArgumentValue(int index, @Nullable Object value) {_		addIndexedArgumentValue(index, new ValueHolder(value))__	};add,an,argument,value,for,the,given,index,in,the,constructor,argument,list,param,index,the,index,in,the,constructor,argument,list,param,value,the,argument,value;public,void,add,indexed,argument,value,int,index,nullable,object,value,add,indexed,argument,value,index,new,value,holder,value
ConstructorArgumentValues -> public void addIndexedArgumentValue(int index, @Nullable Object value);1497250713;Add an argument value for the given index in the constructor argument list._@param index the index in the constructor argument list_@param value the argument value;public void addIndexedArgumentValue(int index, @Nullable Object value) {_		addIndexedArgumentValue(index, new ValueHolder(value))__	};add,an,argument,value,for,the,given,index,in,the,constructor,argument,list,param,index,the,index,in,the,constructor,argument,list,param,value,the,argument,value;public,void,add,indexed,argument,value,int,index,nullable,object,value,add,indexed,argument,value,index,new,value,holder,value
ConstructorArgumentValues -> public void addIndexedArgumentValue(int index, @Nullable Object value);1498780456;Add an argument value for the given index in the constructor argument list._@param index the index in the constructor argument list_@param value the argument value;public void addIndexedArgumentValue(int index, @Nullable Object value) {_		addIndexedArgumentValue(index, new ValueHolder(value))__	};add,an,argument,value,for,the,given,index,in,the,constructor,argument,list,param,index,the,index,in,the,constructor,argument,list,param,value,the,argument,value;public,void,add,indexed,argument,value,int,index,nullable,object,value,add,indexed,argument,value,index,new,value,holder,value
ConstructorArgumentValues -> public void addIndexedArgumentValue(int index, @Nullable Object value);1500448076;Add an argument value for the given index in the constructor argument list._@param index the index in the constructor argument list_@param value the argument value;public void addIndexedArgumentValue(int index, @Nullable Object value) {_		addIndexedArgumentValue(index, new ValueHolder(value))__	};add,an,argument,value,for,the,given,index,in,the,constructor,argument,list,param,index,the,index,in,the,constructor,argument,list,param,value,the,argument,value;public,void,add,indexed,argument,value,int,index,nullable,object,value,add,indexed,argument,value,index,new,value,holder,value
ConstructorArgumentValues -> public void addIndexedArgumentValue(int index, @Nullable Object value);1531945062;Add an argument value for the given index in the constructor argument list._@param index the index in the constructor argument list_@param value the argument value;public void addIndexedArgumentValue(int index, @Nullable Object value) {_		addIndexedArgumentValue(index, new ValueHolder(value))__	};add,an,argument,value,for,the,given,index,in,the,constructor,argument,list,param,index,the,index,in,the,constructor,argument,list,param,value,the,argument,value;public,void,add,indexed,argument,value,int,index,nullable,object,value,add,indexed,argument,value,index,new,value,holder,value
ConstructorArgumentValues -> public void addIndexedArgumentValue(int index, @Nullable Object value);1532981251;Add an argument value for the given index in the constructor argument list._@param index the index in the constructor argument list_@param value the argument value;public void addIndexedArgumentValue(int index, @Nullable Object value) {_		addIndexedArgumentValue(index, new ValueHolder(value))__	};add,an,argument,value,for,the,given,index,in,the,constructor,argument,list,param,index,the,index,in,the,constructor,argument,list,param,value,the,argument,value;public,void,add,indexed,argument,value,int,index,nullable,object,value,add,indexed,argument,value,index,new,value,holder,value
ConstructorArgumentValues -> public void addIndexedArgumentValue(int index, @Nullable Object value);1549554785;Add an argument value for the given index in the constructor argument list._@param index the index in the constructor argument list_@param value the argument value;public void addIndexedArgumentValue(int index, @Nullable Object value) {_		addIndexedArgumentValue(index, new ValueHolder(value))__	};add,an,argument,value,for,the,given,index,in,the,constructor,argument,list,param,index,the,index,in,the,constructor,argument,list,param,value,the,argument,value;public,void,add,indexed,argument,value,int,index,nullable,object,value,add,indexed,argument,value,index,new,value,holder,value
ConstructorArgumentValues -> ValueHolder -> public String getName();1328020251;Return the name of the constructor argument.;public String getName() {_			return this.name__		};return,the,name,of,the,constructor,argument;public,string,get,name,return,this,name
ConstructorArgumentValues -> ValueHolder -> public String getName();1356735495;Return the name of the constructor argument.;public String getName() {_			return this.name__		};return,the,name,of,the,constructor,argument;public,string,get,name,return,this,name
ConstructorArgumentValues -> ValueHolder -> public String getName();1357119239;Return the name of the constructor argument.;public String getName() {_			return this.name__		};return,the,name,of,the,constructor,argument;public,string,get,name,return,this,name
ConstructorArgumentValues -> ValueHolder -> public String getName();1368482696;Return the name of the constructor argument.;public String getName() {_			return this.name__		};return,the,name,of,the,constructor,argument;public,string,get,name,return,this,name
ConstructorArgumentValues -> ValueHolder -> public String getName();1382789137;Return the name of the constructor argument.;public String getName() {_			return this.name__		};return,the,name,of,the,constructor,argument;public,string,get,name,return,this,name
ConstructorArgumentValues -> ValueHolder -> public String getName();1458323493;Return the name of the constructor argument.;public String getName() {_			return this.name__		};return,the,name,of,the,constructor,argument;public,string,get,name,return,this,name
ConstructorArgumentValues -> ValueHolder -> public String getName();1467730834;Return the name of the constructor argument.;public String getName() {_			return this.name__		};return,the,name,of,the,constructor,argument;public,string,get,name,return,this,name
ConstructorArgumentValues -> ValueHolder -> public String getName();1495868221;Return the name of the constructor argument.;public String getName() {_			return this.name__		};return,the,name,of,the,constructor,argument;public,string,get,name,return,this,name
ConstructorArgumentValues -> ValueHolder -> public String getName();1496259743;Return the name of the constructor argument.;public String getName() {_			return this.name__		};return,the,name,of,the,constructor,argument;public,string,get,name,return,this,name
ConstructorArgumentValues -> public ConstructorArgumentValues();1328020251;Create a new empty ConstructorArgumentValues object.;public ConstructorArgumentValues() {_	};create,a,new,empty,constructor,argument,values,object;public,constructor,argument,values
ConstructorArgumentValues -> public ConstructorArgumentValues();1356735495;Create a new empty ConstructorArgumentValues object.;public ConstructorArgumentValues() {_	};create,a,new,empty,constructor,argument,values,object;public,constructor,argument,values
ConstructorArgumentValues -> public ConstructorArgumentValues();1357119239;Create a new empty ConstructorArgumentValues object.;public ConstructorArgumentValues() {_	};create,a,new,empty,constructor,argument,values,object;public,constructor,argument,values
ConstructorArgumentValues -> public ConstructorArgumentValues();1368482696;Create a new empty ConstructorArgumentValues object.;public ConstructorArgumentValues() {_	};create,a,new,empty,constructor,argument,values,object;public,constructor,argument,values
ConstructorArgumentValues -> public ConstructorArgumentValues();1382789137;Create a new empty ConstructorArgumentValues object.;public ConstructorArgumentValues() {_	};create,a,new,empty,constructor,argument,values,object;public,constructor,argument,values
ConstructorArgumentValues -> public ConstructorArgumentValues();1458323493;Create a new empty ConstructorArgumentValues object.;public ConstructorArgumentValues() {_	};create,a,new,empty,constructor,argument,values,object;public,constructor,argument,values
ConstructorArgumentValues -> public ConstructorArgumentValues();1467730834;Create a new empty ConstructorArgumentValues object.;public ConstructorArgumentValues() {_	};create,a,new,empty,constructor,argument,values,object;public,constructor,argument,values
ConstructorArgumentValues -> public ConstructorArgumentValues();1495868221;Create a new empty ConstructorArgumentValues object.;public ConstructorArgumentValues() {_	};create,a,new,empty,constructor,argument,values,object;public,constructor,argument,values
ConstructorArgumentValues -> public ConstructorArgumentValues();1496259743;Create a new empty ConstructorArgumentValues object.;public ConstructorArgumentValues() {_	};create,a,new,empty,constructor,argument,values,object;public,constructor,argument,values
ConstructorArgumentValues -> public ConstructorArgumentValues();1496837955;Create a new empty ConstructorArgumentValues object.;public ConstructorArgumentValues() {_	};create,a,new,empty,constructor,argument,values,object;public,constructor,argument,values
ConstructorArgumentValues -> public ConstructorArgumentValues();1497250713;Create a new empty ConstructorArgumentValues object.;public ConstructorArgumentValues() {_	};create,a,new,empty,constructor,argument,values,object;public,constructor,argument,values
ConstructorArgumentValues -> public ConstructorArgumentValues();1498780456;Create a new empty ConstructorArgumentValues object.;public ConstructorArgumentValues() {_	};create,a,new,empty,constructor,argument,values,object;public,constructor,argument,values
ConstructorArgumentValues -> public ConstructorArgumentValues();1500448076;Create a new empty ConstructorArgumentValues object.;public ConstructorArgumentValues() {_	};create,a,new,empty,constructor,argument,values,object;public,constructor,argument,values
ConstructorArgumentValues -> public ConstructorArgumentValues();1531945062;Create a new empty ConstructorArgumentValues object.;public ConstructorArgumentValues() {_	};create,a,new,empty,constructor,argument,values,object;public,constructor,argument,values
ConstructorArgumentValues -> public ConstructorArgumentValues();1532981251;Create a new empty ConstructorArgumentValues object.;public ConstructorArgumentValues() {_	};create,a,new,empty,constructor,argument,values,object;public,constructor,argument,values
ConstructorArgumentValues -> public ConstructorArgumentValues();1549554785;Create a new empty ConstructorArgumentValues object.;public ConstructorArgumentValues() {_	};create,a,new,empty,constructor,argument,values,object;public,constructor,argument,values
ConstructorArgumentValues -> ValueHolder -> public synchronized void setConvertedValue(@Nullable Object value);1500448076;Set the converted value of the constructor argument,_after processed type conversion.;public synchronized void setConvertedValue(@Nullable Object value) {_			this.converted = (value != null)__			this.convertedValue = value__		};set,the,converted,value,of,the,constructor,argument,after,processed,type,conversion;public,synchronized,void,set,converted,value,nullable,object,value,this,converted,value,null,this,converted,value,value
ConstructorArgumentValues -> ValueHolder -> public synchronized void setConvertedValue(@Nullable Object value);1531945062;Set the converted value of the constructor argument,_after processed type conversion.;public synchronized void setConvertedValue(@Nullable Object value) {_			this.converted = (value != null)__			this.convertedValue = value__		};set,the,converted,value,of,the,constructor,argument,after,processed,type,conversion;public,synchronized,void,set,converted,value,nullable,object,value,this,converted,value,null,this,converted,value,value
ConstructorArgumentValues -> ValueHolder -> public synchronized void setConvertedValue(@Nullable Object value);1532981251;Set the converted value of the constructor argument,_after processed type conversion.;public synchronized void setConvertedValue(@Nullable Object value) {_			this.converted = (value != null)__			this.convertedValue = value__		};set,the,converted,value,of,the,constructor,argument,after,processed,type,conversion;public,synchronized,void,set,converted,value,nullable,object,value,this,converted,value,null,this,converted,value,value
ConstructorArgumentValues -> ValueHolder -> public synchronized void setConvertedValue(@Nullable Object value);1549554785;Set the converted value of the constructor argument,_after processed type conversion.;public synchronized void setConvertedValue(@Nullable Object value) {_			this.converted = (value != null)__			this.convertedValue = value__		};set,the,converted,value,of,the,constructor,argument,after,processed,type,conversion;public,synchronized,void,set,converted,value,nullable,object,value,this,converted,value,null,this,converted,value,value
ConstructorArgumentValues -> public Map<Integer, ValueHolder> getIndexedArgumentValues();1328020251;Return the map of indexed argument values._@return unmodifiable Map with Integer index as key and ValueHolder as value_@see ValueHolder;public Map<Integer, ValueHolder> getIndexedArgumentValues() {_		return Collections.unmodifiableMap(this.indexedArgumentValues)__	};return,the,map,of,indexed,argument,values,return,unmodifiable,map,with,integer,index,as,key,and,value,holder,as,value,see,value,holder;public,map,integer,value,holder,get,indexed,argument,values,return,collections,unmodifiable,map,this,indexed,argument,values
ConstructorArgumentValues -> public Map<Integer, ValueHolder> getIndexedArgumentValues();1356735495;Return the map of indexed argument values._@return unmodifiable Map with Integer index as key and ValueHolder as value_@see ValueHolder;public Map<Integer, ValueHolder> getIndexedArgumentValues() {_		return Collections.unmodifiableMap(this.indexedArgumentValues)__	};return,the,map,of,indexed,argument,values,return,unmodifiable,map,with,integer,index,as,key,and,value,holder,as,value,see,value,holder;public,map,integer,value,holder,get,indexed,argument,values,return,collections,unmodifiable,map,this,indexed,argument,values
ConstructorArgumentValues -> public Map<Integer, ValueHolder> getIndexedArgumentValues();1357119239;Return the map of indexed argument values._@return unmodifiable Map with Integer index as key and ValueHolder as value_@see ValueHolder;public Map<Integer, ValueHolder> getIndexedArgumentValues() {_		return Collections.unmodifiableMap(this.indexedArgumentValues)__	};return,the,map,of,indexed,argument,values,return,unmodifiable,map,with,integer,index,as,key,and,value,holder,as,value,see,value,holder;public,map,integer,value,holder,get,indexed,argument,values,return,collections,unmodifiable,map,this,indexed,argument,values
ConstructorArgumentValues -> public Map<Integer, ValueHolder> getIndexedArgumentValues();1368482696;Return the map of indexed argument values._@return unmodifiable Map with Integer index as key and ValueHolder as value_@see ValueHolder;public Map<Integer, ValueHolder> getIndexedArgumentValues() {_		return Collections.unmodifiableMap(this.indexedArgumentValues)__	};return,the,map,of,indexed,argument,values,return,unmodifiable,map,with,integer,index,as,key,and,value,holder,as,value,see,value,holder;public,map,integer,value,holder,get,indexed,argument,values,return,collections,unmodifiable,map,this,indexed,argument,values
ConstructorArgumentValues -> public Map<Integer, ValueHolder> getIndexedArgumentValues();1382789137;Return the map of indexed argument values._@return unmodifiable Map with Integer index as key and ValueHolder as value_@see ValueHolder;public Map<Integer, ValueHolder> getIndexedArgumentValues() {_		return Collections.unmodifiableMap(this.indexedArgumentValues)__	};return,the,map,of,indexed,argument,values,return,unmodifiable,map,with,integer,index,as,key,and,value,holder,as,value,see,value,holder;public,map,integer,value,holder,get,indexed,argument,values,return,collections,unmodifiable,map,this,indexed,argument,values
ConstructorArgumentValues -> public Map<Integer, ValueHolder> getIndexedArgumentValues();1458323493;Return the map of indexed argument values._@return unmodifiable Map with Integer index as key and ValueHolder as value_@see ValueHolder;public Map<Integer, ValueHolder> getIndexedArgumentValues() {_		return Collections.unmodifiableMap(this.indexedArgumentValues)__	};return,the,map,of,indexed,argument,values,return,unmodifiable,map,with,integer,index,as,key,and,value,holder,as,value,see,value,holder;public,map,integer,value,holder,get,indexed,argument,values,return,collections,unmodifiable,map,this,indexed,argument,values
ConstructorArgumentValues -> public Map<Integer, ValueHolder> getIndexedArgumentValues();1467730834;Return the map of indexed argument values._@return unmodifiable Map with Integer index as key and ValueHolder as value_@see ValueHolder;public Map<Integer, ValueHolder> getIndexedArgumentValues() {_		return Collections.unmodifiableMap(this.indexedArgumentValues)__	};return,the,map,of,indexed,argument,values,return,unmodifiable,map,with,integer,index,as,key,and,value,holder,as,value,see,value,holder;public,map,integer,value,holder,get,indexed,argument,values,return,collections,unmodifiable,map,this,indexed,argument,values
ConstructorArgumentValues -> public Map<Integer, ValueHolder> getIndexedArgumentValues();1495868221;Return the map of indexed argument values._@return unmodifiable Map with Integer index as key and ValueHolder as value_@see ValueHolder;public Map<Integer, ValueHolder> getIndexedArgumentValues() {_		return Collections.unmodifiableMap(this.indexedArgumentValues)__	};return,the,map,of,indexed,argument,values,return,unmodifiable,map,with,integer,index,as,key,and,value,holder,as,value,see,value,holder;public,map,integer,value,holder,get,indexed,argument,values,return,collections,unmodifiable,map,this,indexed,argument,values
ConstructorArgumentValues -> public Map<Integer, ValueHolder> getIndexedArgumentValues();1496259743;Return the map of indexed argument values._@return unmodifiable Map with Integer index as key and ValueHolder as value_@see ValueHolder;public Map<Integer, ValueHolder> getIndexedArgumentValues() {_		return Collections.unmodifiableMap(this.indexedArgumentValues)__	};return,the,map,of,indexed,argument,values,return,unmodifiable,map,with,integer,index,as,key,and,value,holder,as,value,see,value,holder;public,map,integer,value,holder,get,indexed,argument,values,return,collections,unmodifiable,map,this,indexed,argument,values
ConstructorArgumentValues -> public Map<Integer, ValueHolder> getIndexedArgumentValues();1496837955;Return the map of indexed argument values._@return unmodifiable Map with Integer index as key and ValueHolder as value_@see ValueHolder;public Map<Integer, ValueHolder> getIndexedArgumentValues() {_		return Collections.unmodifiableMap(this.indexedArgumentValues)__	};return,the,map,of,indexed,argument,values,return,unmodifiable,map,with,integer,index,as,key,and,value,holder,as,value,see,value,holder;public,map,integer,value,holder,get,indexed,argument,values,return,collections,unmodifiable,map,this,indexed,argument,values
ConstructorArgumentValues -> public Map<Integer, ValueHolder> getIndexedArgumentValues();1497250713;Return the map of indexed argument values._@return unmodifiable Map with Integer index as key and ValueHolder as value_@see ValueHolder;public Map<Integer, ValueHolder> getIndexedArgumentValues() {_		return Collections.unmodifiableMap(this.indexedArgumentValues)__	};return,the,map,of,indexed,argument,values,return,unmodifiable,map,with,integer,index,as,key,and,value,holder,as,value,see,value,holder;public,map,integer,value,holder,get,indexed,argument,values,return,collections,unmodifiable,map,this,indexed,argument,values
ConstructorArgumentValues -> public Map<Integer, ValueHolder> getIndexedArgumentValues();1498780456;Return the map of indexed argument values._@return unmodifiable Map with Integer index as key and ValueHolder as value_@see ValueHolder;public Map<Integer, ValueHolder> getIndexedArgumentValues() {_		return Collections.unmodifiableMap(this.indexedArgumentValues)__	};return,the,map,of,indexed,argument,values,return,unmodifiable,map,with,integer,index,as,key,and,value,holder,as,value,see,value,holder;public,map,integer,value,holder,get,indexed,argument,values,return,collections,unmodifiable,map,this,indexed,argument,values
ConstructorArgumentValues -> public Map<Integer, ValueHolder> getIndexedArgumentValues();1500448076;Return the map of indexed argument values._@return unmodifiable Map with Integer index as key and ValueHolder as value_@see ValueHolder;public Map<Integer, ValueHolder> getIndexedArgumentValues() {_		return Collections.unmodifiableMap(this.indexedArgumentValues)__	};return,the,map,of,indexed,argument,values,return,unmodifiable,map,with,integer,index,as,key,and,value,holder,as,value,see,value,holder;public,map,integer,value,holder,get,indexed,argument,values,return,collections,unmodifiable,map,this,indexed,argument,values
ConstructorArgumentValues -> public Map<Integer, ValueHolder> getIndexedArgumentValues();1531945062;Return the map of indexed argument values._@return unmodifiable Map with Integer index as key and ValueHolder as value_@see ValueHolder;public Map<Integer, ValueHolder> getIndexedArgumentValues() {_		return Collections.unmodifiableMap(this.indexedArgumentValues)__	};return,the,map,of,indexed,argument,values,return,unmodifiable,map,with,integer,index,as,key,and,value,holder,as,value,see,value,holder;public,map,integer,value,holder,get,indexed,argument,values,return,collections,unmodifiable,map,this,indexed,argument,values
ConstructorArgumentValues -> public Map<Integer, ValueHolder> getIndexedArgumentValues();1532981251;Return the map of indexed argument values._@return unmodifiable Map with Integer index as key and ValueHolder as value_@see ValueHolder;public Map<Integer, ValueHolder> getIndexedArgumentValues() {_		return Collections.unmodifiableMap(this.indexedArgumentValues)__	};return,the,map,of,indexed,argument,values,return,unmodifiable,map,with,integer,index,as,key,and,value,holder,as,value,see,value,holder;public,map,integer,value,holder,get,indexed,argument,values,return,collections,unmodifiable,map,this,indexed,argument,values
ConstructorArgumentValues -> public Map<Integer, ValueHolder> getIndexedArgumentValues();1549554785;Return the map of indexed argument values._@return unmodifiable Map with Integer index as key and ValueHolder as value_@see ValueHolder;public Map<Integer, ValueHolder> getIndexedArgumentValues() {_		return Collections.unmodifiableMap(this.indexedArgumentValues)__	};return,the,map,of,indexed,argument,values,return,unmodifiable,map,with,integer,index,as,key,and,value,holder,as,value,see,value,holder;public,map,integer,value,holder,get,indexed,argument,values,return,collections,unmodifiable,map,this,indexed,argument,values
ConstructorArgumentValues -> ValueHolder -> public void setSource(@Nullable Object source);1496837955;Set the configuration source {@code Object} for this metadata element._<p>The exact type of the object will depend on the configuration mechanism used.;public void setSource(@Nullable Object source) {_			this.source = source__		};set,the,configuration,source,code,object,for,this,metadata,element,p,the,exact,type,of,the,object,will,depend,on,the,configuration,mechanism,used;public,void,set,source,nullable,object,source,this,source,source
ConstructorArgumentValues -> ValueHolder -> public void setSource(@Nullable Object source);1497250713;Set the configuration source {@code Object} for this metadata element._<p>The exact type of the object will depend on the configuration mechanism used.;public void setSource(@Nullable Object source) {_			this.source = source__		};set,the,configuration,source,code,object,for,this,metadata,element,p,the,exact,type,of,the,object,will,depend,on,the,configuration,mechanism,used;public,void,set,source,nullable,object,source,this,source,source
ConstructorArgumentValues -> ValueHolder -> public void setSource(@Nullable Object source);1498780456;Set the configuration source {@code Object} for this metadata element._<p>The exact type of the object will depend on the configuration mechanism used.;public void setSource(@Nullable Object source) {_			this.source = source__		};set,the,configuration,source,code,object,for,this,metadata,element,p,the,exact,type,of,the,object,will,depend,on,the,configuration,mechanism,used;public,void,set,source,nullable,object,source,this,source,source
ConstructorArgumentValues -> ValueHolder -> public void setSource(@Nullable Object source);1500448076;Set the configuration source {@code Object} for this metadata element._<p>The exact type of the object will depend on the configuration mechanism used.;public void setSource(@Nullable Object source) {_			this.source = source__		};set,the,configuration,source,code,object,for,this,metadata,element,p,the,exact,type,of,the,object,will,depend,on,the,configuration,mechanism,used;public,void,set,source,nullable,object,source,this,source,source
ConstructorArgumentValues -> ValueHolder -> public void setSource(@Nullable Object source);1531945062;Set the configuration source {@code Object} for this metadata element._<p>The exact type of the object will depend on the configuration mechanism used.;public void setSource(@Nullable Object source) {_			this.source = source__		};set,the,configuration,source,code,object,for,this,metadata,element,p,the,exact,type,of,the,object,will,depend,on,the,configuration,mechanism,used;public,void,set,source,nullable,object,source,this,source,source
ConstructorArgumentValues -> ValueHolder -> public void setSource(@Nullable Object source);1532981251;Set the configuration source {@code Object} for this metadata element._<p>The exact type of the object will depend on the configuration mechanism used.;public void setSource(@Nullable Object source) {_			this.source = source__		};set,the,configuration,source,code,object,for,this,metadata,element,p,the,exact,type,of,the,object,will,depend,on,the,configuration,mechanism,used;public,void,set,source,nullable,object,source,this,source,source
ConstructorArgumentValues -> ValueHolder -> public void setSource(@Nullable Object source);1549554785;Set the configuration source {@code Object} for this metadata element._<p>The exact type of the object will depend on the configuration mechanism used.;public void setSource(@Nullable Object source) {_			this.source = source__		};set,the,configuration,source,code,object,for,this,metadata,element,p,the,exact,type,of,the,object,will,depend,on,the,configuration,mechanism,used;public,void,set,source,nullable,object,source,this,source,source
ConstructorArgumentValues -> public boolean isEmpty();1328020251;Return if this holder does not contain any argument values,_neither indexed ones nor generic ones.;public boolean isEmpty() {_		return (this.indexedArgumentValues.isEmpty() && this.genericArgumentValues.isEmpty())__	};return,if,this,holder,does,not,contain,any,argument,values,neither,indexed,ones,nor,generic,ones;public,boolean,is,empty,return,this,indexed,argument,values,is,empty,this,generic,argument,values,is,empty
ConstructorArgumentValues -> public boolean isEmpty();1356735495;Return if this holder does not contain any argument values,_neither indexed ones nor generic ones.;public boolean isEmpty() {_		return (this.indexedArgumentValues.isEmpty() && this.genericArgumentValues.isEmpty())__	};return,if,this,holder,does,not,contain,any,argument,values,neither,indexed,ones,nor,generic,ones;public,boolean,is,empty,return,this,indexed,argument,values,is,empty,this,generic,argument,values,is,empty
ConstructorArgumentValues -> public boolean isEmpty();1357119239;Return if this holder does not contain any argument values,_neither indexed ones nor generic ones.;public boolean isEmpty() {_		return (this.indexedArgumentValues.isEmpty() && this.genericArgumentValues.isEmpty())__	};return,if,this,holder,does,not,contain,any,argument,values,neither,indexed,ones,nor,generic,ones;public,boolean,is,empty,return,this,indexed,argument,values,is,empty,this,generic,argument,values,is,empty
ConstructorArgumentValues -> public boolean isEmpty();1368482696;Return if this holder does not contain any argument values,_neither indexed ones nor generic ones.;public boolean isEmpty() {_		return (this.indexedArgumentValues.isEmpty() && this.genericArgumentValues.isEmpty())__	};return,if,this,holder,does,not,contain,any,argument,values,neither,indexed,ones,nor,generic,ones;public,boolean,is,empty,return,this,indexed,argument,values,is,empty,this,generic,argument,values,is,empty
ConstructorArgumentValues -> public boolean isEmpty();1382789137;Return if this holder does not contain any argument values,_neither indexed ones nor generic ones.;public boolean isEmpty() {_		return (this.indexedArgumentValues.isEmpty() && this.genericArgumentValues.isEmpty())__	};return,if,this,holder,does,not,contain,any,argument,values,neither,indexed,ones,nor,generic,ones;public,boolean,is,empty,return,this,indexed,argument,values,is,empty,this,generic,argument,values,is,empty
ConstructorArgumentValues -> public boolean isEmpty();1458323493;Return if this holder does not contain any argument values,_neither indexed ones nor generic ones.;public boolean isEmpty() {_		return (this.indexedArgumentValues.isEmpty() && this.genericArgumentValues.isEmpty())__	};return,if,this,holder,does,not,contain,any,argument,values,neither,indexed,ones,nor,generic,ones;public,boolean,is,empty,return,this,indexed,argument,values,is,empty,this,generic,argument,values,is,empty
ConstructorArgumentValues -> public boolean isEmpty();1467730834;Return if this holder does not contain any argument values,_neither indexed ones nor generic ones.;public boolean isEmpty() {_		return (this.indexedArgumentValues.isEmpty() && this.genericArgumentValues.isEmpty())__	};return,if,this,holder,does,not,contain,any,argument,values,neither,indexed,ones,nor,generic,ones;public,boolean,is,empty,return,this,indexed,argument,values,is,empty,this,generic,argument,values,is,empty
ConstructorArgumentValues -> public boolean isEmpty();1495868221;Return if this holder does not contain any argument values,_neither indexed ones nor generic ones.;public boolean isEmpty() {_		return (this.indexedArgumentValues.isEmpty() && this.genericArgumentValues.isEmpty())__	};return,if,this,holder,does,not,contain,any,argument,values,neither,indexed,ones,nor,generic,ones;public,boolean,is,empty,return,this,indexed,argument,values,is,empty,this,generic,argument,values,is,empty
ConstructorArgumentValues -> public boolean isEmpty();1496259743;Return if this holder does not contain any argument values,_neither indexed ones nor generic ones.;public boolean isEmpty() {_		return (this.indexedArgumentValues.isEmpty() && this.genericArgumentValues.isEmpty())__	};return,if,this,holder,does,not,contain,any,argument,values,neither,indexed,ones,nor,generic,ones;public,boolean,is,empty,return,this,indexed,argument,values,is,empty,this,generic,argument,values,is,empty
ConstructorArgumentValues -> public boolean isEmpty();1496837955;Return if this holder does not contain any argument values,_neither indexed ones nor generic ones.;public boolean isEmpty() {_		return (this.indexedArgumentValues.isEmpty() && this.genericArgumentValues.isEmpty())__	};return,if,this,holder,does,not,contain,any,argument,values,neither,indexed,ones,nor,generic,ones;public,boolean,is,empty,return,this,indexed,argument,values,is,empty,this,generic,argument,values,is,empty
ConstructorArgumentValues -> public boolean isEmpty();1497250713;Return if this holder does not contain any argument values,_neither indexed ones nor generic ones.;public boolean isEmpty() {_		return (this.indexedArgumentValues.isEmpty() && this.genericArgumentValues.isEmpty())__	};return,if,this,holder,does,not,contain,any,argument,values,neither,indexed,ones,nor,generic,ones;public,boolean,is,empty,return,this,indexed,argument,values,is,empty,this,generic,argument,values,is,empty
ConstructorArgumentValues -> public boolean isEmpty();1498780456;Return if this holder does not contain any argument values,_neither indexed ones nor generic ones.;public boolean isEmpty() {_		return (this.indexedArgumentValues.isEmpty() && this.genericArgumentValues.isEmpty())__	};return,if,this,holder,does,not,contain,any,argument,values,neither,indexed,ones,nor,generic,ones;public,boolean,is,empty,return,this,indexed,argument,values,is,empty,this,generic,argument,values,is,empty
ConstructorArgumentValues -> public boolean isEmpty();1500448076;Return if this holder does not contain any argument values,_neither indexed ones nor generic ones.;public boolean isEmpty() {_		return (this.indexedArgumentValues.isEmpty() && this.genericArgumentValues.isEmpty())__	};return,if,this,holder,does,not,contain,any,argument,values,neither,indexed,ones,nor,generic,ones;public,boolean,is,empty,return,this,indexed,argument,values,is,empty,this,generic,argument,values,is,empty
ConstructorArgumentValues -> public boolean isEmpty();1531945062;Return if this holder does not contain any argument values,_neither indexed ones nor generic ones.;public boolean isEmpty() {_		return (this.indexedArgumentValues.isEmpty() && this.genericArgumentValues.isEmpty())__	};return,if,this,holder,does,not,contain,any,argument,values,neither,indexed,ones,nor,generic,ones;public,boolean,is,empty,return,this,indexed,argument,values,is,empty,this,generic,argument,values,is,empty
ConstructorArgumentValues -> public boolean isEmpty();1532981251;Return if this holder does not contain any argument values,_neither indexed ones nor generic ones.;public boolean isEmpty() {_		return (this.indexedArgumentValues.isEmpty() && this.genericArgumentValues.isEmpty())__	};return,if,this,holder,does,not,contain,any,argument,values,neither,indexed,ones,nor,generic,ones;public,boolean,is,empty,return,this,indexed,argument,values,is,empty,this,generic,argument,values,is,empty
ConstructorArgumentValues -> public boolean isEmpty();1549554785;Return if this holder does not contain any argument values,_neither indexed ones nor generic ones.;public boolean isEmpty() {_		return (this.indexedArgumentValues.isEmpty() && this.genericArgumentValues.isEmpty())__	};return,if,this,holder,does,not,contain,any,argument,values,neither,indexed,ones,nor,generic,ones;public,boolean,is,empty,return,this,indexed,argument,values,is,empty,this,generic,argument,values,is,empty
ConstructorArgumentValues -> public ValueHolder getArgumentValue(int index, Class requiredType, String requiredName, Set<ValueHolder> usedValueHolders);1328020251;Look for an argument value that either corresponds to the given index_in the constructor argument list or generically matches by type._@param index the index in the constructor argument list_@param requiredType the type to match (can be <code>null</code> to find_an untyped argument value)_@param usedValueHolders a Set of ValueHolder objects that have already_been used in the current resolution process and should therefore not_be returned again (allowing to return the next generic argument match_in case of multiple generic argument values of the same type)_@return the ValueHolder for the argument, or <code>null</code> if none set;public ValueHolder getArgumentValue(int index, Class requiredType, String requiredName, Set<ValueHolder> usedValueHolders) {_		Assert.isTrue(index >= 0, "Index must not be negative")__		ValueHolder valueHolder = getIndexedArgumentValue(index, requiredType, requiredName)__		if (valueHolder == null) {_			valueHolder = getGenericArgumentValue(requiredType, requiredName, usedValueHolders)__		}_		return valueHolder__	};look,for,an,argument,value,that,either,corresponds,to,the,given,index,in,the,constructor,argument,list,or,generically,matches,by,type,param,index,the,index,in,the,constructor,argument,list,param,required,type,the,type,to,match,can,be,code,null,code,to,find,an,untyped,argument,value,param,used,value,holders,a,set,of,value,holder,objects,that,have,already,been,used,in,the,current,resolution,process,and,should,therefore,not,be,returned,again,allowing,to,return,the,next,generic,argument,match,in,case,of,multiple,generic,argument,values,of,the,same,type,return,the,value,holder,for,the,argument,or,code,null,code,if,none,set;public,value,holder,get,argument,value,int,index,class,required,type,string,required,name,set,value,holder,used,value,holders,assert,is,true,index,0,index,must,not,be,negative,value,holder,value,holder,get,indexed,argument,value,index,required,type,required,name,if,value,holder,null,value,holder,get,generic,argument,value,required,type,required,name,used,value,holders,return,value,holder
ConstructorArgumentValues -> public ValueHolder getArgumentValue(int index, Class requiredType, String requiredName, Set<ValueHolder> usedValueHolders);1356735495;Look for an argument value that either corresponds to the given index_in the constructor argument list or generically matches by type._@param index the index in the constructor argument list_@param requiredType the type to match (can be {@code null} to find_an untyped argument value)_@param usedValueHolders a Set of ValueHolder objects that have already_been used in the current resolution process and should therefore not_be returned again (allowing to return the next generic argument match_in case of multiple generic argument values of the same type)_@return the ValueHolder for the argument, or {@code null} if none set;public ValueHolder getArgumentValue(int index, Class requiredType, String requiredName, Set<ValueHolder> usedValueHolders) {_		Assert.isTrue(index >= 0, "Index must not be negative")__		ValueHolder valueHolder = getIndexedArgumentValue(index, requiredType, requiredName)__		if (valueHolder == null) {_			valueHolder = getGenericArgumentValue(requiredType, requiredName, usedValueHolders)__		}_		return valueHolder__	};look,for,an,argument,value,that,either,corresponds,to,the,given,index,in,the,constructor,argument,list,or,generically,matches,by,type,param,index,the,index,in,the,constructor,argument,list,param,required,type,the,type,to,match,can,be,code,null,to,find,an,untyped,argument,value,param,used,value,holders,a,set,of,value,holder,objects,that,have,already,been,used,in,the,current,resolution,process,and,should,therefore,not,be,returned,again,allowing,to,return,the,next,generic,argument,match,in,case,of,multiple,generic,argument,values,of,the,same,type,return,the,value,holder,for,the,argument,or,code,null,if,none,set;public,value,holder,get,argument,value,int,index,class,required,type,string,required,name,set,value,holder,used,value,holders,assert,is,true,index,0,index,must,not,be,negative,value,holder,value,holder,get,indexed,argument,value,index,required,type,required,name,if,value,holder,null,value,holder,get,generic,argument,value,required,type,required,name,used,value,holders,return,value,holder
ConstructorArgumentValues -> public ValueHolder getArgumentValue(int index, Class requiredType, String requiredName, Set<ValueHolder> usedValueHolders);1357119239;Look for an argument value that either corresponds to the given index_in the constructor argument list or generically matches by type._@param index the index in the constructor argument list_@param requiredType the type to match (can be {@code null} to find_an untyped argument value)_@param usedValueHolders a Set of ValueHolder objects that have already_been used in the current resolution process and should therefore not_be returned again (allowing to return the next generic argument match_in case of multiple generic argument values of the same type)_@return the ValueHolder for the argument, or {@code null} if none set;public ValueHolder getArgumentValue(int index, Class requiredType, String requiredName, Set<ValueHolder> usedValueHolders) {_		Assert.isTrue(index >= 0, "Index must not be negative")__		ValueHolder valueHolder = getIndexedArgumentValue(index, requiredType, requiredName)__		if (valueHolder == null) {_			valueHolder = getGenericArgumentValue(requiredType, requiredName, usedValueHolders)__		}_		return valueHolder__	};look,for,an,argument,value,that,either,corresponds,to,the,given,index,in,the,constructor,argument,list,or,generically,matches,by,type,param,index,the,index,in,the,constructor,argument,list,param,required,type,the,type,to,match,can,be,code,null,to,find,an,untyped,argument,value,param,used,value,holders,a,set,of,value,holder,objects,that,have,already,been,used,in,the,current,resolution,process,and,should,therefore,not,be,returned,again,allowing,to,return,the,next,generic,argument,match,in,case,of,multiple,generic,argument,values,of,the,same,type,return,the,value,holder,for,the,argument,or,code,null,if,none,set;public,value,holder,get,argument,value,int,index,class,required,type,string,required,name,set,value,holder,used,value,holders,assert,is,true,index,0,index,must,not,be,negative,value,holder,value,holder,get,indexed,argument,value,index,required,type,required,name,if,value,holder,null,value,holder,get,generic,argument,value,required,type,required,name,used,value,holders,return,value,holder
ConstructorArgumentValues -> public ValueHolder getArgumentValue(int index, Class requiredType, String requiredName, Set<ValueHolder> usedValueHolders);1368482696;Look for an argument value that either corresponds to the given index_in the constructor argument list or generically matches by type._@param index the index in the constructor argument list_@param requiredType the type to match (can be {@code null} to find_an untyped argument value)_@param usedValueHolders a Set of ValueHolder objects that have already_been used in the current resolution process and should therefore not_be returned again (allowing to return the next generic argument match_in case of multiple generic argument values of the same type)_@return the ValueHolder for the argument, or {@code null} if none set;public ValueHolder getArgumentValue(int index, Class requiredType, String requiredName, Set<ValueHolder> usedValueHolders) {_		Assert.isTrue(index >= 0, "Index must not be negative")__		ValueHolder valueHolder = getIndexedArgumentValue(index, requiredType, requiredName)__		if (valueHolder == null) {_			valueHolder = getGenericArgumentValue(requiredType, requiredName, usedValueHolders)__		}_		return valueHolder__	};look,for,an,argument,value,that,either,corresponds,to,the,given,index,in,the,constructor,argument,list,or,generically,matches,by,type,param,index,the,index,in,the,constructor,argument,list,param,required,type,the,type,to,match,can,be,code,null,to,find,an,untyped,argument,value,param,used,value,holders,a,set,of,value,holder,objects,that,have,already,been,used,in,the,current,resolution,process,and,should,therefore,not,be,returned,again,allowing,to,return,the,next,generic,argument,match,in,case,of,multiple,generic,argument,values,of,the,same,type,return,the,value,holder,for,the,argument,or,code,null,if,none,set;public,value,holder,get,argument,value,int,index,class,required,type,string,required,name,set,value,holder,used,value,holders,assert,is,true,index,0,index,must,not,be,negative,value,holder,value,holder,get,indexed,argument,value,index,required,type,required,name,if,value,holder,null,value,holder,get,generic,argument,value,required,type,required,name,used,value,holders,return,value,holder
ConstructorArgumentValues -> public ValueHolder getIndexedArgumentValue(int index, Class requiredType, String requiredName);1328020251;Get argument value for the given index in the constructor argument list._@param index the index in the constructor argument list_@param requiredType the type to match (can be <code>null</code> to match_untyped values only)_@param requiredName the type to match (can be <code>null</code> to match_unnamed values only)_@return the ValueHolder for the argument, or <code>null</code> if none set;public ValueHolder getIndexedArgumentValue(int index, Class requiredType, String requiredName) {_		Assert.isTrue(index >= 0, "Index must not be negative")__		ValueHolder valueHolder = this.indexedArgumentValues.get(index)__		if (valueHolder != null &&_				(valueHolder.getType() == null ||_						(requiredType != null && ClassUtils.matchesTypeName(requiredType, valueHolder.getType()))) &&_				(valueHolder.getName() == null ||_						(requiredName != null && requiredName.equals(valueHolder.getName())))) {_			return valueHolder__		}_		return null__	};get,argument,value,for,the,given,index,in,the,constructor,argument,list,param,index,the,index,in,the,constructor,argument,list,param,required,type,the,type,to,match,can,be,code,null,code,to,match,untyped,values,only,param,required,name,the,type,to,match,can,be,code,null,code,to,match,unnamed,values,only,return,the,value,holder,for,the,argument,or,code,null,code,if,none,set;public,value,holder,get,indexed,argument,value,int,index,class,required,type,string,required,name,assert,is,true,index,0,index,must,not,be,negative,value,holder,value,holder,this,indexed,argument,values,get,index,if,value,holder,null,value,holder,get,type,null,required,type,null,class,utils,matches,type,name,required,type,value,holder,get,type,value,holder,get,name,null,required,name,null,required,name,equals,value,holder,get,name,return,value,holder,return,null
ConstructorArgumentValues -> public ValueHolder getIndexedArgumentValue(int index, Class requiredType, String requiredName);1356735495;Get argument value for the given index in the constructor argument list._@param index the index in the constructor argument list_@param requiredType the type to match (can be {@code null} to match_untyped values only)_@param requiredName the type to match (can be {@code null} to match_unnamed values only)_@return the ValueHolder for the argument, or {@code null} if none set;public ValueHolder getIndexedArgumentValue(int index, Class requiredType, String requiredName) {_		Assert.isTrue(index >= 0, "Index must not be negative")__		ValueHolder valueHolder = this.indexedArgumentValues.get(index)__		if (valueHolder != null &&_				(valueHolder.getType() == null ||_						(requiredType != null && ClassUtils.matchesTypeName(requiredType, valueHolder.getType()))) &&_				(valueHolder.getName() == null ||_						(requiredName != null && requiredName.equals(valueHolder.getName())))) {_			return valueHolder__		}_		return null__	};get,argument,value,for,the,given,index,in,the,constructor,argument,list,param,index,the,index,in,the,constructor,argument,list,param,required,type,the,type,to,match,can,be,code,null,to,match,untyped,values,only,param,required,name,the,type,to,match,can,be,code,null,to,match,unnamed,values,only,return,the,value,holder,for,the,argument,or,code,null,if,none,set;public,value,holder,get,indexed,argument,value,int,index,class,required,type,string,required,name,assert,is,true,index,0,index,must,not,be,negative,value,holder,value,holder,this,indexed,argument,values,get,index,if,value,holder,null,value,holder,get,type,null,required,type,null,class,utils,matches,type,name,required,type,value,holder,get,type,value,holder,get,name,null,required,name,null,required,name,equals,value,holder,get,name,return,value,holder,return,null
ConstructorArgumentValues -> public ValueHolder getIndexedArgumentValue(int index, Class requiredType, String requiredName);1357119239;Get argument value for the given index in the constructor argument list._@param index the index in the constructor argument list_@param requiredType the type to match (can be {@code null} to match_untyped values only)_@param requiredName the type to match (can be {@code null} to match_unnamed values only)_@return the ValueHolder for the argument, or {@code null} if none set;public ValueHolder getIndexedArgumentValue(int index, Class requiredType, String requiredName) {_		Assert.isTrue(index >= 0, "Index must not be negative")__		ValueHolder valueHolder = this.indexedArgumentValues.get(index)__		if (valueHolder != null &&_				(valueHolder.getType() == null ||_						(requiredType != null && ClassUtils.matchesTypeName(requiredType, valueHolder.getType()))) &&_				(valueHolder.getName() == null ||_						(requiredName != null && requiredName.equals(valueHolder.getName())))) {_			return valueHolder__		}_		return null__	};get,argument,value,for,the,given,index,in,the,constructor,argument,list,param,index,the,index,in,the,constructor,argument,list,param,required,type,the,type,to,match,can,be,code,null,to,match,untyped,values,only,param,required,name,the,type,to,match,can,be,code,null,to,match,unnamed,values,only,return,the,value,holder,for,the,argument,or,code,null,if,none,set;public,value,holder,get,indexed,argument,value,int,index,class,required,type,string,required,name,assert,is,true,index,0,index,must,not,be,negative,value,holder,value,holder,this,indexed,argument,values,get,index,if,value,holder,null,value,holder,get,type,null,required,type,null,class,utils,matches,type,name,required,type,value,holder,get,type,value,holder,get,name,null,required,name,null,required,name,equals,value,holder,get,name,return,value,holder,return,null
ConstructorArgumentValues -> public ValueHolder getIndexedArgumentValue(int index, Class requiredType, String requiredName);1368482696;Get argument value for the given index in the constructor argument list._@param index the index in the constructor argument list_@param requiredType the type to match (can be {@code null} to match_untyped values only)_@param requiredName the type to match (can be {@code null} to match_unnamed values only)_@return the ValueHolder for the argument, or {@code null} if none set;public ValueHolder getIndexedArgumentValue(int index, Class requiredType, String requiredName) {_		Assert.isTrue(index >= 0, "Index must not be negative")__		ValueHolder valueHolder = this.indexedArgumentValues.get(index)__		if (valueHolder != null &&_				(valueHolder.getType() == null ||_						(requiredType != null && ClassUtils.matchesTypeName(requiredType, valueHolder.getType()))) &&_				(valueHolder.getName() == null ||_						(requiredName != null && requiredName.equals(valueHolder.getName())))) {_			return valueHolder__		}_		return null__	};get,argument,value,for,the,given,index,in,the,constructor,argument,list,param,index,the,index,in,the,constructor,argument,list,param,required,type,the,type,to,match,can,be,code,null,to,match,untyped,values,only,param,required,name,the,type,to,match,can,be,code,null,to,match,unnamed,values,only,return,the,value,holder,for,the,argument,or,code,null,if,none,set;public,value,holder,get,indexed,argument,value,int,index,class,required,type,string,required,name,assert,is,true,index,0,index,must,not,be,negative,value,holder,value,holder,this,indexed,argument,values,get,index,if,value,holder,null,value,holder,get,type,null,required,type,null,class,utils,matches,type,name,required,type,value,holder,get,type,value,holder,get,name,null,required,name,null,required,name,equals,value,holder,get,name,return,value,holder,return,null
ConstructorArgumentValues -> public ValueHolder getGenericArgumentValue(Class requiredType, String requiredName, Set<ValueHolder> usedValueHolders);1328020251;Look for the next generic argument value that matches the given type,_ignoring argument values that have already been used in the current_resolution process._@param requiredType the type to match (can be <code>null</code> to find_an arbitrary next generic argument value)_@param requiredName the name to match (can be <code>null</code> to not_match argument values by name)_@param usedValueHolders a Set of ValueHolder objects that have already been used_in the current resolution process and should therefore not be returned again_@return the ValueHolder for the argument, or <code>null</code> if none found;public ValueHolder getGenericArgumentValue(Class requiredType, String requiredName, Set<ValueHolder> usedValueHolders) {_		for (ValueHolder valueHolder : this.genericArgumentValues) {_			if (usedValueHolders != null && usedValueHolders.contains(valueHolder)) {_				continue__			}_			if (valueHolder.getName() != null &&_					(requiredName == null || !valueHolder.getName().equals(requiredName))) {_				continue__			}_			if (valueHolder.getType() != null &&_					(requiredType == null || !ClassUtils.matchesTypeName(requiredType, valueHolder.getType()))) {_				continue__			}_			if (requiredType != null && valueHolder.getType() == null && valueHolder.getName() == null &&_					!ClassUtils.isAssignableValue(requiredType, valueHolder.getValue())) {_				continue__			}_			return valueHolder__		}_		return null__	};look,for,the,next,generic,argument,value,that,matches,the,given,type,ignoring,argument,values,that,have,already,been,used,in,the,current,resolution,process,param,required,type,the,type,to,match,can,be,code,null,code,to,find,an,arbitrary,next,generic,argument,value,param,required,name,the,name,to,match,can,be,code,null,code,to,not,match,argument,values,by,name,param,used,value,holders,a,set,of,value,holder,objects,that,have,already,been,used,in,the,current,resolution,process,and,should,therefore,not,be,returned,again,return,the,value,holder,for,the,argument,or,code,null,code,if,none,found;public,value,holder,get,generic,argument,value,class,required,type,string,required,name,set,value,holder,used,value,holders,for,value,holder,value,holder,this,generic,argument,values,if,used,value,holders,null,used,value,holders,contains,value,holder,continue,if,value,holder,get,name,null,required,name,null,value,holder,get,name,equals,required,name,continue,if,value,holder,get,type,null,required,type,null,class,utils,matches,type,name,required,type,value,holder,get,type,continue,if,required,type,null,value,holder,get,type,null,value,holder,get,name,null,class,utils,is,assignable,value,required,type,value,holder,get,value,continue,return,value,holder,return,null
ConstructorArgumentValues -> public ValueHolder getGenericArgumentValue(Class requiredType, String requiredName, Set<ValueHolder> usedValueHolders);1356735495;Look for the next generic argument value that matches the given type,_ignoring argument values that have already been used in the current_resolution process._@param requiredType the type to match (can be {@code null} to find_an arbitrary next generic argument value)_@param requiredName the name to match (can be {@code null} to not_match argument values by name)_@param usedValueHolders a Set of ValueHolder objects that have already been used_in the current resolution process and should therefore not be returned again_@return the ValueHolder for the argument, or {@code null} if none found;public ValueHolder getGenericArgumentValue(Class requiredType, String requiredName, Set<ValueHolder> usedValueHolders) {_		for (ValueHolder valueHolder : this.genericArgumentValues) {_			if (usedValueHolders != null && usedValueHolders.contains(valueHolder)) {_				continue__			}_			if (valueHolder.getName() != null &&_					(requiredName == null || !valueHolder.getName().equals(requiredName))) {_				continue__			}_			if (valueHolder.getType() != null &&_					(requiredType == null || !ClassUtils.matchesTypeName(requiredType, valueHolder.getType()))) {_				continue__			}_			if (requiredType != null && valueHolder.getType() == null && valueHolder.getName() == null &&_					!ClassUtils.isAssignableValue(requiredType, valueHolder.getValue())) {_				continue__			}_			return valueHolder__		}_		return null__	};look,for,the,next,generic,argument,value,that,matches,the,given,type,ignoring,argument,values,that,have,already,been,used,in,the,current,resolution,process,param,required,type,the,type,to,match,can,be,code,null,to,find,an,arbitrary,next,generic,argument,value,param,required,name,the,name,to,match,can,be,code,null,to,not,match,argument,values,by,name,param,used,value,holders,a,set,of,value,holder,objects,that,have,already,been,used,in,the,current,resolution,process,and,should,therefore,not,be,returned,again,return,the,value,holder,for,the,argument,or,code,null,if,none,found;public,value,holder,get,generic,argument,value,class,required,type,string,required,name,set,value,holder,used,value,holders,for,value,holder,value,holder,this,generic,argument,values,if,used,value,holders,null,used,value,holders,contains,value,holder,continue,if,value,holder,get,name,null,required,name,null,value,holder,get,name,equals,required,name,continue,if,value,holder,get,type,null,required,type,null,class,utils,matches,type,name,required,type,value,holder,get,type,continue,if,required,type,null,value,holder,get,type,null,value,holder,get,name,null,class,utils,is,assignable,value,required,type,value,holder,get,value,continue,return,value,holder,return,null
ConstructorArgumentValues -> public ValueHolder getGenericArgumentValue(Class requiredType, String requiredName, Set<ValueHolder> usedValueHolders);1357119239;Look for the next generic argument value that matches the given type,_ignoring argument values that have already been used in the current_resolution process._@param requiredType the type to match (can be {@code null} to find_an arbitrary next generic argument value)_@param requiredName the name to match (can be {@code null} to not_match argument values by name)_@param usedValueHolders a Set of ValueHolder objects that have already been used_in the current resolution process and should therefore not be returned again_@return the ValueHolder for the argument, or {@code null} if none found;public ValueHolder getGenericArgumentValue(Class requiredType, String requiredName, Set<ValueHolder> usedValueHolders) {_		for (ValueHolder valueHolder : this.genericArgumentValues) {_			if (usedValueHolders != null && usedValueHolders.contains(valueHolder)) {_				continue__			}_			if (valueHolder.getName() != null &&_					(requiredName == null || !valueHolder.getName().equals(requiredName))) {_				continue__			}_			if (valueHolder.getType() != null &&_					(requiredType == null || !ClassUtils.matchesTypeName(requiredType, valueHolder.getType()))) {_				continue__			}_			if (requiredType != null && valueHolder.getType() == null && valueHolder.getName() == null &&_					!ClassUtils.isAssignableValue(requiredType, valueHolder.getValue())) {_				continue__			}_			return valueHolder__		}_		return null__	};look,for,the,next,generic,argument,value,that,matches,the,given,type,ignoring,argument,values,that,have,already,been,used,in,the,current,resolution,process,param,required,type,the,type,to,match,can,be,code,null,to,find,an,arbitrary,next,generic,argument,value,param,required,name,the,name,to,match,can,be,code,null,to,not,match,argument,values,by,name,param,used,value,holders,a,set,of,value,holder,objects,that,have,already,been,used,in,the,current,resolution,process,and,should,therefore,not,be,returned,again,return,the,value,holder,for,the,argument,or,code,null,if,none,found;public,value,holder,get,generic,argument,value,class,required,type,string,required,name,set,value,holder,used,value,holders,for,value,holder,value,holder,this,generic,argument,values,if,used,value,holders,null,used,value,holders,contains,value,holder,continue,if,value,holder,get,name,null,required,name,null,value,holder,get,name,equals,required,name,continue,if,value,holder,get,type,null,required,type,null,class,utils,matches,type,name,required,type,value,holder,get,type,continue,if,required,type,null,value,holder,get,type,null,value,holder,get,name,null,class,utils,is,assignable,value,required,type,value,holder,get,value,continue,return,value,holder,return,null
ConstructorArgumentValues -> public ValueHolder getGenericArgumentValue(Class requiredType, String requiredName, Set<ValueHolder> usedValueHolders);1368482696;Look for the next generic argument value that matches the given type,_ignoring argument values that have already been used in the current_resolution process._@param requiredType the type to match (can be {@code null} to find_an arbitrary next generic argument value)_@param requiredName the name to match (can be {@code null} to not_match argument values by name)_@param usedValueHolders a Set of ValueHolder objects that have already been used_in the current resolution process and should therefore not be returned again_@return the ValueHolder for the argument, or {@code null} if none found;public ValueHolder getGenericArgumentValue(Class requiredType, String requiredName, Set<ValueHolder> usedValueHolders) {_		for (ValueHolder valueHolder : this.genericArgumentValues) {_			if (usedValueHolders != null && usedValueHolders.contains(valueHolder)) {_				continue__			}_			if (valueHolder.getName() != null &&_					(requiredName == null || !valueHolder.getName().equals(requiredName))) {_				continue__			}_			if (valueHolder.getType() != null &&_					(requiredType == null || !ClassUtils.matchesTypeName(requiredType, valueHolder.getType()))) {_				continue__			}_			if (requiredType != null && valueHolder.getType() == null && valueHolder.getName() == null &&_					!ClassUtils.isAssignableValue(requiredType, valueHolder.getValue())) {_				continue__			}_			return valueHolder__		}_		return null__	};look,for,the,next,generic,argument,value,that,matches,the,given,type,ignoring,argument,values,that,have,already,been,used,in,the,current,resolution,process,param,required,type,the,type,to,match,can,be,code,null,to,find,an,arbitrary,next,generic,argument,value,param,required,name,the,name,to,match,can,be,code,null,to,not,match,argument,values,by,name,param,used,value,holders,a,set,of,value,holder,objects,that,have,already,been,used,in,the,current,resolution,process,and,should,therefore,not,be,returned,again,return,the,value,holder,for,the,argument,or,code,null,if,none,found;public,value,holder,get,generic,argument,value,class,required,type,string,required,name,set,value,holder,used,value,holders,for,value,holder,value,holder,this,generic,argument,values,if,used,value,holders,null,used,value,holders,contains,value,holder,continue,if,value,holder,get,name,null,required,name,null,value,holder,get,name,equals,required,name,continue,if,value,holder,get,type,null,required,type,null,class,utils,matches,type,name,required,type,value,holder,get,type,continue,if,required,type,null,value,holder,get,type,null,value,holder,get,name,null,class,utils,is,assignable,value,required,type,value,holder,get,value,continue,return,value,holder,return,null
ConstructorArgumentValues -> public ConstructorArgumentValues(ConstructorArgumentValues original);1328020251;Deep copy constructor._@param original the ConstructorArgumentValues to copy;public ConstructorArgumentValues(ConstructorArgumentValues original) {_		addArgumentValues(original)__	};deep,copy,constructor,param,original,the,constructor,argument,values,to,copy;public,constructor,argument,values,constructor,argument,values,original,add,argument,values,original
ConstructorArgumentValues -> public ConstructorArgumentValues(ConstructorArgumentValues original);1356735495;Deep copy constructor._@param original the ConstructorArgumentValues to copy;public ConstructorArgumentValues(ConstructorArgumentValues original) {_		addArgumentValues(original)__	};deep,copy,constructor,param,original,the,constructor,argument,values,to,copy;public,constructor,argument,values,constructor,argument,values,original,add,argument,values,original
ConstructorArgumentValues -> public ConstructorArgumentValues(ConstructorArgumentValues original);1357119239;Deep copy constructor._@param original the ConstructorArgumentValues to copy;public ConstructorArgumentValues(ConstructorArgumentValues original) {_		addArgumentValues(original)__	};deep,copy,constructor,param,original,the,constructor,argument,values,to,copy;public,constructor,argument,values,constructor,argument,values,original,add,argument,values,original
ConstructorArgumentValues -> public ConstructorArgumentValues(ConstructorArgumentValues original);1368482696;Deep copy constructor._@param original the ConstructorArgumentValues to copy;public ConstructorArgumentValues(ConstructorArgumentValues original) {_		addArgumentValues(original)__	};deep,copy,constructor,param,original,the,constructor,argument,values,to,copy;public,constructor,argument,values,constructor,argument,values,original,add,argument,values,original
ConstructorArgumentValues -> public ConstructorArgumentValues(ConstructorArgumentValues original);1382789137;Deep copy constructor._@param original the ConstructorArgumentValues to copy;public ConstructorArgumentValues(ConstructorArgumentValues original) {_		addArgumentValues(original)__	};deep,copy,constructor,param,original,the,constructor,argument,values,to,copy;public,constructor,argument,values,constructor,argument,values,original,add,argument,values,original
ConstructorArgumentValues -> public ConstructorArgumentValues(ConstructorArgumentValues original);1458323493;Deep copy constructor._@param original the ConstructorArgumentValues to copy;public ConstructorArgumentValues(ConstructorArgumentValues original) {_		addArgumentValues(original)__	};deep,copy,constructor,param,original,the,constructor,argument,values,to,copy;public,constructor,argument,values,constructor,argument,values,original,add,argument,values,original
ConstructorArgumentValues -> public ConstructorArgumentValues(ConstructorArgumentValues original);1467730834;Deep copy constructor._@param original the ConstructorArgumentValues to copy;public ConstructorArgumentValues(ConstructorArgumentValues original) {_		addArgumentValues(original)__	};deep,copy,constructor,param,original,the,constructor,argument,values,to,copy;public,constructor,argument,values,constructor,argument,values,original,add,argument,values,original
ConstructorArgumentValues -> public ConstructorArgumentValues(ConstructorArgumentValues original);1495868221;Deep copy constructor._@param original the ConstructorArgumentValues to copy;public ConstructorArgumentValues(ConstructorArgumentValues original) {_		addArgumentValues(original)__	};deep,copy,constructor,param,original,the,constructor,argument,values,to,copy;public,constructor,argument,values,constructor,argument,values,original,add,argument,values,original
ConstructorArgumentValues -> public ConstructorArgumentValues(ConstructorArgumentValues original);1496259743;Deep copy constructor._@param original the ConstructorArgumentValues to copy;public ConstructorArgumentValues(ConstructorArgumentValues original) {_		addArgumentValues(original)__	};deep,copy,constructor,param,original,the,constructor,argument,values,to,copy;public,constructor,argument,values,constructor,argument,values,original,add,argument,values,original
ConstructorArgumentValues -> public ConstructorArgumentValues(ConstructorArgumentValues original);1496837955;Deep copy constructor._@param original the ConstructorArgumentValues to copy;public ConstructorArgumentValues(ConstructorArgumentValues original) {_		addArgumentValues(original)__	};deep,copy,constructor,param,original,the,constructor,argument,values,to,copy;public,constructor,argument,values,constructor,argument,values,original,add,argument,values,original
ConstructorArgumentValues -> public ConstructorArgumentValues(ConstructorArgumentValues original);1497250713;Deep copy constructor._@param original the ConstructorArgumentValues to copy;public ConstructorArgumentValues(ConstructorArgumentValues original) {_		addArgumentValues(original)__	};deep,copy,constructor,param,original,the,constructor,argument,values,to,copy;public,constructor,argument,values,constructor,argument,values,original,add,argument,values,original
ConstructorArgumentValues -> public ConstructorArgumentValues(ConstructorArgumentValues original);1498780456;Deep copy constructor._@param original the ConstructorArgumentValues to copy;public ConstructorArgumentValues(ConstructorArgumentValues original) {_		addArgumentValues(original)__	};deep,copy,constructor,param,original,the,constructor,argument,values,to,copy;public,constructor,argument,values,constructor,argument,values,original,add,argument,values,original
ConstructorArgumentValues -> public ConstructorArgumentValues(ConstructorArgumentValues original);1500448076;Deep copy constructor._@param original the ConstructorArgumentValues to copy;public ConstructorArgumentValues(ConstructorArgumentValues original) {_		addArgumentValues(original)__	};deep,copy,constructor,param,original,the,constructor,argument,values,to,copy;public,constructor,argument,values,constructor,argument,values,original,add,argument,values,original
ConstructorArgumentValues -> public ConstructorArgumentValues(ConstructorArgumentValues original);1531945062;Deep copy constructor._@param original the ConstructorArgumentValues to copy;public ConstructorArgumentValues(ConstructorArgumentValues original) {_		addArgumentValues(original)__	};deep,copy,constructor,param,original,the,constructor,argument,values,to,copy;public,constructor,argument,values,constructor,argument,values,original,add,argument,values,original
ConstructorArgumentValues -> public ConstructorArgumentValues(ConstructorArgumentValues original);1532981251;Deep copy constructor._@param original the ConstructorArgumentValues to copy;public ConstructorArgumentValues(ConstructorArgumentValues original) {_		addArgumentValues(original)__	};deep,copy,constructor,param,original,the,constructor,argument,values,to,copy;public,constructor,argument,values,constructor,argument,values,original,add,argument,values,original
ConstructorArgumentValues -> public ConstructorArgumentValues(ConstructorArgumentValues original);1549554785;Deep copy constructor._@param original the ConstructorArgumentValues to copy;public ConstructorArgumentValues(ConstructorArgumentValues original) {_		addArgumentValues(original)__	};deep,copy,constructor,param,original,the,constructor,argument,values,to,copy;public,constructor,argument,values,constructor,argument,values,original,add,argument,values,original
ConstructorArgumentValues -> @Nullable 	public ValueHolder getIndexedArgumentValue(int index, @Nullable Class<?> requiredType, @Nullable String requiredName);1495868221;Get argument value for the given index in the constructor argument list._@param index the index in the constructor argument list_@param requiredType the type to match (can be {@code null} to match_untyped values only)_@param requiredName the type to match (can be {@code null} to match_unnamed values only, or empty String to match any name)_@return the ValueHolder for the argument, or {@code null} if none set;@Nullable_	public ValueHolder getIndexedArgumentValue(int index, @Nullable Class<?> requiredType, @Nullable String requiredName) {_		Assert.isTrue(index >= 0, "Index must not be negative")__		ValueHolder valueHolder = this.indexedArgumentValues.get(index)__		if (valueHolder != null &&_				(valueHolder.getType() == null ||_						(requiredType != null && ClassUtils.matchesTypeName(requiredType, valueHolder.getType()))) &&_				(valueHolder.getName() == null || "".equals(requiredName) ||_						(requiredName != null && requiredName.equals(valueHolder.getName())))) {_			return valueHolder__		}_		return null__	};get,argument,value,for,the,given,index,in,the,constructor,argument,list,param,index,the,index,in,the,constructor,argument,list,param,required,type,the,type,to,match,can,be,code,null,to,match,untyped,values,only,param,required,name,the,type,to,match,can,be,code,null,to,match,unnamed,values,only,or,empty,string,to,match,any,name,return,the,value,holder,for,the,argument,or,code,null,if,none,set;nullable,public,value,holder,get,indexed,argument,value,int,index,nullable,class,required,type,nullable,string,required,name,assert,is,true,index,0,index,must,not,be,negative,value,holder,value,holder,this,indexed,argument,values,get,index,if,value,holder,null,value,holder,get,type,null,required,type,null,class,utils,matches,type,name,required,type,value,holder,get,type,value,holder,get,name,null,equals,required,name,required,name,null,required,name,equals,value,holder,get,name,return,value,holder,return,null
ConstructorArgumentValues -> @Nullable 	public ValueHolder getIndexedArgumentValue(int index, @Nullable Class<?> requiredType, @Nullable String requiredName);1496259743;Get argument value for the given index in the constructor argument list._@param index the index in the constructor argument list_@param requiredType the type to match (can be {@code null} to match_untyped values only)_@param requiredName the type to match (can be {@code null} to match_unnamed values only, or empty String to match any name)_@return the ValueHolder for the argument, or {@code null} if none set;@Nullable_	public ValueHolder getIndexedArgumentValue(int index, @Nullable Class<?> requiredType, @Nullable String requiredName) {_		Assert.isTrue(index >= 0, "Index must not be negative")__		ValueHolder valueHolder = this.indexedArgumentValues.get(index)__		if (valueHolder != null &&_				(valueHolder.getType() == null ||_						(requiredType != null && ClassUtils.matchesTypeName(requiredType, valueHolder.getType()))) &&_				(valueHolder.getName() == null || "".equals(requiredName) ||_						(requiredName != null && requiredName.equals(valueHolder.getName())))) {_			return valueHolder__		}_		return null__	};get,argument,value,for,the,given,index,in,the,constructor,argument,list,param,index,the,index,in,the,constructor,argument,list,param,required,type,the,type,to,match,can,be,code,null,to,match,untyped,values,only,param,required,name,the,type,to,match,can,be,code,null,to,match,unnamed,values,only,or,empty,string,to,match,any,name,return,the,value,holder,for,the,argument,or,code,null,if,none,set;nullable,public,value,holder,get,indexed,argument,value,int,index,nullable,class,required,type,nullable,string,required,name,assert,is,true,index,0,index,must,not,be,negative,value,holder,value,holder,this,indexed,argument,values,get,index,if,value,holder,null,value,holder,get,type,null,required,type,null,class,utils,matches,type,name,required,type,value,holder,get,type,value,holder,get,name,null,equals,required,name,required,name,null,required,name,equals,value,holder,get,name,return,value,holder,return,null
ConstructorArgumentValues -> @Nullable 	public ValueHolder getIndexedArgumentValue(int index, @Nullable Class<?> requiredType, @Nullable String requiredName);1496837955;Get argument value for the given index in the constructor argument list._@param index the index in the constructor argument list_@param requiredType the type to match (can be {@code null} to match_untyped values only)_@param requiredName the type to match (can be {@code null} to match_unnamed values only, or empty String to match any name)_@return the ValueHolder for the argument, or {@code null} if none set;@Nullable_	public ValueHolder getIndexedArgumentValue(int index, @Nullable Class<?> requiredType, @Nullable String requiredName) {_		Assert.isTrue(index >= 0, "Index must not be negative")__		ValueHolder valueHolder = this.indexedArgumentValues.get(index)__		if (valueHolder != null &&_				(valueHolder.getType() == null ||_						(requiredType != null && ClassUtils.matchesTypeName(requiredType, valueHolder.getType()))) &&_				(valueHolder.getName() == null || "".equals(requiredName) ||_						(requiredName != null && requiredName.equals(valueHolder.getName())))) {_			return valueHolder__		}_		return null__	};get,argument,value,for,the,given,index,in,the,constructor,argument,list,param,index,the,index,in,the,constructor,argument,list,param,required,type,the,type,to,match,can,be,code,null,to,match,untyped,values,only,param,required,name,the,type,to,match,can,be,code,null,to,match,unnamed,values,only,or,empty,string,to,match,any,name,return,the,value,holder,for,the,argument,or,code,null,if,none,set;nullable,public,value,holder,get,indexed,argument,value,int,index,nullable,class,required,type,nullable,string,required,name,assert,is,true,index,0,index,must,not,be,negative,value,holder,value,holder,this,indexed,argument,values,get,index,if,value,holder,null,value,holder,get,type,null,required,type,null,class,utils,matches,type,name,required,type,value,holder,get,type,value,holder,get,name,null,equals,required,name,required,name,null,required,name,equals,value,holder,get,name,return,value,holder,return,null
ConstructorArgumentValues -> @Nullable 	public ValueHolder getIndexedArgumentValue(int index, @Nullable Class<?> requiredType, @Nullable String requiredName);1497250713;Get argument value for the given index in the constructor argument list._@param index the index in the constructor argument list_@param requiredType the type to match (can be {@code null} to match_untyped values only)_@param requiredName the type to match (can be {@code null} to match_unnamed values only, or empty String to match any name)_@return the ValueHolder for the argument, or {@code null} if none set;@Nullable_	public ValueHolder getIndexedArgumentValue(int index, @Nullable Class<?> requiredType, @Nullable String requiredName) {_		Assert.isTrue(index >= 0, "Index must not be negative")__		ValueHolder valueHolder = this.indexedArgumentValues.get(index)__		if (valueHolder != null &&_				(valueHolder.getType() == null ||_						(requiredType != null && ClassUtils.matchesTypeName(requiredType, valueHolder.getType()))) &&_				(valueHolder.getName() == null || "".equals(requiredName) ||_						(requiredName != null && requiredName.equals(valueHolder.getName())))) {_			return valueHolder__		}_		return null__	};get,argument,value,for,the,given,index,in,the,constructor,argument,list,param,index,the,index,in,the,constructor,argument,list,param,required,type,the,type,to,match,can,be,code,null,to,match,untyped,values,only,param,required,name,the,type,to,match,can,be,code,null,to,match,unnamed,values,only,or,empty,string,to,match,any,name,return,the,value,holder,for,the,argument,or,code,null,if,none,set;nullable,public,value,holder,get,indexed,argument,value,int,index,nullable,class,required,type,nullable,string,required,name,assert,is,true,index,0,index,must,not,be,negative,value,holder,value,holder,this,indexed,argument,values,get,index,if,value,holder,null,value,holder,get,type,null,required,type,null,class,utils,matches,type,name,required,type,value,holder,get,type,value,holder,get,name,null,equals,required,name,required,name,null,required,name,equals,value,holder,get,name,return,value,holder,return,null
ConstructorArgumentValues -> @Nullable 	public ValueHolder getIndexedArgumentValue(int index, @Nullable Class<?> requiredType, @Nullable String requiredName);1498780456;Get argument value for the given index in the constructor argument list._@param index the index in the constructor argument list_@param requiredType the type to match (can be {@code null} to match_untyped values only)_@param requiredName the type to match (can be {@code null} to match_unnamed values only, or empty String to match any name)_@return the ValueHolder for the argument, or {@code null} if none set;@Nullable_	public ValueHolder getIndexedArgumentValue(int index, @Nullable Class<?> requiredType, @Nullable String requiredName) {_		Assert.isTrue(index >= 0, "Index must not be negative")__		ValueHolder valueHolder = this.indexedArgumentValues.get(index)__		if (valueHolder != null &&_				(valueHolder.getType() == null ||_						(requiredType != null && ClassUtils.matchesTypeName(requiredType, valueHolder.getType()))) &&_				(valueHolder.getName() == null || "".equals(requiredName) ||_						(requiredName != null && requiredName.equals(valueHolder.getName())))) {_			return valueHolder__		}_		return null__	};get,argument,value,for,the,given,index,in,the,constructor,argument,list,param,index,the,index,in,the,constructor,argument,list,param,required,type,the,type,to,match,can,be,code,null,to,match,untyped,values,only,param,required,name,the,type,to,match,can,be,code,null,to,match,unnamed,values,only,or,empty,string,to,match,any,name,return,the,value,holder,for,the,argument,or,code,null,if,none,set;nullable,public,value,holder,get,indexed,argument,value,int,index,nullable,class,required,type,nullable,string,required,name,assert,is,true,index,0,index,must,not,be,negative,value,holder,value,holder,this,indexed,argument,values,get,index,if,value,holder,null,value,holder,get,type,null,required,type,null,class,utils,matches,type,name,required,type,value,holder,get,type,value,holder,get,name,null,equals,required,name,required,name,null,required,name,equals,value,holder,get,name,return,value,holder,return,null
ConstructorArgumentValues -> @Nullable 	public ValueHolder getIndexedArgumentValue(int index, @Nullable Class<?> requiredType, @Nullable String requiredName);1500448076;Get argument value for the given index in the constructor argument list._@param index the index in the constructor argument list_@param requiredType the type to match (can be {@code null} to match_untyped values only)_@param requiredName the type to match (can be {@code null} to match_unnamed values only, or empty String to match any name)_@return the ValueHolder for the argument, or {@code null} if none set;@Nullable_	public ValueHolder getIndexedArgumentValue(int index, @Nullable Class<?> requiredType, @Nullable String requiredName) {_		Assert.isTrue(index >= 0, "Index must not be negative")__		ValueHolder valueHolder = this.indexedArgumentValues.get(index)__		if (valueHolder != null &&_				(valueHolder.getType() == null ||_						(requiredType != null && ClassUtils.matchesTypeName(requiredType, valueHolder.getType()))) &&_				(valueHolder.getName() == null || "".equals(requiredName) ||_						(requiredName != null && requiredName.equals(valueHolder.getName())))) {_			return valueHolder__		}_		return null__	};get,argument,value,for,the,given,index,in,the,constructor,argument,list,param,index,the,index,in,the,constructor,argument,list,param,required,type,the,type,to,match,can,be,code,null,to,match,untyped,values,only,param,required,name,the,type,to,match,can,be,code,null,to,match,unnamed,values,only,or,empty,string,to,match,any,name,return,the,value,holder,for,the,argument,or,code,null,if,none,set;nullable,public,value,holder,get,indexed,argument,value,int,index,nullable,class,required,type,nullable,string,required,name,assert,is,true,index,0,index,must,not,be,negative,value,holder,value,holder,this,indexed,argument,values,get,index,if,value,holder,null,value,holder,get,type,null,required,type,null,class,utils,matches,type,name,required,type,value,holder,get,type,value,holder,get,name,null,equals,required,name,required,name,null,required,name,equals,value,holder,get,name,return,value,holder,return,null
ConstructorArgumentValues -> @Nullable 	public ValueHolder getIndexedArgumentValue(int index, @Nullable Class<?> requiredType, @Nullable String requiredName);1531945062;Get argument value for the given index in the constructor argument list._@param index the index in the constructor argument list_@param requiredType the type to match (can be {@code null} to match_untyped values only)_@param requiredName the type to match (can be {@code null} to match_unnamed values only, or empty String to match any name)_@return the ValueHolder for the argument, or {@code null} if none set;@Nullable_	public ValueHolder getIndexedArgumentValue(int index, @Nullable Class<?> requiredType, @Nullable String requiredName) {_		Assert.isTrue(index >= 0, "Index must not be negative")__		ValueHolder valueHolder = this.indexedArgumentValues.get(index)__		if (valueHolder != null &&_				(valueHolder.getType() == null ||_						(requiredType != null && ClassUtils.matchesTypeName(requiredType, valueHolder.getType()))) &&_				(valueHolder.getName() == null || "".equals(requiredName) ||_						(requiredName != null && requiredName.equals(valueHolder.getName())))) {_			return valueHolder__		}_		return null__	};get,argument,value,for,the,given,index,in,the,constructor,argument,list,param,index,the,index,in,the,constructor,argument,list,param,required,type,the,type,to,match,can,be,code,null,to,match,untyped,values,only,param,required,name,the,type,to,match,can,be,code,null,to,match,unnamed,values,only,or,empty,string,to,match,any,name,return,the,value,holder,for,the,argument,or,code,null,if,none,set;nullable,public,value,holder,get,indexed,argument,value,int,index,nullable,class,required,type,nullable,string,required,name,assert,is,true,index,0,index,must,not,be,negative,value,holder,value,holder,this,indexed,argument,values,get,index,if,value,holder,null,value,holder,get,type,null,required,type,null,class,utils,matches,type,name,required,type,value,holder,get,type,value,holder,get,name,null,equals,required,name,required,name,null,required,name,equals,value,holder,get,name,return,value,holder,return,null
ConstructorArgumentValues -> @Nullable 	public ValueHolder getIndexedArgumentValue(int index, @Nullable Class<?> requiredType, @Nullable String requiredName);1532981251;Get argument value for the given index in the constructor argument list._@param index the index in the constructor argument list_@param requiredType the type to match (can be {@code null} to match_untyped values only)_@param requiredName the type to match (can be {@code null} to match_unnamed values only, or empty String to match any name)_@return the ValueHolder for the argument, or {@code null} if none set;@Nullable_	public ValueHolder getIndexedArgumentValue(int index, @Nullable Class<?> requiredType, @Nullable String requiredName) {_		Assert.isTrue(index >= 0, "Index must not be negative")__		ValueHolder valueHolder = this.indexedArgumentValues.get(index)__		if (valueHolder != null &&_				(valueHolder.getType() == null ||_						(requiredType != null && ClassUtils.matchesTypeName(requiredType, valueHolder.getType()))) &&_				(valueHolder.getName() == null || "".equals(requiredName) ||_						(requiredName != null && requiredName.equals(valueHolder.getName())))) {_			return valueHolder__		}_		return null__	};get,argument,value,for,the,given,index,in,the,constructor,argument,list,param,index,the,index,in,the,constructor,argument,list,param,required,type,the,type,to,match,can,be,code,null,to,match,untyped,values,only,param,required,name,the,type,to,match,can,be,code,null,to,match,unnamed,values,only,or,empty,string,to,match,any,name,return,the,value,holder,for,the,argument,or,code,null,if,none,set;nullable,public,value,holder,get,indexed,argument,value,int,index,nullable,class,required,type,nullable,string,required,name,assert,is,true,index,0,index,must,not,be,negative,value,holder,value,holder,this,indexed,argument,values,get,index,if,value,holder,null,value,holder,get,type,null,required,type,null,class,utils,matches,type,name,required,type,value,holder,get,type,value,holder,get,name,null,equals,required,name,required,name,null,required,name,equals,value,holder,get,name,return,value,holder,return,null
ConstructorArgumentValues -> @Nullable 	public ValueHolder getIndexedArgumentValue(int index, @Nullable Class<?> requiredType, @Nullable String requiredName);1549554785;Get argument value for the given index in the constructor argument list._@param index the index in the constructor argument list_@param requiredType the type to match (can be {@code null} to match_untyped values only)_@param requiredName the type to match (can be {@code null} to match_unnamed values only, or empty String to match any name)_@return the ValueHolder for the argument, or {@code null} if none set;@Nullable_	public ValueHolder getIndexedArgumentValue(int index, @Nullable Class<?> requiredType, @Nullable String requiredName) {_		Assert.isTrue(index >= 0, "Index must not be negative")__		ValueHolder valueHolder = this.indexedArgumentValues.get(index)__		if (valueHolder != null &&_				(valueHolder.getType() == null ||_						(requiredType != null && ClassUtils.matchesTypeName(requiredType, valueHolder.getType()))) &&_				(valueHolder.getName() == null || "".equals(requiredName) ||_						(requiredName != null && requiredName.equals(valueHolder.getName())))) {_			return valueHolder__		}_		return null__	};get,argument,value,for,the,given,index,in,the,constructor,argument,list,param,index,the,index,in,the,constructor,argument,list,param,required,type,the,type,to,match,can,be,code,null,to,match,untyped,values,only,param,required,name,the,type,to,match,can,be,code,null,to,match,unnamed,values,only,or,empty,string,to,match,any,name,return,the,value,holder,for,the,argument,or,code,null,if,none,set;nullable,public,value,holder,get,indexed,argument,value,int,index,nullable,class,required,type,nullable,string,required,name,assert,is,true,index,0,index,must,not,be,negative,value,holder,value,holder,this,indexed,argument,values,get,index,if,value,holder,null,value,holder,get,type,null,required,type,null,class,utils,matches,type,name,required,type,value,holder,get,type,value,holder,get,name,null,equals,required,name,required,name,null,required,name,equals,value,holder,get,name,return,value,holder,return,null
ConstructorArgumentValues -> ValueHolder -> public Object getValue();1328020251;Return the value for the constructor argument.;public Object getValue() {_			return this.value__		};return,the,value,for,the,constructor,argument;public,object,get,value,return,this,value
ConstructorArgumentValues -> ValueHolder -> public Object getValue();1356735495;Return the value for the constructor argument.;public Object getValue() {_			return this.value__		};return,the,value,for,the,constructor,argument;public,object,get,value,return,this,value
ConstructorArgumentValues -> ValueHolder -> public Object getValue();1357119239;Return the value for the constructor argument.;public Object getValue() {_			return this.value__		};return,the,value,for,the,constructor,argument;public,object,get,value,return,this,value
ConstructorArgumentValues -> ValueHolder -> public Object getValue();1368482696;Return the value for the constructor argument.;public Object getValue() {_			return this.value__		};return,the,value,for,the,constructor,argument;public,object,get,value,return,this,value
ConstructorArgumentValues -> ValueHolder -> public Object getValue();1382789137;Return the value for the constructor argument.;public Object getValue() {_			return this.value__		};return,the,value,for,the,constructor,argument;public,object,get,value,return,this,value
ConstructorArgumentValues -> ValueHolder -> public Object getValue();1458323493;Return the value for the constructor argument.;public Object getValue() {_			return this.value__		};return,the,value,for,the,constructor,argument;public,object,get,value,return,this,value
ConstructorArgumentValues -> ValueHolder -> public Object getValue();1467730834;Return the value for the constructor argument.;public Object getValue() {_			return this.value__		};return,the,value,for,the,constructor,argument;public,object,get,value,return,this,value
ConstructorArgumentValues -> ValueHolder -> public Object getValue();1495868221;Return the value for the constructor argument.;public Object getValue() {_			return this.value__		};return,the,value,for,the,constructor,argument;public,object,get,value,return,this,value
ConstructorArgumentValues -> ValueHolder -> public Object getValue();1496259743;Return the value for the constructor argument.;public Object getValue() {_			return this.value__		};return,the,value,for,the,constructor,argument;public,object,get,value,return,this,value
ConstructorArgumentValues -> public void addGenericArgumentValue(Object value, String type);1328020251;Add a generic argument value to be matched by type._<p>Note: A single generic argument value will just be used once,_rather than matched multiple times._@param value the argument value_@param type the type of the constructor argument;public void addGenericArgumentValue(Object value, String type) {_		this.genericArgumentValues.add(new ValueHolder(value, type))__	};add,a,generic,argument,value,to,be,matched,by,type,p,note,a,single,generic,argument,value,will,just,be,used,once,rather,than,matched,multiple,times,param,value,the,argument,value,param,type,the,type,of,the,constructor,argument;public,void,add,generic,argument,value,object,value,string,type,this,generic,argument,values,add,new,value,holder,value,type
ConstructorArgumentValues -> public void addGenericArgumentValue(Object value, String type);1356735495;Add a generic argument value to be matched by type._<p>Note: A single generic argument value will just be used once,_rather than matched multiple times._@param value the argument value_@param type the type of the constructor argument;public void addGenericArgumentValue(Object value, String type) {_		this.genericArgumentValues.add(new ValueHolder(value, type))__	};add,a,generic,argument,value,to,be,matched,by,type,p,note,a,single,generic,argument,value,will,just,be,used,once,rather,than,matched,multiple,times,param,value,the,argument,value,param,type,the,type,of,the,constructor,argument;public,void,add,generic,argument,value,object,value,string,type,this,generic,argument,values,add,new,value,holder,value,type
ConstructorArgumentValues -> public void addGenericArgumentValue(Object value, String type);1357119239;Add a generic argument value to be matched by type._<p>Note: A single generic argument value will just be used once,_rather than matched multiple times._@param value the argument value_@param type the type of the constructor argument;public void addGenericArgumentValue(Object value, String type) {_		this.genericArgumentValues.add(new ValueHolder(value, type))__	};add,a,generic,argument,value,to,be,matched,by,type,p,note,a,single,generic,argument,value,will,just,be,used,once,rather,than,matched,multiple,times,param,value,the,argument,value,param,type,the,type,of,the,constructor,argument;public,void,add,generic,argument,value,object,value,string,type,this,generic,argument,values,add,new,value,holder,value,type
ConstructorArgumentValues -> public void addGenericArgumentValue(Object value, String type);1368482696;Add a generic argument value to be matched by type._<p>Note: A single generic argument value will just be used once,_rather than matched multiple times._@param value the argument value_@param type the type of the constructor argument;public void addGenericArgumentValue(Object value, String type) {_		this.genericArgumentValues.add(new ValueHolder(value, type))__	};add,a,generic,argument,value,to,be,matched,by,type,p,note,a,single,generic,argument,value,will,just,be,used,once,rather,than,matched,multiple,times,param,value,the,argument,value,param,type,the,type,of,the,constructor,argument;public,void,add,generic,argument,value,object,value,string,type,this,generic,argument,values,add,new,value,holder,value,type
ConstructorArgumentValues -> public void addGenericArgumentValue(Object value, String type);1382789137;Add a generic argument value to be matched by type._<p>Note: A single generic argument value will just be used once,_rather than matched multiple times._@param value the argument value_@param type the type of the constructor argument;public void addGenericArgumentValue(Object value, String type) {_		this.genericArgumentValues.add(new ValueHolder(value, type))__	};add,a,generic,argument,value,to,be,matched,by,type,p,note,a,single,generic,argument,value,will,just,be,used,once,rather,than,matched,multiple,times,param,value,the,argument,value,param,type,the,type,of,the,constructor,argument;public,void,add,generic,argument,value,object,value,string,type,this,generic,argument,values,add,new,value,holder,value,type
ConstructorArgumentValues -> public void addGenericArgumentValue(Object value, String type);1458323493;Add a generic argument value to be matched by type._<p>Note: A single generic argument value will just be used once,_rather than matched multiple times._@param value the argument value_@param type the type of the constructor argument;public void addGenericArgumentValue(Object value, String type) {_		this.genericArgumentValues.add(new ValueHolder(value, type))__	};add,a,generic,argument,value,to,be,matched,by,type,p,note,a,single,generic,argument,value,will,just,be,used,once,rather,than,matched,multiple,times,param,value,the,argument,value,param,type,the,type,of,the,constructor,argument;public,void,add,generic,argument,value,object,value,string,type,this,generic,argument,values,add,new,value,holder,value,type
ConstructorArgumentValues -> public void addGenericArgumentValue(Object value, String type);1467730834;Add a generic argument value to be matched by type._<p>Note: A single generic argument value will just be used once,_rather than matched multiple times._@param value the argument value_@param type the type of the constructor argument;public void addGenericArgumentValue(Object value, String type) {_		this.genericArgumentValues.add(new ValueHolder(value, type))__	};add,a,generic,argument,value,to,be,matched,by,type,p,note,a,single,generic,argument,value,will,just,be,used,once,rather,than,matched,multiple,times,param,value,the,argument,value,param,type,the,type,of,the,constructor,argument;public,void,add,generic,argument,value,object,value,string,type,this,generic,argument,values,add,new,value,holder,value,type
ConstructorArgumentValues -> public void addGenericArgumentValue(Object value, String type);1495868221;Add a generic argument value to be matched by type._<p>Note: A single generic argument value will just be used once,_rather than matched multiple times._@param value the argument value_@param type the type of the constructor argument;public void addGenericArgumentValue(Object value, String type) {_		this.genericArgumentValues.add(new ValueHolder(value, type))__	};add,a,generic,argument,value,to,be,matched,by,type,p,note,a,single,generic,argument,value,will,just,be,used,once,rather,than,matched,multiple,times,param,value,the,argument,value,param,type,the,type,of,the,constructor,argument;public,void,add,generic,argument,value,object,value,string,type,this,generic,argument,values,add,new,value,holder,value,type
ConstructorArgumentValues -> public void addGenericArgumentValue(Object value, String type);1496259743;Add a generic argument value to be matched by type._<p>Note: A single generic argument value will just be used once,_rather than matched multiple times._@param value the argument value_@param type the type of the constructor argument;public void addGenericArgumentValue(Object value, String type) {_		this.genericArgumentValues.add(new ValueHolder(value, type))__	};add,a,generic,argument,value,to,be,matched,by,type,p,note,a,single,generic,argument,value,will,just,be,used,once,rather,than,matched,multiple,times,param,value,the,argument,value,param,type,the,type,of,the,constructor,argument;public,void,add,generic,argument,value,object,value,string,type,this,generic,argument,values,add,new,value,holder,value,type
ConstructorArgumentValues -> public void addGenericArgumentValue(Object value, String type);1496837955;Add a generic argument value to be matched by type._<p>Note: A single generic argument value will just be used once,_rather than matched multiple times._@param value the argument value_@param type the type of the constructor argument;public void addGenericArgumentValue(Object value, String type) {_		this.genericArgumentValues.add(new ValueHolder(value, type))__	};add,a,generic,argument,value,to,be,matched,by,type,p,note,a,single,generic,argument,value,will,just,be,used,once,rather,than,matched,multiple,times,param,value,the,argument,value,param,type,the,type,of,the,constructor,argument;public,void,add,generic,argument,value,object,value,string,type,this,generic,argument,values,add,new,value,holder,value,type
ConstructorArgumentValues -> public void addGenericArgumentValue(Object value, String type);1497250713;Add a generic argument value to be matched by type._<p>Note: A single generic argument value will just be used once,_rather than matched multiple times._@param value the argument value_@param type the type of the constructor argument;public void addGenericArgumentValue(Object value, String type) {_		this.genericArgumentValues.add(new ValueHolder(value, type))__	};add,a,generic,argument,value,to,be,matched,by,type,p,note,a,single,generic,argument,value,will,just,be,used,once,rather,than,matched,multiple,times,param,value,the,argument,value,param,type,the,type,of,the,constructor,argument;public,void,add,generic,argument,value,object,value,string,type,this,generic,argument,values,add,new,value,holder,value,type
ConstructorArgumentValues -> public void addGenericArgumentValue(Object value, String type);1498780456;Add a generic argument value to be matched by type._<p>Note: A single generic argument value will just be used once,_rather than matched multiple times._@param value the argument value_@param type the type of the constructor argument;public void addGenericArgumentValue(Object value, String type) {_		this.genericArgumentValues.add(new ValueHolder(value, type))__	};add,a,generic,argument,value,to,be,matched,by,type,p,note,a,single,generic,argument,value,will,just,be,used,once,rather,than,matched,multiple,times,param,value,the,argument,value,param,type,the,type,of,the,constructor,argument;public,void,add,generic,argument,value,object,value,string,type,this,generic,argument,values,add,new,value,holder,value,type
ConstructorArgumentValues -> public void addGenericArgumentValue(Object value, String type);1500448076;Add a generic argument value to be matched by type._<p>Note: A single generic argument value will just be used once,_rather than matched multiple times._@param value the argument value_@param type the type of the constructor argument;public void addGenericArgumentValue(Object value, String type) {_		this.genericArgumentValues.add(new ValueHolder(value, type))__	};add,a,generic,argument,value,to,be,matched,by,type,p,note,a,single,generic,argument,value,will,just,be,used,once,rather,than,matched,multiple,times,param,value,the,argument,value,param,type,the,type,of,the,constructor,argument;public,void,add,generic,argument,value,object,value,string,type,this,generic,argument,values,add,new,value,holder,value,type
ConstructorArgumentValues -> public void addGenericArgumentValue(Object value, String type);1531945062;Add a generic argument value to be matched by type._<p>Note: A single generic argument value will just be used once,_rather than matched multiple times._@param value the argument value_@param type the type of the constructor argument;public void addGenericArgumentValue(Object value, String type) {_		this.genericArgumentValues.add(new ValueHolder(value, type))__	};add,a,generic,argument,value,to,be,matched,by,type,p,note,a,single,generic,argument,value,will,just,be,used,once,rather,than,matched,multiple,times,param,value,the,argument,value,param,type,the,type,of,the,constructor,argument;public,void,add,generic,argument,value,object,value,string,type,this,generic,argument,values,add,new,value,holder,value,type
ConstructorArgumentValues -> public void addGenericArgumentValue(Object value, String type);1532981251;Add a generic argument value to be matched by type._<p>Note: A single generic argument value will just be used once,_rather than matched multiple times._@param value the argument value_@param type the type of the constructor argument;public void addGenericArgumentValue(Object value, String type) {_		this.genericArgumentValues.add(new ValueHolder(value, type))__	};add,a,generic,argument,value,to,be,matched,by,type,p,note,a,single,generic,argument,value,will,just,be,used,once,rather,than,matched,multiple,times,param,value,the,argument,value,param,type,the,type,of,the,constructor,argument;public,void,add,generic,argument,value,object,value,string,type,this,generic,argument,values,add,new,value,holder,value,type
ConstructorArgumentValues -> public void addGenericArgumentValue(Object value, String type);1549554785;Add a generic argument value to be matched by type._<p>Note: A single generic argument value will just be used once,_rather than matched multiple times._@param value the argument value_@param type the type of the constructor argument;public void addGenericArgumentValue(Object value, String type) {_		this.genericArgumentValues.add(new ValueHolder(value, type))__	};add,a,generic,argument,value,to,be,matched,by,type,p,note,a,single,generic,argument,value,will,just,be,used,once,rather,than,matched,multiple,times,param,value,the,argument,value,param,type,the,type,of,the,constructor,argument;public,void,add,generic,argument,value,object,value,string,type,this,generic,argument,values,add,new,value,holder,value,type
ConstructorArgumentValues -> public int getArgumentCount();1328020251;Return the number of argument values held in this instance,_counting both indexed and generic argument values.;public int getArgumentCount() {_		return (this.indexedArgumentValues.size() + this.genericArgumentValues.size())__	};return,the,number,of,argument,values,held,in,this,instance,counting,both,indexed,and,generic,argument,values;public,int,get,argument,count,return,this,indexed,argument,values,size,this,generic,argument,values,size
ConstructorArgumentValues -> public int getArgumentCount();1356735495;Return the number of argument values held in this instance,_counting both indexed and generic argument values.;public int getArgumentCount() {_		return (this.indexedArgumentValues.size() + this.genericArgumentValues.size())__	};return,the,number,of,argument,values,held,in,this,instance,counting,both,indexed,and,generic,argument,values;public,int,get,argument,count,return,this,indexed,argument,values,size,this,generic,argument,values,size
ConstructorArgumentValues -> public int getArgumentCount();1357119239;Return the number of argument values held in this instance,_counting both indexed and generic argument values.;public int getArgumentCount() {_		return (this.indexedArgumentValues.size() + this.genericArgumentValues.size())__	};return,the,number,of,argument,values,held,in,this,instance,counting,both,indexed,and,generic,argument,values;public,int,get,argument,count,return,this,indexed,argument,values,size,this,generic,argument,values,size
ConstructorArgumentValues -> public int getArgumentCount();1368482696;Return the number of argument values held in this instance,_counting both indexed and generic argument values.;public int getArgumentCount() {_		return (this.indexedArgumentValues.size() + this.genericArgumentValues.size())__	};return,the,number,of,argument,values,held,in,this,instance,counting,both,indexed,and,generic,argument,values;public,int,get,argument,count,return,this,indexed,argument,values,size,this,generic,argument,values,size
ConstructorArgumentValues -> public int getArgumentCount();1382789137;Return the number of argument values held in this instance,_counting both indexed and generic argument values.;public int getArgumentCount() {_		return (this.indexedArgumentValues.size() + this.genericArgumentValues.size())__	};return,the,number,of,argument,values,held,in,this,instance,counting,both,indexed,and,generic,argument,values;public,int,get,argument,count,return,this,indexed,argument,values,size,this,generic,argument,values,size
ConstructorArgumentValues -> public int getArgumentCount();1458323493;Return the number of argument values held in this instance,_counting both indexed and generic argument values.;public int getArgumentCount() {_		return (this.indexedArgumentValues.size() + this.genericArgumentValues.size())__	};return,the,number,of,argument,values,held,in,this,instance,counting,both,indexed,and,generic,argument,values;public,int,get,argument,count,return,this,indexed,argument,values,size,this,generic,argument,values,size
ConstructorArgumentValues -> public int getArgumentCount();1467730834;Return the number of argument values held in this instance,_counting both indexed and generic argument values.;public int getArgumentCount() {_		return (this.indexedArgumentValues.size() + this.genericArgumentValues.size())__	};return,the,number,of,argument,values,held,in,this,instance,counting,both,indexed,and,generic,argument,values;public,int,get,argument,count,return,this,indexed,argument,values,size,this,generic,argument,values,size
ConstructorArgumentValues -> public int getArgumentCount();1495868221;Return the number of argument values held in this instance,_counting both indexed and generic argument values.;public int getArgumentCount() {_		return (this.indexedArgumentValues.size() + this.genericArgumentValues.size())__	};return,the,number,of,argument,values,held,in,this,instance,counting,both,indexed,and,generic,argument,values;public,int,get,argument,count,return,this,indexed,argument,values,size,this,generic,argument,values,size
ConstructorArgumentValues -> public int getArgumentCount();1496259743;Return the number of argument values held in this instance,_counting both indexed and generic argument values.;public int getArgumentCount() {_		return (this.indexedArgumentValues.size() + this.genericArgumentValues.size())__	};return,the,number,of,argument,values,held,in,this,instance,counting,both,indexed,and,generic,argument,values;public,int,get,argument,count,return,this,indexed,argument,values,size,this,generic,argument,values,size
ConstructorArgumentValues -> public int getArgumentCount();1496837955;Return the number of argument values held in this instance,_counting both indexed and generic argument values.;public int getArgumentCount() {_		return (this.indexedArgumentValues.size() + this.genericArgumentValues.size())__	};return,the,number,of,argument,values,held,in,this,instance,counting,both,indexed,and,generic,argument,values;public,int,get,argument,count,return,this,indexed,argument,values,size,this,generic,argument,values,size
ConstructorArgumentValues -> public int getArgumentCount();1497250713;Return the number of argument values held in this instance,_counting both indexed and generic argument values.;public int getArgumentCount() {_		return (this.indexedArgumentValues.size() + this.genericArgumentValues.size())__	};return,the,number,of,argument,values,held,in,this,instance,counting,both,indexed,and,generic,argument,values;public,int,get,argument,count,return,this,indexed,argument,values,size,this,generic,argument,values,size
ConstructorArgumentValues -> public int getArgumentCount();1498780456;Return the number of argument values held in this instance,_counting both indexed and generic argument values.;public int getArgumentCount() {_		return (this.indexedArgumentValues.size() + this.genericArgumentValues.size())__	};return,the,number,of,argument,values,held,in,this,instance,counting,both,indexed,and,generic,argument,values;public,int,get,argument,count,return,this,indexed,argument,values,size,this,generic,argument,values,size
ConstructorArgumentValues -> public int getArgumentCount();1500448076;Return the number of argument values held in this instance,_counting both indexed and generic argument values.;public int getArgumentCount() {_		return (this.indexedArgumentValues.size() + this.genericArgumentValues.size())__	};return,the,number,of,argument,values,held,in,this,instance,counting,both,indexed,and,generic,argument,values;public,int,get,argument,count,return,this,indexed,argument,values,size,this,generic,argument,values,size
ConstructorArgumentValues -> public int getArgumentCount();1531945062;Return the number of argument values held in this instance,_counting both indexed and generic argument values.;public int getArgumentCount() {_		return (this.indexedArgumentValues.size() + this.genericArgumentValues.size())__	};return,the,number,of,argument,values,held,in,this,instance,counting,both,indexed,and,generic,argument,values;public,int,get,argument,count,return,this,indexed,argument,values,size,this,generic,argument,values,size
ConstructorArgumentValues -> public int getArgumentCount();1532981251;Return the number of argument values held in this instance,_counting both indexed and generic argument values.;public int getArgumentCount() {_		return (this.indexedArgumentValues.size() + this.genericArgumentValues.size())__	};return,the,number,of,argument,values,held,in,this,instance,counting,both,indexed,and,generic,argument,values;public,int,get,argument,count,return,this,indexed,argument,values,size,this,generic,argument,values,size
ConstructorArgumentValues -> public int getArgumentCount();1549554785;Return the number of argument values held in this instance,_counting both indexed and generic argument values.;public int getArgumentCount() {_		return (this.indexedArgumentValues.size() + this.genericArgumentValues.size())__	};return,the,number,of,argument,values,held,in,this,instance,counting,both,indexed,and,generic,argument,values;public,int,get,argument,count,return,this,indexed,argument,values,size,this,generic,argument,values,size
ConstructorArgumentValues -> public ValueHolder getArgumentValue(int index, Class requiredType);1328020251;Look for an argument value that either corresponds to the given index_in the constructor argument list or generically matches by type._@param index the index in the constructor argument list_@param requiredType the type to match_@return the ValueHolder for the argument, or <code>null</code> if none set;public ValueHolder getArgumentValue(int index, Class requiredType) {_		return getArgumentValue(index, requiredType, null, null)__	};look,for,an,argument,value,that,either,corresponds,to,the,given,index,in,the,constructor,argument,list,or,generically,matches,by,type,param,index,the,index,in,the,constructor,argument,list,param,required,type,the,type,to,match,return,the,value,holder,for,the,argument,or,code,null,code,if,none,set;public,value,holder,get,argument,value,int,index,class,required,type,return,get,argument,value,index,required,type,null,null
ConstructorArgumentValues -> public ValueHolder getArgumentValue(int index, Class requiredType);1356735495;Look for an argument value that either corresponds to the given index_in the constructor argument list or generically matches by type._@param index the index in the constructor argument list_@param requiredType the type to match_@return the ValueHolder for the argument, or {@code null} if none set;public ValueHolder getArgumentValue(int index, Class requiredType) {_		return getArgumentValue(index, requiredType, null, null)__	};look,for,an,argument,value,that,either,corresponds,to,the,given,index,in,the,constructor,argument,list,or,generically,matches,by,type,param,index,the,index,in,the,constructor,argument,list,param,required,type,the,type,to,match,return,the,value,holder,for,the,argument,or,code,null,if,none,set;public,value,holder,get,argument,value,int,index,class,required,type,return,get,argument,value,index,required,type,null,null
ConstructorArgumentValues -> public ValueHolder getArgumentValue(int index, Class requiredType);1357119239;Look for an argument value that either corresponds to the given index_in the constructor argument list or generically matches by type._@param index the index in the constructor argument list_@param requiredType the type to match_@return the ValueHolder for the argument, or {@code null} if none set;public ValueHolder getArgumentValue(int index, Class requiredType) {_		return getArgumentValue(index, requiredType, null, null)__	};look,for,an,argument,value,that,either,corresponds,to,the,given,index,in,the,constructor,argument,list,or,generically,matches,by,type,param,index,the,index,in,the,constructor,argument,list,param,required,type,the,type,to,match,return,the,value,holder,for,the,argument,or,code,null,if,none,set;public,value,holder,get,argument,value,int,index,class,required,type,return,get,argument,value,index,required,type,null,null
ConstructorArgumentValues -> public ValueHolder getArgumentValue(int index, Class requiredType);1368482696;Look for an argument value that either corresponds to the given index_in the constructor argument list or generically matches by type._@param index the index in the constructor argument list_@param requiredType the type to match_@return the ValueHolder for the argument, or {@code null} if none set;public ValueHolder getArgumentValue(int index, Class requiredType) {_		return getArgumentValue(index, requiredType, null, null)__	};look,for,an,argument,value,that,either,corresponds,to,the,given,index,in,the,constructor,argument,list,or,generically,matches,by,type,param,index,the,index,in,the,constructor,argument,list,param,required,type,the,type,to,match,return,the,value,holder,for,the,argument,or,code,null,if,none,set;public,value,holder,get,argument,value,int,index,class,required,type,return,get,argument,value,index,required,type,null,null
ConstructorArgumentValues -> ValueHolder -> public ValueHolder(@Nullable Object value, @Nullable String type);1496837955;Create a new ValueHolder for the given value and type._@param value the argument value_@param type the type of the constructor argument;public ValueHolder(@Nullable Object value, @Nullable String type) {_			this.value = value__			this.type = type__		};create,a,new,value,holder,for,the,given,value,and,type,param,value,the,argument,value,param,type,the,type,of,the,constructor,argument;public,value,holder,nullable,object,value,nullable,string,type,this,value,value,this,type,type
ConstructorArgumentValues -> ValueHolder -> public ValueHolder(@Nullable Object value, @Nullable String type);1497250713;Create a new ValueHolder for the given value and type._@param value the argument value_@param type the type of the constructor argument;public ValueHolder(@Nullable Object value, @Nullable String type) {_			this.value = value__			this.type = type__		};create,a,new,value,holder,for,the,given,value,and,type,param,value,the,argument,value,param,type,the,type,of,the,constructor,argument;public,value,holder,nullable,object,value,nullable,string,type,this,value,value,this,type,type
ConstructorArgumentValues -> ValueHolder -> public ValueHolder(@Nullable Object value, @Nullable String type);1498780456;Create a new ValueHolder for the given value and type._@param value the argument value_@param type the type of the constructor argument;public ValueHolder(@Nullable Object value, @Nullable String type) {_			this.value = value__			this.type = type__		};create,a,new,value,holder,for,the,given,value,and,type,param,value,the,argument,value,param,type,the,type,of,the,constructor,argument;public,value,holder,nullable,object,value,nullable,string,type,this,value,value,this,type,type
ConstructorArgumentValues -> ValueHolder -> public ValueHolder(@Nullable Object value, @Nullable String type);1500448076;Create a new ValueHolder for the given value and type._@param value the argument value_@param type the type of the constructor argument;public ValueHolder(@Nullable Object value, @Nullable String type) {_			this.value = value__			this.type = type__		};create,a,new,value,holder,for,the,given,value,and,type,param,value,the,argument,value,param,type,the,type,of,the,constructor,argument;public,value,holder,nullable,object,value,nullable,string,type,this,value,value,this,type,type
ConstructorArgumentValues -> ValueHolder -> public ValueHolder(@Nullable Object value, @Nullable String type);1531945062;Create a new ValueHolder for the given value and type._@param value the argument value_@param type the type of the constructor argument;public ValueHolder(@Nullable Object value, @Nullable String type) {_			this.value = value__			this.type = type__		};create,a,new,value,holder,for,the,given,value,and,type,param,value,the,argument,value,param,type,the,type,of,the,constructor,argument;public,value,holder,nullable,object,value,nullable,string,type,this,value,value,this,type,type
ConstructorArgumentValues -> ValueHolder -> public ValueHolder(@Nullable Object value, @Nullable String type);1532981251;Create a new ValueHolder for the given value and type._@param value the argument value_@param type the type of the constructor argument;public ValueHolder(@Nullable Object value, @Nullable String type) {_			this.value = value__			this.type = type__		};create,a,new,value,holder,for,the,given,value,and,type,param,value,the,argument,value,param,type,the,type,of,the,constructor,argument;public,value,holder,nullable,object,value,nullable,string,type,this,value,value,this,type,type
ConstructorArgumentValues -> ValueHolder -> public ValueHolder(@Nullable Object value, @Nullable String type);1549554785;Create a new ValueHolder for the given value and type._@param value the argument value_@param type the type of the constructor argument;public ValueHolder(@Nullable Object value, @Nullable String type) {_			this.value = value__			this.type = type__		};create,a,new,value,holder,for,the,given,value,and,type,param,value,the,argument,value,param,type,the,type,of,the,constructor,argument;public,value,holder,nullable,object,value,nullable,string,type,this,value,value,this,type,type
ConstructorArgumentValues -> ValueHolder -> public ValueHolder(Object value, String type);1328020251;Create a new ValueHolder for the given value and type._@param value the argument value_@param type the type of the constructor argument;public ValueHolder(Object value, String type) {_			this.value = value__			this.type = type__		};create,a,new,value,holder,for,the,given,value,and,type,param,value,the,argument,value,param,type,the,type,of,the,constructor,argument;public,value,holder,object,value,string,type,this,value,value,this,type,type
ConstructorArgumentValues -> ValueHolder -> public ValueHolder(Object value, String type);1356735495;Create a new ValueHolder for the given value and type._@param value the argument value_@param type the type of the constructor argument;public ValueHolder(Object value, String type) {_			this.value = value__			this.type = type__		};create,a,new,value,holder,for,the,given,value,and,type,param,value,the,argument,value,param,type,the,type,of,the,constructor,argument;public,value,holder,object,value,string,type,this,value,value,this,type,type
ConstructorArgumentValues -> ValueHolder -> public ValueHolder(Object value, String type);1357119239;Create a new ValueHolder for the given value and type._@param value the argument value_@param type the type of the constructor argument;public ValueHolder(Object value, String type) {_			this.value = value__			this.type = type__		};create,a,new,value,holder,for,the,given,value,and,type,param,value,the,argument,value,param,type,the,type,of,the,constructor,argument;public,value,holder,object,value,string,type,this,value,value,this,type,type
ConstructorArgumentValues -> ValueHolder -> public ValueHolder(Object value, String type);1368482696;Create a new ValueHolder for the given value and type._@param value the argument value_@param type the type of the constructor argument;public ValueHolder(Object value, String type) {_			this.value = value__			this.type = type__		};create,a,new,value,holder,for,the,given,value,and,type,param,value,the,argument,value,param,type,the,type,of,the,constructor,argument;public,value,holder,object,value,string,type,this,value,value,this,type,type
ConstructorArgumentValues -> ValueHolder -> public ValueHolder(Object value, String type);1382789137;Create a new ValueHolder for the given value and type._@param value the argument value_@param type the type of the constructor argument;public ValueHolder(Object value, String type) {_			this.value = value__			this.type = type__		};create,a,new,value,holder,for,the,given,value,and,type,param,value,the,argument,value,param,type,the,type,of,the,constructor,argument;public,value,holder,object,value,string,type,this,value,value,this,type,type
ConstructorArgumentValues -> ValueHolder -> public ValueHolder(Object value, String type);1458323493;Create a new ValueHolder for the given value and type._@param value the argument value_@param type the type of the constructor argument;public ValueHolder(Object value, String type) {_			this.value = value__			this.type = type__		};create,a,new,value,holder,for,the,given,value,and,type,param,value,the,argument,value,param,type,the,type,of,the,constructor,argument;public,value,holder,object,value,string,type,this,value,value,this,type,type
ConstructorArgumentValues -> ValueHolder -> public ValueHolder(Object value, String type);1467730834;Create a new ValueHolder for the given value and type._@param value the argument value_@param type the type of the constructor argument;public ValueHolder(Object value, String type) {_			this.value = value__			this.type = type__		};create,a,new,value,holder,for,the,given,value,and,type,param,value,the,argument,value,param,type,the,type,of,the,constructor,argument;public,value,holder,object,value,string,type,this,value,value,this,type,type
ConstructorArgumentValues -> ValueHolder -> public ValueHolder(Object value, String type);1495868221;Create a new ValueHolder for the given value and type._@param value the argument value_@param type the type of the constructor argument;public ValueHolder(Object value, String type) {_			this.value = value__			this.type = type__		};create,a,new,value,holder,for,the,given,value,and,type,param,value,the,argument,value,param,type,the,type,of,the,constructor,argument;public,value,holder,object,value,string,type,this,value,value,this,type,type
ConstructorArgumentValues -> ValueHolder -> public ValueHolder(Object value, String type);1496259743;Create a new ValueHolder for the given value and type._@param value the argument value_@param type the type of the constructor argument;public ValueHolder(Object value, String type) {_			this.value = value__			this.type = type__		};create,a,new,value,holder,for,the,given,value,and,type,param,value,the,argument,value,param,type,the,type,of,the,constructor,argument;public,value,holder,object,value,string,type,this,value,value,this,type,type
ConstructorArgumentValues -> public void addIndexedArgumentValue(int index, @Nullable Object value, String type);1496837955;Add an argument value for the given index in the constructor argument list._@param index the index in the constructor argument list_@param value the argument value_@param type the type of the constructor argument;public void addIndexedArgumentValue(int index, @Nullable Object value, String type) {_		addIndexedArgumentValue(index, new ValueHolder(value, type))__	};add,an,argument,value,for,the,given,index,in,the,constructor,argument,list,param,index,the,index,in,the,constructor,argument,list,param,value,the,argument,value,param,type,the,type,of,the,constructor,argument;public,void,add,indexed,argument,value,int,index,nullable,object,value,string,type,add,indexed,argument,value,index,new,value,holder,value,type
ConstructorArgumentValues -> public void addIndexedArgumentValue(int index, @Nullable Object value, String type);1497250713;Add an argument value for the given index in the constructor argument list._@param index the index in the constructor argument list_@param value the argument value_@param type the type of the constructor argument;public void addIndexedArgumentValue(int index, @Nullable Object value, String type) {_		addIndexedArgumentValue(index, new ValueHolder(value, type))__	};add,an,argument,value,for,the,given,index,in,the,constructor,argument,list,param,index,the,index,in,the,constructor,argument,list,param,value,the,argument,value,param,type,the,type,of,the,constructor,argument;public,void,add,indexed,argument,value,int,index,nullable,object,value,string,type,add,indexed,argument,value,index,new,value,holder,value,type
ConstructorArgumentValues -> public void addIndexedArgumentValue(int index, @Nullable Object value, String type);1498780456;Add an argument value for the given index in the constructor argument list._@param index the index in the constructor argument list_@param value the argument value_@param type the type of the constructor argument;public void addIndexedArgumentValue(int index, @Nullable Object value, String type) {_		addIndexedArgumentValue(index, new ValueHolder(value, type))__	};add,an,argument,value,for,the,given,index,in,the,constructor,argument,list,param,index,the,index,in,the,constructor,argument,list,param,value,the,argument,value,param,type,the,type,of,the,constructor,argument;public,void,add,indexed,argument,value,int,index,nullable,object,value,string,type,add,indexed,argument,value,index,new,value,holder,value,type
ConstructorArgumentValues -> public void addIndexedArgumentValue(int index, @Nullable Object value, String type);1500448076;Add an argument value for the given index in the constructor argument list._@param index the index in the constructor argument list_@param value the argument value_@param type the type of the constructor argument;public void addIndexedArgumentValue(int index, @Nullable Object value, String type) {_		addIndexedArgumentValue(index, new ValueHolder(value, type))__	};add,an,argument,value,for,the,given,index,in,the,constructor,argument,list,param,index,the,index,in,the,constructor,argument,list,param,value,the,argument,value,param,type,the,type,of,the,constructor,argument;public,void,add,indexed,argument,value,int,index,nullable,object,value,string,type,add,indexed,argument,value,index,new,value,holder,value,type
ConstructorArgumentValues -> public void addIndexedArgumentValue(int index, @Nullable Object value, String type);1531945062;Add an argument value for the given index in the constructor argument list._@param index the index in the constructor argument list_@param value the argument value_@param type the type of the constructor argument;public void addIndexedArgumentValue(int index, @Nullable Object value, String type) {_		addIndexedArgumentValue(index, new ValueHolder(value, type))__	};add,an,argument,value,for,the,given,index,in,the,constructor,argument,list,param,index,the,index,in,the,constructor,argument,list,param,value,the,argument,value,param,type,the,type,of,the,constructor,argument;public,void,add,indexed,argument,value,int,index,nullable,object,value,string,type,add,indexed,argument,value,index,new,value,holder,value,type
ConstructorArgumentValues -> public void addIndexedArgumentValue(int index, @Nullable Object value, String type);1532981251;Add an argument value for the given index in the constructor argument list._@param index the index in the constructor argument list_@param value the argument value_@param type the type of the constructor argument;public void addIndexedArgumentValue(int index, @Nullable Object value, String type) {_		addIndexedArgumentValue(index, new ValueHolder(value, type))__	};add,an,argument,value,for,the,given,index,in,the,constructor,argument,list,param,index,the,index,in,the,constructor,argument,list,param,value,the,argument,value,param,type,the,type,of,the,constructor,argument;public,void,add,indexed,argument,value,int,index,nullable,object,value,string,type,add,indexed,argument,value,index,new,value,holder,value,type
ConstructorArgumentValues -> public void addIndexedArgumentValue(int index, @Nullable Object value, String type);1549554785;Add an argument value for the given index in the constructor argument list._@param index the index in the constructor argument list_@param value the argument value_@param type the type of the constructor argument;public void addIndexedArgumentValue(int index, @Nullable Object value, String type) {_		addIndexedArgumentValue(index, new ValueHolder(value, type))__	};add,an,argument,value,for,the,given,index,in,the,constructor,argument,list,param,index,the,index,in,the,constructor,argument,list,param,value,the,argument,value,param,type,the,type,of,the,constructor,argument;public,void,add,indexed,argument,value,int,index,nullable,object,value,string,type,add,indexed,argument,value,index,new,value,holder,value,type
ConstructorArgumentValues -> ValueHolder -> @Nullable 		public Object getValue();1496837955;Return the value for the constructor argument.;@Nullable_		public Object getValue() {_			return this.value__		};return,the,value,for,the,constructor,argument;nullable,public,object,get,value,return,this,value
ConstructorArgumentValues -> ValueHolder -> @Nullable 		public Object getValue();1497250713;Return the value for the constructor argument.;@Nullable_		public Object getValue() {_			return this.value__		};return,the,value,for,the,constructor,argument;nullable,public,object,get,value,return,this,value
ConstructorArgumentValues -> ValueHolder -> @Nullable 		public Object getValue();1498780456;Return the value for the constructor argument.;@Nullable_		public Object getValue() {_			return this.value__		};return,the,value,for,the,constructor,argument;nullable,public,object,get,value,return,this,value
ConstructorArgumentValues -> ValueHolder -> @Nullable 		public Object getValue();1500448076;Return the value for the constructor argument.;@Nullable_		public Object getValue() {_			return this.value__		};return,the,value,for,the,constructor,argument;nullable,public,object,get,value,return,this,value
ConstructorArgumentValues -> ValueHolder -> @Nullable 		public Object getValue();1531945062;Return the value for the constructor argument.;@Nullable_		public Object getValue() {_			return this.value__		};return,the,value,for,the,constructor,argument;nullable,public,object,get,value,return,this,value
ConstructorArgumentValues -> ValueHolder -> @Nullable 		public Object getValue();1532981251;Return the value for the constructor argument.;@Nullable_		public Object getValue() {_			return this.value__		};return,the,value,for,the,constructor,argument;nullable,public,object,get,value,return,this,value
ConstructorArgumentValues -> ValueHolder -> @Nullable 		public Object getValue();1549554785;Return the value for the constructor argument.;@Nullable_		public Object getValue() {_			return this.value__		};return,the,value,for,the,constructor,argument;nullable,public,object,get,value,return,this,value
ConstructorArgumentValues -> ValueHolder -> public void setValue(@Nullable Object value);1496837955;Set the value for the constructor argument._@see PropertyPlaceholderConfigurer;public void setValue(@Nullable Object value) {_			this.value = value__		};set,the,value,for,the,constructor,argument,see,property,placeholder,configurer;public,void,set,value,nullable,object,value,this,value,value
ConstructorArgumentValues -> ValueHolder -> public void setValue(@Nullable Object value);1497250713;Set the value for the constructor argument._@see PropertyPlaceholderConfigurer;public void setValue(@Nullable Object value) {_			this.value = value__		};set,the,value,for,the,constructor,argument,see,property,placeholder,configurer;public,void,set,value,nullable,object,value,this,value,value
ConstructorArgumentValues -> ValueHolder -> public void setValue(@Nullable Object value);1498780456;Set the value for the constructor argument._@see PropertyPlaceholderConfigurer;public void setValue(@Nullable Object value) {_			this.value = value__		};set,the,value,for,the,constructor,argument,see,property,placeholder,configurer;public,void,set,value,nullable,object,value,this,value,value
ConstructorArgumentValues -> ValueHolder -> public void setValue(@Nullable Object value);1500448076;Set the value for the constructor argument._@see PropertyPlaceholderConfigurer;public void setValue(@Nullable Object value) {_			this.value = value__		};set,the,value,for,the,constructor,argument,see,property,placeholder,configurer;public,void,set,value,nullable,object,value,this,value,value
ConstructorArgumentValues -> ValueHolder -> public void setValue(@Nullable Object value);1531945062;Set the value for the constructor argument._@see PropertyPlaceholderConfigurer;public void setValue(@Nullable Object value) {_			this.value = value__		};set,the,value,for,the,constructor,argument,see,property,placeholder,configurer;public,void,set,value,nullable,object,value,this,value,value
ConstructorArgumentValues -> ValueHolder -> public void setValue(@Nullable Object value);1532981251;Set the value for the constructor argument._@see PropertyPlaceholderConfigurer;public void setValue(@Nullable Object value) {_			this.value = value__		};set,the,value,for,the,constructor,argument,see,property,placeholder,configurer;public,void,set,value,nullable,object,value,this,value,value
ConstructorArgumentValues -> ValueHolder -> public void setValue(@Nullable Object value);1549554785;Set the value for the constructor argument.;public void setValue(@Nullable Object value) {_			this.value = value__		};set,the,value,for,the,constructor,argument;public,void,set,value,nullable,object,value,this,value,value
ConstructorArgumentValues -> public ValueHolder getGenericArgumentValue(Class requiredType, String requiredName);1328020251;Look for a generic argument value that matches the given type._@param requiredType the type to match_@param requiredName the name to match_@return the ValueHolder for the argument, or <code>null</code> if none set;public ValueHolder getGenericArgumentValue(Class requiredType, String requiredName) {_		return getGenericArgumentValue(requiredType, requiredName, null)__	};look,for,a,generic,argument,value,that,matches,the,given,type,param,required,type,the,type,to,match,param,required,name,the,name,to,match,return,the,value,holder,for,the,argument,or,code,null,code,if,none,set;public,value,holder,get,generic,argument,value,class,required,type,string,required,name,return,get,generic,argument,value,required,type,required,name,null
ConstructorArgumentValues -> public ValueHolder getGenericArgumentValue(Class requiredType, String requiredName);1356735495;Look for a generic argument value that matches the given type._@param requiredType the type to match_@param requiredName the name to match_@return the ValueHolder for the argument, or {@code null} if none set;public ValueHolder getGenericArgumentValue(Class requiredType, String requiredName) {_		return getGenericArgumentValue(requiredType, requiredName, null)__	};look,for,a,generic,argument,value,that,matches,the,given,type,param,required,type,the,type,to,match,param,required,name,the,name,to,match,return,the,value,holder,for,the,argument,or,code,null,if,none,set;public,value,holder,get,generic,argument,value,class,required,type,string,required,name,return,get,generic,argument,value,required,type,required,name,null
ConstructorArgumentValues -> public ValueHolder getGenericArgumentValue(Class requiredType, String requiredName);1357119239;Look for a generic argument value that matches the given type._@param requiredType the type to match_@param requiredName the name to match_@return the ValueHolder for the argument, or {@code null} if none set;public ValueHolder getGenericArgumentValue(Class requiredType, String requiredName) {_		return getGenericArgumentValue(requiredType, requiredName, null)__	};look,for,a,generic,argument,value,that,matches,the,given,type,param,required,type,the,type,to,match,param,required,name,the,name,to,match,return,the,value,holder,for,the,argument,or,code,null,if,none,set;public,value,holder,get,generic,argument,value,class,required,type,string,required,name,return,get,generic,argument,value,required,type,required,name,null
ConstructorArgumentValues -> public ValueHolder getGenericArgumentValue(Class requiredType, String requiredName);1368482696;Look for a generic argument value that matches the given type._@param requiredType the type to match_@param requiredName the name to match_@return the ValueHolder for the argument, or {@code null} if none set;public ValueHolder getGenericArgumentValue(Class requiredType, String requiredName) {_		return getGenericArgumentValue(requiredType, requiredName, null)__	};look,for,a,generic,argument,value,that,matches,the,given,type,param,required,type,the,type,to,match,param,required,name,the,name,to,match,return,the,value,holder,for,the,argument,or,code,null,if,none,set;public,value,holder,get,generic,argument,value,class,required,type,string,required,name,return,get,generic,argument,value,required,type,required,name,null
ConstructorArgumentValues -> public ValueHolder getIndexedArgumentValue(int index, Class requiredType);1328020251;Get argument value for the given index in the constructor argument list._@param index the index in the constructor argument list_@param requiredType the type to match (can be <code>null</code> to match_untyped values only)_@return the ValueHolder for the argument, or <code>null</code> if none set;public ValueHolder getIndexedArgumentValue(int index, Class requiredType) {_		return getIndexedArgumentValue(index, requiredType, null)__	};get,argument,value,for,the,given,index,in,the,constructor,argument,list,param,index,the,index,in,the,constructor,argument,list,param,required,type,the,type,to,match,can,be,code,null,code,to,match,untyped,values,only,return,the,value,holder,for,the,argument,or,code,null,code,if,none,set;public,value,holder,get,indexed,argument,value,int,index,class,required,type,return,get,indexed,argument,value,index,required,type,null
ConstructorArgumentValues -> public ValueHolder getIndexedArgumentValue(int index, Class requiredType);1356735495;Get argument value for the given index in the constructor argument list._@param index the index in the constructor argument list_@param requiredType the type to match (can be {@code null} to match_untyped values only)_@return the ValueHolder for the argument, or {@code null} if none set;public ValueHolder getIndexedArgumentValue(int index, Class requiredType) {_		return getIndexedArgumentValue(index, requiredType, null)__	};get,argument,value,for,the,given,index,in,the,constructor,argument,list,param,index,the,index,in,the,constructor,argument,list,param,required,type,the,type,to,match,can,be,code,null,to,match,untyped,values,only,return,the,value,holder,for,the,argument,or,code,null,if,none,set;public,value,holder,get,indexed,argument,value,int,index,class,required,type,return,get,indexed,argument,value,index,required,type,null
ConstructorArgumentValues -> public ValueHolder getIndexedArgumentValue(int index, Class requiredType);1357119239;Get argument value for the given index in the constructor argument list._@param index the index in the constructor argument list_@param requiredType the type to match (can be {@code null} to match_untyped values only)_@return the ValueHolder for the argument, or {@code null} if none set;public ValueHolder getIndexedArgumentValue(int index, Class requiredType) {_		return getIndexedArgumentValue(index, requiredType, null)__	};get,argument,value,for,the,given,index,in,the,constructor,argument,list,param,index,the,index,in,the,constructor,argument,list,param,required,type,the,type,to,match,can,be,code,null,to,match,untyped,values,only,return,the,value,holder,for,the,argument,or,code,null,if,none,set;public,value,holder,get,indexed,argument,value,int,index,class,required,type,return,get,indexed,argument,value,index,required,type,null
ConstructorArgumentValues -> public ValueHolder getIndexedArgumentValue(int index, Class requiredType);1368482696;Get argument value for the given index in the constructor argument list._@param index the index in the constructor argument list_@param requiredType the type to match (can be {@code null} to match_untyped values only)_@return the ValueHolder for the argument, or {@code null} if none set;public ValueHolder getIndexedArgumentValue(int index, Class requiredType) {_		return getIndexedArgumentValue(index, requiredType, null)__	};get,argument,value,for,the,given,index,in,the,constructor,argument,list,param,index,the,index,in,the,constructor,argument,list,param,required,type,the,type,to,match,can,be,code,null,to,match,untyped,values,only,return,the,value,holder,for,the,argument,or,code,null,if,none,set;public,value,holder,get,indexed,argument,value,int,index,class,required,type,return,get,indexed,argument,value,index,required,type,null
ConstructorArgumentValues -> ValueHolder -> public String getType();1328020251;Return the type of the constructor argument.;public String getType() {_			return this.type__		};return,the,type,of,the,constructor,argument;public,string,get,type,return,this,type
ConstructorArgumentValues -> ValueHolder -> public String getType();1356735495;Return the type of the constructor argument.;public String getType() {_			return this.type__		};return,the,type,of,the,constructor,argument;public,string,get,type,return,this,type
ConstructorArgumentValues -> ValueHolder -> public String getType();1357119239;Return the type of the constructor argument.;public String getType() {_			return this.type__		};return,the,type,of,the,constructor,argument;public,string,get,type,return,this,type
ConstructorArgumentValues -> ValueHolder -> public String getType();1368482696;Return the type of the constructor argument.;public String getType() {_			return this.type__		};return,the,type,of,the,constructor,argument;public,string,get,type,return,this,type
ConstructorArgumentValues -> ValueHolder -> public String getType();1382789137;Return the type of the constructor argument.;public String getType() {_			return this.type__		};return,the,type,of,the,constructor,argument;public,string,get,type,return,this,type
ConstructorArgumentValues -> ValueHolder -> public String getType();1458323493;Return the type of the constructor argument.;public String getType() {_			return this.type__		};return,the,type,of,the,constructor,argument;public,string,get,type,return,this,type
ConstructorArgumentValues -> ValueHolder -> public String getType();1467730834;Return the type of the constructor argument.;public String getType() {_			return this.type__		};return,the,type,of,the,constructor,argument;public,string,get,type,return,this,type
ConstructorArgumentValues -> ValueHolder -> public String getType();1495868221;Return the type of the constructor argument.;public String getType() {_			return this.type__		};return,the,type,of,the,constructor,argument;public,string,get,type,return,this,type
ConstructorArgumentValues -> ValueHolder -> public String getType();1496259743;Return the type of the constructor argument.;public String getType() {_			return this.type__		};return,the,type,of,the,constructor,argument;public,string,get,type,return,this,type
ConstructorArgumentValues -> public ValueHolder getArgumentValue(int index, Class<?> requiredType, String requiredName);1382789137;Look for an argument value that either corresponds to the given index_in the constructor argument list or generically matches by type._@param index the index in the constructor argument list_@param requiredType the parameter type to match_@param requiredName the parameter name to match_@return the ValueHolder for the argument, or {@code null} if none set;public ValueHolder getArgumentValue(int index, Class<?> requiredType, String requiredName) {_		return getArgumentValue(index, requiredType, requiredName, null)__	};look,for,an,argument,value,that,either,corresponds,to,the,given,index,in,the,constructor,argument,list,or,generically,matches,by,type,param,index,the,index,in,the,constructor,argument,list,param,required,type,the,parameter,type,to,match,param,required,name,the,parameter,name,to,match,return,the,value,holder,for,the,argument,or,code,null,if,none,set;public,value,holder,get,argument,value,int,index,class,required,type,string,required,name,return,get,argument,value,index,required,type,required,name,null
ConstructorArgumentValues -> public ValueHolder getArgumentValue(int index, Class<?> requiredType, String requiredName);1458323493;Look for an argument value that either corresponds to the given index_in the constructor argument list or generically matches by type._@param index the index in the constructor argument list_@param requiredType the parameter type to match_@param requiredName the parameter name to match_@return the ValueHolder for the argument, or {@code null} if none set;public ValueHolder getArgumentValue(int index, Class<?> requiredType, String requiredName) {_		return getArgumentValue(index, requiredType, requiredName, null)__	};look,for,an,argument,value,that,either,corresponds,to,the,given,index,in,the,constructor,argument,list,or,generically,matches,by,type,param,index,the,index,in,the,constructor,argument,list,param,required,type,the,parameter,type,to,match,param,required,name,the,parameter,name,to,match,return,the,value,holder,for,the,argument,or,code,null,if,none,set;public,value,holder,get,argument,value,int,index,class,required,type,string,required,name,return,get,argument,value,index,required,type,required,name,null
ConstructorArgumentValues -> public ValueHolder getArgumentValue(int index, Class<?> requiredType, String requiredName);1467730834;Look for an argument value that either corresponds to the given index_in the constructor argument list or generically matches by type._@param index the index in the constructor argument list_@param requiredType the parameter type to match_@param requiredName the parameter name to match_@return the ValueHolder for the argument, or {@code null} if none set;public ValueHolder getArgumentValue(int index, Class<?> requiredType, String requiredName) {_		return getArgumentValue(index, requiredType, requiredName, null)__	};look,for,an,argument,value,that,either,corresponds,to,the,given,index,in,the,constructor,argument,list,or,generically,matches,by,type,param,index,the,index,in,the,constructor,argument,list,param,required,type,the,parameter,type,to,match,param,required,name,the,parameter,name,to,match,return,the,value,holder,for,the,argument,or,code,null,if,none,set;public,value,holder,get,argument,value,int,index,class,required,type,string,required,name,return,get,argument,value,index,required,type,required,name,null
ConstructorArgumentValues -> ValueHolder -> public void setName(String name);1328020251;Set the name of the constructor argument.;public void setName(String name) {_			this.name = name__		};set,the,name,of,the,constructor,argument;public,void,set,name,string,name,this,name,name
ConstructorArgumentValues -> ValueHolder -> public void setName(String name);1356735495;Set the name of the constructor argument.;public void setName(String name) {_			this.name = name__		};set,the,name,of,the,constructor,argument;public,void,set,name,string,name,this,name,name
ConstructorArgumentValues -> ValueHolder -> public void setName(String name);1357119239;Set the name of the constructor argument.;public void setName(String name) {_			this.name = name__		};set,the,name,of,the,constructor,argument;public,void,set,name,string,name,this,name,name
ConstructorArgumentValues -> ValueHolder -> public void setName(String name);1368482696;Set the name of the constructor argument.;public void setName(String name) {_			this.name = name__		};set,the,name,of,the,constructor,argument;public,void,set,name,string,name,this,name,name
ConstructorArgumentValues -> ValueHolder -> public void setName(String name);1382789137;Set the name of the constructor argument.;public void setName(String name) {_			this.name = name__		};set,the,name,of,the,constructor,argument;public,void,set,name,string,name,this,name,name
ConstructorArgumentValues -> ValueHolder -> public void setName(String name);1458323493;Set the name of the constructor argument.;public void setName(String name) {_			this.name = name__		};set,the,name,of,the,constructor,argument;public,void,set,name,string,name,this,name,name
ConstructorArgumentValues -> ValueHolder -> public void setName(String name);1467730834;Set the name of the constructor argument.;public void setName(String name) {_			this.name = name__		};set,the,name,of,the,constructor,argument;public,void,set,name,string,name,this,name,name
ConstructorArgumentValues -> ValueHolder -> public void setName(String name);1495868221;Set the name of the constructor argument.;public void setName(String name) {_			this.name = name__		};set,the,name,of,the,constructor,argument;public,void,set,name,string,name,this,name,name
ConstructorArgumentValues -> ValueHolder -> public void setName(String name);1496259743;Set the name of the constructor argument.;public void setName(String name) {_			this.name = name__		};set,the,name,of,the,constructor,argument;public,void,set,name,string,name,this,name,name
ConstructorArgumentValues -> ValueHolder -> public ValueHolder(@Nullable Object value);1496837955;Create a new ValueHolder for the given value._@param value the argument value;public ValueHolder(@Nullable Object value) {_			this.value = value__		};create,a,new,value,holder,for,the,given,value,param,value,the,argument,value;public,value,holder,nullable,object,value,this,value,value
ConstructorArgumentValues -> ValueHolder -> public ValueHolder(@Nullable Object value);1497250713;Create a new ValueHolder for the given value._@param value the argument value;public ValueHolder(@Nullable Object value) {_			this.value = value__		};create,a,new,value,holder,for,the,given,value,param,value,the,argument,value;public,value,holder,nullable,object,value,this,value,value
ConstructorArgumentValues -> ValueHolder -> public ValueHolder(@Nullable Object value);1498780456;Create a new ValueHolder for the given value._@param value the argument value;public ValueHolder(@Nullable Object value) {_			this.value = value__		};create,a,new,value,holder,for,the,given,value,param,value,the,argument,value;public,value,holder,nullable,object,value,this,value,value
ConstructorArgumentValues -> ValueHolder -> public ValueHolder(@Nullable Object value);1500448076;Create a new ValueHolder for the given value._@param value the argument value;public ValueHolder(@Nullable Object value) {_			this.value = value__		};create,a,new,value,holder,for,the,given,value,param,value,the,argument,value;public,value,holder,nullable,object,value,this,value,value
ConstructorArgumentValues -> ValueHolder -> public ValueHolder(@Nullable Object value);1531945062;Create a new ValueHolder for the given value._@param value the argument value;public ValueHolder(@Nullable Object value) {_			this.value = value__		};create,a,new,value,holder,for,the,given,value,param,value,the,argument,value;public,value,holder,nullable,object,value,this,value,value
ConstructorArgumentValues -> ValueHolder -> public ValueHolder(@Nullable Object value);1532981251;Create a new ValueHolder for the given value._@param value the argument value;public ValueHolder(@Nullable Object value) {_			this.value = value__		};create,a,new,value,holder,for,the,given,value,param,value,the,argument,value;public,value,holder,nullable,object,value,this,value,value
ConstructorArgumentValues -> ValueHolder -> public ValueHolder(@Nullable Object value);1549554785;Create a new ValueHolder for the given value._@param value the argument value;public ValueHolder(@Nullable Object value) {_			this.value = value__		};create,a,new,value,holder,for,the,given,value,param,value,the,argument,value;public,value,holder,nullable,object,value,this,value,value
ConstructorArgumentValues -> private void addOrMergeGenericArgumentValue(ValueHolder newValue);1328020251;Add a generic argument value, merging the new value (typically a collection)_with the current value if demanded: see {@link org.springframework.beans.Mergeable}._@param newValue the argument value in the form of a ValueHolder;private void addOrMergeGenericArgumentValue(ValueHolder newValue) {_		if (newValue.getName() != null) {_			for (Iterator<ValueHolder> it = this.genericArgumentValues.iterator()_ it.hasNext()_) {_				ValueHolder currentValue = it.next()__				if (newValue.getName().equals(currentValue.getName())) {_					if (newValue.getValue() instanceof Mergeable) {_						Mergeable mergeable = (Mergeable) newValue.getValue()__						if (mergeable.isMergeEnabled()) {_							newValue.setValue(mergeable.merge(currentValue.getValue()))__						}_					}_					it.remove()__				}_			}_		}_		this.genericArgumentValues.add(newValue)__	};add,a,generic,argument,value,merging,the,new,value,typically,a,collection,with,the,current,value,if,demanded,see,link,org,springframework,beans,mergeable,param,new,value,the,argument,value,in,the,form,of,a,value,holder;private,void,add,or,merge,generic,argument,value,value,holder,new,value,if,new,value,get,name,null,for,iterator,value,holder,it,this,generic,argument,values,iterator,it,has,next,value,holder,current,value,it,next,if,new,value,get,name,equals,current,value,get,name,if,new,value,get,value,instanceof,mergeable,mergeable,mergeable,mergeable,new,value,get,value,if,mergeable,is,merge,enabled,new,value,set,value,mergeable,merge,current,value,get,value,it,remove,this,generic,argument,values,add,new,value
ConstructorArgumentValues -> private void addOrMergeGenericArgumentValue(ValueHolder newValue);1356735495;Add a generic argument value, merging the new value (typically a collection)_with the current value if demanded: see {@link org.springframework.beans.Mergeable}._@param newValue the argument value in the form of a ValueHolder;private void addOrMergeGenericArgumentValue(ValueHolder newValue) {_		if (newValue.getName() != null) {_			for (Iterator<ValueHolder> it = this.genericArgumentValues.iterator()_ it.hasNext()_) {_				ValueHolder currentValue = it.next()__				if (newValue.getName().equals(currentValue.getName())) {_					if (newValue.getValue() instanceof Mergeable) {_						Mergeable mergeable = (Mergeable) newValue.getValue()__						if (mergeable.isMergeEnabled()) {_							newValue.setValue(mergeable.merge(currentValue.getValue()))__						}_					}_					it.remove()__				}_			}_		}_		this.genericArgumentValues.add(newValue)__	};add,a,generic,argument,value,merging,the,new,value,typically,a,collection,with,the,current,value,if,demanded,see,link,org,springframework,beans,mergeable,param,new,value,the,argument,value,in,the,form,of,a,value,holder;private,void,add,or,merge,generic,argument,value,value,holder,new,value,if,new,value,get,name,null,for,iterator,value,holder,it,this,generic,argument,values,iterator,it,has,next,value,holder,current,value,it,next,if,new,value,get,name,equals,current,value,get,name,if,new,value,get,value,instanceof,mergeable,mergeable,mergeable,mergeable,new,value,get,value,if,mergeable,is,merge,enabled,new,value,set,value,mergeable,merge,current,value,get,value,it,remove,this,generic,argument,values,add,new,value
ConstructorArgumentValues -> private void addOrMergeGenericArgumentValue(ValueHolder newValue);1357119239;Add a generic argument value, merging the new value (typically a collection)_with the current value if demanded: see {@link org.springframework.beans.Mergeable}._@param newValue the argument value in the form of a ValueHolder;private void addOrMergeGenericArgumentValue(ValueHolder newValue) {_		if (newValue.getName() != null) {_			for (Iterator<ValueHolder> it = this.genericArgumentValues.iterator()_ it.hasNext()_) {_				ValueHolder currentValue = it.next()__				if (newValue.getName().equals(currentValue.getName())) {_					if (newValue.getValue() instanceof Mergeable) {_						Mergeable mergeable = (Mergeable) newValue.getValue()__						if (mergeable.isMergeEnabled()) {_							newValue.setValue(mergeable.merge(currentValue.getValue()))__						}_					}_					it.remove()__				}_			}_		}_		this.genericArgumentValues.add(newValue)__	};add,a,generic,argument,value,merging,the,new,value,typically,a,collection,with,the,current,value,if,demanded,see,link,org,springframework,beans,mergeable,param,new,value,the,argument,value,in,the,form,of,a,value,holder;private,void,add,or,merge,generic,argument,value,value,holder,new,value,if,new,value,get,name,null,for,iterator,value,holder,it,this,generic,argument,values,iterator,it,has,next,value,holder,current,value,it,next,if,new,value,get,name,equals,current,value,get,name,if,new,value,get,value,instanceof,mergeable,mergeable,mergeable,mergeable,new,value,get,value,if,mergeable,is,merge,enabled,new,value,set,value,mergeable,merge,current,value,get,value,it,remove,this,generic,argument,values,add,new,value
ConstructorArgumentValues -> private void addOrMergeGenericArgumentValue(ValueHolder newValue);1368482696;Add a generic argument value, merging the new value (typically a collection)_with the current value if demanded: see {@link org.springframework.beans.Mergeable}._@param newValue the argument value in the form of a ValueHolder;private void addOrMergeGenericArgumentValue(ValueHolder newValue) {_		if (newValue.getName() != null) {_			for (Iterator<ValueHolder> it = this.genericArgumentValues.iterator()_ it.hasNext()_) {_				ValueHolder currentValue = it.next()__				if (newValue.getName().equals(currentValue.getName())) {_					if (newValue.getValue() instanceof Mergeable) {_						Mergeable mergeable = (Mergeable) newValue.getValue()__						if (mergeable.isMergeEnabled()) {_							newValue.setValue(mergeable.merge(currentValue.getValue()))__						}_					}_					it.remove()__				}_			}_		}_		this.genericArgumentValues.add(newValue)__	};add,a,generic,argument,value,merging,the,new,value,typically,a,collection,with,the,current,value,if,demanded,see,link,org,springframework,beans,mergeable,param,new,value,the,argument,value,in,the,form,of,a,value,holder;private,void,add,or,merge,generic,argument,value,value,holder,new,value,if,new,value,get,name,null,for,iterator,value,holder,it,this,generic,argument,values,iterator,it,has,next,value,holder,current,value,it,next,if,new,value,get,name,equals,current,value,get,name,if,new,value,get,value,instanceof,mergeable,mergeable,mergeable,mergeable,new,value,get,value,if,mergeable,is,merge,enabled,new,value,set,value,mergeable,merge,current,value,get,value,it,remove,this,generic,argument,values,add,new,value
ConstructorArgumentValues -> private void addOrMergeGenericArgumentValue(ValueHolder newValue);1382789137;Add a generic argument value, merging the new value (typically a collection)_with the current value if demanded: see {@link org.springframework.beans.Mergeable}._@param newValue the argument value in the form of a ValueHolder;private void addOrMergeGenericArgumentValue(ValueHolder newValue) {_		if (newValue.getName() != null) {_			for (Iterator<ValueHolder> it = this.genericArgumentValues.iterator()_ it.hasNext()_) {_				ValueHolder currentValue = it.next()__				if (newValue.getName().equals(currentValue.getName())) {_					if (newValue.getValue() instanceof Mergeable) {_						Mergeable mergeable = (Mergeable) newValue.getValue()__						if (mergeable.isMergeEnabled()) {_							newValue.setValue(mergeable.merge(currentValue.getValue()))__						}_					}_					it.remove()__				}_			}_		}_		this.genericArgumentValues.add(newValue)__	};add,a,generic,argument,value,merging,the,new,value,typically,a,collection,with,the,current,value,if,demanded,see,link,org,springframework,beans,mergeable,param,new,value,the,argument,value,in,the,form,of,a,value,holder;private,void,add,or,merge,generic,argument,value,value,holder,new,value,if,new,value,get,name,null,for,iterator,value,holder,it,this,generic,argument,values,iterator,it,has,next,value,holder,current,value,it,next,if,new,value,get,name,equals,current,value,get,name,if,new,value,get,value,instanceof,mergeable,mergeable,mergeable,mergeable,new,value,get,value,if,mergeable,is,merge,enabled,new,value,set,value,mergeable,merge,current,value,get,value,it,remove,this,generic,argument,values,add,new,value
ConstructorArgumentValues -> private void addOrMergeGenericArgumentValue(ValueHolder newValue);1458323493;Add a generic argument value, merging the new value (typically a collection)_with the current value if demanded: see {@link org.springframework.beans.Mergeable}._@param newValue the argument value in the form of a ValueHolder;private void addOrMergeGenericArgumentValue(ValueHolder newValue) {_		if (newValue.getName() != null) {_			for (Iterator<ValueHolder> it = this.genericArgumentValues.iterator()_ it.hasNext()_) {_				ValueHolder currentValue = it.next()__				if (newValue.getName().equals(currentValue.getName())) {_					if (newValue.getValue() instanceof Mergeable) {_						Mergeable mergeable = (Mergeable) newValue.getValue()__						if (mergeable.isMergeEnabled()) {_							newValue.setValue(mergeable.merge(currentValue.getValue()))__						}_					}_					it.remove()__				}_			}_		}_		this.genericArgumentValues.add(newValue)__	};add,a,generic,argument,value,merging,the,new,value,typically,a,collection,with,the,current,value,if,demanded,see,link,org,springframework,beans,mergeable,param,new,value,the,argument,value,in,the,form,of,a,value,holder;private,void,add,or,merge,generic,argument,value,value,holder,new,value,if,new,value,get,name,null,for,iterator,value,holder,it,this,generic,argument,values,iterator,it,has,next,value,holder,current,value,it,next,if,new,value,get,name,equals,current,value,get,name,if,new,value,get,value,instanceof,mergeable,mergeable,mergeable,mergeable,new,value,get,value,if,mergeable,is,merge,enabled,new,value,set,value,mergeable,merge,current,value,get,value,it,remove,this,generic,argument,values,add,new,value
ConstructorArgumentValues -> private void addOrMergeGenericArgumentValue(ValueHolder newValue);1467730834;Add a generic argument value, merging the new value (typically a collection)_with the current value if demanded: see {@link org.springframework.beans.Mergeable}._@param newValue the argument value in the form of a ValueHolder;private void addOrMergeGenericArgumentValue(ValueHolder newValue) {_		if (newValue.getName() != null) {_			for (Iterator<ValueHolder> it = this.genericArgumentValues.iterator()_ it.hasNext()_) {_				ValueHolder currentValue = it.next()__				if (newValue.getName().equals(currentValue.getName())) {_					if (newValue.getValue() instanceof Mergeable) {_						Mergeable mergeable = (Mergeable) newValue.getValue()__						if (mergeable.isMergeEnabled()) {_							newValue.setValue(mergeable.merge(currentValue.getValue()))__						}_					}_					it.remove()__				}_			}_		}_		this.genericArgumentValues.add(newValue)__	};add,a,generic,argument,value,merging,the,new,value,typically,a,collection,with,the,current,value,if,demanded,see,link,org,springframework,beans,mergeable,param,new,value,the,argument,value,in,the,form,of,a,value,holder;private,void,add,or,merge,generic,argument,value,value,holder,new,value,if,new,value,get,name,null,for,iterator,value,holder,it,this,generic,argument,values,iterator,it,has,next,value,holder,current,value,it,next,if,new,value,get,name,equals,current,value,get,name,if,new,value,get,value,instanceof,mergeable,mergeable,mergeable,mergeable,new,value,get,value,if,mergeable,is,merge,enabled,new,value,set,value,mergeable,merge,current,value,get,value,it,remove,this,generic,argument,values,add,new,value
ConstructorArgumentValues -> private void addOrMergeGenericArgumentValue(ValueHolder newValue);1495868221;Add a generic argument value, merging the new value (typically a collection)_with the current value if demanded: see {@link org.springframework.beans.Mergeable}._@param newValue the argument value in the form of a ValueHolder;private void addOrMergeGenericArgumentValue(ValueHolder newValue) {_		if (newValue.getName() != null) {_			for (Iterator<ValueHolder> it = this.genericArgumentValues.iterator()_ it.hasNext()_) {_				ValueHolder currentValue = it.next()__				if (newValue.getName().equals(currentValue.getName())) {_					if (newValue.getValue() instanceof Mergeable) {_						Mergeable mergeable = (Mergeable) newValue.getValue()__						if (mergeable.isMergeEnabled()) {_							newValue.setValue(mergeable.merge(currentValue.getValue()))__						}_					}_					it.remove()__				}_			}_		}_		this.genericArgumentValues.add(newValue)__	};add,a,generic,argument,value,merging,the,new,value,typically,a,collection,with,the,current,value,if,demanded,see,link,org,springframework,beans,mergeable,param,new,value,the,argument,value,in,the,form,of,a,value,holder;private,void,add,or,merge,generic,argument,value,value,holder,new,value,if,new,value,get,name,null,for,iterator,value,holder,it,this,generic,argument,values,iterator,it,has,next,value,holder,current,value,it,next,if,new,value,get,name,equals,current,value,get,name,if,new,value,get,value,instanceof,mergeable,mergeable,mergeable,mergeable,new,value,get,value,if,mergeable,is,merge,enabled,new,value,set,value,mergeable,merge,current,value,get,value,it,remove,this,generic,argument,values,add,new,value
ConstructorArgumentValues -> private void addOrMergeGenericArgumentValue(ValueHolder newValue);1496259743;Add a generic argument value, merging the new value (typically a collection)_with the current value if demanded: see {@link org.springframework.beans.Mergeable}._@param newValue the argument value in the form of a ValueHolder;private void addOrMergeGenericArgumentValue(ValueHolder newValue) {_		if (newValue.getName() != null) {_			for (Iterator<ValueHolder> it = this.genericArgumentValues.iterator()_ it.hasNext()_) {_				ValueHolder currentValue = it.next()__				if (newValue.getName().equals(currentValue.getName())) {_					if (newValue.getValue() instanceof Mergeable) {_						Mergeable mergeable = (Mergeable) newValue.getValue()__						if (mergeable.isMergeEnabled()) {_							newValue.setValue(mergeable.merge(currentValue.getValue()))__						}_					}_					it.remove()__				}_			}_		}_		this.genericArgumentValues.add(newValue)__	};add,a,generic,argument,value,merging,the,new,value,typically,a,collection,with,the,current,value,if,demanded,see,link,org,springframework,beans,mergeable,param,new,value,the,argument,value,in,the,form,of,a,value,holder;private,void,add,or,merge,generic,argument,value,value,holder,new,value,if,new,value,get,name,null,for,iterator,value,holder,it,this,generic,argument,values,iterator,it,has,next,value,holder,current,value,it,next,if,new,value,get,name,equals,current,value,get,name,if,new,value,get,value,instanceof,mergeable,mergeable,mergeable,mergeable,new,value,get,value,if,mergeable,is,merge,enabled,new,value,set,value,mergeable,merge,current,value,get,value,it,remove,this,generic,argument,values,add,new,value
ConstructorArgumentValues -> private void addOrMergeGenericArgumentValue(ValueHolder newValue);1496837955;Add a generic argument value, merging the new value (typically a collection)_with the current value if demanded: see {@link org.springframework.beans.Mergeable}._@param newValue the argument value in the form of a ValueHolder;private void addOrMergeGenericArgumentValue(ValueHolder newValue) {_		if (newValue.getName() != null) {_			for (Iterator<ValueHolder> it = this.genericArgumentValues.iterator()_ it.hasNext()_) {_				ValueHolder currentValue = it.next()__				if (newValue.getName().equals(currentValue.getName())) {_					if (newValue.getValue() instanceof Mergeable) {_						Mergeable mergeable = (Mergeable) newValue.getValue()__						if (mergeable.isMergeEnabled()) {_							newValue.setValue(mergeable.merge(currentValue.getValue()))__						}_					}_					it.remove()__				}_			}_		}_		this.genericArgumentValues.add(newValue)__	};add,a,generic,argument,value,merging,the,new,value,typically,a,collection,with,the,current,value,if,demanded,see,link,org,springframework,beans,mergeable,param,new,value,the,argument,value,in,the,form,of,a,value,holder;private,void,add,or,merge,generic,argument,value,value,holder,new,value,if,new,value,get,name,null,for,iterator,value,holder,it,this,generic,argument,values,iterator,it,has,next,value,holder,current,value,it,next,if,new,value,get,name,equals,current,value,get,name,if,new,value,get,value,instanceof,mergeable,mergeable,mergeable,mergeable,new,value,get,value,if,mergeable,is,merge,enabled,new,value,set,value,mergeable,merge,current,value,get,value,it,remove,this,generic,argument,values,add,new,value
ConstructorArgumentValues -> private void addOrMergeGenericArgumentValue(ValueHolder newValue);1497250713;Add a generic argument value, merging the new value (typically a collection)_with the current value if demanded: see {@link org.springframework.beans.Mergeable}._@param newValue the argument value in the form of a ValueHolder;private void addOrMergeGenericArgumentValue(ValueHolder newValue) {_		if (newValue.getName() != null) {_			for (Iterator<ValueHolder> it = this.genericArgumentValues.iterator()_ it.hasNext()_) {_				ValueHolder currentValue = it.next()__				if (newValue.getName().equals(currentValue.getName())) {_					if (newValue.getValue() instanceof Mergeable) {_						Mergeable mergeable = (Mergeable) newValue.getValue()__						if (mergeable.isMergeEnabled()) {_							newValue.setValue(mergeable.merge(currentValue.getValue()))__						}_					}_					it.remove()__				}_			}_		}_		this.genericArgumentValues.add(newValue)__	};add,a,generic,argument,value,merging,the,new,value,typically,a,collection,with,the,current,value,if,demanded,see,link,org,springframework,beans,mergeable,param,new,value,the,argument,value,in,the,form,of,a,value,holder;private,void,add,or,merge,generic,argument,value,value,holder,new,value,if,new,value,get,name,null,for,iterator,value,holder,it,this,generic,argument,values,iterator,it,has,next,value,holder,current,value,it,next,if,new,value,get,name,equals,current,value,get,name,if,new,value,get,value,instanceof,mergeable,mergeable,mergeable,mergeable,new,value,get,value,if,mergeable,is,merge,enabled,new,value,set,value,mergeable,merge,current,value,get,value,it,remove,this,generic,argument,values,add,new,value
ConstructorArgumentValues -> private void addOrMergeGenericArgumentValue(ValueHolder newValue);1498780456;Add a generic argument value, merging the new value (typically a collection)_with the current value if demanded: see {@link org.springframework.beans.Mergeable}._@param newValue the argument value in the form of a ValueHolder;private void addOrMergeGenericArgumentValue(ValueHolder newValue) {_		if (newValue.getName() != null) {_			for (Iterator<ValueHolder> it = this.genericArgumentValues.iterator()_ it.hasNext()_) {_				ValueHolder currentValue = it.next()__				if (newValue.getName().equals(currentValue.getName())) {_					if (newValue.getValue() instanceof Mergeable) {_						Mergeable mergeable = (Mergeable) newValue.getValue()__						if (mergeable.isMergeEnabled()) {_							newValue.setValue(mergeable.merge(currentValue.getValue()))__						}_					}_					it.remove()__				}_			}_		}_		this.genericArgumentValues.add(newValue)__	};add,a,generic,argument,value,merging,the,new,value,typically,a,collection,with,the,current,value,if,demanded,see,link,org,springframework,beans,mergeable,param,new,value,the,argument,value,in,the,form,of,a,value,holder;private,void,add,or,merge,generic,argument,value,value,holder,new,value,if,new,value,get,name,null,for,iterator,value,holder,it,this,generic,argument,values,iterator,it,has,next,value,holder,current,value,it,next,if,new,value,get,name,equals,current,value,get,name,if,new,value,get,value,instanceof,mergeable,mergeable,mergeable,mergeable,new,value,get,value,if,mergeable,is,merge,enabled,new,value,set,value,mergeable,merge,current,value,get,value,it,remove,this,generic,argument,values,add,new,value
ConstructorArgumentValues -> private void addOrMergeGenericArgumentValue(ValueHolder newValue);1500448076;Add a generic argument value, merging the new value (typically a collection)_with the current value if demanded: see {@link org.springframework.beans.Mergeable}._@param newValue the argument value in the form of a ValueHolder;private void addOrMergeGenericArgumentValue(ValueHolder newValue) {_		if (newValue.getName() != null) {_			for (Iterator<ValueHolder> it = this.genericArgumentValues.iterator()_ it.hasNext()_) {_				ValueHolder currentValue = it.next()__				if (newValue.getName().equals(currentValue.getName())) {_					if (newValue.getValue() instanceof Mergeable) {_						Mergeable mergeable = (Mergeable) newValue.getValue()__						if (mergeable.isMergeEnabled()) {_							newValue.setValue(mergeable.merge(currentValue.getValue()))__						}_					}_					it.remove()__				}_			}_		}_		this.genericArgumentValues.add(newValue)__	};add,a,generic,argument,value,merging,the,new,value,typically,a,collection,with,the,current,value,if,demanded,see,link,org,springframework,beans,mergeable,param,new,value,the,argument,value,in,the,form,of,a,value,holder;private,void,add,or,merge,generic,argument,value,value,holder,new,value,if,new,value,get,name,null,for,iterator,value,holder,it,this,generic,argument,values,iterator,it,has,next,value,holder,current,value,it,next,if,new,value,get,name,equals,current,value,get,name,if,new,value,get,value,instanceof,mergeable,mergeable,mergeable,mergeable,new,value,get,value,if,mergeable,is,merge,enabled,new,value,set,value,mergeable,merge,current,value,get,value,it,remove,this,generic,argument,values,add,new,value
ConstructorArgumentValues -> private void addOrMergeGenericArgumentValue(ValueHolder newValue);1531945062;Add a generic argument value, merging the new value (typically a collection)_with the current value if demanded: see {@link org.springframework.beans.Mergeable}._@param newValue the argument value in the form of a ValueHolder;private void addOrMergeGenericArgumentValue(ValueHolder newValue) {_		if (newValue.getName() != null) {_			for (Iterator<ValueHolder> it = this.genericArgumentValues.iterator()_ it.hasNext()_) {_				ValueHolder currentValue = it.next()__				if (newValue.getName().equals(currentValue.getName())) {_					if (newValue.getValue() instanceof Mergeable) {_						Mergeable mergeable = (Mergeable) newValue.getValue()__						if (mergeable.isMergeEnabled()) {_							newValue.setValue(mergeable.merge(currentValue.getValue()))__						}_					}_					it.remove()__				}_			}_		}_		this.genericArgumentValues.add(newValue)__	};add,a,generic,argument,value,merging,the,new,value,typically,a,collection,with,the,current,value,if,demanded,see,link,org,springframework,beans,mergeable,param,new,value,the,argument,value,in,the,form,of,a,value,holder;private,void,add,or,merge,generic,argument,value,value,holder,new,value,if,new,value,get,name,null,for,iterator,value,holder,it,this,generic,argument,values,iterator,it,has,next,value,holder,current,value,it,next,if,new,value,get,name,equals,current,value,get,name,if,new,value,get,value,instanceof,mergeable,mergeable,mergeable,mergeable,new,value,get,value,if,mergeable,is,merge,enabled,new,value,set,value,mergeable,merge,current,value,get,value,it,remove,this,generic,argument,values,add,new,value
ConstructorArgumentValues -> private void addOrMergeGenericArgumentValue(ValueHolder newValue);1532981251;Add a generic argument value, merging the new value (typically a collection)_with the current value if demanded: see {@link org.springframework.beans.Mergeable}._@param newValue the argument value in the form of a ValueHolder;private void addOrMergeGenericArgumentValue(ValueHolder newValue) {_		if (newValue.getName() != null) {_			for (Iterator<ValueHolder> it = this.genericArgumentValues.iterator()_ it.hasNext()_) {_				ValueHolder currentValue = it.next()__				if (newValue.getName().equals(currentValue.getName())) {_					if (newValue.getValue() instanceof Mergeable) {_						Mergeable mergeable = (Mergeable) newValue.getValue()__						if (mergeable.isMergeEnabled()) {_							newValue.setValue(mergeable.merge(currentValue.getValue()))__						}_					}_					it.remove()__				}_			}_		}_		this.genericArgumentValues.add(newValue)__	};add,a,generic,argument,value,merging,the,new,value,typically,a,collection,with,the,current,value,if,demanded,see,link,org,springframework,beans,mergeable,param,new,value,the,argument,value,in,the,form,of,a,value,holder;private,void,add,or,merge,generic,argument,value,value,holder,new,value,if,new,value,get,name,null,for,iterator,value,holder,it,this,generic,argument,values,iterator,it,has,next,value,holder,current,value,it,next,if,new,value,get,name,equals,current,value,get,name,if,new,value,get,value,instanceof,mergeable,mergeable,mergeable,mergeable,new,value,get,value,if,mergeable,is,merge,enabled,new,value,set,value,mergeable,merge,current,value,get,value,it,remove,this,generic,argument,values,add,new,value
ConstructorArgumentValues -> private void addOrMergeGenericArgumentValue(ValueHolder newValue);1549554785;Add a generic argument value, merging the new value (typically a collection)_with the current value if demanded: see {@link org.springframework.beans.Mergeable}._@param newValue the argument value in the form of a ValueHolder;private void addOrMergeGenericArgumentValue(ValueHolder newValue) {_		if (newValue.getName() != null) {_			for (Iterator<ValueHolder> it = this.genericArgumentValues.iterator()_ it.hasNext()_) {_				ValueHolder currentValue = it.next()__				if (newValue.getName().equals(currentValue.getName())) {_					if (newValue.getValue() instanceof Mergeable) {_						Mergeable mergeable = (Mergeable) newValue.getValue()__						if (mergeable.isMergeEnabled()) {_							newValue.setValue(mergeable.merge(currentValue.getValue()))__						}_					}_					it.remove()__				}_			}_		}_		this.genericArgumentValues.add(newValue)__	};add,a,generic,argument,value,merging,the,new,value,typically,a,collection,with,the,current,value,if,demanded,see,link,org,springframework,beans,mergeable,param,new,value,the,argument,value,in,the,form,of,a,value,holder;private,void,add,or,merge,generic,argument,value,value,holder,new,value,if,new,value,get,name,null,for,iterator,value,holder,it,this,generic,argument,values,iterator,it,has,next,value,holder,current,value,it,next,if,new,value,get,name,equals,current,value,get,name,if,new,value,get,value,instanceof,mergeable,mergeable,mergeable,mergeable,new,value,get,value,if,mergeable,is,merge,enabled,new,value,set,value,mergeable,merge,current,value,get,value,it,remove,this,generic,argument,values,add,new,value
ConstructorArgumentValues -> @Nullable 	public ValueHolder getGenericArgumentValue(Class<?> requiredType);1495868221;Look for a generic argument value that matches the given type._@param requiredType the type to match_@return the ValueHolder for the argument, or {@code null} if none set;@Nullable_	public ValueHolder getGenericArgumentValue(Class<?> requiredType) {_		return getGenericArgumentValue(requiredType, null, null)__	};look,for,a,generic,argument,value,that,matches,the,given,type,param,required,type,the,type,to,match,return,the,value,holder,for,the,argument,or,code,null,if,none,set;nullable,public,value,holder,get,generic,argument,value,class,required,type,return,get,generic,argument,value,required,type,null,null
ConstructorArgumentValues -> @Nullable 	public ValueHolder getGenericArgumentValue(Class<?> requiredType);1496259743;Look for a generic argument value that matches the given type._@param requiredType the type to match_@return the ValueHolder for the argument, or {@code null} if none set;@Nullable_	public ValueHolder getGenericArgumentValue(Class<?> requiredType) {_		return getGenericArgumentValue(requiredType, null, null)__	};look,for,a,generic,argument,value,that,matches,the,given,type,param,required,type,the,type,to,match,return,the,value,holder,for,the,argument,or,code,null,if,none,set;nullable,public,value,holder,get,generic,argument,value,class,required,type,return,get,generic,argument,value,required,type,null,null
ConstructorArgumentValues -> @Nullable 	public ValueHolder getGenericArgumentValue(Class<?> requiredType);1496837955;Look for a generic argument value that matches the given type._@param requiredType the type to match_@return the ValueHolder for the argument, or {@code null} if none set;@Nullable_	public ValueHolder getGenericArgumentValue(Class<?> requiredType) {_		return getGenericArgumentValue(requiredType, null, null)__	};look,for,a,generic,argument,value,that,matches,the,given,type,param,required,type,the,type,to,match,return,the,value,holder,for,the,argument,or,code,null,if,none,set;nullable,public,value,holder,get,generic,argument,value,class,required,type,return,get,generic,argument,value,required,type,null,null
ConstructorArgumentValues -> @Nullable 	public ValueHolder getGenericArgumentValue(Class<?> requiredType);1497250713;Look for a generic argument value that matches the given type._@param requiredType the type to match_@return the ValueHolder for the argument, or {@code null} if none set;@Nullable_	public ValueHolder getGenericArgumentValue(Class<?> requiredType) {_		return getGenericArgumentValue(requiredType, null, null)__	};look,for,a,generic,argument,value,that,matches,the,given,type,param,required,type,the,type,to,match,return,the,value,holder,for,the,argument,or,code,null,if,none,set;nullable,public,value,holder,get,generic,argument,value,class,required,type,return,get,generic,argument,value,required,type,null,null
ConstructorArgumentValues -> @Nullable 	public ValueHolder getGenericArgumentValue(Class<?> requiredType);1498780456;Look for a generic argument value that matches the given type._@param requiredType the type to match_@return the ValueHolder for the argument, or {@code null} if none set;@Nullable_	public ValueHolder getGenericArgumentValue(Class<?> requiredType) {_		return getGenericArgumentValue(requiredType, null, null)__	};look,for,a,generic,argument,value,that,matches,the,given,type,param,required,type,the,type,to,match,return,the,value,holder,for,the,argument,or,code,null,if,none,set;nullable,public,value,holder,get,generic,argument,value,class,required,type,return,get,generic,argument,value,required,type,null,null
ConstructorArgumentValues -> @Nullable 	public ValueHolder getGenericArgumentValue(Class<?> requiredType);1500448076;Look for a generic argument value that matches the given type._@param requiredType the type to match_@return the ValueHolder for the argument, or {@code null} if none set;@Nullable_	public ValueHolder getGenericArgumentValue(Class<?> requiredType) {_		return getGenericArgumentValue(requiredType, null, null)__	};look,for,a,generic,argument,value,that,matches,the,given,type,param,required,type,the,type,to,match,return,the,value,holder,for,the,argument,or,code,null,if,none,set;nullable,public,value,holder,get,generic,argument,value,class,required,type,return,get,generic,argument,value,required,type,null,null
ConstructorArgumentValues -> @Nullable 	public ValueHolder getGenericArgumentValue(Class<?> requiredType);1531945062;Look for a generic argument value that matches the given type._@param requiredType the type to match_@return the ValueHolder for the argument, or {@code null} if none set;@Nullable_	public ValueHolder getGenericArgumentValue(Class<?> requiredType) {_		return getGenericArgumentValue(requiredType, null, null)__	};look,for,a,generic,argument,value,that,matches,the,given,type,param,required,type,the,type,to,match,return,the,value,holder,for,the,argument,or,code,null,if,none,set;nullable,public,value,holder,get,generic,argument,value,class,required,type,return,get,generic,argument,value,required,type,null,null
ConstructorArgumentValues -> @Nullable 	public ValueHolder getGenericArgumentValue(Class<?> requiredType);1532981251;Look for a generic argument value that matches the given type._@param requiredType the type to match_@return the ValueHolder for the argument, or {@code null} if none set;@Nullable_	public ValueHolder getGenericArgumentValue(Class<?> requiredType) {_		return getGenericArgumentValue(requiredType, null, null)__	};look,for,a,generic,argument,value,that,matches,the,given,type,param,required,type,the,type,to,match,return,the,value,holder,for,the,argument,or,code,null,if,none,set;nullable,public,value,holder,get,generic,argument,value,class,required,type,return,get,generic,argument,value,required,type,null,null
ConstructorArgumentValues -> @Nullable 	public ValueHolder getGenericArgumentValue(Class<?> requiredType);1549554785;Look for a generic argument value that matches the given type._@param requiredType the type to match_@return the ValueHolder for the argument, or {@code null} if none set;@Nullable_	public ValueHolder getGenericArgumentValue(Class<?> requiredType) {_		return getGenericArgumentValue(requiredType, null, null)__	};look,for,a,generic,argument,value,that,matches,the,given,type,param,required,type,the,type,to,match,return,the,value,holder,for,the,argument,or,code,null,if,none,set;nullable,public,value,holder,get,generic,argument,value,class,required,type,return,get,generic,argument,value,required,type,null,null
ConstructorArgumentValues -> public void addArgumentValues(@Nullable ConstructorArgumentValues other);1496837955;Copy all given argument values into this object, using separate holder_instances to keep the values independent from the original object._<p>Note: Identical ValueHolder instances will only be registered once,_to allow for merging and re-merging of argument value definitions. Distinct_ValueHolder instances carrying the same content are of course allowed.;public void addArgumentValues(@Nullable ConstructorArgumentValues other) {_		if (other != null) {_			for (Map.Entry<Integer, ValueHolder> entry : other.indexedArgumentValues.entrySet()) {_				addOrMergeIndexedArgumentValue(entry.getKey(), entry.getValue().copy())__			}_			for (ValueHolder valueHolder : other.genericArgumentValues) {_				if (!this.genericArgumentValues.contains(valueHolder)) {_					addOrMergeGenericArgumentValue(valueHolder.copy())__				}_			}_		}_	};copy,all,given,argument,values,into,this,object,using,separate,holder,instances,to,keep,the,values,independent,from,the,original,object,p,note,identical,value,holder,instances,will,only,be,registered,once,to,allow,for,merging,and,re,merging,of,argument,value,definitions,distinct,value,holder,instances,carrying,the,same,content,are,of,course,allowed;public,void,add,argument,values,nullable,constructor,argument,values,other,if,other,null,for,map,entry,integer,value,holder,entry,other,indexed,argument,values,entry,set,add,or,merge,indexed,argument,value,entry,get,key,entry,get,value,copy,for,value,holder,value,holder,other,generic,argument,values,if,this,generic,argument,values,contains,value,holder,add,or,merge,generic,argument,value,value,holder,copy
ConstructorArgumentValues -> public void addArgumentValues(@Nullable ConstructorArgumentValues other);1497250713;Copy all given argument values into this object, using separate holder_instances to keep the values independent from the original object._<p>Note: Identical ValueHolder instances will only be registered once,_to allow for merging and re-merging of argument value definitions. Distinct_ValueHolder instances carrying the same content are of course allowed.;public void addArgumentValues(@Nullable ConstructorArgumentValues other) {_		if (other != null) {_			other.indexedArgumentValues.forEach(_				(index, argValue) -> addOrMergeIndexedArgumentValue(index, argValue.copy())_			)__			other.genericArgumentValues.stream()_					.filter(valueHolder -> !this.genericArgumentValues.contains(valueHolder))_					.forEach(valueHolder -> addOrMergeGenericArgumentValue(valueHolder.copy()))__		}_	};copy,all,given,argument,values,into,this,object,using,separate,holder,instances,to,keep,the,values,independent,from,the,original,object,p,note,identical,value,holder,instances,will,only,be,registered,once,to,allow,for,merging,and,re,merging,of,argument,value,definitions,distinct,value,holder,instances,carrying,the,same,content,are,of,course,allowed;public,void,add,argument,values,nullable,constructor,argument,values,other,if,other,null,other,indexed,argument,values,for,each,index,arg,value,add,or,merge,indexed,argument,value,index,arg,value,copy,other,generic,argument,values,stream,filter,value,holder,this,generic,argument,values,contains,value,holder,for,each,value,holder,add,or,merge,generic,argument,value,value,holder,copy
ConstructorArgumentValues -> public void addArgumentValues(@Nullable ConstructorArgumentValues other);1498780456;Copy all given argument values into this object, using separate holder_instances to keep the values independent from the original object._<p>Note: Identical ValueHolder instances will only be registered once,_to allow for merging and re-merging of argument value definitions. Distinct_ValueHolder instances carrying the same content are of course allowed.;public void addArgumentValues(@Nullable ConstructorArgumentValues other) {_		if (other != null) {_			other.indexedArgumentValues.forEach(_				(index, argValue) -> addOrMergeIndexedArgumentValue(index, argValue.copy())_			)__			other.genericArgumentValues.stream()_					.filter(valueHolder -> !this.genericArgumentValues.contains(valueHolder))_					.forEach(valueHolder -> addOrMergeGenericArgumentValue(valueHolder.copy()))__		}_	};copy,all,given,argument,values,into,this,object,using,separate,holder,instances,to,keep,the,values,independent,from,the,original,object,p,note,identical,value,holder,instances,will,only,be,registered,once,to,allow,for,merging,and,re,merging,of,argument,value,definitions,distinct,value,holder,instances,carrying,the,same,content,are,of,course,allowed;public,void,add,argument,values,nullable,constructor,argument,values,other,if,other,null,other,indexed,argument,values,for,each,index,arg,value,add,or,merge,indexed,argument,value,index,arg,value,copy,other,generic,argument,values,stream,filter,value,holder,this,generic,argument,values,contains,value,holder,for,each,value,holder,add,or,merge,generic,argument,value,value,holder,copy
ConstructorArgumentValues -> public void addArgumentValues(@Nullable ConstructorArgumentValues other);1500448076;Copy all given argument values into this object, using separate holder_instances to keep the values independent from the original object._<p>Note: Identical ValueHolder instances will only be registered once,_to allow for merging and re-merging of argument value definitions. Distinct_ValueHolder instances carrying the same content are of course allowed.;public void addArgumentValues(@Nullable ConstructorArgumentValues other) {_		if (other != null) {_			other.indexedArgumentValues.forEach(_				(index, argValue) -> addOrMergeIndexedArgumentValue(index, argValue.copy())_			)__			other.genericArgumentValues.stream()_					.filter(valueHolder -> !this.genericArgumentValues.contains(valueHolder))_					.forEach(valueHolder -> addOrMergeGenericArgumentValue(valueHolder.copy()))__		}_	};copy,all,given,argument,values,into,this,object,using,separate,holder,instances,to,keep,the,values,independent,from,the,original,object,p,note,identical,value,holder,instances,will,only,be,registered,once,to,allow,for,merging,and,re,merging,of,argument,value,definitions,distinct,value,holder,instances,carrying,the,same,content,are,of,course,allowed;public,void,add,argument,values,nullable,constructor,argument,values,other,if,other,null,other,indexed,argument,values,for,each,index,arg,value,add,or,merge,indexed,argument,value,index,arg,value,copy,other,generic,argument,values,stream,filter,value,holder,this,generic,argument,values,contains,value,holder,for,each,value,holder,add,or,merge,generic,argument,value,value,holder,copy
ConstructorArgumentValues -> public void addArgumentValues(@Nullable ConstructorArgumentValues other);1531945062;Copy all given argument values into this object, using separate holder_instances to keep the values independent from the original object._<p>Note: Identical ValueHolder instances will only be registered once,_to allow for merging and re-merging of argument value definitions. Distinct_ValueHolder instances carrying the same content are of course allowed.;public void addArgumentValues(@Nullable ConstructorArgumentValues other) {_		if (other != null) {_			other.indexedArgumentValues.forEach(_				(index, argValue) -> addOrMergeIndexedArgumentValue(index, argValue.copy())_			)__			other.genericArgumentValues.stream()_					.filter(valueHolder -> !this.genericArgumentValues.contains(valueHolder))_					.forEach(valueHolder -> addOrMergeGenericArgumentValue(valueHolder.copy()))__		}_	};copy,all,given,argument,values,into,this,object,using,separate,holder,instances,to,keep,the,values,independent,from,the,original,object,p,note,identical,value,holder,instances,will,only,be,registered,once,to,allow,for,merging,and,re,merging,of,argument,value,definitions,distinct,value,holder,instances,carrying,the,same,content,are,of,course,allowed;public,void,add,argument,values,nullable,constructor,argument,values,other,if,other,null,other,indexed,argument,values,for,each,index,arg,value,add,or,merge,indexed,argument,value,index,arg,value,copy,other,generic,argument,values,stream,filter,value,holder,this,generic,argument,values,contains,value,holder,for,each,value,holder,add,or,merge,generic,argument,value,value,holder,copy
ConstructorArgumentValues -> public void addArgumentValues(@Nullable ConstructorArgumentValues other);1532981251;Copy all given argument values into this object, using separate holder_instances to keep the values independent from the original object._<p>Note: Identical ValueHolder instances will only be registered once,_to allow for merging and re-merging of argument value definitions. Distinct_ValueHolder instances carrying the same content are of course allowed.;public void addArgumentValues(@Nullable ConstructorArgumentValues other) {_		if (other != null) {_			other.indexedArgumentValues.forEach(_				(index, argValue) -> addOrMergeIndexedArgumentValue(index, argValue.copy())_			)__			other.genericArgumentValues.stream()_					.filter(valueHolder -> !this.genericArgumentValues.contains(valueHolder))_					.forEach(valueHolder -> addOrMergeGenericArgumentValue(valueHolder.copy()))__		}_	};copy,all,given,argument,values,into,this,object,using,separate,holder,instances,to,keep,the,values,independent,from,the,original,object,p,note,identical,value,holder,instances,will,only,be,registered,once,to,allow,for,merging,and,re,merging,of,argument,value,definitions,distinct,value,holder,instances,carrying,the,same,content,are,of,course,allowed;public,void,add,argument,values,nullable,constructor,argument,values,other,if,other,null,other,indexed,argument,values,for,each,index,arg,value,add,or,merge,indexed,argument,value,index,arg,value,copy,other,generic,argument,values,stream,filter,value,holder,this,generic,argument,values,contains,value,holder,for,each,value,holder,add,or,merge,generic,argument,value,value,holder,copy
ConstructorArgumentValues -> public void addArgumentValues(@Nullable ConstructorArgumentValues other);1549554785;Copy all given argument values into this object, using separate holder_instances to keep the values independent from the original object._<p>Note: Identical ValueHolder instances will only be registered once,_to allow for merging and re-merging of argument value definitions. Distinct_ValueHolder instances carrying the same content are of course allowed.;public void addArgumentValues(@Nullable ConstructorArgumentValues other) {_		if (other != null) {_			other.indexedArgumentValues.forEach(_				(index, argValue) -> addOrMergeIndexedArgumentValue(index, argValue.copy())_			)__			other.genericArgumentValues.stream()_					.filter(valueHolder -> !this.genericArgumentValues.contains(valueHolder))_					.forEach(valueHolder -> addOrMergeGenericArgumentValue(valueHolder.copy()))__		}_	};copy,all,given,argument,values,into,this,object,using,separate,holder,instances,to,keep,the,values,independent,from,the,original,object,p,note,identical,value,holder,instances,will,only,be,registered,once,to,allow,for,merging,and,re,merging,of,argument,value,definitions,distinct,value,holder,instances,carrying,the,same,content,are,of,course,allowed;public,void,add,argument,values,nullable,constructor,argument,values,other,if,other,null,other,indexed,argument,values,for,each,index,arg,value,add,or,merge,indexed,argument,value,index,arg,value,copy,other,generic,argument,values,stream,filter,value,holder,this,generic,argument,values,contains,value,holder,for,each,value,holder,add,or,merge,generic,argument,value,value,holder,copy
ConstructorArgumentValues -> ValueHolder -> @Nullable 		public synchronized Object getConvertedValue();1498780456;Return the converted value of the constructor argument,_after processed type conversion.;@Nullable_		public synchronized Object getConvertedValue() {_			return this.convertedValue__		};return,the,converted,value,of,the,constructor,argument,after,processed,type,conversion;nullable,public,synchronized,object,get,converted,value,return,this,converted,value
ConstructorArgumentValues -> ValueHolder -> @Nullable 		public synchronized Object getConvertedValue();1500448076;Return the converted value of the constructor argument,_after processed type conversion.;@Nullable_		public synchronized Object getConvertedValue() {_			return this.convertedValue__		};return,the,converted,value,of,the,constructor,argument,after,processed,type,conversion;nullable,public,synchronized,object,get,converted,value,return,this,converted,value
ConstructorArgumentValues -> ValueHolder -> @Nullable 		public synchronized Object getConvertedValue();1531945062;Return the converted value of the constructor argument,_after processed type conversion.;@Nullable_		public synchronized Object getConvertedValue() {_			return this.convertedValue__		};return,the,converted,value,of,the,constructor,argument,after,processed,type,conversion;nullable,public,synchronized,object,get,converted,value,return,this,converted,value
ConstructorArgumentValues -> ValueHolder -> @Nullable 		public synchronized Object getConvertedValue();1532981251;Return the converted value of the constructor argument,_after processed type conversion.;@Nullable_		public synchronized Object getConvertedValue() {_			return this.convertedValue__		};return,the,converted,value,of,the,constructor,argument,after,processed,type,conversion;nullable,public,synchronized,object,get,converted,value,return,this,converted,value
ConstructorArgumentValues -> ValueHolder -> @Nullable 		public synchronized Object getConvertedValue();1549554785;Return the converted value of the constructor argument,_after processed type conversion.;@Nullable_		public synchronized Object getConvertedValue() {_			return this.convertedValue__		};return,the,converted,value,of,the,constructor,argument,after,processed,type,conversion;nullable,public,synchronized,object,get,converted,value,return,this,converted,value
ConstructorArgumentValues -> public List<ValueHolder> getGenericArgumentValues();1328020251;Return the list of generic argument values._@return unmodifiable List of ValueHolders_@see ValueHolder;public List<ValueHolder> getGenericArgumentValues() {_		return Collections.unmodifiableList(this.genericArgumentValues)__	};return,the,list,of,generic,argument,values,return,unmodifiable,list,of,value,holders,see,value,holder;public,list,value,holder,get,generic,argument,values,return,collections,unmodifiable,list,this,generic,argument,values
ConstructorArgumentValues -> public List<ValueHolder> getGenericArgumentValues();1356735495;Return the list of generic argument values._@return unmodifiable List of ValueHolders_@see ValueHolder;public List<ValueHolder> getGenericArgumentValues() {_		return Collections.unmodifiableList(this.genericArgumentValues)__	};return,the,list,of,generic,argument,values,return,unmodifiable,list,of,value,holders,see,value,holder;public,list,value,holder,get,generic,argument,values,return,collections,unmodifiable,list,this,generic,argument,values
ConstructorArgumentValues -> public List<ValueHolder> getGenericArgumentValues();1357119239;Return the list of generic argument values._@return unmodifiable List of ValueHolders_@see ValueHolder;public List<ValueHolder> getGenericArgumentValues() {_		return Collections.unmodifiableList(this.genericArgumentValues)__	};return,the,list,of,generic,argument,values,return,unmodifiable,list,of,value,holders,see,value,holder;public,list,value,holder,get,generic,argument,values,return,collections,unmodifiable,list,this,generic,argument,values
ConstructorArgumentValues -> public List<ValueHolder> getGenericArgumentValues();1368482696;Return the list of generic argument values._@return unmodifiable List of ValueHolders_@see ValueHolder;public List<ValueHolder> getGenericArgumentValues() {_		return Collections.unmodifiableList(this.genericArgumentValues)__	};return,the,list,of,generic,argument,values,return,unmodifiable,list,of,value,holders,see,value,holder;public,list,value,holder,get,generic,argument,values,return,collections,unmodifiable,list,this,generic,argument,values
ConstructorArgumentValues -> public List<ValueHolder> getGenericArgumentValues();1382789137;Return the list of generic argument values._@return unmodifiable List of ValueHolders_@see ValueHolder;public List<ValueHolder> getGenericArgumentValues() {_		return Collections.unmodifiableList(this.genericArgumentValues)__	};return,the,list,of,generic,argument,values,return,unmodifiable,list,of,value,holders,see,value,holder;public,list,value,holder,get,generic,argument,values,return,collections,unmodifiable,list,this,generic,argument,values
ConstructorArgumentValues -> public List<ValueHolder> getGenericArgumentValues();1458323493;Return the list of generic argument values._@return unmodifiable List of ValueHolders_@see ValueHolder;public List<ValueHolder> getGenericArgumentValues() {_		return Collections.unmodifiableList(this.genericArgumentValues)__	};return,the,list,of,generic,argument,values,return,unmodifiable,list,of,value,holders,see,value,holder;public,list,value,holder,get,generic,argument,values,return,collections,unmodifiable,list,this,generic,argument,values
ConstructorArgumentValues -> public List<ValueHolder> getGenericArgumentValues();1467730834;Return the list of generic argument values._@return unmodifiable List of ValueHolders_@see ValueHolder;public List<ValueHolder> getGenericArgumentValues() {_		return Collections.unmodifiableList(this.genericArgumentValues)__	};return,the,list,of,generic,argument,values,return,unmodifiable,list,of,value,holders,see,value,holder;public,list,value,holder,get,generic,argument,values,return,collections,unmodifiable,list,this,generic,argument,values
ConstructorArgumentValues -> public List<ValueHolder> getGenericArgumentValues();1495868221;Return the list of generic argument values._@return unmodifiable List of ValueHolders_@see ValueHolder;public List<ValueHolder> getGenericArgumentValues() {_		return Collections.unmodifiableList(this.genericArgumentValues)__	};return,the,list,of,generic,argument,values,return,unmodifiable,list,of,value,holders,see,value,holder;public,list,value,holder,get,generic,argument,values,return,collections,unmodifiable,list,this,generic,argument,values
ConstructorArgumentValues -> public List<ValueHolder> getGenericArgumentValues();1496259743;Return the list of generic argument values._@return unmodifiable List of ValueHolders_@see ValueHolder;public List<ValueHolder> getGenericArgumentValues() {_		return Collections.unmodifiableList(this.genericArgumentValues)__	};return,the,list,of,generic,argument,values,return,unmodifiable,list,of,value,holders,see,value,holder;public,list,value,holder,get,generic,argument,values,return,collections,unmodifiable,list,this,generic,argument,values
ConstructorArgumentValues -> public List<ValueHolder> getGenericArgumentValues();1496837955;Return the list of generic argument values._@return unmodifiable List of ValueHolders_@see ValueHolder;public List<ValueHolder> getGenericArgumentValues() {_		return Collections.unmodifiableList(this.genericArgumentValues)__	};return,the,list,of,generic,argument,values,return,unmodifiable,list,of,value,holders,see,value,holder;public,list,value,holder,get,generic,argument,values,return,collections,unmodifiable,list,this,generic,argument,values
ConstructorArgumentValues -> public List<ValueHolder> getGenericArgumentValues();1497250713;Return the list of generic argument values._@return unmodifiable List of ValueHolders_@see ValueHolder;public List<ValueHolder> getGenericArgumentValues() {_		return Collections.unmodifiableList(this.genericArgumentValues)__	};return,the,list,of,generic,argument,values,return,unmodifiable,list,of,value,holders,see,value,holder;public,list,value,holder,get,generic,argument,values,return,collections,unmodifiable,list,this,generic,argument,values
ConstructorArgumentValues -> public List<ValueHolder> getGenericArgumentValues();1498780456;Return the list of generic argument values._@return unmodifiable List of ValueHolders_@see ValueHolder;public List<ValueHolder> getGenericArgumentValues() {_		return Collections.unmodifiableList(this.genericArgumentValues)__	};return,the,list,of,generic,argument,values,return,unmodifiable,list,of,value,holders,see,value,holder;public,list,value,holder,get,generic,argument,values,return,collections,unmodifiable,list,this,generic,argument,values
ConstructorArgumentValues -> public List<ValueHolder> getGenericArgumentValues();1500448076;Return the list of generic argument values._@return unmodifiable List of ValueHolders_@see ValueHolder;public List<ValueHolder> getGenericArgumentValues() {_		return Collections.unmodifiableList(this.genericArgumentValues)__	};return,the,list,of,generic,argument,values,return,unmodifiable,list,of,value,holders,see,value,holder;public,list,value,holder,get,generic,argument,values,return,collections,unmodifiable,list,this,generic,argument,values
ConstructorArgumentValues -> public List<ValueHolder> getGenericArgumentValues();1531945062;Return the list of generic argument values._@return unmodifiable List of ValueHolders_@see ValueHolder;public List<ValueHolder> getGenericArgumentValues() {_		return Collections.unmodifiableList(this.genericArgumentValues)__	};return,the,list,of,generic,argument,values,return,unmodifiable,list,of,value,holders,see,value,holder;public,list,value,holder,get,generic,argument,values,return,collections,unmodifiable,list,this,generic,argument,values
ConstructorArgumentValues -> public List<ValueHolder> getGenericArgumentValues();1532981251;Return the list of generic argument values._@return unmodifiable List of ValueHolders_@see ValueHolder;public List<ValueHolder> getGenericArgumentValues() {_		return Collections.unmodifiableList(this.genericArgumentValues)__	};return,the,list,of,generic,argument,values,return,unmodifiable,list,of,value,holders,see,value,holder;public,list,value,holder,get,generic,argument,values,return,collections,unmodifiable,list,this,generic,argument,values
ConstructorArgumentValues -> public List<ValueHolder> getGenericArgumentValues();1549554785;Return the list of generic argument values._@return unmodifiable List of ValueHolders_@see ValueHolder;public List<ValueHolder> getGenericArgumentValues() {_		return Collections.unmodifiableList(this.genericArgumentValues)__	};return,the,list,of,generic,argument,values,return,unmodifiable,list,of,value,holders,see,value,holder;public,list,value,holder,get,generic,argument,values,return,collections,unmodifiable,list,this,generic,argument,values
ConstructorArgumentValues -> public ValueHolder getIndexedArgumentValue(int index, Class<?> requiredType, String requiredName);1382789137;Get argument value for the given index in the constructor argument list._@param index the index in the constructor argument list_@param requiredType the type to match (can be {@code null} to match_untyped values only)_@param requiredName the type to match (can be {@code null} to match_unnamed values only)_@return the ValueHolder for the argument, or {@code null} if none set;public ValueHolder getIndexedArgumentValue(int index, Class<?> requiredType, String requiredName) {_		Assert.isTrue(index >= 0, "Index must not be negative")__		ValueHolder valueHolder = this.indexedArgumentValues.get(index)__		if (valueHolder != null &&_				(valueHolder.getType() == null ||_						(requiredType != null && ClassUtils.matchesTypeName(requiredType, valueHolder.getType()))) &&_				(valueHolder.getName() == null ||_						(requiredName != null && requiredName.equals(valueHolder.getName())))) {_			return valueHolder__		}_		return null__	};get,argument,value,for,the,given,index,in,the,constructor,argument,list,param,index,the,index,in,the,constructor,argument,list,param,required,type,the,type,to,match,can,be,code,null,to,match,untyped,values,only,param,required,name,the,type,to,match,can,be,code,null,to,match,unnamed,values,only,return,the,value,holder,for,the,argument,or,code,null,if,none,set;public,value,holder,get,indexed,argument,value,int,index,class,required,type,string,required,name,assert,is,true,index,0,index,must,not,be,negative,value,holder,value,holder,this,indexed,argument,values,get,index,if,value,holder,null,value,holder,get,type,null,required,type,null,class,utils,matches,type,name,required,type,value,holder,get,type,value,holder,get,name,null,required,name,null,required,name,equals,value,holder,get,name,return,value,holder,return,null
ConstructorArgumentValues -> public ValueHolder getIndexedArgumentValue(int index, Class<?> requiredType, String requiredName);1458323493;Get argument value for the given index in the constructor argument list._@param index the index in the constructor argument list_@param requiredType the type to match (can be {@code null} to match_untyped values only)_@param requiredName the type to match (can be {@code null} to match_unnamed values only, or empty String to match any name)_@return the ValueHolder for the argument, or {@code null} if none set;public ValueHolder getIndexedArgumentValue(int index, Class<?> requiredType, String requiredName) {_		Assert.isTrue(index >= 0, "Index must not be negative")__		ValueHolder valueHolder = this.indexedArgumentValues.get(index)__		if (valueHolder != null &&_				(valueHolder.getType() == null ||_						(requiredType != null && ClassUtils.matchesTypeName(requiredType, valueHolder.getType()))) &&_				(valueHolder.getName() == null || "".equals(requiredName) ||_						(requiredName != null && requiredName.equals(valueHolder.getName())))) {_			return valueHolder__		}_		return null__	};get,argument,value,for,the,given,index,in,the,constructor,argument,list,param,index,the,index,in,the,constructor,argument,list,param,required,type,the,type,to,match,can,be,code,null,to,match,untyped,values,only,param,required,name,the,type,to,match,can,be,code,null,to,match,unnamed,values,only,or,empty,string,to,match,any,name,return,the,value,holder,for,the,argument,or,code,null,if,none,set;public,value,holder,get,indexed,argument,value,int,index,class,required,type,string,required,name,assert,is,true,index,0,index,must,not,be,negative,value,holder,value,holder,this,indexed,argument,values,get,index,if,value,holder,null,value,holder,get,type,null,required,type,null,class,utils,matches,type,name,required,type,value,holder,get,type,value,holder,get,name,null,equals,required,name,required,name,null,required,name,equals,value,holder,get,name,return,value,holder,return,null
ConstructorArgumentValues -> public ValueHolder getIndexedArgumentValue(int index, Class<?> requiredType, String requiredName);1467730834;Get argument value for the given index in the constructor argument list._@param index the index in the constructor argument list_@param requiredType the type to match (can be {@code null} to match_untyped values only)_@param requiredName the type to match (can be {@code null} to match_unnamed values only, or empty String to match any name)_@return the ValueHolder for the argument, or {@code null} if none set;public ValueHolder getIndexedArgumentValue(int index, Class<?> requiredType, String requiredName) {_		Assert.isTrue(index >= 0, "Index must not be negative")__		ValueHolder valueHolder = this.indexedArgumentValues.get(index)__		if (valueHolder != null &&_				(valueHolder.getType() == null ||_						(requiredType != null && ClassUtils.matchesTypeName(requiredType, valueHolder.getType()))) &&_				(valueHolder.getName() == null || "".equals(requiredName) ||_						(requiredName != null && requiredName.equals(valueHolder.getName())))) {_			return valueHolder__		}_		return null__	};get,argument,value,for,the,given,index,in,the,constructor,argument,list,param,index,the,index,in,the,constructor,argument,list,param,required,type,the,type,to,match,can,be,code,null,to,match,untyped,values,only,param,required,name,the,type,to,match,can,be,code,null,to,match,unnamed,values,only,or,empty,string,to,match,any,name,return,the,value,holder,for,the,argument,or,code,null,if,none,set;public,value,holder,get,indexed,argument,value,int,index,class,required,type,string,required,name,assert,is,true,index,0,index,must,not,be,negative,value,holder,value,holder,this,indexed,argument,values,get,index,if,value,holder,null,value,holder,get,type,null,required,type,null,class,utils,matches,type,name,required,type,value,holder,get,type,value,holder,get,name,null,equals,required,name,required,name,null,required,name,equals,value,holder,get,name,return,value,holder,return,null
ConstructorArgumentValues -> public ValueHolder getGenericArgumentValue(Class requiredType);1328020251;Look for a generic argument value that matches the given type._@param requiredType the type to match_@return the ValueHolder for the argument, or <code>null</code> if none set;public ValueHolder getGenericArgumentValue(Class requiredType) {_		return getGenericArgumentValue(requiredType, null, null)__	};look,for,a,generic,argument,value,that,matches,the,given,type,param,required,type,the,type,to,match,return,the,value,holder,for,the,argument,or,code,null,code,if,none,set;public,value,holder,get,generic,argument,value,class,required,type,return,get,generic,argument,value,required,type,null,null
ConstructorArgumentValues -> public ValueHolder getGenericArgumentValue(Class requiredType);1356735495;Look for a generic argument value that matches the given type._@param requiredType the type to match_@return the ValueHolder for the argument, or {@code null} if none set;public ValueHolder getGenericArgumentValue(Class requiredType) {_		return getGenericArgumentValue(requiredType, null, null)__	};look,for,a,generic,argument,value,that,matches,the,given,type,param,required,type,the,type,to,match,return,the,value,holder,for,the,argument,or,code,null,if,none,set;public,value,holder,get,generic,argument,value,class,required,type,return,get,generic,argument,value,required,type,null,null
ConstructorArgumentValues -> public ValueHolder getGenericArgumentValue(Class requiredType);1357119239;Look for a generic argument value that matches the given type._@param requiredType the type to match_@return the ValueHolder for the argument, or {@code null} if none set;public ValueHolder getGenericArgumentValue(Class requiredType) {_		return getGenericArgumentValue(requiredType, null, null)__	};look,for,a,generic,argument,value,that,matches,the,given,type,param,required,type,the,type,to,match,return,the,value,holder,for,the,argument,or,code,null,if,none,set;public,value,holder,get,generic,argument,value,class,required,type,return,get,generic,argument,value,required,type,null,null
ConstructorArgumentValues -> public ValueHolder getGenericArgumentValue(Class requiredType);1368482696;Look for a generic argument value that matches the given type._@param requiredType the type to match_@return the ValueHolder for the argument, or {@code null} if none set;public ValueHolder getGenericArgumentValue(Class requiredType) {_		return getGenericArgumentValue(requiredType, null, null)__	};look,for,a,generic,argument,value,that,matches,the,given,type,param,required,type,the,type,to,match,return,the,value,holder,for,the,argument,or,code,null,if,none,set;public,value,holder,get,generic,argument,value,class,required,type,return,get,generic,argument,value,required,type,null,null
ConstructorArgumentValues -> ValueHolder -> private boolean contentEquals(ValueHolder other);1328020251;Determine whether the content of this ValueHolder is equal_to the content of the given other ValueHolder._<p>Note that ValueHolder does not implement <code>equals</code>_directly, to allow for multiple ValueHolder instances with the_same content to reside in the same Set.;private boolean contentEquals(ValueHolder other) {_			return (this == other ||_					(ObjectUtils.nullSafeEquals(this.value, other.value) && ObjectUtils.nullSafeEquals(this.type, other.type)))__		};determine,whether,the,content,of,this,value,holder,is,equal,to,the,content,of,the,given,other,value,holder,p,note,that,value,holder,does,not,implement,code,equals,code,directly,to,allow,for,multiple,value,holder,instances,with,the,same,content,to,reside,in,the,same,set;private,boolean,content,equals,value,holder,other,return,this,other,object,utils,null,safe,equals,this,value,other,value,object,utils,null,safe,equals,this,type,other,type
ConstructorArgumentValues -> ValueHolder -> private boolean contentEquals(ValueHolder other);1356735495;Determine whether the content of this ValueHolder is equal_to the content of the given other ValueHolder._<p>Note that ValueHolder does not implement {@code equals}_directly, to allow for multiple ValueHolder instances with the_same content to reside in the same Set.;private boolean contentEquals(ValueHolder other) {_			return (this == other ||_					(ObjectUtils.nullSafeEquals(this.value, other.value) && ObjectUtils.nullSafeEquals(this.type, other.type)))__		};determine,whether,the,content,of,this,value,holder,is,equal,to,the,content,of,the,given,other,value,holder,p,note,that,value,holder,does,not,implement,code,equals,directly,to,allow,for,multiple,value,holder,instances,with,the,same,content,to,reside,in,the,same,set;private,boolean,content,equals,value,holder,other,return,this,other,object,utils,null,safe,equals,this,value,other,value,object,utils,null,safe,equals,this,type,other,type
ConstructorArgumentValues -> ValueHolder -> private boolean contentEquals(ValueHolder other);1357119239;Determine whether the content of this ValueHolder is equal_to the content of the given other ValueHolder._<p>Note that ValueHolder does not implement {@code equals}_directly, to allow for multiple ValueHolder instances with the_same content to reside in the same Set.;private boolean contentEquals(ValueHolder other) {_			return (this == other ||_					(ObjectUtils.nullSafeEquals(this.value, other.value) && ObjectUtils.nullSafeEquals(this.type, other.type)))__		};determine,whether,the,content,of,this,value,holder,is,equal,to,the,content,of,the,given,other,value,holder,p,note,that,value,holder,does,not,implement,code,equals,directly,to,allow,for,multiple,value,holder,instances,with,the,same,content,to,reside,in,the,same,set;private,boolean,content,equals,value,holder,other,return,this,other,object,utils,null,safe,equals,this,value,other,value,object,utils,null,safe,equals,this,type,other,type
ConstructorArgumentValues -> ValueHolder -> private boolean contentEquals(ValueHolder other);1368482696;Determine whether the content of this ValueHolder is equal_to the content of the given other ValueHolder._<p>Note that ValueHolder does not implement {@code equals}_directly, to allow for multiple ValueHolder instances with the_same content to reside in the same Set.;private boolean contentEquals(ValueHolder other) {_			return (this == other ||_					(ObjectUtils.nullSafeEquals(this.value, other.value) && ObjectUtils.nullSafeEquals(this.type, other.type)))__		};determine,whether,the,content,of,this,value,holder,is,equal,to,the,content,of,the,given,other,value,holder,p,note,that,value,holder,does,not,implement,code,equals,directly,to,allow,for,multiple,value,holder,instances,with,the,same,content,to,reside,in,the,same,set;private,boolean,content,equals,value,holder,other,return,this,other,object,utils,null,safe,equals,this,value,other,value,object,utils,null,safe,equals,this,type,other,type
ConstructorArgumentValues -> ValueHolder -> private boolean contentEquals(ValueHolder other);1382789137;Determine whether the content of this ValueHolder is equal_to the content of the given other ValueHolder._<p>Note that ValueHolder does not implement {@code equals}_directly, to allow for multiple ValueHolder instances with the_same content to reside in the same Set.;private boolean contentEquals(ValueHolder other) {_			return (this == other ||_					(ObjectUtils.nullSafeEquals(this.value, other.value) && ObjectUtils.nullSafeEquals(this.type, other.type)))__		};determine,whether,the,content,of,this,value,holder,is,equal,to,the,content,of,the,given,other,value,holder,p,note,that,value,holder,does,not,implement,code,equals,directly,to,allow,for,multiple,value,holder,instances,with,the,same,content,to,reside,in,the,same,set;private,boolean,content,equals,value,holder,other,return,this,other,object,utils,null,safe,equals,this,value,other,value,object,utils,null,safe,equals,this,type,other,type
ConstructorArgumentValues -> ValueHolder -> private boolean contentEquals(ValueHolder other);1458323493;Determine whether the content of this ValueHolder is equal_to the content of the given other ValueHolder._<p>Note that ValueHolder does not implement {@code equals}_directly, to allow for multiple ValueHolder instances with the_same content to reside in the same Set.;private boolean contentEquals(ValueHolder other) {_			return (this == other ||_					(ObjectUtils.nullSafeEquals(this.value, other.value) && ObjectUtils.nullSafeEquals(this.type, other.type)))__		};determine,whether,the,content,of,this,value,holder,is,equal,to,the,content,of,the,given,other,value,holder,p,note,that,value,holder,does,not,implement,code,equals,directly,to,allow,for,multiple,value,holder,instances,with,the,same,content,to,reside,in,the,same,set;private,boolean,content,equals,value,holder,other,return,this,other,object,utils,null,safe,equals,this,value,other,value,object,utils,null,safe,equals,this,type,other,type
ConstructorArgumentValues -> ValueHolder -> private boolean contentEquals(ValueHolder other);1467730834;Determine whether the content of this ValueHolder is equal_to the content of the given other ValueHolder._<p>Note that ValueHolder does not implement {@code equals}_directly, to allow for multiple ValueHolder instances with the_same content to reside in the same Set.;private boolean contentEquals(ValueHolder other) {_			return (this == other ||_					(ObjectUtils.nullSafeEquals(this.value, other.value) && ObjectUtils.nullSafeEquals(this.type, other.type)))__		};determine,whether,the,content,of,this,value,holder,is,equal,to,the,content,of,the,given,other,value,holder,p,note,that,value,holder,does,not,implement,code,equals,directly,to,allow,for,multiple,value,holder,instances,with,the,same,content,to,reside,in,the,same,set;private,boolean,content,equals,value,holder,other,return,this,other,object,utils,null,safe,equals,this,value,other,value,object,utils,null,safe,equals,this,type,other,type
ConstructorArgumentValues -> ValueHolder -> private boolean contentEquals(ValueHolder other);1495868221;Determine whether the content of this ValueHolder is equal_to the content of the given other ValueHolder._<p>Note that ValueHolder does not implement {@code equals}_directly, to allow for multiple ValueHolder instances with the_same content to reside in the same Set.;private boolean contentEquals(ValueHolder other) {_			return (this == other ||_					(ObjectUtils.nullSafeEquals(this.value, other.value) && ObjectUtils.nullSafeEquals(this.type, other.type)))__		};determine,whether,the,content,of,this,value,holder,is,equal,to,the,content,of,the,given,other,value,holder,p,note,that,value,holder,does,not,implement,code,equals,directly,to,allow,for,multiple,value,holder,instances,with,the,same,content,to,reside,in,the,same,set;private,boolean,content,equals,value,holder,other,return,this,other,object,utils,null,safe,equals,this,value,other,value,object,utils,null,safe,equals,this,type,other,type
ConstructorArgumentValues -> ValueHolder -> private boolean contentEquals(ValueHolder other);1496259743;Determine whether the content of this ValueHolder is equal_to the content of the given other ValueHolder._<p>Note that ValueHolder does not implement {@code equals}_directly, to allow for multiple ValueHolder instances with the_same content to reside in the same Set.;private boolean contentEquals(ValueHolder other) {_			return (this == other ||_					(ObjectUtils.nullSafeEquals(this.value, other.value) && ObjectUtils.nullSafeEquals(this.type, other.type)))__		};determine,whether,the,content,of,this,value,holder,is,equal,to,the,content,of,the,given,other,value,holder,p,note,that,value,holder,does,not,implement,code,equals,directly,to,allow,for,multiple,value,holder,instances,with,the,same,content,to,reside,in,the,same,set;private,boolean,content,equals,value,holder,other,return,this,other,object,utils,null,safe,equals,this,value,other,value,object,utils,null,safe,equals,this,type,other,type
ConstructorArgumentValues -> ValueHolder -> private boolean contentEquals(ValueHolder other);1496837955;Determine whether the content of this ValueHolder is equal_to the content of the given other ValueHolder._<p>Note that ValueHolder does not implement {@code equals}_directly, to allow for multiple ValueHolder instances with the_same content to reside in the same Set.;private boolean contentEquals(ValueHolder other) {_			return (this == other ||_					(ObjectUtils.nullSafeEquals(this.value, other.value) && ObjectUtils.nullSafeEquals(this.type, other.type)))__		};determine,whether,the,content,of,this,value,holder,is,equal,to,the,content,of,the,given,other,value,holder,p,note,that,value,holder,does,not,implement,code,equals,directly,to,allow,for,multiple,value,holder,instances,with,the,same,content,to,reside,in,the,same,set;private,boolean,content,equals,value,holder,other,return,this,other,object,utils,null,safe,equals,this,value,other,value,object,utils,null,safe,equals,this,type,other,type
ConstructorArgumentValues -> ValueHolder -> private boolean contentEquals(ValueHolder other);1497250713;Determine whether the content of this ValueHolder is equal_to the content of the given other ValueHolder._<p>Note that ValueHolder does not implement {@code equals}_directly, to allow for multiple ValueHolder instances with the_same content to reside in the same Set.;private boolean contentEquals(ValueHolder other) {_			return (this == other ||_					(ObjectUtils.nullSafeEquals(this.value, other.value) && ObjectUtils.nullSafeEquals(this.type, other.type)))__		};determine,whether,the,content,of,this,value,holder,is,equal,to,the,content,of,the,given,other,value,holder,p,note,that,value,holder,does,not,implement,code,equals,directly,to,allow,for,multiple,value,holder,instances,with,the,same,content,to,reside,in,the,same,set;private,boolean,content,equals,value,holder,other,return,this,other,object,utils,null,safe,equals,this,value,other,value,object,utils,null,safe,equals,this,type,other,type
ConstructorArgumentValues -> ValueHolder -> private boolean contentEquals(ValueHolder other);1498780456;Determine whether the content of this ValueHolder is equal_to the content of the given other ValueHolder._<p>Note that ValueHolder does not implement {@code equals}_directly, to allow for multiple ValueHolder instances with the_same content to reside in the same Set.;private boolean contentEquals(ValueHolder other) {_			return (this == other ||_					(ObjectUtils.nullSafeEquals(this.value, other.value) && ObjectUtils.nullSafeEquals(this.type, other.type)))__		};determine,whether,the,content,of,this,value,holder,is,equal,to,the,content,of,the,given,other,value,holder,p,note,that,value,holder,does,not,implement,code,equals,directly,to,allow,for,multiple,value,holder,instances,with,the,same,content,to,reside,in,the,same,set;private,boolean,content,equals,value,holder,other,return,this,other,object,utils,null,safe,equals,this,value,other,value,object,utils,null,safe,equals,this,type,other,type
ConstructorArgumentValues -> ValueHolder -> private boolean contentEquals(ValueHolder other);1500448076;Determine whether the content of this ValueHolder is equal_to the content of the given other ValueHolder._<p>Note that ValueHolder does not implement {@code equals}_directly, to allow for multiple ValueHolder instances with the_same content to reside in the same Set.;private boolean contentEquals(ValueHolder other) {_			return (this == other ||_					(ObjectUtils.nullSafeEquals(this.value, other.value) && ObjectUtils.nullSafeEquals(this.type, other.type)))__		};determine,whether,the,content,of,this,value,holder,is,equal,to,the,content,of,the,given,other,value,holder,p,note,that,value,holder,does,not,implement,code,equals,directly,to,allow,for,multiple,value,holder,instances,with,the,same,content,to,reside,in,the,same,set;private,boolean,content,equals,value,holder,other,return,this,other,object,utils,null,safe,equals,this,value,other,value,object,utils,null,safe,equals,this,type,other,type
ConstructorArgumentValues -> ValueHolder -> private boolean contentEquals(ValueHolder other);1531945062;Determine whether the content of this ValueHolder is equal_to the content of the given other ValueHolder._<p>Note that ValueHolder does not implement {@code equals}_directly, to allow for multiple ValueHolder instances with the_same content to reside in the same Set.;private boolean contentEquals(ValueHolder other) {_			return (this == other ||_					(ObjectUtils.nullSafeEquals(this.value, other.value) && ObjectUtils.nullSafeEquals(this.type, other.type)))__		};determine,whether,the,content,of,this,value,holder,is,equal,to,the,content,of,the,given,other,value,holder,p,note,that,value,holder,does,not,implement,code,equals,directly,to,allow,for,multiple,value,holder,instances,with,the,same,content,to,reside,in,the,same,set;private,boolean,content,equals,value,holder,other,return,this,other,object,utils,null,safe,equals,this,value,other,value,object,utils,null,safe,equals,this,type,other,type
ConstructorArgumentValues -> ValueHolder -> private boolean contentEquals(ValueHolder other);1532981251;Determine whether the content of this ValueHolder is equal_to the content of the given other ValueHolder._<p>Note that ValueHolder does not implement {@code equals}_directly, to allow for multiple ValueHolder instances with the_same content to reside in the same Set.;private boolean contentEquals(ValueHolder other) {_			return (this == other ||_					(ObjectUtils.nullSafeEquals(this.value, other.value) && ObjectUtils.nullSafeEquals(this.type, other.type)))__		};determine,whether,the,content,of,this,value,holder,is,equal,to,the,content,of,the,given,other,value,holder,p,note,that,value,holder,does,not,implement,code,equals,directly,to,allow,for,multiple,value,holder,instances,with,the,same,content,to,reside,in,the,same,set;private,boolean,content,equals,value,holder,other,return,this,other,object,utils,null,safe,equals,this,value,other,value,object,utils,null,safe,equals,this,type,other,type
ConstructorArgumentValues -> ValueHolder -> private boolean contentEquals(ValueHolder other);1549554785;Determine whether the content of this ValueHolder is equal_to the content of the given other ValueHolder._<p>Note that ValueHolder does not implement {@code equals}_directly, to allow for multiple ValueHolder instances with the_same content to reside in the same Set.;private boolean contentEquals(ValueHolder other) {_			return (this == other ||_					(ObjectUtils.nullSafeEquals(this.value, other.value) && ObjectUtils.nullSafeEquals(this.type, other.type)))__		};determine,whether,the,content,of,this,value,holder,is,equal,to,the,content,of,the,given,other,value,holder,p,note,that,value,holder,does,not,implement,code,equals,directly,to,allow,for,multiple,value,holder,instances,with,the,same,content,to,reside,in,the,same,set;private,boolean,content,equals,value,holder,other,return,this,other,object,utils,null,safe,equals,this,value,other,value,object,utils,null,safe,equals,this,type,other,type
ConstructorArgumentValues -> public void addIndexedArgumentValue(int index, ValueHolder newValue);1328020251;Add an argument value for the given index in the constructor argument list._@param index the index in the constructor argument list_@param newValue the argument value in the form of a ValueHolder;public void addIndexedArgumentValue(int index, ValueHolder newValue) {_		Assert.isTrue(index >= 0, "Index must not be negative")__		Assert.notNull(newValue, "ValueHolder must not be null")__		addOrMergeIndexedArgumentValue(index, newValue)__	};add,an,argument,value,for,the,given,index,in,the,constructor,argument,list,param,index,the,index,in,the,constructor,argument,list,param,new,value,the,argument,value,in,the,form,of,a,value,holder;public,void,add,indexed,argument,value,int,index,value,holder,new,value,assert,is,true,index,0,index,must,not,be,negative,assert,not,null,new,value,value,holder,must,not,be,null,add,or,merge,indexed,argument,value,index,new,value
ConstructorArgumentValues -> public void addIndexedArgumentValue(int index, ValueHolder newValue);1356735495;Add an argument value for the given index in the constructor argument list._@param index the index in the constructor argument list_@param newValue the argument value in the form of a ValueHolder;public void addIndexedArgumentValue(int index, ValueHolder newValue) {_		Assert.isTrue(index >= 0, "Index must not be negative")__		Assert.notNull(newValue, "ValueHolder must not be null")__		addOrMergeIndexedArgumentValue(index, newValue)__	};add,an,argument,value,for,the,given,index,in,the,constructor,argument,list,param,index,the,index,in,the,constructor,argument,list,param,new,value,the,argument,value,in,the,form,of,a,value,holder;public,void,add,indexed,argument,value,int,index,value,holder,new,value,assert,is,true,index,0,index,must,not,be,negative,assert,not,null,new,value,value,holder,must,not,be,null,add,or,merge,indexed,argument,value,index,new,value
ConstructorArgumentValues -> public void addIndexedArgumentValue(int index, ValueHolder newValue);1357119239;Add an argument value for the given index in the constructor argument list._@param index the index in the constructor argument list_@param newValue the argument value in the form of a ValueHolder;public void addIndexedArgumentValue(int index, ValueHolder newValue) {_		Assert.isTrue(index >= 0, "Index must not be negative")__		Assert.notNull(newValue, "ValueHolder must not be null")__		addOrMergeIndexedArgumentValue(index, newValue)__	};add,an,argument,value,for,the,given,index,in,the,constructor,argument,list,param,index,the,index,in,the,constructor,argument,list,param,new,value,the,argument,value,in,the,form,of,a,value,holder;public,void,add,indexed,argument,value,int,index,value,holder,new,value,assert,is,true,index,0,index,must,not,be,negative,assert,not,null,new,value,value,holder,must,not,be,null,add,or,merge,indexed,argument,value,index,new,value
ConstructorArgumentValues -> public void addIndexedArgumentValue(int index, ValueHolder newValue);1368482696;Add an argument value for the given index in the constructor argument list._@param index the index in the constructor argument list_@param newValue the argument value in the form of a ValueHolder;public void addIndexedArgumentValue(int index, ValueHolder newValue) {_		Assert.isTrue(index >= 0, "Index must not be negative")__		Assert.notNull(newValue, "ValueHolder must not be null")__		addOrMergeIndexedArgumentValue(index, newValue)__	};add,an,argument,value,for,the,given,index,in,the,constructor,argument,list,param,index,the,index,in,the,constructor,argument,list,param,new,value,the,argument,value,in,the,form,of,a,value,holder;public,void,add,indexed,argument,value,int,index,value,holder,new,value,assert,is,true,index,0,index,must,not,be,negative,assert,not,null,new,value,value,holder,must,not,be,null,add,or,merge,indexed,argument,value,index,new,value
ConstructorArgumentValues -> public void addIndexedArgumentValue(int index, ValueHolder newValue);1382789137;Add an argument value for the given index in the constructor argument list._@param index the index in the constructor argument list_@param newValue the argument value in the form of a ValueHolder;public void addIndexedArgumentValue(int index, ValueHolder newValue) {_		Assert.isTrue(index >= 0, "Index must not be negative")__		Assert.notNull(newValue, "ValueHolder must not be null")__		addOrMergeIndexedArgumentValue(index, newValue)__	};add,an,argument,value,for,the,given,index,in,the,constructor,argument,list,param,index,the,index,in,the,constructor,argument,list,param,new,value,the,argument,value,in,the,form,of,a,value,holder;public,void,add,indexed,argument,value,int,index,value,holder,new,value,assert,is,true,index,0,index,must,not,be,negative,assert,not,null,new,value,value,holder,must,not,be,null,add,or,merge,indexed,argument,value,index,new,value
ConstructorArgumentValues -> public void addIndexedArgumentValue(int index, ValueHolder newValue);1458323493;Add an argument value for the given index in the constructor argument list._@param index the index in the constructor argument list_@param newValue the argument value in the form of a ValueHolder;public void addIndexedArgumentValue(int index, ValueHolder newValue) {_		Assert.isTrue(index >= 0, "Index must not be negative")__		Assert.notNull(newValue, "ValueHolder must not be null")__		addOrMergeIndexedArgumentValue(index, newValue)__	};add,an,argument,value,for,the,given,index,in,the,constructor,argument,list,param,index,the,index,in,the,constructor,argument,list,param,new,value,the,argument,value,in,the,form,of,a,value,holder;public,void,add,indexed,argument,value,int,index,value,holder,new,value,assert,is,true,index,0,index,must,not,be,negative,assert,not,null,new,value,value,holder,must,not,be,null,add,or,merge,indexed,argument,value,index,new,value
ConstructorArgumentValues -> public void addIndexedArgumentValue(int index, ValueHolder newValue);1467730834;Add an argument value for the given index in the constructor argument list._@param index the index in the constructor argument list_@param newValue the argument value in the form of a ValueHolder;public void addIndexedArgumentValue(int index, ValueHolder newValue) {_		Assert.isTrue(index >= 0, "Index must not be negative")__		Assert.notNull(newValue, "ValueHolder must not be null")__		addOrMergeIndexedArgumentValue(index, newValue)__	};add,an,argument,value,for,the,given,index,in,the,constructor,argument,list,param,index,the,index,in,the,constructor,argument,list,param,new,value,the,argument,value,in,the,form,of,a,value,holder;public,void,add,indexed,argument,value,int,index,value,holder,new,value,assert,is,true,index,0,index,must,not,be,negative,assert,not,null,new,value,value,holder,must,not,be,null,add,or,merge,indexed,argument,value,index,new,value
ConstructorArgumentValues -> public void addIndexedArgumentValue(int index, ValueHolder newValue);1495868221;Add an argument value for the given index in the constructor argument list._@param index the index in the constructor argument list_@param newValue the argument value in the form of a ValueHolder;public void addIndexedArgumentValue(int index, ValueHolder newValue) {_		Assert.isTrue(index >= 0, "Index must not be negative")__		Assert.notNull(newValue, "ValueHolder must not be null")__		addOrMergeIndexedArgumentValue(index, newValue)__	};add,an,argument,value,for,the,given,index,in,the,constructor,argument,list,param,index,the,index,in,the,constructor,argument,list,param,new,value,the,argument,value,in,the,form,of,a,value,holder;public,void,add,indexed,argument,value,int,index,value,holder,new,value,assert,is,true,index,0,index,must,not,be,negative,assert,not,null,new,value,value,holder,must,not,be,null,add,or,merge,indexed,argument,value,index,new,value
ConstructorArgumentValues -> public void addIndexedArgumentValue(int index, ValueHolder newValue);1496259743;Add an argument value for the given index in the constructor argument list._@param index the index in the constructor argument list_@param newValue the argument value in the form of a ValueHolder;public void addIndexedArgumentValue(int index, ValueHolder newValue) {_		Assert.isTrue(index >= 0, "Index must not be negative")__		Assert.notNull(newValue, "ValueHolder must not be null")__		addOrMergeIndexedArgumentValue(index, newValue)__	};add,an,argument,value,for,the,given,index,in,the,constructor,argument,list,param,index,the,index,in,the,constructor,argument,list,param,new,value,the,argument,value,in,the,form,of,a,value,holder;public,void,add,indexed,argument,value,int,index,value,holder,new,value,assert,is,true,index,0,index,must,not,be,negative,assert,not,null,new,value,value,holder,must,not,be,null,add,or,merge,indexed,argument,value,index,new,value
ConstructorArgumentValues -> public void addIndexedArgumentValue(int index, ValueHolder newValue);1496837955;Add an argument value for the given index in the constructor argument list._@param index the index in the constructor argument list_@param newValue the argument value in the form of a ValueHolder;public void addIndexedArgumentValue(int index, ValueHolder newValue) {_		Assert.isTrue(index >= 0, "Index must not be negative")__		Assert.notNull(newValue, "ValueHolder must not be null")__		addOrMergeIndexedArgumentValue(index, newValue)__	};add,an,argument,value,for,the,given,index,in,the,constructor,argument,list,param,index,the,index,in,the,constructor,argument,list,param,new,value,the,argument,value,in,the,form,of,a,value,holder;public,void,add,indexed,argument,value,int,index,value,holder,new,value,assert,is,true,index,0,index,must,not,be,negative,assert,not,null,new,value,value,holder,must,not,be,null,add,or,merge,indexed,argument,value,index,new,value
ConstructorArgumentValues -> public void addIndexedArgumentValue(int index, ValueHolder newValue);1497250713;Add an argument value for the given index in the constructor argument list._@param index the index in the constructor argument list_@param newValue the argument value in the form of a ValueHolder;public void addIndexedArgumentValue(int index, ValueHolder newValue) {_		Assert.isTrue(index >= 0, "Index must not be negative")__		Assert.notNull(newValue, "ValueHolder must not be null")__		addOrMergeIndexedArgumentValue(index, newValue)__	};add,an,argument,value,for,the,given,index,in,the,constructor,argument,list,param,index,the,index,in,the,constructor,argument,list,param,new,value,the,argument,value,in,the,form,of,a,value,holder;public,void,add,indexed,argument,value,int,index,value,holder,new,value,assert,is,true,index,0,index,must,not,be,negative,assert,not,null,new,value,value,holder,must,not,be,null,add,or,merge,indexed,argument,value,index,new,value
ConstructorArgumentValues -> public void addIndexedArgumentValue(int index, ValueHolder newValue);1498780456;Add an argument value for the given index in the constructor argument list._@param index the index in the constructor argument list_@param newValue the argument value in the form of a ValueHolder;public void addIndexedArgumentValue(int index, ValueHolder newValue) {_		Assert.isTrue(index >= 0, "Index must not be negative")__		Assert.notNull(newValue, "ValueHolder must not be null")__		addOrMergeIndexedArgumentValue(index, newValue)__	};add,an,argument,value,for,the,given,index,in,the,constructor,argument,list,param,index,the,index,in,the,constructor,argument,list,param,new,value,the,argument,value,in,the,form,of,a,value,holder;public,void,add,indexed,argument,value,int,index,value,holder,new,value,assert,is,true,index,0,index,must,not,be,negative,assert,not,null,new,value,value,holder,must,not,be,null,add,or,merge,indexed,argument,value,index,new,value
ConstructorArgumentValues -> public void addIndexedArgumentValue(int index, ValueHolder newValue);1500448076;Add an argument value for the given index in the constructor argument list._@param index the index in the constructor argument list_@param newValue the argument value in the form of a ValueHolder;public void addIndexedArgumentValue(int index, ValueHolder newValue) {_		Assert.isTrue(index >= 0, "Index must not be negative")__		Assert.notNull(newValue, "ValueHolder must not be null")__		addOrMergeIndexedArgumentValue(index, newValue)__	};add,an,argument,value,for,the,given,index,in,the,constructor,argument,list,param,index,the,index,in,the,constructor,argument,list,param,new,value,the,argument,value,in,the,form,of,a,value,holder;public,void,add,indexed,argument,value,int,index,value,holder,new,value,assert,is,true,index,0,index,must,not,be,negative,assert,not,null,new,value,value,holder,must,not,be,null,add,or,merge,indexed,argument,value,index,new,value
ConstructorArgumentValues -> public void addIndexedArgumentValue(int index, ValueHolder newValue);1531945062;Add an argument value for the given index in the constructor argument list._@param index the index in the constructor argument list_@param newValue the argument value in the form of a ValueHolder;public void addIndexedArgumentValue(int index, ValueHolder newValue) {_		Assert.isTrue(index >= 0, "Index must not be negative")__		Assert.notNull(newValue, "ValueHolder must not be null")__		addOrMergeIndexedArgumentValue(index, newValue)__	};add,an,argument,value,for,the,given,index,in,the,constructor,argument,list,param,index,the,index,in,the,constructor,argument,list,param,new,value,the,argument,value,in,the,form,of,a,value,holder;public,void,add,indexed,argument,value,int,index,value,holder,new,value,assert,is,true,index,0,index,must,not,be,negative,assert,not,null,new,value,value,holder,must,not,be,null,add,or,merge,indexed,argument,value,index,new,value
ConstructorArgumentValues -> public void addIndexedArgumentValue(int index, ValueHolder newValue);1532981251;Add an argument value for the given index in the constructor argument list._@param index the index in the constructor argument list_@param newValue the argument value in the form of a ValueHolder;public void addIndexedArgumentValue(int index, ValueHolder newValue) {_		Assert.isTrue(index >= 0, "Index must not be negative")__		Assert.notNull(newValue, "ValueHolder must not be null")__		addOrMergeIndexedArgumentValue(index, newValue)__	};add,an,argument,value,for,the,given,index,in,the,constructor,argument,list,param,index,the,index,in,the,constructor,argument,list,param,new,value,the,argument,value,in,the,form,of,a,value,holder;public,void,add,indexed,argument,value,int,index,value,holder,new,value,assert,is,true,index,0,index,must,not,be,negative,assert,not,null,new,value,value,holder,must,not,be,null,add,or,merge,indexed,argument,value,index,new,value
ConstructorArgumentValues -> public void addIndexedArgumentValue(int index, ValueHolder newValue);1549554785;Add an argument value for the given index in the constructor argument list._@param index the index in the constructor argument list_@param newValue the argument value in the form of a ValueHolder;public void addIndexedArgumentValue(int index, ValueHolder newValue) {_		Assert.isTrue(index >= 0, "Index must not be negative")__		Assert.notNull(newValue, "ValueHolder must not be null")__		addOrMergeIndexedArgumentValue(index, newValue)__	};add,an,argument,value,for,the,given,index,in,the,constructor,argument,list,param,index,the,index,in,the,constructor,argument,list,param,new,value,the,argument,value,in,the,form,of,a,value,holder;public,void,add,indexed,argument,value,int,index,value,holder,new,value,assert,is,true,index,0,index,must,not,be,negative,assert,not,null,new,value,value,holder,must,not,be,null,add,or,merge,indexed,argument,value,index,new,value
ConstructorArgumentValues -> public ValueHolder getGenericArgumentValue(Class<?> requiredType, String requiredName, Set<ValueHolder> usedValueHolders);1382789137;Look for the next generic argument value that matches the given type,_ignoring argument values that have already been used in the current_resolution process._@param requiredType the type to match (can be {@code null} to find_an arbitrary next generic argument value)_@param requiredName the name to match (can be {@code null} to not_match argument values by name)_@param usedValueHolders a Set of ValueHolder objects that have already been used_in the current resolution process and should therefore not be returned again_@return the ValueHolder for the argument, or {@code null} if none found;public ValueHolder getGenericArgumentValue(Class<?> requiredType, String requiredName, Set<ValueHolder> usedValueHolders) {_		for (ValueHolder valueHolder : this.genericArgumentValues) {_			if (usedValueHolders != null && usedValueHolders.contains(valueHolder)) {_				continue__			}_			if (valueHolder.getName() != null &&_					(requiredName == null || !valueHolder.getName().equals(requiredName))) {_				continue__			}_			if (valueHolder.getType() != null &&_					(requiredType == null || !ClassUtils.matchesTypeName(requiredType, valueHolder.getType()))) {_				continue__			}_			if (requiredType != null && valueHolder.getType() == null && valueHolder.getName() == null &&_					!ClassUtils.isAssignableValue(requiredType, valueHolder.getValue())) {_				continue__			}_			return valueHolder__		}_		return null__	};look,for,the,next,generic,argument,value,that,matches,the,given,type,ignoring,argument,values,that,have,already,been,used,in,the,current,resolution,process,param,required,type,the,type,to,match,can,be,code,null,to,find,an,arbitrary,next,generic,argument,value,param,required,name,the,name,to,match,can,be,code,null,to,not,match,argument,values,by,name,param,used,value,holders,a,set,of,value,holder,objects,that,have,already,been,used,in,the,current,resolution,process,and,should,therefore,not,be,returned,again,return,the,value,holder,for,the,argument,or,code,null,if,none,found;public,value,holder,get,generic,argument,value,class,required,type,string,required,name,set,value,holder,used,value,holders,for,value,holder,value,holder,this,generic,argument,values,if,used,value,holders,null,used,value,holders,contains,value,holder,continue,if,value,holder,get,name,null,required,name,null,value,holder,get,name,equals,required,name,continue,if,value,holder,get,type,null,required,type,null,class,utils,matches,type,name,required,type,value,holder,get,type,continue,if,required,type,null,value,holder,get,type,null,value,holder,get,name,null,class,utils,is,assignable,value,required,type,value,holder,get,value,continue,return,value,holder,return,null
ConstructorArgumentValues -> public ValueHolder getGenericArgumentValue(Class<?> requiredType, String requiredName, Set<ValueHolder> usedValueHolders);1458323493;Look for the next generic argument value that matches the given type,_ignoring argument values that have already been used in the current_resolution process._@param requiredType the type to match (can be {@code null} to find_an arbitrary next generic argument value)_@param requiredName the name to match (can be {@code null} to not_match argument values by name, or empty String to match any name)_@param usedValueHolders a Set of ValueHolder objects that have already been used_in the current resolution process and should therefore not be returned again_@return the ValueHolder for the argument, or {@code null} if none found;public ValueHolder getGenericArgumentValue(Class<?> requiredType, String requiredName, Set<ValueHolder> usedValueHolders) {_		for (ValueHolder valueHolder : this.genericArgumentValues) {_			if (usedValueHolders != null && usedValueHolders.contains(valueHolder)) {_				continue__			}_			if (valueHolder.getName() != null && !"".equals(requiredName) &&_					(requiredName == null || !valueHolder.getName().equals(requiredName))) {_				continue__			}_			if (valueHolder.getType() != null &&_					(requiredType == null || !ClassUtils.matchesTypeName(requiredType, valueHolder.getType()))) {_				continue__			}_			if (requiredType != null && valueHolder.getType() == null && valueHolder.getName() == null &&_					!ClassUtils.isAssignableValue(requiredType, valueHolder.getValue())) {_				continue__			}_			return valueHolder__		}_		return null__	};look,for,the,next,generic,argument,value,that,matches,the,given,type,ignoring,argument,values,that,have,already,been,used,in,the,current,resolution,process,param,required,type,the,type,to,match,can,be,code,null,to,find,an,arbitrary,next,generic,argument,value,param,required,name,the,name,to,match,can,be,code,null,to,not,match,argument,values,by,name,or,empty,string,to,match,any,name,param,used,value,holders,a,set,of,value,holder,objects,that,have,already,been,used,in,the,current,resolution,process,and,should,therefore,not,be,returned,again,return,the,value,holder,for,the,argument,or,code,null,if,none,found;public,value,holder,get,generic,argument,value,class,required,type,string,required,name,set,value,holder,used,value,holders,for,value,holder,value,holder,this,generic,argument,values,if,used,value,holders,null,used,value,holders,contains,value,holder,continue,if,value,holder,get,name,null,equals,required,name,required,name,null,value,holder,get,name,equals,required,name,continue,if,value,holder,get,type,null,required,type,null,class,utils,matches,type,name,required,type,value,holder,get,type,continue,if,required,type,null,value,holder,get,type,null,value,holder,get,name,null,class,utils,is,assignable,value,required,type,value,holder,get,value,continue,return,value,holder,return,null
ConstructorArgumentValues -> public ValueHolder getGenericArgumentValue(Class<?> requiredType, String requiredName, Set<ValueHolder> usedValueHolders);1467730834;Look for the next generic argument value that matches the given type,_ignoring argument values that have already been used in the current_resolution process._@param requiredType the type to match (can be {@code null} to find_an arbitrary next generic argument value)_@param requiredName the name to match (can be {@code null} to not_match argument values by name, or empty String to match any name)_@param usedValueHolders a Set of ValueHolder objects that have already been used_in the current resolution process and should therefore not be returned again_@return the ValueHolder for the argument, or {@code null} if none found;public ValueHolder getGenericArgumentValue(Class<?> requiredType, String requiredName, Set<ValueHolder> usedValueHolders) {_		for (ValueHolder valueHolder : this.genericArgumentValues) {_			if (usedValueHolders != null && usedValueHolders.contains(valueHolder)) {_				continue__			}_			if (valueHolder.getName() != null && !"".equals(requiredName) &&_					(requiredName == null || !valueHolder.getName().equals(requiredName))) {_				continue__			}_			if (valueHolder.getType() != null &&_					(requiredType == null || !ClassUtils.matchesTypeName(requiredType, valueHolder.getType()))) {_				continue__			}_			if (requiredType != null && valueHolder.getType() == null && valueHolder.getName() == null &&_					!ClassUtils.isAssignableValue(requiredType, valueHolder.getValue())) {_				continue__			}_			return valueHolder__		}_		return null__	};look,for,the,next,generic,argument,value,that,matches,the,given,type,ignoring,argument,values,that,have,already,been,used,in,the,current,resolution,process,param,required,type,the,type,to,match,can,be,code,null,to,find,an,arbitrary,next,generic,argument,value,param,required,name,the,name,to,match,can,be,code,null,to,not,match,argument,values,by,name,or,empty,string,to,match,any,name,param,used,value,holders,a,set,of,value,holder,objects,that,have,already,been,used,in,the,current,resolution,process,and,should,therefore,not,be,returned,again,return,the,value,holder,for,the,argument,or,code,null,if,none,found;public,value,holder,get,generic,argument,value,class,required,type,string,required,name,set,value,holder,used,value,holders,for,value,holder,value,holder,this,generic,argument,values,if,used,value,holders,null,used,value,holders,contains,value,holder,continue,if,value,holder,get,name,null,equals,required,name,required,name,null,value,holder,get,name,equals,required,name,continue,if,value,holder,get,type,null,required,type,null,class,utils,matches,type,name,required,type,value,holder,get,type,continue,if,required,type,null,value,holder,get,type,null,value,holder,get,name,null,class,utils,is,assignable,value,required,type,value,holder,get,value,continue,return,value,holder,return,null
ConstructorArgumentValues -> public ValueHolder getArgumentValue(int index, Class<?> requiredType);1382789137;Look for an argument value that either corresponds to the given index_in the constructor argument list or generically matches by type._@param index the index in the constructor argument list_@param requiredType the parameter type to match_@return the ValueHolder for the argument, or {@code null} if none set;public ValueHolder getArgumentValue(int index, Class<?> requiredType) {_		return getArgumentValue(index, requiredType, null, null)__	};look,for,an,argument,value,that,either,corresponds,to,the,given,index,in,the,constructor,argument,list,or,generically,matches,by,type,param,index,the,index,in,the,constructor,argument,list,param,required,type,the,parameter,type,to,match,return,the,value,holder,for,the,argument,or,code,null,if,none,set;public,value,holder,get,argument,value,int,index,class,required,type,return,get,argument,value,index,required,type,null,null
ConstructorArgumentValues -> public ValueHolder getArgumentValue(int index, Class<?> requiredType);1458323493;Look for an argument value that either corresponds to the given index_in the constructor argument list or generically matches by type._@param index the index in the constructor argument list_@param requiredType the parameter type to match_@return the ValueHolder for the argument, or {@code null} if none set;public ValueHolder getArgumentValue(int index, Class<?> requiredType) {_		return getArgumentValue(index, requiredType, null, null)__	};look,for,an,argument,value,that,either,corresponds,to,the,given,index,in,the,constructor,argument,list,or,generically,matches,by,type,param,index,the,index,in,the,constructor,argument,list,param,required,type,the,parameter,type,to,match,return,the,value,holder,for,the,argument,or,code,null,if,none,set;public,value,holder,get,argument,value,int,index,class,required,type,return,get,argument,value,index,required,type,null,null
ConstructorArgumentValues -> public ValueHolder getArgumentValue(int index, Class<?> requiredType);1467730834;Look for an argument value that either corresponds to the given index_in the constructor argument list or generically matches by type._@param index the index in the constructor argument list_@param requiredType the parameter type to match_@return the ValueHolder for the argument, or {@code null} if none set;public ValueHolder getArgumentValue(int index, Class<?> requiredType) {_		return getArgumentValue(index, requiredType, null, null)__	};look,for,an,argument,value,that,either,corresponds,to,the,given,index,in,the,constructor,argument,list,or,generically,matches,by,type,param,index,the,index,in,the,constructor,argument,list,param,required,type,the,parameter,type,to,match,return,the,value,holder,for,the,argument,or,code,null,if,none,set;public,value,holder,get,argument,value,int,index,class,required,type,return,get,argument,value,index,required,type,null,null
ConstructorArgumentValues -> @Nullable 	public ValueHolder getGenericArgumentValue(Class<?> requiredType, String requiredName);1495868221;Look for a generic argument value that matches the given type._@param requiredType the type to match_@param requiredName the name to match_@return the ValueHolder for the argument, or {@code null} if none set;@Nullable_	public ValueHolder getGenericArgumentValue(Class<?> requiredType, String requiredName) {_		return getGenericArgumentValue(requiredType, requiredName, null)__	};look,for,a,generic,argument,value,that,matches,the,given,type,param,required,type,the,type,to,match,param,required,name,the,name,to,match,return,the,value,holder,for,the,argument,or,code,null,if,none,set;nullable,public,value,holder,get,generic,argument,value,class,required,type,string,required,name,return,get,generic,argument,value,required,type,required,name,null
ConstructorArgumentValues -> @Nullable 	public ValueHolder getGenericArgumentValue(Class<?> requiredType, String requiredName);1496259743;Look for a generic argument value that matches the given type._@param requiredType the type to match_@param requiredName the name to match_@return the ValueHolder for the argument, or {@code null} if none set;@Nullable_	public ValueHolder getGenericArgumentValue(Class<?> requiredType, String requiredName) {_		return getGenericArgumentValue(requiredType, requiredName, null)__	};look,for,a,generic,argument,value,that,matches,the,given,type,param,required,type,the,type,to,match,param,required,name,the,name,to,match,return,the,value,holder,for,the,argument,or,code,null,if,none,set;nullable,public,value,holder,get,generic,argument,value,class,required,type,string,required,name,return,get,generic,argument,value,required,type,required,name,null
ConstructorArgumentValues -> @Nullable 	public ValueHolder getGenericArgumentValue(Class<?> requiredType, String requiredName);1496837955;Look for a generic argument value that matches the given type._@param requiredType the type to match_@param requiredName the name to match_@return the ValueHolder for the argument, or {@code null} if none set;@Nullable_	public ValueHolder getGenericArgumentValue(Class<?> requiredType, String requiredName) {_		return getGenericArgumentValue(requiredType, requiredName, null)__	};look,for,a,generic,argument,value,that,matches,the,given,type,param,required,type,the,type,to,match,param,required,name,the,name,to,match,return,the,value,holder,for,the,argument,or,code,null,if,none,set;nullable,public,value,holder,get,generic,argument,value,class,required,type,string,required,name,return,get,generic,argument,value,required,type,required,name,null
ConstructorArgumentValues -> @Nullable 	public ValueHolder getGenericArgumentValue(Class<?> requiredType, String requiredName);1497250713;Look for a generic argument value that matches the given type._@param requiredType the type to match_@param requiredName the name to match_@return the ValueHolder for the argument, or {@code null} if none set;@Nullable_	public ValueHolder getGenericArgumentValue(Class<?> requiredType, String requiredName) {_		return getGenericArgumentValue(requiredType, requiredName, null)__	};look,for,a,generic,argument,value,that,matches,the,given,type,param,required,type,the,type,to,match,param,required,name,the,name,to,match,return,the,value,holder,for,the,argument,or,code,null,if,none,set;nullable,public,value,holder,get,generic,argument,value,class,required,type,string,required,name,return,get,generic,argument,value,required,type,required,name,null
ConstructorArgumentValues -> @Nullable 	public ValueHolder getGenericArgumentValue(Class<?> requiredType, String requiredName);1498780456;Look for a generic argument value that matches the given type._@param requiredType the type to match_@param requiredName the name to match_@return the ValueHolder for the argument, or {@code null} if none set;@Nullable_	public ValueHolder getGenericArgumentValue(Class<?> requiredType, String requiredName) {_		return getGenericArgumentValue(requiredType, requiredName, null)__	};look,for,a,generic,argument,value,that,matches,the,given,type,param,required,type,the,type,to,match,param,required,name,the,name,to,match,return,the,value,holder,for,the,argument,or,code,null,if,none,set;nullable,public,value,holder,get,generic,argument,value,class,required,type,string,required,name,return,get,generic,argument,value,required,type,required,name,null
ConstructorArgumentValues -> @Nullable 	public ValueHolder getGenericArgumentValue(Class<?> requiredType, String requiredName);1500448076;Look for a generic argument value that matches the given type._@param requiredType the type to match_@param requiredName the name to match_@return the ValueHolder for the argument, or {@code null} if none set;@Nullable_	public ValueHolder getGenericArgumentValue(Class<?> requiredType, String requiredName) {_		return getGenericArgumentValue(requiredType, requiredName, null)__	};look,for,a,generic,argument,value,that,matches,the,given,type,param,required,type,the,type,to,match,param,required,name,the,name,to,match,return,the,value,holder,for,the,argument,or,code,null,if,none,set;nullable,public,value,holder,get,generic,argument,value,class,required,type,string,required,name,return,get,generic,argument,value,required,type,required,name,null
ConstructorArgumentValues -> @Nullable 	public ValueHolder getGenericArgumentValue(Class<?> requiredType, String requiredName);1531945062;Look for a generic argument value that matches the given type._@param requiredType the type to match_@param requiredName the name to match_@return the ValueHolder for the argument, or {@code null} if none set;@Nullable_	public ValueHolder getGenericArgumentValue(Class<?> requiredType, String requiredName) {_		return getGenericArgumentValue(requiredType, requiredName, null)__	};look,for,a,generic,argument,value,that,matches,the,given,type,param,required,type,the,type,to,match,param,required,name,the,name,to,match,return,the,value,holder,for,the,argument,or,code,null,if,none,set;nullable,public,value,holder,get,generic,argument,value,class,required,type,string,required,name,return,get,generic,argument,value,required,type,required,name,null
ConstructorArgumentValues -> @Nullable 	public ValueHolder getGenericArgumentValue(Class<?> requiredType, String requiredName);1532981251;Look for a generic argument value that matches the given type._@param requiredType the type to match_@param requiredName the name to match_@return the ValueHolder for the argument, or {@code null} if none set;@Nullable_	public ValueHolder getGenericArgumentValue(Class<?> requiredType, String requiredName) {_		return getGenericArgumentValue(requiredType, requiredName, null)__	};look,for,a,generic,argument,value,that,matches,the,given,type,param,required,type,the,type,to,match,param,required,name,the,name,to,match,return,the,value,holder,for,the,argument,or,code,null,if,none,set;nullable,public,value,holder,get,generic,argument,value,class,required,type,string,required,name,return,get,generic,argument,value,required,type,required,name,null
ConstructorArgumentValues -> @Nullable 	public ValueHolder getGenericArgumentValue(Class<?> requiredType, String requiredName);1549554785;Look for a generic argument value that matches the given type._@param requiredType the type to match_@param requiredName the name to match_@return the ValueHolder for the argument, or {@code null} if none set;@Nullable_	public ValueHolder getGenericArgumentValue(Class<?> requiredType, String requiredName) {_		return getGenericArgumentValue(requiredType, requiredName, null)__	};look,for,a,generic,argument,value,that,matches,the,given,type,param,required,type,the,type,to,match,param,required,name,the,name,to,match,return,the,value,holder,for,the,argument,or,code,null,if,none,set;nullable,public,value,holder,get,generic,argument,value,class,required,type,string,required,name,return,get,generic,argument,value,required,type,required,name,null
ConstructorArgumentValues -> ValueHolder -> private int contentHashCode();1328020251;Determine whether the hash code of the content of this ValueHolder._<p>Note that ValueHolder does not implement <code>hashCode</code>_directly, to allow for multiple ValueHolder instances with the_same content to reside in the same Set.;private int contentHashCode() {_			return ObjectUtils.nullSafeHashCode(this.value) * 29 + ObjectUtils.nullSafeHashCode(this.type)__		};determine,whether,the,hash,code,of,the,content,of,this,value,holder,p,note,that,value,holder,does,not,implement,code,hash,code,code,directly,to,allow,for,multiple,value,holder,instances,with,the,same,content,to,reside,in,the,same,set;private,int,content,hash,code,return,object,utils,null,safe,hash,code,this,value,29,object,utils,null,safe,hash,code,this,type
ConstructorArgumentValues -> ValueHolder -> private int contentHashCode();1356735495;Determine whether the hash code of the content of this ValueHolder._<p>Note that ValueHolder does not implement {@code hashCode}_directly, to allow for multiple ValueHolder instances with the_same content to reside in the same Set.;private int contentHashCode() {_			return ObjectUtils.nullSafeHashCode(this.value) * 29 + ObjectUtils.nullSafeHashCode(this.type)__		};determine,whether,the,hash,code,of,the,content,of,this,value,holder,p,note,that,value,holder,does,not,implement,code,hash,code,directly,to,allow,for,multiple,value,holder,instances,with,the,same,content,to,reside,in,the,same,set;private,int,content,hash,code,return,object,utils,null,safe,hash,code,this,value,29,object,utils,null,safe,hash,code,this,type
ConstructorArgumentValues -> ValueHolder -> private int contentHashCode();1357119239;Determine whether the hash code of the content of this ValueHolder._<p>Note that ValueHolder does not implement {@code hashCode}_directly, to allow for multiple ValueHolder instances with the_same content to reside in the same Set.;private int contentHashCode() {_			return ObjectUtils.nullSafeHashCode(this.value) * 29 + ObjectUtils.nullSafeHashCode(this.type)__		};determine,whether,the,hash,code,of,the,content,of,this,value,holder,p,note,that,value,holder,does,not,implement,code,hash,code,directly,to,allow,for,multiple,value,holder,instances,with,the,same,content,to,reside,in,the,same,set;private,int,content,hash,code,return,object,utils,null,safe,hash,code,this,value,29,object,utils,null,safe,hash,code,this,type
ConstructorArgumentValues -> ValueHolder -> private int contentHashCode();1368482696;Determine whether the hash code of the content of this ValueHolder._<p>Note that ValueHolder does not implement {@code hashCode}_directly, to allow for multiple ValueHolder instances with the_same content to reside in the same Set.;private int contentHashCode() {_			return ObjectUtils.nullSafeHashCode(this.value) * 29 + ObjectUtils.nullSafeHashCode(this.type)__		};determine,whether,the,hash,code,of,the,content,of,this,value,holder,p,note,that,value,holder,does,not,implement,code,hash,code,directly,to,allow,for,multiple,value,holder,instances,with,the,same,content,to,reside,in,the,same,set;private,int,content,hash,code,return,object,utils,null,safe,hash,code,this,value,29,object,utils,null,safe,hash,code,this,type
ConstructorArgumentValues -> ValueHolder -> private int contentHashCode();1382789137;Determine whether the hash code of the content of this ValueHolder._<p>Note that ValueHolder does not implement {@code hashCode}_directly, to allow for multiple ValueHolder instances with the_same content to reside in the same Set.;private int contentHashCode() {_			return ObjectUtils.nullSafeHashCode(this.value) * 29 + ObjectUtils.nullSafeHashCode(this.type)__		};determine,whether,the,hash,code,of,the,content,of,this,value,holder,p,note,that,value,holder,does,not,implement,code,hash,code,directly,to,allow,for,multiple,value,holder,instances,with,the,same,content,to,reside,in,the,same,set;private,int,content,hash,code,return,object,utils,null,safe,hash,code,this,value,29,object,utils,null,safe,hash,code,this,type
ConstructorArgumentValues -> ValueHolder -> private int contentHashCode();1458323493;Determine whether the hash code of the content of this ValueHolder._<p>Note that ValueHolder does not implement {@code hashCode}_directly, to allow for multiple ValueHolder instances with the_same content to reside in the same Set.;private int contentHashCode() {_			return ObjectUtils.nullSafeHashCode(this.value) * 29 + ObjectUtils.nullSafeHashCode(this.type)__		};determine,whether,the,hash,code,of,the,content,of,this,value,holder,p,note,that,value,holder,does,not,implement,code,hash,code,directly,to,allow,for,multiple,value,holder,instances,with,the,same,content,to,reside,in,the,same,set;private,int,content,hash,code,return,object,utils,null,safe,hash,code,this,value,29,object,utils,null,safe,hash,code,this,type
ConstructorArgumentValues -> ValueHolder -> private int contentHashCode();1467730834;Determine whether the hash code of the content of this ValueHolder._<p>Note that ValueHolder does not implement {@code hashCode}_directly, to allow for multiple ValueHolder instances with the_same content to reside in the same Set.;private int contentHashCode() {_			return ObjectUtils.nullSafeHashCode(this.value) * 29 + ObjectUtils.nullSafeHashCode(this.type)__		};determine,whether,the,hash,code,of,the,content,of,this,value,holder,p,note,that,value,holder,does,not,implement,code,hash,code,directly,to,allow,for,multiple,value,holder,instances,with,the,same,content,to,reside,in,the,same,set;private,int,content,hash,code,return,object,utils,null,safe,hash,code,this,value,29,object,utils,null,safe,hash,code,this,type
ConstructorArgumentValues -> ValueHolder -> private int contentHashCode();1495868221;Determine whether the hash code of the content of this ValueHolder._<p>Note that ValueHolder does not implement {@code hashCode}_directly, to allow for multiple ValueHolder instances with the_same content to reside in the same Set.;private int contentHashCode() {_			return ObjectUtils.nullSafeHashCode(this.value) * 29 + ObjectUtils.nullSafeHashCode(this.type)__		};determine,whether,the,hash,code,of,the,content,of,this,value,holder,p,note,that,value,holder,does,not,implement,code,hash,code,directly,to,allow,for,multiple,value,holder,instances,with,the,same,content,to,reside,in,the,same,set;private,int,content,hash,code,return,object,utils,null,safe,hash,code,this,value,29,object,utils,null,safe,hash,code,this,type
ConstructorArgumentValues -> ValueHolder -> private int contentHashCode();1496259743;Determine whether the hash code of the content of this ValueHolder._<p>Note that ValueHolder does not implement {@code hashCode}_directly, to allow for multiple ValueHolder instances with the_same content to reside in the same Set.;private int contentHashCode() {_			return ObjectUtils.nullSafeHashCode(this.value) * 29 + ObjectUtils.nullSafeHashCode(this.type)__		};determine,whether,the,hash,code,of,the,content,of,this,value,holder,p,note,that,value,holder,does,not,implement,code,hash,code,directly,to,allow,for,multiple,value,holder,instances,with,the,same,content,to,reside,in,the,same,set;private,int,content,hash,code,return,object,utils,null,safe,hash,code,this,value,29,object,utils,null,safe,hash,code,this,type
ConstructorArgumentValues -> ValueHolder -> private int contentHashCode();1496837955;Determine whether the hash code of the content of this ValueHolder._<p>Note that ValueHolder does not implement {@code hashCode}_directly, to allow for multiple ValueHolder instances with the_same content to reside in the same Set.;private int contentHashCode() {_			return ObjectUtils.nullSafeHashCode(this.value) * 29 + ObjectUtils.nullSafeHashCode(this.type)__		};determine,whether,the,hash,code,of,the,content,of,this,value,holder,p,note,that,value,holder,does,not,implement,code,hash,code,directly,to,allow,for,multiple,value,holder,instances,with,the,same,content,to,reside,in,the,same,set;private,int,content,hash,code,return,object,utils,null,safe,hash,code,this,value,29,object,utils,null,safe,hash,code,this,type
ConstructorArgumentValues -> ValueHolder -> private int contentHashCode();1497250713;Determine whether the hash code of the content of this ValueHolder._<p>Note that ValueHolder does not implement {@code hashCode}_directly, to allow for multiple ValueHolder instances with the_same content to reside in the same Set.;private int contentHashCode() {_			return ObjectUtils.nullSafeHashCode(this.value) * 29 + ObjectUtils.nullSafeHashCode(this.type)__		};determine,whether,the,hash,code,of,the,content,of,this,value,holder,p,note,that,value,holder,does,not,implement,code,hash,code,directly,to,allow,for,multiple,value,holder,instances,with,the,same,content,to,reside,in,the,same,set;private,int,content,hash,code,return,object,utils,null,safe,hash,code,this,value,29,object,utils,null,safe,hash,code,this,type
ConstructorArgumentValues -> ValueHolder -> private int contentHashCode();1498780456;Determine whether the hash code of the content of this ValueHolder._<p>Note that ValueHolder does not implement {@code hashCode}_directly, to allow for multiple ValueHolder instances with the_same content to reside in the same Set.;private int contentHashCode() {_			return ObjectUtils.nullSafeHashCode(this.value) * 29 + ObjectUtils.nullSafeHashCode(this.type)__		};determine,whether,the,hash,code,of,the,content,of,this,value,holder,p,note,that,value,holder,does,not,implement,code,hash,code,directly,to,allow,for,multiple,value,holder,instances,with,the,same,content,to,reside,in,the,same,set;private,int,content,hash,code,return,object,utils,null,safe,hash,code,this,value,29,object,utils,null,safe,hash,code,this,type
ConstructorArgumentValues -> ValueHolder -> private int contentHashCode();1500448076;Determine whether the hash code of the content of this ValueHolder._<p>Note that ValueHolder does not implement {@code hashCode}_directly, to allow for multiple ValueHolder instances with the_same content to reside in the same Set.;private int contentHashCode() {_			return ObjectUtils.nullSafeHashCode(this.value) * 29 + ObjectUtils.nullSafeHashCode(this.type)__		};determine,whether,the,hash,code,of,the,content,of,this,value,holder,p,note,that,value,holder,does,not,implement,code,hash,code,directly,to,allow,for,multiple,value,holder,instances,with,the,same,content,to,reside,in,the,same,set;private,int,content,hash,code,return,object,utils,null,safe,hash,code,this,value,29,object,utils,null,safe,hash,code,this,type
ConstructorArgumentValues -> ValueHolder -> private int contentHashCode();1531945062;Determine whether the hash code of the content of this ValueHolder._<p>Note that ValueHolder does not implement {@code hashCode}_directly, to allow for multiple ValueHolder instances with the_same content to reside in the same Set.;private int contentHashCode() {_			return ObjectUtils.nullSafeHashCode(this.value) * 29 + ObjectUtils.nullSafeHashCode(this.type)__		};determine,whether,the,hash,code,of,the,content,of,this,value,holder,p,note,that,value,holder,does,not,implement,code,hash,code,directly,to,allow,for,multiple,value,holder,instances,with,the,same,content,to,reside,in,the,same,set;private,int,content,hash,code,return,object,utils,null,safe,hash,code,this,value,29,object,utils,null,safe,hash,code,this,type
ConstructorArgumentValues -> ValueHolder -> private int contentHashCode();1532981251;Determine whether the hash code of the content of this ValueHolder._<p>Note that ValueHolder does not implement {@code hashCode}_directly, to allow for multiple ValueHolder instances with the_same content to reside in the same Set.;private int contentHashCode() {_			return ObjectUtils.nullSafeHashCode(this.value) * 29 + ObjectUtils.nullSafeHashCode(this.type)__		};determine,whether,the,hash,code,of,the,content,of,this,value,holder,p,note,that,value,holder,does,not,implement,code,hash,code,directly,to,allow,for,multiple,value,holder,instances,with,the,same,content,to,reside,in,the,same,set;private,int,content,hash,code,return,object,utils,null,safe,hash,code,this,value,29,object,utils,null,safe,hash,code,this,type
ConstructorArgumentValues -> ValueHolder -> private int contentHashCode();1549554785;Determine whether the hash code of the content of this ValueHolder._<p>Note that ValueHolder does not implement {@code hashCode}_directly, to allow for multiple ValueHolder instances with the_same content to reside in the same Set.;private int contentHashCode() {_			return ObjectUtils.nullSafeHashCode(this.value) * 29 + ObjectUtils.nullSafeHashCode(this.type)__		};determine,whether,the,hash,code,of,the,content,of,this,value,holder,p,note,that,value,holder,does,not,implement,code,hash,code,directly,to,allow,for,multiple,value,holder,instances,with,the,same,content,to,reside,in,the,same,set;private,int,content,hash,code,return,object,utils,null,safe,hash,code,this,value,29,object,utils,null,safe,hash,code,this,type
ConstructorArgumentValues -> public ValueHolder getIndexedArgumentValue(int index, Class<?> requiredType);1382789137;Get argument value for the given index in the constructor argument list._@param index the index in the constructor argument list_@param requiredType the type to match (can be {@code null} to match_untyped values only)_@return the ValueHolder for the argument, or {@code null} if none set;public ValueHolder getIndexedArgumentValue(int index, Class<?> requiredType) {_		return getIndexedArgumentValue(index, requiredType, null)__	};get,argument,value,for,the,given,index,in,the,constructor,argument,list,param,index,the,index,in,the,constructor,argument,list,param,required,type,the,type,to,match,can,be,code,null,to,match,untyped,values,only,return,the,value,holder,for,the,argument,or,code,null,if,none,set;public,value,holder,get,indexed,argument,value,int,index,class,required,type,return,get,indexed,argument,value,index,required,type,null
ConstructorArgumentValues -> public ValueHolder getIndexedArgumentValue(int index, Class<?> requiredType);1458323493;Get argument value for the given index in the constructor argument list._@param index the index in the constructor argument list_@param requiredType the type to match (can be {@code null} to match_untyped values only)_@return the ValueHolder for the argument, or {@code null} if none set;public ValueHolder getIndexedArgumentValue(int index, Class<?> requiredType) {_		return getIndexedArgumentValue(index, requiredType, null)__	};get,argument,value,for,the,given,index,in,the,constructor,argument,list,param,index,the,index,in,the,constructor,argument,list,param,required,type,the,type,to,match,can,be,code,null,to,match,untyped,values,only,return,the,value,holder,for,the,argument,or,code,null,if,none,set;public,value,holder,get,indexed,argument,value,int,index,class,required,type,return,get,indexed,argument,value,index,required,type,null
ConstructorArgumentValues -> public ValueHolder getIndexedArgumentValue(int index, Class<?> requiredType);1467730834;Get argument value for the given index in the constructor argument list._@param index the index in the constructor argument list_@param requiredType the type to match (can be {@code null} to match_untyped values only)_@return the ValueHolder for the argument, or {@code null} if none set;public ValueHolder getIndexedArgumentValue(int index, Class<?> requiredType) {_		return getIndexedArgumentValue(index, requiredType, null)__	};get,argument,value,for,the,given,index,in,the,constructor,argument,list,param,index,the,index,in,the,constructor,argument,list,param,required,type,the,type,to,match,can,be,code,null,to,match,untyped,values,only,return,the,value,holder,for,the,argument,or,code,null,if,none,set;public,value,holder,get,indexed,argument,value,int,index,class,required,type,return,get,indexed,argument,value,index,required,type,null
ConstructorArgumentValues -> public ValueHolder getGenericArgumentValue(Class<?> requiredType);1382789137;Look for a generic argument value that matches the given type._@param requiredType the type to match_@return the ValueHolder for the argument, or {@code null} if none set;public ValueHolder getGenericArgumentValue(Class<?> requiredType) {_		return getGenericArgumentValue(requiredType, null, null)__	};look,for,a,generic,argument,value,that,matches,the,given,type,param,required,type,the,type,to,match,return,the,value,holder,for,the,argument,or,code,null,if,none,set;public,value,holder,get,generic,argument,value,class,required,type,return,get,generic,argument,value,required,type,null,null
ConstructorArgumentValues -> public ValueHolder getGenericArgumentValue(Class<?> requiredType);1458323493;Look for a generic argument value that matches the given type._@param requiredType the type to match_@return the ValueHolder for the argument, or {@code null} if none set;public ValueHolder getGenericArgumentValue(Class<?> requiredType) {_		return getGenericArgumentValue(requiredType, null, null)__	};look,for,a,generic,argument,value,that,matches,the,given,type,param,required,type,the,type,to,match,return,the,value,holder,for,the,argument,or,code,null,if,none,set;public,value,holder,get,generic,argument,value,class,required,type,return,get,generic,argument,value,required,type,null,null
ConstructorArgumentValues -> public ValueHolder getGenericArgumentValue(Class<?> requiredType);1467730834;Look for a generic argument value that matches the given type._@param requiredType the type to match_@return the ValueHolder for the argument, or {@code null} if none set;public ValueHolder getGenericArgumentValue(Class<?> requiredType) {_		return getGenericArgumentValue(requiredType, null, null)__	};look,for,a,generic,argument,value,that,matches,the,given,type,param,required,type,the,type,to,match,return,the,value,holder,for,the,argument,or,code,null,if,none,set;public,value,holder,get,generic,argument,value,class,required,type,return,get,generic,argument,value,required,type,null,null
ConstructorArgumentValues -> public ValueHolder getGenericArgumentValue(Class<?> requiredType, String requiredName);1382789137;Look for a generic argument value that matches the given type._@param requiredType the type to match_@param requiredName the name to match_@return the ValueHolder for the argument, or {@code null} if none set;public ValueHolder getGenericArgumentValue(Class<?> requiredType, String requiredName) {_		return getGenericArgumentValue(requiredType, requiredName, null)__	};look,for,a,generic,argument,value,that,matches,the,given,type,param,required,type,the,type,to,match,param,required,name,the,name,to,match,return,the,value,holder,for,the,argument,or,code,null,if,none,set;public,value,holder,get,generic,argument,value,class,required,type,string,required,name,return,get,generic,argument,value,required,type,required,name,null
ConstructorArgumentValues -> public ValueHolder getGenericArgumentValue(Class<?> requiredType, String requiredName);1458323493;Look for a generic argument value that matches the given type._@param requiredType the type to match_@param requiredName the name to match_@return the ValueHolder for the argument, or {@code null} if none set;public ValueHolder getGenericArgumentValue(Class<?> requiredType, String requiredName) {_		return getGenericArgumentValue(requiredType, requiredName, null)__	};look,for,a,generic,argument,value,that,matches,the,given,type,param,required,type,the,type,to,match,param,required,name,the,name,to,match,return,the,value,holder,for,the,argument,or,code,null,if,none,set;public,value,holder,get,generic,argument,value,class,required,type,string,required,name,return,get,generic,argument,value,required,type,required,name,null
ConstructorArgumentValues -> public ValueHolder getGenericArgumentValue(Class<?> requiredType, String requiredName);1467730834;Look for a generic argument value that matches the given type._@param requiredType the type to match_@param requiredName the name to match_@return the ValueHolder for the argument, or {@code null} if none set;public ValueHolder getGenericArgumentValue(Class<?> requiredType, String requiredName) {_		return getGenericArgumentValue(requiredType, requiredName, null)__	};look,for,a,generic,argument,value,that,matches,the,given,type,param,required,type,the,type,to,match,param,required,name,the,name,to,match,return,the,value,holder,for,the,argument,or,code,null,if,none,set;public,value,holder,get,generic,argument,value,class,required,type,string,required,name,return,get,generic,argument,value,required,type,required,name,null
ConstructorArgumentValues -> ValueHolder -> public synchronized void setConvertedValue(Object value);1328020251;Set the converted value of the constructor argument,_after processed type conversion.;public synchronized void setConvertedValue(Object value) {_			this.converted = true__			this.convertedValue = value__		};set,the,converted,value,of,the,constructor,argument,after,processed,type,conversion;public,synchronized,void,set,converted,value,object,value,this,converted,true,this,converted,value,value
ConstructorArgumentValues -> ValueHolder -> public synchronized void setConvertedValue(Object value);1356735495;Set the converted value of the constructor argument,_after processed type conversion.;public synchronized void setConvertedValue(Object value) {_			this.converted = true__			this.convertedValue = value__		};set,the,converted,value,of,the,constructor,argument,after,processed,type,conversion;public,synchronized,void,set,converted,value,object,value,this,converted,true,this,converted,value,value
ConstructorArgumentValues -> ValueHolder -> public synchronized void setConvertedValue(Object value);1357119239;Set the converted value of the constructor argument,_after processed type conversion.;public synchronized void setConvertedValue(Object value) {_			this.converted = true__			this.convertedValue = value__		};set,the,converted,value,of,the,constructor,argument,after,processed,type,conversion;public,synchronized,void,set,converted,value,object,value,this,converted,true,this,converted,value,value
ConstructorArgumentValues -> ValueHolder -> public synchronized void setConvertedValue(Object value);1368482696;Set the converted value of the constructor argument,_after processed type conversion.;public synchronized void setConvertedValue(Object value) {_			this.converted = true__			this.convertedValue = value__		};set,the,converted,value,of,the,constructor,argument,after,processed,type,conversion;public,synchronized,void,set,converted,value,object,value,this,converted,true,this,converted,value,value
ConstructorArgumentValues -> ValueHolder -> public synchronized void setConvertedValue(Object value);1382789137;Set the converted value of the constructor argument,_after processed type conversion.;public synchronized void setConvertedValue(Object value) {_			this.converted = true__			this.convertedValue = value__		};set,the,converted,value,of,the,constructor,argument,after,processed,type,conversion;public,synchronized,void,set,converted,value,object,value,this,converted,true,this,converted,value,value
ConstructorArgumentValues -> ValueHolder -> public synchronized void setConvertedValue(Object value);1458323493;Set the converted value of the constructor argument,_after processed type conversion.;public synchronized void setConvertedValue(Object value) {_			this.converted = true__			this.convertedValue = value__		};set,the,converted,value,of,the,constructor,argument,after,processed,type,conversion;public,synchronized,void,set,converted,value,object,value,this,converted,true,this,converted,value,value
ConstructorArgumentValues -> ValueHolder -> public synchronized void setConvertedValue(Object value);1467730834;Set the converted value of the constructor argument,_after processed type conversion.;public synchronized void setConvertedValue(Object value) {_			this.converted = true__			this.convertedValue = value__		};set,the,converted,value,of,the,constructor,argument,after,processed,type,conversion;public,synchronized,void,set,converted,value,object,value,this,converted,true,this,converted,value,value
ConstructorArgumentValues -> ValueHolder -> public synchronized void setConvertedValue(Object value);1495868221;Set the converted value of the constructor argument,_after processed type conversion.;public synchronized void setConvertedValue(Object value) {_			this.converted = true__			this.convertedValue = value__		};set,the,converted,value,of,the,constructor,argument,after,processed,type,conversion;public,synchronized,void,set,converted,value,object,value,this,converted,true,this,converted,value,value
ConstructorArgumentValues -> ValueHolder -> public synchronized void setConvertedValue(Object value);1496259743;Set the converted value of the constructor argument,_after processed type conversion.;public synchronized void setConvertedValue(Object value) {_			this.converted = true__			this.convertedValue = value__		};set,the,converted,value,of,the,constructor,argument,after,processed,type,conversion;public,synchronized,void,set,converted,value,object,value,this,converted,true,this,converted,value,value
ConstructorArgumentValues -> ValueHolder -> public synchronized void setConvertedValue(Object value);1496837955;Set the converted value of the constructor argument,_after processed type conversion.;public synchronized void setConvertedValue(Object value) {_			this.converted = true__			this.convertedValue = value__		};set,the,converted,value,of,the,constructor,argument,after,processed,type,conversion;public,synchronized,void,set,converted,value,object,value,this,converted,true,this,converted,value,value
ConstructorArgumentValues -> ValueHolder -> public synchronized void setConvertedValue(Object value);1497250713;Set the converted value of the constructor argument,_after processed type conversion.;public synchronized void setConvertedValue(Object value) {_			this.converted = true__			this.convertedValue = value__		};set,the,converted,value,of,the,constructor,argument,after,processed,type,conversion;public,synchronized,void,set,converted,value,object,value,this,converted,true,this,converted,value,value
ConstructorArgumentValues -> ValueHolder -> public synchronized void setConvertedValue(Object value);1498780456;Set the converted value of the constructor argument,_after processed type conversion.;public synchronized void setConvertedValue(Object value) {_			this.converted = true__			this.convertedValue = value__		};set,the,converted,value,of,the,constructor,argument,after,processed,type,conversion;public,synchronized,void,set,converted,value,object,value,this,converted,true,this,converted,value,value
ConstructorArgumentValues -> ValueHolder -> public void setName(@Nullable String name);1496837955;Set the name of the constructor argument.;public void setName(@Nullable String name) {_			this.name = name__		};set,the,name,of,the,constructor,argument;public,void,set,name,nullable,string,name,this,name,name
ConstructorArgumentValues -> ValueHolder -> public void setName(@Nullable String name);1497250713;Set the name of the constructor argument.;public void setName(@Nullable String name) {_			this.name = name__		};set,the,name,of,the,constructor,argument;public,void,set,name,nullable,string,name,this,name,name
ConstructorArgumentValues -> ValueHolder -> public void setName(@Nullable String name);1498780456;Set the name of the constructor argument.;public void setName(@Nullable String name) {_			this.name = name__		};set,the,name,of,the,constructor,argument;public,void,set,name,nullable,string,name,this,name,name
ConstructorArgumentValues -> ValueHolder -> public void setName(@Nullable String name);1500448076;Set the name of the constructor argument.;public void setName(@Nullable String name) {_			this.name = name__		};set,the,name,of,the,constructor,argument;public,void,set,name,nullable,string,name,this,name,name
ConstructorArgumentValues -> ValueHolder -> public void setName(@Nullable String name);1531945062;Set the name of the constructor argument.;public void setName(@Nullable String name) {_			this.name = name__		};set,the,name,of,the,constructor,argument;public,void,set,name,nullable,string,name,this,name,name
ConstructorArgumentValues -> ValueHolder -> public void setName(@Nullable String name);1532981251;Set the name of the constructor argument.;public void setName(@Nullable String name) {_			this.name = name__		};set,the,name,of,the,constructor,argument;public,void,set,name,nullable,string,name,this,name,name
ConstructorArgumentValues -> ValueHolder -> public void setName(@Nullable String name);1549554785;Set the name of the constructor argument.;public void setName(@Nullable String name) {_			this.name = name__		};set,the,name,of,the,constructor,argument;public,void,set,name,nullable,string,name,this,name,name
ConstructorArgumentValues -> ValueHolder -> public synchronized boolean isConverted();1328020251;Return whether this holder contains a converted value already (<code>true</code>),_or whether the value still needs to be converted (<code>false</code>).;public synchronized boolean isConverted() {_			return this.converted__		};return,whether,this,holder,contains,a,converted,value,already,code,true,code,or,whether,the,value,still,needs,to,be,converted,code,false,code;public,synchronized,boolean,is,converted,return,this,converted
ConstructorArgumentValues -> ValueHolder -> public synchronized boolean isConverted();1356735495;Return whether this holder contains a converted value already ({@code true}),_or whether the value still needs to be converted ({@code false}).;public synchronized boolean isConverted() {_			return this.converted__		};return,whether,this,holder,contains,a,converted,value,already,code,true,or,whether,the,value,still,needs,to,be,converted,code,false;public,synchronized,boolean,is,converted,return,this,converted
ConstructorArgumentValues -> ValueHolder -> public synchronized boolean isConverted();1357119239;Return whether this holder contains a converted value already ({@code true}),_or whether the value still needs to be converted ({@code false}).;public synchronized boolean isConverted() {_			return this.converted__		};return,whether,this,holder,contains,a,converted,value,already,code,true,or,whether,the,value,still,needs,to,be,converted,code,false;public,synchronized,boolean,is,converted,return,this,converted
ConstructorArgumentValues -> ValueHolder -> public synchronized boolean isConverted();1368482696;Return whether this holder contains a converted value already ({@code true}),_or whether the value still needs to be converted ({@code false}).;public synchronized boolean isConverted() {_			return this.converted__		};return,whether,this,holder,contains,a,converted,value,already,code,true,or,whether,the,value,still,needs,to,be,converted,code,false;public,synchronized,boolean,is,converted,return,this,converted
ConstructorArgumentValues -> ValueHolder -> public synchronized boolean isConverted();1382789137;Return whether this holder contains a converted value already ({@code true}),_or whether the value still needs to be converted ({@code false}).;public synchronized boolean isConverted() {_			return this.converted__		};return,whether,this,holder,contains,a,converted,value,already,code,true,or,whether,the,value,still,needs,to,be,converted,code,false;public,synchronized,boolean,is,converted,return,this,converted
ConstructorArgumentValues -> ValueHolder -> public synchronized boolean isConverted();1458323493;Return whether this holder contains a converted value already ({@code true}),_or whether the value still needs to be converted ({@code false}).;public synchronized boolean isConverted() {_			return this.converted__		};return,whether,this,holder,contains,a,converted,value,already,code,true,or,whether,the,value,still,needs,to,be,converted,code,false;public,synchronized,boolean,is,converted,return,this,converted
ConstructorArgumentValues -> ValueHolder -> public synchronized boolean isConverted();1467730834;Return whether this holder contains a converted value already ({@code true}),_or whether the value still needs to be converted ({@code false}).;public synchronized boolean isConverted() {_			return this.converted__		};return,whether,this,holder,contains,a,converted,value,already,code,true,or,whether,the,value,still,needs,to,be,converted,code,false;public,synchronized,boolean,is,converted,return,this,converted
ConstructorArgumentValues -> ValueHolder -> public synchronized boolean isConverted();1495868221;Return whether this holder contains a converted value already ({@code true}),_or whether the value still needs to be converted ({@code false}).;public synchronized boolean isConverted() {_			return this.converted__		};return,whether,this,holder,contains,a,converted,value,already,code,true,or,whether,the,value,still,needs,to,be,converted,code,false;public,synchronized,boolean,is,converted,return,this,converted
ConstructorArgumentValues -> ValueHolder -> public synchronized boolean isConverted();1496259743;Return whether this holder contains a converted value already ({@code true}),_or whether the value still needs to be converted ({@code false}).;public synchronized boolean isConverted() {_			return this.converted__		};return,whether,this,holder,contains,a,converted,value,already,code,true,or,whether,the,value,still,needs,to,be,converted,code,false;public,synchronized,boolean,is,converted,return,this,converted
ConstructorArgumentValues -> ValueHolder -> public synchronized boolean isConverted();1496837955;Return whether this holder contains a converted value already ({@code true}),_or whether the value still needs to be converted ({@code false}).;public synchronized boolean isConverted() {_			return this.converted__		};return,whether,this,holder,contains,a,converted,value,already,code,true,or,whether,the,value,still,needs,to,be,converted,code,false;public,synchronized,boolean,is,converted,return,this,converted
ConstructorArgumentValues -> ValueHolder -> public synchronized boolean isConverted();1497250713;Return whether this holder contains a converted value already ({@code true}),_or whether the value still needs to be converted ({@code false}).;public synchronized boolean isConverted() {_			return this.converted__		};return,whether,this,holder,contains,a,converted,value,already,code,true,or,whether,the,value,still,needs,to,be,converted,code,false;public,synchronized,boolean,is,converted,return,this,converted
ConstructorArgumentValues -> ValueHolder -> public synchronized boolean isConverted();1498780456;Return whether this holder contains a converted value already ({@code true}),_or whether the value still needs to be converted ({@code false}).;public synchronized boolean isConverted() {_			return this.converted__		};return,whether,this,holder,contains,a,converted,value,already,code,true,or,whether,the,value,still,needs,to,be,converted,code,false;public,synchronized,boolean,is,converted,return,this,converted
ConstructorArgumentValues -> ValueHolder -> public synchronized boolean isConverted();1500448076;Return whether this holder contains a converted value already ({@code true}),_or whether the value still needs to be converted ({@code false}).;public synchronized boolean isConverted() {_			return this.converted__		};return,whether,this,holder,contains,a,converted,value,already,code,true,or,whether,the,value,still,needs,to,be,converted,code,false;public,synchronized,boolean,is,converted,return,this,converted
ConstructorArgumentValues -> ValueHolder -> public synchronized boolean isConverted();1531945062;Return whether this holder contains a converted value already ({@code true}),_or whether the value still needs to be converted ({@code false}).;public synchronized boolean isConverted() {_			return this.converted__		};return,whether,this,holder,contains,a,converted,value,already,code,true,or,whether,the,value,still,needs,to,be,converted,code,false;public,synchronized,boolean,is,converted,return,this,converted
ConstructorArgumentValues -> ValueHolder -> public synchronized boolean isConverted();1532981251;Return whether this holder contains a converted value already ({@code true}),_or whether the value still needs to be converted ({@code false}).;public synchronized boolean isConverted() {_			return this.converted__		};return,whether,this,holder,contains,a,converted,value,already,code,true,or,whether,the,value,still,needs,to,be,converted,code,false;public,synchronized,boolean,is,converted,return,this,converted
ConstructorArgumentValues -> ValueHolder -> public synchronized boolean isConverted();1549554785;Return whether this holder contains a converted value already ({@code true}),_or whether the value still needs to be converted ({@code false}).;public synchronized boolean isConverted() {_			return this.converted__		};return,whether,this,holder,contains,a,converted,value,already,code,true,or,whether,the,value,still,needs,to,be,converted,code,false;public,synchronized,boolean,is,converted,return,this,converted
ConstructorArgumentValues -> @Nullable 	public ValueHolder getIndexedArgumentValue(int index, @Nullable Class<?> requiredType);1495868221;Get argument value for the given index in the constructor argument list._@param index the index in the constructor argument list_@param requiredType the type to match (can be {@code null} to match_untyped values only)_@return the ValueHolder for the argument, or {@code null} if none set;@Nullable_	public ValueHolder getIndexedArgumentValue(int index, @Nullable Class<?> requiredType) {_		return getIndexedArgumentValue(index, requiredType, null)__	};get,argument,value,for,the,given,index,in,the,constructor,argument,list,param,index,the,index,in,the,constructor,argument,list,param,required,type,the,type,to,match,can,be,code,null,to,match,untyped,values,only,return,the,value,holder,for,the,argument,or,code,null,if,none,set;nullable,public,value,holder,get,indexed,argument,value,int,index,nullable,class,required,type,return,get,indexed,argument,value,index,required,type,null
ConstructorArgumentValues -> @Nullable 	public ValueHolder getIndexedArgumentValue(int index, @Nullable Class<?> requiredType);1496259743;Get argument value for the given index in the constructor argument list._@param index the index in the constructor argument list_@param requiredType the type to match (can be {@code null} to match_untyped values only)_@return the ValueHolder for the argument, or {@code null} if none set;@Nullable_	public ValueHolder getIndexedArgumentValue(int index, @Nullable Class<?> requiredType) {_		return getIndexedArgumentValue(index, requiredType, null)__	};get,argument,value,for,the,given,index,in,the,constructor,argument,list,param,index,the,index,in,the,constructor,argument,list,param,required,type,the,type,to,match,can,be,code,null,to,match,untyped,values,only,return,the,value,holder,for,the,argument,or,code,null,if,none,set;nullable,public,value,holder,get,indexed,argument,value,int,index,nullable,class,required,type,return,get,indexed,argument,value,index,required,type,null
ConstructorArgumentValues -> @Nullable 	public ValueHolder getIndexedArgumentValue(int index, @Nullable Class<?> requiredType);1496837955;Get argument value for the given index in the constructor argument list._@param index the index in the constructor argument list_@param requiredType the type to match (can be {@code null} to match_untyped values only)_@return the ValueHolder for the argument, or {@code null} if none set;@Nullable_	public ValueHolder getIndexedArgumentValue(int index, @Nullable Class<?> requiredType) {_		return getIndexedArgumentValue(index, requiredType, null)__	};get,argument,value,for,the,given,index,in,the,constructor,argument,list,param,index,the,index,in,the,constructor,argument,list,param,required,type,the,type,to,match,can,be,code,null,to,match,untyped,values,only,return,the,value,holder,for,the,argument,or,code,null,if,none,set;nullable,public,value,holder,get,indexed,argument,value,int,index,nullable,class,required,type,return,get,indexed,argument,value,index,required,type,null
ConstructorArgumentValues -> @Nullable 	public ValueHolder getIndexedArgumentValue(int index, @Nullable Class<?> requiredType);1497250713;Get argument value for the given index in the constructor argument list._@param index the index in the constructor argument list_@param requiredType the type to match (can be {@code null} to match_untyped values only)_@return the ValueHolder for the argument, or {@code null} if none set;@Nullable_	public ValueHolder getIndexedArgumentValue(int index, @Nullable Class<?> requiredType) {_		return getIndexedArgumentValue(index, requiredType, null)__	};get,argument,value,for,the,given,index,in,the,constructor,argument,list,param,index,the,index,in,the,constructor,argument,list,param,required,type,the,type,to,match,can,be,code,null,to,match,untyped,values,only,return,the,value,holder,for,the,argument,or,code,null,if,none,set;nullable,public,value,holder,get,indexed,argument,value,int,index,nullable,class,required,type,return,get,indexed,argument,value,index,required,type,null
ConstructorArgumentValues -> @Nullable 	public ValueHolder getIndexedArgumentValue(int index, @Nullable Class<?> requiredType);1498780456;Get argument value for the given index in the constructor argument list._@param index the index in the constructor argument list_@param requiredType the type to match (can be {@code null} to match_untyped values only)_@return the ValueHolder for the argument, or {@code null} if none set;@Nullable_	public ValueHolder getIndexedArgumentValue(int index, @Nullable Class<?> requiredType) {_		return getIndexedArgumentValue(index, requiredType, null)__	};get,argument,value,for,the,given,index,in,the,constructor,argument,list,param,index,the,index,in,the,constructor,argument,list,param,required,type,the,type,to,match,can,be,code,null,to,match,untyped,values,only,return,the,value,holder,for,the,argument,or,code,null,if,none,set;nullable,public,value,holder,get,indexed,argument,value,int,index,nullable,class,required,type,return,get,indexed,argument,value,index,required,type,null
ConstructorArgumentValues -> @Nullable 	public ValueHolder getIndexedArgumentValue(int index, @Nullable Class<?> requiredType);1500448076;Get argument value for the given index in the constructor argument list._@param index the index in the constructor argument list_@param requiredType the type to match (can be {@code null} to match_untyped values only)_@return the ValueHolder for the argument, or {@code null} if none set;@Nullable_	public ValueHolder getIndexedArgumentValue(int index, @Nullable Class<?> requiredType) {_		return getIndexedArgumentValue(index, requiredType, null)__	};get,argument,value,for,the,given,index,in,the,constructor,argument,list,param,index,the,index,in,the,constructor,argument,list,param,required,type,the,type,to,match,can,be,code,null,to,match,untyped,values,only,return,the,value,holder,for,the,argument,or,code,null,if,none,set;nullable,public,value,holder,get,indexed,argument,value,int,index,nullable,class,required,type,return,get,indexed,argument,value,index,required,type,null
ConstructorArgumentValues -> @Nullable 	public ValueHolder getIndexedArgumentValue(int index, @Nullable Class<?> requiredType);1531945062;Get argument value for the given index in the constructor argument list._@param index the index in the constructor argument list_@param requiredType the type to match (can be {@code null} to match_untyped values only)_@return the ValueHolder for the argument, or {@code null} if none set;@Nullable_	public ValueHolder getIndexedArgumentValue(int index, @Nullable Class<?> requiredType) {_		return getIndexedArgumentValue(index, requiredType, null)__	};get,argument,value,for,the,given,index,in,the,constructor,argument,list,param,index,the,index,in,the,constructor,argument,list,param,required,type,the,type,to,match,can,be,code,null,to,match,untyped,values,only,return,the,value,holder,for,the,argument,or,code,null,if,none,set;nullable,public,value,holder,get,indexed,argument,value,int,index,nullable,class,required,type,return,get,indexed,argument,value,index,required,type,null
ConstructorArgumentValues -> @Nullable 	public ValueHolder getIndexedArgumentValue(int index, @Nullable Class<?> requiredType);1532981251;Get argument value for the given index in the constructor argument list._@param index the index in the constructor argument list_@param requiredType the type to match (can be {@code null} to match_untyped values only)_@return the ValueHolder for the argument, or {@code null} if none set;@Nullable_	public ValueHolder getIndexedArgumentValue(int index, @Nullable Class<?> requiredType) {_		return getIndexedArgumentValue(index, requiredType, null)__	};get,argument,value,for,the,given,index,in,the,constructor,argument,list,param,index,the,index,in,the,constructor,argument,list,param,required,type,the,type,to,match,can,be,code,null,to,match,untyped,values,only,return,the,value,holder,for,the,argument,or,code,null,if,none,set;nullable,public,value,holder,get,indexed,argument,value,int,index,nullable,class,required,type,return,get,indexed,argument,value,index,required,type,null
ConstructorArgumentValues -> @Nullable 	public ValueHolder getIndexedArgumentValue(int index, @Nullable Class<?> requiredType);1549554785;Get argument value for the given index in the constructor argument list._@param index the index in the constructor argument list_@param requiredType the type to match (can be {@code null} to match_untyped values only)_@return the ValueHolder for the argument, or {@code null} if none set;@Nullable_	public ValueHolder getIndexedArgumentValue(int index, @Nullable Class<?> requiredType) {_		return getIndexedArgumentValue(index, requiredType, null)__	};get,argument,value,for,the,given,index,in,the,constructor,argument,list,param,index,the,index,in,the,constructor,argument,list,param,required,type,the,type,to,match,can,be,code,null,to,match,untyped,values,only,return,the,value,holder,for,the,argument,or,code,null,if,none,set;nullable,public,value,holder,get,indexed,argument,value,int,index,nullable,class,required,type,return,get,indexed,argument,value,index,required,type,null
ConstructorArgumentValues -> public void addGenericArgumentValue(ValueHolder newValue);1328020251;Add a generic argument value to be matched by type or name (if available)._<p>Note: A single generic argument value will just be used once,_rather than matched multiple times._@param newValue the argument value in the form of a ValueHolder_<p>Note: Identical ValueHolder instances will only be registered once,_to allow for merging and re-merging of argument value definitions. Distinct_ValueHolder instances carrying the same content are of course allowed.;public void addGenericArgumentValue(ValueHolder newValue) {_		Assert.notNull(newValue, "ValueHolder must not be null")__		if (!this.genericArgumentValues.contains(newValue)) {_			addOrMergeGenericArgumentValue(newValue)__		}_	};add,a,generic,argument,value,to,be,matched,by,type,or,name,if,available,p,note,a,single,generic,argument,value,will,just,be,used,once,rather,than,matched,multiple,times,param,new,value,the,argument,value,in,the,form,of,a,value,holder,p,note,identical,value,holder,instances,will,only,be,registered,once,to,allow,for,merging,and,re,merging,of,argument,value,definitions,distinct,value,holder,instances,carrying,the,same,content,are,of,course,allowed;public,void,add,generic,argument,value,value,holder,new,value,assert,not,null,new,value,value,holder,must,not,be,null,if,this,generic,argument,values,contains,new,value,add,or,merge,generic,argument,value,new,value
ConstructorArgumentValues -> public void addGenericArgumentValue(ValueHolder newValue);1356735495;Add a generic argument value to be matched by type or name (if available)._<p>Note: A single generic argument value will just be used once,_rather than matched multiple times._@param newValue the argument value in the form of a ValueHolder_<p>Note: Identical ValueHolder instances will only be registered once,_to allow for merging and re-merging of argument value definitions. Distinct_ValueHolder instances carrying the same content are of course allowed.;public void addGenericArgumentValue(ValueHolder newValue) {_		Assert.notNull(newValue, "ValueHolder must not be null")__		if (!this.genericArgumentValues.contains(newValue)) {_			addOrMergeGenericArgumentValue(newValue)__		}_	};add,a,generic,argument,value,to,be,matched,by,type,or,name,if,available,p,note,a,single,generic,argument,value,will,just,be,used,once,rather,than,matched,multiple,times,param,new,value,the,argument,value,in,the,form,of,a,value,holder,p,note,identical,value,holder,instances,will,only,be,registered,once,to,allow,for,merging,and,re,merging,of,argument,value,definitions,distinct,value,holder,instances,carrying,the,same,content,are,of,course,allowed;public,void,add,generic,argument,value,value,holder,new,value,assert,not,null,new,value,value,holder,must,not,be,null,if,this,generic,argument,values,contains,new,value,add,or,merge,generic,argument,value,new,value
ConstructorArgumentValues -> public void addGenericArgumentValue(ValueHolder newValue);1357119239;Add a generic argument value to be matched by type or name (if available)._<p>Note: A single generic argument value will just be used once,_rather than matched multiple times._@param newValue the argument value in the form of a ValueHolder_<p>Note: Identical ValueHolder instances will only be registered once,_to allow for merging and re-merging of argument value definitions. Distinct_ValueHolder instances carrying the same content are of course allowed.;public void addGenericArgumentValue(ValueHolder newValue) {_		Assert.notNull(newValue, "ValueHolder must not be null")__		if (!this.genericArgumentValues.contains(newValue)) {_			addOrMergeGenericArgumentValue(newValue)__		}_	};add,a,generic,argument,value,to,be,matched,by,type,or,name,if,available,p,note,a,single,generic,argument,value,will,just,be,used,once,rather,than,matched,multiple,times,param,new,value,the,argument,value,in,the,form,of,a,value,holder,p,note,identical,value,holder,instances,will,only,be,registered,once,to,allow,for,merging,and,re,merging,of,argument,value,definitions,distinct,value,holder,instances,carrying,the,same,content,are,of,course,allowed;public,void,add,generic,argument,value,value,holder,new,value,assert,not,null,new,value,value,holder,must,not,be,null,if,this,generic,argument,values,contains,new,value,add,or,merge,generic,argument,value,new,value
ConstructorArgumentValues -> public void addGenericArgumentValue(ValueHolder newValue);1368482696;Add a generic argument value to be matched by type or name (if available)._<p>Note: A single generic argument value will just be used once,_rather than matched multiple times._@param newValue the argument value in the form of a ValueHolder_<p>Note: Identical ValueHolder instances will only be registered once,_to allow for merging and re-merging of argument value definitions. Distinct_ValueHolder instances carrying the same content are of course allowed.;public void addGenericArgumentValue(ValueHolder newValue) {_		Assert.notNull(newValue, "ValueHolder must not be null")__		if (!this.genericArgumentValues.contains(newValue)) {_			addOrMergeGenericArgumentValue(newValue)__		}_	};add,a,generic,argument,value,to,be,matched,by,type,or,name,if,available,p,note,a,single,generic,argument,value,will,just,be,used,once,rather,than,matched,multiple,times,param,new,value,the,argument,value,in,the,form,of,a,value,holder,p,note,identical,value,holder,instances,will,only,be,registered,once,to,allow,for,merging,and,re,merging,of,argument,value,definitions,distinct,value,holder,instances,carrying,the,same,content,are,of,course,allowed;public,void,add,generic,argument,value,value,holder,new,value,assert,not,null,new,value,value,holder,must,not,be,null,if,this,generic,argument,values,contains,new,value,add,or,merge,generic,argument,value,new,value
ConstructorArgumentValues -> public void addGenericArgumentValue(ValueHolder newValue);1382789137;Add a generic argument value to be matched by type or name (if available)._<p>Note: A single generic argument value will just be used once,_rather than matched multiple times._@param newValue the argument value in the form of a ValueHolder_<p>Note: Identical ValueHolder instances will only be registered once,_to allow for merging and re-merging of argument value definitions. Distinct_ValueHolder instances carrying the same content are of course allowed.;public void addGenericArgumentValue(ValueHolder newValue) {_		Assert.notNull(newValue, "ValueHolder must not be null")__		if (!this.genericArgumentValues.contains(newValue)) {_			addOrMergeGenericArgumentValue(newValue)__		}_	};add,a,generic,argument,value,to,be,matched,by,type,or,name,if,available,p,note,a,single,generic,argument,value,will,just,be,used,once,rather,than,matched,multiple,times,param,new,value,the,argument,value,in,the,form,of,a,value,holder,p,note,identical,value,holder,instances,will,only,be,registered,once,to,allow,for,merging,and,re,merging,of,argument,value,definitions,distinct,value,holder,instances,carrying,the,same,content,are,of,course,allowed;public,void,add,generic,argument,value,value,holder,new,value,assert,not,null,new,value,value,holder,must,not,be,null,if,this,generic,argument,values,contains,new,value,add,or,merge,generic,argument,value,new,value
ConstructorArgumentValues -> public void addGenericArgumentValue(ValueHolder newValue);1458323493;Add a generic argument value to be matched by type or name (if available)._<p>Note: A single generic argument value will just be used once,_rather than matched multiple times._@param newValue the argument value in the form of a ValueHolder_<p>Note: Identical ValueHolder instances will only be registered once,_to allow for merging and re-merging of argument value definitions. Distinct_ValueHolder instances carrying the same content are of course allowed.;public void addGenericArgumentValue(ValueHolder newValue) {_		Assert.notNull(newValue, "ValueHolder must not be null")__		if (!this.genericArgumentValues.contains(newValue)) {_			addOrMergeGenericArgumentValue(newValue)__		}_	};add,a,generic,argument,value,to,be,matched,by,type,or,name,if,available,p,note,a,single,generic,argument,value,will,just,be,used,once,rather,than,matched,multiple,times,param,new,value,the,argument,value,in,the,form,of,a,value,holder,p,note,identical,value,holder,instances,will,only,be,registered,once,to,allow,for,merging,and,re,merging,of,argument,value,definitions,distinct,value,holder,instances,carrying,the,same,content,are,of,course,allowed;public,void,add,generic,argument,value,value,holder,new,value,assert,not,null,new,value,value,holder,must,not,be,null,if,this,generic,argument,values,contains,new,value,add,or,merge,generic,argument,value,new,value
ConstructorArgumentValues -> public void addGenericArgumentValue(ValueHolder newValue);1467730834;Add a generic argument value to be matched by type or name (if available)._<p>Note: A single generic argument value will just be used once,_rather than matched multiple times._@param newValue the argument value in the form of a ValueHolder_<p>Note: Identical ValueHolder instances will only be registered once,_to allow for merging and re-merging of argument value definitions. Distinct_ValueHolder instances carrying the same content are of course allowed.;public void addGenericArgumentValue(ValueHolder newValue) {_		Assert.notNull(newValue, "ValueHolder must not be null")__		if (!this.genericArgumentValues.contains(newValue)) {_			addOrMergeGenericArgumentValue(newValue)__		}_	};add,a,generic,argument,value,to,be,matched,by,type,or,name,if,available,p,note,a,single,generic,argument,value,will,just,be,used,once,rather,than,matched,multiple,times,param,new,value,the,argument,value,in,the,form,of,a,value,holder,p,note,identical,value,holder,instances,will,only,be,registered,once,to,allow,for,merging,and,re,merging,of,argument,value,definitions,distinct,value,holder,instances,carrying,the,same,content,are,of,course,allowed;public,void,add,generic,argument,value,value,holder,new,value,assert,not,null,new,value,value,holder,must,not,be,null,if,this,generic,argument,values,contains,new,value,add,or,merge,generic,argument,value,new,value
ConstructorArgumentValues -> public void addGenericArgumentValue(ValueHolder newValue);1495868221;Add a generic argument value to be matched by type or name (if available)._<p>Note: A single generic argument value will just be used once,_rather than matched multiple times._@param newValue the argument value in the form of a ValueHolder_<p>Note: Identical ValueHolder instances will only be registered once,_to allow for merging and re-merging of argument value definitions. Distinct_ValueHolder instances carrying the same content are of course allowed.;public void addGenericArgumentValue(ValueHolder newValue) {_		Assert.notNull(newValue, "ValueHolder must not be null")__		if (!this.genericArgumentValues.contains(newValue)) {_			addOrMergeGenericArgumentValue(newValue)__		}_	};add,a,generic,argument,value,to,be,matched,by,type,or,name,if,available,p,note,a,single,generic,argument,value,will,just,be,used,once,rather,than,matched,multiple,times,param,new,value,the,argument,value,in,the,form,of,a,value,holder,p,note,identical,value,holder,instances,will,only,be,registered,once,to,allow,for,merging,and,re,merging,of,argument,value,definitions,distinct,value,holder,instances,carrying,the,same,content,are,of,course,allowed;public,void,add,generic,argument,value,value,holder,new,value,assert,not,null,new,value,value,holder,must,not,be,null,if,this,generic,argument,values,contains,new,value,add,or,merge,generic,argument,value,new,value
ConstructorArgumentValues -> public void addGenericArgumentValue(ValueHolder newValue);1496259743;Add a generic argument value to be matched by type or name (if available)._<p>Note: A single generic argument value will just be used once,_rather than matched multiple times._@param newValue the argument value in the form of a ValueHolder_<p>Note: Identical ValueHolder instances will only be registered once,_to allow for merging and re-merging of argument value definitions. Distinct_ValueHolder instances carrying the same content are of course allowed.;public void addGenericArgumentValue(ValueHolder newValue) {_		Assert.notNull(newValue, "ValueHolder must not be null")__		if (!this.genericArgumentValues.contains(newValue)) {_			addOrMergeGenericArgumentValue(newValue)__		}_	};add,a,generic,argument,value,to,be,matched,by,type,or,name,if,available,p,note,a,single,generic,argument,value,will,just,be,used,once,rather,than,matched,multiple,times,param,new,value,the,argument,value,in,the,form,of,a,value,holder,p,note,identical,value,holder,instances,will,only,be,registered,once,to,allow,for,merging,and,re,merging,of,argument,value,definitions,distinct,value,holder,instances,carrying,the,same,content,are,of,course,allowed;public,void,add,generic,argument,value,value,holder,new,value,assert,not,null,new,value,value,holder,must,not,be,null,if,this,generic,argument,values,contains,new,value,add,or,merge,generic,argument,value,new,value
ConstructorArgumentValues -> public void addGenericArgumentValue(ValueHolder newValue);1496837955;Add a generic argument value to be matched by type or name (if available)._<p>Note: A single generic argument value will just be used once,_rather than matched multiple times._@param newValue the argument value in the form of a ValueHolder_<p>Note: Identical ValueHolder instances will only be registered once,_to allow for merging and re-merging of argument value definitions. Distinct_ValueHolder instances carrying the same content are of course allowed.;public void addGenericArgumentValue(ValueHolder newValue) {_		Assert.notNull(newValue, "ValueHolder must not be null")__		if (!this.genericArgumentValues.contains(newValue)) {_			addOrMergeGenericArgumentValue(newValue)__		}_	};add,a,generic,argument,value,to,be,matched,by,type,or,name,if,available,p,note,a,single,generic,argument,value,will,just,be,used,once,rather,than,matched,multiple,times,param,new,value,the,argument,value,in,the,form,of,a,value,holder,p,note,identical,value,holder,instances,will,only,be,registered,once,to,allow,for,merging,and,re,merging,of,argument,value,definitions,distinct,value,holder,instances,carrying,the,same,content,are,of,course,allowed;public,void,add,generic,argument,value,value,holder,new,value,assert,not,null,new,value,value,holder,must,not,be,null,if,this,generic,argument,values,contains,new,value,add,or,merge,generic,argument,value,new,value
ConstructorArgumentValues -> public void addGenericArgumentValue(ValueHolder newValue);1497250713;Add a generic argument value to be matched by type or name (if available)._<p>Note: A single generic argument value will just be used once,_rather than matched multiple times._@param newValue the argument value in the form of a ValueHolder_<p>Note: Identical ValueHolder instances will only be registered once,_to allow for merging and re-merging of argument value definitions. Distinct_ValueHolder instances carrying the same content are of course allowed.;public void addGenericArgumentValue(ValueHolder newValue) {_		Assert.notNull(newValue, "ValueHolder must not be null")__		if (!this.genericArgumentValues.contains(newValue)) {_			addOrMergeGenericArgumentValue(newValue)__		}_	};add,a,generic,argument,value,to,be,matched,by,type,or,name,if,available,p,note,a,single,generic,argument,value,will,just,be,used,once,rather,than,matched,multiple,times,param,new,value,the,argument,value,in,the,form,of,a,value,holder,p,note,identical,value,holder,instances,will,only,be,registered,once,to,allow,for,merging,and,re,merging,of,argument,value,definitions,distinct,value,holder,instances,carrying,the,same,content,are,of,course,allowed;public,void,add,generic,argument,value,value,holder,new,value,assert,not,null,new,value,value,holder,must,not,be,null,if,this,generic,argument,values,contains,new,value,add,or,merge,generic,argument,value,new,value
ConstructorArgumentValues -> public void addGenericArgumentValue(ValueHolder newValue);1498780456;Add a generic argument value to be matched by type or name (if available)._<p>Note: A single generic argument value will just be used once,_rather than matched multiple times._@param newValue the argument value in the form of a ValueHolder_<p>Note: Identical ValueHolder instances will only be registered once,_to allow for merging and re-merging of argument value definitions. Distinct_ValueHolder instances carrying the same content are of course allowed.;public void addGenericArgumentValue(ValueHolder newValue) {_		Assert.notNull(newValue, "ValueHolder must not be null")__		if (!this.genericArgumentValues.contains(newValue)) {_			addOrMergeGenericArgumentValue(newValue)__		}_	};add,a,generic,argument,value,to,be,matched,by,type,or,name,if,available,p,note,a,single,generic,argument,value,will,just,be,used,once,rather,than,matched,multiple,times,param,new,value,the,argument,value,in,the,form,of,a,value,holder,p,note,identical,value,holder,instances,will,only,be,registered,once,to,allow,for,merging,and,re,merging,of,argument,value,definitions,distinct,value,holder,instances,carrying,the,same,content,are,of,course,allowed;public,void,add,generic,argument,value,value,holder,new,value,assert,not,null,new,value,value,holder,must,not,be,null,if,this,generic,argument,values,contains,new,value,add,or,merge,generic,argument,value,new,value
ConstructorArgumentValues -> public void addGenericArgumentValue(ValueHolder newValue);1500448076;Add a generic argument value to be matched by type or name (if available)._<p>Note: A single generic argument value will just be used once,_rather than matched multiple times._@param newValue the argument value in the form of a ValueHolder_<p>Note: Identical ValueHolder instances will only be registered once,_to allow for merging and re-merging of argument value definitions. Distinct_ValueHolder instances carrying the same content are of course allowed.;public void addGenericArgumentValue(ValueHolder newValue) {_		Assert.notNull(newValue, "ValueHolder must not be null")__		if (!this.genericArgumentValues.contains(newValue)) {_			addOrMergeGenericArgumentValue(newValue)__		}_	};add,a,generic,argument,value,to,be,matched,by,type,or,name,if,available,p,note,a,single,generic,argument,value,will,just,be,used,once,rather,than,matched,multiple,times,param,new,value,the,argument,value,in,the,form,of,a,value,holder,p,note,identical,value,holder,instances,will,only,be,registered,once,to,allow,for,merging,and,re,merging,of,argument,value,definitions,distinct,value,holder,instances,carrying,the,same,content,are,of,course,allowed;public,void,add,generic,argument,value,value,holder,new,value,assert,not,null,new,value,value,holder,must,not,be,null,if,this,generic,argument,values,contains,new,value,add,or,merge,generic,argument,value,new,value
ConstructorArgumentValues -> public void addGenericArgumentValue(ValueHolder newValue);1531945062;Add a generic argument value to be matched by type or name (if available)._<p>Note: A single generic argument value will just be used once,_rather than matched multiple times._@param newValue the argument value in the form of a ValueHolder_<p>Note: Identical ValueHolder instances will only be registered once,_to allow for merging and re-merging of argument value definitions. Distinct_ValueHolder instances carrying the same content are of course allowed.;public void addGenericArgumentValue(ValueHolder newValue) {_		Assert.notNull(newValue, "ValueHolder must not be null")__		if (!this.genericArgumentValues.contains(newValue)) {_			addOrMergeGenericArgumentValue(newValue)__		}_	};add,a,generic,argument,value,to,be,matched,by,type,or,name,if,available,p,note,a,single,generic,argument,value,will,just,be,used,once,rather,than,matched,multiple,times,param,new,value,the,argument,value,in,the,form,of,a,value,holder,p,note,identical,value,holder,instances,will,only,be,registered,once,to,allow,for,merging,and,re,merging,of,argument,value,definitions,distinct,value,holder,instances,carrying,the,same,content,are,of,course,allowed;public,void,add,generic,argument,value,value,holder,new,value,assert,not,null,new,value,value,holder,must,not,be,null,if,this,generic,argument,values,contains,new,value,add,or,merge,generic,argument,value,new,value
ConstructorArgumentValues -> public void addGenericArgumentValue(ValueHolder newValue);1532981251;Add a generic argument value to be matched by type or name (if available)._<p>Note: A single generic argument value will just be used once,_rather than matched multiple times._@param newValue the argument value in the form of a ValueHolder_<p>Note: Identical ValueHolder instances will only be registered once,_to allow for merging and re-merging of argument value definitions. Distinct_ValueHolder instances carrying the same content are of course allowed.;public void addGenericArgumentValue(ValueHolder newValue) {_		Assert.notNull(newValue, "ValueHolder must not be null")__		if (!this.genericArgumentValues.contains(newValue)) {_			addOrMergeGenericArgumentValue(newValue)__		}_	};add,a,generic,argument,value,to,be,matched,by,type,or,name,if,available,p,note,a,single,generic,argument,value,will,just,be,used,once,rather,than,matched,multiple,times,param,new,value,the,argument,value,in,the,form,of,a,value,holder,p,note,identical,value,holder,instances,will,only,be,registered,once,to,allow,for,merging,and,re,merging,of,argument,value,definitions,distinct,value,holder,instances,carrying,the,same,content,are,of,course,allowed;public,void,add,generic,argument,value,value,holder,new,value,assert,not,null,new,value,value,holder,must,not,be,null,if,this,generic,argument,values,contains,new,value,add,or,merge,generic,argument,value,new,value
ConstructorArgumentValues -> public void addGenericArgumentValue(ValueHolder newValue);1549554785;Add a generic argument value to be matched by type or name (if available)._<p>Note: A single generic argument value will just be used once,_rather than matched multiple times._@param newValue the argument value in the form of a ValueHolder_<p>Note: Identical ValueHolder instances will only be registered once,_to allow for merging and re-merging of argument value definitions. Distinct_ValueHolder instances carrying the same content are of course allowed.;public void addGenericArgumentValue(ValueHolder newValue) {_		Assert.notNull(newValue, "ValueHolder must not be null")__		if (!this.genericArgumentValues.contains(newValue)) {_			addOrMergeGenericArgumentValue(newValue)__		}_	};add,a,generic,argument,value,to,be,matched,by,type,or,name,if,available,p,note,a,single,generic,argument,value,will,just,be,used,once,rather,than,matched,multiple,times,param,new,value,the,argument,value,in,the,form,of,a,value,holder,p,note,identical,value,holder,instances,will,only,be,registered,once,to,allow,for,merging,and,re,merging,of,argument,value,definitions,distinct,value,holder,instances,carrying,the,same,content,are,of,course,allowed;public,void,add,generic,argument,value,value,holder,new,value,assert,not,null,new,value,value,holder,must,not,be,null,if,this,generic,argument,values,contains,new,value,add,or,merge,generic,argument,value,new,value
ConstructorArgumentValues -> @Nullable 	public ValueHolder getArgumentValue(int index, Class<?> requiredType);1495868221;Look for an argument value that either corresponds to the given index_in the constructor argument list or generically matches by type._@param index the index in the constructor argument list_@param requiredType the parameter type to match_@return the ValueHolder for the argument, or {@code null} if none set;@Nullable_	public ValueHolder getArgumentValue(int index, Class<?> requiredType) {_		return getArgumentValue(index, requiredType, null, null)__	};look,for,an,argument,value,that,either,corresponds,to,the,given,index,in,the,constructor,argument,list,or,generically,matches,by,type,param,index,the,index,in,the,constructor,argument,list,param,required,type,the,parameter,type,to,match,return,the,value,holder,for,the,argument,or,code,null,if,none,set;nullable,public,value,holder,get,argument,value,int,index,class,required,type,return,get,argument,value,index,required,type,null,null
ConstructorArgumentValues -> @Nullable 	public ValueHolder getArgumentValue(int index, Class<?> requiredType);1496259743;Look for an argument value that either corresponds to the given index_in the constructor argument list or generically matches by type._@param index the index in the constructor argument list_@param requiredType the parameter type to match_@return the ValueHolder for the argument, or {@code null} if none set;@Nullable_	public ValueHolder getArgumentValue(int index, Class<?> requiredType) {_		return getArgumentValue(index, requiredType, null, null)__	};look,for,an,argument,value,that,either,corresponds,to,the,given,index,in,the,constructor,argument,list,or,generically,matches,by,type,param,index,the,index,in,the,constructor,argument,list,param,required,type,the,parameter,type,to,match,return,the,value,holder,for,the,argument,or,code,null,if,none,set;nullable,public,value,holder,get,argument,value,int,index,class,required,type,return,get,argument,value,index,required,type,null,null
ConstructorArgumentValues -> @Nullable 	public ValueHolder getArgumentValue(int index, Class<?> requiredType);1496837955;Look for an argument value that either corresponds to the given index_in the constructor argument list or generically matches by type._@param index the index in the constructor argument list_@param requiredType the parameter type to match_@return the ValueHolder for the argument, or {@code null} if none set;@Nullable_	public ValueHolder getArgumentValue(int index, Class<?> requiredType) {_		return getArgumentValue(index, requiredType, null, null)__	};look,for,an,argument,value,that,either,corresponds,to,the,given,index,in,the,constructor,argument,list,or,generically,matches,by,type,param,index,the,index,in,the,constructor,argument,list,param,required,type,the,parameter,type,to,match,return,the,value,holder,for,the,argument,or,code,null,if,none,set;nullable,public,value,holder,get,argument,value,int,index,class,required,type,return,get,argument,value,index,required,type,null,null
ConstructorArgumentValues -> @Nullable 	public ValueHolder getArgumentValue(int index, Class<?> requiredType);1497250713;Look for an argument value that either corresponds to the given index_in the constructor argument list or generically matches by type._@param index the index in the constructor argument list_@param requiredType the parameter type to match_@return the ValueHolder for the argument, or {@code null} if none set;@Nullable_	public ValueHolder getArgumentValue(int index, Class<?> requiredType) {_		return getArgumentValue(index, requiredType, null, null)__	};look,for,an,argument,value,that,either,corresponds,to,the,given,index,in,the,constructor,argument,list,or,generically,matches,by,type,param,index,the,index,in,the,constructor,argument,list,param,required,type,the,parameter,type,to,match,return,the,value,holder,for,the,argument,or,code,null,if,none,set;nullable,public,value,holder,get,argument,value,int,index,class,required,type,return,get,argument,value,index,required,type,null,null
ConstructorArgumentValues -> @Nullable 	public ValueHolder getArgumentValue(int index, Class<?> requiredType);1498780456;Look for an argument value that either corresponds to the given index_in the constructor argument list or generically matches by type._@param index the index in the constructor argument list_@param requiredType the parameter type to match_@return the ValueHolder for the argument, or {@code null} if none set;@Nullable_	public ValueHolder getArgumentValue(int index, Class<?> requiredType) {_		return getArgumentValue(index, requiredType, null, null)__	};look,for,an,argument,value,that,either,corresponds,to,the,given,index,in,the,constructor,argument,list,or,generically,matches,by,type,param,index,the,index,in,the,constructor,argument,list,param,required,type,the,parameter,type,to,match,return,the,value,holder,for,the,argument,or,code,null,if,none,set;nullable,public,value,holder,get,argument,value,int,index,class,required,type,return,get,argument,value,index,required,type,null,null
ConstructorArgumentValues -> @Nullable 	public ValueHolder getArgumentValue(int index, Class<?> requiredType);1500448076;Look for an argument value that either corresponds to the given index_in the constructor argument list or generically matches by type._@param index the index in the constructor argument list_@param requiredType the parameter type to match_@return the ValueHolder for the argument, or {@code null} if none set;@Nullable_	public ValueHolder getArgumentValue(int index, Class<?> requiredType) {_		return getArgumentValue(index, requiredType, null, null)__	};look,for,an,argument,value,that,either,corresponds,to,the,given,index,in,the,constructor,argument,list,or,generically,matches,by,type,param,index,the,index,in,the,constructor,argument,list,param,required,type,the,parameter,type,to,match,return,the,value,holder,for,the,argument,or,code,null,if,none,set;nullable,public,value,holder,get,argument,value,int,index,class,required,type,return,get,argument,value,index,required,type,null,null
ConstructorArgumentValues -> @Nullable 	public ValueHolder getArgumentValue(int index, Class<?> requiredType);1531945062;Look for an argument value that either corresponds to the given index_in the constructor argument list or generically matches by type._@param index the index in the constructor argument list_@param requiredType the parameter type to match_@return the ValueHolder for the argument, or {@code null} if none set;@Nullable_	public ValueHolder getArgumentValue(int index, Class<?> requiredType) {_		return getArgumentValue(index, requiredType, null, null)__	};look,for,an,argument,value,that,either,corresponds,to,the,given,index,in,the,constructor,argument,list,or,generically,matches,by,type,param,index,the,index,in,the,constructor,argument,list,param,required,type,the,parameter,type,to,match,return,the,value,holder,for,the,argument,or,code,null,if,none,set;nullable,public,value,holder,get,argument,value,int,index,class,required,type,return,get,argument,value,index,required,type,null,null
ConstructorArgumentValues -> @Nullable 	public ValueHolder getArgumentValue(int index, Class<?> requiredType);1532981251;Look for an argument value that either corresponds to the given index_in the constructor argument list or generically matches by type._@param index the index in the constructor argument list_@param requiredType the parameter type to match_@return the ValueHolder for the argument, or {@code null} if none set;@Nullable_	public ValueHolder getArgumentValue(int index, Class<?> requiredType) {_		return getArgumentValue(index, requiredType, null, null)__	};look,for,an,argument,value,that,either,corresponds,to,the,given,index,in,the,constructor,argument,list,or,generically,matches,by,type,param,index,the,index,in,the,constructor,argument,list,param,required,type,the,parameter,type,to,match,return,the,value,holder,for,the,argument,or,code,null,if,none,set;nullable,public,value,holder,get,argument,value,int,index,class,required,type,return,get,argument,value,index,required,type,null,null
ConstructorArgumentValues -> @Nullable 	public ValueHolder getArgumentValue(int index, Class<?> requiredType);1549554785;Look for an argument value that either corresponds to the given index_in the constructor argument list or generically matches by type._@param index the index in the constructor argument list_@param requiredType the parameter type to match_@return the ValueHolder for the argument, or {@code null} if none set;@Nullable_	public ValueHolder getArgumentValue(int index, Class<?> requiredType) {_		return getArgumentValue(index, requiredType, null, null)__	};look,for,an,argument,value,that,either,corresponds,to,the,given,index,in,the,constructor,argument,list,or,generically,matches,by,type,param,index,the,index,in,the,constructor,argument,list,param,required,type,the,parameter,type,to,match,return,the,value,holder,for,the,argument,or,code,null,if,none,set;nullable,public,value,holder,get,argument,value,int,index,class,required,type,return,get,argument,value,index,required,type,null,null
ConstructorArgumentValues -> ValueHolder -> public ValueHolder copy();1328020251;Create a copy of this ValueHolder: that is, an independent_ValueHolder instance with the same contents.;public ValueHolder copy() {_			ValueHolder copy = new ValueHolder(this.value, this.type, this.name)__			copy.setSource(this.source)__			return copy__		};create,a,copy,of,this,value,holder,that,is,an,independent,value,holder,instance,with,the,same,contents;public,value,holder,copy,value,holder,copy,new,value,holder,this,value,this,type,this,name,copy,set,source,this,source,return,copy
ConstructorArgumentValues -> ValueHolder -> public ValueHolder copy();1356735495;Create a copy of this ValueHolder: that is, an independent_ValueHolder instance with the same contents.;public ValueHolder copy() {_			ValueHolder copy = new ValueHolder(this.value, this.type, this.name)__			copy.setSource(this.source)__			return copy__		};create,a,copy,of,this,value,holder,that,is,an,independent,value,holder,instance,with,the,same,contents;public,value,holder,copy,value,holder,copy,new,value,holder,this,value,this,type,this,name,copy,set,source,this,source,return,copy
ConstructorArgumentValues -> ValueHolder -> public ValueHolder copy();1357119239;Create a copy of this ValueHolder: that is, an independent_ValueHolder instance with the same contents.;public ValueHolder copy() {_			ValueHolder copy = new ValueHolder(this.value, this.type, this.name)__			copy.setSource(this.source)__			return copy__		};create,a,copy,of,this,value,holder,that,is,an,independent,value,holder,instance,with,the,same,contents;public,value,holder,copy,value,holder,copy,new,value,holder,this,value,this,type,this,name,copy,set,source,this,source,return,copy
ConstructorArgumentValues -> ValueHolder -> public ValueHolder copy();1368482696;Create a copy of this ValueHolder: that is, an independent_ValueHolder instance with the same contents.;public ValueHolder copy() {_			ValueHolder copy = new ValueHolder(this.value, this.type, this.name)__			copy.setSource(this.source)__			return copy__		};create,a,copy,of,this,value,holder,that,is,an,independent,value,holder,instance,with,the,same,contents;public,value,holder,copy,value,holder,copy,new,value,holder,this,value,this,type,this,name,copy,set,source,this,source,return,copy
ConstructorArgumentValues -> ValueHolder -> public ValueHolder copy();1382789137;Create a copy of this ValueHolder: that is, an independent_ValueHolder instance with the same contents.;public ValueHolder copy() {_			ValueHolder copy = new ValueHolder(this.value, this.type, this.name)__			copy.setSource(this.source)__			return copy__		};create,a,copy,of,this,value,holder,that,is,an,independent,value,holder,instance,with,the,same,contents;public,value,holder,copy,value,holder,copy,new,value,holder,this,value,this,type,this,name,copy,set,source,this,source,return,copy
ConstructorArgumentValues -> ValueHolder -> public ValueHolder copy();1458323493;Create a copy of this ValueHolder: that is, an independent_ValueHolder instance with the same contents.;public ValueHolder copy() {_			ValueHolder copy = new ValueHolder(this.value, this.type, this.name)__			copy.setSource(this.source)__			return copy__		};create,a,copy,of,this,value,holder,that,is,an,independent,value,holder,instance,with,the,same,contents;public,value,holder,copy,value,holder,copy,new,value,holder,this,value,this,type,this,name,copy,set,source,this,source,return,copy
ConstructorArgumentValues -> ValueHolder -> public ValueHolder copy();1467730834;Create a copy of this ValueHolder: that is, an independent_ValueHolder instance with the same contents.;public ValueHolder copy() {_			ValueHolder copy = new ValueHolder(this.value, this.type, this.name)__			copy.setSource(this.source)__			return copy__		};create,a,copy,of,this,value,holder,that,is,an,independent,value,holder,instance,with,the,same,contents;public,value,holder,copy,value,holder,copy,new,value,holder,this,value,this,type,this,name,copy,set,source,this,source,return,copy
ConstructorArgumentValues -> ValueHolder -> public ValueHolder copy();1495868221;Create a copy of this ValueHolder: that is, an independent_ValueHolder instance with the same contents.;public ValueHolder copy() {_			ValueHolder copy = new ValueHolder(this.value, this.type, this.name)__			copy.setSource(this.source)__			return copy__		};create,a,copy,of,this,value,holder,that,is,an,independent,value,holder,instance,with,the,same,contents;public,value,holder,copy,value,holder,copy,new,value,holder,this,value,this,type,this,name,copy,set,source,this,source,return,copy
ConstructorArgumentValues -> ValueHolder -> public ValueHolder copy();1496259743;Create a copy of this ValueHolder: that is, an independent_ValueHolder instance with the same contents.;public ValueHolder copy() {_			ValueHolder copy = new ValueHolder(this.value, this.type, this.name)__			copy.setSource(this.source)__			return copy__		};create,a,copy,of,this,value,holder,that,is,an,independent,value,holder,instance,with,the,same,contents;public,value,holder,copy,value,holder,copy,new,value,holder,this,value,this,type,this,name,copy,set,source,this,source,return,copy
ConstructorArgumentValues -> ValueHolder -> public ValueHolder copy();1496837955;Create a copy of this ValueHolder: that is, an independent_ValueHolder instance with the same contents.;public ValueHolder copy() {_			ValueHolder copy = new ValueHolder(this.value, this.type, this.name)__			copy.setSource(this.source)__			return copy__		};create,a,copy,of,this,value,holder,that,is,an,independent,value,holder,instance,with,the,same,contents;public,value,holder,copy,value,holder,copy,new,value,holder,this,value,this,type,this,name,copy,set,source,this,source,return,copy
ConstructorArgumentValues -> ValueHolder -> public ValueHolder copy();1497250713;Create a copy of this ValueHolder: that is, an independent_ValueHolder instance with the same contents.;public ValueHolder copy() {_			ValueHolder copy = new ValueHolder(this.value, this.type, this.name)__			copy.setSource(this.source)__			return copy__		};create,a,copy,of,this,value,holder,that,is,an,independent,value,holder,instance,with,the,same,contents;public,value,holder,copy,value,holder,copy,new,value,holder,this,value,this,type,this,name,copy,set,source,this,source,return,copy
ConstructorArgumentValues -> ValueHolder -> public ValueHolder copy();1498780456;Create a copy of this ValueHolder: that is, an independent_ValueHolder instance with the same contents.;public ValueHolder copy() {_			ValueHolder copy = new ValueHolder(this.value, this.type, this.name)__			copy.setSource(this.source)__			return copy__		};create,a,copy,of,this,value,holder,that,is,an,independent,value,holder,instance,with,the,same,contents;public,value,holder,copy,value,holder,copy,new,value,holder,this,value,this,type,this,name,copy,set,source,this,source,return,copy
ConstructorArgumentValues -> ValueHolder -> public ValueHolder copy();1500448076;Create a copy of this ValueHolder: that is, an independent_ValueHolder instance with the same contents.;public ValueHolder copy() {_			ValueHolder copy = new ValueHolder(this.value, this.type, this.name)__			copy.setSource(this.source)__			return copy__		};create,a,copy,of,this,value,holder,that,is,an,independent,value,holder,instance,with,the,same,contents;public,value,holder,copy,value,holder,copy,new,value,holder,this,value,this,type,this,name,copy,set,source,this,source,return,copy
ConstructorArgumentValues -> ValueHolder -> public ValueHolder copy();1531945062;Create a copy of this ValueHolder: that is, an independent_ValueHolder instance with the same contents.;public ValueHolder copy() {_			ValueHolder copy = new ValueHolder(this.value, this.type, this.name)__			copy.setSource(this.source)__			return copy__		};create,a,copy,of,this,value,holder,that,is,an,independent,value,holder,instance,with,the,same,contents;public,value,holder,copy,value,holder,copy,new,value,holder,this,value,this,type,this,name,copy,set,source,this,source,return,copy
ConstructorArgumentValues -> ValueHolder -> public ValueHolder copy();1532981251;Create a copy of this ValueHolder: that is, an independent_ValueHolder instance with the same contents.;public ValueHolder copy() {_			ValueHolder copy = new ValueHolder(this.value, this.type, this.name)__			copy.setSource(this.source)__			return copy__		};create,a,copy,of,this,value,holder,that,is,an,independent,value,holder,instance,with,the,same,contents;public,value,holder,copy,value,holder,copy,new,value,holder,this,value,this,type,this,name,copy,set,source,this,source,return,copy
ConstructorArgumentValues -> ValueHolder -> public ValueHolder copy();1549554785;Create a copy of this ValueHolder: that is, an independent_ValueHolder instance with the same contents.;public ValueHolder copy() {_			ValueHolder copy = new ValueHolder(this.value, this.type, this.name)__			copy.setSource(this.source)__			return copy__		};create,a,copy,of,this,value,holder,that,is,an,independent,value,holder,instance,with,the,same,contents;public,value,holder,copy,value,holder,copy,new,value,holder,this,value,this,type,this,name,copy,set,source,this,source,return,copy
ConstructorArgumentValues -> ValueHolder -> @Nullable 		public String getType();1496837955;Return the type of the constructor argument.;@Nullable_		public String getType() {_			return this.type__		};return,the,type,of,the,constructor,argument;nullable,public,string,get,type,return,this,type
ConstructorArgumentValues -> ValueHolder -> @Nullable 		public String getType();1497250713;Return the type of the constructor argument.;@Nullable_		public String getType() {_			return this.type__		};return,the,type,of,the,constructor,argument;nullable,public,string,get,type,return,this,type
ConstructorArgumentValues -> ValueHolder -> @Nullable 		public String getType();1498780456;Return the type of the constructor argument.;@Nullable_		public String getType() {_			return this.type__		};return,the,type,of,the,constructor,argument;nullable,public,string,get,type,return,this,type
ConstructorArgumentValues -> ValueHolder -> @Nullable 		public String getType();1500448076;Return the type of the constructor argument.;@Nullable_		public String getType() {_			return this.type__		};return,the,type,of,the,constructor,argument;nullable,public,string,get,type,return,this,type
ConstructorArgumentValues -> ValueHolder -> @Nullable 		public String getType();1531945062;Return the type of the constructor argument.;@Nullable_		public String getType() {_			return this.type__		};return,the,type,of,the,constructor,argument;nullable,public,string,get,type,return,this,type
ConstructorArgumentValues -> ValueHolder -> @Nullable 		public String getType();1532981251;Return the type of the constructor argument.;@Nullable_		public String getType() {_			return this.type__		};return,the,type,of,the,constructor,argument;nullable,public,string,get,type,return,this,type
ConstructorArgumentValues -> ValueHolder -> @Nullable 		public String getType();1549554785;Return the type of the constructor argument.;@Nullable_		public String getType() {_			return this.type__		};return,the,type,of,the,constructor,argument;nullable,public,string,get,type,return,this,type
ConstructorArgumentValues -> public void clear();1328020251;Clear this holder, removing all argument values.;public void clear() {_		this.indexedArgumentValues.clear()__		this.genericArgumentValues.clear()__	};clear,this,holder,removing,all,argument,values;public,void,clear,this,indexed,argument,values,clear,this,generic,argument,values,clear
ConstructorArgumentValues -> public void clear();1356735495;Clear this holder, removing all argument values.;public void clear() {_		this.indexedArgumentValues.clear()__		this.genericArgumentValues.clear()__	};clear,this,holder,removing,all,argument,values;public,void,clear,this,indexed,argument,values,clear,this,generic,argument,values,clear
ConstructorArgumentValues -> public void clear();1357119239;Clear this holder, removing all argument values.;public void clear() {_		this.indexedArgumentValues.clear()__		this.genericArgumentValues.clear()__	};clear,this,holder,removing,all,argument,values;public,void,clear,this,indexed,argument,values,clear,this,generic,argument,values,clear
ConstructorArgumentValues -> public void clear();1368482696;Clear this holder, removing all argument values.;public void clear() {_		this.indexedArgumentValues.clear()__		this.genericArgumentValues.clear()__	};clear,this,holder,removing,all,argument,values;public,void,clear,this,indexed,argument,values,clear,this,generic,argument,values,clear
ConstructorArgumentValues -> public void clear();1382789137;Clear this holder, removing all argument values.;public void clear() {_		this.indexedArgumentValues.clear()__		this.genericArgumentValues.clear()__	};clear,this,holder,removing,all,argument,values;public,void,clear,this,indexed,argument,values,clear,this,generic,argument,values,clear
ConstructorArgumentValues -> public void clear();1458323493;Clear this holder, removing all argument values.;public void clear() {_		this.indexedArgumentValues.clear()__		this.genericArgumentValues.clear()__	};clear,this,holder,removing,all,argument,values;public,void,clear,this,indexed,argument,values,clear,this,generic,argument,values,clear
ConstructorArgumentValues -> public void clear();1467730834;Clear this holder, removing all argument values.;public void clear() {_		this.indexedArgumentValues.clear()__		this.genericArgumentValues.clear()__	};clear,this,holder,removing,all,argument,values;public,void,clear,this,indexed,argument,values,clear,this,generic,argument,values,clear
ConstructorArgumentValues -> public void clear();1495868221;Clear this holder, removing all argument values.;public void clear() {_		this.indexedArgumentValues.clear()__		this.genericArgumentValues.clear()__	};clear,this,holder,removing,all,argument,values;public,void,clear,this,indexed,argument,values,clear,this,generic,argument,values,clear
ConstructorArgumentValues -> public void clear();1496259743;Clear this holder, removing all argument values.;public void clear() {_		this.indexedArgumentValues.clear()__		this.genericArgumentValues.clear()__	};clear,this,holder,removing,all,argument,values;public,void,clear,this,indexed,argument,values,clear,this,generic,argument,values,clear
ConstructorArgumentValues -> public void clear();1496837955;Clear this holder, removing all argument values.;public void clear() {_		this.indexedArgumentValues.clear()__		this.genericArgumentValues.clear()__	};clear,this,holder,removing,all,argument,values;public,void,clear,this,indexed,argument,values,clear,this,generic,argument,values,clear
ConstructorArgumentValues -> public void clear();1497250713;Clear this holder, removing all argument values.;public void clear() {_		this.indexedArgumentValues.clear()__		this.genericArgumentValues.clear()__	};clear,this,holder,removing,all,argument,values;public,void,clear,this,indexed,argument,values,clear,this,generic,argument,values,clear
ConstructorArgumentValues -> public void clear();1498780456;Clear this holder, removing all argument values.;public void clear() {_		this.indexedArgumentValues.clear()__		this.genericArgumentValues.clear()__	};clear,this,holder,removing,all,argument,values;public,void,clear,this,indexed,argument,values,clear,this,generic,argument,values,clear
ConstructorArgumentValues -> public void clear();1500448076;Clear this holder, removing all argument values.;public void clear() {_		this.indexedArgumentValues.clear()__		this.genericArgumentValues.clear()__	};clear,this,holder,removing,all,argument,values;public,void,clear,this,indexed,argument,values,clear,this,generic,argument,values,clear
ConstructorArgumentValues -> public void clear();1531945062;Clear this holder, removing all argument values.;public void clear() {_		this.indexedArgumentValues.clear()__		this.genericArgumentValues.clear()__	};clear,this,holder,removing,all,argument,values;public,void,clear,this,indexed,argument,values,clear,this,generic,argument,values,clear
ConstructorArgumentValues -> public void clear();1532981251;Clear this holder, removing all argument values.;public void clear() {_		this.indexedArgumentValues.clear()__		this.genericArgumentValues.clear()__	};clear,this,holder,removing,all,argument,values;public,void,clear,this,indexed,argument,values,clear,this,generic,argument,values,clear
ConstructorArgumentValues -> public void clear();1549554785;Clear this holder, removing all argument values.;public void clear() {_		this.indexedArgumentValues.clear()__		this.genericArgumentValues.clear()__	};clear,this,holder,removing,all,argument,values;public,void,clear,this,indexed,argument,values,clear,this,generic,argument,values,clear
ConstructorArgumentValues -> @Nullable 	public ValueHolder getArgumentValue(int index, @Nullable Class<?> requiredType, @Nullable String requiredName, @Nullable Set<ValueHolder> usedValueHolders);1496259743;Look for an argument value that either corresponds to the given index_in the constructor argument list or generically matches by type._@param index the index in the constructor argument list_@param requiredType the parameter type to match (can be {@code null}_to find an untyped argument value)_@param requiredName the parameter name to match (can be {@code null}_to find an unnamed argument value, or empty String to match any name)_@param usedValueHolders a Set of ValueHolder objects that have already_been used in the current resolution process and should therefore not_be returned again (allowing to return the next generic argument match_in case of multiple generic argument values of the same type)_@return the ValueHolder for the argument, or {@code null} if none set;@Nullable_	public ValueHolder getArgumentValue(int index, @Nullable Class<?> requiredType, @Nullable String requiredName, @Nullable Set<ValueHolder> usedValueHolders) {_		Assert.isTrue(index >= 0, "Index must not be negative")__		ValueHolder valueHolder = getIndexedArgumentValue(index, requiredType, requiredName)__		if (valueHolder == null) {_			valueHolder = getGenericArgumentValue(requiredType, requiredName, usedValueHolders)__		}_		return valueHolder__	};look,for,an,argument,value,that,either,corresponds,to,the,given,index,in,the,constructor,argument,list,or,generically,matches,by,type,param,index,the,index,in,the,constructor,argument,list,param,required,type,the,parameter,type,to,match,can,be,code,null,to,find,an,untyped,argument,value,param,required,name,the,parameter,name,to,match,can,be,code,null,to,find,an,unnamed,argument,value,or,empty,string,to,match,any,name,param,used,value,holders,a,set,of,value,holder,objects,that,have,already,been,used,in,the,current,resolution,process,and,should,therefore,not,be,returned,again,allowing,to,return,the,next,generic,argument,match,in,case,of,multiple,generic,argument,values,of,the,same,type,return,the,value,holder,for,the,argument,or,code,null,if,none,set;nullable,public,value,holder,get,argument,value,int,index,nullable,class,required,type,nullable,string,required,name,nullable,set,value,holder,used,value,holders,assert,is,true,index,0,index,must,not,be,negative,value,holder,value,holder,get,indexed,argument,value,index,required,type,required,name,if,value,holder,null,value,holder,get,generic,argument,value,required,type,required,name,used,value,holders,return,value,holder
ConstructorArgumentValues -> @Nullable 	public ValueHolder getArgumentValue(int index, @Nullable Class<?> requiredType, @Nullable String requiredName, @Nullable Set<ValueHolder> usedValueHolders);1496837955;Look for an argument value that either corresponds to the given index_in the constructor argument list or generically matches by type._@param index the index in the constructor argument list_@param requiredType the parameter type to match (can be {@code null}_to find an untyped argument value)_@param requiredName the parameter name to match (can be {@code null}_to find an unnamed argument value, or empty String to match any name)_@param usedValueHolders a Set of ValueHolder objects that have already_been used in the current resolution process and should therefore not_be returned again (allowing to return the next generic argument match_in case of multiple generic argument values of the same type)_@return the ValueHolder for the argument, or {@code null} if none set;@Nullable_	public ValueHolder getArgumentValue(int index, @Nullable Class<?> requiredType, @Nullable String requiredName, @Nullable Set<ValueHolder> usedValueHolders) {_		Assert.isTrue(index >= 0, "Index must not be negative")__		ValueHolder valueHolder = getIndexedArgumentValue(index, requiredType, requiredName)__		if (valueHolder == null) {_			valueHolder = getGenericArgumentValue(requiredType, requiredName, usedValueHolders)__		}_		return valueHolder__	};look,for,an,argument,value,that,either,corresponds,to,the,given,index,in,the,constructor,argument,list,or,generically,matches,by,type,param,index,the,index,in,the,constructor,argument,list,param,required,type,the,parameter,type,to,match,can,be,code,null,to,find,an,untyped,argument,value,param,required,name,the,parameter,name,to,match,can,be,code,null,to,find,an,unnamed,argument,value,or,empty,string,to,match,any,name,param,used,value,holders,a,set,of,value,holder,objects,that,have,already,been,used,in,the,current,resolution,process,and,should,therefore,not,be,returned,again,allowing,to,return,the,next,generic,argument,match,in,case,of,multiple,generic,argument,values,of,the,same,type,return,the,value,holder,for,the,argument,or,code,null,if,none,set;nullable,public,value,holder,get,argument,value,int,index,nullable,class,required,type,nullable,string,required,name,nullable,set,value,holder,used,value,holders,assert,is,true,index,0,index,must,not,be,negative,value,holder,value,holder,get,indexed,argument,value,index,required,type,required,name,if,value,holder,null,value,holder,get,generic,argument,value,required,type,required,name,used,value,holders,return,value,holder
ConstructorArgumentValues -> @Nullable 	public ValueHolder getArgumentValue(int index, @Nullable Class<?> requiredType, @Nullable String requiredName, @Nullable Set<ValueHolder> usedValueHolders);1497250713;Look for an argument value that either corresponds to the given index_in the constructor argument list or generically matches by type._@param index the index in the constructor argument list_@param requiredType the parameter type to match (can be {@code null}_to find an untyped argument value)_@param requiredName the parameter name to match (can be {@code null}_to find an unnamed argument value, or empty String to match any name)_@param usedValueHolders a Set of ValueHolder objects that have already_been used in the current resolution process and should therefore not_be returned again (allowing to return the next generic argument match_in case of multiple generic argument values of the same type)_@return the ValueHolder for the argument, or {@code null} if none set;@Nullable_	public ValueHolder getArgumentValue(int index, @Nullable Class<?> requiredType, @Nullable String requiredName, @Nullable Set<ValueHolder> usedValueHolders) {_		Assert.isTrue(index >= 0, "Index must not be negative")__		ValueHolder valueHolder = getIndexedArgumentValue(index, requiredType, requiredName)__		if (valueHolder == null) {_			valueHolder = getGenericArgumentValue(requiredType, requiredName, usedValueHolders)__		}_		return valueHolder__	};look,for,an,argument,value,that,either,corresponds,to,the,given,index,in,the,constructor,argument,list,or,generically,matches,by,type,param,index,the,index,in,the,constructor,argument,list,param,required,type,the,parameter,type,to,match,can,be,code,null,to,find,an,untyped,argument,value,param,required,name,the,parameter,name,to,match,can,be,code,null,to,find,an,unnamed,argument,value,or,empty,string,to,match,any,name,param,used,value,holders,a,set,of,value,holder,objects,that,have,already,been,used,in,the,current,resolution,process,and,should,therefore,not,be,returned,again,allowing,to,return,the,next,generic,argument,match,in,case,of,multiple,generic,argument,values,of,the,same,type,return,the,value,holder,for,the,argument,or,code,null,if,none,set;nullable,public,value,holder,get,argument,value,int,index,nullable,class,required,type,nullable,string,required,name,nullable,set,value,holder,used,value,holders,assert,is,true,index,0,index,must,not,be,negative,value,holder,value,holder,get,indexed,argument,value,index,required,type,required,name,if,value,holder,null,value,holder,get,generic,argument,value,required,type,required,name,used,value,holders,return,value,holder
ConstructorArgumentValues -> @Nullable 	public ValueHolder getArgumentValue(int index, @Nullable Class<?> requiredType, @Nullable String requiredName, @Nullable Set<ValueHolder> usedValueHolders);1498780456;Look for an argument value that either corresponds to the given index_in the constructor argument list or generically matches by type._@param index the index in the constructor argument list_@param requiredType the parameter type to match (can be {@code null}_to find an untyped argument value)_@param requiredName the parameter name to match (can be {@code null}_to find an unnamed argument value, or empty String to match any name)_@param usedValueHolders a Set of ValueHolder objects that have already_been used in the current resolution process and should therefore not_be returned again (allowing to return the next generic argument match_in case of multiple generic argument values of the same type)_@return the ValueHolder for the argument, or {@code null} if none set;@Nullable_	public ValueHolder getArgumentValue(int index, @Nullable Class<?> requiredType, @Nullable String requiredName, @Nullable Set<ValueHolder> usedValueHolders) {_		Assert.isTrue(index >= 0, "Index must not be negative")__		ValueHolder valueHolder = getIndexedArgumentValue(index, requiredType, requiredName)__		if (valueHolder == null) {_			valueHolder = getGenericArgumentValue(requiredType, requiredName, usedValueHolders)__		}_		return valueHolder__	};look,for,an,argument,value,that,either,corresponds,to,the,given,index,in,the,constructor,argument,list,or,generically,matches,by,type,param,index,the,index,in,the,constructor,argument,list,param,required,type,the,parameter,type,to,match,can,be,code,null,to,find,an,untyped,argument,value,param,required,name,the,parameter,name,to,match,can,be,code,null,to,find,an,unnamed,argument,value,or,empty,string,to,match,any,name,param,used,value,holders,a,set,of,value,holder,objects,that,have,already,been,used,in,the,current,resolution,process,and,should,therefore,not,be,returned,again,allowing,to,return,the,next,generic,argument,match,in,case,of,multiple,generic,argument,values,of,the,same,type,return,the,value,holder,for,the,argument,or,code,null,if,none,set;nullable,public,value,holder,get,argument,value,int,index,nullable,class,required,type,nullable,string,required,name,nullable,set,value,holder,used,value,holders,assert,is,true,index,0,index,must,not,be,negative,value,holder,value,holder,get,indexed,argument,value,index,required,type,required,name,if,value,holder,null,value,holder,get,generic,argument,value,required,type,required,name,used,value,holders,return,value,holder
ConstructorArgumentValues -> @Nullable 	public ValueHolder getArgumentValue(int index, @Nullable Class<?> requiredType, @Nullable String requiredName, @Nullable Set<ValueHolder> usedValueHolders);1500448076;Look for an argument value that either corresponds to the given index_in the constructor argument list or generically matches by type._@param index the index in the constructor argument list_@param requiredType the parameter type to match (can be {@code null}_to find an untyped argument value)_@param requiredName the parameter name to match (can be {@code null}_to find an unnamed argument value, or empty String to match any name)_@param usedValueHolders a Set of ValueHolder objects that have already_been used in the current resolution process and should therefore not_be returned again (allowing to return the next generic argument match_in case of multiple generic argument values of the same type)_@return the ValueHolder for the argument, or {@code null} if none set;@Nullable_	public ValueHolder getArgumentValue(int index, @Nullable Class<?> requiredType, @Nullable String requiredName, @Nullable Set<ValueHolder> usedValueHolders) {_		Assert.isTrue(index >= 0, "Index must not be negative")__		ValueHolder valueHolder = getIndexedArgumentValue(index, requiredType, requiredName)__		if (valueHolder == null) {_			valueHolder = getGenericArgumentValue(requiredType, requiredName, usedValueHolders)__		}_		return valueHolder__	};look,for,an,argument,value,that,either,corresponds,to,the,given,index,in,the,constructor,argument,list,or,generically,matches,by,type,param,index,the,index,in,the,constructor,argument,list,param,required,type,the,parameter,type,to,match,can,be,code,null,to,find,an,untyped,argument,value,param,required,name,the,parameter,name,to,match,can,be,code,null,to,find,an,unnamed,argument,value,or,empty,string,to,match,any,name,param,used,value,holders,a,set,of,value,holder,objects,that,have,already,been,used,in,the,current,resolution,process,and,should,therefore,not,be,returned,again,allowing,to,return,the,next,generic,argument,match,in,case,of,multiple,generic,argument,values,of,the,same,type,return,the,value,holder,for,the,argument,or,code,null,if,none,set;nullable,public,value,holder,get,argument,value,int,index,nullable,class,required,type,nullable,string,required,name,nullable,set,value,holder,used,value,holders,assert,is,true,index,0,index,must,not,be,negative,value,holder,value,holder,get,indexed,argument,value,index,required,type,required,name,if,value,holder,null,value,holder,get,generic,argument,value,required,type,required,name,used,value,holders,return,value,holder
ConstructorArgumentValues -> @Nullable 	public ValueHolder getArgumentValue(int index, @Nullable Class<?> requiredType, @Nullable String requiredName, @Nullable Set<ValueHolder> usedValueHolders);1531945062;Look for an argument value that either corresponds to the given index_in the constructor argument list or generically matches by type._@param index the index in the constructor argument list_@param requiredType the parameter type to match (can be {@code null}_to find an untyped argument value)_@param requiredName the parameter name to match (can be {@code null}_to find an unnamed argument value, or empty String to match any name)_@param usedValueHolders a Set of ValueHolder objects that have already_been used in the current resolution process and should therefore not_be returned again (allowing to return the next generic argument match_in case of multiple generic argument values of the same type)_@return the ValueHolder for the argument, or {@code null} if none set;@Nullable_	public ValueHolder getArgumentValue(int index, @Nullable Class<?> requiredType, @Nullable String requiredName, @Nullable Set<ValueHolder> usedValueHolders) {_		Assert.isTrue(index >= 0, "Index must not be negative")__		ValueHolder valueHolder = getIndexedArgumentValue(index, requiredType, requiredName)__		if (valueHolder == null) {_			valueHolder = getGenericArgumentValue(requiredType, requiredName, usedValueHolders)__		}_		return valueHolder__	};look,for,an,argument,value,that,either,corresponds,to,the,given,index,in,the,constructor,argument,list,or,generically,matches,by,type,param,index,the,index,in,the,constructor,argument,list,param,required,type,the,parameter,type,to,match,can,be,code,null,to,find,an,untyped,argument,value,param,required,name,the,parameter,name,to,match,can,be,code,null,to,find,an,unnamed,argument,value,or,empty,string,to,match,any,name,param,used,value,holders,a,set,of,value,holder,objects,that,have,already,been,used,in,the,current,resolution,process,and,should,therefore,not,be,returned,again,allowing,to,return,the,next,generic,argument,match,in,case,of,multiple,generic,argument,values,of,the,same,type,return,the,value,holder,for,the,argument,or,code,null,if,none,set;nullable,public,value,holder,get,argument,value,int,index,nullable,class,required,type,nullable,string,required,name,nullable,set,value,holder,used,value,holders,assert,is,true,index,0,index,must,not,be,negative,value,holder,value,holder,get,indexed,argument,value,index,required,type,required,name,if,value,holder,null,value,holder,get,generic,argument,value,required,type,required,name,used,value,holders,return,value,holder
ConstructorArgumentValues -> @Nullable 	public ValueHolder getArgumentValue(int index, @Nullable Class<?> requiredType, @Nullable String requiredName, @Nullable Set<ValueHolder> usedValueHolders);1532981251;Look for an argument value that either corresponds to the given index_in the constructor argument list or generically matches by type._@param index the index in the constructor argument list_@param requiredType the parameter type to match (can be {@code null}_to find an untyped argument value)_@param requiredName the parameter name to match (can be {@code null}_to find an unnamed argument value, or empty String to match any name)_@param usedValueHolders a Set of ValueHolder objects that have already_been used in the current resolution process and should therefore not_be returned again (allowing to return the next generic argument match_in case of multiple generic argument values of the same type)_@return the ValueHolder for the argument, or {@code null} if none set;@Nullable_	public ValueHolder getArgumentValue(int index, @Nullable Class<?> requiredType, @Nullable String requiredName, @Nullable Set<ValueHolder> usedValueHolders) {_		Assert.isTrue(index >= 0, "Index must not be negative")__		ValueHolder valueHolder = getIndexedArgumentValue(index, requiredType, requiredName)__		if (valueHolder == null) {_			valueHolder = getGenericArgumentValue(requiredType, requiredName, usedValueHolders)__		}_		return valueHolder__	};look,for,an,argument,value,that,either,corresponds,to,the,given,index,in,the,constructor,argument,list,or,generically,matches,by,type,param,index,the,index,in,the,constructor,argument,list,param,required,type,the,parameter,type,to,match,can,be,code,null,to,find,an,untyped,argument,value,param,required,name,the,parameter,name,to,match,can,be,code,null,to,find,an,unnamed,argument,value,or,empty,string,to,match,any,name,param,used,value,holders,a,set,of,value,holder,objects,that,have,already,been,used,in,the,current,resolution,process,and,should,therefore,not,be,returned,again,allowing,to,return,the,next,generic,argument,match,in,case,of,multiple,generic,argument,values,of,the,same,type,return,the,value,holder,for,the,argument,or,code,null,if,none,set;nullable,public,value,holder,get,argument,value,int,index,nullable,class,required,type,nullable,string,required,name,nullable,set,value,holder,used,value,holders,assert,is,true,index,0,index,must,not,be,negative,value,holder,value,holder,get,indexed,argument,value,index,required,type,required,name,if,value,holder,null,value,holder,get,generic,argument,value,required,type,required,name,used,value,holders,return,value,holder
ConstructorArgumentValues -> @Nullable 	public ValueHolder getArgumentValue(int index, @Nullable Class<?> requiredType, @Nullable String requiredName, @Nullable Set<ValueHolder> usedValueHolders);1549554785;Look for an argument value that either corresponds to the given index_in the constructor argument list or generically matches by type._@param index the index in the constructor argument list_@param requiredType the parameter type to match (can be {@code null}_to find an untyped argument value)_@param requiredName the parameter name to match (can be {@code null}_to find an unnamed argument value, or empty String to match any name)_@param usedValueHolders a Set of ValueHolder objects that have already_been used in the current resolution process and should therefore not_be returned again (allowing to return the next generic argument match_in case of multiple generic argument values of the same type)_@return the ValueHolder for the argument, or {@code null} if none set;@Nullable_	public ValueHolder getArgumentValue(int index, @Nullable Class<?> requiredType, @Nullable String requiredName, @Nullable Set<ValueHolder> usedValueHolders) {_		Assert.isTrue(index >= 0, "Index must not be negative")__		ValueHolder valueHolder = getIndexedArgumentValue(index, requiredType, requiredName)__		if (valueHolder == null) {_			valueHolder = getGenericArgumentValue(requiredType, requiredName, usedValueHolders)__		}_		return valueHolder__	};look,for,an,argument,value,that,either,corresponds,to,the,given,index,in,the,constructor,argument,list,or,generically,matches,by,type,param,index,the,index,in,the,constructor,argument,list,param,required,type,the,parameter,type,to,match,can,be,code,null,to,find,an,untyped,argument,value,param,required,name,the,parameter,name,to,match,can,be,code,null,to,find,an,unnamed,argument,value,or,empty,string,to,match,any,name,param,used,value,holders,a,set,of,value,holder,objects,that,have,already,been,used,in,the,current,resolution,process,and,should,therefore,not,be,returned,again,allowing,to,return,the,next,generic,argument,match,in,case,of,multiple,generic,argument,values,of,the,same,type,return,the,value,holder,for,the,argument,or,code,null,if,none,set;nullable,public,value,holder,get,argument,value,int,index,nullable,class,required,type,nullable,string,required,name,nullable,set,value,holder,used,value,holders,assert,is,true,index,0,index,must,not,be,negative,value,holder,value,holder,get,indexed,argument,value,index,required,type,required,name,if,value,holder,null,value,holder,get,generic,argument,value,required,type,required,name,used,value,holders,return,value,holder
ConstructorArgumentValues -> ValueHolder -> @Nullable 		public String getName();1496837955;Return the name of the constructor argument.;@Nullable_		public String getName() {_			return this.name__		};return,the,name,of,the,constructor,argument;nullable,public,string,get,name,return,this,name
ConstructorArgumentValues -> ValueHolder -> @Nullable 		public String getName();1497250713;Return the name of the constructor argument.;@Nullable_		public String getName() {_			return this.name__		};return,the,name,of,the,constructor,argument;nullable,public,string,get,name,return,this,name
ConstructorArgumentValues -> ValueHolder -> @Nullable 		public String getName();1498780456;Return the name of the constructor argument.;@Nullable_		public String getName() {_			return this.name__		};return,the,name,of,the,constructor,argument;nullable,public,string,get,name,return,this,name
ConstructorArgumentValues -> ValueHolder -> @Nullable 		public String getName();1500448076;Return the name of the constructor argument.;@Nullable_		public String getName() {_			return this.name__		};return,the,name,of,the,constructor,argument;nullable,public,string,get,name,return,this,name
ConstructorArgumentValues -> ValueHolder -> @Nullable 		public String getName();1531945062;Return the name of the constructor argument.;@Nullable_		public String getName() {_			return this.name__		};return,the,name,of,the,constructor,argument;nullable,public,string,get,name,return,this,name
ConstructorArgumentValues -> ValueHolder -> @Nullable 		public String getName();1532981251;Return the name of the constructor argument.;@Nullable_		public String getName() {_			return this.name__		};return,the,name,of,the,constructor,argument;nullable,public,string,get,name,return,this,name
ConstructorArgumentValues -> ValueHolder -> @Nullable 		public String getName();1549554785;Return the name of the constructor argument.;@Nullable_		public String getName() {_			return this.name__		};return,the,name,of,the,constructor,argument;nullable,public,string,get,name,return,this,name
