# id;timestamp;commentText;codeText;commentWords;codeWords
DisposableBeanAdapter -> protected Object writeReplace();1328020251;Serializes a copy of the state of this class,_filtering out non-serializable BeanPostProcessors.;protected Object writeReplace() {_		List<DestructionAwareBeanPostProcessor> serializablePostProcessors = null__		if (this.beanPostProcessors != null) {_			serializablePostProcessors = new ArrayList<DestructionAwareBeanPostProcessor>()__			for (DestructionAwareBeanPostProcessor postProcessor : this.beanPostProcessors) {_				if (postProcessor instanceof Serializable) {_					serializablePostProcessors.add(postProcessor)__				}_			}_		}_		return new DisposableBeanAdapter(this.bean, this.beanName, this.invokeDisposableBean,_				this.nonPublicAccessAllowed, this.destroyMethodName, serializablePostProcessors)__	};serializes,a,copy,of,the,state,of,this,class,filtering,out,non,serializable,bean,post,processors;protected,object,write,replace,list,destruction,aware,bean,post,processor,serializable,post,processors,null,if,this,bean,post,processors,null,serializable,post,processors,new,array,list,destruction,aware,bean,post,processor,for,destruction,aware,bean,post,processor,post,processor,this,bean,post,processors,if,post,processor,instanceof,serializable,serializable,post,processors,add,post,processor,return,new,disposable,bean,adapter,this,bean,this,bean,name,this,invoke,disposable,bean,this,non,public,access,allowed,this,destroy,method,name,serializable,post,processors
DisposableBeanAdapter -> protected Object writeReplace();1353966428;Serializes a copy of the state of this class,_filtering out non-serializable BeanPostProcessors.;protected Object writeReplace() {_		List<DestructionAwareBeanPostProcessor> serializablePostProcessors = null__		if (this.beanPostProcessors != null) {_			serializablePostProcessors = new ArrayList<DestructionAwareBeanPostProcessor>()__			for (DestructionAwareBeanPostProcessor postProcessor : this.beanPostProcessors) {_				if (postProcessor instanceof Serializable) {_					serializablePostProcessors.add(postProcessor)__				}_			}_		}_		return new DisposableBeanAdapter(this.bean, this.beanName, this.invokeDisposableBean,_				this.nonPublicAccessAllowed, this.destroyMethodName, serializablePostProcessors)__	};serializes,a,copy,of,the,state,of,this,class,filtering,out,non,serializable,bean,post,processors;protected,object,write,replace,list,destruction,aware,bean,post,processor,serializable,post,processors,null,if,this,bean,post,processors,null,serializable,post,processors,new,array,list,destruction,aware,bean,post,processor,for,destruction,aware,bean,post,processor,post,processor,this,bean,post,processors,if,post,processor,instanceof,serializable,serializable,post,processors,add,post,processor,return,new,disposable,bean,adapter,this,bean,this,bean,name,this,invoke,disposable,bean,this,non,public,access,allowed,this,destroy,method,name,serializable,post,processors
DisposableBeanAdapter -> protected Object writeReplace();1356735495;Serializes a copy of the state of this class,_filtering out non-serializable BeanPostProcessors.;protected Object writeReplace() {_		List<DestructionAwareBeanPostProcessor> serializablePostProcessors = null__		if (this.beanPostProcessors != null) {_			serializablePostProcessors = new ArrayList<DestructionAwareBeanPostProcessor>()__			for (DestructionAwareBeanPostProcessor postProcessor : this.beanPostProcessors) {_				if (postProcessor instanceof Serializable) {_					serializablePostProcessors.add(postProcessor)__				}_			}_		}_		return new DisposableBeanAdapter(this.bean, this.beanName, this.invokeDisposableBean,_				this.nonPublicAccessAllowed, this.destroyMethodName, serializablePostProcessors)__	};serializes,a,copy,of,the,state,of,this,class,filtering,out,non,serializable,bean,post,processors;protected,object,write,replace,list,destruction,aware,bean,post,processor,serializable,post,processors,null,if,this,bean,post,processors,null,serializable,post,processors,new,array,list,destruction,aware,bean,post,processor,for,destruction,aware,bean,post,processor,post,processor,this,bean,post,processors,if,post,processor,instanceof,serializable,serializable,post,processors,add,post,processor,return,new,disposable,bean,adapter,this,bean,this,bean,name,this,invoke,disposable,bean,this,non,public,access,allowed,this,destroy,method,name,serializable,post,processors
DisposableBeanAdapter -> protected Object writeReplace();1357119239;Serializes a copy of the state of this class,_filtering out non-serializable BeanPostProcessors.;protected Object writeReplace() {_		List<DestructionAwareBeanPostProcessor> serializablePostProcessors = null__		if (this.beanPostProcessors != null) {_			serializablePostProcessors = new ArrayList<DestructionAwareBeanPostProcessor>()__			for (DestructionAwareBeanPostProcessor postProcessor : this.beanPostProcessors) {_				if (postProcessor instanceof Serializable) {_					serializablePostProcessors.add(postProcessor)__				}_			}_		}_		return new DisposableBeanAdapter(this.bean, this.beanName, this.invokeDisposableBean,_				this.nonPublicAccessAllowed, this.destroyMethodName, serializablePostProcessors)__	};serializes,a,copy,of,the,state,of,this,class,filtering,out,non,serializable,bean,post,processors;protected,object,write,replace,list,destruction,aware,bean,post,processor,serializable,post,processors,null,if,this,bean,post,processors,null,serializable,post,processors,new,array,list,destruction,aware,bean,post,processor,for,destruction,aware,bean,post,processor,post,processor,this,bean,post,processors,if,post,processor,instanceof,serializable,serializable,post,processors,add,post,processor,return,new,disposable,bean,adapter,this,bean,this,bean,name,this,invoke,disposable,bean,this,non,public,access,allowed,this,destroy,method,name,serializable,post,processors
DisposableBeanAdapter -> protected Object writeReplace();1362408075;Serializes a copy of the state of this class,_filtering out non-serializable BeanPostProcessors.;protected Object writeReplace() {_		List<DestructionAwareBeanPostProcessor> serializablePostProcessors = null__		if (this.beanPostProcessors != null) {_			serializablePostProcessors = new ArrayList<DestructionAwareBeanPostProcessor>()__			for (DestructionAwareBeanPostProcessor postProcessor : this.beanPostProcessors) {_				if (postProcessor instanceof Serializable) {_					serializablePostProcessors.add(postProcessor)__				}_			}_		}_		return new DisposableBeanAdapter(this.bean, this.beanName, this.invokeDisposableBean,_				this.nonPublicAccessAllowed, this.destroyMethodName, serializablePostProcessors)__	};serializes,a,copy,of,the,state,of,this,class,filtering,out,non,serializable,bean,post,processors;protected,object,write,replace,list,destruction,aware,bean,post,processor,serializable,post,processors,null,if,this,bean,post,processors,null,serializable,post,processors,new,array,list,destruction,aware,bean,post,processor,for,destruction,aware,bean,post,processor,post,processor,this,bean,post,processors,if,post,processor,instanceof,serializable,serializable,post,processors,add,post,processor,return,new,disposable,bean,adapter,this,bean,this,bean,name,this,invoke,disposable,bean,this,non,public,access,allowed,this,destroy,method,name,serializable,post,processors
DisposableBeanAdapter -> protected Object writeReplace();1364503447;Serializes a copy of the state of this class,_filtering out non-serializable BeanPostProcessors.;protected Object writeReplace() {_		List<DestructionAwareBeanPostProcessor> serializablePostProcessors = null__		if (this.beanPostProcessors != null) {_			serializablePostProcessors = new ArrayList<DestructionAwareBeanPostProcessor>()__			for (DestructionAwareBeanPostProcessor postProcessor : this.beanPostProcessors) {_				if (postProcessor instanceof Serializable) {_					serializablePostProcessors.add(postProcessor)__				}_			}_		}_		return new DisposableBeanAdapter(this.bean, this.beanName, this.invokeDisposableBean,_				this.nonPublicAccessAllowed, this.destroyMethodName, serializablePostProcessors)__	};serializes,a,copy,of,the,state,of,this,class,filtering,out,non,serializable,bean,post,processors;protected,object,write,replace,list,destruction,aware,bean,post,processor,serializable,post,processors,null,if,this,bean,post,processors,null,serializable,post,processors,new,array,list,destruction,aware,bean,post,processor,for,destruction,aware,bean,post,processor,post,processor,this,bean,post,processors,if,post,processor,instanceof,serializable,serializable,post,processors,add,post,processor,return,new,disposable,bean,adapter,this,bean,this,bean,name,this,invoke,disposable,bean,this,non,public,access,allowed,this,destroy,method,name,serializable,post,processors
DisposableBeanAdapter -> protected Object writeReplace();1368482696;Serializes a copy of the state of this class,_filtering out non-serializable BeanPostProcessors.;protected Object writeReplace() {_		List<DestructionAwareBeanPostProcessor> serializablePostProcessors = null__		if (this.beanPostProcessors != null) {_			serializablePostProcessors = new ArrayList<DestructionAwareBeanPostProcessor>()__			for (DestructionAwareBeanPostProcessor postProcessor : this.beanPostProcessors) {_				if (postProcessor instanceof Serializable) {_					serializablePostProcessors.add(postProcessor)__				}_			}_		}_		return new DisposableBeanAdapter(this.bean, this.beanName, this.invokeDisposableBean,_				this.nonPublicAccessAllowed, this.destroyMethodName, serializablePostProcessors)__	};serializes,a,copy,of,the,state,of,this,class,filtering,out,non,serializable,bean,post,processors;protected,object,write,replace,list,destruction,aware,bean,post,processor,serializable,post,processors,null,if,this,bean,post,processors,null,serializable,post,processors,new,array,list,destruction,aware,bean,post,processor,for,destruction,aware,bean,post,processor,post,processor,this,bean,post,processors,if,post,processor,instanceof,serializable,serializable,post,processors,add,post,processor,return,new,disposable,bean,adapter,this,bean,this,bean,name,this,invoke,disposable,bean,this,non,public,access,allowed,this,destroy,method,name,serializable,post,processors
DisposableBeanAdapter -> protected Object writeReplace();1385412762;Serializes a copy of the state of this class,_filtering out non-serializable BeanPostProcessors.;protected Object writeReplace() {_		List<DestructionAwareBeanPostProcessor> serializablePostProcessors = null__		if (this.beanPostProcessors != null) {_			serializablePostProcessors = new ArrayList<DestructionAwareBeanPostProcessor>()__			for (DestructionAwareBeanPostProcessor postProcessor : this.beanPostProcessors) {_				if (postProcessor instanceof Serializable) {_					serializablePostProcessors.add(postProcessor)__				}_			}_		}_		return new DisposableBeanAdapter(this.bean, this.beanName, this.invokeDisposableBean,_				this.nonPublicAccessAllowed, this.destroyMethodName, serializablePostProcessors)__	};serializes,a,copy,of,the,state,of,this,class,filtering,out,non,serializable,bean,post,processors;protected,object,write,replace,list,destruction,aware,bean,post,processor,serializable,post,processors,null,if,this,bean,post,processors,null,serializable,post,processors,new,array,list,destruction,aware,bean,post,processor,for,destruction,aware,bean,post,processor,post,processor,this,bean,post,processors,if,post,processor,instanceof,serializable,serializable,post,processors,add,post,processor,return,new,disposable,bean,adapter,this,bean,this,bean,name,this,invoke,disposable,bean,this,non,public,access,allowed,this,destroy,method,name,serializable,post,processors
DisposableBeanAdapter -> protected Object writeReplace();1398638841;Serializes a copy of the state of this class,_filtering out non-serializable BeanPostProcessors.;protected Object writeReplace() {_		List<DestructionAwareBeanPostProcessor> serializablePostProcessors = null__		if (this.beanPostProcessors != null) {_			serializablePostProcessors = new ArrayList<DestructionAwareBeanPostProcessor>()__			for (DestructionAwareBeanPostProcessor postProcessor : this.beanPostProcessors) {_				if (postProcessor instanceof Serializable) {_					serializablePostProcessors.add(postProcessor)__				}_			}_		}_		return new DisposableBeanAdapter(this.bean, this.beanName, this.invokeDisposableBean,_				this.nonPublicAccessAllowed, this.destroyMethodName, serializablePostProcessors)__	};serializes,a,copy,of,the,state,of,this,class,filtering,out,non,serializable,bean,post,processors;protected,object,write,replace,list,destruction,aware,bean,post,processor,serializable,post,processors,null,if,this,bean,post,processors,null,serializable,post,processors,new,array,list,destruction,aware,bean,post,processor,for,destruction,aware,bean,post,processor,post,processor,this,bean,post,processors,if,post,processor,instanceof,serializable,serializable,post,processors,add,post,processor,return,new,disposable,bean,adapter,this,bean,this,bean,name,this,invoke,disposable,bean,this,non,public,access,allowed,this,destroy,method,name,serializable,post,processors
DisposableBeanAdapter -> protected Object writeReplace();1432125256;Serializes a copy of the state of this class,_filtering out non-serializable BeanPostProcessors.;protected Object writeReplace() {_		List<DestructionAwareBeanPostProcessor> serializablePostProcessors = null__		if (this.beanPostProcessors != null) {_			serializablePostProcessors = new ArrayList<DestructionAwareBeanPostProcessor>()__			for (DestructionAwareBeanPostProcessor postProcessor : this.beanPostProcessors) {_				if (postProcessor instanceof Serializable) {_					serializablePostProcessors.add(postProcessor)__				}_			}_		}_		return new DisposableBeanAdapter(this.bean, this.beanName, this.invokeDisposableBean,_				this.nonPublicAccessAllowed, this.destroyMethodName, serializablePostProcessors)__	};serializes,a,copy,of,the,state,of,this,class,filtering,out,non,serializable,bean,post,processors;protected,object,write,replace,list,destruction,aware,bean,post,processor,serializable,post,processors,null,if,this,bean,post,processors,null,serializable,post,processors,new,array,list,destruction,aware,bean,post,processor,for,destruction,aware,bean,post,processor,post,processor,this,bean,post,processors,if,post,processor,instanceof,serializable,serializable,post,processors,add,post,processor,return,new,disposable,bean,adapter,this,bean,this,bean,name,this,invoke,disposable,bean,this,non,public,access,allowed,this,destroy,method,name,serializable,post,processors
DisposableBeanAdapter -> protected Object writeReplace();1432135182;Serializes a copy of the state of this class,_filtering out non-serializable BeanPostProcessors.;protected Object writeReplace() {_		List<DestructionAwareBeanPostProcessor> serializablePostProcessors = null__		if (this.beanPostProcessors != null) {_			serializablePostProcessors = new ArrayList<DestructionAwareBeanPostProcessor>()__			for (DestructionAwareBeanPostProcessor postProcessor : this.beanPostProcessors) {_				if (postProcessor instanceof Serializable) {_					serializablePostProcessors.add(postProcessor)__				}_			}_		}_		return new DisposableBeanAdapter(this.bean, this.beanName, this.invokeDisposableBean,_				this.nonPublicAccessAllowed, this.destroyMethodName, serializablePostProcessors)__	};serializes,a,copy,of,the,state,of,this,class,filtering,out,non,serializable,bean,post,processors;protected,object,write,replace,list,destruction,aware,bean,post,processor,serializable,post,processors,null,if,this,bean,post,processors,null,serializable,post,processors,new,array,list,destruction,aware,bean,post,processor,for,destruction,aware,bean,post,processor,post,processor,this,bean,post,processors,if,post,processor,instanceof,serializable,serializable,post,processors,add,post,processor,return,new,disposable,bean,adapter,this,bean,this,bean,name,this,invoke,disposable,bean,this,non,public,access,allowed,this,destroy,method,name,serializable,post,processors
DisposableBeanAdapter -> protected Object writeReplace();1436434188;Serializes a copy of the state of this class,_filtering out non-serializable BeanPostProcessors.;protected Object writeReplace() {_		List<DestructionAwareBeanPostProcessor> serializablePostProcessors = null__		if (this.beanPostProcessors != null) {_			serializablePostProcessors = new ArrayList<DestructionAwareBeanPostProcessor>()__			for (DestructionAwareBeanPostProcessor postProcessor : this.beanPostProcessors) {_				if (postProcessor instanceof Serializable) {_					serializablePostProcessors.add(postProcessor)__				}_			}_		}_		return new DisposableBeanAdapter(this.bean, this.beanName, this.invokeDisposableBean,_				this.nonPublicAccessAllowed, this.destroyMethodName, serializablePostProcessors)__	};serializes,a,copy,of,the,state,of,this,class,filtering,out,non,serializable,bean,post,processors;protected,object,write,replace,list,destruction,aware,bean,post,processor,serializable,post,processors,null,if,this,bean,post,processors,null,serializable,post,processors,new,array,list,destruction,aware,bean,post,processor,for,destruction,aware,bean,post,processor,post,processor,this,bean,post,processors,if,post,processor,instanceof,serializable,serializable,post,processors,add,post,processor,return,new,disposable,bean,adapter,this,bean,this,bean,name,this,invoke,disposable,bean,this,non,public,access,allowed,this,destroy,method,name,serializable,post,processors
DisposableBeanAdapter -> protected Object writeReplace();1447195666;Serializes a copy of the state of this class,_filtering out non-serializable BeanPostProcessors.;protected Object writeReplace() {_		List<DestructionAwareBeanPostProcessor> serializablePostProcessors = null__		if (this.beanPostProcessors != null) {_			serializablePostProcessors = new ArrayList<DestructionAwareBeanPostProcessor>()__			for (DestructionAwareBeanPostProcessor postProcessor : this.beanPostProcessors) {_				if (postProcessor instanceof Serializable) {_					serializablePostProcessors.add(postProcessor)__				}_			}_		}_		return new DisposableBeanAdapter(this.bean, this.beanName, this.invokeDisposableBean,_				this.nonPublicAccessAllowed, this.destroyMethodName, serializablePostProcessors)__	};serializes,a,copy,of,the,state,of,this,class,filtering,out,non,serializable,bean,post,processors;protected,object,write,replace,list,destruction,aware,bean,post,processor,serializable,post,processors,null,if,this,bean,post,processors,null,serializable,post,processors,new,array,list,destruction,aware,bean,post,processor,for,destruction,aware,bean,post,processor,post,processor,this,bean,post,processors,if,post,processor,instanceof,serializable,serializable,post,processors,add,post,processor,return,new,disposable,bean,adapter,this,bean,this,bean,name,this,invoke,disposable,bean,this,non,public,access,allowed,this,destroy,method,name,serializable,post,processors
DisposableBeanAdapter -> protected Object writeReplace();1450454045;Serializes a copy of the state of this class,_filtering out non-serializable BeanPostProcessors.;protected Object writeReplace() {_		List<DestructionAwareBeanPostProcessor> serializablePostProcessors = null__		if (this.beanPostProcessors != null) {_			serializablePostProcessors = new ArrayList<DestructionAwareBeanPostProcessor>()__			for (DestructionAwareBeanPostProcessor postProcessor : this.beanPostProcessors) {_				if (postProcessor instanceof Serializable) {_					serializablePostProcessors.add(postProcessor)__				}_			}_		}_		return new DisposableBeanAdapter(this.bean, this.beanName, this.invokeDisposableBean,_				this.nonPublicAccessAllowed, this.destroyMethodName, serializablePostProcessors)__	};serializes,a,copy,of,the,state,of,this,class,filtering,out,non,serializable,bean,post,processors;protected,object,write,replace,list,destruction,aware,bean,post,processor,serializable,post,processors,null,if,this,bean,post,processors,null,serializable,post,processors,new,array,list,destruction,aware,bean,post,processor,for,destruction,aware,bean,post,processor,post,processor,this,bean,post,processors,if,post,processor,instanceof,serializable,serializable,post,processors,add,post,processor,return,new,disposable,bean,adapter,this,bean,this,bean,name,this,invoke,disposable,bean,this,non,public,access,allowed,this,destroy,method,name,serializable,post,processors
DisposableBeanAdapter -> protected Object writeReplace();1454934048;Serializes a copy of the state of this class,_filtering out non-serializable BeanPostProcessors.;protected Object writeReplace() {_		List<DestructionAwareBeanPostProcessor> serializablePostProcessors = null__		if (this.beanPostProcessors != null) {_			serializablePostProcessors = new ArrayList<DestructionAwareBeanPostProcessor>()__			for (DestructionAwareBeanPostProcessor postProcessor : this.beanPostProcessors) {_				if (postProcessor instanceof Serializable) {_					serializablePostProcessors.add(postProcessor)__				}_			}_		}_		return new DisposableBeanAdapter(this.bean, this.beanName, this.invokeDisposableBean,_				this.nonPublicAccessAllowed, this.destroyMethodName, serializablePostProcessors)__	};serializes,a,copy,of,the,state,of,this,class,filtering,out,non,serializable,bean,post,processors;protected,object,write,replace,list,destruction,aware,bean,post,processor,serializable,post,processors,null,if,this,bean,post,processors,null,serializable,post,processors,new,array,list,destruction,aware,bean,post,processor,for,destruction,aware,bean,post,processor,post,processor,this,bean,post,processors,if,post,processor,instanceof,serializable,serializable,post,processors,add,post,processor,return,new,disposable,bean,adapter,this,bean,this,bean,name,this,invoke,disposable,bean,this,non,public,access,allowed,this,destroy,method,name,serializable,post,processors
DisposableBeanAdapter -> protected Object writeReplace();1467730834;Serializes a copy of the state of this class,_filtering out non-serializable BeanPostProcessors.;protected Object writeReplace() {_		List<DestructionAwareBeanPostProcessor> serializablePostProcessors = null__		if (this.beanPostProcessors != null) {_			serializablePostProcessors = new ArrayList<>()__			for (DestructionAwareBeanPostProcessor postProcessor : this.beanPostProcessors) {_				if (postProcessor instanceof Serializable) {_					serializablePostProcessors.add(postProcessor)__				}_			}_		}_		return new DisposableBeanAdapter(this.bean, this.beanName, this.invokeDisposableBean,_				this.nonPublicAccessAllowed, this.destroyMethodName, serializablePostProcessors)__	};serializes,a,copy,of,the,state,of,this,class,filtering,out,non,serializable,bean,post,processors;protected,object,write,replace,list,destruction,aware,bean,post,processor,serializable,post,processors,null,if,this,bean,post,processors,null,serializable,post,processors,new,array,list,for,destruction,aware,bean,post,processor,post,processor,this,bean,post,processors,if,post,processor,instanceof,serializable,serializable,post,processors,add,post,processor,return,new,disposable,bean,adapter,this,bean,this,bean,name,this,invoke,disposable,bean,this,non,public,access,allowed,this,destroy,method,name,serializable,post,processors
DisposableBeanAdapter -> protected Object writeReplace();1469441195;Serializes a copy of the state of this class,_filtering out non-serializable BeanPostProcessors.;protected Object writeReplace() {_		List<DestructionAwareBeanPostProcessor> serializablePostProcessors = null__		if (this.beanPostProcessors != null) {_			serializablePostProcessors = new ArrayList<>()__			for (DestructionAwareBeanPostProcessor postProcessor : this.beanPostProcessors) {_				if (postProcessor instanceof Serializable) {_					serializablePostProcessors.add(postProcessor)__				}_			}_		}_		return new DisposableBeanAdapter(this.bean, this.beanName, this.invokeDisposableBean,_				this.nonPublicAccessAllowed, this.destroyMethodName, serializablePostProcessors)__	};serializes,a,copy,of,the,state,of,this,class,filtering,out,non,serializable,bean,post,processors;protected,object,write,replace,list,destruction,aware,bean,post,processor,serializable,post,processors,null,if,this,bean,post,processors,null,serializable,post,processors,new,array,list,for,destruction,aware,bean,post,processor,post,processor,this,bean,post,processors,if,post,processor,instanceof,serializable,serializable,post,processors,add,post,processor,return,new,disposable,bean,adapter,this,bean,this,bean,name,this,invoke,disposable,bean,this,non,public,access,allowed,this,destroy,method,name,serializable,post,processors
DisposableBeanAdapter -> protected Object writeReplace();1479746164;Serializes a copy of the state of this class,_filtering out non-serializable BeanPostProcessors.;protected Object writeReplace() {_		List<DestructionAwareBeanPostProcessor> serializablePostProcessors = null__		if (this.beanPostProcessors != null) {_			serializablePostProcessors = new ArrayList<>()__			for (DestructionAwareBeanPostProcessor postProcessor : this.beanPostProcessors) {_				if (postProcessor instanceof Serializable) {_					serializablePostProcessors.add(postProcessor)__				}_			}_		}_		return new DisposableBeanAdapter(this.bean, this.beanName, this.invokeDisposableBean,_				this.nonPublicAccessAllowed, this.destroyMethodName, serializablePostProcessors)__	};serializes,a,copy,of,the,state,of,this,class,filtering,out,non,serializable,bean,post,processors;protected,object,write,replace,list,destruction,aware,bean,post,processor,serializable,post,processors,null,if,this,bean,post,processors,null,serializable,post,processors,new,array,list,for,destruction,aware,bean,post,processor,post,processor,this,bean,post,processors,if,post,processor,instanceof,serializable,serializable,post,processors,add,post,processor,return,new,disposable,bean,adapter,this,bean,this,bean,name,this,invoke,disposable,bean,this,non,public,access,allowed,this,destroy,method,name,serializable,post,processors
DisposableBeanAdapter -> protected Object writeReplace();1495868221;Serializes a copy of the state of this class,_filtering out non-serializable BeanPostProcessors.;protected Object writeReplace() {_		List<DestructionAwareBeanPostProcessor> serializablePostProcessors = null__		if (this.beanPostProcessors != null) {_			serializablePostProcessors = new ArrayList<>()__			for (DestructionAwareBeanPostProcessor postProcessor : this.beanPostProcessors) {_				if (postProcessor instanceof Serializable) {_					serializablePostProcessors.add(postProcessor)__				}_			}_		}_		return new DisposableBeanAdapter(this.bean, this.beanName, this.invokeDisposableBean,_				this.nonPublicAccessAllowed, this.destroyMethodName, serializablePostProcessors)__	};serializes,a,copy,of,the,state,of,this,class,filtering,out,non,serializable,bean,post,processors;protected,object,write,replace,list,destruction,aware,bean,post,processor,serializable,post,processors,null,if,this,bean,post,processors,null,serializable,post,processors,new,array,list,for,destruction,aware,bean,post,processor,post,processor,this,bean,post,processors,if,post,processor,instanceof,serializable,serializable,post,processors,add,post,processor,return,new,disposable,bean,adapter,this,bean,this,bean,name,this,invoke,disposable,bean,this,non,public,access,allowed,this,destroy,method,name,serializable,post,processors
DisposableBeanAdapter -> protected Object writeReplace();1496837955;Serializes a copy of the state of this class,_filtering out non-serializable BeanPostProcessors.;protected Object writeReplace() {_		List<DestructionAwareBeanPostProcessor> serializablePostProcessors = null__		if (this.beanPostProcessors != null) {_			serializablePostProcessors = new ArrayList<>()__			for (DestructionAwareBeanPostProcessor postProcessor : this.beanPostProcessors) {_				if (postProcessor instanceof Serializable) {_					serializablePostProcessors.add(postProcessor)__				}_			}_		}_		return new DisposableBeanAdapter(this.bean, this.beanName, this.invokeDisposableBean,_				this.nonPublicAccessAllowed, this.destroyMethodName, serializablePostProcessors)__	};serializes,a,copy,of,the,state,of,this,class,filtering,out,non,serializable,bean,post,processors;protected,object,write,replace,list,destruction,aware,bean,post,processor,serializable,post,processors,null,if,this,bean,post,processors,null,serializable,post,processors,new,array,list,for,destruction,aware,bean,post,processor,post,processor,this,bean,post,processors,if,post,processor,instanceof,serializable,serializable,post,processors,add,post,processor,return,new,disposable,bean,adapter,this,bean,this,bean,name,this,invoke,disposable,bean,this,non,public,access,allowed,this,destroy,method,name,serializable,post,processors
DisposableBeanAdapter -> protected Object writeReplace();1498780456;Serializes a copy of the state of this class,_filtering out non-serializable BeanPostProcessors.;protected Object writeReplace() {_		List<DestructionAwareBeanPostProcessor> serializablePostProcessors = null__		if (this.beanPostProcessors != null) {_			serializablePostProcessors = new ArrayList<>()__			for (DestructionAwareBeanPostProcessor postProcessor : this.beanPostProcessors) {_				if (postProcessor instanceof Serializable) {_					serializablePostProcessors.add(postProcessor)__				}_			}_		}_		return new DisposableBeanAdapter(this.bean, this.beanName, this.invokeDisposableBean,_				this.nonPublicAccessAllowed, this.destroyMethodName, serializablePostProcessors)__	};serializes,a,copy,of,the,state,of,this,class,filtering,out,non,serializable,bean,post,processors;protected,object,write,replace,list,destruction,aware,bean,post,processor,serializable,post,processors,null,if,this,bean,post,processors,null,serializable,post,processors,new,array,list,for,destruction,aware,bean,post,processor,post,processor,this,bean,post,processors,if,post,processor,instanceof,serializable,serializable,post,processors,add,post,processor,return,new,disposable,bean,adapter,this,bean,this,bean,name,this,invoke,disposable,bean,this,non,public,access,allowed,this,destroy,method,name,serializable,post,processors
DisposableBeanAdapter -> protected Object writeReplace();1530174524;Serializes a copy of the state of this class,_filtering out non-serializable BeanPostProcessors.;protected Object writeReplace() {_		List<DestructionAwareBeanPostProcessor> serializablePostProcessors = null__		if (this.beanPostProcessors != null) {_			serializablePostProcessors = new ArrayList<>()__			for (DestructionAwareBeanPostProcessor postProcessor : this.beanPostProcessors) {_				if (postProcessor instanceof Serializable) {_					serializablePostProcessors.add(postProcessor)__				}_			}_		}_		return new DisposableBeanAdapter(this.bean, this.beanName, this.invokeDisposableBean,_				this.nonPublicAccessAllowed, this.destroyMethodName, serializablePostProcessors)__	};serializes,a,copy,of,the,state,of,this,class,filtering,out,non,serializable,bean,post,processors;protected,object,write,replace,list,destruction,aware,bean,post,processor,serializable,post,processors,null,if,this,bean,post,processors,null,serializable,post,processors,new,array,list,for,destruction,aware,bean,post,processor,post,processor,this,bean,post,processors,if,post,processor,instanceof,serializable,serializable,post,processors,add,post,processor,return,new,disposable,bean,adapter,this,bean,this,bean,name,this,invoke,disposable,bean,this,non,public,access,allowed,this,destroy,method,name,serializable,post,processors
DisposableBeanAdapter -> protected Object writeReplace();1532091916;Serializes a copy of the state of this class,_filtering out non-serializable BeanPostProcessors.;protected Object writeReplace() {_		List<DestructionAwareBeanPostProcessor> serializablePostProcessors = null__		if (this.beanPostProcessors != null) {_			serializablePostProcessors = new ArrayList<>()__			for (DestructionAwareBeanPostProcessor postProcessor : this.beanPostProcessors) {_				if (postProcessor instanceof Serializable) {_					serializablePostProcessors.add(postProcessor)__				}_			}_		}_		return new DisposableBeanAdapter(this.bean, this.beanName, this.invokeDisposableBean,_				this.nonPublicAccessAllowed, this.destroyMethodName, serializablePostProcessors)__	};serializes,a,copy,of,the,state,of,this,class,filtering,out,non,serializable,bean,post,processors;protected,object,write,replace,list,destruction,aware,bean,post,processor,serializable,post,processors,null,if,this,bean,post,processors,null,serializable,post,processors,new,array,list,for,destruction,aware,bean,post,processor,post,processor,this,bean,post,processors,if,post,processor,instanceof,serializable,serializable,post,processors,add,post,processor,return,new,disposable,bean,adapter,this,bean,this,bean,name,this,invoke,disposable,bean,this,non,public,access,allowed,this,destroy,method,name,serializable,post,processors
DisposableBeanAdapter -> protected Object writeReplace();1532706365;Serializes a copy of the state of this class,_filtering out non-serializable BeanPostProcessors.;protected Object writeReplace() {_		List<DestructionAwareBeanPostProcessor> serializablePostProcessors = null__		if (this.beanPostProcessors != null) {_			serializablePostProcessors = new ArrayList<>()__			for (DestructionAwareBeanPostProcessor postProcessor : this.beanPostProcessors) {_				if (postProcessor instanceof Serializable) {_					serializablePostProcessors.add(postProcessor)__				}_			}_		}_		return new DisposableBeanAdapter(this.bean, this.beanName, this.invokeDisposableBean,_				this.nonPublicAccessAllowed, this.destroyMethodName, serializablePostProcessors)__	};serializes,a,copy,of,the,state,of,this,class,filtering,out,non,serializable,bean,post,processors;protected,object,write,replace,list,destruction,aware,bean,post,processor,serializable,post,processors,null,if,this,bean,post,processors,null,serializable,post,processors,new,array,list,for,destruction,aware,bean,post,processor,post,processor,this,bean,post,processors,if,post,processor,instanceof,serializable,serializable,post,processors,add,post,processor,return,new,disposable,bean,adapter,this,bean,this,bean,name,this,invoke,disposable,bean,this,non,public,access,allowed,this,destroy,method,name,serializable,post,processors
DisposableBeanAdapter -> protected Object writeReplace();1537391140;Serializes a copy of the state of this class,_filtering out non-serializable BeanPostProcessors.;protected Object writeReplace() {_		List<DestructionAwareBeanPostProcessor> serializablePostProcessors = null__		if (this.beanPostProcessors != null) {_			serializablePostProcessors = new ArrayList<>()__			for (DestructionAwareBeanPostProcessor postProcessor : this.beanPostProcessors) {_				if (postProcessor instanceof Serializable) {_					serializablePostProcessors.add(postProcessor)__				}_			}_		}_		return new DisposableBeanAdapter(this.bean, this.beanName, this.invokeDisposableBean,_				this.nonPublicAccessAllowed, this.destroyMethodName, serializablePostProcessors)__	};serializes,a,copy,of,the,state,of,this,class,filtering,out,non,serializable,bean,post,processors;protected,object,write,replace,list,destruction,aware,bean,post,processor,serializable,post,processors,null,if,this,bean,post,processors,null,serializable,post,processors,new,array,list,for,destruction,aware,bean,post,processor,post,processor,this,bean,post,processors,if,post,processor,instanceof,serializable,serializable,post,processors,add,post,processor,return,new,disposable,bean,adapter,this,bean,this,bean,name,this,invoke,disposable,bean,this,non,public,access,allowed,this,destroy,method,name,serializable,post,processors
DisposableBeanAdapter -> private List<DestructionAwareBeanPostProcessor> filterPostProcessors(List<BeanPostProcessor> postProcessors);1328020251;Search for all DestructionAwareBeanPostProcessors in the List._@param postProcessors the List to search_@return the filtered List of DestructionAwareBeanPostProcessors;private List<DestructionAwareBeanPostProcessor> filterPostProcessors(List<BeanPostProcessor> postProcessors) {_		List<DestructionAwareBeanPostProcessor> filteredPostProcessors = null__		if (postProcessors != null && !postProcessors.isEmpty()) {_			filteredPostProcessors = new ArrayList<DestructionAwareBeanPostProcessor>(postProcessors.size())__			for (BeanPostProcessor postProcessor : postProcessors) {_				if (postProcessor instanceof DestructionAwareBeanPostProcessor) {_					filteredPostProcessors.add((DestructionAwareBeanPostProcessor) postProcessor)__				}_			}_		}_		return filteredPostProcessors__	};search,for,all,destruction,aware,bean,post,processors,in,the,list,param,post,processors,the,list,to,search,return,the,filtered,list,of,destruction,aware,bean,post,processors;private,list,destruction,aware,bean,post,processor,filter,post,processors,list,bean,post,processor,post,processors,list,destruction,aware,bean,post,processor,filtered,post,processors,null,if,post,processors,null,post,processors,is,empty,filtered,post,processors,new,array,list,destruction,aware,bean,post,processor,post,processors,size,for,bean,post,processor,post,processor,post,processors,if,post,processor,instanceof,destruction,aware,bean,post,processor,filtered,post,processors,add,destruction,aware,bean,post,processor,post,processor,return,filtered,post,processors
DisposableBeanAdapter -> private List<DestructionAwareBeanPostProcessor> filterPostProcessors(List<BeanPostProcessor> postProcessors);1353966428;Search for all DestructionAwareBeanPostProcessors in the List._@param postProcessors the List to search_@return the filtered List of DestructionAwareBeanPostProcessors;private List<DestructionAwareBeanPostProcessor> filterPostProcessors(List<BeanPostProcessor> postProcessors) {_		List<DestructionAwareBeanPostProcessor> filteredPostProcessors = null__		if (postProcessors != null && !postProcessors.isEmpty()) {_			filteredPostProcessors = new ArrayList<DestructionAwareBeanPostProcessor>(postProcessors.size())__			for (BeanPostProcessor postProcessor : postProcessors) {_				if (postProcessor instanceof DestructionAwareBeanPostProcessor) {_					filteredPostProcessors.add((DestructionAwareBeanPostProcessor) postProcessor)__				}_			}_		}_		return filteredPostProcessors__	};search,for,all,destruction,aware,bean,post,processors,in,the,list,param,post,processors,the,list,to,search,return,the,filtered,list,of,destruction,aware,bean,post,processors;private,list,destruction,aware,bean,post,processor,filter,post,processors,list,bean,post,processor,post,processors,list,destruction,aware,bean,post,processor,filtered,post,processors,null,if,post,processors,null,post,processors,is,empty,filtered,post,processors,new,array,list,destruction,aware,bean,post,processor,post,processors,size,for,bean,post,processor,post,processor,post,processors,if,post,processor,instanceof,destruction,aware,bean,post,processor,filtered,post,processors,add,destruction,aware,bean,post,processor,post,processor,return,filtered,post,processors
DisposableBeanAdapter -> private List<DestructionAwareBeanPostProcessor> filterPostProcessors(List<BeanPostProcessor> postProcessors);1356735495;Search for all DestructionAwareBeanPostProcessors in the List._@param postProcessors the List to search_@return the filtered List of DestructionAwareBeanPostProcessors;private List<DestructionAwareBeanPostProcessor> filterPostProcessors(List<BeanPostProcessor> postProcessors) {_		List<DestructionAwareBeanPostProcessor> filteredPostProcessors = null__		if (postProcessors != null && !postProcessors.isEmpty()) {_			filteredPostProcessors = new ArrayList<DestructionAwareBeanPostProcessor>(postProcessors.size())__			for (BeanPostProcessor postProcessor : postProcessors) {_				if (postProcessor instanceof DestructionAwareBeanPostProcessor) {_					filteredPostProcessors.add((DestructionAwareBeanPostProcessor) postProcessor)__				}_			}_		}_		return filteredPostProcessors__	};search,for,all,destruction,aware,bean,post,processors,in,the,list,param,post,processors,the,list,to,search,return,the,filtered,list,of,destruction,aware,bean,post,processors;private,list,destruction,aware,bean,post,processor,filter,post,processors,list,bean,post,processor,post,processors,list,destruction,aware,bean,post,processor,filtered,post,processors,null,if,post,processors,null,post,processors,is,empty,filtered,post,processors,new,array,list,destruction,aware,bean,post,processor,post,processors,size,for,bean,post,processor,post,processor,post,processors,if,post,processor,instanceof,destruction,aware,bean,post,processor,filtered,post,processors,add,destruction,aware,bean,post,processor,post,processor,return,filtered,post,processors
DisposableBeanAdapter -> private List<DestructionAwareBeanPostProcessor> filterPostProcessors(List<BeanPostProcessor> postProcessors);1357119239;Search for all DestructionAwareBeanPostProcessors in the List._@param postProcessors the List to search_@return the filtered List of DestructionAwareBeanPostProcessors;private List<DestructionAwareBeanPostProcessor> filterPostProcessors(List<BeanPostProcessor> postProcessors) {_		List<DestructionAwareBeanPostProcessor> filteredPostProcessors = null__		if (postProcessors != null && !postProcessors.isEmpty()) {_			filteredPostProcessors = new ArrayList<DestructionAwareBeanPostProcessor>(postProcessors.size())__			for (BeanPostProcessor postProcessor : postProcessors) {_				if (postProcessor instanceof DestructionAwareBeanPostProcessor) {_					filteredPostProcessors.add((DestructionAwareBeanPostProcessor) postProcessor)__				}_			}_		}_		return filteredPostProcessors__	};search,for,all,destruction,aware,bean,post,processors,in,the,list,param,post,processors,the,list,to,search,return,the,filtered,list,of,destruction,aware,bean,post,processors;private,list,destruction,aware,bean,post,processor,filter,post,processors,list,bean,post,processor,post,processors,list,destruction,aware,bean,post,processor,filtered,post,processors,null,if,post,processors,null,post,processors,is,empty,filtered,post,processors,new,array,list,destruction,aware,bean,post,processor,post,processors,size,for,bean,post,processor,post,processor,post,processors,if,post,processor,instanceof,destruction,aware,bean,post,processor,filtered,post,processors,add,destruction,aware,bean,post,processor,post,processor,return,filtered,post,processors
DisposableBeanAdapter -> private List<DestructionAwareBeanPostProcessor> filterPostProcessors(List<BeanPostProcessor> postProcessors);1362408075;Search for all DestructionAwareBeanPostProcessors in the List._@param postProcessors the List to search_@return the filtered List of DestructionAwareBeanPostProcessors;private List<DestructionAwareBeanPostProcessor> filterPostProcessors(List<BeanPostProcessor> postProcessors) {_		List<DestructionAwareBeanPostProcessor> filteredPostProcessors = null__		if (postProcessors != null && !postProcessors.isEmpty()) {_			filteredPostProcessors = new ArrayList<DestructionAwareBeanPostProcessor>(postProcessors.size())__			for (BeanPostProcessor postProcessor : postProcessors) {_				if (postProcessor instanceof DestructionAwareBeanPostProcessor) {_					filteredPostProcessors.add((DestructionAwareBeanPostProcessor) postProcessor)__				}_			}_		}_		return filteredPostProcessors__	};search,for,all,destruction,aware,bean,post,processors,in,the,list,param,post,processors,the,list,to,search,return,the,filtered,list,of,destruction,aware,bean,post,processors;private,list,destruction,aware,bean,post,processor,filter,post,processors,list,bean,post,processor,post,processors,list,destruction,aware,bean,post,processor,filtered,post,processors,null,if,post,processors,null,post,processors,is,empty,filtered,post,processors,new,array,list,destruction,aware,bean,post,processor,post,processors,size,for,bean,post,processor,post,processor,post,processors,if,post,processor,instanceof,destruction,aware,bean,post,processor,filtered,post,processors,add,destruction,aware,bean,post,processor,post,processor,return,filtered,post,processors
DisposableBeanAdapter -> private List<DestructionAwareBeanPostProcessor> filterPostProcessors(List<BeanPostProcessor> postProcessors);1364503447;Search for all DestructionAwareBeanPostProcessors in the List._@param postProcessors the List to search_@return the filtered List of DestructionAwareBeanPostProcessors;private List<DestructionAwareBeanPostProcessor> filterPostProcessors(List<BeanPostProcessor> postProcessors) {_		List<DestructionAwareBeanPostProcessor> filteredPostProcessors = null__		if (postProcessors != null && !postProcessors.isEmpty()) {_			filteredPostProcessors = new ArrayList<DestructionAwareBeanPostProcessor>(postProcessors.size())__			for (BeanPostProcessor postProcessor : postProcessors) {_				if (postProcessor instanceof DestructionAwareBeanPostProcessor) {_					filteredPostProcessors.add((DestructionAwareBeanPostProcessor) postProcessor)__				}_			}_		}_		return filteredPostProcessors__	};search,for,all,destruction,aware,bean,post,processors,in,the,list,param,post,processors,the,list,to,search,return,the,filtered,list,of,destruction,aware,bean,post,processors;private,list,destruction,aware,bean,post,processor,filter,post,processors,list,bean,post,processor,post,processors,list,destruction,aware,bean,post,processor,filtered,post,processors,null,if,post,processors,null,post,processors,is,empty,filtered,post,processors,new,array,list,destruction,aware,bean,post,processor,post,processors,size,for,bean,post,processor,post,processor,post,processors,if,post,processor,instanceof,destruction,aware,bean,post,processor,filtered,post,processors,add,destruction,aware,bean,post,processor,post,processor,return,filtered,post,processors
DisposableBeanAdapter -> private List<DestructionAwareBeanPostProcessor> filterPostProcessors(List<BeanPostProcessor> postProcessors);1368482696;Search for all DestructionAwareBeanPostProcessors in the List._@param postProcessors the List to search_@return the filtered List of DestructionAwareBeanPostProcessors;private List<DestructionAwareBeanPostProcessor> filterPostProcessors(List<BeanPostProcessor> postProcessors) {_		List<DestructionAwareBeanPostProcessor> filteredPostProcessors = null__		if (postProcessors != null && !postProcessors.isEmpty()) {_			filteredPostProcessors = new ArrayList<DestructionAwareBeanPostProcessor>(postProcessors.size())__			for (BeanPostProcessor postProcessor : postProcessors) {_				if (postProcessor instanceof DestructionAwareBeanPostProcessor) {_					filteredPostProcessors.add((DestructionAwareBeanPostProcessor) postProcessor)__				}_			}_		}_		return filteredPostProcessors__	};search,for,all,destruction,aware,bean,post,processors,in,the,list,param,post,processors,the,list,to,search,return,the,filtered,list,of,destruction,aware,bean,post,processors;private,list,destruction,aware,bean,post,processor,filter,post,processors,list,bean,post,processor,post,processors,list,destruction,aware,bean,post,processor,filtered,post,processors,null,if,post,processors,null,post,processors,is,empty,filtered,post,processors,new,array,list,destruction,aware,bean,post,processor,post,processors,size,for,bean,post,processor,post,processor,post,processors,if,post,processor,instanceof,destruction,aware,bean,post,processor,filtered,post,processors,add,destruction,aware,bean,post,processor,post,processor,return,filtered,post,processors
DisposableBeanAdapter -> private List<DestructionAwareBeanPostProcessor> filterPostProcessors(List<BeanPostProcessor> postProcessors);1385412762;Search for all DestructionAwareBeanPostProcessors in the List._@param postProcessors the List to search_@return the filtered List of DestructionAwareBeanPostProcessors;private List<DestructionAwareBeanPostProcessor> filterPostProcessors(List<BeanPostProcessor> postProcessors) {_		List<DestructionAwareBeanPostProcessor> filteredPostProcessors = null__		if (postProcessors != null && !postProcessors.isEmpty()) {_			filteredPostProcessors = new ArrayList<DestructionAwareBeanPostProcessor>(postProcessors.size())__			for (BeanPostProcessor postProcessor : postProcessors) {_				if (postProcessor instanceof DestructionAwareBeanPostProcessor) {_					filteredPostProcessors.add((DestructionAwareBeanPostProcessor) postProcessor)__				}_			}_		}_		return filteredPostProcessors__	};search,for,all,destruction,aware,bean,post,processors,in,the,list,param,post,processors,the,list,to,search,return,the,filtered,list,of,destruction,aware,bean,post,processors;private,list,destruction,aware,bean,post,processor,filter,post,processors,list,bean,post,processor,post,processors,list,destruction,aware,bean,post,processor,filtered,post,processors,null,if,post,processors,null,post,processors,is,empty,filtered,post,processors,new,array,list,destruction,aware,bean,post,processor,post,processors,size,for,bean,post,processor,post,processor,post,processors,if,post,processor,instanceof,destruction,aware,bean,post,processor,filtered,post,processors,add,destruction,aware,bean,post,processor,post,processor,return,filtered,post,processors
DisposableBeanAdapter -> private List<DestructionAwareBeanPostProcessor> filterPostProcessors(List<BeanPostProcessor> postProcessors);1398638841;Search for all DestructionAwareBeanPostProcessors in the List._@param postProcessors the List to search_@return the filtered List of DestructionAwareBeanPostProcessors;private List<DestructionAwareBeanPostProcessor> filterPostProcessors(List<BeanPostProcessor> postProcessors) {_		List<DestructionAwareBeanPostProcessor> filteredPostProcessors = null__		if (postProcessors != null && !postProcessors.isEmpty()) {_			filteredPostProcessors = new ArrayList<DestructionAwareBeanPostProcessor>(postProcessors.size())__			for (BeanPostProcessor postProcessor : postProcessors) {_				if (postProcessor instanceof DestructionAwareBeanPostProcessor) {_					filteredPostProcessors.add((DestructionAwareBeanPostProcessor) postProcessor)__				}_			}_		}_		return filteredPostProcessors__	};search,for,all,destruction,aware,bean,post,processors,in,the,list,param,post,processors,the,list,to,search,return,the,filtered,list,of,destruction,aware,bean,post,processors;private,list,destruction,aware,bean,post,processor,filter,post,processors,list,bean,post,processor,post,processors,list,destruction,aware,bean,post,processor,filtered,post,processors,null,if,post,processors,null,post,processors,is,empty,filtered,post,processors,new,array,list,destruction,aware,bean,post,processor,post,processors,size,for,bean,post,processor,post,processor,post,processors,if,post,processor,instanceof,destruction,aware,bean,post,processor,filtered,post,processors,add,destruction,aware,bean,post,processor,post,processor,return,filtered,post,processors
DisposableBeanAdapter -> private List<DestructionAwareBeanPostProcessor> filterPostProcessors(List<BeanPostProcessor> postProcessors);1432125256;Search for all DestructionAwareBeanPostProcessors in the List._@param postProcessors the List to search_@return the filtered List of DestructionAwareBeanPostProcessors;private List<DestructionAwareBeanPostProcessor> filterPostProcessors(List<BeanPostProcessor> postProcessors) {_		List<DestructionAwareBeanPostProcessor> filteredPostProcessors = null__		if (postProcessors != null && !postProcessors.isEmpty()) {_			filteredPostProcessors = new ArrayList<DestructionAwareBeanPostProcessor>(postProcessors.size())__			for (BeanPostProcessor postProcessor : postProcessors) {_				if (postProcessor instanceof DestructionAwareBeanPostProcessor) {_					filteredPostProcessors.add((DestructionAwareBeanPostProcessor) postProcessor)__				}_			}_		}_		return filteredPostProcessors__	};search,for,all,destruction,aware,bean,post,processors,in,the,list,param,post,processors,the,list,to,search,return,the,filtered,list,of,destruction,aware,bean,post,processors;private,list,destruction,aware,bean,post,processor,filter,post,processors,list,bean,post,processor,post,processors,list,destruction,aware,bean,post,processor,filtered,post,processors,null,if,post,processors,null,post,processors,is,empty,filtered,post,processors,new,array,list,destruction,aware,bean,post,processor,post,processors,size,for,bean,post,processor,post,processor,post,processors,if,post,processor,instanceof,destruction,aware,bean,post,processor,filtered,post,processors,add,destruction,aware,bean,post,processor,post,processor,return,filtered,post,processors
DisposableBeanAdapter -> private List<DestructionAwareBeanPostProcessor> filterPostProcessors(List<BeanPostProcessor> postProcessors);1432135182;Search for all DestructionAwareBeanPostProcessors in the List._@param postProcessors the List to search_@return the filtered List of DestructionAwareBeanPostProcessors;private List<DestructionAwareBeanPostProcessor> filterPostProcessors(List<BeanPostProcessor> postProcessors) {_		List<DestructionAwareBeanPostProcessor> filteredPostProcessors = null__		if (postProcessors != null && !postProcessors.isEmpty()) {_			filteredPostProcessors = new ArrayList<DestructionAwareBeanPostProcessor>(postProcessors.size())__			for (BeanPostProcessor postProcessor : postProcessors) {_				if (postProcessor instanceof DestructionAwareBeanPostProcessor) {_					filteredPostProcessors.add((DestructionAwareBeanPostProcessor) postProcessor)__				}_			}_		}_		return filteredPostProcessors__	};search,for,all,destruction,aware,bean,post,processors,in,the,list,param,post,processors,the,list,to,search,return,the,filtered,list,of,destruction,aware,bean,post,processors;private,list,destruction,aware,bean,post,processor,filter,post,processors,list,bean,post,processor,post,processors,list,destruction,aware,bean,post,processor,filtered,post,processors,null,if,post,processors,null,post,processors,is,empty,filtered,post,processors,new,array,list,destruction,aware,bean,post,processor,post,processors,size,for,bean,post,processor,post,processor,post,processors,if,post,processor,instanceof,destruction,aware,bean,post,processor,filtered,post,processors,add,destruction,aware,bean,post,processor,post,processor,return,filtered,post,processors
DisposableBeanAdapter -> private List<DestructionAwareBeanPostProcessor> filterPostProcessors(List<BeanPostProcessor> postProcessors);1436434188;Search for all DestructionAwareBeanPostProcessors in the List._@param postProcessors the List to search_@return the filtered List of DestructionAwareBeanPostProcessors;private List<DestructionAwareBeanPostProcessor> filterPostProcessors(List<BeanPostProcessor> postProcessors) {_		List<DestructionAwareBeanPostProcessor> filteredPostProcessors = null__		if (postProcessors != null && !postProcessors.isEmpty()) {_			filteredPostProcessors = new ArrayList<DestructionAwareBeanPostProcessor>(postProcessors.size())__			for (BeanPostProcessor postProcessor : postProcessors) {_				if (postProcessor instanceof DestructionAwareBeanPostProcessor) {_					filteredPostProcessors.add((DestructionAwareBeanPostProcessor) postProcessor)__				}_			}_		}_		return filteredPostProcessors__	};search,for,all,destruction,aware,bean,post,processors,in,the,list,param,post,processors,the,list,to,search,return,the,filtered,list,of,destruction,aware,bean,post,processors;private,list,destruction,aware,bean,post,processor,filter,post,processors,list,bean,post,processor,post,processors,list,destruction,aware,bean,post,processor,filtered,post,processors,null,if,post,processors,null,post,processors,is,empty,filtered,post,processors,new,array,list,destruction,aware,bean,post,processor,post,processors,size,for,bean,post,processor,post,processor,post,processors,if,post,processor,instanceof,destruction,aware,bean,post,processor,filtered,post,processors,add,destruction,aware,bean,post,processor,post,processor,return,filtered,post,processors
DisposableBeanAdapter -> private List<DestructionAwareBeanPostProcessor> filterPostProcessors(List<BeanPostProcessor> postProcessors);1447195666;Search for all DestructionAwareBeanPostProcessors in the List._@param postProcessors the List to search_@return the filtered List of DestructionAwareBeanPostProcessors;private List<DestructionAwareBeanPostProcessor> filterPostProcessors(List<BeanPostProcessor> postProcessors) {_		List<DestructionAwareBeanPostProcessor> filteredPostProcessors = null__		if (!CollectionUtils.isEmpty(postProcessors)) {_			filteredPostProcessors = new ArrayList<DestructionAwareBeanPostProcessor>(postProcessors.size())__			for (BeanPostProcessor postProcessor : postProcessors) {_				if (postProcessor instanceof DestructionAwareBeanPostProcessor) {_					filteredPostProcessors.add((DestructionAwareBeanPostProcessor) postProcessor)__				}_			}_		}_		return filteredPostProcessors__	};search,for,all,destruction,aware,bean,post,processors,in,the,list,param,post,processors,the,list,to,search,return,the,filtered,list,of,destruction,aware,bean,post,processors;private,list,destruction,aware,bean,post,processor,filter,post,processors,list,bean,post,processor,post,processors,list,destruction,aware,bean,post,processor,filtered,post,processors,null,if,collection,utils,is,empty,post,processors,filtered,post,processors,new,array,list,destruction,aware,bean,post,processor,post,processors,size,for,bean,post,processor,post,processor,post,processors,if,post,processor,instanceof,destruction,aware,bean,post,processor,filtered,post,processors,add,destruction,aware,bean,post,processor,post,processor,return,filtered,post,processors
DisposableBeanAdapter -> private void invokeCustomDestroyMethod(final Method destroyMethod);1328020251;Invoke the specified custom destroy method on the given bean._<p>This implementation invokes a no-arg method if found, else checking_for a method with a single boolean argument (passing in "true",_assuming a "force" parameter), else logging an error.;private void invokeCustomDestroyMethod(final Method destroyMethod) {_		Class<?>[] paramTypes = destroyMethod.getParameterTypes()__		final Object[] args = new Object[paramTypes.length]__		if (paramTypes.length == 1) {_			args[0] = Boolean.TRUE__		}_		if (logger.isDebugEnabled()) {_			logger.debug("Invoking destroy method '" + this.destroyMethodName +_					"' on bean with name '" + this.beanName + "'")__		}_		try {_			if (System.getSecurityManager() != null) {_				AccessController.doPrivileged(new PrivilegedAction<Object>() {_					public Object run() {_						ReflectionUtils.makeAccessible(destroyMethod)__						return null__					}_				})__				try {_					AccessController.doPrivileged(new PrivilegedExceptionAction<Object>() {_						public Object run() throws Exception {_							destroyMethod.invoke(bean, args)__							return null__						}_					}, acc)__				}_				catch (PrivilegedActionException pax) {_					throw (InvocationTargetException) pax.getException()__				}_			}_			else {_				ReflectionUtils.makeAccessible(destroyMethod)__				destroyMethod.invoke(bean, args)__			}_		}_		catch (InvocationTargetException ex) {_			String msg = "Invocation of destroy method '" + this.destroyMethodName +_					"' failed on bean with name '" + this.beanName + "'"__			if (logger.isDebugEnabled()) {_				logger.warn(msg, ex.getTargetException())__			}_			else {_				logger.warn(msg + ": " + ex.getTargetException())__			}_		}_		catch (Throwable ex) {_			logger.error("Couldn't invoke destroy method '" + this.destroyMethodName +_					"' on bean with name '" + this.beanName + "'", ex)__		}_	};invoke,the,specified,custom,destroy,method,on,the,given,bean,p,this,implementation,invokes,a,no,arg,method,if,found,else,checking,for,a,method,with,a,single,boolean,argument,passing,in,true,assuming,a,force,parameter,else,logging,an,error;private,void,invoke,custom,destroy,method,final,method,destroy,method,class,param,types,destroy,method,get,parameter,types,final,object,args,new,object,param,types,length,if,param,types,length,1,args,0,boolean,true,if,logger,is,debug,enabled,logger,debug,invoking,destroy,method,this,destroy,method,name,on,bean,with,name,this,bean,name,try,if,system,get,security,manager,null,access,controller,do,privileged,new,privileged,action,object,public,object,run,reflection,utils,make,accessible,destroy,method,return,null,try,access,controller,do,privileged,new,privileged,exception,action,object,public,object,run,throws,exception,destroy,method,invoke,bean,args,return,null,acc,catch,privileged,action,exception,pax,throw,invocation,target,exception,pax,get,exception,else,reflection,utils,make,accessible,destroy,method,destroy,method,invoke,bean,args,catch,invocation,target,exception,ex,string,msg,invocation,of,destroy,method,this,destroy,method,name,failed,on,bean,with,name,this,bean,name,if,logger,is,debug,enabled,logger,warn,msg,ex,get,target,exception,else,logger,warn,msg,ex,get,target,exception,catch,throwable,ex,logger,error,couldn,t,invoke,destroy,method,this,destroy,method,name,on,bean,with,name,this,bean,name,ex
DisposableBeanAdapter -> private void invokeCustomDestroyMethod(final Method destroyMethod);1353966428;Invoke the specified custom destroy method on the given bean._<p>This implementation invokes a no-arg method if found, else checking_for a method with a single boolean argument (passing in "true",_assuming a "force" parameter), else logging an error.;private void invokeCustomDestroyMethod(final Method destroyMethod) {_		Class<?>[] paramTypes = destroyMethod.getParameterTypes()__		final Object[] args = new Object[paramTypes.length]__		if (paramTypes.length == 1) {_			args[0] = Boolean.TRUE__		}_		if (logger.isDebugEnabled()) {_			logger.debug("Invoking destroy method '" + this.destroyMethodName +_					"' on bean with name '" + this.beanName + "'")__		}_		try {_			if (System.getSecurityManager() != null) {_				AccessController.doPrivileged(new PrivilegedAction<Object>() {_					public Object run() {_						ReflectionUtils.makeAccessible(destroyMethod)__						return null__					}_				})__				try {_					AccessController.doPrivileged(new PrivilegedExceptionAction<Object>() {_						public Object run() throws Exception {_							destroyMethod.invoke(bean, args)__							return null__						}_					}, acc)__				}_				catch (PrivilegedActionException pax) {_					throw (InvocationTargetException) pax.getException()__				}_			}_			else {_				ReflectionUtils.makeAccessible(destroyMethod)__				destroyMethod.invoke(bean, args)__			}_		}_		catch (InvocationTargetException ex) {_			String msg = "Invocation of destroy method '" + this.destroyMethodName +_					"' failed on bean with name '" + this.beanName + "'"__			if (logger.isDebugEnabled()) {_				logger.warn(msg, ex.getTargetException())__			}_			else {_				logger.warn(msg + ": " + ex.getTargetException())__			}_		}_		catch (Throwable ex) {_			logger.error("Couldn't invoke destroy method '" + this.destroyMethodName +_					"' on bean with name '" + this.beanName + "'", ex)__		}_	};invoke,the,specified,custom,destroy,method,on,the,given,bean,p,this,implementation,invokes,a,no,arg,method,if,found,else,checking,for,a,method,with,a,single,boolean,argument,passing,in,true,assuming,a,force,parameter,else,logging,an,error;private,void,invoke,custom,destroy,method,final,method,destroy,method,class,param,types,destroy,method,get,parameter,types,final,object,args,new,object,param,types,length,if,param,types,length,1,args,0,boolean,true,if,logger,is,debug,enabled,logger,debug,invoking,destroy,method,this,destroy,method,name,on,bean,with,name,this,bean,name,try,if,system,get,security,manager,null,access,controller,do,privileged,new,privileged,action,object,public,object,run,reflection,utils,make,accessible,destroy,method,return,null,try,access,controller,do,privileged,new,privileged,exception,action,object,public,object,run,throws,exception,destroy,method,invoke,bean,args,return,null,acc,catch,privileged,action,exception,pax,throw,invocation,target,exception,pax,get,exception,else,reflection,utils,make,accessible,destroy,method,destroy,method,invoke,bean,args,catch,invocation,target,exception,ex,string,msg,invocation,of,destroy,method,this,destroy,method,name,failed,on,bean,with,name,this,bean,name,if,logger,is,debug,enabled,logger,warn,msg,ex,get,target,exception,else,logger,warn,msg,ex,get,target,exception,catch,throwable,ex,logger,error,couldn,t,invoke,destroy,method,this,destroy,method,name,on,bean,with,name,this,bean,name,ex
DisposableBeanAdapter -> private void invokeCustomDestroyMethod(final Method destroyMethod);1356735495;Invoke the specified custom destroy method on the given bean._<p>This implementation invokes a no-arg method if found, else checking_for a method with a single boolean argument (passing in "true",_assuming a "force" parameter), else logging an error.;private void invokeCustomDestroyMethod(final Method destroyMethod) {_		Class<?>[] paramTypes = destroyMethod.getParameterTypes()__		final Object[] args = new Object[paramTypes.length]__		if (paramTypes.length == 1) {_			args[0] = Boolean.TRUE__		}_		if (logger.isDebugEnabled()) {_			logger.debug("Invoking destroy method '" + this.destroyMethodName +_					"' on bean with name '" + this.beanName + "'")__		}_		try {_			if (System.getSecurityManager() != null) {_				AccessController.doPrivileged(new PrivilegedAction<Object>() {_					@Override_					public Object run() {_						ReflectionUtils.makeAccessible(destroyMethod)__						return null__					}_				})__				try {_					AccessController.doPrivileged(new PrivilegedExceptionAction<Object>() {_						@Override_						public Object run() throws Exception {_							destroyMethod.invoke(bean, args)__							return null__						}_					}, acc)__				}_				catch (PrivilegedActionException pax) {_					throw (InvocationTargetException) pax.getException()__				}_			}_			else {_				ReflectionUtils.makeAccessible(destroyMethod)__				destroyMethod.invoke(bean, args)__			}_		}_		catch (InvocationTargetException ex) {_			String msg = "Invocation of destroy method '" + this.destroyMethodName +_					"' failed on bean with name '" + this.beanName + "'"__			if (logger.isDebugEnabled()) {_				logger.warn(msg, ex.getTargetException())__			}_			else {_				logger.warn(msg + ": " + ex.getTargetException())__			}_		}_		catch (Throwable ex) {_			logger.error("Couldn't invoke destroy method '" + this.destroyMethodName +_					"' on bean with name '" + this.beanName + "'", ex)__		}_	};invoke,the,specified,custom,destroy,method,on,the,given,bean,p,this,implementation,invokes,a,no,arg,method,if,found,else,checking,for,a,method,with,a,single,boolean,argument,passing,in,true,assuming,a,force,parameter,else,logging,an,error;private,void,invoke,custom,destroy,method,final,method,destroy,method,class,param,types,destroy,method,get,parameter,types,final,object,args,new,object,param,types,length,if,param,types,length,1,args,0,boolean,true,if,logger,is,debug,enabled,logger,debug,invoking,destroy,method,this,destroy,method,name,on,bean,with,name,this,bean,name,try,if,system,get,security,manager,null,access,controller,do,privileged,new,privileged,action,object,override,public,object,run,reflection,utils,make,accessible,destroy,method,return,null,try,access,controller,do,privileged,new,privileged,exception,action,object,override,public,object,run,throws,exception,destroy,method,invoke,bean,args,return,null,acc,catch,privileged,action,exception,pax,throw,invocation,target,exception,pax,get,exception,else,reflection,utils,make,accessible,destroy,method,destroy,method,invoke,bean,args,catch,invocation,target,exception,ex,string,msg,invocation,of,destroy,method,this,destroy,method,name,failed,on,bean,with,name,this,bean,name,if,logger,is,debug,enabled,logger,warn,msg,ex,get,target,exception,else,logger,warn,msg,ex,get,target,exception,catch,throwable,ex,logger,error,couldn,t,invoke,destroy,method,this,destroy,method,name,on,bean,with,name,this,bean,name,ex
DisposableBeanAdapter -> private void invokeCustomDestroyMethod(final Method destroyMethod);1357119239;Invoke the specified custom destroy method on the given bean._<p>This implementation invokes a no-arg method if found, else checking_for a method with a single boolean argument (passing in "true",_assuming a "force" parameter), else logging an error.;private void invokeCustomDestroyMethod(final Method destroyMethod) {_		Class<?>[] paramTypes = destroyMethod.getParameterTypes()__		final Object[] args = new Object[paramTypes.length]__		if (paramTypes.length == 1) {_			args[0] = Boolean.TRUE__		}_		if (logger.isDebugEnabled()) {_			logger.debug("Invoking destroy method '" + this.destroyMethodName +_					"' on bean with name '" + this.beanName + "'")__		}_		try {_			if (System.getSecurityManager() != null) {_				AccessController.doPrivileged(new PrivilegedAction<Object>() {_					public Object run() {_						ReflectionUtils.makeAccessible(destroyMethod)__						return null__					}_				})__				try {_					AccessController.doPrivileged(new PrivilegedExceptionAction<Object>() {_						public Object run() throws Exception {_							destroyMethod.invoke(bean, args)__							return null__						}_					}, acc)__				}_				catch (PrivilegedActionException pax) {_					throw (InvocationTargetException) pax.getException()__				}_			}_			else {_				ReflectionUtils.makeAccessible(destroyMethod)__				destroyMethod.invoke(bean, args)__			}_		}_		catch (InvocationTargetException ex) {_			String msg = "Invocation of destroy method '" + this.destroyMethodName +_					"' failed on bean with name '" + this.beanName + "'"__			if (logger.isDebugEnabled()) {_				logger.warn(msg, ex.getTargetException())__			}_			else {_				logger.warn(msg + ": " + ex.getTargetException())__			}_		}_		catch (Throwable ex) {_			logger.error("Couldn't invoke destroy method '" + this.destroyMethodName +_					"' on bean with name '" + this.beanName + "'", ex)__		}_	};invoke,the,specified,custom,destroy,method,on,the,given,bean,p,this,implementation,invokes,a,no,arg,method,if,found,else,checking,for,a,method,with,a,single,boolean,argument,passing,in,true,assuming,a,force,parameter,else,logging,an,error;private,void,invoke,custom,destroy,method,final,method,destroy,method,class,param,types,destroy,method,get,parameter,types,final,object,args,new,object,param,types,length,if,param,types,length,1,args,0,boolean,true,if,logger,is,debug,enabled,logger,debug,invoking,destroy,method,this,destroy,method,name,on,bean,with,name,this,bean,name,try,if,system,get,security,manager,null,access,controller,do,privileged,new,privileged,action,object,public,object,run,reflection,utils,make,accessible,destroy,method,return,null,try,access,controller,do,privileged,new,privileged,exception,action,object,public,object,run,throws,exception,destroy,method,invoke,bean,args,return,null,acc,catch,privileged,action,exception,pax,throw,invocation,target,exception,pax,get,exception,else,reflection,utils,make,accessible,destroy,method,destroy,method,invoke,bean,args,catch,invocation,target,exception,ex,string,msg,invocation,of,destroy,method,this,destroy,method,name,failed,on,bean,with,name,this,bean,name,if,logger,is,debug,enabled,logger,warn,msg,ex,get,target,exception,else,logger,warn,msg,ex,get,target,exception,catch,throwable,ex,logger,error,couldn,t,invoke,destroy,method,this,destroy,method,name,on,bean,with,name,this,bean,name,ex
DisposableBeanAdapter -> private void invokeCustomDestroyMethod(final Method destroyMethod);1362408075;Invoke the specified custom destroy method on the given bean._<p>This implementation invokes a no-arg method if found, else checking_for a method with a single boolean argument (passing in "true",_assuming a "force" parameter), else logging an error.;private void invokeCustomDestroyMethod(final Method destroyMethod) {_		Class<?>[] paramTypes = destroyMethod.getParameterTypes()__		final Object[] args = new Object[paramTypes.length]__		if (paramTypes.length == 1) {_			args[0] = Boolean.TRUE__		}_		if (logger.isDebugEnabled()) {_			logger.debug("Invoking destroy method '" + this.destroyMethodName +_					"' on bean with name '" + this.beanName + "'")__		}_		try {_			if (System.getSecurityManager() != null) {_				AccessController.doPrivileged(new PrivilegedAction<Object>() {_					public Object run() {_						ReflectionUtils.makeAccessible(destroyMethod)__						return null__					}_				})__				try {_					AccessController.doPrivileged(new PrivilegedExceptionAction<Object>() {_						public Object run() throws Exception {_							destroyMethod.invoke(bean, args)__							return null__						}_					}, acc)__				}_				catch (PrivilegedActionException pax) {_					throw (InvocationTargetException) pax.getException()__				}_			}_			else {_				ReflectionUtils.makeAccessible(destroyMethod)__				destroyMethod.invoke(bean, args)__			}_		}_		catch (InvocationTargetException ex) {_			String msg = "Invocation of destroy method '" + this.destroyMethodName +_					"' failed on bean with name '" + this.beanName + "'"__			if (logger.isDebugEnabled()) {_				logger.warn(msg, ex.getTargetException())__			}_			else {_				logger.warn(msg + ": " + ex.getTargetException())__			}_		}_		catch (Throwable ex) {_			logger.error("Couldn't invoke destroy method '" + this.destroyMethodName +_					"' on bean with name '" + this.beanName + "'", ex)__		}_	};invoke,the,specified,custom,destroy,method,on,the,given,bean,p,this,implementation,invokes,a,no,arg,method,if,found,else,checking,for,a,method,with,a,single,boolean,argument,passing,in,true,assuming,a,force,parameter,else,logging,an,error;private,void,invoke,custom,destroy,method,final,method,destroy,method,class,param,types,destroy,method,get,parameter,types,final,object,args,new,object,param,types,length,if,param,types,length,1,args,0,boolean,true,if,logger,is,debug,enabled,logger,debug,invoking,destroy,method,this,destroy,method,name,on,bean,with,name,this,bean,name,try,if,system,get,security,manager,null,access,controller,do,privileged,new,privileged,action,object,public,object,run,reflection,utils,make,accessible,destroy,method,return,null,try,access,controller,do,privileged,new,privileged,exception,action,object,public,object,run,throws,exception,destroy,method,invoke,bean,args,return,null,acc,catch,privileged,action,exception,pax,throw,invocation,target,exception,pax,get,exception,else,reflection,utils,make,accessible,destroy,method,destroy,method,invoke,bean,args,catch,invocation,target,exception,ex,string,msg,invocation,of,destroy,method,this,destroy,method,name,failed,on,bean,with,name,this,bean,name,if,logger,is,debug,enabled,logger,warn,msg,ex,get,target,exception,else,logger,warn,msg,ex,get,target,exception,catch,throwable,ex,logger,error,couldn,t,invoke,destroy,method,this,destroy,method,name,on,bean,with,name,this,bean,name,ex
DisposableBeanAdapter -> private void invokeCustomDestroyMethod(final Method destroyMethod);1364503447;Invoke the specified custom destroy method on the given bean._<p>This implementation invokes a no-arg method if found, else checking_for a method with a single boolean argument (passing in "true",_assuming a "force" parameter), else logging an error.;private void invokeCustomDestroyMethod(final Method destroyMethod) {_		Class<?>[] paramTypes = destroyMethod.getParameterTypes()__		final Object[] args = new Object[paramTypes.length]__		if (paramTypes.length == 1) {_			args[0] = Boolean.TRUE__		}_		if (logger.isDebugEnabled()) {_			logger.debug("Invoking destroy method '" + this.destroyMethodName +_					"' on bean with name '" + this.beanName + "'")__		}_		try {_			if (System.getSecurityManager() != null) {_				AccessController.doPrivileged(new PrivilegedAction<Object>() {_					public Object run() {_						ReflectionUtils.makeAccessible(destroyMethod)__						return null__					}_				})__				try {_					AccessController.doPrivileged(new PrivilegedExceptionAction<Object>() {_						public Object run() throws Exception {_							destroyMethod.invoke(bean, args)__							return null__						}_					}, acc)__				}_				catch (PrivilegedActionException pax) {_					throw (InvocationTargetException) pax.getException()__				}_			}_			else {_				ReflectionUtils.makeAccessible(destroyMethod)__				destroyMethod.invoke(bean, args)__			}_		}_		catch (InvocationTargetException ex) {_			String msg = "Invocation of destroy method '" + this.destroyMethodName +_					"' failed on bean with name '" + this.beanName + "'"__			if (logger.isDebugEnabled()) {_				logger.warn(msg, ex.getTargetException())__			}_			else {_				logger.warn(msg + ": " + ex.getTargetException())__			}_		}_		catch (Throwable ex) {_			logger.error("Couldn't invoke destroy method '" + this.destroyMethodName +_					"' on bean with name '" + this.beanName + "'", ex)__		}_	};invoke,the,specified,custom,destroy,method,on,the,given,bean,p,this,implementation,invokes,a,no,arg,method,if,found,else,checking,for,a,method,with,a,single,boolean,argument,passing,in,true,assuming,a,force,parameter,else,logging,an,error;private,void,invoke,custom,destroy,method,final,method,destroy,method,class,param,types,destroy,method,get,parameter,types,final,object,args,new,object,param,types,length,if,param,types,length,1,args,0,boolean,true,if,logger,is,debug,enabled,logger,debug,invoking,destroy,method,this,destroy,method,name,on,bean,with,name,this,bean,name,try,if,system,get,security,manager,null,access,controller,do,privileged,new,privileged,action,object,public,object,run,reflection,utils,make,accessible,destroy,method,return,null,try,access,controller,do,privileged,new,privileged,exception,action,object,public,object,run,throws,exception,destroy,method,invoke,bean,args,return,null,acc,catch,privileged,action,exception,pax,throw,invocation,target,exception,pax,get,exception,else,reflection,utils,make,accessible,destroy,method,destroy,method,invoke,bean,args,catch,invocation,target,exception,ex,string,msg,invocation,of,destroy,method,this,destroy,method,name,failed,on,bean,with,name,this,bean,name,if,logger,is,debug,enabled,logger,warn,msg,ex,get,target,exception,else,logger,warn,msg,ex,get,target,exception,catch,throwable,ex,logger,error,couldn,t,invoke,destroy,method,this,destroy,method,name,on,bean,with,name,this,bean,name,ex
DisposableBeanAdapter -> private void invokeCustomDestroyMethod(final Method destroyMethod);1368482696;Invoke the specified custom destroy method on the given bean._<p>This implementation invokes a no-arg method if found, else checking_for a method with a single boolean argument (passing in "true",_assuming a "force" parameter), else logging an error.;private void invokeCustomDestroyMethod(final Method destroyMethod) {_		Class<?>[] paramTypes = destroyMethod.getParameterTypes()__		final Object[] args = new Object[paramTypes.length]__		if (paramTypes.length == 1) {_			args[0] = Boolean.TRUE__		}_		if (logger.isDebugEnabled()) {_			logger.debug("Invoking destroy method '" + this.destroyMethodName +_					"' on bean with name '" + this.beanName + "'")__		}_		try {_			if (System.getSecurityManager() != null) {_				AccessController.doPrivileged(new PrivilegedAction<Object>() {_					@Override_					public Object run() {_						ReflectionUtils.makeAccessible(destroyMethod)__						return null__					}_				})__				try {_					AccessController.doPrivileged(new PrivilegedExceptionAction<Object>() {_						@Override_						public Object run() throws Exception {_							destroyMethod.invoke(bean, args)__							return null__						}_					}, acc)__				}_				catch (PrivilegedActionException pax) {_					throw (InvocationTargetException) pax.getException()__				}_			}_			else {_				ReflectionUtils.makeAccessible(destroyMethod)__				destroyMethod.invoke(bean, args)__			}_		}_		catch (InvocationTargetException ex) {_			String msg = "Invocation of destroy method '" + this.destroyMethodName +_					"' failed on bean with name '" + this.beanName + "'"__			if (logger.isDebugEnabled()) {_				logger.warn(msg, ex.getTargetException())__			}_			else {_				logger.warn(msg + ": " + ex.getTargetException())__			}_		}_		catch (Throwable ex) {_			logger.error("Couldn't invoke destroy method '" + this.destroyMethodName +_					"' on bean with name '" + this.beanName + "'", ex)__		}_	};invoke,the,specified,custom,destroy,method,on,the,given,bean,p,this,implementation,invokes,a,no,arg,method,if,found,else,checking,for,a,method,with,a,single,boolean,argument,passing,in,true,assuming,a,force,parameter,else,logging,an,error;private,void,invoke,custom,destroy,method,final,method,destroy,method,class,param,types,destroy,method,get,parameter,types,final,object,args,new,object,param,types,length,if,param,types,length,1,args,0,boolean,true,if,logger,is,debug,enabled,logger,debug,invoking,destroy,method,this,destroy,method,name,on,bean,with,name,this,bean,name,try,if,system,get,security,manager,null,access,controller,do,privileged,new,privileged,action,object,override,public,object,run,reflection,utils,make,accessible,destroy,method,return,null,try,access,controller,do,privileged,new,privileged,exception,action,object,override,public,object,run,throws,exception,destroy,method,invoke,bean,args,return,null,acc,catch,privileged,action,exception,pax,throw,invocation,target,exception,pax,get,exception,else,reflection,utils,make,accessible,destroy,method,destroy,method,invoke,bean,args,catch,invocation,target,exception,ex,string,msg,invocation,of,destroy,method,this,destroy,method,name,failed,on,bean,with,name,this,bean,name,if,logger,is,debug,enabled,logger,warn,msg,ex,get,target,exception,else,logger,warn,msg,ex,get,target,exception,catch,throwable,ex,logger,error,couldn,t,invoke,destroy,method,this,destroy,method,name,on,bean,with,name,this,bean,name,ex
DisposableBeanAdapter -> private void invokeCustomDestroyMethod(final Method destroyMethod);1385412762;Invoke the specified custom destroy method on the given bean._<p>This implementation invokes a no-arg method if found, else checking_for a method with a single boolean argument (passing in "true",_assuming a "force" parameter), else logging an error.;private void invokeCustomDestroyMethod(final Method destroyMethod) {_		Class<?>[] paramTypes = destroyMethod.getParameterTypes()__		final Object[] args = new Object[paramTypes.length]__		if (paramTypes.length == 1) {_			args[0] = Boolean.TRUE__		}_		if (logger.isDebugEnabled()) {_			logger.debug("Invoking destroy method '" + this.destroyMethodName +_					"' on bean with name '" + this.beanName + "'")__		}_		try {_			if (System.getSecurityManager() != null) {_				AccessController.doPrivileged(new PrivilegedAction<Object>() {_					@Override_					public Object run() {_						ReflectionUtils.makeAccessible(destroyMethod)__						return null__					}_				})__				try {_					AccessController.doPrivileged(new PrivilegedExceptionAction<Object>() {_						@Override_						public Object run() throws Exception {_							destroyMethod.invoke(bean, args)__							return null__						}_					}, acc)__				}_				catch (PrivilegedActionException pax) {_					throw (InvocationTargetException) pax.getException()__				}_			}_			else {_				ReflectionUtils.makeAccessible(destroyMethod)__				destroyMethod.invoke(bean, args)__			}_		}_		catch (InvocationTargetException ex) {_			String msg = "Invocation of destroy method '" + this.destroyMethodName +_					"' failed on bean with name '" + this.beanName + "'"__			if (logger.isDebugEnabled()) {_				logger.warn(msg, ex.getTargetException())__			}_			else {_				logger.warn(msg + ": " + ex.getTargetException())__			}_		}_		catch (Throwable ex) {_			logger.error("Couldn't invoke destroy method '" + this.destroyMethodName +_					"' on bean with name '" + this.beanName + "'", ex)__		}_	};invoke,the,specified,custom,destroy,method,on,the,given,bean,p,this,implementation,invokes,a,no,arg,method,if,found,else,checking,for,a,method,with,a,single,boolean,argument,passing,in,true,assuming,a,force,parameter,else,logging,an,error;private,void,invoke,custom,destroy,method,final,method,destroy,method,class,param,types,destroy,method,get,parameter,types,final,object,args,new,object,param,types,length,if,param,types,length,1,args,0,boolean,true,if,logger,is,debug,enabled,logger,debug,invoking,destroy,method,this,destroy,method,name,on,bean,with,name,this,bean,name,try,if,system,get,security,manager,null,access,controller,do,privileged,new,privileged,action,object,override,public,object,run,reflection,utils,make,accessible,destroy,method,return,null,try,access,controller,do,privileged,new,privileged,exception,action,object,override,public,object,run,throws,exception,destroy,method,invoke,bean,args,return,null,acc,catch,privileged,action,exception,pax,throw,invocation,target,exception,pax,get,exception,else,reflection,utils,make,accessible,destroy,method,destroy,method,invoke,bean,args,catch,invocation,target,exception,ex,string,msg,invocation,of,destroy,method,this,destroy,method,name,failed,on,bean,with,name,this,bean,name,if,logger,is,debug,enabled,logger,warn,msg,ex,get,target,exception,else,logger,warn,msg,ex,get,target,exception,catch,throwable,ex,logger,error,couldn,t,invoke,destroy,method,this,destroy,method,name,on,bean,with,name,this,bean,name,ex
DisposableBeanAdapter -> private void invokeCustomDestroyMethod(final Method destroyMethod);1398638841;Invoke the specified custom destroy method on the given bean._<p>This implementation invokes a no-arg method if found, else checking_for a method with a single boolean argument (passing in "true",_assuming a "force" parameter), else logging an error.;private void invokeCustomDestroyMethod(final Method destroyMethod) {_		Class<?>[] paramTypes = destroyMethod.getParameterTypes()__		final Object[] args = new Object[paramTypes.length]__		if (paramTypes.length == 1) {_			args[0] = Boolean.TRUE__		}_		if (logger.isDebugEnabled()) {_			logger.debug("Invoking destroy method '" + this.destroyMethodName +_					"' on bean with name '" + this.beanName + "'")__		}_		try {_			if (System.getSecurityManager() != null) {_				AccessController.doPrivileged(new PrivilegedAction<Object>() {_					@Override_					public Object run() {_						ReflectionUtils.makeAccessible(destroyMethod)__						return null__					}_				})__				try {_					AccessController.doPrivileged(new PrivilegedExceptionAction<Object>() {_						@Override_						public Object run() throws Exception {_							destroyMethod.invoke(bean, args)__							return null__						}_					}, acc)__				}_				catch (PrivilegedActionException pax) {_					throw (InvocationTargetException) pax.getException()__				}_			}_			else {_				ReflectionUtils.makeAccessible(destroyMethod)__				destroyMethod.invoke(bean, args)__			}_		}_		catch (InvocationTargetException ex) {_			String msg = "Invocation of destroy method '" + this.destroyMethodName +_					"' failed on bean with name '" + this.beanName + "'"__			if (logger.isDebugEnabled()) {_				logger.warn(msg, ex.getTargetException())__			}_			else {_				logger.warn(msg + ": " + ex.getTargetException())__			}_		}_		catch (Throwable ex) {_			logger.error("Couldn't invoke destroy method '" + this.destroyMethodName +_					"' on bean with name '" + this.beanName + "'", ex)__		}_	};invoke,the,specified,custom,destroy,method,on,the,given,bean,p,this,implementation,invokes,a,no,arg,method,if,found,else,checking,for,a,method,with,a,single,boolean,argument,passing,in,true,assuming,a,force,parameter,else,logging,an,error;private,void,invoke,custom,destroy,method,final,method,destroy,method,class,param,types,destroy,method,get,parameter,types,final,object,args,new,object,param,types,length,if,param,types,length,1,args,0,boolean,true,if,logger,is,debug,enabled,logger,debug,invoking,destroy,method,this,destroy,method,name,on,bean,with,name,this,bean,name,try,if,system,get,security,manager,null,access,controller,do,privileged,new,privileged,action,object,override,public,object,run,reflection,utils,make,accessible,destroy,method,return,null,try,access,controller,do,privileged,new,privileged,exception,action,object,override,public,object,run,throws,exception,destroy,method,invoke,bean,args,return,null,acc,catch,privileged,action,exception,pax,throw,invocation,target,exception,pax,get,exception,else,reflection,utils,make,accessible,destroy,method,destroy,method,invoke,bean,args,catch,invocation,target,exception,ex,string,msg,invocation,of,destroy,method,this,destroy,method,name,failed,on,bean,with,name,this,bean,name,if,logger,is,debug,enabled,logger,warn,msg,ex,get,target,exception,else,logger,warn,msg,ex,get,target,exception,catch,throwable,ex,logger,error,couldn,t,invoke,destroy,method,this,destroy,method,name,on,bean,with,name,this,bean,name,ex
DisposableBeanAdapter -> private void invokeCustomDestroyMethod(final Method destroyMethod);1432125256;Invoke the specified custom destroy method on the given bean._<p>This implementation invokes a no-arg method if found, else checking_for a method with a single boolean argument (passing in "true",_assuming a "force" parameter), else logging an error.;private void invokeCustomDestroyMethod(final Method destroyMethod) {_		Class<?>[] paramTypes = destroyMethod.getParameterTypes()__		final Object[] args = new Object[paramTypes.length]__		if (paramTypes.length == 1) {_			args[0] = Boolean.TRUE__		}_		if (logger.isDebugEnabled()) {_			logger.debug("Invoking destroy method '" + this.destroyMethodName +_					"' on bean with name '" + this.beanName + "'")__		}_		try {_			if (System.getSecurityManager() != null) {_				AccessController.doPrivileged(new PrivilegedAction<Object>() {_					@Override_					public Object run() {_						ReflectionUtils.makeAccessible(destroyMethod)__						return null__					}_				})__				try {_					AccessController.doPrivileged(new PrivilegedExceptionAction<Object>() {_						@Override_						public Object run() throws Exception {_							destroyMethod.invoke(bean, args)__							return null__						}_					}, acc)__				}_				catch (PrivilegedActionException pax) {_					throw (InvocationTargetException) pax.getException()__				}_			}_			else {_				ReflectionUtils.makeAccessible(destroyMethod)__				destroyMethod.invoke(bean, args)__			}_		}_		catch (InvocationTargetException ex) {_			String msg = "Invocation of destroy method '" + this.destroyMethodName +_					"' failed on bean with name '" + this.beanName + "'"__			if (logger.isDebugEnabled()) {_				logger.warn(msg, ex.getTargetException())__			}_			else {_				logger.warn(msg + ": " + ex.getTargetException())__			}_		}_		catch (Throwable ex) {_			logger.error("Couldn't invoke destroy method '" + this.destroyMethodName +_					"' on bean with name '" + this.beanName + "'", ex)__		}_	};invoke,the,specified,custom,destroy,method,on,the,given,bean,p,this,implementation,invokes,a,no,arg,method,if,found,else,checking,for,a,method,with,a,single,boolean,argument,passing,in,true,assuming,a,force,parameter,else,logging,an,error;private,void,invoke,custom,destroy,method,final,method,destroy,method,class,param,types,destroy,method,get,parameter,types,final,object,args,new,object,param,types,length,if,param,types,length,1,args,0,boolean,true,if,logger,is,debug,enabled,logger,debug,invoking,destroy,method,this,destroy,method,name,on,bean,with,name,this,bean,name,try,if,system,get,security,manager,null,access,controller,do,privileged,new,privileged,action,object,override,public,object,run,reflection,utils,make,accessible,destroy,method,return,null,try,access,controller,do,privileged,new,privileged,exception,action,object,override,public,object,run,throws,exception,destroy,method,invoke,bean,args,return,null,acc,catch,privileged,action,exception,pax,throw,invocation,target,exception,pax,get,exception,else,reflection,utils,make,accessible,destroy,method,destroy,method,invoke,bean,args,catch,invocation,target,exception,ex,string,msg,invocation,of,destroy,method,this,destroy,method,name,failed,on,bean,with,name,this,bean,name,if,logger,is,debug,enabled,logger,warn,msg,ex,get,target,exception,else,logger,warn,msg,ex,get,target,exception,catch,throwable,ex,logger,error,couldn,t,invoke,destroy,method,this,destroy,method,name,on,bean,with,name,this,bean,name,ex
DisposableBeanAdapter -> private void invokeCustomDestroyMethod(final Method destroyMethod);1432135182;Invoke the specified custom destroy method on the given bean._<p>This implementation invokes a no-arg method if found, else checking_for a method with a single boolean argument (passing in "true",_assuming a "force" parameter), else logging an error.;private void invokeCustomDestroyMethod(final Method destroyMethod) {_		Class<?>[] paramTypes = destroyMethod.getParameterTypes()__		final Object[] args = new Object[paramTypes.length]__		if (paramTypes.length == 1) {_			args[0] = Boolean.TRUE__		}_		if (logger.isDebugEnabled()) {_			logger.debug("Invoking destroy method '" + this.destroyMethodName +_					"' on bean with name '" + this.beanName + "'")__		}_		try {_			if (System.getSecurityManager() != null) {_				AccessController.doPrivileged(new PrivilegedAction<Object>() {_					@Override_					public Object run() {_						ReflectionUtils.makeAccessible(destroyMethod)__						return null__					}_				})__				try {_					AccessController.doPrivileged(new PrivilegedExceptionAction<Object>() {_						@Override_						public Object run() throws Exception {_							destroyMethod.invoke(bean, args)__							return null__						}_					}, acc)__				}_				catch (PrivilegedActionException pax) {_					throw (InvocationTargetException) pax.getException()__				}_			}_			else {_				ReflectionUtils.makeAccessible(destroyMethod)__				destroyMethod.invoke(bean, args)__			}_		}_		catch (InvocationTargetException ex) {_			String msg = "Invocation of destroy method '" + this.destroyMethodName +_					"' failed on bean with name '" + this.beanName + "'"__			if (logger.isDebugEnabled()) {_				logger.warn(msg, ex.getTargetException())__			}_			else {_				logger.warn(msg + ": " + ex.getTargetException())__			}_		}_		catch (Throwable ex) {_			logger.error("Couldn't invoke destroy method '" + this.destroyMethodName +_					"' on bean with name '" + this.beanName + "'", ex)__		}_	};invoke,the,specified,custom,destroy,method,on,the,given,bean,p,this,implementation,invokes,a,no,arg,method,if,found,else,checking,for,a,method,with,a,single,boolean,argument,passing,in,true,assuming,a,force,parameter,else,logging,an,error;private,void,invoke,custom,destroy,method,final,method,destroy,method,class,param,types,destroy,method,get,parameter,types,final,object,args,new,object,param,types,length,if,param,types,length,1,args,0,boolean,true,if,logger,is,debug,enabled,logger,debug,invoking,destroy,method,this,destroy,method,name,on,bean,with,name,this,bean,name,try,if,system,get,security,manager,null,access,controller,do,privileged,new,privileged,action,object,override,public,object,run,reflection,utils,make,accessible,destroy,method,return,null,try,access,controller,do,privileged,new,privileged,exception,action,object,override,public,object,run,throws,exception,destroy,method,invoke,bean,args,return,null,acc,catch,privileged,action,exception,pax,throw,invocation,target,exception,pax,get,exception,else,reflection,utils,make,accessible,destroy,method,destroy,method,invoke,bean,args,catch,invocation,target,exception,ex,string,msg,invocation,of,destroy,method,this,destroy,method,name,failed,on,bean,with,name,this,bean,name,if,logger,is,debug,enabled,logger,warn,msg,ex,get,target,exception,else,logger,warn,msg,ex,get,target,exception,catch,throwable,ex,logger,error,couldn,t,invoke,destroy,method,this,destroy,method,name,on,bean,with,name,this,bean,name,ex
DisposableBeanAdapter -> private void invokeCustomDestroyMethod(final Method destroyMethod);1436434188;Invoke the specified custom destroy method on the given bean._<p>This implementation invokes a no-arg method if found, else checking_for a method with a single boolean argument (passing in "true",_assuming a "force" parameter), else logging an error.;private void invokeCustomDestroyMethod(final Method destroyMethod) {_		Class<?>[] paramTypes = destroyMethod.getParameterTypes()__		final Object[] args = new Object[paramTypes.length]__		if (paramTypes.length == 1) {_			args[0] = Boolean.TRUE__		}_		if (logger.isDebugEnabled()) {_			logger.debug("Invoking destroy method '" + this.destroyMethodName +_					"' on bean with name '" + this.beanName + "'")__		}_		try {_			if (System.getSecurityManager() != null) {_				AccessController.doPrivileged(new PrivilegedAction<Object>() {_					@Override_					public Object run() {_						ReflectionUtils.makeAccessible(destroyMethod)__						return null__					}_				})__				try {_					AccessController.doPrivileged(new PrivilegedExceptionAction<Object>() {_						@Override_						public Object run() throws Exception {_							destroyMethod.invoke(bean, args)__							return null__						}_					}, acc)__				}_				catch (PrivilegedActionException pax) {_					throw (InvocationTargetException) pax.getException()__				}_			}_			else {_				ReflectionUtils.makeAccessible(destroyMethod)__				destroyMethod.invoke(bean, args)__			}_		}_		catch (InvocationTargetException ex) {_			String msg = "Invocation of destroy method '" + this.destroyMethodName +_					"' failed on bean with name '" + this.beanName + "'"__			if (logger.isDebugEnabled()) {_				logger.warn(msg, ex.getTargetException())__			}_			else {_				logger.warn(msg + ": " + ex.getTargetException())__			}_		}_		catch (Throwable ex) {_			logger.error("Couldn't invoke destroy method '" + this.destroyMethodName +_					"' on bean with name '" + this.beanName + "'", ex)__		}_	};invoke,the,specified,custom,destroy,method,on,the,given,bean,p,this,implementation,invokes,a,no,arg,method,if,found,else,checking,for,a,method,with,a,single,boolean,argument,passing,in,true,assuming,a,force,parameter,else,logging,an,error;private,void,invoke,custom,destroy,method,final,method,destroy,method,class,param,types,destroy,method,get,parameter,types,final,object,args,new,object,param,types,length,if,param,types,length,1,args,0,boolean,true,if,logger,is,debug,enabled,logger,debug,invoking,destroy,method,this,destroy,method,name,on,bean,with,name,this,bean,name,try,if,system,get,security,manager,null,access,controller,do,privileged,new,privileged,action,object,override,public,object,run,reflection,utils,make,accessible,destroy,method,return,null,try,access,controller,do,privileged,new,privileged,exception,action,object,override,public,object,run,throws,exception,destroy,method,invoke,bean,args,return,null,acc,catch,privileged,action,exception,pax,throw,invocation,target,exception,pax,get,exception,else,reflection,utils,make,accessible,destroy,method,destroy,method,invoke,bean,args,catch,invocation,target,exception,ex,string,msg,invocation,of,destroy,method,this,destroy,method,name,failed,on,bean,with,name,this,bean,name,if,logger,is,debug,enabled,logger,warn,msg,ex,get,target,exception,else,logger,warn,msg,ex,get,target,exception,catch,throwable,ex,logger,error,couldn,t,invoke,destroy,method,this,destroy,method,name,on,bean,with,name,this,bean,name,ex
DisposableBeanAdapter -> private void invokeCustomDestroyMethod(final Method destroyMethod);1447195666;Invoke the specified custom destroy method on the given bean._<p>This implementation invokes a no-arg method if found, else checking_for a method with a single boolean argument (passing in "true",_assuming a "force" parameter), else logging an error.;private void invokeCustomDestroyMethod(final Method destroyMethod) {_		Class<?>[] paramTypes = destroyMethod.getParameterTypes()__		final Object[] args = new Object[paramTypes.length]__		if (paramTypes.length == 1) {_			args[0] = Boolean.TRUE__		}_		if (logger.isDebugEnabled()) {_			logger.debug("Invoking destroy method '" + this.destroyMethodName +_					"' on bean with name '" + this.beanName + "'")__		}_		try {_			if (System.getSecurityManager() != null) {_				AccessController.doPrivileged(new PrivilegedAction<Object>() {_					@Override_					public Object run() {_						ReflectionUtils.makeAccessible(destroyMethod)__						return null__					}_				})__				try {_					AccessController.doPrivileged(new PrivilegedExceptionAction<Object>() {_						@Override_						public Object run() throws Exception {_							destroyMethod.invoke(bean, args)__							return null__						}_					}, acc)__				}_				catch (PrivilegedActionException pax) {_					throw (InvocationTargetException) pax.getException()__				}_			}_			else {_				ReflectionUtils.makeAccessible(destroyMethod)__				destroyMethod.invoke(bean, args)__			}_		}_		catch (InvocationTargetException ex) {_			String msg = "Invocation of destroy method '" + this.destroyMethodName +_					"' failed on bean with name '" + this.beanName + "'"__			if (logger.isDebugEnabled()) {_				logger.warn(msg, ex.getTargetException())__			}_			else {_				logger.warn(msg + ": " + ex.getTargetException())__			}_		}_		catch (Throwable ex) {_			logger.error("Couldn't invoke destroy method '" + this.destroyMethodName +_					"' on bean with name '" + this.beanName + "'", ex)__		}_	};invoke,the,specified,custom,destroy,method,on,the,given,bean,p,this,implementation,invokes,a,no,arg,method,if,found,else,checking,for,a,method,with,a,single,boolean,argument,passing,in,true,assuming,a,force,parameter,else,logging,an,error;private,void,invoke,custom,destroy,method,final,method,destroy,method,class,param,types,destroy,method,get,parameter,types,final,object,args,new,object,param,types,length,if,param,types,length,1,args,0,boolean,true,if,logger,is,debug,enabled,logger,debug,invoking,destroy,method,this,destroy,method,name,on,bean,with,name,this,bean,name,try,if,system,get,security,manager,null,access,controller,do,privileged,new,privileged,action,object,override,public,object,run,reflection,utils,make,accessible,destroy,method,return,null,try,access,controller,do,privileged,new,privileged,exception,action,object,override,public,object,run,throws,exception,destroy,method,invoke,bean,args,return,null,acc,catch,privileged,action,exception,pax,throw,invocation,target,exception,pax,get,exception,else,reflection,utils,make,accessible,destroy,method,destroy,method,invoke,bean,args,catch,invocation,target,exception,ex,string,msg,invocation,of,destroy,method,this,destroy,method,name,failed,on,bean,with,name,this,bean,name,if,logger,is,debug,enabled,logger,warn,msg,ex,get,target,exception,else,logger,warn,msg,ex,get,target,exception,catch,throwable,ex,logger,error,couldn,t,invoke,destroy,method,this,destroy,method,name,on,bean,with,name,this,bean,name,ex
DisposableBeanAdapter -> private void invokeCustomDestroyMethod(final Method destroyMethod);1450454045;Invoke the specified custom destroy method on the given bean._<p>This implementation invokes a no-arg method if found, else checking_for a method with a single boolean argument (passing in "true",_assuming a "force" parameter), else logging an error.;private void invokeCustomDestroyMethod(final Method destroyMethod) {_		Class<?>[] paramTypes = destroyMethod.getParameterTypes()__		final Object[] args = new Object[paramTypes.length]__		if (paramTypes.length == 1) {_			args[0] = Boolean.TRUE__		}_		if (logger.isDebugEnabled()) {_			logger.debug("Invoking destroy method '" + this.destroyMethodName +_					"' on bean with name '" + this.beanName + "'")__		}_		try {_			if (System.getSecurityManager() != null) {_				AccessController.doPrivileged(new PrivilegedAction<Object>() {_					@Override_					public Object run() {_						ReflectionUtils.makeAccessible(destroyMethod)__						return null__					}_				})__				try {_					AccessController.doPrivileged(new PrivilegedExceptionAction<Object>() {_						@Override_						public Object run() throws Exception {_							destroyMethod.invoke(bean, args)__							return null__						}_					}, acc)__				}_				catch (PrivilegedActionException pax) {_					throw (InvocationTargetException) pax.getException()__				}_			}_			else {_				ReflectionUtils.makeAccessible(destroyMethod)__				destroyMethod.invoke(bean, args)__			}_		}_		catch (InvocationTargetException ex) {_			String msg = "Invocation of destroy method '" + this.destroyMethodName +_					"' failed on bean with name '" + this.beanName + "'"__			if (logger.isDebugEnabled()) {_				logger.warn(msg, ex.getTargetException())__			}_			else {_				logger.warn(msg + ": " + ex.getTargetException())__			}_		}_		catch (Throwable ex) {_			logger.error("Couldn't invoke destroy method '" + this.destroyMethodName +_					"' on bean with name '" + this.beanName + "'", ex)__		}_	};invoke,the,specified,custom,destroy,method,on,the,given,bean,p,this,implementation,invokes,a,no,arg,method,if,found,else,checking,for,a,method,with,a,single,boolean,argument,passing,in,true,assuming,a,force,parameter,else,logging,an,error;private,void,invoke,custom,destroy,method,final,method,destroy,method,class,param,types,destroy,method,get,parameter,types,final,object,args,new,object,param,types,length,if,param,types,length,1,args,0,boolean,true,if,logger,is,debug,enabled,logger,debug,invoking,destroy,method,this,destroy,method,name,on,bean,with,name,this,bean,name,try,if,system,get,security,manager,null,access,controller,do,privileged,new,privileged,action,object,override,public,object,run,reflection,utils,make,accessible,destroy,method,return,null,try,access,controller,do,privileged,new,privileged,exception,action,object,override,public,object,run,throws,exception,destroy,method,invoke,bean,args,return,null,acc,catch,privileged,action,exception,pax,throw,invocation,target,exception,pax,get,exception,else,reflection,utils,make,accessible,destroy,method,destroy,method,invoke,bean,args,catch,invocation,target,exception,ex,string,msg,invocation,of,destroy,method,this,destroy,method,name,failed,on,bean,with,name,this,bean,name,if,logger,is,debug,enabled,logger,warn,msg,ex,get,target,exception,else,logger,warn,msg,ex,get,target,exception,catch,throwable,ex,logger,error,couldn,t,invoke,destroy,method,this,destroy,method,name,on,bean,with,name,this,bean,name,ex
DisposableBeanAdapter -> private void invokeCustomDestroyMethod(final Method destroyMethod);1454934048;Invoke the specified custom destroy method on the given bean._<p>This implementation invokes a no-arg method if found, else checking_for a method with a single boolean argument (passing in "true",_assuming a "force" parameter), else logging an error.;private void invokeCustomDestroyMethod(final Method destroyMethod) {_		Class<?>[] paramTypes = destroyMethod.getParameterTypes()__		final Object[] args = new Object[paramTypes.length]__		if (paramTypes.length == 1) {_			args[0] = Boolean.TRUE__		}_		if (logger.isDebugEnabled()) {_			logger.debug("Invoking destroy method '" + this.destroyMethodName +_					"' on bean with name '" + this.beanName + "'")__		}_		try {_			if (System.getSecurityManager() != null) {_				AccessController.doPrivileged(new PrivilegedAction<Object>() {_					@Override_					public Object run() {_						ReflectionUtils.makeAccessible(destroyMethod)__						return null__					}_				})__				try {_					AccessController.doPrivileged(new PrivilegedExceptionAction<Object>() {_						@Override_						public Object run() throws Exception {_							destroyMethod.invoke(bean, args)__							return null__						}_					}, acc)__				}_				catch (PrivilegedActionException pax) {_					throw (InvocationTargetException) pax.getException()__				}_			}_			else {_				ReflectionUtils.makeAccessible(destroyMethod)__				destroyMethod.invoke(bean, args)__			}_		}_		catch (InvocationTargetException ex) {_			String msg = "Invocation of destroy method '" + this.destroyMethodName +_					"' failed on bean with name '" + this.beanName + "'"__			if (logger.isDebugEnabled()) {_				logger.warn(msg, ex.getTargetException())__			}_			else {_				logger.warn(msg + ": " + ex.getTargetException())__			}_		}_		catch (Throwable ex) {_			logger.error("Couldn't invoke destroy method '" + this.destroyMethodName +_					"' on bean with name '" + this.beanName + "'", ex)__		}_	};invoke,the,specified,custom,destroy,method,on,the,given,bean,p,this,implementation,invokes,a,no,arg,method,if,found,else,checking,for,a,method,with,a,single,boolean,argument,passing,in,true,assuming,a,force,parameter,else,logging,an,error;private,void,invoke,custom,destroy,method,final,method,destroy,method,class,param,types,destroy,method,get,parameter,types,final,object,args,new,object,param,types,length,if,param,types,length,1,args,0,boolean,true,if,logger,is,debug,enabled,logger,debug,invoking,destroy,method,this,destroy,method,name,on,bean,with,name,this,bean,name,try,if,system,get,security,manager,null,access,controller,do,privileged,new,privileged,action,object,override,public,object,run,reflection,utils,make,accessible,destroy,method,return,null,try,access,controller,do,privileged,new,privileged,exception,action,object,override,public,object,run,throws,exception,destroy,method,invoke,bean,args,return,null,acc,catch,privileged,action,exception,pax,throw,invocation,target,exception,pax,get,exception,else,reflection,utils,make,accessible,destroy,method,destroy,method,invoke,bean,args,catch,invocation,target,exception,ex,string,msg,invocation,of,destroy,method,this,destroy,method,name,failed,on,bean,with,name,this,bean,name,if,logger,is,debug,enabled,logger,warn,msg,ex,get,target,exception,else,logger,warn,msg,ex,get,target,exception,catch,throwable,ex,logger,error,couldn,t,invoke,destroy,method,this,destroy,method,name,on,bean,with,name,this,bean,name,ex
DisposableBeanAdapter -> private void invokeCustomDestroyMethod(final Method destroyMethod);1467730834;Invoke the specified custom destroy method on the given bean._<p>This implementation invokes a no-arg method if found, else checking_for a method with a single boolean argument (passing in "true",_assuming a "force" parameter), else logging an error.;private void invokeCustomDestroyMethod(final Method destroyMethod) {_		Class<?>[] paramTypes = destroyMethod.getParameterTypes()__		final Object[] args = new Object[paramTypes.length]__		if (paramTypes.length == 1) {_			args[0] = Boolean.TRUE__		}_		if (logger.isDebugEnabled()) {_			logger.debug("Invoking destroy method '" + this.destroyMethodName +_					"' on bean with name '" + this.beanName + "'")__		}_		try {_			if (System.getSecurityManager() != null) {_				AccessController.doPrivileged(new PrivilegedAction<Object>() {_					@Override_					public Object run() {_						ReflectionUtils.makeAccessible(destroyMethod)__						return null__					}_				})__				try {_					AccessController.doPrivileged(new PrivilegedExceptionAction<Object>() {_						@Override_						public Object run() throws Exception {_							destroyMethod.invoke(bean, args)__							return null__						}_					}, acc)__				}_				catch (PrivilegedActionException pax) {_					throw (InvocationTargetException) pax.getException()__				}_			}_			else {_				ReflectionUtils.makeAccessible(destroyMethod)__				destroyMethod.invoke(bean, args)__			}_		}_		catch (InvocationTargetException ex) {_			String msg = "Invocation of destroy method '" + this.destroyMethodName +_					"' failed on bean with name '" + this.beanName + "'"__			if (logger.isDebugEnabled()) {_				logger.warn(msg, ex.getTargetException())__			}_			else {_				logger.warn(msg + ": " + ex.getTargetException())__			}_		}_		catch (Throwable ex) {_			logger.error("Couldn't invoke destroy method '" + this.destroyMethodName +_					"' on bean with name '" + this.beanName + "'", ex)__		}_	};invoke,the,specified,custom,destroy,method,on,the,given,bean,p,this,implementation,invokes,a,no,arg,method,if,found,else,checking,for,a,method,with,a,single,boolean,argument,passing,in,true,assuming,a,force,parameter,else,logging,an,error;private,void,invoke,custom,destroy,method,final,method,destroy,method,class,param,types,destroy,method,get,parameter,types,final,object,args,new,object,param,types,length,if,param,types,length,1,args,0,boolean,true,if,logger,is,debug,enabled,logger,debug,invoking,destroy,method,this,destroy,method,name,on,bean,with,name,this,bean,name,try,if,system,get,security,manager,null,access,controller,do,privileged,new,privileged,action,object,override,public,object,run,reflection,utils,make,accessible,destroy,method,return,null,try,access,controller,do,privileged,new,privileged,exception,action,object,override,public,object,run,throws,exception,destroy,method,invoke,bean,args,return,null,acc,catch,privileged,action,exception,pax,throw,invocation,target,exception,pax,get,exception,else,reflection,utils,make,accessible,destroy,method,destroy,method,invoke,bean,args,catch,invocation,target,exception,ex,string,msg,invocation,of,destroy,method,this,destroy,method,name,failed,on,bean,with,name,this,bean,name,if,logger,is,debug,enabled,logger,warn,msg,ex,get,target,exception,else,logger,warn,msg,ex,get,target,exception,catch,throwable,ex,logger,error,couldn,t,invoke,destroy,method,this,destroy,method,name,on,bean,with,name,this,bean,name,ex
DisposableBeanAdapter -> private void invokeCustomDestroyMethod(final Method destroyMethod);1469441195;Invoke the specified custom destroy method on the given bean._<p>This implementation invokes a no-arg method if found, else checking_for a method with a single boolean argument (passing in "true",_assuming a "force" parameter), else logging an error.;private void invokeCustomDestroyMethod(final Method destroyMethod) {_		Class<?>[] paramTypes = destroyMethod.getParameterTypes()__		final Object[] args = new Object[paramTypes.length]__		if (paramTypes.length == 1) {_			args[0] = Boolean.TRUE__		}_		if (logger.isDebugEnabled()) {_			logger.debug("Invoking destroy method '" + this.destroyMethodName +_					"' on bean with name '" + this.beanName + "'")__		}_		try {_			if (System.getSecurityManager() != null) {_				AccessController.doPrivileged(new PrivilegedAction<Object>() {_					@Override_					public Object run() {_						ReflectionUtils.makeAccessible(destroyMethod)__						return null__					}_				})__				try {_					AccessController.doPrivileged(new PrivilegedExceptionAction<Object>() {_						@Override_						public Object run() throws Exception {_							destroyMethod.invoke(bean, args)__							return null__						}_					}, acc)__				}_				catch (PrivilegedActionException pax) {_					throw (InvocationTargetException) pax.getException()__				}_			}_			else {_				ReflectionUtils.makeAccessible(destroyMethod)__				destroyMethod.invoke(bean, args)__			}_		}_		catch (InvocationTargetException ex) {_			String msg = "Invocation of destroy method '" + this.destroyMethodName +_					"' failed on bean with name '" + this.beanName + "'"__			if (logger.isDebugEnabled()) {_				logger.warn(msg, ex.getTargetException())__			}_			else {_				logger.warn(msg + ": " + ex.getTargetException())__			}_		}_		catch (Throwable ex) {_			logger.error("Couldn't invoke destroy method '" + this.destroyMethodName +_					"' on bean with name '" + this.beanName + "'", ex)__		}_	};invoke,the,specified,custom,destroy,method,on,the,given,bean,p,this,implementation,invokes,a,no,arg,method,if,found,else,checking,for,a,method,with,a,single,boolean,argument,passing,in,true,assuming,a,force,parameter,else,logging,an,error;private,void,invoke,custom,destroy,method,final,method,destroy,method,class,param,types,destroy,method,get,parameter,types,final,object,args,new,object,param,types,length,if,param,types,length,1,args,0,boolean,true,if,logger,is,debug,enabled,logger,debug,invoking,destroy,method,this,destroy,method,name,on,bean,with,name,this,bean,name,try,if,system,get,security,manager,null,access,controller,do,privileged,new,privileged,action,object,override,public,object,run,reflection,utils,make,accessible,destroy,method,return,null,try,access,controller,do,privileged,new,privileged,exception,action,object,override,public,object,run,throws,exception,destroy,method,invoke,bean,args,return,null,acc,catch,privileged,action,exception,pax,throw,invocation,target,exception,pax,get,exception,else,reflection,utils,make,accessible,destroy,method,destroy,method,invoke,bean,args,catch,invocation,target,exception,ex,string,msg,invocation,of,destroy,method,this,destroy,method,name,failed,on,bean,with,name,this,bean,name,if,logger,is,debug,enabled,logger,warn,msg,ex,get,target,exception,else,logger,warn,msg,ex,get,target,exception,catch,throwable,ex,logger,error,couldn,t,invoke,destroy,method,this,destroy,method,name,on,bean,with,name,this,bean,name,ex
DisposableBeanAdapter -> private void invokeCustomDestroyMethod(final Method destroyMethod);1479746164;Invoke the specified custom destroy method on the given bean._<p>This implementation invokes a no-arg method if found, else checking_for a method with a single boolean argument (passing in "true",_assuming a "force" parameter), else logging an error.;private void invokeCustomDestroyMethod(final Method destroyMethod) {_		Class<?>[] paramTypes = destroyMethod.getParameterTypes()__		final Object[] args = new Object[paramTypes.length]__		if (paramTypes.length == 1) {_			args[0] = Boolean.TRUE__		}_		if (logger.isDebugEnabled()) {_			logger.debug("Invoking destroy method '" + this.destroyMethodName +_					"' on bean with name '" + this.beanName + "'")__		}_		try {_			if (System.getSecurityManager() != null) {_				AccessController.doPrivileged(new PrivilegedAction<Object>() {_					@Override_					public Object run() {_						ReflectionUtils.makeAccessible(destroyMethod)__						return null__					}_				})__				try {_					AccessController.doPrivileged(new PrivilegedExceptionAction<Object>() {_						@Override_						public Object run() throws Exception {_							destroyMethod.invoke(bean, args)__							return null__						}_					}, acc)__				}_				catch (PrivilegedActionException pax) {_					throw (InvocationTargetException) pax.getException()__				}_			}_			else {_				ReflectionUtils.makeAccessible(destroyMethod)__				destroyMethod.invoke(bean, args)__			}_		}_		catch (InvocationTargetException ex) {_			String msg = "Invocation of destroy method '" + this.destroyMethodName +_					"' failed on bean with name '" + this.beanName + "'"__			if (logger.isDebugEnabled()) {_				logger.warn(msg, ex.getTargetException())__			}_			else {_				logger.warn(msg + ": " + ex.getTargetException())__			}_		}_		catch (Throwable ex) {_			logger.error("Couldn't invoke destroy method '" + this.destroyMethodName +_					"' on bean with name '" + this.beanName + "'", ex)__		}_	};invoke,the,specified,custom,destroy,method,on,the,given,bean,p,this,implementation,invokes,a,no,arg,method,if,found,else,checking,for,a,method,with,a,single,boolean,argument,passing,in,true,assuming,a,force,parameter,else,logging,an,error;private,void,invoke,custom,destroy,method,final,method,destroy,method,class,param,types,destroy,method,get,parameter,types,final,object,args,new,object,param,types,length,if,param,types,length,1,args,0,boolean,true,if,logger,is,debug,enabled,logger,debug,invoking,destroy,method,this,destroy,method,name,on,bean,with,name,this,bean,name,try,if,system,get,security,manager,null,access,controller,do,privileged,new,privileged,action,object,override,public,object,run,reflection,utils,make,accessible,destroy,method,return,null,try,access,controller,do,privileged,new,privileged,exception,action,object,override,public,object,run,throws,exception,destroy,method,invoke,bean,args,return,null,acc,catch,privileged,action,exception,pax,throw,invocation,target,exception,pax,get,exception,else,reflection,utils,make,accessible,destroy,method,destroy,method,invoke,bean,args,catch,invocation,target,exception,ex,string,msg,invocation,of,destroy,method,this,destroy,method,name,failed,on,bean,with,name,this,bean,name,if,logger,is,debug,enabled,logger,warn,msg,ex,get,target,exception,else,logger,warn,msg,ex,get,target,exception,catch,throwable,ex,logger,error,couldn,t,invoke,destroy,method,this,destroy,method,name,on,bean,with,name,this,bean,name,ex
DisposableBeanAdapter -> private void invokeCustomDestroyMethod(final Method destroyMethod);1495868221;Invoke the specified custom destroy method on the given bean._<p>This implementation invokes a no-arg method if found, else checking_for a method with a single boolean argument (passing in "true",_assuming a "force" parameter), else logging an error.;private void invokeCustomDestroyMethod(final Method destroyMethod) {_		Class<?>[] paramTypes = destroyMethod.getParameterTypes()__		final Object[] args = new Object[paramTypes.length]__		if (paramTypes.length == 1) {_			args[0] = Boolean.TRUE__		}_		if (logger.isDebugEnabled()) {_			logger.debug("Invoking destroy method '" + this.destroyMethodName +_					"' on bean with name '" + this.beanName + "'")__		}_		try {_			if (System.getSecurityManager() != null) {_				AccessController.doPrivileged(new PrivilegedAction<Object>() {_					@Override_					public Object run() {_						ReflectionUtils.makeAccessible(destroyMethod)__						return null__					}_				})__				try {_					AccessController.doPrivileged(new PrivilegedExceptionAction<Object>() {_						@Override_						public Object run() throws Exception {_							destroyMethod.invoke(bean, args)__							return null__						}_					}, acc)__				}_				catch (PrivilegedActionException pax) {_					throw (InvocationTargetException) pax.getException()__				}_			}_			else {_				ReflectionUtils.makeAccessible(destroyMethod)__				destroyMethod.invoke(bean, args)__			}_		}_		catch (InvocationTargetException ex) {_			String msg = "Invocation of destroy method '" + this.destroyMethodName +_					"' failed on bean with name '" + this.beanName + "'"__			if (logger.isDebugEnabled()) {_				logger.warn(msg, ex.getTargetException())__			}_			else {_				logger.warn(msg + ": " + ex.getTargetException())__			}_		}_		catch (Throwable ex) {_			logger.error("Couldn't invoke destroy method '" + this.destroyMethodName +_					"' on bean with name '" + this.beanName + "'", ex)__		}_	};invoke,the,specified,custom,destroy,method,on,the,given,bean,p,this,implementation,invokes,a,no,arg,method,if,found,else,checking,for,a,method,with,a,single,boolean,argument,passing,in,true,assuming,a,force,parameter,else,logging,an,error;private,void,invoke,custom,destroy,method,final,method,destroy,method,class,param,types,destroy,method,get,parameter,types,final,object,args,new,object,param,types,length,if,param,types,length,1,args,0,boolean,true,if,logger,is,debug,enabled,logger,debug,invoking,destroy,method,this,destroy,method,name,on,bean,with,name,this,bean,name,try,if,system,get,security,manager,null,access,controller,do,privileged,new,privileged,action,object,override,public,object,run,reflection,utils,make,accessible,destroy,method,return,null,try,access,controller,do,privileged,new,privileged,exception,action,object,override,public,object,run,throws,exception,destroy,method,invoke,bean,args,return,null,acc,catch,privileged,action,exception,pax,throw,invocation,target,exception,pax,get,exception,else,reflection,utils,make,accessible,destroy,method,destroy,method,invoke,bean,args,catch,invocation,target,exception,ex,string,msg,invocation,of,destroy,method,this,destroy,method,name,failed,on,bean,with,name,this,bean,name,if,logger,is,debug,enabled,logger,warn,msg,ex,get,target,exception,else,logger,warn,msg,ex,get,target,exception,catch,throwable,ex,logger,error,couldn,t,invoke,destroy,method,this,destroy,method,name,on,bean,with,name,this,bean,name,ex
DisposableBeanAdapter -> private void invokeCustomDestroyMethod(final Method destroyMethod);1496837955;Invoke the specified custom destroy method on the given bean._<p>This implementation invokes a no-arg method if found, else checking_for a method with a single boolean argument (passing in "true",_assuming a "force" parameter), else logging an error.;private void invokeCustomDestroyMethod(final Method destroyMethod) {_		Class<?>[] paramTypes = destroyMethod.getParameterTypes()__		final Object[] args = new Object[paramTypes.length]__		if (paramTypes.length == 1) {_			args[0] = Boolean.TRUE__		}_		if (logger.isDebugEnabled()) {_			logger.debug("Invoking destroy method '" + this.destroyMethodName +_					"' on bean with name '" + this.beanName + "'")__		}_		try {_			if (System.getSecurityManager() != null) {_				AccessController.doPrivileged((PrivilegedAction<Object>) () -> {_					ReflectionUtils.makeAccessible(destroyMethod)__					return null__				})__				try {_					AccessController.doPrivileged((PrivilegedExceptionAction<Object>) () ->_						destroyMethod.invoke(bean, args), acc)__				}_				catch (PrivilegedActionException pax) {_					throw (InvocationTargetException) pax.getException()__				}_			}_			else {_				ReflectionUtils.makeAccessible(destroyMethod)__				destroyMethod.invoke(bean, args)__			}_		}_		catch (InvocationTargetException ex) {_			String msg = "Invocation of destroy method '" + this.destroyMethodName +_					"' failed on bean with name '" + this.beanName + "'"__			if (logger.isDebugEnabled()) {_				logger.warn(msg, ex.getTargetException())__			}_			else {_				logger.warn(msg + ": " + ex.getTargetException())__			}_		}_		catch (Throwable ex) {_			logger.error("Couldn't invoke destroy method '" + this.destroyMethodName +_					"' on bean with name '" + this.beanName + "'", ex)__		}_	};invoke,the,specified,custom,destroy,method,on,the,given,bean,p,this,implementation,invokes,a,no,arg,method,if,found,else,checking,for,a,method,with,a,single,boolean,argument,passing,in,true,assuming,a,force,parameter,else,logging,an,error;private,void,invoke,custom,destroy,method,final,method,destroy,method,class,param,types,destroy,method,get,parameter,types,final,object,args,new,object,param,types,length,if,param,types,length,1,args,0,boolean,true,if,logger,is,debug,enabled,logger,debug,invoking,destroy,method,this,destroy,method,name,on,bean,with,name,this,bean,name,try,if,system,get,security,manager,null,access,controller,do,privileged,privileged,action,object,reflection,utils,make,accessible,destroy,method,return,null,try,access,controller,do,privileged,privileged,exception,action,object,destroy,method,invoke,bean,args,acc,catch,privileged,action,exception,pax,throw,invocation,target,exception,pax,get,exception,else,reflection,utils,make,accessible,destroy,method,destroy,method,invoke,bean,args,catch,invocation,target,exception,ex,string,msg,invocation,of,destroy,method,this,destroy,method,name,failed,on,bean,with,name,this,bean,name,if,logger,is,debug,enabled,logger,warn,msg,ex,get,target,exception,else,logger,warn,msg,ex,get,target,exception,catch,throwable,ex,logger,error,couldn,t,invoke,destroy,method,this,destroy,method,name,on,bean,with,name,this,bean,name,ex
DisposableBeanAdapter -> private void invokeCustomDestroyMethod(final Method destroyMethod);1498780456;Invoke the specified custom destroy method on the given bean._<p>This implementation invokes a no-arg method if found, else checking_for a method with a single boolean argument (passing in "true",_assuming a "force" parameter), else logging an error.;private void invokeCustomDestroyMethod(final Method destroyMethod) {_		Class<?>[] paramTypes = destroyMethod.getParameterTypes()__		final Object[] args = new Object[paramTypes.length]__		if (paramTypes.length == 1) {_			args[0] = Boolean.TRUE__		}_		if (logger.isDebugEnabled()) {_			logger.debug("Invoking destroy method '" + this.destroyMethodName +_					"' on bean with name '" + this.beanName + "'")__		}_		try {_			if (System.getSecurityManager() != null) {_				AccessController.doPrivileged((PrivilegedAction<Object>) () -> {_					ReflectionUtils.makeAccessible(destroyMethod)__					return null__				})__				try {_					AccessController.doPrivileged((PrivilegedExceptionAction<Object>) () ->_						destroyMethod.invoke(bean, args), acc)__				}_				catch (PrivilegedActionException pax) {_					throw (InvocationTargetException) pax.getException()__				}_			}_			else {_				ReflectionUtils.makeAccessible(destroyMethod)__				destroyMethod.invoke(bean, args)__			}_		}_		catch (InvocationTargetException ex) {_			String msg = "Invocation of destroy method '" + this.destroyMethodName +_					"' failed on bean with name '" + this.beanName + "'"__			if (logger.isDebugEnabled()) {_				logger.warn(msg, ex.getTargetException())__			}_			else {_				logger.warn(msg + ": " + ex.getTargetException())__			}_		}_		catch (Throwable ex) {_			logger.error("Couldn't invoke destroy method '" + this.destroyMethodName +_					"' on bean with name '" + this.beanName + "'", ex)__		}_	};invoke,the,specified,custom,destroy,method,on,the,given,bean,p,this,implementation,invokes,a,no,arg,method,if,found,else,checking,for,a,method,with,a,single,boolean,argument,passing,in,true,assuming,a,force,parameter,else,logging,an,error;private,void,invoke,custom,destroy,method,final,method,destroy,method,class,param,types,destroy,method,get,parameter,types,final,object,args,new,object,param,types,length,if,param,types,length,1,args,0,boolean,true,if,logger,is,debug,enabled,logger,debug,invoking,destroy,method,this,destroy,method,name,on,bean,with,name,this,bean,name,try,if,system,get,security,manager,null,access,controller,do,privileged,privileged,action,object,reflection,utils,make,accessible,destroy,method,return,null,try,access,controller,do,privileged,privileged,exception,action,object,destroy,method,invoke,bean,args,acc,catch,privileged,action,exception,pax,throw,invocation,target,exception,pax,get,exception,else,reflection,utils,make,accessible,destroy,method,destroy,method,invoke,bean,args,catch,invocation,target,exception,ex,string,msg,invocation,of,destroy,method,this,destroy,method,name,failed,on,bean,with,name,this,bean,name,if,logger,is,debug,enabled,logger,warn,msg,ex,get,target,exception,else,logger,warn,msg,ex,get,target,exception,catch,throwable,ex,logger,error,couldn,t,invoke,destroy,method,this,destroy,method,name,on,bean,with,name,this,bean,name,ex
DisposableBeanAdapter -> private void invokeCustomDestroyMethod(final Method destroyMethod);1530174524;Invoke the specified custom destroy method on the given bean._<p>This implementation invokes a no-arg method if found, else checking_for a method with a single boolean argument (passing in "true",_assuming a "force" parameter), else logging an error.;private void invokeCustomDestroyMethod(final Method destroyMethod) {_		Class<?>[] paramTypes = destroyMethod.getParameterTypes()__		final Object[] args = new Object[paramTypes.length]__		if (paramTypes.length == 1) {_			args[0] = Boolean.TRUE__		}_		if (logger.isDebugEnabled()) {_			logger.debug("Invoking destroy method '" + this.destroyMethodName +_					"' on bean with name '" + this.beanName + "'")__		}_		try {_			if (System.getSecurityManager() != null) {_				AccessController.doPrivileged((PrivilegedAction<Object>) () -> {_					ReflectionUtils.makeAccessible(destroyMethod)__					return null__				})__				try {_					AccessController.doPrivileged((PrivilegedExceptionAction<Object>) () ->_						destroyMethod.invoke(this.bean, args), this.acc)__				}_				catch (PrivilegedActionException pax) {_					throw (InvocationTargetException) pax.getException()__				}_			}_			else {_				ReflectionUtils.makeAccessible(destroyMethod)__				destroyMethod.invoke(this.bean, args)__			}_		}_		catch (InvocationTargetException ex) {_			String msg = "Invocation of destroy method '" + this.destroyMethodName +_					"' failed on bean with name '" + this.beanName + "'"__			if (logger.isDebugEnabled()) {_				logger.warn(msg, ex.getTargetException())__			}_			else {_				logger.warn(msg + ": " + ex.getTargetException())__			}_		}_		catch (Throwable ex) {_			logger.error("Couldn't invoke destroy method '" + this.destroyMethodName +_					"' on bean with name '" + this.beanName + "'", ex)__		}_	};invoke,the,specified,custom,destroy,method,on,the,given,bean,p,this,implementation,invokes,a,no,arg,method,if,found,else,checking,for,a,method,with,a,single,boolean,argument,passing,in,true,assuming,a,force,parameter,else,logging,an,error;private,void,invoke,custom,destroy,method,final,method,destroy,method,class,param,types,destroy,method,get,parameter,types,final,object,args,new,object,param,types,length,if,param,types,length,1,args,0,boolean,true,if,logger,is,debug,enabled,logger,debug,invoking,destroy,method,this,destroy,method,name,on,bean,with,name,this,bean,name,try,if,system,get,security,manager,null,access,controller,do,privileged,privileged,action,object,reflection,utils,make,accessible,destroy,method,return,null,try,access,controller,do,privileged,privileged,exception,action,object,destroy,method,invoke,this,bean,args,this,acc,catch,privileged,action,exception,pax,throw,invocation,target,exception,pax,get,exception,else,reflection,utils,make,accessible,destroy,method,destroy,method,invoke,this,bean,args,catch,invocation,target,exception,ex,string,msg,invocation,of,destroy,method,this,destroy,method,name,failed,on,bean,with,name,this,bean,name,if,logger,is,debug,enabled,logger,warn,msg,ex,get,target,exception,else,logger,warn,msg,ex,get,target,exception,catch,throwable,ex,logger,error,couldn,t,invoke,destroy,method,this,destroy,method,name,on,bean,with,name,this,bean,name,ex
DisposableBeanAdapter -> private void invokeCustomDestroyMethod(final Method destroyMethod);1532091916;Invoke the specified custom destroy method on the given bean._<p>This implementation invokes a no-arg method if found, else checking_for a method with a single boolean argument (passing in "true",_assuming a "force" parameter), else logging an error.;private void invokeCustomDestroyMethod(final Method destroyMethod) {_		Class<?>[] paramTypes = destroyMethod.getParameterTypes()__		final Object[] args = new Object[paramTypes.length]__		if (paramTypes.length == 1) {_			args[0] = Boolean.TRUE__		}_		if (logger.isDebugEnabled()) {_			logger.debug("Invoking destroy method '" + this.destroyMethodName +_					"' on bean with name '" + this.beanName + "'")__		}_		try {_			if (System.getSecurityManager() != null) {_				AccessController.doPrivileged((PrivilegedAction<Object>) () -> {_					ReflectionUtils.makeAccessible(destroyMethod)__					return null__				})__				try {_					AccessController.doPrivileged((PrivilegedExceptionAction<Object>) () ->_						destroyMethod.invoke(this.bean, args), this.acc)__				}_				catch (PrivilegedActionException pax) {_					throw (InvocationTargetException) pax.getException()__				}_			}_			else {_				ReflectionUtils.makeAccessible(destroyMethod)__				destroyMethod.invoke(this.bean, args)__			}_		}_		catch (InvocationTargetException ex) {_			String msg = "Destroy method '" + this.destroyMethodName + "' on bean with name '" +_					this.beanName + "' threw an exception"__			if (logger.isDebugEnabled()) {_				logger.warn(msg, ex.getTargetException())__			}_			else {_				logger.warn(msg + ": " + ex.getTargetException())__			}_		}_		catch (Throwable ex) {_			logger.warn("Failed to invoke destroy method '" + this.destroyMethodName +_					"' on bean with name '" + this.beanName + "'", ex)__		}_	};invoke,the,specified,custom,destroy,method,on,the,given,bean,p,this,implementation,invokes,a,no,arg,method,if,found,else,checking,for,a,method,with,a,single,boolean,argument,passing,in,true,assuming,a,force,parameter,else,logging,an,error;private,void,invoke,custom,destroy,method,final,method,destroy,method,class,param,types,destroy,method,get,parameter,types,final,object,args,new,object,param,types,length,if,param,types,length,1,args,0,boolean,true,if,logger,is,debug,enabled,logger,debug,invoking,destroy,method,this,destroy,method,name,on,bean,with,name,this,bean,name,try,if,system,get,security,manager,null,access,controller,do,privileged,privileged,action,object,reflection,utils,make,accessible,destroy,method,return,null,try,access,controller,do,privileged,privileged,exception,action,object,destroy,method,invoke,this,bean,args,this,acc,catch,privileged,action,exception,pax,throw,invocation,target,exception,pax,get,exception,else,reflection,utils,make,accessible,destroy,method,destroy,method,invoke,this,bean,args,catch,invocation,target,exception,ex,string,msg,destroy,method,this,destroy,method,name,on,bean,with,name,this,bean,name,threw,an,exception,if,logger,is,debug,enabled,logger,warn,msg,ex,get,target,exception,else,logger,warn,msg,ex,get,target,exception,catch,throwable,ex,logger,warn,failed,to,invoke,destroy,method,this,destroy,method,name,on,bean,with,name,this,bean,name,ex
DisposableBeanAdapter -> private void invokeCustomDestroyMethod(final Method destroyMethod);1532706365;Invoke the specified custom destroy method on the given bean._<p>This implementation invokes a no-arg method if found, else checking_for a method with a single boolean argument (passing in "true",_assuming a "force" parameter), else logging an error.;private void invokeCustomDestroyMethod(final Method destroyMethod) {_		Class<?>[] paramTypes = destroyMethod.getParameterTypes()__		final Object[] args = new Object[paramTypes.length]__		if (paramTypes.length == 1) {_			args[0] = Boolean.TRUE__		}_		if (logger.isTraceEnabled()) {_			logger.trace("Invoking destroy method '" + this.destroyMethodName +_					"' on bean with name '" + this.beanName + "'")__		}_		try {_			if (System.getSecurityManager() != null) {_				AccessController.doPrivileged((PrivilegedAction<Object>) () -> {_					ReflectionUtils.makeAccessible(destroyMethod)__					return null__				})__				try {_					AccessController.doPrivileged((PrivilegedExceptionAction<Object>) () ->_						destroyMethod.invoke(this.bean, args), this.acc)__				}_				catch (PrivilegedActionException pax) {_					throw (InvocationTargetException) pax.getException()__				}_			}_			else {_				ReflectionUtils.makeAccessible(destroyMethod)__				destroyMethod.invoke(this.bean, args)__			}_		}_		catch (InvocationTargetException ex) {_			String msg = "Destroy method '" + this.destroyMethodName + "' on bean with name '" +_					this.beanName + "' threw an exception"__			if (logger.isDebugEnabled()) {_				logger.info(msg, ex.getTargetException())__			}_			else {_				logger.info(msg + ": " + ex.getTargetException())__			}_		}_		catch (Throwable ex) {_			logger.info("Failed to invoke destroy method '" + this.destroyMethodName +_					"' on bean with name '" + this.beanName + "'", ex)__		}_	};invoke,the,specified,custom,destroy,method,on,the,given,bean,p,this,implementation,invokes,a,no,arg,method,if,found,else,checking,for,a,method,with,a,single,boolean,argument,passing,in,true,assuming,a,force,parameter,else,logging,an,error;private,void,invoke,custom,destroy,method,final,method,destroy,method,class,param,types,destroy,method,get,parameter,types,final,object,args,new,object,param,types,length,if,param,types,length,1,args,0,boolean,true,if,logger,is,trace,enabled,logger,trace,invoking,destroy,method,this,destroy,method,name,on,bean,with,name,this,bean,name,try,if,system,get,security,manager,null,access,controller,do,privileged,privileged,action,object,reflection,utils,make,accessible,destroy,method,return,null,try,access,controller,do,privileged,privileged,exception,action,object,destroy,method,invoke,this,bean,args,this,acc,catch,privileged,action,exception,pax,throw,invocation,target,exception,pax,get,exception,else,reflection,utils,make,accessible,destroy,method,destroy,method,invoke,this,bean,args,catch,invocation,target,exception,ex,string,msg,destroy,method,this,destroy,method,name,on,bean,with,name,this,bean,name,threw,an,exception,if,logger,is,debug,enabled,logger,info,msg,ex,get,target,exception,else,logger,info,msg,ex,get,target,exception,catch,throwable,ex,logger,info,failed,to,invoke,destroy,method,this,destroy,method,name,on,bean,with,name,this,bean,name,ex
DisposableBeanAdapter -> private void invokeCustomDestroyMethod(final Method destroyMethod);1537391140;Invoke the specified custom destroy method on the given bean._<p>This implementation invokes a no-arg method if found, else checking_for a method with a single boolean argument (passing in "true",_assuming a "force" parameter), else logging an error.;private void invokeCustomDestroyMethod(final Method destroyMethod) {_		Class<?>[] paramTypes = destroyMethod.getParameterTypes()__		final Object[] args = new Object[paramTypes.length]__		if (paramTypes.length == 1) {_			args[0] = Boolean.TRUE__		}_		if (logger.isTraceEnabled()) {_			logger.trace("Invoking destroy method '" + this.destroyMethodName +_					"' on bean with name '" + this.beanName + "'")__		}_		try {_			if (System.getSecurityManager() != null) {_				AccessController.doPrivileged((PrivilegedAction<Object>) () -> {_					ReflectionUtils.makeAccessible(destroyMethod)__					return null__				})__				try {_					AccessController.doPrivileged((PrivilegedExceptionAction<Object>) () ->_						destroyMethod.invoke(this.bean, args), this.acc)__				}_				catch (PrivilegedActionException pax) {_					throw (InvocationTargetException) pax.getException()__				}_			}_			else {_				ReflectionUtils.makeAccessible(destroyMethod)__				destroyMethod.invoke(this.bean, args)__			}_		}_		catch (InvocationTargetException ex) {_			String msg = "Destroy method '" + this.destroyMethodName + "' on bean with name '" +_					this.beanName + "' threw an exception"__			if (logger.isDebugEnabled()) {_				logger.info(msg, ex.getTargetException())__			}_			else {_				logger.info(msg + ": " + ex.getTargetException())__			}_		}_		catch (Throwable ex) {_			logger.info("Failed to invoke destroy method '" + this.destroyMethodName +_					"' on bean with name '" + this.beanName + "'", ex)__		}_	};invoke,the,specified,custom,destroy,method,on,the,given,bean,p,this,implementation,invokes,a,no,arg,method,if,found,else,checking,for,a,method,with,a,single,boolean,argument,passing,in,true,assuming,a,force,parameter,else,logging,an,error;private,void,invoke,custom,destroy,method,final,method,destroy,method,class,param,types,destroy,method,get,parameter,types,final,object,args,new,object,param,types,length,if,param,types,length,1,args,0,boolean,true,if,logger,is,trace,enabled,logger,trace,invoking,destroy,method,this,destroy,method,name,on,bean,with,name,this,bean,name,try,if,system,get,security,manager,null,access,controller,do,privileged,privileged,action,object,reflection,utils,make,accessible,destroy,method,return,null,try,access,controller,do,privileged,privileged,exception,action,object,destroy,method,invoke,this,bean,args,this,acc,catch,privileged,action,exception,pax,throw,invocation,target,exception,pax,get,exception,else,reflection,utils,make,accessible,destroy,method,destroy,method,invoke,this,bean,args,catch,invocation,target,exception,ex,string,msg,destroy,method,this,destroy,method,name,on,bean,with,name,this,bean,name,threw,an,exception,if,logger,is,debug,enabled,logger,info,msg,ex,get,target,exception,else,logger,info,msg,ex,get,target,exception,catch,throwable,ex,logger,info,failed,to,invoke,destroy,method,this,destroy,method,name,on,bean,with,name,this,bean,name,ex
DisposableBeanAdapter -> @Nullable 	private List<DestructionAwareBeanPostProcessor> filterPostProcessors(List<BeanPostProcessor> processors, Object bean);1496837955;Search for all DestructionAwareBeanPostProcessors in the List._@param processors the List to search_@return the filtered List of DestructionAwareBeanPostProcessors;@Nullable_	private List<DestructionAwareBeanPostProcessor> filterPostProcessors(List<BeanPostProcessor> processors, Object bean) {_		List<DestructionAwareBeanPostProcessor> filteredPostProcessors = null__		if (!CollectionUtils.isEmpty(processors)) {_			filteredPostProcessors = new ArrayList<>(processors.size())__			for (BeanPostProcessor processor : processors) {_				if (processor instanceof DestructionAwareBeanPostProcessor) {_					DestructionAwareBeanPostProcessor dabpp = (DestructionAwareBeanPostProcessor) processor__					if (dabpp.requiresDestruction(bean)) {_						filteredPostProcessors.add(dabpp)__					}_				}_			}_		}_		return filteredPostProcessors__	};search,for,all,destruction,aware,bean,post,processors,in,the,list,param,processors,the,list,to,search,return,the,filtered,list,of,destruction,aware,bean,post,processors;nullable,private,list,destruction,aware,bean,post,processor,filter,post,processors,list,bean,post,processor,processors,object,bean,list,destruction,aware,bean,post,processor,filtered,post,processors,null,if,collection,utils,is,empty,processors,filtered,post,processors,new,array,list,processors,size,for,bean,post,processor,processor,processors,if,processor,instanceof,destruction,aware,bean,post,processor,destruction,aware,bean,post,processor,dabpp,destruction,aware,bean,post,processor,processor,if,dabpp,requires,destruction,bean,filtered,post,processors,add,dabpp,return,filtered,post,processors
DisposableBeanAdapter -> @Nullable 	private List<DestructionAwareBeanPostProcessor> filterPostProcessors(List<BeanPostProcessor> processors, Object bean);1498780456;Search for all DestructionAwareBeanPostProcessors in the List._@param processors the List to search_@return the filtered List of DestructionAwareBeanPostProcessors;@Nullable_	private List<DestructionAwareBeanPostProcessor> filterPostProcessors(List<BeanPostProcessor> processors, Object bean) {_		List<DestructionAwareBeanPostProcessor> filteredPostProcessors = null__		if (!CollectionUtils.isEmpty(processors)) {_			filteredPostProcessors = new ArrayList<>(processors.size())__			for (BeanPostProcessor processor : processors) {_				if (processor instanceof DestructionAwareBeanPostProcessor) {_					DestructionAwareBeanPostProcessor dabpp = (DestructionAwareBeanPostProcessor) processor__					if (dabpp.requiresDestruction(bean)) {_						filteredPostProcessors.add(dabpp)__					}_				}_			}_		}_		return filteredPostProcessors__	};search,for,all,destruction,aware,bean,post,processors,in,the,list,param,processors,the,list,to,search,return,the,filtered,list,of,destruction,aware,bean,post,processors;nullable,private,list,destruction,aware,bean,post,processor,filter,post,processors,list,bean,post,processor,processors,object,bean,list,destruction,aware,bean,post,processor,filtered,post,processors,null,if,collection,utils,is,empty,processors,filtered,post,processors,new,array,list,processors,size,for,bean,post,processor,processor,processors,if,processor,instanceof,destruction,aware,bean,post,processor,destruction,aware,bean,post,processor,dabpp,destruction,aware,bean,post,processor,processor,if,dabpp,requires,destruction,bean,filtered,post,processors,add,dabpp,return,filtered,post,processors
DisposableBeanAdapter -> @Nullable 	private List<DestructionAwareBeanPostProcessor> filterPostProcessors(List<BeanPostProcessor> processors, Object bean);1530174524;Search for all DestructionAwareBeanPostProcessors in the List._@param processors the List to search_@return the filtered List of DestructionAwareBeanPostProcessors;@Nullable_	private List<DestructionAwareBeanPostProcessor> filterPostProcessors(List<BeanPostProcessor> processors, Object bean) {_		List<DestructionAwareBeanPostProcessor> filteredPostProcessors = null__		if (!CollectionUtils.isEmpty(processors)) {_			filteredPostProcessors = new ArrayList<>(processors.size())__			for (BeanPostProcessor processor : processors) {_				if (processor instanceof DestructionAwareBeanPostProcessor) {_					DestructionAwareBeanPostProcessor dabpp = (DestructionAwareBeanPostProcessor) processor__					if (dabpp.requiresDestruction(bean)) {_						filteredPostProcessors.add(dabpp)__					}_				}_			}_		}_		return filteredPostProcessors__	};search,for,all,destruction,aware,bean,post,processors,in,the,list,param,processors,the,list,to,search,return,the,filtered,list,of,destruction,aware,bean,post,processors;nullable,private,list,destruction,aware,bean,post,processor,filter,post,processors,list,bean,post,processor,processors,object,bean,list,destruction,aware,bean,post,processor,filtered,post,processors,null,if,collection,utils,is,empty,processors,filtered,post,processors,new,array,list,processors,size,for,bean,post,processor,processor,processors,if,processor,instanceof,destruction,aware,bean,post,processor,destruction,aware,bean,post,processor,dabpp,destruction,aware,bean,post,processor,processor,if,dabpp,requires,destruction,bean,filtered,post,processors,add,dabpp,return,filtered,post,processors
DisposableBeanAdapter -> @Nullable 	private List<DestructionAwareBeanPostProcessor> filterPostProcessors(List<BeanPostProcessor> processors, Object bean);1532091916;Search for all DestructionAwareBeanPostProcessors in the List._@param processors the List to search_@return the filtered List of DestructionAwareBeanPostProcessors;@Nullable_	private List<DestructionAwareBeanPostProcessor> filterPostProcessors(List<BeanPostProcessor> processors, Object bean) {_		List<DestructionAwareBeanPostProcessor> filteredPostProcessors = null__		if (!CollectionUtils.isEmpty(processors)) {_			filteredPostProcessors = new ArrayList<>(processors.size())__			for (BeanPostProcessor processor : processors) {_				if (processor instanceof DestructionAwareBeanPostProcessor) {_					DestructionAwareBeanPostProcessor dabpp = (DestructionAwareBeanPostProcessor) processor__					if (dabpp.requiresDestruction(bean)) {_						filteredPostProcessors.add(dabpp)__					}_				}_			}_		}_		return filteredPostProcessors__	};search,for,all,destruction,aware,bean,post,processors,in,the,list,param,processors,the,list,to,search,return,the,filtered,list,of,destruction,aware,bean,post,processors;nullable,private,list,destruction,aware,bean,post,processor,filter,post,processors,list,bean,post,processor,processors,object,bean,list,destruction,aware,bean,post,processor,filtered,post,processors,null,if,collection,utils,is,empty,processors,filtered,post,processors,new,array,list,processors,size,for,bean,post,processor,processor,processors,if,processor,instanceof,destruction,aware,bean,post,processor,destruction,aware,bean,post,processor,dabpp,destruction,aware,bean,post,processor,processor,if,dabpp,requires,destruction,bean,filtered,post,processors,add,dabpp,return,filtered,post,processors
DisposableBeanAdapter -> @Nullable 	private List<DestructionAwareBeanPostProcessor> filterPostProcessors(List<BeanPostProcessor> processors, Object bean);1532706365;Search for all DestructionAwareBeanPostProcessors in the List._@param processors the List to search_@return the filtered List of DestructionAwareBeanPostProcessors;@Nullable_	private List<DestructionAwareBeanPostProcessor> filterPostProcessors(List<BeanPostProcessor> processors, Object bean) {_		List<DestructionAwareBeanPostProcessor> filteredPostProcessors = null__		if (!CollectionUtils.isEmpty(processors)) {_			filteredPostProcessors = new ArrayList<>(processors.size())__			for (BeanPostProcessor processor : processors) {_				if (processor instanceof DestructionAwareBeanPostProcessor) {_					DestructionAwareBeanPostProcessor dabpp = (DestructionAwareBeanPostProcessor) processor__					if (dabpp.requiresDestruction(bean)) {_						filteredPostProcessors.add(dabpp)__					}_				}_			}_		}_		return filteredPostProcessors__	};search,for,all,destruction,aware,bean,post,processors,in,the,list,param,processors,the,list,to,search,return,the,filtered,list,of,destruction,aware,bean,post,processors;nullable,private,list,destruction,aware,bean,post,processor,filter,post,processors,list,bean,post,processor,processors,object,bean,list,destruction,aware,bean,post,processor,filtered,post,processors,null,if,collection,utils,is,empty,processors,filtered,post,processors,new,array,list,processors,size,for,bean,post,processor,processor,processors,if,processor,instanceof,destruction,aware,bean,post,processor,destruction,aware,bean,post,processor,dabpp,destruction,aware,bean,post,processor,processor,if,dabpp,requires,destruction,bean,filtered,post,processors,add,dabpp,return,filtered,post,processors
DisposableBeanAdapter -> @Nullable 	private List<DestructionAwareBeanPostProcessor> filterPostProcessors(List<BeanPostProcessor> processors, Object bean);1537391140;Search for all DestructionAwareBeanPostProcessors in the List._@param processors the List to search_@return the filtered List of DestructionAwareBeanPostProcessors;@Nullable_	private List<DestructionAwareBeanPostProcessor> filterPostProcessors(List<BeanPostProcessor> processors, Object bean) {_		List<DestructionAwareBeanPostProcessor> filteredPostProcessors = null__		if (!CollectionUtils.isEmpty(processors)) {_			filteredPostProcessors = new ArrayList<>(processors.size())__			for (BeanPostProcessor processor : processors) {_				if (processor instanceof DestructionAwareBeanPostProcessor) {_					DestructionAwareBeanPostProcessor dabpp = (DestructionAwareBeanPostProcessor) processor__					if (dabpp.requiresDestruction(bean)) {_						filteredPostProcessors.add(dabpp)__					}_				}_			}_		}_		return filteredPostProcessors__	};search,for,all,destruction,aware,bean,post,processors,in,the,list,param,processors,the,list,to,search,return,the,filtered,list,of,destruction,aware,bean,post,processors;nullable,private,list,destruction,aware,bean,post,processor,filter,post,processors,list,bean,post,processor,processors,object,bean,list,destruction,aware,bean,post,processor,filtered,post,processors,null,if,collection,utils,is,empty,processors,filtered,post,processors,new,array,list,processors,size,for,bean,post,processor,processor,processors,if,processor,instanceof,destruction,aware,bean,post,processor,destruction,aware,bean,post,processor,dabpp,destruction,aware,bean,post,processor,processor,if,dabpp,requires,destruction,bean,filtered,post,processors,add,dabpp,return,filtered,post,processors
DisposableBeanAdapter -> public DisposableBeanAdapter(Object bean, String beanName, RootBeanDefinition beanDefinition, 			List<BeanPostProcessor> postProcessors, @Nullable AccessControlContext acc);1496837955;Create a new DisposableBeanAdapter for the given bean._@param bean the bean instance (never {@code null})_@param beanName the name of the bean_@param beanDefinition the merged bean definition_@param postProcessors the List of BeanPostProcessors_(potentially DestructionAwareBeanPostProcessor), if any;public DisposableBeanAdapter(Object bean, String beanName, RootBeanDefinition beanDefinition,_			List<BeanPostProcessor> postProcessors, @Nullable AccessControlContext acc) {__		Assert.notNull(bean, "Disposable bean must not be null")__		this.bean = bean__		this.beanName = beanName__		this.invokeDisposableBean =_				(this.bean instanceof DisposableBean && !beanDefinition.isExternallyManagedDestroyMethod("destroy"))__		this.nonPublicAccessAllowed = beanDefinition.isNonPublicAccessAllowed()__		this.acc = acc__		String destroyMethodName = inferDestroyMethodIfNecessary(bean, beanDefinition)__		if (destroyMethodName != null && !(this.invokeDisposableBean && "destroy".equals(destroyMethodName)) &&_				!beanDefinition.isExternallyManagedDestroyMethod(destroyMethodName)) {_			this.destroyMethodName = destroyMethodName__			this.destroyMethod = determineDestroyMethod()__			if (this.destroyMethod == null) {_				if (beanDefinition.isEnforceDestroyMethod()) {_					throw new BeanDefinitionValidationException("Couldn't find a destroy method named '" +_							destroyMethodName + "' on bean with name '" + beanName + "'")__				}_			}_			else {_				Class<?>[] paramTypes = this.destroyMethod.getParameterTypes()__				if (paramTypes.length > 1) {_					throw new BeanDefinitionValidationException("Method '" + destroyMethodName + "' of bean '" +_							beanName + "' has more than one parameter - not supported as destroy method")__				}_				else if (paramTypes.length == 1 && boolean.class != paramTypes[0]) {_					throw new BeanDefinitionValidationException("Method '" + destroyMethodName + "' of bean '" +_							beanName + "' has a non-boolean parameter - not supported as destroy method")__				}_			}_		}_		this.beanPostProcessors = filterPostProcessors(postProcessors, bean)__	};create,a,new,disposable,bean,adapter,for,the,given,bean,param,bean,the,bean,instance,never,code,null,param,bean,name,the,name,of,the,bean,param,bean,definition,the,merged,bean,definition,param,post,processors,the,list,of,bean,post,processors,potentially,destruction,aware,bean,post,processor,if,any;public,disposable,bean,adapter,object,bean,string,bean,name,root,bean,definition,bean,definition,list,bean,post,processor,post,processors,nullable,access,control,context,acc,assert,not,null,bean,disposable,bean,must,not,be,null,this,bean,bean,this,bean,name,bean,name,this,invoke,disposable,bean,this,bean,instanceof,disposable,bean,bean,definition,is,externally,managed,destroy,method,destroy,this,non,public,access,allowed,bean,definition,is,non,public,access,allowed,this,acc,acc,string,destroy,method,name,infer,destroy,method,if,necessary,bean,bean,definition,if,destroy,method,name,null,this,invoke,disposable,bean,destroy,equals,destroy,method,name,bean,definition,is,externally,managed,destroy,method,destroy,method,name,this,destroy,method,name,destroy,method,name,this,destroy,method,determine,destroy,method,if,this,destroy,method,null,if,bean,definition,is,enforce,destroy,method,throw,new,bean,definition,validation,exception,couldn,t,find,a,destroy,method,named,destroy,method,name,on,bean,with,name,bean,name,else,class,param,types,this,destroy,method,get,parameter,types,if,param,types,length,1,throw,new,bean,definition,validation,exception,method,destroy,method,name,of,bean,bean,name,has,more,than,one,parameter,not,supported,as,destroy,method,else,if,param,types,length,1,boolean,class,param,types,0,throw,new,bean,definition,validation,exception,method,destroy,method,name,of,bean,bean,name,has,a,non,boolean,parameter,not,supported,as,destroy,method,this,bean,post,processors,filter,post,processors,post,processors,bean
DisposableBeanAdapter -> public DisposableBeanAdapter(Object bean, String beanName, RootBeanDefinition beanDefinition, 			List<BeanPostProcessor> postProcessors, @Nullable AccessControlContext acc);1498780456;Create a new DisposableBeanAdapter for the given bean._@param bean the bean instance (never {@code null})_@param beanName the name of the bean_@param beanDefinition the merged bean definition_@param postProcessors the List of BeanPostProcessors_(potentially DestructionAwareBeanPostProcessor), if any;public DisposableBeanAdapter(Object bean, String beanName, RootBeanDefinition beanDefinition,_			List<BeanPostProcessor> postProcessors, @Nullable AccessControlContext acc) {__		Assert.notNull(bean, "Disposable bean must not be null")__		this.bean = bean__		this.beanName = beanName__		this.invokeDisposableBean =_				(this.bean instanceof DisposableBean && !beanDefinition.isExternallyManagedDestroyMethod("destroy"))__		this.nonPublicAccessAllowed = beanDefinition.isNonPublicAccessAllowed()__		this.acc = acc__		String destroyMethodName = inferDestroyMethodIfNecessary(bean, beanDefinition)__		if (destroyMethodName != null && !(this.invokeDisposableBean && "destroy".equals(destroyMethodName)) &&_				!beanDefinition.isExternallyManagedDestroyMethod(destroyMethodName)) {_			this.destroyMethodName = destroyMethodName__			this.destroyMethod = determineDestroyMethod(destroyMethodName)__			if (this.destroyMethod == null) {_				if (beanDefinition.isEnforceDestroyMethod()) {_					throw new BeanDefinitionValidationException("Couldn't find a destroy method named '" +_							destroyMethodName + "' on bean with name '" + beanName + "'")__				}_			}_			else {_				Class<?>[] paramTypes = this.destroyMethod.getParameterTypes()__				if (paramTypes.length > 1) {_					throw new BeanDefinitionValidationException("Method '" + destroyMethodName + "' of bean '" +_							beanName + "' has more than one parameter - not supported as destroy method")__				}_				else if (paramTypes.length == 1 && boolean.class != paramTypes[0]) {_					throw new BeanDefinitionValidationException("Method '" + destroyMethodName + "' of bean '" +_							beanName + "' has a non-boolean parameter - not supported as destroy method")__				}_			}_		}_		this.beanPostProcessors = filterPostProcessors(postProcessors, bean)__	};create,a,new,disposable,bean,adapter,for,the,given,bean,param,bean,the,bean,instance,never,code,null,param,bean,name,the,name,of,the,bean,param,bean,definition,the,merged,bean,definition,param,post,processors,the,list,of,bean,post,processors,potentially,destruction,aware,bean,post,processor,if,any;public,disposable,bean,adapter,object,bean,string,bean,name,root,bean,definition,bean,definition,list,bean,post,processor,post,processors,nullable,access,control,context,acc,assert,not,null,bean,disposable,bean,must,not,be,null,this,bean,bean,this,bean,name,bean,name,this,invoke,disposable,bean,this,bean,instanceof,disposable,bean,bean,definition,is,externally,managed,destroy,method,destroy,this,non,public,access,allowed,bean,definition,is,non,public,access,allowed,this,acc,acc,string,destroy,method,name,infer,destroy,method,if,necessary,bean,bean,definition,if,destroy,method,name,null,this,invoke,disposable,bean,destroy,equals,destroy,method,name,bean,definition,is,externally,managed,destroy,method,destroy,method,name,this,destroy,method,name,destroy,method,name,this,destroy,method,determine,destroy,method,destroy,method,name,if,this,destroy,method,null,if,bean,definition,is,enforce,destroy,method,throw,new,bean,definition,validation,exception,couldn,t,find,a,destroy,method,named,destroy,method,name,on,bean,with,name,bean,name,else,class,param,types,this,destroy,method,get,parameter,types,if,param,types,length,1,throw,new,bean,definition,validation,exception,method,destroy,method,name,of,bean,bean,name,has,more,than,one,parameter,not,supported,as,destroy,method,else,if,param,types,length,1,boolean,class,param,types,0,throw,new,bean,definition,validation,exception,method,destroy,method,name,of,bean,bean,name,has,a,non,boolean,parameter,not,supported,as,destroy,method,this,bean,post,processors,filter,post,processors,post,processors,bean
DisposableBeanAdapter -> public DisposableBeanAdapter(Object bean, String beanName, RootBeanDefinition beanDefinition, 			List<BeanPostProcessor> postProcessors, @Nullable AccessControlContext acc);1530174524;Create a new DisposableBeanAdapter for the given bean._@param bean the bean instance (never {@code null})_@param beanName the name of the bean_@param beanDefinition the merged bean definition_@param postProcessors the List of BeanPostProcessors_(potentially DestructionAwareBeanPostProcessor), if any;public DisposableBeanAdapter(Object bean, String beanName, RootBeanDefinition beanDefinition,_			List<BeanPostProcessor> postProcessors, @Nullable AccessControlContext acc) {__		Assert.notNull(bean, "Disposable bean must not be null")__		this.bean = bean__		this.beanName = beanName__		this.invokeDisposableBean =_				(this.bean instanceof DisposableBean && !beanDefinition.isExternallyManagedDestroyMethod("destroy"))__		this.nonPublicAccessAllowed = beanDefinition.isNonPublicAccessAllowed()__		this.acc = acc__		String destroyMethodName = inferDestroyMethodIfNecessary(bean, beanDefinition)__		if (destroyMethodName != null && !(this.invokeDisposableBean && "destroy".equals(destroyMethodName)) &&_				!beanDefinition.isExternallyManagedDestroyMethod(destroyMethodName)) {_			this.destroyMethodName = destroyMethodName__			this.destroyMethod = determineDestroyMethod(destroyMethodName)__			if (this.destroyMethod == null) {_				if (beanDefinition.isEnforceDestroyMethod()) {_					throw new BeanDefinitionValidationException("Couldn't find a destroy method named '" +_							destroyMethodName + "' on bean with name '" + beanName + "'")__				}_			}_			else {_				Class<?>[] paramTypes = this.destroyMethod.getParameterTypes()__				if (paramTypes.length > 1) {_					throw new BeanDefinitionValidationException("Method '" + destroyMethodName + "' of bean '" +_							beanName + "' has more than one parameter - not supported as destroy method")__				}_				else if (paramTypes.length == 1 && boolean.class != paramTypes[0]) {_					throw new BeanDefinitionValidationException("Method '" + destroyMethodName + "' of bean '" +_							beanName + "' has a non-boolean parameter - not supported as destroy method")__				}_			}_		}_		this.beanPostProcessors = filterPostProcessors(postProcessors, bean)__	};create,a,new,disposable,bean,adapter,for,the,given,bean,param,bean,the,bean,instance,never,code,null,param,bean,name,the,name,of,the,bean,param,bean,definition,the,merged,bean,definition,param,post,processors,the,list,of,bean,post,processors,potentially,destruction,aware,bean,post,processor,if,any;public,disposable,bean,adapter,object,bean,string,bean,name,root,bean,definition,bean,definition,list,bean,post,processor,post,processors,nullable,access,control,context,acc,assert,not,null,bean,disposable,bean,must,not,be,null,this,bean,bean,this,bean,name,bean,name,this,invoke,disposable,bean,this,bean,instanceof,disposable,bean,bean,definition,is,externally,managed,destroy,method,destroy,this,non,public,access,allowed,bean,definition,is,non,public,access,allowed,this,acc,acc,string,destroy,method,name,infer,destroy,method,if,necessary,bean,bean,definition,if,destroy,method,name,null,this,invoke,disposable,bean,destroy,equals,destroy,method,name,bean,definition,is,externally,managed,destroy,method,destroy,method,name,this,destroy,method,name,destroy,method,name,this,destroy,method,determine,destroy,method,destroy,method,name,if,this,destroy,method,null,if,bean,definition,is,enforce,destroy,method,throw,new,bean,definition,validation,exception,couldn,t,find,a,destroy,method,named,destroy,method,name,on,bean,with,name,bean,name,else,class,param,types,this,destroy,method,get,parameter,types,if,param,types,length,1,throw,new,bean,definition,validation,exception,method,destroy,method,name,of,bean,bean,name,has,more,than,one,parameter,not,supported,as,destroy,method,else,if,param,types,length,1,boolean,class,param,types,0,throw,new,bean,definition,validation,exception,method,destroy,method,name,of,bean,bean,name,has,a,non,boolean,parameter,not,supported,as,destroy,method,this,bean,post,processors,filter,post,processors,post,processors,bean
DisposableBeanAdapter -> public DisposableBeanAdapter(Object bean, String beanName, RootBeanDefinition beanDefinition, 			List<BeanPostProcessor> postProcessors, @Nullable AccessControlContext acc);1532091916;Create a new DisposableBeanAdapter for the given bean._@param bean the bean instance (never {@code null})_@param beanName the name of the bean_@param beanDefinition the merged bean definition_@param postProcessors the List of BeanPostProcessors_(potentially DestructionAwareBeanPostProcessor), if any;public DisposableBeanAdapter(Object bean, String beanName, RootBeanDefinition beanDefinition,_			List<BeanPostProcessor> postProcessors, @Nullable AccessControlContext acc) {__		Assert.notNull(bean, "Disposable bean must not be null")__		this.bean = bean__		this.beanName = beanName__		this.invokeDisposableBean =_				(this.bean instanceof DisposableBean && !beanDefinition.isExternallyManagedDestroyMethod("destroy"))__		this.nonPublicAccessAllowed = beanDefinition.isNonPublicAccessAllowed()__		this.acc = acc__		String destroyMethodName = inferDestroyMethodIfNecessary(bean, beanDefinition)__		if (destroyMethodName != null && !(this.invokeDisposableBean && "destroy".equals(destroyMethodName)) &&_				!beanDefinition.isExternallyManagedDestroyMethod(destroyMethodName)) {_			this.destroyMethodName = destroyMethodName__			this.destroyMethod = determineDestroyMethod(destroyMethodName)__			if (this.destroyMethod == null) {_				if (beanDefinition.isEnforceDestroyMethod()) {_					throw new BeanDefinitionValidationException("Couldn't find a destroy method named '" +_							destroyMethodName + "' on bean with name '" + beanName + "'")__				}_			}_			else {_				Class<?>[] paramTypes = this.destroyMethod.getParameterTypes()__				if (paramTypes.length > 1) {_					throw new BeanDefinitionValidationException("Method '" + destroyMethodName + "' of bean '" +_							beanName + "' has more than one parameter - not supported as destroy method")__				}_				else if (paramTypes.length == 1 && boolean.class != paramTypes[0]) {_					throw new BeanDefinitionValidationException("Method '" + destroyMethodName + "' of bean '" +_							beanName + "' has a non-boolean parameter - not supported as destroy method")__				}_			}_		}_		this.beanPostProcessors = filterPostProcessors(postProcessors, bean)__	};create,a,new,disposable,bean,adapter,for,the,given,bean,param,bean,the,bean,instance,never,code,null,param,bean,name,the,name,of,the,bean,param,bean,definition,the,merged,bean,definition,param,post,processors,the,list,of,bean,post,processors,potentially,destruction,aware,bean,post,processor,if,any;public,disposable,bean,adapter,object,bean,string,bean,name,root,bean,definition,bean,definition,list,bean,post,processor,post,processors,nullable,access,control,context,acc,assert,not,null,bean,disposable,bean,must,not,be,null,this,bean,bean,this,bean,name,bean,name,this,invoke,disposable,bean,this,bean,instanceof,disposable,bean,bean,definition,is,externally,managed,destroy,method,destroy,this,non,public,access,allowed,bean,definition,is,non,public,access,allowed,this,acc,acc,string,destroy,method,name,infer,destroy,method,if,necessary,bean,bean,definition,if,destroy,method,name,null,this,invoke,disposable,bean,destroy,equals,destroy,method,name,bean,definition,is,externally,managed,destroy,method,destroy,method,name,this,destroy,method,name,destroy,method,name,this,destroy,method,determine,destroy,method,destroy,method,name,if,this,destroy,method,null,if,bean,definition,is,enforce,destroy,method,throw,new,bean,definition,validation,exception,couldn,t,find,a,destroy,method,named,destroy,method,name,on,bean,with,name,bean,name,else,class,param,types,this,destroy,method,get,parameter,types,if,param,types,length,1,throw,new,bean,definition,validation,exception,method,destroy,method,name,of,bean,bean,name,has,more,than,one,parameter,not,supported,as,destroy,method,else,if,param,types,length,1,boolean,class,param,types,0,throw,new,bean,definition,validation,exception,method,destroy,method,name,of,bean,bean,name,has,a,non,boolean,parameter,not,supported,as,destroy,method,this,bean,post,processors,filter,post,processors,post,processors,bean
DisposableBeanAdapter -> public DisposableBeanAdapter(Object bean, String beanName, RootBeanDefinition beanDefinition, 			List<BeanPostProcessor> postProcessors, @Nullable AccessControlContext acc);1532706365;Create a new DisposableBeanAdapter for the given bean._@param bean the bean instance (never {@code null})_@param beanName the name of the bean_@param beanDefinition the merged bean definition_@param postProcessors the List of BeanPostProcessors_(potentially DestructionAwareBeanPostProcessor), if any;public DisposableBeanAdapter(Object bean, String beanName, RootBeanDefinition beanDefinition,_			List<BeanPostProcessor> postProcessors, @Nullable AccessControlContext acc) {__		Assert.notNull(bean, "Disposable bean must not be null")__		this.bean = bean__		this.beanName = beanName__		this.invokeDisposableBean =_				(this.bean instanceof DisposableBean && !beanDefinition.isExternallyManagedDestroyMethod("destroy"))__		this.nonPublicAccessAllowed = beanDefinition.isNonPublicAccessAllowed()__		this.acc = acc__		String destroyMethodName = inferDestroyMethodIfNecessary(bean, beanDefinition)__		if (destroyMethodName != null && !(this.invokeDisposableBean && "destroy".equals(destroyMethodName)) &&_				!beanDefinition.isExternallyManagedDestroyMethod(destroyMethodName)) {_			this.destroyMethodName = destroyMethodName__			this.destroyMethod = determineDestroyMethod(destroyMethodName)__			if (this.destroyMethod == null) {_				if (beanDefinition.isEnforceDestroyMethod()) {_					throw new BeanDefinitionValidationException("Couldn't find a destroy method named '" +_							destroyMethodName + "' on bean with name '" + beanName + "'")__				}_			}_			else {_				Class<?>[] paramTypes = this.destroyMethod.getParameterTypes()__				if (paramTypes.length > 1) {_					throw new BeanDefinitionValidationException("Method '" + destroyMethodName + "' of bean '" +_							beanName + "' has more than one parameter - not supported as destroy method")__				}_				else if (paramTypes.length == 1 && boolean.class != paramTypes[0]) {_					throw new BeanDefinitionValidationException("Method '" + destroyMethodName + "' of bean '" +_							beanName + "' has a non-boolean parameter - not supported as destroy method")__				}_			}_		}_		this.beanPostProcessors = filterPostProcessors(postProcessors, bean)__	};create,a,new,disposable,bean,adapter,for,the,given,bean,param,bean,the,bean,instance,never,code,null,param,bean,name,the,name,of,the,bean,param,bean,definition,the,merged,bean,definition,param,post,processors,the,list,of,bean,post,processors,potentially,destruction,aware,bean,post,processor,if,any;public,disposable,bean,adapter,object,bean,string,bean,name,root,bean,definition,bean,definition,list,bean,post,processor,post,processors,nullable,access,control,context,acc,assert,not,null,bean,disposable,bean,must,not,be,null,this,bean,bean,this,bean,name,bean,name,this,invoke,disposable,bean,this,bean,instanceof,disposable,bean,bean,definition,is,externally,managed,destroy,method,destroy,this,non,public,access,allowed,bean,definition,is,non,public,access,allowed,this,acc,acc,string,destroy,method,name,infer,destroy,method,if,necessary,bean,bean,definition,if,destroy,method,name,null,this,invoke,disposable,bean,destroy,equals,destroy,method,name,bean,definition,is,externally,managed,destroy,method,destroy,method,name,this,destroy,method,name,destroy,method,name,this,destroy,method,determine,destroy,method,destroy,method,name,if,this,destroy,method,null,if,bean,definition,is,enforce,destroy,method,throw,new,bean,definition,validation,exception,couldn,t,find,a,destroy,method,named,destroy,method,name,on,bean,with,name,bean,name,else,class,param,types,this,destroy,method,get,parameter,types,if,param,types,length,1,throw,new,bean,definition,validation,exception,method,destroy,method,name,of,bean,bean,name,has,more,than,one,parameter,not,supported,as,destroy,method,else,if,param,types,length,1,boolean,class,param,types,0,throw,new,bean,definition,validation,exception,method,destroy,method,name,of,bean,bean,name,has,a,non,boolean,parameter,not,supported,as,destroy,method,this,bean,post,processors,filter,post,processors,post,processors,bean
DisposableBeanAdapter -> public DisposableBeanAdapter(Object bean, String beanName, RootBeanDefinition beanDefinition, 			List<BeanPostProcessor> postProcessors, @Nullable AccessControlContext acc);1537391140;Create a new DisposableBeanAdapter for the given bean._@param bean the bean instance (never {@code null})_@param beanName the name of the bean_@param beanDefinition the merged bean definition_@param postProcessors the List of BeanPostProcessors_(potentially DestructionAwareBeanPostProcessor), if any;public DisposableBeanAdapter(Object bean, String beanName, RootBeanDefinition beanDefinition,_			List<BeanPostProcessor> postProcessors, @Nullable AccessControlContext acc) {__		Assert.notNull(bean, "Disposable bean must not be null")__		this.bean = bean__		this.beanName = beanName__		this.invokeDisposableBean =_				(this.bean instanceof DisposableBean && !beanDefinition.isExternallyManagedDestroyMethod("destroy"))__		this.nonPublicAccessAllowed = beanDefinition.isNonPublicAccessAllowed()__		this.acc = acc__		String destroyMethodName = inferDestroyMethodIfNecessary(bean, beanDefinition)__		if (destroyMethodName != null && !(this.invokeDisposableBean && "destroy".equals(destroyMethodName)) &&_				!beanDefinition.isExternallyManagedDestroyMethod(destroyMethodName)) {_			this.destroyMethodName = destroyMethodName__			this.destroyMethod = determineDestroyMethod(destroyMethodName)__			if (this.destroyMethod == null) {_				if (beanDefinition.isEnforceDestroyMethod()) {_					throw new BeanDefinitionValidationException("Could not find a destroy method named '" +_							destroyMethodName + "' on bean with name '" + beanName + "'")__				}_			}_			else {_				Class<?>[] paramTypes = this.destroyMethod.getParameterTypes()__				if (paramTypes.length > 1) {_					throw new BeanDefinitionValidationException("Method '" + destroyMethodName + "' of bean '" +_							beanName + "' has more than one parameter - not supported as destroy method")__				}_				else if (paramTypes.length == 1 && boolean.class != paramTypes[0]) {_					throw new BeanDefinitionValidationException("Method '" + destroyMethodName + "' of bean '" +_							beanName + "' has a non-boolean parameter - not supported as destroy method")__				}_			}_		}_		this.beanPostProcessors = filterPostProcessors(postProcessors, bean)__	};create,a,new,disposable,bean,adapter,for,the,given,bean,param,bean,the,bean,instance,never,code,null,param,bean,name,the,name,of,the,bean,param,bean,definition,the,merged,bean,definition,param,post,processors,the,list,of,bean,post,processors,potentially,destruction,aware,bean,post,processor,if,any;public,disposable,bean,adapter,object,bean,string,bean,name,root,bean,definition,bean,definition,list,bean,post,processor,post,processors,nullable,access,control,context,acc,assert,not,null,bean,disposable,bean,must,not,be,null,this,bean,bean,this,bean,name,bean,name,this,invoke,disposable,bean,this,bean,instanceof,disposable,bean,bean,definition,is,externally,managed,destroy,method,destroy,this,non,public,access,allowed,bean,definition,is,non,public,access,allowed,this,acc,acc,string,destroy,method,name,infer,destroy,method,if,necessary,bean,bean,definition,if,destroy,method,name,null,this,invoke,disposable,bean,destroy,equals,destroy,method,name,bean,definition,is,externally,managed,destroy,method,destroy,method,name,this,destroy,method,name,destroy,method,name,this,destroy,method,determine,destroy,method,destroy,method,name,if,this,destroy,method,null,if,bean,definition,is,enforce,destroy,method,throw,new,bean,definition,validation,exception,could,not,find,a,destroy,method,named,destroy,method,name,on,bean,with,name,bean,name,else,class,param,types,this,destroy,method,get,parameter,types,if,param,types,length,1,throw,new,bean,definition,validation,exception,method,destroy,method,name,of,bean,bean,name,has,more,than,one,parameter,not,supported,as,destroy,method,else,if,param,types,length,1,boolean,class,param,types,0,throw,new,bean,definition,validation,exception,method,destroy,method,name,of,bean,bean,name,has,a,non,boolean,parameter,not,supported,as,destroy,method,this,bean,post,processors,filter,post,processors,post,processors,bean
DisposableBeanAdapter -> private String inferDestroyMethodIfNecessary(Object bean, RootBeanDefinition beanDefinition);1353966428;If the current value of the given beanDefinition's "destroyMethodName" property is_{@link AbstractBeanDefinition#INFER_METHOD}, then attempt to infer a destroy method._Candidate methods are currently limited to public, no-arg methods named "close"_(whether declared locally or inherited). The given BeanDefinition's_"destroyMethodName" is updated to be null if no such method is found, otherwise set_to the name of the inferred method. This constant serves as the default for the_{@code @Bean#destroyMethod} attribute and the value of the constant may also be_used in XML within the {@code <bean destroy-method="">} or {@code_<beans default-destroy-method="">} attributes._<p>Also processes the {@link java.io.Closeable} and {@link java.lang.AutoCloseable}_interfaces, reflectively calling the "close" method on implementing beans as well.;private String inferDestroyMethodIfNecessary(Object bean, RootBeanDefinition beanDefinition) {_		if (AbstractBeanDefinition.INFER_METHOD.equals(beanDefinition.getDestroyMethodName()) ||_				(beanDefinition.getDestroyMethodName() == null && closeableInterface.isInstance(bean))) {_			_			_			if (!(bean instanceof DisposableBean)) {_				try {_					return bean.getClass().getMethod(CLOSE_METHOD_NAME).getName()__				}_				catch (NoSuchMethodException ex) {_					_				}_			}_			return null__		}_		return beanDefinition.getDestroyMethodName()__	};if,the,current,value,of,the,given,bean,definition,s,destroy,method,name,property,is,link,abstract,bean,definition,then,attempt,to,infer,a,destroy,method,candidate,methods,are,currently,limited,to,public,no,arg,methods,named,close,whether,declared,locally,or,inherited,the,given,bean,definition,s,destroy,method,name,is,updated,to,be,null,if,no,such,method,is,found,otherwise,set,to,the,name,of,the,inferred,method,this,constant,serves,as,the,default,for,the,code,bean,destroy,method,attribute,and,the,value,of,the,constant,may,also,be,used,in,xml,within,the,code,bean,destroy,method,or,code,beans,default,destroy,method,attributes,p,also,processes,the,link,java,io,closeable,and,link,java,lang,auto,closeable,interfaces,reflectively,calling,the,close,method,on,implementing,beans,as,well;private,string,infer,destroy,method,if,necessary,object,bean,root,bean,definition,bean,definition,if,abstract,bean,definition,equals,bean,definition,get,destroy,method,name,bean,definition,get,destroy,method,name,null,closeable,interface,is,instance,bean,if,bean,instanceof,disposable,bean,try,return,bean,get,class,get,method,get,name,catch,no,such,method,exception,ex,return,null,return,bean,definition,get,destroy,method,name
DisposableBeanAdapter -> private String inferDestroyMethodIfNecessary(Object bean, RootBeanDefinition beanDefinition);1356735495;If the current value of the given beanDefinition's "destroyMethodName" property is_{@link AbstractBeanDefinition#INFER_METHOD}, then attempt to infer a destroy method._Candidate methods are currently limited to public, no-arg methods named "close"_(whether declared locally or inherited). The given BeanDefinition's_"destroyMethodName" is updated to be null if no such method is found, otherwise set_to the name of the inferred method. This constant serves as the default for the_{@code @Bean#destroyMethod} attribute and the value of the constant may also be_used in XML within the {@code <bean destroy-method="">} or {@code_<beans default-destroy-method="">} attributes._<p>Also processes the {@link java.io.Closeable} and {@link java.lang.AutoCloseable}_interfaces, reflectively calling the "close" method on implementing beans as well.;private String inferDestroyMethodIfNecessary(Object bean, RootBeanDefinition beanDefinition) {_		if (AbstractBeanDefinition.INFER_METHOD.equals(beanDefinition.getDestroyMethodName()) ||_				(beanDefinition.getDestroyMethodName() == null && closeableInterface.isInstance(bean))) {_			_			_			if (!(bean instanceof DisposableBean)) {_				try {_					return bean.getClass().getMethod(CLOSE_METHOD_NAME).getName()__				}_				catch (NoSuchMethodException ex) {_					_				}_			}_			return null__		}_		return beanDefinition.getDestroyMethodName()__	};if,the,current,value,of,the,given,bean,definition,s,destroy,method,name,property,is,link,abstract,bean,definition,then,attempt,to,infer,a,destroy,method,candidate,methods,are,currently,limited,to,public,no,arg,methods,named,close,whether,declared,locally,or,inherited,the,given,bean,definition,s,destroy,method,name,is,updated,to,be,null,if,no,such,method,is,found,otherwise,set,to,the,name,of,the,inferred,method,this,constant,serves,as,the,default,for,the,code,bean,destroy,method,attribute,and,the,value,of,the,constant,may,also,be,used,in,xml,within,the,code,bean,destroy,method,or,code,beans,default,destroy,method,attributes,p,also,processes,the,link,java,io,closeable,and,link,java,lang,auto,closeable,interfaces,reflectively,calling,the,close,method,on,implementing,beans,as,well;private,string,infer,destroy,method,if,necessary,object,bean,root,bean,definition,bean,definition,if,abstract,bean,definition,equals,bean,definition,get,destroy,method,name,bean,definition,get,destroy,method,name,null,closeable,interface,is,instance,bean,if,bean,instanceof,disposable,bean,try,return,bean,get,class,get,method,get,name,catch,no,such,method,exception,ex,return,null,return,bean,definition,get,destroy,method,name
DisposableBeanAdapter -> private String inferDestroyMethodIfNecessary(Object bean, RootBeanDefinition beanDefinition);1357119239;If the current value of the given beanDefinition's "destroyMethodName" property is_{@link AbstractBeanDefinition#INFER_METHOD}, then attempt to infer a destroy method._Candidate methods are currently limited to public, no-arg methods named "close"_(whether declared locally or inherited). The given BeanDefinition's_"destroyMethodName" is updated to be null if no such method is found, otherwise set_to the name of the inferred method. This constant serves as the default for the_{@code @Bean#destroyMethod} attribute and the value of the constant may also be_used in XML within the {@code <bean destroy-method="">} or {@code_<beans default-destroy-method="">} attributes._<p>Also processes the {@link java.io.Closeable} and {@link java.lang.AutoCloseable}_interfaces, reflectively calling the "close" method on implementing beans as well.;private String inferDestroyMethodIfNecessary(Object bean, RootBeanDefinition beanDefinition) {_		if (AbstractBeanDefinition.INFER_METHOD.equals(beanDefinition.getDestroyMethodName()) ||_				(beanDefinition.getDestroyMethodName() == null && closeableInterface.isInstance(bean))) {_			_			_			if (!(bean instanceof DisposableBean)) {_				try {_					return bean.getClass().getMethod(CLOSE_METHOD_NAME).getName()__				}_				catch (NoSuchMethodException ex) {_					_				}_			}_			return null__		}_		return beanDefinition.getDestroyMethodName()__	};if,the,current,value,of,the,given,bean,definition,s,destroy,method,name,property,is,link,abstract,bean,definition,then,attempt,to,infer,a,destroy,method,candidate,methods,are,currently,limited,to,public,no,arg,methods,named,close,whether,declared,locally,or,inherited,the,given,bean,definition,s,destroy,method,name,is,updated,to,be,null,if,no,such,method,is,found,otherwise,set,to,the,name,of,the,inferred,method,this,constant,serves,as,the,default,for,the,code,bean,destroy,method,attribute,and,the,value,of,the,constant,may,also,be,used,in,xml,within,the,code,bean,destroy,method,or,code,beans,default,destroy,method,attributes,p,also,processes,the,link,java,io,closeable,and,link,java,lang,auto,closeable,interfaces,reflectively,calling,the,close,method,on,implementing,beans,as,well;private,string,infer,destroy,method,if,necessary,object,bean,root,bean,definition,bean,definition,if,abstract,bean,definition,equals,bean,definition,get,destroy,method,name,bean,definition,get,destroy,method,name,null,closeable,interface,is,instance,bean,if,bean,instanceof,disposable,bean,try,return,bean,get,class,get,method,get,name,catch,no,such,method,exception,ex,return,null,return,bean,definition,get,destroy,method,name
DisposableBeanAdapter -> private String inferDestroyMethodIfNecessary(Object bean, RootBeanDefinition beanDefinition);1362408075;If the current value of the given beanDefinition's "destroyMethodName" property is_{@link AbstractBeanDefinition#INFER_METHOD}, then attempt to infer a destroy method._Candidate methods are currently limited to public, no-arg methods named "close"_(whether declared locally or inherited). The given BeanDefinition's_"destroyMethodName" is updated to be null if no such method is found, otherwise set_to the name of the inferred method. This constant serves as the default for the_{@code @Bean#destroyMethod} attribute and the value of the constant may also be_used in XML within the {@code <bean destroy-method="">} or {@code_<beans default-destroy-method="">} attributes._<p>Also processes the {@link java.io.Closeable} and {@link java.lang.AutoCloseable}_interfaces, reflectively calling the "close" method on implementing beans as well.;private String inferDestroyMethodIfNecessary(Object bean, RootBeanDefinition beanDefinition) {_		if (AbstractBeanDefinition.INFER_METHOD.equals(beanDefinition.getDestroyMethodName()) ||_				(beanDefinition.getDestroyMethodName() == null && closeableInterface.isInstance(bean))) {_			_			_			if (!(bean instanceof DisposableBean)) {_				try {_					return bean.getClass().getMethod(CLOSE_METHOD_NAME).getName()__				}_				catch (NoSuchMethodException ex) {_					try {_						return bean.getClass().getMethod(SHUTDOWN_METHOD_NAME).getName()__					}_					catch (NoSuchMethodException ex2) {_						_					}_				}_			}_			return null__		}_		return beanDefinition.getDestroyMethodName()__	};if,the,current,value,of,the,given,bean,definition,s,destroy,method,name,property,is,link,abstract,bean,definition,then,attempt,to,infer,a,destroy,method,candidate,methods,are,currently,limited,to,public,no,arg,methods,named,close,whether,declared,locally,or,inherited,the,given,bean,definition,s,destroy,method,name,is,updated,to,be,null,if,no,such,method,is,found,otherwise,set,to,the,name,of,the,inferred,method,this,constant,serves,as,the,default,for,the,code,bean,destroy,method,attribute,and,the,value,of,the,constant,may,also,be,used,in,xml,within,the,code,bean,destroy,method,or,code,beans,default,destroy,method,attributes,p,also,processes,the,link,java,io,closeable,and,link,java,lang,auto,closeable,interfaces,reflectively,calling,the,close,method,on,implementing,beans,as,well;private,string,infer,destroy,method,if,necessary,object,bean,root,bean,definition,bean,definition,if,abstract,bean,definition,equals,bean,definition,get,destroy,method,name,bean,definition,get,destroy,method,name,null,closeable,interface,is,instance,bean,if,bean,instanceof,disposable,bean,try,return,bean,get,class,get,method,get,name,catch,no,such,method,exception,ex,try,return,bean,get,class,get,method,get,name,catch,no,such,method,exception,ex2,return,null,return,bean,definition,get,destroy,method,name
DisposableBeanAdapter -> private String inferDestroyMethodIfNecessary(Object bean, RootBeanDefinition beanDefinition);1364503447;If the current value of the given beanDefinition's "destroyMethodName" property is_{@link AbstractBeanDefinition#INFER_METHOD}, then attempt to infer a destroy method._Candidate methods are currently limited to public, no-arg methods named "close"_(whether declared locally or inherited). The given BeanDefinition's_"destroyMethodName" is updated to be null if no such method is found, otherwise set_to the name of the inferred method. This constant serves as the default for the_{@code @Bean#destroyMethod} attribute and the value of the constant may also be_used in XML within the {@code <bean destroy-method="">} or {@code_<beans default-destroy-method="">} attributes._<p>Also processes the {@link java.io.Closeable} and {@link java.lang.AutoCloseable}_interfaces, reflectively calling the "close" method on implementing beans as well.;private String inferDestroyMethodIfNecessary(Object bean, RootBeanDefinition beanDefinition) {_		if (AbstractBeanDefinition.INFER_METHOD.equals(beanDefinition.getDestroyMethodName()) ||_				(beanDefinition.getDestroyMethodName() == null && closeableInterface.isInstance(bean))) {_			_			_			if (!(bean instanceof DisposableBean)) {_				try {_					return bean.getClass().getMethod(CLOSE_METHOD_NAME).getName()__				}_				catch (NoSuchMethodException ex) {_					try {_						return bean.getClass().getMethod(SHUTDOWN_METHOD_NAME).getName()__					}_					catch (NoSuchMethodException ex2) {_						_					}_				}_			}_			return null__		}_		return beanDefinition.getDestroyMethodName()__	};if,the,current,value,of,the,given,bean,definition,s,destroy,method,name,property,is,link,abstract,bean,definition,then,attempt,to,infer,a,destroy,method,candidate,methods,are,currently,limited,to,public,no,arg,methods,named,close,whether,declared,locally,or,inherited,the,given,bean,definition,s,destroy,method,name,is,updated,to,be,null,if,no,such,method,is,found,otherwise,set,to,the,name,of,the,inferred,method,this,constant,serves,as,the,default,for,the,code,bean,destroy,method,attribute,and,the,value,of,the,constant,may,also,be,used,in,xml,within,the,code,bean,destroy,method,or,code,beans,default,destroy,method,attributes,p,also,processes,the,link,java,io,closeable,and,link,java,lang,auto,closeable,interfaces,reflectively,calling,the,close,method,on,implementing,beans,as,well;private,string,infer,destroy,method,if,necessary,object,bean,root,bean,definition,bean,definition,if,abstract,bean,definition,equals,bean,definition,get,destroy,method,name,bean,definition,get,destroy,method,name,null,closeable,interface,is,instance,bean,if,bean,instanceof,disposable,bean,try,return,bean,get,class,get,method,get,name,catch,no,such,method,exception,ex,try,return,bean,get,class,get,method,get,name,catch,no,such,method,exception,ex2,return,null,return,bean,definition,get,destroy,method,name
DisposableBeanAdapter -> private String inferDestroyMethodIfNecessary(Object bean, RootBeanDefinition beanDefinition);1368482696;If the current value of the given beanDefinition's "destroyMethodName" property is_{@link AbstractBeanDefinition#INFER_METHOD}, then attempt to infer a destroy method._Candidate methods are currently limited to public, no-arg methods named "close"_(whether declared locally or inherited). The given BeanDefinition's_"destroyMethodName" is updated to be null if no such method is found, otherwise set_to the name of the inferred method. This constant serves as the default for the_{@code @Bean#destroyMethod} attribute and the value of the constant may also be_used in XML within the {@code <bean destroy-method="">} or {@code_<beans default-destroy-method="">} attributes._<p>Also processes the {@link java.io.Closeable} and {@link java.lang.AutoCloseable}_interfaces, reflectively calling the "close" method on implementing beans as well.;private String inferDestroyMethodIfNecessary(Object bean, RootBeanDefinition beanDefinition) {_		if (AbstractBeanDefinition.INFER_METHOD.equals(beanDefinition.getDestroyMethodName()) ||_				(beanDefinition.getDestroyMethodName() == null && closeableInterface.isInstance(bean))) {_			_			_			if (!(bean instanceof DisposableBean)) {_				try {_					return bean.getClass().getMethod(CLOSE_METHOD_NAME).getName()__				}_				catch (NoSuchMethodException ex) {_					try {_						return bean.getClass().getMethod(SHUTDOWN_METHOD_NAME).getName()__					}_					catch (NoSuchMethodException ex2) {_						_					}_				}_			}_			return null__		}_		return beanDefinition.getDestroyMethodName()__	};if,the,current,value,of,the,given,bean,definition,s,destroy,method,name,property,is,link,abstract,bean,definition,then,attempt,to,infer,a,destroy,method,candidate,methods,are,currently,limited,to,public,no,arg,methods,named,close,whether,declared,locally,or,inherited,the,given,bean,definition,s,destroy,method,name,is,updated,to,be,null,if,no,such,method,is,found,otherwise,set,to,the,name,of,the,inferred,method,this,constant,serves,as,the,default,for,the,code,bean,destroy,method,attribute,and,the,value,of,the,constant,may,also,be,used,in,xml,within,the,code,bean,destroy,method,or,code,beans,default,destroy,method,attributes,p,also,processes,the,link,java,io,closeable,and,link,java,lang,auto,closeable,interfaces,reflectively,calling,the,close,method,on,implementing,beans,as,well;private,string,infer,destroy,method,if,necessary,object,bean,root,bean,definition,bean,definition,if,abstract,bean,definition,equals,bean,definition,get,destroy,method,name,bean,definition,get,destroy,method,name,null,closeable,interface,is,instance,bean,if,bean,instanceof,disposable,bean,try,return,bean,get,class,get,method,get,name,catch,no,such,method,exception,ex,try,return,bean,get,class,get,method,get,name,catch,no,such,method,exception,ex2,return,null,return,bean,definition,get,destroy,method,name
DisposableBeanAdapter -> private String inferDestroyMethodIfNecessary(Object bean, RootBeanDefinition beanDefinition);1385412762;If the current value of the given beanDefinition's "destroyMethodName" property is_{@link AbstractBeanDefinition#INFER_METHOD}, then attempt to infer a destroy method._Candidate methods are currently limited to public, no-arg methods named "close"_(whether declared locally or inherited). The given BeanDefinition's_"destroyMethodName" is updated to be null if no such method is found, otherwise set_to the name of the inferred method. This constant serves as the default for the_{@code @Bean#destroyMethod} attribute and the value of the constant may also be_used in XML within the {@code <bean destroy-method="">} or {@code_<beans default-destroy-method="">} attributes._<p>Also processes the {@link java.io.Closeable} and {@link java.lang.AutoCloseable}_interfaces, reflectively calling the "close" method on implementing beans as well.;private String inferDestroyMethodIfNecessary(Object bean, RootBeanDefinition beanDefinition) {_		if (AbstractBeanDefinition.INFER_METHOD.equals(beanDefinition.getDestroyMethodName()) ||_				(beanDefinition.getDestroyMethodName() == null && closeableInterface.isInstance(bean))) {_			_			_			if (!(bean instanceof DisposableBean)) {_				try {_					return bean.getClass().getMethod(CLOSE_METHOD_NAME).getName()__				}_				catch (NoSuchMethodException ex) {_					try {_						return bean.getClass().getMethod(SHUTDOWN_METHOD_NAME).getName()__					}_					catch (NoSuchMethodException ex2) {_						_					}_				}_			}_			return null__		}_		return beanDefinition.getDestroyMethodName()__	};if,the,current,value,of,the,given,bean,definition,s,destroy,method,name,property,is,link,abstract,bean,definition,then,attempt,to,infer,a,destroy,method,candidate,methods,are,currently,limited,to,public,no,arg,methods,named,close,whether,declared,locally,or,inherited,the,given,bean,definition,s,destroy,method,name,is,updated,to,be,null,if,no,such,method,is,found,otherwise,set,to,the,name,of,the,inferred,method,this,constant,serves,as,the,default,for,the,code,bean,destroy,method,attribute,and,the,value,of,the,constant,may,also,be,used,in,xml,within,the,code,bean,destroy,method,or,code,beans,default,destroy,method,attributes,p,also,processes,the,link,java,io,closeable,and,link,java,lang,auto,closeable,interfaces,reflectively,calling,the,close,method,on,implementing,beans,as,well;private,string,infer,destroy,method,if,necessary,object,bean,root,bean,definition,bean,definition,if,abstract,bean,definition,equals,bean,definition,get,destroy,method,name,bean,definition,get,destroy,method,name,null,closeable,interface,is,instance,bean,if,bean,instanceof,disposable,bean,try,return,bean,get,class,get,method,get,name,catch,no,such,method,exception,ex,try,return,bean,get,class,get,method,get,name,catch,no,such,method,exception,ex2,return,null,return,bean,definition,get,destroy,method,name
DisposableBeanAdapter -> private String inferDestroyMethodIfNecessary(Object bean, RootBeanDefinition beanDefinition);1398638841;If the current value of the given beanDefinition's "destroyMethodName" property is_{@link AbstractBeanDefinition#INFER_METHOD}, then attempt to infer a destroy method._Candidate methods are currently limited to public, no-arg methods named "close"_(whether declared locally or inherited). The given BeanDefinition's_"destroyMethodName" is updated to be null if no such method is found, otherwise set_to the name of the inferred method. This constant serves as the default for the_{@code @Bean#destroyMethod} attribute and the value of the constant may also be_used in XML within the {@code <bean destroy-method="">} or {@code_<beans default-destroy-method="">} attributes._<p>Also processes the {@link java.io.Closeable} and {@link java.lang.AutoCloseable}_interfaces, reflectively calling the "close" method on implementing beans as well.;private String inferDestroyMethodIfNecessary(Object bean, RootBeanDefinition beanDefinition) {_		if (AbstractBeanDefinition.INFER_METHOD.equals(beanDefinition.getDestroyMethodName()) ||_				(beanDefinition.getDestroyMethodName() == null && closeableInterface.isInstance(bean))) {_			_			_			if (!(bean instanceof DisposableBean)) {_				try {_					return bean.getClass().getMethod(CLOSE_METHOD_NAME).getName()__				}_				catch (NoSuchMethodException ex) {_					try {_						return bean.getClass().getMethod(SHUTDOWN_METHOD_NAME).getName()__					}_					catch (NoSuchMethodException ex2) {_						_					}_				}_			}_			return null__		}_		return beanDefinition.getDestroyMethodName()__	};if,the,current,value,of,the,given,bean,definition,s,destroy,method,name,property,is,link,abstract,bean,definition,then,attempt,to,infer,a,destroy,method,candidate,methods,are,currently,limited,to,public,no,arg,methods,named,close,whether,declared,locally,or,inherited,the,given,bean,definition,s,destroy,method,name,is,updated,to,be,null,if,no,such,method,is,found,otherwise,set,to,the,name,of,the,inferred,method,this,constant,serves,as,the,default,for,the,code,bean,destroy,method,attribute,and,the,value,of,the,constant,may,also,be,used,in,xml,within,the,code,bean,destroy,method,or,code,beans,default,destroy,method,attributes,p,also,processes,the,link,java,io,closeable,and,link,java,lang,auto,closeable,interfaces,reflectively,calling,the,close,method,on,implementing,beans,as,well;private,string,infer,destroy,method,if,necessary,object,bean,root,bean,definition,bean,definition,if,abstract,bean,definition,equals,bean,definition,get,destroy,method,name,bean,definition,get,destroy,method,name,null,closeable,interface,is,instance,bean,if,bean,instanceof,disposable,bean,try,return,bean,get,class,get,method,get,name,catch,no,such,method,exception,ex,try,return,bean,get,class,get,method,get,name,catch,no,such,method,exception,ex2,return,null,return,bean,definition,get,destroy,method,name
DisposableBeanAdapter -> private String inferDestroyMethodIfNecessary(Object bean, RootBeanDefinition beanDefinition);1432125256;If the current value of the given beanDefinition's "destroyMethodName" property is_{@link AbstractBeanDefinition#INFER_METHOD}, then attempt to infer a destroy method._Candidate methods are currently limited to public, no-arg methods named "close"_(whether declared locally or inherited). The given BeanDefinition's_"destroyMethodName" is updated to be null if no such method is found, otherwise set_to the name of the inferred method. This constant serves as the default for the_{@code @Bean#destroyMethod} attribute and the value of the constant may also be_used in XML within the {@code <bean destroy-method="">} or {@code_<beans default-destroy-method="">} attributes._<p>Also processes the {@link java.io.Closeable} and {@link java.lang.AutoCloseable}_interfaces, reflectively calling the "close" method on implementing beans as well.;private String inferDestroyMethodIfNecessary(Object bean, RootBeanDefinition beanDefinition) {_		if (AbstractBeanDefinition.INFER_METHOD.equals(beanDefinition.getDestroyMethodName()) ||_				(beanDefinition.getDestroyMethodName() == null && closeableInterface.isInstance(bean))) {_			_			_			if (!(bean instanceof DisposableBean)) {_				try {_					return bean.getClass().getMethod(CLOSE_METHOD_NAME).getName()__				}_				catch (NoSuchMethodException ex) {_					try {_						return bean.getClass().getMethod(SHUTDOWN_METHOD_NAME).getName()__					}_					catch (NoSuchMethodException ex2) {_						_					}_				}_			}_			return null__		}_		return beanDefinition.getDestroyMethodName()__	};if,the,current,value,of,the,given,bean,definition,s,destroy,method,name,property,is,link,abstract,bean,definition,then,attempt,to,infer,a,destroy,method,candidate,methods,are,currently,limited,to,public,no,arg,methods,named,close,whether,declared,locally,or,inherited,the,given,bean,definition,s,destroy,method,name,is,updated,to,be,null,if,no,such,method,is,found,otherwise,set,to,the,name,of,the,inferred,method,this,constant,serves,as,the,default,for,the,code,bean,destroy,method,attribute,and,the,value,of,the,constant,may,also,be,used,in,xml,within,the,code,bean,destroy,method,or,code,beans,default,destroy,method,attributes,p,also,processes,the,link,java,io,closeable,and,link,java,lang,auto,closeable,interfaces,reflectively,calling,the,close,method,on,implementing,beans,as,well;private,string,infer,destroy,method,if,necessary,object,bean,root,bean,definition,bean,definition,if,abstract,bean,definition,equals,bean,definition,get,destroy,method,name,bean,definition,get,destroy,method,name,null,closeable,interface,is,instance,bean,if,bean,instanceof,disposable,bean,try,return,bean,get,class,get,method,get,name,catch,no,such,method,exception,ex,try,return,bean,get,class,get,method,get,name,catch,no,such,method,exception,ex2,return,null,return,bean,definition,get,destroy,method,name
DisposableBeanAdapter -> private String inferDestroyMethodIfNecessary(Object bean, RootBeanDefinition beanDefinition);1432135182;If the current value of the given beanDefinition's "destroyMethodName" property is_{@link AbstractBeanDefinition#INFER_METHOD}, then attempt to infer a destroy method._Candidate methods are currently limited to public, no-arg methods named "close"_(whether declared locally or inherited). The given BeanDefinition's_"destroyMethodName" is updated to be null if no such method is found, otherwise set_to the name of the inferred method. This constant serves as the default for the_{@code @Bean#destroyMethod} attribute and the value of the constant may also be_used in XML within the {@code <bean destroy-method="">} or {@code_<beans default-destroy-method="">} attributes._<p>Also processes the {@link java.io.Closeable} and {@link java.lang.AutoCloseable}_interfaces, reflectively calling the "close" method on implementing beans as well.;private String inferDestroyMethodIfNecessary(Object bean, RootBeanDefinition beanDefinition) {_		String destroyMethodName = beanDefinition.getDestroyMethodName()__		if (AbstractBeanDefinition.INFER_METHOD.equals(destroyMethodName) ||_				(destroyMethodName == null && closeableInterface.isInstance(bean))) {_			_			_			if (!(bean instanceof DisposableBean)) {_				try {_					return bean.getClass().getMethod(CLOSE_METHOD_NAME).getName()__				}_				catch (NoSuchMethodException ex) {_					try {_						return bean.getClass().getMethod(SHUTDOWN_METHOD_NAME).getName()__					}_					catch (NoSuchMethodException ex2) {_						_					}_				}_			}_			return null__		}_		return (StringUtils.hasLength(destroyMethodName) ? destroyMethodName : null)__	};if,the,current,value,of,the,given,bean,definition,s,destroy,method,name,property,is,link,abstract,bean,definition,then,attempt,to,infer,a,destroy,method,candidate,methods,are,currently,limited,to,public,no,arg,methods,named,close,whether,declared,locally,or,inherited,the,given,bean,definition,s,destroy,method,name,is,updated,to,be,null,if,no,such,method,is,found,otherwise,set,to,the,name,of,the,inferred,method,this,constant,serves,as,the,default,for,the,code,bean,destroy,method,attribute,and,the,value,of,the,constant,may,also,be,used,in,xml,within,the,code,bean,destroy,method,or,code,beans,default,destroy,method,attributes,p,also,processes,the,link,java,io,closeable,and,link,java,lang,auto,closeable,interfaces,reflectively,calling,the,close,method,on,implementing,beans,as,well;private,string,infer,destroy,method,if,necessary,object,bean,root,bean,definition,bean,definition,string,destroy,method,name,bean,definition,get,destroy,method,name,if,abstract,bean,definition,equals,destroy,method,name,destroy,method,name,null,closeable,interface,is,instance,bean,if,bean,instanceof,disposable,bean,try,return,bean,get,class,get,method,get,name,catch,no,such,method,exception,ex,try,return,bean,get,class,get,method,get,name,catch,no,such,method,exception,ex2,return,null,return,string,utils,has,length,destroy,method,name,destroy,method,name,null
DisposableBeanAdapter -> private String inferDestroyMethodIfNecessary(Object bean, RootBeanDefinition beanDefinition);1436434188;If the current value of the given beanDefinition's "destroyMethodName" property is_{@link AbstractBeanDefinition#INFER_METHOD}, then attempt to infer a destroy method._Candidate methods are currently limited to public, no-arg methods named "close" or_"shutdown" (whether declared locally or inherited). The given BeanDefinition's_"destroyMethodName" is updated to be null if no such method is found, otherwise set_to the name of the inferred method. This constant serves as the default for the_{@code @Bean#destroyMethod} attribute and the value of the constant may also be_used in XML within the {@code <bean destroy-method="">} or {@code_<beans default-destroy-method="">} attributes._<p>Also processes the {@link java.io.Closeable} and {@link java.lang.AutoCloseable}_interfaces, reflectively calling the "close" method on implementing beans as well.;private String inferDestroyMethodIfNecessary(Object bean, RootBeanDefinition beanDefinition) {_		String destroyMethodName = beanDefinition.getDestroyMethodName()__		if (AbstractBeanDefinition.INFER_METHOD.equals(destroyMethodName) ||_				(destroyMethodName == null && closeableInterface.isInstance(bean))) {_			_			_			if (!(bean instanceof DisposableBean)) {_				try {_					return bean.getClass().getMethod(CLOSE_METHOD_NAME).getName()__				}_				catch (NoSuchMethodException ex) {_					try {_						return bean.getClass().getMethod(SHUTDOWN_METHOD_NAME).getName()__					}_					catch (NoSuchMethodException ex2) {_						_					}_				}_			}_			return null__		}_		return (StringUtils.hasLength(destroyMethodName) ? destroyMethodName : null)__	};if,the,current,value,of,the,given,bean,definition,s,destroy,method,name,property,is,link,abstract,bean,definition,then,attempt,to,infer,a,destroy,method,candidate,methods,are,currently,limited,to,public,no,arg,methods,named,close,or,shutdown,whether,declared,locally,or,inherited,the,given,bean,definition,s,destroy,method,name,is,updated,to,be,null,if,no,such,method,is,found,otherwise,set,to,the,name,of,the,inferred,method,this,constant,serves,as,the,default,for,the,code,bean,destroy,method,attribute,and,the,value,of,the,constant,may,also,be,used,in,xml,within,the,code,bean,destroy,method,or,code,beans,default,destroy,method,attributes,p,also,processes,the,link,java,io,closeable,and,link,java,lang,auto,closeable,interfaces,reflectively,calling,the,close,method,on,implementing,beans,as,well;private,string,infer,destroy,method,if,necessary,object,bean,root,bean,definition,bean,definition,string,destroy,method,name,bean,definition,get,destroy,method,name,if,abstract,bean,definition,equals,destroy,method,name,destroy,method,name,null,closeable,interface,is,instance,bean,if,bean,instanceof,disposable,bean,try,return,bean,get,class,get,method,get,name,catch,no,such,method,exception,ex,try,return,bean,get,class,get,method,get,name,catch,no,such,method,exception,ex2,return,null,return,string,utils,has,length,destroy,method,name,destroy,method,name,null
DisposableBeanAdapter -> private String inferDestroyMethodIfNecessary(Object bean, RootBeanDefinition beanDefinition);1447195666;If the current value of the given beanDefinition's "destroyMethodName" property is_{@link AbstractBeanDefinition#INFER_METHOD}, then attempt to infer a destroy method._Candidate methods are currently limited to public, no-arg methods named "close" or_"shutdown" (whether declared locally or inherited). The given BeanDefinition's_"destroyMethodName" is updated to be null if no such method is found, otherwise set_to the name of the inferred method. This constant serves as the default for the_{@code @Bean#destroyMethod} attribute and the value of the constant may also be_used in XML within the {@code <bean destroy-method="">} or {@code_<beans default-destroy-method="">} attributes._<p>Also processes the {@link java.io.Closeable} and {@link java.lang.AutoCloseable}_interfaces, reflectively calling the "close" method on implementing beans as well.;private String inferDestroyMethodIfNecessary(Object bean, RootBeanDefinition beanDefinition) {_		String destroyMethodName = beanDefinition.getDestroyMethodName()__		if (AbstractBeanDefinition.INFER_METHOD.equals(destroyMethodName) ||_				(destroyMethodName == null && closeableInterface.isInstance(bean))) {_			_			_			if (!(bean instanceof DisposableBean)) {_				try {_					return bean.getClass().getMethod(CLOSE_METHOD_NAME).getName()__				}_				catch (NoSuchMethodException ex) {_					try {_						return bean.getClass().getMethod(SHUTDOWN_METHOD_NAME).getName()__					}_					catch (NoSuchMethodException ex2) {_						_					}_				}_			}_			return null__		}_		return (StringUtils.hasLength(destroyMethodName) ? destroyMethodName : null)__	};if,the,current,value,of,the,given,bean,definition,s,destroy,method,name,property,is,link,abstract,bean,definition,then,attempt,to,infer,a,destroy,method,candidate,methods,are,currently,limited,to,public,no,arg,methods,named,close,or,shutdown,whether,declared,locally,or,inherited,the,given,bean,definition,s,destroy,method,name,is,updated,to,be,null,if,no,such,method,is,found,otherwise,set,to,the,name,of,the,inferred,method,this,constant,serves,as,the,default,for,the,code,bean,destroy,method,attribute,and,the,value,of,the,constant,may,also,be,used,in,xml,within,the,code,bean,destroy,method,or,code,beans,default,destroy,method,attributes,p,also,processes,the,link,java,io,closeable,and,link,java,lang,auto,closeable,interfaces,reflectively,calling,the,close,method,on,implementing,beans,as,well;private,string,infer,destroy,method,if,necessary,object,bean,root,bean,definition,bean,definition,string,destroy,method,name,bean,definition,get,destroy,method,name,if,abstract,bean,definition,equals,destroy,method,name,destroy,method,name,null,closeable,interface,is,instance,bean,if,bean,instanceof,disposable,bean,try,return,bean,get,class,get,method,get,name,catch,no,such,method,exception,ex,try,return,bean,get,class,get,method,get,name,catch,no,such,method,exception,ex2,return,null,return,string,utils,has,length,destroy,method,name,destroy,method,name,null
DisposableBeanAdapter -> private String inferDestroyMethodIfNecessary(Object bean, RootBeanDefinition beanDefinition);1450454045;If the current value of the given beanDefinition's "destroyMethodName" property is_{@link AbstractBeanDefinition#INFER_METHOD}, then attempt to infer a destroy method._Candidate methods are currently limited to public, no-arg methods named "close" or_"shutdown" (whether declared locally or inherited). The given BeanDefinition's_"destroyMethodName" is updated to be null if no such method is found, otherwise set_to the name of the inferred method. This constant serves as the default for the_{@code @Bean#destroyMethod} attribute and the value of the constant may also be_used in XML within the {@code <bean destroy-method="">} or {@code_<beans default-destroy-method="">} attributes._<p>Also processes the {@link java.io.Closeable} and {@link java.lang.AutoCloseable}_interfaces, reflectively calling the "close" method on implementing beans as well.;private String inferDestroyMethodIfNecessary(Object bean, RootBeanDefinition beanDefinition) {_		String destroyMethodName = beanDefinition.getDestroyMethodName()__		if (AbstractBeanDefinition.INFER_METHOD.equals(destroyMethodName) ||_				(destroyMethodName == null && closeableInterface.isInstance(bean))) {_			_			_			if (!(bean instanceof DisposableBean)) {_				try {_					return bean.getClass().getMethod(CLOSE_METHOD_NAME).getName()__				}_				catch (NoSuchMethodException ex) {_					try {_						return bean.getClass().getMethod(SHUTDOWN_METHOD_NAME).getName()__					}_					catch (NoSuchMethodException ex2) {_						_					}_				}_			}_			return null__		}_		return (StringUtils.hasLength(destroyMethodName) ? destroyMethodName : null)__	};if,the,current,value,of,the,given,bean,definition,s,destroy,method,name,property,is,link,abstract,bean,definition,then,attempt,to,infer,a,destroy,method,candidate,methods,are,currently,limited,to,public,no,arg,methods,named,close,or,shutdown,whether,declared,locally,or,inherited,the,given,bean,definition,s,destroy,method,name,is,updated,to,be,null,if,no,such,method,is,found,otherwise,set,to,the,name,of,the,inferred,method,this,constant,serves,as,the,default,for,the,code,bean,destroy,method,attribute,and,the,value,of,the,constant,may,also,be,used,in,xml,within,the,code,bean,destroy,method,or,code,beans,default,destroy,method,attributes,p,also,processes,the,link,java,io,closeable,and,link,java,lang,auto,closeable,interfaces,reflectively,calling,the,close,method,on,implementing,beans,as,well;private,string,infer,destroy,method,if,necessary,object,bean,root,bean,definition,bean,definition,string,destroy,method,name,bean,definition,get,destroy,method,name,if,abstract,bean,definition,equals,destroy,method,name,destroy,method,name,null,closeable,interface,is,instance,bean,if,bean,instanceof,disposable,bean,try,return,bean,get,class,get,method,get,name,catch,no,such,method,exception,ex,try,return,bean,get,class,get,method,get,name,catch,no,such,method,exception,ex2,return,null,return,string,utils,has,length,destroy,method,name,destroy,method,name,null
DisposableBeanAdapter -> private String inferDestroyMethodIfNecessary(Object bean, RootBeanDefinition beanDefinition);1454934048;If the current value of the given beanDefinition's "destroyMethodName" property is_{@link AbstractBeanDefinition#INFER_METHOD}, then attempt to infer a destroy method._Candidate methods are currently limited to public, no-arg methods named "close" or_"shutdown" (whether declared locally or inherited). The given BeanDefinition's_"destroyMethodName" is updated to be null if no such method is found, otherwise set_to the name of the inferred method. This constant serves as the default for the_{@code @Bean#destroyMethod} attribute and the value of the constant may also be_used in XML within the {@code <bean destroy-method="">} or {@code_<beans default-destroy-method="">} attributes._<p>Also processes the {@link java.io.Closeable} and {@link java.lang.AutoCloseable}_interfaces, reflectively calling the "close" method on implementing beans as well.;private String inferDestroyMethodIfNecessary(Object bean, RootBeanDefinition beanDefinition) {_		String destroyMethodName = beanDefinition.getDestroyMethodName()__		if (AbstractBeanDefinition.INFER_METHOD.equals(destroyMethodName) ||_				(destroyMethodName == null && closeableInterface.isInstance(bean))) {_			_			_			if (!(bean instanceof DisposableBean)) {_				try {_					return bean.getClass().getMethod(CLOSE_METHOD_NAME).getName()__				}_				catch (NoSuchMethodException ex) {_					try {_						return bean.getClass().getMethod(SHUTDOWN_METHOD_NAME).getName()__					}_					catch (NoSuchMethodException ex2) {_						_					}_				}_			}_			return null__		}_		return (StringUtils.hasLength(destroyMethodName) ? destroyMethodName : null)__	};if,the,current,value,of,the,given,bean,definition,s,destroy,method,name,property,is,link,abstract,bean,definition,then,attempt,to,infer,a,destroy,method,candidate,methods,are,currently,limited,to,public,no,arg,methods,named,close,or,shutdown,whether,declared,locally,or,inherited,the,given,bean,definition,s,destroy,method,name,is,updated,to,be,null,if,no,such,method,is,found,otherwise,set,to,the,name,of,the,inferred,method,this,constant,serves,as,the,default,for,the,code,bean,destroy,method,attribute,and,the,value,of,the,constant,may,also,be,used,in,xml,within,the,code,bean,destroy,method,or,code,beans,default,destroy,method,attributes,p,also,processes,the,link,java,io,closeable,and,link,java,lang,auto,closeable,interfaces,reflectively,calling,the,close,method,on,implementing,beans,as,well;private,string,infer,destroy,method,if,necessary,object,bean,root,bean,definition,bean,definition,string,destroy,method,name,bean,definition,get,destroy,method,name,if,abstract,bean,definition,equals,destroy,method,name,destroy,method,name,null,closeable,interface,is,instance,bean,if,bean,instanceof,disposable,bean,try,return,bean,get,class,get,method,get,name,catch,no,such,method,exception,ex,try,return,bean,get,class,get,method,get,name,catch,no,such,method,exception,ex2,return,null,return,string,utils,has,length,destroy,method,name,destroy,method,name,null
DisposableBeanAdapter -> private String inferDestroyMethodIfNecessary(Object bean, RootBeanDefinition beanDefinition);1467730834;If the current value of the given beanDefinition's "destroyMethodName" property is_{@link AbstractBeanDefinition#INFER_METHOD}, then attempt to infer a destroy method._Candidate methods are currently limited to public, no-arg methods named "close" or_"shutdown" (whether declared locally or inherited). The given BeanDefinition's_"destroyMethodName" is updated to be null if no such method is found, otherwise set_to the name of the inferred method. This constant serves as the default for the_{@code @Bean#destroyMethod} attribute and the value of the constant may also be_used in XML within the {@code <bean destroy-method="">} or {@code_<beans default-destroy-method="">} attributes._<p>Also processes the {@link java.io.Closeable} and {@link java.lang.AutoCloseable}_interfaces, reflectively calling the "close" method on implementing beans as well.;private String inferDestroyMethodIfNecessary(Object bean, RootBeanDefinition beanDefinition) {_		String destroyMethodName = beanDefinition.getDestroyMethodName()__		if (AbstractBeanDefinition.INFER_METHOD.equals(destroyMethodName) ||_				(destroyMethodName == null && closeableInterface.isInstance(bean))) {_			_			_			if (!(bean instanceof DisposableBean)) {_				try {_					return bean.getClass().getMethod(CLOSE_METHOD_NAME).getName()__				}_				catch (NoSuchMethodException ex) {_					try {_						return bean.getClass().getMethod(SHUTDOWN_METHOD_NAME).getName()__					}_					catch (NoSuchMethodException ex2) {_						_					}_				}_			}_			return null__		}_		return (StringUtils.hasLength(destroyMethodName) ? destroyMethodName : null)__	};if,the,current,value,of,the,given,bean,definition,s,destroy,method,name,property,is,link,abstract,bean,definition,then,attempt,to,infer,a,destroy,method,candidate,methods,are,currently,limited,to,public,no,arg,methods,named,close,or,shutdown,whether,declared,locally,or,inherited,the,given,bean,definition,s,destroy,method,name,is,updated,to,be,null,if,no,such,method,is,found,otherwise,set,to,the,name,of,the,inferred,method,this,constant,serves,as,the,default,for,the,code,bean,destroy,method,attribute,and,the,value,of,the,constant,may,also,be,used,in,xml,within,the,code,bean,destroy,method,or,code,beans,default,destroy,method,attributes,p,also,processes,the,link,java,io,closeable,and,link,java,lang,auto,closeable,interfaces,reflectively,calling,the,close,method,on,implementing,beans,as,well;private,string,infer,destroy,method,if,necessary,object,bean,root,bean,definition,bean,definition,string,destroy,method,name,bean,definition,get,destroy,method,name,if,abstract,bean,definition,equals,destroy,method,name,destroy,method,name,null,closeable,interface,is,instance,bean,if,bean,instanceof,disposable,bean,try,return,bean,get,class,get,method,get,name,catch,no,such,method,exception,ex,try,return,bean,get,class,get,method,get,name,catch,no,such,method,exception,ex2,return,null,return,string,utils,has,length,destroy,method,name,destroy,method,name,null
DisposableBeanAdapter -> private String inferDestroyMethodIfNecessary(Object bean, RootBeanDefinition beanDefinition);1469441195;If the current value of the given beanDefinition's "destroyMethodName" property is_{@link AbstractBeanDefinition#INFER_METHOD}, then attempt to infer a destroy method._Candidate methods are currently limited to public, no-arg methods named "close" or_"shutdown" (whether declared locally or inherited). The given BeanDefinition's_"destroyMethodName" is updated to be null if no such method is found, otherwise set_to the name of the inferred method. This constant serves as the default for the_{@code @Bean#destroyMethod} attribute and the value of the constant may also be_used in XML within the {@code <bean destroy-method="">} or {@code_<beans default-destroy-method="">} attributes._<p>Also processes the {@link java.io.Closeable} and {@link java.lang.AutoCloseable}_interfaces, reflectively calling the "close" method on implementing beans as well.;private String inferDestroyMethodIfNecessary(Object bean, RootBeanDefinition beanDefinition) {_		String destroyMethodName = beanDefinition.getDestroyMethodName()__		if (AbstractBeanDefinition.INFER_METHOD.equals(destroyMethodName) ||_				(destroyMethodName == null && bean instanceof AutoCloseable)) {_			_			_			if (!(bean instanceof DisposableBean)) {_				try {_					return bean.getClass().getMethod(CLOSE_METHOD_NAME).getName()__				}_				catch (NoSuchMethodException ex) {_					try {_						return bean.getClass().getMethod(SHUTDOWN_METHOD_NAME).getName()__					}_					catch (NoSuchMethodException ex2) {_						_					}_				}_			}_			return null__		}_		return (StringUtils.hasLength(destroyMethodName) ? destroyMethodName : null)__	};if,the,current,value,of,the,given,bean,definition,s,destroy,method,name,property,is,link,abstract,bean,definition,then,attempt,to,infer,a,destroy,method,candidate,methods,are,currently,limited,to,public,no,arg,methods,named,close,or,shutdown,whether,declared,locally,or,inherited,the,given,bean,definition,s,destroy,method,name,is,updated,to,be,null,if,no,such,method,is,found,otherwise,set,to,the,name,of,the,inferred,method,this,constant,serves,as,the,default,for,the,code,bean,destroy,method,attribute,and,the,value,of,the,constant,may,also,be,used,in,xml,within,the,code,bean,destroy,method,or,code,beans,default,destroy,method,attributes,p,also,processes,the,link,java,io,closeable,and,link,java,lang,auto,closeable,interfaces,reflectively,calling,the,close,method,on,implementing,beans,as,well;private,string,infer,destroy,method,if,necessary,object,bean,root,bean,definition,bean,definition,string,destroy,method,name,bean,definition,get,destroy,method,name,if,abstract,bean,definition,equals,destroy,method,name,destroy,method,name,null,bean,instanceof,auto,closeable,if,bean,instanceof,disposable,bean,try,return,bean,get,class,get,method,get,name,catch,no,such,method,exception,ex,try,return,bean,get,class,get,method,get,name,catch,no,such,method,exception,ex2,return,null,return,string,utils,has,length,destroy,method,name,destroy,method,name,null
DisposableBeanAdapter -> private String inferDestroyMethodIfNecessary(Object bean, RootBeanDefinition beanDefinition);1479746164;If the current value of the given beanDefinition's "destroyMethodName" property is_{@link AbstractBeanDefinition#INFER_METHOD}, then attempt to infer a destroy method._Candidate methods are currently limited to public, no-arg methods named "close" or_"shutdown" (whether declared locally or inherited). The given BeanDefinition's_"destroyMethodName" is updated to be null if no such method is found, otherwise set_to the name of the inferred method. This constant serves as the default for the_{@code @Bean#destroyMethod} attribute and the value of the constant may also be_used in XML within the {@code <bean destroy-method="">} or {@code_<beans default-destroy-method="">} attributes._<p>Also processes the {@link java.io.Closeable} and {@link java.lang.AutoCloseable}_interfaces, reflectively calling the "close" method on implementing beans as well.;private String inferDestroyMethodIfNecessary(Object bean, RootBeanDefinition beanDefinition) {_		String destroyMethodName = beanDefinition.getDestroyMethodName()__		if (AbstractBeanDefinition.INFER_METHOD.equals(destroyMethodName) ||_				(destroyMethodName == null && bean instanceof AutoCloseable)) {_			_			_			if (!(bean instanceof DisposableBean)) {_				try {_					return bean.getClass().getMethod(CLOSE_METHOD_NAME).getName()__				}_				catch (NoSuchMethodException ex) {_					try {_						return bean.getClass().getMethod(SHUTDOWN_METHOD_NAME).getName()__					}_					catch (NoSuchMethodException ex2) {_						_					}_				}_			}_			return null__		}_		return (StringUtils.hasLength(destroyMethodName) ? destroyMethodName : null)__	};if,the,current,value,of,the,given,bean,definition,s,destroy,method,name,property,is,link,abstract,bean,definition,then,attempt,to,infer,a,destroy,method,candidate,methods,are,currently,limited,to,public,no,arg,methods,named,close,or,shutdown,whether,declared,locally,or,inherited,the,given,bean,definition,s,destroy,method,name,is,updated,to,be,null,if,no,such,method,is,found,otherwise,set,to,the,name,of,the,inferred,method,this,constant,serves,as,the,default,for,the,code,bean,destroy,method,attribute,and,the,value,of,the,constant,may,also,be,used,in,xml,within,the,code,bean,destroy,method,or,code,beans,default,destroy,method,attributes,p,also,processes,the,link,java,io,closeable,and,link,java,lang,auto,closeable,interfaces,reflectively,calling,the,close,method,on,implementing,beans,as,well;private,string,infer,destroy,method,if,necessary,object,bean,root,bean,definition,bean,definition,string,destroy,method,name,bean,definition,get,destroy,method,name,if,abstract,bean,definition,equals,destroy,method,name,destroy,method,name,null,bean,instanceof,auto,closeable,if,bean,instanceof,disposable,bean,try,return,bean,get,class,get,method,get,name,catch,no,such,method,exception,ex,try,return,bean,get,class,get,method,get,name,catch,no,such,method,exception,ex2,return,null,return,string,utils,has,length,destroy,method,name,destroy,method,name,null
DisposableBeanAdapter -> private List<DestructionAwareBeanPostProcessor> filterPostProcessors(List<BeanPostProcessor> processors, Object bean);1450454045;Search for all DestructionAwareBeanPostProcessors in the List._@param processors the List to search_@return the filtered List of DestructionAwareBeanPostProcessors;private List<DestructionAwareBeanPostProcessor> filterPostProcessors(List<BeanPostProcessor> processors, Object bean) {_		List<DestructionAwareBeanPostProcessor> filteredPostProcessors = null__		if (!CollectionUtils.isEmpty(processors)) {_			filteredPostProcessors = new ArrayList<DestructionAwareBeanPostProcessor>(processors.size())__			for (BeanPostProcessor processor : processors) {_				if (processor instanceof DestructionAwareBeanPostProcessor) {_					DestructionAwareBeanPostProcessor dabpp = (DestructionAwareBeanPostProcessor) processor__					try {_						if (dabpp.requiresDestruction(bean)) {_							filteredPostProcessors.add(dabpp)__						}_					}_					catch (AbstractMethodError err) {_						_						_						filteredPostProcessors.add(dabpp)__					}_				}_			}_		}_		return filteredPostProcessors__	};search,for,all,destruction,aware,bean,post,processors,in,the,list,param,processors,the,list,to,search,return,the,filtered,list,of,destruction,aware,bean,post,processors;private,list,destruction,aware,bean,post,processor,filter,post,processors,list,bean,post,processor,processors,object,bean,list,destruction,aware,bean,post,processor,filtered,post,processors,null,if,collection,utils,is,empty,processors,filtered,post,processors,new,array,list,destruction,aware,bean,post,processor,processors,size,for,bean,post,processor,processor,processors,if,processor,instanceof,destruction,aware,bean,post,processor,destruction,aware,bean,post,processor,dabpp,destruction,aware,bean,post,processor,processor,try,if,dabpp,requires,destruction,bean,filtered,post,processors,add,dabpp,catch,abstract,method,error,err,filtered,post,processors,add,dabpp,return,filtered,post,processors
DisposableBeanAdapter -> private List<DestructionAwareBeanPostProcessor> filterPostProcessors(List<BeanPostProcessor> processors, Object bean);1454934048;Search for all DestructionAwareBeanPostProcessors in the List._@param processors the List to search_@return the filtered List of DestructionAwareBeanPostProcessors;private List<DestructionAwareBeanPostProcessor> filterPostProcessors(List<BeanPostProcessor> processors, Object bean) {_		List<DestructionAwareBeanPostProcessor> filteredPostProcessors = null__		if (!CollectionUtils.isEmpty(processors)) {_			filteredPostProcessors = new ArrayList<DestructionAwareBeanPostProcessor>(processors.size())__			for (BeanPostProcessor processor : processors) {_				if (processor instanceof DestructionAwareBeanPostProcessor) {_					DestructionAwareBeanPostProcessor dabpp = (DestructionAwareBeanPostProcessor) processor__					try {_						if (dabpp.requiresDestruction(bean)) {_							filteredPostProcessors.add(dabpp)__						}_					}_					catch (AbstractMethodError err) {_						_						_						filteredPostProcessors.add(dabpp)__					}_				}_			}_		}_		return filteredPostProcessors__	};search,for,all,destruction,aware,bean,post,processors,in,the,list,param,processors,the,list,to,search,return,the,filtered,list,of,destruction,aware,bean,post,processors;private,list,destruction,aware,bean,post,processor,filter,post,processors,list,bean,post,processor,processors,object,bean,list,destruction,aware,bean,post,processor,filtered,post,processors,null,if,collection,utils,is,empty,processors,filtered,post,processors,new,array,list,destruction,aware,bean,post,processor,processors,size,for,bean,post,processor,processor,processors,if,processor,instanceof,destruction,aware,bean,post,processor,destruction,aware,bean,post,processor,dabpp,destruction,aware,bean,post,processor,processor,try,if,dabpp,requires,destruction,bean,filtered,post,processors,add,dabpp,catch,abstract,method,error,err,filtered,post,processors,add,dabpp,return,filtered,post,processors
DisposableBeanAdapter -> private List<DestructionAwareBeanPostProcessor> filterPostProcessors(List<BeanPostProcessor> processors, Object bean);1467730834;Search for all DestructionAwareBeanPostProcessors in the List._@param processors the List to search_@return the filtered List of DestructionAwareBeanPostProcessors;private List<DestructionAwareBeanPostProcessor> filterPostProcessors(List<BeanPostProcessor> processors, Object bean) {_		List<DestructionAwareBeanPostProcessor> filteredPostProcessors = null__		if (!CollectionUtils.isEmpty(processors)) {_			filteredPostProcessors = new ArrayList<>(processors.size())__			for (BeanPostProcessor processor : processors) {_				if (processor instanceof DestructionAwareBeanPostProcessor) {_					DestructionAwareBeanPostProcessor dabpp = (DestructionAwareBeanPostProcessor) processor__					try {_						if (dabpp.requiresDestruction(bean)) {_							filteredPostProcessors.add(dabpp)__						}_					}_					catch (AbstractMethodError err) {_						_						_						filteredPostProcessors.add(dabpp)__					}_				}_			}_		}_		return filteredPostProcessors__	};search,for,all,destruction,aware,bean,post,processors,in,the,list,param,processors,the,list,to,search,return,the,filtered,list,of,destruction,aware,bean,post,processors;private,list,destruction,aware,bean,post,processor,filter,post,processors,list,bean,post,processor,processors,object,bean,list,destruction,aware,bean,post,processor,filtered,post,processors,null,if,collection,utils,is,empty,processors,filtered,post,processors,new,array,list,processors,size,for,bean,post,processor,processor,processors,if,processor,instanceof,destruction,aware,bean,post,processor,destruction,aware,bean,post,processor,dabpp,destruction,aware,bean,post,processor,processor,try,if,dabpp,requires,destruction,bean,filtered,post,processors,add,dabpp,catch,abstract,method,error,err,filtered,post,processors,add,dabpp,return,filtered,post,processors
DisposableBeanAdapter -> private List<DestructionAwareBeanPostProcessor> filterPostProcessors(List<BeanPostProcessor> processors, Object bean);1469441195;Search for all DestructionAwareBeanPostProcessors in the List._@param processors the List to search_@return the filtered List of DestructionAwareBeanPostProcessors;private List<DestructionAwareBeanPostProcessor> filterPostProcessors(List<BeanPostProcessor> processors, Object bean) {_		List<DestructionAwareBeanPostProcessor> filteredPostProcessors = null__		if (!CollectionUtils.isEmpty(processors)) {_			filteredPostProcessors = new ArrayList<>(processors.size())__			for (BeanPostProcessor processor : processors) {_				if (processor instanceof DestructionAwareBeanPostProcessor) {_					DestructionAwareBeanPostProcessor dabpp = (DestructionAwareBeanPostProcessor) processor__					try {_						if (dabpp.requiresDestruction(bean)) {_							filteredPostProcessors.add(dabpp)__						}_					}_					catch (AbstractMethodError err) {_						_						_						filteredPostProcessors.add(dabpp)__					}_				}_			}_		}_		return filteredPostProcessors__	};search,for,all,destruction,aware,bean,post,processors,in,the,list,param,processors,the,list,to,search,return,the,filtered,list,of,destruction,aware,bean,post,processors;private,list,destruction,aware,bean,post,processor,filter,post,processors,list,bean,post,processor,processors,object,bean,list,destruction,aware,bean,post,processor,filtered,post,processors,null,if,collection,utils,is,empty,processors,filtered,post,processors,new,array,list,processors,size,for,bean,post,processor,processor,processors,if,processor,instanceof,destruction,aware,bean,post,processor,destruction,aware,bean,post,processor,dabpp,destruction,aware,bean,post,processor,processor,try,if,dabpp,requires,destruction,bean,filtered,post,processors,add,dabpp,catch,abstract,method,error,err,filtered,post,processors,add,dabpp,return,filtered,post,processors
DisposableBeanAdapter -> private List<DestructionAwareBeanPostProcessor> filterPostProcessors(List<BeanPostProcessor> processors, Object bean);1479746164;Search for all DestructionAwareBeanPostProcessors in the List._@param processors the List to search_@return the filtered List of DestructionAwareBeanPostProcessors;private List<DestructionAwareBeanPostProcessor> filterPostProcessors(List<BeanPostProcessor> processors, Object bean) {_		List<DestructionAwareBeanPostProcessor> filteredPostProcessors = null__		if (!CollectionUtils.isEmpty(processors)) {_			filteredPostProcessors = new ArrayList<>(processors.size())__			for (BeanPostProcessor processor : processors) {_				if (processor instanceof DestructionAwareBeanPostProcessor) {_					DestructionAwareBeanPostProcessor dabpp = (DestructionAwareBeanPostProcessor) processor__					if (dabpp.requiresDestruction(bean)) {_						filteredPostProcessors.add(dabpp)__					}_				}_			}_		}_		return filteredPostProcessors__	};search,for,all,destruction,aware,bean,post,processors,in,the,list,param,processors,the,list,to,search,return,the,filtered,list,of,destruction,aware,bean,post,processors;private,list,destruction,aware,bean,post,processor,filter,post,processors,list,bean,post,processor,processors,object,bean,list,destruction,aware,bean,post,processor,filtered,post,processors,null,if,collection,utils,is,empty,processors,filtered,post,processors,new,array,list,processors,size,for,bean,post,processor,processor,processors,if,processor,instanceof,destruction,aware,bean,post,processor,destruction,aware,bean,post,processor,dabpp,destruction,aware,bean,post,processor,processor,if,dabpp,requires,destruction,bean,filtered,post,processors,add,dabpp,return,filtered,post,processors
DisposableBeanAdapter -> private List<DestructionAwareBeanPostProcessor> filterPostProcessors(List<BeanPostProcessor> processors, Object bean);1495868221;Search for all DestructionAwareBeanPostProcessors in the List._@param processors the List to search_@return the filtered List of DestructionAwareBeanPostProcessors;private List<DestructionAwareBeanPostProcessor> filterPostProcessors(List<BeanPostProcessor> processors, Object bean) {_		List<DestructionAwareBeanPostProcessor> filteredPostProcessors = null__		if (!CollectionUtils.isEmpty(processors)) {_			filteredPostProcessors = new ArrayList<>(processors.size())__			for (BeanPostProcessor processor : processors) {_				if (processor instanceof DestructionAwareBeanPostProcessor) {_					DestructionAwareBeanPostProcessor dabpp = (DestructionAwareBeanPostProcessor) processor__					if (dabpp.requiresDestruction(bean)) {_						filteredPostProcessors.add(dabpp)__					}_				}_			}_		}_		return filteredPostProcessors__	};search,for,all,destruction,aware,bean,post,processors,in,the,list,param,processors,the,list,to,search,return,the,filtered,list,of,destruction,aware,bean,post,processors;private,list,destruction,aware,bean,post,processor,filter,post,processors,list,bean,post,processor,processors,object,bean,list,destruction,aware,bean,post,processor,filtered,post,processors,null,if,collection,utils,is,empty,processors,filtered,post,processors,new,array,list,processors,size,for,bean,post,processor,processor,processors,if,processor,instanceof,destruction,aware,bean,post,processor,destruction,aware,bean,post,processor,dabpp,destruction,aware,bean,post,processor,processor,if,dabpp,requires,destruction,bean,filtered,post,processors,add,dabpp,return,filtered,post,processors
DisposableBeanAdapter -> public DisposableBeanAdapter(Object bean, List<BeanPostProcessor> postProcessors, AccessControlContext acc);1364503447;Create a new DisposableBeanAdapter for the given bean._@param bean the bean instance (never {@code null})_@param postProcessors the List of BeanPostProcessors_(potentially DestructionAwareBeanPostProcessor), if any;public DisposableBeanAdapter(Object bean, List<BeanPostProcessor> postProcessors, AccessControlContext acc) {_		Assert.notNull(bean, "Disposable bean must not be null")__		this.bean = bean__		this.beanName = null__		this.invokeDisposableBean = (this.bean instanceof DisposableBean)__		this.nonPublicAccessAllowed = true__		this.acc = acc__		this.beanPostProcessors = filterPostProcessors(postProcessors)__	};create,a,new,disposable,bean,adapter,for,the,given,bean,param,bean,the,bean,instance,never,code,null,param,post,processors,the,list,of,bean,post,processors,potentially,destruction,aware,bean,post,processor,if,any;public,disposable,bean,adapter,object,bean,list,bean,post,processor,post,processors,access,control,context,acc,assert,not,null,bean,disposable,bean,must,not,be,null,this,bean,bean,this,bean,name,null,this,invoke,disposable,bean,this,bean,instanceof,disposable,bean,this,non,public,access,allowed,true,this,acc,acc,this,bean,post,processors,filter,post,processors,post,processors
DisposableBeanAdapter -> public DisposableBeanAdapter(Object bean, List<BeanPostProcessor> postProcessors, AccessControlContext acc);1368482696;Create a new DisposableBeanAdapter for the given bean._@param bean the bean instance (never {@code null})_@param postProcessors the List of BeanPostProcessors_(potentially DestructionAwareBeanPostProcessor), if any;public DisposableBeanAdapter(Object bean, List<BeanPostProcessor> postProcessors, AccessControlContext acc) {_		Assert.notNull(bean, "Disposable bean must not be null")__		this.bean = bean__		this.beanName = null__		this.invokeDisposableBean = (this.bean instanceof DisposableBean)__		this.nonPublicAccessAllowed = true__		this.acc = acc__		this.beanPostProcessors = filterPostProcessors(postProcessors)__	};create,a,new,disposable,bean,adapter,for,the,given,bean,param,bean,the,bean,instance,never,code,null,param,post,processors,the,list,of,bean,post,processors,potentially,destruction,aware,bean,post,processor,if,any;public,disposable,bean,adapter,object,bean,list,bean,post,processor,post,processors,access,control,context,acc,assert,not,null,bean,disposable,bean,must,not,be,null,this,bean,bean,this,bean,name,null,this,invoke,disposable,bean,this,bean,instanceof,disposable,bean,this,non,public,access,allowed,true,this,acc,acc,this,bean,post,processors,filter,post,processors,post,processors
DisposableBeanAdapter -> public DisposableBeanAdapter(Object bean, List<BeanPostProcessor> postProcessors, AccessControlContext acc);1385412762;Create a new DisposableBeanAdapter for the given bean._@param bean the bean instance (never {@code null})_@param postProcessors the List of BeanPostProcessors_(potentially DestructionAwareBeanPostProcessor), if any;public DisposableBeanAdapter(Object bean, List<BeanPostProcessor> postProcessors, AccessControlContext acc) {_		Assert.notNull(bean, "Disposable bean must not be null")__		this.bean = bean__		this.beanName = null__		this.invokeDisposableBean = (this.bean instanceof DisposableBean)__		this.nonPublicAccessAllowed = true__		this.acc = acc__		this.beanPostProcessors = filterPostProcessors(postProcessors)__	};create,a,new,disposable,bean,adapter,for,the,given,bean,param,bean,the,bean,instance,never,code,null,param,post,processors,the,list,of,bean,post,processors,potentially,destruction,aware,bean,post,processor,if,any;public,disposable,bean,adapter,object,bean,list,bean,post,processor,post,processors,access,control,context,acc,assert,not,null,bean,disposable,bean,must,not,be,null,this,bean,bean,this,bean,name,null,this,invoke,disposable,bean,this,bean,instanceof,disposable,bean,this,non,public,access,allowed,true,this,acc,acc,this,bean,post,processors,filter,post,processors,post,processors
DisposableBeanAdapter -> public DisposableBeanAdapter(Object bean, List<BeanPostProcessor> postProcessors, AccessControlContext acc);1398638841;Create a new DisposableBeanAdapter for the given bean._@param bean the bean instance (never {@code null})_@param postProcessors the List of BeanPostProcessors_(potentially DestructionAwareBeanPostProcessor), if any;public DisposableBeanAdapter(Object bean, List<BeanPostProcessor> postProcessors, AccessControlContext acc) {_		Assert.notNull(bean, "Disposable bean must not be null")__		this.bean = bean__		this.beanName = null__		this.invokeDisposableBean = (this.bean instanceof DisposableBean)__		this.nonPublicAccessAllowed = true__		this.acc = acc__		this.beanPostProcessors = filterPostProcessors(postProcessors)__	};create,a,new,disposable,bean,adapter,for,the,given,bean,param,bean,the,bean,instance,never,code,null,param,post,processors,the,list,of,bean,post,processors,potentially,destruction,aware,bean,post,processor,if,any;public,disposable,bean,adapter,object,bean,list,bean,post,processor,post,processors,access,control,context,acc,assert,not,null,bean,disposable,bean,must,not,be,null,this,bean,bean,this,bean,name,null,this,invoke,disposable,bean,this,bean,instanceof,disposable,bean,this,non,public,access,allowed,true,this,acc,acc,this,bean,post,processors,filter,post,processors,post,processors
DisposableBeanAdapter -> public DisposableBeanAdapter(Object bean, List<BeanPostProcessor> postProcessors, AccessControlContext acc);1432125256;Create a new DisposableBeanAdapter for the given bean._@param bean the bean instance (never {@code null})_@param postProcessors the List of BeanPostProcessors_(potentially DestructionAwareBeanPostProcessor), if any;public DisposableBeanAdapter(Object bean, List<BeanPostProcessor> postProcessors, AccessControlContext acc) {_		Assert.notNull(bean, "Disposable bean must not be null")__		this.bean = bean__		this.beanName = null__		this.invokeDisposableBean = (this.bean instanceof DisposableBean)__		this.nonPublicAccessAllowed = true__		this.acc = acc__		this.beanPostProcessors = filterPostProcessors(postProcessors)__	};create,a,new,disposable,bean,adapter,for,the,given,bean,param,bean,the,bean,instance,never,code,null,param,post,processors,the,list,of,bean,post,processors,potentially,destruction,aware,bean,post,processor,if,any;public,disposable,bean,adapter,object,bean,list,bean,post,processor,post,processors,access,control,context,acc,assert,not,null,bean,disposable,bean,must,not,be,null,this,bean,bean,this,bean,name,null,this,invoke,disposable,bean,this,bean,instanceof,disposable,bean,this,non,public,access,allowed,true,this,acc,acc,this,bean,post,processors,filter,post,processors,post,processors
DisposableBeanAdapter -> public DisposableBeanAdapter(Object bean, List<BeanPostProcessor> postProcessors, AccessControlContext acc);1432135182;Create a new DisposableBeanAdapter for the given bean._@param bean the bean instance (never {@code null})_@param postProcessors the List of BeanPostProcessors_(potentially DestructionAwareBeanPostProcessor), if any;public DisposableBeanAdapter(Object bean, List<BeanPostProcessor> postProcessors, AccessControlContext acc) {_		Assert.notNull(bean, "Disposable bean must not be null")__		this.bean = bean__		this.beanName = null__		this.invokeDisposableBean = (this.bean instanceof DisposableBean)__		this.nonPublicAccessAllowed = true__		this.acc = acc__		this.beanPostProcessors = filterPostProcessors(postProcessors)__	};create,a,new,disposable,bean,adapter,for,the,given,bean,param,bean,the,bean,instance,never,code,null,param,post,processors,the,list,of,bean,post,processors,potentially,destruction,aware,bean,post,processor,if,any;public,disposable,bean,adapter,object,bean,list,bean,post,processor,post,processors,access,control,context,acc,assert,not,null,bean,disposable,bean,must,not,be,null,this,bean,bean,this,bean,name,null,this,invoke,disposable,bean,this,bean,instanceof,disposable,bean,this,non,public,access,allowed,true,this,acc,acc,this,bean,post,processors,filter,post,processors,post,processors
DisposableBeanAdapter -> public DisposableBeanAdapter(Object bean, List<BeanPostProcessor> postProcessors, AccessControlContext acc);1436434188;Create a new DisposableBeanAdapter for the given bean._@param bean the bean instance (never {@code null})_@param postProcessors the List of BeanPostProcessors_(potentially DestructionAwareBeanPostProcessor), if any;public DisposableBeanAdapter(Object bean, List<BeanPostProcessor> postProcessors, AccessControlContext acc) {_		Assert.notNull(bean, "Disposable bean must not be null")__		this.bean = bean__		this.beanName = null__		this.invokeDisposableBean = (this.bean instanceof DisposableBean)__		this.nonPublicAccessAllowed = true__		this.acc = acc__		this.beanPostProcessors = filterPostProcessors(postProcessors)__	};create,a,new,disposable,bean,adapter,for,the,given,bean,param,bean,the,bean,instance,never,code,null,param,post,processors,the,list,of,bean,post,processors,potentially,destruction,aware,bean,post,processor,if,any;public,disposable,bean,adapter,object,bean,list,bean,post,processor,post,processors,access,control,context,acc,assert,not,null,bean,disposable,bean,must,not,be,null,this,bean,bean,this,bean,name,null,this,invoke,disposable,bean,this,bean,instanceof,disposable,bean,this,non,public,access,allowed,true,this,acc,acc,this,bean,post,processors,filter,post,processors,post,processors
DisposableBeanAdapter -> public DisposableBeanAdapter(Object bean, List<BeanPostProcessor> postProcessors, AccessControlContext acc);1447195666;Create a new DisposableBeanAdapter for the given bean._@param bean the bean instance (never {@code null})_@param postProcessors the List of BeanPostProcessors_(potentially DestructionAwareBeanPostProcessor), if any;public DisposableBeanAdapter(Object bean, List<BeanPostProcessor> postProcessors, AccessControlContext acc) {_		Assert.notNull(bean, "Disposable bean must not be null")__		this.bean = bean__		this.beanName = null__		this.invokeDisposableBean = (this.bean instanceof DisposableBean)__		this.nonPublicAccessAllowed = true__		this.acc = acc__		this.beanPostProcessors = filterPostProcessors(postProcessors)__	};create,a,new,disposable,bean,adapter,for,the,given,bean,param,bean,the,bean,instance,never,code,null,param,post,processors,the,list,of,bean,post,processors,potentially,destruction,aware,bean,post,processor,if,any;public,disposable,bean,adapter,object,bean,list,bean,post,processor,post,processors,access,control,context,acc,assert,not,null,bean,disposable,bean,must,not,be,null,this,bean,bean,this,bean,name,null,this,invoke,disposable,bean,this,bean,instanceof,disposable,bean,this,non,public,access,allowed,true,this,acc,acc,this,bean,post,processors,filter,post,processors,post,processors
DisposableBeanAdapter -> public DisposableBeanAdapter(Object bean, List<BeanPostProcessor> postProcessors, AccessControlContext acc);1450454045;Create a new DisposableBeanAdapter for the given bean._@param bean the bean instance (never {@code null})_@param postProcessors the List of BeanPostProcessors_(potentially DestructionAwareBeanPostProcessor), if any;public DisposableBeanAdapter(Object bean, List<BeanPostProcessor> postProcessors, AccessControlContext acc) {_		Assert.notNull(bean, "Disposable bean must not be null")__		this.bean = bean__		this.beanName = null__		this.invokeDisposableBean = (this.bean instanceof DisposableBean)__		this.nonPublicAccessAllowed = true__		this.acc = acc__		this.beanPostProcessors = filterPostProcessors(postProcessors, bean)__	};create,a,new,disposable,bean,adapter,for,the,given,bean,param,bean,the,bean,instance,never,code,null,param,post,processors,the,list,of,bean,post,processors,potentially,destruction,aware,bean,post,processor,if,any;public,disposable,bean,adapter,object,bean,list,bean,post,processor,post,processors,access,control,context,acc,assert,not,null,bean,disposable,bean,must,not,be,null,this,bean,bean,this,bean,name,null,this,invoke,disposable,bean,this,bean,instanceof,disposable,bean,this,non,public,access,allowed,true,this,acc,acc,this,bean,post,processors,filter,post,processors,post,processors,bean
DisposableBeanAdapter -> public DisposableBeanAdapter(Object bean, List<BeanPostProcessor> postProcessors, AccessControlContext acc);1454934048;Create a new DisposableBeanAdapter for the given bean._@param bean the bean instance (never {@code null})_@param postProcessors the List of BeanPostProcessors_(potentially DestructionAwareBeanPostProcessor), if any;public DisposableBeanAdapter(Object bean, List<BeanPostProcessor> postProcessors, AccessControlContext acc) {_		Assert.notNull(bean, "Disposable bean must not be null")__		this.bean = bean__		this.beanName = null__		this.invokeDisposableBean = (this.bean instanceof DisposableBean)__		this.nonPublicAccessAllowed = true__		this.acc = acc__		this.beanPostProcessors = filterPostProcessors(postProcessors, bean)__	};create,a,new,disposable,bean,adapter,for,the,given,bean,param,bean,the,bean,instance,never,code,null,param,post,processors,the,list,of,bean,post,processors,potentially,destruction,aware,bean,post,processor,if,any;public,disposable,bean,adapter,object,bean,list,bean,post,processor,post,processors,access,control,context,acc,assert,not,null,bean,disposable,bean,must,not,be,null,this,bean,bean,this,bean,name,null,this,invoke,disposable,bean,this,bean,instanceof,disposable,bean,this,non,public,access,allowed,true,this,acc,acc,this,bean,post,processors,filter,post,processors,post,processors,bean
DisposableBeanAdapter -> public DisposableBeanAdapter(Object bean, List<BeanPostProcessor> postProcessors, AccessControlContext acc);1467730834;Create a new DisposableBeanAdapter for the given bean._@param bean the bean instance (never {@code null})_@param postProcessors the List of BeanPostProcessors_(potentially DestructionAwareBeanPostProcessor), if any;public DisposableBeanAdapter(Object bean, List<BeanPostProcessor> postProcessors, AccessControlContext acc) {_		Assert.notNull(bean, "Disposable bean must not be null")__		this.bean = bean__		this.beanName = null__		this.invokeDisposableBean = (this.bean instanceof DisposableBean)__		this.nonPublicAccessAllowed = true__		this.acc = acc__		this.beanPostProcessors = filterPostProcessors(postProcessors, bean)__	};create,a,new,disposable,bean,adapter,for,the,given,bean,param,bean,the,bean,instance,never,code,null,param,post,processors,the,list,of,bean,post,processors,potentially,destruction,aware,bean,post,processor,if,any;public,disposable,bean,adapter,object,bean,list,bean,post,processor,post,processors,access,control,context,acc,assert,not,null,bean,disposable,bean,must,not,be,null,this,bean,bean,this,bean,name,null,this,invoke,disposable,bean,this,bean,instanceof,disposable,bean,this,non,public,access,allowed,true,this,acc,acc,this,bean,post,processors,filter,post,processors,post,processors,bean
DisposableBeanAdapter -> public DisposableBeanAdapter(Object bean, List<BeanPostProcessor> postProcessors, AccessControlContext acc);1469441195;Create a new DisposableBeanAdapter for the given bean._@param bean the bean instance (never {@code null})_@param postProcessors the List of BeanPostProcessors_(potentially DestructionAwareBeanPostProcessor), if any;public DisposableBeanAdapter(Object bean, List<BeanPostProcessor> postProcessors, AccessControlContext acc) {_		Assert.notNull(bean, "Disposable bean must not be null")__		this.bean = bean__		this.beanName = null__		this.invokeDisposableBean = (this.bean instanceof DisposableBean)__		this.nonPublicAccessAllowed = true__		this.acc = acc__		this.beanPostProcessors = filterPostProcessors(postProcessors, bean)__	};create,a,new,disposable,bean,adapter,for,the,given,bean,param,bean,the,bean,instance,never,code,null,param,post,processors,the,list,of,bean,post,processors,potentially,destruction,aware,bean,post,processor,if,any;public,disposable,bean,adapter,object,bean,list,bean,post,processor,post,processors,access,control,context,acc,assert,not,null,bean,disposable,bean,must,not,be,null,this,bean,bean,this,bean,name,null,this,invoke,disposable,bean,this,bean,instanceof,disposable,bean,this,non,public,access,allowed,true,this,acc,acc,this,bean,post,processors,filter,post,processors,post,processors,bean
DisposableBeanAdapter -> public DisposableBeanAdapter(Object bean, List<BeanPostProcessor> postProcessors, AccessControlContext acc);1479746164;Create a new DisposableBeanAdapter for the given bean._@param bean the bean instance (never {@code null})_@param postProcessors the List of BeanPostProcessors_(potentially DestructionAwareBeanPostProcessor), if any;public DisposableBeanAdapter(Object bean, List<BeanPostProcessor> postProcessors, AccessControlContext acc) {_		Assert.notNull(bean, "Disposable bean must not be null")__		this.bean = bean__		this.beanName = null__		this.invokeDisposableBean = (this.bean instanceof DisposableBean)__		this.nonPublicAccessAllowed = true__		this.acc = acc__		this.beanPostProcessors = filterPostProcessors(postProcessors, bean)__	};create,a,new,disposable,bean,adapter,for,the,given,bean,param,bean,the,bean,instance,never,code,null,param,post,processors,the,list,of,bean,post,processors,potentially,destruction,aware,bean,post,processor,if,any;public,disposable,bean,adapter,object,bean,list,bean,post,processor,post,processors,access,control,context,acc,assert,not,null,bean,disposable,bean,must,not,be,null,this,bean,bean,this,bean,name,null,this,invoke,disposable,bean,this,bean,instanceof,disposable,bean,this,non,public,access,allowed,true,this,acc,acc,this,bean,post,processors,filter,post,processors,post,processors,bean
DisposableBeanAdapter -> public DisposableBeanAdapter(Object bean, List<BeanPostProcessor> postProcessors, AccessControlContext acc);1495868221;Create a new DisposableBeanAdapter for the given bean._@param bean the bean instance (never {@code null})_@param postProcessors the List of BeanPostProcessors_(potentially DestructionAwareBeanPostProcessor), if any;public DisposableBeanAdapter(Object bean, List<BeanPostProcessor> postProcessors, AccessControlContext acc) {_		Assert.notNull(bean, "Disposable bean must not be null")__		this.bean = bean__		this.beanName = null__		this.invokeDisposableBean = (this.bean instanceof DisposableBean)__		this.nonPublicAccessAllowed = true__		this.acc = acc__		this.beanPostProcessors = filterPostProcessors(postProcessors, bean)__	};create,a,new,disposable,bean,adapter,for,the,given,bean,param,bean,the,bean,instance,never,code,null,param,post,processors,the,list,of,bean,post,processors,potentially,destruction,aware,bean,post,processor,if,any;public,disposable,bean,adapter,object,bean,list,bean,post,processor,post,processors,access,control,context,acc,assert,not,null,bean,disposable,bean,must,not,be,null,this,bean,bean,this,bean,name,null,this,invoke,disposable,bean,this,bean,instanceof,disposable,bean,this,non,public,access,allowed,true,this,acc,acc,this,bean,post,processors,filter,post,processors,post,processors,bean
DisposableBeanAdapter -> public DisposableBeanAdapter(Object bean, List<BeanPostProcessor> postProcessors, AccessControlContext acc);1496837955;Create a new DisposableBeanAdapter for the given bean._@param bean the bean instance (never {@code null})_@param postProcessors the List of BeanPostProcessors_(potentially DestructionAwareBeanPostProcessor), if any;public DisposableBeanAdapter(Object bean, List<BeanPostProcessor> postProcessors, AccessControlContext acc) {_		Assert.notNull(bean, "Disposable bean must not be null")__		this.bean = bean__		this.beanName = null__		this.invokeDisposableBean = (this.bean instanceof DisposableBean)__		this.nonPublicAccessAllowed = true__		this.acc = acc__		this.beanPostProcessors = filterPostProcessors(postProcessors, bean)__	};create,a,new,disposable,bean,adapter,for,the,given,bean,param,bean,the,bean,instance,never,code,null,param,post,processors,the,list,of,bean,post,processors,potentially,destruction,aware,bean,post,processor,if,any;public,disposable,bean,adapter,object,bean,list,bean,post,processor,post,processors,access,control,context,acc,assert,not,null,bean,disposable,bean,must,not,be,null,this,bean,bean,this,bean,name,null,this,invoke,disposable,bean,this,bean,instanceof,disposable,bean,this,non,public,access,allowed,true,this,acc,acc,this,bean,post,processors,filter,post,processors,post,processors,bean
DisposableBeanAdapter -> public DisposableBeanAdapter(Object bean, List<BeanPostProcessor> postProcessors, AccessControlContext acc);1498780456;Create a new DisposableBeanAdapter for the given bean._@param bean the bean instance (never {@code null})_@param postProcessors the List of BeanPostProcessors_(potentially DestructionAwareBeanPostProcessor), if any;public DisposableBeanAdapter(Object bean, List<BeanPostProcessor> postProcessors, AccessControlContext acc) {_		Assert.notNull(bean, "Disposable bean must not be null")__		this.bean = bean__		this.beanName = bean.getClass().getName()__		this.invokeDisposableBean = (this.bean instanceof DisposableBean)__		this.nonPublicAccessAllowed = true__		this.acc = acc__		this.beanPostProcessors = filterPostProcessors(postProcessors, bean)__	};create,a,new,disposable,bean,adapter,for,the,given,bean,param,bean,the,bean,instance,never,code,null,param,post,processors,the,list,of,bean,post,processors,potentially,destruction,aware,bean,post,processor,if,any;public,disposable,bean,adapter,object,bean,list,bean,post,processor,post,processors,access,control,context,acc,assert,not,null,bean,disposable,bean,must,not,be,null,this,bean,bean,this,bean,name,bean,get,class,get,name,this,invoke,disposable,bean,this,bean,instanceof,disposable,bean,this,non,public,access,allowed,true,this,acc,acc,this,bean,post,processors,filter,post,processors,post,processors,bean
DisposableBeanAdapter -> public DisposableBeanAdapter(Object bean, List<BeanPostProcessor> postProcessors, AccessControlContext acc);1530174524;Create a new DisposableBeanAdapter for the given bean._@param bean the bean instance (never {@code null})_@param postProcessors the List of BeanPostProcessors_(potentially DestructionAwareBeanPostProcessor), if any;public DisposableBeanAdapter(Object bean, List<BeanPostProcessor> postProcessors, AccessControlContext acc) {_		Assert.notNull(bean, "Disposable bean must not be null")__		this.bean = bean__		this.beanName = bean.getClass().getName()__		this.invokeDisposableBean = (this.bean instanceof DisposableBean)__		this.nonPublicAccessAllowed = true__		this.acc = acc__		this.beanPostProcessors = filterPostProcessors(postProcessors, bean)__	};create,a,new,disposable,bean,adapter,for,the,given,bean,param,bean,the,bean,instance,never,code,null,param,post,processors,the,list,of,bean,post,processors,potentially,destruction,aware,bean,post,processor,if,any;public,disposable,bean,adapter,object,bean,list,bean,post,processor,post,processors,access,control,context,acc,assert,not,null,bean,disposable,bean,must,not,be,null,this,bean,bean,this,bean,name,bean,get,class,get,name,this,invoke,disposable,bean,this,bean,instanceof,disposable,bean,this,non,public,access,allowed,true,this,acc,acc,this,bean,post,processors,filter,post,processors,post,processors,bean
DisposableBeanAdapter -> public DisposableBeanAdapter(Object bean, List<BeanPostProcessor> postProcessors, AccessControlContext acc);1532091916;Create a new DisposableBeanAdapter for the given bean._@param bean the bean instance (never {@code null})_@param postProcessors the List of BeanPostProcessors_(potentially DestructionAwareBeanPostProcessor), if any;public DisposableBeanAdapter(Object bean, List<BeanPostProcessor> postProcessors, AccessControlContext acc) {_		Assert.notNull(bean, "Disposable bean must not be null")__		this.bean = bean__		this.beanName = bean.getClass().getName()__		this.invokeDisposableBean = (this.bean instanceof DisposableBean)__		this.nonPublicAccessAllowed = true__		this.acc = acc__		this.beanPostProcessors = filterPostProcessors(postProcessors, bean)__	};create,a,new,disposable,bean,adapter,for,the,given,bean,param,bean,the,bean,instance,never,code,null,param,post,processors,the,list,of,bean,post,processors,potentially,destruction,aware,bean,post,processor,if,any;public,disposable,bean,adapter,object,bean,list,bean,post,processor,post,processors,access,control,context,acc,assert,not,null,bean,disposable,bean,must,not,be,null,this,bean,bean,this,bean,name,bean,get,class,get,name,this,invoke,disposable,bean,this,bean,instanceof,disposable,bean,this,non,public,access,allowed,true,this,acc,acc,this,bean,post,processors,filter,post,processors,post,processors,bean
DisposableBeanAdapter -> public DisposableBeanAdapter(Object bean, List<BeanPostProcessor> postProcessors, AccessControlContext acc);1532706365;Create a new DisposableBeanAdapter for the given bean._@param bean the bean instance (never {@code null})_@param postProcessors the List of BeanPostProcessors_(potentially DestructionAwareBeanPostProcessor), if any;public DisposableBeanAdapter(Object bean, List<BeanPostProcessor> postProcessors, AccessControlContext acc) {_		Assert.notNull(bean, "Disposable bean must not be null")__		this.bean = bean__		this.beanName = bean.getClass().getName()__		this.invokeDisposableBean = (this.bean instanceof DisposableBean)__		this.nonPublicAccessAllowed = true__		this.acc = acc__		this.beanPostProcessors = filterPostProcessors(postProcessors, bean)__	};create,a,new,disposable,bean,adapter,for,the,given,bean,param,bean,the,bean,instance,never,code,null,param,post,processors,the,list,of,bean,post,processors,potentially,destruction,aware,bean,post,processor,if,any;public,disposable,bean,adapter,object,bean,list,bean,post,processor,post,processors,access,control,context,acc,assert,not,null,bean,disposable,bean,must,not,be,null,this,bean,bean,this,bean,name,bean,get,class,get,name,this,invoke,disposable,bean,this,bean,instanceof,disposable,bean,this,non,public,access,allowed,true,this,acc,acc,this,bean,post,processors,filter,post,processors,post,processors,bean
DisposableBeanAdapter -> public DisposableBeanAdapter(Object bean, List<BeanPostProcessor> postProcessors, AccessControlContext acc);1537391140;Create a new DisposableBeanAdapter for the given bean._@param bean the bean instance (never {@code null})_@param postProcessors the List of BeanPostProcessors_(potentially DestructionAwareBeanPostProcessor), if any;public DisposableBeanAdapter(Object bean, List<BeanPostProcessor> postProcessors, AccessControlContext acc) {_		Assert.notNull(bean, "Disposable bean must not be null")__		this.bean = bean__		this.beanName = bean.getClass().getName()__		this.invokeDisposableBean = (this.bean instanceof DisposableBean)__		this.nonPublicAccessAllowed = true__		this.acc = acc__		this.beanPostProcessors = filterPostProcessors(postProcessors, bean)__	};create,a,new,disposable,bean,adapter,for,the,given,bean,param,bean,the,bean,instance,never,code,null,param,post,processors,the,list,of,bean,post,processors,potentially,destruction,aware,bean,post,processor,if,any;public,disposable,bean,adapter,object,bean,list,bean,post,processor,post,processors,access,control,context,acc,assert,not,null,bean,disposable,bean,must,not,be,null,this,bean,bean,this,bean,name,bean,get,class,get,name,this,invoke,disposable,bean,this,bean,instanceof,disposable,bean,this,non,public,access,allowed,true,this,acc,acc,this,bean,post,processors,filter,post,processors,post,processors,bean
DisposableBeanAdapter -> @Nullable 	private String inferDestroyMethodIfNecessary(Object bean, RootBeanDefinition beanDefinition);1495868221;If the current value of the given beanDefinition's "destroyMethodName" property is_{@link AbstractBeanDefinition#INFER_METHOD}, then attempt to infer a destroy method._Candidate methods are currently limited to public, no-arg methods named "close" or_"shutdown" (whether declared locally or inherited). The given BeanDefinition's_"destroyMethodName" is updated to be null if no such method is found, otherwise set_to the name of the inferred method. This constant serves as the default for the_{@code @Bean#destroyMethod} attribute and the value of the constant may also be_used in XML within the {@code <bean destroy-method="">} or {@code_<beans default-destroy-method="">} attributes._<p>Also processes the {@link java.io.Closeable} and {@link java.lang.AutoCloseable}_interfaces, reflectively calling the "close" method on implementing beans as well.;@Nullable_	private String inferDestroyMethodIfNecessary(Object bean, RootBeanDefinition beanDefinition) {_		String destroyMethodName = beanDefinition.getDestroyMethodName()__		if (AbstractBeanDefinition.INFER_METHOD.equals(destroyMethodName) ||_				(destroyMethodName == null && bean instanceof AutoCloseable)) {_			_			_			if (!(bean instanceof DisposableBean)) {_				try {_					return bean.getClass().getMethod(CLOSE_METHOD_NAME).getName()__				}_				catch (NoSuchMethodException ex) {_					try {_						return bean.getClass().getMethod(SHUTDOWN_METHOD_NAME).getName()__					}_					catch (NoSuchMethodException ex2) {_						_					}_				}_			}_			return null__		}_		return (StringUtils.hasLength(destroyMethodName) ? destroyMethodName : null)__	};if,the,current,value,of,the,given,bean,definition,s,destroy,method,name,property,is,link,abstract,bean,definition,then,attempt,to,infer,a,destroy,method,candidate,methods,are,currently,limited,to,public,no,arg,methods,named,close,or,shutdown,whether,declared,locally,or,inherited,the,given,bean,definition,s,destroy,method,name,is,updated,to,be,null,if,no,such,method,is,found,otherwise,set,to,the,name,of,the,inferred,method,this,constant,serves,as,the,default,for,the,code,bean,destroy,method,attribute,and,the,value,of,the,constant,may,also,be,used,in,xml,within,the,code,bean,destroy,method,or,code,beans,default,destroy,method,attributes,p,also,processes,the,link,java,io,closeable,and,link,java,lang,auto,closeable,interfaces,reflectively,calling,the,close,method,on,implementing,beans,as,well;nullable,private,string,infer,destroy,method,if,necessary,object,bean,root,bean,definition,bean,definition,string,destroy,method,name,bean,definition,get,destroy,method,name,if,abstract,bean,definition,equals,destroy,method,name,destroy,method,name,null,bean,instanceof,auto,closeable,if,bean,instanceof,disposable,bean,try,return,bean,get,class,get,method,get,name,catch,no,such,method,exception,ex,try,return,bean,get,class,get,method,get,name,catch,no,such,method,exception,ex2,return,null,return,string,utils,has,length,destroy,method,name,destroy,method,name,null
DisposableBeanAdapter -> @Nullable 	private String inferDestroyMethodIfNecessary(Object bean, RootBeanDefinition beanDefinition);1496837955;If the current value of the given beanDefinition's "destroyMethodName" property is_{@link AbstractBeanDefinition#INFER_METHOD}, then attempt to infer a destroy method._Candidate methods are currently limited to public, no-arg methods named "close" or_"shutdown" (whether declared locally or inherited). The given BeanDefinition's_"destroyMethodName" is updated to be null if no such method is found, otherwise set_to the name of the inferred method. This constant serves as the default for the_{@code @Bean#destroyMethod} attribute and the value of the constant may also be_used in XML within the {@code <bean destroy-method="">} or {@code_<beans default-destroy-method="">} attributes._<p>Also processes the {@link java.io.Closeable} and {@link java.lang.AutoCloseable}_interfaces, reflectively calling the "close" method on implementing beans as well.;@Nullable_	private String inferDestroyMethodIfNecessary(Object bean, RootBeanDefinition beanDefinition) {_		String destroyMethodName = beanDefinition.getDestroyMethodName()__		if (AbstractBeanDefinition.INFER_METHOD.equals(destroyMethodName) ||_				(destroyMethodName == null && bean instanceof AutoCloseable)) {_			_			_			if (!(bean instanceof DisposableBean)) {_				try {_					return bean.getClass().getMethod(CLOSE_METHOD_NAME).getName()__				}_				catch (NoSuchMethodException ex) {_					try {_						return bean.getClass().getMethod(SHUTDOWN_METHOD_NAME).getName()__					}_					catch (NoSuchMethodException ex2) {_						_					}_				}_			}_			return null__		}_		return (StringUtils.hasLength(destroyMethodName) ? destroyMethodName : null)__	};if,the,current,value,of,the,given,bean,definition,s,destroy,method,name,property,is,link,abstract,bean,definition,then,attempt,to,infer,a,destroy,method,candidate,methods,are,currently,limited,to,public,no,arg,methods,named,close,or,shutdown,whether,declared,locally,or,inherited,the,given,bean,definition,s,destroy,method,name,is,updated,to,be,null,if,no,such,method,is,found,otherwise,set,to,the,name,of,the,inferred,method,this,constant,serves,as,the,default,for,the,code,bean,destroy,method,attribute,and,the,value,of,the,constant,may,also,be,used,in,xml,within,the,code,bean,destroy,method,or,code,beans,default,destroy,method,attributes,p,also,processes,the,link,java,io,closeable,and,link,java,lang,auto,closeable,interfaces,reflectively,calling,the,close,method,on,implementing,beans,as,well;nullable,private,string,infer,destroy,method,if,necessary,object,bean,root,bean,definition,bean,definition,string,destroy,method,name,bean,definition,get,destroy,method,name,if,abstract,bean,definition,equals,destroy,method,name,destroy,method,name,null,bean,instanceof,auto,closeable,if,bean,instanceof,disposable,bean,try,return,bean,get,class,get,method,get,name,catch,no,such,method,exception,ex,try,return,bean,get,class,get,method,get,name,catch,no,such,method,exception,ex2,return,null,return,string,utils,has,length,destroy,method,name,destroy,method,name,null
DisposableBeanAdapter -> @Nullable 	private String inferDestroyMethodIfNecessary(Object bean, RootBeanDefinition beanDefinition);1498780456;If the current value of the given beanDefinition's "destroyMethodName" property is_{@link AbstractBeanDefinition#INFER_METHOD}, then attempt to infer a destroy method._Candidate methods are currently limited to public, no-arg methods named "close" or_"shutdown" (whether declared locally or inherited). The given BeanDefinition's_"destroyMethodName" is updated to be null if no such method is found, otherwise set_to the name of the inferred method. This constant serves as the default for the_{@code @Bean#destroyMethod} attribute and the value of the constant may also be_used in XML within the {@code <bean destroy-method="">} or {@code_<beans default-destroy-method="">} attributes._<p>Also processes the {@link java.io.Closeable} and {@link java.lang.AutoCloseable}_interfaces, reflectively calling the "close" method on implementing beans as well.;@Nullable_	private String inferDestroyMethodIfNecessary(Object bean, RootBeanDefinition beanDefinition) {_		String destroyMethodName = beanDefinition.getDestroyMethodName()__		if (AbstractBeanDefinition.INFER_METHOD.equals(destroyMethodName) ||_				(destroyMethodName == null && bean instanceof AutoCloseable)) {_			_			_			if (!(bean instanceof DisposableBean)) {_				try {_					return bean.getClass().getMethod(CLOSE_METHOD_NAME).getName()__				}_				catch (NoSuchMethodException ex) {_					try {_						return bean.getClass().getMethod(SHUTDOWN_METHOD_NAME).getName()__					}_					catch (NoSuchMethodException ex2) {_						_					}_				}_			}_			return null__		}_		return (StringUtils.hasLength(destroyMethodName) ? destroyMethodName : null)__	};if,the,current,value,of,the,given,bean,definition,s,destroy,method,name,property,is,link,abstract,bean,definition,then,attempt,to,infer,a,destroy,method,candidate,methods,are,currently,limited,to,public,no,arg,methods,named,close,or,shutdown,whether,declared,locally,or,inherited,the,given,bean,definition,s,destroy,method,name,is,updated,to,be,null,if,no,such,method,is,found,otherwise,set,to,the,name,of,the,inferred,method,this,constant,serves,as,the,default,for,the,code,bean,destroy,method,attribute,and,the,value,of,the,constant,may,also,be,used,in,xml,within,the,code,bean,destroy,method,or,code,beans,default,destroy,method,attributes,p,also,processes,the,link,java,io,closeable,and,link,java,lang,auto,closeable,interfaces,reflectively,calling,the,close,method,on,implementing,beans,as,well;nullable,private,string,infer,destroy,method,if,necessary,object,bean,root,bean,definition,bean,definition,string,destroy,method,name,bean,definition,get,destroy,method,name,if,abstract,bean,definition,equals,destroy,method,name,destroy,method,name,null,bean,instanceof,auto,closeable,if,bean,instanceof,disposable,bean,try,return,bean,get,class,get,method,get,name,catch,no,such,method,exception,ex,try,return,bean,get,class,get,method,get,name,catch,no,such,method,exception,ex2,return,null,return,string,utils,has,length,destroy,method,name,destroy,method,name,null
DisposableBeanAdapter -> @Nullable 	private String inferDestroyMethodIfNecessary(Object bean, RootBeanDefinition beanDefinition);1530174524;If the current value of the given beanDefinition's "destroyMethodName" property is_{@link AbstractBeanDefinition#INFER_METHOD}, then attempt to infer a destroy method._Candidate methods are currently limited to public, no-arg methods named "close" or_"shutdown" (whether declared locally or inherited). The given BeanDefinition's_"destroyMethodName" is updated to be null if no such method is found, otherwise set_to the name of the inferred method. This constant serves as the default for the_{@code @Bean#destroyMethod} attribute and the value of the constant may also be_used in XML within the {@code <bean destroy-method="">} or {@code_<beans default-destroy-method="">} attributes._<p>Also processes the {@link java.io.Closeable} and {@link java.lang.AutoCloseable}_interfaces, reflectively calling the "close" method on implementing beans as well.;@Nullable_	private String inferDestroyMethodIfNecessary(Object bean, RootBeanDefinition beanDefinition) {_		String destroyMethodName = beanDefinition.getDestroyMethodName()__		if (AbstractBeanDefinition.INFER_METHOD.equals(destroyMethodName) ||_				(destroyMethodName == null && bean instanceof AutoCloseable)) {_			_			_			if (!(bean instanceof DisposableBean)) {_				try {_					return bean.getClass().getMethod(CLOSE_METHOD_NAME).getName()__				}_				catch (NoSuchMethodException ex) {_					try {_						return bean.getClass().getMethod(SHUTDOWN_METHOD_NAME).getName()__					}_					catch (NoSuchMethodException ex2) {_						_					}_				}_			}_			return null__		}_		return (StringUtils.hasLength(destroyMethodName) ? destroyMethodName : null)__	};if,the,current,value,of,the,given,bean,definition,s,destroy,method,name,property,is,link,abstract,bean,definition,then,attempt,to,infer,a,destroy,method,candidate,methods,are,currently,limited,to,public,no,arg,methods,named,close,or,shutdown,whether,declared,locally,or,inherited,the,given,bean,definition,s,destroy,method,name,is,updated,to,be,null,if,no,such,method,is,found,otherwise,set,to,the,name,of,the,inferred,method,this,constant,serves,as,the,default,for,the,code,bean,destroy,method,attribute,and,the,value,of,the,constant,may,also,be,used,in,xml,within,the,code,bean,destroy,method,or,code,beans,default,destroy,method,attributes,p,also,processes,the,link,java,io,closeable,and,link,java,lang,auto,closeable,interfaces,reflectively,calling,the,close,method,on,implementing,beans,as,well;nullable,private,string,infer,destroy,method,if,necessary,object,bean,root,bean,definition,bean,definition,string,destroy,method,name,bean,definition,get,destroy,method,name,if,abstract,bean,definition,equals,destroy,method,name,destroy,method,name,null,bean,instanceof,auto,closeable,if,bean,instanceof,disposable,bean,try,return,bean,get,class,get,method,get,name,catch,no,such,method,exception,ex,try,return,bean,get,class,get,method,get,name,catch,no,such,method,exception,ex2,return,null,return,string,utils,has,length,destroy,method,name,destroy,method,name,null
DisposableBeanAdapter -> @Nullable 	private String inferDestroyMethodIfNecessary(Object bean, RootBeanDefinition beanDefinition);1532091916;If the current value of the given beanDefinition's "destroyMethodName" property is_{@link AbstractBeanDefinition#INFER_METHOD}, then attempt to infer a destroy method._Candidate methods are currently limited to public, no-arg methods named "close" or_"shutdown" (whether declared locally or inherited). The given BeanDefinition's_"destroyMethodName" is updated to be null if no such method is found, otherwise set_to the name of the inferred method. This constant serves as the default for the_{@code @Bean#destroyMethod} attribute and the value of the constant may also be_used in XML within the {@code <bean destroy-method="">} or {@code_<beans default-destroy-method="">} attributes._<p>Also processes the {@link java.io.Closeable} and {@link java.lang.AutoCloseable}_interfaces, reflectively calling the "close" method on implementing beans as well.;@Nullable_	private String inferDestroyMethodIfNecessary(Object bean, RootBeanDefinition beanDefinition) {_		String destroyMethodName = beanDefinition.getDestroyMethodName()__		if (AbstractBeanDefinition.INFER_METHOD.equals(destroyMethodName) ||_				(destroyMethodName == null && bean instanceof AutoCloseable)) {_			_			_			if (!(bean instanceof DisposableBean)) {_				try {_					return bean.getClass().getMethod(CLOSE_METHOD_NAME).getName()__				}_				catch (NoSuchMethodException ex) {_					try {_						return bean.getClass().getMethod(SHUTDOWN_METHOD_NAME).getName()__					}_					catch (NoSuchMethodException ex2) {_						_					}_				}_			}_			return null__		}_		return (StringUtils.hasLength(destroyMethodName) ? destroyMethodName : null)__	};if,the,current,value,of,the,given,bean,definition,s,destroy,method,name,property,is,link,abstract,bean,definition,then,attempt,to,infer,a,destroy,method,candidate,methods,are,currently,limited,to,public,no,arg,methods,named,close,or,shutdown,whether,declared,locally,or,inherited,the,given,bean,definition,s,destroy,method,name,is,updated,to,be,null,if,no,such,method,is,found,otherwise,set,to,the,name,of,the,inferred,method,this,constant,serves,as,the,default,for,the,code,bean,destroy,method,attribute,and,the,value,of,the,constant,may,also,be,used,in,xml,within,the,code,bean,destroy,method,or,code,beans,default,destroy,method,attributes,p,also,processes,the,link,java,io,closeable,and,link,java,lang,auto,closeable,interfaces,reflectively,calling,the,close,method,on,implementing,beans,as,well;nullable,private,string,infer,destroy,method,if,necessary,object,bean,root,bean,definition,bean,definition,string,destroy,method,name,bean,definition,get,destroy,method,name,if,abstract,bean,definition,equals,destroy,method,name,destroy,method,name,null,bean,instanceof,auto,closeable,if,bean,instanceof,disposable,bean,try,return,bean,get,class,get,method,get,name,catch,no,such,method,exception,ex,try,return,bean,get,class,get,method,get,name,catch,no,such,method,exception,ex2,return,null,return,string,utils,has,length,destroy,method,name,destroy,method,name,null
DisposableBeanAdapter -> @Nullable 	private String inferDestroyMethodIfNecessary(Object bean, RootBeanDefinition beanDefinition);1532706365;If the current value of the given beanDefinition's "destroyMethodName" property is_{@link AbstractBeanDefinition#INFER_METHOD}, then attempt to infer a destroy method._Candidate methods are currently limited to public, no-arg methods named "close" or_"shutdown" (whether declared locally or inherited). The given BeanDefinition's_"destroyMethodName" is updated to be null if no such method is found, otherwise set_to the name of the inferred method. This constant serves as the default for the_{@code @Bean#destroyMethod} attribute and the value of the constant may also be_used in XML within the {@code <bean destroy-method="">} or {@code_<beans default-destroy-method="">} attributes._<p>Also processes the {@link java.io.Closeable} and {@link java.lang.AutoCloseable}_interfaces, reflectively calling the "close" method on implementing beans as well.;@Nullable_	private String inferDestroyMethodIfNecessary(Object bean, RootBeanDefinition beanDefinition) {_		String destroyMethodName = beanDefinition.getDestroyMethodName()__		if (AbstractBeanDefinition.INFER_METHOD.equals(destroyMethodName) ||_				(destroyMethodName == null && bean instanceof AutoCloseable)) {_			_			_			if (!(bean instanceof DisposableBean)) {_				try {_					return bean.getClass().getMethod(CLOSE_METHOD_NAME).getName()__				}_				catch (NoSuchMethodException ex) {_					try {_						return bean.getClass().getMethod(SHUTDOWN_METHOD_NAME).getName()__					}_					catch (NoSuchMethodException ex2) {_						_					}_				}_			}_			return null__		}_		return (StringUtils.hasLength(destroyMethodName) ? destroyMethodName : null)__	};if,the,current,value,of,the,given,bean,definition,s,destroy,method,name,property,is,link,abstract,bean,definition,then,attempt,to,infer,a,destroy,method,candidate,methods,are,currently,limited,to,public,no,arg,methods,named,close,or,shutdown,whether,declared,locally,or,inherited,the,given,bean,definition,s,destroy,method,name,is,updated,to,be,null,if,no,such,method,is,found,otherwise,set,to,the,name,of,the,inferred,method,this,constant,serves,as,the,default,for,the,code,bean,destroy,method,attribute,and,the,value,of,the,constant,may,also,be,used,in,xml,within,the,code,bean,destroy,method,or,code,beans,default,destroy,method,attributes,p,also,processes,the,link,java,io,closeable,and,link,java,lang,auto,closeable,interfaces,reflectively,calling,the,close,method,on,implementing,beans,as,well;nullable,private,string,infer,destroy,method,if,necessary,object,bean,root,bean,definition,bean,definition,string,destroy,method,name,bean,definition,get,destroy,method,name,if,abstract,bean,definition,equals,destroy,method,name,destroy,method,name,null,bean,instanceof,auto,closeable,if,bean,instanceof,disposable,bean,try,return,bean,get,class,get,method,get,name,catch,no,such,method,exception,ex,try,return,bean,get,class,get,method,get,name,catch,no,such,method,exception,ex2,return,null,return,string,utils,has,length,destroy,method,name,destroy,method,name,null
DisposableBeanAdapter -> @Nullable 	private String inferDestroyMethodIfNecessary(Object bean, RootBeanDefinition beanDefinition);1537391140;If the current value of the given beanDefinition's "destroyMethodName" property is_{@link AbstractBeanDefinition#INFER_METHOD}, then attempt to infer a destroy method._Candidate methods are currently limited to public, no-arg methods named "close" or_"shutdown" (whether declared locally or inherited). The given BeanDefinition's_"destroyMethodName" is updated to be null if no such method is found, otherwise set_to the name of the inferred method. This constant serves as the default for the_{@code @Bean#destroyMethod} attribute and the value of the constant may also be_used in XML within the {@code <bean destroy-method="">} or {@code_<beans default-destroy-method="">} attributes._<p>Also processes the {@link java.io.Closeable} and {@link java.lang.AutoCloseable}_interfaces, reflectively calling the "close" method on implementing beans as well.;@Nullable_	private String inferDestroyMethodIfNecessary(Object bean, RootBeanDefinition beanDefinition) {_		String destroyMethodName = beanDefinition.getDestroyMethodName()__		if (AbstractBeanDefinition.INFER_METHOD.equals(destroyMethodName) ||_				(destroyMethodName == null && bean instanceof AutoCloseable)) {_			_			_			if (!(bean instanceof DisposableBean)) {_				try {_					return bean.getClass().getMethod(CLOSE_METHOD_NAME).getName()__				}_				catch (NoSuchMethodException ex) {_					try {_						return bean.getClass().getMethod(SHUTDOWN_METHOD_NAME).getName()__					}_					catch (NoSuchMethodException ex2) {_						_					}_				}_			}_			return null__		}_		return (StringUtils.hasLength(destroyMethodName) ? destroyMethodName : null)__	};if,the,current,value,of,the,given,bean,definition,s,destroy,method,name,property,is,link,abstract,bean,definition,then,attempt,to,infer,a,destroy,method,candidate,methods,are,currently,limited,to,public,no,arg,methods,named,close,or,shutdown,whether,declared,locally,or,inherited,the,given,bean,definition,s,destroy,method,name,is,updated,to,be,null,if,no,such,method,is,found,otherwise,set,to,the,name,of,the,inferred,method,this,constant,serves,as,the,default,for,the,code,bean,destroy,method,attribute,and,the,value,of,the,constant,may,also,be,used,in,xml,within,the,code,bean,destroy,method,or,code,beans,default,destroy,method,attributes,p,also,processes,the,link,java,io,closeable,and,link,java,lang,auto,closeable,interfaces,reflectively,calling,the,close,method,on,implementing,beans,as,well;nullable,private,string,infer,destroy,method,if,necessary,object,bean,root,bean,definition,bean,definition,string,destroy,method,name,bean,definition,get,destroy,method,name,if,abstract,bean,definition,equals,destroy,method,name,destroy,method,name,null,bean,instanceof,auto,closeable,if,bean,instanceof,disposable,bean,try,return,bean,get,class,get,method,get,name,catch,no,such,method,exception,ex,try,return,bean,get,class,get,method,get,name,catch,no,such,method,exception,ex2,return,null,return,string,utils,has,length,destroy,method,name,destroy,method,name,null
DisposableBeanAdapter -> public DisposableBeanAdapter(Object bean, String beanName, RootBeanDefinition beanDefinition, 			List<BeanPostProcessor> postProcessors, AccessControlContext acc);1328020251;Create a new DisposableBeanAdapter for the given bean._@param bean the bean instance (never <code>null</code>)_@param beanName the name of the bean_@param beanDefinition the merged bean definition_@param postProcessors the List of BeanPostProcessors_(potentially DestructionAwareBeanPostProcessor), if any;public DisposableBeanAdapter(Object bean, String beanName, RootBeanDefinition beanDefinition,_			List<BeanPostProcessor> postProcessors, AccessControlContext acc) {__		Assert.notNull(bean, "Disposable bean must not be null")__		this.bean = bean__		this.beanName = beanName__		this.invokeDisposableBean =_				(this.bean instanceof DisposableBean && !beanDefinition.isExternallyManagedDestroyMethod("destroy"))__		this.nonPublicAccessAllowed = beanDefinition.isNonPublicAccessAllowed()__		this.acc = acc__		inferDestroyMethodIfNecessary(beanDefinition)__		final String destroyMethodName = beanDefinition.getDestroyMethodName()__		if (destroyMethodName != null && !(this.invokeDisposableBean && "destroy".equals(destroyMethodName)) &&_				!beanDefinition.isExternallyManagedDestroyMethod(destroyMethodName)) {_			this.destroyMethodName = destroyMethodName__			this.destroyMethod = determineDestroyMethod()__			if (this.destroyMethod == null) {_				if (beanDefinition.isEnforceDestroyMethod()) {_					throw new BeanDefinitionValidationException("Couldn't find a destroy method named '" +_							destroyMethodName + "' on bean with name '" + beanName + "'")__				}_			}_			else {_				Class<?>[] paramTypes = this.destroyMethod.getParameterTypes()__				if (paramTypes.length > 1) {_					throw new BeanDefinitionValidationException("Method '" + destroyMethodName + "' of bean '" +_							beanName + "' has more than one parameter - not supported as destroy method")__				}_				else if (paramTypes.length == 1 && !paramTypes[0].equals(boolean.class)) {_					throw new BeanDefinitionValidationException("Method '" + destroyMethodName + "' of bean '" +_							beanName + "' has a non-boolean parameter - not supported as destroy method")__				}_			}_		}_		this.beanPostProcessors = filterPostProcessors(postProcessors)__	};create,a,new,disposable,bean,adapter,for,the,given,bean,param,bean,the,bean,instance,never,code,null,code,param,bean,name,the,name,of,the,bean,param,bean,definition,the,merged,bean,definition,param,post,processors,the,list,of,bean,post,processors,potentially,destruction,aware,bean,post,processor,if,any;public,disposable,bean,adapter,object,bean,string,bean,name,root,bean,definition,bean,definition,list,bean,post,processor,post,processors,access,control,context,acc,assert,not,null,bean,disposable,bean,must,not,be,null,this,bean,bean,this,bean,name,bean,name,this,invoke,disposable,bean,this,bean,instanceof,disposable,bean,bean,definition,is,externally,managed,destroy,method,destroy,this,non,public,access,allowed,bean,definition,is,non,public,access,allowed,this,acc,acc,infer,destroy,method,if,necessary,bean,definition,final,string,destroy,method,name,bean,definition,get,destroy,method,name,if,destroy,method,name,null,this,invoke,disposable,bean,destroy,equals,destroy,method,name,bean,definition,is,externally,managed,destroy,method,destroy,method,name,this,destroy,method,name,destroy,method,name,this,destroy,method,determine,destroy,method,if,this,destroy,method,null,if,bean,definition,is,enforce,destroy,method,throw,new,bean,definition,validation,exception,couldn,t,find,a,destroy,method,named,destroy,method,name,on,bean,with,name,bean,name,else,class,param,types,this,destroy,method,get,parameter,types,if,param,types,length,1,throw,new,bean,definition,validation,exception,method,destroy,method,name,of,bean,bean,name,has,more,than,one,parameter,not,supported,as,destroy,method,else,if,param,types,length,1,param,types,0,equals,boolean,class,throw,new,bean,definition,validation,exception,method,destroy,method,name,of,bean,bean,name,has,a,non,boolean,parameter,not,supported,as,destroy,method,this,bean,post,processors,filter,post,processors,post,processors
DisposableBeanAdapter -> public DisposableBeanAdapter(Object bean, String beanName, RootBeanDefinition beanDefinition, 			List<BeanPostProcessor> postProcessors, AccessControlContext acc);1353966428;Create a new DisposableBeanAdapter for the given bean._@param bean the bean instance (never <code>null</code>)_@param beanName the name of the bean_@param beanDefinition the merged bean definition_@param postProcessors the List of BeanPostProcessors_(potentially DestructionAwareBeanPostProcessor), if any;public DisposableBeanAdapter(Object bean, String beanName, RootBeanDefinition beanDefinition,_			List<BeanPostProcessor> postProcessors, AccessControlContext acc) {__		Assert.notNull(bean, "Disposable bean must not be null")__		this.bean = bean__		this.beanName = beanName__		this.invokeDisposableBean =_				(this.bean instanceof DisposableBean && !beanDefinition.isExternallyManagedDestroyMethod("destroy"))__		this.nonPublicAccessAllowed = beanDefinition.isNonPublicAccessAllowed()__		this.acc = acc__		String destroyMethodName = inferDestroyMethodIfNecessary(bean, beanDefinition)__		if (destroyMethodName != null && !(this.invokeDisposableBean && "destroy".equals(destroyMethodName)) &&_				!beanDefinition.isExternallyManagedDestroyMethod(destroyMethodName)) {_			this.destroyMethodName = destroyMethodName__			this.destroyMethod = determineDestroyMethod()__			if (this.destroyMethod == null) {_				if (beanDefinition.isEnforceDestroyMethod()) {_					throw new BeanDefinitionValidationException("Couldn't find a destroy method named '" +_							destroyMethodName + "' on bean with name '" + beanName + "'")__				}_			}_			else {_				Class<?>[] paramTypes = this.destroyMethod.getParameterTypes()__				if (paramTypes.length > 1) {_					throw new BeanDefinitionValidationException("Method '" + destroyMethodName + "' of bean '" +_							beanName + "' has more than one parameter - not supported as destroy method")__				}_				else if (paramTypes.length == 1 && !paramTypes[0].equals(boolean.class)) {_					throw new BeanDefinitionValidationException("Method '" + destroyMethodName + "' of bean '" +_							beanName + "' has a non-boolean parameter - not supported as destroy method")__				}_			}_		}_		this.beanPostProcessors = filterPostProcessors(postProcessors)__	};create,a,new,disposable,bean,adapter,for,the,given,bean,param,bean,the,bean,instance,never,code,null,code,param,bean,name,the,name,of,the,bean,param,bean,definition,the,merged,bean,definition,param,post,processors,the,list,of,bean,post,processors,potentially,destruction,aware,bean,post,processor,if,any;public,disposable,bean,adapter,object,bean,string,bean,name,root,bean,definition,bean,definition,list,bean,post,processor,post,processors,access,control,context,acc,assert,not,null,bean,disposable,bean,must,not,be,null,this,bean,bean,this,bean,name,bean,name,this,invoke,disposable,bean,this,bean,instanceof,disposable,bean,bean,definition,is,externally,managed,destroy,method,destroy,this,non,public,access,allowed,bean,definition,is,non,public,access,allowed,this,acc,acc,string,destroy,method,name,infer,destroy,method,if,necessary,bean,bean,definition,if,destroy,method,name,null,this,invoke,disposable,bean,destroy,equals,destroy,method,name,bean,definition,is,externally,managed,destroy,method,destroy,method,name,this,destroy,method,name,destroy,method,name,this,destroy,method,determine,destroy,method,if,this,destroy,method,null,if,bean,definition,is,enforce,destroy,method,throw,new,bean,definition,validation,exception,couldn,t,find,a,destroy,method,named,destroy,method,name,on,bean,with,name,bean,name,else,class,param,types,this,destroy,method,get,parameter,types,if,param,types,length,1,throw,new,bean,definition,validation,exception,method,destroy,method,name,of,bean,bean,name,has,more,than,one,parameter,not,supported,as,destroy,method,else,if,param,types,length,1,param,types,0,equals,boolean,class,throw,new,bean,definition,validation,exception,method,destroy,method,name,of,bean,bean,name,has,a,non,boolean,parameter,not,supported,as,destroy,method,this,bean,post,processors,filter,post,processors,post,processors
DisposableBeanAdapter -> public DisposableBeanAdapter(Object bean, String beanName, RootBeanDefinition beanDefinition, 			List<BeanPostProcessor> postProcessors, AccessControlContext acc);1356735495;Create a new DisposableBeanAdapter for the given bean._@param bean the bean instance (never {@code null})_@param beanName the name of the bean_@param beanDefinition the merged bean definition_@param postProcessors the List of BeanPostProcessors_(potentially DestructionAwareBeanPostProcessor), if any;public DisposableBeanAdapter(Object bean, String beanName, RootBeanDefinition beanDefinition,_			List<BeanPostProcessor> postProcessors, AccessControlContext acc) {__		Assert.notNull(bean, "Disposable bean must not be null")__		this.bean = bean__		this.beanName = beanName__		this.invokeDisposableBean =_				(this.bean instanceof DisposableBean && !beanDefinition.isExternallyManagedDestroyMethod("destroy"))__		this.nonPublicAccessAllowed = beanDefinition.isNonPublicAccessAllowed()__		this.acc = acc__		String destroyMethodName = inferDestroyMethodIfNecessary(bean, beanDefinition)__		if (destroyMethodName != null && !(this.invokeDisposableBean && "destroy".equals(destroyMethodName)) &&_				!beanDefinition.isExternallyManagedDestroyMethod(destroyMethodName)) {_			this.destroyMethodName = destroyMethodName__			this.destroyMethod = determineDestroyMethod()__			if (this.destroyMethod == null) {_				if (beanDefinition.isEnforceDestroyMethod()) {_					throw new BeanDefinitionValidationException("Couldn't find a destroy method named '" +_							destroyMethodName + "' on bean with name '" + beanName + "'")__				}_			}_			else {_				Class<?>[] paramTypes = this.destroyMethod.getParameterTypes()__				if (paramTypes.length > 1) {_					throw new BeanDefinitionValidationException("Method '" + destroyMethodName + "' of bean '" +_							beanName + "' has more than one parameter - not supported as destroy method")__				}_				else if (paramTypes.length == 1 && !paramTypes[0].equals(boolean.class)) {_					throw new BeanDefinitionValidationException("Method '" + destroyMethodName + "' of bean '" +_							beanName + "' has a non-boolean parameter - not supported as destroy method")__				}_			}_		}_		this.beanPostProcessors = filterPostProcessors(postProcessors)__	};create,a,new,disposable,bean,adapter,for,the,given,bean,param,bean,the,bean,instance,never,code,null,param,bean,name,the,name,of,the,bean,param,bean,definition,the,merged,bean,definition,param,post,processors,the,list,of,bean,post,processors,potentially,destruction,aware,bean,post,processor,if,any;public,disposable,bean,adapter,object,bean,string,bean,name,root,bean,definition,bean,definition,list,bean,post,processor,post,processors,access,control,context,acc,assert,not,null,bean,disposable,bean,must,not,be,null,this,bean,bean,this,bean,name,bean,name,this,invoke,disposable,bean,this,bean,instanceof,disposable,bean,bean,definition,is,externally,managed,destroy,method,destroy,this,non,public,access,allowed,bean,definition,is,non,public,access,allowed,this,acc,acc,string,destroy,method,name,infer,destroy,method,if,necessary,bean,bean,definition,if,destroy,method,name,null,this,invoke,disposable,bean,destroy,equals,destroy,method,name,bean,definition,is,externally,managed,destroy,method,destroy,method,name,this,destroy,method,name,destroy,method,name,this,destroy,method,determine,destroy,method,if,this,destroy,method,null,if,bean,definition,is,enforce,destroy,method,throw,new,bean,definition,validation,exception,couldn,t,find,a,destroy,method,named,destroy,method,name,on,bean,with,name,bean,name,else,class,param,types,this,destroy,method,get,parameter,types,if,param,types,length,1,throw,new,bean,definition,validation,exception,method,destroy,method,name,of,bean,bean,name,has,more,than,one,parameter,not,supported,as,destroy,method,else,if,param,types,length,1,param,types,0,equals,boolean,class,throw,new,bean,definition,validation,exception,method,destroy,method,name,of,bean,bean,name,has,a,non,boolean,parameter,not,supported,as,destroy,method,this,bean,post,processors,filter,post,processors,post,processors
DisposableBeanAdapter -> public DisposableBeanAdapter(Object bean, String beanName, RootBeanDefinition beanDefinition, 			List<BeanPostProcessor> postProcessors, AccessControlContext acc);1357119239;Create a new DisposableBeanAdapter for the given bean._@param bean the bean instance (never {@code null})_@param beanName the name of the bean_@param beanDefinition the merged bean definition_@param postProcessors the List of BeanPostProcessors_(potentially DestructionAwareBeanPostProcessor), if any;public DisposableBeanAdapter(Object bean, String beanName, RootBeanDefinition beanDefinition,_			List<BeanPostProcessor> postProcessors, AccessControlContext acc) {__		Assert.notNull(bean, "Disposable bean must not be null")__		this.bean = bean__		this.beanName = beanName__		this.invokeDisposableBean =_				(this.bean instanceof DisposableBean && !beanDefinition.isExternallyManagedDestroyMethod("destroy"))__		this.nonPublicAccessAllowed = beanDefinition.isNonPublicAccessAllowed()__		this.acc = acc__		String destroyMethodName = inferDestroyMethodIfNecessary(bean, beanDefinition)__		if (destroyMethodName != null && !(this.invokeDisposableBean && "destroy".equals(destroyMethodName)) &&_				!beanDefinition.isExternallyManagedDestroyMethod(destroyMethodName)) {_			this.destroyMethodName = destroyMethodName__			this.destroyMethod = determineDestroyMethod()__			if (this.destroyMethod == null) {_				if (beanDefinition.isEnforceDestroyMethod()) {_					throw new BeanDefinitionValidationException("Couldn't find a destroy method named '" +_							destroyMethodName + "' on bean with name '" + beanName + "'")__				}_			}_			else {_				Class<?>[] paramTypes = this.destroyMethod.getParameterTypes()__				if (paramTypes.length > 1) {_					throw new BeanDefinitionValidationException("Method '" + destroyMethodName + "' of bean '" +_							beanName + "' has more than one parameter - not supported as destroy method")__				}_				else if (paramTypes.length == 1 && !paramTypes[0].equals(boolean.class)) {_					throw new BeanDefinitionValidationException("Method '" + destroyMethodName + "' of bean '" +_							beanName + "' has a non-boolean parameter - not supported as destroy method")__				}_			}_		}_		this.beanPostProcessors = filterPostProcessors(postProcessors)__	};create,a,new,disposable,bean,adapter,for,the,given,bean,param,bean,the,bean,instance,never,code,null,param,bean,name,the,name,of,the,bean,param,bean,definition,the,merged,bean,definition,param,post,processors,the,list,of,bean,post,processors,potentially,destruction,aware,bean,post,processor,if,any;public,disposable,bean,adapter,object,bean,string,bean,name,root,bean,definition,bean,definition,list,bean,post,processor,post,processors,access,control,context,acc,assert,not,null,bean,disposable,bean,must,not,be,null,this,bean,bean,this,bean,name,bean,name,this,invoke,disposable,bean,this,bean,instanceof,disposable,bean,bean,definition,is,externally,managed,destroy,method,destroy,this,non,public,access,allowed,bean,definition,is,non,public,access,allowed,this,acc,acc,string,destroy,method,name,infer,destroy,method,if,necessary,bean,bean,definition,if,destroy,method,name,null,this,invoke,disposable,bean,destroy,equals,destroy,method,name,bean,definition,is,externally,managed,destroy,method,destroy,method,name,this,destroy,method,name,destroy,method,name,this,destroy,method,determine,destroy,method,if,this,destroy,method,null,if,bean,definition,is,enforce,destroy,method,throw,new,bean,definition,validation,exception,couldn,t,find,a,destroy,method,named,destroy,method,name,on,bean,with,name,bean,name,else,class,param,types,this,destroy,method,get,parameter,types,if,param,types,length,1,throw,new,bean,definition,validation,exception,method,destroy,method,name,of,bean,bean,name,has,more,than,one,parameter,not,supported,as,destroy,method,else,if,param,types,length,1,param,types,0,equals,boolean,class,throw,new,bean,definition,validation,exception,method,destroy,method,name,of,bean,bean,name,has,a,non,boolean,parameter,not,supported,as,destroy,method,this,bean,post,processors,filter,post,processors,post,processors
DisposableBeanAdapter -> public DisposableBeanAdapter(Object bean, String beanName, RootBeanDefinition beanDefinition, 			List<BeanPostProcessor> postProcessors, AccessControlContext acc);1362408075;Create a new DisposableBeanAdapter for the given bean._@param bean the bean instance (never {@code null})_@param beanName the name of the bean_@param beanDefinition the merged bean definition_@param postProcessors the List of BeanPostProcessors_(potentially DestructionAwareBeanPostProcessor), if any;public DisposableBeanAdapter(Object bean, String beanName, RootBeanDefinition beanDefinition,_			List<BeanPostProcessor> postProcessors, AccessControlContext acc) {__		Assert.notNull(bean, "Disposable bean must not be null")__		this.bean = bean__		this.beanName = beanName__		this.invokeDisposableBean =_				(this.bean instanceof DisposableBean && !beanDefinition.isExternallyManagedDestroyMethod("destroy"))__		this.nonPublicAccessAllowed = beanDefinition.isNonPublicAccessAllowed()__		this.acc = acc__		String destroyMethodName = inferDestroyMethodIfNecessary(bean, beanDefinition)__		if (destroyMethodName != null && !(this.invokeDisposableBean && "destroy".equals(destroyMethodName)) &&_				!beanDefinition.isExternallyManagedDestroyMethod(destroyMethodName)) {_			this.destroyMethodName = destroyMethodName__			this.destroyMethod = determineDestroyMethod()__			if (this.destroyMethod == null) {_				if (beanDefinition.isEnforceDestroyMethod()) {_					throw new BeanDefinitionValidationException("Couldn't find a destroy method named '" +_							destroyMethodName + "' on bean with name '" + beanName + "'")__				}_			}_			else {_				Class<?>[] paramTypes = this.destroyMethod.getParameterTypes()__				if (paramTypes.length > 1) {_					throw new BeanDefinitionValidationException("Method '" + destroyMethodName + "' of bean '" +_							beanName + "' has more than one parameter - not supported as destroy method")__				}_				else if (paramTypes.length == 1 && !paramTypes[0].equals(boolean.class)) {_					throw new BeanDefinitionValidationException("Method '" + destroyMethodName + "' of bean '" +_							beanName + "' has a non-boolean parameter - not supported as destroy method")__				}_			}_		}_		this.beanPostProcessors = filterPostProcessors(postProcessors)__	};create,a,new,disposable,bean,adapter,for,the,given,bean,param,bean,the,bean,instance,never,code,null,param,bean,name,the,name,of,the,bean,param,bean,definition,the,merged,bean,definition,param,post,processors,the,list,of,bean,post,processors,potentially,destruction,aware,bean,post,processor,if,any;public,disposable,bean,adapter,object,bean,string,bean,name,root,bean,definition,bean,definition,list,bean,post,processor,post,processors,access,control,context,acc,assert,not,null,bean,disposable,bean,must,not,be,null,this,bean,bean,this,bean,name,bean,name,this,invoke,disposable,bean,this,bean,instanceof,disposable,bean,bean,definition,is,externally,managed,destroy,method,destroy,this,non,public,access,allowed,bean,definition,is,non,public,access,allowed,this,acc,acc,string,destroy,method,name,infer,destroy,method,if,necessary,bean,bean,definition,if,destroy,method,name,null,this,invoke,disposable,bean,destroy,equals,destroy,method,name,bean,definition,is,externally,managed,destroy,method,destroy,method,name,this,destroy,method,name,destroy,method,name,this,destroy,method,determine,destroy,method,if,this,destroy,method,null,if,bean,definition,is,enforce,destroy,method,throw,new,bean,definition,validation,exception,couldn,t,find,a,destroy,method,named,destroy,method,name,on,bean,with,name,bean,name,else,class,param,types,this,destroy,method,get,parameter,types,if,param,types,length,1,throw,new,bean,definition,validation,exception,method,destroy,method,name,of,bean,bean,name,has,more,than,one,parameter,not,supported,as,destroy,method,else,if,param,types,length,1,param,types,0,equals,boolean,class,throw,new,bean,definition,validation,exception,method,destroy,method,name,of,bean,bean,name,has,a,non,boolean,parameter,not,supported,as,destroy,method,this,bean,post,processors,filter,post,processors,post,processors
DisposableBeanAdapter -> public DisposableBeanAdapter(Object bean, String beanName, RootBeanDefinition beanDefinition, 			List<BeanPostProcessor> postProcessors, AccessControlContext acc);1364503447;Create a new DisposableBeanAdapter for the given bean._@param bean the bean instance (never {@code null})_@param beanName the name of the bean_@param beanDefinition the merged bean definition_@param postProcessors the List of BeanPostProcessors_(potentially DestructionAwareBeanPostProcessor), if any;public DisposableBeanAdapter(Object bean, String beanName, RootBeanDefinition beanDefinition,_			List<BeanPostProcessor> postProcessors, AccessControlContext acc) {__		Assert.notNull(bean, "Disposable bean must not be null")__		this.bean = bean__		this.beanName = beanName__		this.invokeDisposableBean =_				(this.bean instanceof DisposableBean && !beanDefinition.isExternallyManagedDestroyMethod("destroy"))__		this.nonPublicAccessAllowed = beanDefinition.isNonPublicAccessAllowed()__		this.acc = acc__		String destroyMethodName = inferDestroyMethodIfNecessary(bean, beanDefinition)__		if (destroyMethodName != null && !(this.invokeDisposableBean && "destroy".equals(destroyMethodName)) &&_				!beanDefinition.isExternallyManagedDestroyMethod(destroyMethodName)) {_			this.destroyMethodName = destroyMethodName__			this.destroyMethod = determineDestroyMethod()__			if (this.destroyMethod == null) {_				if (beanDefinition.isEnforceDestroyMethod()) {_					throw new BeanDefinitionValidationException("Couldn't find a destroy method named '" +_							destroyMethodName + "' on bean with name '" + beanName + "'")__				}_			}_			else {_				Class<?>[] paramTypes = this.destroyMethod.getParameterTypes()__				if (paramTypes.length > 1) {_					throw new BeanDefinitionValidationException("Method '" + destroyMethodName + "' of bean '" +_							beanName + "' has more than one parameter - not supported as destroy method")__				}_				else if (paramTypes.length == 1 && !paramTypes[0].equals(boolean.class)) {_					throw new BeanDefinitionValidationException("Method '" + destroyMethodName + "' of bean '" +_							beanName + "' has a non-boolean parameter - not supported as destroy method")__				}_			}_		}_		this.beanPostProcessors = filterPostProcessors(postProcessors)__	};create,a,new,disposable,bean,adapter,for,the,given,bean,param,bean,the,bean,instance,never,code,null,param,bean,name,the,name,of,the,bean,param,bean,definition,the,merged,bean,definition,param,post,processors,the,list,of,bean,post,processors,potentially,destruction,aware,bean,post,processor,if,any;public,disposable,bean,adapter,object,bean,string,bean,name,root,bean,definition,bean,definition,list,bean,post,processor,post,processors,access,control,context,acc,assert,not,null,bean,disposable,bean,must,not,be,null,this,bean,bean,this,bean,name,bean,name,this,invoke,disposable,bean,this,bean,instanceof,disposable,bean,bean,definition,is,externally,managed,destroy,method,destroy,this,non,public,access,allowed,bean,definition,is,non,public,access,allowed,this,acc,acc,string,destroy,method,name,infer,destroy,method,if,necessary,bean,bean,definition,if,destroy,method,name,null,this,invoke,disposable,bean,destroy,equals,destroy,method,name,bean,definition,is,externally,managed,destroy,method,destroy,method,name,this,destroy,method,name,destroy,method,name,this,destroy,method,determine,destroy,method,if,this,destroy,method,null,if,bean,definition,is,enforce,destroy,method,throw,new,bean,definition,validation,exception,couldn,t,find,a,destroy,method,named,destroy,method,name,on,bean,with,name,bean,name,else,class,param,types,this,destroy,method,get,parameter,types,if,param,types,length,1,throw,new,bean,definition,validation,exception,method,destroy,method,name,of,bean,bean,name,has,more,than,one,parameter,not,supported,as,destroy,method,else,if,param,types,length,1,param,types,0,equals,boolean,class,throw,new,bean,definition,validation,exception,method,destroy,method,name,of,bean,bean,name,has,a,non,boolean,parameter,not,supported,as,destroy,method,this,bean,post,processors,filter,post,processors,post,processors
DisposableBeanAdapter -> public DisposableBeanAdapter(Object bean, String beanName, RootBeanDefinition beanDefinition, 			List<BeanPostProcessor> postProcessors, AccessControlContext acc);1368482696;Create a new DisposableBeanAdapter for the given bean._@param bean the bean instance (never {@code null})_@param beanName the name of the bean_@param beanDefinition the merged bean definition_@param postProcessors the List of BeanPostProcessors_(potentially DestructionAwareBeanPostProcessor), if any;public DisposableBeanAdapter(Object bean, String beanName, RootBeanDefinition beanDefinition,_			List<BeanPostProcessor> postProcessors, AccessControlContext acc) {__		Assert.notNull(bean, "Disposable bean must not be null")__		this.bean = bean__		this.beanName = beanName__		this.invokeDisposableBean =_				(this.bean instanceof DisposableBean && !beanDefinition.isExternallyManagedDestroyMethod("destroy"))__		this.nonPublicAccessAllowed = beanDefinition.isNonPublicAccessAllowed()__		this.acc = acc__		String destroyMethodName = inferDestroyMethodIfNecessary(bean, beanDefinition)__		if (destroyMethodName != null && !(this.invokeDisposableBean && "destroy".equals(destroyMethodName)) &&_				!beanDefinition.isExternallyManagedDestroyMethod(destroyMethodName)) {_			this.destroyMethodName = destroyMethodName__			this.destroyMethod = determineDestroyMethod()__			if (this.destroyMethod == null) {_				if (beanDefinition.isEnforceDestroyMethod()) {_					throw new BeanDefinitionValidationException("Couldn't find a destroy method named '" +_							destroyMethodName + "' on bean with name '" + beanName + "'")__				}_			}_			else {_				Class<?>[] paramTypes = this.destroyMethod.getParameterTypes()__				if (paramTypes.length > 1) {_					throw new BeanDefinitionValidationException("Method '" + destroyMethodName + "' of bean '" +_							beanName + "' has more than one parameter - not supported as destroy method")__				}_				else if (paramTypes.length == 1 && !paramTypes[0].equals(boolean.class)) {_					throw new BeanDefinitionValidationException("Method '" + destroyMethodName + "' of bean '" +_							beanName + "' has a non-boolean parameter - not supported as destroy method")__				}_			}_		}_		this.beanPostProcessors = filterPostProcessors(postProcessors)__	};create,a,new,disposable,bean,adapter,for,the,given,bean,param,bean,the,bean,instance,never,code,null,param,bean,name,the,name,of,the,bean,param,bean,definition,the,merged,bean,definition,param,post,processors,the,list,of,bean,post,processors,potentially,destruction,aware,bean,post,processor,if,any;public,disposable,bean,adapter,object,bean,string,bean,name,root,bean,definition,bean,definition,list,bean,post,processor,post,processors,access,control,context,acc,assert,not,null,bean,disposable,bean,must,not,be,null,this,bean,bean,this,bean,name,bean,name,this,invoke,disposable,bean,this,bean,instanceof,disposable,bean,bean,definition,is,externally,managed,destroy,method,destroy,this,non,public,access,allowed,bean,definition,is,non,public,access,allowed,this,acc,acc,string,destroy,method,name,infer,destroy,method,if,necessary,bean,bean,definition,if,destroy,method,name,null,this,invoke,disposable,bean,destroy,equals,destroy,method,name,bean,definition,is,externally,managed,destroy,method,destroy,method,name,this,destroy,method,name,destroy,method,name,this,destroy,method,determine,destroy,method,if,this,destroy,method,null,if,bean,definition,is,enforce,destroy,method,throw,new,bean,definition,validation,exception,couldn,t,find,a,destroy,method,named,destroy,method,name,on,bean,with,name,bean,name,else,class,param,types,this,destroy,method,get,parameter,types,if,param,types,length,1,throw,new,bean,definition,validation,exception,method,destroy,method,name,of,bean,bean,name,has,more,than,one,parameter,not,supported,as,destroy,method,else,if,param,types,length,1,param,types,0,equals,boolean,class,throw,new,bean,definition,validation,exception,method,destroy,method,name,of,bean,bean,name,has,a,non,boolean,parameter,not,supported,as,destroy,method,this,bean,post,processors,filter,post,processors,post,processors
DisposableBeanAdapter -> public DisposableBeanAdapter(Object bean, String beanName, RootBeanDefinition beanDefinition, 			List<BeanPostProcessor> postProcessors, AccessControlContext acc);1385412762;Create a new DisposableBeanAdapter for the given bean._@param bean the bean instance (never {@code null})_@param beanName the name of the bean_@param beanDefinition the merged bean definition_@param postProcessors the List of BeanPostProcessors_(potentially DestructionAwareBeanPostProcessor), if any;public DisposableBeanAdapter(Object bean, String beanName, RootBeanDefinition beanDefinition,_			List<BeanPostProcessor> postProcessors, AccessControlContext acc) {__		Assert.notNull(bean, "Disposable bean must not be null")__		this.bean = bean__		this.beanName = beanName__		this.invokeDisposableBean =_				(this.bean instanceof DisposableBean && !beanDefinition.isExternallyManagedDestroyMethod("destroy"))__		this.nonPublicAccessAllowed = beanDefinition.isNonPublicAccessAllowed()__		this.acc = acc__		String destroyMethodName = inferDestroyMethodIfNecessary(bean, beanDefinition)__		if (destroyMethodName != null && !(this.invokeDisposableBean && "destroy".equals(destroyMethodName)) &&_				!beanDefinition.isExternallyManagedDestroyMethod(destroyMethodName)) {_			this.destroyMethodName = destroyMethodName__			this.destroyMethod = determineDestroyMethod()__			if (this.destroyMethod == null) {_				if (beanDefinition.isEnforceDestroyMethod()) {_					throw new BeanDefinitionValidationException("Couldn't find a destroy method named '" +_							destroyMethodName + "' on bean with name '" + beanName + "'")__				}_			}_			else {_				Class<?>[] paramTypes = this.destroyMethod.getParameterTypes()__				if (paramTypes.length > 1) {_					throw new BeanDefinitionValidationException("Method '" + destroyMethodName + "' of bean '" +_							beanName + "' has more than one parameter - not supported as destroy method")__				}_				else if (paramTypes.length == 1 && !paramTypes[0].equals(boolean.class)) {_					throw new BeanDefinitionValidationException("Method '" + destroyMethodName + "' of bean '" +_							beanName + "' has a non-boolean parameter - not supported as destroy method")__				}_			}_		}_		this.beanPostProcessors = filterPostProcessors(postProcessors)__	};create,a,new,disposable,bean,adapter,for,the,given,bean,param,bean,the,bean,instance,never,code,null,param,bean,name,the,name,of,the,bean,param,bean,definition,the,merged,bean,definition,param,post,processors,the,list,of,bean,post,processors,potentially,destruction,aware,bean,post,processor,if,any;public,disposable,bean,adapter,object,bean,string,bean,name,root,bean,definition,bean,definition,list,bean,post,processor,post,processors,access,control,context,acc,assert,not,null,bean,disposable,bean,must,not,be,null,this,bean,bean,this,bean,name,bean,name,this,invoke,disposable,bean,this,bean,instanceof,disposable,bean,bean,definition,is,externally,managed,destroy,method,destroy,this,non,public,access,allowed,bean,definition,is,non,public,access,allowed,this,acc,acc,string,destroy,method,name,infer,destroy,method,if,necessary,bean,bean,definition,if,destroy,method,name,null,this,invoke,disposable,bean,destroy,equals,destroy,method,name,bean,definition,is,externally,managed,destroy,method,destroy,method,name,this,destroy,method,name,destroy,method,name,this,destroy,method,determine,destroy,method,if,this,destroy,method,null,if,bean,definition,is,enforce,destroy,method,throw,new,bean,definition,validation,exception,couldn,t,find,a,destroy,method,named,destroy,method,name,on,bean,with,name,bean,name,else,class,param,types,this,destroy,method,get,parameter,types,if,param,types,length,1,throw,new,bean,definition,validation,exception,method,destroy,method,name,of,bean,bean,name,has,more,than,one,parameter,not,supported,as,destroy,method,else,if,param,types,length,1,param,types,0,equals,boolean,class,throw,new,bean,definition,validation,exception,method,destroy,method,name,of,bean,bean,name,has,a,non,boolean,parameter,not,supported,as,destroy,method,this,bean,post,processors,filter,post,processors,post,processors
DisposableBeanAdapter -> public DisposableBeanAdapter(Object bean, String beanName, RootBeanDefinition beanDefinition, 			List<BeanPostProcessor> postProcessors, AccessControlContext acc);1398638841;Create a new DisposableBeanAdapter for the given bean._@param bean the bean instance (never {@code null})_@param beanName the name of the bean_@param beanDefinition the merged bean definition_@param postProcessors the List of BeanPostProcessors_(potentially DestructionAwareBeanPostProcessor), if any;public DisposableBeanAdapter(Object bean, String beanName, RootBeanDefinition beanDefinition,_			List<BeanPostProcessor> postProcessors, AccessControlContext acc) {__		Assert.notNull(bean, "Disposable bean must not be null")__		this.bean = bean__		this.beanName = beanName__		this.invokeDisposableBean =_				(this.bean instanceof DisposableBean && !beanDefinition.isExternallyManagedDestroyMethod("destroy"))__		this.nonPublicAccessAllowed = beanDefinition.isNonPublicAccessAllowed()__		this.acc = acc__		String destroyMethodName = inferDestroyMethodIfNecessary(bean, beanDefinition)__		if (destroyMethodName != null && !(this.invokeDisposableBean && "destroy".equals(destroyMethodName)) &&_				!beanDefinition.isExternallyManagedDestroyMethod(destroyMethodName)) {_			this.destroyMethodName = destroyMethodName__			this.destroyMethod = determineDestroyMethod()__			if (this.destroyMethod == null) {_				if (beanDefinition.isEnforceDestroyMethod()) {_					throw new BeanDefinitionValidationException("Couldn't find a destroy method named '" +_							destroyMethodName + "' on bean with name '" + beanName + "'")__				}_			}_			else {_				Class<?>[] paramTypes = this.destroyMethod.getParameterTypes()__				if (paramTypes.length > 1) {_					throw new BeanDefinitionValidationException("Method '" + destroyMethodName + "' of bean '" +_							beanName + "' has more than one parameter - not supported as destroy method")__				}_				else if (paramTypes.length == 1 && !paramTypes[0].equals(boolean.class)) {_					throw new BeanDefinitionValidationException("Method '" + destroyMethodName + "' of bean '" +_							beanName + "' has a non-boolean parameter - not supported as destroy method")__				}_			}_		}_		this.beanPostProcessors = filterPostProcessors(postProcessors)__	};create,a,new,disposable,bean,adapter,for,the,given,bean,param,bean,the,bean,instance,never,code,null,param,bean,name,the,name,of,the,bean,param,bean,definition,the,merged,bean,definition,param,post,processors,the,list,of,bean,post,processors,potentially,destruction,aware,bean,post,processor,if,any;public,disposable,bean,adapter,object,bean,string,bean,name,root,bean,definition,bean,definition,list,bean,post,processor,post,processors,access,control,context,acc,assert,not,null,bean,disposable,bean,must,not,be,null,this,bean,bean,this,bean,name,bean,name,this,invoke,disposable,bean,this,bean,instanceof,disposable,bean,bean,definition,is,externally,managed,destroy,method,destroy,this,non,public,access,allowed,bean,definition,is,non,public,access,allowed,this,acc,acc,string,destroy,method,name,infer,destroy,method,if,necessary,bean,bean,definition,if,destroy,method,name,null,this,invoke,disposable,bean,destroy,equals,destroy,method,name,bean,definition,is,externally,managed,destroy,method,destroy,method,name,this,destroy,method,name,destroy,method,name,this,destroy,method,determine,destroy,method,if,this,destroy,method,null,if,bean,definition,is,enforce,destroy,method,throw,new,bean,definition,validation,exception,couldn,t,find,a,destroy,method,named,destroy,method,name,on,bean,with,name,bean,name,else,class,param,types,this,destroy,method,get,parameter,types,if,param,types,length,1,throw,new,bean,definition,validation,exception,method,destroy,method,name,of,bean,bean,name,has,more,than,one,parameter,not,supported,as,destroy,method,else,if,param,types,length,1,param,types,0,equals,boolean,class,throw,new,bean,definition,validation,exception,method,destroy,method,name,of,bean,bean,name,has,a,non,boolean,parameter,not,supported,as,destroy,method,this,bean,post,processors,filter,post,processors,post,processors
DisposableBeanAdapter -> public DisposableBeanAdapter(Object bean, String beanName, RootBeanDefinition beanDefinition, 			List<BeanPostProcessor> postProcessors, AccessControlContext acc);1432125256;Create a new DisposableBeanAdapter for the given bean._@param bean the bean instance (never {@code null})_@param beanName the name of the bean_@param beanDefinition the merged bean definition_@param postProcessors the List of BeanPostProcessors_(potentially DestructionAwareBeanPostProcessor), if any;public DisposableBeanAdapter(Object bean, String beanName, RootBeanDefinition beanDefinition,_			List<BeanPostProcessor> postProcessors, AccessControlContext acc) {__		Assert.notNull(bean, "Disposable bean must not be null")__		this.bean = bean__		this.beanName = beanName__		this.invokeDisposableBean =_				(this.bean instanceof DisposableBean && !beanDefinition.isExternallyManagedDestroyMethod("destroy"))__		this.nonPublicAccessAllowed = beanDefinition.isNonPublicAccessAllowed()__		this.acc = acc__		String destroyMethodName = inferDestroyMethodIfNecessary(bean, beanDefinition)__		if (destroyMethodName != null && !(this.invokeDisposableBean && "destroy".equals(destroyMethodName)) &&_				!beanDefinition.isExternallyManagedDestroyMethod(destroyMethodName)) {_			this.destroyMethodName = destroyMethodName__			this.destroyMethod = determineDestroyMethod()__			if (this.destroyMethod == null) {_				if (beanDefinition.isEnforceDestroyMethod()) {_					throw new BeanDefinitionValidationException("Couldn't find a destroy method named '" +_							destroyMethodName + "' on bean with name '" + beanName + "'")__				}_			}_			else {_				Class<?>[] paramTypes = this.destroyMethod.getParameterTypes()__				if (paramTypes.length > 1) {_					throw new BeanDefinitionValidationException("Method '" + destroyMethodName + "' of bean '" +_							beanName + "' has more than one parameter - not supported as destroy method")__				}_				else if (paramTypes.length == 1 && boolean.class != paramTypes[0]) {_					throw new BeanDefinitionValidationException("Method '" + destroyMethodName + "' of bean '" +_							beanName + "' has a non-boolean parameter - not supported as destroy method")__				}_			}_		}_		this.beanPostProcessors = filterPostProcessors(postProcessors)__	};create,a,new,disposable,bean,adapter,for,the,given,bean,param,bean,the,bean,instance,never,code,null,param,bean,name,the,name,of,the,bean,param,bean,definition,the,merged,bean,definition,param,post,processors,the,list,of,bean,post,processors,potentially,destruction,aware,bean,post,processor,if,any;public,disposable,bean,adapter,object,bean,string,bean,name,root,bean,definition,bean,definition,list,bean,post,processor,post,processors,access,control,context,acc,assert,not,null,bean,disposable,bean,must,not,be,null,this,bean,bean,this,bean,name,bean,name,this,invoke,disposable,bean,this,bean,instanceof,disposable,bean,bean,definition,is,externally,managed,destroy,method,destroy,this,non,public,access,allowed,bean,definition,is,non,public,access,allowed,this,acc,acc,string,destroy,method,name,infer,destroy,method,if,necessary,bean,bean,definition,if,destroy,method,name,null,this,invoke,disposable,bean,destroy,equals,destroy,method,name,bean,definition,is,externally,managed,destroy,method,destroy,method,name,this,destroy,method,name,destroy,method,name,this,destroy,method,determine,destroy,method,if,this,destroy,method,null,if,bean,definition,is,enforce,destroy,method,throw,new,bean,definition,validation,exception,couldn,t,find,a,destroy,method,named,destroy,method,name,on,bean,with,name,bean,name,else,class,param,types,this,destroy,method,get,parameter,types,if,param,types,length,1,throw,new,bean,definition,validation,exception,method,destroy,method,name,of,bean,bean,name,has,more,than,one,parameter,not,supported,as,destroy,method,else,if,param,types,length,1,boolean,class,param,types,0,throw,new,bean,definition,validation,exception,method,destroy,method,name,of,bean,bean,name,has,a,non,boolean,parameter,not,supported,as,destroy,method,this,bean,post,processors,filter,post,processors,post,processors
DisposableBeanAdapter -> public DisposableBeanAdapter(Object bean, String beanName, RootBeanDefinition beanDefinition, 			List<BeanPostProcessor> postProcessors, AccessControlContext acc);1432135182;Create a new DisposableBeanAdapter for the given bean._@param bean the bean instance (never {@code null})_@param beanName the name of the bean_@param beanDefinition the merged bean definition_@param postProcessors the List of BeanPostProcessors_(potentially DestructionAwareBeanPostProcessor), if any;public DisposableBeanAdapter(Object bean, String beanName, RootBeanDefinition beanDefinition,_			List<BeanPostProcessor> postProcessors, AccessControlContext acc) {__		Assert.notNull(bean, "Disposable bean must not be null")__		this.bean = bean__		this.beanName = beanName__		this.invokeDisposableBean =_				(this.bean instanceof DisposableBean && !beanDefinition.isExternallyManagedDestroyMethod("destroy"))__		this.nonPublicAccessAllowed = beanDefinition.isNonPublicAccessAllowed()__		this.acc = acc__		String destroyMethodName = inferDestroyMethodIfNecessary(bean, beanDefinition)__		if (destroyMethodName != null && !(this.invokeDisposableBean && "destroy".equals(destroyMethodName)) &&_				!beanDefinition.isExternallyManagedDestroyMethod(destroyMethodName)) {_			this.destroyMethodName = destroyMethodName__			this.destroyMethod = determineDestroyMethod()__			if (this.destroyMethod == null) {_				if (beanDefinition.isEnforceDestroyMethod()) {_					throw new BeanDefinitionValidationException("Couldn't find a destroy method named '" +_							destroyMethodName + "' on bean with name '" + beanName + "'")__				}_			}_			else {_				Class<?>[] paramTypes = this.destroyMethod.getParameterTypes()__				if (paramTypes.length > 1) {_					throw new BeanDefinitionValidationException("Method '" + destroyMethodName + "' of bean '" +_							beanName + "' has more than one parameter - not supported as destroy method")__				}_				else if (paramTypes.length == 1 && boolean.class != paramTypes[0]) {_					throw new BeanDefinitionValidationException("Method '" + destroyMethodName + "' of bean '" +_							beanName + "' has a non-boolean parameter - not supported as destroy method")__				}_			}_		}_		this.beanPostProcessors = filterPostProcessors(postProcessors)__	};create,a,new,disposable,bean,adapter,for,the,given,bean,param,bean,the,bean,instance,never,code,null,param,bean,name,the,name,of,the,bean,param,bean,definition,the,merged,bean,definition,param,post,processors,the,list,of,bean,post,processors,potentially,destruction,aware,bean,post,processor,if,any;public,disposable,bean,adapter,object,bean,string,bean,name,root,bean,definition,bean,definition,list,bean,post,processor,post,processors,access,control,context,acc,assert,not,null,bean,disposable,bean,must,not,be,null,this,bean,bean,this,bean,name,bean,name,this,invoke,disposable,bean,this,bean,instanceof,disposable,bean,bean,definition,is,externally,managed,destroy,method,destroy,this,non,public,access,allowed,bean,definition,is,non,public,access,allowed,this,acc,acc,string,destroy,method,name,infer,destroy,method,if,necessary,bean,bean,definition,if,destroy,method,name,null,this,invoke,disposable,bean,destroy,equals,destroy,method,name,bean,definition,is,externally,managed,destroy,method,destroy,method,name,this,destroy,method,name,destroy,method,name,this,destroy,method,determine,destroy,method,if,this,destroy,method,null,if,bean,definition,is,enforce,destroy,method,throw,new,bean,definition,validation,exception,couldn,t,find,a,destroy,method,named,destroy,method,name,on,bean,with,name,bean,name,else,class,param,types,this,destroy,method,get,parameter,types,if,param,types,length,1,throw,new,bean,definition,validation,exception,method,destroy,method,name,of,bean,bean,name,has,more,than,one,parameter,not,supported,as,destroy,method,else,if,param,types,length,1,boolean,class,param,types,0,throw,new,bean,definition,validation,exception,method,destroy,method,name,of,bean,bean,name,has,a,non,boolean,parameter,not,supported,as,destroy,method,this,bean,post,processors,filter,post,processors,post,processors
DisposableBeanAdapter -> public DisposableBeanAdapter(Object bean, String beanName, RootBeanDefinition beanDefinition, 			List<BeanPostProcessor> postProcessors, AccessControlContext acc);1436434188;Create a new DisposableBeanAdapter for the given bean._@param bean the bean instance (never {@code null})_@param beanName the name of the bean_@param beanDefinition the merged bean definition_@param postProcessors the List of BeanPostProcessors_(potentially DestructionAwareBeanPostProcessor), if any;public DisposableBeanAdapter(Object bean, String beanName, RootBeanDefinition beanDefinition,_			List<BeanPostProcessor> postProcessors, AccessControlContext acc) {__		Assert.notNull(bean, "Disposable bean must not be null")__		this.bean = bean__		this.beanName = beanName__		this.invokeDisposableBean =_				(this.bean instanceof DisposableBean && !beanDefinition.isExternallyManagedDestroyMethod("destroy"))__		this.nonPublicAccessAllowed = beanDefinition.isNonPublicAccessAllowed()__		this.acc = acc__		String destroyMethodName = inferDestroyMethodIfNecessary(bean, beanDefinition)__		if (destroyMethodName != null && !(this.invokeDisposableBean && "destroy".equals(destroyMethodName)) &&_				!beanDefinition.isExternallyManagedDestroyMethod(destroyMethodName)) {_			this.destroyMethodName = destroyMethodName__			this.destroyMethod = determineDestroyMethod()__			if (this.destroyMethod == null) {_				if (beanDefinition.isEnforceDestroyMethod()) {_					throw new BeanDefinitionValidationException("Couldn't find a destroy method named '" +_							destroyMethodName + "' on bean with name '" + beanName + "'")__				}_			}_			else {_				Class<?>[] paramTypes = this.destroyMethod.getParameterTypes()__				if (paramTypes.length > 1) {_					throw new BeanDefinitionValidationException("Method '" + destroyMethodName + "' of bean '" +_							beanName + "' has more than one parameter - not supported as destroy method")__				}_				else if (paramTypes.length == 1 && boolean.class != paramTypes[0]) {_					throw new BeanDefinitionValidationException("Method '" + destroyMethodName + "' of bean '" +_							beanName + "' has a non-boolean parameter - not supported as destroy method")__				}_			}_		}_		this.beanPostProcessors = filterPostProcessors(postProcessors)__	};create,a,new,disposable,bean,adapter,for,the,given,bean,param,bean,the,bean,instance,never,code,null,param,bean,name,the,name,of,the,bean,param,bean,definition,the,merged,bean,definition,param,post,processors,the,list,of,bean,post,processors,potentially,destruction,aware,bean,post,processor,if,any;public,disposable,bean,adapter,object,bean,string,bean,name,root,bean,definition,bean,definition,list,bean,post,processor,post,processors,access,control,context,acc,assert,not,null,bean,disposable,bean,must,not,be,null,this,bean,bean,this,bean,name,bean,name,this,invoke,disposable,bean,this,bean,instanceof,disposable,bean,bean,definition,is,externally,managed,destroy,method,destroy,this,non,public,access,allowed,bean,definition,is,non,public,access,allowed,this,acc,acc,string,destroy,method,name,infer,destroy,method,if,necessary,bean,bean,definition,if,destroy,method,name,null,this,invoke,disposable,bean,destroy,equals,destroy,method,name,bean,definition,is,externally,managed,destroy,method,destroy,method,name,this,destroy,method,name,destroy,method,name,this,destroy,method,determine,destroy,method,if,this,destroy,method,null,if,bean,definition,is,enforce,destroy,method,throw,new,bean,definition,validation,exception,couldn,t,find,a,destroy,method,named,destroy,method,name,on,bean,with,name,bean,name,else,class,param,types,this,destroy,method,get,parameter,types,if,param,types,length,1,throw,new,bean,definition,validation,exception,method,destroy,method,name,of,bean,bean,name,has,more,than,one,parameter,not,supported,as,destroy,method,else,if,param,types,length,1,boolean,class,param,types,0,throw,new,bean,definition,validation,exception,method,destroy,method,name,of,bean,bean,name,has,a,non,boolean,parameter,not,supported,as,destroy,method,this,bean,post,processors,filter,post,processors,post,processors
DisposableBeanAdapter -> public DisposableBeanAdapter(Object bean, String beanName, RootBeanDefinition beanDefinition, 			List<BeanPostProcessor> postProcessors, AccessControlContext acc);1447195666;Create a new DisposableBeanAdapter for the given bean._@param bean the bean instance (never {@code null})_@param beanName the name of the bean_@param beanDefinition the merged bean definition_@param postProcessors the List of BeanPostProcessors_(potentially DestructionAwareBeanPostProcessor), if any;public DisposableBeanAdapter(Object bean, String beanName, RootBeanDefinition beanDefinition,_			List<BeanPostProcessor> postProcessors, AccessControlContext acc) {__		Assert.notNull(bean, "Disposable bean must not be null")__		this.bean = bean__		this.beanName = beanName__		this.invokeDisposableBean =_				(this.bean instanceof DisposableBean && !beanDefinition.isExternallyManagedDestroyMethod("destroy"))__		this.nonPublicAccessAllowed = beanDefinition.isNonPublicAccessAllowed()__		this.acc = acc__		String destroyMethodName = inferDestroyMethodIfNecessary(bean, beanDefinition)__		if (destroyMethodName != null && !(this.invokeDisposableBean && "destroy".equals(destroyMethodName)) &&_				!beanDefinition.isExternallyManagedDestroyMethod(destroyMethodName)) {_			this.destroyMethodName = destroyMethodName__			this.destroyMethod = determineDestroyMethod()__			if (this.destroyMethod == null) {_				if (beanDefinition.isEnforceDestroyMethod()) {_					throw new BeanDefinitionValidationException("Couldn't find a destroy method named '" +_							destroyMethodName + "' on bean with name '" + beanName + "'")__				}_			}_			else {_				Class<?>[] paramTypes = this.destroyMethod.getParameterTypes()__				if (paramTypes.length > 1) {_					throw new BeanDefinitionValidationException("Method '" + destroyMethodName + "' of bean '" +_							beanName + "' has more than one parameter - not supported as destroy method")__				}_				else if (paramTypes.length == 1 && boolean.class != paramTypes[0]) {_					throw new BeanDefinitionValidationException("Method '" + destroyMethodName + "' of bean '" +_							beanName + "' has a non-boolean parameter - not supported as destroy method")__				}_			}_		}_		this.beanPostProcessors = filterPostProcessors(postProcessors)__	};create,a,new,disposable,bean,adapter,for,the,given,bean,param,bean,the,bean,instance,never,code,null,param,bean,name,the,name,of,the,bean,param,bean,definition,the,merged,bean,definition,param,post,processors,the,list,of,bean,post,processors,potentially,destruction,aware,bean,post,processor,if,any;public,disposable,bean,adapter,object,bean,string,bean,name,root,bean,definition,bean,definition,list,bean,post,processor,post,processors,access,control,context,acc,assert,not,null,bean,disposable,bean,must,not,be,null,this,bean,bean,this,bean,name,bean,name,this,invoke,disposable,bean,this,bean,instanceof,disposable,bean,bean,definition,is,externally,managed,destroy,method,destroy,this,non,public,access,allowed,bean,definition,is,non,public,access,allowed,this,acc,acc,string,destroy,method,name,infer,destroy,method,if,necessary,bean,bean,definition,if,destroy,method,name,null,this,invoke,disposable,bean,destroy,equals,destroy,method,name,bean,definition,is,externally,managed,destroy,method,destroy,method,name,this,destroy,method,name,destroy,method,name,this,destroy,method,determine,destroy,method,if,this,destroy,method,null,if,bean,definition,is,enforce,destroy,method,throw,new,bean,definition,validation,exception,couldn,t,find,a,destroy,method,named,destroy,method,name,on,bean,with,name,bean,name,else,class,param,types,this,destroy,method,get,parameter,types,if,param,types,length,1,throw,new,bean,definition,validation,exception,method,destroy,method,name,of,bean,bean,name,has,more,than,one,parameter,not,supported,as,destroy,method,else,if,param,types,length,1,boolean,class,param,types,0,throw,new,bean,definition,validation,exception,method,destroy,method,name,of,bean,bean,name,has,a,non,boolean,parameter,not,supported,as,destroy,method,this,bean,post,processors,filter,post,processors,post,processors
DisposableBeanAdapter -> public DisposableBeanAdapter(Object bean, String beanName, RootBeanDefinition beanDefinition, 			List<BeanPostProcessor> postProcessors, AccessControlContext acc);1450454045;Create a new DisposableBeanAdapter for the given bean._@param bean the bean instance (never {@code null})_@param beanName the name of the bean_@param beanDefinition the merged bean definition_@param postProcessors the List of BeanPostProcessors_(potentially DestructionAwareBeanPostProcessor), if any;public DisposableBeanAdapter(Object bean, String beanName, RootBeanDefinition beanDefinition,_			List<BeanPostProcessor> postProcessors, AccessControlContext acc) {__		Assert.notNull(bean, "Disposable bean must not be null")__		this.bean = bean__		this.beanName = beanName__		this.invokeDisposableBean =_				(this.bean instanceof DisposableBean && !beanDefinition.isExternallyManagedDestroyMethod("destroy"))__		this.nonPublicAccessAllowed = beanDefinition.isNonPublicAccessAllowed()__		this.acc = acc__		String destroyMethodName = inferDestroyMethodIfNecessary(bean, beanDefinition)__		if (destroyMethodName != null && !(this.invokeDisposableBean && "destroy".equals(destroyMethodName)) &&_				!beanDefinition.isExternallyManagedDestroyMethod(destroyMethodName)) {_			this.destroyMethodName = destroyMethodName__			this.destroyMethod = determineDestroyMethod()__			if (this.destroyMethod == null) {_				if (beanDefinition.isEnforceDestroyMethod()) {_					throw new BeanDefinitionValidationException("Couldn't find a destroy method named '" +_							destroyMethodName + "' on bean with name '" + beanName + "'")__				}_			}_			else {_				Class<?>[] paramTypes = this.destroyMethod.getParameterTypes()__				if (paramTypes.length > 1) {_					throw new BeanDefinitionValidationException("Method '" + destroyMethodName + "' of bean '" +_							beanName + "' has more than one parameter - not supported as destroy method")__				}_				else if (paramTypes.length == 1 && boolean.class != paramTypes[0]) {_					throw new BeanDefinitionValidationException("Method '" + destroyMethodName + "' of bean '" +_							beanName + "' has a non-boolean parameter - not supported as destroy method")__				}_			}_		}_		this.beanPostProcessors = filterPostProcessors(postProcessors, bean)__	};create,a,new,disposable,bean,adapter,for,the,given,bean,param,bean,the,bean,instance,never,code,null,param,bean,name,the,name,of,the,bean,param,bean,definition,the,merged,bean,definition,param,post,processors,the,list,of,bean,post,processors,potentially,destruction,aware,bean,post,processor,if,any;public,disposable,bean,adapter,object,bean,string,bean,name,root,bean,definition,bean,definition,list,bean,post,processor,post,processors,access,control,context,acc,assert,not,null,bean,disposable,bean,must,not,be,null,this,bean,bean,this,bean,name,bean,name,this,invoke,disposable,bean,this,bean,instanceof,disposable,bean,bean,definition,is,externally,managed,destroy,method,destroy,this,non,public,access,allowed,bean,definition,is,non,public,access,allowed,this,acc,acc,string,destroy,method,name,infer,destroy,method,if,necessary,bean,bean,definition,if,destroy,method,name,null,this,invoke,disposable,bean,destroy,equals,destroy,method,name,bean,definition,is,externally,managed,destroy,method,destroy,method,name,this,destroy,method,name,destroy,method,name,this,destroy,method,determine,destroy,method,if,this,destroy,method,null,if,bean,definition,is,enforce,destroy,method,throw,new,bean,definition,validation,exception,couldn,t,find,a,destroy,method,named,destroy,method,name,on,bean,with,name,bean,name,else,class,param,types,this,destroy,method,get,parameter,types,if,param,types,length,1,throw,new,bean,definition,validation,exception,method,destroy,method,name,of,bean,bean,name,has,more,than,one,parameter,not,supported,as,destroy,method,else,if,param,types,length,1,boolean,class,param,types,0,throw,new,bean,definition,validation,exception,method,destroy,method,name,of,bean,bean,name,has,a,non,boolean,parameter,not,supported,as,destroy,method,this,bean,post,processors,filter,post,processors,post,processors,bean
DisposableBeanAdapter -> public DisposableBeanAdapter(Object bean, String beanName, RootBeanDefinition beanDefinition, 			List<BeanPostProcessor> postProcessors, AccessControlContext acc);1454934048;Create a new DisposableBeanAdapter for the given bean._@param bean the bean instance (never {@code null})_@param beanName the name of the bean_@param beanDefinition the merged bean definition_@param postProcessors the List of BeanPostProcessors_(potentially DestructionAwareBeanPostProcessor), if any;public DisposableBeanAdapter(Object bean, String beanName, RootBeanDefinition beanDefinition,_			List<BeanPostProcessor> postProcessors, AccessControlContext acc) {__		Assert.notNull(bean, "Disposable bean must not be null")__		this.bean = bean__		this.beanName = beanName__		this.invokeDisposableBean =_				(this.bean instanceof DisposableBean && !beanDefinition.isExternallyManagedDestroyMethod("destroy"))__		this.nonPublicAccessAllowed = beanDefinition.isNonPublicAccessAllowed()__		this.acc = acc__		String destroyMethodName = inferDestroyMethodIfNecessary(bean, beanDefinition)__		if (destroyMethodName != null && !(this.invokeDisposableBean && "destroy".equals(destroyMethodName)) &&_				!beanDefinition.isExternallyManagedDestroyMethod(destroyMethodName)) {_			this.destroyMethodName = destroyMethodName__			this.destroyMethod = determineDestroyMethod()__			if (this.destroyMethod == null) {_				if (beanDefinition.isEnforceDestroyMethod()) {_					throw new BeanDefinitionValidationException("Couldn't find a destroy method named '" +_							destroyMethodName + "' on bean with name '" + beanName + "'")__				}_			}_			else {_				Class<?>[] paramTypes = this.destroyMethod.getParameterTypes()__				if (paramTypes.length > 1) {_					throw new BeanDefinitionValidationException("Method '" + destroyMethodName + "' of bean '" +_							beanName + "' has more than one parameter - not supported as destroy method")__				}_				else if (paramTypes.length == 1 && boolean.class != paramTypes[0]) {_					throw new BeanDefinitionValidationException("Method '" + destroyMethodName + "' of bean '" +_							beanName + "' has a non-boolean parameter - not supported as destroy method")__				}_			}_		}_		this.beanPostProcessors = filterPostProcessors(postProcessors, bean)__	};create,a,new,disposable,bean,adapter,for,the,given,bean,param,bean,the,bean,instance,never,code,null,param,bean,name,the,name,of,the,bean,param,bean,definition,the,merged,bean,definition,param,post,processors,the,list,of,bean,post,processors,potentially,destruction,aware,bean,post,processor,if,any;public,disposable,bean,adapter,object,bean,string,bean,name,root,bean,definition,bean,definition,list,bean,post,processor,post,processors,access,control,context,acc,assert,not,null,bean,disposable,bean,must,not,be,null,this,bean,bean,this,bean,name,bean,name,this,invoke,disposable,bean,this,bean,instanceof,disposable,bean,bean,definition,is,externally,managed,destroy,method,destroy,this,non,public,access,allowed,bean,definition,is,non,public,access,allowed,this,acc,acc,string,destroy,method,name,infer,destroy,method,if,necessary,bean,bean,definition,if,destroy,method,name,null,this,invoke,disposable,bean,destroy,equals,destroy,method,name,bean,definition,is,externally,managed,destroy,method,destroy,method,name,this,destroy,method,name,destroy,method,name,this,destroy,method,determine,destroy,method,if,this,destroy,method,null,if,bean,definition,is,enforce,destroy,method,throw,new,bean,definition,validation,exception,couldn,t,find,a,destroy,method,named,destroy,method,name,on,bean,with,name,bean,name,else,class,param,types,this,destroy,method,get,parameter,types,if,param,types,length,1,throw,new,bean,definition,validation,exception,method,destroy,method,name,of,bean,bean,name,has,more,than,one,parameter,not,supported,as,destroy,method,else,if,param,types,length,1,boolean,class,param,types,0,throw,new,bean,definition,validation,exception,method,destroy,method,name,of,bean,bean,name,has,a,non,boolean,parameter,not,supported,as,destroy,method,this,bean,post,processors,filter,post,processors,post,processors,bean
DisposableBeanAdapter -> public DisposableBeanAdapter(Object bean, String beanName, RootBeanDefinition beanDefinition, 			List<BeanPostProcessor> postProcessors, AccessControlContext acc);1467730834;Create a new DisposableBeanAdapter for the given bean._@param bean the bean instance (never {@code null})_@param beanName the name of the bean_@param beanDefinition the merged bean definition_@param postProcessors the List of BeanPostProcessors_(potentially DestructionAwareBeanPostProcessor), if any;public DisposableBeanAdapter(Object bean, String beanName, RootBeanDefinition beanDefinition,_			List<BeanPostProcessor> postProcessors, AccessControlContext acc) {__		Assert.notNull(bean, "Disposable bean must not be null")__		this.bean = bean__		this.beanName = beanName__		this.invokeDisposableBean =_				(this.bean instanceof DisposableBean && !beanDefinition.isExternallyManagedDestroyMethod("destroy"))__		this.nonPublicAccessAllowed = beanDefinition.isNonPublicAccessAllowed()__		this.acc = acc__		String destroyMethodName = inferDestroyMethodIfNecessary(bean, beanDefinition)__		if (destroyMethodName != null && !(this.invokeDisposableBean && "destroy".equals(destroyMethodName)) &&_				!beanDefinition.isExternallyManagedDestroyMethod(destroyMethodName)) {_			this.destroyMethodName = destroyMethodName__			this.destroyMethod = determineDestroyMethod()__			if (this.destroyMethod == null) {_				if (beanDefinition.isEnforceDestroyMethod()) {_					throw new BeanDefinitionValidationException("Couldn't find a destroy method named '" +_							destroyMethodName + "' on bean with name '" + beanName + "'")__				}_			}_			else {_				Class<?>[] paramTypes = this.destroyMethod.getParameterTypes()__				if (paramTypes.length > 1) {_					throw new BeanDefinitionValidationException("Method '" + destroyMethodName + "' of bean '" +_							beanName + "' has more than one parameter - not supported as destroy method")__				}_				else if (paramTypes.length == 1 && boolean.class != paramTypes[0]) {_					throw new BeanDefinitionValidationException("Method '" + destroyMethodName + "' of bean '" +_							beanName + "' has a non-boolean parameter - not supported as destroy method")__				}_			}_		}_		this.beanPostProcessors = filterPostProcessors(postProcessors, bean)__	};create,a,new,disposable,bean,adapter,for,the,given,bean,param,bean,the,bean,instance,never,code,null,param,bean,name,the,name,of,the,bean,param,bean,definition,the,merged,bean,definition,param,post,processors,the,list,of,bean,post,processors,potentially,destruction,aware,bean,post,processor,if,any;public,disposable,bean,adapter,object,bean,string,bean,name,root,bean,definition,bean,definition,list,bean,post,processor,post,processors,access,control,context,acc,assert,not,null,bean,disposable,bean,must,not,be,null,this,bean,bean,this,bean,name,bean,name,this,invoke,disposable,bean,this,bean,instanceof,disposable,bean,bean,definition,is,externally,managed,destroy,method,destroy,this,non,public,access,allowed,bean,definition,is,non,public,access,allowed,this,acc,acc,string,destroy,method,name,infer,destroy,method,if,necessary,bean,bean,definition,if,destroy,method,name,null,this,invoke,disposable,bean,destroy,equals,destroy,method,name,bean,definition,is,externally,managed,destroy,method,destroy,method,name,this,destroy,method,name,destroy,method,name,this,destroy,method,determine,destroy,method,if,this,destroy,method,null,if,bean,definition,is,enforce,destroy,method,throw,new,bean,definition,validation,exception,couldn,t,find,a,destroy,method,named,destroy,method,name,on,bean,with,name,bean,name,else,class,param,types,this,destroy,method,get,parameter,types,if,param,types,length,1,throw,new,bean,definition,validation,exception,method,destroy,method,name,of,bean,bean,name,has,more,than,one,parameter,not,supported,as,destroy,method,else,if,param,types,length,1,boolean,class,param,types,0,throw,new,bean,definition,validation,exception,method,destroy,method,name,of,bean,bean,name,has,a,non,boolean,parameter,not,supported,as,destroy,method,this,bean,post,processors,filter,post,processors,post,processors,bean
DisposableBeanAdapter -> public DisposableBeanAdapter(Object bean, String beanName, RootBeanDefinition beanDefinition, 			List<BeanPostProcessor> postProcessors, AccessControlContext acc);1469441195;Create a new DisposableBeanAdapter for the given bean._@param bean the bean instance (never {@code null})_@param beanName the name of the bean_@param beanDefinition the merged bean definition_@param postProcessors the List of BeanPostProcessors_(potentially DestructionAwareBeanPostProcessor), if any;public DisposableBeanAdapter(Object bean, String beanName, RootBeanDefinition beanDefinition,_			List<BeanPostProcessor> postProcessors, AccessControlContext acc) {__		Assert.notNull(bean, "Disposable bean must not be null")__		this.bean = bean__		this.beanName = beanName__		this.invokeDisposableBean =_				(this.bean instanceof DisposableBean && !beanDefinition.isExternallyManagedDestroyMethod("destroy"))__		this.nonPublicAccessAllowed = beanDefinition.isNonPublicAccessAllowed()__		this.acc = acc__		String destroyMethodName = inferDestroyMethodIfNecessary(bean, beanDefinition)__		if (destroyMethodName != null && !(this.invokeDisposableBean && "destroy".equals(destroyMethodName)) &&_				!beanDefinition.isExternallyManagedDestroyMethod(destroyMethodName)) {_			this.destroyMethodName = destroyMethodName__			this.destroyMethod = determineDestroyMethod()__			if (this.destroyMethod == null) {_				if (beanDefinition.isEnforceDestroyMethod()) {_					throw new BeanDefinitionValidationException("Couldn't find a destroy method named '" +_							destroyMethodName + "' on bean with name '" + beanName + "'")__				}_			}_			else {_				Class<?>[] paramTypes = this.destroyMethod.getParameterTypes()__				if (paramTypes.length > 1) {_					throw new BeanDefinitionValidationException("Method '" + destroyMethodName + "' of bean '" +_							beanName + "' has more than one parameter - not supported as destroy method")__				}_				else if (paramTypes.length == 1 && boolean.class != paramTypes[0]) {_					throw new BeanDefinitionValidationException("Method '" + destroyMethodName + "' of bean '" +_							beanName + "' has a non-boolean parameter - not supported as destroy method")__				}_			}_		}_		this.beanPostProcessors = filterPostProcessors(postProcessors, bean)__	};create,a,new,disposable,bean,adapter,for,the,given,bean,param,bean,the,bean,instance,never,code,null,param,bean,name,the,name,of,the,bean,param,bean,definition,the,merged,bean,definition,param,post,processors,the,list,of,bean,post,processors,potentially,destruction,aware,bean,post,processor,if,any;public,disposable,bean,adapter,object,bean,string,bean,name,root,bean,definition,bean,definition,list,bean,post,processor,post,processors,access,control,context,acc,assert,not,null,bean,disposable,bean,must,not,be,null,this,bean,bean,this,bean,name,bean,name,this,invoke,disposable,bean,this,bean,instanceof,disposable,bean,bean,definition,is,externally,managed,destroy,method,destroy,this,non,public,access,allowed,bean,definition,is,non,public,access,allowed,this,acc,acc,string,destroy,method,name,infer,destroy,method,if,necessary,bean,bean,definition,if,destroy,method,name,null,this,invoke,disposable,bean,destroy,equals,destroy,method,name,bean,definition,is,externally,managed,destroy,method,destroy,method,name,this,destroy,method,name,destroy,method,name,this,destroy,method,determine,destroy,method,if,this,destroy,method,null,if,bean,definition,is,enforce,destroy,method,throw,new,bean,definition,validation,exception,couldn,t,find,a,destroy,method,named,destroy,method,name,on,bean,with,name,bean,name,else,class,param,types,this,destroy,method,get,parameter,types,if,param,types,length,1,throw,new,bean,definition,validation,exception,method,destroy,method,name,of,bean,bean,name,has,more,than,one,parameter,not,supported,as,destroy,method,else,if,param,types,length,1,boolean,class,param,types,0,throw,new,bean,definition,validation,exception,method,destroy,method,name,of,bean,bean,name,has,a,non,boolean,parameter,not,supported,as,destroy,method,this,bean,post,processors,filter,post,processors,post,processors,bean
DisposableBeanAdapter -> public DisposableBeanAdapter(Object bean, String beanName, RootBeanDefinition beanDefinition, 			List<BeanPostProcessor> postProcessors, AccessControlContext acc);1479746164;Create a new DisposableBeanAdapter for the given bean._@param bean the bean instance (never {@code null})_@param beanName the name of the bean_@param beanDefinition the merged bean definition_@param postProcessors the List of BeanPostProcessors_(potentially DestructionAwareBeanPostProcessor), if any;public DisposableBeanAdapter(Object bean, String beanName, RootBeanDefinition beanDefinition,_			List<BeanPostProcessor> postProcessors, AccessControlContext acc) {__		Assert.notNull(bean, "Disposable bean must not be null")__		this.bean = bean__		this.beanName = beanName__		this.invokeDisposableBean =_				(this.bean instanceof DisposableBean && !beanDefinition.isExternallyManagedDestroyMethod("destroy"))__		this.nonPublicAccessAllowed = beanDefinition.isNonPublicAccessAllowed()__		this.acc = acc__		String destroyMethodName = inferDestroyMethodIfNecessary(bean, beanDefinition)__		if (destroyMethodName != null && !(this.invokeDisposableBean && "destroy".equals(destroyMethodName)) &&_				!beanDefinition.isExternallyManagedDestroyMethod(destroyMethodName)) {_			this.destroyMethodName = destroyMethodName__			this.destroyMethod = determineDestroyMethod()__			if (this.destroyMethod == null) {_				if (beanDefinition.isEnforceDestroyMethod()) {_					throw new BeanDefinitionValidationException("Couldn't find a destroy method named '" +_							destroyMethodName + "' on bean with name '" + beanName + "'")__				}_			}_			else {_				Class<?>[] paramTypes = this.destroyMethod.getParameterTypes()__				if (paramTypes.length > 1) {_					throw new BeanDefinitionValidationException("Method '" + destroyMethodName + "' of bean '" +_							beanName + "' has more than one parameter - not supported as destroy method")__				}_				else if (paramTypes.length == 1 && boolean.class != paramTypes[0]) {_					throw new BeanDefinitionValidationException("Method '" + destroyMethodName + "' of bean '" +_							beanName + "' has a non-boolean parameter - not supported as destroy method")__				}_			}_		}_		this.beanPostProcessors = filterPostProcessors(postProcessors, bean)__	};create,a,new,disposable,bean,adapter,for,the,given,bean,param,bean,the,bean,instance,never,code,null,param,bean,name,the,name,of,the,bean,param,bean,definition,the,merged,bean,definition,param,post,processors,the,list,of,bean,post,processors,potentially,destruction,aware,bean,post,processor,if,any;public,disposable,bean,adapter,object,bean,string,bean,name,root,bean,definition,bean,definition,list,bean,post,processor,post,processors,access,control,context,acc,assert,not,null,bean,disposable,bean,must,not,be,null,this,bean,bean,this,bean,name,bean,name,this,invoke,disposable,bean,this,bean,instanceof,disposable,bean,bean,definition,is,externally,managed,destroy,method,destroy,this,non,public,access,allowed,bean,definition,is,non,public,access,allowed,this,acc,acc,string,destroy,method,name,infer,destroy,method,if,necessary,bean,bean,definition,if,destroy,method,name,null,this,invoke,disposable,bean,destroy,equals,destroy,method,name,bean,definition,is,externally,managed,destroy,method,destroy,method,name,this,destroy,method,name,destroy,method,name,this,destroy,method,determine,destroy,method,if,this,destroy,method,null,if,bean,definition,is,enforce,destroy,method,throw,new,bean,definition,validation,exception,couldn,t,find,a,destroy,method,named,destroy,method,name,on,bean,with,name,bean,name,else,class,param,types,this,destroy,method,get,parameter,types,if,param,types,length,1,throw,new,bean,definition,validation,exception,method,destroy,method,name,of,bean,bean,name,has,more,than,one,parameter,not,supported,as,destroy,method,else,if,param,types,length,1,boolean,class,param,types,0,throw,new,bean,definition,validation,exception,method,destroy,method,name,of,bean,bean,name,has,a,non,boolean,parameter,not,supported,as,destroy,method,this,bean,post,processors,filter,post,processors,post,processors,bean
DisposableBeanAdapter -> public DisposableBeanAdapter(Object bean, String beanName, RootBeanDefinition beanDefinition, 			List<BeanPostProcessor> postProcessors, AccessControlContext acc);1495868221;Create a new DisposableBeanAdapter for the given bean._@param bean the bean instance (never {@code null})_@param beanName the name of the bean_@param beanDefinition the merged bean definition_@param postProcessors the List of BeanPostProcessors_(potentially DestructionAwareBeanPostProcessor), if any;public DisposableBeanAdapter(Object bean, String beanName, RootBeanDefinition beanDefinition,_			List<BeanPostProcessor> postProcessors, AccessControlContext acc) {__		Assert.notNull(bean, "Disposable bean must not be null")__		this.bean = bean__		this.beanName = beanName__		this.invokeDisposableBean =_				(this.bean instanceof DisposableBean && !beanDefinition.isExternallyManagedDestroyMethod("destroy"))__		this.nonPublicAccessAllowed = beanDefinition.isNonPublicAccessAllowed()__		this.acc = acc__		String destroyMethodName = inferDestroyMethodIfNecessary(bean, beanDefinition)__		if (destroyMethodName != null && !(this.invokeDisposableBean && "destroy".equals(destroyMethodName)) &&_				!beanDefinition.isExternallyManagedDestroyMethod(destroyMethodName)) {_			this.destroyMethodName = destroyMethodName__			this.destroyMethod = determineDestroyMethod()__			if (this.destroyMethod == null) {_				if (beanDefinition.isEnforceDestroyMethod()) {_					throw new BeanDefinitionValidationException("Couldn't find a destroy method named '" +_							destroyMethodName + "' on bean with name '" + beanName + "'")__				}_			}_			else {_				Class<?>[] paramTypes = this.destroyMethod.getParameterTypes()__				if (paramTypes.length > 1) {_					throw new BeanDefinitionValidationException("Method '" + destroyMethodName + "' of bean '" +_							beanName + "' has more than one parameter - not supported as destroy method")__				}_				else if (paramTypes.length == 1 && boolean.class != paramTypes[0]) {_					throw new BeanDefinitionValidationException("Method '" + destroyMethodName + "' of bean '" +_							beanName + "' has a non-boolean parameter - not supported as destroy method")__				}_			}_		}_		this.beanPostProcessors = filterPostProcessors(postProcessors, bean)__	};create,a,new,disposable,bean,adapter,for,the,given,bean,param,bean,the,bean,instance,never,code,null,param,bean,name,the,name,of,the,bean,param,bean,definition,the,merged,bean,definition,param,post,processors,the,list,of,bean,post,processors,potentially,destruction,aware,bean,post,processor,if,any;public,disposable,bean,adapter,object,bean,string,bean,name,root,bean,definition,bean,definition,list,bean,post,processor,post,processors,access,control,context,acc,assert,not,null,bean,disposable,bean,must,not,be,null,this,bean,bean,this,bean,name,bean,name,this,invoke,disposable,bean,this,bean,instanceof,disposable,bean,bean,definition,is,externally,managed,destroy,method,destroy,this,non,public,access,allowed,bean,definition,is,non,public,access,allowed,this,acc,acc,string,destroy,method,name,infer,destroy,method,if,necessary,bean,bean,definition,if,destroy,method,name,null,this,invoke,disposable,bean,destroy,equals,destroy,method,name,bean,definition,is,externally,managed,destroy,method,destroy,method,name,this,destroy,method,name,destroy,method,name,this,destroy,method,determine,destroy,method,if,this,destroy,method,null,if,bean,definition,is,enforce,destroy,method,throw,new,bean,definition,validation,exception,couldn,t,find,a,destroy,method,named,destroy,method,name,on,bean,with,name,bean,name,else,class,param,types,this,destroy,method,get,parameter,types,if,param,types,length,1,throw,new,bean,definition,validation,exception,method,destroy,method,name,of,bean,bean,name,has,more,than,one,parameter,not,supported,as,destroy,method,else,if,param,types,length,1,boolean,class,param,types,0,throw,new,bean,definition,validation,exception,method,destroy,method,name,of,bean,bean,name,has,a,non,boolean,parameter,not,supported,as,destroy,method,this,bean,post,processors,filter,post,processors,post,processors,bean
DisposableBeanAdapter -> public static boolean hasApplicableProcessors(Object bean, List<BeanPostProcessor> postProcessors);1450454045;Check whether the given bean has destruction-aware post-processors applying to it._@param bean the bean instance_@param postProcessors the post-processor candidates;public static boolean hasApplicableProcessors(Object bean, List<BeanPostProcessor> postProcessors) {_		if (!CollectionUtils.isEmpty(postProcessors)) {_			for (BeanPostProcessor processor : postProcessors) {_				if (processor instanceof DestructionAwareBeanPostProcessor) {_					DestructionAwareBeanPostProcessor dabpp = (DestructionAwareBeanPostProcessor) processor__					try {_						if (dabpp.requiresDestruction(bean)) {_							return true__						}_					}_					catch (AbstractMethodError err) {_						_						_						return true__					}_				}_			}_		}_		return false__	};check,whether,the,given,bean,has,destruction,aware,post,processors,applying,to,it,param,bean,the,bean,instance,param,post,processors,the,post,processor,candidates;public,static,boolean,has,applicable,processors,object,bean,list,bean,post,processor,post,processors,if,collection,utils,is,empty,post,processors,for,bean,post,processor,processor,post,processors,if,processor,instanceof,destruction,aware,bean,post,processor,destruction,aware,bean,post,processor,dabpp,destruction,aware,bean,post,processor,processor,try,if,dabpp,requires,destruction,bean,return,true,catch,abstract,method,error,err,return,true,return,false
DisposableBeanAdapter -> public static boolean hasApplicableProcessors(Object bean, List<BeanPostProcessor> postProcessors);1454934048;Check whether the given bean has destruction-aware post-processors applying to it._@param bean the bean instance_@param postProcessors the post-processor candidates;public static boolean hasApplicableProcessors(Object bean, List<BeanPostProcessor> postProcessors) {_		if (!CollectionUtils.isEmpty(postProcessors)) {_			for (BeanPostProcessor processor : postProcessors) {_				if (processor instanceof DestructionAwareBeanPostProcessor) {_					DestructionAwareBeanPostProcessor dabpp = (DestructionAwareBeanPostProcessor) processor__					try {_						if (dabpp.requiresDestruction(bean)) {_							return true__						}_					}_					catch (AbstractMethodError err) {_						_						_						return true__					}_				}_			}_		}_		return false__	};check,whether,the,given,bean,has,destruction,aware,post,processors,applying,to,it,param,bean,the,bean,instance,param,post,processors,the,post,processor,candidates;public,static,boolean,has,applicable,processors,object,bean,list,bean,post,processor,post,processors,if,collection,utils,is,empty,post,processors,for,bean,post,processor,processor,post,processors,if,processor,instanceof,destruction,aware,bean,post,processor,destruction,aware,bean,post,processor,dabpp,destruction,aware,bean,post,processor,processor,try,if,dabpp,requires,destruction,bean,return,true,catch,abstract,method,error,err,return,true,return,false
DisposableBeanAdapter -> public static boolean hasApplicableProcessors(Object bean, List<BeanPostProcessor> postProcessors);1467730834;Check whether the given bean has destruction-aware post-processors applying to it._@param bean the bean instance_@param postProcessors the post-processor candidates;public static boolean hasApplicableProcessors(Object bean, List<BeanPostProcessor> postProcessors) {_		if (!CollectionUtils.isEmpty(postProcessors)) {_			for (BeanPostProcessor processor : postProcessors) {_				if (processor instanceof DestructionAwareBeanPostProcessor) {_					DestructionAwareBeanPostProcessor dabpp = (DestructionAwareBeanPostProcessor) processor__					try {_						if (dabpp.requiresDestruction(bean)) {_							return true__						}_					}_					catch (AbstractMethodError err) {_						_						_						return true__					}_				}_			}_		}_		return false__	};check,whether,the,given,bean,has,destruction,aware,post,processors,applying,to,it,param,bean,the,bean,instance,param,post,processors,the,post,processor,candidates;public,static,boolean,has,applicable,processors,object,bean,list,bean,post,processor,post,processors,if,collection,utils,is,empty,post,processors,for,bean,post,processor,processor,post,processors,if,processor,instanceof,destruction,aware,bean,post,processor,destruction,aware,bean,post,processor,dabpp,destruction,aware,bean,post,processor,processor,try,if,dabpp,requires,destruction,bean,return,true,catch,abstract,method,error,err,return,true,return,false
DisposableBeanAdapter -> public static boolean hasApplicableProcessors(Object bean, List<BeanPostProcessor> postProcessors);1469441195;Check whether the given bean has destruction-aware post-processors applying to it._@param bean the bean instance_@param postProcessors the post-processor candidates;public static boolean hasApplicableProcessors(Object bean, List<BeanPostProcessor> postProcessors) {_		if (!CollectionUtils.isEmpty(postProcessors)) {_			for (BeanPostProcessor processor : postProcessors) {_				if (processor instanceof DestructionAwareBeanPostProcessor) {_					DestructionAwareBeanPostProcessor dabpp = (DestructionAwareBeanPostProcessor) processor__					try {_						if (dabpp.requiresDestruction(bean)) {_							return true__						}_					}_					catch (AbstractMethodError err) {_						_						_						return true__					}_				}_			}_		}_		return false__	};check,whether,the,given,bean,has,destruction,aware,post,processors,applying,to,it,param,bean,the,bean,instance,param,post,processors,the,post,processor,candidates;public,static,boolean,has,applicable,processors,object,bean,list,bean,post,processor,post,processors,if,collection,utils,is,empty,post,processors,for,bean,post,processor,processor,post,processors,if,processor,instanceof,destruction,aware,bean,post,processor,destruction,aware,bean,post,processor,dabpp,destruction,aware,bean,post,processor,processor,try,if,dabpp,requires,destruction,bean,return,true,catch,abstract,method,error,err,return,true,return,false
DisposableBeanAdapter -> public static boolean hasApplicableProcessors(Object bean, List<BeanPostProcessor> postProcessors);1479746164;Check whether the given bean has destruction-aware post-processors applying to it._@param bean the bean instance_@param postProcessors the post-processor candidates;public static boolean hasApplicableProcessors(Object bean, List<BeanPostProcessor> postProcessors) {_		if (!CollectionUtils.isEmpty(postProcessors)) {_			for (BeanPostProcessor processor : postProcessors) {_				if (processor instanceof DestructionAwareBeanPostProcessor) {_					DestructionAwareBeanPostProcessor dabpp = (DestructionAwareBeanPostProcessor) processor__					try {_						if (dabpp.requiresDestruction(bean)) {_							return true__						}_					}_					catch (AbstractMethodError err) {_						_						_						return true__					}_				}_			}_		}_		return false__	};check,whether,the,given,bean,has,destruction,aware,post,processors,applying,to,it,param,bean,the,bean,instance,param,post,processors,the,post,processor,candidates;public,static,boolean,has,applicable,processors,object,bean,list,bean,post,processor,post,processors,if,collection,utils,is,empty,post,processors,for,bean,post,processor,processor,post,processors,if,processor,instanceof,destruction,aware,bean,post,processor,destruction,aware,bean,post,processor,dabpp,destruction,aware,bean,post,processor,processor,try,if,dabpp,requires,destruction,bean,return,true,catch,abstract,method,error,err,return,true,return,false
DisposableBeanAdapter -> public static boolean hasApplicableProcessors(Object bean, List<BeanPostProcessor> postProcessors);1495868221;Check whether the given bean has destruction-aware post-processors applying to it._@param bean the bean instance_@param postProcessors the post-processor candidates;public static boolean hasApplicableProcessors(Object bean, List<BeanPostProcessor> postProcessors) {_		if (!CollectionUtils.isEmpty(postProcessors)) {_			for (BeanPostProcessor processor : postProcessors) {_				if (processor instanceof DestructionAwareBeanPostProcessor) {_					DestructionAwareBeanPostProcessor dabpp = (DestructionAwareBeanPostProcessor) processor__					try {_						if (dabpp.requiresDestruction(bean)) {_							return true__						}_					}_					catch (AbstractMethodError err) {_						_						_						return true__					}_				}_			}_		}_		return false__	};check,whether,the,given,bean,has,destruction,aware,post,processors,applying,to,it,param,bean,the,bean,instance,param,post,processors,the,post,processor,candidates;public,static,boolean,has,applicable,processors,object,bean,list,bean,post,processor,post,processors,if,collection,utils,is,empty,post,processors,for,bean,post,processor,processor,post,processors,if,processor,instanceof,destruction,aware,bean,post,processor,destruction,aware,bean,post,processor,dabpp,destruction,aware,bean,post,processor,processor,try,if,dabpp,requires,destruction,bean,return,true,catch,abstract,method,error,err,return,true,return,false
DisposableBeanAdapter -> public static boolean hasApplicableProcessors(Object bean, List<BeanPostProcessor> postProcessors);1496837955;Check whether the given bean has destruction-aware post-processors applying to it._@param bean the bean instance_@param postProcessors the post-processor candidates;public static boolean hasApplicableProcessors(Object bean, List<BeanPostProcessor> postProcessors) {_		if (!CollectionUtils.isEmpty(postProcessors)) {_			for (BeanPostProcessor processor : postProcessors) {_				if (processor instanceof DestructionAwareBeanPostProcessor) {_					DestructionAwareBeanPostProcessor dabpp = (DestructionAwareBeanPostProcessor) processor__					if (dabpp.requiresDestruction(bean)) {_						return true__					}_				}_			}_		}_		return false__	};check,whether,the,given,bean,has,destruction,aware,post,processors,applying,to,it,param,bean,the,bean,instance,param,post,processors,the,post,processor,candidates;public,static,boolean,has,applicable,processors,object,bean,list,bean,post,processor,post,processors,if,collection,utils,is,empty,post,processors,for,bean,post,processor,processor,post,processors,if,processor,instanceof,destruction,aware,bean,post,processor,destruction,aware,bean,post,processor,dabpp,destruction,aware,bean,post,processor,processor,if,dabpp,requires,destruction,bean,return,true,return,false
DisposableBeanAdapter -> public static boolean hasApplicableProcessors(Object bean, List<BeanPostProcessor> postProcessors);1498780456;Check whether the given bean has destruction-aware post-processors applying to it._@param bean the bean instance_@param postProcessors the post-processor candidates;public static boolean hasApplicableProcessors(Object bean, List<BeanPostProcessor> postProcessors) {_		if (!CollectionUtils.isEmpty(postProcessors)) {_			for (BeanPostProcessor processor : postProcessors) {_				if (processor instanceof DestructionAwareBeanPostProcessor) {_					DestructionAwareBeanPostProcessor dabpp = (DestructionAwareBeanPostProcessor) processor__					if (dabpp.requiresDestruction(bean)) {_						return true__					}_				}_			}_		}_		return false__	};check,whether,the,given,bean,has,destruction,aware,post,processors,applying,to,it,param,bean,the,bean,instance,param,post,processors,the,post,processor,candidates;public,static,boolean,has,applicable,processors,object,bean,list,bean,post,processor,post,processors,if,collection,utils,is,empty,post,processors,for,bean,post,processor,processor,post,processors,if,processor,instanceof,destruction,aware,bean,post,processor,destruction,aware,bean,post,processor,dabpp,destruction,aware,bean,post,processor,processor,if,dabpp,requires,destruction,bean,return,true,return,false
DisposableBeanAdapter -> public static boolean hasApplicableProcessors(Object bean, List<BeanPostProcessor> postProcessors);1530174524;Check whether the given bean has destruction-aware post-processors applying to it._@param bean the bean instance_@param postProcessors the post-processor candidates;public static boolean hasApplicableProcessors(Object bean, List<BeanPostProcessor> postProcessors) {_		if (!CollectionUtils.isEmpty(postProcessors)) {_			for (BeanPostProcessor processor : postProcessors) {_				if (processor instanceof DestructionAwareBeanPostProcessor) {_					DestructionAwareBeanPostProcessor dabpp = (DestructionAwareBeanPostProcessor) processor__					if (dabpp.requiresDestruction(bean)) {_						return true__					}_				}_			}_		}_		return false__	};check,whether,the,given,bean,has,destruction,aware,post,processors,applying,to,it,param,bean,the,bean,instance,param,post,processors,the,post,processor,candidates;public,static,boolean,has,applicable,processors,object,bean,list,bean,post,processor,post,processors,if,collection,utils,is,empty,post,processors,for,bean,post,processor,processor,post,processors,if,processor,instanceof,destruction,aware,bean,post,processor,destruction,aware,bean,post,processor,dabpp,destruction,aware,bean,post,processor,processor,if,dabpp,requires,destruction,bean,return,true,return,false
DisposableBeanAdapter -> public static boolean hasApplicableProcessors(Object bean, List<BeanPostProcessor> postProcessors);1532091916;Check whether the given bean has destruction-aware post-processors applying to it._@param bean the bean instance_@param postProcessors the post-processor candidates;public static boolean hasApplicableProcessors(Object bean, List<BeanPostProcessor> postProcessors) {_		if (!CollectionUtils.isEmpty(postProcessors)) {_			for (BeanPostProcessor processor : postProcessors) {_				if (processor instanceof DestructionAwareBeanPostProcessor) {_					DestructionAwareBeanPostProcessor dabpp = (DestructionAwareBeanPostProcessor) processor__					if (dabpp.requiresDestruction(bean)) {_						return true__					}_				}_			}_		}_		return false__	};check,whether,the,given,bean,has,destruction,aware,post,processors,applying,to,it,param,bean,the,bean,instance,param,post,processors,the,post,processor,candidates;public,static,boolean,has,applicable,processors,object,bean,list,bean,post,processor,post,processors,if,collection,utils,is,empty,post,processors,for,bean,post,processor,processor,post,processors,if,processor,instanceof,destruction,aware,bean,post,processor,destruction,aware,bean,post,processor,dabpp,destruction,aware,bean,post,processor,processor,if,dabpp,requires,destruction,bean,return,true,return,false
DisposableBeanAdapter -> public static boolean hasApplicableProcessors(Object bean, List<BeanPostProcessor> postProcessors);1532706365;Check whether the given bean has destruction-aware post-processors applying to it._@param bean the bean instance_@param postProcessors the post-processor candidates;public static boolean hasApplicableProcessors(Object bean, List<BeanPostProcessor> postProcessors) {_		if (!CollectionUtils.isEmpty(postProcessors)) {_			for (BeanPostProcessor processor : postProcessors) {_				if (processor instanceof DestructionAwareBeanPostProcessor) {_					DestructionAwareBeanPostProcessor dabpp = (DestructionAwareBeanPostProcessor) processor__					if (dabpp.requiresDestruction(bean)) {_						return true__					}_				}_			}_		}_		return false__	};check,whether,the,given,bean,has,destruction,aware,post,processors,applying,to,it,param,bean,the,bean,instance,param,post,processors,the,post,processor,candidates;public,static,boolean,has,applicable,processors,object,bean,list,bean,post,processor,post,processors,if,collection,utils,is,empty,post,processors,for,bean,post,processor,processor,post,processors,if,processor,instanceof,destruction,aware,bean,post,processor,destruction,aware,bean,post,processor,dabpp,destruction,aware,bean,post,processor,processor,if,dabpp,requires,destruction,bean,return,true,return,false
DisposableBeanAdapter -> public static boolean hasApplicableProcessors(Object bean, List<BeanPostProcessor> postProcessors);1537391140;Check whether the given bean has destruction-aware post-processors applying to it._@param bean the bean instance_@param postProcessors the post-processor candidates;public static boolean hasApplicableProcessors(Object bean, List<BeanPostProcessor> postProcessors) {_		if (!CollectionUtils.isEmpty(postProcessors)) {_			for (BeanPostProcessor processor : postProcessors) {_				if (processor instanceof DestructionAwareBeanPostProcessor) {_					DestructionAwareBeanPostProcessor dabpp = (DestructionAwareBeanPostProcessor) processor__					if (dabpp.requiresDestruction(bean)) {_						return true__					}_				}_			}_		}_		return false__	};check,whether,the,given,bean,has,destruction,aware,post,processors,applying,to,it,param,bean,the,bean,instance,param,post,processors,the,post,processor,candidates;public,static,boolean,has,applicable,processors,object,bean,list,bean,post,processor,post,processors,if,collection,utils,is,empty,post,processors,for,bean,post,processor,processor,post,processors,if,processor,instanceof,destruction,aware,bean,post,processor,destruction,aware,bean,post,processor,dabpp,destruction,aware,bean,post,processor,processor,if,dabpp,requires,destruction,bean,return,true,return,false
DisposableBeanAdapter -> private DisposableBeanAdapter(Object bean, String beanName, boolean invokeDisposableBean, 			boolean nonPublicAccessAllowed, String destroyMethodName, 			List<DestructionAwareBeanPostProcessor> postProcessors);1328020251;Create a new DisposableBeanAdapter for the given bean.;private DisposableBeanAdapter(Object bean, String beanName, boolean invokeDisposableBean,_			boolean nonPublicAccessAllowed, String destroyMethodName,_			List<DestructionAwareBeanPostProcessor> postProcessors) {__		this.bean = bean__		this.beanName = beanName__		this.invokeDisposableBean = invokeDisposableBean__		this.nonPublicAccessAllowed = nonPublicAccessAllowed__		this.destroyMethodName = destroyMethodName__		this.beanPostProcessors = postProcessors__		this.acc = null__	};create,a,new,disposable,bean,adapter,for,the,given,bean;private,disposable,bean,adapter,object,bean,string,bean,name,boolean,invoke,disposable,bean,boolean,non,public,access,allowed,string,destroy,method,name,list,destruction,aware,bean,post,processor,post,processors,this,bean,bean,this,bean,name,bean,name,this,invoke,disposable,bean,invoke,disposable,bean,this,non,public,access,allowed,non,public,access,allowed,this,destroy,method,name,destroy,method,name,this,bean,post,processors,post,processors,this,acc,null
DisposableBeanAdapter -> private DisposableBeanAdapter(Object bean, String beanName, boolean invokeDisposableBean, 			boolean nonPublicAccessAllowed, String destroyMethodName, 			List<DestructionAwareBeanPostProcessor> postProcessors);1353966428;Create a new DisposableBeanAdapter for the given bean.;private DisposableBeanAdapter(Object bean, String beanName, boolean invokeDisposableBean,_			boolean nonPublicAccessAllowed, String destroyMethodName,_			List<DestructionAwareBeanPostProcessor> postProcessors) {__		this.bean = bean__		this.beanName = beanName__		this.invokeDisposableBean = invokeDisposableBean__		this.nonPublicAccessAllowed = nonPublicAccessAllowed__		this.destroyMethodName = destroyMethodName__		this.beanPostProcessors = postProcessors__		this.acc = null__	};create,a,new,disposable,bean,adapter,for,the,given,bean;private,disposable,bean,adapter,object,bean,string,bean,name,boolean,invoke,disposable,bean,boolean,non,public,access,allowed,string,destroy,method,name,list,destruction,aware,bean,post,processor,post,processors,this,bean,bean,this,bean,name,bean,name,this,invoke,disposable,bean,invoke,disposable,bean,this,non,public,access,allowed,non,public,access,allowed,this,destroy,method,name,destroy,method,name,this,bean,post,processors,post,processors,this,acc,null
DisposableBeanAdapter -> private DisposableBeanAdapter(Object bean, String beanName, boolean invokeDisposableBean, 			boolean nonPublicAccessAllowed, String destroyMethodName, 			List<DestructionAwareBeanPostProcessor> postProcessors);1356735495;Create a new DisposableBeanAdapter for the given bean.;private DisposableBeanAdapter(Object bean, String beanName, boolean invokeDisposableBean,_			boolean nonPublicAccessAllowed, String destroyMethodName,_			List<DestructionAwareBeanPostProcessor> postProcessors) {__		this.bean = bean__		this.beanName = beanName__		this.invokeDisposableBean = invokeDisposableBean__		this.nonPublicAccessAllowed = nonPublicAccessAllowed__		this.destroyMethodName = destroyMethodName__		this.beanPostProcessors = postProcessors__		this.acc = null__	};create,a,new,disposable,bean,adapter,for,the,given,bean;private,disposable,bean,adapter,object,bean,string,bean,name,boolean,invoke,disposable,bean,boolean,non,public,access,allowed,string,destroy,method,name,list,destruction,aware,bean,post,processor,post,processors,this,bean,bean,this,bean,name,bean,name,this,invoke,disposable,bean,invoke,disposable,bean,this,non,public,access,allowed,non,public,access,allowed,this,destroy,method,name,destroy,method,name,this,bean,post,processors,post,processors,this,acc,null
DisposableBeanAdapter -> private DisposableBeanAdapter(Object bean, String beanName, boolean invokeDisposableBean, 			boolean nonPublicAccessAllowed, String destroyMethodName, 			List<DestructionAwareBeanPostProcessor> postProcessors);1357119239;Create a new DisposableBeanAdapter for the given bean.;private DisposableBeanAdapter(Object bean, String beanName, boolean invokeDisposableBean,_			boolean nonPublicAccessAllowed, String destroyMethodName,_			List<DestructionAwareBeanPostProcessor> postProcessors) {__		this.bean = bean__		this.beanName = beanName__		this.invokeDisposableBean = invokeDisposableBean__		this.nonPublicAccessAllowed = nonPublicAccessAllowed__		this.destroyMethodName = destroyMethodName__		this.beanPostProcessors = postProcessors__		this.acc = null__	};create,a,new,disposable,bean,adapter,for,the,given,bean;private,disposable,bean,adapter,object,bean,string,bean,name,boolean,invoke,disposable,bean,boolean,non,public,access,allowed,string,destroy,method,name,list,destruction,aware,bean,post,processor,post,processors,this,bean,bean,this,bean,name,bean,name,this,invoke,disposable,bean,invoke,disposable,bean,this,non,public,access,allowed,non,public,access,allowed,this,destroy,method,name,destroy,method,name,this,bean,post,processors,post,processors,this,acc,null
DisposableBeanAdapter -> private DisposableBeanAdapter(Object bean, String beanName, boolean invokeDisposableBean, 			boolean nonPublicAccessAllowed, String destroyMethodName, 			List<DestructionAwareBeanPostProcessor> postProcessors);1362408075;Create a new DisposableBeanAdapter for the given bean.;private DisposableBeanAdapter(Object bean, String beanName, boolean invokeDisposableBean,_			boolean nonPublicAccessAllowed, String destroyMethodName,_			List<DestructionAwareBeanPostProcessor> postProcessors) {__		this.bean = bean__		this.beanName = beanName__		this.invokeDisposableBean = invokeDisposableBean__		this.nonPublicAccessAllowed = nonPublicAccessAllowed__		this.destroyMethodName = destroyMethodName__		this.beanPostProcessors = postProcessors__		this.acc = null__	};create,a,new,disposable,bean,adapter,for,the,given,bean;private,disposable,bean,adapter,object,bean,string,bean,name,boolean,invoke,disposable,bean,boolean,non,public,access,allowed,string,destroy,method,name,list,destruction,aware,bean,post,processor,post,processors,this,bean,bean,this,bean,name,bean,name,this,invoke,disposable,bean,invoke,disposable,bean,this,non,public,access,allowed,non,public,access,allowed,this,destroy,method,name,destroy,method,name,this,bean,post,processors,post,processors,this,acc,null
DisposableBeanAdapter -> private DisposableBeanAdapter(Object bean, String beanName, boolean invokeDisposableBean, 			boolean nonPublicAccessAllowed, String destroyMethodName, 			List<DestructionAwareBeanPostProcessor> postProcessors);1364503447;Create a new DisposableBeanAdapter for the given bean.;private DisposableBeanAdapter(Object bean, String beanName, boolean invokeDisposableBean,_			boolean nonPublicAccessAllowed, String destroyMethodName,_			List<DestructionAwareBeanPostProcessor> postProcessors) {__		this.bean = bean__		this.beanName = beanName__		this.invokeDisposableBean = invokeDisposableBean__		this.nonPublicAccessAllowed = nonPublicAccessAllowed__		this.acc = null__		this.destroyMethodName = destroyMethodName__		this.beanPostProcessors = postProcessors__	};create,a,new,disposable,bean,adapter,for,the,given,bean;private,disposable,bean,adapter,object,bean,string,bean,name,boolean,invoke,disposable,bean,boolean,non,public,access,allowed,string,destroy,method,name,list,destruction,aware,bean,post,processor,post,processors,this,bean,bean,this,bean,name,bean,name,this,invoke,disposable,bean,invoke,disposable,bean,this,non,public,access,allowed,non,public,access,allowed,this,acc,null,this,destroy,method,name,destroy,method,name,this,bean,post,processors,post,processors
DisposableBeanAdapter -> private DisposableBeanAdapter(Object bean, String beanName, boolean invokeDisposableBean, 			boolean nonPublicAccessAllowed, String destroyMethodName, 			List<DestructionAwareBeanPostProcessor> postProcessors);1368482696;Create a new DisposableBeanAdapter for the given bean.;private DisposableBeanAdapter(Object bean, String beanName, boolean invokeDisposableBean,_			boolean nonPublicAccessAllowed, String destroyMethodName,_			List<DestructionAwareBeanPostProcessor> postProcessors) {__		this.bean = bean__		this.beanName = beanName__		this.invokeDisposableBean = invokeDisposableBean__		this.nonPublicAccessAllowed = nonPublicAccessAllowed__		this.acc = null__		this.destroyMethodName = destroyMethodName__		this.beanPostProcessors = postProcessors__	};create,a,new,disposable,bean,adapter,for,the,given,bean;private,disposable,bean,adapter,object,bean,string,bean,name,boolean,invoke,disposable,bean,boolean,non,public,access,allowed,string,destroy,method,name,list,destruction,aware,bean,post,processor,post,processors,this,bean,bean,this,bean,name,bean,name,this,invoke,disposable,bean,invoke,disposable,bean,this,non,public,access,allowed,non,public,access,allowed,this,acc,null,this,destroy,method,name,destroy,method,name,this,bean,post,processors,post,processors
DisposableBeanAdapter -> private DisposableBeanAdapter(Object bean, String beanName, boolean invokeDisposableBean, 			boolean nonPublicAccessAllowed, String destroyMethodName, 			List<DestructionAwareBeanPostProcessor> postProcessors);1385412762;Create a new DisposableBeanAdapter for the given bean.;private DisposableBeanAdapter(Object bean, String beanName, boolean invokeDisposableBean,_			boolean nonPublicAccessAllowed, String destroyMethodName,_			List<DestructionAwareBeanPostProcessor> postProcessors) {__		this.bean = bean__		this.beanName = beanName__		this.invokeDisposableBean = invokeDisposableBean__		this.nonPublicAccessAllowed = nonPublicAccessAllowed__		this.acc = null__		this.destroyMethodName = destroyMethodName__		this.beanPostProcessors = postProcessors__	};create,a,new,disposable,bean,adapter,for,the,given,bean;private,disposable,bean,adapter,object,bean,string,bean,name,boolean,invoke,disposable,bean,boolean,non,public,access,allowed,string,destroy,method,name,list,destruction,aware,bean,post,processor,post,processors,this,bean,bean,this,bean,name,bean,name,this,invoke,disposable,bean,invoke,disposable,bean,this,non,public,access,allowed,non,public,access,allowed,this,acc,null,this,destroy,method,name,destroy,method,name,this,bean,post,processors,post,processors
DisposableBeanAdapter -> private DisposableBeanAdapter(Object bean, String beanName, boolean invokeDisposableBean, 			boolean nonPublicAccessAllowed, String destroyMethodName, 			List<DestructionAwareBeanPostProcessor> postProcessors);1398638841;Create a new DisposableBeanAdapter for the given bean.;private DisposableBeanAdapter(Object bean, String beanName, boolean invokeDisposableBean,_			boolean nonPublicAccessAllowed, String destroyMethodName,_			List<DestructionAwareBeanPostProcessor> postProcessors) {__		this.bean = bean__		this.beanName = beanName__		this.invokeDisposableBean = invokeDisposableBean__		this.nonPublicAccessAllowed = nonPublicAccessAllowed__		this.acc = null__		this.destroyMethodName = destroyMethodName__		this.beanPostProcessors = postProcessors__	};create,a,new,disposable,bean,adapter,for,the,given,bean;private,disposable,bean,adapter,object,bean,string,bean,name,boolean,invoke,disposable,bean,boolean,non,public,access,allowed,string,destroy,method,name,list,destruction,aware,bean,post,processor,post,processors,this,bean,bean,this,bean,name,bean,name,this,invoke,disposable,bean,invoke,disposable,bean,this,non,public,access,allowed,non,public,access,allowed,this,acc,null,this,destroy,method,name,destroy,method,name,this,bean,post,processors,post,processors
DisposableBeanAdapter -> private DisposableBeanAdapter(Object bean, String beanName, boolean invokeDisposableBean, 			boolean nonPublicAccessAllowed, String destroyMethodName, 			List<DestructionAwareBeanPostProcessor> postProcessors);1432125256;Create a new DisposableBeanAdapter for the given bean.;private DisposableBeanAdapter(Object bean, String beanName, boolean invokeDisposableBean,_			boolean nonPublicAccessAllowed, String destroyMethodName,_			List<DestructionAwareBeanPostProcessor> postProcessors) {__		this.bean = bean__		this.beanName = beanName__		this.invokeDisposableBean = invokeDisposableBean__		this.nonPublicAccessAllowed = nonPublicAccessAllowed__		this.acc = null__		this.destroyMethodName = destroyMethodName__		this.beanPostProcessors = postProcessors__	};create,a,new,disposable,bean,adapter,for,the,given,bean;private,disposable,bean,adapter,object,bean,string,bean,name,boolean,invoke,disposable,bean,boolean,non,public,access,allowed,string,destroy,method,name,list,destruction,aware,bean,post,processor,post,processors,this,bean,bean,this,bean,name,bean,name,this,invoke,disposable,bean,invoke,disposable,bean,this,non,public,access,allowed,non,public,access,allowed,this,acc,null,this,destroy,method,name,destroy,method,name,this,bean,post,processors,post,processors
DisposableBeanAdapter -> private DisposableBeanAdapter(Object bean, String beanName, boolean invokeDisposableBean, 			boolean nonPublicAccessAllowed, String destroyMethodName, 			List<DestructionAwareBeanPostProcessor> postProcessors);1432135182;Create a new DisposableBeanAdapter for the given bean.;private DisposableBeanAdapter(Object bean, String beanName, boolean invokeDisposableBean,_			boolean nonPublicAccessAllowed, String destroyMethodName,_			List<DestructionAwareBeanPostProcessor> postProcessors) {__		this.bean = bean__		this.beanName = beanName__		this.invokeDisposableBean = invokeDisposableBean__		this.nonPublicAccessAllowed = nonPublicAccessAllowed__		this.acc = null__		this.destroyMethodName = destroyMethodName__		this.beanPostProcessors = postProcessors__	};create,a,new,disposable,bean,adapter,for,the,given,bean;private,disposable,bean,adapter,object,bean,string,bean,name,boolean,invoke,disposable,bean,boolean,non,public,access,allowed,string,destroy,method,name,list,destruction,aware,bean,post,processor,post,processors,this,bean,bean,this,bean,name,bean,name,this,invoke,disposable,bean,invoke,disposable,bean,this,non,public,access,allowed,non,public,access,allowed,this,acc,null,this,destroy,method,name,destroy,method,name,this,bean,post,processors,post,processors
DisposableBeanAdapter -> private DisposableBeanAdapter(Object bean, String beanName, boolean invokeDisposableBean, 			boolean nonPublicAccessAllowed, String destroyMethodName, 			List<DestructionAwareBeanPostProcessor> postProcessors);1436434188;Create a new DisposableBeanAdapter for the given bean.;private DisposableBeanAdapter(Object bean, String beanName, boolean invokeDisposableBean,_			boolean nonPublicAccessAllowed, String destroyMethodName,_			List<DestructionAwareBeanPostProcessor> postProcessors) {__		this.bean = bean__		this.beanName = beanName__		this.invokeDisposableBean = invokeDisposableBean__		this.nonPublicAccessAllowed = nonPublicAccessAllowed__		this.acc = null__		this.destroyMethodName = destroyMethodName__		this.beanPostProcessors = postProcessors__	};create,a,new,disposable,bean,adapter,for,the,given,bean;private,disposable,bean,adapter,object,bean,string,bean,name,boolean,invoke,disposable,bean,boolean,non,public,access,allowed,string,destroy,method,name,list,destruction,aware,bean,post,processor,post,processors,this,bean,bean,this,bean,name,bean,name,this,invoke,disposable,bean,invoke,disposable,bean,this,non,public,access,allowed,non,public,access,allowed,this,acc,null,this,destroy,method,name,destroy,method,name,this,bean,post,processors,post,processors
DisposableBeanAdapter -> private DisposableBeanAdapter(Object bean, String beanName, boolean invokeDisposableBean, 			boolean nonPublicAccessAllowed, String destroyMethodName, 			List<DestructionAwareBeanPostProcessor> postProcessors);1447195666;Create a new DisposableBeanAdapter for the given bean.;private DisposableBeanAdapter(Object bean, String beanName, boolean invokeDisposableBean,_			boolean nonPublicAccessAllowed, String destroyMethodName,_			List<DestructionAwareBeanPostProcessor> postProcessors) {__		this.bean = bean__		this.beanName = beanName__		this.invokeDisposableBean = invokeDisposableBean__		this.nonPublicAccessAllowed = nonPublicAccessAllowed__		this.acc = null__		this.destroyMethodName = destroyMethodName__		this.beanPostProcessors = postProcessors__	};create,a,new,disposable,bean,adapter,for,the,given,bean;private,disposable,bean,adapter,object,bean,string,bean,name,boolean,invoke,disposable,bean,boolean,non,public,access,allowed,string,destroy,method,name,list,destruction,aware,bean,post,processor,post,processors,this,bean,bean,this,bean,name,bean,name,this,invoke,disposable,bean,invoke,disposable,bean,this,non,public,access,allowed,non,public,access,allowed,this,acc,null,this,destroy,method,name,destroy,method,name,this,bean,post,processors,post,processors
DisposableBeanAdapter -> private DisposableBeanAdapter(Object bean, String beanName, boolean invokeDisposableBean, 			boolean nonPublicAccessAllowed, String destroyMethodName, 			List<DestructionAwareBeanPostProcessor> postProcessors);1450454045;Create a new DisposableBeanAdapter for the given bean.;private DisposableBeanAdapter(Object bean, String beanName, boolean invokeDisposableBean,_			boolean nonPublicAccessAllowed, String destroyMethodName,_			List<DestructionAwareBeanPostProcessor> postProcessors) {__		this.bean = bean__		this.beanName = beanName__		this.invokeDisposableBean = invokeDisposableBean__		this.nonPublicAccessAllowed = nonPublicAccessAllowed__		this.acc = null__		this.destroyMethodName = destroyMethodName__		this.beanPostProcessors = postProcessors__	};create,a,new,disposable,bean,adapter,for,the,given,bean;private,disposable,bean,adapter,object,bean,string,bean,name,boolean,invoke,disposable,bean,boolean,non,public,access,allowed,string,destroy,method,name,list,destruction,aware,bean,post,processor,post,processors,this,bean,bean,this,bean,name,bean,name,this,invoke,disposable,bean,invoke,disposable,bean,this,non,public,access,allowed,non,public,access,allowed,this,acc,null,this,destroy,method,name,destroy,method,name,this,bean,post,processors,post,processors
DisposableBeanAdapter -> private DisposableBeanAdapter(Object bean, String beanName, boolean invokeDisposableBean, 			boolean nonPublicAccessAllowed, String destroyMethodName, 			List<DestructionAwareBeanPostProcessor> postProcessors);1454934048;Create a new DisposableBeanAdapter for the given bean.;private DisposableBeanAdapter(Object bean, String beanName, boolean invokeDisposableBean,_			boolean nonPublicAccessAllowed, String destroyMethodName,_			List<DestructionAwareBeanPostProcessor> postProcessors) {__		this.bean = bean__		this.beanName = beanName__		this.invokeDisposableBean = invokeDisposableBean__		this.nonPublicAccessAllowed = nonPublicAccessAllowed__		this.acc = null__		this.destroyMethodName = destroyMethodName__		this.beanPostProcessors = postProcessors__	};create,a,new,disposable,bean,adapter,for,the,given,bean;private,disposable,bean,adapter,object,bean,string,bean,name,boolean,invoke,disposable,bean,boolean,non,public,access,allowed,string,destroy,method,name,list,destruction,aware,bean,post,processor,post,processors,this,bean,bean,this,bean,name,bean,name,this,invoke,disposable,bean,invoke,disposable,bean,this,non,public,access,allowed,non,public,access,allowed,this,acc,null,this,destroy,method,name,destroy,method,name,this,bean,post,processors,post,processors
DisposableBeanAdapter -> private DisposableBeanAdapter(Object bean, String beanName, boolean invokeDisposableBean, 			boolean nonPublicAccessAllowed, String destroyMethodName, 			List<DestructionAwareBeanPostProcessor> postProcessors);1467730834;Create a new DisposableBeanAdapter for the given bean.;private DisposableBeanAdapter(Object bean, String beanName, boolean invokeDisposableBean,_			boolean nonPublicAccessAllowed, String destroyMethodName,_			List<DestructionAwareBeanPostProcessor> postProcessors) {__		this.bean = bean__		this.beanName = beanName__		this.invokeDisposableBean = invokeDisposableBean__		this.nonPublicAccessAllowed = nonPublicAccessAllowed__		this.acc = null__		this.destroyMethodName = destroyMethodName__		this.beanPostProcessors = postProcessors__	};create,a,new,disposable,bean,adapter,for,the,given,bean;private,disposable,bean,adapter,object,bean,string,bean,name,boolean,invoke,disposable,bean,boolean,non,public,access,allowed,string,destroy,method,name,list,destruction,aware,bean,post,processor,post,processors,this,bean,bean,this,bean,name,bean,name,this,invoke,disposable,bean,invoke,disposable,bean,this,non,public,access,allowed,non,public,access,allowed,this,acc,null,this,destroy,method,name,destroy,method,name,this,bean,post,processors,post,processors
DisposableBeanAdapter -> private DisposableBeanAdapter(Object bean, String beanName, boolean invokeDisposableBean, 			boolean nonPublicAccessAllowed, String destroyMethodName, 			List<DestructionAwareBeanPostProcessor> postProcessors);1469441195;Create a new DisposableBeanAdapter for the given bean.;private DisposableBeanAdapter(Object bean, String beanName, boolean invokeDisposableBean,_			boolean nonPublicAccessAllowed, String destroyMethodName,_			List<DestructionAwareBeanPostProcessor> postProcessors) {__		this.bean = bean__		this.beanName = beanName__		this.invokeDisposableBean = invokeDisposableBean__		this.nonPublicAccessAllowed = nonPublicAccessAllowed__		this.acc = null__		this.destroyMethodName = destroyMethodName__		this.beanPostProcessors = postProcessors__	};create,a,new,disposable,bean,adapter,for,the,given,bean;private,disposable,bean,adapter,object,bean,string,bean,name,boolean,invoke,disposable,bean,boolean,non,public,access,allowed,string,destroy,method,name,list,destruction,aware,bean,post,processor,post,processors,this,bean,bean,this,bean,name,bean,name,this,invoke,disposable,bean,invoke,disposable,bean,this,non,public,access,allowed,non,public,access,allowed,this,acc,null,this,destroy,method,name,destroy,method,name,this,bean,post,processors,post,processors
DisposableBeanAdapter -> private DisposableBeanAdapter(Object bean, String beanName, boolean invokeDisposableBean, 			boolean nonPublicAccessAllowed, String destroyMethodName, 			List<DestructionAwareBeanPostProcessor> postProcessors);1479746164;Create a new DisposableBeanAdapter for the given bean.;private DisposableBeanAdapter(Object bean, String beanName, boolean invokeDisposableBean,_			boolean nonPublicAccessAllowed, String destroyMethodName,_			List<DestructionAwareBeanPostProcessor> postProcessors) {__		this.bean = bean__		this.beanName = beanName__		this.invokeDisposableBean = invokeDisposableBean__		this.nonPublicAccessAllowed = nonPublicAccessAllowed__		this.acc = null__		this.destroyMethodName = destroyMethodName__		this.beanPostProcessors = postProcessors__	};create,a,new,disposable,bean,adapter,for,the,given,bean;private,disposable,bean,adapter,object,bean,string,bean,name,boolean,invoke,disposable,bean,boolean,non,public,access,allowed,string,destroy,method,name,list,destruction,aware,bean,post,processor,post,processors,this,bean,bean,this,bean,name,bean,name,this,invoke,disposable,bean,invoke,disposable,bean,this,non,public,access,allowed,non,public,access,allowed,this,acc,null,this,destroy,method,name,destroy,method,name,this,bean,post,processors,post,processors
DisposableBeanAdapter -> private DisposableBeanAdapter(Object bean, String beanName, boolean invokeDisposableBean, 			boolean nonPublicAccessAllowed, String destroyMethodName, 			List<DestructionAwareBeanPostProcessor> postProcessors);1495868221;Create a new DisposableBeanAdapter for the given bean.;private DisposableBeanAdapter(Object bean, String beanName, boolean invokeDisposableBean,_			boolean nonPublicAccessAllowed, String destroyMethodName,_			List<DestructionAwareBeanPostProcessor> postProcessors) {__		this.bean = bean__		this.beanName = beanName__		this.invokeDisposableBean = invokeDisposableBean__		this.nonPublicAccessAllowed = nonPublicAccessAllowed__		this.acc = null__		this.destroyMethodName = destroyMethodName__		this.beanPostProcessors = postProcessors__	};create,a,new,disposable,bean,adapter,for,the,given,bean;private,disposable,bean,adapter,object,bean,string,bean,name,boolean,invoke,disposable,bean,boolean,non,public,access,allowed,string,destroy,method,name,list,destruction,aware,bean,post,processor,post,processors,this,bean,bean,this,bean,name,bean,name,this,invoke,disposable,bean,invoke,disposable,bean,this,non,public,access,allowed,non,public,access,allowed,this,acc,null,this,destroy,method,name,destroy,method,name,this,bean,post,processors,post,processors
DisposableBeanAdapter -> public static boolean hasDestroyMethod(Object bean, RootBeanDefinition beanDefinition);1353966428;Check whether the given bean has any kind of destroy method to call._@param bean the bean instance_@param beanDefinition the corresponding bean definition;public static boolean hasDestroyMethod(Object bean, RootBeanDefinition beanDefinition) {_		if (bean instanceof DisposableBean || closeableInterface.isInstance(bean)) {_			return true__		}_		String destroyMethodName = beanDefinition.getDestroyMethodName()__		if (AbstractBeanDefinition.INFER_METHOD.equals(destroyMethodName)) {_			return ClassUtils.hasMethod(bean.getClass(), CLOSE_METHOD_NAME)__		}_		return (destroyMethodName != null)__	};check,whether,the,given,bean,has,any,kind,of,destroy,method,to,call,param,bean,the,bean,instance,param,bean,definition,the,corresponding,bean,definition;public,static,boolean,has,destroy,method,object,bean,root,bean,definition,bean,definition,if,bean,instanceof,disposable,bean,closeable,interface,is,instance,bean,return,true,string,destroy,method,name,bean,definition,get,destroy,method,name,if,abstract,bean,definition,equals,destroy,method,name,return,class,utils,has,method,bean,get,class,return,destroy,method,name,null
DisposableBeanAdapter -> public static boolean hasDestroyMethod(Object bean, RootBeanDefinition beanDefinition);1356735495;Check whether the given bean has any kind of destroy method to call._@param bean the bean instance_@param beanDefinition the corresponding bean definition;public static boolean hasDestroyMethod(Object bean, RootBeanDefinition beanDefinition) {_		if (bean instanceof DisposableBean || closeableInterface.isInstance(bean)) {_			return true__		}_		String destroyMethodName = beanDefinition.getDestroyMethodName()__		if (AbstractBeanDefinition.INFER_METHOD.equals(destroyMethodName)) {_			return ClassUtils.hasMethod(bean.getClass(), CLOSE_METHOD_NAME)__		}_		return (destroyMethodName != null)__	};check,whether,the,given,bean,has,any,kind,of,destroy,method,to,call,param,bean,the,bean,instance,param,bean,definition,the,corresponding,bean,definition;public,static,boolean,has,destroy,method,object,bean,root,bean,definition,bean,definition,if,bean,instanceof,disposable,bean,closeable,interface,is,instance,bean,return,true,string,destroy,method,name,bean,definition,get,destroy,method,name,if,abstract,bean,definition,equals,destroy,method,name,return,class,utils,has,method,bean,get,class,return,destroy,method,name,null
DisposableBeanAdapter -> public static boolean hasDestroyMethod(Object bean, RootBeanDefinition beanDefinition);1357119239;Check whether the given bean has any kind of destroy method to call._@param bean the bean instance_@param beanDefinition the corresponding bean definition;public static boolean hasDestroyMethod(Object bean, RootBeanDefinition beanDefinition) {_		if (bean instanceof DisposableBean || closeableInterface.isInstance(bean)) {_			return true__		}_		String destroyMethodName = beanDefinition.getDestroyMethodName()__		if (AbstractBeanDefinition.INFER_METHOD.equals(destroyMethodName)) {_			return ClassUtils.hasMethod(bean.getClass(), CLOSE_METHOD_NAME)__		}_		return (destroyMethodName != null)__	};check,whether,the,given,bean,has,any,kind,of,destroy,method,to,call,param,bean,the,bean,instance,param,bean,definition,the,corresponding,bean,definition;public,static,boolean,has,destroy,method,object,bean,root,bean,definition,bean,definition,if,bean,instanceof,disposable,bean,closeable,interface,is,instance,bean,return,true,string,destroy,method,name,bean,definition,get,destroy,method,name,if,abstract,bean,definition,equals,destroy,method,name,return,class,utils,has,method,bean,get,class,return,destroy,method,name,null
DisposableBeanAdapter -> public static boolean hasDestroyMethod(Object bean, RootBeanDefinition beanDefinition);1362408075;Check whether the given bean has any kind of destroy method to call._@param bean the bean instance_@param beanDefinition the corresponding bean definition;public static boolean hasDestroyMethod(Object bean, RootBeanDefinition beanDefinition) {_		if (bean instanceof DisposableBean || closeableInterface.isInstance(bean)) {_			return true__		}_		String destroyMethodName = beanDefinition.getDestroyMethodName()__		if (AbstractBeanDefinition.INFER_METHOD.equals(destroyMethodName)) {_			return ClassUtils.hasMethod(bean.getClass(), CLOSE_METHOD_NAME)__		}_		return (destroyMethodName != null)__	};check,whether,the,given,bean,has,any,kind,of,destroy,method,to,call,param,bean,the,bean,instance,param,bean,definition,the,corresponding,bean,definition;public,static,boolean,has,destroy,method,object,bean,root,bean,definition,bean,definition,if,bean,instanceof,disposable,bean,closeable,interface,is,instance,bean,return,true,string,destroy,method,name,bean,definition,get,destroy,method,name,if,abstract,bean,definition,equals,destroy,method,name,return,class,utils,has,method,bean,get,class,return,destroy,method,name,null
DisposableBeanAdapter -> public static boolean hasDestroyMethod(Object bean, RootBeanDefinition beanDefinition);1364503447;Check whether the given bean has any kind of destroy method to call._@param bean the bean instance_@param beanDefinition the corresponding bean definition;public static boolean hasDestroyMethod(Object bean, RootBeanDefinition beanDefinition) {_		if (bean instanceof DisposableBean || closeableInterface.isInstance(bean)) {_			return true__		}_		String destroyMethodName = beanDefinition.getDestroyMethodName()__		if (AbstractBeanDefinition.INFER_METHOD.equals(destroyMethodName)) {_			return ClassUtils.hasMethod(bean.getClass(), CLOSE_METHOD_NAME)__		}_		return (destroyMethodName != null)__	};check,whether,the,given,bean,has,any,kind,of,destroy,method,to,call,param,bean,the,bean,instance,param,bean,definition,the,corresponding,bean,definition;public,static,boolean,has,destroy,method,object,bean,root,bean,definition,bean,definition,if,bean,instanceof,disposable,bean,closeable,interface,is,instance,bean,return,true,string,destroy,method,name,bean,definition,get,destroy,method,name,if,abstract,bean,definition,equals,destroy,method,name,return,class,utils,has,method,bean,get,class,return,destroy,method,name,null
DisposableBeanAdapter -> public static boolean hasDestroyMethod(Object bean, RootBeanDefinition beanDefinition);1368482696;Check whether the given bean has any kind of destroy method to call._@param bean the bean instance_@param beanDefinition the corresponding bean definition;public static boolean hasDestroyMethod(Object bean, RootBeanDefinition beanDefinition) {_		if (bean instanceof DisposableBean || closeableInterface.isInstance(bean)) {_			return true__		}_		String destroyMethodName = beanDefinition.getDestroyMethodName()__		if (AbstractBeanDefinition.INFER_METHOD.equals(destroyMethodName)) {_			return ClassUtils.hasMethod(bean.getClass(), CLOSE_METHOD_NAME)__		}_		return (destroyMethodName != null)__	};check,whether,the,given,bean,has,any,kind,of,destroy,method,to,call,param,bean,the,bean,instance,param,bean,definition,the,corresponding,bean,definition;public,static,boolean,has,destroy,method,object,bean,root,bean,definition,bean,definition,if,bean,instanceof,disposable,bean,closeable,interface,is,instance,bean,return,true,string,destroy,method,name,bean,definition,get,destroy,method,name,if,abstract,bean,definition,equals,destroy,method,name,return,class,utils,has,method,bean,get,class,return,destroy,method,name,null
DisposableBeanAdapter -> public static boolean hasDestroyMethod(Object bean, RootBeanDefinition beanDefinition);1385412762;Check whether the given bean has any kind of destroy method to call._@param bean the bean instance_@param beanDefinition the corresponding bean definition;public static boolean hasDestroyMethod(Object bean, RootBeanDefinition beanDefinition) {_		if (bean instanceof DisposableBean || closeableInterface.isInstance(bean)) {_			return true__		}_		String destroyMethodName = beanDefinition.getDestroyMethodName()__		if (AbstractBeanDefinition.INFER_METHOD.equals(destroyMethodName)) {_			return ClassUtils.hasMethod(bean.getClass(), CLOSE_METHOD_NAME)__		}_		return (destroyMethodName != null)__	};check,whether,the,given,bean,has,any,kind,of,destroy,method,to,call,param,bean,the,bean,instance,param,bean,definition,the,corresponding,bean,definition;public,static,boolean,has,destroy,method,object,bean,root,bean,definition,bean,definition,if,bean,instanceof,disposable,bean,closeable,interface,is,instance,bean,return,true,string,destroy,method,name,bean,definition,get,destroy,method,name,if,abstract,bean,definition,equals,destroy,method,name,return,class,utils,has,method,bean,get,class,return,destroy,method,name,null
DisposableBeanAdapter -> public static boolean hasDestroyMethod(Object bean, RootBeanDefinition beanDefinition);1398638841;Check whether the given bean has any kind of destroy method to call._@param bean the bean instance_@param beanDefinition the corresponding bean definition;public static boolean hasDestroyMethod(Object bean, RootBeanDefinition beanDefinition) {_		if (bean instanceof DisposableBean || closeableInterface.isInstance(bean)) {_			return true__		}_		String destroyMethodName = beanDefinition.getDestroyMethodName()__		if (AbstractBeanDefinition.INFER_METHOD.equals(destroyMethodName)) {_			return ClassUtils.hasMethod(bean.getClass(), CLOSE_METHOD_NAME)__		}_		return (destroyMethodName != null)__	};check,whether,the,given,bean,has,any,kind,of,destroy,method,to,call,param,bean,the,bean,instance,param,bean,definition,the,corresponding,bean,definition;public,static,boolean,has,destroy,method,object,bean,root,bean,definition,bean,definition,if,bean,instanceof,disposable,bean,closeable,interface,is,instance,bean,return,true,string,destroy,method,name,bean,definition,get,destroy,method,name,if,abstract,bean,definition,equals,destroy,method,name,return,class,utils,has,method,bean,get,class,return,destroy,method,name,null
DisposableBeanAdapter -> public static boolean hasDestroyMethod(Object bean, RootBeanDefinition beanDefinition);1432125256;Check whether the given bean has any kind of destroy method to call._@param bean the bean instance_@param beanDefinition the corresponding bean definition;public static boolean hasDestroyMethod(Object bean, RootBeanDefinition beanDefinition) {_		if (bean instanceof DisposableBean || closeableInterface.isInstance(bean)) {_			return true__		}_		String destroyMethodName = beanDefinition.getDestroyMethodName()__		if (AbstractBeanDefinition.INFER_METHOD.equals(destroyMethodName)) {_			return ClassUtils.hasMethod(bean.getClass(), CLOSE_METHOD_NAME)__		}_		return (destroyMethodName != null)__	};check,whether,the,given,bean,has,any,kind,of,destroy,method,to,call,param,bean,the,bean,instance,param,bean,definition,the,corresponding,bean,definition;public,static,boolean,has,destroy,method,object,bean,root,bean,definition,bean,definition,if,bean,instanceof,disposable,bean,closeable,interface,is,instance,bean,return,true,string,destroy,method,name,bean,definition,get,destroy,method,name,if,abstract,bean,definition,equals,destroy,method,name,return,class,utils,has,method,bean,get,class,return,destroy,method,name,null
DisposableBeanAdapter -> public static boolean hasDestroyMethod(Object bean, RootBeanDefinition beanDefinition);1432135182;Check whether the given bean has any kind of destroy method to call._@param bean the bean instance_@param beanDefinition the corresponding bean definition;public static boolean hasDestroyMethod(Object bean, RootBeanDefinition beanDefinition) {_		if (bean instanceof DisposableBean || closeableInterface.isInstance(bean)) {_			return true__		}_		String destroyMethodName = beanDefinition.getDestroyMethodName()__		if (AbstractBeanDefinition.INFER_METHOD.equals(destroyMethodName)) {_			return ClassUtils.hasMethod(bean.getClass(), CLOSE_METHOD_NAME)__		}_		return StringUtils.hasLength(destroyMethodName)__	};check,whether,the,given,bean,has,any,kind,of,destroy,method,to,call,param,bean,the,bean,instance,param,bean,definition,the,corresponding,bean,definition;public,static,boolean,has,destroy,method,object,bean,root,bean,definition,bean,definition,if,bean,instanceof,disposable,bean,closeable,interface,is,instance,bean,return,true,string,destroy,method,name,bean,definition,get,destroy,method,name,if,abstract,bean,definition,equals,destroy,method,name,return,class,utils,has,method,bean,get,class,return,string,utils,has,length,destroy,method,name
DisposableBeanAdapter -> public static boolean hasDestroyMethod(Object bean, RootBeanDefinition beanDefinition);1436434188;Check whether the given bean has any kind of destroy method to call._@param bean the bean instance_@param beanDefinition the corresponding bean definition;public static boolean hasDestroyMethod(Object bean, RootBeanDefinition beanDefinition) {_		if (bean instanceof DisposableBean || closeableInterface.isInstance(bean)) {_			return true__		}_		String destroyMethodName = beanDefinition.getDestroyMethodName()__		if (AbstractBeanDefinition.INFER_METHOD.equals(destroyMethodName)) {_			return ClassUtils.hasMethod(bean.getClass(), CLOSE_METHOD_NAME)__		}_		return StringUtils.hasLength(destroyMethodName)__	};check,whether,the,given,bean,has,any,kind,of,destroy,method,to,call,param,bean,the,bean,instance,param,bean,definition,the,corresponding,bean,definition;public,static,boolean,has,destroy,method,object,bean,root,bean,definition,bean,definition,if,bean,instanceof,disposable,bean,closeable,interface,is,instance,bean,return,true,string,destroy,method,name,bean,definition,get,destroy,method,name,if,abstract,bean,definition,equals,destroy,method,name,return,class,utils,has,method,bean,get,class,return,string,utils,has,length,destroy,method,name
DisposableBeanAdapter -> public static boolean hasDestroyMethod(Object bean, RootBeanDefinition beanDefinition);1447195666;Check whether the given bean has any kind of destroy method to call._@param bean the bean instance_@param beanDefinition the corresponding bean definition;public static boolean hasDestroyMethod(Object bean, RootBeanDefinition beanDefinition) {_		if (bean instanceof DisposableBean || closeableInterface.isInstance(bean)) {_			return true__		}_		String destroyMethodName = beanDefinition.getDestroyMethodName()__		if (AbstractBeanDefinition.INFER_METHOD.equals(destroyMethodName)) {_			return ClassUtils.hasMethod(bean.getClass(), CLOSE_METHOD_NAME)__		}_		return StringUtils.hasLength(destroyMethodName)__	};check,whether,the,given,bean,has,any,kind,of,destroy,method,to,call,param,bean,the,bean,instance,param,bean,definition,the,corresponding,bean,definition;public,static,boolean,has,destroy,method,object,bean,root,bean,definition,bean,definition,if,bean,instanceof,disposable,bean,closeable,interface,is,instance,bean,return,true,string,destroy,method,name,bean,definition,get,destroy,method,name,if,abstract,bean,definition,equals,destroy,method,name,return,class,utils,has,method,bean,get,class,return,string,utils,has,length,destroy,method,name
DisposableBeanAdapter -> public static boolean hasDestroyMethod(Object bean, RootBeanDefinition beanDefinition);1450454045;Check whether the given bean has any kind of destroy method to call._@param bean the bean instance_@param beanDefinition the corresponding bean definition;public static boolean hasDestroyMethod(Object bean, RootBeanDefinition beanDefinition) {_		if (bean instanceof DisposableBean || closeableInterface.isInstance(bean)) {_			return true__		}_		String destroyMethodName = beanDefinition.getDestroyMethodName()__		if (AbstractBeanDefinition.INFER_METHOD.equals(destroyMethodName)) {_			return (ClassUtils.hasMethod(bean.getClass(), CLOSE_METHOD_NAME) ||_					ClassUtils.hasMethod(bean.getClass(), SHUTDOWN_METHOD_NAME))__		}_		return StringUtils.hasLength(destroyMethodName)__	};check,whether,the,given,bean,has,any,kind,of,destroy,method,to,call,param,bean,the,bean,instance,param,bean,definition,the,corresponding,bean,definition;public,static,boolean,has,destroy,method,object,bean,root,bean,definition,bean,definition,if,bean,instanceof,disposable,bean,closeable,interface,is,instance,bean,return,true,string,destroy,method,name,bean,definition,get,destroy,method,name,if,abstract,bean,definition,equals,destroy,method,name,return,class,utils,has,method,bean,get,class,class,utils,has,method,bean,get,class,return,string,utils,has,length,destroy,method,name
DisposableBeanAdapter -> public static boolean hasDestroyMethod(Object bean, RootBeanDefinition beanDefinition);1454934048;Check whether the given bean has any kind of destroy method to call._@param bean the bean instance_@param beanDefinition the corresponding bean definition;public static boolean hasDestroyMethod(Object bean, RootBeanDefinition beanDefinition) {_		if (bean instanceof DisposableBean || closeableInterface.isInstance(bean)) {_			return true__		}_		String destroyMethodName = beanDefinition.getDestroyMethodName()__		if (AbstractBeanDefinition.INFER_METHOD.equals(destroyMethodName)) {_			return (ClassUtils.hasMethod(bean.getClass(), CLOSE_METHOD_NAME) ||_					ClassUtils.hasMethod(bean.getClass(), SHUTDOWN_METHOD_NAME))__		}_		return StringUtils.hasLength(destroyMethodName)__	};check,whether,the,given,bean,has,any,kind,of,destroy,method,to,call,param,bean,the,bean,instance,param,bean,definition,the,corresponding,bean,definition;public,static,boolean,has,destroy,method,object,bean,root,bean,definition,bean,definition,if,bean,instanceof,disposable,bean,closeable,interface,is,instance,bean,return,true,string,destroy,method,name,bean,definition,get,destroy,method,name,if,abstract,bean,definition,equals,destroy,method,name,return,class,utils,has,method,bean,get,class,class,utils,has,method,bean,get,class,return,string,utils,has,length,destroy,method,name
DisposableBeanAdapter -> public static boolean hasDestroyMethod(Object bean, RootBeanDefinition beanDefinition);1467730834;Check whether the given bean has any kind of destroy method to call._@param bean the bean instance_@param beanDefinition the corresponding bean definition;public static boolean hasDestroyMethod(Object bean, RootBeanDefinition beanDefinition) {_		if (bean instanceof DisposableBean || closeableInterface.isInstance(bean)) {_			return true__		}_		String destroyMethodName = beanDefinition.getDestroyMethodName()__		if (AbstractBeanDefinition.INFER_METHOD.equals(destroyMethodName)) {_			return (ClassUtils.hasMethod(bean.getClass(), CLOSE_METHOD_NAME) ||_					ClassUtils.hasMethod(bean.getClass(), SHUTDOWN_METHOD_NAME))__		}_		return StringUtils.hasLength(destroyMethodName)__	};check,whether,the,given,bean,has,any,kind,of,destroy,method,to,call,param,bean,the,bean,instance,param,bean,definition,the,corresponding,bean,definition;public,static,boolean,has,destroy,method,object,bean,root,bean,definition,bean,definition,if,bean,instanceof,disposable,bean,closeable,interface,is,instance,bean,return,true,string,destroy,method,name,bean,definition,get,destroy,method,name,if,abstract,bean,definition,equals,destroy,method,name,return,class,utils,has,method,bean,get,class,class,utils,has,method,bean,get,class,return,string,utils,has,length,destroy,method,name
DisposableBeanAdapter -> public static boolean hasDestroyMethod(Object bean, RootBeanDefinition beanDefinition);1469441195;Check whether the given bean has any kind of destroy method to call._@param bean the bean instance_@param beanDefinition the corresponding bean definition;public static boolean hasDestroyMethod(Object bean, RootBeanDefinition beanDefinition) {_		if (bean instanceof DisposableBean || bean instanceof AutoCloseable) {_			return true__		}_		String destroyMethodName = beanDefinition.getDestroyMethodName()__		if (AbstractBeanDefinition.INFER_METHOD.equals(destroyMethodName)) {_			return (ClassUtils.hasMethod(bean.getClass(), CLOSE_METHOD_NAME) ||_					ClassUtils.hasMethod(bean.getClass(), SHUTDOWN_METHOD_NAME))__		}_		return StringUtils.hasLength(destroyMethodName)__	};check,whether,the,given,bean,has,any,kind,of,destroy,method,to,call,param,bean,the,bean,instance,param,bean,definition,the,corresponding,bean,definition;public,static,boolean,has,destroy,method,object,bean,root,bean,definition,bean,definition,if,bean,instanceof,disposable,bean,bean,instanceof,auto,closeable,return,true,string,destroy,method,name,bean,definition,get,destroy,method,name,if,abstract,bean,definition,equals,destroy,method,name,return,class,utils,has,method,bean,get,class,class,utils,has,method,bean,get,class,return,string,utils,has,length,destroy,method,name
DisposableBeanAdapter -> public static boolean hasDestroyMethod(Object bean, RootBeanDefinition beanDefinition);1479746164;Check whether the given bean has any kind of destroy method to call._@param bean the bean instance_@param beanDefinition the corresponding bean definition;public static boolean hasDestroyMethod(Object bean, RootBeanDefinition beanDefinition) {_		if (bean instanceof DisposableBean || bean instanceof AutoCloseable) {_			return true__		}_		String destroyMethodName = beanDefinition.getDestroyMethodName()__		if (AbstractBeanDefinition.INFER_METHOD.equals(destroyMethodName)) {_			return (ClassUtils.hasMethod(bean.getClass(), CLOSE_METHOD_NAME) ||_					ClassUtils.hasMethod(bean.getClass(), SHUTDOWN_METHOD_NAME))__		}_		return StringUtils.hasLength(destroyMethodName)__	};check,whether,the,given,bean,has,any,kind,of,destroy,method,to,call,param,bean,the,bean,instance,param,bean,definition,the,corresponding,bean,definition;public,static,boolean,has,destroy,method,object,bean,root,bean,definition,bean,definition,if,bean,instanceof,disposable,bean,bean,instanceof,auto,closeable,return,true,string,destroy,method,name,bean,definition,get,destroy,method,name,if,abstract,bean,definition,equals,destroy,method,name,return,class,utils,has,method,bean,get,class,class,utils,has,method,bean,get,class,return,string,utils,has,length,destroy,method,name
DisposableBeanAdapter -> public static boolean hasDestroyMethod(Object bean, RootBeanDefinition beanDefinition);1495868221;Check whether the given bean has any kind of destroy method to call._@param bean the bean instance_@param beanDefinition the corresponding bean definition;public static boolean hasDestroyMethod(Object bean, RootBeanDefinition beanDefinition) {_		if (bean instanceof DisposableBean || bean instanceof AutoCloseable) {_			return true__		}_		String destroyMethodName = beanDefinition.getDestroyMethodName()__		if (AbstractBeanDefinition.INFER_METHOD.equals(destroyMethodName)) {_			return (ClassUtils.hasMethod(bean.getClass(), CLOSE_METHOD_NAME) ||_					ClassUtils.hasMethod(bean.getClass(), SHUTDOWN_METHOD_NAME))__		}_		return StringUtils.hasLength(destroyMethodName)__	};check,whether,the,given,bean,has,any,kind,of,destroy,method,to,call,param,bean,the,bean,instance,param,bean,definition,the,corresponding,bean,definition;public,static,boolean,has,destroy,method,object,bean,root,bean,definition,bean,definition,if,bean,instanceof,disposable,bean,bean,instanceof,auto,closeable,return,true,string,destroy,method,name,bean,definition,get,destroy,method,name,if,abstract,bean,definition,equals,destroy,method,name,return,class,utils,has,method,bean,get,class,class,utils,has,method,bean,get,class,return,string,utils,has,length,destroy,method,name
DisposableBeanAdapter -> public static boolean hasDestroyMethod(Object bean, RootBeanDefinition beanDefinition);1496837955;Check whether the given bean has any kind of destroy method to call._@param bean the bean instance_@param beanDefinition the corresponding bean definition;public static boolean hasDestroyMethod(Object bean, RootBeanDefinition beanDefinition) {_		if (bean instanceof DisposableBean || bean instanceof AutoCloseable) {_			return true__		}_		String destroyMethodName = beanDefinition.getDestroyMethodName()__		if (AbstractBeanDefinition.INFER_METHOD.equals(destroyMethodName)) {_			return (ClassUtils.hasMethod(bean.getClass(), CLOSE_METHOD_NAME) ||_					ClassUtils.hasMethod(bean.getClass(), SHUTDOWN_METHOD_NAME))__		}_		return StringUtils.hasLength(destroyMethodName)__	};check,whether,the,given,bean,has,any,kind,of,destroy,method,to,call,param,bean,the,bean,instance,param,bean,definition,the,corresponding,bean,definition;public,static,boolean,has,destroy,method,object,bean,root,bean,definition,bean,definition,if,bean,instanceof,disposable,bean,bean,instanceof,auto,closeable,return,true,string,destroy,method,name,bean,definition,get,destroy,method,name,if,abstract,bean,definition,equals,destroy,method,name,return,class,utils,has,method,bean,get,class,class,utils,has,method,bean,get,class,return,string,utils,has,length,destroy,method,name
DisposableBeanAdapter -> public static boolean hasDestroyMethod(Object bean, RootBeanDefinition beanDefinition);1498780456;Check whether the given bean has any kind of destroy method to call._@param bean the bean instance_@param beanDefinition the corresponding bean definition;public static boolean hasDestroyMethod(Object bean, RootBeanDefinition beanDefinition) {_		if (bean instanceof DisposableBean || bean instanceof AutoCloseable) {_			return true__		}_		String destroyMethodName = beanDefinition.getDestroyMethodName()__		if (AbstractBeanDefinition.INFER_METHOD.equals(destroyMethodName)) {_			return (ClassUtils.hasMethod(bean.getClass(), CLOSE_METHOD_NAME) ||_					ClassUtils.hasMethod(bean.getClass(), SHUTDOWN_METHOD_NAME))__		}_		return StringUtils.hasLength(destroyMethodName)__	};check,whether,the,given,bean,has,any,kind,of,destroy,method,to,call,param,bean,the,bean,instance,param,bean,definition,the,corresponding,bean,definition;public,static,boolean,has,destroy,method,object,bean,root,bean,definition,bean,definition,if,bean,instanceof,disposable,bean,bean,instanceof,auto,closeable,return,true,string,destroy,method,name,bean,definition,get,destroy,method,name,if,abstract,bean,definition,equals,destroy,method,name,return,class,utils,has,method,bean,get,class,class,utils,has,method,bean,get,class,return,string,utils,has,length,destroy,method,name
DisposableBeanAdapter -> public static boolean hasDestroyMethod(Object bean, RootBeanDefinition beanDefinition);1530174524;Check whether the given bean has any kind of destroy method to call._@param bean the bean instance_@param beanDefinition the corresponding bean definition;public static boolean hasDestroyMethod(Object bean, RootBeanDefinition beanDefinition) {_		if (bean instanceof DisposableBean || bean instanceof AutoCloseable) {_			return true__		}_		String destroyMethodName = beanDefinition.getDestroyMethodName()__		if (AbstractBeanDefinition.INFER_METHOD.equals(destroyMethodName)) {_			return (ClassUtils.hasMethod(bean.getClass(), CLOSE_METHOD_NAME) ||_					ClassUtils.hasMethod(bean.getClass(), SHUTDOWN_METHOD_NAME))__		}_		return StringUtils.hasLength(destroyMethodName)__	};check,whether,the,given,bean,has,any,kind,of,destroy,method,to,call,param,bean,the,bean,instance,param,bean,definition,the,corresponding,bean,definition;public,static,boolean,has,destroy,method,object,bean,root,bean,definition,bean,definition,if,bean,instanceof,disposable,bean,bean,instanceof,auto,closeable,return,true,string,destroy,method,name,bean,definition,get,destroy,method,name,if,abstract,bean,definition,equals,destroy,method,name,return,class,utils,has,method,bean,get,class,class,utils,has,method,bean,get,class,return,string,utils,has,length,destroy,method,name
DisposableBeanAdapter -> public static boolean hasDestroyMethod(Object bean, RootBeanDefinition beanDefinition);1532091916;Check whether the given bean has any kind of destroy method to call._@param bean the bean instance_@param beanDefinition the corresponding bean definition;public static boolean hasDestroyMethod(Object bean, RootBeanDefinition beanDefinition) {_		if (bean instanceof DisposableBean || bean instanceof AutoCloseable) {_			return true__		}_		String destroyMethodName = beanDefinition.getDestroyMethodName()__		if (AbstractBeanDefinition.INFER_METHOD.equals(destroyMethodName)) {_			return (ClassUtils.hasMethod(bean.getClass(), CLOSE_METHOD_NAME) ||_					ClassUtils.hasMethod(bean.getClass(), SHUTDOWN_METHOD_NAME))__		}_		return StringUtils.hasLength(destroyMethodName)__	};check,whether,the,given,bean,has,any,kind,of,destroy,method,to,call,param,bean,the,bean,instance,param,bean,definition,the,corresponding,bean,definition;public,static,boolean,has,destroy,method,object,bean,root,bean,definition,bean,definition,if,bean,instanceof,disposable,bean,bean,instanceof,auto,closeable,return,true,string,destroy,method,name,bean,definition,get,destroy,method,name,if,abstract,bean,definition,equals,destroy,method,name,return,class,utils,has,method,bean,get,class,class,utils,has,method,bean,get,class,return,string,utils,has,length,destroy,method,name
DisposableBeanAdapter -> public static boolean hasDestroyMethod(Object bean, RootBeanDefinition beanDefinition);1532706365;Check whether the given bean has any kind of destroy method to call._@param bean the bean instance_@param beanDefinition the corresponding bean definition;public static boolean hasDestroyMethod(Object bean, RootBeanDefinition beanDefinition) {_		if (bean instanceof DisposableBean || bean instanceof AutoCloseable) {_			return true__		}_		String destroyMethodName = beanDefinition.getDestroyMethodName()__		if (AbstractBeanDefinition.INFER_METHOD.equals(destroyMethodName)) {_			return (ClassUtils.hasMethod(bean.getClass(), CLOSE_METHOD_NAME) ||_					ClassUtils.hasMethod(bean.getClass(), SHUTDOWN_METHOD_NAME))__		}_		return StringUtils.hasLength(destroyMethodName)__	};check,whether,the,given,bean,has,any,kind,of,destroy,method,to,call,param,bean,the,bean,instance,param,bean,definition,the,corresponding,bean,definition;public,static,boolean,has,destroy,method,object,bean,root,bean,definition,bean,definition,if,bean,instanceof,disposable,bean,bean,instanceof,auto,closeable,return,true,string,destroy,method,name,bean,definition,get,destroy,method,name,if,abstract,bean,definition,equals,destroy,method,name,return,class,utils,has,method,bean,get,class,class,utils,has,method,bean,get,class,return,string,utils,has,length,destroy,method,name
DisposableBeanAdapter -> public static boolean hasDestroyMethod(Object bean, RootBeanDefinition beanDefinition);1537391140;Check whether the given bean has any kind of destroy method to call._@param bean the bean instance_@param beanDefinition the corresponding bean definition;public static boolean hasDestroyMethod(Object bean, RootBeanDefinition beanDefinition) {_		if (bean instanceof DisposableBean || bean instanceof AutoCloseable) {_			return true__		}_		String destroyMethodName = beanDefinition.getDestroyMethodName()__		if (AbstractBeanDefinition.INFER_METHOD.equals(destroyMethodName)) {_			return (ClassUtils.hasMethod(bean.getClass(), CLOSE_METHOD_NAME) ||_					ClassUtils.hasMethod(bean.getClass(), SHUTDOWN_METHOD_NAME))__		}_		return StringUtils.hasLength(destroyMethodName)__	};check,whether,the,given,bean,has,any,kind,of,destroy,method,to,call,param,bean,the,bean,instance,param,bean,definition,the,corresponding,bean,definition;public,static,boolean,has,destroy,method,object,bean,root,bean,definition,bean,definition,if,bean,instanceof,disposable,bean,bean,instanceof,auto,closeable,return,true,string,destroy,method,name,bean,definition,get,destroy,method,name,if,abstract,bean,definition,equals,destroy,method,name,return,class,utils,has,method,bean,get,class,class,utils,has,method,bean,get,class,return,string,utils,has,length,destroy,method,name
DisposableBeanAdapter -> private DisposableBeanAdapter(Object bean, String beanName, boolean invokeDisposableBean, 			boolean nonPublicAccessAllowed, @Nullable String destroyMethodName, 			@Nullable List<DestructionAwareBeanPostProcessor> postProcessors);1498780456;Create a new DisposableBeanAdapter for the given bean.;private DisposableBeanAdapter(Object bean, String beanName, boolean invokeDisposableBean,_			boolean nonPublicAccessAllowed, @Nullable String destroyMethodName,_			@Nullable List<DestructionAwareBeanPostProcessor> postProcessors) {__		this.bean = bean__		this.beanName = beanName__		this.invokeDisposableBean = invokeDisposableBean__		this.nonPublicAccessAllowed = nonPublicAccessAllowed__		this.acc = null__		this.destroyMethodName = destroyMethodName__		this.beanPostProcessors = postProcessors__	};create,a,new,disposable,bean,adapter,for,the,given,bean;private,disposable,bean,adapter,object,bean,string,bean,name,boolean,invoke,disposable,bean,boolean,non,public,access,allowed,nullable,string,destroy,method,name,nullable,list,destruction,aware,bean,post,processor,post,processors,this,bean,bean,this,bean,name,bean,name,this,invoke,disposable,bean,invoke,disposable,bean,this,non,public,access,allowed,non,public,access,allowed,this,acc,null,this,destroy,method,name,destroy,method,name,this,bean,post,processors,post,processors
DisposableBeanAdapter -> private DisposableBeanAdapter(Object bean, String beanName, boolean invokeDisposableBean, 			boolean nonPublicAccessAllowed, @Nullable String destroyMethodName, 			@Nullable List<DestructionAwareBeanPostProcessor> postProcessors);1530174524;Create a new DisposableBeanAdapter for the given bean.;private DisposableBeanAdapter(Object bean, String beanName, boolean invokeDisposableBean,_			boolean nonPublicAccessAllowed, @Nullable String destroyMethodName,_			@Nullable List<DestructionAwareBeanPostProcessor> postProcessors) {__		this.bean = bean__		this.beanName = beanName__		this.invokeDisposableBean = invokeDisposableBean__		this.nonPublicAccessAllowed = nonPublicAccessAllowed__		this.acc = null__		this.destroyMethodName = destroyMethodName__		this.beanPostProcessors = postProcessors__	};create,a,new,disposable,bean,adapter,for,the,given,bean;private,disposable,bean,adapter,object,bean,string,bean,name,boolean,invoke,disposable,bean,boolean,non,public,access,allowed,nullable,string,destroy,method,name,nullable,list,destruction,aware,bean,post,processor,post,processors,this,bean,bean,this,bean,name,bean,name,this,invoke,disposable,bean,invoke,disposable,bean,this,non,public,access,allowed,non,public,access,allowed,this,acc,null,this,destroy,method,name,destroy,method,name,this,bean,post,processors,post,processors
DisposableBeanAdapter -> private DisposableBeanAdapter(Object bean, String beanName, boolean invokeDisposableBean, 			boolean nonPublicAccessAllowed, @Nullable String destroyMethodName, 			@Nullable List<DestructionAwareBeanPostProcessor> postProcessors);1532091916;Create a new DisposableBeanAdapter for the given bean.;private DisposableBeanAdapter(Object bean, String beanName, boolean invokeDisposableBean,_			boolean nonPublicAccessAllowed, @Nullable String destroyMethodName,_			@Nullable List<DestructionAwareBeanPostProcessor> postProcessors) {__		this.bean = bean__		this.beanName = beanName__		this.invokeDisposableBean = invokeDisposableBean__		this.nonPublicAccessAllowed = nonPublicAccessAllowed__		this.acc = null__		this.destroyMethodName = destroyMethodName__		this.beanPostProcessors = postProcessors__	};create,a,new,disposable,bean,adapter,for,the,given,bean;private,disposable,bean,adapter,object,bean,string,bean,name,boolean,invoke,disposable,bean,boolean,non,public,access,allowed,nullable,string,destroy,method,name,nullable,list,destruction,aware,bean,post,processor,post,processors,this,bean,bean,this,bean,name,bean,name,this,invoke,disposable,bean,invoke,disposable,bean,this,non,public,access,allowed,non,public,access,allowed,this,acc,null,this,destroy,method,name,destroy,method,name,this,bean,post,processors,post,processors
DisposableBeanAdapter -> private DisposableBeanAdapter(Object bean, String beanName, boolean invokeDisposableBean, 			boolean nonPublicAccessAllowed, @Nullable String destroyMethodName, 			@Nullable List<DestructionAwareBeanPostProcessor> postProcessors);1532706365;Create a new DisposableBeanAdapter for the given bean.;private DisposableBeanAdapter(Object bean, String beanName, boolean invokeDisposableBean,_			boolean nonPublicAccessAllowed, @Nullable String destroyMethodName,_			@Nullable List<DestructionAwareBeanPostProcessor> postProcessors) {__		this.bean = bean__		this.beanName = beanName__		this.invokeDisposableBean = invokeDisposableBean__		this.nonPublicAccessAllowed = nonPublicAccessAllowed__		this.acc = null__		this.destroyMethodName = destroyMethodName__		this.beanPostProcessors = postProcessors__	};create,a,new,disposable,bean,adapter,for,the,given,bean;private,disposable,bean,adapter,object,bean,string,bean,name,boolean,invoke,disposable,bean,boolean,non,public,access,allowed,nullable,string,destroy,method,name,nullable,list,destruction,aware,bean,post,processor,post,processors,this,bean,bean,this,bean,name,bean,name,this,invoke,disposable,bean,invoke,disposable,bean,this,non,public,access,allowed,non,public,access,allowed,this,acc,null,this,destroy,method,name,destroy,method,name,this,bean,post,processors,post,processors
DisposableBeanAdapter -> private DisposableBeanAdapter(Object bean, String beanName, boolean invokeDisposableBean, 			boolean nonPublicAccessAllowed, @Nullable String destroyMethodName, 			@Nullable List<DestructionAwareBeanPostProcessor> postProcessors);1537391140;Create a new DisposableBeanAdapter for the given bean.;private DisposableBeanAdapter(Object bean, String beanName, boolean invokeDisposableBean,_			boolean nonPublicAccessAllowed, @Nullable String destroyMethodName,_			@Nullable List<DestructionAwareBeanPostProcessor> postProcessors) {__		this.bean = bean__		this.beanName = beanName__		this.invokeDisposableBean = invokeDisposableBean__		this.nonPublicAccessAllowed = nonPublicAccessAllowed__		this.acc = null__		this.destroyMethodName = destroyMethodName__		this.beanPostProcessors = postProcessors__	};create,a,new,disposable,bean,adapter,for,the,given,bean;private,disposable,bean,adapter,object,bean,string,bean,name,boolean,invoke,disposable,bean,boolean,non,public,access,allowed,nullable,string,destroy,method,name,nullable,list,destruction,aware,bean,post,processor,post,processors,this,bean,bean,this,bean,name,bean,name,this,invoke,disposable,bean,invoke,disposable,bean,this,non,public,access,allowed,non,public,access,allowed,this,acc,null,this,destroy,method,name,destroy,method,name,this,bean,post,processors,post,processors
