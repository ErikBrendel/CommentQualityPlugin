commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the {@link Log logger} that is to be used to report warnings.  * <p>If set to {@code null} then a default {@link Log logger} set to  * the name of the instance class will be used.  * @param logger the {@link Log logger} that is to be used to report warnings  */ ;/**  * Set the {@link Log logger} that is to be used to report warnings.  * <p>If set to {@code null} then a default {@link Log logger} set to  * the name of the instance class will be used.  * @param logger the {@link Log logger} that is to be used to report warnings  */ public void setLogger(@Nullable Log logger) {     this.logger = (logger != null ? logger : LogFactory.getLog(getClass())). }
true;public;1;4;/**  * Throws a {@link BeanDefinitionParsingException} detailing the error  * that has occurred.  * @param problem the source of the error  */ ;/**  * Throws a {@link BeanDefinitionParsingException} detailing the error  * that has occurred.  * @param problem the source of the error  */ @Override public void fatal(Problem problem) {     throw new BeanDefinitionParsingException(problem). }
true;public;1;4;/**  * Throws a {@link BeanDefinitionParsingException} detailing the error  * that has occurred.  * @param problem the source of the error  */ ;/**  * Throws a {@link BeanDefinitionParsingException} detailing the error  * that has occurred.  * @param problem the source of the error  */ @Override public void error(Problem problem) {     throw new BeanDefinitionParsingException(problem). }
true;public;1;4;/**  * Writes the supplied {@link Problem} to the {@link Log} at {@code WARN} level.  * @param problem the source of the warning  */ ;/**  * Writes the supplied {@link Problem} to the {@link Log} at {@code WARN} level.  * @param problem the source of the warning  */ @Override public void warning(Problem problem) {     logger.warn(problem, problem.getRootCause()). }
