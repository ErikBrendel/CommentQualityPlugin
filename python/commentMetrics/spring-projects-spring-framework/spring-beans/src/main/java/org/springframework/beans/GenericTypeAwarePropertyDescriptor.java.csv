commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public Class<?> getBeanClass() {     return this.beanClass. }
false;public;0;5;;@Override @Nullable public Method getReadMethod() {     return this.readMethod. }
false;public;0;5;;@Override @Nullable public Method getWriteMethod() {     return this.writeMethod. }
false;public;0;11;;public Method getWriteMethodForActualAccess() {     Assert.state(this.writeMethod != null, "No write method available").     Set<Method> ambiguousCandidates = this.ambiguousWriteMethods.     if (ambiguousCandidates != null) {         this.ambiguousWriteMethods = null.         LogFactory.getLog(GenericTypeAwarePropertyDescriptor.class).warn("Invalid JavaBean property '" + getName() + "' being accessed! Ambiguous write methods found next to actually used [" + this.writeMethod + "]: " + ambiguousCandidates).     }     return this.writeMethod. }
false;public;0;4;;public MethodParameter getWriteMethodParameter() {     Assert.state(this.writeMethodParameter != null, "No write method available").     return this.writeMethodParameter. }
false;public;0;5;;@Override @Nullable public Class<?> getPropertyType() {     return this.propertyType. }
false;public;0;4;;@Override public Class<?> getPropertyEditorClass() {     return this.propertyEditorClass. }
false;public;1;11;;@Override public boolean equals(Object other) {     if (this == other) {         return true.     }     if (!(other instanceof GenericTypeAwarePropertyDescriptor)) {         return false.     }     GenericTypeAwarePropertyDescriptor otherPd = (GenericTypeAwarePropertyDescriptor) other.     return (getBeanClass().equals(otherPd.getBeanClass()) && PropertyDescriptorUtils.equals(this, otherPd)). }
false;public;0;7;;@Override public int hashCode() {     int hashCode = getBeanClass().hashCode().     hashCode = 29 * hashCode + ObjectUtils.nullSafeHashCode(getReadMethod()).     hashCode = 29 * hashCode + ObjectUtils.nullSafeHashCode(getWriteMethod()).     return hashCode. }
