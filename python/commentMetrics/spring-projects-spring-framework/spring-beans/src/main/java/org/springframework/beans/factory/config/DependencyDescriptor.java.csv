# id;timestamp;commentText;codeText;commentWords;codeWords
DependencyDescriptor -> public Object resolveNotUnique(Class<?> type, Map<String, Object> matchingBeans) throws BeansException;1455295525;Resolve the specified not-unique scenario: by default,_throwing a {@link NoUniqueBeanDefinitionException}._<p>Subclasses may override this to select one of the instances or_to opt out with no result at all through returning {@code null}._@param type the requested bean type_@param matchingBeans a map of bean names and corresponding bean_instances which have been pre-selected for the given type_(qualifiers etc already applied)_@return a bean instance to proceed with, or {@code null} for none_@throws BeansException in case of the not-unique scenario being fatal_@since 4.3;public Object resolveNotUnique(Class<?> type, Map<String, Object> matchingBeans) throws BeansException {_		throw new NoUniqueBeanDefinitionException(type, matchingBeans.keySet())__	};resolve,the,specified,not,unique,scenario,by,default,throwing,a,link,no,unique,bean,definition,exception,p,subclasses,may,override,this,to,select,one,of,the,instances,or,to,opt,out,with,no,result,at,all,through,returning,code,null,param,type,the,requested,bean,type,param,matching,beans,a,map,of,bean,names,and,corresponding,bean,instances,which,have,been,pre,selected,for,the,given,type,qualifiers,etc,already,applied,return,a,bean,instance,to,proceed,with,or,code,null,for,none,throws,beans,exception,in,case,of,the,not,unique,scenario,being,fatal,since,4,3;public,object,resolve,not,unique,class,type,map,string,object,matching,beans,throws,beans,exception,throw,new,no,unique,bean,definition,exception,type,matching,beans,key,set
DependencyDescriptor -> public Object resolveNotUnique(Class<?> type, Map<String, Object> matchingBeans) throws BeansException;1455889195;Resolve the specified not-unique scenario: by default,_throwing a {@link NoUniqueBeanDefinitionException}._<p>Subclasses may override this to select one of the instances or_to opt out with no result at all through returning {@code null}._@param type the requested bean type_@param matchingBeans a map of bean names and corresponding bean_instances which have been pre-selected for the given type_(qualifiers etc already applied)_@return a bean instance to proceed with, or {@code null} for none_@throws BeansException in case of the not-unique scenario being fatal_@since 4.3;public Object resolveNotUnique(Class<?> type, Map<String, Object> matchingBeans) throws BeansException {_		throw new NoUniqueBeanDefinitionException(type, matchingBeans.keySet())__	};resolve,the,specified,not,unique,scenario,by,default,throwing,a,link,no,unique,bean,definition,exception,p,subclasses,may,override,this,to,select,one,of,the,instances,or,to,opt,out,with,no,result,at,all,through,returning,code,null,param,type,the,requested,bean,type,param,matching,beans,a,map,of,bean,names,and,corresponding,bean,instances,which,have,been,pre,selected,for,the,given,type,qualifiers,etc,already,applied,return,a,bean,instance,to,proceed,with,or,code,null,for,none,throws,beans,exception,in,case,of,the,not,unique,scenario,being,fatal,since,4,3;public,object,resolve,not,unique,class,type,map,string,object,matching,beans,throws,beans,exception,throw,new,no,unique,bean,definition,exception,type,matching,beans,key,set
DependencyDescriptor -> public Object resolveNotUnique(Class<?> type, Map<String, Object> matchingBeans) throws BeansException;1456432609;Resolve the specified not-unique scenario: by default,_throwing a {@link NoUniqueBeanDefinitionException}._<p>Subclasses may override this to select one of the instances or_to opt out with no result at all through returning {@code null}._@param type the requested bean type_@param matchingBeans a map of bean names and corresponding bean_instances which have been pre-selected for the given type_(qualifiers etc already applied)_@return a bean instance to proceed with, or {@code null} for none_@throws BeansException in case of the not-unique scenario being fatal_@since 4.3;public Object resolveNotUnique(Class<?> type, Map<String, Object> matchingBeans) throws BeansException {_		throw new NoUniqueBeanDefinitionException(type, matchingBeans.keySet())__	};resolve,the,specified,not,unique,scenario,by,default,throwing,a,link,no,unique,bean,definition,exception,p,subclasses,may,override,this,to,select,one,of,the,instances,or,to,opt,out,with,no,result,at,all,through,returning,code,null,param,type,the,requested,bean,type,param,matching,beans,a,map,of,bean,names,and,corresponding,bean,instances,which,have,been,pre,selected,for,the,given,type,qualifiers,etc,already,applied,return,a,bean,instance,to,proceed,with,or,code,null,for,none,throws,beans,exception,in,case,of,the,not,unique,scenario,being,fatal,since,4,3;public,object,resolve,not,unique,class,type,map,string,object,matching,beans,throws,beans,exception,throw,new,no,unique,bean,definition,exception,type,matching,beans,key,set
DependencyDescriptor -> public Object resolveNotUnique(Class<?> type, Map<String, Object> matchingBeans) throws BeansException;1458755547;Resolve the specified not-unique scenario: by default,_throwing a {@link NoUniqueBeanDefinitionException}._<p>Subclasses may override this to select one of the instances or_to opt out with no result at all through returning {@code null}._@param type the requested bean type_@param matchingBeans a map of bean names and corresponding bean_instances which have been pre-selected for the given type_(qualifiers etc already applied)_@return a bean instance to proceed with, or {@code null} for none_@throws BeansException in case of the not-unique scenario being fatal_@since 4.3;public Object resolveNotUnique(Class<?> type, Map<String, Object> matchingBeans) throws BeansException {_		throw new NoUniqueBeanDefinitionException(type, matchingBeans.keySet())__	};resolve,the,specified,not,unique,scenario,by,default,throwing,a,link,no,unique,bean,definition,exception,p,subclasses,may,override,this,to,select,one,of,the,instances,or,to,opt,out,with,no,result,at,all,through,returning,code,null,param,type,the,requested,bean,type,param,matching,beans,a,map,of,bean,names,and,corresponding,bean,instances,which,have,been,pre,selected,for,the,given,type,qualifiers,etc,already,applied,return,a,bean,instance,to,proceed,with,or,code,null,for,none,throws,beans,exception,in,case,of,the,not,unique,scenario,being,fatal,since,4,3;public,object,resolve,not,unique,class,type,map,string,object,matching,beans,throws,beans,exception,throw,new,no,unique,bean,definition,exception,type,matching,beans,key,set
DependencyDescriptor -> public Object resolveNotUnique(Class<?> type, Map<String, Object> matchingBeans) throws BeansException;1466893134;Resolve the specified not-unique scenario: by default,_throwing a {@link NoUniqueBeanDefinitionException}._<p>Subclasses may override this to select one of the instances or_to opt out with no result at all through returning {@code null}._@param type the requested bean type_@param matchingBeans a map of bean names and corresponding bean_instances which have been pre-selected for the given type_(qualifiers etc already applied)_@return a bean instance to proceed with, or {@code null} for none_@throws BeansException in case of the not-unique scenario being fatal_@since 4.3;public Object resolveNotUnique(Class<?> type, Map<String, Object> matchingBeans) throws BeansException {_		throw new NoUniqueBeanDefinitionException(type, matchingBeans.keySet())__	};resolve,the,specified,not,unique,scenario,by,default,throwing,a,link,no,unique,bean,definition,exception,p,subclasses,may,override,this,to,select,one,of,the,instances,or,to,opt,out,with,no,result,at,all,through,returning,code,null,param,type,the,requested,bean,type,param,matching,beans,a,map,of,bean,names,and,corresponding,bean,instances,which,have,been,pre,selected,for,the,given,type,qualifiers,etc,already,applied,return,a,bean,instance,to,proceed,with,or,code,null,for,none,throws,beans,exception,in,case,of,the,not,unique,scenario,being,fatal,since,4,3;public,object,resolve,not,unique,class,type,map,string,object,matching,beans,throws,beans,exception,throw,new,no,unique,bean,definition,exception,type,matching,beans,key,set
DependencyDescriptor -> public Object resolveNotUnique(Class<?> type, Map<String, Object> matchingBeans) throws BeansException;1469030751;Resolve the specified not-unique scenario: by default,_throwing a {@link NoUniqueBeanDefinitionException}._<p>Subclasses may override this to select one of the instances or_to opt out with no result at all through returning {@code null}._@param type the requested bean type_@param matchingBeans a map of bean names and corresponding bean_instances which have been pre-selected for the given type_(qualifiers etc already applied)_@return a bean instance to proceed with, or {@code null} for none_@throws BeansException in case of the not-unique scenario being fatal_@since 4.3;public Object resolveNotUnique(Class<?> type, Map<String, Object> matchingBeans) throws BeansException {_		throw new NoUniqueBeanDefinitionException(type, matchingBeans.keySet())__	};resolve,the,specified,not,unique,scenario,by,default,throwing,a,link,no,unique,bean,definition,exception,p,subclasses,may,override,this,to,select,one,of,the,instances,or,to,opt,out,with,no,result,at,all,through,returning,code,null,param,type,the,requested,bean,type,param,matching,beans,a,map,of,bean,names,and,corresponding,bean,instances,which,have,been,pre,selected,for,the,given,type,qualifiers,etc,already,applied,return,a,bean,instance,to,proceed,with,or,code,null,for,none,throws,beans,exception,in,case,of,the,not,unique,scenario,being,fatal,since,4,3;public,object,resolve,not,unique,class,type,map,string,object,matching,beans,throws,beans,exception,throw,new,no,unique,bean,definition,exception,type,matching,beans,key,set
DependencyDescriptor -> public Object resolveNotUnique(Class<?> type, Map<String, Object> matchingBeans) throws BeansException;1481647138;Resolve the specified not-unique scenario: by default,_throwing a {@link NoUniqueBeanDefinitionException}._<p>Subclasses may override this to select one of the instances or_to opt out with no result at all through returning {@code null}._@param type the requested bean type_@param matchingBeans a map of bean names and corresponding bean_instances which have been pre-selected for the given type_(qualifiers etc already applied)_@return a bean instance to proceed with, or {@code null} for none_@throws BeansException in case of the not-unique scenario being fatal_@since 4.3;public Object resolveNotUnique(Class<?> type, Map<String, Object> matchingBeans) throws BeansException {_		throw new NoUniqueBeanDefinitionException(type, matchingBeans.keySet())__	};resolve,the,specified,not,unique,scenario,by,default,throwing,a,link,no,unique,bean,definition,exception,p,subclasses,may,override,this,to,select,one,of,the,instances,or,to,opt,out,with,no,result,at,all,through,returning,code,null,param,type,the,requested,bean,type,param,matching,beans,a,map,of,bean,names,and,corresponding,bean,instances,which,have,been,pre,selected,for,the,given,type,qualifiers,etc,already,applied,return,a,bean,instance,to,proceed,with,or,code,null,for,none,throws,beans,exception,in,case,of,the,not,unique,scenario,being,fatal,since,4,3;public,object,resolve,not,unique,class,type,map,string,object,matching,beans,throws,beans,exception,throw,new,no,unique,bean,definition,exception,type,matching,beans,key,set
DependencyDescriptor -> public Object resolveNotUnique(Class<?> type, Map<String, Object> matchingBeans) throws BeansException;1482091448;Resolve the specified not-unique scenario: by default,_throwing a {@link NoUniqueBeanDefinitionException}._<p>Subclasses may override this to select one of the instances or_to opt out with no result at all through returning {@code null}._@param type the requested bean type_@param matchingBeans a map of bean names and corresponding bean_instances which have been pre-selected for the given type_(qualifiers etc already applied)_@return a bean instance to proceed with, or {@code null} for none_@throws BeansException in case of the not-unique scenario being fatal_@since 4.3;public Object resolveNotUnique(Class<?> type, Map<String, Object> matchingBeans) throws BeansException {_		throw new NoUniqueBeanDefinitionException(type, matchingBeans.keySet())__	};resolve,the,specified,not,unique,scenario,by,default,throwing,a,link,no,unique,bean,definition,exception,p,subclasses,may,override,this,to,select,one,of,the,instances,or,to,opt,out,with,no,result,at,all,through,returning,code,null,param,type,the,requested,bean,type,param,matching,beans,a,map,of,bean,names,and,corresponding,bean,instances,which,have,been,pre,selected,for,the,given,type,qualifiers,etc,already,applied,return,a,bean,instance,to,proceed,with,or,code,null,for,none,throws,beans,exception,in,case,of,the,not,unique,scenario,being,fatal,since,4,3;public,object,resolve,not,unique,class,type,map,string,object,matching,beans,throws,beans,exception,throw,new,no,unique,bean,definition,exception,type,matching,beans,key,set
DependencyDescriptor -> public Object resolveNotUnique(Class<?> type, Map<String, Object> matchingBeans) throws BeansException;1485277217;Resolve the specified not-unique scenario: by default,_throwing a {@link NoUniqueBeanDefinitionException}._<p>Subclasses may override this to select one of the instances or_to opt out with no result at all through returning {@code null}._@param type the requested bean type_@param matchingBeans a map of bean names and corresponding bean_instances which have been pre-selected for the given type_(qualifiers etc already applied)_@return a bean instance to proceed with, or {@code null} for none_@throws BeansException in case of the not-unique scenario being fatal_@since 4.3;public Object resolveNotUnique(Class<?> type, Map<String, Object> matchingBeans) throws BeansException {_		throw new NoUniqueBeanDefinitionException(type, matchingBeans.keySet())__	};resolve,the,specified,not,unique,scenario,by,default,throwing,a,link,no,unique,bean,definition,exception,p,subclasses,may,override,this,to,select,one,of,the,instances,or,to,opt,out,with,no,result,at,all,through,returning,code,null,param,type,the,requested,bean,type,param,matching,beans,a,map,of,bean,names,and,corresponding,bean,instances,which,have,been,pre,selected,for,the,given,type,qualifiers,etc,already,applied,return,a,bean,instance,to,proceed,with,or,code,null,for,none,throws,beans,exception,in,case,of,the,not,unique,scenario,being,fatal,since,4,3;public,object,resolve,not,unique,class,type,map,string,object,matching,beans,throws,beans,exception,throw,new,no,unique,bean,definition,exception,type,matching,beans,key,set
DependencyDescriptor -> public Object resolveNotUnique(Class<?> type, Map<String, Object> matchingBeans) throws BeansException;1485300605;Resolve the specified not-unique scenario: by default,_throwing a {@link NoUniqueBeanDefinitionException}._<p>Subclasses may override this to select one of the instances or_to opt out with no result at all through returning {@code null}._@param type the requested bean type_@param matchingBeans a map of bean names and corresponding bean_instances which have been pre-selected for the given type_(qualifiers etc already applied)_@return a bean instance to proceed with, or {@code null} for none_@throws BeansException in case of the not-unique scenario being fatal_@since 4.3;public Object resolveNotUnique(Class<?> type, Map<String, Object> matchingBeans) throws BeansException {_		throw new NoUniqueBeanDefinitionException(type, matchingBeans.keySet())__	};resolve,the,specified,not,unique,scenario,by,default,throwing,a,link,no,unique,bean,definition,exception,p,subclasses,may,override,this,to,select,one,of,the,instances,or,to,opt,out,with,no,result,at,all,through,returning,code,null,param,type,the,requested,bean,type,param,matching,beans,a,map,of,bean,names,and,corresponding,bean,instances,which,have,been,pre,selected,for,the,given,type,qualifiers,etc,already,applied,return,a,bean,instance,to,proceed,with,or,code,null,for,none,throws,beans,exception,in,case,of,the,not,unique,scenario,being,fatal,since,4,3;public,object,resolve,not,unique,class,type,map,string,object,matching,beans,throws,beans,exception,throw,new,no,unique,bean,definition,exception,type,matching,beans,key,set
DependencyDescriptor -> public boolean isStreamAccess();1532385723;Return whether this descriptor allows for stream-style access to_result instances._<p>By default, dependencies are strictly resolved to the declaration of_the injection point and therefore only resolve multiple entries if the_injection point is declared as an array, collection or map. This is_indicated by returning {@code false} here._<p>Overriding this method to return {@code true} indicates that the_injection point declares the bean type but the resolution is meant to_end up in a {@link java.util.stream.Stream} for the declared bean type,_with the caller handling the multi-instance case for the injection point._@since 5.1;public boolean isStreamAccess() {_		return false__	};return,whether,this,descriptor,allows,for,stream,style,access,to,result,instances,p,by,default,dependencies,are,strictly,resolved,to,the,declaration,of,the,injection,point,and,therefore,only,resolve,multiple,entries,if,the,injection,point,is,declared,as,an,array,collection,or,map,this,is,indicated,by,returning,code,false,here,p,overriding,this,method,to,return,code,true,indicates,that,the,injection,point,declares,the,bean,type,but,the,resolution,is,meant,to,end,up,in,a,link,java,util,stream,stream,for,the,declared,bean,type,with,the,caller,handling,the,multi,instance,case,for,the,injection,point,since,5,1;public,boolean,is,stream,access,return,false
DependencyDescriptor -> public boolean isStreamAccess();1535039984;Return whether this descriptor allows for stream-style access to_result instances._<p>By default, dependencies are strictly resolved to the declaration of_the injection point and therefore only resolve multiple entries if the_injection point is declared as an array, collection or map. This is_indicated by returning {@code false} here._<p>Overriding this method to return {@code true} indicates that the_injection point declares the bean type but the resolution is meant to_end up in a {@link java.util.stream.Stream} for the declared bean type,_with the caller handling the multi-instance case for the injection point._@since 5.1;public boolean isStreamAccess() {_		return false__	};return,whether,this,descriptor,allows,for,stream,style,access,to,result,instances,p,by,default,dependencies,are,strictly,resolved,to,the,declaration,of,the,injection,point,and,therefore,only,resolve,multiple,entries,if,the,injection,point,is,declared,as,an,array,collection,or,map,this,is,indicated,by,returning,code,false,here,p,overriding,this,method,to,return,code,true,indicates,that,the,injection,point,declares,the,bean,type,but,the,resolution,is,meant,to,end,up,in,a,link,java,util,stream,stream,for,the,declared,bean,type,with,the,caller,handling,the,multi,instance,case,for,the,injection,point,since,5,1;public,boolean,is,stream,access,return,false
DependencyDescriptor -> @Deprecated 	@Nullable 	public Object resolveNotUnique(Class<?> type, Map<String, Object> matchingBeans) throws BeansException;1532385723;Resolve the specified not-unique scenario: by default,_throwing a {@link NoUniqueBeanDefinitionException}._<p>Subclasses may override this to select one of the instances or_to opt out with no result at all through returning {@code null}._@param type the requested bean type_@param matchingBeans a map of bean names and corresponding bean_instances which have been pre-selected for the given type_(qualifiers etc already applied)_@return a bean instance to proceed with, or {@code null} for none_@throws BeansException in case of the not-unique scenario being fatal_@since 4.3_@deprecated as of 5.1, in favor of {@link #resolveNotUnique(ResolvableType, Map)};@Deprecated_	@Nullable_	public Object resolveNotUnique(Class<?> type, Map<String, Object> matchingBeans) throws BeansException {_		throw new NoUniqueBeanDefinitionException(type, matchingBeans.keySet())__	};resolve,the,specified,not,unique,scenario,by,default,throwing,a,link,no,unique,bean,definition,exception,p,subclasses,may,override,this,to,select,one,of,the,instances,or,to,opt,out,with,no,result,at,all,through,returning,code,null,param,type,the,requested,bean,type,param,matching,beans,a,map,of,bean,names,and,corresponding,bean,instances,which,have,been,pre,selected,for,the,given,type,qualifiers,etc,already,applied,return,a,bean,instance,to,proceed,with,or,code,null,for,none,throws,beans,exception,in,case,of,the,not,unique,scenario,being,fatal,since,4,3,deprecated,as,of,5,1,in,favor,of,link,resolve,not,unique,resolvable,type,map;deprecated,nullable,public,object,resolve,not,unique,class,type,map,string,object,matching,beans,throws,beans,exception,throw,new,no,unique,bean,definition,exception,type,matching,beans,key,set
DependencyDescriptor -> @Deprecated 	@Nullable 	public Object resolveNotUnique(Class<?> type, Map<String, Object> matchingBeans) throws BeansException;1535039984;Resolve the specified not-unique scenario: by default,_throwing a {@link NoUniqueBeanDefinitionException}._<p>Subclasses may override this to select one of the instances or_to opt out with no result at all through returning {@code null}._@param type the requested bean type_@param matchingBeans a map of bean names and corresponding bean_instances which have been pre-selected for the given type_(qualifiers etc already applied)_@return a bean instance to proceed with, or {@code null} for none_@throws BeansException in case of the not-unique scenario being fatal_@since 4.3_@deprecated as of 5.1, in favor of {@link #resolveNotUnique(ResolvableType, Map)};@Deprecated_	@Nullable_	public Object resolveNotUnique(Class<?> type, Map<String, Object> matchingBeans) throws BeansException {_		throw new NoUniqueBeanDefinitionException(type, matchingBeans.keySet())__	};resolve,the,specified,not,unique,scenario,by,default,throwing,a,link,no,unique,bean,definition,exception,p,subclasses,may,override,this,to,select,one,of,the,instances,or,to,opt,out,with,no,result,at,all,through,returning,code,null,param,type,the,requested,bean,type,param,matching,beans,a,map,of,bean,names,and,corresponding,bean,instances,which,have,been,pre,selected,for,the,given,type,qualifiers,etc,already,applied,return,a,bean,instance,to,proceed,with,or,code,null,for,none,throws,beans,exception,in,case,of,the,not,unique,scenario,being,fatal,since,4,3,deprecated,as,of,5,1,in,favor,of,link,resolve,not,unique,resolvable,type,map;deprecated,nullable,public,object,resolve,not,unique,class,type,map,string,object,matching,beans,throws,beans,exception,throw,new,no,unique,bean,definition,exception,type,matching,beans,key,set
DependencyDescriptor -> @Deprecated 	@Nullable 	public Object resolveNotUnique(Class<?> type, Map<String, Object> matchingBeans) throws BeansException;1536855799;Resolve the specified not-unique scenario: by default,_throwing a {@link NoUniqueBeanDefinitionException}._<p>Subclasses may override this to select one of the instances or_to opt out with no result at all through returning {@code null}._@param type the requested bean type_@param matchingBeans a map of bean names and corresponding bean_instances which have been pre-selected for the given type_(qualifiers etc already applied)_@return a bean instance to proceed with, or {@code null} for none_@throws BeansException in case of the not-unique scenario being fatal_@since 4.3_@deprecated as of 5.1, in favor of {@link #resolveNotUnique(ResolvableType, Map)};@Deprecated_	@Nullable_	public Object resolveNotUnique(Class<?> type, Map<String, Object> matchingBeans) throws BeansException {_		throw new NoUniqueBeanDefinitionException(type, matchingBeans.keySet())__	};resolve,the,specified,not,unique,scenario,by,default,throwing,a,link,no,unique,bean,definition,exception,p,subclasses,may,override,this,to,select,one,of,the,instances,or,to,opt,out,with,no,result,at,all,through,returning,code,null,param,type,the,requested,bean,type,param,matching,beans,a,map,of,bean,names,and,corresponding,bean,instances,which,have,been,pre,selected,for,the,given,type,qualifiers,etc,already,applied,return,a,bean,instance,to,proceed,with,or,code,null,for,none,throws,beans,exception,in,case,of,the,not,unique,scenario,being,fatal,since,4,3,deprecated,as,of,5,1,in,favor,of,link,resolve,not,unique,resolvable,type,map;deprecated,nullable,public,object,resolve,not,unique,class,type,map,string,object,matching,beans,throws,beans,exception,throw,new,no,unique,bean,definition,exception,type,matching,beans,key,set
DependencyDescriptor -> @Deprecated 	@Nullable 	public Object resolveNotUnique(Class<?> type, Map<String, Object> matchingBeans) throws BeansException;1546963887;Resolve the specified not-unique scenario: by default,_throwing a {@link NoUniqueBeanDefinitionException}._<p>Subclasses may override this to select one of the instances or_to opt out with no result at all through returning {@code null}._@param type the requested bean type_@param matchingBeans a map of bean names and corresponding bean_instances which have been pre-selected for the given type_(qualifiers etc already applied)_@return a bean instance to proceed with, or {@code null} for none_@throws BeansException in case of the not-unique scenario being fatal_@since 4.3_@deprecated as of 5.1, in favor of {@link #resolveNotUnique(ResolvableType, Map)};@Deprecated_	@Nullable_	public Object resolveNotUnique(Class<?> type, Map<String, Object> matchingBeans) throws BeansException {_		throw new NoUniqueBeanDefinitionException(type, matchingBeans.keySet())__	};resolve,the,specified,not,unique,scenario,by,default,throwing,a,link,no,unique,bean,definition,exception,p,subclasses,may,override,this,to,select,one,of,the,instances,or,to,opt,out,with,no,result,at,all,through,returning,code,null,param,type,the,requested,bean,type,param,matching,beans,a,map,of,bean,names,and,corresponding,bean,instances,which,have,been,pre,selected,for,the,given,type,qualifiers,etc,already,applied,return,a,bean,instance,to,proceed,with,or,code,null,for,none,throws,beans,exception,in,case,of,the,not,unique,scenario,being,fatal,since,4,3,deprecated,as,of,5,1,in,favor,of,link,resolve,not,unique,resolvable,type,map;deprecated,nullable,public,object,resolve,not,unique,class,type,map,string,object,matching,beans,throws,beans,exception,throw,new,no,unique,bean,definition,exception,type,matching,beans,key,set
DependencyDescriptor -> public Class<?> getMapKeyType();1328020251;Determine the generic key type of the wrapped Map parameter/field, if any._@return the generic type, or <code>null</code> if none;public Class<?> getMapKeyType() {_		return (this.field != null ?_				GenericCollectionTypeResolver.getMapKeyFieldType(this.field) :_				GenericCollectionTypeResolver.getMapKeyParameterType(this.methodParameter))__	};determine,the,generic,key,type,of,the,wrapped,map,parameter,field,if,any,return,the,generic,type,or,code,null,code,if,none;public,class,get,map,key,type,return,this,field,null,generic,collection,type,resolver,get,map,key,field,type,this,field,generic,collection,type,resolver,get,map,key,parameter,type,this,method,parameter
DependencyDescriptor -> public Class<?> getMapKeyType();1329142650;Determine the generic key type of the wrapped Map parameter/field, if any._@return the generic type, or <code>null</code> if none;public Class<?> getMapKeyType() {_		return (this.field != null ?_				GenericCollectionTypeResolver.getMapKeyFieldType(this.field, this.nestingLevel) :_				GenericCollectionTypeResolver.getMapKeyParameterType(this.methodParameter))__	};determine,the,generic,key,type,of,the,wrapped,map,parameter,field,if,any,return,the,generic,type,or,code,null,code,if,none;public,class,get,map,key,type,return,this,field,null,generic,collection,type,resolver,get,map,key,field,type,this,field,this,nesting,level,generic,collection,type,resolver,get,map,key,parameter,type,this,method,parameter
DependencyDescriptor -> public Class<?> getMapKeyType();1346421549;Determine the generic key type of the wrapped Map parameter/field, if any._@return the generic type, or <code>null</code> if none;public Class<?> getMapKeyType() {_		return (this.field != null ?_				GenericCollectionTypeResolver.getMapKeyFieldType(this.field, this.nestingLevel) :_				GenericCollectionTypeResolver.getMapKeyParameterType(this.methodParameter))__	};determine,the,generic,key,type,of,the,wrapped,map,parameter,field,if,any,return,the,generic,type,or,code,null,code,if,none;public,class,get,map,key,type,return,this,field,null,generic,collection,type,resolver,get,map,key,field,type,this,field,this,nesting,level,generic,collection,type,resolver,get,map,key,parameter,type,this,method,parameter
DependencyDescriptor -> public Class<?> getMapKeyType();1350077654;Determine the generic key type of the wrapped Map parameter/field, if any._@return the generic type, or <code>null</code> if none;public Class<?> getMapKeyType() {_		return (this.field != null ?_				GenericCollectionTypeResolver.getMapKeyFieldType(this.field, this.nestingLevel) :_				GenericCollectionTypeResolver.getMapKeyParameterType(this.methodParameter))__	};determine,the,generic,key,type,of,the,wrapped,map,parameter,field,if,any,return,the,generic,type,or,code,null,code,if,none;public,class,get,map,key,type,return,this,field,null,generic,collection,type,resolver,get,map,key,field,type,this,field,this,nesting,level,generic,collection,type,resolver,get,map,key,parameter,type,this,method,parameter
DependencyDescriptor -> public Class<?> getMapKeyType();1356735495;Determine the generic key type of the wrapped Map parameter/field, if any._@return the generic type, or {@code null} if none;public Class<?> getMapKeyType() {_		return (this.field != null ?_				GenericCollectionTypeResolver.getMapKeyFieldType(this.field, this.nestingLevel) :_				GenericCollectionTypeResolver.getMapKeyParameterType(this.methodParameter))__	};determine,the,generic,key,type,of,the,wrapped,map,parameter,field,if,any,return,the,generic,type,or,code,null,if,none;public,class,get,map,key,type,return,this,field,null,generic,collection,type,resolver,get,map,key,field,type,this,field,this,nesting,level,generic,collection,type,resolver,get,map,key,parameter,type,this,method,parameter
DependencyDescriptor -> public Class<?> getMapKeyType();1377641038;Determine the generic key type of the wrapped Map parameter/field, if any._@return the generic type, or {@code null} if none;public Class<?> getMapKeyType() {_		return (this.field != null ?_				GenericCollectionTypeResolver.getMapKeyFieldType(this.field, this.nestingLevel) :_				GenericCollectionTypeResolver.getMapKeyParameterType(this.methodParameter))__	};determine,the,generic,key,type,of,the,wrapped,map,parameter,field,if,any,return,the,generic,type,or,code,null,if,none;public,class,get,map,key,type,return,this,field,null,generic,collection,type,resolver,get,map,key,field,type,this,field,this,nesting,level,generic,collection,type,resolver,get,map,key,parameter,type,this,method,parameter
DependencyDescriptor -> public Class<?> getMapKeyType();1381788683;Determine the generic key type of the wrapped Map parameter/field, if any._@return the generic type, or {@code null} if none;public Class<?> getMapKeyType() {_		return (this.field != null ?_				GenericCollectionTypeResolver.getMapKeyFieldType(this.field, this.nestingLevel) :_				GenericCollectionTypeResolver.getMapKeyParameterType(this.methodParameter))__	};determine,the,generic,key,type,of,the,wrapped,map,parameter,field,if,any,return,the,generic,type,or,code,null,if,none;public,class,get,map,key,type,return,this,field,null,generic,collection,type,resolver,get,map,key,field,type,this,field,this,nesting,level,generic,collection,type,resolver,get,map,key,parameter,type,this,method,parameter
DependencyDescriptor -> public Class<?> getMapKeyType();1382716358;Determine the generic key type of the wrapped Map parameter/field, if any._@return the generic type, or {@code null} if none;public Class<?> getMapKeyType() {_		return (this.field != null ?_				GenericCollectionTypeResolver.getMapKeyFieldType(this.field, this.nestingLevel) :_				GenericCollectionTypeResolver.getMapKeyParameterType(this.methodParameter))__	};determine,the,generic,key,type,of,the,wrapped,map,parameter,field,if,any,return,the,generic,type,or,code,null,if,none;public,class,get,map,key,type,return,this,field,null,generic,collection,type,resolver,get,map,key,field,type,this,field,this,nesting,level,generic,collection,type,resolver,get,map,key,parameter,type,this,method,parameter
DependencyDescriptor -> public Class<?> getMapKeyType();1385412762;Determine the generic key type of the wrapped Map parameter/field, if any._@return the generic type, or {@code null} if none;public Class<?> getMapKeyType() {_		return (this.field != null ?_				GenericCollectionTypeResolver.getMapKeyFieldType(this.field, this.nestingLevel) :_				GenericCollectionTypeResolver.getMapKeyParameterType(this.methodParameter))__	};determine,the,generic,key,type,of,the,wrapped,map,parameter,field,if,any,return,the,generic,type,or,code,null,if,none;public,class,get,map,key,type,return,this,field,null,generic,collection,type,resolver,get,map,key,field,type,this,field,this,nesting,level,generic,collection,type,resolver,get,map,key,parameter,type,this,method,parameter
DependencyDescriptor -> public Class<?> getMapKeyType();1402061390;Determine the generic key type of the wrapped Map parameter/field, if any._@return the generic type, or {@code null} if none;public Class<?> getMapKeyType() {_		return (this.field != null ?_				GenericCollectionTypeResolver.getMapKeyFieldType(this.field, this.nestingLevel) :_				GenericCollectionTypeResolver.getMapKeyParameterType(this.methodParameter))__	};determine,the,generic,key,type,of,the,wrapped,map,parameter,field,if,any,return,the,generic,type,or,code,null,if,none;public,class,get,map,key,type,return,this,field,null,generic,collection,type,resolver,get,map,key,field,type,this,field,this,nesting,level,generic,collection,type,resolver,get,map,key,parameter,type,this,method,parameter
DependencyDescriptor -> public Class<?> getMapKeyType();1452685925;Determine the generic key type of the wrapped Map parameter/field, if any._@return the generic type, or {@code null} if none;public Class<?> getMapKeyType() {_		return (this.field != null ?_				GenericCollectionTypeResolver.getMapKeyFieldType(this.field, this.nestingLevel) :_				GenericCollectionTypeResolver.getMapKeyParameterType(this.methodParameter))__	};determine,the,generic,key,type,of,the,wrapped,map,parameter,field,if,any,return,the,generic,type,or,code,null,if,none;public,class,get,map,key,type,return,this,field,null,generic,collection,type,resolver,get,map,key,field,type,this,field,this,nesting,level,generic,collection,type,resolver,get,map,key,parameter,type,this,method,parameter
DependencyDescriptor -> public Class<?> getMapKeyType();1455295525;Determine the generic key type of the wrapped Map parameter/field, if any._@return the generic type, or {@code null} if none;public Class<?> getMapKeyType() {_		return (this.field != null ?_				GenericCollectionTypeResolver.getMapKeyFieldType(this.field, this.nestingLevel) :_				GenericCollectionTypeResolver.getMapKeyParameterType(this.methodParameter))__	};determine,the,generic,key,type,of,the,wrapped,map,parameter,field,if,any,return,the,generic,type,or,code,null,if,none;public,class,get,map,key,type,return,this,field,null,generic,collection,type,resolver,get,map,key,field,type,this,field,this,nesting,level,generic,collection,type,resolver,get,map,key,parameter,type,this,method,parameter
DependencyDescriptor -> public Class<?> getMapKeyType();1455889195;Determine the generic key type of the wrapped Map parameter/field, if any._@return the generic type, or {@code null} if none;public Class<?> getMapKeyType() {_		return (this.field != null ?_				GenericCollectionTypeResolver.getMapKeyFieldType(this.field, this.nestingLevel) :_				GenericCollectionTypeResolver.getMapKeyParameterType(this.methodParameter))__	};determine,the,generic,key,type,of,the,wrapped,map,parameter,field,if,any,return,the,generic,type,or,code,null,if,none;public,class,get,map,key,type,return,this,field,null,generic,collection,type,resolver,get,map,key,field,type,this,field,this,nesting,level,generic,collection,type,resolver,get,map,key,parameter,type,this,method,parameter
DependencyDescriptor -> public Class<?> getMapKeyType();1456432609;Determine the generic key type of the wrapped Map parameter/field, if any._@return the generic type, or {@code null} if none;public Class<?> getMapKeyType() {_		return (this.field != null ?_				GenericCollectionTypeResolver.getMapKeyFieldType(this.field, this.nestingLevel) :_				GenericCollectionTypeResolver.getMapKeyParameterType(this.methodParameter))__	};determine,the,generic,key,type,of,the,wrapped,map,parameter,field,if,any,return,the,generic,type,or,code,null,if,none;public,class,get,map,key,type,return,this,field,null,generic,collection,type,resolver,get,map,key,field,type,this,field,this,nesting,level,generic,collection,type,resolver,get,map,key,parameter,type,this,method,parameter
DependencyDescriptor -> public Class<?> getMapKeyType();1458755547;Determine the generic key type of the wrapped Map parameter/field, if any._@return the generic type, or {@code null} if none;public Class<?> getMapKeyType() {_		return (this.field != null ?_				GenericCollectionTypeResolver.getMapKeyFieldType(this.field, this.nestingLevel) :_				GenericCollectionTypeResolver.getMapKeyParameterType(this.methodParameter))__	};determine,the,generic,key,type,of,the,wrapped,map,parameter,field,if,any,return,the,generic,type,or,code,null,if,none;public,class,get,map,key,type,return,this,field,null,generic,collection,type,resolver,get,map,key,field,type,this,field,this,nesting,level,generic,collection,type,resolver,get,map,key,parameter,type,this,method,parameter
DependencyDescriptor -> public Class<?> getMapKeyType();1466893134;Determine the generic key type of the wrapped Map parameter/field, if any._@return the generic type, or {@code null} if none;public Class<?> getMapKeyType() {_		return (this.field != null ?_				GenericCollectionTypeResolver.getMapKeyFieldType(this.field, this.nestingLevel) :_				GenericCollectionTypeResolver.getMapKeyParameterType(this.methodParameter))__	};determine,the,generic,key,type,of,the,wrapped,map,parameter,field,if,any,return,the,generic,type,or,code,null,if,none;public,class,get,map,key,type,return,this,field,null,generic,collection,type,resolver,get,map,key,field,type,this,field,this,nesting,level,generic,collection,type,resolver,get,map,key,parameter,type,this,method,parameter
DependencyDescriptor -> public Class<?> getMapKeyType();1469030751;Determine the generic key type of the wrapped Map parameter/field, if any._@return the generic type, or {@code null} if none;public Class<?> getMapKeyType() {_		return (this.field != null ?_				GenericCollectionTypeResolver.getMapKeyFieldType(this.field, this.nestingLevel) :_				GenericCollectionTypeResolver.getMapKeyParameterType(this.methodParameter))__	};determine,the,generic,key,type,of,the,wrapped,map,parameter,field,if,any,return,the,generic,type,or,code,null,if,none;public,class,get,map,key,type,return,this,field,null,generic,collection,type,resolver,get,map,key,field,type,this,field,this,nesting,level,generic,collection,type,resolver,get,map,key,parameter,type,this,method,parameter
DependencyDescriptor -> public Class<?> getMapKeyType();1481647138;Determine the generic key type of the wrapped Map parameter/field, if any._@return the generic type, or {@code null} if none;public Class<?> getMapKeyType() {_		return (this.field != null ?_				GenericCollectionTypeResolver.getMapKeyFieldType(this.field, this.nestingLevel) :_				GenericCollectionTypeResolver.getMapKeyParameterType(this.methodParameter))__	};determine,the,generic,key,type,of,the,wrapped,map,parameter,field,if,any,return,the,generic,type,or,code,null,if,none;public,class,get,map,key,type,return,this,field,null,generic,collection,type,resolver,get,map,key,field,type,this,field,this,nesting,level,generic,collection,type,resolver,get,map,key,parameter,type,this,method,parameter
DependencyDescriptor -> public Class<?> getMapKeyType();1482091448;Determine the generic key type of the wrapped Map parameter/field, if any._@return the generic type, or {@code null} if none;public Class<?> getMapKeyType() {_		return (this.field != null ?_				GenericCollectionTypeResolver.getMapKeyFieldType(this.field, this.nestingLevel) :_				GenericCollectionTypeResolver.getMapKeyParameterType(this.methodParameter))__	};determine,the,generic,key,type,of,the,wrapped,map,parameter,field,if,any,return,the,generic,type,or,code,null,if,none;public,class,get,map,key,type,return,this,field,null,generic,collection,type,resolver,get,map,key,field,type,this,field,this,nesting,level,generic,collection,type,resolver,get,map,key,parameter,type,this,method,parameter
DependencyDescriptor -> public boolean isEager();1328020251;Return whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching.;public boolean isEager() {_		return this.eager__	};return,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,boolean,is,eager,return,this,eager
DependencyDescriptor -> public boolean isEager();1329142650;Return whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching.;public boolean isEager() {_		return this.eager__	};return,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,boolean,is,eager,return,this,eager
DependencyDescriptor -> public boolean isEager();1346421549;Return whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching.;public boolean isEager() {_		return this.eager__	};return,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,boolean,is,eager,return,this,eager
DependencyDescriptor -> public boolean isEager();1350077654;Return whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching.;public boolean isEager() {_		return this.eager__	};return,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,boolean,is,eager,return,this,eager
DependencyDescriptor -> public boolean isEager();1356735495;Return whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching.;public boolean isEager() {_		return this.eager__	};return,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,boolean,is,eager,return,this,eager
DependencyDescriptor -> public boolean isEager();1377641038;Return whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching.;public boolean isEager() {_		return this.eager__	};return,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,boolean,is,eager,return,this,eager
DependencyDescriptor -> public boolean isEager();1381788683;Return whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching.;public boolean isEager() {_		return this.eager__	};return,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,boolean,is,eager,return,this,eager
DependencyDescriptor -> public boolean isEager();1382716358;Return whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching.;public boolean isEager() {_		return this.eager__	};return,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,boolean,is,eager,return,this,eager
DependencyDescriptor -> public boolean isEager();1385412762;Return whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching.;public boolean isEager() {_		return this.eager__	};return,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,boolean,is,eager,return,this,eager
DependencyDescriptor -> public boolean isEager();1402061390;Return whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching.;public boolean isEager() {_		return this.eager__	};return,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,boolean,is,eager,return,this,eager
DependencyDescriptor -> public boolean isEager();1452685925;Return whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching.;public boolean isEager() {_		return this.eager__	};return,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,boolean,is,eager,return,this,eager
DependencyDescriptor -> public boolean isEager();1455295525;Return whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching.;public boolean isEager() {_		return this.eager__	};return,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,boolean,is,eager,return,this,eager
DependencyDescriptor -> public boolean isEager();1455889195;Return whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching.;public boolean isEager() {_		return this.eager__	};return,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,boolean,is,eager,return,this,eager
DependencyDescriptor -> public boolean isEager();1456432609;Return whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching.;public boolean isEager() {_		return this.eager__	};return,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,boolean,is,eager,return,this,eager
DependencyDescriptor -> public boolean isEager();1458755547;Return whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching.;public boolean isEager() {_		return this.eager__	};return,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,boolean,is,eager,return,this,eager
DependencyDescriptor -> public boolean isEager();1466893134;Return whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching.;public boolean isEager() {_		return this.eager__	};return,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,boolean,is,eager,return,this,eager
DependencyDescriptor -> public boolean isEager();1469030751;Return whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching.;public boolean isEager() {_		return this.eager__	};return,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,boolean,is,eager,return,this,eager
DependencyDescriptor -> public boolean isEager();1481647138;Return whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching.;public boolean isEager() {_		return this.eager__	};return,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,boolean,is,eager,return,this,eager
DependencyDescriptor -> public boolean isEager();1482091448;Return whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching.;public boolean isEager() {_		return this.eager__	};return,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,boolean,is,eager,return,this,eager
DependencyDescriptor -> public boolean isEager();1485277217;Return whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching.;public boolean isEager() {_		return this.eager__	};return,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,boolean,is,eager,return,this,eager
DependencyDescriptor -> public boolean isEager();1485300605;Return whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching.;public boolean isEager() {_		return this.eager__	};return,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,boolean,is,eager,return,this,eager
DependencyDescriptor -> public boolean isEager();1495868221;Return whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching.;public boolean isEager() {_		return this.eager__	};return,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,boolean,is,eager,return,this,eager
DependencyDescriptor -> public boolean isEager();1496837955;Return whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching.;public boolean isEager() {_		return this.eager__	};return,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,boolean,is,eager,return,this,eager
DependencyDescriptor -> public boolean isEager();1498780456;Return whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching.;public boolean isEager() {_		return this.eager__	};return,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,boolean,is,eager,return,this,eager
DependencyDescriptor -> public boolean isEager();1503007895;Return whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching.;public boolean isEager() {_		return this.eager__	};return,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,boolean,is,eager,return,this,eager
DependencyDescriptor -> public boolean isEager();1503272000;Return whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching.;public boolean isEager() {_		return this.eager__	};return,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,boolean,is,eager,return,this,eager
DependencyDescriptor -> public boolean isEager();1503411745;Return whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching.;public boolean isEager() {_		return this.eager__	};return,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,boolean,is,eager,return,this,eager
DependencyDescriptor -> public boolean isEager();1506551472;Return whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching.;public boolean isEager() {_		return this.eager__	};return,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,boolean,is,eager,return,this,eager
DependencyDescriptor -> public boolean isEager();1530174524;Return whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching.;public boolean isEager() {_		return this.eager__	};return,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,boolean,is,eager,return,this,eager
DependencyDescriptor -> public boolean isEager();1530198749;Return whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching.;public boolean isEager() {_		return this.eager__	};return,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,boolean,is,eager,return,this,eager
DependencyDescriptor -> public boolean isEager();1530201727;Return whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching.;public boolean isEager() {_		return this.eager__	};return,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,boolean,is,eager,return,this,eager
DependencyDescriptor -> public boolean isEager();1532274593;Return whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching.;public boolean isEager() {_		return this.eager__	};return,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,boolean,is,eager,return,this,eager
DependencyDescriptor -> public boolean isEager();1532332488;Return whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching.;public boolean isEager() {_		return this.eager__	};return,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,boolean,is,eager,return,this,eager
DependencyDescriptor -> public boolean isEager();1532385723;Return whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching.;public boolean isEager() {_		return this.eager__	};return,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,boolean,is,eager,return,this,eager
DependencyDescriptor -> public boolean isEager();1535039984;Return whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching.;public boolean isEager() {_		return this.eager__	};return,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,boolean,is,eager,return,this,eager
DependencyDescriptor -> public boolean isEager();1536855799;Return whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching.;public boolean isEager() {_		return this.eager__	};return,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,boolean,is,eager,return,this,eager
DependencyDescriptor -> public boolean isEager();1546963887;Return whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching.;public boolean isEager() {_		return this.eager__	};return,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,boolean,is,eager,return,this,eager
DependencyDescriptor -> public DependencyDescriptor(DependencyDescriptor original);1346421549;Copy constructor._@param original the original descriptor to create a copy from;public DependencyDescriptor(DependencyDescriptor original) {_		this.methodParameter = original.methodParameter__		this.field = original.field__		this.declaringClass = original.declaringClass__		this.methodName = original.methodName__		this.parameterTypes = original.parameterTypes__		this.parameterIndex = original.parameterIndex__		this.fieldName = original.fieldName__		this.required = original.required__		this.eager = original.eager__		this.nestingLevel = original.nestingLevel__		this.fieldAnnotations = original.fieldAnnotations__	};copy,constructor,param,original,the,original,descriptor,to,create,a,copy,from;public,dependency,descriptor,dependency,descriptor,original,this,method,parameter,original,method,parameter,this,field,original,field,this,declaring,class,original,declaring,class,this,method,name,original,method,name,this,parameter,types,original,parameter,types,this,parameter,index,original,parameter,index,this,field,name,original,field,name,this,required,original,required,this,eager,original,eager,this,nesting,level,original,nesting,level,this,field,annotations,original,field,annotations
DependencyDescriptor -> public DependencyDescriptor(DependencyDescriptor original);1350077654;Copy constructor._@param original the original descriptor to create a copy from;public DependencyDescriptor(DependencyDescriptor original) {_		this.methodParameter = (original.methodParameter != null ? new MethodParameter(original.methodParameter) : null)__		this.field = original.field__		this.declaringClass = original.declaringClass__		this.methodName = original.methodName__		this.parameterTypes = original.parameterTypes__		this.parameterIndex = original.parameterIndex__		this.fieldName = original.fieldName__		this.required = original.required__		this.eager = original.eager__		this.nestingLevel = original.nestingLevel__		this.fieldAnnotations = original.fieldAnnotations__	};copy,constructor,param,original,the,original,descriptor,to,create,a,copy,from;public,dependency,descriptor,dependency,descriptor,original,this,method,parameter,original,method,parameter,null,new,method,parameter,original,method,parameter,null,this,field,original,field,this,declaring,class,original,declaring,class,this,method,name,original,method,name,this,parameter,types,original,parameter,types,this,parameter,index,original,parameter,index,this,field,name,original,field,name,this,required,original,required,this,eager,original,eager,this,nesting,level,original,nesting,level,this,field,annotations,original,field,annotations
DependencyDescriptor -> public DependencyDescriptor(DependencyDescriptor original);1356735495;Copy constructor._@param original the original descriptor to create a copy from;public DependencyDescriptor(DependencyDescriptor original) {_		this.methodParameter = (original.methodParameter != null ? new MethodParameter(original.methodParameter) : null)__		this.field = original.field__		this.declaringClass = original.declaringClass__		this.methodName = original.methodName__		this.parameterTypes = original.parameterTypes__		this.parameterIndex = original.parameterIndex__		this.fieldName = original.fieldName__		this.required = original.required__		this.eager = original.eager__		this.nestingLevel = original.nestingLevel__		this.fieldAnnotations = original.fieldAnnotations__	};copy,constructor,param,original,the,original,descriptor,to,create,a,copy,from;public,dependency,descriptor,dependency,descriptor,original,this,method,parameter,original,method,parameter,null,new,method,parameter,original,method,parameter,null,this,field,original,field,this,declaring,class,original,declaring,class,this,method,name,original,method,name,this,parameter,types,original,parameter,types,this,parameter,index,original,parameter,index,this,field,name,original,field,name,this,required,original,required,this,eager,original,eager,this,nesting,level,original,nesting,level,this,field,annotations,original,field,annotations
DependencyDescriptor -> public DependencyDescriptor(DependencyDescriptor original);1377641038;Copy constructor._@param original the original descriptor to create a copy from;public DependencyDescriptor(DependencyDescriptor original) {_		this.methodParameter = (original.methodParameter != null ? new MethodParameter(original.methodParameter) : null)__		this.field = original.field__		this.declaringClass = original.declaringClass__		this.methodName = original.methodName__		this.parameterTypes = original.parameterTypes__		this.parameterIndex = original.parameterIndex__		this.fieldName = original.fieldName__		this.required = original.required__		this.eager = original.eager__		this.nestingLevel = original.nestingLevel__		this.fieldAnnotations = original.fieldAnnotations__	};copy,constructor,param,original,the,original,descriptor,to,create,a,copy,from;public,dependency,descriptor,dependency,descriptor,original,this,method,parameter,original,method,parameter,null,new,method,parameter,original,method,parameter,null,this,field,original,field,this,declaring,class,original,declaring,class,this,method,name,original,method,name,this,parameter,types,original,parameter,types,this,parameter,index,original,parameter,index,this,field,name,original,field,name,this,required,original,required,this,eager,original,eager,this,nesting,level,original,nesting,level,this,field,annotations,original,field,annotations
DependencyDescriptor -> public DependencyDescriptor(DependencyDescriptor original);1381788683;Copy constructor._@param original the original descriptor to create a copy from;public DependencyDescriptor(DependencyDescriptor original) {_		this.methodParameter = (original.methodParameter != null ? new MethodParameter(original.methodParameter) : null)__		this.field = original.field__		this.declaringClass = original.declaringClass__		this.containingClass = original.containingClass__		this.methodName = original.methodName__		this.parameterTypes = original.parameterTypes__		this.parameterIndex = original.parameterIndex__		this.fieldName = original.fieldName__		this.required = original.required__		this.eager = original.eager__		this.nestingLevel = original.nestingLevel__		this.fieldAnnotations = original.fieldAnnotations__	};copy,constructor,param,original,the,original,descriptor,to,create,a,copy,from;public,dependency,descriptor,dependency,descriptor,original,this,method,parameter,original,method,parameter,null,new,method,parameter,original,method,parameter,null,this,field,original,field,this,declaring,class,original,declaring,class,this,containing,class,original,containing,class,this,method,name,original,method,name,this,parameter,types,original,parameter,types,this,parameter,index,original,parameter,index,this,field,name,original,field,name,this,required,original,required,this,eager,original,eager,this,nesting,level,original,nesting,level,this,field,annotations,original,field,annotations
DependencyDescriptor -> public DependencyDescriptor(DependencyDescriptor original);1382716358;Copy constructor._@param original the original descriptor to create a copy from;public DependencyDescriptor(DependencyDescriptor original) {_		this.methodParameter = (original.methodParameter != null ? new MethodParameter(original.methodParameter) : null)__		this.field = original.field__		this.declaringClass = original.declaringClass__		this.containingClass = original.containingClass__		this.methodName = original.methodName__		this.parameterTypes = original.parameterTypes__		this.parameterIndex = original.parameterIndex__		this.fieldName = original.fieldName__		this.required = original.required__		this.eager = original.eager__		this.nestingLevel = original.nestingLevel__		this.fieldAnnotations = original.fieldAnnotations__	};copy,constructor,param,original,the,original,descriptor,to,create,a,copy,from;public,dependency,descriptor,dependency,descriptor,original,this,method,parameter,original,method,parameter,null,new,method,parameter,original,method,parameter,null,this,field,original,field,this,declaring,class,original,declaring,class,this,containing,class,original,containing,class,this,method,name,original,method,name,this,parameter,types,original,parameter,types,this,parameter,index,original,parameter,index,this,field,name,original,field,name,this,required,original,required,this,eager,original,eager,this,nesting,level,original,nesting,level,this,field,annotations,original,field,annotations
DependencyDescriptor -> public DependencyDescriptor(DependencyDescriptor original);1385412762;Copy constructor._@param original the original descriptor to create a copy from;public DependencyDescriptor(DependencyDescriptor original) {_		this.methodParameter = (original.methodParameter != null ? new MethodParameter(original.methodParameter) : null)__		this.field = original.field__		this.declaringClass = original.declaringClass__		this.containingClass = original.containingClass__		this.methodName = original.methodName__		this.parameterTypes = original.parameterTypes__		this.parameterIndex = original.parameterIndex__		this.fieldName = original.fieldName__		this.required = original.required__		this.eager = original.eager__		this.nestingLevel = original.nestingLevel__		this.fieldAnnotations = original.fieldAnnotations__	};copy,constructor,param,original,the,original,descriptor,to,create,a,copy,from;public,dependency,descriptor,dependency,descriptor,original,this,method,parameter,original,method,parameter,null,new,method,parameter,original,method,parameter,null,this,field,original,field,this,declaring,class,original,declaring,class,this,containing,class,original,containing,class,this,method,name,original,method,name,this,parameter,types,original,parameter,types,this,parameter,index,original,parameter,index,this,field,name,original,field,name,this,required,original,required,this,eager,original,eager,this,nesting,level,original,nesting,level,this,field,annotations,original,field,annotations
DependencyDescriptor -> public DependencyDescriptor(DependencyDescriptor original);1402061390;Copy constructor._@param original the original descriptor to create a copy from;public DependencyDescriptor(DependencyDescriptor original) {_		this.methodParameter = (original.methodParameter != null ? new MethodParameter(original.methodParameter) : null)__		this.field = original.field__		this.declaringClass = original.declaringClass__		this.containingClass = original.containingClass__		this.methodName = original.methodName__		this.parameterTypes = original.parameterTypes__		this.parameterIndex = original.parameterIndex__		this.fieldName = original.fieldName__		this.required = original.required__		this.eager = original.eager__		this.nestingLevel = original.nestingLevel__		this.fieldAnnotations = original.fieldAnnotations__	};copy,constructor,param,original,the,original,descriptor,to,create,a,copy,from;public,dependency,descriptor,dependency,descriptor,original,this,method,parameter,original,method,parameter,null,new,method,parameter,original,method,parameter,null,this,field,original,field,this,declaring,class,original,declaring,class,this,containing,class,original,containing,class,this,method,name,original,method,name,this,parameter,types,original,parameter,types,this,parameter,index,original,parameter,index,this,field,name,original,field,name,this,required,original,required,this,eager,original,eager,this,nesting,level,original,nesting,level,this,field,annotations,original,field,annotations
DependencyDescriptor -> public DependencyDescriptor(DependencyDescriptor original);1452685925;Copy constructor._@param original the original descriptor to create a copy from;public DependencyDescriptor(DependencyDescriptor original) {_		this.methodParameter = (original.methodParameter != null ? new MethodParameter(original.methodParameter) : null)__		this.field = original.field__		this.declaringClass = original.declaringClass__		this.containingClass = original.containingClass__		this.methodName = original.methodName__		this.parameterTypes = original.parameterTypes__		this.parameterIndex = original.parameterIndex__		this.fieldName = original.fieldName__		this.required = original.required__		this.eager = original.eager__		this.nestingLevel = original.nestingLevel__		this.fieldAnnotations = original.fieldAnnotations__	};copy,constructor,param,original,the,original,descriptor,to,create,a,copy,from;public,dependency,descriptor,dependency,descriptor,original,this,method,parameter,original,method,parameter,null,new,method,parameter,original,method,parameter,null,this,field,original,field,this,declaring,class,original,declaring,class,this,containing,class,original,containing,class,this,method,name,original,method,name,this,parameter,types,original,parameter,types,this,parameter,index,original,parameter,index,this,field,name,original,field,name,this,required,original,required,this,eager,original,eager,this,nesting,level,original,nesting,level,this,field,annotations,original,field,annotations
DependencyDescriptor -> public DependencyDescriptor(DependencyDescriptor original);1455295525;Copy constructor._@param original the original descriptor to create a copy from;public DependencyDescriptor(DependencyDescriptor original) {_		this.methodParameter = (original.methodParameter != null ? new MethodParameter(original.methodParameter) : null)__		this.field = original.field__		this.declaringClass = original.declaringClass__		this.containingClass = original.containingClass__		this.methodName = original.methodName__		this.parameterTypes = original.parameterTypes__		this.parameterIndex = original.parameterIndex__		this.fieldName = original.fieldName__		this.required = original.required__		this.eager = original.eager__		this.nestingLevel = original.nestingLevel__		this.fieldAnnotations = original.fieldAnnotations__	};copy,constructor,param,original,the,original,descriptor,to,create,a,copy,from;public,dependency,descriptor,dependency,descriptor,original,this,method,parameter,original,method,parameter,null,new,method,parameter,original,method,parameter,null,this,field,original,field,this,declaring,class,original,declaring,class,this,containing,class,original,containing,class,this,method,name,original,method,name,this,parameter,types,original,parameter,types,this,parameter,index,original,parameter,index,this,field,name,original,field,name,this,required,original,required,this,eager,original,eager,this,nesting,level,original,nesting,level,this,field,annotations,original,field,annotations
DependencyDescriptor -> public DependencyDescriptor(DependencyDescriptor original);1455889195;Copy constructor._@param original the original descriptor to create a copy from;public DependencyDescriptor(DependencyDescriptor original) {_		this.methodParameter = (original.methodParameter != null ? new MethodParameter(original.methodParameter) : null)__		this.field = original.field__		this.declaringClass = original.declaringClass__		this.containingClass = original.containingClass__		this.methodName = original.methodName__		this.parameterTypes = original.parameterTypes__		this.parameterIndex = original.parameterIndex__		this.fieldName = original.fieldName__		this.required = original.required__		this.eager = original.eager__		this.nestingLevel = original.nestingLevel__		this.fieldAnnotations = original.fieldAnnotations__	};copy,constructor,param,original,the,original,descriptor,to,create,a,copy,from;public,dependency,descriptor,dependency,descriptor,original,this,method,parameter,original,method,parameter,null,new,method,parameter,original,method,parameter,null,this,field,original,field,this,declaring,class,original,declaring,class,this,containing,class,original,containing,class,this,method,name,original,method,name,this,parameter,types,original,parameter,types,this,parameter,index,original,parameter,index,this,field,name,original,field,name,this,required,original,required,this,eager,original,eager,this,nesting,level,original,nesting,level,this,field,annotations,original,field,annotations
DependencyDescriptor -> public DependencyDescriptor(DependencyDescriptor original);1456432609;Copy constructor._@param original the original descriptor to create a copy from;public DependencyDescriptor(DependencyDescriptor original) {_		super(original)__		this.declaringClass = original.declaringClass__		this.methodName = original.methodName__		this.parameterTypes = original.parameterTypes__		this.parameterIndex = original.parameterIndex__		this.fieldName = original.fieldName__		this.containingClass = original.containingClass__		this.required = original.required__		this.eager = original.eager__		this.nestingLevel = original.nestingLevel__	};copy,constructor,param,original,the,original,descriptor,to,create,a,copy,from;public,dependency,descriptor,dependency,descriptor,original,super,original,this,declaring,class,original,declaring,class,this,method,name,original,method,name,this,parameter,types,original,parameter,types,this,parameter,index,original,parameter,index,this,field,name,original,field,name,this,containing,class,original,containing,class,this,required,original,required,this,eager,original,eager,this,nesting,level,original,nesting,level
DependencyDescriptor -> public DependencyDescriptor(DependencyDescriptor original);1458755547;Copy constructor._@param original the original descriptor to create a copy from;public DependencyDescriptor(DependencyDescriptor original) {_		super(original)__		this.declaringClass = original.declaringClass__		this.methodName = original.methodName__		this.parameterTypes = original.parameterTypes__		this.parameterIndex = original.parameterIndex__		this.fieldName = original.fieldName__		this.containingClass = original.containingClass__		this.required = original.required__		this.eager = original.eager__		this.nestingLevel = original.nestingLevel__	};copy,constructor,param,original,the,original,descriptor,to,create,a,copy,from;public,dependency,descriptor,dependency,descriptor,original,super,original,this,declaring,class,original,declaring,class,this,method,name,original,method,name,this,parameter,types,original,parameter,types,this,parameter,index,original,parameter,index,this,field,name,original,field,name,this,containing,class,original,containing,class,this,required,original,required,this,eager,original,eager,this,nesting,level,original,nesting,level
DependencyDescriptor -> public DependencyDescriptor(DependencyDescriptor original);1466893134;Copy constructor._@param original the original descriptor to create a copy from;public DependencyDescriptor(DependencyDescriptor original) {_		super(original)__		this.declaringClass = original.declaringClass__		this.methodName = original.methodName__		this.parameterTypes = original.parameterTypes__		this.parameterIndex = original.parameterIndex__		this.fieldName = original.fieldName__		this.containingClass = original.containingClass__		this.required = original.required__		this.eager = original.eager__		this.nestingLevel = original.nestingLevel__	};copy,constructor,param,original,the,original,descriptor,to,create,a,copy,from;public,dependency,descriptor,dependency,descriptor,original,super,original,this,declaring,class,original,declaring,class,this,method,name,original,method,name,this,parameter,types,original,parameter,types,this,parameter,index,original,parameter,index,this,field,name,original,field,name,this,containing,class,original,containing,class,this,required,original,required,this,eager,original,eager,this,nesting,level,original,nesting,level
DependencyDescriptor -> public DependencyDescriptor(DependencyDescriptor original);1469030751;Copy constructor._@param original the original descriptor to create a copy from;public DependencyDescriptor(DependencyDescriptor original) {_		super(original)__		this.declaringClass = original.declaringClass__		this.methodName = original.methodName__		this.parameterTypes = original.parameterTypes__		this.parameterIndex = original.parameterIndex__		this.fieldName = original.fieldName__		this.containingClass = original.containingClass__		this.required = original.required__		this.eager = original.eager__		this.nestingLevel = original.nestingLevel__	};copy,constructor,param,original,the,original,descriptor,to,create,a,copy,from;public,dependency,descriptor,dependency,descriptor,original,super,original,this,declaring,class,original,declaring,class,this,method,name,original,method,name,this,parameter,types,original,parameter,types,this,parameter,index,original,parameter,index,this,field,name,original,field,name,this,containing,class,original,containing,class,this,required,original,required,this,eager,original,eager,this,nesting,level,original,nesting,level
DependencyDescriptor -> public DependencyDescriptor(DependencyDescriptor original);1481647138;Copy constructor._@param original the original descriptor to create a copy from;public DependencyDescriptor(DependencyDescriptor original) {_		super(original)___		this.declaringClass = original.declaringClass__		this.methodName = original.methodName__		this.parameterTypes = original.parameterTypes__		this.parameterIndex = original.parameterIndex__		this.fieldName = original.fieldName__		this.containingClass = original.containingClass__		this.required = original.required__		this.eager = original.eager__		this.nestingLevel = original.nestingLevel__	};copy,constructor,param,original,the,original,descriptor,to,create,a,copy,from;public,dependency,descriptor,dependency,descriptor,original,super,original,this,declaring,class,original,declaring,class,this,method,name,original,method,name,this,parameter,types,original,parameter,types,this,parameter,index,original,parameter,index,this,field,name,original,field,name,this,containing,class,original,containing,class,this,required,original,required,this,eager,original,eager,this,nesting,level,original,nesting,level
DependencyDescriptor -> public DependencyDescriptor(DependencyDescriptor original);1482091448;Copy constructor._@param original the original descriptor to create a copy from;public DependencyDescriptor(DependencyDescriptor original) {_		super(original)___		this.declaringClass = original.declaringClass__		this.methodName = original.methodName__		this.parameterTypes = original.parameterTypes__		this.parameterIndex = original.parameterIndex__		this.fieldName = original.fieldName__		this.containingClass = original.containingClass__		this.required = original.required__		this.eager = original.eager__		this.nestingLevel = original.nestingLevel__	};copy,constructor,param,original,the,original,descriptor,to,create,a,copy,from;public,dependency,descriptor,dependency,descriptor,original,super,original,this,declaring,class,original,declaring,class,this,method,name,original,method,name,this,parameter,types,original,parameter,types,this,parameter,index,original,parameter,index,this,field,name,original,field,name,this,containing,class,original,containing,class,this,required,original,required,this,eager,original,eager,this,nesting,level,original,nesting,level
DependencyDescriptor -> public DependencyDescriptor(DependencyDescriptor original);1485277217;Copy constructor._@param original the original descriptor to create a copy from;public DependencyDescriptor(DependencyDescriptor original) {_		super(original)___		this.declaringClass = original.declaringClass__		this.methodName = original.methodName__		this.parameterTypes = original.parameterTypes__		this.parameterIndex = original.parameterIndex__		this.fieldName = original.fieldName__		this.containingClass = original.containingClass__		this.required = original.required__		this.eager = original.eager__		this.nestingLevel = original.nestingLevel__	};copy,constructor,param,original,the,original,descriptor,to,create,a,copy,from;public,dependency,descriptor,dependency,descriptor,original,super,original,this,declaring,class,original,declaring,class,this,method,name,original,method,name,this,parameter,types,original,parameter,types,this,parameter,index,original,parameter,index,this,field,name,original,field,name,this,containing,class,original,containing,class,this,required,original,required,this,eager,original,eager,this,nesting,level,original,nesting,level
DependencyDescriptor -> public DependencyDescriptor(DependencyDescriptor original);1485300605;Copy constructor._@param original the original descriptor to create a copy from;public DependencyDescriptor(DependencyDescriptor original) {_		super(original)___		this.declaringClass = original.declaringClass__		this.methodName = original.methodName__		this.parameterTypes = original.parameterTypes__		this.parameterIndex = original.parameterIndex__		this.fieldName = original.fieldName__		this.containingClass = original.containingClass__		this.required = original.required__		this.eager = original.eager__		this.nestingLevel = original.nestingLevel__	};copy,constructor,param,original,the,original,descriptor,to,create,a,copy,from;public,dependency,descriptor,dependency,descriptor,original,super,original,this,declaring,class,original,declaring,class,this,method,name,original,method,name,this,parameter,types,original,parameter,types,this,parameter,index,original,parameter,index,this,field,name,original,field,name,this,containing,class,original,containing,class,this,required,original,required,this,eager,original,eager,this,nesting,level,original,nesting,level
DependencyDescriptor -> public DependencyDescriptor(DependencyDescriptor original);1495868221;Copy constructor._@param original the original descriptor to create a copy from;public DependencyDescriptor(DependencyDescriptor original) {_		super(original)___		this.declaringClass = original.declaringClass__		this.methodName = original.methodName__		this.parameterTypes = original.parameterTypes__		this.parameterIndex = original.parameterIndex__		this.fieldName = original.fieldName__		this.containingClass = original.containingClass__		this.required = original.required__		this.eager = original.eager__		this.nestingLevel = original.nestingLevel__	};copy,constructor,param,original,the,original,descriptor,to,create,a,copy,from;public,dependency,descriptor,dependency,descriptor,original,super,original,this,declaring,class,original,declaring,class,this,method,name,original,method,name,this,parameter,types,original,parameter,types,this,parameter,index,original,parameter,index,this,field,name,original,field,name,this,containing,class,original,containing,class,this,required,original,required,this,eager,original,eager,this,nesting,level,original,nesting,level
DependencyDescriptor -> public DependencyDescriptor(DependencyDescriptor original);1496837955;Copy constructor._@param original the original descriptor to create a copy from;public DependencyDescriptor(DependencyDescriptor original) {_		super(original)___		this.declaringClass = original.declaringClass__		this.methodName = original.methodName__		this.parameterTypes = original.parameterTypes__		this.parameterIndex = original.parameterIndex__		this.fieldName = original.fieldName__		this.containingClass = original.containingClass__		this.required = original.required__		this.eager = original.eager__		this.nestingLevel = original.nestingLevel__	};copy,constructor,param,original,the,original,descriptor,to,create,a,copy,from;public,dependency,descriptor,dependency,descriptor,original,super,original,this,declaring,class,original,declaring,class,this,method,name,original,method,name,this,parameter,types,original,parameter,types,this,parameter,index,original,parameter,index,this,field,name,original,field,name,this,containing,class,original,containing,class,this,required,original,required,this,eager,original,eager,this,nesting,level,original,nesting,level
DependencyDescriptor -> public DependencyDescriptor(DependencyDescriptor original);1498780456;Copy constructor._@param original the original descriptor to create a copy from;public DependencyDescriptor(DependencyDescriptor original) {_		super(original)___		this.declaringClass = original.declaringClass__		this.methodName = original.methodName__		this.parameterTypes = original.parameterTypes__		this.parameterIndex = original.parameterIndex__		this.fieldName = original.fieldName__		this.containingClass = original.containingClass__		this.required = original.required__		this.eager = original.eager__		this.nestingLevel = original.nestingLevel__	};copy,constructor,param,original,the,original,descriptor,to,create,a,copy,from;public,dependency,descriptor,dependency,descriptor,original,super,original,this,declaring,class,original,declaring,class,this,method,name,original,method,name,this,parameter,types,original,parameter,types,this,parameter,index,original,parameter,index,this,field,name,original,field,name,this,containing,class,original,containing,class,this,required,original,required,this,eager,original,eager,this,nesting,level,original,nesting,level
DependencyDescriptor -> public DependencyDescriptor(DependencyDescriptor original);1503007895;Copy constructor._@param original the original descriptor to create a copy from;public DependencyDescriptor(DependencyDescriptor original) {_		super(original)___		this.declaringClass = original.declaringClass__		this.methodName = original.methodName__		this.parameterTypes = original.parameterTypes__		this.parameterIndex = original.parameterIndex__		this.fieldName = original.fieldName__		this.containingClass = original.containingClass__		this.required = original.required__		this.eager = original.eager__		this.nestingLevel = original.nestingLevel__	};copy,constructor,param,original,the,original,descriptor,to,create,a,copy,from;public,dependency,descriptor,dependency,descriptor,original,super,original,this,declaring,class,original,declaring,class,this,method,name,original,method,name,this,parameter,types,original,parameter,types,this,parameter,index,original,parameter,index,this,field,name,original,field,name,this,containing,class,original,containing,class,this,required,original,required,this,eager,original,eager,this,nesting,level,original,nesting,level
DependencyDescriptor -> public DependencyDescriptor(DependencyDescriptor original);1503272000;Copy constructor._@param original the original descriptor to create a copy from;public DependencyDescriptor(DependencyDescriptor original) {_		super(original)___		this.declaringClass = original.declaringClass__		this.methodName = original.methodName__		this.parameterTypes = original.parameterTypes__		this.parameterIndex = original.parameterIndex__		this.fieldName = original.fieldName__		this.containingClass = original.containingClass__		this.required = original.required__		this.eager = original.eager__		this.nestingLevel = original.nestingLevel__	};copy,constructor,param,original,the,original,descriptor,to,create,a,copy,from;public,dependency,descriptor,dependency,descriptor,original,super,original,this,declaring,class,original,declaring,class,this,method,name,original,method,name,this,parameter,types,original,parameter,types,this,parameter,index,original,parameter,index,this,field,name,original,field,name,this,containing,class,original,containing,class,this,required,original,required,this,eager,original,eager,this,nesting,level,original,nesting,level
DependencyDescriptor -> public DependencyDescriptor(DependencyDescriptor original);1503411745;Copy constructor._@param original the original descriptor to create a copy from;public DependencyDescriptor(DependencyDescriptor original) {_		super(original)___		this.declaringClass = original.declaringClass__		this.methodName = original.methodName__		this.parameterTypes = original.parameterTypes__		this.parameterIndex = original.parameterIndex__		this.fieldName = original.fieldName__		this.containingClass = original.containingClass__		this.required = original.required__		this.eager = original.eager__		this.nestingLevel = original.nestingLevel__	};copy,constructor,param,original,the,original,descriptor,to,create,a,copy,from;public,dependency,descriptor,dependency,descriptor,original,super,original,this,declaring,class,original,declaring,class,this,method,name,original,method,name,this,parameter,types,original,parameter,types,this,parameter,index,original,parameter,index,this,field,name,original,field,name,this,containing,class,original,containing,class,this,required,original,required,this,eager,original,eager,this,nesting,level,original,nesting,level
DependencyDescriptor -> public DependencyDescriptor(DependencyDescriptor original);1506551472;Copy constructor._@param original the original descriptor to create a copy from;public DependencyDescriptor(DependencyDescriptor original) {_		super(original)___		this.declaringClass = original.declaringClass__		this.methodName = original.methodName__		this.parameterTypes = original.parameterTypes__		this.parameterIndex = original.parameterIndex__		this.fieldName = original.fieldName__		this.containingClass = original.containingClass__		this.required = original.required__		this.eager = original.eager__		this.nestingLevel = original.nestingLevel__	};copy,constructor,param,original,the,original,descriptor,to,create,a,copy,from;public,dependency,descriptor,dependency,descriptor,original,super,original,this,declaring,class,original,declaring,class,this,method,name,original,method,name,this,parameter,types,original,parameter,types,this,parameter,index,original,parameter,index,this,field,name,original,field,name,this,containing,class,original,containing,class,this,required,original,required,this,eager,original,eager,this,nesting,level,original,nesting,level
DependencyDescriptor -> public DependencyDescriptor(DependencyDescriptor original);1530174524;Copy constructor._@param original the original descriptor to create a copy from;public DependencyDescriptor(DependencyDescriptor original) {_		super(original)___		this.declaringClass = original.declaringClass__		this.methodName = original.methodName__		this.parameterTypes = original.parameterTypes__		this.parameterIndex = original.parameterIndex__		this.fieldName = original.fieldName__		this.containingClass = original.containingClass__		this.required = original.required__		this.eager = original.eager__		this.nestingLevel = original.nestingLevel__	};copy,constructor,param,original,the,original,descriptor,to,create,a,copy,from;public,dependency,descriptor,dependency,descriptor,original,super,original,this,declaring,class,original,declaring,class,this,method,name,original,method,name,this,parameter,types,original,parameter,types,this,parameter,index,original,parameter,index,this,field,name,original,field,name,this,containing,class,original,containing,class,this,required,original,required,this,eager,original,eager,this,nesting,level,original,nesting,level
DependencyDescriptor -> public DependencyDescriptor(DependencyDescriptor original);1530198749;Copy constructor._@param original the original descriptor to create a copy from;public DependencyDescriptor(DependencyDescriptor original) {_		super(original)___		this.declaringClass = original.declaringClass__		this.methodName = original.methodName__		this.parameterTypes = original.parameterTypes__		this.parameterIndex = original.parameterIndex__		this.fieldName = original.fieldName__		this.containingClass = original.containingClass__		this.required = original.required__		this.eager = original.eager__		this.nestingLevel = original.nestingLevel__	};copy,constructor,param,original,the,original,descriptor,to,create,a,copy,from;public,dependency,descriptor,dependency,descriptor,original,super,original,this,declaring,class,original,declaring,class,this,method,name,original,method,name,this,parameter,types,original,parameter,types,this,parameter,index,original,parameter,index,this,field,name,original,field,name,this,containing,class,original,containing,class,this,required,original,required,this,eager,original,eager,this,nesting,level,original,nesting,level
DependencyDescriptor -> public DependencyDescriptor(DependencyDescriptor original);1530201727;Copy constructor._@param original the original descriptor to create a copy from;public DependencyDescriptor(DependencyDescriptor original) {_		super(original)___		this.declaringClass = original.declaringClass__		this.methodName = original.methodName__		this.parameterTypes = original.parameterTypes__		this.parameterIndex = original.parameterIndex__		this.fieldName = original.fieldName__		this.containingClass = original.containingClass__		this.required = original.required__		this.eager = original.eager__		this.nestingLevel = original.nestingLevel__	};copy,constructor,param,original,the,original,descriptor,to,create,a,copy,from;public,dependency,descriptor,dependency,descriptor,original,super,original,this,declaring,class,original,declaring,class,this,method,name,original,method,name,this,parameter,types,original,parameter,types,this,parameter,index,original,parameter,index,this,field,name,original,field,name,this,containing,class,original,containing,class,this,required,original,required,this,eager,original,eager,this,nesting,level,original,nesting,level
DependencyDescriptor -> public DependencyDescriptor(DependencyDescriptor original);1532274593;Copy constructor._@param original the original descriptor to create a copy from;public DependencyDescriptor(DependencyDescriptor original) {_		super(original)___		this.declaringClass = original.declaringClass__		this.methodName = original.methodName__		this.parameterTypes = original.parameterTypes__		this.parameterIndex = original.parameterIndex__		this.fieldName = original.fieldName__		this.containingClass = original.containingClass__		this.required = original.required__		this.eager = original.eager__		this.nestingLevel = original.nestingLevel__	};copy,constructor,param,original,the,original,descriptor,to,create,a,copy,from;public,dependency,descriptor,dependency,descriptor,original,super,original,this,declaring,class,original,declaring,class,this,method,name,original,method,name,this,parameter,types,original,parameter,types,this,parameter,index,original,parameter,index,this,field,name,original,field,name,this,containing,class,original,containing,class,this,required,original,required,this,eager,original,eager,this,nesting,level,original,nesting,level
DependencyDescriptor -> public DependencyDescriptor(DependencyDescriptor original);1532332488;Copy constructor._@param original the original descriptor to create a copy from;public DependencyDescriptor(DependencyDescriptor original) {_		super(original)___		this.declaringClass = original.declaringClass__		this.methodName = original.methodName__		this.parameterTypes = original.parameterTypes__		this.parameterIndex = original.parameterIndex__		this.fieldName = original.fieldName__		this.containingClass = original.containingClass__		this.required = original.required__		this.eager = original.eager__		this.nestingLevel = original.nestingLevel__	};copy,constructor,param,original,the,original,descriptor,to,create,a,copy,from;public,dependency,descriptor,dependency,descriptor,original,super,original,this,declaring,class,original,declaring,class,this,method,name,original,method,name,this,parameter,types,original,parameter,types,this,parameter,index,original,parameter,index,this,field,name,original,field,name,this,containing,class,original,containing,class,this,required,original,required,this,eager,original,eager,this,nesting,level,original,nesting,level
DependencyDescriptor -> public DependencyDescriptor(DependencyDescriptor original);1532385723;Copy constructor._@param original the original descriptor to create a copy from;public DependencyDescriptor(DependencyDescriptor original) {_		super(original)___		this.declaringClass = original.declaringClass__		this.methodName = original.methodName__		this.parameterTypes = original.parameterTypes__		this.parameterIndex = original.parameterIndex__		this.fieldName = original.fieldName__		this.containingClass = original.containingClass__		this.required = original.required__		this.eager = original.eager__		this.nestingLevel = original.nestingLevel__	};copy,constructor,param,original,the,original,descriptor,to,create,a,copy,from;public,dependency,descriptor,dependency,descriptor,original,super,original,this,declaring,class,original,declaring,class,this,method,name,original,method,name,this,parameter,types,original,parameter,types,this,parameter,index,original,parameter,index,this,field,name,original,field,name,this,containing,class,original,containing,class,this,required,original,required,this,eager,original,eager,this,nesting,level,original,nesting,level
DependencyDescriptor -> public DependencyDescriptor(DependencyDescriptor original);1535039984;Copy constructor._@param original the original descriptor to create a copy from;public DependencyDescriptor(DependencyDescriptor original) {_		super(original)___		this.declaringClass = original.declaringClass__		this.methodName = original.methodName__		this.parameterTypes = original.parameterTypes__		this.parameterIndex = original.parameterIndex__		this.fieldName = original.fieldName__		this.containingClass = original.containingClass__		this.required = original.required__		this.eager = original.eager__		this.nestingLevel = original.nestingLevel__	};copy,constructor,param,original,the,original,descriptor,to,create,a,copy,from;public,dependency,descriptor,dependency,descriptor,original,super,original,this,declaring,class,original,declaring,class,this,method,name,original,method,name,this,parameter,types,original,parameter,types,this,parameter,index,original,parameter,index,this,field,name,original,field,name,this,containing,class,original,containing,class,this,required,original,required,this,eager,original,eager,this,nesting,level,original,nesting,level
DependencyDescriptor -> public DependencyDescriptor(DependencyDescriptor original);1536855799;Copy constructor._@param original the original descriptor to create a copy from;public DependencyDescriptor(DependencyDescriptor original) {_		super(original)___		this.declaringClass = original.declaringClass__		this.methodName = original.methodName__		this.parameterTypes = original.parameterTypes__		this.parameterIndex = original.parameterIndex__		this.fieldName = original.fieldName__		this.containingClass = original.containingClass__		this.required = original.required__		this.eager = original.eager__		this.nestingLevel = original.nestingLevel__	};copy,constructor,param,original,the,original,descriptor,to,create,a,copy,from;public,dependency,descriptor,dependency,descriptor,original,super,original,this,declaring,class,original,declaring,class,this,method,name,original,method,name,this,parameter,types,original,parameter,types,this,parameter,index,original,parameter,index,this,field,name,original,field,name,this,containing,class,original,containing,class,this,required,original,required,this,eager,original,eager,this,nesting,level,original,nesting,level
DependencyDescriptor -> public DependencyDescriptor(DependencyDescriptor original);1546963887;Copy constructor._@param original the original descriptor to create a copy from;public DependencyDescriptor(DependencyDescriptor original) {_		super(original)___		this.declaringClass = original.declaringClass__		this.methodName = original.methodName__		this.parameterTypes = original.parameterTypes__		this.parameterIndex = original.parameterIndex__		this.fieldName = original.fieldName__		this.containingClass = original.containingClass__		this.required = original.required__		this.eager = original.eager__		this.nestingLevel = original.nestingLevel__	};copy,constructor,param,original,the,original,descriptor,to,create,a,copy,from;public,dependency,descriptor,dependency,descriptor,original,super,original,this,declaring,class,original,declaring,class,this,method,name,original,method,name,this,parameter,types,original,parameter,types,this,parameter,index,original,parameter,index,this,field,name,original,field,name,this,containing,class,original,containing,class,this,required,original,required,this,eager,original,eager,this,nesting,level,original,nesting,level
DependencyDescriptor -> public void initParameterNameDiscovery(@Nullable ParameterNameDiscoverer parameterNameDiscoverer);1495868221;Initialize parameter name discovery for the underlying method parameter, if any._<p>This method does not actually try to retrieve the parameter name at_this point_ it just allows discovery to happen when the application calls_{@link #getDependencyName()} (if ever).;public void initParameterNameDiscovery(@Nullable ParameterNameDiscoverer parameterNameDiscoverer) {_		if (this.methodParameter != null) {_			this.methodParameter.initParameterNameDiscovery(parameterNameDiscoverer)__		}_	};initialize,parameter,name,discovery,for,the,underlying,method,parameter,if,any,p,this,method,does,not,actually,try,to,retrieve,the,parameter,name,at,this,point,it,just,allows,discovery,to,happen,when,the,application,calls,link,get,dependency,name,if,ever;public,void,init,parameter,name,discovery,nullable,parameter,name,discoverer,parameter,name,discoverer,if,this,method,parameter,null,this,method,parameter,init,parameter,name,discovery,parameter,name,discoverer
DependencyDescriptor -> public void initParameterNameDiscovery(@Nullable ParameterNameDiscoverer parameterNameDiscoverer);1496837955;Initialize parameter name discovery for the underlying method parameter, if any._<p>This method does not actually try to retrieve the parameter name at_this point_ it just allows discovery to happen when the application calls_{@link #getDependencyName()} (if ever).;public void initParameterNameDiscovery(@Nullable ParameterNameDiscoverer parameterNameDiscoverer) {_		if (this.methodParameter != null) {_			this.methodParameter.initParameterNameDiscovery(parameterNameDiscoverer)__		}_	};initialize,parameter,name,discovery,for,the,underlying,method,parameter,if,any,p,this,method,does,not,actually,try,to,retrieve,the,parameter,name,at,this,point,it,just,allows,discovery,to,happen,when,the,application,calls,link,get,dependency,name,if,ever;public,void,init,parameter,name,discovery,nullable,parameter,name,discoverer,parameter,name,discoverer,if,this,method,parameter,null,this,method,parameter,init,parameter,name,discovery,parameter,name,discoverer
DependencyDescriptor -> public void initParameterNameDiscovery(@Nullable ParameterNameDiscoverer parameterNameDiscoverer);1498780456;Initialize parameter name discovery for the underlying method parameter, if any._<p>This method does not actually try to retrieve the parameter name at_this point_ it just allows discovery to happen when the application calls_{@link #getDependencyName()} (if ever).;public void initParameterNameDiscovery(@Nullable ParameterNameDiscoverer parameterNameDiscoverer) {_		if (this.methodParameter != null) {_			this.methodParameter.initParameterNameDiscovery(parameterNameDiscoverer)__		}_	};initialize,parameter,name,discovery,for,the,underlying,method,parameter,if,any,p,this,method,does,not,actually,try,to,retrieve,the,parameter,name,at,this,point,it,just,allows,discovery,to,happen,when,the,application,calls,link,get,dependency,name,if,ever;public,void,init,parameter,name,discovery,nullable,parameter,name,discoverer,parameter,name,discoverer,if,this,method,parameter,null,this,method,parameter,init,parameter,name,discovery,parameter,name,discoverer
DependencyDescriptor -> public void initParameterNameDiscovery(@Nullable ParameterNameDiscoverer parameterNameDiscoverer);1503007895;Initialize parameter name discovery for the underlying method parameter, if any._<p>This method does not actually try to retrieve the parameter name at_this point_ it just allows discovery to happen when the application calls_{@link #getDependencyName()} (if ever).;public void initParameterNameDiscovery(@Nullable ParameterNameDiscoverer parameterNameDiscoverer) {_		if (this.methodParameter != null) {_			this.methodParameter.initParameterNameDiscovery(parameterNameDiscoverer)__		}_	};initialize,parameter,name,discovery,for,the,underlying,method,parameter,if,any,p,this,method,does,not,actually,try,to,retrieve,the,parameter,name,at,this,point,it,just,allows,discovery,to,happen,when,the,application,calls,link,get,dependency,name,if,ever;public,void,init,parameter,name,discovery,nullable,parameter,name,discoverer,parameter,name,discoverer,if,this,method,parameter,null,this,method,parameter,init,parameter,name,discovery,parameter,name,discoverer
DependencyDescriptor -> public void initParameterNameDiscovery(@Nullable ParameterNameDiscoverer parameterNameDiscoverer);1503272000;Initialize parameter name discovery for the underlying method parameter, if any._<p>This method does not actually try to retrieve the parameter name at_this point_ it just allows discovery to happen when the application calls_{@link #getDependencyName()} (if ever).;public void initParameterNameDiscovery(@Nullable ParameterNameDiscoverer parameterNameDiscoverer) {_		if (this.methodParameter != null) {_			this.methodParameter.initParameterNameDiscovery(parameterNameDiscoverer)__		}_	};initialize,parameter,name,discovery,for,the,underlying,method,parameter,if,any,p,this,method,does,not,actually,try,to,retrieve,the,parameter,name,at,this,point,it,just,allows,discovery,to,happen,when,the,application,calls,link,get,dependency,name,if,ever;public,void,init,parameter,name,discovery,nullable,parameter,name,discoverer,parameter,name,discoverer,if,this,method,parameter,null,this,method,parameter,init,parameter,name,discovery,parameter,name,discoverer
DependencyDescriptor -> public void initParameterNameDiscovery(@Nullable ParameterNameDiscoverer parameterNameDiscoverer);1503411745;Initialize parameter name discovery for the underlying method parameter, if any._<p>This method does not actually try to retrieve the parameter name at_this point_ it just allows discovery to happen when the application calls_{@link #getDependencyName()} (if ever).;public void initParameterNameDiscovery(@Nullable ParameterNameDiscoverer parameterNameDiscoverer) {_		if (this.methodParameter != null) {_			this.methodParameter.initParameterNameDiscovery(parameterNameDiscoverer)__		}_	};initialize,parameter,name,discovery,for,the,underlying,method,parameter,if,any,p,this,method,does,not,actually,try,to,retrieve,the,parameter,name,at,this,point,it,just,allows,discovery,to,happen,when,the,application,calls,link,get,dependency,name,if,ever;public,void,init,parameter,name,discovery,nullable,parameter,name,discoverer,parameter,name,discoverer,if,this,method,parameter,null,this,method,parameter,init,parameter,name,discovery,parameter,name,discoverer
DependencyDescriptor -> public void initParameterNameDiscovery(@Nullable ParameterNameDiscoverer parameterNameDiscoverer);1506551472;Initialize parameter name discovery for the underlying method parameter, if any._<p>This method does not actually try to retrieve the parameter name at_this point_ it just allows discovery to happen when the application calls_{@link #getDependencyName()} (if ever).;public void initParameterNameDiscovery(@Nullable ParameterNameDiscoverer parameterNameDiscoverer) {_		if (this.methodParameter != null) {_			this.methodParameter.initParameterNameDiscovery(parameterNameDiscoverer)__		}_	};initialize,parameter,name,discovery,for,the,underlying,method,parameter,if,any,p,this,method,does,not,actually,try,to,retrieve,the,parameter,name,at,this,point,it,just,allows,discovery,to,happen,when,the,application,calls,link,get,dependency,name,if,ever;public,void,init,parameter,name,discovery,nullable,parameter,name,discoverer,parameter,name,discoverer,if,this,method,parameter,null,this,method,parameter,init,parameter,name,discovery,parameter,name,discoverer
DependencyDescriptor -> public void initParameterNameDiscovery(@Nullable ParameterNameDiscoverer parameterNameDiscoverer);1530174524;Initialize parameter name discovery for the underlying method parameter, if any._<p>This method does not actually try to retrieve the parameter name at_this point_ it just allows discovery to happen when the application calls_{@link #getDependencyName()} (if ever).;public void initParameterNameDiscovery(@Nullable ParameterNameDiscoverer parameterNameDiscoverer) {_		if (this.methodParameter != null) {_			this.methodParameter.initParameterNameDiscovery(parameterNameDiscoverer)__		}_	};initialize,parameter,name,discovery,for,the,underlying,method,parameter,if,any,p,this,method,does,not,actually,try,to,retrieve,the,parameter,name,at,this,point,it,just,allows,discovery,to,happen,when,the,application,calls,link,get,dependency,name,if,ever;public,void,init,parameter,name,discovery,nullable,parameter,name,discoverer,parameter,name,discoverer,if,this,method,parameter,null,this,method,parameter,init,parameter,name,discovery,parameter,name,discoverer
DependencyDescriptor -> public void initParameterNameDiscovery(@Nullable ParameterNameDiscoverer parameterNameDiscoverer);1530198749;Initialize parameter name discovery for the underlying method parameter, if any._<p>This method does not actually try to retrieve the parameter name at_this point_ it just allows discovery to happen when the application calls_{@link #getDependencyName()} (if ever).;public void initParameterNameDiscovery(@Nullable ParameterNameDiscoverer parameterNameDiscoverer) {_		if (this.methodParameter != null) {_			this.methodParameter.initParameterNameDiscovery(parameterNameDiscoverer)__		}_	};initialize,parameter,name,discovery,for,the,underlying,method,parameter,if,any,p,this,method,does,not,actually,try,to,retrieve,the,parameter,name,at,this,point,it,just,allows,discovery,to,happen,when,the,application,calls,link,get,dependency,name,if,ever;public,void,init,parameter,name,discovery,nullable,parameter,name,discoverer,parameter,name,discoverer,if,this,method,parameter,null,this,method,parameter,init,parameter,name,discovery,parameter,name,discoverer
DependencyDescriptor -> public void initParameterNameDiscovery(@Nullable ParameterNameDiscoverer parameterNameDiscoverer);1530201727;Initialize parameter name discovery for the underlying method parameter, if any._<p>This method does not actually try to retrieve the parameter name at_this point_ it just allows discovery to happen when the application calls_{@link #getDependencyName()} (if ever).;public void initParameterNameDiscovery(@Nullable ParameterNameDiscoverer parameterNameDiscoverer) {_		if (this.methodParameter != null) {_			this.methodParameter.initParameterNameDiscovery(parameterNameDiscoverer)__		}_	};initialize,parameter,name,discovery,for,the,underlying,method,parameter,if,any,p,this,method,does,not,actually,try,to,retrieve,the,parameter,name,at,this,point,it,just,allows,discovery,to,happen,when,the,application,calls,link,get,dependency,name,if,ever;public,void,init,parameter,name,discovery,nullable,parameter,name,discoverer,parameter,name,discoverer,if,this,method,parameter,null,this,method,parameter,init,parameter,name,discovery,parameter,name,discoverer
DependencyDescriptor -> public void initParameterNameDiscovery(@Nullable ParameterNameDiscoverer parameterNameDiscoverer);1532274593;Initialize parameter name discovery for the underlying method parameter, if any._<p>This method does not actually try to retrieve the parameter name at_this point_ it just allows discovery to happen when the application calls_{@link #getDependencyName()} (if ever).;public void initParameterNameDiscovery(@Nullable ParameterNameDiscoverer parameterNameDiscoverer) {_		if (this.methodParameter != null) {_			this.methodParameter.initParameterNameDiscovery(parameterNameDiscoverer)__		}_	};initialize,parameter,name,discovery,for,the,underlying,method,parameter,if,any,p,this,method,does,not,actually,try,to,retrieve,the,parameter,name,at,this,point,it,just,allows,discovery,to,happen,when,the,application,calls,link,get,dependency,name,if,ever;public,void,init,parameter,name,discovery,nullable,parameter,name,discoverer,parameter,name,discoverer,if,this,method,parameter,null,this,method,parameter,init,parameter,name,discovery,parameter,name,discoverer
DependencyDescriptor -> public void initParameterNameDiscovery(@Nullable ParameterNameDiscoverer parameterNameDiscoverer);1532332488;Initialize parameter name discovery for the underlying method parameter, if any._<p>This method does not actually try to retrieve the parameter name at_this point_ it just allows discovery to happen when the application calls_{@link #getDependencyName()} (if ever).;public void initParameterNameDiscovery(@Nullable ParameterNameDiscoverer parameterNameDiscoverer) {_		if (this.methodParameter != null) {_			this.methodParameter.initParameterNameDiscovery(parameterNameDiscoverer)__		}_	};initialize,parameter,name,discovery,for,the,underlying,method,parameter,if,any,p,this,method,does,not,actually,try,to,retrieve,the,parameter,name,at,this,point,it,just,allows,discovery,to,happen,when,the,application,calls,link,get,dependency,name,if,ever;public,void,init,parameter,name,discovery,nullable,parameter,name,discoverer,parameter,name,discoverer,if,this,method,parameter,null,this,method,parameter,init,parameter,name,discovery,parameter,name,discoverer
DependencyDescriptor -> public void initParameterNameDiscovery(@Nullable ParameterNameDiscoverer parameterNameDiscoverer);1532385723;Initialize parameter name discovery for the underlying method parameter, if any._<p>This method does not actually try to retrieve the parameter name at_this point_ it just allows discovery to happen when the application calls_{@link #getDependencyName()} (if ever).;public void initParameterNameDiscovery(@Nullable ParameterNameDiscoverer parameterNameDiscoverer) {_		if (this.methodParameter != null) {_			this.methodParameter.initParameterNameDiscovery(parameterNameDiscoverer)__		}_	};initialize,parameter,name,discovery,for,the,underlying,method,parameter,if,any,p,this,method,does,not,actually,try,to,retrieve,the,parameter,name,at,this,point,it,just,allows,discovery,to,happen,when,the,application,calls,link,get,dependency,name,if,ever;public,void,init,parameter,name,discovery,nullable,parameter,name,discoverer,parameter,name,discoverer,if,this,method,parameter,null,this,method,parameter,init,parameter,name,discovery,parameter,name,discoverer
DependencyDescriptor -> public void initParameterNameDiscovery(@Nullable ParameterNameDiscoverer parameterNameDiscoverer);1535039984;Initialize parameter name discovery for the underlying method parameter, if any._<p>This method does not actually try to retrieve the parameter name at_this point_ it just allows discovery to happen when the application calls_{@link #getDependencyName()} (if ever).;public void initParameterNameDiscovery(@Nullable ParameterNameDiscoverer parameterNameDiscoverer) {_		if (this.methodParameter != null) {_			this.methodParameter.initParameterNameDiscovery(parameterNameDiscoverer)__		}_	};initialize,parameter,name,discovery,for,the,underlying,method,parameter,if,any,p,this,method,does,not,actually,try,to,retrieve,the,parameter,name,at,this,point,it,just,allows,discovery,to,happen,when,the,application,calls,link,get,dependency,name,if,ever;public,void,init,parameter,name,discovery,nullable,parameter,name,discoverer,parameter,name,discoverer,if,this,method,parameter,null,this,method,parameter,init,parameter,name,discovery,parameter,name,discoverer
DependencyDescriptor -> public void initParameterNameDiscovery(@Nullable ParameterNameDiscoverer parameterNameDiscoverer);1536855799;Initialize parameter name discovery for the underlying method parameter, if any._<p>This method does not actually try to retrieve the parameter name at_this point_ it just allows discovery to happen when the application calls_{@link #getDependencyName()} (if ever).;public void initParameterNameDiscovery(@Nullable ParameterNameDiscoverer parameterNameDiscoverer) {_		if (this.methodParameter != null) {_			this.methodParameter.initParameterNameDiscovery(parameterNameDiscoverer)__		}_	};initialize,parameter,name,discovery,for,the,underlying,method,parameter,if,any,p,this,method,does,not,actually,try,to,retrieve,the,parameter,name,at,this,point,it,just,allows,discovery,to,happen,when,the,application,calls,link,get,dependency,name,if,ever;public,void,init,parameter,name,discovery,nullable,parameter,name,discoverer,parameter,name,discoverer,if,this,method,parameter,null,this,method,parameter,init,parameter,name,discovery,parameter,name,discoverer
DependencyDescriptor -> public void initParameterNameDiscovery(@Nullable ParameterNameDiscoverer parameterNameDiscoverer);1546963887;Initialize parameter name discovery for the underlying method parameter, if any._<p>This method does not actually try to retrieve the parameter name at_this point_ it just allows discovery to happen when the application calls_{@link #getDependencyName()} (if ever).;public void initParameterNameDiscovery(@Nullable ParameterNameDiscoverer parameterNameDiscoverer) {_		if (this.methodParameter != null) {_			this.methodParameter.initParameterNameDiscovery(parameterNameDiscoverer)__		}_	};initialize,parameter,name,discovery,for,the,underlying,method,parameter,if,any,p,this,method,does,not,actually,try,to,retrieve,the,parameter,name,at,this,point,it,just,allows,discovery,to,happen,when,the,application,calls,link,get,dependency,name,if,ever;public,void,init,parameter,name,discovery,nullable,parameter,name,discoverer,parameter,name,discoverer,if,this,method,parameter,null,this,method,parameter,init,parameter,name,discovery,parameter,name,discoverer
DependencyDescriptor -> public Annotation[] getAnnotations();1328020251;Obtain the annotations associated with the wrapped parameter/field, if any.;public Annotation[] getAnnotations() {_		if (this.field != null) {_			if (this.fieldAnnotations == null) {_				this.fieldAnnotations = this.field.getAnnotations()__			}_			return this.fieldAnnotations__		}_		else {_			return this.methodParameter.getParameterAnnotations()__		}_	};obtain,the,annotations,associated,with,the,wrapped,parameter,field,if,any;public,annotation,get,annotations,if,this,field,null,if,this,field,annotations,null,this,field,annotations,this,field,get,annotations,return,this,field,annotations,else,return,this,method,parameter,get,parameter,annotations
DependencyDescriptor -> public Annotation[] getAnnotations();1329142650;Obtain the annotations associated with the wrapped parameter/field, if any.;public Annotation[] getAnnotations() {_		if (this.field != null) {_			if (this.fieldAnnotations == null) {_				this.fieldAnnotations = this.field.getAnnotations()__			}_			return this.fieldAnnotations__		}_		else {_			return this.methodParameter.getParameterAnnotations()__		}_	};obtain,the,annotations,associated,with,the,wrapped,parameter,field,if,any;public,annotation,get,annotations,if,this,field,null,if,this,field,annotations,null,this,field,annotations,this,field,get,annotations,return,this,field,annotations,else,return,this,method,parameter,get,parameter,annotations
DependencyDescriptor -> public Annotation[] getAnnotations();1346421549;Obtain the annotations associated with the wrapped parameter/field, if any.;public Annotation[] getAnnotations() {_		if (this.field != null) {_			if (this.fieldAnnotations == null) {_				this.fieldAnnotations = this.field.getAnnotations()__			}_			return this.fieldAnnotations__		}_		else {_			return this.methodParameter.getParameterAnnotations()__		}_	};obtain,the,annotations,associated,with,the,wrapped,parameter,field,if,any;public,annotation,get,annotations,if,this,field,null,if,this,field,annotations,null,this,field,annotations,this,field,get,annotations,return,this,field,annotations,else,return,this,method,parameter,get,parameter,annotations
DependencyDescriptor -> public Annotation[] getAnnotations();1350077654;Obtain the annotations associated with the wrapped parameter/field, if any.;public Annotation[] getAnnotations() {_		if (this.field != null) {_			if (this.fieldAnnotations == null) {_				this.fieldAnnotations = this.field.getAnnotations()__			}_			return this.fieldAnnotations__		}_		else {_			return this.methodParameter.getParameterAnnotations()__		}_	};obtain,the,annotations,associated,with,the,wrapped,parameter,field,if,any;public,annotation,get,annotations,if,this,field,null,if,this,field,annotations,null,this,field,annotations,this,field,get,annotations,return,this,field,annotations,else,return,this,method,parameter,get,parameter,annotations
DependencyDescriptor -> public Annotation[] getAnnotations();1356735495;Obtain the annotations associated with the wrapped parameter/field, if any.;public Annotation[] getAnnotations() {_		if (this.field != null) {_			if (this.fieldAnnotations == null) {_				this.fieldAnnotations = this.field.getAnnotations()__			}_			return this.fieldAnnotations__		}_		else {_			return this.methodParameter.getParameterAnnotations()__		}_	};obtain,the,annotations,associated,with,the,wrapped,parameter,field,if,any;public,annotation,get,annotations,if,this,field,null,if,this,field,annotations,null,this,field,annotations,this,field,get,annotations,return,this,field,annotations,else,return,this,method,parameter,get,parameter,annotations
DependencyDescriptor -> public Annotation[] getAnnotations();1377641038;Obtain the annotations associated with the wrapped parameter/field, if any.;public Annotation[] getAnnotations() {_		if (this.field != null) {_			if (this.fieldAnnotations == null) {_				this.fieldAnnotations = this.field.getAnnotations()__			}_			return this.fieldAnnotations__		}_		else {_			return this.methodParameter.getParameterAnnotations()__		}_	};obtain,the,annotations,associated,with,the,wrapped,parameter,field,if,any;public,annotation,get,annotations,if,this,field,null,if,this,field,annotations,null,this,field,annotations,this,field,get,annotations,return,this,field,annotations,else,return,this,method,parameter,get,parameter,annotations
DependencyDescriptor -> public Annotation[] getAnnotations();1381788683;Obtain the annotations associated with the wrapped parameter/field, if any.;public Annotation[] getAnnotations() {_		if (this.field != null) {_			if (this.fieldAnnotations == null) {_				this.fieldAnnotations = this.field.getAnnotations()__			}_			return this.fieldAnnotations__		}_		else {_			return this.methodParameter.getParameterAnnotations()__		}_	};obtain,the,annotations,associated,with,the,wrapped,parameter,field,if,any;public,annotation,get,annotations,if,this,field,null,if,this,field,annotations,null,this,field,annotations,this,field,get,annotations,return,this,field,annotations,else,return,this,method,parameter,get,parameter,annotations
DependencyDescriptor -> public Annotation[] getAnnotations();1382716358;Obtain the annotations associated with the wrapped parameter/field, if any.;public Annotation[] getAnnotations() {_		if (this.field != null) {_			if (this.fieldAnnotations == null) {_				this.fieldAnnotations = this.field.getAnnotations()__			}_			return this.fieldAnnotations__		}_		else {_			return this.methodParameter.getParameterAnnotations()__		}_	};obtain,the,annotations,associated,with,the,wrapped,parameter,field,if,any;public,annotation,get,annotations,if,this,field,null,if,this,field,annotations,null,this,field,annotations,this,field,get,annotations,return,this,field,annotations,else,return,this,method,parameter,get,parameter,annotations
DependencyDescriptor -> public Annotation[] getAnnotations();1385412762;Obtain the annotations associated with the wrapped parameter/field, if any.;public Annotation[] getAnnotations() {_		if (this.field != null) {_			if (this.fieldAnnotations == null) {_				this.fieldAnnotations = this.field.getAnnotations()__			}_			return this.fieldAnnotations__		}_		else {_			return this.methodParameter.getParameterAnnotations()__		}_	};obtain,the,annotations,associated,with,the,wrapped,parameter,field,if,any;public,annotation,get,annotations,if,this,field,null,if,this,field,annotations,null,this,field,annotations,this,field,get,annotations,return,this,field,annotations,else,return,this,method,parameter,get,parameter,annotations
DependencyDescriptor -> public Annotation[] getAnnotations();1402061390;Obtain the annotations associated with the wrapped parameter/field, if any.;public Annotation[] getAnnotations() {_		if (this.field != null) {_			if (this.fieldAnnotations == null) {_				this.fieldAnnotations = this.field.getAnnotations()__			}_			return this.fieldAnnotations__		}_		else {_			return this.methodParameter.getParameterAnnotations()__		}_	};obtain,the,annotations,associated,with,the,wrapped,parameter,field,if,any;public,annotation,get,annotations,if,this,field,null,if,this,field,annotations,null,this,field,annotations,this,field,get,annotations,return,this,field,annotations,else,return,this,method,parameter,get,parameter,annotations
DependencyDescriptor -> public Annotation[] getAnnotations();1452685925;Obtain the annotations associated with the wrapped parameter/field, if any.;public Annotation[] getAnnotations() {_		if (this.field != null) {_			if (this.fieldAnnotations == null) {_				this.fieldAnnotations = this.field.getAnnotations()__			}_			return this.fieldAnnotations__		}_		else {_			return this.methodParameter.getParameterAnnotations()__		}_	};obtain,the,annotations,associated,with,the,wrapped,parameter,field,if,any;public,annotation,get,annotations,if,this,field,null,if,this,field,annotations,null,this,field,annotations,this,field,get,annotations,return,this,field,annotations,else,return,this,method,parameter,get,parameter,annotations
DependencyDescriptor -> public Annotation[] getAnnotations();1455295525;Obtain the annotations associated with the wrapped parameter/field, if any.;public Annotation[] getAnnotations() {_		if (this.field != null) {_			if (this.fieldAnnotations == null) {_				this.fieldAnnotations = this.field.getAnnotations()__			}_			return this.fieldAnnotations__		}_		else {_			return this.methodParameter.getParameterAnnotations()__		}_	};obtain,the,annotations,associated,with,the,wrapped,parameter,field,if,any;public,annotation,get,annotations,if,this,field,null,if,this,field,annotations,null,this,field,annotations,this,field,get,annotations,return,this,field,annotations,else,return,this,method,parameter,get,parameter,annotations
DependencyDescriptor -> public Annotation[] getAnnotations();1455889195;Obtain the annotations associated with the wrapped parameter/field, if any.;public Annotation[] getAnnotations() {_		if (this.field != null) {_			if (this.fieldAnnotations == null) {_				this.fieldAnnotations = this.field.getAnnotations()__			}_			return this.fieldAnnotations__		}_		else {_			return this.methodParameter.getParameterAnnotations()__		}_	};obtain,the,annotations,associated,with,the,wrapped,parameter,field,if,any;public,annotation,get,annotations,if,this,field,null,if,this,field,annotations,null,this,field,annotations,this,field,get,annotations,return,this,field,annotations,else,return,this,method,parameter,get,parameter,annotations
DependencyDescriptor -> public Class<?> getCollectionType();1328020251;Determine the generic element type of the wrapped Collection parameter/field, if any._@return the generic type, or <code>null</code> if none;public Class<?> getCollectionType() {_		return (this.field != null ?_				GenericCollectionTypeResolver.getCollectionFieldType(this.field) :_				GenericCollectionTypeResolver.getCollectionParameterType(this.methodParameter))__	};determine,the,generic,element,type,of,the,wrapped,collection,parameter,field,if,any,return,the,generic,type,or,code,null,code,if,none;public,class,get,collection,type,return,this,field,null,generic,collection,type,resolver,get,collection,field,type,this,field,generic,collection,type,resolver,get,collection,parameter,type,this,method,parameter
DependencyDescriptor -> public Class<?> getCollectionType();1329142650;Determine the generic element type of the wrapped Collection parameter/field, if any._@return the generic type, or <code>null</code> if none;public Class<?> getCollectionType() {_		return (this.field != null ?_				GenericCollectionTypeResolver.getCollectionFieldType(this.field, this.nestingLevel) :_				GenericCollectionTypeResolver.getCollectionParameterType(this.methodParameter))__	};determine,the,generic,element,type,of,the,wrapped,collection,parameter,field,if,any,return,the,generic,type,or,code,null,code,if,none;public,class,get,collection,type,return,this,field,null,generic,collection,type,resolver,get,collection,field,type,this,field,this,nesting,level,generic,collection,type,resolver,get,collection,parameter,type,this,method,parameter
DependencyDescriptor -> public Class<?> getCollectionType();1346421549;Determine the generic element type of the wrapped Collection parameter/field, if any._@return the generic type, or <code>null</code> if none;public Class<?> getCollectionType() {_		return (this.field != null ?_				GenericCollectionTypeResolver.getCollectionFieldType(this.field, this.nestingLevel) :_				GenericCollectionTypeResolver.getCollectionParameterType(this.methodParameter))__	};determine,the,generic,element,type,of,the,wrapped,collection,parameter,field,if,any,return,the,generic,type,or,code,null,code,if,none;public,class,get,collection,type,return,this,field,null,generic,collection,type,resolver,get,collection,field,type,this,field,this,nesting,level,generic,collection,type,resolver,get,collection,parameter,type,this,method,parameter
DependencyDescriptor -> public Class<?> getCollectionType();1350077654;Determine the generic element type of the wrapped Collection parameter/field, if any._@return the generic type, or <code>null</code> if none;public Class<?> getCollectionType() {_		return (this.field != null ?_				GenericCollectionTypeResolver.getCollectionFieldType(this.field, this.nestingLevel) :_				GenericCollectionTypeResolver.getCollectionParameterType(this.methodParameter))__	};determine,the,generic,element,type,of,the,wrapped,collection,parameter,field,if,any,return,the,generic,type,or,code,null,code,if,none;public,class,get,collection,type,return,this,field,null,generic,collection,type,resolver,get,collection,field,type,this,field,this,nesting,level,generic,collection,type,resolver,get,collection,parameter,type,this,method,parameter
DependencyDescriptor -> public Class<?> getCollectionType();1356735495;Determine the generic element type of the wrapped Collection parameter/field, if any._@return the generic type, or {@code null} if none;public Class<?> getCollectionType() {_		return (this.field != null ?_				GenericCollectionTypeResolver.getCollectionFieldType(this.field, this.nestingLevel) :_				GenericCollectionTypeResolver.getCollectionParameterType(this.methodParameter))__	};determine,the,generic,element,type,of,the,wrapped,collection,parameter,field,if,any,return,the,generic,type,or,code,null,if,none;public,class,get,collection,type,return,this,field,null,generic,collection,type,resolver,get,collection,field,type,this,field,this,nesting,level,generic,collection,type,resolver,get,collection,parameter,type,this,method,parameter
DependencyDescriptor -> public Class<?> getCollectionType();1377641038;Determine the generic element type of the wrapped Collection parameter/field, if any._@return the generic type, or {@code null} if none;public Class<?> getCollectionType() {_		return (this.field != null ?_				GenericCollectionTypeResolver.getCollectionFieldType(this.field, this.nestingLevel) :_				GenericCollectionTypeResolver.getCollectionParameterType(this.methodParameter))__	};determine,the,generic,element,type,of,the,wrapped,collection,parameter,field,if,any,return,the,generic,type,or,code,null,if,none;public,class,get,collection,type,return,this,field,null,generic,collection,type,resolver,get,collection,field,type,this,field,this,nesting,level,generic,collection,type,resolver,get,collection,parameter,type,this,method,parameter
DependencyDescriptor -> public Class<?> getCollectionType();1381788683;Determine the generic element type of the wrapped Collection parameter/field, if any._@return the generic type, or {@code null} if none;public Class<?> getCollectionType() {_		return (this.field != null ?_				GenericCollectionTypeResolver.getCollectionFieldType(this.field, this.nestingLevel) :_				GenericCollectionTypeResolver.getCollectionParameterType(this.methodParameter))__	};determine,the,generic,element,type,of,the,wrapped,collection,parameter,field,if,any,return,the,generic,type,or,code,null,if,none;public,class,get,collection,type,return,this,field,null,generic,collection,type,resolver,get,collection,field,type,this,field,this,nesting,level,generic,collection,type,resolver,get,collection,parameter,type,this,method,parameter
DependencyDescriptor -> public Class<?> getCollectionType();1382716358;Determine the generic element type of the wrapped Collection parameter/field, if any._@return the generic type, or {@code null} if none;public Class<?> getCollectionType() {_		return (this.field != null ?_				GenericCollectionTypeResolver.getCollectionFieldType(this.field, this.nestingLevel) :_				GenericCollectionTypeResolver.getCollectionParameterType(this.methodParameter))__	};determine,the,generic,element,type,of,the,wrapped,collection,parameter,field,if,any,return,the,generic,type,or,code,null,if,none;public,class,get,collection,type,return,this,field,null,generic,collection,type,resolver,get,collection,field,type,this,field,this,nesting,level,generic,collection,type,resolver,get,collection,parameter,type,this,method,parameter
DependencyDescriptor -> public Class<?> getCollectionType();1385412762;Determine the generic element type of the wrapped Collection parameter/field, if any._@return the generic type, or {@code null} if none;public Class<?> getCollectionType() {_		return (this.field != null ?_				GenericCollectionTypeResolver.getCollectionFieldType(this.field, this.nestingLevel) :_				GenericCollectionTypeResolver.getCollectionParameterType(this.methodParameter))__	};determine,the,generic,element,type,of,the,wrapped,collection,parameter,field,if,any,return,the,generic,type,or,code,null,if,none;public,class,get,collection,type,return,this,field,null,generic,collection,type,resolver,get,collection,field,type,this,field,this,nesting,level,generic,collection,type,resolver,get,collection,parameter,type,this,method,parameter
DependencyDescriptor -> public Class<?> getCollectionType();1402061390;Determine the generic element type of the wrapped Collection parameter/field, if any._@return the generic type, or {@code null} if none;public Class<?> getCollectionType() {_		return (this.field != null ?_				GenericCollectionTypeResolver.getCollectionFieldType(this.field, this.nestingLevel) :_				GenericCollectionTypeResolver.getCollectionParameterType(this.methodParameter))__	};determine,the,generic,element,type,of,the,wrapped,collection,parameter,field,if,any,return,the,generic,type,or,code,null,if,none;public,class,get,collection,type,return,this,field,null,generic,collection,type,resolver,get,collection,field,type,this,field,this,nesting,level,generic,collection,type,resolver,get,collection,parameter,type,this,method,parameter
DependencyDescriptor -> public Class<?> getCollectionType();1452685925;Determine the generic element type of the wrapped Collection parameter/field, if any._@return the generic type, or {@code null} if none;public Class<?> getCollectionType() {_		return (this.field != null ?_				GenericCollectionTypeResolver.getCollectionFieldType(this.field, this.nestingLevel) :_				GenericCollectionTypeResolver.getCollectionParameterType(this.methodParameter))__	};determine,the,generic,element,type,of,the,wrapped,collection,parameter,field,if,any,return,the,generic,type,or,code,null,if,none;public,class,get,collection,type,return,this,field,null,generic,collection,type,resolver,get,collection,field,type,this,field,this,nesting,level,generic,collection,type,resolver,get,collection,parameter,type,this,method,parameter
DependencyDescriptor -> public Class<?> getCollectionType();1455295525;Determine the generic element type of the wrapped Collection parameter/field, if any._@return the generic type, or {@code null} if none;public Class<?> getCollectionType() {_		return (this.field != null ?_				GenericCollectionTypeResolver.getCollectionFieldType(this.field, this.nestingLevel) :_				GenericCollectionTypeResolver.getCollectionParameterType(this.methodParameter))__	};determine,the,generic,element,type,of,the,wrapped,collection,parameter,field,if,any,return,the,generic,type,or,code,null,if,none;public,class,get,collection,type,return,this,field,null,generic,collection,type,resolver,get,collection,field,type,this,field,this,nesting,level,generic,collection,type,resolver,get,collection,parameter,type,this,method,parameter
DependencyDescriptor -> public Class<?> getCollectionType();1455889195;Determine the generic element type of the wrapped Collection parameter/field, if any._@return the generic type, or {@code null} if none;public Class<?> getCollectionType() {_		return (this.field != null ?_				GenericCollectionTypeResolver.getCollectionFieldType(this.field, this.nestingLevel) :_				GenericCollectionTypeResolver.getCollectionParameterType(this.methodParameter))__	};determine,the,generic,element,type,of,the,wrapped,collection,parameter,field,if,any,return,the,generic,type,or,code,null,if,none;public,class,get,collection,type,return,this,field,null,generic,collection,type,resolver,get,collection,field,type,this,field,this,nesting,level,generic,collection,type,resolver,get,collection,parameter,type,this,method,parameter
DependencyDescriptor -> public Class<?> getCollectionType();1456432609;Determine the generic element type of the wrapped Collection parameter/field, if any._@return the generic type, or {@code null} if none;public Class<?> getCollectionType() {_		return (this.field != null ?_				GenericCollectionTypeResolver.getCollectionFieldType(this.field, this.nestingLevel) :_				GenericCollectionTypeResolver.getCollectionParameterType(this.methodParameter))__	};determine,the,generic,element,type,of,the,wrapped,collection,parameter,field,if,any,return,the,generic,type,or,code,null,if,none;public,class,get,collection,type,return,this,field,null,generic,collection,type,resolver,get,collection,field,type,this,field,this,nesting,level,generic,collection,type,resolver,get,collection,parameter,type,this,method,parameter
DependencyDescriptor -> public Class<?> getCollectionType();1458755547;Determine the generic element type of the wrapped Collection parameter/field, if any._@return the generic type, or {@code null} if none;public Class<?> getCollectionType() {_		return (this.field != null ?_				GenericCollectionTypeResolver.getCollectionFieldType(this.field, this.nestingLevel) :_				GenericCollectionTypeResolver.getCollectionParameterType(this.methodParameter))__	};determine,the,generic,element,type,of,the,wrapped,collection,parameter,field,if,any,return,the,generic,type,or,code,null,if,none;public,class,get,collection,type,return,this,field,null,generic,collection,type,resolver,get,collection,field,type,this,field,this,nesting,level,generic,collection,type,resolver,get,collection,parameter,type,this,method,parameter
DependencyDescriptor -> public Class<?> getCollectionType();1466893134;Determine the generic element type of the wrapped Collection parameter/field, if any._@return the generic type, or {@code null} if none;public Class<?> getCollectionType() {_		return (this.field != null ?_				GenericCollectionTypeResolver.getCollectionFieldType(this.field, this.nestingLevel) :_				GenericCollectionTypeResolver.getCollectionParameterType(this.methodParameter))__	};determine,the,generic,element,type,of,the,wrapped,collection,parameter,field,if,any,return,the,generic,type,or,code,null,if,none;public,class,get,collection,type,return,this,field,null,generic,collection,type,resolver,get,collection,field,type,this,field,this,nesting,level,generic,collection,type,resolver,get,collection,parameter,type,this,method,parameter
DependencyDescriptor -> public Class<?> getCollectionType();1469030751;Determine the generic element type of the wrapped Collection parameter/field, if any._@return the generic type, or {@code null} if none;public Class<?> getCollectionType() {_		return (this.field != null ?_				GenericCollectionTypeResolver.getCollectionFieldType(this.field, this.nestingLevel) :_				GenericCollectionTypeResolver.getCollectionParameterType(this.methodParameter))__	};determine,the,generic,element,type,of,the,wrapped,collection,parameter,field,if,any,return,the,generic,type,or,code,null,if,none;public,class,get,collection,type,return,this,field,null,generic,collection,type,resolver,get,collection,field,type,this,field,this,nesting,level,generic,collection,type,resolver,get,collection,parameter,type,this,method,parameter
DependencyDescriptor -> public Class<?> getCollectionType();1481647138;Determine the generic element type of the wrapped Collection parameter/field, if any._@return the generic type, or {@code null} if none;public Class<?> getCollectionType() {_		return (this.field != null ?_				GenericCollectionTypeResolver.getCollectionFieldType(this.field, this.nestingLevel) :_				GenericCollectionTypeResolver.getCollectionParameterType(this.methodParameter))__	};determine,the,generic,element,type,of,the,wrapped,collection,parameter,field,if,any,return,the,generic,type,or,code,null,if,none;public,class,get,collection,type,return,this,field,null,generic,collection,type,resolver,get,collection,field,type,this,field,this,nesting,level,generic,collection,type,resolver,get,collection,parameter,type,this,method,parameter
DependencyDescriptor -> public Class<?> getCollectionType();1482091448;Determine the generic element type of the wrapped Collection parameter/field, if any._@return the generic type, or {@code null} if none;public Class<?> getCollectionType() {_		return (this.field != null ?_				GenericCollectionTypeResolver.getCollectionFieldType(this.field, this.nestingLevel) :_				GenericCollectionTypeResolver.getCollectionParameterType(this.methodParameter))__	};determine,the,generic,element,type,of,the,wrapped,collection,parameter,field,if,any,return,the,generic,type,or,code,null,if,none;public,class,get,collection,type,return,this,field,null,generic,collection,type,resolver,get,collection,field,type,this,field,this,nesting,level,generic,collection,type,resolver,get,collection,parameter,type,this,method,parameter
DependencyDescriptor -> public DependencyDescriptor forFallbackMatch();1382716358;Return a variant of this descriptor that is intended for a fallback match._@see #fallbackMatchAllowed();public DependencyDescriptor forFallbackMatch() {_		return new DependencyDescriptor(this) {_			@Override_			public boolean fallbackMatchAllowed() {_				return true__			}_		}__	};return,a,variant,of,this,descriptor,that,is,intended,for,a,fallback,match,see,fallback,match,allowed;public,dependency,descriptor,for,fallback,match,return,new,dependency,descriptor,this,override,public,boolean,fallback,match,allowed,return,true
DependencyDescriptor -> public DependencyDescriptor forFallbackMatch();1385412762;Return a variant of this descriptor that is intended for a fallback match._@see #fallbackMatchAllowed();public DependencyDescriptor forFallbackMatch() {_		return new DependencyDescriptor(this) {_			@Override_			public boolean fallbackMatchAllowed() {_				return true__			}_		}__	};return,a,variant,of,this,descriptor,that,is,intended,for,a,fallback,match,see,fallback,match,allowed;public,dependency,descriptor,for,fallback,match,return,new,dependency,descriptor,this,override,public,boolean,fallback,match,allowed,return,true
DependencyDescriptor -> public DependencyDescriptor forFallbackMatch();1402061390;Return a variant of this descriptor that is intended for a fallback match._@see #fallbackMatchAllowed();public DependencyDescriptor forFallbackMatch() {_		return new DependencyDescriptor(this) {_			@Override_			public boolean fallbackMatchAllowed() {_				return true__			}_		}__	};return,a,variant,of,this,descriptor,that,is,intended,for,a,fallback,match,see,fallback,match,allowed;public,dependency,descriptor,for,fallback,match,return,new,dependency,descriptor,this,override,public,boolean,fallback,match,allowed,return,true
DependencyDescriptor -> public DependencyDescriptor forFallbackMatch();1452685925;Return a variant of this descriptor that is intended for a fallback match._@since 4.0_@see #fallbackMatchAllowed();public DependencyDescriptor forFallbackMatch() {_		return new DependencyDescriptor(this) {_			@Override_			public boolean fallbackMatchAllowed() {_				return true__			}_		}__	};return,a,variant,of,this,descriptor,that,is,intended,for,a,fallback,match,since,4,0,see,fallback,match,allowed;public,dependency,descriptor,for,fallback,match,return,new,dependency,descriptor,this,override,public,boolean,fallback,match,allowed,return,true
DependencyDescriptor -> public DependencyDescriptor forFallbackMatch();1455295525;Return a variant of this descriptor that is intended for a fallback match._@since 4.0_@see #fallbackMatchAllowed();public DependencyDescriptor forFallbackMatch() {_		return new DependencyDescriptor(this) {_			@Override_			public boolean fallbackMatchAllowed() {_				return true__			}_		}__	};return,a,variant,of,this,descriptor,that,is,intended,for,a,fallback,match,since,4,0,see,fallback,match,allowed;public,dependency,descriptor,for,fallback,match,return,new,dependency,descriptor,this,override,public,boolean,fallback,match,allowed,return,true
DependencyDescriptor -> public DependencyDescriptor forFallbackMatch();1455889195;Return a variant of this descriptor that is intended for a fallback match._@since 4.0_@see #fallbackMatchAllowed();public DependencyDescriptor forFallbackMatch() {_		return new DependencyDescriptor(this) {_			@Override_			public boolean fallbackMatchAllowed() {_				return true__			}_		}__	};return,a,variant,of,this,descriptor,that,is,intended,for,a,fallback,match,since,4,0,see,fallback,match,allowed;public,dependency,descriptor,for,fallback,match,return,new,dependency,descriptor,this,override,public,boolean,fallback,match,allowed,return,true
DependencyDescriptor -> public DependencyDescriptor forFallbackMatch();1456432609;Return a variant of this descriptor that is intended for a fallback match._@since 4.0_@see #fallbackMatchAllowed();public DependencyDescriptor forFallbackMatch() {_		return new DependencyDescriptor(this) {_			@Override_			public boolean fallbackMatchAllowed() {_				return true__			}_		}__	};return,a,variant,of,this,descriptor,that,is,intended,for,a,fallback,match,since,4,0,see,fallback,match,allowed;public,dependency,descriptor,for,fallback,match,return,new,dependency,descriptor,this,override,public,boolean,fallback,match,allowed,return,true
DependencyDescriptor -> public DependencyDescriptor forFallbackMatch();1458755547;Return a variant of this descriptor that is intended for a fallback match._@since 4.0_@see #fallbackMatchAllowed();public DependencyDescriptor forFallbackMatch() {_		return new DependencyDescriptor(this) {_			@Override_			public boolean fallbackMatchAllowed() {_				return true__			}_		}__	};return,a,variant,of,this,descriptor,that,is,intended,for,a,fallback,match,since,4,0,see,fallback,match,allowed;public,dependency,descriptor,for,fallback,match,return,new,dependency,descriptor,this,override,public,boolean,fallback,match,allowed,return,true
DependencyDescriptor -> public DependencyDescriptor forFallbackMatch();1466893134;Return a variant of this descriptor that is intended for a fallback match._@since 4.0_@see #fallbackMatchAllowed();public DependencyDescriptor forFallbackMatch() {_		return new DependencyDescriptor(this) {_			@Override_			public boolean fallbackMatchAllowed() {_				return true__			}_		}__	};return,a,variant,of,this,descriptor,that,is,intended,for,a,fallback,match,since,4,0,see,fallback,match,allowed;public,dependency,descriptor,for,fallback,match,return,new,dependency,descriptor,this,override,public,boolean,fallback,match,allowed,return,true
DependencyDescriptor -> public DependencyDescriptor forFallbackMatch();1469030751;Return a variant of this descriptor that is intended for a fallback match._@since 4.0_@see #fallbackMatchAllowed();public DependencyDescriptor forFallbackMatch() {_		return new DependencyDescriptor(this) {_			@Override_			public boolean fallbackMatchAllowed() {_				return true__			}_		}__	};return,a,variant,of,this,descriptor,that,is,intended,for,a,fallback,match,since,4,0,see,fallback,match,allowed;public,dependency,descriptor,for,fallback,match,return,new,dependency,descriptor,this,override,public,boolean,fallback,match,allowed,return,true
DependencyDescriptor -> public DependencyDescriptor forFallbackMatch();1481647138;Return a variant of this descriptor that is intended for a fallback match._@since 4.0_@see #fallbackMatchAllowed();public DependencyDescriptor forFallbackMatch() {_		return new DependencyDescriptor(this) {_			@Override_			public boolean fallbackMatchAllowed() {_				return true__			}_		}__	};return,a,variant,of,this,descriptor,that,is,intended,for,a,fallback,match,since,4,0,see,fallback,match,allowed;public,dependency,descriptor,for,fallback,match,return,new,dependency,descriptor,this,override,public,boolean,fallback,match,allowed,return,true
DependencyDescriptor -> public DependencyDescriptor forFallbackMatch();1482091448;Return a variant of this descriptor that is intended for a fallback match._@since 4.0_@see #fallbackMatchAllowed();public DependencyDescriptor forFallbackMatch() {_		return new DependencyDescriptor(this) {_			@Override_			public boolean fallbackMatchAllowed() {_				return true__			}_		}__	};return,a,variant,of,this,descriptor,that,is,intended,for,a,fallback,match,since,4,0,see,fallback,match,allowed;public,dependency,descriptor,for,fallback,match,return,new,dependency,descriptor,this,override,public,boolean,fallback,match,allowed,return,true
DependencyDescriptor -> public DependencyDescriptor forFallbackMatch();1485277217;Return a variant of this descriptor that is intended for a fallback match._@since 4.0_@see #fallbackMatchAllowed();public DependencyDescriptor forFallbackMatch() {_		return new DependencyDescriptor(this) {_			@Override_			public boolean fallbackMatchAllowed() {_				return true__			}_		}__	};return,a,variant,of,this,descriptor,that,is,intended,for,a,fallback,match,since,4,0,see,fallback,match,allowed;public,dependency,descriptor,for,fallback,match,return,new,dependency,descriptor,this,override,public,boolean,fallback,match,allowed,return,true
DependencyDescriptor -> public DependencyDescriptor forFallbackMatch();1485300605;Return a variant of this descriptor that is intended for a fallback match._@since 4.0_@see #fallbackMatchAllowed();public DependencyDescriptor forFallbackMatch() {_		return new DependencyDescriptor(this) {_			@Override_			public boolean fallbackMatchAllowed() {_				return true__			}_		}__	};return,a,variant,of,this,descriptor,that,is,intended,for,a,fallback,match,since,4,0,see,fallback,match,allowed;public,dependency,descriptor,for,fallback,match,return,new,dependency,descriptor,this,override,public,boolean,fallback,match,allowed,return,true
DependencyDescriptor -> public DependencyDescriptor forFallbackMatch();1495868221;Return a variant of this descriptor that is intended for a fallback match._@since 4.0_@see #fallbackMatchAllowed();public DependencyDescriptor forFallbackMatch() {_		return new DependencyDescriptor(this) {_			@Override_			public boolean fallbackMatchAllowed() {_				return true__			}_		}__	};return,a,variant,of,this,descriptor,that,is,intended,for,a,fallback,match,since,4,0,see,fallback,match,allowed;public,dependency,descriptor,for,fallback,match,return,new,dependency,descriptor,this,override,public,boolean,fallback,match,allowed,return,true
DependencyDescriptor -> public DependencyDescriptor forFallbackMatch();1496837955;Return a variant of this descriptor that is intended for a fallback match._@since 4.0_@see #fallbackMatchAllowed();public DependencyDescriptor forFallbackMatch() {_		return new DependencyDescriptor(this) {_			@Override_			public boolean fallbackMatchAllowed() {_				return true__			}_		}__	};return,a,variant,of,this,descriptor,that,is,intended,for,a,fallback,match,since,4,0,see,fallback,match,allowed;public,dependency,descriptor,for,fallback,match,return,new,dependency,descriptor,this,override,public,boolean,fallback,match,allowed,return,true
DependencyDescriptor -> public DependencyDescriptor forFallbackMatch();1498780456;Return a variant of this descriptor that is intended for a fallback match._@since 4.0_@see #fallbackMatchAllowed();public DependencyDescriptor forFallbackMatch() {_		return new DependencyDescriptor(this) {_			@Override_			public boolean fallbackMatchAllowed() {_				return true__			}_		}__	};return,a,variant,of,this,descriptor,that,is,intended,for,a,fallback,match,since,4,0,see,fallback,match,allowed;public,dependency,descriptor,for,fallback,match,return,new,dependency,descriptor,this,override,public,boolean,fallback,match,allowed,return,true
DependencyDescriptor -> public DependencyDescriptor forFallbackMatch();1503007895;Return a variant of this descriptor that is intended for a fallback match._@since 4.0_@see #fallbackMatchAllowed();public DependencyDescriptor forFallbackMatch() {_		return new DependencyDescriptor(this) {_			@Override_			public boolean fallbackMatchAllowed() {_				return true__			}_		}__	};return,a,variant,of,this,descriptor,that,is,intended,for,a,fallback,match,since,4,0,see,fallback,match,allowed;public,dependency,descriptor,for,fallback,match,return,new,dependency,descriptor,this,override,public,boolean,fallback,match,allowed,return,true
DependencyDescriptor -> public DependencyDescriptor forFallbackMatch();1503272000;Return a variant of this descriptor that is intended for a fallback match._@since 4.0_@see #fallbackMatchAllowed();public DependencyDescriptor forFallbackMatch() {_		return new DependencyDescriptor(this) {_			@Override_			public boolean fallbackMatchAllowed() {_				return true__			}_		}__	};return,a,variant,of,this,descriptor,that,is,intended,for,a,fallback,match,since,4,0,see,fallback,match,allowed;public,dependency,descriptor,for,fallback,match,return,new,dependency,descriptor,this,override,public,boolean,fallback,match,allowed,return,true
DependencyDescriptor -> public DependencyDescriptor forFallbackMatch();1503411745;Return a variant of this descriptor that is intended for a fallback match._@since 4.0_@see #fallbackMatchAllowed();public DependencyDescriptor forFallbackMatch() {_		return new DependencyDescriptor(this) {_			@Override_			public boolean fallbackMatchAllowed() {_				return true__			}_		}__	};return,a,variant,of,this,descriptor,that,is,intended,for,a,fallback,match,since,4,0,see,fallback,match,allowed;public,dependency,descriptor,for,fallback,match,return,new,dependency,descriptor,this,override,public,boolean,fallback,match,allowed,return,true
DependencyDescriptor -> public DependencyDescriptor forFallbackMatch();1506551472;Return a variant of this descriptor that is intended for a fallback match._@since 4.0_@see #fallbackMatchAllowed();public DependencyDescriptor forFallbackMatch() {_		return new DependencyDescriptor(this) {_			@Override_			public boolean fallbackMatchAllowed() {_				return true__			}_		}__	};return,a,variant,of,this,descriptor,that,is,intended,for,a,fallback,match,since,4,0,see,fallback,match,allowed;public,dependency,descriptor,for,fallback,match,return,new,dependency,descriptor,this,override,public,boolean,fallback,match,allowed,return,true
DependencyDescriptor -> public DependencyDescriptor forFallbackMatch();1530174524;Return a variant of this descriptor that is intended for a fallback match._@since 4.0_@see #fallbackMatchAllowed();public DependencyDescriptor forFallbackMatch() {_		return new DependencyDescriptor(this) {_			@Override_			public boolean fallbackMatchAllowed() {_				return true__			}_		}__	};return,a,variant,of,this,descriptor,that,is,intended,for,a,fallback,match,since,4,0,see,fallback,match,allowed;public,dependency,descriptor,for,fallback,match,return,new,dependency,descriptor,this,override,public,boolean,fallback,match,allowed,return,true
DependencyDescriptor -> public DependencyDescriptor forFallbackMatch();1530198749;Return a variant of this descriptor that is intended for a fallback match._@since 4.0_@see #fallbackMatchAllowed();public DependencyDescriptor forFallbackMatch() {_		return new DependencyDescriptor(this) {_			@Override_			public boolean fallbackMatchAllowed() {_				return true__			}_		}__	};return,a,variant,of,this,descriptor,that,is,intended,for,a,fallback,match,since,4,0,see,fallback,match,allowed;public,dependency,descriptor,for,fallback,match,return,new,dependency,descriptor,this,override,public,boolean,fallback,match,allowed,return,true
DependencyDescriptor -> public DependencyDescriptor forFallbackMatch();1530201727;Return a variant of this descriptor that is intended for a fallback match._@since 4.0_@see #fallbackMatchAllowed();public DependencyDescriptor forFallbackMatch() {_		return new DependencyDescriptor(this) {_			@Override_			public boolean fallbackMatchAllowed() {_				return true__			}_		}__	};return,a,variant,of,this,descriptor,that,is,intended,for,a,fallback,match,since,4,0,see,fallback,match,allowed;public,dependency,descriptor,for,fallback,match,return,new,dependency,descriptor,this,override,public,boolean,fallback,match,allowed,return,true
DependencyDescriptor -> public DependencyDescriptor forFallbackMatch();1532274593;Return a variant of this descriptor that is intended for a fallback match._@since 4.0_@see #fallbackMatchAllowed();public DependencyDescriptor forFallbackMatch() {_		return new DependencyDescriptor(this) {_			@Override_			public boolean fallbackMatchAllowed() {_				return true__			}_		}__	};return,a,variant,of,this,descriptor,that,is,intended,for,a,fallback,match,since,4,0,see,fallback,match,allowed;public,dependency,descriptor,for,fallback,match,return,new,dependency,descriptor,this,override,public,boolean,fallback,match,allowed,return,true
DependencyDescriptor -> public DependencyDescriptor forFallbackMatch();1532332488;Return a variant of this descriptor that is intended for a fallback match._@since 4.0_@see #fallbackMatchAllowed();public DependencyDescriptor forFallbackMatch() {_		return new DependencyDescriptor(this) {_			@Override_			public boolean fallbackMatchAllowed() {_				return true__			}_		}__	};return,a,variant,of,this,descriptor,that,is,intended,for,a,fallback,match,since,4,0,see,fallback,match,allowed;public,dependency,descriptor,for,fallback,match,return,new,dependency,descriptor,this,override,public,boolean,fallback,match,allowed,return,true
DependencyDescriptor -> public DependencyDescriptor forFallbackMatch();1532385723;Return a variant of this descriptor that is intended for a fallback match._@since 4.0_@see #fallbackMatchAllowed();public DependencyDescriptor forFallbackMatch() {_		return new DependencyDescriptor(this) {_			@Override_			public boolean fallbackMatchAllowed() {_				return true__			}_		}__	};return,a,variant,of,this,descriptor,that,is,intended,for,a,fallback,match,since,4,0,see,fallback,match,allowed;public,dependency,descriptor,for,fallback,match,return,new,dependency,descriptor,this,override,public,boolean,fallback,match,allowed,return,true
DependencyDescriptor -> public DependencyDescriptor forFallbackMatch();1535039984;Return a variant of this descriptor that is intended for a fallback match._@since 4.0_@see #fallbackMatchAllowed();public DependencyDescriptor forFallbackMatch() {_		return new DependencyDescriptor(this) {_			@Override_			public boolean fallbackMatchAllowed() {_				return true__			}_		}__	};return,a,variant,of,this,descriptor,that,is,intended,for,a,fallback,match,since,4,0,see,fallback,match,allowed;public,dependency,descriptor,for,fallback,match,return,new,dependency,descriptor,this,override,public,boolean,fallback,match,allowed,return,true
DependencyDescriptor -> public DependencyDescriptor forFallbackMatch();1536855799;Return a variant of this descriptor that is intended for a fallback match._@since 4.0_@see #fallbackMatchAllowed();public DependencyDescriptor forFallbackMatch() {_		return new DependencyDescriptor(this) {_			@Override_			public boolean fallbackMatchAllowed() {_				return true__			}_		}__	};return,a,variant,of,this,descriptor,that,is,intended,for,a,fallback,match,since,4,0,see,fallback,match,allowed;public,dependency,descriptor,for,fallback,match,return,new,dependency,descriptor,this,override,public,boolean,fallback,match,allowed,return,true
DependencyDescriptor -> public DependencyDescriptor forFallbackMatch();1546963887;Return a variant of this descriptor that is intended for a fallback match._@since 4.0_@see #fallbackMatchAllowed();public DependencyDescriptor forFallbackMatch() {_		return new DependencyDescriptor(this) {_			@Override_			public boolean fallbackMatchAllowed() {_				return true__			}_		}__	};return,a,variant,of,this,descriptor,that,is,intended,for,a,fallback,match,since,4,0,see,fallback,match,allowed;public,dependency,descriptor,for,fallback,match,return,new,dependency,descriptor,this,override,public,boolean,fallback,match,allowed,return,true
DependencyDescriptor -> public MethodParameter getMethodParameter();1328020251;Return the wrapped MethodParameter, if any._<p>Note: Either MethodParameter or Field is available._@return the MethodParameter, or <code>null</code> if none;public MethodParameter getMethodParameter() {_		return this.methodParameter__	};return,the,wrapped,method,parameter,if,any,p,note,either,method,parameter,or,field,is,available,return,the,method,parameter,or,code,null,code,if,none;public,method,parameter,get,method,parameter,return,this,method,parameter
DependencyDescriptor -> public MethodParameter getMethodParameter();1329142650;Return the wrapped MethodParameter, if any._<p>Note: Either MethodParameter or Field is available._@return the MethodParameter, or <code>null</code> if none;public MethodParameter getMethodParameter() {_		return this.methodParameter__	};return,the,wrapped,method,parameter,if,any,p,note,either,method,parameter,or,field,is,available,return,the,method,parameter,or,code,null,code,if,none;public,method,parameter,get,method,parameter,return,this,method,parameter
DependencyDescriptor -> public MethodParameter getMethodParameter();1346421549;Return the wrapped MethodParameter, if any._<p>Note: Either MethodParameter or Field is available._@return the MethodParameter, or <code>null</code> if none;public MethodParameter getMethodParameter() {_		return this.methodParameter__	};return,the,wrapped,method,parameter,if,any,p,note,either,method,parameter,or,field,is,available,return,the,method,parameter,or,code,null,code,if,none;public,method,parameter,get,method,parameter,return,this,method,parameter
DependencyDescriptor -> public MethodParameter getMethodParameter();1350077654;Return the wrapped MethodParameter, if any._<p>Note: Either MethodParameter or Field is available._@return the MethodParameter, or <code>null</code> if none;public MethodParameter getMethodParameter() {_		return this.methodParameter__	};return,the,wrapped,method,parameter,if,any,p,note,either,method,parameter,or,field,is,available,return,the,method,parameter,or,code,null,code,if,none;public,method,parameter,get,method,parameter,return,this,method,parameter
DependencyDescriptor -> public MethodParameter getMethodParameter();1356735495;Return the wrapped MethodParameter, if any._<p>Note: Either MethodParameter or Field is available._@return the MethodParameter, or {@code null} if none;public MethodParameter getMethodParameter() {_		return this.methodParameter__	};return,the,wrapped,method,parameter,if,any,p,note,either,method,parameter,or,field,is,available,return,the,method,parameter,or,code,null,if,none;public,method,parameter,get,method,parameter,return,this,method,parameter
DependencyDescriptor -> public MethodParameter getMethodParameter();1377641038;Return the wrapped MethodParameter, if any._<p>Note: Either MethodParameter or Field is available._@return the MethodParameter, or {@code null} if none;public MethodParameter getMethodParameter() {_		return this.methodParameter__	};return,the,wrapped,method,parameter,if,any,p,note,either,method,parameter,or,field,is,available,return,the,method,parameter,or,code,null,if,none;public,method,parameter,get,method,parameter,return,this,method,parameter
DependencyDescriptor -> public MethodParameter getMethodParameter();1381788683;Return the wrapped MethodParameter, if any._<p>Note: Either MethodParameter or Field is available._@return the MethodParameter, or {@code null} if none;public MethodParameter getMethodParameter() {_		return this.methodParameter__	};return,the,wrapped,method,parameter,if,any,p,note,either,method,parameter,or,field,is,available,return,the,method,parameter,or,code,null,if,none;public,method,parameter,get,method,parameter,return,this,method,parameter
DependencyDescriptor -> public MethodParameter getMethodParameter();1382716358;Return the wrapped MethodParameter, if any._<p>Note: Either MethodParameter or Field is available._@return the MethodParameter, or {@code null} if none;public MethodParameter getMethodParameter() {_		return this.methodParameter__	};return,the,wrapped,method,parameter,if,any,p,note,either,method,parameter,or,field,is,available,return,the,method,parameter,or,code,null,if,none;public,method,parameter,get,method,parameter,return,this,method,parameter
DependencyDescriptor -> public MethodParameter getMethodParameter();1385412762;Return the wrapped MethodParameter, if any._<p>Note: Either MethodParameter or Field is available._@return the MethodParameter, or {@code null} if none;public MethodParameter getMethodParameter() {_		return this.methodParameter__	};return,the,wrapped,method,parameter,if,any,p,note,either,method,parameter,or,field,is,available,return,the,method,parameter,or,code,null,if,none;public,method,parameter,get,method,parameter,return,this,method,parameter
DependencyDescriptor -> public MethodParameter getMethodParameter();1402061390;Return the wrapped MethodParameter, if any._<p>Note: Either MethodParameter or Field is available._@return the MethodParameter, or {@code null} if none;public MethodParameter getMethodParameter() {_		return this.methodParameter__	};return,the,wrapped,method,parameter,if,any,p,note,either,method,parameter,or,field,is,available,return,the,method,parameter,or,code,null,if,none;public,method,parameter,get,method,parameter,return,this,method,parameter
DependencyDescriptor -> public MethodParameter getMethodParameter();1452685925;Return the wrapped MethodParameter, if any._<p>Note: Either MethodParameter or Field is available._@return the MethodParameter, or {@code null} if none;public MethodParameter getMethodParameter() {_		return this.methodParameter__	};return,the,wrapped,method,parameter,if,any,p,note,either,method,parameter,or,field,is,available,return,the,method,parameter,or,code,null,if,none;public,method,parameter,get,method,parameter,return,this,method,parameter
DependencyDescriptor -> public MethodParameter getMethodParameter();1455295525;Return the wrapped MethodParameter, if any._<p>Note: Either MethodParameter or Field is available._@return the MethodParameter, or {@code null} if none;public MethodParameter getMethodParameter() {_		return this.methodParameter__	};return,the,wrapped,method,parameter,if,any,p,note,either,method,parameter,or,field,is,available,return,the,method,parameter,or,code,null,if,none;public,method,parameter,get,method,parameter,return,this,method,parameter
DependencyDescriptor -> public MethodParameter getMethodParameter();1455889195;Return the wrapped MethodParameter, if any._<p>Note: Either MethodParameter or Field is available._@return the MethodParameter, or {@code null} if none;public MethodParameter getMethodParameter() {_		return this.methodParameter__	};return,the,wrapped,method,parameter,if,any,p,note,either,method,parameter,or,field,is,available,return,the,method,parameter,or,code,null,if,none;public,method,parameter,get,method,parameter,return,this,method,parameter
DependencyDescriptor -> private boolean hasNullableAnnotation();1482091448;Check whether the underlying field is annotated with any variant of a_{@code Nullable} annotation, e.g. {@code javax.annotation.Nullable} or_{@code edu.umd.cs.findbugs.annotations.Nullable}.;private boolean hasNullableAnnotation() {_		for (Annotation ann : getAnnotations()) {_			if ("Nullable".equals(ann.annotationType().getSimpleName())) {_				return true__			}_		}_		return false__	};check,whether,the,underlying,field,is,annotated,with,any,variant,of,a,code,nullable,annotation,e,g,code,javax,annotation,nullable,or,code,edu,umd,cs,findbugs,annotations,nullable;private,boolean,has,nullable,annotation,for,annotation,ann,get,annotations,if,nullable,equals,ann,annotation,type,get,simple,name,return,true,return,false
DependencyDescriptor -> private boolean hasNullableAnnotation();1485277217;Check whether the underlying field is annotated with any variant of a_{@code Nullable} annotation, e.g. {@code javax.annotation.Nullable} or_{@code edu.umd.cs.findbugs.annotations.Nullable}.;private boolean hasNullableAnnotation() {_		for (Annotation ann : getAnnotations()) {_			if ("Nullable".equals(ann.annotationType().getSimpleName())) {_				return true__			}_		}_		return false__	};check,whether,the,underlying,field,is,annotated,with,any,variant,of,a,code,nullable,annotation,e,g,code,javax,annotation,nullable,or,code,edu,umd,cs,findbugs,annotations,nullable;private,boolean,has,nullable,annotation,for,annotation,ann,get,annotations,if,nullable,equals,ann,annotation,type,get,simple,name,return,true,return,false
DependencyDescriptor -> private boolean hasNullableAnnotation();1485300605;Check whether the underlying field is annotated with any variant of a_{@code Nullable} annotation, e.g. {@code javax.annotation.Nullable} or_{@code edu.umd.cs.findbugs.annotations.Nullable}.;private boolean hasNullableAnnotation() {_		for (Annotation ann : getAnnotations()) {_			if ("Nullable".equals(ann.annotationType().getSimpleName())) {_				return true__			}_		}_		return false__	};check,whether,the,underlying,field,is,annotated,with,any,variant,of,a,code,nullable,annotation,e,g,code,javax,annotation,nullable,or,code,edu,umd,cs,findbugs,annotations,nullable;private,boolean,has,nullable,annotation,for,annotation,ann,get,annotations,if,nullable,equals,ann,annotation,type,get,simple,name,return,true,return,false
DependencyDescriptor -> private boolean hasNullableAnnotation();1495868221;Check whether the underlying field is annotated with any variant of a_{@code Nullable} annotation, e.g. {@code javax.annotation.Nullable} or_{@code edu.umd.cs.findbugs.annotations.Nullable}.;private boolean hasNullableAnnotation() {_		for (Annotation ann : getAnnotations()) {_			if ("Nullable".equals(ann.annotationType().getSimpleName())) {_				return true__			}_		}_		return false__	};check,whether,the,underlying,field,is,annotated,with,any,variant,of,a,code,nullable,annotation,e,g,code,javax,annotation,nullable,or,code,edu,umd,cs,findbugs,annotations,nullable;private,boolean,has,nullable,annotation,for,annotation,ann,get,annotations,if,nullable,equals,ann,annotation,type,get,simple,name,return,true,return,false
DependencyDescriptor -> private boolean hasNullableAnnotation();1496837955;Check whether the underlying field is annotated with any variant of a_{@code Nullable} annotation, e.g. {@code javax.annotation.Nullable} or_{@code edu.umd.cs.findbugs.annotations.Nullable}.;private boolean hasNullableAnnotation() {_		for (Annotation ann : getAnnotations()) {_			if ("Nullable".equals(ann.annotationType().getSimpleName())) {_				return true__			}_		}_		return false__	};check,whether,the,underlying,field,is,annotated,with,any,variant,of,a,code,nullable,annotation,e,g,code,javax,annotation,nullable,or,code,edu,umd,cs,findbugs,annotations,nullable;private,boolean,has,nullable,annotation,for,annotation,ann,get,annotations,if,nullable,equals,ann,annotation,type,get,simple,name,return,true,return,false
DependencyDescriptor -> private boolean hasNullableAnnotation();1498780456;Check whether the underlying field is annotated with any variant of a_{@code Nullable} annotation, e.g. {@code javax.annotation.Nullable} or_{@code edu.umd.cs.findbugs.annotations.Nullable}.;private boolean hasNullableAnnotation() {_		for (Annotation ann : getAnnotations()) {_			if ("Nullable".equals(ann.annotationType().getSimpleName())) {_				return true__			}_		}_		return false__	};check,whether,the,underlying,field,is,annotated,with,any,variant,of,a,code,nullable,annotation,e,g,code,javax,annotation,nullable,or,code,edu,umd,cs,findbugs,annotations,nullable;private,boolean,has,nullable,annotation,for,annotation,ann,get,annotations,if,nullable,equals,ann,annotation,type,get,simple,name,return,true,return,false
DependencyDescriptor -> private boolean hasNullableAnnotation();1503007895;Check whether the underlying field is annotated with any variant of a_{@code Nullable} annotation, e.g. {@code javax.annotation.Nullable} or_{@code edu.umd.cs.findbugs.annotations.Nullable}.;private boolean hasNullableAnnotation() {_		for (Annotation ann : getAnnotations()) {_			if ("Nullable".equals(ann.annotationType().getSimpleName())) {_				return true__			}_		}_		return false__	};check,whether,the,underlying,field,is,annotated,with,any,variant,of,a,code,nullable,annotation,e,g,code,javax,annotation,nullable,or,code,edu,umd,cs,findbugs,annotations,nullable;private,boolean,has,nullable,annotation,for,annotation,ann,get,annotations,if,nullable,equals,ann,annotation,type,get,simple,name,return,true,return,false
DependencyDescriptor -> private boolean hasNullableAnnotation();1503272000;Check whether the underlying field is annotated with any variant of a_{@code Nullable} annotation, e.g. {@code javax.annotation.Nullable} or_{@code edu.umd.cs.findbugs.annotations.Nullable}.;private boolean hasNullableAnnotation() {_		for (Annotation ann : getAnnotations()) {_			if ("Nullable".equals(ann.annotationType().getSimpleName())) {_				return true__			}_		}_		return false__	};check,whether,the,underlying,field,is,annotated,with,any,variant,of,a,code,nullable,annotation,e,g,code,javax,annotation,nullable,or,code,edu,umd,cs,findbugs,annotations,nullable;private,boolean,has,nullable,annotation,for,annotation,ann,get,annotations,if,nullable,equals,ann,annotation,type,get,simple,name,return,true,return,false
DependencyDescriptor -> private boolean hasNullableAnnotation();1503411745;Check whether the underlying field is annotated with any variant of a_{@code Nullable} annotation, e.g. {@code javax.annotation.Nullable} or_{@code edu.umd.cs.findbugs.annotations.Nullable}.;private boolean hasNullableAnnotation() {_		for (Annotation ann : getAnnotations()) {_			if ("Nullable".equals(ann.annotationType().getSimpleName())) {_				return true__			}_		}_		return false__	};check,whether,the,underlying,field,is,annotated,with,any,variant,of,a,code,nullable,annotation,e,g,code,javax,annotation,nullable,or,code,edu,umd,cs,findbugs,annotations,nullable;private,boolean,has,nullable,annotation,for,annotation,ann,get,annotations,if,nullable,equals,ann,annotation,type,get,simple,name,return,true,return,false
DependencyDescriptor -> private boolean hasNullableAnnotation();1506551472;Check whether the underlying field is annotated with any variant of a_{@code Nullable} annotation, e.g. {@code javax.annotation.Nullable} or_{@code edu.umd.cs.findbugs.annotations.Nullable}.;private boolean hasNullableAnnotation() {_		for (Annotation ann : getAnnotations()) {_			if ("Nullable".equals(ann.annotationType().getSimpleName())) {_				return true__			}_		}_		return false__	};check,whether,the,underlying,field,is,annotated,with,any,variant,of,a,code,nullable,annotation,e,g,code,javax,annotation,nullable,or,code,edu,umd,cs,findbugs,annotations,nullable;private,boolean,has,nullable,annotation,for,annotation,ann,get,annotations,if,nullable,equals,ann,annotation,type,get,simple,name,return,true,return,false
DependencyDescriptor -> private boolean hasNullableAnnotation();1530174524;Check whether the underlying field is annotated with any variant of a_{@code Nullable} annotation, e.g. {@code javax.annotation.Nullable} or_{@code edu.umd.cs.findbugs.annotations.Nullable}.;private boolean hasNullableAnnotation() {_		for (Annotation ann : getAnnotations()) {_			if ("Nullable".equals(ann.annotationType().getSimpleName())) {_				return true__			}_		}_		return false__	};check,whether,the,underlying,field,is,annotated,with,any,variant,of,a,code,nullable,annotation,e,g,code,javax,annotation,nullable,or,code,edu,umd,cs,findbugs,annotations,nullable;private,boolean,has,nullable,annotation,for,annotation,ann,get,annotations,if,nullable,equals,ann,annotation,type,get,simple,name,return,true,return,false
DependencyDescriptor -> private boolean hasNullableAnnotation();1530198749;Check whether the underlying field is annotated with any variant of a_{@code Nullable} annotation, e.g. {@code javax.annotation.Nullable} or_{@code edu.umd.cs.findbugs.annotations.Nullable}.;private boolean hasNullableAnnotation() {_		for (Annotation ann : getAnnotations()) {_			if ("Nullable".equals(ann.annotationType().getSimpleName())) {_				return true__			}_		}_		return false__	};check,whether,the,underlying,field,is,annotated,with,any,variant,of,a,code,nullable,annotation,e,g,code,javax,annotation,nullable,or,code,edu,umd,cs,findbugs,annotations,nullable;private,boolean,has,nullable,annotation,for,annotation,ann,get,annotations,if,nullable,equals,ann,annotation,type,get,simple,name,return,true,return,false
DependencyDescriptor -> private boolean hasNullableAnnotation();1530201727;Check whether the underlying field is annotated with any variant of a_{@code Nullable} annotation, e.g. {@code javax.annotation.Nullable} or_{@code edu.umd.cs.findbugs.annotations.Nullable}.;private boolean hasNullableAnnotation() {_		for (Annotation ann : getAnnotations()) {_			if ("Nullable".equals(ann.annotationType().getSimpleName())) {_				return true__			}_		}_		return false__	};check,whether,the,underlying,field,is,annotated,with,any,variant,of,a,code,nullable,annotation,e,g,code,javax,annotation,nullable,or,code,edu,umd,cs,findbugs,annotations,nullable;private,boolean,has,nullable,annotation,for,annotation,ann,get,annotations,if,nullable,equals,ann,annotation,type,get,simple,name,return,true,return,false
DependencyDescriptor -> private boolean hasNullableAnnotation();1532274593;Check whether the underlying field is annotated with any variant of a_{@code Nullable} annotation, e.g. {@code javax.annotation.Nullable} or_{@code edu.umd.cs.findbugs.annotations.Nullable}.;private boolean hasNullableAnnotation() {_		for (Annotation ann : getAnnotations()) {_			if ("Nullable".equals(ann.annotationType().getSimpleName())) {_				return true__			}_		}_		return false__	};check,whether,the,underlying,field,is,annotated,with,any,variant,of,a,code,nullable,annotation,e,g,code,javax,annotation,nullable,or,code,edu,umd,cs,findbugs,annotations,nullable;private,boolean,has,nullable,annotation,for,annotation,ann,get,annotations,if,nullable,equals,ann,annotation,type,get,simple,name,return,true,return,false
DependencyDescriptor -> private boolean hasNullableAnnotation();1532332488;Check whether the underlying field is annotated with any variant of a_{@code Nullable} annotation, e.g. {@code javax.annotation.Nullable} or_{@code edu.umd.cs.findbugs.annotations.Nullable}.;private boolean hasNullableAnnotation() {_		for (Annotation ann : getAnnotations()) {_			if ("Nullable".equals(ann.annotationType().getSimpleName())) {_				return true__			}_		}_		return false__	};check,whether,the,underlying,field,is,annotated,with,any,variant,of,a,code,nullable,annotation,e,g,code,javax,annotation,nullable,or,code,edu,umd,cs,findbugs,annotations,nullable;private,boolean,has,nullable,annotation,for,annotation,ann,get,annotations,if,nullable,equals,ann,annotation,type,get,simple,name,return,true,return,false
DependencyDescriptor -> private boolean hasNullableAnnotation();1532385723;Check whether the underlying field is annotated with any variant of a_{@code Nullable} annotation, e.g. {@code javax.annotation.Nullable} or_{@code edu.umd.cs.findbugs.annotations.Nullable}.;private boolean hasNullableAnnotation() {_		for (Annotation ann : getAnnotations()) {_			if ("Nullable".equals(ann.annotationType().getSimpleName())) {_				return true__			}_		}_		return false__	};check,whether,the,underlying,field,is,annotated,with,any,variant,of,a,code,nullable,annotation,e,g,code,javax,annotation,nullable,or,code,edu,umd,cs,findbugs,annotations,nullable;private,boolean,has,nullable,annotation,for,annotation,ann,get,annotations,if,nullable,equals,ann,annotation,type,get,simple,name,return,true,return,false
DependencyDescriptor -> private boolean hasNullableAnnotation();1535039984;Check whether the underlying field is annotated with any variant of a_{@code Nullable} annotation, e.g. {@code javax.annotation.Nullable} or_{@code edu.umd.cs.findbugs.annotations.Nullable}.;private boolean hasNullableAnnotation() {_		for (Annotation ann : getAnnotations()) {_			if ("Nullable".equals(ann.annotationType().getSimpleName())) {_				return true__			}_		}_		return false__	};check,whether,the,underlying,field,is,annotated,with,any,variant,of,a,code,nullable,annotation,e,g,code,javax,annotation,nullable,or,code,edu,umd,cs,findbugs,annotations,nullable;private,boolean,has,nullable,annotation,for,annotation,ann,get,annotations,if,nullable,equals,ann,annotation,type,get,simple,name,return,true,return,false
DependencyDescriptor -> private boolean hasNullableAnnotation();1536855799;Check whether the underlying field is annotated with any variant of a_{@code Nullable} annotation, e.g. {@code javax.annotation.Nullable} or_{@code edu.umd.cs.findbugs.annotations.Nullable}.;private boolean hasNullableAnnotation() {_		for (Annotation ann : getAnnotations()) {_			if ("Nullable".equals(ann.annotationType().getSimpleName())) {_				return true__			}_		}_		return false__	};check,whether,the,underlying,field,is,annotated,with,any,variant,of,a,code,nullable,annotation,e,g,code,javax,annotation,nullable,or,code,edu,umd,cs,findbugs,annotations,nullable;private,boolean,has,nullable,annotation,for,annotation,ann,get,annotations,if,nullable,equals,ann,annotation,type,get,simple,name,return,true,return,false
DependencyDescriptor -> private boolean hasNullableAnnotation();1546963887;Check whether the underlying field is annotated with any variant of a_{@code Nullable} annotation, e.g. {@code javax.annotation.Nullable} or_{@code edu.umd.cs.findbugs.annotations.Nullable}.;private boolean hasNullableAnnotation() {_		for (Annotation ann : getAnnotations()) {_			if ("Nullable".equals(ann.annotationType().getSimpleName())) {_				return true__			}_		}_		return false__	};check,whether,the,underlying,field,is,annotated,with,any,variant,of,a,code,nullable,annotation,e,g,code,javax,annotation,nullable,or,code,edu,umd,cs,findbugs,annotations,nullable;private,boolean,has,nullable,annotation,for,annotation,ann,get,annotations,if,nullable,equals,ann,annotation,type,get,simple,name,return,true,return,false
DependencyDescriptor -> public ResolvableType getResolvableType();1381788683;Build a ResolvableType object for the wrapped parameter/field.;public ResolvableType getResolvableType() {_		return (this.field != null ? ResolvableType.forField(this.field, this.nestingLevel, this.containingClass) :_				ResolvableType.forMethodParameter(this.methodParameter))__	};build,a,resolvable,type,object,for,the,wrapped,parameter,field;public,resolvable,type,get,resolvable,type,return,this,field,null,resolvable,type,for,field,this,field,this,nesting,level,this,containing,class,resolvable,type,for,method,parameter,this,method,parameter
DependencyDescriptor -> public ResolvableType getResolvableType();1382716358;Build a ResolvableType object for the wrapped parameter/field.;public ResolvableType getResolvableType() {_		return (this.field != null ? ResolvableType.forField(this.field, this.nestingLevel, this.containingClass) :_				ResolvableType.forMethodParameter(this.methodParameter))__	};build,a,resolvable,type,object,for,the,wrapped,parameter,field;public,resolvable,type,get,resolvable,type,return,this,field,null,resolvable,type,for,field,this,field,this,nesting,level,this,containing,class,resolvable,type,for,method,parameter,this,method,parameter
DependencyDescriptor -> public ResolvableType getResolvableType();1385412762;Build a ResolvableType object for the wrapped parameter/field.;public ResolvableType getResolvableType() {_		return (this.field != null ? ResolvableType.forField(this.field, this.nestingLevel, this.containingClass) :_				ResolvableType.forMethodParameter(this.methodParameter))__	};build,a,resolvable,type,object,for,the,wrapped,parameter,field;public,resolvable,type,get,resolvable,type,return,this,field,null,resolvable,type,for,field,this,field,this,nesting,level,this,containing,class,resolvable,type,for,method,parameter,this,method,parameter
DependencyDescriptor -> public ResolvableType getResolvableType();1402061390;Build a ResolvableType object for the wrapped parameter/field.;public ResolvableType getResolvableType() {_		return (this.field != null ? ResolvableType.forField(this.field, this.nestingLevel, this.containingClass) :_				ResolvableType.forMethodParameter(this.methodParameter))__	};build,a,resolvable,type,object,for,the,wrapped,parameter,field;public,resolvable,type,get,resolvable,type,return,this,field,null,resolvable,type,for,field,this,field,this,nesting,level,this,containing,class,resolvable,type,for,method,parameter,this,method,parameter
DependencyDescriptor -> public ResolvableType getResolvableType();1452685925;Build a ResolvableType object for the wrapped parameter/field._@since 4.0;public ResolvableType getResolvableType() {_		return (this.field != null ? ResolvableType.forField(this.field, this.nestingLevel, this.containingClass) :_				ResolvableType.forMethodParameter(this.methodParameter))__	};build,a,resolvable,type,object,for,the,wrapped,parameter,field,since,4,0;public,resolvable,type,get,resolvable,type,return,this,field,null,resolvable,type,for,field,this,field,this,nesting,level,this,containing,class,resolvable,type,for,method,parameter,this,method,parameter
DependencyDescriptor -> public ResolvableType getResolvableType();1455295525;Build a ResolvableType object for the wrapped parameter/field._@since 4.0;public ResolvableType getResolvableType() {_		return (this.field != null ? ResolvableType.forField(this.field, this.nestingLevel, this.containingClass) :_				ResolvableType.forMethodParameter(this.methodParameter))__	};build,a,resolvable,type,object,for,the,wrapped,parameter,field,since,4,0;public,resolvable,type,get,resolvable,type,return,this,field,null,resolvable,type,for,field,this,field,this,nesting,level,this,containing,class,resolvable,type,for,method,parameter,this,method,parameter
DependencyDescriptor -> public ResolvableType getResolvableType();1455889195;Build a ResolvableType object for the wrapped parameter/field._@since 4.0;public ResolvableType getResolvableType() {_		return (this.field != null ? ResolvableType.forField(this.field, this.nestingLevel, this.containingClass) :_				ResolvableType.forMethodParameter(this.methodParameter))__	};build,a,resolvable,type,object,for,the,wrapped,parameter,field,since,4,0;public,resolvable,type,get,resolvable,type,return,this,field,null,resolvable,type,for,field,this,field,this,nesting,level,this,containing,class,resolvable,type,for,method,parameter,this,method,parameter
DependencyDescriptor -> public ResolvableType getResolvableType();1456432609;Build a ResolvableType object for the wrapped parameter/field._@since 4.0;public ResolvableType getResolvableType() {_		return (this.field != null ? ResolvableType.forField(this.field, this.nestingLevel, this.containingClass) :_				ResolvableType.forMethodParameter(this.methodParameter))__	};build,a,resolvable,type,object,for,the,wrapped,parameter,field,since,4,0;public,resolvable,type,get,resolvable,type,return,this,field,null,resolvable,type,for,field,this,field,this,nesting,level,this,containing,class,resolvable,type,for,method,parameter,this,method,parameter
DependencyDescriptor -> public ResolvableType getResolvableType();1458755547;Build a ResolvableType object for the wrapped parameter/field._@since 4.0;public ResolvableType getResolvableType() {_		return (this.field != null ? ResolvableType.forField(this.field, this.nestingLevel, this.containingClass) :_				ResolvableType.forMethodParameter(this.methodParameter))__	};build,a,resolvable,type,object,for,the,wrapped,parameter,field,since,4,0;public,resolvable,type,get,resolvable,type,return,this,field,null,resolvable,type,for,field,this,field,this,nesting,level,this,containing,class,resolvable,type,for,method,parameter,this,method,parameter
DependencyDescriptor -> public ResolvableType getResolvableType();1466893134;Build a ResolvableType object for the wrapped parameter/field._@since 4.0;public ResolvableType getResolvableType() {_		return (this.field != null ? ResolvableType.forField(this.field, this.nestingLevel, this.containingClass) :_				ResolvableType.forMethodParameter(this.methodParameter))__	};build,a,resolvable,type,object,for,the,wrapped,parameter,field,since,4,0;public,resolvable,type,get,resolvable,type,return,this,field,null,resolvable,type,for,field,this,field,this,nesting,level,this,containing,class,resolvable,type,for,method,parameter,this,method,parameter
DependencyDescriptor -> public ResolvableType getResolvableType();1469030751;Build a ResolvableType object for the wrapped parameter/field._@since 4.0;public ResolvableType getResolvableType() {_		return (this.field != null ? ResolvableType.forField(this.field, this.nestingLevel, this.containingClass) :_				ResolvableType.forMethodParameter(this.methodParameter))__	};build,a,resolvable,type,object,for,the,wrapped,parameter,field,since,4,0;public,resolvable,type,get,resolvable,type,return,this,field,null,resolvable,type,for,field,this,field,this,nesting,level,this,containing,class,resolvable,type,for,method,parameter,this,method,parameter
DependencyDescriptor -> public ResolvableType getResolvableType();1481647138;Build a ResolvableType object for the wrapped parameter/field._@since 4.0;public ResolvableType getResolvableType() {_		return (this.field != null ? ResolvableType.forField(this.field, this.nestingLevel, this.containingClass) :_				ResolvableType.forMethodParameter(this.methodParameter))__	};build,a,resolvable,type,object,for,the,wrapped,parameter,field,since,4,0;public,resolvable,type,get,resolvable,type,return,this,field,null,resolvable,type,for,field,this,field,this,nesting,level,this,containing,class,resolvable,type,for,method,parameter,this,method,parameter
DependencyDescriptor -> public ResolvableType getResolvableType();1482091448;Build a ResolvableType object for the wrapped parameter/field._@since 4.0;public ResolvableType getResolvableType() {_		return (this.field != null ? ResolvableType.forField(this.field, this.nestingLevel, this.containingClass) :_				ResolvableType.forMethodParameter(this.methodParameter))__	};build,a,resolvable,type,object,for,the,wrapped,parameter,field,since,4,0;public,resolvable,type,get,resolvable,type,return,this,field,null,resolvable,type,for,field,this,field,this,nesting,level,this,containing,class,resolvable,type,for,method,parameter,this,method,parameter
DependencyDescriptor -> public ResolvableType getResolvableType();1485277217;Build a ResolvableType object for the wrapped parameter/field._@since 4.0;public ResolvableType getResolvableType() {_		if (this.resolvableType == null) {_			this.resolvableType = (this.field != null ?_					ResolvableType.forField(this.field, this.nestingLevel, this.containingClass) :_					ResolvableType.forMethodParameter(this.methodParameter))__		}_		return this.resolvableType__	};build,a,resolvable,type,object,for,the,wrapped,parameter,field,since,4,0;public,resolvable,type,get,resolvable,type,if,this,resolvable,type,null,this,resolvable,type,this,field,null,resolvable,type,for,field,this,field,this,nesting,level,this,containing,class,resolvable,type,for,method,parameter,this,method,parameter,return,this,resolvable,type
DependencyDescriptor -> public ResolvableType getResolvableType();1485300605;Build a ResolvableType object for the wrapped parameter/field._@since 4.0;public ResolvableType getResolvableType() {_		if (this.resolvableType == null) {_			this.resolvableType = (this.field != null ?_					ResolvableType.forField(this.field, this.nestingLevel, this.containingClass) :_					ResolvableType.forMethodParameter(this.methodParameter))__		}_		return this.resolvableType__	};build,a,resolvable,type,object,for,the,wrapped,parameter,field,since,4,0;public,resolvable,type,get,resolvable,type,if,this,resolvable,type,null,this,resolvable,type,this,field,null,resolvable,type,for,field,this,field,this,nesting,level,this,containing,class,resolvable,type,for,method,parameter,this,method,parameter,return,this,resolvable,type
DependencyDescriptor -> public ResolvableType getResolvableType();1495868221;Build a ResolvableType object for the wrapped parameter/field._@since 4.0;public ResolvableType getResolvableType() {_		if (this.resolvableType == null) {_			this.resolvableType = (this.field != null ?_					ResolvableType.forField(this.field, this.nestingLevel, this.containingClass) :_					ResolvableType.forMethodParameter(this.methodParameter))__		}_		return this.resolvableType__	};build,a,resolvable,type,object,for,the,wrapped,parameter,field,since,4,0;public,resolvable,type,get,resolvable,type,if,this,resolvable,type,null,this,resolvable,type,this,field,null,resolvable,type,for,field,this,field,this,nesting,level,this,containing,class,resolvable,type,for,method,parameter,this,method,parameter,return,this,resolvable,type
DependencyDescriptor -> public ResolvableType getResolvableType();1496837955;Build a ResolvableType object for the wrapped parameter/field._@since 4.0;public ResolvableType getResolvableType() {_		if (this.resolvableType == null) {_			this.resolvableType = (this.field != null ?_					ResolvableType.forField(this.field, this.nestingLevel, this.containingClass) :_					ResolvableType.forMethodParameter(this.methodParameter))__		}_		return this.resolvableType__	};build,a,resolvable,type,object,for,the,wrapped,parameter,field,since,4,0;public,resolvable,type,get,resolvable,type,if,this,resolvable,type,null,this,resolvable,type,this,field,null,resolvable,type,for,field,this,field,this,nesting,level,this,containing,class,resolvable,type,for,method,parameter,this,method,parameter,return,this,resolvable,type
DependencyDescriptor -> public ResolvableType getResolvableType();1498780456;Build a ResolvableType object for the wrapped parameter/field._@since 4.0;public ResolvableType getResolvableType() {_		ResolvableType resolvableType = this.resolvableType__		if (resolvableType == null) {_			resolvableType = (this.field != null ?_					ResolvableType.forField(this.field, this.nestingLevel, this.containingClass) :_					ResolvableType.forMethodParameter(obtainMethodParameter()))__			this.resolvableType = resolvableType__		}_		return resolvableType__	};build,a,resolvable,type,object,for,the,wrapped,parameter,field,since,4,0;public,resolvable,type,get,resolvable,type,resolvable,type,resolvable,type,this,resolvable,type,if,resolvable,type,null,resolvable,type,this,field,null,resolvable,type,for,field,this,field,this,nesting,level,this,containing,class,resolvable,type,for,method,parameter,obtain,method,parameter,this,resolvable,type,resolvable,type,return,resolvable,type
DependencyDescriptor -> public ResolvableType getResolvableType();1503007895;Build a ResolvableType object for the wrapped parameter/field._@since 4.0;public ResolvableType getResolvableType() {_		ResolvableType resolvableType = this.resolvableType__		if (resolvableType == null) {_			resolvableType = (this.field != null ?_					ResolvableType.forField(this.field, this.nestingLevel, this.containingClass) :_					ResolvableType.forMethodParameter(obtainMethodParameter()))__			this.resolvableType = resolvableType__		}_		return resolvableType__	};build,a,resolvable,type,object,for,the,wrapped,parameter,field,since,4,0;public,resolvable,type,get,resolvable,type,resolvable,type,resolvable,type,this,resolvable,type,if,resolvable,type,null,resolvable,type,this,field,null,resolvable,type,for,field,this,field,this,nesting,level,this,containing,class,resolvable,type,for,method,parameter,obtain,method,parameter,this,resolvable,type,resolvable,type,return,resolvable,type
DependencyDescriptor -> public ResolvableType getResolvableType();1503272000;Build a ResolvableType object for the wrapped parameter/field._@since 4.0;public ResolvableType getResolvableType() {_		ResolvableType resolvableType = this.resolvableType__		if (resolvableType == null) {_			resolvableType = (this.field != null ?_					ResolvableType.forField(this.field, this.nestingLevel, this.containingClass) :_					ResolvableType.forMethodParameter(obtainMethodParameter()))__			this.resolvableType = resolvableType__		}_		return resolvableType__	};build,a,resolvable,type,object,for,the,wrapped,parameter,field,since,4,0;public,resolvable,type,get,resolvable,type,resolvable,type,resolvable,type,this,resolvable,type,if,resolvable,type,null,resolvable,type,this,field,null,resolvable,type,for,field,this,field,this,nesting,level,this,containing,class,resolvable,type,for,method,parameter,obtain,method,parameter,this,resolvable,type,resolvable,type,return,resolvable,type
DependencyDescriptor -> public ResolvableType getResolvableType();1503411745;Build a ResolvableType object for the wrapped parameter/field._@since 4.0;public ResolvableType getResolvableType() {_		ResolvableType resolvableType = this.resolvableType__		if (resolvableType == null) {_			resolvableType = (this.field != null ?_					ResolvableType.forField(this.field, this.nestingLevel, this.containingClass) :_					ResolvableType.forMethodParameter(obtainMethodParameter()))__			this.resolvableType = resolvableType__		}_		return resolvableType__	};build,a,resolvable,type,object,for,the,wrapped,parameter,field,since,4,0;public,resolvable,type,get,resolvable,type,resolvable,type,resolvable,type,this,resolvable,type,if,resolvable,type,null,resolvable,type,this,field,null,resolvable,type,for,field,this,field,this,nesting,level,this,containing,class,resolvable,type,for,method,parameter,obtain,method,parameter,this,resolvable,type,resolvable,type,return,resolvable,type
DependencyDescriptor -> public ResolvableType getResolvableType();1506551472;Build a ResolvableType object for the wrapped parameter/field._@since 4.0;public ResolvableType getResolvableType() {_		ResolvableType resolvableType = this.resolvableType__		if (resolvableType == null) {_			resolvableType = (this.field != null ?_					ResolvableType.forField(this.field, this.nestingLevel, this.containingClass) :_					ResolvableType.forMethodParameter(obtainMethodParameter()))__			this.resolvableType = resolvableType__		}_		return resolvableType__	};build,a,resolvable,type,object,for,the,wrapped,parameter,field,since,4,0;public,resolvable,type,get,resolvable,type,resolvable,type,resolvable,type,this,resolvable,type,if,resolvable,type,null,resolvable,type,this,field,null,resolvable,type,for,field,this,field,this,nesting,level,this,containing,class,resolvable,type,for,method,parameter,obtain,method,parameter,this,resolvable,type,resolvable,type,return,resolvable,type
DependencyDescriptor -> public ResolvableType getResolvableType();1530174524;Build a ResolvableType object for the wrapped parameter/field._@since 4.0;public ResolvableType getResolvableType() {_		ResolvableType resolvableType = this.resolvableType__		if (resolvableType == null) {_			resolvableType = (this.field != null ?_					ResolvableType.forField(this.field, this.nestingLevel, this.containingClass) :_					ResolvableType.forMethodParameter(obtainMethodParameter()))__			this.resolvableType = resolvableType__		}_		return resolvableType__	};build,a,resolvable,type,object,for,the,wrapped,parameter,field,since,4,0;public,resolvable,type,get,resolvable,type,resolvable,type,resolvable,type,this,resolvable,type,if,resolvable,type,null,resolvable,type,this,field,null,resolvable,type,for,field,this,field,this,nesting,level,this,containing,class,resolvable,type,for,method,parameter,obtain,method,parameter,this,resolvable,type,resolvable,type,return,resolvable,type
DependencyDescriptor -> public ResolvableType getResolvableType();1530198749;Build a ResolvableType object for the wrapped parameter/field._@since 4.0;public ResolvableType getResolvableType() {_		ResolvableType resolvableType = this.resolvableType__		if (resolvableType == null) {_			resolvableType = (this.field != null ?_					ResolvableType.forField(this.field, this.nestingLevel, this.containingClass) :_					ResolvableType.forMethodParameter(obtainMethodParameter()))__			this.resolvableType = resolvableType__		}_		return resolvableType__	};build,a,resolvable,type,object,for,the,wrapped,parameter,field,since,4,0;public,resolvable,type,get,resolvable,type,resolvable,type,resolvable,type,this,resolvable,type,if,resolvable,type,null,resolvable,type,this,field,null,resolvable,type,for,field,this,field,this,nesting,level,this,containing,class,resolvable,type,for,method,parameter,obtain,method,parameter,this,resolvable,type,resolvable,type,return,resolvable,type
DependencyDescriptor -> public ResolvableType getResolvableType();1530201727;Build a ResolvableType object for the wrapped parameter/field._@since 4.0;public ResolvableType getResolvableType() {_		ResolvableType resolvableType = this.resolvableType__		if (resolvableType == null) {_			resolvableType = (this.field != null ?_					ResolvableType.forField(this.field, this.nestingLevel, this.containingClass) :_					ResolvableType.forMethodParameter(obtainMethodParameter()))__			this.resolvableType = resolvableType__		}_		return resolvableType__	};build,a,resolvable,type,object,for,the,wrapped,parameter,field,since,4,0;public,resolvable,type,get,resolvable,type,resolvable,type,resolvable,type,this,resolvable,type,if,resolvable,type,null,resolvable,type,this,field,null,resolvable,type,for,field,this,field,this,nesting,level,this,containing,class,resolvable,type,for,method,parameter,obtain,method,parameter,this,resolvable,type,resolvable,type,return,resolvable,type
DependencyDescriptor -> public ResolvableType getResolvableType();1532274593;Build a ResolvableType object for the wrapped parameter/field._@since 4.0;public ResolvableType getResolvableType() {_		ResolvableType resolvableType = this.resolvableType__		if (resolvableType == null) {_			resolvableType = (this.field != null ?_					ResolvableType.forField(this.field, this.nestingLevel, this.containingClass) :_					ResolvableType.forMethodParameter(obtainMethodParameter()))__			this.resolvableType = resolvableType__		}_		return resolvableType__	};build,a,resolvable,type,object,for,the,wrapped,parameter,field,since,4,0;public,resolvable,type,get,resolvable,type,resolvable,type,resolvable,type,this,resolvable,type,if,resolvable,type,null,resolvable,type,this,field,null,resolvable,type,for,field,this,field,this,nesting,level,this,containing,class,resolvable,type,for,method,parameter,obtain,method,parameter,this,resolvable,type,resolvable,type,return,resolvable,type
DependencyDescriptor -> public ResolvableType getResolvableType();1532332488;Build a ResolvableType object for the wrapped parameter/field._@since 4.0;public ResolvableType getResolvableType() {_		ResolvableType resolvableType = this.resolvableType__		if (resolvableType == null) {_			resolvableType = (this.field != null ?_					ResolvableType.forField(this.field, this.nestingLevel, this.containingClass) :_					ResolvableType.forMethodParameter(obtainMethodParameter()))__			this.resolvableType = resolvableType__		}_		return resolvableType__	};build,a,resolvable,type,object,for,the,wrapped,parameter,field,since,4,0;public,resolvable,type,get,resolvable,type,resolvable,type,resolvable,type,this,resolvable,type,if,resolvable,type,null,resolvable,type,this,field,null,resolvable,type,for,field,this,field,this,nesting,level,this,containing,class,resolvable,type,for,method,parameter,obtain,method,parameter,this,resolvable,type,resolvable,type,return,resolvable,type
DependencyDescriptor -> public ResolvableType getResolvableType();1532385723;Build a ResolvableType object for the wrapped parameter/field._@since 4.0;public ResolvableType getResolvableType() {_		ResolvableType resolvableType = this.resolvableType__		if (resolvableType == null) {_			resolvableType = (this.field != null ?_					ResolvableType.forField(this.field, this.nestingLevel, this.containingClass) :_					ResolvableType.forMethodParameter(obtainMethodParameter()))__			this.resolvableType = resolvableType__		}_		return resolvableType__	};build,a,resolvable,type,object,for,the,wrapped,parameter,field,since,4,0;public,resolvable,type,get,resolvable,type,resolvable,type,resolvable,type,this,resolvable,type,if,resolvable,type,null,resolvable,type,this,field,null,resolvable,type,for,field,this,field,this,nesting,level,this,containing,class,resolvable,type,for,method,parameter,obtain,method,parameter,this,resolvable,type,resolvable,type,return,resolvable,type
DependencyDescriptor -> public ResolvableType getResolvableType();1535039984;Build a ResolvableType object for the wrapped parameter/field._@since 4.0;public ResolvableType getResolvableType() {_		ResolvableType resolvableType = this.resolvableType__		if (resolvableType == null) {_			resolvableType = (this.field != null ?_					ResolvableType.forField(this.field, this.nestingLevel, this.containingClass) :_					ResolvableType.forMethodParameter(obtainMethodParameter()))__			this.resolvableType = resolvableType__		}_		return resolvableType__	};build,a,resolvable,type,object,for,the,wrapped,parameter,field,since,4,0;public,resolvable,type,get,resolvable,type,resolvable,type,resolvable,type,this,resolvable,type,if,resolvable,type,null,resolvable,type,this,field,null,resolvable,type,for,field,this,field,this,nesting,level,this,containing,class,resolvable,type,for,method,parameter,obtain,method,parameter,this,resolvable,type,resolvable,type,return,resolvable,type
DependencyDescriptor -> public ResolvableType getResolvableType();1536855799;Build a ResolvableType object for the wrapped parameter/field._@since 4.0;public ResolvableType getResolvableType() {_		ResolvableType resolvableType = this.resolvableType__		if (resolvableType == null) {_			resolvableType = (this.field != null ?_					ResolvableType.forField(this.field, this.nestingLevel, this.containingClass) :_					ResolvableType.forMethodParameter(obtainMethodParameter()))__			this.resolvableType = resolvableType__		}_		return resolvableType__	};build,a,resolvable,type,object,for,the,wrapped,parameter,field,since,4,0;public,resolvable,type,get,resolvable,type,resolvable,type,resolvable,type,this,resolvable,type,if,resolvable,type,null,resolvable,type,this,field,null,resolvable,type,for,field,this,field,this,nesting,level,this,containing,class,resolvable,type,for,method,parameter,obtain,method,parameter,this,resolvable,type,resolvable,type,return,resolvable,type
DependencyDescriptor -> public ResolvableType getResolvableType();1546963887;Build a {@link ResolvableType} object for the wrapped parameter/field._@since 4.0;public ResolvableType getResolvableType() {_		ResolvableType resolvableType = this.resolvableType__		if (resolvableType == null) {_			resolvableType = (this.field != null ?_					ResolvableType.forField(this.field, this.nestingLevel, this.containingClass) :_					ResolvableType.forMethodParameter(obtainMethodParameter()))__			this.resolvableType = resolvableType__		}_		return resolvableType__	};build,a,link,resolvable,type,object,for,the,wrapped,parameter,field,since,4,0;public,resolvable,type,get,resolvable,type,resolvable,type,resolvable,type,this,resolvable,type,if,resolvable,type,null,resolvable,type,this,field,null,resolvable,type,for,field,this,field,this,nesting,level,this,containing,class,resolvable,type,for,method,parameter,obtain,method,parameter,this,resolvable,type,resolvable,type,return,resolvable,type
DependencyDescriptor -> public void initParameterNameDiscovery(ParameterNameDiscoverer parameterNameDiscoverer);1328020251;Initialize parameter name discovery for the underlying method parameter, if any._<p>This method does not actually try to retrieve the parameter name at_this point_ it just allows discovery to happen when the application calls_{@link #getDependencyName()} (if ever).;public void initParameterNameDiscovery(ParameterNameDiscoverer parameterNameDiscoverer) {_		if (this.methodParameter != null) {_			this.methodParameter.initParameterNameDiscovery(parameterNameDiscoverer)__		}_	};initialize,parameter,name,discovery,for,the,underlying,method,parameter,if,any,p,this,method,does,not,actually,try,to,retrieve,the,parameter,name,at,this,point,it,just,allows,discovery,to,happen,when,the,application,calls,link,get,dependency,name,if,ever;public,void,init,parameter,name,discovery,parameter,name,discoverer,parameter,name,discoverer,if,this,method,parameter,null,this,method,parameter,init,parameter,name,discovery,parameter,name,discoverer
DependencyDescriptor -> public void initParameterNameDiscovery(ParameterNameDiscoverer parameterNameDiscoverer);1329142650;Initialize parameter name discovery for the underlying method parameter, if any._<p>This method does not actually try to retrieve the parameter name at_this point_ it just allows discovery to happen when the application calls_{@link #getDependencyName()} (if ever).;public void initParameterNameDiscovery(ParameterNameDiscoverer parameterNameDiscoverer) {_		if (this.methodParameter != null) {_			this.methodParameter.initParameterNameDiscovery(parameterNameDiscoverer)__		}_	};initialize,parameter,name,discovery,for,the,underlying,method,parameter,if,any,p,this,method,does,not,actually,try,to,retrieve,the,parameter,name,at,this,point,it,just,allows,discovery,to,happen,when,the,application,calls,link,get,dependency,name,if,ever;public,void,init,parameter,name,discovery,parameter,name,discoverer,parameter,name,discoverer,if,this,method,parameter,null,this,method,parameter,init,parameter,name,discovery,parameter,name,discoverer
DependencyDescriptor -> public void initParameterNameDiscovery(ParameterNameDiscoverer parameterNameDiscoverer);1346421549;Initialize parameter name discovery for the underlying method parameter, if any._<p>This method does not actually try to retrieve the parameter name at_this point_ it just allows discovery to happen when the application calls_{@link #getDependencyName()} (if ever).;public void initParameterNameDiscovery(ParameterNameDiscoverer parameterNameDiscoverer) {_		if (this.methodParameter != null) {_			this.methodParameter.initParameterNameDiscovery(parameterNameDiscoverer)__		}_	};initialize,parameter,name,discovery,for,the,underlying,method,parameter,if,any,p,this,method,does,not,actually,try,to,retrieve,the,parameter,name,at,this,point,it,just,allows,discovery,to,happen,when,the,application,calls,link,get,dependency,name,if,ever;public,void,init,parameter,name,discovery,parameter,name,discoverer,parameter,name,discoverer,if,this,method,parameter,null,this,method,parameter,init,parameter,name,discovery,parameter,name,discoverer
DependencyDescriptor -> public void initParameterNameDiscovery(ParameterNameDiscoverer parameterNameDiscoverer);1350077654;Initialize parameter name discovery for the underlying method parameter, if any._<p>This method does not actually try to retrieve the parameter name at_this point_ it just allows discovery to happen when the application calls_{@link #getDependencyName()} (if ever).;public void initParameterNameDiscovery(ParameterNameDiscoverer parameterNameDiscoverer) {_		if (this.methodParameter != null) {_			this.methodParameter.initParameterNameDiscovery(parameterNameDiscoverer)__		}_	};initialize,parameter,name,discovery,for,the,underlying,method,parameter,if,any,p,this,method,does,not,actually,try,to,retrieve,the,parameter,name,at,this,point,it,just,allows,discovery,to,happen,when,the,application,calls,link,get,dependency,name,if,ever;public,void,init,parameter,name,discovery,parameter,name,discoverer,parameter,name,discoverer,if,this,method,parameter,null,this,method,parameter,init,parameter,name,discovery,parameter,name,discoverer
DependencyDescriptor -> public void initParameterNameDiscovery(ParameterNameDiscoverer parameterNameDiscoverer);1356735495;Initialize parameter name discovery for the underlying method parameter, if any._<p>This method does not actually try to retrieve the parameter name at_this point_ it just allows discovery to happen when the application calls_{@link #getDependencyName()} (if ever).;public void initParameterNameDiscovery(ParameterNameDiscoverer parameterNameDiscoverer) {_		if (this.methodParameter != null) {_			this.methodParameter.initParameterNameDiscovery(parameterNameDiscoverer)__		}_	};initialize,parameter,name,discovery,for,the,underlying,method,parameter,if,any,p,this,method,does,not,actually,try,to,retrieve,the,parameter,name,at,this,point,it,just,allows,discovery,to,happen,when,the,application,calls,link,get,dependency,name,if,ever;public,void,init,parameter,name,discovery,parameter,name,discoverer,parameter,name,discoverer,if,this,method,parameter,null,this,method,parameter,init,parameter,name,discovery,parameter,name,discoverer
DependencyDescriptor -> public void initParameterNameDiscovery(ParameterNameDiscoverer parameterNameDiscoverer);1377641038;Initialize parameter name discovery for the underlying method parameter, if any._<p>This method does not actually try to retrieve the parameter name at_this point_ it just allows discovery to happen when the application calls_{@link #getDependencyName()} (if ever).;public void initParameterNameDiscovery(ParameterNameDiscoverer parameterNameDiscoverer) {_		if (this.methodParameter != null) {_			this.methodParameter.initParameterNameDiscovery(parameterNameDiscoverer)__		}_	};initialize,parameter,name,discovery,for,the,underlying,method,parameter,if,any,p,this,method,does,not,actually,try,to,retrieve,the,parameter,name,at,this,point,it,just,allows,discovery,to,happen,when,the,application,calls,link,get,dependency,name,if,ever;public,void,init,parameter,name,discovery,parameter,name,discoverer,parameter,name,discoverer,if,this,method,parameter,null,this,method,parameter,init,parameter,name,discovery,parameter,name,discoverer
DependencyDescriptor -> public void initParameterNameDiscovery(ParameterNameDiscoverer parameterNameDiscoverer);1381788683;Initialize parameter name discovery for the underlying method parameter, if any._<p>This method does not actually try to retrieve the parameter name at_this point_ it just allows discovery to happen when the application calls_{@link #getDependencyName()} (if ever).;public void initParameterNameDiscovery(ParameterNameDiscoverer parameterNameDiscoverer) {_		if (this.methodParameter != null) {_			this.methodParameter.initParameterNameDiscovery(parameterNameDiscoverer)__		}_	};initialize,parameter,name,discovery,for,the,underlying,method,parameter,if,any,p,this,method,does,not,actually,try,to,retrieve,the,parameter,name,at,this,point,it,just,allows,discovery,to,happen,when,the,application,calls,link,get,dependency,name,if,ever;public,void,init,parameter,name,discovery,parameter,name,discoverer,parameter,name,discoverer,if,this,method,parameter,null,this,method,parameter,init,parameter,name,discovery,parameter,name,discoverer
DependencyDescriptor -> public void initParameterNameDiscovery(ParameterNameDiscoverer parameterNameDiscoverer);1382716358;Initialize parameter name discovery for the underlying method parameter, if any._<p>This method does not actually try to retrieve the parameter name at_this point_ it just allows discovery to happen when the application calls_{@link #getDependencyName()} (if ever).;public void initParameterNameDiscovery(ParameterNameDiscoverer parameterNameDiscoverer) {_		if (this.methodParameter != null) {_			this.methodParameter.initParameterNameDiscovery(parameterNameDiscoverer)__		}_	};initialize,parameter,name,discovery,for,the,underlying,method,parameter,if,any,p,this,method,does,not,actually,try,to,retrieve,the,parameter,name,at,this,point,it,just,allows,discovery,to,happen,when,the,application,calls,link,get,dependency,name,if,ever;public,void,init,parameter,name,discovery,parameter,name,discoverer,parameter,name,discoverer,if,this,method,parameter,null,this,method,parameter,init,parameter,name,discovery,parameter,name,discoverer
DependencyDescriptor -> public void initParameterNameDiscovery(ParameterNameDiscoverer parameterNameDiscoverer);1385412762;Initialize parameter name discovery for the underlying method parameter, if any._<p>This method does not actually try to retrieve the parameter name at_this point_ it just allows discovery to happen when the application calls_{@link #getDependencyName()} (if ever).;public void initParameterNameDiscovery(ParameterNameDiscoverer parameterNameDiscoverer) {_		if (this.methodParameter != null) {_			this.methodParameter.initParameterNameDiscovery(parameterNameDiscoverer)__		}_	};initialize,parameter,name,discovery,for,the,underlying,method,parameter,if,any,p,this,method,does,not,actually,try,to,retrieve,the,parameter,name,at,this,point,it,just,allows,discovery,to,happen,when,the,application,calls,link,get,dependency,name,if,ever;public,void,init,parameter,name,discovery,parameter,name,discoverer,parameter,name,discoverer,if,this,method,parameter,null,this,method,parameter,init,parameter,name,discovery,parameter,name,discoverer
DependencyDescriptor -> public void initParameterNameDiscovery(ParameterNameDiscoverer parameterNameDiscoverer);1402061390;Initialize parameter name discovery for the underlying method parameter, if any._<p>This method does not actually try to retrieve the parameter name at_this point_ it just allows discovery to happen when the application calls_{@link #getDependencyName()} (if ever).;public void initParameterNameDiscovery(ParameterNameDiscoverer parameterNameDiscoverer) {_		if (this.methodParameter != null) {_			this.methodParameter.initParameterNameDiscovery(parameterNameDiscoverer)__		}_	};initialize,parameter,name,discovery,for,the,underlying,method,parameter,if,any,p,this,method,does,not,actually,try,to,retrieve,the,parameter,name,at,this,point,it,just,allows,discovery,to,happen,when,the,application,calls,link,get,dependency,name,if,ever;public,void,init,parameter,name,discovery,parameter,name,discoverer,parameter,name,discoverer,if,this,method,parameter,null,this,method,parameter,init,parameter,name,discovery,parameter,name,discoverer
DependencyDescriptor -> public void initParameterNameDiscovery(ParameterNameDiscoverer parameterNameDiscoverer);1452685925;Initialize parameter name discovery for the underlying method parameter, if any._<p>This method does not actually try to retrieve the parameter name at_this point_ it just allows discovery to happen when the application calls_{@link #getDependencyName()} (if ever).;public void initParameterNameDiscovery(ParameterNameDiscoverer parameterNameDiscoverer) {_		if (this.methodParameter != null) {_			this.methodParameter.initParameterNameDiscovery(parameterNameDiscoverer)__		}_	};initialize,parameter,name,discovery,for,the,underlying,method,parameter,if,any,p,this,method,does,not,actually,try,to,retrieve,the,parameter,name,at,this,point,it,just,allows,discovery,to,happen,when,the,application,calls,link,get,dependency,name,if,ever;public,void,init,parameter,name,discovery,parameter,name,discoverer,parameter,name,discoverer,if,this,method,parameter,null,this,method,parameter,init,parameter,name,discovery,parameter,name,discoverer
DependencyDescriptor -> public void initParameterNameDiscovery(ParameterNameDiscoverer parameterNameDiscoverer);1455295525;Initialize parameter name discovery for the underlying method parameter, if any._<p>This method does not actually try to retrieve the parameter name at_this point_ it just allows discovery to happen when the application calls_{@link #getDependencyName()} (if ever).;public void initParameterNameDiscovery(ParameterNameDiscoverer parameterNameDiscoverer) {_		if (this.methodParameter != null) {_			this.methodParameter.initParameterNameDiscovery(parameterNameDiscoverer)__		}_	};initialize,parameter,name,discovery,for,the,underlying,method,parameter,if,any,p,this,method,does,not,actually,try,to,retrieve,the,parameter,name,at,this,point,it,just,allows,discovery,to,happen,when,the,application,calls,link,get,dependency,name,if,ever;public,void,init,parameter,name,discovery,parameter,name,discoverer,parameter,name,discoverer,if,this,method,parameter,null,this,method,parameter,init,parameter,name,discovery,parameter,name,discoverer
DependencyDescriptor -> public void initParameterNameDiscovery(ParameterNameDiscoverer parameterNameDiscoverer);1455889195;Initialize parameter name discovery for the underlying method parameter, if any._<p>This method does not actually try to retrieve the parameter name at_this point_ it just allows discovery to happen when the application calls_{@link #getDependencyName()} (if ever).;public void initParameterNameDiscovery(ParameterNameDiscoverer parameterNameDiscoverer) {_		if (this.methodParameter != null) {_			this.methodParameter.initParameterNameDiscovery(parameterNameDiscoverer)__		}_	};initialize,parameter,name,discovery,for,the,underlying,method,parameter,if,any,p,this,method,does,not,actually,try,to,retrieve,the,parameter,name,at,this,point,it,just,allows,discovery,to,happen,when,the,application,calls,link,get,dependency,name,if,ever;public,void,init,parameter,name,discovery,parameter,name,discoverer,parameter,name,discoverer,if,this,method,parameter,null,this,method,parameter,init,parameter,name,discovery,parameter,name,discoverer
DependencyDescriptor -> public void initParameterNameDiscovery(ParameterNameDiscoverer parameterNameDiscoverer);1456432609;Initialize parameter name discovery for the underlying method parameter, if any._<p>This method does not actually try to retrieve the parameter name at_this point_ it just allows discovery to happen when the application calls_{@link #getDependencyName()} (if ever).;public void initParameterNameDiscovery(ParameterNameDiscoverer parameterNameDiscoverer) {_		if (this.methodParameter != null) {_			this.methodParameter.initParameterNameDiscovery(parameterNameDiscoverer)__		}_	};initialize,parameter,name,discovery,for,the,underlying,method,parameter,if,any,p,this,method,does,not,actually,try,to,retrieve,the,parameter,name,at,this,point,it,just,allows,discovery,to,happen,when,the,application,calls,link,get,dependency,name,if,ever;public,void,init,parameter,name,discovery,parameter,name,discoverer,parameter,name,discoverer,if,this,method,parameter,null,this,method,parameter,init,parameter,name,discovery,parameter,name,discoverer
DependencyDescriptor -> public void initParameterNameDiscovery(ParameterNameDiscoverer parameterNameDiscoverer);1458755547;Initialize parameter name discovery for the underlying method parameter, if any._<p>This method does not actually try to retrieve the parameter name at_this point_ it just allows discovery to happen when the application calls_{@link #getDependencyName()} (if ever).;public void initParameterNameDiscovery(ParameterNameDiscoverer parameterNameDiscoverer) {_		if (this.methodParameter != null) {_			this.methodParameter.initParameterNameDiscovery(parameterNameDiscoverer)__		}_	};initialize,parameter,name,discovery,for,the,underlying,method,parameter,if,any,p,this,method,does,not,actually,try,to,retrieve,the,parameter,name,at,this,point,it,just,allows,discovery,to,happen,when,the,application,calls,link,get,dependency,name,if,ever;public,void,init,parameter,name,discovery,parameter,name,discoverer,parameter,name,discoverer,if,this,method,parameter,null,this,method,parameter,init,parameter,name,discovery,parameter,name,discoverer
DependencyDescriptor -> public void initParameterNameDiscovery(ParameterNameDiscoverer parameterNameDiscoverer);1466893134;Initialize parameter name discovery for the underlying method parameter, if any._<p>This method does not actually try to retrieve the parameter name at_this point_ it just allows discovery to happen when the application calls_{@link #getDependencyName()} (if ever).;public void initParameterNameDiscovery(ParameterNameDiscoverer parameterNameDiscoverer) {_		if (this.methodParameter != null) {_			this.methodParameter.initParameterNameDiscovery(parameterNameDiscoverer)__		}_	};initialize,parameter,name,discovery,for,the,underlying,method,parameter,if,any,p,this,method,does,not,actually,try,to,retrieve,the,parameter,name,at,this,point,it,just,allows,discovery,to,happen,when,the,application,calls,link,get,dependency,name,if,ever;public,void,init,parameter,name,discovery,parameter,name,discoverer,parameter,name,discoverer,if,this,method,parameter,null,this,method,parameter,init,parameter,name,discovery,parameter,name,discoverer
DependencyDescriptor -> public void initParameterNameDiscovery(ParameterNameDiscoverer parameterNameDiscoverer);1469030751;Initialize parameter name discovery for the underlying method parameter, if any._<p>This method does not actually try to retrieve the parameter name at_this point_ it just allows discovery to happen when the application calls_{@link #getDependencyName()} (if ever).;public void initParameterNameDiscovery(ParameterNameDiscoverer parameterNameDiscoverer) {_		if (this.methodParameter != null) {_			this.methodParameter.initParameterNameDiscovery(parameterNameDiscoverer)__		}_	};initialize,parameter,name,discovery,for,the,underlying,method,parameter,if,any,p,this,method,does,not,actually,try,to,retrieve,the,parameter,name,at,this,point,it,just,allows,discovery,to,happen,when,the,application,calls,link,get,dependency,name,if,ever;public,void,init,parameter,name,discovery,parameter,name,discoverer,parameter,name,discoverer,if,this,method,parameter,null,this,method,parameter,init,parameter,name,discovery,parameter,name,discoverer
DependencyDescriptor -> public void initParameterNameDiscovery(ParameterNameDiscoverer parameterNameDiscoverer);1481647138;Initialize parameter name discovery for the underlying method parameter, if any._<p>This method does not actually try to retrieve the parameter name at_this point_ it just allows discovery to happen when the application calls_{@link #getDependencyName()} (if ever).;public void initParameterNameDiscovery(ParameterNameDiscoverer parameterNameDiscoverer) {_		if (this.methodParameter != null) {_			this.methodParameter.initParameterNameDiscovery(parameterNameDiscoverer)__		}_	};initialize,parameter,name,discovery,for,the,underlying,method,parameter,if,any,p,this,method,does,not,actually,try,to,retrieve,the,parameter,name,at,this,point,it,just,allows,discovery,to,happen,when,the,application,calls,link,get,dependency,name,if,ever;public,void,init,parameter,name,discovery,parameter,name,discoverer,parameter,name,discoverer,if,this,method,parameter,null,this,method,parameter,init,parameter,name,discovery,parameter,name,discoverer
DependencyDescriptor -> public void initParameterNameDiscovery(ParameterNameDiscoverer parameterNameDiscoverer);1482091448;Initialize parameter name discovery for the underlying method parameter, if any._<p>This method does not actually try to retrieve the parameter name at_this point_ it just allows discovery to happen when the application calls_{@link #getDependencyName()} (if ever).;public void initParameterNameDiscovery(ParameterNameDiscoverer parameterNameDiscoverer) {_		if (this.methodParameter != null) {_			this.methodParameter.initParameterNameDiscovery(parameterNameDiscoverer)__		}_	};initialize,parameter,name,discovery,for,the,underlying,method,parameter,if,any,p,this,method,does,not,actually,try,to,retrieve,the,parameter,name,at,this,point,it,just,allows,discovery,to,happen,when,the,application,calls,link,get,dependency,name,if,ever;public,void,init,parameter,name,discovery,parameter,name,discoverer,parameter,name,discoverer,if,this,method,parameter,null,this,method,parameter,init,parameter,name,discovery,parameter,name,discoverer
DependencyDescriptor -> public void initParameterNameDiscovery(ParameterNameDiscoverer parameterNameDiscoverer);1485277217;Initialize parameter name discovery for the underlying method parameter, if any._<p>This method does not actually try to retrieve the parameter name at_this point_ it just allows discovery to happen when the application calls_{@link #getDependencyName()} (if ever).;public void initParameterNameDiscovery(ParameterNameDiscoverer parameterNameDiscoverer) {_		if (this.methodParameter != null) {_			this.methodParameter.initParameterNameDiscovery(parameterNameDiscoverer)__		}_	};initialize,parameter,name,discovery,for,the,underlying,method,parameter,if,any,p,this,method,does,not,actually,try,to,retrieve,the,parameter,name,at,this,point,it,just,allows,discovery,to,happen,when,the,application,calls,link,get,dependency,name,if,ever;public,void,init,parameter,name,discovery,parameter,name,discoverer,parameter,name,discoverer,if,this,method,parameter,null,this,method,parameter,init,parameter,name,discovery,parameter,name,discoverer
DependencyDescriptor -> public void initParameterNameDiscovery(ParameterNameDiscoverer parameterNameDiscoverer);1485300605;Initialize parameter name discovery for the underlying method parameter, if any._<p>This method does not actually try to retrieve the parameter name at_this point_ it just allows discovery to happen when the application calls_{@link #getDependencyName()} (if ever).;public void initParameterNameDiscovery(ParameterNameDiscoverer parameterNameDiscoverer) {_		if (this.methodParameter != null) {_			this.methodParameter.initParameterNameDiscovery(parameterNameDiscoverer)__		}_	};initialize,parameter,name,discovery,for,the,underlying,method,parameter,if,any,p,this,method,does,not,actually,try,to,retrieve,the,parameter,name,at,this,point,it,just,allows,discovery,to,happen,when,the,application,calls,link,get,dependency,name,if,ever;public,void,init,parameter,name,discovery,parameter,name,discoverer,parameter,name,discoverer,if,this,method,parameter,null,this,method,parameter,init,parameter,name,discovery,parameter,name,discoverer
DependencyDescriptor -> @Nullable 	public Object resolveNotUnique(ResolvableType type, Map<String, Object> matchingBeans) throws BeansException;1532385723;Resolve the specified not-unique scenario: by default,_throwing a {@link NoUniqueBeanDefinitionException}._<p>Subclasses may override this to select one of the instances or_to opt out with no result at all through returning {@code null}._@param type the requested bean type_@param matchingBeans a map of bean names and corresponding bean_instances which have been pre-selected for the given type_(qualifiers etc already applied)_@return a bean instance to proceed with, or {@code null} for none_@throws BeansException in case of the not-unique scenario being fatal_@since 5.1;@Nullable_	public Object resolveNotUnique(ResolvableType type, Map<String, Object> matchingBeans) throws BeansException {_		throw new NoUniqueBeanDefinitionException(type, matchingBeans.keySet())__	};resolve,the,specified,not,unique,scenario,by,default,throwing,a,link,no,unique,bean,definition,exception,p,subclasses,may,override,this,to,select,one,of,the,instances,or,to,opt,out,with,no,result,at,all,through,returning,code,null,param,type,the,requested,bean,type,param,matching,beans,a,map,of,bean,names,and,corresponding,bean,instances,which,have,been,pre,selected,for,the,given,type,qualifiers,etc,already,applied,return,a,bean,instance,to,proceed,with,or,code,null,for,none,throws,beans,exception,in,case,of,the,not,unique,scenario,being,fatal,since,5,1;nullable,public,object,resolve,not,unique,resolvable,type,type,map,string,object,matching,beans,throws,beans,exception,throw,new,no,unique,bean,definition,exception,type,matching,beans,key,set
DependencyDescriptor -> @Nullable 	public Object resolveNotUnique(ResolvableType type, Map<String, Object> matchingBeans) throws BeansException;1535039984;Resolve the specified not-unique scenario: by default,_throwing a {@link NoUniqueBeanDefinitionException}._<p>Subclasses may override this to select one of the instances or_to opt out with no result at all through returning {@code null}._@param type the requested bean type_@param matchingBeans a map of bean names and corresponding bean_instances which have been pre-selected for the given type_(qualifiers etc already applied)_@return a bean instance to proceed with, or {@code null} for none_@throws BeansException in case of the not-unique scenario being fatal_@since 5.1;@Nullable_	public Object resolveNotUnique(ResolvableType type, Map<String, Object> matchingBeans) throws BeansException {_		throw new NoUniqueBeanDefinitionException(type, matchingBeans.keySet())__	};resolve,the,specified,not,unique,scenario,by,default,throwing,a,link,no,unique,bean,definition,exception,p,subclasses,may,override,this,to,select,one,of,the,instances,or,to,opt,out,with,no,result,at,all,through,returning,code,null,param,type,the,requested,bean,type,param,matching,beans,a,map,of,bean,names,and,corresponding,bean,instances,which,have,been,pre,selected,for,the,given,type,qualifiers,etc,already,applied,return,a,bean,instance,to,proceed,with,or,code,null,for,none,throws,beans,exception,in,case,of,the,not,unique,scenario,being,fatal,since,5,1;nullable,public,object,resolve,not,unique,resolvable,type,type,map,string,object,matching,beans,throws,beans,exception,throw,new,no,unique,bean,definition,exception,type,matching,beans,key,set
DependencyDescriptor -> @Nullable 	public Object resolveNotUnique(ResolvableType type, Map<String, Object> matchingBeans) throws BeansException;1536855799;Resolve the specified not-unique scenario: by default,_throwing a {@link NoUniqueBeanDefinitionException}._<p>Subclasses may override this to select one of the instances or_to opt out with no result at all through returning {@code null}._@param type the requested bean type_@param matchingBeans a map of bean names and corresponding bean_instances which have been pre-selected for the given type_(qualifiers etc already applied)_@return a bean instance to proceed with, or {@code null} for none_@throws BeansException in case of the not-unique scenario being fatal_@since 5.1;@Nullable_	public Object resolveNotUnique(ResolvableType type, Map<String, Object> matchingBeans) throws BeansException {_		throw new NoUniqueBeanDefinitionException(type, matchingBeans.keySet())__	};resolve,the,specified,not,unique,scenario,by,default,throwing,a,link,no,unique,bean,definition,exception,p,subclasses,may,override,this,to,select,one,of,the,instances,or,to,opt,out,with,no,result,at,all,through,returning,code,null,param,type,the,requested,bean,type,param,matching,beans,a,map,of,bean,names,and,corresponding,bean,instances,which,have,been,pre,selected,for,the,given,type,qualifiers,etc,already,applied,return,a,bean,instance,to,proceed,with,or,code,null,for,none,throws,beans,exception,in,case,of,the,not,unique,scenario,being,fatal,since,5,1;nullable,public,object,resolve,not,unique,resolvable,type,type,map,string,object,matching,beans,throws,beans,exception,throw,new,no,unique,bean,definition,exception,type,matching,beans,key,set
DependencyDescriptor -> @Nullable 	public Object resolveNotUnique(ResolvableType type, Map<String, Object> matchingBeans) throws BeansException;1546963887;Resolve the specified not-unique scenario: by default,_throwing a {@link NoUniqueBeanDefinitionException}._<p>Subclasses may override this to select one of the instances or_to opt out with no result at all through returning {@code null}._@param type the requested bean type_@param matchingBeans a map of bean names and corresponding bean_instances which have been pre-selected for the given type_(qualifiers etc already applied)_@return a bean instance to proceed with, or {@code null} for none_@throws BeansException in case of the not-unique scenario being fatal_@since 5.1;@Nullable_	public Object resolveNotUnique(ResolvableType type, Map<String, Object> matchingBeans) throws BeansException {_		throw new NoUniqueBeanDefinitionException(type, matchingBeans.keySet())__	};resolve,the,specified,not,unique,scenario,by,default,throwing,a,link,no,unique,bean,definition,exception,p,subclasses,may,override,this,to,select,one,of,the,instances,or,to,opt,out,with,no,result,at,all,through,returning,code,null,param,type,the,requested,bean,type,param,matching,beans,a,map,of,bean,names,and,corresponding,bean,instances,which,have,been,pre,selected,for,the,given,type,qualifiers,etc,already,applied,return,a,bean,instance,to,proceed,with,or,code,null,for,none,throws,beans,exception,in,case,of,the,not,unique,scenario,being,fatal,since,5,1;nullable,public,object,resolve,not,unique,resolvable,type,type,map,string,object,matching,beans,throws,beans,exception,throw,new,no,unique,bean,definition,exception,type,matching,beans,key,set
DependencyDescriptor -> public String getDependencyName();1328020251;Determine the name of the wrapped parameter/field._@return the declared name (never <code>null</code>);public String getDependencyName() {_		return (this.field != null ? this.field.getName() : this.methodParameter.getParameterName())__	};determine,the,name,of,the,wrapped,parameter,field,return,the,declared,name,never,code,null,code;public,string,get,dependency,name,return,this,field,null,this,field,get,name,this,method,parameter,get,parameter,name
DependencyDescriptor -> public String getDependencyName();1329142650;Determine the name of the wrapped parameter/field._@return the declared name (never <code>null</code>);public String getDependencyName() {_		return (this.field != null ? this.field.getName() : this.methodParameter.getParameterName())__	};determine,the,name,of,the,wrapped,parameter,field,return,the,declared,name,never,code,null,code;public,string,get,dependency,name,return,this,field,null,this,field,get,name,this,method,parameter,get,parameter,name
DependencyDescriptor -> public String getDependencyName();1346421549;Determine the name of the wrapped parameter/field._@return the declared name (never <code>null</code>);public String getDependencyName() {_		return (this.field != null ? this.field.getName() : this.methodParameter.getParameterName())__	};determine,the,name,of,the,wrapped,parameter,field,return,the,declared,name,never,code,null,code;public,string,get,dependency,name,return,this,field,null,this,field,get,name,this,method,parameter,get,parameter,name
DependencyDescriptor -> public String getDependencyName();1350077654;Determine the name of the wrapped parameter/field._@return the declared name (never <code>null</code>);public String getDependencyName() {_		return (this.field != null ? this.field.getName() : this.methodParameter.getParameterName())__	};determine,the,name,of,the,wrapped,parameter,field,return,the,declared,name,never,code,null,code;public,string,get,dependency,name,return,this,field,null,this,field,get,name,this,method,parameter,get,parameter,name
DependencyDescriptor -> public String getDependencyName();1356735495;Determine the name of the wrapped parameter/field._@return the declared name (never {@code null});public String getDependencyName() {_		return (this.field != null ? this.field.getName() : this.methodParameter.getParameterName())__	};determine,the,name,of,the,wrapped,parameter,field,return,the,declared,name,never,code,null;public,string,get,dependency,name,return,this,field,null,this,field,get,name,this,method,parameter,get,parameter,name
DependencyDescriptor -> public String getDependencyName();1377641038;Determine the name of the wrapped parameter/field._@return the declared name (never {@code null});public String getDependencyName() {_		return (this.field != null ? this.field.getName() : this.methodParameter.getParameterName())__	};determine,the,name,of,the,wrapped,parameter,field,return,the,declared,name,never,code,null;public,string,get,dependency,name,return,this,field,null,this,field,get,name,this,method,parameter,get,parameter,name
DependencyDescriptor -> public String getDependencyName();1381788683;Determine the name of the wrapped parameter/field._@return the declared name (never {@code null});public String getDependencyName() {_		return (this.field != null ? this.field.getName() : this.methodParameter.getParameterName())__	};determine,the,name,of,the,wrapped,parameter,field,return,the,declared,name,never,code,null;public,string,get,dependency,name,return,this,field,null,this,field,get,name,this,method,parameter,get,parameter,name
DependencyDescriptor -> public String getDependencyName();1382716358;Determine the name of the wrapped parameter/field._@return the declared name (never {@code null});public String getDependencyName() {_		return (this.field != null ? this.field.getName() : this.methodParameter.getParameterName())__	};determine,the,name,of,the,wrapped,parameter,field,return,the,declared,name,never,code,null;public,string,get,dependency,name,return,this,field,null,this,field,get,name,this,method,parameter,get,parameter,name
DependencyDescriptor -> public String getDependencyName();1385412762;Determine the name of the wrapped parameter/field._@return the declared name (never {@code null});public String getDependencyName() {_		return (this.field != null ? this.field.getName() : this.methodParameter.getParameterName())__	};determine,the,name,of,the,wrapped,parameter,field,return,the,declared,name,never,code,null;public,string,get,dependency,name,return,this,field,null,this,field,get,name,this,method,parameter,get,parameter,name
DependencyDescriptor -> public String getDependencyName();1402061390;Determine the name of the wrapped parameter/field._@return the declared name (never {@code null});public String getDependencyName() {_		return (this.field != null ? this.field.getName() : this.methodParameter.getParameterName())__	};determine,the,name,of,the,wrapped,parameter,field,return,the,declared,name,never,code,null;public,string,get,dependency,name,return,this,field,null,this,field,get,name,this,method,parameter,get,parameter,name
DependencyDescriptor -> public String getDependencyName();1452685925;Determine the name of the wrapped parameter/field._@return the declared name (never {@code null});public String getDependencyName() {_		return (this.field != null ? this.field.getName() : this.methodParameter.getParameterName())__	};determine,the,name,of,the,wrapped,parameter,field,return,the,declared,name,never,code,null;public,string,get,dependency,name,return,this,field,null,this,field,get,name,this,method,parameter,get,parameter,name
DependencyDescriptor -> public String getDependencyName();1455295525;Determine the name of the wrapped parameter/field._@return the declared name (never {@code null});public String getDependencyName() {_		return (this.field != null ? this.field.getName() : this.methodParameter.getParameterName())__	};determine,the,name,of,the,wrapped,parameter,field,return,the,declared,name,never,code,null;public,string,get,dependency,name,return,this,field,null,this,field,get,name,this,method,parameter,get,parameter,name
DependencyDescriptor -> public String getDependencyName();1455889195;Determine the name of the wrapped parameter/field._@return the declared name (never {@code null});public String getDependencyName() {_		return (this.field != null ? this.field.getName() : this.methodParameter.getParameterName())__	};determine,the,name,of,the,wrapped,parameter,field,return,the,declared,name,never,code,null;public,string,get,dependency,name,return,this,field,null,this,field,get,name,this,method,parameter,get,parameter,name
DependencyDescriptor -> public String getDependencyName();1456432609;Determine the name of the wrapped parameter/field._@return the declared name (never {@code null});public String getDependencyName() {_		return (this.field != null ? this.field.getName() : this.methodParameter.getParameterName())__	};determine,the,name,of,the,wrapped,parameter,field,return,the,declared,name,never,code,null;public,string,get,dependency,name,return,this,field,null,this,field,get,name,this,method,parameter,get,parameter,name
DependencyDescriptor -> public String getDependencyName();1458755547;Determine the name of the wrapped parameter/field._@return the declared name (never {@code null});public String getDependencyName() {_		return (this.field != null ? this.field.getName() : this.methodParameter.getParameterName())__	};determine,the,name,of,the,wrapped,parameter,field,return,the,declared,name,never,code,null;public,string,get,dependency,name,return,this,field,null,this,field,get,name,this,method,parameter,get,parameter,name
DependencyDescriptor -> public String getDependencyName();1466893134;Determine the name of the wrapped parameter/field._@return the declared name (never {@code null});public String getDependencyName() {_		return (this.field != null ? this.field.getName() : this.methodParameter.getParameterName())__	};determine,the,name,of,the,wrapped,parameter,field,return,the,declared,name,never,code,null;public,string,get,dependency,name,return,this,field,null,this,field,get,name,this,method,parameter,get,parameter,name
DependencyDescriptor -> public String getDependencyName();1469030751;Determine the name of the wrapped parameter/field._@return the declared name (never {@code null});public String getDependencyName() {_		return (this.field != null ? this.field.getName() : this.methodParameter.getParameterName())__	};determine,the,name,of,the,wrapped,parameter,field,return,the,declared,name,never,code,null;public,string,get,dependency,name,return,this,field,null,this,field,get,name,this,method,parameter,get,parameter,name
DependencyDescriptor -> public String getDependencyName();1481647138;Determine the name of the wrapped parameter/field._@return the declared name (never {@code null});public String getDependencyName() {_		return (this.field != null ? this.field.getName() : this.methodParameter.getParameterName())__	};determine,the,name,of,the,wrapped,parameter,field,return,the,declared,name,never,code,null;public,string,get,dependency,name,return,this,field,null,this,field,get,name,this,method,parameter,get,parameter,name
DependencyDescriptor -> public String getDependencyName();1482091448;Determine the name of the wrapped parameter/field._@return the declared name (never {@code null});public String getDependencyName() {_		return (this.field != null ? this.field.getName() : this.methodParameter.getParameterName())__	};determine,the,name,of,the,wrapped,parameter,field,return,the,declared,name,never,code,null;public,string,get,dependency,name,return,this,field,null,this,field,get,name,this,method,parameter,get,parameter,name
DependencyDescriptor -> public String getDependencyName();1485277217;Determine the name of the wrapped parameter/field._@return the declared name (never {@code null});public String getDependencyName() {_		return (this.field != null ? this.field.getName() : this.methodParameter.getParameterName())__	};determine,the,name,of,the,wrapped,parameter,field,return,the,declared,name,never,code,null;public,string,get,dependency,name,return,this,field,null,this,field,get,name,this,method,parameter,get,parameter,name
DependencyDescriptor -> public String getDependencyName();1485300605;Determine the name of the wrapped parameter/field._@return the declared name (never {@code null});public String getDependencyName() {_		return (this.field != null ? this.field.getName() : this.methodParameter.getParameterName())__	};determine,the,name,of,the,wrapped,parameter,field,return,the,declared,name,never,code,null;public,string,get,dependency,name,return,this,field,null,this,field,get,name,this,method,parameter,get,parameter,name
DependencyDescriptor -> public String getDependencyName();1495868221;Determine the name of the wrapped parameter/field._@return the declared name (never {@code null});public String getDependencyName() {_		return (this.field != null ? this.field.getName() : this.methodParameter.getParameterName())__	};determine,the,name,of,the,wrapped,parameter,field,return,the,declared,name,never,code,null;public,string,get,dependency,name,return,this,field,null,this,field,get,name,this,method,parameter,get,parameter,name
DependencyDescriptor -> public DependencyDescriptor(MethodParameter methodParameter, boolean required, boolean eager);1328020251;Create a new descriptor for a method or constructor parameter._@param methodParameter the MethodParameter to wrap_@param required whether the dependency is required_@param eager whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching;public DependencyDescriptor(MethodParameter methodParameter, boolean required, boolean eager) {_		Assert.notNull(methodParameter, "MethodParameter must not be null")__		this.methodParameter = methodParameter__		this.declaringClass = methodParameter.getDeclaringClass()__		if (this.methodParameter.getMethod() != null) {_			this.methodName = methodParameter.getMethod().getName()__			this.parameterTypes = methodParameter.getMethod().getParameterTypes()__		}_		else {_			this.parameterTypes = methodParameter.getConstructor().getParameterTypes()__		}_		this.parameterIndex = methodParameter.getParameterIndex()__		this.required = required__		this.eager = eager__	};create,a,new,descriptor,for,a,method,or,constructor,parameter,param,method,parameter,the,method,parameter,to,wrap,param,required,whether,the,dependency,is,required,param,eager,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,dependency,descriptor,method,parameter,method,parameter,boolean,required,boolean,eager,assert,not,null,method,parameter,method,parameter,must,not,be,null,this,method,parameter,method,parameter,this,declaring,class,method,parameter,get,declaring,class,if,this,method,parameter,get,method,null,this,method,name,method,parameter,get,method,get,name,this,parameter,types,method,parameter,get,method,get,parameter,types,else,this,parameter,types,method,parameter,get,constructor,get,parameter,types,this,parameter,index,method,parameter,get,parameter,index,this,required,required,this,eager,eager
DependencyDescriptor -> public DependencyDescriptor(MethodParameter methodParameter, boolean required, boolean eager);1329142650;Create a new descriptor for a method or constructor parameter._@param methodParameter the MethodParameter to wrap_@param required whether the dependency is required_@param eager whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching;public DependencyDescriptor(MethodParameter methodParameter, boolean required, boolean eager) {_		Assert.notNull(methodParameter, "MethodParameter must not be null")__		this.methodParameter = methodParameter__		this.declaringClass = methodParameter.getDeclaringClass()__		if (this.methodParameter.getMethod() != null) {_			this.methodName = methodParameter.getMethod().getName()__			this.parameterTypes = methodParameter.getMethod().getParameterTypes()__		}_		else {_			this.parameterTypes = methodParameter.getConstructor().getParameterTypes()__		}_		this.parameterIndex = methodParameter.getParameterIndex()__		this.required = required__		this.eager = eager__	};create,a,new,descriptor,for,a,method,or,constructor,parameter,param,method,parameter,the,method,parameter,to,wrap,param,required,whether,the,dependency,is,required,param,eager,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,dependency,descriptor,method,parameter,method,parameter,boolean,required,boolean,eager,assert,not,null,method,parameter,method,parameter,must,not,be,null,this,method,parameter,method,parameter,this,declaring,class,method,parameter,get,declaring,class,if,this,method,parameter,get,method,null,this,method,name,method,parameter,get,method,get,name,this,parameter,types,method,parameter,get,method,get,parameter,types,else,this,parameter,types,method,parameter,get,constructor,get,parameter,types,this,parameter,index,method,parameter,get,parameter,index,this,required,required,this,eager,eager
DependencyDescriptor -> public DependencyDescriptor(MethodParameter methodParameter, boolean required, boolean eager);1346421549;Create a new descriptor for a method or constructor parameter._@param methodParameter the MethodParameter to wrap_@param required whether the dependency is required_@param eager whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching;public DependencyDescriptor(MethodParameter methodParameter, boolean required, boolean eager) {_		Assert.notNull(methodParameter, "MethodParameter must not be null")__		this.methodParameter = methodParameter__		this.declaringClass = methodParameter.getDeclaringClass()__		if (this.methodParameter.getMethod() != null) {_			this.methodName = methodParameter.getMethod().getName()__			this.parameterTypes = methodParameter.getMethod().getParameterTypes()__		}_		else {_			this.parameterTypes = methodParameter.getConstructor().getParameterTypes()__		}_		this.parameterIndex = methodParameter.getParameterIndex()__		this.required = required__		this.eager = eager__	};create,a,new,descriptor,for,a,method,or,constructor,parameter,param,method,parameter,the,method,parameter,to,wrap,param,required,whether,the,dependency,is,required,param,eager,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,dependency,descriptor,method,parameter,method,parameter,boolean,required,boolean,eager,assert,not,null,method,parameter,method,parameter,must,not,be,null,this,method,parameter,method,parameter,this,declaring,class,method,parameter,get,declaring,class,if,this,method,parameter,get,method,null,this,method,name,method,parameter,get,method,get,name,this,parameter,types,method,parameter,get,method,get,parameter,types,else,this,parameter,types,method,parameter,get,constructor,get,parameter,types,this,parameter,index,method,parameter,get,parameter,index,this,required,required,this,eager,eager
DependencyDescriptor -> public DependencyDescriptor(MethodParameter methodParameter, boolean required, boolean eager);1350077654;Create a new descriptor for a method or constructor parameter._@param methodParameter the MethodParameter to wrap_@param required whether the dependency is required_@param eager whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching;public DependencyDescriptor(MethodParameter methodParameter, boolean required, boolean eager) {_		Assert.notNull(methodParameter, "MethodParameter must not be null")__		this.methodParameter = methodParameter__		this.declaringClass = methodParameter.getDeclaringClass()__		if (this.methodParameter.getMethod() != null) {_			this.methodName = methodParameter.getMethod().getName()__			this.parameterTypes = methodParameter.getMethod().getParameterTypes()__		}_		else {_			this.parameterTypes = methodParameter.getConstructor().getParameterTypes()__		}_		this.parameterIndex = methodParameter.getParameterIndex()__		this.required = required__		this.eager = eager__	};create,a,new,descriptor,for,a,method,or,constructor,parameter,param,method,parameter,the,method,parameter,to,wrap,param,required,whether,the,dependency,is,required,param,eager,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,dependency,descriptor,method,parameter,method,parameter,boolean,required,boolean,eager,assert,not,null,method,parameter,method,parameter,must,not,be,null,this,method,parameter,method,parameter,this,declaring,class,method,parameter,get,declaring,class,if,this,method,parameter,get,method,null,this,method,name,method,parameter,get,method,get,name,this,parameter,types,method,parameter,get,method,get,parameter,types,else,this,parameter,types,method,parameter,get,constructor,get,parameter,types,this,parameter,index,method,parameter,get,parameter,index,this,required,required,this,eager,eager
DependencyDescriptor -> public DependencyDescriptor(MethodParameter methodParameter, boolean required, boolean eager);1356735495;Create a new descriptor for a method or constructor parameter._@param methodParameter the MethodParameter to wrap_@param required whether the dependency is required_@param eager whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching;public DependencyDescriptor(MethodParameter methodParameter, boolean required, boolean eager) {_		Assert.notNull(methodParameter, "MethodParameter must not be null")__		this.methodParameter = methodParameter__		this.declaringClass = methodParameter.getDeclaringClass()__		if (this.methodParameter.getMethod() != null) {_			this.methodName = methodParameter.getMethod().getName()__			this.parameterTypes = methodParameter.getMethod().getParameterTypes()__		}_		else {_			this.parameterTypes = methodParameter.getConstructor().getParameterTypes()__		}_		this.parameterIndex = methodParameter.getParameterIndex()__		this.required = required__		this.eager = eager__	};create,a,new,descriptor,for,a,method,or,constructor,parameter,param,method,parameter,the,method,parameter,to,wrap,param,required,whether,the,dependency,is,required,param,eager,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,dependency,descriptor,method,parameter,method,parameter,boolean,required,boolean,eager,assert,not,null,method,parameter,method,parameter,must,not,be,null,this,method,parameter,method,parameter,this,declaring,class,method,parameter,get,declaring,class,if,this,method,parameter,get,method,null,this,method,name,method,parameter,get,method,get,name,this,parameter,types,method,parameter,get,method,get,parameter,types,else,this,parameter,types,method,parameter,get,constructor,get,parameter,types,this,parameter,index,method,parameter,get,parameter,index,this,required,required,this,eager,eager
DependencyDescriptor -> public DependencyDescriptor(MethodParameter methodParameter, boolean required, boolean eager);1377641038;Create a new descriptor for a method or constructor parameter._@param methodParameter the MethodParameter to wrap_@param required whether the dependency is required_@param eager whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching;public DependencyDescriptor(MethodParameter methodParameter, boolean required, boolean eager) {_		Assert.notNull(methodParameter, "MethodParameter must not be null")__		this.methodParameter = methodParameter__		this.declaringClass = methodParameter.getDeclaringClass()__		if (this.methodParameter.getMethod() != null) {_			this.methodName = methodParameter.getMethod().getName()__			this.parameterTypes = methodParameter.getMethod().getParameterTypes()__		}_		else {_			this.parameterTypes = methodParameter.getConstructor().getParameterTypes()__		}_		this.parameterIndex = methodParameter.getParameterIndex()__		this.required = required__		this.eager = eager__	};create,a,new,descriptor,for,a,method,or,constructor,parameter,param,method,parameter,the,method,parameter,to,wrap,param,required,whether,the,dependency,is,required,param,eager,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,dependency,descriptor,method,parameter,method,parameter,boolean,required,boolean,eager,assert,not,null,method,parameter,method,parameter,must,not,be,null,this,method,parameter,method,parameter,this,declaring,class,method,parameter,get,declaring,class,if,this,method,parameter,get,method,null,this,method,name,method,parameter,get,method,get,name,this,parameter,types,method,parameter,get,method,get,parameter,types,else,this,parameter,types,method,parameter,get,constructor,get,parameter,types,this,parameter,index,method,parameter,get,parameter,index,this,required,required,this,eager,eager
DependencyDescriptor -> public DependencyDescriptor(MethodParameter methodParameter, boolean required, boolean eager);1381788683;Create a new descriptor for a method or constructor parameter._@param methodParameter the MethodParameter to wrap_@param required whether the dependency is required_@param eager whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching;public DependencyDescriptor(MethodParameter methodParameter, boolean required, boolean eager) {_		Assert.notNull(methodParameter, "MethodParameter must not be null")__		this.methodParameter = methodParameter__		this.declaringClass = methodParameter.getDeclaringClass()__		this.containingClass = methodParameter.getContainingClass()__		if (this.methodParameter.getMethod() != null) {_			this.methodName = methodParameter.getMethod().getName()__			this.parameterTypes = methodParameter.getMethod().getParameterTypes()__		}_		else {_			this.parameterTypes = methodParameter.getConstructor().getParameterTypes()__		}_		this.parameterIndex = methodParameter.getParameterIndex()__		this.required = required__		this.eager = eager__	};create,a,new,descriptor,for,a,method,or,constructor,parameter,param,method,parameter,the,method,parameter,to,wrap,param,required,whether,the,dependency,is,required,param,eager,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,dependency,descriptor,method,parameter,method,parameter,boolean,required,boolean,eager,assert,not,null,method,parameter,method,parameter,must,not,be,null,this,method,parameter,method,parameter,this,declaring,class,method,parameter,get,declaring,class,this,containing,class,method,parameter,get,containing,class,if,this,method,parameter,get,method,null,this,method,name,method,parameter,get,method,get,name,this,parameter,types,method,parameter,get,method,get,parameter,types,else,this,parameter,types,method,parameter,get,constructor,get,parameter,types,this,parameter,index,method,parameter,get,parameter,index,this,required,required,this,eager,eager
DependencyDescriptor -> public DependencyDescriptor(MethodParameter methodParameter, boolean required, boolean eager);1382716358;Create a new descriptor for a method or constructor parameter._@param methodParameter the MethodParameter to wrap_@param required whether the dependency is required_@param eager whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching;public DependencyDescriptor(MethodParameter methodParameter, boolean required, boolean eager) {_		Assert.notNull(methodParameter, "MethodParameter must not be null")__		this.methodParameter = methodParameter__		this.declaringClass = methodParameter.getDeclaringClass()__		this.containingClass = methodParameter.getContainingClass()__		if (this.methodParameter.getMethod() != null) {_			this.methodName = methodParameter.getMethod().getName()__			this.parameterTypes = methodParameter.getMethod().getParameterTypes()__		}_		else {_			this.parameterTypes = methodParameter.getConstructor().getParameterTypes()__		}_		this.parameterIndex = methodParameter.getParameterIndex()__		this.required = required__		this.eager = eager__	};create,a,new,descriptor,for,a,method,or,constructor,parameter,param,method,parameter,the,method,parameter,to,wrap,param,required,whether,the,dependency,is,required,param,eager,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,dependency,descriptor,method,parameter,method,parameter,boolean,required,boolean,eager,assert,not,null,method,parameter,method,parameter,must,not,be,null,this,method,parameter,method,parameter,this,declaring,class,method,parameter,get,declaring,class,this,containing,class,method,parameter,get,containing,class,if,this,method,parameter,get,method,null,this,method,name,method,parameter,get,method,get,name,this,parameter,types,method,parameter,get,method,get,parameter,types,else,this,parameter,types,method,parameter,get,constructor,get,parameter,types,this,parameter,index,method,parameter,get,parameter,index,this,required,required,this,eager,eager
DependencyDescriptor -> public DependencyDescriptor(MethodParameter methodParameter, boolean required, boolean eager);1385412762;Create a new descriptor for a method or constructor parameter._@param methodParameter the MethodParameter to wrap_@param required whether the dependency is required_@param eager whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching;public DependencyDescriptor(MethodParameter methodParameter, boolean required, boolean eager) {_		Assert.notNull(methodParameter, "MethodParameter must not be null")__		this.methodParameter = methodParameter__		this.declaringClass = methodParameter.getDeclaringClass()__		this.containingClass = methodParameter.getContainingClass()__		if (this.methodParameter.getMethod() != null) {_			this.methodName = methodParameter.getMethod().getName()__			this.parameterTypes = methodParameter.getMethod().getParameterTypes()__		}_		else {_			this.parameterTypes = methodParameter.getConstructor().getParameterTypes()__		}_		this.parameterIndex = methodParameter.getParameterIndex()__		this.required = required__		this.eager = eager__	};create,a,new,descriptor,for,a,method,or,constructor,parameter,param,method,parameter,the,method,parameter,to,wrap,param,required,whether,the,dependency,is,required,param,eager,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,dependency,descriptor,method,parameter,method,parameter,boolean,required,boolean,eager,assert,not,null,method,parameter,method,parameter,must,not,be,null,this,method,parameter,method,parameter,this,declaring,class,method,parameter,get,declaring,class,this,containing,class,method,parameter,get,containing,class,if,this,method,parameter,get,method,null,this,method,name,method,parameter,get,method,get,name,this,parameter,types,method,parameter,get,method,get,parameter,types,else,this,parameter,types,method,parameter,get,constructor,get,parameter,types,this,parameter,index,method,parameter,get,parameter,index,this,required,required,this,eager,eager
DependencyDescriptor -> public DependencyDescriptor(MethodParameter methodParameter, boolean required, boolean eager);1402061390;Create a new descriptor for a method or constructor parameter._@param methodParameter the MethodParameter to wrap_@param required whether the dependency is required_@param eager whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching;public DependencyDescriptor(MethodParameter methodParameter, boolean required, boolean eager) {_		Assert.notNull(methodParameter, "MethodParameter must not be null")__		this.methodParameter = methodParameter__		this.declaringClass = methodParameter.getDeclaringClass()__		this.containingClass = methodParameter.getContainingClass()__		if (this.methodParameter.getMethod() != null) {_			this.methodName = methodParameter.getMethod().getName()__			this.parameterTypes = methodParameter.getMethod().getParameterTypes()__		}_		else {_			this.parameterTypes = methodParameter.getConstructor().getParameterTypes()__		}_		this.parameterIndex = methodParameter.getParameterIndex()__		this.required = required__		this.eager = eager__	};create,a,new,descriptor,for,a,method,or,constructor,parameter,param,method,parameter,the,method,parameter,to,wrap,param,required,whether,the,dependency,is,required,param,eager,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,dependency,descriptor,method,parameter,method,parameter,boolean,required,boolean,eager,assert,not,null,method,parameter,method,parameter,must,not,be,null,this,method,parameter,method,parameter,this,declaring,class,method,parameter,get,declaring,class,this,containing,class,method,parameter,get,containing,class,if,this,method,parameter,get,method,null,this,method,name,method,parameter,get,method,get,name,this,parameter,types,method,parameter,get,method,get,parameter,types,else,this,parameter,types,method,parameter,get,constructor,get,parameter,types,this,parameter,index,method,parameter,get,parameter,index,this,required,required,this,eager,eager
DependencyDescriptor -> public DependencyDescriptor(MethodParameter methodParameter, boolean required, boolean eager);1452685925;Create a new descriptor for a method or constructor parameter._@param methodParameter the MethodParameter to wrap_@param required whether the dependency is required_@param eager whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching;public DependencyDescriptor(MethodParameter methodParameter, boolean required, boolean eager) {_		Assert.notNull(methodParameter, "MethodParameter must not be null")__		this.methodParameter = methodParameter__		this.declaringClass = methodParameter.getDeclaringClass()__		this.containingClass = methodParameter.getContainingClass()__		if (this.methodParameter.getMethod() != null) {_			this.methodName = methodParameter.getMethod().getName()__			this.parameterTypes = methodParameter.getMethod().getParameterTypes()__		}_		else {_			this.parameterTypes = methodParameter.getConstructor().getParameterTypes()__		}_		this.parameterIndex = methodParameter.getParameterIndex()__		this.required = required__		this.eager = eager__	};create,a,new,descriptor,for,a,method,or,constructor,parameter,param,method,parameter,the,method,parameter,to,wrap,param,required,whether,the,dependency,is,required,param,eager,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,dependency,descriptor,method,parameter,method,parameter,boolean,required,boolean,eager,assert,not,null,method,parameter,method,parameter,must,not,be,null,this,method,parameter,method,parameter,this,declaring,class,method,parameter,get,declaring,class,this,containing,class,method,parameter,get,containing,class,if,this,method,parameter,get,method,null,this,method,name,method,parameter,get,method,get,name,this,parameter,types,method,parameter,get,method,get,parameter,types,else,this,parameter,types,method,parameter,get,constructor,get,parameter,types,this,parameter,index,method,parameter,get,parameter,index,this,required,required,this,eager,eager
DependencyDescriptor -> public DependencyDescriptor(MethodParameter methodParameter, boolean required, boolean eager);1455295525;Create a new descriptor for a method or constructor parameter._@param methodParameter the MethodParameter to wrap_@param required whether the dependency is required_@param eager whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching;public DependencyDescriptor(MethodParameter methodParameter, boolean required, boolean eager) {_		Assert.notNull(methodParameter, "MethodParameter must not be null")__		this.methodParameter = methodParameter__		this.declaringClass = methodParameter.getDeclaringClass()__		this.containingClass = methodParameter.getContainingClass()__		if (this.methodParameter.getMethod() != null) {_			this.methodName = methodParameter.getMethod().getName()__			this.parameterTypes = methodParameter.getMethod().getParameterTypes()__		}_		else {_			this.parameterTypes = methodParameter.getConstructor().getParameterTypes()__		}_		this.parameterIndex = methodParameter.getParameterIndex()__		this.required = required__		this.eager = eager__	};create,a,new,descriptor,for,a,method,or,constructor,parameter,param,method,parameter,the,method,parameter,to,wrap,param,required,whether,the,dependency,is,required,param,eager,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,dependency,descriptor,method,parameter,method,parameter,boolean,required,boolean,eager,assert,not,null,method,parameter,method,parameter,must,not,be,null,this,method,parameter,method,parameter,this,declaring,class,method,parameter,get,declaring,class,this,containing,class,method,parameter,get,containing,class,if,this,method,parameter,get,method,null,this,method,name,method,parameter,get,method,get,name,this,parameter,types,method,parameter,get,method,get,parameter,types,else,this,parameter,types,method,parameter,get,constructor,get,parameter,types,this,parameter,index,method,parameter,get,parameter,index,this,required,required,this,eager,eager
DependencyDescriptor -> public DependencyDescriptor(MethodParameter methodParameter, boolean required, boolean eager);1455889195;Create a new descriptor for a method or constructor parameter._@param methodParameter the MethodParameter to wrap_@param required whether the dependency is required_@param eager whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching;public DependencyDescriptor(MethodParameter methodParameter, boolean required, boolean eager) {_		Assert.notNull(methodParameter, "MethodParameter must not be null")__		this.methodParameter = methodParameter__		this.declaringClass = methodParameter.getDeclaringClass()__		this.containingClass = methodParameter.getContainingClass()__		if (this.methodParameter.getMethod() != null) {_			this.methodName = methodParameter.getMethod().getName()__			this.parameterTypes = methodParameter.getMethod().getParameterTypes()__		}_		else {_			this.parameterTypes = methodParameter.getConstructor().getParameterTypes()__		}_		this.parameterIndex = methodParameter.getParameterIndex()__		this.required = required__		this.eager = eager__	};create,a,new,descriptor,for,a,method,or,constructor,parameter,param,method,parameter,the,method,parameter,to,wrap,param,required,whether,the,dependency,is,required,param,eager,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,dependency,descriptor,method,parameter,method,parameter,boolean,required,boolean,eager,assert,not,null,method,parameter,method,parameter,must,not,be,null,this,method,parameter,method,parameter,this,declaring,class,method,parameter,get,declaring,class,this,containing,class,method,parameter,get,containing,class,if,this,method,parameter,get,method,null,this,method,name,method,parameter,get,method,get,name,this,parameter,types,method,parameter,get,method,get,parameter,types,else,this,parameter,types,method,parameter,get,constructor,get,parameter,types,this,parameter,index,method,parameter,get,parameter,index,this,required,required,this,eager,eager
DependencyDescriptor -> public DependencyDescriptor(MethodParameter methodParameter, boolean required, boolean eager);1456432609;Create a new descriptor for a method or constructor parameter._@param methodParameter the MethodParameter to wrap_@param required whether the dependency is required_@param eager whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching;public DependencyDescriptor(MethodParameter methodParameter, boolean required, boolean eager) {_		super(methodParameter)__		this.declaringClass = methodParameter.getDeclaringClass()__		if (this.methodParameter.getMethod() != null) {_			this.methodName = methodParameter.getMethod().getName()__			this.parameterTypes = methodParameter.getMethod().getParameterTypes()__		}_		else {_			this.parameterTypes = methodParameter.getConstructor().getParameterTypes()__		}_		this.parameterIndex = methodParameter.getParameterIndex()__		this.containingClass = methodParameter.getContainingClass()__		this.required = required__		this.eager = eager__	};create,a,new,descriptor,for,a,method,or,constructor,parameter,param,method,parameter,the,method,parameter,to,wrap,param,required,whether,the,dependency,is,required,param,eager,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,dependency,descriptor,method,parameter,method,parameter,boolean,required,boolean,eager,super,method,parameter,this,declaring,class,method,parameter,get,declaring,class,if,this,method,parameter,get,method,null,this,method,name,method,parameter,get,method,get,name,this,parameter,types,method,parameter,get,method,get,parameter,types,else,this,parameter,types,method,parameter,get,constructor,get,parameter,types,this,parameter,index,method,parameter,get,parameter,index,this,containing,class,method,parameter,get,containing,class,this,required,required,this,eager,eager
DependencyDescriptor -> public DependencyDescriptor(MethodParameter methodParameter, boolean required, boolean eager);1458755547;Create a new descriptor for a method or constructor parameter._@param methodParameter the MethodParameter to wrap_@param required whether the dependency is required_@param eager whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching;public DependencyDescriptor(MethodParameter methodParameter, boolean required, boolean eager) {_		super(methodParameter)__		this.declaringClass = methodParameter.getDeclaringClass()__		if (this.methodParameter.getMethod() != null) {_			this.methodName = methodParameter.getMethod().getName()__			this.parameterTypes = methodParameter.getMethod().getParameterTypes()__		}_		else {_			this.parameterTypes = methodParameter.getConstructor().getParameterTypes()__		}_		this.parameterIndex = methodParameter.getParameterIndex()__		this.containingClass = methodParameter.getContainingClass()__		this.required = required__		this.eager = eager__	};create,a,new,descriptor,for,a,method,or,constructor,parameter,param,method,parameter,the,method,parameter,to,wrap,param,required,whether,the,dependency,is,required,param,eager,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,dependency,descriptor,method,parameter,method,parameter,boolean,required,boolean,eager,super,method,parameter,this,declaring,class,method,parameter,get,declaring,class,if,this,method,parameter,get,method,null,this,method,name,method,parameter,get,method,get,name,this,parameter,types,method,parameter,get,method,get,parameter,types,else,this,parameter,types,method,parameter,get,constructor,get,parameter,types,this,parameter,index,method,parameter,get,parameter,index,this,containing,class,method,parameter,get,containing,class,this,required,required,this,eager,eager
DependencyDescriptor -> public DependencyDescriptor(MethodParameter methodParameter, boolean required, boolean eager);1466893134;Create a new descriptor for a method or constructor parameter._@param methodParameter the MethodParameter to wrap_@param required whether the dependency is required_@param eager whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching;public DependencyDescriptor(MethodParameter methodParameter, boolean required, boolean eager) {_		super(methodParameter)__		this.declaringClass = methodParameter.getDeclaringClass()__		if (this.methodParameter.getMethod() != null) {_			this.methodName = methodParameter.getMethod().getName()__			this.parameterTypes = methodParameter.getMethod().getParameterTypes()__		}_		else {_			this.parameterTypes = methodParameter.getConstructor().getParameterTypes()__		}_		this.parameterIndex = methodParameter.getParameterIndex()__		this.containingClass = methodParameter.getContainingClass()__		this.required = required__		this.eager = eager__	};create,a,new,descriptor,for,a,method,or,constructor,parameter,param,method,parameter,the,method,parameter,to,wrap,param,required,whether,the,dependency,is,required,param,eager,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,dependency,descriptor,method,parameter,method,parameter,boolean,required,boolean,eager,super,method,parameter,this,declaring,class,method,parameter,get,declaring,class,if,this,method,parameter,get,method,null,this,method,name,method,parameter,get,method,get,name,this,parameter,types,method,parameter,get,method,get,parameter,types,else,this,parameter,types,method,parameter,get,constructor,get,parameter,types,this,parameter,index,method,parameter,get,parameter,index,this,containing,class,method,parameter,get,containing,class,this,required,required,this,eager,eager
DependencyDescriptor -> public DependencyDescriptor(MethodParameter methodParameter, boolean required, boolean eager);1469030751;Create a new descriptor for a method or constructor parameter._@param methodParameter the MethodParameter to wrap_@param required whether the dependency is required_@param eager whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching;public DependencyDescriptor(MethodParameter methodParameter, boolean required, boolean eager) {_		super(methodParameter)__		this.declaringClass = methodParameter.getDeclaringClass()__		if (this.methodParameter.getMethod() != null) {_			this.methodName = methodParameter.getMethod().getName()__			this.parameterTypes = methodParameter.getMethod().getParameterTypes()__		}_		else {_			this.parameterTypes = methodParameter.getConstructor().getParameterTypes()__		}_		this.parameterIndex = methodParameter.getParameterIndex()__		this.containingClass = methodParameter.getContainingClass()__		this.required = required__		this.eager = eager__	};create,a,new,descriptor,for,a,method,or,constructor,parameter,param,method,parameter,the,method,parameter,to,wrap,param,required,whether,the,dependency,is,required,param,eager,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,dependency,descriptor,method,parameter,method,parameter,boolean,required,boolean,eager,super,method,parameter,this,declaring,class,method,parameter,get,declaring,class,if,this,method,parameter,get,method,null,this,method,name,method,parameter,get,method,get,name,this,parameter,types,method,parameter,get,method,get,parameter,types,else,this,parameter,types,method,parameter,get,constructor,get,parameter,types,this,parameter,index,method,parameter,get,parameter,index,this,containing,class,method,parameter,get,containing,class,this,required,required,this,eager,eager
DependencyDescriptor -> public DependencyDescriptor(MethodParameter methodParameter, boolean required, boolean eager);1481647138;Create a new descriptor for a method or constructor parameter._@param methodParameter the MethodParameter to wrap_@param required whether the dependency is required_@param eager whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching;public DependencyDescriptor(MethodParameter methodParameter, boolean required, boolean eager) {_		super(methodParameter)___		this.declaringClass = methodParameter.getDeclaringClass()__		if (this.methodParameter.getMethod() != null) {_			this.methodName = methodParameter.getMethod().getName()__			this.parameterTypes = methodParameter.getMethod().getParameterTypes()__		}_		else {_			this.parameterTypes = methodParameter.getConstructor().getParameterTypes()__		}_		this.parameterIndex = methodParameter.getParameterIndex()__		this.containingClass = methodParameter.getContainingClass()__		this.required = required__		this.eager = eager__	};create,a,new,descriptor,for,a,method,or,constructor,parameter,param,method,parameter,the,method,parameter,to,wrap,param,required,whether,the,dependency,is,required,param,eager,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,dependency,descriptor,method,parameter,method,parameter,boolean,required,boolean,eager,super,method,parameter,this,declaring,class,method,parameter,get,declaring,class,if,this,method,parameter,get,method,null,this,method,name,method,parameter,get,method,get,name,this,parameter,types,method,parameter,get,method,get,parameter,types,else,this,parameter,types,method,parameter,get,constructor,get,parameter,types,this,parameter,index,method,parameter,get,parameter,index,this,containing,class,method,parameter,get,containing,class,this,required,required,this,eager,eager
DependencyDescriptor -> public DependencyDescriptor(MethodParameter methodParameter, boolean required, boolean eager);1482091448;Create a new descriptor for a method or constructor parameter._@param methodParameter the MethodParameter to wrap_@param required whether the dependency is required_@param eager whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching;public DependencyDescriptor(MethodParameter methodParameter, boolean required, boolean eager) {_		super(methodParameter)___		this.declaringClass = methodParameter.getDeclaringClass()__		if (this.methodParameter.getMethod() != null) {_			this.methodName = methodParameter.getMethod().getName()__			this.parameterTypes = methodParameter.getMethod().getParameterTypes()__		}_		else {_			this.parameterTypes = methodParameter.getConstructor().getParameterTypes()__		}_		this.parameterIndex = methodParameter.getParameterIndex()__		this.containingClass = methodParameter.getContainingClass()__		this.required = required__		this.eager = eager__	};create,a,new,descriptor,for,a,method,or,constructor,parameter,param,method,parameter,the,method,parameter,to,wrap,param,required,whether,the,dependency,is,required,param,eager,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,dependency,descriptor,method,parameter,method,parameter,boolean,required,boolean,eager,super,method,parameter,this,declaring,class,method,parameter,get,declaring,class,if,this,method,parameter,get,method,null,this,method,name,method,parameter,get,method,get,name,this,parameter,types,method,parameter,get,method,get,parameter,types,else,this,parameter,types,method,parameter,get,constructor,get,parameter,types,this,parameter,index,method,parameter,get,parameter,index,this,containing,class,method,parameter,get,containing,class,this,required,required,this,eager,eager
DependencyDescriptor -> public DependencyDescriptor(MethodParameter methodParameter, boolean required, boolean eager);1485277217;Create a new descriptor for a method or constructor parameter._@param methodParameter the MethodParameter to wrap_@param required whether the dependency is required_@param eager whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching;public DependencyDescriptor(MethodParameter methodParameter, boolean required, boolean eager) {_		super(methodParameter)___		this.declaringClass = methodParameter.getDeclaringClass()__		if (this.methodParameter.getMethod() != null) {_			this.methodName = methodParameter.getMethod().getName()__			this.parameterTypes = methodParameter.getMethod().getParameterTypes()__		}_		else {_			this.parameterTypes = methodParameter.getConstructor().getParameterTypes()__		}_		this.parameterIndex = methodParameter.getParameterIndex()__		this.containingClass = methodParameter.getContainingClass()__		this.required = required__		this.eager = eager__	};create,a,new,descriptor,for,a,method,or,constructor,parameter,param,method,parameter,the,method,parameter,to,wrap,param,required,whether,the,dependency,is,required,param,eager,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,dependency,descriptor,method,parameter,method,parameter,boolean,required,boolean,eager,super,method,parameter,this,declaring,class,method,parameter,get,declaring,class,if,this,method,parameter,get,method,null,this,method,name,method,parameter,get,method,get,name,this,parameter,types,method,parameter,get,method,get,parameter,types,else,this,parameter,types,method,parameter,get,constructor,get,parameter,types,this,parameter,index,method,parameter,get,parameter,index,this,containing,class,method,parameter,get,containing,class,this,required,required,this,eager,eager
DependencyDescriptor -> public DependencyDescriptor(MethodParameter methodParameter, boolean required, boolean eager);1485300605;Create a new descriptor for a method or constructor parameter._@param methodParameter the MethodParameter to wrap_@param required whether the dependency is required_@param eager whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching;public DependencyDescriptor(MethodParameter methodParameter, boolean required, boolean eager) {_		super(methodParameter)___		this.declaringClass = methodParameter.getDeclaringClass()__		if (this.methodParameter.getMethod() != null) {_			this.methodName = methodParameter.getMethod().getName()__			this.parameterTypes = methodParameter.getMethod().getParameterTypes()__		}_		else {_			this.parameterTypes = methodParameter.getConstructor().getParameterTypes()__		}_		this.parameterIndex = methodParameter.getParameterIndex()__		this.containingClass = methodParameter.getContainingClass()__		this.required = required__		this.eager = eager__	};create,a,new,descriptor,for,a,method,or,constructor,parameter,param,method,parameter,the,method,parameter,to,wrap,param,required,whether,the,dependency,is,required,param,eager,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,dependency,descriptor,method,parameter,method,parameter,boolean,required,boolean,eager,super,method,parameter,this,declaring,class,method,parameter,get,declaring,class,if,this,method,parameter,get,method,null,this,method,name,method,parameter,get,method,get,name,this,parameter,types,method,parameter,get,method,get,parameter,types,else,this,parameter,types,method,parameter,get,constructor,get,parameter,types,this,parameter,index,method,parameter,get,parameter,index,this,containing,class,method,parameter,get,containing,class,this,required,required,this,eager,eager
DependencyDescriptor -> public DependencyDescriptor(MethodParameter methodParameter, boolean required, boolean eager);1495868221;Create a new descriptor for a method or constructor parameter._@param methodParameter the MethodParameter to wrap_@param required whether the dependency is required_@param eager whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching;public DependencyDescriptor(MethodParameter methodParameter, boolean required, boolean eager) {_		super(methodParameter)___		this.declaringClass = methodParameter.getDeclaringClass()__		if (this.methodParameter.getMethod() != null) {_			this.methodName = methodParameter.getMethod().getName()__			this.parameterTypes = methodParameter.getMethod().getParameterTypes()__		}_		else {_			this.parameterTypes = methodParameter.getConstructor().getParameterTypes()__		}_		this.parameterIndex = methodParameter.getParameterIndex()__		this.containingClass = methodParameter.getContainingClass()__		this.required = required__		this.eager = eager__	};create,a,new,descriptor,for,a,method,or,constructor,parameter,param,method,parameter,the,method,parameter,to,wrap,param,required,whether,the,dependency,is,required,param,eager,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,dependency,descriptor,method,parameter,method,parameter,boolean,required,boolean,eager,super,method,parameter,this,declaring,class,method,parameter,get,declaring,class,if,this,method,parameter,get,method,null,this,method,name,method,parameter,get,method,get,name,this,parameter,types,method,parameter,get,method,get,parameter,types,else,this,parameter,types,method,parameter,get,constructor,get,parameter,types,this,parameter,index,method,parameter,get,parameter,index,this,containing,class,method,parameter,get,containing,class,this,required,required,this,eager,eager
DependencyDescriptor -> public DependencyDescriptor(MethodParameter methodParameter, boolean required, boolean eager);1496837955;Create a new descriptor for a method or constructor parameter._@param methodParameter the MethodParameter to wrap_@param required whether the dependency is required_@param eager whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching;public DependencyDescriptor(MethodParameter methodParameter, boolean required, boolean eager) {_		super(methodParameter)___		this.declaringClass = methodParameter.getDeclaringClass()__		if (this.methodParameter.getMethod() != null) {_			this.methodName = this.methodParameter.getMethod().getName()__		}_		this.parameterTypes = methodParameter.getExecutable().getParameterTypes()__		this.parameterIndex = methodParameter.getParameterIndex()__		this.containingClass = methodParameter.getContainingClass()__		this.required = required__		this.eager = eager__	};create,a,new,descriptor,for,a,method,or,constructor,parameter,param,method,parameter,the,method,parameter,to,wrap,param,required,whether,the,dependency,is,required,param,eager,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,dependency,descriptor,method,parameter,method,parameter,boolean,required,boolean,eager,super,method,parameter,this,declaring,class,method,parameter,get,declaring,class,if,this,method,parameter,get,method,null,this,method,name,this,method,parameter,get,method,get,name,this,parameter,types,method,parameter,get,executable,get,parameter,types,this,parameter,index,method,parameter,get,parameter,index,this,containing,class,method,parameter,get,containing,class,this,required,required,this,eager,eager
DependencyDescriptor -> public DependencyDescriptor(MethodParameter methodParameter, boolean required, boolean eager);1498780456;Create a new descriptor for a method or constructor parameter._@param methodParameter the MethodParameter to wrap_@param required whether the dependency is required_@param eager whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching;public DependencyDescriptor(MethodParameter methodParameter, boolean required, boolean eager) {_		super(methodParameter)___		this.declaringClass = methodParameter.getDeclaringClass()__		if (methodParameter.getMethod() != null) {_			this.methodName = methodParameter.getMethod().getName()__		}_		this.parameterTypes = methodParameter.getExecutable().getParameterTypes()__		this.parameterIndex = methodParameter.getParameterIndex()__		this.containingClass = methodParameter.getContainingClass()__		this.required = required__		this.eager = eager__	};create,a,new,descriptor,for,a,method,or,constructor,parameter,param,method,parameter,the,method,parameter,to,wrap,param,required,whether,the,dependency,is,required,param,eager,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,dependency,descriptor,method,parameter,method,parameter,boolean,required,boolean,eager,super,method,parameter,this,declaring,class,method,parameter,get,declaring,class,if,method,parameter,get,method,null,this,method,name,method,parameter,get,method,get,name,this,parameter,types,method,parameter,get,executable,get,parameter,types,this,parameter,index,method,parameter,get,parameter,index,this,containing,class,method,parameter,get,containing,class,this,required,required,this,eager,eager
DependencyDescriptor -> public DependencyDescriptor(MethodParameter methodParameter, boolean required, boolean eager);1503007895;Create a new descriptor for a method or constructor parameter._@param methodParameter the MethodParameter to wrap_@param required whether the dependency is required_@param eager whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching;public DependencyDescriptor(MethodParameter methodParameter, boolean required, boolean eager) {_		super(methodParameter)___		this.declaringClass = methodParameter.getDeclaringClass()__		if (methodParameter.getMethod() != null) {_			this.methodName = methodParameter.getMethod().getName()__		}_		this.parameterTypes = methodParameter.getExecutable().getParameterTypes()__		this.parameterIndex = methodParameter.getParameterIndex()__		this.containingClass = methodParameter.getContainingClass()__		this.required = required__		this.eager = eager__	};create,a,new,descriptor,for,a,method,or,constructor,parameter,param,method,parameter,the,method,parameter,to,wrap,param,required,whether,the,dependency,is,required,param,eager,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,dependency,descriptor,method,parameter,method,parameter,boolean,required,boolean,eager,super,method,parameter,this,declaring,class,method,parameter,get,declaring,class,if,method,parameter,get,method,null,this,method,name,method,parameter,get,method,get,name,this,parameter,types,method,parameter,get,executable,get,parameter,types,this,parameter,index,method,parameter,get,parameter,index,this,containing,class,method,parameter,get,containing,class,this,required,required,this,eager,eager
DependencyDescriptor -> public DependencyDescriptor(MethodParameter methodParameter, boolean required, boolean eager);1503272000;Create a new descriptor for a method or constructor parameter._@param methodParameter the MethodParameter to wrap_@param required whether the dependency is required_@param eager whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching;public DependencyDescriptor(MethodParameter methodParameter, boolean required, boolean eager) {_		super(methodParameter)___		this.declaringClass = methodParameter.getDeclaringClass()__		if (methodParameter.getMethod() != null) {_			this.methodName = methodParameter.getMethod().getName()__		}_		this.parameterTypes = methodParameter.getExecutable().getParameterTypes()__		this.parameterIndex = methodParameter.getParameterIndex()__		this.containingClass = methodParameter.getContainingClass()__		this.required = required__		this.eager = eager__	};create,a,new,descriptor,for,a,method,or,constructor,parameter,param,method,parameter,the,method,parameter,to,wrap,param,required,whether,the,dependency,is,required,param,eager,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,dependency,descriptor,method,parameter,method,parameter,boolean,required,boolean,eager,super,method,parameter,this,declaring,class,method,parameter,get,declaring,class,if,method,parameter,get,method,null,this,method,name,method,parameter,get,method,get,name,this,parameter,types,method,parameter,get,executable,get,parameter,types,this,parameter,index,method,parameter,get,parameter,index,this,containing,class,method,parameter,get,containing,class,this,required,required,this,eager,eager
DependencyDescriptor -> public DependencyDescriptor(MethodParameter methodParameter, boolean required, boolean eager);1503411745;Create a new descriptor for a method or constructor parameter._@param methodParameter the MethodParameter to wrap_@param required whether the dependency is required_@param eager whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching;public DependencyDescriptor(MethodParameter methodParameter, boolean required, boolean eager) {_		super(methodParameter)___		this.declaringClass = methodParameter.getDeclaringClass()__		if (methodParameter.getMethod() != null) {_			this.methodName = methodParameter.getMethod().getName()__		}_		this.parameterTypes = methodParameter.getExecutable().getParameterTypes()__		this.parameterIndex = methodParameter.getParameterIndex()__		this.containingClass = methodParameter.getContainingClass()__		this.required = required__		this.eager = eager__	};create,a,new,descriptor,for,a,method,or,constructor,parameter,param,method,parameter,the,method,parameter,to,wrap,param,required,whether,the,dependency,is,required,param,eager,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,dependency,descriptor,method,parameter,method,parameter,boolean,required,boolean,eager,super,method,parameter,this,declaring,class,method,parameter,get,declaring,class,if,method,parameter,get,method,null,this,method,name,method,parameter,get,method,get,name,this,parameter,types,method,parameter,get,executable,get,parameter,types,this,parameter,index,method,parameter,get,parameter,index,this,containing,class,method,parameter,get,containing,class,this,required,required,this,eager,eager
DependencyDescriptor -> public DependencyDescriptor(MethodParameter methodParameter, boolean required, boolean eager);1506551472;Create a new descriptor for a method or constructor parameter._@param methodParameter the MethodParameter to wrap_@param required whether the dependency is required_@param eager whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching;public DependencyDescriptor(MethodParameter methodParameter, boolean required, boolean eager) {_		super(methodParameter)___		this.declaringClass = methodParameter.getDeclaringClass()__		if (methodParameter.getMethod() != null) {_			this.methodName = methodParameter.getMethod().getName()__		}_		this.parameterTypes = methodParameter.getExecutable().getParameterTypes()__		this.parameterIndex = methodParameter.getParameterIndex()__		this.containingClass = methodParameter.getContainingClass()__		this.required = required__		this.eager = eager__	};create,a,new,descriptor,for,a,method,or,constructor,parameter,param,method,parameter,the,method,parameter,to,wrap,param,required,whether,the,dependency,is,required,param,eager,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,dependency,descriptor,method,parameter,method,parameter,boolean,required,boolean,eager,super,method,parameter,this,declaring,class,method,parameter,get,declaring,class,if,method,parameter,get,method,null,this,method,name,method,parameter,get,method,get,name,this,parameter,types,method,parameter,get,executable,get,parameter,types,this,parameter,index,method,parameter,get,parameter,index,this,containing,class,method,parameter,get,containing,class,this,required,required,this,eager,eager
DependencyDescriptor -> public DependencyDescriptor(MethodParameter methodParameter, boolean required, boolean eager);1530174524;Create a new descriptor for a method or constructor parameter._@param methodParameter the MethodParameter to wrap_@param required whether the dependency is required_@param eager whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching;public DependencyDescriptor(MethodParameter methodParameter, boolean required, boolean eager) {_		super(methodParameter)___		this.declaringClass = methodParameter.getDeclaringClass()__		if (methodParameter.getMethod() != null) {_			this.methodName = methodParameter.getMethod().getName()__		}_		this.parameterTypes = methodParameter.getExecutable().getParameterTypes()__		this.parameterIndex = methodParameter.getParameterIndex()__		this.containingClass = methodParameter.getContainingClass()__		this.required = required__		this.eager = eager__	};create,a,new,descriptor,for,a,method,or,constructor,parameter,param,method,parameter,the,method,parameter,to,wrap,param,required,whether,the,dependency,is,required,param,eager,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,dependency,descriptor,method,parameter,method,parameter,boolean,required,boolean,eager,super,method,parameter,this,declaring,class,method,parameter,get,declaring,class,if,method,parameter,get,method,null,this,method,name,method,parameter,get,method,get,name,this,parameter,types,method,parameter,get,executable,get,parameter,types,this,parameter,index,method,parameter,get,parameter,index,this,containing,class,method,parameter,get,containing,class,this,required,required,this,eager,eager
DependencyDescriptor -> public DependencyDescriptor(MethodParameter methodParameter, boolean required, boolean eager);1530198749;Create a new descriptor for a method or constructor parameter._@param methodParameter the MethodParameter to wrap_@param required whether the dependency is required_@param eager whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching;public DependencyDescriptor(MethodParameter methodParameter, boolean required, boolean eager) {_		super(methodParameter)___		this.declaringClass = methodParameter.getDeclaringClass()__		if (methodParameter.getMethod() != null) {_			this.methodName = methodParameter.getMethod().getName()__		}_		this.parameterTypes = methodParameter.getExecutable().getParameterTypes()__		this.parameterIndex = methodParameter.getParameterIndex()__		this.containingClass = methodParameter.getContainingClass()__		this.required = required__		this.eager = eager__	};create,a,new,descriptor,for,a,method,or,constructor,parameter,param,method,parameter,the,method,parameter,to,wrap,param,required,whether,the,dependency,is,required,param,eager,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,dependency,descriptor,method,parameter,method,parameter,boolean,required,boolean,eager,super,method,parameter,this,declaring,class,method,parameter,get,declaring,class,if,method,parameter,get,method,null,this,method,name,method,parameter,get,method,get,name,this,parameter,types,method,parameter,get,executable,get,parameter,types,this,parameter,index,method,parameter,get,parameter,index,this,containing,class,method,parameter,get,containing,class,this,required,required,this,eager,eager
DependencyDescriptor -> public DependencyDescriptor(MethodParameter methodParameter, boolean required, boolean eager);1530201727;Create a new descriptor for a method or constructor parameter._@param methodParameter the MethodParameter to wrap_@param required whether the dependency is required_@param eager whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching;public DependencyDescriptor(MethodParameter methodParameter, boolean required, boolean eager) {_		super(methodParameter)___		this.declaringClass = methodParameter.getDeclaringClass()__		if (methodParameter.getMethod() != null) {_			this.methodName = methodParameter.getMethod().getName()__		}_		this.parameterTypes = methodParameter.getExecutable().getParameterTypes()__		this.parameterIndex = methodParameter.getParameterIndex()__		this.containingClass = methodParameter.getContainingClass()__		this.required = required__		this.eager = eager__	};create,a,new,descriptor,for,a,method,or,constructor,parameter,param,method,parameter,the,method,parameter,to,wrap,param,required,whether,the,dependency,is,required,param,eager,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,dependency,descriptor,method,parameter,method,parameter,boolean,required,boolean,eager,super,method,parameter,this,declaring,class,method,parameter,get,declaring,class,if,method,parameter,get,method,null,this,method,name,method,parameter,get,method,get,name,this,parameter,types,method,parameter,get,executable,get,parameter,types,this,parameter,index,method,parameter,get,parameter,index,this,containing,class,method,parameter,get,containing,class,this,required,required,this,eager,eager
DependencyDescriptor -> public DependencyDescriptor(MethodParameter methodParameter, boolean required, boolean eager);1532274593;Create a new descriptor for a method or constructor parameter._@param methodParameter the MethodParameter to wrap_@param required whether the dependency is required_@param eager whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching;public DependencyDescriptor(MethodParameter methodParameter, boolean required, boolean eager) {_		super(methodParameter)___		this.declaringClass = methodParameter.getDeclaringClass()__		if (methodParameter.getMethod() != null) {_			this.methodName = methodParameter.getMethod().getName()__		}_		this.parameterTypes = methodParameter.getExecutable().getParameterTypes()__		this.parameterIndex = methodParameter.getParameterIndex()__		this.containingClass = methodParameter.getContainingClass()__		this.required = required__		this.eager = eager__	};create,a,new,descriptor,for,a,method,or,constructor,parameter,param,method,parameter,the,method,parameter,to,wrap,param,required,whether,the,dependency,is,required,param,eager,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,dependency,descriptor,method,parameter,method,parameter,boolean,required,boolean,eager,super,method,parameter,this,declaring,class,method,parameter,get,declaring,class,if,method,parameter,get,method,null,this,method,name,method,parameter,get,method,get,name,this,parameter,types,method,parameter,get,executable,get,parameter,types,this,parameter,index,method,parameter,get,parameter,index,this,containing,class,method,parameter,get,containing,class,this,required,required,this,eager,eager
DependencyDescriptor -> public DependencyDescriptor(MethodParameter methodParameter, boolean required, boolean eager);1532332488;Create a new descriptor for a method or constructor parameter._@param methodParameter the MethodParameter to wrap_@param required whether the dependency is required_@param eager whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching;public DependencyDescriptor(MethodParameter methodParameter, boolean required, boolean eager) {_		super(methodParameter)___		this.declaringClass = methodParameter.getDeclaringClass()__		if (methodParameter.getMethod() != null) {_			this.methodName = methodParameter.getMethod().getName()__		}_		this.parameterTypes = methodParameter.getExecutable().getParameterTypes()__		this.parameterIndex = methodParameter.getParameterIndex()__		this.containingClass = methodParameter.getContainingClass()__		this.required = required__		this.eager = eager__	};create,a,new,descriptor,for,a,method,or,constructor,parameter,param,method,parameter,the,method,parameter,to,wrap,param,required,whether,the,dependency,is,required,param,eager,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,dependency,descriptor,method,parameter,method,parameter,boolean,required,boolean,eager,super,method,parameter,this,declaring,class,method,parameter,get,declaring,class,if,method,parameter,get,method,null,this,method,name,method,parameter,get,method,get,name,this,parameter,types,method,parameter,get,executable,get,parameter,types,this,parameter,index,method,parameter,get,parameter,index,this,containing,class,method,parameter,get,containing,class,this,required,required,this,eager,eager
DependencyDescriptor -> public DependencyDescriptor(MethodParameter methodParameter, boolean required, boolean eager);1532385723;Create a new descriptor for a method or constructor parameter._@param methodParameter the MethodParameter to wrap_@param required whether the dependency is required_@param eager whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching;public DependencyDescriptor(MethodParameter methodParameter, boolean required, boolean eager) {_		super(methodParameter)___		this.declaringClass = methodParameter.getDeclaringClass()__		if (methodParameter.getMethod() != null) {_			this.methodName = methodParameter.getMethod().getName()__		}_		this.parameterTypes = methodParameter.getExecutable().getParameterTypes()__		this.parameterIndex = methodParameter.getParameterIndex()__		this.containingClass = methodParameter.getContainingClass()__		this.required = required__		this.eager = eager__	};create,a,new,descriptor,for,a,method,or,constructor,parameter,param,method,parameter,the,method,parameter,to,wrap,param,required,whether,the,dependency,is,required,param,eager,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,dependency,descriptor,method,parameter,method,parameter,boolean,required,boolean,eager,super,method,parameter,this,declaring,class,method,parameter,get,declaring,class,if,method,parameter,get,method,null,this,method,name,method,parameter,get,method,get,name,this,parameter,types,method,parameter,get,executable,get,parameter,types,this,parameter,index,method,parameter,get,parameter,index,this,containing,class,method,parameter,get,containing,class,this,required,required,this,eager,eager
DependencyDescriptor -> public DependencyDescriptor(MethodParameter methodParameter, boolean required, boolean eager);1535039984;Create a new descriptor for a method or constructor parameter._@param methodParameter the MethodParameter to wrap_@param required whether the dependency is required_@param eager whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching;public DependencyDescriptor(MethodParameter methodParameter, boolean required, boolean eager) {_		super(methodParameter)___		this.declaringClass = methodParameter.getDeclaringClass()__		if (methodParameter.getMethod() != null) {_			this.methodName = methodParameter.getMethod().getName()__		}_		this.parameterTypes = methodParameter.getExecutable().getParameterTypes()__		this.parameterIndex = methodParameter.getParameterIndex()__		this.containingClass = methodParameter.getContainingClass()__		this.required = required__		this.eager = eager__	};create,a,new,descriptor,for,a,method,or,constructor,parameter,param,method,parameter,the,method,parameter,to,wrap,param,required,whether,the,dependency,is,required,param,eager,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,dependency,descriptor,method,parameter,method,parameter,boolean,required,boolean,eager,super,method,parameter,this,declaring,class,method,parameter,get,declaring,class,if,method,parameter,get,method,null,this,method,name,method,parameter,get,method,get,name,this,parameter,types,method,parameter,get,executable,get,parameter,types,this,parameter,index,method,parameter,get,parameter,index,this,containing,class,method,parameter,get,containing,class,this,required,required,this,eager,eager
DependencyDescriptor -> public DependencyDescriptor(MethodParameter methodParameter, boolean required, boolean eager);1536855799;Create a new descriptor for a method or constructor parameter._@param methodParameter the MethodParameter to wrap_@param required whether the dependency is required_@param eager whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching;public DependencyDescriptor(MethodParameter methodParameter, boolean required, boolean eager) {_		super(methodParameter)___		this.declaringClass = methodParameter.getDeclaringClass()__		if (methodParameter.getMethod() != null) {_			this.methodName = methodParameter.getMethod().getName()__		}_		this.parameterTypes = methodParameter.getExecutable().getParameterTypes()__		this.parameterIndex = methodParameter.getParameterIndex()__		this.containingClass = methodParameter.getContainingClass()__		this.required = required__		this.eager = eager__	};create,a,new,descriptor,for,a,method,or,constructor,parameter,param,method,parameter,the,method,parameter,to,wrap,param,required,whether,the,dependency,is,required,param,eager,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,dependency,descriptor,method,parameter,method,parameter,boolean,required,boolean,eager,super,method,parameter,this,declaring,class,method,parameter,get,declaring,class,if,method,parameter,get,method,null,this,method,name,method,parameter,get,method,get,name,this,parameter,types,method,parameter,get,executable,get,parameter,types,this,parameter,index,method,parameter,get,parameter,index,this,containing,class,method,parameter,get,containing,class,this,required,required,this,eager,eager
DependencyDescriptor -> public DependencyDescriptor(MethodParameter methodParameter, boolean required, boolean eager);1546963887;Create a new descriptor for a method or constructor parameter._@param methodParameter the MethodParameter to wrap_@param required whether the dependency is required_@param eager whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching;public DependencyDescriptor(MethodParameter methodParameter, boolean required, boolean eager) {_		super(methodParameter)___		this.declaringClass = methodParameter.getDeclaringClass()__		if (methodParameter.getMethod() != null) {_			this.methodName = methodParameter.getMethod().getName()__		}_		this.parameterTypes = methodParameter.getExecutable().getParameterTypes()__		this.parameterIndex = methodParameter.getParameterIndex()__		this.containingClass = methodParameter.getContainingClass()__		this.required = required__		this.eager = eager__	};create,a,new,descriptor,for,a,method,or,constructor,parameter,param,method,parameter,the,method,parameter,to,wrap,param,required,whether,the,dependency,is,required,param,eager,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,dependency,descriptor,method,parameter,method,parameter,boolean,required,boolean,eager,super,method,parameter,this,declaring,class,method,parameter,get,declaring,class,if,method,parameter,get,method,null,this,method,name,method,parameter,get,method,get,name,this,parameter,types,method,parameter,get,executable,get,parameter,types,this,parameter,index,method,parameter,get,parameter,index,this,containing,class,method,parameter,get,containing,class,this,required,required,this,eager,eager
DependencyDescriptor -> public Class<?> getDependencyType();1328020251;Determine the declared (non-generic) type of the wrapped parameter/field._@return the declared type (never <code>null</code>);public Class<?> getDependencyType() {_		return (this.field != null ? this.field.getType() : this.methodParameter.getParameterType())__	};determine,the,declared,non,generic,type,of,the,wrapped,parameter,field,return,the,declared,type,never,code,null,code;public,class,get,dependency,type,return,this,field,null,this,field,get,type,this,method,parameter,get,parameter,type
DependencyDescriptor -> public Class<?> getDependencyType();1329142650;Determine the declared (non-generic) type of the wrapped parameter/field._@return the declared type (never <code>null</code>);public Class<?> getDependencyType() {_		if (this.field != null) {_			if (this.nestingLevel > 1) {_				Type type = this.field.getGenericType()__				if (type instanceof ParameterizedType) {_					Type arg = ((ParameterizedType) type).getActualTypeArguments()[0]__					if (arg instanceof Class) {_						return (Class) arg__					}_					else if (arg instanceof ParameterizedType) {_						arg = ((ParameterizedType) arg).getRawType()__						if (arg instanceof Class) {_							return (Class) arg__						}_					}_				}_				return Object.class__			}_			else {_				return this.field.getType()__			}_		}_		else {_			return this.methodParameter.getNestedParameterType()__		}_	};determine,the,declared,non,generic,type,of,the,wrapped,parameter,field,return,the,declared,type,never,code,null,code;public,class,get,dependency,type,if,this,field,null,if,this,nesting,level,1,type,type,this,field,get,generic,type,if,type,instanceof,parameterized,type,type,arg,parameterized,type,type,get,actual,type,arguments,0,if,arg,instanceof,class,return,class,arg,else,if,arg,instanceof,parameterized,type,arg,parameterized,type,arg,get,raw,type,if,arg,instanceof,class,return,class,arg,return,object,class,else,return,this,field,get,type,else,return,this,method,parameter,get,nested,parameter,type
DependencyDescriptor -> public Class<?> getDependencyType();1346421549;Determine the declared (non-generic) type of the wrapped parameter/field._@return the declared type (never <code>null</code>);public Class<?> getDependencyType() {_		if (this.field != null) {_			if (this.nestingLevel > 1) {_				Type type = this.field.getGenericType()__				if (type instanceof ParameterizedType) {_					Type arg = ((ParameterizedType) type).getActualTypeArguments()[0]__					if (arg instanceof Class) {_						return (Class) arg__					}_					else if (arg instanceof ParameterizedType) {_						arg = ((ParameterizedType) arg).getRawType()__						if (arg instanceof Class) {_							return (Class) arg__						}_					}_				}_				return Object.class__			}_			else {_				return this.field.getType()__			}_		}_		else {_			return this.methodParameter.getNestedParameterType()__		}_	};determine,the,declared,non,generic,type,of,the,wrapped,parameter,field,return,the,declared,type,never,code,null,code;public,class,get,dependency,type,if,this,field,null,if,this,nesting,level,1,type,type,this,field,get,generic,type,if,type,instanceof,parameterized,type,type,arg,parameterized,type,type,get,actual,type,arguments,0,if,arg,instanceof,class,return,class,arg,else,if,arg,instanceof,parameterized,type,arg,parameterized,type,arg,get,raw,type,if,arg,instanceof,class,return,class,arg,return,object,class,else,return,this,field,get,type,else,return,this,method,parameter,get,nested,parameter,type
DependencyDescriptor -> public Class<?> getDependencyType();1350077654;Determine the declared (non-generic) type of the wrapped parameter/field._@return the declared type (never <code>null</code>);public Class<?> getDependencyType() {_		if (this.field != null) {_			if (this.nestingLevel > 1) {_				Type type = this.field.getGenericType()__				if (type instanceof ParameterizedType) {_					Type arg = ((ParameterizedType) type).getActualTypeArguments()[0]__					if (arg instanceof Class) {_						return (Class) arg__					}_					else if (arg instanceof ParameterizedType) {_						arg = ((ParameterizedType) arg).getRawType()__						if (arg instanceof Class) {_							return (Class) arg__						}_					}_				}_				return Object.class__			}_			else {_				return this.field.getType()__			}_		}_		else {_			return this.methodParameter.getNestedParameterType()__		}_	};determine,the,declared,non,generic,type,of,the,wrapped,parameter,field,return,the,declared,type,never,code,null,code;public,class,get,dependency,type,if,this,field,null,if,this,nesting,level,1,type,type,this,field,get,generic,type,if,type,instanceof,parameterized,type,type,arg,parameterized,type,type,get,actual,type,arguments,0,if,arg,instanceof,class,return,class,arg,else,if,arg,instanceof,parameterized,type,arg,parameterized,type,arg,get,raw,type,if,arg,instanceof,class,return,class,arg,return,object,class,else,return,this,field,get,type,else,return,this,method,parameter,get,nested,parameter,type
DependencyDescriptor -> public Class<?> getDependencyType();1356735495;Determine the declared (non-generic) type of the wrapped parameter/field._@return the declared type (never {@code null});public Class<?> getDependencyType() {_		if (this.field != null) {_			if (this.nestingLevel > 1) {_				Type type = this.field.getGenericType()__				if (type instanceof ParameterizedType) {_					Type arg = ((ParameterizedType) type).getActualTypeArguments()[0]__					if (arg instanceof Class) {_						return (Class) arg__					}_					else if (arg instanceof ParameterizedType) {_						arg = ((ParameterizedType) arg).getRawType()__						if (arg instanceof Class) {_							return (Class) arg__						}_					}_				}_				return Object.class__			}_			else {_				return this.field.getType()__			}_		}_		else {_			return this.methodParameter.getNestedParameterType()__		}_	};determine,the,declared,non,generic,type,of,the,wrapped,parameter,field,return,the,declared,type,never,code,null;public,class,get,dependency,type,if,this,field,null,if,this,nesting,level,1,type,type,this,field,get,generic,type,if,type,instanceof,parameterized,type,type,arg,parameterized,type,type,get,actual,type,arguments,0,if,arg,instanceof,class,return,class,arg,else,if,arg,instanceof,parameterized,type,arg,parameterized,type,arg,get,raw,type,if,arg,instanceof,class,return,class,arg,return,object,class,else,return,this,field,get,type,else,return,this,method,parameter,get,nested,parameter,type
DependencyDescriptor -> public Class<?> getDependencyType();1377641038;Determine the declared (non-generic) type of the wrapped parameter/field._@return the declared type (never {@code null});public Class<?> getDependencyType() {_		if (this.field != null) {_			if (this.nestingLevel > 1) {_				Type type = this.field.getGenericType()__				if (type instanceof ParameterizedType) {_					Type arg = ((ParameterizedType) type).getActualTypeArguments()[0]__					if (arg instanceof Class) {_						return (Class) arg__					}_					else if (arg instanceof ParameterizedType) {_						arg = ((ParameterizedType) arg).getRawType()__						if (arg instanceof Class) {_							return (Class) arg__						}_					}_				}_				return Object.class__			}_			else {_				return this.field.getType()__			}_		}_		else {_			return this.methodParameter.getNestedParameterType()__		}_	};determine,the,declared,non,generic,type,of,the,wrapped,parameter,field,return,the,declared,type,never,code,null;public,class,get,dependency,type,if,this,field,null,if,this,nesting,level,1,type,type,this,field,get,generic,type,if,type,instanceof,parameterized,type,type,arg,parameterized,type,type,get,actual,type,arguments,0,if,arg,instanceof,class,return,class,arg,else,if,arg,instanceof,parameterized,type,arg,parameterized,type,arg,get,raw,type,if,arg,instanceof,class,return,class,arg,return,object,class,else,return,this,field,get,type,else,return,this,method,parameter,get,nested,parameter,type
DependencyDescriptor -> public Class<?> getDependencyType();1381788683;Determine the declared (non-generic) type of the wrapped parameter/field._@return the declared type (never {@code null});public Class<?> getDependencyType() {_		if (this.field != null) {_			if (this.nestingLevel > 1) {_				Type type = this.field.getGenericType()__				if (type instanceof ParameterizedType) {_					Type arg = ((ParameterizedType) type).getActualTypeArguments()[0]__					if (arg instanceof Class) {_						return (Class) arg__					}_					else if (arg instanceof ParameterizedType) {_						arg = ((ParameterizedType) arg).getRawType()__						if (arg instanceof Class) {_							return (Class) arg__						}_					}_				}_				return Object.class__			}_			else {_				return this.field.getType()__			}_		}_		else {_			return this.methodParameter.getNestedParameterType()__		}_	};determine,the,declared,non,generic,type,of,the,wrapped,parameter,field,return,the,declared,type,never,code,null;public,class,get,dependency,type,if,this,field,null,if,this,nesting,level,1,type,type,this,field,get,generic,type,if,type,instanceof,parameterized,type,type,arg,parameterized,type,type,get,actual,type,arguments,0,if,arg,instanceof,class,return,class,arg,else,if,arg,instanceof,parameterized,type,arg,parameterized,type,arg,get,raw,type,if,arg,instanceof,class,return,class,arg,return,object,class,else,return,this,field,get,type,else,return,this,method,parameter,get,nested,parameter,type
DependencyDescriptor -> public Class<?> getDependencyType();1382716358;Determine the declared (non-generic) type of the wrapped parameter/field._@return the declared type (never {@code null});public Class<?> getDependencyType() {_		if (this.field != null) {_			if (this.nestingLevel > 1) {_				Type type = this.field.getGenericType()__				if (type instanceof ParameterizedType) {_					Type[] args = ((ParameterizedType) type).getActualTypeArguments()__					Type arg = args[args.length - 1]__					if (arg instanceof Class) {_						return (Class) arg__					}_					else if (arg instanceof ParameterizedType) {_						arg = ((ParameterizedType) arg).getRawType()__						if (arg instanceof Class) {_							return (Class) arg__						}_					}_				}_				return Object.class__			}_			else {_				return this.field.getType()__			}_		}_		else {_			return this.methodParameter.getNestedParameterType()__		}_	};determine,the,declared,non,generic,type,of,the,wrapped,parameter,field,return,the,declared,type,never,code,null;public,class,get,dependency,type,if,this,field,null,if,this,nesting,level,1,type,type,this,field,get,generic,type,if,type,instanceof,parameterized,type,type,args,parameterized,type,type,get,actual,type,arguments,type,arg,args,args,length,1,if,arg,instanceof,class,return,class,arg,else,if,arg,instanceof,parameterized,type,arg,parameterized,type,arg,get,raw,type,if,arg,instanceof,class,return,class,arg,return,object,class,else,return,this,field,get,type,else,return,this,method,parameter,get,nested,parameter,type
DependencyDescriptor -> public Class<?> getDependencyType();1385412762;Determine the declared (non-generic) type of the wrapped parameter/field._@return the declared type (never {@code null});public Class<?> getDependencyType() {_		if (this.field != null) {_			if (this.nestingLevel > 1) {_				Type type = this.field.getGenericType()__				if (type instanceof ParameterizedType) {_					Type[] args = ((ParameterizedType) type).getActualTypeArguments()__					Type arg = args[args.length - 1]__					if (arg instanceof Class) {_						return (Class<?>) arg__					}_					else if (arg instanceof ParameterizedType) {_						arg = ((ParameterizedType) arg).getRawType()__						if (arg instanceof Class) {_							return (Class<?>) arg__						}_					}_				}_				return Object.class__			}_			else {_				return this.field.getType()__			}_		}_		else {_			return this.methodParameter.getNestedParameterType()__		}_	};determine,the,declared,non,generic,type,of,the,wrapped,parameter,field,return,the,declared,type,never,code,null;public,class,get,dependency,type,if,this,field,null,if,this,nesting,level,1,type,type,this,field,get,generic,type,if,type,instanceof,parameterized,type,type,args,parameterized,type,type,get,actual,type,arguments,type,arg,args,args,length,1,if,arg,instanceof,class,return,class,arg,else,if,arg,instanceof,parameterized,type,arg,parameterized,type,arg,get,raw,type,if,arg,instanceof,class,return,class,arg,return,object,class,else,return,this,field,get,type,else,return,this,method,parameter,get,nested,parameter,type
DependencyDescriptor -> public Class<?> getDependencyType();1402061390;Determine the declared (non-generic) type of the wrapped parameter/field._@return the declared type (never {@code null});public Class<?> getDependencyType() {_		if (this.field != null) {_			if (this.nestingLevel > 1) {_				Type type = this.field.getGenericType()__				for (int i = 2_ i <= this.nestingLevel_ i++) {_					if (type instanceof ParameterizedType) {_						Type[] args = ((ParameterizedType) type).getActualTypeArguments()__						type = args[args.length - 1]__					}_				}_				if (type instanceof Class) {_					return (Class<?>) type__				}_				else if (type instanceof ParameterizedType) {_					Type arg = ((ParameterizedType) type).getRawType()__					if (arg instanceof Class) {_						return (Class<?>) arg__					}_				}_				return Object.class__			}_			else {_				return this.field.getType()__			}_		}_		else {_			return this.methodParameter.getNestedParameterType()__		}_	};determine,the,declared,non,generic,type,of,the,wrapped,parameter,field,return,the,declared,type,never,code,null;public,class,get,dependency,type,if,this,field,null,if,this,nesting,level,1,type,type,this,field,get,generic,type,for,int,i,2,i,this,nesting,level,i,if,type,instanceof,parameterized,type,type,args,parameterized,type,type,get,actual,type,arguments,type,args,args,length,1,if,type,instanceof,class,return,class,type,else,if,type,instanceof,parameterized,type,type,arg,parameterized,type,type,get,raw,type,if,arg,instanceof,class,return,class,arg,return,object,class,else,return,this,field,get,type,else,return,this,method,parameter,get,nested,parameter,type
DependencyDescriptor -> public Class<?> getDependencyType();1452685925;Determine the declared (non-generic) type of the wrapped parameter/field._@return the declared type (never {@code null});public Class<?> getDependencyType() {_		if (this.field != null) {_			if (this.nestingLevel > 1) {_				Type type = this.field.getGenericType()__				for (int i = 2_ i <= this.nestingLevel_ i++) {_					if (type instanceof ParameterizedType) {_						Type[] args = ((ParameterizedType) type).getActualTypeArguments()__						type = args[args.length - 1]__					}_				}_				if (type instanceof Class) {_					return (Class<?>) type__				}_				else if (type instanceof ParameterizedType) {_					Type arg = ((ParameterizedType) type).getRawType()__					if (arg instanceof Class) {_						return (Class<?>) arg__					}_				}_				return Object.class__			}_			else {_				return this.field.getType()__			}_		}_		else {_			return this.methodParameter.getNestedParameterType()__		}_	};determine,the,declared,non,generic,type,of,the,wrapped,parameter,field,return,the,declared,type,never,code,null;public,class,get,dependency,type,if,this,field,null,if,this,nesting,level,1,type,type,this,field,get,generic,type,for,int,i,2,i,this,nesting,level,i,if,type,instanceof,parameterized,type,type,args,parameterized,type,type,get,actual,type,arguments,type,args,args,length,1,if,type,instanceof,class,return,class,type,else,if,type,instanceof,parameterized,type,type,arg,parameterized,type,type,get,raw,type,if,arg,instanceof,class,return,class,arg,return,object,class,else,return,this,field,get,type,else,return,this,method,parameter,get,nested,parameter,type
DependencyDescriptor -> public Class<?> getDependencyType();1455295525;Determine the declared (non-generic) type of the wrapped parameter/field._@return the declared type (never {@code null});public Class<?> getDependencyType() {_		if (this.field != null) {_			if (this.nestingLevel > 1) {_				Type type = this.field.getGenericType()__				for (int i = 2_ i <= this.nestingLevel_ i++) {_					if (type instanceof ParameterizedType) {_						Type[] args = ((ParameterizedType) type).getActualTypeArguments()__						type = args[args.length - 1]__					}_				}_				if (type instanceof Class) {_					return (Class<?>) type__				}_				else if (type instanceof ParameterizedType) {_					Type arg = ((ParameterizedType) type).getRawType()__					if (arg instanceof Class) {_						return (Class<?>) arg__					}_				}_				return Object.class__			}_			else {_				return this.field.getType()__			}_		}_		else {_			return this.methodParameter.getNestedParameterType()__		}_	};determine,the,declared,non,generic,type,of,the,wrapped,parameter,field,return,the,declared,type,never,code,null;public,class,get,dependency,type,if,this,field,null,if,this,nesting,level,1,type,type,this,field,get,generic,type,for,int,i,2,i,this,nesting,level,i,if,type,instanceof,parameterized,type,type,args,parameterized,type,type,get,actual,type,arguments,type,args,args,length,1,if,type,instanceof,class,return,class,type,else,if,type,instanceof,parameterized,type,type,arg,parameterized,type,type,get,raw,type,if,arg,instanceof,class,return,class,arg,return,object,class,else,return,this,field,get,type,else,return,this,method,parameter,get,nested,parameter,type
DependencyDescriptor -> public Class<?> getDependencyType();1455889195;Determine the declared (non-generic) type of the wrapped parameter/field._@return the declared type (never {@code null});public Class<?> getDependencyType() {_		if (this.field != null) {_			if (this.nestingLevel > 1) {_				Type type = this.field.getGenericType()__				for (int i = 2_ i <= this.nestingLevel_ i++) {_					if (type instanceof ParameterizedType) {_						Type[] args = ((ParameterizedType) type).getActualTypeArguments()__						type = args[args.length - 1]__					}_				}_				if (type instanceof Class) {_					return (Class<?>) type__				}_				else if (type instanceof ParameterizedType) {_					Type arg = ((ParameterizedType) type).getRawType()__					if (arg instanceof Class) {_						return (Class<?>) arg__					}_				}_				return Object.class__			}_			else {_				return this.field.getType()__			}_		}_		else {_			return this.methodParameter.getNestedParameterType()__		}_	};determine,the,declared,non,generic,type,of,the,wrapped,parameter,field,return,the,declared,type,never,code,null;public,class,get,dependency,type,if,this,field,null,if,this,nesting,level,1,type,type,this,field,get,generic,type,for,int,i,2,i,this,nesting,level,i,if,type,instanceof,parameterized,type,type,args,parameterized,type,type,get,actual,type,arguments,type,args,args,length,1,if,type,instanceof,class,return,class,type,else,if,type,instanceof,parameterized,type,type,arg,parameterized,type,type,get,raw,type,if,arg,instanceof,class,return,class,arg,return,object,class,else,return,this,field,get,type,else,return,this,method,parameter,get,nested,parameter,type
DependencyDescriptor -> public Class<?> getDependencyType();1456432609;Determine the declared (non-generic) type of the wrapped parameter/field._@return the declared type (never {@code null});public Class<?> getDependencyType() {_		if (this.field != null) {_			if (this.nestingLevel > 1) {_				Type type = this.field.getGenericType()__				for (int i = 2_ i <= this.nestingLevel_ i++) {_					if (type instanceof ParameterizedType) {_						Type[] args = ((ParameterizedType) type).getActualTypeArguments()__						type = args[args.length - 1]__					}_				}_				if (type instanceof Class) {_					return (Class<?>) type__				}_				else if (type instanceof ParameterizedType) {_					Type arg = ((ParameterizedType) type).getRawType()__					if (arg instanceof Class) {_						return (Class<?>) arg__					}_				}_				return Object.class__			}_			else {_				return this.field.getType()__			}_		}_		else {_			return this.methodParameter.getNestedParameterType()__		}_	};determine,the,declared,non,generic,type,of,the,wrapped,parameter,field,return,the,declared,type,never,code,null;public,class,get,dependency,type,if,this,field,null,if,this,nesting,level,1,type,type,this,field,get,generic,type,for,int,i,2,i,this,nesting,level,i,if,type,instanceof,parameterized,type,type,args,parameterized,type,type,get,actual,type,arguments,type,args,args,length,1,if,type,instanceof,class,return,class,type,else,if,type,instanceof,parameterized,type,type,arg,parameterized,type,type,get,raw,type,if,arg,instanceof,class,return,class,arg,return,object,class,else,return,this,field,get,type,else,return,this,method,parameter,get,nested,parameter,type
DependencyDescriptor -> public Class<?> getDependencyType();1458755547;Determine the declared (non-generic) type of the wrapped parameter/field._@return the declared type (never {@code null});public Class<?> getDependencyType() {_		if (this.field != null) {_			if (this.nestingLevel > 1) {_				Type type = this.field.getGenericType()__				for (int i = 2_ i <= this.nestingLevel_ i++) {_					if (type instanceof ParameterizedType) {_						Type[] args = ((ParameterizedType) type).getActualTypeArguments()__						type = args[args.length - 1]__					}_					_				}_				if (type instanceof Class) {_					return (Class<?>) type__				}_				else if (type instanceof ParameterizedType) {_					Type arg = ((ParameterizedType) type).getRawType()__					if (arg instanceof Class) {_						return (Class<?>) arg__					}_				}_				return Object.class__			}_			else {_				return this.field.getType()__			}_		}_		else {_			return this.methodParameter.getNestedParameterType()__		}_	};determine,the,declared,non,generic,type,of,the,wrapped,parameter,field,return,the,declared,type,never,code,null;public,class,get,dependency,type,if,this,field,null,if,this,nesting,level,1,type,type,this,field,get,generic,type,for,int,i,2,i,this,nesting,level,i,if,type,instanceof,parameterized,type,type,args,parameterized,type,type,get,actual,type,arguments,type,args,args,length,1,if,type,instanceof,class,return,class,type,else,if,type,instanceof,parameterized,type,type,arg,parameterized,type,type,get,raw,type,if,arg,instanceof,class,return,class,arg,return,object,class,else,return,this,field,get,type,else,return,this,method,parameter,get,nested,parameter,type
DependencyDescriptor -> public Class<?> getDependencyType();1466893134;Determine the declared (non-generic) type of the wrapped parameter/field._@return the declared type (never {@code null});public Class<?> getDependencyType() {_		if (this.field != null) {_			if (this.nestingLevel > 1) {_				Type type = this.field.getGenericType()__				for (int i = 2_ i <= this.nestingLevel_ i++) {_					if (type instanceof ParameterizedType) {_						Type[] args = ((ParameterizedType) type).getActualTypeArguments()__						type = args[args.length - 1]__					}_					_				}_				if (type instanceof Class) {_					return (Class<?>) type__				}_				else if (type instanceof ParameterizedType) {_					Type arg = ((ParameterizedType) type).getRawType()__					if (arg instanceof Class) {_						return (Class<?>) arg__					}_				}_				return Object.class__			}_			else {_				return this.field.getType()__			}_		}_		else {_			return this.methodParameter.getNestedParameterType()__		}_	};determine,the,declared,non,generic,type,of,the,wrapped,parameter,field,return,the,declared,type,never,code,null;public,class,get,dependency,type,if,this,field,null,if,this,nesting,level,1,type,type,this,field,get,generic,type,for,int,i,2,i,this,nesting,level,i,if,type,instanceof,parameterized,type,type,args,parameterized,type,type,get,actual,type,arguments,type,args,args,length,1,if,type,instanceof,class,return,class,type,else,if,type,instanceof,parameterized,type,type,arg,parameterized,type,type,get,raw,type,if,arg,instanceof,class,return,class,arg,return,object,class,else,return,this,field,get,type,else,return,this,method,parameter,get,nested,parameter,type
DependencyDescriptor -> public Class<?> getDependencyType();1469030751;Determine the declared (non-generic) type of the wrapped parameter/field._@return the declared type (never {@code null});public Class<?> getDependencyType() {_		if (this.field != null) {_			if (this.nestingLevel > 1) {_				Type type = this.field.getGenericType()__				for (int i = 2_ i <= this.nestingLevel_ i++) {_					if (type instanceof ParameterizedType) {_						Type[] args = ((ParameterizedType) type).getActualTypeArguments()__						type = args[args.length - 1]__					}_					_				}_				if (type instanceof Class) {_					return (Class<?>) type__				}_				else if (type instanceof ParameterizedType) {_					Type arg = ((ParameterizedType) type).getRawType()__					if (arg instanceof Class) {_						return (Class<?>) arg__					}_				}_				return Object.class__			}_			else {_				return this.field.getType()__			}_		}_		else {_			return this.methodParameter.getNestedParameterType()__		}_	};determine,the,declared,non,generic,type,of,the,wrapped,parameter,field,return,the,declared,type,never,code,null;public,class,get,dependency,type,if,this,field,null,if,this,nesting,level,1,type,type,this,field,get,generic,type,for,int,i,2,i,this,nesting,level,i,if,type,instanceof,parameterized,type,type,args,parameterized,type,type,get,actual,type,arguments,type,args,args,length,1,if,type,instanceof,class,return,class,type,else,if,type,instanceof,parameterized,type,type,arg,parameterized,type,type,get,raw,type,if,arg,instanceof,class,return,class,arg,return,object,class,else,return,this,field,get,type,else,return,this,method,parameter,get,nested,parameter,type
DependencyDescriptor -> public Class<?> getDependencyType();1481647138;Determine the declared (non-generic) type of the wrapped parameter/field._@return the declared type (never {@code null});public Class<?> getDependencyType() {_		if (this.field != null) {_			if (this.nestingLevel > 1) {_				Type type = this.field.getGenericType()__				for (int i = 2_ i <= this.nestingLevel_ i++) {_					if (type instanceof ParameterizedType) {_						Type[] args = ((ParameterizedType) type).getActualTypeArguments()__						type = args[args.length - 1]__					}_					_				}_				if (type instanceof Class) {_					return (Class<?>) type__				}_				else if (type instanceof ParameterizedType) {_					Type arg = ((ParameterizedType) type).getRawType()__					if (arg instanceof Class) {_						return (Class<?>) arg__					}_				}_				return Object.class__			}_			else {_				return this.field.getType()__			}_		}_		else {_			return this.methodParameter.getNestedParameterType()__		}_	};determine,the,declared,non,generic,type,of,the,wrapped,parameter,field,return,the,declared,type,never,code,null;public,class,get,dependency,type,if,this,field,null,if,this,nesting,level,1,type,type,this,field,get,generic,type,for,int,i,2,i,this,nesting,level,i,if,type,instanceof,parameterized,type,type,args,parameterized,type,type,get,actual,type,arguments,type,args,args,length,1,if,type,instanceof,class,return,class,type,else,if,type,instanceof,parameterized,type,type,arg,parameterized,type,type,get,raw,type,if,arg,instanceof,class,return,class,arg,return,object,class,else,return,this,field,get,type,else,return,this,method,parameter,get,nested,parameter,type
DependencyDescriptor -> public Class<?> getDependencyType();1482091448;Determine the declared (non-generic) type of the wrapped parameter/field._@return the declared type (never {@code null});public Class<?> getDependencyType() {_		if (this.field != null) {_			if (this.nestingLevel > 1) {_				Type type = this.field.getGenericType()__				for (int i = 2_ i <= this.nestingLevel_ i++) {_					if (type instanceof ParameterizedType) {_						Type[] args = ((ParameterizedType) type).getActualTypeArguments()__						type = args[args.length - 1]__					}_					_				}_				if (type instanceof Class) {_					return (Class<?>) type__				}_				else if (type instanceof ParameterizedType) {_					Type arg = ((ParameterizedType) type).getRawType()__					if (arg instanceof Class) {_						return (Class<?>) arg__					}_				}_				return Object.class__			}_			else {_				return this.field.getType()__			}_		}_		else {_			return this.methodParameter.getNestedParameterType()__		}_	};determine,the,declared,non,generic,type,of,the,wrapped,parameter,field,return,the,declared,type,never,code,null;public,class,get,dependency,type,if,this,field,null,if,this,nesting,level,1,type,type,this,field,get,generic,type,for,int,i,2,i,this,nesting,level,i,if,type,instanceof,parameterized,type,type,args,parameterized,type,type,get,actual,type,arguments,type,args,args,length,1,if,type,instanceof,class,return,class,type,else,if,type,instanceof,parameterized,type,type,arg,parameterized,type,type,get,raw,type,if,arg,instanceof,class,return,class,arg,return,object,class,else,return,this,field,get,type,else,return,this,method,parameter,get,nested,parameter,type
DependencyDescriptor -> public Class<?> getDependencyType();1485277217;Determine the declared (non-generic) type of the wrapped parameter/field._@return the declared type (never {@code null});public Class<?> getDependencyType() {_		if (this.field != null) {_			if (this.nestingLevel > 1) {_				Type type = this.field.getGenericType()__				for (int i = 2_ i <= this.nestingLevel_ i++) {_					if (type instanceof ParameterizedType) {_						Type[] args = ((ParameterizedType) type).getActualTypeArguments()__						type = args[args.length - 1]__					}_					_				}_				if (type instanceof Class) {_					return (Class<?>) type__				}_				else if (type instanceof ParameterizedType) {_					Type arg = ((ParameterizedType) type).getRawType()__					if (arg instanceof Class) {_						return (Class<?>) arg__					}_				}_				return Object.class__			}_			else {_				return this.field.getType()__			}_		}_		else {_			return this.methodParameter.getNestedParameterType()__		}_	};determine,the,declared,non,generic,type,of,the,wrapped,parameter,field,return,the,declared,type,never,code,null;public,class,get,dependency,type,if,this,field,null,if,this,nesting,level,1,type,type,this,field,get,generic,type,for,int,i,2,i,this,nesting,level,i,if,type,instanceof,parameterized,type,type,args,parameterized,type,type,get,actual,type,arguments,type,args,args,length,1,if,type,instanceof,class,return,class,type,else,if,type,instanceof,parameterized,type,type,arg,parameterized,type,type,get,raw,type,if,arg,instanceof,class,return,class,arg,return,object,class,else,return,this,field,get,type,else,return,this,method,parameter,get,nested,parameter,type
DependencyDescriptor -> public Class<?> getDependencyType();1485300605;Determine the declared (non-generic) type of the wrapped parameter/field._@return the declared type (never {@code null});public Class<?> getDependencyType() {_		if (this.field != null) {_			if (this.nestingLevel > 1) {_				Type type = this.field.getGenericType()__				for (int i = 2_ i <= this.nestingLevel_ i++) {_					if (type instanceof ParameterizedType) {_						Type[] args = ((ParameterizedType) type).getActualTypeArguments()__						type = args[args.length - 1]__					}_					_				}_				if (type instanceof Class) {_					return (Class<?>) type__				}_				else if (type instanceof ParameterizedType) {_					Type arg = ((ParameterizedType) type).getRawType()__					if (arg instanceof Class) {_						return (Class<?>) arg__					}_				}_				return Object.class__			}_			else {_				return this.field.getType()__			}_		}_		else {_			return this.methodParameter.getNestedParameterType()__		}_	};determine,the,declared,non,generic,type,of,the,wrapped,parameter,field,return,the,declared,type,never,code,null;public,class,get,dependency,type,if,this,field,null,if,this,nesting,level,1,type,type,this,field,get,generic,type,for,int,i,2,i,this,nesting,level,i,if,type,instanceof,parameterized,type,type,args,parameterized,type,type,get,actual,type,arguments,type,args,args,length,1,if,type,instanceof,class,return,class,type,else,if,type,instanceof,parameterized,type,type,arg,parameterized,type,type,get,raw,type,if,arg,instanceof,class,return,class,arg,return,object,class,else,return,this,field,get,type,else,return,this,method,parameter,get,nested,parameter,type
DependencyDescriptor -> public Class<?> getDependencyType();1495868221;Determine the declared (non-generic) type of the wrapped parameter/field._@return the declared type (never {@code null});public Class<?> getDependencyType() {_		if (this.field != null) {_			if (this.nestingLevel > 1) {_				Type type = this.field.getGenericType()__				for (int i = 2_ i <= this.nestingLevel_ i++) {_					if (type instanceof ParameterizedType) {_						Type[] args = ((ParameterizedType) type).getActualTypeArguments()__						type = args[args.length - 1]__					}_					_				}_				if (type instanceof Class) {_					return (Class<?>) type__				}_				else if (type instanceof ParameterizedType) {_					Type arg = ((ParameterizedType) type).getRawType()__					if (arg instanceof Class) {_						return (Class<?>) arg__					}_				}_				return Object.class__			}_			else {_				return this.field.getType()__			}_		}_		else {_			return this.methodParameter.getNestedParameterType()__		}_	};determine,the,declared,non,generic,type,of,the,wrapped,parameter,field,return,the,declared,type,never,code,null;public,class,get,dependency,type,if,this,field,null,if,this,nesting,level,1,type,type,this,field,get,generic,type,for,int,i,2,i,this,nesting,level,i,if,type,instanceof,parameterized,type,type,args,parameterized,type,type,get,actual,type,arguments,type,args,args,length,1,if,type,instanceof,class,return,class,type,else,if,type,instanceof,parameterized,type,type,arg,parameterized,type,type,get,raw,type,if,arg,instanceof,class,return,class,arg,return,object,class,else,return,this,field,get,type,else,return,this,method,parameter,get,nested,parameter,type
DependencyDescriptor -> public Class<?> getDependencyType();1496837955;Determine the declared (non-generic) type of the wrapped parameter/field._@return the declared type (never {@code null});public Class<?> getDependencyType() {_		if (this.field != null) {_			if (this.nestingLevel > 1) {_				Type type = this.field.getGenericType()__				for (int i = 2_ i <= this.nestingLevel_ i++) {_					if (type instanceof ParameterizedType) {_						Type[] args = ((ParameterizedType) type).getActualTypeArguments()__						type = args[args.length - 1]__					}_					_				}_				if (type instanceof Class) {_					return (Class<?>) type__				}_				else if (type instanceof ParameterizedType) {_					Type arg = ((ParameterizedType) type).getRawType()__					if (arg instanceof Class) {_						return (Class<?>) arg__					}_				}_				return Object.class__			}_			else {_				return this.field.getType()__			}_		}_		else {_			return this.methodParameter.getNestedParameterType()__		}_	};determine,the,declared,non,generic,type,of,the,wrapped,parameter,field,return,the,declared,type,never,code,null;public,class,get,dependency,type,if,this,field,null,if,this,nesting,level,1,type,type,this,field,get,generic,type,for,int,i,2,i,this,nesting,level,i,if,type,instanceof,parameterized,type,type,args,parameterized,type,type,get,actual,type,arguments,type,args,args,length,1,if,type,instanceof,class,return,class,type,else,if,type,instanceof,parameterized,type,type,arg,parameterized,type,type,get,raw,type,if,arg,instanceof,class,return,class,arg,return,object,class,else,return,this,field,get,type,else,return,this,method,parameter,get,nested,parameter,type
DependencyDescriptor -> public Class<?> getDependencyType();1498780456;Determine the declared (non-generic) type of the wrapped parameter/field._@return the declared type (never {@code null});public Class<?> getDependencyType() {_		if (this.field != null) {_			if (this.nestingLevel > 1) {_				Type type = this.field.getGenericType()__				for (int i = 2_ i <= this.nestingLevel_ i++) {_					if (type instanceof ParameterizedType) {_						Type[] args = ((ParameterizedType) type).getActualTypeArguments()__						type = args[args.length - 1]__					}_					_				}_				if (type instanceof Class) {_					return (Class<?>) type__				}_				else if (type instanceof ParameterizedType) {_					Type arg = ((ParameterizedType) type).getRawType()__					if (arg instanceof Class) {_						return (Class<?>) arg__					}_				}_				return Object.class__			}_			else {_				return this.field.getType()__			}_		}_		else {_			return obtainMethodParameter().getNestedParameterType()__		}_	};determine,the,declared,non,generic,type,of,the,wrapped,parameter,field,return,the,declared,type,never,code,null;public,class,get,dependency,type,if,this,field,null,if,this,nesting,level,1,type,type,this,field,get,generic,type,for,int,i,2,i,this,nesting,level,i,if,type,instanceof,parameterized,type,type,args,parameterized,type,type,get,actual,type,arguments,type,args,args,length,1,if,type,instanceof,class,return,class,type,else,if,type,instanceof,parameterized,type,type,arg,parameterized,type,type,get,raw,type,if,arg,instanceof,class,return,class,arg,return,object,class,else,return,this,field,get,type,else,return,obtain,method,parameter,get,nested,parameter,type
DependencyDescriptor -> public Class<?> getDependencyType();1503007895;Determine the declared (non-generic) type of the wrapped parameter/field._@return the declared type (never {@code null});public Class<?> getDependencyType() {_		if (this.field != null) {_			if (this.nestingLevel > 1) {_				Type type = this.field.getGenericType()__				for (int i = 2_ i <= this.nestingLevel_ i++) {_					if (type instanceof ParameterizedType) {_						Type[] args = ((ParameterizedType) type).getActualTypeArguments()__						type = args[args.length - 1]__					}_					_				}_				if (type instanceof Class) {_					return (Class<?>) type__				}_				else if (type instanceof ParameterizedType) {_					Type arg = ((ParameterizedType) type).getRawType()__					if (arg instanceof Class) {_						return (Class<?>) arg__					}_				}_				return Object.class__			}_			else {_				return this.field.getType()__			}_		}_		else {_			return obtainMethodParameter().getNestedParameterType()__		}_	};determine,the,declared,non,generic,type,of,the,wrapped,parameter,field,return,the,declared,type,never,code,null;public,class,get,dependency,type,if,this,field,null,if,this,nesting,level,1,type,type,this,field,get,generic,type,for,int,i,2,i,this,nesting,level,i,if,type,instanceof,parameterized,type,type,args,parameterized,type,type,get,actual,type,arguments,type,args,args,length,1,if,type,instanceof,class,return,class,type,else,if,type,instanceof,parameterized,type,type,arg,parameterized,type,type,get,raw,type,if,arg,instanceof,class,return,class,arg,return,object,class,else,return,this,field,get,type,else,return,obtain,method,parameter,get,nested,parameter,type
DependencyDescriptor -> public Class<?> getDependencyType();1503272000;Determine the declared (non-generic) type of the wrapped parameter/field._@return the declared type (never {@code null});public Class<?> getDependencyType() {_		if (this.field != null) {_			if (this.nestingLevel > 1) {_				Type type = this.field.getGenericType()__				for (int i = 2_ i <= this.nestingLevel_ i++) {_					if (type instanceof ParameterizedType) {_						Type[] args = ((ParameterizedType) type).getActualTypeArguments()__						type = args[args.length - 1]__					}_					_				}_				if (type instanceof Class) {_					return (Class<?>) type__				}_				else if (type instanceof ParameterizedType) {_					Type arg = ((ParameterizedType) type).getRawType()__					if (arg instanceof Class) {_						return (Class<?>) arg__					}_				}_				return Object.class__			}_			else {_				return this.field.getType()__			}_		}_		else {_			return obtainMethodParameter().getNestedParameterType()__		}_	};determine,the,declared,non,generic,type,of,the,wrapped,parameter,field,return,the,declared,type,never,code,null;public,class,get,dependency,type,if,this,field,null,if,this,nesting,level,1,type,type,this,field,get,generic,type,for,int,i,2,i,this,nesting,level,i,if,type,instanceof,parameterized,type,type,args,parameterized,type,type,get,actual,type,arguments,type,args,args,length,1,if,type,instanceof,class,return,class,type,else,if,type,instanceof,parameterized,type,type,arg,parameterized,type,type,get,raw,type,if,arg,instanceof,class,return,class,arg,return,object,class,else,return,this,field,get,type,else,return,obtain,method,parameter,get,nested,parameter,type
DependencyDescriptor -> public Class<?> getDependencyType();1503411745;Determine the declared (non-generic) type of the wrapped parameter/field._@return the declared type (never {@code null});public Class<?> getDependencyType() {_		if (this.field != null) {_			if (this.nestingLevel > 1) {_				Type type = this.field.getGenericType()__				for (int i = 2_ i <= this.nestingLevel_ i++) {_					if (type instanceof ParameterizedType) {_						Type[] args = ((ParameterizedType) type).getActualTypeArguments()__						type = args[args.length - 1]__					}_					_				}_				if (type instanceof Class) {_					return (Class<?>) type__				}_				else if (type instanceof ParameterizedType) {_					Type arg = ((ParameterizedType) type).getRawType()__					if (arg instanceof Class) {_						return (Class<?>) arg__					}_				}_				return Object.class__			}_			else {_				return this.field.getType()__			}_		}_		else {_			return obtainMethodParameter().getNestedParameterType()__		}_	};determine,the,declared,non,generic,type,of,the,wrapped,parameter,field,return,the,declared,type,never,code,null;public,class,get,dependency,type,if,this,field,null,if,this,nesting,level,1,type,type,this,field,get,generic,type,for,int,i,2,i,this,nesting,level,i,if,type,instanceof,parameterized,type,type,args,parameterized,type,type,get,actual,type,arguments,type,args,args,length,1,if,type,instanceof,class,return,class,type,else,if,type,instanceof,parameterized,type,type,arg,parameterized,type,type,get,raw,type,if,arg,instanceof,class,return,class,arg,return,object,class,else,return,this,field,get,type,else,return,obtain,method,parameter,get,nested,parameter,type
DependencyDescriptor -> public Class<?> getDependencyType();1506551472;Determine the declared (non-generic) type of the wrapped parameter/field._@return the declared type (never {@code null});public Class<?> getDependencyType() {_		if (this.field != null) {_			if (this.nestingLevel > 1) {_				Type type = this.field.getGenericType()__				for (int i = 2_ i <= this.nestingLevel_ i++) {_					if (type instanceof ParameterizedType) {_						Type[] args = ((ParameterizedType) type).getActualTypeArguments()__						type = args[args.length - 1]__					}_					_				}_				if (type instanceof Class) {_					return (Class<?>) type__				}_				else if (type instanceof ParameterizedType) {_					Type arg = ((ParameterizedType) type).getRawType()__					if (arg instanceof Class) {_						return (Class<?>) arg__					}_				}_				return Object.class__			}_			else {_				return this.field.getType()__			}_		}_		else {_			return obtainMethodParameter().getNestedParameterType()__		}_	};determine,the,declared,non,generic,type,of,the,wrapped,parameter,field,return,the,declared,type,never,code,null;public,class,get,dependency,type,if,this,field,null,if,this,nesting,level,1,type,type,this,field,get,generic,type,for,int,i,2,i,this,nesting,level,i,if,type,instanceof,parameterized,type,type,args,parameterized,type,type,get,actual,type,arguments,type,args,args,length,1,if,type,instanceof,class,return,class,type,else,if,type,instanceof,parameterized,type,type,arg,parameterized,type,type,get,raw,type,if,arg,instanceof,class,return,class,arg,return,object,class,else,return,this,field,get,type,else,return,obtain,method,parameter,get,nested,parameter,type
DependencyDescriptor -> public Class<?> getDependencyType();1530174524;Determine the declared (non-generic) type of the wrapped parameter/field._@return the declared type (never {@code null});public Class<?> getDependencyType() {_		if (this.field != null) {_			if (this.nestingLevel > 1) {_				Type type = this.field.getGenericType()__				for (int i = 2_ i <= this.nestingLevel_ i++) {_					if (type instanceof ParameterizedType) {_						Type[] args = ((ParameterizedType) type).getActualTypeArguments()__						type = args[args.length - 1]__					}_					_				}_				if (type instanceof Class) {_					return (Class<?>) type__				}_				else if (type instanceof ParameterizedType) {_					Type arg = ((ParameterizedType) type).getRawType()__					if (arg instanceof Class) {_						return (Class<?>) arg__					}_				}_				return Object.class__			}_			else {_				return this.field.getType()__			}_		}_		else {_			return obtainMethodParameter().getNestedParameterType()__		}_	};determine,the,declared,non,generic,type,of,the,wrapped,parameter,field,return,the,declared,type,never,code,null;public,class,get,dependency,type,if,this,field,null,if,this,nesting,level,1,type,type,this,field,get,generic,type,for,int,i,2,i,this,nesting,level,i,if,type,instanceof,parameterized,type,type,args,parameterized,type,type,get,actual,type,arguments,type,args,args,length,1,if,type,instanceof,class,return,class,type,else,if,type,instanceof,parameterized,type,type,arg,parameterized,type,type,get,raw,type,if,arg,instanceof,class,return,class,arg,return,object,class,else,return,this,field,get,type,else,return,obtain,method,parameter,get,nested,parameter,type
DependencyDescriptor -> public Class<?> getDependencyType();1530198749;Determine the declared (non-generic) type of the wrapped parameter/field._@return the declared type (never {@code null});public Class<?> getDependencyType() {_		if (this.field != null) {_			if (this.nestingLevel > 1) {_				Type type = this.field.getGenericType()__				for (int i = 2_ i <= this.nestingLevel_ i++) {_					if (type instanceof ParameterizedType) {_						Type[] args = ((ParameterizedType) type).getActualTypeArguments()__						type = args[args.length - 1]__					}_					_				}_				if (type instanceof Class) {_					return (Class<?>) type__				}_				else if (type instanceof ParameterizedType) {_					Type arg = ((ParameterizedType) type).getRawType()__					if (arg instanceof Class) {_						return (Class<?>) arg__					}_				}_				return Object.class__			}_			else {_				return this.field.getType()__			}_		}_		else {_			return obtainMethodParameter().getNestedParameterType()__		}_	};determine,the,declared,non,generic,type,of,the,wrapped,parameter,field,return,the,declared,type,never,code,null;public,class,get,dependency,type,if,this,field,null,if,this,nesting,level,1,type,type,this,field,get,generic,type,for,int,i,2,i,this,nesting,level,i,if,type,instanceof,parameterized,type,type,args,parameterized,type,type,get,actual,type,arguments,type,args,args,length,1,if,type,instanceof,class,return,class,type,else,if,type,instanceof,parameterized,type,type,arg,parameterized,type,type,get,raw,type,if,arg,instanceof,class,return,class,arg,return,object,class,else,return,this,field,get,type,else,return,obtain,method,parameter,get,nested,parameter,type
DependencyDescriptor -> public Class<?> getDependencyType();1530201727;Determine the declared (non-generic) type of the wrapped parameter/field._@return the declared type (never {@code null});public Class<?> getDependencyType() {_		if (this.field != null) {_			if (this.nestingLevel > 1) {_				Type type = this.field.getGenericType()__				for (int i = 2_ i <= this.nestingLevel_ i++) {_					if (type instanceof ParameterizedType) {_						Type[] args = ((ParameterizedType) type).getActualTypeArguments()__						type = args[args.length - 1]__					}_				}_				if (type instanceof Class) {_					return (Class<?>) type__				}_				else if (type instanceof ParameterizedType) {_					Type arg = ((ParameterizedType) type).getRawType()__					if (arg instanceof Class) {_						return (Class<?>) arg__					}_				}_				return Object.class__			}_			else {_				return this.field.getType()__			}_		}_		else {_			return obtainMethodParameter().getNestedParameterType()__		}_	};determine,the,declared,non,generic,type,of,the,wrapped,parameter,field,return,the,declared,type,never,code,null;public,class,get,dependency,type,if,this,field,null,if,this,nesting,level,1,type,type,this,field,get,generic,type,for,int,i,2,i,this,nesting,level,i,if,type,instanceof,parameterized,type,type,args,parameterized,type,type,get,actual,type,arguments,type,args,args,length,1,if,type,instanceof,class,return,class,type,else,if,type,instanceof,parameterized,type,type,arg,parameterized,type,type,get,raw,type,if,arg,instanceof,class,return,class,arg,return,object,class,else,return,this,field,get,type,else,return,obtain,method,parameter,get,nested,parameter,type
DependencyDescriptor -> public Class<?> getDependencyType();1532274593;Determine the declared (non-generic) type of the wrapped parameter/field._@return the declared type (never {@code null});public Class<?> getDependencyType() {_		if (this.field != null) {_			if (this.nestingLevel > 1) {_				Type type = this.field.getGenericType()__				for (int i = 2_ i <= this.nestingLevel_ i++) {_					if (type instanceof ParameterizedType) {_						Type[] args = ((ParameterizedType) type).getActualTypeArguments()__						type = args[args.length - 1]__					}_				}_				if (type instanceof Class) {_					return (Class<?>) type__				}_				else if (type instanceof ParameterizedType) {_					Type arg = ((ParameterizedType) type).getRawType()__					if (arg instanceof Class) {_						return (Class<?>) arg__					}_				}_				return Object.class__			}_			else {_				return this.field.getType()__			}_		}_		else {_			return obtainMethodParameter().getNestedParameterType()__		}_	};determine,the,declared,non,generic,type,of,the,wrapped,parameter,field,return,the,declared,type,never,code,null;public,class,get,dependency,type,if,this,field,null,if,this,nesting,level,1,type,type,this,field,get,generic,type,for,int,i,2,i,this,nesting,level,i,if,type,instanceof,parameterized,type,type,args,parameterized,type,type,get,actual,type,arguments,type,args,args,length,1,if,type,instanceof,class,return,class,type,else,if,type,instanceof,parameterized,type,type,arg,parameterized,type,type,get,raw,type,if,arg,instanceof,class,return,class,arg,return,object,class,else,return,this,field,get,type,else,return,obtain,method,parameter,get,nested,parameter,type
DependencyDescriptor -> public Class<?> getDependencyType();1532332488;Determine the declared (non-generic) type of the wrapped parameter/field._@return the declared type (never {@code null});public Class<?> getDependencyType() {_		if (this.field != null) {_			if (this.nestingLevel > 1) {_				Type type = this.field.getGenericType()__				for (int i = 2_ i <= this.nestingLevel_ i++) {_					if (type instanceof ParameterizedType) {_						Type[] args = ((ParameterizedType) type).getActualTypeArguments()__						type = args[args.length - 1]__					}_				}_				if (type instanceof Class) {_					return (Class<?>) type__				}_				else if (type instanceof ParameterizedType) {_					Type arg = ((ParameterizedType) type).getRawType()__					if (arg instanceof Class) {_						return (Class<?>) arg__					}_				}_				return Object.class__			}_			else {_				return this.field.getType()__			}_		}_		else {_			return obtainMethodParameter().getNestedParameterType()__		}_	};determine,the,declared,non,generic,type,of,the,wrapped,parameter,field,return,the,declared,type,never,code,null;public,class,get,dependency,type,if,this,field,null,if,this,nesting,level,1,type,type,this,field,get,generic,type,for,int,i,2,i,this,nesting,level,i,if,type,instanceof,parameterized,type,type,args,parameterized,type,type,get,actual,type,arguments,type,args,args,length,1,if,type,instanceof,class,return,class,type,else,if,type,instanceof,parameterized,type,type,arg,parameterized,type,type,get,raw,type,if,arg,instanceof,class,return,class,arg,return,object,class,else,return,this,field,get,type,else,return,obtain,method,parameter,get,nested,parameter,type
DependencyDescriptor -> public Class<?> getDependencyType();1532385723;Determine the declared (non-generic) type of the wrapped parameter/field._@return the declared type (never {@code null});public Class<?> getDependencyType() {_		if (this.field != null) {_			if (this.nestingLevel > 1) {_				Type type = this.field.getGenericType()__				for (int i = 2_ i <= this.nestingLevel_ i++) {_					if (type instanceof ParameterizedType) {_						Type[] args = ((ParameterizedType) type).getActualTypeArguments()__						type = args[args.length - 1]__					}_				}_				if (type instanceof Class) {_					return (Class<?>) type__				}_				else if (type instanceof ParameterizedType) {_					Type arg = ((ParameterizedType) type).getRawType()__					if (arg instanceof Class) {_						return (Class<?>) arg__					}_				}_				return Object.class__			}_			else {_				return this.field.getType()__			}_		}_		else {_			return obtainMethodParameter().getNestedParameterType()__		}_	};determine,the,declared,non,generic,type,of,the,wrapped,parameter,field,return,the,declared,type,never,code,null;public,class,get,dependency,type,if,this,field,null,if,this,nesting,level,1,type,type,this,field,get,generic,type,for,int,i,2,i,this,nesting,level,i,if,type,instanceof,parameterized,type,type,args,parameterized,type,type,get,actual,type,arguments,type,args,args,length,1,if,type,instanceof,class,return,class,type,else,if,type,instanceof,parameterized,type,type,arg,parameterized,type,type,get,raw,type,if,arg,instanceof,class,return,class,arg,return,object,class,else,return,this,field,get,type,else,return,obtain,method,parameter,get,nested,parameter,type
DependencyDescriptor -> public Class<?> getDependencyType();1535039984;Determine the declared (non-generic) type of the wrapped parameter/field._@return the declared type (never {@code null});public Class<?> getDependencyType() {_		if (this.field != null) {_			if (this.nestingLevel > 1) {_				Type type = this.field.getGenericType()__				for (int i = 2_ i <= this.nestingLevel_ i++) {_					if (type instanceof ParameterizedType) {_						Type[] args = ((ParameterizedType) type).getActualTypeArguments()__						type = args[args.length - 1]__					}_				}_				if (type instanceof Class) {_					return (Class<?>) type__				}_				else if (type instanceof ParameterizedType) {_					Type arg = ((ParameterizedType) type).getRawType()__					if (arg instanceof Class) {_						return (Class<?>) arg__					}_				}_				return Object.class__			}_			else {_				return this.field.getType()__			}_		}_		else {_			return obtainMethodParameter().getNestedParameterType()__		}_	};determine,the,declared,non,generic,type,of,the,wrapped,parameter,field,return,the,declared,type,never,code,null;public,class,get,dependency,type,if,this,field,null,if,this,nesting,level,1,type,type,this,field,get,generic,type,for,int,i,2,i,this,nesting,level,i,if,type,instanceof,parameterized,type,type,args,parameterized,type,type,get,actual,type,arguments,type,args,args,length,1,if,type,instanceof,class,return,class,type,else,if,type,instanceof,parameterized,type,type,arg,parameterized,type,type,get,raw,type,if,arg,instanceof,class,return,class,arg,return,object,class,else,return,this,field,get,type,else,return,obtain,method,parameter,get,nested,parameter,type
DependencyDescriptor -> public Class<?> getDependencyType();1536855799;Determine the declared (non-generic) type of the wrapped parameter/field._@return the declared type (never {@code null});public Class<?> getDependencyType() {_		if (this.field != null) {_			if (this.nestingLevel > 1) {_				Type type = this.field.getGenericType()__				for (int i = 2_ i <= this.nestingLevel_ i++) {_					if (type instanceof ParameterizedType) {_						Type[] args = ((ParameterizedType) type).getActualTypeArguments()__						type = args[args.length - 1]__					}_				}_				if (type instanceof Class) {_					return (Class<?>) type__				}_				else if (type instanceof ParameterizedType) {_					Type arg = ((ParameterizedType) type).getRawType()__					if (arg instanceof Class) {_						return (Class<?>) arg__					}_				}_				return Object.class__			}_			else {_				return this.field.getType()__			}_		}_		else {_			return obtainMethodParameter().getNestedParameterType()__		}_	};determine,the,declared,non,generic,type,of,the,wrapped,parameter,field,return,the,declared,type,never,code,null;public,class,get,dependency,type,if,this,field,null,if,this,nesting,level,1,type,type,this,field,get,generic,type,for,int,i,2,i,this,nesting,level,i,if,type,instanceof,parameterized,type,type,args,parameterized,type,type,get,actual,type,arguments,type,args,args,length,1,if,type,instanceof,class,return,class,type,else,if,type,instanceof,parameterized,type,type,arg,parameterized,type,type,get,raw,type,if,arg,instanceof,class,return,class,arg,return,object,class,else,return,this,field,get,type,else,return,obtain,method,parameter,get,nested,parameter,type
DependencyDescriptor -> public Class<?> getDependencyType();1546963887;Determine the declared (non-generic) type of the wrapped parameter/field._@return the declared type (never {@code null});public Class<?> getDependencyType() {_		if (this.field != null) {_			if (this.nestingLevel > 1) {_				Type type = this.field.getGenericType()__				for (int i = 2_ i <= this.nestingLevel_ i++) {_					if (type instanceof ParameterizedType) {_						Type[] args = ((ParameterizedType) type).getActualTypeArguments()__						type = args[args.length - 1]__					}_				}_				if (type instanceof Class) {_					return (Class<?>) type__				}_				else if (type instanceof ParameterizedType) {_					Type arg = ((ParameterizedType) type).getRawType()__					if (arg instanceof Class) {_						return (Class<?>) arg__					}_				}_				return Object.class__			}_			else {_				return this.field.getType()__			}_		}_		else {_			return obtainMethodParameter().getNestedParameterType()__		}_	};determine,the,declared,non,generic,type,of,the,wrapped,parameter,field,return,the,declared,type,never,code,null;public,class,get,dependency,type,if,this,field,null,if,this,nesting,level,1,type,type,this,field,get,generic,type,for,int,i,2,i,this,nesting,level,i,if,type,instanceof,parameterized,type,type,args,parameterized,type,type,get,actual,type,arguments,type,args,args,length,1,if,type,instanceof,class,return,class,type,else,if,type,instanceof,parameterized,type,type,arg,parameterized,type,type,get,raw,type,if,arg,instanceof,class,return,class,arg,return,object,class,else,return,this,field,get,type,else,return,obtain,method,parameter,get,nested,parameter,type
DependencyDescriptor -> @Nullable 	public String getDependencyName();1496837955;Determine the name of the wrapped parameter/field._@return the declared name (never {@code null});@Nullable_	public String getDependencyName() {_		return (this.field != null ? this.field.getName() : this.methodParameter.getParameterName())__	};determine,the,name,of,the,wrapped,parameter,field,return,the,declared,name,never,code,null;nullable,public,string,get,dependency,name,return,this,field,null,this,field,get,name,this,method,parameter,get,parameter,name
DependencyDescriptor -> @Nullable 	public String getDependencyName();1498780456;Determine the name of the wrapped parameter/field._@return the declared name (never {@code null});@Nullable_	public String getDependencyName() {_		return (this.field != null ? this.field.getName() : obtainMethodParameter().getParameterName())__	};determine,the,name,of,the,wrapped,parameter,field,return,the,declared,name,never,code,null;nullable,public,string,get,dependency,name,return,this,field,null,this,field,get,name,obtain,method,parameter,get,parameter,name
DependencyDescriptor -> @Nullable 	public String getDependencyName();1503007895;Determine the name of the wrapped parameter/field._@return the declared name (never {@code null});@Nullable_	public String getDependencyName() {_		return (this.field != null ? this.field.getName() : obtainMethodParameter().getParameterName())__	};determine,the,name,of,the,wrapped,parameter,field,return,the,declared,name,never,code,null;nullable,public,string,get,dependency,name,return,this,field,null,this,field,get,name,obtain,method,parameter,get,parameter,name
DependencyDescriptor -> @Nullable 	public String getDependencyName();1503272000;Determine the name of the wrapped parameter/field._@return the declared name (never {@code null});@Nullable_	public String getDependencyName() {_		return (this.field != null ? this.field.getName() : obtainMethodParameter().getParameterName())__	};determine,the,name,of,the,wrapped,parameter,field,return,the,declared,name,never,code,null;nullable,public,string,get,dependency,name,return,this,field,null,this,field,get,name,obtain,method,parameter,get,parameter,name
DependencyDescriptor -> @Nullable 	public String getDependencyName();1503411745;Determine the name of the wrapped parameter/field._@return the declared name (never {@code null});@Nullable_	public String getDependencyName() {_		return (this.field != null ? this.field.getName() : obtainMethodParameter().getParameterName())__	};determine,the,name,of,the,wrapped,parameter,field,return,the,declared,name,never,code,null;nullable,public,string,get,dependency,name,return,this,field,null,this,field,get,name,obtain,method,parameter,get,parameter,name
DependencyDescriptor -> @Nullable 	public String getDependencyName();1506551472;Determine the name of the wrapped parameter/field._@return the declared name (never {@code null});@Nullable_	public String getDependencyName() {_		return (this.field != null ? this.field.getName() : obtainMethodParameter().getParameterName())__	};determine,the,name,of,the,wrapped,parameter,field,return,the,declared,name,never,code,null;nullable,public,string,get,dependency,name,return,this,field,null,this,field,get,name,obtain,method,parameter,get,parameter,name
DependencyDescriptor -> @Nullable 	public String getDependencyName();1530174524;Determine the name of the wrapped parameter/field._@return the declared name (never {@code null});@Nullable_	public String getDependencyName() {_		return (this.field != null ? this.field.getName() : obtainMethodParameter().getParameterName())__	};determine,the,name,of,the,wrapped,parameter,field,return,the,declared,name,never,code,null;nullable,public,string,get,dependency,name,return,this,field,null,this,field,get,name,obtain,method,parameter,get,parameter,name
DependencyDescriptor -> @Nullable 	public String getDependencyName();1530198749;Determine the name of the wrapped parameter/field._@return the declared name (never {@code null});@Nullable_	public String getDependencyName() {_		return (this.field != null ? this.field.getName() : obtainMethodParameter().getParameterName())__	};determine,the,name,of,the,wrapped,parameter,field,return,the,declared,name,never,code,null;nullable,public,string,get,dependency,name,return,this,field,null,this,field,get,name,obtain,method,parameter,get,parameter,name
DependencyDescriptor -> @Nullable 	public String getDependencyName();1530201727;Determine the name of the wrapped parameter/field._@return the declared name (never {@code null});@Nullable_	public String getDependencyName() {_		return (this.field != null ? this.field.getName() : obtainMethodParameter().getParameterName())__	};determine,the,name,of,the,wrapped,parameter,field,return,the,declared,name,never,code,null;nullable,public,string,get,dependency,name,return,this,field,null,this,field,get,name,obtain,method,parameter,get,parameter,name
DependencyDescriptor -> @Nullable 	public String getDependencyName();1532274593;Determine the name of the wrapped parameter/field._@return the declared name (never {@code null});@Nullable_	public String getDependencyName() {_		return (this.field != null ? this.field.getName() : obtainMethodParameter().getParameterName())__	};determine,the,name,of,the,wrapped,parameter,field,return,the,declared,name,never,code,null;nullable,public,string,get,dependency,name,return,this,field,null,this,field,get,name,obtain,method,parameter,get,parameter,name
DependencyDescriptor -> @Nullable 	public String getDependencyName();1532332488;Determine the name of the wrapped parameter/field._@return the declared name (never {@code null});@Nullable_	public String getDependencyName() {_		return (this.field != null ? this.field.getName() : obtainMethodParameter().getParameterName())__	};determine,the,name,of,the,wrapped,parameter,field,return,the,declared,name,never,code,null;nullable,public,string,get,dependency,name,return,this,field,null,this,field,get,name,obtain,method,parameter,get,parameter,name
DependencyDescriptor -> @Nullable 	public String getDependencyName();1532385723;Determine the name of the wrapped parameter/field._@return the declared name (never {@code null});@Nullable_	public String getDependencyName() {_		return (this.field != null ? this.field.getName() : obtainMethodParameter().getParameterName())__	};determine,the,name,of,the,wrapped,parameter,field,return,the,declared,name,never,code,null;nullable,public,string,get,dependency,name,return,this,field,null,this,field,get,name,obtain,method,parameter,get,parameter,name
DependencyDescriptor -> @Nullable 	public String getDependencyName();1535039984;Determine the name of the wrapped parameter/field._@return the declared name (never {@code null});@Nullable_	public String getDependencyName() {_		return (this.field != null ? this.field.getName() : obtainMethodParameter().getParameterName())__	};determine,the,name,of,the,wrapped,parameter,field,return,the,declared,name,never,code,null;nullable,public,string,get,dependency,name,return,this,field,null,this,field,get,name,obtain,method,parameter,get,parameter,name
DependencyDescriptor -> @Nullable 	public String getDependencyName();1536855799;Determine the name of the wrapped parameter/field._@return the declared name (never {@code null});@Nullable_	public String getDependencyName() {_		return (this.field != null ? this.field.getName() : obtainMethodParameter().getParameterName())__	};determine,the,name,of,the,wrapped,parameter,field,return,the,declared,name,never,code,null;nullable,public,string,get,dependency,name,return,this,field,null,this,field,get,name,obtain,method,parameter,get,parameter,name
DependencyDescriptor -> @Nullable 	public String getDependencyName();1546963887;Determine the name of the wrapped parameter/field._@return the declared name (never {@code null});@Nullable_	public String getDependencyName() {_		return (this.field != null ? this.field.getName() : obtainMethodParameter().getParameterName())__	};determine,the,name,of,the,wrapped,parameter,field,return,the,declared,name,never,code,null;nullable,public,string,get,dependency,name,return,this,field,null,this,field,get,name,obtain,method,parameter,get,parameter,name
DependencyDescriptor -> public DependencyDescriptor(Field field, boolean required, boolean eager);1328020251;Create a new descriptor for a field._@param field the field to wrap_@param required whether the dependency is required_@param eager whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching;public DependencyDescriptor(Field field, boolean required, boolean eager) {_		Assert.notNull(field, "Field must not be null")__		this.field = field__		this.declaringClass = field.getDeclaringClass()__		this.fieldName = field.getName()__		this.required = required__		this.eager = eager__	};create,a,new,descriptor,for,a,field,param,field,the,field,to,wrap,param,required,whether,the,dependency,is,required,param,eager,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,dependency,descriptor,field,field,boolean,required,boolean,eager,assert,not,null,field,field,must,not,be,null,this,field,field,this,declaring,class,field,get,declaring,class,this,field,name,field,get,name,this,required,required,this,eager,eager
DependencyDescriptor -> public DependencyDescriptor(Field field, boolean required, boolean eager);1329142650;Create a new descriptor for a field._@param field the field to wrap_@param required whether the dependency is required_@param eager whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching;public DependencyDescriptor(Field field, boolean required, boolean eager) {_		Assert.notNull(field, "Field must not be null")__		this.field = field__		this.declaringClass = field.getDeclaringClass()__		this.fieldName = field.getName()__		this.required = required__		this.eager = eager__	};create,a,new,descriptor,for,a,field,param,field,the,field,to,wrap,param,required,whether,the,dependency,is,required,param,eager,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,dependency,descriptor,field,field,boolean,required,boolean,eager,assert,not,null,field,field,must,not,be,null,this,field,field,this,declaring,class,field,get,declaring,class,this,field,name,field,get,name,this,required,required,this,eager,eager
DependencyDescriptor -> public DependencyDescriptor(Field field, boolean required, boolean eager);1346421549;Create a new descriptor for a field._@param field the field to wrap_@param required whether the dependency is required_@param eager whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching;public DependencyDescriptor(Field field, boolean required, boolean eager) {_		Assert.notNull(field, "Field must not be null")__		this.field = field__		this.declaringClass = field.getDeclaringClass()__		this.fieldName = field.getName()__		this.required = required__		this.eager = eager__	};create,a,new,descriptor,for,a,field,param,field,the,field,to,wrap,param,required,whether,the,dependency,is,required,param,eager,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,dependency,descriptor,field,field,boolean,required,boolean,eager,assert,not,null,field,field,must,not,be,null,this,field,field,this,declaring,class,field,get,declaring,class,this,field,name,field,get,name,this,required,required,this,eager,eager
DependencyDescriptor -> public DependencyDescriptor(Field field, boolean required, boolean eager);1350077654;Create a new descriptor for a field._@param field the field to wrap_@param required whether the dependency is required_@param eager whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching;public DependencyDescriptor(Field field, boolean required, boolean eager) {_		Assert.notNull(field, "Field must not be null")__		this.field = field__		this.declaringClass = field.getDeclaringClass()__		this.fieldName = field.getName()__		this.required = required__		this.eager = eager__	};create,a,new,descriptor,for,a,field,param,field,the,field,to,wrap,param,required,whether,the,dependency,is,required,param,eager,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,dependency,descriptor,field,field,boolean,required,boolean,eager,assert,not,null,field,field,must,not,be,null,this,field,field,this,declaring,class,field,get,declaring,class,this,field,name,field,get,name,this,required,required,this,eager,eager
DependencyDescriptor -> public DependencyDescriptor(Field field, boolean required, boolean eager);1356735495;Create a new descriptor for a field._@param field the field to wrap_@param required whether the dependency is required_@param eager whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching;public DependencyDescriptor(Field field, boolean required, boolean eager) {_		Assert.notNull(field, "Field must not be null")__		this.field = field__		this.declaringClass = field.getDeclaringClass()__		this.fieldName = field.getName()__		this.required = required__		this.eager = eager__	};create,a,new,descriptor,for,a,field,param,field,the,field,to,wrap,param,required,whether,the,dependency,is,required,param,eager,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,dependency,descriptor,field,field,boolean,required,boolean,eager,assert,not,null,field,field,must,not,be,null,this,field,field,this,declaring,class,field,get,declaring,class,this,field,name,field,get,name,this,required,required,this,eager,eager
DependencyDescriptor -> public DependencyDescriptor(Field field, boolean required, boolean eager);1377641038;Create a new descriptor for a field._@param field the field to wrap_@param required whether the dependency is required_@param eager whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching;public DependencyDescriptor(Field field, boolean required, boolean eager) {_		Assert.notNull(field, "Field must not be null")__		this.field = field__		this.declaringClass = field.getDeclaringClass()__		this.fieldName = field.getName()__		this.required = required__		this.eager = eager__	};create,a,new,descriptor,for,a,field,param,field,the,field,to,wrap,param,required,whether,the,dependency,is,required,param,eager,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,dependency,descriptor,field,field,boolean,required,boolean,eager,assert,not,null,field,field,must,not,be,null,this,field,field,this,declaring,class,field,get,declaring,class,this,field,name,field,get,name,this,required,required,this,eager,eager
DependencyDescriptor -> public DependencyDescriptor(Field field, boolean required, boolean eager);1381788683;Create a new descriptor for a field._@param field the field to wrap_@param required whether the dependency is required_@param eager whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching;public DependencyDescriptor(Field field, boolean required, boolean eager) {_		Assert.notNull(field, "Field must not be null")__		this.field = field__		this.declaringClass = field.getDeclaringClass()__		this.fieldName = field.getName()__		this.required = required__		this.eager = eager__	};create,a,new,descriptor,for,a,field,param,field,the,field,to,wrap,param,required,whether,the,dependency,is,required,param,eager,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,dependency,descriptor,field,field,boolean,required,boolean,eager,assert,not,null,field,field,must,not,be,null,this,field,field,this,declaring,class,field,get,declaring,class,this,field,name,field,get,name,this,required,required,this,eager,eager
DependencyDescriptor -> public DependencyDescriptor(Field field, boolean required, boolean eager);1382716358;Create a new descriptor for a field._@param field the field to wrap_@param required whether the dependency is required_@param eager whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching;public DependencyDescriptor(Field field, boolean required, boolean eager) {_		Assert.notNull(field, "Field must not be null")__		this.field = field__		this.declaringClass = field.getDeclaringClass()__		this.fieldName = field.getName()__		this.required = required__		this.eager = eager__	};create,a,new,descriptor,for,a,field,param,field,the,field,to,wrap,param,required,whether,the,dependency,is,required,param,eager,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,dependency,descriptor,field,field,boolean,required,boolean,eager,assert,not,null,field,field,must,not,be,null,this,field,field,this,declaring,class,field,get,declaring,class,this,field,name,field,get,name,this,required,required,this,eager,eager
DependencyDescriptor -> public DependencyDescriptor(Field field, boolean required, boolean eager);1385412762;Create a new descriptor for a field._@param field the field to wrap_@param required whether the dependency is required_@param eager whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching;public DependencyDescriptor(Field field, boolean required, boolean eager) {_		Assert.notNull(field, "Field must not be null")__		this.field = field__		this.declaringClass = field.getDeclaringClass()__		this.fieldName = field.getName()__		this.required = required__		this.eager = eager__	};create,a,new,descriptor,for,a,field,param,field,the,field,to,wrap,param,required,whether,the,dependency,is,required,param,eager,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,dependency,descriptor,field,field,boolean,required,boolean,eager,assert,not,null,field,field,must,not,be,null,this,field,field,this,declaring,class,field,get,declaring,class,this,field,name,field,get,name,this,required,required,this,eager,eager
DependencyDescriptor -> public DependencyDescriptor(Field field, boolean required, boolean eager);1402061390;Create a new descriptor for a field._@param field the field to wrap_@param required whether the dependency is required_@param eager whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching;public DependencyDescriptor(Field field, boolean required, boolean eager) {_		Assert.notNull(field, "Field must not be null")__		this.field = field__		this.declaringClass = field.getDeclaringClass()__		this.fieldName = field.getName()__		this.required = required__		this.eager = eager__	};create,a,new,descriptor,for,a,field,param,field,the,field,to,wrap,param,required,whether,the,dependency,is,required,param,eager,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,dependency,descriptor,field,field,boolean,required,boolean,eager,assert,not,null,field,field,must,not,be,null,this,field,field,this,declaring,class,field,get,declaring,class,this,field,name,field,get,name,this,required,required,this,eager,eager
DependencyDescriptor -> public DependencyDescriptor(Field field, boolean required, boolean eager);1452685925;Create a new descriptor for a field._@param field the field to wrap_@param required whether the dependency is required_@param eager whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching;public DependencyDescriptor(Field field, boolean required, boolean eager) {_		Assert.notNull(field, "Field must not be null")__		this.field = field__		this.declaringClass = field.getDeclaringClass()__		this.fieldName = field.getName()__		this.required = required__		this.eager = eager__	};create,a,new,descriptor,for,a,field,param,field,the,field,to,wrap,param,required,whether,the,dependency,is,required,param,eager,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,dependency,descriptor,field,field,boolean,required,boolean,eager,assert,not,null,field,field,must,not,be,null,this,field,field,this,declaring,class,field,get,declaring,class,this,field,name,field,get,name,this,required,required,this,eager,eager
DependencyDescriptor -> public DependencyDescriptor(Field field, boolean required, boolean eager);1455295525;Create a new descriptor for a field._@param field the field to wrap_@param required whether the dependency is required_@param eager whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching;public DependencyDescriptor(Field field, boolean required, boolean eager) {_		Assert.notNull(field, "Field must not be null")__		this.field = field__		this.declaringClass = field.getDeclaringClass()__		this.fieldName = field.getName()__		this.required = required__		this.eager = eager__	};create,a,new,descriptor,for,a,field,param,field,the,field,to,wrap,param,required,whether,the,dependency,is,required,param,eager,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,dependency,descriptor,field,field,boolean,required,boolean,eager,assert,not,null,field,field,must,not,be,null,this,field,field,this,declaring,class,field,get,declaring,class,this,field,name,field,get,name,this,required,required,this,eager,eager
DependencyDescriptor -> public DependencyDescriptor(Field field, boolean required, boolean eager);1455889195;Create a new descriptor for a field._@param field the field to wrap_@param required whether the dependency is required_@param eager whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching;public DependencyDescriptor(Field field, boolean required, boolean eager) {_		Assert.notNull(field, "Field must not be null")__		this.field = field__		this.declaringClass = field.getDeclaringClass()__		this.fieldName = field.getName()__		this.required = required__		this.eager = eager__	};create,a,new,descriptor,for,a,field,param,field,the,field,to,wrap,param,required,whether,the,dependency,is,required,param,eager,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,dependency,descriptor,field,field,boolean,required,boolean,eager,assert,not,null,field,field,must,not,be,null,this,field,field,this,declaring,class,field,get,declaring,class,this,field,name,field,get,name,this,required,required,this,eager,eager
DependencyDescriptor -> public DependencyDescriptor(Field field, boolean required, boolean eager);1456432609;Create a new descriptor for a field._@param field the field to wrap_@param required whether the dependency is required_@param eager whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching;public DependencyDescriptor(Field field, boolean required, boolean eager) {_		super(field)__		this.declaringClass = field.getDeclaringClass()__		this.fieldName = field.getName()__		this.required = required__		this.eager = eager__	};create,a,new,descriptor,for,a,field,param,field,the,field,to,wrap,param,required,whether,the,dependency,is,required,param,eager,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,dependency,descriptor,field,field,boolean,required,boolean,eager,super,field,this,declaring,class,field,get,declaring,class,this,field,name,field,get,name,this,required,required,this,eager,eager
DependencyDescriptor -> public DependencyDescriptor(Field field, boolean required, boolean eager);1458755547;Create a new descriptor for a field._@param field the field to wrap_@param required whether the dependency is required_@param eager whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching;public DependencyDescriptor(Field field, boolean required, boolean eager) {_		super(field)__		this.declaringClass = field.getDeclaringClass()__		this.fieldName = field.getName()__		this.required = required__		this.eager = eager__	};create,a,new,descriptor,for,a,field,param,field,the,field,to,wrap,param,required,whether,the,dependency,is,required,param,eager,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,dependency,descriptor,field,field,boolean,required,boolean,eager,super,field,this,declaring,class,field,get,declaring,class,this,field,name,field,get,name,this,required,required,this,eager,eager
DependencyDescriptor -> public DependencyDescriptor(Field field, boolean required, boolean eager);1466893134;Create a new descriptor for a field._@param field the field to wrap_@param required whether the dependency is required_@param eager whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching;public DependencyDescriptor(Field field, boolean required, boolean eager) {_		super(field)__		this.declaringClass = field.getDeclaringClass()__		this.fieldName = field.getName()__		this.required = required__		this.eager = eager__	};create,a,new,descriptor,for,a,field,param,field,the,field,to,wrap,param,required,whether,the,dependency,is,required,param,eager,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,dependency,descriptor,field,field,boolean,required,boolean,eager,super,field,this,declaring,class,field,get,declaring,class,this,field,name,field,get,name,this,required,required,this,eager,eager
DependencyDescriptor -> public DependencyDescriptor(Field field, boolean required, boolean eager);1469030751;Create a new descriptor for a field._@param field the field to wrap_@param required whether the dependency is required_@param eager whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching;public DependencyDescriptor(Field field, boolean required, boolean eager) {_		super(field)__		this.declaringClass = field.getDeclaringClass()__		this.fieldName = field.getName()__		this.required = required__		this.eager = eager__	};create,a,new,descriptor,for,a,field,param,field,the,field,to,wrap,param,required,whether,the,dependency,is,required,param,eager,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,dependency,descriptor,field,field,boolean,required,boolean,eager,super,field,this,declaring,class,field,get,declaring,class,this,field,name,field,get,name,this,required,required,this,eager,eager
DependencyDescriptor -> public DependencyDescriptor(Field field, boolean required, boolean eager);1481647138;Create a new descriptor for a field._@param field the field to wrap_@param required whether the dependency is required_@param eager whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching;public DependencyDescriptor(Field field, boolean required, boolean eager) {_		super(field)___		this.declaringClass = field.getDeclaringClass()__		this.fieldName = field.getName()__		this.required = required__		this.eager = eager__	};create,a,new,descriptor,for,a,field,param,field,the,field,to,wrap,param,required,whether,the,dependency,is,required,param,eager,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,dependency,descriptor,field,field,boolean,required,boolean,eager,super,field,this,declaring,class,field,get,declaring,class,this,field,name,field,get,name,this,required,required,this,eager,eager
DependencyDescriptor -> public DependencyDescriptor(Field field, boolean required, boolean eager);1482091448;Create a new descriptor for a field._@param field the field to wrap_@param required whether the dependency is required_@param eager whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching;public DependencyDescriptor(Field field, boolean required, boolean eager) {_		super(field)___		this.declaringClass = field.getDeclaringClass()__		this.fieldName = field.getName()__		this.required = required__		this.eager = eager__	};create,a,new,descriptor,for,a,field,param,field,the,field,to,wrap,param,required,whether,the,dependency,is,required,param,eager,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,dependency,descriptor,field,field,boolean,required,boolean,eager,super,field,this,declaring,class,field,get,declaring,class,this,field,name,field,get,name,this,required,required,this,eager,eager
DependencyDescriptor -> public DependencyDescriptor(Field field, boolean required, boolean eager);1485277217;Create a new descriptor for a field._@param field the field to wrap_@param required whether the dependency is required_@param eager whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching;public DependencyDescriptor(Field field, boolean required, boolean eager) {_		super(field)___		this.declaringClass = field.getDeclaringClass()__		this.fieldName = field.getName()__		this.required = required__		this.eager = eager__	};create,a,new,descriptor,for,a,field,param,field,the,field,to,wrap,param,required,whether,the,dependency,is,required,param,eager,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,dependency,descriptor,field,field,boolean,required,boolean,eager,super,field,this,declaring,class,field,get,declaring,class,this,field,name,field,get,name,this,required,required,this,eager,eager
DependencyDescriptor -> public DependencyDescriptor(Field field, boolean required, boolean eager);1485300605;Create a new descriptor for a field._@param field the field to wrap_@param required whether the dependency is required_@param eager whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching;public DependencyDescriptor(Field field, boolean required, boolean eager) {_		super(field)___		this.declaringClass = field.getDeclaringClass()__		this.fieldName = field.getName()__		this.required = required__		this.eager = eager__	};create,a,new,descriptor,for,a,field,param,field,the,field,to,wrap,param,required,whether,the,dependency,is,required,param,eager,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,dependency,descriptor,field,field,boolean,required,boolean,eager,super,field,this,declaring,class,field,get,declaring,class,this,field,name,field,get,name,this,required,required,this,eager,eager
DependencyDescriptor -> public DependencyDescriptor(Field field, boolean required, boolean eager);1495868221;Create a new descriptor for a field._@param field the field to wrap_@param required whether the dependency is required_@param eager whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching;public DependencyDescriptor(Field field, boolean required, boolean eager) {_		super(field)___		this.declaringClass = field.getDeclaringClass()__		this.fieldName = field.getName()__		this.required = required__		this.eager = eager__	};create,a,new,descriptor,for,a,field,param,field,the,field,to,wrap,param,required,whether,the,dependency,is,required,param,eager,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,dependency,descriptor,field,field,boolean,required,boolean,eager,super,field,this,declaring,class,field,get,declaring,class,this,field,name,field,get,name,this,required,required,this,eager,eager
DependencyDescriptor -> public DependencyDescriptor(Field field, boolean required, boolean eager);1496837955;Create a new descriptor for a field._@param field the field to wrap_@param required whether the dependency is required_@param eager whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching;public DependencyDescriptor(Field field, boolean required, boolean eager) {_		super(field)___		this.declaringClass = field.getDeclaringClass()__		this.fieldName = field.getName()__		this.required = required__		this.eager = eager__	};create,a,new,descriptor,for,a,field,param,field,the,field,to,wrap,param,required,whether,the,dependency,is,required,param,eager,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,dependency,descriptor,field,field,boolean,required,boolean,eager,super,field,this,declaring,class,field,get,declaring,class,this,field,name,field,get,name,this,required,required,this,eager,eager
DependencyDescriptor -> public DependencyDescriptor(Field field, boolean required, boolean eager);1498780456;Create a new descriptor for a field._@param field the field to wrap_@param required whether the dependency is required_@param eager whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching;public DependencyDescriptor(Field field, boolean required, boolean eager) {_		super(field)___		this.declaringClass = field.getDeclaringClass()__		this.fieldName = field.getName()__		this.required = required__		this.eager = eager__	};create,a,new,descriptor,for,a,field,param,field,the,field,to,wrap,param,required,whether,the,dependency,is,required,param,eager,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,dependency,descriptor,field,field,boolean,required,boolean,eager,super,field,this,declaring,class,field,get,declaring,class,this,field,name,field,get,name,this,required,required,this,eager,eager
DependencyDescriptor -> public DependencyDescriptor(Field field, boolean required, boolean eager);1503007895;Create a new descriptor for a field._@param field the field to wrap_@param required whether the dependency is required_@param eager whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching;public DependencyDescriptor(Field field, boolean required, boolean eager) {_		super(field)___		this.declaringClass = field.getDeclaringClass()__		this.fieldName = field.getName()__		this.required = required__		this.eager = eager__	};create,a,new,descriptor,for,a,field,param,field,the,field,to,wrap,param,required,whether,the,dependency,is,required,param,eager,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,dependency,descriptor,field,field,boolean,required,boolean,eager,super,field,this,declaring,class,field,get,declaring,class,this,field,name,field,get,name,this,required,required,this,eager,eager
DependencyDescriptor -> public DependencyDescriptor(Field field, boolean required, boolean eager);1503272000;Create a new descriptor for a field._@param field the field to wrap_@param required whether the dependency is required_@param eager whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching;public DependencyDescriptor(Field field, boolean required, boolean eager) {_		super(field)___		this.declaringClass = field.getDeclaringClass()__		this.fieldName = field.getName()__		this.required = required__		this.eager = eager__	};create,a,new,descriptor,for,a,field,param,field,the,field,to,wrap,param,required,whether,the,dependency,is,required,param,eager,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,dependency,descriptor,field,field,boolean,required,boolean,eager,super,field,this,declaring,class,field,get,declaring,class,this,field,name,field,get,name,this,required,required,this,eager,eager
DependencyDescriptor -> public DependencyDescriptor(Field field, boolean required, boolean eager);1503411745;Create a new descriptor for a field._@param field the field to wrap_@param required whether the dependency is required_@param eager whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching;public DependencyDescriptor(Field field, boolean required, boolean eager) {_		super(field)___		this.declaringClass = field.getDeclaringClass()__		this.fieldName = field.getName()__		this.required = required__		this.eager = eager__	};create,a,new,descriptor,for,a,field,param,field,the,field,to,wrap,param,required,whether,the,dependency,is,required,param,eager,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,dependency,descriptor,field,field,boolean,required,boolean,eager,super,field,this,declaring,class,field,get,declaring,class,this,field,name,field,get,name,this,required,required,this,eager,eager
DependencyDescriptor -> public DependencyDescriptor(Field field, boolean required, boolean eager);1506551472;Create a new descriptor for a field._@param field the field to wrap_@param required whether the dependency is required_@param eager whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching;public DependencyDescriptor(Field field, boolean required, boolean eager) {_		super(field)___		this.declaringClass = field.getDeclaringClass()__		this.fieldName = field.getName()__		this.required = required__		this.eager = eager__	};create,a,new,descriptor,for,a,field,param,field,the,field,to,wrap,param,required,whether,the,dependency,is,required,param,eager,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,dependency,descriptor,field,field,boolean,required,boolean,eager,super,field,this,declaring,class,field,get,declaring,class,this,field,name,field,get,name,this,required,required,this,eager,eager
DependencyDescriptor -> public DependencyDescriptor(Field field, boolean required, boolean eager);1530174524;Create a new descriptor for a field._@param field the field to wrap_@param required whether the dependency is required_@param eager whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching;public DependencyDescriptor(Field field, boolean required, boolean eager) {_		super(field)___		this.declaringClass = field.getDeclaringClass()__		this.fieldName = field.getName()__		this.required = required__		this.eager = eager__	};create,a,new,descriptor,for,a,field,param,field,the,field,to,wrap,param,required,whether,the,dependency,is,required,param,eager,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,dependency,descriptor,field,field,boolean,required,boolean,eager,super,field,this,declaring,class,field,get,declaring,class,this,field,name,field,get,name,this,required,required,this,eager,eager
DependencyDescriptor -> public DependencyDescriptor(Field field, boolean required, boolean eager);1530198749;Create a new descriptor for a field._@param field the field to wrap_@param required whether the dependency is required_@param eager whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching;public DependencyDescriptor(Field field, boolean required, boolean eager) {_		super(field)___		this.declaringClass = field.getDeclaringClass()__		this.fieldName = field.getName()__		this.required = required__		this.eager = eager__	};create,a,new,descriptor,for,a,field,param,field,the,field,to,wrap,param,required,whether,the,dependency,is,required,param,eager,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,dependency,descriptor,field,field,boolean,required,boolean,eager,super,field,this,declaring,class,field,get,declaring,class,this,field,name,field,get,name,this,required,required,this,eager,eager
DependencyDescriptor -> public DependencyDescriptor(Field field, boolean required, boolean eager);1530201727;Create a new descriptor for a field._@param field the field to wrap_@param required whether the dependency is required_@param eager whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching;public DependencyDescriptor(Field field, boolean required, boolean eager) {_		super(field)___		this.declaringClass = field.getDeclaringClass()__		this.fieldName = field.getName()__		this.required = required__		this.eager = eager__	};create,a,new,descriptor,for,a,field,param,field,the,field,to,wrap,param,required,whether,the,dependency,is,required,param,eager,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,dependency,descriptor,field,field,boolean,required,boolean,eager,super,field,this,declaring,class,field,get,declaring,class,this,field,name,field,get,name,this,required,required,this,eager,eager
DependencyDescriptor -> public DependencyDescriptor(Field field, boolean required, boolean eager);1532274593;Create a new descriptor for a field._@param field the field to wrap_@param required whether the dependency is required_@param eager whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching;public DependencyDescriptor(Field field, boolean required, boolean eager) {_		super(field)___		this.declaringClass = field.getDeclaringClass()__		this.fieldName = field.getName()__		this.required = required__		this.eager = eager__	};create,a,new,descriptor,for,a,field,param,field,the,field,to,wrap,param,required,whether,the,dependency,is,required,param,eager,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,dependency,descriptor,field,field,boolean,required,boolean,eager,super,field,this,declaring,class,field,get,declaring,class,this,field,name,field,get,name,this,required,required,this,eager,eager
DependencyDescriptor -> public DependencyDescriptor(Field field, boolean required, boolean eager);1532332488;Create a new descriptor for a field._@param field the field to wrap_@param required whether the dependency is required_@param eager whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching;public DependencyDescriptor(Field field, boolean required, boolean eager) {_		super(field)___		this.declaringClass = field.getDeclaringClass()__		this.fieldName = field.getName()__		this.required = required__		this.eager = eager__	};create,a,new,descriptor,for,a,field,param,field,the,field,to,wrap,param,required,whether,the,dependency,is,required,param,eager,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,dependency,descriptor,field,field,boolean,required,boolean,eager,super,field,this,declaring,class,field,get,declaring,class,this,field,name,field,get,name,this,required,required,this,eager,eager
DependencyDescriptor -> public DependencyDescriptor(Field field, boolean required, boolean eager);1532385723;Create a new descriptor for a field._@param field the field to wrap_@param required whether the dependency is required_@param eager whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching;public DependencyDescriptor(Field field, boolean required, boolean eager) {_		super(field)___		this.declaringClass = field.getDeclaringClass()__		this.fieldName = field.getName()__		this.required = required__		this.eager = eager__	};create,a,new,descriptor,for,a,field,param,field,the,field,to,wrap,param,required,whether,the,dependency,is,required,param,eager,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,dependency,descriptor,field,field,boolean,required,boolean,eager,super,field,this,declaring,class,field,get,declaring,class,this,field,name,field,get,name,this,required,required,this,eager,eager
DependencyDescriptor -> public DependencyDescriptor(Field field, boolean required, boolean eager);1535039984;Create a new descriptor for a field._@param field the field to wrap_@param required whether the dependency is required_@param eager whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching;public DependencyDescriptor(Field field, boolean required, boolean eager) {_		super(field)___		this.declaringClass = field.getDeclaringClass()__		this.fieldName = field.getName()__		this.required = required__		this.eager = eager__	};create,a,new,descriptor,for,a,field,param,field,the,field,to,wrap,param,required,whether,the,dependency,is,required,param,eager,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,dependency,descriptor,field,field,boolean,required,boolean,eager,super,field,this,declaring,class,field,get,declaring,class,this,field,name,field,get,name,this,required,required,this,eager,eager
DependencyDescriptor -> public DependencyDescriptor(Field field, boolean required, boolean eager);1536855799;Create a new descriptor for a field._@param field the field to wrap_@param required whether the dependency is required_@param eager whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching;public DependencyDescriptor(Field field, boolean required, boolean eager) {_		super(field)___		this.declaringClass = field.getDeclaringClass()__		this.fieldName = field.getName()__		this.required = required__		this.eager = eager__	};create,a,new,descriptor,for,a,field,param,field,the,field,to,wrap,param,required,whether,the,dependency,is,required,param,eager,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,dependency,descriptor,field,field,boolean,required,boolean,eager,super,field,this,declaring,class,field,get,declaring,class,this,field,name,field,get,name,this,required,required,this,eager,eager
DependencyDescriptor -> public DependencyDescriptor(Field field, boolean required, boolean eager);1546963887;Create a new descriptor for a field._@param field the field to wrap_@param required whether the dependency is required_@param eager whether this dependency is 'eager' in the sense of_eagerly resolving potential target beans for type matching;public DependencyDescriptor(Field field, boolean required, boolean eager) {_		super(field)___		this.declaringClass = field.getDeclaringClass()__		this.fieldName = field.getName()__		this.required = required__		this.eager = eager__	};create,a,new,descriptor,for,a,field,param,field,the,field,to,wrap,param,required,whether,the,dependency,is,required,param,eager,whether,this,dependency,is,eager,in,the,sense,of,eagerly,resolving,potential,target,beans,for,type,matching;public,dependency,descriptor,field,field,boolean,required,boolean,eager,super,field,this,declaring,class,field,get,declaring,class,this,field,name,field,get,name,this,required,required,this,eager,eager
DependencyDescriptor -> public boolean fallbackMatchAllowed();1382716358;Return whether a fallback match is allowed._<p>This is {@code false} by default but may be overridden to return {@code true} in order_to suggest to a {@link org.springframework.beans.factory.support.AutowireCandidateResolver}_that a fallback match is acceptable as well.;public boolean fallbackMatchAllowed() {_		return false__	};return,whether,a,fallback,match,is,allowed,p,this,is,code,false,by,default,but,may,be,overridden,to,return,code,true,in,order,to,suggest,to,a,link,org,springframework,beans,factory,support,autowire,candidate,resolver,that,a,fallback,match,is,acceptable,as,well;public,boolean,fallback,match,allowed,return,false
DependencyDescriptor -> public boolean fallbackMatchAllowed();1385412762;Return whether a fallback match is allowed._<p>This is {@code false} by default but may be overridden to return {@code true} in order_to suggest to a {@link org.springframework.beans.factory.support.AutowireCandidateResolver}_that a fallback match is acceptable as well.;public boolean fallbackMatchAllowed() {_		return false__	};return,whether,a,fallback,match,is,allowed,p,this,is,code,false,by,default,but,may,be,overridden,to,return,code,true,in,order,to,suggest,to,a,link,org,springframework,beans,factory,support,autowire,candidate,resolver,that,a,fallback,match,is,acceptable,as,well;public,boolean,fallback,match,allowed,return,false
DependencyDescriptor -> public boolean fallbackMatchAllowed();1402061390;Return whether a fallback match is allowed._<p>This is {@code false} by default but may be overridden to return {@code true} in order_to suggest to a {@link org.springframework.beans.factory.support.AutowireCandidateResolver}_that a fallback match is acceptable as well.;public boolean fallbackMatchAllowed() {_		return false__	};return,whether,a,fallback,match,is,allowed,p,this,is,code,false,by,default,but,may,be,overridden,to,return,code,true,in,order,to,suggest,to,a,link,org,springframework,beans,factory,support,autowire,candidate,resolver,that,a,fallback,match,is,acceptable,as,well;public,boolean,fallback,match,allowed,return,false
DependencyDescriptor -> public boolean fallbackMatchAllowed();1452685925;Return whether a fallback match is allowed._<p>This is {@code false} by default but may be overridden to return {@code true} in order_to suggest to a {@link org.springframework.beans.factory.support.AutowireCandidateResolver}_that a fallback match is acceptable as well._@since 4.0;public boolean fallbackMatchAllowed() {_		return false__	};return,whether,a,fallback,match,is,allowed,p,this,is,code,false,by,default,but,may,be,overridden,to,return,code,true,in,order,to,suggest,to,a,link,org,springframework,beans,factory,support,autowire,candidate,resolver,that,a,fallback,match,is,acceptable,as,well,since,4,0;public,boolean,fallback,match,allowed,return,false
DependencyDescriptor -> public boolean fallbackMatchAllowed();1455295525;Return whether a fallback match is allowed._<p>This is {@code false} by default but may be overridden to return {@code true} in order_to suggest to a {@link org.springframework.beans.factory.support.AutowireCandidateResolver}_that a fallback match is acceptable as well._@since 4.0;public boolean fallbackMatchAllowed() {_		return false__	};return,whether,a,fallback,match,is,allowed,p,this,is,code,false,by,default,but,may,be,overridden,to,return,code,true,in,order,to,suggest,to,a,link,org,springframework,beans,factory,support,autowire,candidate,resolver,that,a,fallback,match,is,acceptable,as,well,since,4,0;public,boolean,fallback,match,allowed,return,false
DependencyDescriptor -> public boolean fallbackMatchAllowed();1455889195;Return whether a fallback match is allowed._<p>This is {@code false} by default but may be overridden to return {@code true} in order_to suggest to a {@link org.springframework.beans.factory.support.AutowireCandidateResolver}_that a fallback match is acceptable as well._@since 4.0;public boolean fallbackMatchAllowed() {_		return false__	};return,whether,a,fallback,match,is,allowed,p,this,is,code,false,by,default,but,may,be,overridden,to,return,code,true,in,order,to,suggest,to,a,link,org,springframework,beans,factory,support,autowire,candidate,resolver,that,a,fallback,match,is,acceptable,as,well,since,4,0;public,boolean,fallback,match,allowed,return,false
DependencyDescriptor -> public boolean fallbackMatchAllowed();1456432609;Return whether a fallback match is allowed._<p>This is {@code false} by default but may be overridden to return {@code true} in order_to suggest to a {@link org.springframework.beans.factory.support.AutowireCandidateResolver}_that a fallback match is acceptable as well._@since 4.0;public boolean fallbackMatchAllowed() {_		return false__	};return,whether,a,fallback,match,is,allowed,p,this,is,code,false,by,default,but,may,be,overridden,to,return,code,true,in,order,to,suggest,to,a,link,org,springframework,beans,factory,support,autowire,candidate,resolver,that,a,fallback,match,is,acceptable,as,well,since,4,0;public,boolean,fallback,match,allowed,return,false
DependencyDescriptor -> public boolean fallbackMatchAllowed();1458755547;Return whether a fallback match is allowed._<p>This is {@code false} by default but may be overridden to return {@code true} in order_to suggest to a {@link org.springframework.beans.factory.support.AutowireCandidateResolver}_that a fallback match is acceptable as well._@since 4.0;public boolean fallbackMatchAllowed() {_		return false__	};return,whether,a,fallback,match,is,allowed,p,this,is,code,false,by,default,but,may,be,overridden,to,return,code,true,in,order,to,suggest,to,a,link,org,springframework,beans,factory,support,autowire,candidate,resolver,that,a,fallback,match,is,acceptable,as,well,since,4,0;public,boolean,fallback,match,allowed,return,false
DependencyDescriptor -> public boolean fallbackMatchAllowed();1466893134;Return whether a fallback match is allowed._<p>This is {@code false} by default but may be overridden to return {@code true} in order_to suggest to a {@link org.springframework.beans.factory.support.AutowireCandidateResolver}_that a fallback match is acceptable as well._@since 4.0;public boolean fallbackMatchAllowed() {_		return false__	};return,whether,a,fallback,match,is,allowed,p,this,is,code,false,by,default,but,may,be,overridden,to,return,code,true,in,order,to,suggest,to,a,link,org,springframework,beans,factory,support,autowire,candidate,resolver,that,a,fallback,match,is,acceptable,as,well,since,4,0;public,boolean,fallback,match,allowed,return,false
DependencyDescriptor -> public boolean fallbackMatchAllowed();1469030751;Return whether a fallback match is allowed._<p>This is {@code false} by default but may be overridden to return {@code true} in order_to suggest to a {@link org.springframework.beans.factory.support.AutowireCandidateResolver}_that a fallback match is acceptable as well._@since 4.0;public boolean fallbackMatchAllowed() {_		return false__	};return,whether,a,fallback,match,is,allowed,p,this,is,code,false,by,default,but,may,be,overridden,to,return,code,true,in,order,to,suggest,to,a,link,org,springframework,beans,factory,support,autowire,candidate,resolver,that,a,fallback,match,is,acceptable,as,well,since,4,0;public,boolean,fallback,match,allowed,return,false
DependencyDescriptor -> public boolean fallbackMatchAllowed();1481647138;Return whether a fallback match is allowed._<p>This is {@code false} by default but may be overridden to return {@code true} in order_to suggest to a {@link org.springframework.beans.factory.support.AutowireCandidateResolver}_that a fallback match is acceptable as well._@since 4.0;public boolean fallbackMatchAllowed() {_		return false__	};return,whether,a,fallback,match,is,allowed,p,this,is,code,false,by,default,but,may,be,overridden,to,return,code,true,in,order,to,suggest,to,a,link,org,springframework,beans,factory,support,autowire,candidate,resolver,that,a,fallback,match,is,acceptable,as,well,since,4,0;public,boolean,fallback,match,allowed,return,false
DependencyDescriptor -> public boolean fallbackMatchAllowed();1482091448;Return whether a fallback match is allowed._<p>This is {@code false} by default but may be overridden to return {@code true} in order_to suggest to a {@link org.springframework.beans.factory.support.AutowireCandidateResolver}_that a fallback match is acceptable as well._@since 4.0;public boolean fallbackMatchAllowed() {_		return false__	};return,whether,a,fallback,match,is,allowed,p,this,is,code,false,by,default,but,may,be,overridden,to,return,code,true,in,order,to,suggest,to,a,link,org,springframework,beans,factory,support,autowire,candidate,resolver,that,a,fallback,match,is,acceptable,as,well,since,4,0;public,boolean,fallback,match,allowed,return,false
DependencyDescriptor -> public boolean fallbackMatchAllowed();1485277217;Return whether a fallback match is allowed._<p>This is {@code false} by default but may be overridden to return {@code true} in order_to suggest to a {@link org.springframework.beans.factory.support.AutowireCandidateResolver}_that a fallback match is acceptable as well._@since 4.0;public boolean fallbackMatchAllowed() {_		return false__	};return,whether,a,fallback,match,is,allowed,p,this,is,code,false,by,default,but,may,be,overridden,to,return,code,true,in,order,to,suggest,to,a,link,org,springframework,beans,factory,support,autowire,candidate,resolver,that,a,fallback,match,is,acceptable,as,well,since,4,0;public,boolean,fallback,match,allowed,return,false
DependencyDescriptor -> public boolean fallbackMatchAllowed();1485300605;Return whether a fallback match is allowed._<p>This is {@code false} by default but may be overridden to return {@code true} in order_to suggest to a {@link org.springframework.beans.factory.support.AutowireCandidateResolver}_that a fallback match is acceptable as well._@since 4.0;public boolean fallbackMatchAllowed() {_		return false__	};return,whether,a,fallback,match,is,allowed,p,this,is,code,false,by,default,but,may,be,overridden,to,return,code,true,in,order,to,suggest,to,a,link,org,springframework,beans,factory,support,autowire,candidate,resolver,that,a,fallback,match,is,acceptable,as,well,since,4,0;public,boolean,fallback,match,allowed,return,false
DependencyDescriptor -> public boolean fallbackMatchAllowed();1495868221;Return whether a fallback match is allowed._<p>This is {@code false} by default but may be overridden to return {@code true} in order_to suggest to a {@link org.springframework.beans.factory.support.AutowireCandidateResolver}_that a fallback match is acceptable as well._@since 4.0;public boolean fallbackMatchAllowed() {_		return false__	};return,whether,a,fallback,match,is,allowed,p,this,is,code,false,by,default,but,may,be,overridden,to,return,code,true,in,order,to,suggest,to,a,link,org,springframework,beans,factory,support,autowire,candidate,resolver,that,a,fallback,match,is,acceptable,as,well,since,4,0;public,boolean,fallback,match,allowed,return,false
DependencyDescriptor -> public boolean fallbackMatchAllowed();1496837955;Return whether a fallback match is allowed._<p>This is {@code false} by default but may be overridden to return {@code true} in order_to suggest to a {@link org.springframework.beans.factory.support.AutowireCandidateResolver}_that a fallback match is acceptable as well._@since 4.0;public boolean fallbackMatchAllowed() {_		return false__	};return,whether,a,fallback,match,is,allowed,p,this,is,code,false,by,default,but,may,be,overridden,to,return,code,true,in,order,to,suggest,to,a,link,org,springframework,beans,factory,support,autowire,candidate,resolver,that,a,fallback,match,is,acceptable,as,well,since,4,0;public,boolean,fallback,match,allowed,return,false
DependencyDescriptor -> public boolean fallbackMatchAllowed();1498780456;Return whether a fallback match is allowed._<p>This is {@code false} by default but may be overridden to return {@code true} in order_to suggest to a {@link org.springframework.beans.factory.support.AutowireCandidateResolver}_that a fallback match is acceptable as well._@since 4.0;public boolean fallbackMatchAllowed() {_		return false__	};return,whether,a,fallback,match,is,allowed,p,this,is,code,false,by,default,but,may,be,overridden,to,return,code,true,in,order,to,suggest,to,a,link,org,springframework,beans,factory,support,autowire,candidate,resolver,that,a,fallback,match,is,acceptable,as,well,since,4,0;public,boolean,fallback,match,allowed,return,false
DependencyDescriptor -> public boolean fallbackMatchAllowed();1503007895;Return whether a fallback match is allowed._<p>This is {@code false} by default but may be overridden to return {@code true} in order_to suggest to a {@link org.springframework.beans.factory.support.AutowireCandidateResolver}_that a fallback match is acceptable as well._@since 4.0;public boolean fallbackMatchAllowed() {_		return false__	};return,whether,a,fallback,match,is,allowed,p,this,is,code,false,by,default,but,may,be,overridden,to,return,code,true,in,order,to,suggest,to,a,link,org,springframework,beans,factory,support,autowire,candidate,resolver,that,a,fallback,match,is,acceptable,as,well,since,4,0;public,boolean,fallback,match,allowed,return,false
DependencyDescriptor -> public boolean fallbackMatchAllowed();1503272000;Return whether a fallback match is allowed._<p>This is {@code false} by default but may be overridden to return {@code true} in order_to suggest to a {@link org.springframework.beans.factory.support.AutowireCandidateResolver}_that a fallback match is acceptable as well._@since 4.0;public boolean fallbackMatchAllowed() {_		return false__	};return,whether,a,fallback,match,is,allowed,p,this,is,code,false,by,default,but,may,be,overridden,to,return,code,true,in,order,to,suggest,to,a,link,org,springframework,beans,factory,support,autowire,candidate,resolver,that,a,fallback,match,is,acceptable,as,well,since,4,0;public,boolean,fallback,match,allowed,return,false
DependencyDescriptor -> public boolean fallbackMatchAllowed();1503411745;Return whether a fallback match is allowed._<p>This is {@code false} by default but may be overridden to return {@code true} in order_to suggest to a {@link org.springframework.beans.factory.support.AutowireCandidateResolver}_that a fallback match is acceptable as well._@since 4.0;public boolean fallbackMatchAllowed() {_		return false__	};return,whether,a,fallback,match,is,allowed,p,this,is,code,false,by,default,but,may,be,overridden,to,return,code,true,in,order,to,suggest,to,a,link,org,springframework,beans,factory,support,autowire,candidate,resolver,that,a,fallback,match,is,acceptable,as,well,since,4,0;public,boolean,fallback,match,allowed,return,false
DependencyDescriptor -> public boolean fallbackMatchAllowed();1506551472;Return whether a fallback match is allowed._<p>This is {@code false} by default but may be overridden to return {@code true} in order_to suggest to a {@link org.springframework.beans.factory.support.AutowireCandidateResolver}_that a fallback match is acceptable as well._@since 4.0;public boolean fallbackMatchAllowed() {_		return false__	};return,whether,a,fallback,match,is,allowed,p,this,is,code,false,by,default,but,may,be,overridden,to,return,code,true,in,order,to,suggest,to,a,link,org,springframework,beans,factory,support,autowire,candidate,resolver,that,a,fallback,match,is,acceptable,as,well,since,4,0;public,boolean,fallback,match,allowed,return,false
DependencyDescriptor -> public boolean fallbackMatchAllowed();1530174524;Return whether a fallback match is allowed._<p>This is {@code false} by default but may be overridden to return {@code true} in order_to suggest to a {@link org.springframework.beans.factory.support.AutowireCandidateResolver}_that a fallback match is acceptable as well._@since 4.0;public boolean fallbackMatchAllowed() {_		return false__	};return,whether,a,fallback,match,is,allowed,p,this,is,code,false,by,default,but,may,be,overridden,to,return,code,true,in,order,to,suggest,to,a,link,org,springframework,beans,factory,support,autowire,candidate,resolver,that,a,fallback,match,is,acceptable,as,well,since,4,0;public,boolean,fallback,match,allowed,return,false
DependencyDescriptor -> public boolean fallbackMatchAllowed();1530198749;Return whether a fallback match is allowed._<p>This is {@code false} by default but may be overridden to return {@code true} in order_to suggest to a {@link org.springframework.beans.factory.support.AutowireCandidateResolver}_that a fallback match is acceptable as well._@since 4.0;public boolean fallbackMatchAllowed() {_		return false__	};return,whether,a,fallback,match,is,allowed,p,this,is,code,false,by,default,but,may,be,overridden,to,return,code,true,in,order,to,suggest,to,a,link,org,springframework,beans,factory,support,autowire,candidate,resolver,that,a,fallback,match,is,acceptable,as,well,since,4,0;public,boolean,fallback,match,allowed,return,false
DependencyDescriptor -> public boolean fallbackMatchAllowed();1530201727;Return whether a fallback match is allowed._<p>This is {@code false} by default but may be overridden to return {@code true} in order_to suggest to a {@link org.springframework.beans.factory.support.AutowireCandidateResolver}_that a fallback match is acceptable as well._@since 4.0;public boolean fallbackMatchAllowed() {_		return false__	};return,whether,a,fallback,match,is,allowed,p,this,is,code,false,by,default,but,may,be,overridden,to,return,code,true,in,order,to,suggest,to,a,link,org,springframework,beans,factory,support,autowire,candidate,resolver,that,a,fallback,match,is,acceptable,as,well,since,4,0;public,boolean,fallback,match,allowed,return,false
DependencyDescriptor -> public boolean fallbackMatchAllowed();1532274593;Return whether a fallback match is allowed._<p>This is {@code false} by default but may be overridden to return {@code true} in order_to suggest to a {@link org.springframework.beans.factory.support.AutowireCandidateResolver}_that a fallback match is acceptable as well._@since 4.0;public boolean fallbackMatchAllowed() {_		return false__	};return,whether,a,fallback,match,is,allowed,p,this,is,code,false,by,default,but,may,be,overridden,to,return,code,true,in,order,to,suggest,to,a,link,org,springframework,beans,factory,support,autowire,candidate,resolver,that,a,fallback,match,is,acceptable,as,well,since,4,0;public,boolean,fallback,match,allowed,return,false
DependencyDescriptor -> public boolean fallbackMatchAllowed();1532332488;Return whether a fallback match is allowed._<p>This is {@code false} by default but may be overridden to return {@code true} in order_to suggest to a {@link org.springframework.beans.factory.support.AutowireCandidateResolver}_that a fallback match is acceptable as well._@since 4.0;public boolean fallbackMatchAllowed() {_		return false__	};return,whether,a,fallback,match,is,allowed,p,this,is,code,false,by,default,but,may,be,overridden,to,return,code,true,in,order,to,suggest,to,a,link,org,springframework,beans,factory,support,autowire,candidate,resolver,that,a,fallback,match,is,acceptable,as,well,since,4,0;public,boolean,fallback,match,allowed,return,false
DependencyDescriptor -> public boolean fallbackMatchAllowed();1532385723;Return whether a fallback match is allowed._<p>This is {@code false} by default but may be overridden to return {@code true} in order_to suggest to a {@link org.springframework.beans.factory.support.AutowireCandidateResolver}_that a fallback match is acceptable as well._@since 4.0;public boolean fallbackMatchAllowed() {_		return false__	};return,whether,a,fallback,match,is,allowed,p,this,is,code,false,by,default,but,may,be,overridden,to,return,code,true,in,order,to,suggest,to,a,link,org,springframework,beans,factory,support,autowire,candidate,resolver,that,a,fallback,match,is,acceptable,as,well,since,4,0;public,boolean,fallback,match,allowed,return,false
DependencyDescriptor -> public boolean fallbackMatchAllowed();1535039984;Return whether a fallback match is allowed._<p>This is {@code false} by default but may be overridden to return {@code true} in order_to suggest to an {@link org.springframework.beans.factory.support.AutowireCandidateResolver}_that a fallback match is acceptable as well._@since 4.0;public boolean fallbackMatchAllowed() {_		return false__	};return,whether,a,fallback,match,is,allowed,p,this,is,code,false,by,default,but,may,be,overridden,to,return,code,true,in,order,to,suggest,to,an,link,org,springframework,beans,factory,support,autowire,candidate,resolver,that,a,fallback,match,is,acceptable,as,well,since,4,0;public,boolean,fallback,match,allowed,return,false
DependencyDescriptor -> public boolean fallbackMatchAllowed();1536855799;Return whether a fallback match is allowed._<p>This is {@code false} by default but may be overridden to return {@code true} in order_to suggest to an {@link org.springframework.beans.factory.support.AutowireCandidateResolver}_that a fallback match is acceptable as well._@since 4.0;public boolean fallbackMatchAllowed() {_		return false__	};return,whether,a,fallback,match,is,allowed,p,this,is,code,false,by,default,but,may,be,overridden,to,return,code,true,in,order,to,suggest,to,an,link,org,springframework,beans,factory,support,autowire,candidate,resolver,that,a,fallback,match,is,acceptable,as,well,since,4,0;public,boolean,fallback,match,allowed,return,false
DependencyDescriptor -> public boolean fallbackMatchAllowed();1546963887;Return whether a fallback match is allowed._<p>This is {@code false} by default but may be overridden to return {@code true} in order_to suggest to an {@link org.springframework.beans.factory.support.AutowireCandidateResolver}_that a fallback match is acceptable as well._@since 4.0;public boolean fallbackMatchAllowed() {_		return false__	};return,whether,a,fallback,match,is,allowed,p,this,is,code,false,by,default,but,may,be,overridden,to,return,code,true,in,order,to,suggest,to,an,link,org,springframework,beans,factory,support,autowire,candidate,resolver,that,a,fallback,match,is,acceptable,as,well,since,4,0;public,boolean,fallback,match,allowed,return,false
DependencyDescriptor -> public DependencyDescriptor(MethodParameter methodParameter, boolean required);1328020251;Create a new descriptor for a method or constructor parameter._Considers the dependency as 'eager'._@param methodParameter the MethodParameter to wrap_@param required whether the dependency is required;public DependencyDescriptor(MethodParameter methodParameter, boolean required) {_		this(methodParameter, required, true)__	};create,a,new,descriptor,for,a,method,or,constructor,parameter,considers,the,dependency,as,eager,param,method,parameter,the,method,parameter,to,wrap,param,required,whether,the,dependency,is,required;public,dependency,descriptor,method,parameter,method,parameter,boolean,required,this,method,parameter,required,true
DependencyDescriptor -> public DependencyDescriptor(MethodParameter methodParameter, boolean required);1329142650;Create a new descriptor for a method or constructor parameter._Considers the dependency as 'eager'._@param methodParameter the MethodParameter to wrap_@param required whether the dependency is required;public DependencyDescriptor(MethodParameter methodParameter, boolean required) {_		this(methodParameter, required, true)__	};create,a,new,descriptor,for,a,method,or,constructor,parameter,considers,the,dependency,as,eager,param,method,parameter,the,method,parameter,to,wrap,param,required,whether,the,dependency,is,required;public,dependency,descriptor,method,parameter,method,parameter,boolean,required,this,method,parameter,required,true
DependencyDescriptor -> public DependencyDescriptor(MethodParameter methodParameter, boolean required);1346421549;Create a new descriptor for a method or constructor parameter._Considers the dependency as 'eager'._@param methodParameter the MethodParameter to wrap_@param required whether the dependency is required;public DependencyDescriptor(MethodParameter methodParameter, boolean required) {_		this(methodParameter, required, true)__	};create,a,new,descriptor,for,a,method,or,constructor,parameter,considers,the,dependency,as,eager,param,method,parameter,the,method,parameter,to,wrap,param,required,whether,the,dependency,is,required;public,dependency,descriptor,method,parameter,method,parameter,boolean,required,this,method,parameter,required,true
DependencyDescriptor -> public DependencyDescriptor(MethodParameter methodParameter, boolean required);1350077654;Create a new descriptor for a method or constructor parameter._Considers the dependency as 'eager'._@param methodParameter the MethodParameter to wrap_@param required whether the dependency is required;public DependencyDescriptor(MethodParameter methodParameter, boolean required) {_		this(methodParameter, required, true)__	};create,a,new,descriptor,for,a,method,or,constructor,parameter,considers,the,dependency,as,eager,param,method,parameter,the,method,parameter,to,wrap,param,required,whether,the,dependency,is,required;public,dependency,descriptor,method,parameter,method,parameter,boolean,required,this,method,parameter,required,true
DependencyDescriptor -> public DependencyDescriptor(MethodParameter methodParameter, boolean required);1356735495;Create a new descriptor for a method or constructor parameter._Considers the dependency as 'eager'._@param methodParameter the MethodParameter to wrap_@param required whether the dependency is required;public DependencyDescriptor(MethodParameter methodParameter, boolean required) {_		this(methodParameter, required, true)__	};create,a,new,descriptor,for,a,method,or,constructor,parameter,considers,the,dependency,as,eager,param,method,parameter,the,method,parameter,to,wrap,param,required,whether,the,dependency,is,required;public,dependency,descriptor,method,parameter,method,parameter,boolean,required,this,method,parameter,required,true
DependencyDescriptor -> public DependencyDescriptor(MethodParameter methodParameter, boolean required);1377641038;Create a new descriptor for a method or constructor parameter._Considers the dependency as 'eager'._@param methodParameter the MethodParameter to wrap_@param required whether the dependency is required;public DependencyDescriptor(MethodParameter methodParameter, boolean required) {_		this(methodParameter, required, true)__	};create,a,new,descriptor,for,a,method,or,constructor,parameter,considers,the,dependency,as,eager,param,method,parameter,the,method,parameter,to,wrap,param,required,whether,the,dependency,is,required;public,dependency,descriptor,method,parameter,method,parameter,boolean,required,this,method,parameter,required,true
DependencyDescriptor -> public DependencyDescriptor(MethodParameter methodParameter, boolean required);1381788683;Create a new descriptor for a method or constructor parameter._Considers the dependency as 'eager'._@param methodParameter the MethodParameter to wrap_@param required whether the dependency is required;public DependencyDescriptor(MethodParameter methodParameter, boolean required) {_		this(methodParameter, required, true)__	};create,a,new,descriptor,for,a,method,or,constructor,parameter,considers,the,dependency,as,eager,param,method,parameter,the,method,parameter,to,wrap,param,required,whether,the,dependency,is,required;public,dependency,descriptor,method,parameter,method,parameter,boolean,required,this,method,parameter,required,true
DependencyDescriptor -> public DependencyDescriptor(MethodParameter methodParameter, boolean required);1382716358;Create a new descriptor for a method or constructor parameter._Considers the dependency as 'eager'._@param methodParameter the MethodParameter to wrap_@param required whether the dependency is required;public DependencyDescriptor(MethodParameter methodParameter, boolean required) {_		this(methodParameter, required, true)__	};create,a,new,descriptor,for,a,method,or,constructor,parameter,considers,the,dependency,as,eager,param,method,parameter,the,method,parameter,to,wrap,param,required,whether,the,dependency,is,required;public,dependency,descriptor,method,parameter,method,parameter,boolean,required,this,method,parameter,required,true
DependencyDescriptor -> public DependencyDescriptor(MethodParameter methodParameter, boolean required);1385412762;Create a new descriptor for a method or constructor parameter._Considers the dependency as 'eager'._@param methodParameter the MethodParameter to wrap_@param required whether the dependency is required;public DependencyDescriptor(MethodParameter methodParameter, boolean required) {_		this(methodParameter, required, true)__	};create,a,new,descriptor,for,a,method,or,constructor,parameter,considers,the,dependency,as,eager,param,method,parameter,the,method,parameter,to,wrap,param,required,whether,the,dependency,is,required;public,dependency,descriptor,method,parameter,method,parameter,boolean,required,this,method,parameter,required,true
DependencyDescriptor -> public DependencyDescriptor(MethodParameter methodParameter, boolean required);1402061390;Create a new descriptor for a method or constructor parameter._Considers the dependency as 'eager'._@param methodParameter the MethodParameter to wrap_@param required whether the dependency is required;public DependencyDescriptor(MethodParameter methodParameter, boolean required) {_		this(methodParameter, required, true)__	};create,a,new,descriptor,for,a,method,or,constructor,parameter,considers,the,dependency,as,eager,param,method,parameter,the,method,parameter,to,wrap,param,required,whether,the,dependency,is,required;public,dependency,descriptor,method,parameter,method,parameter,boolean,required,this,method,parameter,required,true
DependencyDescriptor -> public DependencyDescriptor(MethodParameter methodParameter, boolean required);1452685925;Create a new descriptor for a method or constructor parameter._Considers the dependency as 'eager'._@param methodParameter the MethodParameter to wrap_@param required whether the dependency is required;public DependencyDescriptor(MethodParameter methodParameter, boolean required) {_		this(methodParameter, required, true)__	};create,a,new,descriptor,for,a,method,or,constructor,parameter,considers,the,dependency,as,eager,param,method,parameter,the,method,parameter,to,wrap,param,required,whether,the,dependency,is,required;public,dependency,descriptor,method,parameter,method,parameter,boolean,required,this,method,parameter,required,true
DependencyDescriptor -> public DependencyDescriptor(MethodParameter methodParameter, boolean required);1455295525;Create a new descriptor for a method or constructor parameter._Considers the dependency as 'eager'._@param methodParameter the MethodParameter to wrap_@param required whether the dependency is required;public DependencyDescriptor(MethodParameter methodParameter, boolean required) {_		this(methodParameter, required, true)__	};create,a,new,descriptor,for,a,method,or,constructor,parameter,considers,the,dependency,as,eager,param,method,parameter,the,method,parameter,to,wrap,param,required,whether,the,dependency,is,required;public,dependency,descriptor,method,parameter,method,parameter,boolean,required,this,method,parameter,required,true
DependencyDescriptor -> public DependencyDescriptor(MethodParameter methodParameter, boolean required);1455889195;Create a new descriptor for a method or constructor parameter._Considers the dependency as 'eager'._@param methodParameter the MethodParameter to wrap_@param required whether the dependency is required;public DependencyDescriptor(MethodParameter methodParameter, boolean required) {_		this(methodParameter, required, true)__	};create,a,new,descriptor,for,a,method,or,constructor,parameter,considers,the,dependency,as,eager,param,method,parameter,the,method,parameter,to,wrap,param,required,whether,the,dependency,is,required;public,dependency,descriptor,method,parameter,method,parameter,boolean,required,this,method,parameter,required,true
DependencyDescriptor -> public DependencyDescriptor(MethodParameter methodParameter, boolean required);1456432609;Create a new descriptor for a method or constructor parameter._Considers the dependency as 'eager'._@param methodParameter the MethodParameter to wrap_@param required whether the dependency is required;public DependencyDescriptor(MethodParameter methodParameter, boolean required) {_		this(methodParameter, required, true)__	};create,a,new,descriptor,for,a,method,or,constructor,parameter,considers,the,dependency,as,eager,param,method,parameter,the,method,parameter,to,wrap,param,required,whether,the,dependency,is,required;public,dependency,descriptor,method,parameter,method,parameter,boolean,required,this,method,parameter,required,true
DependencyDescriptor -> public DependencyDescriptor(MethodParameter methodParameter, boolean required);1458755547;Create a new descriptor for a method or constructor parameter._Considers the dependency as 'eager'._@param methodParameter the MethodParameter to wrap_@param required whether the dependency is required;public DependencyDescriptor(MethodParameter methodParameter, boolean required) {_		this(methodParameter, required, true)__	};create,a,new,descriptor,for,a,method,or,constructor,parameter,considers,the,dependency,as,eager,param,method,parameter,the,method,parameter,to,wrap,param,required,whether,the,dependency,is,required;public,dependency,descriptor,method,parameter,method,parameter,boolean,required,this,method,parameter,required,true
DependencyDescriptor -> public DependencyDescriptor(MethodParameter methodParameter, boolean required);1466893134;Create a new descriptor for a method or constructor parameter._Considers the dependency as 'eager'._@param methodParameter the MethodParameter to wrap_@param required whether the dependency is required;public DependencyDescriptor(MethodParameter methodParameter, boolean required) {_		this(methodParameter, required, true)__	};create,a,new,descriptor,for,a,method,or,constructor,parameter,considers,the,dependency,as,eager,param,method,parameter,the,method,parameter,to,wrap,param,required,whether,the,dependency,is,required;public,dependency,descriptor,method,parameter,method,parameter,boolean,required,this,method,parameter,required,true
DependencyDescriptor -> public DependencyDescriptor(MethodParameter methodParameter, boolean required);1469030751;Create a new descriptor for a method or constructor parameter._Considers the dependency as 'eager'._@param methodParameter the MethodParameter to wrap_@param required whether the dependency is required;public DependencyDescriptor(MethodParameter methodParameter, boolean required) {_		this(methodParameter, required, true)__	};create,a,new,descriptor,for,a,method,or,constructor,parameter,considers,the,dependency,as,eager,param,method,parameter,the,method,parameter,to,wrap,param,required,whether,the,dependency,is,required;public,dependency,descriptor,method,parameter,method,parameter,boolean,required,this,method,parameter,required,true
DependencyDescriptor -> public DependencyDescriptor(MethodParameter methodParameter, boolean required);1481647138;Create a new descriptor for a method or constructor parameter._Considers the dependency as 'eager'._@param methodParameter the MethodParameter to wrap_@param required whether the dependency is required;public DependencyDescriptor(MethodParameter methodParameter, boolean required) {_		this(methodParameter, required, true)__	};create,a,new,descriptor,for,a,method,or,constructor,parameter,considers,the,dependency,as,eager,param,method,parameter,the,method,parameter,to,wrap,param,required,whether,the,dependency,is,required;public,dependency,descriptor,method,parameter,method,parameter,boolean,required,this,method,parameter,required,true
DependencyDescriptor -> public DependencyDescriptor(MethodParameter methodParameter, boolean required);1482091448;Create a new descriptor for a method or constructor parameter._Considers the dependency as 'eager'._@param methodParameter the MethodParameter to wrap_@param required whether the dependency is required;public DependencyDescriptor(MethodParameter methodParameter, boolean required) {_		this(methodParameter, required, true)__	};create,a,new,descriptor,for,a,method,or,constructor,parameter,considers,the,dependency,as,eager,param,method,parameter,the,method,parameter,to,wrap,param,required,whether,the,dependency,is,required;public,dependency,descriptor,method,parameter,method,parameter,boolean,required,this,method,parameter,required,true
DependencyDescriptor -> public DependencyDescriptor(MethodParameter methodParameter, boolean required);1485277217;Create a new descriptor for a method or constructor parameter._Considers the dependency as 'eager'._@param methodParameter the MethodParameter to wrap_@param required whether the dependency is required;public DependencyDescriptor(MethodParameter methodParameter, boolean required) {_		this(methodParameter, required, true)__	};create,a,new,descriptor,for,a,method,or,constructor,parameter,considers,the,dependency,as,eager,param,method,parameter,the,method,parameter,to,wrap,param,required,whether,the,dependency,is,required;public,dependency,descriptor,method,parameter,method,parameter,boolean,required,this,method,parameter,required,true
DependencyDescriptor -> public DependencyDescriptor(MethodParameter methodParameter, boolean required);1485300605;Create a new descriptor for a method or constructor parameter._Considers the dependency as 'eager'._@param methodParameter the MethodParameter to wrap_@param required whether the dependency is required;public DependencyDescriptor(MethodParameter methodParameter, boolean required) {_		this(methodParameter, required, true)__	};create,a,new,descriptor,for,a,method,or,constructor,parameter,considers,the,dependency,as,eager,param,method,parameter,the,method,parameter,to,wrap,param,required,whether,the,dependency,is,required;public,dependency,descriptor,method,parameter,method,parameter,boolean,required,this,method,parameter,required,true
DependencyDescriptor -> public DependencyDescriptor(MethodParameter methodParameter, boolean required);1495868221;Create a new descriptor for a method or constructor parameter._Considers the dependency as 'eager'._@param methodParameter the MethodParameter to wrap_@param required whether the dependency is required;public DependencyDescriptor(MethodParameter methodParameter, boolean required) {_		this(methodParameter, required, true)__	};create,a,new,descriptor,for,a,method,or,constructor,parameter,considers,the,dependency,as,eager,param,method,parameter,the,method,parameter,to,wrap,param,required,whether,the,dependency,is,required;public,dependency,descriptor,method,parameter,method,parameter,boolean,required,this,method,parameter,required,true
DependencyDescriptor -> public DependencyDescriptor(MethodParameter methodParameter, boolean required);1496837955;Create a new descriptor for a method or constructor parameter._Considers the dependency as 'eager'._@param methodParameter the MethodParameter to wrap_@param required whether the dependency is required;public DependencyDescriptor(MethodParameter methodParameter, boolean required) {_		this(methodParameter, required, true)__	};create,a,new,descriptor,for,a,method,or,constructor,parameter,considers,the,dependency,as,eager,param,method,parameter,the,method,parameter,to,wrap,param,required,whether,the,dependency,is,required;public,dependency,descriptor,method,parameter,method,parameter,boolean,required,this,method,parameter,required,true
DependencyDescriptor -> public DependencyDescriptor(MethodParameter methodParameter, boolean required);1498780456;Create a new descriptor for a method or constructor parameter._Considers the dependency as 'eager'._@param methodParameter the MethodParameter to wrap_@param required whether the dependency is required;public DependencyDescriptor(MethodParameter methodParameter, boolean required) {_		this(methodParameter, required, true)__	};create,a,new,descriptor,for,a,method,or,constructor,parameter,considers,the,dependency,as,eager,param,method,parameter,the,method,parameter,to,wrap,param,required,whether,the,dependency,is,required;public,dependency,descriptor,method,parameter,method,parameter,boolean,required,this,method,parameter,required,true
DependencyDescriptor -> public DependencyDescriptor(MethodParameter methodParameter, boolean required);1503007895;Create a new descriptor for a method or constructor parameter._Considers the dependency as 'eager'._@param methodParameter the MethodParameter to wrap_@param required whether the dependency is required;public DependencyDescriptor(MethodParameter methodParameter, boolean required) {_		this(methodParameter, required, true)__	};create,a,new,descriptor,for,a,method,or,constructor,parameter,considers,the,dependency,as,eager,param,method,parameter,the,method,parameter,to,wrap,param,required,whether,the,dependency,is,required;public,dependency,descriptor,method,parameter,method,parameter,boolean,required,this,method,parameter,required,true
DependencyDescriptor -> public DependencyDescriptor(MethodParameter methodParameter, boolean required);1503272000;Create a new descriptor for a method or constructor parameter._Considers the dependency as 'eager'._@param methodParameter the MethodParameter to wrap_@param required whether the dependency is required;public DependencyDescriptor(MethodParameter methodParameter, boolean required) {_		this(methodParameter, required, true)__	};create,a,new,descriptor,for,a,method,or,constructor,parameter,considers,the,dependency,as,eager,param,method,parameter,the,method,parameter,to,wrap,param,required,whether,the,dependency,is,required;public,dependency,descriptor,method,parameter,method,parameter,boolean,required,this,method,parameter,required,true
DependencyDescriptor -> public DependencyDescriptor(MethodParameter methodParameter, boolean required);1503411745;Create a new descriptor for a method or constructor parameter._Considers the dependency as 'eager'._@param methodParameter the MethodParameter to wrap_@param required whether the dependency is required;public DependencyDescriptor(MethodParameter methodParameter, boolean required) {_		this(methodParameter, required, true)__	};create,a,new,descriptor,for,a,method,or,constructor,parameter,considers,the,dependency,as,eager,param,method,parameter,the,method,parameter,to,wrap,param,required,whether,the,dependency,is,required;public,dependency,descriptor,method,parameter,method,parameter,boolean,required,this,method,parameter,required,true
DependencyDescriptor -> public DependencyDescriptor(MethodParameter methodParameter, boolean required);1506551472;Create a new descriptor for a method or constructor parameter._Considers the dependency as 'eager'._@param methodParameter the MethodParameter to wrap_@param required whether the dependency is required;public DependencyDescriptor(MethodParameter methodParameter, boolean required) {_		this(methodParameter, required, true)__	};create,a,new,descriptor,for,a,method,or,constructor,parameter,considers,the,dependency,as,eager,param,method,parameter,the,method,parameter,to,wrap,param,required,whether,the,dependency,is,required;public,dependency,descriptor,method,parameter,method,parameter,boolean,required,this,method,parameter,required,true
DependencyDescriptor -> public DependencyDescriptor(MethodParameter methodParameter, boolean required);1530174524;Create a new descriptor for a method or constructor parameter._Considers the dependency as 'eager'._@param methodParameter the MethodParameter to wrap_@param required whether the dependency is required;public DependencyDescriptor(MethodParameter methodParameter, boolean required) {_		this(methodParameter, required, true)__	};create,a,new,descriptor,for,a,method,or,constructor,parameter,considers,the,dependency,as,eager,param,method,parameter,the,method,parameter,to,wrap,param,required,whether,the,dependency,is,required;public,dependency,descriptor,method,parameter,method,parameter,boolean,required,this,method,parameter,required,true
DependencyDescriptor -> public DependencyDescriptor(MethodParameter methodParameter, boolean required);1530198749;Create a new descriptor for a method or constructor parameter._Considers the dependency as 'eager'._@param methodParameter the MethodParameter to wrap_@param required whether the dependency is required;public DependencyDescriptor(MethodParameter methodParameter, boolean required) {_		this(methodParameter, required, true)__	};create,a,new,descriptor,for,a,method,or,constructor,parameter,considers,the,dependency,as,eager,param,method,parameter,the,method,parameter,to,wrap,param,required,whether,the,dependency,is,required;public,dependency,descriptor,method,parameter,method,parameter,boolean,required,this,method,parameter,required,true
DependencyDescriptor -> public DependencyDescriptor(MethodParameter methodParameter, boolean required);1530201727;Create a new descriptor for a method or constructor parameter._Considers the dependency as 'eager'._@param methodParameter the MethodParameter to wrap_@param required whether the dependency is required;public DependencyDescriptor(MethodParameter methodParameter, boolean required) {_		this(methodParameter, required, true)__	};create,a,new,descriptor,for,a,method,or,constructor,parameter,considers,the,dependency,as,eager,param,method,parameter,the,method,parameter,to,wrap,param,required,whether,the,dependency,is,required;public,dependency,descriptor,method,parameter,method,parameter,boolean,required,this,method,parameter,required,true
DependencyDescriptor -> public DependencyDescriptor(MethodParameter methodParameter, boolean required);1532274593;Create a new descriptor for a method or constructor parameter._Considers the dependency as 'eager'._@param methodParameter the MethodParameter to wrap_@param required whether the dependency is required;public DependencyDescriptor(MethodParameter methodParameter, boolean required) {_		this(methodParameter, required, true)__	};create,a,new,descriptor,for,a,method,or,constructor,parameter,considers,the,dependency,as,eager,param,method,parameter,the,method,parameter,to,wrap,param,required,whether,the,dependency,is,required;public,dependency,descriptor,method,parameter,method,parameter,boolean,required,this,method,parameter,required,true
DependencyDescriptor -> public DependencyDescriptor(MethodParameter methodParameter, boolean required);1532332488;Create a new descriptor for a method or constructor parameter._Considers the dependency as 'eager'._@param methodParameter the MethodParameter to wrap_@param required whether the dependency is required;public DependencyDescriptor(MethodParameter methodParameter, boolean required) {_		this(methodParameter, required, true)__	};create,a,new,descriptor,for,a,method,or,constructor,parameter,considers,the,dependency,as,eager,param,method,parameter,the,method,parameter,to,wrap,param,required,whether,the,dependency,is,required;public,dependency,descriptor,method,parameter,method,parameter,boolean,required,this,method,parameter,required,true
DependencyDescriptor -> public DependencyDescriptor(MethodParameter methodParameter, boolean required);1532385723;Create a new descriptor for a method or constructor parameter._Considers the dependency as 'eager'._@param methodParameter the MethodParameter to wrap_@param required whether the dependency is required;public DependencyDescriptor(MethodParameter methodParameter, boolean required) {_		this(methodParameter, required, true)__	};create,a,new,descriptor,for,a,method,or,constructor,parameter,considers,the,dependency,as,eager,param,method,parameter,the,method,parameter,to,wrap,param,required,whether,the,dependency,is,required;public,dependency,descriptor,method,parameter,method,parameter,boolean,required,this,method,parameter,required,true
DependencyDescriptor -> public DependencyDescriptor(MethodParameter methodParameter, boolean required);1535039984;Create a new descriptor for a method or constructor parameter._Considers the dependency as 'eager'._@param methodParameter the MethodParameter to wrap_@param required whether the dependency is required;public DependencyDescriptor(MethodParameter methodParameter, boolean required) {_		this(methodParameter, required, true)__	};create,a,new,descriptor,for,a,method,or,constructor,parameter,considers,the,dependency,as,eager,param,method,parameter,the,method,parameter,to,wrap,param,required,whether,the,dependency,is,required;public,dependency,descriptor,method,parameter,method,parameter,boolean,required,this,method,parameter,required,true
DependencyDescriptor -> public DependencyDescriptor(MethodParameter methodParameter, boolean required);1536855799;Create a new descriptor for a method or constructor parameter._Considers the dependency as 'eager'._@param methodParameter the MethodParameter to wrap_@param required whether the dependency is required;public DependencyDescriptor(MethodParameter methodParameter, boolean required) {_		this(methodParameter, required, true)__	};create,a,new,descriptor,for,a,method,or,constructor,parameter,considers,the,dependency,as,eager,param,method,parameter,the,method,parameter,to,wrap,param,required,whether,the,dependency,is,required;public,dependency,descriptor,method,parameter,method,parameter,boolean,required,this,method,parameter,required,true
DependencyDescriptor -> public DependencyDescriptor(MethodParameter methodParameter, boolean required);1546963887;Create a new descriptor for a method or constructor parameter._Considers the dependency as 'eager'._@param methodParameter the MethodParameter to wrap_@param required whether the dependency is required;public DependencyDescriptor(MethodParameter methodParameter, boolean required) {_		this(methodParameter, required, true)__	};create,a,new,descriptor,for,a,method,or,constructor,parameter,considers,the,dependency,as,eager,param,method,parameter,the,method,parameter,to,wrap,param,required,whether,the,dependency,is,required;public,dependency,descriptor,method,parameter,method,parameter,boolean,required,this,method,parameter,required,true
DependencyDescriptor -> @Nullable 	public Object resolveNotUnique(Class<?> type, Map<String, Object> matchingBeans) throws BeansException;1495868221;Resolve the specified not-unique scenario: by default,_throwing a {@link NoUniqueBeanDefinitionException}._<p>Subclasses may override this to select one of the instances or_to opt out with no result at all through returning {@code null}._@param type the requested bean type_@param matchingBeans a map of bean names and corresponding bean_instances which have been pre-selected for the given type_(qualifiers etc already applied)_@return a bean instance to proceed with, or {@code null} for none_@throws BeansException in case of the not-unique scenario being fatal_@since 4.3;@Nullable_	public Object resolveNotUnique(Class<?> type, Map<String, Object> matchingBeans) throws BeansException {_		throw new NoUniqueBeanDefinitionException(type, matchingBeans.keySet())__	};resolve,the,specified,not,unique,scenario,by,default,throwing,a,link,no,unique,bean,definition,exception,p,subclasses,may,override,this,to,select,one,of,the,instances,or,to,opt,out,with,no,result,at,all,through,returning,code,null,param,type,the,requested,bean,type,param,matching,beans,a,map,of,bean,names,and,corresponding,bean,instances,which,have,been,pre,selected,for,the,given,type,qualifiers,etc,already,applied,return,a,bean,instance,to,proceed,with,or,code,null,for,none,throws,beans,exception,in,case,of,the,not,unique,scenario,being,fatal,since,4,3;nullable,public,object,resolve,not,unique,class,type,map,string,object,matching,beans,throws,beans,exception,throw,new,no,unique,bean,definition,exception,type,matching,beans,key,set
DependencyDescriptor -> @Nullable 	public Object resolveNotUnique(Class<?> type, Map<String, Object> matchingBeans) throws BeansException;1496837955;Resolve the specified not-unique scenario: by default,_throwing a {@link NoUniqueBeanDefinitionException}._<p>Subclasses may override this to select one of the instances or_to opt out with no result at all through returning {@code null}._@param type the requested bean type_@param matchingBeans a map of bean names and corresponding bean_instances which have been pre-selected for the given type_(qualifiers etc already applied)_@return a bean instance to proceed with, or {@code null} for none_@throws BeansException in case of the not-unique scenario being fatal_@since 4.3;@Nullable_	public Object resolveNotUnique(Class<?> type, Map<String, Object> matchingBeans) throws BeansException {_		throw new NoUniqueBeanDefinitionException(type, matchingBeans.keySet())__	};resolve,the,specified,not,unique,scenario,by,default,throwing,a,link,no,unique,bean,definition,exception,p,subclasses,may,override,this,to,select,one,of,the,instances,or,to,opt,out,with,no,result,at,all,through,returning,code,null,param,type,the,requested,bean,type,param,matching,beans,a,map,of,bean,names,and,corresponding,bean,instances,which,have,been,pre,selected,for,the,given,type,qualifiers,etc,already,applied,return,a,bean,instance,to,proceed,with,or,code,null,for,none,throws,beans,exception,in,case,of,the,not,unique,scenario,being,fatal,since,4,3;nullable,public,object,resolve,not,unique,class,type,map,string,object,matching,beans,throws,beans,exception,throw,new,no,unique,bean,definition,exception,type,matching,beans,key,set
DependencyDescriptor -> @Nullable 	public Object resolveNotUnique(Class<?> type, Map<String, Object> matchingBeans) throws BeansException;1498780456;Resolve the specified not-unique scenario: by default,_throwing a {@link NoUniqueBeanDefinitionException}._<p>Subclasses may override this to select one of the instances or_to opt out with no result at all through returning {@code null}._@param type the requested bean type_@param matchingBeans a map of bean names and corresponding bean_instances which have been pre-selected for the given type_(qualifiers etc already applied)_@return a bean instance to proceed with, or {@code null} for none_@throws BeansException in case of the not-unique scenario being fatal_@since 4.3;@Nullable_	public Object resolveNotUnique(Class<?> type, Map<String, Object> matchingBeans) throws BeansException {_		throw new NoUniqueBeanDefinitionException(type, matchingBeans.keySet())__	};resolve,the,specified,not,unique,scenario,by,default,throwing,a,link,no,unique,bean,definition,exception,p,subclasses,may,override,this,to,select,one,of,the,instances,or,to,opt,out,with,no,result,at,all,through,returning,code,null,param,type,the,requested,bean,type,param,matching,beans,a,map,of,bean,names,and,corresponding,bean,instances,which,have,been,pre,selected,for,the,given,type,qualifiers,etc,already,applied,return,a,bean,instance,to,proceed,with,or,code,null,for,none,throws,beans,exception,in,case,of,the,not,unique,scenario,being,fatal,since,4,3;nullable,public,object,resolve,not,unique,class,type,map,string,object,matching,beans,throws,beans,exception,throw,new,no,unique,bean,definition,exception,type,matching,beans,key,set
DependencyDescriptor -> @Nullable 	public Object resolveNotUnique(Class<?> type, Map<String, Object> matchingBeans) throws BeansException;1503007895;Resolve the specified not-unique scenario: by default,_throwing a {@link NoUniqueBeanDefinitionException}._<p>Subclasses may override this to select one of the instances or_to opt out with no result at all through returning {@code null}._@param type the requested bean type_@param matchingBeans a map of bean names and corresponding bean_instances which have been pre-selected for the given type_(qualifiers etc already applied)_@return a bean instance to proceed with, or {@code null} for none_@throws BeansException in case of the not-unique scenario being fatal_@since 4.3;@Nullable_	public Object resolveNotUnique(Class<?> type, Map<String, Object> matchingBeans) throws BeansException {_		throw new NoUniqueBeanDefinitionException(type, matchingBeans.keySet())__	};resolve,the,specified,not,unique,scenario,by,default,throwing,a,link,no,unique,bean,definition,exception,p,subclasses,may,override,this,to,select,one,of,the,instances,or,to,opt,out,with,no,result,at,all,through,returning,code,null,param,type,the,requested,bean,type,param,matching,beans,a,map,of,bean,names,and,corresponding,bean,instances,which,have,been,pre,selected,for,the,given,type,qualifiers,etc,already,applied,return,a,bean,instance,to,proceed,with,or,code,null,for,none,throws,beans,exception,in,case,of,the,not,unique,scenario,being,fatal,since,4,3;nullable,public,object,resolve,not,unique,class,type,map,string,object,matching,beans,throws,beans,exception,throw,new,no,unique,bean,definition,exception,type,matching,beans,key,set
DependencyDescriptor -> @Nullable 	public Object resolveNotUnique(Class<?> type, Map<String, Object> matchingBeans) throws BeansException;1503272000;Resolve the specified not-unique scenario: by default,_throwing a {@link NoUniqueBeanDefinitionException}._<p>Subclasses may override this to select one of the instances or_to opt out with no result at all through returning {@code null}._@param type the requested bean type_@param matchingBeans a map of bean names and corresponding bean_instances which have been pre-selected for the given type_(qualifiers etc already applied)_@return a bean instance to proceed with, or {@code null} for none_@throws BeansException in case of the not-unique scenario being fatal_@since 4.3;@Nullable_	public Object resolveNotUnique(Class<?> type, Map<String, Object> matchingBeans) throws BeansException {_		throw new NoUniqueBeanDefinitionException(type, matchingBeans.keySet())__	};resolve,the,specified,not,unique,scenario,by,default,throwing,a,link,no,unique,bean,definition,exception,p,subclasses,may,override,this,to,select,one,of,the,instances,or,to,opt,out,with,no,result,at,all,through,returning,code,null,param,type,the,requested,bean,type,param,matching,beans,a,map,of,bean,names,and,corresponding,bean,instances,which,have,been,pre,selected,for,the,given,type,qualifiers,etc,already,applied,return,a,bean,instance,to,proceed,with,or,code,null,for,none,throws,beans,exception,in,case,of,the,not,unique,scenario,being,fatal,since,4,3;nullable,public,object,resolve,not,unique,class,type,map,string,object,matching,beans,throws,beans,exception,throw,new,no,unique,bean,definition,exception,type,matching,beans,key,set
DependencyDescriptor -> @Nullable 	public Object resolveNotUnique(Class<?> type, Map<String, Object> matchingBeans) throws BeansException;1503411745;Resolve the specified not-unique scenario: by default,_throwing a {@link NoUniqueBeanDefinitionException}._<p>Subclasses may override this to select one of the instances or_to opt out with no result at all through returning {@code null}._@param type the requested bean type_@param matchingBeans a map of bean names and corresponding bean_instances which have been pre-selected for the given type_(qualifiers etc already applied)_@return a bean instance to proceed with, or {@code null} for none_@throws BeansException in case of the not-unique scenario being fatal_@since 4.3;@Nullable_	public Object resolveNotUnique(Class<?> type, Map<String, Object> matchingBeans) throws BeansException {_		throw new NoUniqueBeanDefinitionException(type, matchingBeans.keySet())__	};resolve,the,specified,not,unique,scenario,by,default,throwing,a,link,no,unique,bean,definition,exception,p,subclasses,may,override,this,to,select,one,of,the,instances,or,to,opt,out,with,no,result,at,all,through,returning,code,null,param,type,the,requested,bean,type,param,matching,beans,a,map,of,bean,names,and,corresponding,bean,instances,which,have,been,pre,selected,for,the,given,type,qualifiers,etc,already,applied,return,a,bean,instance,to,proceed,with,or,code,null,for,none,throws,beans,exception,in,case,of,the,not,unique,scenario,being,fatal,since,4,3;nullable,public,object,resolve,not,unique,class,type,map,string,object,matching,beans,throws,beans,exception,throw,new,no,unique,bean,definition,exception,type,matching,beans,key,set
DependencyDescriptor -> @Nullable 	public Object resolveNotUnique(Class<?> type, Map<String, Object> matchingBeans) throws BeansException;1506551472;Resolve the specified not-unique scenario: by default,_throwing a {@link NoUniqueBeanDefinitionException}._<p>Subclasses may override this to select one of the instances or_to opt out with no result at all through returning {@code null}._@param type the requested bean type_@param matchingBeans a map of bean names and corresponding bean_instances which have been pre-selected for the given type_(qualifiers etc already applied)_@return a bean instance to proceed with, or {@code null} for none_@throws BeansException in case of the not-unique scenario being fatal_@since 4.3;@Nullable_	public Object resolveNotUnique(Class<?> type, Map<String, Object> matchingBeans) throws BeansException {_		throw new NoUniqueBeanDefinitionException(type, matchingBeans.keySet())__	};resolve,the,specified,not,unique,scenario,by,default,throwing,a,link,no,unique,bean,definition,exception,p,subclasses,may,override,this,to,select,one,of,the,instances,or,to,opt,out,with,no,result,at,all,through,returning,code,null,param,type,the,requested,bean,type,param,matching,beans,a,map,of,bean,names,and,corresponding,bean,instances,which,have,been,pre,selected,for,the,given,type,qualifiers,etc,already,applied,return,a,bean,instance,to,proceed,with,or,code,null,for,none,throws,beans,exception,in,case,of,the,not,unique,scenario,being,fatal,since,4,3;nullable,public,object,resolve,not,unique,class,type,map,string,object,matching,beans,throws,beans,exception,throw,new,no,unique,bean,definition,exception,type,matching,beans,key,set
DependencyDescriptor -> @Nullable 	public Object resolveNotUnique(Class<?> type, Map<String, Object> matchingBeans) throws BeansException;1530174524;Resolve the specified not-unique scenario: by default,_throwing a {@link NoUniqueBeanDefinitionException}._<p>Subclasses may override this to select one of the instances or_to opt out with no result at all through returning {@code null}._@param type the requested bean type_@param matchingBeans a map of bean names and corresponding bean_instances which have been pre-selected for the given type_(qualifiers etc already applied)_@return a bean instance to proceed with, or {@code null} for none_@throws BeansException in case of the not-unique scenario being fatal_@since 4.3;@Nullable_	public Object resolveNotUnique(Class<?> type, Map<String, Object> matchingBeans) throws BeansException {_		throw new NoUniqueBeanDefinitionException(type, matchingBeans.keySet())__	};resolve,the,specified,not,unique,scenario,by,default,throwing,a,link,no,unique,bean,definition,exception,p,subclasses,may,override,this,to,select,one,of,the,instances,or,to,opt,out,with,no,result,at,all,through,returning,code,null,param,type,the,requested,bean,type,param,matching,beans,a,map,of,bean,names,and,corresponding,bean,instances,which,have,been,pre,selected,for,the,given,type,qualifiers,etc,already,applied,return,a,bean,instance,to,proceed,with,or,code,null,for,none,throws,beans,exception,in,case,of,the,not,unique,scenario,being,fatal,since,4,3;nullable,public,object,resolve,not,unique,class,type,map,string,object,matching,beans,throws,beans,exception,throw,new,no,unique,bean,definition,exception,type,matching,beans,key,set
DependencyDescriptor -> @Nullable 	public Object resolveNotUnique(Class<?> type, Map<String, Object> matchingBeans) throws BeansException;1530198749;Resolve the specified not-unique scenario: by default,_throwing a {@link NoUniqueBeanDefinitionException}._<p>Subclasses may override this to select one of the instances or_to opt out with no result at all through returning {@code null}._@param type the requested bean type_@param matchingBeans a map of bean names and corresponding bean_instances which have been pre-selected for the given type_(qualifiers etc already applied)_@return a bean instance to proceed with, or {@code null} for none_@throws BeansException in case of the not-unique scenario being fatal_@since 4.3;@Nullable_	public Object resolveNotUnique(Class<?> type, Map<String, Object> matchingBeans) throws BeansException {_		throw new NoUniqueBeanDefinitionException(type, matchingBeans.keySet())__	};resolve,the,specified,not,unique,scenario,by,default,throwing,a,link,no,unique,bean,definition,exception,p,subclasses,may,override,this,to,select,one,of,the,instances,or,to,opt,out,with,no,result,at,all,through,returning,code,null,param,type,the,requested,bean,type,param,matching,beans,a,map,of,bean,names,and,corresponding,bean,instances,which,have,been,pre,selected,for,the,given,type,qualifiers,etc,already,applied,return,a,bean,instance,to,proceed,with,or,code,null,for,none,throws,beans,exception,in,case,of,the,not,unique,scenario,being,fatal,since,4,3;nullable,public,object,resolve,not,unique,class,type,map,string,object,matching,beans,throws,beans,exception,throw,new,no,unique,bean,definition,exception,type,matching,beans,key,set
DependencyDescriptor -> @Nullable 	public Object resolveNotUnique(Class<?> type, Map<String, Object> matchingBeans) throws BeansException;1530201727;Resolve the specified not-unique scenario: by default,_throwing a {@link NoUniqueBeanDefinitionException}._<p>Subclasses may override this to select one of the instances or_to opt out with no result at all through returning {@code null}._@param type the requested bean type_@param matchingBeans a map of bean names and corresponding bean_instances which have been pre-selected for the given type_(qualifiers etc already applied)_@return a bean instance to proceed with, or {@code null} for none_@throws BeansException in case of the not-unique scenario being fatal_@since 4.3;@Nullable_	public Object resolveNotUnique(Class<?> type, Map<String, Object> matchingBeans) throws BeansException {_		throw new NoUniqueBeanDefinitionException(type, matchingBeans.keySet())__	};resolve,the,specified,not,unique,scenario,by,default,throwing,a,link,no,unique,bean,definition,exception,p,subclasses,may,override,this,to,select,one,of,the,instances,or,to,opt,out,with,no,result,at,all,through,returning,code,null,param,type,the,requested,bean,type,param,matching,beans,a,map,of,bean,names,and,corresponding,bean,instances,which,have,been,pre,selected,for,the,given,type,qualifiers,etc,already,applied,return,a,bean,instance,to,proceed,with,or,code,null,for,none,throws,beans,exception,in,case,of,the,not,unique,scenario,being,fatal,since,4,3;nullable,public,object,resolve,not,unique,class,type,map,string,object,matching,beans,throws,beans,exception,throw,new,no,unique,bean,definition,exception,type,matching,beans,key,set
DependencyDescriptor -> @Nullable 	public Object resolveNotUnique(Class<?> type, Map<String, Object> matchingBeans) throws BeansException;1532274593;Resolve the specified not-unique scenario: by default,_throwing a {@link NoUniqueBeanDefinitionException}._<p>Subclasses may override this to select one of the instances or_to opt out with no result at all through returning {@code null}._@param type the requested bean type_@param matchingBeans a map of bean names and corresponding bean_instances which have been pre-selected for the given type_(qualifiers etc already applied)_@return a bean instance to proceed with, or {@code null} for none_@throws BeansException in case of the not-unique scenario being fatal_@since 4.3;@Nullable_	public Object resolveNotUnique(Class<?> type, Map<String, Object> matchingBeans) throws BeansException {_		throw new NoUniqueBeanDefinitionException(type, matchingBeans.keySet())__	};resolve,the,specified,not,unique,scenario,by,default,throwing,a,link,no,unique,bean,definition,exception,p,subclasses,may,override,this,to,select,one,of,the,instances,or,to,opt,out,with,no,result,at,all,through,returning,code,null,param,type,the,requested,bean,type,param,matching,beans,a,map,of,bean,names,and,corresponding,bean,instances,which,have,been,pre,selected,for,the,given,type,qualifiers,etc,already,applied,return,a,bean,instance,to,proceed,with,or,code,null,for,none,throws,beans,exception,in,case,of,the,not,unique,scenario,being,fatal,since,4,3;nullable,public,object,resolve,not,unique,class,type,map,string,object,matching,beans,throws,beans,exception,throw,new,no,unique,bean,definition,exception,type,matching,beans,key,set
DependencyDescriptor -> @Nullable 	public Object resolveNotUnique(Class<?> type, Map<String, Object> matchingBeans) throws BeansException;1532332488;Resolve the specified not-unique scenario: by default,_throwing a {@link NoUniqueBeanDefinitionException}._<p>Subclasses may override this to select one of the instances or_to opt out with no result at all through returning {@code null}._@param type the requested bean type_@param matchingBeans a map of bean names and corresponding bean_instances which have been pre-selected for the given type_(qualifiers etc already applied)_@return a bean instance to proceed with, or {@code null} for none_@throws BeansException in case of the not-unique scenario being fatal_@since 4.3;@Nullable_	public Object resolveNotUnique(Class<?> type, Map<String, Object> matchingBeans) throws BeansException {_		throw new NoUniqueBeanDefinitionException(type, matchingBeans.keySet())__	};resolve,the,specified,not,unique,scenario,by,default,throwing,a,link,no,unique,bean,definition,exception,p,subclasses,may,override,this,to,select,one,of,the,instances,or,to,opt,out,with,no,result,at,all,through,returning,code,null,param,type,the,requested,bean,type,param,matching,beans,a,map,of,bean,names,and,corresponding,bean,instances,which,have,been,pre,selected,for,the,given,type,qualifiers,etc,already,applied,return,a,bean,instance,to,proceed,with,or,code,null,for,none,throws,beans,exception,in,case,of,the,not,unique,scenario,being,fatal,since,4,3;nullable,public,object,resolve,not,unique,class,type,map,string,object,matching,beans,throws,beans,exception,throw,new,no,unique,bean,definition,exception,type,matching,beans,key,set
DependencyDescriptor -> public Field getField();1328020251;Return the wrapped Field, if any._<p>Note: Either MethodParameter or Field is available._@return the Field, or <code>null</code> if none;public Field getField() {_		return this.field__	};return,the,wrapped,field,if,any,p,note,either,method,parameter,or,field,is,available,return,the,field,or,code,null,code,if,none;public,field,get,field,return,this,field
DependencyDescriptor -> public Field getField();1329142650;Return the wrapped Field, if any._<p>Note: Either MethodParameter or Field is available._@return the Field, or <code>null</code> if none;public Field getField() {_		return this.field__	};return,the,wrapped,field,if,any,p,note,either,method,parameter,or,field,is,available,return,the,field,or,code,null,code,if,none;public,field,get,field,return,this,field
DependencyDescriptor -> public Field getField();1346421549;Return the wrapped Field, if any._<p>Note: Either MethodParameter or Field is available._@return the Field, or <code>null</code> if none;public Field getField() {_		return this.field__	};return,the,wrapped,field,if,any,p,note,either,method,parameter,or,field,is,available,return,the,field,or,code,null,code,if,none;public,field,get,field,return,this,field
DependencyDescriptor -> public Field getField();1350077654;Return the wrapped Field, if any._<p>Note: Either MethodParameter or Field is available._@return the Field, or <code>null</code> if none;public Field getField() {_		return this.field__	};return,the,wrapped,field,if,any,p,note,either,method,parameter,or,field,is,available,return,the,field,or,code,null,code,if,none;public,field,get,field,return,this,field
DependencyDescriptor -> public Field getField();1356735495;Return the wrapped Field, if any._<p>Note: Either MethodParameter or Field is available._@return the Field, or {@code null} if none;public Field getField() {_		return this.field__	};return,the,wrapped,field,if,any,p,note,either,method,parameter,or,field,is,available,return,the,field,or,code,null,if,none;public,field,get,field,return,this,field
DependencyDescriptor -> public Field getField();1377641038;Return the wrapped Field, if any._<p>Note: Either MethodParameter or Field is available._@return the Field, or {@code null} if none;public Field getField() {_		return this.field__	};return,the,wrapped,field,if,any,p,note,either,method,parameter,or,field,is,available,return,the,field,or,code,null,if,none;public,field,get,field,return,this,field
DependencyDescriptor -> public Field getField();1381788683;Return the wrapped Field, if any._<p>Note: Either MethodParameter or Field is available._@return the Field, or {@code null} if none;public Field getField() {_		return this.field__	};return,the,wrapped,field,if,any,p,note,either,method,parameter,or,field,is,available,return,the,field,or,code,null,if,none;public,field,get,field,return,this,field
DependencyDescriptor -> public Field getField();1382716358;Return the wrapped Field, if any._<p>Note: Either MethodParameter or Field is available._@return the Field, or {@code null} if none;public Field getField() {_		return this.field__	};return,the,wrapped,field,if,any,p,note,either,method,parameter,or,field,is,available,return,the,field,or,code,null,if,none;public,field,get,field,return,this,field
DependencyDescriptor -> public Field getField();1385412762;Return the wrapped Field, if any._<p>Note: Either MethodParameter or Field is available._@return the Field, or {@code null} if none;public Field getField() {_		return this.field__	};return,the,wrapped,field,if,any,p,note,either,method,parameter,or,field,is,available,return,the,field,or,code,null,if,none;public,field,get,field,return,this,field
DependencyDescriptor -> public Field getField();1402061390;Return the wrapped Field, if any._<p>Note: Either MethodParameter or Field is available._@return the Field, or {@code null} if none;public Field getField() {_		return this.field__	};return,the,wrapped,field,if,any,p,note,either,method,parameter,or,field,is,available,return,the,field,or,code,null,if,none;public,field,get,field,return,this,field
DependencyDescriptor -> public Field getField();1452685925;Return the wrapped Field, if any._<p>Note: Either MethodParameter or Field is available._@return the Field, or {@code null} if none;public Field getField() {_		return this.field__	};return,the,wrapped,field,if,any,p,note,either,method,parameter,or,field,is,available,return,the,field,or,code,null,if,none;public,field,get,field,return,this,field
DependencyDescriptor -> public Field getField();1455295525;Return the wrapped Field, if any._<p>Note: Either MethodParameter or Field is available._@return the Field, or {@code null} if none;public Field getField() {_		return this.field__	};return,the,wrapped,field,if,any,p,note,either,method,parameter,or,field,is,available,return,the,field,or,code,null,if,none;public,field,get,field,return,this,field
DependencyDescriptor -> public Field getField();1455889195;Return the wrapped Field, if any._<p>Note: Either MethodParameter or Field is available._@return the Field, or {@code null} if none;public Field getField() {_		return this.field__	};return,the,wrapped,field,if,any,p,note,either,method,parameter,or,field,is,available,return,the,field,or,code,null,if,none;public,field,get,field,return,this,field
DependencyDescriptor -> public Class<?> getMapValueType();1328020251;Determine the generic value type of the wrapped Map parameter/field, if any._@return the generic type, or <code>null</code> if none;public Class<?> getMapValueType() {_		return (this.field != null ?_				GenericCollectionTypeResolver.getMapValueFieldType(this.field) :_				GenericCollectionTypeResolver.getMapValueParameterType(this.methodParameter))__	};determine,the,generic,value,type,of,the,wrapped,map,parameter,field,if,any,return,the,generic,type,or,code,null,code,if,none;public,class,get,map,value,type,return,this,field,null,generic,collection,type,resolver,get,map,value,field,type,this,field,generic,collection,type,resolver,get,map,value,parameter,type,this,method,parameter
DependencyDescriptor -> public Class<?> getMapValueType();1329142650;Determine the generic value type of the wrapped Map parameter/field, if any._@return the generic type, or <code>null</code> if none;public Class<?> getMapValueType() {_		return (this.field != null ?_				GenericCollectionTypeResolver.getMapValueFieldType(this.field, this.nestingLevel) :_				GenericCollectionTypeResolver.getMapValueParameterType(this.methodParameter))__	};determine,the,generic,value,type,of,the,wrapped,map,parameter,field,if,any,return,the,generic,type,or,code,null,code,if,none;public,class,get,map,value,type,return,this,field,null,generic,collection,type,resolver,get,map,value,field,type,this,field,this,nesting,level,generic,collection,type,resolver,get,map,value,parameter,type,this,method,parameter
DependencyDescriptor -> public Class<?> getMapValueType();1346421549;Determine the generic value type of the wrapped Map parameter/field, if any._@return the generic type, or <code>null</code> if none;public Class<?> getMapValueType() {_		return (this.field != null ?_				GenericCollectionTypeResolver.getMapValueFieldType(this.field, this.nestingLevel) :_				GenericCollectionTypeResolver.getMapValueParameterType(this.methodParameter))__	};determine,the,generic,value,type,of,the,wrapped,map,parameter,field,if,any,return,the,generic,type,or,code,null,code,if,none;public,class,get,map,value,type,return,this,field,null,generic,collection,type,resolver,get,map,value,field,type,this,field,this,nesting,level,generic,collection,type,resolver,get,map,value,parameter,type,this,method,parameter
DependencyDescriptor -> public Class<?> getMapValueType();1350077654;Determine the generic value type of the wrapped Map parameter/field, if any._@return the generic type, or <code>null</code> if none;public Class<?> getMapValueType() {_		return (this.field != null ?_				GenericCollectionTypeResolver.getMapValueFieldType(this.field, this.nestingLevel) :_				GenericCollectionTypeResolver.getMapValueParameterType(this.methodParameter))__	};determine,the,generic,value,type,of,the,wrapped,map,parameter,field,if,any,return,the,generic,type,or,code,null,code,if,none;public,class,get,map,value,type,return,this,field,null,generic,collection,type,resolver,get,map,value,field,type,this,field,this,nesting,level,generic,collection,type,resolver,get,map,value,parameter,type,this,method,parameter
DependencyDescriptor -> public Class<?> getMapValueType();1356735495;Determine the generic value type of the wrapped Map parameter/field, if any._@return the generic type, or {@code null} if none;public Class<?> getMapValueType() {_		return (this.field != null ?_				GenericCollectionTypeResolver.getMapValueFieldType(this.field, this.nestingLevel) :_				GenericCollectionTypeResolver.getMapValueParameterType(this.methodParameter))__	};determine,the,generic,value,type,of,the,wrapped,map,parameter,field,if,any,return,the,generic,type,or,code,null,if,none;public,class,get,map,value,type,return,this,field,null,generic,collection,type,resolver,get,map,value,field,type,this,field,this,nesting,level,generic,collection,type,resolver,get,map,value,parameter,type,this,method,parameter
DependencyDescriptor -> public Class<?> getMapValueType();1377641038;Determine the generic value type of the wrapped Map parameter/field, if any._@return the generic type, or {@code null} if none;public Class<?> getMapValueType() {_		return (this.field != null ?_				GenericCollectionTypeResolver.getMapValueFieldType(this.field, this.nestingLevel) :_				GenericCollectionTypeResolver.getMapValueParameterType(this.methodParameter))__	};determine,the,generic,value,type,of,the,wrapped,map,parameter,field,if,any,return,the,generic,type,or,code,null,if,none;public,class,get,map,value,type,return,this,field,null,generic,collection,type,resolver,get,map,value,field,type,this,field,this,nesting,level,generic,collection,type,resolver,get,map,value,parameter,type,this,method,parameter
DependencyDescriptor -> public Class<?> getMapValueType();1381788683;Determine the generic value type of the wrapped Map parameter/field, if any._@return the generic type, or {@code null} if none;public Class<?> getMapValueType() {_		return (this.field != null ?_				GenericCollectionTypeResolver.getMapValueFieldType(this.field, this.nestingLevel) :_				GenericCollectionTypeResolver.getMapValueParameterType(this.methodParameter))__	};determine,the,generic,value,type,of,the,wrapped,map,parameter,field,if,any,return,the,generic,type,or,code,null,if,none;public,class,get,map,value,type,return,this,field,null,generic,collection,type,resolver,get,map,value,field,type,this,field,this,nesting,level,generic,collection,type,resolver,get,map,value,parameter,type,this,method,parameter
DependencyDescriptor -> public Class<?> getMapValueType();1382716358;Determine the generic value type of the wrapped Map parameter/field, if any._@return the generic type, or {@code null} if none;public Class<?> getMapValueType() {_		return (this.field != null ?_				GenericCollectionTypeResolver.getMapValueFieldType(this.field, this.nestingLevel) :_				GenericCollectionTypeResolver.getMapValueParameterType(this.methodParameter))__	};determine,the,generic,value,type,of,the,wrapped,map,parameter,field,if,any,return,the,generic,type,or,code,null,if,none;public,class,get,map,value,type,return,this,field,null,generic,collection,type,resolver,get,map,value,field,type,this,field,this,nesting,level,generic,collection,type,resolver,get,map,value,parameter,type,this,method,parameter
DependencyDescriptor -> public Class<?> getMapValueType();1385412762;Determine the generic value type of the wrapped Map parameter/field, if any._@return the generic type, or {@code null} if none;public Class<?> getMapValueType() {_		return (this.field != null ?_				GenericCollectionTypeResolver.getMapValueFieldType(this.field, this.nestingLevel) :_				GenericCollectionTypeResolver.getMapValueParameterType(this.methodParameter))__	};determine,the,generic,value,type,of,the,wrapped,map,parameter,field,if,any,return,the,generic,type,or,code,null,if,none;public,class,get,map,value,type,return,this,field,null,generic,collection,type,resolver,get,map,value,field,type,this,field,this,nesting,level,generic,collection,type,resolver,get,map,value,parameter,type,this,method,parameter
DependencyDescriptor -> public Class<?> getMapValueType();1402061390;Determine the generic value type of the wrapped Map parameter/field, if any._@return the generic type, or {@code null} if none;public Class<?> getMapValueType() {_		return (this.field != null ?_				GenericCollectionTypeResolver.getMapValueFieldType(this.field, this.nestingLevel) :_				GenericCollectionTypeResolver.getMapValueParameterType(this.methodParameter))__	};determine,the,generic,value,type,of,the,wrapped,map,parameter,field,if,any,return,the,generic,type,or,code,null,if,none;public,class,get,map,value,type,return,this,field,null,generic,collection,type,resolver,get,map,value,field,type,this,field,this,nesting,level,generic,collection,type,resolver,get,map,value,parameter,type,this,method,parameter
DependencyDescriptor -> public Class<?> getMapValueType();1452685925;Determine the generic value type of the wrapped Map parameter/field, if any._@return the generic type, or {@code null} if none;public Class<?> getMapValueType() {_		return (this.field != null ?_				GenericCollectionTypeResolver.getMapValueFieldType(this.field, this.nestingLevel) :_				GenericCollectionTypeResolver.getMapValueParameterType(this.methodParameter))__	};determine,the,generic,value,type,of,the,wrapped,map,parameter,field,if,any,return,the,generic,type,or,code,null,if,none;public,class,get,map,value,type,return,this,field,null,generic,collection,type,resolver,get,map,value,field,type,this,field,this,nesting,level,generic,collection,type,resolver,get,map,value,parameter,type,this,method,parameter
DependencyDescriptor -> public Class<?> getMapValueType();1455295525;Determine the generic value type of the wrapped Map parameter/field, if any._@return the generic type, or {@code null} if none;public Class<?> getMapValueType() {_		return (this.field != null ?_				GenericCollectionTypeResolver.getMapValueFieldType(this.field, this.nestingLevel) :_				GenericCollectionTypeResolver.getMapValueParameterType(this.methodParameter))__	};determine,the,generic,value,type,of,the,wrapped,map,parameter,field,if,any,return,the,generic,type,or,code,null,if,none;public,class,get,map,value,type,return,this,field,null,generic,collection,type,resolver,get,map,value,field,type,this,field,this,nesting,level,generic,collection,type,resolver,get,map,value,parameter,type,this,method,parameter
DependencyDescriptor -> public Class<?> getMapValueType();1455889195;Determine the generic value type of the wrapped Map parameter/field, if any._@return the generic type, or {@code null} if none;public Class<?> getMapValueType() {_		return (this.field != null ?_				GenericCollectionTypeResolver.getMapValueFieldType(this.field, this.nestingLevel) :_				GenericCollectionTypeResolver.getMapValueParameterType(this.methodParameter))__	};determine,the,generic,value,type,of,the,wrapped,map,parameter,field,if,any,return,the,generic,type,or,code,null,if,none;public,class,get,map,value,type,return,this,field,null,generic,collection,type,resolver,get,map,value,field,type,this,field,this,nesting,level,generic,collection,type,resolver,get,map,value,parameter,type,this,method,parameter
DependencyDescriptor -> public Class<?> getMapValueType();1456432609;Determine the generic value type of the wrapped Map parameter/field, if any._@return the generic type, or {@code null} if none;public Class<?> getMapValueType() {_		return (this.field != null ?_				GenericCollectionTypeResolver.getMapValueFieldType(this.field, this.nestingLevel) :_				GenericCollectionTypeResolver.getMapValueParameterType(this.methodParameter))__	};determine,the,generic,value,type,of,the,wrapped,map,parameter,field,if,any,return,the,generic,type,or,code,null,if,none;public,class,get,map,value,type,return,this,field,null,generic,collection,type,resolver,get,map,value,field,type,this,field,this,nesting,level,generic,collection,type,resolver,get,map,value,parameter,type,this,method,parameter
DependencyDescriptor -> public Class<?> getMapValueType();1458755547;Determine the generic value type of the wrapped Map parameter/field, if any._@return the generic type, or {@code null} if none;public Class<?> getMapValueType() {_		return (this.field != null ?_				GenericCollectionTypeResolver.getMapValueFieldType(this.field, this.nestingLevel) :_				GenericCollectionTypeResolver.getMapValueParameterType(this.methodParameter))__	};determine,the,generic,value,type,of,the,wrapped,map,parameter,field,if,any,return,the,generic,type,or,code,null,if,none;public,class,get,map,value,type,return,this,field,null,generic,collection,type,resolver,get,map,value,field,type,this,field,this,nesting,level,generic,collection,type,resolver,get,map,value,parameter,type,this,method,parameter
DependencyDescriptor -> public Class<?> getMapValueType();1466893134;Determine the generic value type of the wrapped Map parameter/field, if any._@return the generic type, or {@code null} if none;public Class<?> getMapValueType() {_		return (this.field != null ?_				GenericCollectionTypeResolver.getMapValueFieldType(this.field, this.nestingLevel) :_				GenericCollectionTypeResolver.getMapValueParameterType(this.methodParameter))__	};determine,the,generic,value,type,of,the,wrapped,map,parameter,field,if,any,return,the,generic,type,or,code,null,if,none;public,class,get,map,value,type,return,this,field,null,generic,collection,type,resolver,get,map,value,field,type,this,field,this,nesting,level,generic,collection,type,resolver,get,map,value,parameter,type,this,method,parameter
DependencyDescriptor -> public Class<?> getMapValueType();1469030751;Determine the generic value type of the wrapped Map parameter/field, if any._@return the generic type, or {@code null} if none;public Class<?> getMapValueType() {_		return (this.field != null ?_				GenericCollectionTypeResolver.getMapValueFieldType(this.field, this.nestingLevel) :_				GenericCollectionTypeResolver.getMapValueParameterType(this.methodParameter))__	};determine,the,generic,value,type,of,the,wrapped,map,parameter,field,if,any,return,the,generic,type,or,code,null,if,none;public,class,get,map,value,type,return,this,field,null,generic,collection,type,resolver,get,map,value,field,type,this,field,this,nesting,level,generic,collection,type,resolver,get,map,value,parameter,type,this,method,parameter
DependencyDescriptor -> public Class<?> getMapValueType();1481647138;Determine the generic value type of the wrapped Map parameter/field, if any._@return the generic type, or {@code null} if none;public Class<?> getMapValueType() {_		return (this.field != null ?_				GenericCollectionTypeResolver.getMapValueFieldType(this.field, this.nestingLevel) :_				GenericCollectionTypeResolver.getMapValueParameterType(this.methodParameter))__	};determine,the,generic,value,type,of,the,wrapped,map,parameter,field,if,any,return,the,generic,type,or,code,null,if,none;public,class,get,map,value,type,return,this,field,null,generic,collection,type,resolver,get,map,value,field,type,this,field,this,nesting,level,generic,collection,type,resolver,get,map,value,parameter,type,this,method,parameter
DependencyDescriptor -> public Class<?> getMapValueType();1482091448;Determine the generic value type of the wrapped Map parameter/field, if any._@return the generic type, or {@code null} if none;public Class<?> getMapValueType() {_		return (this.field != null ?_				GenericCollectionTypeResolver.getMapValueFieldType(this.field, this.nestingLevel) :_				GenericCollectionTypeResolver.getMapValueParameterType(this.methodParameter))__	};determine,the,generic,value,type,of,the,wrapped,map,parameter,field,if,any,return,the,generic,type,or,code,null,if,none;public,class,get,map,value,type,return,this,field,null,generic,collection,type,resolver,get,map,value,field,type,this,field,this,nesting,level,generic,collection,type,resolver,get,map,value,parameter,type,this,method,parameter
DependencyDescriptor -> KotlinDelegate -> public static boolean isNullable(Field field);1481647138;Check whether the specified {@link Field} represents a nullable Kotlin type or not.;public static boolean isNullable(Field field) {_			if (field.getDeclaringClass().isAnnotationPresent(Metadata.class)) {_				KProperty<?> property = ReflectJvmMapping.getKotlinProperty(field)__				return (property != null && property.getReturnType().isMarkedNullable())__			}_			return false__		};check,whether,the,specified,link,field,represents,a,nullable,kotlin,type,or,not;public,static,boolean,is,nullable,field,field,if,field,get,declaring,class,is,annotation,present,metadata,class,kproperty,property,reflect,jvm,mapping,get,kotlin,property,field,return,property,null,property,get,return,type,is,marked,nullable,return,false
DependencyDescriptor -> KotlinDelegate -> public static boolean isNullable(Field field);1482091448;Check whether the specified {@link Field} represents a nullable Kotlin type or not.;public static boolean isNullable(Field field) {_			if (field.getDeclaringClass().isAnnotationPresent(Metadata.class)) {_				KProperty<?> property = ReflectJvmMapping.getKotlinProperty(field)__				return (property != null && property.getReturnType().isMarkedNullable())__			}_			return false__		};check,whether,the,specified,link,field,represents,a,nullable,kotlin,type,or,not;public,static,boolean,is,nullable,field,field,if,field,get,declaring,class,is,annotation,present,metadata,class,kproperty,property,reflect,jvm,mapping,get,kotlin,property,field,return,property,null,property,get,return,type,is,marked,nullable,return,false
DependencyDescriptor -> KotlinDelegate -> public static boolean isNullable(Field field);1485277217;Check whether the specified {@link Field} represents a nullable Kotlin type or not.;public static boolean isNullable(Field field) {_			if (field.getDeclaringClass().isAnnotationPresent(Metadata.class)) {_				KProperty<?> property = ReflectJvmMapping.getKotlinProperty(field)__				return (property != null && property.getReturnType().isMarkedNullable())__			}_			return false__		};check,whether,the,specified,link,field,represents,a,nullable,kotlin,type,or,not;public,static,boolean,is,nullable,field,field,if,field,get,declaring,class,is,annotation,present,metadata,class,kproperty,property,reflect,jvm,mapping,get,kotlin,property,field,return,property,null,property,get,return,type,is,marked,nullable,return,false
DependencyDescriptor -> KotlinDelegate -> public static boolean isNullable(Field field);1485300605;Check whether the specified {@link Field} represents a nullable Kotlin type or not.;public static boolean isNullable(Field field) {_			if (field.getDeclaringClass().isAnnotationPresent(Metadata.class)) {_				KProperty<?> property = ReflectJvmMapping.getKotlinProperty(field)__				return (property != null && property.getReturnType().isMarkedNullable())__			}_			return false__		};check,whether,the,specified,link,field,represents,a,nullable,kotlin,type,or,not;public,static,boolean,is,nullable,field,field,if,field,get,declaring,class,is,annotation,present,metadata,class,kproperty,property,reflect,jvm,mapping,get,kotlin,property,field,return,property,null,property,get,return,type,is,marked,nullable,return,false
DependencyDescriptor -> KotlinDelegate -> public static boolean isNullable(Field field);1495868221;Check whether the specified {@link Field} represents a nullable Kotlin type or not.;public static boolean isNullable(Field field) {_			if (field.getDeclaringClass().isAnnotationPresent(Metadata.class)) {_				KProperty<?> property = ReflectJvmMapping.getKotlinProperty(field)__				return (property != null && property.getReturnType().isMarkedNullable())__			}_			return false__		};check,whether,the,specified,link,field,represents,a,nullable,kotlin,type,or,not;public,static,boolean,is,nullable,field,field,if,field,get,declaring,class,is,annotation,present,metadata,class,kproperty,property,reflect,jvm,mapping,get,kotlin,property,field,return,property,null,property,get,return,type,is,marked,nullable,return,false
DependencyDescriptor -> KotlinDelegate -> public static boolean isNullable(Field field);1496837955;Check whether the specified {@link Field} represents a nullable Kotlin type or not.;public static boolean isNullable(Field field) {_			if (field.getDeclaringClass().isAnnotationPresent(Metadata.class)) {_				KProperty<?> property = ReflectJvmMapping.getKotlinProperty(field)__				return (property != null && property.getReturnType().isMarkedNullable())__			}_			return false__		};check,whether,the,specified,link,field,represents,a,nullable,kotlin,type,or,not;public,static,boolean,is,nullable,field,field,if,field,get,declaring,class,is,annotation,present,metadata,class,kproperty,property,reflect,jvm,mapping,get,kotlin,property,field,return,property,null,property,get,return,type,is,marked,nullable,return,false
DependencyDescriptor -> KotlinDelegate -> public static boolean isNullable(Field field);1498780456;Check whether the specified {@link Field} represents a nullable Kotlin type or not.;public static boolean isNullable(Field field) {_			if (field.getDeclaringClass().isAnnotationPresent(Metadata.class)) {_				KProperty<?> property = ReflectJvmMapping.getKotlinProperty(field)__				return (property != null && property.getReturnType().isMarkedNullable())__			}_			return false__		};check,whether,the,specified,link,field,represents,a,nullable,kotlin,type,or,not;public,static,boolean,is,nullable,field,field,if,field,get,declaring,class,is,annotation,present,metadata,class,kproperty,property,reflect,jvm,mapping,get,kotlin,property,field,return,property,null,property,get,return,type,is,marked,nullable,return,false
DependencyDescriptor -> KotlinDelegate -> public static boolean isNullable(Field field);1503007895;Check whether the specified {@link Field} represents a nullable Kotlin type or not.;public static boolean isNullable(Field field) {_			if (field.getDeclaringClass().isAnnotationPresent(Metadata.class)) {_				KProperty<?> property = ReflectJvmMapping.getKotlinProperty(field)__				return (property != null && property.getReturnType().isMarkedNullable())__			}_			return false__		};check,whether,the,specified,link,field,represents,a,nullable,kotlin,type,or,not;public,static,boolean,is,nullable,field,field,if,field,get,declaring,class,is,annotation,present,metadata,class,kproperty,property,reflect,jvm,mapping,get,kotlin,property,field,return,property,null,property,get,return,type,is,marked,nullable,return,false
DependencyDescriptor -> KotlinDelegate -> public static boolean isNullable(Field field);1503272000;Check whether the specified {@link Field} represents a nullable Kotlin type or not.;public static boolean isNullable(Field field) {_			if (field.getDeclaringClass().isAnnotationPresent(Metadata.class)) {_				KProperty<?> property = ReflectJvmMapping.getKotlinProperty(field)__				return (property != null && property.getReturnType().isMarkedNullable())__			}_			return false__		};check,whether,the,specified,link,field,represents,a,nullable,kotlin,type,or,not;public,static,boolean,is,nullable,field,field,if,field,get,declaring,class,is,annotation,present,metadata,class,kproperty,property,reflect,jvm,mapping,get,kotlin,property,field,return,property,null,property,get,return,type,is,marked,nullable,return,false
DependencyDescriptor -> KotlinDelegate -> public static boolean isNullable(Field field);1503411745;Check whether the specified {@link Field} represents a nullable Kotlin type or not.;public static boolean isNullable(Field field) {_			KProperty<?> property = ReflectJvmMapping.getKotlinProperty(field)__			return (property != null && property.getReturnType().isMarkedNullable())__		};check,whether,the,specified,link,field,represents,a,nullable,kotlin,type,or,not;public,static,boolean,is,nullable,field,field,kproperty,property,reflect,jvm,mapping,get,kotlin,property,field,return,property,null,property,get,return,type,is,marked,nullable
DependencyDescriptor -> KotlinDelegate -> public static boolean isNullable(Field field);1506551472;Check whether the specified {@link Field} represents a nullable Kotlin type or not.;public static boolean isNullable(Field field) {_			KProperty<?> property = ReflectJvmMapping.getKotlinProperty(field)__			return (property != null && property.getReturnType().isMarkedNullable())__		};check,whether,the,specified,link,field,represents,a,nullable,kotlin,type,or,not;public,static,boolean,is,nullable,field,field,kproperty,property,reflect,jvm,mapping,get,kotlin,property,field,return,property,null,property,get,return,type,is,marked,nullable
DependencyDescriptor -> KotlinDelegate -> public static boolean isNullable(Field field);1530174524;Check whether the specified {@link Field} represents a nullable Kotlin type or not.;public static boolean isNullable(Field field) {_			KProperty<?> property = ReflectJvmMapping.getKotlinProperty(field)__			return (property != null && property.getReturnType().isMarkedNullable())__		};check,whether,the,specified,link,field,represents,a,nullable,kotlin,type,or,not;public,static,boolean,is,nullable,field,field,kproperty,property,reflect,jvm,mapping,get,kotlin,property,field,return,property,null,property,get,return,type,is,marked,nullable
DependencyDescriptor -> KotlinDelegate -> public static boolean isNullable(Field field);1530198749;Check whether the specified {@link Field} represents a nullable Kotlin type or not.;public static boolean isNullable(Field field) {_			KProperty<?> property = ReflectJvmMapping.getKotlinProperty(field)__			return (property != null && property.getReturnType().isMarkedNullable())__		};check,whether,the,specified,link,field,represents,a,nullable,kotlin,type,or,not;public,static,boolean,is,nullable,field,field,kproperty,property,reflect,jvm,mapping,get,kotlin,property,field,return,property,null,property,get,return,type,is,marked,nullable
DependencyDescriptor -> KotlinDelegate -> public static boolean isNullable(Field field);1530201727;Check whether the specified {@link Field} represents a nullable Kotlin type or not.;public static boolean isNullable(Field field) {_			KProperty<?> property = ReflectJvmMapping.getKotlinProperty(field)__			return (property != null && property.getReturnType().isMarkedNullable())__		};check,whether,the,specified,link,field,represents,a,nullable,kotlin,type,or,not;public,static,boolean,is,nullable,field,field,kproperty,property,reflect,jvm,mapping,get,kotlin,property,field,return,property,null,property,get,return,type,is,marked,nullable
DependencyDescriptor -> KotlinDelegate -> public static boolean isNullable(Field field);1532274593;Check whether the specified {@link Field} represents a nullable Kotlin type or not.;public static boolean isNullable(Field field) {_			KProperty<?> property = ReflectJvmMapping.getKotlinProperty(field)__			return (property != null && property.getReturnType().isMarkedNullable())__		};check,whether,the,specified,link,field,represents,a,nullable,kotlin,type,or,not;public,static,boolean,is,nullable,field,field,kproperty,property,reflect,jvm,mapping,get,kotlin,property,field,return,property,null,property,get,return,type,is,marked,nullable
DependencyDescriptor -> KotlinDelegate -> public static boolean isNullable(Field field);1532332488;Check whether the specified {@link Field} represents a nullable Kotlin type or not.;public static boolean isNullable(Field field) {_			KProperty<?> property = ReflectJvmMapping.getKotlinProperty(field)__			return (property != null && property.getReturnType().isMarkedNullable())__		};check,whether,the,specified,link,field,represents,a,nullable,kotlin,type,or,not;public,static,boolean,is,nullable,field,field,kproperty,property,reflect,jvm,mapping,get,kotlin,property,field,return,property,null,property,get,return,type,is,marked,nullable
DependencyDescriptor -> KotlinDelegate -> public static boolean isNullable(Field field);1532385723;Check whether the specified {@link Field} represents a nullable Kotlin type or not.;public static boolean isNullable(Field field) {_			KProperty<?> property = ReflectJvmMapping.getKotlinProperty(field)__			return (property != null && property.getReturnType().isMarkedNullable())__		};check,whether,the,specified,link,field,represents,a,nullable,kotlin,type,or,not;public,static,boolean,is,nullable,field,field,kproperty,property,reflect,jvm,mapping,get,kotlin,property,field,return,property,null,property,get,return,type,is,marked,nullable
DependencyDescriptor -> KotlinDelegate -> public static boolean isNullable(Field field);1535039984;Check whether the specified {@link Field} represents a nullable Kotlin type or not.;public static boolean isNullable(Field field) {_			KProperty<?> property = ReflectJvmMapping.getKotlinProperty(field)__			return (property != null && property.getReturnType().isMarkedNullable())__		};check,whether,the,specified,link,field,represents,a,nullable,kotlin,type,or,not;public,static,boolean,is,nullable,field,field,kproperty,property,reflect,jvm,mapping,get,kotlin,property,field,return,property,null,property,get,return,type,is,marked,nullable
DependencyDescriptor -> KotlinDelegate -> public static boolean isNullable(Field field);1536855799;Check whether the specified {@link Field} represents a nullable Kotlin type or not.;public static boolean isNullable(Field field) {_			KProperty<?> property = ReflectJvmMapping.getKotlinProperty(field)__			return (property != null && property.getReturnType().isMarkedNullable())__		};check,whether,the,specified,link,field,represents,a,nullable,kotlin,type,or,not;public,static,boolean,is,nullable,field,field,kproperty,property,reflect,jvm,mapping,get,kotlin,property,field,return,property,null,property,get,return,type,is,marked,nullable
DependencyDescriptor -> KotlinDelegate -> public static boolean isNullable(Field field);1546963887;Check whether the specified {@link Field} represents a nullable Kotlin type or not.;public static boolean isNullable(Field field) {_			KProperty<?> property = ReflectJvmMapping.getKotlinProperty(field)__			return (property != null && property.getReturnType().isMarkedNullable())__		};check,whether,the,specified,link,field,represents,a,nullable,kotlin,type,or,not;public,static,boolean,is,nullable,field,field,kproperty,property,reflect,jvm,mapping,get,kotlin,property,field,return,property,null,property,get,return,type,is,marked,nullable
DependencyDescriptor -> @Nullable 	public Object resolveShortcut(BeanFactory beanFactory) throws BeansException;1495868221;Resolve a shortcut for this dependency against the given factory, for example_taking some pre-resolved information into account._<p>The resolution algorithm will first attempt to resolve a shortcut through this_method before going into the regular type matching algorithm across all beans._Subclasses may override this method to improve resolution performance based on_pre-cached information while still receiving {@link InjectionPoint} exposure etc._@param beanFactory the associated factory_@return the shortcut result if any, or {@code null} if none_@throws BeansException if the shortcut could not be obtained_@since 4.3.1;@Nullable_	public Object resolveShortcut(BeanFactory beanFactory) throws BeansException {_		return null__	};resolve,a,shortcut,for,this,dependency,against,the,given,factory,for,example,taking,some,pre,resolved,information,into,account,p,the,resolution,algorithm,will,first,attempt,to,resolve,a,shortcut,through,this,method,before,going,into,the,regular,type,matching,algorithm,across,all,beans,subclasses,may,override,this,method,to,improve,resolution,performance,based,on,pre,cached,information,while,still,receiving,link,injection,point,exposure,etc,param,bean,factory,the,associated,factory,return,the,shortcut,result,if,any,or,code,null,if,none,throws,beans,exception,if,the,shortcut,could,not,be,obtained,since,4,3,1;nullable,public,object,resolve,shortcut,bean,factory,bean,factory,throws,beans,exception,return,null
DependencyDescriptor -> @Nullable 	public Object resolveShortcut(BeanFactory beanFactory) throws BeansException;1496837955;Resolve a shortcut for this dependency against the given factory, for example_taking some pre-resolved information into account._<p>The resolution algorithm will first attempt to resolve a shortcut through this_method before going into the regular type matching algorithm across all beans._Subclasses may override this method to improve resolution performance based on_pre-cached information while still receiving {@link InjectionPoint} exposure etc._@param beanFactory the associated factory_@return the shortcut result if any, or {@code null} if none_@throws BeansException if the shortcut could not be obtained_@since 4.3.1;@Nullable_	public Object resolveShortcut(BeanFactory beanFactory) throws BeansException {_		return null__	};resolve,a,shortcut,for,this,dependency,against,the,given,factory,for,example,taking,some,pre,resolved,information,into,account,p,the,resolution,algorithm,will,first,attempt,to,resolve,a,shortcut,through,this,method,before,going,into,the,regular,type,matching,algorithm,across,all,beans,subclasses,may,override,this,method,to,improve,resolution,performance,based,on,pre,cached,information,while,still,receiving,link,injection,point,exposure,etc,param,bean,factory,the,associated,factory,return,the,shortcut,result,if,any,or,code,null,if,none,throws,beans,exception,if,the,shortcut,could,not,be,obtained,since,4,3,1;nullable,public,object,resolve,shortcut,bean,factory,bean,factory,throws,beans,exception,return,null
DependencyDescriptor -> @Nullable 	public Object resolveShortcut(BeanFactory beanFactory) throws BeansException;1498780456;Resolve a shortcut for this dependency against the given factory, for example_taking some pre-resolved information into account._<p>The resolution algorithm will first attempt to resolve a shortcut through this_method before going into the regular type matching algorithm across all beans._Subclasses may override this method to improve resolution performance based on_pre-cached information while still receiving {@link InjectionPoint} exposure etc._@param beanFactory the associated factory_@return the shortcut result if any, or {@code null} if none_@throws BeansException if the shortcut could not be obtained_@since 4.3.1;@Nullable_	public Object resolveShortcut(BeanFactory beanFactory) throws BeansException {_		return null__	};resolve,a,shortcut,for,this,dependency,against,the,given,factory,for,example,taking,some,pre,resolved,information,into,account,p,the,resolution,algorithm,will,first,attempt,to,resolve,a,shortcut,through,this,method,before,going,into,the,regular,type,matching,algorithm,across,all,beans,subclasses,may,override,this,method,to,improve,resolution,performance,based,on,pre,cached,information,while,still,receiving,link,injection,point,exposure,etc,param,bean,factory,the,associated,factory,return,the,shortcut,result,if,any,or,code,null,if,none,throws,beans,exception,if,the,shortcut,could,not,be,obtained,since,4,3,1;nullable,public,object,resolve,shortcut,bean,factory,bean,factory,throws,beans,exception,return,null
DependencyDescriptor -> @Nullable 	public Object resolveShortcut(BeanFactory beanFactory) throws BeansException;1503007895;Resolve a shortcut for this dependency against the given factory, for example_taking some pre-resolved information into account._<p>The resolution algorithm will first attempt to resolve a shortcut through this_method before going into the regular type matching algorithm across all beans._Subclasses may override this method to improve resolution performance based on_pre-cached information while still receiving {@link InjectionPoint} exposure etc._@param beanFactory the associated factory_@return the shortcut result if any, or {@code null} if none_@throws BeansException if the shortcut could not be obtained_@since 4.3.1;@Nullable_	public Object resolveShortcut(BeanFactory beanFactory) throws BeansException {_		return null__	};resolve,a,shortcut,for,this,dependency,against,the,given,factory,for,example,taking,some,pre,resolved,information,into,account,p,the,resolution,algorithm,will,first,attempt,to,resolve,a,shortcut,through,this,method,before,going,into,the,regular,type,matching,algorithm,across,all,beans,subclasses,may,override,this,method,to,improve,resolution,performance,based,on,pre,cached,information,while,still,receiving,link,injection,point,exposure,etc,param,bean,factory,the,associated,factory,return,the,shortcut,result,if,any,or,code,null,if,none,throws,beans,exception,if,the,shortcut,could,not,be,obtained,since,4,3,1;nullable,public,object,resolve,shortcut,bean,factory,bean,factory,throws,beans,exception,return,null
DependencyDescriptor -> @Nullable 	public Object resolveShortcut(BeanFactory beanFactory) throws BeansException;1503272000;Resolve a shortcut for this dependency against the given factory, for example_taking some pre-resolved information into account._<p>The resolution algorithm will first attempt to resolve a shortcut through this_method before going into the regular type matching algorithm across all beans._Subclasses may override this method to improve resolution performance based on_pre-cached information while still receiving {@link InjectionPoint} exposure etc._@param beanFactory the associated factory_@return the shortcut result if any, or {@code null} if none_@throws BeansException if the shortcut could not be obtained_@since 4.3.1;@Nullable_	public Object resolveShortcut(BeanFactory beanFactory) throws BeansException {_		return null__	};resolve,a,shortcut,for,this,dependency,against,the,given,factory,for,example,taking,some,pre,resolved,information,into,account,p,the,resolution,algorithm,will,first,attempt,to,resolve,a,shortcut,through,this,method,before,going,into,the,regular,type,matching,algorithm,across,all,beans,subclasses,may,override,this,method,to,improve,resolution,performance,based,on,pre,cached,information,while,still,receiving,link,injection,point,exposure,etc,param,bean,factory,the,associated,factory,return,the,shortcut,result,if,any,or,code,null,if,none,throws,beans,exception,if,the,shortcut,could,not,be,obtained,since,4,3,1;nullable,public,object,resolve,shortcut,bean,factory,bean,factory,throws,beans,exception,return,null
DependencyDescriptor -> @Nullable 	public Object resolveShortcut(BeanFactory beanFactory) throws BeansException;1503411745;Resolve a shortcut for this dependency against the given factory, for example_taking some pre-resolved information into account._<p>The resolution algorithm will first attempt to resolve a shortcut through this_method before going into the regular type matching algorithm across all beans._Subclasses may override this method to improve resolution performance based on_pre-cached information while still receiving {@link InjectionPoint} exposure etc._@param beanFactory the associated factory_@return the shortcut result if any, or {@code null} if none_@throws BeansException if the shortcut could not be obtained_@since 4.3.1;@Nullable_	public Object resolveShortcut(BeanFactory beanFactory) throws BeansException {_		return null__	};resolve,a,shortcut,for,this,dependency,against,the,given,factory,for,example,taking,some,pre,resolved,information,into,account,p,the,resolution,algorithm,will,first,attempt,to,resolve,a,shortcut,through,this,method,before,going,into,the,regular,type,matching,algorithm,across,all,beans,subclasses,may,override,this,method,to,improve,resolution,performance,based,on,pre,cached,information,while,still,receiving,link,injection,point,exposure,etc,param,bean,factory,the,associated,factory,return,the,shortcut,result,if,any,or,code,null,if,none,throws,beans,exception,if,the,shortcut,could,not,be,obtained,since,4,3,1;nullable,public,object,resolve,shortcut,bean,factory,bean,factory,throws,beans,exception,return,null
DependencyDescriptor -> @Nullable 	public Object resolveShortcut(BeanFactory beanFactory) throws BeansException;1506551472;Resolve a shortcut for this dependency against the given factory, for example_taking some pre-resolved information into account._<p>The resolution algorithm will first attempt to resolve a shortcut through this_method before going into the regular type matching algorithm across all beans._Subclasses may override this method to improve resolution performance based on_pre-cached information while still receiving {@link InjectionPoint} exposure etc._@param beanFactory the associated factory_@return the shortcut result if any, or {@code null} if none_@throws BeansException if the shortcut could not be obtained_@since 4.3.1;@Nullable_	public Object resolveShortcut(BeanFactory beanFactory) throws BeansException {_		return null__	};resolve,a,shortcut,for,this,dependency,against,the,given,factory,for,example,taking,some,pre,resolved,information,into,account,p,the,resolution,algorithm,will,first,attempt,to,resolve,a,shortcut,through,this,method,before,going,into,the,regular,type,matching,algorithm,across,all,beans,subclasses,may,override,this,method,to,improve,resolution,performance,based,on,pre,cached,information,while,still,receiving,link,injection,point,exposure,etc,param,bean,factory,the,associated,factory,return,the,shortcut,result,if,any,or,code,null,if,none,throws,beans,exception,if,the,shortcut,could,not,be,obtained,since,4,3,1;nullable,public,object,resolve,shortcut,bean,factory,bean,factory,throws,beans,exception,return,null
DependencyDescriptor -> @Nullable 	public Object resolveShortcut(BeanFactory beanFactory) throws BeansException;1530174524;Resolve a shortcut for this dependency against the given factory, for example_taking some pre-resolved information into account._<p>The resolution algorithm will first attempt to resolve a shortcut through this_method before going into the regular type matching algorithm across all beans._Subclasses may override this method to improve resolution performance based on_pre-cached information while still receiving {@link InjectionPoint} exposure etc._@param beanFactory the associated factory_@return the shortcut result if any, or {@code null} if none_@throws BeansException if the shortcut could not be obtained_@since 4.3.1;@Nullable_	public Object resolveShortcut(BeanFactory beanFactory) throws BeansException {_		return null__	};resolve,a,shortcut,for,this,dependency,against,the,given,factory,for,example,taking,some,pre,resolved,information,into,account,p,the,resolution,algorithm,will,first,attempt,to,resolve,a,shortcut,through,this,method,before,going,into,the,regular,type,matching,algorithm,across,all,beans,subclasses,may,override,this,method,to,improve,resolution,performance,based,on,pre,cached,information,while,still,receiving,link,injection,point,exposure,etc,param,bean,factory,the,associated,factory,return,the,shortcut,result,if,any,or,code,null,if,none,throws,beans,exception,if,the,shortcut,could,not,be,obtained,since,4,3,1;nullable,public,object,resolve,shortcut,bean,factory,bean,factory,throws,beans,exception,return,null
DependencyDescriptor -> @Nullable 	public Object resolveShortcut(BeanFactory beanFactory) throws BeansException;1530198749;Resolve a shortcut for this dependency against the given factory, for example_taking some pre-resolved information into account._<p>The resolution algorithm will first attempt to resolve a shortcut through this_method before going into the regular type matching algorithm across all beans._Subclasses may override this method to improve resolution performance based on_pre-cached information while still receiving {@link InjectionPoint} exposure etc._@param beanFactory the associated factory_@return the shortcut result if any, or {@code null} if none_@throws BeansException if the shortcut could not be obtained_@since 4.3.1;@Nullable_	public Object resolveShortcut(BeanFactory beanFactory) throws BeansException {_		return null__	};resolve,a,shortcut,for,this,dependency,against,the,given,factory,for,example,taking,some,pre,resolved,information,into,account,p,the,resolution,algorithm,will,first,attempt,to,resolve,a,shortcut,through,this,method,before,going,into,the,regular,type,matching,algorithm,across,all,beans,subclasses,may,override,this,method,to,improve,resolution,performance,based,on,pre,cached,information,while,still,receiving,link,injection,point,exposure,etc,param,bean,factory,the,associated,factory,return,the,shortcut,result,if,any,or,code,null,if,none,throws,beans,exception,if,the,shortcut,could,not,be,obtained,since,4,3,1;nullable,public,object,resolve,shortcut,bean,factory,bean,factory,throws,beans,exception,return,null
DependencyDescriptor -> @Nullable 	public Object resolveShortcut(BeanFactory beanFactory) throws BeansException;1530201727;Resolve a shortcut for this dependency against the given factory, for example_taking some pre-resolved information into account._<p>The resolution algorithm will first attempt to resolve a shortcut through this_method before going into the regular type matching algorithm across all beans._Subclasses may override this method to improve resolution performance based on_pre-cached information while still receiving {@link InjectionPoint} exposure etc._@param beanFactory the associated factory_@return the shortcut result if any, or {@code null} if none_@throws BeansException if the shortcut could not be obtained_@since 4.3.1;@Nullable_	public Object resolveShortcut(BeanFactory beanFactory) throws BeansException {_		return null__	};resolve,a,shortcut,for,this,dependency,against,the,given,factory,for,example,taking,some,pre,resolved,information,into,account,p,the,resolution,algorithm,will,first,attempt,to,resolve,a,shortcut,through,this,method,before,going,into,the,regular,type,matching,algorithm,across,all,beans,subclasses,may,override,this,method,to,improve,resolution,performance,based,on,pre,cached,information,while,still,receiving,link,injection,point,exposure,etc,param,bean,factory,the,associated,factory,return,the,shortcut,result,if,any,or,code,null,if,none,throws,beans,exception,if,the,shortcut,could,not,be,obtained,since,4,3,1;nullable,public,object,resolve,shortcut,bean,factory,bean,factory,throws,beans,exception,return,null
DependencyDescriptor -> @Nullable 	public Object resolveShortcut(BeanFactory beanFactory) throws BeansException;1532274593;Resolve a shortcut for this dependency against the given factory, for example_taking some pre-resolved information into account._<p>The resolution algorithm will first attempt to resolve a shortcut through this_method before going into the regular type matching algorithm across all beans._Subclasses may override this method to improve resolution performance based on_pre-cached information while still receiving {@link InjectionPoint} exposure etc._@param beanFactory the associated factory_@return the shortcut result if any, or {@code null} if none_@throws BeansException if the shortcut could not be obtained_@since 4.3.1;@Nullable_	public Object resolveShortcut(BeanFactory beanFactory) throws BeansException {_		return null__	};resolve,a,shortcut,for,this,dependency,against,the,given,factory,for,example,taking,some,pre,resolved,information,into,account,p,the,resolution,algorithm,will,first,attempt,to,resolve,a,shortcut,through,this,method,before,going,into,the,regular,type,matching,algorithm,across,all,beans,subclasses,may,override,this,method,to,improve,resolution,performance,based,on,pre,cached,information,while,still,receiving,link,injection,point,exposure,etc,param,bean,factory,the,associated,factory,return,the,shortcut,result,if,any,or,code,null,if,none,throws,beans,exception,if,the,shortcut,could,not,be,obtained,since,4,3,1;nullable,public,object,resolve,shortcut,bean,factory,bean,factory,throws,beans,exception,return,null
DependencyDescriptor -> @Nullable 	public Object resolveShortcut(BeanFactory beanFactory) throws BeansException;1532332488;Resolve a shortcut for this dependency against the given factory, for example_taking some pre-resolved information into account._<p>The resolution algorithm will first attempt to resolve a shortcut through this_method before going into the regular type matching algorithm across all beans._Subclasses may override this method to improve resolution performance based on_pre-cached information while still receiving {@link InjectionPoint} exposure etc._@param beanFactory the associated factory_@return the shortcut result if any, or {@code null} if none_@throws BeansException if the shortcut could not be obtained_@since 4.3.1;@Nullable_	public Object resolveShortcut(BeanFactory beanFactory) throws BeansException {_		return null__	};resolve,a,shortcut,for,this,dependency,against,the,given,factory,for,example,taking,some,pre,resolved,information,into,account,p,the,resolution,algorithm,will,first,attempt,to,resolve,a,shortcut,through,this,method,before,going,into,the,regular,type,matching,algorithm,across,all,beans,subclasses,may,override,this,method,to,improve,resolution,performance,based,on,pre,cached,information,while,still,receiving,link,injection,point,exposure,etc,param,bean,factory,the,associated,factory,return,the,shortcut,result,if,any,or,code,null,if,none,throws,beans,exception,if,the,shortcut,could,not,be,obtained,since,4,3,1;nullable,public,object,resolve,shortcut,bean,factory,bean,factory,throws,beans,exception,return,null
DependencyDescriptor -> @Nullable 	public Object resolveShortcut(BeanFactory beanFactory) throws BeansException;1532385723;Resolve a shortcut for this dependency against the given factory, for example_taking some pre-resolved information into account._<p>The resolution algorithm will first attempt to resolve a shortcut through this_method before going into the regular type matching algorithm across all beans._Subclasses may override this method to improve resolution performance based on_pre-cached information while still receiving {@link InjectionPoint} exposure etc._@param beanFactory the associated factory_@return the shortcut result if any, or {@code null} if none_@throws BeansException if the shortcut could not be obtained_@since 4.3.1;@Nullable_	public Object resolveShortcut(BeanFactory beanFactory) throws BeansException {_		return null__	};resolve,a,shortcut,for,this,dependency,against,the,given,factory,for,example,taking,some,pre,resolved,information,into,account,p,the,resolution,algorithm,will,first,attempt,to,resolve,a,shortcut,through,this,method,before,going,into,the,regular,type,matching,algorithm,across,all,beans,subclasses,may,override,this,method,to,improve,resolution,performance,based,on,pre,cached,information,while,still,receiving,link,injection,point,exposure,etc,param,bean,factory,the,associated,factory,return,the,shortcut,result,if,any,or,code,null,if,none,throws,beans,exception,if,the,shortcut,could,not,be,obtained,since,4,3,1;nullable,public,object,resolve,shortcut,bean,factory,bean,factory,throws,beans,exception,return,null
DependencyDescriptor -> @Nullable 	public Object resolveShortcut(BeanFactory beanFactory) throws BeansException;1535039984;Resolve a shortcut for this dependency against the given factory, for example_taking some pre-resolved information into account._<p>The resolution algorithm will first attempt to resolve a shortcut through this_method before going into the regular type matching algorithm across all beans._Subclasses may override this method to improve resolution performance based on_pre-cached information while still receiving {@link InjectionPoint} exposure etc._@param beanFactory the associated factory_@return the shortcut result if any, or {@code null} if none_@throws BeansException if the shortcut could not be obtained_@since 4.3.1;@Nullable_	public Object resolveShortcut(BeanFactory beanFactory) throws BeansException {_		return null__	};resolve,a,shortcut,for,this,dependency,against,the,given,factory,for,example,taking,some,pre,resolved,information,into,account,p,the,resolution,algorithm,will,first,attempt,to,resolve,a,shortcut,through,this,method,before,going,into,the,regular,type,matching,algorithm,across,all,beans,subclasses,may,override,this,method,to,improve,resolution,performance,based,on,pre,cached,information,while,still,receiving,link,injection,point,exposure,etc,param,bean,factory,the,associated,factory,return,the,shortcut,result,if,any,or,code,null,if,none,throws,beans,exception,if,the,shortcut,could,not,be,obtained,since,4,3,1;nullable,public,object,resolve,shortcut,bean,factory,bean,factory,throws,beans,exception,return,null
DependencyDescriptor -> @Nullable 	public Object resolveShortcut(BeanFactory beanFactory) throws BeansException;1536855799;Resolve a shortcut for this dependency against the given factory, for example_taking some pre-resolved information into account._<p>The resolution algorithm will first attempt to resolve a shortcut through this_method before going into the regular type matching algorithm across all beans._Subclasses may override this method to improve resolution performance based on_pre-cached information while still receiving {@link InjectionPoint} exposure etc._@param beanFactory the associated factory_@return the shortcut result if any, or {@code null} if none_@throws BeansException if the shortcut could not be obtained_@since 4.3.1;@Nullable_	public Object resolveShortcut(BeanFactory beanFactory) throws BeansException {_		return null__	};resolve,a,shortcut,for,this,dependency,against,the,given,factory,for,example,taking,some,pre,resolved,information,into,account,p,the,resolution,algorithm,will,first,attempt,to,resolve,a,shortcut,through,this,method,before,going,into,the,regular,type,matching,algorithm,across,all,beans,subclasses,may,override,this,method,to,improve,resolution,performance,based,on,pre,cached,information,while,still,receiving,link,injection,point,exposure,etc,param,bean,factory,the,associated,factory,return,the,shortcut,result,if,any,or,code,null,if,none,throws,beans,exception,if,the,shortcut,could,not,be,obtained,since,4,3,1;nullable,public,object,resolve,shortcut,bean,factory,bean,factory,throws,beans,exception,return,null
DependencyDescriptor -> @Nullable 	public Object resolveShortcut(BeanFactory beanFactory) throws BeansException;1546963887;Resolve a shortcut for this dependency against the given factory, for example_taking some pre-resolved information into account._<p>The resolution algorithm will first attempt to resolve a shortcut through this_method before going into the regular type matching algorithm across all beans._Subclasses may override this method to improve resolution performance based on_pre-cached information while still receiving {@link InjectionPoint} exposure etc._@param beanFactory the associated factory_@return the shortcut result if any, or {@code null} if none_@throws BeansException if the shortcut could not be obtained_@since 4.3.1;@Nullable_	public Object resolveShortcut(BeanFactory beanFactory) throws BeansException {_		return null__	};resolve,a,shortcut,for,this,dependency,against,the,given,factory,for,example,taking,some,pre,resolved,information,into,account,p,the,resolution,algorithm,will,first,attempt,to,resolve,a,shortcut,through,this,method,before,going,into,the,regular,type,matching,algorithm,across,all,beans,subclasses,may,override,this,method,to,improve,resolution,performance,based,on,pre,cached,information,while,still,receiving,link,injection,point,exposure,etc,param,bean,factory,the,associated,factory,return,the,shortcut,result,if,any,or,code,null,if,none,throws,beans,exception,if,the,shortcut,could,not,be,obtained,since,4,3,1;nullable,public,object,resolve,shortcut,bean,factory,bean,factory,throws,beans,exception,return,null
DependencyDescriptor -> public Object resolveShortcut(BeanFactory beanFactory) throws BeansException;1469030751;Resolve a shortcut for this dependency against the given factory, for example_taking some pre-resolved information into account._<p>The resolution algorithm will first attempt to resolve a shortcut through this_method before going into the regular type matching algorithm across all beans._Subclasses may override this method to improve resolution performance based on_pre-cached information while still receiving {@link InjectionPoint} exposure etc._@param beanFactory the associated factory_@return the shortcut result if any, or {@code null} if none_@throws BeansException if the shortcut could not be obtained_@since 4.3.1;public Object resolveShortcut(BeanFactory beanFactory) throws BeansException {_		return null__	};resolve,a,shortcut,for,this,dependency,against,the,given,factory,for,example,taking,some,pre,resolved,information,into,account,p,the,resolution,algorithm,will,first,attempt,to,resolve,a,shortcut,through,this,method,before,going,into,the,regular,type,matching,algorithm,across,all,beans,subclasses,may,override,this,method,to,improve,resolution,performance,based,on,pre,cached,information,while,still,receiving,link,injection,point,exposure,etc,param,bean,factory,the,associated,factory,return,the,shortcut,result,if,any,or,code,null,if,none,throws,beans,exception,if,the,shortcut,could,not,be,obtained,since,4,3,1;public,object,resolve,shortcut,bean,factory,bean,factory,throws,beans,exception,return,null
DependencyDescriptor -> public Object resolveShortcut(BeanFactory beanFactory) throws BeansException;1481647138;Resolve a shortcut for this dependency against the given factory, for example_taking some pre-resolved information into account._<p>The resolution algorithm will first attempt to resolve a shortcut through this_method before going into the regular type matching algorithm across all beans._Subclasses may override this method to improve resolution performance based on_pre-cached information while still receiving {@link InjectionPoint} exposure etc._@param beanFactory the associated factory_@return the shortcut result if any, or {@code null} if none_@throws BeansException if the shortcut could not be obtained_@since 4.3.1;public Object resolveShortcut(BeanFactory beanFactory) throws BeansException {_		return null__	};resolve,a,shortcut,for,this,dependency,against,the,given,factory,for,example,taking,some,pre,resolved,information,into,account,p,the,resolution,algorithm,will,first,attempt,to,resolve,a,shortcut,through,this,method,before,going,into,the,regular,type,matching,algorithm,across,all,beans,subclasses,may,override,this,method,to,improve,resolution,performance,based,on,pre,cached,information,while,still,receiving,link,injection,point,exposure,etc,param,bean,factory,the,associated,factory,return,the,shortcut,result,if,any,or,code,null,if,none,throws,beans,exception,if,the,shortcut,could,not,be,obtained,since,4,3,1;public,object,resolve,shortcut,bean,factory,bean,factory,throws,beans,exception,return,null
DependencyDescriptor -> public Object resolveShortcut(BeanFactory beanFactory) throws BeansException;1482091448;Resolve a shortcut for this dependency against the given factory, for example_taking some pre-resolved information into account._<p>The resolution algorithm will first attempt to resolve a shortcut through this_method before going into the regular type matching algorithm across all beans._Subclasses may override this method to improve resolution performance based on_pre-cached information while still receiving {@link InjectionPoint} exposure etc._@param beanFactory the associated factory_@return the shortcut result if any, or {@code null} if none_@throws BeansException if the shortcut could not be obtained_@since 4.3.1;public Object resolveShortcut(BeanFactory beanFactory) throws BeansException {_		return null__	};resolve,a,shortcut,for,this,dependency,against,the,given,factory,for,example,taking,some,pre,resolved,information,into,account,p,the,resolution,algorithm,will,first,attempt,to,resolve,a,shortcut,through,this,method,before,going,into,the,regular,type,matching,algorithm,across,all,beans,subclasses,may,override,this,method,to,improve,resolution,performance,based,on,pre,cached,information,while,still,receiving,link,injection,point,exposure,etc,param,bean,factory,the,associated,factory,return,the,shortcut,result,if,any,or,code,null,if,none,throws,beans,exception,if,the,shortcut,could,not,be,obtained,since,4,3,1;public,object,resolve,shortcut,bean,factory,bean,factory,throws,beans,exception,return,null
DependencyDescriptor -> public Object resolveShortcut(BeanFactory beanFactory) throws BeansException;1485277217;Resolve a shortcut for this dependency against the given factory, for example_taking some pre-resolved information into account._<p>The resolution algorithm will first attempt to resolve a shortcut through this_method before going into the regular type matching algorithm across all beans._Subclasses may override this method to improve resolution performance based on_pre-cached information while still receiving {@link InjectionPoint} exposure etc._@param beanFactory the associated factory_@return the shortcut result if any, or {@code null} if none_@throws BeansException if the shortcut could not be obtained_@since 4.3.1;public Object resolveShortcut(BeanFactory beanFactory) throws BeansException {_		return null__	};resolve,a,shortcut,for,this,dependency,against,the,given,factory,for,example,taking,some,pre,resolved,information,into,account,p,the,resolution,algorithm,will,first,attempt,to,resolve,a,shortcut,through,this,method,before,going,into,the,regular,type,matching,algorithm,across,all,beans,subclasses,may,override,this,method,to,improve,resolution,performance,based,on,pre,cached,information,while,still,receiving,link,injection,point,exposure,etc,param,bean,factory,the,associated,factory,return,the,shortcut,result,if,any,or,code,null,if,none,throws,beans,exception,if,the,shortcut,could,not,be,obtained,since,4,3,1;public,object,resolve,shortcut,bean,factory,bean,factory,throws,beans,exception,return,null
DependencyDescriptor -> public Object resolveShortcut(BeanFactory beanFactory) throws BeansException;1485300605;Resolve a shortcut for this dependency against the given factory, for example_taking some pre-resolved information into account._<p>The resolution algorithm will first attempt to resolve a shortcut through this_method before going into the regular type matching algorithm across all beans._Subclasses may override this method to improve resolution performance based on_pre-cached information while still receiving {@link InjectionPoint} exposure etc._@param beanFactory the associated factory_@return the shortcut result if any, or {@code null} if none_@throws BeansException if the shortcut could not be obtained_@since 4.3.1;public Object resolveShortcut(BeanFactory beanFactory) throws BeansException {_		return null__	};resolve,a,shortcut,for,this,dependency,against,the,given,factory,for,example,taking,some,pre,resolved,information,into,account,p,the,resolution,algorithm,will,first,attempt,to,resolve,a,shortcut,through,this,method,before,going,into,the,regular,type,matching,algorithm,across,all,beans,subclasses,may,override,this,method,to,improve,resolution,performance,based,on,pre,cached,information,while,still,receiving,link,injection,point,exposure,etc,param,bean,factory,the,associated,factory,return,the,shortcut,result,if,any,or,code,null,if,none,throws,beans,exception,if,the,shortcut,could,not,be,obtained,since,4,3,1;public,object,resolve,shortcut,bean,factory,bean,factory,throws,beans,exception,return,null
DependencyDescriptor -> public Object resolveCandidate(String beanName, BeanFactory beanFactory);1455889195;Resolve the specified bean name, as a candidate result of the matching_algorithm for this dependency, to a bean instance from the given factory._<p>The default implementation calls {@link BeanFactory#getBean(String)}._Subclasses may provide additional arguments or other customizations._@param beanName the bean name, as a candidate result for this dependency_@param beanFactory the associated factory_@return the bean instance (never {@code null})_@see BeanFactory#getBean(String);public Object resolveCandidate(String beanName, BeanFactory beanFactory) {_		return beanFactory.getBean(beanName)__	};resolve,the,specified,bean,name,as,a,candidate,result,of,the,matching,algorithm,for,this,dependency,to,a,bean,instance,from,the,given,factory,p,the,default,implementation,calls,link,bean,factory,get,bean,string,subclasses,may,provide,additional,arguments,or,other,customizations,param,bean,name,the,bean,name,as,a,candidate,result,for,this,dependency,param,bean,factory,the,associated,factory,return,the,bean,instance,never,code,null,see,bean,factory,get,bean,string;public,object,resolve,candidate,string,bean,name,bean,factory,bean,factory,return,bean,factory,get,bean,bean,name
DependencyDescriptor -> public Object resolveCandidate(String beanName, BeanFactory beanFactory);1456432609;Resolve the specified bean name, as a candidate result of the matching_algorithm for this dependency, to a bean instance from the given factory._<p>The default implementation calls {@link BeanFactory#getBean(String)}._Subclasses may provide additional arguments or other customizations._@param beanName the bean name, as a candidate result for this dependency_@param beanFactory the associated factory_@return the bean instance (never {@code null})_@see BeanFactory#getBean(String);public Object resolveCandidate(String beanName, BeanFactory beanFactory) {_		return beanFactory.getBean(beanName)__	};resolve,the,specified,bean,name,as,a,candidate,result,of,the,matching,algorithm,for,this,dependency,to,a,bean,instance,from,the,given,factory,p,the,default,implementation,calls,link,bean,factory,get,bean,string,subclasses,may,provide,additional,arguments,or,other,customizations,param,bean,name,the,bean,name,as,a,candidate,result,for,this,dependency,param,bean,factory,the,associated,factory,return,the,bean,instance,never,code,null,see,bean,factory,get,bean,string;public,object,resolve,candidate,string,bean,name,bean,factory,bean,factory,return,bean,factory,get,bean,bean,name
DependencyDescriptor -> public Object resolveCandidate(String beanName, BeanFactory beanFactory);1458755547;Resolve the specified bean name, as a candidate result of the matching_algorithm for this dependency, to a bean instance from the given factory._<p>The default implementation calls {@link BeanFactory#getBean(String)}._Subclasses may provide additional arguments or other customizations._@param beanName the bean name, as a candidate result for this dependency_@param beanFactory the associated factory_@return the bean instance (never {@code null})_@since 4.3_@see BeanFactory#getBean(String);public Object resolveCandidate(String beanName, BeanFactory beanFactory) {_		return beanFactory.getBean(beanName)__	};resolve,the,specified,bean,name,as,a,candidate,result,of,the,matching,algorithm,for,this,dependency,to,a,bean,instance,from,the,given,factory,p,the,default,implementation,calls,link,bean,factory,get,bean,string,subclasses,may,provide,additional,arguments,or,other,customizations,param,bean,name,the,bean,name,as,a,candidate,result,for,this,dependency,param,bean,factory,the,associated,factory,return,the,bean,instance,never,code,null,since,4,3,see,bean,factory,get,bean,string;public,object,resolve,candidate,string,bean,name,bean,factory,bean,factory,return,bean,factory,get,bean,bean,name
DependencyDescriptor -> public Object resolveCandidate(String beanName, BeanFactory beanFactory);1466893134;Resolve the specified bean name, as a candidate result of the matching_algorithm for this dependency, to a bean instance from the given factory._<p>The default implementation calls {@link BeanFactory#getBean(String)}._Subclasses may provide additional arguments or other customizations._@param beanName the bean name, as a candidate result for this dependency_@param beanFactory the associated factory_@return the bean instance (never {@code null})_@since 4.3_@see BeanFactory#getBean(String);public Object resolveCandidate(String beanName, BeanFactory beanFactory) {_		return beanFactory.getBean(beanName)__	};resolve,the,specified,bean,name,as,a,candidate,result,of,the,matching,algorithm,for,this,dependency,to,a,bean,instance,from,the,given,factory,p,the,default,implementation,calls,link,bean,factory,get,bean,string,subclasses,may,provide,additional,arguments,or,other,customizations,param,bean,name,the,bean,name,as,a,candidate,result,for,this,dependency,param,bean,factory,the,associated,factory,return,the,bean,instance,never,code,null,since,4,3,see,bean,factory,get,bean,string;public,object,resolve,candidate,string,bean,name,bean,factory,bean,factory,return,bean,factory,get,bean,bean,name
DependencyDescriptor -> public void setContainingClass(Class<?> containingClass);1381788683;Optionally set the concrete class that contains this dependency._This may differ from the class that declares the parameter/field in that_it may be a subclass thereof, potentially substituting type variables.;public void setContainingClass(Class<?> containingClass) {_		this.containingClass = containingClass__		if (this.methodParameter != null) {_			GenericTypeResolver.resolveParameterType(this.methodParameter, containingClass)__		}_	};optionally,set,the,concrete,class,that,contains,this,dependency,this,may,differ,from,the,class,that,declares,the,parameter,field,in,that,it,may,be,a,subclass,thereof,potentially,substituting,type,variables;public,void,set,containing,class,class,containing,class,this,containing,class,containing,class,if,this,method,parameter,null,generic,type,resolver,resolve,parameter,type,this,method,parameter,containing,class
DependencyDescriptor -> public void setContainingClass(Class<?> containingClass);1382716358;Optionally set the concrete class that contains this dependency._This may differ from the class that declares the parameter/field in that_it may be a subclass thereof, potentially substituting type variables.;public void setContainingClass(Class<?> containingClass) {_		this.containingClass = containingClass__		if (this.methodParameter != null) {_			GenericTypeResolver.resolveParameterType(this.methodParameter, containingClass)__		}_	};optionally,set,the,concrete,class,that,contains,this,dependency,this,may,differ,from,the,class,that,declares,the,parameter,field,in,that,it,may,be,a,subclass,thereof,potentially,substituting,type,variables;public,void,set,containing,class,class,containing,class,this,containing,class,containing,class,if,this,method,parameter,null,generic,type,resolver,resolve,parameter,type,this,method,parameter,containing,class
DependencyDescriptor -> public void setContainingClass(Class<?> containingClass);1385412762;Optionally set the concrete class that contains this dependency._This may differ from the class that declares the parameter/field in that_it may be a subclass thereof, potentially substituting type variables.;public void setContainingClass(Class<?> containingClass) {_		this.containingClass = containingClass__		if (this.methodParameter != null) {_			GenericTypeResolver.resolveParameterType(this.methodParameter, containingClass)__		}_	};optionally,set,the,concrete,class,that,contains,this,dependency,this,may,differ,from,the,class,that,declares,the,parameter,field,in,that,it,may,be,a,subclass,thereof,potentially,substituting,type,variables;public,void,set,containing,class,class,containing,class,this,containing,class,containing,class,if,this,method,parameter,null,generic,type,resolver,resolve,parameter,type,this,method,parameter,containing,class
DependencyDescriptor -> public void setContainingClass(Class<?> containingClass);1402061390;Optionally set the concrete class that contains this dependency._This may differ from the class that declares the parameter/field in that_it may be a subclass thereof, potentially substituting type variables.;public void setContainingClass(Class<?> containingClass) {_		this.containingClass = containingClass__		if (this.methodParameter != null) {_			GenericTypeResolver.resolveParameterType(this.methodParameter, containingClass)__		}_	};optionally,set,the,concrete,class,that,contains,this,dependency,this,may,differ,from,the,class,that,declares,the,parameter,field,in,that,it,may,be,a,subclass,thereof,potentially,substituting,type,variables;public,void,set,containing,class,class,containing,class,this,containing,class,containing,class,if,this,method,parameter,null,generic,type,resolver,resolve,parameter,type,this,method,parameter,containing,class
DependencyDescriptor -> public void setContainingClass(Class<?> containingClass);1452685925;Optionally set the concrete class that contains this dependency._This may differ from the class that declares the parameter/field in that_it may be a subclass thereof, potentially substituting type variables._@since 4.0;public void setContainingClass(Class<?> containingClass) {_		this.containingClass = containingClass__		if (this.methodParameter != null) {_			GenericTypeResolver.resolveParameterType(this.methodParameter, containingClass)__		}_	};optionally,set,the,concrete,class,that,contains,this,dependency,this,may,differ,from,the,class,that,declares,the,parameter,field,in,that,it,may,be,a,subclass,thereof,potentially,substituting,type,variables,since,4,0;public,void,set,containing,class,class,containing,class,this,containing,class,containing,class,if,this,method,parameter,null,generic,type,resolver,resolve,parameter,type,this,method,parameter,containing,class
DependencyDescriptor -> public void setContainingClass(Class<?> containingClass);1455295525;Optionally set the concrete class that contains this dependency._This may differ from the class that declares the parameter/field in that_it may be a subclass thereof, potentially substituting type variables._@since 4.0;public void setContainingClass(Class<?> containingClass) {_		this.containingClass = containingClass__		if (this.methodParameter != null) {_			GenericTypeResolver.resolveParameterType(this.methodParameter, containingClass)__		}_	};optionally,set,the,concrete,class,that,contains,this,dependency,this,may,differ,from,the,class,that,declares,the,parameter,field,in,that,it,may,be,a,subclass,thereof,potentially,substituting,type,variables,since,4,0;public,void,set,containing,class,class,containing,class,this,containing,class,containing,class,if,this,method,parameter,null,generic,type,resolver,resolve,parameter,type,this,method,parameter,containing,class
DependencyDescriptor -> public void setContainingClass(Class<?> containingClass);1455889195;Optionally set the concrete class that contains this dependency._This may differ from the class that declares the parameter/field in that_it may be a subclass thereof, potentially substituting type variables._@since 4.0;public void setContainingClass(Class<?> containingClass) {_		this.containingClass = containingClass__		if (this.methodParameter != null) {_			GenericTypeResolver.resolveParameterType(this.methodParameter, containingClass)__		}_	};optionally,set,the,concrete,class,that,contains,this,dependency,this,may,differ,from,the,class,that,declares,the,parameter,field,in,that,it,may,be,a,subclass,thereof,potentially,substituting,type,variables,since,4,0;public,void,set,containing,class,class,containing,class,this,containing,class,containing,class,if,this,method,parameter,null,generic,type,resolver,resolve,parameter,type,this,method,parameter,containing,class
DependencyDescriptor -> public void setContainingClass(Class<?> containingClass);1456432609;Optionally set the concrete class that contains this dependency._This may differ from the class that declares the parameter/field in that_it may be a subclass thereof, potentially substituting type variables._@since 4.0;public void setContainingClass(Class<?> containingClass) {_		this.containingClass = containingClass__		if (this.methodParameter != null) {_			GenericTypeResolver.resolveParameterType(this.methodParameter, containingClass)__		}_	};optionally,set,the,concrete,class,that,contains,this,dependency,this,may,differ,from,the,class,that,declares,the,parameter,field,in,that,it,may,be,a,subclass,thereof,potentially,substituting,type,variables,since,4,0;public,void,set,containing,class,class,containing,class,this,containing,class,containing,class,if,this,method,parameter,null,generic,type,resolver,resolve,parameter,type,this,method,parameter,containing,class
DependencyDescriptor -> public void setContainingClass(Class<?> containingClass);1458755547;Optionally set the concrete class that contains this dependency._This may differ from the class that declares the parameter/field in that_it may be a subclass thereof, potentially substituting type variables._@since 4.0;public void setContainingClass(Class<?> containingClass) {_		this.containingClass = containingClass__		if (this.methodParameter != null) {_			GenericTypeResolver.resolveParameterType(this.methodParameter, containingClass)__		}_	};optionally,set,the,concrete,class,that,contains,this,dependency,this,may,differ,from,the,class,that,declares,the,parameter,field,in,that,it,may,be,a,subclass,thereof,potentially,substituting,type,variables,since,4,0;public,void,set,containing,class,class,containing,class,this,containing,class,containing,class,if,this,method,parameter,null,generic,type,resolver,resolve,parameter,type,this,method,parameter,containing,class
DependencyDescriptor -> public void setContainingClass(Class<?> containingClass);1466893134;Optionally set the concrete class that contains this dependency._This may differ from the class that declares the parameter/field in that_it may be a subclass thereof, potentially substituting type variables._@since 4.0;public void setContainingClass(Class<?> containingClass) {_		this.containingClass = containingClass__		if (this.methodParameter != null) {_			GenericTypeResolver.resolveParameterType(this.methodParameter, containingClass)__		}_	};optionally,set,the,concrete,class,that,contains,this,dependency,this,may,differ,from,the,class,that,declares,the,parameter,field,in,that,it,may,be,a,subclass,thereof,potentially,substituting,type,variables,since,4,0;public,void,set,containing,class,class,containing,class,this,containing,class,containing,class,if,this,method,parameter,null,generic,type,resolver,resolve,parameter,type,this,method,parameter,containing,class
DependencyDescriptor -> public void setContainingClass(Class<?> containingClass);1469030751;Optionally set the concrete class that contains this dependency._This may differ from the class that declares the parameter/field in that_it may be a subclass thereof, potentially substituting type variables._@since 4.0;public void setContainingClass(Class<?> containingClass) {_		this.containingClass = containingClass__		if (this.methodParameter != null) {_			GenericTypeResolver.resolveParameterType(this.methodParameter, containingClass)__		}_	};optionally,set,the,concrete,class,that,contains,this,dependency,this,may,differ,from,the,class,that,declares,the,parameter,field,in,that,it,may,be,a,subclass,thereof,potentially,substituting,type,variables,since,4,0;public,void,set,containing,class,class,containing,class,this,containing,class,containing,class,if,this,method,parameter,null,generic,type,resolver,resolve,parameter,type,this,method,parameter,containing,class
DependencyDescriptor -> public void setContainingClass(Class<?> containingClass);1481647138;Optionally set the concrete class that contains this dependency._This may differ from the class that declares the parameter/field in that_it may be a subclass thereof, potentially substituting type variables._@since 4.0;public void setContainingClass(Class<?> containingClass) {_		this.containingClass = containingClass__		if (this.methodParameter != null) {_			GenericTypeResolver.resolveParameterType(this.methodParameter, containingClass)__		}_	};optionally,set,the,concrete,class,that,contains,this,dependency,this,may,differ,from,the,class,that,declares,the,parameter,field,in,that,it,may,be,a,subclass,thereof,potentially,substituting,type,variables,since,4,0;public,void,set,containing,class,class,containing,class,this,containing,class,containing,class,if,this,method,parameter,null,generic,type,resolver,resolve,parameter,type,this,method,parameter,containing,class
DependencyDescriptor -> public void setContainingClass(Class<?> containingClass);1482091448;Optionally set the concrete class that contains this dependency._This may differ from the class that declares the parameter/field in that_it may be a subclass thereof, potentially substituting type variables._@since 4.0;public void setContainingClass(Class<?> containingClass) {_		this.containingClass = containingClass__		if (this.methodParameter != null) {_			GenericTypeResolver.resolveParameterType(this.methodParameter, containingClass)__		}_	};optionally,set,the,concrete,class,that,contains,this,dependency,this,may,differ,from,the,class,that,declares,the,parameter,field,in,that,it,may,be,a,subclass,thereof,potentially,substituting,type,variables,since,4,0;public,void,set,containing,class,class,containing,class,this,containing,class,containing,class,if,this,method,parameter,null,generic,type,resolver,resolve,parameter,type,this,method,parameter,containing,class
DependencyDescriptor -> public void setContainingClass(Class<?> containingClass);1485277217;Optionally set the concrete class that contains this dependency._This may differ from the class that declares the parameter/field in that_it may be a subclass thereof, potentially substituting type variables._@since 4.0;public void setContainingClass(Class<?> containingClass) {_		this.containingClass = containingClass__		if (this.methodParameter != null) {_			GenericTypeResolver.resolveParameterType(this.methodParameter, containingClass)__		}_	};optionally,set,the,concrete,class,that,contains,this,dependency,this,may,differ,from,the,class,that,declares,the,parameter,field,in,that,it,may,be,a,subclass,thereof,potentially,substituting,type,variables,since,4,0;public,void,set,containing,class,class,containing,class,this,containing,class,containing,class,if,this,method,parameter,null,generic,type,resolver,resolve,parameter,type,this,method,parameter,containing,class
DependencyDescriptor -> public void setContainingClass(Class<?> containingClass);1485300605;Optionally set the concrete class that contains this dependency._This may differ from the class that declares the parameter/field in that_it may be a subclass thereof, potentially substituting type variables._@since 4.0;public void setContainingClass(Class<?> containingClass) {_		this.containingClass = containingClass__		this.resolvableType = null__		if (this.methodParameter != null) {_			GenericTypeResolver.resolveParameterType(this.methodParameter, containingClass)__		}_	};optionally,set,the,concrete,class,that,contains,this,dependency,this,may,differ,from,the,class,that,declares,the,parameter,field,in,that,it,may,be,a,subclass,thereof,potentially,substituting,type,variables,since,4,0;public,void,set,containing,class,class,containing,class,this,containing,class,containing,class,this,resolvable,type,null,if,this,method,parameter,null,generic,type,resolver,resolve,parameter,type,this,method,parameter,containing,class
DependencyDescriptor -> public void setContainingClass(Class<?> containingClass);1495868221;Optionally set the concrete class that contains this dependency._This may differ from the class that declares the parameter/field in that_it may be a subclass thereof, potentially substituting type variables._@since 4.0;public void setContainingClass(Class<?> containingClass) {_		this.containingClass = containingClass__		this.resolvableType = null__		if (this.methodParameter != null) {_			GenericTypeResolver.resolveParameterType(this.methodParameter, containingClass)__		}_	};optionally,set,the,concrete,class,that,contains,this,dependency,this,may,differ,from,the,class,that,declares,the,parameter,field,in,that,it,may,be,a,subclass,thereof,potentially,substituting,type,variables,since,4,0;public,void,set,containing,class,class,containing,class,this,containing,class,containing,class,this,resolvable,type,null,if,this,method,parameter,null,generic,type,resolver,resolve,parameter,type,this,method,parameter,containing,class
DependencyDescriptor -> public void setContainingClass(Class<?> containingClass);1496837955;Optionally set the concrete class that contains this dependency._This may differ from the class that declares the parameter/field in that_it may be a subclass thereof, potentially substituting type variables._@since 4.0;public void setContainingClass(Class<?> containingClass) {_		this.containingClass = containingClass__		this.resolvableType = null__		if (this.methodParameter != null) {_			GenericTypeResolver.resolveParameterType(this.methodParameter, containingClass)__		}_	};optionally,set,the,concrete,class,that,contains,this,dependency,this,may,differ,from,the,class,that,declares,the,parameter,field,in,that,it,may,be,a,subclass,thereof,potentially,substituting,type,variables,since,4,0;public,void,set,containing,class,class,containing,class,this,containing,class,containing,class,this,resolvable,type,null,if,this,method,parameter,null,generic,type,resolver,resolve,parameter,type,this,method,parameter,containing,class
DependencyDescriptor -> public void setContainingClass(Class<?> containingClass);1498780456;Optionally set the concrete class that contains this dependency._This may differ from the class that declares the parameter/field in that_it may be a subclass thereof, potentially substituting type variables._@since 4.0;public void setContainingClass(Class<?> containingClass) {_		this.containingClass = containingClass__		this.resolvableType = null__		if (this.methodParameter != null) {_			GenericTypeResolver.resolveParameterType(this.methodParameter, containingClass)__		}_	};optionally,set,the,concrete,class,that,contains,this,dependency,this,may,differ,from,the,class,that,declares,the,parameter,field,in,that,it,may,be,a,subclass,thereof,potentially,substituting,type,variables,since,4,0;public,void,set,containing,class,class,containing,class,this,containing,class,containing,class,this,resolvable,type,null,if,this,method,parameter,null,generic,type,resolver,resolve,parameter,type,this,method,parameter,containing,class
DependencyDescriptor -> public void setContainingClass(Class<?> containingClass);1503007895;Optionally set the concrete class that contains this dependency._This may differ from the class that declares the parameter/field in that_it may be a subclass thereof, potentially substituting type variables._@since 4.0;public void setContainingClass(Class<?> containingClass) {_		this.containingClass = containingClass__		this.resolvableType = null__		if (this.methodParameter != null) {_			GenericTypeResolver.resolveParameterType(this.methodParameter, containingClass)__		}_	};optionally,set,the,concrete,class,that,contains,this,dependency,this,may,differ,from,the,class,that,declares,the,parameter,field,in,that,it,may,be,a,subclass,thereof,potentially,substituting,type,variables,since,4,0;public,void,set,containing,class,class,containing,class,this,containing,class,containing,class,this,resolvable,type,null,if,this,method,parameter,null,generic,type,resolver,resolve,parameter,type,this,method,parameter,containing,class
DependencyDescriptor -> public void setContainingClass(Class<?> containingClass);1503272000;Optionally set the concrete class that contains this dependency._This may differ from the class that declares the parameter/field in that_it may be a subclass thereof, potentially substituting type variables._@since 4.0;public void setContainingClass(Class<?> containingClass) {_		this.containingClass = containingClass__		this.resolvableType = null__		if (this.methodParameter != null) {_			GenericTypeResolver.resolveParameterType(this.methodParameter, containingClass)__		}_	};optionally,set,the,concrete,class,that,contains,this,dependency,this,may,differ,from,the,class,that,declares,the,parameter,field,in,that,it,may,be,a,subclass,thereof,potentially,substituting,type,variables,since,4,0;public,void,set,containing,class,class,containing,class,this,containing,class,containing,class,this,resolvable,type,null,if,this,method,parameter,null,generic,type,resolver,resolve,parameter,type,this,method,parameter,containing,class
DependencyDescriptor -> public void setContainingClass(Class<?> containingClass);1503411745;Optionally set the concrete class that contains this dependency._This may differ from the class that declares the parameter/field in that_it may be a subclass thereof, potentially substituting type variables._@since 4.0;public void setContainingClass(Class<?> containingClass) {_		this.containingClass = containingClass__		this.resolvableType = null__		if (this.methodParameter != null) {_			GenericTypeResolver.resolveParameterType(this.methodParameter, containingClass)__		}_	};optionally,set,the,concrete,class,that,contains,this,dependency,this,may,differ,from,the,class,that,declares,the,parameter,field,in,that,it,may,be,a,subclass,thereof,potentially,substituting,type,variables,since,4,0;public,void,set,containing,class,class,containing,class,this,containing,class,containing,class,this,resolvable,type,null,if,this,method,parameter,null,generic,type,resolver,resolve,parameter,type,this,method,parameter,containing,class
DependencyDescriptor -> public void setContainingClass(Class<?> containingClass);1506551472;Optionally set the concrete class that contains this dependency._This may differ from the class that declares the parameter/field in that_it may be a subclass thereof, potentially substituting type variables._@since 4.0;public void setContainingClass(Class<?> containingClass) {_		this.containingClass = containingClass__		this.resolvableType = null__		if (this.methodParameter != null) {_			GenericTypeResolver.resolveParameterType(this.methodParameter, containingClass)__		}_	};optionally,set,the,concrete,class,that,contains,this,dependency,this,may,differ,from,the,class,that,declares,the,parameter,field,in,that,it,may,be,a,subclass,thereof,potentially,substituting,type,variables,since,4,0;public,void,set,containing,class,class,containing,class,this,containing,class,containing,class,this,resolvable,type,null,if,this,method,parameter,null,generic,type,resolver,resolve,parameter,type,this,method,parameter,containing,class
DependencyDescriptor -> public void setContainingClass(Class<?> containingClass);1530174524;Optionally set the concrete class that contains this dependency._This may differ from the class that declares the parameter/field in that_it may be a subclass thereof, potentially substituting type variables._@since 4.0;public void setContainingClass(Class<?> containingClass) {_		this.containingClass = containingClass__		this.resolvableType = null__		if (this.methodParameter != null) {_			GenericTypeResolver.resolveParameterType(this.methodParameter, containingClass)__		}_	};optionally,set,the,concrete,class,that,contains,this,dependency,this,may,differ,from,the,class,that,declares,the,parameter,field,in,that,it,may,be,a,subclass,thereof,potentially,substituting,type,variables,since,4,0;public,void,set,containing,class,class,containing,class,this,containing,class,containing,class,this,resolvable,type,null,if,this,method,parameter,null,generic,type,resolver,resolve,parameter,type,this,method,parameter,containing,class
DependencyDescriptor -> public void setContainingClass(Class<?> containingClass);1530198749;Optionally set the concrete class that contains this dependency._This may differ from the class that declares the parameter/field in that_it may be a subclass thereof, potentially substituting type variables._@since 4.0;public void setContainingClass(Class<?> containingClass) {_		this.containingClass = containingClass__		this.resolvableType = null__		if (this.methodParameter != null) {_			GenericTypeResolver.resolveParameterType(this.methodParameter, containingClass)__		}_	};optionally,set,the,concrete,class,that,contains,this,dependency,this,may,differ,from,the,class,that,declares,the,parameter,field,in,that,it,may,be,a,subclass,thereof,potentially,substituting,type,variables,since,4,0;public,void,set,containing,class,class,containing,class,this,containing,class,containing,class,this,resolvable,type,null,if,this,method,parameter,null,generic,type,resolver,resolve,parameter,type,this,method,parameter,containing,class
DependencyDescriptor -> public void setContainingClass(Class<?> containingClass);1530201727;Optionally set the concrete class that contains this dependency._This may differ from the class that declares the parameter/field in that_it may be a subclass thereof, potentially substituting type variables._@since 4.0;public void setContainingClass(Class<?> containingClass) {_		this.containingClass = containingClass__		this.resolvableType = null__		if (this.methodParameter != null) {_			GenericTypeResolver.resolveParameterType(this.methodParameter, containingClass)__		}_	};optionally,set,the,concrete,class,that,contains,this,dependency,this,may,differ,from,the,class,that,declares,the,parameter,field,in,that,it,may,be,a,subclass,thereof,potentially,substituting,type,variables,since,4,0;public,void,set,containing,class,class,containing,class,this,containing,class,containing,class,this,resolvable,type,null,if,this,method,parameter,null,generic,type,resolver,resolve,parameter,type,this,method,parameter,containing,class
DependencyDescriptor -> public void setContainingClass(Class<?> containingClass);1532274593;Optionally set the concrete class that contains this dependency._This may differ from the class that declares the parameter/field in that_it may be a subclass thereof, potentially substituting type variables._@since 4.0;public void setContainingClass(Class<?> containingClass) {_		this.containingClass = containingClass__		this.resolvableType = null__		if (this.methodParameter != null) {_			GenericTypeResolver.resolveParameterType(this.methodParameter, containingClass)__		}_	};optionally,set,the,concrete,class,that,contains,this,dependency,this,may,differ,from,the,class,that,declares,the,parameter,field,in,that,it,may,be,a,subclass,thereof,potentially,substituting,type,variables,since,4,0;public,void,set,containing,class,class,containing,class,this,containing,class,containing,class,this,resolvable,type,null,if,this,method,parameter,null,generic,type,resolver,resolve,parameter,type,this,method,parameter,containing,class
DependencyDescriptor -> public void setContainingClass(Class<?> containingClass);1532332488;Optionally set the concrete class that contains this dependency._This may differ from the class that declares the parameter/field in that_it may be a subclass thereof, potentially substituting type variables._@since 4.0;public void setContainingClass(Class<?> containingClass) {_		this.containingClass = containingClass__		this.resolvableType = null__		if (this.methodParameter != null) {_			GenericTypeResolver.resolveParameterType(this.methodParameter, containingClass)__		}_	};optionally,set,the,concrete,class,that,contains,this,dependency,this,may,differ,from,the,class,that,declares,the,parameter,field,in,that,it,may,be,a,subclass,thereof,potentially,substituting,type,variables,since,4,0;public,void,set,containing,class,class,containing,class,this,containing,class,containing,class,this,resolvable,type,null,if,this,method,parameter,null,generic,type,resolver,resolve,parameter,type,this,method,parameter,containing,class
DependencyDescriptor -> public void setContainingClass(Class<?> containingClass);1532385723;Optionally set the concrete class that contains this dependency._This may differ from the class that declares the parameter/field in that_it may be a subclass thereof, potentially substituting type variables._@since 4.0;public void setContainingClass(Class<?> containingClass) {_		this.containingClass = containingClass__		this.resolvableType = null__		if (this.methodParameter != null) {_			GenericTypeResolver.resolveParameterType(this.methodParameter, containingClass)__		}_	};optionally,set,the,concrete,class,that,contains,this,dependency,this,may,differ,from,the,class,that,declares,the,parameter,field,in,that,it,may,be,a,subclass,thereof,potentially,substituting,type,variables,since,4,0;public,void,set,containing,class,class,containing,class,this,containing,class,containing,class,this,resolvable,type,null,if,this,method,parameter,null,generic,type,resolver,resolve,parameter,type,this,method,parameter,containing,class
DependencyDescriptor -> public void setContainingClass(Class<?> containingClass);1535039984;Optionally set the concrete class that contains this dependency._This may differ from the class that declares the parameter/field in that_it may be a subclass thereof, potentially substituting type variables._@since 4.0;public void setContainingClass(Class<?> containingClass) {_		this.containingClass = containingClass__		this.resolvableType = null__		if (this.methodParameter != null) {_			GenericTypeResolver.resolveParameterType(this.methodParameter, containingClass)__		}_	};optionally,set,the,concrete,class,that,contains,this,dependency,this,may,differ,from,the,class,that,declares,the,parameter,field,in,that,it,may,be,a,subclass,thereof,potentially,substituting,type,variables,since,4,0;public,void,set,containing,class,class,containing,class,this,containing,class,containing,class,this,resolvable,type,null,if,this,method,parameter,null,generic,type,resolver,resolve,parameter,type,this,method,parameter,containing,class
DependencyDescriptor -> public void setContainingClass(Class<?> containingClass);1536855799;Optionally set the concrete class that contains this dependency._This may differ from the class that declares the parameter/field in that_it may be a subclass thereof, potentially substituting type variables._@since 4.0;public void setContainingClass(Class<?> containingClass) {_		this.containingClass = containingClass__		this.resolvableType = null__		if (this.methodParameter != null) {_			GenericTypeResolver.resolveParameterType(this.methodParameter, containingClass)__		}_	};optionally,set,the,concrete,class,that,contains,this,dependency,this,may,differ,from,the,class,that,declares,the,parameter,field,in,that,it,may,be,a,subclass,thereof,potentially,substituting,type,variables,since,4,0;public,void,set,containing,class,class,containing,class,this,containing,class,containing,class,this,resolvable,type,null,if,this,method,parameter,null,generic,type,resolver,resolve,parameter,type,this,method,parameter,containing,class
DependencyDescriptor -> public void setContainingClass(Class<?> containingClass);1546963887;Optionally set the concrete class that contains this dependency._This may differ from the class that declares the parameter/field in that_it may be a subclass thereof, potentially substituting type variables._@since 4.0;public void setContainingClass(Class<?> containingClass) {_		this.containingClass = containingClass__		this.resolvableType = null__		if (this.methodParameter != null) {_			GenericTypeResolver.resolveParameterType(this.methodParameter, containingClass)__		}_	};optionally,set,the,concrete,class,that,contains,this,dependency,this,may,differ,from,the,class,that,declares,the,parameter,field,in,that,it,may,be,a,subclass,thereof,potentially,substituting,type,variables,since,4,0;public,void,set,containing,class,class,containing,class,this,containing,class,containing,class,this,resolvable,type,null,if,this,method,parameter,null,generic,type,resolver,resolve,parameter,type,this,method,parameter,containing,class
DependencyDescriptor -> public boolean isRequired();1328020251;Return whether this dependency is required.;public boolean isRequired() {_		return this.required__	};return,whether,this,dependency,is,required;public,boolean,is,required,return,this,required
DependencyDescriptor -> public boolean isRequired();1329142650;Return whether this dependency is required.;public boolean isRequired() {_		return this.required__	};return,whether,this,dependency,is,required;public,boolean,is,required,return,this,required
DependencyDescriptor -> public boolean isRequired();1346421549;Return whether this dependency is required.;public boolean isRequired() {_		return this.required__	};return,whether,this,dependency,is,required;public,boolean,is,required,return,this,required
DependencyDescriptor -> public boolean isRequired();1350077654;Return whether this dependency is required.;public boolean isRequired() {_		return this.required__	};return,whether,this,dependency,is,required;public,boolean,is,required,return,this,required
DependencyDescriptor -> public boolean isRequired();1356735495;Return whether this dependency is required.;public boolean isRequired() {_		return this.required__	};return,whether,this,dependency,is,required;public,boolean,is,required,return,this,required
DependencyDescriptor -> public boolean isRequired();1377641038;Return whether this dependency is required.;public boolean isRequired() {_		return this.required__	};return,whether,this,dependency,is,required;public,boolean,is,required,return,this,required
DependencyDescriptor -> public boolean isRequired();1381788683;Return whether this dependency is required.;public boolean isRequired() {_		return this.required__	};return,whether,this,dependency,is,required;public,boolean,is,required,return,this,required
DependencyDescriptor -> public boolean isRequired();1382716358;Return whether this dependency is required.;public boolean isRequired() {_		return this.required__	};return,whether,this,dependency,is,required;public,boolean,is,required,return,this,required
DependencyDescriptor -> public boolean isRequired();1385412762;Return whether this dependency is required.;public boolean isRequired() {_		return this.required__	};return,whether,this,dependency,is,required;public,boolean,is,required,return,this,required
DependencyDescriptor -> public boolean isRequired();1402061390;Return whether this dependency is required.;public boolean isRequired() {_		return this.required__	};return,whether,this,dependency,is,required;public,boolean,is,required,return,this,required
DependencyDescriptor -> public boolean isRequired();1452685925;Return whether this dependency is required.;public boolean isRequired() {_		return this.required__	};return,whether,this,dependency,is,required;public,boolean,is,required,return,this,required
DependencyDescriptor -> public boolean isRequired();1455295525;Return whether this dependency is required.;public boolean isRequired() {_		return this.required__	};return,whether,this,dependency,is,required;public,boolean,is,required,return,this,required
DependencyDescriptor -> public boolean isRequired();1455889195;Return whether this dependency is required.;public boolean isRequired() {_		return this.required__	};return,whether,this,dependency,is,required;public,boolean,is,required,return,this,required
DependencyDescriptor -> public boolean isRequired();1456432609;Return whether this dependency is required.;public boolean isRequired() {_		return this.required__	};return,whether,this,dependency,is,required;public,boolean,is,required,return,this,required
DependencyDescriptor -> public boolean isRequired();1458755547;Return whether this dependency is required.;public boolean isRequired() {_		return this.required__	};return,whether,this,dependency,is,required;public,boolean,is,required,return,this,required
DependencyDescriptor -> public boolean isRequired();1466893134;Return whether this dependency is required.;public boolean isRequired() {_		return this.required__	};return,whether,this,dependency,is,required;public,boolean,is,required,return,this,required
DependencyDescriptor -> public boolean isRequired();1469030751;Return whether this dependency is required.;public boolean isRequired() {_		return this.required__	};return,whether,this,dependency,is,required;public,boolean,is,required,return,this,required
DependencyDescriptor -> public boolean isRequired();1481647138;Return whether this dependency is required.;public boolean isRequired() {_		if (!this.required) {_			return false__		}__		if (this.field != null) {_			return !(this.field.getType() == Optional.class ||_					(kotlinPresent && KotlinDelegate.isNullable(this.field)))__		}_		else {_			return !this.methodParameter.isOptional()__		}_	};return,whether,this,dependency,is,required;public,boolean,is,required,if,this,required,return,false,if,this,field,null,return,this,field,get,type,optional,class,kotlin,present,kotlin,delegate,is,nullable,this,field,else,return,this,method,parameter,is,optional
DependencyDescriptor -> public boolean isRequired();1482091448;Return whether this dependency is required._<p>Optional semantics are derived from Java 8's {@link java.util.Optional},_any variant of a parameter-level {@code Nullable} annotation (such as from_JSR-305 or the FindBugs set of annotations), or a language-level nullable_type declaration in Kotlin.;public boolean isRequired() {_		if (!this.required) {_			return false__		}__		if (this.field != null) {_			return !(this.field.getType() == Optional.class || hasNullableAnnotation() ||_					(kotlinPresent && KotlinDelegate.isNullable(this.field)))__		}_		else {_			return !this.methodParameter.isOptional()__		}_	};return,whether,this,dependency,is,required,p,optional,semantics,are,derived,from,java,8,s,link,java,util,optional,any,variant,of,a,parameter,level,code,nullable,annotation,such,as,from,jsr,305,or,the,find,bugs,set,of,annotations,or,a,language,level,nullable,type,declaration,in,kotlin;public,boolean,is,required,if,this,required,return,false,if,this,field,null,return,this,field,get,type,optional,class,has,nullable,annotation,kotlin,present,kotlin,delegate,is,nullable,this,field,else,return,this,method,parameter,is,optional
DependencyDescriptor -> public boolean isRequired();1485277217;Return whether this dependency is required._<p>Optional semantics are derived from Java 8's {@link java.util.Optional},_any variant of a parameter-level {@code Nullable} annotation (such as from_JSR-305 or the FindBugs set of annotations), or a language-level nullable_type declaration in Kotlin.;public boolean isRequired() {_		if (!this.required) {_			return false__		}__		if (this.field != null) {_			return !(this.field.getType() == Optional.class || hasNullableAnnotation() ||_					(kotlinPresent && KotlinDelegate.isNullable(this.field)))__		}_		else {_			return !this.methodParameter.isOptional()__		}_	};return,whether,this,dependency,is,required,p,optional,semantics,are,derived,from,java,8,s,link,java,util,optional,any,variant,of,a,parameter,level,code,nullable,annotation,such,as,from,jsr,305,or,the,find,bugs,set,of,annotations,or,a,language,level,nullable,type,declaration,in,kotlin;public,boolean,is,required,if,this,required,return,false,if,this,field,null,return,this,field,get,type,optional,class,has,nullable,annotation,kotlin,present,kotlin,delegate,is,nullable,this,field,else,return,this,method,parameter,is,optional
DependencyDescriptor -> public boolean isRequired();1485300605;Return whether this dependency is required._<p>Optional semantics are derived from Java 8's {@link java.util.Optional},_any variant of a parameter-level {@code Nullable} annotation (such as from_JSR-305 or the FindBugs set of annotations), or a language-level nullable_type declaration in Kotlin.;public boolean isRequired() {_		if (!this.required) {_			return false__		}__		if (this.field != null) {_			return !(this.field.getType() == Optional.class || hasNullableAnnotation() ||_					(kotlinPresent && KotlinDelegate.isNullable(this.field)))__		}_		else {_			return !this.methodParameter.isOptional()__		}_	};return,whether,this,dependency,is,required,p,optional,semantics,are,derived,from,java,8,s,link,java,util,optional,any,variant,of,a,parameter,level,code,nullable,annotation,such,as,from,jsr,305,or,the,find,bugs,set,of,annotations,or,a,language,level,nullable,type,declaration,in,kotlin;public,boolean,is,required,if,this,required,return,false,if,this,field,null,return,this,field,get,type,optional,class,has,nullable,annotation,kotlin,present,kotlin,delegate,is,nullable,this,field,else,return,this,method,parameter,is,optional
DependencyDescriptor -> public boolean isRequired();1495868221;Return whether this dependency is required._<p>Optional semantics are derived from Java 8's {@link java.util.Optional},_any variant of a parameter-level {@code Nullable} annotation (such as from_JSR-305 or the FindBugs set of annotations), or a language-level nullable_type declaration in Kotlin.;public boolean isRequired() {_		if (!this.required) {_			return false__		}__		if (this.field != null) {_			return !(this.field.getType() == Optional.class || hasNullableAnnotation() ||_					(kotlinPresent && KotlinDelegate.isNullable(this.field)))__		}_		else {_			return !this.methodParameter.isOptional()__		}_	};return,whether,this,dependency,is,required,p,optional,semantics,are,derived,from,java,8,s,link,java,util,optional,any,variant,of,a,parameter,level,code,nullable,annotation,such,as,from,jsr,305,or,the,find,bugs,set,of,annotations,or,a,language,level,nullable,type,declaration,in,kotlin;public,boolean,is,required,if,this,required,return,false,if,this,field,null,return,this,field,get,type,optional,class,has,nullable,annotation,kotlin,present,kotlin,delegate,is,nullable,this,field,else,return,this,method,parameter,is,optional
DependencyDescriptor -> public boolean isRequired();1496837955;Return whether this dependency is required._<p>Optional semantics are derived from Java 8's {@link java.util.Optional},_any variant of a parameter-level {@code Nullable} annotation (such as from_JSR-305 or the FindBugs set of annotations), or a language-level nullable_type declaration in Kotlin.;public boolean isRequired() {_		if (!this.required) {_			return false__		}__		if (this.field != null) {_			return !(this.field.getType() == Optional.class || hasNullableAnnotation() ||_					(kotlinPresent && KotlinDelegate.isNullable(this.field)))__		}_		else {_			return !this.methodParameter.isOptional()__		}_	};return,whether,this,dependency,is,required,p,optional,semantics,are,derived,from,java,8,s,link,java,util,optional,any,variant,of,a,parameter,level,code,nullable,annotation,such,as,from,jsr,305,or,the,find,bugs,set,of,annotations,or,a,language,level,nullable,type,declaration,in,kotlin;public,boolean,is,required,if,this,required,return,false,if,this,field,null,return,this,field,get,type,optional,class,has,nullable,annotation,kotlin,present,kotlin,delegate,is,nullable,this,field,else,return,this,method,parameter,is,optional
DependencyDescriptor -> public boolean isRequired();1498780456;Return whether this dependency is required._<p>Optional semantics are derived from Java 8's {@link java.util.Optional},_any variant of a parameter-level {@code Nullable} annotation (such as from_JSR-305 or the FindBugs set of annotations), or a language-level nullable_type declaration in Kotlin.;public boolean isRequired() {_		if (!this.required) {_			return false__		}__		if (this.field != null) {_			return !(this.field.getType() == Optional.class || hasNullableAnnotation() ||_					(kotlinPresent && KotlinDelegate.isNullable(this.field)))__		}_		else {_			return !obtainMethodParameter().isOptional()__		}_	};return,whether,this,dependency,is,required,p,optional,semantics,are,derived,from,java,8,s,link,java,util,optional,any,variant,of,a,parameter,level,code,nullable,annotation,such,as,from,jsr,305,or,the,find,bugs,set,of,annotations,or,a,language,level,nullable,type,declaration,in,kotlin;public,boolean,is,required,if,this,required,return,false,if,this,field,null,return,this,field,get,type,optional,class,has,nullable,annotation,kotlin,present,kotlin,delegate,is,nullable,this,field,else,return,obtain,method,parameter,is,optional
DependencyDescriptor -> public boolean isRequired();1503007895;Return whether this dependency is required._<p>Optional semantics are derived from Java 8's {@link java.util.Optional},_any variant of a parameter-level {@code Nullable} annotation (such as from_JSR-305 or the FindBugs set of annotations), or a language-level nullable_type declaration in Kotlin.;public boolean isRequired() {_		if (!this.required) {_			return false__		}__		if (this.field != null) {_			return !(this.field.getType() == Optional.class || hasNullableAnnotation() ||_					(kotlinPresent && KotlinDelegate.isNullable(this.field)))__		}_		else {_			return !obtainMethodParameter().isOptional()__		}_	};return,whether,this,dependency,is,required,p,optional,semantics,are,derived,from,java,8,s,link,java,util,optional,any,variant,of,a,parameter,level,code,nullable,annotation,such,as,from,jsr,305,or,the,find,bugs,set,of,annotations,or,a,language,level,nullable,type,declaration,in,kotlin;public,boolean,is,required,if,this,required,return,false,if,this,field,null,return,this,field,get,type,optional,class,has,nullable,annotation,kotlin,present,kotlin,delegate,is,nullable,this,field,else,return,obtain,method,parameter,is,optional
DependencyDescriptor -> public boolean isRequired();1503272000;Return whether this dependency is required._<p>Optional semantics are derived from Java 8's {@link java.util.Optional},_any variant of a parameter-level {@code Nullable} annotation (such as from_JSR-305 or the FindBugs set of annotations), or a language-level nullable_type declaration in Kotlin.;public boolean isRequired() {_		if (!this.required) {_			return false__		}__		if (this.field != null) {_			return !(this.field.getType() == Optional.class || hasNullableAnnotation() ||_					(kotlinPresent && KotlinDelegate.isNullable(this.field)))__		}_		else {_			return !obtainMethodParameter().isOptional()__		}_	};return,whether,this,dependency,is,required,p,optional,semantics,are,derived,from,java,8,s,link,java,util,optional,any,variant,of,a,parameter,level,code,nullable,annotation,such,as,from,jsr,305,or,the,find,bugs,set,of,annotations,or,a,language,level,nullable,type,declaration,in,kotlin;public,boolean,is,required,if,this,required,return,false,if,this,field,null,return,this,field,get,type,optional,class,has,nullable,annotation,kotlin,present,kotlin,delegate,is,nullable,this,field,else,return,obtain,method,parameter,is,optional
DependencyDescriptor -> public boolean isRequired();1503411745;Return whether this dependency is required._<p>Optional semantics are derived from Java 8's {@link java.util.Optional},_any variant of a parameter-level {@code Nullable} annotation (such as from_JSR-305 or the FindBugs set of annotations), or a language-level nullable_type declaration in Kotlin.;public boolean isRequired() {_		if (!this.required) {_			return false__		}__		if (this.field != null) {_			return !(this.field.getType() == Optional.class || hasNullableAnnotation() ||_					(useKotlinSupport(this.field.getDeclaringClass()) && KotlinDelegate.isNullable(this.field)))__		}_		else {_			return !obtainMethodParameter().isOptional()__		}_	};return,whether,this,dependency,is,required,p,optional,semantics,are,derived,from,java,8,s,link,java,util,optional,any,variant,of,a,parameter,level,code,nullable,annotation,such,as,from,jsr,305,or,the,find,bugs,set,of,annotations,or,a,language,level,nullable,type,declaration,in,kotlin;public,boolean,is,required,if,this,required,return,false,if,this,field,null,return,this,field,get,type,optional,class,has,nullable,annotation,use,kotlin,support,this,field,get,declaring,class,kotlin,delegate,is,nullable,this,field,else,return,obtain,method,parameter,is,optional
DependencyDescriptor -> public boolean isRequired();1506551472;Return whether this dependency is required._<p>Optional semantics are derived from Java 8's {@link java.util.Optional},_any variant of a parameter-level {@code Nullable} annotation (such as from_JSR-305 or the FindBugs set of annotations), or a language-level nullable_type declaration in Kotlin.;public boolean isRequired() {_		if (!this.required) {_			return false__		}__		if (this.field != null) {_			return !(this.field.getType() == Optional.class || hasNullableAnnotation() ||_					(KotlinDetector.isKotlinType(this.field.getDeclaringClass()) &&_							KotlinDelegate.isNullable(this.field)))__		}_		else {_			return !obtainMethodParameter().isOptional()__		}_	};return,whether,this,dependency,is,required,p,optional,semantics,are,derived,from,java,8,s,link,java,util,optional,any,variant,of,a,parameter,level,code,nullable,annotation,such,as,from,jsr,305,or,the,find,bugs,set,of,annotations,or,a,language,level,nullable,type,declaration,in,kotlin;public,boolean,is,required,if,this,required,return,false,if,this,field,null,return,this,field,get,type,optional,class,has,nullable,annotation,kotlin,detector,is,kotlin,type,this,field,get,declaring,class,kotlin,delegate,is,nullable,this,field,else,return,obtain,method,parameter,is,optional
DependencyDescriptor -> public boolean isRequired();1530174524;Return whether this dependency is required._<p>Optional semantics are derived from Java 8's {@link java.util.Optional},_any variant of a parameter-level {@code Nullable} annotation (such as from_JSR-305 or the FindBugs set of annotations), or a language-level nullable_type declaration in Kotlin.;public boolean isRequired() {_		if (!this.required) {_			return false__		}__		if (this.field != null) {_			return !(this.field.getType() == Optional.class || hasNullableAnnotation() ||_					(KotlinDetector.isKotlinType(this.field.getDeclaringClass()) &&_							KotlinDelegate.isNullable(this.field)))__		}_		else {_			return !obtainMethodParameter().isOptional()__		}_	};return,whether,this,dependency,is,required,p,optional,semantics,are,derived,from,java,8,s,link,java,util,optional,any,variant,of,a,parameter,level,code,nullable,annotation,such,as,from,jsr,305,or,the,find,bugs,set,of,annotations,or,a,language,level,nullable,type,declaration,in,kotlin;public,boolean,is,required,if,this,required,return,false,if,this,field,null,return,this,field,get,type,optional,class,has,nullable,annotation,kotlin,detector,is,kotlin,type,this,field,get,declaring,class,kotlin,delegate,is,nullable,this,field,else,return,obtain,method,parameter,is,optional
DependencyDescriptor -> public boolean isRequired();1530198749;Return whether this dependency is required._<p>Optional semantics are derived from Java 8's {@link java.util.Optional},_any variant of a parameter-level {@code Nullable} annotation (such as from_JSR-305 or the FindBugs set of annotations), or a language-level nullable_type declaration in Kotlin.;public boolean isRequired() {_		if (!this.required) {_			return false__		}__		if (this.field != null) {_			return !(this.field.getType() == Optional.class || hasNullableAnnotation() ||_					(KotlinDetector.isKotlinType(this.field.getDeclaringClass()) &&_							KotlinDelegate.isNullable(this.field)))__		}_		else {_			return !obtainMethodParameter().isOptional()__		}_	};return,whether,this,dependency,is,required,p,optional,semantics,are,derived,from,java,8,s,link,java,util,optional,any,variant,of,a,parameter,level,code,nullable,annotation,such,as,from,jsr,305,or,the,find,bugs,set,of,annotations,or,a,language,level,nullable,type,declaration,in,kotlin;public,boolean,is,required,if,this,required,return,false,if,this,field,null,return,this,field,get,type,optional,class,has,nullable,annotation,kotlin,detector,is,kotlin,type,this,field,get,declaring,class,kotlin,delegate,is,nullable,this,field,else,return,obtain,method,parameter,is,optional
DependencyDescriptor -> public boolean isRequired();1530201727;Return whether this dependency is required._<p>Optional semantics are derived from Java 8's {@link java.util.Optional},_any variant of a parameter-level {@code Nullable} annotation (such as from_JSR-305 or the FindBugs set of annotations), or a language-level nullable_type declaration in Kotlin.;public boolean isRequired() {_		if (!this.required) {_			return false__		}__		if (this.field != null) {_			return !(this.field.getType() == Optional.class || hasNullableAnnotation() ||_					(KotlinDetector.isKotlinType(this.field.getDeclaringClass()) &&_							KotlinDelegate.isNullable(this.field)))__		}_		else {_			return !obtainMethodParameter().isOptional()__		}_	};return,whether,this,dependency,is,required,p,optional,semantics,are,derived,from,java,8,s,link,java,util,optional,any,variant,of,a,parameter,level,code,nullable,annotation,such,as,from,jsr,305,or,the,find,bugs,set,of,annotations,or,a,language,level,nullable,type,declaration,in,kotlin;public,boolean,is,required,if,this,required,return,false,if,this,field,null,return,this,field,get,type,optional,class,has,nullable,annotation,kotlin,detector,is,kotlin,type,this,field,get,declaring,class,kotlin,delegate,is,nullable,this,field,else,return,obtain,method,parameter,is,optional
DependencyDescriptor -> public boolean isRequired();1532274593;Return whether this dependency is required._<p>Optional semantics are derived from Java 8's {@link java.util.Optional},_any variant of a parameter-level {@code Nullable} annotation (such as from_JSR-305 or the FindBugs set of annotations), or a language-level nullable_type declaration in Kotlin.;public boolean isRequired() {_		if (!this.required) {_			return false__		}__		if (this.field != null) {_			return !(this.field.getType() == Optional.class || hasNullableAnnotation() ||_					(KotlinDetector.isKotlinType(this.field.getDeclaringClass()) &&_							KotlinDelegate.isNullable(this.field)))__		}_		else {_			return !obtainMethodParameter().isOptional()__		}_	};return,whether,this,dependency,is,required,p,optional,semantics,are,derived,from,java,8,s,link,java,util,optional,any,variant,of,a,parameter,level,code,nullable,annotation,such,as,from,jsr,305,or,the,find,bugs,set,of,annotations,or,a,language,level,nullable,type,declaration,in,kotlin;public,boolean,is,required,if,this,required,return,false,if,this,field,null,return,this,field,get,type,optional,class,has,nullable,annotation,kotlin,detector,is,kotlin,type,this,field,get,declaring,class,kotlin,delegate,is,nullable,this,field,else,return,obtain,method,parameter,is,optional
DependencyDescriptor -> public boolean isRequired();1532332488;Return whether this dependency is required._<p>Optional semantics are derived from Java 8's {@link java.util.Optional},_any variant of a parameter-level {@code Nullable} annotation (such as from_JSR-305 or the FindBugs set of annotations), or a language-level nullable_type declaration in Kotlin.;public boolean isRequired() {_		if (!this.required) {_			return false__		}__		if (this.field != null) {_			return !(this.field.getType() == Optional.class || hasNullableAnnotation() ||_					(KotlinDetector.isKotlinReflectPresent() &&_							KotlinDetector.isKotlinType(this.field.getDeclaringClass()) &&_							KotlinDelegate.isNullable(this.field)))__		}_		else {_			return !obtainMethodParameter().isOptional()__		}_	};return,whether,this,dependency,is,required,p,optional,semantics,are,derived,from,java,8,s,link,java,util,optional,any,variant,of,a,parameter,level,code,nullable,annotation,such,as,from,jsr,305,or,the,find,bugs,set,of,annotations,or,a,language,level,nullable,type,declaration,in,kotlin;public,boolean,is,required,if,this,required,return,false,if,this,field,null,return,this,field,get,type,optional,class,has,nullable,annotation,kotlin,detector,is,kotlin,reflect,present,kotlin,detector,is,kotlin,type,this,field,get,declaring,class,kotlin,delegate,is,nullable,this,field,else,return,obtain,method,parameter,is,optional
DependencyDescriptor -> public boolean isRequired();1532385723;Return whether this dependency is required._<p>Optional semantics are derived from Java 8's {@link java.util.Optional},_any variant of a parameter-level {@code Nullable} annotation (such as from_JSR-305 or the FindBugs set of annotations), or a language-level nullable_type declaration in Kotlin.;public boolean isRequired() {_		if (!this.required) {_			return false__		}__		if (this.field != null) {_			return !(this.field.getType() == Optional.class || hasNullableAnnotation() ||_					(KotlinDetector.isKotlinReflectPresent() &&_							KotlinDetector.isKotlinType(this.field.getDeclaringClass()) &&_							KotlinDelegate.isNullable(this.field)))__		}_		else {_			return !obtainMethodParameter().isOptional()__		}_	};return,whether,this,dependency,is,required,p,optional,semantics,are,derived,from,java,8,s,link,java,util,optional,any,variant,of,a,parameter,level,code,nullable,annotation,such,as,from,jsr,305,or,the,find,bugs,set,of,annotations,or,a,language,level,nullable,type,declaration,in,kotlin;public,boolean,is,required,if,this,required,return,false,if,this,field,null,return,this,field,get,type,optional,class,has,nullable,annotation,kotlin,detector,is,kotlin,reflect,present,kotlin,detector,is,kotlin,type,this,field,get,declaring,class,kotlin,delegate,is,nullable,this,field,else,return,obtain,method,parameter,is,optional
DependencyDescriptor -> public boolean isRequired();1535039984;Return whether this dependency is required._<p>Optional semantics are derived from Java 8's {@link java.util.Optional},_any variant of a parameter-level {@code Nullable} annotation (such as from_JSR-305 or the FindBugs set of annotations), or a language-level nullable_type declaration in Kotlin.;public boolean isRequired() {_		if (!this.required) {_			return false__		}__		if (this.field != null) {_			return !(this.field.getType() == Optional.class || hasNullableAnnotation() ||_					(KotlinDetector.isKotlinReflectPresent() &&_							KotlinDetector.isKotlinType(this.field.getDeclaringClass()) &&_							KotlinDelegate.isNullable(this.field)))__		}_		else {_			return !obtainMethodParameter().isOptional()__		}_	};return,whether,this,dependency,is,required,p,optional,semantics,are,derived,from,java,8,s,link,java,util,optional,any,variant,of,a,parameter,level,code,nullable,annotation,such,as,from,jsr,305,or,the,find,bugs,set,of,annotations,or,a,language,level,nullable,type,declaration,in,kotlin;public,boolean,is,required,if,this,required,return,false,if,this,field,null,return,this,field,get,type,optional,class,has,nullable,annotation,kotlin,detector,is,kotlin,reflect,present,kotlin,detector,is,kotlin,type,this,field,get,declaring,class,kotlin,delegate,is,nullable,this,field,else,return,obtain,method,parameter,is,optional
DependencyDescriptor -> public boolean isRequired();1536855799;Return whether this dependency is required._<p>Optional semantics are derived from Java 8's {@link java.util.Optional},_any variant of a parameter-level {@code Nullable} annotation (such as from_JSR-305 or the FindBugs set of annotations), or a language-level nullable_type declaration in Kotlin.;public boolean isRequired() {_		if (!this.required) {_			return false__		}__		if (this.field != null) {_			return !(this.field.getType() == Optional.class || hasNullableAnnotation() ||_					(KotlinDetector.isKotlinReflectPresent() &&_							KotlinDetector.isKotlinType(this.field.getDeclaringClass()) &&_							KotlinDelegate.isNullable(this.field)))__		}_		else {_			return !obtainMethodParameter().isOptional()__		}_	};return,whether,this,dependency,is,required,p,optional,semantics,are,derived,from,java,8,s,link,java,util,optional,any,variant,of,a,parameter,level,code,nullable,annotation,such,as,from,jsr,305,or,the,find,bugs,set,of,annotations,or,a,language,level,nullable,type,declaration,in,kotlin;public,boolean,is,required,if,this,required,return,false,if,this,field,null,return,this,field,get,type,optional,class,has,nullable,annotation,kotlin,detector,is,kotlin,reflect,present,kotlin,detector,is,kotlin,type,this,field,get,declaring,class,kotlin,delegate,is,nullable,this,field,else,return,obtain,method,parameter,is,optional
DependencyDescriptor -> public boolean isRequired();1546963887;Return whether this dependency is required._<p>Optional semantics are derived from Java 8's {@link java.util.Optional},_any variant of a parameter-level {@code Nullable} annotation (such as from_JSR-305 or the FindBugs set of annotations), or a language-level nullable_type declaration in Kotlin.;public boolean isRequired() {_		if (!this.required) {_			return false__		}__		if (this.field != null) {_			return !(this.field.getType() == Optional.class || hasNullableAnnotation() ||_					(KotlinDetector.isKotlinReflectPresent() &&_							KotlinDetector.isKotlinType(this.field.getDeclaringClass()) &&_							KotlinDelegate.isNullable(this.field)))__		}_		else {_			return !obtainMethodParameter().isOptional()__		}_	};return,whether,this,dependency,is,required,p,optional,semantics,are,derived,from,java,8,s,link,java,util,optional,any,variant,of,a,parameter,level,code,nullable,annotation,such,as,from,jsr,305,or,the,find,bugs,set,of,annotations,or,a,language,level,nullable,type,declaration,in,kotlin;public,boolean,is,required,if,this,required,return,false,if,this,field,null,return,this,field,get,type,optional,class,has,nullable,annotation,kotlin,detector,is,kotlin,reflect,present,kotlin,detector,is,kotlin,type,this,field,get,declaring,class,kotlin,delegate,is,nullable,this,field,else,return,obtain,method,parameter,is,optional
DependencyDescriptor -> public void increaseNestingLevel();1346421549;Increase this descriptor's nesting level._@see MethodParameter#increaseNestingLevel();public void increaseNestingLevel() {_		this.nestingLevel++__		if (this.methodParameter != null) {_			this.methodParameter.increaseNestingLevel()__		}_	};increase,this,descriptor,s,nesting,level,see,method,parameter,increase,nesting,level;public,void,increase,nesting,level,this,nesting,level,if,this,method,parameter,null,this,method,parameter,increase,nesting,level
DependencyDescriptor -> public void increaseNestingLevel();1350077654;Increase this descriptor's nesting level._@see MethodParameter#increaseNestingLevel();public void increaseNestingLevel() {_		this.nestingLevel++__		if (this.methodParameter != null) {_			this.methodParameter.increaseNestingLevel()__		}_	};increase,this,descriptor,s,nesting,level,see,method,parameter,increase,nesting,level;public,void,increase,nesting,level,this,nesting,level,if,this,method,parameter,null,this,method,parameter,increase,nesting,level
DependencyDescriptor -> public void increaseNestingLevel();1356735495;Increase this descriptor's nesting level._@see MethodParameter#increaseNestingLevel();public void increaseNestingLevel() {_		this.nestingLevel++__		if (this.methodParameter != null) {_			this.methodParameter.increaseNestingLevel()__		}_	};increase,this,descriptor,s,nesting,level,see,method,parameter,increase,nesting,level;public,void,increase,nesting,level,this,nesting,level,if,this,method,parameter,null,this,method,parameter,increase,nesting,level
DependencyDescriptor -> public void increaseNestingLevel();1377641038;Increase this descriptor's nesting level._@see MethodParameter#increaseNestingLevel();public void increaseNestingLevel() {_		this.nestingLevel++__		if (this.methodParameter != null) {_			this.methodParameter.increaseNestingLevel()__		}_	};increase,this,descriptor,s,nesting,level,see,method,parameter,increase,nesting,level;public,void,increase,nesting,level,this,nesting,level,if,this,method,parameter,null,this,method,parameter,increase,nesting,level
DependencyDescriptor -> public void increaseNestingLevel();1381788683;Increase this descriptor's nesting level._@see MethodParameter#increaseNestingLevel();public void increaseNestingLevel() {_		this.nestingLevel++__		if (this.methodParameter != null) {_			this.methodParameter.increaseNestingLevel()__		}_	};increase,this,descriptor,s,nesting,level,see,method,parameter,increase,nesting,level;public,void,increase,nesting,level,this,nesting,level,if,this,method,parameter,null,this,method,parameter,increase,nesting,level
DependencyDescriptor -> public void increaseNestingLevel();1382716358;Increase this descriptor's nesting level._@see MethodParameter#increaseNestingLevel();public void increaseNestingLevel() {_		this.nestingLevel++__		if (this.methodParameter != null) {_			this.methodParameter.increaseNestingLevel()__		}_	};increase,this,descriptor,s,nesting,level,see,method,parameter,increase,nesting,level;public,void,increase,nesting,level,this,nesting,level,if,this,method,parameter,null,this,method,parameter,increase,nesting,level
DependencyDescriptor -> public void increaseNestingLevel();1385412762;Increase this descriptor's nesting level._@see MethodParameter#increaseNestingLevel();public void increaseNestingLevel() {_		this.nestingLevel++__		if (this.methodParameter != null) {_			this.methodParameter.increaseNestingLevel()__		}_	};increase,this,descriptor,s,nesting,level,see,method,parameter,increase,nesting,level;public,void,increase,nesting,level,this,nesting,level,if,this,method,parameter,null,this,method,parameter,increase,nesting,level
DependencyDescriptor -> public void increaseNestingLevel();1402061390;Increase this descriptor's nesting level._@see MethodParameter#increaseNestingLevel();public void increaseNestingLevel() {_		this.nestingLevel++__		if (this.methodParameter != null) {_			this.methodParameter.increaseNestingLevel()__		}_	};increase,this,descriptor,s,nesting,level,see,method,parameter,increase,nesting,level;public,void,increase,nesting,level,this,nesting,level,if,this,method,parameter,null,this,method,parameter,increase,nesting,level
DependencyDescriptor -> public void increaseNestingLevel();1452685925;Increase this descriptor's nesting level._@see MethodParameter#increaseNestingLevel();public void increaseNestingLevel() {_		this.nestingLevel++__		if (this.methodParameter != null) {_			this.methodParameter.increaseNestingLevel()__		}_	};increase,this,descriptor,s,nesting,level,see,method,parameter,increase,nesting,level;public,void,increase,nesting,level,this,nesting,level,if,this,method,parameter,null,this,method,parameter,increase,nesting,level
DependencyDescriptor -> public void increaseNestingLevel();1455295525;Increase this descriptor's nesting level._@see MethodParameter#increaseNestingLevel();public void increaseNestingLevel() {_		this.nestingLevel++__		if (this.methodParameter != null) {_			this.methodParameter.increaseNestingLevel()__		}_	};increase,this,descriptor,s,nesting,level,see,method,parameter,increase,nesting,level;public,void,increase,nesting,level,this,nesting,level,if,this,method,parameter,null,this,method,parameter,increase,nesting,level
DependencyDescriptor -> public void increaseNestingLevel();1455889195;Increase this descriptor's nesting level._@see MethodParameter#increaseNestingLevel();public void increaseNestingLevel() {_		this.nestingLevel++__		if (this.methodParameter != null) {_			this.methodParameter.increaseNestingLevel()__		}_	};increase,this,descriptor,s,nesting,level,see,method,parameter,increase,nesting,level;public,void,increase,nesting,level,this,nesting,level,if,this,method,parameter,null,this,method,parameter,increase,nesting,level
DependencyDescriptor -> public void increaseNestingLevel();1456432609;Increase this descriptor's nesting level._@see MethodParameter#increaseNestingLevel();public void increaseNestingLevel() {_		this.nestingLevel++__		if (this.methodParameter != null) {_			this.methodParameter.increaseNestingLevel()__		}_	};increase,this,descriptor,s,nesting,level,see,method,parameter,increase,nesting,level;public,void,increase,nesting,level,this,nesting,level,if,this,method,parameter,null,this,method,parameter,increase,nesting,level
DependencyDescriptor -> public void increaseNestingLevel();1458755547;Increase this descriptor's nesting level._@see MethodParameter#increaseNestingLevel();public void increaseNestingLevel() {_		this.nestingLevel++__		if (this.methodParameter != null) {_			this.methodParameter.increaseNestingLevel()__		}_	};increase,this,descriptor,s,nesting,level,see,method,parameter,increase,nesting,level;public,void,increase,nesting,level,this,nesting,level,if,this,method,parameter,null,this,method,parameter,increase,nesting,level
DependencyDescriptor -> public void increaseNestingLevel();1466893134;Increase this descriptor's nesting level._@see MethodParameter#increaseNestingLevel();public void increaseNestingLevel() {_		this.nestingLevel++__		if (this.methodParameter != null) {_			this.methodParameter.increaseNestingLevel()__		}_	};increase,this,descriptor,s,nesting,level,see,method,parameter,increase,nesting,level;public,void,increase,nesting,level,this,nesting,level,if,this,method,parameter,null,this,method,parameter,increase,nesting,level
DependencyDescriptor -> public void increaseNestingLevel();1469030751;Increase this descriptor's nesting level._@see MethodParameter#increaseNestingLevel();public void increaseNestingLevel() {_		this.nestingLevel++__		if (this.methodParameter != null) {_			this.methodParameter.increaseNestingLevel()__		}_	};increase,this,descriptor,s,nesting,level,see,method,parameter,increase,nesting,level;public,void,increase,nesting,level,this,nesting,level,if,this,method,parameter,null,this,method,parameter,increase,nesting,level
DependencyDescriptor -> public void increaseNestingLevel();1481647138;Increase this descriptor's nesting level._@see MethodParameter#increaseNestingLevel();public void increaseNestingLevel() {_		this.nestingLevel++__		if (this.methodParameter != null) {_			this.methodParameter.increaseNestingLevel()__		}_	};increase,this,descriptor,s,nesting,level,see,method,parameter,increase,nesting,level;public,void,increase,nesting,level,this,nesting,level,if,this,method,parameter,null,this,method,parameter,increase,nesting,level
DependencyDescriptor -> public void increaseNestingLevel();1482091448;Increase this descriptor's nesting level._@see MethodParameter#increaseNestingLevel();public void increaseNestingLevel() {_		this.nestingLevel++__		if (this.methodParameter != null) {_			this.methodParameter.increaseNestingLevel()__		}_	};increase,this,descriptor,s,nesting,level,see,method,parameter,increase,nesting,level;public,void,increase,nesting,level,this,nesting,level,if,this,method,parameter,null,this,method,parameter,increase,nesting,level
DependencyDescriptor -> public void increaseNestingLevel();1485277217;Increase this descriptor's nesting level._@see MethodParameter#increaseNestingLevel();public void increaseNestingLevel() {_		this.nestingLevel++__		if (this.methodParameter != null) {_			this.methodParameter.increaseNestingLevel()__		}_	};increase,this,descriptor,s,nesting,level,see,method,parameter,increase,nesting,level;public,void,increase,nesting,level,this,nesting,level,if,this,method,parameter,null,this,method,parameter,increase,nesting,level
DependencyDescriptor -> public void increaseNestingLevel();1485300605;Increase this descriptor's nesting level._@see MethodParameter#increaseNestingLevel();public void increaseNestingLevel() {_		this.nestingLevel++__		this.resolvableType = null__		if (this.methodParameter != null) {_			this.methodParameter.increaseNestingLevel()__		}_	};increase,this,descriptor,s,nesting,level,see,method,parameter,increase,nesting,level;public,void,increase,nesting,level,this,nesting,level,this,resolvable,type,null,if,this,method,parameter,null,this,method,parameter,increase,nesting,level
DependencyDescriptor -> public void increaseNestingLevel();1495868221;Increase this descriptor's nesting level._@see MethodParameter#increaseNestingLevel();public void increaseNestingLevel() {_		this.nestingLevel++__		this.resolvableType = null__		if (this.methodParameter != null) {_			this.methodParameter.increaseNestingLevel()__		}_	};increase,this,descriptor,s,nesting,level,see,method,parameter,increase,nesting,level;public,void,increase,nesting,level,this,nesting,level,this,resolvable,type,null,if,this,method,parameter,null,this,method,parameter,increase,nesting,level
DependencyDescriptor -> public void increaseNestingLevel();1496837955;Increase this descriptor's nesting level._@see MethodParameter#increaseNestingLevel();public void increaseNestingLevel() {_		this.nestingLevel++__		this.resolvableType = null__		if (this.methodParameter != null) {_			this.methodParameter.increaseNestingLevel()__		}_	};increase,this,descriptor,s,nesting,level,see,method,parameter,increase,nesting,level;public,void,increase,nesting,level,this,nesting,level,this,resolvable,type,null,if,this,method,parameter,null,this,method,parameter,increase,nesting,level
DependencyDescriptor -> public void increaseNestingLevel();1498780456;Increase this descriptor's nesting level._@see MethodParameter#increaseNestingLevel();public void increaseNestingLevel() {_		this.nestingLevel++__		this.resolvableType = null__		if (this.methodParameter != null) {_			this.methodParameter.increaseNestingLevel()__		}_	};increase,this,descriptor,s,nesting,level,see,method,parameter,increase,nesting,level;public,void,increase,nesting,level,this,nesting,level,this,resolvable,type,null,if,this,method,parameter,null,this,method,parameter,increase,nesting,level
DependencyDescriptor -> public void increaseNestingLevel();1503007895;Increase this descriptor's nesting level._@see MethodParameter#increaseNestingLevel();public void increaseNestingLevel() {_		this.nestingLevel++__		this.resolvableType = null__		if (this.methodParameter != null) {_			this.methodParameter.increaseNestingLevel()__		}_	};increase,this,descriptor,s,nesting,level,see,method,parameter,increase,nesting,level;public,void,increase,nesting,level,this,nesting,level,this,resolvable,type,null,if,this,method,parameter,null,this,method,parameter,increase,nesting,level
DependencyDescriptor -> public void increaseNestingLevel();1503272000;Increase this descriptor's nesting level._@see MethodParameter#increaseNestingLevel();public void increaseNestingLevel() {_		this.nestingLevel++__		this.resolvableType = null__		if (this.methodParameter != null) {_			this.methodParameter.increaseNestingLevel()__		}_	};increase,this,descriptor,s,nesting,level,see,method,parameter,increase,nesting,level;public,void,increase,nesting,level,this,nesting,level,this,resolvable,type,null,if,this,method,parameter,null,this,method,parameter,increase,nesting,level
DependencyDescriptor -> public void increaseNestingLevel();1503411745;Increase this descriptor's nesting level._@see MethodParameter#increaseNestingLevel();public void increaseNestingLevel() {_		this.nestingLevel++__		this.resolvableType = null__		if (this.methodParameter != null) {_			this.methodParameter.increaseNestingLevel()__		}_	};increase,this,descriptor,s,nesting,level,see,method,parameter,increase,nesting,level;public,void,increase,nesting,level,this,nesting,level,this,resolvable,type,null,if,this,method,parameter,null,this,method,parameter,increase,nesting,level
DependencyDescriptor -> public void increaseNestingLevel();1506551472;Increase this descriptor's nesting level._@see MethodParameter#increaseNestingLevel();public void increaseNestingLevel() {_		this.nestingLevel++__		this.resolvableType = null__		if (this.methodParameter != null) {_			this.methodParameter.increaseNestingLevel()__		}_	};increase,this,descriptor,s,nesting,level,see,method,parameter,increase,nesting,level;public,void,increase,nesting,level,this,nesting,level,this,resolvable,type,null,if,this,method,parameter,null,this,method,parameter,increase,nesting,level
DependencyDescriptor -> public void increaseNestingLevel();1530174524;Increase this descriptor's nesting level._@see MethodParameter#increaseNestingLevel();public void increaseNestingLevel() {_		this.nestingLevel++__		this.resolvableType = null__		if (this.methodParameter != null) {_			this.methodParameter.increaseNestingLevel()__		}_	};increase,this,descriptor,s,nesting,level,see,method,parameter,increase,nesting,level;public,void,increase,nesting,level,this,nesting,level,this,resolvable,type,null,if,this,method,parameter,null,this,method,parameter,increase,nesting,level
DependencyDescriptor -> public void increaseNestingLevel();1530198749;Increase this descriptor's nesting level._@see MethodParameter#increaseNestingLevel();public void increaseNestingLevel() {_		this.nestingLevel++__		this.resolvableType = null__		if (this.methodParameter != null) {_			this.methodParameter.increaseNestingLevel()__		}_	};increase,this,descriptor,s,nesting,level,see,method,parameter,increase,nesting,level;public,void,increase,nesting,level,this,nesting,level,this,resolvable,type,null,if,this,method,parameter,null,this,method,parameter,increase,nesting,level
DependencyDescriptor -> public void increaseNestingLevel();1530201727;Increase this descriptor's nesting level._@see MethodParameter#increaseNestingLevel();public void increaseNestingLevel() {_		this.nestingLevel++__		this.resolvableType = null__		if (this.methodParameter != null) {_			this.methodParameter.increaseNestingLevel()__		}_	};increase,this,descriptor,s,nesting,level,see,method,parameter,increase,nesting,level;public,void,increase,nesting,level,this,nesting,level,this,resolvable,type,null,if,this,method,parameter,null,this,method,parameter,increase,nesting,level
DependencyDescriptor -> public void increaseNestingLevel();1532274593;Increase this descriptor's nesting level._@see MethodParameter#increaseNestingLevel();public void increaseNestingLevel() {_		this.nestingLevel++__		this.resolvableType = null__		if (this.methodParameter != null) {_			this.methodParameter.increaseNestingLevel()__		}_	};increase,this,descriptor,s,nesting,level,see,method,parameter,increase,nesting,level;public,void,increase,nesting,level,this,nesting,level,this,resolvable,type,null,if,this,method,parameter,null,this,method,parameter,increase,nesting,level
DependencyDescriptor -> public void increaseNestingLevel();1532332488;Increase this descriptor's nesting level._@see MethodParameter#increaseNestingLevel();public void increaseNestingLevel() {_		this.nestingLevel++__		this.resolvableType = null__		if (this.methodParameter != null) {_			this.methodParameter.increaseNestingLevel()__		}_	};increase,this,descriptor,s,nesting,level,see,method,parameter,increase,nesting,level;public,void,increase,nesting,level,this,nesting,level,this,resolvable,type,null,if,this,method,parameter,null,this,method,parameter,increase,nesting,level
DependencyDescriptor -> public void increaseNestingLevel();1532385723;Increase this descriptor's nesting level._@see MethodParameter#increaseNestingLevel();public void increaseNestingLevel() {_		this.nestingLevel++__		this.resolvableType = null__		if (this.methodParameter != null) {_			this.methodParameter.increaseNestingLevel()__		}_	};increase,this,descriptor,s,nesting,level,see,method,parameter,increase,nesting,level;public,void,increase,nesting,level,this,nesting,level,this,resolvable,type,null,if,this,method,parameter,null,this,method,parameter,increase,nesting,level
DependencyDescriptor -> public void increaseNestingLevel();1535039984;Increase this descriptor's nesting level._@see MethodParameter#increaseNestingLevel();public void increaseNestingLevel() {_		this.nestingLevel++__		this.resolvableType = null__		if (this.methodParameter != null) {_			this.methodParameter.increaseNestingLevel()__		}_	};increase,this,descriptor,s,nesting,level,see,method,parameter,increase,nesting,level;public,void,increase,nesting,level,this,nesting,level,this,resolvable,type,null,if,this,method,parameter,null,this,method,parameter,increase,nesting,level
DependencyDescriptor -> public void increaseNestingLevel();1536855799;Increase this descriptor's nesting level._@see MethodParameter#increaseNestingLevel();public void increaseNestingLevel() {_		this.nestingLevel++__		this.resolvableType = null__		if (this.methodParameter != null) {_			this.methodParameter.increaseNestingLevel()__		}_	};increase,this,descriptor,s,nesting,level,see,method,parameter,increase,nesting,level;public,void,increase,nesting,level,this,nesting,level,this,resolvable,type,null,if,this,method,parameter,null,this,method,parameter,increase,nesting,level
DependencyDescriptor -> public void increaseNestingLevel();1546963887;Increase this descriptor's nesting level._@see MethodParameter#increaseNestingLevel();public void increaseNestingLevel() {_		this.nestingLevel++__		this.resolvableType = null__		if (this.methodParameter != null) {_			this.methodParameter.increaseNestingLevel()__		}_	};increase,this,descriptor,s,nesting,level,see,method,parameter,increase,nesting,level;public,void,increase,nesting,level,this,nesting,level,this,resolvable,type,null,if,this,method,parameter,null,this,method,parameter,increase,nesting,level
DependencyDescriptor -> public DependencyDescriptor(Field field, boolean required);1328020251;Create a new descriptor for a field._Considers the dependency as 'eager'._@param field the field to wrap_@param required whether the dependency is required;public DependencyDescriptor(Field field, boolean required) {_		this(field, required, true)__	};create,a,new,descriptor,for,a,field,considers,the,dependency,as,eager,param,field,the,field,to,wrap,param,required,whether,the,dependency,is,required;public,dependency,descriptor,field,field,boolean,required,this,field,required,true
DependencyDescriptor -> public DependencyDescriptor(Field field, boolean required);1329142650;Create a new descriptor for a field._Considers the dependency as 'eager'._@param field the field to wrap_@param required whether the dependency is required;public DependencyDescriptor(Field field, boolean required) {_		this(field, required, true)__	};create,a,new,descriptor,for,a,field,considers,the,dependency,as,eager,param,field,the,field,to,wrap,param,required,whether,the,dependency,is,required;public,dependency,descriptor,field,field,boolean,required,this,field,required,true
DependencyDescriptor -> public DependencyDescriptor(Field field, boolean required);1346421549;Create a new descriptor for a field._Considers the dependency as 'eager'._@param field the field to wrap_@param required whether the dependency is required;public DependencyDescriptor(Field field, boolean required) {_		this(field, required, true)__	};create,a,new,descriptor,for,a,field,considers,the,dependency,as,eager,param,field,the,field,to,wrap,param,required,whether,the,dependency,is,required;public,dependency,descriptor,field,field,boolean,required,this,field,required,true
DependencyDescriptor -> public DependencyDescriptor(Field field, boolean required);1350077654;Create a new descriptor for a field._Considers the dependency as 'eager'._@param field the field to wrap_@param required whether the dependency is required;public DependencyDescriptor(Field field, boolean required) {_		this(field, required, true)__	};create,a,new,descriptor,for,a,field,considers,the,dependency,as,eager,param,field,the,field,to,wrap,param,required,whether,the,dependency,is,required;public,dependency,descriptor,field,field,boolean,required,this,field,required,true
DependencyDescriptor -> public DependencyDescriptor(Field field, boolean required);1356735495;Create a new descriptor for a field._Considers the dependency as 'eager'._@param field the field to wrap_@param required whether the dependency is required;public DependencyDescriptor(Field field, boolean required) {_		this(field, required, true)__	};create,a,new,descriptor,for,a,field,considers,the,dependency,as,eager,param,field,the,field,to,wrap,param,required,whether,the,dependency,is,required;public,dependency,descriptor,field,field,boolean,required,this,field,required,true
DependencyDescriptor -> public DependencyDescriptor(Field field, boolean required);1377641038;Create a new descriptor for a field._Considers the dependency as 'eager'._@param field the field to wrap_@param required whether the dependency is required;public DependencyDescriptor(Field field, boolean required) {_		this(field, required, true)__	};create,a,new,descriptor,for,a,field,considers,the,dependency,as,eager,param,field,the,field,to,wrap,param,required,whether,the,dependency,is,required;public,dependency,descriptor,field,field,boolean,required,this,field,required,true
DependencyDescriptor -> public DependencyDescriptor(Field field, boolean required);1381788683;Create a new descriptor for a field._Considers the dependency as 'eager'._@param field the field to wrap_@param required whether the dependency is required;public DependencyDescriptor(Field field, boolean required) {_		this(field, required, true)__	};create,a,new,descriptor,for,a,field,considers,the,dependency,as,eager,param,field,the,field,to,wrap,param,required,whether,the,dependency,is,required;public,dependency,descriptor,field,field,boolean,required,this,field,required,true
DependencyDescriptor -> public DependencyDescriptor(Field field, boolean required);1382716358;Create a new descriptor for a field._Considers the dependency as 'eager'._@param field the field to wrap_@param required whether the dependency is required;public DependencyDescriptor(Field field, boolean required) {_		this(field, required, true)__	};create,a,new,descriptor,for,a,field,considers,the,dependency,as,eager,param,field,the,field,to,wrap,param,required,whether,the,dependency,is,required;public,dependency,descriptor,field,field,boolean,required,this,field,required,true
DependencyDescriptor -> public DependencyDescriptor(Field field, boolean required);1385412762;Create a new descriptor for a field._Considers the dependency as 'eager'._@param field the field to wrap_@param required whether the dependency is required;public DependencyDescriptor(Field field, boolean required) {_		this(field, required, true)__	};create,a,new,descriptor,for,a,field,considers,the,dependency,as,eager,param,field,the,field,to,wrap,param,required,whether,the,dependency,is,required;public,dependency,descriptor,field,field,boolean,required,this,field,required,true
DependencyDescriptor -> public DependencyDescriptor(Field field, boolean required);1402061390;Create a new descriptor for a field._Considers the dependency as 'eager'._@param field the field to wrap_@param required whether the dependency is required;public DependencyDescriptor(Field field, boolean required) {_		this(field, required, true)__	};create,a,new,descriptor,for,a,field,considers,the,dependency,as,eager,param,field,the,field,to,wrap,param,required,whether,the,dependency,is,required;public,dependency,descriptor,field,field,boolean,required,this,field,required,true
DependencyDescriptor -> public DependencyDescriptor(Field field, boolean required);1452685925;Create a new descriptor for a field._Considers the dependency as 'eager'._@param field the field to wrap_@param required whether the dependency is required;public DependencyDescriptor(Field field, boolean required) {_		this(field, required, true)__	};create,a,new,descriptor,for,a,field,considers,the,dependency,as,eager,param,field,the,field,to,wrap,param,required,whether,the,dependency,is,required;public,dependency,descriptor,field,field,boolean,required,this,field,required,true
DependencyDescriptor -> public DependencyDescriptor(Field field, boolean required);1455295525;Create a new descriptor for a field._Considers the dependency as 'eager'._@param field the field to wrap_@param required whether the dependency is required;public DependencyDescriptor(Field field, boolean required) {_		this(field, required, true)__	};create,a,new,descriptor,for,a,field,considers,the,dependency,as,eager,param,field,the,field,to,wrap,param,required,whether,the,dependency,is,required;public,dependency,descriptor,field,field,boolean,required,this,field,required,true
DependencyDescriptor -> public DependencyDescriptor(Field field, boolean required);1455889195;Create a new descriptor for a field._Considers the dependency as 'eager'._@param field the field to wrap_@param required whether the dependency is required;public DependencyDescriptor(Field field, boolean required) {_		this(field, required, true)__	};create,a,new,descriptor,for,a,field,considers,the,dependency,as,eager,param,field,the,field,to,wrap,param,required,whether,the,dependency,is,required;public,dependency,descriptor,field,field,boolean,required,this,field,required,true
DependencyDescriptor -> public DependencyDescriptor(Field field, boolean required);1456432609;Create a new descriptor for a field._Considers the dependency as 'eager'._@param field the field to wrap_@param required whether the dependency is required;public DependencyDescriptor(Field field, boolean required) {_		this(field, required, true)__	};create,a,new,descriptor,for,a,field,considers,the,dependency,as,eager,param,field,the,field,to,wrap,param,required,whether,the,dependency,is,required;public,dependency,descriptor,field,field,boolean,required,this,field,required,true
DependencyDescriptor -> public DependencyDescriptor(Field field, boolean required);1458755547;Create a new descriptor for a field._Considers the dependency as 'eager'._@param field the field to wrap_@param required whether the dependency is required;public DependencyDescriptor(Field field, boolean required) {_		this(field, required, true)__	};create,a,new,descriptor,for,a,field,considers,the,dependency,as,eager,param,field,the,field,to,wrap,param,required,whether,the,dependency,is,required;public,dependency,descriptor,field,field,boolean,required,this,field,required,true
DependencyDescriptor -> public DependencyDescriptor(Field field, boolean required);1466893134;Create a new descriptor for a field._Considers the dependency as 'eager'._@param field the field to wrap_@param required whether the dependency is required;public DependencyDescriptor(Field field, boolean required) {_		this(field, required, true)__	};create,a,new,descriptor,for,a,field,considers,the,dependency,as,eager,param,field,the,field,to,wrap,param,required,whether,the,dependency,is,required;public,dependency,descriptor,field,field,boolean,required,this,field,required,true
DependencyDescriptor -> public DependencyDescriptor(Field field, boolean required);1469030751;Create a new descriptor for a field._Considers the dependency as 'eager'._@param field the field to wrap_@param required whether the dependency is required;public DependencyDescriptor(Field field, boolean required) {_		this(field, required, true)__	};create,a,new,descriptor,for,a,field,considers,the,dependency,as,eager,param,field,the,field,to,wrap,param,required,whether,the,dependency,is,required;public,dependency,descriptor,field,field,boolean,required,this,field,required,true
DependencyDescriptor -> public DependencyDescriptor(Field field, boolean required);1481647138;Create a new descriptor for a field._Considers the dependency as 'eager'._@param field the field to wrap_@param required whether the dependency is required;public DependencyDescriptor(Field field, boolean required) {_		this(field, required, true)__	};create,a,new,descriptor,for,a,field,considers,the,dependency,as,eager,param,field,the,field,to,wrap,param,required,whether,the,dependency,is,required;public,dependency,descriptor,field,field,boolean,required,this,field,required,true
DependencyDescriptor -> public DependencyDescriptor(Field field, boolean required);1482091448;Create a new descriptor for a field._Considers the dependency as 'eager'._@param field the field to wrap_@param required whether the dependency is required;public DependencyDescriptor(Field field, boolean required) {_		this(field, required, true)__	};create,a,new,descriptor,for,a,field,considers,the,dependency,as,eager,param,field,the,field,to,wrap,param,required,whether,the,dependency,is,required;public,dependency,descriptor,field,field,boolean,required,this,field,required,true
DependencyDescriptor -> public DependencyDescriptor(Field field, boolean required);1485277217;Create a new descriptor for a field._Considers the dependency as 'eager'._@param field the field to wrap_@param required whether the dependency is required;public DependencyDescriptor(Field field, boolean required) {_		this(field, required, true)__	};create,a,new,descriptor,for,a,field,considers,the,dependency,as,eager,param,field,the,field,to,wrap,param,required,whether,the,dependency,is,required;public,dependency,descriptor,field,field,boolean,required,this,field,required,true
DependencyDescriptor -> public DependencyDescriptor(Field field, boolean required);1485300605;Create a new descriptor for a field._Considers the dependency as 'eager'._@param field the field to wrap_@param required whether the dependency is required;public DependencyDescriptor(Field field, boolean required) {_		this(field, required, true)__	};create,a,new,descriptor,for,a,field,considers,the,dependency,as,eager,param,field,the,field,to,wrap,param,required,whether,the,dependency,is,required;public,dependency,descriptor,field,field,boolean,required,this,field,required,true
DependencyDescriptor -> public DependencyDescriptor(Field field, boolean required);1495868221;Create a new descriptor for a field._Considers the dependency as 'eager'._@param field the field to wrap_@param required whether the dependency is required;public DependencyDescriptor(Field field, boolean required) {_		this(field, required, true)__	};create,a,new,descriptor,for,a,field,considers,the,dependency,as,eager,param,field,the,field,to,wrap,param,required,whether,the,dependency,is,required;public,dependency,descriptor,field,field,boolean,required,this,field,required,true
DependencyDescriptor -> public DependencyDescriptor(Field field, boolean required);1496837955;Create a new descriptor for a field._Considers the dependency as 'eager'._@param field the field to wrap_@param required whether the dependency is required;public DependencyDescriptor(Field field, boolean required) {_		this(field, required, true)__	};create,a,new,descriptor,for,a,field,considers,the,dependency,as,eager,param,field,the,field,to,wrap,param,required,whether,the,dependency,is,required;public,dependency,descriptor,field,field,boolean,required,this,field,required,true
DependencyDescriptor -> public DependencyDescriptor(Field field, boolean required);1498780456;Create a new descriptor for a field._Considers the dependency as 'eager'._@param field the field to wrap_@param required whether the dependency is required;public DependencyDescriptor(Field field, boolean required) {_		this(field, required, true)__	};create,a,new,descriptor,for,a,field,considers,the,dependency,as,eager,param,field,the,field,to,wrap,param,required,whether,the,dependency,is,required;public,dependency,descriptor,field,field,boolean,required,this,field,required,true
DependencyDescriptor -> public DependencyDescriptor(Field field, boolean required);1503007895;Create a new descriptor for a field._Considers the dependency as 'eager'._@param field the field to wrap_@param required whether the dependency is required;public DependencyDescriptor(Field field, boolean required) {_		this(field, required, true)__	};create,a,new,descriptor,for,a,field,considers,the,dependency,as,eager,param,field,the,field,to,wrap,param,required,whether,the,dependency,is,required;public,dependency,descriptor,field,field,boolean,required,this,field,required,true
DependencyDescriptor -> public DependencyDescriptor(Field field, boolean required);1503272000;Create a new descriptor for a field._Considers the dependency as 'eager'._@param field the field to wrap_@param required whether the dependency is required;public DependencyDescriptor(Field field, boolean required) {_		this(field, required, true)__	};create,a,new,descriptor,for,a,field,considers,the,dependency,as,eager,param,field,the,field,to,wrap,param,required,whether,the,dependency,is,required;public,dependency,descriptor,field,field,boolean,required,this,field,required,true
DependencyDescriptor -> public DependencyDescriptor(Field field, boolean required);1503411745;Create a new descriptor for a field._Considers the dependency as 'eager'._@param field the field to wrap_@param required whether the dependency is required;public DependencyDescriptor(Field field, boolean required) {_		this(field, required, true)__	};create,a,new,descriptor,for,a,field,considers,the,dependency,as,eager,param,field,the,field,to,wrap,param,required,whether,the,dependency,is,required;public,dependency,descriptor,field,field,boolean,required,this,field,required,true
DependencyDescriptor -> public DependencyDescriptor(Field field, boolean required);1506551472;Create a new descriptor for a field._Considers the dependency as 'eager'._@param field the field to wrap_@param required whether the dependency is required;public DependencyDescriptor(Field field, boolean required) {_		this(field, required, true)__	};create,a,new,descriptor,for,a,field,considers,the,dependency,as,eager,param,field,the,field,to,wrap,param,required,whether,the,dependency,is,required;public,dependency,descriptor,field,field,boolean,required,this,field,required,true
DependencyDescriptor -> public DependencyDescriptor(Field field, boolean required);1530174524;Create a new descriptor for a field._Considers the dependency as 'eager'._@param field the field to wrap_@param required whether the dependency is required;public DependencyDescriptor(Field field, boolean required) {_		this(field, required, true)__	};create,a,new,descriptor,for,a,field,considers,the,dependency,as,eager,param,field,the,field,to,wrap,param,required,whether,the,dependency,is,required;public,dependency,descriptor,field,field,boolean,required,this,field,required,true
DependencyDescriptor -> public DependencyDescriptor(Field field, boolean required);1530198749;Create a new descriptor for a field._Considers the dependency as 'eager'._@param field the field to wrap_@param required whether the dependency is required;public DependencyDescriptor(Field field, boolean required) {_		this(field, required, true)__	};create,a,new,descriptor,for,a,field,considers,the,dependency,as,eager,param,field,the,field,to,wrap,param,required,whether,the,dependency,is,required;public,dependency,descriptor,field,field,boolean,required,this,field,required,true
DependencyDescriptor -> public DependencyDescriptor(Field field, boolean required);1530201727;Create a new descriptor for a field._Considers the dependency as 'eager'._@param field the field to wrap_@param required whether the dependency is required;public DependencyDescriptor(Field field, boolean required) {_		this(field, required, true)__	};create,a,new,descriptor,for,a,field,considers,the,dependency,as,eager,param,field,the,field,to,wrap,param,required,whether,the,dependency,is,required;public,dependency,descriptor,field,field,boolean,required,this,field,required,true
DependencyDescriptor -> public DependencyDescriptor(Field field, boolean required);1532274593;Create a new descriptor for a field._Considers the dependency as 'eager'._@param field the field to wrap_@param required whether the dependency is required;public DependencyDescriptor(Field field, boolean required) {_		this(field, required, true)__	};create,a,new,descriptor,for,a,field,considers,the,dependency,as,eager,param,field,the,field,to,wrap,param,required,whether,the,dependency,is,required;public,dependency,descriptor,field,field,boolean,required,this,field,required,true
DependencyDescriptor -> public DependencyDescriptor(Field field, boolean required);1532332488;Create a new descriptor for a field._Considers the dependency as 'eager'._@param field the field to wrap_@param required whether the dependency is required;public DependencyDescriptor(Field field, boolean required) {_		this(field, required, true)__	};create,a,new,descriptor,for,a,field,considers,the,dependency,as,eager,param,field,the,field,to,wrap,param,required,whether,the,dependency,is,required;public,dependency,descriptor,field,field,boolean,required,this,field,required,true
DependencyDescriptor -> public DependencyDescriptor(Field field, boolean required);1532385723;Create a new descriptor for a field._Considers the dependency as 'eager'._@param field the field to wrap_@param required whether the dependency is required;public DependencyDescriptor(Field field, boolean required) {_		this(field, required, true)__	};create,a,new,descriptor,for,a,field,considers,the,dependency,as,eager,param,field,the,field,to,wrap,param,required,whether,the,dependency,is,required;public,dependency,descriptor,field,field,boolean,required,this,field,required,true
DependencyDescriptor -> public DependencyDescriptor(Field field, boolean required);1535039984;Create a new descriptor for a field._Considers the dependency as 'eager'._@param field the field to wrap_@param required whether the dependency is required;public DependencyDescriptor(Field field, boolean required) {_		this(field, required, true)__	};create,a,new,descriptor,for,a,field,considers,the,dependency,as,eager,param,field,the,field,to,wrap,param,required,whether,the,dependency,is,required;public,dependency,descriptor,field,field,boolean,required,this,field,required,true
DependencyDescriptor -> public DependencyDescriptor(Field field, boolean required);1536855799;Create a new descriptor for a field._Considers the dependency as 'eager'._@param field the field to wrap_@param required whether the dependency is required;public DependencyDescriptor(Field field, boolean required) {_		this(field, required, true)__	};create,a,new,descriptor,for,a,field,considers,the,dependency,as,eager,param,field,the,field,to,wrap,param,required,whether,the,dependency,is,required;public,dependency,descriptor,field,field,boolean,required,this,field,required,true
DependencyDescriptor -> public DependencyDescriptor(Field field, boolean required);1546963887;Create a new descriptor for a field._Considers the dependency as 'eager'._@param field the field to wrap_@param required whether the dependency is required;public DependencyDescriptor(Field field, boolean required) {_		this(field, required, true)__	};create,a,new,descriptor,for,a,field,considers,the,dependency,as,eager,param,field,the,field,to,wrap,param,required,whether,the,dependency,is,required;public,dependency,descriptor,field,field,boolean,required,this,field,required,true
DependencyDescriptor -> public Object resolveCandidate(String beanName, Class<?> requiredType, BeanFactory beanFactory) 			throws BeansException;1469030751;Resolve the specified bean name, as a candidate result of the matching_algorithm for this dependency, to a bean instance from the given factory._<p>The default implementation calls {@link BeanFactory#getBean(String)}._Subclasses may provide additional arguments or other customizations._@param beanName the bean name, as a candidate result for this dependency_@param requiredType the expected type of the bean (as an assertion)_@param beanFactory the associated factory_@return the bean instance (never {@code null})_@throws BeansException if the bean could not be obtained_@since 4.3.2_@see BeanFactory#getBean(String);public Object resolveCandidate(String beanName, Class<?> requiredType, BeanFactory beanFactory)_			throws BeansException {__		return beanFactory.getBean(beanName, requiredType)__	};resolve,the,specified,bean,name,as,a,candidate,result,of,the,matching,algorithm,for,this,dependency,to,a,bean,instance,from,the,given,factory,p,the,default,implementation,calls,link,bean,factory,get,bean,string,subclasses,may,provide,additional,arguments,or,other,customizations,param,bean,name,the,bean,name,as,a,candidate,result,for,this,dependency,param,required,type,the,expected,type,of,the,bean,as,an,assertion,param,bean,factory,the,associated,factory,return,the,bean,instance,never,code,null,throws,beans,exception,if,the,bean,could,not,be,obtained,since,4,3,2,see,bean,factory,get,bean,string;public,object,resolve,candidate,string,bean,name,class,required,type,bean,factory,bean,factory,throws,beans,exception,return,bean,factory,get,bean,bean,name,required,type
DependencyDescriptor -> public Object resolveCandidate(String beanName, Class<?> requiredType, BeanFactory beanFactory) 			throws BeansException;1481647138;Resolve the specified bean name, as a candidate result of the matching_algorithm for this dependency, to a bean instance from the given factory._<p>The default implementation calls {@link BeanFactory#getBean(String)}._Subclasses may provide additional arguments or other customizations._@param beanName the bean name, as a candidate result for this dependency_@param requiredType the expected type of the bean (as an assertion)_@param beanFactory the associated factory_@return the bean instance (never {@code null})_@throws BeansException if the bean could not be obtained_@since 4.3.2_@see BeanFactory#getBean(String);public Object resolveCandidate(String beanName, Class<?> requiredType, BeanFactory beanFactory)_			throws BeansException {__		return beanFactory.getBean(beanName, requiredType)__	};resolve,the,specified,bean,name,as,a,candidate,result,of,the,matching,algorithm,for,this,dependency,to,a,bean,instance,from,the,given,factory,p,the,default,implementation,calls,link,bean,factory,get,bean,string,subclasses,may,provide,additional,arguments,or,other,customizations,param,bean,name,the,bean,name,as,a,candidate,result,for,this,dependency,param,required,type,the,expected,type,of,the,bean,as,an,assertion,param,bean,factory,the,associated,factory,return,the,bean,instance,never,code,null,throws,beans,exception,if,the,bean,could,not,be,obtained,since,4,3,2,see,bean,factory,get,bean,string;public,object,resolve,candidate,string,bean,name,class,required,type,bean,factory,bean,factory,throws,beans,exception,return,bean,factory,get,bean,bean,name,required,type
DependencyDescriptor -> public Object resolveCandidate(String beanName, Class<?> requiredType, BeanFactory beanFactory) 			throws BeansException;1482091448;Resolve the specified bean name, as a candidate result of the matching_algorithm for this dependency, to a bean instance from the given factory._<p>The default implementation calls {@link BeanFactory#getBean(String)}._Subclasses may provide additional arguments or other customizations._@param beanName the bean name, as a candidate result for this dependency_@param requiredType the expected type of the bean (as an assertion)_@param beanFactory the associated factory_@return the bean instance (never {@code null})_@throws BeansException if the bean could not be obtained_@since 4.3.2_@see BeanFactory#getBean(String);public Object resolveCandidate(String beanName, Class<?> requiredType, BeanFactory beanFactory)_			throws BeansException {__		return beanFactory.getBean(beanName, requiredType)__	};resolve,the,specified,bean,name,as,a,candidate,result,of,the,matching,algorithm,for,this,dependency,to,a,bean,instance,from,the,given,factory,p,the,default,implementation,calls,link,bean,factory,get,bean,string,subclasses,may,provide,additional,arguments,or,other,customizations,param,bean,name,the,bean,name,as,a,candidate,result,for,this,dependency,param,required,type,the,expected,type,of,the,bean,as,an,assertion,param,bean,factory,the,associated,factory,return,the,bean,instance,never,code,null,throws,beans,exception,if,the,bean,could,not,be,obtained,since,4,3,2,see,bean,factory,get,bean,string;public,object,resolve,candidate,string,bean,name,class,required,type,bean,factory,bean,factory,throws,beans,exception,return,bean,factory,get,bean,bean,name,required,type
DependencyDescriptor -> public Object resolveCandidate(String beanName, Class<?> requiredType, BeanFactory beanFactory) 			throws BeansException;1485277217;Resolve the specified bean name, as a candidate result of the matching_algorithm for this dependency, to a bean instance from the given factory._<p>The default implementation calls {@link BeanFactory#getBean(String)}._Subclasses may provide additional arguments or other customizations._@param beanName the bean name, as a candidate result for this dependency_@param requiredType the expected type of the bean (as an assertion)_@param beanFactory the associated factory_@return the bean instance (never {@code null})_@throws BeansException if the bean could not be obtained_@since 4.3.2_@see BeanFactory#getBean(String);public Object resolveCandidate(String beanName, Class<?> requiredType, BeanFactory beanFactory)_			throws BeansException {__		return beanFactory.getBean(beanName, requiredType)__	};resolve,the,specified,bean,name,as,a,candidate,result,of,the,matching,algorithm,for,this,dependency,to,a,bean,instance,from,the,given,factory,p,the,default,implementation,calls,link,bean,factory,get,bean,string,subclasses,may,provide,additional,arguments,or,other,customizations,param,bean,name,the,bean,name,as,a,candidate,result,for,this,dependency,param,required,type,the,expected,type,of,the,bean,as,an,assertion,param,bean,factory,the,associated,factory,return,the,bean,instance,never,code,null,throws,beans,exception,if,the,bean,could,not,be,obtained,since,4,3,2,see,bean,factory,get,bean,string;public,object,resolve,candidate,string,bean,name,class,required,type,bean,factory,bean,factory,throws,beans,exception,return,bean,factory,get,bean,bean,name,required,type
DependencyDescriptor -> public Object resolveCandidate(String beanName, Class<?> requiredType, BeanFactory beanFactory) 			throws BeansException;1485300605;Resolve the specified bean name, as a candidate result of the matching_algorithm for this dependency, to a bean instance from the given factory._<p>The default implementation calls {@link BeanFactory#getBean(String)}._Subclasses may provide additional arguments or other customizations._@param beanName the bean name, as a candidate result for this dependency_@param requiredType the expected type of the bean (as an assertion)_@param beanFactory the associated factory_@return the bean instance (never {@code null})_@throws BeansException if the bean could not be obtained_@since 4.3.2_@see BeanFactory#getBean(String);public Object resolveCandidate(String beanName, Class<?> requiredType, BeanFactory beanFactory)_			throws BeansException {__		return beanFactory.getBean(beanName, requiredType)__	};resolve,the,specified,bean,name,as,a,candidate,result,of,the,matching,algorithm,for,this,dependency,to,a,bean,instance,from,the,given,factory,p,the,default,implementation,calls,link,bean,factory,get,bean,string,subclasses,may,provide,additional,arguments,or,other,customizations,param,bean,name,the,bean,name,as,a,candidate,result,for,this,dependency,param,required,type,the,expected,type,of,the,bean,as,an,assertion,param,bean,factory,the,associated,factory,return,the,bean,instance,never,code,null,throws,beans,exception,if,the,bean,could,not,be,obtained,since,4,3,2,see,bean,factory,get,bean,string;public,object,resolve,candidate,string,bean,name,class,required,type,bean,factory,bean,factory,throws,beans,exception,return,bean,factory,get,bean,bean,name,required,type
DependencyDescriptor -> public Object resolveCandidate(String beanName, Class<?> requiredType, BeanFactory beanFactory) 			throws BeansException;1495868221;Resolve the specified bean name, as a candidate result of the matching_algorithm for this dependency, to a bean instance from the given factory._<p>The default implementation calls {@link BeanFactory#getBean(String)}._Subclasses may provide additional arguments or other customizations._@param beanName the bean name, as a candidate result for this dependency_@param requiredType the expected type of the bean (as an assertion)_@param beanFactory the associated factory_@return the bean instance (never {@code null})_@throws BeansException if the bean could not be obtained_@since 4.3.2_@see BeanFactory#getBean(String);public Object resolveCandidate(String beanName, Class<?> requiredType, BeanFactory beanFactory)_			throws BeansException {__		return beanFactory.getBean(beanName, requiredType)__	};resolve,the,specified,bean,name,as,a,candidate,result,of,the,matching,algorithm,for,this,dependency,to,a,bean,instance,from,the,given,factory,p,the,default,implementation,calls,link,bean,factory,get,bean,string,subclasses,may,provide,additional,arguments,or,other,customizations,param,bean,name,the,bean,name,as,a,candidate,result,for,this,dependency,param,required,type,the,expected,type,of,the,bean,as,an,assertion,param,bean,factory,the,associated,factory,return,the,bean,instance,never,code,null,throws,beans,exception,if,the,bean,could,not,be,obtained,since,4,3,2,see,bean,factory,get,bean,string;public,object,resolve,candidate,string,bean,name,class,required,type,bean,factory,bean,factory,throws,beans,exception,return,bean,factory,get,bean,bean,name,required,type
DependencyDescriptor -> public Object resolveCandidate(String beanName, Class<?> requiredType, BeanFactory beanFactory) 			throws BeansException;1496837955;Resolve the specified bean name, as a candidate result of the matching_algorithm for this dependency, to a bean instance from the given factory._<p>The default implementation calls {@link BeanFactory#getBean(String)}._Subclasses may provide additional arguments or other customizations._@param beanName the bean name, as a candidate result for this dependency_@param requiredType the expected type of the bean (as an assertion)_@param beanFactory the associated factory_@return the bean instance (never {@code null})_@throws BeansException if the bean could not be obtained_@since 4.3.2_@see BeanFactory#getBean(String);public Object resolveCandidate(String beanName, Class<?> requiredType, BeanFactory beanFactory)_			throws BeansException {__		return beanFactory.getBean(beanName, requiredType)__	};resolve,the,specified,bean,name,as,a,candidate,result,of,the,matching,algorithm,for,this,dependency,to,a,bean,instance,from,the,given,factory,p,the,default,implementation,calls,link,bean,factory,get,bean,string,subclasses,may,provide,additional,arguments,or,other,customizations,param,bean,name,the,bean,name,as,a,candidate,result,for,this,dependency,param,required,type,the,expected,type,of,the,bean,as,an,assertion,param,bean,factory,the,associated,factory,return,the,bean,instance,never,code,null,throws,beans,exception,if,the,bean,could,not,be,obtained,since,4,3,2,see,bean,factory,get,bean,string;public,object,resolve,candidate,string,bean,name,class,required,type,bean,factory,bean,factory,throws,beans,exception,return,bean,factory,get,bean,bean,name,required,type
DependencyDescriptor -> public Object resolveCandidate(String beanName, Class<?> requiredType, BeanFactory beanFactory) 			throws BeansException;1498780456;Resolve the specified bean name, as a candidate result of the matching_algorithm for this dependency, to a bean instance from the given factory._<p>The default implementation calls {@link BeanFactory#getBean(String)}._Subclasses may provide additional arguments or other customizations._@param beanName the bean name, as a candidate result for this dependency_@param requiredType the expected type of the bean (as an assertion)_@param beanFactory the associated factory_@return the bean instance (never {@code null})_@throws BeansException if the bean could not be obtained_@since 4.3.2_@see BeanFactory#getBean(String);public Object resolveCandidate(String beanName, Class<?> requiredType, BeanFactory beanFactory)_			throws BeansException {__		return beanFactory.getBean(beanName, requiredType)__	};resolve,the,specified,bean,name,as,a,candidate,result,of,the,matching,algorithm,for,this,dependency,to,a,bean,instance,from,the,given,factory,p,the,default,implementation,calls,link,bean,factory,get,bean,string,subclasses,may,provide,additional,arguments,or,other,customizations,param,bean,name,the,bean,name,as,a,candidate,result,for,this,dependency,param,required,type,the,expected,type,of,the,bean,as,an,assertion,param,bean,factory,the,associated,factory,return,the,bean,instance,never,code,null,throws,beans,exception,if,the,bean,could,not,be,obtained,since,4,3,2,see,bean,factory,get,bean,string;public,object,resolve,candidate,string,bean,name,class,required,type,bean,factory,bean,factory,throws,beans,exception,return,bean,factory,get,bean,bean,name,required,type
DependencyDescriptor -> public Object resolveCandidate(String beanName, Class<?> requiredType, BeanFactory beanFactory) 			throws BeansException;1503007895;Resolve the specified bean name, as a candidate result of the matching_algorithm for this dependency, to a bean instance from the given factory._<p>The default implementation calls {@link BeanFactory#getBean(String)}._Subclasses may provide additional arguments or other customizations._@param beanName the bean name, as a candidate result for this dependency_@param requiredType the expected type of the bean (as an assertion)_@param beanFactory the associated factory_@return the bean instance (never {@code null})_@throws BeansException if the bean could not be obtained_@since 4.3.2_@see BeanFactory#getBean(String);public Object resolveCandidate(String beanName, Class<?> requiredType, BeanFactory beanFactory)_			throws BeansException {__		return beanFactory.getBean(beanName)__	};resolve,the,specified,bean,name,as,a,candidate,result,of,the,matching,algorithm,for,this,dependency,to,a,bean,instance,from,the,given,factory,p,the,default,implementation,calls,link,bean,factory,get,bean,string,subclasses,may,provide,additional,arguments,or,other,customizations,param,bean,name,the,bean,name,as,a,candidate,result,for,this,dependency,param,required,type,the,expected,type,of,the,bean,as,an,assertion,param,bean,factory,the,associated,factory,return,the,bean,instance,never,code,null,throws,beans,exception,if,the,bean,could,not,be,obtained,since,4,3,2,see,bean,factory,get,bean,string;public,object,resolve,candidate,string,bean,name,class,required,type,bean,factory,bean,factory,throws,beans,exception,return,bean,factory,get,bean,bean,name
DependencyDescriptor -> public Object resolveCandidate(String beanName, Class<?> requiredType, BeanFactory beanFactory) 			throws BeansException;1503272000;Resolve the specified bean name, as a candidate result of the matching_algorithm for this dependency, to a bean instance from the given factory._<p>The default implementation calls {@link BeanFactory#getBean(String)}._Subclasses may provide additional arguments or other customizations._@param beanName the bean name, as a candidate result for this dependency_@param requiredType the expected type of the bean (as an assertion)_@param beanFactory the associated factory_@return the bean instance (never {@code null})_@throws BeansException if the bean could not be obtained_@since 4.3.2_@see BeanFactory#getBean(String);public Object resolveCandidate(String beanName, Class<?> requiredType, BeanFactory beanFactory)_			throws BeansException {__		return beanFactory.getBean(beanName)__	};resolve,the,specified,bean,name,as,a,candidate,result,of,the,matching,algorithm,for,this,dependency,to,a,bean,instance,from,the,given,factory,p,the,default,implementation,calls,link,bean,factory,get,bean,string,subclasses,may,provide,additional,arguments,or,other,customizations,param,bean,name,the,bean,name,as,a,candidate,result,for,this,dependency,param,required,type,the,expected,type,of,the,bean,as,an,assertion,param,bean,factory,the,associated,factory,return,the,bean,instance,never,code,null,throws,beans,exception,if,the,bean,could,not,be,obtained,since,4,3,2,see,bean,factory,get,bean,string;public,object,resolve,candidate,string,bean,name,class,required,type,bean,factory,bean,factory,throws,beans,exception,return,bean,factory,get,bean,bean,name
DependencyDescriptor -> public Object resolveCandidate(String beanName, Class<?> requiredType, BeanFactory beanFactory) 			throws BeansException;1503411745;Resolve the specified bean name, as a candidate result of the matching_algorithm for this dependency, to a bean instance from the given factory._<p>The default implementation calls {@link BeanFactory#getBean(String)}._Subclasses may provide additional arguments or other customizations._@param beanName the bean name, as a candidate result for this dependency_@param requiredType the expected type of the bean (as an assertion)_@param beanFactory the associated factory_@return the bean instance (never {@code null})_@throws BeansException if the bean could not be obtained_@since 4.3.2_@see BeanFactory#getBean(String);public Object resolveCandidate(String beanName, Class<?> requiredType, BeanFactory beanFactory)_			throws BeansException {__		return beanFactory.getBean(beanName)__	};resolve,the,specified,bean,name,as,a,candidate,result,of,the,matching,algorithm,for,this,dependency,to,a,bean,instance,from,the,given,factory,p,the,default,implementation,calls,link,bean,factory,get,bean,string,subclasses,may,provide,additional,arguments,or,other,customizations,param,bean,name,the,bean,name,as,a,candidate,result,for,this,dependency,param,required,type,the,expected,type,of,the,bean,as,an,assertion,param,bean,factory,the,associated,factory,return,the,bean,instance,never,code,null,throws,beans,exception,if,the,bean,could,not,be,obtained,since,4,3,2,see,bean,factory,get,bean,string;public,object,resolve,candidate,string,bean,name,class,required,type,bean,factory,bean,factory,throws,beans,exception,return,bean,factory,get,bean,bean,name
DependencyDescriptor -> public Object resolveCandidate(String beanName, Class<?> requiredType, BeanFactory beanFactory) 			throws BeansException;1506551472;Resolve the specified bean name, as a candidate result of the matching_algorithm for this dependency, to a bean instance from the given factory._<p>The default implementation calls {@link BeanFactory#getBean(String)}._Subclasses may provide additional arguments or other customizations._@param beanName the bean name, as a candidate result for this dependency_@param requiredType the expected type of the bean (as an assertion)_@param beanFactory the associated factory_@return the bean instance (never {@code null})_@throws BeansException if the bean could not be obtained_@since 4.3.2_@see BeanFactory#getBean(String);public Object resolveCandidate(String beanName, Class<?> requiredType, BeanFactory beanFactory)_			throws BeansException {__		return beanFactory.getBean(beanName)__	};resolve,the,specified,bean,name,as,a,candidate,result,of,the,matching,algorithm,for,this,dependency,to,a,bean,instance,from,the,given,factory,p,the,default,implementation,calls,link,bean,factory,get,bean,string,subclasses,may,provide,additional,arguments,or,other,customizations,param,bean,name,the,bean,name,as,a,candidate,result,for,this,dependency,param,required,type,the,expected,type,of,the,bean,as,an,assertion,param,bean,factory,the,associated,factory,return,the,bean,instance,never,code,null,throws,beans,exception,if,the,bean,could,not,be,obtained,since,4,3,2,see,bean,factory,get,bean,string;public,object,resolve,candidate,string,bean,name,class,required,type,bean,factory,bean,factory,throws,beans,exception,return,bean,factory,get,bean,bean,name
DependencyDescriptor -> public Object resolveCandidate(String beanName, Class<?> requiredType, BeanFactory beanFactory) 			throws BeansException;1530174524;Resolve the specified bean name, as a candidate result of the matching_algorithm for this dependency, to a bean instance from the given factory._<p>The default implementation calls {@link BeanFactory#getBean(String)}._Subclasses may provide additional arguments or other customizations._@param beanName the bean name, as a candidate result for this dependency_@param requiredType the expected type of the bean (as an assertion)_@param beanFactory the associated factory_@return the bean instance (never {@code null})_@throws BeansException if the bean could not be obtained_@since 4.3.2_@see BeanFactory#getBean(String);public Object resolveCandidate(String beanName, Class<?> requiredType, BeanFactory beanFactory)_			throws BeansException {__		return beanFactory.getBean(beanName)__	};resolve,the,specified,bean,name,as,a,candidate,result,of,the,matching,algorithm,for,this,dependency,to,a,bean,instance,from,the,given,factory,p,the,default,implementation,calls,link,bean,factory,get,bean,string,subclasses,may,provide,additional,arguments,or,other,customizations,param,bean,name,the,bean,name,as,a,candidate,result,for,this,dependency,param,required,type,the,expected,type,of,the,bean,as,an,assertion,param,bean,factory,the,associated,factory,return,the,bean,instance,never,code,null,throws,beans,exception,if,the,bean,could,not,be,obtained,since,4,3,2,see,bean,factory,get,bean,string;public,object,resolve,candidate,string,bean,name,class,required,type,bean,factory,bean,factory,throws,beans,exception,return,bean,factory,get,bean,bean,name
DependencyDescriptor -> public Object resolveCandidate(String beanName, Class<?> requiredType, BeanFactory beanFactory) 			throws BeansException;1530198749;Resolve the specified bean name, as a candidate result of the matching_algorithm for this dependency, to a bean instance from the given factory._<p>The default implementation calls {@link BeanFactory#getBean(String)}._Subclasses may provide additional arguments or other customizations._@param beanName the bean name, as a candidate result for this dependency_@param requiredType the expected type of the bean (as an assertion)_@param beanFactory the associated factory_@return the bean instance (never {@code null})_@throws BeansException if the bean could not be obtained_@since 4.3.2_@see BeanFactory#getBean(String);public Object resolveCandidate(String beanName, Class<?> requiredType, BeanFactory beanFactory)_			throws BeansException {__		return beanFactory.getBean(beanName)__	};resolve,the,specified,bean,name,as,a,candidate,result,of,the,matching,algorithm,for,this,dependency,to,a,bean,instance,from,the,given,factory,p,the,default,implementation,calls,link,bean,factory,get,bean,string,subclasses,may,provide,additional,arguments,or,other,customizations,param,bean,name,the,bean,name,as,a,candidate,result,for,this,dependency,param,required,type,the,expected,type,of,the,bean,as,an,assertion,param,bean,factory,the,associated,factory,return,the,bean,instance,never,code,null,throws,beans,exception,if,the,bean,could,not,be,obtained,since,4,3,2,see,bean,factory,get,bean,string;public,object,resolve,candidate,string,bean,name,class,required,type,bean,factory,bean,factory,throws,beans,exception,return,bean,factory,get,bean,bean,name
DependencyDescriptor -> public Object resolveCandidate(String beanName, Class<?> requiredType, BeanFactory beanFactory) 			throws BeansException;1530201727;Resolve the specified bean name, as a candidate result of the matching_algorithm for this dependency, to a bean instance from the given factory._<p>The default implementation calls {@link BeanFactory#getBean(String)}._Subclasses may provide additional arguments or other customizations._@param beanName the bean name, as a candidate result for this dependency_@param requiredType the expected type of the bean (as an assertion)_@param beanFactory the associated factory_@return the bean instance (never {@code null})_@throws BeansException if the bean could not be obtained_@since 4.3.2_@see BeanFactory#getBean(String);public Object resolveCandidate(String beanName, Class<?> requiredType, BeanFactory beanFactory)_			throws BeansException {__		return beanFactory.getBean(beanName)__	};resolve,the,specified,bean,name,as,a,candidate,result,of,the,matching,algorithm,for,this,dependency,to,a,bean,instance,from,the,given,factory,p,the,default,implementation,calls,link,bean,factory,get,bean,string,subclasses,may,provide,additional,arguments,or,other,customizations,param,bean,name,the,bean,name,as,a,candidate,result,for,this,dependency,param,required,type,the,expected,type,of,the,bean,as,an,assertion,param,bean,factory,the,associated,factory,return,the,bean,instance,never,code,null,throws,beans,exception,if,the,bean,could,not,be,obtained,since,4,3,2,see,bean,factory,get,bean,string;public,object,resolve,candidate,string,bean,name,class,required,type,bean,factory,bean,factory,throws,beans,exception,return,bean,factory,get,bean,bean,name
DependencyDescriptor -> public Object resolveCandidate(String beanName, Class<?> requiredType, BeanFactory beanFactory) 			throws BeansException;1532274593;Resolve the specified bean name, as a candidate result of the matching_algorithm for this dependency, to a bean instance from the given factory._<p>The default implementation calls {@link BeanFactory#getBean(String)}._Subclasses may provide additional arguments or other customizations._@param beanName the bean name, as a candidate result for this dependency_@param requiredType the expected type of the bean (as an assertion)_@param beanFactory the associated factory_@return the bean instance (never {@code null})_@throws BeansException if the bean could not be obtained_@since 4.3.2_@see BeanFactory#getBean(String);public Object resolveCandidate(String beanName, Class<?> requiredType, BeanFactory beanFactory)_			throws BeansException {__		return beanFactory.getBean(beanName)__	};resolve,the,specified,bean,name,as,a,candidate,result,of,the,matching,algorithm,for,this,dependency,to,a,bean,instance,from,the,given,factory,p,the,default,implementation,calls,link,bean,factory,get,bean,string,subclasses,may,provide,additional,arguments,or,other,customizations,param,bean,name,the,bean,name,as,a,candidate,result,for,this,dependency,param,required,type,the,expected,type,of,the,bean,as,an,assertion,param,bean,factory,the,associated,factory,return,the,bean,instance,never,code,null,throws,beans,exception,if,the,bean,could,not,be,obtained,since,4,3,2,see,bean,factory,get,bean,string;public,object,resolve,candidate,string,bean,name,class,required,type,bean,factory,bean,factory,throws,beans,exception,return,bean,factory,get,bean,bean,name
DependencyDescriptor -> public Object resolveCandidate(String beanName, Class<?> requiredType, BeanFactory beanFactory) 			throws BeansException;1532332488;Resolve the specified bean name, as a candidate result of the matching_algorithm for this dependency, to a bean instance from the given factory._<p>The default implementation calls {@link BeanFactory#getBean(String)}._Subclasses may provide additional arguments or other customizations._@param beanName the bean name, as a candidate result for this dependency_@param requiredType the expected type of the bean (as an assertion)_@param beanFactory the associated factory_@return the bean instance (never {@code null})_@throws BeansException if the bean could not be obtained_@since 4.3.2_@see BeanFactory#getBean(String);public Object resolveCandidate(String beanName, Class<?> requiredType, BeanFactory beanFactory)_			throws BeansException {__		return beanFactory.getBean(beanName)__	};resolve,the,specified,bean,name,as,a,candidate,result,of,the,matching,algorithm,for,this,dependency,to,a,bean,instance,from,the,given,factory,p,the,default,implementation,calls,link,bean,factory,get,bean,string,subclasses,may,provide,additional,arguments,or,other,customizations,param,bean,name,the,bean,name,as,a,candidate,result,for,this,dependency,param,required,type,the,expected,type,of,the,bean,as,an,assertion,param,bean,factory,the,associated,factory,return,the,bean,instance,never,code,null,throws,beans,exception,if,the,bean,could,not,be,obtained,since,4,3,2,see,bean,factory,get,bean,string;public,object,resolve,candidate,string,bean,name,class,required,type,bean,factory,bean,factory,throws,beans,exception,return,bean,factory,get,bean,bean,name
DependencyDescriptor -> public Object resolveCandidate(String beanName, Class<?> requiredType, BeanFactory beanFactory) 			throws BeansException;1532385723;Resolve the specified bean name, as a candidate result of the matching_algorithm for this dependency, to a bean instance from the given factory._<p>The default implementation calls {@link BeanFactory#getBean(String)}._Subclasses may provide additional arguments or other customizations._@param beanName the bean name, as a candidate result for this dependency_@param requiredType the expected type of the bean (as an assertion)_@param beanFactory the associated factory_@return the bean instance (never {@code null})_@throws BeansException if the bean could not be obtained_@since 4.3.2_@see BeanFactory#getBean(String);public Object resolveCandidate(String beanName, Class<?> requiredType, BeanFactory beanFactory)_			throws BeansException {__		return beanFactory.getBean(beanName)__	};resolve,the,specified,bean,name,as,a,candidate,result,of,the,matching,algorithm,for,this,dependency,to,a,bean,instance,from,the,given,factory,p,the,default,implementation,calls,link,bean,factory,get,bean,string,subclasses,may,provide,additional,arguments,or,other,customizations,param,bean,name,the,bean,name,as,a,candidate,result,for,this,dependency,param,required,type,the,expected,type,of,the,bean,as,an,assertion,param,bean,factory,the,associated,factory,return,the,bean,instance,never,code,null,throws,beans,exception,if,the,bean,could,not,be,obtained,since,4,3,2,see,bean,factory,get,bean,string;public,object,resolve,candidate,string,bean,name,class,required,type,bean,factory,bean,factory,throws,beans,exception,return,bean,factory,get,bean,bean,name
DependencyDescriptor -> public Object resolveCandidate(String beanName, Class<?> requiredType, BeanFactory beanFactory) 			throws BeansException;1535039984;Resolve the specified bean name, as a candidate result of the matching_algorithm for this dependency, to a bean instance from the given factory._<p>The default implementation calls {@link BeanFactory#getBean(String)}._Subclasses may provide additional arguments or other customizations._@param beanName the bean name, as a candidate result for this dependency_@param requiredType the expected type of the bean (as an assertion)_@param beanFactory the associated factory_@return the bean instance (never {@code null})_@throws BeansException if the bean could not be obtained_@since 4.3.2_@see BeanFactory#getBean(String);public Object resolveCandidate(String beanName, Class<?> requiredType, BeanFactory beanFactory)_			throws BeansException {__		return beanFactory.getBean(beanName)__	};resolve,the,specified,bean,name,as,a,candidate,result,of,the,matching,algorithm,for,this,dependency,to,a,bean,instance,from,the,given,factory,p,the,default,implementation,calls,link,bean,factory,get,bean,string,subclasses,may,provide,additional,arguments,or,other,customizations,param,bean,name,the,bean,name,as,a,candidate,result,for,this,dependency,param,required,type,the,expected,type,of,the,bean,as,an,assertion,param,bean,factory,the,associated,factory,return,the,bean,instance,never,code,null,throws,beans,exception,if,the,bean,could,not,be,obtained,since,4,3,2,see,bean,factory,get,bean,string;public,object,resolve,candidate,string,bean,name,class,required,type,bean,factory,bean,factory,throws,beans,exception,return,bean,factory,get,bean,bean,name
DependencyDescriptor -> public Object resolveCandidate(String beanName, Class<?> requiredType, BeanFactory beanFactory) 			throws BeansException;1536855799;Resolve the specified bean name, as a candidate result of the matching_algorithm for this dependency, to a bean instance from the given factory._<p>The default implementation calls {@link BeanFactory#getBean(String)}._Subclasses may provide additional arguments or other customizations._@param beanName the bean name, as a candidate result for this dependency_@param requiredType the expected type of the bean (as an assertion)_@param beanFactory the associated factory_@return the bean instance (never {@code null})_@throws BeansException if the bean could not be obtained_@since 4.3.2_@see BeanFactory#getBean(String);public Object resolveCandidate(String beanName, Class<?> requiredType, BeanFactory beanFactory)_			throws BeansException {__		return beanFactory.getBean(beanName)__	};resolve,the,specified,bean,name,as,a,candidate,result,of,the,matching,algorithm,for,this,dependency,to,a,bean,instance,from,the,given,factory,p,the,default,implementation,calls,link,bean,factory,get,bean,string,subclasses,may,provide,additional,arguments,or,other,customizations,param,bean,name,the,bean,name,as,a,candidate,result,for,this,dependency,param,required,type,the,expected,type,of,the,bean,as,an,assertion,param,bean,factory,the,associated,factory,return,the,bean,instance,never,code,null,throws,beans,exception,if,the,bean,could,not,be,obtained,since,4,3,2,see,bean,factory,get,bean,string;public,object,resolve,candidate,string,bean,name,class,required,type,bean,factory,bean,factory,throws,beans,exception,return,bean,factory,get,bean,bean,name
DependencyDescriptor -> public Object resolveCandidate(String beanName, Class<?> requiredType, BeanFactory beanFactory) 			throws BeansException;1546963887;Resolve the specified bean name, as a candidate result of the matching_algorithm for this dependency, to a bean instance from the given factory._<p>The default implementation calls {@link BeanFactory#getBean(String)}._Subclasses may provide additional arguments or other customizations._@param beanName the bean name, as a candidate result for this dependency_@param requiredType the expected type of the bean (as an assertion)_@param beanFactory the associated factory_@return the bean instance (never {@code null})_@throws BeansException if the bean could not be obtained_@since 4.3.2_@see BeanFactory#getBean(String);public Object resolveCandidate(String beanName, Class<?> requiredType, BeanFactory beanFactory)_			throws BeansException {__		return beanFactory.getBean(beanName)__	};resolve,the,specified,bean,name,as,a,candidate,result,of,the,matching,algorithm,for,this,dependency,to,a,bean,instance,from,the,given,factory,p,the,default,implementation,calls,link,bean,factory,get,bean,string,subclasses,may,provide,additional,arguments,or,other,customizations,param,bean,name,the,bean,name,as,a,candidate,result,for,this,dependency,param,required,type,the,expected,type,of,the,bean,as,an,assertion,param,bean,factory,the,associated,factory,return,the,bean,instance,never,code,null,throws,beans,exception,if,the,bean,could,not,be,obtained,since,4,3,2,see,bean,factory,get,bean,string;public,object,resolve,candidate,string,bean,name,class,required,type,bean,factory,bean,factory,throws,beans,exception,return,bean,factory,get,bean,bean,name
