# id;timestamp;commentText;codeText;commentWords;codeWords
Scope -> String getConversationId()_;1328020251;Return the <em>conversation ID</em> for the current underlying scope, if any._<p>The exact meaning of the conversation ID depends on the underlying_storage mechanism. In the case of session-scoped objects, the_conversation ID would typically be equal to (or derived from) the_{@link javax.servlet.http.HttpSession#getId() session ID}_ in the_case of a custom conversation that sits within the overall session,_the specific ID for the current conversation would be appropriate._<p><b>Note: This is an optional operation.</b> It is perfectly valid to_return <code>null</code> in an implementation of this method if the_underlying storage mechanism has no obvious candidate for such an ID._@return the conversation ID, or <code>null</code> if there is no_conversation ID for the current scope;String getConversationId()_;return,the,em,conversation,id,em,for,the,current,underlying,scope,if,any,p,the,exact,meaning,of,the,conversation,id,depends,on,the,underlying,storage,mechanism,in,the,case,of,session,scoped,objects,the,conversation,id,would,typically,be,equal,to,or,derived,from,the,link,javax,servlet,http,http,session,get,id,session,id,in,the,case,of,a,custom,conversation,that,sits,within,the,overall,session,the,specific,id,for,the,current,conversation,would,be,appropriate,p,b,note,this,is,an,optional,operation,b,it,is,perfectly,valid,to,return,code,null,code,in,an,implementation,of,this,method,if,the,underlying,storage,mechanism,has,no,obvious,candidate,for,such,an,id,return,the,conversation,id,or,code,null,code,if,there,is,no,conversation,id,for,the,current,scope;string,get,conversation,id
Scope -> String getConversationId()_;1356735495;Return the <em>conversation ID</em> for the current underlying scope, if any._<p>The exact meaning of the conversation ID depends on the underlying_storage mechanism. In the case of session-scoped objects, the_conversation ID would typically be equal to (or derived from) the_{@link javax.servlet.http.HttpSession#getId() session ID}_ in the_case of a custom conversation that sits within the overall session,_the specific ID for the current conversation would be appropriate._<p><b>Note: This is an optional operation.</b> It is perfectly valid to_return {@code null} in an implementation of this method if the_underlying storage mechanism has no obvious candidate for such an ID._@return the conversation ID, or {@code null} if there is no_conversation ID for the current scope;String getConversationId()_;return,the,em,conversation,id,em,for,the,current,underlying,scope,if,any,p,the,exact,meaning,of,the,conversation,id,depends,on,the,underlying,storage,mechanism,in,the,case,of,session,scoped,objects,the,conversation,id,would,typically,be,equal,to,or,derived,from,the,link,javax,servlet,http,http,session,get,id,session,id,in,the,case,of,a,custom,conversation,that,sits,within,the,overall,session,the,specific,id,for,the,current,conversation,would,be,appropriate,p,b,note,this,is,an,optional,operation,b,it,is,perfectly,valid,to,return,code,null,in,an,implementation,of,this,method,if,the,underlying,storage,mechanism,has,no,obvious,candidate,for,such,an,id,return,the,conversation,id,or,code,null,if,there,is,no,conversation,id,for,the,current,scope;string,get,conversation,id
Scope -> String getConversationId()_;1461047077;Return the <em>conversation ID</em> for the current underlying scope, if any._<p>The exact meaning of the conversation ID depends on the underlying_storage mechanism. In the case of session-scoped objects, the_conversation ID would typically be equal to (or derived from) the_{@link javax.servlet.http.HttpSession#getId() session ID}_ in the_case of a custom conversation that sits within the overall session,_the specific ID for the current conversation would be appropriate._<p><b>Note: This is an optional operation.</b> It is perfectly valid to_return {@code null} in an implementation of this method if the_underlying storage mechanism has no obvious candidate for such an ID._@return the conversation ID, or {@code null} if there is no_conversation ID for the current scope;String getConversationId()_;return,the,em,conversation,id,em,for,the,current,underlying,scope,if,any,p,the,exact,meaning,of,the,conversation,id,depends,on,the,underlying,storage,mechanism,in,the,case,of,session,scoped,objects,the,conversation,id,would,typically,be,equal,to,or,derived,from,the,link,javax,servlet,http,http,session,get,id,session,id,in,the,case,of,a,custom,conversation,that,sits,within,the,overall,session,the,specific,id,for,the,current,conversation,would,be,appropriate,p,b,note,this,is,an,optional,operation,b,it,is,perfectly,valid,to,return,code,null,in,an,implementation,of,this,method,if,the,underlying,storage,mechanism,has,no,obvious,candidate,for,such,an,id,return,the,conversation,id,or,code,null,if,there,is,no,conversation,id,for,the,current,scope;string,get,conversation,id
Scope -> String getConversationId()_;1478538021;Return the <em>conversation ID</em> for the current underlying scope, if any._<p>The exact meaning of the conversation ID depends on the underlying_storage mechanism. In the case of session-scoped objects, the_conversation ID would typically be equal to (or derived from) the_{@link javax.servlet.http.HttpSession#getId() session ID}_ in the_case of a custom conversation that sits within the overall session,_the specific ID for the current conversation would be appropriate._<p><b>Note: This is an optional operation.</b> It is perfectly valid to_return {@code null} in an implementation of this method if the_underlying storage mechanism has no obvious candidate for such an ID._@return the conversation ID, or {@code null} if there is no_conversation ID for the current scope_@throws IllegalStateException if the underlying scope is not currently active;String getConversationId()_;return,the,em,conversation,id,em,for,the,current,underlying,scope,if,any,p,the,exact,meaning,of,the,conversation,id,depends,on,the,underlying,storage,mechanism,in,the,case,of,session,scoped,objects,the,conversation,id,would,typically,be,equal,to,or,derived,from,the,link,javax,servlet,http,http,session,get,id,session,id,in,the,case,of,a,custom,conversation,that,sits,within,the,overall,session,the,specific,id,for,the,current,conversation,would,be,appropriate,p,b,note,this,is,an,optional,operation,b,it,is,perfectly,valid,to,return,code,null,in,an,implementation,of,this,method,if,the,underlying,storage,mechanism,has,no,obvious,candidate,for,such,an,id,return,the,conversation,id,or,code,null,if,there,is,no,conversation,id,for,the,current,scope,throws,illegal,state,exception,if,the,underlying,scope,is,not,currently,active;string,get,conversation,id
Scope -> Object get(String name, ObjectFactory<?> objectFactory)_;1328020251;Return the object with the given name from the underlying scope,_{@link org.springframework.beans.factory.ObjectFactory#getObject() creating it}_if not found in the underlying storage mechanism._<p>This is the central operation of a Scope, and the only operation_that is absolutely required._@param name the name of the object to retrieve_@param objectFactory the {@link ObjectFactory} to use to create the scoped_object if it is not present in the underlying storage mechanism_@return the desired object (never <code>null</code>);Object get(String name, ObjectFactory<?> objectFactory)_;return,the,object,with,the,given,name,from,the,underlying,scope,link,org,springframework,beans,factory,object,factory,get,object,creating,it,if,not,found,in,the,underlying,storage,mechanism,p,this,is,the,central,operation,of,a,scope,and,the,only,operation,that,is,absolutely,required,param,name,the,name,of,the,object,to,retrieve,param,object,factory,the,link,object,factory,to,use,to,create,the,scoped,object,if,it,is,not,present,in,the,underlying,storage,mechanism,return,the,desired,object,never,code,null,code;object,get,string,name,object,factory,object,factory
Scope -> Object get(String name, ObjectFactory<?> objectFactory)_;1356735495;Return the object with the given name from the underlying scope,_{@link org.springframework.beans.factory.ObjectFactory#getObject() creating it}_if not found in the underlying storage mechanism._<p>This is the central operation of a Scope, and the only operation_that is absolutely required._@param name the name of the object to retrieve_@param objectFactory the {@link ObjectFactory} to use to create the scoped_object if it is not present in the underlying storage mechanism_@return the desired object (never {@code null});Object get(String name, ObjectFactory<?> objectFactory)_;return,the,object,with,the,given,name,from,the,underlying,scope,link,org,springframework,beans,factory,object,factory,get,object,creating,it,if,not,found,in,the,underlying,storage,mechanism,p,this,is,the,central,operation,of,a,scope,and,the,only,operation,that,is,absolutely,required,param,name,the,name,of,the,object,to,retrieve,param,object,factory,the,link,object,factory,to,use,to,create,the,scoped,object,if,it,is,not,present,in,the,underlying,storage,mechanism,return,the,desired,object,never,code,null;object,get,string,name,object,factory,object,factory
Scope -> Object get(String name, ObjectFactory<?> objectFactory)_;1461047077;Return the object with the given name from the underlying scope,_{@link org.springframework.beans.factory.ObjectFactory#getObject() creating it}_if not found in the underlying storage mechanism._<p>This is the central operation of a Scope, and the only operation_that is absolutely required._@param name the name of the object to retrieve_@param objectFactory the {@link ObjectFactory} to use to create the scoped_object if it is not present in the underlying storage mechanism_@return the desired object (never {@code null});Object get(String name, ObjectFactory<?> objectFactory)_;return,the,object,with,the,given,name,from,the,underlying,scope,link,org,springframework,beans,factory,object,factory,get,object,creating,it,if,not,found,in,the,underlying,storage,mechanism,p,this,is,the,central,operation,of,a,scope,and,the,only,operation,that,is,absolutely,required,param,name,the,name,of,the,object,to,retrieve,param,object,factory,the,link,object,factory,to,use,to,create,the,scoped,object,if,it,is,not,present,in,the,underlying,storage,mechanism,return,the,desired,object,never,code,null;object,get,string,name,object,factory,object,factory
Scope -> Object get(String name, ObjectFactory<?> objectFactory)_;1478538021;Return the object with the given name from the underlying scope,_{@link org.springframework.beans.factory.ObjectFactory#getObject() creating it}_if not found in the underlying storage mechanism._<p>This is the central operation of a Scope, and the only operation_that is absolutely required._@param name the name of the object to retrieve_@param objectFactory the {@link ObjectFactory} to use to create the scoped_object if it is not present in the underlying storage mechanism_@return the desired object (never {@code null})_@throws IllegalStateException if the underlying scope is not currently active;Object get(String name, ObjectFactory<?> objectFactory)_;return,the,object,with,the,given,name,from,the,underlying,scope,link,org,springframework,beans,factory,object,factory,get,object,creating,it,if,not,found,in,the,underlying,storage,mechanism,p,this,is,the,central,operation,of,a,scope,and,the,only,operation,that,is,absolutely,required,param,name,the,name,of,the,object,to,retrieve,param,object,factory,the,link,object,factory,to,use,to,create,the,scoped,object,if,it,is,not,present,in,the,underlying,storage,mechanism,return,the,desired,object,never,code,null,throws,illegal,state,exception,if,the,underlying,scope,is,not,currently,active;object,get,string,name,object,factory,object,factory
Scope -> Object get(String name, ObjectFactory<?> objectFactory)_;1495868221;Return the object with the given name from the underlying scope,_{@link org.springframework.beans.factory.ObjectFactory#getObject() creating it}_if not found in the underlying storage mechanism._<p>This is the central operation of a Scope, and the only operation_that is absolutely required._@param name the name of the object to retrieve_@param objectFactory the {@link ObjectFactory} to use to create the scoped_object if it is not present in the underlying storage mechanism_@return the desired object (never {@code null})_@throws IllegalStateException if the underlying scope is not currently active;Object get(String name, ObjectFactory<?> objectFactory)_;return,the,object,with,the,given,name,from,the,underlying,scope,link,org,springframework,beans,factory,object,factory,get,object,creating,it,if,not,found,in,the,underlying,storage,mechanism,p,this,is,the,central,operation,of,a,scope,and,the,only,operation,that,is,absolutely,required,param,name,the,name,of,the,object,to,retrieve,param,object,factory,the,link,object,factory,to,use,to,create,the,scoped,object,if,it,is,not,present,in,the,underlying,storage,mechanism,return,the,desired,object,never,code,null,throws,illegal,state,exception,if,the,underlying,scope,is,not,currently,active;object,get,string,name,object,factory,object,factory
Scope -> Object remove(String name)_;1328020251;Remove the object with the given <code>name</code> from the underlying scope._<p>Returns <code>null</code> if no object was found_ otherwise_returns the removed <code>Object</code>._<p>Note that an implementation should also remove a registered destruction_callback for the specified object, if any. It does, however, <i>not</i>_need to <i>execute</i> a registered destruction callback in this case,_since the object will be destroyed by the caller (if appropriate)._<p><b>Note: This is an optional operation.</b> Implementations may throw_{@link UnsupportedOperationException} if they do not support explicitly_removing an object._@param name the name of the object to remove_@return the removed object, or <code>null</code> if no object was present_@see #registerDestructionCallback;Object remove(String name)_;remove,the,object,with,the,given,code,name,code,from,the,underlying,scope,p,returns,code,null,code,if,no,object,was,found,otherwise,returns,the,removed,code,object,code,p,note,that,an,implementation,should,also,remove,a,registered,destruction,callback,for,the,specified,object,if,any,it,does,however,i,not,i,need,to,i,execute,i,a,registered,destruction,callback,in,this,case,since,the,object,will,be,destroyed,by,the,caller,if,appropriate,p,b,note,this,is,an,optional,operation,b,implementations,may,throw,link,unsupported,operation,exception,if,they,do,not,support,explicitly,removing,an,object,param,name,the,name,of,the,object,to,remove,return,the,removed,object,or,code,null,code,if,no,object,was,present,see,register,destruction,callback;object,remove,string,name
Scope -> Object remove(String name)_;1356735495;Remove the object with the given {@code name} from the underlying scope._<p>Returns {@code null} if no object was found_ otherwise_returns the removed {@code Object}._<p>Note that an implementation should also remove a registered destruction_callback for the specified object, if any. It does, however, <i>not</i>_need to <i>execute</i> a registered destruction callback in this case,_since the object will be destroyed by the caller (if appropriate)._<p><b>Note: This is an optional operation.</b> Implementations may throw_{@link UnsupportedOperationException} if they do not support explicitly_removing an object._@param name the name of the object to remove_@return the removed object, or {@code null} if no object was present_@see #registerDestructionCallback;Object remove(String name)_;remove,the,object,with,the,given,code,name,from,the,underlying,scope,p,returns,code,null,if,no,object,was,found,otherwise,returns,the,removed,code,object,p,note,that,an,implementation,should,also,remove,a,registered,destruction,callback,for,the,specified,object,if,any,it,does,however,i,not,i,need,to,i,execute,i,a,registered,destruction,callback,in,this,case,since,the,object,will,be,destroyed,by,the,caller,if,appropriate,p,b,note,this,is,an,optional,operation,b,implementations,may,throw,link,unsupported,operation,exception,if,they,do,not,support,explicitly,removing,an,object,param,name,the,name,of,the,object,to,remove,return,the,removed,object,or,code,null,if,no,object,was,present,see,register,destruction,callback;object,remove,string,name
Scope -> Object remove(String name)_;1461047077;Remove the object with the given {@code name} from the underlying scope._<p>Returns {@code null} if no object was found_ otherwise_returns the removed {@code Object}._<p>Note that an implementation should also remove a registered destruction_callback for the specified object, if any. It does, however, <i>not</i>_need to <i>execute</i> a registered destruction callback in this case,_since the object will be destroyed by the caller (if appropriate)._<p><b>Note: This is an optional operation.</b> Implementations may throw_{@link UnsupportedOperationException} if they do not support explicitly_removing an object._@param name the name of the object to remove_@return the removed object, or {@code null} if no object was present_@see #registerDestructionCallback;Object remove(String name)_;remove,the,object,with,the,given,code,name,from,the,underlying,scope,p,returns,code,null,if,no,object,was,found,otherwise,returns,the,removed,code,object,p,note,that,an,implementation,should,also,remove,a,registered,destruction,callback,for,the,specified,object,if,any,it,does,however,i,not,i,need,to,i,execute,i,a,registered,destruction,callback,in,this,case,since,the,object,will,be,destroyed,by,the,caller,if,appropriate,p,b,note,this,is,an,optional,operation,b,implementations,may,throw,link,unsupported,operation,exception,if,they,do,not,support,explicitly,removing,an,object,param,name,the,name,of,the,object,to,remove,return,the,removed,object,or,code,null,if,no,object,was,present,see,register,destruction,callback;object,remove,string,name
Scope -> Object remove(String name)_;1478538021;Remove the object with the given {@code name} from the underlying scope._<p>Returns {@code null} if no object was found_ otherwise_returns the removed {@code Object}._<p>Note that an implementation should also remove a registered destruction_callback for the specified object, if any. It does, however, <i>not</i>_need to <i>execute</i> a registered destruction callback in this case,_since the object will be destroyed by the caller (if appropriate)._<p><b>Note: This is an optional operation.</b> Implementations may throw_{@link UnsupportedOperationException} if they do not support explicitly_removing an object._@param name the name of the object to remove_@return the removed object, or {@code null} if no object was present_@throws IllegalStateException if the underlying scope is not currently active_@see #registerDestructionCallback;Object remove(String name)_;remove,the,object,with,the,given,code,name,from,the,underlying,scope,p,returns,code,null,if,no,object,was,found,otherwise,returns,the,removed,code,object,p,note,that,an,implementation,should,also,remove,a,registered,destruction,callback,for,the,specified,object,if,any,it,does,however,i,not,i,need,to,i,execute,i,a,registered,destruction,callback,in,this,case,since,the,object,will,be,destroyed,by,the,caller,if,appropriate,p,b,note,this,is,an,optional,operation,b,implementations,may,throw,link,unsupported,operation,exception,if,they,do,not,support,explicitly,removing,an,object,param,name,the,name,of,the,object,to,remove,return,the,removed,object,or,code,null,if,no,object,was,present,throws,illegal,state,exception,if,the,underlying,scope,is,not,currently,active,see,register,destruction,callback;object,remove,string,name
Scope -> Object resolveContextualObject(String key)_;1328020251;Resolve the contextual object for the given key, if any._E.g. the HttpServletRequest object for key "request"._@param key the contextual key_@return the corresponding object, or <code>null</code> if none found;Object resolveContextualObject(String key)_;resolve,the,contextual,object,for,the,given,key,if,any,e,g,the,http,servlet,request,object,for,key,request,param,key,the,contextual,key,return,the,corresponding,object,or,code,null,code,if,none,found;object,resolve,contextual,object,string,key
Scope -> Object resolveContextualObject(String key)_;1356735495;Resolve the contextual object for the given key, if any._E.g. the HttpServletRequest object for key "request"._@param key the contextual key_@return the corresponding object, or {@code null} if none found;Object resolveContextualObject(String key)_;resolve,the,contextual,object,for,the,given,key,if,any,e,g,the,http,servlet,request,object,for,key,request,param,key,the,contextual,key,return,the,corresponding,object,or,code,null,if,none,found;object,resolve,contextual,object,string,key
Scope -> Object resolveContextualObject(String key)_;1461047077;Resolve the contextual object for the given key, if any._E.g. the HttpServletRequest object for key "request"._@param key the contextual key_@return the corresponding object, or {@code null} if none found;Object resolveContextualObject(String key)_;resolve,the,contextual,object,for,the,given,key,if,any,e,g,the,http,servlet,request,object,for,key,request,param,key,the,contextual,key,return,the,corresponding,object,or,code,null,if,none,found;object,resolve,contextual,object,string,key
Scope -> Object resolveContextualObject(String key)_;1478538021;Resolve the contextual object for the given key, if any._E.g. the HttpServletRequest object for key "request"._@param key the contextual key_@return the corresponding object, or {@code null} if none found_@throws IllegalStateException if the underlying scope is not currently active;Object resolveContextualObject(String key)_;resolve,the,contextual,object,for,the,given,key,if,any,e,g,the,http,servlet,request,object,for,key,request,param,key,the,contextual,key,return,the,corresponding,object,or,code,null,if,none,found,throws,illegal,state,exception,if,the,underlying,scope,is,not,currently,active;object,resolve,contextual,object,string,key
Scope -> void registerDestructionCallback(String name, Runnable callback)_;1328020251;Register a callback to be executed on destruction of the specified_object in the scope (or at destruction of the entire scope, if the_scope does not destroy individual objects but rather only terminates_in its entirety)._<p><b>Note: This is an optional operation.</b> This method will only_be called for scoped beans with actual destruction configuration_(DisposableBean, destroy-method, DestructionAwareBeanPostProcessor)._Implementations should do their best to execute a given callback_at the appropriate time. If such a callback is not supported by the_underlying runtime environment at all, the callback <i>must be_ignored and a corresponding warning should be logged</i>._<p>Note that 'destruction' refers to to automatic destruction of_the object as part of the scope's own lifecycle, not to the individual_scoped object having been explicitly removed by the application._If a scoped object gets removed via this facade's {@link #remove(String)}_method, any registered destruction callback should be removed as well,_assuming that the removed object will be reused or manually destroyed._@param name the name of the object to execute the destruction callback for_@param callback the destruction callback to be executed._Note that the passed-in Runnable will never throw an exception,_so it can safely be executed without an enclosing try-catch block._Furthermore, the Runnable will usually be serializable, provided_that its target object is serializable as well._@see org.springframework.beans.factory.DisposableBean_@see org.springframework.beans.factory.support.AbstractBeanDefinition#getDestroyMethodName()_@see DestructionAwareBeanPostProcessor;void registerDestructionCallback(String name, Runnable callback)_;register,a,callback,to,be,executed,on,destruction,of,the,specified,object,in,the,scope,or,at,destruction,of,the,entire,scope,if,the,scope,does,not,destroy,individual,objects,but,rather,only,terminates,in,its,entirety,p,b,note,this,is,an,optional,operation,b,this,method,will,only,be,called,for,scoped,beans,with,actual,destruction,configuration,disposable,bean,destroy,method,destruction,aware,bean,post,processor,implementations,should,do,their,best,to,execute,a,given,callback,at,the,appropriate,time,if,such,a,callback,is,not,supported,by,the,underlying,runtime,environment,at,all,the,callback,i,must,be,ignored,and,a,corresponding,warning,should,be,logged,i,p,note,that,destruction,refers,to,to,automatic,destruction,of,the,object,as,part,of,the,scope,s,own,lifecycle,not,to,the,individual,scoped,object,having,been,explicitly,removed,by,the,application,if,a,scoped,object,gets,removed,via,this,facade,s,link,remove,string,method,any,registered,destruction,callback,should,be,removed,as,well,assuming,that,the,removed,object,will,be,reused,or,manually,destroyed,param,name,the,name,of,the,object,to,execute,the,destruction,callback,for,param,callback,the,destruction,callback,to,be,executed,note,that,the,passed,in,runnable,will,never,throw,an,exception,so,it,can,safely,be,executed,without,an,enclosing,try,catch,block,furthermore,the,runnable,will,usually,be,serializable,provided,that,its,target,object,is,serializable,as,well,see,org,springframework,beans,factory,disposable,bean,see,org,springframework,beans,factory,support,abstract,bean,definition,get,destroy,method,name,see,destruction,aware,bean,post,processor;void,register,destruction,callback,string,name,runnable,callback
Scope -> void registerDestructionCallback(String name, Runnable callback)_;1356735495;Register a callback to be executed on destruction of the specified_object in the scope (or at destruction of the entire scope, if the_scope does not destroy individual objects but rather only terminates_in its entirety)._<p><b>Note: This is an optional operation.</b> This method will only_be called for scoped beans with actual destruction configuration_(DisposableBean, destroy-method, DestructionAwareBeanPostProcessor)._Implementations should do their best to execute a given callback_at the appropriate time. If such a callback is not supported by the_underlying runtime environment at all, the callback <i>must be_ignored and a corresponding warning should be logged</i>._<p>Note that 'destruction' refers to to automatic destruction of_the object as part of the scope's own lifecycle, not to the individual_scoped object having been explicitly removed by the application._If a scoped object gets removed via this facade's {@link #remove(String)}_method, any registered destruction callback should be removed as well,_assuming that the removed object will be reused or manually destroyed._@param name the name of the object to execute the destruction callback for_@param callback the destruction callback to be executed._Note that the passed-in Runnable will never throw an exception,_so it can safely be executed without an enclosing try-catch block._Furthermore, the Runnable will usually be serializable, provided_that its target object is serializable as well._@see org.springframework.beans.factory.DisposableBean_@see org.springframework.beans.factory.support.AbstractBeanDefinition#getDestroyMethodName()_@see DestructionAwareBeanPostProcessor;void registerDestructionCallback(String name, Runnable callback)_;register,a,callback,to,be,executed,on,destruction,of,the,specified,object,in,the,scope,or,at,destruction,of,the,entire,scope,if,the,scope,does,not,destroy,individual,objects,but,rather,only,terminates,in,its,entirety,p,b,note,this,is,an,optional,operation,b,this,method,will,only,be,called,for,scoped,beans,with,actual,destruction,configuration,disposable,bean,destroy,method,destruction,aware,bean,post,processor,implementations,should,do,their,best,to,execute,a,given,callback,at,the,appropriate,time,if,such,a,callback,is,not,supported,by,the,underlying,runtime,environment,at,all,the,callback,i,must,be,ignored,and,a,corresponding,warning,should,be,logged,i,p,note,that,destruction,refers,to,to,automatic,destruction,of,the,object,as,part,of,the,scope,s,own,lifecycle,not,to,the,individual,scoped,object,having,been,explicitly,removed,by,the,application,if,a,scoped,object,gets,removed,via,this,facade,s,link,remove,string,method,any,registered,destruction,callback,should,be,removed,as,well,assuming,that,the,removed,object,will,be,reused,or,manually,destroyed,param,name,the,name,of,the,object,to,execute,the,destruction,callback,for,param,callback,the,destruction,callback,to,be,executed,note,that,the,passed,in,runnable,will,never,throw,an,exception,so,it,can,safely,be,executed,without,an,enclosing,try,catch,block,furthermore,the,runnable,will,usually,be,serializable,provided,that,its,target,object,is,serializable,as,well,see,org,springframework,beans,factory,disposable,bean,see,org,springframework,beans,factory,support,abstract,bean,definition,get,destroy,method,name,see,destruction,aware,bean,post,processor;void,register,destruction,callback,string,name,runnable,callback
Scope -> void registerDestructionCallback(String name, Runnable callback)_;1461047077;Register a callback to be executed on destruction of the specified_object in the scope (or at destruction of the entire scope, if the_scope does not destroy individual objects but rather only terminates_in its entirety)._<p><b>Note: This is an optional operation.</b> This method will only_be called for scoped beans with actual destruction configuration_(DisposableBean, destroy-method, DestructionAwareBeanPostProcessor)._Implementations should do their best to execute a given callback_at the appropriate time. If such a callback is not supported by the_underlying runtime environment at all, the callback <i>must be_ignored and a corresponding warning should be logged</i>._<p>Note that 'destruction' refers to automatic destruction of_the object as part of the scope's own lifecycle, not to the individual_scoped object having been explicitly removed by the application._If a scoped object gets removed via this facade's {@link #remove(String)}_method, any registered destruction callback should be removed as well,_assuming that the removed object will be reused or manually destroyed._@param name the name of the object to execute the destruction callback for_@param callback the destruction callback to be executed._Note that the passed-in Runnable will never throw an exception,_so it can safely be executed without an enclosing try-catch block._Furthermore, the Runnable will usually be serializable, provided_that its target object is serializable as well._@see org.springframework.beans.factory.DisposableBean_@see org.springframework.beans.factory.support.AbstractBeanDefinition#getDestroyMethodName()_@see DestructionAwareBeanPostProcessor;void registerDestructionCallback(String name, Runnable callback)_;register,a,callback,to,be,executed,on,destruction,of,the,specified,object,in,the,scope,or,at,destruction,of,the,entire,scope,if,the,scope,does,not,destroy,individual,objects,but,rather,only,terminates,in,its,entirety,p,b,note,this,is,an,optional,operation,b,this,method,will,only,be,called,for,scoped,beans,with,actual,destruction,configuration,disposable,bean,destroy,method,destruction,aware,bean,post,processor,implementations,should,do,their,best,to,execute,a,given,callback,at,the,appropriate,time,if,such,a,callback,is,not,supported,by,the,underlying,runtime,environment,at,all,the,callback,i,must,be,ignored,and,a,corresponding,warning,should,be,logged,i,p,note,that,destruction,refers,to,automatic,destruction,of,the,object,as,part,of,the,scope,s,own,lifecycle,not,to,the,individual,scoped,object,having,been,explicitly,removed,by,the,application,if,a,scoped,object,gets,removed,via,this,facade,s,link,remove,string,method,any,registered,destruction,callback,should,be,removed,as,well,assuming,that,the,removed,object,will,be,reused,or,manually,destroyed,param,name,the,name,of,the,object,to,execute,the,destruction,callback,for,param,callback,the,destruction,callback,to,be,executed,note,that,the,passed,in,runnable,will,never,throw,an,exception,so,it,can,safely,be,executed,without,an,enclosing,try,catch,block,furthermore,the,runnable,will,usually,be,serializable,provided,that,its,target,object,is,serializable,as,well,see,org,springframework,beans,factory,disposable,bean,see,org,springframework,beans,factory,support,abstract,bean,definition,get,destroy,method,name,see,destruction,aware,bean,post,processor;void,register,destruction,callback,string,name,runnable,callback
Scope -> void registerDestructionCallback(String name, Runnable callback)_;1478538021;Register a callback to be executed on destruction of the specified_object in the scope (or at destruction of the entire scope, if the_scope does not destroy individual objects but rather only terminates_in its entirety)._<p><b>Note: This is an optional operation.</b> This method will only_be called for scoped beans with actual destruction configuration_(DisposableBean, destroy-method, DestructionAwareBeanPostProcessor)._Implementations should do their best to execute a given callback_at the appropriate time. If such a callback is not supported by the_underlying runtime environment at all, the callback <i>must be_ignored and a corresponding warning should be logged</i>._<p>Note that 'destruction' refers to automatic destruction of_the object as part of the scope's own lifecycle, not to the individual_scoped object having been explicitly removed by the application._If a scoped object gets removed via this facade's {@link #remove(String)}_method, any registered destruction callback should be removed as well,_assuming that the removed object will be reused or manually destroyed._@param name the name of the object to execute the destruction callback for_@param callback the destruction callback to be executed._Note that the passed-in Runnable will never throw an exception,_so it can safely be executed without an enclosing try-catch block._Furthermore, the Runnable will usually be serializable, provided_that its target object is serializable as well._@throws IllegalStateException if the underlying scope is not currently active_@see org.springframework.beans.factory.DisposableBean_@see org.springframework.beans.factory.support.AbstractBeanDefinition#getDestroyMethodName()_@see DestructionAwareBeanPostProcessor;void registerDestructionCallback(String name, Runnable callback)_;register,a,callback,to,be,executed,on,destruction,of,the,specified,object,in,the,scope,or,at,destruction,of,the,entire,scope,if,the,scope,does,not,destroy,individual,objects,but,rather,only,terminates,in,its,entirety,p,b,note,this,is,an,optional,operation,b,this,method,will,only,be,called,for,scoped,beans,with,actual,destruction,configuration,disposable,bean,destroy,method,destruction,aware,bean,post,processor,implementations,should,do,their,best,to,execute,a,given,callback,at,the,appropriate,time,if,such,a,callback,is,not,supported,by,the,underlying,runtime,environment,at,all,the,callback,i,must,be,ignored,and,a,corresponding,warning,should,be,logged,i,p,note,that,destruction,refers,to,automatic,destruction,of,the,object,as,part,of,the,scope,s,own,lifecycle,not,to,the,individual,scoped,object,having,been,explicitly,removed,by,the,application,if,a,scoped,object,gets,removed,via,this,facade,s,link,remove,string,method,any,registered,destruction,callback,should,be,removed,as,well,assuming,that,the,removed,object,will,be,reused,or,manually,destroyed,param,name,the,name,of,the,object,to,execute,the,destruction,callback,for,param,callback,the,destruction,callback,to,be,executed,note,that,the,passed,in,runnable,will,never,throw,an,exception,so,it,can,safely,be,executed,without,an,enclosing,try,catch,block,furthermore,the,runnable,will,usually,be,serializable,provided,that,its,target,object,is,serializable,as,well,throws,illegal,state,exception,if,the,underlying,scope,is,not,currently,active,see,org,springframework,beans,factory,disposable,bean,see,org,springframework,beans,factory,support,abstract,bean,definition,get,destroy,method,name,see,destruction,aware,bean,post,processor;void,register,destruction,callback,string,name,runnable,callback
Scope -> void registerDestructionCallback(String name, Runnable callback)_;1495868221;Register a callback to be executed on destruction of the specified_object in the scope (or at destruction of the entire scope, if the_scope does not destroy individual objects but rather only terminates_in its entirety)._<p><b>Note: This is an optional operation.</b> This method will only_be called for scoped beans with actual destruction configuration_(DisposableBean, destroy-method, DestructionAwareBeanPostProcessor)._Implementations should do their best to execute a given callback_at the appropriate time. If such a callback is not supported by the_underlying runtime environment at all, the callback <i>must be_ignored and a corresponding warning should be logged</i>._<p>Note that 'destruction' refers to automatic destruction of_the object as part of the scope's own lifecycle, not to the individual_scoped object having been explicitly removed by the application._If a scoped object gets removed via this facade's {@link #remove(String)}_method, any registered destruction callback should be removed as well,_assuming that the removed object will be reused or manually destroyed._@param name the name of the object to execute the destruction callback for_@param callback the destruction callback to be executed._Note that the passed-in Runnable will never throw an exception,_so it can safely be executed without an enclosing try-catch block._Furthermore, the Runnable will usually be serializable, provided_that its target object is serializable as well._@throws IllegalStateException if the underlying scope is not currently active_@see org.springframework.beans.factory.DisposableBean_@see org.springframework.beans.factory.support.AbstractBeanDefinition#getDestroyMethodName()_@see DestructionAwareBeanPostProcessor;void registerDestructionCallback(String name, Runnable callback)_;register,a,callback,to,be,executed,on,destruction,of,the,specified,object,in,the,scope,or,at,destruction,of,the,entire,scope,if,the,scope,does,not,destroy,individual,objects,but,rather,only,terminates,in,its,entirety,p,b,note,this,is,an,optional,operation,b,this,method,will,only,be,called,for,scoped,beans,with,actual,destruction,configuration,disposable,bean,destroy,method,destruction,aware,bean,post,processor,implementations,should,do,their,best,to,execute,a,given,callback,at,the,appropriate,time,if,such,a,callback,is,not,supported,by,the,underlying,runtime,environment,at,all,the,callback,i,must,be,ignored,and,a,corresponding,warning,should,be,logged,i,p,note,that,destruction,refers,to,automatic,destruction,of,the,object,as,part,of,the,scope,s,own,lifecycle,not,to,the,individual,scoped,object,having,been,explicitly,removed,by,the,application,if,a,scoped,object,gets,removed,via,this,facade,s,link,remove,string,method,any,registered,destruction,callback,should,be,removed,as,well,assuming,that,the,removed,object,will,be,reused,or,manually,destroyed,param,name,the,name,of,the,object,to,execute,the,destruction,callback,for,param,callback,the,destruction,callback,to,be,executed,note,that,the,passed,in,runnable,will,never,throw,an,exception,so,it,can,safely,be,executed,without,an,enclosing,try,catch,block,furthermore,the,runnable,will,usually,be,serializable,provided,that,its,target,object,is,serializable,as,well,throws,illegal,state,exception,if,the,underlying,scope,is,not,currently,active,see,org,springframework,beans,factory,disposable,bean,see,org,springframework,beans,factory,support,abstract,bean,definition,get,destroy,method,name,see,destruction,aware,bean,post,processor;void,register,destruction,callback,string,name,runnable,callback
