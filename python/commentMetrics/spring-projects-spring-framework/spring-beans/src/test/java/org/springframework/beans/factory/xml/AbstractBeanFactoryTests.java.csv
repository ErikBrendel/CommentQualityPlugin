# id;timestamp;commentText;codeText;commentWords;codeWords
MustBeInitialized -> public void businessMethod();1328020251;Dummy business method that will fail unless the factory_managed the bean's lifecycle correctly;public void businessMethod() {_		if (!this.inited)_			throw new RuntimeException("Factory didn't call afterPropertiesSet() on MustBeInitialized object")__	};dummy,business,method,that,will,fail,unless,the,factory,managed,the,bean,s,lifecycle,correctly;public,void,business,method,if,this,inited,throw,new,runtime,exception,factory,didn,t,call,after,properties,set,on,must,be,initialized,object
MustBeInitialized -> public void businessMethod();1356735495;Dummy business method that will fail unless the factory_managed the bean's lifecycle correctly;public void businessMethod() {_		if (!this.inited)_			throw new RuntimeException("Factory didn't call afterPropertiesSet() on MustBeInitialized object")__	};dummy,business,method,that,will,fail,unless,the,factory,managed,the,bean,s,lifecycle,correctly;public,void,business,method,if,this,inited,throw,new,runtime,exception,factory,didn,t,call,after,properties,set,on,must,be,initialized,object
MustBeInitialized -> public void businessMethod();1357119417;Dummy business method that will fail unless the factory_managed the bean's lifecycle correctly;public void businessMethod() {_		if (!this.inited)_			throw new RuntimeException("Factory didn't call afterPropertiesSet() on MustBeInitialized object")__	};dummy,business,method,that,will,fail,unless,the,factory,managed,the,bean,s,lifecycle,correctly;public,void,business,method,if,this,inited,throw,new,runtime,exception,factory,didn,t,call,after,properties,set,on,must,be,initialized,object
AbstractBeanFactoryTests -> public void testFactoryIsInitialized() throws Exception;1328020251;Check that afterPropertiesSet gets called on factory_@throws Exception;public void testFactoryIsInitialized() throws Exception {_		TestBean tb = (TestBean) getBeanFactory().getBean("singletonFactory")__		DummyFactory factory = (DummyFactory) getBeanFactory().getBean("&singletonFactory")__		assertTrue("Factory was initialized because it implemented InitializingBean", factory.wasInitialized())__	};check,that,after,properties,set,gets,called,on,factory,throws,exception;public,void,test,factory,is,initialized,throws,exception,test,bean,tb,test,bean,get,bean,factory,get,bean,singleton,factory,dummy,factory,factory,dummy,factory,get,bean,factory,get,bean,singleton,factory,assert,true,factory,was,initialized,because,it,implemented,initializing,bean,factory,was,initialized
AbstractBeanFactoryTests -> public void testFactoryIsInitialized() throws Exception;1356735495;Check that afterPropertiesSet gets called on factory_@throws Exception;public void testFactoryIsInitialized() throws Exception {_		TestBean tb = (TestBean) getBeanFactory().getBean("singletonFactory")__		DummyFactory factory = (DummyFactory) getBeanFactory().getBean("&singletonFactory")__		assertTrue("Factory was initialized because it implemented InitializingBean", factory.wasInitialized())__	};check,that,after,properties,set,gets,called,on,factory,throws,exception;public,void,test,factory,is,initialized,throws,exception,test,bean,tb,test,bean,get,bean,factory,get,bean,singleton,factory,dummy,factory,factory,dummy,factory,get,bean,factory,get,bean,singleton,factory,assert,true,factory,was,initialized,because,it,implemented,initializing,bean,factory,was,initialized
AbstractBeanFactoryTests -> public void testFactoryIsInitialized() throws Exception;1357119417;Check that afterPropertiesSet gets called on factory_@throws Exception;public void testFactoryIsInitialized() throws Exception {_		TestBean tb = (TestBean) getBeanFactory().getBean("singletonFactory")__		DummyFactory factory = (DummyFactory) getBeanFactory().getBean("&singletonFactory")__		assertTrue("Factory was initialized because it implemented InitializingBean", factory.wasInitialized())__	};check,that,after,properties,set,gets,called,on,factory,throws,exception;public,void,test,factory,is,initialized,throws,exception,test,bean,tb,test,bean,get,bean,factory,get,bean,singleton,factory,dummy,factory,factory,dummy,factory,get,bean,factory,get,bean,singleton,factory,assert,true,factory,was,initialized,because,it,implemented,initializing,bean,factory,was,initialized
AbstractBeanFactoryTests -> public void testFactoryIsInitialized() throws Exception;1362408075;Check that afterPropertiesSet gets called on factory_@throws Exception;public void testFactoryIsInitialized() throws Exception {_		TestBean tb = (TestBean) getBeanFactory().getBean("singletonFactory")__		assertNotNull(tb)__		DummyFactory factory = (DummyFactory) getBeanFactory().getBean("&singletonFactory")__		assertTrue("Factory was initialized because it implemented InitializingBean", factory.wasInitialized())__	};check,that,after,properties,set,gets,called,on,factory,throws,exception;public,void,test,factory,is,initialized,throws,exception,test,bean,tb,test,bean,get,bean,factory,get,bean,singleton,factory,assert,not,null,tb,dummy,factory,factory,dummy,factory,get,bean,factory,get,bean,singleton,factory,assert,true,factory,was,initialized,because,it,implemented,initializing,bean,factory,was,initialized
AbstractBeanFactoryTests -> public void testFactoryIsInitialized() throws Exception;1385507683;Check that afterPropertiesSet gets called on factory_@throws Exception;public void testFactoryIsInitialized() throws Exception {_		TestBean tb = (TestBean) getBeanFactory().getBean("singletonFactory")__		assertNotNull(tb)__		DummyFactory factory = (DummyFactory) getBeanFactory().getBean("&singletonFactory")__		assertTrue("Factory was initialized because it implemented InitializingBean", factory.wasInitialized())__	};check,that,after,properties,set,gets,called,on,factory,throws,exception;public,void,test,factory,is,initialized,throws,exception,test,bean,tb,test,bean,get,bean,factory,get,bean,singleton,factory,assert,not,null,tb,dummy,factory,factory,dummy,factory,get,bean,factory,get,bean,singleton,factory,assert,true,factory,was,initialized,because,it,implemented,initializing,bean,factory,was,initialized
AbstractBeanFactoryTests -> public void testGetFactoryItself() throws Exception;1328020251;Check that we can get the factory bean itself._This is only possible if we're dealing with a factory_@throws Exception;public void testGetFactoryItself() throws Exception {_		DummyFactory factory = (DummyFactory) getBeanFactory().getBean("&singletonFactory")__		assertTrue(factory != null)__	};check,that,we,can,get,the,factory,bean,itself,this,is,only,possible,if,we,re,dealing,with,a,factory,throws,exception;public,void,test,get,factory,itself,throws,exception,dummy,factory,factory,dummy,factory,get,bean,factory,get,bean,singleton,factory,assert,true,factory,null
AbstractBeanFactoryTests -> public void testGetFactoryItself() throws Exception;1356735495;Check that we can get the factory bean itself._This is only possible if we're dealing with a factory_@throws Exception;public void testGetFactoryItself() throws Exception {_		DummyFactory factory = (DummyFactory) getBeanFactory().getBean("&singletonFactory")__		assertTrue(factory != null)__	};check,that,we,can,get,the,factory,bean,itself,this,is,only,possible,if,we,re,dealing,with,a,factory,throws,exception;public,void,test,get,factory,itself,throws,exception,dummy,factory,factory,dummy,factory,get,bean,factory,get,bean,singleton,factory,assert,true,factory,null
AbstractBeanFactoryTests -> public void testGetFactoryItself() throws Exception;1357119417;Check that we can get the factory bean itself._This is only possible if we're dealing with a factory_@throws Exception;public void testGetFactoryItself() throws Exception {_		DummyFactory factory = (DummyFactory) getBeanFactory().getBean("&singletonFactory")__		assertTrue(factory != null)__	};check,that,we,can,get,the,factory,bean,itself,this,is,only,possible,if,we,re,dealing,with,a,factory,throws,exception;public,void,test,get,factory,itself,throws,exception,dummy,factory,factory,dummy,factory,get,bean,factory,get,bean,singleton,factory,assert,true,factory,null
AbstractBeanFactoryTests -> public void testGetFactoryItself() throws Exception;1362408075;Check that we can get the factory bean itself._This is only possible if we're dealing with a factory_@throws Exception;public void testGetFactoryItself() throws Exception {_		DummyFactory factory = (DummyFactory) getBeanFactory().getBean("&singletonFactory")__		assertTrue(factory != null)__	};check,that,we,can,get,the,factory,bean,itself,this,is,only,possible,if,we,re,dealing,with,a,factory,throws,exception;public,void,test,get,factory,itself,throws,exception,dummy,factory,factory,dummy,factory,get,bean,factory,get,bean,singleton,factory,assert,true,factory,null
AbstractBeanFactoryTests -> public void testGetFactoryItself() throws Exception;1385507683;Check that we can get the factory bean itself._This is only possible if we're dealing with a factory_@throws Exception;public void testGetFactoryItself() throws Exception {_		DummyFactory factory = (DummyFactory) getBeanFactory().getBean("&singletonFactory")__		assertTrue(factory != null)__	};check,that,we,can,get,the,factory,bean,itself,this,is,only,possible,if,we,re,dealing,with,a,factory,throws,exception;public,void,test,get,factory,itself,throws,exception,dummy,factory,factory,dummy,factory,get,bean,factory,get,bean,singleton,factory,assert,true,factory,null
AbstractBeanFactoryTests -> public void testInheritance();1328020251;Roderick beans inherits from rod, overriding name only.;public void testInheritance() {_		assertTrue(getBeanFactory().containsBean("rod"))__		assertTrue(getBeanFactory().containsBean("roderick"))__		TestBean rod = (TestBean) getBeanFactory().getBean("rod")__		TestBean roderick = (TestBean) getBeanFactory().getBean("roderick")__		assertTrue("not == ", rod != roderick)__		assertTrue("rod.name is Rod", rod.getName().equals("Rod"))__		assertTrue("rod.age is 31", rod.getAge() == 31)__		assertTrue("roderick.name is Roderick", roderick.getName().equals("Roderick"))__		assertTrue("roderick.age was inherited", roderick.getAge() == rod.getAge())__	};roderick,beans,inherits,from,rod,overriding,name,only;public,void,test,inheritance,assert,true,get,bean,factory,contains,bean,rod,assert,true,get,bean,factory,contains,bean,roderick,test,bean,rod,test,bean,get,bean,factory,get,bean,rod,test,bean,roderick,test,bean,get,bean,factory,get,bean,roderick,assert,true,not,rod,roderick,assert,true,rod,name,is,rod,rod,get,name,equals,rod,assert,true,rod,age,is,31,rod,get,age,31,assert,true,roderick,name,is,roderick,roderick,get,name,equals,roderick,assert,true,roderick,age,was,inherited,roderick,get,age,rod,get,age
AbstractBeanFactoryTests -> public void testInheritance();1356735495;Roderick beans inherits from rod, overriding name only.;public void testInheritance() {_		assertTrue(getBeanFactory().containsBean("rod"))__		assertTrue(getBeanFactory().containsBean("roderick"))__		TestBean rod = (TestBean) getBeanFactory().getBean("rod")__		TestBean roderick = (TestBean) getBeanFactory().getBean("roderick")__		assertTrue("not == ", rod != roderick)__		assertTrue("rod.name is Rod", rod.getName().equals("Rod"))__		assertTrue("rod.age is 31", rod.getAge() == 31)__		assertTrue("roderick.name is Roderick", roderick.getName().equals("Roderick"))__		assertTrue("roderick.age was inherited", roderick.getAge() == rod.getAge())__	};roderick,beans,inherits,from,rod,overriding,name,only;public,void,test,inheritance,assert,true,get,bean,factory,contains,bean,rod,assert,true,get,bean,factory,contains,bean,roderick,test,bean,rod,test,bean,get,bean,factory,get,bean,rod,test,bean,roderick,test,bean,get,bean,factory,get,bean,roderick,assert,true,not,rod,roderick,assert,true,rod,name,is,rod,rod,get,name,equals,rod,assert,true,rod,age,is,31,rod,get,age,31,assert,true,roderick,name,is,roderick,roderick,get,name,equals,roderick,assert,true,roderick,age,was,inherited,roderick,get,age,rod,get,age
AbstractBeanFactoryTests -> public void testInheritance();1357119417;Roderick beans inherits from rod, overriding name only.;public void testInheritance() {_		assertTrue(getBeanFactory().containsBean("rod"))__		assertTrue(getBeanFactory().containsBean("roderick"))__		TestBean rod = (TestBean) getBeanFactory().getBean("rod")__		TestBean roderick = (TestBean) getBeanFactory().getBean("roderick")__		assertTrue("not == ", rod != roderick)__		assertTrue("rod.name is Rod", rod.getName().equals("Rod"))__		assertTrue("rod.age is 31", rod.getAge() == 31)__		assertTrue("roderick.name is Roderick", roderick.getName().equals("Roderick"))__		assertTrue("roderick.age was inherited", roderick.getAge() == rod.getAge())__	};roderick,beans,inherits,from,rod,overriding,name,only;public,void,test,inheritance,assert,true,get,bean,factory,contains,bean,rod,assert,true,get,bean,factory,contains,bean,roderick,test,bean,rod,test,bean,get,bean,factory,get,bean,rod,test,bean,roderick,test,bean,get,bean,factory,get,bean,roderick,assert,true,not,rod,roderick,assert,true,rod,name,is,rod,rod,get,name,equals,rod,assert,true,rod,age,is,31,rod,get,age,31,assert,true,roderick,name,is,roderick,roderick,get,name,equals,roderick,assert,true,roderick,age,was,inherited,roderick,get,age,rod,get,age
AbstractBeanFactoryTests -> public void testInheritance();1362408075;Roderick beans inherits from rod, overriding name only.;public void testInheritance() {_		assertTrue(getBeanFactory().containsBean("rod"))__		assertTrue(getBeanFactory().containsBean("roderick"))__		TestBean rod = (TestBean) getBeanFactory().getBean("rod")__		TestBean roderick = (TestBean) getBeanFactory().getBean("roderick")__		assertTrue("not == ", rod != roderick)__		assertTrue("rod.name is Rod", rod.getName().equals("Rod"))__		assertTrue("rod.age is 31", rod.getAge() == 31)__		assertTrue("roderick.name is Roderick", roderick.getName().equals("Roderick"))__		assertTrue("roderick.age was inherited", roderick.getAge() == rod.getAge())__	};roderick,beans,inherits,from,rod,overriding,name,only;public,void,test,inheritance,assert,true,get,bean,factory,contains,bean,rod,assert,true,get,bean,factory,contains,bean,roderick,test,bean,rod,test,bean,get,bean,factory,get,bean,rod,test,bean,roderick,test,bean,get,bean,factory,get,bean,roderick,assert,true,not,rod,roderick,assert,true,rod,name,is,rod,rod,get,name,equals,rod,assert,true,rod,age,is,31,rod,get,age,31,assert,true,roderick,name,is,roderick,roderick,get,name,equals,roderick,assert,true,roderick,age,was,inherited,roderick,get,age,rod,get,age
AbstractBeanFactoryTests -> public void testInheritance();1385507683;Roderick beans inherits from rod, overriding name only.;public void testInheritance() {_		assertTrue(getBeanFactory().containsBean("rod"))__		assertTrue(getBeanFactory().containsBean("roderick"))__		TestBean rod = (TestBean) getBeanFactory().getBean("rod")__		TestBean roderick = (TestBean) getBeanFactory().getBean("roderick")__		assertTrue("not == ", rod != roderick)__		assertTrue("rod.name is Rod", rod.getName().equals("Rod"))__		assertTrue("rod.age is 31", rod.getAge() == 31)__		assertTrue("roderick.name is Roderick", roderick.getName().equals("Roderick"))__		assertTrue("roderick.age was inherited", roderick.getAge() == rod.getAge())__	};roderick,beans,inherits,from,rod,overriding,name,only;public,void,test,inheritance,assert,true,get,bean,factory,contains,bean,rod,assert,true,get,bean,factory,contains,bean,roderick,test,bean,rod,test,bean,get,bean,factory,get,bean,rod,test,bean,roderick,test,bean,get,bean,factory,get,bean,roderick,assert,true,not,rod,roderick,assert,true,rod,name,is,rod,rod,get,name,equals,rod,assert,true,rod,age,is,31,rod,get,age,31,assert,true,roderick,name,is,roderick,roderick,get,name,equals,roderick,assert,true,roderick,age,was,inherited,roderick,get,age,rod,get,age
MustBeInitialized -> @Override 	public void afterPropertiesSet() throws Exception;1356735495;@see InitializingBean#afterPropertiesSet();@Override_	public void afterPropertiesSet() throws Exception {_		this.inited = true__	};see,initializing,bean,after,properties,set;override,public,void,after,properties,set,throws,exception,this,inited,true
MustBeInitialized -> @Override 	public void afterPropertiesSet() throws Exception;1357119417;@see InitializingBean#afterPropertiesSet();@Override_	public void afterPropertiesSet() throws Exception {_		this.inited = true__	};see,initializing,bean,after,properties,set;override,public,void,after,properties,set,throws,exception,this,inited,true
AbstractBeanFactoryTests -> public void testLifecycleCallbacks();1328020251;Test that InitializingBean/BeanFactoryAware/DisposableBean objects receive the_afterPropertiesSet() callback before BeanFactoryAware callbacks;public void testLifecycleCallbacks() {_		LifecycleBean lb = (LifecycleBean) getBeanFactory().getBean("lifecycle")__		Assert.assertEquals("lifecycle", lb.getBeanName())__		_		_		lb.businessMethod()__		assertTrue("Not destroyed", !lb.isDestroyed())__	};test,that,initializing,bean,bean,factory,aware,disposable,bean,objects,receive,the,after,properties,set,callback,before,bean,factory,aware,callbacks;public,void,test,lifecycle,callbacks,lifecycle,bean,lb,lifecycle,bean,get,bean,factory,get,bean,lifecycle,assert,assert,equals,lifecycle,lb,get,bean,name,lb,business,method,assert,true,not,destroyed,lb,is,destroyed
AbstractBeanFactoryTests -> public void testLifecycleCallbacks();1356735495;Test that InitializingBean/BeanFactoryAware/DisposableBean objects receive the_afterPropertiesSet() callback before BeanFactoryAware callbacks;public void testLifecycleCallbacks() {_		LifecycleBean lb = (LifecycleBean) getBeanFactory().getBean("lifecycle")__		Assert.assertEquals("lifecycle", lb.getBeanName())__		_		_		lb.businessMethod()__		assertTrue("Not destroyed", !lb.isDestroyed())__	};test,that,initializing,bean,bean,factory,aware,disposable,bean,objects,receive,the,after,properties,set,callback,before,bean,factory,aware,callbacks;public,void,test,lifecycle,callbacks,lifecycle,bean,lb,lifecycle,bean,get,bean,factory,get,bean,lifecycle,assert,assert,equals,lifecycle,lb,get,bean,name,lb,business,method,assert,true,not,destroyed,lb,is,destroyed
AbstractBeanFactoryTests -> public void testLifecycleCallbacks();1357119417;Test that InitializingBean/BeanFactoryAware/DisposableBean objects receive the_afterPropertiesSet() callback before BeanFactoryAware callbacks;public void testLifecycleCallbacks() {_		LifecycleBean lb = (LifecycleBean) getBeanFactory().getBean("lifecycle")__		assertEquals("lifecycle", lb.getBeanName())__		_		_		lb.businessMethod()__		assertTrue("Not destroyed", !lb.isDestroyed())__	};test,that,initializing,bean,bean,factory,aware,disposable,bean,objects,receive,the,after,properties,set,callback,before,bean,factory,aware,callbacks;public,void,test,lifecycle,callbacks,lifecycle,bean,lb,lifecycle,bean,get,bean,factory,get,bean,lifecycle,assert,equals,lifecycle,lb,get,bean,name,lb,business,method,assert,true,not,destroyed,lb,is,destroyed
AbstractBeanFactoryTests -> public void testLifecycleCallbacks();1362408075;Test that InitializingBean/BeanFactoryAware/DisposableBean objects receive the_afterPropertiesSet() callback before BeanFactoryAware callbacks;public void testLifecycleCallbacks() {_		LifecycleBean lb = (LifecycleBean) getBeanFactory().getBean("lifecycle")__		assertEquals("lifecycle", lb.getBeanName())__		_		_		lb.businessMethod()__		assertTrue("Not destroyed", !lb.isDestroyed())__	};test,that,initializing,bean,bean,factory,aware,disposable,bean,objects,receive,the,after,properties,set,callback,before,bean,factory,aware,callbacks;public,void,test,lifecycle,callbacks,lifecycle,bean,lb,lifecycle,bean,get,bean,factory,get,bean,lifecycle,assert,equals,lifecycle,lb,get,bean,name,lb,business,method,assert,true,not,destroyed,lb,is,destroyed
AbstractBeanFactoryTests -> public void testLifecycleCallbacks();1385507683;Test that InitializingBean/BeanFactoryAware/DisposableBean objects receive the_afterPropertiesSet() callback before BeanFactoryAware callbacks;public void testLifecycleCallbacks() {_		LifecycleBean lb = (LifecycleBean) getBeanFactory().getBean("lifecycle")__		assertEquals("lifecycle", lb.getBeanName())__		_		_		lb.businessMethod()__		assertTrue("Not destroyed", !lb.isDestroyed())__	};test,that,initializing,bean,bean,factory,aware,disposable,bean,objects,receive,the,after,properties,set,callback,before,bean,factory,aware,callbacks;public,void,test,lifecycle,callbacks,lifecycle,bean,lb,lifecycle,bean,get,bean,factory,get,bean,lifecycle,assert,equals,lifecycle,lb,get,bean,name,lb,business,method,assert,true,not,destroyed,lb,is,destroyed
AbstractBeanFactoryTests -> public void testRejectsFactoryGetOnNormalBean();1328020251;It should be illegal to dereference a normal bean_as a factory;public void testRejectsFactoryGetOnNormalBean() {_		try {_			getBeanFactory().getBean("&rod")__			fail("Shouldn't permit factory get on normal bean")__		}_		catch (BeanIsNotAFactoryException ex) {_			_		}_	};it,should,be,illegal,to,dereference,a,normal,bean,as,a,factory;public,void,test,rejects,factory,get,on,normal,bean,try,get,bean,factory,get,bean,rod,fail,shouldn,t,permit,factory,get,on,normal,bean,catch,bean,is,not,afactory,exception,ex
AbstractBeanFactoryTests -> public void testRejectsFactoryGetOnNormalBean();1356735495;It should be illegal to dereference a normal bean_as a factory;public void testRejectsFactoryGetOnNormalBean() {_		try {_			getBeanFactory().getBean("&rod")__			fail("Shouldn't permit factory get on normal bean")__		}_		catch (BeanIsNotAFactoryException ex) {_			_		}_	};it,should,be,illegal,to,dereference,a,normal,bean,as,a,factory;public,void,test,rejects,factory,get,on,normal,bean,try,get,bean,factory,get,bean,rod,fail,shouldn,t,permit,factory,get,on,normal,bean,catch,bean,is,not,afactory,exception,ex
AbstractBeanFactoryTests -> public void testRejectsFactoryGetOnNormalBean();1357119417;It should be illegal to dereference a normal bean_as a factory;public void testRejectsFactoryGetOnNormalBean() {_		try {_			getBeanFactory().getBean("&rod")__			fail("Shouldn't permit factory get on normal bean")__		}_		catch (BeanIsNotAFactoryException ex) {_			_		}_	};it,should,be,illegal,to,dereference,a,normal,bean,as,a,factory;public,void,test,rejects,factory,get,on,normal,bean,try,get,bean,factory,get,bean,rod,fail,shouldn,t,permit,factory,get,on,normal,bean,catch,bean,is,not,afactory,exception,ex
AbstractBeanFactoryTests -> public void testRejectsFactoryGetOnNormalBean();1362408075;It should be illegal to dereference a normal bean_as a factory;public void testRejectsFactoryGetOnNormalBean() {_		try {_			getBeanFactory().getBean("&rod")__			fail("Shouldn't permit factory get on normal bean")__		}_		catch (BeanIsNotAFactoryException ex) {_			_		}_	};it,should,be,illegal,to,dereference,a,normal,bean,as,a,factory;public,void,test,rejects,factory,get,on,normal,bean,try,get,bean,factory,get,bean,rod,fail,shouldn,t,permit,factory,get,on,normal,bean,catch,bean,is,not,afactory,exception,ex
AbstractBeanFactoryTests -> public void testRejectsFactoryGetOnNormalBean();1385507683;It should be illegal to dereference a normal bean_as a factory;public void testRejectsFactoryGetOnNormalBean() {_		try {_			getBeanFactory().getBean("&rod")__			fail("Shouldn't permit factory get on normal bean")__		}_		catch (BeanIsNotAFactoryException ex) {_			_		}_	};it,should,be,illegal,to,dereference,a,normal,bean,as,a,factory;public,void,test,rejects,factory,get,on,normal,bean,try,get,bean,factory,get,bean,rod,fail,shouldn,t,permit,factory,get,on,normal,bean,catch,bean,is,not,afactory,exception,ex
AbstractBeanFactoryTests -> public void testInitializingBeanCallback();1328020251;Test that InitializingBean objects receive the afterPropertiesSet() callback;public void testInitializingBeanCallback() {_		MustBeInitialized mbi = (MustBeInitialized) getBeanFactory().getBean("mustBeInitialized")__		_		_		mbi.businessMethod()__	};test,that,initializing,bean,objects,receive,the,after,properties,set,callback;public,void,test,initializing,bean,callback,must,be,initialized,mbi,must,be,initialized,get,bean,factory,get,bean,must,be,initialized,mbi,business,method
AbstractBeanFactoryTests -> public void testInitializingBeanCallback();1356735495;Test that InitializingBean objects receive the afterPropertiesSet() callback;public void testInitializingBeanCallback() {_		MustBeInitialized mbi = (MustBeInitialized) getBeanFactory().getBean("mustBeInitialized")__		_		_		mbi.businessMethod()__	};test,that,initializing,bean,objects,receive,the,after,properties,set,callback;public,void,test,initializing,bean,callback,must,be,initialized,mbi,must,be,initialized,get,bean,factory,get,bean,must,be,initialized,mbi,business,method
AbstractBeanFactoryTests -> public void testInitializingBeanCallback();1357119417;Test that InitializingBean objects receive the afterPropertiesSet() callback;public void testInitializingBeanCallback() {_		MustBeInitialized mbi = (MustBeInitialized) getBeanFactory().getBean("mustBeInitialized")__		_		_		mbi.businessMethod()__	};test,that,initializing,bean,objects,receive,the,after,properties,set,callback;public,void,test,initializing,bean,callback,must,be,initialized,mbi,must,be,initialized,get,bean,factory,get,bean,must,be,initialized,mbi,business,method
AbstractBeanFactoryTests -> public void testInitializingBeanCallback();1362408075;Test that InitializingBean objects receive the afterPropertiesSet() callback;public void testInitializingBeanCallback() {_		MustBeInitialized mbi = (MustBeInitialized) getBeanFactory().getBean("mustBeInitialized")__		_		_		mbi.businessMethod()__	};test,that,initializing,bean,objects,receive,the,after,properties,set,callback;public,void,test,initializing,bean,callback,must,be,initialized,mbi,must,be,initialized,get,bean,factory,get,bean,must,be,initialized,mbi,business,method
AbstractBeanFactoryTests -> public void testInitializingBeanCallback();1385507683;Test that InitializingBean objects receive the afterPropertiesSet() callback;public void testInitializingBeanCallback() {_		MustBeInitialized mbi = (MustBeInitialized) getBeanFactory().getBean("mustBeInitialized")__		_		_		mbi.businessMethod()__	};test,that,initializing,bean,objects,receive,the,after,properties,set,callback;public,void,test,initializing,bean,callback,must,be,initialized,mbi,must,be,initialized,get,bean,factory,get,bean,must,be,initialized,mbi,business,method
