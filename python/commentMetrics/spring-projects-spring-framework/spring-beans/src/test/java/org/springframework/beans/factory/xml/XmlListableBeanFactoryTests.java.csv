# id;timestamp;commentText;codeText;commentWords;codeWords
XmlListableBeanFactoryTests -> public void testAutoAliasing() throws Exception;1328020251;Test that properties with name as well as id creating an alias up front.;public void testAutoAliasing() throws Exception {_		List beanNames = Arrays.asList(getListableBeanFactory().getBeanDefinitionNames())___		TestBean tb1 = (TestBean) getBeanFactory().getBean("aliased")__		TestBean alias1 = (TestBean) getBeanFactory().getBean("myalias")__		Assert.assertTrue(tb1 == alias1)__		List tb1Aliases = Arrays.asList(getBeanFactory().getAliases("aliased"))__		Assert.assertEquals(2, tb1Aliases.size())__		Assert.assertTrue(tb1Aliases.contains("myalias"))__		Assert.assertTrue(tb1Aliases.contains("youralias"))__		Assert.assertTrue(beanNames.contains("aliased"))__		Assert.assertFalse(beanNames.contains("myalias"))__		Assert.assertFalse(beanNames.contains("youralias"))___		TestBean tb2 = (TestBean) getBeanFactory().getBean("multiAliased")__		TestBean alias2 = (TestBean) getBeanFactory().getBean("alias1")__		TestBean alias3 = (TestBean) getBeanFactory().getBean("alias2")__		TestBean alias3a = (TestBean) getBeanFactory().getBean("alias3")__		TestBean alias3b = (TestBean) getBeanFactory().getBean("alias4")__		Assert.assertTrue(tb2 == alias2)__		Assert.assertTrue(tb2 == alias3)__		Assert.assertTrue(tb2 == alias3a)__		Assert.assertTrue(tb2 == alias3b)___		List tb2Aliases = Arrays.asList(getBeanFactory().getAliases("multiAliased"))__		Assert.assertEquals(4, tb2Aliases.size())__		Assert.assertTrue(tb2Aliases.contains("alias1"))__		Assert.assertTrue(tb2Aliases.contains("alias2"))__		Assert.assertTrue(tb2Aliases.contains("alias3"))__		Assert.assertTrue(tb2Aliases.contains("alias4"))__		Assert.assertTrue(beanNames.contains("multiAliased"))__		Assert.assertFalse(beanNames.contains("alias1"))__		Assert.assertFalse(beanNames.contains("alias2"))__		Assert.assertFalse(beanNames.contains("alias3"))__		Assert.assertFalse(beanNames.contains("alias4"))___		TestBean tb3 = (TestBean) getBeanFactory().getBean("aliasWithoutId1")__		TestBean alias4 = (TestBean) getBeanFactory().getBean("aliasWithoutId2")__		TestBean alias5 = (TestBean) getBeanFactory().getBean("aliasWithoutId3")__		Assert.assertTrue(tb3 == alias4)__		Assert.assertTrue(tb3 == alias5)__		List tb3Aliases = Arrays.asList(getBeanFactory().getAliases("aliasWithoutId1"))__		Assert.assertEquals(2, tb3Aliases.size())__		Assert.assertTrue(tb3Aliases.contains("aliasWithoutId2"))__		Assert.assertTrue(tb3Aliases.contains("aliasWithoutId3"))__		Assert.assertTrue(beanNames.contains("aliasWithoutId1"))__		Assert.assertFalse(beanNames.contains("aliasWithoutId2"))__		Assert.assertFalse(beanNames.contains("aliasWithoutId3"))___		TestBean tb4 = (TestBean) getBeanFactory().getBean(TestBean.class.getName() + "#0")__		Assert.assertEquals(null, tb4.getName())___		Map drs = getListableBeanFactory().getBeansOfType(DummyReferencer.class, false, false)__		Assert.assertEquals(5, drs.size())__		Assert.assertTrue(drs.containsKey(DummyReferencer.class.getName() + "#0"))__		Assert.assertTrue(drs.containsKey(DummyReferencer.class.getName() + "#1"))__		Assert.assertTrue(drs.containsKey(DummyReferencer.class.getName() + "#2"))__	};test,that,properties,with,name,as,well,as,id,creating,an,alias,up,front;public,void,test,auto,aliasing,throws,exception,list,bean,names,arrays,as,list,get,listable,bean,factory,get,bean,definition,names,test,bean,tb1,test,bean,get,bean,factory,get,bean,aliased,test,bean,alias1,test,bean,get,bean,factory,get,bean,myalias,assert,assert,true,tb1,alias1,list,tb1aliases,arrays,as,list,get,bean,factory,get,aliases,aliased,assert,assert,equals,2,tb1aliases,size,assert,assert,true,tb1aliases,contains,myalias,assert,assert,true,tb1aliases,contains,youralias,assert,assert,true,bean,names,contains,aliased,assert,assert,false,bean,names,contains,myalias,assert,assert,false,bean,names,contains,youralias,test,bean,tb2,test,bean,get,bean,factory,get,bean,multi,aliased,test,bean,alias2,test,bean,get,bean,factory,get,bean,alias1,test,bean,alias3,test,bean,get,bean,factory,get,bean,alias2,test,bean,alias3a,test,bean,get,bean,factory,get,bean,alias3,test,bean,alias3b,test,bean,get,bean,factory,get,bean,alias4,assert,assert,true,tb2,alias2,assert,assert,true,tb2,alias3,assert,assert,true,tb2,alias3a,assert,assert,true,tb2,alias3b,list,tb2aliases,arrays,as,list,get,bean,factory,get,aliases,multi,aliased,assert,assert,equals,4,tb2aliases,size,assert,assert,true,tb2aliases,contains,alias1,assert,assert,true,tb2aliases,contains,alias2,assert,assert,true,tb2aliases,contains,alias3,assert,assert,true,tb2aliases,contains,alias4,assert,assert,true,bean,names,contains,multi,aliased,assert,assert,false,bean,names,contains,alias1,assert,assert,false,bean,names,contains,alias2,assert,assert,false,bean,names,contains,alias3,assert,assert,false,bean,names,contains,alias4,test,bean,tb3,test,bean,get,bean,factory,get,bean,alias,without,id1,test,bean,alias4,test,bean,get,bean,factory,get,bean,alias,without,id2,test,bean,alias5,test,bean,get,bean,factory,get,bean,alias,without,id3,assert,assert,true,tb3,alias4,assert,assert,true,tb3,alias5,list,tb3aliases,arrays,as,list,get,bean,factory,get,aliases,alias,without,id1,assert,assert,equals,2,tb3aliases,size,assert,assert,true,tb3aliases,contains,alias,without,id2,assert,assert,true,tb3aliases,contains,alias,without,id3,assert,assert,true,bean,names,contains,alias,without,id1,assert,assert,false,bean,names,contains,alias,without,id2,assert,assert,false,bean,names,contains,alias,without,id3,test,bean,tb4,test,bean,get,bean,factory,get,bean,test,bean,class,get,name,0,assert,assert,equals,null,tb4,get,name,map,drs,get,listable,bean,factory,get,beans,of,type,dummy,referencer,class,false,false,assert,assert,equals,5,drs,size,assert,assert,true,drs,contains,key,dummy,referencer,class,get,name,0,assert,assert,true,drs,contains,key,dummy,referencer,class,get,name,1,assert,assert,true,drs,contains,key,dummy,referencer,class,get,name,2
XmlListableBeanFactoryTests -> public void testAutoAliasing() throws Exception;1356735495;Test that properties with name as well as id creating an alias up front.;public void testAutoAliasing() throws Exception {_		List beanNames = Arrays.asList(getListableBeanFactory().getBeanDefinitionNames())___		TestBean tb1 = (TestBean) getBeanFactory().getBean("aliased")__		TestBean alias1 = (TestBean) getBeanFactory().getBean("myalias")__		Assert.assertTrue(tb1 == alias1)__		List tb1Aliases = Arrays.asList(getBeanFactory().getAliases("aliased"))__		Assert.assertEquals(2, tb1Aliases.size())__		Assert.assertTrue(tb1Aliases.contains("myalias"))__		Assert.assertTrue(tb1Aliases.contains("youralias"))__		Assert.assertTrue(beanNames.contains("aliased"))__		Assert.assertFalse(beanNames.contains("myalias"))__		Assert.assertFalse(beanNames.contains("youralias"))___		TestBean tb2 = (TestBean) getBeanFactory().getBean("multiAliased")__		TestBean alias2 = (TestBean) getBeanFactory().getBean("alias1")__		TestBean alias3 = (TestBean) getBeanFactory().getBean("alias2")__		TestBean alias3a = (TestBean) getBeanFactory().getBean("alias3")__		TestBean alias3b = (TestBean) getBeanFactory().getBean("alias4")__		Assert.assertTrue(tb2 == alias2)__		Assert.assertTrue(tb2 == alias3)__		Assert.assertTrue(tb2 == alias3a)__		Assert.assertTrue(tb2 == alias3b)___		List tb2Aliases = Arrays.asList(getBeanFactory().getAliases("multiAliased"))__		Assert.assertEquals(4, tb2Aliases.size())__		Assert.assertTrue(tb2Aliases.contains("alias1"))__		Assert.assertTrue(tb2Aliases.contains("alias2"))__		Assert.assertTrue(tb2Aliases.contains("alias3"))__		Assert.assertTrue(tb2Aliases.contains("alias4"))__		Assert.assertTrue(beanNames.contains("multiAliased"))__		Assert.assertFalse(beanNames.contains("alias1"))__		Assert.assertFalse(beanNames.contains("alias2"))__		Assert.assertFalse(beanNames.contains("alias3"))__		Assert.assertFalse(beanNames.contains("alias4"))___		TestBean tb3 = (TestBean) getBeanFactory().getBean("aliasWithoutId1")__		TestBean alias4 = (TestBean) getBeanFactory().getBean("aliasWithoutId2")__		TestBean alias5 = (TestBean) getBeanFactory().getBean("aliasWithoutId3")__		Assert.assertTrue(tb3 == alias4)__		Assert.assertTrue(tb3 == alias5)__		List tb3Aliases = Arrays.asList(getBeanFactory().getAliases("aliasWithoutId1"))__		Assert.assertEquals(2, tb3Aliases.size())__		Assert.assertTrue(tb3Aliases.contains("aliasWithoutId2"))__		Assert.assertTrue(tb3Aliases.contains("aliasWithoutId3"))__		Assert.assertTrue(beanNames.contains("aliasWithoutId1"))__		Assert.assertFalse(beanNames.contains("aliasWithoutId2"))__		Assert.assertFalse(beanNames.contains("aliasWithoutId3"))___		TestBean tb4 = (TestBean) getBeanFactory().getBean(TestBean.class.getName() + "#0")__		Assert.assertEquals(null, tb4.getName())___		Map drs = getListableBeanFactory().getBeansOfType(DummyReferencer.class, false, false)__		Assert.assertEquals(5, drs.size())__		Assert.assertTrue(drs.containsKey(DummyReferencer.class.getName() + "#0"))__		Assert.assertTrue(drs.containsKey(DummyReferencer.class.getName() + "#1"))__		Assert.assertTrue(drs.containsKey(DummyReferencer.class.getName() + "#2"))__	};test,that,properties,with,name,as,well,as,id,creating,an,alias,up,front;public,void,test,auto,aliasing,throws,exception,list,bean,names,arrays,as,list,get,listable,bean,factory,get,bean,definition,names,test,bean,tb1,test,bean,get,bean,factory,get,bean,aliased,test,bean,alias1,test,bean,get,bean,factory,get,bean,myalias,assert,assert,true,tb1,alias1,list,tb1aliases,arrays,as,list,get,bean,factory,get,aliases,aliased,assert,assert,equals,2,tb1aliases,size,assert,assert,true,tb1aliases,contains,myalias,assert,assert,true,tb1aliases,contains,youralias,assert,assert,true,bean,names,contains,aliased,assert,assert,false,bean,names,contains,myalias,assert,assert,false,bean,names,contains,youralias,test,bean,tb2,test,bean,get,bean,factory,get,bean,multi,aliased,test,bean,alias2,test,bean,get,bean,factory,get,bean,alias1,test,bean,alias3,test,bean,get,bean,factory,get,bean,alias2,test,bean,alias3a,test,bean,get,bean,factory,get,bean,alias3,test,bean,alias3b,test,bean,get,bean,factory,get,bean,alias4,assert,assert,true,tb2,alias2,assert,assert,true,tb2,alias3,assert,assert,true,tb2,alias3a,assert,assert,true,tb2,alias3b,list,tb2aliases,arrays,as,list,get,bean,factory,get,aliases,multi,aliased,assert,assert,equals,4,tb2aliases,size,assert,assert,true,tb2aliases,contains,alias1,assert,assert,true,tb2aliases,contains,alias2,assert,assert,true,tb2aliases,contains,alias3,assert,assert,true,tb2aliases,contains,alias4,assert,assert,true,bean,names,contains,multi,aliased,assert,assert,false,bean,names,contains,alias1,assert,assert,false,bean,names,contains,alias2,assert,assert,false,bean,names,contains,alias3,assert,assert,false,bean,names,contains,alias4,test,bean,tb3,test,bean,get,bean,factory,get,bean,alias,without,id1,test,bean,alias4,test,bean,get,bean,factory,get,bean,alias,without,id2,test,bean,alias5,test,bean,get,bean,factory,get,bean,alias,without,id3,assert,assert,true,tb3,alias4,assert,assert,true,tb3,alias5,list,tb3aliases,arrays,as,list,get,bean,factory,get,aliases,alias,without,id1,assert,assert,equals,2,tb3aliases,size,assert,assert,true,tb3aliases,contains,alias,without,id2,assert,assert,true,tb3aliases,contains,alias,without,id3,assert,assert,true,bean,names,contains,alias,without,id1,assert,assert,false,bean,names,contains,alias,without,id2,assert,assert,false,bean,names,contains,alias,without,id3,test,bean,tb4,test,bean,get,bean,factory,get,bean,test,bean,class,get,name,0,assert,assert,equals,null,tb4,get,name,map,drs,get,listable,bean,factory,get,beans,of,type,dummy,referencer,class,false,false,assert,assert,equals,5,drs,size,assert,assert,true,drs,contains,key,dummy,referencer,class,get,name,0,assert,assert,true,drs,contains,key,dummy,referencer,class,get,name,1,assert,assert,true,drs,contains,key,dummy,referencer,class,get,name,2
XmlListableBeanFactoryTests -> public void testAutoAliasing() throws Exception;1357119417;Test that properties with name as well as id creating an alias up front.;public void testAutoAliasing() throws Exception {_		List beanNames = Arrays.asList(getListableBeanFactory().getBeanDefinitionNames())___		TestBean tb1 = (TestBean) getBeanFactory().getBean("aliased")__		TestBean alias1 = (TestBean) getBeanFactory().getBean("myalias")__		assertTrue(tb1 == alias1)__		List tb1Aliases = Arrays.asList(getBeanFactory().getAliases("aliased"))__		assertEquals(2, tb1Aliases.size())__		assertTrue(tb1Aliases.contains("myalias"))__		assertTrue(tb1Aliases.contains("youralias"))__		assertTrue(beanNames.contains("aliased"))__		assertFalse(beanNames.contains("myalias"))__		assertFalse(beanNames.contains("youralias"))___		TestBean tb2 = (TestBean) getBeanFactory().getBean("multiAliased")__		TestBean alias2 = (TestBean) getBeanFactory().getBean("alias1")__		TestBean alias3 = (TestBean) getBeanFactory().getBean("alias2")__		TestBean alias3a = (TestBean) getBeanFactory().getBean("alias3")__		TestBean alias3b = (TestBean) getBeanFactory().getBean("alias4")__		assertTrue(tb2 == alias2)__		assertTrue(tb2 == alias3)__		assertTrue(tb2 == alias3a)__		assertTrue(tb2 == alias3b)___		List tb2Aliases = Arrays.asList(getBeanFactory().getAliases("multiAliased"))__		assertEquals(4, tb2Aliases.size())__		assertTrue(tb2Aliases.contains("alias1"))__		assertTrue(tb2Aliases.contains("alias2"))__		assertTrue(tb2Aliases.contains("alias3"))__		assertTrue(tb2Aliases.contains("alias4"))__		assertTrue(beanNames.contains("multiAliased"))__		assertFalse(beanNames.contains("alias1"))__		assertFalse(beanNames.contains("alias2"))__		assertFalse(beanNames.contains("alias3"))__		assertFalse(beanNames.contains("alias4"))___		TestBean tb3 = (TestBean) getBeanFactory().getBean("aliasWithoutId1")__		TestBean alias4 = (TestBean) getBeanFactory().getBean("aliasWithoutId2")__		TestBean alias5 = (TestBean) getBeanFactory().getBean("aliasWithoutId3")__		assertTrue(tb3 == alias4)__		assertTrue(tb3 == alias5)__		List tb3Aliases = Arrays.asList(getBeanFactory().getAliases("aliasWithoutId1"))__		assertEquals(2, tb3Aliases.size())__		assertTrue(tb3Aliases.contains("aliasWithoutId2"))__		assertTrue(tb3Aliases.contains("aliasWithoutId3"))__		assertTrue(beanNames.contains("aliasWithoutId1"))__		assertFalse(beanNames.contains("aliasWithoutId2"))__		assertFalse(beanNames.contains("aliasWithoutId3"))___		TestBean tb4 = (TestBean) getBeanFactory().getBean(TestBean.class.getName() + "#0")__		assertEquals(null, tb4.getName())___		Map drs = getListableBeanFactory().getBeansOfType(DummyReferencer.class, false, false)__		assertEquals(5, drs.size())__		assertTrue(drs.containsKey(DummyReferencer.class.getName() + "#0"))__		assertTrue(drs.containsKey(DummyReferencer.class.getName() + "#1"))__		assertTrue(drs.containsKey(DummyReferencer.class.getName() + "#2"))__	};test,that,properties,with,name,as,well,as,id,creating,an,alias,up,front;public,void,test,auto,aliasing,throws,exception,list,bean,names,arrays,as,list,get,listable,bean,factory,get,bean,definition,names,test,bean,tb1,test,bean,get,bean,factory,get,bean,aliased,test,bean,alias1,test,bean,get,bean,factory,get,bean,myalias,assert,true,tb1,alias1,list,tb1aliases,arrays,as,list,get,bean,factory,get,aliases,aliased,assert,equals,2,tb1aliases,size,assert,true,tb1aliases,contains,myalias,assert,true,tb1aliases,contains,youralias,assert,true,bean,names,contains,aliased,assert,false,bean,names,contains,myalias,assert,false,bean,names,contains,youralias,test,bean,tb2,test,bean,get,bean,factory,get,bean,multi,aliased,test,bean,alias2,test,bean,get,bean,factory,get,bean,alias1,test,bean,alias3,test,bean,get,bean,factory,get,bean,alias2,test,bean,alias3a,test,bean,get,bean,factory,get,bean,alias3,test,bean,alias3b,test,bean,get,bean,factory,get,bean,alias4,assert,true,tb2,alias2,assert,true,tb2,alias3,assert,true,tb2,alias3a,assert,true,tb2,alias3b,list,tb2aliases,arrays,as,list,get,bean,factory,get,aliases,multi,aliased,assert,equals,4,tb2aliases,size,assert,true,tb2aliases,contains,alias1,assert,true,tb2aliases,contains,alias2,assert,true,tb2aliases,contains,alias3,assert,true,tb2aliases,contains,alias4,assert,true,bean,names,contains,multi,aliased,assert,false,bean,names,contains,alias1,assert,false,bean,names,contains,alias2,assert,false,bean,names,contains,alias3,assert,false,bean,names,contains,alias4,test,bean,tb3,test,bean,get,bean,factory,get,bean,alias,without,id1,test,bean,alias4,test,bean,get,bean,factory,get,bean,alias,without,id2,test,bean,alias5,test,bean,get,bean,factory,get,bean,alias,without,id3,assert,true,tb3,alias4,assert,true,tb3,alias5,list,tb3aliases,arrays,as,list,get,bean,factory,get,aliases,alias,without,id1,assert,equals,2,tb3aliases,size,assert,true,tb3aliases,contains,alias,without,id2,assert,true,tb3aliases,contains,alias,without,id3,assert,true,bean,names,contains,alias,without,id1,assert,false,bean,names,contains,alias,without,id2,assert,false,bean,names,contains,alias,without,id3,test,bean,tb4,test,bean,get,bean,factory,get,bean,test,bean,class,get,name,0,assert,equals,null,tb4,get,name,map,drs,get,listable,bean,factory,get,beans,of,type,dummy,referencer,class,false,false,assert,equals,5,drs,size,assert,true,drs,contains,key,dummy,referencer,class,get,name,0,assert,true,drs,contains,key,dummy,referencer,class,get,name,1,assert,true,drs,contains,key,dummy,referencer,class,get,name,2
XmlListableBeanFactoryTests -> public void testAutoAliasing() throws Exception;1362408075;Test that properties with name as well as id creating an alias up front.;public void testAutoAliasing() throws Exception {_		List beanNames = Arrays.asList(getListableBeanFactory().getBeanDefinitionNames())___		TestBean tb1 = (TestBean) getBeanFactory().getBean("aliased")__		TestBean alias1 = (TestBean) getBeanFactory().getBean("myalias")__		assertTrue(tb1 == alias1)__		List tb1Aliases = Arrays.asList(getBeanFactory().getAliases("aliased"))__		assertEquals(2, tb1Aliases.size())__		assertTrue(tb1Aliases.contains("myalias"))__		assertTrue(tb1Aliases.contains("youralias"))__		assertTrue(beanNames.contains("aliased"))__		assertFalse(beanNames.contains("myalias"))__		assertFalse(beanNames.contains("youralias"))___		TestBean tb2 = (TestBean) getBeanFactory().getBean("multiAliased")__		TestBean alias2 = (TestBean) getBeanFactory().getBean("alias1")__		TestBean alias3 = (TestBean) getBeanFactory().getBean("alias2")__		TestBean alias3a = (TestBean) getBeanFactory().getBean("alias3")__		TestBean alias3b = (TestBean) getBeanFactory().getBean("alias4")__		assertTrue(tb2 == alias2)__		assertTrue(tb2 == alias3)__		assertTrue(tb2 == alias3a)__		assertTrue(tb2 == alias3b)___		List tb2Aliases = Arrays.asList(getBeanFactory().getAliases("multiAliased"))__		assertEquals(4, tb2Aliases.size())__		assertTrue(tb2Aliases.contains("alias1"))__		assertTrue(tb2Aliases.contains("alias2"))__		assertTrue(tb2Aliases.contains("alias3"))__		assertTrue(tb2Aliases.contains("alias4"))__		assertTrue(beanNames.contains("multiAliased"))__		assertFalse(beanNames.contains("alias1"))__		assertFalse(beanNames.contains("alias2"))__		assertFalse(beanNames.contains("alias3"))__		assertFalse(beanNames.contains("alias4"))___		TestBean tb3 = (TestBean) getBeanFactory().getBean("aliasWithoutId1")__		TestBean alias4 = (TestBean) getBeanFactory().getBean("aliasWithoutId2")__		TestBean alias5 = (TestBean) getBeanFactory().getBean("aliasWithoutId3")__		assertTrue(tb3 == alias4)__		assertTrue(tb3 == alias5)__		List tb3Aliases = Arrays.asList(getBeanFactory().getAliases("aliasWithoutId1"))__		assertEquals(2, tb3Aliases.size())__		assertTrue(tb3Aliases.contains("aliasWithoutId2"))__		assertTrue(tb3Aliases.contains("aliasWithoutId3"))__		assertTrue(beanNames.contains("aliasWithoutId1"))__		assertFalse(beanNames.contains("aliasWithoutId2"))__		assertFalse(beanNames.contains("aliasWithoutId3"))___		TestBean tb4 = (TestBean) getBeanFactory().getBean(TestBean.class.getName() + "#0")__		assertEquals(null, tb4.getName())___		Map drs = getListableBeanFactory().getBeansOfType(DummyReferencer.class, false, false)__		assertEquals(5, drs.size())__		assertTrue(drs.containsKey(DummyReferencer.class.getName() + "#0"))__		assertTrue(drs.containsKey(DummyReferencer.class.getName() + "#1"))__		assertTrue(drs.containsKey(DummyReferencer.class.getName() + "#2"))__	};test,that,properties,with,name,as,well,as,id,creating,an,alias,up,front;public,void,test,auto,aliasing,throws,exception,list,bean,names,arrays,as,list,get,listable,bean,factory,get,bean,definition,names,test,bean,tb1,test,bean,get,bean,factory,get,bean,aliased,test,bean,alias1,test,bean,get,bean,factory,get,bean,myalias,assert,true,tb1,alias1,list,tb1aliases,arrays,as,list,get,bean,factory,get,aliases,aliased,assert,equals,2,tb1aliases,size,assert,true,tb1aliases,contains,myalias,assert,true,tb1aliases,contains,youralias,assert,true,bean,names,contains,aliased,assert,false,bean,names,contains,myalias,assert,false,bean,names,contains,youralias,test,bean,tb2,test,bean,get,bean,factory,get,bean,multi,aliased,test,bean,alias2,test,bean,get,bean,factory,get,bean,alias1,test,bean,alias3,test,bean,get,bean,factory,get,bean,alias2,test,bean,alias3a,test,bean,get,bean,factory,get,bean,alias3,test,bean,alias3b,test,bean,get,bean,factory,get,bean,alias4,assert,true,tb2,alias2,assert,true,tb2,alias3,assert,true,tb2,alias3a,assert,true,tb2,alias3b,list,tb2aliases,arrays,as,list,get,bean,factory,get,aliases,multi,aliased,assert,equals,4,tb2aliases,size,assert,true,tb2aliases,contains,alias1,assert,true,tb2aliases,contains,alias2,assert,true,tb2aliases,contains,alias3,assert,true,tb2aliases,contains,alias4,assert,true,bean,names,contains,multi,aliased,assert,false,bean,names,contains,alias1,assert,false,bean,names,contains,alias2,assert,false,bean,names,contains,alias3,assert,false,bean,names,contains,alias4,test,bean,tb3,test,bean,get,bean,factory,get,bean,alias,without,id1,test,bean,alias4,test,bean,get,bean,factory,get,bean,alias,without,id2,test,bean,alias5,test,bean,get,bean,factory,get,bean,alias,without,id3,assert,true,tb3,alias4,assert,true,tb3,alias5,list,tb3aliases,arrays,as,list,get,bean,factory,get,aliases,alias,without,id1,assert,equals,2,tb3aliases,size,assert,true,tb3aliases,contains,alias,without,id2,assert,true,tb3aliases,contains,alias,without,id3,assert,true,bean,names,contains,alias,without,id1,assert,false,bean,names,contains,alias,without,id2,assert,false,bean,names,contains,alias,without,id3,test,bean,tb4,test,bean,get,bean,factory,get,bean,test,bean,class,get,name,0,assert,equals,null,tb4,get,name,map,drs,get,listable,bean,factory,get,beans,of,type,dummy,referencer,class,false,false,assert,equals,5,drs,size,assert,true,drs,contains,key,dummy,referencer,class,get,name,0,assert,true,drs,contains,key,dummy,referencer,class,get,name,1,assert,true,drs,contains,key,dummy,referencer,class,get,name,2
XmlListableBeanFactoryTests -> public void testAutoAliasing() throws Exception;1385507683;Test that properties with name as well as id creating an alias up front.;public void testAutoAliasing() throws Exception {_		List beanNames = Arrays.asList(getListableBeanFactory().getBeanDefinitionNames())___		TestBean tb1 = (TestBean) getBeanFactory().getBean("aliased")__		TestBean alias1 = (TestBean) getBeanFactory().getBean("myalias")__		assertTrue(tb1 == alias1)__		List tb1Aliases = Arrays.asList(getBeanFactory().getAliases("aliased"))__		assertEquals(2, tb1Aliases.size())__		assertTrue(tb1Aliases.contains("myalias"))__		assertTrue(tb1Aliases.contains("youralias"))__		assertTrue(beanNames.contains("aliased"))__		assertFalse(beanNames.contains("myalias"))__		assertFalse(beanNames.contains("youralias"))___		TestBean tb2 = (TestBean) getBeanFactory().getBean("multiAliased")__		TestBean alias2 = (TestBean) getBeanFactory().getBean("alias1")__		TestBean alias3 = (TestBean) getBeanFactory().getBean("alias2")__		TestBean alias3a = (TestBean) getBeanFactory().getBean("alias3")__		TestBean alias3b = (TestBean) getBeanFactory().getBean("alias4")__		assertTrue(tb2 == alias2)__		assertTrue(tb2 == alias3)__		assertTrue(tb2 == alias3a)__		assertTrue(tb2 == alias3b)___		List tb2Aliases = Arrays.asList(getBeanFactory().getAliases("multiAliased"))__		assertEquals(4, tb2Aliases.size())__		assertTrue(tb2Aliases.contains("alias1"))__		assertTrue(tb2Aliases.contains("alias2"))__		assertTrue(tb2Aliases.contains("alias3"))__		assertTrue(tb2Aliases.contains("alias4"))__		assertTrue(beanNames.contains("multiAliased"))__		assertFalse(beanNames.contains("alias1"))__		assertFalse(beanNames.contains("alias2"))__		assertFalse(beanNames.contains("alias3"))__		assertFalse(beanNames.contains("alias4"))___		TestBean tb3 = (TestBean) getBeanFactory().getBean("aliasWithoutId1")__		TestBean alias4 = (TestBean) getBeanFactory().getBean("aliasWithoutId2")__		TestBean alias5 = (TestBean) getBeanFactory().getBean("aliasWithoutId3")__		assertTrue(tb3 == alias4)__		assertTrue(tb3 == alias5)__		List tb3Aliases = Arrays.asList(getBeanFactory().getAliases("aliasWithoutId1"))__		assertEquals(2, tb3Aliases.size())__		assertTrue(tb3Aliases.contains("aliasWithoutId2"))__		assertTrue(tb3Aliases.contains("aliasWithoutId3"))__		assertTrue(beanNames.contains("aliasWithoutId1"))__		assertFalse(beanNames.contains("aliasWithoutId2"))__		assertFalse(beanNames.contains("aliasWithoutId3"))___		TestBean tb4 = (TestBean) getBeanFactory().getBean(TestBean.class.getName() + "#0")__		assertEquals(null, tb4.getName())___		Map drs = getListableBeanFactory().getBeansOfType(DummyReferencer.class, false, false)__		assertEquals(5, drs.size())__		assertTrue(drs.containsKey(DummyReferencer.class.getName() + "#0"))__		assertTrue(drs.containsKey(DummyReferencer.class.getName() + "#1"))__		assertTrue(drs.containsKey(DummyReferencer.class.getName() + "#2"))__	};test,that,properties,with,name,as,well,as,id,creating,an,alias,up,front;public,void,test,auto,aliasing,throws,exception,list,bean,names,arrays,as,list,get,listable,bean,factory,get,bean,definition,names,test,bean,tb1,test,bean,get,bean,factory,get,bean,aliased,test,bean,alias1,test,bean,get,bean,factory,get,bean,myalias,assert,true,tb1,alias1,list,tb1aliases,arrays,as,list,get,bean,factory,get,aliases,aliased,assert,equals,2,tb1aliases,size,assert,true,tb1aliases,contains,myalias,assert,true,tb1aliases,contains,youralias,assert,true,bean,names,contains,aliased,assert,false,bean,names,contains,myalias,assert,false,bean,names,contains,youralias,test,bean,tb2,test,bean,get,bean,factory,get,bean,multi,aliased,test,bean,alias2,test,bean,get,bean,factory,get,bean,alias1,test,bean,alias3,test,bean,get,bean,factory,get,bean,alias2,test,bean,alias3a,test,bean,get,bean,factory,get,bean,alias3,test,bean,alias3b,test,bean,get,bean,factory,get,bean,alias4,assert,true,tb2,alias2,assert,true,tb2,alias3,assert,true,tb2,alias3a,assert,true,tb2,alias3b,list,tb2aliases,arrays,as,list,get,bean,factory,get,aliases,multi,aliased,assert,equals,4,tb2aliases,size,assert,true,tb2aliases,contains,alias1,assert,true,tb2aliases,contains,alias2,assert,true,tb2aliases,contains,alias3,assert,true,tb2aliases,contains,alias4,assert,true,bean,names,contains,multi,aliased,assert,false,bean,names,contains,alias1,assert,false,bean,names,contains,alias2,assert,false,bean,names,contains,alias3,assert,false,bean,names,contains,alias4,test,bean,tb3,test,bean,get,bean,factory,get,bean,alias,without,id1,test,bean,alias4,test,bean,get,bean,factory,get,bean,alias,without,id2,test,bean,alias5,test,bean,get,bean,factory,get,bean,alias,without,id3,assert,true,tb3,alias4,assert,true,tb3,alias5,list,tb3aliases,arrays,as,list,get,bean,factory,get,aliases,alias,without,id1,assert,equals,2,tb3aliases,size,assert,true,tb3aliases,contains,alias,without,id2,assert,true,tb3aliases,contains,alias,without,id3,assert,true,bean,names,contains,alias,without,id1,assert,false,bean,names,contains,alias,without,id2,assert,false,bean,names,contains,alias,without,id3,test,bean,tb4,test,bean,get,bean,factory,get,bean,test,bean,class,get,name,0,assert,equals,null,tb4,get,name,map,drs,get,listable,bean,factory,get,beans,of,type,dummy,referencer,class,false,false,assert,equals,5,drs,size,assert,true,drs,contains,key,dummy,referencer,class,get,name,0,assert,true,drs,contains,key,dummy,referencer,class,get,name,1,assert,true,drs,contains,key,dummy,referencer,class,get,name,2
