commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Test public void testListHasDefaultType() throws Exception {     TestBean bean = (TestBean) this.beanFactory.getBean("testBean").     for (Object o : bean.getSomeList()) {         assertEquals("Value type is incorrect", Integer.class, o.getClass()).     } }
false;public;0;7;;@Test public void testSetHasDefaultType() throws Exception {     TestBean bean = (TestBean) this.beanFactory.getBean("testBean").     for (Object o : bean.getSomeSet()) {         assertEquals("Value type is incorrect", Integer.class, o.getClass()).     } }
false;public;0;5;;@Test public void testMapHasDefaultKeyAndValueType() throws Exception {     TestBean bean = (TestBean) this.beanFactory.getBean("testBean").     assertMap(bean.getSomeMap()). }
false;public;0;5;;@Test public void testMapWithNestedElementsHasDefaultKeyAndValueType() throws Exception {     TestBean bean = (TestBean) this.beanFactory.getBean("testBean2").     assertMap(bean.getSomeMap()). }
false;private;1;6;;private void assertMap(Map<?, ?> map) {     for (Map.Entry entry : map.entrySet()) {         assertEquals("Key type is incorrect", Integer.class, entry.getKey().getClass()).         assertEquals("Value type is incorrect", Boolean.class, entry.getValue().getClass()).     } }
false;public;0;14;;@Test public void testBuildCollectionFromMixtureOfReferencesAndValues() throws Exception {     MixedCollectionBean jumble = (MixedCollectionBean) this.beanFactory.getBean("jumble").     assertTrue("Expected 3 elements, not " + jumble.getJumble().size(), jumble.getJumble().size() == 3).     List l = (List) jumble.getJumble().     assertTrue(l.get(0).equals("literal")).     Integer[] array1 = (Integer[]) l.get(1).     assertTrue(array1[0].equals(new Integer(2))).     assertTrue(array1[1].equals(new Integer(4))).     int[] array2 = (int[]) l.get(2).     assertTrue(array2[0] == 3).     assertTrue(array2[1] == 5). }
