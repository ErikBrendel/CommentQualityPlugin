# id;timestamp;commentText;codeText;commentWords;codeWords
PropertyPlaceholderConfigurerTests -> @Test 	public void twoPlacholderConfigurers_withConflictingSettings();1328020251;Creates a scenario in which two PPCs are configured, each with different_settings regarding resolving properties from the environment.;@Test_	public void twoPlacholderConfigurers_withConflictingSettings() {_		String P2 = "p2"__		String P2_LOCAL_PROPS_VAL = "p2LocalPropsVal"__		String P2_SYSTEM_PROPS_VAL = "p2SystemPropsVal"__		String P2_SYSTEM_ENV_VAL = "p2SystemEnvVal"___		AbstractBeanDefinition p2BeanDef = rootBeanDefinition(TestBean.class)_			.addPropertyValue("name", "${"+P1+"}")_			.addPropertyValue("country", "${"+P2+"}")_			.getBeanDefinition()___		bf.registerBeanDefinition("p1Bean", p1BeanDef)__		bf.registerBeanDefinition("p2Bean", p2BeanDef)___		ppc.setIgnoreUnresolvablePlaceholders(true)__		ppc.postProcessBeanFactory(bf)___		System.setProperty(P2, P2_SYSTEM_PROPS_VAL)__		getModifiableSystemEnvironment().put(P2, P2_SYSTEM_ENV_VAL)__		Properties ppc2Properties = new Properties()__		ppc2Properties.put(P2, P2_LOCAL_PROPS_VAL)___		PropertyPlaceholderConfigurer ppc2 = new PropertyPlaceholderConfigurer()__		ppc2.setSystemPropertiesMode(PropertyPlaceholderConfigurer.SYSTEM_PROPERTIES_MODE_OVERRIDE)__		ppc2.setProperties(ppc2Properties)___		ppc2Properties = new Properties()__		ppc2Properties.setProperty(P2, P2_LOCAL_PROPS_VAL)__		ppc2.postProcessBeanFactory(bf)___		TestBean p1Bean = bf.getBean("p1Bean", TestBean.class)__		assertThat(p1Bean.getName(), equalTo(P1_LOCAL_PROPS_VAL))___		TestBean p2Bean = bf.getBean("p2Bean", TestBean.class)__		assertThat(p2Bean.getName(), equalTo(P1_LOCAL_PROPS_VAL))__		assertThat(p2Bean.getCountry(), equalTo(P2_SYSTEM_PROPS_VAL))___		System.clearProperty(P2)__		getModifiableSystemEnvironment().remove(P2)__	};creates,a,scenario,in,which,two,ppcs,are,configured,each,with,different,settings,regarding,resolving,properties,from,the,environment;test,public,void,string,p2,p2,string,p2local,props,val,string,p2system,props,val,string,p2system,env,val,abstract,bean,definition,p2bean,def,root,bean,definition,test,bean,class,add,property,value,name,p1,add,property,value,country,p2,get,bean,definition,bf,register,bean,definition,p1bean,p1bean,def,bf,register,bean,definition,p2bean,p2bean,def,ppc,set,ignore,unresolvable,placeholders,true,ppc,post,process,bean,factory,bf,system,set,property,p2,get,modifiable,system,environment,put,p2,properties,ppc2properties,new,properties,ppc2properties,put,p2,property,placeholder,configurer,ppc2,new,property,placeholder,configurer,ppc2,set,system,properties,mode,property,placeholder,configurer,ppc2,set,properties,ppc2properties,ppc2properties,new,properties,ppc2properties,set,property,p2,ppc2,post,process,bean,factory,bf,test,bean,p1bean,bf,get,bean,p1bean,test,bean,class,assert,that,p1bean,get,name,equal,to,test,bean,p2bean,bf,get,bean,p2bean,test,bean,class,assert,that,p2bean,get,name,equal,to,assert,that,p2bean,get,country,equal,to,system,clear,property,p2,get,modifiable,system,environment,remove,p2
PropertyPlaceholderConfigurerTests -> @Test 	public void twoPlacholderConfigurers_withConflictingSettings();1362408075;Creates a scenario in which two PPCs are configured, each with different_settings regarding resolving properties from the environment.;@Test_	public void twoPlacholderConfigurers_withConflictingSettings() {_		String P2 = "p2"__		String P2_LOCAL_PROPS_VAL = "p2LocalPropsVal"__		String P2_SYSTEM_PROPS_VAL = "p2SystemPropsVal"__		String P2_SYSTEM_ENV_VAL = "p2SystemEnvVal"___		AbstractBeanDefinition p2BeanDef = rootBeanDefinition(TestBean.class)_			.addPropertyValue("name", "${"+P1+"}")_			.addPropertyValue("country", "${"+P2+"}")_			.getBeanDefinition()___		bf.registerBeanDefinition("p1Bean", p1BeanDef)__		bf.registerBeanDefinition("p2Bean", p2BeanDef)___		ppc.setIgnoreUnresolvablePlaceholders(true)__		ppc.postProcessBeanFactory(bf)___		System.setProperty(P2, P2_SYSTEM_PROPS_VAL)__		getModifiableSystemEnvironment().put(P2, P2_SYSTEM_ENV_VAL)__		Properties ppc2Properties = new Properties()__		ppc2Properties.put(P2, P2_LOCAL_PROPS_VAL)___		PropertyPlaceholderConfigurer ppc2 = new PropertyPlaceholderConfigurer()__		ppc2.setSystemPropertiesMode(PropertyPlaceholderConfigurer.SYSTEM_PROPERTIES_MODE_OVERRIDE)__		ppc2.setProperties(ppc2Properties)___		ppc2Properties = new Properties()__		ppc2Properties.setProperty(P2, P2_LOCAL_PROPS_VAL)__		ppc2.postProcessBeanFactory(bf)___		TestBean p1Bean = bf.getBean("p1Bean", TestBean.class)__		assertThat(p1Bean.getName(), equalTo(P1_LOCAL_PROPS_VAL))___		TestBean p2Bean = bf.getBean("p2Bean", TestBean.class)__		assertThat(p2Bean.getName(), equalTo(P1_LOCAL_PROPS_VAL))__		assertThat(p2Bean.getCountry(), equalTo(P2_SYSTEM_PROPS_VAL))___		System.clearProperty(P2)__		getModifiableSystemEnvironment().remove(P2)__	};creates,a,scenario,in,which,two,ppcs,are,configured,each,with,different,settings,regarding,resolving,properties,from,the,environment;test,public,void,string,p2,p2,string,p2local,props,val,string,p2system,props,val,string,p2system,env,val,abstract,bean,definition,p2bean,def,root,bean,definition,test,bean,class,add,property,value,name,p1,add,property,value,country,p2,get,bean,definition,bf,register,bean,definition,p1bean,p1bean,def,bf,register,bean,definition,p2bean,p2bean,def,ppc,set,ignore,unresolvable,placeholders,true,ppc,post,process,bean,factory,bf,system,set,property,p2,get,modifiable,system,environment,put,p2,properties,ppc2properties,new,properties,ppc2properties,put,p2,property,placeholder,configurer,ppc2,new,property,placeholder,configurer,ppc2,set,system,properties,mode,property,placeholder,configurer,ppc2,set,properties,ppc2properties,ppc2properties,new,properties,ppc2properties,set,property,p2,ppc2,post,process,bean,factory,bf,test,bean,p1bean,bf,get,bean,p1bean,test,bean,class,assert,that,p1bean,get,name,equal,to,test,bean,p2bean,bf,get,bean,p2bean,test,bean,class,assert,that,p2bean,get,name,equal,to,assert,that,p2bean,get,country,equal,to,system,clear,property,p2,get,modifiable,system,environment,remove,p2
PropertyPlaceholderConfigurerTests -> @Test 	public void twoPlacholderConfigurers_withConflictingSettings();1385507683;Creates a scenario in which two PPCs are configured, each with different_settings regarding resolving properties from the environment.;@Test_	public void twoPlacholderConfigurers_withConflictingSettings() {_		String P2 = "p2"__		String P2_LOCAL_PROPS_VAL = "p2LocalPropsVal"__		String P2_SYSTEM_PROPS_VAL = "p2SystemPropsVal"__		String P2_SYSTEM_ENV_VAL = "p2SystemEnvVal"___		AbstractBeanDefinition p2BeanDef = rootBeanDefinition(TestBean.class)_			.addPropertyValue("name", "${"+P1+"}")_			.addPropertyValue("country", "${"+P2+"}")_			.getBeanDefinition()___		bf.registerBeanDefinition("p1Bean", p1BeanDef)__		bf.registerBeanDefinition("p2Bean", p2BeanDef)___		ppc.setIgnoreUnresolvablePlaceholders(true)__		ppc.postProcessBeanFactory(bf)___		System.setProperty(P2, P2_SYSTEM_PROPS_VAL)__		getModifiableSystemEnvironment().put(P2, P2_SYSTEM_ENV_VAL)__		Properties ppc2Properties = new Properties()__		ppc2Properties.put(P2, P2_LOCAL_PROPS_VAL)___		PropertyPlaceholderConfigurer ppc2 = new PropertyPlaceholderConfigurer()__		ppc2.setSystemPropertiesMode(PropertyPlaceholderConfigurer.SYSTEM_PROPERTIES_MODE_OVERRIDE)__		ppc2.setProperties(ppc2Properties)___		ppc2Properties = new Properties()__		ppc2Properties.setProperty(P2, P2_LOCAL_PROPS_VAL)__		ppc2.postProcessBeanFactory(bf)___		TestBean p1Bean = bf.getBean("p1Bean", TestBean.class)__		assertThat(p1Bean.getName(), equalTo(P1_LOCAL_PROPS_VAL))___		TestBean p2Bean = bf.getBean("p2Bean", TestBean.class)__		assertThat(p2Bean.getName(), equalTo(P1_LOCAL_PROPS_VAL))__		assertThat(p2Bean.getCountry(), equalTo(P2_SYSTEM_PROPS_VAL))___		System.clearProperty(P2)__		getModifiableSystemEnvironment().remove(P2)__	};creates,a,scenario,in,which,two,ppcs,are,configured,each,with,different,settings,regarding,resolving,properties,from,the,environment;test,public,void,string,p2,p2,string,p2local,props,val,string,p2system,props,val,string,p2system,env,val,abstract,bean,definition,p2bean,def,root,bean,definition,test,bean,class,add,property,value,name,p1,add,property,value,country,p2,get,bean,definition,bf,register,bean,definition,p1bean,p1bean,def,bf,register,bean,definition,p2bean,p2bean,def,ppc,set,ignore,unresolvable,placeholders,true,ppc,post,process,bean,factory,bf,system,set,property,p2,get,modifiable,system,environment,put,p2,properties,ppc2properties,new,properties,ppc2properties,put,p2,property,placeholder,configurer,ppc2,new,property,placeholder,configurer,ppc2,set,system,properties,mode,property,placeholder,configurer,ppc2,set,properties,ppc2properties,ppc2properties,new,properties,ppc2properties,set,property,p2,ppc2,post,process,bean,factory,bf,test,bean,p1bean,bf,get,bean,p1bean,test,bean,class,assert,that,p1bean,get,name,equal,to,test,bean,p2bean,bf,get,bean,p2bean,test,bean,class,assert,that,p2bean,get,name,equal,to,assert,that,p2bean,get,country,equal,to,system,clear,property,p2,get,modifiable,system,environment,remove,p2
PropertyPlaceholderConfigurerTests -> @Test 	public void twoPlacholderConfigurers_withConflictingSettings();1413848647;Creates a scenario in which two PPCs are configured, each with different_settings regarding resolving properties from the environment.;@Test_	public void twoPlacholderConfigurers_withConflictingSettings() {_		String P2 = "p2"__		String P2_LOCAL_PROPS_VAL = "p2LocalPropsVal"__		String P2_SYSTEM_PROPS_VAL = "p2SystemPropsVal"__		String P2_SYSTEM_ENV_VAL = "p2SystemEnvVal"___		AbstractBeanDefinition p2BeanDef = rootBeanDefinition(TestBean.class)_			.addPropertyValue("name", "${"+P1+"}")_			.addPropertyValue("country", "${"+P2+"}")_			.getBeanDefinition()___		bf.registerBeanDefinition("p1Bean", p1BeanDef)__		bf.registerBeanDefinition("p2Bean", p2BeanDef)___		ppc.setIgnoreUnresolvablePlaceholders(true)__		ppc.postProcessBeanFactory(bf)___		System.setProperty(P2, P2_SYSTEM_PROPS_VAL)__		getModifiableSystemEnvironment().put(P2, P2_SYSTEM_ENV_VAL)__		Properties ppc2Properties = new Properties()__		ppc2Properties.put(P2, P2_LOCAL_PROPS_VAL)___		PropertyPlaceholderConfigurer ppc2 = new PropertyPlaceholderConfigurer()__		ppc2.setSystemPropertiesMode(PropertyPlaceholderConfigurer.SYSTEM_PROPERTIES_MODE_OVERRIDE)__		ppc2.setProperties(ppc2Properties)___		ppc2Properties = new Properties()__		ppc2Properties.setProperty(P2, P2_LOCAL_PROPS_VAL)__		ppc2.postProcessBeanFactory(bf)___		TestBean p1Bean = bf.getBean("p1Bean", TestBean.class)__		assertThat(p1Bean.getName(), equalTo(P1_LOCAL_PROPS_VAL))___		TestBean p2Bean = bf.getBean("p2Bean", TestBean.class)__		assertThat(p2Bean.getName(), equalTo(P1_LOCAL_PROPS_VAL))__		assertThat(p2Bean.getCountry(), equalTo(P2_SYSTEM_PROPS_VAL))___		System.clearProperty(P2)__		getModifiableSystemEnvironment().remove(P2)__	};creates,a,scenario,in,which,two,ppcs,are,configured,each,with,different,settings,regarding,resolving,properties,from,the,environment;test,public,void,string,p2,p2,string,p2local,props,val,string,p2system,props,val,string,p2system,env,val,abstract,bean,definition,p2bean,def,root,bean,definition,test,bean,class,add,property,value,name,p1,add,property,value,country,p2,get,bean,definition,bf,register,bean,definition,p1bean,p1bean,def,bf,register,bean,definition,p2bean,p2bean,def,ppc,set,ignore,unresolvable,placeholders,true,ppc,post,process,bean,factory,bf,system,set,property,p2,get,modifiable,system,environment,put,p2,properties,ppc2properties,new,properties,ppc2properties,put,p2,property,placeholder,configurer,ppc2,new,property,placeholder,configurer,ppc2,set,system,properties,mode,property,placeholder,configurer,ppc2,set,properties,ppc2properties,ppc2properties,new,properties,ppc2properties,set,property,p2,ppc2,post,process,bean,factory,bf,test,bean,p1bean,bf,get,bean,p1bean,test,bean,class,assert,that,p1bean,get,name,equal,to,test,bean,p2bean,bf,get,bean,p2bean,test,bean,class,assert,that,p2bean,get,name,equal,to,assert,that,p2bean,get,country,equal,to,system,clear,property,p2,get,modifiable,system,environment,remove,p2
PropertyPlaceholderConfigurerTests -> @Test 	public void twoPlacholderConfigurers_withConflictingSettings();1455905979;Creates a scenario in which two PPCs are configured, each with different_settings regarding resolving properties from the environment.;@Test_	public void twoPlacholderConfigurers_withConflictingSettings() {_		String P2 = "p2"__		String P2_LOCAL_PROPS_VAL = "p2LocalPropsVal"__		String P2_SYSTEM_PROPS_VAL = "p2SystemPropsVal"__		String P2_SYSTEM_ENV_VAL = "p2SystemEnvVal"___		AbstractBeanDefinition p2BeanDef = rootBeanDefinition(TestBean.class)_				.addPropertyValue("name", "${" + P1 + "}")_				.addPropertyValue("country", "${" + P2 + "}")_				.getBeanDefinition()___		bf.registerBeanDefinition("p1Bean", p1BeanDef)__		bf.registerBeanDefinition("p2Bean", p2BeanDef)___		ppc.setIgnoreUnresolvablePlaceholders(true)__		ppc.postProcessBeanFactory(bf)___		System.setProperty(P2, P2_SYSTEM_PROPS_VAL)__		getModifiableSystemEnvironment().put(P2, P2_SYSTEM_ENV_VAL)__		Properties ppc2Properties = new Properties()__		ppc2Properties.put(P2, P2_LOCAL_PROPS_VAL)___		PropertyPlaceholderConfigurer ppc2 = new PropertyPlaceholderConfigurer()__		ppc2.setSystemPropertiesMode(PropertyPlaceholderConfigurer.SYSTEM_PROPERTIES_MODE_OVERRIDE)__		ppc2.setProperties(ppc2Properties)___		ppc2Properties = new Properties()__		ppc2Properties.setProperty(P2, P2_LOCAL_PROPS_VAL)__		ppc2.postProcessBeanFactory(bf)___		TestBean p1Bean = bf.getBean("p1Bean", TestBean.class)__		assertThat(p1Bean.getName(), equalTo(P1_LOCAL_PROPS_VAL))___		TestBean p2Bean = bf.getBean("p2Bean", TestBean.class)__		assertThat(p2Bean.getName(), equalTo(P1_LOCAL_PROPS_VAL))__		assertThat(p2Bean.getCountry(), equalTo(P2_SYSTEM_PROPS_VAL))___		System.clearProperty(P2)__		getModifiableSystemEnvironment().remove(P2)__	};creates,a,scenario,in,which,two,ppcs,are,configured,each,with,different,settings,regarding,resolving,properties,from,the,environment;test,public,void,string,p2,p2,string,p2local,props,val,string,p2system,props,val,string,p2system,env,val,abstract,bean,definition,p2bean,def,root,bean,definition,test,bean,class,add,property,value,name,p1,add,property,value,country,p2,get,bean,definition,bf,register,bean,definition,p1bean,p1bean,def,bf,register,bean,definition,p2bean,p2bean,def,ppc,set,ignore,unresolvable,placeholders,true,ppc,post,process,bean,factory,bf,system,set,property,p2,get,modifiable,system,environment,put,p2,properties,ppc2properties,new,properties,ppc2properties,put,p2,property,placeholder,configurer,ppc2,new,property,placeholder,configurer,ppc2,set,system,properties,mode,property,placeholder,configurer,ppc2,set,properties,ppc2properties,ppc2properties,new,properties,ppc2properties,set,property,p2,ppc2,post,process,bean,factory,bf,test,bean,p1bean,bf,get,bean,p1bean,test,bean,class,assert,that,p1bean,get,name,equal,to,test,bean,p2bean,bf,get,bean,p2bean,test,bean,class,assert,that,p2bean,get,name,equal,to,assert,that,p2bean,get,country,equal,to,system,clear,property,p2,get,modifiable,system,environment,remove,p2
