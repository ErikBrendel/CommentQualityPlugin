# id;timestamp;commentText;codeText;commentWords;codeWords
ExtendedBeanInfoTests -> @Test 	public void emptyPropertiesIgnored() throws IntrospectionException;1328020251;Ensures that an empty string is not passed into a PropertyDescriptor constructor. This_could occur when handling ArrayList.set(int,Object);@Test_	public void emptyPropertiesIgnored() throws IntrospectionException {_		@SuppressWarnings("unused") class C {_			public Object set(Object o) { return null_ }_			public Object set(int i, Object o) { return null_ }_		}__		BeanInfo bi = Introspector.getBeanInfo(C.class)__		ExtendedBeanInfo ebi = new ExtendedBeanInfo(bi)___		assertThat(ebi.getPropertyDescriptors(), equalTo(bi.getPropertyDescriptors()))__	};ensures,that,an,empty,string,is,not,passed,into,a,property,descriptor,constructor,this,could,occur,when,handling,array,list,set,int,object;test,public,void,empty,properties,ignored,throws,introspection,exception,suppress,warnings,unused,class,c,public,object,set,object,o,return,null,public,object,set,int,i,object,o,return,null,bean,info,bi,introspector,get,bean,info,c,class,extended,bean,info,ebi,new,extended,bean,info,bi,assert,that,ebi,get,property,descriptors,equal,to,bi,get,property,descriptors
ExtendedBeanInfoTests -> @Test 	public void emptyPropertiesIgnored() throws IntrospectionException;1329142650;Ensures that an empty string is not passed into a PropertyDescriptor constructor. This_could occur when handling ArrayList.set(int,Object);@Test_	public void emptyPropertiesIgnored() throws IntrospectionException {_		@SuppressWarnings("unused") class C {_			public Object set(Object o) { return null_ }_			public Object set(int i, Object o) { return null_ }_		}__		BeanInfo bi = Introspector.getBeanInfo(C.class)__		ExtendedBeanInfo ebi = new ExtendedBeanInfo(bi)___		assertThat(ebi.getPropertyDescriptors(), equalTo(bi.getPropertyDescriptors()))__	};ensures,that,an,empty,string,is,not,passed,into,a,property,descriptor,constructor,this,could,occur,when,handling,array,list,set,int,object;test,public,void,empty,properties,ignored,throws,introspection,exception,suppress,warnings,unused,class,c,public,object,set,object,o,return,null,public,object,set,int,i,object,o,return,null,bean,info,bi,introspector,get,bean,info,c,class,extended,bean,info,ebi,new,extended,bean,info,bi,assert,that,ebi,get,property,descriptors,equal,to,bi,get,property,descriptors
ExtendedBeanInfoTests -> @Test 	public void emptyPropertiesIgnored() throws IntrospectionException;1347201894;Ensures that an empty string is not passed into a PropertyDescriptor constructor. This_could occur when handling ArrayList.set(int,Object);@Test_	public void emptyPropertiesIgnored() throws IntrospectionException {_		@SuppressWarnings("unused") class C {_			public Object set(Object o) { return null_ }_			public Object set(int i, Object o) { return null_ }_		}__		BeanInfo bi = Introspector.getBeanInfo(C.class)__		ExtendedBeanInfo ebi = new ExtendedBeanInfo(bi)___		assertThat(ebi.getPropertyDescriptors(), equalTo(bi.getPropertyDescriptors()))__	};ensures,that,an,empty,string,is,not,passed,into,a,property,descriptor,constructor,this,could,occur,when,handling,array,list,set,int,object;test,public,void,empty,properties,ignored,throws,introspection,exception,suppress,warnings,unused,class,c,public,object,set,object,o,return,null,public,object,set,int,i,object,o,return,null,bean,info,bi,introspector,get,bean,info,c,class,extended,bean,info,ebi,new,extended,bean,info,bi,assert,that,ebi,get,property,descriptors,equal,to,bi,get,property,descriptors
ExtendedBeanInfoTests -> @Test 	public void emptyPropertiesIgnored() throws IntrospectionException;1353842900;Ensures that an empty string is not passed into a PropertyDescriptor constructor. This_could occur when handling ArrayList.set(int,Object);@Test_	public void emptyPropertiesIgnored() throws IntrospectionException {_		@SuppressWarnings("unused") class C {_			public Object set(Object o) { return null_ }_			public Object set(int i, Object o) { return null_ }_		}__		BeanInfo bi = Introspector.getBeanInfo(C.class)__		BeanInfo ebi = new ExtendedBeanInfo(bi)___		assertThat(ebi.getPropertyDescriptors(), equalTo(bi.getPropertyDescriptors()))__	};ensures,that,an,empty,string,is,not,passed,into,a,property,descriptor,constructor,this,could,occur,when,handling,array,list,set,int,object;test,public,void,empty,properties,ignored,throws,introspection,exception,suppress,warnings,unused,class,c,public,object,set,object,o,return,null,public,object,set,int,i,object,o,return,null,bean,info,bi,introspector,get,bean,info,c,class,bean,info,ebi,new,extended,bean,info,bi,assert,that,ebi,get,property,descriptors,equal,to,bi,get,property,descriptors
ExtendedBeanInfoTests -> @Test 	public void emptyPropertiesIgnored() throws IntrospectionException;1355966262;Ensures that an empty string is not passed into a PropertyDescriptor constructor. This_could occur when handling ArrayList.set(int,Object);@Test_	public void emptyPropertiesIgnored() throws IntrospectionException {_		@SuppressWarnings("unused") class C {_			public Object set(Object o) { return null_ }_			public Object set(int i, Object o) { return null_ }_		}__		BeanInfo bi = Introspector.getBeanInfo(C.class)__		BeanInfo ebi = new ExtendedBeanInfo(bi)___		assertThat(ebi.getPropertyDescriptors(), equalTo(bi.getPropertyDescriptors()))__	};ensures,that,an,empty,string,is,not,passed,into,a,property,descriptor,constructor,this,could,occur,when,handling,array,list,set,int,object;test,public,void,empty,properties,ignored,throws,introspection,exception,suppress,warnings,unused,class,c,public,object,set,object,o,return,null,public,object,set,int,i,object,o,return,null,bean,info,bi,introspector,get,bean,info,c,class,bean,info,ebi,new,extended,bean,info,bi,assert,that,ebi,get,property,descriptors,equal,to,bi,get,property,descriptors
ExtendedBeanInfoTests -> @Test 	public void emptyPropertiesIgnored() throws IntrospectionException;1356735495;Ensures that an empty string is not passed into a PropertyDescriptor constructor. This_could occur when handling ArrayList.set(int,Object);@Test_	public void emptyPropertiesIgnored() throws IntrospectionException {_		@SuppressWarnings("unused") class C {_			public Object set(Object o) { return null_ }_			public Object set(int i, Object o) { return null_ }_		}__		BeanInfo bi = Introspector.getBeanInfo(C.class)__		BeanInfo ebi = new ExtendedBeanInfo(bi)___		assertThat(ebi.getPropertyDescriptors(), equalTo(bi.getPropertyDescriptors()))__	};ensures,that,an,empty,string,is,not,passed,into,a,property,descriptor,constructor,this,could,occur,when,handling,array,list,set,int,object;test,public,void,empty,properties,ignored,throws,introspection,exception,suppress,warnings,unused,class,c,public,object,set,object,o,return,null,public,object,set,int,i,object,o,return,null,bean,info,bi,introspector,get,bean,info,c,class,bean,info,ebi,new,extended,bean,info,bi,assert,that,ebi,get,property,descriptors,equal,to,bi,get,property,descriptors
ExtendedBeanInfoTests -> @Test 	public void emptyPropertiesIgnored() throws IntrospectionException;1357119417;Ensures that an empty string is not passed into a PropertyDescriptor constructor. This_could occur when handling ArrayList.set(int,Object);@Test_	public void emptyPropertiesIgnored() throws IntrospectionException {_		@SuppressWarnings("unused") class C {_			public Object set(Object o) { return null_ }_			public Object set(int i, Object o) { return null_ }_		}__		BeanInfo bi = Introspector.getBeanInfo(C.class)__		BeanInfo ebi = new ExtendedBeanInfo(bi)___		assertThat(ebi.getPropertyDescriptors(), equalTo(bi.getPropertyDescriptors()))__	};ensures,that,an,empty,string,is,not,passed,into,a,property,descriptor,constructor,this,could,occur,when,handling,array,list,set,int,object;test,public,void,empty,properties,ignored,throws,introspection,exception,suppress,warnings,unused,class,c,public,object,set,object,o,return,null,public,object,set,int,i,object,o,return,null,bean,info,bi,introspector,get,bean,info,c,class,bean,info,ebi,new,extended,bean,info,bi,assert,that,ebi,get,property,descriptors,equal,to,bi,get,property,descriptors
ExtendedBeanInfoTests -> @Test 	public void emptyPropertiesIgnored() throws IntrospectionException;1362408075;Ensures that an empty string is not passed into a PropertyDescriptor constructor. This_could occur when handling ArrayList.set(int,Object);@Test_	public void emptyPropertiesIgnored() throws IntrospectionException {_		@SuppressWarnings("unused") class C {_			public Object set(Object o) { return null_ }_			public Object set(int i, Object o) { return null_ }_		}__		BeanInfo bi = Introspector.getBeanInfo(C.class)__		BeanInfo ebi = new ExtendedBeanInfo(bi)___		assertThat(ebi.getPropertyDescriptors(), equalTo(bi.getPropertyDescriptors()))__	};ensures,that,an,empty,string,is,not,passed,into,a,property,descriptor,constructor,this,could,occur,when,handling,array,list,set,int,object;test,public,void,empty,properties,ignored,throws,introspection,exception,suppress,warnings,unused,class,c,public,object,set,object,o,return,null,public,object,set,int,i,object,o,return,null,bean,info,bi,introspector,get,bean,info,c,class,bean,info,ebi,new,extended,bean,info,bi,assert,that,ebi,get,property,descriptors,equal,to,bi,get,property,descriptors
ExtendedBeanInfoTests -> @Test 	public void emptyPropertiesIgnored() throws IntrospectionException;1368482696;Ensures that an empty string is not passed into a PropertyDescriptor constructor. This_could occur when handling ArrayList.set(int,Object);@Test_	public void emptyPropertiesIgnored() throws IntrospectionException {_		@SuppressWarnings("unused") class C {_			public Object set(Object o) { return null_ }_			public Object set(int i, Object o) { return null_ }_		}__		BeanInfo bi = Introspector.getBeanInfo(C.class)__		BeanInfo ebi = new ExtendedBeanInfo(bi)___		assertThat(ebi.getPropertyDescriptors(), equalTo(bi.getPropertyDescriptors()))__	};ensures,that,an,empty,string,is,not,passed,into,a,property,descriptor,constructor,this,could,occur,when,handling,array,list,set,int,object;test,public,void,empty,properties,ignored,throws,introspection,exception,suppress,warnings,unused,class,c,public,object,set,object,o,return,null,public,object,set,int,i,object,o,return,null,bean,info,bi,introspector,get,bean,info,c,class,bean,info,ebi,new,extended,bean,info,bi,assert,that,ebi,get,property,descriptors,equal,to,bi,get,property,descriptors
ExtendedBeanInfoTests -> @Test 	public void emptyPropertiesIgnored() throws IntrospectionException;1375195689;Ensures that an empty string is not passed into a PropertyDescriptor constructor. This_could occur when handling ArrayList.set(int,Object);@Test_	public void emptyPropertiesIgnored() throws IntrospectionException {_		@SuppressWarnings("unused") class C {_			public Object set(Object o) { return null_ }_			public Object set(int i, Object o) { return null_ }_		}__		BeanInfo bi = Introspector.getBeanInfo(C.class)__		BeanInfo ebi = new ExtendedBeanInfo(bi)___		assertThat(ebi.getPropertyDescriptors(), equalTo(bi.getPropertyDescriptors()))__	};ensures,that,an,empty,string,is,not,passed,into,a,property,descriptor,constructor,this,could,occur,when,handling,array,list,set,int,object;test,public,void,empty,properties,ignored,throws,introspection,exception,suppress,warnings,unused,class,c,public,object,set,object,o,return,null,public,object,set,int,i,object,o,return,null,bean,info,bi,introspector,get,bean,info,c,class,bean,info,ebi,new,extended,bean,info,bi,assert,that,ebi,get,property,descriptors,equal,to,bi,get,property,descriptors
ExtendedBeanInfoTests -> @Test 	public void emptyPropertiesIgnored() throws IntrospectionException;1386711257;Ensures that an empty string is not passed into a PropertyDescriptor constructor. This_could occur when handling ArrayList.set(int,Object);@Test_	public void emptyPropertiesIgnored() throws IntrospectionException {_		@SuppressWarnings("unused") class C {_			public Object set(Object o) { return null_ }_			public Object set(int i, Object o) { return null_ }_		}__		BeanInfo bi = Introspector.getBeanInfo(C.class)__		BeanInfo ebi = new ExtendedBeanInfo(bi)___		assertThat(ebi.getPropertyDescriptors(), equalTo(bi.getPropertyDescriptors()))__	};ensures,that,an,empty,string,is,not,passed,into,a,property,descriptor,constructor,this,could,occur,when,handling,array,list,set,int,object;test,public,void,empty,properties,ignored,throws,introspection,exception,suppress,warnings,unused,class,c,public,object,set,object,o,return,null,public,object,set,int,i,object,o,return,null,bean,info,bi,introspector,get,bean,info,c,class,bean,info,ebi,new,extended,bean,info,bi,assert,that,ebi,get,property,descriptors,equal,to,bi,get,property,descriptors
ExtendedBeanInfoTests -> @Test 	public void emptyPropertiesIgnored() throws IntrospectionException;1410903610;Ensures that an empty string is not passed into a PropertyDescriptor constructor. This_could occur when handling ArrayList.set(int,Object);@Test_	public void emptyPropertiesIgnored() throws IntrospectionException {_		@SuppressWarnings("unused") class C {_			public Object set(Object o) { return null_ }_			public Object set(int i, Object o) { return null_ }_		}__		BeanInfo bi = Introspector.getBeanInfo(C.class)__		BeanInfo ebi = new ExtendedBeanInfo(bi)___		assertThat(ebi.getPropertyDescriptors(), equalTo(bi.getPropertyDescriptors()))__	};ensures,that,an,empty,string,is,not,passed,into,a,property,descriptor,constructor,this,could,occur,when,handling,array,list,set,int,object;test,public,void,empty,properties,ignored,throws,introspection,exception,suppress,warnings,unused,class,c,public,object,set,object,o,return,null,public,object,set,int,i,object,o,return,null,bean,info,bi,introspector,get,bean,info,c,class,bean,info,ebi,new,extended,bean,info,bi,assert,that,ebi,get,property,descriptors,equal,to,bi,get,property,descriptors
ExtendedBeanInfoTests -> @Test 	public void emptyPropertiesIgnored() throws IntrospectionException;1417048908;Ensures that an empty string is not passed into a PropertyDescriptor constructor. This_could occur when handling ArrayList.set(int,Object);@Test_	public void emptyPropertiesIgnored() throws IntrospectionException {_		@SuppressWarnings("unused") class C {_			public Object set(Object o) { return null_ }_			public Object set(int i, Object o) { return null_ }_		}__		BeanInfo bi = Introspector.getBeanInfo(C.class)__		BeanInfo ebi = new ExtendedBeanInfo(bi)___		assertThat(ebi.getPropertyDescriptors(), equalTo(bi.getPropertyDescriptors()))__	};ensures,that,an,empty,string,is,not,passed,into,a,property,descriptor,constructor,this,could,occur,when,handling,array,list,set,int,object;test,public,void,empty,properties,ignored,throws,introspection,exception,suppress,warnings,unused,class,c,public,object,set,object,o,return,null,public,object,set,int,i,object,o,return,null,bean,info,bi,introspector,get,bean,info,c,class,bean,info,ebi,new,extended,bean,info,bi,assert,that,ebi,get,property,descriptors,equal,to,bi,get,property,descriptors
ExtendedBeanInfoTests -> @Test 	public void emptyPropertiesIgnored() throws IntrospectionException;1420208329;Ensures that an empty string is not passed into a PropertyDescriptor constructor. This_could occur when handling ArrayList.set(int,Object);@Test_	public void emptyPropertiesIgnored() throws IntrospectionException {_		@SuppressWarnings("unused") class C {_			public Object set(Object o) { return null_ }_			public Object set(int i, Object o) { return null_ }_		}__		BeanInfo bi = Introspector.getBeanInfo(C.class)__		BeanInfo ebi = new ExtendedBeanInfo(bi)___		assertThat(ebi.getPropertyDescriptors(), equalTo(bi.getPropertyDescriptors()))__	};ensures,that,an,empty,string,is,not,passed,into,a,property,descriptor,constructor,this,could,occur,when,handling,array,list,set,int,object;test,public,void,empty,properties,ignored,throws,introspection,exception,suppress,warnings,unused,class,c,public,object,set,object,o,return,null,public,object,set,int,i,object,o,return,null,bean,info,bi,introspector,get,bean,info,c,class,bean,info,ebi,new,extended,bean,info,bi,assert,that,ebi,get,property,descriptors,equal,to,bi,get,property,descriptors
ExtendedBeanInfoTests -> @Test 	public void emptyPropertiesIgnored() throws IntrospectionException;1420210924;Ensures that an empty string is not passed into a PropertyDescriptor constructor. This_could occur when handling ArrayList.set(int,Object);@Test_	public void emptyPropertiesIgnored() throws IntrospectionException {_		@SuppressWarnings("unused") class C {_			public Object set(Object o) { return null_ }_			public Object set(int i, Object o) { return null_ }_		}__		BeanInfo bi = Introspector.getBeanInfo(C.class)__		BeanInfo ebi = new ExtendedBeanInfo(bi)___		assertThat(ebi.getPropertyDescriptors(), equalTo(bi.getPropertyDescriptors()))__	};ensures,that,an,empty,string,is,not,passed,into,a,property,descriptor,constructor,this,could,occur,when,handling,array,list,set,int,object;test,public,void,empty,properties,ignored,throws,introspection,exception,suppress,warnings,unused,class,c,public,object,set,object,o,return,null,public,object,set,int,i,object,o,return,null,bean,info,bi,introspector,get,bean,info,c,class,bean,info,ebi,new,extended,bean,info,bi,assert,that,ebi,get,property,descriptors,equal,to,bi,get,property,descriptors
ExtendedBeanInfoTests -> @Test 	public void emptyPropertiesIgnored() throws IntrospectionException;1439397756;Ensures that an empty string is not passed into a PropertyDescriptor constructor. This_could occur when handling ArrayList.set(int,Object);@Test_	public void emptyPropertiesIgnored() throws IntrospectionException {_		@SuppressWarnings("unused") class C {_			public Object set(Object o) { return null_ }_			public Object set(int i, Object o) { return null_ }_		}__		BeanInfo bi = Introspector.getBeanInfo(C.class)__		BeanInfo ebi = new ExtendedBeanInfo(bi)___		assertThat(ebi.getPropertyDescriptors(), equalTo(bi.getPropertyDescriptors()))__	};ensures,that,an,empty,string,is,not,passed,into,a,property,descriptor,constructor,this,could,occur,when,handling,array,list,set,int,object;test,public,void,empty,properties,ignored,throws,introspection,exception,suppress,warnings,unused,class,c,public,object,set,object,o,return,null,public,object,set,int,i,object,o,return,null,bean,info,bi,introspector,get,bean,info,c,class,bean,info,ebi,new,extended,bean,info,bi,assert,that,ebi,get,property,descriptors,equal,to,bi,get,property,descriptors
ExtendedBeanInfoTests -> @Test 	public void reproSpr8522() throws IntrospectionException;1328020251;Corners the bug revealed by SPR-8522, in which an (apparently) indexed write method_without a corresponding indexed read method would fail to be processed correctly by_ExtendedBeanInfo. The local class C below represents the relevant methods from_Google's GsonBuilder class. Interestingly, the setDateFormat(int, int) method was_not actually intended to serve as an indexed write method_ it just appears that way.;@Test_	public void reproSpr8522() throws IntrospectionException {_		@SuppressWarnings("unused") class C {_			public Object setDateFormat(String pattern) { return new Object()_ }_			public Object setDateFormat(int style) { return new Object()_ }_			public Object setDateFormat(int dateStyle, int timeStyle) { return new Object()_ }_		}_		BeanInfo bi = Introspector.getBeanInfo(C.class)___		assertThat(hasReadMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasWriteMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasIndexedReadMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasIndexedWriteMethodForProperty(bi, "dateFormat"), is(true))___		ExtendedBeanInfo ebi = new ExtendedBeanInfo(bi)___		assertThat(hasReadMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasWriteMethodForProperty(bi, "dateFormat"), is(true))__		assertThat(hasIndexedReadMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasIndexedWriteMethodForProperty(bi, "dateFormat"), is(true))___		assertThat(hasReadMethodForProperty(ebi, "dateFormat"), is(false))__		assertThat(hasWriteMethodForProperty(ebi, "dateFormat"), is(true))__		assertThat(hasIndexedReadMethodForProperty(ebi, "dateFormat"), is(false))__		assertThat(hasIndexedWriteMethodForProperty(ebi, "dateFormat"), is(true))__	};corners,the,bug,revealed,by,spr,8522,in,which,an,apparently,indexed,write,method,without,a,corresponding,indexed,read,method,would,fail,to,be,processed,correctly,by,extended,bean,info,the,local,class,c,below,represents,the,relevant,methods,from,google,s,gson,builder,class,interestingly,the,set,date,format,int,int,method,was,not,actually,intended,to,serve,as,an,indexed,write,method,it,just,appears,that,way;test,public,void,repro,spr8522,throws,introspection,exception,suppress,warnings,unused,class,c,public,object,set,date,format,string,pattern,return,new,object,public,object,set,date,format,int,style,return,new,object,public,object,set,date,format,int,date,style,int,time,style,return,new,object,bean,info,bi,introspector,get,bean,info,c,class,assert,that,has,read,method,for,property,bi,date,format,is,false,assert,that,has,write,method,for,property,bi,date,format,is,false,assert,that,has,indexed,read,method,for,property,bi,date,format,is,false,assert,that,has,indexed,write,method,for,property,bi,date,format,is,true,extended,bean,info,ebi,new,extended,bean,info,bi,assert,that,has,read,method,for,property,bi,date,format,is,false,assert,that,has,write,method,for,property,bi,date,format,is,true,assert,that,has,indexed,read,method,for,property,bi,date,format,is,false,assert,that,has,indexed,write,method,for,property,bi,date,format,is,true,assert,that,has,read,method,for,property,ebi,date,format,is,false,assert,that,has,write,method,for,property,ebi,date,format,is,true,assert,that,has,indexed,read,method,for,property,ebi,date,format,is,false,assert,that,has,indexed,write,method,for,property,ebi,date,format,is,true
ExtendedBeanInfoTests -> @Test 	public void reproSpr8522() throws IntrospectionException;1329142650;Corners the bug revealed by SPR-8522, in which an (apparently) indexed write method_without a corresponding indexed read method would fail to be processed correctly by_ExtendedBeanInfo. The local class C below represents the relevant methods from_Google's GsonBuilder class. Interestingly, the setDateFormat(int, int) method was_not actually intended to serve as an indexed write method_ it just appears that way.;@Test_	public void reproSpr8522() throws IntrospectionException {_		@SuppressWarnings("unused") class C {_			public Object setDateFormat(String pattern) { return new Object()_ }_			public Object setDateFormat(int style) { return new Object()_ }_			public Object setDateFormat(int dateStyle, int timeStyle) { return new Object()_ }_		}_		BeanInfo bi = Introspector.getBeanInfo(C.class)___		assertThat(hasReadMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasWriteMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasIndexedReadMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasIndexedWriteMethodForProperty(bi, "dateFormat"), is(trueUntilJdk17()))___		ExtendedBeanInfo ebi = new ExtendedBeanInfo(bi)___		assertThat(hasReadMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasWriteMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasIndexedReadMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasIndexedWriteMethodForProperty(bi, "dateFormat"), is(trueUntilJdk17()))___		assertThat(hasReadMethodForProperty(ebi, "dateFormat"), is(false))__		assertThat(hasWriteMethodForProperty(ebi, "dateFormat"), is(false))__		assertThat(hasIndexedReadMethodForProperty(ebi, "dateFormat"), is(false))__		assertThat(hasIndexedWriteMethodForProperty(ebi, "dateFormat"), is(true))__	};corners,the,bug,revealed,by,spr,8522,in,which,an,apparently,indexed,write,method,without,a,corresponding,indexed,read,method,would,fail,to,be,processed,correctly,by,extended,bean,info,the,local,class,c,below,represents,the,relevant,methods,from,google,s,gson,builder,class,interestingly,the,set,date,format,int,int,method,was,not,actually,intended,to,serve,as,an,indexed,write,method,it,just,appears,that,way;test,public,void,repro,spr8522,throws,introspection,exception,suppress,warnings,unused,class,c,public,object,set,date,format,string,pattern,return,new,object,public,object,set,date,format,int,style,return,new,object,public,object,set,date,format,int,date,style,int,time,style,return,new,object,bean,info,bi,introspector,get,bean,info,c,class,assert,that,has,read,method,for,property,bi,date,format,is,false,assert,that,has,write,method,for,property,bi,date,format,is,false,assert,that,has,indexed,read,method,for,property,bi,date,format,is,false,assert,that,has,indexed,write,method,for,property,bi,date,format,is,true,until,jdk17,extended,bean,info,ebi,new,extended,bean,info,bi,assert,that,has,read,method,for,property,bi,date,format,is,false,assert,that,has,write,method,for,property,bi,date,format,is,false,assert,that,has,indexed,read,method,for,property,bi,date,format,is,false,assert,that,has,indexed,write,method,for,property,bi,date,format,is,true,until,jdk17,assert,that,has,read,method,for,property,ebi,date,format,is,false,assert,that,has,write,method,for,property,ebi,date,format,is,false,assert,that,has,indexed,read,method,for,property,ebi,date,format,is,false,assert,that,has,indexed,write,method,for,property,ebi,date,format,is,true
ExtendedBeanInfoTests -> @Test 	public void reproSpr8522() throws IntrospectionException;1347201894;Corners the bug revealed by SPR-8522, in which an (apparently) indexed write method_without a corresponding indexed read method would fail to be processed correctly by_ExtendedBeanInfo. The local class C below represents the relevant methods from_Google's GsonBuilder class. Interestingly, the setDateFormat(int, int) method was_not actually intended to serve as an indexed write method_ it just appears that way.;@Test_	public void reproSpr8522() throws IntrospectionException {_		@SuppressWarnings("unused") class C {_			public Object setDateFormat(String pattern) { return new Object()_ }_			public Object setDateFormat(int style) { return new Object()_ }_			public Object setDateFormat(int dateStyle, int timeStyle) { return new Object()_ }_		}_		BeanInfo bi = Introspector.getBeanInfo(C.class)___		assertThat(hasReadMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasWriteMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasIndexedReadMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasIndexedWriteMethodForProperty(bi, "dateFormat"), is(trueUntilJdk17()))___		ExtendedBeanInfo ebi = new ExtendedBeanInfo(bi)___		assertThat(hasReadMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasWriteMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasIndexedReadMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasIndexedWriteMethodForProperty(bi, "dateFormat"), is(trueUntilJdk17()))___		assertThat(hasReadMethodForProperty(ebi, "dateFormat"), is(false))__		assertThat(hasWriteMethodForProperty(ebi, "dateFormat"), is(false))__		assertThat(hasIndexedReadMethodForProperty(ebi, "dateFormat"), is(false))__		assertThat(hasIndexedWriteMethodForProperty(ebi, "dateFormat"), is(true))__	};corners,the,bug,revealed,by,spr,8522,in,which,an,apparently,indexed,write,method,without,a,corresponding,indexed,read,method,would,fail,to,be,processed,correctly,by,extended,bean,info,the,local,class,c,below,represents,the,relevant,methods,from,google,s,gson,builder,class,interestingly,the,set,date,format,int,int,method,was,not,actually,intended,to,serve,as,an,indexed,write,method,it,just,appears,that,way;test,public,void,repro,spr8522,throws,introspection,exception,suppress,warnings,unused,class,c,public,object,set,date,format,string,pattern,return,new,object,public,object,set,date,format,int,style,return,new,object,public,object,set,date,format,int,date,style,int,time,style,return,new,object,bean,info,bi,introspector,get,bean,info,c,class,assert,that,has,read,method,for,property,bi,date,format,is,false,assert,that,has,write,method,for,property,bi,date,format,is,false,assert,that,has,indexed,read,method,for,property,bi,date,format,is,false,assert,that,has,indexed,write,method,for,property,bi,date,format,is,true,until,jdk17,extended,bean,info,ebi,new,extended,bean,info,bi,assert,that,has,read,method,for,property,bi,date,format,is,false,assert,that,has,write,method,for,property,bi,date,format,is,false,assert,that,has,indexed,read,method,for,property,bi,date,format,is,false,assert,that,has,indexed,write,method,for,property,bi,date,format,is,true,until,jdk17,assert,that,has,read,method,for,property,ebi,date,format,is,false,assert,that,has,write,method,for,property,ebi,date,format,is,false,assert,that,has,indexed,read,method,for,property,ebi,date,format,is,false,assert,that,has,indexed,write,method,for,property,ebi,date,format,is,true
ExtendedBeanInfoTests -> @Test 	public void reproSpr8522() throws IntrospectionException;1353842900;Corners the bug revealed by SPR-8522, in which an (apparently) indexed write method_without a corresponding indexed read method would fail to be processed correctly by_ExtendedBeanInfo. The local class C below represents the relevant methods from_Google's GsonBuilder class. Interestingly, the setDateFormat(int, int) method was_not actually intended to serve as an indexed write method_ it just appears that way.;@Test_	public void reproSpr8522() throws IntrospectionException {_		@SuppressWarnings("unused") class C {_			public Object setDateFormat(String pattern) { return new Object()_ }_			public Object setDateFormat(int style) { return new Object()_ }_			public Object setDateFormat(int dateStyle, int timeStyle) { return new Object()_ }_		}_		BeanInfo bi = Introspector.getBeanInfo(C.class)___		assertThat(hasReadMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasWriteMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasIndexedReadMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasIndexedWriteMethodForProperty(bi, "dateFormat"), is(trueUntilJdk17()))___		BeanInfo ebi = new ExtendedBeanInfo(bi)___		assertThat(hasReadMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasWriteMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasIndexedReadMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasIndexedWriteMethodForProperty(bi, "dateFormat"), is(trueUntilJdk17()))___		assertThat(hasReadMethodForProperty(ebi, "dateFormat"), is(false))__		assertThat(hasWriteMethodForProperty(ebi, "dateFormat"), is(true))__		assertThat(hasIndexedReadMethodForProperty(ebi, "dateFormat"), is(false))__		assertThat(hasIndexedWriteMethodForProperty(ebi, "dateFormat"), is(true))__	};corners,the,bug,revealed,by,spr,8522,in,which,an,apparently,indexed,write,method,without,a,corresponding,indexed,read,method,would,fail,to,be,processed,correctly,by,extended,bean,info,the,local,class,c,below,represents,the,relevant,methods,from,google,s,gson,builder,class,interestingly,the,set,date,format,int,int,method,was,not,actually,intended,to,serve,as,an,indexed,write,method,it,just,appears,that,way;test,public,void,repro,spr8522,throws,introspection,exception,suppress,warnings,unused,class,c,public,object,set,date,format,string,pattern,return,new,object,public,object,set,date,format,int,style,return,new,object,public,object,set,date,format,int,date,style,int,time,style,return,new,object,bean,info,bi,introspector,get,bean,info,c,class,assert,that,has,read,method,for,property,bi,date,format,is,false,assert,that,has,write,method,for,property,bi,date,format,is,false,assert,that,has,indexed,read,method,for,property,bi,date,format,is,false,assert,that,has,indexed,write,method,for,property,bi,date,format,is,true,until,jdk17,bean,info,ebi,new,extended,bean,info,bi,assert,that,has,read,method,for,property,bi,date,format,is,false,assert,that,has,write,method,for,property,bi,date,format,is,false,assert,that,has,indexed,read,method,for,property,bi,date,format,is,false,assert,that,has,indexed,write,method,for,property,bi,date,format,is,true,until,jdk17,assert,that,has,read,method,for,property,ebi,date,format,is,false,assert,that,has,write,method,for,property,ebi,date,format,is,true,assert,that,has,indexed,read,method,for,property,ebi,date,format,is,false,assert,that,has,indexed,write,method,for,property,ebi,date,format,is,true
ExtendedBeanInfoTests -> @Test 	public void reproSpr8522() throws IntrospectionException;1355966262;Corners the bug revealed by SPR-8522, in which an (apparently) indexed write method_without a corresponding indexed read method would fail to be processed correctly by_ExtendedBeanInfo. The local class C below represents the relevant methods from_Google's GsonBuilder class. Interestingly, the setDateFormat(int, int) method was_not actually intended to serve as an indexed write method_ it just appears that way.;@Test_	public void reproSpr8522() throws IntrospectionException {_		@SuppressWarnings("unused") class C {_			public Object setDateFormat(String pattern) { return new Object()_ }_			public Object setDateFormat(int style) { return new Object()_ }_			public Object setDateFormat(int dateStyle, int timeStyle) { return new Object()_ }_		}_		BeanInfo bi = Introspector.getBeanInfo(C.class)___		assertThat(hasReadMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasWriteMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasIndexedReadMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasIndexedWriteMethodForProperty(bi, "dateFormat"), is(trueUntilJdk17()))___		BeanInfo ebi = new ExtendedBeanInfo(bi)___		assertThat(hasReadMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasWriteMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasIndexedReadMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasIndexedWriteMethodForProperty(bi, "dateFormat"), is(trueUntilJdk17()))___		assertThat(hasReadMethodForProperty(ebi, "dateFormat"), is(false))__		assertThat(hasWriteMethodForProperty(ebi, "dateFormat"), is(true))__		assertThat(hasIndexedReadMethodForProperty(ebi, "dateFormat"), is(false))__		assertThat(hasIndexedWriteMethodForProperty(ebi, "dateFormat"), is(trueUntilJdk17()))__	};corners,the,bug,revealed,by,spr,8522,in,which,an,apparently,indexed,write,method,without,a,corresponding,indexed,read,method,would,fail,to,be,processed,correctly,by,extended,bean,info,the,local,class,c,below,represents,the,relevant,methods,from,google,s,gson,builder,class,interestingly,the,set,date,format,int,int,method,was,not,actually,intended,to,serve,as,an,indexed,write,method,it,just,appears,that,way;test,public,void,repro,spr8522,throws,introspection,exception,suppress,warnings,unused,class,c,public,object,set,date,format,string,pattern,return,new,object,public,object,set,date,format,int,style,return,new,object,public,object,set,date,format,int,date,style,int,time,style,return,new,object,bean,info,bi,introspector,get,bean,info,c,class,assert,that,has,read,method,for,property,bi,date,format,is,false,assert,that,has,write,method,for,property,bi,date,format,is,false,assert,that,has,indexed,read,method,for,property,bi,date,format,is,false,assert,that,has,indexed,write,method,for,property,bi,date,format,is,true,until,jdk17,bean,info,ebi,new,extended,bean,info,bi,assert,that,has,read,method,for,property,bi,date,format,is,false,assert,that,has,write,method,for,property,bi,date,format,is,false,assert,that,has,indexed,read,method,for,property,bi,date,format,is,false,assert,that,has,indexed,write,method,for,property,bi,date,format,is,true,until,jdk17,assert,that,has,read,method,for,property,ebi,date,format,is,false,assert,that,has,write,method,for,property,ebi,date,format,is,true,assert,that,has,indexed,read,method,for,property,ebi,date,format,is,false,assert,that,has,indexed,write,method,for,property,ebi,date,format,is,true,until,jdk17
ExtendedBeanInfoTests -> @Test 	public void reproSpr8522() throws IntrospectionException;1356735495;Corners the bug revealed by SPR-8522, in which an (apparently) indexed write method_without a corresponding indexed read method would fail to be processed correctly by_ExtendedBeanInfo. The local class C below represents the relevant methods from_Google's GsonBuilder class. Interestingly, the setDateFormat(int, int) method was_not actually intended to serve as an indexed write method_ it just appears that way.;@Test_	public void reproSpr8522() throws IntrospectionException {_		@SuppressWarnings("unused") class C {_			public Object setDateFormat(String pattern) { return new Object()_ }_			public Object setDateFormat(int style) { return new Object()_ }_			public Object setDateFormat(int dateStyle, int timeStyle) { return new Object()_ }_		}_		BeanInfo bi = Introspector.getBeanInfo(C.class)___		assertThat(hasReadMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasWriteMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasIndexedReadMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasIndexedWriteMethodForProperty(bi, "dateFormat"), is(trueUntilJdk17()))___		BeanInfo ebi = new ExtendedBeanInfo(bi)___		assertThat(hasReadMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasWriteMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasIndexedReadMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasIndexedWriteMethodForProperty(bi, "dateFormat"), is(trueUntilJdk17()))___		assertThat(hasReadMethodForProperty(ebi, "dateFormat"), is(false))__		assertThat(hasWriteMethodForProperty(ebi, "dateFormat"), is(true))__		assertThat(hasIndexedReadMethodForProperty(ebi, "dateFormat"), is(false))__		assertThat(hasIndexedWriteMethodForProperty(ebi, "dateFormat"), is(trueUntilJdk17()))__	};corners,the,bug,revealed,by,spr,8522,in,which,an,apparently,indexed,write,method,without,a,corresponding,indexed,read,method,would,fail,to,be,processed,correctly,by,extended,bean,info,the,local,class,c,below,represents,the,relevant,methods,from,google,s,gson,builder,class,interestingly,the,set,date,format,int,int,method,was,not,actually,intended,to,serve,as,an,indexed,write,method,it,just,appears,that,way;test,public,void,repro,spr8522,throws,introspection,exception,suppress,warnings,unused,class,c,public,object,set,date,format,string,pattern,return,new,object,public,object,set,date,format,int,style,return,new,object,public,object,set,date,format,int,date,style,int,time,style,return,new,object,bean,info,bi,introspector,get,bean,info,c,class,assert,that,has,read,method,for,property,bi,date,format,is,false,assert,that,has,write,method,for,property,bi,date,format,is,false,assert,that,has,indexed,read,method,for,property,bi,date,format,is,false,assert,that,has,indexed,write,method,for,property,bi,date,format,is,true,until,jdk17,bean,info,ebi,new,extended,bean,info,bi,assert,that,has,read,method,for,property,bi,date,format,is,false,assert,that,has,write,method,for,property,bi,date,format,is,false,assert,that,has,indexed,read,method,for,property,bi,date,format,is,false,assert,that,has,indexed,write,method,for,property,bi,date,format,is,true,until,jdk17,assert,that,has,read,method,for,property,ebi,date,format,is,false,assert,that,has,write,method,for,property,ebi,date,format,is,true,assert,that,has,indexed,read,method,for,property,ebi,date,format,is,false,assert,that,has,indexed,write,method,for,property,ebi,date,format,is,true,until,jdk17
ExtendedBeanInfoTests -> @Test 	public void reproSpr8522() throws IntrospectionException;1357119417;Corners the bug revealed by SPR-8522, in which an (apparently) indexed write method_without a corresponding indexed read method would fail to be processed correctly by_ExtendedBeanInfo. The local class C below represents the relevant methods from_Google's GsonBuilder class. Interestingly, the setDateFormat(int, int) method was_not actually intended to serve as an indexed write method_ it just appears that way.;@Test_	public void reproSpr8522() throws IntrospectionException {_		@SuppressWarnings("unused") class C {_			public Object setDateFormat(String pattern) { return new Object()_ }_			public Object setDateFormat(int style) { return new Object()_ }_			public Object setDateFormat(int dateStyle, int timeStyle) { return new Object()_ }_		}_		BeanInfo bi = Introspector.getBeanInfo(C.class)___		assertThat(hasReadMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasWriteMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasIndexedReadMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasIndexedWriteMethodForProperty(bi, "dateFormat"), is(trueUntilJdk17()))___		BeanInfo ebi = new ExtendedBeanInfo(bi)___		assertThat(hasReadMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasWriteMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasIndexedReadMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasIndexedWriteMethodForProperty(bi, "dateFormat"), is(trueUntilJdk17()))___		assertThat(hasReadMethodForProperty(ebi, "dateFormat"), is(false))__		assertThat(hasWriteMethodForProperty(ebi, "dateFormat"), is(true))__		assertThat(hasIndexedReadMethodForProperty(ebi, "dateFormat"), is(false))__		assertThat(hasIndexedWriteMethodForProperty(ebi, "dateFormat"), is(trueUntilJdk17()))__	};corners,the,bug,revealed,by,spr,8522,in,which,an,apparently,indexed,write,method,without,a,corresponding,indexed,read,method,would,fail,to,be,processed,correctly,by,extended,bean,info,the,local,class,c,below,represents,the,relevant,methods,from,google,s,gson,builder,class,interestingly,the,set,date,format,int,int,method,was,not,actually,intended,to,serve,as,an,indexed,write,method,it,just,appears,that,way;test,public,void,repro,spr8522,throws,introspection,exception,suppress,warnings,unused,class,c,public,object,set,date,format,string,pattern,return,new,object,public,object,set,date,format,int,style,return,new,object,public,object,set,date,format,int,date,style,int,time,style,return,new,object,bean,info,bi,introspector,get,bean,info,c,class,assert,that,has,read,method,for,property,bi,date,format,is,false,assert,that,has,write,method,for,property,bi,date,format,is,false,assert,that,has,indexed,read,method,for,property,bi,date,format,is,false,assert,that,has,indexed,write,method,for,property,bi,date,format,is,true,until,jdk17,bean,info,ebi,new,extended,bean,info,bi,assert,that,has,read,method,for,property,bi,date,format,is,false,assert,that,has,write,method,for,property,bi,date,format,is,false,assert,that,has,indexed,read,method,for,property,bi,date,format,is,false,assert,that,has,indexed,write,method,for,property,bi,date,format,is,true,until,jdk17,assert,that,has,read,method,for,property,ebi,date,format,is,false,assert,that,has,write,method,for,property,ebi,date,format,is,true,assert,that,has,indexed,read,method,for,property,ebi,date,format,is,false,assert,that,has,indexed,write,method,for,property,ebi,date,format,is,true,until,jdk17
ExtendedBeanInfoTests -> @Test 	public void reproSpr8522() throws IntrospectionException;1362408075;Corners the bug revealed by SPR-8522, in which an (apparently) indexed write method_without a corresponding indexed read method would fail to be processed correctly by_ExtendedBeanInfo. The local class C below represents the relevant methods from_Google's GsonBuilder class. Interestingly, the setDateFormat(int, int) method was_not actually intended to serve as an indexed write method_ it just appears that way.;@Test_	public void reproSpr8522() throws IntrospectionException {_		@SuppressWarnings("unused") class C {_			public Object setDateFormat(String pattern) { return new Object()_ }_			public Object setDateFormat(int style) { return new Object()_ }_			public Object setDateFormat(int dateStyle, int timeStyle) { return new Object()_ }_		}_		BeanInfo bi = Introspector.getBeanInfo(C.class)___		assertThat(hasReadMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasWriteMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasIndexedReadMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasIndexedWriteMethodForProperty(bi, "dateFormat"), is(trueUntilJdk17()))___		BeanInfo ebi = new ExtendedBeanInfo(bi)___		assertThat(hasReadMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasWriteMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasIndexedReadMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasIndexedWriteMethodForProperty(bi, "dateFormat"), is(trueUntilJdk17()))___		assertThat(hasReadMethodForProperty(ebi, "dateFormat"), is(false))__		assertThat(hasWriteMethodForProperty(ebi, "dateFormat"), is(true))__		assertThat(hasIndexedReadMethodForProperty(ebi, "dateFormat"), is(false))__		assertThat(hasIndexedWriteMethodForProperty(ebi, "dateFormat"), is(trueUntilJdk17()))__	};corners,the,bug,revealed,by,spr,8522,in,which,an,apparently,indexed,write,method,without,a,corresponding,indexed,read,method,would,fail,to,be,processed,correctly,by,extended,bean,info,the,local,class,c,below,represents,the,relevant,methods,from,google,s,gson,builder,class,interestingly,the,set,date,format,int,int,method,was,not,actually,intended,to,serve,as,an,indexed,write,method,it,just,appears,that,way;test,public,void,repro,spr8522,throws,introspection,exception,suppress,warnings,unused,class,c,public,object,set,date,format,string,pattern,return,new,object,public,object,set,date,format,int,style,return,new,object,public,object,set,date,format,int,date,style,int,time,style,return,new,object,bean,info,bi,introspector,get,bean,info,c,class,assert,that,has,read,method,for,property,bi,date,format,is,false,assert,that,has,write,method,for,property,bi,date,format,is,false,assert,that,has,indexed,read,method,for,property,bi,date,format,is,false,assert,that,has,indexed,write,method,for,property,bi,date,format,is,true,until,jdk17,bean,info,ebi,new,extended,bean,info,bi,assert,that,has,read,method,for,property,bi,date,format,is,false,assert,that,has,write,method,for,property,bi,date,format,is,false,assert,that,has,indexed,read,method,for,property,bi,date,format,is,false,assert,that,has,indexed,write,method,for,property,bi,date,format,is,true,until,jdk17,assert,that,has,read,method,for,property,ebi,date,format,is,false,assert,that,has,write,method,for,property,ebi,date,format,is,true,assert,that,has,indexed,read,method,for,property,ebi,date,format,is,false,assert,that,has,indexed,write,method,for,property,ebi,date,format,is,true,until,jdk17
ExtendedBeanInfoTests -> @Test 	public void reproSpr8522() throws IntrospectionException;1368482696;Corners the bug revealed by SPR-8522, in which an (apparently) indexed write method_without a corresponding indexed read method would fail to be processed correctly by_ExtendedBeanInfo. The local class C below represents the relevant methods from_Google's GsonBuilder class. Interestingly, the setDateFormat(int, int) method was_not actually intended to serve as an indexed write method_ it just appears that way.;@Test_	public void reproSpr8522() throws IntrospectionException {_		@SuppressWarnings("unused") class C {_			public Object setDateFormat(String pattern) { return new Object()_ }_			public Object setDateFormat(int style) { return new Object()_ }_			public Object setDateFormat(int dateStyle, int timeStyle) { return new Object()_ }_		}_		BeanInfo bi = Introspector.getBeanInfo(C.class)___		assertThat(hasReadMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasWriteMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasIndexedReadMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasIndexedWriteMethodForProperty(bi, "dateFormat"), is(trueUntilJdk17()))___		BeanInfo ebi = new ExtendedBeanInfo(bi)___		assertThat(hasReadMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasWriteMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasIndexedReadMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasIndexedWriteMethodForProperty(bi, "dateFormat"), is(trueUntilJdk17()))___		assertThat(hasReadMethodForProperty(ebi, "dateFormat"), is(false))__		assertThat(hasWriteMethodForProperty(ebi, "dateFormat"), is(true))__		assertThat(hasIndexedReadMethodForProperty(ebi, "dateFormat"), is(false))__		assertThat(hasIndexedWriteMethodForProperty(ebi, "dateFormat"), is(trueUntilJdk17()))__	};corners,the,bug,revealed,by,spr,8522,in,which,an,apparently,indexed,write,method,without,a,corresponding,indexed,read,method,would,fail,to,be,processed,correctly,by,extended,bean,info,the,local,class,c,below,represents,the,relevant,methods,from,google,s,gson,builder,class,interestingly,the,set,date,format,int,int,method,was,not,actually,intended,to,serve,as,an,indexed,write,method,it,just,appears,that,way;test,public,void,repro,spr8522,throws,introspection,exception,suppress,warnings,unused,class,c,public,object,set,date,format,string,pattern,return,new,object,public,object,set,date,format,int,style,return,new,object,public,object,set,date,format,int,date,style,int,time,style,return,new,object,bean,info,bi,introspector,get,bean,info,c,class,assert,that,has,read,method,for,property,bi,date,format,is,false,assert,that,has,write,method,for,property,bi,date,format,is,false,assert,that,has,indexed,read,method,for,property,bi,date,format,is,false,assert,that,has,indexed,write,method,for,property,bi,date,format,is,true,until,jdk17,bean,info,ebi,new,extended,bean,info,bi,assert,that,has,read,method,for,property,bi,date,format,is,false,assert,that,has,write,method,for,property,bi,date,format,is,false,assert,that,has,indexed,read,method,for,property,bi,date,format,is,false,assert,that,has,indexed,write,method,for,property,bi,date,format,is,true,until,jdk17,assert,that,has,read,method,for,property,ebi,date,format,is,false,assert,that,has,write,method,for,property,ebi,date,format,is,true,assert,that,has,indexed,read,method,for,property,ebi,date,format,is,false,assert,that,has,indexed,write,method,for,property,ebi,date,format,is,true,until,jdk17
ExtendedBeanInfoTests -> @Test 	public void reproSpr8522() throws IntrospectionException;1375195689;Corners the bug revealed by SPR-8522, in which an (apparently) indexed write method_without a corresponding indexed read method would fail to be processed correctly by_ExtendedBeanInfo. The local class C below represents the relevant methods from_Google's GsonBuilder class. Interestingly, the setDateFormat(int, int) method was_not actually intended to serve as an indexed write method_ it just appears that way.;@Test_	public void reproSpr8522() throws IntrospectionException {_		@SuppressWarnings("unused") class C {_			public Object setDateFormat(String pattern) { return new Object()_ }_			public Object setDateFormat(int style) { return new Object()_ }_			public Object setDateFormat(int dateStyle, int timeStyle) { return new Object()_ }_		}_		BeanInfo bi = Introspector.getBeanInfo(C.class)___		assertThat(hasReadMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasWriteMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasIndexedReadMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasIndexedWriteMethodForProperty(bi, "dateFormat"), is(trueUntilJdk17()))___		BeanInfo ebi = new ExtendedBeanInfo(bi)___		assertThat(hasReadMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasWriteMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasIndexedReadMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasIndexedWriteMethodForProperty(bi, "dateFormat"), is(trueUntilJdk17()))___		assertThat(hasReadMethodForProperty(ebi, "dateFormat"), is(false))__		assertThat(hasWriteMethodForProperty(ebi, "dateFormat"), is(true))__		assertThat(hasIndexedReadMethodForProperty(ebi, "dateFormat"), is(false))__		assertThat(hasIndexedWriteMethodForProperty(ebi, "dateFormat"), is(trueUntilJdk17()))__	};corners,the,bug,revealed,by,spr,8522,in,which,an,apparently,indexed,write,method,without,a,corresponding,indexed,read,method,would,fail,to,be,processed,correctly,by,extended,bean,info,the,local,class,c,below,represents,the,relevant,methods,from,google,s,gson,builder,class,interestingly,the,set,date,format,int,int,method,was,not,actually,intended,to,serve,as,an,indexed,write,method,it,just,appears,that,way;test,public,void,repro,spr8522,throws,introspection,exception,suppress,warnings,unused,class,c,public,object,set,date,format,string,pattern,return,new,object,public,object,set,date,format,int,style,return,new,object,public,object,set,date,format,int,date,style,int,time,style,return,new,object,bean,info,bi,introspector,get,bean,info,c,class,assert,that,has,read,method,for,property,bi,date,format,is,false,assert,that,has,write,method,for,property,bi,date,format,is,false,assert,that,has,indexed,read,method,for,property,bi,date,format,is,false,assert,that,has,indexed,write,method,for,property,bi,date,format,is,true,until,jdk17,bean,info,ebi,new,extended,bean,info,bi,assert,that,has,read,method,for,property,bi,date,format,is,false,assert,that,has,write,method,for,property,bi,date,format,is,false,assert,that,has,indexed,read,method,for,property,bi,date,format,is,false,assert,that,has,indexed,write,method,for,property,bi,date,format,is,true,until,jdk17,assert,that,has,read,method,for,property,ebi,date,format,is,false,assert,that,has,write,method,for,property,ebi,date,format,is,true,assert,that,has,indexed,read,method,for,property,ebi,date,format,is,false,assert,that,has,indexed,write,method,for,property,ebi,date,format,is,true,until,jdk17
ExtendedBeanInfoTests -> @Test 	public void reproSpr8522() throws IntrospectionException;1386711257;Corners the bug revealed by SPR-8522, in which an (apparently) indexed write method_without a corresponding indexed read method would fail to be processed correctly by_ExtendedBeanInfo. The local class C below represents the relevant methods from_Google's GsonBuilder class. Interestingly, the setDateFormat(int, int) method was_not actually intended to serve as an indexed write method_ it just appears that way.;@Test_	public void reproSpr8522() throws IntrospectionException {_		@SuppressWarnings("unused") class C {_			public Object setDateFormat(String pattern) { return new Object()_ }_			public Object setDateFormat(int style) { return new Object()_ }_			public Object setDateFormat(int dateStyle, int timeStyle) { return new Object()_ }_		}_		BeanInfo bi = Introspector.getBeanInfo(C.class)___		assertThat(hasReadMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasWriteMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasIndexedReadMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasIndexedWriteMethodForProperty(bi, "dateFormat"), is(trueUntilJdk17()))___		BeanInfo ebi = new ExtendedBeanInfo(bi)___		assertThat(hasReadMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasWriteMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasIndexedReadMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasIndexedWriteMethodForProperty(bi, "dateFormat"), is(trueUntilJdk17()))___		assertThat(hasReadMethodForProperty(ebi, "dateFormat"), is(false))__		assertThat(hasWriteMethodForProperty(ebi, "dateFormat"), is(true))__		assertThat(hasIndexedReadMethodForProperty(ebi, "dateFormat"), is(false))__		assertThat(hasIndexedWriteMethodForProperty(ebi, "dateFormat"), is(trueUntilJdk17()))__	};corners,the,bug,revealed,by,spr,8522,in,which,an,apparently,indexed,write,method,without,a,corresponding,indexed,read,method,would,fail,to,be,processed,correctly,by,extended,bean,info,the,local,class,c,below,represents,the,relevant,methods,from,google,s,gson,builder,class,interestingly,the,set,date,format,int,int,method,was,not,actually,intended,to,serve,as,an,indexed,write,method,it,just,appears,that,way;test,public,void,repro,spr8522,throws,introspection,exception,suppress,warnings,unused,class,c,public,object,set,date,format,string,pattern,return,new,object,public,object,set,date,format,int,style,return,new,object,public,object,set,date,format,int,date,style,int,time,style,return,new,object,bean,info,bi,introspector,get,bean,info,c,class,assert,that,has,read,method,for,property,bi,date,format,is,false,assert,that,has,write,method,for,property,bi,date,format,is,false,assert,that,has,indexed,read,method,for,property,bi,date,format,is,false,assert,that,has,indexed,write,method,for,property,bi,date,format,is,true,until,jdk17,bean,info,ebi,new,extended,bean,info,bi,assert,that,has,read,method,for,property,bi,date,format,is,false,assert,that,has,write,method,for,property,bi,date,format,is,false,assert,that,has,indexed,read,method,for,property,bi,date,format,is,false,assert,that,has,indexed,write,method,for,property,bi,date,format,is,true,until,jdk17,assert,that,has,read,method,for,property,ebi,date,format,is,false,assert,that,has,write,method,for,property,ebi,date,format,is,true,assert,that,has,indexed,read,method,for,property,ebi,date,format,is,false,assert,that,has,indexed,write,method,for,property,ebi,date,format,is,true,until,jdk17
ExtendedBeanInfoTests -> @Test 	public void reproSpr8522() throws IntrospectionException;1410903610;Corners the bug revealed by SPR-8522, in which an (apparently) indexed write method_without a corresponding indexed read method would fail to be processed correctly by_ExtendedBeanInfo. The local class C below represents the relevant methods from_Google's GsonBuilder class. Interestingly, the setDateFormat(int, int) method was_not actually intended to serve as an indexed write method_ it just appears that way.;@Test_	public void reproSpr8522() throws IntrospectionException {_		@SuppressWarnings("unused") class C {_			public Object setDateFormat(String pattern) { return new Object()_ }_			public Object setDateFormat(int style) { return new Object()_ }_			public Object setDateFormat(int dateStyle, int timeStyle) { return new Object()_ }_		}_		BeanInfo bi = Introspector.getBeanInfo(C.class)___		assertThat(hasReadMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasWriteMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasIndexedReadMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasIndexedWriteMethodForProperty(bi, "dateFormat"), is(trueUntilJdk17()))___		BeanInfo ebi = new ExtendedBeanInfo(bi)___		assertThat(hasReadMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasWriteMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasIndexedReadMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasIndexedWriteMethodForProperty(bi, "dateFormat"), is(trueUntilJdk17()))___		assertThat(hasReadMethodForProperty(ebi, "dateFormat"), is(false))__		assertThat(hasWriteMethodForProperty(ebi, "dateFormat"), is(true))__		assertThat(hasIndexedReadMethodForProperty(ebi, "dateFormat"), is(false))__		assertThat(hasIndexedWriteMethodForProperty(ebi, "dateFormat"), is(trueUntilJdk17()))__	};corners,the,bug,revealed,by,spr,8522,in,which,an,apparently,indexed,write,method,without,a,corresponding,indexed,read,method,would,fail,to,be,processed,correctly,by,extended,bean,info,the,local,class,c,below,represents,the,relevant,methods,from,google,s,gson,builder,class,interestingly,the,set,date,format,int,int,method,was,not,actually,intended,to,serve,as,an,indexed,write,method,it,just,appears,that,way;test,public,void,repro,spr8522,throws,introspection,exception,suppress,warnings,unused,class,c,public,object,set,date,format,string,pattern,return,new,object,public,object,set,date,format,int,style,return,new,object,public,object,set,date,format,int,date,style,int,time,style,return,new,object,bean,info,bi,introspector,get,bean,info,c,class,assert,that,has,read,method,for,property,bi,date,format,is,false,assert,that,has,write,method,for,property,bi,date,format,is,false,assert,that,has,indexed,read,method,for,property,bi,date,format,is,false,assert,that,has,indexed,write,method,for,property,bi,date,format,is,true,until,jdk17,bean,info,ebi,new,extended,bean,info,bi,assert,that,has,read,method,for,property,bi,date,format,is,false,assert,that,has,write,method,for,property,bi,date,format,is,false,assert,that,has,indexed,read,method,for,property,bi,date,format,is,false,assert,that,has,indexed,write,method,for,property,bi,date,format,is,true,until,jdk17,assert,that,has,read,method,for,property,ebi,date,format,is,false,assert,that,has,write,method,for,property,ebi,date,format,is,true,assert,that,has,indexed,read,method,for,property,ebi,date,format,is,false,assert,that,has,indexed,write,method,for,property,ebi,date,format,is,true,until,jdk17
ExtendedBeanInfoTests -> @Test 	public void reproSpr8522() throws IntrospectionException;1417048908;Corners the bug revealed by SPR-8522, in which an (apparently) indexed write method_without a corresponding indexed read method would fail to be processed correctly by_ExtendedBeanInfo. The local class C below represents the relevant methods from_Google's GsonBuilder class. Interestingly, the setDateFormat(int, int) method was_not actually intended to serve as an indexed write method_ it just appears that way.;@Test_	public void reproSpr8522() throws IntrospectionException {_		@SuppressWarnings("unused") class C {_			public Object setDateFormat(String pattern) { return new Object()_ }_			public Object setDateFormat(int style) { return new Object()_ }_			public Object setDateFormat(int dateStyle, int timeStyle) { return new Object()_ }_		}_		BeanInfo bi = Introspector.getBeanInfo(C.class)___		assertThat(hasReadMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasWriteMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasIndexedReadMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasIndexedWriteMethodForProperty(bi, "dateFormat"), is(trueUntilJdk17()))___		BeanInfo ebi = new ExtendedBeanInfo(bi)___		assertThat(hasReadMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasWriteMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasIndexedReadMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasIndexedWriteMethodForProperty(bi, "dateFormat"), is(trueUntilJdk17()))___		assertThat(hasReadMethodForProperty(ebi, "dateFormat"), is(false))__		assertThat(hasWriteMethodForProperty(ebi, "dateFormat"), is(true))__		assertThat(hasIndexedReadMethodForProperty(ebi, "dateFormat"), is(false))__		assertThat(hasIndexedWriteMethodForProperty(ebi, "dateFormat"), is(trueUntilJdk17()))__	};corners,the,bug,revealed,by,spr,8522,in,which,an,apparently,indexed,write,method,without,a,corresponding,indexed,read,method,would,fail,to,be,processed,correctly,by,extended,bean,info,the,local,class,c,below,represents,the,relevant,methods,from,google,s,gson,builder,class,interestingly,the,set,date,format,int,int,method,was,not,actually,intended,to,serve,as,an,indexed,write,method,it,just,appears,that,way;test,public,void,repro,spr8522,throws,introspection,exception,suppress,warnings,unused,class,c,public,object,set,date,format,string,pattern,return,new,object,public,object,set,date,format,int,style,return,new,object,public,object,set,date,format,int,date,style,int,time,style,return,new,object,bean,info,bi,introspector,get,bean,info,c,class,assert,that,has,read,method,for,property,bi,date,format,is,false,assert,that,has,write,method,for,property,bi,date,format,is,false,assert,that,has,indexed,read,method,for,property,bi,date,format,is,false,assert,that,has,indexed,write,method,for,property,bi,date,format,is,true,until,jdk17,bean,info,ebi,new,extended,bean,info,bi,assert,that,has,read,method,for,property,bi,date,format,is,false,assert,that,has,write,method,for,property,bi,date,format,is,false,assert,that,has,indexed,read,method,for,property,bi,date,format,is,false,assert,that,has,indexed,write,method,for,property,bi,date,format,is,true,until,jdk17,assert,that,has,read,method,for,property,ebi,date,format,is,false,assert,that,has,write,method,for,property,ebi,date,format,is,true,assert,that,has,indexed,read,method,for,property,ebi,date,format,is,false,assert,that,has,indexed,write,method,for,property,ebi,date,format,is,true,until,jdk17
ExtendedBeanInfoTests -> @Test 	public void reproSpr8522() throws IntrospectionException;1420208329;Corners the bug revealed by SPR-8522, in which an (apparently) indexed write method_without a corresponding indexed read method would fail to be processed correctly by_ExtendedBeanInfo. The local class C below represents the relevant methods from_Google's GsonBuilder class. Interestingly, the setDateFormat(int, int) method was_not actually intended to serve as an indexed write method_ it just appears that way.;@Test_	public void reproSpr8522() throws IntrospectionException {_		@SuppressWarnings("unused") class C {_			public Object setDateFormat(String pattern) { return new Object()_ }_			public Object setDateFormat(int style) { return new Object()_ }_			public Object setDateFormat(int dateStyle, int timeStyle) { return new Object()_ }_		}_		BeanInfo bi = Introspector.getBeanInfo(C.class)___		assertThat(hasReadMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasWriteMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasIndexedReadMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasIndexedWriteMethodForProperty(bi, "dateFormat"), is(trueUntilJdk17()))___		BeanInfo ebi = new ExtendedBeanInfo(bi)___		assertThat(hasReadMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasWriteMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasIndexedReadMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasIndexedWriteMethodForProperty(bi, "dateFormat"), is(trueUntilJdk17()))___		assertThat(hasReadMethodForProperty(ebi, "dateFormat"), is(false))__		assertThat(hasWriteMethodForProperty(ebi, "dateFormat"), is(true))__		assertThat(hasIndexedReadMethodForProperty(ebi, "dateFormat"), is(false))__		assertThat(hasIndexedWriteMethodForProperty(ebi, "dateFormat"), is(trueUntilJdk17()))__	};corners,the,bug,revealed,by,spr,8522,in,which,an,apparently,indexed,write,method,without,a,corresponding,indexed,read,method,would,fail,to,be,processed,correctly,by,extended,bean,info,the,local,class,c,below,represents,the,relevant,methods,from,google,s,gson,builder,class,interestingly,the,set,date,format,int,int,method,was,not,actually,intended,to,serve,as,an,indexed,write,method,it,just,appears,that,way;test,public,void,repro,spr8522,throws,introspection,exception,suppress,warnings,unused,class,c,public,object,set,date,format,string,pattern,return,new,object,public,object,set,date,format,int,style,return,new,object,public,object,set,date,format,int,date,style,int,time,style,return,new,object,bean,info,bi,introspector,get,bean,info,c,class,assert,that,has,read,method,for,property,bi,date,format,is,false,assert,that,has,write,method,for,property,bi,date,format,is,false,assert,that,has,indexed,read,method,for,property,bi,date,format,is,false,assert,that,has,indexed,write,method,for,property,bi,date,format,is,true,until,jdk17,bean,info,ebi,new,extended,bean,info,bi,assert,that,has,read,method,for,property,bi,date,format,is,false,assert,that,has,write,method,for,property,bi,date,format,is,false,assert,that,has,indexed,read,method,for,property,bi,date,format,is,false,assert,that,has,indexed,write,method,for,property,bi,date,format,is,true,until,jdk17,assert,that,has,read,method,for,property,ebi,date,format,is,false,assert,that,has,write,method,for,property,ebi,date,format,is,true,assert,that,has,indexed,read,method,for,property,ebi,date,format,is,false,assert,that,has,indexed,write,method,for,property,ebi,date,format,is,true,until,jdk17
ExtendedBeanInfoTests -> @Test 	public void reproSpr8522() throws IntrospectionException;1420210924;Corners the bug revealed by SPR-8522, in which an (apparently) indexed write method_without a corresponding indexed read method would fail to be processed correctly by_ExtendedBeanInfo. The local class C below represents the relevant methods from_Google's GsonBuilder class. Interestingly, the setDateFormat(int, int) method was_not actually intended to serve as an indexed write method_ it just appears that way.;@Test_	public void reproSpr8522() throws IntrospectionException {_		@SuppressWarnings("unused") class C {_			public Object setDateFormat(String pattern) { return new Object()_ }_			public Object setDateFormat(int style) { return new Object()_ }_			public Object setDateFormat(int dateStyle, int timeStyle) { return new Object()_ }_		}_		BeanInfo bi = Introspector.getBeanInfo(C.class)___		assertThat(hasReadMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasWriteMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasIndexedReadMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasIndexedWriteMethodForProperty(bi, "dateFormat"), is(trueUntilJdk17()))___		BeanInfo ebi = new ExtendedBeanInfo(bi)___		assertThat(hasReadMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasWriteMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasIndexedReadMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasIndexedWriteMethodForProperty(bi, "dateFormat"), is(trueUntilJdk17()))___		assertThat(hasReadMethodForProperty(ebi, "dateFormat"), is(false))__		assertThat(hasWriteMethodForProperty(ebi, "dateFormat"), is(true))__		assertThat(hasIndexedReadMethodForProperty(ebi, "dateFormat"), is(false))__		assertThat(hasIndexedWriteMethodForProperty(ebi, "dateFormat"), is(trueUntilJdk17()))__	};corners,the,bug,revealed,by,spr,8522,in,which,an,apparently,indexed,write,method,without,a,corresponding,indexed,read,method,would,fail,to,be,processed,correctly,by,extended,bean,info,the,local,class,c,below,represents,the,relevant,methods,from,google,s,gson,builder,class,interestingly,the,set,date,format,int,int,method,was,not,actually,intended,to,serve,as,an,indexed,write,method,it,just,appears,that,way;test,public,void,repro,spr8522,throws,introspection,exception,suppress,warnings,unused,class,c,public,object,set,date,format,string,pattern,return,new,object,public,object,set,date,format,int,style,return,new,object,public,object,set,date,format,int,date,style,int,time,style,return,new,object,bean,info,bi,introspector,get,bean,info,c,class,assert,that,has,read,method,for,property,bi,date,format,is,false,assert,that,has,write,method,for,property,bi,date,format,is,false,assert,that,has,indexed,read,method,for,property,bi,date,format,is,false,assert,that,has,indexed,write,method,for,property,bi,date,format,is,true,until,jdk17,bean,info,ebi,new,extended,bean,info,bi,assert,that,has,read,method,for,property,bi,date,format,is,false,assert,that,has,write,method,for,property,bi,date,format,is,false,assert,that,has,indexed,read,method,for,property,bi,date,format,is,false,assert,that,has,indexed,write,method,for,property,bi,date,format,is,true,until,jdk17,assert,that,has,read,method,for,property,ebi,date,format,is,false,assert,that,has,write,method,for,property,ebi,date,format,is,true,assert,that,has,indexed,read,method,for,property,ebi,date,format,is,false,assert,that,has,indexed,write,method,for,property,ebi,date,format,is,true,until,jdk17
ExtendedBeanInfoTests -> @Test 	public void reproSpr8522() throws IntrospectionException;1439397756;Corners the bug revealed by SPR-8522, in which an (apparently) indexed write method_without a corresponding indexed read method would fail to be processed correctly by_ExtendedBeanInfo. The local class C below represents the relevant methods from_Google's GsonBuilder class. Interestingly, the setDateFormat(int, int) method was_not actually intended to serve as an indexed write method_ it just appears that way.;@Test_	public void reproSpr8522() throws IntrospectionException {_		@SuppressWarnings("unused") class C {_			public Object setDateFormat(String pattern) { return new Object()_ }_			public Object setDateFormat(int style) { return new Object()_ }_			public Object setDateFormat(int dateStyle, int timeStyle) { return new Object()_ }_		}_		BeanInfo bi = Introspector.getBeanInfo(C.class)___		assertThat(hasReadMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasWriteMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasIndexedReadMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasIndexedWriteMethodForProperty(bi, "dateFormat"), is(false))___		BeanInfo ebi = new ExtendedBeanInfo(bi)___		assertThat(hasReadMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasWriteMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasIndexedReadMethodForProperty(bi, "dateFormat"), is(false))__		assertThat(hasIndexedWriteMethodForProperty(bi, "dateFormat"), is(false))___		assertThat(hasReadMethodForProperty(ebi, "dateFormat"), is(false))__		assertThat(hasWriteMethodForProperty(ebi, "dateFormat"), is(true))__		assertThat(hasIndexedReadMethodForProperty(ebi, "dateFormat"), is(false))__		assertThat(hasIndexedWriteMethodForProperty(ebi, "dateFormat"), is(false))__	};corners,the,bug,revealed,by,spr,8522,in,which,an,apparently,indexed,write,method,without,a,corresponding,indexed,read,method,would,fail,to,be,processed,correctly,by,extended,bean,info,the,local,class,c,below,represents,the,relevant,methods,from,google,s,gson,builder,class,interestingly,the,set,date,format,int,int,method,was,not,actually,intended,to,serve,as,an,indexed,write,method,it,just,appears,that,way;test,public,void,repro,spr8522,throws,introspection,exception,suppress,warnings,unused,class,c,public,object,set,date,format,string,pattern,return,new,object,public,object,set,date,format,int,style,return,new,object,public,object,set,date,format,int,date,style,int,time,style,return,new,object,bean,info,bi,introspector,get,bean,info,c,class,assert,that,has,read,method,for,property,bi,date,format,is,false,assert,that,has,write,method,for,property,bi,date,format,is,false,assert,that,has,indexed,read,method,for,property,bi,date,format,is,false,assert,that,has,indexed,write,method,for,property,bi,date,format,is,false,bean,info,ebi,new,extended,bean,info,bi,assert,that,has,read,method,for,property,bi,date,format,is,false,assert,that,has,write,method,for,property,bi,date,format,is,false,assert,that,has,indexed,read,method,for,property,bi,date,format,is,false,assert,that,has,indexed,write,method,for,property,bi,date,format,is,false,assert,that,has,read,method,for,property,ebi,date,format,is,false,assert,that,has,write,method,for,property,ebi,date,format,is,true,assert,that,has,indexed,read,method,for,property,ebi,date,format,is,false,assert,that,has,indexed,write,method,for,property,ebi,date,format,is,false
ExtendedBeanInfoTests -> @Test 	public void readMethodReturnsSubtypeOfWriteMethodParameter() throws IntrospectionException;1328020251;{@link ExtendedBeanInfo} should behave exactly like {@link BeanInfo}_in strange edge cases.;@Test_	public void readMethodReturnsSubtypeOfWriteMethodParameter() throws IntrospectionException {_		@SuppressWarnings("unused") class C {_			public Integer getFoo() { return null_ }_			public void setFoo(Number foo) { }_		}__		BeanInfo bi = Introspector.getBeanInfo(C.class)__		ExtendedBeanInfo ebi = new ExtendedBeanInfo(bi)___		assertThat(hasReadMethodForProperty(bi, "foo"), is(true))__		assertThat(hasWriteMethodForProperty(bi, "foo"), is(false))___		assertThat(hasReadMethodForProperty(ebi, "foo"), is(true))__		assertThat(hasWriteMethodForProperty(ebi, "foo"), is(false))__	};link,extended,bean,info,should,behave,exactly,like,link,bean,info,in,strange,edge,cases;test,public,void,read,method,returns,subtype,of,write,method,parameter,throws,introspection,exception,suppress,warnings,unused,class,c,public,integer,get,foo,return,null,public,void,set,foo,number,foo,bean,info,bi,introspector,get,bean,info,c,class,extended,bean,info,ebi,new,extended,bean,info,bi,assert,that,has,read,method,for,property,bi,foo,is,true,assert,that,has,write,method,for,property,bi,foo,is,false,assert,that,has,read,method,for,property,ebi,foo,is,true,assert,that,has,write,method,for,property,ebi,foo,is,false
ExtendedBeanInfoTests -> @Test 	public void readMethodReturnsSubtypeOfWriteMethodParameter() throws IntrospectionException;1329142650;{@link ExtendedBeanInfo} should behave exactly like {@link BeanInfo}_in strange edge cases.;@Test_	public void readMethodReturnsSubtypeOfWriteMethodParameter() throws IntrospectionException {_		@SuppressWarnings("unused") class C {_			public Integer getFoo() { return null_ }_			public void setFoo(Number foo) { }_		}__		BeanInfo bi = Introspector.getBeanInfo(C.class)__		ExtendedBeanInfo ebi = new ExtendedBeanInfo(bi)___		assertThat(hasReadMethodForProperty(bi, "foo"), is(true))__		assertThat(hasWriteMethodForProperty(bi, "foo"), is(false))___		assertThat(hasReadMethodForProperty(ebi, "foo"), is(true))__		assertThat(hasWriteMethodForProperty(ebi, "foo"), is(false))__	};link,extended,bean,info,should,behave,exactly,like,link,bean,info,in,strange,edge,cases;test,public,void,read,method,returns,subtype,of,write,method,parameter,throws,introspection,exception,suppress,warnings,unused,class,c,public,integer,get,foo,return,null,public,void,set,foo,number,foo,bean,info,bi,introspector,get,bean,info,c,class,extended,bean,info,ebi,new,extended,bean,info,bi,assert,that,has,read,method,for,property,bi,foo,is,true,assert,that,has,write,method,for,property,bi,foo,is,false,assert,that,has,read,method,for,property,ebi,foo,is,true,assert,that,has,write,method,for,property,ebi,foo,is,false
ExtendedBeanInfoTests -> @Test 	public void readMethodReturnsSubtypeOfWriteMethodParameter() throws IntrospectionException;1347201894;{@link ExtendedBeanInfo} should behave exactly like {@link BeanInfo}_in strange edge cases.;@Test_	public void readMethodReturnsSubtypeOfWriteMethodParameter() throws IntrospectionException {_		@SuppressWarnings("unused") class C {_			public Integer getFoo() { return null_ }_			public void setFoo(Number foo) { }_		}__		BeanInfo bi = Introspector.getBeanInfo(C.class)__		ExtendedBeanInfo ebi = new ExtendedBeanInfo(bi)___		assertThat(hasReadMethodForProperty(bi, "foo"), is(true))__		assertThat(hasWriteMethodForProperty(bi, "foo"), is(false))___		assertThat(hasReadMethodForProperty(ebi, "foo"), is(true))__		assertThat(hasWriteMethodForProperty(ebi, "foo"), is(false))__	};link,extended,bean,info,should,behave,exactly,like,link,bean,info,in,strange,edge,cases;test,public,void,read,method,returns,subtype,of,write,method,parameter,throws,introspection,exception,suppress,warnings,unused,class,c,public,integer,get,foo,return,null,public,void,set,foo,number,foo,bean,info,bi,introspector,get,bean,info,c,class,extended,bean,info,ebi,new,extended,bean,info,bi,assert,that,has,read,method,for,property,bi,foo,is,true,assert,that,has,write,method,for,property,bi,foo,is,false,assert,that,has,read,method,for,property,ebi,foo,is,true,assert,that,has,write,method,for,property,ebi,foo,is,false
ExtendedBeanInfoTests -> @Test 	public void readMethodReturnsSubtypeOfWriteMethodParameter() throws IntrospectionException;1353842900;{@link ExtendedBeanInfo} should behave exactly like {@link BeanInfo}_in strange edge cases.;@Test_	public void readMethodReturnsSubtypeOfWriteMethodParameter() throws IntrospectionException {_		@SuppressWarnings("unused") class C {_			public Integer getFoo() { return null_ }_			public void setFoo(Number foo) { }_		}__		BeanInfo bi = Introspector.getBeanInfo(C.class)__		BeanInfo ebi = new ExtendedBeanInfo(bi)___		assertThat(hasReadMethodForProperty(bi, "foo"), is(true))__		assertThat(hasWriteMethodForProperty(bi, "foo"), is(false))___		assertThat(hasReadMethodForProperty(ebi, "foo"), is(true))__		assertThat(hasWriteMethodForProperty(ebi, "foo"), is(false))__	};link,extended,bean,info,should,behave,exactly,like,link,bean,info,in,strange,edge,cases;test,public,void,read,method,returns,subtype,of,write,method,parameter,throws,introspection,exception,suppress,warnings,unused,class,c,public,integer,get,foo,return,null,public,void,set,foo,number,foo,bean,info,bi,introspector,get,bean,info,c,class,bean,info,ebi,new,extended,bean,info,bi,assert,that,has,read,method,for,property,bi,foo,is,true,assert,that,has,write,method,for,property,bi,foo,is,false,assert,that,has,read,method,for,property,ebi,foo,is,true,assert,that,has,write,method,for,property,ebi,foo,is,false
ExtendedBeanInfoTests -> @Test 	public void readMethodReturnsSubtypeOfWriteMethodParameter() throws IntrospectionException;1355966262;{@link ExtendedBeanInfo} should behave exactly like {@link BeanInfo}_in strange edge cases.;@Test_	public void readMethodReturnsSubtypeOfWriteMethodParameter() throws IntrospectionException {_		@SuppressWarnings("unused") class C {_			public Integer getFoo() { return null_ }_			public void setFoo(Number foo) { }_		}__		BeanInfo bi = Introspector.getBeanInfo(C.class)__		BeanInfo ebi = new ExtendedBeanInfo(bi)___		assertThat(hasReadMethodForProperty(bi, "foo"), is(true))__		assertThat(hasWriteMethodForProperty(bi, "foo"), is(false))___		assertThat(hasReadMethodForProperty(ebi, "foo"), is(true))__		assertThat(hasWriteMethodForProperty(ebi, "foo"), is(false))__	};link,extended,bean,info,should,behave,exactly,like,link,bean,info,in,strange,edge,cases;test,public,void,read,method,returns,subtype,of,write,method,parameter,throws,introspection,exception,suppress,warnings,unused,class,c,public,integer,get,foo,return,null,public,void,set,foo,number,foo,bean,info,bi,introspector,get,bean,info,c,class,bean,info,ebi,new,extended,bean,info,bi,assert,that,has,read,method,for,property,bi,foo,is,true,assert,that,has,write,method,for,property,bi,foo,is,false,assert,that,has,read,method,for,property,ebi,foo,is,true,assert,that,has,write,method,for,property,ebi,foo,is,false
ExtendedBeanInfoTests -> @Test 	public void readMethodReturnsSubtypeOfWriteMethodParameter() throws IntrospectionException;1356735495;{@link ExtendedBeanInfo} should behave exactly like {@link BeanInfo}_in strange edge cases.;@Test_	public void readMethodReturnsSubtypeOfWriteMethodParameter() throws IntrospectionException {_		@SuppressWarnings("unused") class C {_			public Integer getFoo() { return null_ }_			public void setFoo(Number foo) { }_		}__		BeanInfo bi = Introspector.getBeanInfo(C.class)__		BeanInfo ebi = new ExtendedBeanInfo(bi)___		assertThat(hasReadMethodForProperty(bi, "foo"), is(true))__		assertThat(hasWriteMethodForProperty(bi, "foo"), is(false))___		assertThat(hasReadMethodForProperty(ebi, "foo"), is(true))__		assertThat(hasWriteMethodForProperty(ebi, "foo"), is(false))__	};link,extended,bean,info,should,behave,exactly,like,link,bean,info,in,strange,edge,cases;test,public,void,read,method,returns,subtype,of,write,method,parameter,throws,introspection,exception,suppress,warnings,unused,class,c,public,integer,get,foo,return,null,public,void,set,foo,number,foo,bean,info,bi,introspector,get,bean,info,c,class,bean,info,ebi,new,extended,bean,info,bi,assert,that,has,read,method,for,property,bi,foo,is,true,assert,that,has,write,method,for,property,bi,foo,is,false,assert,that,has,read,method,for,property,ebi,foo,is,true,assert,that,has,write,method,for,property,ebi,foo,is,false
ExtendedBeanInfoTests -> @Test 	public void readMethodReturnsSubtypeOfWriteMethodParameter() throws IntrospectionException;1357119417;{@link ExtendedBeanInfo} should behave exactly like {@link BeanInfo}_in strange edge cases.;@Test_	public void readMethodReturnsSubtypeOfWriteMethodParameter() throws IntrospectionException {_		@SuppressWarnings("unused") class C {_			public Integer getFoo() { return null_ }_			public void setFoo(Number foo) { }_		}__		BeanInfo bi = Introspector.getBeanInfo(C.class)__		BeanInfo ebi = new ExtendedBeanInfo(bi)___		assertThat(hasReadMethodForProperty(bi, "foo"), is(true))__		assertThat(hasWriteMethodForProperty(bi, "foo"), is(false))___		assertThat(hasReadMethodForProperty(ebi, "foo"), is(true))__		assertThat(hasWriteMethodForProperty(ebi, "foo"), is(false))__	};link,extended,bean,info,should,behave,exactly,like,link,bean,info,in,strange,edge,cases;test,public,void,read,method,returns,subtype,of,write,method,parameter,throws,introspection,exception,suppress,warnings,unused,class,c,public,integer,get,foo,return,null,public,void,set,foo,number,foo,bean,info,bi,introspector,get,bean,info,c,class,bean,info,ebi,new,extended,bean,info,bi,assert,that,has,read,method,for,property,bi,foo,is,true,assert,that,has,write,method,for,property,bi,foo,is,false,assert,that,has,read,method,for,property,ebi,foo,is,true,assert,that,has,write,method,for,property,ebi,foo,is,false
ExtendedBeanInfoTests -> @Test 	public void readMethodReturnsSubtypeOfWriteMethodParameter() throws IntrospectionException;1362408075;{@link ExtendedBeanInfo} should behave exactly like {@link BeanInfo}_in strange edge cases.;@Test_	public void readMethodReturnsSubtypeOfWriteMethodParameter() throws IntrospectionException {_		@SuppressWarnings("unused") class C {_			public Integer getFoo() { return null_ }_			public void setFoo(Number foo) { }_		}__		BeanInfo bi = Introspector.getBeanInfo(C.class)__		BeanInfo ebi = new ExtendedBeanInfo(bi)___		assertThat(hasReadMethodForProperty(bi, "foo"), is(true))__		assertThat(hasWriteMethodForProperty(bi, "foo"), is(false))___		assertThat(hasReadMethodForProperty(ebi, "foo"), is(true))__		assertThat(hasWriteMethodForProperty(ebi, "foo"), is(false))__	};link,extended,bean,info,should,behave,exactly,like,link,bean,info,in,strange,edge,cases;test,public,void,read,method,returns,subtype,of,write,method,parameter,throws,introspection,exception,suppress,warnings,unused,class,c,public,integer,get,foo,return,null,public,void,set,foo,number,foo,bean,info,bi,introspector,get,bean,info,c,class,bean,info,ebi,new,extended,bean,info,bi,assert,that,has,read,method,for,property,bi,foo,is,true,assert,that,has,write,method,for,property,bi,foo,is,false,assert,that,has,read,method,for,property,ebi,foo,is,true,assert,that,has,write,method,for,property,ebi,foo,is,false
ExtendedBeanInfoTests -> @Test 	public void readMethodReturnsSubtypeOfWriteMethodParameter() throws IntrospectionException;1368482696;{@link ExtendedBeanInfo} should behave exactly like {@link BeanInfo}_in strange edge cases.;@Test_	public void readMethodReturnsSubtypeOfWriteMethodParameter() throws IntrospectionException {_		@SuppressWarnings("unused") class C {_			public Integer getFoo() { return null_ }_			public void setFoo(Number foo) { }_		}__		BeanInfo bi = Introspector.getBeanInfo(C.class)__		BeanInfo ebi = new ExtendedBeanInfo(bi)___		assertThat(hasReadMethodForProperty(bi, "foo"), is(true))__		assertThat(hasWriteMethodForProperty(bi, "foo"), is(false))___		assertThat(hasReadMethodForProperty(ebi, "foo"), is(true))__		assertThat(hasWriteMethodForProperty(ebi, "foo"), is(false))__	};link,extended,bean,info,should,behave,exactly,like,link,bean,info,in,strange,edge,cases;test,public,void,read,method,returns,subtype,of,write,method,parameter,throws,introspection,exception,suppress,warnings,unused,class,c,public,integer,get,foo,return,null,public,void,set,foo,number,foo,bean,info,bi,introspector,get,bean,info,c,class,bean,info,ebi,new,extended,bean,info,bi,assert,that,has,read,method,for,property,bi,foo,is,true,assert,that,has,write,method,for,property,bi,foo,is,false,assert,that,has,read,method,for,property,ebi,foo,is,true,assert,that,has,write,method,for,property,ebi,foo,is,false
ExtendedBeanInfoTests -> @Test 	public void readMethodReturnsSubtypeOfWriteMethodParameter() throws IntrospectionException;1375195689;{@link ExtendedBeanInfo} should behave exactly like {@link BeanInfo}_in strange edge cases.;@Test_	public void readMethodReturnsSubtypeOfWriteMethodParameter() throws IntrospectionException {_		@SuppressWarnings("unused") class C {_			public Integer getFoo() { return null_ }_			public void setFoo(Number foo) { }_		}__		BeanInfo bi = Introspector.getBeanInfo(C.class)__		BeanInfo ebi = new ExtendedBeanInfo(bi)___		assertThat(hasReadMethodForProperty(bi, "foo"), is(true))__		assertThat(hasWriteMethodForProperty(bi, "foo"), is(false))___		assertThat(hasReadMethodForProperty(ebi, "foo"), is(true))__		assertThat(hasWriteMethodForProperty(ebi, "foo"), is(false))__	};link,extended,bean,info,should,behave,exactly,like,link,bean,info,in,strange,edge,cases;test,public,void,read,method,returns,subtype,of,write,method,parameter,throws,introspection,exception,suppress,warnings,unused,class,c,public,integer,get,foo,return,null,public,void,set,foo,number,foo,bean,info,bi,introspector,get,bean,info,c,class,bean,info,ebi,new,extended,bean,info,bi,assert,that,has,read,method,for,property,bi,foo,is,true,assert,that,has,write,method,for,property,bi,foo,is,false,assert,that,has,read,method,for,property,ebi,foo,is,true,assert,that,has,write,method,for,property,ebi,foo,is,false
ExtendedBeanInfoTests -> @Test 	public void readMethodReturnsSubtypeOfWriteMethodParameter() throws IntrospectionException;1386711257;{@link ExtendedBeanInfo} should behave exactly like {@link BeanInfo}_in strange edge cases.;@Test_	public void readMethodReturnsSubtypeOfWriteMethodParameter() throws IntrospectionException {_		@SuppressWarnings("unused") class C {_			public Integer getFoo() { return null_ }_			public void setFoo(Number foo) { }_		}__		BeanInfo bi = Introspector.getBeanInfo(C.class)__		BeanInfo ebi = new ExtendedBeanInfo(bi)___		assertThat(hasReadMethodForProperty(bi, "foo"), is(true))__		assertThat(hasWriteMethodForProperty(bi, "foo"), is(false))___		assertThat(hasReadMethodForProperty(ebi, "foo"), is(true))__		assertThat(hasWriteMethodForProperty(ebi, "foo"), is(false))__	};link,extended,bean,info,should,behave,exactly,like,link,bean,info,in,strange,edge,cases;test,public,void,read,method,returns,subtype,of,write,method,parameter,throws,introspection,exception,suppress,warnings,unused,class,c,public,integer,get,foo,return,null,public,void,set,foo,number,foo,bean,info,bi,introspector,get,bean,info,c,class,bean,info,ebi,new,extended,bean,info,bi,assert,that,has,read,method,for,property,bi,foo,is,true,assert,that,has,write,method,for,property,bi,foo,is,false,assert,that,has,read,method,for,property,ebi,foo,is,true,assert,that,has,write,method,for,property,ebi,foo,is,false
ExtendedBeanInfoTests -> @Test 	public void readMethodReturnsSubtypeOfWriteMethodParameter() throws IntrospectionException;1410903610;{@link ExtendedBeanInfo} should behave exactly like {@link BeanInfo}_in strange edge cases.;@Test_	public void readMethodReturnsSubtypeOfWriteMethodParameter() throws IntrospectionException {_		@SuppressWarnings("unused") class C {_			public Integer getFoo() { return null_ }_			public void setFoo(Number foo) { }_		}__		BeanInfo bi = Introspector.getBeanInfo(C.class)__		BeanInfo ebi = new ExtendedBeanInfo(bi)___		assertThat(hasReadMethodForProperty(bi, "foo"), is(true))__		assertThat(hasWriteMethodForProperty(bi, "foo"), is(false))___		assertThat(hasReadMethodForProperty(ebi, "foo"), is(true))__		assertThat(hasWriteMethodForProperty(ebi, "foo"), is(false))__	};link,extended,bean,info,should,behave,exactly,like,link,bean,info,in,strange,edge,cases;test,public,void,read,method,returns,subtype,of,write,method,parameter,throws,introspection,exception,suppress,warnings,unused,class,c,public,integer,get,foo,return,null,public,void,set,foo,number,foo,bean,info,bi,introspector,get,bean,info,c,class,bean,info,ebi,new,extended,bean,info,bi,assert,that,has,read,method,for,property,bi,foo,is,true,assert,that,has,write,method,for,property,bi,foo,is,false,assert,that,has,read,method,for,property,ebi,foo,is,true,assert,that,has,write,method,for,property,ebi,foo,is,false
ExtendedBeanInfoTests -> @Test 	public void readMethodReturnsSubtypeOfWriteMethodParameter() throws IntrospectionException;1417048908;{@link ExtendedBeanInfo} should behave exactly like {@link BeanInfo}_in strange edge cases.;@Test_	public void readMethodReturnsSubtypeOfWriteMethodParameter() throws IntrospectionException {_		@SuppressWarnings("unused") class C {_			public Integer getFoo() { return null_ }_			public void setFoo(Number foo) { }_		}__		BeanInfo bi = Introspector.getBeanInfo(C.class)__		BeanInfo ebi = new ExtendedBeanInfo(bi)___		assertThat(hasReadMethodForProperty(bi, "foo"), is(true))__		assertThat(hasWriteMethodForProperty(bi, "foo"), is(false))___		assertThat(hasReadMethodForProperty(ebi, "foo"), is(true))__		assertThat(hasWriteMethodForProperty(ebi, "foo"), is(false))__	};link,extended,bean,info,should,behave,exactly,like,link,bean,info,in,strange,edge,cases;test,public,void,read,method,returns,subtype,of,write,method,parameter,throws,introspection,exception,suppress,warnings,unused,class,c,public,integer,get,foo,return,null,public,void,set,foo,number,foo,bean,info,bi,introspector,get,bean,info,c,class,bean,info,ebi,new,extended,bean,info,bi,assert,that,has,read,method,for,property,bi,foo,is,true,assert,that,has,write,method,for,property,bi,foo,is,false,assert,that,has,read,method,for,property,ebi,foo,is,true,assert,that,has,write,method,for,property,ebi,foo,is,false
ExtendedBeanInfoTests -> @Test 	public void readMethodReturnsSubtypeOfWriteMethodParameter() throws IntrospectionException;1420208329;{@link ExtendedBeanInfo} should behave exactly like {@link BeanInfo}_in strange edge cases.;@Test_	public void readMethodReturnsSubtypeOfWriteMethodParameter() throws IntrospectionException {_		@SuppressWarnings("unused") class C {_			public Integer getFoo() { return null_ }_			public void setFoo(Number foo) { }_		}__		BeanInfo bi = Introspector.getBeanInfo(C.class)__		BeanInfo ebi = new ExtendedBeanInfo(bi)___		assertThat(hasReadMethodForProperty(bi, "foo"), is(true))__		assertThat(hasWriteMethodForProperty(bi, "foo"), is(false))___		assertThat(hasReadMethodForProperty(ebi, "foo"), is(true))__		assertThat(hasWriteMethodForProperty(ebi, "foo"), is(false))__	};link,extended,bean,info,should,behave,exactly,like,link,bean,info,in,strange,edge,cases;test,public,void,read,method,returns,subtype,of,write,method,parameter,throws,introspection,exception,suppress,warnings,unused,class,c,public,integer,get,foo,return,null,public,void,set,foo,number,foo,bean,info,bi,introspector,get,bean,info,c,class,bean,info,ebi,new,extended,bean,info,bi,assert,that,has,read,method,for,property,bi,foo,is,true,assert,that,has,write,method,for,property,bi,foo,is,false,assert,that,has,read,method,for,property,ebi,foo,is,true,assert,that,has,write,method,for,property,ebi,foo,is,false
ExtendedBeanInfoTests -> @Test 	public void readMethodReturnsSubtypeOfWriteMethodParameter() throws IntrospectionException;1420210924;{@link ExtendedBeanInfo} should behave exactly like {@link BeanInfo}_in strange edge cases.;@Test_	public void readMethodReturnsSubtypeOfWriteMethodParameter() throws IntrospectionException {_		@SuppressWarnings("unused") class C {_			public Integer getFoo() { return null_ }_			public void setFoo(Number foo) { }_		}__		BeanInfo bi = Introspector.getBeanInfo(C.class)__		BeanInfo ebi = new ExtendedBeanInfo(bi)___		assertThat(hasReadMethodForProperty(bi, "foo"), is(true))__		assertThat(hasWriteMethodForProperty(bi, "foo"), is(false))___		assertThat(hasReadMethodForProperty(ebi, "foo"), is(true))__		assertThat(hasWriteMethodForProperty(ebi, "foo"), is(false))__	};link,extended,bean,info,should,behave,exactly,like,link,bean,info,in,strange,edge,cases;test,public,void,read,method,returns,subtype,of,write,method,parameter,throws,introspection,exception,suppress,warnings,unused,class,c,public,integer,get,foo,return,null,public,void,set,foo,number,foo,bean,info,bi,introspector,get,bean,info,c,class,bean,info,ebi,new,extended,bean,info,bi,assert,that,has,read,method,for,property,bi,foo,is,true,assert,that,has,write,method,for,property,bi,foo,is,false,assert,that,has,read,method,for,property,ebi,foo,is,true,assert,that,has,write,method,for,property,ebi,foo,is,false
ExtendedBeanInfoTests -> @Test 	public void readMethodReturnsSubtypeOfWriteMethodParameter() throws IntrospectionException;1439397756;{@link ExtendedBeanInfo} should behave exactly like {@link BeanInfo}_in strange edge cases.;@Test_	public void readMethodReturnsSubtypeOfWriteMethodParameter() throws IntrospectionException {_		@SuppressWarnings("unused") class C {_			public Integer getFoo() { return null_ }_			public void setFoo(Number foo) { }_		}__		BeanInfo bi = Introspector.getBeanInfo(C.class)__		BeanInfo ebi = new ExtendedBeanInfo(bi)___		assertThat(hasReadMethodForProperty(bi, "foo"), is(true))__		assertThat(hasWriteMethodForProperty(bi, "foo"), is(false))___		assertThat(hasReadMethodForProperty(ebi, "foo"), is(true))__		assertThat(hasWriteMethodForProperty(ebi, "foo"), is(false))__	};link,extended,bean,info,should,behave,exactly,like,link,bean,info,in,strange,edge,cases;test,public,void,read,method,returns,subtype,of,write,method,parameter,throws,introspection,exception,suppress,warnings,unused,class,c,public,integer,get,foo,return,null,public,void,set,foo,number,foo,bean,info,bi,introspector,get,bean,info,c,class,bean,info,ebi,new,extended,bean,info,bi,assert,that,has,read,method,for,property,bi,foo,is,true,assert,that,has,write,method,for,property,bi,foo,is,false,assert,that,has,read,method,for,property,ebi,foo,is,true,assert,that,has,write,method,for,property,ebi,foo,is,false
ExtendedBeanInfoTests -> @Test 	public void readMethodReturnsSupertypeOfWriteMethodParameter() throws IntrospectionException;1328020251;{@link ExtendedBeanInfo} should behave exactly like {@link BeanInfo}_in strange edge cases.;@Test_	public void readMethodReturnsSupertypeOfWriteMethodParameter() throws IntrospectionException {_		@SuppressWarnings("unused") class C {_			public Number getFoo() { return null_ }_			public void setFoo(Integer foo) { }_		}__		BeanInfo bi = Introspector.getBeanInfo(C.class)__		ExtendedBeanInfo ebi = new ExtendedBeanInfo(bi)___		assertThat(hasReadMethodForProperty(bi, "foo"), is(true))__		assertThat(hasWriteMethodForProperty(bi, "foo"), is(false))___		assertThat(hasReadMethodForProperty(ebi, "foo"), is(true))__		assertThat(hasWriteMethodForProperty(ebi, "foo"), is(false))__	};link,extended,bean,info,should,behave,exactly,like,link,bean,info,in,strange,edge,cases;test,public,void,read,method,returns,supertype,of,write,method,parameter,throws,introspection,exception,suppress,warnings,unused,class,c,public,number,get,foo,return,null,public,void,set,foo,integer,foo,bean,info,bi,introspector,get,bean,info,c,class,extended,bean,info,ebi,new,extended,bean,info,bi,assert,that,has,read,method,for,property,bi,foo,is,true,assert,that,has,write,method,for,property,bi,foo,is,false,assert,that,has,read,method,for,property,ebi,foo,is,true,assert,that,has,write,method,for,property,ebi,foo,is,false
ExtendedBeanInfoTests -> @Test 	public void readMethodReturnsSupertypeOfWriteMethodParameter() throws IntrospectionException;1329142650;{@link ExtendedBeanInfo} should behave exactly like {@link BeanInfo}_in strange edge cases.;@Test_	public void readMethodReturnsSupertypeOfWriteMethodParameter() throws IntrospectionException {_		@SuppressWarnings("unused") class C {_			public Number getFoo() { return null_ }_			public void setFoo(Integer foo) { }_		}__		BeanInfo bi = Introspector.getBeanInfo(C.class)__		ExtendedBeanInfo ebi = new ExtendedBeanInfo(bi)___		assertThat(hasReadMethodForProperty(bi, "foo"), is(true))__		assertThat(hasWriteMethodForProperty(bi, "foo"), is(false))___		assertThat(hasReadMethodForProperty(ebi, "foo"), is(true))__		assertThat(hasWriteMethodForProperty(ebi, "foo"), is(false))__	};link,extended,bean,info,should,behave,exactly,like,link,bean,info,in,strange,edge,cases;test,public,void,read,method,returns,supertype,of,write,method,parameter,throws,introspection,exception,suppress,warnings,unused,class,c,public,number,get,foo,return,null,public,void,set,foo,integer,foo,bean,info,bi,introspector,get,bean,info,c,class,extended,bean,info,ebi,new,extended,bean,info,bi,assert,that,has,read,method,for,property,bi,foo,is,true,assert,that,has,write,method,for,property,bi,foo,is,false,assert,that,has,read,method,for,property,ebi,foo,is,true,assert,that,has,write,method,for,property,ebi,foo,is,false
ExtendedBeanInfoTests -> @Test 	public void readMethodReturnsSupertypeOfWriteMethodParameter() throws IntrospectionException;1347201894;{@link ExtendedBeanInfo} should behave exactly like {@link BeanInfo}_in strange edge cases.;@Test_	public void readMethodReturnsSupertypeOfWriteMethodParameter() throws IntrospectionException {_		@SuppressWarnings("unused") class C {_			public Number getFoo() { return null_ }_			public void setFoo(Integer foo) { }_		}__		BeanInfo bi = Introspector.getBeanInfo(C.class)__		ExtendedBeanInfo ebi = new ExtendedBeanInfo(bi)___		assertThat(hasReadMethodForProperty(bi, "foo"), is(true))__		assertThat(hasWriteMethodForProperty(bi, "foo"), is(false))___		assertThat(hasReadMethodForProperty(ebi, "foo"), is(true))__		assertThat(hasWriteMethodForProperty(ebi, "foo"), is(false))__	};link,extended,bean,info,should,behave,exactly,like,link,bean,info,in,strange,edge,cases;test,public,void,read,method,returns,supertype,of,write,method,parameter,throws,introspection,exception,suppress,warnings,unused,class,c,public,number,get,foo,return,null,public,void,set,foo,integer,foo,bean,info,bi,introspector,get,bean,info,c,class,extended,bean,info,ebi,new,extended,bean,info,bi,assert,that,has,read,method,for,property,bi,foo,is,true,assert,that,has,write,method,for,property,bi,foo,is,false,assert,that,has,read,method,for,property,ebi,foo,is,true,assert,that,has,write,method,for,property,ebi,foo,is,false
ExtendedBeanInfoTests -> @Test 	public void readMethodReturnsSupertypeOfWriteMethodParameter() throws IntrospectionException;1353842900;{@link ExtendedBeanInfo} should behave exactly like {@link BeanInfo}_in strange edge cases.;@Test_	public void readMethodReturnsSupertypeOfWriteMethodParameter() throws IntrospectionException {_		@SuppressWarnings("unused") class C {_			public Number getFoo() { return null_ }_			public void setFoo(Integer foo) { }_		}__		BeanInfo bi = Introspector.getBeanInfo(C.class)__		BeanInfo ebi = new ExtendedBeanInfo(bi)___		assertThat(hasReadMethodForProperty(bi, "foo"), is(true))__		assertThat(hasWriteMethodForProperty(bi, "foo"), is(false))___		assertThat(hasReadMethodForProperty(ebi, "foo"), is(true))__		assertThat(hasWriteMethodForProperty(ebi, "foo"), is(false))__	};link,extended,bean,info,should,behave,exactly,like,link,bean,info,in,strange,edge,cases;test,public,void,read,method,returns,supertype,of,write,method,parameter,throws,introspection,exception,suppress,warnings,unused,class,c,public,number,get,foo,return,null,public,void,set,foo,integer,foo,bean,info,bi,introspector,get,bean,info,c,class,bean,info,ebi,new,extended,bean,info,bi,assert,that,has,read,method,for,property,bi,foo,is,true,assert,that,has,write,method,for,property,bi,foo,is,false,assert,that,has,read,method,for,property,ebi,foo,is,true,assert,that,has,write,method,for,property,ebi,foo,is,false
ExtendedBeanInfoTests -> @Test 	public void readMethodReturnsSupertypeOfWriteMethodParameter() throws IntrospectionException;1355966262;{@link ExtendedBeanInfo} should behave exactly like {@link BeanInfo}_in strange edge cases.;@Test_	public void readMethodReturnsSupertypeOfWriteMethodParameter() throws IntrospectionException {_		@SuppressWarnings("unused") class C {_			public Number getFoo() { return null_ }_			public void setFoo(Integer foo) { }_		}__		BeanInfo bi = Introspector.getBeanInfo(C.class)__		BeanInfo ebi = new ExtendedBeanInfo(bi)___		assertThat(hasReadMethodForProperty(bi, "foo"), is(true))__		assertThat(hasWriteMethodForProperty(bi, "foo"), is(false))___		assertThat(hasReadMethodForProperty(ebi, "foo"), is(true))__		assertThat(hasWriteMethodForProperty(ebi, "foo"), is(false))__	};link,extended,bean,info,should,behave,exactly,like,link,bean,info,in,strange,edge,cases;test,public,void,read,method,returns,supertype,of,write,method,parameter,throws,introspection,exception,suppress,warnings,unused,class,c,public,number,get,foo,return,null,public,void,set,foo,integer,foo,bean,info,bi,introspector,get,bean,info,c,class,bean,info,ebi,new,extended,bean,info,bi,assert,that,has,read,method,for,property,bi,foo,is,true,assert,that,has,write,method,for,property,bi,foo,is,false,assert,that,has,read,method,for,property,ebi,foo,is,true,assert,that,has,write,method,for,property,ebi,foo,is,false
ExtendedBeanInfoTests -> @Test 	public void readMethodReturnsSupertypeOfWriteMethodParameter() throws IntrospectionException;1356735495;{@link ExtendedBeanInfo} should behave exactly like {@link BeanInfo}_in strange edge cases.;@Test_	public void readMethodReturnsSupertypeOfWriteMethodParameter() throws IntrospectionException {_		@SuppressWarnings("unused") class C {_			public Number getFoo() { return null_ }_			public void setFoo(Integer foo) { }_		}__		BeanInfo bi = Introspector.getBeanInfo(C.class)__		BeanInfo ebi = new ExtendedBeanInfo(bi)___		assertThat(hasReadMethodForProperty(bi, "foo"), is(true))__		assertThat(hasWriteMethodForProperty(bi, "foo"), is(false))___		assertThat(hasReadMethodForProperty(ebi, "foo"), is(true))__		assertThat(hasWriteMethodForProperty(ebi, "foo"), is(false))__	};link,extended,bean,info,should,behave,exactly,like,link,bean,info,in,strange,edge,cases;test,public,void,read,method,returns,supertype,of,write,method,parameter,throws,introspection,exception,suppress,warnings,unused,class,c,public,number,get,foo,return,null,public,void,set,foo,integer,foo,bean,info,bi,introspector,get,bean,info,c,class,bean,info,ebi,new,extended,bean,info,bi,assert,that,has,read,method,for,property,bi,foo,is,true,assert,that,has,write,method,for,property,bi,foo,is,false,assert,that,has,read,method,for,property,ebi,foo,is,true,assert,that,has,write,method,for,property,ebi,foo,is,false
ExtendedBeanInfoTests -> @Test 	public void readMethodReturnsSupertypeOfWriteMethodParameter() throws IntrospectionException;1357119417;{@link ExtendedBeanInfo} should behave exactly like {@link BeanInfo}_in strange edge cases.;@Test_	public void readMethodReturnsSupertypeOfWriteMethodParameter() throws IntrospectionException {_		@SuppressWarnings("unused") class C {_			public Number getFoo() { return null_ }_			public void setFoo(Integer foo) { }_		}__		BeanInfo bi = Introspector.getBeanInfo(C.class)__		BeanInfo ebi = new ExtendedBeanInfo(bi)___		assertThat(hasReadMethodForProperty(bi, "foo"), is(true))__		assertThat(hasWriteMethodForProperty(bi, "foo"), is(false))___		assertThat(hasReadMethodForProperty(ebi, "foo"), is(true))__		assertThat(hasWriteMethodForProperty(ebi, "foo"), is(false))__	};link,extended,bean,info,should,behave,exactly,like,link,bean,info,in,strange,edge,cases;test,public,void,read,method,returns,supertype,of,write,method,parameter,throws,introspection,exception,suppress,warnings,unused,class,c,public,number,get,foo,return,null,public,void,set,foo,integer,foo,bean,info,bi,introspector,get,bean,info,c,class,bean,info,ebi,new,extended,bean,info,bi,assert,that,has,read,method,for,property,bi,foo,is,true,assert,that,has,write,method,for,property,bi,foo,is,false,assert,that,has,read,method,for,property,ebi,foo,is,true,assert,that,has,write,method,for,property,ebi,foo,is,false
ExtendedBeanInfoTests -> @Test 	public void readMethodReturnsSupertypeOfWriteMethodParameter() throws IntrospectionException;1362408075;{@link ExtendedBeanInfo} should behave exactly like {@link BeanInfo}_in strange edge cases.;@Test_	public void readMethodReturnsSupertypeOfWriteMethodParameter() throws IntrospectionException {_		@SuppressWarnings("unused") class C {_			public Number getFoo() { return null_ }_			public void setFoo(Integer foo) { }_		}__		BeanInfo bi = Introspector.getBeanInfo(C.class)__		BeanInfo ebi = new ExtendedBeanInfo(bi)___		assertThat(hasReadMethodForProperty(bi, "foo"), is(true))__		assertThat(hasWriteMethodForProperty(bi, "foo"), is(false))___		assertThat(hasReadMethodForProperty(ebi, "foo"), is(true))__		assertThat(hasWriteMethodForProperty(ebi, "foo"), is(false))__	};link,extended,bean,info,should,behave,exactly,like,link,bean,info,in,strange,edge,cases;test,public,void,read,method,returns,supertype,of,write,method,parameter,throws,introspection,exception,suppress,warnings,unused,class,c,public,number,get,foo,return,null,public,void,set,foo,integer,foo,bean,info,bi,introspector,get,bean,info,c,class,bean,info,ebi,new,extended,bean,info,bi,assert,that,has,read,method,for,property,bi,foo,is,true,assert,that,has,write,method,for,property,bi,foo,is,false,assert,that,has,read,method,for,property,ebi,foo,is,true,assert,that,has,write,method,for,property,ebi,foo,is,false
ExtendedBeanInfoTests -> @Test 	public void readMethodReturnsSupertypeOfWriteMethodParameter() throws IntrospectionException;1368482696;{@link ExtendedBeanInfo} should behave exactly like {@link BeanInfo}_in strange edge cases.;@Test_	public void readMethodReturnsSupertypeOfWriteMethodParameter() throws IntrospectionException {_		@SuppressWarnings("unused") class C {_			public Number getFoo() { return null_ }_			public void setFoo(Integer foo) { }_		}__		BeanInfo bi = Introspector.getBeanInfo(C.class)__		BeanInfo ebi = new ExtendedBeanInfo(bi)___		assertThat(hasReadMethodForProperty(bi, "foo"), is(true))__		assertThat(hasWriteMethodForProperty(bi, "foo"), is(false))___		assertThat(hasReadMethodForProperty(ebi, "foo"), is(true))__		assertThat(hasWriteMethodForProperty(ebi, "foo"), is(false))__	};link,extended,bean,info,should,behave,exactly,like,link,bean,info,in,strange,edge,cases;test,public,void,read,method,returns,supertype,of,write,method,parameter,throws,introspection,exception,suppress,warnings,unused,class,c,public,number,get,foo,return,null,public,void,set,foo,integer,foo,bean,info,bi,introspector,get,bean,info,c,class,bean,info,ebi,new,extended,bean,info,bi,assert,that,has,read,method,for,property,bi,foo,is,true,assert,that,has,write,method,for,property,bi,foo,is,false,assert,that,has,read,method,for,property,ebi,foo,is,true,assert,that,has,write,method,for,property,ebi,foo,is,false
ExtendedBeanInfoTests -> @Test 	public void readMethodReturnsSupertypeOfWriteMethodParameter() throws IntrospectionException;1375195689;{@link ExtendedBeanInfo} should behave exactly like {@link BeanInfo}_in strange edge cases.;@Test_	public void readMethodReturnsSupertypeOfWriteMethodParameter() throws IntrospectionException {_		@SuppressWarnings("unused") class C {_			public Number getFoo() { return null_ }_			public void setFoo(Integer foo) { }_		}__		BeanInfo bi = Introspector.getBeanInfo(C.class)__		BeanInfo ebi = new ExtendedBeanInfo(bi)___		assertThat(hasReadMethodForProperty(bi, "foo"), is(true))__		assertThat(hasWriteMethodForProperty(bi, "foo"), is(false))___		assertThat(hasReadMethodForProperty(ebi, "foo"), is(true))__		assertThat(hasWriteMethodForProperty(ebi, "foo"), is(false))__	};link,extended,bean,info,should,behave,exactly,like,link,bean,info,in,strange,edge,cases;test,public,void,read,method,returns,supertype,of,write,method,parameter,throws,introspection,exception,suppress,warnings,unused,class,c,public,number,get,foo,return,null,public,void,set,foo,integer,foo,bean,info,bi,introspector,get,bean,info,c,class,bean,info,ebi,new,extended,bean,info,bi,assert,that,has,read,method,for,property,bi,foo,is,true,assert,that,has,write,method,for,property,bi,foo,is,false,assert,that,has,read,method,for,property,ebi,foo,is,true,assert,that,has,write,method,for,property,ebi,foo,is,false
ExtendedBeanInfoTests -> @Test 	public void readMethodReturnsSupertypeOfWriteMethodParameter() throws IntrospectionException;1386711257;{@link ExtendedBeanInfo} should behave exactly like {@link BeanInfo}_in strange edge cases.;@Test_	public void readMethodReturnsSupertypeOfWriteMethodParameter() throws IntrospectionException {_		@SuppressWarnings("unused") class C {_			public Number getFoo() { return null_ }_			public void setFoo(Integer foo) { }_		}__		BeanInfo bi = Introspector.getBeanInfo(C.class)__		BeanInfo ebi = new ExtendedBeanInfo(bi)___		assertThat(hasReadMethodForProperty(bi, "foo"), is(true))__		assertThat(hasReadMethodForProperty(ebi, "foo"), is(true))__		assertEquals(hasWriteMethodForProperty(bi, "foo"), hasWriteMethodForProperty(ebi, "foo"))__	};link,extended,bean,info,should,behave,exactly,like,link,bean,info,in,strange,edge,cases;test,public,void,read,method,returns,supertype,of,write,method,parameter,throws,introspection,exception,suppress,warnings,unused,class,c,public,number,get,foo,return,null,public,void,set,foo,integer,foo,bean,info,bi,introspector,get,bean,info,c,class,bean,info,ebi,new,extended,bean,info,bi,assert,that,has,read,method,for,property,bi,foo,is,true,assert,that,has,read,method,for,property,ebi,foo,is,true,assert,equals,has,write,method,for,property,bi,foo,has,write,method,for,property,ebi,foo
ExtendedBeanInfoTests -> @Test 	public void readMethodReturnsSupertypeOfWriteMethodParameter() throws IntrospectionException;1410903610;{@link ExtendedBeanInfo} should behave exactly like {@link BeanInfo}_in strange edge cases.;@Test_	public void readMethodReturnsSupertypeOfWriteMethodParameter() throws IntrospectionException {_		@SuppressWarnings("unused") class C {_			public Number getFoo() { return null_ }_			public void setFoo(Integer foo) { }_		}__		BeanInfo bi = Introspector.getBeanInfo(C.class)__		BeanInfo ebi = new ExtendedBeanInfo(bi)___		assertThat(hasReadMethodForProperty(bi, "foo"), is(true))__		assertThat(hasReadMethodForProperty(ebi, "foo"), is(true))__		assertEquals(hasWriteMethodForProperty(bi, "foo"), hasWriteMethodForProperty(ebi, "foo"))__	};link,extended,bean,info,should,behave,exactly,like,link,bean,info,in,strange,edge,cases;test,public,void,read,method,returns,supertype,of,write,method,parameter,throws,introspection,exception,suppress,warnings,unused,class,c,public,number,get,foo,return,null,public,void,set,foo,integer,foo,bean,info,bi,introspector,get,bean,info,c,class,bean,info,ebi,new,extended,bean,info,bi,assert,that,has,read,method,for,property,bi,foo,is,true,assert,that,has,read,method,for,property,ebi,foo,is,true,assert,equals,has,write,method,for,property,bi,foo,has,write,method,for,property,ebi,foo
ExtendedBeanInfoTests -> @Test 	public void readMethodReturnsSupertypeOfWriteMethodParameter() throws IntrospectionException;1417048908;{@link ExtendedBeanInfo} should behave exactly like {@link BeanInfo}_in strange edge cases.;@Test_	public void readMethodReturnsSupertypeOfWriteMethodParameter() throws IntrospectionException {_		@SuppressWarnings("unused") class C {_			public Number getFoo() { return null_ }_			public void setFoo(Integer foo) { }_		}__		BeanInfo bi = Introspector.getBeanInfo(C.class)__		BeanInfo ebi = new ExtendedBeanInfo(bi)___		assertThat(hasReadMethodForProperty(bi, "foo"), is(true))__		assertThat(hasReadMethodForProperty(ebi, "foo"), is(true))__		assertEquals(hasWriteMethodForProperty(bi, "foo"), hasWriteMethodForProperty(ebi, "foo"))__	};link,extended,bean,info,should,behave,exactly,like,link,bean,info,in,strange,edge,cases;test,public,void,read,method,returns,supertype,of,write,method,parameter,throws,introspection,exception,suppress,warnings,unused,class,c,public,number,get,foo,return,null,public,void,set,foo,integer,foo,bean,info,bi,introspector,get,bean,info,c,class,bean,info,ebi,new,extended,bean,info,bi,assert,that,has,read,method,for,property,bi,foo,is,true,assert,that,has,read,method,for,property,ebi,foo,is,true,assert,equals,has,write,method,for,property,bi,foo,has,write,method,for,property,ebi,foo
ExtendedBeanInfoTests -> @Test 	public void readMethodReturnsSupertypeOfWriteMethodParameter() throws IntrospectionException;1420208329;{@link ExtendedBeanInfo} should behave exactly like {@link BeanInfo}_in strange edge cases.;@Test_	public void readMethodReturnsSupertypeOfWriteMethodParameter() throws IntrospectionException {_		@SuppressWarnings("unused") class C {_			public Number getFoo() { return null_ }_			public void setFoo(Integer foo) { }_		}__		BeanInfo bi = Introspector.getBeanInfo(C.class)__		BeanInfo ebi = new ExtendedBeanInfo(bi)___		assertThat(hasReadMethodForProperty(bi, "foo"), is(true))__		assertThat(hasReadMethodForProperty(ebi, "foo"), is(true))__		assertEquals(hasWriteMethodForProperty(bi, "foo"), hasWriteMethodForProperty(ebi, "foo"))__	};link,extended,bean,info,should,behave,exactly,like,link,bean,info,in,strange,edge,cases;test,public,void,read,method,returns,supertype,of,write,method,parameter,throws,introspection,exception,suppress,warnings,unused,class,c,public,number,get,foo,return,null,public,void,set,foo,integer,foo,bean,info,bi,introspector,get,bean,info,c,class,bean,info,ebi,new,extended,bean,info,bi,assert,that,has,read,method,for,property,bi,foo,is,true,assert,that,has,read,method,for,property,ebi,foo,is,true,assert,equals,has,write,method,for,property,bi,foo,has,write,method,for,property,ebi,foo
ExtendedBeanInfoTests -> @Test 	public void readMethodReturnsSupertypeOfWriteMethodParameter() throws IntrospectionException;1420210924;{@link ExtendedBeanInfo} should behave exactly like {@link BeanInfo}_in strange edge cases.;@Test_	public void readMethodReturnsSupertypeOfWriteMethodParameter() throws IntrospectionException {_		@SuppressWarnings("unused") class C {_			public Number getFoo() { return null_ }_			public void setFoo(Integer foo) { }_		}__		BeanInfo bi = Introspector.getBeanInfo(C.class)__		BeanInfo ebi = new ExtendedBeanInfo(bi)___		assertThat(hasReadMethodForProperty(bi, "foo"), is(true))__		assertThat(hasReadMethodForProperty(ebi, "foo"), is(true))__		assertEquals(hasWriteMethodForProperty(bi, "foo"), hasWriteMethodForProperty(ebi, "foo"))__	};link,extended,bean,info,should,behave,exactly,like,link,bean,info,in,strange,edge,cases;test,public,void,read,method,returns,supertype,of,write,method,parameter,throws,introspection,exception,suppress,warnings,unused,class,c,public,number,get,foo,return,null,public,void,set,foo,integer,foo,bean,info,bi,introspector,get,bean,info,c,class,bean,info,ebi,new,extended,bean,info,bi,assert,that,has,read,method,for,property,bi,foo,is,true,assert,that,has,read,method,for,property,ebi,foo,is,true,assert,equals,has,write,method,for,property,bi,foo,has,write,method,for,property,ebi,foo
ExtendedBeanInfoTests -> @Test 	public void readMethodReturnsSupertypeOfWriteMethodParameter() throws IntrospectionException;1439397756;{@link ExtendedBeanInfo} should behave exactly like {@link BeanInfo}_in strange edge cases.;@Test_	public void readMethodReturnsSupertypeOfWriteMethodParameter() throws IntrospectionException {_		@SuppressWarnings("unused") class C {_			public Number getFoo() { return null_ }_			public void setFoo(Integer foo) { }_		}__		BeanInfo bi = Introspector.getBeanInfo(C.class)__		BeanInfo ebi = new ExtendedBeanInfo(bi)___		assertThat(hasReadMethodForProperty(bi, "foo"), is(true))__		assertThat(hasReadMethodForProperty(ebi, "foo"), is(true))__		assertEquals(hasWriteMethodForProperty(bi, "foo"), hasWriteMethodForProperty(ebi, "foo"))__	};link,extended,bean,info,should,behave,exactly,like,link,bean,info,in,strange,edge,cases;test,public,void,read,method,returns,supertype,of,write,method,parameter,throws,introspection,exception,suppress,warnings,unused,class,c,public,number,get,foo,return,null,public,void,set,foo,integer,foo,bean,info,bi,introspector,get,bean,info,c,class,bean,info,ebi,new,extended,bean,info,bi,assert,that,has,read,method,for,property,bi,foo,is,true,assert,that,has,read,method,for,property,ebi,foo,is,true,assert,equals,has,write,method,for,property,bi,foo,has,write,method,for,property,ebi,foo
ExtendedBeanInfoTests -> @Test 	public void propertyDescriptorOrderIsEqual() throws IntrospectionException;1328020251;{@link BeanInfo#getPropertyDescriptors()} returns alphanumerically sorted._Test that {@link ExtendedBeanInfo#getPropertyDescriptors()} does the same.;@Test_	public void propertyDescriptorOrderIsEqual() throws IntrospectionException {_		BeanInfo bi = Introspector.getBeanInfo(TestBean.class)__		ExtendedBeanInfo ebi = new ExtendedBeanInfo(bi)___		for (int i = 0_ i < bi.getPropertyDescriptors().length_ i++) {_			assertThat("element " + i + " in BeanInfo and ExtendedBeanInfo propertyDescriptor arrays do not match",_					ebi.getPropertyDescriptors()[i].getName(), equalTo(bi.getPropertyDescriptors()[i].getName()))__		}_	};link,bean,info,get,property,descriptors,returns,alphanumerically,sorted,test,that,link,extended,bean,info,get,property,descriptors,does,the,same;test,public,void,property,descriptor,order,is,equal,throws,introspection,exception,bean,info,bi,introspector,get,bean,info,test,bean,class,extended,bean,info,ebi,new,extended,bean,info,bi,for,int,i,0,i,bi,get,property,descriptors,length,i,assert,that,element,i,in,bean,info,and,extended,bean,info,property,descriptor,arrays,do,not,match,ebi,get,property,descriptors,i,get,name,equal,to,bi,get,property,descriptors,i,get,name
ExtendedBeanInfoTests -> @Test 	public void propertyDescriptorOrderIsEqual() throws IntrospectionException;1329142650;{@link BeanInfo#getPropertyDescriptors()} returns alphanumerically sorted._Test that {@link ExtendedBeanInfo#getPropertyDescriptors()} does the same.;@Test_	public void propertyDescriptorOrderIsEqual() throws IntrospectionException {_		BeanInfo bi = Introspector.getBeanInfo(TestBean.class)__		ExtendedBeanInfo ebi = new ExtendedBeanInfo(bi)___		for (int i = 0_ i < bi.getPropertyDescriptors().length_ i++) {_			assertThat("element " + i + " in BeanInfo and ExtendedBeanInfo propertyDescriptor arrays do not match",_					ebi.getPropertyDescriptors()[i].getName(), equalTo(bi.getPropertyDescriptors()[i].getName()))__		}_	};link,bean,info,get,property,descriptors,returns,alphanumerically,sorted,test,that,link,extended,bean,info,get,property,descriptors,does,the,same;test,public,void,property,descriptor,order,is,equal,throws,introspection,exception,bean,info,bi,introspector,get,bean,info,test,bean,class,extended,bean,info,ebi,new,extended,bean,info,bi,for,int,i,0,i,bi,get,property,descriptors,length,i,assert,that,element,i,in,bean,info,and,extended,bean,info,property,descriptor,arrays,do,not,match,ebi,get,property,descriptors,i,get,name,equal,to,bi,get,property,descriptors,i,get,name
ExtendedBeanInfoTests -> @Test 	public void propertyDescriptorOrderIsEqual() throws IntrospectionException;1347201894;{@link BeanInfo#getPropertyDescriptors()} returns alphanumerically sorted._Test that {@link ExtendedBeanInfo#getPropertyDescriptors()} does the same.;@Test_	public void propertyDescriptorOrderIsEqual() throws IntrospectionException {_		BeanInfo bi = Introspector.getBeanInfo(TestBean.class)__		ExtendedBeanInfo ebi = new ExtendedBeanInfo(bi)___		for (int i = 0_ i < bi.getPropertyDescriptors().length_ i++) {_			assertThat("element " + i + " in BeanInfo and ExtendedBeanInfo propertyDescriptor arrays do not match",_					ebi.getPropertyDescriptors()[i].getName(), equalTo(bi.getPropertyDescriptors()[i].getName()))__		}_	};link,bean,info,get,property,descriptors,returns,alphanumerically,sorted,test,that,link,extended,bean,info,get,property,descriptors,does,the,same;test,public,void,property,descriptor,order,is,equal,throws,introspection,exception,bean,info,bi,introspector,get,bean,info,test,bean,class,extended,bean,info,ebi,new,extended,bean,info,bi,for,int,i,0,i,bi,get,property,descriptors,length,i,assert,that,element,i,in,bean,info,and,extended,bean,info,property,descriptor,arrays,do,not,match,ebi,get,property,descriptors,i,get,name,equal,to,bi,get,property,descriptors,i,get,name
ExtendedBeanInfoTests -> @Test 	public void propertyDescriptorOrderIsEqual() throws IntrospectionException;1353842900;{@link BeanInfo#getPropertyDescriptors()} returns alphanumerically sorted._Test that {@link ExtendedBeanInfo#getPropertyDescriptors()} does the same.;@Test_	public void propertyDescriptorOrderIsEqual() throws IntrospectionException {_		BeanInfo bi = Introspector.getBeanInfo(TestBean.class)__		BeanInfo ebi = new ExtendedBeanInfo(bi)___		for (int i = 0_ i < bi.getPropertyDescriptors().length_ i++) {_			assertThat("element " + i + " in BeanInfo and ExtendedBeanInfo propertyDescriptor arrays do not match",_					ebi.getPropertyDescriptors()[i].getName(), equalTo(bi.getPropertyDescriptors()[i].getName()))__		}_	};link,bean,info,get,property,descriptors,returns,alphanumerically,sorted,test,that,link,extended,bean,info,get,property,descriptors,does,the,same;test,public,void,property,descriptor,order,is,equal,throws,introspection,exception,bean,info,bi,introspector,get,bean,info,test,bean,class,bean,info,ebi,new,extended,bean,info,bi,for,int,i,0,i,bi,get,property,descriptors,length,i,assert,that,element,i,in,bean,info,and,extended,bean,info,property,descriptor,arrays,do,not,match,ebi,get,property,descriptors,i,get,name,equal,to,bi,get,property,descriptors,i,get,name
ExtendedBeanInfoTests -> @Test 	public void propertyDescriptorOrderIsEqual() throws IntrospectionException;1355966262;{@link BeanInfo#getPropertyDescriptors()} returns alphanumerically sorted._Test that {@link ExtendedBeanInfo#getPropertyDescriptors()} does the same.;@Test_	public void propertyDescriptorOrderIsEqual() throws IntrospectionException {_		BeanInfo bi = Introspector.getBeanInfo(TestBean.class)__		BeanInfo ebi = new ExtendedBeanInfo(bi)___		for (int i = 0_ i < bi.getPropertyDescriptors().length_ i++) {_			assertThat("element " + i + " in BeanInfo and ExtendedBeanInfo propertyDescriptor arrays do not match",_					ebi.getPropertyDescriptors()[i].getName(), equalTo(bi.getPropertyDescriptors()[i].getName()))__		}_	};link,bean,info,get,property,descriptors,returns,alphanumerically,sorted,test,that,link,extended,bean,info,get,property,descriptors,does,the,same;test,public,void,property,descriptor,order,is,equal,throws,introspection,exception,bean,info,bi,introspector,get,bean,info,test,bean,class,bean,info,ebi,new,extended,bean,info,bi,for,int,i,0,i,bi,get,property,descriptors,length,i,assert,that,element,i,in,bean,info,and,extended,bean,info,property,descriptor,arrays,do,not,match,ebi,get,property,descriptors,i,get,name,equal,to,bi,get,property,descriptors,i,get,name
ExtendedBeanInfoTests -> @Test 	public void propertyDescriptorOrderIsEqual() throws IntrospectionException;1356735495;{@link BeanInfo#getPropertyDescriptors()} returns alphanumerically sorted._Test that {@link ExtendedBeanInfo#getPropertyDescriptors()} does the same.;@Test_	public void propertyDescriptorOrderIsEqual() throws IntrospectionException {_		BeanInfo bi = Introspector.getBeanInfo(TestBean.class)__		BeanInfo ebi = new ExtendedBeanInfo(bi)___		for (int i = 0_ i < bi.getPropertyDescriptors().length_ i++) {_			assertThat("element " + i + " in BeanInfo and ExtendedBeanInfo propertyDescriptor arrays do not match",_					ebi.getPropertyDescriptors()[i].getName(), equalTo(bi.getPropertyDescriptors()[i].getName()))__		}_	};link,bean,info,get,property,descriptors,returns,alphanumerically,sorted,test,that,link,extended,bean,info,get,property,descriptors,does,the,same;test,public,void,property,descriptor,order,is,equal,throws,introspection,exception,bean,info,bi,introspector,get,bean,info,test,bean,class,bean,info,ebi,new,extended,bean,info,bi,for,int,i,0,i,bi,get,property,descriptors,length,i,assert,that,element,i,in,bean,info,and,extended,bean,info,property,descriptor,arrays,do,not,match,ebi,get,property,descriptors,i,get,name,equal,to,bi,get,property,descriptors,i,get,name
ExtendedBeanInfoTests -> @Test 	public void propertyDescriptorOrderIsEqual() throws IntrospectionException;1357119417;{@link BeanInfo#getPropertyDescriptors()} returns alphanumerically sorted._Test that {@link ExtendedBeanInfo#getPropertyDescriptors()} does the same.;@Test_	public void propertyDescriptorOrderIsEqual() throws IntrospectionException {_		BeanInfo bi = Introspector.getBeanInfo(TestBean.class)__		BeanInfo ebi = new ExtendedBeanInfo(bi)___		for (int i = 0_ i < bi.getPropertyDescriptors().length_ i++) {_			assertThat("element " + i + " in BeanInfo and ExtendedBeanInfo propertyDescriptor arrays do not match",_					ebi.getPropertyDescriptors()[i].getName(), equalTo(bi.getPropertyDescriptors()[i].getName()))__		}_	};link,bean,info,get,property,descriptors,returns,alphanumerically,sorted,test,that,link,extended,bean,info,get,property,descriptors,does,the,same;test,public,void,property,descriptor,order,is,equal,throws,introspection,exception,bean,info,bi,introspector,get,bean,info,test,bean,class,bean,info,ebi,new,extended,bean,info,bi,for,int,i,0,i,bi,get,property,descriptors,length,i,assert,that,element,i,in,bean,info,and,extended,bean,info,property,descriptor,arrays,do,not,match,ebi,get,property,descriptors,i,get,name,equal,to,bi,get,property,descriptors,i,get,name
ExtendedBeanInfoTests -> @Test 	public void propertyDescriptorOrderIsEqual() throws IntrospectionException;1362408075;{@link BeanInfo#getPropertyDescriptors()} returns alphanumerically sorted._Test that {@link ExtendedBeanInfo#getPropertyDescriptors()} does the same.;@Test_	public void propertyDescriptorOrderIsEqual() throws IntrospectionException {_		BeanInfo bi = Introspector.getBeanInfo(TestBean.class)__		BeanInfo ebi = new ExtendedBeanInfo(bi)___		for (int i = 0_ i < bi.getPropertyDescriptors().length_ i++) {_			assertThat("element " + i + " in BeanInfo and ExtendedBeanInfo propertyDescriptor arrays do not match",_					ebi.getPropertyDescriptors()[i].getName(), equalTo(bi.getPropertyDescriptors()[i].getName()))__		}_	};link,bean,info,get,property,descriptors,returns,alphanumerically,sorted,test,that,link,extended,bean,info,get,property,descriptors,does,the,same;test,public,void,property,descriptor,order,is,equal,throws,introspection,exception,bean,info,bi,introspector,get,bean,info,test,bean,class,bean,info,ebi,new,extended,bean,info,bi,for,int,i,0,i,bi,get,property,descriptors,length,i,assert,that,element,i,in,bean,info,and,extended,bean,info,property,descriptor,arrays,do,not,match,ebi,get,property,descriptors,i,get,name,equal,to,bi,get,property,descriptors,i,get,name
ExtendedBeanInfoTests -> @Test 	public void propertyDescriptorOrderIsEqual() throws IntrospectionException;1368482696;{@link BeanInfo#getPropertyDescriptors()} returns alphanumerically sorted._Test that {@link ExtendedBeanInfo#getPropertyDescriptors()} does the same.;@Test_	public void propertyDescriptorOrderIsEqual() throws IntrospectionException {_		BeanInfo bi = Introspector.getBeanInfo(TestBean.class)__		BeanInfo ebi = new ExtendedBeanInfo(bi)___		for (int i = 0_ i < bi.getPropertyDescriptors().length_ i++) {_			assertThat("element " + i + " in BeanInfo and ExtendedBeanInfo propertyDescriptor arrays do not match",_					ebi.getPropertyDescriptors()[i].getName(), equalTo(bi.getPropertyDescriptors()[i].getName()))__		}_	};link,bean,info,get,property,descriptors,returns,alphanumerically,sorted,test,that,link,extended,bean,info,get,property,descriptors,does,the,same;test,public,void,property,descriptor,order,is,equal,throws,introspection,exception,bean,info,bi,introspector,get,bean,info,test,bean,class,bean,info,ebi,new,extended,bean,info,bi,for,int,i,0,i,bi,get,property,descriptors,length,i,assert,that,element,i,in,bean,info,and,extended,bean,info,property,descriptor,arrays,do,not,match,ebi,get,property,descriptors,i,get,name,equal,to,bi,get,property,descriptors,i,get,name
ExtendedBeanInfoTests -> @Test 	public void propertyDescriptorOrderIsEqual() throws IntrospectionException;1375195689;{@link BeanInfo#getPropertyDescriptors()} returns alphanumerically sorted._Test that {@link ExtendedBeanInfo#getPropertyDescriptors()} does the same.;@Test_	public void propertyDescriptorOrderIsEqual() throws IntrospectionException {_		BeanInfo bi = Introspector.getBeanInfo(TestBean.class)__		BeanInfo ebi = new ExtendedBeanInfo(bi)___		for (int i = 0_ i < bi.getPropertyDescriptors().length_ i++) {_			assertThat("element " + i + " in BeanInfo and ExtendedBeanInfo propertyDescriptor arrays do not match",_					ebi.getPropertyDescriptors()[i].getName(), equalTo(bi.getPropertyDescriptors()[i].getName()))__		}_	};link,bean,info,get,property,descriptors,returns,alphanumerically,sorted,test,that,link,extended,bean,info,get,property,descriptors,does,the,same;test,public,void,property,descriptor,order,is,equal,throws,introspection,exception,bean,info,bi,introspector,get,bean,info,test,bean,class,bean,info,ebi,new,extended,bean,info,bi,for,int,i,0,i,bi,get,property,descriptors,length,i,assert,that,element,i,in,bean,info,and,extended,bean,info,property,descriptor,arrays,do,not,match,ebi,get,property,descriptors,i,get,name,equal,to,bi,get,property,descriptors,i,get,name
ExtendedBeanInfoTests -> @Test 	public void propertyDescriptorOrderIsEqual() throws IntrospectionException;1386711257;{@link BeanInfo#getPropertyDescriptors()} returns alphanumerically sorted._Test that {@link ExtendedBeanInfo#getPropertyDescriptors()} does the same.;@Test_	public void propertyDescriptorOrderIsEqual() throws IntrospectionException {_		BeanInfo bi = Introspector.getBeanInfo(TestBean.class)__		BeanInfo ebi = new ExtendedBeanInfo(bi)___		for (int i = 0_ i < bi.getPropertyDescriptors().length_ i++) {_			assertThat("element " + i + " in BeanInfo and ExtendedBeanInfo propertyDescriptor arrays do not match",_					ebi.getPropertyDescriptors()[i].getName(), equalTo(bi.getPropertyDescriptors()[i].getName()))__		}_	};link,bean,info,get,property,descriptors,returns,alphanumerically,sorted,test,that,link,extended,bean,info,get,property,descriptors,does,the,same;test,public,void,property,descriptor,order,is,equal,throws,introspection,exception,bean,info,bi,introspector,get,bean,info,test,bean,class,bean,info,ebi,new,extended,bean,info,bi,for,int,i,0,i,bi,get,property,descriptors,length,i,assert,that,element,i,in,bean,info,and,extended,bean,info,property,descriptor,arrays,do,not,match,ebi,get,property,descriptors,i,get,name,equal,to,bi,get,property,descriptors,i,get,name
ExtendedBeanInfoTests -> @Test 	public void propertyDescriptorOrderIsEqual() throws IntrospectionException;1410903610;{@link BeanInfo#getPropertyDescriptors()} returns alphanumerically sorted._Test that {@link ExtendedBeanInfo#getPropertyDescriptors()} does the same.;@Test_	public void propertyDescriptorOrderIsEqual() throws IntrospectionException {_		BeanInfo bi = Introspector.getBeanInfo(TestBean.class)__		BeanInfo ebi = new ExtendedBeanInfo(bi)___		for (int i = 0_ i < bi.getPropertyDescriptors().length_ i++) {_			assertThat("element " + i + " in BeanInfo and ExtendedBeanInfo propertyDescriptor arrays do not match",_					ebi.getPropertyDescriptors()[i].getName(), equalTo(bi.getPropertyDescriptors()[i].getName()))__		}_	};link,bean,info,get,property,descriptors,returns,alphanumerically,sorted,test,that,link,extended,bean,info,get,property,descriptors,does,the,same;test,public,void,property,descriptor,order,is,equal,throws,introspection,exception,bean,info,bi,introspector,get,bean,info,test,bean,class,bean,info,ebi,new,extended,bean,info,bi,for,int,i,0,i,bi,get,property,descriptors,length,i,assert,that,element,i,in,bean,info,and,extended,bean,info,property,descriptor,arrays,do,not,match,ebi,get,property,descriptors,i,get,name,equal,to,bi,get,property,descriptors,i,get,name
ExtendedBeanInfoTests -> @Test 	public void propertyDescriptorOrderIsEqual() throws IntrospectionException;1417048908;{@link BeanInfo#getPropertyDescriptors()} returns alphanumerically sorted._Test that {@link ExtendedBeanInfo#getPropertyDescriptors()} does the same.;@Test_	public void propertyDescriptorOrderIsEqual() throws IntrospectionException {_		BeanInfo bi = Introspector.getBeanInfo(TestBean.class)__		BeanInfo ebi = new ExtendedBeanInfo(bi)___		for (int i = 0_ i < bi.getPropertyDescriptors().length_ i++) {_			assertThat("element " + i + " in BeanInfo and ExtendedBeanInfo propertyDescriptor arrays do not match",_					ebi.getPropertyDescriptors()[i].getName(), equalTo(bi.getPropertyDescriptors()[i].getName()))__		}_	};link,bean,info,get,property,descriptors,returns,alphanumerically,sorted,test,that,link,extended,bean,info,get,property,descriptors,does,the,same;test,public,void,property,descriptor,order,is,equal,throws,introspection,exception,bean,info,bi,introspector,get,bean,info,test,bean,class,bean,info,ebi,new,extended,bean,info,bi,for,int,i,0,i,bi,get,property,descriptors,length,i,assert,that,element,i,in,bean,info,and,extended,bean,info,property,descriptor,arrays,do,not,match,ebi,get,property,descriptors,i,get,name,equal,to,bi,get,property,descriptors,i,get,name
ExtendedBeanInfoTests -> @Test 	public void propertyDescriptorOrderIsEqual() throws IntrospectionException;1420208329;{@link BeanInfo#getPropertyDescriptors()} returns alphanumerically sorted._Test that {@link ExtendedBeanInfo#getPropertyDescriptors()} does the same.;@Test_	public void propertyDescriptorOrderIsEqual() throws IntrospectionException {_		BeanInfo bi = Introspector.getBeanInfo(TestBean.class)__		BeanInfo ebi = new ExtendedBeanInfo(bi)___		for (int i = 0_ i < bi.getPropertyDescriptors().length_ i++) {_			assertThat("element " + i + " in BeanInfo and ExtendedBeanInfo propertyDescriptor arrays do not match",_					ebi.getPropertyDescriptors()[i].getName(), equalTo(bi.getPropertyDescriptors()[i].getName()))__		}_	};link,bean,info,get,property,descriptors,returns,alphanumerically,sorted,test,that,link,extended,bean,info,get,property,descriptors,does,the,same;test,public,void,property,descriptor,order,is,equal,throws,introspection,exception,bean,info,bi,introspector,get,bean,info,test,bean,class,bean,info,ebi,new,extended,bean,info,bi,for,int,i,0,i,bi,get,property,descriptors,length,i,assert,that,element,i,in,bean,info,and,extended,bean,info,property,descriptor,arrays,do,not,match,ebi,get,property,descriptors,i,get,name,equal,to,bi,get,property,descriptors,i,get,name
ExtendedBeanInfoTests -> @Test 	public void propertyDescriptorOrderIsEqual() throws IntrospectionException;1420210924;{@link BeanInfo#getPropertyDescriptors()} returns alphanumerically sorted._Test that {@link ExtendedBeanInfo#getPropertyDescriptors()} does the same.;@Test_	public void propertyDescriptorOrderIsEqual() throws IntrospectionException {_		BeanInfo bi = Introspector.getBeanInfo(TestBean.class)__		BeanInfo ebi = new ExtendedBeanInfo(bi)___		for (int i = 0_ i < bi.getPropertyDescriptors().length_ i++) {_			assertThat("element " + i + " in BeanInfo and ExtendedBeanInfo propertyDescriptor arrays do not match",_					ebi.getPropertyDescriptors()[i].getName(), equalTo(bi.getPropertyDescriptors()[i].getName()))__		}_	};link,bean,info,get,property,descriptors,returns,alphanumerically,sorted,test,that,link,extended,bean,info,get,property,descriptors,does,the,same;test,public,void,property,descriptor,order,is,equal,throws,introspection,exception,bean,info,bi,introspector,get,bean,info,test,bean,class,bean,info,ebi,new,extended,bean,info,bi,for,int,i,0,i,bi,get,property,descriptors,length,i,assert,that,element,i,in,bean,info,and,extended,bean,info,property,descriptor,arrays,do,not,match,ebi,get,property,descriptors,i,get,name,equal,to,bi,get,property,descriptors,i,get,name
ExtendedBeanInfoTests -> @Test 	public void propertyDescriptorOrderIsEqual() throws IntrospectionException;1439397756;{@link BeanInfo#getPropertyDescriptors()} returns alphanumerically sorted._Test that {@link ExtendedBeanInfo#getPropertyDescriptors()} does the same.;@Test_	public void propertyDescriptorOrderIsEqual() throws IntrospectionException {_		BeanInfo bi = Introspector.getBeanInfo(TestBean.class)__		BeanInfo ebi = new ExtendedBeanInfo(bi)___		for (int i = 0_ i < bi.getPropertyDescriptors().length_ i++) {_			assertThat("element " + i + " in BeanInfo and ExtendedBeanInfo propertyDescriptor arrays do not match",_					ebi.getPropertyDescriptors()[i].getName(), equalTo(bi.getPropertyDescriptors()[i].getName()))__		}_	};link,bean,info,get,property,descriptors,returns,alphanumerically,sorted,test,that,link,extended,bean,info,get,property,descriptors,does,the,same;test,public,void,property,descriptor,order,is,equal,throws,introspection,exception,bean,info,bi,introspector,get,bean,info,test,bean,class,bean,info,ebi,new,extended,bean,info,bi,for,int,i,0,i,bi,get,property,descriptors,length,i,assert,that,element,i,in,bean,info,and,extended,bean,info,property,descriptor,arrays,do,not,match,ebi,get,property,descriptors,i,get,name,equal,to,bi,get,property,descriptors,i,get,name
ExtendedBeanInfoTests -> @Test 	public void cornerSpr10111() throws Exception;1355966262;Prior to SPR-10111 (a follow-up fix for SPR-9702), this method would throw an_IntrospectionException regarding a "type mismatch between indexed and non-indexed_methods" intermittently (approximately one out of every four times) under JDK 7_due to non-deterministic results from {@link Class#getDeclaredMethods()}._See http://bugs.sun.com/view_bug.do?bug_id=7023180_@see #cornerSpr9702();@Test_	public void cornerSpr10111() throws Exception {_		new ExtendedBeanInfo(Introspector.getBeanInfo(BigDecimal.class))__	};prior,to,spr,10111,a,follow,up,fix,for,spr,9702,this,method,would,throw,an,introspection,exception,regarding,a,type,mismatch,between,indexed,and,non,indexed,methods,intermittently,approximately,one,out,of,every,four,times,under,jdk,7,due,to,non,deterministic,results,from,link,class,get,declared,methods,see,http,bugs,sun,com,do,7023180,see,corner,spr9702;test,public,void,corner,spr10111,throws,exception,new,extended,bean,info,introspector,get,bean,info,big,decimal,class
ExtendedBeanInfoTests -> @Test 	public void cornerSpr10111() throws Exception;1356735495;Prior to SPR-10111 (a follow-up fix for SPR-9702), this method would throw an_IntrospectionException regarding a "type mismatch between indexed and non-indexed_methods" intermittently (approximately one out of every four times) under JDK 7_due to non-deterministic results from {@link Class#getDeclaredMethods()}._See http://bugs.sun.com/view_bug.do?bug_id=7023180_@see #cornerSpr9702();@Test_	public void cornerSpr10111() throws Exception {_		new ExtendedBeanInfo(Introspector.getBeanInfo(BigDecimal.class))__	};prior,to,spr,10111,a,follow,up,fix,for,spr,9702,this,method,would,throw,an,introspection,exception,regarding,a,type,mismatch,between,indexed,and,non,indexed,methods,intermittently,approximately,one,out,of,every,four,times,under,jdk,7,due,to,non,deterministic,results,from,link,class,get,declared,methods,see,http,bugs,sun,com,do,7023180,see,corner,spr9702;test,public,void,corner,spr10111,throws,exception,new,extended,bean,info,introspector,get,bean,info,big,decimal,class
ExtendedBeanInfoTests -> @Test 	public void cornerSpr10111() throws Exception;1357119417;Prior to SPR-10111 (a follow-up fix for SPR-9702), this method would throw an_IntrospectionException regarding a "type mismatch between indexed and non-indexed_methods" intermittently (approximately one out of every four times) under JDK 7_due to non-deterministic results from {@link Class#getDeclaredMethods()}._See http://bugs.sun.com/view_bug.do?bug_id=7023180_@see #cornerSpr9702();@Test_	public void cornerSpr10111() throws Exception {_		new ExtendedBeanInfo(Introspector.getBeanInfo(BigDecimal.class))__	};prior,to,spr,10111,a,follow,up,fix,for,spr,9702,this,method,would,throw,an,introspection,exception,regarding,a,type,mismatch,between,indexed,and,non,indexed,methods,intermittently,approximately,one,out,of,every,four,times,under,jdk,7,due,to,non,deterministic,results,from,link,class,get,declared,methods,see,http,bugs,sun,com,do,7023180,see,corner,spr9702;test,public,void,corner,spr10111,throws,exception,new,extended,bean,info,introspector,get,bean,info,big,decimal,class
ExtendedBeanInfoTests -> @Test 	public void cornerSpr10111() throws Exception;1362408075;Prior to SPR-10111 (a follow-up fix for SPR-9702), this method would throw an_IntrospectionException regarding a "type mismatch between indexed and non-indexed_methods" intermittently (approximately one out of every four times) under JDK 7_due to non-deterministic results from {@link Class#getDeclaredMethods()}._See http://bugs.sun.com/view_bug.do?bug_id=7023180_@see #cornerSpr9702();@Test_	public void cornerSpr10111() throws Exception {_		new ExtendedBeanInfo(Introspector.getBeanInfo(BigDecimal.class))__	};prior,to,spr,10111,a,follow,up,fix,for,spr,9702,this,method,would,throw,an,introspection,exception,regarding,a,type,mismatch,between,indexed,and,non,indexed,methods,intermittently,approximately,one,out,of,every,four,times,under,jdk,7,due,to,non,deterministic,results,from,link,class,get,declared,methods,see,http,bugs,sun,com,do,7023180,see,corner,spr9702;test,public,void,corner,spr10111,throws,exception,new,extended,bean,info,introspector,get,bean,info,big,decimal,class
ExtendedBeanInfoTests -> @Test 	public void cornerSpr10111() throws Exception;1368482696;Prior to SPR-10111 (a follow-up fix for SPR-9702), this method would throw an_IntrospectionException regarding a "type mismatch between indexed and non-indexed_methods" intermittently (approximately one out of every four times) under JDK 7_due to non-deterministic results from {@link Class#getDeclaredMethods()}._See http://bugs.sun.com/view_bug.do?bug_id=7023180_@see #cornerSpr9702();@Test_	public void cornerSpr10111() throws Exception {_		new ExtendedBeanInfo(Introspector.getBeanInfo(BigDecimal.class))__	};prior,to,spr,10111,a,follow,up,fix,for,spr,9702,this,method,would,throw,an,introspection,exception,regarding,a,type,mismatch,between,indexed,and,non,indexed,methods,intermittently,approximately,one,out,of,every,four,times,under,jdk,7,due,to,non,deterministic,results,from,link,class,get,declared,methods,see,http,bugs,sun,com,do,7023180,see,corner,spr9702;test,public,void,corner,spr10111,throws,exception,new,extended,bean,info,introspector,get,bean,info,big,decimal,class
ExtendedBeanInfoTests -> @Test 	public void cornerSpr10111() throws Exception;1375195689;Prior to SPR-10111 (a follow-up fix for SPR-9702), this method would throw an_IntrospectionException regarding a "type mismatch between indexed and non-indexed_methods" intermittently (approximately one out of every four times) under JDK 7_due to non-deterministic results from {@link Class#getDeclaredMethods()}._See http://bugs.sun.com/view_bug.do?bug_id=7023180_@see #cornerSpr9702();@Test_	public void cornerSpr10111() throws Exception {_		new ExtendedBeanInfo(Introspector.getBeanInfo(BigDecimal.class))__	};prior,to,spr,10111,a,follow,up,fix,for,spr,9702,this,method,would,throw,an,introspection,exception,regarding,a,type,mismatch,between,indexed,and,non,indexed,methods,intermittently,approximately,one,out,of,every,four,times,under,jdk,7,due,to,non,deterministic,results,from,link,class,get,declared,methods,see,http,bugs,sun,com,do,7023180,see,corner,spr9702;test,public,void,corner,spr10111,throws,exception,new,extended,bean,info,introspector,get,bean,info,big,decimal,class
ExtendedBeanInfoTests -> @Test 	public void cornerSpr10111() throws Exception;1386711257;Prior to SPR-10111 (a follow-up fix for SPR-9702), this method would throw an_IntrospectionException regarding a "type mismatch between indexed and non-indexed_methods" intermittently (approximately one out of every four times) under JDK 7_due to non-deterministic results from {@link Class#getDeclaredMethods()}._See http://bugs.sun.com/view_bug.do?bug_id=7023180_@see #cornerSpr9702();@Test_	public void cornerSpr10111() throws Exception {_		new ExtendedBeanInfo(Introspector.getBeanInfo(BigDecimal.class))__	};prior,to,spr,10111,a,follow,up,fix,for,spr,9702,this,method,would,throw,an,introspection,exception,regarding,a,type,mismatch,between,indexed,and,non,indexed,methods,intermittently,approximately,one,out,of,every,four,times,under,jdk,7,due,to,non,deterministic,results,from,link,class,get,declared,methods,see,http,bugs,sun,com,do,7023180,see,corner,spr9702;test,public,void,corner,spr10111,throws,exception,new,extended,bean,info,introspector,get,bean,info,big,decimal,class
ExtendedBeanInfoTests -> @Test 	public void cornerSpr10111() throws Exception;1410903610;Prior to SPR-10111 (a follow-up fix for SPR-9702), this method would throw an_IntrospectionException regarding a "type mismatch between indexed and non-indexed_methods" intermittently (approximately one out of every four times) under JDK 7_due to non-deterministic results from {@link Class#getDeclaredMethods()}._See http://bugs.sun.com/view_bug.do?bug_id=7023180_@see #cornerSpr9702();@Test_	public void cornerSpr10111() throws Exception {_		new ExtendedBeanInfo(Introspector.getBeanInfo(BigDecimal.class))__	};prior,to,spr,10111,a,follow,up,fix,for,spr,9702,this,method,would,throw,an,introspection,exception,regarding,a,type,mismatch,between,indexed,and,non,indexed,methods,intermittently,approximately,one,out,of,every,four,times,under,jdk,7,due,to,non,deterministic,results,from,link,class,get,declared,methods,see,http,bugs,sun,com,do,7023180,see,corner,spr9702;test,public,void,corner,spr10111,throws,exception,new,extended,bean,info,introspector,get,bean,info,big,decimal,class
ExtendedBeanInfoTests -> @Test 	public void cornerSpr10111() throws Exception;1417048908;Prior to SPR-10111 (a follow-up fix for SPR-9702), this method would throw an_IntrospectionException regarding a "type mismatch between indexed and non-indexed_methods" intermittently (approximately one out of every four times) under JDK 7_due to non-deterministic results from {@link Class#getDeclaredMethods()}._See http://bugs.sun.com/view_bug.do?bug_id=7023180_@see #cornerSpr9702();@Test_	public void cornerSpr10111() throws Exception {_		new ExtendedBeanInfo(Introspector.getBeanInfo(BigDecimal.class))__	};prior,to,spr,10111,a,follow,up,fix,for,spr,9702,this,method,would,throw,an,introspection,exception,regarding,a,type,mismatch,between,indexed,and,non,indexed,methods,intermittently,approximately,one,out,of,every,four,times,under,jdk,7,due,to,non,deterministic,results,from,link,class,get,declared,methods,see,http,bugs,sun,com,do,7023180,see,corner,spr9702;test,public,void,corner,spr10111,throws,exception,new,extended,bean,info,introspector,get,bean,info,big,decimal,class
ExtendedBeanInfoTests -> @Test 	public void cornerSpr10111() throws Exception;1420208329;Prior to SPR-10111 (a follow-up fix for SPR-9702), this method would throw an_IntrospectionException regarding a "type mismatch between indexed and non-indexed_methods" intermittently (approximately one out of every four times) under JDK 7_due to non-deterministic results from {@link Class#getDeclaredMethods()}._See http://bugs.sun.com/view_bug.do?bug_id=7023180_@see #cornerSpr9702();@Test_	public void cornerSpr10111() throws Exception {_		new ExtendedBeanInfo(Introspector.getBeanInfo(BigDecimal.class))__	};prior,to,spr,10111,a,follow,up,fix,for,spr,9702,this,method,would,throw,an,introspection,exception,regarding,a,type,mismatch,between,indexed,and,non,indexed,methods,intermittently,approximately,one,out,of,every,four,times,under,jdk,7,due,to,non,deterministic,results,from,link,class,get,declared,methods,see,http,bugs,sun,com,do,7023180,see,corner,spr9702;test,public,void,corner,spr10111,throws,exception,new,extended,bean,info,introspector,get,bean,info,big,decimal,class
ExtendedBeanInfoTests -> @Test 	public void cornerSpr10111() throws Exception;1420210924;Prior to SPR-10111 (a follow-up fix for SPR-9702), this method would throw an_IntrospectionException regarding a "type mismatch between indexed and non-indexed_methods" intermittently (approximately one out of every four times) under JDK 7_due to non-deterministic results from {@link Class#getDeclaredMethods()}._See http://bugs.sun.com/view_bug.do?bug_id=7023180_@see #cornerSpr9702();@Test_	public void cornerSpr10111() throws Exception {_		new ExtendedBeanInfo(Introspector.getBeanInfo(BigDecimal.class))__	};prior,to,spr,10111,a,follow,up,fix,for,spr,9702,this,method,would,throw,an,introspection,exception,regarding,a,type,mismatch,between,indexed,and,non,indexed,methods,intermittently,approximately,one,out,of,every,four,times,under,jdk,7,due,to,non,deterministic,results,from,link,class,get,declared,methods,see,http,bugs,sun,com,do,7023180,see,corner,spr9702;test,public,void,corner,spr10111,throws,exception,new,extended,bean,info,introspector,get,bean,info,big,decimal,class
ExtendedBeanInfoTests -> @Test 	public void cornerSpr10111() throws Exception;1439397756;Prior to SPR-10111 (a follow-up fix for SPR-9702), this method would throw an_IntrospectionException regarding a "type mismatch between indexed and non-indexed_methods" intermittently (approximately one out of every four times) under JDK 7_due to non-deterministic results from {@link Class#getDeclaredMethods()}._See http://bugs.sun.com/view_bug.do?bug_id=7023180_@see #cornerSpr9702();@Test_	public void cornerSpr10111() throws Exception {_		new ExtendedBeanInfo(Introspector.getBeanInfo(BigDecimal.class))__	};prior,to,spr,10111,a,follow,up,fix,for,spr,9702,this,method,would,throw,an,introspection,exception,regarding,a,type,mismatch,between,indexed,and,non,indexed,methods,intermittently,approximately,one,out,of,every,four,times,under,jdk,7,due,to,non,deterministic,results,from,link,class,get,declared,methods,see,http,bugs,sun,com,do,7023180,see,corner,spr9702;test,public,void,corner,spr10111,throws,exception,new,extended,bean,info,introspector,get,bean,info,big,decimal,class
