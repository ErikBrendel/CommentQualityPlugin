commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Before public void setup() {     bf = new DefaultListableBeanFactory().     bf.registerResolvableDependency(BeanFactory.class, bf).     bpp = new AutowiredAnnotationBeanPostProcessor().     bpp.setBeanFactory(bf).     bf.addBeanPostProcessor(bpp).     bf.setAutowireCandidateResolver(new QualifierAnnotationAutowireCandidateResolver()). }
false;public;0;4;;@After public void close() {     bf.destroySingletons(). }
false;public;0;10;;@Test public void testIncompleteBeanDefinition() {     bf.registerBeanDefinition("testBean", new GenericBeanDefinition()).     try {         bf.getBean("testBean").     } catch (BeanCreationException ex) {         assertTrue(ex.getRootCause() instanceof IllegalStateException).     } }
false;public;0;16;;@Test public void testResourceInjection() {     RootBeanDefinition bd = new RootBeanDefinition(ResourceInjectionBean.class).     bd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE).     bf.registerBeanDefinition("annotatedBean", bd).     TestBean tb = new TestBean().     bf.registerSingleton("testBean", tb).     ResourceInjectionBean bean = (ResourceInjectionBean) bf.getBean("annotatedBean").     assertSame(tb, bean.getTestBean()).     assertSame(tb, bean.getTestBean2()).     bean = (ResourceInjectionBean) bf.getBean("annotatedBean").     assertSame(tb, bean.getTestBean()).     assertSame(tb, bean.getTestBean2()). }
false;public;0;26;;@Test public void testExtendedResourceInjection() {     RootBeanDefinition bd = new RootBeanDefinition(TypedExtendedResourceInjectionBean.class).     bd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE).     bf.registerBeanDefinition("annotatedBean", bd).     TestBean tb = new TestBean().     bf.registerSingleton("testBean", tb).     NestedTestBean ntb = new NestedTestBean().     bf.registerSingleton("nestedTestBean", ntb).     TypedExtendedResourceInjectionBean bean = (TypedExtendedResourceInjectionBean) bf.getBean("annotatedBean").     assertSame(tb, bean.getTestBean()).     assertSame(tb, bean.getTestBean2()).     assertSame(tb, bean.getTestBean3()).     assertSame(tb, bean.getTestBean4()).     assertSame(ntb, bean.getNestedTestBean()).     assertSame(bf, bean.getBeanFactory()).     bean = (TypedExtendedResourceInjectionBean) bf.getBean("annotatedBean").     assertSame(tb, bean.getTestBean()).     assertSame(tb, bean.getTestBean2()).     assertSame(tb, bean.getTestBean3()).     assertSame(tb, bean.getTestBean4()).     assertSame(ntb, bean.getNestedTestBean()).     assertSame(bf, bean.getBeanFactory()). }
false;public;0;19;;@Test public void testExtendedResourceInjectionWithOverriding() {     RootBeanDefinition annotatedBd = new RootBeanDefinition(TypedExtendedResourceInjectionBean.class).     TestBean tb2 = new TestBean().     annotatedBd.getPropertyValues().add("testBean2", tb2).     bf.registerBeanDefinition("annotatedBean", annotatedBd).     TestBean tb = new TestBean().     bf.registerSingleton("testBean", tb).     NestedTestBean ntb = new NestedTestBean().     bf.registerSingleton("nestedTestBean", ntb).     TypedExtendedResourceInjectionBean bean = (TypedExtendedResourceInjectionBean) bf.getBean("annotatedBean").     assertSame(tb, bean.getTestBean()).     assertSame(tb2, bean.getTestBean2()).     assertSame(tb, bean.getTestBean3()).     assertSame(tb, bean.getTestBean4()).     assertSame(ntb, bean.getNestedTestBean()).     assertSame(bf, bean.getBeanFactory()). }
false;public;0;20;;@Test @SuppressWarnings("deprecation") public void testExtendedResourceInjectionWithAtRequired() {     bf.addBeanPostProcessor(new RequiredAnnotationBeanPostProcessor()).     RootBeanDefinition bd = new RootBeanDefinition(TypedExtendedResourceInjectionBean.class).     bd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE).     bf.registerBeanDefinition("annotatedBean", bd).     TestBean tb = new TestBean().     bf.registerSingleton("testBean", tb).     NestedTestBean ntb = new NestedTestBean().     bf.registerSingleton("nestedTestBean", ntb).     TypedExtendedResourceInjectionBean bean = (TypedExtendedResourceInjectionBean) bf.getBean("annotatedBean").     assertSame(tb, bean.getTestBean()).     assertSame(tb, bean.getTestBean2()).     assertSame(tb, bean.getTestBean3()).     assertSame(tb, bean.getTestBean4()).     assertSame(ntb, bean.getNestedTestBean()).     assertSame(bf, bean.getBeanFactory()). }
false;public;0;26;;@Test public void testConstructorResourceInjection() {     RootBeanDefinition bd = new RootBeanDefinition(ConstructorResourceInjectionBean.class).     bd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE).     bf.registerBeanDefinition("annotatedBean", bd).     TestBean tb = new TestBean().     bf.registerSingleton("testBean", tb).     NestedTestBean ntb = new NestedTestBean().     bf.registerSingleton("nestedTestBean", ntb).     ConstructorResourceInjectionBean bean = (ConstructorResourceInjectionBean) bf.getBean("annotatedBean").     assertSame(tb, bean.getTestBean()).     assertSame(tb, bean.getTestBean2()).     assertSame(tb, bean.getTestBean3()).     assertSame(tb, bean.getTestBean4()).     assertSame(ntb, bean.getNestedTestBean()).     assertSame(bf, bean.getBeanFactory()).     bean = (ConstructorResourceInjectionBean) bf.getBean("annotatedBean").     assertSame(tb, bean.getTestBean()).     assertSame(tb, bean.getTestBean2()).     assertSame(tb, bean.getTestBean3()).     assertSame(tb, bean.getTestBean4()).     assertSame(ntb, bean.getNestedTestBean()).     assertSame(bf, bean.getBeanFactory()). }
false;public;0;18;;@Test public void testConstructorResourceInjectionWithMultipleCandidatesAsCollection() {     bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(ConstructorsCollectionResourceInjectionBean.class)).     TestBean tb = new TestBean().     bf.registerSingleton("testBean", tb).     NestedTestBean ntb1 = new NestedTestBean().     bf.registerSingleton("nestedTestBean1", ntb1).     NestedTestBean ntb2 = new NestedTestBean().     bf.registerSingleton("nestedTestBean2", ntb2).     ConstructorsCollectionResourceInjectionBean bean = (ConstructorsCollectionResourceInjectionBean) bf.getBean("annotatedBean").     assertNull(bean.getTestBean3()).     assertSame(tb, bean.getTestBean4()).     assertEquals(2, bean.getNestedTestBeans().size()).     assertSame(ntb1, bean.getNestedTestBeans().get(0)).     assertSame(ntb2, bean.getNestedTestBeans().get(1)). }
false;public;0;10;;@Test public void testConstructorResourceInjectionWithMultipleCandidatesAndFallback() {     bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(ConstructorsResourceInjectionBean.class)).     TestBean tb = new TestBean().     bf.registerSingleton("testBean", tb).     ConstructorsResourceInjectionBean bean = (ConstructorsResourceInjectionBean) bf.getBean("annotatedBean").     assertSame(tb, bean.getTestBean3()).     assertNull(bean.getTestBean4()). }
false;public;0;24;;@Test public void testConstructorInjectionWithMap() {     RootBeanDefinition bd = new RootBeanDefinition(MapConstructorInjectionBean.class).     bd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE).     bf.registerBeanDefinition("annotatedBean", bd).     TestBean tb1 = new TestBean().     TestBean tb2 = new TestBean().     bf.registerSingleton("testBean1", tb1).     bf.registerSingleton("testBean2", tb1).     MapConstructorInjectionBean bean = (MapConstructorInjectionBean) bf.getBean("annotatedBean").     assertEquals(2, bean.getTestBeanMap().size()).     assertTrue(bean.getTestBeanMap().keySet().contains("testBean1")).     assertTrue(bean.getTestBeanMap().keySet().contains("testBean2")).     assertTrue(bean.getTestBeanMap().values().contains(tb1)).     assertTrue(bean.getTestBeanMap().values().contains(tb2)).     bean = (MapConstructorInjectionBean) bf.getBean("annotatedBean").     assertEquals(2, bean.getTestBeanMap().size()).     assertTrue(bean.getTestBeanMap().keySet().contains("testBean1")).     assertTrue(bean.getTestBeanMap().keySet().contains("testBean2")).     assertTrue(bean.getTestBeanMap().values().contains(tb1)).     assertTrue(bean.getTestBeanMap().values().contains(tb2)). }
false;public;0;24;;@Test public void testFieldInjectionWithMap() {     RootBeanDefinition bd = new RootBeanDefinition(MapFieldInjectionBean.class).     bd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE).     bf.registerBeanDefinition("annotatedBean", bd).     TestBean tb1 = new TestBean().     TestBean tb2 = new TestBean().     bf.registerSingleton("testBean1", tb1).     bf.registerSingleton("testBean2", tb1).     MapFieldInjectionBean bean = (MapFieldInjectionBean) bf.getBean("annotatedBean").     assertEquals(2, bean.getTestBeanMap().size()).     assertTrue(bean.getTestBeanMap().keySet().contains("testBean1")).     assertTrue(bean.getTestBeanMap().keySet().contains("testBean2")).     assertTrue(bean.getTestBeanMap().values().contains(tb1)).     assertTrue(bean.getTestBeanMap().values().contains(tb2)).     bean = (MapFieldInjectionBean) bf.getBean("annotatedBean").     assertEquals(2, bean.getTestBeanMap().size()).     assertTrue(bean.getTestBeanMap().keySet().contains("testBean1")).     assertTrue(bean.getTestBeanMap().keySet().contains("testBean2")).     assertTrue(bean.getTestBeanMap().values().contains(tb1)).     assertTrue(bean.getTestBeanMap().values().contains(tb2)). }
false;public;0;20;;@Test public void testMethodInjectionWithMap() {     RootBeanDefinition bd = new RootBeanDefinition(MapMethodInjectionBean.class).     bd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE).     bf.registerBeanDefinition("annotatedBean", bd).     TestBean tb = new TestBean().     bf.registerSingleton("testBean", tb).     MapMethodInjectionBean bean = (MapMethodInjectionBean) bf.getBean("annotatedBean").     assertEquals(1, bean.getTestBeanMap().size()).     assertTrue(bean.getTestBeanMap().keySet().contains("testBean")).     assertTrue(bean.getTestBeanMap().values().contains(tb)).     assertSame(tb, bean.getTestBean()).     bean = (MapMethodInjectionBean) bf.getBean("annotatedBean").     assertEquals(1, bean.getTestBeanMap().size()).     assertTrue(bean.getTestBeanMap().keySet().contains("testBean")).     assertTrue(bean.getTestBeanMap().values().contains(tb)).     assertSame(tb, bean.getTestBean()). }
false;public;0;14;;@Test public void testMethodInjectionWithMapAndMultipleMatches() {     bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(MapMethodInjectionBean.class)).     bf.registerBeanDefinition("testBean1", new RootBeanDefinition(TestBean.class)).     bf.registerBeanDefinition("testBean2", new RootBeanDefinition(TestBean.class)).     try {         bf.getBean("annotatedBean").         fail("should have failed, more than one bean of type").     } catch (BeanCreationException e) {     // expected     } }
false;public;0;15;;@Test public void testMethodInjectionWithMapAndMultipleMatchesButOnlyOneAutowireCandidate() {     bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(MapMethodInjectionBean.class)).     bf.registerBeanDefinition("testBean1", new RootBeanDefinition(TestBean.class)).     RootBeanDefinition rbd2 = new RootBeanDefinition(TestBean.class).     rbd2.setAutowireCandidate(false).     bf.registerBeanDefinition("testBean2", rbd2).     MapMethodInjectionBean bean = (MapMethodInjectionBean) bf.getBean("annotatedBean").     TestBean tb = (TestBean) bf.getBean("testBean1").     assertEquals(1, bean.getTestBeanMap().size()).     assertTrue(bean.getTestBeanMap().keySet().contains("testBean1")).     assertTrue(bean.getTestBeanMap().values().contains(tb)).     assertSame(tb, bean.getTestBean()). }
false;public;0;11;;@Test public void testObjectFactoryInjection() {     bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(ObjectFactoryQualifierFieldInjectionBean.class)).     RootBeanDefinition bd = new RootBeanDefinition(TestBean.class).     bd.addQualifier(new AutowireCandidateQualifier(Qualifier.class, "testBean")).     bf.registerBeanDefinition("testBean", bd).     bf.registerBeanDefinition("testBean2", new RootBeanDefinition(TestBean.class)).     ObjectFactoryQualifierFieldInjectionBean bean = (ObjectFactoryQualifierFieldInjectionBean) bf.getBean("annotatedBean").     assertSame(bf.getBean("testBean"), bean.getTestBean()). }
false;public;0;10;;@Test public void testObjectFactoryQualifierInjection() {     bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(ObjectFactoryQualifierFieldInjectionBean.class)).     RootBeanDefinition bd = new RootBeanDefinition(TestBean.class).     bd.addQualifier(new AutowireCandidateQualifier(Qualifier.class, "testBean")).     bf.registerBeanDefinition("testBean", bd).     ObjectFactoryQualifierFieldInjectionBean bean = (ObjectFactoryQualifierFieldInjectionBean) bf.getBean("annotatedBean").     assertSame(bf.getBean("testBean"), bean.getTestBean()). }
false;public;0;16;;@Test public void testObjectFactoryFieldInjectionIntoPrototypeBean() {     RootBeanDefinition annotatedBeanDefinition = new RootBeanDefinition(ObjectFactoryQualifierFieldInjectionBean.class).     annotatedBeanDefinition.setScope(BeanDefinition.SCOPE_PROTOTYPE).     bf.registerBeanDefinition("annotatedBean", annotatedBeanDefinition).     RootBeanDefinition bd = new RootBeanDefinition(TestBean.class).     bd.addQualifier(new AutowireCandidateQualifier(Qualifier.class, "testBean")).     bf.registerBeanDefinition("testBean", bd).     bf.registerBeanDefinition("testBean2", new RootBeanDefinition(TestBean.class)).     ObjectFactoryQualifierFieldInjectionBean bean = (ObjectFactoryQualifierFieldInjectionBean) bf.getBean("annotatedBean").     assertSame(bf.getBean("testBean"), bean.getTestBean()).     ObjectFactoryQualifierFieldInjectionBean anotherBean = (ObjectFactoryQualifierFieldInjectionBean) bf.getBean("annotatedBean").     assertNotSame(anotherBean, bean).     assertSame(bf.getBean("testBean"), bean.getTestBean()). }
false;public;0;16;;@Test public void testObjectFactoryMethodInjectionIntoPrototypeBean() {     RootBeanDefinition annotatedBeanDefinition = new RootBeanDefinition(ObjectFactoryQualifierMethodInjectionBean.class).     annotatedBeanDefinition.setScope(BeanDefinition.SCOPE_PROTOTYPE).     bf.registerBeanDefinition("annotatedBean", annotatedBeanDefinition).     RootBeanDefinition bd = new RootBeanDefinition(TestBean.class).     bd.addQualifier(new AutowireCandidateQualifier(Qualifier.class, "testBean")).     bf.registerBeanDefinition("testBean", bd).     bf.registerBeanDefinition("testBean2", new RootBeanDefinition(TestBean.class)).     ObjectFactoryQualifierMethodInjectionBean bean = (ObjectFactoryQualifierMethodInjectionBean) bf.getBean("annotatedBean").     assertSame(bf.getBean("testBean"), bean.getTestBean()).     ObjectFactoryQualifierMethodInjectionBean anotherBean = (ObjectFactoryQualifierMethodInjectionBean) bf.getBean("annotatedBean").     assertNotSame(anotherBean, bean).     assertSame(bf.getBean("testBean"), bean.getTestBean()). }
false;public;0;11;;@Test public void testObjectFactoryWithBeanField() throws Exception {     bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(ObjectFactoryFieldInjectionBean.class)).     bf.registerBeanDefinition("testBean", new RootBeanDefinition(TestBean.class)).     bf.setSerializationId("test").     ObjectFactoryFieldInjectionBean bean = (ObjectFactoryFieldInjectionBean) bf.getBean("annotatedBean").     assertSame(bf.getBean("testBean"), bean.getTestBean()).     bean = (ObjectFactoryFieldInjectionBean) SerializationTestUtils.serializeAndDeserialize(bean).     assertSame(bf.getBean("testBean"), bean.getTestBean()). }
false;public;0;11;;@Test public void testObjectFactoryWithBeanMethod() throws Exception {     bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(ObjectFactoryMethodInjectionBean.class)).     bf.registerBeanDefinition("testBean", new RootBeanDefinition(TestBean.class)).     bf.setSerializationId("test").     ObjectFactoryMethodInjectionBean bean = (ObjectFactoryMethodInjectionBean) bf.getBean("annotatedBean").     assertSame(bf.getBean("testBean"), bean.getTestBean()).     bean = (ObjectFactoryMethodInjectionBean) SerializationTestUtils.serializeAndDeserialize(bean).     assertSame(bf.getBean("testBean"), bean.getTestBean()). }
false;public;0;11;;@Test public void testObjectFactoryWithTypedListField() throws Exception {     bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(ObjectFactoryListFieldInjectionBean.class)).     bf.registerBeanDefinition("testBean", new RootBeanDefinition(TestBean.class)).     bf.setSerializationId("test").     ObjectFactoryListFieldInjectionBean bean = (ObjectFactoryListFieldInjectionBean) bf.getBean("annotatedBean").     assertSame(bf.getBean("testBean"), bean.getTestBean()).     bean = (ObjectFactoryListFieldInjectionBean) SerializationTestUtils.serializeAndDeserialize(bean).     assertSame(bf.getBean("testBean"), bean.getTestBean()). }
false;public;0;11;;@Test public void testObjectFactoryWithTypedListMethod() throws Exception {     bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(ObjectFactoryListMethodInjectionBean.class)).     bf.registerBeanDefinition("testBean", new RootBeanDefinition(TestBean.class)).     bf.setSerializationId("test").     ObjectFactoryListMethodInjectionBean bean = (ObjectFactoryListMethodInjectionBean) bf.getBean("annotatedBean").     assertSame(bf.getBean("testBean"), bean.getTestBean()).     bean = (ObjectFactoryListMethodInjectionBean) SerializationTestUtils.serializeAndDeserialize(bean).     assertSame(bf.getBean("testBean"), bean.getTestBean()). }
false;public;0;11;;@Test public void testObjectFactoryWithTypedMapField() throws Exception {     bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(ObjectFactoryMapFieldInjectionBean.class)).     bf.registerBeanDefinition("testBean", new RootBeanDefinition(TestBean.class)).     bf.setSerializationId("test").     ObjectFactoryMapFieldInjectionBean bean = (ObjectFactoryMapFieldInjectionBean) bf.getBean("annotatedBean").     assertSame(bf.getBean("testBean"), bean.getTestBean()).     bean = (ObjectFactoryMapFieldInjectionBean) SerializationTestUtils.serializeAndDeserialize(bean).     assertSame(bf.getBean("testBean"), bean.getTestBean()). }
false;public;0;11;;@Test public void testObjectFactoryWithTypedMapMethod() throws Exception {     bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(ObjectFactoryMapMethodInjectionBean.class)).     bf.registerBeanDefinition("testBean", new RootBeanDefinition(TestBean.class)).     bf.setSerializationId("test").     ObjectFactoryMapMethodInjectionBean bean = (ObjectFactoryMapMethodInjectionBean) bf.getBean("annotatedBean").     assertSame(bf.getBean("testBean"), bean.getTestBean()).     bean = (ObjectFactoryMapMethodInjectionBean) SerializationTestUtils.serializeAndDeserialize(bean).     assertSame(bf.getBean("testBean"), bean.getTestBean()). }
true;public;0;13;/**  * Verifies that a dependency on a {@link org.springframework.beans.factory.FactoryBean}  * can be autowired via {@link org.springframework.beans.factory.annotation.Autowired @Inject},  * specifically addressing SPR-4040.  */ ;/**  * Verifies that a dependency on a {@link org.springframework.beans.factory.FactoryBean}  * can be autowired via {@link org.springframework.beans.factory.annotation.Autowired @Inject},  * specifically addressing SPR-4040.  */ @Test public void testBeanAutowiredWithFactoryBean() {     bf.registerBeanDefinition("factoryBeanDependentBean", new RootBeanDefinition(FactoryBeanDependentBean.class)).     bf.registerSingleton("stringFactoryBean", new StringFactoryBean()).     final StringFactoryBean factoryBean = (StringFactoryBean) bf.getBean("&stringFactoryBean").     final FactoryBeanDependentBean bean = (FactoryBeanDependentBean) bf.getBean("factoryBeanDependentBean").     assertNotNull("The singleton StringFactoryBean should have been registered.", factoryBean).     assertNotNull("The factoryBeanDependentBean should have been registered.", bean).     assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the StringFactoryBean.", factoryBean, bean.getFactoryBean()). }
false;public;0;8;;@Test public void testNullableFieldInjectionWithBeanAvailable() {     bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(NullableFieldInjectionBean.class)).     bf.registerBeanDefinition("testBean", new RootBeanDefinition(TestBean.class)).     NullableFieldInjectionBean bean = (NullableFieldInjectionBean) bf.getBean("annotatedBean").     assertSame(bf.getBean("testBean"), bean.getTestBean()). }
false;public;0;7;;@Test public void testNullableFieldInjectionWithBeanNotAvailable() {     bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(NullableFieldInjectionBean.class)).     NullableFieldInjectionBean bean = (NullableFieldInjectionBean) bf.getBean("annotatedBean").     assertNull(bean.getTestBean()). }
false;public;0;8;;@Test public void testNullableMethodInjectionWithBeanAvailable() {     bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(NullableMethodInjectionBean.class)).     bf.registerBeanDefinition("testBean", new RootBeanDefinition(TestBean.class)).     NullableMethodInjectionBean bean = (NullableMethodInjectionBean) bf.getBean("annotatedBean").     assertSame(bf.getBean("testBean"), bean.getTestBean()). }
false;public;0;7;;@Test public void testNullableMethodInjectionWithBeanNotAvailable() {     bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(NullableMethodInjectionBean.class)).     NullableMethodInjectionBean bean = (NullableMethodInjectionBean) bf.getBean("annotatedBean").     assertNull(bean.getTestBean()). }
false;public;0;9;;@Test public void testOptionalFieldInjectionWithBeanAvailable() {     bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(OptionalFieldInjectionBean.class)).     bf.registerBeanDefinition("testBean", new RootBeanDefinition(TestBean.class)).     OptionalFieldInjectionBean bean = (OptionalFieldInjectionBean) bf.getBean("annotatedBean").     assertTrue(bean.getTestBean().isPresent()).     assertSame(bf.getBean("testBean"), bean.getTestBean().get()). }
false;public;0;7;;@Test public void testOptionalFieldInjectionWithBeanNotAvailable() {     bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(OptionalFieldInjectionBean.class)).     OptionalFieldInjectionBean bean = (OptionalFieldInjectionBean) bf.getBean("annotatedBean").     assertFalse(bean.getTestBean().isPresent()). }
false;public;0;9;;@Test public void testOptionalMethodInjectionWithBeanAvailable() {     bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(OptionalMethodInjectionBean.class)).     bf.registerBeanDefinition("testBean", new RootBeanDefinition(TestBean.class)).     OptionalMethodInjectionBean bean = (OptionalMethodInjectionBean) bf.getBean("annotatedBean").     assertTrue(bean.getTestBean().isPresent()).     assertSame(bf.getBean("testBean"), bean.getTestBean().get()). }
false;public;0;7;;@Test public void testOptionalMethodInjectionWithBeanNotAvailable() {     bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(OptionalMethodInjectionBean.class)).     OptionalMethodInjectionBean bean = (OptionalMethodInjectionBean) bf.getBean("annotatedBean").     assertFalse(bean.getTestBean().isPresent()). }
false;public;0;9;;@Test public void testOptionalListFieldInjectionWithBeanAvailable() {     bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(OptionalListFieldInjectionBean.class)).     bf.registerBeanDefinition("testBean", new RootBeanDefinition(TestBean.class)).     OptionalListFieldInjectionBean bean = (OptionalListFieldInjectionBean) bf.getBean("annotatedBean").     assertTrue(bean.getTestBean().isPresent()).     assertSame(bf.getBean("testBean"), bean.getTestBean().get().get(0)). }
false;public;0;7;;@Test public void testOptionalListFieldInjectionWithBeanNotAvailable() {     bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(OptionalListFieldInjectionBean.class)).     OptionalListFieldInjectionBean bean = (OptionalListFieldInjectionBean) bf.getBean("annotatedBean").     assertFalse(bean.getTestBean().isPresent()). }
false;public;0;9;;@Test public void testOptionalListMethodInjectionWithBeanAvailable() {     bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(OptionalListMethodInjectionBean.class)).     bf.registerBeanDefinition("testBean", new RootBeanDefinition(TestBean.class)).     OptionalListMethodInjectionBean bean = (OptionalListMethodInjectionBean) bf.getBean("annotatedBean").     assertTrue(bean.getTestBean().isPresent()).     assertSame(bf.getBean("testBean"), bean.getTestBean().get().get(0)). }
false;public;0;7;;@Test public void testOptionalListMethodInjectionWithBeanNotAvailable() {     bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(OptionalListMethodInjectionBean.class)).     OptionalListMethodInjectionBean bean = (OptionalListMethodInjectionBean) bf.getBean("annotatedBean").     assertFalse(bean.getTestBean().isPresent()). }
false;public;0;9;;@Test public void testProviderOfOptionalFieldInjectionWithBeanAvailable() {     bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(ProviderOfOptionalFieldInjectionBean.class)).     bf.registerBeanDefinition("testBean", new RootBeanDefinition(TestBean.class)).     ProviderOfOptionalFieldInjectionBean bean = (ProviderOfOptionalFieldInjectionBean) bf.getBean("annotatedBean").     assertTrue(bean.getTestBean().isPresent()).     assertSame(bf.getBean("testBean"), bean.getTestBean().get()). }
false;public;0;7;;@Test public void testProviderOfOptionalFieldInjectionWithBeanNotAvailable() {     bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(ProviderOfOptionalFieldInjectionBean.class)).     ProviderOfOptionalFieldInjectionBean bean = (ProviderOfOptionalFieldInjectionBean) bf.getBean("annotatedBean").     assertFalse(bean.getTestBean().isPresent()). }
false;public;0;9;;@Test public void testProviderOfOptionalMethodInjectionWithBeanAvailable() {     bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(ProviderOfOptionalMethodInjectionBean.class)).     bf.registerBeanDefinition("testBean", new RootBeanDefinition(TestBean.class)).     ProviderOfOptionalMethodInjectionBean bean = (ProviderOfOptionalMethodInjectionBean) bf.getBean("annotatedBean").     assertTrue(bean.getTestBean().isPresent()).     assertSame(bf.getBean("testBean"), bean.getTestBean().get()). }
false;public;0;7;;@Test public void testProviderOfOptionalMethodInjectionWithBeanNotAvailable() {     bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(ProviderOfOptionalMethodInjectionBean.class)).     ProviderOfOptionalMethodInjectionBean bean = (ProviderOfOptionalMethodInjectionBean) bf.getBean("annotatedBean").     assertFalse(bean.getTestBean().isPresent()). }
false;public;0;6;;@Test public void testAnnotatedDefaultConstructor() {     bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(AnnotatedDefaultConstructorBean.class)).     assertNotNull(bf.getBean("annotatedBean")). }
false;public;1;7;;@Inject public void setTestBean2(TestBean testBean2) {     if (this.testBean2 != null) {         throw new IllegalStateException("Already called").     }     this.testBean2 = testBean2. }
false;public;0;3;;public TestBean getTestBean() {     return this.testBean. }
false;public;0;3;;public TestBean getTestBean2() {     return this.testBean2. }
false;public;1;7;;@Override @Inject @Required @SuppressWarnings("deprecation") public void setTestBean2(TestBean testBean2) {     super.setTestBean2(testBean2). }
false;private;2;5;;@Inject private void inject(ITestBean testBean4, T nestedTestBean) {     this.testBean4 = testBean4.     this.nestedTestBean = nestedTestBean. }
false;protected;1;4;;@Inject protected void initBeanFactory(BeanFactory beanFactory) {     this.beanFactory = beanFactory. }
false;public;0;3;;public ITestBean getTestBean3() {     return this.testBean3. }
false;public;0;3;;public ITestBean getTestBean4() {     return this.testBean4. }
false;public;0;3;;public T getNestedTestBean() {     return this.nestedTestBean. }
false;public;0;3;;public BeanFactory getBeanFactory() {     return this.beanFactory. }
false;public;1;5;;@Override @Inject public void setTestBean2(TestBean testBean2) {     super.setTestBean2(testBean2). }
false;private;3;6;;@Inject private void inject(ITestBean testBean4, NestedTestBean[] nestedTestBeans, IndexedTestBean indexedTestBean) {     this.testBean4 = testBean4.     this.indexedTestBean = indexedTestBean.     this.nestedTestBeans = nestedTestBeans. }
false;public;0;3;;public ITestBean getTestBean3() {     return this.testBean3. }
false;public;0;3;;public ITestBean getTestBean4() {     return this.testBean4. }
false;public;0;3;;public IndexedTestBean getIndexedTestBean() {     return this.indexedTestBean. }
false;public;0;3;;public NestedTestBean[] getNestedTestBeans() {     return this.nestedTestBeans. }
false;public;1;5;;@Override @Inject public void setTestBean2(TestBean testBean2) {     super.setTestBean2(testBean2). }
false;private;3;6;;@Inject private void inject(ITestBean testBean4, List<NestedTestBean> nestedTestBeans, IndexedTestBean indexedTestBean) {     this.testBean4 = testBean4.     this.indexedTestBean = indexedTestBean.     this.nestedTestBeans = nestedTestBeans. }
false;public;1;4;;@Inject public void setNestedTestBeans(List<NestedTestBean> nestedTestBeans) {     this.nestedTestBeansSetter = nestedTestBeans. }
false;public;0;3;;public ITestBean getTestBean3() {     return this.testBean3. }
false;public;0;3;;public ITestBean getTestBean4() {     return this.testBean4. }
false;public;0;3;;public IndexedTestBean getIndexedTestBean() {     return this.indexedTestBean. }
false;public;0;3;;public List<NestedTestBean> getNestedTestBeans() {     return this.nestedTestBeans. }
false;public;1;5;;@Override @Inject public void setTestBean2(TestBean testBean2) {     super.setTestBean2(testBean2). }
false;public;0;3;;public ITestBean getTestBean3() {     return this.testBean3. }
false;public;0;3;;public ITestBean getTestBean4() {     return this.testBean4. }
false;public;0;3;;public NestedTestBean getNestedTestBean() {     return this.nestedTestBean. }
false;public;0;3;;public ConfigurableListableBeanFactory getBeanFactory() {     return this.beanFactory. }
false;public;0;3;;public ITestBean getTestBean3() {     return this.testBean3. }
false;public;0;3;;public ITestBean getTestBean4() {     return this.testBean4. }
false;public;0;3;;public NestedTestBean[] getNestedTestBeans() {     return this.nestedTestBeans. }
false;public;0;3;;public ITestBean getTestBean3() {     return this.testBean3. }
false;public;0;3;;public ITestBean getTestBean4() {     return this.testBean4. }
false;public;0;3;;public List<NestedTestBean> getNestedTestBeans() {     return this.nestedTestBeans. }
false;public;0;3;;public Map<String, TestBean> getTestBeanMap() {     return this.testBeanMap. }
false;public;0;3;;public Map<String, TestBean> getTestBeanMap() {     return this.testBeanMap. }
false;public;2;5;;@Inject public void setTestBeanMap(TestBean testBean, Map<String, TestBean> testBeanMap) {     this.testBean = testBean.     this.testBeanMap = testBeanMap. }
false;public;0;3;;public TestBean getTestBean() {     return this.testBean. }
false;public;0;3;;public Map<String, TestBean> getTestBeanMap() {     return this.testBeanMap. }
false;public;0;3;;public TestBean getTestBean() {     return this.testBeanFactory.get(). }
false;public;1;4;;@Inject public void setTestBeanFactory(Provider<TestBean> testBeanFactory) {     this.testBeanFactory = testBeanFactory. }
false;public;0;3;;public TestBean getTestBean() {     return this.testBeanFactory.get(). }
false;public;0;3;;public TestBean getTestBean() {     return (TestBean) this.testBeanFactory.get(). }
false;public;1;5;;@Inject @Named("testBean") public void setTestBeanFactory(Provider<?> testBeanFactory) {     this.testBeanFactory = testBeanFactory. }
false;public;0;3;;public TestBean getTestBean() {     return (TestBean) this.testBeanFactory.get(). }
false;public;1;3;;public void setTestBeanFactory(Provider<List<TestBean>> testBeanFactory) {     this.testBeanFactory = testBeanFactory. }
false;public;0;3;;public TestBean getTestBean() {     return this.testBeanFactory.get().get(0). }
false;public;1;4;;@Inject public void setTestBeanFactory(Provider<List<TestBean>> testBeanFactory) {     this.testBeanFactory = testBeanFactory. }
false;public;0;3;;public TestBean getTestBean() {     return this.testBeanFactory.get().get(0). }
false;public;1;3;;public void setTestBeanFactory(Provider<Map<String, TestBean>> testBeanFactory) {     this.testBeanFactory = testBeanFactory. }
false;public;0;3;;public TestBean getTestBean() {     return this.testBeanFactory.get().values().iterator().next(). }
false;public;1;4;;@Inject public void setTestBeanFactory(Provider<Map<String, TestBean>> testBeanFactory) {     this.testBeanFactory = testBeanFactory. }
false;public;0;3;;public TestBean getTestBean() {     return this.testBeanFactory.get().values().iterator().next(). }
false;public,final;0;3;;public final FactoryBean<?> getFactoryBean() {     return this.factoryBean. }
false;public;0;4;;@Override public String getObject() {     return "". }
false;public;0;4;;@Override public Class<String> getObjectType() {     return String.class. }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
false;public;0;3;;public TestBean getTestBean() {     return this.testBean. }
false;public;1;4;;@Inject public void setTestBean(@Nullable TestBean testBean) {     this.testBean = testBean. }
false;public;0;3;;public TestBean getTestBean() {     return this.testBean. }
false;public;0;3;;public Optional<TestBean> getTestBean() {     return this.testBean. }
false;public;1;4;;@Inject public void setTestBean(Optional<TestBean> testBean) {     this.testBean = testBean. }
false;public;0;3;;public Optional<TestBean> getTestBean() {     return this.testBean. }
false;public;0;3;;public Optional<List<TestBean>> getTestBean() {     return this.testBean. }
false;public;1;4;;@Inject public void setTestBean(Optional<List<TestBean>> testBean) {     this.testBean = testBean. }
false;public;0;3;;public Optional<List<TestBean>> getTestBean() {     return this.testBean. }
false;public;0;3;;public Optional<TestBean> getTestBean() {     return this.testBean.get(). }
false;public;1;4;;@Inject public void setTestBean(Provider<Optional<TestBean>> testBean) {     this.testBean = testBean. }
false;public;0;3;;public Optional<TestBean> getTestBean() {     return this.testBean.get(). }
