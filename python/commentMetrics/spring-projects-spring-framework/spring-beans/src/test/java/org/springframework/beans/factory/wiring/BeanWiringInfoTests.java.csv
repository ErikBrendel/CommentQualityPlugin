commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test(expected = IllegalArgumentException.class) public void ctorWithNullBeanName() throws Exception {     new BeanWiringInfo(null). }
false;public;0;4;;@Test(expected = IllegalArgumentException.class) public void ctorWithWhitespacedBeanName() throws Exception {     new BeanWiringInfo("   \t"). }
false;public;0;4;;@Test(expected = IllegalArgumentException.class) public void ctorWithEmptyBeanName() throws Exception {     new BeanWiringInfo(""). }
false;public;0;4;;@Test(expected = IllegalArgumentException.class) public void ctorWithNegativeIllegalAutowiringValue() throws Exception {     new BeanWiringInfo(-1, true). }
false;public;0;4;;@Test(expected = IllegalArgumentException.class) public void ctorWithPositiveOutOfRangeAutowiringValue() throws Exception {     new BeanWiringInfo(123871, true). }
false;public;0;5;;@Test public void usingAutowireCtorIndicatesAutowiring() throws Exception {     BeanWiringInfo info = new BeanWiringInfo(BeanWiringInfo.AUTOWIRE_BY_NAME, true).     assertTrue(info.indicatesAutowiring()). }
false;public;0;5;;@Test public void usingBeanNameCtorDoesNotIndicateAutowiring() throws Exception {     BeanWiringInfo info = new BeanWiringInfo("fooService").     assertFalse(info.indicatesAutowiring()). }
false;public;0;5;;@Test public void noDependencyCheckValueIsPreserved() throws Exception {     BeanWiringInfo info = new BeanWiringInfo(BeanWiringInfo.AUTOWIRE_BY_NAME, true).     assertTrue(info.getDependencyCheck()). }
false;public;0;5;;@Test public void dependencyCheckValueIsPreserved() throws Exception {     BeanWiringInfo info = new BeanWiringInfo(BeanWiringInfo.AUTOWIRE_BY_TYPE, false).     assertFalse(info.getDependencyCheck()). }
