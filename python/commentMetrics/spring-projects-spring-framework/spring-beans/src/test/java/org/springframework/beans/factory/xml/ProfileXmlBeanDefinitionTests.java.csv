commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test(expected = IllegalArgumentException.class) public void testProfileValidation() {     beanFactoryFor(PROD_ELIGIBLE_XML, NULL_ACTIVE). }
false;public;0;48;;@Test public void testProfilePermutations() {     assertThat(beanFactoryFor(PROD_ELIGIBLE_XML, NONE_ACTIVE), not(containsTargetBean())).     assertThat(beanFactoryFor(PROD_ELIGIBLE_XML, DEV_ACTIVE), not(containsTargetBean())).     assertThat(beanFactoryFor(PROD_ELIGIBLE_XML, PROD_ACTIVE), containsTargetBean()).     assertThat(beanFactoryFor(PROD_ELIGIBLE_XML, MULTI_ACTIVE), containsTargetBean()).     assertThat(beanFactoryFor(DEV_ELIGIBLE_XML, NONE_ACTIVE), not(containsTargetBean())).     assertThat(beanFactoryFor(DEV_ELIGIBLE_XML, DEV_ACTIVE), containsTargetBean()).     assertThat(beanFactoryFor(DEV_ELIGIBLE_XML, PROD_ACTIVE), not(containsTargetBean())).     assertThat(beanFactoryFor(DEV_ELIGIBLE_XML, MULTI_ACTIVE), containsTargetBean()).     assertThat(beanFactoryFor(NOT_DEV_ELIGIBLE_XML, NONE_ACTIVE), containsTargetBean()).     assertThat(beanFactoryFor(NOT_DEV_ELIGIBLE_XML, DEV_ACTIVE), not(containsTargetBean())).     assertThat(beanFactoryFor(NOT_DEV_ELIGIBLE_XML, PROD_ACTIVE), containsTargetBean()).     assertThat(beanFactoryFor(NOT_DEV_ELIGIBLE_XML, MULTI_ACTIVE), not(containsTargetBean())).     assertThat(beanFactoryFor(ALL_ELIGIBLE_XML, NONE_ACTIVE), containsTargetBean()).     assertThat(beanFactoryFor(ALL_ELIGIBLE_XML, DEV_ACTIVE), containsTargetBean()).     assertThat(beanFactoryFor(ALL_ELIGIBLE_XML, PROD_ACTIVE), containsTargetBean()).     assertThat(beanFactoryFor(ALL_ELIGIBLE_XML, MULTI_ACTIVE), containsTargetBean()).     assertThat(beanFactoryFor(MULTI_ELIGIBLE_XML, NONE_ACTIVE), not(containsTargetBean())).     assertThat(beanFactoryFor(MULTI_ELIGIBLE_XML, UNKNOWN_ACTIVE), not(containsTargetBean())).     assertThat(beanFactoryFor(MULTI_ELIGIBLE_XML, DEV_ACTIVE), containsTargetBean()).     assertThat(beanFactoryFor(MULTI_ELIGIBLE_XML, PROD_ACTIVE), containsTargetBean()).     assertThat(beanFactoryFor(MULTI_ELIGIBLE_XML, MULTI_ACTIVE), containsTargetBean()).     assertThat(beanFactoryFor(MULTI_NEGATED_XML, NONE_ACTIVE), containsTargetBean()).     assertThat(beanFactoryFor(MULTI_NEGATED_XML, UNKNOWN_ACTIVE), containsTargetBean()).     assertThat(beanFactoryFor(MULTI_NEGATED_XML, DEV_ACTIVE), containsTargetBean()).     assertThat(beanFactoryFor(MULTI_NEGATED_XML, PROD_ACTIVE), containsTargetBean()).     assertThat(beanFactoryFor(MULTI_NEGATED_XML, MULTI_ACTIVE), not(containsTargetBean())).     assertThat(beanFactoryFor(MULTI_NOT_DEV_ELIGIBLE_XML, NONE_ACTIVE), containsTargetBean()).     assertThat(beanFactoryFor(MULTI_NOT_DEV_ELIGIBLE_XML, UNKNOWN_ACTIVE), containsTargetBean()).     assertThat(beanFactoryFor(MULTI_NOT_DEV_ELIGIBLE_XML, DEV_ACTIVE), not(containsTargetBean())).     assertThat(beanFactoryFor(MULTI_NOT_DEV_ELIGIBLE_XML, PROD_ACTIVE), containsTargetBean()).     assertThat(beanFactoryFor(MULTI_NOT_DEV_ELIGIBLE_XML, MULTI_ACTIVE), containsTargetBean()).     assertThat(beanFactoryFor(MULTI_ELIGIBLE_SPACE_DELIMITED_XML, NONE_ACTIVE), not(containsTargetBean())).     assertThat(beanFactoryFor(MULTI_ELIGIBLE_SPACE_DELIMITED_XML, UNKNOWN_ACTIVE), not(containsTargetBean())).     assertThat(beanFactoryFor(MULTI_ELIGIBLE_SPACE_DELIMITED_XML, DEV_ACTIVE), containsTargetBean()).     assertThat(beanFactoryFor(MULTI_ELIGIBLE_SPACE_DELIMITED_XML, PROD_ACTIVE), containsTargetBean()).     assertThat(beanFactoryFor(MULTI_ELIGIBLE_SPACE_DELIMITED_XML, MULTI_ACTIVE), containsTargetBean()).     assertThat(beanFactoryFor(UNKNOWN_ELIGIBLE_XML, MULTI_ACTIVE), not(containsTargetBean())). }
false;public;0;23;;@Test public void testDefaultProfile() {     {         DefaultListableBeanFactory beanFactory = new DefaultListableBeanFactory().         XmlBeanDefinitionReader reader = new XmlBeanDefinitionReader(beanFactory).         ConfigurableEnvironment env = new StandardEnvironment().         env.setDefaultProfiles("custom-default").         reader.setEnvironment(env).         reader.loadBeanDefinitions(new ClassPathResource(DEFAULT_ELIGIBLE_XML, getClass())).         assertThat(beanFactory, not(containsTargetBean())).     }     {         DefaultListableBeanFactory beanFactory = new DefaultListableBeanFactory().         XmlBeanDefinitionReader reader = new XmlBeanDefinitionReader(beanFactory).         ConfigurableEnvironment env = new StandardEnvironment().         env.setDefaultProfiles("custom-default").         reader.setEnvironment(env).         reader.loadBeanDefinitions(new ClassPathResource(CUSTOM_DEFAULT_ELIGIBLE_XML, getClass())).         assertThat(beanFactory, containsTargetBean()).     } }
false;public;0;36;;@Test public void testDefaultAndNonDefaultProfile() {     assertThat(beanFactoryFor(DEFAULT_ELIGIBLE_XML, NONE_ACTIVE), containsTargetBean()).     assertThat(beanFactoryFor(DEFAULT_ELIGIBLE_XML, "other"), not(containsTargetBean())).     {         DefaultListableBeanFactory beanFactory = new DefaultListableBeanFactory().         XmlBeanDefinitionReader reader = new XmlBeanDefinitionReader(beanFactory).         ConfigurableEnvironment env = new StandardEnvironment().         env.setActiveProfiles(DEV_ACTIVE).         env.setDefaultProfiles("default").         reader.setEnvironment(env).         reader.loadBeanDefinitions(new ClassPathResource(DEFAULT_AND_DEV_ELIGIBLE_XML, getClass())).         assertThat(beanFactory, containsTargetBean()).     }     {         DefaultListableBeanFactory beanFactory = new DefaultListableBeanFactory().         XmlBeanDefinitionReader reader = new XmlBeanDefinitionReader(beanFactory).         ConfigurableEnvironment env = new StandardEnvironment().         // env.setActiveProfiles(DEV_ACTIVE).         env.setDefaultProfiles("default").         reader.setEnvironment(env).         reader.loadBeanDefinitions(new ClassPathResource(DEFAULT_AND_DEV_ELIGIBLE_XML, getClass())).         assertThat(beanFactory, containsTargetBean()).     }     {         DefaultListableBeanFactory beanFactory = new DefaultListableBeanFactory().         XmlBeanDefinitionReader reader = new XmlBeanDefinitionReader(beanFactory).         ConfigurableEnvironment env = new StandardEnvironment().         // env.setActiveProfiles(DEV_ACTIVE).         // env.setDefaultProfiles("default").         reader.setEnvironment(env).         reader.loadBeanDefinitions(new ClassPathResource(DEFAULT_AND_DEV_ELIGIBLE_XML, getClass())).         assertThat(beanFactory, containsTargetBean()).     } }
false;private;2;9;;private BeanDefinitionRegistry beanFactoryFor(String xmlName, String... activeProfiles) {     DefaultListableBeanFactory beanFactory = new DefaultListableBeanFactory().     XmlBeanDefinitionReader reader = new XmlBeanDefinitionReader(beanFactory).     StandardEnvironment env = new StandardEnvironment().     env.setActiveProfiles(activeProfiles).     reader.setEnvironment(env).     reader.loadBeanDefinitions(new ClassPathResource(xmlName, getClass())).     return beanFactory. }
false;public;1;5;;@Override public void describeTo(Description desc) {     desc.appendText("a BeanDefinitionRegistry containing bean named ").appendValue(beanName). }
false;public;1;4;;@Override public boolean matchesSafely(BeanDefinitionRegistry beanFactory) {     return beanFactory.containsBeanDefinition(beanName). }
false;private,static;1;16;;private static Matcher<BeanDefinitionRegistry> containsBeanDefinition(final String beanName) {     return new TypeSafeMatcher<BeanDefinitionRegistry>() {          @Override         public void describeTo(Description desc) {             desc.appendText("a BeanDefinitionRegistry containing bean named ").appendValue(beanName).         }          @Override         public boolean matchesSafely(BeanDefinitionRegistry beanFactory) {             return beanFactory.containsBeanDefinition(beanName).         }     }. }
false;private,static;0;3;;private static Matcher<BeanDefinitionRegistry> containsTargetBean() {     return containsBeanDefinition(TARGET_BEAN). }
