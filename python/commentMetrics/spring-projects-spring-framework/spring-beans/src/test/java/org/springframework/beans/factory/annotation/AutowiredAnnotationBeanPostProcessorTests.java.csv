# id;timestamp;commentText;codeText;commentWords;codeWords
AutowiredAnnotationBeanPostProcessorTests -> @Test 	public void testBeanAutowiredWithFactoryBean();1328020251;Verifies that a dependency on a {@link FactoryBean} can be autowired via_{@link Autowired @Autowired}, specifically addressing the JIRA issue_raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testBeanAutowiredWithFactoryBean() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor()__		bpp.setBeanFactory(bf)__		bf.addBeanPostProcessor(bpp)__		bf.registerBeanDefinition("factoryBeanDependentBean", new RootBeanDefinition(FactoryBeanDependentBean.class))__		bf.registerSingleton("stringFactoryBean", new StringFactoryBean())___		final StringFactoryBean factoryBean = (StringFactoryBean) bf.getBean("&stringFactoryBean")__		final FactoryBeanDependentBean bean = (FactoryBeanDependentBean) bf.getBean("factoryBeanDependentBean")___		assertNotNull("The singleton StringFactoryBean should have been registered.", factoryBean)__		assertNotNull("The factoryBeanDependentBean should have been registered.", bean)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the StringFactoryBean.",_				factoryBean, bean.getFactoryBean())___		bf.destroySingletons()__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,via,link,autowired,autowired,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,bean,autowired,with,factory,bean,default,listable,bean,factory,bf,new,default,listable,bean,factory,autowired,annotation,bean,post,processor,bpp,new,autowired,annotation,bean,post,processor,bpp,set,bean,factory,bf,bf,add,bean,post,processor,bpp,bf,register,bean,definition,factory,bean,dependent,bean,new,root,bean,definition,factory,bean,dependent,bean,class,bf,register,singleton,string,factory,bean,new,string,factory,bean,final,string,factory,bean,factory,bean,string,factory,bean,bf,get,bean,string,factory,bean,final,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,bf,get,bean,factory,bean,dependent,bean,assert,not,null,the,singleton,string,factory,bean,should,have,been,registered,factory,bean,assert,not,null,the,factory,bean,dependent,bean,should,have,been,registered,bean,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,string,factory,bean,factory,bean,bean,get,factory,bean,bf,destroy,singletons
AutowiredAnnotationBeanPostProcessorTests -> @Test 	public void testBeanAutowiredWithFactoryBean();1346406744;Verifies that a dependency on a {@link FactoryBean} can be autowired via_{@link Autowired @Autowired}, specifically addressing the JIRA issue_raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testBeanAutowiredWithFactoryBean() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor()__		bpp.setBeanFactory(bf)__		bf.addBeanPostProcessor(bpp)__		bf.registerBeanDefinition("factoryBeanDependentBean", new RootBeanDefinition(FactoryBeanDependentBean.class))__		bf.registerSingleton("stringFactoryBean", new StringFactoryBean())___		final StringFactoryBean factoryBean = (StringFactoryBean) bf.getBean("&stringFactoryBean")__		final FactoryBeanDependentBean bean = (FactoryBeanDependentBean) bf.getBean("factoryBeanDependentBean")___		assertNotNull("The singleton StringFactoryBean should have been registered.", factoryBean)__		assertNotNull("The factoryBeanDependentBean should have been registered.", bean)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the StringFactoryBean.",_				factoryBean, bean.getFactoryBean())___		bf.destroySingletons()__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,via,link,autowired,autowired,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,bean,autowired,with,factory,bean,default,listable,bean,factory,bf,new,default,listable,bean,factory,autowired,annotation,bean,post,processor,bpp,new,autowired,annotation,bean,post,processor,bpp,set,bean,factory,bf,bf,add,bean,post,processor,bpp,bf,register,bean,definition,factory,bean,dependent,bean,new,root,bean,definition,factory,bean,dependent,bean,class,bf,register,singleton,string,factory,bean,new,string,factory,bean,final,string,factory,bean,factory,bean,string,factory,bean,bf,get,bean,string,factory,bean,final,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,bf,get,bean,factory,bean,dependent,bean,assert,not,null,the,singleton,string,factory,bean,should,have,been,registered,factory,bean,assert,not,null,the,factory,bean,dependent,bean,should,have,been,registered,bean,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,string,factory,bean,factory,bean,bean,get,factory,bean,bf,destroy,singletons
AutowiredAnnotationBeanPostProcessorTests -> @Test 	public void testBeanAutowiredWithFactoryBean();1346421549;Verifies that a dependency on a {@link FactoryBean} can be autowired via_{@link Autowired @Autowired}, specifically addressing the JIRA issue_raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testBeanAutowiredWithFactoryBean() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor()__		bpp.setBeanFactory(bf)__		bf.addBeanPostProcessor(bpp)__		bf.registerBeanDefinition("factoryBeanDependentBean", new RootBeanDefinition(FactoryBeanDependentBean.class))__		bf.registerSingleton("stringFactoryBean", new StringFactoryBean())___		final StringFactoryBean factoryBean = (StringFactoryBean) bf.getBean("&stringFactoryBean")__		final FactoryBeanDependentBean bean = (FactoryBeanDependentBean) bf.getBean("factoryBeanDependentBean")___		assertNotNull("The singleton StringFactoryBean should have been registered.", factoryBean)__		assertNotNull("The factoryBeanDependentBean should have been registered.", bean)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the StringFactoryBean.",_				factoryBean, bean.getFactoryBean())___		bf.destroySingletons()__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,via,link,autowired,autowired,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,bean,autowired,with,factory,bean,default,listable,bean,factory,bf,new,default,listable,bean,factory,autowired,annotation,bean,post,processor,bpp,new,autowired,annotation,bean,post,processor,bpp,set,bean,factory,bf,bf,add,bean,post,processor,bpp,bf,register,bean,definition,factory,bean,dependent,bean,new,root,bean,definition,factory,bean,dependent,bean,class,bf,register,singleton,string,factory,bean,new,string,factory,bean,final,string,factory,bean,factory,bean,string,factory,bean,bf,get,bean,string,factory,bean,final,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,bf,get,bean,factory,bean,dependent,bean,assert,not,null,the,singleton,string,factory,bean,should,have,been,registered,factory,bean,assert,not,null,the,factory,bean,dependent,bean,should,have,been,registered,bean,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,string,factory,bean,factory,bean,bean,get,factory,bean,bf,destroy,singletons
AutowiredAnnotationBeanPostProcessorTests -> @Test 	public void testBeanAutowiredWithFactoryBean();1356735495;Verifies that a dependency on a {@link FactoryBean} can be autowired via_{@link Autowired @Autowired}, specifically addressing the JIRA issue_raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testBeanAutowiredWithFactoryBean() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor()__		bpp.setBeanFactory(bf)__		bf.addBeanPostProcessor(bpp)__		bf.registerBeanDefinition("factoryBeanDependentBean", new RootBeanDefinition(FactoryBeanDependentBean.class))__		bf.registerSingleton("stringFactoryBean", new StringFactoryBean())___		final StringFactoryBean factoryBean = (StringFactoryBean) bf.getBean("&stringFactoryBean")__		final FactoryBeanDependentBean bean = (FactoryBeanDependentBean) bf.getBean("factoryBeanDependentBean")___		assertNotNull("The singleton StringFactoryBean should have been registered.", factoryBean)__		assertNotNull("The factoryBeanDependentBean should have been registered.", bean)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the StringFactoryBean.",_				factoryBean, bean.getFactoryBean())___		bf.destroySingletons()__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,via,link,autowired,autowired,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,bean,autowired,with,factory,bean,default,listable,bean,factory,bf,new,default,listable,bean,factory,autowired,annotation,bean,post,processor,bpp,new,autowired,annotation,bean,post,processor,bpp,set,bean,factory,bf,bf,add,bean,post,processor,bpp,bf,register,bean,definition,factory,bean,dependent,bean,new,root,bean,definition,factory,bean,dependent,bean,class,bf,register,singleton,string,factory,bean,new,string,factory,bean,final,string,factory,bean,factory,bean,string,factory,bean,bf,get,bean,string,factory,bean,final,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,bf,get,bean,factory,bean,dependent,bean,assert,not,null,the,singleton,string,factory,bean,should,have,been,registered,factory,bean,assert,not,null,the,factory,bean,dependent,bean,should,have,been,registered,bean,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,string,factory,bean,factory,bean,bean,get,factory,bean,bf,destroy,singletons
AutowiredAnnotationBeanPostProcessorTests -> @Test 	public void testBeanAutowiredWithFactoryBean();1357119417;Verifies that a dependency on a {@link FactoryBean} can be autowired via_{@link Autowired @Autowired}, specifically addressing the JIRA issue_raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testBeanAutowiredWithFactoryBean() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor()__		bpp.setBeanFactory(bf)__		bf.addBeanPostProcessor(bpp)__		bf.registerBeanDefinition("factoryBeanDependentBean", new RootBeanDefinition(FactoryBeanDependentBean.class))__		bf.registerSingleton("stringFactoryBean", new StringFactoryBean())___		final StringFactoryBean factoryBean = (StringFactoryBean) bf.getBean("&stringFactoryBean")__		final FactoryBeanDependentBean bean = (FactoryBeanDependentBean) bf.getBean("factoryBeanDependentBean")___		assertNotNull("The singleton StringFactoryBean should have been registered.", factoryBean)__		assertNotNull("The factoryBeanDependentBean should have been registered.", bean)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the StringFactoryBean.",_				factoryBean, bean.getFactoryBean())___		bf.destroySingletons()__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,via,link,autowired,autowired,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,bean,autowired,with,factory,bean,default,listable,bean,factory,bf,new,default,listable,bean,factory,autowired,annotation,bean,post,processor,bpp,new,autowired,annotation,bean,post,processor,bpp,set,bean,factory,bf,bf,add,bean,post,processor,bpp,bf,register,bean,definition,factory,bean,dependent,bean,new,root,bean,definition,factory,bean,dependent,bean,class,bf,register,singleton,string,factory,bean,new,string,factory,bean,final,string,factory,bean,factory,bean,string,factory,bean,bf,get,bean,string,factory,bean,final,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,bf,get,bean,factory,bean,dependent,bean,assert,not,null,the,singleton,string,factory,bean,should,have,been,registered,factory,bean,assert,not,null,the,factory,bean,dependent,bean,should,have,been,registered,bean,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,string,factory,bean,factory,bean,bean,get,factory,bean,bf,destroy,singletons
AutowiredAnnotationBeanPostProcessorTests -> @Test 	public void testBeanAutowiredWithFactoryBean();1362408075;Verifies that a dependency on a {@link FactoryBean} can be autowired via_{@link Autowired @Autowired}, specifically addressing the JIRA issue_raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testBeanAutowiredWithFactoryBean() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor()__		bpp.setBeanFactory(bf)__		bf.addBeanPostProcessor(bpp)__		bf.registerBeanDefinition("factoryBeanDependentBean", new RootBeanDefinition(FactoryBeanDependentBean.class))__		bf.registerSingleton("stringFactoryBean", new StringFactoryBean())___		final StringFactoryBean factoryBean = (StringFactoryBean) bf.getBean("&stringFactoryBean")__		final FactoryBeanDependentBean bean = (FactoryBeanDependentBean) bf.getBean("factoryBeanDependentBean")___		assertNotNull("The singleton StringFactoryBean should have been registered.", factoryBean)__		assertNotNull("The factoryBeanDependentBean should have been registered.", bean)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the StringFactoryBean.",_				factoryBean, bean.getFactoryBean())___		bf.destroySingletons()__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,via,link,autowired,autowired,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,bean,autowired,with,factory,bean,default,listable,bean,factory,bf,new,default,listable,bean,factory,autowired,annotation,bean,post,processor,bpp,new,autowired,annotation,bean,post,processor,bpp,set,bean,factory,bf,bf,add,bean,post,processor,bpp,bf,register,bean,definition,factory,bean,dependent,bean,new,root,bean,definition,factory,bean,dependent,bean,class,bf,register,singleton,string,factory,bean,new,string,factory,bean,final,string,factory,bean,factory,bean,string,factory,bean,bf,get,bean,string,factory,bean,final,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,bf,get,bean,factory,bean,dependent,bean,assert,not,null,the,singleton,string,factory,bean,should,have,been,registered,factory,bean,assert,not,null,the,factory,bean,dependent,bean,should,have,been,registered,bean,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,string,factory,bean,factory,bean,bean,get,factory,bean,bf,destroy,singletons
AutowiredAnnotationBeanPostProcessorTests -> @Test 	public void testBeanAutowiredWithFactoryBean();1377182590;Verifies that a dependency on a {@link FactoryBean} can be autowired via_{@link Autowired @Autowired}, specifically addressing the JIRA issue_raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testBeanAutowiredWithFactoryBean() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor()__		bpp.setBeanFactory(bf)__		bf.addBeanPostProcessor(bpp)__		bf.registerBeanDefinition("factoryBeanDependentBean", new RootBeanDefinition(FactoryBeanDependentBean.class))__		bf.registerSingleton("stringFactoryBean", new StringFactoryBean())___		final StringFactoryBean factoryBean = (StringFactoryBean) bf.getBean("&stringFactoryBean")__		final FactoryBeanDependentBean bean = (FactoryBeanDependentBean) bf.getBean("factoryBeanDependentBean")___		assertNotNull("The singleton StringFactoryBean should have been registered.", factoryBean)__		assertNotNull("The factoryBeanDependentBean should have been registered.", bean)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the StringFactoryBean.",_				factoryBean, bean.getFactoryBean())___		bf.destroySingletons()__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,via,link,autowired,autowired,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,bean,autowired,with,factory,bean,default,listable,bean,factory,bf,new,default,listable,bean,factory,autowired,annotation,bean,post,processor,bpp,new,autowired,annotation,bean,post,processor,bpp,set,bean,factory,bf,bf,add,bean,post,processor,bpp,bf,register,bean,definition,factory,bean,dependent,bean,new,root,bean,definition,factory,bean,dependent,bean,class,bf,register,singleton,string,factory,bean,new,string,factory,bean,final,string,factory,bean,factory,bean,string,factory,bean,bf,get,bean,string,factory,bean,final,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,bf,get,bean,factory,bean,dependent,bean,assert,not,null,the,singleton,string,factory,bean,should,have,been,registered,factory,bean,assert,not,null,the,factory,bean,dependent,bean,should,have,been,registered,bean,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,string,factory,bean,factory,bean,bean,get,factory,bean,bf,destroy,singletons
AutowiredAnnotationBeanPostProcessorTests -> @Test 	public void testBeanAutowiredWithFactoryBean();1377641679;Verifies that a dependency on a {@link FactoryBean} can be autowired via_{@link Autowired @Autowired}, specifically addressing the JIRA issue_raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testBeanAutowiredWithFactoryBean() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor()__		bpp.setBeanFactory(bf)__		bf.addBeanPostProcessor(bpp)__		bf.registerBeanDefinition("factoryBeanDependentBean", new RootBeanDefinition(FactoryBeanDependentBean.class))__		bf.registerSingleton("stringFactoryBean", new StringFactoryBean())___		final StringFactoryBean factoryBean = (StringFactoryBean) bf.getBean("&stringFactoryBean")__		final FactoryBeanDependentBean bean = (FactoryBeanDependentBean) bf.getBean("factoryBeanDependentBean")___		assertNotNull("The singleton StringFactoryBean should have been registered.", factoryBean)__		assertNotNull("The factoryBeanDependentBean should have been registered.", bean)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the StringFactoryBean.",_				factoryBean, bean.getFactoryBean())___		bf.destroySingletons()__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,via,link,autowired,autowired,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,bean,autowired,with,factory,bean,default,listable,bean,factory,bf,new,default,listable,bean,factory,autowired,annotation,bean,post,processor,bpp,new,autowired,annotation,bean,post,processor,bpp,set,bean,factory,bf,bf,add,bean,post,processor,bpp,bf,register,bean,definition,factory,bean,dependent,bean,new,root,bean,definition,factory,bean,dependent,bean,class,bf,register,singleton,string,factory,bean,new,string,factory,bean,final,string,factory,bean,factory,bean,string,factory,bean,bf,get,bean,string,factory,bean,final,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,bf,get,bean,factory,bean,dependent,bean,assert,not,null,the,singleton,string,factory,bean,should,have,been,registered,factory,bean,assert,not,null,the,factory,bean,dependent,bean,should,have,been,registered,bean,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,string,factory,bean,factory,bean,bean,get,factory,bean,bf,destroy,singletons
AutowiredAnnotationBeanPostProcessorTests -> @Test 	public void testBeanAutowiredWithFactoryBean();1381788683;Verifies that a dependency on a {@link FactoryBean} can be autowired via_{@link Autowired @Autowired}, specifically addressing the JIRA issue_raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testBeanAutowiredWithFactoryBean() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor()__		bpp.setBeanFactory(bf)__		bf.addBeanPostProcessor(bpp)__		bf.registerBeanDefinition("factoryBeanDependentBean", new RootBeanDefinition(FactoryBeanDependentBean.class))__		bf.registerSingleton("stringFactoryBean", new StringFactoryBean())___		final StringFactoryBean factoryBean = (StringFactoryBean) bf.getBean("&stringFactoryBean")__		final FactoryBeanDependentBean bean = (FactoryBeanDependentBean) bf.getBean("factoryBeanDependentBean")___		assertNotNull("The singleton StringFactoryBean should have been registered.", factoryBean)__		assertNotNull("The factoryBeanDependentBean should have been registered.", bean)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the StringFactoryBean.",_				factoryBean, bean.getFactoryBean())___		bf.destroySingletons()__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,via,link,autowired,autowired,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,bean,autowired,with,factory,bean,default,listable,bean,factory,bf,new,default,listable,bean,factory,autowired,annotation,bean,post,processor,bpp,new,autowired,annotation,bean,post,processor,bpp,set,bean,factory,bf,bf,add,bean,post,processor,bpp,bf,register,bean,definition,factory,bean,dependent,bean,new,root,bean,definition,factory,bean,dependent,bean,class,bf,register,singleton,string,factory,bean,new,string,factory,bean,final,string,factory,bean,factory,bean,string,factory,bean,bf,get,bean,string,factory,bean,final,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,bf,get,bean,factory,bean,dependent,bean,assert,not,null,the,singleton,string,factory,bean,should,have,been,registered,factory,bean,assert,not,null,the,factory,bean,dependent,bean,should,have,been,registered,bean,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,string,factory,bean,factory,bean,bean,get,factory,bean,bf,destroy,singletons
AutowiredAnnotationBeanPostProcessorTests -> @Test 	public void testBeanAutowiredWithFactoryBean();1382716358;Verifies that a dependency on a {@link FactoryBean} can be autowired via_{@link Autowired @Autowired}, specifically addressing the JIRA issue_raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testBeanAutowiredWithFactoryBean() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor()__		bpp.setBeanFactory(bf)__		bf.addBeanPostProcessor(bpp)__		bf.registerBeanDefinition("factoryBeanDependentBean", new RootBeanDefinition(FactoryBeanDependentBean.class))__		bf.registerSingleton("stringFactoryBean", new StringFactoryBean())___		final StringFactoryBean factoryBean = (StringFactoryBean) bf.getBean("&stringFactoryBean")__		final FactoryBeanDependentBean bean = (FactoryBeanDependentBean) bf.getBean("factoryBeanDependentBean")___		assertNotNull("The singleton StringFactoryBean should have been registered.", factoryBean)__		assertNotNull("The factoryBeanDependentBean should have been registered.", bean)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the StringFactoryBean.",_				factoryBean, bean.getFactoryBean())___		bf.destroySingletons()__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,via,link,autowired,autowired,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,bean,autowired,with,factory,bean,default,listable,bean,factory,bf,new,default,listable,bean,factory,autowired,annotation,bean,post,processor,bpp,new,autowired,annotation,bean,post,processor,bpp,set,bean,factory,bf,bf,add,bean,post,processor,bpp,bf,register,bean,definition,factory,bean,dependent,bean,new,root,bean,definition,factory,bean,dependent,bean,class,bf,register,singleton,string,factory,bean,new,string,factory,bean,final,string,factory,bean,factory,bean,string,factory,bean,bf,get,bean,string,factory,bean,final,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,bf,get,bean,factory,bean,dependent,bean,assert,not,null,the,singleton,string,factory,bean,should,have,been,registered,factory,bean,assert,not,null,the,factory,bean,dependent,bean,should,have,been,registered,bean,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,string,factory,bean,factory,bean,bean,get,factory,bean,bf,destroy,singletons
AutowiredAnnotationBeanPostProcessorTests -> @Test 	public void testBeanAutowiredWithFactoryBean();1382826936;Verifies that a dependency on a {@link FactoryBean} can be autowired via_{@link Autowired @Autowired}, specifically addressing the JIRA issue_raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testBeanAutowiredWithFactoryBean() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor()__		bpp.setBeanFactory(bf)__		bf.addBeanPostProcessor(bpp)__		bf.registerBeanDefinition("factoryBeanDependentBean", new RootBeanDefinition(FactoryBeanDependentBean.class))__		bf.registerSingleton("stringFactoryBean", new StringFactoryBean())___		final StringFactoryBean factoryBean = (StringFactoryBean) bf.getBean("&stringFactoryBean")__		final FactoryBeanDependentBean bean = (FactoryBeanDependentBean) bf.getBean("factoryBeanDependentBean")___		assertNotNull("The singleton StringFactoryBean should have been registered.", factoryBean)__		assertNotNull("The factoryBeanDependentBean should have been registered.", bean)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the StringFactoryBean.",_				factoryBean, bean.getFactoryBean())___		bf.destroySingletons()__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,via,link,autowired,autowired,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,bean,autowired,with,factory,bean,default,listable,bean,factory,bf,new,default,listable,bean,factory,autowired,annotation,bean,post,processor,bpp,new,autowired,annotation,bean,post,processor,bpp,set,bean,factory,bf,bf,add,bean,post,processor,bpp,bf,register,bean,definition,factory,bean,dependent,bean,new,root,bean,definition,factory,bean,dependent,bean,class,bf,register,singleton,string,factory,bean,new,string,factory,bean,final,string,factory,bean,factory,bean,string,factory,bean,bf,get,bean,string,factory,bean,final,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,bf,get,bean,factory,bean,dependent,bean,assert,not,null,the,singleton,string,factory,bean,should,have,been,registered,factory,bean,assert,not,null,the,factory,bean,dependent,bean,should,have,been,registered,bean,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,string,factory,bean,factory,bean,bean,get,factory,bean,bf,destroy,singletons
AutowiredAnnotationBeanPostProcessorTests -> @Test 	public void testBeanAutowiredWithFactoryBean();1382868136;Verifies that a dependency on a {@link FactoryBean} can be autowired via_{@link Autowired @Autowired}, specifically addressing the JIRA issue_raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testBeanAutowiredWithFactoryBean() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor()__		bpp.setBeanFactory(bf)__		bf.addBeanPostProcessor(bpp)__		bf.registerBeanDefinition("factoryBeanDependentBean", new RootBeanDefinition(FactoryBeanDependentBean.class))__		bf.registerSingleton("stringFactoryBean", new StringFactoryBean())___		final StringFactoryBean factoryBean = (StringFactoryBean) bf.getBean("&stringFactoryBean")__		final FactoryBeanDependentBean bean = (FactoryBeanDependentBean) bf.getBean("factoryBeanDependentBean")___		assertNotNull("The singleton StringFactoryBean should have been registered.", factoryBean)__		assertNotNull("The factoryBeanDependentBean should have been registered.", bean)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the StringFactoryBean.",_				factoryBean, bean.getFactoryBean())___		bf.destroySingletons()__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,via,link,autowired,autowired,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,bean,autowired,with,factory,bean,default,listable,bean,factory,bf,new,default,listable,bean,factory,autowired,annotation,bean,post,processor,bpp,new,autowired,annotation,bean,post,processor,bpp,set,bean,factory,bf,bf,add,bean,post,processor,bpp,bf,register,bean,definition,factory,bean,dependent,bean,new,root,bean,definition,factory,bean,dependent,bean,class,bf,register,singleton,string,factory,bean,new,string,factory,bean,final,string,factory,bean,factory,bean,string,factory,bean,bf,get,bean,string,factory,bean,final,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,bf,get,bean,factory,bean,dependent,bean,assert,not,null,the,singleton,string,factory,bean,should,have,been,registered,factory,bean,assert,not,null,the,factory,bean,dependent,bean,should,have,been,registered,bean,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,string,factory,bean,factory,bean,bean,get,factory,bean,bf,destroy,singletons
AutowiredAnnotationBeanPostProcessorTests -> @Test 	public void testBeanAutowiredWithFactoryBean();1382905564;Verifies that a dependency on a {@link FactoryBean} can be autowired via_{@link Autowired @Autowired}, specifically addressing the JIRA issue_raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testBeanAutowiredWithFactoryBean() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor()__		bpp.setBeanFactory(bf)__		bf.addBeanPostProcessor(bpp)__		bf.registerBeanDefinition("factoryBeanDependentBean", new RootBeanDefinition(FactoryBeanDependentBean.class))__		bf.registerSingleton("stringFactoryBean", new StringFactoryBean())___		final StringFactoryBean factoryBean = (StringFactoryBean) bf.getBean("&stringFactoryBean")__		final FactoryBeanDependentBean bean = (FactoryBeanDependentBean) bf.getBean("factoryBeanDependentBean")___		assertNotNull("The singleton StringFactoryBean should have been registered.", factoryBean)__		assertNotNull("The factoryBeanDependentBean should have been registered.", bean)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the StringFactoryBean.",_				factoryBean, bean.getFactoryBean())___		bf.destroySingletons()__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,via,link,autowired,autowired,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,bean,autowired,with,factory,bean,default,listable,bean,factory,bf,new,default,listable,bean,factory,autowired,annotation,bean,post,processor,bpp,new,autowired,annotation,bean,post,processor,bpp,set,bean,factory,bf,bf,add,bean,post,processor,bpp,bf,register,bean,definition,factory,bean,dependent,bean,new,root,bean,definition,factory,bean,dependent,bean,class,bf,register,singleton,string,factory,bean,new,string,factory,bean,final,string,factory,bean,factory,bean,string,factory,bean,bf,get,bean,string,factory,bean,final,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,bf,get,bean,factory,bean,dependent,bean,assert,not,null,the,singleton,string,factory,bean,should,have,been,registered,factory,bean,assert,not,null,the,factory,bean,dependent,bean,should,have,been,registered,bean,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,string,factory,bean,factory,bean,bean,get,factory,bean,bf,destroy,singletons
AutowiredAnnotationBeanPostProcessorTests -> @Test 	public void testBeanAutowiredWithFactoryBean();1383167133;Verifies that a dependency on a {@link FactoryBean} can be autowired via_{@link Autowired @Autowired}, specifically addressing the JIRA issue_raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testBeanAutowiredWithFactoryBean() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor()__		bpp.setBeanFactory(bf)__		bf.addBeanPostProcessor(bpp)__		bf.registerBeanDefinition("factoryBeanDependentBean", new RootBeanDefinition(FactoryBeanDependentBean.class))__		bf.registerSingleton("stringFactoryBean", new StringFactoryBean())___		final StringFactoryBean factoryBean = (StringFactoryBean) bf.getBean("&stringFactoryBean")__		final FactoryBeanDependentBean bean = (FactoryBeanDependentBean) bf.getBean("factoryBeanDependentBean")___		assertNotNull("The singleton StringFactoryBean should have been registered.", factoryBean)__		assertNotNull("The factoryBeanDependentBean should have been registered.", bean)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the StringFactoryBean.",_				factoryBean, bean.getFactoryBean())___		bf.destroySingletons()__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,via,link,autowired,autowired,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,bean,autowired,with,factory,bean,default,listable,bean,factory,bf,new,default,listable,bean,factory,autowired,annotation,bean,post,processor,bpp,new,autowired,annotation,bean,post,processor,bpp,set,bean,factory,bf,bf,add,bean,post,processor,bpp,bf,register,bean,definition,factory,bean,dependent,bean,new,root,bean,definition,factory,bean,dependent,bean,class,bf,register,singleton,string,factory,bean,new,string,factory,bean,final,string,factory,bean,factory,bean,string,factory,bean,bf,get,bean,string,factory,bean,final,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,bf,get,bean,factory,bean,dependent,bean,assert,not,null,the,singleton,string,factory,bean,should,have,been,registered,factory,bean,assert,not,null,the,factory,bean,dependent,bean,should,have,been,registered,bean,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,string,factory,bean,factory,bean,bean,get,factory,bean,bf,destroy,singletons
AutowiredAnnotationBeanPostProcessorTests -> @Test 	public void testBeanAutowiredWithFactoryBean();1394111613;Verifies that a dependency on a {@link FactoryBean} can be autowired via_{@link Autowired @Autowired}, specifically addressing the JIRA issue_raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testBeanAutowiredWithFactoryBean() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor()__		bpp.setBeanFactory(bf)__		bf.addBeanPostProcessor(bpp)__		bf.registerBeanDefinition("factoryBeanDependentBean", new RootBeanDefinition(FactoryBeanDependentBean.class))__		bf.registerSingleton("stringFactoryBean", new StringFactoryBean())___		final StringFactoryBean factoryBean = (StringFactoryBean) bf.getBean("&stringFactoryBean")__		final FactoryBeanDependentBean bean = (FactoryBeanDependentBean) bf.getBean("factoryBeanDependentBean")___		assertNotNull("The singleton StringFactoryBean should have been registered.", factoryBean)__		assertNotNull("The factoryBeanDependentBean should have been registered.", bean)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the StringFactoryBean.",_				factoryBean, bean.getFactoryBean())___		bf.destroySingletons()__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,via,link,autowired,autowired,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,bean,autowired,with,factory,bean,default,listable,bean,factory,bf,new,default,listable,bean,factory,autowired,annotation,bean,post,processor,bpp,new,autowired,annotation,bean,post,processor,bpp,set,bean,factory,bf,bf,add,bean,post,processor,bpp,bf,register,bean,definition,factory,bean,dependent,bean,new,root,bean,definition,factory,bean,dependent,bean,class,bf,register,singleton,string,factory,bean,new,string,factory,bean,final,string,factory,bean,factory,bean,string,factory,bean,bf,get,bean,string,factory,bean,final,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,bf,get,bean,factory,bean,dependent,bean,assert,not,null,the,singleton,string,factory,bean,should,have,been,registered,factory,bean,assert,not,null,the,factory,bean,dependent,bean,should,have,been,registered,bean,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,string,factory,bean,factory,bean,bean,get,factory,bean,bf,destroy,singletons
AutowiredAnnotationBeanPostProcessorTests -> @Test 	public void testBeanAutowiredWithFactoryBean();1394147295;Verifies that a dependency on a {@link FactoryBean} can be autowired via_{@link Autowired @Autowired}, specifically addressing the JIRA issue_raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testBeanAutowiredWithFactoryBean() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor()__		bpp.setBeanFactory(bf)__		bf.addBeanPostProcessor(bpp)__		bf.registerBeanDefinition("factoryBeanDependentBean", new RootBeanDefinition(FactoryBeanDependentBean.class))__		bf.registerSingleton("stringFactoryBean", new StringFactoryBean())___		final StringFactoryBean factoryBean = (StringFactoryBean) bf.getBean("&stringFactoryBean")__		final FactoryBeanDependentBean bean = (FactoryBeanDependentBean) bf.getBean("factoryBeanDependentBean")___		assertNotNull("The singleton StringFactoryBean should have been registered.", factoryBean)__		assertNotNull("The factoryBeanDependentBean should have been registered.", bean)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the StringFactoryBean.",_				factoryBean, bean.getFactoryBean())___		bf.destroySingletons()__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,via,link,autowired,autowired,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,bean,autowired,with,factory,bean,default,listable,bean,factory,bf,new,default,listable,bean,factory,autowired,annotation,bean,post,processor,bpp,new,autowired,annotation,bean,post,processor,bpp,set,bean,factory,bf,bf,add,bean,post,processor,bpp,bf,register,bean,definition,factory,bean,dependent,bean,new,root,bean,definition,factory,bean,dependent,bean,class,bf,register,singleton,string,factory,bean,new,string,factory,bean,final,string,factory,bean,factory,bean,string,factory,bean,bf,get,bean,string,factory,bean,final,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,bf,get,bean,factory,bean,dependent,bean,assert,not,null,the,singleton,string,factory,bean,should,have,been,registered,factory,bean,assert,not,null,the,factory,bean,dependent,bean,should,have,been,registered,bean,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,string,factory,bean,factory,bean,bean,get,factory,bean,bf,destroy,singletons
AutowiredAnnotationBeanPostProcessorTests -> @Test 	public void testBeanAutowiredWithFactoryBean();1401908653;Verifies that a dependency on a {@link FactoryBean} can be autowired via_{@link Autowired @Autowired}, specifically addressing the JIRA issue_raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testBeanAutowiredWithFactoryBean() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor()__		bpp.setBeanFactory(bf)__		bf.addBeanPostProcessor(bpp)__		bf.registerBeanDefinition("factoryBeanDependentBean", new RootBeanDefinition(FactoryBeanDependentBean.class))__		bf.registerSingleton("stringFactoryBean", new StringFactoryBean())___		final StringFactoryBean factoryBean = (StringFactoryBean) bf.getBean("&stringFactoryBean")__		final FactoryBeanDependentBean bean = (FactoryBeanDependentBean) bf.getBean("factoryBeanDependentBean")___		assertNotNull("The singleton StringFactoryBean should have been registered.", factoryBean)__		assertNotNull("The factoryBeanDependentBean should have been registered.", bean)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the StringFactoryBean.",_				factoryBean, bean.getFactoryBean())___		bf.destroySingletons()__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,via,link,autowired,autowired,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,bean,autowired,with,factory,bean,default,listable,bean,factory,bf,new,default,listable,bean,factory,autowired,annotation,bean,post,processor,bpp,new,autowired,annotation,bean,post,processor,bpp,set,bean,factory,bf,bf,add,bean,post,processor,bpp,bf,register,bean,definition,factory,bean,dependent,bean,new,root,bean,definition,factory,bean,dependent,bean,class,bf,register,singleton,string,factory,bean,new,string,factory,bean,final,string,factory,bean,factory,bean,string,factory,bean,bf,get,bean,string,factory,bean,final,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,bf,get,bean,factory,bean,dependent,bean,assert,not,null,the,singleton,string,factory,bean,should,have,been,registered,factory,bean,assert,not,null,the,factory,bean,dependent,bean,should,have,been,registered,bean,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,string,factory,bean,factory,bean,bean,get,factory,bean,bf,destroy,singletons
AutowiredAnnotationBeanPostProcessorTests -> @Test 	public void testBeanAutowiredWithFactoryBean();1404306814;Verifies that a dependency on a {@link FactoryBean} can be autowired via_{@link Autowired @Autowired}, specifically addressing the JIRA issue_raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testBeanAutowiredWithFactoryBean() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor()__		bpp.setBeanFactory(bf)__		bf.addBeanPostProcessor(bpp)__		bf.registerBeanDefinition("factoryBeanDependentBean", new RootBeanDefinition(FactoryBeanDependentBean.class))__		bf.registerSingleton("stringFactoryBean", new StringFactoryBean())___		final StringFactoryBean factoryBean = (StringFactoryBean) bf.getBean("&stringFactoryBean")__		final FactoryBeanDependentBean bean = (FactoryBeanDependentBean) bf.getBean("factoryBeanDependentBean")___		assertNotNull("The singleton StringFactoryBean should have been registered.", factoryBean)__		assertNotNull("The factoryBeanDependentBean should have been registered.", bean)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the StringFactoryBean.",_				factoryBean, bean.getFactoryBean())___		bf.destroySingletons()__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,via,link,autowired,autowired,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,bean,autowired,with,factory,bean,default,listable,bean,factory,bf,new,default,listable,bean,factory,autowired,annotation,bean,post,processor,bpp,new,autowired,annotation,bean,post,processor,bpp,set,bean,factory,bf,bf,add,bean,post,processor,bpp,bf,register,bean,definition,factory,bean,dependent,bean,new,root,bean,definition,factory,bean,dependent,bean,class,bf,register,singleton,string,factory,bean,new,string,factory,bean,final,string,factory,bean,factory,bean,string,factory,bean,bf,get,bean,string,factory,bean,final,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,bf,get,bean,factory,bean,dependent,bean,assert,not,null,the,singleton,string,factory,bean,should,have,been,registered,factory,bean,assert,not,null,the,factory,bean,dependent,bean,should,have,been,registered,bean,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,string,factory,bean,factory,bean,bean,get,factory,bean,bf,destroy,singletons
AutowiredAnnotationBeanPostProcessorTests -> @Test 	public void testBeanAutowiredWithFactoryBean();1407154420;Verifies that a dependency on a {@link FactoryBean} can be autowired via_{@link Autowired @Autowired}, specifically addressing the JIRA issue_raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testBeanAutowiredWithFactoryBean() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor()__		bpp.setBeanFactory(bf)__		bf.addBeanPostProcessor(bpp)__		bf.registerBeanDefinition("factoryBeanDependentBean", new RootBeanDefinition(FactoryBeanDependentBean.class))__		bf.registerSingleton("stringFactoryBean", new StringFactoryBean())___		final StringFactoryBean factoryBean = (StringFactoryBean) bf.getBean("&stringFactoryBean")__		final FactoryBeanDependentBean bean = (FactoryBeanDependentBean) bf.getBean("factoryBeanDependentBean")___		assertNotNull("The singleton StringFactoryBean should have been registered.", factoryBean)__		assertNotNull("The factoryBeanDependentBean should have been registered.", bean)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the StringFactoryBean.",_				factoryBean, bean.getFactoryBean())___		bf.destroySingletons()__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,via,link,autowired,autowired,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,bean,autowired,with,factory,bean,default,listable,bean,factory,bf,new,default,listable,bean,factory,autowired,annotation,bean,post,processor,bpp,new,autowired,annotation,bean,post,processor,bpp,set,bean,factory,bf,bf,add,bean,post,processor,bpp,bf,register,bean,definition,factory,bean,dependent,bean,new,root,bean,definition,factory,bean,dependent,bean,class,bf,register,singleton,string,factory,bean,new,string,factory,bean,final,string,factory,bean,factory,bean,string,factory,bean,bf,get,bean,string,factory,bean,final,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,bf,get,bean,factory,bean,dependent,bean,assert,not,null,the,singleton,string,factory,bean,should,have,been,registered,factory,bean,assert,not,null,the,factory,bean,dependent,bean,should,have,been,registered,bean,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,string,factory,bean,factory,bean,bean,get,factory,bean,bf,destroy,singletons
AutowiredAnnotationBeanPostProcessorTests -> @Test 	public void testBeanAutowiredWithFactoryBean();1409784073;Verifies that a dependency on a {@link FactoryBean} can be autowired via_{@link Autowired @Autowired}, specifically addressing the JIRA issue_raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testBeanAutowiredWithFactoryBean() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor()__		bpp.setBeanFactory(bf)__		bf.addBeanPostProcessor(bpp)__		bf.registerBeanDefinition("factoryBeanDependentBean", new RootBeanDefinition(FactoryBeanDependentBean.class))__		bf.registerSingleton("stringFactoryBean", new StringFactoryBean())___		final StringFactoryBean factoryBean = (StringFactoryBean) bf.getBean("&stringFactoryBean")__		final FactoryBeanDependentBean bean = (FactoryBeanDependentBean) bf.getBean("factoryBeanDependentBean")___		assertNotNull("The singleton StringFactoryBean should have been registered.", factoryBean)__		assertNotNull("The factoryBeanDependentBean should have been registered.", bean)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the StringFactoryBean.",_				factoryBean, bean.getFactoryBean())___		bf.destroySingletons()__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,via,link,autowired,autowired,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,bean,autowired,with,factory,bean,default,listable,bean,factory,bf,new,default,listable,bean,factory,autowired,annotation,bean,post,processor,bpp,new,autowired,annotation,bean,post,processor,bpp,set,bean,factory,bf,bf,add,bean,post,processor,bpp,bf,register,bean,definition,factory,bean,dependent,bean,new,root,bean,definition,factory,bean,dependent,bean,class,bf,register,singleton,string,factory,bean,new,string,factory,bean,final,string,factory,bean,factory,bean,string,factory,bean,bf,get,bean,string,factory,bean,final,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,bf,get,bean,factory,bean,dependent,bean,assert,not,null,the,singleton,string,factory,bean,should,have,been,registered,factory,bean,assert,not,null,the,factory,bean,dependent,bean,should,have,been,registered,bean,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,string,factory,bean,factory,bean,bean,get,factory,bean,bf,destroy,singletons
AutowiredAnnotationBeanPostProcessorTests -> @Test 	public void testBeanAutowiredWithFactoryBean();1410123081;Verifies that a dependency on a {@link FactoryBean} can be autowired via_{@link Autowired @Autowired}, specifically addressing the JIRA issue_raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testBeanAutowiredWithFactoryBean() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor()__		bpp.setBeanFactory(bf)__		bf.addBeanPostProcessor(bpp)__		bf.registerBeanDefinition("factoryBeanDependentBean", new RootBeanDefinition(FactoryBeanDependentBean.class))__		bf.registerSingleton("stringFactoryBean", new StringFactoryBean())___		final StringFactoryBean factoryBean = (StringFactoryBean) bf.getBean("&stringFactoryBean")__		final FactoryBeanDependentBean bean = (FactoryBeanDependentBean) bf.getBean("factoryBeanDependentBean")___		assertNotNull("The singleton StringFactoryBean should have been registered.", factoryBean)__		assertNotNull("The factoryBeanDependentBean should have been registered.", bean)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the StringFactoryBean.",_				factoryBean, bean.getFactoryBean())___		bf.destroySingletons()__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,via,link,autowired,autowired,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,bean,autowired,with,factory,bean,default,listable,bean,factory,bf,new,default,listable,bean,factory,autowired,annotation,bean,post,processor,bpp,new,autowired,annotation,bean,post,processor,bpp,set,bean,factory,bf,bf,add,bean,post,processor,bpp,bf,register,bean,definition,factory,bean,dependent,bean,new,root,bean,definition,factory,bean,dependent,bean,class,bf,register,singleton,string,factory,bean,new,string,factory,bean,final,string,factory,bean,factory,bean,string,factory,bean,bf,get,bean,string,factory,bean,final,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,bf,get,bean,factory,bean,dependent,bean,assert,not,null,the,singleton,string,factory,bean,should,have,been,registered,factory,bean,assert,not,null,the,factory,bean,dependent,bean,should,have,been,registered,bean,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,string,factory,bean,factory,bean,bean,get,factory,bean,bf,destroy,singletons
AutowiredAnnotationBeanPostProcessorTests -> @Test 	public void testBeanAutowiredWithFactoryBean();1410951731;Verifies that a dependency on a {@link FactoryBean} can be autowired via_{@link Autowired @Autowired}, specifically addressing the JIRA issue_raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testBeanAutowiredWithFactoryBean() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor()__		bpp.setBeanFactory(bf)__		bf.addBeanPostProcessor(bpp)__		bf.registerBeanDefinition("factoryBeanDependentBean", new RootBeanDefinition(FactoryBeanDependentBean.class))__		bf.registerSingleton("stringFactoryBean", new StringFactoryBean())___		final StringFactoryBean factoryBean = (StringFactoryBean) bf.getBean("&stringFactoryBean")__		final FactoryBeanDependentBean bean = (FactoryBeanDependentBean) bf.getBean("factoryBeanDependentBean")___		assertNotNull("The singleton StringFactoryBean should have been registered.", factoryBean)__		assertNotNull("The factoryBeanDependentBean should have been registered.", bean)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the StringFactoryBean.",_				factoryBean, bean.getFactoryBean())___		bf.destroySingletons()__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,via,link,autowired,autowired,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,bean,autowired,with,factory,bean,default,listable,bean,factory,bf,new,default,listable,bean,factory,autowired,annotation,bean,post,processor,bpp,new,autowired,annotation,bean,post,processor,bpp,set,bean,factory,bf,bf,add,bean,post,processor,bpp,bf,register,bean,definition,factory,bean,dependent,bean,new,root,bean,definition,factory,bean,dependent,bean,class,bf,register,singleton,string,factory,bean,new,string,factory,bean,final,string,factory,bean,factory,bean,string,factory,bean,bf,get,bean,string,factory,bean,final,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,bf,get,bean,factory,bean,dependent,bean,assert,not,null,the,singleton,string,factory,bean,should,have,been,registered,factory,bean,assert,not,null,the,factory,bean,dependent,bean,should,have,been,registered,bean,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,string,factory,bean,factory,bean,bean,get,factory,bean,bf,destroy,singletons
AutowiredAnnotationBeanPostProcessorTests -> @Test 	public void testBeanAutowiredWithFactoryBean();1411076742;Verifies that a dependency on a {@link FactoryBean} can be autowired via_{@link Autowired @Autowired}, specifically addressing the JIRA issue_raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testBeanAutowiredWithFactoryBean() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor()__		bpp.setBeanFactory(bf)__		bf.addBeanPostProcessor(bpp)__		bf.registerBeanDefinition("factoryBeanDependentBean", new RootBeanDefinition(FactoryBeanDependentBean.class))__		bf.registerSingleton("stringFactoryBean", new StringFactoryBean())___		final StringFactoryBean factoryBean = (StringFactoryBean) bf.getBean("&stringFactoryBean")__		final FactoryBeanDependentBean bean = (FactoryBeanDependentBean) bf.getBean("factoryBeanDependentBean")___		assertNotNull("The singleton StringFactoryBean should have been registered.", factoryBean)__		assertNotNull("The factoryBeanDependentBean should have been registered.", bean)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the StringFactoryBean.",_				factoryBean, bean.getFactoryBean())___		bf.destroySingletons()__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,via,link,autowired,autowired,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,bean,autowired,with,factory,bean,default,listable,bean,factory,bf,new,default,listable,bean,factory,autowired,annotation,bean,post,processor,bpp,new,autowired,annotation,bean,post,processor,bpp,set,bean,factory,bf,bf,add,bean,post,processor,bpp,bf,register,bean,definition,factory,bean,dependent,bean,new,root,bean,definition,factory,bean,dependent,bean,class,bf,register,singleton,string,factory,bean,new,string,factory,bean,final,string,factory,bean,factory,bean,string,factory,bean,bf,get,bean,string,factory,bean,final,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,bf,get,bean,factory,bean,dependent,bean,assert,not,null,the,singleton,string,factory,bean,should,have,been,registered,factory,bean,assert,not,null,the,factory,bean,dependent,bean,should,have,been,registered,bean,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,string,factory,bean,factory,bean,bean,get,factory,bean,bf,destroy,singletons
AutowiredAnnotationBeanPostProcessorTests -> @Test 	public void testBeanAutowiredWithFactoryBean();1417981895;Verifies that a dependency on a {@link FactoryBean} can be autowired via_{@link Autowired @Autowired}, specifically addressing the JIRA issue_raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testBeanAutowiredWithFactoryBean() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor()__		bpp.setBeanFactory(bf)__		bf.addBeanPostProcessor(bpp)__		bf.registerBeanDefinition("factoryBeanDependentBean", new RootBeanDefinition(FactoryBeanDependentBean.class))__		bf.registerSingleton("stringFactoryBean", new StringFactoryBean())___		final StringFactoryBean factoryBean = (StringFactoryBean) bf.getBean("&stringFactoryBean")__		final FactoryBeanDependentBean bean = (FactoryBeanDependentBean) bf.getBean("factoryBeanDependentBean")___		assertNotNull("The singleton StringFactoryBean should have been registered.", factoryBean)__		assertNotNull("The factoryBeanDependentBean should have been registered.", bean)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the StringFactoryBean.",_				factoryBean, bean.getFactoryBean())___		bf.destroySingletons()__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,via,link,autowired,autowired,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,bean,autowired,with,factory,bean,default,listable,bean,factory,bf,new,default,listable,bean,factory,autowired,annotation,bean,post,processor,bpp,new,autowired,annotation,bean,post,processor,bpp,set,bean,factory,bf,bf,add,bean,post,processor,bpp,bf,register,bean,definition,factory,bean,dependent,bean,new,root,bean,definition,factory,bean,dependent,bean,class,bf,register,singleton,string,factory,bean,new,string,factory,bean,final,string,factory,bean,factory,bean,string,factory,bean,bf,get,bean,string,factory,bean,final,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,bf,get,bean,factory,bean,dependent,bean,assert,not,null,the,singleton,string,factory,bean,should,have,been,registered,factory,bean,assert,not,null,the,factory,bean,dependent,bean,should,have,been,registered,bean,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,string,factory,bean,factory,bean,bean,get,factory,bean,bf,destroy,singletons
AutowiredAnnotationBeanPostProcessorTests -> @Test 	public void testBeanAutowiredWithFactoryBean();1426780215;Verifies that a dependency on a {@link FactoryBean} can be autowired via_{@link Autowired @Autowired}, specifically addressing the JIRA issue_raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testBeanAutowiredWithFactoryBean() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor()__		bpp.setBeanFactory(bf)__		bf.addBeanPostProcessor(bpp)__		bf.registerBeanDefinition("factoryBeanDependentBean", new RootBeanDefinition(FactoryBeanDependentBean.class))__		bf.registerSingleton("stringFactoryBean", new StringFactoryBean())___		final StringFactoryBean factoryBean = (StringFactoryBean) bf.getBean("&stringFactoryBean")__		final FactoryBeanDependentBean bean = (FactoryBeanDependentBean) bf.getBean("factoryBeanDependentBean")___		assertNotNull("The singleton StringFactoryBean should have been registered.", factoryBean)__		assertNotNull("The factoryBeanDependentBean should have been registered.", bean)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the StringFactoryBean.",_				factoryBean, bean.getFactoryBean())___		bf.destroySingletons()__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,via,link,autowired,autowired,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,bean,autowired,with,factory,bean,default,listable,bean,factory,bf,new,default,listable,bean,factory,autowired,annotation,bean,post,processor,bpp,new,autowired,annotation,bean,post,processor,bpp,set,bean,factory,bf,bf,add,bean,post,processor,bpp,bf,register,bean,definition,factory,bean,dependent,bean,new,root,bean,definition,factory,bean,dependent,bean,class,bf,register,singleton,string,factory,bean,new,string,factory,bean,final,string,factory,bean,factory,bean,string,factory,bean,bf,get,bean,string,factory,bean,final,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,bf,get,bean,factory,bean,dependent,bean,assert,not,null,the,singleton,string,factory,bean,should,have,been,registered,factory,bean,assert,not,null,the,factory,bean,dependent,bean,should,have,been,registered,bean,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,string,factory,bean,factory,bean,bean,get,factory,bean,bf,destroy,singletons
AutowiredAnnotationBeanPostProcessorTests -> @Test 	public void testBeanAutowiredWithFactoryBean();1445895936;Verifies that a dependency on a {@link FactoryBean} can be autowired via_{@link Autowired @Autowired}, specifically addressing the JIRA issue_raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testBeanAutowiredWithFactoryBean() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor()__		bpp.setBeanFactory(bf)__		bf.addBeanPostProcessor(bpp)__		bf.registerBeanDefinition("factoryBeanDependentBean", new RootBeanDefinition(FactoryBeanDependentBean.class))__		bf.registerSingleton("stringFactoryBean", new StringFactoryBean())___		final StringFactoryBean factoryBean = (StringFactoryBean) bf.getBean("&stringFactoryBean")__		final FactoryBeanDependentBean bean = (FactoryBeanDependentBean) bf.getBean("factoryBeanDependentBean")___		assertNotNull("The singleton StringFactoryBean should have been registered.", factoryBean)__		assertNotNull("The factoryBeanDependentBean should have been registered.", bean)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the StringFactoryBean.",_				factoryBean, bean.getFactoryBean())___		bf.destroySingletons()__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,via,link,autowired,autowired,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,bean,autowired,with,factory,bean,default,listable,bean,factory,bf,new,default,listable,bean,factory,autowired,annotation,bean,post,processor,bpp,new,autowired,annotation,bean,post,processor,bpp,set,bean,factory,bf,bf,add,bean,post,processor,bpp,bf,register,bean,definition,factory,bean,dependent,bean,new,root,bean,definition,factory,bean,dependent,bean,class,bf,register,singleton,string,factory,bean,new,string,factory,bean,final,string,factory,bean,factory,bean,string,factory,bean,bf,get,bean,string,factory,bean,final,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,bf,get,bean,factory,bean,dependent,bean,assert,not,null,the,singleton,string,factory,bean,should,have,been,registered,factory,bean,assert,not,null,the,factory,bean,dependent,bean,should,have,been,registered,bean,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,string,factory,bean,factory,bean,bean,get,factory,bean,bf,destroy,singletons
AutowiredAnnotationBeanPostProcessorTests -> @Test 	public void testBeanAutowiredWithFactoryBean();1450707100;Verifies that a dependency on a {@link FactoryBean} can be autowired via_{@link Autowired @Autowired}, specifically addressing the JIRA issue_raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testBeanAutowiredWithFactoryBean() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor()__		bpp.setBeanFactory(bf)__		bf.addBeanPostProcessor(bpp)__		bf.registerBeanDefinition("factoryBeanDependentBean", new RootBeanDefinition(FactoryBeanDependentBean.class))__		bf.registerSingleton("stringFactoryBean", new StringFactoryBean())___		final StringFactoryBean factoryBean = (StringFactoryBean) bf.getBean("&stringFactoryBean")__		final FactoryBeanDependentBean bean = (FactoryBeanDependentBean) bf.getBean("factoryBeanDependentBean")___		assertNotNull("The singleton StringFactoryBean should have been registered.", factoryBean)__		assertNotNull("The factoryBeanDependentBean should have been registered.", bean)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the StringFactoryBean.",_				factoryBean, bean.getFactoryBean())___		bf.destroySingletons()__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,via,link,autowired,autowired,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,bean,autowired,with,factory,bean,default,listable,bean,factory,bf,new,default,listable,bean,factory,autowired,annotation,bean,post,processor,bpp,new,autowired,annotation,bean,post,processor,bpp,set,bean,factory,bf,bf,add,bean,post,processor,bpp,bf,register,bean,definition,factory,bean,dependent,bean,new,root,bean,definition,factory,bean,dependent,bean,class,bf,register,singleton,string,factory,bean,new,string,factory,bean,final,string,factory,bean,factory,bean,string,factory,bean,bf,get,bean,string,factory,bean,final,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,bf,get,bean,factory,bean,dependent,bean,assert,not,null,the,singleton,string,factory,bean,should,have,been,registered,factory,bean,assert,not,null,the,factory,bean,dependent,bean,should,have,been,registered,bean,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,string,factory,bean,factory,bean,bean,get,factory,bean,bf,destroy,singletons
AutowiredAnnotationBeanPostProcessorTests -> @Test 	public void testBeanAutowiredWithFactoryBean();1453753548;Verifies that a dependency on a {@link FactoryBean} can be autowired via_{@link Autowired @Autowired}, specifically addressing the JIRA issue_raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testBeanAutowiredWithFactoryBean() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor()__		bpp.setBeanFactory(bf)__		bf.addBeanPostProcessor(bpp)__		bf.registerBeanDefinition("factoryBeanDependentBean", new RootBeanDefinition(FactoryBeanDependentBean.class))__		bf.registerSingleton("stringFactoryBean", new StringFactoryBean())___		final StringFactoryBean factoryBean = (StringFactoryBean) bf.getBean("&stringFactoryBean")__		final FactoryBeanDependentBean bean = (FactoryBeanDependentBean) bf.getBean("factoryBeanDependentBean")___		assertNotNull("The singleton StringFactoryBean should have been registered.", factoryBean)__		assertNotNull("The factoryBeanDependentBean should have been registered.", bean)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the StringFactoryBean.",_				factoryBean, bean.getFactoryBean())___		bf.destroySingletons()__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,via,link,autowired,autowired,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,bean,autowired,with,factory,bean,default,listable,bean,factory,bf,new,default,listable,bean,factory,autowired,annotation,bean,post,processor,bpp,new,autowired,annotation,bean,post,processor,bpp,set,bean,factory,bf,bf,add,bean,post,processor,bpp,bf,register,bean,definition,factory,bean,dependent,bean,new,root,bean,definition,factory,bean,dependent,bean,class,bf,register,singleton,string,factory,bean,new,string,factory,bean,final,string,factory,bean,factory,bean,string,factory,bean,bf,get,bean,string,factory,bean,final,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,bf,get,bean,factory,bean,dependent,bean,assert,not,null,the,singleton,string,factory,bean,should,have,been,registered,factory,bean,assert,not,null,the,factory,bean,dependent,bean,should,have,been,registered,bean,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,string,factory,bean,factory,bean,bean,get,factory,bean,bf,destroy,singletons
AutowiredAnnotationBeanPostProcessorTests -> @Test 	public void testBeanAutowiredWithFactoryBean();1454521350;Verifies that a dependency on a {@link FactoryBean} can be autowired via_{@link Autowired @Autowired}, specifically addressing the JIRA issue_raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testBeanAutowiredWithFactoryBean() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor()__		bpp.setBeanFactory(bf)__		bf.addBeanPostProcessor(bpp)__		bf.registerBeanDefinition("factoryBeanDependentBean", new RootBeanDefinition(FactoryBeanDependentBean.class))__		bf.registerSingleton("stringFactoryBean", new StringFactoryBean())___		final StringFactoryBean factoryBean = (StringFactoryBean) bf.getBean("&stringFactoryBean")__		final FactoryBeanDependentBean bean = (FactoryBeanDependentBean) bf.getBean("factoryBeanDependentBean")___		assertNotNull("The singleton StringFactoryBean should have been registered.", factoryBean)__		assertNotNull("The factoryBeanDependentBean should have been registered.", bean)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the StringFactoryBean.",_				factoryBean, bean.getFactoryBean())___		bf.destroySingletons()__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,via,link,autowired,autowired,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,bean,autowired,with,factory,bean,default,listable,bean,factory,bf,new,default,listable,bean,factory,autowired,annotation,bean,post,processor,bpp,new,autowired,annotation,bean,post,processor,bpp,set,bean,factory,bf,bf,add,bean,post,processor,bpp,bf,register,bean,definition,factory,bean,dependent,bean,new,root,bean,definition,factory,bean,dependent,bean,class,bf,register,singleton,string,factory,bean,new,string,factory,bean,final,string,factory,bean,factory,bean,string,factory,bean,bf,get,bean,string,factory,bean,final,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,bf,get,bean,factory,bean,dependent,bean,assert,not,null,the,singleton,string,factory,bean,should,have,been,registered,factory,bean,assert,not,null,the,factory,bean,dependent,bean,should,have,been,registered,bean,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,string,factory,bean,factory,bean,bean,get,factory,bean,bf,destroy,singletons
AutowiredAnnotationBeanPostProcessorTests -> @Test 	public void testBeanAutowiredWithFactoryBean();1455295525;Verifies that a dependency on a {@link FactoryBean} can be autowired via_{@link Autowired @Autowired}, specifically addressing the JIRA issue_raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testBeanAutowiredWithFactoryBean() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor()__		bpp.setBeanFactory(bf)__		bf.addBeanPostProcessor(bpp)__		bf.registerBeanDefinition("factoryBeanDependentBean", new RootBeanDefinition(FactoryBeanDependentBean.class))__		bf.registerSingleton("stringFactoryBean", new StringFactoryBean())___		final StringFactoryBean factoryBean = (StringFactoryBean) bf.getBean("&stringFactoryBean")__		final FactoryBeanDependentBean bean = (FactoryBeanDependentBean) bf.getBean("factoryBeanDependentBean")___		assertNotNull("The singleton StringFactoryBean should have been registered.", factoryBean)__		assertNotNull("The factoryBeanDependentBean should have been registered.", bean)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the StringFactoryBean.",_				factoryBean, bean.getFactoryBean())___		bf.destroySingletons()__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,via,link,autowired,autowired,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,bean,autowired,with,factory,bean,default,listable,bean,factory,bf,new,default,listable,bean,factory,autowired,annotation,bean,post,processor,bpp,new,autowired,annotation,bean,post,processor,bpp,set,bean,factory,bf,bf,add,bean,post,processor,bpp,bf,register,bean,definition,factory,bean,dependent,bean,new,root,bean,definition,factory,bean,dependent,bean,class,bf,register,singleton,string,factory,bean,new,string,factory,bean,final,string,factory,bean,factory,bean,string,factory,bean,bf,get,bean,string,factory,bean,final,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,bf,get,bean,factory,bean,dependent,bean,assert,not,null,the,singleton,string,factory,bean,should,have,been,registered,factory,bean,assert,not,null,the,factory,bean,dependent,bean,should,have,been,registered,bean,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,string,factory,bean,factory,bean,bean,get,factory,bean,bf,destroy,singletons
AutowiredAnnotationBeanPostProcessorTests -> @Test 	public void testBeanAutowiredWithFactoryBean();1455836728;Verifies that a dependency on a {@link FactoryBean} can be autowired via_{@link Autowired @Autowired}, specifically addressing the JIRA issue_raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testBeanAutowiredWithFactoryBean() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor()__		bpp.setBeanFactory(bf)__		bf.addBeanPostProcessor(bpp)__		bf.registerBeanDefinition("factoryBeanDependentBean", new RootBeanDefinition(FactoryBeanDependentBean.class))__		bf.registerSingleton("stringFactoryBean", new StringFactoryBean())___		final StringFactoryBean factoryBean = (StringFactoryBean) bf.getBean("&stringFactoryBean")__		final FactoryBeanDependentBean bean = (FactoryBeanDependentBean) bf.getBean("factoryBeanDependentBean")___		assertNotNull("The singleton StringFactoryBean should have been registered.", factoryBean)__		assertNotNull("The factoryBeanDependentBean should have been registered.", bean)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the StringFactoryBean.",_				factoryBean, bean.getFactoryBean())___		bf.destroySingletons()__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,via,link,autowired,autowired,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,bean,autowired,with,factory,bean,default,listable,bean,factory,bf,new,default,listable,bean,factory,autowired,annotation,bean,post,processor,bpp,new,autowired,annotation,bean,post,processor,bpp,set,bean,factory,bf,bf,add,bean,post,processor,bpp,bf,register,bean,definition,factory,bean,dependent,bean,new,root,bean,definition,factory,bean,dependent,bean,class,bf,register,singleton,string,factory,bean,new,string,factory,bean,final,string,factory,bean,factory,bean,string,factory,bean,bf,get,bean,string,factory,bean,final,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,bf,get,bean,factory,bean,dependent,bean,assert,not,null,the,singleton,string,factory,bean,should,have,been,registered,factory,bean,assert,not,null,the,factory,bean,dependent,bean,should,have,been,registered,bean,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,string,factory,bean,factory,bean,bean,get,factory,bean,bf,destroy,singletons
AutowiredAnnotationBeanPostProcessorTests -> @Test 	public void testBeanAutowiredWithFactoryBean();1455889195;Verifies that a dependency on a {@link FactoryBean} can be autowired via_{@link Autowired @Autowired}, specifically addressing the JIRA issue_raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testBeanAutowiredWithFactoryBean() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor()__		bpp.setBeanFactory(bf)__		bf.addBeanPostProcessor(bpp)__		bf.registerBeanDefinition("factoryBeanDependentBean", new RootBeanDefinition(FactoryBeanDependentBean.class))__		bf.registerSingleton("stringFactoryBean", new StringFactoryBean())___		final StringFactoryBean factoryBean = (StringFactoryBean) bf.getBean("&stringFactoryBean")__		final FactoryBeanDependentBean bean = (FactoryBeanDependentBean) bf.getBean("factoryBeanDependentBean")___		assertNotNull("The singleton StringFactoryBean should have been registered.", factoryBean)__		assertNotNull("The factoryBeanDependentBean should have been registered.", bean)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the StringFactoryBean.",_				factoryBean, bean.getFactoryBean())___		bf.destroySingletons()__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,via,link,autowired,autowired,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,bean,autowired,with,factory,bean,default,listable,bean,factory,bf,new,default,listable,bean,factory,autowired,annotation,bean,post,processor,bpp,new,autowired,annotation,bean,post,processor,bpp,set,bean,factory,bf,bf,add,bean,post,processor,bpp,bf,register,bean,definition,factory,bean,dependent,bean,new,root,bean,definition,factory,bean,dependent,bean,class,bf,register,singleton,string,factory,bean,new,string,factory,bean,final,string,factory,bean,factory,bean,string,factory,bean,bf,get,bean,string,factory,bean,final,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,bf,get,bean,factory,bean,dependent,bean,assert,not,null,the,singleton,string,factory,bean,should,have,been,registered,factory,bean,assert,not,null,the,factory,bean,dependent,bean,should,have,been,registered,bean,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,string,factory,bean,factory,bean,bean,get,factory,bean,bf,destroy,singletons
AutowiredAnnotationBeanPostProcessorTests -> @Test 	public void testBeanAutowiredWithFactoryBean();1456234230;Verifies that a dependency on a {@link FactoryBean} can be autowired via_{@link Autowired @Autowired}, specifically addressing the JIRA issue_raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testBeanAutowiredWithFactoryBean() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor()__		bpp.setBeanFactory(bf)__		bf.addBeanPostProcessor(bpp)__		bf.registerBeanDefinition("factoryBeanDependentBean", new RootBeanDefinition(FactoryBeanDependentBean.class))__		bf.registerSingleton("stringFactoryBean", new StringFactoryBean())___		final StringFactoryBean factoryBean = (StringFactoryBean) bf.getBean("&stringFactoryBean")__		final FactoryBeanDependentBean bean = (FactoryBeanDependentBean) bf.getBean("factoryBeanDependentBean")___		assertNotNull("The singleton StringFactoryBean should have been registered.", factoryBean)__		assertNotNull("The factoryBeanDependentBean should have been registered.", bean)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the StringFactoryBean.",_				factoryBean, bean.getFactoryBean())___		bf.destroySingletons()__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,via,link,autowired,autowired,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,bean,autowired,with,factory,bean,default,listable,bean,factory,bf,new,default,listable,bean,factory,autowired,annotation,bean,post,processor,bpp,new,autowired,annotation,bean,post,processor,bpp,set,bean,factory,bf,bf,add,bean,post,processor,bpp,bf,register,bean,definition,factory,bean,dependent,bean,new,root,bean,definition,factory,bean,dependent,bean,class,bf,register,singleton,string,factory,bean,new,string,factory,bean,final,string,factory,bean,factory,bean,string,factory,bean,bf,get,bean,string,factory,bean,final,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,bf,get,bean,factory,bean,dependent,bean,assert,not,null,the,singleton,string,factory,bean,should,have,been,registered,factory,bean,assert,not,null,the,factory,bean,dependent,bean,should,have,been,registered,bean,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,string,factory,bean,factory,bean,bean,get,factory,bean,bf,destroy,singletons
AutowiredAnnotationBeanPostProcessorTests -> @Test 	public void testBeanAutowiredWithFactoryBean();1456432609;Verifies that a dependency on a {@link FactoryBean} can be autowired via_{@link Autowired @Autowired}, specifically addressing the JIRA issue_raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testBeanAutowiredWithFactoryBean() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor()__		bpp.setBeanFactory(bf)__		bf.addBeanPostProcessor(bpp)__		bf.registerBeanDefinition("factoryBeanDependentBean", new RootBeanDefinition(FactoryBeanDependentBean.class))__		bf.registerSingleton("stringFactoryBean", new StringFactoryBean())___		final StringFactoryBean factoryBean = (StringFactoryBean) bf.getBean("&stringFactoryBean")__		final FactoryBeanDependentBean bean = (FactoryBeanDependentBean) bf.getBean("factoryBeanDependentBean")___		assertNotNull("The singleton StringFactoryBean should have been registered.", factoryBean)__		assertNotNull("The factoryBeanDependentBean should have been registered.", bean)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the StringFactoryBean.",_				factoryBean, bean.getFactoryBean())___		bf.destroySingletons()__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,via,link,autowired,autowired,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,bean,autowired,with,factory,bean,default,listable,bean,factory,bf,new,default,listable,bean,factory,autowired,annotation,bean,post,processor,bpp,new,autowired,annotation,bean,post,processor,bpp,set,bean,factory,bf,bf,add,bean,post,processor,bpp,bf,register,bean,definition,factory,bean,dependent,bean,new,root,bean,definition,factory,bean,dependent,bean,class,bf,register,singleton,string,factory,bean,new,string,factory,bean,final,string,factory,bean,factory,bean,string,factory,bean,bf,get,bean,string,factory,bean,final,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,bf,get,bean,factory,bean,dependent,bean,assert,not,null,the,singleton,string,factory,bean,should,have,been,registered,factory,bean,assert,not,null,the,factory,bean,dependent,bean,should,have,been,registered,bean,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,string,factory,bean,factory,bean,bean,get,factory,bean,bf,destroy,singletons
AutowiredAnnotationBeanPostProcessorTests -> @Test 	public void testBeanAutowiredWithFactoryBean();1459774710;Verifies that a dependency on a {@link FactoryBean} can be autowired via_{@link Autowired @Autowired}, specifically addressing the JIRA issue_raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testBeanAutowiredWithFactoryBean() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor()__		bpp.setBeanFactory(bf)__		bf.addBeanPostProcessor(bpp)__		bf.registerBeanDefinition("factoryBeanDependentBean", new RootBeanDefinition(FactoryBeanDependentBean.class))__		bf.registerSingleton("stringFactoryBean", new StringFactoryBean())___		final StringFactoryBean factoryBean = (StringFactoryBean) bf.getBean("&stringFactoryBean")__		final FactoryBeanDependentBean bean = (FactoryBeanDependentBean) bf.getBean("factoryBeanDependentBean")___		assertNotNull("The singleton StringFactoryBean should have been registered.", factoryBean)__		assertNotNull("The factoryBeanDependentBean should have been registered.", bean)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the StringFactoryBean.",_				factoryBean, bean.getFactoryBean())___		bf.destroySingletons()__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,via,link,autowired,autowired,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,bean,autowired,with,factory,bean,default,listable,bean,factory,bf,new,default,listable,bean,factory,autowired,annotation,bean,post,processor,bpp,new,autowired,annotation,bean,post,processor,bpp,set,bean,factory,bf,bf,add,bean,post,processor,bpp,bf,register,bean,definition,factory,bean,dependent,bean,new,root,bean,definition,factory,bean,dependent,bean,class,bf,register,singleton,string,factory,bean,new,string,factory,bean,final,string,factory,bean,factory,bean,string,factory,bean,bf,get,bean,string,factory,bean,final,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,bf,get,bean,factory,bean,dependent,bean,assert,not,null,the,singleton,string,factory,bean,should,have,been,registered,factory,bean,assert,not,null,the,factory,bean,dependent,bean,should,have,been,registered,bean,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,string,factory,bean,factory,bean,bean,get,factory,bean,bf,destroy,singletons
AutowiredAnnotationBeanPostProcessorTests -> @Test 	public void testBeanAutowiredWithFactoryBean();1467730834;Verifies that a dependency on a {@link FactoryBean} can be autowired via_{@link Autowired @Autowired}, specifically addressing the JIRA issue_raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testBeanAutowiredWithFactoryBean() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor()__		bpp.setBeanFactory(bf)__		bf.addBeanPostProcessor(bpp)__		bf.registerBeanDefinition("factoryBeanDependentBean", new RootBeanDefinition(FactoryBeanDependentBean.class))__		bf.registerSingleton("stringFactoryBean", new StringFactoryBean())___		final StringFactoryBean factoryBean = (StringFactoryBean) bf.getBean("&stringFactoryBean")__		final FactoryBeanDependentBean bean = (FactoryBeanDependentBean) bf.getBean("factoryBeanDependentBean")___		assertNotNull("The singleton StringFactoryBean should have been registered.", factoryBean)__		assertNotNull("The factoryBeanDependentBean should have been registered.", bean)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the StringFactoryBean.",_				factoryBean, bean.getFactoryBean())___		bf.destroySingletons()__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,via,link,autowired,autowired,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,bean,autowired,with,factory,bean,default,listable,bean,factory,bf,new,default,listable,bean,factory,autowired,annotation,bean,post,processor,bpp,new,autowired,annotation,bean,post,processor,bpp,set,bean,factory,bf,bf,add,bean,post,processor,bpp,bf,register,bean,definition,factory,bean,dependent,bean,new,root,bean,definition,factory,bean,dependent,bean,class,bf,register,singleton,string,factory,bean,new,string,factory,bean,final,string,factory,bean,factory,bean,string,factory,bean,bf,get,bean,string,factory,bean,final,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,bf,get,bean,factory,bean,dependent,bean,assert,not,null,the,singleton,string,factory,bean,should,have,been,registered,factory,bean,assert,not,null,the,factory,bean,dependent,bean,should,have,been,registered,bean,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,string,factory,bean,factory,bean,bean,get,factory,bean,bf,destroy,singletons
AutowiredAnnotationBeanPostProcessorTests -> @Test 	public void testBeanAutowiredWithFactoryBean();1471445956;Verifies that a dependency on a {@link FactoryBean} can be autowired via_{@link Autowired @Autowired}, specifically addressing the JIRA issue_raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testBeanAutowiredWithFactoryBean() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor()__		bpp.setBeanFactory(bf)__		bf.addBeanPostProcessor(bpp)__		bf.registerBeanDefinition("factoryBeanDependentBean", new RootBeanDefinition(FactoryBeanDependentBean.class))__		bf.registerSingleton("stringFactoryBean", new StringFactoryBean())___		final StringFactoryBean factoryBean = (StringFactoryBean) bf.getBean("&stringFactoryBean")__		final FactoryBeanDependentBean bean = (FactoryBeanDependentBean) bf.getBean("factoryBeanDependentBean")___		assertNotNull("The singleton StringFactoryBean should have been registered.", factoryBean)__		assertNotNull("The factoryBeanDependentBean should have been registered.", bean)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the StringFactoryBean.",_				factoryBean, bean.getFactoryBean())___		bf.destroySingletons()__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,via,link,autowired,autowired,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,bean,autowired,with,factory,bean,default,listable,bean,factory,bf,new,default,listable,bean,factory,autowired,annotation,bean,post,processor,bpp,new,autowired,annotation,bean,post,processor,bpp,set,bean,factory,bf,bf,add,bean,post,processor,bpp,bf,register,bean,definition,factory,bean,dependent,bean,new,root,bean,definition,factory,bean,dependent,bean,class,bf,register,singleton,string,factory,bean,new,string,factory,bean,final,string,factory,bean,factory,bean,string,factory,bean,bf,get,bean,string,factory,bean,final,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,bf,get,bean,factory,bean,dependent,bean,assert,not,null,the,singleton,string,factory,bean,should,have,been,registered,factory,bean,assert,not,null,the,factory,bean,dependent,bean,should,have,been,registered,bean,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,string,factory,bean,factory,bean,bean,get,factory,bean,bf,destroy,singletons
AutowiredAnnotationBeanPostProcessorTests -> @Test 	public void testBeanAutowiredWithFactoryBean();1472072207;Verifies that a dependency on a {@link FactoryBean} can be autowired via_{@link Autowired @Autowired}, specifically addressing the JIRA issue_raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testBeanAutowiredWithFactoryBean() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor()__		bpp.setBeanFactory(bf)__		bf.addBeanPostProcessor(bpp)__		bf.registerBeanDefinition("factoryBeanDependentBean", new RootBeanDefinition(FactoryBeanDependentBean.class))__		bf.registerSingleton("stringFactoryBean", new StringFactoryBean())___		final StringFactoryBean factoryBean = (StringFactoryBean) bf.getBean("&stringFactoryBean")__		final FactoryBeanDependentBean bean = (FactoryBeanDependentBean) bf.getBean("factoryBeanDependentBean")___		assertNotNull("The singleton StringFactoryBean should have been registered.", factoryBean)__		assertNotNull("The factoryBeanDependentBean should have been registered.", bean)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the StringFactoryBean.",_				factoryBean, bean.getFactoryBean())___		bf.destroySingletons()__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,via,link,autowired,autowired,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,bean,autowired,with,factory,bean,default,listable,bean,factory,bf,new,default,listable,bean,factory,autowired,annotation,bean,post,processor,bpp,new,autowired,annotation,bean,post,processor,bpp,set,bean,factory,bf,bf,add,bean,post,processor,bpp,bf,register,bean,definition,factory,bean,dependent,bean,new,root,bean,definition,factory,bean,dependent,bean,class,bf,register,singleton,string,factory,bean,new,string,factory,bean,final,string,factory,bean,factory,bean,string,factory,bean,bf,get,bean,string,factory,bean,final,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,bf,get,bean,factory,bean,dependent,bean,assert,not,null,the,singleton,string,factory,bean,should,have,been,registered,factory,bean,assert,not,null,the,factory,bean,dependent,bean,should,have,been,registered,bean,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,string,factory,bean,factory,bean,bean,get,factory,bean,bf,destroy,singletons
AutowiredAnnotationBeanPostProcessorTests -> @Test 	public void testBeanAutowiredWithFactoryBean();1474010431;Verifies that a dependency on a {@link FactoryBean} can be autowired via_{@link Autowired @Autowired}, specifically addressing the JIRA issue_raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testBeanAutowiredWithFactoryBean() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor()__		bpp.setBeanFactory(bf)__		bf.addBeanPostProcessor(bpp)__		bf.registerBeanDefinition("factoryBeanDependentBean", new RootBeanDefinition(FactoryBeanDependentBean.class))__		bf.registerSingleton("stringFactoryBean", new StringFactoryBean())___		final StringFactoryBean factoryBean = (StringFactoryBean) bf.getBean("&stringFactoryBean")__		final FactoryBeanDependentBean bean = (FactoryBeanDependentBean) bf.getBean("factoryBeanDependentBean")___		assertNotNull("The singleton StringFactoryBean should have been registered.", factoryBean)__		assertNotNull("The factoryBeanDependentBean should have been registered.", bean)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the StringFactoryBean.",_				factoryBean, bean.getFactoryBean())___		bf.destroySingletons()__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,via,link,autowired,autowired,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,bean,autowired,with,factory,bean,default,listable,bean,factory,bf,new,default,listable,bean,factory,autowired,annotation,bean,post,processor,bpp,new,autowired,annotation,bean,post,processor,bpp,set,bean,factory,bf,bf,add,bean,post,processor,bpp,bf,register,bean,definition,factory,bean,dependent,bean,new,root,bean,definition,factory,bean,dependent,bean,class,bf,register,singleton,string,factory,bean,new,string,factory,bean,final,string,factory,bean,factory,bean,string,factory,bean,bf,get,bean,string,factory,bean,final,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,bf,get,bean,factory,bean,dependent,bean,assert,not,null,the,singleton,string,factory,bean,should,have,been,registered,factory,bean,assert,not,null,the,factory,bean,dependent,bean,should,have,been,registered,bean,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,string,factory,bean,factory,bean,bean,get,factory,bean,bf,destroy,singletons
AutowiredAnnotationBeanPostProcessorTests -> @Test 	public void testBeanAutowiredWithFactoryBean();1480540075;Verifies that a dependency on a {@link FactoryBean} can be autowired via_{@link Autowired @Autowired}, specifically addressing the JIRA issue_raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testBeanAutowiredWithFactoryBean() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor()__		bpp.setBeanFactory(bf)__		bf.addBeanPostProcessor(bpp)__		bf.registerBeanDefinition("factoryBeanDependentBean", new RootBeanDefinition(FactoryBeanDependentBean.class))__		bf.registerSingleton("stringFactoryBean", new StringFactoryBean())___		final StringFactoryBean factoryBean = (StringFactoryBean) bf.getBean("&stringFactoryBean")__		final FactoryBeanDependentBean bean = (FactoryBeanDependentBean) bf.getBean("factoryBeanDependentBean")___		assertNotNull("The singleton StringFactoryBean should have been registered.", factoryBean)__		assertNotNull("The factoryBeanDependentBean should have been registered.", bean)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the StringFactoryBean.",_				factoryBean, bean.getFactoryBean())___		bf.destroySingletons()__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,via,link,autowired,autowired,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,bean,autowired,with,factory,bean,default,listable,bean,factory,bf,new,default,listable,bean,factory,autowired,annotation,bean,post,processor,bpp,new,autowired,annotation,bean,post,processor,bpp,set,bean,factory,bf,bf,add,bean,post,processor,bpp,bf,register,bean,definition,factory,bean,dependent,bean,new,root,bean,definition,factory,bean,dependent,bean,class,bf,register,singleton,string,factory,bean,new,string,factory,bean,final,string,factory,bean,factory,bean,string,factory,bean,bf,get,bean,string,factory,bean,final,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,bf,get,bean,factory,bean,dependent,bean,assert,not,null,the,singleton,string,factory,bean,should,have,been,registered,factory,bean,assert,not,null,the,factory,bean,dependent,bean,should,have,been,registered,bean,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,string,factory,bean,factory,bean,bean,get,factory,bean,bf,destroy,singletons
AutowiredAnnotationBeanPostProcessorTests -> @Test 	public void testBeanAutowiredWithFactoryBean();1481577984;Verifies that a dependency on a {@link FactoryBean} can be autowired via_{@link Autowired @Autowired}, specifically addressing the JIRA issue_raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testBeanAutowiredWithFactoryBean() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor()__		bpp.setBeanFactory(bf)__		bf.addBeanPostProcessor(bpp)__		bf.registerBeanDefinition("factoryBeanDependentBean", new RootBeanDefinition(FactoryBeanDependentBean.class))__		bf.registerSingleton("stringFactoryBean", new StringFactoryBean())___		final StringFactoryBean factoryBean = (StringFactoryBean) bf.getBean("&stringFactoryBean")__		final FactoryBeanDependentBean bean = (FactoryBeanDependentBean) bf.getBean("factoryBeanDependentBean")___		assertNotNull("The singleton StringFactoryBean should have been registered.", factoryBean)__		assertNotNull("The factoryBeanDependentBean should have been registered.", bean)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the StringFactoryBean.",_				factoryBean, bean.getFactoryBean())___		bf.destroySingletons()__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,via,link,autowired,autowired,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,bean,autowired,with,factory,bean,default,listable,bean,factory,bf,new,default,listable,bean,factory,autowired,annotation,bean,post,processor,bpp,new,autowired,annotation,bean,post,processor,bpp,set,bean,factory,bf,bf,add,bean,post,processor,bpp,bf,register,bean,definition,factory,bean,dependent,bean,new,root,bean,definition,factory,bean,dependent,bean,class,bf,register,singleton,string,factory,bean,new,string,factory,bean,final,string,factory,bean,factory,bean,string,factory,bean,bf,get,bean,string,factory,bean,final,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,bf,get,bean,factory,bean,dependent,bean,assert,not,null,the,singleton,string,factory,bean,should,have,been,registered,factory,bean,assert,not,null,the,factory,bean,dependent,bean,should,have,been,registered,bean,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,string,factory,bean,factory,bean,bean,get,factory,bean,bf,destroy,singletons
AutowiredAnnotationBeanPostProcessorTests -> @Test 	public void testBeanAutowiredWithFactoryBean();1482012648;Verifies that a dependency on a {@link FactoryBean} can be autowired via_{@link Autowired @Autowired}, specifically addressing the JIRA issue_raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testBeanAutowiredWithFactoryBean() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor()__		bpp.setBeanFactory(bf)__		bf.addBeanPostProcessor(bpp)__		bf.registerBeanDefinition("factoryBeanDependentBean", new RootBeanDefinition(FactoryBeanDependentBean.class))__		bf.registerSingleton("stringFactoryBean", new StringFactoryBean())___		final StringFactoryBean factoryBean = (StringFactoryBean) bf.getBean("&stringFactoryBean")__		final FactoryBeanDependentBean bean = (FactoryBeanDependentBean) bf.getBean("factoryBeanDependentBean")___		assertNotNull("The singleton StringFactoryBean should have been registered.", factoryBean)__		assertNotNull("The factoryBeanDependentBean should have been registered.", bean)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the StringFactoryBean.",_				factoryBean, bean.getFactoryBean())___		bf.destroySingletons()__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,via,link,autowired,autowired,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,bean,autowired,with,factory,bean,default,listable,bean,factory,bf,new,default,listable,bean,factory,autowired,annotation,bean,post,processor,bpp,new,autowired,annotation,bean,post,processor,bpp,set,bean,factory,bf,bf,add,bean,post,processor,bpp,bf,register,bean,definition,factory,bean,dependent,bean,new,root,bean,definition,factory,bean,dependent,bean,class,bf,register,singleton,string,factory,bean,new,string,factory,bean,final,string,factory,bean,factory,bean,string,factory,bean,bf,get,bean,string,factory,bean,final,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,bf,get,bean,factory,bean,dependent,bean,assert,not,null,the,singleton,string,factory,bean,should,have,been,registered,factory,bean,assert,not,null,the,factory,bean,dependent,bean,should,have,been,registered,bean,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,string,factory,bean,factory,bean,bean,get,factory,bean,bf,destroy,singletons
AutowiredAnnotationBeanPostProcessorTests -> @Test 	public void testBeanAutowiredWithFactoryBean();1482515352;Verifies that a dependency on a {@link FactoryBean} can be autowired via_{@link Autowired @Autowired}, specifically addressing the JIRA issue_raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testBeanAutowiredWithFactoryBean() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor()__		bpp.setBeanFactory(bf)__		bf.addBeanPostProcessor(bpp)__		bf.registerBeanDefinition("factoryBeanDependentBean", new RootBeanDefinition(FactoryBeanDependentBean.class))__		bf.registerSingleton("stringFactoryBean", new StringFactoryBean())___		final StringFactoryBean factoryBean = (StringFactoryBean) bf.getBean("&stringFactoryBean")__		final FactoryBeanDependentBean bean = (FactoryBeanDependentBean) bf.getBean("factoryBeanDependentBean")___		assertNotNull("The singleton StringFactoryBean should have been registered.", factoryBean)__		assertNotNull("The factoryBeanDependentBean should have been registered.", bean)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the StringFactoryBean.",_				factoryBean, bean.getFactoryBean())___		bf.destroySingletons()__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,via,link,autowired,autowired,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,bean,autowired,with,factory,bean,default,listable,bean,factory,bf,new,default,listable,bean,factory,autowired,annotation,bean,post,processor,bpp,new,autowired,annotation,bean,post,processor,bpp,set,bean,factory,bf,bf,add,bean,post,processor,bpp,bf,register,bean,definition,factory,bean,dependent,bean,new,root,bean,definition,factory,bean,dependent,bean,class,bf,register,singleton,string,factory,bean,new,string,factory,bean,final,string,factory,bean,factory,bean,string,factory,bean,bf,get,bean,string,factory,bean,final,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,bf,get,bean,factory,bean,dependent,bean,assert,not,null,the,singleton,string,factory,bean,should,have,been,registered,factory,bean,assert,not,null,the,factory,bean,dependent,bean,should,have,been,registered,bean,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,string,factory,bean,factory,bean,bean,get,factory,bean,bf,destroy,singletons
AutowiredAnnotationBeanPostProcessorTests -> @Test 	public void testBeanAutowiredWithFactoryBean();1484252141;Verifies that a dependency on a {@link FactoryBean} can be autowired via_{@link Autowired @Autowired}, specifically addressing the JIRA issue_raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testBeanAutowiredWithFactoryBean() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor()__		bpp.setBeanFactory(bf)__		bf.addBeanPostProcessor(bpp)__		bf.registerBeanDefinition("factoryBeanDependentBean", new RootBeanDefinition(FactoryBeanDependentBean.class))__		bf.registerSingleton("stringFactoryBean", new StringFactoryBean())___		final StringFactoryBean factoryBean = (StringFactoryBean) bf.getBean("&stringFactoryBean")__		final FactoryBeanDependentBean bean = (FactoryBeanDependentBean) bf.getBean("factoryBeanDependentBean")___		assertNotNull("The singleton StringFactoryBean should have been registered.", factoryBean)__		assertNotNull("The factoryBeanDependentBean should have been registered.", bean)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the StringFactoryBean.",_				factoryBean, bean.getFactoryBean())___		bf.destroySingletons()__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,via,link,autowired,autowired,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,bean,autowired,with,factory,bean,default,listable,bean,factory,bf,new,default,listable,bean,factory,autowired,annotation,bean,post,processor,bpp,new,autowired,annotation,bean,post,processor,bpp,set,bean,factory,bf,bf,add,bean,post,processor,bpp,bf,register,bean,definition,factory,bean,dependent,bean,new,root,bean,definition,factory,bean,dependent,bean,class,bf,register,singleton,string,factory,bean,new,string,factory,bean,final,string,factory,bean,factory,bean,string,factory,bean,bf,get,bean,string,factory,bean,final,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,bf,get,bean,factory,bean,dependent,bean,assert,not,null,the,singleton,string,factory,bean,should,have,been,registered,factory,bean,assert,not,null,the,factory,bean,dependent,bean,should,have,been,registered,bean,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,string,factory,bean,factory,bean,bean,get,factory,bean,bf,destroy,singletons
AutowiredAnnotationBeanPostProcessorTests -> @Test 	public void testBeanAutowiredWithFactoryBean();1484301200;Verifies that a dependency on a {@link FactoryBean} can be autowired via_{@link Autowired @Autowired}, specifically addressing the JIRA issue_raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testBeanAutowiredWithFactoryBean() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor()__		bpp.setBeanFactory(bf)__		bf.addBeanPostProcessor(bpp)__		bf.registerBeanDefinition("factoryBeanDependentBean", new RootBeanDefinition(FactoryBeanDependentBean.class))__		bf.registerSingleton("stringFactoryBean", new StringFactoryBean())___		final StringFactoryBean factoryBean = (StringFactoryBean) bf.getBean("&stringFactoryBean")__		final FactoryBeanDependentBean bean = (FactoryBeanDependentBean) bf.getBean("factoryBeanDependentBean")___		assertNotNull("The singleton StringFactoryBean should have been registered.", factoryBean)__		assertNotNull("The factoryBeanDependentBean should have been registered.", bean)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the StringFactoryBean.",_				factoryBean, bean.getFactoryBean())___		bf.destroySingletons()__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,via,link,autowired,autowired,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,bean,autowired,with,factory,bean,default,listable,bean,factory,bf,new,default,listable,bean,factory,autowired,annotation,bean,post,processor,bpp,new,autowired,annotation,bean,post,processor,bpp,set,bean,factory,bf,bf,add,bean,post,processor,bpp,bf,register,bean,definition,factory,bean,dependent,bean,new,root,bean,definition,factory,bean,dependent,bean,class,bf,register,singleton,string,factory,bean,new,string,factory,bean,final,string,factory,bean,factory,bean,string,factory,bean,bf,get,bean,string,factory,bean,final,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,bf,get,bean,factory,bean,dependent,bean,assert,not,null,the,singleton,string,factory,bean,should,have,been,registered,factory,bean,assert,not,null,the,factory,bean,dependent,bean,should,have,been,registered,bean,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,string,factory,bean,factory,bean,bean,get,factory,bean,bf,destroy,singletons
AutowiredAnnotationBeanPostProcessorTests -> @Test 	public void testBeanAutowiredWithFactoryBean();1484564438;Verifies that a dependency on a {@link FactoryBean} can be autowired via_{@link Autowired @Autowired}, specifically addressing the JIRA issue_raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testBeanAutowiredWithFactoryBean() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor()__		bpp.setBeanFactory(bf)__		bf.addBeanPostProcessor(bpp)__		bf.registerBeanDefinition("factoryBeanDependentBean", new RootBeanDefinition(FactoryBeanDependentBean.class))__		bf.registerSingleton("stringFactoryBean", new StringFactoryBean())___		final StringFactoryBean factoryBean = (StringFactoryBean) bf.getBean("&stringFactoryBean")__		final FactoryBeanDependentBean bean = (FactoryBeanDependentBean) bf.getBean("factoryBeanDependentBean")___		assertNotNull("The singleton StringFactoryBean should have been registered.", factoryBean)__		assertNotNull("The factoryBeanDependentBean should have been registered.", bean)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the StringFactoryBean.",_				factoryBean, bean.getFactoryBean())___		bf.destroySingletons()__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,via,link,autowired,autowired,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,bean,autowired,with,factory,bean,default,listable,bean,factory,bf,new,default,listable,bean,factory,autowired,annotation,bean,post,processor,bpp,new,autowired,annotation,bean,post,processor,bpp,set,bean,factory,bf,bf,add,bean,post,processor,bpp,bf,register,bean,definition,factory,bean,dependent,bean,new,root,bean,definition,factory,bean,dependent,bean,class,bf,register,singleton,string,factory,bean,new,string,factory,bean,final,string,factory,bean,factory,bean,string,factory,bean,bf,get,bean,string,factory,bean,final,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,bf,get,bean,factory,bean,dependent,bean,assert,not,null,the,singleton,string,factory,bean,should,have,been,registered,factory,bean,assert,not,null,the,factory,bean,dependent,bean,should,have,been,registered,bean,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,string,factory,bean,factory,bean,bean,get,factory,bean,bf,destroy,singletons
AutowiredAnnotationBeanPostProcessorTests -> @Test 	public void testBeanAutowiredWithFactoryBean();1485277217;Verifies that a dependency on a {@link FactoryBean} can be autowired via_{@link Autowired @Autowired}, specifically addressing the JIRA issue_raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testBeanAutowiredWithFactoryBean() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor()__		bpp.setBeanFactory(bf)__		bf.addBeanPostProcessor(bpp)__		bf.registerBeanDefinition("factoryBeanDependentBean", new RootBeanDefinition(FactoryBeanDependentBean.class))__		bf.registerSingleton("stringFactoryBean", new StringFactoryBean())___		final StringFactoryBean factoryBean = (StringFactoryBean) bf.getBean("&stringFactoryBean")__		final FactoryBeanDependentBean bean = (FactoryBeanDependentBean) bf.getBean("factoryBeanDependentBean")___		assertNotNull("The singleton StringFactoryBean should have been registered.", factoryBean)__		assertNotNull("The factoryBeanDependentBean should have been registered.", bean)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the StringFactoryBean.",_				factoryBean, bean.getFactoryBean())___		bf.destroySingletons()__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,via,link,autowired,autowired,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,bean,autowired,with,factory,bean,default,listable,bean,factory,bf,new,default,listable,bean,factory,autowired,annotation,bean,post,processor,bpp,new,autowired,annotation,bean,post,processor,bpp,set,bean,factory,bf,bf,add,bean,post,processor,bpp,bf,register,bean,definition,factory,bean,dependent,bean,new,root,bean,definition,factory,bean,dependent,bean,class,bf,register,singleton,string,factory,bean,new,string,factory,bean,final,string,factory,bean,factory,bean,string,factory,bean,bf,get,bean,string,factory,bean,final,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,bf,get,bean,factory,bean,dependent,bean,assert,not,null,the,singleton,string,factory,bean,should,have,been,registered,factory,bean,assert,not,null,the,factory,bean,dependent,bean,should,have,been,registered,bean,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,string,factory,bean,factory,bean,bean,get,factory,bean,bf,destroy,singletons
AutowiredAnnotationBeanPostProcessorTests -> @Test 	public void testBeanAutowiredWithFactoryBean();1486719768;Verifies that a dependency on a {@link FactoryBean} can be autowired via_{@link Autowired @Autowired}, specifically addressing the JIRA issue_raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testBeanAutowiredWithFactoryBean() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor()__		bpp.setBeanFactory(bf)__		bf.addBeanPostProcessor(bpp)__		bf.registerBeanDefinition("factoryBeanDependentBean", new RootBeanDefinition(FactoryBeanDependentBean.class))__		bf.registerSingleton("stringFactoryBean", new StringFactoryBean())___		final StringFactoryBean factoryBean = (StringFactoryBean) bf.getBean("&stringFactoryBean")__		final FactoryBeanDependentBean bean = (FactoryBeanDependentBean) bf.getBean("factoryBeanDependentBean")___		assertNotNull("The singleton StringFactoryBean should have been registered.", factoryBean)__		assertNotNull("The factoryBeanDependentBean should have been registered.", bean)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the StringFactoryBean.",_				factoryBean, bean.getFactoryBean())___		bf.destroySingletons()__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,via,link,autowired,autowired,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,bean,autowired,with,factory,bean,default,listable,bean,factory,bf,new,default,listable,bean,factory,autowired,annotation,bean,post,processor,bpp,new,autowired,annotation,bean,post,processor,bpp,set,bean,factory,bf,bf,add,bean,post,processor,bpp,bf,register,bean,definition,factory,bean,dependent,bean,new,root,bean,definition,factory,bean,dependent,bean,class,bf,register,singleton,string,factory,bean,new,string,factory,bean,final,string,factory,bean,factory,bean,string,factory,bean,bf,get,bean,string,factory,bean,final,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,bf,get,bean,factory,bean,dependent,bean,assert,not,null,the,singleton,string,factory,bean,should,have,been,registered,factory,bean,assert,not,null,the,factory,bean,dependent,bean,should,have,been,registered,bean,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,string,factory,bean,factory,bean,bean,get,factory,bean,bf,destroy,singletons
AutowiredAnnotationBeanPostProcessorTests -> @Test 	public void testBeanAutowiredWithFactoryBean();1493811736;Verifies that a dependency on a {@link FactoryBean} can be autowired via_{@link Autowired @Autowired}, specifically addressing the JIRA issue_raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testBeanAutowiredWithFactoryBean() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor()__		bpp.setBeanFactory(bf)__		bf.addBeanPostProcessor(bpp)__		bf.registerBeanDefinition("factoryBeanDependentBean", new RootBeanDefinition(FactoryBeanDependentBean.class))__		bf.registerSingleton("stringFactoryBean", new StringFactoryBean())___		final StringFactoryBean factoryBean = (StringFactoryBean) bf.getBean("&stringFactoryBean")__		final FactoryBeanDependentBean bean = (FactoryBeanDependentBean) bf.getBean("factoryBeanDependentBean")___		assertNotNull("The singleton StringFactoryBean should have been registered.", factoryBean)__		assertNotNull("The factoryBeanDependentBean should have been registered.", bean)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the StringFactoryBean.",_				factoryBean, bean.getFactoryBean())___		bf.destroySingletons()__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,via,link,autowired,autowired,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,bean,autowired,with,factory,bean,default,listable,bean,factory,bf,new,default,listable,bean,factory,autowired,annotation,bean,post,processor,bpp,new,autowired,annotation,bean,post,processor,bpp,set,bean,factory,bf,bf,add,bean,post,processor,bpp,bf,register,bean,definition,factory,bean,dependent,bean,new,root,bean,definition,factory,bean,dependent,bean,class,bf,register,singleton,string,factory,bean,new,string,factory,bean,final,string,factory,bean,factory,bean,string,factory,bean,bf,get,bean,string,factory,bean,final,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,bf,get,bean,factory,bean,dependent,bean,assert,not,null,the,singleton,string,factory,bean,should,have,been,registered,factory,bean,assert,not,null,the,factory,bean,dependent,bean,should,have,been,registered,bean,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,string,factory,bean,factory,bean,bean,get,factory,bean,bf,destroy,singletons
AutowiredAnnotationBeanPostProcessorTests -> @Test 	public void testBeanAutowiredWithFactoryBean();1503007895;Verifies that a dependency on a {@link FactoryBean} can be autowired via_{@link Autowired @Autowired}, specifically addressing the JIRA issue_raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testBeanAutowiredWithFactoryBean() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor()__		bpp.setBeanFactory(bf)__		bf.addBeanPostProcessor(bpp)__		bf.registerBeanDefinition("factoryBeanDependentBean", new RootBeanDefinition(FactoryBeanDependentBean.class))__		bf.registerSingleton("stringFactoryBean", new StringFactoryBean())___		final StringFactoryBean factoryBean = (StringFactoryBean) bf.getBean("&stringFactoryBean")__		final FactoryBeanDependentBean bean = (FactoryBeanDependentBean) bf.getBean("factoryBeanDependentBean")___		assertNotNull("The singleton StringFactoryBean should have been registered.", factoryBean)__		assertNotNull("The factoryBeanDependentBean should have been registered.", bean)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the StringFactoryBean.",_				factoryBean, bean.getFactoryBean())___		bf.destroySingletons()__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,via,link,autowired,autowired,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,bean,autowired,with,factory,bean,default,listable,bean,factory,bf,new,default,listable,bean,factory,autowired,annotation,bean,post,processor,bpp,new,autowired,annotation,bean,post,processor,bpp,set,bean,factory,bf,bf,add,bean,post,processor,bpp,bf,register,bean,definition,factory,bean,dependent,bean,new,root,bean,definition,factory,bean,dependent,bean,class,bf,register,singleton,string,factory,bean,new,string,factory,bean,final,string,factory,bean,factory,bean,string,factory,bean,bf,get,bean,string,factory,bean,final,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,bf,get,bean,factory,bean,dependent,bean,assert,not,null,the,singleton,string,factory,bean,should,have,been,registered,factory,bean,assert,not,null,the,factory,bean,dependent,bean,should,have,been,registered,bean,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,string,factory,bean,factory,bean,bean,get,factory,bean,bf,destroy,singletons
AutowiredAnnotationBeanPostProcessorTests -> @Test 	public void testBeanAutowiredWithFactoryBean();1506372315;Verifies that a dependency on a {@link FactoryBean} can be autowired via_{@link Autowired @Autowired}, specifically addressing the JIRA issue_raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testBeanAutowiredWithFactoryBean() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor()__		bpp.setBeanFactory(bf)__		bf.addBeanPostProcessor(bpp)__		bf.registerBeanDefinition("factoryBeanDependentBean", new RootBeanDefinition(FactoryBeanDependentBean.class))__		bf.registerSingleton("stringFactoryBean", new StringFactoryBean())___		final StringFactoryBean factoryBean = (StringFactoryBean) bf.getBean("&stringFactoryBean")__		final FactoryBeanDependentBean bean = (FactoryBeanDependentBean) bf.getBean("factoryBeanDependentBean")___		assertNotNull("The singleton StringFactoryBean should have been registered.", factoryBean)__		assertNotNull("The factoryBeanDependentBean should have been registered.", bean)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the StringFactoryBean.",_				factoryBean, bean.getFactoryBean())___		bf.destroySingletons()__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,via,link,autowired,autowired,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,bean,autowired,with,factory,bean,default,listable,bean,factory,bf,new,default,listable,bean,factory,autowired,annotation,bean,post,processor,bpp,new,autowired,annotation,bean,post,processor,bpp,set,bean,factory,bf,bf,add,bean,post,processor,bpp,bf,register,bean,definition,factory,bean,dependent,bean,new,root,bean,definition,factory,bean,dependent,bean,class,bf,register,singleton,string,factory,bean,new,string,factory,bean,final,string,factory,bean,factory,bean,string,factory,bean,bf,get,bean,string,factory,bean,final,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,bf,get,bean,factory,bean,dependent,bean,assert,not,null,the,singleton,string,factory,bean,should,have,been,registered,factory,bean,assert,not,null,the,factory,bean,dependent,bean,should,have,been,registered,bean,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,string,factory,bean,factory,bean,bean,get,factory,bean,bf,destroy,singletons
AutowiredAnnotationBeanPostProcessorTests -> @Test 	public void testBeanAutowiredWithFactoryBean();1506940031;Verifies that a dependency on a {@link FactoryBean} can be autowired via_{@link Autowired @Autowired}, specifically addressing the JIRA issue_raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testBeanAutowiredWithFactoryBean() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor()__		bpp.setBeanFactory(bf)__		bf.addBeanPostProcessor(bpp)__		bf.registerBeanDefinition("factoryBeanDependentBean", new RootBeanDefinition(FactoryBeanDependentBean.class))__		bf.registerSingleton("stringFactoryBean", new StringFactoryBean())___		final StringFactoryBean factoryBean = (StringFactoryBean) bf.getBean("&stringFactoryBean")__		final FactoryBeanDependentBean bean = (FactoryBeanDependentBean) bf.getBean("factoryBeanDependentBean")___		assertNotNull("The singleton StringFactoryBean should have been registered.", factoryBean)__		assertNotNull("The factoryBeanDependentBean should have been registered.", bean)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the StringFactoryBean.",_				factoryBean, bean.getFactoryBean())___		bf.destroySingletons()__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,via,link,autowired,autowired,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,bean,autowired,with,factory,bean,default,listable,bean,factory,bf,new,default,listable,bean,factory,autowired,annotation,bean,post,processor,bpp,new,autowired,annotation,bean,post,processor,bpp,set,bean,factory,bf,bf,add,bean,post,processor,bpp,bf,register,bean,definition,factory,bean,dependent,bean,new,root,bean,definition,factory,bean,dependent,bean,class,bf,register,singleton,string,factory,bean,new,string,factory,bean,final,string,factory,bean,factory,bean,string,factory,bean,bf,get,bean,string,factory,bean,final,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,bf,get,bean,factory,bean,dependent,bean,assert,not,null,the,singleton,string,factory,bean,should,have,been,registered,factory,bean,assert,not,null,the,factory,bean,dependent,bean,should,have,been,registered,bean,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,string,factory,bean,factory,bean,bean,get,factory,bean,bf,destroy,singletons
AutowiredAnnotationBeanPostProcessorTests -> @Test 	public void testBeanAutowiredWithFactoryBean();1509971271;Verifies that a dependency on a {@link FactoryBean} can be autowired via_{@link Autowired @Autowired}, specifically addressing the JIRA issue_raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testBeanAutowiredWithFactoryBean() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor()__		bpp.setBeanFactory(bf)__		bf.addBeanPostProcessor(bpp)__		bf.registerBeanDefinition("factoryBeanDependentBean", new RootBeanDefinition(FactoryBeanDependentBean.class))__		bf.registerSingleton("stringFactoryBean", new StringFactoryBean())___		final StringFactoryBean factoryBean = (StringFactoryBean) bf.getBean("&stringFactoryBean")__		final FactoryBeanDependentBean bean = (FactoryBeanDependentBean) bf.getBean("factoryBeanDependentBean")___		assertNotNull("The singleton StringFactoryBean should have been registered.", factoryBean)__		assertNotNull("The factoryBeanDependentBean should have been registered.", bean)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the StringFactoryBean.",_				factoryBean, bean.getFactoryBean())___		bf.destroySingletons()__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,via,link,autowired,autowired,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,bean,autowired,with,factory,bean,default,listable,bean,factory,bf,new,default,listable,bean,factory,autowired,annotation,bean,post,processor,bpp,new,autowired,annotation,bean,post,processor,bpp,set,bean,factory,bf,bf,add,bean,post,processor,bpp,bf,register,bean,definition,factory,bean,dependent,bean,new,root,bean,definition,factory,bean,dependent,bean,class,bf,register,singleton,string,factory,bean,new,string,factory,bean,final,string,factory,bean,factory,bean,string,factory,bean,bf,get,bean,string,factory,bean,final,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,bf,get,bean,factory,bean,dependent,bean,assert,not,null,the,singleton,string,factory,bean,should,have,been,registered,factory,bean,assert,not,null,the,factory,bean,dependent,bean,should,have,been,registered,bean,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,string,factory,bean,factory,bean,bean,get,factory,bean,bf,destroy,singletons
AutowiredAnnotationBeanPostProcessorTests -> @Test 	public void testBeanAutowiredWithFactoryBean();1515364415;Verifies that a dependency on a {@link FactoryBean} can be autowired via_{@link Autowired @Autowired}, specifically addressing the JIRA issue_raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testBeanAutowiredWithFactoryBean() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor()__		bpp.setBeanFactory(bf)__		bf.addBeanPostProcessor(bpp)__		bf.registerBeanDefinition("factoryBeanDependentBean", new RootBeanDefinition(FactoryBeanDependentBean.class))__		bf.registerSingleton("stringFactoryBean", new StringFactoryBean())___		final StringFactoryBean factoryBean = (StringFactoryBean) bf.getBean("&stringFactoryBean")__		final FactoryBeanDependentBean bean = (FactoryBeanDependentBean) bf.getBean("factoryBeanDependentBean")___		assertNotNull("The singleton StringFactoryBean should have been registered.", factoryBean)__		assertNotNull("The factoryBeanDependentBean should have been registered.", bean)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the StringFactoryBean.",_				factoryBean, bean.getFactoryBean())___		bf.destroySingletons()__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,via,link,autowired,autowired,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,bean,autowired,with,factory,bean,default,listable,bean,factory,bf,new,default,listable,bean,factory,autowired,annotation,bean,post,processor,bpp,new,autowired,annotation,bean,post,processor,bpp,set,bean,factory,bf,bf,add,bean,post,processor,bpp,bf,register,bean,definition,factory,bean,dependent,bean,new,root,bean,definition,factory,bean,dependent,bean,class,bf,register,singleton,string,factory,bean,new,string,factory,bean,final,string,factory,bean,factory,bean,string,factory,bean,bf,get,bean,string,factory,bean,final,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,bf,get,bean,factory,bean,dependent,bean,assert,not,null,the,singleton,string,factory,bean,should,have,been,registered,factory,bean,assert,not,null,the,factory,bean,dependent,bean,should,have,been,registered,bean,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,string,factory,bean,factory,bean,bean,get,factory,bean,bf,destroy,singletons
AutowiredAnnotationBeanPostProcessorTests -> @Test 	public void testBeanAutowiredWithFactoryBean();1531243692;Verifies that a dependency on a {@link FactoryBean} can be autowired via_{@link Autowired @Autowired}, specifically addressing the JIRA issue_raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testBeanAutowiredWithFactoryBean() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor()__		bpp.setBeanFactory(bf)__		bf.addBeanPostProcessor(bpp)__		bf.registerBeanDefinition("factoryBeanDependentBean", new RootBeanDefinition(FactoryBeanDependentBean.class))__		bf.registerSingleton("stringFactoryBean", new StringFactoryBean())___		final StringFactoryBean factoryBean = (StringFactoryBean) bf.getBean("&stringFactoryBean")__		final FactoryBeanDependentBean bean = (FactoryBeanDependentBean) bf.getBean("factoryBeanDependentBean")___		assertNotNull("The singleton StringFactoryBean should have been registered.", factoryBean)__		assertNotNull("The factoryBeanDependentBean should have been registered.", bean)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the StringFactoryBean.",_				factoryBean, bean.getFactoryBean())___		bf.destroySingletons()__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,via,link,autowired,autowired,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,bean,autowired,with,factory,bean,default,listable,bean,factory,bf,new,default,listable,bean,factory,autowired,annotation,bean,post,processor,bpp,new,autowired,annotation,bean,post,processor,bpp,set,bean,factory,bf,bf,add,bean,post,processor,bpp,bf,register,bean,definition,factory,bean,dependent,bean,new,root,bean,definition,factory,bean,dependent,bean,class,bf,register,singleton,string,factory,bean,new,string,factory,bean,final,string,factory,bean,factory,bean,string,factory,bean,bf,get,bean,string,factory,bean,final,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,bf,get,bean,factory,bean,dependent,bean,assert,not,null,the,singleton,string,factory,bean,should,have,been,registered,factory,bean,assert,not,null,the,factory,bean,dependent,bean,should,have,been,registered,bean,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,string,factory,bean,factory,bean,bean,get,factory,bean,bf,destroy,singletons
AutowiredAnnotationBeanPostProcessorTests -> @Test 	public void testBeanAutowiredWithFactoryBean();1531739078;Verifies that a dependency on a {@link FactoryBean} can be autowired via_{@link Autowired @Autowired}, specifically addressing the JIRA issue_raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testBeanAutowiredWithFactoryBean() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor()__		bpp.setBeanFactory(bf)__		bf.addBeanPostProcessor(bpp)__		bf.registerBeanDefinition("factoryBeanDependentBean", new RootBeanDefinition(FactoryBeanDependentBean.class))__		bf.registerSingleton("stringFactoryBean", new StringFactoryBean())___		final StringFactoryBean factoryBean = (StringFactoryBean) bf.getBean("&stringFactoryBean")__		final FactoryBeanDependentBean bean = (FactoryBeanDependentBean) bf.getBean("factoryBeanDependentBean")___		assertNotNull("The singleton StringFactoryBean should have been registered.", factoryBean)__		assertNotNull("The factoryBeanDependentBean should have been registered.", bean)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the StringFactoryBean.",_				factoryBean, bean.getFactoryBean())___		bf.destroySingletons()__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,via,link,autowired,autowired,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,bean,autowired,with,factory,bean,default,listable,bean,factory,bf,new,default,listable,bean,factory,autowired,annotation,bean,post,processor,bpp,new,autowired,annotation,bean,post,processor,bpp,set,bean,factory,bf,bf,add,bean,post,processor,bpp,bf,register,bean,definition,factory,bean,dependent,bean,new,root,bean,definition,factory,bean,dependent,bean,class,bf,register,singleton,string,factory,bean,new,string,factory,bean,final,string,factory,bean,factory,bean,string,factory,bean,bf,get,bean,string,factory,bean,final,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,bf,get,bean,factory,bean,dependent,bean,assert,not,null,the,singleton,string,factory,bean,should,have,been,registered,factory,bean,assert,not,null,the,factory,bean,dependent,bean,should,have,been,registered,bean,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,string,factory,bean,factory,bean,bean,get,factory,bean,bf,destroy,singletons
AutowiredAnnotationBeanPostProcessorTests -> @Test 	public void testBeanAutowiredWithFactoryBean();1532385723;Verifies that a dependency on a {@link FactoryBean} can be autowired via_{@link Autowired @Autowired}, specifically addressing the JIRA issue_raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testBeanAutowiredWithFactoryBean() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor()__		bpp.setBeanFactory(bf)__		bf.addBeanPostProcessor(bpp)__		bf.registerBeanDefinition("factoryBeanDependentBean", new RootBeanDefinition(FactoryBeanDependentBean.class))__		bf.registerSingleton("stringFactoryBean", new StringFactoryBean())___		final StringFactoryBean factoryBean = (StringFactoryBean) bf.getBean("&stringFactoryBean")__		final FactoryBeanDependentBean bean = (FactoryBeanDependentBean) bf.getBean("factoryBeanDependentBean")___		assertNotNull("The singleton StringFactoryBean should have been registered.", factoryBean)__		assertNotNull("The factoryBeanDependentBean should have been registered.", bean)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the StringFactoryBean.",_				factoryBean, bean.getFactoryBean())___		bf.destroySingletons()__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,via,link,autowired,autowired,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,bean,autowired,with,factory,bean,default,listable,bean,factory,bf,new,default,listable,bean,factory,autowired,annotation,bean,post,processor,bpp,new,autowired,annotation,bean,post,processor,bpp,set,bean,factory,bf,bf,add,bean,post,processor,bpp,bf,register,bean,definition,factory,bean,dependent,bean,new,root,bean,definition,factory,bean,dependent,bean,class,bf,register,singleton,string,factory,bean,new,string,factory,bean,final,string,factory,bean,factory,bean,string,factory,bean,bf,get,bean,string,factory,bean,final,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,bf,get,bean,factory,bean,dependent,bean,assert,not,null,the,singleton,string,factory,bean,should,have,been,registered,factory,bean,assert,not,null,the,factory,bean,dependent,bean,should,have,been,registered,bean,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,string,factory,bean,factory,bean,bean,get,factory,bean,bf,destroy,singletons
AutowiredAnnotationBeanPostProcessorTests -> @Test 	public void testBeanAutowiredWithFactoryBean();1532430234;Verifies that a dependency on a {@link FactoryBean} can be autowired via_{@link Autowired @Autowired}, specifically addressing the JIRA issue_raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testBeanAutowiredWithFactoryBean() {_		bf.registerBeanDefinition("factoryBeanDependentBean", new RootBeanDefinition(FactoryBeanDependentBean.class))__		bf.registerSingleton("stringFactoryBean", new StringFactoryBean())___		final StringFactoryBean factoryBean = (StringFactoryBean) bf.getBean("&stringFactoryBean")__		final FactoryBeanDependentBean bean = (FactoryBeanDependentBean) bf.getBean("factoryBeanDependentBean")___		assertNotNull("The singleton StringFactoryBean should have been registered.", factoryBean)__		assertNotNull("The factoryBeanDependentBean should have been registered.", bean)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the StringFactoryBean.",_				factoryBean, bean.getFactoryBean())__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,via,link,autowired,autowired,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,bean,autowired,with,factory,bean,bf,register,bean,definition,factory,bean,dependent,bean,new,root,bean,definition,factory,bean,dependent,bean,class,bf,register,singleton,string,factory,bean,new,string,factory,bean,final,string,factory,bean,factory,bean,string,factory,bean,bf,get,bean,string,factory,bean,final,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,bf,get,bean,factory,bean,dependent,bean,assert,not,null,the,singleton,string,factory,bean,should,have,been,registered,factory,bean,assert,not,null,the,factory,bean,dependent,bean,should,have,been,registered,bean,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,string,factory,bean,factory,bean,bean,get,factory,bean
AutowiredAnnotationBeanPostProcessorTests -> @Test 	public void testBeanAutowiredWithFactoryBean();1536855799;Verifies that a dependency on a {@link FactoryBean} can be autowired via_{@link Autowired @Autowired}, specifically addressing the JIRA issue_raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testBeanAutowiredWithFactoryBean() {_		bf.registerBeanDefinition("factoryBeanDependentBean", new RootBeanDefinition(FactoryBeanDependentBean.class))__		bf.registerSingleton("stringFactoryBean", new StringFactoryBean())___		final StringFactoryBean factoryBean = (StringFactoryBean) bf.getBean("&stringFactoryBean")__		final FactoryBeanDependentBean bean = (FactoryBeanDependentBean) bf.getBean("factoryBeanDependentBean")___		assertNotNull("The singleton StringFactoryBean should have been registered.", factoryBean)__		assertNotNull("The factoryBeanDependentBean should have been registered.", bean)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the StringFactoryBean.",_				factoryBean, bean.getFactoryBean())__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,via,link,autowired,autowired,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,bean,autowired,with,factory,bean,bf,register,bean,definition,factory,bean,dependent,bean,new,root,bean,definition,factory,bean,dependent,bean,class,bf,register,singleton,string,factory,bean,new,string,factory,bean,final,string,factory,bean,factory,bean,string,factory,bean,bf,get,bean,string,factory,bean,final,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,bf,get,bean,factory,bean,dependent,bean,assert,not,null,the,singleton,string,factory,bean,should,have,been,registered,factory,bean,assert,not,null,the,factory,bean,dependent,bean,should,have,been,registered,bean,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,string,factory,bean,factory,bean,bean,get,factory,bean
AutowiredAnnotationBeanPostProcessorTests -> @Test 	public void testBeanAutowiredWithFactoryBean();1536962185;Verifies that a dependency on a {@link FactoryBean} can be autowired via_{@link Autowired @Autowired}, specifically addressing the JIRA issue_raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testBeanAutowiredWithFactoryBean() {_		bf.registerBeanDefinition("factoryBeanDependentBean", new RootBeanDefinition(FactoryBeanDependentBean.class))__		bf.registerSingleton("stringFactoryBean", new StringFactoryBean())___		final StringFactoryBean factoryBean = (StringFactoryBean) bf.getBean("&stringFactoryBean")__		final FactoryBeanDependentBean bean = (FactoryBeanDependentBean) bf.getBean("factoryBeanDependentBean")___		assertNotNull("The singleton StringFactoryBean should have been registered.", factoryBean)__		assertNotNull("The factoryBeanDependentBean should have been registered.", bean)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the StringFactoryBean.",_				factoryBean, bean.getFactoryBean())__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,via,link,autowired,autowired,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,bean,autowired,with,factory,bean,bf,register,bean,definition,factory,bean,dependent,bean,new,root,bean,definition,factory,bean,dependent,bean,class,bf,register,singleton,string,factory,bean,new,string,factory,bean,final,string,factory,bean,factory,bean,string,factory,bean,bf,get,bean,string,factory,bean,final,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,bf,get,bean,factory,bean,dependent,bean,assert,not,null,the,singleton,string,factory,bean,should,have,been,registered,factory,bean,assert,not,null,the,factory,bean,dependent,bean,should,have,been,registered,bean,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,string,factory,bean,factory,bean,bean,get,factory,bean
AutowiredAnnotationBeanPostProcessorTests -> @Test 	public void testBeanAutowiredWithFactoryBean();1537435902;Verifies that a dependency on a {@link FactoryBean} can be autowired via_{@link Autowired @Autowired}, specifically addressing the JIRA issue_raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testBeanAutowiredWithFactoryBean() {_		bf.registerBeanDefinition("factoryBeanDependentBean", new RootBeanDefinition(FactoryBeanDependentBean.class))__		bf.registerSingleton("stringFactoryBean", new StringFactoryBean())___		final StringFactoryBean factoryBean = (StringFactoryBean) bf.getBean("&stringFactoryBean")__		final FactoryBeanDependentBean bean = (FactoryBeanDependentBean) bf.getBean("factoryBeanDependentBean")___		assertNotNull("The singleton StringFactoryBean should have been registered.", factoryBean)__		assertNotNull("The factoryBeanDependentBean should have been registered.", bean)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the StringFactoryBean.",_				factoryBean, bean.getFactoryBean())__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,via,link,autowired,autowired,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,bean,autowired,with,factory,bean,bf,register,bean,definition,factory,bean,dependent,bean,new,root,bean,definition,factory,bean,dependent,bean,class,bf,register,singleton,string,factory,bean,new,string,factory,bean,final,string,factory,bean,factory,bean,string,factory,bean,bf,get,bean,string,factory,bean,final,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,bf,get,bean,factory,bean,dependent,bean,assert,not,null,the,singleton,string,factory,bean,should,have,been,registered,factory,bean,assert,not,null,the,factory,bean,dependent,bean,should,have,been,registered,bean,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,string,factory,bean,factory,bean,bean,get,factory,bean
AutowiredAnnotationBeanPostProcessorTests -> @Test 	public void testBeanAutowiredWithFactoryBean();1549016033;Verifies that a dependency on a {@link FactoryBean} can be autowired via_{@link Autowired @Autowired}, specifically addressing the JIRA issue_raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testBeanAutowiredWithFactoryBean() {_		bf.registerBeanDefinition("factoryBeanDependentBean", new RootBeanDefinition(FactoryBeanDependentBean.class))__		bf.registerSingleton("stringFactoryBean", new StringFactoryBean())___		final StringFactoryBean factoryBean = (StringFactoryBean) bf.getBean("&stringFactoryBean")__		final FactoryBeanDependentBean bean = (FactoryBeanDependentBean) bf.getBean("factoryBeanDependentBean")___		assertNotNull("The singleton StringFactoryBean should have been registered.", factoryBean)__		assertNotNull("The factoryBeanDependentBean should have been registered.", bean)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the StringFactoryBean.",_				factoryBean, bean.getFactoryBean())__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,via,link,autowired,autowired,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,bean,autowired,with,factory,bean,bf,register,bean,definition,factory,bean,dependent,bean,new,root,bean,definition,factory,bean,dependent,bean,class,bf,register,singleton,string,factory,bean,new,string,factory,bean,final,string,factory,bean,factory,bean,string,factory,bean,bf,get,bean,string,factory,bean,final,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,bf,get,bean,factory,bean,dependent,bean,assert,not,null,the,singleton,string,factory,bean,should,have,been,registered,factory,bean,assert,not,null,the,factory,bean,dependent,bean,should,have,been,registered,bean,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,string,factory,bean,factory,bean,bean,get,factory,bean
