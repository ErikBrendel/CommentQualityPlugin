commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Before public void setup() {     bf = new DefaultListableBeanFactory().     bf.registerResolvableDependency(BeanFactory.class, bf).     bpp = new AutowiredAnnotationBeanPostProcessor().     bpp.setBeanFactory(bf).     bf.addBeanPostProcessor(bpp).     bf.setAutowireCandidateResolver(new QualifierAnnotationAutowireCandidateResolver()).     bf.setDependencyComparator(AnnotationAwareOrderComparator.INSTANCE). }
false;public;0;4;;@After public void close() {     bf.destroySingletons(). }
false;public;0;11;;@Test public void testIncompleteBeanDefinition() {     bf.registerBeanDefinition("testBean", new GenericBeanDefinition()).     try {         bf.getBean("testBean").         fail("Should have thrown BeanCreationException").     } catch (BeanCreationException ex) {         assertTrue(ex.getRootCause() instanceof IllegalStateException).     } }
false;public;0;16;;@Test public void testResourceInjection() {     RootBeanDefinition bd = new RootBeanDefinition(ResourceInjectionBean.class).     bd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE).     bf.registerBeanDefinition("annotatedBean", bd).     TestBean tb = new TestBean().     bf.registerSingleton("testBean", tb).     ResourceInjectionBean bean = (ResourceInjectionBean) bf.getBean("annotatedBean").     assertSame(tb, bean.getTestBean()).     assertSame(tb, bean.getTestBean2()).     bean = (ResourceInjectionBean) bf.getBean("annotatedBean").     assertSame(tb, bean.getTestBean()).     assertSame(tb, bean.getTestBean2()). }
false;public;0;31;;@Test public void testExtendedResourceInjection() {     RootBeanDefinition bd = new RootBeanDefinition(TypedExtendedResourceInjectionBean.class).     bd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE).     bf.registerBeanDefinition("annotatedBean", bd).     TestBean tb = new TestBean().     bf.registerSingleton("testBean", tb).     NestedTestBean ntb = new NestedTestBean().     bf.registerSingleton("nestedTestBean", ntb).     TypedExtendedResourceInjectionBean bean = (TypedExtendedResourceInjectionBean) bf.getBean("annotatedBean").     assertSame(tb, bean.getTestBean()).     assertSame(tb, bean.getTestBean2()).     assertSame(tb, bean.getTestBean3()).     assertSame(tb, bean.getTestBean4()).     assertSame(ntb, bean.getNestedTestBean()).     assertSame(bf, bean.getBeanFactory()).     bean = (TypedExtendedResourceInjectionBean) bf.getBean("annotatedBean").     assertSame(tb, bean.getTestBean()).     assertSame(tb, bean.getTestBean2()).     assertSame(tb, bean.getTestBean3()).     assertSame(tb, bean.getTestBean4()).     assertSame(ntb, bean.getNestedTestBean()).     assertSame(bf, bean.getBeanFactory()).     String[] depBeans = bf.getDependenciesForBean("annotatedBean").     assertEquals(2, depBeans.length).     assertEquals("testBean", depBeans[0]).     assertEquals("nestedTestBean", depBeans[1]). }
false;public;0;23;;@Test public void testExtendedResourceInjectionWithDestruction() {     bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(TypedExtendedResourceInjectionBean.class)).     bf.registerBeanDefinition("testBean", new RootBeanDefinition(TestBean.class)).     NestedTestBean ntb = new NestedTestBean().     bf.registerSingleton("nestedTestBean", ntb).     TestBean tb = bf.getBean("testBean", TestBean.class).     TypedExtendedResourceInjectionBean bean = (TypedExtendedResourceInjectionBean) bf.getBean("annotatedBean").     assertSame(tb, bean.getTestBean()).     assertSame(tb, bean.getTestBean2()).     assertSame(tb, bean.getTestBean3()).     assertSame(tb, bean.getTestBean4()).     assertSame(ntb, bean.getNestedTestBean()).     assertSame(bf, bean.getBeanFactory()).     assertArrayEquals(new String[] { "testBean", "nestedTestBean" }, bf.getDependenciesForBean("annotatedBean")).     bf.destroySingleton("testBean").     assertFalse(bf.containsSingleton("testBean")).     assertFalse(bf.containsSingleton("annotatedBean")).     assertTrue(bean.destroyed).     assertSame(0, bf.getDependenciesForBean("annotatedBean").length). }
false;public;0;19;;@Test public void testExtendedResourceInjectionWithOverriding() {     RootBeanDefinition annotatedBd = new RootBeanDefinition(TypedExtendedResourceInjectionBean.class).     TestBean tb2 = new TestBean().     annotatedBd.getPropertyValues().add("testBean2", tb2).     bf.registerBeanDefinition("annotatedBean", annotatedBd).     TestBean tb = new TestBean().     bf.registerSingleton("testBean", tb).     NestedTestBean ntb = new NestedTestBean().     bf.registerSingleton("nestedTestBean", ntb).     TypedExtendedResourceInjectionBean bean = (TypedExtendedResourceInjectionBean) bf.getBean("annotatedBean").     assertSame(tb, bean.getTestBean()).     assertSame(tb2, bean.getTestBean2()).     assertSame(tb, bean.getTestBean3()).     assertSame(tb, bean.getTestBean4()).     assertSame(ntb, bean.getNestedTestBean()).     assertSame(bf, bean.getBeanFactory()). }
false;public;0;19;;@Test public void testExtendedResourceInjectionWithSkippedOverriddenMethods() {     RootBeanDefinition annotatedBd = new RootBeanDefinition(OverriddenExtendedResourceInjectionBean.class).     bf.registerBeanDefinition("annotatedBean", annotatedBd).     TestBean tb = new TestBean().     bf.registerSingleton("testBean", tb).     NestedTestBean ntb = new NestedTestBean().     bf.registerSingleton("nestedTestBean", ntb).     OverriddenExtendedResourceInjectionBean bean = (OverriddenExtendedResourceInjectionBean) bf.getBean("annotatedBean").     assertSame(tb, bean.getTestBean()).     assertNull(bean.getTestBean2()).     assertSame(tb, bean.getTestBean3()).     assertSame(tb, bean.getTestBean4()).     assertSame(ntb, bean.getNestedTestBean()).     assertNull(bean.getBeanFactory()).     assertTrue(bean.baseInjected).     assertTrue(bean.subInjected). }
false;public;0;19;;@Test public void testExtendedResourceInjectionWithDefaultMethod() {     RootBeanDefinition annotatedBd = new RootBeanDefinition(DefaultMethodResourceInjectionBean.class).     bf.registerBeanDefinition("annotatedBean", annotatedBd).     TestBean tb = new TestBean().     bf.registerSingleton("testBean", tb).     NestedTestBean ntb = new NestedTestBean().     bf.registerSingleton("nestedTestBean", ntb).     DefaultMethodResourceInjectionBean bean = (DefaultMethodResourceInjectionBean) bf.getBean("annotatedBean").     assertSame(tb, bean.getTestBean()).     assertNull(bean.getTestBean2()).     assertSame(tb, bean.getTestBean3()).     assertSame(tb, bean.getTestBean4()).     assertSame(ntb, bean.getNestedTestBean()).     assertNull(bean.getBeanFactory()).     assertTrue(bean.baseInjected).     assertTrue(bean.subInjected). }
false;public;0;20;;@Test @SuppressWarnings("deprecation") public void testExtendedResourceInjectionWithAtRequired() {     bf.addBeanPostProcessor(new RequiredAnnotationBeanPostProcessor()).     RootBeanDefinition bd = new RootBeanDefinition(TypedExtendedResourceInjectionBean.class).     bd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE).     bf.registerBeanDefinition("annotatedBean", bd).     TestBean tb = new TestBean().     bf.registerSingleton("testBean", tb).     NestedTestBean ntb = new NestedTestBean().     bf.registerSingleton("nestedTestBean", ntb).     TypedExtendedResourceInjectionBean bean = (TypedExtendedResourceInjectionBean) bf.getBean("annotatedBean").     assertSame(tb, bean.getTestBean()).     assertSame(tb, bean.getTestBean2()).     assertSame(tb, bean.getTestBean3()).     assertSame(tb, bean.getTestBean4()).     assertSame(ntb, bean.getNestedTestBean()).     assertSame(bf, bean.getBeanFactory()). }
false;public;0;25;;@Test public void testOptionalResourceInjection() {     bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(OptionalResourceInjectionBean.class)).     TestBean tb = new TestBean().     bf.registerSingleton("testBean", tb).     IndexedTestBean itb = new IndexedTestBean().     bf.registerSingleton("indexedTestBean", itb).     NestedTestBean ntb1 = new NestedTestBean().     bf.registerSingleton("nestedTestBean1", ntb1).     NestedTestBean ntb2 = new NestedTestBean().     bf.registerSingleton("nestedTestBean2", ntb2).     OptionalResourceInjectionBean bean = (OptionalResourceInjectionBean) bf.getBean("annotatedBean").     assertSame(tb, bean.getTestBean()).     assertSame(tb, bean.getTestBean2()).     assertSame(tb, bean.getTestBean3()).     assertSame(tb, bean.getTestBean4()).     assertSame(itb, bean.getIndexedTestBean()).     assertEquals(2, bean.getNestedTestBeans().length).     assertSame(ntb1, bean.getNestedTestBeans()[0]).     assertSame(ntb2, bean.getNestedTestBeans()[1]).     assertEquals(2, bean.nestedTestBeansField.length).     assertSame(ntb1, bean.nestedTestBeansField[0]).     assertSame(ntb2, bean.nestedTestBeansField[1]). }
false;public;0;32;;@Test public void testOptionalCollectionResourceInjection() {     RootBeanDefinition rbd = new RootBeanDefinition(OptionalCollectionResourceInjectionBean.class).     rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE).     bf.registerBeanDefinition("annotatedBean", rbd).     TestBean tb = new TestBean().     bf.registerSingleton("testBean", tb).     IndexedTestBean itb = new IndexedTestBean().     bf.registerSingleton("indexedTestBean", itb).     NestedTestBean ntb1 = new NestedTestBean().     bf.registerSingleton("nestedTestBean1", ntb1).     NestedTestBean ntb2 = new NestedTestBean().     bf.registerSingleton("nestedTestBean2", ntb2).     // Two calls to verify that caching doesn't break re-creation.     OptionalCollectionResourceInjectionBean bean = (OptionalCollectionResourceInjectionBean) bf.getBean("annotatedBean").     bean = (OptionalCollectionResourceInjectionBean) bf.getBean("annotatedBean").     assertSame(tb, bean.getTestBean()).     assertSame(tb, bean.getTestBean2()).     assertSame(tb, bean.getTestBean3()).     assertSame(tb, bean.getTestBean4()).     assertSame(itb, bean.getIndexedTestBean()).     assertEquals(2, bean.getNestedTestBeans().size()).     assertSame(ntb1, bean.getNestedTestBeans().get(0)).     assertSame(ntb2, bean.getNestedTestBeans().get(1)).     assertEquals(2, bean.nestedTestBeansSetter.size()).     assertSame(ntb1, bean.nestedTestBeansSetter.get(0)).     assertSame(ntb2, bean.nestedTestBeansSetter.get(1)).     assertEquals(2, bean.nestedTestBeansField.size()).     assertSame(ntb1, bean.nestedTestBeansField.get(0)).     assertSame(ntb2, bean.nestedTestBeansField.get(1)). }
false;public;0;27;;@Test public void testOptionalCollectionResourceInjectionWithSingleElement() {     RootBeanDefinition rbd = new RootBeanDefinition(OptionalCollectionResourceInjectionBean.class).     rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE).     bf.registerBeanDefinition("annotatedBean", rbd).     TestBean tb = new TestBean().     bf.registerSingleton("testBean", tb).     IndexedTestBean itb = new IndexedTestBean().     bf.registerSingleton("indexedTestBean", itb).     NestedTestBean ntb1 = new NestedTestBean().     bf.registerSingleton("nestedTestBean1", ntb1).     // Two calls to verify that caching doesn't break re-creation.     OptionalCollectionResourceInjectionBean bean = (OptionalCollectionResourceInjectionBean) bf.getBean("annotatedBean").     bean = (OptionalCollectionResourceInjectionBean) bf.getBean("annotatedBean").     assertSame(tb, bean.getTestBean()).     assertSame(tb, bean.getTestBean2()).     assertSame(tb, bean.getTestBean3()).     assertSame(tb, bean.getTestBean4()).     assertSame(itb, bean.getIndexedTestBean()).     assertEquals(1, bean.getNestedTestBeans().size()).     assertSame(ntb1, bean.getNestedTestBeans().get(0)).     assertEquals(1, bean.nestedTestBeansSetter.size()).     assertSame(ntb1, bean.nestedTestBeansSetter.get(0)).     assertEquals(1, bean.nestedTestBeansField.size()).     assertSame(ntb1, bean.nestedTestBeansField.get(0)). }
false;public;0;13;;@Test public void testOptionalResourceInjectionWithIncompleteDependencies() {     bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(OptionalResourceInjectionBean.class)).     TestBean tb = new TestBean().     bf.registerSingleton("testBean", tb).     OptionalResourceInjectionBean bean = (OptionalResourceInjectionBean) bf.getBean("annotatedBean").     assertSame(tb, bean.getTestBean()).     assertSame(tb, bean.getTestBean2()).     assertSame(tb, bean.getTestBean3()).     assertNull(bean.getTestBean4()).     assertNull(bean.getNestedTestBeans()). }
false;public;0;11;;@Test public void testOptionalResourceInjectionWithNoDependencies() {     bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(OptionalResourceInjectionBean.class)).     OptionalResourceInjectionBean bean = (OptionalResourceInjectionBean) bf.getBean("annotatedBean").     assertNull(bean.getTestBean()).     assertNull(bean.getTestBean2()).     assertNull(bean.getTestBean3()).     assertNull(bean.getTestBean4()).     assertNull(bean.getNestedTestBeans()). }
false;public;0;27;;@Test public void testOrderedResourceInjection() {     bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(OptionalResourceInjectionBean.class)).     TestBean tb = new TestBean().     bf.registerSingleton("testBean", tb).     IndexedTestBean itb = new IndexedTestBean().     bf.registerSingleton("indexedTestBean", itb).     OrderedNestedTestBean ntb1 = new OrderedNestedTestBean().     ntb1.setOrder(2).     bf.registerSingleton("nestedTestBean1", ntb1).     OrderedNestedTestBean ntb2 = new OrderedNestedTestBean().     ntb2.setOrder(1).     bf.registerSingleton("nestedTestBean2", ntb2).     OptionalResourceInjectionBean bean = (OptionalResourceInjectionBean) bf.getBean("annotatedBean").     assertSame(tb, bean.getTestBean()).     assertSame(tb, bean.getTestBean2()).     assertSame(tb, bean.getTestBean3()).     assertSame(tb, bean.getTestBean4()).     assertSame(itb, bean.getIndexedTestBean()).     assertEquals(2, bean.getNestedTestBeans().length).     assertSame(ntb2, bean.getNestedTestBeans()[0]).     assertSame(ntb1, bean.getNestedTestBeans()[1]).     assertEquals(2, bean.nestedTestBeansField.length).     assertSame(ntb2, bean.nestedTestBeansField[0]).     assertSame(ntb1, bean.nestedTestBeansField[1]). }
false;public;0;25;;@Test public void testAnnotationOrderedResourceInjection() {     bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(OptionalResourceInjectionBean.class)).     TestBean tb = new TestBean().     bf.registerSingleton("testBean", tb).     IndexedTestBean itb = new IndexedTestBean().     bf.registerSingleton("indexedTestBean", itb).     FixedOrder2NestedTestBean ntb1 = new FixedOrder2NestedTestBean().     bf.registerSingleton("nestedTestBean1", ntb1).     FixedOrder1NestedTestBean ntb2 = new FixedOrder1NestedTestBean().     bf.registerSingleton("nestedTestBean2", ntb2).     OptionalResourceInjectionBean bean = (OptionalResourceInjectionBean) bf.getBean("annotatedBean").     assertSame(tb, bean.getTestBean()).     assertSame(tb, bean.getTestBean2()).     assertSame(tb, bean.getTestBean3()).     assertSame(tb, bean.getTestBean4()).     assertSame(itb, bean.getIndexedTestBean()).     assertEquals(2, bean.getNestedTestBeans().length).     assertSame(ntb2, bean.getNestedTestBeans()[0]).     assertSame(ntb1, bean.getNestedTestBeans()[1]).     assertEquals(2, bean.nestedTestBeansField.length).     assertSame(ntb2, bean.nestedTestBeansField[0]).     assertSame(ntb1, bean.nestedTestBeansField[1]). }
false;public;0;34;;@Test public void testOrderedCollectionResourceInjection() {     RootBeanDefinition rbd = new RootBeanDefinition(OptionalCollectionResourceInjectionBean.class).     rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE).     bf.registerBeanDefinition("annotatedBean", rbd).     TestBean tb = new TestBean().     bf.registerSingleton("testBean", tb).     IndexedTestBean itb = new IndexedTestBean().     bf.registerSingleton("indexedTestBean", itb).     OrderedNestedTestBean ntb1 = new OrderedNestedTestBean().     ntb1.setOrder(2).     bf.registerSingleton("nestedTestBean1", ntb1).     OrderedNestedTestBean ntb2 = new OrderedNestedTestBean().     ntb2.setOrder(1).     bf.registerSingleton("nestedTestBean2", ntb2).     // Two calls to verify that caching doesn't break re-creation.     OptionalCollectionResourceInjectionBean bean = (OptionalCollectionResourceInjectionBean) bf.getBean("annotatedBean").     bean = (OptionalCollectionResourceInjectionBean) bf.getBean("annotatedBean").     assertSame(tb, bean.getTestBean()).     assertSame(tb, bean.getTestBean2()).     assertSame(tb, bean.getTestBean3()).     assertSame(tb, bean.getTestBean4()).     assertSame(itb, bean.getIndexedTestBean()).     assertEquals(2, bean.getNestedTestBeans().size()).     assertSame(ntb2, bean.getNestedTestBeans().get(0)).     assertSame(ntb1, bean.getNestedTestBeans().get(1)).     assertEquals(2, bean.nestedTestBeansSetter.size()).     assertSame(ntb2, bean.nestedTestBeansSetter.get(0)).     assertSame(ntb1, bean.nestedTestBeansSetter.get(1)).     assertEquals(2, bean.nestedTestBeansField.size()).     assertSame(ntb2, bean.nestedTestBeansField.get(0)).     assertSame(ntb1, bean.nestedTestBeansField.get(1)). }
false;public;0;32;;@Test public void testAnnotationOrderedCollectionResourceInjection() {     RootBeanDefinition rbd = new RootBeanDefinition(OptionalCollectionResourceInjectionBean.class).     rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE).     bf.registerBeanDefinition("annotatedBean", rbd).     TestBean tb = new TestBean().     bf.registerSingleton("testBean", tb).     IndexedTestBean itb = new IndexedTestBean().     bf.registerSingleton("indexedTestBean", itb).     FixedOrder2NestedTestBean ntb1 = new FixedOrder2NestedTestBean().     bf.registerSingleton("nestedTestBean1", ntb1).     FixedOrder1NestedTestBean ntb2 = new FixedOrder1NestedTestBean().     bf.registerSingleton("nestedTestBean2", ntb2).     // Two calls to verify that caching doesn't break re-creation.     OptionalCollectionResourceInjectionBean bean = (OptionalCollectionResourceInjectionBean) bf.getBean("annotatedBean").     bean = (OptionalCollectionResourceInjectionBean) bf.getBean("annotatedBean").     assertSame(tb, bean.getTestBean()).     assertSame(tb, bean.getTestBean2()).     assertSame(tb, bean.getTestBean3()).     assertSame(tb, bean.getTestBean4()).     assertSame(itb, bean.getIndexedTestBean()).     assertEquals(2, bean.getNestedTestBeans().size()).     assertSame(ntb2, bean.getNestedTestBeans().get(0)).     assertSame(ntb1, bean.getNestedTestBeans().get(1)).     assertEquals(2, bean.nestedTestBeansSetter.size()).     assertSame(ntb2, bean.nestedTestBeansSetter.get(0)).     assertSame(ntb1, bean.nestedTestBeansSetter.get(1)).     assertEquals(2, bean.nestedTestBeansField.size()).     assertSame(ntb2, bean.nestedTestBeansField.get(0)).     assertSame(ntb1, bean.nestedTestBeansField.get(1)). }
false;public;0;26;;@Test public void testConstructorResourceInjection() {     RootBeanDefinition bd = new RootBeanDefinition(ConstructorResourceInjectionBean.class).     bd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE).     bf.registerBeanDefinition("annotatedBean", bd).     TestBean tb = new TestBean().     bf.registerSingleton("testBean", tb).     NestedTestBean ntb = new NestedTestBean().     bf.registerSingleton("nestedTestBean", ntb).     ConstructorResourceInjectionBean bean = (ConstructorResourceInjectionBean) bf.getBean("annotatedBean").     assertSame(tb, bean.getTestBean()).     assertSame(tb, bean.getTestBean2()).     assertSame(tb, bean.getTestBean3()).     assertSame(tb, bean.getTestBean4()).     assertSame(ntb, bean.getNestedTestBean()).     assertSame(bf, bean.getBeanFactory()).     bean = (ConstructorResourceInjectionBean) bf.getBean("annotatedBean").     assertSame(tb, bean.getTestBean()).     assertSame(tb, bean.getTestBean2()).     assertSame(tb, bean.getTestBean3()).     assertSame(tb, bean.getTestBean4()).     assertSame(ntb, bean.getNestedTestBean()).     assertSame(bf, bean.getBeanFactory()). }
false;public;0;26;;@Test public void testConstructorResourceInjectionWithNullFromFactoryBean() {     RootBeanDefinition bd = new RootBeanDefinition(ConstructorResourceInjectionBean.class).     bd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE).     bf.registerBeanDefinition("annotatedBean", bd).     TestBean tb = new TestBean().     bf.registerSingleton("testBean", tb).     bf.registerBeanDefinition("nestedTestBean", new RootBeanDefinition(NullNestedTestBeanFactoryBean.class)).     bf.registerSingleton("nestedTestBean2", new NestedTestBean()).     ConstructorResourceInjectionBean bean = (ConstructorResourceInjectionBean) bf.getBean("annotatedBean").     assertSame(tb, bean.getTestBean()).     assertSame(tb, bean.getTestBean2()).     assertSame(tb, bean.getTestBean3()).     assertSame(tb, bean.getTestBean4()).     assertNull(bean.getNestedTestBean()).     assertSame(bf, bean.getBeanFactory()).     bean = (ConstructorResourceInjectionBean) bf.getBean("annotatedBean").     assertSame(tb, bean.getTestBean()).     assertSame(tb, bean.getTestBean2()).     assertSame(tb, bean.getTestBean3()).     assertSame(tb, bean.getTestBean4()).     assertNull(bean.getNestedTestBean()).     assertSame(bf, bean.getBeanFactory()). }
false;public;0;29;;@Test public void testConstructorResourceInjectionWithNullFromFactoryMethod() {     RootBeanDefinition bd = new RootBeanDefinition(ConstructorResourceInjectionBean.class).     bd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE).     bf.registerBeanDefinition("annotatedBean", bd).     RootBeanDefinition tb = new RootBeanDefinition(NullFactoryMethods.class).     tb.setFactoryMethodName("createTestBean").     bf.registerBeanDefinition("testBean", tb).     RootBeanDefinition ntb = new RootBeanDefinition(NullFactoryMethods.class).     ntb.setFactoryMethodName("createNestedTestBean").     bf.registerBeanDefinition("nestedTestBean", ntb).     bf.registerSingleton("nestedTestBean2", new NestedTestBean()).     ConstructorResourceInjectionBean bean = (ConstructorResourceInjectionBean) bf.getBean("annotatedBean").     assertNull(bean.getTestBean()).     assertNull(bean.getTestBean2()).     assertNull(bean.getTestBean3()).     assertNull(bean.getTestBean4()).     assertNull(bean.getNestedTestBean()).     assertSame(bf, bean.getBeanFactory()).     bean = (ConstructorResourceInjectionBean) bf.getBean("annotatedBean").     assertNull(bean.getTestBean()).     assertNull(bean.getTestBean2()).     assertNull(bean.getTestBean3()).     assertNull(bean.getTestBean4()).     assertNull(bean.getNestedTestBean()).     assertSame(bf, bean.getBeanFactory()). }
false;public;0;17;;@Test public void testConstructorResourceInjectionWithMultipleCandidates() {     bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(ConstructorsResourceInjectionBean.class)).     TestBean tb = new TestBean().     bf.registerSingleton("testBean", tb).     NestedTestBean ntb1 = new NestedTestBean().     bf.registerSingleton("nestedTestBean1", ntb1).     NestedTestBean ntb2 = new NestedTestBean().     bf.registerSingleton("nestedTestBean2", ntb2).     ConstructorsResourceInjectionBean bean = (ConstructorsResourceInjectionBean) bf.getBean("annotatedBean").     assertNull(bean.getTestBean3()).     assertSame(tb, bean.getTestBean4()).     assertEquals(2, bean.getNestedTestBeans().length).     assertSame(ntb1, bean.getNestedTestBeans()[0]).     assertSame(ntb2, bean.getNestedTestBeans()[1]). }
false;public;0;13;;@Test public void testConstructorResourceInjectionWithNoCandidatesAndNoFallback() {     bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(ConstructorWithoutFallbackBean.class)).     try {         bf.getBean("annotatedBean").         fail("Should have thrown UnsatisfiedDependencyException").     } catch (UnsatisfiedDependencyException ex) {         // expected         assertSame(ConstructorWithoutFallbackBean.class, ex.getInjectionPoint().getMethodParameter().getDeclaringClass()).     } }
false;public;0;20;;@Test public void testConstructorResourceInjectionWithCollectionAndNullFromFactoryBean() {     bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(ConstructorsCollectionResourceInjectionBean.class)).     TestBean tb = new TestBean().     bf.registerSingleton("testBean", tb).     bf.registerBeanDefinition("nestedTestBean1", new RootBeanDefinition(NullNestedTestBeanFactoryBean.class)).     NestedTestBean ntb2 = new NestedTestBean().     bf.registerSingleton("nestedTestBean2", ntb2).     ConstructorsCollectionResourceInjectionBean bean = (ConstructorsCollectionResourceInjectionBean) bf.getBean("annotatedBean").     assertNull(bean.getTestBean3()).     assertSame(tb, bean.getTestBean4()).     assertEquals(1, bean.getNestedTestBeans().size()).     assertSame(ntb2, bean.getNestedTestBeans().get(0)).     Map<String, NestedTestBean> map = bf.getBeansOfType(NestedTestBean.class).     assertNull(map.get("nestedTestBean1")).     assertSame(ntb2, map.get("nestedTestBean2")). }
false;public;0;18;;@Test public void testConstructorResourceInjectionWithMultipleCandidatesAsCollection() {     bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(ConstructorsCollectionResourceInjectionBean.class)).     TestBean tb = new TestBean().     bf.registerSingleton("testBean", tb).     NestedTestBean ntb1 = new NestedTestBean().     bf.registerSingleton("nestedTestBean1", ntb1).     NestedTestBean ntb2 = new NestedTestBean().     bf.registerSingleton("nestedTestBean2", ntb2).     ConstructorsCollectionResourceInjectionBean bean = (ConstructorsCollectionResourceInjectionBean) bf.getBean("annotatedBean").     assertNull(bean.getTestBean3()).     assertSame(tb, bean.getTestBean4()).     assertEquals(2, bean.getNestedTestBeans().size()).     assertSame(ntb1, bean.getNestedTestBeans().get(0)).     assertSame(ntb2, bean.getNestedTestBeans().get(1)). }
false;public;0;17;;@Test public void testConstructorResourceInjectionWithMultipleOrderedCandidates() {     bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(ConstructorsResourceInjectionBean.class)).     TestBean tb = new TestBean().     bf.registerSingleton("testBean", tb).     FixedOrder2NestedTestBean ntb1 = new FixedOrder2NestedTestBean().     bf.registerSingleton("nestedTestBean1", ntb1).     FixedOrder1NestedTestBean ntb2 = new FixedOrder1NestedTestBean().     bf.registerSingleton("nestedTestBean2", ntb2).     ConstructorsResourceInjectionBean bean = (ConstructorsResourceInjectionBean) bf.getBean("annotatedBean").     assertNull(bean.getTestBean3()).     assertSame(tb, bean.getTestBean4()).     assertEquals(2, bean.getNestedTestBeans().length).     assertSame(ntb2, bean.getNestedTestBeans()[0]).     assertSame(ntb1, bean.getNestedTestBeans()[1]). }
false;public;0;17;;@Test public void testConstructorResourceInjectionWithMultipleCandidatesAsOrderedCollection() {     bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(ConstructorsCollectionResourceInjectionBean.class)).     TestBean tb = new TestBean().     bf.registerSingleton("testBean", tb).     FixedOrder2NestedTestBean ntb1 = new FixedOrder2NestedTestBean().     bf.registerSingleton("nestedTestBean1", ntb1).     FixedOrder1NestedTestBean ntb2 = new FixedOrder1NestedTestBean().     bf.registerSingleton("nestedTestBean2", ntb2).     ConstructorsCollectionResourceInjectionBean bean = (ConstructorsCollectionResourceInjectionBean) bf.getBean("annotatedBean").     assertNull(bean.getTestBean3()).     assertSame(tb, bean.getTestBean4()).     assertEquals(2, bean.getNestedTestBeans().size()).     assertSame(ntb2, bean.getNestedTestBeans().get(0)).     assertSame(ntb1, bean.getNestedTestBeans().get(1)). }
false;public;0;16;;@Test public void testSingleConstructorInjectionWithMultipleCandidatesAsRequiredVararg() {     bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(SingleConstructorVarargBean.class)).     TestBean tb = new TestBean().     bf.registerSingleton("testBean", tb).     FixedOrder2NestedTestBean ntb1 = new FixedOrder2NestedTestBean().     bf.registerSingleton("nestedTestBean1", ntb1).     FixedOrder1NestedTestBean ntb2 = new FixedOrder1NestedTestBean().     bf.registerSingleton("nestedTestBean2", ntb2).     SingleConstructorVarargBean bean = (SingleConstructorVarargBean) bf.getBean("annotatedBean").     assertSame(tb, bean.getTestBean()).     assertEquals(2, bean.getNestedTestBeans().size()).     assertSame(ntb2, bean.getNestedTestBeans().get(0)).     assertSame(ntb1, bean.getNestedTestBeans().get(1)). }
false;public;0;11;;@Test public void testSingleConstructorInjectionWithEmptyVararg() {     bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(SingleConstructorVarargBean.class)).     TestBean tb = new TestBean().     bf.registerSingleton("testBean", tb).     SingleConstructorVarargBean bean = (SingleConstructorVarargBean) bf.getBean("annotatedBean").     assertSame(tb, bean.getTestBean()).     assertNotNull(bean.getNestedTestBeans()).     assertTrue(bean.getNestedTestBeans().isEmpty()). }
false;public;0;16;;@Test public void testSingleConstructorInjectionWithMultipleCandidatesAsRequiredCollection() {     bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(SingleConstructorRequiredCollectionBean.class)).     TestBean tb = new TestBean().     bf.registerSingleton("testBean", tb).     FixedOrder2NestedTestBean ntb1 = new FixedOrder2NestedTestBean().     bf.registerSingleton("nestedTestBean1", ntb1).     FixedOrder1NestedTestBean ntb2 = new FixedOrder1NestedTestBean().     bf.registerSingleton("nestedTestBean2", ntb2).     SingleConstructorRequiredCollectionBean bean = (SingleConstructorRequiredCollectionBean) bf.getBean("annotatedBean").     assertSame(tb, bean.getTestBean()).     assertEquals(2, bean.getNestedTestBeans().size()).     assertSame(ntb2, bean.getNestedTestBeans().get(0)).     assertSame(ntb1, bean.getNestedTestBeans().get(1)). }
false;public;0;11;;@Test public void testSingleConstructorInjectionWithEmptyCollection() {     bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(SingleConstructorRequiredCollectionBean.class)).     TestBean tb = new TestBean().     bf.registerSingleton("testBean", tb).     SingleConstructorRequiredCollectionBean bean = (SingleConstructorRequiredCollectionBean) bf.getBean("annotatedBean").     assertSame(tb, bean.getTestBean()).     assertNotNull(bean.getNestedTestBeans()).     assertTrue(bean.getNestedTestBeans().isEmpty()). }
false;public;0;16;;@Test public void testSingleConstructorInjectionWithMultipleCandidatesAsOrderedCollection() {     bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(SingleConstructorOptionalCollectionBean.class)).     TestBean tb = new TestBean().     bf.registerSingleton("testBean", tb).     FixedOrder2NestedTestBean ntb1 = new FixedOrder2NestedTestBean().     bf.registerSingleton("nestedTestBean1", ntb1).     FixedOrder1NestedTestBean ntb2 = new FixedOrder1NestedTestBean().     bf.registerSingleton("nestedTestBean2", ntb2).     SingleConstructorOptionalCollectionBean bean = (SingleConstructorOptionalCollectionBean) bf.getBean("annotatedBean").     assertSame(tb, bean.getTestBean()).     assertEquals(2, bean.getNestedTestBeans().size()).     assertSame(ntb2, bean.getNestedTestBeans().get(0)).     assertSame(ntb1, bean.getNestedTestBeans().get(1)). }
false;public;0;10;;@Test public void testSingleConstructorInjectionWithEmptyCollectionAsNull() {     bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(SingleConstructorOptionalCollectionBean.class)).     TestBean tb = new TestBean().     bf.registerSingleton("testBean", tb).     SingleConstructorOptionalCollectionBean bean = (SingleConstructorOptionalCollectionBean) bf.getBean("annotatedBean").     assertSame(tb, bean.getTestBean()).     assertNull(bean.getNestedTestBeans()). }
false;public;0;5;;@Test(expected = UnsatisfiedDependencyException.class) public void testSingleConstructorInjectionWithMissingDependency() {     bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(SingleConstructorOptionalCollectionBean.class)).     bf.getBean("annotatedBean"). }
false;public;0;9;;@Test(expected = UnsatisfiedDependencyException.class) public void testSingleConstructorInjectionWithNullDependency() {     bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(SingleConstructorOptionalCollectionBean.class)).     RootBeanDefinition tb = new RootBeanDefinition(NullFactoryMethods.class).     tb.setFactoryMethodName("createTestBean").     bf.registerBeanDefinition("testBean", tb).     bf.getBean("annotatedBean"). }
false;public;0;10;;@Test public void testConstructorResourceInjectionWithMultipleCandidatesAndFallback() {     bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(ConstructorsResourceInjectionBean.class)).     TestBean tb = new TestBean().     bf.registerSingleton("testBean", tb).     ConstructorsResourceInjectionBean bean = (ConstructorsResourceInjectionBean) bf.getBean("annotatedBean").     assertSame(tb, bean.getTestBean3()).     assertNull(bean.getTestBean4()). }
false;public;0;8;;@Test public void testConstructorResourceInjectionWithMultipleCandidatesAndDefaultFallback() {     bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(ConstructorsResourceInjectionBean.class)).     ConstructorsResourceInjectionBean bean = (ConstructorsResourceInjectionBean) bf.getBean("annotatedBean").     assertNull(bean.getTestBean3()).     assertNull(bean.getTestBean4()). }
false;public;0;21;;@Test public void testConstructorInjectionWithMap() {     RootBeanDefinition bd = new RootBeanDefinition(MapConstructorInjectionBean.class).     bd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE).     bf.registerBeanDefinition("annotatedBean", bd).     TestBean tb1 = new TestBean("tb1").     bf.registerSingleton("testBean1", tb1).     RootBeanDefinition tb2 = new RootBeanDefinition(NullFactoryMethods.class).     tb2.setFactoryMethodName("createTestBean").     bf.registerBeanDefinition("testBean2", tb2).     MapConstructorInjectionBean bean = (MapConstructorInjectionBean) bf.getBean("annotatedBean").     assertEquals(1, bean.getTestBeanMap().size()).     assertSame(tb1, bean.getTestBeanMap().get("testBean1")).     assertNull(bean.getTestBeanMap().get("testBean2")).     bean = (MapConstructorInjectionBean) bf.getBean("annotatedBean").     assertEquals(1, bean.getTestBeanMap().size()).     assertSame(tb1, bean.getTestBeanMap().get("testBean1")).     assertNull(bean.getTestBeanMap().get("testBean2")). }
false;public;0;24;;@Test public void testFieldInjectionWithMap() {     RootBeanDefinition bd = new RootBeanDefinition(MapFieldInjectionBean.class).     bd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE).     bf.registerBeanDefinition("annotatedBean", bd).     TestBean tb1 = new TestBean("tb1").     TestBean tb2 = new TestBean("tb2").     bf.registerSingleton("testBean1", tb1).     bf.registerSingleton("testBean2", tb2).     MapFieldInjectionBean bean = (MapFieldInjectionBean) bf.getBean("annotatedBean").     assertEquals(2, bean.getTestBeanMap().size()).     assertTrue(bean.getTestBeanMap().keySet().contains("testBean1")).     assertTrue(bean.getTestBeanMap().keySet().contains("testBean2")).     assertTrue(bean.getTestBeanMap().values().contains(tb1)).     assertTrue(bean.getTestBeanMap().values().contains(tb2)).     bean = (MapFieldInjectionBean) bf.getBean("annotatedBean").     assertEquals(2, bean.getTestBeanMap().size()).     assertTrue(bean.getTestBeanMap().keySet().contains("testBean1")).     assertTrue(bean.getTestBeanMap().keySet().contains("testBean2")).     assertTrue(bean.getTestBeanMap().values().contains(tb1)).     assertTrue(bean.getTestBeanMap().values().contains(tb2)). }
false;public;0;20;;@Test public void testMethodInjectionWithMap() {     RootBeanDefinition bd = new RootBeanDefinition(MapMethodInjectionBean.class).     bd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE).     bf.registerBeanDefinition("annotatedBean", bd).     TestBean tb = new TestBean().     bf.registerSingleton("testBean", tb).     MapMethodInjectionBean bean = (MapMethodInjectionBean) bf.getBean("annotatedBean").     assertEquals(1, bean.getTestBeanMap().size()).     assertTrue(bean.getTestBeanMap().keySet().contains("testBean")).     assertTrue(bean.getTestBeanMap().values().contains(tb)).     assertSame(tb, bean.getTestBean()).     bean = (MapMethodInjectionBean) bf.getBean("annotatedBean").     assertEquals(1, bean.getTestBeanMap().size()).     assertTrue(bean.getTestBeanMap().keySet().contains("testBean")).     assertTrue(bean.getTestBeanMap().values().contains(tb)).     assertSame(tb, bean.getTestBean()). }
false;public;0;15;;@Test public void testMethodInjectionWithMapAndMultipleMatches() {     bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(MapMethodInjectionBean.class)).     bf.registerBeanDefinition("testBean1", new RootBeanDefinition(TestBean.class)).     bf.registerBeanDefinition("testBean2", new RootBeanDefinition(TestBean.class)).     try {         bf.getBean("annotatedBean").         fail("should have failed, more than one bean of type").     } catch (UnsatisfiedDependencyException ex) {         // expected         assertSame(MapMethodInjectionBean.class, ex.getInjectionPoint().getMethodParameter().getDeclaringClass()).     } }
false;public;0;15;;@Test public void testMethodInjectionWithMapAndMultipleMatchesButOnlyOneAutowireCandidate() {     bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(MapMethodInjectionBean.class)).     bf.registerBeanDefinition("testBean1", new RootBeanDefinition(TestBean.class)).     RootBeanDefinition rbd2 = new RootBeanDefinition(TestBean.class).     rbd2.setAutowireCandidate(false).     bf.registerBeanDefinition("testBean2", rbd2).     MapMethodInjectionBean bean = (MapMethodInjectionBean) bf.getBean("annotatedBean").     TestBean tb = (TestBean) bf.getBean("testBean1").     assertEquals(1, bean.getTestBeanMap().size()).     assertTrue(bean.getTestBeanMap().keySet().contains("testBean1")).     assertTrue(bean.getTestBeanMap().values().contains(tb)).     assertSame(tb, bean.getTestBean()). }
false;public;0;8;;@Test public void testMethodInjectionWithMapAndNoMatches() {     bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(MapMethodInjectionBean.class)).     MapMethodInjectionBean bean = (MapMethodInjectionBean) bf.getBean("annotatedBean").     assertNull(bean.getTestBeanMap()).     assertNull(bean.getTestBean()). }
false;public;0;16;;@Test public void testConstructorInjectionWithTypedMapAsBean() {     RootBeanDefinition bd = new RootBeanDefinition(MapConstructorInjectionBean.class).     bd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE).     bf.registerBeanDefinition("annotatedBean", bd).     MyTestBeanMap tbm = new MyTestBeanMap().     tbm.put("testBean1", new TestBean("tb1")).     tbm.put("testBean2", new TestBean("tb2")).     bf.registerSingleton("testBeans", tbm).     bf.registerSingleton("otherMap", new Properties()).     MapConstructorInjectionBean bean = (MapConstructorInjectionBean) bf.getBean("annotatedBean").     assertSame(tbm, bean.getTestBeanMap()).     bean = (MapConstructorInjectionBean) bf.getBean("annotatedBean").     assertSame(tbm, bean.getTestBeanMap()). }
false;public;0;15;;@Test public void testConstructorInjectionWithPlainMapAsBean() {     RootBeanDefinition bd = new RootBeanDefinition(MapConstructorInjectionBean.class).     bd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE).     bf.registerBeanDefinition("annotatedBean", bd).     RootBeanDefinition tbm = new RootBeanDefinition(CollectionFactoryMethods.class).     tbm.setUniqueFactoryMethodName("testBeanMap").     bf.registerBeanDefinition("myTestBeanMap", tbm).     bf.registerSingleton("otherMap", new HashMap<>()).     MapConstructorInjectionBean bean = (MapConstructorInjectionBean) bf.getBean("annotatedBean").     assertSame(bf.getBean("myTestBeanMap"), bean.getTestBeanMap()).     bean = (MapConstructorInjectionBean) bf.getBean("annotatedBean").     assertSame(bf.getBean("myTestBeanMap"), bean.getTestBeanMap()). }
false;public;0;16;;@Test public void testConstructorInjectionWithCustomMapAsBean() {     RootBeanDefinition bd = new RootBeanDefinition(CustomMapConstructorInjectionBean.class).     bd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE).     bf.registerBeanDefinition("annotatedBean", bd).     RootBeanDefinition tbm = new RootBeanDefinition(CustomCollectionFactoryMethods.class).     tbm.setUniqueFactoryMethodName("testBeanMap").     bf.registerBeanDefinition("myTestBeanMap", tbm).     bf.registerSingleton("testBean1", new TestBean()).     bf.registerSingleton("testBean2", new TestBean()).     CustomMapConstructorInjectionBean bean = (CustomMapConstructorInjectionBean) bf.getBean("annotatedBean").     assertSame(bf.getBean("myTestBeanMap"), bean.getTestBeanMap()).     bean = (CustomMapConstructorInjectionBean) bf.getBean("annotatedBean").     assertSame(bf.getBean("myTestBeanMap"), bean.getTestBeanMap()). }
false;public;0;12;;@Test public void testConstructorInjectionWithPlainHashMapAsBean() {     RootBeanDefinition bd = new RootBeanDefinition(QualifiedMapConstructorInjectionBean.class).     bd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE).     bf.registerBeanDefinition("annotatedBean", bd).     bf.registerBeanDefinition("myTestBeanMap", new RootBeanDefinition(HashMap.class)).     QualifiedMapConstructorInjectionBean bean = (QualifiedMapConstructorInjectionBean) bf.getBean("annotatedBean").     assertSame(bf.getBean("myTestBeanMap"), bean.getTestBeanMap()).     bean = (QualifiedMapConstructorInjectionBean) bf.getBean("annotatedBean").     assertSame(bf.getBean("myTestBeanMap"), bean.getTestBeanMap()). }
false;public;0;16;;@Test public void testConstructorInjectionWithTypedSetAsBean() {     RootBeanDefinition bd = new RootBeanDefinition(SetConstructorInjectionBean.class).     bd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE).     bf.registerBeanDefinition("annotatedBean", bd).     MyTestBeanSet tbs = new MyTestBeanSet().     tbs.add(new TestBean("tb1")).     tbs.add(new TestBean("tb2")).     bf.registerSingleton("testBeans", tbs).     bf.registerSingleton("otherSet", new HashSet<>()).     SetConstructorInjectionBean bean = (SetConstructorInjectionBean) bf.getBean("annotatedBean").     assertSame(tbs, bean.getTestBeanSet()).     bean = (SetConstructorInjectionBean) bf.getBean("annotatedBean").     assertSame(tbs, bean.getTestBeanSet()). }
false;public;0;15;;@Test public void testConstructorInjectionWithPlainSetAsBean() {     RootBeanDefinition bd = new RootBeanDefinition(SetConstructorInjectionBean.class).     bd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE).     bf.registerBeanDefinition("annotatedBean", bd).     RootBeanDefinition tbs = new RootBeanDefinition(CollectionFactoryMethods.class).     tbs.setUniqueFactoryMethodName("testBeanSet").     bf.registerBeanDefinition("myTestBeanSet", tbs).     bf.registerSingleton("otherSet", new HashSet<>()).     SetConstructorInjectionBean bean = (SetConstructorInjectionBean) bf.getBean("annotatedBean").     assertSame(bf.getBean("myTestBeanSet"), bean.getTestBeanSet()).     bean = (SetConstructorInjectionBean) bf.getBean("annotatedBean").     assertSame(bf.getBean("myTestBeanSet"), bean.getTestBeanSet()). }
false;public;0;14;;@Test public void testConstructorInjectionWithCustomSetAsBean() {     RootBeanDefinition bd = new RootBeanDefinition(CustomSetConstructorInjectionBean.class).     bd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE).     bf.registerBeanDefinition("annotatedBean", bd).     RootBeanDefinition tbs = new RootBeanDefinition(CustomCollectionFactoryMethods.class).     tbs.setUniqueFactoryMethodName("testBeanSet").     bf.registerBeanDefinition("myTestBeanSet", tbs).     CustomSetConstructorInjectionBean bean = (CustomSetConstructorInjectionBean) bf.getBean("annotatedBean").     assertSame(bf.getBean("myTestBeanSet"), bean.getTestBeanSet()).     bean = (CustomSetConstructorInjectionBean) bf.getBean("annotatedBean").     assertSame(bf.getBean("myTestBeanSet"), bean.getTestBeanSet()). }
false;public;0;8;;@Test public void testSelfReference() {     bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(SelfInjectionBean.class)).     SelfInjectionBean bean = (SelfInjectionBean) bf.getBean("annotatedBean").     assertSame(bean, bean.reference).     assertNull(bean.referenceCollection). }
false;public;0;11;;@Test public void testSelfReferenceWithOther() {     bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(SelfInjectionBean.class)).     bf.registerBeanDefinition("annotatedBean2", new RootBeanDefinition(SelfInjectionBean.class)).     SelfInjectionBean bean = (SelfInjectionBean) bf.getBean("annotatedBean").     SelfInjectionBean bean2 = (SelfInjectionBean) bf.getBean("annotatedBean2").     assertSame(bean2, bean.reference).     assertEquals(1, bean.referenceCollection.size()).     assertSame(bean2, bean.referenceCollection.get(0)). }
false;public;0;8;;@Test public void testSelfReferenceCollection() {     bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(SelfInjectionCollectionBean.class)).     SelfInjectionCollectionBean bean = (SelfInjectionCollectionBean) bf.getBean("annotatedBean").     assertSame(bean, bean.reference).     assertNull(bean.referenceCollection). }
false;public;0;11;;@Test public void testSelfReferenceCollectionWithOther() {     bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(SelfInjectionCollectionBean.class)).     bf.registerBeanDefinition("annotatedBean2", new RootBeanDefinition(SelfInjectionCollectionBean.class)).     SelfInjectionCollectionBean bean = (SelfInjectionCollectionBean) bf.getBean("annotatedBean").     SelfInjectionCollectionBean bean2 = (SelfInjectionCollectionBean) bf.getBean("annotatedBean2").     assertSame(bean2, bean.reference).     assertSame(1, bean2.referenceCollection.size()).     assertSame(bean2, bean.referenceCollection.get(0)). }
false;public;0;8;;@Test public void testObjectFactoryFieldInjection() {     bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(ObjectFactoryFieldInjectionBean.class)).     bf.registerBeanDefinition("testBean", new RootBeanDefinition(TestBean.class)).     ObjectFactoryFieldInjectionBean bean = (ObjectFactoryFieldInjectionBean) bf.getBean("annotatedBean").     assertSame(bf.getBean("testBean"), bean.getTestBean()). }
false;public;0;8;;@Test public void testObjectFactoryConstructorInjection() {     bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(ObjectFactoryConstructorInjectionBean.class)).     bf.registerBeanDefinition("testBean", new RootBeanDefinition(TestBean.class)).     ObjectFactoryConstructorInjectionBean bean = (ObjectFactoryConstructorInjectionBean) bf.getBean("annotatedBean").     assertSame(bf.getBean("testBean"), bean.getTestBean()). }
false;public;0;13;;@Test public void testObjectFactoryInjectionIntoPrototypeBean() {     RootBeanDefinition annotatedBeanDefinition = new RootBeanDefinition(ObjectFactoryFieldInjectionBean.class).     annotatedBeanDefinition.setScope(BeanDefinition.SCOPE_PROTOTYPE).     bf.registerBeanDefinition("annotatedBean", annotatedBeanDefinition).     bf.registerBeanDefinition("testBean", new RootBeanDefinition(TestBean.class)).     ObjectFactoryFieldInjectionBean bean = (ObjectFactoryFieldInjectionBean) bf.getBean("annotatedBean").     assertSame(bf.getBean("testBean"), bean.getTestBean()).     ObjectFactoryFieldInjectionBean anotherBean = (ObjectFactoryFieldInjectionBean) bf.getBean("annotatedBean").     assertNotSame(anotherBean, bean).     assertSame(bf.getBean("testBean"), anotherBean.getTestBean()). }
false;public;0;11;;@Test public void testObjectFactoryQualifierInjection() {     bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(ObjectFactoryQualifierInjectionBean.class)).     RootBeanDefinition bd = new RootBeanDefinition(TestBean.class).     bd.addQualifier(new AutowireCandidateQualifier(Qualifier.class, "testBean")).     bf.registerBeanDefinition("dependencyBean", bd).     bf.registerBeanDefinition("dependencyBean2", new RootBeanDefinition(TestBean.class)).     ObjectFactoryQualifierInjectionBean bean = (ObjectFactoryQualifierInjectionBean) bf.getBean("annotatedBean").     assertSame(bf.getBean("dependencyBean"), bean.getTestBean()). }
false;public;0;11;;@Test public void testObjectFactoryQualifierProviderInjection() {     bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(ObjectFactoryQualifierInjectionBean.class)).     RootBeanDefinition bd = new RootBeanDefinition(TestBean.class).     bd.setQualifiedElement(ReflectionUtils.findMethod(getClass(), "testBeanQualifierProvider")).     bf.registerBeanDefinition("dependencyBean", bd).     bf.registerBeanDefinition("dependencyBean2", new RootBeanDefinition(TestBean.class)).     ObjectFactoryQualifierInjectionBean bean = (ObjectFactoryQualifierInjectionBean) bf.getBean("annotatedBean").     assertSame(bf.getBean("dependencyBean"), bean.getTestBean()). }
false;public;0;11;;@Test public void testObjectFactorySerialization() throws Exception {     bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(ObjectFactoryFieldInjectionBean.class)).     bf.registerBeanDefinition("testBean", new RootBeanDefinition(TestBean.class)).     bf.setSerializationId("test").     ObjectFactoryFieldInjectionBean bean = (ObjectFactoryFieldInjectionBean) bf.getBean("annotatedBean").     assertSame(bf.getBean("testBean"), bean.getTestBean()).     bean = (ObjectFactoryFieldInjectionBean) SerializationTestUtils.serializeAndDeserialize(bean).     assertSame(bf.getBean("testBean"), bean.getTestBean()). }
false;public;0;30;;@Test public void testObjectProviderInjectionWithPrototype() {     bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(ObjectProviderInjectionBean.class)).     RootBeanDefinition tbd = new RootBeanDefinition(TestBean.class).     tbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE).     bf.registerBeanDefinition("testBean", tbd).     ObjectProviderInjectionBean bean = (ObjectProviderInjectionBean) bf.getBean("annotatedBean").     assertEquals(bf.getBean("testBean"), bean.getTestBean()).     assertEquals(bf.getBean("testBean", "myName"), bean.getTestBean("myName")).     assertEquals(bf.getBean("testBean"), bean.getOptionalTestBean()).     assertEquals(bf.getBean("testBean"), bean.getOptionalTestBeanWithDefault()).     assertEquals(bf.getBean("testBean"), bean.consumeOptionalTestBean()).     assertEquals(bf.getBean("testBean"), bean.getUniqueTestBean()).     assertEquals(bf.getBean("testBean"), bean.getUniqueTestBeanWithDefault()).     assertEquals(bf.getBean("testBean"), bean.consumeUniqueTestBean()).     List<?> testBeans = bean.iterateTestBeans().     assertEquals(1, testBeans.size()).     assertTrue(testBeans.contains(bf.getBean("testBean"))).     testBeans = bean.forEachTestBeans().     assertEquals(1, testBeans.size()).     assertTrue(testBeans.contains(bf.getBean("testBean"))).     testBeans = bean.streamTestBeans().     assertEquals(1, testBeans.size()).     assertTrue(testBeans.contains(bf.getBean("testBean"))).     testBeans = bean.sortedTestBeans().     assertEquals(1, testBeans.size()).     assertTrue(testBeans.contains(bf.getBean("testBean"))). }
false;public;0;27;;@Test public void testObjectProviderInjectionWithSingletonTarget() {     bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(ObjectProviderInjectionBean.class)).     bf.registerBeanDefinition("testBean", new RootBeanDefinition(TestBean.class)).     ObjectProviderInjectionBean bean = (ObjectProviderInjectionBean) bf.getBean("annotatedBean").     assertSame(bf.getBean("testBean"), bean.getTestBean()).     assertSame(bf.getBean("testBean"), bean.getOptionalTestBean()).     assertSame(bf.getBean("testBean"), bean.getOptionalTestBeanWithDefault()).     assertEquals(bf.getBean("testBean"), bean.consumeOptionalTestBean()).     assertSame(bf.getBean("testBean"), bean.getUniqueTestBean()).     assertSame(bf.getBean("testBean"), bean.getUniqueTestBeanWithDefault()).     assertEquals(bf.getBean("testBean"), bean.consumeUniqueTestBean()).     List<?> testBeans = bean.iterateTestBeans().     assertEquals(1, testBeans.size()).     assertTrue(testBeans.contains(bf.getBean("testBean"))).     testBeans = bean.forEachTestBeans().     assertEquals(1, testBeans.size()).     assertTrue(testBeans.contains(bf.getBean("testBean"))).     testBeans = bean.streamTestBeans().     assertEquals(1, testBeans.size()).     assertTrue(testBeans.contains(bf.getBean("testBean"))).     testBeans = bean.sortedTestBeans().     assertEquals(1, testBeans.size()).     assertTrue(testBeans.contains(bf.getBean("testBean"))). }
false;public;0;28;;@Test public void testObjectProviderInjectionWithTargetNotAvailable() {     bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(ObjectProviderInjectionBean.class)).     ObjectProviderInjectionBean bean = (ObjectProviderInjectionBean) bf.getBean("annotatedBean").     try {         bean.getTestBean().         fail("Should have thrown NoSuchBeanDefinitionException").     } catch (NoSuchBeanDefinitionException ex) {     // expected     }     assertNull(bean.getOptionalTestBean()).     assertNull(bean.consumeOptionalTestBean()).     assertEquals(new TestBean("default"), bean.getOptionalTestBeanWithDefault()).     assertEquals(new TestBean("default"), bean.getUniqueTestBeanWithDefault()).     assertNull(bean.getUniqueTestBean()).     assertNull(bean.consumeUniqueTestBean()).     List<?> testBeans = bean.iterateTestBeans().     assertTrue(testBeans.isEmpty()).     testBeans = bean.forEachTestBeans().     assertTrue(testBeans.isEmpty()).     testBeans = bean.streamTestBeans().     assertTrue(testBeans.isEmpty()).     testBeans = bean.sortedTestBeans().     assertTrue(testBeans.isEmpty()). }
false;public;0;48;;@Test public void testObjectProviderInjectionWithTargetNotUnique() {     bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(ObjectProviderInjectionBean.class)).     bf.registerBeanDefinition("testBean1", new RootBeanDefinition(TestBean.class)).     bf.registerBeanDefinition("testBean2", new RootBeanDefinition(TestBean.class)).     ObjectProviderInjectionBean bean = (ObjectProviderInjectionBean) bf.getBean("annotatedBean").     try {         bean.getTestBean().         fail("Should have thrown NoUniqueBeanDefinitionException").     } catch (NoUniqueBeanDefinitionException ex) {     // expected     }     try {         bean.getOptionalTestBean().         fail("Should have thrown NoUniqueBeanDefinitionException").     } catch (NoUniqueBeanDefinitionException ex) {     // expected     }     try {         bean.consumeOptionalTestBean().         fail("Should have thrown NoUniqueBeanDefinitionException").     } catch (NoUniqueBeanDefinitionException ex) {     // expected     }     assertNull(bean.getUniqueTestBean()).     assertNull(bean.consumeUniqueTestBean()).     List<?> testBeans = bean.iterateTestBeans().     assertEquals(2, testBeans.size()).     assertSame(bf.getBean("testBean1"), testBeans.get(0)).     assertSame(bf.getBean("testBean2"), testBeans.get(1)).     testBeans = bean.forEachTestBeans().     assertEquals(2, testBeans.size()).     assertSame(bf.getBean("testBean1"), testBeans.get(0)).     assertSame(bf.getBean("testBean2"), testBeans.get(1)).     testBeans = bean.streamTestBeans().     assertEquals(2, testBeans.size()).     assertSame(bf.getBean("testBean1"), testBeans.get(0)).     assertSame(bf.getBean("testBean2"), testBeans.get(1)).     testBeans = bean.sortedTestBeans().     assertEquals(2, testBeans.size()).     assertSame(bf.getBean("testBean1"), testBeans.get(0)).     assertSame(bf.getBean("testBean2"), testBeans.get(1)). }
false;public;0;37;;@Test public void testObjectProviderInjectionWithTargetPrimary() {     bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(ObjectProviderInjectionBean.class)).     RootBeanDefinition tb1 = new RootBeanDefinition(TestBeanFactory.class).     tb1.setFactoryMethodName("newTestBean1").     tb1.setPrimary(true).     bf.registerBeanDefinition("testBean1", tb1).     RootBeanDefinition tb2 = new RootBeanDefinition(TestBeanFactory.class).     tb2.setFactoryMethodName("newTestBean2").     tb2.setLazyInit(true).     bf.registerBeanDefinition("testBean2", tb2).     ObjectProviderInjectionBean bean = (ObjectProviderInjectionBean) bf.getBean("annotatedBean").     assertSame(bf.getBean("testBean1"), bean.getTestBean()).     assertSame(bf.getBean("testBean1"), bean.getOptionalTestBean()).     assertSame(bf.getBean("testBean1"), bean.consumeOptionalTestBean()).     assertSame(bf.getBean("testBean1"), bean.getUniqueTestBean()).     assertSame(bf.getBean("testBean1"), bean.consumeUniqueTestBean()).     assertFalse(bf.containsSingleton("testBean2")).     List<?> testBeans = bean.iterateTestBeans().     assertEquals(2, testBeans.size()).     assertSame(bf.getBean("testBean1"), testBeans.get(0)).     assertSame(bf.getBean("testBean2"), testBeans.get(1)).     testBeans = bean.forEachTestBeans().     assertEquals(2, testBeans.size()).     assertSame(bf.getBean("testBean1"), testBeans.get(0)).     assertSame(bf.getBean("testBean2"), testBeans.get(1)).     testBeans = bean.streamTestBeans().     assertEquals(2, testBeans.size()).     assertSame(bf.getBean("testBean1"), testBeans.get(0)).     assertSame(bf.getBean("testBean2"), testBeans.get(1)).     testBeans = bean.sortedTestBeans().     assertEquals(2, testBeans.size()).     assertSame(bf.getBean("testBean2"), testBeans.get(0)).     assertSame(bf.getBean("testBean1"), testBeans.get(1)). }
false;public;0;18;;@Test public void testObjectProviderInjectionWithUnresolvedOrderedStream() {     bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(ObjectProviderInjectionBean.class)).     RootBeanDefinition tb1 = new RootBeanDefinition(TestBeanFactory.class).     tb1.setFactoryMethodName("newTestBean1").     tb1.setPrimary(true).     bf.registerBeanDefinition("testBean1", tb1).     RootBeanDefinition tb2 = new RootBeanDefinition(TestBeanFactory.class).     tb2.setFactoryMethodName("newTestBean2").     tb2.setLazyInit(true).     bf.registerBeanDefinition("testBean2", tb2).     ObjectProviderInjectionBean bean = (ObjectProviderInjectionBean) bf.getBean("annotatedBean").     List<?> testBeans = bean.sortedTestBeans().     assertEquals(2, testBeans.size()).     assertSame(bf.getBean("testBean2"), testBeans.get(0)).     assertSame(bf.getBean("testBean1"), testBeans.get(1)). }
false;public;0;14;;@Test public void testCustomAnnotationRequiredFieldResourceInjection() {     bpp.setAutowiredAnnotationType(MyAutowired.class).     bpp.setRequiredParameterName("optional").     bpp.setRequiredParameterValue(false).     bf.registerBeanDefinition("customBean", new RootBeanDefinition(CustomAnnotationRequiredFieldResourceInjectionBean.class)).     TestBean tb = new TestBean().     bf.registerSingleton("testBean", tb).     CustomAnnotationRequiredFieldResourceInjectionBean bean = (CustomAnnotationRequiredFieldResourceInjectionBean) bf.getBean("customBean").     assertSame(tb, bean.getTestBean()). }
false;public;0;18;;@Test public void testCustomAnnotationRequiredFieldResourceInjectionFailsWhenNoDependencyFound() {     bpp.setAutowiredAnnotationType(MyAutowired.class).     bpp.setRequiredParameterName("optional").     bpp.setRequiredParameterValue(false).     bf.registerBeanDefinition("customBean", new RootBeanDefinition(CustomAnnotationRequiredFieldResourceInjectionBean.class)).     try {         bf.getBean("customBean").         fail("Should have thrown UnsatisfiedDependencyException").     } catch (UnsatisfiedDependencyException ex) {         // expected         assertSame(CustomAnnotationRequiredFieldResourceInjectionBean.class, ex.getInjectionPoint().getField().getDeclaringClass()).     } }
false;public;0;22;;@Test public void testCustomAnnotationRequiredFieldResourceInjectionFailsWhenMultipleDependenciesFound() {     bpp.setAutowiredAnnotationType(MyAutowired.class).     bpp.setRequiredParameterName("optional").     bpp.setRequiredParameterValue(false).     bf.registerBeanDefinition("customBean", new RootBeanDefinition(CustomAnnotationRequiredFieldResourceInjectionBean.class)).     TestBean tb1 = new TestBean().     bf.registerSingleton("testBean1", tb1).     TestBean tb2 = new TestBean().     bf.registerSingleton("testBean2", tb2).     try {         bf.getBean("customBean").         fail("Should have thrown UnsatisfiedDependencyException").     } catch (UnsatisfiedDependencyException ex) {         // expected         assertSame(CustomAnnotationRequiredFieldResourceInjectionBean.class, ex.getInjectionPoint().getField().getDeclaringClass()).     } }
false;public;0;14;;@Test public void testCustomAnnotationRequiredMethodResourceInjection() {     bpp.setAutowiredAnnotationType(MyAutowired.class).     bpp.setRequiredParameterName("optional").     bpp.setRequiredParameterValue(false).     bf.registerBeanDefinition("customBean", new RootBeanDefinition(CustomAnnotationRequiredMethodResourceInjectionBean.class)).     TestBean tb = new TestBean().     bf.registerSingleton("testBean", tb).     CustomAnnotationRequiredMethodResourceInjectionBean bean = (CustomAnnotationRequiredMethodResourceInjectionBean) bf.getBean("customBean").     assertSame(tb, bean.getTestBean()). }
false;public;0;18;;@Test public void testCustomAnnotationRequiredMethodResourceInjectionFailsWhenNoDependencyFound() {     bpp.setAutowiredAnnotationType(MyAutowired.class).     bpp.setRequiredParameterName("optional").     bpp.setRequiredParameterValue(false).     bf.registerBeanDefinition("customBean", new RootBeanDefinition(CustomAnnotationRequiredMethodResourceInjectionBean.class)).     try {         bf.getBean("customBean").         fail("Should have thrown UnsatisfiedDependencyException").     } catch (UnsatisfiedDependencyException ex) {         // expected         assertSame(CustomAnnotationRequiredMethodResourceInjectionBean.class, ex.getInjectionPoint().getMethodParameter().getDeclaringClass()).     } }
false;public;0;22;;@Test public void testCustomAnnotationRequiredMethodResourceInjectionFailsWhenMultipleDependenciesFound() {     bpp.setAutowiredAnnotationType(MyAutowired.class).     bpp.setRequiredParameterName("optional").     bpp.setRequiredParameterValue(false).     bf.registerBeanDefinition("customBean", new RootBeanDefinition(CustomAnnotationRequiredMethodResourceInjectionBean.class)).     TestBean tb1 = new TestBean().     bf.registerSingleton("testBean1", tb1).     TestBean tb2 = new TestBean().     bf.registerSingleton("testBean2", tb2).     try {         bf.getBean("customBean").         fail("Should have thrown UnsatisfiedDependencyException").     } catch (UnsatisfiedDependencyException ex) {         // expected         assertSame(CustomAnnotationRequiredMethodResourceInjectionBean.class, ex.getInjectionPoint().getMethodParameter().getDeclaringClass()).     } }
false;public;0;16;;@Test public void testCustomAnnotationOptionalFieldResourceInjection() {     bpp.setAutowiredAnnotationType(MyAutowired.class).     bpp.setRequiredParameterName("optional").     bpp.setRequiredParameterValue(false).     bf.registerBeanDefinition("customBean", new RootBeanDefinition(CustomAnnotationOptionalFieldResourceInjectionBean.class)).     TestBean tb = new TestBean().     bf.registerSingleton("testBean", tb).     CustomAnnotationOptionalFieldResourceInjectionBean bean = (CustomAnnotationOptionalFieldResourceInjectionBean) bf.getBean("customBean").     assertSame(tb, bean.getTestBean3()).     assertNull(bean.getTestBean()).     assertNull(bean.getTestBean2()). }
false;public;0;14;;@Test public void testCustomAnnotationOptionalFieldResourceInjectionWhenNoDependencyFound() {     bpp.setAutowiredAnnotationType(MyAutowired.class).     bpp.setRequiredParameterName("optional").     bpp.setRequiredParameterValue(false).     bf.registerBeanDefinition("customBean", new RootBeanDefinition(CustomAnnotationOptionalFieldResourceInjectionBean.class)).     CustomAnnotationOptionalFieldResourceInjectionBean bean = (CustomAnnotationOptionalFieldResourceInjectionBean) bf.getBean("customBean").     assertNull(bean.getTestBean3()).     assertNull(bean.getTestBean()).     assertNull(bean.getTestBean2()). }
false;public;0;22;;@Test public void testCustomAnnotationOptionalFieldResourceInjectionWhenMultipleDependenciesFound() {     bpp.setAutowiredAnnotationType(MyAutowired.class).     bpp.setRequiredParameterName("optional").     bpp.setRequiredParameterValue(false).     bf.registerBeanDefinition("customBean", new RootBeanDefinition(CustomAnnotationOptionalFieldResourceInjectionBean.class)).     TestBean tb1 = new TestBean().     bf.registerSingleton("testBean1", tb1).     TestBean tb2 = new TestBean().     bf.registerSingleton("testBean2", tb2).     try {         bf.getBean("customBean").         fail("Should have thrown UnsatisfiedDependencyException").     } catch (UnsatisfiedDependencyException ex) {         // expected         assertSame(CustomAnnotationOptionalFieldResourceInjectionBean.class, ex.getInjectionPoint().getField().getDeclaringClass()).     } }
false;public;0;16;;@Test public void testCustomAnnotationOptionalMethodResourceInjection() {     bpp.setAutowiredAnnotationType(MyAutowired.class).     bpp.setRequiredParameterName("optional").     bpp.setRequiredParameterValue(false).     bf.registerBeanDefinition("customBean", new RootBeanDefinition(CustomAnnotationOptionalMethodResourceInjectionBean.class)).     TestBean tb = new TestBean().     bf.registerSingleton("testBean", tb).     CustomAnnotationOptionalMethodResourceInjectionBean bean = (CustomAnnotationOptionalMethodResourceInjectionBean) bf.getBean("customBean").     assertSame(tb, bean.getTestBean3()).     assertNull(bean.getTestBean()).     assertNull(bean.getTestBean2()). }
false;public;0;14;;@Test public void testCustomAnnotationOptionalMethodResourceInjectionWhenNoDependencyFound() {     bpp.setAutowiredAnnotationType(MyAutowired.class).     bpp.setRequiredParameterName("optional").     bpp.setRequiredParameterValue(false).     bf.registerBeanDefinition("customBean", new RootBeanDefinition(CustomAnnotationOptionalMethodResourceInjectionBean.class)).     CustomAnnotationOptionalMethodResourceInjectionBean bean = (CustomAnnotationOptionalMethodResourceInjectionBean) bf.getBean("customBean").     assertNull(bean.getTestBean3()).     assertNull(bean.getTestBean()).     assertNull(bean.getTestBean2()). }
false;public;0;22;;@Test public void testCustomAnnotationOptionalMethodResourceInjectionWhenMultipleDependenciesFound() {     bpp.setAutowiredAnnotationType(MyAutowired.class).     bpp.setRequiredParameterName("optional").     bpp.setRequiredParameterValue(false).     bf.registerBeanDefinition("customBean", new RootBeanDefinition(CustomAnnotationOptionalMethodResourceInjectionBean.class)).     TestBean tb1 = new TestBean().     bf.registerSingleton("testBean1", tb1).     TestBean tb2 = new TestBean().     bf.registerSingleton("testBean2", tb2).     try {         bf.getBean("customBean").         fail("Should have thrown UnsatisfiedDependencyException").     } catch (UnsatisfiedDependencyException ex) {         // expected         assertSame(CustomAnnotationOptionalMethodResourceInjectionBean.class, ex.getInjectionPoint().getMethodParameter().getDeclaringClass()).     } }
true;public;0;13;/**  * Verifies that a dependency on a {@link FactoryBean} can be autowired via  * {@link Autowired @Autowired}, specifically addressing the JIRA issue  * raised in <a  * href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"  * target="_blank">SPR-4040</a>.  */ ;/**  * Verifies that a dependency on a {@link FactoryBean} can be autowired via  * {@link Autowired @Autowired}, specifically addressing the JIRA issue  * raised in <a  * href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"  * target="_blank">SPR-4040</a>.  */ @Test public void testBeanAutowiredWithFactoryBean() {     bf.registerBeanDefinition("factoryBeanDependentBean", new RootBeanDefinition(FactoryBeanDependentBean.class)).     bf.registerSingleton("stringFactoryBean", new StringFactoryBean()).     final StringFactoryBean factoryBean = (StringFactoryBean) bf.getBean("&stringFactoryBean").     final FactoryBeanDependentBean bean = (FactoryBeanDependentBean) bf.getBean("factoryBeanDependentBean").     assertNotNull("The singleton StringFactoryBean should have been registered.", factoryBean).     assertNotNull("The factoryBeanDependentBean should have been registered.", bean).     assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the StringFactoryBean.", factoryBean, bean.getFactoryBean()). }
false;public;0;44;;@Test public void testGenericsBasedFieldInjection() {     RootBeanDefinition bd = new RootBeanDefinition(RepositoryFieldInjectionBean.class).     bd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE).     bf.registerBeanDefinition("annotatedBean", bd).     String sv = "X".     bf.registerSingleton("stringValue", sv).     Integer iv = 1.     bf.registerSingleton("integerValue", iv).     StringRepository sr = new StringRepository().     bf.registerSingleton("stringRepo", sr).     IntegerRepository ir = new IntegerRepository().     bf.registerSingleton("integerRepo", ir).     RepositoryFieldInjectionBean bean = (RepositoryFieldInjectionBean) bf.getBean("annotatedBean").     assertSame(sv, bean.string).     assertSame(iv, bean.integer).     assertSame(1, bean.stringArray.length).     assertSame(1, bean.integerArray.length).     assertSame(sv, bean.stringArray[0]).     assertSame(iv, bean.integerArray[0]).     assertSame(1, bean.stringList.size()).     assertSame(1, bean.integerList.size()).     assertSame(sv, bean.stringList.get(0)).     assertSame(iv, bean.integerList.get(0)).     assertSame(1, bean.stringMap.size()).     assertSame(1, bean.integerMap.size()).     assertSame(sv, bean.stringMap.get("stringValue")).     assertSame(iv, bean.integerMap.get("integerValue")).     assertSame(sr, bean.stringRepository).     assertSame(ir, bean.integerRepository).     assertSame(1, bean.stringRepositoryArray.length).     assertSame(1, bean.integerRepositoryArray.length).     assertSame(sr, bean.stringRepositoryArray[0]).     assertSame(ir, bean.integerRepositoryArray[0]).     assertSame(1, bean.stringRepositoryList.size()).     assertSame(1, bean.integerRepositoryList.size()).     assertSame(sr, bean.stringRepositoryList.get(0)).     assertSame(ir, bean.integerRepositoryList.get(0)).     assertSame(1, bean.stringRepositoryMap.size()).     assertSame(1, bean.integerRepositoryMap.size()).     assertSame(sr, bean.stringRepositoryMap.get("stringRepo")).     assertSame(ir, bean.integerRepositoryMap.get("integerRepo")). }
false;public;0;44;;@Test public void testGenericsBasedFieldInjectionWithSubstitutedVariables() {     RootBeanDefinition bd = new RootBeanDefinition(RepositoryFieldInjectionBeanWithSubstitutedVariables.class).     bd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE).     bf.registerBeanDefinition("annotatedBean", bd).     String sv = "X".     bf.registerSingleton("stringValue", sv).     Integer iv = 1.     bf.registerSingleton("integerValue", iv).     StringRepository sr = new StringRepository().     bf.registerSingleton("stringRepo", sr).     IntegerRepository ir = new IntegerRepository().     bf.registerSingleton("integerRepo", ir).     RepositoryFieldInjectionBeanWithSubstitutedVariables bean = (RepositoryFieldInjectionBeanWithSubstitutedVariables) bf.getBean("annotatedBean").     assertSame(sv, bean.string).     assertSame(iv, bean.integer).     assertSame(1, bean.stringArray.length).     assertSame(1, bean.integerArray.length).     assertSame(sv, bean.stringArray[0]).     assertSame(iv, bean.integerArray[0]).     assertSame(1, bean.stringList.size()).     assertSame(1, bean.integerList.size()).     assertSame(sv, bean.stringList.get(0)).     assertSame(iv, bean.integerList.get(0)).     assertSame(1, bean.stringMap.size()).     assertSame(1, bean.integerMap.size()).     assertSame(sv, bean.stringMap.get("stringValue")).     assertSame(iv, bean.integerMap.get("integerValue")).     assertSame(sr, bean.stringRepository).     assertSame(ir, bean.integerRepository).     assertSame(1, bean.stringRepositoryArray.length).     assertSame(1, bean.integerRepositoryArray.length).     assertSame(sr, bean.stringRepositoryArray[0]).     assertSame(ir, bean.integerRepositoryArray[0]).     assertSame(1, bean.stringRepositoryList.size()).     assertSame(1, bean.integerRepositoryList.size()).     assertSame(sr, bean.stringRepositoryList.get(0)).     assertSame(ir, bean.integerRepositoryList.get(0)).     assertSame(1, bean.stringRepositoryMap.size()).     assertSame(1, bean.integerRepositoryMap.size()).     assertSame(sr, bean.stringRepositoryMap.get("stringRepo")).     assertSame(ir, bean.integerRepositoryMap.get("integerRepo")). }
false;public;0;26;;@Test public void testGenericsBasedFieldInjectionWithQualifiers() {     RootBeanDefinition bd = new RootBeanDefinition(RepositoryFieldInjectionBeanWithQualifiers.class).     bd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE).     bf.registerBeanDefinition("annotatedBean", bd).     StringRepository sr = new StringRepository().     bf.registerSingleton("stringRepo", sr).     IntegerRepository ir = new IntegerRepository().     bf.registerSingleton("integerRepo", ir).     RepositoryFieldInjectionBeanWithQualifiers bean = (RepositoryFieldInjectionBeanWithQualifiers) bf.getBean("annotatedBean").     assertSame(sr, bean.stringRepository).     assertSame(ir, bean.integerRepository).     assertSame(1, bean.stringRepositoryArray.length).     assertSame(1, bean.integerRepositoryArray.length).     assertSame(sr, bean.stringRepositoryArray[0]).     assertSame(ir, bean.integerRepositoryArray[0]).     assertSame(1, bean.stringRepositoryList.size()).     assertSame(1, bean.integerRepositoryList.size()).     assertSame(sr, bean.stringRepositoryList.get(0)).     assertSame(ir, bean.integerRepositoryList.get(0)).     assertSame(1, bean.stringRepositoryMap.size()).     assertSame(1, bean.integerRepositoryMap.size()).     assertSame(sr, bean.stringRepositoryMap.get("stringRepo")).     assertSame(ir, bean.integerRepositoryMap.get("integerRepo")). }
false;public;0;38;;@Test public void testGenericsBasedFieldInjectionWithMocks() {     RootBeanDefinition bd = new RootBeanDefinition(RepositoryFieldInjectionBeanWithQualifiers.class).     bd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE).     bf.registerBeanDefinition("annotatedBean", bd).     RootBeanDefinition rbd = new RootBeanDefinition(MocksControl.class).     bf.registerBeanDefinition("mocksControl", rbd).     rbd = new RootBeanDefinition().     rbd.setFactoryBeanName("mocksControl").     rbd.setFactoryMethodName("createMock").     rbd.getConstructorArgumentValues().addGenericArgumentValue(Repository.class).     bf.registerBeanDefinition("stringRepo", rbd).     rbd = new RootBeanDefinition().     rbd.setFactoryBeanName("mocksControl").     rbd.setFactoryMethodName("createMock").     rbd.getConstructorArgumentValues().addGenericArgumentValue(Repository.class).     rbd.setQualifiedElement(ReflectionUtils.findField(getClass(), "integerRepositoryQualifierProvider")).     // Bean name not matching qualifier     bf.registerBeanDefinition("integerRepository", rbd).     RepositoryFieldInjectionBeanWithQualifiers bean = (RepositoryFieldInjectionBeanWithQualifiers) bf.getBean("annotatedBean").     Repository<?> sr = bf.getBean("stringRepo", Repository.class).     Repository<?> ir = bf.getBean("integerRepository", Repository.class).     assertSame(sr, bean.stringRepository).     assertSame(ir, bean.integerRepository).     assertSame(1, bean.stringRepositoryArray.length).     assertSame(1, bean.integerRepositoryArray.length).     assertSame(sr, bean.stringRepositoryArray[0]).     assertSame(ir, bean.integerRepositoryArray[0]).     assertSame(1, bean.stringRepositoryList.size()).     assertSame(1, bean.integerRepositoryList.size()).     assertSame(sr, bean.stringRepositoryList.get(0)).     assertSame(ir, bean.integerRepositoryList.get(0)).     assertSame(1, bean.stringRepositoryMap.size()).     assertSame(1, bean.integerRepositoryMap.size()).     assertSame(sr, bean.stringRepositoryMap.get("stringRepo")).     assertSame(ir, bean.integerRepositoryMap.get("integerRepository")). }
false;public;0;27;;@Test public void testGenericsBasedFieldInjectionWithSimpleMatch() {     RootBeanDefinition bd = new RootBeanDefinition(RepositoryFieldInjectionBeanWithSimpleMatch.class).     bd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE).     bf.registerBeanDefinition("annotatedBean", bd).     bf.registerSingleton("repo", new StringRepository()).     RepositoryFieldInjectionBeanWithSimpleMatch bean = (RepositoryFieldInjectionBeanWithSimpleMatch) bf.getBean("annotatedBean").     Repository<?> repo = bf.getBean("repo", Repository.class).     assertSame(repo, bean.repository).     assertSame(repo, bean.stringRepository).     assertSame(1, bean.repositoryArray.length).     assertSame(1, bean.stringRepositoryArray.length).     assertSame(repo, bean.repositoryArray[0]).     assertSame(repo, bean.stringRepositoryArray[0]).     assertSame(1, bean.repositoryList.size()).     assertSame(1, bean.stringRepositoryList.size()).     assertSame(repo, bean.repositoryList.get(0)).     assertSame(repo, bean.stringRepositoryList.get(0)).     assertSame(1, bean.repositoryMap.size()).     assertSame(1, bean.stringRepositoryMap.size()).     assertSame(repo, bean.repositoryMap.get("repo")).     assertSame(repo, bean.stringRepositoryMap.get("repo")).     assertArrayEquals(new String[] { "repo" }, bf.getBeanNamesForType(ResolvableType.forClassWithGenerics(Repository.class, String.class))). }
false;public;0;11;;@Test public void testGenericsBasedFactoryBeanInjectionWithBeanDefinition() {     RootBeanDefinition bd = new RootBeanDefinition(RepositoryFactoryBeanInjectionBean.class).     bd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE).     bf.registerBeanDefinition("annotatedBean", bd).     bf.registerBeanDefinition("repoFactoryBean", new RootBeanDefinition(RepositoryFactoryBean.class)).     RepositoryFactoryBeanInjectionBean bean = (RepositoryFactoryBeanInjectionBean) bf.getBean("annotatedBean").     RepositoryFactoryBean<?> repoFactoryBean = bf.getBean("&repoFactoryBean", RepositoryFactoryBean.class).     assertSame(repoFactoryBean, bean.repositoryFactoryBean). }
false;public;0;11;;@Test public void testGenericsBasedFactoryBeanInjectionWithSingletonBean() {     RootBeanDefinition bd = new RootBeanDefinition(RepositoryFactoryBeanInjectionBean.class).     bd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE).     bf.registerBeanDefinition("annotatedBean", bd).     bf.registerSingleton("repoFactoryBean", new RepositoryFactoryBean<>()).     RepositoryFactoryBeanInjectionBean bean = (RepositoryFactoryBeanInjectionBean) bf.getBean("annotatedBean").     RepositoryFactoryBean<?> repoFactoryBean = bf.getBean("&repoFactoryBean", RepositoryFactoryBean.class).     assertSame(repoFactoryBean, bean.repositoryFactoryBean). }
false;public;0;31;;@Test public void testGenericsBasedFieldInjectionWithSimpleMatchAndMock() {     RootBeanDefinition bd = new RootBeanDefinition(RepositoryFieldInjectionBeanWithSimpleMatch.class).     bd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE).     bf.registerBeanDefinition("annotatedBean", bd).     RootBeanDefinition rbd = new RootBeanDefinition(MocksControl.class).     bf.registerBeanDefinition("mocksControl", rbd).     rbd = new RootBeanDefinition().     rbd.setFactoryBeanName("mocksControl").     rbd.setFactoryMethodName("createMock").     rbd.getConstructorArgumentValues().addGenericArgumentValue(Repository.class).     bf.registerBeanDefinition("repo", rbd).     RepositoryFieldInjectionBeanWithSimpleMatch bean = (RepositoryFieldInjectionBeanWithSimpleMatch) bf.getBean("annotatedBean").     Repository<?> repo = bf.getBean("repo", Repository.class).     assertSame(repo, bean.repository).     assertSame(repo, bean.stringRepository).     assertSame(1, bean.repositoryArray.length).     assertSame(1, bean.stringRepositoryArray.length).     assertSame(repo, bean.repositoryArray[0]).     assertSame(repo, bean.stringRepositoryArray[0]).     assertSame(1, bean.repositoryList.size()).     assertSame(1, bean.stringRepositoryList.size()).     assertSame(repo, bean.repositoryList.get(0)).     assertSame(repo, bean.stringRepositoryList.get(0)).     assertSame(1, bean.repositoryMap.size()).     assertSame(1, bean.stringRepositoryMap.size()).     assertSame(repo, bean.repositoryMap.get("repo")).     assertSame(repo, bean.stringRepositoryMap.get("repo")). }
false;public;0;30;;@Test public void testGenericsBasedFieldInjectionWithSimpleMatchAndMockito() {     RootBeanDefinition bd = new RootBeanDefinition(RepositoryFieldInjectionBeanWithSimpleMatch.class).     bd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE).     bf.registerBeanDefinition("annotatedBean", bd).     RootBeanDefinition rbd = new RootBeanDefinition().     rbd.setBeanClassName(Mockito.class.getName()).     rbd.setFactoryMethodName("mock").     // TypedStringValue used to be equivalent to an XML-defined argument String     rbd.getConstructorArgumentValues().addGenericArgumentValue(new TypedStringValue(Repository.class.getName())).     bf.registerBeanDefinition("repo", rbd).     RepositoryFieldInjectionBeanWithSimpleMatch bean = (RepositoryFieldInjectionBeanWithSimpleMatch) bf.getBean("annotatedBean").     Repository<?> repo = bf.getBean("repo", Repository.class).     assertSame(repo, bean.repository).     assertSame(repo, bean.stringRepository).     assertSame(1, bean.repositoryArray.length).     assertSame(1, bean.stringRepositoryArray.length).     assertSame(repo, bean.repositoryArray[0]).     assertSame(repo, bean.stringRepositoryArray[0]).     assertSame(1, bean.repositoryList.size()).     assertSame(1, bean.stringRepositoryList.size()).     assertSame(repo, bean.repositoryList.get(0)).     assertSame(repo, bean.stringRepositoryList.get(0)).     assertSame(1, bean.repositoryMap.size()).     assertSame(1, bean.stringRepositoryMap.size()).     assertSame(repo, bean.repositoryMap.get("repo")).     assertSame(repo, bean.stringRepositoryMap.get("repo")). }
false;public;0;44;;@Test public void testGenericsBasedMethodInjection() {     RootBeanDefinition bd = new RootBeanDefinition(RepositoryMethodInjectionBean.class).     bd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE).     bf.registerBeanDefinition("annotatedBean", bd).     String sv = "X".     bf.registerSingleton("stringValue", sv).     Integer iv = 1.     bf.registerSingleton("integerValue", iv).     StringRepository sr = new StringRepository().     bf.registerSingleton("stringRepo", sr).     IntegerRepository ir = new IntegerRepository().     bf.registerSingleton("integerRepo", ir).     RepositoryMethodInjectionBean bean = (RepositoryMethodInjectionBean) bf.getBean("annotatedBean").     assertSame(sv, bean.string).     assertSame(iv, bean.integer).     assertSame(1, bean.stringArray.length).     assertSame(1, bean.integerArray.length).     assertSame(sv, bean.stringArray[0]).     assertSame(iv, bean.integerArray[0]).     assertSame(1, bean.stringList.size()).     assertSame(1, bean.integerList.size()).     assertSame(sv, bean.stringList.get(0)).     assertSame(iv, bean.integerList.get(0)).     assertSame(1, bean.stringMap.size()).     assertSame(1, bean.integerMap.size()).     assertSame(sv, bean.stringMap.get("stringValue")).     assertSame(iv, bean.integerMap.get("integerValue")).     assertSame(sr, bean.stringRepository).     assertSame(ir, bean.integerRepository).     assertSame(1, bean.stringRepositoryArray.length).     assertSame(1, bean.integerRepositoryArray.length).     assertSame(sr, bean.stringRepositoryArray[0]).     assertSame(ir, bean.integerRepositoryArray[0]).     assertSame(1, bean.stringRepositoryList.size()).     assertSame(1, bean.integerRepositoryList.size()).     assertSame(sr, bean.stringRepositoryList.get(0)).     assertSame(ir, bean.integerRepositoryList.get(0)).     assertSame(1, bean.stringRepositoryMap.size()).     assertSame(1, bean.integerRepositoryMap.size()).     assertSame(sr, bean.stringRepositoryMap.get("stringRepo")).     assertSame(ir, bean.integerRepositoryMap.get("integerRepo")). }
false;public;0;44;;@Test public void testGenericsBasedMethodInjectionWithSubstitutedVariables() {     RootBeanDefinition bd = new RootBeanDefinition(RepositoryMethodInjectionBeanWithSubstitutedVariables.class).     bd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE).     bf.registerBeanDefinition("annotatedBean", bd).     String sv = "X".     bf.registerSingleton("stringValue", sv).     Integer iv = 1.     bf.registerSingleton("integerValue", iv).     StringRepository sr = new StringRepository().     bf.registerSingleton("stringRepo", sr).     IntegerRepository ir = new IntegerRepository().     bf.registerSingleton("integerRepo", ir).     RepositoryMethodInjectionBeanWithSubstitutedVariables bean = (RepositoryMethodInjectionBeanWithSubstitutedVariables) bf.getBean("annotatedBean").     assertSame(sv, bean.string).     assertSame(iv, bean.integer).     assertSame(1, bean.stringArray.length).     assertSame(1, bean.integerArray.length).     assertSame(sv, bean.stringArray[0]).     assertSame(iv, bean.integerArray[0]).     assertSame(1, bean.stringList.size()).     assertSame(1, bean.integerList.size()).     assertSame(sv, bean.stringList.get(0)).     assertSame(iv, bean.integerList.get(0)).     assertSame(1, bean.stringMap.size()).     assertSame(1, bean.integerMap.size()).     assertSame(sv, bean.stringMap.get("stringValue")).     assertSame(iv, bean.integerMap.get("integerValue")).     assertSame(sr, bean.stringRepository).     assertSame(ir, bean.integerRepository).     assertSame(1, bean.stringRepositoryArray.length).     assertSame(1, bean.integerRepositoryArray.length).     assertSame(sr, bean.stringRepositoryArray[0]).     assertSame(ir, bean.integerRepositoryArray[0]).     assertSame(1, bean.stringRepositoryList.size()).     assertSame(1, bean.integerRepositoryList.size()).     assertSame(sr, bean.stringRepositoryList.get(0)).     assertSame(ir, bean.integerRepositoryList.get(0)).     assertSame(1, bean.stringRepositoryMap.size()).     assertSame(1, bean.integerRepositoryMap.size()).     assertSame(sr, bean.stringRepositoryMap.get("stringRepo")).     assertSame(ir, bean.integerRepositoryMap.get("integerRepo")). }
false;public;0;26;;@Test public void testGenericsBasedConstructorInjection() {     RootBeanDefinition bd = new RootBeanDefinition(RepositoryConstructorInjectionBean.class).     bd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE).     bf.registerBeanDefinition("annotatedBean", bd).     StringRepository sr = new StringRepository().     bf.registerSingleton("stringRepo", sr).     IntegerRepository ir = new IntegerRepository().     bf.registerSingleton("integerRepo", ir).     RepositoryConstructorInjectionBean bean = (RepositoryConstructorInjectionBean) bf.getBean("annotatedBean").     assertSame(sr, bean.stringRepository).     assertSame(ir, bean.integerRepository).     assertSame(1, bean.stringRepositoryArray.length).     assertSame(1, bean.integerRepositoryArray.length).     assertSame(sr, bean.stringRepositoryArray[0]).     assertSame(ir, bean.integerRepositoryArray[0]).     assertSame(1, bean.stringRepositoryList.size()).     assertSame(1, bean.integerRepositoryList.size()).     assertSame(sr, bean.stringRepositoryList.get(0)).     assertSame(ir, bean.integerRepositoryList.get(0)).     assertSame(1, bean.stringRepositoryMap.size()).     assertSame(1, bean.integerRepositoryMap.size()).     assertSame(sr, bean.stringRepositoryMap.get("stringRepo")).     assertSame(ir, bean.integerRepositoryMap.get("integerRepo")). }
false;public;0;25;;@Test @SuppressWarnings("rawtypes") public void testGenericsBasedConstructorInjectionWithNonTypedTarget() {     RootBeanDefinition bd = new RootBeanDefinition(RepositoryConstructorInjectionBean.class).     bd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE).     bf.registerBeanDefinition("annotatedBean", bd).     GenericRepository gr = new GenericRepository().     bf.registerSingleton("genericRepo", gr).     RepositoryConstructorInjectionBean bean = (RepositoryConstructorInjectionBean) bf.getBean("annotatedBean").     assertSame(gr, bean.stringRepository).     assertSame(gr, bean.integerRepository).     assertSame(1, bean.stringRepositoryArray.length).     assertSame(1, bean.integerRepositoryArray.length).     assertSame(gr, bean.stringRepositoryArray[0]).     assertSame(gr, bean.integerRepositoryArray[0]).     assertSame(1, bean.stringRepositoryList.size()).     assertSame(1, bean.integerRepositoryList.size()).     assertSame(gr, bean.stringRepositoryList.get(0)).     assertSame(gr, bean.integerRepositoryList.get(0)).     assertSame(1, bean.stringRepositoryMap.size()).     assertSame(1, bean.integerRepositoryMap.size()).     assertSame(gr, bean.stringRepositoryMap.get("genericRepo")).     assertSame(gr, bean.integerRepositoryMap.get("genericRepo")). }
false;public;0;24;;@Test public void testGenericsBasedConstructorInjectionWithNonGenericTarget() {     RootBeanDefinition bd = new RootBeanDefinition(RepositoryConstructorInjectionBean.class).     bd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE).     bf.registerBeanDefinition("annotatedBean", bd).     SimpleRepository ngr = new SimpleRepository().     bf.registerSingleton("simpleRepo", ngr).     RepositoryConstructorInjectionBean bean = (RepositoryConstructorInjectionBean) bf.getBean("annotatedBean").     assertSame(ngr, bean.stringRepository).     assertSame(ngr, bean.integerRepository).     assertSame(1, bean.stringRepositoryArray.length).     assertSame(1, bean.integerRepositoryArray.length).     assertSame(ngr, bean.stringRepositoryArray[0]).     assertSame(ngr, bean.integerRepositoryArray[0]).     assertSame(1, bean.stringRepositoryList.size()).     assertSame(1, bean.integerRepositoryList.size()).     assertSame(ngr, bean.stringRepositoryList.get(0)).     assertSame(ngr, bean.integerRepositoryList.get(0)).     assertSame(1, bean.stringRepositoryMap.size()).     assertSame(1, bean.integerRepositoryMap.size()).     assertSame(ngr, bean.stringRepositoryMap.get("simpleRepo")).     assertSame(ngr, bean.integerRepositoryMap.get("simpleRepo")). }
false;public;0;27;;@Test @SuppressWarnings("rawtypes") public void testGenericsBasedConstructorInjectionWithMixedTargets() {     RootBeanDefinition bd = new RootBeanDefinition(RepositoryConstructorInjectionBean.class).     bd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE).     bf.registerBeanDefinition("annotatedBean", bd).     StringRepository sr = new StringRepository().     bf.registerSingleton("stringRepo", sr).     GenericRepository gr = new GenericRepositorySubclass().     bf.registerSingleton("genericRepo", gr).     RepositoryConstructorInjectionBean bean = (RepositoryConstructorInjectionBean) bf.getBean("annotatedBean").     assertSame(sr, bean.stringRepository).     assertSame(gr, bean.integerRepository).     assertSame(1, bean.stringRepositoryArray.length).     assertSame(1, bean.integerRepositoryArray.length).     assertSame(sr, bean.stringRepositoryArray[0]).     assertSame(gr, bean.integerRepositoryArray[0]).     assertSame(1, bean.stringRepositoryList.size()).     assertSame(1, bean.integerRepositoryList.size()).     assertSame(sr, bean.stringRepositoryList.get(0)).     assertSame(gr, bean.integerRepositoryList.get(0)).     assertSame(1, bean.stringRepositoryMap.size()).     assertSame(1, bean.integerRepositoryMap.size()).     assertSame(sr, bean.stringRepositoryMap.get("stringRepo")).     assertSame(gr, bean.integerRepositoryMap.get("genericRepo")). }
false;public;0;26;;@Test public void testGenericsBasedConstructorInjectionWithMixedTargetsIncludingNonGeneric() {     RootBeanDefinition bd = new RootBeanDefinition(RepositoryConstructorInjectionBean.class).     bd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE).     bf.registerBeanDefinition("annotatedBean", bd).     StringRepository sr = new StringRepository().     bf.registerSingleton("stringRepo", sr).     SimpleRepository ngr = new SimpleRepositorySubclass().     bf.registerSingleton("simpleRepo", ngr).     RepositoryConstructorInjectionBean bean = (RepositoryConstructorInjectionBean) bf.getBean("annotatedBean").     assertSame(sr, bean.stringRepository).     assertSame(ngr, bean.integerRepository).     assertSame(1, bean.stringRepositoryArray.length).     assertSame(1, bean.integerRepositoryArray.length).     assertSame(sr, bean.stringRepositoryArray[0]).     assertSame(ngr, bean.integerRepositoryArray[0]).     assertSame(1, bean.stringRepositoryList.size()).     assertSame(1, bean.integerRepositoryList.size()).     assertSame(sr, bean.stringRepositoryList.get(0)).     assertSame(ngr, bean.integerRepositoryList.get(0)).     assertSame(1, bean.stringRepositoryMap.size()).     assertSame(1, bean.integerRepositoryMap.size()).     assertSame(sr, bean.stringRepositoryMap.get("stringRepo")).     assertSame(ngr, bean.integerRepositoryMap.get("simpleRepo")). }
false;public;0;13;;@Test @SuppressWarnings("rawtypes") public void testGenericsBasedInjectionIntoMatchingTypeVariable() {     RootBeanDefinition bd = new RootBeanDefinition(GenericInterface1Impl.class).     bd.setFactoryMethodName("create").     bf.registerBeanDefinition("bean1", bd).     bf.registerBeanDefinition("bean2", new RootBeanDefinition(GenericInterface2Impl.class)).     GenericInterface1Impl bean1 = (GenericInterface1Impl) bf.getBean("bean1").     GenericInterface2Impl bean2 = (GenericInterface2Impl) bf.getBean("bean2").     assertSame(bean2, bean1.gi2).     assertEquals(ResolvableType.forClass(GenericInterface1Impl.class), bd.getResolvableType()). }
false;public;0;13;;@Test @SuppressWarnings("rawtypes") public void testGenericsBasedInjectionIntoUnresolvedTypeVariable() {     RootBeanDefinition bd = new RootBeanDefinition(GenericInterface1Impl.class).     bd.setFactoryMethodName("createPlain").     bf.registerBeanDefinition("bean1", bd).     bf.registerBeanDefinition("bean2", new RootBeanDefinition(GenericInterface2Impl.class)).     GenericInterface1Impl bean1 = (GenericInterface1Impl) bf.getBean("bean1").     GenericInterface2Impl bean2 = (GenericInterface2Impl) bf.getBean("bean2").     assertSame(bean2, bean1.gi2).     assertEquals(ResolvableType.forClass(GenericInterface1Impl.class), bd.getResolvableType()). }
false;public;0;16;;@Test @SuppressWarnings("rawtypes") public void testGenericsBasedInjectionIntoTypeVariableSelectingBestMatch() {     RootBeanDefinition bd = new RootBeanDefinition(GenericInterface1Impl.class).     bd.setFactoryMethodName("create").     bf.registerBeanDefinition("bean1", bd).     bf.registerBeanDefinition("bean2", new RootBeanDefinition(GenericInterface2Impl.class)).     bf.registerBeanDefinition("bean2a", new RootBeanDefinition(ReallyGenericInterface2Impl.class)).     bf.registerBeanDefinition("bean2b", new RootBeanDefinition(PlainGenericInterface2Impl.class)).     GenericInterface1Impl bean1 = (GenericInterface1Impl) bf.getBean("bean1").     GenericInterface2Impl bean2 = (GenericInterface2Impl) bf.getBean("bean2").     assertSame(bean2, bean1.gi2).     assertArrayEquals(new String[] { "bean1" }, bf.getBeanNamesForType(ResolvableType.forClassWithGenerics(GenericInterface1.class, String.class))).     assertArrayEquals(new String[] { "bean2" }, bf.getBeanNamesForType(ResolvableType.forClassWithGenerics(GenericInterface2.class, String.class))). }
false;public;0;15;;@Test // SPR-11521 @Ignore @SuppressWarnings("rawtypes") public void testGenericsBasedInjectionIntoTypeVariableSelectingBestMatchAgainstFactoryMethodSignature() {     RootBeanDefinition bd = new RootBeanDefinition(GenericInterface1Impl.class).     bd.setFactoryMethodName("createErased").     bf.registerBeanDefinition("bean1", bd).     bf.registerBeanDefinition("bean2", new RootBeanDefinition(GenericInterface2Impl.class)).     bf.registerBeanDefinition("bean2a", new RootBeanDefinition(ReallyGenericInterface2Impl.class)).     bf.registerBeanDefinition("bean2b", new RootBeanDefinition(PlainGenericInterface2Impl.class)).     GenericInterface1Impl bean1 = (GenericInterface1Impl) bf.getBean("bean1").     GenericInterface2Impl bean2 = (GenericInterface2Impl) bf.getBean("bean2").     assertSame(bean2, bean1.gi2). }
false;public;0;14;;@Test public void testGenericsBasedInjectionWithBeanDefinitionTargetResolvableType() {     RootBeanDefinition bd1 = new RootBeanDefinition(GenericInterface2Bean.class).     bd1.setTargetType(ResolvableType.forClassWithGenerics(GenericInterface2Bean.class, String.class)).     bf.registerBeanDefinition("bean1", bd1).     RootBeanDefinition bd2 = new RootBeanDefinition(GenericInterface2Bean.class).     bd2.setTargetType(ResolvableType.forClassWithGenerics(GenericInterface2Bean.class, Integer.class)).     bf.registerBeanDefinition("bean2", bd2).     bf.registerBeanDefinition("bean3", new RootBeanDefinition(MultiGenericFieldInjection.class)).     assertEquals("bean1 a bean2 123", bf.getBean("bean3").toString()).     assertEquals(ResolvableType.forClassWithGenerics(GenericInterface2Bean.class, String.class), bd1.getResolvableType()).     assertEquals(ResolvableType.forClassWithGenerics(GenericInterface2Bean.class, Integer.class), bd2.getResolvableType()). }
false;public;0;10;;@Test public void testCircularTypeReference() {     bf.registerBeanDefinition("bean1", new RootBeanDefinition(StockServiceImpl.class)).     bf.registerBeanDefinition("bean2", new RootBeanDefinition(StockMovementDaoImpl.class)).     bf.registerBeanDefinition("bean3", new RootBeanDefinition(StockMovementImpl.class)).     bf.registerBeanDefinition("bean4", new RootBeanDefinition(StockMovementInstructionImpl.class)).     StockServiceImpl service = bf.getBean(StockServiceImpl.class).     assertSame(bf.getBean(StockMovementDaoImpl.class), service.stockMovementDao). }
false;public;0;7;;@Test public void testBridgeMethodHandling() {     bf.registerBeanDefinition("bean1", new RootBeanDefinition(MyCallable.class)).     bf.registerBeanDefinition("bean2", new RootBeanDefinition(SecondCallable.class)).     bf.registerBeanDefinition("bean3", new RootBeanDefinition(FooBar.class)).     assertNotNull(bf.getBean(FooBar.class)). }
false;public;0;7;;@Test public void testSingleConstructorWithProvidedArgument() {     RootBeanDefinition bd = new RootBeanDefinition(ProvidedArgumentBean.class).     bd.getConstructorArgumentValues().addGenericArgumentValue(Collections.singletonList("value")).     bf.registerBeanDefinition("beanWithArgs", bd).     assertNotNull(bf.getBean(ProvidedArgumentBean.class)). }
false;public;0;6;;@Test public void testAnnotatedDefaultConstructor() {     bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(AnnotatedDefaultConstructorBean.class)).     assertNotNull(bf.getBean("annotatedBean")). }
false;public;0;7;;// SPR-15125 @Test public void testFactoryBeanSelfInjection() {     bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(SelfInjectingFactoryBean.class)).     SelfInjectingFactoryBean bean = bf.getBean(SelfInjectingFactoryBean.class).     assertSame(bf.getBean("annotatedBean"), bean.testBean). }
false;public;0;9;;// SPR-15125 @Test public void testFactoryBeanSelfInjectionViaFactoryMethod() {     RootBeanDefinition bd = new RootBeanDefinition(SelfInjectingFactoryBean.class).     bd.setFactoryMethodName("create").     bf.registerBeanDefinition("annotatedBean", bd).     SelfInjectingFactoryBean bean = bf.getBean(SelfInjectingFactoryBean.class).     assertSame(bf.getBean("annotatedBean"), bean.testBean). }
false;private;0;2;;@Qualifier("testBean") private void testBeanQualifierProvider() { }
false;public;1;7;;@Autowired public void setTestBean2(TestBean testBean2) {     if (this.testBean2 != null) {         throw new IllegalStateException("Already called").     }     this.testBean2 = testBean2. }
false;public;0;3;;public TestBean getTestBean() {     return this.testBean. }
false;public;0;3;;public TestBean getTestBean2() {     return this.testBean2. }
false;public;1;7;;@Override @Autowired @Required @SuppressWarnings("deprecation") public void setTestBean2(TestBean testBean2) {     super.setTestBean2(testBean2). }
false;private;2;5;;@Autowired private void inject(ITestBean testBean4, T nestedTestBean) {     this.testBean4 = testBean4.     this.nestedTestBean = nestedTestBean. }
false;private;1;4;;@Autowired private void inject(ITestBean testBean4) {     this.baseInjected = true. }
false;protected;1;4;;@Autowired protected void initBeanFactory(BeanFactory beanFactory) {     this.beanFactory = beanFactory. }
false;public;0;3;;public ITestBean getTestBean3() {     return this.testBean3. }
false;public;0;3;;public ITestBean getTestBean4() {     return this.testBean4. }
false;public;0;3;;public T getNestedTestBean() {     return this.nestedTestBean. }
false;public;0;3;;public BeanFactory getBeanFactory() {     return this.beanFactory. }
false;public;0;4;;@Override public void destroy() {     this.destroyed = true. }
false;public;1;4;;@Override public void setTestBean2(TestBean testBean2) {     super.setTestBean2(testBean2). }
false;protected;1;4;;@Override protected void initBeanFactory(BeanFactory beanFactory) {     this.beanFactory = beanFactory. }
false;private;1;4;;@Autowired private void inject(ITestBean testBean4) {     this.subInjected = true. }
false;;1;2;;@Autowired void setTestBean2(TestBean testBean2).
false;default;1;4;;@Autowired default void injectDefault(ITestBean testBean4) {     markSubInjected(). }
false;;0;1;;void markSubInjected().
false;public;1;4;;@Override public void setTestBean2(TestBean testBean2) {     super.setTestBean2(testBean2). }
false;protected;1;4;;@Override protected void initBeanFactory(BeanFactory beanFactory) {     this.beanFactory = beanFactory. }
false;public;0;4;;@Override public void markSubInjected() {     subInjected = true. }
false;public;1;5;;@Override @Autowired(required = false) public void setTestBean2(TestBean testBean2) {     super.setTestBean2(testBean2). }
false;private;3;6;;@Autowired(required = false) private void inject(ITestBean testBean4, NestedTestBean[] nestedTestBeans, IndexedTestBean indexedTestBean) {     this.testBean4 = testBean4.     this.indexedTestBean = indexedTestBean.     this.nestedTestBeans = nestedTestBeans. }
false;public;0;3;;public ITestBean getTestBean3() {     return this.testBean3. }
false;public;0;3;;public ITestBean getTestBean4() {     return this.testBean4. }
false;public;0;3;;public IndexedTestBean getIndexedTestBean() {     return this.indexedTestBean. }
false;public;0;3;;public NestedTestBean[] getNestedTestBeans() {     return this.nestedTestBeans. }
false;public;1;5;;@Override @Autowired(required = false) public void setTestBean2(TestBean testBean2) {     super.setTestBean2(testBean2). }
false;private;3;6;;@Autowired(required = false) private void inject(ITestBean testBean4, List<NestedTestBean> nestedTestBeans, IndexedTestBean indexedTestBean) {     this.testBean4 = testBean4.     this.indexedTestBean = indexedTestBean.     this.nestedTestBeans = nestedTestBeans. }
false;public;1;4;;@Autowired(required = false) public void setNestedTestBeans(List<NestedTestBean> nestedTestBeans) {     this.nestedTestBeansSetter = nestedTestBeans. }
false;public;0;3;;public ITestBean getTestBean3() {     return this.testBean3. }
false;public;0;3;;public ITestBean getTestBean4() {     return this.testBean4. }
false;public;0;3;;public IndexedTestBean getIndexedTestBean() {     return this.indexedTestBean. }
false;public;0;3;;public List<NestedTestBean> getNestedTestBeans() {     return this.nestedTestBeans. }
false;public;1;5;;@Override @Autowired(required = false) public void setTestBean2(TestBean testBean2) {     super.setTestBean2(testBean2). }
false;public;0;3;;public ITestBean getTestBean3() {     return this.testBean3. }
false;public;0;3;;public ITestBean getTestBean4() {     return this.testBean4. }
false;public;0;3;;public NestedTestBean getNestedTestBean() {     return this.nestedTestBean. }
false;public;0;3;;public ConfigurableListableBeanFactory getBeanFactory() {     return this.beanFactory. }
false;public;0;3;;public ITestBean getTestBean3() {     return this.testBean3. }
false;public;0;3;;public ITestBean getTestBean4() {     return this.testBean4. }
false;public;0;3;;public NestedTestBean[] getNestedTestBeans() {     return this.nestedTestBeans. }
false;public;0;3;;public ITestBean getTestBean3() {     return this.testBean3. }
false;public;0;3;;public ITestBean getTestBean3() {     return this.testBean3. }
false;public;0;3;;public ITestBean getTestBean4() {     return this.testBean4. }
false;public;0;3;;public List<NestedTestBean> getNestedTestBeans() {     return this.nestedTestBeans. }
false;public;0;3;;public ITestBean getTestBean() {     return this.testBean. }
false;public;0;3;;public List<NestedTestBean> getNestedTestBeans() {     return this.nestedTestBeans. }
false;public;0;3;;public ITestBean getTestBean() {     return this.testBean. }
false;public;0;3;;public List<NestedTestBean> getNestedTestBeans() {     return this.nestedTestBeans. }
false;public;0;3;;public ITestBean getTestBean() {     return this.testBean. }
false;public;0;3;;public List<NestedTestBean> getNestedTestBeans() {     return this.nestedTestBeans. }
false;public;0;3;;public Map<String, TestBean> getTestBeanMap() {     return this.testBeanMap. }
false;public;0;3;;public Map<String, TestBean> getTestBeanMap() {     return this.testBeanMap. }
false;public;0;3;;public Set<TestBean> getTestBeanSet() {     return this.testBeanSet. }
false;public;0;3;;public Map<String, TestBean> getTestBeanMap() {     return this.testBeanMap. }
false;public;2;5;;@Autowired(required = false) public void setTestBeanMap(TestBean testBean, Map<String, TestBean> testBeanMap) {     this.testBean = testBean.     this.testBeanMap = testBeanMap. }
false;public;0;3;;public TestBean getTestBean() {     return this.testBean. }
false;public;0;3;;public Map<String, TestBean> getTestBeanMap() {     return this.testBeanMap. }
false;public;0;3;;public TestBean getTestBean() {     return this.testBeanFactory.getObject(). }
false;public;0;3;;public TestBean getTestBean() {     return this.testBeanFactory.getObject(). }
false;public;0;3;;public TestBean getTestBean() {     return (TestBean) this.testBeanFactory.getObject(). }
false;public;0;3;;public TestBean getTestBean() {     return this.testBeanProvider.getObject(). }
false;public;1;3;;public TestBean getTestBean(String name) {     return this.testBeanProvider.getObject(name). }
false;public;0;3;;public TestBean getOptionalTestBean() {     return this.testBeanProvider.getIfAvailable(). }
false;public;0;3;;public TestBean getOptionalTestBeanWithDefault() {     return this.testBeanProvider.getIfAvailable(() -> new TestBean("default")). }
false;public;0;4;;public TestBean consumeOptionalTestBean() {     this.testBeanProvider.ifAvailable(tb -> consumedTestBean = tb).     return consumedTestBean. }
false;public;0;3;;public TestBean getUniqueTestBean() {     return this.testBeanProvider.getIfUnique(). }
false;public;0;3;;public TestBean getUniqueTestBeanWithDefault() {     return this.testBeanProvider.getIfUnique(() -> new TestBean("default")). }
false;public;0;4;;public TestBean consumeUniqueTestBean() {     this.testBeanProvider.ifUnique(tb -> consumedTestBean = tb).     return consumedTestBean. }
false;public;0;7;;public List<TestBean> iterateTestBeans() {     List<TestBean> resolved = new LinkedList<>().     for (TestBean tb : this.testBeanProvider) {         resolved.add(tb).     }     return resolved. }
false;public;0;5;;public List<TestBean> forEachTestBeans() {     List<TestBean> resolved = new LinkedList<>().     this.testBeanProvider.forEach(resolved::add).     return resolved. }
false;public;0;3;;public List<TestBean> streamTestBeans() {     return this.testBeanProvider.stream().collect(Collectors.toList()). }
false;public;0;3;;public List<TestBean> sortedTestBeans() {     return this.testBeanProvider.orderedStream().collect(Collectors.toList()). }
false;public;0;3;;public TestBean getTestBean() {     return this.testBean. }
false;public;1;4;;@MyAutowired(optional = false) public void setTestBean(TestBean testBean) {     this.testBean = testBean. }
false;public;0;3;;public TestBean getTestBean() {     return this.testBean. }
false;public;0;3;;public TestBean getTestBean3() {     return this.testBean3. }
false;protected;1;4;;@MyAutowired(optional = true) protected void setTestBean3(TestBean testBean3) {     this.testBean3 = testBean3. }
false;public;0;3;;public TestBean getTestBean3() {     return this.testBean3. }
false;public,final;0;3;;public final FactoryBean<?> getFactoryBean() {     return this.factoryBean. }
false;public;0;4;;@Override public String getObject() throws Exception {     return "". }
false;public;0;4;;@Override public Class<String> getObjectType() {     return String.class. }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
false;public;1;3;;public void setOrder(int order) {     this.order = order. }
false;public;0;4;;@Override public int getOrder() {     return this.order. }
false;public;0;4;;@Override public T getObject() {     throw new IllegalStateException(). }
false;public;0;4;;@Override public Class<?> getObjectType() {     return Object.class. }
false;public;0;4;;@Override public boolean isSingleton() {     return false. }
false;public;1;4;;@Autowired public void setString(String string) {     this.string = string. }
false;public;1;4;;@Autowired public void setInteger(Integer integer) {     this.integer = integer. }
false;public;1;4;;@Autowired public void setStringArray(String[] stringArray) {     this.stringArray = stringArray. }
false;public;1;4;;@Autowired public void setIntegerArray(Integer[] integerArray) {     this.integerArray = integerArray. }
false;public;1;4;;@Autowired public void setStringList(List<String> stringList) {     this.stringList = stringList. }
false;public;1;4;;@Autowired public void setIntegerList(List<Integer> integerList) {     this.integerList = integerList. }
false;public;1;4;;@Autowired public void setStringMap(Map<String, String> stringMap) {     this.stringMap = stringMap. }
false;public;1;4;;@Autowired public void setIntegerMap(Map<String, Integer> integerMap) {     this.integerMap = integerMap. }
false;public;1;4;;@Autowired public void setStringRepository(Repository<String> stringRepository) {     this.stringRepository = stringRepository. }
false;public;1;4;;@Autowired public void setIntegerRepository(Repository<Integer> integerRepository) {     this.integerRepository = integerRepository. }
false;public;1;4;;@Autowired public void setStringRepositoryArray(Repository<String>[] stringRepositoryArray) {     this.stringRepositoryArray = stringRepositoryArray. }
false;public;1;4;;@Autowired public void setIntegerRepositoryArray(Repository<Integer>[] integerRepositoryArray) {     this.integerRepositoryArray = integerRepositoryArray. }
false;public;1;4;;@Autowired public void setStringRepositoryList(List<Repository<String>> stringRepositoryList) {     this.stringRepositoryList = stringRepositoryList. }
false;public;1;4;;@Autowired public void setIntegerRepositoryList(List<Repository<Integer>> integerRepositoryList) {     this.integerRepositoryList = integerRepositoryList. }
false;public;1;4;;@Autowired public void setStringRepositoryMap(Map<String, Repository<String>> stringRepositoryMap) {     this.stringRepositoryMap = stringRepositoryMap. }
false;public;1;4;;@Autowired public void setIntegerRepositoryMap(Map<String, Repository<Integer>> integerRepositoryMap) {     this.integerRepositoryMap = integerRepositoryMap. }
false;public;1;4;;@Autowired public void setString(S string) {     this.string = string. }
false;public;1;4;;@Autowired public void setInteger(I integer) {     this.integer = integer. }
false;public;1;4;;@Autowired public void setStringArray(S[] stringArray) {     this.stringArray = stringArray. }
false;public;1;4;;@Autowired public void setIntegerArray(I[] integerArray) {     this.integerArray = integerArray. }
false;public;1;4;;@Autowired public void setStringList(List<S> stringList) {     this.stringList = stringList. }
false;public;1;4;;@Autowired public void setIntegerList(List<I> integerList) {     this.integerList = integerList. }
false;public;1;4;;@Autowired public void setStringMap(Map<String, S> stringMap) {     this.stringMap = stringMap. }
false;public;1;4;;@Autowired public void setIntegerMap(Map<String, I> integerMap) {     this.integerMap = integerMap. }
false;public;1;4;;@Autowired public void setStringRepository(Repository<S> stringRepository) {     this.stringRepository = stringRepository. }
false;public;1;4;;@Autowired public void setIntegerRepository(Repository<I> integerRepository) {     this.integerRepository = integerRepository. }
false;public;1;4;;@Autowired public void setStringRepositoryArray(Repository<S>[] stringRepositoryArray) {     this.stringRepositoryArray = stringRepositoryArray. }
false;public;1;4;;@Autowired public void setIntegerRepositoryArray(Repository<I>[] integerRepositoryArray) {     this.integerRepositoryArray = integerRepositoryArray. }
false;public;1;4;;@Autowired public void setStringRepositoryList(List<Repository<S>> stringRepositoryList) {     this.stringRepositoryList = stringRepositoryList. }
false;public;1;4;;@Autowired public void setIntegerRepositoryList(List<Repository<I>> integerRepositoryList) {     this.integerRepositoryList = integerRepositoryList. }
false;public;1;4;;@Autowired public void setStringRepositoryMap(Map<String, Repository<S>> stringRepositoryMap) {     this.stringRepositoryMap = stringRepositoryMap. }
false;public;1;4;;@Autowired public void setIntegerRepositoryMap(Map<String, Repository<I>> integerRepositoryMap) {     this.integerRepositoryMap = integerRepositoryMap. }
false;public;3;4;;@Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {     throw new UnsupportedOperationException("mocked!"). }
false;public;1;10;;@SuppressWarnings("unchecked") public <T> T createMock(Class<T> toMock) {     return (T) Proxy.newProxyInstance(AutowiredAnnotationBeanPostProcessorTests.class.getClassLoader(), new Class<?>[] { toMock }, new InvocationHandler() {          @Override         public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {             throw new UnsupportedOperationException("mocked!").         }     }). }
false;;1;1;;String doSomethingGeneric(T o).
false;public;1;4;;@Override public String doSomethingGeneric(T o) {     return gi2.doSomethingMoreGeneric(o) + "_somethingGeneric_" + o. }
false;public,static;0;3;;public static GenericInterface1<String> create() {     return new StringGenericInterface1Impl(). }
false;public,static;0;3;;public static GenericInterface1<String> createErased() {     return new GenericInterface1Impl<>(). }
false;public,static;0;4;;@SuppressWarnings("rawtypes") public static GenericInterface1 createPlain() {     return new GenericInterface1Impl(). }
false;;1;1;;String doSomethingMoreGeneric(K o).
false;public;1;4;;@Override public String doSomethingMoreGeneric(String o) {     return "somethingMoreGeneric_" + o. }
false;public;1;4;;@Override public String doSomethingMoreGeneric(Object o) {     return "somethingMoreGeneric_" + o. }
false;public;1;4;;@Override public void setBeanName(String name) {     this.name = name. }
false;public;1;4;;@Override public String doSomethingMoreGeneric(K o) {     return this.name + " " + o. }
false;public;0;4;;@Override public String toString() {     return this.stringBean.doSomethingMoreGeneric("a") + " " + this.integerBean.doSomethingMoreGeneric(123). }
false;public;1;4;;@Override public String doSomethingMoreGeneric(Object o) {     return "somethingMoreGeneric_" + o. }
false;public;0;4;;@Override public Thread call() throws Exception {     return null. }
false;public;0;4;;@Override public Thread call() throws Exception {     return null. }
false;protected;1;6;;protected void setObj(RT obj) {     if (this.obj != null) {         throw new IllegalStateException("Already called").     }     this.obj = obj. }
false;public;1;5;;@Override @Autowired public void setObj(MyCallable obj) {     super.setObj(obj). }
false;public;0;4;;@Override public NestedTestBean getObject() {     return null. }
false;public;0;4;;@Override public Class<?> getObjectType() {     return NestedTestBean.class. }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
false;public,static;0;3;;public static TestBean createTestBean() {     return null. }
false;public,static;0;3;;public static NestedTestBean createNestedTestBean() {     return null. }
false;public,static;0;6;;public static Map<String, TestBean> testBeanMap() {     Map<String, TestBean> tbm = new LinkedHashMap<>().     tbm.put("testBean1", new TestBean("tb1")).     tbm.put("testBean2", new TestBean("tb2")).     return tbm. }
false;public,static;0;6;;public static Set<TestBean> testBeanSet() {     Set<TestBean> tbs = new LinkedHashSet<>().     tbs.add(new TestBean("tb1")).     tbs.add(new TestBean("tb2")).     return tbs. }
false;public,static;0;6;;public static CustomMap<String, TestBean> testBeanMap() {     CustomMap<String, TestBean> tbm = new CustomHashMap<>().     tbm.put("testBean1", new TestBean("tb1")).     tbm.put("testBean2", new TestBean("tb2")).     return tbm. }
false;public,static;0;6;;public static CustomSet<TestBean> testBeanSet() {     CustomSet<TestBean> tbs = new CustomHashSet<>().     tbs.add(new TestBean("tb1")).     tbs.add(new TestBean("tb2")).     return tbs. }
false;public;0;3;;public CustomMap<String, TestBean> getTestBeanMap() {     return this.testBeanMap. }
false;public;0;3;;public CustomSet<TestBean> getTestBeanSet() {     return this.testBeanSet. }
false;public;0;4;;@Override public TestBean getObject() {     return exposedTestBean. }
false;public;0;4;;@Override public Class<?> getObjectType() {     return TestBean.class. }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
false;public,static;0;3;;public static SelfInjectingFactoryBean create() {     return new SelfInjectingFactoryBean(). }
false;public,static;0;4;;@Order(1) public static TestBean newTestBean1() {     return new TestBean(). }
false;public,static;0;4;;@Order(0) public static TestBean newTestBean2() {     return new TestBean(). }
