commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public void init() {     checkCurrentContext(). }
false;public;0;4;;public void destroy() {     checkCurrentContext().     destroyed = true. }
false;public;1;3;;public void setProperty(Object value) {     checkCurrentContext(). }
false;public;0;4;;public Object getProperty() {     checkCurrentContext().     return null. }
false;public;1;3;;public void setListProperty(Object value) {     checkCurrentContext(). }
false;public;0;4;;public Object getListProperty() {     checkCurrentContext().     return null. }
false;private;0;3;;private void checkCurrentContext() {     assertEquals(expectedName, getCurrentSubjectName()). }
false;public;0;4;;@Override public void afterPropertiesSet() {     checkCurrentContext(). }
false;public;0;5;;@Override public void destroy() {     checkCurrentContext().     destroyed = true. }
false;public;1;4;;@Override public void setBeanName(String name) {     checkCurrentContext(). }
false;public;1;4;;@Override public void setBeanClassLoader(ClassLoader classLoader) {     checkCurrentContext(). }
false;public;1;5;;@Override public void setBeanFactory(BeanFactory beanFactory) throws BeansException {     checkCurrentContext(). }
false;private;0;3;;private void checkCurrentContext() {     assertEquals(expectedName, getCurrentSubjectName()). }
false;public;0;5;;@Override public boolean isEagerInit() {     checkCurrentContext().     return false. }
false;public;0;5;;@Override public boolean isPrototype() {     checkCurrentContext().     return true. }
false;public;0;5;;@Override public Object getObject() throws Exception {     checkCurrentContext().     return new Object(). }
false;public;0;5;;@Override public Class getObjectType() {     checkCurrentContext().     return Object.class. }
false;public;0;5;;@Override public boolean isSingleton() {     checkCurrentContext().     return false. }
false;private;0;3;;private void checkCurrentContext() {     assertEquals(expectedName, getCurrentSubjectName()). }
false;public,static;1;4;;public static Object makeStaticInstance(String expectedName) {     assertEquals(expectedName, getCurrentSubjectName()).     return new Object(). }
false;public;0;4;;public Object makeInstance() {     assertEquals(expectedName, getCurrentSubjectName()).     return new Object(). }
false;public;0;17;;@Override public String run() {     Subject subject = Subject.getSubject(acc).     if (subject == null) {         return null.     }     Set<Principal> principals = subject.getPrincipals().     if (principals == null) {         return null.     }     for (Principal p : principals) {         return p.getName().     }     return null. }
false;private,static;0;24;;private static String getCurrentSubjectName() {     final AccessControlContext acc = AccessController.getContext().     return AccessController.doPrivileged(new PrivilegedAction<String>() {          @Override         public String run() {             Subject subject = Subject.getSubject(acc).             if (subject == null) {                 return null.             }             Set<Principal> principals = subject.getPrincipals().             if (principals == null) {                 return null.             }             for (Principal p : principals) {                 return p.getName().             }             return null.         }     }). }
false;public;0;4;;@Override public String getName() {     return this.name. }
false;public;1;11;;@Override public boolean equals(Object obj) {     if (obj == this) {         return true.     }     if (!(obj instanceof TestPrincipal)) {         return false.     }     TestPrincipal p = (TestPrincipal) obj.     return this.name.equals(p.name). }
false;public;0;4;;@Override public int hashCode() {     return this.name.hashCode(). }
false;public;0;4;;@Override public AccessControlContext getAccessControlContext() {     return acc. }
false;public;0;23;;@Before public void setUp() throws Exception {     final ProtectionDomain empty = new ProtectionDomain(null, new Permissions()).     provider = new SecurityContextProvider() {          private final AccessControlContext acc = new AccessControlContext(new ProtectionDomain[] { empty }).          @Override         public AccessControlContext getAccessControlContext() {             return acc.         }     }.     DefaultResourceLoader drl = new DefaultResourceLoader().     Resource config = drl.getResource("/org/springframework/beans/factory/support/security/callbacks.xml").     beanFactory = new DefaultListableBeanFactory().     new XmlBeanDefinitionReader(beanFactory).loadBeanDefinitions(config).     beanFactory.setSecurityContextProvider(provider). }
false;public;0;5;;@Override public Object run() throws Exception {     method.invoke(bean).     return null. }
false;public;0;4;;@Override public Object run() throws Exception {     return cl.newInstance(). }
false;public;0;44;;@Test public void testSecuritySanity() throws Exception {     AccessControlContext acc = provider.getAccessControlContext().     try {         acc.checkPermission(new PropertyPermission("*", "read")).         fail("Acc should not have any permissions").     } catch (SecurityException se) {     // expected     }     final CustomCallbackBean bean = new CustomCallbackBean().     final Method method = bean.getClass().getMethod("destroy").     method.setAccessible(true).     try {         AccessController.doPrivileged(new PrivilegedExceptionAction<Object>() {              @Override             public Object run() throws Exception {                 method.invoke(bean).                 return null.             }         }, acc).         fail("expected security exception").     } catch (Exception ex) {     }     final Class<ConstructorBean> cl = ConstructorBean.class.     try {         AccessController.doPrivileged(new PrivilegedExceptionAction<Object>() {              @Override             public Object run() throws Exception {                 return cl.newInstance().             }         }, acc).         fail("expected security exception").     } catch (Exception ex) {     } }
false;public;0;10;;@Test public void testSpringInitBean() throws Exception {     try {         beanFactory.getBean("spring-init").         fail("expected security exception").     } catch (BeanCreationException ex) {         assertTrue(ex.getCause() instanceof SecurityException).     } }
false;public;0;10;;@Test public void testCustomInitBean() throws Exception {     try {         beanFactory.getBean("custom-init").         fail("expected security exception").     } catch (BeanCreationException ex) {         assertTrue(ex.getCause() instanceof SecurityException).     } }
false;public;0;6;;@Test public void testSpringDestroyBean() throws Exception {     beanFactory.getBean("spring-destroy").     beanFactory.destroySingletons().     assertNull(System.getProperty("security.destroy")). }
false;public;0;6;;@Test public void testCustomDestroyBean() throws Exception {     beanFactory.getBean("custom-destroy").     beanFactory.destroySingletons().     assertNull(System.getProperty("security.destroy")). }
false;public;0;11;;@Test public void testCustomFactoryObject() throws Exception {     try {         beanFactory.getBean("spring-factory").         fail("expected security exception").     } catch (BeanCreationException ex) {         assertTrue(ex.getCause() instanceof SecurityException).     } }
false;public;0;5;;@Test public void testCustomFactoryType() throws Exception {     assertNull(beanFactory.getType("spring-factory")).     assertNull(System.getProperty("factory.object.type")). }
false;public;0;10;;@Test public void testCustomStaticFactoryMethod() throws Exception {     try {         beanFactory.getBean("custom-static-factory-method").         fail("expected security exception").     } catch (BeanCreationException ex) {         assertTrue(ex.getMostSpecificCause() instanceof SecurityException).     } }
false;public;0;10;;@Test public void testCustomInstanceFactoryMethod() throws Exception {     try {         beanFactory.getBean("custom-factory-method").         fail("expected security exception").     } catch (BeanCreationException ex) {         assertTrue(ex.getMostSpecificCause() instanceof SecurityException).     } }
false;public;0;10;;@Test public void testTrustedFactoryMethod() throws Exception {     try {         beanFactory.getBean("privileged-static-factory-method").         fail("expected security exception").     } catch (BeanCreationException ex) {         assertTrue(ex.getMostSpecificCause() instanceof SecurityException).     } }
false;public;0;11;;@Test public void testConstructor() throws Exception {     try {         beanFactory.getBean("constructor").         fail("expected security exception").     } catch (BeanCreationException ex) {         // expected         assertTrue(ex.getMostSpecificCause() instanceof SecurityException).     } }
false;public;0;6;;@Override public Object run() throws Exception {     beanFactory.getBean("working-factory-method").     beanFactory.getBean("container-execution").     return null. }
false;public;0;14;;@Test public void testContainerPrivileges() throws Exception {     AccessControlContext acc = provider.getAccessControlContext().     AccessController.doPrivileged(new PrivilegedExceptionAction<Object>() {          @Override         public Object run() throws Exception {             beanFactory.getBean("working-factory-method").             beanFactory.getBean("container-execution").             return null.         }     }, acc). }
false;public;0;12;;@Test public void testPropertyInjection() throws Exception {     try {         beanFactory.getBean("property-injection").         fail("expected security exception").     } catch (BeanCreationException ex) {         assertTrue(ex.getMessage().contains("security")).     }     beanFactory.getBean("working-property-injection"). }
false;public;0;4;;@Override public NonPrivilegedBean run() {     return lbf.getBean("test", NonPrivilegedBean.class). }
false;public;0;21;;@Test public void testInitSecurityAwarePrototypeBean() {     final DefaultListableBeanFactory lbf = new DefaultListableBeanFactory().     BeanDefinitionBuilder bdb = BeanDefinitionBuilder.genericBeanDefinition(NonPrivilegedBean.class).setScope(ConfigurableBeanFactory.SCOPE_PROTOTYPE).setInitMethodName("init").setDestroyMethodName("destroy").addConstructorArgValue("user1").     lbf.registerBeanDefinition("test", bdb.getBeanDefinition()).     final Subject subject = new Subject().     subject.getPrincipals().add(new TestPrincipal("user1")).     NonPrivilegedBean bean = Subject.doAsPrivileged(subject, new PrivilegedAction<NonPrivilegedBean>() {          @Override         public NonPrivilegedBean run() {             return lbf.getBean("test", NonPrivilegedBean.class).         }     }, null).     assertNotNull(bean). }
false;public;0;23;;@Override public Object run() {     // sanity check     assertEquals("user1", getCurrentSubjectName()).     assertEquals(false, NonPrivilegedBean.destroyed).     beanFactory.getBean("trusted-spring-callbacks").     beanFactory.getBean("trusted-custom-init-destroy").     // the factory is a prototype - ask for multiple instances     beanFactory.getBean("trusted-spring-factory").     beanFactory.getBean("trusted-spring-factory").     beanFactory.getBean("trusted-spring-factory").     beanFactory.getBean("trusted-factory-bean").     beanFactory.getBean("trusted-static-factory-method").     beanFactory.getBean("trusted-factory-method").     beanFactory.getBean("trusted-property-injection").     beanFactory.getBean("trusted-working-property-injection").     beanFactory.destroySingletons().     assertEquals(true, NonPrivilegedBean.destroyed).     return null. }
false;public;0;41;;@Test public void testTrustedExecution() throws Exception {     beanFactory.setSecurityContextProvider(null).     Permissions perms = new Permissions().     perms.add(new AuthPermission("getSubject")).     ProtectionDomain pd = new ProtectionDomain(null, perms).     new AccessControlContext(new ProtectionDomain[] { pd }).     final Subject subject = new Subject().     subject.getPrincipals().add(new TestPrincipal("user1")).     // request the beans from non-privileged code     Subject.doAsPrivileged(subject, new PrivilegedAction<Object>() {          @Override         public Object run() {             // sanity check             assertEquals("user1", getCurrentSubjectName()).             assertEquals(false, NonPrivilegedBean.destroyed).             beanFactory.getBean("trusted-spring-callbacks").             beanFactory.getBean("trusted-custom-init-destroy").             // the factory is a prototype - ask for multiple instances             beanFactory.getBean("trusted-spring-factory").             beanFactory.getBean("trusted-spring-factory").             beanFactory.getBean("trusted-spring-factory").             beanFactory.getBean("trusted-factory-bean").             beanFactory.getBean("trusted-static-factory-method").             beanFactory.getBean("trusted-factory-method").             beanFactory.getBean("trusted-property-injection").             beanFactory.getBean("trusted-working-property-injection").             beanFactory.destroySingletons().             assertEquals(true, NonPrivilegedBean.destroyed).             return null.         }     }, provider.getAccessControlContext()). }
