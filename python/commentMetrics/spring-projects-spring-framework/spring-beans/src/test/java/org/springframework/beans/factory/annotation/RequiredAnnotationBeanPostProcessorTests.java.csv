commented;modifiers;parameterAmount;loc;comment;code
false;public;0;22;;@Test public void testWithRequiredPropertyOmitted() {     try {         DefaultListableBeanFactory factory = new DefaultListableBeanFactory().         BeanDefinition beanDef = BeanDefinitionBuilder.genericBeanDefinition(RequiredTestBean.class).addPropertyValue("name", "Rob Harrop").addPropertyValue("favouriteColour", "Blue").addPropertyValue("jobTitle", "Grand Poobah").getBeanDefinition().         factory.registerBeanDefinition("testBean", beanDef).         factory.addBeanPostProcessor(new RequiredAnnotationBeanPostProcessor()).         factory.preInstantiateSingletons().         fail("Should have thrown BeanCreationException").     } catch (BeanCreationException ex) {         String message = ex.getCause().getMessage().         assertTrue(message.contains("Property")).         assertTrue(message.contains("age")).         assertTrue(message.contains("testBean")).     } }
false;public;0;22;;@Test public void testWithThreeRequiredPropertiesOmitted() {     try {         DefaultListableBeanFactory factory = new DefaultListableBeanFactory().         BeanDefinition beanDef = BeanDefinitionBuilder.genericBeanDefinition(RequiredTestBean.class).addPropertyValue("name", "Rob Harrop").getBeanDefinition().         factory.registerBeanDefinition("testBean", beanDef).         factory.addBeanPostProcessor(new RequiredAnnotationBeanPostProcessor()).         factory.preInstantiateSingletons().         fail("Should have thrown BeanCreationException").     } catch (BeanCreationException ex) {         String message = ex.getCause().getMessage().         assertTrue(message.contains("Properties")).         assertTrue(message.contains("age")).         assertTrue(message.contains("favouriteColour")).         assertTrue(message.contains("jobTitle")).         assertTrue(message.contains("testBean")).     } }
false;public;0;16;;@Test public void testWithAllRequiredPropertiesSpecified() {     DefaultListableBeanFactory factory = new DefaultListableBeanFactory().     BeanDefinition beanDef = BeanDefinitionBuilder.genericBeanDefinition(RequiredTestBean.class).addPropertyValue("age", "24").addPropertyValue("favouriteColour", "Blue").addPropertyValue("jobTitle", "Grand Poobah").getBeanDefinition().     factory.registerBeanDefinition("testBean", beanDef).     factory.addBeanPostProcessor(new RequiredAnnotationBeanPostProcessor()).     factory.preInstantiateSingletons().     RequiredTestBean bean = (RequiredTestBean) factory.getBean("testBean").     assertEquals(24, bean.getAge()).     assertEquals("Blue", bean.getFavouriteColour()). }
false;public;0;21;;@Test public void testWithCustomAnnotation() {     try {         DefaultListableBeanFactory factory = new DefaultListableBeanFactory().         BeanDefinition beanDef = BeanDefinitionBuilder.genericBeanDefinition(RequiredTestBean.class).getBeanDefinition().         factory.registerBeanDefinition("testBean", beanDef).         RequiredAnnotationBeanPostProcessor rabpp = new RequiredAnnotationBeanPostProcessor().         rabpp.setRequiredAnnotationType(MyRequired.class).         factory.addBeanPostProcessor(rabpp).         factory.preInstantiateSingletons().         fail("Should have thrown BeanCreationException").     } catch (BeanCreationException ex) {         String message = ex.getCause().getMessage().         assertTrue(message.contains("Property")).         assertTrue(message.contains("name")).         assertTrue(message.contains("testBean")).     } }
false;public;0;23;;@Test public void testWithStaticFactoryMethod() {     try {         DefaultListableBeanFactory factory = new DefaultListableBeanFactory().         BeanDefinition beanDef = BeanDefinitionBuilder.genericBeanDefinition(RequiredTestBean.class).setFactoryMethod("create").addPropertyValue("name", "Rob Harrop").addPropertyValue("favouriteColour", "Blue").addPropertyValue("jobTitle", "Grand Poobah").getBeanDefinition().         factory.registerBeanDefinition("testBean", beanDef).         factory.addBeanPostProcessor(new RequiredAnnotationBeanPostProcessor()).         factory.preInstantiateSingletons().         fail("Should have thrown BeanCreationException").     } catch (BeanCreationException ex) {         String message = ex.getCause().getMessage().         assertTrue(message.contains("Property")).         assertTrue(message.contains("age")).         assertTrue(message.contains("testBean")).     } }
false;public;0;17;;@Test public void testWithStaticFactoryMethodAndRequiredPropertiesSpecified() {     DefaultListableBeanFactory factory = new DefaultListableBeanFactory().     BeanDefinition beanDef = BeanDefinitionBuilder.genericBeanDefinition(RequiredTestBean.class).setFactoryMethod("create").addPropertyValue("age", "24").addPropertyValue("favouriteColour", "Blue").addPropertyValue("jobTitle", "Grand Poobah").getBeanDefinition().     factory.registerBeanDefinition("testBean", beanDef).     factory.addBeanPostProcessor(new RequiredAnnotationBeanPostProcessor()).     factory.preInstantiateSingletons().     RequiredTestBean bean = (RequiredTestBean) factory.getBean("testBean").     assertEquals(24, bean.getAge()).     assertEquals("Blue", bean.getFavouriteColour()). }
false;public;0;13;;@Test public void testWithFactoryBean() {     DefaultListableBeanFactory factory = new DefaultListableBeanFactory().     RootBeanDefinition beanDef = new RootBeanDefinition(RequiredTestBean.class).     beanDef.setFactoryBeanName("testBeanFactory").     beanDef.setFactoryMethodName("create").     factory.registerBeanDefinition("testBean", beanDef).     factory.registerBeanDefinition("testBeanFactory", new RootBeanDefinition(RequiredTestBeanFactory.class)).     RequiredAnnotationBeanPostProcessor bpp = new RequiredAnnotationBeanPostProcessor().     bpp.setBeanFactory(factory).     factory.addBeanPostProcessor(bpp).     factory.preInstantiateSingletons(). }
false;public;0;3;;public int getAge() {     return age. }
false;public;1;4;;@Required public void setAge(int age) {     this.age = age. }
false;public;0;3;;public String getName() {     return name. }
false;public;1;4;;@MyRequired public void setName(String name) {     this.name = name. }
false;public;0;3;;public String getFavouriteColour() {     return favouriteColour. }
false;public;1;4;;@Required public void setFavouriteColour(String favouriteColour) {     this.favouriteColour = favouriteColour. }
false;public;0;3;;public String getJobTitle() {     return jobTitle. }
false;public;1;4;;@Required public void setJobTitle(String jobTitle) {     this.jobTitle = jobTitle. }
false;public;1;4;;@Override @Required public void setBeanName(String name) { }
false;public;1;4;;@Override @Required public void setBeanFactory(BeanFactory beanFactory) { }
false;public,static;0;3;;public static RequiredTestBean create() {     return new RequiredTestBean(). }
false;public;0;3;;public RequiredTestBean create() {     return new RequiredTestBean(). }
