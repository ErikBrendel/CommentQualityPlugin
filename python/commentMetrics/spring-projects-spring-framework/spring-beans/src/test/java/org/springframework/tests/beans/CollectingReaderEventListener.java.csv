commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void defaultsRegistered(DefaultsDefinition defaultsDefinition) {     this.defaults.add(defaultsDefinition). }
false;public;0;3;;public List<DefaultsDefinition> getDefaults() {     return Collections.unmodifiableList(this.defaults). }
false;public;1;4;;@Override public void componentRegistered(ComponentDefinition componentDefinition) {     this.componentDefinitions.put(componentDefinition.getName(), componentDefinition). }
false;public;1;3;;public ComponentDefinition getComponentDefinition(String name) {     return this.componentDefinitions.get(name). }
false;public;0;4;;public ComponentDefinition[] getComponentDefinitions() {     Collection<ComponentDefinition> collection = this.componentDefinitions.values().     return collection.toArray(new ComponentDefinition[collection.size()]). }
false;public;1;9;;@Override public void aliasRegistered(AliasDefinition aliasDefinition) {     List<AliasDefinition> aliases = this.aliasMap.get(aliasDefinition.getBeanName()).     if (aliases == null) {         aliases = new ArrayList<>().         this.aliasMap.put(aliasDefinition.getBeanName(), aliases).     }     aliases.add(aliasDefinition). }
false;public;1;4;;public List<AliasDefinition> getAliases(String beanName) {     List<AliasDefinition> aliases = this.aliasMap.get(beanName).     return (aliases != null ? Collections.unmodifiableList(aliases) : null). }
false;public;1;4;;@Override public void importProcessed(ImportDefinition importDefinition) {     this.imports.add(importDefinition). }
false;public;0;3;;public List<ImportDefinition> getImports() {     return Collections.unmodifiableList(this.imports). }
