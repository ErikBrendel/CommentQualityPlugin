commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void setInitMethodDeclared(boolean initMethodDeclared) {     this.initMethodDeclared = initMethodDeclared. }
false;public;0;3;;public boolean isInitMethodDeclared() {     return initMethodDeclared. }
false;public;1;4;;@Override public void setBeanName(String name) {     this.beanName = name. }
false;public;0;3;;public String getBeanName() {     return beanName. }
false;public;1;4;;@Override public void setBeanFactory(BeanFactory beanFactory) {     this.owningFactory = beanFactory. }
false;public;0;9;;public void postProcessBeforeInit() {     if (this.inited || this.initedViaDeclaredInitMethod) {         throw new RuntimeException("Factory called postProcessBeforeInit after afterPropertiesSet").     }     if (this.postProcessedBeforeInit) {         throw new RuntimeException("Factory called postProcessBeforeInit twice").     }     this.postProcessedBeforeInit = true. }
false;public;0;16;;@Override public void afterPropertiesSet() {     if (this.owningFactory == null) {         throw new RuntimeException("Factory didn't call setBeanFactory before afterPropertiesSet on lifecycle bean").     }     if (!this.postProcessedBeforeInit) {         throw new RuntimeException("Factory didn't call postProcessBeforeInit before afterPropertiesSet on lifecycle bean").     }     if (this.initedViaDeclaredInitMethod) {         throw new RuntimeException("Factory initialized via declared init method before initializing via afterPropertiesSet").     }     if (this.inited) {         throw new RuntimeException("Factory called afterPropertiesSet twice").     }     this.inited = true. }
false;public;0;10;;public void declaredInitMethod() {     if (!this.inited) {         throw new RuntimeException("Factory didn't call afterPropertiesSet before declared init method").     }     if (this.initedViaDeclaredInitMethod) {         throw new RuntimeException("Factory called declared init method twice").     }     this.initedViaDeclaredInitMethod = true. }
false;public;0;12;;public void postProcessAfterInit() {     if (!this.inited) {         throw new RuntimeException("Factory called postProcessAfterInit before afterPropertiesSet").     }     if (this.initMethodDeclared && !this.initedViaDeclaredInitMethod) {         throw new RuntimeException("Factory called postProcessAfterInit before calling declared init method").     }     if (this.postProcessedAfterInit) {         throw new RuntimeException("Factory called postProcessAfterInit twice").     }     this.postProcessedAfterInit = true. }
true;public;0;6;/**  * Dummy business method that will fail unless the factory  * managed the bean's lifecycle correctly  */ ;/**  * Dummy business method that will fail unless the factory  * managed the bean's lifecycle correctly  */ public void businessMethod() {     if (!this.inited || (this.initMethodDeclared && !this.initedViaDeclaredInitMethod) || !this.postProcessedAfterInit) {         throw new RuntimeException("Factory didn't initialize lifecycle object correctly").     } }
false;public;0;7;;@Override public void destroy() {     if (this.destroyed) {         throw new IllegalStateException("Already destroyed").     }     this.destroyed = true. }
false;public;0;3;;public boolean isDestroyed() {     return destroyed. }
false;public;2;7;;@Override public Object postProcessBeforeInitialization(Object bean, String name) throws BeansException {     if (bean instanceof ProtectedLifecycleBean) {         ((ProtectedLifecycleBean) bean).postProcessBeforeInit().     }     return bean. }
false;public;2;7;;@Override public Object postProcessAfterInitialization(Object bean, String name) throws BeansException {     if (bean instanceof ProtectedLifecycleBean) {         ((ProtectedLifecycleBean) bean).postProcessAfterInit().     }     return bean. }
