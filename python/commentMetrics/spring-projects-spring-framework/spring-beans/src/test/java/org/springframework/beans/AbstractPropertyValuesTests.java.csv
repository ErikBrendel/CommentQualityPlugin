# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractPropertyValuesTests -> protected void doTestTony(PropertyValues pvs) throws Exception;1328020251;Must contain: forname=Tony surname=Blair age=50;protected void doTestTony(PropertyValues pvs) throws Exception {_		assertTrue("Contains 3", pvs.getPropertyValues().length == 3)__		assertTrue("Contains forname", pvs.contains("forname"))__		assertTrue("Contains surname", pvs.contains("surname"))__		assertTrue("Contains age", pvs.contains("age"))__		assertTrue("Doesn't contain tory", !pvs.contains("tory"))___		PropertyValue[] ps = pvs.getPropertyValues()__		Map<String, String> m = new HashMap<String, String>()__		m.put("forname", "Tony")__		m.put("surname", "Blair")__		m.put("age", "50")__		for (int i = 0_ i < ps.length_ i++) {_			Object val = m.get(ps[i].getName())__			assertTrue("Can't have unexpected value", val != null)__			assertTrue("Val i string", val instanceof String)__			assertTrue("val matches expected", val.equals(ps[i].getValue()))__			m.remove(ps[i].getName())__		}_		assertTrue("Map size is 0", m.size() == 0)__	};must,contain,forname,tony,surname,blair,age,50;protected,void,do,test,tony,property,values,pvs,throws,exception,assert,true,contains,3,pvs,get,property,values,length,3,assert,true,contains,forname,pvs,contains,forname,assert,true,contains,surname,pvs,contains,surname,assert,true,contains,age,pvs,contains,age,assert,true,doesn,t,contain,tory,pvs,contains,tory,property,value,ps,pvs,get,property,values,map,string,string,m,new,hash,map,string,string,m,put,forname,tony,m,put,surname,blair,m,put,age,50,for,int,i,0,i,ps,length,i,object,val,m,get,ps,i,get,name,assert,true,can,t,have,unexpected,value,val,null,assert,true,val,i,string,val,instanceof,string,assert,true,val,matches,expected,val,equals,ps,i,get,value,m,remove,ps,i,get,name,assert,true,map,size,is,0,m,size,0
AbstractPropertyValuesTests -> protected void doTestTony(PropertyValues pvs) throws Exception;1356735495;Must contain: forname=Tony surname=Blair age=50;protected void doTestTony(PropertyValues pvs) throws Exception {_		assertTrue("Contains 3", pvs.getPropertyValues().length == 3)__		assertTrue("Contains forname", pvs.contains("forname"))__		assertTrue("Contains surname", pvs.contains("surname"))__		assertTrue("Contains age", pvs.contains("age"))__		assertTrue("Doesn't contain tory", !pvs.contains("tory"))___		PropertyValue[] ps = pvs.getPropertyValues()__		Map<String, String> m = new HashMap<String, String>()__		m.put("forname", "Tony")__		m.put("surname", "Blair")__		m.put("age", "50")__		for (int i = 0_ i < ps.length_ i++) {_			Object val = m.get(ps[i].getName())__			assertTrue("Can't have unexpected value", val != null)__			assertTrue("Val i string", val instanceof String)__			assertTrue("val matches expected", val.equals(ps[i].getValue()))__			m.remove(ps[i].getName())__		}_		assertTrue("Map size is 0", m.size() == 0)__	};must,contain,forname,tony,surname,blair,age,50;protected,void,do,test,tony,property,values,pvs,throws,exception,assert,true,contains,3,pvs,get,property,values,length,3,assert,true,contains,forname,pvs,contains,forname,assert,true,contains,surname,pvs,contains,surname,assert,true,contains,age,pvs,contains,age,assert,true,doesn,t,contain,tory,pvs,contains,tory,property,value,ps,pvs,get,property,values,map,string,string,m,new,hash,map,string,string,m,put,forname,tony,m,put,surname,blair,m,put,age,50,for,int,i,0,i,ps,length,i,object,val,m,get,ps,i,get,name,assert,true,can,t,have,unexpected,value,val,null,assert,true,val,i,string,val,instanceof,string,assert,true,val,matches,expected,val,equals,ps,i,get,value,m,remove,ps,i,get,name,assert,true,map,size,is,0,m,size,0
AbstractPropertyValuesTests -> protected void doTestTony(PropertyValues pvs) throws Exception;1413848647;Must contain: forname=Tony surname=Blair age=50;protected void doTestTony(PropertyValues pvs) throws Exception {_		assertTrue("Contains 3", pvs.getPropertyValues().length == 3)__		assertTrue("Contains forname", pvs.contains("forname"))__		assertTrue("Contains surname", pvs.contains("surname"))__		assertTrue("Contains age", pvs.contains("age"))__		assertTrue("Doesn't contain tory", !pvs.contains("tory"))___		PropertyValue[] ps = pvs.getPropertyValues()__		Map<String, String> m = new HashMap<String, String>()__		m.put("forname", "Tony")__		m.put("surname", "Blair")__		m.put("age", "50")__		for (int i = 0_ i < ps.length_ i++) {_			Object val = m.get(ps[i].getName())__			assertTrue("Can't have unexpected value", val != null)__			assertTrue("Val i string", val instanceof String)__			assertTrue("val matches expected", val.equals(ps[i].getValue()))__			m.remove(ps[i].getName())__		}_		assertTrue("Map size is 0", m.size() == 0)__	};must,contain,forname,tony,surname,blair,age,50;protected,void,do,test,tony,property,values,pvs,throws,exception,assert,true,contains,3,pvs,get,property,values,length,3,assert,true,contains,forname,pvs,contains,forname,assert,true,contains,surname,pvs,contains,surname,assert,true,contains,age,pvs,contains,age,assert,true,doesn,t,contain,tory,pvs,contains,tory,property,value,ps,pvs,get,property,values,map,string,string,m,new,hash,map,string,string,m,put,forname,tony,m,put,surname,blair,m,put,age,50,for,int,i,0,i,ps,length,i,object,val,m,get,ps,i,get,name,assert,true,can,t,have,unexpected,value,val,null,assert,true,val,i,string,val,instanceof,string,assert,true,val,matches,expected,val,equals,ps,i,get,value,m,remove,ps,i,get,name,assert,true,map,size,is,0,m,size,0
AbstractPropertyValuesTests -> protected void doTestTony(PropertyValues pvs) throws Exception;1467730834;Must contain: forname=Tony surname=Blair age=50;protected void doTestTony(PropertyValues pvs) throws Exception {_		assertTrue("Contains 3", pvs.getPropertyValues().length == 3)__		assertTrue("Contains forname", pvs.contains("forname"))__		assertTrue("Contains surname", pvs.contains("surname"))__		assertTrue("Contains age", pvs.contains("age"))__		assertTrue("Doesn't contain tory", !pvs.contains("tory"))___		PropertyValue[] ps = pvs.getPropertyValues()__		Map<String, String> m = new HashMap<>()__		m.put("forname", "Tony")__		m.put("surname", "Blair")__		m.put("age", "50")__		for (int i = 0_ i < ps.length_ i++) {_			Object val = m.get(ps[i].getName())__			assertTrue("Can't have unexpected value", val != null)__			assertTrue("Val i string", val instanceof String)__			assertTrue("val matches expected", val.equals(ps[i].getValue()))__			m.remove(ps[i].getName())__		}_		assertTrue("Map size is 0", m.size() == 0)__	};must,contain,forname,tony,surname,blair,age,50;protected,void,do,test,tony,property,values,pvs,throws,exception,assert,true,contains,3,pvs,get,property,values,length,3,assert,true,contains,forname,pvs,contains,forname,assert,true,contains,surname,pvs,contains,surname,assert,true,contains,age,pvs,contains,age,assert,true,doesn,t,contain,tory,pvs,contains,tory,property,value,ps,pvs,get,property,values,map,string,string,m,new,hash,map,m,put,forname,tony,m,put,surname,blair,m,put,age,50,for,int,i,0,i,ps,length,i,object,val,m,get,ps,i,get,name,assert,true,can,t,have,unexpected,value,val,null,assert,true,val,i,string,val,instanceof,string,assert,true,val,matches,expected,val,equals,ps,i,get,value,m,remove,ps,i,get,name,assert,true,map,size,is,0,m,size,0
AbstractPropertyValuesTests -> protected void doTestTony(PropertyValues pvs) throws Exception;1530174524;Must contain: forname=Tony surname=Blair age=50;protected void doTestTony(PropertyValues pvs) throws Exception {_		assertTrue("Contains 3", pvs.getPropertyValues().length == 3)__		assertTrue("Contains forname", pvs.contains("forname"))__		assertTrue("Contains surname", pvs.contains("surname"))__		assertTrue("Contains age", pvs.contains("age"))__		assertTrue("Doesn't contain tory", !pvs.contains("tory"))___		PropertyValue[] ps = pvs.getPropertyValues()__		Map<String, String> m = new HashMap<>()__		m.put("forname", "Tony")__		m.put("surname", "Blair")__		m.put("age", "50")__		for (int i = 0_ i < ps.length_ i++) {_			Object val = m.get(ps[i].getName())__			assertTrue("Can't have unexpected value", val != null)__			assertTrue("Val i string", val instanceof String)__			assertTrue("val matches expected", val.equals(ps[i].getValue()))__			m.remove(ps[i].getName())__		}_		assertTrue("Map size is 0", m.size() == 0)__	};must,contain,forname,tony,surname,blair,age,50;protected,void,do,test,tony,property,values,pvs,throws,exception,assert,true,contains,3,pvs,get,property,values,length,3,assert,true,contains,forname,pvs,contains,forname,assert,true,contains,surname,pvs,contains,surname,assert,true,contains,age,pvs,contains,age,assert,true,doesn,t,contain,tory,pvs,contains,tory,property,value,ps,pvs,get,property,values,map,string,string,m,new,hash,map,m,put,forname,tony,m,put,surname,blair,m,put,age,50,for,int,i,0,i,ps,length,i,object,val,m,get,ps,i,get,name,assert,true,can,t,have,unexpected,value,val,null,assert,true,val,i,string,val,instanceof,string,assert,true,val,matches,expected,val,equals,ps,i,get,value,m,remove,ps,i,get,name,assert,true,map,size,is,0,m,size,0
