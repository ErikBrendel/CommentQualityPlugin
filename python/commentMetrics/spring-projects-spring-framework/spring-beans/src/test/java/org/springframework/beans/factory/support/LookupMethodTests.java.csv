commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Before public void setUp() {     beanFactory = new DefaultListableBeanFactory().     XmlBeanDefinitionReader reader = new XmlBeanDefinitionReader(beanFactory).     reader.loadBeanDefinitions(new ClassPathResource("lookupMethodTests.xml", getClass())). }
false;public;0;7;;@Test public void testWithoutConstructorArg() {     AbstractBean bean = (AbstractBean) beanFactory.getBean("abstractBean").     assertNotNull(bean).     Object expected = bean.get().     assertEquals(TestBean.class, expected.getClass()). }
false;public;0;8;;@Test public void testWithOverloadedArg() {     AbstractBean bean = (AbstractBean) beanFactory.getBean("abstractBean").     assertNotNull(bean).     TestBean expected = bean.get("haha").     assertEquals(TestBean.class, expected.getClass()).     assertEquals("haha", expected.getName()). }
false;public;0;8;;@Test public void testWithOneConstructorArg() {     AbstractBean bean = (AbstractBean) beanFactory.getBean("abstractBean").     assertNotNull(bean).     TestBean expected = bean.getOneArgument("haha").     assertEquals(TestBean.class, expected.getClass()).     assertEquals("haha", expected.getName()). }
false;public;0;9;;@Test public void testWithTwoConstructorArg() {     AbstractBean bean = (AbstractBean) beanFactory.getBean("abstractBean").     assertNotNull(bean).     TestBean expected = bean.getTwoArguments("haha", 72).     assertEquals(TestBean.class, expected.getClass()).     assertEquals("haha", expected.getName()).     assertEquals(72, expected.getAge()). }
false;public;0;11;;@Test public void testWithThreeArgsShouldFail() {     AbstractBean bean = (AbstractBean) beanFactory.getBean("abstractBean").     assertNotNull(bean).     try {         bean.getThreeArguments("name", 1, 2).         fail("TestBean does not have a three arg constructor so this should not have worked").     } catch (AbstractMethodError ex) {     } }
false;public;0;9;;@Test public void testWithOverriddenLookupMethod() {     AbstractBean bean = (AbstractBean) beanFactory.getBean("extendedBean").     assertNotNull(bean).     TestBean expected = bean.getOneArgument("haha").     assertEquals(TestBean.class, expected.getClass()).     assertEquals("haha", expected.getName()).     assertTrue(expected.isJedi()). }
false;public,abstract;0;1;;public abstract TestBean get().
true;public,abstract;1;1;// overloaded ;// overloaded public abstract TestBean get(String name).
false;public,abstract;1;1;;public abstract TestBean getOneArgument(String name).
false;public,abstract;2;1;;public abstract TestBean getTwoArguments(String name, int age).
false;public,abstract;3;1;;public abstract TestBean getThreeArguments(String name, int age, int anotherArg).
