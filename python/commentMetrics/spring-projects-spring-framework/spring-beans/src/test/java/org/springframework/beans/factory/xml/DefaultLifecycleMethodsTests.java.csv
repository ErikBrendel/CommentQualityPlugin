commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Before public void setup() throws Exception {     new XmlBeanDefinitionReader(this.beanFactory).loadBeanDefinitions(new ClassPathResource("defaultLifecycleMethods.xml", getClass())). }
false;public;0;10;;@Test public void lifecycleMethodsInvoked() {     LifecycleAwareBean bean = (LifecycleAwareBean) this.beanFactory.getBean("lifecycleAware").     assertTrue("Bean not initialized", bean.isInitCalled()).     assertFalse("Custom init method called incorrectly", bean.isCustomInitCalled()).     assertFalse("Bean destroyed too early", bean.isDestroyCalled()).     this.beanFactory.destroySingletons().     assertTrue("Bean not destroyed", bean.isDestroyCalled()).     assertFalse("Custom destroy method called incorrectly", bean.isCustomDestroyCalled()). }
false;public;0;9;;@Test public void lifecycleMethodsDisabled() throws Exception {     LifecycleAwareBean bean = (LifecycleAwareBean) this.beanFactory.getBean("lifecycleMethodsDisabled").     assertFalse("Bean init method called incorrectly", bean.isInitCalled()).     assertFalse("Custom init method called incorrectly", bean.isCustomInitCalled()).     this.beanFactory.destroySingletons().     assertFalse("Bean destroy method called incorrectly", bean.isDestroyCalled()).     assertFalse("Custom destroy method called incorrectly", bean.isCustomDestroyCalled()). }
false;public;0;8;;@Test public void ignoreDefaultLifecycleMethods() throws Exception {     DefaultListableBeanFactory bf = new DefaultListableBeanFactory().     new XmlBeanDefinitionReader(bf).loadBeanDefinitions(new ClassPathResource("ignoreDefaultLifecycleMethods.xml", getClass())).     bf.preInstantiateSingletons().     bf.destroySingletons(). }
false;public;0;9;;@Test public void overrideDefaultLifecycleMethods() throws Exception {     LifecycleAwareBean bean = (LifecycleAwareBean) this.beanFactory.getBean("overrideLifecycleMethods").     assertFalse("Default init method called incorrectly", bean.isInitCalled()).     assertTrue("Custom init method not called", bean.isCustomInitCalled()).     this.beanFactory.destroySingletons().     assertFalse("Default destroy method called incorrectly", bean.isDestroyCalled()).     assertTrue("Custom destroy method not called", bean.isCustomDestroyCalled()). }
false;public;0;10;;@Test public void childWithDefaultLifecycleMethods() throws Exception {     LifecycleAwareBean bean = (LifecycleAwareBean) this.beanFactory.getBean("childWithDefaultLifecycleMethods").     assertTrue("Bean not initialized", bean.isInitCalled()).     assertFalse("Custom init method called incorrectly", bean.isCustomInitCalled()).     assertFalse("Bean destroyed too early", bean.isDestroyCalled()).     this.beanFactory.destroySingletons().     assertTrue("Bean not destroyed", bean.isDestroyCalled()).     assertFalse("Custom destroy method called incorrectly", bean.isCustomDestroyCalled()). }
false;public;0;9;;@Test public void childWithLifecycleMethodsDisabled() throws Exception {     LifecycleAwareBean bean = (LifecycleAwareBean) this.beanFactory.getBean("childWithLifecycleMethodsDisabled").     assertFalse("Bean init method called incorrectly", bean.isInitCalled()).     assertFalse("Custom init method called incorrectly", bean.isCustomInitCalled()).     this.beanFactory.destroySingletons().     assertFalse("Bean destroy method called incorrectly", bean.isDestroyCalled()).     assertFalse("Custom destroy method called incorrectly", bean.isCustomDestroyCalled()). }
false;public;0;3;;public void init() {     this.initCalled = true. }
false;public;0;3;;public void destroy() {     this.destroyCalled = true. }
false;public;0;3;;public void customInit() {     this.customInitCalled = true. }
false;public;0;3;;public void customDestroy() {     this.customDestroyCalled = true. }
false;public;0;3;;public boolean isInitCalled() {     return initCalled. }
false;public;0;3;;public boolean isDestroyCalled() {     return destroyCalled. }
false;public;0;3;;public boolean isCustomInitCalled() {     return customInitCalled. }
false;public;0;3;;public boolean isCustomDestroyCalled() {     return customDestroyCalled. }
