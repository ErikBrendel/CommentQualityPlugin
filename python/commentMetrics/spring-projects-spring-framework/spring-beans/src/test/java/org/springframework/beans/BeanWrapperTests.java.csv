commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;4;;@Override protected BeanWrapperImpl createAccessor(Object target) {     return new BeanWrapperImpl(target). }
false;public;0;8;;@Test public void setterDoesNotCallGetter() {     GetterBean target = new GetterBean().     BeanWrapper accessor = createAccessor(target).     accessor.setPropertyValue("name", "tom").     assertEquals("tom", target.getAliasedName()).     assertEquals("tom", accessor.getPropertyValue("aliasedName")). }
false;public;0;9;;@Test public void getterSilentlyFailWithOldValueExtraction() {     GetterBean target = new GetterBean().     BeanWrapper accessor = createAccessor(target).     // This will call the getter     accessor.setExtractOldValueForEditor(true).     accessor.setPropertyValue("name", "tom").     assertEquals("tom", target.getAliasedName()).     assertEquals("tom", accessor.getPropertyValue("aliasedName")). }
false;public;0;8;;@Test public void aliasedSetterThroughDefaultMethod() {     GetterBean target = new GetterBean().     BeanWrapper accessor = createAccessor(target).     accessor.setPropertyValue("aliasedName", "tom").     assertEquals("tom", target.getAliasedName()).     assertEquals("tom", accessor.getPropertyValue("aliasedName")). }
false;public;0;23;;@Test public void setValidAndInvalidPropertyValuesShouldContainExceptionDetails() {     TestBean target = new TestBean().     String newName = "tony".     String invalidTouchy = ".valid".     try {         BeanWrapper accessor = createAccessor(target).         MutablePropertyValues pvs = new MutablePropertyValues().         pvs.addPropertyValue(new PropertyValue("age", "foobar")).         pvs.addPropertyValue(new PropertyValue("name", newName)).         pvs.addPropertyValue(new PropertyValue("touchy", invalidTouchy)).         accessor.setPropertyValues(pvs).         fail("Should throw exception when everything is valid").     } catch (PropertyBatchUpdateException ex) {         assertTrue("Must contain 2 exceptions", ex.getExceptionCount() == 2).         // Test validly set property matches         assertTrue("Valid set property must stick", target.getName().equals(newName)).         assertTrue("Invalid set property must retain old value", target.getAge() == 0).         assertTrue("New value of dodgy setter must be available through exception", ex.getPropertyAccessException("touchy").getPropertyChangeEvent().getNewValue().equals(invalidTouchy)).     } }
false;public;0;14;;@Test public void checkNotWritablePropertyHoldPossibleMatches() {     TestBean target = new TestBean().     try {         BeanWrapper accessor = createAccessor(target).         accessor.setPropertyValue("ag", "foobar").         fail("Should throw exception on invalid property").     } catch (NotWritablePropertyException ex) {         // expected         assertEquals(1, ex.getPossibleMatches().length).         assertEquals("age", ex.getPossibleMatches()[0]).     } }
false;public;0;7;;// Can't be shared. there is no such thing as a read-only field @Test public void setReadOnlyMapProperty() {     TypedReadOnlyMap map = new TypedReadOnlyMap(Collections.singletonMap("key", new TestBean())).     TypedReadOnlyMapClient target = new TypedReadOnlyMapClient().     BeanWrapper accessor = createAccessor(target).     accessor.setPropertyValue("map", map). }
false;public;0;12;;@Test public void notWritablePropertyExceptionContainsAlternativeMatch() {     IntelliBean target = new IntelliBean().     BeanWrapper bw = createAccessor(target).     try {         bw.setPropertyValue("names", "Alef").     } catch (NotWritablePropertyException ex) {         assertNotNull("Possible matches not determined", ex.getPossibleMatches()).         assertEquals("Invalid amount of alternatives", 1, ex.getPossibleMatches().length).     } }
false;public;0;12;;@Test public void notWritablePropertyExceptionContainsAlternativeMatches() {     IntelliBean target = new IntelliBean().     BeanWrapper bw = createAccessor(target).     try {         bw.setPropertyValue("mystring", "Arjen").     } catch (NotWritablePropertyException ex) {         assertNotNull("Possible matches not determined", ex.getPossibleMatches()).         assertEquals("Invalid amount of alternatives", 3, ex.getPossibleMatches().length).     } }
false;public;0;9;;// Can't be shared: no type mismatch with a field @Test public void setPropertyTypeMismatch() {     PropertyTypeMismatch target = new PropertyTypeMismatch().     BeanWrapper accessor = createAccessor(target).     accessor.setPropertyValue("object", "a String").     assertEquals("a String", target.value).     assertTrue(target.getObject() == 8).     assertEquals(8, accessor.getPropertyValue("object")). }
false;public;0;14;;@Test public void propertyDescriptors() {     TestBean target = new TestBean().     target.setSpouse(new TestBean()).     BeanWrapper accessor = createAccessor(target).     accessor.setPropertyValue("name", "a").     accessor.setPropertyValue("spouse.name", "b").     assertEquals("a", target.getName()).     assertEquals("b", target.getSpouse().getName()).     assertEquals("a", accessor.getPropertyValue("name")).     assertEquals("b", accessor.getPropertyValue("spouse.name")).     assertEquals(String.class, accessor.getPropertyDescriptor("name").getPropertyType()).     assertEquals(String.class, accessor.getPropertyDescriptor("spouse.name").getPropertyType()). }
false;public;0;22;;@Test public void getPropertyWithOptional() {     GetterWithOptional target = new GetterWithOptional().     TestBean tb = new TestBean("x").     BeanWrapper accessor = createAccessor(target).     accessor.setPropertyValue("object", tb).     assertSame(tb, target.value).     assertSame(tb, target.getObject().get()).     assertSame(tb, ((Optional<String>) accessor.getPropertyValue("object")).get()).     assertEquals("x", target.value.getName()).     assertEquals("x", target.getObject().get().getName()).     assertEquals("x", accessor.getPropertyValue("object.name")).     accessor.setPropertyValue("object.name", "y").     assertSame(tb, target.value).     assertSame(tb, target.getObject().get()).     assertSame(tb, ((Optional<String>) accessor.getPropertyValue("object")).get()).     assertEquals("y", target.value.getName()).     assertEquals("y", target.getObject().get().getName()).     assertEquals("y", accessor.getPropertyValue("object.name")). }
false;public;0;11;;@Test public void getPropertyWithOptionalAndAutoGrow() {     GetterWithOptional target = new GetterWithOptional().     BeanWrapper accessor = createAccessor(target).     accessor.setAutoGrowNestedPaths(true).     accessor.setPropertyValue("object.name", "x").     assertEquals("x", target.value.getName()).     assertEquals("x", target.getObject().get().getName()).     assertEquals("x", accessor.getPropertyValue("object.name")). }
false;public;0;12;;@Test public void incompletelyQuotedKeyLeadsToPropertyException() {     TestBean target = new TestBean().     try {         BeanWrapper accessor = createAccessor(target).         accessor.setPropertyValue("[']", "foobar").         fail("Should throw exception on invalid property").     } catch (NotWritablePropertyException ex) {         assertNull(ex.getPossibleMatches()).     } }
false;default;0;3;;default String getAliasedName() {     return getName(). }
false;;0;1;;String getName().
false;default;1;3;;default void setAliasedName(String name) {     setName(name). }
false;;1;1;;void setName(String name).
false;public;1;3;;public void setName(String name) {     this.name = name. }
false;public;0;6;;public String getName() {     if (this.name == null) {         throw new RuntimeException("name property must be set").     }     return name. }
false;public;1;2;;public void setName(String name) { }
false;public;1;2;;public void setMyString(String string) { }
false;public;1;2;;public void setMyStrings(String string) { }
false;public;1;2;;public void setMyStriNg(String string) { }
false;public;1;2;;public void setMyStringss(String string) { }
false;public;1;2;;public void setMap(TypedReadOnlyMap map) { }
false;public;1;3;;public void setObject(String object) {     this.value = object. }
false;public;0;3;;public Integer getObject() {     return (this.value != null ? this.value.length() : null). }
false;public;1;3;;public void setObject(TestBean object) {     this.value = object. }
false;public;0;3;;public Optional<TestBean> getObject() {     return Optional.ofNullable(this.value). }
