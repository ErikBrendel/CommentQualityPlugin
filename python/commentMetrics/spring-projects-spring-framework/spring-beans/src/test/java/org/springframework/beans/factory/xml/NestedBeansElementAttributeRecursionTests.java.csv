commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void defaultLazyInit() {     DefaultListableBeanFactory bf = new DefaultListableBeanFactory().     new XmlBeanDefinitionReader(bf).loadBeanDefinitions(new ClassPathResource("NestedBeansElementAttributeRecursionTests-lazy-context.xml", this.getClass())).     assertLazyInits(bf). }
false;public;0;10;;@Test public void defaultLazyInitWithNonValidatingParser() {     DefaultListableBeanFactory bf = new DefaultListableBeanFactory().     XmlBeanDefinitionReader xmlBeanDefinitionReader = new XmlBeanDefinitionReader(bf).     xmlBeanDefinitionReader.setValidating(false).     xmlBeanDefinitionReader.loadBeanDefinitions(new ClassPathResource("NestedBeansElementAttributeRecursionTests-lazy-context.xml", this.getClass())).     assertLazyInits(bf). }
false;private;1;13;;private void assertLazyInits(DefaultListableBeanFactory bf) {     BeanDefinition foo = bf.getBeanDefinition("foo").     BeanDefinition bar = bf.getBeanDefinition("bar").     BeanDefinition baz = bf.getBeanDefinition("baz").     BeanDefinition biz = bf.getBeanDefinition("biz").     BeanDefinition buz = bf.getBeanDefinition("buz").     assertThat(foo.isLazyInit(), is(false)).     assertThat(bar.isLazyInit(), is(true)).     assertThat(baz.isLazyInit(), is(false)).     assertThat(biz.isLazyInit(), is(true)).     assertThat(buz.isLazyInit(), is(true)). }
false;public;0;9;;@Test @SuppressWarnings("unchecked") public void defaultMerge() {     DefaultListableBeanFactory bf = new DefaultListableBeanFactory().     new XmlBeanDefinitionReader(bf).loadBeanDefinitions(new ClassPathResource("NestedBeansElementAttributeRecursionTests-merge-context.xml", this.getClass())).     assertMerge(bf). }
false;public;0;11;;@Test @SuppressWarnings("unchecked") public void defaultMergeWithNonValidatingParser() {     DefaultListableBeanFactory bf = new DefaultListableBeanFactory().     XmlBeanDefinitionReader xmlBeanDefinitionReader = new XmlBeanDefinitionReader(bf).     xmlBeanDefinitionReader.setValidating(false).     xmlBeanDefinitionReader.loadBeanDefinitions(new ClassPathResource("NestedBeansElementAttributeRecursionTests-merge-context.xml", this.getClass())).     assertMerge(bf). }
false;private;1;17;;private void assertMerge(DefaultListableBeanFactory bf) {     TestBean topLevel = bf.getBean("topLevelConcreteTestBean", TestBean.class).     // has the concrete child bean values     assertThat((Iterable<String>) topLevel.getSomeList(), hasItems("charlie", "delta")).     // but does not merge the parent values     assertThat((Iterable<String>) topLevel.getSomeList(), not(hasItems("alpha", "bravo"))).     TestBean firstLevel = bf.getBean("firstLevelNestedTestBean", TestBean.class).     // merges all values     assertThat((Iterable<String>) firstLevel.getSomeList(), hasItems("charlie", "delta", "echo", "foxtrot")).     TestBean secondLevel = bf.getBean("secondLevelNestedTestBean", TestBean.class).     // merges all values     assertThat((Iterable<String>) secondLevel.getSomeList(), hasItems("charlie", "delta", "echo", "foxtrot", "golf", "hotel")). }
false;public;0;8;;@Test public void defaultAutowireCandidates() {     DefaultListableBeanFactory bf = new DefaultListableBeanFactory().     new XmlBeanDefinitionReader(bf).loadBeanDefinitions(new ClassPathResource("NestedBeansElementAttributeRecursionTests-autowire-candidates-context.xml", this.getClass())).     assertAutowireCandidates(bf). }
false;public;0;10;;@Test public void defaultAutowireCandidatesWithNonValidatingParser() {     DefaultListableBeanFactory bf = new DefaultListableBeanFactory().     XmlBeanDefinitionReader xmlBeanDefinitionReader = new XmlBeanDefinitionReader(bf).     xmlBeanDefinitionReader.setValidating(false).     xmlBeanDefinitionReader.loadBeanDefinitions(new ClassPathResource("NestedBeansElementAttributeRecursionTests-autowire-candidates-context.xml", this.getClass())).     assertAutowireCandidates(bf). }
false;private;1;19;;private void assertAutowireCandidates(DefaultListableBeanFactory bf) {     assertThat(bf.getBeanDefinition("fooService").isAutowireCandidate(), is(true)).     assertThat(bf.getBeanDefinition("fooRepository").isAutowireCandidate(), is(true)).     assertThat(bf.getBeanDefinition("other").isAutowireCandidate(), is(false)).     assertThat(bf.getBeanDefinition("barService").isAutowireCandidate(), is(true)).     assertThat(bf.getBeanDefinition("fooController").isAutowireCandidate(), is(false)).     assertThat(bf.getBeanDefinition("bizRepository").isAutowireCandidate(), is(true)).     assertThat(bf.getBeanDefinition("bizService").isAutowireCandidate(), is(false)).     assertThat(bf.getBeanDefinition("bazService").isAutowireCandidate(), is(true)).     assertThat(bf.getBeanDefinition("random").isAutowireCandidate(), is(false)).     assertThat(bf.getBeanDefinition("fooComponent").isAutowireCandidate(), is(false)).     assertThat(bf.getBeanDefinition("fRepository").isAutowireCandidate(), is(false)).     assertThat(bf.getBeanDefinition("aComponent").isAutowireCandidate(), is(true)).     assertThat(bf.getBeanDefinition("someService").isAutowireCandidate(), is(false)). }
false;public;0;23;;@Test public void initMethod() {     DefaultListableBeanFactory bf = new DefaultListableBeanFactory().     new XmlBeanDefinitionReader(bf).loadBeanDefinitions(new ClassPathResource("NestedBeansElementAttributeRecursionTests-init-destroy-context.xml", this.getClass())).     InitDestroyBean beanA = bf.getBean("beanA", InitDestroyBean.class).     InitDestroyBean beanB = bf.getBean("beanB", InitDestroyBean.class).     InitDestroyBean beanC = bf.getBean("beanC", InitDestroyBean.class).     InitDestroyBean beanD = bf.getBean("beanD", InitDestroyBean.class).     assertThat(beanA.initMethod1Called, is(true)).     assertThat(beanB.initMethod2Called, is(true)).     assertThat(beanC.initMethod3Called, is(true)).     assertThat(beanD.initMethod2Called, is(true)).     bf.destroySingletons().     assertThat(beanA.destroyMethod1Called, is(true)).     assertThat(beanB.destroyMethod2Called, is(true)).     assertThat(beanC.destroyMethod3Called, is(true)).     assertThat(beanD.destroyMethod2Called, is(true)). }
false;;0;1;;void initMethod1() {     this.initMethod1Called = true. }
false;;0;1;;void initMethod2() {     this.initMethod2Called = true. }
false;;0;1;;void initMethod3() {     this.initMethod3Called = true. }
false;;0;1;;void destroyMethod1() {     this.destroyMethod1Called = true. }
false;;0;1;;void destroyMethod2() {     this.destroyMethod2Called = true. }
false;;0;1;;void destroyMethod3() {     this.destroyMethod3Called = true. }
