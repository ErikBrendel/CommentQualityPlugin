commented;modifiers;parameterAmount;loc;comment;code
false;public;0;19;;@Test public void testComplexObject() {     ValueBean bean = new ValueBean().     BeanWrapper bw = new BeanWrapperImpl(bean).     Integer value = new Integer(1).     bw.setPropertyValue("value", value).     assertEquals("value not set correctly", bean.getValue(), value).     value = new Integer(2).     bw.setPropertyValue("value", value.toString()).     assertEquals("value not converted", bean.getValue(), value).     bw.setPropertyValue("value", null).     assertNull("value not null", bean.getValue()).     bw.setPropertyValue("value", "").     assertNull("value not converted to null", bean.getValue()). }
false;public;0;3;;public Integer getValue() {     return value. }
false;public;1;3;;public void setValue(Integer value) {     this.value = value. }
false;public;0;11;;@Override public PropertyDescriptor[] getPropertyDescriptors() {     try {         PropertyDescriptor pd = new PropertyDescriptor("value", ValueBean.class).         pd.setPropertyEditorClass(MyNumberEditor.class).         return new PropertyDescriptor[] { pd }.     } catch (IntrospectionException ex) {         throw new FatalBeanException("Couldn't create PropertyDescriptor", ex).     } }
false;public;1;5;;@Override public void setAsText(String text) throws IllegalArgumentException {     Assert.isTrue(this.target instanceof ValueBean, "Target must be available").     super.setAsText(text). }
