commented;modifiers;parameterAmount;loc;comment;code
false;public;2;7;;@Override public Object get(String name, ObjectFactory<?> objectFactory) {     if (index >= objects.size()) {         index = 0.     }     return objects.get(index++). }
false;public;0;28;;@Before public void setUp() {     beanFactory = new DefaultListableBeanFactory().     Scope scope = new NoOpScope() {          private int index.          private List<TestBean> objects = new LinkedList<>().          {             objects.add(new TestBean()).             objects.add(new TestBean()).         }          @Override         public Object get(String name, ObjectFactory<?> objectFactory) {             if (index >= objects.size()) {                 index = 0.             }             return objects.get(index++).         }     }.     beanFactory.registerScope("myScope", scope).     String[] scopeNames = beanFactory.getRegisteredScopeNames().     assertEquals(1, scopeNames.length).     assertEquals("myScope", scopeNames[0]).     assertSame(scope, beanFactory.getRegisteredScope("myScope")).     XmlBeanDefinitionReader xbdr = new XmlBeanDefinitionReader(beanFactory).     xbdr.loadBeanDefinitions(CONTEXT). }
false;public;0;8;;@Test public void testCanGetScopedObject() {     TestBean tb1 = (TestBean) beanFactory.getBean("usesScope").     TestBean tb2 = (TestBean) beanFactory.getBean("usesScope").     assertNotSame(tb1, tb2).     TestBean tb3 = (TestBean) beanFactory.getBean("usesScope").     assertSame(tb3, tb1). }
