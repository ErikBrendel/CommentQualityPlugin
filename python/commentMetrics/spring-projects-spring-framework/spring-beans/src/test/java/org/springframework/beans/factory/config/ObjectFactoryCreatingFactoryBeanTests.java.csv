commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Before public void setUp() {     this.beanFactory = new DefaultListableBeanFactory().     new XmlBeanDefinitionReader(this.beanFactory).loadBeanDefinitions(CONTEXT).     this.beanFactory.setSerializationId("test"). }
false;public;0;4;;@After public void tearDown() {     this.beanFactory.setSerializationId(null). }
false;public;0;9;;@Test public void testFactoryOperation() throws Exception {     FactoryTestBean testBean = beanFactory.getBean("factoryTestBean", FactoryTestBean.class).     ObjectFactory<?> objectFactory = testBean.getObjectFactory().     Date date1 = (Date) objectFactory.getObject().     Date date2 = (Date) objectFactory.getObject().     assertTrue(date1 != date2). }
false;public;0;11;;@Test public void testFactorySerialization() throws Exception {     FactoryTestBean testBean = beanFactory.getBean("factoryTestBean", FactoryTestBean.class).     ObjectFactory<?> objectFactory = testBean.getObjectFactory().     objectFactory = (ObjectFactory) SerializationTestUtils.serializeAndDeserialize(objectFactory).     Date date1 = (Date) objectFactory.getObject().     Date date2 = (Date) objectFactory.getObject().     assertTrue(date1 != date2). }
false;public;0;9;;@Test public void testProviderOperation() throws Exception {     ProviderTestBean testBean = beanFactory.getBean("providerTestBean", ProviderTestBean.class).     Provider<?> provider = testBean.getProvider().     Date date1 = (Date) provider.get().     Date date2 = (Date) provider.get().     assertTrue(date1 != date2). }
false;public;0;11;;@Test public void testProviderSerialization() throws Exception {     ProviderTestBean testBean = beanFactory.getBean("providerTestBean", ProviderTestBean.class).     Provider<?> provider = testBean.getProvider().     provider = (Provider) SerializationTestUtils.serializeAndDeserialize(provider).     Date date1 = (Date) provider.get().     Date date2 = (Date) provider.get().     assertTrue(date1 != date2). }
false;public;0;16;;@Test public void testDoesNotComplainWhenTargetBeanNameRefersToSingleton() throws Exception {     final String targetBeanName = "singleton".     final String expectedSingleton = "Alicia Keys".     BeanFactory beanFactory = mock(BeanFactory.class).     given(beanFactory.getBean(targetBeanName)).willReturn(expectedSingleton).     ObjectFactoryCreatingFactoryBean factory = new ObjectFactoryCreatingFactoryBean().     factory.setTargetBeanName(targetBeanName).     factory.setBeanFactory(beanFactory).     factory.afterPropertiesSet().     ObjectFactory<?> objectFactory = factory.getObject().     Object actualSingleton = objectFactory.getObject().     assertSame(expectedSingleton, actualSingleton). }
false;public;0;8;;@Test public void testWhenTargetBeanNameIsNull() throws Exception {     try {         new ObjectFactoryCreatingFactoryBean().afterPropertiesSet().         fail("Must have thrown an IllegalArgumentException. 'targetBeanName' property not set.").     } catch (IllegalArgumentException expected) {     } }
false;public;0;10;;@Test public void testWhenTargetBeanNameIsEmptyString() throws Exception {     try {         ObjectFactoryCreatingFactoryBean factory = new ObjectFactoryCreatingFactoryBean().         factory.setTargetBeanName("").         factory.afterPropertiesSet().         fail("Must have thrown an IllegalArgumentException. 'targetBeanName' property set to (invalid) empty string.").     } catch (IllegalArgumentException expected) {     } }
false;public;0;10;;@Test public void testWhenTargetBeanNameIsWhitespacedString() throws Exception {     try {         ObjectFactoryCreatingFactoryBean factory = new ObjectFactoryCreatingFactoryBean().         factory.setTargetBeanName("  \t").         factory.afterPropertiesSet().         fail("Must have thrown an IllegalArgumentException. 'targetBeanName' property set to (invalid) only-whitespace string.").     } catch (IllegalArgumentException expected) {     } }
false;public;0;5;;@Test public void testEnsureOFBFBReportsThatItActuallyCreatesObjectFactoryInstances() throws Exception {     assertEquals("Must be reporting that it creates ObjectFactory instances (as per class contract).", ObjectFactory.class, new ObjectFactoryCreatingFactoryBean().getObjectType()). }
false;public;0;3;;public ObjectFactory<?> getObjectFactory() {     return objectFactory. }
false;public;1;3;;public void setObjectFactory(ObjectFactory<?> objectFactory) {     this.objectFactory = objectFactory. }
false;public;0;3;;public Provider<?> getProvider() {     return provider. }
false;public;1;3;;public void setProvider(Provider<?> provider) {     this.provider = provider. }
