commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void setBeanName(String beanName) {     this.beanName = beanName. }
false;public;0;3;;public String getBeanName() {     return beanName. }
false;public;1;4;;@Override public void setBeanFactory(BeanFactory beanFactory) {     this.beanFactory = beanFactory. }
false;public;0;3;;public BeanFactory getBeanFactory() {     return beanFactory. }
false;public;1;3;;public void setPostProcessed(boolean postProcessed) {     this.postProcessed = postProcessed. }
false;public;0;3;;public boolean isPostProcessed() {     return postProcessed. }
false;public;0;4;;@Override public String getName() {     return name. }
false;public;1;4;;@Override public void setName(String name) {     this.name = name. }
false;public;0;3;;public String getSex() {     return sex. }
false;public;1;6;;public void setSex(String sex) {     this.sex = sex.     if (this.name == null) {         this.name = sex.     } }
false;public;0;4;;@Override public int getAge() {     return age. }
false;public;1;4;;@Override public void setAge(int age) {     this.age = age. }
false;public;0;3;;public boolean isJedi() {     return jedi. }
false;public;1;3;;public void setJedi(boolean jedi) {     this.jedi = jedi. }
false;public;0;4;;@Override public ITestBean getSpouse() {     return this.spouse. }
false;public;1;4;;@Override public void setSpouse(ITestBean spouse) {     this.spouse = spouse. }
false;public;0;4;;@Override public ITestBean[] getSpouses() {     return (spouse != null ? new ITestBean[] { spouse } : null). }
false;public;0;3;;public String getTouchy() {     return touchy. }
false;public;1;9;;public void setTouchy(String touchy) throws Exception {     if (touchy.indexOf('.') != -1) {         throw new Exception("Can't contain a .").     }     if (touchy.indexOf(',') != -1) {         throw new NumberFormatException("Number format exception: contains a ,").     }     this.touchy = touchy. }
false;public;0;3;;public String getCountry() {     return country. }
false;public;1;3;;public void setCountry(String country) {     this.country = country. }
false;public;0;4;;@Override public String[] getStringArray() {     return stringArray. }
false;public;1;4;;@Override public void setStringArray(String[] stringArray) {     this.stringArray = stringArray. }
false;public;0;4;;@Override public Integer[] getSomeIntegerArray() {     return someIntegerArray. }
false;public;1;4;;@Override public void setSomeIntegerArray(Integer[] someIntegerArray) {     this.someIntegerArray = someIntegerArray. }
false;public;0;4;;@Override public Integer[][] getNestedIntegerArray() {     return nestedIntegerArray. }
false;public;1;4;;@Override public void setNestedIntegerArray(Integer[][] nestedIntegerArray) {     this.nestedIntegerArray = nestedIntegerArray. }
false;public;0;4;;@Override public int[] getSomeIntArray() {     return someIntArray. }
false;public;1;4;;@Override public void setSomeIntArray(int[] someIntArray) {     this.someIntArray = someIntArray. }
false;public;0;4;;@Override public int[][] getNestedIntArray() {     return nestedIntArray. }
false;public;1;4;;@Override public void setNestedIntArray(int[][] nestedIntArray) {     this.nestedIntArray = nestedIntArray. }
false;public;0;3;;public Date getDate() {     return date. }
false;public;1;3;;public void setDate(Date date) {     this.date = date. }
false;public;0;3;;public Float getMyFloat() {     return myFloat. }
false;public;1;3;;public void setMyFloat(Float myFloat) {     this.myFloat = myFloat. }
false;public;0;3;;public Collection<? super Object> getFriends() {     return friends. }
false;public;1;3;;public void setFriends(Collection<? super Object> friends) {     this.friends = friends. }
false;public;0;3;;public Set<?> getSomeSet() {     return someSet. }
false;public;1;3;;public void setSomeSet(Set<?> someSet) {     this.someSet = someSet. }
false;public;0;3;;public Map<?, ?> getSomeMap() {     return someMap. }
false;public;1;3;;public void setSomeMap(Map<?, ?> someMap) {     this.someMap = someMap. }
false;public;0;3;;public List<?> getSomeList() {     return someList. }
false;public;1;3;;public void setSomeList(List<?> someList) {     this.someList = someList. }
false;public;0;3;;public Properties getSomeProperties() {     return someProperties. }
false;public;1;3;;public void setSomeProperties(Properties someProperties) {     this.someProperties = someProperties. }
false;public;0;4;;@Override public INestedTestBean getDoctor() {     return doctor. }
false;public;1;3;;public void setDoctor(INestedTestBean doctor) {     this.doctor = doctor. }
false;public;0;4;;@Override public INestedTestBean getLawyer() {     return lawyer. }
false;public;1;3;;public void setLawyer(INestedTestBean lawyer) {     this.lawyer = lawyer. }
false;public;0;3;;public Number getSomeNumber() {     return someNumber. }
false;public;1;3;;public void setSomeNumber(Number someNumber) {     this.someNumber = someNumber. }
false;public;0;3;;public Colour getFavouriteColour() {     return favouriteColour. }
false;public;1;3;;public void setFavouriteColour(Colour favouriteColour) {     this.favouriteColour = favouriteColour. }
false;public;0;3;;public Boolean getSomeBoolean() {     return someBoolean. }
false;public;1;3;;public void setSomeBoolean(Boolean someBoolean) {     this.someBoolean = someBoolean. }
false;public;0;4;;@Override public IndexedTestBean getNestedIndexedBean() {     return nestedIndexedBean. }
false;public;1;3;;public void setNestedIndexedBean(IndexedTestBean nestedIndexedBean) {     this.nestedIndexedBean = nestedIndexedBean. }
false;public;0;3;;public List<?> getOtherColours() {     return otherColours. }
false;public;1;3;;public void setOtherColours(List<?> otherColours) {     this.otherColours = otherColours. }
false;public;0;3;;public List<?> getPets() {     return pets. }
false;public;1;3;;public void setPets(List<?> pets) {     this.pets = pets. }
true;public;1;6;/**  * @see org.springframework.tests.sample.beans.ITestBean#exceptional(Throwable)  */ ;/**  * @see org.springframework.tests.sample.beans.ITestBean#exceptional(Throwable)  */ @Override public void exceptional(Throwable t) throws Throwable {     if (t != null) {         throw t.     } }
false;public;0;4;;@Override public void unreliableFileOperation() throws IOException {     throw new IOException(). }
true;public;0;4;/**  * @see org.springframework.tests.sample.beans.ITestBean#returnsThis()  */ ;/**  * @see org.springframework.tests.sample.beans.ITestBean#returnsThis()  */ @Override public Object returnsThis() {     return this. }
true;public;0;3;/**  * @see org.springframework.tests.sample.beans.IOther#absquatulate()  */ ;/**  * @see org.springframework.tests.sample.beans.IOther#absquatulate()  */ @Override public void absquatulate() { }
false;public;0;4;;@Override public int haveBirthday() {     return age++. }
false;public;0;3;;public void destroy() {     this.destroyed = true. }
false;public;0;3;;public boolean wasDestroyed() {     return destroyed. }
false;public;1;11;;@Override public boolean equals(Object other) {     if (this == other) {         return true.     }     if (other == null || !(other instanceof TestBean)) {         return false.     }     TestBean tb2 = (TestBean) other.     return (ObjectUtils.nullSafeEquals(this.name, tb2.name) && this.age == tb2.age). }
false;public;0;4;;@Override public int hashCode() {     return this.age. }
false;public;1;9;;@Override public int compareTo(Object other) {     if (this.name != null && other instanceof TestBean) {         return this.name.compareTo(((TestBean) other).getName()).     } else {         return 1.     } }
false;public;0;4;;@Override public String toString() {     return this.name. }
