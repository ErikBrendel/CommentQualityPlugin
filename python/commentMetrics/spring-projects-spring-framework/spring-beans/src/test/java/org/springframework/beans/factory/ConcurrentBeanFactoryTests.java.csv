commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void registerCustomEditors(PropertyEditorRegistry registry) {     registry.registerCustomEditor(Date.class, new CustomDateEditor((DateFormat) DATE_FORMAT.clone(), false)). }
false;public;0;14;;@Before public void setUp() throws Exception {     Assume.group(TestGroup.PERFORMANCE).     DefaultListableBeanFactory factory = new DefaultListableBeanFactory().     new XmlBeanDefinitionReader(factory).loadBeanDefinitions(CONTEXT).     factory.addPropertyEditorRegistrar(new PropertyEditorRegistrar() {          @Override         public void registerCustomEditors(PropertyEditorRegistry registry) {             registry.registerCustomEditor(Date.class, new CustomDateEditor((DateFormat) DATE_FORMAT.clone(), false)).         }     }).     this.factory = factory. }
false;public;0;6;;@Test public void testSingleThread() {     for (int i = 0. i < 100. i++) {         performTest().     } }
false;public;0;27;;@Test public void testConcurrent() {     for (int i = 0. i < 100. i++) {         TestRun run = new TestRun().         run.setDaemon(true).         set.add(run).     }     for (Iterator<TestRun> it = new HashSet<>(set).iterator(). it.hasNext(). ) {         TestRun run = it.next().         run.start().     }     logger.info("Thread creation over, " + set.size() + " still active.").     synchronized (set) {         while (!set.isEmpty() && ex == null) {             try {                 set.wait().             } catch (InterruptedException e) {                 logger.info(e.toString()).             }             logger.info(set.size() + " threads still active.").         }     }     if (ex != null) {         fail(ex.getMessage()).     } }
false;private;0;7;;private void performTest() {     ConcurrentBean b1 = (ConcurrentBean) factory.getBean("bean1").     ConcurrentBean b2 = (ConcurrentBean) factory.getBean("bean2").     assertEquals(DATE_1, b1.getDate()).     assertEquals(DATE_2, b2.getDate()). }
false;public;0;17;;@Override public void run() {     try {         for (int i = 0. i < 10000. i++) {             performTest().         }     } catch (Throwable e) {         ex = e.     } finally {         synchronized (set) {             set.remove(this).             set.notifyAll().         }     } }
false;public;0;3;;public Date getDate() {     return date. }
false;public;1;3;;public void setDate(Date date) {     this.date = date. }
