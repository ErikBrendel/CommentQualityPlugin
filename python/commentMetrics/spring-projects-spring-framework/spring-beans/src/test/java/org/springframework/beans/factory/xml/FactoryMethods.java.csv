commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;3;;public static FactoryMethods nullInstance() {     return null. }
false;public,static;0;5;;public static FactoryMethods defaultInstance() {     TestBean tb = new TestBean().     tb.setName("defaultInstance").     return new FactoryMethods(tb, "default", 0). }
true;public,static;1;3;/**  * Note that overloaded methods are supported.  */ ;/**  * Note that overloaded methods are supported.  */ public static FactoryMethods newInstance(TestBean tb) {     return new FactoryMethods(tb, "default", 0). }
false;protected,static;3;6;;protected static FactoryMethods newInstance(TestBean tb, int num, String name) {     if (name == null) {         throw new IllegalStateException("Should never be called with null value").     }     return new FactoryMethods(tb, name, num). }
false;static;3;6;;static ExtendedFactoryMethods newInstance(TestBean tb, int num, Integer something) {     if (something != null) {         throw new IllegalStateException("Should never be called with non-null value").     }     return new ExtendedFactoryMethods(tb, null, num). }
false;private,static;0;4;;@SuppressWarnings("unused") private static List listInstance() {     return Collections.EMPTY_LIST. }
false;public;1;3;;public void setStringValue(String stringValue) {     this.stringValue = stringValue. }
false;public;0;3;;public String getStringValue() {     return this.stringValue. }
false;public;0;3;;public TestBean getTestBean() {     return this.tb. }
false;protected;0;3;;protected TestBean protectedGetTestBean() {     return this.tb. }
false;private;0;4;;@SuppressWarnings("unused") private TestBean privateGetTestBean() {     return this.tb. }
false;public;0;3;;public int getNum() {     return num. }
false;public;0;3;;public String getName() {     return name. }
true;public;1;3;/**  * Set via Setter Injection once instance is created.  */ ;/**  * Set via Setter Injection once instance is created.  */ public void setName(String name) {     this.name = name. }
